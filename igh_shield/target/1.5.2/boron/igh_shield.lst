
d:/git/igh/igh_shield/target/1.5.2/boron/igh_shield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005ed4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9ef0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000f0  2003da60  000d9ef4  0001da60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000ca0  2003db50  2003db50  0002db50  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d9fe4  000d9fe4  00029fe4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000da00c  000da00c  0002a00c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001d2da4  00000000  00000000  0002a010  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00027bbc  00000000  00000000  001fcdb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003223f  00000000  00000000  00224970  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003930  00000000  00000000  00256baf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000069d0  00000000  00000000  0025a4df  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0005eb28  00000000  00000000  00260eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0006ffc3  00000000  00000000  002bf9d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011c1bd  00000000  00000000  0032f99a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00010618  00000000  00000000  0044bb58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f005 fb73 	bl	d9718 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f005 fb78 	bl	d972e <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003da60 	.word	0x2003da60
   d4048:	000d9ef4 	.word	0x000d9ef4
   d404c:	2003db50 	.word	0x2003db50
   d4050:	2003db50 	.word	0x2003db50
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f003 fdcb 	bl	d7bf4 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d9ee8 	.word	0x000d9ee8
   d4080:	000d9e44 	.word	0x000d9e44

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 ba3c 	b.w	d4500 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fa3b 	bl	d4504 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f003 bd71 	b.w	d7b78 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f003 b901 	b.w	d729c <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f003 b8ff 	b.w	d729c <malloc>

000d409e <_ZdlPv>:
   d409e:	f003 b905 	b.w	d72ac <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f003 b903 	b.w	d72ac <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <igh_settings_process_settings_tuples>:
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));

} 

uint8_t igh_settings_process_settings_tuples( uint8_t * settings, uint8_t byte_tracker, uint8_t end_index )
{
   d40b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            case SUBID_WATER_DISPENSED_PERIOD_HIGH:
                if(LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH == current_tuple_length)
                {
                    uint8_t new_water_dispensed_period_high[LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH]; 
                    memcpy(new_water_dispensed_period_high, &settings[current_data_index], LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH);
                    igh_current_threshold_settings.water_dispensed_period_high = GET32(new_water_dispensed_period_high);
   d40bc:	4fa8      	ldr	r7, [pc, #672]	; (d4360 <igh_settings_process_settings_tuples+0x2a8>)
            case SUBID_MQTT_BROKER_PORT:
                if(LENGTH_SUBID_MQTT_PORT == current_tuple_length)
                {
                    uint8_t new_mqtt_port[LENGTH_SUBID_MQTT_PORT]; 
                    memcpy(new_mqtt_port, &settings[current_data_index], LENGTH_SUBID_MQTT_PORT);
                    igh_current_system_settings.broker_port = GET16(new_mqtt_port);
   d40be:	f8df 82b0 	ldr.w	r8, [pc, #688]	; d4370 <igh_settings_process_settings_tuples+0x2b8>
                    mqtt_set_broker = 1;
   d40c2:	f8df 92b0 	ldr.w	r9, [pc, #688]	; d4374 <igh_settings_process_settings_tuples+0x2bc>
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));

} 

uint8_t igh_settings_process_settings_tuples( uint8_t * settings, uint8_t byte_tracker, uint8_t end_index )
{
   d40c6:	4605      	mov	r5, r0
   d40c8:	468b      	mov	fp, r1
   d40ca:	4692      	mov	sl, r2
    //cycle through tuples to get the settings data
    uint8_t current_tuple_id;
    uint8_t current_tuple_length;
    uint8_t current_data_index;

    while(byte_tracker < end_index)
   d40cc:	45d3      	cmp	fp, sl
   d40ce:	f080 8191 	bcs.w	d43f4 <igh_settings_process_settings_tuples+0x33c>
    {
        // extract tuples
        current_tuple_id = settings[byte_tracker];
        // extract the length
        current_tuple_length = settings[byte_tracker + 1]; // should always follow
   d40d2:	eb05 030b 	add.w	r3, r5, fp
        // extract the tuple data based on tuple id
        current_data_index = byte_tracker + 2;
   d40d6:	f10b 0402 	add.w	r4, fp, #2
    while(byte_tracker < end_index)
    {
        // extract tuples
        current_tuple_id = settings[byte_tracker];
        // extract the length
        current_tuple_length = settings[byte_tracker + 1]; // should always follow
   d40da:	785e      	ldrb	r6, [r3, #1]
        // extract the tuple data based on tuple id
        current_data_index = byte_tracker + 2;

        switch(current_tuple_id)
   d40dc:	f815 300b 	ldrb.w	r3, [r5, fp]
   d40e0:	3b01      	subs	r3, #1
        // extract tuples
        current_tuple_id = settings[byte_tracker];
        // extract the length
        current_tuple_length = settings[byte_tracker + 1]; // should always follow
        // extract the tuple data based on tuple id
        current_data_index = byte_tracker + 2;
   d40e2:	b2e4      	uxtb	r4, r4

        switch(current_tuple_id)
   d40e4:	2b39      	cmp	r3, #57	; 0x39
   d40e6:	f200 817f 	bhi.w	d43e8 <igh_settings_process_settings_tuples+0x330>
   d40ea:	e8df f013 	tbh	[pc, r3, lsl #1]
   d40ee:	003a      	.short	0x003a
   d40f0:	00630052 	.word	0x00630052
   d40f4:	00740044 	.word	0x00740044
   d40f8:	017d0086 	.word	0x017d0086
   d40fc:	017d017d 	.word	0x017d017d
   d4100:	017d017d 	.word	0x017d017d
   d4104:	017d017d 	.word	0x017d017d
   d4108:	017d017d 	.word	0x017d017d
   d410c:	00a80094 	.word	0x00a80094
   d4110:	00d000bc 	.word	0x00d000bc
   d4114:	00f800e4 	.word	0x00f800e4
   d4118:	011e0115 	.word	0x011e0115
   d411c:	014e0130 	.word	0x014e0130
   d4120:	017d0160 	.word	0x017d0160
   d4124:	017d017d 	.word	0x017d017d
   d4128:	017d017d 	.word	0x017d017d
   d412c:	017d017d 	.word	0x017d017d
   d4130:	017d017d 	.word	0x017d017d
   d4134:	017d017d 	.word	0x017d017d
   d4138:	017d017d 	.word	0x017d017d
   d413c:	017d017d 	.word	0x017d017d
   d4140:	017d017d 	.word	0x017d017d
   d4144:	017d017d 	.word	0x017d017d
   d4148:	017d017d 	.word	0x017d017d
   d414c:	00b2009e 	.word	0x00b2009e
   d4150:	00da00c6 	.word	0x00da00c6
   d4154:	010200ee 	.word	0x010200ee
   d4158:	0127010c 	.word	0x0127010c
   d415c:	01570145 	.word	0x01570145
   d4160:	016f      	.short	0x016f
        {
            case SUBID_OPSTATE:
                if(LENGTH_SUBID_OPSTATE == current_tuple_length)
   d4162:	2e01      	cmp	r6, #1
   d4164:	f040 8149 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    // check if new state is valid
                    if( (OP_INACTIVE == (settings[current_data_index]))|| 
   d4168:	5d2b      	ldrb	r3, [r5, r4]
   d416a:	2b03      	cmp	r3, #3
   d416c:	f200 813c 	bhi.w	d43e8 <igh_settings_process_settings_tuples+0x330>
                        (OP_BASIC == (settings[current_data_index]))||
                        (OP_STANDARD == (settings[current_data_index]))||
                        (OP_PREMIUM == (settings[current_data_index]))  
                    )
                    {
                        igh_current_system_settings.op_state = (device_op_state)settings[current_data_index];
   d4170:	f888 3001 	strb.w	r3, [r8, #1]
   d4174:	e138      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>
                    return 0;
                }
                break;

            case SUBID_SET_SERIAL_NUMBER:
                if(LENGTH_SUBID_SET_SERIAL_NUMBER == current_tuple_length)
   d4176:	2e0c      	cmp	r6, #12
   d4178:	f040 813f 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    memcpy(igh_current_system_settings.serial_number, &settings[current_data_index], LENGTH_SUBID_SET_SERIAL_NUMBER);
   d417c:	442c      	add	r4, r5
   d417e:	4b79      	ldr	r3, [pc, #484]	; (d4364 <igh_settings_process_settings_tuples+0x2ac>)
   d4180:	6820      	ldr	r0, [r4, #0]
   d4182:	6861      	ldr	r1, [r4, #4]
   d4184:	c303      	stmia	r3!, {r0, r1}
   d4186:	68a0      	ldr	r0, [r4, #8]
   d4188:	6018      	str	r0, [r3, #0]
                    initialize_rfm69 = 1;
   d418a:	4b77      	ldr	r3, [pc, #476]	; (d4368 <igh_settings_process_settings_tuples+0x2b0>)
   d418c:	2201      	movs	r2, #1
   d418e:	701a      	strb	r2, [r3, #0]
                else
                {
                    // stop processing any more settings as they may be corrupt
                    return 0;
                }
                break;
   d4190:	e12a      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_REPORTING_INTERVAL:
                if(LENGTH_SUBID_REPORTING_INTERVAL == current_tuple_length)
   d4192:	2e04      	cmp	r6, #4
   d4194:	f040 8131 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_reporting_interval[LENGTH_SUBID_REPORTING_INTERVAL]; 
                    memcpy(new_reporting_interval, &settings[current_data_index], LENGTH_SUBID_REPORTING_INTERVAL);
   d4198:	1929      	adds	r1, r5, r4
                    igh_current_system_settings.reporting_interval = GET32(new_reporting_interval);
   d419a:	5d2a      	ldrb	r2, [r5, r4]
   d419c:	784b      	ldrb	r3, [r1, #1]
   d419e:	041b      	lsls	r3, r3, #16
   d41a0:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   d41a4:	78ca      	ldrb	r2, [r1, #3]
   d41a6:	4413      	add	r3, r2
   d41a8:	788a      	ldrb	r2, [r1, #2]
   d41aa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d41ae:	f8c8 3004 	str.w	r3, [r8, #4]
                else
                {
                    // stop processing any more settings as they may be corrupt
                    return 0;
                }
                break;
   d41b2:	e119      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_DATA_RESOLUTION:
                if(LENGTH_SUBID_DATA_RESOLUTION == current_tuple_length)
   d41b4:	2e04      	cmp	r6, #4
   d41b6:	f040 8120 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_data_resolution[LENGTH_SUBID_DATA_RESOLUTION]; 
                    memcpy(new_data_resolution, &settings[current_data_index], LENGTH_SUBID_DATA_RESOLUTION);
   d41ba:	1929      	adds	r1, r5, r4
                    igh_current_system_settings.data_resolution = GET32(new_data_resolution);
   d41bc:	5d2a      	ldrb	r2, [r5, r4]
   d41be:	784b      	ldrb	r3, [r1, #1]
   d41c0:	041b      	lsls	r3, r3, #16
   d41c2:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   d41c6:	78ca      	ldrb	r2, [r1, #3]
   d41c8:	4413      	add	r3, r2
   d41ca:	788a      	ldrb	r2, [r1, #2]
   d41cc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d41d0:	f8c8 3008 	str.w	r3, [r8, #8]
                }
                else
                {
                    return 0;
                }
                break;
   d41d4:	e108      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_MQTT_BROKER:
                if( sizeof(igh_current_system_settings.broker) > current_tuple_length)
   d41d6:	2e1f      	cmp	r6, #31
   d41d8:	f200 810f 	bhi.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    memset(igh_current_system_settings.broker, '\0', sizeof(igh_current_system_settings.broker));
   d41dc:	2220      	movs	r2, #32
   d41de:	2100      	movs	r1, #0
   d41e0:	4862      	ldr	r0, [pc, #392]	; (d436c <igh_settings_process_settings_tuples+0x2b4>)
   d41e2:	f005 faa4 	bl	d972e <memset>
                    memcpy(igh_current_system_settings.broker, &settings[current_data_index], current_tuple_length);
   d41e6:	4632      	mov	r2, r6
   d41e8:	1929      	adds	r1, r5, r4
   d41ea:	4860      	ldr	r0, [pc, #384]	; (d436c <igh_settings_process_settings_tuples+0x2b4>)
   d41ec:	f005 fa94 	bl	d9718 <memcpy>
                    igh_current_system_settings.broker[current_tuple_length] = '\0'; // terminate the string
   d41f0:	eb08 0306 	add.w	r3, r8, r6
   d41f4:	2200      	movs	r2, #0
   d41f6:	761a      	strb	r2, [r3, #24]
   d41f8:	e009      	b.n	d420e <igh_settings_process_settings_tuples+0x156>
                    return 0;
                }
                break;

            case SUBID_MQTT_BROKER_PORT:
                if(LENGTH_SUBID_MQTT_PORT == current_tuple_length)
   d41fa:	2e02      	cmp	r6, #2
   d41fc:	f040 80fd 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_mqtt_port[LENGTH_SUBID_MQTT_PORT]; 
                    memcpy(new_mqtt_port, &settings[current_data_index], LENGTH_SUBID_MQTT_PORT);
   d4200:	192b      	adds	r3, r5, r4
                    igh_current_system_settings.broker_port = GET16(new_mqtt_port);
   d4202:	5d2a      	ldrb	r2, [r5, r4]
   d4204:	785b      	ldrb	r3, [r3, #1]
   d4206:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d420a:	f8a8 3038 	strh.w	r3, [r8, #56]	; 0x38
                    mqtt_set_broker = 1;
   d420e:	2301      	movs	r3, #1
   d4210:	f889 3000 	strb.w	r3, [r9]
                }
                else
                {
                    return 0;
                }
                break; 
   d4214:	e0e8      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_SOIL_MOISTURE_LOW:
                if(LENGTH_SUBID_SOIL_MOISTURE_LOW == current_tuple_length)
   d4216:	2e02      	cmp	r6, #2
   d4218:	f040 80ef 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_moisture_low_th[LENGTH_SUBID_SOIL_MOISTURE_LOW]; 
                    memcpy(new_moisture_low_th, &settings[current_data_index], LENGTH_SUBID_SOIL_MOISTURE_LOW);
   d421c:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_moisture_low = GET16(new_moisture_low_th);
   d421e:	5d2a      	ldrb	r2, [r5, r4]
   d4220:	785b      	ldrb	r3, [r3, #1]
   d4222:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4226:	807b      	strh	r3, [r7, #2]
                }
                else
                {
                    return 0;
                }
                break; 
   d4228:	e0de      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_SOIL_MOISTURE_HIGH:
                if(LENGTH_SUBID_SOIL_MOISTURE_HIGH == current_tuple_length)
   d422a:	2e02      	cmp	r6, #2
   d422c:	f040 80e5 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_moisture_high_th[LENGTH_SUBID_SOIL_MOISTURE_HIGH]; 
                    memcpy(new_moisture_high_th, &settings[current_data_index], LENGTH_SUBID_SOIL_MOISTURE_LOW);
   d4230:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_moisture_high = GET16(new_moisture_high_th);
   d4232:	5d2a      	ldrb	r2, [r5, r4]
   d4234:	785b      	ldrb	r3, [r3, #1]
   d4236:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d423a:	83bb      	strh	r3, [r7, #28]
                }
                else
                {
                    return 0;
                }
                break; 
   d423c:	e0d4      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_AIR_HUMIDITY_LOW:
                if(LENGTH_SUBID_AIR_HUMIDITY_LOW  == current_tuple_length)
   d423e:	2e02      	cmp	r6, #2
   d4240:	f040 80db 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_air_humidity_low_th[LENGTH_SUBID_AIR_HUMIDITY_LOW]; 
                    memcpy(new_air_humidity_low_th, &settings[current_data_index], LENGTH_SUBID_AIR_HUMIDITY_LOW);
   d4244:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.air_humidity_low = GET16(new_air_humidity_low_th);
   d4246:	5d2a      	ldrb	r2, [r5, r4]
   d4248:	785b      	ldrb	r3, [r3, #1]
   d424a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d424e:	80bb      	strh	r3, [r7, #4]
                }
                else
                {
                    return 0;
                }
                break; 
   d4250:	e0ca      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_AIR_HUMIDITY_HIGH:
                if(LENGTH_SUBID_AIR_HUMIDITY_HIGH  == current_tuple_length)
   d4252:	2e02      	cmp	r6, #2
   d4254:	f040 80d1 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_air_humidity_high_th[LENGTH_SUBID_AIR_HUMIDITY_HIGH]; 
                    memcpy(new_air_humidity_high_th, &settings[current_data_index], LENGTH_SUBID_AIR_HUMIDITY_HIGH);
   d4258:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.air_humidity_high = GET16(new_air_humidity_high_th);
   d425a:	5d2a      	ldrb	r2, [r5, r4]
   d425c:	785b      	ldrb	r3, [r3, #1]
   d425e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4262:	83fb      	strh	r3, [r7, #30]
                }
                else
                {
                    return 0;
                }
                break;
   d4264:	e0c0      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_SOIL_HUMIDITY_LOW:
                if(LENGTH_SUBID_SOIL_HUMIDITY_LOW  == current_tuple_length)
   d4266:	2e02      	cmp	r6, #2
   d4268:	f040 80c7 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_soil_humidity_low_th[LENGTH_SUBID_SOIL_HUMIDITY_LOW]; 
                    memcpy(new_soil_humidity_low_th, &settings[current_data_index], LENGTH_SUBID_SOIL_HUMIDITY_LOW);
   d426c:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_humidity_low = GET16(new_soil_humidity_low_th);
   d426e:	5d2a      	ldrb	r2, [r5, r4]
   d4270:	785b      	ldrb	r3, [r3, #1]
   d4272:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4276:	80fb      	strh	r3, [r7, #6]
                }
                else
                {
                    return 0;
                }
                break; 
   d4278:	e0b6      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_SOIL_HUMIDITY_HIGH:
                if(LENGTH_SUBID_SOIL_HUMIDITY_HIGH  == current_tuple_length)
   d427a:	2e02      	cmp	r6, #2
   d427c:	f040 80bd 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_soil_humidity_high_th[LENGTH_SUBID_SOIL_HUMIDITY_HIGH]; 
                    memcpy(new_soil_humidity_high_th, &settings[current_data_index], LENGTH_SUBID_SOIL_HUMIDITY_HIGH);
   d4280:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_humidity_high = GET16(new_soil_humidity_high_th);
   d4282:	5d2a      	ldrb	r2, [r5, r4]
   d4284:	785b      	ldrb	r3, [r3, #1]
   d4286:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d428a:	843b      	strh	r3, [r7, #32]
                }
                else
                {
                    return 0;
                }
                break;
   d428c:	e0ac      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_CARBON_DIOXIDE_LOW:
                if(LENGTH_SUBID_CARBON_DIOXIDE_LOW  == current_tuple_length)
   d428e:	2e02      	cmp	r6, #2
   d4290:	f040 80b3 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_carbon_dioxide_low_th[LENGTH_SUBID_CARBON_DIOXIDE_LOW]; 
                    memcpy(new_carbon_dioxide_low_th, &settings[current_data_index], LENGTH_SUBID_CARBON_DIOXIDE_LOW);
   d4294:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.carbon_dioxide_low = GET16(new_carbon_dioxide_low_th);
   d4296:	5d2a      	ldrb	r2, [r5, r4]
   d4298:	785b      	ldrb	r3, [r3, #1]
   d429a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d429e:	813b      	strh	r3, [r7, #8]
                }
                else
                {
                    return 0;
                }
                break; 
   d42a0:	e0a2      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_CARBON_DIOXIDE_HIGH:
                if(LENGTH_SUBID_CARBON_DIOXIDE_HIGH  == current_tuple_length)
   d42a2:	2e02      	cmp	r6, #2
   d42a4:	f040 80a9 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_carbon_dioxide_high_th[LENGTH_SUBID_CARBON_DIOXIDE_HIGH]; 
                    memcpy(new_carbon_dioxide_high_th, &settings[current_data_index], LENGTH_SUBID_CARBON_DIOXIDE_HIGH);
   d42a8:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.carbon_dioxide_high = GET16(new_carbon_dioxide_high_th);
   d42aa:	5d2a      	ldrb	r2, [r5, r4]
   d42ac:	785b      	ldrb	r3, [r3, #1]
   d42ae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d42b2:	847b      	strh	r3, [r7, #34]	; 0x22
                }
                else
                {
                    return 0;
                }
                break;
   d42b4:	e098      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_AIR_TEMPERATURE_LOW:
                if(LENGTH_SUBID_AIR_TEMPERATURE_LOW  == current_tuple_length)
   d42b6:	2e02      	cmp	r6, #2
   d42b8:	f040 809f 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_air_temperature_low_th[LENGTH_SUBID_AIR_TEMPERATURE_LOW]; 
                    memcpy(new_air_temperature_low_th, &settings[current_data_index], LENGTH_SUBID_AIR_TEMPERATURE_LOW);
   d42bc:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.air_temperature_low = GET16(new_air_temperature_low_th);
   d42be:	5d2a      	ldrb	r2, [r5, r4]
   d42c0:	785b      	ldrb	r3, [r3, #1]
   d42c2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d42c6:	817b      	strh	r3, [r7, #10]
                }
                else
                {
                    return 0;
                }
                break; 
   d42c8:	e08e      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_AIR_TEMPERATURE_HIGH:
                if(LENGTH_SUBID_AIR_TEMPERATURE_HIGH  == current_tuple_length)
   d42ca:	2e02      	cmp	r6, #2
   d42cc:	f040 8095 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_air_temperature_high_th[LENGTH_SUBID_AIR_TEMPERATURE_HIGH]; 
                    memcpy(new_air_temperature_high_th, &settings[current_data_index], LENGTH_SUBID_AIR_TEMPERATURE_HIGH);
   d42d0:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.air_temperature_high = GET16(new_air_temperature_high_th);
   d42d2:	5d2a      	ldrb	r2, [r5, r4]
   d42d4:	785b      	ldrb	r3, [r3, #1]
   d42d6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d42da:	84bb      	strh	r3, [r7, #36]	; 0x24
                }
                else
                {
                    return 0;
                }
                break;
   d42dc:	e084      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_SOIL_TEMPERATURE_LOW:
                if(LENGTH_SUBID_SOIL_TEMPERATURE_LOW  == current_tuple_length)
   d42de:	2e02      	cmp	r6, #2
   d42e0:	f040 808b 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_soil_temperature_low_th[LENGTH_SUBID_SOIL_TEMPERATURE_LOW]; 
                    memcpy(new_soil_temperature_low_th, &settings[current_data_index], LENGTH_SUBID_SOIL_TEMPERATURE_LOW);
   d42e4:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_temperature_low = GET16(new_soil_temperature_low_th);
   d42e6:	5d2a      	ldrb	r2, [r5, r4]
   d42e8:	785b      	ldrb	r3, [r3, #1]
   d42ea:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d42ee:	81bb      	strh	r3, [r7, #12]
                }
                else
                {
                    return 0;
                }
                break; 
   d42f0:	e07a      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_SOIL_TEMPERATURE_HIGH:
                if(LENGTH_SUBID_SOIL_TEMPERATURE_HIGH  == current_tuple_length)
   d42f2:	2e02      	cmp	r6, #2
   d42f4:	f040 8081 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_soil_temperature_high_th[LENGTH_SUBID_SOIL_TEMPERATURE_HIGH]; 
                    memcpy(new_soil_temperature_high_th, &settings[current_data_index], LENGTH_SUBID_SOIL_TEMPERATURE_HIGH);
   d42f8:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_temperature_high = GET16(new_soil_temperature_high_th);
   d42fa:	5d2a      	ldrb	r2, [r5, r4]
   d42fc:	785b      	ldrb	r3, [r3, #1]
   d42fe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4302:	84fb      	strh	r3, [r7, #38]	; 0x26
                }
                else
                {
                    return 0;
                }
                break;    
   d4304:	e070      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_SOIL_NPK_HIGH:
                if(LENGTH_SUBID_SOIL_NPK_HIGH  == current_tuple_length)
   d4306:	2e02      	cmp	r6, #2
   d4308:	d177      	bne.n	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_soil_npk_high_th[LENGTH_SUBID_SOIL_NPK_HIGH]; 
                    memcpy(new_soil_npk_high_th, &settings[current_data_index], LENGTH_SUBID_SOIL_NPK_HIGH);
   d430a:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_npk_high = GET16(new_soil_npk_high_th);
   d430c:	5d2a      	ldrb	r2, [r5, r4]
   d430e:	785b      	ldrb	r3, [r3, #1]
   d4310:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4314:	853b      	strh	r3, [r7, #40]	; 0x28
                }
                else
                {
                    return 0;
                }
                break;   
   d4316:	e067      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_SOIL_NPK_LOW:
                if(LENGTH_SUBID_SOIL_NPK_LOW  == current_tuple_length)
   d4318:	2e02      	cmp	r6, #2
   d431a:	d16e      	bne.n	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_soil_npk_low_th[LENGTH_SUBID_SOIL_NPK_LOW]; 
                    memcpy(new_soil_npk_low_th, &settings[current_data_index], LENGTH_SUBID_SOIL_NPK_LOW);
   d431c:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_npk_low = GET16(new_soil_npk_low_th);
   d431e:	5d2a      	ldrb	r2, [r5, r4]
   d4320:	785b      	ldrb	r3, [r3, #1]
   d4322:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4326:	81fb      	strh	r3, [r7, #14]
                }
                else
                {
                    return 0;
                }
                break; 
   d4328:	e05e      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_LIGHT_INTENSITY_LOW:
                if(LENGTH_SUBID_LIGHT_INTENSITY_LOW  == current_tuple_length)
   d432a:	2e02      	cmp	r6, #2
   d432c:	d165      	bne.n	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_light_intensity_low_th[LENGTH_SUBID_LIGHT_INTENSITY_LOW]; 
                    memcpy(new_light_intensity_low_th, &settings[current_data_index], LENGTH_SUBID_LIGHT_INTENSITY_LOW);
   d432e:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.light_intensity_low = GET16(new_light_intensity_low_th);
   d4330:	5d2a      	ldrb	r2, [r5, r4]
   d4332:	785b      	ldrb	r3, [r3, #1]
   d4334:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4338:	823b      	strh	r3, [r7, #16]
                }
                else
                {
                    return 0;
                }
                break; 
   d433a:	e055      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_LIGHT_INTENSITY_HIGH:
                if(LENGTH_SUBID_LIGHT_INTENSITY_HIGH  == current_tuple_length)
   d433c:	2e02      	cmp	r6, #2
   d433e:	d15c      	bne.n	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_light_intensity_high_th[LENGTH_SUBID_LIGHT_INTENSITY_HIGH]; 
                    memcpy(new_light_intensity_high_th, &settings[current_data_index], LENGTH_SUBID_LIGHT_INTENSITY_HIGH);
   d4340:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.light_intensity_high = GET16(new_light_intensity_high_th);
   d4342:	5d2a      	ldrb	r2, [r5, r4]
   d4344:	785b      	ldrb	r3, [r3, #1]
   d4346:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d434a:	857b      	strh	r3, [r7, #42]	; 0x2a
                }
                else
                {
                    return 0;
                }
                break; 
   d434c:	e04c      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_SHIELD_BATTERY_LEVEL_LOW:
                if(LENGTH_SUBID_SHIELD_BATTERY_LEVEL_LOW  == current_tuple_length)
   d434e:	2e02      	cmp	r6, #2
   d4350:	d153      	bne.n	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_shield_battery_low_th[LENGTH_SUBID_SHIELD_BATTERY_LEVEL_LOW]; 
                    memcpy(new_shield_battery_low_th, &settings[current_data_index], LENGTH_SUBID_SHIELD_BATTERY_LEVEL_LOW);
   d4352:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.shield_battery_level_low = GET16(new_shield_battery_low_th);
   d4354:	5d2a      	ldrb	r2, [r5, r4]
   d4356:	785b      	ldrb	r3, [r3, #1]
   d4358:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d435c:	827b      	strh	r3, [r7, #18]
                }
                else
                {
                    return 0;
                }
                break;
   d435e:	e043      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>
   d4360:	2003e680 	.word	0x2003e680
   d4364:	2003e64c 	.word	0x2003e64c
   d4368:	2003db54 	.word	0x2003db54
   d436c:	2003e658 	.word	0x2003e658
   d4370:	2003e640 	.word	0x2003e640
   d4374:	2003da60 	.word	0x2003da60

            case SUBID_SHIELD_BATTERY_LEVEL_HIGH:
                if(LENGTH_SUBID_SHIELD_BATTERY_LEVEL_HIGH  == current_tuple_length)
   d4378:	2e02      	cmp	r6, #2
   d437a:	d13e      	bne.n	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_shield_battery_high_th[LENGTH_SUBID_SHIELD_BATTERY_LEVEL_HIGH]; 
                    memcpy(new_shield_battery_high_th, &settings[current_data_index], LENGTH_SUBID_SHIELD_BATTERY_LEVEL_HIGH);
   d437c:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.shield_battery_level_high = GET16(new_shield_battery_high_th);
   d437e:	5d2a      	ldrb	r2, [r5, r4]
   d4380:	785b      	ldrb	r3, [r3, #1]
   d4382:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4386:	85bb      	strh	r3, [r7, #44]	; 0x2c
                }
                else
                {
                    return 0;
                }
                break;  
   d4388:	e02e      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_SPEAR_BATTERY_LEVEL_LOW:
                if(LENGTH_SUBID_SPEAR_BATTERY_LEVEL_LOW  == current_tuple_length)
   d438a:	2e02      	cmp	r6, #2
   d438c:	d135      	bne.n	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_spear_battery_low_th[LENGTH_SUBID_SPEAR_BATTERY_LEVEL_LOW]; 
                    memcpy(new_spear_battery_low_th, &settings[current_data_index], LENGTH_SUBID_SPEAR_BATTERY_LEVEL_LOW);
   d438e:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.spear_battery_level_low = GET16(new_spear_battery_low_th);
   d4390:	5d2a      	ldrb	r2, [r5, r4]
   d4392:	785b      	ldrb	r3, [r3, #1]
   d4394:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4398:	82bb      	strh	r3, [r7, #20]
                }
                else
                {
                    return 0;
                }
                break;
   d439a:	e025      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_SPEAR_BATTERY_LEVEL_HIGH:
                if(LENGTH_SUBID_SPEAR_BATTERY_LEVEL_HIGH  == current_tuple_length)
   d439c:	2e02      	cmp	r6, #2
   d439e:	d12c      	bne.n	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_spear_battery_high_th[LENGTH_SUBID_SPEAR_BATTERY_LEVEL_HIGH]; 
                    memcpy(new_spear_battery_high_th, &settings[current_data_index], LENGTH_SUBID_SPEAR_BATTERY_LEVEL_HIGH);
   d43a0:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.spear_battery_level_high = GET16(new_spear_battery_high_th);
   d43a2:	5d2a      	ldrb	r2, [r5, r4]
   d43a4:	785b      	ldrb	r3, [r3, #1]
   d43a6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d43aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
                }
                else
                {
                    return 0;
                }
                break;
   d43ac:	e01c      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_WATER_DISPENSED_PERIOD_LOW:
                if(LENGTH_SUBID_WATER_DISPENSED_PERIOD_LOW == current_tuple_length)
   d43ae:	2e04      	cmp	r6, #4
   d43b0:	d123      	bne.n	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_water_dispensed_period_low[LENGTH_SUBID_WATER_DISPENSED_PERIOD_LOW]; 
                    memcpy(new_water_dispensed_period_low, &settings[current_data_index], LENGTH_SUBID_WATER_DISPENSED_PERIOD_LOW);
   d43b2:	1929      	adds	r1, r5, r4
                    igh_current_threshold_settings.water_dispensed_period_low = GET32(new_water_dispensed_period_low);
   d43b4:	5d2a      	ldrb	r2, [r5, r4]
   d43b6:	784b      	ldrb	r3, [r1, #1]
   d43b8:	041b      	lsls	r3, r3, #16
   d43ba:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   d43be:	78ca      	ldrb	r2, [r1, #3]
   d43c0:	4413      	add	r3, r2
   d43c2:	788a      	ldrb	r2, [r1, #2]
   d43c4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d43c8:	61bb      	str	r3, [r7, #24]
                else
                {
                    // stop processing any more settings as they may be corrupt
                    return 0;
                }
                break;
   d43ca:	e00d      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_WATER_DISPENSED_PERIOD_HIGH:
                if(LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH == current_tuple_length)
   d43cc:	2e04      	cmp	r6, #4
   d43ce:	d114      	bne.n	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_water_dispensed_period_high[LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH]; 
                    memcpy(new_water_dispensed_period_high, &settings[current_data_index], LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH);
   d43d0:	1929      	adds	r1, r5, r4
                    igh_current_threshold_settings.water_dispensed_period_high = GET32(new_water_dispensed_period_high);
   d43d2:	5d2a      	ldrb	r2, [r5, r4]
   d43d4:	784b      	ldrb	r3, [r1, #1]
   d43d6:	041b      	lsls	r3, r3, #16
   d43d8:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   d43dc:	78ca      	ldrb	r2, [r1, #3]
   d43de:	4413      	add	r3, r2
   d43e0:	788a      	ldrb	r2, [r1, #2]
   d43e2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d43e6:	633b      	str	r3, [r7, #48]	; 0x30

            default: // nothing to do hear
                break;
        }
        // move index to next tuple id
        byte_tracker += current_tuple_length + TUPLE_HEADER_LEN;
   d43e8:	1cb3      	adds	r3, r6, #2
   d43ea:	eb0b 0603 	add.w	r6, fp, r3
   d43ee:	fa5f fb86 	uxtb.w	fp, r6
   d43f2:	e66b      	b.n	d40cc <igh_settings_process_settings_tuples+0x14>
    }
    return 1;
   d43f4:	2001      	movs	r0, #1
   d43f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    
                }
                else
                {
                    // stop processing any more settings as they may be corrupt
                    return 0;
   d43fa:	2000      	movs	r0, #0
        }
        // move index to next tuple id
        byte_tracker += current_tuple_length + TUPLE_HEADER_LEN;
    }
    return 1;
}
   d43fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4400 <igh_settings_calculate_checksum>:
 * struct must have a single byte at the end designated for the checksum for this to work
 * \param p_struct: pointer to data struct, total_bytes: sizeof(data struct)
 * \return the checksum
 */
uint8_t igh_settings_calculate_checksum(void * p_struct, size_t total_bytes)
{
   d4400:	b510      	push	{r4, lr}
    data = (uint8_t *)p_struct;

    // uint8_t data_buffer[length];
    // memcpy(data_buffer, data, length);

    data += 1; // ignore checksum byte
   d4402:	1c42      	adds	r2, r0, #1
 */
uint8_t igh_settings_calculate_checksum(void * p_struct, size_t total_bytes)
{
    uint8_t length = (uint8_t)total_bytes; 
    uint8_t * data;
    int sum = 0;
   d4404:	2300      	movs	r3, #0
    // uint8_t data_buffer[length];
    // memcpy(data_buffer, data, length);

    data += 1; // ignore checksum byte
    // start at 1 to ignore the checksum byte
    for( int i = 1; i < length; i++)
   d4406:	b2c9      	uxtb	r1, r1
   d4408:	1a14      	subs	r4, r2, r0
   d440a:	42a1      	cmp	r1, r4
   d440c:	dd03      	ble.n	d4416 <igh_settings_calculate_checksum+0x16>
    {
        sum += (0xFF & *data++);
   d440e:	f812 4b01 	ldrb.w	r4, [r2], #1
   d4412:	4423      	add	r3, r4
   d4414:	e7f8      	b.n	d4408 <igh_settings_calculate_checksum+0x8>
    }

    checksum = (uint8_t)(sum % 256);

    return checksum;
}
   d4416:	b2d8      	uxtb	r0, r3
   d4418:	bd10      	pop	{r4, pc}
	...

000d441c <igh_settings_reset_system_to_default>:
    ///////
    return 1;
}

void igh_settings_reset_system_to_default(void)
{
   d441c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


LOCAL void igh_settings_get_defaults(void) // Total bytes 
{
    // System settings
    memset(&igh_default_system_settings, 0, sizeof(igh_default_system_settings));
   d441e:	4c32      	ldr	r4, [pc, #200]	; (d44e8 <igh_settings_reset_system_to_default+0xcc>)
   d4420:	223c      	movs	r2, #60	; 0x3c
   d4422:	2100      	movs	r1, #0
   d4424:	4620      	mov	r0, r4
   d4426:	f005 f982 	bl	d972e <memset>
    igh_default_system_settings.op_state                    = DEFAULT_NEW_OPSTATE;
    igh_default_system_settings.reporting_interval          = DEFAULT_REPORTING_INTERVAL;
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
   d442a:	4a30      	ldr	r2, [pc, #192]	; (d44ec <igh_settings_reset_system_to_default+0xd0>)
LOCAL void igh_settings_get_defaults(void) // Total bytes 
{
    // System settings
    memset(&igh_default_system_settings, 0, sizeof(igh_default_system_settings));
    igh_default_system_settings.op_state                    = DEFAULT_NEW_OPSTATE;
    igh_default_system_settings.reporting_interval          = DEFAULT_REPORTING_INTERVAL;
   d442c:	f44f 63e1 	mov.w	r3, #1800	; 0x708
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
   d4430:	6810      	ldr	r0, [r2, #0]
   d4432:	6851      	ldr	r1, [r2, #4]
LOCAL void igh_settings_get_defaults(void) // Total bytes 
{
    // System settings
    memset(&igh_default_system_settings, 0, sizeof(igh_default_system_settings));
    igh_default_system_settings.op_state                    = DEFAULT_NEW_OPSTATE;
    igh_default_system_settings.reporting_interval          = DEFAULT_REPORTING_INTERVAL;
   d4434:	6063      	str	r3, [r4, #4]
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
   d4436:	f44f 7316 	mov.w	r3, #600	; 0x258
   d443a:	60a3      	str	r3, [r4, #8]
    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
   d443c:	f104 030c 	add.w	r3, r4, #12
   d4440:	c303      	stmia	r3!, {r0, r1}
   d4442:	6890      	ldr	r0, [r2, #8]
   d4444:	6018      	str	r0, [r3, #0]
    memcpy(igh_default_system_settings.broker, default_broker_url, sizeof(default_broker_url));
   d4446:	4b2a      	ldr	r3, [pc, #168]	; (d44f0 <igh_settings_reset_system_to_default+0xd4>)
   d4448:	f104 0218 	add.w	r2, r4, #24
   d444c:	f103 0610 	add.w	r6, r3, #16
   d4450:	6818      	ldr	r0, [r3, #0]
   d4452:	6859      	ldr	r1, [r3, #4]
   d4454:	4615      	mov	r5, r2
   d4456:	c503      	stmia	r5!, {r0, r1}
   d4458:	3308      	adds	r3, #8
   d445a:	42b3      	cmp	r3, r6
   d445c:	462a      	mov	r2, r5
   d445e:	d1f7      	bne.n	d4450 <igh_settings_reset_system_to_default+0x34>
   d4460:	881b      	ldrh	r3, [r3, #0]
   d4462:	802b      	strh	r3, [r5, #0]
    igh_default_system_settings.broker_port                 = DEFAULT_MQTT_BROKER_PORT;
    igh_default_system_settings.checksum = igh_settings_calculate_checksum(&igh_default_system_settings, sizeof(igh_default_system_settings));
   d4464:	213c      	movs	r1, #60	; 0x3c
    igh_default_system_settings.op_state                    = DEFAULT_NEW_OPSTATE;
    igh_default_system_settings.reporting_interval          = DEFAULT_REPORTING_INTERVAL;
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
    memcpy(igh_default_system_settings.broker, default_broker_url, sizeof(default_broker_url));
    igh_default_system_settings.broker_port                 = DEFAULT_MQTT_BROKER_PORT;
   d4466:	f240 735b 	movw	r3, #1883	; 0x75b
    igh_default_system_settings.checksum = igh_settings_calculate_checksum(&igh_default_system_settings, sizeof(igh_default_system_settings));
   d446a:	481f      	ldr	r0, [pc, #124]	; (d44e8 <igh_settings_reset_system_to_default+0xcc>)
    igh_default_system_settings.op_state                    = DEFAULT_NEW_OPSTATE;
    igh_default_system_settings.reporting_interval          = DEFAULT_REPORTING_INTERVAL;
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
    memcpy(igh_default_system_settings.broker, default_broker_url, sizeof(default_broker_url));
    igh_default_system_settings.broker_port                 = DEFAULT_MQTT_BROKER_PORT;
   d446c:	8723      	strh	r3, [r4, #56]	; 0x38
    igh_default_system_settings.checksum = igh_settings_calculate_checksum(&igh_default_system_settings, sizeof(igh_default_system_settings));
   d446e:	f7ff ffc7 	bl	d4400 <igh_settings_calculate_checksum>
   d4472:	7020      	strb	r0, [r4, #0]

    //High Threshold tirggers
    memset(&igh_default_thresholds, 0, sizeof(igh_default_thresholds));
   d4474:	4c1f      	ldr	r4, [pc, #124]	; (d44f4 <igh_settings_reset_system_to_default+0xd8>)
}

void igh_settings_reset_system_to_default(void)
{
    igh_settings_get_defaults();
    igh_current_system_settings = igh_default_system_settings;
   d4476:	4e1c      	ldr	r6, [pc, #112]	; (d44e8 <igh_settings_reset_system_to_default+0xcc>)
   d4478:	4f1f      	ldr	r7, [pc, #124]	; (d44f8 <igh_settings_reset_system_to_default+0xdc>)
    memcpy(igh_default_system_settings.broker, default_broker_url, sizeof(default_broker_url));
    igh_default_system_settings.broker_port                 = DEFAULT_MQTT_BROKER_PORT;
    igh_default_system_settings.checksum = igh_settings_calculate_checksum(&igh_default_system_settings, sizeof(igh_default_system_settings));

    //High Threshold tirggers
    memset(&igh_default_thresholds, 0, sizeof(igh_default_thresholds));
   d447a:	2234      	movs	r2, #52	; 0x34
   d447c:	2100      	movs	r1, #0
   d447e:	4620      	mov	r0, r4
   d4480:	f005 f955 	bl	d972e <memset>
    igh_default_thresholds.light_intensity_low              = DEFAULT_LIGHT_INTENSITY_LOW;               
    igh_default_thresholds.shield_battery_level_low         = DEFAULT_SHIELD_BATTERY_LEVEL_LOW;     
    igh_default_thresholds.spear_battery_level_low          = DEFAULT_SPEAR_BATTERY_LEVEL_LOW;      
    igh_default_thresholds.water_dispensed_period_low       = DEFAULT_WATER_DISPENSED_PERIOD_LOW;
    // Low Threshold Trigger
    igh_default_thresholds.soil_moisture_high               = DEFAULT_SOIL_MOISTURE_HIGH;                 
   d4484:	23ff      	movs	r3, #255	; 0xff
    igh_default_thresholds.soil_npk_high                    = DEFAULT_SOIL_NPK_HIGH;                           
    igh_default_thresholds.light_intensity_high             = DEFAULT_LIGHT_INTENSITY_HIGH;             
    igh_default_thresholds.shield_battery_level_high        = DEFAULT_SHIELD_BATTERY_LEVEL_HIGH;   
    igh_default_thresholds.spear_battery_level_high         = DEFAULT_SPEAR_BATTERY_LEVEL_HIGH;     
    igh_default_thresholds.water_dispensed_period_high      = DEFAULT_WATER_DISPENSED_PERIOD_HIGH;
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));
   d4486:	2134      	movs	r1, #52	; 0x34
   d4488:	4620      	mov	r0, r4
    igh_default_thresholds.light_intensity_low              = DEFAULT_LIGHT_INTENSITY_LOW;               
    igh_default_thresholds.shield_battery_level_low         = DEFAULT_SHIELD_BATTERY_LEVEL_LOW;     
    igh_default_thresholds.spear_battery_level_low          = DEFAULT_SPEAR_BATTERY_LEVEL_LOW;      
    igh_default_thresholds.water_dispensed_period_low       = DEFAULT_WATER_DISPENSED_PERIOD_LOW;
    // Low Threshold Trigger
    igh_default_thresholds.soil_moisture_high               = DEFAULT_SOIL_MOISTURE_HIGH;                 
   d448a:	83a3      	strh	r3, [r4, #28]
    igh_default_thresholds.air_humidity_high                = DEFAULT_AIR_HUMIDITY_HIGH;                   
   d448c:	83e3      	strh	r3, [r4, #30]
    igh_default_thresholds.soil_humidity_high               = DEFAULT_SOIL_HUMIDITY_HIGH;                 
   d448e:	8423      	strh	r3, [r4, #32]
    igh_default_thresholds.carbon_dioxide_high              = DEFAULT_CARBON_DIOXIDE_HIGH;        
   d4490:	8463      	strh	r3, [r4, #34]	; 0x22
    igh_default_thresholds.air_temperature_high             = DEFAULT_AIR_TEMPERATURE_HIGH;             
   d4492:	84a3      	strh	r3, [r4, #36]	; 0x24
    igh_default_thresholds.soil_temperature_high            = DEFAULT_SOIL_TEMPERATURE_HIGH;           
   d4494:	84e3      	strh	r3, [r4, #38]	; 0x26
    igh_default_thresholds.soil_npk_high                    = DEFAULT_SOIL_NPK_HIGH;                           
   d4496:	8523      	strh	r3, [r4, #40]	; 0x28
    igh_default_thresholds.light_intensity_high             = DEFAULT_LIGHT_INTENSITY_HIGH;             
   d4498:	8563      	strh	r3, [r4, #42]	; 0x2a
    igh_default_thresholds.shield_battery_level_high        = DEFAULT_SHIELD_BATTERY_LEVEL_HIGH;   
   d449a:	85a3      	strh	r3, [r4, #44]	; 0x2c
    igh_default_thresholds.spear_battery_level_high         = DEFAULT_SPEAR_BATTERY_LEVEL_HIGH;     
   d449c:	85e3      	strh	r3, [r4, #46]	; 0x2e
    igh_default_thresholds.water_dispensed_period_high      = DEFAULT_WATER_DISPENSED_PERIOD_HIGH;
   d449e:	6323      	str	r3, [r4, #48]	; 0x30
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));
   d44a0:	f7ff ffae 	bl	d4400 <igh_settings_calculate_checksum>
   d44a4:	7020      	strb	r0, [r4, #0]
}

void igh_settings_reset_system_to_default(void)
{
    igh_settings_get_defaults();
    igh_current_system_settings = igh_default_system_settings;
   d44a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d44a8:	463d      	mov	r5, r7
   d44aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d44ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d44ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d44b0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d44b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d44b4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   d44b8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    igh_current_threshold_settings = igh_default_thresholds;
   d44bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d44be:	4e0f      	ldr	r6, [pc, #60]	; (d44fc <igh_settings_reset_system_to_default+0xe0>)
   d44c0:	4635      	mov	r5, r6
   d44c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d44c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d44c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d44c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d44ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d44cc:	6823      	ldr	r3, [r4, #0]
   d44ce:	602b      	str	r3, [r5, #0]
    // update the checksum of the system settings
    igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
   d44d0:	213c      	movs	r1, #60	; 0x3c
   d44d2:	4638      	mov	r0, r7
   d44d4:	f7ff ff94 	bl	d4400 <igh_settings_calculate_checksum>
    // update the checksum for the threshold settings
    igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
   d44d8:	2134      	movs	r1, #52	; 0x34
{
    igh_settings_get_defaults();
    igh_current_system_settings = igh_default_system_settings;
    igh_current_threshold_settings = igh_default_thresholds;
    // update the checksum of the system settings
    igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
   d44da:	7038      	strb	r0, [r7, #0]
    // update the checksum for the threshold settings
    igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
   d44dc:	4630      	mov	r0, r6
   d44de:	f7ff ff8f 	bl	d4400 <igh_settings_calculate_checksum>
   d44e2:	7030      	strb	r0, [r6, #0]
   d44e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d44e6:	bf00      	nop
   d44e8:	2003e6b4 	.word	0x2003e6b4
   d44ec:	2003da73 	.word	0x2003da73
   d44f0:	2003da61 	.word	0x2003da61
   d44f4:	2003e608 	.word	0x2003e608
   d44f8:	2003e640 	.word	0x2003e640
   d44fc:	2003e680 	.word	0x2003e680

000d4500 <setup>:

/* Run Application routine */
void setup() 
{
    // setup application
    igh_app_setup();
   d4500:	f000 b80c 	b.w	d451c <_Z13igh_app_setupv>

000d4504 <loop>:
}

void loop() 
{
    // run main app
    igh_main_application();
   d4504:	f000 ba82 	b.w	d4a0c <_Z20igh_main_applicationv>

000d4508 <_GLOBAL__sub_I_setup>:
}
   d4508:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d450a:	f002 fb93 	bl	d6c34 <HAL_Pin_Map>
#include "particle_api/igh_log.h"
#endif

#include "include/igh_app.h"

SYSTEM_THREAD(ENABLED);
   d450e:	2100      	movs	r1, #0
   d4510:	2001      	movs	r0, #1

void loop() 
{
    // run main app
    igh_main_application();
}
   d4512:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#include "particle_api/igh_log.h"
#endif

#include "include/igh_app.h"

SYSTEM_THREAD(ENABLED);
   d4516:	f002 be25 	b.w	d7164 <system_thread_set_state>
	...

000d451c <_Z13igh_app_setupv>:
void igh_app_receive_and_stage_sensor_data( void );
uint8_t igh_eeprom_get_serial_hex_data( uint8_t * buffer, uint8_t len );
void igh_app_get_new_settings( void );

void igh_app_setup( void )
{
   d451c:	b508      	push	{r3, lr}
    Serial.begin(19200);
   d451e:	f003 fc89 	bl	d7e34 <_Z16_fetch_usbserialv>
   d4522:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
   d4526:	f003 fc79 	bl	d7e1c <_ZN9USBSerial5beginEl>
    Serial.println("START");
   d452a:	f003 fc83 	bl	d7e34 <_Z16_fetch_usbserialv>
   d452e:	4906      	ldr	r1, [pc, #24]	; (d4548 <_Z13igh_app_setupv+0x2c>)
   d4530:	f003 f933 	bl	d779a <_ZN5Print7printlnEPKc>
    
    igh_boron_setup();
   d4534:	f000 fd96 	bl	d5064 <_Z15igh_boron_setupv>
    
    // get settings from eeprom
    igh_eeprom_init();
   d4538:	f000 fb62 	bl	d4c00 <_Z15igh_eeprom_initv>
    
    // starte the radio
    igh_rfm69_setup();
   d453c:	f000 fdf6 	bl	d512c <_Z15igh_rfm69_setupv>
    
    // setup MQTT
    igh_mqtt_setup();
}
   d4540:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    
    // starte the radio
    igh_rfm69_setup();
    
    // setup MQTT
    igh_mqtt_setup();
   d4544:	f000 ba74 	b.w	d4a30 <_Z14igh_mqtt_setupv>
   d4548:	000d97b4 	.word	0x000d97b4

000d454c <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir>:
        device_restart = false;
    }
}

uint8_t igh_app_add_message_header( uint8_t *_buffer, uint8_t start, igh_msg_type msg_type, igh_msg_dir dir )
{
   d454c:	460b      	mov	r3, r1
    uint8_t i = start;

    // Add Message type
    _buffer[i++] = ERROR_MSG;
   d454e:	2145      	movs	r1, #69	; 0x45
        device_restart = false;
    }
}

uint8_t igh_app_add_message_header( uint8_t *_buffer, uint8_t start, igh_msg_type msg_type, igh_msg_dir dir )
{
   d4550:	b570      	push	{r4, r5, r6, lr}
    uint8_t i = start;

    // Add Message type
    _buffer[i++] = ERROR_MSG;
   d4552:	54c1      	strb	r1, [r0, r3]

    // Add direction
    _buffer[i++] = IGH_UPLOAD;
   d4554:	1c59      	adds	r1, r3, #1
        device_restart = false;
    }
}

uint8_t igh_app_add_message_header( uint8_t *_buffer, uint8_t start, igh_msg_type msg_type, igh_msg_dir dir )
{
   d4556:	4602      	mov	r2, r0

    // Add Message type
    _buffer[i++] = ERROR_MSG;

    // Add direction
    _buffer[i++] = IGH_UPLOAD;
   d4558:	b2c9      	uxtb	r1, r1
   d455a:	2055      	movs	r0, #85	; 0x55
   d455c:	5450      	strb	r0, [r2, r1]

    // Add shield serial number
    memcpy( &_buffer[i], 
            igh_current_system_settings.serial_number, 
            sizeof(igh_current_system_settings.serial_number) );
   d455e:	4c0a      	ldr	r4, [pc, #40]	; (d4588 <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir+0x3c>)
   d4560:	1c9d      	adds	r5, r3, #2
   d4562:	cc03      	ldmia	r4!, {r0, r1}
   d4564:	b2ed      	uxtb	r5, r5
   d4566:	1956      	adds	r6, r2, r5
   d4568:	5150      	str	r0, [r2, r5]
   d456a:	6071      	str	r1, [r6, #4]

    i += sizeof(igh_current_system_settings.serial_number);

    // Add incremental message ID
    static uint8_t message_id = 0;
    _buffer[i++] = message_id++;
   d456c:	4907      	ldr	r1, [pc, #28]	; (d458c <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir+0x40>)
    _buffer[i++] = IGH_UPLOAD;

    // Add shield serial number
    memcpy( &_buffer[i], 
            igh_current_system_settings.serial_number, 
            sizeof(igh_current_system_settings.serial_number) );
   d456e:	6820      	ldr	r0, [r4, #0]
   d4570:	60b0      	str	r0, [r6, #8]

    i += sizeof(igh_current_system_settings.serial_number);

    // Add incremental message ID
    static uint8_t message_id = 0;
    _buffer[i++] = message_id++;
   d4572:	7808      	ldrb	r0, [r1, #0]
   d4574:	1c44      	adds	r4, r0, #1
   d4576:	700c      	strb	r4, [r1, #0]
   d4578:	f103 010e 	add.w	r1, r3, #14
   d457c:	b2c9      	uxtb	r1, r1
   d457e:	5450      	strb	r0, [r2, r1]

    return i;
   d4580:	f103 000f 	add.w	r0, r3, #15
}
   d4584:	b2c0      	uxtb	r0, r0
   d4586:	bd70      	pop	{r4, r5, r6, pc}
   d4588:	2003e64c 	.word	0x2003e64c
   d458c:	2003db55 	.word	0x2003db55

000d4590 <_Z19igh_app_add_payloadPhhS_h>:

uint8_t igh_app_add_payload( uint8_t *_buffer, uint8_t start, uint8_t * _payload, uint8_t _payload_len )
{
   d4590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4594:	460c      	mov	r4, r1
   d4596:	4605      	mov	r5, r0
   d4598:	4699      	mov	r9, r3
   d459a:	4690      	mov	r8, r2
    uint32_t timestamp_to_store = (uint32_t)igh_boron_unix_time();
   d459c:	f000 fd5a 	bl	d5054 <_Z19igh_boron_unix_timev>
   d45a0:	4607      	mov	r7, r0
    float battery_soc_float = igh_boron_SoC();
   d45a2:	f000 fd59 	bl	d5058 <_Z13igh_boron_SoCv>
    uint32_t total_water_dispensed = 12364897; // replace with actual reading

    uint8_t i = start;

    // Add DATA PKT PID
    _buffer[i++] = DATA_PKT;
   d45a6:	23fe      	movs	r3, #254	; 0xfe
   d45a8:	552b      	strb	r3, [r5, r4]
    i++; // leave room for payload length

    // Add Timestamp
    _buffer[i++] = STORE_TIMESTAMP;
   d45aa:	1ca3      	adds	r3, r4, #2
   d45ac:	b2db      	uxtb	r3, r3
   d45ae:	2202      	movs	r2, #2
   d45b0:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = SIZE_OF_STORE_TIMESTAMP;
   d45b2:	1ce3      	adds	r3, r4, #3
   d45b4:	b2db      	uxtb	r3, r3
   d45b6:	2204      	movs	r2, #4
   d45b8:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)timestamp_to_store;
   d45ba:	18a3      	adds	r3, r4, r2
   d45bc:	b2db      	uxtb	r3, r3
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 8);
   d45be:	0a39      	lsrs	r1, r7, #8
    i++; // leave room for payload length

    // Add Timestamp
    _buffer[i++] = STORE_TIMESTAMP;
    _buffer[i++] = SIZE_OF_STORE_TIMESTAMP;
    _buffer[i++] = (uint8_t)timestamp_to_store;
   d45c0:	54ef      	strb	r7, [r5, r3]
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 8);
   d45c2:	1d63      	adds	r3, r4, #5
   d45c4:	b2db      	uxtb	r3, r3
uint8_t igh_app_add_payload( uint8_t *_buffer, uint8_t start, uint8_t * _payload, uint8_t _payload_len )
{
    uint32_t timestamp_to_store = (uint32_t)igh_boron_unix_time();
    float battery_soc_float = igh_boron_SoC();
    uint32_t battery_soc;
    memcpy(&battery_soc, &battery_soc_float, sizeof battery_soc);
   d45c6:	ee10 6a10 	vmov	r6, s0

    // Add Timestamp
    _buffer[i++] = STORE_TIMESTAMP;
    _buffer[i++] = SIZE_OF_STORE_TIMESTAMP;
    _buffer[i++] = (uint8_t)timestamp_to_store;
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 8);
   d45ca:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 16);
   d45cc:	1da3      	adds	r3, r4, #6
   d45ce:	b2db      	uxtb	r3, r3
   d45d0:	0c39      	lsrs	r1, r7, #16
   d45d2:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 24);
   d45d4:	1de3      	adds	r3, r4, #7
   d45d6:	b2db      	uxtb	r3, r3
   d45d8:	0e3f      	lsrs	r7, r7, #24
   d45da:	54ef      	strb	r7, [r5, r3]

    // Add Shield battery level
    _buffer[i++] = SHIELD_BATTERY_LEVEL;
   d45dc:	f104 0308 	add.w	r3, r4, #8
   d45e0:	b2db      	uxtb	r3, r3
   d45e2:	210d      	movs	r1, #13
   d45e4:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = SIZE_OF_SHIELD_BATTERY_LEVEL;
   d45e6:	f104 0309 	add.w	r3, r4, #9
   d45ea:	b2db      	uxtb	r3, r3
    _buffer[i++] = (uint8_t)battery_soc;
    _buffer[i++] = (uint8_t)( battery_soc >> 8);
   d45ec:	0a31      	lsrs	r1, r6, #8
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 16);
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 24);

    // Add Shield battery level
    _buffer[i++] = SHIELD_BATTERY_LEVEL;
    _buffer[i++] = SIZE_OF_SHIELD_BATTERY_LEVEL;
   d45ee:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)battery_soc;
   d45f0:	f104 030a 	add.w	r3, r4, #10
   d45f4:	b2db      	uxtb	r3, r3
    _buffer[i++] = WATER_DISPENSED;
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
    _buffer[i++] = (uint8_t)total_water_dispensed;
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 8);
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 16);
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 24);
   d45f6:	f104 0017 	add.w	r0, r4, #23
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 24);

    // Add Shield battery level
    _buffer[i++] = SHIELD_BATTERY_LEVEL;
    _buffer[i++] = SIZE_OF_SHIELD_BATTERY_LEVEL;
    _buffer[i++] = (uint8_t)battery_soc;
   d45fa:	54ee      	strb	r6, [r5, r3]
    _buffer[i++] = (uint8_t)( battery_soc >> 8);
   d45fc:	f104 030b 	add.w	r3, r4, #11
   d4600:	b2db      	uxtb	r3, r3
    _buffer[i++] = WATER_DISPENSED;
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
    _buffer[i++] = (uint8_t)total_water_dispensed;
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 8);
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 16);
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 24);
   d4602:	b2c0      	uxtb	r0, r0

    // Add Shield battery level
    _buffer[i++] = SHIELD_BATTERY_LEVEL;
    _buffer[i++] = SIZE_OF_SHIELD_BATTERY_LEVEL;
    _buffer[i++] = (uint8_t)battery_soc;
    _buffer[i++] = (uint8_t)( battery_soc >> 8);
   d4604:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = (uint8_t)( battery_soc >> 16);
   d4606:	f104 030c 	add.w	r3, r4, #12
   d460a:	b2db      	uxtb	r3, r3
   d460c:	0c31      	lsrs	r1, r6, #16
   d460e:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = (uint8_t)( battery_soc >> 24);
   d4610:	f104 030d 	add.w	r3, r4, #13
   d4614:	b2db      	uxtb	r3, r3
   d4616:	0e36      	lsrs	r6, r6, #24
   d4618:	54ee      	strb	r6, [r5, r3]

    // Add Valve position
    _buffer[i++] = VALVE_POSITION;
   d461a:	f104 030e 	add.w	r3, r4, #14
   d461e:	b2db      	uxtb	r3, r3
   d4620:	210f      	movs	r1, #15
   d4622:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = SIZE_OF_VALVE_POSITION;
   d4624:	1863      	adds	r3, r4, r1
   d4626:	b2db      	uxtb	r3, r3
   d4628:	2101      	movs	r1, #1
   d462a:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = current_valve_position;
   d462c:	4b1a      	ldr	r3, [pc, #104]	; (d4698 <_Z19igh_app_add_payloadPhhS_h+0x108>)
   d462e:	7819      	ldrb	r1, [r3, #0]
   d4630:	f104 0310 	add.w	r3, r4, #16
   d4634:	b2db      	uxtb	r3, r3
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 8);
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 16);
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 24);

    // only add payload if the package fits, prevvent memory leak
    if( (_payload_len + i + 1) < MESSAGE_SIZE )
   d4636:	eb09 0600 	add.w	r6, r9, r0
    _buffer[i++] = (uint8_t)( battery_soc >> 24);

    // Add Valve position
    _buffer[i++] = VALVE_POSITION;
    _buffer[i++] = SIZE_OF_VALVE_POSITION;
    _buffer[i++] = current_valve_position;
   d463a:	54e9      	strb	r1, [r5, r3]

    // Add water dispensed 
    _buffer[i++] = WATER_DISPENSED;
   d463c:	f104 0311 	add.w	r3, r4, #17
   d4640:	b2db      	uxtb	r3, r3
   d4642:	2107      	movs	r1, #7
   d4644:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
   d4646:	f104 0312 	add.w	r3, r4, #18
   d464a:	b2db      	uxtb	r3, r3
    _buffer[i++] = (uint8_t)total_water_dispensed;
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 8);
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 16);
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 24);
   d464c:	f104 0116 	add.w	r1, r4, #22
    _buffer[i++] = SIZE_OF_VALVE_POSITION;
    _buffer[i++] = current_valve_position;

    // Add water dispensed 
    _buffer[i++] = WATER_DISPENSED;
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
   d4650:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)total_water_dispensed;
   d4652:	f104 0313 	add.w	r3, r4, #19
   d4656:	b2db      	uxtb	r3, r3
   d4658:	2261      	movs	r2, #97	; 0x61
   d465a:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 8);
   d465c:	f104 0314 	add.w	r3, r4, #20
   d4660:	b2db      	uxtb	r3, r3
   d4662:	22ac      	movs	r2, #172	; 0xac
   d4664:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 16);
   d4666:	f104 0315 	add.w	r3, r4, #21
   d466a:	b2db      	uxtb	r3, r3
   d466c:	22bc      	movs	r2, #188	; 0xbc
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 24);
   d466e:	b2c9      	uxtb	r1, r1
    // Add water dispensed 
    _buffer[i++] = WATER_DISPENSED;
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
    _buffer[i++] = (uint8_t)total_water_dispensed;
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 8);
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 16);
   d4670:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 24);

    // only add payload if the package fits, prevvent memory leak
    if( (_payload_len + i + 1) < MESSAGE_SIZE )
   d4672:	2efd      	cmp	r6, #253	; 0xfd
    _buffer[i++] = WATER_DISPENSED;
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
    _buffer[i++] = (uint8_t)total_water_dispensed;
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 8);
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 16);
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 24);
   d4674:	f04f 0300 	mov.w	r3, #0
   d4678:	546b      	strb	r3, [r5, r1]

    // only add payload if the package fits, prevvent memory leak
    if( (_payload_len + i + 1) < MESSAGE_SIZE )
   d467a:	dc05      	bgt.n	d4688 <_Z19igh_app_add_payloadPhhS_h+0xf8>
    {
        memcpy(&_buffer[i], _payload, _payload_len);
   d467c:	464a      	mov	r2, r9
   d467e:	4641      	mov	r1, r8
   d4680:	4428      	add	r0, r5
   d4682:	f005 f849 	bl	d9718 <memcpy>
        i += _payload_len;
   d4686:	b2f0      	uxtb	r0, r6
    }

    // add the payload length
    _buffer[ start + 1 ] = i - start - 2;
   d4688:	4425      	add	r5, r4
   d468a:	f1c4 04fe 	rsb	r4, r4, #254	; 0xfe
   d468e:	4404      	add	r4, r0
   d4690:	706c      	strb	r4, [r5, #1]

    return i;
}
   d4692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4696:	bf00      	nop
   d4698:	2003e67c 	.word	0x2003e67c

000d469c <_Z37igh_app_receive_and_stage_sensor_datav>:
    // rfm69 service in the background
    igh_rfm69_service();
}

void igh_app_receive_and_stage_sensor_data( void )
{
   d469c:	b570      	push	{r4, r5, r6, lr}
   d469e:	b090      	sub	sp, #64	; 0x40
    uint8_t rx_buffer[RF69_MAX_DATA_LEN];
    uint8_t data_rx_len = 0;

    data_rx_len = igh_rfm69_receive_raw_bytes( rx_buffer, sizeof(rx_buffer) );
   d46a0:	213d      	movs	r1, #61	; 0x3d
   d46a2:	4668      	mov	r0, sp
   d46a4:	f000 fd94 	bl	d51d0 <_Z27igh_rfm69_receive_raw_bytesPhh>

    if( 0 != data_rx_len )
   d46a8:	4605      	mov	r5, r0
   d46aa:	2800      	cmp	r0, #0
   d46ac:	d03b      	beq.n	d4726 <_Z37igh_app_receive_and_stage_sensor_datav+0x8a>
    {
        uint8_t i = 0; // keep track of pkt data

        // first clear the buffer
        memset( igh_msg_buffer, 0, sizeof(igh_msg_buffer) );
   d46ae:	4c1f      	ldr	r4, [pc, #124]	; (d472c <_Z37igh_app_receive_and_stage_sensor_datav+0x90>)
   d46b0:	22ff      	movs	r2, #255	; 0xff
   d46b2:	2100      	movs	r1, #0
   d46b4:	4620      	mov	r0, r4
   d46b6:	f005 f83a 	bl	d972e <memset>

        // Add frame start
        igh_msg_buffer[i++] = FRAME_START;
   d46ba:	233c      	movs	r3, #60	; 0x3c
   d46bc:	7023      	strb	r3, [r4, #0]
        i++; // leave room for pkg length

        i = igh_app_add_message_header( igh_msg_buffer, i, ERROR_MSG, IGH_UPLOAD );
   d46be:	2245      	movs	r2, #69	; 0x45
   d46c0:	2355      	movs	r3, #85	; 0x55
   d46c2:	2102      	movs	r1, #2
   d46c4:	4620      	mov	r0, r4
   d46c6:	f7ff ff41 	bl	d454c <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir>
        i = igh_app_add_payload( igh_msg_buffer, i, rx_buffer, data_rx_len );
   d46ca:	462b      	mov	r3, r5
   d46cc:	4601      	mov	r1, r0
   d46ce:	466a      	mov	r2, sp
   d46d0:	4620      	mov	r0, r4
   d46d2:	f7ff ff5d 	bl	d4590 <_Z19igh_app_add_payloadPhhS_h>

        // Add Frame End 
        igh_msg_buffer[i++] = FRAME_END;
   d46d6:	1c45      	adds	r5, r0, #1
   d46d8:	233e      	movs	r3, #62	; 0x3e
   d46da:	b2ed      	uxtb	r5, r5
   d46dc:	5423      	strb	r3, [r4, r0]

        igh_msg_buffer[1] = i; // add length
   d46de:	7065      	strb	r5, [r4, #1]

        Serial.print("{");
   d46e0:	f003 fba8 	bl	d7e34 <_Z16_fetch_usbserialv>
   d46e4:	4912      	ldr	r1, [pc, #72]	; (d4730 <_Z37igh_app_receive_and_stage_sensor_datav+0x94>)
   d46e6:	f003 f845 	bl	d7774 <_ZN5Print5printEPKc>
   d46ea:	1e6b      	subs	r3, r5, #1
   d46ec:	1e66      	subs	r6, r4, #1
   d46ee:	441c      	add	r4, r3
        for( uint8_t k = 0; k < i; k++ )
   d46f0:	42a6      	cmp	r6, r4
   d46f2:	d00f      	beq.n	d4714 <_Z37igh_app_receive_and_stage_sensor_datav+0x78>
        {
            if( igh_msg_buffer[k] <= 0x0F ) Serial.print("0");
   d46f4:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   d46f8:	2b0f      	cmp	r3, #15
   d46fa:	d804      	bhi.n	d4706 <_Z37igh_app_receive_and_stage_sensor_datav+0x6a>
   d46fc:	f003 fb9a 	bl	d7e34 <_Z16_fetch_usbserialv>
   d4700:	490c      	ldr	r1, [pc, #48]	; (d4734 <_Z37igh_app_receive_and_stage_sensor_datav+0x98>)
   d4702:	f003 f837 	bl	d7774 <_ZN5Print5printEPKc>
            Serial.print(igh_msg_buffer[k], HEX);
   d4706:	f003 fb95 	bl	d7e34 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d470a:	2210      	movs	r2, #16
   d470c:	7831      	ldrb	r1, [r6, #0]
   d470e:	f003 f84e 	bl	d77ae <_ZN5Print11printNumberEmh>
        igh_msg_buffer[i++] = FRAME_END;

        igh_msg_buffer[1] = i; // add length

        Serial.print("{");
        for( uint8_t k = 0; k < i; k++ )
   d4712:	e7ed      	b.n	d46f0 <_Z37igh_app_receive_and_stage_sensor_datav+0x54>
        {
            if( igh_msg_buffer[k] <= 0x0F ) Serial.print("0");
            Serial.print(igh_msg_buffer[k], HEX);
        }
        Serial.print("}\n");
   d4714:	f003 fb8e 	bl	d7e34 <_Z16_fetch_usbserialv>
   d4718:	4907      	ldr	r1, [pc, #28]	; (d4738 <_Z37igh_app_receive_and_stage_sensor_datav+0x9c>)
   d471a:	f003 f82b 	bl	d7774 <_ZN5Print5printEPKc>

        // publish the data or store it if the publish fails
        igh_mqtt_publish_data( igh_msg_buffer, (unsigned int)i );
   d471e:	4629      	mov	r1, r5
   d4720:	4802      	ldr	r0, [pc, #8]	; (d472c <_Z37igh_app_receive_and_stage_sensor_datav+0x90>)
   d4722:	f000 f9eb 	bl	d4afc <_Z21igh_mqtt_publish_dataPhj>

    }
}
   d4726:	b010      	add	sp, #64	; 0x40
   d4728:	bd70      	pop	{r4, r5, r6, pc}
   d472a:	bf00      	nop
   d472c:	2003e6f1 	.word	0x2003e6f1
   d4730:	000d97d8 	.word	0x000d97d8
   d4734:	000d97ba 	.word	0x000d97ba
   d4738:	000d97bc 	.word	0x000d97bc

000d473c <_Z27igh_app_send_device_restartv>:

void igh_app_send_device_restart( void )
{
   d473c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( true == device_restart )
   d473e:	4b26      	ldr	r3, [pc, #152]	; (d47d8 <_Z27igh_app_send_device_restartv+0x9c>)
   d4740:	781d      	ldrb	r5, [r3, #0]
   d4742:	2d01      	cmp	r5, #1
   d4744:	461f      	mov	r7, r3
   d4746:	d144      	bne.n	d47d2 <_Z27igh_app_send_device_restartv+0x96>
    {
        uint8_t i = 0; // keep track of pkt data
        uint8_t restart_msg[3];

        // first clear the buffer
        memset( igh_msg_buffer, 0, sizeof(igh_msg_buffer) );
   d4748:	4c24      	ldr	r4, [pc, #144]	; (d47dc <_Z27igh_app_send_device_restartv+0xa0>)
   d474a:	22ff      	movs	r2, #255	; 0xff
   d474c:	2100      	movs	r1, #0
   d474e:	4620      	mov	r0, r4
   d4750:	f004 ffed 	bl	d972e <memset>

        // Add Retart Message
        restart_msg[0] = RESTART;
   d4754:	23fd      	movs	r3, #253	; 0xfd
   d4756:	f88d 3004 	strb.w	r3, [sp, #4]
        restart_msg[1] = SIZE_OF_RESTART;
        restart_msg[2] = true;

        // Add frame start
        igh_msg_buffer[i++] = FRAME_START;
   d475a:	233c      	movs	r3, #60	; 0x3c
   d475c:	7023      	strb	r3, [r4, #0]
        i++; // leave room for pkg length

        i = igh_app_add_message_header( igh_msg_buffer, i, ERROR_MSG, IGH_UPLOAD );
   d475e:	2245      	movs	r2, #69	; 0x45
   d4760:	2355      	movs	r3, #85	; 0x55
   d4762:	2102      	movs	r1, #2
   d4764:	4620      	mov	r0, r4
        // first clear the buffer
        memset( igh_msg_buffer, 0, sizeof(igh_msg_buffer) );

        // Add Retart Message
        restart_msg[0] = RESTART;
        restart_msg[1] = SIZE_OF_RESTART;
   d4766:	f88d 5005 	strb.w	r5, [sp, #5]
        restart_msg[2] = true;
   d476a:	f88d 5006 	strb.w	r5, [sp, #6]

        // Add frame start
        igh_msg_buffer[i++] = FRAME_START;
        i++; // leave room for pkg length

        i = igh_app_add_message_header( igh_msg_buffer, i, ERROR_MSG, IGH_UPLOAD );
   d476e:	f7ff feed 	bl	d454c <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir>
        i = igh_app_add_payload( igh_msg_buffer, i, restart_msg, sizeof(restart_msg) );
   d4772:	aa01      	add	r2, sp, #4
   d4774:	4601      	mov	r1, r0
   d4776:	2303      	movs	r3, #3
   d4778:	4620      	mov	r0, r4
   d477a:	f7ff ff09 	bl	d4590 <_Z19igh_app_add_payloadPhhS_h>

        // Add Frame End 
        igh_msg_buffer[i++] = FRAME_END;
   d477e:	1c45      	adds	r5, r0, #1
   d4780:	233e      	movs	r3, #62	; 0x3e
   d4782:	b2ed      	uxtb	r5, r5
   d4784:	5423      	strb	r3, [r4, r0]

        igh_msg_buffer[1] = i; // add length
   d4786:	7065      	strb	r5, [r4, #1]

        Serial.print("{");
   d4788:	f003 fb54 	bl	d7e34 <_Z16_fetch_usbserialv>
   d478c:	4914      	ldr	r1, [pc, #80]	; (d47e0 <_Z27igh_app_send_device_restartv+0xa4>)
   d478e:	f002 fff1 	bl	d7774 <_ZN5Print5printEPKc>
   d4792:	1e6b      	subs	r3, r5, #1
   d4794:	1e66      	subs	r6, r4, #1
   d4796:	441c      	add	r4, r3
        for( uint8_t k = 0; k < i; k++ )
   d4798:	42a6      	cmp	r6, r4
   d479a:	d00f      	beq.n	d47bc <_Z27igh_app_send_device_restartv+0x80>
        {
            if( igh_msg_buffer[k] <= 0x0F ) Serial.print("0");
   d479c:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   d47a0:	2b0f      	cmp	r3, #15
   d47a2:	d804      	bhi.n	d47ae <_Z27igh_app_send_device_restartv+0x72>
   d47a4:	f003 fb46 	bl	d7e34 <_Z16_fetch_usbserialv>
   d47a8:	490e      	ldr	r1, [pc, #56]	; (d47e4 <_Z27igh_app_send_device_restartv+0xa8>)
   d47aa:	f002 ffe3 	bl	d7774 <_ZN5Print5printEPKc>
            Serial.print(igh_msg_buffer[k], HEX);
   d47ae:	f003 fb41 	bl	d7e34 <_Z16_fetch_usbserialv>
   d47b2:	2210      	movs	r2, #16
   d47b4:	7831      	ldrb	r1, [r6, #0]
   d47b6:	f002 fffa 	bl	d77ae <_ZN5Print11printNumberEmh>
   d47ba:	e7ed      	b.n	d4798 <_Z27igh_app_send_device_restartv+0x5c>
        }
        Serial.print("}\n");
   d47bc:	f003 fb3a 	bl	d7e34 <_Z16_fetch_usbserialv>
   d47c0:	4909      	ldr	r1, [pc, #36]	; (d47e8 <_Z27igh_app_send_device_restartv+0xac>)
   d47c2:	f002 ffd7 	bl	d7774 <_ZN5Print5printEPKc>

        // publish the data or store it if the publish fails
        igh_mqtt_publish_data( igh_msg_buffer, (unsigned int)i );
   d47c6:	4629      	mov	r1, r5
   d47c8:	4804      	ldr	r0, [pc, #16]	; (d47dc <_Z27igh_app_send_device_restartv+0xa0>)
   d47ca:	f000 f997 	bl	d4afc <_Z21igh_mqtt_publish_dataPhj>

        device_restart = false;
   d47ce:	2300      	movs	r3, #0
   d47d0:	703b      	strb	r3, [r7, #0]
    }
}
   d47d2:	b003      	add	sp, #12
   d47d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d47d6:	bf00      	nop
   d47d8:	2003da7f 	.word	0x2003da7f
   d47dc:	2003e6f1 	.word	0x2003e6f1
   d47e0:	000d97d8 	.word	0x000d97d8
   d47e4:	000d97ba 	.word	0x000d97ba
   d47e8:	000d97bc 	.word	0x000d97bc

000d47ec <_Z30igh_eeprom_get_serial_hex_dataPhh>:
        }
    }
}

uint8_t igh_eeprom_get_serial_hex_data( uint8_t * buffer, uint8_t len )
{
   d47ec:	b570      	push	{r4, r5, r6, lr}
   d47ee:	460d      	mov	r5, r1
   d47f0:	4606      	mov	r6, r0
    uint8_t ret = 0;

    uint8_t bytes_available = Serial.available();
   d47f2:	f003 fb1f 	bl	d7e34 <_Z16_fetch_usbserialv>
   d47f6:	6803      	ldr	r3, [r0, #0]
   d47f8:	691b      	ldr	r3, [r3, #16]
   d47fa:	4798      	blx	r3
   d47fc:	b2c4      	uxtb	r4, r0
    if( bytes_available > 0 )
   d47fe:	b90c      	cbnz	r4, d4804 <_Z30igh_eeprom_get_serial_hex_dataPhh+0x18>
    }
}

uint8_t igh_eeprom_get_serial_hex_data( uint8_t * buffer, uint8_t len )
{
    uint8_t ret = 0;
   d4800:	2400      	movs	r4, #0
   d4802:	e019      	b.n	d4838 <_Z30igh_eeprom_get_serial_hex_dataPhh+0x4c>

    uint8_t bytes_available = Serial.available();
    if( bytes_available > 0 )
    {
        if( bytes_available <= len )
   d4804:	42ac      	cmp	r4, r5
   d4806:	d80c      	bhi.n	d4822 <_Z30igh_eeprom_get_serial_hex_dataPhh+0x36>
   d4808:	4635      	mov	r5, r6
        {
            for( uint8_t i = 0; i < bytes_available; i++ )
            {
                // read all available bytes
                buffer[i] = Serial.read();
   d480a:	f003 fb13 	bl	d7e34 <_Z16_fetch_usbserialv>
   d480e:	6803      	ldr	r3, [r0, #0]
   d4810:	695b      	ldr	r3, [r3, #20]
   d4812:	4798      	blx	r3
   d4814:	f805 0b01 	strb.w	r0, [r5], #1
    uint8_t bytes_available = Serial.available();
    if( bytes_available > 0 )
    {
        if( bytes_available <= len )
        {
            for( uint8_t i = 0; i < bytes_available; i++ )
   d4818:	1bab      	subs	r3, r5, r6
   d481a:	b2db      	uxtb	r3, r3
   d481c:	429c      	cmp	r4, r3
   d481e:	d8f4      	bhi.n	d480a <_Z30igh_eeprom_get_serial_hex_dataPhh+0x1e>
   d4820:	e00a      	b.n	d4838 <_Z30igh_eeprom_get_serial_hex_dataPhh+0x4c>
   d4822:	2500      	movs	r5, #0
        else
        {
            for( uint8_t i = 0; i < bytes_available; i++ )
            {
                // dump the data
                Serial.read();
   d4824:	f003 fb06 	bl	d7e34 <_Z16_fetch_usbserialv>
   d4828:	6803      	ldr	r3, [r0, #0]
   d482a:	3501      	adds	r5, #1
   d482c:	695b      	ldr	r3, [r3, #20]
   d482e:	4798      	blx	r3
            }
            ret = bytes_available;
        }
        else
        {
            for( uint8_t i = 0; i < bytes_available; i++ )
   d4830:	b2eb      	uxtb	r3, r5
   d4832:	429c      	cmp	r4, r3
   d4834:	d8f6      	bhi.n	d4824 <_Z30igh_eeprom_get_serial_hex_dataPhh+0x38>
   d4836:	e7e3      	b.n	d4800 <_Z30igh_eeprom_get_serial_hex_dataPhh+0x14>
                Serial.read();
            }
        }
    }
    return ret;
}
   d4838:	4620      	mov	r0, r4
   d483a:	bd70      	pop	{r4, r5, r6, pc}

000d483c <_Z24igh_app_get_new_settingsv>:

    return i;
}

void igh_app_get_new_settings( void )
{
   d483c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    memset( igh_msg_buffer, 0, sizeof(igh_msg_buffer) );
   d483e:	4c63      	ldr	r4, [pc, #396]	; (d49cc <_Z24igh_app_get_new_settingsv+0x190>)
   d4840:	22ff      	movs	r2, #255	; 0xff
   d4842:	2100      	movs	r1, #0
   d4844:	4620      	mov	r0, r4
   d4846:	f004 ff72 	bl	d972e <memset>
    uint8_t rx_bytes = igh_eeprom_get_serial_hex_data(igh_msg_buffer, sizeof(igh_msg_buffer));
   d484a:	21ff      	movs	r1, #255	; 0xff
   d484c:	4620      	mov	r0, r4
   d484e:	f7ff ffcd 	bl	d47ec <_Z30igh_eeprom_get_serial_hex_dataPhh>
    if ( 0 < rx_bytes ) // via Serial
   d4852:	4606      	mov	r6, r0
   d4854:	2800      	cmp	r0, #0
   d4856:	f000 80b8 	beq.w	d49ca <_Z24igh_app_get_new_settingsv+0x18e>
    {

        Serial.print("SERIAL DATA SETTINGS --> {");
   d485a:	f003 faeb 	bl	d7e34 <_Z16_fetch_usbserialv>
   d485e:	495c      	ldr	r1, [pc, #368]	; (d49d0 <_Z24igh_app_get_new_settingsv+0x194>)
   d4860:	f002 ff88 	bl	d7774 <_ZN5Print5printEPKc>
   d4864:	1e77      	subs	r7, r6, #1
   d4866:	1e65      	subs	r5, r4, #1
   d4868:	4427      	add	r7, r4
        for( uint8_t k = 0; k < rx_bytes; k++ )
   d486a:	42af      	cmp	r7, r5
   d486c:	d00f      	beq.n	d488e <_Z24igh_app_get_new_settingsv+0x52>
        {
            if( igh_msg_buffer[k] <= 0x0F ) Serial.print("0");
   d486e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d4872:	2b0f      	cmp	r3, #15
   d4874:	d804      	bhi.n	d4880 <_Z24igh_app_get_new_settingsv+0x44>
   d4876:	f003 fadd 	bl	d7e34 <_Z16_fetch_usbserialv>
   d487a:	4956      	ldr	r1, [pc, #344]	; (d49d4 <_Z24igh_app_get_new_settingsv+0x198>)
   d487c:	f002 ff7a 	bl	d7774 <_ZN5Print5printEPKc>
            Serial.print(igh_msg_buffer[k], HEX);
   d4880:	f003 fad8 	bl	d7e34 <_Z16_fetch_usbserialv>
   d4884:	2210      	movs	r2, #16
   d4886:	7829      	ldrb	r1, [r5, #0]
   d4888:	f002 ff91 	bl	d77ae <_ZN5Print11printNumberEmh>
    uint8_t rx_bytes = igh_eeprom_get_serial_hex_data(igh_msg_buffer, sizeof(igh_msg_buffer));
    if ( 0 < rx_bytes ) // via Serial
    {

        Serial.print("SERIAL DATA SETTINGS --> {");
        for( uint8_t k = 0; k < rx_bytes; k++ )
   d488c:	e7ed      	b.n	d486a <_Z24igh_app_get_new_settingsv+0x2e>
        {
            if( igh_msg_buffer[k] <= 0x0F ) Serial.print("0");
            Serial.print(igh_msg_buffer[k], HEX);
        }
        Serial.print("}\n");
   d488e:	f003 fad1 	bl	d7e34 <_Z16_fetch_usbserialv>
   d4892:	4951      	ldr	r1, [pc, #324]	; (d49d8 <_Z24igh_app_get_new_settingsv+0x19c>)
   d4894:	f002 ff6e 	bl	d7774 <_ZN5Print5printEPKc>

        if( IGH_SEND_SETTINGS == igh_msg_buffer[0] )
   d4898:	7823      	ldrb	r3, [r4, #0]
   d489a:	2b10      	cmp	r3, #16
   d489c:	f040 8095 	bne.w	d49ca <_Z24igh_app_get_new_settingsv+0x18e>
        {
            if( true == igh_settings_process_settings_tuples( igh_msg_buffer, 2, rx_bytes) )
   d48a0:	4632      	mov	r2, r6
   d48a2:	2102      	movs	r1, #2
   d48a4:	4849      	ldr	r0, [pc, #292]	; (d49cc <_Z24igh_app_get_new_settingsv+0x190>)
   d48a6:	f7ff fc07 	bl	d40b8 <igh_settings_process_settings_tuples>
   d48aa:	2801      	cmp	r0, #1
   d48ac:	f040 8086 	bne.w	d49bc <_Z24igh_app_get_new_settingsv+0x180>
            {
                // update the checksum of the system settings
                igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
   d48b0:	4c4a      	ldr	r4, [pc, #296]	; (d49dc <_Z24igh_app_get_new_settingsv+0x1a0>)
   d48b2:	213c      	movs	r1, #60	; 0x3c
   d48b4:	4620      	mov	r0, r4
   d48b6:	f7ff fda3 	bl	d4400 <igh_settings_calculate_checksum>
   d48ba:	7020      	strb	r0, [r4, #0]
                
                Serial.print("OP STATE:"); Serial.println(igh_current_system_settings.op_state);
   d48bc:	f003 faba 	bl	d7e34 <_Z16_fetch_usbserialv>
   d48c0:	4947      	ldr	r1, [pc, #284]	; (d49e0 <_Z24igh_app_get_new_settingsv+0x1a4>)
   d48c2:	f002 ff57 	bl	d7774 <_ZN5Print5printEPKc>
   d48c6:	f003 fab5 	bl	d7e34 <_Z16_fetch_usbserialv>
   d48ca:	220a      	movs	r2, #10
   d48cc:	7861      	ldrb	r1, [r4, #1]
   d48ce:	4605      	mov	r5, r0
   d48d0:	f002 ff6d 	bl	d77ae <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d48d4:	4628      	mov	r0, r5
   d48d6:	f002 ff54 	bl	d7782 <_ZN5Print7printlnEv>
                Serial.print("REPORTING INTERVAL: "); Serial.println(igh_current_system_settings.reporting_interval);
   d48da:	f003 faab 	bl	d7e34 <_Z16_fetch_usbserialv>
   d48de:	4941      	ldr	r1, [pc, #260]	; (d49e4 <_Z24igh_app_get_new_settingsv+0x1a8>)
   d48e0:	f002 ff48 	bl	d7774 <_ZN5Print5printEPKc>
   d48e4:	f003 faa6 	bl	d7e34 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d48e8:	220a      	movs	r2, #10
   d48ea:	6861      	ldr	r1, [r4, #4]
   d48ec:	4605      	mov	r5, r0
   d48ee:	f002 ff5e 	bl	d77ae <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d48f2:	4628      	mov	r0, r5
   d48f4:	f002 ff45 	bl	d7782 <_ZN5Print7printlnEv>
                Serial.print("DATA RESOLUTION: "); Serial.println(igh_current_system_settings.data_resolution);
   d48f8:	f003 fa9c 	bl	d7e34 <_Z16_fetch_usbserialv>
   d48fc:	493a      	ldr	r1, [pc, #232]	; (d49e8 <_Z24igh_app_get_new_settingsv+0x1ac>)
   d48fe:	f002 ff39 	bl	d7774 <_ZN5Print5printEPKc>
   d4902:	f003 fa97 	bl	d7e34 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4906:	220a      	movs	r2, #10
   d4908:	68a1      	ldr	r1, [r4, #8]
   d490a:	4605      	mov	r5, r0
   d490c:	f002 ff4f 	bl	d77ae <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4910:	4628      	mov	r0, r5
   d4912:	f002 ff36 	bl	d7782 <_ZN5Print7printlnEv>
                Serial.print("SERIAL NUMBER: ");
   d4916:	f003 fa8d 	bl	d7e34 <_Z16_fetch_usbserialv>
   d491a:	4934      	ldr	r1, [pc, #208]	; (d49ec <_Z24igh_app_get_new_settingsv+0x1b0>)
   d491c:	f002 ff2a 	bl	d7774 <_ZN5Print5printEPKc>
   d4920:	f104 050b 	add.w	r5, r4, #11
   d4924:	f104 0617 	add.w	r6, r4, #23
                for( uint8_t i = 0; i < sizeof(igh_default_system_settings.serial_number); i++ )
                {
                    if( igh_current_system_settings.serial_number[i] <= 0x0F ) Serial.print("0");
   d4928:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d492c:	2b0f      	cmp	r3, #15
   d492e:	d804      	bhi.n	d493a <_Z24igh_app_get_new_settingsv+0xfe>
   d4930:	f003 fa80 	bl	d7e34 <_Z16_fetch_usbserialv>
   d4934:	4927      	ldr	r1, [pc, #156]	; (d49d4 <_Z24igh_app_get_new_settingsv+0x198>)
   d4936:	f002 ff1d 	bl	d7774 <_ZN5Print5printEPKc>
                    Serial.print(igh_current_system_settings.serial_number[i], HEX);
   d493a:	f003 fa7b 	bl	d7e34 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d493e:	2210      	movs	r2, #16
   d4940:	7829      	ldrb	r1, [r5, #0]
   d4942:	f002 ff34 	bl	d77ae <_ZN5Print11printNumberEmh>
                
                Serial.print("OP STATE:"); Serial.println(igh_current_system_settings.op_state);
                Serial.print("REPORTING INTERVAL: "); Serial.println(igh_current_system_settings.reporting_interval);
                Serial.print("DATA RESOLUTION: "); Serial.println(igh_current_system_settings.data_resolution);
                Serial.print("SERIAL NUMBER: ");
                for( uint8_t i = 0; i < sizeof(igh_default_system_settings.serial_number); i++ )
   d4946:	42b5      	cmp	r5, r6
   d4948:	d1ee      	bne.n	d4928 <_Z24igh_app_get_new_settingsv+0xec>
                {
                    if( igh_current_system_settings.serial_number[i] <= 0x0F ) Serial.print("0");
                    Serial.print(igh_current_system_settings.serial_number[i], HEX);
                }
                Serial.print("\n");
   d494a:	f003 fa73 	bl	d7e34 <_Z16_fetch_usbserialv>
                Serial.print("MQTT BROKER: "); Serial.println((char *)igh_current_system_settings.broker);
   d494e:	4d28      	ldr	r5, [pc, #160]	; (d49f0 <_Z24igh_app_get_new_settingsv+0x1b4>)
                for( uint8_t i = 0; i < sizeof(igh_default_system_settings.serial_number); i++ )
                {
                    if( igh_current_system_settings.serial_number[i] <= 0x0F ) Serial.print("0");
                    Serial.print(igh_current_system_settings.serial_number[i], HEX);
                }
                Serial.print("\n");
   d4950:	4928      	ldr	r1, [pc, #160]	; (d49f4 <_Z24igh_app_get_new_settingsv+0x1b8>)
   d4952:	f002 ff0f 	bl	d7774 <_ZN5Print5printEPKc>
                Serial.print("MQTT BROKER: "); Serial.println((char *)igh_current_system_settings.broker);
   d4956:	f003 fa6d 	bl	d7e34 <_Z16_fetch_usbserialv>
   d495a:	4927      	ldr	r1, [pc, #156]	; (d49f8 <_Z24igh_app_get_new_settingsv+0x1bc>)
   d495c:	f002 ff0a 	bl	d7774 <_ZN5Print5printEPKc>
   d4960:	f003 fa68 	bl	d7e34 <_Z16_fetch_usbserialv>
   d4964:	4629      	mov	r1, r5
   d4966:	f002 ff18 	bl	d779a <_ZN5Print7printlnEPKc>
                Serial.print("MQTT BROKER PORT: "); Serial.println(igh_current_system_settings.broker_port);
   d496a:	f003 fa63 	bl	d7e34 <_Z16_fetch_usbserialv>
   d496e:	4923      	ldr	r1, [pc, #140]	; (d49fc <_Z24igh_app_get_new_settingsv+0x1c0>)
   d4970:	f002 ff00 	bl	d7774 <_ZN5Print5printEPKc>
   d4974:	f003 fa5e 	bl	d7e34 <_Z16_fetch_usbserialv>
   d4978:	220a      	movs	r2, #10
   d497a:	8f21      	ldrh	r1, [r4, #56]	; 0x38
   d497c:	4606      	mov	r6, r0
   d497e:	f002 ff16 	bl	d77ae <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4982:	4630      	mov	r0, r6
   d4984:	f002 fefd 	bl	d7782 <_ZN5Print7printlnEv>
                Serial.print("CHECKSUM: "); Serial.println(igh_current_system_settings.checksum);
   d4988:	f003 fa54 	bl	d7e34 <_Z16_fetch_usbserialv>
   d498c:	491c      	ldr	r1, [pc, #112]	; (d4a00 <_Z24igh_app_get_new_settingsv+0x1c4>)
   d498e:	f002 fef1 	bl	d7774 <_ZN5Print5printEPKc>
   d4992:	f003 fa4f 	bl	d7e34 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4996:	220a      	movs	r2, #10
   d4998:	f815 1c18 	ldrb.w	r1, [r5, #-24]
   d499c:	4604      	mov	r4, r0
   d499e:	f002 ff06 	bl	d77ae <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d49a2:	4620      	mov	r0, r4
   d49a4:	f002 feed 	bl	d7782 <_ZN5Print7printlnEv>

                if ( true == igh_eeprom_save_system_settings( &igh_current_system_settings) )
   d49a8:	f1a5 0018 	sub.w	r0, r5, #24
   d49ac:	f000 f95a 	bl	d4c64 <_Z31igh_eeprom_save_system_settingsP15system_settings>
   d49b0:	2801      	cmp	r0, #1
   d49b2:	d10a      	bne.n	d49ca <_Z24igh_app_get_new_settingsv+0x18e>
                {
                    Serial.println("Settings Saved successfully");
   d49b4:	f003 fa3e 	bl	d7e34 <_Z16_fetch_usbserialv>
   d49b8:	4912      	ldr	r1, [pc, #72]	; (d4a04 <_Z24igh_app_get_new_settingsv+0x1c8>)
   d49ba:	e002      	b.n	d49c2 <_Z24igh_app_get_new_settingsv+0x186>
                // update the checksum for the threshold settings
                // igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
            }
            else
            {
                Serial.println("SETTINGS FAILED");
   d49bc:	f003 fa3a 	bl	d7e34 <_Z16_fetch_usbserialv>
   d49c0:	4911      	ldr	r1, [pc, #68]	; (d4a08 <_Z24igh_app_get_new_settingsv+0x1cc>)
            }
            
        }
    }
}
   d49c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                // update the checksum for the threshold settings
                // igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
            }
            else
            {
                Serial.println("SETTINGS FAILED");
   d49c6:	f002 bee8 	b.w	d779a <_ZN5Print7printlnEPKc>
   d49ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d49cc:	2003e6f1 	.word	0x2003e6f1
   d49d0:	000d97bf 	.word	0x000d97bf
   d49d4:	000d97ba 	.word	0x000d97ba
   d49d8:	000d97bc 	.word	0x000d97bc
   d49dc:	2003e640 	.word	0x2003e640
   d49e0:	000d97da 	.word	0x000d97da
   d49e4:	000d97e4 	.word	0x000d97e4
   d49e8:	000d97f9 	.word	0x000d97f9
   d49ec:	000d980b 	.word	0x000d980b
   d49f0:	2003e658 	.word	0x2003e658
   d49f4:	000d9b8b 	.word	0x000d9b8b
   d49f8:	000d981b 	.word	0x000d981b
   d49fc:	000d9829 	.word	0x000d9829
   d4a00:	000d983c 	.word	0x000d983c
   d4a04:	000d9847 	.word	0x000d9847
   d4a08:	000d9863 	.word	0x000d9863

000d4a0c <_Z20igh_main_applicationv>:
    // setup MQTT
    igh_mqtt_setup();
}

void igh_main_application( void )
{
   d4a0c:	b508      	push	{r3, lr}
    // check if there are any settings to read
    igh_app_get_new_settings();
   d4a0e:	f7ff ff15 	bl	d483c <_Z24igh_app_get_new_settingsv>

    // process boron service
    igh_boron_service();
   d4a12:	f000 fb2f 	bl	d5074 <_Z17igh_boron_servicev>
    
    // Send or store device restart message
    igh_app_send_device_restart();
   d4a16:	f7ff fe91 	bl	d473c <_Z27igh_app_send_device_restartv>
    
    // Send or Store Spear data
    igh_app_receive_and_stage_sensor_data();
   d4a1a:	f7ff fe3f 	bl	d469c <_Z37igh_app_receive_and_stage_sensor_datav>

    // Run MQTT service in background
    igh_mqtt_service();
   d4a1e:	f000 f80f 	bl	d4a40 <_Z16igh_mqtt_servicev>

    // rfm69 service in the background
    igh_rfm69_service();
}
   d4a22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

    // Run MQTT service in background
    igh_mqtt_service();

    // rfm69 service in the background
    igh_rfm69_service();
   d4a26:	f000 bbef 	b.w	d5208 <_Z17igh_rfm69_servicev>

000d4a2a <_GLOBAL__sub_I_device_restart>:
   d4a2a:	f002 b903 	b.w	d6c34 <HAL_Pin_Map>

000d4a2e <_Z13mqtt_callbackPcPhj>:

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(domain, port, mqtt_callback);

void mqtt_callback(char* topic, byte* payload, unsigned int length) {
   d4a2e:	4770      	bx	lr

000d4a30 <_Z14igh_mqtt_setupv>:
}

void igh_mqtt_setup( void )
{
    // connect to the server
    client.connect( (const char *)device_name );
   d4a30:	4901      	ldr	r1, [pc, #4]	; (d4a38 <_Z14igh_mqtt_setupv+0x8>)
   d4a32:	4802      	ldr	r0, [pc, #8]	; (d4a3c <_Z14igh_mqtt_setupv+0xc>)
   d4a34:	f000 be34 	b.w	d56a0 <_ZN4MQTT7connectEPKc>
   d4a38:	2003da9e 	.word	0x2003da9e
   d4a3c:	2003db5c 	.word	0x2003db5c

000d4a40 <_Z16igh_mqtt_servicev>:
    
}

void igh_mqtt_service( void )
{
   d4a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( true == mqtt_set_broker )
   d4a44:	4b26      	ldr	r3, [pc, #152]	; (d4ae0 <_Z16igh_mqtt_servicev+0xa0>)
   d4a46:	781a      	ldrb	r2, [r3, #0]
   d4a48:	2a01      	cmp	r2, #1
    client.connect( (const char *)device_name );
    
}

void igh_mqtt_service( void )
{
   d4a4a:	af00      	add	r7, sp, #0
   d4a4c:	461d      	mov	r5, r3
    if( true == mqtt_set_broker )
   d4a4e:	d127      	bne.n	d4aa0 <_Z16igh_mqtt_servicev+0x60>
    {
        igh_current_system_settings.broker;
        uint8_t broker_len = 0;
        while( igh_current_system_settings.broker[broker_len] )
   d4a50:	4924      	ldr	r1, [pc, #144]	; (d4ae4 <_Z16igh_mqtt_servicev+0xa4>)

        Serial.print("NEW MQTT BROKER SET: "); Serial.println(new_broker);
        
        client.setBroker(new_broker, igh_current_system_settings.broker_port);

        mqtt_set_broker = false;
   d4a52:	46e8      	mov	r8, sp
   d4a54:	2200      	movs	r2, #0
   d4a56:	1c50      	adds	r0, r2, #1
{
    if( true == mqtt_set_broker )
    {
        igh_current_system_settings.broker;
        uint8_t broker_len = 0;
        while( igh_current_system_settings.broker[broker_len] )
   d4a58:	b2d2      	uxtb	r2, r2
   d4a5a:	188b      	adds	r3, r1, r2
   d4a5c:	4e21      	ldr	r6, [pc, #132]	; (d4ae4 <_Z16igh_mqtt_servicev+0xa4>)
   d4a5e:	7e1c      	ldrb	r4, [r3, #24]
   d4a60:	b10c      	cbz	r4, d4a66 <_Z16igh_mqtt_servicev+0x26>
   d4a62:	4602      	mov	r2, r0
   d4a64:	e7f7      	b.n	d4a56 <_Z16igh_mqtt_servicev+0x16>
        {
            if( '\0' == igh_current_system_settings.broker[broker_len] ) break;
            broker_len++;
        }
        
        char new_broker[broker_len + 1];
   d4a66:	f102 0308 	add.w	r3, r2, #8
   d4a6a:	f023 0307 	bic.w	r3, r3, #7
   d4a6e:	ebad 0d03 	sub.w	sp, sp, r3
        memcpy( new_broker, igh_current_system_settings.broker, sizeof(new_broker) );
   d4a72:	3201      	adds	r2, #1
   d4a74:	f106 0118 	add.w	r1, r6, #24
   d4a78:	4668      	mov	r0, sp
   d4a7a:	f004 fe4d 	bl	d9718 <memcpy>

        Serial.print("NEW MQTT BROKER SET: "); Serial.println(new_broker);
   d4a7e:	f003 f9d9 	bl	d7e34 <_Z16_fetch_usbserialv>
   d4a82:	4919      	ldr	r1, [pc, #100]	; (d4ae8 <_Z16igh_mqtt_servicev+0xa8>)
   d4a84:	f002 fe76 	bl	d7774 <_ZN5Print5printEPKc>
   d4a88:	f003 f9d4 	bl	d7e34 <_Z16_fetch_usbserialv>
   d4a8c:	4669      	mov	r1, sp
   d4a8e:	f002 fe84 	bl	d779a <_ZN5Print7printlnEPKc>
        
        client.setBroker(new_broker, igh_current_system_settings.broker_port);
   d4a92:	4669      	mov	r1, sp
   d4a94:	8f32      	ldrh	r2, [r6, #56]	; 0x38
   d4a96:	4815      	ldr	r0, [pc, #84]	; (d4aec <_Z16igh_mqtt_servicev+0xac>)
   d4a98:	f000 fd18 	bl	d54cc <_ZN4MQTT9setBrokerEPct>

        mqtt_set_broker = false;
   d4a9c:	702c      	strb	r4, [r5, #0]
   d4a9e:	46c5      	mov	sp, r8
    }

    if (client.isConnected())
   d4aa0:	4812      	ldr	r0, [pc, #72]	; (d4aec <_Z16igh_mqtt_servicev+0xac>)
   d4aa2:	f000 fd05 	bl	d54b0 <_ZN4MQTT11isConnectedEv>
   d4aa6:	b118      	cbz	r0, d4ab0 <_Z16igh_mqtt_servicev+0x70>
    {
        client.loop();
   d4aa8:	4810      	ldr	r0, [pc, #64]	; (d4aec <_Z16igh_mqtt_servicev+0xac>)
   d4aaa:	f000 feb6 	bl	d581a <_ZN4MQTT4loopEv>
   d4aae:	e014      	b.n	d4ada <_Z16igh_mqtt_servicev+0x9a>
    }
    else
    {
        /* try to connect */
        if( (millis() - reconnect_interval) > 10000 )
   d4ab0:	4c0f      	ldr	r4, [pc, #60]	; (d4af0 <_Z16igh_mqtt_servicev+0xb0>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4ab2:	f002 f987 	bl	d6dc4 <HAL_Timer_Get_Milli_Seconds>
   d4ab6:	6823      	ldr	r3, [r4, #0]
   d4ab8:	1ac0      	subs	r0, r0, r3
   d4aba:	f242 7310 	movw	r3, #10000	; 0x2710
   d4abe:	4298      	cmp	r0, r3
   d4ac0:	d90b      	bls.n	d4ada <_Z16igh_mqtt_servicev+0x9a>
        {
            // try to reconnect only once every 10 seconds
            Serial.println("Reconnecting to Broker");
   d4ac2:	f003 f9b7 	bl	d7e34 <_Z16_fetch_usbserialv>
   d4ac6:	490b      	ldr	r1, [pc, #44]	; (d4af4 <_Z16igh_mqtt_servicev+0xb4>)
   d4ac8:	f002 fe67 	bl	d779a <_ZN5Print7printlnEPKc>
            client.connect( (const char *)device_name );
   d4acc:	490a      	ldr	r1, [pc, #40]	; (d4af8 <_Z16igh_mqtt_servicev+0xb8>)
   d4ace:	4807      	ldr	r0, [pc, #28]	; (d4aec <_Z16igh_mqtt_servicev+0xac>)
   d4ad0:	f000 fde6 	bl	d56a0 <_ZN4MQTT7connectEPKc>
   d4ad4:	f002 f976 	bl	d6dc4 <HAL_Timer_Get_Milli_Seconds>
            reconnect_interval = millis();
   d4ad8:	6020      	str	r0, [r4, #0]
        }
    }
}
   d4ada:	46bd      	mov	sp, r7
   d4adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4ae0:	2003da60 	.word	0x2003da60
   d4ae4:	2003e640 	.word	0x2003e640
   d4ae8:	000d9873 	.word	0x000d9873
   d4aec:	2003db5c 	.word	0x2003db5c
   d4af0:	2003db58 	.word	0x2003db58
   d4af4:	000d9889 	.word	0x000d9889
   d4af8:	2003da9e 	.word	0x2003da9e

000d4afc <_Z21igh_mqtt_publish_dataPhj>:

bool igh_mqtt_publish_data( uint8_t *payload, unsigned int len )
{
   d4afc:	b570      	push	{r4, r5, r6, lr}
   d4afe:	4605      	mov	r5, r0
    bool ret = false;
    if (client.isConnected()) {
   d4b00:	480c      	ldr	r0, [pc, #48]	; (d4b34 <_Z21igh_mqtt_publish_dataPhj+0x38>)
        }
    }
}

bool igh_mqtt_publish_data( uint8_t *payload, unsigned int len )
{
   d4b02:	460e      	mov	r6, r1
    bool ret = false;
    if (client.isConnected()) {
   d4b04:	f000 fcd4 	bl	d54b0 <_ZN4MQTT11isConnectedEv>
   d4b08:	4604      	mov	r4, r0
   d4b0a:	b158      	cbz	r0, d4b24 <_Z21igh_mqtt_publish_dataPhj+0x28>
        client.publish( (const char *)outbound_topic, 
                        (const uint8_t*) payload, len);
   d4b0c:	4633      	mov	r3, r6
   d4b0e:	462a      	mov	r2, r5
   d4b10:	4909      	ldr	r1, [pc, #36]	; (d4b38 <_Z21igh_mqtt_publish_dataPhj+0x3c>)
   d4b12:	4808      	ldr	r0, [pc, #32]	; (d4b34 <_Z21igh_mqtt_publish_dataPhj+0x38>)
   d4b14:	f000 fe44 	bl	d57a0 <_ZN4MQTT7publishEPKcPKhj>
        client.subscribe( (const char *)inbound_topic );
   d4b18:	4908      	ldr	r1, [pc, #32]	; (d4b3c <_Z21igh_mqtt_publish_dataPhj+0x40>)
   d4b1a:	4806      	ldr	r0, [pc, #24]	; (d4b34 <_Z21igh_mqtt_publish_dataPhj+0x38>)
   d4b1c:	f000 ffa9 	bl	d5a72 <_ZN4MQTT9subscribeEPKc>
        ret = true;
   d4b20:	2001      	movs	r0, #1
   d4b22:	bd70      	pop	{r4, r5, r6, pc}
    }
    else
    {
        Serial.println("PUBLISH FAILED");
   d4b24:	f003 f986 	bl	d7e34 <_Z16_fetch_usbserialv>
   d4b28:	4905      	ldr	r1, [pc, #20]	; (d4b40 <_Z21igh_mqtt_publish_dataPhj+0x44>)
   d4b2a:	f002 fe36 	bl	d779a <_ZN5Print7printlnEPKc>
    }
}

bool igh_mqtt_publish_data( uint8_t *payload, unsigned int len )
{
    bool ret = false;
   d4b2e:	4620      	mov	r0, r4
    else
    {
        Serial.println("PUBLISH FAILED");
    }
    return ret;
}
   d4b30:	bd70      	pop	{r4, r5, r6, pc}
   d4b32:	bf00      	nop
   d4b34:	2003db5c 	.word	0x2003db5c
   d4b38:	2003da80 	.word	0x2003da80
   d4b3c:	2003dab2 	.word	0x2003dab2
   d4b40:	000d98a0 	.word	0x000d98a0

000d4b44 <_GLOBAL__sub_I_domain>:
   d4b44:	b510      	push	{r4, lr}
   d4b46:	f002 f875 	bl	d6c34 <HAL_Pin_Map>
unsigned long upload_timer = 0;
unsigned long reconnect_interval = 0;

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(domain, port, mqtt_callback);
   d4b4a:	4c07      	ldr	r4, [pc, #28]	; (d4b68 <_GLOBAL__sub_I_domain+0x24>)
   d4b4c:	4a07      	ldr	r2, [pc, #28]	; (d4b6c <_GLOBAL__sub_I_domain+0x28>)
   d4b4e:	4908      	ldr	r1, [pc, #32]	; (d4b70 <_GLOBAL__sub_I_domain+0x2c>)
   d4b50:	8812      	ldrh	r2, [r2, #0]
   d4b52:	4b08      	ldr	r3, [pc, #32]	; (d4b74 <_GLOBAL__sub_I_domain+0x30>)
   d4b54:	4620      	mov	r0, r4
   d4b56:	f000 fbc3 	bl	d52e0 <_ZN4MQTTC1EPctPFvS0_PhjE>
   d4b5a:	4620      	mov	r0, r4
   d4b5c:	4a06      	ldr	r2, [pc, #24]	; (d4b78 <_GLOBAL__sub_I_domain+0x34>)
   d4b5e:	4907      	ldr	r1, [pc, #28]	; (d4b7c <_GLOBAL__sub_I_domain+0x38>)
    else
    {
        Serial.println("PUBLISH FAILED");
    }
    return ret;
}
   d4b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
unsigned long upload_timer = 0;
unsigned long reconnect_interval = 0;

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(domain, port, mqtt_callback);
   d4b64:	f004 b846 	b.w	d8bf4 <__aeabi_atexit>
   d4b68:	2003db5c 	.word	0x2003db5c
   d4b6c:	2003dab0 	.word	0x2003dab0
   d4b70:	2003dad4 	.word	0x2003dad4
   d4b74:	000d4a2f 	.word	0x000d4a2f
   d4b78:	2003db50 	.word	0x2003db50
   d4b7c:	000d5a79 	.word	0x000d5a79

000d4b80 <_GLOBAL__sub_I_test_valve_flag>:
        igh_append_test_status(ret);
        test_rfm69_flag = false;
    }

    return ret;
   d4b80:	b510      	push	{r4, lr}
static void print_cmd_options(void);
static void igh_append_test_status(uint8_t _status);

uint8_t test_rfm69_flag = 0;

String IGH_ID;
   d4b82:	4c07      	ldr	r4, [pc, #28]	; (d4ba0 <_GLOBAL__sub_I_test_valve_flag+0x20>)
   d4b84:	f002 f856 	bl	d6c34 <HAL_Pin_Map>
   d4b88:	4906      	ldr	r1, [pc, #24]	; (d4ba4 <_GLOBAL__sub_I_test_valve_flag+0x24>)
   d4b8a:	4620      	mov	r0, r4
   d4b8c:	f002 fd9b 	bl	d76c6 <_ZN6StringC1EPK19__FlashStringHelper>
   d4b90:	4620      	mov	r0, r4
   d4b92:	4a05      	ldr	r2, [pc, #20]	; (d4ba8 <_GLOBAL__sub_I_test_valve_flag+0x28>)
   d4b94:	4905      	ldr	r1, [pc, #20]	; (d4bac <_GLOBAL__sub_I_test_valve_flag+0x2c>)
        igh_append_test_status(ret);
        test_rfm69_flag = false;
    }

    return ret;
   d4b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void print_cmd_options(void);
static void igh_append_test_status(uint8_t _status);

uint8_t test_rfm69_flag = 0;

String IGH_ID;
   d4b9a:	f004 b82b 	b.w	d8bf4 <__aeabi_atexit>
   d4b9e:	bf00      	nop
   d4ba0:	2003dbb4 	.word	0x2003dbb4
   d4ba4:	000d9b8c 	.word	0x000d9b8c
   d4ba8:	2003db50 	.word	0x2003db50
   d4bac:	000d7639 	.word	0x000d7639

000d4bb0 <_Z31igh_eeprom_read_system_settingsP15system_settings>:
 * \brief Gets system settings from eeprom emulator
 * \param running_system_settings_buffer: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_system_settings(system_settings * running_system_settings_buffer)
{
   d4bb0:	b530      	push	{r4, r5, lr}
   d4bb2:	b091      	sub	sp, #68	; 0x44
  system_settings local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d4bb4:	223c      	movs	r2, #60	; 0x3c
   d4bb6:	2100      	movs	r1, #0
 * \brief Gets system settings from eeprom emulator
 * \param running_system_settings_buffer: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_system_settings(system_settings * running_system_settings_buffer)
{
   d4bb8:	4605      	mov	r5, r0
  system_settings local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d4bba:	a801      	add	r0, sp, #4
   d4bbc:	f004 fdb7 	bl	d972e <memset>
  EEPROM.get(SYSTEM_SETTINGS_ADDRESS, local_buffer);
   d4bc0:	f003 ff84 	bl	d8acc <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4bc4:	223c      	movs	r2, #60	; 0x3c
   d4bc6:	a901      	add	r1, sp, #4
   d4bc8:	2000      	movs	r0, #0
   d4bca:	f002 f913 	bl	d6df4 <HAL_EEPROM_Get>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));
   d4bce:	213c      	movs	r1, #60	; 0x3c
   d4bd0:	a801      	add	r0, sp, #4
   d4bd2:	f7ff fc15 	bl	d4400 <igh_settings_calculate_checksum>

  if( checksum != local_buffer.checksum)
   d4bd6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4bda:	4283      	cmp	r3, r0
   d4bdc:	d10c      	bne.n	d4bf8 <_Z31igh_eeprom_read_system_settingsP15system_settings+0x48>
  {
    return 0;
  }

  *running_system_settings_buffer = local_buffer;
   d4bde:	ac01      	add	r4, sp, #4
   d4be0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4be2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4be4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4be6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4be8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4bea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4bec:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   d4bf0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  return 1;
   d4bf4:	2001      	movs	r0, #1
   d4bf6:	e000      	b.n	d4bfa <_Z31igh_eeprom_read_system_settingsP15system_settings+0x4a>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));

  if( checksum != local_buffer.checksum)
  {
    return 0;
   d4bf8:	2000      	movs	r0, #0
  }

  *running_system_settings_buffer = local_buffer;
  return 1;

}
   d4bfa:	b011      	add	sp, #68	; 0x44
   d4bfc:	bd30      	pop	{r4, r5, pc}
	...

000d4c00 <_Z15igh_eeprom_initv>:
#define SYSTEM_THRESHOLDS_ADDRESS   (int)0x0200
#define SYSTEM_ERRORS_ADDRESS       (int)0x0400


void igh_eeprom_init( void )
{
   d4c00:	b530      	push	{r4, r5, lr}
   d4c02:	b091      	sub	sp, #68	; 0x44
  system_settings settings_in_memory;
  bool settings_read_successfully = igh_eeprom_read_system_settings(&settings_in_memory);
   d4c04:	a801      	add	r0, sp, #4
   d4c06:	f7ff ffd3 	bl	d4bb0 <_Z31igh_eeprom_read_system_settingsP15system_settings>
  uint8_t valid_checksum = igh_settings_calculate_checksum( &settings_in_memory, sizeof(settings_in_memory) );
   d4c0a:	213c      	movs	r1, #60	; 0x3c


void igh_eeprom_init( void )
{
  system_settings settings_in_memory;
  bool settings_read_successfully = igh_eeprom_read_system_settings(&settings_in_memory);
   d4c0c:	4604      	mov	r4, r0
  uint8_t valid_checksum = igh_settings_calculate_checksum( &settings_in_memory, sizeof(settings_in_memory) );
   d4c0e:	a801      	add	r0, sp, #4
   d4c10:	f7ff fbf6 	bl	d4400 <igh_settings_calculate_checksum>

  if( false == settings_read_successfully ||
   d4c14:	b124      	cbz	r4, d4c20 <_Z15igh_eeprom_initv+0x20>
   d4c16:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4c1a:	4283      	cmp	r3, r0
   d4c1c:	d100      	bne.n	d4c20 <_Z15igh_eeprom_initv+0x20>
      (settings_in_memory.checksum != valid_checksum) ||
   d4c1e:	b93b      	cbnz	r3, d4c30 <_Z15igh_eeprom_initv+0x30>
      ( 0 == settings_in_memory.checksum) )
  {
    // if we can't get valid settings from memory at all, use default settings
    Serial.println("USING DEFAULT SETTINGS");
   d4c20:	f003 f908 	bl	d7e34 <_Z16_fetch_usbserialv>
   d4c24:	490c      	ldr	r1, [pc, #48]	; (d4c58 <_Z15igh_eeprom_initv+0x58>)
   d4c26:	f002 fdb8 	bl	d779a <_ZN5Print7printlnEPKc>
    igh_settings_reset_system_to_default();
   d4c2a:	f7ff fbf7 	bl	d441c <igh_settings_reset_system_to_default>
   d4c2e:	e010      	b.n	d4c52 <_Z15igh_eeprom_initv+0x52>
  }
  else
  {
    Serial.println("USING SETTINGS FROM MEMORY");
   d4c30:	f003 f900 	bl	d7e34 <_Z16_fetch_usbserialv>
    igh_current_system_settings = settings_in_memory;
   d4c34:	ac01      	add	r4, sp, #4
    Serial.println("USING DEFAULT SETTINGS");
    igh_settings_reset_system_to_default();
  }
  else
  {
    Serial.println("USING SETTINGS FROM MEMORY");
   d4c36:	4909      	ldr	r1, [pc, #36]	; (d4c5c <_Z15igh_eeprom_initv+0x5c>)
    igh_current_system_settings = settings_in_memory;
   d4c38:	4d09      	ldr	r5, [pc, #36]	; (d4c60 <_Z15igh_eeprom_initv+0x60>)
    Serial.println("USING DEFAULT SETTINGS");
    igh_settings_reset_system_to_default();
  }
  else
  {
    Serial.println("USING SETTINGS FROM MEMORY");
   d4c3a:	f002 fdae 	bl	d779a <_ZN5Print7printlnEPKc>
    igh_current_system_settings = settings_in_memory;
   d4c3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4c40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4c42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4c44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4c46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4c48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4c4a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   d4c4e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  }
}
   d4c52:	b011      	add	sp, #68	; 0x44
   d4c54:	bd30      	pop	{r4, r5, pc}
   d4c56:	bf00      	nop
   d4c58:	000d993e 	.word	0x000d993e
   d4c5c:	000d9955 	.word	0x000d9955
   d4c60:	2003e640 	.word	0x2003e640

000d4c64 <_Z31igh_eeprom_save_system_settingsP15system_settings>:
 * \brief Save system settings  to eeprom emulator
 * \param settings_to_save: pointer to struct to save
 * \return true or false based on write success
 */
uint8_t igh_eeprom_save_system_settings(system_settings * settings_to_save)
{
   d4c64:	b510      	push	{r4, lr}
   d4c66:	4604      	mov	r4, r0
   d4c68:	b090      	sub	sp, #64	; 0x40
  system_settings local_buffer;
  // save the data
  EEPROM.put(SYSTEM_SETTINGS_ADDRESS, *settings_to_save);
   d4c6a:	f003 ff2f 	bl	d8acc <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4c6e:	223c      	movs	r2, #60	; 0x3c
   d4c70:	4621      	mov	r1, r4
   d4c72:	2000      	movs	r0, #0
   d4c74:	f002 f8c6 	bl	d6e04 <HAL_EEPROM_Put>
  // check if data is saved
  igh_eeprom_read_system_settings(&local_buffer);
   d4c78:	a801      	add	r0, sp, #4
   d4c7a:	f7ff ff99 	bl	d4bb0 <_Z31igh_eeprom_read_system_settingsP15system_settings>

  if( local_buffer.checksum != (settings_to_save->checksum))
  {
    return 0;
   d4c7e:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d4c82:	7823      	ldrb	r3, [r4, #0]
  }

  return 1;
}
   d4c84:	1ac3      	subs	r3, r0, r3
   d4c86:	4258      	negs	r0, r3
   d4c88:	4158      	adcs	r0, r3
   d4c8a:	b010      	add	sp, #64	; 0x40
   d4c8c:	bd10      	pop	{r4, pc}

000d4c8e <_GLOBAL__sub_I__Z15igh_eeprom_initv>:
   d4c8e:	f001 bfd1 	b.w	d6c34 <HAL_Pin_Map>

000d4c92 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d4c92:	6803      	ldr	r3, [r0, #0]
   d4c94:	4718      	bx	r3

000d4c96 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4c96:	2a01      	cmp	r2, #1
   d4c98:	d002      	beq.n	d4ca0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d4c9a:	2a02      	cmp	r2, #2
   d4c9c:	d002      	beq.n	d4ca4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d4c9e:	e004      	b.n	d4caa <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4ca0:	6001      	str	r1, [r0, #0]
	      break;
   d4ca2:	e002      	b.n	d4caa <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d4ca4:	680b      	ldr	r3, [r1, #0]
   d4ca6:	b100      	cbz	r0, d4caa <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d4ca8:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4caa:	2000      	movs	r0, #0
   d4cac:	4770      	bx	lr

000d4cae <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d4cae:	6943      	ldr	r3, [r0, #20]
   d4cb0:	b113      	cbz	r3, d4cb8 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4cb2:	6983      	ldr	r3, [r0, #24]
   d4cb4:	300c      	adds	r0, #12
   d4cb6:	4718      	bx	r3
   d4cb8:	4770      	bx	lr

000d4cba <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4cba:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4cbc:	2100      	movs	r1, #0
   d4cbe:	4604      	mov	r4, r0
   d4cc0:	4608      	mov	r0, r1
   d4cc2:	f002 f8cf 	bl	d6e64 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4cc6:	a902      	add	r1, sp, #8
   d4cc8:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4cca:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4ccc:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d4cd0:	f002 f8e0 	bl	d6e94 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d4cd4:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4cd6:	b10c      	cbz	r4, d4cdc <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d4cd8:	2301      	movs	r3, #1
   d4cda:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4cdc:	2100      	movs	r1, #0
   d4cde:	2001      	movs	r0, #1
   d4ce0:	f002 f8c0 	bl	d6e64 <os_thread_scheduling>
            }
        }
        if (t) {
   d4ce4:	b12c      	cbz	r4, d4cf2 <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d4ce6:	6823      	ldr	r3, [r4, #0]
   d4ce8:	4620      	mov	r0, r4
   d4cea:	689b      	ldr	r3, [r3, #8]
   d4cec:	4798      	blx	r3
            t->running = false;
   d4cee:	2300      	movs	r3, #0
   d4cf0:	7123      	strb	r3, [r4, #4]
        }
    }
   d4cf2:	b002      	add	sp, #8
   d4cf4:	bd10      	pop	{r4, pc}

000d4cf6 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4cf6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4cf8:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4cfa:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4cfc:	b113      	cbz	r3, d4d04 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4cfe:	2203      	movs	r2, #3
   d4d00:	4601      	mov	r1, r0
   d4d02:	4798      	blx	r3
    }
   d4d04:	4620      	mov	r0, r4
   d4d06:	bd10      	pop	{r4, pc}

000d4d08 <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d4d08:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d4d0a:	6880      	ldr	r0, [r0, #8]
   d4d0c:	2300      	movs	r3, #0
   d4d0e:	b138      	cbz	r0, d4d20 <_ZN5Timer5_stopEjb+0x18>
   d4d10:	e88d 000a 	stmia.w	sp, {r1, r3}
   d4d14:	2102      	movs	r1, #2
   d4d16:	f002 f8c5 	bl	d6ea4 <os_timer_change>
   d4d1a:	fab0 f080 	clz	r0, r0
   d4d1e:	0940      	lsrs	r0, r0, #5
    }
   d4d20:	b003      	add	sp, #12
   d4d22:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4d28 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4d28:	b538      	push	{r3, r4, r5, lr}
   d4d2a:	4b10      	ldr	r3, [pc, #64]	; (d4d6c <_ZN5TimerD1Ev+0x44>)
   d4d2c:	6003      	str	r3, [r0, #0]
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d4d2e:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4d30:	4604      	mov	r4, r0
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d4d32:	b1a3      	cbz	r3, d4d5e <_ZN5TimerD1Ev+0x36>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4d34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4d38:	2200      	movs	r2, #0
   d4d3a:	f7ff ffe5 	bl	d4d08 <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d4d3e:	2100      	movs	r1, #0
   d4d40:	68a0      	ldr	r0, [r4, #8]
   d4d42:	f002 f8c7 	bl	d6ed4 <os_timer_set_id>
            while (running) {
   d4d46:	7923      	ldrb	r3, [r4, #4]
   d4d48:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d4d4c:	b113      	cbz	r3, d4d54 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d4d4e:	f002 f871 	bl	d6e34 <os_thread_yield>
   d4d52:	e7f8      	b.n	d4d46 <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d4d54:	4629      	mov	r1, r5
   d4d56:	68a0      	ldr	r0, [r4, #8]
   d4d58:	f002 f894 	bl	d6e84 <os_timer_destroy>
            handle = nullptr;
   d4d5c:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4d5e:	f104 000c 	add.w	r0, r4, #12
   d4d62:	f7ff ffc8 	bl	d4cf6 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d4d66:	4620      	mov	r0, r4
   d4d68:	bd38      	pop	{r3, r4, r5, pc}
   d4d6a:	bf00      	nop
   d4d6c:	000d9988 	.word	0x000d9988

000d4d70 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4d70:	b510      	push	{r4, lr}
   d4d72:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d4d74:	f7ff ffd8 	bl	d4d28 <_ZN5TimerD1Ev>
   d4d78:	4620      	mov	r0, r4
   d4d7a:	211c      	movs	r1, #28
   d4d7c:	f003 ff48 	bl	d8c10 <_ZdlPvj>
   d4d80:	4620      	mov	r0, r4
   d4d82:	bd10      	pop	{r4, pc}

000d4d84 <_Z21igh_boron_read_buttonv>:
    igh_button_timer.start();
    igh_button_sec_counter = 0;
}

uint8_t igh_boron_read_button(void)
{
   d4d84:	b508      	push	{r3, lr}
    return digitalRead(IGH_IRRIGATION_BUTTON);
   d4d86:	200f      	movs	r0, #15
   d4d88:	f003 fe8c 	bl	d8aa4 <digitalRead>
}
   d4d8c:	b2c0      	uxtb	r0, r0
   d4d8e:	bd08      	pop	{r3, pc}

000d4d90 <_Z31igh_boron_button_press_durationv>:

void igh_boron_button_press_duration(void)
{
   d4d90:	b508      	push	{r3, lr}
    if(!igh_boron_read_button())
   d4d92:	f7ff fff7 	bl	d4d84 <_Z21igh_boron_read_buttonv>
   d4d96:	4b04      	ldr	r3, [pc, #16]	; (d4da8 <_Z31igh_boron_button_press_durationv+0x18>)
   d4d98:	b910      	cbnz	r0, d4da0 <_Z31igh_boron_button_press_durationv+0x10>
    {
        igh_button_sec_counter++;
   d4d9a:	781a      	ldrb	r2, [r3, #0]
   d4d9c:	3201      	adds	r2, #1
   d4d9e:	e000      	b.n	d4da2 <_Z31igh_boron_button_press_durationv+0x12>
    }
    else
    {
        igh_button_sec_counter = 0;
   d4da0:	2200      	movs	r2, #0
   d4da2:	701a      	strb	r2, [r3, #0]
   d4da4:	bd08      	pop	{r3, pc}
   d4da6:	bf00      	nop
   d4da8:	2003dbc4 	.word	0x2003dbc4

000d4dac <_GLOBAL__sub_I_igh_button_sec_counter>:
    } 
   d4dac:	b570      	push	{r4, r5, r6, lr}
   d4dae:	b088      	sub	sp, #32
   d4db0:	f001 ff40 	bl	d6c34 <HAL_Pin_Map>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d4db4:	4b19      	ldr	r3, [pc, #100]	; (d4e1c <_GLOBAL__sub_I_igh_button_sec_counter+0x70>)
   d4db6:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4db8:	ad04      	add	r5, sp, #16
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d4dba:	4c19      	ldr	r4, [pc, #100]	; (d4e20 <_GLOBAL__sub_I_igh_button_sec_counter+0x74>)
   d4dbc:	4b19      	ldr	r3, [pc, #100]	; (d4e24 <_GLOBAL__sub_I_igh_button_sec_counter+0x78>)
   d4dbe:	6023      	str	r3, [r4, #0]
   d4dc0:	e895 0003 	ldmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4dc4:	f104 020c 	add.w	r2, r4, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4dc8:	ae02      	add	r6, sp, #8
   d4dca:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4dce:	e892 0003 	ldmia.w	r2, {r0, r1}
   d4dd2:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4dd6:	e896 0003 	ldmia.w	r6, {r0, r1}
   d4dda:	e882 0003 	stmia.w	r2, {r0, r1}
   d4dde:	4a12      	ldr	r2, [pc, #72]	; (d4e28 <_GLOBAL__sub_I_igh_button_sec_counter+0x7c>)
   d4de0:	6162      	str	r2, [r4, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4de2:	69a2      	ldr	r2, [r4, #24]
   d4de4:	9207      	str	r2, [sp, #28]
   d4de6:	2300      	movs	r3, #0
      __b = _GLIBCXX_MOVE(__tmp);
   d4de8:	4a10      	ldr	r2, [pc, #64]	; (d4e2c <_GLOBAL__sub_I_igh_button_sec_counter+0x80>)
   d4dea:	7123      	strb	r3, [r4, #4]
   d4dec:	60a3      	str	r3, [r4, #8]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4dee:	9306      	str	r3, [sp, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   d4df0:	61a2      	str	r2, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d4df2:	9301      	str	r3, [sp, #4]
   d4df4:	9300      	str	r3, [sp, #0]
   d4df6:	4a0e      	ldr	r2, [pc, #56]	; (d4e30 <_GLOBAL__sub_I_igh_button_sec_counter+0x84>)
   d4df8:	4623      	mov	r3, r4
   d4dfa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4dfe:	f104 0008 	add.w	r0, r4, #8
   d4e02:	f002 f837 	bl	d6e74 <os_timer_create>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4e06:	4628      	mov	r0, r5
   d4e08:	f7ff ff75 	bl	d4cf6 <_ZNSt14_Function_baseD1Ev>
#include "igh_hardware.h"
#include "include/igh_settings.h"

// button global variables
uint8_t igh_button_sec_counter;
Timer igh_button_timer(1000, igh_boron_button_press_duration);
   d4e0c:	4a09      	ldr	r2, [pc, #36]	; (d4e34 <_GLOBAL__sub_I_igh_button_sec_counter+0x88>)
   d4e0e:	490a      	ldr	r1, [pc, #40]	; (d4e38 <_GLOBAL__sub_I_igh_button_sec_counter+0x8c>)
   d4e10:	4620      	mov	r0, r4
   d4e12:	f003 feef 	bl	d8bf4 <__aeabi_atexit>
    }
    else
    {
        igh_button_sec_counter = 0;
    } 
   d4e16:	b008      	add	sp, #32
   d4e18:	bd70      	pop	{r4, r5, r6, pc}
   d4e1a:	bf00      	nop
   d4e1c:	000d4d91 	.word	0x000d4d91
   d4e20:	2003dbc8 	.word	0x2003dbc8
   d4e24:	000d9988 	.word	0x000d9988
   d4e28:	000d4c97 	.word	0x000d4c97
   d4e2c:	000d4c93 	.word	0x000d4c93
   d4e30:	000d4cbb 	.word	0x000d4cbb
   d4e34:	2003db50 	.word	0x2003db50
   d4e38:	000d4d29 	.word	0x000d4d29

000d4e3c <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d4e3c:	7c03      	ldrb	r3, [r0, #16]
   d4e3e:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d4e42:	4602      	mov	r2, r0
   d4e44:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d4e48:	b12b      	cbz	r3, d4e56 <_ZN4File9availableEv+0x1a>
   d4e4a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d4e4c:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d4e4e:	1a18      	subs	r0, r3, r0
   d4e50:	bf48      	it	mi
   d4e52:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d4e56:	4770      	bx	lr

000d4e58 <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
   d4e58:	4770      	bx	lr

000d4e5a <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d4e5a:	4770      	bx	lr

000d4e5c <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4e5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4e5e:	4602      	mov	r2, r0
   d4e60:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4e62:	7913      	ldrb	r3, [r2, #4]
   d4e64:	6895      	ldr	r5, [r2, #8]
   d4e66:	b133      	cbz	r3, d4e76 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d4e68:	b93d      	cbnz	r5, d4e7a <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d4e6a:	490c      	ldr	r1, [pc, #48]	; (d4e9c <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d4e6c:	b004      	add	sp, #16
   d4e6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d4e72:	f002 bc7f 	b.w	d7774 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d4e76:	4b0a      	ldr	r3, [pc, #40]	; (d4ea0 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d4e78:	e000      	b.n	d4e7c <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d4e7a:	4b0a      	ldr	r3, [pc, #40]	; (d4ea4 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d4e7c:	7b16      	ldrb	r6, [r2, #12]
   d4e7e:	4c0a      	ldr	r4, [pc, #40]	; (d4ea8 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d4e80:	490a      	ldr	r1, [pc, #40]	; (d4eac <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4e82:	7b52      	ldrb	r2, [r2, #13]
   d4e84:	9202      	str	r2, [sp, #8]
   d4e86:	2e01      	cmp	r6, #1
   d4e88:	bf08      	it	eq
   d4e8a:	4621      	moveq	r1, r4
   d4e8c:	9101      	str	r1, [sp, #4]
   d4e8e:	9500      	str	r5, [sp, #0]
   d4e90:	4a07      	ldr	r2, [pc, #28]	; (d4eb0 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d4e92:	2100      	movs	r1, #0
   d4e94:	f002 fcab 	bl	d77ee <_ZN5Print11printf_implEbPKcz>
  }
   d4e98:	b004      	add	sp, #16
   d4e9a:	bd70      	pop	{r4, r5, r6, pc}
   d4e9c:	000d99f1 	.word	0x000d99f1
   d4ea0:	000d9b8c 	.word	0x000d9b8c
   d4ea4:	000d99e0 	.word	0x000d99e0
   d4ea8:	000d99e9 	.word	0x000d99e9
   d4eac:	000d99ed 	.word	0x000d99ed
   d4eb0:	000d9a07 	.word	0x000d9a07

000d4eb4 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d4eb4:	3010      	adds	r0, #16
   d4eb6:	f000 bf37 	b.w	d5d28 <_ZN7FatFile4syncEv>

000d4eba <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d4eba:	3010      	adds	r0, #16
   d4ebc:	f000 bed8 	b.w	d5c70 <_ZN7FatFile4peekEv>

000d4ec0 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d4ec0:	3010      	adds	r0, #16
   d4ec2:	f000 bf67 	b.w	d5d94 <_ZN7FatFile5writeEPKvj>

000d4ec6 <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d4ec6:	3008      	adds	r0, #8
   d4ec8:	f000 bf64 	b.w	d5d94 <_ZN7FatFile5writeEPKvj>

000d4ecc <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d4ecc:	b507      	push	{r0, r1, r2, lr}
   d4ece:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d4ed0:	2201      	movs	r2, #1
   d4ed2:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d4ed6:	3010      	adds	r0, #16
   d4ed8:	4619      	mov	r1, r3
   d4eda:	f000 ff5b 	bl	d5d94 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d4ede:	b003      	add	sp, #12
   d4ee0:	f85d fb04 	ldr.w	pc, [sp], #4

000d4ee4 <_ZN6SdFileD0Ev>:
   d4ee4:	b510      	push	{r4, lr}
   d4ee6:	212c      	movs	r1, #44	; 0x2c
   d4ee8:	4604      	mov	r4, r0
   d4eea:	f003 fe91 	bl	d8c10 <_ZdlPvj>
   d4eee:	4620      	mov	r0, r4
   d4ef0:	bd10      	pop	{r4, pc}

000d4ef2 <_ZN4FileD0Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d4ef2:	b510      	push	{r4, lr}
   d4ef4:	2134      	movs	r1, #52	; 0x34
   d4ef6:	4604      	mov	r4, r0
   d4ef8:	f003 fe8a 	bl	d8c10 <_ZdlPvj>
   d4efc:	4620      	mov	r0, r4
   d4efe:	bd10      	pop	{r4, pc}

000d4f00 <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d4f00:	b507      	push	{r0, r1, r2, lr}
   d4f02:	ab02      	add	r3, sp, #8
   d4f04:	2201      	movs	r2, #1
   d4f06:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d4f0a:	3008      	adds	r0, #8
   d4f0c:	4619      	mov	r1, r3
   d4f0e:	f000 ff41 	bl	d5d94 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d4f12:	b003      	add	sp, #12
   d4f14:	f85d fb04 	ldr.w	pc, [sp], #4

000d4f18 <_ZN7FatFile4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
   d4f18:	b507      	push	{r0, r1, r2, lr}
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d4f1a:	2201      	movs	r2, #1
   d4f1c:	f10d 0107 	add.w	r1, sp, #7
   d4f20:	f000 fdf3 	bl	d5b0a <_ZN7FatFile4readEPvj>
   d4f24:	2801      	cmp	r0, #1
   d4f26:	bf0c      	ite	eq
   d4f28:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d4f2c:	f04f 30ff 	movne.w	r0, #4294967295
  }
   d4f30:	b003      	add	sp, #12
   d4f32:	f85d fb04 	ldr.w	pc, [sp], #4

000d4f36 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d4f36:	b508      	push	{r3, lr}
    return FatFile::read();
   d4f38:	3010      	adds	r0, #16
   d4f3a:	f7ff ffed 	bl	d4f18 <_ZN7FatFile4readEv>
  }
   d4f3e:	bd08      	pop	{r3, pc}

000d4f40 <_GLOBAL__sub_I_igh_sd>:
    {
        return 0;
    }

    return 1;
   d4f40:	b570      	push	{r4, r5, r6, lr}
   d4f42:	f001 fe77 	bl	d6c34 <HAL_Pin_Map>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d4f46:	4b27      	ldr	r3, [pc, #156]	; (d4fe4 <_GLOBAL__sub_I_igh_sd+0xa4>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d4f48:	4e27      	ldr	r6, [pc, #156]	; (d4fe8 <_GLOBAL__sub_I_igh_sd+0xa8>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d4f4a:	2164      	movs	r1, #100	; 0x64
   d4f4c:	f883 1460 	strb.w	r1, [r3, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d4f50:	4926      	ldr	r1, [pc, #152]	; (d4fec <_GLOBAL__sub_I_igh_sd+0xac>)
   d4f52:	f8c3 1470 	str.w	r1, [r3, #1136]	; 0x470
   d4f56:	2101      	movs	r1, #1
   d4f58:	f883 1474 	strb.w	r1, [r3, #1140]	; 0x474
   d4f5c:	6831      	ldr	r1, [r6, #0]
   d4f5e:	2200      	movs	r2, #0
   d4f60:	f011 0501 	ands.w	r5, r1, #1
   d4f64:	71da      	strb	r2, [r3, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4f66:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
   d4f6a:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
   d4f6e:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
   d4f72:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   d4f76:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
   d4f7a:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
   d4f7e:	461c      	mov	r4, r3
   d4f80:	d10a      	bne.n	d4f98 <_GLOBAL__sub_I_igh_sd+0x58>
   d4f82:	4630      	mov	r0, r6
   d4f84:	f7ff f88f 	bl	d40a6 <__cxa_guard_acquire>
   d4f88:	b130      	cbz	r0, d4f98 <_GLOBAL__sub_I_igh_sd+0x58>
   d4f8a:	4629      	mov	r1, r5
   d4f8c:	4818      	ldr	r0, [pc, #96]	; (d4ff0 <_GLOBAL__sub_I_igh_sd+0xb0>)
   d4f8e:	f002 f9f1 	bl	d7374 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4f92:	4630      	mov	r0, r6
   d4f94:	f7ff f88c 	bl	d40b0 <__cxa_guard_release>
   d4f98:	4816      	ldr	r0, [pc, #88]	; (d4ff4 <_GLOBAL__sub_I_igh_sd+0xb4>)
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d4f9a:	4b15      	ldr	r3, [pc, #84]	; (d4ff0 <_GLOBAL__sub_I_igh_sd+0xb0>)
   d4f9c:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d4fa0:	2400      	movs	r4, #0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4fa6:	7404      	strb	r4, [r0, #16]
   d4fa8:	7444      	strb	r4, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4faa:	6044      	str	r4, [r0, #4]
   d4fac:	6083      	str	r3, [r0, #8]
#include <SPI.h>
#include "SdFat.h"
#include "igh_sd_log.h"

SdFat igh_sd;
File igh_file;
   d4fae:	4a12      	ldr	r2, [pc, #72]	; (d4ff8 <_GLOBAL__sub_I_igh_sd+0xb8>)
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 public:
  File() {}
   d4fb0:	4b12      	ldr	r3, [pc, #72]	; (d4ffc <_GLOBAL__sub_I_igh_sd+0xbc>)
   d4fb2:	4913      	ldr	r1, [pc, #76]	; (d5000 <_GLOBAL__sub_I_igh_sd+0xc0>)
   d4fb4:	6003      	str	r3, [r0, #0]
   d4fb6:	f003 fe1d 	bl	d8bf4 <__aeabi_atexit>
   d4fba:	4812      	ldr	r0, [pc, #72]	; (d5004 <_GLOBAL__sub_I_igh_sd+0xc4>)
 public:
  SdFile() {}
   d4fbc:	4d12      	ldr	r5, [pc, #72]	; (d5008 <_GLOBAL__sub_I_igh_sd+0xc8>)
   d4fbe:	7204      	strb	r4, [r0, #8]
   d4fc0:	7244      	strb	r4, [r0, #9]
   d4fc2:	6044      	str	r4, [r0, #4]
SdFile sd_root;
   d4fc4:	4a0c      	ldr	r2, [pc, #48]	; (d4ff8 <_GLOBAL__sub_I_igh_sd+0xb8>)
   d4fc6:	4911      	ldr	r1, [pc, #68]	; (d500c <_GLOBAL__sub_I_igh_sd+0xcc>)
   d4fc8:	6005      	str	r5, [r0, #0]
   d4fca:	f003 fe13 	bl	d8bf4 <__aeabi_atexit>
   d4fce:	4810      	ldr	r0, [pc, #64]	; (d5010 <_GLOBAL__sub_I_igh_sd+0xd0>)
SdFile next_file;
   d4fd0:	4a09      	ldr	r2, [pc, #36]	; (d4ff8 <_GLOBAL__sub_I_igh_sd+0xb8>)
   d4fd2:	7204      	strb	r4, [r0, #8]
   d4fd4:	7244      	strb	r4, [r0, #9]
   d4fd6:	6044      	str	r4, [r0, #4]
   d4fd8:	6005      	str	r5, [r0, #0]
   d4fda:	490c      	ldr	r1, [pc, #48]	; (d500c <_GLOBAL__sub_I_igh_sd+0xcc>)
    {
        return 0;
    }

    return 1;
   d4fdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#include "igh_sd_log.h"

SdFat igh_sd;
File igh_file;
SdFile sd_root;
SdFile next_file;
   d4fe0:	f003 be08 	b.w	d8bf4 <__aeabi_atexit>
   d4fe4:	2003dc1c 	.word	0x2003dc1c
   d4fe8:	2003dbe4 	.word	0x2003dbe4
   d4fec:	000d999c 	.word	0x000d999c
   d4ff0:	2003dbe8 	.word	0x2003dbe8
   d4ff4:	2003e0cc 	.word	0x2003e0cc
   d4ff8:	2003db50 	.word	0x2003db50
   d4ffc:	000d99a8 	.word	0x000d99a8
   d5000:	000d4e5b 	.word	0x000d4e5b
   d5004:	2003e0a0 	.word	0x2003e0a0
   d5008:	000d99d0 	.word	0x000d99d0
   d500c:	000d4e59 	.word	0x000d4e59
   d5010:	2003dbf0 	.word	0x2003dbf0

000d5014 <_ZN14CellularSignalD1Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d5014:	4770      	bx	lr

000d5016 <_ZN14CellularSignalD0Ev>:
   d5016:	b510      	push	{r4, lr}
   d5018:	2128      	movs	r1, #40	; 0x28
   d501a:	4604      	mov	r4, r0
   d501c:	f003 fdf8 	bl	d8c10 <_ZdlPvj>
   d5020:	4620      	mov	r0, r4
   d5022:	bd10      	pop	{r4, pc}

000d5024 <_Z19igh_boron_sync_timev>:
float battery_voltage, battery_SOC;
unsigned long unix_time;

/* Functions */
void igh_boron_sync_time(void)
{
   d5024:	b510      	push	{r4, lr}
   d5026:	f001 fecd 	bl	d6dc4 <HAL_Timer_Get_Milli_Seconds>
    if((millis() - lastSync > ONE_DAY_MILLIS))
   d502a:	4b08      	ldr	r3, [pc, #32]	; (d504c <_Z19igh_boron_sync_timev+0x28>)
   d502c:	681a      	ldr	r2, [r3, #0]
   d502e:	1a80      	subs	r0, r0, r2
   d5030:	4a07      	ldr	r2, [pc, #28]	; (d5050 <_Z19igh_boron_sync_timev+0x2c>)
   d5032:	4290      	cmp	r0, r2
   d5034:	461c      	mov	r4, r3
   d5036:	d908      	bls.n	d504a <_Z19igh_boron_sync_timev+0x26>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5038:	f002 f910 	bl	d725c <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d503c:	b110      	cbz	r0, d5044 <_Z19igh_boron_sync_timev+0x20>
            return false;
        }
        return spark_sync_time(NULL);
   d503e:	2000      	movs	r0, #0
   d5040:	f002 f914 	bl	d726c <spark_sync_time>
   d5044:	f001 febe 	bl	d6dc4 <HAL_Timer_Get_Milli_Seconds>
    {
        Particle.syncTime();
        lastSync = millis(); 
   d5048:	6020      	str	r0, [r4, #0]
   d504a:	bd10      	pop	{r4, pc}
   d504c:	2003e128 	.word	0x2003e128
   d5050:	05265c00 	.word	0x05265c00

000d5054 <_Z19igh_boron_unix_timev>:
    }
}

unsigned long igh_boron_unix_time(void)
{
    return Time.now();
   d5054:	f002 bc3c 	b.w	d78d0 <_ZN9TimeClass3nowEv>

000d5058 <_Z13igh_boron_SoCv>:
}

float igh_boron_SoC(void)
{
    return fuel.getSoC();
   d5058:	4801      	ldr	r0, [pc, #4]	; (d5060 <_Z13igh_boron_SoCv+0x8>)
   d505a:	f002 bd49 	b.w	d7af0 <_ZN9FuelGauge6getSoCEv>
   d505e:	bf00      	nop
   d5060:	2003e12c 	.word	0x2003e12c

000d5064 <_Z15igh_boron_setupv>:
{
    return Particle.connected();;
}

void igh_boron_setup(void)
{
   d5064:	b508      	push	{r3, lr}
   d5066:	f001 fead 	bl	d6dc4 <HAL_Timer_Get_Milli_Seconds>
    lastSync = millis();
   d506a:	4b01      	ldr	r3, [pc, #4]	; (d5070 <_Z15igh_boron_setupv+0xc>)
   d506c:	6018      	str	r0, [r3, #0]
   d506e:	bd08      	pop	{r3, pc}
   d5070:	2003e128 	.word	0x2003e128

000d5074 <_Z17igh_boron_servicev>:
}

void igh_boron_service(void)
{
    igh_boron_sync_time();
   d5074:	f7ff bfd6 	b.w	d5024 <_Z19igh_boron_sync_timev>

000d5078 <_GLOBAL__sub_I_lastSync>:
}

String igh_boron_test_id(void)
{
    return System.deviceID();
}
   d5078:	b570      	push	{r4, r5, r6, lr}
   d507a:	f001 fddb 	bl	d6c34 <HAL_Pin_Map>
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d507e:	4c10      	ldr	r4, [pc, #64]	; (d50c0 <_GLOBAL__sub_I_lastSync+0x48>)
   d5080:	4b10      	ldr	r3, [pc, #64]	; (d50c4 <_GLOBAL__sub_I_lastSync+0x4c>)
   d5082:	6023      	str	r3, [r4, #0]
   d5084:	2500      	movs	r5, #0
   d5086:	3328      	adds	r3, #40	; 0x28
   d5088:	4629      	mov	r1, r5
#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)

unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
   d508a:	4e0f      	ldr	r6, [pc, #60]	; (d50c8 <_GLOBAL__sub_I_lastSync+0x50>)
   d508c:	6063      	str	r3, [r4, #4]
   d508e:	2218      	movs	r2, #24
   d5090:	f104 0010 	add.w	r0, r4, #16
   d5094:	60a5      	str	r5, [r4, #8]
   d5096:	60e5      	str	r5, [r4, #12]
   d5098:	f004 fb49 	bl	d972e <memset>
   d509c:	4620      	mov	r0, r4
float signal_quality, signal_strength;
FuelGauge fuel;
   d509e:	4c0b      	ldr	r4, [pc, #44]	; (d50cc <_GLOBAL__sub_I_lastSync+0x54>)
#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)

unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
   d50a0:	490b      	ldr	r1, [pc, #44]	; (d50d0 <_GLOBAL__sub_I_lastSync+0x58>)
   d50a2:	4632      	mov	r2, r6
   d50a4:	f003 fda6 	bl	d8bf4 <__aeabi_atexit>
float signal_quality, signal_strength;
FuelGauge fuel;
   d50a8:	4629      	mov	r1, r5
   d50aa:	4620      	mov	r0, r4
   d50ac:	f002 fce0 	bl	d7a70 <_ZN9FuelGaugeC1Eb>
   d50b0:	4632      	mov	r2, r6
   d50b2:	4620      	mov	r0, r4
   d50b4:	4907      	ldr	r1, [pc, #28]	; (d50d4 <_GLOBAL__sub_I_lastSync+0x5c>)
}

String igh_boron_test_id(void)
{
    return System.deviceID();
}
   d50b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
float signal_quality, signal_strength;
FuelGauge fuel;
   d50ba:	f003 bd9b 	b.w	d8bf4 <__aeabi_atexit>
   d50be:	bf00      	nop
   d50c0:	2003e100 	.word	0x2003e100
   d50c4:	000d9bf8 	.word	0x000d9bf8
   d50c8:	2003db50 	.word	0x2003db50
   d50cc:	2003e12c 	.word	0x2003e12c
   d50d0:	000d5015 	.word	0x000d5015
   d50d4:	000d7a8f 	.word	0x000d7a8f

000d50d8 <_Z21igh_rfm69_set_bitratehh>:
    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
} 

void igh_rfm69_set_bitrate(uint8_t msb, uint8_t lsb)
{
   d50d8:	b538      	push	{r3, r4, r5, lr}
    igh_radio.writeReg(REG_BITRATEMSB, msb); 
   d50da:	4c07      	ldr	r4, [pc, #28]	; (d50f8 <_Z21igh_rfm69_set_bitratehh+0x20>)
    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
} 

void igh_rfm69_set_bitrate(uint8_t msb, uint8_t lsb)
{
   d50dc:	460d      	mov	r5, r1
    igh_radio.writeReg(REG_BITRATEMSB, msb); 
   d50de:	4602      	mov	r2, r0
   d50e0:	2103      	movs	r1, #3
   d50e2:	4620      	mov	r0, r4
   d50e4:	f001 faac 	bl	d6640 <_ZN5RFM698writeRegEhh>
    igh_radio.writeReg(REG_BITRATELSB, lsb);
   d50e8:	462a      	mov	r2, r5
   d50ea:	4620      	mov	r0, r4
   d50ec:	2104      	movs	r1, #4
}
   d50ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
} 

void igh_rfm69_set_bitrate(uint8_t msb, uint8_t lsb)
{
    igh_radio.writeReg(REG_BITRATEMSB, msb); 
    igh_radio.writeReg(REG_BITRATELSB, lsb);
   d50f2:	f001 baa5 	b.w	d6640 <_ZN5RFM698writeRegEhh>
   d50f6:	bf00      	nop
   d50f8:	2003e134 	.word	0x2003e134

000d50fc <_Z25igh_rfm69_set_power_levelh>:
}

void igh_rfm69_set_power_level(uint8_t pwrlvl)
{
    igh_radio.setPowerLevel(pwrlvl);
   d50fc:	4601      	mov	r1, r0
   d50fe:	4801      	ldr	r0, [pc, #4]	; (d5104 <_Z25igh_rfm69_set_power_levelh+0x8>)
   d5100:	f001 bab0 	b.w	d6664 <_ZN5RFM6913setPowerLevelEh>
   d5104:	2003e134 	.word	0x2003e134

000d5108 <_Z15igh_rfm69_resetv>:
}

void igh_rfm69_reset(void)
{
   d5108:	b508      	push	{r3, lr}
    digitalWrite(RFM69_RST, HIGH);
   d510a:	2101      	movs	r1, #1
   d510c:	2006      	movs	r0, #6
   d510e:	f003 fcb0 	bl	d8a72 <digitalWrite>
    delay(100);
   d5112:	2064      	movs	r0, #100	; 0x64
   d5114:	f002 fbee 	bl	d78f4 <delay>
    digitalWrite(RFM69_RST, LOW);
   d5118:	2006      	movs	r0, #6
   d511a:	2100      	movs	r1, #0
   d511c:	f003 fca9 	bl	d8a72 <digitalWrite>
    delay(100);
   d5120:	2064      	movs	r0, #100	; 0x64
}
   d5122:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void igh_rfm69_reset(void)
{
    digitalWrite(RFM69_RST, HIGH);
    delay(100);
    digitalWrite(RFM69_RST, LOW);
    delay(100);
   d5126:	f002 bbe5 	b.w	d78f4 <delay>
	...

000d512c <_Z15igh_rfm69_setupv>:
uint8_t rfm69_powerlevel  = 10; // default power level, about 100M line of site

RFM69 igh_radio = RFM69(RFM69_CS, RFM69_IRQ, IS_RFM69HCW, RFM69_IRQN);

void igh_rfm69_setup(void)
{
   d512c:	b538      	push	{r3, r4, r5, lr}
    // first reset the module
    pinMode(RFM69_RST, OUTPUT);

    igh_rfm69_reset();
    
    if( false == igh_radio.initialize( FREQUENCY, RFM69_NODE_ID, RFM69_NETWORK_ID) )
   d512e:	4c21      	ldr	r4, [pc, #132]	; (d51b4 <_Z15igh_rfm69_setupv+0x88>)
RFM69 igh_radio = RFM69(RFM69_CS, RFM69_IRQ, IS_RFM69HCW, RFM69_IRQN);

void igh_rfm69_setup(void)
{
    // first reset the module
    pinMode(RFM69_RST, OUTPUT);
   d5130:	2101      	movs	r1, #1
   d5132:	2006      	movs	r0, #6
   d5134:	f003 fc8c 	bl	d8a50 <pinMode>

    igh_rfm69_reset();
   d5138:	f7ff ffe6 	bl	d5108 <_Z15igh_rfm69_resetv>
    
    if( false == igh_radio.initialize( FREQUENCY, RFM69_NODE_ID, RFM69_NETWORK_ID) )
   d513c:	7da3      	ldrb	r3, [r4, #22]
   d513e:	7de2      	ldrb	r2, [r4, #23]
   d5140:	481d      	ldr	r0, [pc, #116]	; (d51b8 <_Z15igh_rfm69_setupv+0x8c>)
   d5142:	215b      	movs	r1, #91	; 0x5b
   d5144:	f001 fc52 	bl	d69ec <_ZN5RFM6910initializeEhhh>
   d5148:	b920      	cbnz	r0, d5154 <_Z15igh_rfm69_setupv+0x28>
    Serial.println("RFM69 INIT ERROR");
   d514a:	f002 fe73 	bl	d7e34 <_Z16_fetch_usbserialv>
   d514e:	491b      	ldr	r1, [pc, #108]	; (d51bc <_Z15igh_rfm69_setupv+0x90>)
   d5150:	f002 fb23 	bl	d779a <_ZN5Print7printlnEPKc>

    Serial.print( "NEW NODE ID: " ); Serial.println( RFM69_NODE_ID);
   d5154:	f002 fe6e 	bl	d7e34 <_Z16_fetch_usbserialv>
   d5158:	4919      	ldr	r1, [pc, #100]	; (d51c0 <_Z15igh_rfm69_setupv+0x94>)
   d515a:	f002 fb0b 	bl	d7774 <_ZN5Print5printEPKc>
   d515e:	f002 fe69 	bl	d7e34 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5162:	220a      	movs	r2, #10
   d5164:	7de1      	ldrb	r1, [r4, #23]
   d5166:	4605      	mov	r5, r0
   d5168:	f002 fb21 	bl	d77ae <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d516c:	4628      	mov	r0, r5
   d516e:	f002 fb08 	bl	d7782 <_ZN5Print7printlnEv>
    Serial.print( "NEW NETWORK ID: " ); Serial.println( RFM69_NETWORK_ID);
   d5172:	f002 fe5f 	bl	d7e34 <_Z16_fetch_usbserialv>
   d5176:	4913      	ldr	r1, [pc, #76]	; (d51c4 <_Z15igh_rfm69_setupv+0x98>)
   d5178:	f002 fafc 	bl	d7774 <_ZN5Print5printEPKc>
   d517c:	f002 fe5a 	bl	d7e34 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5180:	220a      	movs	r2, #10
   d5182:	7da1      	ldrb	r1, [r4, #22]
   d5184:	4605      	mov	r5, r0
   d5186:	f002 fb12 	bl	d77ae <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d518a:	4628      	mov	r0, r5
   d518c:	f002 faf9 	bl	d7782 <_ZN5Print7printlnEv>

    igh_radio.setHighPower(); // This should only be called for RFM69HCW & HW
   d5190:	2101      	movs	r1, #1
   d5192:	4809      	ldr	r0, [pc, #36]	; (d51b8 <_Z15igh_rfm69_setupv+0x8c>)
   d5194:	f001 fb50 	bl	d6838 <_ZN5RFM6912setHighPowerEb>

    igh_rfm69_set_bitrate(RF_BITRATEMSB_9600, RF_BITRATELSB_9600); // set to 9.6Kbps
   d5198:	2105      	movs	r1, #5
   d519a:	200d      	movs	r0, #13
   d519c:	f7ff ff9c 	bl	d50d8 <_Z21igh_rfm69_set_bitratehh>

    igh_rfm69_set_power_level(rfm69_powerlevel);
   d51a0:	4b09      	ldr	r3, [pc, #36]	; (d51c8 <_Z15igh_rfm69_setupv+0x9c>)
   d51a2:	7818      	ldrb	r0, [r3, #0]
   d51a4:	f7ff ffaa 	bl	d50fc <_Z25igh_rfm69_set_power_levelh>

    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
   d51a8:	4908      	ldr	r1, [pc, #32]	; (d51cc <_Z15igh_rfm69_setupv+0xa0>)
   d51aa:	4803      	ldr	r0, [pc, #12]	; (d51b8 <_Z15igh_rfm69_setupv+0x8c>)
} 
   d51ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    igh_rfm69_set_bitrate(RF_BITRATEMSB_9600, RF_BITRATELSB_9600); // set to 9.6Kbps

    igh_rfm69_set_power_level(rfm69_powerlevel);

    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
   d51b0:	f001 bbf0 	b.w	d6994 <_ZN5RFM697encryptEPKc>
   d51b4:	2003e640 	.word	0x2003e640
   d51b8:	2003e134 	.word	0x2003e134
   d51bc:	000d9a3c 	.word	0x000d9a3c
   d51c0:	000d9a4d 	.word	0x000d9a4d
   d51c4:	000d9a5b 	.word	0x000d9a5b
   d51c8:	2003dae6 	.word	0x2003dae6
   d51cc:	000d9a6c 	.word	0x000d9a6c

000d51d0 <_Z27igh_rfm69_receive_raw_bytesPhh>:
    }
    
}

uint8_t igh_rfm69_receive_raw_bytes( uint8_t *buffer, uint8_t len )
{
   d51d0:	b570      	push	{r4, r5, r6, lr}
   d51d2:	4605      	mov	r5, r0
    uint8_t rx_len = 0;
    if ( igh_radio.receiveDone() )
   d51d4:	4809      	ldr	r0, [pc, #36]	; (d51fc <_Z27igh_rfm69_receive_raw_bytesPhh+0x2c>)
    }
    
}

uint8_t igh_rfm69_receive_raw_bytes( uint8_t *buffer, uint8_t len )
{
   d51d6:	460e      	mov	r6, r1
    uint8_t rx_len = 0;
    if ( igh_radio.receiveDone() )
   d51d8:	f001 fb0e 	bl	d67f8 <_ZN5RFM6911receiveDoneEv>
   d51dc:	b160      	cbz	r0, d51f8 <_Z27igh_rfm69_receive_raw_bytesPhh+0x28>
    {
        if( igh_radio.DATALEN <= len )
   d51de:	4c08      	ldr	r4, [pc, #32]	; (d5200 <_Z27igh_rfm69_receive_raw_bytesPhh+0x30>)
   d51e0:	7823      	ldrb	r3, [r4, #0]
   d51e2:	42b3      	cmp	r3, r6
   d51e4:	d807      	bhi.n	d51f6 <_Z27igh_rfm69_receive_raw_bytesPhh+0x26>
        {
            memcpy( buffer, (uint8_t *)igh_radio.DATA, igh_radio.DATALEN);
   d51e6:	7822      	ldrb	r2, [r4, #0]
   d51e8:	4906      	ldr	r1, [pc, #24]	; (d5204 <_Z27igh_rfm69_receive_raw_bytesPhh+0x34>)
   d51ea:	4628      	mov	r0, r5
   d51ec:	f004 fa94 	bl	d9718 <memcpy>
            rx_len = igh_radio.DATALEN;
   d51f0:	7820      	ldrb	r0, [r4, #0]
   d51f2:	b2c0      	uxtb	r0, r0
   d51f4:	bd70      	pop	{r4, r5, r6, pc}
    
}

uint8_t igh_rfm69_receive_raw_bytes( uint8_t *buffer, uint8_t len )
{
    uint8_t rx_len = 0;
   d51f6:	2000      	movs	r0, #0
            memcpy( buffer, (uint8_t *)igh_radio.DATA, igh_radio.DATALEN);
            rx_len = igh_radio.DATALEN;
        }
    }
    return rx_len;
}
   d51f8:	bd70      	pop	{r4, r5, r6, pc}
   d51fa:	bf00      	nop
   d51fc:	2003e134 	.word	0x2003e134
   d5200:	2003e1a7 	.word	0x2003e1a7
   d5204:	2003e16a 	.word	0x2003e16a

000d5208 <_Z17igh_rfm69_servicev>:

void igh_rfm69_service( void )
{
   d5208:	b510      	push	{r4, lr}
    // if new settings have been sent, re initialize the module
    if( true == initialize_rfm69 )
   d520a:	4c04      	ldr	r4, [pc, #16]	; (d521c <_Z17igh_rfm69_servicev+0x14>)
   d520c:	7823      	ldrb	r3, [r4, #0]
   d520e:	2b01      	cmp	r3, #1
   d5210:	d103      	bne.n	d521a <_Z17igh_rfm69_servicev+0x12>
    {
        igh_rfm69_setup();
   d5212:	f7ff ff8b 	bl	d512c <_Z15igh_rfm69_setupv>
        initialize_rfm69 = false;
   d5216:	2300      	movs	r3, #0
   d5218:	7023      	strb	r3, [r4, #0]
   d521a:	bd10      	pop	{r4, pc}
   d521c:	2003db54 	.word	0x2003db54

000d5220 <_GLOBAL__sub_I_NETWORKID>:
    }
   d5220:	b508      	push	{r3, lr}
   d5222:	f001 fd07 	bl	d6c34 <HAL_Pin_Map>
    static volatile byte ACK_REQUESTED;
    static volatile byte ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
    static volatile int RSSI; //most accurate RSSI during reception (closest to the reception)
    static volatile byte _mode; //should be protected?

    RFM69(byte slaveSelectPin=RF69_SPI_CS, byte interruptPin=RF69_IRQ_PIN, bool isRFM69HW=false, byte interruptNum=RF69_IRQ_NUM) {
   d5226:	4b08      	ldr	r3, [pc, #32]	; (d5248 <_GLOBAL__sub_I_NETWORKID+0x28>)
   d5228:	4a08      	ldr	r2, [pc, #32]	; (d524c <_GLOBAL__sub_I_NETWORKID+0x2c>)
   d522a:	601a      	str	r2, [r3, #0]
      _slaveSelectPin = slaveSelectPin;
   d522c:	2211      	movs	r2, #17
      _interruptPin = interruptPin;
      _interruptNum = interruptNum;
      _mode = RF69_MODE_STANDBY;
   d522e:	4908      	ldr	r1, [pc, #32]	; (d5250 <_GLOBAL__sub_I_NETWORKID+0x30>)
    static volatile byte ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
    static volatile int RSSI; //most accurate RSSI during reception (closest to the reception)
    static volatile byte _mode; //should be protected?

    RFM69(byte slaveSelectPin=RF69_SPI_CS, byte interruptPin=RF69_IRQ_PIN, bool isRFM69HW=false, byte interruptNum=RF69_IRQ_NUM) {
      _slaveSelectPin = slaveSelectPin;
   d5230:	711a      	strb	r2, [r3, #4]
      _interruptPin = interruptPin;
   d5232:	2208      	movs	r2, #8
   d5234:	715a      	strb	r2, [r3, #5]
      _interruptNum = interruptNum;
   d5236:	719a      	strb	r2, [r3, #6]
      _mode = RF69_MODE_STANDBY;
   d5238:	2201      	movs	r2, #1
   d523a:	700a      	strb	r2, [r1, #0]
      _promiscuousMode = false;
   d523c:	2100      	movs	r1, #0
   d523e:	7219      	strb	r1, [r3, #8]
      _powerLevel = 31;
   d5240:	211f      	movs	r1, #31
   d5242:	7259      	strb	r1, [r3, #9]
      _isRFM69HW = isRFM69HW;
   d5244:	729a      	strb	r2, [r3, #10]
   d5246:	bd08      	pop	{r3, pc}
   d5248:	2003e134 	.word	0x2003e134
   d524c:	000d9aa8 	.word	0x000d9aa8
   d5250:	2003e1a8 	.word	0x2003e1a8

000d5254 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d5254:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d5256:	6984      	ldr	r4, [r0, #24]
   d5258:	4b0a      	ldr	r3, [pc, #40]	; (d5284 <_ZN9TCPClientD1Ev+0x30>)
   d525a:	6003      	str	r3, [r0, #0]
   d525c:	4605      	mov	r5, r0
   d525e:	b17c      	cbz	r4, d5280 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5260:	6863      	ldr	r3, [r4, #4]
   d5262:	3b01      	subs	r3, #1
   d5264:	6063      	str	r3, [r4, #4]
   d5266:	b95b      	cbnz	r3, d5280 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d5268:	6823      	ldr	r3, [r4, #0]
   d526a:	4620      	mov	r0, r4
   d526c:	689b      	ldr	r3, [r3, #8]
   d526e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5270:	68a3      	ldr	r3, [r4, #8]
   d5272:	3b01      	subs	r3, #1
   d5274:	60a3      	str	r3, [r4, #8]
   d5276:	b91b      	cbnz	r3, d5280 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d5278:	6823      	ldr	r3, [r4, #0]
   d527a:	4620      	mov	r0, r4
   d527c:	68db      	ldr	r3, [r3, #12]
   d527e:	4798      	blx	r3
   d5280:	4628      	mov	r0, r5
   d5282:	bd38      	pop	{r3, r4, r5, pc}
   d5284:	000d9d4c 	.word	0x000d9d4c

000d5288 <_ZN9TCPClientD0Ev>:
   d5288:	b510      	push	{r4, lr}
   d528a:	4604      	mov	r4, r0
   d528c:	f7ff ffe2 	bl	d5254 <_ZN9TCPClientD1Ev>
   d5290:	4620      	mov	r0, r4
   d5292:	211c      	movs	r1, #28
   d5294:	f003 fcbc 	bl	d8c10 <_ZdlPvj>
   d5298:	4620      	mov	r0, r4
   d529a:	bd10      	pop	{r4, pc}

000d529c <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d529c:	b538      	push	{r3, r4, r5, lr}
   d529e:	461d      	mov	r5, r3
    this->callback = callback;
   d52a0:	9b05      	ldr	r3, [sp, #20]
   d52a2:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
   d52a4:	2300      	movs	r3, #0

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d52a6:	4604      	mov	r4, r0
    this->callback = callback;
    this->qoscallback = NULL;
   d52a8:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
   d52aa:	b102      	cbz	r2, d52ae <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
   d52ac:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
   d52ae:	b119      	cbz	r1, d52b8 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
   d52b0:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d52b4:	f002 fa1a 	bl	d76ec <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   d52b8:	9b04      	ldr	r3, [sp, #16]
   d52ba:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d52bc:	9b06      	ldr	r3, [sp, #24]
    if (buffer != NULL)
   d52be:	69e0      	ldr	r0, [r4, #28]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
   d52c0:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d52c4:	2bff      	cmp	r3, #255	; 0xff
   d52c6:	bfb8      	it	lt
   d52c8:	23ff      	movlt	r3, #255	; 0xff
   d52ca:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   d52ce:	b108      	cbz	r0, d52d4 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
   d52d0:	f7fe fee7 	bl	d40a2 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   d52d4:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   d52d8:	f7fe fedf 	bl	d409a <_Znaj>
   d52dc:	61e0      	str	r0, [r4, #28]
   d52de:	bd38      	pop	{r3, r4, r5, pc}

000d52e0 <_ZN4MQTTC1EPctPFvS0_PhjE>:
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
   d52e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d52e4:	4604      	mov	r4, r0
   d52e6:	2500      	movs	r5, #0
   d52e8:	4617      	mov	r7, r2
   d52ea:	4698      	mov	r8, r3
   d52ec:	460e      	mov	r6, r1
   d52ee:	f003 fab7 	bl	d8860 <_ZN9TCPClientC1Ev>
   d52f2:	61e5      	str	r5, [r4, #28]
   d52f4:	490a      	ldr	r1, [pc, #40]	; (d5320 <_ZN4MQTTC1EPctPFvS0_PhjE+0x40>)
   d52f6:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d52fa:	f002 f9e4 	bl	d76c6 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
   d52fe:	23ff      	movs	r3, #255	; 0xff
   d5300:	9302      	str	r3, [sp, #8]
   d5302:	230f      	movs	r3, #15
   d5304:	9300      	str	r3, [sp, #0]
   d5306:	4620      	mov	r0, r4
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
   d5308:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
   d530a:	f8cd 8004 	str.w	r8, [sp, #4]
   d530e:	463b      	mov	r3, r7
   d5310:	462a      	mov	r2, r5
   d5312:	4631      	mov	r1, r6
   d5314:	f7ff ffc2 	bl	d529c <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
   d5318:	4620      	mov	r0, r4
   d531a:	b004      	add	sp, #16
   d531c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5320:	000d9b8c 	.word	0x000d9b8c

000d5324 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   d5324:	b510      	push	{r4, lr}
   d5326:	4604      	mov	r4, r0
    while(!_client.available()) {}
   d5328:	4620      	mov	r0, r4
   d532a:	f003 f9fd 	bl	d8728 <_ZN9TCPClient9availableEv>
   d532e:	2800      	cmp	r0, #0
   d5330:	d0fa      	beq.n	d5328 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   d5332:	4620      	mov	r0, r4
   d5334:	f003 f8a1 	bl	d847a <_ZN9TCPClient4readEv>
}
   d5338:	b2c0      	uxtb	r0, r0
   d533a:	bd10      	pop	{r4, pc}

000d533c <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d533c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5340:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
   d5342:	69c4      	ldr	r4, [r0, #28]
uint8_t MQTT::readByte() {
    while(!_client.available()) {}
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d5344:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   d5346:	f7ff ffed 	bl	d5324 <_ZN4MQTT8readByteEv>
   d534a:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d534c:	69eb      	ldr	r3, [r5, #28]
   d534e:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   d5352:	f04f 0901 	mov.w	r9, #1
   d5356:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   d535a:	2700      	movs	r7, #0
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
   d535c:	464e      	mov	r6, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   d535e:	4628      	mov	r0, r5
   d5360:	f7ff ffe0 	bl	d5324 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   d5364:	69eb      	ldr	r3, [r5, #28]
   d5366:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   d5368:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   d536c:	fb13 f309 	smulbb	r3, r3, r9
   d5370:	441f      	add	r7, r3
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d5372:	1c74      	adds	r4, r6, #1
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
   d5374:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d5376:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   d5378:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   d537a:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   d537e:	d501      	bpl.n	d5384 <_ZN4MQTT10readPacketEPh+0x48>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d5380:	4626      	mov	r6, r4
   d5382:	e7ec      	b.n	d535e <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d5384:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   d5386:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d538a:	f888 3000 	strb.w	r3, [r8]

    if (isPublish) {
   d538e:	d113      	bne.n	d53b8 <_ZN4MQTT10readPacketEPh+0x7c>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   d5390:	4628      	mov	r0, r5
   d5392:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d5396:	f7ff ffc5 	bl	d5324 <_ZN4MQTT8readByteEv>
   d539a:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
   d539e:	4628      	mov	r0, r5
   d53a0:	1cf4      	adds	r4, r6, #3
   d53a2:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d53a6:	3602      	adds	r6, #2
   d53a8:	f7ff ffbc 	bl	d5324 <_ZN4MQTT8readByteEv>
   d53ac:	b2b6      	uxth	r6, r6
   d53ae:	b2a4      	uxth	r4, r4
   d53b0:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   d53b4:	2302      	movs	r3, #2
   d53b6:	e000      	b.n	d53ba <_ZN4MQTT10readPacketEPh+0x7e>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
   d53b8:	2300      	movs	r3, #0
   d53ba:	1b1b      	subs	r3, r3, r4
   d53bc:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d53be:	19a3      	adds	r3, r4, r6
   d53c0:	b29b      	uxth	r3, r3
   d53c2:	429f      	cmp	r7, r3
   d53c4:	d90b      	bls.n	d53de <_ZN4MQTT10readPacketEPh+0xa2>
        digit = readByte();
   d53c6:	4628      	mov	r0, r5
   d53c8:	f7ff ffac 	bl	d5324 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   d53cc:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   d53d0:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   d53d2:	bf84      	itt	hi
   d53d4:	69eb      	ldrhi	r3, [r5, #28]
   d53d6:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   d53d8:	3401      	adds	r4, #1
   d53da:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d53dc:	e7ef      	b.n	d53be <_ZN4MQTT10readPacketEPh+0x82>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
   d53de:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   d53e2:	42a0      	cmp	r0, r4
   d53e4:	bf2c      	ite	cs
   d53e6:	4620      	movcs	r0, r4
   d53e8:	2000      	movcc	r0, #0
   d53ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d53ee <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d53ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d53f0:	4607      	mov	r7, r0
   d53f2:	468e      	mov	lr, r1
   d53f4:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   d53f6:	461d      	mov	r5, r3
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
   d53f8:	2400      	movs	r4, #0
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d53fa:	a902      	add	r1, sp, #8
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
   d53fc:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d5400:	4421      	add	r1, r4
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
   d5402:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
   d5404:	bf18      	it	ne
   d5406:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
   d540a:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d540c:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
   d5410:	b2e4      	uxtb	r4, r4
    } while(len > 0);
   d5412:	2d00      	cmp	r5, #0
   d5414:	d1f1      	bne.n	d53fa <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
   d5416:	f1c4 0304 	rsb	r3, r4, #4
   d541a:	18d1      	adds	r1, r2, r3
   d541c:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
   d5420:	42a5      	cmp	r5, r4
   d5422:	da06      	bge.n	d5432 <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
   d5424:	1b2b      	subs	r3, r5, r4
   d5426:	a801      	add	r0, sp, #4
   d5428:	4413      	add	r3, r2
   d542a:	5c28      	ldrb	r0, [r5, r0]
   d542c:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
   d542e:	3501      	adds	r5, #1
   d5430:	e7f6      	b.n	d5420 <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   d5432:	1c72      	adds	r2, r6, #1
   d5434:	4422      	add	r2, r4
   d5436:	4638      	mov	r0, r7
   d5438:	f002 ff75 	bl	d8326 <_ZN9TCPClient5writeEPKhj>
   d543c:	4605      	mov	r5, r0
   d543e:	f001 fcc1 	bl	d6dc4 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   d5442:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
   d5444:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   d5446:	4434      	add	r4, r6
   d5448:	b2a8      	uxth	r0, r5
}
   d544a:	1a23      	subs	r3, r4, r0
   d544c:	4258      	negs	r0, r3
   d544e:	4158      	adcs	r0, r3
   d5450:	b003      	add	sp, #12
   d5452:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5454 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d5454:	b510      	push	{r4, lr}
    buffer[0] = MQTTDISCONNECT;
   d5456:	69c3      	ldr	r3, [r0, #28]
   d5458:	22e0      	movs	r2, #224	; 0xe0
   d545a:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   d545c:	69c3      	ldr	r3, [r0, #28]
   d545e:	2200      	movs	r2, #0
   d5460:	705a      	strb	r2, [r3, #1]
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d5462:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
    buffer[1] = 0;
    _client.write(buffer,2);
   d5464:	2202      	movs	r2, #2
   d5466:	69c1      	ldr	r1, [r0, #28]
   d5468:	f002 ff5d 	bl	d8326 <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   d546c:	4620      	mov	r0, r4
   d546e:	f003 f943 	bl	d86f8 <_ZN9TCPClient4stopEv>
   d5472:	f001 fca7 	bl	d6dc4 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   d5476:	6260      	str	r0, [r4, #36]	; 0x24
   d5478:	62a0      	str	r0, [r4, #40]	; 0x28
   d547a:	bd10      	pop	{r4, pc}

000d547c <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d547c:	3302      	adds	r3, #2
    _client.write(buffer,2);
    _client.stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   d547e:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d5480:	b29b      	uxth	r3, r3
   d5482:	460d      	mov	r5, r1
   d5484:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
   d5486:	f815 6b01 	ldrb.w	r6, [r5], #1
   d548a:	b2a4      	uxth	r4, r4
   d548c:	b13e      	cbz	r6, d549e <_ZN4MQTT11writeStringEPKcPht+0x22>
   d548e:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
   d5492:	429f      	cmp	r7, r3
   d5494:	d903      	bls.n	d549e <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
   d5496:	1c5c      	adds	r4, r3, #1
   d5498:	54d6      	strb	r6, [r2, r3]
   d549a:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
   d549c:	e7f2      	b.n	d5484 <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   d549e:	1b19      	subs	r1, r3, r4
   d54a0:	440a      	add	r2, r1
   d54a2:	1221      	asrs	r1, r4, #8
   d54a4:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   d54a8:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
   d54ac:	4618      	mov	r0, r3
   d54ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d54b0 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   d54b0:	b538      	push	{r3, r4, r5, lr}
   d54b2:	4605      	mov	r5, r0
    bool rc = (int)_client.connected();
   d54b4:	f002 ff4d 	bl	d8352 <_ZN9TCPClient9connectedEv>
   d54b8:	2800      	cmp	r0, #0
   d54ba:	bf14      	ite	ne
   d54bc:	2401      	movne	r4, #1
   d54be:	2400      	moveq	r4, #0
    if (!rc) _client.stop();
   d54c0:	d102      	bne.n	d54c8 <_ZN4MQTT11isConnectedEv+0x18>
   d54c2:	4628      	mov	r0, r5
   d54c4:	f003 f918 	bl	d86f8 <_ZN9TCPClient4stopEv>
    return rc;
}
   d54c8:	4620      	mov	r0, r4
   d54ca:	bd38      	pop	{r3, r4, r5, pc}

000d54cc <_ZN4MQTT9setBrokerEPct>:
    if (buffer != NULL)
      delete[] buffer;
    buffer = new uint8_t[this->maxpacketsize];
}

void MQTT::setBroker(char* domain, uint16_t port) {
   d54cc:	b570      	push	{r4, r5, r6, lr}
   d54ce:	4604      	mov	r4, r0
   d54d0:	460e      	mov	r6, r1
   d54d2:	4615      	mov	r5, r2
    if(isConnected()) {
   d54d4:	f7ff ffec 	bl	d54b0 <_ZN4MQTT11isConnectedEv>
   d54d8:	b110      	cbz	r0, d54e0 <_ZN4MQTT9setBrokerEPct+0x14>
        disconnect();
   d54da:	4620      	mov	r0, r4
   d54dc:	f7ff ffba 	bl	d5454 <_ZN4MQTT10disconnectEv>
    }
    this->domain = domain;
   d54e0:	4631      	mov	r1, r6
   d54e2:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d54e6:	f002 f901 	bl	d76ec <_ZN6StringaSEPKc>
    this->ip = NULL;
   d54ea:	2300      	movs	r3, #0
   d54ec:	64a3      	str	r3, [r4, #72]	; 0x48
    this->port = port;
   d54ee:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
   d54f2:	bd70      	pop	{r4, r5, r6, pc}

000d54f4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char *user, const char *pass) {
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   d54f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d54f8:	b087      	sub	sp, #28
   d54fa:	4604      	mov	r4, r0
   d54fc:	4689      	mov	r9, r1
   d54fe:	4617      	mov	r7, r2
   d5500:	461e      	mov	r6, r3
   d5502:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if (!isConnected()) {
   d5506:	f7ff ffd3 	bl	d54b0 <_ZN4MQTT11isConnectedEv>
   d550a:	4605      	mov	r5, r0
   d550c:	2800      	cmp	r0, #0
   d550e:	f040 80bd 	bne.w	d568c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x198>
        int result = 0;
        if (ip == NULL)
   d5512:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d5514:	b939      	cbnz	r1, d5526 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x32>
            result = _client.connect(this->domain.c_str(), this->port);
   d5516:	4603      	mov	r3, r0
   d5518:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d551c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d551e:	4620      	mov	r0, r4
   d5520:	f002 ffee 	bl	d8500 <_ZN9TCPClient7connectEPKctm>
   d5524:	e009      	b.n	d553a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x46>
        else
            result = _client.connect(this->ip, this->port);
   d5526:	4668      	mov	r0, sp
   d5528:	f002 fc18 	bl	d7d5c <_ZN9IPAddressC1EPKh>
   d552c:	462b      	mov	r3, r5
   d552e:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d5532:	4669      	mov	r1, sp
   d5534:	4620      	mov	r0, r4
   d5536:	f003 f865 	bl	d8604 <_ZN9TCPClient7connectE9IPAddresstm>

        if (result) {
   d553a:	2800      	cmp	r0, #0
   d553c:	f000 80a2 	beq.w	d5684 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
            nextMsgId = 1;
   d5540:	2301      	movs	r3, #1
   d5542:	8423      	strh	r3, [r4, #32]
            uint16_t length = 5;

            if (version == MQTT_V311) {
   d5544:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
   d5548:	2b04      	cmp	r3, #4
   d554a:	d115      	bne.n	d5578 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x84>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d554c:	4b52      	ldr	r3, [pc, #328]	; (d5698 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a4>)
   d554e:	6818      	ldr	r0, [r3, #0]
   d5550:	889a      	ldrh	r2, [r3, #4]
   d5552:	f8ad 2004 	strh.w	r2, [sp, #4]
   d5556:	9000      	str	r0, [sp, #0]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d5558:	69e2      	ldr	r2, [r4, #28]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d555a:	799b      	ldrb	r3, [r3, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d555c:	9800      	ldr	r0, [sp, #0]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d555e:	f88d 3006 	strb.w	r3, [sp, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d5562:	1d53      	adds	r3, r2, #5
   d5564:	f8c2 0005 	str.w	r0, [r2, #5]
   d5568:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   d556c:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d5570:	719a      	strb	r2, [r3, #6]
   d5572:	8099      	strh	r1, [r3, #4]
                length+=sizeof(MQTT_HEADER_V311);
   d5574:	230c      	movs	r3, #12
   d5576:	e012      	b.n	d559e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d5578:	4b48      	ldr	r3, [pc, #288]	; (d569c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>)
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d557a:	f8d4 c01c 	ldr.w	ip, [r4, #28]
            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d557e:	6818      	ldr	r0, [r3, #0]
   d5580:	6859      	ldr	r1, [r3, #4]
   d5582:	7a1b      	ldrb	r3, [r3, #8]
   d5584:	466a      	mov	r2, sp
   d5586:	c203      	stmia	r2!, {r0, r1}
   d5588:	7013      	strb	r3, [r2, #0]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d558a:	466b      	mov	r3, sp
   d558c:	cb03      	ldmia	r3!, {r0, r1}
   d558e:	f8cc 0005 	str.w	r0, [ip, #5]
   d5592:	f8cc 1009 	str.w	r1, [ip, #9]
   d5596:	7813      	ldrb	r3, [r2, #0]
   d5598:	f88c 300d 	strb.w	r3, [ip, #13]
                length+=sizeof(MQTT_HEADER_V31);
   d559c:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
   d559e:	f1b8 0f00 	cmp.w	r8, #0
   d55a2:	d00a      	beq.n	d55ba <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc6>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   d55a4:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   d55a8:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   d55ac:	0152      	lsls	r2, r2, #5
   d55ae:	f042 0206 	orr.w	r2, r2, #6
   d55b2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
   d55b6:	b2d2      	uxtb	r2, r2
   d55b8:	e000      	b.n	d55bc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc8>
            } else {
                v = 0x02;
   d55ba:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
   d55bc:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
   d55c0:	b909      	cbnz	r1, d55c6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xd2>
              v = v&0xfd;
   d55c2:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
   d55c6:	b12f      	cbz	r7, d55d4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>
                v = v|0x80;

                if(pass != NULL) {
   d55c8:	b916      	cbnz	r6, d55d0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
   d55ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   d55ce:	e001      	b.n	d55d4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>

                if(pass != NULL) {
                    v = v|(0x80>>1);
   d55d0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
   d55d4:	69e1      	ldr	r1, [r4, #28]
   d55d6:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
   d55d8:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d55da:	69e1      	ldr	r1, [r4, #28]
   d55dc:	1c58      	adds	r0, r3, #1
   d55de:	1212      	asrs	r2, r2, #8
   d55e0:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   d55e2:	1c9a      	adds	r2, r3, #2
   d55e4:	69e1      	ldr	r1, [r4, #28]
   d55e6:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d55e8:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   d55ea:	3303      	adds	r3, #3
   d55ec:	69e2      	ldr	r2, [r4, #28]
   d55ee:	4649      	mov	r1, r9
   d55f0:	4620      	mov	r0, r4
   d55f2:	f7ff ff43 	bl	d547c <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
   d55f6:	f1b8 0f00 	cmp.w	r8, #0
   d55fa:	d00b      	beq.n	d5614 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
                length = writeString(willTopic, buffer, length);
   d55fc:	4603      	mov	r3, r0
   d55fe:	69e2      	ldr	r2, [r4, #28]
   d5600:	4641      	mov	r1, r8
   d5602:	4620      	mov	r0, r4
   d5604:	f7ff ff3a 	bl	d547c <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   d5608:	69e2      	ldr	r2, [r4, #28]
   d560a:	9911      	ldr	r1, [sp, #68]	; 0x44
   d560c:	4603      	mov	r3, r0
   d560e:	4620      	mov	r0, r4
   d5610:	f7ff ff34 	bl	d547c <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
   d5614:	b167      	cbz	r7, d5630 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                length = writeString(user,buffer,length);
   d5616:	4603      	mov	r3, r0
   d5618:	69e2      	ldr	r2, [r4, #28]
   d561a:	4639      	mov	r1, r7
   d561c:	4620      	mov	r0, r4
   d561e:	f7ff ff2d 	bl	d547c <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
   d5622:	b12e      	cbz	r6, d5630 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                    length = writeString(pass,buffer,length);
   d5624:	4603      	mov	r3, r0
   d5626:	69e2      	ldr	r2, [r4, #28]
   d5628:	4631      	mov	r1, r6
   d562a:	4620      	mov	r0, r4
   d562c:	f7ff ff26 	bl	d547c <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
   d5630:	1f43      	subs	r3, r0, #5
   d5632:	b29b      	uxth	r3, r3
   d5634:	69e2      	ldr	r2, [r4, #28]
   d5636:	2110      	movs	r1, #16
   d5638:	4620      	mov	r0, r4
   d563a:	f7ff fed8 	bl	d53ee <_ZN4MQTT5writeEhPht>
   d563e:	f001 fbc1 	bl	d6dc4 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!_client.available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d5642:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
   d5646:	6260      	str	r0, [r4, #36]	; 0x24
   d5648:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!_client.available()) {
   d564a:	4620      	mov	r0, r4
   d564c:	f003 f86c 	bl	d8728 <_ZN9TCPClient9availableEv>
   d5650:	b940      	cbnz	r0, d5664 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x170>
   d5652:	f001 fbb7 	bl	d6dc4 <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d5656:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d5658:	1ac0      	subs	r0, r0, r3
   d565a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d565c:	4373      	muls	r3, r6
   d565e:	4298      	cmp	r0, r3
   d5660:	d9f3      	bls.n	d564a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
   d5662:	e00f      	b.n	d5684 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                    _client.stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d5664:	4669      	mov	r1, sp
   d5666:	4620      	mov	r0, r4
   d5668:	f7ff fe68 	bl	d533c <_ZN4MQTT10readPacketEPh>

            if (len == 4) {
   d566c:	2804      	cmp	r0, #4
   d566e:	d109      	bne.n	d5684 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                if (buffer[3] == CONN_ACCEPT) {
   d5670:	69e3      	ldr	r3, [r4, #28]
   d5672:	78de      	ldrb	r6, [r3, #3]
   d5674:	b936      	cbnz	r6, d5684 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
   d5676:	f001 fba5 	bl	d6dc4 <HAL_Timer_Get_Milli_Seconds>
                    lastInActivity = millis();
                    pingOutstanding = false;
                    debug_print(" Connect success\n");
                    return true;
   d567a:	2501      	movs	r5, #1
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == CONN_ACCEPT) {
                    lastInActivity = millis();
   d567c:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   d567e:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
   d5682:	e004      	b.n	d568e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
                    // check EMQTT_CONNACK_RESPONSE code.
                    debug_print(" Connect fail. code = [%d]\n", buffer[3]);
                }
            }
        }
        _client.stop();
   d5684:	4620      	mov	r0, r4
   d5686:	f003 f837 	bl	d86f8 <_ZN9TCPClient4stopEv>
   d568a:	e000      	b.n	d568e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
    }
    return false;
   d568c:	2500      	movs	r5, #0
}
   d568e:	4628      	mov	r0, r5
   d5690:	b007      	add	sp, #28
   d5692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5696:	bf00      	nop
   d5698:	000d9a8e 	.word	0x000d9a8e
   d569c:	000d9a95 	.word	0x000d9a95

000d56a0 <_ZN4MQTT7connectEPKc>:
void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}


bool MQTT::connect(const char *id) {
   d56a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   d56a2:	2304      	movs	r3, #4
   d56a4:	9305      	str	r3, [sp, #20]
   d56a6:	2301      	movs	r3, #1
   d56a8:	9304      	str	r3, [sp, #16]
   d56aa:	2300      	movs	r3, #0
   d56ac:	9303      	str	r3, [sp, #12]
   d56ae:	9302      	str	r3, [sp, #8]
   d56b0:	9301      	str	r3, [sp, #4]
   d56b2:	9300      	str	r3, [sp, #0]
   d56b4:	461a      	mov	r2, r3
   d56b6:	f7ff ff1d 	bl	d54f4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   d56ba:	b007      	add	sp, #28
   d56bc:	f85d fb04 	ldr.w	pc, [sp], #4

000d56c0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d56c0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d56c4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   d56c6:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d56ca:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d56ce:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
   d56d2:	4604      	mov	r4, r0
   d56d4:	468b      	mov	fp, r1
   d56d6:	4691      	mov	r9, r2
   d56d8:	469a      	mov	sl, r3
    if (isConnected()) {
   d56da:	f7ff fee9 	bl	d54b0 <_ZN4MQTT11isConnectedEv>
   d56de:	2800      	cmp	r0, #0
   d56e0:	d04c      	beq.n	d577c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xbc>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, this->maxpacketsize);
   d56e2:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   d56e6:	69e0      	ldr	r0, [r4, #28]
   d56e8:	2100      	movs	r1, #0
   d56ea:	f004 f820 	bl	d972e <memset>

        length = writeString(topic, buffer, length);
   d56ee:	2305      	movs	r3, #5
   d56f0:	69e2      	ldr	r2, [r4, #28]
   d56f2:	4659      	mov	r1, fp
   d56f4:	4620      	mov	r0, r4
   d56f6:	f7ff fec1 	bl	d547c <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
   d56fa:	1e6b      	subs	r3, r5, #1
   d56fc:	2b01      	cmp	r3, #1
   d56fe:	d812      	bhi.n	d5726 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
            nextMsgId += 1;
   d5700:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d5702:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, this->maxpacketsize);

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
   d5704:	3301      	adds	r3, #1
   d5706:	b29b      	uxth	r3, r3
   d5708:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d570a:	121b      	asrs	r3, r3, #8
   d570c:	5413      	strb	r3, [r2, r0]
   d570e:	1c41      	adds	r1, r0, #1
   d5710:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
   d5712:	69e3      	ldr	r3, [r4, #28]
   d5714:	8c22      	ldrh	r2, [r4, #32]
   d5716:	545a      	strb	r2, [r3, r1]
   d5718:	3002      	adds	r0, #2
   d571a:	b280      	uxth	r0, r0
            if (messageid != NULL)
   d571c:	b11e      	cbz	r6, d5726 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
                *messageid = nextMsgId++;
   d571e:	8c23      	ldrh	r3, [r4, #32]
   d5720:	1c5a      	adds	r2, r3, #1
   d5722:	8422      	strh	r2, [r4, #32]
   d5724:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d5726:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d5728:	b291      	uxth	r1, r2
   d572a:	1883      	adds	r3, r0, r2
   d572c:	458a      	cmp	sl, r1
   d572e:	b29b      	uxth	r3, r3
   d5730:	d90a      	bls.n	d5748 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
   d5732:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
   d5736:	429e      	cmp	r6, r3
   d5738:	f102 0201 	add.w	r2, r2, #1
   d573c:	d904      	bls.n	d5748 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
            buffer[length++] = payload[i];
   d573e:	f819 6001 	ldrb.w	r6, [r9, r1]
   d5742:	69e1      	ldr	r1, [r4, #28]
   d5744:	54ce      	strb	r6, [r1, r3]
   d5746:	e7ef      	b.n	d5728 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x68>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
   d5748:	f1b8 0f00 	cmp.w	r8, #0
   d574c:	bf0c      	ite	eq
   d574e:	2130      	moveq	r1, #48	; 0x30
   d5750:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
   d5752:	b10f      	cbz	r7, d5758 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x98>
            header |= DUP_FLAG_ON_MASK;
   d5754:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
   d5758:	2d02      	cmp	r5, #2
   d575a:	d102      	bne.n	d5762 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa2>
            header |= MQTTQOS2_HEADER_MASK;
   d575c:	f041 0104 	orr.w	r1, r1, #4
   d5760:	e003      	b.n	d576a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xaa>
        else if (qos == QOS1)
   d5762:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   d5764:	bf08      	it	eq
   d5766:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d576a:	3b05      	subs	r3, #5
   d576c:	69e2      	ldr	r2, [r4, #28]
   d576e:	b29b      	uxth	r3, r3
   d5770:	4620      	mov	r0, r4
    }
    return false;
}
   d5772:	b001      	add	sp, #4
   d5774:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d5778:	f7ff be39 	b.w	d53ee <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d577c:	b001      	add	sp, #4
   d577e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5782 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   d5782:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   d5784:	9c08      	ldr	r4, [sp, #32]
   d5786:	9403      	str	r4, [sp, #12]
   d5788:	2400      	movs	r4, #0
   d578a:	9402      	str	r4, [sp, #8]
   d578c:	f89d 401c 	ldrb.w	r4, [sp, #28]
   d5790:	9401      	str	r4, [sp, #4]
   d5792:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d5796:	9400      	str	r4, [sp, #0]
   d5798:	f7ff ff92 	bl	d56c0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   d579c:	b004      	add	sp, #16
   d579e:	bd10      	pop	{r4, pc}

000d57a0 <_ZN4MQTT7publishEPKcPKhj>:

bool MQTT::publish(const char * topic, const char* payload, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, (uint8_t*)payload, strlen(payload), false, qos, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength) {
   d57a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, false, QOS0, NULL);
   d57a2:	2400      	movs	r4, #0
   d57a4:	9402      	str	r4, [sp, #8]
   d57a6:	9401      	str	r4, [sp, #4]
   d57a8:	9400      	str	r4, [sp, #0]
   d57aa:	f7ff ffea 	bl	d5782 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   d57ae:	b004      	add	sp, #16
   d57b0:	bd10      	pop	{r4, pc}

000d57b2 <_ZN4MQTT14publishReleaseEt>:
        return write(header, buffer, length-5);
    }
    return false;
}

bool MQTT::publishRelease(uint16_t messageid) {
   d57b2:	b538      	push	{r3, r4, r5, lr}
   d57b4:	4604      	mov	r4, r0
   d57b6:	460d      	mov	r5, r1
    if (isConnected()) {
   d57b8:	f7ff fe7a 	bl	d54b0 <_ZN4MQTT11isConnectedEv>
   d57bc:	b190      	cbz	r0, d57e4 <_ZN4MQTT14publishReleaseEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   d57be:	69e3      	ldr	r3, [r4, #28]
   d57c0:	2262      	movs	r2, #98	; 0x62
   d57c2:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d57c4:	69e3      	ldr	r3, [r4, #28]
   d57c6:	2202      	movs	r2, #2
   d57c8:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d57ca:	69e3      	ldr	r3, [r4, #28]
   d57cc:	122a      	asrs	r2, r5, #8
   d57ce:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d57d0:	69e3      	ldr	r3, [r4, #28]
   d57d2:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
   d57d4:	2204      	movs	r2, #4
   d57d6:	69e1      	ldr	r1, [r4, #28]
   d57d8:	4620      	mov	r0, r4
   d57da:	f002 fda4 	bl	d8326 <_ZN9TCPClient5writeEPKhj>
   d57de:	3000      	adds	r0, #0
   d57e0:	bf18      	it	ne
   d57e2:	2001      	movne	r0, #1
    }
    return false;
}
   d57e4:	bd38      	pop	{r3, r4, r5, pc}

000d57e6 <_ZN4MQTT15publishCompleteEt>:

bool MQTT::publishComplete(uint16_t messageid) {
   d57e6:	b538      	push	{r3, r4, r5, lr}
   d57e8:	4604      	mov	r4, r0
   d57ea:	460d      	mov	r5, r1
    if (isConnected()) {
   d57ec:	f7ff fe60 	bl	d54b0 <_ZN4MQTT11isConnectedEv>
   d57f0:	b190      	cbz	r0, d5818 <_ZN4MQTT15publishCompleteEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   d57f2:	69e3      	ldr	r3, [r4, #28]
   d57f4:	2272      	movs	r2, #114	; 0x72
   d57f6:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d57f8:	69e3      	ldr	r3, [r4, #28]
   d57fa:	2202      	movs	r2, #2
   d57fc:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d57fe:	69e3      	ldr	r3, [r4, #28]
   d5800:	122a      	asrs	r2, r5, #8
   d5802:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d5804:	69e3      	ldr	r3, [r4, #28]
   d5806:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
   d5808:	2204      	movs	r2, #4
   d580a:	69e1      	ldr	r1, [r4, #28]
   d580c:	4620      	mov	r0, r4
   d580e:	f002 fd8a 	bl	d8326 <_ZN9TCPClient5writeEPKhj>
   d5812:	3000      	adds	r0, #0
   d5814:	bf18      	it	ne
   d5816:	2001      	movne	r0, #1
    }
    return false;
}
   d5818:	bd38      	pop	{r3, r4, r5, pc}

000d581a <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
   d581a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d581e:	b083      	sub	sp, #12
   d5820:	af00      	add	r7, sp, #0
   d5822:	4604      	mov	r4, r0
    if (isConnected()) {
   d5824:	f7ff fe44 	bl	d54b0 <_ZN4MQTT11isConnectedEv>
   d5828:	4681      	mov	r9, r0
   d582a:	2800      	cmp	r0, #0
   d582c:	f000 80f6 	beq.w	d5a1c <_ZN4MQTT4loopEv+0x202>
   d5830:	f001 fac8 	bl	d6dc4 <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   d5834:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d5836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d583a:	4353      	muls	r3, r2
   d583c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   d583e:	1a82      	subs	r2, r0, r2
   d5840:	429a      	cmp	r2, r3
   d5842:	4605      	mov	r5, r0
   d5844:	d803      	bhi.n	d584e <_ZN4MQTT4loopEv+0x34>
   d5846:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d5848:	1a82      	subs	r2, r0, r2
   d584a:	4293      	cmp	r3, r2
   d584c:	d217      	bcs.n	d587e <_ZN4MQTT4loopEv+0x64>
            if (pingOutstanding) {
   d584e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d5852:	b12b      	cbz	r3, d5860 <_ZN4MQTT4loopEv+0x46>
                _client.stop();
   d5854:	4620      	mov	r0, r4
   d5856:	f002 ff4f 	bl	d86f8 <_ZN9TCPClient4stopEv>
                return false;
   d585a:	f04f 0900 	mov.w	r9, #0
   d585e:	e0dd      	b.n	d5a1c <_ZN4MQTT4loopEv+0x202>
            } else {
                buffer[0] = MQTTPINGREQ;
   d5860:	69e2      	ldr	r2, [r4, #28]
   d5862:	21c0      	movs	r1, #192	; 0xc0
   d5864:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   d5866:	69e2      	ldr	r2, [r4, #28]
   d5868:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   d586a:	69e1      	ldr	r1, [r4, #28]
   d586c:	2202      	movs	r2, #2
   d586e:	4620      	mov	r0, r4
   d5870:	f002 fd59 	bl	d8326 <_ZN9TCPClient5writeEPKhj>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
   d5874:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                _client.write(buffer,2);
                lastOutActivity = t;
   d5876:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
   d5878:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
   d587a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (_client.available()) {
   d587e:	4620      	mov	r0, r4
   d5880:	f002 ff52 	bl	d8728 <_ZN9TCPClient9availableEv>
   d5884:	2800      	cmp	r0, #0
   d5886:	f000 80c9 	beq.w	d5a1c <_ZN4MQTT4loopEv+0x202>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d588a:	1df9      	adds	r1, r7, #7
   d588c:	4620      	mov	r0, r4
   d588e:	f7ff fd55 	bl	d533c <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
   d5892:	4602      	mov	r2, r0
   d5894:	2800      	cmp	r0, #0
   d5896:	f000 80c1 	beq.w	d5a1c <_ZN4MQTT4loopEv+0x202>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
   d589a:	69e3      	ldr	r3, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
   d589c:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   d589e:	7818      	ldrb	r0, [r3, #0]
   d58a0:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   d58a4:	2930      	cmp	r1, #48	; 0x30
   d58a6:	d17d      	bne.n	d59a4 <_ZN4MQTT4loopEv+0x18a>
                    if (callback) {
   d58a8:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
   d58ac:	f1bb 0f00 	cmp.w	fp, #0
   d58b0:	f000 80b4 	beq.w	d5a1c <_ZN4MQTT4loopEv+0x202>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d58b4:	f897 c007 	ldrb.w	ip, [r7, #7]
   d58b8:	eb03 000c 	add.w	r0, r3, ip
              							_client.write(buffer, 4);
              							lastOutActivity = t;
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
   d58bc:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d58be:	7881      	ldrb	r1, [r0, #2]
   d58c0:	f890 e001 	ldrb.w	lr, [r0, #1]
   d58c4:	eb01 2e0e 	add.w	lr, r1, lr, lsl #8
   d58c8:	fa1f fe8e 	uxth.w	lr, lr
                        char topic[tl+1];
   d58cc:	f10e 0108 	add.w	r1, lr, #8
   d58d0:	f021 0107 	bic.w	r1, r1, #7
   d58d4:	ebad 0d01 	sub.w	sp, sp, r1
   d58d8:	4668      	mov	r0, sp
   d58da:	2100      	movs	r1, #0
                        for (uint16_t i=0;i<tl;i++) {
   d58dc:	b28e      	uxth	r6, r1
   d58de:	45b6      	cmp	lr, r6
   d58e0:	d906      	bls.n	d58f0 <_ZN4MQTT4loopEv+0xd6>
                            topic[i] = buffer[llen+3+i];
   d58e2:	eb0c 0601 	add.w	r6, ip, r1
   d58e6:	441e      	add	r6, r3
   d58e8:	78f6      	ldrb	r6, [r6, #3]
   d58ea:	5446      	strb	r6, [r0, r1]
   d58ec:	3101      	adds	r1, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
   d58ee:	e7f5      	b.n	d58dc <_ZN4MQTT4loopEv+0xc2>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
   d58f0:	2100      	movs	r1, #0
   d58f2:	f800 100e 	strb.w	r1, [r0, lr]
   d58f6:	781e      	ldrb	r6, [r3, #0]
   d58f8:	f006 0606 	and.w	r6, r6, #6
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d58fc:	2e02      	cmp	r6, #2
   d58fe:	f10c 0103 	add.w	r1, ip, #3
   d5902:	ebcc 0202 	rsb	r2, ip, r2
   d5906:	d11e      	bne.n	d5946 <_ZN4MQTT4loopEv+0x12c>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5908:	4471      	add	r1, lr
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d590a:	ebce 0202 	rsb	r2, lr, r2
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d590e:	f813 8001 	ldrb.w	r8, [r3, r1]
   d5912:	4419      	add	r1, r3
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d5914:	3a05      	subs	r2, #5
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5916:	7849      	ldrb	r1, [r1, #1]
   d5918:	eb01 2808 	add.w	r8, r1, r8, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d591c:	f10c 0105 	add.w	r1, ip, #5
   d5920:	4471      	add	r1, lr
   d5922:	4419      	add	r1, r3
   d5924:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   d5926:	69e3      	ldr	r3, [r4, #28]
   d5928:	2240      	movs	r2, #64	; 0x40
   d592a:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   d592c:	69e3      	ldr	r3, [r4, #28]
   d592e:	705e      	strb	r6, [r3, #1]
                            buffer[2] = (msgId >> 8);
   d5930:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5932:	fa1f f888 	uxth.w	r8, r8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
   d5936:	ea4f 2228 	mov.w	r2, r8, asr #8
   d593a:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   d593c:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
   d593e:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
   d5940:	f883 8003 	strb.w	r8, [r3, #3]
   d5944:	e020      	b.n	d5988 <_ZN4MQTT4loopEv+0x16e>
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   d5946:	2e04      	cmp	r6, #4
   d5948:	d124      	bne.n	d5994 <_ZN4MQTT4loopEv+0x17a>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d594a:	4471      	add	r1, lr
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d594c:	ebce 0202 	rsb	r2, lr, r2
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d5950:	f813 8001 	ldrb.w	r8, [r3, r1]
   d5954:	4419      	add	r1, r3
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d5956:	3a05      	subs	r2, #5
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d5958:	7849      	ldrb	r1, [r1, #1]
   d595a:	eb01 2808 	add.w	r8, r1, r8, lsl #8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d595e:	f10c 0105 	add.w	r1, ip, #5
   d5962:	4471      	add	r1, lr
   d5964:	4419      	add	r1, r3
   d5966:	47d8      	blx	fp

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
   d5968:	69e3      	ldr	r3, [r4, #28]
   d596a:	2250      	movs	r2, #80	; 0x50
   d596c:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
   d596e:	69e3      	ldr	r3, [r4, #28]
   d5970:	2202      	movs	r2, #2
   d5972:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
   d5974:	69e3      	ldr	r3, [r4, #28]
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d5976:	fa1f f888 	uxth.w	r8, r8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
   d597a:	ea4f 2228 	mov.w	r2, r8, asr #8
   d597e:	709a      	strb	r2, [r3, #2]
              							buffer[3] = (msgId & 0xFF);
   d5980:	69e3      	ldr	r3, [r4, #28]
              							_client.write(buffer, 4);
   d5982:	4632      	mov	r2, r6
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
              							buffer[3] = (msgId & 0xFF);
   d5984:	f883 8003 	strb.w	r8, [r3, #3]
              							_client.write(buffer, 4);
   d5988:	69e1      	ldr	r1, [r4, #28]
   d598a:	4620      	mov	r0, r4
   d598c:	f002 fccb 	bl	d8326 <_ZN9TCPClient5writeEPKhj>
              							lastOutActivity = t;
   d5990:	6265      	str	r5, [r4, #36]	; 0x24
   d5992:	e005      	b.n	d59a0 <_ZN4MQTT4loopEv+0x186>
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
   d5994:	3a03      	subs	r2, #3
   d5996:	4471      	add	r1, lr
   d5998:	ebce 0202 	rsb	r2, lr, r2
   d599c:	4419      	add	r1, r3
   d599e:	47d8      	blx	fp
   d59a0:	46d5      	mov	sp, sl
   d59a2:	e03b      	b.n	d5a1c <_ZN4MQTT4loopEv+0x202>
                        }
                    }
                } else if (type == MQTTPUBREC) {
   d59a4:	2950      	cmp	r1, #80	; 0x50
   d59a6:	d108      	bne.n	d59ba <_ZN4MQTT4loopEv+0x1a0>
                    // check for the situation that QoS2 receive PUBREC, should return PUBREL
                    msgId = (buffer[2] << 8) + buffer[3];
                    this->publishRelease(msgId);
   d59a8:	7899      	ldrb	r1, [r3, #2]
   d59aa:	78db      	ldrb	r3, [r3, #3]
   d59ac:	eb03 2101 	add.w	r1, r3, r1, lsl #8
   d59b0:	b289      	uxth	r1, r1
   d59b2:	4620      	mov	r0, r4
   d59b4:	f7ff fefd 	bl	d57b2 <_ZN4MQTT14publishReleaseEt>
   d59b8:	e030      	b.n	d5a1c <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBACK) {
   d59ba:	2940      	cmp	r1, #64	; 0x40
   d59bc:	d00c      	beq.n	d59d8 <_ZN4MQTT4loopEv+0x1be>
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
                        }
                    }
                } else if (type == MQTTPUBREL) {
   d59be:	2960      	cmp	r1, #96	; 0x60
   d59c0:	d108      	bne.n	d59d4 <_ZN4MQTT4loopEv+0x1ba>
                  msgId = (buffer[2] << 8) + buffer[3];
                  this->publishComplete(msgId);
   d59c2:	7899      	ldrb	r1, [r3, #2]
   d59c4:	78db      	ldrb	r3, [r3, #3]
   d59c6:	eb03 2101 	add.w	r1, r3, r1, lsl #8
   d59ca:	b289      	uxth	r1, r1
   d59cc:	4620      	mov	r0, r4
   d59ce:	f7ff ff0a 	bl	d57e6 <_ZN4MQTT15publishCompleteEt>
   d59d2:	e023      	b.n	d5a1c <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBCOMP) {
   d59d4:	2970      	cmp	r1, #112	; 0x70
   d59d6:	d10d      	bne.n	d59f4 <_ZN4MQTT4loopEv+0x1da>
                  if (qoscallback) {
   d59d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d59da:	b1f9      	cbz	r1, d5a1c <_ZN4MQTT4loopEv+0x202>
                      // msgId only present for QOS==0
                      if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   d59dc:	2a04      	cmp	r2, #4
   d59de:	d11d      	bne.n	d5a1c <_ZN4MQTT4loopEv+0x202>
   d59e0:	f010 0f06 	tst.w	r0, #6
   d59e4:	d11a      	bne.n	d5a1c <_ZN4MQTT4loopEv+0x202>
                          msgId = (buffer[2]<<8)+buffer[3];
                          this->qoscallback(msgId);
   d59e6:	7898      	ldrb	r0, [r3, #2]
   d59e8:	78db      	ldrb	r3, [r3, #3]
   d59ea:	eb03 2000 	add.w	r0, r3, r0, lsl #8
   d59ee:	b280      	uxth	r0, r0
   d59f0:	4788      	blx	r1
   d59f2:	e013      	b.n	d5a1c <_ZN4MQTT4loopEv+0x202>
                      }
                  }
                } else if (type == MQTTSUBACK) {
   d59f4:	2990      	cmp	r1, #144	; 0x90
   d59f6:	d011      	beq.n	d5a1c <_ZN4MQTT4loopEv+0x202>
                    // if something...
                } else if (type == MQTTPINGREQ) {
   d59f8:	29c0      	cmp	r1, #192	; 0xc0
   d59fa:	d10a      	bne.n	d5a12 <_ZN4MQTT4loopEv+0x1f8>
                    buffer[0] = MQTTPINGRESP;
   d59fc:	22d0      	movs	r2, #208	; 0xd0
   d59fe:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   d5a00:	69e3      	ldr	r3, [r4, #28]
   d5a02:	2200      	movs	r2, #0
   d5a04:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   d5a06:	69e1      	ldr	r1, [r4, #28]
   d5a08:	2202      	movs	r2, #2
   d5a0a:	4620      	mov	r0, r4
   d5a0c:	f002 fc8b 	bl	d8326 <_ZN9TCPClient5writeEPKhj>
   d5a10:	e004      	b.n	d5a1c <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPINGRESP) {
   d5a12:	29d0      	cmp	r1, #208	; 0xd0
                    pingOutstanding = false;
   d5a14:	bf04      	itt	eq
   d5a16:	2300      	moveq	r3, #0
   d5a18:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
            }
        }
        return true;
    }
    return false;
}
   d5a1c:	4648      	mov	r0, r9
   d5a1e:	370c      	adds	r7, #12
   d5a20:	46bd      	mov	sp, r7
   d5a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5a26 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
}

bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   d5a26:	b570      	push	{r4, r5, r6, lr}
   d5a28:	4604      	mov	r4, r0
   d5a2a:	460e      	mov	r6, r1
   d5a2c:	4615      	mov	r5, r2

    if (isConnected()) {
   d5a2e:	f7ff fd3f 	bl	d54b0 <_ZN4MQTT11isConnectedEv>
   d5a32:	b1e8      	cbz	r0, d5a70 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4a>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
   d5a34:	8c23      	ldrh	r3, [r4, #32]
   d5a36:	3301      	adds	r3, #1
   d5a38:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   d5a3a:	b903      	cbnz	r3, d5a3e <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x18>
            nextMsgId = 1;
   d5a3c:	2301      	movs	r3, #1
   d5a3e:	8423      	strh	r3, [r4, #32]
        }
        buffer[length++] = (nextMsgId >> 8);
   d5a40:	8c23      	ldrh	r3, [r4, #32]
   d5a42:	69e2      	ldr	r2, [r4, #28]
   d5a44:	121b      	asrs	r3, r3, #8
   d5a46:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   d5a48:	69e3      	ldr	r3, [r4, #28]
   d5a4a:	8c22      	ldrh	r2, [r4, #32]
   d5a4c:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   d5a4e:	69e2      	ldr	r2, [r4, #28]
   d5a50:	4631      	mov	r1, r6
   d5a52:	2307      	movs	r3, #7
   d5a54:	4620      	mov	r0, r4
   d5a56:	f7ff fd11 	bl	d547c <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   d5a5a:	69e3      	ldr	r3, [r4, #28]
   d5a5c:	541d      	strb	r5, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d5a5e:	1f03      	subs	r3, r0, #4
   d5a60:	69e2      	ldr	r2, [r4, #28]
   d5a62:	4620      	mov	r0, r4
   d5a64:	b29b      	uxth	r3, r3
   d5a66:	2182      	movs	r1, #130	; 0x82
    }
    return false;
}
   d5a68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d5a6c:	f7ff bcbf 	b.w	d53ee <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d5a70:	bd70      	pop	{r4, r5, r6, pc}

000d5a72 <_ZN4MQTT9subscribeEPKc>:
    lastOutActivity = millis();
    return (rc == 1+llen+length);
}

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
   d5a72:	2200      	movs	r2, #0
   d5a74:	f7ff bfd7 	b.w	d5a26 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000d5a78 <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
   d5a78:	b510      	push	{r4, lr}
   d5a7a:	4604      	mov	r4, r0
    if (isConnected()) {
   d5a7c:	f7ff fd18 	bl	d54b0 <_ZN4MQTT11isConnectedEv>
   d5a80:	b110      	cbz	r0, d5a88 <_ZN4MQTTD1Ev+0x10>
        disconnect();
   d5a82:	4620      	mov	r0, r4
   d5a84:	f7ff fce6 	bl	d5454 <_ZN4MQTT10disconnectEv>
    }

    if (buffer != NULL)
   d5a88:	69e0      	ldr	r0, [r4, #28]
   d5a8a:	b108      	cbz	r0, d5a90 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
   d5a8c:	f7fe fb09 	bl	d40a2 <_ZdaPv>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
   d5a90:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d5a94:	f001 fdd0 	bl	d7638 <_ZN6StringD1Ev>
   d5a98:	4620      	mov	r0, r4
   d5a9a:	f7ff fbdb 	bl	d5254 <_ZN9TCPClientD1Ev>
        disconnect();
    }

    if (buffer != NULL)
      delete[] buffer;
}
   d5a9e:	4620      	mov	r0, r4
   d5aa0:	bd10      	pop	{r4, pc}

000d5aa2 <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
   d5aa2:	f001 b8c7 	b.w	d6c34 <HAL_Pin_Map>

000d5aa6 <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d5aa6:	f001 b8c5 	b.w	d6c34 <HAL_Pin_Map>

000d5aaa <_GLOBAL__sub_I__ZN7istream3getEv>:
   d5aaa:	f001 b8c3 	b.w	d6c34 <HAL_Pin_Map>

000d5aae <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d5aae:	b510      	push	{r4, lr}
   d5ab0:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5ab2:	3024      	adds	r0, #36	; 0x24
   d5ab4:	f000 fa50 	bl	d5f58 <_ZN8FatCache4syncEv>
   d5ab8:	b128      	cbz	r0, d5ac6 <_ZN9FatVolume9cacheSyncEv+0x18>
   d5aba:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d5abe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5ac2:	f000 ba49 	b.w	d5f58 <_ZN8FatCache4syncEv>
  }
   d5ac6:	bd10      	pop	{r4, pc}

000d5ac8 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d5ac8:	f001 b8b4 	b.w	d6c34 <HAL_Pin_Map>

000d5acc <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d5acc:	f001 b8b2 	b.w	d6c34 <HAL_Pin_Map>

000d5ad0 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d5ad0:	f001 b8b0 	b.w	d6c34 <HAL_Pin_Map>

000d5ad4 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d5ad4:	f001 b8ae 	b.w	d6c34 <HAL_Pin_Map>

000d5ad8 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5ad8:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5ada:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5adc:	f043 0304 	orr.w	r3, r3, #4
   d5ae0:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5ae2:	f100 0210 	add.w	r2, r0, #16
   d5ae6:	6880      	ldr	r0, [r0, #8]
   d5ae8:	f000 baec 	b.w	d60c4 <_ZN9FatVolume15allocateClusterEmPm>

000d5aec <_ZN7FatFile13cacheDirEntryEh>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d5aec:	b510      	push	{r4, lr}
   d5aee:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5af0:	6880      	ldr	r0, [r0, #8]
   d5af2:	460a      	mov	r2, r1
   d5af4:	3024      	adds	r0, #36	; 0x24
   d5af6:	69a1      	ldr	r1, [r4, #24]
   d5af8:	f000 fa55 	bl	d5fa6 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d5afc:	b120      	cbz	r0, d5b08 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d5afe:	88a3      	ldrh	r3, [r4, #4]
   d5b00:	f003 030f 	and.w	r3, r3, #15
   d5b04:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d5b08:	bd10      	pop	{r4, pc}

000d5b0a <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d5b0a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5b0e:	7803      	ldrb	r3, [r0, #0]
   d5b10:	4604      	mov	r4, r0
   d5b12:	4689      	mov	r9, r1
   d5b14:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d5b16:	b14b      	cbz	r3, d5b2c <_ZN7FatFile4readEPvj+0x22>
   d5b18:	7882      	ldrb	r2, [r0, #2]
   d5b1a:	07d1      	lsls	r1, r2, #31
   d5b1c:	d506      	bpl.n	d5b2c <_ZN7FatFile4readEPvj+0x22>
   d5b1e:	e00c      	b.n	d5b3a <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5b20:	465a      	mov	r2, fp
   d5b22:	6921      	ldr	r1, [r4, #16]
   d5b24:	f000 fa69 	bl	d5ffa <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d5b28:	2800      	cmp	r0, #0
   d5b2a:	da3d      	bge.n	d5ba8 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d5b2c:	7863      	ldrb	r3, [r4, #1]
   d5b2e:	f043 0302 	orr.w	r3, r3, #2
   d5b32:	7063      	strb	r3, [r4, #1]
  return -1;
   d5b34:	f04f 30ff 	mov.w	r0, #4294967295
   d5b38:	e097      	b.n	d5c6a <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d5b3a:	071a      	lsls	r2, r3, #28
   d5b3c:	d503      	bpl.n	d5b46 <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d5b3e:	69e3      	ldr	r3, [r4, #28]
   d5b40:	6962      	ldr	r2, [r4, #20]
   d5b42:	1a9b      	subs	r3, r3, r2
   d5b44:	e007      	b.n	d5b56 <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d5b46:	069a      	lsls	r2, r3, #26
   d5b48:	d508      	bpl.n	d5b5c <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d5b4a:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d5b4c:	891a      	ldrh	r2, [r3, #8]
   d5b4e:	6963      	ldr	r3, [r4, #20]
   d5b50:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d5b54:	b29b      	uxth	r3, r3
   d5b56:	429d      	cmp	r5, r3
   d5b58:	bf28      	it	cs
   d5b5a:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d5b5c:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d5b5e:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5b62:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d5b66:	2e00      	cmp	r6, #0
   d5b68:	d035      	beq.n	d5bd6 <_ZN7FatFile4readEPvj+0xcc>
   d5b6a:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d5b6c:	6963      	ldr	r3, [r4, #20]
   d5b6e:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d5b70:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d5b74:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d5b78:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d5b7c:	d002      	beq.n	d5b84 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d5b7e:	6a03      	ldr	r3, [r0, #32]
   d5b80:	4419      	add	r1, r3
   d5b82:	e01d      	b.n	d5bc0 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5b84:	f890 8005 	ldrb.w	r8, [r0, #5]
   d5b88:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d5b8c:	f1ba 0f00 	cmp.w	sl, #0
   d5b90:	d110      	bne.n	d5bb4 <_ZN7FatFile4readEPvj+0xaa>
   d5b92:	f1b8 0f00 	cmp.w	r8, #0
   d5b96:	d10d      	bne.n	d5bb4 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d5b98:	2b00      	cmp	r3, #0
   d5b9a:	d1c1      	bne.n	d5b20 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5b9c:	0653      	lsls	r3, r2, #25
   d5b9e:	bf4c      	ite	mi
   d5ba0:	6a03      	ldrmi	r3, [r0, #32]
   d5ba2:	6a23      	ldrpl	r3, [r4, #32]
   d5ba4:	6123      	str	r3, [r4, #16]
   d5ba6:	e005      	b.n	d5bb4 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d5ba8:	d104      	bne.n	d5bb4 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d5baa:	7823      	ldrb	r3, [r4, #0]
   d5bac:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5bb0:	d111      	bne.n	d5bd6 <_ZN7FatFile4readEPvj+0xcc>
   d5bb2:	e7bb      	b.n	d5b2c <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5bb4:	6921      	ldr	r1, [r4, #16]
   d5bb6:	68a0      	ldr	r0, [r4, #8]
   d5bb8:	f000 fa19 	bl	d5fee <_ZNK9FatVolume17clusterFirstBlockEm>
   d5bbc:	eb08 0100 	add.w	r1, r8, r0
   d5bc0:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d5bc2:	f1ba 0f00 	cmp.w	sl, #0
   d5bc6:	d135      	bne.n	d5c34 <_ZN7FatFile4readEPvj+0x12a>
   d5bc8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5bcc:	d332      	bcc.n	d5c34 <_ZN7FatFile4readEPvj+0x12a>
   d5bce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5bd0:	4299      	cmp	r1, r3
   d5bd2:	d102      	bne.n	d5bda <_ZN7FatFile4readEPvj+0xd0>
   d5bd4:	e02e      	b.n	d5c34 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d5bd6:	1ba8      	subs	r0, r5, r6
   d5bd8:	e047      	b.n	d5c6a <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d5bda:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5bde:	d31b      	bcc.n	d5c18 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d5be0:	7822      	ldrb	r2, [r4, #0]
   d5be2:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d5be4:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d5be8:	d406      	bmi.n	d5bf8 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d5bea:	7902      	ldrb	r2, [r0, #4]
   d5bec:	ebc8 0202 	rsb	r2, r8, r2
   d5bf0:	b2d2      	uxtb	r2, r2
   d5bf2:	4592      	cmp	sl, r2
   d5bf4:	bf28      	it	cs
   d5bf6:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5bf8:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d5bfa:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5bfe:	d207      	bcs.n	d5c10 <_ZN7FatFile4readEPvj+0x106>
   d5c00:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d5c02:	4653      	mov	r3, sl
   d5c04:	464a      	mov	r2, r9
   d5c06:	6800      	ldr	r0, [r0, #0]
   d5c08:	f000 fba7 	bl	d635a <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d5c0c:	b960      	cbnz	r0, d5c28 <_ZN7FatFile4readEPvj+0x11e>
   d5c0e:	e78d      	b.n	d5b2c <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5c10:	4453      	add	r3, sl
   d5c12:	4299      	cmp	r1, r3
   d5c14:	d321      	bcc.n	d5c5a <_ZN7FatFile4readEPvj+0x150>
   d5c16:	e7f3      	b.n	d5c00 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d5c18:	464a      	mov	r2, r9
   d5c1a:	6800      	ldr	r0, [r0, #0]
   d5c1c:	f000 fb55 	bl	d62ca <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d5c20:	2800      	cmp	r0, #0
   d5c22:	d083      	beq.n	d5b2c <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d5c24:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d5c28:	6963      	ldr	r3, [r4, #20]
   d5c2a:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d5c2c:	44b9      	add	r9, r7
    m_curPosition += n;
   d5c2e:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d5c30:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d5c32:	e798      	b.n	d5b66 <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5c34:	2200      	movs	r2, #0
   d5c36:	3024      	adds	r0, #36	; 0x24
   d5c38:	f000 f9b5 	bl	d5fa6 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d5c3c:	2800      	cmp	r0, #0
   d5c3e:	f43f af75 	beq.w	d5b2c <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d5c42:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d5c46:	42b7      	cmp	r7, r6
   d5c48:	bf28      	it	cs
   d5c4a:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d5c4c:	eb00 010a 	add.w	r1, r0, sl
   d5c50:	463a      	mov	r2, r7
   d5c52:	4648      	mov	r0, r9
   d5c54:	f003 fd60 	bl	d9718 <memcpy>
   d5c58:	e7e6      	b.n	d5c28 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5c5a:	3024      	adds	r0, #36	; 0x24
   d5c5c:	9101      	str	r1, [sp, #4]
   d5c5e:	f000 f97b 	bl	d5f58 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d5c62:	9901      	ldr	r1, [sp, #4]
   d5c64:	2800      	cmp	r0, #0
   d5c66:	d1cb      	bne.n	d5c00 <_ZN7FatFile4readEPvj+0xf6>
   d5c68:	e760      	b.n	d5b2c <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d5c6a:	b003      	add	sp, #12
   d5c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5c70 <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d5c70:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d5c72:	2201      	movs	r2, #1
   d5c74:	f10d 0107 	add.w	r1, sp, #7
   d5c78:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d5c7a:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d5c7c:	6905      	ldr	r5, [r0, #16]
   d5c7e:	f7ff ff44 	bl	d5b0a <_ZN7FatFile4readEPvj>
   d5c82:	2801      	cmp	r0, #1
   d5c84:	bf05      	ittet	eq
   d5c86:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d5c8a:	6166      	streq	r6, [r4, #20]
   d5c8c:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = pos->cluster;
   d5c90:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d5c92:	b002      	add	sp, #8
   d5c94:	bd70      	pop	{r4, r5, r6, pc}

000d5c96 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5c9a:	460e      	mov	r6, r1
   d5c9c:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d5c9e:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5ca0:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d5ca2:	2900      	cmp	r1, #0
   d5ca4:	d039      	beq.n	d5d1a <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d5ca6:	6945      	ldr	r5, [r0, #20]
   d5ca8:	42b5      	cmp	r5, r6
   d5caa:	d03a      	beq.n	d5d22 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d5cac:	b90e      	cbnz	r6, d5cb2 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d5cae:	6106      	str	r6, [r0, #16]
    goto done;
   d5cb0:	e031      	b.n	d5d16 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d5cb2:	070b      	lsls	r3, r1, #28
   d5cb4:	d503      	bpl.n	d5cbe <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d5cb6:	69c3      	ldr	r3, [r0, #28]
   d5cb8:	429e      	cmp	r6, r3
   d5cba:	d82e      	bhi.n	d5d1a <_ZN7FatFile7seekSetEm+0x84>
   d5cbc:	e007      	b.n	d5cce <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d5cbe:	0688      	lsls	r0, r1, #26
   d5cc0:	d505      	bpl.n	d5cce <_ZN7FatFile7seekSetEm+0x38>
   d5cc2:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d5cc4:	891b      	ldrh	r3, [r3, #8]
   d5cc6:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d5cca:	d826      	bhi.n	d5d1a <_ZN7FatFile7seekSetEm+0x84>
   d5ccc:	e023      	b.n	d5d16 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5cce:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d5cd2:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d5cd6:	1e6a      	subs	r2, r5, #1
   d5cd8:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5cdc:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5cde:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5ce0:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d5ce2:	429a      	cmp	r2, r3
   d5ce4:	d800      	bhi.n	d5ce8 <_ZN7FatFile7seekSetEm+0x52>
   d5ce6:	b94d      	cbnz	r5, d5cfc <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5ce8:	064a      	lsls	r2, r1, #25
   d5cea:	bf4c      	ite	mi
   d5cec:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d5cf0:	6a22      	ldrpl	r2, [r4, #32]
   d5cf2:	6122      	str	r2, [r4, #16]
   d5cf4:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5cf6:	f104 0810 	add.w	r8, r4, #16
   d5cfa:	e00a      	b.n	d5d12 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d5cfc:	1a9b      	subs	r3, r3, r2
   d5cfe:	e7f9      	b.n	d5cf4 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5d00:	4642      	mov	r2, r8
   d5d02:	6921      	ldr	r1, [r4, #16]
   d5d04:	68a0      	ldr	r0, [r4, #8]
   d5d06:	f000 f978 	bl	d5ffa <_ZN9FatVolume6fatGetEmPm>
   d5d0a:	2800      	cmp	r0, #0
   d5d0c:	f105 35ff 	add.w	r5, r5, #4294967295
   d5d10:	dd03      	ble.n	d5d1a <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d5d12:	2d00      	cmp	r5, #0
   d5d14:	d1f4      	bne.n	d5d00 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d5d16:	6166      	str	r6, [r4, #20]
   d5d18:	e003      	b.n	d5d22 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d5d1a:	6127      	str	r7, [r4, #16]
  return false;
   d5d1c:	2000      	movs	r0, #0
   d5d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d5d22:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d5d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5d28 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5d28:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d5d2a:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5d2c:	4604      	mov	r4, r0
  if (!isOpen()) {
   d5d2e:	b90b      	cbnz	r3, d5d34 <_ZN7FatFile4syncEv+0xc>
    return true;
   d5d30:	2001      	movs	r0, #1
   d5d32:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d5d34:	7883      	ldrb	r3, [r0, #2]
   d5d36:	075a      	lsls	r2, r3, #29
   d5d38:	d523      	bpl.n	d5d82 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d5d3a:	2101      	movs	r1, #1
   d5d3c:	f7ff fed6 	bl	d5aec <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5d40:	4605      	mov	r5, r0
   d5d42:	b928      	cbnz	r0, d5d50 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d5d44:	7863      	ldrb	r3, [r4, #1]
   d5d46:	f043 0301 	orr.w	r3, r3, #1
   d5d4a:	7063      	strb	r3, [r4, #1]
  return false;
   d5d4c:	2000      	movs	r0, #0
   d5d4e:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5d50:	7803      	ldrb	r3, [r0, #0]
   d5d52:	2be5      	cmp	r3, #229	; 0xe5
   d5d54:	d0f6      	beq.n	d5d44 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d5d56:	7823      	ldrb	r3, [r4, #0]
   d5d58:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d5d5a:	bf44      	itt	mi
   d5d5c:	69e3      	ldrmi	r3, [r4, #28]
   d5d5e:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d5d60:	8c23      	ldrh	r3, [r4, #32]
   d5d62:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d5d64:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5d66:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d5d68:	4b09      	ldr	r3, [pc, #36]	; (d5d90 <_ZN7FatFile4syncEv+0x68>)
   d5d6a:	681b      	ldr	r3, [r3, #0]
   d5d6c:	b12b      	cbz	r3, d5d7a <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d5d6e:	f100 0116 	add.w	r1, r0, #22
   d5d72:	3018      	adds	r0, #24
   d5d74:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d5d76:	8b2b      	ldrh	r3, [r5, #24]
   d5d78:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d5d7a:	78a3      	ldrb	r3, [r4, #2]
   d5d7c:	f023 0304 	bic.w	r3, r3, #4
   d5d80:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d5d82:	68a0      	ldr	r0, [r4, #8]
   d5d84:	f7ff fe93 	bl	d5aae <_ZN9FatVolume9cacheSyncEv>
   d5d88:	2800      	cmp	r0, #0
   d5d8a:	d0db      	beq.n	d5d44 <_ZN7FatFile4syncEv+0x1c>
   d5d8c:	e7d0      	b.n	d5d30 <_ZN7FatFile4syncEv+0x8>
   d5d8e:	bf00      	nop
   d5d90:	2003e144 	.word	0x2003e144

000d5d94 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5d98:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5d9a:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5d9c:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5d9e:	4604      	mov	r4, r0
   d5da0:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5da2:	d508      	bpl.n	d5db6 <_ZN7FatFile5writeEPKvj+0x22>
   d5da4:	7883      	ldrb	r3, [r0, #2]
   d5da6:	079a      	lsls	r2, r3, #30
   d5da8:	d505      	bpl.n	d5db6 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d5daa:	071b      	lsls	r3, r3, #28
   d5dac:	d50b      	bpl.n	d5dc6 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d5dae:	69e1      	ldr	r1, [r4, #28]
   d5db0:	f7ff ff71 	bl	d5c96 <_ZN7FatFile7seekSetEm>
   d5db4:	b938      	cbnz	r0, d5dc6 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d5db6:	7863      	ldrb	r3, [r4, #1]
   d5db8:	f043 0301 	orr.w	r3, r3, #1
   d5dbc:	7063      	strb	r3, [r4, #1]
  return -1;
   d5dbe:	f04f 30ff 	mov.w	r0, #4294967295
   d5dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d5dc6:	6963      	ldr	r3, [r4, #20]
   d5dc8:	43db      	mvns	r3, r3
   d5dca:	4598      	cmp	r8, r3
   d5dcc:	d8f3      	bhi.n	d5db6 <_ZN7FatFile5writeEPKvj+0x22>
   d5dce:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5dd0:	f04f 0a00 	mov.w	sl, #0
   d5dd4:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d5dd6:	2e00      	cmp	r6, #0
   d5dd8:	f000 8081 	beq.w	d5ede <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d5ddc:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5dde:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5de0:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d5de4:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5de8:	d11c      	bne.n	d5e24 <_ZN7FatFile5writeEPKvj+0x90>
   d5dea:	b9df      	cbnz	r7, d5e24 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d5dec:	6921      	ldr	r1, [r4, #16]
   d5dee:	b171      	cbz	r1, d5e0e <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5df0:	f104 0210 	add.w	r2, r4, #16
   d5df4:	f000 f901 	bl	d5ffa <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d5df8:	2800      	cmp	r0, #0
   d5dfa:	dbdc      	blt.n	d5db6 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d5dfc:	f040 808e 	bne.w	d5f1c <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d5e00:	4620      	mov	r0, r4
   d5e02:	f7ff fe69 	bl	d5ad8 <_ZN7FatFile10addClusterEv>
   d5e06:	2800      	cmp	r0, #0
   d5e08:	f040 8088 	bne.w	d5f1c <_ZN7FatFile5writeEPKvj+0x188>
   d5e0c:	e7d3      	b.n	d5db6 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d5e0e:	6a23      	ldr	r3, [r4, #32]
   d5e10:	b93b      	cbnz	r3, d5e22 <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d5e12:	4620      	mov	r0, r4
   d5e14:	f7ff fe60 	bl	d5ad8 <_ZN7FatFile10addClusterEv>
   d5e18:	2800      	cmp	r0, #0
   d5e1a:	d0cc      	beq.n	d5db6 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d5e1c:	6923      	ldr	r3, [r4, #16]
   d5e1e:	6223      	str	r3, [r4, #32]
   d5e20:	e000      	b.n	d5e24 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d5e22:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5e24:	6921      	ldr	r1, [r4, #16]
   d5e26:	68a0      	ldr	r0, [r4, #8]
   d5e28:	f000 f8e1 	bl	d5fee <_ZNK9FatVolume17clusterFirstBlockEm>
   d5e2c:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d5e2e:	b917      	cbnz	r7, d5e36 <_ZN7FatFile5writeEPKvj+0xa2>
   d5e30:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5e34:	d221      	bcs.n	d5e7a <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d5e36:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d5e3a:	42b5      	cmp	r5, r6
   d5e3c:	bf28      	it	cs
   d5e3e:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d5e40:	b937      	cbnz	r7, d5e50 <_ZN7FatFile5writeEPKvj+0xbc>
   d5e42:	6963      	ldr	r3, [r4, #20]
   d5e44:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d5e46:	4293      	cmp	r3, r2
   d5e48:	bf34      	ite	cc
   d5e4a:	2201      	movcc	r2, #1
   d5e4c:	2205      	movcs	r2, #5
   d5e4e:	e000      	b.n	d5e52 <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d5e50:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5e52:	68a0      	ldr	r0, [r4, #8]
   d5e54:	3024      	adds	r0, #36	; 0x24
   d5e56:	f000 f8a6 	bl	d5fa6 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d5e5a:	2800      	cmp	r0, #0
   d5e5c:	d0ab      	beq.n	d5db6 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d5e5e:	4438      	add	r0, r7
   d5e60:	462a      	mov	r2, r5
   d5e62:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d5e64:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d5e66:	f003 fc57 	bl	d9718 <memcpy>
      if (512 == (n + blockOffset)) {
   d5e6a:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d5e6e:	d130      	bne.n	d5ed2 <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5e70:	68a0      	ldr	r0, [r4, #8]
   d5e72:	3024      	adds	r0, #36	; 0x24
   d5e74:	f000 f870 	bl	d5f58 <_ZN8FatCache4syncEv>
   d5e78:	e017      	b.n	d5eaa <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d5e7a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5e7e:	68a0      	ldr	r0, [r4, #8]
   d5e80:	d315      	bcc.n	d5eae <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d5e82:	7902      	ldrb	r2, [r0, #4]
   d5e84:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d5e86:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d5e88:	b2d2      	uxtb	r2, r2
   d5e8a:	4293      	cmp	r3, r2
   d5e8c:	bf28      	it	cs
   d5e8e:	4613      	movcs	r3, r2
   d5e90:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5e92:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d5e94:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5e98:	d302      	bcc.n	d5ea0 <_ZN7FatFile5writeEPKvj+0x10c>
   d5e9a:	441a      	add	r2, r3
   d5e9c:	4291      	cmp	r1, r2
   d5e9e:	d337      	bcc.n	d5f10 <_ZN7FatFile5writeEPKvj+0x17c>
   d5ea0:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d5ea2:	464a      	mov	r2, r9
   d5ea4:	6838      	ldr	r0, [r7, #0]
   d5ea6:	f000 fb0c 	bl	d64c2 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d5eaa:	b990      	cbnz	r0, d5ed2 <_ZN7FatFile5writeEPKvj+0x13e>
   d5eac:	e783      	b.n	d5db6 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d5eae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5eb0:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5eb2:	bf02      	ittt	eq
   d5eb4:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5eb8:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5ebc:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d5ebe:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5ec0:	464a      	mov	r2, r9
   d5ec2:	6818      	ldr	r0, [r3, #0]
   d5ec4:	f000 fa8b 	bl	d63de <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d5ec8:	2800      	cmp	r0, #0
   d5eca:	f43f af74 	beq.w	d5db6 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d5ece:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d5ed2:	6963      	ldr	r3, [r4, #20]
   d5ed4:	442b      	add	r3, r5
   d5ed6:	6163      	str	r3, [r4, #20]
    src += n;
   d5ed8:	44a9      	add	r9, r5
    nToWrite -= n;
   d5eda:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d5edc:	e77a      	b.n	d5dd4 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d5ede:	69e2      	ldr	r2, [r4, #28]
   d5ee0:	4293      	cmp	r3, r2
   d5ee2:	d901      	bls.n	d5ee8 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d5ee4:	61e3      	str	r3, [r4, #28]
   d5ee6:	e002      	b.n	d5eee <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d5ee8:	4b0f      	ldr	r3, [pc, #60]	; (d5f28 <_ZN7FatFile5writeEPKvj+0x194>)
   d5eea:	681b      	ldr	r3, [r3, #0]
   d5eec:	b11b      	cbz	r3, d5ef6 <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d5eee:	78a3      	ldrb	r3, [r4, #2]
   d5ef0:	f043 0304 	orr.w	r3, r3, #4
   d5ef4:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d5ef6:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d5efa:	2b00      	cmp	r3, #0
   d5efc:	db02      	blt.n	d5f04 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d5efe:	4640      	mov	r0, r8
   d5f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d5f04:	4620      	mov	r0, r4
   d5f06:	f7ff ff0f 	bl	d5d28 <_ZN7FatFile4syncEv>
   d5f0a:	2800      	cmp	r0, #0
   d5f0c:	d1f7      	bne.n	d5efe <_ZN7FatFile5writeEPKvj+0x16a>
   d5f0e:	e752      	b.n	d5db6 <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5f10:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5f14:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5f18:	62c2      	str	r2, [r0, #44]	; 0x2c
   d5f1a:	e7c1      	b.n	d5ea0 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5f1c:	6921      	ldr	r1, [r4, #16]
   d5f1e:	68a0      	ldr	r0, [r4, #8]
   d5f20:	f000 f865 	bl	d5fee <_ZNK9FatVolume17clusterFirstBlockEm>
   d5f24:	4601      	mov	r1, r0
   d5f26:	e783      	b.n	d5e30 <_ZN7FatFile5writeEPKvj+0x9c>
   d5f28:	2003e144 	.word	0x2003e144

000d5f2c <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d5f2c:	f000 be82 	b.w	d6c34 <HAL_Pin_Map>

000d5f30 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5f30:	b570      	push	{r4, r5, r6, lr}
   d5f32:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5f34:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5f36:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5f38:	b149      	cbz	r1, d5f4e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5f3a:	f003 fc29 	bl	d9790 <strlen>
   d5f3e:	682b      	ldr	r3, [r5, #0]
   d5f40:	4602      	mov	r2, r0
   d5f42:	4621      	mov	r1, r4
   d5f44:	4628      	mov	r0, r5
   d5f46:	68db      	ldr	r3, [r3, #12]
    }
   d5f48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5f4c:	4718      	bx	r3
    }
   d5f4e:	bd70      	pop	{r4, r5, r6, pc}

000d5f50 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d5f50:	f000 be70 	b.w	d6c34 <HAL_Pin_Map>

000d5f54 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d5f54:	f000 be6e 	b.w	d6c34 <HAL_Pin_Map>

000d5f58 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5f58:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d5f5a:	7803      	ldrb	r3, [r0, #0]
   d5f5c:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5f5e:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d5f60:	d51e      	bpl.n	d5fa0 <_ZN8FatCache4syncEv+0x48>
   d5f62:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5f64:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d5f66:	f100 060c 	add.w	r6, r0, #12
   d5f6a:	4632      	mov	r2, r6
   d5f6c:	6818      	ldr	r0, [r3, #0]
   d5f6e:	f000 fa36 	bl	d63de <_ZN9SdSpiCard10writeBlockEmPKh>
   d5f72:	4605      	mov	r5, r0
   d5f74:	b908      	cbnz	r0, d5f7a <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d5f76:	2500      	movs	r5, #0
   d5f78:	e013      	b.n	d5fa2 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d5f7a:	7823      	ldrb	r3, [r4, #0]
   d5f7c:	079b      	lsls	r3, r3, #30
   d5f7e:	d404      	bmi.n	d5f8a <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d5f80:	7823      	ldrb	r3, [r4, #0]
   d5f82:	f023 0301 	bic.w	r3, r3, #1
   d5f86:	7023      	strb	r3, [r4, #0]
   d5f88:	e00b      	b.n	d5fa2 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d5f8a:	6863      	ldr	r3, [r4, #4]
   d5f8c:	68a0      	ldr	r0, [r4, #8]
   d5f8e:	6919      	ldr	r1, [r3, #16]
   d5f90:	4632      	mov	r2, r6
   d5f92:	4401      	add	r1, r0
   d5f94:	6818      	ldr	r0, [r3, #0]
   d5f96:	f000 fa22 	bl	d63de <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d5f9a:	2800      	cmp	r0, #0
   d5f9c:	d1f0      	bne.n	d5f80 <_ZN8FatCache4syncEv+0x28>
   d5f9e:	e7ea      	b.n	d5f76 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d5fa0:	2501      	movs	r5, #1

fail:
  return false;
}
   d5fa2:	4628      	mov	r0, r5
   d5fa4:	bd70      	pop	{r4, r5, r6, pc}

000d5fa6 <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d5fa6:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d5fa8:	6883      	ldr	r3, [r0, #8]
   d5faa:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d5fac:	4604      	mov	r4, r0
   d5fae:	460e      	mov	r6, r1
   d5fb0:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d5fb2:	d014      	beq.n	d5fde <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d5fb4:	f7ff ffd0 	bl	d5f58 <_ZN8FatCache4syncEv>
   d5fb8:	b908      	cbnz	r0, d5fbe <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d5fba:	2000      	movs	r0, #0
   d5fbc:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d5fbe:	076b      	lsls	r3, r5, #29
   d5fc0:	d503      	bpl.n	d5fca <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d5fc2:	2300      	movs	r3, #0
   d5fc4:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d5fc6:	60a6      	str	r6, [r4, #8]
   d5fc8:	e009      	b.n	d5fde <_ZN8FatCache4readEmh+0x38>
   d5fca:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d5fcc:	f104 020c 	add.w	r2, r4, #12
   d5fd0:	4631      	mov	r1, r6
   d5fd2:	6818      	ldr	r0, [r3, #0]
   d5fd4:	f000 f979 	bl	d62ca <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d5fd8:	2800      	cmp	r0, #0
   d5fda:	d1f2      	bne.n	d5fc2 <_ZN8FatCache4readEmh+0x1c>
   d5fdc:	e7ed      	b.n	d5fba <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d5fde:	7823      	ldrb	r3, [r4, #0]
   d5fe0:	4620      	mov	r0, r4
   d5fe2:	f005 0503 	and.w	r5, r5, #3
   d5fe6:	431d      	orrs	r5, r3
   d5fe8:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d5fec:	bd70      	pop	{r4, r5, r6, pc}

000d5fee <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d5fee:	7983      	ldrb	r3, [r0, #6]
   d5ff0:	6940      	ldr	r0, [r0, #20]
   d5ff2:	3902      	subs	r1, #2
   d5ff4:	4099      	lsls	r1, r3
}
   d5ff6:	4408      	add	r0, r1
   d5ff8:	4770      	bx	lr

000d5ffa <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5ffa:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d5ffc:	b570      	push	{r4, r5, r6, lr}
   d5ffe:	4605      	mov	r5, r0
   d6000:	460c      	mov	r4, r1
   d6002:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6004:	d802      	bhi.n	d600c <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d6006:	f04f 30ff 	mov.w	r0, #4294967295
   d600a:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d600c:	69c3      	ldr	r3, [r0, #28]
   d600e:	4299      	cmp	r1, r3
   d6010:	d8f9      	bhi.n	d6006 <_ZN9FatVolume6fatGetEmPm+0xc>
   d6012:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d6014:	2b20      	cmp	r3, #32
   d6016:	d110      	bne.n	d603a <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d6018:	6981      	ldr	r1, [r0, #24]
   d601a:	2202      	movs	r2, #2
   d601c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d6020:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d6024:	f7ff ffbf 	bl	d5fa6 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d6028:	2800      	cmp	r0, #0
   d602a:	d0ec      	beq.n	d6006 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d602c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d6030:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d6034:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d6038:	e00f      	b.n	d605a <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d603a:	2b10      	cmp	r3, #16
   d603c:	d1e3      	bne.n	d6006 <_ZN9FatVolume6fatGetEmPm+0xc>
   d603e:	6983      	ldr	r3, [r0, #24]
   d6040:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d6044:	2202      	movs	r2, #2
   d6046:	4419      	add	r1, r3
   d6048:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d604c:	f7ff ffab 	bl	d5fa6 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d6050:	2800      	cmp	r0, #0
   d6052:	d0d8      	beq.n	d6006 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d6054:	b2e4      	uxtb	r4, r4
   d6056:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d605a:	69ea      	ldr	r2, [r5, #28]
   d605c:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d605e:	bf9a      	itte	ls
   d6060:	6033      	strls	r3, [r6, #0]
  return 1;
   d6062:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d6064:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d6066:	bd70      	pop	{r4, r5, r6, pc}

000d6068 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6068:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d606a:	b538      	push	{r3, r4, r5, lr}
   d606c:	460c      	mov	r4, r1
   d606e:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6070:	d801      	bhi.n	d6076 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d6072:	2000      	movs	r0, #0
   d6074:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6076:	69c3      	ldr	r3, [r0, #28]
   d6078:	4299      	cmp	r1, r3
   d607a:	d8fa      	bhi.n	d6072 <_ZN9FatVolume6fatPutEmm+0xa>
   d607c:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d607e:	2b20      	cmp	r3, #32
   d6080:	d10e      	bne.n	d60a0 <_ZN9FatVolume6fatPutEmm+0x38>
   d6082:	6981      	ldr	r1, [r0, #24]
   d6084:	2203      	movs	r2, #3
   d6086:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d608a:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d608e:	f7ff ff8a 	bl	d5fa6 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d6092:	2800      	cmp	r0, #0
   d6094:	d0ed      	beq.n	d6072 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d6096:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d609a:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d609e:	e00f      	b.n	d60c0 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d60a0:	2b10      	cmp	r3, #16
   d60a2:	d1e6      	bne.n	d6072 <_ZN9FatVolume6fatPutEmm+0xa>
   d60a4:	6983      	ldr	r3, [r0, #24]
   d60a6:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d60aa:	2203      	movs	r2, #3
   d60ac:	4419      	add	r1, r3
   d60ae:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d60b2:	f7ff ff78 	bl	d5fa6 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d60b6:	2800      	cmp	r0, #0
   d60b8:	d0db      	beq.n	d6072 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d60ba:	b2e4      	uxtb	r4, r4
   d60bc:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d60c0:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d60c2:	bd38      	pop	{r3, r4, r5, pc}

000d60c4 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d60c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d60c8:	68c4      	ldr	r4, [r0, #12]
   d60ca:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d60cc:	4605      	mov	r5, r0
   d60ce:	460e      	mov	r6, r1
   d60d0:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d60d2:	d207      	bcs.n	d60e4 <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d60d4:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d60d6:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d60d8:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d60da:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d60dc:	429c      	cmp	r4, r3
   d60de:	d903      	bls.n	d60e8 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d60e0:	b9cf      	cbnz	r7, d6116 <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d60e2:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d60e4:	2701      	movs	r7, #1
   d60e6:	e7f7      	b.n	d60d8 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d60e8:	42a6      	cmp	r6, r4
   d60ea:	d014      	beq.n	d6116 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d60ec:	aa01      	add	r2, sp, #4
   d60ee:	4621      	mov	r1, r4
   d60f0:	4628      	mov	r0, r5
   d60f2:	f7ff ff82 	bl	d5ffa <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d60f6:	2800      	cmp	r0, #0
   d60f8:	db0d      	blt.n	d6116 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d60fa:	d0ed      	beq.n	d60d8 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d60fc:	9b01      	ldr	r3, [sp, #4]
   d60fe:	2b00      	cmp	r3, #0
   d6100:	d1ea      	bne.n	d60d8 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d6102:	b107      	cbz	r7, d6106 <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d6104:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d6106:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d610a:	4621      	mov	r1, r4
   d610c:	4628      	mov	r0, r5
   d610e:	f7ff ffab 	bl	d6068 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d6112:	4607      	mov	r7, r0
   d6114:	b908      	cbnz	r0, d611a <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d6116:	2700      	movs	r7, #0
   d6118:	e00b      	b.n	d6132 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d611a:	b916      	cbnz	r6, d6122 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d611c:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d6120:	e007      	b.n	d6132 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d6122:	4622      	mov	r2, r4
   d6124:	4631      	mov	r1, r6
   d6126:	4628      	mov	r0, r5
   d6128:	f7ff ff9e 	bl	d6068 <_ZN9FatVolume6fatPutEmm>
   d612c:	2800      	cmp	r0, #0
   d612e:	d1f5      	bne.n	d611c <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d6130:	e7f1      	b.n	d6116 <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d6132:	4638      	mov	r0, r7
   d6134:	b002      	add	sp, #8
   d6136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d613a <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d613a:	f000 bd7b 	b.w	d6c34 <HAL_Pin_Map>

000d613e <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d613e:	f000 bd79 	b.w	d6c34 <HAL_Pin_Map>

000d6142 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d6142:	f000 bd77 	b.w	d6c34 <HAL_Pin_Map>
	...

000d6148 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d6148:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d614a:	4c0e      	ldr	r4, [pc, #56]	; (d6184 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d614c:	460e      	mov	r6, r1
   d614e:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d6150:	f000 fe30 	bl	d6db4 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d6154:	6823      	ldr	r3, [r4, #0]
   d6156:	1ac0      	subs	r0, r0, r3
   d6158:	4b0b      	ldr	r3, [pc, #44]	; (d6188 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d615a:	4298      	cmp	r0, r3
   d615c:	d908      	bls.n	d6170 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d615e:	f000 fe31 	bl	d6dc4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6162:	4b0a      	ldr	r3, [pc, #40]	; (d618c <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d6164:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d6166:	f001 f871 	bl	d724c <spark_process>
   d616a:	f000 fe23 	bl	d6db4 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d616e:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6170:	f000 fe28 	bl	d6dc4 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d6174:	b280      	uxth	r0, r0
   d6176:	1b80      	subs	r0, r0, r6
}
   d6178:	42a8      	cmp	r0, r5
   d617a:	bfd4      	ite	le
   d617c:	2000      	movle	r0, #0
   d617e:	2001      	movgt	r0, #1
   d6180:	bd70      	pop	{r4, r5, r6, pc}
   d6182:	bf00      	nop
   d6184:	2003e148 	.word	0x2003e148
   d6188:	000186a0 	.word	0x000186a0
   d618c:	2003e528 	.word	0x2003e528

000d6190 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d6190:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d6192:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d6194:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d6196:	b94d      	cbnz	r5, d61ac <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d6198:	6840      	ldr	r0, [r0, #4]
   d619a:	f000 f9b9 	bl	d6510 <_ZN14SdSpiAltDriver8activateEv>
   d619e:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d61a0:	4629      	mov	r1, r5
   d61a2:	7d18      	ldrb	r0, [r3, #20]
   d61a4:	f002 fc65 	bl	d8a72 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d61a8:	2301      	movs	r3, #1
   d61aa:	7223      	strb	r3, [r4, #8]
   d61ac:	bd38      	pop	{r3, r4, r5, pc}

000d61ae <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d61ae:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d61b0:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d61b2:	4604      	mov	r4, r0
  if (m_spiActive) {
   d61b4:	b16b      	cbz	r3, d61d2 <_ZN9SdSpiCard7spiStopEv+0x24>
   d61b6:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d61b8:	2101      	movs	r1, #1
   d61ba:	7d18      	ldrb	r0, [r3, #20]
   d61bc:	f002 fc59 	bl	d8a72 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d61c0:	21ff      	movs	r1, #255	; 0xff
   d61c2:	6860      	ldr	r0, [r4, #4]
   d61c4:	f000 f9c6 	bl	d6554 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d61c8:	6860      	ldr	r0, [r4, #4]
   d61ca:	f000 f9a5 	bl	d6518 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d61ce:	2300      	movs	r3, #0
   d61d0:	7223      	strb	r3, [r4, #8]
   d61d2:	bd10      	pop	{r4, pc}

000d61d4 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d61d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d61d6:	4604      	mov	r4, r0
   d61d8:	460d      	mov	r5, r1
   d61da:	4616      	mov	r6, r2
   d61dc:	f000 fdf2 	bl	d6dc4 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d61e0:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d61e2:	6860      	ldr	r0, [r4, #4]
   d61e4:	f000 f99b 	bl	d651e <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d61e8:	28ff      	cmp	r0, #255	; 0xff
   d61ea:	7260      	strb	r0, [r4, #9]
   d61ec:	d109      	bne.n	d6202 <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d61ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d61f2:	4639      	mov	r1, r7
   d61f4:	4620      	mov	r0, r4
   d61f6:	f7ff ffa7 	bl	d6148 <_ZN9SdSpiCard10isTimedOutEtt>
   d61fa:	2800      	cmp	r0, #0
   d61fc:	d0f1      	beq.n	d61e2 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d61fe:	2355      	movs	r3, #85	; 0x55
   d6200:	e00b      	b.n	d621a <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d6202:	28fe      	cmp	r0, #254	; 0xfe
   d6204:	d001      	beq.n	d620a <_ZN9SdSpiCard8readDataEPhj+0x36>
   d6206:	2350      	movs	r3, #80	; 0x50
   d6208:	e007      	b.n	d621a <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d620a:	4632      	mov	r2, r6
   d620c:	4629      	mov	r1, r5
   d620e:	6860      	ldr	r0, [r4, #4]
   d6210:	f000 f98a 	bl	d6528 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d6214:	7260      	strb	r0, [r4, #9]
   d6216:	b130      	cbz	r0, d6226 <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6218:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d621a:	4620      	mov	r0, r4
   d621c:	7023      	strb	r3, [r4, #0]
   d621e:	f7ff ffc6 	bl	d61ae <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6222:	2000      	movs	r0, #0
}
   d6224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6226:	6860      	ldr	r0, [r4, #4]
   d6228:	f000 f979 	bl	d651e <_ZN14SdSpiAltDriver7receiveEv>
   d622c:	6860      	ldr	r0, [r4, #4]
   d622e:	f000 f976 	bl	d651e <_ZN14SdSpiAltDriver7receiveEv>
   d6232:	2001      	movs	r0, #1
   d6234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6236 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d6236:	b570      	push	{r4, r5, r6, lr}
   d6238:	4604      	mov	r4, r0
   d623a:	460e      	mov	r6, r1
   d623c:	f000 fdc2 	bl	d6dc4 <HAL_Timer_Get_Milli_Seconds>
   d6240:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d6242:	4632      	mov	r2, r6
   d6244:	4629      	mov	r1, r5
   d6246:	4620      	mov	r0, r4
   d6248:	f7ff ff7e 	bl	d6148 <_ZN9SdSpiCard10isTimedOutEtt>
   d624c:	b930      	cbnz	r0, d625c <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d624e:	6860      	ldr	r0, [r4, #4]
   d6250:	f000 f965 	bl	d651e <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d6254:	28ff      	cmp	r0, #255	; 0xff
   d6256:	d1f4      	bne.n	d6242 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d6258:	2001      	movs	r0, #1
   d625a:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d625c:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d625e:	bd70      	pop	{r4, r5, r6, pc}

000d6260 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d6260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d6262:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d6264:	9201      	str	r2, [sp, #4]
   d6266:	4604      	mov	r4, r0
   d6268:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d626a:	b90b      	cbnz	r3, d6270 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d626c:	f7ff ff90 	bl	d6190 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d6270:	b125      	cbz	r5, d627c <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d6272:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d6276:	4620      	mov	r0, r4
   d6278:	f7ff ffdd 	bl	d6236 <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d627c:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d6280:	6860      	ldr	r0, [r4, #4]
   d6282:	f000 f967 	bl	d6554 <_ZN14SdSpiAltDriver4sendEh>
   d6286:	f10d 0607 	add.w	r6, sp, #7
   d628a:	f10d 0703 	add.w	r7, sp, #3
   d628e:	f816 1901 	ldrb.w	r1, [r6], #-1
   d6292:	6860      	ldr	r0, [r4, #4]
   d6294:	f000 f95e 	bl	d6554 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d6298:	42be      	cmp	r6, r7
   d629a:	d1f8      	bne.n	d628e <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d629c:	2d00      	cmp	r5, #0
   d629e:	bf0c      	ite	eq
   d62a0:	2195      	moveq	r1, #149	; 0x95
   d62a2:	2187      	movne	r1, #135	; 0x87
   d62a4:	6860      	ldr	r0, [r4, #4]
   d62a6:	f000 f955 	bl	d6554 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d62aa:	6860      	ldr	r0, [r4, #4]
   d62ac:	f000 f937 	bl	d651e <_ZN14SdSpiAltDriver7receiveEv>
   d62b0:	250b      	movs	r5, #11
   d62b2:	6860      	ldr	r0, [r4, #4]
   d62b4:	f000 f933 	bl	d651e <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d62b8:	0603      	lsls	r3, r0, #24
   d62ba:	7260      	strb	r0, [r4, #9]
   d62bc:	d503      	bpl.n	d62c6 <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d62be:	3d01      	subs	r5, #1
   d62c0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d62c4:	d1f5      	bne.n	d62b2 <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d62c6:	b003      	add	sp, #12
   d62c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d62ca <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d62ca:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d62cc:	7a83      	ldrb	r3, [r0, #10]
   d62ce:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d62d0:	bf18      	it	ne
   d62d2:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d62d4:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d62d6:	460a      	mov	r2, r1
   d62d8:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d62da:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d62dc:	f7ff ffc0 	bl	d6260 <_ZN9SdSpiCard11cardCommandEhm>
   d62e0:	b110      	cbz	r0, d62e8 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d62e2:	2330      	movs	r3, #48	; 0x30
   d62e4:	7023      	strb	r3, [r4, #0]
   d62e6:	e00b      	b.n	d6300 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d62e8:	4629      	mov	r1, r5
   d62ea:	f44f 7200 	mov.w	r2, #512	; 0x200
   d62ee:	4620      	mov	r0, r4
   d62f0:	f7ff ff70 	bl	d61d4 <_ZN9SdSpiCard8readDataEPhj>
   d62f4:	4605      	mov	r5, r0
   d62f6:	b118      	cbz	r0, d6300 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d62f8:	4620      	mov	r0, r4
   d62fa:	f7ff ff58 	bl	d61ae <_ZN9SdSpiCard7spiStopEv>
  return true;
   d62fe:	e003      	b.n	d6308 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d6300:	4620      	mov	r0, r4
   d6302:	f7ff ff54 	bl	d61ae <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6306:	2500      	movs	r5, #0
}
   d6308:	4628      	mov	r0, r5
   d630a:	bd38      	pop	{r3, r4, r5, pc}

000d630c <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d630c:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d630e:	7a83      	ldrb	r3, [r0, #10]
   d6310:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6312:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d6314:	bf18      	it	ne
   d6316:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d6318:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d631a:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d631c:	f7ff ffa0 	bl	d6260 <_ZN9SdSpiCard11cardCommandEhm>
   d6320:	b130      	cbz	r0, d6330 <_ZN9SdSpiCard9readStartEm+0x24>
   d6322:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d6324:	4620      	mov	r0, r4
   d6326:	7023      	strb	r3, [r4, #0]
   d6328:	f7ff ff41 	bl	d61ae <_ZN9SdSpiCard7spiStopEv>
  return false;
   d632c:	2000      	movs	r0, #0
   d632e:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d6330:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6332:	bd10      	pop	{r4, pc}

000d6334 <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d6334:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d6336:	2200      	movs	r2, #0
   d6338:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d633a:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d633c:	f7ff ff90 	bl	d6260 <_ZN9SdSpiCard11cardCommandEhm>
   d6340:	b130      	cbz	r0, d6350 <_ZN9SdSpiCard8readStopEv+0x1c>
   d6342:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d6344:	4620      	mov	r0, r4
   d6346:	7023      	strb	r3, [r4, #0]
   d6348:	f7ff ff31 	bl	d61ae <_ZN9SdSpiCard7spiStopEv>
  return false;
   d634c:	2000      	movs	r0, #0
   d634e:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d6350:	4620      	mov	r0, r4
   d6352:	f7ff ff2c 	bl	d61ae <_ZN9SdSpiCard7spiStopEv>
  return true;
   d6356:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6358:	bd10      	pop	{r4, pc}

000d635a <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d635a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d635c:	4605      	mov	r5, r0
   d635e:	4616      	mov	r6, r2
   d6360:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d6362:	f7ff ffd3 	bl	d630c <_ZN9SdSpiCard9readStartEm>
   d6366:	b198      	cbz	r0, d6390 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d6368:	2400      	movs	r4, #0
   d636a:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d636c:	429f      	cmp	r7, r3
   d636e:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d6372:	d908      	bls.n	d6386 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d6374:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6378:	4628      	mov	r0, r5
   d637a:	f7ff ff2b 	bl	d61d4 <_ZN9SdSpiCard8readDataEPhj>
   d637e:	3401      	adds	r4, #1
   d6380:	2800      	cmp	r0, #0
   d6382:	d1f2      	bne.n	d636a <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d6384:	e004      	b.n	d6390 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d6386:	4628      	mov	r0, r5
}
   d6388:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d638c:	f7ff bfd2 	b.w	d6334 <_ZN9SdSpiCard8readStopEv>
}
   d6390:	2000      	movs	r0, #0
   d6392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6394 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d6394:	b538      	push	{r3, r4, r5, lr}
   d6396:	4604      	mov	r4, r0
   d6398:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d639a:	6840      	ldr	r0, [r0, #4]
   d639c:	f000 f8da 	bl	d6554 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d63a0:	f44f 7200 	mov.w	r2, #512	; 0x200
   d63a4:	4629      	mov	r1, r5
   d63a6:	6860      	ldr	r0, [r4, #4]
   d63a8:	f000 f8d8 	bl	d655c <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d63ac:	21ff      	movs	r1, #255	; 0xff
   d63ae:	6860      	ldr	r0, [r4, #4]
   d63b0:	f000 f8d0 	bl	d6554 <_ZN14SdSpiAltDriver4sendEh>
   d63b4:	21ff      	movs	r1, #255	; 0xff
   d63b6:	6860      	ldr	r0, [r4, #4]
   d63b8:	f000 f8cc 	bl	d6554 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d63bc:	6860      	ldr	r0, [r4, #4]
   d63be:	f000 f8ae 	bl	d651e <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d63c2:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d63c4:	f000 001f 	and.w	r0, r0, #31
   d63c8:	2805      	cmp	r0, #5
   d63ca:	d006      	beq.n	d63da <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d63cc:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d63ce:	4620      	mov	r0, r4
   d63d0:	7023      	strb	r3, [r4, #0]
   d63d2:	f7ff feec 	bl	d61ae <_ZN9SdSpiCard7spiStopEv>
  return false;
   d63d6:	2000      	movs	r0, #0
   d63d8:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d63da:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d63dc:	bd38      	pop	{r3, r4, r5, pc}

000d63de <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d63de:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d63e0:	7a83      	ldrb	r3, [r0, #10]
   d63e2:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d63e4:	bf18      	it	ne
   d63e6:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d63e8:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d63ea:	460a      	mov	r2, r1
   d63ec:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d63ee:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d63f0:	f7ff ff36 	bl	d6260 <_ZN9SdSpiCard11cardCommandEhm>
   d63f4:	4606      	mov	r6, r0
   d63f6:	b108      	cbz	r0, d63fc <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d63f8:	2332      	movs	r3, #50	; 0x32
   d63fa:	e01d      	b.n	d6438 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d63fc:	462a      	mov	r2, r5
   d63fe:	21fe      	movs	r1, #254	; 0xfe
   d6400:	4620      	mov	r0, r4
   d6402:	f7ff ffc7 	bl	d6394 <_ZN9SdSpiCard9writeDataEhPKh>
   d6406:	b1c0      	cbz	r0, d643a <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6408:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d640c:	4620      	mov	r0, r4
   d640e:	f7ff ff12 	bl	d6236 <_ZN9SdSpiCard11waitNotBusyEt>
   d6412:	4605      	mov	r5, r0
   d6414:	b908      	cbnz	r0, d641a <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d6416:	235a      	movs	r3, #90	; 0x5a
   d6418:	e00e      	b.n	d6438 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d641a:	4632      	mov	r2, r6
   d641c:	210d      	movs	r1, #13
   d641e:	4620      	mov	r0, r4
   d6420:	f7ff ff1e 	bl	d6260 <_ZN9SdSpiCard11cardCommandEhm>
   d6424:	b938      	cbnz	r0, d6436 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6426:	6860      	ldr	r0, [r4, #4]
   d6428:	f000 f879 	bl	d651e <_ZN14SdSpiAltDriver7receiveEv>
   d642c:	b918      	cbnz	r0, d6436 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d642e:	4620      	mov	r0, r4
   d6430:	f7ff febd 	bl	d61ae <_ZN9SdSpiCard7spiStopEv>
  return true;
   d6434:	e005      	b.n	d6442 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6436:	2329      	movs	r3, #41	; 0x29
   d6438:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d643a:	4620      	mov	r0, r4
   d643c:	f7ff feb7 	bl	d61ae <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6440:	2500      	movs	r5, #0
}
   d6442:	4628      	mov	r0, r5
   d6444:	bd70      	pop	{r4, r5, r6, pc}

000d6446 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d6446:	b538      	push	{r3, r4, r5, lr}
   d6448:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d644a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d644e:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6450:	f7ff fef1 	bl	d6236 <_ZN9SdSpiCard11waitNotBusyEt>
   d6454:	b910      	cbnz	r0, d645c <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d6456:	235b      	movs	r3, #91	; 0x5b
   d6458:	7023      	strb	r3, [r4, #0]
   d645a:	e005      	b.n	d6468 <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d645c:	462a      	mov	r2, r5
   d645e:	21fc      	movs	r1, #252	; 0xfc
   d6460:	4620      	mov	r0, r4
   d6462:	f7ff ff97 	bl	d6394 <_ZN9SdSpiCard9writeDataEhPKh>
   d6466:	b918      	cbnz	r0, d6470 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6468:	4620      	mov	r0, r4
   d646a:	f7ff fea0 	bl	d61ae <_ZN9SdSpiCard7spiStopEv>
  return false;
   d646e:	2000      	movs	r0, #0
}
   d6470:	bd38      	pop	{r3, r4, r5, pc}

000d6472 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6472:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6474:	7a83      	ldrb	r3, [r0, #10]
   d6476:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6478:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d647a:	bf18      	it	ne
   d647c:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d647e:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6480:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d6482:	f7ff feed 	bl	d6260 <_ZN9SdSpiCard11cardCommandEhm>
   d6486:	b130      	cbz	r0, d6496 <_ZN9SdSpiCard10writeStartEm+0x24>
   d6488:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d648a:	4620      	mov	r0, r4
   d648c:	7023      	strb	r3, [r4, #0]
   d648e:	f7ff fe8e 	bl	d61ae <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6492:	2000      	movs	r0, #0
   d6494:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d6496:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6498:	bd10      	pop	{r4, pc}

000d649a <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d649a:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d649c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d64a0:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d64a2:	f7ff fec8 	bl	d6236 <_ZN9SdSpiCard11waitNotBusyEt>
   d64a6:	4605      	mov	r5, r0
   d64a8:	b120      	cbz	r0, d64b4 <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d64aa:	21fd      	movs	r1, #253	; 0xfd
   d64ac:	6860      	ldr	r0, [r4, #4]
   d64ae:	f000 f851 	bl	d6554 <_ZN14SdSpiAltDriver4sendEh>
   d64b2:	e001      	b.n	d64b8 <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d64b4:	2356      	movs	r3, #86	; 0x56
   d64b6:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d64b8:	4620      	mov	r0, r4
   d64ba:	f7ff fe78 	bl	d61ae <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d64be:	4628      	mov	r0, r5
   d64c0:	bd38      	pop	{r3, r4, r5, pc}

000d64c2 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d64c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d64c4:	4605      	mov	r5, r0
   d64c6:	4616      	mov	r6, r2
   d64c8:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d64ca:	f7ff ffd2 	bl	d6472 <_ZN9SdSpiCard10writeStartEm>
   d64ce:	b170      	cbz	r0, d64ee <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d64d0:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d64d2:	42bc      	cmp	r4, r7
   d64d4:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d64d8:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d64da:	d004      	beq.n	d64e6 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d64dc:	f7ff ffb3 	bl	d6446 <_ZN9SdSpiCard9writeDataEPKh>
   d64e0:	b128      	cbz	r0, d64ee <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d64e2:	3401      	adds	r4, #1
   d64e4:	e7f5      	b.n	d64d2 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d64e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d64ea:	f7ff bfd6 	b.w	d649a <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d64ee:	4628      	mov	r0, r5
   d64f0:	f7ff fe5d 	bl	d61ae <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d64f4:	2000      	movs	r0, #0
   d64f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d64f8 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d64f8:	f000 bb9c 	b.w	d6c34 <HAL_Pin_Map>

000d64fc <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d64fc:	f000 bb9a 	b.w	d6c34 <HAL_Pin_Map>

000d6500 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d6500:	f000 bb98 	b.w	d6c34 <HAL_Pin_Map>

000d6504 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d6504:	4b01      	ldr	r3, [pc, #4]	; (d650c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d6506:	2201      	movs	r2, #1
   d6508:	701a      	strb	r2, [r3, #0]
   d650a:	4770      	bx	lr
   d650c:	2003e14c 	.word	0x2003e14c

000d6510 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d6510:	1d01      	adds	r1, r0, #4
   d6512:	6800      	ldr	r0, [r0, #0]
   d6514:	f000 bf84 	b.w	d7420 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d6518 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d6518:	6800      	ldr	r0, [r0, #0]
   d651a:	f000 bf68 	b.w	d73ee <_ZN8SPIClass14endTransactionEv>

000d651e <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d651e:	21ff      	movs	r1, #255	; 0xff
   d6520:	6800      	ldr	r0, [r0, #0]
   d6522:	f001 b843 	b.w	d75ac <_ZN8SPIClass8transferEh>
	...

000d6528 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d6528:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d652a:	4b08      	ldr	r3, [pc, #32]	; (d654c <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d652c:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d652e:	2500      	movs	r5, #0
   d6530:	4c07      	ldr	r4, [pc, #28]	; (d6550 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d6532:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6534:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d6536:	4613      	mov	r3, r2
   d6538:	460a      	mov	r2, r1
   d653a:	4629      	mov	r1, r5
   d653c:	f001 f83c 	bl	d75b8 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d6540:	7823      	ldrb	r3, [r4, #0]
   d6542:	2b00      	cmp	r3, #0
   d6544:	d0fc      	beq.n	d6540 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d6546:	2000      	movs	r0, #0
   d6548:	b003      	add	sp, #12
   d654a:	bd30      	pop	{r4, r5, pc}
   d654c:	000d6505 	.word	0x000d6505
   d6550:	2003e14c 	.word	0x2003e14c

000d6554 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d6554:	6800      	ldr	r0, [r0, #0]
   d6556:	f001 b829 	b.w	d75ac <_ZN8SPIClass8transferEh>
	...

000d655c <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d655c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d655e:	4b07      	ldr	r3, [pc, #28]	; (d657c <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d6560:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6562:	2500      	movs	r5, #0
   d6564:	4c06      	ldr	r4, [pc, #24]	; (d6580 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d6566:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6568:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d656a:	4613      	mov	r3, r2
   d656c:	462a      	mov	r2, r5
   d656e:	f001 f823 	bl	d75b8 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d6572:	7823      	ldrb	r3, [r4, #0]
   d6574:	2b00      	cmp	r3, #0
   d6576:	d0fc      	beq.n	d6572 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d6578:	b003      	add	sp, #12
   d657a:	bd30      	pop	{r4, r5, pc}
   d657c:	000d6505 	.word	0x000d6505
   d6580:	2003e14c 	.word	0x2003e14c

000d6584 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d6584:	f000 bb56 	b.w	d6c34 <HAL_Pin_Map>

000d6588 <_ZN5RFM694isr0Ev>:
  }
  RSSI = readRSSI();
  //digitalWrite(4, 0);
}

void RFM69::isr0() { selfPointer->interruptHandler(); }
   d6588:	4b02      	ldr	r3, [pc, #8]	; (d6594 <_ZN5RFM694isr0Ev+0xc>)
   d658a:	6818      	ldr	r0, [r3, #0]
   d658c:	6803      	ldr	r3, [r0, #0]
   d658e:	681b      	ldr	r3, [r3, #0]
   d6590:	4718      	bx	r3
   d6592:	bf00      	nop
   d6594:	2003e164 	.word	0x2003e164

000d6598 <_ZN5RFM698unselectEv>:
  SPI1.setClockDivider(SPI_CLOCK_DIV16);
  digitalWrite(_slaveSelectPin, LOW);
}

/// UNselect the transceiver chip
void RFM69::unselect() {
   d6598:	b508      	push	{r3, lr}
  digitalWrite(_slaveSelectPin, HIGH);
   d659a:	2101      	movs	r1, #1
   d659c:	7900      	ldrb	r0, [r0, #4]
   d659e:	f002 fa68 	bl	d8a72 <digitalWrite>
  #ifndef PARTICLE
  SPCR = _SPCR;
  SPSR = _SPSR;
  #endif
  interrupts();
}
   d65a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  //restore SPI settings to what they were before talking to RFM69
  #ifndef PARTICLE
  SPCR = _SPCR;
  SPSR = _SPSR;
  #endif
  interrupts();
   d65a6:	f001 bc97 	b.w	d7ed8 <_Z10interruptsv>
	...

000d65ac <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d65ac:	b510      	push	{r4, lr}
        static SPIClass instance(Interface);
   d65ae:	4c08      	ldr	r4, [pc, #32]	; (d65d0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x24>)
   d65b0:	6823      	ldr	r3, [r4, #0]
   d65b2:	07db      	lsls	r3, r3, #31
   d65b4:	d40a      	bmi.n	d65cc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x20>
   d65b6:	4620      	mov	r0, r4
   d65b8:	f7fd fd75 	bl	d40a6 <__cxa_guard_acquire>
   d65bc:	b130      	cbz	r0, d65cc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x20>
   d65be:	2101      	movs	r1, #1
   d65c0:	4804      	ldr	r0, [pc, #16]	; (d65d4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x28>)
   d65c2:	f000 fed7 	bl	d7374 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d65c6:	4620      	mov	r0, r4
   d65c8:	f7fd fd72 	bl	d40b0 <__cxa_guard_release>
        return instance;
    }
   d65cc:	4801      	ldr	r0, [pc, #4]	; (d65d4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x28>)
   d65ce:	bd10      	pop	{r4, pc}
   d65d0:	2003e150 	.word	0x2003e150
   d65d4:	2003e154 	.word	0x2003e154

000d65d8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   d65d8:	b510      	push	{r4, lr}
   d65da:	4604      	mov	r4, r0
        return instance().transfer(data);
   d65dc:	f7ff ffe6 	bl	d65ac <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d65e0:	4621      	mov	r1, r4
    }
   d65e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d65e6:	f000 bfe1 	b.w	d75ac <_ZN8SPIClass8transferEh>

000d65ea <_ZN5RFM696selectEv>:
  SPI1.transfer(value);
  unselect();
}

/// Select the transceiver
void RFM69::select() {
   d65ea:	b510      	push	{r4, lr}
   d65ec:	4604      	mov	r4, r0
  noInterrupts();
   d65ee:	f001 fc71 	bl	d7ed4 <_Z12noInterruptsv>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d65f2:	f7ff ffdb 	bl	d65ac <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d65f6:	2100      	movs	r1, #0
   d65f8:	f000 fee8 	bl	d73cc <_ZN8SPIClass11setDataModeEh>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   d65fc:	f7ff ffd6 	bl	d65ac <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d6600:	2101      	movs	r1, #1
   d6602:	f000 fed2 	bl	d73aa <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
   d6606:	f7ff ffd1 	bl	d65ac <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d660a:	2118      	movs	r1, #24
   d660c:	f000 ffaa 	bl	d7564 <_ZN8SPIClass15setClockDividerEh>
  //set RFM69 SPI settings
  SPI1.setDataMode(SPI_MODE0);
  SPI1.setBitOrder(MSBFIRST);
  //SPI_CLOCK_DIV16; // 72MHz / 16 = 4.5MHz
  SPI1.setClockDivider(SPI_CLOCK_DIV16);
  digitalWrite(_slaveSelectPin, LOW);
   d6610:	7920      	ldrb	r0, [r4, #4]
   d6612:	2100      	movs	r1, #0
}
   d6614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  //set RFM69 SPI settings
  SPI1.setDataMode(SPI_MODE0);
  SPI1.setBitOrder(MSBFIRST);
  //SPI_CLOCK_DIV16; // 72MHz / 16 = 4.5MHz
  SPI1.setClockDivider(SPI_CLOCK_DIV16);
  digitalWrite(_slaveSelectPin, LOW);
   d6618:	f002 ba2b 	b.w	d8a72 <digitalWrite>

000d661c <_ZN5RFM697readRegEh>:
  rssi >>= 1;
  return rssi;
}

byte RFM69::readReg(byte addr)
{
   d661c:	b538      	push	{r3, r4, r5, lr}
   d661e:	460c      	mov	r4, r1
   d6620:	4605      	mov	r5, r0
  select();
   d6622:	f7ff ffe2 	bl	d65ea <_ZN5RFM696selectEv>
  SPI1.transfer(addr & 0x7F);
   d6626:	f004 007f 	and.w	r0, r4, #127	; 0x7f
   d662a:	f7ff ffd5 	bl	d65d8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  byte regval = SPI1.transfer(0);
   d662e:	2000      	movs	r0, #0
   d6630:	f7ff ffd2 	bl	d65d8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d6634:	4604      	mov	r4, r0
  unselect();
   d6636:	4628      	mov	r0, r5
   d6638:	f7ff ffae 	bl	d6598 <_ZN5RFM698unselectEv>
  return regval;
}
   d663c:	4620      	mov	r0, r4
   d663e:	bd38      	pop	{r3, r4, r5, pc}

000d6640 <_ZN5RFM698writeRegEhh>:

void RFM69::writeReg(byte addr, byte value)
{
   d6640:	b570      	push	{r4, r5, r6, lr}
   d6642:	460e      	mov	r6, r1
   d6644:	4615      	mov	r5, r2
   d6646:	4604      	mov	r4, r0
  select();
   d6648:	f7ff ffcf 	bl	d65ea <_ZN5RFM696selectEv>
  SPI1.transfer(addr | 0x80);
   d664c:	f046 0080 	orr.w	r0, r6, #128	; 0x80
   d6650:	f7ff ffc2 	bl	d65d8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  SPI1.transfer(value);
   d6654:	4628      	mov	r0, r5
   d6656:	f7ff ffbf 	bl	d65d8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  unselect();
   d665a:	4620      	mov	r0, r4
}
   d665c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void RFM69::writeReg(byte addr, byte value)
{
  select();
  SPI1.transfer(addr | 0x80);
  SPI1.transfer(value);
  unselect();
   d6660:	f7ff bf9a 	b.w	d6598 <_ZN5RFM698unselectEv>

000d6664 <_ZN5RFM6913setPowerLevelEh>:
}

// set output power: 0=min, 31=max
// this results in a "weaker" transmitted signal, and directly results in a lower RSSI at the receiver
void RFM69::setPowerLevel(byte powerLevel)
{
   d6664:	b510      	push	{r4, lr}
  _powerLevel = powerLevel;
   d6666:	7241      	strb	r1, [r0, #9]
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | (_powerLevel > 31 ? 31 : _powerLevel));
   d6668:	2111      	movs	r1, #17
}

// set output power: 0=min, 31=max
// this results in a "weaker" transmitted signal, and directly results in a lower RSSI at the receiver
void RFM69::setPowerLevel(byte powerLevel)
{
   d666a:	4604      	mov	r4, r0
  _powerLevel = powerLevel;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | (_powerLevel > 31 ? 31 : _powerLevel));
   d666c:	f7ff ffd6 	bl	d661c <_ZN5RFM697readRegEh>
   d6670:	7a62      	ldrb	r2, [r4, #9]
   d6672:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
   d6676:	2a1f      	cmp	r2, #31
   d6678:	bf94      	ite	ls
   d667a:	4302      	orrls	r2, r0
   d667c:	f040 021f 	orrhi.w	r2, r0, #31
   d6680:	2111      	movs	r1, #17
   d6682:	4620      	mov	r0, r4
}
   d6684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// set output power: 0=min, 31=max
// this results in a "weaker" transmitted signal, and directly results in a lower RSSI at the receiver
void RFM69::setPowerLevel(byte powerLevel)
{
  _powerLevel = powerLevel;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | (_powerLevel > 31 ? 31 : _powerLevel));
   d6688:	f7ff bfda 	b.w	d6640 <_ZN5RFM698writeRegEhh>

000d668c <_ZN5RFM698readRSSIEb>:
    unselect();
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
}

int RFM69::readRSSI(bool forceTrigger) {
   d668c:	b510      	push	{r4, lr}
   d668e:	4604      	mov	r4, r0
  int rssi = 0;
  if (forceTrigger)
   d6690:	b149      	cbz	r1, d66a6 <_ZN5RFM698readRSSIEb+0x1a>
  {
    //RSSI trigger not needed if DAGC is in continuous mode
    writeReg(REG_RSSICONFIG, RF_RSSI_START);
   d6692:	2201      	movs	r2, #1
   d6694:	2123      	movs	r1, #35	; 0x23
   d6696:	f7ff ffd3 	bl	d6640 <_ZN5RFM698writeRegEhh>
    while ((readReg(REG_RSSICONFIG) & RF_RSSI_DONE) == 0x00); // Wait for RSSI_Ready
   d669a:	2123      	movs	r1, #35	; 0x23
   d669c:	4620      	mov	r0, r4
   d669e:	f7ff ffbd 	bl	d661c <_ZN5RFM697readRegEh>
   d66a2:	0783      	lsls	r3, r0, #30
   d66a4:	d5f9      	bpl.n	d669a <_ZN5RFM698readRSSIEb+0xe>
  }
  rssi = -readReg(REG_RSSIVALUE);
   d66a6:	2124      	movs	r1, #36	; 0x24
   d66a8:	4620      	mov	r0, r4
   d66aa:	f7ff ffb7 	bl	d661c <_ZN5RFM697readRegEh>
   d66ae:	4240      	negs	r0, r0
  rssi >>= 1;
  return rssi;
   d66b0:	1040      	asrs	r0, r0, #1
}
   d66b2:	bd10      	pop	{r4, pc}

000d66b4 <_ZN5RFM6916setHighPowerRegsEb>:
  uint16_t baudRate = 32000000L / speedBPS;;
  
  writeReg(REG_BITRATEMSB, (baudRate >> 8) & 0xFF);
  writeReg(REG_BITRATELSB, (baudRate >> 0) & 0xFF);
}
void RFM69::setHighPowerRegs(bool onOff) {
   d66b4:	b538      	push	{r3, r4, r5, lr}
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
   d66b6:	2900      	cmp	r1, #0
   d66b8:	bf14      	ite	ne
   d66ba:	225d      	movne	r2, #93	; 0x5d
   d66bc:	2255      	moveq	r2, #85	; 0x55
   d66be:	460c      	mov	r4, r1
   d66c0:	215a      	movs	r1, #90	; 0x5a
  uint16_t baudRate = 32000000L / speedBPS;;
  
  writeReg(REG_BITRATEMSB, (baudRate >> 8) & 0xFF);
  writeReg(REG_BITRATELSB, (baudRate >> 0) & 0xFF);
}
void RFM69::setHighPowerRegs(bool onOff) {
   d66c2:	4605      	mov	r5, r0
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
   d66c4:	f7ff ffbc 	bl	d6640 <_ZN5RFM698writeRegEhh>
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
   d66c8:	2c00      	cmp	r4, #0
   d66ca:	4628      	mov	r0, r5
   d66cc:	bf14      	ite	ne
   d66ce:	227c      	movne	r2, #124	; 0x7c
   d66d0:	2270      	moveq	r2, #112	; 0x70
   d66d2:	215c      	movs	r1, #92	; 0x5c
}
   d66d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeReg(REG_BITRATEMSB, (baudRate >> 8) & 0xFF);
  writeReg(REG_BITRATELSB, (baudRate >> 0) & 0xFF);
}
void RFM69::setHighPowerRegs(bool onOff) {
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
   d66d8:	f7ff bfb2 	b.w	d6640 <_ZN5RFM698writeRegEhh>

000d66dc <_ZN5RFM697setModeEh>:
  writeReg(REG_FRFMID, freqHz >> 8);
  writeReg(REG_FRFLSB, freqHz);
}

void RFM69::setMode(byte newMode)
{
   d66dc:	b570      	push	{r4, r5, r6, lr}
	if (newMode == _mode) return; //TODO: can remove this?
   d66de:	4d28      	ldr	r5, [pc, #160]	; (d6780 <_ZN5RFM697setModeEh+0xa4>)
   d66e0:	782b      	ldrb	r3, [r5, #0]
   d66e2:	428b      	cmp	r3, r1
  writeReg(REG_FRFMID, freqHz >> 8);
  writeReg(REG_FRFLSB, freqHz);
}

void RFM69::setMode(byte newMode)
{
   d66e4:	4604      	mov	r4, r0
   d66e6:	460e      	mov	r6, r1
	if (newMode == _mode) return; //TODO: can remove this?
   d66e8:	d049      	beq.n	d677e <_ZN5RFM697setModeEh+0xa2>

	switch (newMode) {
   d66ea:	2904      	cmp	r1, #4
   d66ec:	d847      	bhi.n	d677e <_ZN5RFM697setModeEh+0xa2>
   d66ee:	e8df f001 	tbb	[pc, r1]
   d66f2:	2c34      	.short	0x2c34
   d66f4:	1224      	.short	0x1224
   d66f6:	03          	.byte	0x03
   d66f7:	00          	.byte	0x00
		case RF69_MODE_TX:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
   d66f8:	2101      	movs	r1, #1
   d66fa:	f7ff ff8f 	bl	d661c <_ZN5RFM697readRegEh>
   d66fe:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d6702:	f042 020c 	orr.w	r2, r2, #12
   d6706:	2101      	movs	r1, #1
   d6708:	4620      	mov	r0, r4
   d670a:	f7ff ff99 	bl	d6640 <_ZN5RFM698writeRegEhh>
      if (_isRFM69HW) setHighPowerRegs(true);
   d670e:	7aa3      	ldrb	r3, [r4, #10]
   d6710:	b363      	cbz	r3, d676c <_ZN5RFM697setModeEh+0x90>
   d6712:	2101      	movs	r1, #1
   d6714:	e00d      	b.n	d6732 <_ZN5RFM697setModeEh+0x56>
			break;
		case RF69_MODE_RX:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
   d6716:	2101      	movs	r1, #1
   d6718:	f7ff ff80 	bl	d661c <_ZN5RFM697readRegEh>
   d671c:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d6720:	f042 0210 	orr.w	r2, r2, #16
   d6724:	2101      	movs	r1, #1
   d6726:	4620      	mov	r0, r4
   d6728:	f7ff ff8a 	bl	d6640 <_ZN5RFM698writeRegEhh>
      if (_isRFM69HW) setHighPowerRegs(false);
   d672c:	7aa3      	ldrb	r3, [r4, #10]
   d672e:	b1eb      	cbz	r3, d676c <_ZN5RFM697setModeEh+0x90>
   d6730:	2100      	movs	r1, #0
   d6732:	4620      	mov	r0, r4
   d6734:	f7ff ffbe 	bl	d66b4 <_ZN5RFM6916setHighPowerRegsEb>
   d6738:	e018      	b.n	d676c <_ZN5RFM697setModeEh+0x90>
			break;
		case RF69_MODE_SYNTH:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SYNTHESIZER);
   d673a:	2101      	movs	r1, #1
   d673c:	f7ff ff6e 	bl	d661c <_ZN5RFM697readRegEh>
   d6740:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d6744:	f042 0208 	orr.w	r2, r2, #8
   d6748:	e00c      	b.n	d6764 <_ZN5RFM697setModeEh+0x88>
			break;
		case RF69_MODE_STANDBY:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_STANDBY);
   d674a:	2101      	movs	r1, #1
   d674c:	f7ff ff66 	bl	d661c <_ZN5RFM697readRegEh>
   d6750:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d6754:	f042 0204 	orr.w	r2, r2, #4
   d6758:	e004      	b.n	d6764 <_ZN5RFM697setModeEh+0x88>
			break;
		case RF69_MODE_SLEEP:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
   d675a:	2101      	movs	r1, #1
   d675c:	f7ff ff5e 	bl	d661c <_ZN5RFM697readRegEh>
   d6760:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d6764:	2101      	movs	r1, #1
   d6766:	4620      	mov	r0, r4
   d6768:	f7ff ff6a 	bl	d6640 <_ZN5RFM698writeRegEhh>
		default: return;
	}

	// we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
	while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // Wait for ModeReady
   d676c:	782b      	ldrb	r3, [r5, #0]
   d676e:	b92b      	cbnz	r3, d677c <_ZN5RFM697setModeEh+0xa0>
   d6770:	2127      	movs	r1, #39	; 0x27
   d6772:	4620      	mov	r0, r4
   d6774:	f7ff ff52 	bl	d661c <_ZN5RFM697readRegEh>
   d6778:	0603      	lsls	r3, r0, #24
   d677a:	d5f7      	bpl.n	d676c <_ZN5RFM697setModeEh+0x90>

	_mode = newMode;
   d677c:	702e      	strb	r6, [r5, #0]
   d677e:	bd70      	pop	{r4, r5, r6, pc}
   d6780:	2003e1a8 	.word	0x2003e1a8

000d6784 <_ZN5RFM6912receiveBeginEv>:
}

void RFM69::isr0() { selfPointer->interruptHandler(); }

void RFM69::receiveBegin() {
  DATALEN = 0;
   d6784:	4a15      	ldr	r2, [pc, #84]	; (d67dc <_ZN5RFM6912receiveBeginEv+0x58>)
   d6786:	2300      	movs	r3, #0
  //digitalWrite(4, 0);
}

void RFM69::isr0() { selfPointer->interruptHandler(); }

void RFM69::receiveBegin() {
   d6788:	b510      	push	{r4, lr}
  DATALEN = 0;
   d678a:	7013      	strb	r3, [r2, #0]
  SENDERID = 0;
   d678c:	4a14      	ldr	r2, [pc, #80]	; (d67e0 <_ZN5RFM6912receiveBeginEv+0x5c>)
   d678e:	7013      	strb	r3, [r2, #0]
  TARGETID = 0;
   d6790:	4a14      	ldr	r2, [pc, #80]	; (d67e4 <_ZN5RFM6912receiveBeginEv+0x60>)
   d6792:	7013      	strb	r3, [r2, #0]
  PAYLOADLEN = 0;
   d6794:	4a14      	ldr	r2, [pc, #80]	; (d67e8 <_ZN5RFM6912receiveBeginEv+0x64>)
   d6796:	7013      	strb	r3, [r2, #0]
  ACK_REQUESTED = 0;
   d6798:	4a14      	ldr	r2, [pc, #80]	; (d67ec <_ZN5RFM6912receiveBeginEv+0x68>)
   d679a:	7013      	strb	r3, [r2, #0]
  ACK_RECEIVED = 0;
   d679c:	4a14      	ldr	r2, [pc, #80]	; (d67f0 <_ZN5RFM6912receiveBeginEv+0x6c>)
   d679e:	7013      	strb	r3, [r2, #0]
  RSSI = 0;
   d67a0:	4a14      	ldr	r2, [pc, #80]	; (d67f4 <_ZN5RFM6912receiveBeginEv+0x70>)
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
   d67a2:	2128      	movs	r1, #40	; 0x28
  SENDERID = 0;
  TARGETID = 0;
  PAYLOADLEN = 0;
  ACK_REQUESTED = 0;
  ACK_RECEIVED = 0;
  RSSI = 0;
   d67a4:	6013      	str	r3, [r2, #0]
  //digitalWrite(4, 0);
}

void RFM69::isr0() { selfPointer->interruptHandler(); }

void RFM69::receiveBegin() {
   d67a6:	4604      	mov	r4, r0
  TARGETID = 0;
  PAYLOADLEN = 0;
  ACK_REQUESTED = 0;
  ACK_RECEIVED = 0;
  RSSI = 0;
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
   d67a8:	f7ff ff38 	bl	d661c <_ZN5RFM697readRegEh>
   d67ac:	0743      	lsls	r3, r0, #29
   d67ae:	d50a      	bpl.n	d67c6 <_ZN5RFM6912receiveBeginEv+0x42>
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
   d67b0:	213d      	movs	r1, #61	; 0x3d
   d67b2:	4620      	mov	r0, r4
   d67b4:	f7ff ff32 	bl	d661c <_ZN5RFM697readRegEh>
   d67b8:	f040 0204 	orr.w	r2, r0, #4
   d67bc:	b2d2      	uxtb	r2, r2
   d67be:	213d      	movs	r1, #61	; 0x3d
   d67c0:	4620      	mov	r0, r4
   d67c2:	f7ff ff3d 	bl	d6640 <_ZN5RFM698writeRegEhh>
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); //set DIO0 to "PAYLOADREADY" in receive mode
   d67c6:	4620      	mov	r0, r4
   d67c8:	2125      	movs	r1, #37	; 0x25
   d67ca:	2240      	movs	r2, #64	; 0x40
   d67cc:	f7ff ff38 	bl	d6640 <_ZN5RFM698writeRegEhh>
  setMode(RF69_MODE_RX);
   d67d0:	4620      	mov	r0, r4
   d67d2:	2103      	movs	r1, #3
}
   d67d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ACK_RECEIVED = 0;
  RSSI = 0;
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); //set DIO0 to "PAYLOADREADY" in receive mode
  setMode(RF69_MODE_RX);
   d67d8:	f7ff bf80 	b.w	d66dc <_ZN5RFM697setModeEh>
   d67dc:	2003e1a7 	.word	0x2003e1a7
   d67e0:	2003e162 	.word	0x2003e162
   d67e4:	2003e160 	.word	0x2003e160
   d67e8:	2003e168 	.word	0x2003e168
   d67ec:	2003e161 	.word	0x2003e161
   d67f0:	2003e169 	.word	0x2003e169
   d67f4:	2003e15c 	.word	0x2003e15c

000d67f8 <_ZN5RFM6911receiveDoneEv>:
}

bool RFM69::receiveDone() {
   d67f8:	b510      	push	{r4, lr}
   d67fa:	4604      	mov	r4, r0
// ATOMIC_BLOCK(ATOMIC_FORCEON)
// {
  noInterrupts(); //re-enabled in unselect() via setMode() or via receiveBegin()
   d67fc:	f001 fb6a 	bl	d7ed4 <_Z12noInterruptsv>
  if (_mode == RF69_MODE_RX && PAYLOADLEN>0)
   d6800:	4b0b      	ldr	r3, [pc, #44]	; (d6830 <_ZN5RFM6911receiveDoneEv+0x38>)
   d6802:	781a      	ldrb	r2, [r3, #0]
   d6804:	2a03      	cmp	r2, #3
   d6806:	d102      	bne.n	d680e <_ZN5RFM6911receiveDoneEv+0x16>
   d6808:	4a0a      	ldr	r2, [pc, #40]	; (d6834 <_ZN5RFM6911receiveDoneEv+0x3c>)
   d680a:	7812      	ldrb	r2, [r2, #0]
   d680c:	b952      	cbnz	r2, d6824 <_ZN5RFM6911receiveDoneEv+0x2c>
  {
    setMode(RF69_MODE_STANDBY); //enables interrupts
    return true;
  }
  else if (_mode == RF69_MODE_RX)  //already in RX no payload yet
   d680e:	781b      	ldrb	r3, [r3, #0]
   d6810:	2b03      	cmp	r3, #3
   d6812:	d102      	bne.n	d681a <_ZN5RFM6911receiveDoneEv+0x22>
  {
    interrupts(); //explicitly re-enable interrupts
   d6814:	f001 fb60 	bl	d7ed8 <_Z10interruptsv>
   d6818:	e002      	b.n	d6820 <_ZN5RFM6911receiveDoneEv+0x28>
    return false;
  }
  receiveBegin();
   d681a:	4620      	mov	r0, r4
   d681c:	f7ff ffb2 	bl	d6784 <_ZN5RFM6912receiveBeginEv>
  return false;
   d6820:	2000      	movs	r0, #0
   d6822:	bd10      	pop	{r4, pc}
// ATOMIC_BLOCK(ATOMIC_FORCEON)
// {
  noInterrupts(); //re-enabled in unselect() via setMode() or via receiveBegin()
  if (_mode == RF69_MODE_RX && PAYLOADLEN>0)
  {
    setMode(RF69_MODE_STANDBY); //enables interrupts
   d6824:	4620      	mov	r0, r4
   d6826:	2101      	movs	r1, #1
   d6828:	f7ff ff58 	bl	d66dc <_ZN5RFM697setModeEh>
    return true;
   d682c:	2001      	movs	r0, #1
    return false;
  }
  receiveBegin();
  return false;
//}
}
   d682e:	bd10      	pop	{r4, pc}
   d6830:	2003e1a8 	.word	0x2003e1a8
   d6834:	2003e168 	.word	0x2003e168

000d6838 <_ZN5RFM6912setHighPowerEb>:
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

void RFM69::setHighPower(bool onOff) {
  _isRFM69HW = onOff;
  writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
   d6838:	2900      	cmp	r1, #0
void RFM69::promiscuous(bool onOff) {
  _promiscuousMode=onOff;
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

void RFM69::setHighPower(bool onOff) {
   d683a:	b510      	push	{r4, lr}
   d683c:	4604      	mov	r4, r0
  _isRFM69HW = onOff;
   d683e:	7281      	strb	r1, [r0, #10]
  writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
   d6840:	bf14      	ite	ne
   d6842:	220f      	movne	r2, #15
   d6844:	221a      	moveq	r2, #26
   d6846:	2113      	movs	r1, #19
   d6848:	f7ff fefa 	bl	d6640 <_ZN5RFM698writeRegEhh>
  if (_isRFM69HW) //turning ON
   d684c:	7aa3      	ldrb	r3, [r4, #10]
   d684e:	b143      	cbz	r3, d6862 <_ZN5RFM6912setHighPowerEb+0x2a>
    writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); //enable P1 & P2 amplifier stages
   d6850:	2111      	movs	r1, #17
   d6852:	4620      	mov	r0, r4
   d6854:	f7ff fee2 	bl	d661c <_ZN5RFM697readRegEh>
   d6858:	f000 021f 	and.w	r2, r0, #31
   d685c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
   d6860:	e002      	b.n	d6868 <_ZN5RFM6912setHighPowerEb+0x30>
  else
    writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); //enable P0 only
   d6862:	7a62      	ldrb	r2, [r4, #9]
   d6864:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   d6868:	4620      	mov	r0, r4
   d686a:	2111      	movs	r1, #17
}
   d686c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  _isRFM69HW = onOff;
  writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
  if (_isRFM69HW) //turning ON
    writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); //enable P1 & P2 amplifier stages
  else
    writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); //enable P0 only
   d6870:	f7ff bee6 	b.w	d6640 <_ZN5RFM698writeRegEhh>

000d6874 <_ZN5RFM6916interruptHandlerEv>:
	while (digitalRead(_interruptPin) == 0 && millis()-txStart < RF69_TX_LIMIT_MS); //wait for DIO0 to turn HIGH signalling transmission finish
  //while (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT == 0x00); // Wait for ModeReady
  setMode(RF69_MODE_STANDBY);
}

void RFM69::interruptHandler() {
   d6874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  //pinMode(4, OUTPUT);
  //digitalWrite(4, 1);
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
   d6878:	4b3d      	ldr	r3, [pc, #244]	; (d6970 <_ZN5RFM6916interruptHandlerEv+0xfc>)
   d687a:	781b      	ldrb	r3, [r3, #0]
   d687c:	2b03      	cmp	r3, #3
	while (digitalRead(_interruptPin) == 0 && millis()-txStart < RF69_TX_LIMIT_MS); //wait for DIO0 to turn HIGH signalling transmission finish
  //while (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT == 0x00); // Wait for ModeReady
  setMode(RF69_MODE_STANDBY);
}

void RFM69::interruptHandler() {
   d687e:	4604      	mov	r4, r0
  //pinMode(4, OUTPUT);
  //digitalWrite(4, 1);
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
   d6880:	d114      	bne.n	d68ac <_ZN5RFM6916interruptHandlerEv+0x38>
   d6882:	2128      	movs	r1, #40	; 0x28
   d6884:	f7ff feca 	bl	d661c <_ZN5RFM697readRegEh>
   d6888:	0743      	lsls	r3, r0, #29
   d688a:	d417      	bmi.n	d68bc <_ZN5RFM6916interruptHandlerEv+0x48>
   d688c:	e00e      	b.n	d68ac <_ZN5RFM6916interruptHandlerEv+0x38>

    for (byte i= 0; i < DATALEN; i++)
    {
      DATA[i] = SPI1.transfer(0);
    }
    if (DATALEN<RF69_MAX_DATA_LEN) DATA[DATALEN]=0; //add null at end of string
   d688e:	7813      	ldrb	r3, [r2, #0]
   d6890:	2b3c      	cmp	r3, #60	; 0x3c
   d6892:	d804      	bhi.n	d689e <_ZN5RFM6916interruptHandlerEv+0x2a>
   d6894:	7813      	ldrb	r3, [r2, #0]
   d6896:	4a37      	ldr	r2, [pc, #220]	; (d6974 <_ZN5RFM6916interruptHandlerEv+0x100>)
   d6898:	b2db      	uxtb	r3, r3
   d689a:	2100      	movs	r1, #0
   d689c:	54d1      	strb	r1, [r2, r3]
    unselect();
   d689e:	4620      	mov	r0, r4
   d68a0:	f7ff fe7a 	bl	d6598 <_ZN5RFM698unselectEv>
    setMode(RF69_MODE_RX);
   d68a4:	2103      	movs	r1, #3
   d68a6:	4620      	mov	r0, r4
   d68a8:	f7ff ff18 	bl	d66dc <_ZN5RFM697setModeEh>
  }
  RSSI = readRSSI();
   d68ac:	2100      	movs	r1, #0
   d68ae:	4620      	mov	r0, r4
   d68b0:	f7ff feec 	bl	d668c <_ZN5RFM698readRSSIEb>
   d68b4:	4b30      	ldr	r3, [pc, #192]	; (d6978 <_ZN5RFM6916interruptHandlerEv+0x104>)
   d68b6:	6018      	str	r0, [r3, #0]
   d68b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  //pinMode(4, OUTPUT);
  //digitalWrite(4, 1);
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
  {
    //RSSI = readRSSI();
    setMode(RF69_MODE_STANDBY);
   d68bc:	2101      	movs	r1, #1
   d68be:	4620      	mov	r0, r4
   d68c0:	f7ff ff0c 	bl	d66dc <_ZN5RFM697setModeEh>
    select();
   d68c4:	4620      	mov	r0, r4
   d68c6:	f7ff fe90 	bl	d65ea <_ZN5RFM696selectEv>
    SPI1.transfer(REG_FIFO & 0x7f);
   d68ca:	2000      	movs	r0, #0
   d68cc:	f7ff fe84 	bl	d65d8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
    PAYLOADLEN = SPI1.transfer(0);
   d68d0:	2000      	movs	r0, #0
   d68d2:	f7ff fe81 	bl	d65d8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d68d6:	4d29      	ldr	r5, [pc, #164]	; (d697c <_ZN5RFM6916interruptHandlerEv+0x108>)
   d68d8:	7028      	strb	r0, [r5, #0]
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
   d68da:	782b      	ldrb	r3, [r5, #0]
   d68dc:	2b42      	cmp	r3, #66	; 0x42
   d68de:	d814      	bhi.n	d690a <_ZN5RFM6916interruptHandlerEv+0x96>
   d68e0:	782b      	ldrb	r3, [r5, #0]
   d68e2:	b2db      	uxtb	r3, r3
    TARGETID = SPI1.transfer(0);
   d68e4:	2000      	movs	r0, #0
    //RSSI = readRSSI();
    setMode(RF69_MODE_STANDBY);
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
   d68e6:	702b      	strb	r3, [r5, #0]
    TARGETID = SPI1.transfer(0);
   d68e8:	f7ff fe76 	bl	d65d8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d68ec:	4b24      	ldr	r3, [pc, #144]	; (d6980 <_ZN5RFM6916interruptHandlerEv+0x10c>)
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
   d68ee:	7a22      	ldrb	r2, [r4, #8]
    setMode(RF69_MODE_STANDBY);
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
    TARGETID = SPI1.transfer(0);
   d68f0:	7018      	strb	r0, [r3, #0]
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
   d68f2:	b932      	cbnz	r2, d6902 <_ZN5RFM6916interruptHandlerEv+0x8e>
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
    TARGETID = SPI1.transfer(0);
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
   d68f4:	781a      	ldrb	r2, [r3, #0]
   d68f6:	79e1      	ldrb	r1, [r4, #7]
   d68f8:	4291      	cmp	r1, r2
   d68fa:	d002      	beq.n	d6902 <_ZN5RFM6916interruptHandlerEv+0x8e>
   d68fc:	781b      	ldrb	r3, [r3, #0]
   d68fe:	2bff      	cmp	r3, #255	; 0xff
   d6900:	d105      	bne.n	d690e <_ZN5RFM6916interruptHandlerEv+0x9a>
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
   d6902:	782b      	ldrb	r3, [r5, #0]
   d6904:	2b02      	cmp	r3, #2
   d6906:	d902      	bls.n	d690e <_ZN5RFM6916interruptHandlerEv+0x9a>
   d6908:	e00b      	b.n	d6922 <_ZN5RFM6916interruptHandlerEv+0xae>
    //RSSI = readRSSI();
    setMode(RF69_MODE_STANDBY);
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
   d690a:	2342      	movs	r3, #66	; 0x42
   d690c:	e7ea      	b.n	d68e4 <_ZN5RFM6916interruptHandlerEv+0x70>
    TARGETID = SPI1.transfer(0);
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
    {
      PAYLOADLEN = 0;
      unselect();
   d690e:	4620      	mov	r0, r4
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
    TARGETID = SPI1.transfer(0);
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
    {
      PAYLOADLEN = 0;
   d6910:	2300      	movs	r3, #0
   d6912:	702b      	strb	r3, [r5, #0]
      unselect();
   d6914:	f7ff fe40 	bl	d6598 <_ZN5RFM698unselectEv>
      receiveBegin();
   d6918:	4620      	mov	r0, r4
    unselect();
    setMode(RF69_MODE_RX);
  }
  RSSI = readRSSI();
  //digitalWrite(4, 0);
}
   d691a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
    {
      PAYLOADLEN = 0;
      unselect();
      receiveBegin();
   d691e:	f7ff bf31 	b.w	d6784 <_ZN5RFM6912receiveBeginEv>
      //digitalWrite(4, 0);
      return;
    }

    DATALEN = PAYLOADLEN - 3;
   d6922:	4b16      	ldr	r3, [pc, #88]	; (d697c <_ZN5RFM6916interruptHandlerEv+0x108>)
   d6924:	4e17      	ldr	r6, [pc, #92]	; (d6984 <_ZN5RFM6916interruptHandlerEv+0x110>)
   d6926:	781b      	ldrb	r3, [r3, #0]
    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag

    for (byte i= 0; i < DATALEN; i++)
    {
      DATA[i] = SPI1.transfer(0);
   d6928:	4f12      	ldr	r7, [pc, #72]	; (d6974 <_ZN5RFM6916interruptHandlerEv+0x100>)
      receiveBegin();
      //digitalWrite(4, 0);
      return;
    }

    DATALEN = PAYLOADLEN - 3;
   d692a:	3b03      	subs	r3, #3
   d692c:	b2db      	uxtb	r3, r3
    SENDERID = SPI1.transfer(0);
   d692e:	2000      	movs	r0, #0
      receiveBegin();
      //digitalWrite(4, 0);
      return;
    }

    DATALEN = PAYLOADLEN - 3;
   d6930:	7033      	strb	r3, [r6, #0]
    SENDERID = SPI1.transfer(0);
   d6932:	f7ff fe51 	bl	d65d8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d6936:	4b14      	ldr	r3, [pc, #80]	; (d6988 <_ZN5RFM6916interruptHandlerEv+0x114>)
   d6938:	7018      	strb	r0, [r3, #0]
    byte CTLbyte = SPI1.transfer(0);
   d693a:	2000      	movs	r0, #0
   d693c:	f7ff fe4c 	bl	d65d8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>

    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
   d6940:	4a12      	ldr	r2, [pc, #72]	; (d698c <_ZN5RFM6916interruptHandlerEv+0x118>)
   d6942:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
   d6946:	b2db      	uxtb	r3, r3
   d6948:	7013      	strb	r3, [r2, #0]
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag
   d694a:	f000 0040 	and.w	r0, r0, #64	; 0x40
   d694e:	4b10      	ldr	r3, [pc, #64]	; (d6990 <_ZN5RFM6916interruptHandlerEv+0x11c>)
   d6950:	b2c0      	uxtb	r0, r0
   d6952:	7018      	strb	r0, [r3, #0]
   d6954:	2300      	movs	r3, #0

    for (byte i= 0; i < DATALEN; i++)
   d6956:	7831      	ldrb	r1, [r6, #0]
   d6958:	4a0a      	ldr	r2, [pc, #40]	; (d6984 <_ZN5RFM6916interruptHandlerEv+0x110>)
   d695a:	b2dd      	uxtb	r5, r3
   d695c:	428d      	cmp	r5, r1
   d695e:	f103 0801 	add.w	r8, r3, #1
   d6962:	d294      	bcs.n	d688e <_ZN5RFM6916interruptHandlerEv+0x1a>
    {
      DATA[i] = SPI1.transfer(0);
   d6964:	2000      	movs	r0, #0
   d6966:	f7ff fe37 	bl	d65d8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
    byte CTLbyte = SPI1.transfer(0);

    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag

    for (byte i= 0; i < DATALEN; i++)
   d696a:	4643      	mov	r3, r8
    {
      DATA[i] = SPI1.transfer(0);
   d696c:	5578      	strb	r0, [r7, r5]
    byte CTLbyte = SPI1.transfer(0);

    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag

    for (byte i= 0; i < DATALEN; i++)
   d696e:	e7f2      	b.n	d6956 <_ZN5RFM6916interruptHandlerEv+0xe2>
   d6970:	2003e1a8 	.word	0x2003e1a8
   d6974:	2003e16a 	.word	0x2003e16a
   d6978:	2003e15c 	.word	0x2003e15c
   d697c:	2003e168 	.word	0x2003e168
   d6980:	2003e160 	.word	0x2003e160
   d6984:	2003e1a7 	.word	0x2003e1a7
   d6988:	2003e162 	.word	0x2003e162
   d698c:	2003e169 	.word	0x2003e169
   d6990:	2003e161 	.word	0x2003e161

000d6994 <_ZN5RFM697encryptEPKc>:
}

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM69::encrypt(const char* key) {
   d6994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6996:	460d      	mov	r5, r1
  setMode(RF69_MODE_STANDBY);
   d6998:	2101      	movs	r1, #1
}

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM69::encrypt(const char* key) {
   d699a:	4604      	mov	r4, r0
  setMode(RF69_MODE_STANDBY);
   d699c:	f7ff fe9e 	bl	d66dc <_ZN5RFM697setModeEh>
  if (key!=0)
   d69a0:	b18d      	cbz	r5, d69c6 <_ZN5RFM697encryptEPKc+0x32>
  {
    select();
   d69a2:	4620      	mov	r0, r4
   d69a4:	f7ff fe21 	bl	d65ea <_ZN5RFM696selectEv>
    SPI1.transfer(REG_AESKEY1 | 0x80);
   d69a8:	20be      	movs	r0, #190	; 0xbe
   d69aa:	f7ff fe15 	bl	d65d8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d69ae:	1e6e      	subs	r6, r5, #1
   d69b0:	f105 070f 	add.w	r7, r5, #15
    for (byte i = 0; i<16; i++)
      SPI1.transfer(key[i]);
   d69b4:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   d69b8:	f7ff fe0e 	bl	d65d8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  setMode(RF69_MODE_STANDBY);
  if (key!=0)
  {
    select();
    SPI1.transfer(REG_AESKEY1 | 0x80);
    for (byte i = 0; i<16; i++)
   d69bc:	42be      	cmp	r6, r7
   d69be:	d1f9      	bne.n	d69b4 <_ZN5RFM697encryptEPKc+0x20>
      SPI1.transfer(key[i]);
    unselect();
   d69c0:	4620      	mov	r0, r4
   d69c2:	f7ff fde9 	bl	d6598 <_ZN5RFM698unselectEv>
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
   d69c6:	213d      	movs	r1, #61	; 0x3d
   d69c8:	4620      	mov	r0, r4
   d69ca:	f7ff fe27 	bl	d661c <_ZN5RFM697readRegEh>
   d69ce:	f020 0001 	bic.w	r0, r0, #1
   d69d2:	2d00      	cmp	r5, #0
   d69d4:	bf0c      	ite	eq
   d69d6:	4602      	moveq	r2, r0
   d69d8:	f040 0201 	orrne.w	r2, r0, #1
   d69dc:	b2d2      	uxtb	r2, r2
   d69de:	4620      	mov	r0, r4
   d69e0:	213d      	movs	r1, #61	; 0x3d
}
   d69e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    SPI1.transfer(REG_AESKEY1 | 0x80);
    for (byte i = 0; i<16; i++)
      SPI1.transfer(key[i]);
    unselect();
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
   d69e6:	f7ff be2b 	b.w	d6640 <_ZN5RFM698writeRegEhh>
	...

000d69ec <_ZN5RFM6910initializeEhhh>:
volatile byte RFM69::ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
volatile int RFM69::RSSI; //most accurate RSSI during reception (closest to the reception)
RFM69* RFM69::selfPointer;

bool RFM69::initialize(byte freqBand, byte nodeID, byte networkID)
{
   d69ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   d69ee:	b08f      	sub	sp, #60	; 0x3c
   d69f0:	460d      	mov	r5, r1
   d69f2:	4604      	mov	r4, r0
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d69f4:	2100      	movs	r1, #0
volatile byte RFM69::ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
volatile int RFM69::RSSI; //most accurate RSSI during reception (closest to the reception)
RFM69* RFM69::selfPointer;

bool RFM69::initialize(byte freqBand, byte nodeID, byte networkID)
{
   d69f6:	4616      	mov	r6, r2
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d69f8:	a803      	add	r0, sp, #12
   d69fa:	222a      	movs	r2, #42	; 0x2a
volatile byte RFM69::ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
volatile int RFM69::RSSI; //most accurate RSSI during reception (closest to the reception)
RFM69* RFM69::selfPointer;

bool RFM69::initialize(byte freqBand, byte nodeID, byte networkID)
{
   d69fc:	461f      	mov	r7, r3
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d69fe:	f002 fe96 	bl	d972e <memset>
   d6a02:	2301      	movs	r3, #1
   d6a04:	f88d 300c 	strb.w	r3, [sp, #12]
   d6a08:	2303      	movs	r3, #3
   d6a0a:	f88d 3010 	strb.w	r3, [sp, #16]
   d6a0e:	f88d 3015 	strb.w	r3, [sp, #21]
   d6a12:	2306      	movs	r3, #6
   d6a14:	f88d 3016 	strb.w	r3, [sp, #22]
   d6a18:	2333      	movs	r3, #51	; 0x33
   d6a1a:	f88d 3017 	strb.w	r3, [sp, #23]
   d6a1e:	2307      	movs	r3, #7
   d6a20:	f88d 3018 	strb.w	r3, [sp, #24]
   d6a24:	2308      	movs	r3, #8
   d6a26:	f88d 301a 	strb.w	r3, [sp, #26]
   d6a2a:	2309      	movs	r3, #9
   d6a2c:	f88d 301c 	strb.w	r3, [sp, #28]
   d6a30:	2319      	movs	r3, #25
   d6a32:	f88d 301e 	strb.w	r3, [sp, #30]
   d6a36:	2325      	movs	r3, #37	; 0x25
   d6a38:	f88d 3020 	strb.w	r3, [sp, #32]
   d6a3c:	2329      	movs	r3, #41	; 0x29
   d6a3e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   d6a42:	23dc      	movs	r3, #220	; 0xdc
   d6a44:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   d6a48:	232e      	movs	r3, #46	; 0x2e
   d6a4a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d6a4e:	2388      	movs	r3, #136	; 0x88
   d6a50:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   d6a54:	232f      	movs	r3, #47	; 0x2f
   d6a56:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   d6a5a:	232d      	movs	r3, #45	; 0x2d
   d6a5c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   d6a60:	2337      	movs	r3, #55	; 0x37
   d6a62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   d6a66:	2390      	movs	r3, #144	; 0x90
   d6a68:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d6a6c:	2338      	movs	r3, #56	; 0x38
   d6a6e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   d6a72:	233c      	movs	r3, #60	; 0x3c
   d6a74:	2204      	movs	r2, #4
   d6a76:	2102      	movs	r1, #2
   d6a78:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
   d6a7c:	238f      	movs	r3, #143	; 0x8f
   d6a7e:	f88d 200d 	strb.w	r2, [sp, #13]
   d6a82:	f88d 100e 	strb.w	r1, [sp, #14]
   d6a86:	f88d 1011 	strb.w	r1, [sp, #17]
   d6a8a:	f88d 2012 	strb.w	r2, [sp, #18]
   d6a8e:	2105      	movs	r1, #5
   d6a90:	2240      	movs	r2, #64	; 0x40
   d6a92:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   d6a96:	233d      	movs	r3, #61	; 0x3d
   d6a98:	f88d 2013 	strb.w	r2, [sp, #19]
   d6a9c:	f88d 1014 	strb.w	r1, [sp, #20]
   d6aa0:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
   d6aa4:	2142      	movs	r1, #66	; 0x42
   d6aa6:	2230      	movs	r2, #48	; 0x30
   d6aa8:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   d6aac:	2312      	movs	r3, #18
   d6aae:	f88d 101f 	strb.w	r1, [sp, #31]
   d6ab2:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   d6ab6:	f88d 102d 	strb.w	r1, [sp, #45]	; 0x2d
   d6aba:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   d6abe:	236f      	movs	r3, #111	; 0x6f
   d6ac0:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   d6ac4:	2d1f      	cmp	r5, #31
   d6ac6:	f04f 03ff 	mov.w	r3, #255	; 0xff
   d6aca:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   d6ace:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   d6ad2:	d006      	beq.n	d6ae2 <_ZN5RFM6910initializeEhhh+0xf6>
   d6ad4:	2d2b      	cmp	r5, #43	; 0x2b
   d6ad6:	d006      	beq.n	d6ae6 <_ZN5RFM6910initializeEhhh+0xfa>
   d6ad8:	2d56      	cmp	r5, #86	; 0x56
   d6ada:	bf0c      	ite	eq
   d6adc:	22d9      	moveq	r2, #217	; 0xd9
   d6ade:	22e4      	movne	r2, #228	; 0xe4
   d6ae0:	e002      	b.n	d6ae8 <_ZN5RFM6910initializeEhhh+0xfc>
   d6ae2:	224e      	movs	r2, #78	; 0x4e
   d6ae4:	e000      	b.n	d6ae8 <_ZN5RFM6910initializeEhhh+0xfc>
   d6ae6:	226c      	movs	r2, #108	; 0x6c
   d6ae8:	2d1f      	cmp	r5, #31
   d6aea:	f88d 2019 	strb.w	r2, [sp, #25]
   d6aee:	d006      	beq.n	d6afe <_ZN5RFM6910initializeEhhh+0x112>
   d6af0:	2d2b      	cmp	r5, #43	; 0x2b
   d6af2:	d006      	beq.n	d6b02 <_ZN5RFM6910initializeEhhh+0x116>
   d6af4:	2d56      	cmp	r5, #86	; 0x56
   d6af6:	bf14      	ite	ne
   d6af8:	22c0      	movne	r2, #192	; 0xc0
   d6afa:	2200      	moveq	r2, #0
   d6afc:	e002      	b.n	d6b04 <_ZN5RFM6910initializeEhhh+0x118>
   d6afe:	22c0      	movs	r2, #192	; 0xc0
   d6b00:	e000      	b.n	d6b04 <_ZN5RFM6910initializeEhhh+0x118>
   d6b02:	2240      	movs	r2, #64	; 0x40

  pinMode(_slaveSelectPin, OUTPUT);
   d6b04:	2101      	movs	r1, #1
   d6b06:	7920      	ldrb	r0, [r4, #4]
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d6b08:	f88d 201b 	strb.w	r2, [sp, #27]
   d6b0c:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29

  pinMode(_slaveSelectPin, OUTPUT);
   d6b10:	f001 ff9e 	bl	d8a50 <pinMode>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d6b14:	f7ff fd4a 	bl	d65ac <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d6b18:	f000 fc36 	bl	d7388 <_ZN8SPIClass5beginEv>
   d6b1c:	f000 f952 	bl	d6dc4 <HAL_Timer_Get_Milli_Seconds>
   d6b20:	4605      	mov	r5, r0
  // Set time out to 50ms
  #define TIME_OUT 50
  
  start_to = millis() ;

  do writeReg(REG_SYNCVALUE1, 0xaa); while (readReg(REG_SYNCVALUE1) != 0xaa && millis()-start_to < TIME_OUT);
   d6b22:	22aa      	movs	r2, #170	; 0xaa
   d6b24:	212f      	movs	r1, #47	; 0x2f
   d6b26:	4620      	mov	r0, r4
   d6b28:	f7ff fd8a 	bl	d6640 <_ZN5RFM698writeRegEhh>
   d6b2c:	212f      	movs	r1, #47	; 0x2f
   d6b2e:	4620      	mov	r0, r4
   d6b30:	f7ff fd74 	bl	d661c <_ZN5RFM697readRegEh>
   d6b34:	28aa      	cmp	r0, #170	; 0xaa
   d6b36:	d004      	beq.n	d6b42 <_ZN5RFM6910initializeEhhh+0x156>
   d6b38:	f000 f944 	bl	d6dc4 <HAL_Timer_Get_Milli_Seconds>
   d6b3c:	1b40      	subs	r0, r0, r5
   d6b3e:	2831      	cmp	r0, #49	; 0x31
   d6b40:	d9ef      	bls.n	d6b22 <_ZN5RFM6910initializeEhhh+0x136>
   d6b42:	f000 f93f 	bl	d6dc4 <HAL_Timer_Get_Milli_Seconds>
  if (millis()-start_to >= TIME_OUT) return (false);
   d6b46:	1b40      	subs	r0, r0, r5
   d6b48:	2831      	cmp	r0, #49	; 0x31
   d6b4a:	d82d      	bhi.n	d6ba8 <_ZN5RFM6910initializeEhhh+0x1bc>
   d6b4c:	f000 f93a 	bl	d6dc4 <HAL_Timer_Get_Milli_Seconds>
   d6b50:	4605      	mov	r5, r0
    
  // Set time out 
  start_to = millis()  ;  
	do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis()-start_to < TIME_OUT);
   d6b52:	2255      	movs	r2, #85	; 0x55
   d6b54:	212f      	movs	r1, #47	; 0x2f
   d6b56:	4620      	mov	r0, r4
   d6b58:	f7ff fd72 	bl	d6640 <_ZN5RFM698writeRegEhh>
   d6b5c:	212f      	movs	r1, #47	; 0x2f
   d6b5e:	4620      	mov	r0, r4
   d6b60:	f7ff fd5c 	bl	d661c <_ZN5RFM697readRegEh>
   d6b64:	2855      	cmp	r0, #85	; 0x55
   d6b66:	d021      	beq.n	d6bac <_ZN5RFM6910initializeEhhh+0x1c0>
   d6b68:	f000 f92c 	bl	d6dc4 <HAL_Timer_Get_Milli_Seconds>
   d6b6c:	1b40      	subs	r0, r0, r5
   d6b6e:	2831      	cmp	r0, #49	; 0x31
   d6b70:	d9ef      	bls.n	d6b52 <_ZN5RFM6910initializeEhhh+0x166>
   d6b72:	e01b      	b.n	d6bac <_ZN5RFM6910initializeEhhh+0x1c0>
  for (byte i = 0; CONFIG[i][0] != 255; i++)
    writeReg(CONFIG[i][0], CONFIG[i][1]);

  // Encryption is persistent between resets and can trip you up during debugging.
  // Disable it during initialization so we always start from a known state.
  encrypt(0);
   d6b74:	2100      	movs	r1, #0
   d6b76:	4620      	mov	r0, r4
   d6b78:	f7ff ff0c 	bl	d6994 <_ZN5RFM697encryptEPKc>

  setHighPower(_isRFM69HW); //called regardless if it's a RFM69W or RFM69HW
   d6b7c:	7aa1      	ldrb	r1, [r4, #10]
   d6b7e:	4620      	mov	r0, r4
   d6b80:	f7ff fe5a 	bl	d6838 <_ZN5RFM6912setHighPowerEb>
  setMode(RF69_MODE_STANDBY);
   d6b84:	2101      	movs	r1, #1
   d6b86:	4620      	mov	r0, r4
   d6b88:	f7ff fda8 	bl	d66dc <_ZN5RFM697setModeEh>
   d6b8c:	f000 f91a 	bl	d6dc4 <HAL_Timer_Get_Milli_Seconds>
   d6b90:	4605      	mov	r5, r0
  // Set time out 
  start_to = millis() ;
	while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis()-start_to < TIME_OUT); // Wait for ModeReady
   d6b92:	2127      	movs	r1, #39	; 0x27
   d6b94:	4620      	mov	r0, r4
   d6b96:	f7ff fd41 	bl	d661c <_ZN5RFM697readRegEh>
   d6b9a:	0603      	lsls	r3, r0, #24
   d6b9c:	d51b      	bpl.n	d6bd6 <_ZN5RFM6910initializeEhhh+0x1ea>
   d6b9e:	f000 f911 	bl	d6dc4 <HAL_Timer_Get_Milli_Seconds>
  if (millis()-start_to >= TIME_OUT) return (false);
   d6ba2:	1b40      	subs	r0, r0, r5
   d6ba4:	2831      	cmp	r0, #49	; 0x31
   d6ba6:	d91c      	bls.n	d6be2 <_ZN5RFM6910initializeEhhh+0x1f6>
  // picking a non-interrupt enabled pin will prevent proper initialization
  // code thanks to @ScruffR - https://community.particle.io/t/how-to-make-rfm69-work-on-photon-solved-new-library-rfm69-particle/26497/93?u=bloukingfisher
  if (!attachInterrupt(_interruptNum, RFM69::isr0, RISING)) return false;
   d6ba8:	2000      	movs	r0, #0
   d6baa:	e028      	b.n	d6bfe <_ZN5RFM6910initializeEhhh+0x212>
   d6bac:	f000 f90a 	bl	d6dc4 <HAL_Timer_Get_Milli_Seconds>
  if (millis()-start_to >= TIME_OUT) return (false);
    
  // Set time out 
  start_to = millis()  ;  
	do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis()-start_to < TIME_OUT);
  if (millis()-start_to >= TIME_OUT) return (false);
   d6bb0:	1b40      	subs	r0, r0, r5
   d6bb2:	2831      	cmp	r0, #49	; 0x31
   d6bb4:	d8f8      	bhi.n	d6ba8 <_ZN5RFM6910initializeEhhh+0x1bc>
   d6bb6:	2500      	movs	r5, #0
  for (byte i = 0; CONFIG[i][0] != 255; i++)
   d6bb8:	b2eb      	uxtb	r3, r5
   d6bba:	aa0e      	add	r2, sp, #56	; 0x38
   d6bbc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d6bc0:	3501      	adds	r5, #1
   d6bc2:	f813 1c2c 	ldrb.w	r1, [r3, #-44]
   d6bc6:	29ff      	cmp	r1, #255	; 0xff
   d6bc8:	d0d4      	beq.n	d6b74 <_ZN5RFM6910initializeEhhh+0x188>
    writeReg(CONFIG[i][0], CONFIG[i][1]);
   d6bca:	f813 2c2b 	ldrb.w	r2, [r3, #-43]
   d6bce:	4620      	mov	r0, r4
   d6bd0:	f7ff fd36 	bl	d6640 <_ZN5RFM698writeRegEhh>
    
  // Set time out 
  start_to = millis()  ;  
	do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis()-start_to < TIME_OUT);
  if (millis()-start_to >= TIME_OUT) return (false);
  for (byte i = 0; CONFIG[i][0] != 255; i++)
   d6bd4:	e7f0      	b.n	d6bb8 <_ZN5RFM6910initializeEhhh+0x1cc>
   d6bd6:	f000 f8f5 	bl	d6dc4 <HAL_Timer_Get_Milli_Seconds>

  setHighPower(_isRFM69HW); //called regardless if it's a RFM69W or RFM69HW
  setMode(RF69_MODE_STANDBY);
  // Set time out 
  start_to = millis() ;
	while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis()-start_to < TIME_OUT); // Wait for ModeReady
   d6bda:	1b40      	subs	r0, r0, r5
   d6bdc:	2831      	cmp	r0, #49	; 0x31
   d6bde:	d9d8      	bls.n	d6b92 <_ZN5RFM6910initializeEhhh+0x1a6>
   d6be0:	e7dd      	b.n	d6b9e <_ZN5RFM6910initializeEhhh+0x1b2>
  if (millis()-start_to >= TIME_OUT) return (false);
  // picking a non-interrupt enabled pin will prevent proper initialization
  // code thanks to @ScruffR - https://community.particle.io/t/how-to-make-rfm69-work-on-photon-solved-new-library-rfm69-particle/26497/93?u=bloukingfisher
  if (!attachInterrupt(_interruptNum, RFM69::isr0, RISING)) return false;
   d6be2:	2300      	movs	r3, #0
   d6be4:	9300      	str	r3, [sp, #0]
   d6be6:	79a0      	ldrb	r0, [r4, #6]
   d6be8:	4906      	ldr	r1, [pc, #24]	; (d6c04 <_ZN5RFM6910initializeEhhh+0x218>)
   d6bea:	f04f 33ff 	mov.w	r3, #4294967295
   d6bee:	2201      	movs	r2, #1
   d6bf0:	f001 f948 	bl	d7e84 <_Z15attachInterrupttPFvvE13InterruptModeah>
   d6bf4:	2800      	cmp	r0, #0
   d6bf6:	d0d7      	beq.n	d6ba8 <_ZN5RFM6910initializeEhhh+0x1bc>

  selfPointer = this;
   d6bf8:	4b03      	ldr	r3, [pc, #12]	; (d6c08 <_ZN5RFM6910initializeEhhh+0x21c>)
  _address = nodeID;
   d6bfa:	71e6      	strb	r6, [r4, #7]
  if (millis()-start_to >= TIME_OUT) return (false);
  // picking a non-interrupt enabled pin will prevent proper initialization
  // code thanks to @ScruffR - https://community.particle.io/t/how-to-make-rfm69-work-on-photon-solved-new-library-rfm69-particle/26497/93?u=bloukingfisher
  if (!attachInterrupt(_interruptNum, RFM69::isr0, RISING)) return false;

  selfPointer = this;
   d6bfc:	601c      	str	r4, [r3, #0]
  _address = nodeID;
  return true;
}
   d6bfe:	b00f      	add	sp, #60	; 0x3c
   d6c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6c02:	bf00      	nop
   d6c04:	000d6589 	.word	0x000d6589
   d6c08:	2003e164 	.word	0x2003e164

000d6c0c <_GLOBAL__sub_I__ZN5RFM694DATAE>:
   d6c0c:	f000 b812 	b.w	d6c34 <HAL_Pin_Map>

000d6c10 <_GLOBAL__sub_I__ZN9RFM69_ATC18ACK_RSSI_REQUESTEDE>:
   d6c10:	f000 b810 	b.w	d6c34 <HAL_Pin_Map>

000d6c14 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6c14:	b508      	push	{r3, lr}
   d6c16:	4b02      	ldr	r3, [pc, #8]	; (d6c20 <netdb_freeaddrinfo+0xc>)
   d6c18:	681b      	ldr	r3, [r3, #0]
   d6c1a:	689b      	ldr	r3, [r3, #8]
   d6c1c:	9301      	str	r3, [sp, #4]
   d6c1e:	bd08      	pop	{r3, pc}
   d6c20:	00030268 	.word	0x00030268

000d6c24 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6c24:	b508      	push	{r3, lr}
   d6c26:	4b02      	ldr	r3, [pc, #8]	; (d6c30 <netdb_getaddrinfo+0xc>)
   d6c28:	681b      	ldr	r3, [r3, #0]
   d6c2a:	68db      	ldr	r3, [r3, #12]
   d6c2c:	9301      	str	r3, [sp, #4]
   d6c2e:	bd08      	pop	{r3, pc}
   d6c30:	00030268 	.word	0x00030268

000d6c34 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d6c34:	b508      	push	{r3, lr}
   d6c36:	4b02      	ldr	r3, [pc, #8]	; (d6c40 <HAL_Pin_Map+0xc>)
   d6c38:	681b      	ldr	r3, [r3, #0]
   d6c3a:	681b      	ldr	r3, [r3, #0]
   d6c3c:	9301      	str	r3, [sp, #4]
   d6c3e:	bd08      	pop	{r3, pc}
   d6c40:	0003022c 	.word	0x0003022c

000d6c44 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6c44:	b508      	push	{r3, lr}
   d6c46:	4b02      	ldr	r3, [pc, #8]	; (d6c50 <HAL_Pin_Mode+0xc>)
   d6c48:	681b      	ldr	r3, [r3, #0]
   d6c4a:	689b      	ldr	r3, [r3, #8]
   d6c4c:	9301      	str	r3, [sp, #4]
   d6c4e:	bd08      	pop	{r3, pc}
   d6c50:	0003022c 	.word	0x0003022c

000d6c54 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6c54:	b508      	push	{r3, lr}
   d6c56:	4b02      	ldr	r3, [pc, #8]	; (d6c60 <HAL_Get_Pin_Mode+0xc>)
   d6c58:	681b      	ldr	r3, [r3, #0]
   d6c5a:	68db      	ldr	r3, [r3, #12]
   d6c5c:	9301      	str	r3, [sp, #4]
   d6c5e:	bd08      	pop	{r3, pc}
   d6c60:	0003022c 	.word	0x0003022c

000d6c64 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6c64:	b508      	push	{r3, lr}
   d6c66:	4b02      	ldr	r3, [pc, #8]	; (d6c70 <HAL_GPIO_Write+0xc>)
   d6c68:	681b      	ldr	r3, [r3, #0]
   d6c6a:	691b      	ldr	r3, [r3, #16]
   d6c6c:	9301      	str	r3, [sp, #4]
   d6c6e:	bd08      	pop	{r3, pc}
   d6c70:	0003022c 	.word	0x0003022c

000d6c74 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d6c74:	b508      	push	{r3, lr}
   d6c76:	4b02      	ldr	r3, [pc, #8]	; (d6c80 <HAL_GPIO_Read+0xc>)
   d6c78:	681b      	ldr	r3, [r3, #0]
   d6c7a:	695b      	ldr	r3, [r3, #20]
   d6c7c:	9301      	str	r3, [sp, #4]
   d6c7e:	bd08      	pop	{r3, pc}
   d6c80:	0003022c 	.word	0x0003022c

000d6c84 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d6c84:	b508      	push	{r3, lr}
   d6c86:	4b02      	ldr	r3, [pc, #8]	; (d6c90 <HAL_Interrupts_Attach+0xc>)
   d6c88:	681b      	ldr	r3, [r3, #0]
   d6c8a:	699b      	ldr	r3, [r3, #24]
   d6c8c:	9301      	str	r3, [sp, #4]
   d6c8e:	bd08      	pop	{r3, pc}
   d6c90:	0003022c 	.word	0x0003022c

000d6c94 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d6c94:	b508      	push	{r3, lr}
   d6c96:	4b02      	ldr	r3, [pc, #8]	; (d6ca0 <HAL_Interrupts_Detach+0xc>)
   d6c98:	681b      	ldr	r3, [r3, #0]
   d6c9a:	69db      	ldr	r3, [r3, #28]
   d6c9c:	9301      	str	r3, [sp, #4]
   d6c9e:	bd08      	pop	{r3, pc}
   d6ca0:	0003022c 	.word	0x0003022c

000d6ca4 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d6ca4:	b508      	push	{r3, lr}
   d6ca6:	4b02      	ldr	r3, [pc, #8]	; (d6cb0 <HAL_Interrupts_Enable_All+0xc>)
   d6ca8:	681b      	ldr	r3, [r3, #0]
   d6caa:	6a1b      	ldr	r3, [r3, #32]
   d6cac:	9301      	str	r3, [sp, #4]
   d6cae:	bd08      	pop	{r3, pc}
   d6cb0:	0003022c 	.word	0x0003022c

000d6cb4 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d6cb4:	b508      	push	{r3, lr}
   d6cb6:	4b02      	ldr	r3, [pc, #8]	; (d6cc0 <HAL_Interrupts_Disable_All+0xc>)
   d6cb8:	681b      	ldr	r3, [r3, #0]
   d6cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6cbc:	9301      	str	r3, [sp, #4]
   d6cbe:	bd08      	pop	{r3, pc}
   d6cc0:	0003022c 	.word	0x0003022c

000d6cc4 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d6cc4:	b508      	push	{r3, lr}
   d6cc6:	4b02      	ldr	r3, [pc, #8]	; (d6cd0 <HAL_SPI_Begin+0xc>)
   d6cc8:	681b      	ldr	r3, [r3, #0]
   d6cca:	681b      	ldr	r3, [r3, #0]
   d6ccc:	9301      	str	r3, [sp, #4]
   d6cce:	bd08      	pop	{r3, pc}
   d6cd0:	00030230 	.word	0x00030230

000d6cd4 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d6cd4:	b508      	push	{r3, lr}
   d6cd6:	4b02      	ldr	r3, [pc, #8]	; (d6ce0 <HAL_SPI_Set_Bit_Order+0xc>)
   d6cd8:	681b      	ldr	r3, [r3, #0]
   d6cda:	689b      	ldr	r3, [r3, #8]
   d6cdc:	9301      	str	r3, [sp, #4]
   d6cde:	bd08      	pop	{r3, pc}
   d6ce0:	00030230 	.word	0x00030230

000d6ce4 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d6ce4:	b508      	push	{r3, lr}
   d6ce6:	4b02      	ldr	r3, [pc, #8]	; (d6cf0 <HAL_SPI_Set_Data_Mode+0xc>)
   d6ce8:	681b      	ldr	r3, [r3, #0]
   d6cea:	68db      	ldr	r3, [r3, #12]
   d6cec:	9301      	str	r3, [sp, #4]
   d6cee:	bd08      	pop	{r3, pc}
   d6cf0:	00030230 	.word	0x00030230

000d6cf4 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d6cf4:	b508      	push	{r3, lr}
   d6cf6:	4b02      	ldr	r3, [pc, #8]	; (d6d00 <HAL_SPI_Set_Clock_Divider+0xc>)
   d6cf8:	681b      	ldr	r3, [r3, #0]
   d6cfa:	691b      	ldr	r3, [r3, #16]
   d6cfc:	9301      	str	r3, [sp, #4]
   d6cfe:	bd08      	pop	{r3, pc}
   d6d00:	00030230 	.word	0x00030230

000d6d04 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d6d04:	b508      	push	{r3, lr}
   d6d06:	4b02      	ldr	r3, [pc, #8]	; (d6d10 <HAL_SPI_Send_Receive_Data+0xc>)
   d6d08:	681b      	ldr	r3, [r3, #0]
   d6d0a:	695b      	ldr	r3, [r3, #20]
   d6d0c:	9301      	str	r3, [sp, #4]
   d6d0e:	bd08      	pop	{r3, pc}
   d6d10:	00030230 	.word	0x00030230

000d6d14 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d6d14:	b508      	push	{r3, lr}
   d6d16:	4b02      	ldr	r3, [pc, #8]	; (d6d20 <HAL_SPI_Init+0xc>)
   d6d18:	681b      	ldr	r3, [r3, #0]
   d6d1a:	69db      	ldr	r3, [r3, #28]
   d6d1c:	9301      	str	r3, [sp, #4]
   d6d1e:	bd08      	pop	{r3, pc}
   d6d20:	00030230 	.word	0x00030230

000d6d24 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d6d24:	b508      	push	{r3, lr}
   d6d26:	4b02      	ldr	r3, [pc, #8]	; (d6d30 <HAL_SPI_Is_Enabled+0xc>)
   d6d28:	681b      	ldr	r3, [r3, #0]
   d6d2a:	6a1b      	ldr	r3, [r3, #32]
   d6d2c:	9301      	str	r3, [sp, #4]
   d6d2e:	bd08      	pop	{r3, pc}
   d6d30:	00030230 	.word	0x00030230

000d6d34 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d6d34:	b508      	push	{r3, lr}
   d6d36:	4b02      	ldr	r3, [pc, #8]	; (d6d40 <HAL_SPI_Info+0xc>)
   d6d38:	681b      	ldr	r3, [r3, #0]
   d6d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6d3c:	9301      	str	r3, [sp, #4]
   d6d3e:	bd08      	pop	{r3, pc}
   d6d40:	00030230 	.word	0x00030230

000d6d44 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d6d44:	b508      	push	{r3, lr}
   d6d46:	4b02      	ldr	r3, [pc, #8]	; (d6d50 <HAL_SPI_DMA_Transfer+0xc>)
   d6d48:	681b      	ldr	r3, [r3, #0]
   d6d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6d4c:	9301      	str	r3, [sp, #4]
   d6d4e:	bd08      	pop	{r3, pc}
   d6d50:	00030230 	.word	0x00030230

000d6d54 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d6d54:	b508      	push	{r3, lr}
   d6d56:	4b02      	ldr	r3, [pc, #8]	; (d6d60 <HAL_SPI_DMA_Transfer_Status+0xc>)
   d6d58:	681b      	ldr	r3, [r3, #0]
   d6d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6d5c:	9301      	str	r3, [sp, #4]
   d6d5e:	bd08      	pop	{r3, pc}
   d6d60:	00030230 	.word	0x00030230

000d6d64 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d6d64:	b508      	push	{r3, lr}
   d6d66:	4b02      	ldr	r3, [pc, #8]	; (d6d70 <HAL_SPI_Set_Settings+0xc>)
   d6d68:	681b      	ldr	r3, [r3, #0]
   d6d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6d6c:	9301      	str	r3, [sp, #4]
   d6d6e:	bd08      	pop	{r3, pc}
   d6d70:	00030230 	.word	0x00030230

000d6d74 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d6d74:	b508      	push	{r3, lr}
   d6d76:	4b02      	ldr	r3, [pc, #8]	; (d6d80 <HAL_SPI_Acquire+0xc>)
   d6d78:	681b      	ldr	r3, [r3, #0]
   d6d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6d7c:	9301      	str	r3, [sp, #4]
   d6d7e:	bd08      	pop	{r3, pc}
   d6d80:	00030230 	.word	0x00030230

000d6d84 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d6d84:	b508      	push	{r3, lr}
   d6d86:	4b02      	ldr	r3, [pc, #8]	; (d6d90 <HAL_SPI_Release+0xc>)
   d6d88:	681b      	ldr	r3, [r3, #0]
   d6d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6d8c:	9301      	str	r3, [sp, #4]
   d6d8e:	bd08      	pop	{r3, pc}
   d6d90:	00030230 	.word	0x00030230

000d6d94 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d6d94:	b508      	push	{r3, lr}
   d6d96:	4b02      	ldr	r3, [pc, #8]	; (d6da0 <if_index_to_name+0xc>)
   d6d98:	681b      	ldr	r3, [r3, #0]
   d6d9a:	695b      	ldr	r3, [r3, #20]
   d6d9c:	9301      	str	r3, [sp, #4]
   d6d9e:	bd08      	pop	{r3, pc}
   d6da0:	0003026c 	.word	0x0003026c

000d6da4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6da4:	b508      	push	{r3, lr}
   d6da6:	4b02      	ldr	r3, [pc, #8]	; (d6db0 <HAL_RNG_GetRandomNumber+0xc>)
   d6da8:	681b      	ldr	r3, [r3, #0]
   d6daa:	685b      	ldr	r3, [r3, #4]
   d6dac:	9301      	str	r3, [sp, #4]
   d6dae:	bd08      	pop	{r3, pc}
   d6db0:	00030218 	.word	0x00030218

000d6db4 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d6db4:	b508      	push	{r3, lr}
   d6db6:	4b02      	ldr	r3, [pc, #8]	; (d6dc0 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d6db8:	681b      	ldr	r3, [r3, #0]
   d6dba:	691b      	ldr	r3, [r3, #16]
   d6dbc:	9301      	str	r3, [sp, #4]
   d6dbe:	bd08      	pop	{r3, pc}
   d6dc0:	00030218 	.word	0x00030218

000d6dc4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6dc4:	b508      	push	{r3, lr}
   d6dc6:	4b02      	ldr	r3, [pc, #8]	; (d6dd0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6dc8:	681b      	ldr	r3, [r3, #0]
   d6dca:	695b      	ldr	r3, [r3, #20]
   d6dcc:	9301      	str	r3, [sp, #4]
   d6dce:	bd08      	pop	{r3, pc}
   d6dd0:	00030218 	.word	0x00030218

000d6dd4 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d6dd4:	b508      	push	{r3, lr}
   d6dd6:	4b02      	ldr	r3, [pc, #8]	; (d6de0 <HAL_RTC_Get_UnixTime+0xc>)
   d6dd8:	681b      	ldr	r3, [r3, #0]
   d6dda:	69db      	ldr	r3, [r3, #28]
   d6ddc:	9301      	str	r3, [sp, #4]
   d6dde:	bd08      	pop	{r3, pc}
   d6de0:	00030218 	.word	0x00030218

000d6de4 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d6de4:	b508      	push	{r3, lr}
   d6de6:	4b02      	ldr	r3, [pc, #8]	; (d6df0 <HAL_EEPROM_Init+0xc>)
   d6de8:	681b      	ldr	r3, [r3, #0]
   d6dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6dec:	9301      	str	r3, [sp, #4]
   d6dee:	bd08      	pop	{r3, pc}
   d6df0:	00030218 	.word	0x00030218

000d6df4 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d6df4:	b508      	push	{r3, lr}
   d6df6:	4b02      	ldr	r3, [pc, #8]	; (d6e00 <HAL_EEPROM_Get+0xc>)
   d6df8:	681b      	ldr	r3, [r3, #0]
   d6dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6dfc:	9301      	str	r3, [sp, #4]
   d6dfe:	bd08      	pop	{r3, pc}
   d6e00:	00030218 	.word	0x00030218

000d6e04 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d6e04:	b508      	push	{r3, lr}
   d6e06:	4b02      	ldr	r3, [pc, #8]	; (d6e10 <HAL_EEPROM_Put+0xc>)
   d6e08:	681b      	ldr	r3, [r3, #0]
   d6e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6e0c:	9301      	str	r3, [sp, #4]
   d6e0e:	bd08      	pop	{r3, pc}
   d6e10:	00030218 	.word	0x00030218

000d6e14 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d6e14:	b508      	push	{r3, lr}
   d6e16:	4b02      	ldr	r3, [pc, #8]	; (d6e20 <HAL_RTC_Time_Is_Valid+0xc>)
   d6e18:	681b      	ldr	r3, [r3, #0]
   d6e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6e1c:	9301      	str	r3, [sp, #4]
   d6e1e:	bd08      	pop	{r3, pc}
   d6e20:	00030218 	.word	0x00030218

000d6e24 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d6e24:	b508      	push	{r3, lr}
   d6e26:	4b02      	ldr	r3, [pc, #8]	; (d6e30 <os_thread_is_current+0xc>)
   d6e28:	681b      	ldr	r3, [r3, #0]
   d6e2a:	689b      	ldr	r3, [r3, #8]
   d6e2c:	9301      	str	r3, [sp, #4]
   d6e2e:	bd08      	pop	{r3, pc}
   d6e30:	00030248 	.word	0x00030248

000d6e34 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d6e34:	b508      	push	{r3, lr}
   d6e36:	4b02      	ldr	r3, [pc, #8]	; (d6e40 <os_thread_yield+0xc>)
   d6e38:	681b      	ldr	r3, [r3, #0]
   d6e3a:	68db      	ldr	r3, [r3, #12]
   d6e3c:	9301      	str	r3, [sp, #4]
   d6e3e:	bd08      	pop	{r3, pc}
   d6e40:	00030248 	.word	0x00030248

000d6e44 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d6e44:	b508      	push	{r3, lr}
   d6e46:	4b02      	ldr	r3, [pc, #8]	; (d6e50 <os_thread_join+0xc>)
   d6e48:	681b      	ldr	r3, [r3, #0]
   d6e4a:	691b      	ldr	r3, [r3, #16]
   d6e4c:	9301      	str	r3, [sp, #4]
   d6e4e:	bd08      	pop	{r3, pc}
   d6e50:	00030248 	.word	0x00030248

000d6e54 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d6e54:	b508      	push	{r3, lr}
   d6e56:	4b02      	ldr	r3, [pc, #8]	; (d6e60 <os_thread_cleanup+0xc>)
   d6e58:	681b      	ldr	r3, [r3, #0]
   d6e5a:	695b      	ldr	r3, [r3, #20]
   d6e5c:	9301      	str	r3, [sp, #4]
   d6e5e:	bd08      	pop	{r3, pc}
   d6e60:	00030248 	.word	0x00030248

000d6e64 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d6e64:	b508      	push	{r3, lr}
   d6e66:	4b02      	ldr	r3, [pc, #8]	; (d6e70 <os_thread_scheduling+0xc>)
   d6e68:	681b      	ldr	r3, [r3, #0]
   d6e6a:	69db      	ldr	r3, [r3, #28]
   d6e6c:	9301      	str	r3, [sp, #4]
   d6e6e:	bd08      	pop	{r3, pc}
   d6e70:	00030248 	.word	0x00030248

000d6e74 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d6e74:	b508      	push	{r3, lr}
   d6e76:	4b02      	ldr	r3, [pc, #8]	; (d6e80 <os_timer_create+0xc>)
   d6e78:	681b      	ldr	r3, [r3, #0]
   d6e7a:	6a1b      	ldr	r3, [r3, #32]
   d6e7c:	9301      	str	r3, [sp, #4]
   d6e7e:	bd08      	pop	{r3, pc}
   d6e80:	00030248 	.word	0x00030248

000d6e84 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d6e84:	b508      	push	{r3, lr}
   d6e86:	4b02      	ldr	r3, [pc, #8]	; (d6e90 <os_timer_destroy+0xc>)
   d6e88:	681b      	ldr	r3, [r3, #0]
   d6e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6e8c:	9301      	str	r3, [sp, #4]
   d6e8e:	bd08      	pop	{r3, pc}
   d6e90:	00030248 	.word	0x00030248

000d6e94 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d6e94:	b508      	push	{r3, lr}
   d6e96:	4b02      	ldr	r3, [pc, #8]	; (d6ea0 <os_timer_get_id+0xc>)
   d6e98:	681b      	ldr	r3, [r3, #0]
   d6e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6e9c:	9301      	str	r3, [sp, #4]
   d6e9e:	bd08      	pop	{r3, pc}
   d6ea0:	00030248 	.word	0x00030248

000d6ea4 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d6ea4:	b508      	push	{r3, lr}
   d6ea6:	4b02      	ldr	r3, [pc, #8]	; (d6eb0 <os_timer_change+0xc>)
   d6ea8:	681b      	ldr	r3, [r3, #0]
   d6eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6eac:	9301      	str	r3, [sp, #4]
   d6eae:	bd08      	pop	{r3, pc}
   d6eb0:	00030248 	.word	0x00030248

000d6eb4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6eb4:	b508      	push	{r3, lr}
   d6eb6:	4b02      	ldr	r3, [pc, #8]	; (d6ec0 <os_mutex_recursive_create+0xc>)
   d6eb8:	681b      	ldr	r3, [r3, #0]
   d6eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6ebc:	9301      	str	r3, [sp, #4]
   d6ebe:	bd08      	pop	{r3, pc}
   d6ec0:	00030248 	.word	0x00030248

000d6ec4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6ec4:	b508      	push	{r3, lr}
   d6ec6:	4b02      	ldr	r3, [pc, #8]	; (d6ed0 <os_mutex_recursive_destroy+0xc>)
   d6ec8:	681b      	ldr	r3, [r3, #0]
   d6eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6ecc:	9301      	str	r3, [sp, #4]
   d6ece:	bd08      	pop	{r3, pc}
   d6ed0:	00030248 	.word	0x00030248

000d6ed4 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d6ed4:	b508      	push	{r3, lr}
   d6ed6:	4b02      	ldr	r3, [pc, #8]	; (d6ee0 <os_timer_set_id+0xc>)
   d6ed8:	681b      	ldr	r3, [r3, #0]
   d6eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d6edc:	9301      	str	r3, [sp, #4]
   d6ede:	bd08      	pop	{r3, pc}
   d6ee0:	00030248 	.word	0x00030248

000d6ee4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6ee4:	b508      	push	{r3, lr}
   d6ee6:	4b02      	ldr	r3, [pc, #8]	; (d6ef0 <inet_inet_ntop+0xc>)
   d6ee8:	681b      	ldr	r3, [r3, #0]
   d6eea:	695b      	ldr	r3, [r3, #20]
   d6eec:	9301      	str	r3, [sp, #4]
   d6eee:	bd08      	pop	{r3, pc}
   d6ef0:	00030264 	.word	0x00030264

000d6ef4 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d6ef4:	b508      	push	{r3, lr}
   d6ef6:	4b02      	ldr	r3, [pc, #8]	; (d6f00 <inet_htonl+0xc>)
   d6ef8:	681b      	ldr	r3, [r3, #0]
   d6efa:	6a1b      	ldr	r3, [r3, #32]
   d6efc:	9301      	str	r3, [sp, #4]
   d6efe:	bd08      	pop	{r3, pc}
   d6f00:	00030264 	.word	0x00030264

000d6f04 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d6f04:	b508      	push	{r3, lr}
   d6f06:	4b02      	ldr	r3, [pc, #8]	; (d6f10 <inet_htons+0xc>)
   d6f08:	681b      	ldr	r3, [r3, #0]
   d6f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6f0c:	9301      	str	r3, [sp, #4]
   d6f0e:	bd08      	pop	{r3, pc}
   d6f10:	00030264 	.word	0x00030264

000d6f14 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d6f14:	b508      	push	{r3, lr}
   d6f16:	4b02      	ldr	r3, [pc, #8]	; (d6f20 <HAL_USART_Init+0xc>)
   d6f18:	681b      	ldr	r3, [r3, #0]
   d6f1a:	681b      	ldr	r3, [r3, #0]
   d6f1c:	9301      	str	r3, [sp, #4]
   d6f1e:	bd08      	pop	{r3, pc}
   d6f20:	0003023c 	.word	0x0003023c

000d6f24 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d6f24:	b508      	push	{r3, lr}
   d6f26:	4b02      	ldr	r3, [pc, #8]	; (d6f30 <HAL_USART_Write_Data+0xc>)
   d6f28:	681b      	ldr	r3, [r3, #0]
   d6f2a:	68db      	ldr	r3, [r3, #12]
   d6f2c:	9301      	str	r3, [sp, #4]
   d6f2e:	bd08      	pop	{r3, pc}
   d6f30:	0003023c 	.word	0x0003023c

000d6f34 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d6f34:	b508      	push	{r3, lr}
   d6f36:	4b02      	ldr	r3, [pc, #8]	; (d6f40 <HAL_USART_Available_Data+0xc>)
   d6f38:	681b      	ldr	r3, [r3, #0]
   d6f3a:	691b      	ldr	r3, [r3, #16]
   d6f3c:	9301      	str	r3, [sp, #4]
   d6f3e:	bd08      	pop	{r3, pc}
   d6f40:	0003023c 	.word	0x0003023c

000d6f44 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d6f44:	b508      	push	{r3, lr}
   d6f46:	4b02      	ldr	r3, [pc, #8]	; (d6f50 <HAL_USART_Read_Data+0xc>)
   d6f48:	681b      	ldr	r3, [r3, #0]
   d6f4a:	695b      	ldr	r3, [r3, #20]
   d6f4c:	9301      	str	r3, [sp, #4]
   d6f4e:	bd08      	pop	{r3, pc}
   d6f50:	0003023c 	.word	0x0003023c

000d6f54 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d6f54:	b508      	push	{r3, lr}
   d6f56:	4b02      	ldr	r3, [pc, #8]	; (d6f60 <HAL_USART_Peek_Data+0xc>)
   d6f58:	681b      	ldr	r3, [r3, #0]
   d6f5a:	699b      	ldr	r3, [r3, #24]
   d6f5c:	9301      	str	r3, [sp, #4]
   d6f5e:	bd08      	pop	{r3, pc}
   d6f60:	0003023c 	.word	0x0003023c

000d6f64 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d6f64:	b508      	push	{r3, lr}
   d6f66:	4b02      	ldr	r3, [pc, #8]	; (d6f70 <HAL_USART_Flush_Data+0xc>)
   d6f68:	681b      	ldr	r3, [r3, #0]
   d6f6a:	69db      	ldr	r3, [r3, #28]
   d6f6c:	9301      	str	r3, [sp, #4]
   d6f6e:	bd08      	pop	{r3, pc}
   d6f70:	0003023c 	.word	0x0003023c

000d6f74 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d6f74:	b508      	push	{r3, lr}
   d6f76:	4b02      	ldr	r3, [pc, #8]	; (d6f80 <HAL_USART_Is_Enabled+0xc>)
   d6f78:	681b      	ldr	r3, [r3, #0]
   d6f7a:	6a1b      	ldr	r3, [r3, #32]
   d6f7c:	9301      	str	r3, [sp, #4]
   d6f7e:	bd08      	pop	{r3, pc}
   d6f80:	0003023c 	.word	0x0003023c

000d6f84 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d6f84:	b508      	push	{r3, lr}
   d6f86:	4b02      	ldr	r3, [pc, #8]	; (d6f90 <HAL_USART_Available_Data_For_Write+0xc>)
   d6f88:	681b      	ldr	r3, [r3, #0]
   d6f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6f8c:	9301      	str	r3, [sp, #4]
   d6f8e:	bd08      	pop	{r3, pc}
   d6f90:	0003023c 	.word	0x0003023c

000d6f94 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d6f94:	b508      	push	{r3, lr}
   d6f96:	4b02      	ldr	r3, [pc, #8]	; (d6fa0 <HAL_I2C_Begin_Transmission+0xc>)
   d6f98:	681b      	ldr	r3, [r3, #0]
   d6f9a:	699b      	ldr	r3, [r3, #24]
   d6f9c:	9301      	str	r3, [sp, #4]
   d6f9e:	bd08      	pop	{r3, pc}
   d6fa0:	00030228 	.word	0x00030228

000d6fa4 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d6fa4:	b508      	push	{r3, lr}
   d6fa6:	4b02      	ldr	r3, [pc, #8]	; (d6fb0 <HAL_I2C_End_Transmission+0xc>)
   d6fa8:	681b      	ldr	r3, [r3, #0]
   d6faa:	69db      	ldr	r3, [r3, #28]
   d6fac:	9301      	str	r3, [sp, #4]
   d6fae:	bd08      	pop	{r3, pc}
   d6fb0:	00030228 	.word	0x00030228

000d6fb4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d6fb4:	b508      	push	{r3, lr}
   d6fb6:	4b02      	ldr	r3, [pc, #8]	; (d6fc0 <HAL_I2C_Write_Data+0xc>)
   d6fb8:	681b      	ldr	r3, [r3, #0]
   d6fba:	6a1b      	ldr	r3, [r3, #32]
   d6fbc:	9301      	str	r3, [sp, #4]
   d6fbe:	bd08      	pop	{r3, pc}
   d6fc0:	00030228 	.word	0x00030228

000d6fc4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d6fc4:	b508      	push	{r3, lr}
   d6fc6:	4b02      	ldr	r3, [pc, #8]	; (d6fd0 <HAL_I2C_Available_Data+0xc>)
   d6fc8:	681b      	ldr	r3, [r3, #0]
   d6fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6fcc:	9301      	str	r3, [sp, #4]
   d6fce:	bd08      	pop	{r3, pc}
   d6fd0:	00030228 	.word	0x00030228

000d6fd4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d6fd4:	b508      	push	{r3, lr}
   d6fd6:	4b02      	ldr	r3, [pc, #8]	; (d6fe0 <HAL_I2C_Read_Data+0xc>)
   d6fd8:	681b      	ldr	r3, [r3, #0]
   d6fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6fdc:	9301      	str	r3, [sp, #4]
   d6fde:	bd08      	pop	{r3, pc}
   d6fe0:	00030228 	.word	0x00030228

000d6fe4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d6fe4:	b508      	push	{r3, lr}
   d6fe6:	4b02      	ldr	r3, [pc, #8]	; (d6ff0 <HAL_I2C_Peek_Data+0xc>)
   d6fe8:	681b      	ldr	r3, [r3, #0]
   d6fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6fec:	9301      	str	r3, [sp, #4]
   d6fee:	bd08      	pop	{r3, pc}
   d6ff0:	00030228 	.word	0x00030228

000d6ff4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d6ff4:	b508      	push	{r3, lr}
   d6ff6:	4b02      	ldr	r3, [pc, #8]	; (d7000 <HAL_I2C_Flush_Data+0xc>)
   d6ff8:	681b      	ldr	r3, [r3, #0]
   d6ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6ffc:	9301      	str	r3, [sp, #4]
   d6ffe:	bd08      	pop	{r3, pc}
   d7000:	00030228 	.word	0x00030228

000d7004 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d7004:	b508      	push	{r3, lr}
   d7006:	4b02      	ldr	r3, [pc, #8]	; (d7010 <HAL_I2C_Is_Enabled+0xc>)
   d7008:	681b      	ldr	r3, [r3, #0]
   d700a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d700c:	9301      	str	r3, [sp, #4]
   d700e:	bd08      	pop	{r3, pc}
   d7010:	00030228 	.word	0x00030228

000d7014 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d7014:	b508      	push	{r3, lr}
   d7016:	4b02      	ldr	r3, [pc, #8]	; (d7020 <HAL_I2C_Init+0xc>)
   d7018:	681b      	ldr	r3, [r3, #0]
   d701a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d701c:	9301      	str	r3, [sp, #4]
   d701e:	bd08      	pop	{r3, pc}
   d7020:	00030228 	.word	0x00030228

000d7024 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d7024:	b508      	push	{r3, lr}
   d7026:	4b02      	ldr	r3, [pc, #8]	; (d7030 <HAL_I2C_Acquire+0xc>)
   d7028:	681b      	ldr	r3, [r3, #0]
   d702a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d702c:	9301      	str	r3, [sp, #4]
   d702e:	bd08      	pop	{r3, pc}
   d7030:	00030228 	.word	0x00030228

000d7034 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d7034:	b508      	push	{r3, lr}
   d7036:	4b02      	ldr	r3, [pc, #8]	; (d7040 <HAL_I2C_Release+0xc>)
   d7038:	681b      	ldr	r3, [r3, #0]
   d703a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d703c:	9301      	str	r3, [sp, #4]
   d703e:	bd08      	pop	{r3, pc}
   d7040:	00030228 	.word	0x00030228

000d7044 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d7044:	b508      	push	{r3, lr}
   d7046:	4b02      	ldr	r3, [pc, #8]	; (d7050 <HAL_I2C_Request_Data_Ex+0xc>)
   d7048:	681b      	ldr	r3, [r3, #0]
   d704a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d704c:	9301      	str	r3, [sp, #4]
   d704e:	bd08      	pop	{r3, pc}
   d7050:	00030228 	.word	0x00030228

000d7054 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d7054:	b508      	push	{r3, lr}
   d7056:	4b02      	ldr	r3, [pc, #8]	; (d7060 <sock_setsockopt+0xc>)
   d7058:	681b      	ldr	r3, [r3, #0]
   d705a:	699b      	ldr	r3, [r3, #24]
   d705c:	9301      	str	r3, [sp, #4]
   d705e:	bd08      	pop	{r3, pc}
   d7060:	00030238 	.word	0x00030238

000d7064 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d7064:	b508      	push	{r3, lr}
   d7066:	4b02      	ldr	r3, [pc, #8]	; (d7070 <sock_close+0xc>)
   d7068:	681b      	ldr	r3, [r3, #0]
   d706a:	69db      	ldr	r3, [r3, #28]
   d706c:	9301      	str	r3, [sp, #4]
   d706e:	bd08      	pop	{r3, pc}
   d7070:	00030238 	.word	0x00030238

000d7074 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d7074:	b508      	push	{r3, lr}
   d7076:	4b02      	ldr	r3, [pc, #8]	; (d7080 <sock_connect+0xc>)
   d7078:	681b      	ldr	r3, [r3, #0]
   d707a:	6a1b      	ldr	r3, [r3, #32]
   d707c:	9301      	str	r3, [sp, #4]
   d707e:	bd08      	pop	{r3, pc}
   d7080:	00030238 	.word	0x00030238

000d7084 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d7084:	b508      	push	{r3, lr}
   d7086:	4b02      	ldr	r3, [pc, #8]	; (d7090 <sock_recv+0xc>)
   d7088:	681b      	ldr	r3, [r3, #0]
   d708a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d708c:	9301      	str	r3, [sp, #4]
   d708e:	bd08      	pop	{r3, pc}
   d7090:	00030238 	.word	0x00030238

000d7094 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d7094:	b508      	push	{r3, lr}
   d7096:	4b02      	ldr	r3, [pc, #8]	; (d70a0 <sock_send+0xc>)
   d7098:	681b      	ldr	r3, [r3, #0]
   d709a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d709c:	9301      	str	r3, [sp, #4]
   d709e:	bd08      	pop	{r3, pc}
   d70a0:	00030238 	.word	0x00030238

000d70a4 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d70a4:	b508      	push	{r3, lr}
   d70a6:	4b02      	ldr	r3, [pc, #8]	; (d70b0 <sock_socket+0xc>)
   d70a8:	681b      	ldr	r3, [r3, #0]
   d70aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d70ac:	9301      	str	r3, [sp, #4]
   d70ae:	bd08      	pop	{r3, pc}
   d70b0:	00030238 	.word	0x00030238

000d70b4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d70b4:	b508      	push	{r3, lr}
   d70b6:	4b02      	ldr	r3, [pc, #8]	; (d70c0 <HAL_USB_USART_Init+0xc>)
   d70b8:	681b      	ldr	r3, [r3, #0]
   d70ba:	681b      	ldr	r3, [r3, #0]
   d70bc:	9301      	str	r3, [sp, #4]
   d70be:	bd08      	pop	{r3, pc}
   d70c0:	0003024c 	.word	0x0003024c

000d70c4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d70c4:	b508      	push	{r3, lr}
   d70c6:	4b02      	ldr	r3, [pc, #8]	; (d70d0 <HAL_USB_USART_Begin+0xc>)
   d70c8:	681b      	ldr	r3, [r3, #0]
   d70ca:	685b      	ldr	r3, [r3, #4]
   d70cc:	9301      	str	r3, [sp, #4]
   d70ce:	bd08      	pop	{r3, pc}
   d70d0:	0003024c 	.word	0x0003024c

000d70d4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d70d4:	b508      	push	{r3, lr}
   d70d6:	4b02      	ldr	r3, [pc, #8]	; (d70e0 <HAL_USB_USART_Available_Data+0xc>)
   d70d8:	681b      	ldr	r3, [r3, #0]
   d70da:	691b      	ldr	r3, [r3, #16]
   d70dc:	9301      	str	r3, [sp, #4]
   d70de:	bd08      	pop	{r3, pc}
   d70e0:	0003024c 	.word	0x0003024c

000d70e4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d70e4:	b508      	push	{r3, lr}
   d70e6:	4b02      	ldr	r3, [pc, #8]	; (d70f0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d70e8:	681b      	ldr	r3, [r3, #0]
   d70ea:	695b      	ldr	r3, [r3, #20]
   d70ec:	9301      	str	r3, [sp, #4]
   d70ee:	bd08      	pop	{r3, pc}
   d70f0:	0003024c 	.word	0x0003024c

000d70f4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d70f4:	b508      	push	{r3, lr}
   d70f6:	4b02      	ldr	r3, [pc, #8]	; (d7100 <HAL_USB_USART_Receive_Data+0xc>)
   d70f8:	681b      	ldr	r3, [r3, #0]
   d70fa:	699b      	ldr	r3, [r3, #24]
   d70fc:	9301      	str	r3, [sp, #4]
   d70fe:	bd08      	pop	{r3, pc}
   d7100:	0003024c 	.word	0x0003024c

000d7104 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7104:	b508      	push	{r3, lr}
   d7106:	4b02      	ldr	r3, [pc, #8]	; (d7110 <HAL_USB_USART_Send_Data+0xc>)
   d7108:	681b      	ldr	r3, [r3, #0]
   d710a:	69db      	ldr	r3, [r3, #28]
   d710c:	9301      	str	r3, [sp, #4]
   d710e:	bd08      	pop	{r3, pc}
   d7110:	0003024c 	.word	0x0003024c

000d7114 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d7114:	b508      	push	{r3, lr}
   d7116:	4b02      	ldr	r3, [pc, #8]	; (d7120 <HAL_USB_USART_Flush_Data+0xc>)
   d7118:	681b      	ldr	r3, [r3, #0]
   d711a:	6a1b      	ldr	r3, [r3, #32]
   d711c:	9301      	str	r3, [sp, #4]
   d711e:	bd08      	pop	{r3, pc}
   d7120:	0003024c 	.word	0x0003024c

000d7124 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d7124:	b508      	push	{r3, lr}
   d7126:	4b02      	ldr	r3, [pc, #8]	; (d7130 <log_message+0xc>)
   d7128:	681b      	ldr	r3, [r3, #0]
   d712a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d712c:	9301      	str	r3, [sp, #4]
   d712e:	bd08      	pop	{r3, pc}
   d7130:	00030260 	.word	0x00030260

000d7134 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d7134:	b508      	push	{r3, lr}
   d7136:	4b02      	ldr	r3, [pc, #8]	; (d7140 <system_mode+0xc>)
   d7138:	681b      	ldr	r3, [r3, #0]
   d713a:	681b      	ldr	r3, [r3, #0]
   d713c:	9301      	str	r3, [sp, #4]
   d713e:	bd08      	pop	{r3, pc}
   d7140:	00030220 	.word	0x00030220

000d7144 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d7144:	b508      	push	{r3, lr}
   d7146:	4b02      	ldr	r3, [pc, #8]	; (d7150 <set_system_mode+0xc>)
   d7148:	681b      	ldr	r3, [r3, #0]
   d714a:	685b      	ldr	r3, [r3, #4]
   d714c:	9301      	str	r3, [sp, #4]
   d714e:	bd08      	pop	{r3, pc}
   d7150:	00030220 	.word	0x00030220

000d7154 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d7154:	b508      	push	{r3, lr}
   d7156:	4b02      	ldr	r3, [pc, #8]	; (d7160 <system_delay_ms+0xc>)
   d7158:	681b      	ldr	r3, [r3, #0]
   d715a:	695b      	ldr	r3, [r3, #20]
   d715c:	9301      	str	r3, [sp, #4]
   d715e:	bd08      	pop	{r3, pc}
   d7160:	00030220 	.word	0x00030220

000d7164 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d7164:	b508      	push	{r3, lr}
   d7166:	4b02      	ldr	r3, [pc, #8]	; (d7170 <system_thread_set_state+0xc>)
   d7168:	681b      	ldr	r3, [r3, #0]
   d716a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d716c:	9301      	str	r3, [sp, #4]
   d716e:	bd08      	pop	{r3, pc}
   d7170:	00030220 	.word	0x00030220

000d7174 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d7174:	b508      	push	{r3, lr}
   d7176:	4b02      	ldr	r3, [pc, #8]	; (d7180 <system_thread_get_state+0xc>)
   d7178:	681b      	ldr	r3, [r3, #0]
   d717a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d717c:	9301      	str	r3, [sp, #4]
   d717e:	bd08      	pop	{r3, pc}
   d7180:	00030220 	.word	0x00030220

000d7184 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d7184:	b508      	push	{r3, lr}
   d7186:	4b03      	ldr	r3, [pc, #12]	; (d7194 <system_ctrl_set_app_request_handler+0x10>)
   d7188:	681b      	ldr	r3, [r3, #0]
   d718a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d718e:	9301      	str	r3, [sp, #4]
   d7190:	bd08      	pop	{r3, pc}
   d7192:	0000      	.short	0x0000
   d7194:	00030220 	.word	0x00030220

000d7198 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d7198:	b508      	push	{r3, lr}
   d719a:	4b03      	ldr	r3, [pc, #12]	; (d71a8 <system_ctrl_set_result+0x10>)
   d719c:	681b      	ldr	r3, [r3, #0]
   d719e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d71a2:	9301      	str	r3, [sp, #4]
   d71a4:	bd08      	pop	{r3, pc}
   d71a6:	0000      	.short	0x0000
   d71a8:	00030220 	.word	0x00030220

000d71ac <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d71ac:	b508      	push	{r3, lr}
   d71ae:	4b02      	ldr	r3, [pc, #8]	; (d71b8 <network_connect+0xc>)
   d71b0:	681b      	ldr	r3, [r3, #0]
   d71b2:	685b      	ldr	r3, [r3, #4]
   d71b4:	9301      	str	r3, [sp, #4]
   d71b6:	bd08      	pop	{r3, pc}
   d71b8:	00030240 	.word	0x00030240

000d71bc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d71bc:	b508      	push	{r3, lr}
   d71be:	4b02      	ldr	r3, [pc, #8]	; (d71c8 <network_connecting+0xc>)
   d71c0:	681b      	ldr	r3, [r3, #0]
   d71c2:	689b      	ldr	r3, [r3, #8]
   d71c4:	9301      	str	r3, [sp, #4]
   d71c6:	bd08      	pop	{r3, pc}
   d71c8:	00030240 	.word	0x00030240

000d71cc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d71cc:	b508      	push	{r3, lr}
   d71ce:	4b02      	ldr	r3, [pc, #8]	; (d71d8 <network_disconnect+0xc>)
   d71d0:	681b      	ldr	r3, [r3, #0]
   d71d2:	68db      	ldr	r3, [r3, #12]
   d71d4:	9301      	str	r3, [sp, #4]
   d71d6:	bd08      	pop	{r3, pc}
   d71d8:	00030240 	.word	0x00030240

000d71dc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d71dc:	b508      	push	{r3, lr}
   d71de:	4b02      	ldr	r3, [pc, #8]	; (d71e8 <network_ready+0xc>)
   d71e0:	681b      	ldr	r3, [r3, #0]
   d71e2:	691b      	ldr	r3, [r3, #16]
   d71e4:	9301      	str	r3, [sp, #4]
   d71e6:	bd08      	pop	{r3, pc}
   d71e8:	00030240 	.word	0x00030240

000d71ec <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d71ec:	b508      	push	{r3, lr}
   d71ee:	4b02      	ldr	r3, [pc, #8]	; (d71f8 <network_on+0xc>)
   d71f0:	681b      	ldr	r3, [r3, #0]
   d71f2:	695b      	ldr	r3, [r3, #20]
   d71f4:	9301      	str	r3, [sp, #4]
   d71f6:	bd08      	pop	{r3, pc}
   d71f8:	00030240 	.word	0x00030240

000d71fc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d71fc:	b508      	push	{r3, lr}
   d71fe:	4b02      	ldr	r3, [pc, #8]	; (d7208 <network_off+0xc>)
   d7200:	681b      	ldr	r3, [r3, #0]
   d7202:	699b      	ldr	r3, [r3, #24]
   d7204:	9301      	str	r3, [sp, #4]
   d7206:	bd08      	pop	{r3, pc}
   d7208:	00030240 	.word	0x00030240

000d720c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d720c:	b508      	push	{r3, lr}
   d720e:	4b02      	ldr	r3, [pc, #8]	; (d7218 <network_listen+0xc>)
   d7210:	681b      	ldr	r3, [r3, #0]
   d7212:	69db      	ldr	r3, [r3, #28]
   d7214:	9301      	str	r3, [sp, #4]
   d7216:	bd08      	pop	{r3, pc}
   d7218:	00030240 	.word	0x00030240

000d721c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d721c:	b508      	push	{r3, lr}
   d721e:	4b02      	ldr	r3, [pc, #8]	; (d7228 <network_listening+0xc>)
   d7220:	681b      	ldr	r3, [r3, #0]
   d7222:	6a1b      	ldr	r3, [r3, #32]
   d7224:	9301      	str	r3, [sp, #4]
   d7226:	bd08      	pop	{r3, pc}
   d7228:	00030240 	.word	0x00030240

000d722c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d722c:	b508      	push	{r3, lr}
   d722e:	4b02      	ldr	r3, [pc, #8]	; (d7238 <network_set_listen_timeout+0xc>)
   d7230:	681b      	ldr	r3, [r3, #0]
   d7232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7234:	9301      	str	r3, [sp, #4]
   d7236:	bd08      	pop	{r3, pc}
   d7238:	00030240 	.word	0x00030240

000d723c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d723c:	b508      	push	{r3, lr}
   d723e:	4b02      	ldr	r3, [pc, #8]	; (d7248 <network_get_listen_timeout+0xc>)
   d7240:	681b      	ldr	r3, [r3, #0]
   d7242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7244:	9301      	str	r3, [sp, #4]
   d7246:	bd08      	pop	{r3, pc}
   d7248:	00030240 	.word	0x00030240

000d724c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d724c:	b508      	push	{r3, lr}
   d724e:	4b02      	ldr	r3, [pc, #8]	; (d7258 <spark_process+0xc>)
   d7250:	681b      	ldr	r3, [r3, #0]
   d7252:	689b      	ldr	r3, [r3, #8]
   d7254:	9301      	str	r3, [sp, #4]
   d7256:	bd08      	pop	{r3, pc}
   d7258:	00030244 	.word	0x00030244

000d725c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d725c:	b508      	push	{r3, lr}
   d725e:	4b02      	ldr	r3, [pc, #8]	; (d7268 <spark_cloud_flag_connected+0xc>)
   d7260:	681b      	ldr	r3, [r3, #0]
   d7262:	695b      	ldr	r3, [r3, #20]
   d7264:	9301      	str	r3, [sp, #4]
   d7266:	bd08      	pop	{r3, pc}
   d7268:	00030244 	.word	0x00030244

000d726c <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d726c:	b508      	push	{r3, lr}
   d726e:	4b02      	ldr	r3, [pc, #8]	; (d7278 <spark_sync_time+0xc>)
   d7270:	681b      	ldr	r3, [r3, #0]
   d7272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7274:	9301      	str	r3, [sp, #4]
   d7276:	bd08      	pop	{r3, pc}
   d7278:	00030244 	.word	0x00030244

000d727c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d727c:	b508      	push	{r3, lr}
   d727e:	4b02      	ldr	r3, [pc, #8]	; (d7288 <spark_sync_time_pending+0xc>)
   d7280:	681b      	ldr	r3, [r3, #0]
   d7282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7284:	9301      	str	r3, [sp, #4]
   d7286:	bd08      	pop	{r3, pc}
   d7288:	00030244 	.word	0x00030244

000d728c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d728c:	b508      	push	{r3, lr}
   d728e:	4b02      	ldr	r3, [pc, #8]	; (d7298 <spark_set_random_seed_from_cloud_handler+0xc>)
   d7290:	681b      	ldr	r3, [r3, #0]
   d7292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7294:	9301      	str	r3, [sp, #4]
   d7296:	bd08      	pop	{r3, pc}
   d7298:	00030244 	.word	0x00030244

000d729c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d729c:	b508      	push	{r3, lr}
   d729e:	4b02      	ldr	r3, [pc, #8]	; (d72a8 <malloc+0xc>)
   d72a0:	681b      	ldr	r3, [r3, #0]
   d72a2:	681b      	ldr	r3, [r3, #0]
   d72a4:	9301      	str	r3, [sp, #4]
   d72a6:	bd08      	pop	{r3, pc}
   d72a8:	0003021c 	.word	0x0003021c

000d72ac <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d72ac:	b508      	push	{r3, lr}
   d72ae:	4b02      	ldr	r3, [pc, #8]	; (d72b8 <free+0xc>)
   d72b0:	681b      	ldr	r3, [r3, #0]
   d72b2:	685b      	ldr	r3, [r3, #4]
   d72b4:	9301      	str	r3, [sp, #4]
   d72b6:	bd08      	pop	{r3, pc}
   d72b8:	0003021c 	.word	0x0003021c

000d72bc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d72bc:	b508      	push	{r3, lr}
   d72be:	4b02      	ldr	r3, [pc, #8]	; (d72c8 <realloc+0xc>)
   d72c0:	681b      	ldr	r3, [r3, #0]
   d72c2:	689b      	ldr	r3, [r3, #8]
   d72c4:	9301      	str	r3, [sp, #4]
   d72c6:	bd08      	pop	{r3, pc}
   d72c8:	0003021c 	.word	0x0003021c

000d72cc <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d72cc:	b508      	push	{r3, lr}
   d72ce:	4b02      	ldr	r3, [pc, #8]	; (d72d8 <vsnprintf+0xc>)
   d72d0:	681b      	ldr	r3, [r3, #0]
   d72d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d72d4:	9301      	str	r3, [sp, #4]
   d72d6:	bd08      	pop	{r3, pc}
   d72d8:	0003021c 	.word	0x0003021c

000d72dc <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d72dc:	b508      	push	{r3, lr}
   d72de:	4b02      	ldr	r3, [pc, #8]	; (d72e8 <__errno+0xc>)
   d72e0:	681b      	ldr	r3, [r3, #0]
   d72e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d72e4:	9301      	str	r3, [sp, #4]
   d72e6:	bd08      	pop	{r3, pc}
   d72e8:	0003021c 	.word	0x0003021c

000d72ec <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d72ec:	2200      	movs	r2, #0
   d72ee:	4611      	mov	r1, r2
   d72f0:	6840      	ldr	r0, [r0, #4]
   d72f2:	f7ff bf93 	b.w	d721c <network_listening>

000d72f6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d72f6:	2200      	movs	r2, #0
   d72f8:	4611      	mov	r1, r2
   d72fa:	6840      	ldr	r0, [r0, #4]
   d72fc:	f7ff bf9e 	b.w	d723c <network_get_listen_timeout>

000d7300 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7300:	2200      	movs	r2, #0
   d7302:	6840      	ldr	r0, [r0, #4]
   d7304:	f7ff bf92 	b.w	d722c <network_set_listen_timeout>

000d7308 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7308:	2200      	movs	r2, #0
   d730a:	f081 0101 	eor.w	r1, r1, #1
   d730e:	6840      	ldr	r0, [r0, #4]
   d7310:	f7ff bf7c 	b.w	d720c <network_listen>

000d7314 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d7314:	2300      	movs	r3, #0
   d7316:	461a      	mov	r2, r3
   d7318:	4619      	mov	r1, r3
   d731a:	6840      	ldr	r0, [r0, #4]
   d731c:	f7ff bf6e 	b.w	d71fc <network_off>

000d7320 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7320:	2300      	movs	r3, #0
   d7322:	461a      	mov	r2, r3
   d7324:	4619      	mov	r1, r3
   d7326:	6840      	ldr	r0, [r0, #4]
   d7328:	f7ff bf60 	b.w	d71ec <network_on>

000d732c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d732c:	2200      	movs	r2, #0
   d732e:	4611      	mov	r1, r2
   d7330:	6840      	ldr	r0, [r0, #4]
   d7332:	f7ff bf53 	b.w	d71dc <network_ready>

000d7336 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7336:	2200      	movs	r2, #0
   d7338:	4611      	mov	r1, r2
   d733a:	6840      	ldr	r0, [r0, #4]
   d733c:	f7ff bf3e 	b.w	d71bc <network_connecting>

000d7340 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7340:	2200      	movs	r2, #0
   d7342:	2102      	movs	r1, #2
   d7344:	6840      	ldr	r0, [r0, #4]
   d7346:	f7ff bf41 	b.w	d71cc <network_disconnect>

000d734a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d734a:	2300      	movs	r3, #0
   d734c:	461a      	mov	r2, r3
   d734e:	6840      	ldr	r0, [r0, #4]
   d7350:	f7ff bf2c 	b.w	d71ac <network_connect>

000d7354 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d7354:	4b02      	ldr	r3, [pc, #8]	; (d7360 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d7356:	2203      	movs	r2, #3
   d7358:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d735a:	4a02      	ldr	r2, [pc, #8]	; (d7364 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d735c:	601a      	str	r2, [r3, #0]
   d735e:	4770      	bx	lr
   d7360:	2003e1ac 	.word	0x2003e1ac
   d7364:	000d9ab4 	.word	0x000d9ab4

000d7368 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d7368:	2100      	movs	r1, #0
   d736a:	f7ff bd03 	b.w	d6d74 <HAL_SPI_Acquire>

000d736e <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d736e:	2100      	movs	r1, #0
   d7370:	f7ff bd08 	b.w	d6d84 <HAL_SPI_Release>

000d7374 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d7374:	b510      	push	{r4, lr}
   d7376:	4604      	mov	r4, r0
{
    _spi = spi;
   d7378:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d737a:	4608      	mov	r0, r1
   d737c:	f7ff fcca 	bl	d6d14 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7380:	2300      	movs	r3, #0
   d7382:	6063      	str	r3, [r4, #4]
}
   d7384:	4620      	mov	r0, r4
   d7386:	bd10      	pop	{r4, pc}

000d7388 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d7388:	b510      	push	{r4, lr}
   d738a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d738c:	7800      	ldrb	r0, [r0, #0]
   d738e:	f7ff ffeb 	bl	d7368 <_ZN8SPIClass4lockEv.isra.0>
   d7392:	b948      	cbnz	r0, d73a8 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d7394:	7820      	ldrb	r0, [r4, #0]
   d7396:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d739a:	f7ff fc93 	bl	d6cc4 <HAL_SPI_Begin>
        unlock();
   d739e:	7820      	ldrb	r0, [r4, #0]
    }
}
   d73a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d73a4:	f7ff bfe3 	b.w	d736e <_ZN8SPIClass6unlockEv.isra.1>
   d73a8:	bd10      	pop	{r4, pc}

000d73aa <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d73aa:	b538      	push	{r3, r4, r5, lr}
   d73ac:	4604      	mov	r4, r0
    if (!lock())
   d73ae:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d73b0:	460d      	mov	r5, r1
    if (!lock())
   d73b2:	f7ff ffd9 	bl	d7368 <_ZN8SPIClass4lockEv.isra.0>
   d73b6:	b940      	cbnz	r0, d73ca <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d73b8:	7820      	ldrb	r0, [r4, #0]
   d73ba:	4629      	mov	r1, r5
   d73bc:	f7ff fc8a 	bl	d6cd4 <HAL_SPI_Set_Bit_Order>
        unlock();
   d73c0:	7820      	ldrb	r0, [r4, #0]
    }
}
   d73c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d73c6:	f7ff bfd2 	b.w	d736e <_ZN8SPIClass6unlockEv.isra.1>
   d73ca:	bd38      	pop	{r3, r4, r5, pc}

000d73cc <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d73cc:	b538      	push	{r3, r4, r5, lr}
   d73ce:	4604      	mov	r4, r0
    if (!lock())
   d73d0:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d73d2:	460d      	mov	r5, r1
    if (!lock())
   d73d4:	f7ff ffc8 	bl	d7368 <_ZN8SPIClass4lockEv.isra.0>
   d73d8:	b940      	cbnz	r0, d73ec <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d73da:	7820      	ldrb	r0, [r4, #0]
   d73dc:	4629      	mov	r1, r5
   d73de:	f7ff fc81 	bl	d6ce4 <HAL_SPI_Set_Data_Mode>
        unlock();
   d73e2:	7820      	ldrb	r0, [r4, #0]
    }
}
   d73e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d73e8:	f7ff bfc1 	b.w	d736e <_ZN8SPIClass6unlockEv.isra.1>
   d73ec:	bd38      	pop	{r3, r4, r5, pc}

000d73ee <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d73ee:	7800      	ldrb	r0, [r0, #0]
   d73f0:	f7ff bfbd 	b.w	d736e <_ZN8SPIClass6unlockEv.isra.1>

000d73f4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d73f4:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d73f6:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d73f8:	6018      	str	r0, [r3, #0]
   d73fa:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d73fc:	6818      	ldr	r0, [r3, #0]
   d73fe:	4288      	cmp	r0, r1
   d7400:	b2e5      	uxtb	r5, r4
   d7402:	d906      	bls.n	d7412 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d7404:	3401      	adds	r4, #1
   d7406:	2c08      	cmp	r4, #8
   d7408:	d002      	beq.n	d7410 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d740a:	0840      	lsrs	r0, r0, #1
   d740c:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d740e:	e7f5      	b.n	d73fc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d7410:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d7412:	4b02      	ldr	r3, [pc, #8]	; (d741c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d7414:	5d5b      	ldrb	r3, [r3, r5]
   d7416:	7013      	strb	r3, [r2, #0]
   d7418:	bd30      	pop	{r4, r5, pc}
   d741a:	bf00      	nop
   d741c:	000d9ae0 	.word	0x000d9ae0

000d7420 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d7420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7424:	4607      	mov	r7, r0
   d7426:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d7428:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d742a:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d742c:	f7ff ff9c 	bl	d7368 <_ZN8SPIClass4lockEv.isra.0>
   d7430:	2800      	cmp	r0, #0
   d7432:	db62      	blt.n	d74fa <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d7434:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d7436:	2214      	movs	r2, #20
   d7438:	2100      	movs	r1, #0
   d743a:	a809      	add	r0, sp, #36	; 0x24
   d743c:	f002 f977 	bl	d972e <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d7440:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d7442:	4620      	mov	r0, r4
   d7444:	2200      	movs	r2, #0
   d7446:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d7448:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d744c:	f7ff fc72 	bl	d6d34 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d7450:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d7454:	b154      	cbz	r4, d746c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d7456:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d745a:	b935      	cbnz	r5, d746a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d745c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d7460:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d7464:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d7468:	e003      	b.n	d7472 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d746a:	2400      	movs	r4, #0
   d746c:	46a1      	mov	r9, r4
   d746e:	46a0      	mov	r8, r4
   d7470:	2501      	movs	r5, #1
   d7472:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d7474:	b105      	cbz	r5, d7478 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d7476:	b9bb      	cbnz	r3, d74a8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d7478:	429d      	cmp	r5, r3
   d747a:	d10b      	bne.n	d7494 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d747c:	68b2      	ldr	r2, [r6, #8]
   d747e:	4542      	cmp	r2, r8
   d7480:	d108      	bne.n	d7494 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d7482:	f88d 9020 	strb.w	r9, [sp, #32]
   d7486:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d748a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d748e:	89b2      	ldrh	r2, [r6, #12]
   d7490:	4291      	cmp	r1, r2
   d7492:	d009      	beq.n	d74a8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d7494:	b153      	cbz	r3, d74ac <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d7496:	2400      	movs	r4, #0
   d7498:	7838      	ldrb	r0, [r7, #0]
   d749a:	9401      	str	r4, [sp, #4]
   d749c:	9400      	str	r4, [sp, #0]
   d749e:	4623      	mov	r3, r4
   d74a0:	4622      	mov	r2, r4
   d74a2:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d74a4:	f7ff fc5e 	bl	d6d64 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d74a8:	2000      	movs	r0, #0
   d74aa:	e026      	b.n	d74fa <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d74ac:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d74b0:	68b1      	ldr	r1, [r6, #8]
   d74b2:	980a      	ldr	r0, [sp, #40]	; 0x28
   d74b4:	ab04      	add	r3, sp, #16
   d74b6:	f10d 020f 	add.w	r2, sp, #15
   d74ba:	f7ff ff9b 	bl	d73f4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d74be:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d74c0:	b105      	cbz	r5, d74c4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d74c2:	b9b1      	cbnz	r1, d74f2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d74c4:	42a9      	cmp	r1, r5
   d74c6:	d008      	beq.n	d74da <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d74c8:	2400      	movs	r4, #0
   d74ca:	7838      	ldrb	r0, [r7, #0]
   d74cc:	9401      	str	r4, [sp, #4]
   d74ce:	7b74      	ldrb	r4, [r6, #13]
   d74d0:	7b33      	ldrb	r3, [r6, #12]
   d74d2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d74d6:	9400      	str	r4, [sp, #0]
   d74d8:	e7e4      	b.n	d74a4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d74da:	68b3      	ldr	r3, [r6, #8]
   d74dc:	4543      	cmp	r3, r8
   d74de:	d3f3      	bcc.n	d74c8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d74e0:	f88d 9020 	strb.w	r9, [sp, #32]
   d74e4:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d74e8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d74ec:	89b3      	ldrh	r3, [r6, #12]
   d74ee:	429a      	cmp	r2, r3
   d74f0:	d1ea      	bne.n	d74c8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d74f2:	9b04      	ldr	r3, [sp, #16]
   d74f4:	4543      	cmp	r3, r8
   d74f6:	d1e7      	bne.n	d74c8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d74f8:	e7d6      	b.n	d74a8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d74fa:	b00f      	add	sp, #60	; 0x3c
   d74fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7500 <_ZN8SPIClass13setClockSpeedEjj>:
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d7500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7504:	b088      	sub	sp, #32
    unsigned clock = 0;
   d7506:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d7508:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d750a:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d750c:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d750e:	460e      	mov	r6, r1
   d7510:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d7512:	f7ff ff29 	bl	d7368 <_ZN8SPIClass4lockEv.isra.0>
   d7516:	4605      	mov	r5, r0
   d7518:	bb00      	cbnz	r0, d755c <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d751a:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d751e:	4601      	mov	r1, r0
   d7520:	2214      	movs	r2, #20
   d7522:	a803      	add	r0, sp, #12
   d7524:	f002 f903 	bl	d972e <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d7528:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d752a:	462a      	mov	r2, r5
   d752c:	a903      	add	r1, sp, #12
   d752e:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d7530:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d7534:	f7ff fbfe 	bl	d6d34 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d7538:	ab02      	add	r3, sp, #8
   d753a:	f10d 0207 	add.w	r2, sp, #7
   d753e:	fb07 f106 	mul.w	r1, r7, r6
   d7542:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d7544:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d7548:	f7ff ff54 	bl	d73f4 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d754c:	7820      	ldrb	r0, [r4, #0]
   d754e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d7552:	f7ff fbcf 	bl	d6cf4 <HAL_SPI_Set_Clock_Divider>
        unlock();
   d7556:	7820      	ldrb	r0, [r4, #0]
   d7558:	f7ff ff09 	bl	d736e <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d755c:	9802      	ldr	r0, [sp, #8]
   d755e:	b008      	add	sp, #32
   d7560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7564 <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d7564:	b538      	push	{r3, r4, r5, lr}
   d7566:	4604      	mov	r4, r0
    if (!lock())
   d7568:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d756a:	460d      	mov	r5, r1
    if (!lock())
   d756c:	f7ff fefc 	bl	d7368 <_ZN8SPIClass4lockEv.isra.0>
   d7570:	b9c8      	cbnz	r0, d75a6 <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d7572:	6861      	ldr	r1, [r4, #4]
   d7574:	b171      	cbz	r1, d7594 <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d7576:	4b0c      	ldr	r3, [pc, #48]	; (d75a8 <_ZN8SPIClass15setClockDividerEh+0x44>)
   d7578:	5cc2      	ldrb	r2, [r0, r3]
   d757a:	42aa      	cmp	r2, r5
   d757c:	d002      	beq.n	d7584 <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d757e:	3001      	adds	r0, #1
   d7580:	2808      	cmp	r0, #8
   d7582:	d1f9      	bne.n	d7578 <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d7584:	3001      	adds	r0, #1
   d7586:	b2c0      	uxtb	r0, r0
   d7588:	40c1      	lsrs	r1, r0
   d758a:	2201      	movs	r2, #1
   d758c:	4620      	mov	r0, r4
   d758e:	f7ff ffb7 	bl	d7500 <_ZN8SPIClass13setClockSpeedEjj>
   d7592:	e003      	b.n	d759c <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d7594:	4629      	mov	r1, r5
   d7596:	7820      	ldrb	r0, [r4, #0]
   d7598:	f7ff fbac 	bl	d6cf4 <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d759c:	7820      	ldrb	r0, [r4, #0]
    }
}
   d759e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d75a2:	f7ff bee4 	b.w	d736e <_ZN8SPIClass6unlockEv.isra.1>
   d75a6:	bd38      	pop	{r3, r4, r5, pc}
   d75a8:	000d9ae0 	.word	0x000d9ae0

000d75ac <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d75ac:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d75ae:	7800      	ldrb	r0, [r0, #0]
   d75b0:	f7ff fba8 	bl	d6d04 <HAL_SPI_Send_Receive_Data>
}
   d75b4:	b2c0      	uxtb	r0, r0
   d75b6:	bd08      	pop	{r3, pc}

000d75b8 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d75b8:	b530      	push	{r4, r5, lr}
   d75ba:	b087      	sub	sp, #28
   d75bc:	4604      	mov	r4, r0
   d75be:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d75c0:	7800      	ldrb	r0, [r0, #0]
   d75c2:	9500      	str	r5, [sp, #0]
   d75c4:	f7ff fbbe 	bl	d6d44 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d75c8:	b93d      	cbnz	r5, d75da <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d75ca:	a902      	add	r1, sp, #8
   d75cc:	7820      	ldrb	r0, [r4, #0]
   d75ce:	f7ff fbc1 	bl	d6d54 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d75d2:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d75d6:	07db      	lsls	r3, r3, #31
   d75d8:	d4f7      	bmi.n	d75ca <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d75da:	b007      	add	sp, #28
   d75dc:	bd30      	pop	{r4, r5, pc}

000d75de <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d75de:	7800      	ldrb	r0, [r0, #0]
   d75e0:	f7ff bba0 	b.w	d6d24 <HAL_SPI_Is_Enabled>

000d75e4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d75e4:	b510      	push	{r4, lr}
   d75e6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d75e8:	6800      	ldr	r0, [r0, #0]
   d75ea:	b118      	cbz	r0, d75f4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d75ec:	f7ff fe5e 	bl	d72ac <free>
            wakeupSource_ = nullptr;
   d75f0:	2300      	movs	r3, #0
   d75f2:	6023      	str	r3, [r4, #0]
   d75f4:	bd10      	pop	{r4, pc}

000d75f6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d75f6:	b510      	push	{r4, lr}
   d75f8:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d75fa:	f7ff fff3 	bl	d75e4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d75fe:	4620      	mov	r0, r4
   d7600:	bd10      	pop	{r4, pc}
	...

000d7604 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7604:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7606:	4c09      	ldr	r4, [pc, #36]	; (d762c <_GLOBAL__sub_I_System+0x28>)
   d7608:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d760a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d760e:	6020      	str	r0, [r4, #0]
   d7610:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7612:	71a0      	strb	r0, [r4, #6]
   d7614:	8120      	strh	r0, [r4, #8]
   d7616:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7618:	f7ff fd94 	bl	d7144 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d761c:	4620      	mov	r0, r4
   d761e:	4a04      	ldr	r2, [pc, #16]	; (d7630 <_GLOBAL__sub_I_System+0x2c>)
   d7620:	4904      	ldr	r1, [pc, #16]	; (d7634 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d7626:	f001 bae5 	b.w	d8bf4 <__aeabi_atexit>
   d762a:	bf00      	nop
   d762c:	2003e1b4 	.word	0x2003e1b4
   d7630:	2003db50 	.word	0x2003db50
   d7634:	000d75f7 	.word	0x000d75f7

000d7638 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7638:	b510      	push	{r4, lr}
   d763a:	4604      	mov	r4, r0
{
	free(buffer);
   d763c:	6800      	ldr	r0, [r0, #0]
   d763e:	f7ff fe35 	bl	d72ac <free>
}
   d7642:	4620      	mov	r0, r4
   d7644:	bd10      	pop	{r4, pc}

000d7646 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7646:	b510      	push	{r4, lr}
   d7648:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d764a:	6800      	ldr	r0, [r0, #0]
   d764c:	b108      	cbz	r0, d7652 <_ZN6String10invalidateEv+0xc>
   d764e:	f7ff fe2d 	bl	d72ac <free>
	buffer = NULL;
   d7652:	2300      	movs	r3, #0
   d7654:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d7656:	60a3      	str	r3, [r4, #8]
   d7658:	6063      	str	r3, [r4, #4]
   d765a:	bd10      	pop	{r4, pc}

000d765c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d765c:	b538      	push	{r3, r4, r5, lr}
   d765e:	4604      	mov	r4, r0
   d7660:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d7662:	6800      	ldr	r0, [r0, #0]
   d7664:	3101      	adds	r1, #1
   d7666:	f7ff fe29 	bl	d72bc <realloc>
	if (newbuffer) {
   d766a:	b110      	cbz	r0, d7672 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d766c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d7670:	2001      	movs	r0, #1
	}
	return 0;
}
   d7672:	bd38      	pop	{r3, r4, r5, pc}

000d7674 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7674:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7676:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7678:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d767a:	b113      	cbz	r3, d7682 <_ZN6String7reserveEj+0xe>
   d767c:	6843      	ldr	r3, [r0, #4]
   d767e:	428b      	cmp	r3, r1
   d7680:	d207      	bcs.n	d7692 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d7682:	4620      	mov	r0, r4
   d7684:	f7ff ffea 	bl	d765c <_ZN6String12changeBufferEj>
   d7688:	b120      	cbz	r0, d7694 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d768a:	68a3      	ldr	r3, [r4, #8]
   d768c:	b90b      	cbnz	r3, d7692 <_ZN6String7reserveEj+0x1e>
   d768e:	6822      	ldr	r2, [r4, #0]
   d7690:	7013      	strb	r3, [r2, #0]
   d7692:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d7694:	bd10      	pop	{r4, pc}

000d7696 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7696:	b570      	push	{r4, r5, r6, lr}
   d7698:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d769a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d769c:	4604      	mov	r4, r0
   d769e:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d76a0:	f7ff ffe8 	bl	d7674 <_ZN6String7reserveEj>
   d76a4:	b918      	cbnz	r0, d76ae <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d76a6:	4620      	mov	r0, r4
   d76a8:	f7ff ffcd 	bl	d7646 <_ZN6String10invalidateEv>
		return *this;
   d76ac:	e009      	b.n	d76c2 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d76ae:	462a      	mov	r2, r5
   d76b0:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d76b2:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d76b4:	6820      	ldr	r0, [r4, #0]
   d76b6:	f002 f82f 	bl	d9718 <memcpy>
	buffer[len] = 0;
   d76ba:	6822      	ldr	r2, [r4, #0]
   d76bc:	68a3      	ldr	r3, [r4, #8]
   d76be:	2100      	movs	r1, #0
   d76c0:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d76c2:	4620      	mov	r0, r4
   d76c4:	bd70      	pop	{r4, r5, r6, pc}

000d76c6 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d76c6:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d76c8:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d76ca:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d76cc:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d76ce:	6043      	str	r3, [r0, #4]
	len = 0;
   d76d0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d76d2:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d76d4:	460d      	mov	r5, r1
   d76d6:	b139      	cbz	r1, d76e8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d76d8:	4608      	mov	r0, r1
   d76da:	f002 f859 	bl	d9790 <strlen>
   d76de:	4629      	mov	r1, r5
   d76e0:	4602      	mov	r2, r0
   d76e2:	4620      	mov	r0, r4
   d76e4:	f7ff ffd7 	bl	d7696 <_ZN6String4copyEPKcj>
}
   d76e8:	4620      	mov	r0, r4
   d76ea:	bd38      	pop	{r3, r4, r5, pc}

000d76ec <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d76ec:	b538      	push	{r3, r4, r5, lr}
   d76ee:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d76f0:	460c      	mov	r4, r1
   d76f2:	b141      	cbz	r1, d7706 <_ZN6StringaSEPKc+0x1a>
   d76f4:	4608      	mov	r0, r1
   d76f6:	f002 f84b 	bl	d9790 <strlen>
   d76fa:	4621      	mov	r1, r4
   d76fc:	4602      	mov	r2, r0
   d76fe:	4628      	mov	r0, r5
   d7700:	f7ff ffc9 	bl	d7696 <_ZN6String4copyEPKcj>
   d7704:	e001      	b.n	d770a <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d7706:	f7ff ff9e 	bl	d7646 <_ZN6String10invalidateEv>

	return *this;
}
   d770a:	4628      	mov	r0, r5
   d770c:	bd38      	pop	{r3, r4, r5, pc}

000d770e <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d770e:	b510      	push	{r4, lr}
   d7710:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7712:	6800      	ldr	r0, [r0, #0]
   d7714:	b108      	cbz	r0, d771a <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d7716:	f7ff fbd5 	bl	d6ec4 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d771a:	4620      	mov	r0, r4
   d771c:	bd10      	pop	{r4, pc}
	...

000d7720 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7720:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7722:	4c06      	ldr	r4, [pc, #24]	; (d773c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7724:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d7726:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7728:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d772a:	f7ff fbc3 	bl	d6eb4 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d772e:	4620      	mov	r0, r4
   d7730:	4a03      	ldr	r2, [pc, #12]	; (d7740 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d7732:	4904      	ldr	r1, [pc, #16]	; (d7744 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d7738:	f001 ba5c 	b.w	d8bf4 <__aeabi_atexit>
   d773c:	2003e1c0 	.word	0x2003e1c0
   d7740:	2003db50 	.word	0x2003db50
   d7744:	000d770f 	.word	0x000d770f

000d7748 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d774a:	4606      	mov	r6, r0
   d774c:	460d      	mov	r5, r1
   d774e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d7750:	2400      	movs	r4, #0
  while (size--) {
   d7752:	42bd      	cmp	r5, r7
   d7754:	d00c      	beq.n	d7770 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7756:	6833      	ldr	r3, [r6, #0]
   d7758:	f815 1b01 	ldrb.w	r1, [r5], #1
   d775c:	689b      	ldr	r3, [r3, #8]
   d775e:	4630      	mov	r0, r6
   d7760:	4798      	blx	r3
     if (chunk>=0)
   d7762:	2800      	cmp	r0, #0
   d7764:	db01      	blt.n	d776a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7766:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d7768:	e7f3      	b.n	d7752 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d776a:	2c00      	cmp	r4, #0
   d776c:	bf08      	it	eq
   d776e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d7770:	4620      	mov	r0, r4
   d7772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7774 <_ZN5Print5printEPKc>:
   d7774:	b508      	push	{r3, lr}
   d7776:	f7fe fbdb 	bl	d5f30 <_ZN5Print5writeEPKc>
   d777a:	bd08      	pop	{r3, pc}

000d777c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d777c:	6803      	ldr	r3, [r0, #0]
   d777e:	689b      	ldr	r3, [r3, #8]
   d7780:	4718      	bx	r3

000d7782 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7782:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7784:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7786:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7788:	f7ff fff8 	bl	d777c <_ZN5Print5printEc>
  n += print('\n');
   d778c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d778e:	4604      	mov	r4, r0
  n += print('\n');
   d7790:	4628      	mov	r0, r5
   d7792:	f7ff fff3 	bl	d777c <_ZN5Print5printEc>
  return n;
}
   d7796:	4420      	add	r0, r4
   d7798:	bd38      	pop	{r3, r4, r5, pc}

000d779a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d779a:	b538      	push	{r3, r4, r5, lr}
   d779c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d779e:	f7fe fbc7 	bl	d5f30 <_ZN5Print5writeEPKc>
   d77a2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d77a4:	4628      	mov	r0, r5
   d77a6:	f7ff ffec 	bl	d7782 <_ZN5Print7printlnEv>
  return n;
}
   d77aa:	4420      	add	r0, r4
   d77ac:	bd38      	pop	{r3, r4, r5, pc}

000d77ae <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d77ae:	b530      	push	{r4, r5, lr}
   d77b0:	b08b      	sub	sp, #44	; 0x2c
   d77b2:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d77b4:	2100      	movs	r1, #0
   d77b6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d77ba:	2a01      	cmp	r2, #1
   d77bc:	bf98      	it	ls
   d77be:	220a      	movls	r2, #10
   d77c0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d77c4:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d77c8:	fb05 3312 	mls	r3, r5, r2, r3
   d77cc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d77d0:	2b09      	cmp	r3, #9
   d77d2:	bf94      	ite	ls
   d77d4:	3330      	addls	r3, #48	; 0x30
   d77d6:	3337      	addhi	r3, #55	; 0x37
   d77d8:	b2db      	uxtb	r3, r3
   d77da:	4621      	mov	r1, r4
   d77dc:	f804 3901 	strb.w	r3, [r4], #-1
   d77e0:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d77e2:	2d00      	cmp	r5, #0
   d77e4:	d1ee      	bne.n	d77c4 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d77e6:	f7fe fba3 	bl	d5f30 <_ZN5Print5writeEPKc>
}
   d77ea:	b00b      	add	sp, #44	; 0x2c
   d77ec:	bd30      	pop	{r4, r5, pc}

000d77ee <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d77ee:	b40c      	push	{r2, r3}
   d77f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d77f4:	b087      	sub	sp, #28
   d77f6:	af00      	add	r7, sp, #0
   d77f8:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d77fc:	4605      	mov	r5, r0
   d77fe:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d7802:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7804:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d7806:	4623      	mov	r3, r4
   d7808:	464a      	mov	r2, r9
   d780a:	2114      	movs	r1, #20
   d780c:	1d38      	adds	r0, r7, #4
   d780e:	f7ff fd5d 	bl	d72cc <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d7812:	2813      	cmp	r0, #19
   d7814:	d805      	bhi.n	d7822 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7816:	1d39      	adds	r1, r7, #4
   d7818:	4628      	mov	r0, r5
   d781a:	f7fe fb89 	bl	d5f30 <_ZN5Print5writeEPKc>
   d781e:	4604      	mov	r4, r0
   d7820:	e013      	b.n	d784a <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7822:	f100 0308 	add.w	r3, r0, #8
   d7826:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d782a:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d782c:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d7830:	1c41      	adds	r1, r0, #1
   d7832:	4623      	mov	r3, r4
   d7834:	464a      	mov	r2, r9
   d7836:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d7838:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d783a:	f7ff fd47 	bl	d72cc <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d783e:	4669      	mov	r1, sp
   d7840:	4628      	mov	r0, r5
   d7842:	f7fe fb75 	bl	d5f30 <_ZN5Print5writeEPKc>
   d7846:	4604      	mov	r4, r0
   d7848:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d784a:	b11e      	cbz	r6, d7854 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d784c:	4628      	mov	r0, r5
   d784e:	f7ff ff98 	bl	d7782 <_ZN5Print7printlnEv>
   d7852:	4404      	add	r4, r0
    return n;
}
   d7854:	4620      	mov	r0, r4
   d7856:	371c      	adds	r7, #28
   d7858:	46bd      	mov	sp, r7
   d785a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d785e:	b002      	add	sp, #8
   d7860:	4770      	bx	lr
	...

000d7864 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7864:	4b01      	ldr	r3, [pc, #4]	; (d786c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7866:	4a02      	ldr	r2, [pc, #8]	; (d7870 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7868:	601a      	str	r2, [r3, #0]
   d786a:	4770      	bx	lr
   d786c:	2003e1c4 	.word	0x2003e1c4
   d7870:	000d9b5b 	.word	0x000d9b5b

000d7874 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d7874:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7876:	2000      	movs	r0, #0
   d7878:	f7ff fd00 	bl	d727c <spark_sync_time_pending>
   d787c:	b128      	cbz	r0, d788a <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d787e:	f7ff fced 	bl	d725c <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7882:	f080 0001 	eor.w	r0, r0, #1
   d7886:	b2c0      	uxtb	r0, r0
   d7888:	bd08      	pop	{r3, pc}
   d788a:	2001      	movs	r0, #1
    }
   d788c:	bd08      	pop	{r3, pc}

000d788e <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d788e:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d7890:	2000      	movs	r0, #0
   d7892:	f7ff fabf 	bl	d6e14 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d7896:	4604      	mov	r4, r0
   d7898:	b968      	cbnz	r0, d78b6 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d789a:	f7ff fc4b 	bl	d7134 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d789e:	2801      	cmp	r0, #1
   d78a0:	d10b      	bne.n	d78ba <_ZN9TimeClass7isValidEv+0x2c>
   d78a2:	4620      	mov	r0, r4
   d78a4:	f7ff fc66 	bl	d7174 <system_thread_get_state>
   d78a8:	b938      	cbnz	r0, d78ba <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d78aa:	f7ff ffe3 	bl	d7874 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d78ae:	b930      	cbnz	r0, d78be <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d78b0:	f7ff fccc 	bl	d724c <spark_process>
   d78b4:	e7f9      	b.n	d78aa <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d78b6:	2001      	movs	r0, #1
   d78b8:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d78ba:	2000      	movs	r0, #0
   d78bc:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d78be:	f7ff ffd9 	bl	d7874 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d78c2:	2000      	movs	r0, #0
   d78c4:	f7ff faa6 	bl	d6e14 <HAL_RTC_Time_Is_Valid>
   d78c8:	3000      	adds	r0, #0
   d78ca:	bf18      	it	ne
   d78cc:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d78ce:	bd10      	pop	{r4, pc}

000d78d0 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d78d0:	b508      	push	{r3, lr}
    (void)isValid();
   d78d2:	f7ff ffdc 	bl	d788e <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d78d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d78da:	f7ff ba7b 	b.w	d6dd4 <HAL_RTC_Get_UnixTime>
	...

000d78e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d78e0:	4b02      	ldr	r3, [pc, #8]	; (d78ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d78e2:	681a      	ldr	r2, [r3, #0]
   d78e4:	4b02      	ldr	r3, [pc, #8]	; (d78f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d78e6:	601a      	str	r2, [r3, #0]
   d78e8:	4770      	bx	lr
   d78ea:	bf00      	nop
   d78ec:	2003dae8 	.word	0x2003dae8
   d78f0:	2003e1c8 	.word	0x2003e1c8

000d78f4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d78f4:	2100      	movs	r1, #0
   d78f6:	f7ff bc2d 	b.w	d7154 <system_delay_ms>

000d78fa <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d78fa:	b510      	push	{r4, lr}
   d78fc:	4604      	mov	r4, r0
   d78fe:	f7fd f9fa 	bl	d4cf6 <_ZNSt14_Function_baseD1Ev>
   d7902:	4620      	mov	r0, r4
   d7904:	bd10      	pop	{r4, pc}
	...

000d7908 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7908:	4803      	ldr	r0, [pc, #12]	; (d7918 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d790a:	4a04      	ldr	r2, [pc, #16]	; (d791c <_GLOBAL__sub_I_RGB+0x14>)
   d790c:	4904      	ldr	r1, [pc, #16]	; (d7920 <_GLOBAL__sub_I_RGB+0x18>)
   d790e:	2300      	movs	r3, #0
   d7910:	6083      	str	r3, [r0, #8]
   d7912:	f001 b96f 	b.w	d8bf4 <__aeabi_atexit>
   d7916:	bf00      	nop
   d7918:	2003e1cc 	.word	0x2003e1cc
   d791c:	2003db50 	.word	0x2003db50
   d7920:	000d78fb 	.word	0x000d78fb

000d7924 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d7924:	7d00      	ldrb	r0, [r0, #20]
   d7926:	4770      	bx	lr

000d7928 <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d7928:	7d03      	ldrb	r3, [r0, #20]
   d792a:	b11b      	cbz	r3, d7934 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d792c:	6983      	ldr	r3, [r0, #24]
   d792e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d7932:	d102      	bne.n	d793a <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d7934:	ed9f 0a05 	vldr	s0, [pc, #20]	; d794c <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d7938:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d793a:	ee07 3a90 	vmov	s15, r3
   d793e:	ed9f 7a04 	vldr	s14, [pc, #16]	; d7950 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d7942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7946:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d794a:	4770      	bx	lr
   d794c:	00000000 	.word	0x00000000
   d7950:	42c80000 	.word	0x42c80000

000d7954 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d7954:	7d03      	ldrb	r3, [r0, #20]
   d7956:	b11b      	cbz	r3, d7960 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d7958:	6a03      	ldr	r3, [r0, #32]
   d795a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d795e:	d102      	bne.n	d7966 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d7960:	ed9f 0a05 	vldr	s0, [pc, #20]	; d7978 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d7964:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d7966:	ee07 3a90 	vmov	s15, r3
   d796a:	ed9f 7a04 	vldr	s14, [pc, #16]	; d797c <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d796e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7972:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d7976:	4770      	bx	lr
   d7978:	00000000 	.word	0x00000000
   d797c:	42c80000 	.word	0x42c80000

000d7980 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d7980:	7d03      	ldrb	r3, [r0, #20]
   d7982:	b17b      	cbz	r3, d79a4 <_ZNK14CellularSignal10getQualityEv+0x24>
   d7984:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d7986:	2b00      	cmp	r3, #0
   d7988:	db0c      	blt.n	d79a4 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d798a:	ee07 3a90 	vmov	s15, r3
   d798e:	eddf 6a07 	vldr	s13, [pc, #28]	; d79ac <_ZNK14CellularSignal10getQualityEv+0x2c>
   d7992:	ed9f 0a07 	vldr	s0, [pc, #28]	; d79b0 <_ZNK14CellularSignal10getQualityEv+0x30>
   d7996:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d799a:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d799e:	ee27 0a80 	vmul.f32	s0, s15, s0
   d79a2:	4770      	bx	lr
    }

    return -1.0f;
   d79a4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d79a8:	4770      	bx	lr
   d79aa:	bf00      	nop
   d79ac:	477fff00 	.word	0x477fff00
   d79b0:	42c80000 	.word	0x42c80000

000d79b4 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d79b4:	7d03      	ldrb	r3, [r0, #20]
   d79b6:	b17b      	cbz	r3, d79d8 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d79b8:	69c3      	ldr	r3, [r0, #28]
   d79ba:	2b00      	cmp	r3, #0
   d79bc:	db0c      	blt.n	d79d8 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d79be:	ee07 3a90 	vmov	s15, r3
   d79c2:	eddf 6a07 	vldr	s13, [pc, #28]	; d79e0 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d79c6:	ed9f 0a07 	vldr	s0, [pc, #28]	; d79e4 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d79ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d79ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d79d2:	ee27 0a80 	vmul.f32	s0, s15, s0
   d79d6:	4770      	bx	lr
    }

    return -1.0f;
   d79d8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d79dc:	4770      	bx	lr
   d79de:	bf00      	nop
   d79e0:	477fff00 	.word	0x477fff00
   d79e4:	42c80000 	.word	0x42c80000

000d79e8 <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d79e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d79ec:	4607      	mov	r7, r0
   d79ee:	460c      	mov	r4, r1
{
    if (base == 0) {
   d79f0:	4615      	mov	r5, r2
   d79f2:	b92a      	cbnz	r2, d7a00 <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d79f4:	6803      	ldr	r3, [r0, #0]
   d79f6:	b2c9      	uxtb	r1, r1
   d79f8:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d79fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d79fe:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d7a00:	2900      	cmp	r1, #0
   d7a02:	da07      	bge.n	d7a14 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d7a04:	2a0a      	cmp	r2, #10
   d7a06:	d105      	bne.n	d7a14 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d7a08:	212d      	movs	r1, #45	; 0x2d
   d7a0a:	f7ff feb7 	bl	d777c <_ZN5Print5printEc>
            val = -n;
   d7a0e:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d7a10:	4606      	mov	r6, r0
            val = -n;
   d7a12:	e001      	b.n	d7a18 <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d7a14:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d7a16:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d7a18:	b2ea      	uxtb	r2, r5
   d7a1a:	4638      	mov	r0, r7
   d7a1c:	f7ff fec7 	bl	d77ae <_ZN5Print11printNumberEmh>
    }
}
   d7a20:	4430      	add	r0, r6
   d7a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7a26 <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
   d7a26:	b570      	push	{r4, r5, r6, lr}
   d7a28:	460d      	mov	r5, r1
   d7a2a:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d7a2c:	220a      	movs	r2, #10
   d7a2e:	6881      	ldr	r1, [r0, #8]
   d7a30:	4628      	mov	r0, r5
   d7a32:	f7ff ffd9 	bl	d79e8 <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
   d7a36:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d7a38:	4604      	mov	r4, r0
    n += p.print(',');
   d7a3a:	4628      	mov	r0, r5
   d7a3c:	f7ff fe9e 	bl	d777c <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d7a40:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d7a42:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d7a44:	68f1      	ldr	r1, [r6, #12]
   d7a46:	4628      	mov	r0, r5
   d7a48:	f7ff ffce 	bl	d79e8 <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
   d7a4c:	4420      	add	r0, r4
   d7a4e:	bd70      	pop	{r4, r5, r6, pc}

000d7a50 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d7a50:	f1a0 0004 	sub.w	r0, r0, #4
   d7a54:	f7ff bfe7 	b.w	d7a26 <_ZNK14CellularSignal7printToER5Print>

000d7a58 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d7a58:	6800      	ldr	r0, [r0, #0]
   d7a5a:	f000 bb88 	b.w	d816e <_ZN7TwoWire4lockEv>

000d7a5e <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d7a5e:	b510      	push	{r4, lr}
   d7a60:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d7a62:	6001      	str	r1, [r0, #0]
   d7a64:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d7a66:	b10a      	cbz	r2, d7a6c <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d7a68:	f7ff fff6 	bl	d7a58 <_ZN9FuelGauge4lockEv>
    }
}
   d7a6c:	4620      	mov	r0, r4
   d7a6e:	bd10      	pop	{r4, pc}

000d7a70 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d7a70:	b538      	push	{r3, r4, r5, lr}
   d7a72:	4604      	mov	r4, r0
   d7a74:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7a76:	f001 f897 	bl	d8ba8 <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d7a7a:	462a      	mov	r2, r5
   d7a7c:	4601      	mov	r1, r0
   d7a7e:	4620      	mov	r0, r4
   d7a80:	f7ff ffed 	bl	d7a5e <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d7a84:	4620      	mov	r0, r4
   d7a86:	bd38      	pop	{r3, r4, r5, pc}

000d7a88 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d7a88:	6800      	ldr	r0, [r0, #0]
   d7a8a:	f000 bb79 	b.w	d8180 <_ZN7TwoWire6unlockEv>

000d7a8e <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d7a8e:	b510      	push	{r4, lr}
{
    if (lock_) {
   d7a90:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d7a92:	4604      	mov	r4, r0
{
    if (lock_) {
   d7a94:	b10b      	cbz	r3, d7a9a <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d7a96:	f7ff fff7 	bl	d7a88 <_ZN9FuelGauge6unlockEv>
    }
}
   d7a9a:	4620      	mov	r0, r4
   d7a9c:	bd10      	pop	{r4, pc}

000d7a9e <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d7a9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7aa0:	4604      	mov	r4, r0
   d7aa2:	4616      	mov	r6, r2
   d7aa4:	461d      	mov	r5, r3
   d7aa6:	460f      	mov	r7, r1
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d7aa8:	f7ff ffd6 	bl	d7a58 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   d7aac:	6820      	ldr	r0, [r4, #0]
   d7aae:	2136      	movs	r1, #54	; 0x36
   d7ab0:	f000 fb52 	bl	d8158 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
   d7ab4:	6820      	ldr	r0, [r4, #0]
   d7ab6:	6803      	ldr	r3, [r0, #0]
   d7ab8:	4639      	mov	r1, r7
   d7aba:	689b      	ldr	r3, [r3, #8]
   d7abc:	4798      	blx	r3
    i2c_.endTransmission(true);
   d7abe:	2101      	movs	r1, #1
   d7ac0:	6820      	ldr	r0, [r4, #0]
   d7ac2:	f000 fb4c 	bl	d815e <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
   d7ac6:	2202      	movs	r2, #2
   d7ac8:	2136      	movs	r1, #54	; 0x36
   d7aca:	2301      	movs	r3, #1
   d7acc:	6820      	ldr	r0, [r4, #0]
   d7ace:	f000 fb2d 	bl	d812c <_ZN7TwoWire11requestFromEhjh>
    MSB = i2c_.read();
   d7ad2:	6820      	ldr	r0, [r4, #0]
   d7ad4:	6803      	ldr	r3, [r0, #0]
   d7ad6:	695b      	ldr	r3, [r3, #20]
   d7ad8:	4798      	blx	r3
   d7ada:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
   d7adc:	6820      	ldr	r0, [r4, #0]
   d7ade:	6803      	ldr	r3, [r0, #0]
   d7ae0:	695b      	ldr	r3, [r3, #20]
   d7ae2:	4798      	blx	r3
   d7ae4:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d7ae6:	4620      	mov	r0, r4
}
   d7ae8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d7aec:	f7ff bfcc 	b.w	d7a88 <_ZN9FuelGauge6unlockEv>

000d7af0 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
   d7af0:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d7af2:	ab02      	add	r3, sp, #8
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d7af4:	2200      	movs	r2, #0
	byte LSB = 0;
   d7af6:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d7afa:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
   d7afe:	2104      	movs	r1, #4
   d7b00:	f10d 0206 	add.w	r2, sp, #6
   d7b04:	f7ff ffcb 	bl	d7a9e <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d7b08:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d7b0c:	f001 fb2e 	bl	d916c <__aeabi_i2d>
   d7b10:	2200      	movs	r2, #0
   d7b12:	4b09      	ldr	r3, [pc, #36]	; (d7b38 <_ZN9FuelGauge6getSoCEv+0x48>)
   d7b14:	f001 fb90 	bl	d9238 <__aeabi_dmul>
   d7b18:	f001 fda0 	bl	d965c <__aeabi_d2f>
   d7b1c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d7b20:	ee00 3a10 	vmov	s0, r3
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d7b24:	ee07 0a90 	vmov	s15, r0
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d7b28:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d7b2c:	ee37 0a80 	vadd.f32	s0, s15, s0
   d7b30:	b003      	add	sp, #12
   d7b32:	f85d fb04 	ldr.w	pc, [sp], #4
   d7b36:	bf00      	nop
   d7b38:	3f700000 	.word	0x3f700000

000d7b3c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7b3c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7b3e:	4b0c      	ldr	r3, [pc, #48]	; (d7b70 <serialEventRun+0x34>)
   d7b40:	b133      	cbz	r3, d7b50 <serialEventRun+0x14>
   d7b42:	f000 f977 	bl	d7e34 <_Z16_fetch_usbserialv>
   d7b46:	6803      	ldr	r3, [r0, #0]
   d7b48:	691b      	ldr	r3, [r3, #16]
   d7b4a:	4798      	blx	r3
   d7b4c:	2800      	cmp	r0, #0
   d7b4e:	dc09      	bgt.n	d7b64 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d7b50:	4b08      	ldr	r3, [pc, #32]	; (d7b74 <serialEventRun+0x38>)
   d7b52:	b163      	cbz	r3, d7b6e <serialEventRun+0x32>
   d7b54:	f000 fa6a 	bl	d802c <_Z22__fetch_global_Serial1v>
   d7b58:	6803      	ldr	r3, [r0, #0]
   d7b5a:	691b      	ldr	r3, [r3, #16]
   d7b5c:	4798      	blx	r3
   d7b5e:	2800      	cmp	r0, #0
   d7b60:	dc03      	bgt.n	d7b6a <serialEventRun+0x2e>
   d7b62:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7b64:	f3af 8000 	nop.w
   d7b68:	e7f2      	b.n	d7b50 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d7b6a:	f3af 8000 	nop.w
   d7b6e:	bd08      	pop	{r3, pc}
	...

000d7b78 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7b78:	b508      	push	{r3, lr}
	serialEventRun();
   d7b7a:	f7ff ffdf 	bl	d7b3c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7b7e:	f7ff f921 	bl	d6dc4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7b82:	4b01      	ldr	r3, [pc, #4]	; (d7b88 <_post_loop+0x10>)
   d7b84:	6018      	str	r0, [r3, #0]
   d7b86:	bd08      	pop	{r3, pc}
   d7b88:	2003e528 	.word	0x2003e528

000d7b8c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7b8c:	4802      	ldr	r0, [pc, #8]	; (d7b98 <_Z33system_initialize_user_backup_ramv+0xc>)
   d7b8e:	4a03      	ldr	r2, [pc, #12]	; (d7b9c <_Z33system_initialize_user_backup_ramv+0x10>)
   d7b90:	4903      	ldr	r1, [pc, #12]	; (d7ba0 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7b92:	1a12      	subs	r2, r2, r0
   d7b94:	f001 bdc0 	b.w	d9718 <memcpy>
   d7b98:	2003f400 	.word	0x2003f400
   d7b9c:	2003f404 	.word	0x2003f404
   d7ba0:	000d9ef0 	.word	0x000d9ef0

000d7ba4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7ba4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7ba6:	2300      	movs	r3, #0
   d7ba8:	9300      	str	r3, [sp, #0]
   d7baa:	461a      	mov	r2, r3
   d7bac:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7bb0:	f7ff faf2 	bl	d7198 <system_ctrl_set_result>
}
   d7bb4:	b003      	add	sp, #12
   d7bb6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7bbc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7bbc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7bbe:	8843      	ldrh	r3, [r0, #2]
   d7bc0:	2b0a      	cmp	r3, #10
   d7bc2:	d008      	beq.n	d7bd6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7bc4:	2b50      	cmp	r3, #80	; 0x50
   d7bc6:	d109      	bne.n	d7bdc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7bc8:	4b09      	ldr	r3, [pc, #36]	; (d7bf0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7bca:	681b      	ldr	r3, [r3, #0]
   d7bcc:	b13b      	cbz	r3, d7bde <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7bce:	b003      	add	sp, #12
   d7bd0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7bd4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d7bd6:	f7ff ffe5 	bl	d7ba4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d7bda:	e006      	b.n	d7bea <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7bdc:	2300      	movs	r3, #0
   d7bde:	9300      	str	r3, [sp, #0]
   d7be0:	461a      	mov	r2, r3
   d7be2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7be6:	f7ff fad7 	bl	d7198 <system_ctrl_set_result>
        break;
    }
}
   d7bea:	b003      	add	sp, #12
   d7bec:	f85d fb04 	ldr.w	pc, [sp], #4
   d7bf0:	2003e1dc 	.word	0x2003e1dc

000d7bf4 <module_user_init_hook>:

void module_user_init_hook()
{
   d7bf4:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7bf6:	4c10      	ldr	r4, [pc, #64]	; (d7c38 <module_user_init_hook+0x44>)
   d7bf8:	4d10      	ldr	r5, [pc, #64]	; (d7c3c <module_user_init_hook+0x48>)
   d7bfa:	6823      	ldr	r3, [r4, #0]
   d7bfc:	42ab      	cmp	r3, r5
   d7bfe:	4b10      	ldr	r3, [pc, #64]	; (d7c40 <module_user_init_hook+0x4c>)
   d7c00:	bf0c      	ite	eq
   d7c02:	2201      	moveq	r2, #1
   d7c04:	2200      	movne	r2, #0
   d7c06:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7c08:	d002      	beq.n	d7c10 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d7c0a:	f7ff ffbf 	bl	d7b8c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7c0e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7c10:	f7ff f8c8 	bl	d6da4 <HAL_RNG_GetRandomNumber>
   d7c14:	4604      	mov	r4, r0
    srand(seed);
   d7c16:	f001 fd93 	bl	d9740 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7c1a:	4b0a      	ldr	r3, [pc, #40]	; (d7c44 <module_user_init_hook+0x50>)
   d7c1c:	b113      	cbz	r3, d7c24 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d7c1e:	4620      	mov	r0, r4
   d7c20:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7c24:	2100      	movs	r1, #0
   d7c26:	4807      	ldr	r0, [pc, #28]	; (d7c44 <module_user_init_hook+0x50>)
   d7c28:	f7ff fb30 	bl	d728c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7c2c:	2100      	movs	r1, #0
   d7c2e:	4806      	ldr	r0, [pc, #24]	; (d7c48 <module_user_init_hook+0x54>)
}
   d7c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7c34:	f7ff baa6 	b.w	d7184 <system_ctrl_set_app_request_handler>
   d7c38:	2003f400 	.word	0x2003f400
   d7c3c:	9a271c1e 	.word	0x9a271c1e
   d7c40:	2003e1e0 	.word	0x2003e1e0
   d7c44:	00000000 	.word	0x00000000
   d7c48:	000d7bbd 	.word	0x000d7bbd

000d7c4c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7c4c:	4770      	bx	lr

000d7c4e <_ZN9IPAddressD0Ev>:
   d7c4e:	b510      	push	{r4, lr}
   d7c50:	2118      	movs	r1, #24
   d7c52:	4604      	mov	r4, r0
   d7c54:	f000 ffdc 	bl	d8c10 <_ZdlPvj>
   d7c58:	4620      	mov	r0, r4
   d7c5a:	bd10      	pop	{r4, pc}

000d7c5c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7c5e:	7d03      	ldrb	r3, [r0, #20]
   d7c60:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7c62:	b08d      	sub	sp, #52	; 0x34
   d7c64:	460e      	mov	r6, r1
   d7c66:	f100 0704 	add.w	r7, r0, #4
   d7c6a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7c6e:	d002      	beq.n	d7c76 <_ZNK9IPAddress7printToER5Print+0x1a>
   d7c70:	f100 0508 	add.w	r5, r0, #8
   d7c74:	e018      	b.n	d7ca8 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7c76:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7c78:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7c7a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7c7e:	232f      	movs	r3, #47	; 0x2f
   d7c80:	462a      	mov	r2, r5
   d7c82:	200a      	movs	r0, #10
   d7c84:	f7ff f92e 	bl	d6ee4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7c88:	4628      	mov	r0, r5
   d7c8a:	f001 fd81 	bl	d9790 <strlen>
   d7c8e:	6833      	ldr	r3, [r6, #0]
   d7c90:	4602      	mov	r2, r0
   d7c92:	68db      	ldr	r3, [r3, #12]
   d7c94:	4629      	mov	r1, r5
   d7c96:	4630      	mov	r0, r6
   d7c98:	4798      	blx	r3
   d7c9a:	e00f      	b.n	d7cbc <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d7c9c:	b124      	cbz	r4, d7ca8 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d7c9e:	212e      	movs	r1, #46	; 0x2e
   d7ca0:	4630      	mov	r0, r6
   d7ca2:	f7ff fd6b 	bl	d777c <_ZN5Print5printEc>
   d7ca6:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d7ca8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7cac:	220a      	movs	r2, #10
   d7cae:	4630      	mov	r0, r6
   d7cb0:	f7ff fd7d 	bl	d77ae <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7cb4:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7cb6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7cb8:	d1f0      	bne.n	d7c9c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7cba:	4620      	mov	r0, r4
    }
    return n;
}
   d7cbc:	b00d      	add	sp, #52	; 0x34
   d7cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7cc0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d7cc0:	b510      	push	{r4, lr}
   d7cc2:	4b05      	ldr	r3, [pc, #20]	; (d7cd8 <_ZN9IPAddressC1Ev+0x18>)
   d7cc4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7cc6:	2211      	movs	r2, #17
   d7cc8:	f840 3b04 	str.w	r3, [r0], #4
   d7ccc:	2100      	movs	r1, #0
   d7cce:	f001 fd2e 	bl	d972e <memset>
{
    clear();
}
   d7cd2:	4620      	mov	r0, r4
   d7cd4:	bd10      	pop	{r4, pc}
   d7cd6:	bf00      	nop
   d7cd8:	000d9c2c 	.word	0x000d9c2c

000d7cdc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d7cdc:	4603      	mov	r3, r0
   d7cde:	4a07      	ldr	r2, [pc, #28]	; (d7cfc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7ce0:	b510      	push	{r4, lr}
   d7ce2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d7ce6:	f101 0210 	add.w	r2, r1, #16
   d7cea:	f851 4b04 	ldr.w	r4, [r1], #4
   d7cee:	f843 4b04 	str.w	r4, [r3], #4
   d7cf2:	4291      	cmp	r1, r2
   d7cf4:	d1f9      	bne.n	d7cea <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7cf6:	780a      	ldrb	r2, [r1, #0]
   d7cf8:	701a      	strb	r2, [r3, #0]
}
   d7cfa:	bd10      	pop	{r4, pc}
   d7cfc:	000d9c2c 	.word	0x000d9c2c

000d7d00 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d7d00:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d7d02:	2b04      	cmp	r3, #4
   d7d04:	d101      	bne.n	d7d0a <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d7d06:	6840      	ldr	r0, [r0, #4]
   d7d08:	e008      	b.n	d7d1c <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d7d0a:	2b06      	cmp	r3, #6
   d7d0c:	d10a      	bne.n	d7d24 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7d0e:	6843      	ldr	r3, [r0, #4]
   d7d10:	b953      	cbnz	r3, d7d28 <_ZNK9IPAddresscvbEv+0x28>
   d7d12:	6883      	ldr	r3, [r0, #8]
   d7d14:	b943      	cbnz	r3, d7d28 <_ZNK9IPAddresscvbEv+0x28>
   d7d16:	68c3      	ldr	r3, [r0, #12]
   d7d18:	b933      	cbnz	r3, d7d28 <_ZNK9IPAddresscvbEv+0x28>
   d7d1a:	6900      	ldr	r0, [r0, #16]
   d7d1c:	3000      	adds	r0, #0
   d7d1e:	bf18      	it	ne
   d7d20:	2001      	movne	r0, #1
   d7d22:	4770      	bx	lr
    } else {
        return false;
   d7d24:	2000      	movs	r0, #0
   d7d26:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7d28:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d7d2a:	4770      	bx	lr

000d7d2c <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d7d2c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7d2e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7d32:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7d36:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7d3a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d7d3e:	2304      	movs	r3, #4
   d7d40:	6041      	str	r1, [r0, #4]
   d7d42:	7503      	strb	r3, [r0, #20]
   d7d44:	bd10      	pop	{r4, pc}

000d7d46 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d7d46:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7d48:	780d      	ldrb	r5, [r1, #0]
   d7d4a:	788b      	ldrb	r3, [r1, #2]
   d7d4c:	784a      	ldrb	r2, [r1, #1]
   d7d4e:	78c9      	ldrb	r1, [r1, #3]
   d7d50:	9100      	str	r1, [sp, #0]
   d7d52:	4629      	mov	r1, r5
   d7d54:	f7ff ffea 	bl	d7d2c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d7d58:	b003      	add	sp, #12
   d7d5a:	bd30      	pop	{r4, r5, pc}

000d7d5c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
   d7d5c:	b510      	push	{r4, lr}
   d7d5e:	4b03      	ldr	r3, [pc, #12]	; (d7d6c <_ZN9IPAddressC1EPKh+0x10>)
   d7d60:	6003      	str	r3, [r0, #0]
   d7d62:	4604      	mov	r4, r0
{
    *this = address;
   d7d64:	f7ff ffef 	bl	d7d46 <_ZN9IPAddressaSEPKh>
}
   d7d68:	4620      	mov	r0, r4
   d7d6a:	bd10      	pop	{r4, pc}
   d7d6c:	000d9c2c 	.word	0x000d9c2c

000d7d70 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7d70:	7441      	strb	r1, [r0, #17]
   d7d72:	4770      	bx	lr

000d7d74 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7d74:	4770      	bx	lr

000d7d76 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d7d76:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7d78:	2100      	movs	r1, #0
   d7d7a:	7c00      	ldrb	r0, [r0, #16]
   d7d7c:	f7ff f9ba 	bl	d70f4 <HAL_USB_USART_Receive_Data>
}
   d7d80:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7d84:	bf28      	it	cs
   d7d86:	f04f 30ff 	movcs.w	r0, #4294967295
   d7d8a:	bd08      	pop	{r3, pc}

000d7d8c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7d8c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7d8e:	2101      	movs	r1, #1
   d7d90:	7c00      	ldrb	r0, [r0, #16]
   d7d92:	f7ff f9af 	bl	d70f4 <HAL_USB_USART_Receive_Data>
}
   d7d96:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7d9a:	bf28      	it	cs
   d7d9c:	f04f 30ff 	movcs.w	r0, #4294967295
   d7da0:	bd08      	pop	{r3, pc}

000d7da2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d7da2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7da4:	7c00      	ldrb	r0, [r0, #16]
   d7da6:	f7ff f99d 	bl	d70e4 <HAL_USB_USART_Available_Data_For_Write>
}
   d7daa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7dae:	bd08      	pop	{r3, pc}

000d7db0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7db0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7db2:	7c00      	ldrb	r0, [r0, #16]
   d7db4:	f7ff f98e 	bl	d70d4 <HAL_USB_USART_Available_Data>
}
   d7db8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7dbc:	bd08      	pop	{r3, pc}

000d7dbe <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7dbe:	7c00      	ldrb	r0, [r0, #16]
   d7dc0:	f7ff b9a8 	b.w	d7114 <HAL_USB_USART_Flush_Data>

000d7dc4 <_ZN9USBSerialD0Ev>:
   d7dc4:	b510      	push	{r4, lr}
   d7dc6:	2114      	movs	r1, #20
   d7dc8:	4604      	mov	r4, r0
   d7dca:	f000 ff21 	bl	d8c10 <_ZdlPvj>
   d7dce:	4620      	mov	r0, r4
   d7dd0:	bd10      	pop	{r4, pc}

000d7dd2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7dd2:	b538      	push	{r3, r4, r5, lr}
   d7dd4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7dd6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7dd8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7dda:	f7ff f983 	bl	d70e4 <HAL_USB_USART_Available_Data_For_Write>
   d7dde:	2800      	cmp	r0, #0
   d7de0:	dc01      	bgt.n	d7de6 <_ZN9USBSerial5writeEh+0x14>
   d7de2:	7c60      	ldrb	r0, [r4, #17]
   d7de4:	b128      	cbz	r0, d7df2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7de6:	4629      	mov	r1, r5
   d7de8:	7c20      	ldrb	r0, [r4, #16]
   d7dea:	f7ff f98b 	bl	d7104 <HAL_USB_USART_Send_Data>
   d7dee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d7df2:	bd38      	pop	{r3, r4, r5, pc}

000d7df4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7df4:	b510      	push	{r4, lr}
   d7df6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7df8:	2300      	movs	r3, #0
   d7dfa:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7dfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7e00:	60a3      	str	r3, [r4, #8]
   d7e02:	4b05      	ldr	r3, [pc, #20]	; (d7e18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7e04:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d7e06:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7e08:	4608      	mov	r0, r1
{
  _serial = serial;
   d7e0a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7e0c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d7e0e:	4611      	mov	r1, r2
   d7e10:	f7ff f950 	bl	d70b4 <HAL_USB_USART_Init>
}
   d7e14:	4620      	mov	r0, r4
   d7e16:	bd10      	pop	{r4, pc}
   d7e18:	000d9c40 	.word	0x000d9c40

000d7e1c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7e1c:	2200      	movs	r2, #0
   d7e1e:	7c00      	ldrb	r0, [r0, #16]
   d7e20:	f7ff b950 	b.w	d70c4 <HAL_USB_USART_Begin>

000d7e24 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7e24:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7e26:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7e28:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7e2a:	2100      	movs	r1, #0
   d7e2c:	f001 fc7f 	bl	d972e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7e30:	4620      	mov	r0, r4
   d7e32:	bd10      	pop	{r4, pc}

000d7e34 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7e34:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7e36:	4d0e      	ldr	r5, [pc, #56]	; (d7e70 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7e38:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7e3a:	a801      	add	r0, sp, #4
   d7e3c:	f7ff fff2 	bl	d7e24 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7e40:	6829      	ldr	r1, [r5, #0]
   d7e42:	f011 0401 	ands.w	r4, r1, #1
   d7e46:	d110      	bne.n	d7e6a <_Z16_fetch_usbserialv+0x36>
   d7e48:	4628      	mov	r0, r5
   d7e4a:	f7fc f92c 	bl	d40a6 <__cxa_guard_acquire>
   d7e4e:	b160      	cbz	r0, d7e6a <_Z16_fetch_usbserialv+0x36>
   d7e50:	aa01      	add	r2, sp, #4
   d7e52:	4621      	mov	r1, r4
   d7e54:	4807      	ldr	r0, [pc, #28]	; (d7e74 <_Z16_fetch_usbserialv+0x40>)
   d7e56:	f7ff ffcd 	bl	d7df4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7e5a:	4628      	mov	r0, r5
   d7e5c:	f7fc f928 	bl	d40b0 <__cxa_guard_release>
   d7e60:	4a05      	ldr	r2, [pc, #20]	; (d7e78 <_Z16_fetch_usbserialv+0x44>)
   d7e62:	4906      	ldr	r1, [pc, #24]	; (d7e7c <_Z16_fetch_usbserialv+0x48>)
   d7e64:	4803      	ldr	r0, [pc, #12]	; (d7e74 <_Z16_fetch_usbserialv+0x40>)
   d7e66:	f000 fec5 	bl	d8bf4 <__aeabi_atexit>
	return _usbserial;
}
   d7e6a:	4802      	ldr	r0, [pc, #8]	; (d7e74 <_Z16_fetch_usbserialv+0x40>)
   d7e6c:	b007      	add	sp, #28
   d7e6e:	bd30      	pop	{r4, r5, pc}
   d7e70:	2003e1e4 	.word	0x2003e1e4
   d7e74:	2003e1e8 	.word	0x2003e1e8
   d7e78:	2003db50 	.word	0x2003db50
   d7e7c:	000d7d75 	.word	0x000d7d75

000d7e80 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d7e80:	4700      	bx	r0
	...

000d7e84 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d7e84:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7e86:	b085      	sub	sp, #20
   d7e88:	461c      	mov	r4, r3
   d7e8a:	460e      	mov	r6, r1
   d7e8c:	4617      	mov	r7, r2
   d7e8e:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   d7e90:	f7fe ff00 	bl	d6c94 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   d7e94:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d7e96:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d7e98:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d7e9c:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d7e9e:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d7ea2:	bfa5      	ittet	ge
   d7ea4:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d7ea8:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d7eac:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d7eae:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7eb0:	9300      	str	r3, [sp, #0]
   d7eb2:	4632      	mov	r2, r6
   d7eb4:	463b      	mov	r3, r7
   d7eb6:	4906      	ldr	r1, [pc, #24]	; (d7ed0 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d7eb8:	bfa8      	it	ge
   d7eba:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7ebe:	4628      	mov	r0, r5
   d7ec0:	f7fe fee0 	bl	d6c84 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d7ec4:	fab0 f080 	clz	r0, r0
   d7ec8:	0940      	lsrs	r0, r0, #5
   d7eca:	b005      	add	sp, #20
   d7ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7ece:	bf00      	nop
   d7ed0:	000d7e81 	.word	0x000d7e81

000d7ed4 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d7ed4:	f7fe beee 	b.w	d6cb4 <HAL_Interrupts_Disable_All>

000d7ed8 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d7ed8:	f7fe bee4 	b.w	d6ca4 <HAL_Interrupts_Enable_All>

000d7edc <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d7edc:	2200      	movs	r2, #0
   d7ede:	4611      	mov	r1, r2
   d7ee0:	6840      	ldr	r0, [r0, #4]
   d7ee2:	f7ff b97b 	b.w	d71dc <network_ready>

000d7ee6 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7ee6:	2200      	movs	r2, #0
   d7ee8:	4611      	mov	r1, r2
   d7eea:	6840      	ldr	r0, [r0, #4]
   d7eec:	f7ff b996 	b.w	d721c <network_listening>

000d7ef0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7ef0:	2200      	movs	r2, #0
   d7ef2:	4611      	mov	r1, r2
   d7ef4:	6840      	ldr	r0, [r0, #4]
   d7ef6:	f7ff b9a1 	b.w	d723c <network_get_listen_timeout>

000d7efa <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7efa:	2200      	movs	r2, #0
   d7efc:	6840      	ldr	r0, [r0, #4]
   d7efe:	f7ff b995 	b.w	d722c <network_set_listen_timeout>

000d7f02 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7f02:	2200      	movs	r2, #0
   d7f04:	f081 0101 	eor.w	r1, r1, #1
   d7f08:	6840      	ldr	r0, [r0, #4]
   d7f0a:	f7ff b97f 	b.w	d720c <network_listen>

000d7f0e <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d7f0e:	2300      	movs	r3, #0
   d7f10:	461a      	mov	r2, r3
   d7f12:	4619      	mov	r1, r3
   d7f14:	6840      	ldr	r0, [r0, #4]
   d7f16:	f7ff b971 	b.w	d71fc <network_off>

000d7f1a <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d7f1a:	2300      	movs	r3, #0
   d7f1c:	461a      	mov	r2, r3
   d7f1e:	4619      	mov	r1, r3
   d7f20:	6840      	ldr	r0, [r0, #4]
   d7f22:	f7ff b963 	b.w	d71ec <network_on>

000d7f26 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7f26:	2200      	movs	r2, #0
   d7f28:	4611      	mov	r1, r2
   d7f2a:	6840      	ldr	r0, [r0, #4]
   d7f2c:	f7ff b946 	b.w	d71bc <network_connecting>

000d7f30 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7f30:	2200      	movs	r2, #0
   d7f32:	2102      	movs	r1, #2
   d7f34:	6840      	ldr	r0, [r0, #4]
   d7f36:	f7ff b949 	b.w	d71cc <network_disconnect>

000d7f3a <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7f3a:	2300      	movs	r3, #0
   d7f3c:	461a      	mov	r2, r3
   d7f3e:	6840      	ldr	r0, [r0, #4]
   d7f40:	f7ff b934 	b.w	d71ac <network_connect>

000d7f44 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d7f44:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d7f46:	4c08      	ldr	r4, [pc, #32]	; (d7f68 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d7f48:	2528      	movs	r5, #40	; 0x28
   d7f4a:	462a      	mov	r2, r5
   d7f4c:	2100      	movs	r1, #0
   d7f4e:	4620      	mov	r0, r4
   d7f50:	f001 fbed 	bl	d972e <memset>
        cid = -1;
   d7f54:	f04f 33ff 	mov.w	r3, #4294967295
   d7f58:	6063      	str	r3, [r4, #4]
   d7f5a:	4b04      	ldr	r3, [pc, #16]	; (d7f6c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d7f5c:	8025      	strh	r5, [r4, #0]
   d7f5e:	2204      	movs	r2, #4
   d7f60:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d7f62:	4a03      	ldr	r2, [pc, #12]	; (d7f70 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d7f64:	601a      	str	r2, [r3, #0]
   d7f66:	bd38      	pop	{r3, r4, r5, pc}
   d7f68:	2003e204 	.word	0x2003e204
   d7f6c:	2003e1fc 	.word	0x2003e1fc
   d7f70:	000d9c70 	.word	0x000d9c70

000d7f74 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7f74:	4770      	bx	lr

000d7f76 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7f76:	7441      	strb	r1, [r0, #17]
   d7f78:	4770      	bx	lr

000d7f7a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d7f7a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7f7c:	7c00      	ldrb	r0, [r0, #16]
   d7f7e:	f7ff f801 	bl	d6f84 <HAL_USART_Available_Data_For_Write>
}
   d7f82:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7f86:	bd08      	pop	{r3, pc}

000d7f88 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7f88:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7f8a:	7c00      	ldrb	r0, [r0, #16]
   d7f8c:	f7fe ffd2 	bl	d6f34 <HAL_USART_Available_Data>
}
   d7f90:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7f94:	bd08      	pop	{r3, pc}

000d7f96 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7f96:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7f98:	7c00      	ldrb	r0, [r0, #16]
   d7f9a:	f7fe ffdb 	bl	d6f54 <HAL_USART_Peek_Data>
}
   d7f9e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7fa2:	bf28      	it	cs
   d7fa4:	f04f 30ff 	movcs.w	r0, #4294967295
   d7fa8:	bd08      	pop	{r3, pc}

000d7faa <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7faa:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7fac:	7c00      	ldrb	r0, [r0, #16]
   d7fae:	f7fe ffc9 	bl	d6f44 <HAL_USART_Read_Data>
}
   d7fb2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7fb6:	bf28      	it	cs
   d7fb8:	f04f 30ff 	movcs.w	r0, #4294967295
   d7fbc:	bd08      	pop	{r3, pc}

000d7fbe <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7fbe:	7c00      	ldrb	r0, [r0, #16]
   d7fc0:	f7fe bfd0 	b.w	d6f64 <HAL_USART_Flush_Data>

000d7fc4 <_ZN11USARTSerialD0Ev>:
   d7fc4:	b510      	push	{r4, lr}
   d7fc6:	2114      	movs	r1, #20
   d7fc8:	4604      	mov	r4, r0
   d7fca:	f000 fe21 	bl	d8c10 <_ZdlPvj>
   d7fce:	4620      	mov	r0, r4
   d7fd0:	bd10      	pop	{r4, pc}

000d7fd2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7fd2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7fd4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7fd6:	4604      	mov	r4, r0
   d7fd8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7fda:	b925      	cbnz	r5, d7fe6 <_ZN11USARTSerial5writeEh+0x14>
   d7fdc:	7c00      	ldrb	r0, [r0, #16]
   d7fde:	f7fe ffd1 	bl	d6f84 <HAL_USART_Available_Data_For_Write>
   d7fe2:	2800      	cmp	r0, #0
   d7fe4:	dd05      	ble.n	d7ff2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7fe6:	4631      	mov	r1, r6
   d7fe8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7fea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7fee:	f7fe bf99 	b.w	d6f24 <HAL_USART_Write_Data>
  }
  return 0;
}
   d7ff2:	4628      	mov	r0, r5
   d7ff4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7ff8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7ff8:	b510      	push	{r4, lr}
   d7ffa:	4604      	mov	r4, r0
   d7ffc:	4608      	mov	r0, r1
   d7ffe:	4611      	mov	r1, r2
   d8000:	2200      	movs	r2, #0
   d8002:	6062      	str	r2, [r4, #4]
   d8004:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8008:	60a2      	str	r2, [r4, #8]
   d800a:	4a05      	ldr	r2, [pc, #20]	; (d8020 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d800c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d800e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d8010:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d8012:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d8014:	461a      	mov	r2, r3
   d8016:	f7fe ff7d 	bl	d6f14 <HAL_USART_Init>
}
   d801a:	4620      	mov	r0, r4
   d801c:	bd10      	pop	{r4, pc}
   d801e:	bf00      	nop
   d8020:	000d9ca4 	.word	0x000d9ca4

000d8024 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d8024:	7c00      	ldrb	r0, [r0, #16]
   d8026:	f7fe bfa5 	b.w	d6f74 <HAL_USART_Is_Enabled>
	...

000d802c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d802c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d802e:	4d0c      	ldr	r5, [pc, #48]	; (d8060 <_Z22__fetch_global_Serial1v+0x34>)
   d8030:	6829      	ldr	r1, [r5, #0]
   d8032:	f011 0401 	ands.w	r4, r1, #1
   d8036:	d111      	bne.n	d805c <_Z22__fetch_global_Serial1v+0x30>
   d8038:	4628      	mov	r0, r5
   d803a:	f7fc f834 	bl	d40a6 <__cxa_guard_acquire>
   d803e:	b168      	cbz	r0, d805c <_Z22__fetch_global_Serial1v+0x30>
   d8040:	4a08      	ldr	r2, [pc, #32]	; (d8064 <_Z22__fetch_global_Serial1v+0x38>)
   d8042:	4b09      	ldr	r3, [pc, #36]	; (d8068 <_Z22__fetch_global_Serial1v+0x3c>)
   d8044:	4809      	ldr	r0, [pc, #36]	; (d806c <_Z22__fetch_global_Serial1v+0x40>)
   d8046:	4621      	mov	r1, r4
   d8048:	f7ff ffd6 	bl	d7ff8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d804c:	4628      	mov	r0, r5
   d804e:	f7fc f82f 	bl	d40b0 <__cxa_guard_release>
   d8052:	4a07      	ldr	r2, [pc, #28]	; (d8070 <_Z22__fetch_global_Serial1v+0x44>)
   d8054:	4907      	ldr	r1, [pc, #28]	; (d8074 <_Z22__fetch_global_Serial1v+0x48>)
   d8056:	4805      	ldr	r0, [pc, #20]	; (d806c <_Z22__fetch_global_Serial1v+0x40>)
   d8058:	f000 fdcc 	bl	d8bf4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d805c:	4803      	ldr	r0, [pc, #12]	; (d806c <_Z22__fetch_global_Serial1v+0x40>)
   d805e:	bd38      	pop	{r3, r4, r5, pc}
   d8060:	2003e2c4 	.word	0x2003e2c4
   d8064:	2003e2c8 	.word	0x2003e2c8
   d8068:	2003e240 	.word	0x2003e240
   d806c:	2003e22c 	.word	0x2003e22c
   d8070:	2003db50 	.word	0x2003db50
   d8074:	000d7f75 	.word	0x000d7f75

000d8078 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d8078:	4770      	bx	lr

000d807a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d807a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d807c:	4606      	mov	r6, r0
   d807e:	4615      	mov	r5, r2
   d8080:	460c      	mov	r4, r1
   d8082:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8084:	42bc      	cmp	r4, r7
   d8086:	d006      	beq.n	d8096 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8088:	6833      	ldr	r3, [r6, #0]
   d808a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d808e:	689b      	ldr	r3, [r3, #8]
   d8090:	4630      	mov	r0, r6
   d8092:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8094:	e7f6      	b.n	d8084 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d8096:	4628      	mov	r0, r5
   d8098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d809a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d809a:	2200      	movs	r2, #0
   d809c:	7c00      	ldrb	r0, [r0, #16]
   d809e:	f7fe bf89 	b.w	d6fb4 <HAL_I2C_Write_Data>

000d80a2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d80a2:	2100      	movs	r1, #0
   d80a4:	7c00      	ldrb	r0, [r0, #16]
   d80a6:	f7fe bf8d 	b.w	d6fc4 <HAL_I2C_Available_Data>

000d80aa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d80aa:	2100      	movs	r1, #0
   d80ac:	7c00      	ldrb	r0, [r0, #16]
   d80ae:	f7fe bf91 	b.w	d6fd4 <HAL_I2C_Read_Data>

000d80b2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d80b2:	2100      	movs	r1, #0
   d80b4:	7c00      	ldrb	r0, [r0, #16]
   d80b6:	f7fe bf95 	b.w	d6fe4 <HAL_I2C_Peek_Data>

000d80ba <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d80ba:	2100      	movs	r1, #0
   d80bc:	7c00      	ldrb	r0, [r0, #16]
   d80be:	f7fe bf99 	b.w	d6ff4 <HAL_I2C_Flush_Data>

000d80c2 <_ZN7TwoWireD0Ev>:
   d80c2:	b510      	push	{r4, lr}
   d80c4:	2114      	movs	r1, #20
   d80c6:	4604      	mov	r4, r0
   d80c8:	f000 fda2 	bl	d8c10 <_ZdlPvj>
   d80cc:	4620      	mov	r0, r4
   d80ce:	bd10      	pop	{r4, pc}

000d80d0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d80d0:	b510      	push	{r4, lr}
   d80d2:	4604      	mov	r4, r0
   d80d4:	2300      	movs	r3, #0
   d80d6:	6063      	str	r3, [r4, #4]
   d80d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d80dc:	60a3      	str	r3, [r4, #8]
   d80de:	4b04      	ldr	r3, [pc, #16]	; (d80f0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d80e0:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d80e2:	4608      	mov	r0, r1
   d80e4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d80e6:	4611      	mov	r1, r2
   d80e8:	f7fe ff94 	bl	d7014 <HAL_I2C_Init>
}
   d80ec:	4620      	mov	r0, r4
   d80ee:	bd10      	pop	{r4, pc}
   d80f0:	000d9cd4 	.word	0x000d9cd4

000d80f4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d80f4:	b570      	push	{r4, r5, r6, lr}
   d80f6:	460c      	mov	r4, r1
   d80f8:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d80fa:	2514      	movs	r5, #20
   d80fc:	4606      	mov	r6, r0
   d80fe:	462a      	mov	r2, r5
   d8100:	2100      	movs	r1, #0
   d8102:	a801      	add	r0, sp, #4
   d8104:	f001 fb13 	bl	d972e <memset>
   d8108:	7823      	ldrb	r3, [r4, #0]
   d810a:	f88d 3008 	strb.w	r3, [sp, #8]
   d810e:	6863      	ldr	r3, [r4, #4]
   d8110:	9303      	str	r3, [sp, #12]
   d8112:	68e3      	ldr	r3, [r4, #12]
   d8114:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d8116:	2200      	movs	r2, #0
   d8118:	7a23      	ldrb	r3, [r4, #8]
   d811a:	7c30      	ldrb	r0, [r6, #16]
   d811c:	f8ad 5004 	strh.w	r5, [sp, #4]
   d8120:	a901      	add	r1, sp, #4
   d8122:	9305      	str	r3, [sp, #20]
   d8124:	f7fe ff8e 	bl	d7044 <HAL_I2C_Request_Data_Ex>
}
   d8128:	b006      	add	sp, #24
   d812a:	bd70      	pop	{r4, r5, r6, pc}

000d812c <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d812c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d812e:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8130:	f88d 1000 	strb.w	r1, [sp]
   d8134:	f04f 0164 	mov.w	r1, #100	; 0x64
   d8138:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d813a:	bf18      	it	ne
   d813c:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d813e:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d8140:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d8142:	f88d 3008 	strb.w	r3, [sp, #8]
   d8146:	f7ff ffd5 	bl	d80f4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d814a:	b005      	add	sp, #20
   d814c:	f85d fb04 	ldr.w	pc, [sp], #4

000d8150 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d8150:	2200      	movs	r2, #0
   d8152:	7c00      	ldrb	r0, [r0, #16]
   d8154:	f7fe bf1e 	b.w	d6f94 <HAL_I2C_Begin_Transmission>

000d8158 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d8158:	b2c9      	uxtb	r1, r1
   d815a:	f7ff bff9 	b.w	d8150 <_ZN7TwoWire17beginTransmissionEh>

000d815e <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d815e:	2200      	movs	r2, #0
   d8160:	7c00      	ldrb	r0, [r0, #16]
   d8162:	f7fe bf1f 	b.w	d6fa4 <HAL_I2C_End_Transmission>

000d8166 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d8166:	2100      	movs	r1, #0
   d8168:	7c00      	ldrb	r0, [r0, #16]
   d816a:	f7fe bf4b 	b.w	d7004 <HAL_I2C_Is_Enabled>

000d816e <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d816e:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d8170:	2100      	movs	r1, #0
   d8172:	7c00      	ldrb	r0, [r0, #16]
   d8174:	f7fe ff56 	bl	d7024 <HAL_I2C_Acquire>
}
   d8178:	fab0 f080 	clz	r0, r0
   d817c:	0940      	lsrs	r0, r0, #5
   d817e:	bd08      	pop	{r3, pc}

000d8180 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d8180:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d8182:	2100      	movs	r1, #0
   d8184:	7c00      	ldrb	r0, [r0, #16]
   d8186:	f7fe ff55 	bl	d7034 <HAL_I2C_Release>
}
   d818a:	fab0 f080 	clz	r0, r0
   d818e:	0940      	lsrs	r0, r0, #5
   d8190:	bd08      	pop	{r3, pc}

000d8192 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8192:	2200      	movs	r2, #0
   d8194:	4611      	mov	r1, r2
   d8196:	6840      	ldr	r0, [r0, #4]
   d8198:	f7ff b840 	b.w	d721c <network_listening>

000d819c <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d819c:	2200      	movs	r2, #0
   d819e:	4611      	mov	r1, r2
   d81a0:	6840      	ldr	r0, [r0, #4]
   d81a2:	f7ff b84b 	b.w	d723c <network_get_listen_timeout>

000d81a6 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d81a6:	2200      	movs	r2, #0
   d81a8:	6840      	ldr	r0, [r0, #4]
   d81aa:	f7ff b83f 	b.w	d722c <network_set_listen_timeout>

000d81ae <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d81ae:	2200      	movs	r2, #0
   d81b0:	f081 0101 	eor.w	r1, r1, #1
   d81b4:	6840      	ldr	r0, [r0, #4]
   d81b6:	f7ff b829 	b.w	d720c <network_listen>

000d81ba <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d81ba:	2300      	movs	r3, #0
   d81bc:	461a      	mov	r2, r3
   d81be:	2101      	movs	r1, #1
   d81c0:	6840      	ldr	r0, [r0, #4]
   d81c2:	f7ff b81b 	b.w	d71fc <network_off>

000d81c6 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d81c6:	2300      	movs	r3, #0
   d81c8:	461a      	mov	r2, r3
   d81ca:	4619      	mov	r1, r3
   d81cc:	6840      	ldr	r0, [r0, #4]
   d81ce:	f7ff b80d 	b.w	d71ec <network_on>

000d81d2 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d81d2:	2200      	movs	r2, #0
   d81d4:	4611      	mov	r1, r2
   d81d6:	6840      	ldr	r0, [r0, #4]
   d81d8:	f7ff b800 	b.w	d71dc <network_ready>

000d81dc <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d81dc:	2200      	movs	r2, #0
   d81de:	4611      	mov	r1, r2
   d81e0:	6840      	ldr	r0, [r0, #4]
   d81e2:	f7fe bfeb 	b.w	d71bc <network_connecting>

000d81e6 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d81e6:	2200      	movs	r2, #0
   d81e8:	2102      	movs	r1, #2
   d81ea:	6840      	ldr	r0, [r0, #4]
   d81ec:	f7fe bfee 	b.w	d71cc <network_disconnect>

000d81f0 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d81f0:	2300      	movs	r3, #0
   d81f2:	461a      	mov	r2, r3
   d81f4:	6840      	ldr	r0, [r0, #4]
   d81f6:	f7fe bfd9 	b.w	d71ac <network_connect>

000d81fa <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d81fa:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d81fc:	4605      	mov	r5, r0
   d81fe:	b188      	cbz	r0, d8224 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8200:	6804      	ldr	r4, [r0, #0]
   d8202:	b14c      	cbz	r4, d8218 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d8204:	68a3      	ldr	r3, [r4, #8]
   d8206:	b11b      	cbz	r3, d8210 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d8208:	2203      	movs	r2, #3
   d820a:	4621      	mov	r1, r4
   d820c:	4620      	mov	r0, r4
   d820e:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8210:	2110      	movs	r1, #16
   d8212:	4620      	mov	r0, r4
   d8214:	f000 fcfc 	bl	d8c10 <_ZdlPvj>
   d8218:	4628      	mov	r0, r5
   d821a:	2114      	movs	r1, #20
      }
   d821c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8220:	f000 bcf6 	b.w	d8c10 <_ZdlPvj>
   d8224:	bd38      	pop	{r3, r4, r5, pc}

000d8226 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d8226:	b110      	cbz	r0, d822e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d8228:	6803      	ldr	r3, [r0, #0]
   d822a:	685b      	ldr	r3, [r3, #4]
   d822c:	4718      	bx	r3
   d822e:	4770      	bx	lr

000d8230 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d8230:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d8232:	6803      	ldr	r3, [r0, #0]
   d8234:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d8236:	b1bb      	cbz	r3, d8268 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d8238:	6858      	ldr	r0, [r3, #4]
   d823a:	f7fe fdf3 	bl	d6e24 <os_thread_is_current>
   d823e:	b978      	cbnz	r0, d8260 <_ZN6ThreadD1Ev+0x30>
   d8240:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d8242:	7c5a      	ldrb	r2, [r3, #17]
   d8244:	b912      	cbnz	r2, d824c <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d8246:	6858      	ldr	r0, [r3, #4]
   d8248:	f7fe fdfc 	bl	d6e44 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d824c:	6823      	ldr	r3, [r4, #0]
   d824e:	6858      	ldr	r0, [r3, #4]
   d8250:	f7fe fe00 	bl	d6e54 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8254:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d8256:	2300      	movs	r3, #0
   d8258:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d825a:	b128      	cbz	r0, d8268 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d825c:	f7ff ffcd 	bl	d81fa <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8260:	6820      	ldr	r0, [r4, #0]
   d8262:	b108      	cbz	r0, d8268 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d8264:	f7ff ffc9 	bl	d81fa <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d8268:	4620      	mov	r0, r4
   d826a:	bd10      	pop	{r4, pc}

000d826c <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d826c:	b538      	push	{r3, r4, r5, lr}
   d826e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8270:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d8274:	b108      	cbz	r0, d827a <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d8276:	f7fb ff14 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d827a:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d827e:	b108      	cbz	r0, d8284 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d8280:	f7fe fe20 	bl	d6ec4 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8284:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d8288:	b135      	cbz	r5, d8298 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d828a:	4628      	mov	r0, r5
   d828c:	f7ff ffd0 	bl	d8230 <_ZN6ThreadD1Ev>
   d8290:	2104      	movs	r1, #4
   d8292:	4628      	mov	r0, r5
   d8294:	f000 fcbc 	bl	d8c10 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8298:	6820      	ldr	r0, [r4, #0]
   d829a:	b108      	cbz	r0, d82a0 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d829c:	f7ff ffc3 	bl	d8226 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d82a0:	4620      	mov	r0, r4
   d82a2:	bd38      	pop	{r3, r4, r5, pc}

000d82a4 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d82a4:	b510      	push	{r4, lr}
   d82a6:	4b04      	ldr	r3, [pc, #16]	; (d82b8 <_ZN5spark9MeshClassD1Ev+0x14>)
   d82a8:	4604      	mov	r4, r0
   d82aa:	f840 3b08 	str.w	r3, [r0], #8
   d82ae:	f7ff ffdd 	bl	d826c <_ZN5spark11MeshPublishD1Ev>
   d82b2:	4620      	mov	r0, r4
   d82b4:	bd10      	pop	{r4, pc}
   d82b6:	bf00      	nop
   d82b8:	000d9cfc 	.word	0x000d9cfc

000d82bc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d82bc:	b538      	push	{r3, r4, r5, lr}
   d82be:	4c0e      	ldr	r4, [pc, #56]	; (d82f8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d82c0:	4b0e      	ldr	r3, [pc, #56]	; (d82fc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d82c2:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d82c4:	2500      	movs	r5, #0
   d82c6:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d82c8:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d82cc:	6063      	str	r3, [r4, #4]
   d82ce:	60a5      	str	r5, [r4, #8]
   d82d0:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d82d4:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d82d8:	f7fe fdec 	bl	d6eb4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d82dc:	4b08      	ldr	r3, [pc, #32]	; (d8300 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d82de:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d82e2:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d82e6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d82e8:	4620      	mov	r0, r4
   d82ea:	4a06      	ldr	r2, [pc, #24]	; (d8304 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d82ec:	4906      	ldr	r1, [pc, #24]	; (d8308 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d82ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d82f2:	f000 bc7f 	b.w	d8bf4 <__aeabi_atexit>
   d82f6:	bf00      	nop
   d82f8:	2003e34c 	.word	0x2003e34c
   d82fc:	000d9db0 	.word	0x000d9db0
   d8300:	000d9cfc 	.word	0x000d9cfc
   d8304:	2003db50 	.word	0x2003db50
   d8308:	000d82a5 	.word	0x000d82a5

000d830c <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d830c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d830e:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d8310:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d8312:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d8316:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d8318:	2201      	movs	r2, #1
   d831a:	f04f 33ff 	mov.w	r3, #4294967295
   d831e:	4621      	mov	r1, r4
   d8320:	47a8      	blx	r5
}
   d8322:	b003      	add	sp, #12
   d8324:	bd30      	pop	{r4, r5, pc}

000d8326 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d8326:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d8328:	6803      	ldr	r3, [r0, #0]
   d832a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d832c:	f04f 33ff 	mov.w	r3, #4294967295
   d8330:	46a4      	mov	ip, r4
}
   d8332:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d8336:	4760      	bx	ip

000d8338 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d8338:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d833a:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d833c:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d833e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d8342:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d8344:	4621      	mov	r1, r4
   d8346:	4613      	mov	r3, r2
   d8348:	2201      	movs	r2, #1
   d834a:	47a8      	blx	r5
}
   d834c:	b003      	add	sp, #12
   d834e:	bd30      	pop	{r4, r5, pc}

000d8350 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d8350:	4770      	bx	lr

000d8352 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d8352:	b538      	push	{r3, r4, r5, lr}
   d8354:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d8356:	681a      	ldr	r2, [r3, #0]
   d8358:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d835a:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d835c:	da05      	bge.n	d836a <_ZN9TCPClient9connectedEv+0x18>
   d835e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8362:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8366:	429a      	cmp	r2, r3
   d8368:	d001      	beq.n	d836e <_ZN9TCPClient9connectedEv+0x1c>
   d836a:	2501      	movs	r5, #1
   d836c:	e00b      	b.n	d8386 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d836e:	6803      	ldr	r3, [r0, #0]
   d8370:	691b      	ldr	r3, [r3, #16]
   d8372:	4798      	blx	r3
   d8374:	2800      	cmp	r0, #0
   d8376:	bf14      	ite	ne
   d8378:	2501      	movne	r5, #1
   d837a:	2500      	moveq	r5, #0
        if (!rv) {
   d837c:	d103      	bne.n	d8386 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d837e:	6823      	ldr	r3, [r4, #0]
   d8380:	4620      	mov	r0, r4
   d8382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8384:	4798      	blx	r3
        }
    }
    return rv;
}
   d8386:	4628      	mov	r0, r5
   d8388:	bd38      	pop	{r3, r4, r5, pc}

000d838a <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d838a:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d838c:	6818      	ldr	r0, [r3, #0]
}
   d838e:	43c0      	mvns	r0, r0
   d8390:	0fc0      	lsrs	r0, r0, #31
   d8392:	4770      	bx	lr

000d8394 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d8394:	4770      	bx	lr

000d8396 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d8396:	2000      	movs	r0, #0
   d8398:	4770      	bx	lr

000d839a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d839a:	b510      	push	{r4, lr}
   d839c:	2114      	movs	r1, #20
   d839e:	4604      	mov	r4, r0
   d83a0:	f000 fc36 	bl	d8c10 <_ZdlPvj>
   d83a4:	4620      	mov	r0, r4
   d83a6:	bd10      	pop	{r4, pc}

000d83a8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d83a8:	f7fb be79 	b.w	d409e <_ZdlPv>

000d83ac <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d83ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d83ae:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d83b0:	2200      	movs	r2, #0
   d83b2:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d83b4:	9202      	str	r2, [sp, #8]
   d83b6:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d83b8:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d83ba:	4604      	mov	r4, r0
   d83bc:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d83be:	d008      	beq.n	d83d2 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d83c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d83c4:	fbb3 f1f2 	udiv	r1, r3, r2
   d83c8:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d83ca:	fb02 3111 	mls	r1, r2, r1, r3
   d83ce:	434a      	muls	r2, r1
   d83d0:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d83d2:	6960      	ldr	r0, [r4, #20]
   d83d4:	2308      	movs	r3, #8
   d83d6:	9300      	str	r3, [sp, #0]
   d83d8:	f241 0205 	movw	r2, #4101	; 0x1005
   d83dc:	446b      	add	r3, sp
   d83de:	f640 71ff 	movw	r1, #4095	; 0xfff
   d83e2:	6800      	ldr	r0, [r0, #0]
   d83e4:	f7fe fe36 	bl	d7054 <sock_setsockopt>
    if (ret < 0) {
   d83e8:	2800      	cmp	r0, #0
   d83ea:	db08      	blt.n	d83fe <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d83ec:	6960      	ldr	r0, [r4, #20]
   d83ee:	2300      	movs	r3, #0
   d83f0:	4632      	mov	r2, r6
   d83f2:	4629      	mov	r1, r5
   d83f4:	6800      	ldr	r0, [r0, #0]
   d83f6:	f7fe fe4d 	bl	d7094 <sock_send>
    if (ret < 0) {
   d83fa:	2800      	cmp	r0, #0
   d83fc:	da04      	bge.n	d8408 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d83fe:	f7fe ff6d 	bl	d72dc <__errno>
   d8402:	6803      	ldr	r3, [r0, #0]
   d8404:	6063      	str	r3, [r4, #4]
   d8406:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d8408:	b004      	add	sp, #16
   d840a:	bd70      	pop	{r4, r5, r6, pc}

000d840c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d840c:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d840e:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d8410:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d8412:	689b      	ldr	r3, [r3, #8]
   d8414:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d8416:	68a3      	ldr	r3, [r4, #8]
   d8418:	3b01      	subs	r3, #1
   d841a:	60a3      	str	r3, [r4, #8]
   d841c:	b92b      	cbnz	r3, d842a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d841e:	6823      	ldr	r3, [r4, #0]
   d8420:	4620      	mov	r0, r4
   d8422:	68db      	ldr	r3, [r3, #12]
        }
    }
   d8424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d8428:	4718      	bx	r3
   d842a:	bd10      	pop	{r4, pc}

000d842c <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d842c:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d842e:	4604      	mov	r4, r0
   d8430:	694d      	ldr	r5, [r1, #20]
   d8432:	4b05      	ldr	r3, [pc, #20]	; (d8448 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d8434:	f844 3b04 	str.w	r3, [r4], #4
   d8438:	358c      	adds	r5, #140	; 0x8c
   d843a:	4606      	mov	r6, r0
   d843c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d843e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8440:	682b      	ldr	r3, [r5, #0]
   d8442:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d8444:	4630      	mov	r0, r6
   d8446:	bd70      	pop	{r4, r5, r6, pc}
   d8448:	000d9c2c 	.word	0x000d9c2c

000d844c <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d844c:	b510      	push	{r4, lr}
   d844e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d8450:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8454:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8458:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d845a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d845c:	d005      	beq.n	d846a <_ZN9TCPClient4peekEv+0x1e>
   d845e:	6962      	ldr	r2, [r4, #20]
   d8460:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d8464:	4413      	add	r3, r2
   d8466:	7918      	ldrb	r0, [r3, #4]
   d8468:	bd10      	pop	{r4, pc}
   d846a:	6803      	ldr	r3, [r0, #0]
   d846c:	691b      	ldr	r3, [r3, #16]
   d846e:	4798      	blx	r3
   d8470:	2800      	cmp	r0, #0
   d8472:	d1f4      	bne.n	d845e <_ZN9TCPClient4peekEv+0x12>
   d8474:	f04f 30ff 	mov.w	r0, #4294967295
}
   d8478:	bd10      	pop	{r4, pc}

000d847a <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d847a:	b510      	push	{r4, lr}
   d847c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d847e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8482:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8486:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d8488:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d848a:	d008      	beq.n	d849e <_ZN9TCPClient4readEv+0x24>
   d848c:	6962      	ldr	r2, [r4, #20]
   d848e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d8492:	1c59      	adds	r1, r3, #1
   d8494:	4413      	add	r3, r2
   d8496:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d849a:	7918      	ldrb	r0, [r3, #4]
   d849c:	bd10      	pop	{r4, pc}
   d849e:	6803      	ldr	r3, [r0, #0]
   d84a0:	691b      	ldr	r3, [r3, #16]
   d84a2:	4798      	blx	r3
   d84a4:	2800      	cmp	r0, #0
   d84a6:	d1f1      	bne.n	d848c <_ZN9TCPClient4readEv+0x12>
   d84a8:	f04f 30ff 	mov.w	r0, #4294967295
}
   d84ac:	bd10      	pop	{r4, pc}

000d84ae <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d84ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d84b0:	6943      	ldr	r3, [r0, #20]
   d84b2:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d84b4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d84b8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d84bc:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d84be:	4605      	mov	r5, r0
   d84c0:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d84c2:	d106      	bne.n	d84d2 <_ZN9TCPClient4readEPhj+0x24>
   d84c4:	6803      	ldr	r3, [r0, #0]
   d84c6:	691b      	ldr	r3, [r3, #16]
   d84c8:	4798      	blx	r3
   d84ca:	b910      	cbnz	r0, d84d2 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d84cc:	f04f 34ff 	mov.w	r4, #4294967295
   d84d0:	e014      	b.n	d84fc <_ZN9TCPClient4readEPhj+0x4e>
   d84d2:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d84d4:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d84d8:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d84dc:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d84de:	42bc      	cmp	r4, r7
   d84e0:	bf28      	it	cs
   d84e2:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d84e4:	4419      	add	r1, r3
   d84e6:	4622      	mov	r2, r4
   d84e8:	3104      	adds	r1, #4
   d84ea:	4630      	mov	r0, r6
   d84ec:	f001 f914 	bl	d9718 <memcpy>
   d84f0:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d84f2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d84f6:	4423      	add	r3, r4
   d84f8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d84fc:	4620      	mov	r0, r4
   d84fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8500 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8504:	4698      	mov	r8, r3
    stop();
   d8506:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8508:	b093      	sub	sp, #76	; 0x4c
    stop();
   d850a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d850c:	460d      	mov	r5, r1
   d850e:	4606      	mov	r6, r0
   d8510:	4617      	mov	r7, r2
    stop();
   d8512:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d8514:	ab12      	add	r3, sp, #72	; 0x48
   d8516:	2400      	movs	r4, #0
   d8518:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d851c:	4622      	mov	r2, r4
   d851e:	4621      	mov	r1, r4
   d8520:	4628      	mov	r0, r5
   d8522:	f7fe fb7f 	bl	d6c24 <netdb_getaddrinfo>
   d8526:	4681      	mov	r9, r0
   d8528:	2800      	cmp	r0, #0
   d852a:	d13d      	bne.n	d85a8 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d852c:	9b00      	ldr	r3, [sp, #0]
   d852e:	2b00      	cmp	r3, #0
   d8530:	d056      	beq.n	d85e0 <_ZN9TCPClient7connectEPKctm+0xe0>
   d8532:	695b      	ldr	r3, [r3, #20]
   d8534:	2b00      	cmp	r3, #0
   d8536:	d053      	beq.n	d85e0 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d8538:	a806      	add	r0, sp, #24
   d853a:	f7ff fbc1 	bl	d7cc0 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d853e:	9b00      	ldr	r3, [sp, #0]
   d8540:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d8542:	7863      	ldrb	r3, [r4, #1]
   d8544:	2b02      	cmp	r3, #2
   d8546:	d101      	bne.n	d854c <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d8548:	1d21      	adds	r1, r4, #4
   d854a:	e013      	b.n	d8574 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d854c:	2b0a      	cmp	r3, #10
   d854e:	d114      	bne.n	d857a <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d8550:	2211      	movs	r2, #17
   d8552:	4649      	mov	r1, r9
   d8554:	a801      	add	r0, sp, #4
   d8556:	f001 f8ea 	bl	d972e <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d855a:	68a3      	ldr	r3, [r4, #8]
   d855c:	bb33      	cbnz	r3, d85ac <_ZN9TCPClient7connectEPKctm+0xac>
   d855e:	68e3      	ldr	r3, [r4, #12]
   d8560:	bb23      	cbnz	r3, d85ac <_ZN9TCPClient7connectEPKctm+0xac>
   d8562:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d8566:	6925      	ldr	r5, [r4, #16]
   d8568:	f7fe fcc4 	bl	d6ef4 <inet_htonl>
   d856c:	4285      	cmp	r5, r0
   d856e:	d11d      	bne.n	d85ac <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d8570:	f104 0114 	add.w	r1, r4, #20
   d8574:	a806      	add	r0, sp, #24
   d8576:	f7ff fbe6 	bl	d7d46 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d857a:	a806      	add	r0, sp, #24
   d857c:	f7ff fbc0 	bl	d7d00 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d8580:	2800      	cmp	r0, #0
   d8582:	d02d      	beq.n	d85e0 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d8584:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d8586:	ad07      	add	r5, sp, #28
   d8588:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d858c:	4b18      	ldr	r3, [pc, #96]	; (d85f0 <_ZN9TCPClient7connectEPKctm+0xf0>)
   d858e:	930c      	str	r3, [sp, #48]	; 0x30
   d8590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8592:	ac0d      	add	r4, sp, #52	; 0x34
   d8594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8596:	682b      	ldr	r3, [r5, #0]
   d8598:	7023      	strb	r3, [r4, #0]
   d859a:	463a      	mov	r2, r7
   d859c:	4643      	mov	r3, r8
   d859e:	a90c      	add	r1, sp, #48	; 0x30
   d85a0:	4630      	mov	r0, r6
   d85a2:	47c8      	blx	r9
   d85a4:	4681      	mov	r9, r0
   d85a6:	e01b      	b.n	d85e0 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d85a8:	46a1      	mov	r9, r4
   d85aa:	e019      	b.n	d85e0 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d85ac:	f104 0308 	add.w	r3, r4, #8
   d85b0:	ad01      	add	r5, sp, #4
   d85b2:	3418      	adds	r4, #24
   d85b4:	6818      	ldr	r0, [r3, #0]
   d85b6:	6859      	ldr	r1, [r3, #4]
   d85b8:	462a      	mov	r2, r5
   d85ba:	c203      	stmia	r2!, {r0, r1}
   d85bc:	3308      	adds	r3, #8
   d85be:	42a3      	cmp	r3, r4
   d85c0:	4615      	mov	r5, r2
   d85c2:	d1f7      	bne.n	d85b4 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d85c4:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d85c6:	a901      	add	r1, sp, #4
   d85c8:	a80c      	add	r0, sp, #48	; 0x30
   d85ca:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d85cc:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d85d0:	f7ff fb84 	bl	d7cdc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d85d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d85d6:	ac07      	add	r4, sp, #28
   d85d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d85da:	682b      	ldr	r3, [r5, #0]
   d85dc:	7023      	strb	r3, [r4, #0]
   d85de:	e7cc      	b.n	d857a <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d85e0:	9800      	ldr	r0, [sp, #0]
   d85e2:	f7fe fb17 	bl	d6c14 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d85e6:	4648      	mov	r0, r9
   d85e8:	b013      	add	sp, #76	; 0x4c
   d85ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d85ee:	bf00      	nop
   d85f0:	000d9c2c 	.word	0x000d9c2c

000d85f4 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d85f4:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d85f6:	2300      	movs	r3, #0
   d85f8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d85fc:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d85fe:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d8602:	4770      	bx	lr

000d8604 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d8604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8608:	461e      	mov	r6, r3
    stop();
   d860a:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d860c:	460c      	mov	r4, r1
   d860e:	b08a      	sub	sp, #40	; 0x28
    stop();
   d8610:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d8612:	4605      	mov	r5, r0
   d8614:	4617      	mov	r7, r2
    stop();
   d8616:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d8618:	7d23      	ldrb	r3, [r4, #20]
   d861a:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d861e:	2b04      	cmp	r3, #4
   d8620:	bf0c      	ite	eq
   d8622:	2002      	moveq	r0, #2
   d8624:	200a      	movne	r0, #10
   d8626:	2206      	movs	r2, #6
   d8628:	2101      	movs	r1, #1
   d862a:	f7fe fd3b 	bl	d70a4 <sock_socket>
   d862e:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d8632:	696b      	ldr	r3, [r5, #20]
   d8634:	681b      	ldr	r3, [r3, #0]
   d8636:	2b00      	cmp	r3, #0
   d8638:	db18      	blt.n	d866c <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d863a:	4628      	mov	r0, r5
   d863c:	f7ff ffda 	bl	d85f4 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d8640:	b1d6      	cbz	r6, d8678 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d8642:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d8644:	a903      	add	r1, sp, #12
   d8646:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d8648:	9303      	str	r3, [sp, #12]
   d864a:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d864e:	f7fe fba1 	bl	d6d94 <if_index_to_name>
   d8652:	b958      	cbnz	r0, d866c <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d8654:	6968      	ldr	r0, [r5, #20]
   d8656:	2306      	movs	r3, #6
   d8658:	9300      	str	r3, [sp, #0]
   d865a:	f241 020b 	movw	r2, #4107	; 0x100b
   d865e:	ab03      	add	r3, sp, #12
   d8660:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8664:	6800      	ldr	r0, [r0, #0]
   d8666:	f7fe fcf5 	bl	d7054 <sock_setsockopt>
   d866a:	b128      	cbz	r0, d8678 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d866c:	682b      	ldr	r3, [r5, #0]
   d866e:	4628      	mov	r0, r5
   d8670:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d8672:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d8674:	4798      	blx	r3
   d8676:	e03b      	b.n	d86f0 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d8678:	261c      	movs	r6, #28
   d867a:	4632      	mov	r2, r6
   d867c:	2100      	movs	r1, #0
   d867e:	a803      	add	r0, sp, #12
   d8680:	f001 f855 	bl	d972e <memset>
    if (ip.version() == 4) {
   d8684:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d8686:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d868a:	2b04      	cmp	r3, #4
   d868c:	d10c      	bne.n	d86a8 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d868e:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d8690:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d8692:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d8696:	f7fe fc35 	bl	d6f04 <inet_htons>
   d869a:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d869e:	6860      	ldr	r0, [r4, #4]
   d86a0:	f7fe fc28 	bl	d6ef4 <inet_htonl>
   d86a4:	9004      	str	r0, [sp, #16]
   d86a6:	e013      	b.n	d86d0 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d86a8:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d86aa:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d86ac:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d86b0:	f7fe fc28 	bl	d6f04 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d86b4:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d86b6:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d86ba:	1d23      	adds	r3, r4, #4
   d86bc:	f104 0714 	add.w	r7, r4, #20
   d86c0:	6818      	ldr	r0, [r3, #0]
   d86c2:	6859      	ldr	r1, [r3, #4]
   d86c4:	4632      	mov	r2, r6
   d86c6:	c203      	stmia	r2!, {r0, r1}
   d86c8:	3308      	adds	r3, #8
   d86ca:	42bb      	cmp	r3, r7
   d86cc:	4616      	mov	r6, r2
   d86ce:	d1f7      	bne.n	d86c0 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d86d0:	696b      	ldr	r3, [r5, #20]
   d86d2:	221c      	movs	r2, #28
   d86d4:	a903      	add	r1, sp, #12
   d86d6:	6818      	ldr	r0, [r3, #0]
   d86d8:	f7fe fccc 	bl	d7074 <sock_connect>
   d86dc:	2800      	cmp	r0, #0
   d86de:	d1c5      	bne.n	d866c <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d86e0:	3404      	adds	r4, #4
   d86e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d86e4:	696d      	ldr	r5, [r5, #20]
   d86e6:	358c      	adds	r5, #140	; 0x8c
   d86e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d86ea:	6823      	ldr	r3, [r4, #0]
   d86ec:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d86ee:	2401      	movs	r4, #1
}
   d86f0:	4620      	mov	r0, r4
   d86f2:	b00a      	add	sp, #40	; 0x28
   d86f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d86f8 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d86f8:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d86fa:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d86fc:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d86fe:	6818      	ldr	r0, [r3, #0]
   d8700:	2800      	cmp	r0, #0
   d8702:	db01      	blt.n	d8708 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d8704:	f7fe fcae 	bl	d7064 <sock_close>
   d8708:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d870a:	f04f 32ff 	mov.w	r2, #4294967295
   d870e:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d8710:	6960      	ldr	r0, [r4, #20]
   d8712:	2211      	movs	r2, #17
   d8714:	2100      	movs	r1, #0
   d8716:	308c      	adds	r0, #140	; 0x8c
   d8718:	f001 f809 	bl	d972e <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d871c:	4620      	mov	r0, r4
}
   d871e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d8722:	f7ff bf67 	b.w	d85f4 <_ZN9TCPClient12flush_bufferEv>
	...

000d8728 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d8728:	b530      	push	{r4, r5, lr}
   d872a:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d872c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d8730:	b08b      	sub	sp, #44	; 0x2c
   d8732:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d8734:	b11b      	cbz	r3, d873e <_ZN9TCPClient9availableEv+0x16>
   d8736:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d873a:	429a      	cmp	r2, r3
   d873c:	d040      	beq.n	d87c0 <_ZN9TCPClient9availableEv+0x98>
   d873e:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d8740:	6818      	ldr	r0, [r3, #0]
   d8742:	2800      	cmp	r0, #0
   d8744:	db3f      	blt.n	d87c6 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d8746:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d874a:	2d7f      	cmp	r5, #127	; 0x7f
   d874c:	d83b      	bhi.n	d87c6 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d874e:	1d19      	adds	r1, r3, #4
   d8750:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d8754:	2308      	movs	r3, #8
   d8756:	4429      	add	r1, r5
   d8758:	f7fe fc94 	bl	d7084 <sock_recv>
            if (ret > 0) {
   d875c:	2800      	cmp	r0, #0
   d875e:	dd0c      	ble.n	d877a <_ZN9TCPClient9availableEv+0x52>
   d8760:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d8762:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8766:	b90a      	cbnz	r2, d876c <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d8768:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d876c:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d876e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d8772:	4418      	add	r0, r3
   d8774:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d8778:	e025      	b.n	d87c6 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d877a:	f7fe fdaf 	bl	d72dc <__errno>
   d877e:	6803      	ldr	r3, [r0, #0]
   d8780:	2b0b      	cmp	r3, #11
   d8782:	d020      	beq.n	d87c6 <_ZN9TCPClient9availableEv+0x9e>
   d8784:	f7fe fdaa 	bl	d72dc <__errno>
   d8788:	6803      	ldr	r3, [r0, #0]
   d878a:	2b0b      	cmp	r3, #11
   d878c:	d01b      	beq.n	d87c6 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d878e:	2320      	movs	r3, #32
   d8790:	2500      	movs	r5, #0
   d8792:	9302      	str	r3, [sp, #8]
   d8794:	9503      	str	r5, [sp, #12]
   d8796:	f7fe fda1 	bl	d72dc <__errno>
   d879a:	6803      	ldr	r3, [r0, #0]
   d879c:	9301      	str	r3, [sp, #4]
   d879e:	4b0e      	ldr	r3, [pc, #56]	; (d87d8 <_ZN9TCPClient9availableEv+0xb0>)
   d87a0:	9300      	str	r3, [sp, #0]
   d87a2:	aa02      	add	r2, sp, #8
   d87a4:	462b      	mov	r3, r5
   d87a6:	490d      	ldr	r1, [pc, #52]	; (d87dc <_ZN9TCPClient9availableEv+0xb4>)
   d87a8:	2032      	movs	r0, #50	; 0x32
   d87aa:	f7fe fcbb 	bl	d7124 <log_message>
                    sock_close(d_->sock);
   d87ae:	6963      	ldr	r3, [r4, #20]
   d87b0:	6818      	ldr	r0, [r3, #0]
   d87b2:	f7fe fc57 	bl	d7064 <sock_close>
   d87b6:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d87b8:	f04f 32ff 	mov.w	r2, #4294967295
   d87bc:	601a      	str	r2, [r3, #0]
   d87be:	e002      	b.n	d87c6 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d87c0:	f7ff ff18 	bl	d85f4 <_ZN9TCPClient12flush_bufferEv>
   d87c4:	e7bb      	b.n	d873e <_ZN9TCPClient9availableEv+0x16>
   d87c6:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d87c8:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d87cc:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d87d0:	1a18      	subs	r0, r3, r0
}
   d87d2:	b00b      	add	sp, #44	; 0x2c
   d87d4:	bd30      	pop	{r4, r5, pc}
   d87d6:	bf00      	nop
   d87d8:	000d9d97 	.word	0x000d9d97
   d87dc:	000d9d90 	.word	0x000d9d90

000d87e0 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d87e0:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d87e2:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d87e4:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d87e6:	6001      	str	r1, [r0, #0]
   d87e8:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d87ec:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d87f0:	3088      	adds	r0, #136	; 0x88
   d87f2:	f7ff fa65 	bl	d7cc0 <_ZN9IPAddressC1Ev>
}
   d87f6:	4620      	mov	r0, r4
   d87f8:	bd10      	pop	{r4, pc}
	...

000d87fc <_ZN9TCPClientC1Ei>:
   d87fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d8800:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d8802:	2300      	movs	r3, #0
   d8804:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d8806:	4a14      	ldr	r2, [pc, #80]	; (d8858 <_ZN9TCPClientC1Ei+0x5c>)
   d8808:	6043      	str	r3, [r0, #4]
   d880a:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d880c:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d880e:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d8810:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8812:	20a0      	movs	r0, #160	; 0xa0
   d8814:	460e      	mov	r6, r1
   d8816:	f7fb fc3e 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d881a:	4605      	mov	r5, r0
   d881c:	b110      	cbz	r0, d8824 <_ZN9TCPClientC1Ei+0x28>
   d881e:	4631      	mov	r1, r6
   d8820:	f7ff ffde 	bl	d87e0 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8824:	2014      	movs	r0, #20
   d8826:	f7fb fc36 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d882a:	4603      	mov	r3, r0
   d882c:	b128      	cbz	r0, d883a <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d882e:	2201      	movs	r2, #1
   d8830:	6042      	str	r2, [r0, #4]
   d8832:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d8834:	4a09      	ldr	r2, [pc, #36]	; (d885c <_ZN9TCPClientC1Ei+0x60>)
   d8836:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d8838:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d883a:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d883c:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d883e:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d8840:	b128      	cbz	r0, d884e <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d8842:	6843      	ldr	r3, [r0, #4]
   d8844:	3b01      	subs	r3, #1
   d8846:	6043      	str	r3, [r0, #4]
   d8848:	b90b      	cbnz	r3, d884e <_ZN9TCPClientC1Ei+0x52>
   d884a:	f7ff fddf 	bl	d840c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d884e:	4620      	mov	r0, r4
   d8850:	f7ff fed0 	bl	d85f4 <_ZN9TCPClient12flush_bufferEv>
}
   d8854:	4620      	mov	r0, r4
   d8856:	bd70      	pop	{r4, r5, r6, pc}
   d8858:	000d9d4c 	.word	0x000d9d4c
   d885c:	000d9d30 	.word	0x000d9d30

000d8860 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d8860:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d8862:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d8866:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d8868:	f7ff ffc8 	bl	d87fc <_ZN9TCPClientC1Ei>
}
   d886c:	4620      	mov	r0, r4
   d886e:	bd10      	pop	{r4, pc}

000d8870 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d8870:	b510      	push	{r4, lr}
   d8872:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d8874:	6800      	ldr	r0, [r0, #0]
   d8876:	2800      	cmp	r0, #0
   d8878:	db01      	blt.n	d887e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d887a:	f7fe fbf3 	bl	d7064 <sock_close>
    }
}
   d887e:	4620      	mov	r0, r4
   d8880:	bd10      	pop	{r4, pc}

000d8882 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d8882:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d8884:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d8886:	4620      	mov	r0, r4
   d8888:	f7ff fff2 	bl	d8870 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d888c:	b124      	cbz	r4, d8898 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d888e:	4620      	mov	r0, r4
   d8890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d8894:	f7fb bc03 	b.w	d409e <_ZdlPv>
   d8898:	bd10      	pop	{r4, pc}

000d889a <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d889a:	2300      	movs	r3, #0
   d889c:	461a      	mov	r2, r3
   d889e:	6840      	ldr	r0, [r0, #4]
   d88a0:	f7fe bc84 	b.w	d71ac <network_connect>

000d88a4 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d88a4:	2200      	movs	r2, #0
   d88a6:	2102      	movs	r1, #2
   d88a8:	6840      	ldr	r0, [r0, #4]
   d88aa:	f7fe bc8f 	b.w	d71cc <network_disconnect>

000d88ae <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d88ae:	2200      	movs	r2, #0
   d88b0:	4611      	mov	r1, r2
   d88b2:	6840      	ldr	r0, [r0, #4]
   d88b4:	f7fe bc82 	b.w	d71bc <network_connecting>

000d88b8 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d88b8:	2200      	movs	r2, #0
   d88ba:	4611      	mov	r1, r2
   d88bc:	6840      	ldr	r0, [r0, #4]
   d88be:	f7fe bc8d 	b.w	d71dc <network_ready>

000d88c2 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d88c2:	2300      	movs	r3, #0
   d88c4:	461a      	mov	r2, r3
   d88c6:	4619      	mov	r1, r3
   d88c8:	6840      	ldr	r0, [r0, #4]
   d88ca:	f7fe bc8f 	b.w	d71ec <network_on>

000d88ce <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d88ce:	2300      	movs	r3, #0
   d88d0:	461a      	mov	r2, r3
   d88d2:	4619      	mov	r1, r3
   d88d4:	6840      	ldr	r0, [r0, #4]
   d88d6:	f7fe bc91 	b.w	d71fc <network_off>

000d88da <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d88da:	2200      	movs	r2, #0
   d88dc:	f081 0101 	eor.w	r1, r1, #1
   d88e0:	6840      	ldr	r0, [r0, #4]
   d88e2:	f7fe bc93 	b.w	d720c <network_listen>

000d88e6 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d88e6:	2200      	movs	r2, #0
   d88e8:	6840      	ldr	r0, [r0, #4]
   d88ea:	f7fe bc9f 	b.w	d722c <network_set_listen_timeout>

000d88ee <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d88ee:	2200      	movs	r2, #0
   d88f0:	4611      	mov	r1, r2
   d88f2:	6840      	ldr	r0, [r0, #4]
   d88f4:	f7fe bca2 	b.w	d723c <network_get_listen_timeout>

000d88f8 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d88f8:	2200      	movs	r2, #0
   d88fa:	4611      	mov	r1, r2
   d88fc:	6840      	ldr	r0, [r0, #4]
   d88fe:	f7fe bc8d 	b.w	d721c <network_listening>

000d8902 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8902:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8906:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d8908:	b095      	sub	sp, #84	; 0x54
   d890a:	4616      	mov	r6, r2
   d890c:	460d      	mov	r5, r1
   d890e:	4607      	mov	r7, r0
    IPAddress addr;
   d8910:	f7ff f9d6 	bl	d7cc0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d8914:	4621      	mov	r1, r4
   d8916:	2220      	movs	r2, #32
   d8918:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d891a:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d891c:	f000 ff07 	bl	d972e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8920:	2340      	movs	r3, #64	; 0x40
   d8922:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8924:	4621      	mov	r1, r4
   d8926:	466b      	mov	r3, sp
   d8928:	aa0c      	add	r2, sp, #48	; 0x30
   d892a:	4630      	mov	r0, r6
   d892c:	f7fe f97a 	bl	d6c24 <netdb_getaddrinfo>
    if (!r) {
   d8930:	4604      	mov	r4, r0
   d8932:	2800      	cmp	r0, #0
   d8934:	d144      	bne.n	d89c0 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8936:	4602      	mov	r2, r0
   d8938:	2101      	movs	r1, #1
   d893a:	6868      	ldr	r0, [r5, #4]
   d893c:	f7fe fc4e 	bl	d71dc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8940:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8942:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8944:	4622      	mov	r2, r4
   d8946:	6868      	ldr	r0, [r5, #4]
   d8948:	f7fe fc48 	bl	d71dc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d894c:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d894e:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d8950:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8952:	2e00      	cmp	r6, #0
   d8954:	d034      	beq.n	d89c0 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d8956:	2900      	cmp	r1, #0
   d8958:	d132      	bne.n	d89c0 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d895a:	6873      	ldr	r3, [r6, #4]
   d895c:	2b02      	cmp	r3, #2
   d895e:	d002      	beq.n	d8966 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d8960:	2b0a      	cmp	r3, #10
   d8962:	d009      	beq.n	d8978 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d8964:	e02a      	b.n	d89bc <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d8966:	f1b8 0f00 	cmp.w	r8, #0
   d896a:	d027      	beq.n	d89bc <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d896c:	6971      	ldr	r1, [r6, #20]
   d896e:	4638      	mov	r0, r7
   d8970:	3104      	adds	r1, #4
   d8972:	f7ff f9e8 	bl	d7d46 <_ZN9IPAddressaSEPKh>
   d8976:	e020      	b.n	d89ba <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8978:	f1b9 0f00 	cmp.w	r9, #0
   d897c:	d01e      	beq.n	d89bc <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d897e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8980:	2211      	movs	r2, #17
   d8982:	a801      	add	r0, sp, #4
   d8984:	f000 fed3 	bl	d972e <memset>
                    a.v = 6;
   d8988:	2306      	movs	r3, #6
   d898a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d898e:	ad01      	add	r5, sp, #4
   d8990:	f104 0308 	add.w	r3, r4, #8
   d8994:	3418      	adds	r4, #24
   d8996:	6818      	ldr	r0, [r3, #0]
   d8998:	6859      	ldr	r1, [r3, #4]
   d899a:	462a      	mov	r2, r5
   d899c:	c203      	stmia	r2!, {r0, r1}
   d899e:	3308      	adds	r3, #8
   d89a0:	42a3      	cmp	r3, r4
   d89a2:	4615      	mov	r5, r2
   d89a4:	d1f7      	bne.n	d8996 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d89a6:	a901      	add	r1, sp, #4
   d89a8:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d89aa:	ad07      	add	r5, sp, #28
   d89ac:	f7ff f996 	bl	d7cdc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d89b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d89b2:	1d3c      	adds	r4, r7, #4
   d89b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d89b6:	682b      	ldr	r3, [r5, #0]
   d89b8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d89ba:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d89bc:	69f6      	ldr	r6, [r6, #28]
   d89be:	e7c8      	b.n	d8952 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d89c0:	9800      	ldr	r0, [sp, #0]
   d89c2:	f7fe f927 	bl	d6c14 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d89c6:	4638      	mov	r0, r7
   d89c8:	b015      	add	sp, #84	; 0x54
   d89ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d89d0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d89d0:	4b02      	ldr	r3, [pc, #8]	; (d89dc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d89d2:	4a03      	ldr	r2, [pc, #12]	; (d89e0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d89d4:	601a      	str	r2, [r3, #0]
   d89d6:	2200      	movs	r2, #0
   d89d8:	605a      	str	r2, [r3, #4]
   d89da:	4770      	bx	lr
   d89dc:	2003e520 	.word	0x2003e520
   d89e0:	000d9db0 	.word	0x000d9db0

000d89e4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d89e4:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d89e6:	4e18      	ldr	r6, [pc, #96]	; (d8a48 <pinAvailable+0x64>)
   d89e8:	6831      	ldr	r1, [r6, #0]
   d89ea:	f011 0501 	ands.w	r5, r1, #1
   d89ee:	4604      	mov	r4, r0
   d89f0:	d10a      	bne.n	d8a08 <pinAvailable+0x24>
   d89f2:	4630      	mov	r0, r6
   d89f4:	f7fb fb57 	bl	d40a6 <__cxa_guard_acquire>
   d89f8:	b130      	cbz	r0, d8a08 <pinAvailable+0x24>
   d89fa:	4629      	mov	r1, r5
   d89fc:	4813      	ldr	r0, [pc, #76]	; (d8a4c <pinAvailable+0x68>)
   d89fe:	f7fe fcb9 	bl	d7374 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8a02:	4630      	mov	r0, r6
   d8a04:	f7fb fb54 	bl	d40b0 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d8a08:	4810      	ldr	r0, [pc, #64]	; (d8a4c <pinAvailable+0x68>)
   d8a0a:	f7fe fde8 	bl	d75de <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d8a0e:	b128      	cbz	r0, d8a1c <pinAvailable+0x38>
   d8a10:	f1a4 030b 	sub.w	r3, r4, #11
   d8a14:	2b02      	cmp	r3, #2
   d8a16:	d801      	bhi.n	d8a1c <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d8a18:	2000      	movs	r0, #0
   d8a1a:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d8a1c:	f000 f89e 	bl	d8b5c <_Z19__fetch_global_Wirev>
   d8a20:	f7ff fba1 	bl	d8166 <_ZN7TwoWire9isEnabledEv>
   d8a24:	b108      	cbz	r0, d8a2a <pinAvailable+0x46>
   d8a26:	2c01      	cmp	r4, #1
   d8a28:	d9f6      	bls.n	d8a18 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d8a2a:	f7ff faff 	bl	d802c <_Z22__fetch_global_Serial1v>
   d8a2e:	f7ff faf9 	bl	d8024 <_ZN11USARTSerial9isEnabledEv>
   d8a32:	b118      	cbz	r0, d8a3c <pinAvailable+0x58>
   d8a34:	f1a4 0309 	sub.w	r3, r4, #9
   d8a38:	2b01      	cmp	r3, #1
   d8a3a:	d9ed      	bls.n	d8a18 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d8a3c:	2c23      	cmp	r4, #35	; 0x23
   d8a3e:	bf8c      	ite	hi
   d8a40:	2000      	movhi	r0, #0
   d8a42:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d8a44:	bd70      	pop	{r4, r5, r6, pc}
   d8a46:	bf00      	nop
   d8a48:	2003dbe4 	.word	0x2003dbe4
   d8a4c:	2003dbe8 	.word	0x2003dbe8

000d8a50 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8a50:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d8a52:	b538      	push	{r3, r4, r5, lr}
   d8a54:	4604      	mov	r4, r0
   d8a56:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8a58:	d80a      	bhi.n	d8a70 <pinMode+0x20>
   d8a5a:	29ff      	cmp	r1, #255	; 0xff
   d8a5c:	d008      	beq.n	d8a70 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8a5e:	f7ff ffc1 	bl	d89e4 <pinAvailable>
   d8a62:	b128      	cbz	r0, d8a70 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8a64:	4629      	mov	r1, r5
   d8a66:	4620      	mov	r0, r4
}
   d8a68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8a6c:	f7fe b8ea 	b.w	d6c44 <HAL_Pin_Mode>
   d8a70:	bd38      	pop	{r3, r4, r5, pc}

000d8a72 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d8a72:	b538      	push	{r3, r4, r5, lr}
   d8a74:	4604      	mov	r4, r0
   d8a76:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8a78:	f7fe f8ec 	bl	d6c54 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8a7c:	28ff      	cmp	r0, #255	; 0xff
   d8a7e:	d010      	beq.n	d8aa2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d8a80:	2806      	cmp	r0, #6
   d8a82:	d804      	bhi.n	d8a8e <digitalWrite+0x1c>
   d8a84:	234d      	movs	r3, #77	; 0x4d
   d8a86:	fa23 f000 	lsr.w	r0, r3, r0
   d8a8a:	07c3      	lsls	r3, r0, #31
   d8a8c:	d409      	bmi.n	d8aa2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d8a8e:	4620      	mov	r0, r4
   d8a90:	f7ff ffa8 	bl	d89e4 <pinAvailable>
   d8a94:	b128      	cbz	r0, d8aa2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8a96:	4629      	mov	r1, r5
   d8a98:	4620      	mov	r0, r4
}
   d8a9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8a9e:	f7fe b8e1 	b.w	d6c64 <HAL_GPIO_Write>
   d8aa2:	bd38      	pop	{r3, r4, r5, pc}

000d8aa4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d8aa4:	b510      	push	{r4, lr}
   d8aa6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8aa8:	f7fe f8d4 	bl	d6c54 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d8aac:	3804      	subs	r0, #4
   d8aae:	b2c0      	uxtb	r0, r0
   d8ab0:	2801      	cmp	r0, #1
   d8ab2:	d908      	bls.n	d8ac6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d8ab4:	4620      	mov	r0, r4
   d8ab6:	f7ff ff95 	bl	d89e4 <pinAvailable>
   d8aba:	b120      	cbz	r0, d8ac6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8abc:	4620      	mov	r0, r4
}
   d8abe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8ac2:	f7fe b8d7 	b.w	d6c74 <HAL_GPIO_Read>
}
   d8ac6:	2000      	movs	r0, #0
   d8ac8:	bd10      	pop	{r4, pc}
	...

000d8acc <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d8acc:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d8ace:	4c07      	ldr	r4, [pc, #28]	; (d8aec <_Z21__fetch_global_EEPROMv+0x20>)
   d8ad0:	6823      	ldr	r3, [r4, #0]
   d8ad2:	07db      	lsls	r3, r3, #31
   d8ad4:	d408      	bmi.n	d8ae8 <_Z21__fetch_global_EEPROMv+0x1c>
   d8ad6:	4620      	mov	r0, r4
   d8ad8:	f7fb fae5 	bl	d40a6 <__cxa_guard_acquire>
   d8adc:	b120      	cbz	r0, d8ae8 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d8ade:	f7fe f981 	bl	d6de4 <HAL_EEPROM_Init>
   d8ae2:	4620      	mov	r0, r4
   d8ae4:	f7fb fae4 	bl	d40b0 <__cxa_guard_release>
	return eeprom;
}
   d8ae8:	4801      	ldr	r0, [pc, #4]	; (d8af0 <_Z21__fetch_global_EEPROMv+0x24>)
   d8aea:	bd10      	pop	{r4, pc}
   d8aec:	2003e52c 	.word	0x2003e52c
   d8af0:	2003e530 	.word	0x2003e530

000d8af4 <_Z17acquireWireBufferv>:
   d8af4:	b570      	push	{r4, r5, r6, lr}
   d8af6:	4604      	mov	r4, r0
   d8af8:	2514      	movs	r5, #20
   d8afa:	462a      	mov	r2, r5
   d8afc:	4e09      	ldr	r6, [pc, #36]	; (d8b24 <_Z17acquireWireBufferv+0x30>)
   d8afe:	2100      	movs	r1, #0
   d8b00:	f000 fe15 	bl	d972e <memset>
   d8b04:	8025      	strh	r5, [r4, #0]
   d8b06:	2520      	movs	r5, #32
   d8b08:	4631      	mov	r1, r6
   d8b0a:	60a5      	str	r5, [r4, #8]
   d8b0c:	6125      	str	r5, [r4, #16]
   d8b0e:	4628      	mov	r0, r5
   d8b10:	f000 f880 	bl	d8c14 <_ZnajRKSt9nothrow_t>
   d8b14:	4631      	mov	r1, r6
   d8b16:	6060      	str	r0, [r4, #4]
   d8b18:	4628      	mov	r0, r5
   d8b1a:	f000 f87b 	bl	d8c14 <_ZnajRKSt9nothrow_t>
   d8b1e:	60e0      	str	r0, [r4, #12]
   d8b20:	4620      	mov	r0, r4
   d8b22:	bd70      	pop	{r4, r5, r6, pc}
   d8b24:	000d9ddc 	.word	0x000d9ddc

000d8b28 <_Z18acquireWire1Bufferv>:
	return defaultWireConfig();
}

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
   d8b28:	b570      	push	{r4, r5, r6, lr}
   d8b2a:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d8b2c:	2514      	movs	r5, #20
   d8b2e:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8b30:	4e09      	ldr	r6, [pc, #36]	; (d8b58 <_Z18acquireWire1Bufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d8b32:	2100      	movs	r1, #0
   d8b34:	f000 fdfb 	bl	d972e <memset>
   d8b38:	8025      	strh	r5, [r4, #0]
   d8b3a:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8b3c:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d8b3e:	60a5      	str	r5, [r4, #8]
   d8b40:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8b42:	4628      	mov	r0, r5
   d8b44:	f000 f866 	bl	d8c14 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8b48:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d8b4a:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8b4c:	4628      	mov	r0, r5
   d8b4e:	f000 f861 	bl	d8c14 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d8b52:	60e0      	str	r0, [r4, #12]

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
	return defaultWireConfig();
}
   d8b54:	4620      	mov	r0, r4
   d8b56:	bd70      	pop	{r4, r5, r6, pc}
   d8b58:	000d9ddc 	.word	0x000d9ddc

000d8b5c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8b5c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8b5e:	4d0e      	ldr	r5, [pc, #56]	; (d8b98 <_Z19__fetch_global_Wirev+0x3c>)
   d8b60:	6829      	ldr	r1, [r5, #0]
   d8b62:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8b66:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8b68:	d113      	bne.n	d8b92 <_Z19__fetch_global_Wirev+0x36>
   d8b6a:	4628      	mov	r0, r5
   d8b6c:	f7fb fa9b 	bl	d40a6 <__cxa_guard_acquire>
   d8b70:	b178      	cbz	r0, d8b92 <_Z19__fetch_global_Wirev+0x36>
   d8b72:	a801      	add	r0, sp, #4
   d8b74:	f7ff ffbe 	bl	d8af4 <_Z17acquireWireBufferv>
   d8b78:	aa01      	add	r2, sp, #4
   d8b7a:	4621      	mov	r1, r4
   d8b7c:	4807      	ldr	r0, [pc, #28]	; (d8b9c <_Z19__fetch_global_Wirev+0x40>)
   d8b7e:	f7ff faa7 	bl	d80d0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d8b82:	4628      	mov	r0, r5
   d8b84:	f7fb fa94 	bl	d40b0 <__cxa_guard_release>
   d8b88:	4a05      	ldr	r2, [pc, #20]	; (d8ba0 <_Z19__fetch_global_Wirev+0x44>)
   d8b8a:	4906      	ldr	r1, [pc, #24]	; (d8ba4 <_Z19__fetch_global_Wirev+0x48>)
   d8b8c:	4803      	ldr	r0, [pc, #12]	; (d8b9c <_Z19__fetch_global_Wirev+0x40>)
   d8b8e:	f000 f831 	bl	d8bf4 <__aeabi_atexit>
	return wire;
}
   d8b92:	4802      	ldr	r0, [pc, #8]	; (d8b9c <_Z19__fetch_global_Wirev+0x40>)
   d8b94:	b007      	add	sp, #28
   d8b96:	bd30      	pop	{r4, r5, pc}
   d8b98:	2003e534 	.word	0x2003e534
   d8b9c:	2003e54c 	.word	0x2003e54c
   d8ba0:	2003db50 	.word	0x2003db50
   d8ba4:	000d8079 	.word	0x000d8079

000d8ba8 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d8ba8:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d8baa:	4c0e      	ldr	r4, [pc, #56]	; (d8be4 <_Z20__fetch_global_Wire1v+0x3c>)
   d8bac:	6823      	ldr	r3, [r4, #0]
   d8bae:	07db      	lsls	r3, r3, #31
	return wire;
}

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d8bb0:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d8bb2:	d413      	bmi.n	d8bdc <_Z20__fetch_global_Wire1v+0x34>
   d8bb4:	4620      	mov	r0, r4
   d8bb6:	f7fb fa76 	bl	d40a6 <__cxa_guard_acquire>
   d8bba:	b178      	cbz	r0, d8bdc <_Z20__fetch_global_Wire1v+0x34>
   d8bbc:	a801      	add	r0, sp, #4
   d8bbe:	f7ff ffb3 	bl	d8b28 <_Z18acquireWire1Bufferv>
   d8bc2:	aa01      	add	r2, sp, #4
   d8bc4:	2101      	movs	r1, #1
   d8bc6:	4808      	ldr	r0, [pc, #32]	; (d8be8 <_Z20__fetch_global_Wire1v+0x40>)
   d8bc8:	f7ff fa82 	bl	d80d0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d8bcc:	4620      	mov	r0, r4
   d8bce:	f7fb fa6f 	bl	d40b0 <__cxa_guard_release>
   d8bd2:	4a06      	ldr	r2, [pc, #24]	; (d8bec <_Z20__fetch_global_Wire1v+0x44>)
   d8bd4:	4906      	ldr	r1, [pc, #24]	; (d8bf0 <_Z20__fetch_global_Wire1v+0x48>)
   d8bd6:	4804      	ldr	r0, [pc, #16]	; (d8be8 <_Z20__fetch_global_Wire1v+0x40>)
   d8bd8:	f000 f80c 	bl	d8bf4 <__aeabi_atexit>
	return wire;
}
   d8bdc:	4802      	ldr	r0, [pc, #8]	; (d8be8 <_Z20__fetch_global_Wire1v+0x40>)
   d8bde:	b006      	add	sp, #24
   d8be0:	bd10      	pop	{r4, pc}
   d8be2:	bf00      	nop
   d8be4:	2003e560 	.word	0x2003e560
   d8be8:	2003e538 	.word	0x2003e538
   d8bec:	2003db50 	.word	0x2003db50
   d8bf0:	000d8079 	.word	0x000d8079

000d8bf4 <__aeabi_atexit>:
   d8bf4:	460b      	mov	r3, r1
   d8bf6:	4601      	mov	r1, r0
   d8bf8:	4618      	mov	r0, r3
   d8bfa:	f000 bd7f 	b.w	d96fc <__cxa_atexit>
	...

000d8c00 <_ZSt15get_new_handlerv>:
   d8c00:	4b02      	ldr	r3, [pc, #8]	; (d8c0c <_ZSt15get_new_handlerv+0xc>)
   d8c02:	6818      	ldr	r0, [r3, #0]
   d8c04:	f3bf 8f5f 	dmb	sy
   d8c08:	4770      	bx	lr
   d8c0a:	bf00      	nop
   d8c0c:	2003e564 	.word	0x2003e564

000d8c10 <_ZdlPvj>:
   d8c10:	f7fb ba45 	b.w	d409e <_ZdlPv>

000d8c14 <_ZnajRKSt9nothrow_t>:
   d8c14:	f000 b800 	b.w	d8c18 <_ZnwjRKSt9nothrow_t>

000d8c18 <_ZnwjRKSt9nothrow_t>:
   d8c18:	b510      	push	{r4, lr}
   d8c1a:	2800      	cmp	r0, #0
   d8c1c:	bf14      	ite	ne
   d8c1e:	4604      	movne	r4, r0
   d8c20:	2401      	moveq	r4, #1
   d8c22:	4620      	mov	r0, r4
   d8c24:	f7fe fb3a 	bl	d729c <malloc>
   d8c28:	b920      	cbnz	r0, d8c34 <_ZnwjRKSt9nothrow_t+0x1c>
   d8c2a:	f7ff ffe9 	bl	d8c00 <_ZSt15get_new_handlerv>
   d8c2e:	b108      	cbz	r0, d8c34 <_ZnwjRKSt9nothrow_t+0x1c>
   d8c30:	4780      	blx	r0
   d8c32:	e7f6      	b.n	d8c22 <_ZnwjRKSt9nothrow_t+0xa>
   d8c34:	bd10      	pop	{r4, pc}
	...

000d8c38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8c38:	4b18      	ldr	r3, [pc, #96]	; (d8c9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8c3a:	681a      	ldr	r2, [r3, #0]
   d8c3c:	07d1      	lsls	r1, r2, #31
   d8c3e:	bf5c      	itt	pl
   d8c40:	2201      	movpl	r2, #1
   d8c42:	601a      	strpl	r2, [r3, #0]
   d8c44:	4b16      	ldr	r3, [pc, #88]	; (d8ca0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8c46:	681a      	ldr	r2, [r3, #0]
   d8c48:	07d2      	lsls	r2, r2, #31
   d8c4a:	bf5c      	itt	pl
   d8c4c:	2201      	movpl	r2, #1
   d8c4e:	601a      	strpl	r2, [r3, #0]
   d8c50:	4b14      	ldr	r3, [pc, #80]	; (d8ca4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8c52:	681a      	ldr	r2, [r3, #0]
   d8c54:	07d0      	lsls	r0, r2, #31
   d8c56:	bf5c      	itt	pl
   d8c58:	2201      	movpl	r2, #1
   d8c5a:	601a      	strpl	r2, [r3, #0]
   d8c5c:	4b12      	ldr	r3, [pc, #72]	; (d8ca8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8c5e:	681a      	ldr	r2, [r3, #0]
   d8c60:	07d1      	lsls	r1, r2, #31
   d8c62:	bf5c      	itt	pl
   d8c64:	2201      	movpl	r2, #1
   d8c66:	601a      	strpl	r2, [r3, #0]
   d8c68:	4b10      	ldr	r3, [pc, #64]	; (d8cac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8c6a:	681a      	ldr	r2, [r3, #0]
   d8c6c:	07d2      	lsls	r2, r2, #31
   d8c6e:	bf5c      	itt	pl
   d8c70:	2201      	movpl	r2, #1
   d8c72:	601a      	strpl	r2, [r3, #0]
   d8c74:	4b0e      	ldr	r3, [pc, #56]	; (d8cb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8c76:	681a      	ldr	r2, [r3, #0]
   d8c78:	07d0      	lsls	r0, r2, #31
   d8c7a:	bf5c      	itt	pl
   d8c7c:	2201      	movpl	r2, #1
   d8c7e:	601a      	strpl	r2, [r3, #0]
   d8c80:	4b0c      	ldr	r3, [pc, #48]	; (d8cb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8c82:	681a      	ldr	r2, [r3, #0]
   d8c84:	07d1      	lsls	r1, r2, #31
   d8c86:	bf5c      	itt	pl
   d8c88:	2201      	movpl	r2, #1
   d8c8a:	601a      	strpl	r2, [r3, #0]
   d8c8c:	4b0a      	ldr	r3, [pc, #40]	; (d8cb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8c8e:	681a      	ldr	r2, [r3, #0]
   d8c90:	07d2      	lsls	r2, r2, #31
   d8c92:	bf5c      	itt	pl
   d8c94:	2201      	movpl	r2, #1
   d8c96:	601a      	strpl	r2, [r3, #0]
   d8c98:	4770      	bx	lr
   d8c9a:	bf00      	nop
   d8c9c:	2003e584 	.word	0x2003e584
   d8ca0:	2003e580 	.word	0x2003e580
   d8ca4:	2003e57c 	.word	0x2003e57c
   d8ca8:	2003e578 	.word	0x2003e578
   d8cac:	2003e574 	.word	0x2003e574
   d8cb0:	2003e570 	.word	0x2003e570
   d8cb4:	2003e56c 	.word	0x2003e56c
   d8cb8:	2003e568 	.word	0x2003e568

000d8cbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d8cbc:	4b24      	ldr	r3, [pc, #144]	; (d8d50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d8cbe:	681a      	ldr	r2, [r3, #0]
   d8cc0:	07d0      	lsls	r0, r2, #31
   d8cc2:	bf5c      	itt	pl
   d8cc4:	2201      	movpl	r2, #1
   d8cc6:	601a      	strpl	r2, [r3, #0]
   d8cc8:	4b22      	ldr	r3, [pc, #136]	; (d8d54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d8cca:	681a      	ldr	r2, [r3, #0]
   d8ccc:	07d1      	lsls	r1, r2, #31
   d8cce:	bf5c      	itt	pl
   d8cd0:	2201      	movpl	r2, #1
   d8cd2:	601a      	strpl	r2, [r3, #0]
   d8cd4:	4b20      	ldr	r3, [pc, #128]	; (d8d58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d8cd6:	681a      	ldr	r2, [r3, #0]
   d8cd8:	07d2      	lsls	r2, r2, #31
   d8cda:	bf5c      	itt	pl
   d8cdc:	2201      	movpl	r2, #1
   d8cde:	601a      	strpl	r2, [r3, #0]
   d8ce0:	4b1e      	ldr	r3, [pc, #120]	; (d8d5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d8ce2:	681a      	ldr	r2, [r3, #0]
   d8ce4:	07d0      	lsls	r0, r2, #31
   d8ce6:	bf5c      	itt	pl
   d8ce8:	2201      	movpl	r2, #1
   d8cea:	601a      	strpl	r2, [r3, #0]
   d8cec:	4b1c      	ldr	r3, [pc, #112]	; (d8d60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d8cee:	681a      	ldr	r2, [r3, #0]
   d8cf0:	07d1      	lsls	r1, r2, #31
   d8cf2:	bf5c      	itt	pl
   d8cf4:	2201      	movpl	r2, #1
   d8cf6:	601a      	strpl	r2, [r3, #0]
   d8cf8:	4b1a      	ldr	r3, [pc, #104]	; (d8d64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d8cfa:	681a      	ldr	r2, [r3, #0]
   d8cfc:	07d2      	lsls	r2, r2, #31
   d8cfe:	bf5c      	itt	pl
   d8d00:	2201      	movpl	r2, #1
   d8d02:	601a      	strpl	r2, [r3, #0]
   d8d04:	4b18      	ldr	r3, [pc, #96]	; (d8d68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d8d06:	681a      	ldr	r2, [r3, #0]
   d8d08:	07d0      	lsls	r0, r2, #31
   d8d0a:	bf5c      	itt	pl
   d8d0c:	2201      	movpl	r2, #1
   d8d0e:	601a      	strpl	r2, [r3, #0]
   d8d10:	4b16      	ldr	r3, [pc, #88]	; (d8d6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d8d12:	681a      	ldr	r2, [r3, #0]
   d8d14:	07d1      	lsls	r1, r2, #31
   d8d16:	bf5c      	itt	pl
   d8d18:	2201      	movpl	r2, #1
   d8d1a:	601a      	strpl	r2, [r3, #0]
   d8d1c:	4b14      	ldr	r3, [pc, #80]	; (d8d70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d8d1e:	681a      	ldr	r2, [r3, #0]
   d8d20:	07d2      	lsls	r2, r2, #31
   d8d22:	bf5c      	itt	pl
   d8d24:	2201      	movpl	r2, #1
   d8d26:	601a      	strpl	r2, [r3, #0]
   d8d28:	4b12      	ldr	r3, [pc, #72]	; (d8d74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d8d2a:	681a      	ldr	r2, [r3, #0]
   d8d2c:	07d0      	lsls	r0, r2, #31
   d8d2e:	bf5c      	itt	pl
   d8d30:	2201      	movpl	r2, #1
   d8d32:	601a      	strpl	r2, [r3, #0]
   d8d34:	4b10      	ldr	r3, [pc, #64]	; (d8d78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d8d36:	681a      	ldr	r2, [r3, #0]
   d8d38:	07d1      	lsls	r1, r2, #31
   d8d3a:	bf5c      	itt	pl
   d8d3c:	2201      	movpl	r2, #1
   d8d3e:	601a      	strpl	r2, [r3, #0]
   d8d40:	4b0e      	ldr	r3, [pc, #56]	; (d8d7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d8d42:	681a      	ldr	r2, [r3, #0]
   d8d44:	07d2      	lsls	r2, r2, #31
   d8d46:	bf5c      	itt	pl
   d8d48:	2201      	movpl	r2, #1
   d8d4a:	601a      	strpl	r2, [r3, #0]
   d8d4c:	4770      	bx	lr
   d8d4e:	bf00      	nop
   d8d50:	2003e5b4 	.word	0x2003e5b4
   d8d54:	2003e5b0 	.word	0x2003e5b0
   d8d58:	2003e5ac 	.word	0x2003e5ac
   d8d5c:	2003e5a8 	.word	0x2003e5a8
   d8d60:	2003e5a4 	.word	0x2003e5a4
   d8d64:	2003e5a0 	.word	0x2003e5a0
   d8d68:	2003e59c 	.word	0x2003e59c
   d8d6c:	2003e598 	.word	0x2003e598
   d8d70:	2003e594 	.word	0x2003e594
   d8d74:	2003e590 	.word	0x2003e590
   d8d78:	2003e58c 	.word	0x2003e58c
   d8d7c:	2003e588 	.word	0x2003e588

000d8d80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d8d80:	4b24      	ldr	r3, [pc, #144]	; (d8e14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d8d82:	681a      	ldr	r2, [r3, #0]
   d8d84:	07d0      	lsls	r0, r2, #31
   d8d86:	bf5c      	itt	pl
   d8d88:	2201      	movpl	r2, #1
   d8d8a:	601a      	strpl	r2, [r3, #0]
   d8d8c:	4b22      	ldr	r3, [pc, #136]	; (d8e18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d8d8e:	681a      	ldr	r2, [r3, #0]
   d8d90:	07d1      	lsls	r1, r2, #31
   d8d92:	bf5c      	itt	pl
   d8d94:	2201      	movpl	r2, #1
   d8d96:	601a      	strpl	r2, [r3, #0]
   d8d98:	4b20      	ldr	r3, [pc, #128]	; (d8e1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d8d9a:	681a      	ldr	r2, [r3, #0]
   d8d9c:	07d2      	lsls	r2, r2, #31
   d8d9e:	bf5c      	itt	pl
   d8da0:	2201      	movpl	r2, #1
   d8da2:	601a      	strpl	r2, [r3, #0]
   d8da4:	4b1e      	ldr	r3, [pc, #120]	; (d8e20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d8da6:	681a      	ldr	r2, [r3, #0]
   d8da8:	07d0      	lsls	r0, r2, #31
   d8daa:	bf5c      	itt	pl
   d8dac:	2201      	movpl	r2, #1
   d8dae:	601a      	strpl	r2, [r3, #0]
   d8db0:	4b1c      	ldr	r3, [pc, #112]	; (d8e24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d8db2:	681a      	ldr	r2, [r3, #0]
   d8db4:	07d1      	lsls	r1, r2, #31
   d8db6:	bf5c      	itt	pl
   d8db8:	2201      	movpl	r2, #1
   d8dba:	601a      	strpl	r2, [r3, #0]
   d8dbc:	4b1a      	ldr	r3, [pc, #104]	; (d8e28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d8dbe:	681a      	ldr	r2, [r3, #0]
   d8dc0:	07d2      	lsls	r2, r2, #31
   d8dc2:	bf5c      	itt	pl
   d8dc4:	2201      	movpl	r2, #1
   d8dc6:	601a      	strpl	r2, [r3, #0]
   d8dc8:	4b18      	ldr	r3, [pc, #96]	; (d8e2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d8dca:	681a      	ldr	r2, [r3, #0]
   d8dcc:	07d0      	lsls	r0, r2, #31
   d8dce:	bf5c      	itt	pl
   d8dd0:	2201      	movpl	r2, #1
   d8dd2:	601a      	strpl	r2, [r3, #0]
   d8dd4:	4b16      	ldr	r3, [pc, #88]	; (d8e30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d8dd6:	681a      	ldr	r2, [r3, #0]
   d8dd8:	07d1      	lsls	r1, r2, #31
   d8dda:	bf5c      	itt	pl
   d8ddc:	2201      	movpl	r2, #1
   d8dde:	601a      	strpl	r2, [r3, #0]
   d8de0:	4b14      	ldr	r3, [pc, #80]	; (d8e34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d8de2:	681a      	ldr	r2, [r3, #0]
   d8de4:	07d2      	lsls	r2, r2, #31
   d8de6:	bf5c      	itt	pl
   d8de8:	2201      	movpl	r2, #1
   d8dea:	601a      	strpl	r2, [r3, #0]
   d8dec:	4b12      	ldr	r3, [pc, #72]	; (d8e38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d8dee:	681a      	ldr	r2, [r3, #0]
   d8df0:	07d0      	lsls	r0, r2, #31
   d8df2:	bf5c      	itt	pl
   d8df4:	2201      	movpl	r2, #1
   d8df6:	601a      	strpl	r2, [r3, #0]
   d8df8:	4b10      	ldr	r3, [pc, #64]	; (d8e3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d8dfa:	681a      	ldr	r2, [r3, #0]
   d8dfc:	07d1      	lsls	r1, r2, #31
   d8dfe:	bf5c      	itt	pl
   d8e00:	2201      	movpl	r2, #1
   d8e02:	601a      	strpl	r2, [r3, #0]
   d8e04:	4b0e      	ldr	r3, [pc, #56]	; (d8e40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d8e06:	681a      	ldr	r2, [r3, #0]
   d8e08:	07d2      	lsls	r2, r2, #31
   d8e0a:	bf5c      	itt	pl
   d8e0c:	2201      	movpl	r2, #1
   d8e0e:	601a      	strpl	r2, [r3, #0]
   d8e10:	4770      	bx	lr
   d8e12:	bf00      	nop
   d8e14:	2003e5e4 	.word	0x2003e5e4
   d8e18:	2003e5e0 	.word	0x2003e5e0
   d8e1c:	2003e5dc 	.word	0x2003e5dc
   d8e20:	2003e5d8 	.word	0x2003e5d8
   d8e24:	2003e5d4 	.word	0x2003e5d4
   d8e28:	2003e5d0 	.word	0x2003e5d0
   d8e2c:	2003e5cc 	.word	0x2003e5cc
   d8e30:	2003e5c8 	.word	0x2003e5c8
   d8e34:	2003e5c4 	.word	0x2003e5c4
   d8e38:	2003e5c0 	.word	0x2003e5c0
   d8e3c:	2003e5bc 	.word	0x2003e5bc
   d8e40:	2003e5b8 	.word	0x2003e5b8

000d8e44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8e44:	4b18      	ldr	r3, [pc, #96]	; (d8ea8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8e46:	681a      	ldr	r2, [r3, #0]
   d8e48:	07d1      	lsls	r1, r2, #31
   d8e4a:	bf5c      	itt	pl
   d8e4c:	2201      	movpl	r2, #1
   d8e4e:	601a      	strpl	r2, [r3, #0]
   d8e50:	4b16      	ldr	r3, [pc, #88]	; (d8eac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8e52:	681a      	ldr	r2, [r3, #0]
   d8e54:	07d2      	lsls	r2, r2, #31
   d8e56:	bf5c      	itt	pl
   d8e58:	2201      	movpl	r2, #1
   d8e5a:	601a      	strpl	r2, [r3, #0]
   d8e5c:	4b14      	ldr	r3, [pc, #80]	; (d8eb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8e5e:	681a      	ldr	r2, [r3, #0]
   d8e60:	07d0      	lsls	r0, r2, #31
   d8e62:	bf5c      	itt	pl
   d8e64:	2201      	movpl	r2, #1
   d8e66:	601a      	strpl	r2, [r3, #0]
   d8e68:	4b12      	ldr	r3, [pc, #72]	; (d8eb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8e6a:	681a      	ldr	r2, [r3, #0]
   d8e6c:	07d1      	lsls	r1, r2, #31
   d8e6e:	bf5c      	itt	pl
   d8e70:	2201      	movpl	r2, #1
   d8e72:	601a      	strpl	r2, [r3, #0]
   d8e74:	4b10      	ldr	r3, [pc, #64]	; (d8eb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8e76:	681a      	ldr	r2, [r3, #0]
   d8e78:	07d2      	lsls	r2, r2, #31
   d8e7a:	bf5c      	itt	pl
   d8e7c:	2201      	movpl	r2, #1
   d8e7e:	601a      	strpl	r2, [r3, #0]
   d8e80:	4b0e      	ldr	r3, [pc, #56]	; (d8ebc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8e82:	681a      	ldr	r2, [r3, #0]
   d8e84:	07d0      	lsls	r0, r2, #31
   d8e86:	bf5c      	itt	pl
   d8e88:	2201      	movpl	r2, #1
   d8e8a:	601a      	strpl	r2, [r3, #0]
   d8e8c:	4b0c      	ldr	r3, [pc, #48]	; (d8ec0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8e8e:	681a      	ldr	r2, [r3, #0]
   d8e90:	07d1      	lsls	r1, r2, #31
   d8e92:	bf5c      	itt	pl
   d8e94:	2201      	movpl	r2, #1
   d8e96:	601a      	strpl	r2, [r3, #0]
   d8e98:	4b0a      	ldr	r3, [pc, #40]	; (d8ec4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8e9a:	681a      	ldr	r2, [r3, #0]
   d8e9c:	07d2      	lsls	r2, r2, #31
   d8e9e:	bf5c      	itt	pl
   d8ea0:	2201      	movpl	r2, #1
   d8ea2:	601a      	strpl	r2, [r3, #0]
   d8ea4:	4770      	bx	lr
   d8ea6:	bf00      	nop
   d8ea8:	2003e604 	.word	0x2003e604
   d8eac:	2003e600 	.word	0x2003e600
   d8eb0:	2003e5fc 	.word	0x2003e5fc
   d8eb4:	2003e5f8 	.word	0x2003e5f8
   d8eb8:	2003e5f4 	.word	0x2003e5f4
   d8ebc:	2003e5f0 	.word	0x2003e5f0
   d8ec0:	2003e5ec 	.word	0x2003e5ec
   d8ec4:	2003e5e8 	.word	0x2003e5e8

000d8ec8 <__aeabi_drsub>:
   d8ec8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8ecc:	e002      	b.n	d8ed4 <__adddf3>
   d8ece:	bf00      	nop

000d8ed0 <__aeabi_dsub>:
   d8ed0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8ed4 <__adddf3>:
   d8ed4:	b530      	push	{r4, r5, lr}
   d8ed6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8eda:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8ede:	ea94 0f05 	teq	r4, r5
   d8ee2:	bf08      	it	eq
   d8ee4:	ea90 0f02 	teqeq	r0, r2
   d8ee8:	bf1f      	itttt	ne
   d8eea:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8eee:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8ef2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8ef6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8efa:	f000 80e2 	beq.w	d90c2 <__adddf3+0x1ee>
   d8efe:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8f02:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8f06:	bfb8      	it	lt
   d8f08:	426d      	neglt	r5, r5
   d8f0a:	dd0c      	ble.n	d8f26 <__adddf3+0x52>
   d8f0c:	442c      	add	r4, r5
   d8f0e:	ea80 0202 	eor.w	r2, r0, r2
   d8f12:	ea81 0303 	eor.w	r3, r1, r3
   d8f16:	ea82 0000 	eor.w	r0, r2, r0
   d8f1a:	ea83 0101 	eor.w	r1, r3, r1
   d8f1e:	ea80 0202 	eor.w	r2, r0, r2
   d8f22:	ea81 0303 	eor.w	r3, r1, r3
   d8f26:	2d36      	cmp	r5, #54	; 0x36
   d8f28:	bf88      	it	hi
   d8f2a:	bd30      	pophi	{r4, r5, pc}
   d8f2c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8f30:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8f34:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8f38:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8f3c:	d002      	beq.n	d8f44 <__adddf3+0x70>
   d8f3e:	4240      	negs	r0, r0
   d8f40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8f44:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8f48:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8f4c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8f50:	d002      	beq.n	d8f58 <__adddf3+0x84>
   d8f52:	4252      	negs	r2, r2
   d8f54:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8f58:	ea94 0f05 	teq	r4, r5
   d8f5c:	f000 80a7 	beq.w	d90ae <__adddf3+0x1da>
   d8f60:	f1a4 0401 	sub.w	r4, r4, #1
   d8f64:	f1d5 0e20 	rsbs	lr, r5, #32
   d8f68:	db0d      	blt.n	d8f86 <__adddf3+0xb2>
   d8f6a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8f6e:	fa22 f205 	lsr.w	r2, r2, r5
   d8f72:	1880      	adds	r0, r0, r2
   d8f74:	f141 0100 	adc.w	r1, r1, #0
   d8f78:	fa03 f20e 	lsl.w	r2, r3, lr
   d8f7c:	1880      	adds	r0, r0, r2
   d8f7e:	fa43 f305 	asr.w	r3, r3, r5
   d8f82:	4159      	adcs	r1, r3
   d8f84:	e00e      	b.n	d8fa4 <__adddf3+0xd0>
   d8f86:	f1a5 0520 	sub.w	r5, r5, #32
   d8f8a:	f10e 0e20 	add.w	lr, lr, #32
   d8f8e:	2a01      	cmp	r2, #1
   d8f90:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8f94:	bf28      	it	cs
   d8f96:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8f9a:	fa43 f305 	asr.w	r3, r3, r5
   d8f9e:	18c0      	adds	r0, r0, r3
   d8fa0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8fa4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8fa8:	d507      	bpl.n	d8fba <__adddf3+0xe6>
   d8faa:	f04f 0e00 	mov.w	lr, #0
   d8fae:	f1dc 0c00 	rsbs	ip, ip, #0
   d8fb2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8fb6:	eb6e 0101 	sbc.w	r1, lr, r1
   d8fba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8fbe:	d31b      	bcc.n	d8ff8 <__adddf3+0x124>
   d8fc0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8fc4:	d30c      	bcc.n	d8fe0 <__adddf3+0x10c>
   d8fc6:	0849      	lsrs	r1, r1, #1
   d8fc8:	ea5f 0030 	movs.w	r0, r0, rrx
   d8fcc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8fd0:	f104 0401 	add.w	r4, r4, #1
   d8fd4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8fd8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8fdc:	f080 809a 	bcs.w	d9114 <__adddf3+0x240>
   d8fe0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8fe4:	bf08      	it	eq
   d8fe6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8fea:	f150 0000 	adcs.w	r0, r0, #0
   d8fee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8ff2:	ea41 0105 	orr.w	r1, r1, r5
   d8ff6:	bd30      	pop	{r4, r5, pc}
   d8ff8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8ffc:	4140      	adcs	r0, r0
   d8ffe:	eb41 0101 	adc.w	r1, r1, r1
   d9002:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9006:	f1a4 0401 	sub.w	r4, r4, #1
   d900a:	d1e9      	bne.n	d8fe0 <__adddf3+0x10c>
   d900c:	f091 0f00 	teq	r1, #0
   d9010:	bf04      	itt	eq
   d9012:	4601      	moveq	r1, r0
   d9014:	2000      	moveq	r0, #0
   d9016:	fab1 f381 	clz	r3, r1
   d901a:	bf08      	it	eq
   d901c:	3320      	addeq	r3, #32
   d901e:	f1a3 030b 	sub.w	r3, r3, #11
   d9022:	f1b3 0220 	subs.w	r2, r3, #32
   d9026:	da0c      	bge.n	d9042 <__adddf3+0x16e>
   d9028:	320c      	adds	r2, #12
   d902a:	dd08      	ble.n	d903e <__adddf3+0x16a>
   d902c:	f102 0c14 	add.w	ip, r2, #20
   d9030:	f1c2 020c 	rsb	r2, r2, #12
   d9034:	fa01 f00c 	lsl.w	r0, r1, ip
   d9038:	fa21 f102 	lsr.w	r1, r1, r2
   d903c:	e00c      	b.n	d9058 <__adddf3+0x184>
   d903e:	f102 0214 	add.w	r2, r2, #20
   d9042:	bfd8      	it	le
   d9044:	f1c2 0c20 	rsble	ip, r2, #32
   d9048:	fa01 f102 	lsl.w	r1, r1, r2
   d904c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d9050:	bfdc      	itt	le
   d9052:	ea41 010c 	orrle.w	r1, r1, ip
   d9056:	4090      	lslle	r0, r2
   d9058:	1ae4      	subs	r4, r4, r3
   d905a:	bfa2      	ittt	ge
   d905c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d9060:	4329      	orrge	r1, r5
   d9062:	bd30      	popge	{r4, r5, pc}
   d9064:	ea6f 0404 	mvn.w	r4, r4
   d9068:	3c1f      	subs	r4, #31
   d906a:	da1c      	bge.n	d90a6 <__adddf3+0x1d2>
   d906c:	340c      	adds	r4, #12
   d906e:	dc0e      	bgt.n	d908e <__adddf3+0x1ba>
   d9070:	f104 0414 	add.w	r4, r4, #20
   d9074:	f1c4 0220 	rsb	r2, r4, #32
   d9078:	fa20 f004 	lsr.w	r0, r0, r4
   d907c:	fa01 f302 	lsl.w	r3, r1, r2
   d9080:	ea40 0003 	orr.w	r0, r0, r3
   d9084:	fa21 f304 	lsr.w	r3, r1, r4
   d9088:	ea45 0103 	orr.w	r1, r5, r3
   d908c:	bd30      	pop	{r4, r5, pc}
   d908e:	f1c4 040c 	rsb	r4, r4, #12
   d9092:	f1c4 0220 	rsb	r2, r4, #32
   d9096:	fa20 f002 	lsr.w	r0, r0, r2
   d909a:	fa01 f304 	lsl.w	r3, r1, r4
   d909e:	ea40 0003 	orr.w	r0, r0, r3
   d90a2:	4629      	mov	r1, r5
   d90a4:	bd30      	pop	{r4, r5, pc}
   d90a6:	fa21 f004 	lsr.w	r0, r1, r4
   d90aa:	4629      	mov	r1, r5
   d90ac:	bd30      	pop	{r4, r5, pc}
   d90ae:	f094 0f00 	teq	r4, #0
   d90b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d90b6:	bf06      	itte	eq
   d90b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d90bc:	3401      	addeq	r4, #1
   d90be:	3d01      	subne	r5, #1
   d90c0:	e74e      	b.n	d8f60 <__adddf3+0x8c>
   d90c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d90c6:	bf18      	it	ne
   d90c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d90cc:	d029      	beq.n	d9122 <__adddf3+0x24e>
   d90ce:	ea94 0f05 	teq	r4, r5
   d90d2:	bf08      	it	eq
   d90d4:	ea90 0f02 	teqeq	r0, r2
   d90d8:	d005      	beq.n	d90e6 <__adddf3+0x212>
   d90da:	ea54 0c00 	orrs.w	ip, r4, r0
   d90de:	bf04      	itt	eq
   d90e0:	4619      	moveq	r1, r3
   d90e2:	4610      	moveq	r0, r2
   d90e4:	bd30      	pop	{r4, r5, pc}
   d90e6:	ea91 0f03 	teq	r1, r3
   d90ea:	bf1e      	ittt	ne
   d90ec:	2100      	movne	r1, #0
   d90ee:	2000      	movne	r0, #0
   d90f0:	bd30      	popne	{r4, r5, pc}
   d90f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d90f6:	d105      	bne.n	d9104 <__adddf3+0x230>
   d90f8:	0040      	lsls	r0, r0, #1
   d90fa:	4149      	adcs	r1, r1
   d90fc:	bf28      	it	cs
   d90fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d9102:	bd30      	pop	{r4, r5, pc}
   d9104:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d9108:	bf3c      	itt	cc
   d910a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d910e:	bd30      	popcc	{r4, r5, pc}
   d9110:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9114:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d9118:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d911c:	f04f 0000 	mov.w	r0, #0
   d9120:	bd30      	pop	{r4, r5, pc}
   d9122:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9126:	bf1a      	itte	ne
   d9128:	4619      	movne	r1, r3
   d912a:	4610      	movne	r0, r2
   d912c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d9130:	bf1c      	itt	ne
   d9132:	460b      	movne	r3, r1
   d9134:	4602      	movne	r2, r0
   d9136:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d913a:	bf06      	itte	eq
   d913c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d9140:	ea91 0f03 	teqeq	r1, r3
   d9144:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d9148:	bd30      	pop	{r4, r5, pc}
   d914a:	bf00      	nop

000d914c <__aeabi_ui2d>:
   d914c:	f090 0f00 	teq	r0, #0
   d9150:	bf04      	itt	eq
   d9152:	2100      	moveq	r1, #0
   d9154:	4770      	bxeq	lr
   d9156:	b530      	push	{r4, r5, lr}
   d9158:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d915c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9160:	f04f 0500 	mov.w	r5, #0
   d9164:	f04f 0100 	mov.w	r1, #0
   d9168:	e750      	b.n	d900c <__adddf3+0x138>
   d916a:	bf00      	nop

000d916c <__aeabi_i2d>:
   d916c:	f090 0f00 	teq	r0, #0
   d9170:	bf04      	itt	eq
   d9172:	2100      	moveq	r1, #0
   d9174:	4770      	bxeq	lr
   d9176:	b530      	push	{r4, r5, lr}
   d9178:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d917c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9180:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d9184:	bf48      	it	mi
   d9186:	4240      	negmi	r0, r0
   d9188:	f04f 0100 	mov.w	r1, #0
   d918c:	e73e      	b.n	d900c <__adddf3+0x138>
   d918e:	bf00      	nop

000d9190 <__aeabi_f2d>:
   d9190:	0042      	lsls	r2, r0, #1
   d9192:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d9196:	ea4f 0131 	mov.w	r1, r1, rrx
   d919a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d919e:	bf1f      	itttt	ne
   d91a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d91a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d91a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d91ac:	4770      	bxne	lr
   d91ae:	f092 0f00 	teq	r2, #0
   d91b2:	bf14      	ite	ne
   d91b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d91b8:	4770      	bxeq	lr
   d91ba:	b530      	push	{r4, r5, lr}
   d91bc:	f44f 7460 	mov.w	r4, #896	; 0x380
   d91c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d91c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d91c8:	e720      	b.n	d900c <__adddf3+0x138>
   d91ca:	bf00      	nop

000d91cc <__aeabi_ul2d>:
   d91cc:	ea50 0201 	orrs.w	r2, r0, r1
   d91d0:	bf08      	it	eq
   d91d2:	4770      	bxeq	lr
   d91d4:	b530      	push	{r4, r5, lr}
   d91d6:	f04f 0500 	mov.w	r5, #0
   d91da:	e00a      	b.n	d91f2 <__aeabi_l2d+0x16>

000d91dc <__aeabi_l2d>:
   d91dc:	ea50 0201 	orrs.w	r2, r0, r1
   d91e0:	bf08      	it	eq
   d91e2:	4770      	bxeq	lr
   d91e4:	b530      	push	{r4, r5, lr}
   d91e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d91ea:	d502      	bpl.n	d91f2 <__aeabi_l2d+0x16>
   d91ec:	4240      	negs	r0, r0
   d91ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d91f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d91f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d91fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d91fe:	f43f aedc 	beq.w	d8fba <__adddf3+0xe6>
   d9202:	f04f 0203 	mov.w	r2, #3
   d9206:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d920a:	bf18      	it	ne
   d920c:	3203      	addne	r2, #3
   d920e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9212:	bf18      	it	ne
   d9214:	3203      	addne	r2, #3
   d9216:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d921a:	f1c2 0320 	rsb	r3, r2, #32
   d921e:	fa00 fc03 	lsl.w	ip, r0, r3
   d9222:	fa20 f002 	lsr.w	r0, r0, r2
   d9226:	fa01 fe03 	lsl.w	lr, r1, r3
   d922a:	ea40 000e 	orr.w	r0, r0, lr
   d922e:	fa21 f102 	lsr.w	r1, r1, r2
   d9232:	4414      	add	r4, r2
   d9234:	e6c1      	b.n	d8fba <__adddf3+0xe6>
   d9236:	bf00      	nop

000d9238 <__aeabi_dmul>:
   d9238:	b570      	push	{r4, r5, r6, lr}
   d923a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d923e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9242:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9246:	bf1d      	ittte	ne
   d9248:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d924c:	ea94 0f0c 	teqne	r4, ip
   d9250:	ea95 0f0c 	teqne	r5, ip
   d9254:	f000 f8de 	bleq	d9414 <__aeabi_dmul+0x1dc>
   d9258:	442c      	add	r4, r5
   d925a:	ea81 0603 	eor.w	r6, r1, r3
   d925e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d9262:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d9266:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d926a:	bf18      	it	ne
   d926c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9270:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9274:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9278:	d038      	beq.n	d92ec <__aeabi_dmul+0xb4>
   d927a:	fba0 ce02 	umull	ip, lr, r0, r2
   d927e:	f04f 0500 	mov.w	r5, #0
   d9282:	fbe1 e502 	umlal	lr, r5, r1, r2
   d9286:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d928a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d928e:	f04f 0600 	mov.w	r6, #0
   d9292:	fbe1 5603 	umlal	r5, r6, r1, r3
   d9296:	f09c 0f00 	teq	ip, #0
   d929a:	bf18      	it	ne
   d929c:	f04e 0e01 	orrne.w	lr, lr, #1
   d92a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d92a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d92a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d92ac:	d204      	bcs.n	d92b8 <__aeabi_dmul+0x80>
   d92ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d92b2:	416d      	adcs	r5, r5
   d92b4:	eb46 0606 	adc.w	r6, r6, r6
   d92b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d92bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d92c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d92c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d92c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d92cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d92d0:	bf88      	it	hi
   d92d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d92d6:	d81e      	bhi.n	d9316 <__aeabi_dmul+0xde>
   d92d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d92dc:	bf08      	it	eq
   d92de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d92e2:	f150 0000 	adcs.w	r0, r0, #0
   d92e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d92ea:	bd70      	pop	{r4, r5, r6, pc}
   d92ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d92f0:	ea46 0101 	orr.w	r1, r6, r1
   d92f4:	ea40 0002 	orr.w	r0, r0, r2
   d92f8:	ea81 0103 	eor.w	r1, r1, r3
   d92fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d9300:	bfc2      	ittt	gt
   d9302:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9306:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d930a:	bd70      	popgt	{r4, r5, r6, pc}
   d930c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9310:	f04f 0e00 	mov.w	lr, #0
   d9314:	3c01      	subs	r4, #1
   d9316:	f300 80ab 	bgt.w	d9470 <__aeabi_dmul+0x238>
   d931a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d931e:	bfde      	ittt	le
   d9320:	2000      	movle	r0, #0
   d9322:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d9326:	bd70      	pople	{r4, r5, r6, pc}
   d9328:	f1c4 0400 	rsb	r4, r4, #0
   d932c:	3c20      	subs	r4, #32
   d932e:	da35      	bge.n	d939c <__aeabi_dmul+0x164>
   d9330:	340c      	adds	r4, #12
   d9332:	dc1b      	bgt.n	d936c <__aeabi_dmul+0x134>
   d9334:	f104 0414 	add.w	r4, r4, #20
   d9338:	f1c4 0520 	rsb	r5, r4, #32
   d933c:	fa00 f305 	lsl.w	r3, r0, r5
   d9340:	fa20 f004 	lsr.w	r0, r0, r4
   d9344:	fa01 f205 	lsl.w	r2, r1, r5
   d9348:	ea40 0002 	orr.w	r0, r0, r2
   d934c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d9350:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9354:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9358:	fa21 f604 	lsr.w	r6, r1, r4
   d935c:	eb42 0106 	adc.w	r1, r2, r6
   d9360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9364:	bf08      	it	eq
   d9366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d936a:	bd70      	pop	{r4, r5, r6, pc}
   d936c:	f1c4 040c 	rsb	r4, r4, #12
   d9370:	f1c4 0520 	rsb	r5, r4, #32
   d9374:	fa00 f304 	lsl.w	r3, r0, r4
   d9378:	fa20 f005 	lsr.w	r0, r0, r5
   d937c:	fa01 f204 	lsl.w	r2, r1, r4
   d9380:	ea40 0002 	orr.w	r0, r0, r2
   d9384:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9388:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d938c:	f141 0100 	adc.w	r1, r1, #0
   d9390:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9394:	bf08      	it	eq
   d9396:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d939a:	bd70      	pop	{r4, r5, r6, pc}
   d939c:	f1c4 0520 	rsb	r5, r4, #32
   d93a0:	fa00 f205 	lsl.w	r2, r0, r5
   d93a4:	ea4e 0e02 	orr.w	lr, lr, r2
   d93a8:	fa20 f304 	lsr.w	r3, r0, r4
   d93ac:	fa01 f205 	lsl.w	r2, r1, r5
   d93b0:	ea43 0302 	orr.w	r3, r3, r2
   d93b4:	fa21 f004 	lsr.w	r0, r1, r4
   d93b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d93bc:	fa21 f204 	lsr.w	r2, r1, r4
   d93c0:	ea20 0002 	bic.w	r0, r0, r2
   d93c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d93c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d93cc:	bf08      	it	eq
   d93ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d93d2:	bd70      	pop	{r4, r5, r6, pc}
   d93d4:	f094 0f00 	teq	r4, #0
   d93d8:	d10f      	bne.n	d93fa <__aeabi_dmul+0x1c2>
   d93da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d93de:	0040      	lsls	r0, r0, #1
   d93e0:	eb41 0101 	adc.w	r1, r1, r1
   d93e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d93e8:	bf08      	it	eq
   d93ea:	3c01      	subeq	r4, #1
   d93ec:	d0f7      	beq.n	d93de <__aeabi_dmul+0x1a6>
   d93ee:	ea41 0106 	orr.w	r1, r1, r6
   d93f2:	f095 0f00 	teq	r5, #0
   d93f6:	bf18      	it	ne
   d93f8:	4770      	bxne	lr
   d93fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d93fe:	0052      	lsls	r2, r2, #1
   d9400:	eb43 0303 	adc.w	r3, r3, r3
   d9404:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d9408:	bf08      	it	eq
   d940a:	3d01      	subeq	r5, #1
   d940c:	d0f7      	beq.n	d93fe <__aeabi_dmul+0x1c6>
   d940e:	ea43 0306 	orr.w	r3, r3, r6
   d9412:	4770      	bx	lr
   d9414:	ea94 0f0c 	teq	r4, ip
   d9418:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d941c:	bf18      	it	ne
   d941e:	ea95 0f0c 	teqne	r5, ip
   d9422:	d00c      	beq.n	d943e <__aeabi_dmul+0x206>
   d9424:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9428:	bf18      	it	ne
   d942a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d942e:	d1d1      	bne.n	d93d4 <__aeabi_dmul+0x19c>
   d9430:	ea81 0103 	eor.w	r1, r1, r3
   d9434:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9438:	f04f 0000 	mov.w	r0, #0
   d943c:	bd70      	pop	{r4, r5, r6, pc}
   d943e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9442:	bf06      	itte	eq
   d9444:	4610      	moveq	r0, r2
   d9446:	4619      	moveq	r1, r3
   d9448:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d944c:	d019      	beq.n	d9482 <__aeabi_dmul+0x24a>
   d944e:	ea94 0f0c 	teq	r4, ip
   d9452:	d102      	bne.n	d945a <__aeabi_dmul+0x222>
   d9454:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d9458:	d113      	bne.n	d9482 <__aeabi_dmul+0x24a>
   d945a:	ea95 0f0c 	teq	r5, ip
   d945e:	d105      	bne.n	d946c <__aeabi_dmul+0x234>
   d9460:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d9464:	bf1c      	itt	ne
   d9466:	4610      	movne	r0, r2
   d9468:	4619      	movne	r1, r3
   d946a:	d10a      	bne.n	d9482 <__aeabi_dmul+0x24a>
   d946c:	ea81 0103 	eor.w	r1, r1, r3
   d9470:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9474:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d947c:	f04f 0000 	mov.w	r0, #0
   d9480:	bd70      	pop	{r4, r5, r6, pc}
   d9482:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9486:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d948a:	bd70      	pop	{r4, r5, r6, pc}

000d948c <__aeabi_ddiv>:
   d948c:	b570      	push	{r4, r5, r6, lr}
   d948e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9492:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9496:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d949a:	bf1d      	ittte	ne
   d949c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d94a0:	ea94 0f0c 	teqne	r4, ip
   d94a4:	ea95 0f0c 	teqne	r5, ip
   d94a8:	f000 f8a7 	bleq	d95fa <__aeabi_ddiv+0x16e>
   d94ac:	eba4 0405 	sub.w	r4, r4, r5
   d94b0:	ea81 0e03 	eor.w	lr, r1, r3
   d94b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d94b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d94bc:	f000 8088 	beq.w	d95d0 <__aeabi_ddiv+0x144>
   d94c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d94c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d94c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d94cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d94d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d94d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d94d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d94dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d94e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d94e4:	429d      	cmp	r5, r3
   d94e6:	bf08      	it	eq
   d94e8:	4296      	cmpeq	r6, r2
   d94ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d94ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d94f2:	d202      	bcs.n	d94fa <__aeabi_ddiv+0x6e>
   d94f4:	085b      	lsrs	r3, r3, #1
   d94f6:	ea4f 0232 	mov.w	r2, r2, rrx
   d94fa:	1ab6      	subs	r6, r6, r2
   d94fc:	eb65 0503 	sbc.w	r5, r5, r3
   d9500:	085b      	lsrs	r3, r3, #1
   d9502:	ea4f 0232 	mov.w	r2, r2, rrx
   d9506:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d950a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d950e:	ebb6 0e02 	subs.w	lr, r6, r2
   d9512:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9516:	bf22      	ittt	cs
   d9518:	1ab6      	subcs	r6, r6, r2
   d951a:	4675      	movcs	r5, lr
   d951c:	ea40 000c 	orrcs.w	r0, r0, ip
   d9520:	085b      	lsrs	r3, r3, #1
   d9522:	ea4f 0232 	mov.w	r2, r2, rrx
   d9526:	ebb6 0e02 	subs.w	lr, r6, r2
   d952a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d952e:	bf22      	ittt	cs
   d9530:	1ab6      	subcs	r6, r6, r2
   d9532:	4675      	movcs	r5, lr
   d9534:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d9538:	085b      	lsrs	r3, r3, #1
   d953a:	ea4f 0232 	mov.w	r2, r2, rrx
   d953e:	ebb6 0e02 	subs.w	lr, r6, r2
   d9542:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9546:	bf22      	ittt	cs
   d9548:	1ab6      	subcs	r6, r6, r2
   d954a:	4675      	movcs	r5, lr
   d954c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d9550:	085b      	lsrs	r3, r3, #1
   d9552:	ea4f 0232 	mov.w	r2, r2, rrx
   d9556:	ebb6 0e02 	subs.w	lr, r6, r2
   d955a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d955e:	bf22      	ittt	cs
   d9560:	1ab6      	subcs	r6, r6, r2
   d9562:	4675      	movcs	r5, lr
   d9564:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d9568:	ea55 0e06 	orrs.w	lr, r5, r6
   d956c:	d018      	beq.n	d95a0 <__aeabi_ddiv+0x114>
   d956e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d9572:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d9576:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d957a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d957e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d9582:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d9586:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d958a:	d1c0      	bne.n	d950e <__aeabi_ddiv+0x82>
   d958c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9590:	d10b      	bne.n	d95aa <__aeabi_ddiv+0x11e>
   d9592:	ea41 0100 	orr.w	r1, r1, r0
   d9596:	f04f 0000 	mov.w	r0, #0
   d959a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d959e:	e7b6      	b.n	d950e <__aeabi_ddiv+0x82>
   d95a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d95a4:	bf04      	itt	eq
   d95a6:	4301      	orreq	r1, r0
   d95a8:	2000      	moveq	r0, #0
   d95aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d95ae:	bf88      	it	hi
   d95b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d95b4:	f63f aeaf 	bhi.w	d9316 <__aeabi_dmul+0xde>
   d95b8:	ebb5 0c03 	subs.w	ip, r5, r3
   d95bc:	bf04      	itt	eq
   d95be:	ebb6 0c02 	subseq.w	ip, r6, r2
   d95c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d95c6:	f150 0000 	adcs.w	r0, r0, #0
   d95ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d95ce:	bd70      	pop	{r4, r5, r6, pc}
   d95d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d95d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d95d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d95dc:	bfc2      	ittt	gt
   d95de:	ebd4 050c 	rsbsgt	r5, r4, ip
   d95e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d95e6:	bd70      	popgt	{r4, r5, r6, pc}
   d95e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d95ec:	f04f 0e00 	mov.w	lr, #0
   d95f0:	3c01      	subs	r4, #1
   d95f2:	e690      	b.n	d9316 <__aeabi_dmul+0xde>
   d95f4:	ea45 0e06 	orr.w	lr, r5, r6
   d95f8:	e68d      	b.n	d9316 <__aeabi_dmul+0xde>
   d95fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d95fe:	ea94 0f0c 	teq	r4, ip
   d9602:	bf08      	it	eq
   d9604:	ea95 0f0c 	teqeq	r5, ip
   d9608:	f43f af3b 	beq.w	d9482 <__aeabi_dmul+0x24a>
   d960c:	ea94 0f0c 	teq	r4, ip
   d9610:	d10a      	bne.n	d9628 <__aeabi_ddiv+0x19c>
   d9612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9616:	f47f af34 	bne.w	d9482 <__aeabi_dmul+0x24a>
   d961a:	ea95 0f0c 	teq	r5, ip
   d961e:	f47f af25 	bne.w	d946c <__aeabi_dmul+0x234>
   d9622:	4610      	mov	r0, r2
   d9624:	4619      	mov	r1, r3
   d9626:	e72c      	b.n	d9482 <__aeabi_dmul+0x24a>
   d9628:	ea95 0f0c 	teq	r5, ip
   d962c:	d106      	bne.n	d963c <__aeabi_ddiv+0x1b0>
   d962e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9632:	f43f aefd 	beq.w	d9430 <__aeabi_dmul+0x1f8>
   d9636:	4610      	mov	r0, r2
   d9638:	4619      	mov	r1, r3
   d963a:	e722      	b.n	d9482 <__aeabi_dmul+0x24a>
   d963c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9640:	bf18      	it	ne
   d9642:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9646:	f47f aec5 	bne.w	d93d4 <__aeabi_dmul+0x19c>
   d964a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d964e:	f47f af0d 	bne.w	d946c <__aeabi_dmul+0x234>
   d9652:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d9656:	f47f aeeb 	bne.w	d9430 <__aeabi_dmul+0x1f8>
   d965a:	e712      	b.n	d9482 <__aeabi_dmul+0x24a>

000d965c <__aeabi_d2f>:
   d965c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9660:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d9664:	bf24      	itt	cs
   d9666:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d966a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d966e:	d90d      	bls.n	d968c <__aeabi_d2f+0x30>
   d9670:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9674:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d9678:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d967c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d9680:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9684:	bf08      	it	eq
   d9686:	f020 0001 	biceq.w	r0, r0, #1
   d968a:	4770      	bx	lr
   d968c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d9690:	d121      	bne.n	d96d6 <__aeabi_d2f+0x7a>
   d9692:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d9696:	bfbc      	itt	lt
   d9698:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d969c:	4770      	bxlt	lr
   d969e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d96a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d96a6:	f1c2 0218 	rsb	r2, r2, #24
   d96aa:	f1c2 0c20 	rsb	ip, r2, #32
   d96ae:	fa10 f30c 	lsls.w	r3, r0, ip
   d96b2:	fa20 f002 	lsr.w	r0, r0, r2
   d96b6:	bf18      	it	ne
   d96b8:	f040 0001 	orrne.w	r0, r0, #1
   d96bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d96c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d96c4:	fa03 fc0c 	lsl.w	ip, r3, ip
   d96c8:	ea40 000c 	orr.w	r0, r0, ip
   d96cc:	fa23 f302 	lsr.w	r3, r3, r2
   d96d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d96d4:	e7cc      	b.n	d9670 <__aeabi_d2f+0x14>
   d96d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d96da:	d107      	bne.n	d96ec <__aeabi_d2f+0x90>
   d96dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d96e0:	bf1e      	ittt	ne
   d96e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d96e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d96ea:	4770      	bxne	lr
   d96ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d96f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d96f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d96f8:	4770      	bx	lr
   d96fa:	bf00      	nop

000d96fc <__cxa_atexit>:
   d96fc:	b510      	push	{r4, lr}
   d96fe:	4c05      	ldr	r4, [pc, #20]	; (d9714 <__cxa_atexit+0x18>)
   d9700:	4613      	mov	r3, r2
   d9702:	b12c      	cbz	r4, d9710 <__cxa_atexit+0x14>
   d9704:	460a      	mov	r2, r1
   d9706:	4601      	mov	r1, r0
   d9708:	2002      	movs	r0, #2
   d970a:	f3af 8000 	nop.w
   d970e:	bd10      	pop	{r4, pc}
   d9710:	4620      	mov	r0, r4
   d9712:	bd10      	pop	{r4, pc}
   d9714:	00000000 	.word	0x00000000

000d9718 <memcpy>:
   d9718:	b510      	push	{r4, lr}
   d971a:	1e43      	subs	r3, r0, #1
   d971c:	440a      	add	r2, r1
   d971e:	4291      	cmp	r1, r2
   d9720:	d004      	beq.n	d972c <memcpy+0x14>
   d9722:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9726:	f803 4f01 	strb.w	r4, [r3, #1]!
   d972a:	e7f8      	b.n	d971e <memcpy+0x6>
   d972c:	bd10      	pop	{r4, pc}

000d972e <memset>:
   d972e:	4402      	add	r2, r0
   d9730:	4603      	mov	r3, r0
   d9732:	4293      	cmp	r3, r2
   d9734:	d002      	beq.n	d973c <memset+0xe>
   d9736:	f803 1b01 	strb.w	r1, [r3], #1
   d973a:	e7fa      	b.n	d9732 <memset+0x4>
   d973c:	4770      	bx	lr
	...

000d9740 <srand>:
   d9740:	b538      	push	{r3, r4, r5, lr}
   d9742:	4b12      	ldr	r3, [pc, #72]	; (d978c <srand+0x4c>)
   d9744:	681c      	ldr	r4, [r3, #0]
   d9746:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9748:	4605      	mov	r5, r0
   d974a:	b9d3      	cbnz	r3, d9782 <srand+0x42>
   d974c:	2018      	movs	r0, #24
   d974e:	f7fd fda5 	bl	d729c <malloc>
   d9752:	f243 330e 	movw	r3, #13070	; 0x330e
   d9756:	63a0      	str	r0, [r4, #56]	; 0x38
   d9758:	8003      	strh	r3, [r0, #0]
   d975a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d975e:	8043      	strh	r3, [r0, #2]
   d9760:	f241 2334 	movw	r3, #4660	; 0x1234
   d9764:	8083      	strh	r3, [r0, #4]
   d9766:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d976a:	80c3      	strh	r3, [r0, #6]
   d976c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9770:	8103      	strh	r3, [r0, #8]
   d9772:	2305      	movs	r3, #5
   d9774:	8143      	strh	r3, [r0, #10]
   d9776:	230b      	movs	r3, #11
   d9778:	8183      	strh	r3, [r0, #12]
   d977a:	2201      	movs	r2, #1
   d977c:	2300      	movs	r3, #0
   d977e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9782:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9784:	2200      	movs	r2, #0
   d9786:	611d      	str	r5, [r3, #16]
   d9788:	615a      	str	r2, [r3, #20]
   d978a:	bd38      	pop	{r3, r4, r5, pc}
   d978c:	2003db4c 	.word	0x2003db4c

000d9790 <strlen>:
   d9790:	4603      	mov	r3, r0
   d9792:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9796:	2a00      	cmp	r2, #0
   d9798:	d1fb      	bne.n	d9792 <strlen+0x2>
   d979a:	1a18      	subs	r0, r3, r0
   d979c:	3801      	subs	r0, #1
   d979e:	4770      	bx	lr

000d97a0 <dynalib_user>:
   d97a0:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d97b0:	0000 0000 5453 5241 0054 0030 0a7d 5300     ....START.0.}..S
   d97c0:	5245 4149 204c 4144 4154 5320 5445 4954     ERIAL DATA SETTI
   d97d0:	474e 2053 2d2d 203e 007b 504f 5320 4154     NGS --> {.OP STA
   d97e0:	4554 003a 4552 4f50 5452 4e49 2047 4e49     TE:.REPORTING IN
   d97f0:	4554 5652 4c41 203a 4400 5441 2041 4552     TERVAL: .DATA RE
   d9800:	4f53 554c 4954 4e4f 203a 5300 5245 4149     SOLUTION: .SERIA
   d9810:	204c 554e 424d 5245 203a 4d00 5451 2054     L NUMBER: .MQTT 
   d9820:	5242 4b4f 5245 203a 4d00 5451 2054 5242     BROKER: .MQTT BR
   d9830:	4b4f 5245 5020 524f 3a54 0020 4843 4345     OKER PORT: .CHEC
   d9840:	534b 4d55 203a 5300 7465 6974 676e 2073     KSUM: .Settings 
   d9850:	6153 6576 2064 7573 6363 7365 6673 6c75     Saved successful
   d9860:	796c 5300 5445 4954 474e 2053 4146 4c49     ly.SETTINGS FAIL
   d9870:	4445 4e00 5745 4d20 5451 2054 5242 4b4f     ED.NEW MQTT BROK
   d9880:	5245 5320 5445 203a 5200 6365 6e6f 656e     ER SET: .Reconne
   d9890:	7463 6e69 2067 6f74 4220 6f72 656b 0072     cting to Broker.
   d98a0:	5550 4c42 5349 2048 4146 4c49 4445 0a00     PUBLISH FAILED..
   d98b0:	6544 6976 6563 4920 3a44 0020 540a 7365     Device ID: ..Tes
   d98c0:	6974 676e 4520 5045 4f52 3a4d 0a00 7250     ting EEPROM:..Pr
   d98d0:	7365 2073 7562 7474 6e6f 6620 726f 203a     ess button for: 
   d98e0:	2000 6553 6f63 646e 0073 540a 7365 6974     . Seconds..Testi
   d98f0:	676e 4220 7475 6f74 3a6e 0a00 6554 7473     ng Button:..Test
   d9900:	6e69 2067 6156 766c 3a65 0a00 6554 7473     ing Valve:..Test
   d9910:	6e69 2067 4453 4320 7261 3a64 0a00 6554     ing SD Card:..Te
   d9920:	7473 6e69 2067 6152 6964 3a6f 0a00 6e55     sting Radio:..Un
   d9930:	6e6b 776f 206e 6f63 6d6d 6e61 0064 5355     known command.US
   d9940:	4e49 2047 4544 4146 4c55 2054 4553 5454     ING DEFAULT SETT
   d9950:	4e49 5347 5500 4953 474e 5320 5445 4954     INGS.USING SETTI
   d9960:	474e 2053 5246 4d4f 4d20 4d45 524f 0059     NGS FROM MEMORY.
   d9970:	6574 7473 622e 6f72 656b 2e72 6f63 006d     test.broker.com.

000d9980 <_ZTV5Timer>:
	...
   d9988:	4d29 000d 4d71 000d 4caf 000d               )M..qM...L..

000d9994 <_ZTVN8particle13__SPISettingsE>:
	...
   d999c:	4e5d 000d                                   ]N..

000d99a0 <_ZTV4File>:
	...
   d99a8:	4e5b 000d 4ef3 000d 4ecd 000d 4ec1 000d     [N...N...N...N..
   d99b8:	4e3d 000d 4f37 000d 4ebb 000d 4eb5 000d     =N..7O...N...N..

000d99c8 <_ZTV6SdFile>:
	...
   d99d0:	4e59 000d 4ee5 000d 4f01 000d 4ec7 000d     YN...N...O...N..
   d99e0:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   d99f0:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   d9a00:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   d9a10:	676e 2073 7325 6c25 2075 7325 4d20 444f     ngs %s%lu %s MOD
   d9a20:	2545 3e64 2500 3230 2558 3230 2558 3230     E%d>.%02X%02X%02
   d9a30:	2558 3230 2e58 4f4c 0047 002f 4652 364d     X%02X.LOG./.RFM6
   d9a40:	2039 4e49 5449 4520 5252 524f 4e00 5745     9 INIT ERROR.NEW
   d9a50:	4e20 444f 2045 4449 203a 4e00 5745 4e20      NODE ID: .NEW N
   d9a60:	5445 4f57 4b52 4920 3a44 0020 4749 2d48     ETWORK ID: .IGH-
   d9a70:	4652 364d 4839 5743 4b2d 5945 3c00 4554     RFM69HCW-KEY.<TE
   d9a80:	5453 003e 543c 5345 3a54 4b4f 003e 0400     ST>.<TEST:OK>...
   d9a90:	514d 5454 0004 4d06 4951 6473 0370 0000     MQTT...MQIsdp...

000d9aa0 <_ZTV5RFM69>:
	...
   d9aa8:	6875 000d                                   uh..

000d9aac <_ZTVN5spark13EthernetClassE>:
	...
   d9ab4:	734b 000d 7341 000d 7337 000d 732d 000d     Ks..As..7s..-s..
   d9ac4:	7321 000d 7315 000d 7309 000d 7301 000d     !s...s...s...s..
   d9ad4:	72f7 000d 72ed 000d 8903 000d               .r...r......

000d9ae0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d9ae0:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
   d9af0:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d9b00:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d9b10:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d9b20:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d9b30:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d9b40:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d9b50:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d9b60:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   d9b70:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   d9b80:	7465 6961 736c 3d20 0020 0a0d 6600 6c00     etails = ....f.l
   d9b90:	006e 6e66 6300 646f 0065 6564 6174 6c69     n.fn.code.detail
   d9ba0:	6e00 6e6f 0065 7274 6361 0065 6e69 6f66     .none.trace.info
   d9bb0:	7700 7261 006e 7265 6f72 0072 6170 696e     .warn.error.pani
   d9bc0:	0063 6c61 006c 005a 2b25 3330 3a64 3025     c.all.Z.%+03d:%0
   d9bd0:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   d9be0:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000d9bf0 <_ZTV14CellularSignal>:
	...
   d9bf8:	5015 000d 5017 000d 7925 000d 79b5 000d     .P...P..%y...y..
   d9c08:	7929 000d 7981 000d 7955 000d 7a27 000d     )y...y..Uy..'z..
   d9c18:	fffc ffff 0000 0000 7a51 000d               ........Qz..

000d9c24 <_ZTV9IPAddress>:
	...
   d9c2c:	7c5d 000d 7c4d 000d 7c4f 000d               ]|..M|..O|..

000d9c38 <_ZTV9USBSerial>:
	...
   d9c40:	7d75 000d 7dc5 000d 7dd3 000d 7749 000d     u}...}...}..Iw..
   d9c50:	7db1 000d 7d77 000d 7d8d 000d 7dbf 000d     .}..w}...}...}..
   d9c60:	7da3 000d 7d71 000d                         .}..q}..

000d9c68 <_ZTVN5spark13CellularClassE>:
	...
   d9c70:	7f3b 000d 7f31 000d 7f27 000d 7edd 000d     ;...1...'....~..
   d9c80:	7f1b 000d 7f0f 000d 7f03 000d 7efb 000d     .............~..
   d9c90:	7ef1 000d 7ee7 000d 8903 000d               .~...~......

000d9c9c <_ZTV11USARTSerial>:
	...
   d9ca4:	7f75 000d 7fc5 000d 7fd3 000d 7749 000d     u...........Iw..
   d9cb4:	7f89 000d 7fab 000d 7f97 000d 7fbf 000d     ................
   d9cc4:	7f77 000d 7f7b 000d                         w...{...

000d9ccc <_ZTV7TwoWire>:
	...
   d9cd4:	8079 000d 80c3 000d 809b 000d 807b 000d     y...........{...
   d9ce4:	80a3 000d 80ab 000d 80b3 000d 80bb 000d     ................

000d9cf4 <_ZTVN5spark9MeshClassE>:
	...
   d9cfc:	81f1 000d 81e7 000d 81dd 000d 81d3 000d     ................
   d9d0c:	81c7 000d 81bb 000d 81af 000d 81a7 000d     ................
   d9d1c:	819d 000d 8193 000d 8903 000d               ............

000d9d28 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d9d30:	8395 000d 839b 000d 8883 000d 83a9 000d     ................
   d9d40:	8397 000d                                   ....

000d9d44 <_ZTV9TCPClient>:
	...
   d9d4c:	5255 000d 5289 000d 830d 000d 8327 000d     UR...R......'...
   d9d5c:	8729 000d 847b 000d 844d 000d 8351 000d     )...{...M...Q...
   d9d6c:	8605 000d 8501 000d 84af 000d 86f9 000d     ................
   d9d7c:	8353 000d 838b 000d 8339 000d 83ad 000d     S.......9.......
   d9d8c:	842d 000d 6977 6972 676e 7200 6365 2076     -...wiring.recv 
   d9d9c:	7265 6f72 2072 203d 6425 0000               error = %d..

000d9da8 <_ZTVN5spark12NetworkClassE>:
	...
   d9db0:	889b 000d 88a5 000d 88af 000d 88b9 000d     ................
   d9dc0:	88c3 000d 88cf 000d 88db 000d 88e7 000d     ................
   d9dd0:	88ef 000d 88f9 000d 8903 000d               ............

000d9ddc <_ZSt7nothrow>:
   d9ddc:	0000 0000                                   ....

000d9de0 <__sf_fake_stdin>:
	...

000d9e00 <__sf_fake_stdout>:
	...

000d9e20 <__sf_fake_stderr>:
	...
   d9e40:	0043                                        C.

000d9e42 <link_const_variable_data_end>:
	...

000d9e44 <link_constructors_location>:
   d9e44:	000d4509 	.word	0x000d4509
   d9e48:	000d4a2b 	.word	0x000d4a2b
   d9e4c:	000d4b45 	.word	0x000d4b45
   d9e50:	000d4b81 	.word	0x000d4b81
   d9e54:	000d4c8f 	.word	0x000d4c8f
   d9e58:	000d4dad 	.word	0x000d4dad
   d9e5c:	000d4f41 	.word	0x000d4f41
   d9e60:	000d5079 	.word	0x000d5079
   d9e64:	000d5221 	.word	0x000d5221
   d9e68:	000d5aa3 	.word	0x000d5aa3
   d9e6c:	000d5aa7 	.word	0x000d5aa7
   d9e70:	000d5aab 	.word	0x000d5aab
   d9e74:	000d5ac9 	.word	0x000d5ac9
   d9e78:	000d5acd 	.word	0x000d5acd
   d9e7c:	000d5ad1 	.word	0x000d5ad1
   d9e80:	000d5ad5 	.word	0x000d5ad5
   d9e84:	000d5f2d 	.word	0x000d5f2d
   d9e88:	000d5f51 	.word	0x000d5f51
   d9e8c:	000d5f55 	.word	0x000d5f55
   d9e90:	000d613b 	.word	0x000d613b
   d9e94:	000d613f 	.word	0x000d613f
   d9e98:	000d6143 	.word	0x000d6143
   d9e9c:	000d64f9 	.word	0x000d64f9
   d9ea0:	000d64fd 	.word	0x000d64fd
   d9ea4:	000d6501 	.word	0x000d6501
   d9ea8:	000d6585 	.word	0x000d6585
   d9eac:	000d6c0d 	.word	0x000d6c0d
   d9eb0:	000d6c11 	.word	0x000d6c11
   d9eb4:	000d7355 	.word	0x000d7355
   d9eb8:	000d7605 	.word	0x000d7605
   d9ebc:	000d7721 	.word	0x000d7721
   d9ec0:	000d7865 	.word	0x000d7865
   d9ec4:	000d78e1 	.word	0x000d78e1
   d9ec8:	000d7909 	.word	0x000d7909
   d9ecc:	000d7f45 	.word	0x000d7f45
   d9ed0:	000d82bd 	.word	0x000d82bd
   d9ed4:	000d89d1 	.word	0x000d89d1
   d9ed8:	000d8c39 	.word	0x000d8c39
   d9edc:	000d8cbd 	.word	0x000d8cbd
   d9ee0:	000d8d81 	.word	0x000d8d81
   d9ee4:	000d8e45 	.word	0x000d8e45

000d9ee8 <link_constructors_end>:
	...
