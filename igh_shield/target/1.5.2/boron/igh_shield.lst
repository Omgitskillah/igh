
d:/git/igh/igh_shield/target/1.5.2/boron/igh_shield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009a80  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000ddaa0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000ec  2003d7cc  000ddaa4  0001d7cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000f38  2003d8b8  2003d8b8  0002d8b8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000ddb90  000ddb90  0001db90  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000ddbb8  000ddbb8  0001dbb8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001dcfed  00000000  00000000  0001dbbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0002811c  00000000  00000000  001faba9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003312a  00000000  00000000  00222cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000039b0  00000000  00000000  00255def  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006a68  00000000  00000000  0025979f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0005ec2c  00000000  00000000  00260207  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0007037c  00000000  00000000  002bee33  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011cbdf  00000000  00000000  0032f1af  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00010cc0  00000000  00000000  0044bd90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f007 fd60 	bl	dbaf6 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f007 fd65 	bl	dbb0c <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003d7cc 	.word	0x2003d7cc
   d404c:	000ddaa4 	.word	0x000ddaa4
   d4050:	2003d8b8 	.word	0x2003d8b8
   d4054:	2003d8b8 	.word	0x2003d8b8
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f005 fd75 	bl	d9b4c <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000dda94 	.word	0x000dda94
   d4084:	000dd9f0 	.word	0x000dd9f0

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 bacc 	b.w	d4624 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 facb 	bl	d4628 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f005 bd1b 	b.w	d9ad0 <_post_loop>

000d409a <_Znwj>:
   d409a:	f004 be65 	b.w	d8d68 <malloc>

000d409e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409e:	f004 be63 	b.w	d8d68 <malloc>

000d40a2 <_ZdlPv>:
   d40a2:	f004 be69 	b.w	d8d78 <free>

000d40a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a6:	f004 be67 	b.w	d8d78 <free>

000d40aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40aa:	7800      	ldrb	r0, [r0, #0]
   d40ac:	fab0 f080 	clz	r0, r0
   d40b0:	0940      	lsrs	r0, r0, #5
   d40b2:	4770      	bx	lr

000d40b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b4:	2301      	movs	r3, #1
   d40b6:	7003      	strb	r3, [r0, #0]
   d40b8:	4770      	bx	lr
	...

000d40bc <igh_settings_process_settings_tuples>:
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));

} 

uint8_t igh_settings_process_settings_tuples( uint8_t * settings, uint8_t byte_tracker, uint8_t end_index )
{
   d40bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            case SUBID_WATER_DISPENSED_PERIOD_HIGH:
                if(LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH == current_tuple_length)
                {
                    uint8_t new_water_dispensed_period_high[LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH]; 
                    memcpy(new_water_dispensed_period_high, &settings[current_data_index], LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH);
                    igh_current_threshold_settings.water_dispensed_period_high = GET32(new_water_dispensed_period_high);
   d40c0:	4fab      	ldr	r7, [pc, #684]	; (d4370 <igh_settings_process_settings_tuples+0x2b4>)
            case SUBID_MQTT_BROKER_PORT:
                if(LENGTH_SUBID_MQTT_PORT == current_tuple_length)
                {
                    uint8_t new_mqtt_port[LENGTH_SUBID_MQTT_PORT]; 
                    memcpy(new_mqtt_port, &settings[current_data_index], LENGTH_SUBID_MQTT_PORT);
                    igh_current_system_settings.broker_port = GET16(new_mqtt_port);
   d40c2:	f8df 82bc 	ldr.w	r8, [pc, #700]	; d4380 <igh_settings_process_settings_tuples+0x2c4>
                    mqtt_set_broker = 1;
   d40c6:	f8df 92bc 	ldr.w	r9, [pc, #700]	; d4384 <igh_settings_process_settings_tuples+0x2c8>
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));

} 

uint8_t igh_settings_process_settings_tuples( uint8_t * settings, uint8_t byte_tracker, uint8_t end_index )
{
   d40ca:	4605      	mov	r5, r0
   d40cc:	468b      	mov	fp, r1
   d40ce:	4692      	mov	sl, r2
    //cycle through tuples to get the settings data
    uint8_t current_tuple_id;
    uint8_t current_tuple_length;
    uint8_t current_data_index;

    while(byte_tracker < end_index)
   d40d0:	45d3      	cmp	fp, sl
   d40d2:	f080 81b2 	bcs.w	d443a <igh_settings_process_settings_tuples+0x37e>
    {
        // extract tuples
        current_tuple_id = settings[byte_tracker];
        // extract the length
        current_tuple_length = settings[byte_tracker + 1]; // should always follow
   d40d6:	eb05 030b 	add.w	r3, r5, fp
        // extract the tuple data based on tuple id
        current_data_index = byte_tracker + 2;
   d40da:	f10b 0402 	add.w	r4, fp, #2
    while(byte_tracker < end_index)
    {
        // extract tuples
        current_tuple_id = settings[byte_tracker];
        // extract the length
        current_tuple_length = settings[byte_tracker + 1]; // should always follow
   d40de:	785e      	ldrb	r6, [r3, #1]
        // extract the tuple data based on tuple id
        current_data_index = byte_tracker + 2;

        switch(current_tuple_id)
   d40e0:	f815 300b 	ldrb.w	r3, [r5, fp]
   d40e4:	3b01      	subs	r3, #1
        // extract tuples
        current_tuple_id = settings[byte_tracker];
        // extract the length
        current_tuple_length = settings[byte_tracker + 1]; // should always follow
        // extract the tuple data based on tuple id
        current_data_index = byte_tracker + 2;
   d40e6:	b2e4      	uxtb	r4, r4

        switch(current_tuple_id)
   d40e8:	2b39      	cmp	r3, #57	; 0x39
   d40ea:	f200 81a0 	bhi.w	d442e <igh_settings_process_settings_tuples+0x372>
   d40ee:	e8df f013 	tbh	[pc, r3, lsl #1]
   d40f2:	003a      	.short	0x003a
   d40f4:	00820071 	.word	0x00820071
   d40f8:	00930063 	.word	0x00930063
   d40fc:	004400a6 	.word	0x004400a6
   d4100:	0190005c 	.word	0x0190005c
   d4104:	019e019e 	.word	0x019e019e
   d4108:	019e019e 	.word	0x019e019e
   d410c:	019e019e 	.word	0x019e019e
   d4110:	00c800b4 	.word	0x00c800b4
   d4114:	00f000dc 	.word	0x00f000dc
   d4118:	01180104 	.word	0x01180104
   d411c:	014b0135 	.word	0x014b0135
   d4120:	016f015d 	.word	0x016f015d
   d4124:	019e0181 	.word	0x019e0181
   d4128:	019e019e 	.word	0x019e019e
   d412c:	019e019e 	.word	0x019e019e
   d4130:	019e019e 	.word	0x019e019e
   d4134:	019e019e 	.word	0x019e019e
   d4138:	019e019e 	.word	0x019e019e
   d413c:	019e019e 	.word	0x019e019e
   d4140:	019e019e 	.word	0x019e019e
   d4144:	019e019e 	.word	0x019e019e
   d4148:	019e019e 	.word	0x019e019e
   d414c:	019e019e 	.word	0x019e019e
   d4150:	00d200be 	.word	0x00d200be
   d4154:	00fa00e6 	.word	0x00fa00e6
   d4158:	0122010e 	.word	0x0122010e
   d415c:	0154012c 	.word	0x0154012c
   d4160:	01780166 	.word	0x01780166
   d4164:	0190      	.short	0x0190
        {
            case SUBID_OPSTATE:
                if(LENGTH_SUBID_OPSTATE == current_tuple_length)
   d4166:	2e01      	cmp	r6, #1
   d4168:	f040 816a 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    // check if new state is valid
                    if( (OP_INACTIVE == (settings[current_data_index]))|| 
   d416c:	5d2b      	ldrb	r3, [r5, r4]
   d416e:	2b03      	cmp	r3, #3
   d4170:	f200 815d 	bhi.w	d442e <igh_settings_process_settings_tuples+0x372>
                        (OP_BASIC == (settings[current_data_index]))||
                        (OP_STANDARD == (settings[current_data_index]))||
                        (OP_PREMIUM == (settings[current_data_index]))  
                    )
                    {
                        igh_current_system_settings.op_state = (device_op_state)settings[current_data_index];
   d4174:	f888 3009 	strb.w	r3, [r8, #9]
   d4178:	e159      	b.n	d442e <igh_settings_process_settings_tuples+0x372>
                    return 0;
                }
                break;

            case SUBID_TIMEZONE:
                if(LENGTH_SUBID_SUBID_TIMEZONE == current_tuple_length)
   d417a:	2e02      	cmp	r6, #2
   d417c:	f040 8160 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    // check if new timezone is valid
                    if( POSITIVE_TIME_ZONE == settings[current_data_index] )
   d4180:	5d2b      	ldrb	r3, [r5, r4]
   d4182:	2bff      	cmp	r3, #255	; 0xff
   d4184:	d105      	bne.n	d4192 <igh_settings_process_settings_tuples+0xd6>
                    {
                        if( MAX_TIMEZONE > settings[current_data_index + 1] )
   d4186:	442c      	add	r4, r5
   d4188:	7863      	ldrb	r3, [r4, #1]
   d418a:	2b0b      	cmp	r3, #11
   d418c:	f200 814f 	bhi.w	d442e <igh_settings_process_settings_tuples+0x372>
   d4190:	e008      	b.n	d41a4 <igh_settings_process_settings_tuples+0xe8>
                        {
                            igh_current_system_settings.timezone = (int)settings[current_data_index + 1];
                        }
                    }

                    else if( NEGATIVE_TIME_ZONE == settings[current_data_index] )
   d4192:	2b00      	cmp	r3, #0
   d4194:	f040 814b 	bne.w	d442e <igh_settings_process_settings_tuples+0x372>
                    {
                        if( MAX_TIMEZONE > settings[current_data_index + 1] )
   d4198:	442c      	add	r4, r5
   d419a:	7863      	ldrb	r3, [r4, #1]
   d419c:	2b0b      	cmp	r3, #11
   d419e:	f200 8146 	bhi.w	d442e <igh_settings_process_settings_tuples+0x372>
                        {
                            igh_current_system_settings.timezone = -1 * settings[current_data_index + 1];
   d41a2:	425b      	negs	r3, r3
   d41a4:	f8c8 3004 	str.w	r3, [r8, #4]
   d41a8:	e141      	b.n	d442e <igh_settings_process_settings_tuples+0x372>
                    return 0;
                }
                break;

            case SUBID_IRRIGATION_HR:
                if(LENGTH_SUBID_SUBID_IRRIGATION_HR == current_tuple_length)
   d41aa:	2e01      	cmp	r6, #1
   d41ac:	f040 8148 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    // check if the time is within 24 hours
                    if( MAX_HOUR >  (settings[current_data_index]) ||
                        MIN_HOUR <= (settings[current_data_index]))
                    {
                        igh_current_system_settings.irrigation_hr = settings[current_data_index];
   d41b0:	5d2b      	ldrb	r3, [r5, r4]
   d41b2:	f888 3008 	strb.w	r3, [r8, #8]
   d41b6:	e13a      	b.n	d442e <igh_settings_process_settings_tuples+0x372>
                    return 0;
                }
                break;

            case SUBID_SET_SERIAL_NUMBER:
                if(LENGTH_SUBID_SET_SERIAL_NUMBER == current_tuple_length)
   d41b8:	2e0c      	cmp	r6, #12
   d41ba:	f040 8141 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    memcpy(igh_current_system_settings.serial_number, &settings[current_data_index], LENGTH_SUBID_SET_SERIAL_NUMBER);
   d41be:	442c      	add	r4, r5
   d41c0:	4b6c      	ldr	r3, [pc, #432]	; (d4374 <igh_settings_process_settings_tuples+0x2b8>)
   d41c2:	6820      	ldr	r0, [r4, #0]
   d41c4:	6861      	ldr	r1, [r4, #4]
   d41c6:	c303      	stmia	r3!, {r0, r1}
   d41c8:	68a0      	ldr	r0, [r4, #8]
   d41ca:	6018      	str	r0, [r3, #0]
                    initialize_rfm69 = 1;
   d41cc:	4b6a      	ldr	r3, [pc, #424]	; (d4378 <igh_settings_process_settings_tuples+0x2bc>)
   d41ce:	2201      	movs	r2, #1
   d41d0:	701a      	strb	r2, [r3, #0]
                else
                {
                    // stop processing any more settings as they may be corrupt
                    return 0;
                }
                break;
   d41d2:	e12c      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_REPORTING_INTERVAL:
                if(LENGTH_SUBID_REPORTING_INTERVAL == current_tuple_length)
   d41d4:	2e04      	cmp	r6, #4
   d41d6:	f040 8133 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_reporting_interval[LENGTH_SUBID_REPORTING_INTERVAL]; 
                    memcpy(new_reporting_interval, &settings[current_data_index], LENGTH_SUBID_REPORTING_INTERVAL);
   d41da:	1929      	adds	r1, r5, r4
                    igh_current_system_settings.reporting_interval = GET32(new_reporting_interval);
   d41dc:	5d2a      	ldrb	r2, [r5, r4]
   d41de:	784b      	ldrb	r3, [r1, #1]
   d41e0:	041b      	lsls	r3, r3, #16
   d41e2:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   d41e6:	78ca      	ldrb	r2, [r1, #3]
   d41e8:	4413      	add	r3, r2
   d41ea:	788a      	ldrb	r2, [r1, #2]
   d41ec:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d41f0:	f8c8 3010 	str.w	r3, [r8, #16]
                else
                {
                    // stop processing any more settings as they may be corrupt
                    return 0;
                }
                break;
   d41f4:	e11b      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_DATA_RESOLUTION:
                if(LENGTH_SUBID_DATA_RESOLUTION == current_tuple_length)
   d41f6:	2e04      	cmp	r6, #4
   d41f8:	f040 8122 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_data_resolution[LENGTH_SUBID_DATA_RESOLUTION]; 
                    memcpy(new_data_resolution, &settings[current_data_index], LENGTH_SUBID_DATA_RESOLUTION);
   d41fc:	1929      	adds	r1, r5, r4
                    igh_current_system_settings.data_resolution = GET32(new_data_resolution);
   d41fe:	5d2a      	ldrb	r2, [r5, r4]
   d4200:	784b      	ldrb	r3, [r1, #1]
   d4202:	041b      	lsls	r3, r3, #16
   d4204:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   d4208:	78ca      	ldrb	r2, [r1, #3]
   d420a:	4413      	add	r3, r2
   d420c:	788a      	ldrb	r2, [r1, #2]
   d420e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4212:	f8c8 3014 	str.w	r3, [r8, #20]
                }
                else
                {
                    return 0;
                }
                break;
   d4216:	e10a      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_MQTT_BROKER:
                if( sizeof(igh_current_system_settings.broker) > current_tuple_length)
   d4218:	2e1f      	cmp	r6, #31
   d421a:	f200 8111 	bhi.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    memset(igh_current_system_settings.broker, '\0', sizeof(igh_current_system_settings.broker));
   d421e:	2220      	movs	r2, #32
   d4220:	2100      	movs	r1, #0
   d4222:	4856      	ldr	r0, [pc, #344]	; (d437c <igh_settings_process_settings_tuples+0x2c0>)
   d4224:	f007 fc72 	bl	dbb0c <memset>
                    memcpy(igh_current_system_settings.broker, &settings[current_data_index], current_tuple_length);
   d4228:	4632      	mov	r2, r6
   d422a:	1929      	adds	r1, r5, r4
   d422c:	4853      	ldr	r0, [pc, #332]	; (d437c <igh_settings_process_settings_tuples+0x2c0>)
   d422e:	f007 fc62 	bl	dbaf6 <memcpy>
                    igh_current_system_settings.broker[current_tuple_length] = '\0'; // terminate the string
   d4232:	eb08 0306 	add.w	r3, r8, r6
   d4236:	2200      	movs	r2, #0
   d4238:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   d423c:	e009      	b.n	d4252 <igh_settings_process_settings_tuples+0x196>
                    return 0;
                }
                break;

            case SUBID_MQTT_BROKER_PORT:
                if(LENGTH_SUBID_MQTT_PORT == current_tuple_length)
   d423e:	2e02      	cmp	r6, #2
   d4240:	f040 80fe 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_mqtt_port[LENGTH_SUBID_MQTT_PORT]; 
                    memcpy(new_mqtt_port, &settings[current_data_index], LENGTH_SUBID_MQTT_PORT);
   d4244:	192b      	adds	r3, r5, r4
                    igh_current_system_settings.broker_port = GET16(new_mqtt_port);
   d4246:	5d2a      	ldrb	r2, [r5, r4]
   d4248:	785b      	ldrb	r3, [r3, #1]
   d424a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d424e:	f8a8 3044 	strh.w	r3, [r8, #68]	; 0x44
                    mqtt_set_broker = 1;
   d4252:	2301      	movs	r3, #1
   d4254:	f889 3000 	strb.w	r3, [r9]
                }
                else
                {
                    return 0;
                }
                break; 
   d4258:	e0e9      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_SOIL_MOISTURE_LOW:
                if(LENGTH_SUBID_SOIL_MOISTURE_LOW == current_tuple_length)
   d425a:	2e02      	cmp	r6, #2
   d425c:	f040 80f0 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_moisture_low_th[LENGTH_SUBID_SOIL_MOISTURE_LOW]; 
                    memcpy(new_moisture_low_th, &settings[current_data_index], LENGTH_SUBID_SOIL_MOISTURE_LOW);
   d4260:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_moisture_low = GET16(new_moisture_low_th);
   d4262:	5d2a      	ldrb	r2, [r5, r4]
   d4264:	785b      	ldrb	r3, [r3, #1]
   d4266:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d426a:	807b      	strh	r3, [r7, #2]
                }
                else
                {
                    return 0;
                }
                break; 
   d426c:	e0df      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_SOIL_MOISTURE_HIGH:
                if(LENGTH_SUBID_SOIL_MOISTURE_HIGH == current_tuple_length)
   d426e:	2e02      	cmp	r6, #2
   d4270:	f040 80e6 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_moisture_high_th[LENGTH_SUBID_SOIL_MOISTURE_HIGH]; 
                    memcpy(new_moisture_high_th, &settings[current_data_index], LENGTH_SUBID_SOIL_MOISTURE_LOW);
   d4274:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_moisture_high = GET16(new_moisture_high_th);
   d4276:	5d2a      	ldrb	r2, [r5, r4]
   d4278:	785b      	ldrb	r3, [r3, #1]
   d427a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d427e:	83bb      	strh	r3, [r7, #28]
                }
                else
                {
                    return 0;
                }
                break; 
   d4280:	e0d5      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_AIR_HUMIDITY_LOW:
                if(LENGTH_SUBID_AIR_HUMIDITY_LOW  == current_tuple_length)
   d4282:	2e02      	cmp	r6, #2
   d4284:	f040 80dc 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_air_humidity_low_th[LENGTH_SUBID_AIR_HUMIDITY_LOW]; 
                    memcpy(new_air_humidity_low_th, &settings[current_data_index], LENGTH_SUBID_AIR_HUMIDITY_LOW);
   d4288:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.air_humidity_low = GET16(new_air_humidity_low_th);
   d428a:	5d2a      	ldrb	r2, [r5, r4]
   d428c:	785b      	ldrb	r3, [r3, #1]
   d428e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4292:	80bb      	strh	r3, [r7, #4]
                }
                else
                {
                    return 0;
                }
                break; 
   d4294:	e0cb      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_AIR_HUMIDITY_HIGH:
                if(LENGTH_SUBID_AIR_HUMIDITY_HIGH  == current_tuple_length)
   d4296:	2e02      	cmp	r6, #2
   d4298:	f040 80d2 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_air_humidity_high_th[LENGTH_SUBID_AIR_HUMIDITY_HIGH]; 
                    memcpy(new_air_humidity_high_th, &settings[current_data_index], LENGTH_SUBID_AIR_HUMIDITY_HIGH);
   d429c:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.air_humidity_high = GET16(new_air_humidity_high_th);
   d429e:	5d2a      	ldrb	r2, [r5, r4]
   d42a0:	785b      	ldrb	r3, [r3, #1]
   d42a2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d42a6:	83fb      	strh	r3, [r7, #30]
                }
                else
                {
                    return 0;
                }
                break;
   d42a8:	e0c1      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_SOIL_HUMIDITY_LOW:
                if(LENGTH_SUBID_SOIL_HUMIDITY_LOW  == current_tuple_length)
   d42aa:	2e02      	cmp	r6, #2
   d42ac:	f040 80c8 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_soil_humidity_low_th[LENGTH_SUBID_SOIL_HUMIDITY_LOW]; 
                    memcpy(new_soil_humidity_low_th, &settings[current_data_index], LENGTH_SUBID_SOIL_HUMIDITY_LOW);
   d42b0:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_humidity_low = GET16(new_soil_humidity_low_th);
   d42b2:	5d2a      	ldrb	r2, [r5, r4]
   d42b4:	785b      	ldrb	r3, [r3, #1]
   d42b6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d42ba:	80fb      	strh	r3, [r7, #6]
                }
                else
                {
                    return 0;
                }
                break; 
   d42bc:	e0b7      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_SOIL_HUMIDITY_HIGH:
                if(LENGTH_SUBID_SOIL_HUMIDITY_HIGH  == current_tuple_length)
   d42be:	2e02      	cmp	r6, #2
   d42c0:	f040 80be 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_soil_humidity_high_th[LENGTH_SUBID_SOIL_HUMIDITY_HIGH]; 
                    memcpy(new_soil_humidity_high_th, &settings[current_data_index], LENGTH_SUBID_SOIL_HUMIDITY_HIGH);
   d42c4:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_humidity_high = GET16(new_soil_humidity_high_th);
   d42c6:	5d2a      	ldrb	r2, [r5, r4]
   d42c8:	785b      	ldrb	r3, [r3, #1]
   d42ca:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d42ce:	843b      	strh	r3, [r7, #32]
                }
                else
                {
                    return 0;
                }
                break;
   d42d0:	e0ad      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_CARBON_DIOXIDE_LOW:
                if(LENGTH_SUBID_CARBON_DIOXIDE_LOW  == current_tuple_length)
   d42d2:	2e02      	cmp	r6, #2
   d42d4:	f040 80b4 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_carbon_dioxide_low_th[LENGTH_SUBID_CARBON_DIOXIDE_LOW]; 
                    memcpy(new_carbon_dioxide_low_th, &settings[current_data_index], LENGTH_SUBID_CARBON_DIOXIDE_LOW);
   d42d8:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.carbon_dioxide_low = GET16(new_carbon_dioxide_low_th);
   d42da:	5d2a      	ldrb	r2, [r5, r4]
   d42dc:	785b      	ldrb	r3, [r3, #1]
   d42de:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d42e2:	813b      	strh	r3, [r7, #8]
                }
                else
                {
                    return 0;
                }
                break; 
   d42e4:	e0a3      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_CARBON_DIOXIDE_HIGH:
                if(LENGTH_SUBID_CARBON_DIOXIDE_HIGH  == current_tuple_length)
   d42e6:	2e02      	cmp	r6, #2
   d42e8:	f040 80aa 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_carbon_dioxide_high_th[LENGTH_SUBID_CARBON_DIOXIDE_HIGH]; 
                    memcpy(new_carbon_dioxide_high_th, &settings[current_data_index], LENGTH_SUBID_CARBON_DIOXIDE_HIGH);
   d42ec:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.carbon_dioxide_high = GET16(new_carbon_dioxide_high_th);
   d42ee:	5d2a      	ldrb	r2, [r5, r4]
   d42f0:	785b      	ldrb	r3, [r3, #1]
   d42f2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d42f6:	847b      	strh	r3, [r7, #34]	; 0x22
                }
                else
                {
                    return 0;
                }
                break;
   d42f8:	e099      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_AIR_TEMPERATURE_LOW:
                if(LENGTH_SUBID_AIR_TEMPERATURE_LOW  == current_tuple_length)
   d42fa:	2e02      	cmp	r6, #2
   d42fc:	f040 80a0 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_air_temperature_low_th[LENGTH_SUBID_AIR_TEMPERATURE_LOW]; 
                    memcpy(new_air_temperature_low_th, &settings[current_data_index], LENGTH_SUBID_AIR_TEMPERATURE_LOW);
   d4300:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.air_temperature_low = GET16(new_air_temperature_low_th);
   d4302:	5d2a      	ldrb	r2, [r5, r4]
   d4304:	785b      	ldrb	r3, [r3, #1]
   d4306:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d430a:	817b      	strh	r3, [r7, #10]
                }
                else
                {
                    return 0;
                }
                break; 
   d430c:	e08f      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_AIR_TEMPERATURE_HIGH:
                if(LENGTH_SUBID_AIR_TEMPERATURE_HIGH  == current_tuple_length)
   d430e:	2e02      	cmp	r6, #2
   d4310:	f040 8096 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_air_temperature_high_th[LENGTH_SUBID_AIR_TEMPERATURE_HIGH]; 
                    memcpy(new_air_temperature_high_th, &settings[current_data_index], LENGTH_SUBID_AIR_TEMPERATURE_HIGH);
   d4314:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.air_temperature_high = GET16(new_air_temperature_high_th);
   d4316:	5d2a      	ldrb	r2, [r5, r4]
   d4318:	785b      	ldrb	r3, [r3, #1]
   d431a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d431e:	84bb      	strh	r3, [r7, #36]	; 0x24
                }
                else
                {
                    return 0;
                }
                break;
   d4320:	e085      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_SOIL_TEMPERATURE_LOW:
                if(LENGTH_SUBID_SOIL_TEMPERATURE_LOW  == current_tuple_length)
   d4322:	2e02      	cmp	r6, #2
   d4324:	f040 808c 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_soil_temperature_low_th[LENGTH_SUBID_SOIL_TEMPERATURE_LOW]; 
                    memcpy(new_soil_temperature_low_th, &settings[current_data_index], LENGTH_SUBID_SOIL_TEMPERATURE_LOW);
   d4328:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_temperature_low = GET16(new_soil_temperature_low_th);
   d432a:	5d2a      	ldrb	r2, [r5, r4]
   d432c:	785b      	ldrb	r3, [r3, #1]
   d432e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4332:	81bb      	strh	r3, [r7, #12]
                }
                else
                {
                    return 0;
                }
                break; 
   d4334:	e07b      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_SOIL_TEMPERATURE_HIGH:
                if(LENGTH_SUBID_SOIL_TEMPERATURE_HIGH  == current_tuple_length)
   d4336:	2e02      	cmp	r6, #2
   d4338:	f040 8082 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_soil_temperature_high_th[LENGTH_SUBID_SOIL_TEMPERATURE_HIGH]; 
                    memcpy(new_soil_temperature_high_th, &settings[current_data_index], LENGTH_SUBID_SOIL_TEMPERATURE_HIGH);
   d433c:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_temperature_high = GET16(new_soil_temperature_high_th);
   d433e:	5d2a      	ldrb	r2, [r5, r4]
   d4340:	785b      	ldrb	r3, [r3, #1]
   d4342:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4346:	84fb      	strh	r3, [r7, #38]	; 0x26
                }
                else
                {
                    return 0;
                }
                break;    
   d4348:	e071      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_SOIL_NPK_HIGH:
                if(LENGTH_SUBID_SOIL_NPK_HIGH  == current_tuple_length)
   d434a:	2e02      	cmp	r6, #2
   d434c:	d178      	bne.n	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_soil_npk_high_th[LENGTH_SUBID_SOIL_NPK_HIGH]; 
                    memcpy(new_soil_npk_high_th, &settings[current_data_index], LENGTH_SUBID_SOIL_NPK_HIGH);
   d434e:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_npk_high = GET16(new_soil_npk_high_th);
   d4350:	5d2a      	ldrb	r2, [r5, r4]
   d4352:	785b      	ldrb	r3, [r3, #1]
   d4354:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4358:	853b      	strh	r3, [r7, #40]	; 0x28
                }
                else
                {
                    return 0;
                }
                break;   
   d435a:	e068      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_SOIL_NPK_LOW:
                if(LENGTH_SUBID_SOIL_NPK_LOW  == current_tuple_length)
   d435c:	2e02      	cmp	r6, #2
   d435e:	d16f      	bne.n	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_soil_npk_low_th[LENGTH_SUBID_SOIL_NPK_LOW]; 
                    memcpy(new_soil_npk_low_th, &settings[current_data_index], LENGTH_SUBID_SOIL_NPK_LOW);
   d4360:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_npk_low = GET16(new_soil_npk_low_th);
   d4362:	5d2a      	ldrb	r2, [r5, r4]
   d4364:	785b      	ldrb	r3, [r3, #1]
   d4366:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d436a:	81fb      	strh	r3, [r7, #14]
                }
                else
                {
                    return 0;
                }
                break; 
   d436c:	e05f      	b.n	d442e <igh_settings_process_settings_tuples+0x372>
   d436e:	bf00      	nop
   d4370:	2003e650 	.word	0x2003e650
   d4374:	2003e61c 	.word	0x2003e61c
   d4378:	2003d8bd 	.word	0x2003d8bd
   d437c:	2003e628 	.word	0x2003e628
   d4380:	2003e604 	.word	0x2003e604
   d4384:	2003d7cc 	.word	0x2003d7cc

            case SUBID_LIGHT_INTENSITY_LOW:
                if(LENGTH_SUBID_LIGHT_INTENSITY_LOW  == current_tuple_length)
   d4388:	2e02      	cmp	r6, #2
   d438a:	d159      	bne.n	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_light_intensity_low_th[LENGTH_SUBID_LIGHT_INTENSITY_LOW]; 
                    memcpy(new_light_intensity_low_th, &settings[current_data_index], LENGTH_SUBID_LIGHT_INTENSITY_LOW);
   d438c:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.light_intensity_low = GET16(new_light_intensity_low_th);
   d438e:	5d2a      	ldrb	r2, [r5, r4]
   d4390:	785b      	ldrb	r3, [r3, #1]
   d4392:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4396:	823b      	strh	r3, [r7, #16]
                }
                else
                {
                    return 0;
                }
                break; 
   d4398:	e049      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_LIGHT_INTENSITY_HIGH:
                if(LENGTH_SUBID_LIGHT_INTENSITY_HIGH  == current_tuple_length)
   d439a:	2e02      	cmp	r6, #2
   d439c:	d150      	bne.n	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_light_intensity_high_th[LENGTH_SUBID_LIGHT_INTENSITY_HIGH]; 
                    memcpy(new_light_intensity_high_th, &settings[current_data_index], LENGTH_SUBID_LIGHT_INTENSITY_HIGH);
   d439e:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.light_intensity_high = GET16(new_light_intensity_high_th);
   d43a0:	5d2a      	ldrb	r2, [r5, r4]
   d43a2:	785b      	ldrb	r3, [r3, #1]
   d43a4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d43a8:	857b      	strh	r3, [r7, #42]	; 0x2a
                }
                else
                {
                    return 0;
                }
                break; 
   d43aa:	e040      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_SHIELD_BATTERY_LEVEL_LOW:
                if(LENGTH_SUBID_SHIELD_BATTERY_LEVEL_LOW  == current_tuple_length)
   d43ac:	2e02      	cmp	r6, #2
   d43ae:	d147      	bne.n	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_shield_battery_low_th[LENGTH_SUBID_SHIELD_BATTERY_LEVEL_LOW]; 
                    memcpy(new_shield_battery_low_th, &settings[current_data_index], LENGTH_SUBID_SHIELD_BATTERY_LEVEL_LOW);
   d43b0:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.shield_battery_level_low = GET16(new_shield_battery_low_th);
   d43b2:	5d2a      	ldrb	r2, [r5, r4]
   d43b4:	785b      	ldrb	r3, [r3, #1]
   d43b6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d43ba:	827b      	strh	r3, [r7, #18]
                }
                else
                {
                    return 0;
                }
                break;
   d43bc:	e037      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_SHIELD_BATTERY_LEVEL_HIGH:
                if(LENGTH_SUBID_SHIELD_BATTERY_LEVEL_HIGH  == current_tuple_length)
   d43be:	2e02      	cmp	r6, #2
   d43c0:	d13e      	bne.n	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_shield_battery_high_th[LENGTH_SUBID_SHIELD_BATTERY_LEVEL_HIGH]; 
                    memcpy(new_shield_battery_high_th, &settings[current_data_index], LENGTH_SUBID_SHIELD_BATTERY_LEVEL_HIGH);
   d43c2:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.shield_battery_level_high = GET16(new_shield_battery_high_th);
   d43c4:	5d2a      	ldrb	r2, [r5, r4]
   d43c6:	785b      	ldrb	r3, [r3, #1]
   d43c8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d43cc:	85bb      	strh	r3, [r7, #44]	; 0x2c
                }
                else
                {
                    return 0;
                }
                break;  
   d43ce:	e02e      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_SPEAR_BATTERY_LEVEL_LOW:
                if(LENGTH_SUBID_SPEAR_BATTERY_LEVEL_LOW  == current_tuple_length)
   d43d0:	2e02      	cmp	r6, #2
   d43d2:	d135      	bne.n	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_spear_battery_low_th[LENGTH_SUBID_SPEAR_BATTERY_LEVEL_LOW]; 
                    memcpy(new_spear_battery_low_th, &settings[current_data_index], LENGTH_SUBID_SPEAR_BATTERY_LEVEL_LOW);
   d43d4:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.spear_battery_level_low = GET16(new_spear_battery_low_th);
   d43d6:	5d2a      	ldrb	r2, [r5, r4]
   d43d8:	785b      	ldrb	r3, [r3, #1]
   d43da:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d43de:	82bb      	strh	r3, [r7, #20]
                }
                else
                {
                    return 0;
                }
                break;
   d43e0:	e025      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_SPEAR_BATTERY_LEVEL_HIGH:
                if(LENGTH_SUBID_SPEAR_BATTERY_LEVEL_HIGH  == current_tuple_length)
   d43e2:	2e02      	cmp	r6, #2
   d43e4:	d12c      	bne.n	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_spear_battery_high_th[LENGTH_SUBID_SPEAR_BATTERY_LEVEL_HIGH]; 
                    memcpy(new_spear_battery_high_th, &settings[current_data_index], LENGTH_SUBID_SPEAR_BATTERY_LEVEL_HIGH);
   d43e6:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.spear_battery_level_high = GET16(new_spear_battery_high_th);
   d43e8:	5d2a      	ldrb	r2, [r5, r4]
   d43ea:	785b      	ldrb	r3, [r3, #1]
   d43ec:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d43f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
                }
                else
                {
                    return 0;
                }
                break;
   d43f2:	e01c      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_WATER_DISPENSED_PERIOD_LOW:
                if(LENGTH_SUBID_WATER_DISPENSED_PERIOD_LOW == current_tuple_length)
   d43f4:	2e04      	cmp	r6, #4
   d43f6:	d123      	bne.n	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_water_dispensed_period_low[LENGTH_SUBID_WATER_DISPENSED_PERIOD_LOW]; 
                    memcpy(new_water_dispensed_period_low, &settings[current_data_index], LENGTH_SUBID_WATER_DISPENSED_PERIOD_LOW);
   d43f8:	1929      	adds	r1, r5, r4
                    igh_current_threshold_settings.water_dispensed_period_low = GET32(new_water_dispensed_period_low);
   d43fa:	5d2a      	ldrb	r2, [r5, r4]
   d43fc:	784b      	ldrb	r3, [r1, #1]
   d43fe:	041b      	lsls	r3, r3, #16
   d4400:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   d4404:	78ca      	ldrb	r2, [r1, #3]
   d4406:	4413      	add	r3, r2
   d4408:	788a      	ldrb	r2, [r1, #2]
   d440a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d440e:	61bb      	str	r3, [r7, #24]
                else
                {
                    // stop processing any more settings as they may be corrupt
                    return 0;
                }
                break;
   d4410:	e00d      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_WATER_DISPENSED_PERIOD_HIGH:
                if(LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH == current_tuple_length)
   d4412:	2e04      	cmp	r6, #4
   d4414:	d114      	bne.n	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_water_dispensed_period_high[LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH]; 
                    memcpy(new_water_dispensed_period_high, &settings[current_data_index], LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH);
   d4416:	1929      	adds	r1, r5, r4
                    igh_current_threshold_settings.water_dispensed_period_high = GET32(new_water_dispensed_period_high);
   d4418:	5d2a      	ldrb	r2, [r5, r4]
   d441a:	784b      	ldrb	r3, [r1, #1]
   d441c:	041b      	lsls	r3, r3, #16
   d441e:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   d4422:	78ca      	ldrb	r2, [r1, #3]
   d4424:	4413      	add	r3, r2
   d4426:	788a      	ldrb	r2, [r1, #2]
   d4428:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d442c:	633b      	str	r3, [r7, #48]	; 0x30

            default: // nothing to do hear
                break;
        }
        // move index to next tuple id
        byte_tracker += current_tuple_length + TUPLE_HEADER_LEN;
   d442e:	1cb3      	adds	r3, r6, #2
   d4430:	eb0b 0603 	add.w	r6, fp, r3
   d4434:	fa5f fb86 	uxtb.w	fp, r6
   d4438:	e64a      	b.n	d40d0 <igh_settings_process_settings_tuples+0x14>
    }
    return 1;
   d443a:	2001      	movs	r0, #1
   d443c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    
                }
                else
                {
                    // stop processing any more settings as they may be corrupt
                    return 0;
   d4440:	2000      	movs	r0, #0
        }
        // move index to next tuple id
        byte_tracker += current_tuple_length + TUPLE_HEADER_LEN;
    }
    return 1;
}
   d4442:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4446:	bf00      	nop

000d4448 <igh_settings_calculate_checksum>:
 * struct must have a single byte at the end designated for the checksum for this to work
 * \param p_struct: pointer to data struct, total_bytes: sizeof(data struct)
 * \return the checksum
 */
uint8_t igh_settings_calculate_checksum(void * p_struct, size_t total_bytes)
{
   d4448:	b510      	push	{r4, lr}
    data = (uint8_t *)p_struct;

    // uint8_t data_buffer[length];
    // memcpy(data_buffer, data, length);

    data += 1; // ignore checksum byte
   d444a:	1c42      	adds	r2, r0, #1
 */
uint8_t igh_settings_calculate_checksum(void * p_struct, size_t total_bytes)
{
    uint8_t length = (uint8_t)total_bytes; 
    uint8_t * data;
    int sum = 0;
   d444c:	2300      	movs	r3, #0
    // uint8_t data_buffer[length];
    // memcpy(data_buffer, data, length);

    data += 1; // ignore checksum byte
    // start at 1 to ignore the checksum byte
    for( int i = 1; i < length; i++)
   d444e:	b2c9      	uxtb	r1, r1
   d4450:	1a14      	subs	r4, r2, r0
   d4452:	42a1      	cmp	r1, r4
   d4454:	dd03      	ble.n	d445e <igh_settings_calculate_checksum+0x16>
    {
        sum += (0xFF & *data++);
   d4456:	f812 4b01 	ldrb.w	r4, [r2], #1
   d445a:	4423      	add	r3, r4
   d445c:	e7f8      	b.n	d4450 <igh_settings_calculate_checksum+0x8>
    }

    checksum = (uint8_t)(sum % 256);

    return checksum;
}
   d445e:	b2d8      	uxtb	r0, r3
   d4460:	bd10      	pop	{r4, pc}
	...

000d4464 <igh_settings_parse_new_settings>:
    }
    return 1;
}

uint8_t igh_settings_parse_new_settings(uint8_t * settings)
{
   d4464:	b510      	push	{r4, lr}
    // get the length
    uint8_t length = settings[PAYLOAD_LEN_INDEX]; // byte at position one should always be length
   d4466:	7c82      	ldrb	r2, [r0, #18]
    // guard the process
    if(0 >= length)
   d4468:	b90a      	cbnz	r2, d446e <igh_settings_parse_new_settings+0xa>
    {
        return 0; // do not allow settings with zero payload to be processed
   d446a:	2000      	movs	r0, #0
   d446c:	bd10      	pop	{r4, pc}
    // get index of last byte to process
    uint8_t settings_end_index = FIRST_TUPLE_INDEX + length;
    // get the location of first tuple
    uint8_t settings_byte_tracker = FIRST_TUPLE_INDEX;
    
    if( 0 == igh_settings_process_settings_tuples( settings, settings_byte_tracker, settings_end_index ) ) 
   d446e:	3213      	adds	r2, #19
   d4470:	b2d2      	uxtb	r2, r2
   d4472:	2113      	movs	r1, #19
   d4474:	f7ff fe22 	bl	d40bc <igh_settings_process_settings_tuples>
   d4478:	2800      	cmp	r0, #0
   d447a:	d0f6      	beq.n	d446a <igh_settings_parse_new_settings+0x6>
        return 0;
    }
    else
    {
        // update the checksum of the system settings
        igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
   d447c:	4c07      	ldr	r4, [pc, #28]	; (d449c <igh_settings_parse_new_settings+0x38>)
   d447e:	2148      	movs	r1, #72	; 0x48
   d4480:	4620      	mov	r0, r4
   d4482:	f7ff ffe1 	bl	d4448 <igh_settings_calculate_checksum>
   d4486:	7020      	strb	r0, [r4, #0]
        // update the checksum for the threshold settings
        igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
   d4488:	4c05      	ldr	r4, [pc, #20]	; (d44a0 <igh_settings_parse_new_settings+0x3c>)
   d448a:	2134      	movs	r1, #52	; 0x34
   d448c:	4620      	mov	r0, r4
   d448e:	f7ff ffdb 	bl	d4448 <igh_settings_calculate_checksum>
        
        new_settings_available = 1;
   d4492:	4b04      	ldr	r3, [pc, #16]	; (d44a4 <igh_settings_parse_new_settings+0x40>)
    else
    {
        // update the checksum of the system settings
        igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
        // update the checksum for the threshold settings
        igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
   d4494:	7020      	strb	r0, [r4, #0]
        
        new_settings_available = 1;
   d4496:	2001      	movs	r0, #1
   d4498:	7018      	strb	r0, [r3, #0]
    }
    
    return 1;
}
   d449a:	bd10      	pop	{r4, pc}
   d449c:	2003e604 	.word	0x2003e604
   d44a0:	2003e650 	.word	0x2003e650
   d44a4:	2003d8bc 	.word	0x2003d8bc

000d44a8 <igh_settings_process_settings>:
 */
uint8_t igh_settings_process_settings(uint8_t * settings)
{
    uint8_t ret = 0; 
    igh_pkt_id settings_type = (igh_pkt_id)settings[PAYLOAD_INDEX];
    switch(settings_type)
   d44a8:	7c42      	ldrb	r2, [r0, #17]
   d44aa:	2a0f      	cmp	r2, #15
   d44ac:	d003      	beq.n	d44b6 <igh_settings_process_settings+0xe>
   d44ae:	2a10      	cmp	r2, #16
   d44b0:	d108      	bne.n	d44c4 <igh_settings_process_settings+0x1c>
    {
        case VALVE_POSITION:
            ret = igh_settings_remote_valvle_control(settings);
            break;
        case IGH_SEND_SETTINGS:
            ret = igh_settings_parse_new_settings(settings);
   d44b2:	f7ff bfd7 	b.w	d4464 <igh_settings_parse_new_settings>
    return buffer_index_tracker;
}

LOCAL uint8_t igh_settings_remote_valvle_control(uint8_t * settings)
{
    if( ((valve_position)settings[FIRST_TUPLE_INDEX] == VALVE_CLOSE) ||
   d44b6:	7cc3      	ldrb	r3, [r0, #19]
   d44b8:	2b01      	cmp	r3, #1
   d44ba:	d803      	bhi.n	d44c4 <igh_settings_process_settings+0x1c>
        ((valve_position)settings[FIRST_TUPLE_INDEX] == VALVE_OPEN) )
    {
        current_valve_position =  (valve_position)settings[FIRST_TUPLE_INDEX];
   d44bc:	4a02      	ldr	r2, [pc, #8]	; (d44c8 <igh_settings_process_settings+0x20>)
        return 1;
   d44be:	2001      	movs	r0, #1
LOCAL uint8_t igh_settings_remote_valvle_control(uint8_t * settings)
{
    if( ((valve_position)settings[FIRST_TUPLE_INDEX] == VALVE_CLOSE) ||
        ((valve_position)settings[FIRST_TUPLE_INDEX] == VALVE_OPEN) )
    {
        current_valve_position =  (valve_position)settings[FIRST_TUPLE_INDEX];
   d44c0:	7013      	strb	r3, [r2, #0]
   d44c2:	4770      	bx	lr
        return 1;
    }

    return 0;
   d44c4:	2000      	movs	r0, #0
        default:
            break;
    }

    return ret;
}
   d44c6:	4770      	bx	lr
   d44c8:	2003e64c 	.word	0x2003e64c

000d44cc <igh_settings_reset_system_to_default>:
    
    return 1;
}

void igh_settings_reset_system_to_default(void)
{
   d44cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


LOCAL void igh_settings_get_defaults(void) // Total bytes 
{
    // System settings
    memset(&igh_default_system_settings, 0, sizeof(igh_default_system_settings));
   d44ce:	4c35      	ldr	r4, [pc, #212]	; (d45a4 <igh_settings_reset_system_to_default+0xd8>)
   d44d0:	2248      	movs	r2, #72	; 0x48
   d44d2:	2100      	movs	r1, #0
   d44d4:	4620      	mov	r0, r4
   d44d6:	f007 fb19 	bl	dbb0c <memset>
    igh_default_system_settings.timezone                    = DEFAULT_TIMEZONE;
   d44da:	2303      	movs	r3, #3
    igh_default_system_settings.irrigation_hr               = DEFAULT_IRRIGATION_HR;
    igh_default_system_settings.water_dispenser_period      = DEFAULT_WATER_DISP_PERIOD;
    igh_default_system_settings.op_state                    = DEFAULT_NEW_OPSTATE;
    igh_default_system_settings.reporting_interval          = DEFAULT_REPORTING_INTERVAL;
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
   d44dc:	4a32      	ldr	r2, [pc, #200]	; (d45a8 <igh_settings_reset_system_to_default+0xdc>)

LOCAL void igh_settings_get_defaults(void) // Total bytes 
{
    // System settings
    memset(&igh_default_system_settings, 0, sizeof(igh_default_system_settings));
    igh_default_system_settings.timezone                    = DEFAULT_TIMEZONE;
   d44de:	6063      	str	r3, [r4, #4]
    igh_default_system_settings.irrigation_hr               = DEFAULT_IRRIGATION_HR;
   d44e0:	2307      	movs	r3, #7
   d44e2:	7223      	strb	r3, [r4, #8]
    igh_default_system_settings.water_dispenser_period      = DEFAULT_WATER_DISP_PERIOD;
   d44e4:	f44f 63e1 	mov.w	r3, #1800	; 0x708
    igh_default_system_settings.op_state                    = DEFAULT_NEW_OPSTATE;
    igh_default_system_settings.reporting_interval          = DEFAULT_REPORTING_INTERVAL;
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
   d44e8:	6810      	ldr	r0, [r2, #0]
   d44ea:	6851      	ldr	r1, [r2, #4]
{
    // System settings
    memset(&igh_default_system_settings, 0, sizeof(igh_default_system_settings));
    igh_default_system_settings.timezone                    = DEFAULT_TIMEZONE;
    igh_default_system_settings.irrigation_hr               = DEFAULT_IRRIGATION_HR;
    igh_default_system_settings.water_dispenser_period      = DEFAULT_WATER_DISP_PERIOD;
   d44ec:	60e3      	str	r3, [r4, #12]
    igh_default_system_settings.op_state                    = DEFAULT_NEW_OPSTATE;
    igh_default_system_settings.reporting_interval          = DEFAULT_REPORTING_INTERVAL;
   d44ee:	6123      	str	r3, [r4, #16]
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
   d44f0:	f44f 7316 	mov.w	r3, #600	; 0x258
   d44f4:	6163      	str	r3, [r4, #20]
    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
   d44f6:	f104 0318 	add.w	r3, r4, #24
   d44fa:	c303      	stmia	r3!, {r0, r1}
   d44fc:	6890      	ldr	r0, [r2, #8]
   d44fe:	6018      	str	r0, [r3, #0]
    memcpy(igh_default_system_settings.broker, default_broker_url, sizeof(default_broker_url));
   d4500:	4b2a      	ldr	r3, [pc, #168]	; (d45ac <igh_settings_reset_system_to_default+0xe0>)
   d4502:	f104 0224 	add.w	r2, r4, #36	; 0x24
   d4506:	f103 0610 	add.w	r6, r3, #16
   d450a:	6818      	ldr	r0, [r3, #0]
   d450c:	6859      	ldr	r1, [r3, #4]
   d450e:	4615      	mov	r5, r2
   d4510:	c503      	stmia	r5!, {r0, r1}
   d4512:	3308      	adds	r3, #8
   d4514:	42b3      	cmp	r3, r6
   d4516:	462a      	mov	r2, r5
   d4518:	d1f7      	bne.n	d450a <igh_settings_reset_system_to_default+0x3e>
   d451a:	881b      	ldrh	r3, [r3, #0]
   d451c:	802b      	strh	r3, [r5, #0]
    igh_default_system_settings.broker_port                 = DEFAULT_MQTT_BROKER_PORT;
    igh_default_system_settings.checksum = igh_settings_calculate_checksum(&igh_default_system_settings, sizeof(igh_default_system_settings));
   d451e:	2148      	movs	r1, #72	; 0x48
    igh_default_system_settings.op_state                    = DEFAULT_NEW_OPSTATE;
    igh_default_system_settings.reporting_interval          = DEFAULT_REPORTING_INTERVAL;
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
    memcpy(igh_default_system_settings.broker, default_broker_url, sizeof(default_broker_url));
    igh_default_system_settings.broker_port                 = DEFAULT_MQTT_BROKER_PORT;
   d4520:	f240 735b 	movw	r3, #1883	; 0x75b
    igh_default_system_settings.checksum = igh_settings_calculate_checksum(&igh_default_system_settings, sizeof(igh_default_system_settings));
   d4524:	481f      	ldr	r0, [pc, #124]	; (d45a4 <igh_settings_reset_system_to_default+0xd8>)
    igh_default_system_settings.op_state                    = DEFAULT_NEW_OPSTATE;
    igh_default_system_settings.reporting_interval          = DEFAULT_REPORTING_INTERVAL;
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
    memcpy(igh_default_system_settings.broker, default_broker_url, sizeof(default_broker_url));
    igh_default_system_settings.broker_port                 = DEFAULT_MQTT_BROKER_PORT;
   d4526:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    igh_default_system_settings.checksum = igh_settings_calculate_checksum(&igh_default_system_settings, sizeof(igh_default_system_settings));
   d452a:	f7ff ff8d 	bl	d4448 <igh_settings_calculate_checksum>
   d452e:	7020      	strb	r0, [r4, #0]

    //High Threshold tirggers
    memset(&igh_default_thresholds, 0, sizeof(igh_default_thresholds));
   d4530:	4c1f      	ldr	r4, [pc, #124]	; (d45b0 <igh_settings_reset_system_to_default+0xe4>)
}

void igh_settings_reset_system_to_default(void)
{
    igh_settings_get_defaults();
    igh_current_system_settings = igh_default_system_settings;
   d4532:	4f20      	ldr	r7, [pc, #128]	; (d45b4 <igh_settings_reset_system_to_default+0xe8>)
    igh_current_threshold_settings = igh_default_thresholds;
   d4534:	4e20      	ldr	r6, [pc, #128]	; (d45b8 <igh_settings_reset_system_to_default+0xec>)
    memcpy(igh_default_system_settings.broker, default_broker_url, sizeof(default_broker_url));
    igh_default_system_settings.broker_port                 = DEFAULT_MQTT_BROKER_PORT;
    igh_default_system_settings.checksum = igh_settings_calculate_checksum(&igh_default_system_settings, sizeof(igh_default_system_settings));

    //High Threshold tirggers
    memset(&igh_default_thresholds, 0, sizeof(igh_default_thresholds));
   d4536:	2234      	movs	r2, #52	; 0x34
   d4538:	2100      	movs	r1, #0
   d453a:	4620      	mov	r0, r4
   d453c:	f007 fae6 	bl	dbb0c <memset>
    igh_default_thresholds.soil_moisture_low                = DEFAULT_SOIL_MOISTURE_LOW;                   
    igh_default_thresholds.air_humidity_low                 = DEFAULT_AIR_HUMIDITY_LOW;                     
    igh_default_thresholds.soil_humidity_low                = DEFAULT_SOIL_HUMIDITY_LOW;                   
   d4540:	233c      	movs	r3, #60	; 0x3c
   d4542:	80e3      	strh	r3, [r4, #6]
    igh_default_thresholds.soil_temperature_low             = DEFAULT_SOIL_TEMPERATURE_LOW;             
    igh_default_thresholds.soil_npk_low                     = DEFAULT_SOIL_NPK_LOW;                             
    igh_default_thresholds.light_intensity_low              = DEFAULT_LIGHT_INTENSITY_LOW;               
    igh_default_thresholds.shield_battery_level_low         = DEFAULT_SHIELD_BATTERY_LEVEL_LOW;     
    igh_default_thresholds.spear_battery_level_low          = DEFAULT_SPEAR_BATTERY_LEVEL_LOW;      
    igh_default_thresholds.water_dispensed_period_low       = DEFAULT_WATER_DISPENSED_PERIOD_LOW;
   d4544:	2364      	movs	r3, #100	; 0x64
   d4546:	61a3      	str	r3, [r4, #24]
    // Low Threshold Trigger
    igh_default_thresholds.soil_moisture_high               = DEFAULT_SOIL_MOISTURE_HIGH;                 
   d4548:	23ff      	movs	r3, #255	; 0xff
   d454a:	83a3      	strh	r3, [r4, #28]
    igh_default_thresholds.air_humidity_high                = DEFAULT_AIR_HUMIDITY_HIGH;                   
   d454c:	83e3      	strh	r3, [r4, #30]
    igh_default_thresholds.soil_humidity_high               = DEFAULT_SOIL_HUMIDITY_HIGH;                 
   d454e:	225a      	movs	r2, #90	; 0x5a
    igh_default_thresholds.carbon_dioxide_high              = DEFAULT_CARBON_DIOXIDE_HIGH;        
   d4550:	8463      	strh	r3, [r4, #34]	; 0x22
    igh_default_thresholds.air_temperature_high             = DEFAULT_AIR_TEMPERATURE_HIGH;             
   d4552:	84a3      	strh	r3, [r4, #36]	; 0x24
    igh_default_thresholds.soil_temperature_high            = DEFAULT_SOIL_TEMPERATURE_HIGH;           
   d4554:	84e3      	strh	r3, [r4, #38]	; 0x26
    igh_default_thresholds.soil_npk_high                    = DEFAULT_SOIL_NPK_HIGH;                           
   d4556:	8523      	strh	r3, [r4, #40]	; 0x28
    igh_default_thresholds.light_intensity_high             = DEFAULT_LIGHT_INTENSITY_HIGH;             
   d4558:	8563      	strh	r3, [r4, #42]	; 0x2a
    igh_default_thresholds.shield_battery_level_high        = DEFAULT_SHIELD_BATTERY_LEVEL_HIGH;   
   d455a:	85a3      	strh	r3, [r4, #44]	; 0x2c
    igh_default_thresholds.spear_battery_level_high         = DEFAULT_SPEAR_BATTERY_LEVEL_HIGH;     
   d455c:	85e3      	strh	r3, [r4, #46]	; 0x2e
    igh_default_thresholds.water_dispensed_period_high      = DEFAULT_WATER_DISPENSED_PERIOD_HIGH;
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));
   d455e:	2134      	movs	r1, #52	; 0x34
    igh_default_thresholds.soil_temperature_high            = DEFAULT_SOIL_TEMPERATURE_HIGH;           
    igh_default_thresholds.soil_npk_high                    = DEFAULT_SOIL_NPK_HIGH;                           
    igh_default_thresholds.light_intensity_high             = DEFAULT_LIGHT_INTENSITY_HIGH;             
    igh_default_thresholds.shield_battery_level_high        = DEFAULT_SHIELD_BATTERY_LEVEL_HIGH;   
    igh_default_thresholds.spear_battery_level_high         = DEFAULT_SPEAR_BATTERY_LEVEL_HIGH;     
    igh_default_thresholds.water_dispensed_period_high      = DEFAULT_WATER_DISPENSED_PERIOD_HIGH;
   d4560:	f44f 7348 	mov.w	r3, #800	; 0x320
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));
   d4564:	4620      	mov	r0, r4
    igh_default_thresholds.spear_battery_level_low          = DEFAULT_SPEAR_BATTERY_LEVEL_LOW;      
    igh_default_thresholds.water_dispensed_period_low       = DEFAULT_WATER_DISPENSED_PERIOD_LOW;
    // Low Threshold Trigger
    igh_default_thresholds.soil_moisture_high               = DEFAULT_SOIL_MOISTURE_HIGH;                 
    igh_default_thresholds.air_humidity_high                = DEFAULT_AIR_HUMIDITY_HIGH;                   
    igh_default_thresholds.soil_humidity_high               = DEFAULT_SOIL_HUMIDITY_HIGH;                 
   d4566:	8422      	strh	r2, [r4, #32]
    igh_default_thresholds.soil_temperature_high            = DEFAULT_SOIL_TEMPERATURE_HIGH;           
    igh_default_thresholds.soil_npk_high                    = DEFAULT_SOIL_NPK_HIGH;                           
    igh_default_thresholds.light_intensity_high             = DEFAULT_LIGHT_INTENSITY_HIGH;             
    igh_default_thresholds.shield_battery_level_high        = DEFAULT_SHIELD_BATTERY_LEVEL_HIGH;   
    igh_default_thresholds.spear_battery_level_high         = DEFAULT_SPEAR_BATTERY_LEVEL_HIGH;     
    igh_default_thresholds.water_dispensed_period_high      = DEFAULT_WATER_DISPENSED_PERIOD_HIGH;
   d4568:	6323      	str	r3, [r4, #48]	; 0x30
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));
   d456a:	f7ff ff6d 	bl	d4448 <igh_settings_calculate_checksum>
}

void igh_settings_reset_system_to_default(void)
{
    igh_settings_get_defaults();
    igh_current_system_settings = igh_default_system_settings;
   d456e:	2248      	movs	r2, #72	; 0x48
    igh_default_thresholds.soil_npk_high                    = DEFAULT_SOIL_NPK_HIGH;                           
    igh_default_thresholds.light_intensity_high             = DEFAULT_LIGHT_INTENSITY_HIGH;             
    igh_default_thresholds.shield_battery_level_high        = DEFAULT_SHIELD_BATTERY_LEVEL_HIGH;   
    igh_default_thresholds.spear_battery_level_high         = DEFAULT_SPEAR_BATTERY_LEVEL_HIGH;     
    igh_default_thresholds.water_dispensed_period_high      = DEFAULT_WATER_DISPENSED_PERIOD_HIGH;
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));
   d4570:	7020      	strb	r0, [r4, #0]
}

void igh_settings_reset_system_to_default(void)
{
    igh_settings_get_defaults();
    igh_current_system_settings = igh_default_system_settings;
   d4572:	490c      	ldr	r1, [pc, #48]	; (d45a4 <igh_settings_reset_system_to_default+0xd8>)
   d4574:	4638      	mov	r0, r7
   d4576:	f007 fabe 	bl	dbaf6 <memcpy>
    igh_current_threshold_settings = igh_default_thresholds;
   d457a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d457c:	4635      	mov	r5, r6
   d457e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4580:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4582:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4584:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4586:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4588:	6823      	ldr	r3, [r4, #0]
   d458a:	602b      	str	r3, [r5, #0]
    // update the checksum of the system settings
    igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
   d458c:	2148      	movs	r1, #72	; 0x48
   d458e:	4638      	mov	r0, r7
   d4590:	f7ff ff5a 	bl	d4448 <igh_settings_calculate_checksum>
    // update the checksum for the threshold settings
    igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
   d4594:	2134      	movs	r1, #52	; 0x34
{
    igh_settings_get_defaults();
    igh_current_system_settings = igh_default_system_settings;
    igh_current_threshold_settings = igh_default_thresholds;
    // update the checksum of the system settings
    igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
   d4596:	7038      	strb	r0, [r7, #0]
    // update the checksum for the threshold settings
    igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
   d4598:	4630      	mov	r0, r6
   d459a:	f7ff ff55 	bl	d4448 <igh_settings_calculate_checksum>
   d459e:	7030      	strb	r0, [r6, #0]
   d45a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d45a2:	bf00      	nop
   d45a4:	2003e6a8 	.word	0x2003e6a8
   d45a8:	2003d7df 	.word	0x2003d7df
   d45ac:	2003d7cd 	.word	0x2003d7cd
   d45b0:	2003e5cc 	.word	0x2003e5cc
   d45b4:	2003e604 	.word	0x2003e604
   d45b8:	2003e650 	.word	0x2003e650

000d45bc <igh_message_process_incoming_msg>:
 * \brief Process incoming messages and action them repsectively
 * \param ack_msg incoimng message byte array
 * \return true or false
 */
uint8_t igh_message_process_incoming_msg(uint8_t * buffer)
{
   d45bc:	b538      	push	{r3, r4, r5, lr}
    igh_msg_type message_type = UNKNOWN_MSG;
    uint8_t length = buffer[LEN_INDEX]; // get the length
   d45be:	7843      	ldrb	r3, [r0, #1]
 * \brief Process incoming messages and action them repsectively
 * \param ack_msg incoimng message byte array
 * \return true or false
 */
uint8_t igh_message_process_incoming_msg(uint8_t * buffer)
{
   d45c0:	4604      	mov	r4, r0
    igh_msg_type message_type = UNKNOWN_MSG;
    uint8_t length = buffer[LEN_INDEX]; // get the length

    if(length <= 0) // prevent any messages with zero length from being processed
   d45c2:	b33b      	cbz	r3, d4614 <igh_message_process_incoming_msg+0x58>
    {
        return message_type;    
    }

    if( (buffer[0] == FRAME_START) && (buffer[length-1] == FRAME_END) )
   d45c4:	7802      	ldrb	r2, [r0, #0]
   d45c6:	2a3c      	cmp	r2, #60	; 0x3c
   d45c8:	d124      	bne.n	d4614 <igh_message_process_incoming_msg+0x58>
   d45ca:	4403      	add	r3, r0
   d45cc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d45d0:	2b3e      	cmp	r3, #62	; 0x3e
   d45d2:	d11f      	bne.n	d4614 <igh_message_process_incoming_msg+0x58>
    {
        // check the serial number
        if( 0 != memcmp(boron_serial_number, &buffer[SN_INDEX], sizeof(boron_serial_number)))
   d45d4:	1d01      	adds	r1, r0, #4
   d45d6:	220c      	movs	r2, #12
   d45d8:	4810      	ldr	r0, [pc, #64]	; (d461c <igh_message_process_incoming_msg+0x60>)
   d45da:	f007 fa7d 	bl	dbad8 <memcmp>
   d45de:	b9c8      	cbnz	r0, d4614 <igh_message_process_incoming_msg+0x58>
            // if the serial number does not match, do nothing as this message wasn't meant for this device,
            // This ideally should never happen
        }
        else
        {
            if( MSG_ACK == buffer[MSG_TYPE_INDEX] )
   d45e0:	78a5      	ldrb	r5, [r4, #2]
   d45e2:	2d41      	cmp	r5, #65	; 0x41
   d45e4:	d110      	bne.n	d4608 <igh_message_process_incoming_msg+0x4c>
LOCAL uint8_t igh_message_process_ACK(uint8_t * ack_msg)
{
    // get the ACK tuple id
    igh_pkt_id _ack_id = (igh_pkt_id)ack_msg[PAYLOAD_INDEX];

    if( (MSG_ACK_TUPLE != _ack_id) || (SIZE_OF_MSG_ACK_TUPLE != ack_msg[PAYLOAD_INDEX + 1]) )
   d45e6:	7c63      	ldrb	r3, [r4, #17]
   d45e8:	4a0d      	ldr	r2, [pc, #52]	; (d4620 <igh_message_process_incoming_msg+0x64>)
   d45ea:	b913      	cbnz	r3, d45f2 <igh_message_process_incoming_msg+0x36>
   d45ec:	7ca3      	ldrb	r3, [r4, #18]
   d45ee:	2b01      	cmp	r3, #1
   d45f0:	d002      	beq.n	d45f8 <igh_message_process_incoming_msg+0x3c>
    {
        upload_igh_message_id--;
   d45f2:	7813      	ldrb	r3, [r2, #0]
   d45f4:	3b01      	subs	r3, #1
   d45f6:	e005      	b.n	d4604 <igh_message_process_incoming_msg+0x48>
        return 0;
    }

    uint8_t acked_msd_id = ack_msg[PAYLOAD_INDEX + 2];
    uint8_t sent_message_id = upload_igh_message_id - 1; // the message id will have been incremented after the last send
   d45f8:	7813      	ldrb	r3, [r2, #0]
    if (acked_msd_id != sent_message_id)
   d45fa:	7ce1      	ldrb	r1, [r4, #19]
        upload_igh_message_id--;
        return 0;
    }

    uint8_t acked_msd_id = ack_msg[PAYLOAD_INDEX + 2];
    uint8_t sent_message_id = upload_igh_message_id - 1; // the message id will have been incremented after the last send
   d45fc:	3b01      	subs	r3, #1
   d45fe:	b2db      	uxtb	r3, r3
    if (acked_msd_id != sent_message_id)
   d4600:	4299      	cmp	r1, r3
   d4602:	d008      	beq.n	d4616 <igh_message_process_incoming_msg+0x5a>
    {
        upload_igh_message_id--; // roll back to send the previous message
   d4604:	7013      	strb	r3, [r2, #0]
   d4606:	e005      	b.n	d4614 <igh_message_process_incoming_msg+0x58>
                if(igh_message_process_ACK(buffer))
                {
                    message_type = MSG_ACK;
                }
            }
            else if( SETTINGS_MSG == buffer[MSG_TYPE_INDEX] )
   d4608:	2d53      	cmp	r5, #83	; 0x53
   d460a:	d103      	bne.n	d4614 <igh_message_process_incoming_msg+0x58>
            {
                // process settings here
                if(igh_settings_process_settings(buffer))
   d460c:	4620      	mov	r0, r4
   d460e:	f7ff ff4b 	bl	d44a8 <igh_settings_process_settings>
   d4612:	b900      	cbnz	r0, d4616 <igh_message_process_incoming_msg+0x5a>
 * \param ack_msg incoimng message byte array
 * \return true or false
 */
uint8_t igh_message_process_incoming_msg(uint8_t * buffer)
{
    igh_msg_type message_type = UNKNOWN_MSG;
   d4614:	2500      	movs	r5, #0
        // if there is no frame start or no frame end, do nothing and return zer0
        // This may mean the length was wrong or the message was corrupted
    }

    return message_type; // should return the extracted tuple id for processing later
}
   d4616:	4628      	mov	r0, r5
   d4618:	bd38      	pop	{r3, r4, r5, pc}
   d461a:	bf00      	nop
   d461c:	2003e69c 	.word	0x2003e69c
   d4620:	2003d8be 	.word	0x2003d8be

000d4624 <setup>:

/* Run Application routine */
void setup() 
{
    // setup application
    igh_app_setup();
   d4624:	f000 b85c 	b.w	d46e0 <_Z13igh_app_setupv>

000d4628 <loop>:
}

void loop() 
{
    // run main app
    igh_main_application();
   d4628:	f000 bc3e 	b.w	d4ea8 <_Z20igh_main_applicationv>

000d462c <_GLOBAL__sub_I_setup>:
}
   d462c:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d462e:	f004 f85f 	bl	d86f0 <HAL_Pin_Map>
#include "particle_api/igh_log.h"
#endif

#include "include/igh_app.h"

SYSTEM_THREAD(ENABLED);
   d4632:	2100      	movs	r1, #0
   d4634:	2001      	movs	r0, #1

void loop() 
{
    // run main app
    igh_main_application();
}
   d4636:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#include "particle_api/igh_log.h"
#endif

#include "include/igh_app.h"

SYSTEM_THREAD(ENABLED);
   d463a:	f004 baf1 	b.w	d8c20 <system_thread_set_state>
	...

000d4640 <_Z19igh_app_log_servicev.part.1>:
        }
    }
    return ret;
}

void igh_app_log_service( void )
   d4640:	b510      	push	{r4, lr}
{
    if( (millis() - log_service_timer) > ONE_SECOND )
    {
        // throttle sending data
        // Serial.print(".");
        if( 1 == mqtt_connected )
   d4642:	4b21      	ldr	r3, [pc, #132]	; (d46c8 <_Z19igh_app_log_servicev.part.1+0x88>)
   d4644:	781b      	ldrb	r3, [r3, #0]
   d4646:	2b01      	cmp	r3, #1
        }
    }
    return ret;
}

void igh_app_log_service( void )
   d4648:	b0c8      	sub	sp, #288	; 0x120
{
    if( (millis() - log_service_timer) > ONE_SECOND )
    {
        // throttle sending data
        // Serial.print(".");
        if( 1 == mqtt_connected )
   d464a:	d136      	bne.n	d46ba <_Z19igh_app_log_servicev.part.1+0x7a>
        {
            char next_file[FILE_NAME_SIZE];
            if( true == igh_sd_log_get_next_file_name(next_file) )
   d464c:	4668      	mov	r0, sp
   d464e:	f001 faab 	bl	d5ba8 <_Z29igh_sd_log_get_next_file_namePc>
   d4652:	2801      	cmp	r0, #1
   d4654:	d131      	bne.n	d46ba <_Z19igh_app_log_servicev.part.1+0x7a>
            {
                uint8_t sd_data_point[MAX_FILE_SIZE];
                if( true == igh_sd_log_read_data_point(next_file, sd_data_point, MAX_FILE_SIZE) )
   d4656:	22ff      	movs	r2, #255	; 0xff
   d4658:	a908      	add	r1, sp, #32
   d465a:	4668      	mov	r0, sp
   d465c:	f001 fa64 	bl	d5b28 <_Z26igh_sd_log_read_data_pointPcPhh>
   d4660:	2801      	cmp	r0, #1
   d4662:	d12a      	bne.n	d46ba <_Z19igh_app_log_servicev.part.1+0x7a>
                {
                    Serial.print("Uploading: "); Serial.print((String)next_file);
   d4664:	f005 fb92 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4668:	4918      	ldr	r1, [pc, #96]	; (d46cc <_Z19igh_app_log_servicev.part.1+0x8c>)
   d466a:	f004 fe6f 	bl	d934c <_ZN5Print5printEPKc>
   d466e:	f005 fb8d 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4672:	4669      	mov	r1, sp
   d4674:	4604      	mov	r4, r0
   d4676:	a804      	add	r0, sp, #16
   d4678:	f004 fdbb 	bl	d91f2 <_ZN6StringC1EPK19__FlashStringHelper>
   d467c:	9904      	ldr	r1, [sp, #16]
   d467e:	4620      	mov	r0, r4
   d4680:	f004 fe64 	bl	d934c <_ZN5Print5printEPKc>
   d4684:	a804      	add	r0, sp, #16
   d4686:	f004 fd6d 	bl	d9164 <_ZN6StringD1Ev>
                    //     if( sd_data_point[i] <= 0x0F ) Serial.print("0");
                    //     Serial.print( sd_data_point[i], HEX );
                    // }
                    // Serial.println("}");

                    if( true == igh_mqtt_publish_data(sd_data_point, sd_data_point[1]) )
   d468a:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
   d468e:	a808      	add	r0, sp, #32
   d4690:	f000 fd2e 	bl	d50f0 <_Z21igh_mqtt_publish_dataPhj>
   d4694:	b160      	cbz	r0, d46b0 <_Z19igh_app_log_servicev.part.1+0x70>
                    {
                        if( true == igh_sd_log_remove_data_point(next_file) ) 
   d4696:	4668      	mov	r0, sp
   d4698:	f001 fa40 	bl	d5b1c <_Z28igh_sd_log_remove_data_pointPc>
   d469c:	2801      	cmp	r0, #1
   d469e:	d103      	bne.n	d46a8 <_Z19igh_app_log_servicev.part.1+0x68>
                        {
                            Serial.println(" OK");
   d46a0:	f005 fb74 	bl	d9d8c <_Z16_fetch_usbserialv>
   d46a4:	490a      	ldr	r1, [pc, #40]	; (d46d0 <_Z19igh_app_log_servicev.part.1+0x90>)
   d46a6:	e006      	b.n	d46b6 <_Z19igh_app_log_servicev.part.1+0x76>
                        }
                        else
                        {
                            Serial.println(" DEL ERROR");
   d46a8:	f005 fb70 	bl	d9d8c <_Z16_fetch_usbserialv>
   d46ac:	4909      	ldr	r1, [pc, #36]	; (d46d4 <_Z19igh_app_log_servicev.part.1+0x94>)
   d46ae:	e002      	b.n	d46b6 <_Z19igh_app_log_servicev.part.1+0x76>
                        }
                    }
                    else
                    {
                        Serial.println(" MQTT ERROR");
   d46b0:	f005 fb6c 	bl	d9d8c <_Z16_fetch_usbserialv>
   d46b4:	4908      	ldr	r1, [pc, #32]	; (d46d8 <_Z19igh_app_log_servicev.part.1+0x98>)
   d46b6:	f004 fe5c 	bl	d9372 <_ZN5Print7printlnEPKc>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d46ba:	f004 f8e1 	bl	d8880 <HAL_Timer_Get_Milli_Seconds>
            {
                // Serial.println("No new file to send");
            }
        }

        log_service_timer = millis();
   d46be:	4b07      	ldr	r3, [pc, #28]	; (d46dc <_Z19igh_app_log_servicev.part.1+0x9c>)
   d46c0:	6018      	str	r0, [r3, #0]
    }
}
   d46c2:	b048      	add	sp, #288	; 0x120
   d46c4:	bd10      	pop	{r4, pc}
   d46c6:	bf00      	nop
   d46c8:	2003d951 	.word	0x2003d951
   d46cc:	000dcdac 	.word	0x000dcdac
   d46d0:	000dcdb8 	.word	0x000dcdb8
   d46d4:	000dcdbc 	.word	0x000dcdbc
   d46d8:	000dcdc7 	.word	0x000dcdc7
   d46dc:	2003d8c0 	.word	0x2003d8c0

000d46e0 <_Z13igh_app_setupv>:
void igh_app_log_service( void );
void igh_app_get_temperature_and_humidity( uint8_t * incoming_data );
uint16_t igh_app_calculate_humidity( uint16_t temperature, uint16_t humidity );

void igh_app_setup( void )
{
   d46e0:	b508      	push	{r3, lr}
    Serial.begin(19200);
   d46e2:	f005 fb53 	bl	d9d8c <_Z16_fetch_usbserialv>
   d46e6:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
   d46ea:	f005 fb43 	bl	d9d74 <_ZN9USBSerial5beginEl>
    
    igh_boron_setup();
   d46ee:	f001 fb29 	bl	d5d44 <_Z15igh_boron_setupv>

    // setup hardwar
    igh_hardware_setup();
   d46f2:	f000 ff69 	bl	d55c8 <_Z18igh_hardware_setupv>
    
    // get settings from eeprom
    igh_eeprom_init();
   d46f6:	f000 fddd 	bl	d52b4 <_Z15igh_eeprom_initv>
    
    // starte the radio
    igh_rfm69_setup();
   d46fa:	f001 fbb3 	bl	d5e64 <_Z15igh_rfm69_setupv>
    
    // setup MQTT
    igh_mqtt_setup();
   d46fe:	f000 fc2d 	bl	d4f5c <_Z14igh_mqtt_setupv>

    // setup the SD card
    igh_sd_log_setup();
}
   d4702:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    
    // setup MQTT
    igh_mqtt_setup();

    // setup the SD card
    igh_sd_log_setup();
   d4706:	f001 b93f 	b.w	d5988 <_Z16igh_sd_log_setupv>
	...

000d470c <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir>:
uint8_t igh_app_add_message_header( uint8_t *_buffer, uint8_t start, igh_msg_type msg_type, igh_msg_dir dir )
{
    uint8_t i = start;

    // Add Message type
    _buffer[i++] = ERROR_MSG;
   d470c:	2345      	movs	r3, #69	; 0x45
        device_restart = false;
    }
}

uint8_t igh_app_add_message_header( uint8_t *_buffer, uint8_t start, igh_msg_type msg_type, igh_msg_dir dir )
{
   d470e:	b530      	push	{r4, r5, lr}
    uint8_t i = start;

    // Add Message type
    _buffer[i++] = ERROR_MSG;
   d4710:	5443      	strb	r3, [r0, r1]

    // Add direction
    _buffer[i++] = IGH_UPLOAD;
   d4712:	1c4b      	adds	r3, r1, #1
   d4714:	b2db      	uxtb	r3, r3
   d4716:	2255      	movs	r2, #85	; 0x55
   d4718:	54c2      	strb	r2, [r0, r3]

    // Add shield serial number
    memcpy( &_buffer[i], 
            boron_serial_number, 
            sizeof(boron_serial_number) );
   d471a:	4c0b      	ldr	r4, [pc, #44]	; (d4748 <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir+0x3c>)
   d471c:	1c8a      	adds	r2, r1, #2
   d471e:	b2d2      	uxtb	r2, r2
   d4720:	6823      	ldr	r3, [r4, #0]
   d4722:	5083      	str	r3, [r0, r2]
   d4724:	1885      	adds	r5, r0, r2
   d4726:	6863      	ldr	r3, [r4, #4]
   d4728:	606b      	str	r3, [r5, #4]
   d472a:	68a3      	ldr	r3, [r4, #8]
   d472c:	60ab      	str	r3, [r5, #8]

    i += sizeof(boron_serial_number);

    // Add incremental message ID
    static uint8_t message_id = 0;
    _buffer[i++] = message_id++;
   d472e:	4b07      	ldr	r3, [pc, #28]	; (d474c <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir+0x40>)
   d4730:	781a      	ldrb	r2, [r3, #0]
   d4732:	1c54      	adds	r4, r2, #1
   d4734:	701c      	strb	r4, [r3, #0]
   d4736:	f101 030e 	add.w	r3, r1, #14
   d473a:	b2db      	uxtb	r3, r3
   d473c:	54c2      	strb	r2, [r0, r3]

    return i;
   d473e:	f101 000f 	add.w	r0, r1, #15
}
   d4742:	b2c0      	uxtb	r0, r0
   d4744:	bd30      	pop	{r4, r5, pc}
   d4746:	bf00      	nop
   d4748:	2003e69c 	.word	0x2003e69c
   d474c:	2003d8bf 	.word	0x2003d8bf

000d4750 <_Z19igh_app_add_payloadPhhS_h>:

uint8_t igh_app_add_payload( uint8_t *_buffer, uint8_t start, uint8_t * _payload, uint8_t _payload_len )
{
   d4750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4754:	460c      	mov	r4, r1
   d4756:	4605      	mov	r5, r0
   d4758:	4699      	mov	r9, r3
   d475a:	4617      	mov	r7, r2
    uint32_t timestamp_to_store = igh_boron_unix_time();
   d475c:	f001 fade 	bl	d5d1c <_Z19igh_boron_unix_timev>
   d4760:	4680      	mov	r8, r0
    float battery_soc_float = igh_boron_SoC();
   d4762:	f001 fadd 	bl	d5d20 <_Z13igh_boron_SoCv>
    memcpy(&battery_soc, &battery_soc_float, sizeof battery_soc);

    uint8_t i = start;

    // Add DATA PKT PID
    _buffer[i++] = DATA_PKT;
   d4766:	23fe      	movs	r3, #254	; 0xfe
   d4768:	552b      	strb	r3, [r5, r4]
    i++; // leave room for payload length

    // Add Shield ID
    _buffer[i++] = SHIELD_ID;
   d476a:	1ca3      	adds	r3, r4, #2
   d476c:	b2db      	uxtb	r3, r3
   d476e:	2217      	movs	r2, #23
   d4770:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = sizeof(boron_serial_number);
   d4772:	1ce3      	adds	r3, r4, #3
   d4774:	b2db      	uxtb	r3, r3
   d4776:	220c      	movs	r2, #12
   d4778:	54ea      	strb	r2, [r5, r3]
    memcpy(&_buffer[i], igh_current_system_settings.serial_number, sizeof(igh_current_system_settings.serial_number) );
   d477a:	4b47      	ldr	r3, [pc, #284]	; (d4898 <_Z19igh_app_add_payloadPhhS_h+0x148>)
   d477c:	1d22      	adds	r2, r4, #4
   d477e:	cb03      	ldmia	r3!, {r0, r1}
   d4780:	b2d2      	uxtb	r2, r2
   d4782:	eb05 0e02 	add.w	lr, r5, r2
   d4786:	50a8      	str	r0, [r5, r2]
   d4788:	f8ce 1004 	str.w	r1, [lr, #4]
   d478c:	6818      	ldr	r0, [r3, #0]
   d478e:	f8ce 0008 	str.w	r0, [lr, #8]
    i += sizeof(boron_serial_number);

    // Add Timestamp
    _buffer[i++] = STORE_TIMESTAMP;
   d4792:	f104 0310 	add.w	r3, r4, #16
   d4796:	b2db      	uxtb	r3, r3
   d4798:	2202      	movs	r2, #2
   d479a:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = SIZE_OF_STORE_TIMESTAMP;
   d479c:	f104 0311 	add.w	r3, r4, #17
   d47a0:	b2db      	uxtb	r3, r3
   d47a2:	2204      	movs	r2, #4
   d47a4:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)timestamp_to_store;
   d47a6:	f104 0312 	add.w	r3, r4, #18
   d47aa:	b2db      	uxtb	r3, r3
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 8);
   d47ac:	ea4f 2118 	mov.w	r1, r8, lsr #8
    i += sizeof(boron_serial_number);

    // Add Timestamp
    _buffer[i++] = STORE_TIMESTAMP;
    _buffer[i++] = SIZE_OF_STORE_TIMESTAMP;
    _buffer[i++] = (uint8_t)timestamp_to_store;
   d47b0:	f805 8003 	strb.w	r8, [r5, r3]
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 8);
   d47b4:	f104 0313 	add.w	r3, r4, #19
   d47b8:	b2db      	uxtb	r3, r3
uint8_t igh_app_add_payload( uint8_t *_buffer, uint8_t start, uint8_t * _payload, uint8_t _payload_len )
{
    uint32_t timestamp_to_store = igh_boron_unix_time();
    float battery_soc_float = igh_boron_SoC();
    uint32_t battery_soc;
    memcpy(&battery_soc, &battery_soc_float, sizeof battery_soc);
   d47ba:	ee10 6a10 	vmov	r6, s0

    // Add Timestamp
    _buffer[i++] = STORE_TIMESTAMP;
    _buffer[i++] = SIZE_OF_STORE_TIMESTAMP;
    _buffer[i++] = (uint8_t)timestamp_to_store;
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 8);
   d47be:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 16);
   d47c0:	f104 0314 	add.w	r3, r4, #20
   d47c4:	b2db      	uxtb	r3, r3
   d47c6:	ea4f 4118 	mov.w	r1, r8, lsr #16
   d47ca:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 24);
   d47cc:	f104 0315 	add.w	r3, r4, #21
   d47d0:	b2db      	uxtb	r3, r3
   d47d2:	ea4f 6818 	mov.w	r8, r8, lsr #24
   d47d6:	f805 8003 	strb.w	r8, [r5, r3]

    // Add Shield battery level
    _buffer[i++] = SHIELD_BATTERY_LEVEL;
   d47da:	f104 0316 	add.w	r3, r4, #22
   d47de:	b2db      	uxtb	r3, r3
   d47e0:	210d      	movs	r1, #13
   d47e2:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = SIZE_OF_SHIELD_BATTERY_LEVEL;
   d47e4:	f104 0317 	add.w	r3, r4, #23
   d47e8:	b2db      	uxtb	r3, r3
    _buffer[i++] = (uint8_t)battery_soc;
    _buffer[i++] = (uint8_t)( battery_soc >> 8);
   d47ea:	0a31      	lsrs	r1, r6, #8
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 16);
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 24);

    // Add Shield battery level
    _buffer[i++] = SHIELD_BATTERY_LEVEL;
    _buffer[i++] = SIZE_OF_SHIELD_BATTERY_LEVEL;
   d47ec:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)battery_soc;
   d47ee:	f104 0318 	add.w	r3, r4, #24
   d47f2:	b2db      	uxtb	r3, r3
    _buffer[i++] = current_valve_position;

    // Add water dispensed 
    uint32_t curr_water_L = 0;
    memcpy( &curr_water_L, &total_water_dispensed_Liters, sizeof curr_water_L );
    _buffer[i++] = WATER_DISPENSED;
   d47f4:	2007      	movs	r0, #7
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 24);

    // Add Shield battery level
    _buffer[i++] = SHIELD_BATTERY_LEVEL;
    _buffer[i++] = SIZE_OF_SHIELD_BATTERY_LEVEL;
    _buffer[i++] = (uint8_t)battery_soc;
   d47f6:	54ee      	strb	r6, [r5, r3]
    _buffer[i++] = (uint8_t)( battery_soc >> 8);
   d47f8:	f104 0319 	add.w	r3, r4, #25
   d47fc:	b2db      	uxtb	r3, r3
   d47fe:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = (uint8_t)( battery_soc >> 16);
   d4800:	f104 031a 	add.w	r3, r4, #26
   d4804:	b2db      	uxtb	r3, r3
   d4806:	0c31      	lsrs	r1, r6, #16
   d4808:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = (uint8_t)( battery_soc >> 24);
   d480a:	f104 031b 	add.w	r3, r4, #27
   d480e:	b2db      	uxtb	r3, r3
   d4810:	0e36      	lsrs	r6, r6, #24
   d4812:	54ee      	strb	r6, [r5, r3]

    // Add Valve position
    _buffer[i++] = VALVE_POSITION;
   d4814:	f104 031c 	add.w	r3, r4, #28
   d4818:	b2db      	uxtb	r3, r3
   d481a:	210f      	movs	r1, #15
   d481c:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = SIZE_OF_VALVE_POSITION;
   d481e:	f104 031d 	add.w	r3, r4, #29
   d4822:	b2db      	uxtb	r3, r3
   d4824:	2101      	movs	r1, #1
   d4826:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = current_valve_position;
   d4828:	4b1c      	ldr	r3, [pc, #112]	; (d489c <_Z19igh_app_add_payloadPhhS_h+0x14c>)
   d482a:	7819      	ldrb	r1, [r3, #0]
   d482c:	f104 031e 	add.w	r3, r4, #30
   d4830:	b2db      	uxtb	r3, r3
   d4832:	54e9      	strb	r1, [r5, r3]

    // Add water dispensed 
    uint32_t curr_water_L = 0;
    memcpy( &curr_water_L, &total_water_dispensed_Liters, sizeof curr_water_L );
   d4834:	4b1a      	ldr	r3, [pc, #104]	; (d48a0 <_Z19igh_app_add_payloadPhhS_h+0x150>)
   d4836:	6819      	ldr	r1, [r3, #0]
    _buffer[i++] = WATER_DISPENSED;
   d4838:	f104 031f 	add.w	r3, r4, #31
   d483c:	b2db      	uxtb	r3, r3
   d483e:	54e8      	strb	r0, [r5, r3]
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
   d4840:	f104 0320 	add.w	r3, r4, #32
   d4844:	b2db      	uxtb	r3, r3
    _buffer[i++] = (uint8_t)curr_water_L;
    _buffer[i++] = (uint8_t)( curr_water_L >> 8);
    _buffer[i++] = (uint8_t)( curr_water_L >> 16);
    _buffer[i++] = (uint8_t)( curr_water_L >> 24);
   d4846:	f104 0025 	add.w	r0, r4, #37	; 0x25

    // Add water dispensed 
    uint32_t curr_water_L = 0;
    memcpy( &curr_water_L, &total_water_dispensed_Liters, sizeof curr_water_L );
    _buffer[i++] = WATER_DISPENSED;
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
   d484a:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)curr_water_L;
   d484c:	f104 0321 	add.w	r3, r4, #33	; 0x21
   d4850:	b2db      	uxtb	r3, r3
    _buffer[i++] = (uint8_t)( curr_water_L >> 8);
   d4852:	0a0a      	lsrs	r2, r1, #8
    // Add water dispensed 
    uint32_t curr_water_L = 0;
    memcpy( &curr_water_L, &total_water_dispensed_Liters, sizeof curr_water_L );
    _buffer[i++] = WATER_DISPENSED;
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
    _buffer[i++] = (uint8_t)curr_water_L;
   d4854:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = (uint8_t)( curr_water_L >> 8);
   d4856:	f104 0322 	add.w	r3, r4, #34	; 0x22
   d485a:	b2db      	uxtb	r3, r3
    _buffer[i++] = (uint8_t)( curr_water_L >> 16);
    _buffer[i++] = (uint8_t)( curr_water_L >> 24);
   d485c:	b2c0      	uxtb	r0, r0
    uint32_t curr_water_L = 0;
    memcpy( &curr_water_L, &total_water_dispensed_Liters, sizeof curr_water_L );
    _buffer[i++] = WATER_DISPENSED;
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
    _buffer[i++] = (uint8_t)curr_water_L;
    _buffer[i++] = (uint8_t)( curr_water_L >> 8);
   d485e:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)( curr_water_L >> 16);
   d4860:	f104 0323 	add.w	r3, r4, #35	; 0x23
   d4864:	b2db      	uxtb	r3, r3
   d4866:	0c0a      	lsrs	r2, r1, #16
   d4868:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)( curr_water_L >> 24);
   d486a:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d486e:	b2db      	uxtb	r3, r3

    // only add payload if the package fits, prevvent memory leak
    if( (_payload_len + i + 1) < MESSAGE_SIZE )
   d4870:	eb09 0600 	add.w	r6, r9, r0
    _buffer[i++] = WATER_DISPENSED;
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
    _buffer[i++] = (uint8_t)curr_water_L;
    _buffer[i++] = (uint8_t)( curr_water_L >> 8);
    _buffer[i++] = (uint8_t)( curr_water_L >> 16);
    _buffer[i++] = (uint8_t)( curr_water_L >> 24);
   d4874:	0e09      	lsrs	r1, r1, #24

    // only add payload if the package fits, prevvent memory leak
    if( (_payload_len + i + 1) < MESSAGE_SIZE )
   d4876:	2efd      	cmp	r6, #253	; 0xfd
    _buffer[i++] = WATER_DISPENSED;
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
    _buffer[i++] = (uint8_t)curr_water_L;
    _buffer[i++] = (uint8_t)( curr_water_L >> 8);
    _buffer[i++] = (uint8_t)( curr_water_L >> 16);
    _buffer[i++] = (uint8_t)( curr_water_L >> 24);
   d4878:	54e9      	strb	r1, [r5, r3]

    // only add payload if the package fits, prevvent memory leak
    if( (_payload_len + i + 1) < MESSAGE_SIZE )
   d487a:	dc05      	bgt.n	d4888 <_Z19igh_app_add_payloadPhhS_h+0x138>
    {
        memcpy(&_buffer[i], _payload, _payload_len);
   d487c:	464a      	mov	r2, r9
   d487e:	4639      	mov	r1, r7
   d4880:	4428      	add	r0, r5
   d4882:	f007 f938 	bl	dbaf6 <memcpy>
        i += _payload_len;
   d4886:	b2f0      	uxtb	r0, r6
    }

    // add the payload length
    _buffer[ start + 1 ] = i - start - 2;
   d4888:	4425      	add	r5, r4
   d488a:	f1c4 04fe 	rsb	r4, r4, #254	; 0xfe
   d488e:	4404      	add	r4, r0
   d4890:	706c      	strb	r4, [r5, #1]

    return i;
}
   d4892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4896:	bf00      	nop
   d4898:	2003e61c 	.word	0x2003e61c
   d489c:	2003e64c 	.word	0x2003e64c
   d48a0:	2003d9b4 	.word	0x2003d9b4

000d48a4 <_Z27igh_app_send_device_restartv>:
        igh_boron_toggle_boron_led(OFF);
    }
}

void igh_app_send_device_restart( void )
{
   d48a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t current_time = igh_boron_unix_time();

    // only ssave a restart message if the time is synced. Otherwise wait till that happens
    if( (true == device_restart)
   d48a6:	4e19      	ldr	r6, [pc, #100]	; (d490c <_Z27igh_app_send_device_restartv+0x68>)
    }
}

void igh_app_send_device_restart( void )
{
    uint32_t current_time = igh_boron_unix_time();
   d48a8:	f001 fa38 	bl	d5d1c <_Z19igh_boron_unix_timev>

    // only ssave a restart message if the time is synced. Otherwise wait till that happens
    if( (true == device_restart)
   d48ac:	7835      	ldrb	r5, [r6, #0]
   d48ae:	2d01      	cmp	r5, #1
    }
}

void igh_app_send_device_restart( void )
{
    uint32_t current_time = igh_boron_unix_time();
   d48b0:	4607      	mov	r7, r0

    // only ssave a restart message if the time is synced. Otherwise wait till that happens
    if( (true == device_restart)
   d48b2:	d128      	bne.n	d4906 <_Z27igh_app_send_device_restartv+0x62>
        && (JAN_01_2020 < current_time) )
   d48b4:	4b16      	ldr	r3, [pc, #88]	; (d4910 <_Z27igh_app_send_device_restartv+0x6c>)
   d48b6:	4298      	cmp	r0, r3
   d48b8:	d925      	bls.n	d4906 <_Z27igh_app_send_device_restartv+0x62>
    {
        uint8_t i = 0; // keep track of pkt data
        uint8_t restart_msg[3];

        // first clear the buffer
        memset( igh_msg_buffer, 0, sizeof(igh_msg_buffer) );
   d48ba:	4c16      	ldr	r4, [pc, #88]	; (d4914 <_Z27igh_app_send_device_restartv+0x70>)
   d48bc:	22ff      	movs	r2, #255	; 0xff
   d48be:	2100      	movs	r1, #0
   d48c0:	4620      	mov	r0, r4
   d48c2:	f007 f923 	bl	dbb0c <memset>

        // Add Retart Message
        restart_msg[0] = RESTART;
   d48c6:	23fd      	movs	r3, #253	; 0xfd
   d48c8:	f88d 3004 	strb.w	r3, [sp, #4]
        restart_msg[1] = SIZE_OF_RESTART;
        restart_msg[2] = true;

        // Add frame start
        igh_msg_buffer[i++] = FRAME_START;
   d48cc:	233c      	movs	r3, #60	; 0x3c
   d48ce:	7023      	strb	r3, [r4, #0]
        i++; // leave room for pkg length

        i = igh_app_add_message_header( igh_msg_buffer, i, ERROR_MSG, IGH_UPLOAD );
   d48d0:	2245      	movs	r2, #69	; 0x45
   d48d2:	2355      	movs	r3, #85	; 0x55
   d48d4:	2102      	movs	r1, #2
   d48d6:	4620      	mov	r0, r4
        // first clear the buffer
        memset( igh_msg_buffer, 0, sizeof(igh_msg_buffer) );

        // Add Retart Message
        restart_msg[0] = RESTART;
        restart_msg[1] = SIZE_OF_RESTART;
   d48d8:	f88d 5005 	strb.w	r5, [sp, #5]
        restart_msg[2] = true;
   d48dc:	f88d 5006 	strb.w	r5, [sp, #6]

        // Add frame start
        igh_msg_buffer[i++] = FRAME_START;
        i++; // leave room for pkg length

        i = igh_app_add_message_header( igh_msg_buffer, i, ERROR_MSG, IGH_UPLOAD );
   d48e0:	f7ff ff14 	bl	d470c <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir>
        i = igh_app_add_payload( igh_msg_buffer, i, restart_msg, sizeof(restart_msg) );
   d48e4:	2303      	movs	r3, #3
   d48e6:	4601      	mov	r1, r0
   d48e8:	aa01      	add	r2, sp, #4
   d48ea:	4620      	mov	r0, r4
   d48ec:	f7ff ff30 	bl	d4750 <_Z19igh_app_add_payloadPhhS_h>

        // Add Frame End 
        igh_msg_buffer[i++] = FRAME_END;
   d48f0:	233e      	movs	r3, #62	; 0x3e
   d48f2:	1c42      	adds	r2, r0, #1
   d48f4:	5423      	strb	r3, [r4, r0]
   d48f6:	b2d2      	uxtb	r2, r2
        //     Serial.print(igh_msg_buffer[k], HEX);
        // }
        // Serial.print("}\n");

        // save restart message
        igh_sd_log_save_data_point( (unsigned long)current_time, igh_msg_buffer, i );
   d48f8:	4621      	mov	r1, r4
   d48fa:	4638      	mov	r0, r7
        i = igh_app_add_payload( igh_msg_buffer, i, restart_msg, sizeof(restart_msg) );

        // Add Frame End 
        igh_msg_buffer[i++] = FRAME_END;

        igh_msg_buffer[1] = i; // add length
   d48fc:	7062      	strb	r2, [r4, #1]
        //     Serial.print(igh_msg_buffer[k], HEX);
        // }
        // Serial.print("}\n");

        // save restart message
        igh_sd_log_save_data_point( (unsigned long)current_time, igh_msg_buffer, i );
   d48fe:	f001 f8a3 	bl	d5a48 <_Z26igh_sd_log_save_data_pointmPhh>

        device_restart = false;
   d4902:	2300      	movs	r3, #0
   d4904:	7033      	strb	r3, [r6, #0]
    }
}
   d4906:	b003      	add	sp, #12
   d4908:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d490a:	bf00      	nop
   d490c:	2003d7eb 	.word	0x2003d7eb
   d4910:	5e0be100 	.word	0x5e0be100
   d4914:	2003e6f1 	.word	0x2003e6f1

000d4918 <_Z27igh_app_get_serial_hex_dataPhh>:
        new_settings_available = 0;
    }
}

uint8_t igh_app_get_serial_hex_data( uint8_t * buffer, uint8_t len )
{
   d4918:	b570      	push	{r4, r5, r6, lr}
   d491a:	460d      	mov	r5, r1
   d491c:	4606      	mov	r6, r0
    uint8_t ret = 0;

    uint8_t bytes_available = Serial.available();
   d491e:	f005 fa35 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4922:	6803      	ldr	r3, [r0, #0]
   d4924:	691b      	ldr	r3, [r3, #16]
   d4926:	4798      	blx	r3
   d4928:	b2c4      	uxtb	r4, r0
    if( bytes_available > 0 )
   d492a:	b90c      	cbnz	r4, d4930 <_Z27igh_app_get_serial_hex_dataPhh+0x18>
    }
}

uint8_t igh_app_get_serial_hex_data( uint8_t * buffer, uint8_t len )
{
    uint8_t ret = 0;
   d492c:	2400      	movs	r4, #0
   d492e:	e019      	b.n	d4964 <_Z27igh_app_get_serial_hex_dataPhh+0x4c>

    uint8_t bytes_available = Serial.available();
    if( bytes_available > 0 )
    {
        if( bytes_available <= len )
   d4930:	42ac      	cmp	r4, r5
   d4932:	d80c      	bhi.n	d494e <_Z27igh_app_get_serial_hex_dataPhh+0x36>
   d4934:	4635      	mov	r5, r6
        {
            for( uint8_t i = 0; i < bytes_available; i++ )
            {
                // read all available bytes
                buffer[i] = Serial.read();
   d4936:	f005 fa29 	bl	d9d8c <_Z16_fetch_usbserialv>
   d493a:	6803      	ldr	r3, [r0, #0]
   d493c:	695b      	ldr	r3, [r3, #20]
   d493e:	4798      	blx	r3
   d4940:	f805 0b01 	strb.w	r0, [r5], #1
    uint8_t bytes_available = Serial.available();
    if( bytes_available > 0 )
    {
        if( bytes_available <= len )
        {
            for( uint8_t i = 0; i < bytes_available; i++ )
   d4944:	1bab      	subs	r3, r5, r6
   d4946:	b2db      	uxtb	r3, r3
   d4948:	429c      	cmp	r4, r3
   d494a:	d8f4      	bhi.n	d4936 <_Z27igh_app_get_serial_hex_dataPhh+0x1e>
   d494c:	e00a      	b.n	d4964 <_Z27igh_app_get_serial_hex_dataPhh+0x4c>
   d494e:	2500      	movs	r5, #0
        else
        {
            for( uint8_t i = 0; i < bytes_available; i++ )
            {
                // dump the data
                Serial.read();
   d4950:	f005 fa1c 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4954:	6803      	ldr	r3, [r0, #0]
   d4956:	3501      	adds	r5, #1
   d4958:	695b      	ldr	r3, [r3, #20]
   d495a:	4798      	blx	r3
            }
            ret = bytes_available;
        }
        else
        {
            for( uint8_t i = 0; i < bytes_available; i++ )
   d495c:	b2eb      	uxtb	r3, r5
   d495e:	429c      	cmp	r4, r3
   d4960:	d8f6      	bhi.n	d4950 <_Z27igh_app_get_serial_hex_dataPhh+0x38>
   d4962:	e7e3      	b.n	d492c <_Z27igh_app_get_serial_hex_dataPhh+0x14>
                Serial.read();
            }
        }
    }
    return ret;
}
   d4964:	4620      	mov	r0, r4
   d4966:	bd70      	pop	{r4, r5, r6, pc}

000d4968 <_Z24igh_app_get_new_settingsv>:

    return i;
}

void igh_app_get_new_settings( void )
{
   d4968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    memset( igh_msg_buffer, 0, sizeof(igh_msg_buffer) );
   d496a:	4c26      	ldr	r4, [pc, #152]	; (d4a04 <_Z24igh_app_get_new_settingsv+0x9c>)
   d496c:	22ff      	movs	r2, #255	; 0xff
   d496e:	2100      	movs	r1, #0
   d4970:	4620      	mov	r0, r4
   d4972:	f007 f8cb 	bl	dbb0c <memset>
    uint8_t rx_bytes = igh_app_get_serial_hex_data(igh_msg_buffer, sizeof(igh_msg_buffer));
   d4976:	21ff      	movs	r1, #255	; 0xff
   d4978:	4620      	mov	r0, r4
   d497a:	f7ff ffcd 	bl	d4918 <_Z27igh_app_get_serial_hex_dataPhh>
    if ( 0 < rx_bytes ) // via Serial
   d497e:	4606      	mov	r6, r0
   d4980:	2800      	cmp	r0, #0
   d4982:	d03e      	beq.n	d4a02 <_Z24igh_app_get_new_settingsv+0x9a>
    {

        Serial.print("SERIAL DATA SETTINGS --> {");
   d4984:	f005 fa02 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4988:	491f      	ldr	r1, [pc, #124]	; (d4a08 <_Z24igh_app_get_new_settingsv+0xa0>)
   d498a:	f004 fcdf 	bl	d934c <_ZN5Print5printEPKc>
   d498e:	1e77      	subs	r7, r6, #1
   d4990:	1e65      	subs	r5, r4, #1
   d4992:	4427      	add	r7, r4
        for( uint8_t k = 0; k < rx_bytes; k++ )
   d4994:	42bd      	cmp	r5, r7
   d4996:	d00f      	beq.n	d49b8 <_Z24igh_app_get_new_settingsv+0x50>
        {
            if( igh_msg_buffer[k] <= 0x0F ) Serial.print("0");
   d4998:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d499c:	2b0f      	cmp	r3, #15
   d499e:	d804      	bhi.n	d49aa <_Z24igh_app_get_new_settingsv+0x42>
   d49a0:	f005 f9f4 	bl	d9d8c <_Z16_fetch_usbserialv>
   d49a4:	4919      	ldr	r1, [pc, #100]	; (d4a0c <_Z24igh_app_get_new_settingsv+0xa4>)
   d49a6:	f004 fcd1 	bl	d934c <_ZN5Print5printEPKc>
            Serial.print(igh_msg_buffer[k], HEX);
   d49aa:	f005 f9ef 	bl	d9d8c <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d49ae:	2210      	movs	r2, #16
   d49b0:	7829      	ldrb	r1, [r5, #0]
   d49b2:	f004 fce8 	bl	d9386 <_ZN5Print11printNumberEmh>
    uint8_t rx_bytes = igh_app_get_serial_hex_data(igh_msg_buffer, sizeof(igh_msg_buffer));
    if ( 0 < rx_bytes ) // via Serial
    {

        Serial.print("SERIAL DATA SETTINGS --> {");
        for( uint8_t k = 0; k < rx_bytes; k++ )
   d49b6:	e7ed      	b.n	d4994 <_Z24igh_app_get_new_settingsv+0x2c>
        {
            if( igh_msg_buffer[k] <= 0x0F ) Serial.print("0");
            Serial.print(igh_msg_buffer[k], HEX);
        }
        Serial.print("}\n");
   d49b8:	f005 f9e8 	bl	d9d8c <_Z16_fetch_usbserialv>
   d49bc:	4914      	ldr	r1, [pc, #80]	; (d4a10 <_Z24igh_app_get_new_settingsv+0xa8>)
   d49be:	f004 fcc5 	bl	d934c <_ZN5Print5printEPKc>

        if( IGH_SEND_SETTINGS == igh_msg_buffer[0] )
   d49c2:	7823      	ldrb	r3, [r4, #0]
   d49c4:	2b10      	cmp	r3, #16
   d49c6:	d11c      	bne.n	d4a02 <_Z24igh_app_get_new_settingsv+0x9a>
        {
            if( true == igh_settings_process_settings_tuples( igh_msg_buffer, 2, rx_bytes) )
   d49c8:	4632      	mov	r2, r6
   d49ca:	2102      	movs	r1, #2
   d49cc:	480d      	ldr	r0, [pc, #52]	; (d4a04 <_Z24igh_app_get_new_settingsv+0x9c>)
   d49ce:	f7ff fb75 	bl	d40bc <igh_settings_process_settings_tuples>
   d49d2:	2801      	cmp	r0, #1
   d49d4:	d10e      	bne.n	d49f4 <_Z24igh_app_get_new_settingsv+0x8c>
            {
                new_settings_available = 1;
   d49d6:	4b0f      	ldr	r3, [pc, #60]	; (d4a14 <_Z24igh_app_get_new_settingsv+0xac>)
                // update the checksum of the system settings
                igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
   d49d8:	4c0f      	ldr	r4, [pc, #60]	; (d4a18 <_Z24igh_app_get_new_settingsv+0xb0>)

        if( IGH_SEND_SETTINGS == igh_msg_buffer[0] )
        {
            if( true == igh_settings_process_settings_tuples( igh_msg_buffer, 2, rx_bytes) )
            {
                new_settings_available = 1;
   d49da:	7018      	strb	r0, [r3, #0]
                // update the checksum of the system settings
                igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
   d49dc:	2148      	movs	r1, #72	; 0x48
   d49de:	4620      	mov	r0, r4
   d49e0:	f7ff fd32 	bl	d4448 <igh_settings_calculate_checksum>
   d49e4:	7020      	strb	r0, [r4, #0]
                // update the checksum for the threshold settings
                igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
   d49e6:	4c0d      	ldr	r4, [pc, #52]	; (d4a1c <_Z24igh_app_get_new_settingsv+0xb4>)
   d49e8:	2134      	movs	r1, #52	; 0x34
   d49ea:	4620      	mov	r0, r4
   d49ec:	f7ff fd2c 	bl	d4448 <igh_settings_calculate_checksum>
   d49f0:	7020      	strb	r0, [r4, #0]
   d49f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            }
            else
            {
                Serial.println("SETTINGS FAILED");
   d49f4:	f005 f9ca 	bl	d9d8c <_Z16_fetch_usbserialv>
   d49f8:	4909      	ldr	r1, [pc, #36]	; (d4a20 <_Z24igh_app_get_new_settingsv+0xb8>)
            }
            
        }
    }
}
   d49fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                // update the checksum for the threshold settings
                igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
            }
            else
            {
                Serial.println("SETTINGS FAILED");
   d49fe:	f004 bcb8 	b.w	d9372 <_ZN5Print7printlnEPKc>
   d4a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4a04:	2003e6f1 	.word	0x2003e6f1
   d4a08:	000dcdd3 	.word	0x000dcdd3
   d4a0c:	000dcdee 	.word	0x000dcdee
   d4a10:	000dcdf0 	.word	0x000dcdf0
   d4a14:	2003d8bc 	.word	0x2003d8bc
   d4a18:	2003e604 	.word	0x2003e604
   d4a1c:	2003e650 	.word	0x2003e650
   d4a20:	000dcdf3 	.word	0x000dcdf3

000d4a24 <_Z19igh_app_log_servicev>:
    }
    return ret;
}

void igh_app_log_service( void )
{
   d4a24:	b508      	push	{r3, lr}
   d4a26:	f003 ff2b 	bl	d8880 <HAL_Timer_Get_Milli_Seconds>
    if( (millis() - log_service_timer) > ONE_SECOND )
   d4a2a:	4b05      	ldr	r3, [pc, #20]	; (d4a40 <_Z19igh_app_log_servicev+0x1c>)
   d4a2c:	681b      	ldr	r3, [r3, #0]
   d4a2e:	1ac0      	subs	r0, r0, r3
   d4a30:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4a34:	d903      	bls.n	d4a3e <_Z19igh_app_log_servicev+0x1a>
            }
        }

        log_service_timer = millis();
    }
}
   d4a36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4a3a:	f7ff be01 	b.w	d4640 <_Z19igh_app_log_servicev.part.1>
   d4a3e:	bd08      	pop	{r3, pc}
   d4a40:	2003d8c0 	.word	0x2003d8c0
   d4a44:	00000000 	.word	0x00000000

000d4a48 <_Z26igh_app_calculate_humiditytt>:
        refreshed_soil_data = INVALID_SOIL_DATA;
    }   
}

uint16_t igh_app_calculate_humidity( uint16_t new_temperature, uint16_t new_humidity )
{
   d4a48:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   d4a4c:	ed2d 8b02 	vpush	{d8}
   d4a50:	4606      	mov	r6, r0
   d4a52:	b082      	sub	sp, #8
    double linearHumidity = SOIL_HUMIDITY_MULTIPLIER_C1 + SOIL_HUMIDITY_MULTIPLIER_C2 * new_humidity 
   d4a54:	4608      	mov	r0, r1
   d4a56:	f006 fb4f 	bl	db0f8 <__aeabi_i2d>
   d4a5a:	4604      	mov	r4, r0
                          + SOIL_HUMIDITY_MULTIPLIER_C3 * new_humidity * new_humidity;

    float temperature = SOIL_TEMPERATURE_MULTIPLIER_D1 
                      + SOIL_TEMPERATURE_MULTIPLIER_D2 * new_temperature;
   d4a5c:	4630      	mov	r0, r6
    }   
}

uint16_t igh_app_calculate_humidity( uint16_t new_temperature, uint16_t new_humidity )
{
    double linearHumidity = SOIL_HUMIDITY_MULTIPLIER_C1 + SOIL_HUMIDITY_MULTIPLIER_C2 * new_humidity 
   d4a5e:	460d      	mov	r5, r1
                          + SOIL_HUMIDITY_MULTIPLIER_C3 * new_humidity * new_humidity;

    float temperature = SOIL_TEMPERATURE_MULTIPLIER_D1 
                      + SOIL_TEMPERATURE_MULTIPLIER_D2 * new_temperature;
   d4a60:	f006 fb4a 	bl	db0f8 <__aeabi_i2d>
   d4a64:	a342      	add	r3, pc, #264	; (adr r3, d4b70 <_Z26igh_app_calculate_humiditytt+0x128>)
   d4a66:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4a6a:	f006 fbab 	bl	db1c4 <__aeabi_dmul>
   d4a6e:	a342      	add	r3, pc, #264	; (adr r3, d4b78 <_Z26igh_app_calculate_humiditytt+0x130>)
   d4a70:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4a74:	f006 f9f2 	bl	dae5c <__aeabi_dsub>
   d4a78:	f006 fe9c 	bl	db7b4 <__aeabi_d2f>

    float correctedHumidity = (temperature - ROOM_TEMPERATURE) * 
                              (SOIL_HUMIDITY_MULTIPLIER_T1 + SOIL_HUMIDITY_MULTIPLIER_T2 * new_humidity) 
                              + linearHumidity;
   d4a7c:	a340      	add	r3, pc, #256	; (adr r3, d4b80 <_Z26igh_app_calculate_humiditytt+0x138>)
   d4a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
{
    double linearHumidity = SOIL_HUMIDITY_MULTIPLIER_C1 + SOIL_HUMIDITY_MULTIPLIER_C2 * new_humidity 
                          + SOIL_HUMIDITY_MULTIPLIER_C3 * new_humidity * new_humidity;

    float temperature = SOIL_TEMPERATURE_MULTIPLIER_D1 
                      + SOIL_TEMPERATURE_MULTIPLIER_D2 * new_temperature;
   d4a82:	4606      	mov	r6, r0

    float correctedHumidity = (temperature - ROOM_TEMPERATURE) * 
                              (SOIL_HUMIDITY_MULTIPLIER_T1 + SOIL_HUMIDITY_MULTIPLIER_T2 * new_humidity) 
                              + linearHumidity;
   d4a84:	4629      	mov	r1, r5
   d4a86:	4620      	mov	r0, r4
   d4a88:	f006 fb9c 	bl	db1c4 <__aeabi_dmul>
   d4a8c:	a33e      	add	r3, pc, #248	; (adr r3, d4b88 <_Z26igh_app_calculate_humiditytt+0x140>)
   d4a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4a92:	f006 f9e3 	bl	dae5c <__aeabi_dsub>
   d4a96:	a33e      	add	r3, pc, #248	; (adr r3, d4b90 <_Z26igh_app_calculate_humiditytt+0x148>)
   d4a98:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4a9c:	4680      	mov	r8, r0
   d4a9e:	4689      	mov	r9, r1
   d4aa0:	4620      	mov	r0, r4
   d4aa2:	4629      	mov	r1, r5
   d4aa4:	f006 fb8e 	bl	db1c4 <__aeabi_dmul>
   d4aa8:	4622      	mov	r2, r4
   d4aaa:	462b      	mov	r3, r5
   d4aac:	f006 fb8a 	bl	db1c4 <__aeabi_dmul>
   d4ab0:	4602      	mov	r2, r0
   d4ab2:	460b      	mov	r3, r1
   d4ab4:	4640      	mov	r0, r8
   d4ab6:	4649      	mov	r1, r9
   d4ab8:	f006 f9d2 	bl	dae60 <__adddf3>
   d4abc:	a336      	add	r3, pc, #216	; (adr r3, d4b98 <_Z26igh_app_calculate_humiditytt+0x150>)
   d4abe:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4ac2:	4680      	mov	r8, r0
   d4ac4:	4689      	mov	r9, r1
   d4ac6:	4620      	mov	r0, r4
   d4ac8:	4629      	mov	r1, r5
   d4aca:	f006 fb7b 	bl	db1c4 <__aeabi_dmul>
   d4ace:	a328      	add	r3, pc, #160	; (adr r3, d4b70 <_Z26igh_app_calculate_humiditytt+0x128>)
   d4ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4ad4:	f006 f9c4 	bl	dae60 <__adddf3>
   d4ad8:	4604      	mov	r4, r0
   d4ada:	4630      	mov	r0, r6
   d4adc:	460d      	mov	r5, r1
   d4ade:	f006 fb1d 	bl	db11c <__aeabi_f2d>
   d4ae2:	2200      	movs	r2, #0
   d4ae4:	4b1e      	ldr	r3, [pc, #120]	; (d4b60 <_Z26igh_app_calculate_humiditytt+0x118>)
   d4ae6:	f006 f9b9 	bl	dae5c <__aeabi_dsub>
   d4aea:	4602      	mov	r2, r0
   d4aec:	460b      	mov	r3, r1
   d4aee:	4620      	mov	r0, r4
   d4af0:	4629      	mov	r1, r5
   d4af2:	f006 fb67 	bl	db1c4 <__aeabi_dmul>
   d4af6:	4602      	mov	r2, r0
   d4af8:	460b      	mov	r3, r1
   d4afa:	4640      	mov	r0, r8
   d4afc:	4649      	mov	r1, r9
   d4afe:	f006 f9af 	bl	dae60 <__adddf3>
   d4b02:	f006 fe57 	bl	db7b4 <__aeabi_d2f>
   d4b06:	ee08 0a10 	vmov	s16, r0

    Serial.print("TEMPERATURE: "); Serial.print(temperature);
   d4b0a:	f005 f93f 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4b0e:	4915      	ldr	r1, [pc, #84]	; (d4b64 <_Z26igh_app_calculate_humiditytt+0x11c>)
   d4b10:	f004 fc1c 	bl	d934c <_ZN5Print5printEPKc>
   d4b14:	f005 f93a 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4b18:	ee00 6a10 	vmov	s0, r6
   d4b1c:	2102      	movs	r1, #2
   d4b1e:	f004 fd11 	bl	d9544 <_ZN5Print5printEfi>
    Serial.print("C HUMIDITY: "); Serial.print(correctedHumidity);
   d4b22:	f005 f933 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4b26:	4910      	ldr	r1, [pc, #64]	; (d4b68 <_Z26igh_app_calculate_humiditytt+0x120>)
   d4b28:	f004 fc10 	bl	d934c <_ZN5Print5printEPKc>
   d4b2c:	f005 f92e 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4b30:	eeb0 0a48 	vmov.f32	s0, s16
   d4b34:	2102      	movs	r1, #2
   d4b36:	f004 fd05 	bl	d9544 <_ZN5Print5printEfi>
    Serial.println("%");
   d4b3a:	f005 f927 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4b3e:	490b      	ldr	r1, [pc, #44]	; (d4b6c <_Z26igh_app_calculate_humiditytt+0x124>)
   d4b40:	f004 fc17 	bl	d9372 <_ZN5Print7printlnEPKc>

    // offload the decimal places
    return (uint16_t)correctedHumidity;
   d4b44:	eefc 7ac8 	vcvt.u32.f32	s15, s16
   d4b48:	edcd 7a01 	vstr	s15, [sp, #4]
}
   d4b4c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   d4b50:	b002      	add	sp, #8
   d4b52:	ecbd 8b02 	vpop	{d8}
   d4b56:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   d4b5a:	bf00      	nop
   d4b5c:	f3af 8000 	nop.w
   d4b60:	40390000 	.word	0x40390000
   d4b64:	000dce03 	.word	0x000dce03
   d4b68:	000dce11 	.word	0x000dce11
   d4b6c:	000dce1e 	.word	0x000dce1e
   d4b70:	47ae147b 	.word	0x47ae147b
   d4b74:	3f847ae1 	.word	0x3f847ae1
   d4b78:	e147ae14 	.word	0xe147ae14
   d4b7c:	4043d47a 	.word	0x4043d47a
   d4b80:	a786c227 	.word	0xa786c227
   d4b84:	3fa2ca57 	.word	0x3fa2ca57
   d4b88:	adab9f56 	.word	0xadab9f56
   d4b8c:	40005fd8 	.word	0x40005fd8
   d4b90:	d2ff5e1d 	.word	0xd2ff5e1d
   d4b94:	bebad603 	.word	0xbebad603
   d4b98:	88e368f1 	.word	0x88e368f1
   d4b9c:	3f14f8b5 	.word	0x3f14f8b5

000d4ba0 <_Z36igh_app_get_temperature_and_humidityPh>:
        log_service_timer = millis();
    }
}

void igh_app_get_temperature_and_humidity( uint8_t * incoming_data )
{
   d4ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t current_tuple_length = 0;
    uint8_t current_data_index = 0;
    uint8_t byte_tracker = 2;

    uint16_t new_temperature = 0xFFFF;
    uint16_t new_humidity = 0xFFFF;
   d4ba2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    bool valid_temerature = false;
    bool valid_humidity = false;
   d4ba6:	2500      	movs	r5, #0
        log_service_timer = millis();
    }
}

void igh_app_get_temperature_and_humidity( uint8_t * incoming_data )
{
   d4ba8:	4604      	mov	r4, r0
    uint8_t data_len = incoming_data[1];
   d4baa:	7846      	ldrb	r6, [r0, #1]
    uint8_t current_data_index = 0;
    uint8_t byte_tracker = 2;

    uint16_t new_temperature = 0xFFFF;
    uint16_t new_humidity = 0xFFFF;
    bool valid_temerature = false;
   d4bac:	46ae      	mov	lr, r5
    uint8_t current_tuple_id = 0;
    uint8_t current_tuple_length = 0;
    uint8_t current_data_index = 0;
    uint8_t byte_tracker = 2;

    uint16_t new_temperature = 0xFFFF;
   d4bae:	4608      	mov	r0, r1
{
    uint8_t data_len = incoming_data[1];
    uint8_t current_tuple_id = 0;
    uint8_t current_tuple_length = 0;
    uint8_t current_data_index = 0;
    uint8_t byte_tracker = 2;
   d4bb0:	2702      	movs	r7, #2
    uint16_t new_temperature = 0xFFFF;
    uint16_t new_humidity = 0xFFFF;
    bool valid_temerature = false;
    bool valid_humidity = false;

    while(byte_tracker < data_len)
   d4bb2:	42b7      	cmp	r7, r6
   d4bb4:	d223      	bcs.n	d4bfe <_Z36igh_app_get_temperature_and_humidityPh+0x5e>
        // extract the length
        current_tuple_length = incoming_data[byte_tracker + 1];
        // extract the tuple data based on tuple id
        current_data_index = byte_tracker + 2;

        switch( current_tuple_id )
   d4bb6:	f814 c007 	ldrb.w	ip, [r4, r7]
    while(byte_tracker < data_len)
    {
        // extract tuples
        current_tuple_id = incoming_data[byte_tracker];
        // extract the length
        current_tuple_length = incoming_data[byte_tracker + 1];
   d4bba:	19e3      	adds	r3, r4, r7
        // extract the tuple data based on tuple id
        current_data_index = byte_tracker + 2;
   d4bbc:	1cba      	adds	r2, r7, #2

        switch( current_tuple_id )
   d4bbe:	f1bc 0f06 	cmp.w	ip, #6
    while(byte_tracker < data_len)
    {
        // extract tuples
        current_tuple_id = incoming_data[byte_tracker];
        // extract the length
        current_tuple_length = incoming_data[byte_tracker + 1];
   d4bc2:	785b      	ldrb	r3, [r3, #1]
        // extract the tuple data based on tuple id
        current_data_index = byte_tracker + 2;
   d4bc4:	b2d2      	uxtb	r2, r2

        switch( current_tuple_id )
   d4bc6:	d00d      	beq.n	d4be4 <_Z36igh_app_get_temperature_and_humidityPh+0x44>
   d4bc8:	f1bc 0f0a 	cmp.w	ip, #10
   d4bcc:	d113      	bne.n	d4bf6 <_Z36igh_app_get_temperature_and_humidityPh+0x56>
        {
            case SOIL_TEMPERATURE:
                if( SIZE_OF_SOIL_TEMPERATURE == current_tuple_length )
   d4bce:	2b02      	cmp	r3, #2
   d4bd0:	d111      	bne.n	d4bf6 <_Z36igh_app_get_temperature_and_humidityPh+0x56>
                {
                    uint8_t new_temperature_reading[SIZE_OF_SOIL_TEMPERATURE]; 
                    memcpy(new_temperature_reading, &incoming_data[current_data_index], SIZE_OF_SOIL_TEMPERATURE);
   d4bd2:	18a0      	adds	r0, r4, r2
                    new_temperature = GET16_LI(new_temperature_reading);
   d4bd4:	5ca2      	ldrb	r2, [r4, r2]
   d4bd6:	7840      	ldrb	r0, [r0, #1]
   d4bd8:	eb02 2000 	add.w	r0, r2, r0, lsl #8
   d4bdc:	b280      	uxth	r0, r0
                    valid_temerature = true;
   d4bde:	f04f 0e01 	mov.w	lr, #1
   d4be2:	e008      	b.n	d4bf6 <_Z36igh_app_get_temperature_and_humidityPh+0x56>
                    /* Do nothing */
                }
                break;
                
            case SOIL_HUMIDITY:
                if( SIZE_OF_SOIL_HUMIDITY == current_tuple_length )
   d4be4:	2b02      	cmp	r3, #2
   d4be6:	d106      	bne.n	d4bf6 <_Z36igh_app_get_temperature_and_humidityPh+0x56>
                {
                    uint8_t new_humidity_reading[SIZE_OF_SOIL_HUMIDITY]; 
                    memcpy(new_humidity_reading, &incoming_data[current_data_index], SIZE_OF_SOIL_HUMIDITY);
   d4be8:	18a1      	adds	r1, r4, r2
                    new_humidity = GET16_LI(new_humidity_reading);
   d4bea:	5ca2      	ldrb	r2, [r4, r2]
   d4bec:	7849      	ldrb	r1, [r1, #1]
   d4bee:	eb02 2101 	add.w	r1, r2, r1, lsl #8
   d4bf2:	b289      	uxth	r1, r1
                    valid_humidity = true;
   d4bf4:	2501      	movs	r5, #1
            default:
                /* Ignore other data */
                break;
        }
        // move index to next tuple id
        byte_tracker += current_tuple_length + TUPLE_HEADER_LEN;
   d4bf6:	1c9a      	adds	r2, r3, #2
   d4bf8:	18bb      	adds	r3, r7, r2
   d4bfa:	b2df      	uxtb	r7, r3
    uint16_t new_temperature = 0xFFFF;
    uint16_t new_humidity = 0xFFFF;
    bool valid_temerature = false;
    bool valid_humidity = false;

    while(byte_tracker < data_len)
   d4bfc:	e7d9      	b.n	d4bb2 <_Z36igh_app_get_temperature_and_humidityPh+0x12>
   d4bfe:	4b07      	ldr	r3, [pc, #28]	; (d4c1c <_Z36igh_app_get_temperature_and_humidityPh+0x7c>)
        // move index to next tuple id
        byte_tracker += current_tuple_length + TUPLE_HEADER_LEN;
    }


    if( true == valid_humidity &&
   d4c00:	b14d      	cbz	r5, d4c16 <_Z36igh_app_get_temperature_and_humidityPh+0x76>
   d4c02:	f1be 0f00 	cmp.w	lr, #0
   d4c06:	d006      	beq.n	d4c16 <_Z36igh_app_get_temperature_and_humidityPh+0x76>
        true == valid_temerature )
    {
        refreshed_soil_data = VALID_SOIL_DATA;
   d4c08:	22ff      	movs	r2, #255	; 0xff
   d4c0a:	701a      	strb	r2, [r3, #0]
        soil_humidity = igh_app_calculate_humidity(new_temperature, new_humidity);
   d4c0c:	f7ff ff1c 	bl	d4a48 <_Z26igh_app_calculate_humiditytt>
   d4c10:	4b03      	ldr	r3, [pc, #12]	; (d4c20 <_Z36igh_app_get_temperature_and_humidityPh+0x80>)
   d4c12:	8018      	strh	r0, [r3, #0]
   d4c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    else
    {
        refreshed_soil_data = INVALID_SOIL_DATA;
   d4c16:	2200      	movs	r2, #0
   d4c18:	701a      	strb	r2, [r3, #0]
   d4c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4c1c:	2003d98c 	.word	0x2003d98c
   d4c20:	2003d9b0 	.word	0x2003d9b0

000d4c24 <_ZN5Print7printlnImLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
   d4c24:	b538      	push	{r3, r4, r5, lr}
   d4c26:	4605      	mov	r5, r0

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   d4c28:	b922      	cbnz	r2, d4c34 <_ZN5Print7printlnImLi0EEEjT_i+0x10>
        return write(n);
   d4c2a:	6803      	ldr	r3, [r0, #0]
   d4c2c:	b2c9      	uxtb	r1, r1
   d4c2e:	689b      	ldr	r3, [r3, #8]
   d4c30:	4798      	blx	r3
   d4c32:	e002      	b.n	d4c3a <_ZN5Print7printlnImLi0EEEjT_i+0x16>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4c34:	b2d2      	uxtb	r2, r2
   d4c36:	f004 fba6 	bl	d9386 <_ZN5Print11printNumberEmh>
   d4c3a:	4604      	mov	r4, r0
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4c3c:	4628      	mov	r0, r5
   d4c3e:	f004 fb8c 	bl	d935a <_ZN5Print7printlnEv>
        return n;
    }
   d4c42:	4420      	add	r0, r4
   d4c44:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4c48 <_Z37igh_app_receive_and_stage_sensor_datav>:
    igh_hardware_service_valve_state();

}

void igh_app_receive_and_stage_sensor_data( void )
{
   d4c48:	b570      	push	{r4, r5, r6, lr}
   d4c4a:	b090      	sub	sp, #64	; 0x40
    uint8_t rx_buffer[RF69_MAX_DATA_LEN];
    uint8_t data_rx_len = 0;

    data_rx_len = igh_rfm69_receive_raw_bytes( rx_buffer, sizeof(rx_buffer) );
   d4c4c:	213d      	movs	r1, #61	; 0x3d
   d4c4e:	4668      	mov	r0, sp
   d4c50:	f001 f95e 	bl	d5f10 <_Z27igh_rfm69_receive_raw_bytesPhh>

    if( 0 != data_rx_len )
   d4c54:	4605      	mov	r5, r0
   d4c56:	b3c8      	cbz	r0, d4ccc <_Z37igh_app_receive_and_stage_sensor_datav+0x84>
        igh_app_get_temperature_and_humidity(rx_buffer);

        uint8_t i = 0; // keep track of pkt data

        // first clear the buffer
        memset( igh_msg_buffer, 0, sizeof(igh_msg_buffer) );
   d4c58:	4c1d      	ldr	r4, [pc, #116]	; (d4cd0 <_Z37igh_app_receive_and_stage_sensor_datav+0x88>)

    data_rx_len = igh_rfm69_receive_raw_bytes( rx_buffer, sizeof(rx_buffer) );

    if( 0 != data_rx_len )
    {
        igh_boron_toggle_boron_led(ON);
   d4c5a:	2001      	movs	r0, #1
   d4c5c:	f000 fc72 	bl	d5544 <_Z26igh_boron_toggle_boron_ledh>

        // read data needed by the shield
        igh_app_get_temperature_and_humidity(rx_buffer);
   d4c60:	4668      	mov	r0, sp
   d4c62:	f7ff ff9d 	bl	d4ba0 <_Z36igh_app_get_temperature_and_humidityPh>

        uint8_t i = 0; // keep track of pkt data

        // first clear the buffer
        memset( igh_msg_buffer, 0, sizeof(igh_msg_buffer) );
   d4c66:	22ff      	movs	r2, #255	; 0xff
   d4c68:	2100      	movs	r1, #0
   d4c6a:	4620      	mov	r0, r4
   d4c6c:	f006 ff4e 	bl	dbb0c <memset>

        // Add frame start
        igh_msg_buffer[i++] = FRAME_START;
   d4c70:	233c      	movs	r3, #60	; 0x3c
   d4c72:	7023      	strb	r3, [r4, #0]
        i++; // leave room for pkg length

        i = igh_app_add_message_header( igh_msg_buffer, i, ERROR_MSG, IGH_UPLOAD );
   d4c74:	2245      	movs	r2, #69	; 0x45
   d4c76:	2355      	movs	r3, #85	; 0x55
   d4c78:	2102      	movs	r1, #2
   d4c7a:	4620      	mov	r0, r4
   d4c7c:	f7ff fd46 	bl	d470c <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir>
        i = igh_app_add_payload( igh_msg_buffer, i, rx_buffer, data_rx_len );
   d4c80:	466a      	mov	r2, sp
   d4c82:	4601      	mov	r1, r0
   d4c84:	462b      	mov	r3, r5
   d4c86:	4620      	mov	r0, r4
   d4c88:	f7ff fd62 	bl	d4750 <_Z19igh_app_add_payloadPhhS_h>

        // Add Frame End 
        igh_msg_buffer[i++] = FRAME_END;
   d4c8c:	1c45      	adds	r5, r0, #1
   d4c8e:	233e      	movs	r3, #62	; 0x3e
   d4c90:	b2ed      	uxtb	r5, r5
   d4c92:	5423      	strb	r3, [r4, r0]

        igh_msg_buffer[1] = i; // add length
   d4c94:	7065      	strb	r5, [r4, #1]

        Serial.print("\nTIME: "); Serial.println(igh_boron_unix_time(), HEX);
   d4c96:	f005 f879 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4c9a:	490e      	ldr	r1, [pc, #56]	; (d4cd4 <_Z37igh_app_receive_and_stage_sensor_datav+0x8c>)
   d4c9c:	f004 fb56 	bl	d934c <_ZN5Print5printEPKc>
   d4ca0:	f005 f874 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4ca4:	4606      	mov	r6, r0
   d4ca6:	f001 f839 	bl	d5d1c <_Z19igh_boron_unix_timev>
   d4caa:	2210      	movs	r2, #16
   d4cac:	4601      	mov	r1, r0
   d4cae:	4630      	mov	r0, r6
   d4cb0:	f7ff ffb8 	bl	d4c24 <_ZN5Print7printlnImLi0EEEjT_i>
        //     Serial.print(igh_msg_buffer[k], HEX);
        // }
        // Serial.print("}\n");

        // publish the data or store it if the publish fails
        uint32_t current_time = igh_boron_unix_time();
   d4cb4:	f001 f832 	bl	d5d1c <_Z19igh_boron_unix_timev>
        
        // Log data only if the time is synced
        if( JAN_01_2020 < current_time )
   d4cb8:	4b07      	ldr	r3, [pc, #28]	; (d4cd8 <_Z37igh_app_receive_and_stage_sensor_datav+0x90>)
   d4cba:	4298      	cmp	r0, r3
   d4cbc:	d903      	bls.n	d4cc6 <_Z37igh_app_receive_and_stage_sensor_datav+0x7e>
        igh_sd_log_save_data_point( (unsigned long)current_time, igh_msg_buffer, i );
   d4cbe:	462a      	mov	r2, r5
   d4cc0:	4621      	mov	r1, r4
   d4cc2:	f000 fec1 	bl	d5a48 <_Z26igh_sd_log_save_data_pointmPhh>
        
        igh_boron_toggle_boron_led(OFF);
   d4cc6:	2000      	movs	r0, #0
   d4cc8:	f000 fc3c 	bl	d5544 <_Z26igh_boron_toggle_boron_ledh>
    }
}
   d4ccc:	b010      	add	sp, #64	; 0x40
   d4cce:	bd70      	pop	{r4, r5, r6, pc}
   d4cd0:	2003e6f1 	.word	0x2003e6f1
   d4cd4:	000dce20 	.word	0x000dce20
   d4cd8:	5e0be100 	.word	0x5e0be100

000d4cdc <_Z27igh_app_commit_new_settingsv>:
        }
    }
}

void igh_app_commit_new_settings( void )
{
   d4cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( 1 == new_settings_available )
   d4ce0:	4b5f      	ldr	r3, [pc, #380]	; (d4e60 <_Z27igh_app_commit_new_settingsv+0x184>)
   d4ce2:	781a      	ldrb	r2, [r3, #0]
   d4ce4:	2a01      	cmp	r2, #1
   d4ce6:	461f      	mov	r7, r3
   d4ce8:	f040 80b7 	bne.w	d4e5a <_Z27igh_app_commit_new_settingsv+0x17e>
    {
        Serial.print("OP STATE:"); Serial.println(igh_current_system_settings.op_state);
   d4cec:	f005 f84e 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4cf0:	495c      	ldr	r1, [pc, #368]	; (d4e64 <_Z27igh_app_commit_new_settingsv+0x188>)
   d4cf2:	4c5d      	ldr	r4, [pc, #372]	; (d4e68 <_Z27igh_app_commit_new_settingsv+0x18c>)
   d4cf4:	f004 fb2a 	bl	d934c <_ZN5Print5printEPKc>
   d4cf8:	f005 f848 	bl	d9d8c <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4cfc:	220a      	movs	r2, #10
   d4cfe:	7a61      	ldrb	r1, [r4, #9]
   d4d00:	4605      	mov	r5, r0
   d4d02:	f004 fb40 	bl	d9386 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4d06:	4628      	mov	r0, r5
   d4d08:	f004 fb27 	bl	d935a <_ZN5Print7printlnEv>
        Serial.print("REPORTING INTERVAL: "); Serial.println(igh_current_system_settings.reporting_interval);
   d4d0c:	f005 f83e 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4d10:	4956      	ldr	r1, [pc, #344]	; (d4e6c <_Z27igh_app_commit_new_settingsv+0x190>)
   d4d12:	f004 fb1b 	bl	d934c <_ZN5Print5printEPKc>
   d4d16:	f005 f839 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4d1a:	220a      	movs	r2, #10
   d4d1c:	6921      	ldr	r1, [r4, #16]
   d4d1e:	f7ff ff81 	bl	d4c24 <_ZN5Print7printlnImLi0EEEjT_i>
        Serial.print("DATA RESOLUTION: "); Serial.println(igh_current_system_settings.data_resolution);
   d4d22:	f005 f833 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4d26:	4952      	ldr	r1, [pc, #328]	; (d4e70 <_Z27igh_app_commit_new_settingsv+0x194>)
   d4d28:	f004 fb10 	bl	d934c <_ZN5Print5printEPKc>
   d4d2c:	f005 f82e 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4d30:	220a      	movs	r2, #10
   d4d32:	6961      	ldr	r1, [r4, #20]
   d4d34:	f7ff ff76 	bl	d4c24 <_ZN5Print7printlnImLi0EEEjT_i>
        Serial.print("SERIAL NUMBER: ");
   d4d38:	f005 f828 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4d3c:	494d      	ldr	r1, [pc, #308]	; (d4e74 <_Z27igh_app_commit_new_settingsv+0x198>)
   d4d3e:	f004 fb05 	bl	d934c <_ZN5Print5printEPKc>
   d4d42:	f104 0617 	add.w	r6, r4, #23
   d4d46:	f104 0823 	add.w	r8, r4, #35	; 0x23
   d4d4a:	4625      	mov	r5, r4
        for( uint8_t i = 0; i < sizeof(igh_default_system_settings.serial_number); i++ )
        {
            if( igh_current_system_settings.serial_number[i] <= 0x0F ) Serial.print("0");
   d4d4c:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   d4d50:	2b0f      	cmp	r3, #15
   d4d52:	d804      	bhi.n	d4d5e <_Z27igh_app_commit_new_settingsv+0x82>
   d4d54:	f005 f81a 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4d58:	4947      	ldr	r1, [pc, #284]	; (d4e78 <_Z27igh_app_commit_new_settingsv+0x19c>)
   d4d5a:	f004 faf7 	bl	d934c <_ZN5Print5printEPKc>
            Serial.print(igh_current_system_settings.serial_number[i], HEX);
   d4d5e:	f005 f815 	bl	d9d8c <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4d62:	2210      	movs	r2, #16
   d4d64:	7831      	ldrb	r1, [r6, #0]
   d4d66:	f004 fb0e 	bl	d9386 <_ZN5Print11printNumberEmh>
    {
        Serial.print("OP STATE:"); Serial.println(igh_current_system_settings.op_state);
        Serial.print("REPORTING INTERVAL: "); Serial.println(igh_current_system_settings.reporting_interval);
        Serial.print("DATA RESOLUTION: "); Serial.println(igh_current_system_settings.data_resolution);
        Serial.print("SERIAL NUMBER: ");
        for( uint8_t i = 0; i < sizeof(igh_default_system_settings.serial_number); i++ )
   d4d6a:	45b0      	cmp	r8, r6
   d4d6c:	d1ee      	bne.n	d4d4c <_Z27igh_app_commit_new_settingsv+0x70>
        {
            if( igh_current_system_settings.serial_number[i] <= 0x0F ) Serial.print("0");
            Serial.print(igh_current_system_settings.serial_number[i], HEX);
        }
        Serial.print("\n");
   d4d6e:	f005 f80d 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4d72:	4942      	ldr	r1, [pc, #264]	; (d4e7c <_Z27igh_app_commit_new_settingsv+0x1a0>)
   d4d74:	f004 faea 	bl	d934c <_ZN5Print5printEPKc>
        Serial.print("MQTT BROKER: "); Serial.println((char *)igh_current_system_settings.broker);
   d4d78:	f005 f808 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4d7c:	4940      	ldr	r1, [pc, #256]	; (d4e80 <_Z27igh_app_commit_new_settingsv+0x1a4>)
   d4d7e:	f004 fae5 	bl	d934c <_ZN5Print5printEPKc>
   d4d82:	f005 f803 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4d86:	493f      	ldr	r1, [pc, #252]	; (d4e84 <_Z27igh_app_commit_new_settingsv+0x1a8>)
   d4d88:	f004 faf3 	bl	d9372 <_ZN5Print7printlnEPKc>
        Serial.print("MQTT BROKER PORT: "); Serial.println(igh_current_system_settings.broker_port);
   d4d8c:	f004 fffe 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4d90:	493d      	ldr	r1, [pc, #244]	; (d4e88 <_Z27igh_app_commit_new_settingsv+0x1ac>)
   d4d92:	f004 fadb 	bl	d934c <_ZN5Print5printEPKc>
   d4d96:	f004 fff9 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4d9a:	220a      	movs	r2, #10
   d4d9c:	f8b5 1044 	ldrh.w	r1, [r5, #68]	; 0x44
   d4da0:	4604      	mov	r4, r0
   d4da2:	f004 faf0 	bl	d9386 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4da6:	4620      	mov	r0, r4
   d4da8:	f004 fad7 	bl	d935a <_ZN5Print7printlnEv>
        Serial.print("TIMEZONE: "); Serial.println(igh_current_system_settings.timezone);
   d4dac:	f004 ffee 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4db0:	4936      	ldr	r1, [pc, #216]	; (d4e8c <_Z27igh_app_commit_new_settingsv+0x1b0>)
   d4db2:	f004 facb 	bl	d934c <_ZN5Print5printEPKc>
   d4db6:	f004 ffe9 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4dba:	686c      	ldr	r4, [r5, #4]
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d4dbc:	2c00      	cmp	r4, #0
   d4dbe:	4606      	mov	r6, r0
   d4dc0:	da04      	bge.n	d4dcc <_Z27igh_app_commit_new_settingsv+0xf0>
            t = print('-');
   d4dc2:	212d      	movs	r1, #45	; 0x2d
   d4dc4:	f004 fac6 	bl	d9354 <_ZN5Print5printEc>
            val = -n;
   d4dc8:	4261      	negs	r1, r4
   d4dca:	e000      	b.n	d4dce <_Z27igh_app_commit_new_settingsv+0xf2>
        } else {
            val = n;
   d4dcc:	4621      	mov	r1, r4
        }
        return printNumber(val, base) + t;
   d4dce:	220a      	movs	r2, #10
   d4dd0:	4630      	mov	r0, r6
   d4dd2:	f004 fad8 	bl	d9386 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4dd6:	4630      	mov	r0, r6
   d4dd8:	f004 fabf 	bl	d935a <_ZN5Print7printlnEv>
        Serial.print("IRRIGATION HOUR: "); Serial.println(igh_current_system_settings.irrigation_hr);
   d4ddc:	f004 ffd6 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4de0:	492b      	ldr	r1, [pc, #172]	; (d4e90 <_Z27igh_app_commit_new_settingsv+0x1b4>)
   d4de2:	f004 fab3 	bl	d934c <_ZN5Print5printEPKc>
   d4de6:	f004 ffd1 	bl	d9d8c <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4dea:	220a      	movs	r2, #10
   d4dec:	7a29      	ldrb	r1, [r5, #8]
   d4dee:	4604      	mov	r4, r0
   d4df0:	f004 fac9 	bl	d9386 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4df4:	4620      	mov	r0, r4
   d4df6:	f004 fab0 	bl	d935a <_ZN5Print7printlnEv>
        Serial.print("VALVE OPEN PERIOD: "); Serial.println(igh_current_system_settings.water_dispenser_period);
   d4dfa:	f004 ffc7 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4dfe:	4925      	ldr	r1, [pc, #148]	; (d4e94 <_Z27igh_app_commit_new_settingsv+0x1b8>)
   d4e00:	f004 faa4 	bl	d934c <_ZN5Print5printEPKc>
   d4e04:	f004 ffc2 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4e08:	220a      	movs	r2, #10
   d4e0a:	68e9      	ldr	r1, [r5, #12]
   d4e0c:	f7ff ff0a 	bl	d4c24 <_ZN5Print7printlnImLi0EEEjT_i>
        Serial.print("CHECKSUM: "); Serial.println(igh_current_system_settings.checksum);
   d4e10:	f004 ffbc 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4e14:	4920      	ldr	r1, [pc, #128]	; (d4e98 <_Z27igh_app_commit_new_settingsv+0x1bc>)
   d4e16:	f004 fa99 	bl	d934c <_ZN5Print5printEPKc>
   d4e1a:	f004 ffb7 	bl	d9d8c <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4e1e:	220a      	movs	r2, #10
   d4e20:	7829      	ldrb	r1, [r5, #0]
   d4e22:	4604      	mov	r4, r0
   d4e24:	f004 faaf 	bl	d9386 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4e28:	4620      	mov	r0, r4
   d4e2a:	f004 fa96 	bl	d935a <_ZN5Print7printlnEv>

        if ( true == igh_eeprom_save_system_settings( &igh_current_system_settings) )
   d4e2e:	480e      	ldr	r0, [pc, #56]	; (d4e68 <_Z27igh_app_commit_new_settingsv+0x18c>)
   d4e30:	f000 fa05 	bl	d523e <_Z31igh_eeprom_save_system_settingsP15system_settings>
   d4e34:	2801      	cmp	r0, #1
   d4e36:	d104      	bne.n	d4e42 <_Z27igh_app_commit_new_settingsv+0x166>
        {
            Serial.println("System Settings Saved successfully");
   d4e38:	f004 ffa8 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4e3c:	4917      	ldr	r1, [pc, #92]	; (d4e9c <_Z27igh_app_commit_new_settingsv+0x1c0>)
   d4e3e:	f004 fa98 	bl	d9372 <_ZN5Print7printlnEPKc>
        }

        if ( true == igh_eeprom_save_threshold_settings( &igh_current_threshold_settings) )
   d4e42:	4817      	ldr	r0, [pc, #92]	; (d4ea0 <_Z27igh_app_commit_new_settingsv+0x1c4>)
   d4e44:	f000 fa94 	bl	d5370 <_Z34igh_eeprom_save_threshold_settingsP10thresholds>
   d4e48:	2801      	cmp	r0, #1
   d4e4a:	d104      	bne.n	d4e56 <_Z27igh_app_commit_new_settingsv+0x17a>
        {
            Serial.println("Threshold Settings Saved successfully");
   d4e4c:	f004 ff9e 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4e50:	4914      	ldr	r1, [pc, #80]	; (d4ea4 <_Z27igh_app_commit_new_settingsv+0x1c8>)
   d4e52:	f004 fa8e 	bl	d9372 <_ZN5Print7printlnEPKc>
        }

        new_settings_available = 0;
   d4e56:	2300      	movs	r3, #0
   d4e58:	703b      	strb	r3, [r7, #0]
   d4e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4e5e:	bf00      	nop
   d4e60:	2003d8bc 	.word	0x2003d8bc
   d4e64:	000dce28 	.word	0x000dce28
   d4e68:	2003e604 	.word	0x2003e604
   d4e6c:	000dce32 	.word	0x000dce32
   d4e70:	000dce47 	.word	0x000dce47
   d4e74:	000dce59 	.word	0x000dce59
   d4e78:	000dcdee 	.word	0x000dcdee
   d4e7c:	000dd2bd 	.word	0x000dd2bd
   d4e80:	000dce69 	.word	0x000dce69
   d4e84:	2003e628 	.word	0x2003e628
   d4e88:	000dce77 	.word	0x000dce77
   d4e8c:	000dce8a 	.word	0x000dce8a
   d4e90:	000dce95 	.word	0x000dce95
   d4e94:	000dcea7 	.word	0x000dcea7
   d4e98:	000dcebb 	.word	0x000dcebb
   d4e9c:	000dcec6 	.word	0x000dcec6
   d4ea0:	2003e650 	.word	0x2003e650
   d4ea4:	000dcee9 	.word	0x000dcee9

000d4ea8 <_Z20igh_main_applicationv>:
    // setup the SD card
    igh_sd_log_setup();
}

void igh_main_application( void )
{
   d4ea8:	b508      	push	{r3, lr}
    // check if there are any settings to read
    igh_app_get_new_settings();
   d4eaa:	f7ff fd5d 	bl	d4968 <_Z24igh_app_get_new_settingsv>

    // commit new settings if available
    igh_app_commit_new_settings();
   d4eae:	f7ff ff15 	bl	d4cdc <_Z27igh_app_commit_new_settingsv>

    // process boron service
    igh_boron_service();
   d4eb2:	f000 ff7b 	bl	d5dac <_Z17igh_boron_servicev>
    
    // Send or store device restart message
    igh_app_send_device_restart();
   d4eb6:	f7ff fcf5 	bl	d48a4 <_Z27igh_app_send_device_restartv>
    
    // Send or Store Spear data
    igh_app_receive_and_stage_sensor_data();
   d4eba:	f7ff fec5 	bl	d4c48 <_Z37igh_app_receive_and_stage_sensor_datav>

    // Run MQTT service in background
    igh_mqtt_service();
   d4ebe:	f000 f897 	bl	d4ff0 <_Z16igh_mqtt_servicev>

    // rfm69 service in the background
    igh_rfm69_service();
   d4ec2:	f001 f841 	bl	d5f48 <_Z17igh_rfm69_servicev>

    // manage data on SD card
    igh_app_log_service();
   d4ec6:	f7ff fdad 	bl	d4a24 <_Z19igh_app_log_servicev>

    // control the valve
    igh_hardware_service_valve_state();

}
   d4eca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

    // manage data on SD card
    igh_app_log_service();

    // control the valve
    igh_hardware_service_valve_state();
   d4ece:	f000 bb31 	b.w	d5534 <_Z32igh_hardware_service_valve_statev>

000d4ed2 <_GLOBAL__sub_I_log_service_timer>:
   d4ed2:	f003 bc0d 	b.w	d86f0 <HAL_Pin_Map>
	...

000d4ed8 <_Z13mqtt_callbackPcPhj>:

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);

void mqtt_callback(char* topic, byte* payload, unsigned int length) {
   d4ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    igh_msg_type msg_type = UNKNOWN_MSG;
    uint8_t p[length];
   d4edc:	1dd3      	adds	r3, r2, #7
   d4ede:	f023 0307 	bic.w	r3, r3, #7

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);

void mqtt_callback(char* topic, byte* payload, unsigned int length) {
   d4ee2:	af00      	add	r7, sp, #0
    igh_msg_type msg_type = UNKNOWN_MSG;
    uint8_t p[length];
   d4ee4:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(p, payload, length);
   d4ee8:	4668      	mov	r0, sp

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);

void mqtt_callback(char* topic, byte* payload, unsigned int length) {
   d4eea:	4690      	mov	r8, r2
    igh_msg_type msg_type = UNKNOWN_MSG;
    uint8_t p[length];
    memcpy(p, payload, length);
   d4eec:	f006 fe03 	bl	dbaf6 <memcpy>

    Serial.print("RECEIVED MSG: ");
   d4ef0:	f004 ff4c 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4ef4:	4916      	ldr	r1, [pc, #88]	; (d4f50 <_Z13mqtt_callbackPcPhj+0x78>)
   d4ef6:	f004 fa29 	bl	d934c <_ZN5Print5printEPKc>
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);

void mqtt_callback(char* topic, byte* payload, unsigned int length) {
    igh_msg_type msg_type = UNKNOWN_MSG;
    uint8_t p[length];
   d4efa:	466c      	mov	r4, sp
    memcpy(p, payload, length);

    Serial.print("RECEIVED MSG: ");
   d4efc:	2500      	movs	r5, #0
    for( uint8_t i = 0; i < length; i++ )
   d4efe:	b2ee      	uxtb	r6, r5
   d4f00:	45b0      	cmp	r8, r6
   d4f02:	d90f      	bls.n	d4f24 <_Z13mqtt_callbackPcPhj+0x4c>
    {
        if( p[i] <= 0x0F ) Serial.print("0");
   d4f04:	5da3      	ldrb	r3, [r4, r6]
   d4f06:	2b0f      	cmp	r3, #15
   d4f08:	d804      	bhi.n	d4f14 <_Z13mqtt_callbackPcPhj+0x3c>
   d4f0a:	f004 ff3f 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4f0e:	4911      	ldr	r1, [pc, #68]	; (d4f54 <_Z13mqtt_callbackPcPhj+0x7c>)
   d4f10:	f004 fa1c 	bl	d934c <_ZN5Print5printEPKc>
        Serial.print(p[i], HEX);
   d4f14:	f004 ff3a 	bl	d9d8c <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4f18:	2210      	movs	r2, #16
   d4f1a:	5da1      	ldrb	r1, [r4, r6]
   d4f1c:	f004 fa33 	bl	d9386 <_ZN5Print11printNumberEmh>
   d4f20:	3501      	adds	r5, #1
    igh_msg_type msg_type = UNKNOWN_MSG;
    uint8_t p[length];
    memcpy(p, payload, length);

    Serial.print("RECEIVED MSG: ");
    for( uint8_t i = 0; i < length; i++ )
   d4f22:	e7ec      	b.n	d4efe <_Z13mqtt_callbackPcPhj+0x26>
    {
        if( p[i] <= 0x0F ) Serial.print("0");
        Serial.print(p[i], HEX);
    }

    msg_type = (igh_msg_type)igh_message_process_incoming_msg( p );
   d4f24:	4620      	mov	r0, r4
   d4f26:	f7ff fb49 	bl	d45bc <igh_message_process_incoming_msg>
   d4f2a:	4605      	mov	r5, r0

    Serial.print("\nMESSAGE TYPE: ");
   d4f2c:	f004 ff2e 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4f30:	4909      	ldr	r1, [pc, #36]	; (d4f58 <_Z13mqtt_callbackPcPhj+0x80>)
   d4f32:	f004 fa0b 	bl	d934c <_ZN5Print5printEPKc>
    Serial.println((int)msg_type);
   d4f36:	f004 ff29 	bl	d9d8c <_Z16_fetch_usbserialv>
   d4f3a:	220a      	movs	r2, #10
   d4f3c:	4604      	mov	r4, r0
   d4f3e:	4629      	mov	r1, r5
   d4f40:	f004 fa21 	bl	d9386 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4f44:	4620      	mov	r0, r4
   d4f46:	f004 fa08 	bl	d935a <_ZN5Print7printlnEv>
}
   d4f4a:	46bd      	mov	sp, r7
   d4f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4f50:	000dcf0f 	.word	0x000dcf0f
   d4f54:	000dcdee 	.word	0x000dcdee
   d4f58:	000dcf1e 	.word	0x000dcf1e

000d4f5c <_Z14igh_mqtt_setupv>:

void igh_mqtt_setup( void )
{
   d4f5c:	b510      	push	{r4, lr}
    // set mqtt device name
    device_name = System.deviceID();
   d4f5e:	4c1e      	ldr	r4, [pc, #120]	; (d4fd8 <_Z14igh_mqtt_setupv+0x7c>)
    Serial.print("\nMESSAGE TYPE: ");
    Serial.println((int)msg_type);
}

void igh_mqtt_setup( void )
{
   d4f60:	b088      	sub	sp, #32
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d4f62:	a804      	add	r0, sp, #16
   d4f64:	f003 fee0 	bl	d8d28 <spark_deviceID>
    // set mqtt device name
    device_name = System.deviceID();
   d4f68:	a904      	add	r1, sp, #16
   d4f6a:	4620      	mov	r0, r4
   d4f6c:	f004 f980 	bl	d9270 <_ZN6StringaSEOS_>
   d4f70:	a804      	add	r0, sp, #16
   d4f72:	f004 f8f7 	bl	d9164 <_ZN6StringD1Ev>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4f76:	4919      	ldr	r1, [pc, #100]	; (d4fdc <_Z14igh_mqtt_setupv+0x80>)
   d4f78:	a804      	add	r0, sp, #16
   d4f7a:	f004 f93a 	bl	d91f2 <_ZN6StringC1EPK19__FlashStringHelper>
   d4f7e:	4668      	mov	r0, sp
   d4f80:	f003 fed2 	bl	d8d28 <spark_deviceID>
    inbound_topic = "44" + System.deviceID();
   d4f84:	4669      	mov	r1, sp
   d4f86:	a804      	add	r0, sp, #16
   d4f88:	f004 f9a2 	bl	d92d0 <_ZplRK15StringSumHelperRK6String>
   d4f8c:	4601      	mov	r1, r0
   d4f8e:	4814      	ldr	r0, [pc, #80]	; (d4fe0 <_Z14igh_mqtt_setupv+0x84>)
   d4f90:	f004 f95f 	bl	d9252 <_ZN6StringaSERKS_>
   d4f94:	4668      	mov	r0, sp
   d4f96:	f004 f8e5 	bl	d9164 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4f9a:	a804      	add	r0, sp, #16
   d4f9c:	f004 f8e2 	bl	d9164 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4fa0:	4910      	ldr	r1, [pc, #64]	; (d4fe4 <_Z14igh_mqtt_setupv+0x88>)
   d4fa2:	a804      	add	r0, sp, #16
   d4fa4:	f004 f925 	bl	d91f2 <_ZN6StringC1EPK19__FlashStringHelper>
   d4fa8:	4668      	mov	r0, sp
   d4faa:	f003 febd 	bl	d8d28 <spark_deviceID>
    outbound_topic = "55" + System.deviceID();
   d4fae:	4669      	mov	r1, sp
   d4fb0:	a804      	add	r0, sp, #16
   d4fb2:	f004 f98d 	bl	d92d0 <_ZplRK15StringSumHelperRK6String>
   d4fb6:	4601      	mov	r1, r0
   d4fb8:	480b      	ldr	r0, [pc, #44]	; (d4fe8 <_Z14igh_mqtt_setupv+0x8c>)
   d4fba:	f004 f94a 	bl	d9252 <_ZN6StringaSERKS_>
   d4fbe:	4668      	mov	r0, sp
   d4fc0:	f004 f8d0 	bl	d9164 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4fc4:	a804      	add	r0, sp, #16
   d4fc6:	f004 f8cd 	bl	d9164 <_ZN6StringD1Ev>
    client.connect( (const char *)device_name );
   d4fca:	6821      	ldr	r1, [r4, #0]
   d4fcc:	4807      	ldr	r0, [pc, #28]	; (d4fec <_Z14igh_mqtt_setupv+0x90>)
   d4fce:	f001 fa07 	bl	d63e0 <_ZN4MQTT7connectEPKc>

}
   d4fd2:	b008      	add	sp, #32
   d4fd4:	bd10      	pop	{r4, pc}
   d4fd6:	bf00      	nop
   d4fd8:	2003d8e8 	.word	0x2003d8e8
   d4fdc:	000dcf2e 	.word	0x000dcf2e
   d4fe0:	2003d8c8 	.word	0x2003d8c8
   d4fe4:	000dcf31 	.word	0x000dcf31
   d4fe8:	2003d8d8 	.word	0x2003d8d8
   d4fec:	2003d8f8 	.word	0x2003d8f8

000d4ff0 <_Z16igh_mqtt_servicev>:

void igh_mqtt_service( void )
{
   d4ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if( true == mqtt_set_broker )
   d4ff4:	4b34      	ldr	r3, [pc, #208]	; (d50c8 <_Z16igh_mqtt_servicev+0xd8>)
   d4ff6:	781a      	ldrb	r2, [r3, #0]
   d4ff8:	2a01      	cmp	r2, #1
    client.connect( (const char *)device_name );

}

void igh_mqtt_service( void )
{
   d4ffa:	af00      	add	r7, sp, #0
   d4ffc:	461d      	mov	r5, r3
    if( true == mqtt_set_broker )
   d4ffe:	d139      	bne.n	d5074 <_Z16igh_mqtt_servicev+0x84>
    {
        uint8_t broker_len = 0;
        while( igh_current_system_settings.broker[broker_len] )
   d5000:	4932      	ldr	r1, [pc, #200]	; (d50cc <_Z16igh_mqtt_servicev+0xdc>)
        Serial.print("BROKER: "); Serial.print(new_broker);
        Serial.print(" PORT: "); Serial.println(igh_current_system_settings.broker_port);
        
        client.setBroker(new_broker, igh_current_system_settings.broker_port);

        mqtt_set_broker = false;
   d5002:	46e8      	mov	r8, sp
   d5004:	2200      	movs	r2, #0
   d5006:	1c50      	adds	r0, r2, #1
void igh_mqtt_service( void )
{
    if( true == mqtt_set_broker )
    {
        uint8_t broker_len = 0;
        while( igh_current_system_settings.broker[broker_len] )
   d5008:	b2d2      	uxtb	r2, r2
   d500a:	188b      	adds	r3, r1, r2
   d500c:	4e2f      	ldr	r6, [pc, #188]	; (d50cc <_Z16igh_mqtt_servicev+0xdc>)
   d500e:	f893 4024 	ldrb.w	r4, [r3, #36]	; 0x24
   d5012:	b10c      	cbz	r4, d5018 <_Z16igh_mqtt_servicev+0x28>
   d5014:	4602      	mov	r2, r0
   d5016:	e7f6      	b.n	d5006 <_Z16igh_mqtt_servicev+0x16>
        {
            if( '\0' == igh_current_system_settings.broker[broker_len] ) break;
            broker_len++;
        }
        
        char new_broker[broker_len + 1];
   d5018:	f102 0308 	add.w	r3, r2, #8
   d501c:	f023 0307 	bic.w	r3, r3, #7
   d5020:	ebad 0d03 	sub.w	sp, sp, r3
        memcpy( new_broker, igh_current_system_settings.broker, sizeof(new_broker) );
   d5024:	3201      	adds	r2, #1
   d5026:	f106 0124 	add.w	r1, r6, #36	; 0x24
   d502a:	4668      	mov	r0, sp
   d502c:	f006 fd63 	bl	dbaf6 <memcpy>

        Serial.print("BROKER: "); Serial.print(new_broker);
   d5030:	f004 feac 	bl	d9d8c <_Z16_fetch_usbserialv>
   d5034:	4926      	ldr	r1, [pc, #152]	; (d50d0 <_Z16igh_mqtt_servicev+0xe0>)
   d5036:	f004 f989 	bl	d934c <_ZN5Print5printEPKc>
   d503a:	f004 fea7 	bl	d9d8c <_Z16_fetch_usbserialv>
   d503e:	4669      	mov	r1, sp
   d5040:	f004 f984 	bl	d934c <_ZN5Print5printEPKc>
        Serial.print(" PORT: "); Serial.println(igh_current_system_settings.broker_port);
   d5044:	f004 fea2 	bl	d9d8c <_Z16_fetch_usbserialv>
   d5048:	4922      	ldr	r1, [pc, #136]	; (d50d4 <_Z16igh_mqtt_servicev+0xe4>)
   d504a:	f004 f97f 	bl	d934c <_ZN5Print5printEPKc>
   d504e:	f004 fe9d 	bl	d9d8c <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5052:	220a      	movs	r2, #10
   d5054:	f8b6 1044 	ldrh.w	r1, [r6, #68]	; 0x44
   d5058:	4681      	mov	r9, r0
   d505a:	f004 f994 	bl	d9386 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d505e:	4648      	mov	r0, r9
   d5060:	f004 f97b 	bl	d935a <_ZN5Print7printlnEv>
        
        client.setBroker(new_broker, igh_current_system_settings.broker_port);
   d5064:	4669      	mov	r1, sp
   d5066:	f8b6 2044 	ldrh.w	r2, [r6, #68]	; 0x44
   d506a:	481b      	ldr	r0, [pc, #108]	; (d50d8 <_Z16igh_mqtt_servicev+0xe8>)
   d506c:	f001 f8ce 	bl	d620c <_ZN4MQTT9setBrokerEPct>

        mqtt_set_broker = false;
   d5070:	702c      	strb	r4, [r5, #0]
   d5072:	46c5      	mov	sp, r8
    }

    if (client.isConnected())
   d5074:	4818      	ldr	r0, [pc, #96]	; (d50d8 <_Z16igh_mqtt_servicev+0xe8>)
   d5076:	4c19      	ldr	r4, [pc, #100]	; (d50dc <_Z16igh_mqtt_servicev+0xec>)
   d5078:	f001 f8ba 	bl	d61f0 <_ZN4MQTT11isConnectedEv>
   d507c:	b170      	cbz	r0, d509c <_Z16igh_mqtt_servicev+0xac>
    {
        client.loop();
   d507e:	4816      	ldr	r0, [pc, #88]	; (d50d8 <_Z16igh_mqtt_servicev+0xe8>)
        mqtt_connected = 1;
   d5080:	2501      	movs	r5, #1
        mqtt_set_broker = false;
    }

    if (client.isConnected())
    {
        client.loop();
   d5082:	f001 fa6a 	bl	d655a <_ZN4MQTT4loopEv>
        mqtt_connected = 1;
   d5086:	7025      	strb	r5, [r4, #0]

        if( false == mqtt_subscribed )
   d5088:	4c15      	ldr	r4, [pc, #84]	; (d50e0 <_Z16igh_mqtt_servicev+0xf0>)
   d508a:	7823      	ldrb	r3, [r4, #0]
   d508c:	b9c3      	cbnz	r3, d50c0 <_Z16igh_mqtt_servicev+0xd0>
   d508e:	4b15      	ldr	r3, [pc, #84]	; (d50e4 <_Z16igh_mqtt_servicev+0xf4>)
        {
            client.subscribe( (const char *)inbound_topic );
   d5090:	4811      	ldr	r0, [pc, #68]	; (d50d8 <_Z16igh_mqtt_servicev+0xe8>)
   d5092:	6819      	ldr	r1, [r3, #0]
   d5094:	f001 fb8d 	bl	d67b2 <_ZN4MQTT9subscribeEPKc>
            mqtt_subscribed = true;
   d5098:	7025      	strb	r5, [r4, #0]
   d509a:	e011      	b.n	d50c0 <_Z16igh_mqtt_servicev+0xd0>
        }
    }
    else
    {
        /* try to connect */
        mqtt_connected = 0;
   d509c:	7020      	strb	r0, [r4, #0]

        if( (millis() - reconnect_interval) > 10000 )
   d509e:	4c12      	ldr	r4, [pc, #72]	; (d50e8 <_Z16igh_mqtt_servicev+0xf8>)
   d50a0:	f003 fbee 	bl	d8880 <HAL_Timer_Get_Milli_Seconds>
   d50a4:	6823      	ldr	r3, [r4, #0]
   d50a6:	1ac0      	subs	r0, r0, r3
   d50a8:	f242 7310 	movw	r3, #10000	; 0x2710
   d50ac:	4298      	cmp	r0, r3
   d50ae:	d907      	bls.n	d50c0 <_Z16igh_mqtt_servicev+0xd0>
   d50b0:	4b0e      	ldr	r3, [pc, #56]	; (d50ec <_Z16igh_mqtt_servicev+0xfc>)
        {
            // try to reconnect only once every 10 seconds
            client.connect( (const char *)device_name );
   d50b2:	4809      	ldr	r0, [pc, #36]	; (d50d8 <_Z16igh_mqtt_servicev+0xe8>)
   d50b4:	6819      	ldr	r1, [r3, #0]
   d50b6:	f001 f993 	bl	d63e0 <_ZN4MQTT7connectEPKc>
   d50ba:	f003 fbe1 	bl	d8880 <HAL_Timer_Get_Milli_Seconds>
            reconnect_interval = millis();
   d50be:	6020      	str	r0, [r4, #0]
        }
    }
}
   d50c0:	46bd      	mov	sp, r7
   d50c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d50c6:	bf00      	nop
   d50c8:	2003d7cc 	.word	0x2003d7cc
   d50cc:	2003e604 	.word	0x2003e604
   d50d0:	000dce6e 	.word	0x000dce6e
   d50d4:	000dce82 	.word	0x000dce82
   d50d8:	2003d8f8 	.word	0x2003d8f8
   d50dc:	2003d951 	.word	0x2003d951
   d50e0:	2003d950 	.word	0x2003d950
   d50e4:	2003d8c8 	.word	0x2003d8c8
   d50e8:	2003d8c4 	.word	0x2003d8c4
   d50ec:	2003d8e8 	.word	0x2003d8e8

000d50f0 <_Z21igh_mqtt_publish_dataPhj>:

bool igh_mqtt_publish_data( uint8_t *payload, unsigned int len )
{
   d50f0:	b570      	push	{r4, r5, r6, lr}
   d50f2:	4605      	mov	r5, r0
    bool ret = false;
    if (client.isConnected()) {
   d50f4:	480d      	ldr	r0, [pc, #52]	; (d512c <_Z21igh_mqtt_publish_dataPhj+0x3c>)
        }
    }
}

bool igh_mqtt_publish_data( uint8_t *payload, unsigned int len )
{
   d50f6:	460e      	mov	r6, r1
    bool ret = false;
    if (client.isConnected()) {
   d50f8:	f001 f87a 	bl	d61f0 <_ZN4MQTT11isConnectedEv>
   d50fc:	4604      	mov	r4, r0
   d50fe:	b168      	cbz	r0, d511c <_Z21igh_mqtt_publish_dataPhj+0x2c>
        client.publish( (const char *)outbound_topic, 
                        (const uint8_t*) payload, len);
   d5100:	490b      	ldr	r1, [pc, #44]	; (d5130 <_Z21igh_mqtt_publish_dataPhj+0x40>)
   d5102:	480a      	ldr	r0, [pc, #40]	; (d512c <_Z21igh_mqtt_publish_dataPhj+0x3c>)
   d5104:	6809      	ldr	r1, [r1, #0]
   d5106:	4633      	mov	r3, r6
   d5108:	462a      	mov	r2, r5
   d510a:	f001 f9e9 	bl	d64e0 <_ZN4MQTT7publishEPKcPKhj>
   d510e:	4b09      	ldr	r3, [pc, #36]	; (d5134 <_Z21igh_mqtt_publish_dataPhj+0x44>)
        client.subscribe( (const char *)inbound_topic );
   d5110:	4806      	ldr	r0, [pc, #24]	; (d512c <_Z21igh_mqtt_publish_dataPhj+0x3c>)
   d5112:	6819      	ldr	r1, [r3, #0]
   d5114:	f001 fb4d 	bl	d67b2 <_ZN4MQTT9subscribeEPKc>
        ret = true;
   d5118:	2001      	movs	r0, #1
   d511a:	bd70      	pop	{r4, r5, r6, pc}
    }
    else
    {
        Serial.println("PUBLISH FAILED");
   d511c:	f004 fe36 	bl	d9d8c <_Z16_fetch_usbserialv>
   d5120:	4905      	ldr	r1, [pc, #20]	; (d5138 <_Z21igh_mqtt_publish_dataPhj+0x48>)
   d5122:	f004 f926 	bl	d9372 <_ZN5Print7printlnEPKc>
    }
}

bool igh_mqtt_publish_data( uint8_t *payload, unsigned int len )
{
    bool ret = false;
   d5126:	4620      	mov	r0, r4
    else
    {
        Serial.println("PUBLISH FAILED");
    }
    return ret;
}
   d5128:	bd70      	pop	{r4, r5, r6, pc}
   d512a:	bf00      	nop
   d512c:	2003d8f8 	.word	0x2003d8f8
   d5130:	2003d8d8 	.word	0x2003d8d8
   d5134:	2003d8c8 	.word	0x2003d8c8
   d5138:	000dcf34 	.word	0x000dcf34

000d513c <_GLOBAL__sub_I_device_name>:
   d513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#include "include/igh_settings.h"
#include "include/igh_default_settings.h"
#include "include/igh_message.h"

/* MQTT variables */
String device_name;
   d513e:	4e19      	ldr	r6, [pc, #100]	; (d51a4 <_GLOBAL__sub_I_device_name+0x68>)
   d5140:	4f19      	ldr	r7, [pc, #100]	; (d51a8 <_GLOBAL__sub_I_device_name+0x6c>)
   d5142:	4c1a      	ldr	r4, [pc, #104]	; (d51ac <_GLOBAL__sub_I_device_name+0x70>)
   d5144:	4d1a      	ldr	r5, [pc, #104]	; (d51b0 <_GLOBAL__sub_I_device_name+0x74>)
   d5146:	f003 fad3 	bl	d86f0 <HAL_Pin_Map>
   d514a:	4631      	mov	r1, r6
   d514c:	4638      	mov	r0, r7
   d514e:	f004 f850 	bl	d91f2 <_ZN6StringC1EPK19__FlashStringHelper>
   d5152:	4638      	mov	r0, r7
String inbound_topic;
   d5154:	4f17      	ldr	r7, [pc, #92]	; (d51b4 <_GLOBAL__sub_I_device_name+0x78>)
#include "include/igh_settings.h"
#include "include/igh_default_settings.h"
#include "include/igh_message.h"

/* MQTT variables */
String device_name;
   d5156:	4622      	mov	r2, r4
   d5158:	4629      	mov	r1, r5
   d515a:	f005 fd11 	bl	dab80 <__aeabi_atexit>
String inbound_topic;
   d515e:	4631      	mov	r1, r6
   d5160:	4638      	mov	r0, r7
   d5162:	f004 f846 	bl	d91f2 <_ZN6StringC1EPK19__FlashStringHelper>
   d5166:	4638      	mov	r0, r7
String outbound_topic;
   d5168:	4f13      	ldr	r7, [pc, #76]	; (d51b8 <_GLOBAL__sub_I_device_name+0x7c>)
#include "include/igh_default_settings.h"
#include "include/igh_message.h"

/* MQTT variables */
String device_name;
String inbound_topic;
   d516a:	4622      	mov	r2, r4
   d516c:	4629      	mov	r1, r5
   d516e:	f005 fd07 	bl	dab80 <__aeabi_atexit>
String outbound_topic;
   d5172:	4631      	mov	r1, r6
   d5174:	4638      	mov	r0, r7
   d5176:	f004 f83c 	bl	d91f2 <_ZN6StringC1EPK19__FlashStringHelper>
   d517a:	4629      	mov	r1, r5
bool mqtt_subscribed = false;
uint8_t mqtt_connected = 0;

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);
   d517c:	4d0f      	ldr	r5, [pc, #60]	; (d51bc <_GLOBAL__sub_I_device_name+0x80>)
#include "include/igh_message.h"

/* MQTT variables */
String device_name;
String inbound_topic;
String outbound_topic;
   d517e:	4622      	mov	r2, r4
   d5180:	4638      	mov	r0, r7
   d5182:	f005 fcfd 	bl	dab80 <__aeabi_atexit>
bool mqtt_subscribed = false;
uint8_t mqtt_connected = 0;

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);
   d5186:	4b0e      	ldr	r3, [pc, #56]	; (d51c0 <_GLOBAL__sub_I_device_name+0x84>)
   d5188:	490e      	ldr	r1, [pc, #56]	; (d51c4 <_GLOBAL__sub_I_device_name+0x88>)
   d518a:	f240 725b 	movw	r2, #1883	; 0x75b
   d518e:	4628      	mov	r0, r5
   d5190:	f000 ff46 	bl	d6020 <_ZN4MQTTC1EPctPFvS0_PhjE>
   d5194:	4622      	mov	r2, r4
   d5196:	4628      	mov	r0, r5
   d5198:	490b      	ldr	r1, [pc, #44]	; (d51c8 <_GLOBAL__sub_I_device_name+0x8c>)
    else
    {
        Serial.println("PUBLISH FAILED");
    }
    return ret;
}
   d519a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
bool mqtt_subscribed = false;
uint8_t mqtt_connected = 0;

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);
   d519e:	f005 bcef 	b.w	dab80 <__aeabi_atexit>
   d51a2:	bf00      	nop
   d51a4:	000dd2be 	.word	0x000dd2be
   d51a8:	2003d8e8 	.word	0x2003d8e8
   d51ac:	2003d8b8 	.word	0x2003d8b8
   d51b0:	000d9165 	.word	0x000d9165
   d51b4:	2003d8c8 	.word	0x2003d8c8
   d51b8:	2003d8d8 	.word	0x2003d8d8
   d51bc:	2003d8f8 	.word	0x2003d8f8
   d51c0:	000d4ed9 	.word	0x000d4ed9
   d51c4:	000dcf43 	.word	0x000dcf43
   d51c8:	000d67b9 	.word	0x000d67b9

000d51cc <_GLOBAL__sub_I_test_valve_flag>:
        igh_append_test_status(ret);
        test_rfm69_flag = false;
    }

    return ret;
   d51cc:	b510      	push	{r4, lr}
static void print_cmd_options(void);
static void igh_append_test_status(uint8_t _status);

uint8_t test_rfm69_flag = 0;

String IGH_ID;
   d51ce:	4c07      	ldr	r4, [pc, #28]	; (d51ec <_GLOBAL__sub_I_test_valve_flag+0x20>)
   d51d0:	f003 fa8e 	bl	d86f0 <HAL_Pin_Map>
   d51d4:	4906      	ldr	r1, [pc, #24]	; (d51f0 <_GLOBAL__sub_I_test_valve_flag+0x24>)
   d51d6:	4620      	mov	r0, r4
   d51d8:	f004 f80b 	bl	d91f2 <_ZN6StringC1EPK19__FlashStringHelper>
   d51dc:	4620      	mov	r0, r4
   d51de:	4a05      	ldr	r2, [pc, #20]	; (d51f4 <_GLOBAL__sub_I_test_valve_flag+0x28>)
   d51e0:	4905      	ldr	r1, [pc, #20]	; (d51f8 <_GLOBAL__sub_I_test_valve_flag+0x2c>)
        igh_append_test_status(ret);
        test_rfm69_flag = false;
    }

    return ret;
   d51e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void print_cmd_options(void);
static void igh_append_test_status(uint8_t _status);

uint8_t test_rfm69_flag = 0;

String IGH_ID;
   d51e6:	f005 bccb 	b.w	dab80 <__aeabi_atexit>
   d51ea:	bf00      	nop
   d51ec:	2003d954 	.word	0x2003d954
   d51f0:	000dd2be 	.word	0x000dd2be
   d51f4:	2003d8b8 	.word	0x2003d8b8
   d51f8:	000d9165 	.word	0x000d9165

000d51fc <_Z31igh_eeprom_read_system_settingsP15system_settings>:
 * \brief Gets system settings from eeprom emulator
 * \param running_system_settings_buffer: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_system_settings(system_settings * running_system_settings_buffer)
{
   d51fc:	b510      	push	{r4, lr}
   d51fe:	b092      	sub	sp, #72	; 0x48
  system_settings local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d5200:	2248      	movs	r2, #72	; 0x48
   d5202:	2100      	movs	r1, #0
 * \brief Gets system settings from eeprom emulator
 * \param running_system_settings_buffer: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_system_settings(system_settings * running_system_settings_buffer)
{
   d5204:	4604      	mov	r4, r0
  system_settings local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d5206:	4668      	mov	r0, sp
   d5208:	f006 fc80 	bl	dbb0c <memset>
  EEPROM.get(SYSTEM_SETTINGS_ADDRESS, local_buffer);
   d520c:	f005 fc24 	bl	daa58 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d5210:	2248      	movs	r2, #72	; 0x48
   d5212:	4669      	mov	r1, sp
   d5214:	2000      	movs	r0, #0
   d5216:	f003 fb4b 	bl	d88b0 <HAL_EEPROM_Get>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));
   d521a:	2148      	movs	r1, #72	; 0x48
   d521c:	4668      	mov	r0, sp
   d521e:	f7ff f913 	bl	d4448 <igh_settings_calculate_checksum>

  if( checksum != local_buffer.checksum)
   d5222:	f89d 3000 	ldrb.w	r3, [sp]
   d5226:	4283      	cmp	r3, r0
   d5228:	d106      	bne.n	d5238 <_Z31igh_eeprom_read_system_settingsP15system_settings+0x3c>
  {
    return 0;
  }

  *running_system_settings_buffer = local_buffer;
   d522a:	2248      	movs	r2, #72	; 0x48
   d522c:	4669      	mov	r1, sp
   d522e:	4620      	mov	r0, r4
   d5230:	f006 fc61 	bl	dbaf6 <memcpy>
  return 1;
   d5234:	2001      	movs	r0, #1
   d5236:	e000      	b.n	d523a <_Z31igh_eeprom_read_system_settingsP15system_settings+0x3e>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));

  if( checksum != local_buffer.checksum)
  {
    return 0;
   d5238:	2000      	movs	r0, #0
  }

  *running_system_settings_buffer = local_buffer;
  return 1;

}
   d523a:	b012      	add	sp, #72	; 0x48
   d523c:	bd10      	pop	{r4, pc}

000d523e <_Z31igh_eeprom_save_system_settingsP15system_settings>:
 * \brief Save system settings  to eeprom emulator
 * \param settings_to_save: pointer to struct to save
 * \return true or false based on write success
 */
uint8_t igh_eeprom_save_system_settings(system_settings * settings_to_save)
{
   d523e:	b510      	push	{r4, lr}
   d5240:	4604      	mov	r4, r0
   d5242:	b092      	sub	sp, #72	; 0x48
  system_settings local_buffer;
  // save the data
  EEPROM.put(SYSTEM_SETTINGS_ADDRESS, *settings_to_save);
   d5244:	f005 fc08 	bl	daa58 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d5248:	2248      	movs	r2, #72	; 0x48
   d524a:	4621      	mov	r1, r4
   d524c:	2000      	movs	r0, #0
   d524e:	f003 fb37 	bl	d88c0 <HAL_EEPROM_Put>
  // check if data is saved
  igh_eeprom_read_system_settings(&local_buffer);
   d5252:	4668      	mov	r0, sp
   d5254:	f7ff ffd2 	bl	d51fc <_Z31igh_eeprom_read_system_settingsP15system_settings>

  if( local_buffer.checksum != (settings_to_save->checksum))
  {
    return 0;
   d5258:	f89d 0000 	ldrb.w	r0, [sp]
   d525c:	7823      	ldrb	r3, [r4, #0]
  }

  return 1;
}
   d525e:	1ac3      	subs	r3, r0, r3
   d5260:	4258      	negs	r0, r3
   d5262:	4158      	adcs	r0, r3
   d5264:	b012      	add	sp, #72	; 0x48
   d5266:	bd10      	pop	{r4, pc}

000d5268 <_Z34igh_eeprom_read_threshold_settingsP10thresholds>:
 * \brief Gets threshold settings from eeprom emulator
 * \param running_thresholds: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_threshold_settings(thresholds * running_thresholds)
{
   d5268:	b530      	push	{r4, r5, lr}
   d526a:	b08f      	sub	sp, #60	; 0x3c
  thresholds local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d526c:	2234      	movs	r2, #52	; 0x34
   d526e:	2100      	movs	r1, #0
 * \brief Gets threshold settings from eeprom emulator
 * \param running_thresholds: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_threshold_settings(thresholds * running_thresholds)
{
   d5270:	4605      	mov	r5, r0
  thresholds local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d5272:	a801      	add	r0, sp, #4
   d5274:	f006 fc4a 	bl	dbb0c <memset>
  EEPROM.get(SYSTEM_THRESHOLDS_ADDRESS, local_buffer);
   d5278:	f005 fbee 	bl	daa58 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d527c:	2234      	movs	r2, #52	; 0x34
   d527e:	a901      	add	r1, sp, #4
   d5280:	f44f 7000 	mov.w	r0, #512	; 0x200
   d5284:	f003 fb14 	bl	d88b0 <HAL_EEPROM_Get>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));
   d5288:	2134      	movs	r1, #52	; 0x34
   d528a:	a801      	add	r0, sp, #4
   d528c:	f7ff f8dc 	bl	d4448 <igh_settings_calculate_checksum>
  
  if( checksum != local_buffer.checksum)
   d5290:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d5294:	4283      	cmp	r3, r0
   d5296:	d10a      	bne.n	d52ae <_Z34igh_eeprom_read_threshold_settingsP10thresholds+0x46>
  {
    return 0;
  }
  
  *running_thresholds = local_buffer;
   d5298:	ac01      	add	r4, sp, #4
   d529a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d529c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d529e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d52a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d52a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d52a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d52a6:	6823      	ldr	r3, [r4, #0]
   d52a8:	602b      	str	r3, [r5, #0]
  return 1;
   d52aa:	2001      	movs	r0, #1
   d52ac:	e000      	b.n	d52b0 <_Z34igh_eeprom_read_threshold_settingsP10thresholds+0x48>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));
  
  if( checksum != local_buffer.checksum)
  {
    return 0;
   d52ae:	2000      	movs	r0, #0
  }
  
  *running_thresholds = local_buffer;
  return 1;
}
   d52b0:	b00f      	add	sp, #60	; 0x3c
   d52b2:	bd30      	pop	{r4, r5, pc}

000d52b4 <_Z15igh_eeprom_initv>:
#define SYSTEM_THRESHOLDS_ADDRESS   (int)0x0200
#define SYSTEM_ERRORS_ADDRESS       (int)0x0400


void igh_eeprom_init( void )
{
   d52b4:	b530      	push	{r4, r5, lr}
   d52b6:	b0a1      	sub	sp, #132	; 0x84
  system_settings settings_in_memory;
  thresholds thresholds_in_memory;

  bool system_settings_read_successfully = igh_eeprom_read_system_settings(&settings_in_memory);
   d52b8:	a80e      	add	r0, sp, #56	; 0x38
   d52ba:	f7ff ff9f 	bl	d51fc <_Z31igh_eeprom_read_system_settingsP15system_settings>
  uint8_t valid_system_checksum = igh_settings_calculate_checksum( &settings_in_memory, sizeof(settings_in_memory) );
   d52be:	2148      	movs	r1, #72	; 0x48
void igh_eeprom_init( void )
{
  system_settings settings_in_memory;
  thresholds thresholds_in_memory;

  bool system_settings_read_successfully = igh_eeprom_read_system_settings(&settings_in_memory);
   d52c0:	4604      	mov	r4, r0
  uint8_t valid_system_checksum = igh_settings_calculate_checksum( &settings_in_memory, sizeof(settings_in_memory) );
   d52c2:	a80e      	add	r0, sp, #56	; 0x38
   d52c4:	f7ff f8c0 	bl	d4448 <igh_settings_calculate_checksum>

  if( false == system_settings_read_successfully ||
   d52c8:	b124      	cbz	r4, d52d4 <_Z15igh_eeprom_initv+0x20>
   d52ca:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   d52ce:	4283      	cmp	r3, r0
   d52d0:	d100      	bne.n	d52d4 <_Z15igh_eeprom_initv+0x20>
      (settings_in_memory.checksum != valid_system_checksum) ||
   d52d2:	b953      	cbnz	r3, d52ea <_Z15igh_eeprom_initv+0x36>
      ( 0 == settings_in_memory.checksum) )
  {
    // if we can't get valid settings from memory at all, use default settings
    Serial.println("USING DEFAULT SETTINGS");
   d52d4:	f004 fd5a 	bl	d9d8c <_Z16_fetch_usbserialv>
   d52d8:	491e      	ldr	r1, [pc, #120]	; (d5354 <_Z15igh_eeprom_initv+0xa0>)
   d52da:	f004 f84a 	bl	d9372 <_ZN5Print7printlnEPKc>
    igh_settings_reset_system_to_default();
   d52de:	f7ff f8f5 	bl	d44cc <igh_settings_reset_system_to_default>
    new_settings_available = 1;
   d52e2:	4b1d      	ldr	r3, [pc, #116]	; (d5358 <_Z15igh_eeprom_initv+0xa4>)
   d52e4:	2201      	movs	r2, #1
   d52e6:	701a      	strb	r2, [r3, #0]
   d52e8:	e009      	b.n	d52fe <_Z15igh_eeprom_initv+0x4a>
  }
  else
  {
    Serial.println("USING SETTINGS FROM MEMORY");
   d52ea:	f004 fd4f 	bl	d9d8c <_Z16_fetch_usbserialv>
   d52ee:	491b      	ldr	r1, [pc, #108]	; (d535c <_Z15igh_eeprom_initv+0xa8>)
   d52f0:	f004 f83f 	bl	d9372 <_ZN5Print7printlnEPKc>
    igh_current_system_settings = settings_in_memory;
   d52f4:	2248      	movs	r2, #72	; 0x48
   d52f6:	a90e      	add	r1, sp, #56	; 0x38
   d52f8:	4819      	ldr	r0, [pc, #100]	; (d5360 <_Z15igh_eeprom_initv+0xac>)
   d52fa:	f006 fbfc 	bl	dbaf6 <memcpy>
  }

  bool threshold_settings_read_successfully = igh_eeprom_read_threshold_settings(&thresholds_in_memory);
   d52fe:	a801      	add	r0, sp, #4
   d5300:	f7ff ffb2 	bl	d5268 <_Z34igh_eeprom_read_threshold_settingsP10thresholds>
  uint8_t valid_threshold_checksum = igh_settings_calculate_checksum( &thresholds_in_memory, sizeof(thresholds_in_memory) );
   d5304:	2134      	movs	r1, #52	; 0x34
  {
    Serial.println("USING SETTINGS FROM MEMORY");
    igh_current_system_settings = settings_in_memory;
  }

  bool threshold_settings_read_successfully = igh_eeprom_read_threshold_settings(&thresholds_in_memory);
   d5306:	4604      	mov	r4, r0
  uint8_t valid_threshold_checksum = igh_settings_calculate_checksum( &thresholds_in_memory, sizeof(thresholds_in_memory) );
   d5308:	a801      	add	r0, sp, #4
   d530a:	f7ff f89d 	bl	d4448 <igh_settings_calculate_checksum>

  if( false == threshold_settings_read_successfully ||
   d530e:	b124      	cbz	r4, d531a <_Z15igh_eeprom_initv+0x66>
   d5310:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d5314:	4283      	cmp	r3, r0
   d5316:	d100      	bne.n	d531a <_Z15igh_eeprom_initv+0x66>
      (thresholds_in_memory.checksum != valid_threshold_checksum) ||
   d5318:	b953      	cbnz	r3, d5330 <_Z15igh_eeprom_initv+0x7c>
      ( 0 == thresholds_in_memory.checksum) )
  {
    // if we can't get valid settings from memory at all, use default settings
    Serial.println("USING DEFAULT THRESHOLDS");
   d531a:	f004 fd37 	bl	d9d8c <_Z16_fetch_usbserialv>
   d531e:	4911      	ldr	r1, [pc, #68]	; (d5364 <_Z15igh_eeprom_initv+0xb0>)
   d5320:	f004 f827 	bl	d9372 <_ZN5Print7printlnEPKc>
    igh_settings_reset_system_to_default();
   d5324:	f7ff f8d2 	bl	d44cc <igh_settings_reset_system_to_default>
    new_settings_available = 1;
   d5328:	4b0b      	ldr	r3, [pc, #44]	; (d5358 <_Z15igh_eeprom_initv+0xa4>)
   d532a:	2201      	movs	r2, #1
   d532c:	701a      	strb	r2, [r3, #0]
   d532e:	e00e      	b.n	d534e <_Z15igh_eeprom_initv+0x9a>
  }
  else
  {
    Serial.println("USING THRESHOLDS FROM MEMORY");
   d5330:	f004 fd2c 	bl	d9d8c <_Z16_fetch_usbserialv>
    igh_current_threshold_settings = thresholds_in_memory;
   d5334:	ac01      	add	r4, sp, #4
    igh_settings_reset_system_to_default();
    new_settings_available = 1;
  }
  else
  {
    Serial.println("USING THRESHOLDS FROM MEMORY");
   d5336:	490c      	ldr	r1, [pc, #48]	; (d5368 <_Z15igh_eeprom_initv+0xb4>)
    igh_current_threshold_settings = thresholds_in_memory;
   d5338:	4d0c      	ldr	r5, [pc, #48]	; (d536c <_Z15igh_eeprom_initv+0xb8>)
    igh_settings_reset_system_to_default();
    new_settings_available = 1;
  }
  else
  {
    Serial.println("USING THRESHOLDS FROM MEMORY");
   d533a:	f004 f81a 	bl	d9372 <_ZN5Print7printlnEPKc>
    igh_current_threshold_settings = thresholds_in_memory;
   d533e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5340:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5342:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5344:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5346:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5348:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d534a:	6823      	ldr	r3, [r4, #0]
   d534c:	602b      	str	r3, [r5, #0]
  }
}
   d534e:	b021      	add	sp, #132	; 0x84
   d5350:	bd30      	pop	{r4, r5, pc}
   d5352:	bf00      	nop
   d5354:	000dcfe4 	.word	0x000dcfe4
   d5358:	2003d8bc 	.word	0x2003d8bc
   d535c:	000dcffb 	.word	0x000dcffb
   d5360:	2003e604 	.word	0x2003e604
   d5364:	000dd016 	.word	0x000dd016
   d5368:	000dd02f 	.word	0x000dd02f
   d536c:	2003e650 	.word	0x2003e650

000d5370 <_Z34igh_eeprom_save_threshold_settingsP10thresholds>:
 * \brief Save threshold settings  to eeprom emulator
 * \param settings_to_save: pointer to struct to save
 * \return true or false based on write success
 */
uint8_t igh_eeprom_save_threshold_settings(thresholds * settings_to_save)
{
   d5370:	b510      	push	{r4, lr}
   d5372:	4604      	mov	r4, r0
   d5374:	b08e      	sub	sp, #56	; 0x38
    thresholds local_buffer;
    // save the data
    EEPROM.put(SYSTEM_THRESHOLDS_ADDRESS, *settings_to_save);
   d5376:	f005 fb6f 	bl	daa58 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d537a:	2234      	movs	r2, #52	; 0x34
   d537c:	4621      	mov	r1, r4
   d537e:	f44f 7000 	mov.w	r0, #512	; 0x200
   d5382:	f003 fa9d 	bl	d88c0 <HAL_EEPROM_Put>
    // check if data is saved
    igh_eeprom_read_threshold_settings(&local_buffer);
   d5386:	a801      	add	r0, sp, #4
   d5388:	f7ff ff6e 	bl	d5268 <_Z34igh_eeprom_read_threshold_settingsP10thresholds>

    if( local_buffer.checksum != (settings_to_save->checksum))
    {
        return 0;
   d538c:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d5390:	7823      	ldrb	r3, [r4, #0]
    }

    return 1;
}
   d5392:	1ac3      	subs	r3, r0, r3
   d5394:	4258      	negs	r0, r3
   d5396:	4158      	adcs	r0, r3
   d5398:	b00e      	add	sp, #56	; 0x38
   d539a:	bd10      	pop	{r4, pc}

000d539c <_GLOBAL__sub_I__Z15igh_eeprom_initv>:
   d539c:	f003 b9a8 	b.w	d86f0 <HAL_Pin_Map>

000d53a0 <_Z30igh_app_water_counter_callbackv>:
    water_flow_timer.start();
}

void igh_app_water_counter_callback( void )
{
    flow_meter_pulses++;
   d53a0:	4a02      	ldr	r2, [pc, #8]	; (d53ac <_Z30igh_app_water_counter_callbackv+0xc>)
   d53a2:	6813      	ldr	r3, [r2, #0]
   d53a4:	3301      	adds	r3, #1
   d53a6:	6013      	str	r3, [r2, #0]
   d53a8:	4770      	bx	lr
   d53aa:	bf00      	nop
   d53ac:	2003d980 	.word	0x2003d980

000d53b0 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d53b0:	6803      	ldr	r3, [r0, #0]
   d53b2:	4718      	bx	r3

000d53b4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d53b4:	2a01      	cmp	r2, #1
   d53b6:	d002      	beq.n	d53be <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d53b8:	2a02      	cmp	r2, #2
   d53ba:	d002      	beq.n	d53c2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d53bc:	e004      	b.n	d53c8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d53be:	6001      	str	r1, [r0, #0]
	      break;
   d53c0:	e002      	b.n	d53c8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d53c2:	680b      	ldr	r3, [r1, #0]
   d53c4:	b100      	cbz	r0, d53c8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d53c6:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d53c8:	2000      	movs	r0, #0
   d53ca:	4770      	bx	lr

000d53cc <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d53cc:	6943      	ldr	r3, [r0, #20]
   d53ce:	b113      	cbz	r3, d53d6 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d53d0:	6983      	ldr	r3, [r0, #24]
   d53d2:	300c      	adds	r0, #12
   d53d4:	4718      	bx	r3
   d53d6:	4770      	bx	lr

000d53d8 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d53d8:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d53da:	2100      	movs	r1, #0
   d53dc:	4604      	mov	r4, r0
   d53de:	4608      	mov	r0, r1
   d53e0:	f003 fa9e 	bl	d8920 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d53e4:	a902      	add	r1, sp, #8
   d53e6:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d53e8:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d53ea:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d53ee:	f003 faaf 	bl	d8950 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d53f2:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d53f4:	b10c      	cbz	r4, d53fa <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d53f6:	2301      	movs	r3, #1
   d53f8:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d53fa:	2100      	movs	r1, #0
   d53fc:	2001      	movs	r0, #1
   d53fe:	f003 fa8f 	bl	d8920 <os_thread_scheduling>
            }
        }
        if (t) {
   d5402:	b12c      	cbz	r4, d5410 <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d5404:	6823      	ldr	r3, [r4, #0]
   d5406:	4620      	mov	r0, r4
   d5408:	689b      	ldr	r3, [r3, #8]
   d540a:	4798      	blx	r3
            t->running = false;
   d540c:	2300      	movs	r3, #0
   d540e:	7123      	strb	r3, [r4, #4]
        }
    }
   d5410:	b002      	add	sp, #8
   d5412:	bd10      	pop	{r4, pc}

000d5414 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5414:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5416:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5418:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d541a:	b113      	cbz	r3, d5422 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d541c:	2203      	movs	r2, #3
   d541e:	4601      	mov	r1, r0
   d5420:	4798      	blx	r3
    }
   d5422:	4620      	mov	r0, r4
   d5424:	bd10      	pop	{r4, pc}
	...

000d5428 <_ZN5TimerC1EjSt8functionIFvvEEb>:
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d5428:	b5f0      	push	{r4, r5, r6, r7, lr}
   d542a:	2500      	movs	r5, #0
   d542c:	468e      	mov	lr, r1
   d542e:	4915      	ldr	r1, [pc, #84]	; (d5484 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   d5430:	7105      	strb	r5, [r0, #4]
   d5432:	6085      	str	r5, [r0, #8]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5434:	6145      	str	r5, [r0, #20]
   d5436:	6001      	str	r1, [r0, #0]
   d5438:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d543a:	e892 0003 	ldmia.w	r2, {r0, r1}
   d543e:	b085      	sub	sp, #20
   d5440:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d5442:	f104 060c 	add.w	r6, r4, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5446:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d544a:	e896 0003 	ldmia.w	r6, {r0, r1}
   d544e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5452:	e897 0003 	ldmia.w	r7, {r0, r1}
   d5456:	e886 0003 	stmia.w	r6, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d545a:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   d545c:	6960      	ldr	r0, [r4, #20]
   d545e:	6090      	str	r0, [r2, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5460:	6161      	str	r1, [r4, #20]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5462:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5464:	69a0      	ldr	r0, [r4, #24]
   d5466:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5468:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d546a:	e88d 0028 	stmia.w	sp, {r3, r5}
   d546e:	4a06      	ldr	r2, [pc, #24]	; (d5488 <_ZN5TimerC1EjSt8functionIFvvEEb+0x60>)
   d5470:	4623      	mov	r3, r4
   d5472:	4671      	mov	r1, lr
   d5474:	f104 0008 	add.w	r0, r4, #8
   d5478:	f003 fa5a 	bl	d8930 <os_timer_create>
    }
   d547c:	4620      	mov	r0, r4
   d547e:	b005      	add	sp, #20
   d5480:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5482:	bf00      	nop
   d5484:	000dd064 	.word	0x000dd064
   d5488:	000d53d9 	.word	0x000d53d9

000d548c <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d548c:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d548e:	6880      	ldr	r0, [r0, #8]
   d5490:	2300      	movs	r3, #0
   d5492:	b138      	cbz	r0, d54a4 <_ZN5Timer5_stopEjb+0x18>
   d5494:	e88d 000a 	stmia.w	sp, {r1, r3}
   d5498:	2102      	movs	r1, #2
   d549a:	f003 fa61 	bl	d8960 <os_timer_change>
   d549e:	fab0 f080 	clz	r0, r0
   d54a2:	0940      	lsrs	r0, r0, #5
    }
   d54a4:	b003      	add	sp, #12
   d54a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d54ac <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d54ac:	b538      	push	{r3, r4, r5, lr}
   d54ae:	4b10      	ldr	r3, [pc, #64]	; (d54f0 <_ZN5TimerD1Ev+0x44>)
   d54b0:	6003      	str	r3, [r0, #0]
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d54b2:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d54b4:	4604      	mov	r4, r0
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d54b6:	b1a3      	cbz	r3, d54e2 <_ZN5TimerD1Ev+0x36>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d54b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d54bc:	2200      	movs	r2, #0
   d54be:	f7ff ffe5 	bl	d548c <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d54c2:	2100      	movs	r1, #0
   d54c4:	68a0      	ldr	r0, [r4, #8]
   d54c6:	f003 fa63 	bl	d8990 <os_timer_set_id>
            while (running) {
   d54ca:	7923      	ldrb	r3, [r4, #4]
   d54cc:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d54d0:	b113      	cbz	r3, d54d8 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d54d2:	f003 fa0d 	bl	d88f0 <os_thread_yield>
   d54d6:	e7f8      	b.n	d54ca <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d54d8:	4629      	mov	r1, r5
   d54da:	68a0      	ldr	r0, [r4, #8]
   d54dc:	f003 fa30 	bl	d8940 <os_timer_destroy>
            handle = nullptr;
   d54e0:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d54e2:	f104 000c 	add.w	r0, r4, #12
   d54e6:	f7ff ff95 	bl	d5414 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d54ea:	4620      	mov	r0, r4
   d54ec:	bd38      	pop	{r3, r4, r5, pc}
   d54ee:	bf00      	nop
   d54f0:	000dd064 	.word	0x000dd064

000d54f4 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d54f4:	b510      	push	{r4, lr}
   d54f6:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d54f8:	f7ff ffd8 	bl	d54ac <_ZN5TimerD1Ev>
   d54fc:	4620      	mov	r0, r4
   d54fe:	211c      	movs	r1, #28
   d5500:	f005 fb4c 	bl	dab9c <_ZdlPvj>
   d5504:	4620      	mov	r0, r4
   d5506:	bd10      	pop	{r4, pc}

000d5508 <_ZN5Timer6_startEjb>:
    inline bool changePeriod(std::chrono::milliseconds ms, unsigned block=default_wait) { return changePeriod(ms.count(), block); }

    bool isValid() const { return handle!=nullptr; }
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
   d5508:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d550a:	4606      	mov	r6, r0
   d550c:	4614      	mov	r4, r2
   d550e:	460d      	mov	r5, r1
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d5510:	2200      	movs	r2, #0
   d5512:	4621      	mov	r1, r4
   d5514:	f7ff ffba 	bl	d548c <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d5518:	68b0      	ldr	r0, [r6, #8]
   d551a:	2300      	movs	r3, #0
   d551c:	b140      	cbz	r0, d5530 <_ZN5Timer6_startEjb+0x28>
   d551e:	9301      	str	r3, [sp, #4]
   d5520:	9500      	str	r5, [sp, #0]
   d5522:	4622      	mov	r2, r4
   d5524:	4619      	mov	r1, r3
   d5526:	f003 fa1b 	bl	d8960 <os_timer_change>
   d552a:	fab0 f080 	clz	r0, r0
   d552e:	0940      	lsrs	r0, r0, #5
    }
   d5530:	b002      	add	sp, #8
   d5532:	bd70      	pop	{r4, r5, r6, pc}

000d5534 <_Z32igh_hardware_service_valve_statev>:
    current_valve_position = VALVE_CLOSE;
}

void igh_hardware_service_valve_state(void)
{
    digitalWrite(IGH_IRRIGATION_VALVE, current_valve_position);
   d5534:	4b02      	ldr	r3, [pc, #8]	; (d5540 <_Z32igh_hardware_service_valve_statev+0xc>)
   d5536:	2007      	movs	r0, #7
   d5538:	7819      	ldrb	r1, [r3, #0]
   d553a:	f005 ba60 	b.w	da9fe <digitalWrite>
   d553e:	bf00      	nop
   d5540:	2003e64c 	.word	0x2003e64c

000d5544 <_Z26igh_boron_toggle_boron_ledh>:
}

/* Onboard LED APIs */
void igh_boron_toggle_boron_led(uint8_t _state)
{
    digitalWrite(BORON_LED, _state);
   d5544:	4601      	mov	r1, r0
   d5546:	2007      	movs	r0, #7
   d5548:	f005 ba59 	b.w	da9fe <digitalWrite>

000d554c <_Z21igh_boron_read_buttonv>:
    igh_button_timer.start();
    igh_button_sec_counter = 0;
}

uint8_t igh_boron_read_button(void)
{
   d554c:	b508      	push	{r3, lr}
    return digitalRead(IGH_IRRIGATION_BUTTON);
   d554e:	200f      	movs	r0, #15
   d5550:	f005 fa6e 	bl	daa30 <digitalRead>
}
   d5554:	b2c0      	uxtb	r0, r0
   d5556:	bd08      	pop	{r3, pc}

000d5558 <_Z31igh_boron_button_press_durationv>:

void igh_boron_button_press_duration(void)
{
   d5558:	b508      	push	{r3, lr}
    if(!igh_boron_read_button())
   d555a:	f7ff fff7 	bl	d554c <_Z21igh_boron_read_buttonv>
   d555e:	4b08      	ldr	r3, [pc, #32]	; (d5580 <_Z31igh_boron_button_press_durationv+0x28>)
   d5560:	b910      	cbnz	r0, d5568 <_Z31igh_boron_button_press_durationv+0x10>
    {
        igh_button_sec_counter++;
   d5562:	781a      	ldrb	r2, [r3, #0]
   d5564:	3201      	adds	r2, #1
   d5566:	e000      	b.n	d556a <_Z31igh_boron_button_press_durationv+0x12>
    }
    else
    {
        igh_button_sec_counter = 0;
   d5568:	2200      	movs	r2, #0
   d556a:	701a      	strb	r2, [r3, #0]
    } 

    if( igh_button_sec_counter >= THREE_SECONDS )
   d556c:	781b      	ldrb	r3, [r3, #0]
   d556e:	2b02      	cmp	r3, #2
    {
        // start or stop irrigation at any time with button
        button_irrigate = !button_irrigate;
   d5570:	bf81      	itttt	hi
   d5572:	4a04      	ldrhi	r2, [pc, #16]	; (d5584 <_Z31igh_boron_button_press_durationv+0x2c>)
   d5574:	7813      	ldrbhi	r3, [r2, #0]
   d5576:	f083 0301 	eorhi.w	r3, r3, #1
   d557a:	7013      	strbhi	r3, [r2, #0]
   d557c:	bd08      	pop	{r3, pc}
   d557e:	bf00      	nop
   d5580:	2003d98d 	.word	0x2003d98d
   d5584:	2003d985 	.word	0x2003d985

000d5588 <_Z27attach_flow_meter_interruptv>:
{
    flow_meter_pulses++;
}

void attach_flow_meter_interrupt( void )
{
   d5588:	b507      	push	{r0, r1, r2, lr}
    pinMode( IGH_WATER_FLOW_PIN, INPUT_PULLUP );
   d558a:	2102      	movs	r1, #2
   d558c:	2005      	movs	r0, #5
   d558e:	f005 fa25 	bl	da9dc <pinMode>
    attachInterrupt( IGH_WATER_FLOW_PIN , igh_app_water_counter_callback, FALLING );
   d5592:	2300      	movs	r3, #0
   d5594:	9300      	str	r3, [sp, #0]
   d5596:	2202      	movs	r2, #2
   d5598:	f04f 33ff 	mov.w	r3, #4294967295
   d559c:	4903      	ldr	r1, [pc, #12]	; (d55ac <_Z27attach_flow_meter_interruptv+0x24>)
   d559e:	2005      	movs	r0, #5
   d55a0:	f004 fc1c 	bl	d9ddc <_Z15attachInterrupttPFvvE13InterruptModeah>
}
   d55a4:	b003      	add	sp, #12
   d55a6:	f85d fb04 	ldr.w	pc, [sp], #4
   d55aa:	bf00      	nop
   d55ac:	000d53a1 	.word	0x000d53a1

000d55b0 <_Z29igh_hardware_water_flow_setupv>:

    }
}

void igh_hardware_water_flow_setup( void )
{
   d55b0:	b508      	push	{r3, lr}
    attach_flow_meter_interrupt();
   d55b2:	f7ff ffe9 	bl	d5588 <_Z27attach_flow_meter_interruptv>
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d55b6:	2200      	movs	r2, #0
   d55b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d55bc:	4801      	ldr	r0, [pc, #4]	; (d55c4 <_Z29igh_hardware_water_flow_setupv+0x14>)
   d55be:	f7ff ffa3 	bl	d5508 <_ZN5Timer6_startEjb>
   d55c2:	bd08      	pop	{r3, pc}
   d55c4:	2003d964 	.word	0x2003d964

000d55c8 <_Z18igh_hardware_setupv>:
Timer water_flow_timer(ONE_SECOND, igh_hardware_litres_service);



void igh_hardware_setup(void)
{
   d55c8:	b510      	push	{r4, lr}


/* Button APIs */
static void igh_hardware_irrigiation_button_setup(void)
{
    pinMode(IGH_IRRIGATION_BUTTON, INPUT_PULLUP);
   d55ca:	2102      	movs	r1, #2
   d55cc:	200f      	movs	r0, #15
   d55ce:	f005 fa05 	bl	da9dc <pinMode>
   d55d2:	2200      	movs	r2, #0
   d55d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d55d8:	480b      	ldr	r0, [pc, #44]	; (d5608 <_Z18igh_hardware_setupv+0x40>)
   d55da:	f7ff ff95 	bl	d5508 <_ZN5Timer6_startEjb>
    igh_button_timer.start();
    igh_button_sec_counter = 0;
   d55de:	4b0b      	ldr	r3, [pc, #44]	; (d560c <_Z18igh_hardware_setupv+0x44>)
   d55e0:	2400      	movs	r4, #0
    digitalWrite(BORON_LED, _state);
}

static void igh_hardware_onboard_led_setup(void)
{
    pinMode(BORON_LED, OUTPUT);
   d55e2:	2101      	movs	r1, #1
   d55e4:	2007      	movs	r0, #7
/* Button APIs */
static void igh_hardware_irrigiation_button_setup(void)
{
    pinMode(IGH_IRRIGATION_BUTTON, INPUT_PULLUP);
    igh_button_timer.start();
    igh_button_sec_counter = 0;
   d55e6:	701c      	strb	r4, [r3, #0]
    digitalWrite(BORON_LED, _state);
}

static void igh_hardware_onboard_led_setup(void)
{
    pinMode(BORON_LED, OUTPUT);
   d55e8:	f005 f9f8 	bl	da9dc <pinMode>
    igh_boron_toggle_boron_led(OFF);
   d55ec:	4620      	mov	r0, r4
   d55ee:	f7ff ffa9 	bl	d5544 <_Z26igh_boron_toggle_boron_ledh>


/* Valve control APIs */
static void igh_hardware_vlave_setup(void)
{
    pinMode(IGH_IRRIGATION_VALVE, OUTPUT);
   d55f2:	2101      	movs	r1, #1
   d55f4:	2007      	movs	r0, #7
   d55f6:	f005 f9f1 	bl	da9dc <pinMode>
    current_valve_position = VALVE_CLOSE;
   d55fa:	4b05      	ldr	r3, [pc, #20]	; (d5610 <_Z18igh_hardware_setupv+0x48>)
   d55fc:	701c      	strb	r4, [r3, #0]
{
    igh_hardware_irrigiation_button_setup();
    igh_hardware_onboard_led_setup();
    igh_hardware_vlave_setup();
    igh_hardware_water_flow_setup();
}
   d55fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void igh_hardware_setup(void)
{
    igh_hardware_irrigiation_button_setup();
    igh_hardware_onboard_led_setup();
    igh_hardware_vlave_setup();
    igh_hardware_water_flow_setup();
   d5602:	f7ff bfd5 	b.w	d55b0 <_Z29igh_hardware_water_flow_setupv>
   d5606:	bf00      	nop
   d5608:	2003d994 	.word	0x2003d994
   d560c:	2003d98d 	.word	0x2003d98d
   d5610:	2003e64c 	.word	0x2003e64c

000d5614 <_Z27detach_flow_meter_interruptv>:
    attachInterrupt( IGH_WATER_FLOW_PIN , igh_app_water_counter_callback, FALLING );
}

void detach_flow_meter_interrupt( void )
{
    detachInterrupt( IGH_WATER_FLOW_PIN );
   d5614:	2005      	movs	r0, #5
   d5616:	f004 bc09 	b.w	d9e2c <_Z15detachInterruptt>
	...

000d561c <_Z23igh_get_local_time_hourv>:
    // control valve state
    igh_hardware_water_management_service();
}

uint8_t igh_get_local_time_hour( void )
{
   d561c:	b508      	push	{r3, lr}
    int local_hour = 0;
    int utc_hour = 0;
    utc_hour = Time.hour();
   d561e:	f004 f901 	bl	d9824 <_ZN9TimeClass4hourEv>

    //correct to timezone
    local_hour = utc_hour + igh_current_system_settings.timezone;
   d5622:	4b05      	ldr	r3, [pc, #20]	; (d5638 <_Z23igh_get_local_time_hourv+0x1c>)
   d5624:	685b      	ldr	r3, [r3, #4]

    if( local_hour < 0 )
   d5626:	18c0      	adds	r0, r0, r3
   d5628:	d501      	bpl.n	d562e <_Z23igh_get_local_time_hourv+0x12>
    {
        local_hour += TWENTY_FOUR_HOURS;
   d562a:	3018      	adds	r0, #24
   d562c:	e002      	b.n	d5634 <_Z23igh_get_local_time_hourv+0x18>
    }
    else if( local_hour > TWENTY_FOUR_HOURS )
   d562e:	2818      	cmp	r0, #24
    {
        local_hour -= TWENTY_FOUR_HOURS;
   d5630:	bfc8      	it	gt
   d5632:	3818      	subgt	r0, #24
    }

    return (uint8_t)local_hour;
}
   d5634:	b2c0      	uxtb	r0, r0
   d5636:	bd08      	pop	{r3, pc}
   d5638:	2003e604 	.word	0x2003e604

000d563c <_Z37igh_hardware_water_management_servicev>:

void igh_hardware_water_management_service( void )
{
   d563c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d563e:	b085      	sub	sp, #20
    // This should run on a one second tick
    uint8_t current_hr = igh_get_local_time_hour();
   d5640:	f7ff ffec 	bl	d561c <_Z23igh_get_local_time_hourv>

    if( current_hr != previous_hr )
   d5644:	4b38      	ldr	r3, [pc, #224]	; (d5728 <_Z37igh_hardware_water_management_servicev+0xec>)
   d5646:	781a      	ldrb	r2, [r3, #0]
   d5648:	4282      	cmp	r2, r0
}

void igh_hardware_water_management_service( void )
{
    // This should run on a one second tick
    uint8_t current_hr = igh_get_local_time_hour();
   d564a:	4604      	mov	r4, r0
   d564c:	461d      	mov	r5, r3

    if( current_hr != previous_hr )
   d564e:	d02d      	beq.n	d56ac <_Z37igh_hardware_water_management_servicev+0x70>
    {
        if( current_hr == igh_current_system_settings.irrigation_hr )
   d5650:	4b36      	ldr	r3, [pc, #216]	; (d572c <_Z37igh_hardware_water_management_servicev+0xf0>)
   d5652:	7a1b      	ldrb	r3, [r3, #8]
   d5654:	4283      	cmp	r3, r0
   d5656:	d109      	bne.n	d566c <_Z37igh_hardware_water_management_servicev+0x30>
        {
            // it is ok to irrigat if it hits the irrigation hour
            ok_to_irrigate = true;
   d5658:	4b35      	ldr	r3, [pc, #212]	; (d5730 <_Z37igh_hardware_water_management_servicev+0xf4>)
   d565a:	2201      	movs	r2, #1
   d565c:	701a      	strb	r2, [r3, #0]
            time_t time = Time.now();
   d565e:	f004 f8da 	bl	d9816 <_ZN9TimeClass3nowEv>
   d5662:	4607      	mov	r7, r0
            Serial.print("IRRIGATION TIME STARTED: ");
   d5664:	f004 fb92 	bl	d9d8c <_Z16_fetch_usbserialv>
   d5668:	4932      	ldr	r1, [pc, #200]	; (d5734 <_Z37igh_hardware_water_management_servicev+0xf8>)
   d566a:	e00b      	b.n	d5684 <_Z37igh_hardware_water_management_servicev+0x48>
            Serial.println( Time.format(time, TIME_FORMAT_DEFAULT) );
        }
        else if( MIDNIGHT == current_hr )
   d566c:	b9e8      	cbnz	r0, d56aa <_Z37igh_hardware_water_management_servicev+0x6e>
        {
            // reset the system at midnight
            ok_to_irrigate = false;
   d566e:	4b30      	ldr	r3, [pc, #192]	; (d5730 <_Z37igh_hardware_water_management_servicev+0xf4>)
   d5670:	7018      	strb	r0, [r3, #0]
            total_water_dispensed_Liters = 0;
   d5672:	4b31      	ldr	r3, [pc, #196]	; (d5738 <_Z37igh_hardware_water_management_servicev+0xfc>)
   d5674:	2200      	movs	r2, #0
   d5676:	601a      	str	r2, [r3, #0]
            
            time_t time = Time.now();
   d5678:	f004 f8cd 	bl	d9816 <_ZN9TimeClass3nowEv>
   d567c:	4607      	mov	r7, r0
            Serial.print("RESETTING WATER PARAMS: ");
   d567e:	f004 fb85 	bl	d9d8c <_Z16_fetch_usbserialv>
   d5682:	492e      	ldr	r1, [pc, #184]	; (d573c <_Z37igh_hardware_water_management_servicev+0x100>)
   d5684:	f003 fe62 	bl	d934c <_ZN5Print5printEPKc>
            Serial.println( Time.format(time, TIME_FORMAT_DEFAULT) );
   d5688:	f004 fb80 	bl	d9d8c <_Z16_fetch_usbserialv>
   d568c:	4b2c      	ldr	r3, [pc, #176]	; (d5740 <_Z37igh_hardware_water_management_servicev+0x104>)
   d568e:	492d      	ldr	r1, [pc, #180]	; (d5744 <_Z37igh_hardware_water_management_servicev+0x108>)
   d5690:	681b      	ldr	r3, [r3, #0]
   d5692:	4606      	mov	r6, r0
   d5694:	463a      	mov	r2, r7
   d5696:	4668      	mov	r0, sp
   d5698:	f004 f86a 	bl	d9770 <_ZN9TimeClass6formatElPKc>
   d569c:	9900      	ldr	r1, [sp, #0]
   d569e:	4630      	mov	r0, r6
   d56a0:	f003 fe67 	bl	d9372 <_ZN5Print7printlnEPKc>
   d56a4:	4668      	mov	r0, sp
   d56a6:	f003 fd5d 	bl	d9164 <_ZN6StringD1Ev>
        }

        previous_hr = current_hr;
   d56aa:	702c      	strb	r4, [r5, #0]
    }

    if( true == button_irrigate )
   d56ac:	4b26      	ldr	r3, [pc, #152]	; (d5748 <_Z37igh_hardware_water_management_servicev+0x10c>)
   d56ae:	4927      	ldr	r1, [pc, #156]	; (d574c <_Z37igh_hardware_water_management_servicev+0x110>)
   d56b0:	781a      	ldrb	r2, [r3, #0]
   d56b2:	b1c2      	cbz	r2, d56e6 <_Z37igh_hardware_water_management_servicev+0xaa>
    {
        if( (water_dispensed_by_button < (float)igh_current_threshold_settings.water_dispensed_period_low) &&
   d56b4:	4a26      	ldr	r2, [pc, #152]	; (d5750 <_Z37igh_hardware_water_management_servicev+0x114>)
   d56b6:	edd2 7a06 	vldr	s15, [r2, #24]
   d56ba:	4a26      	ldr	r2, [pc, #152]	; (d5754 <_Z37igh_hardware_water_management_servicev+0x118>)
   d56bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d56c0:	ed92 7a00 	vldr	s14, [r2]
   d56c4:	eef4 7ac7 	vcmpe.f32	s15, s14
   d56c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d56cc:	dd07      	ble.n	d56de <_Z37igh_hardware_water_management_servicev+0xa2>
            (valve_open_seconds_counter < igh_current_system_settings.water_dispenser_period) )
   d56ce:	4a17      	ldr	r2, [pc, #92]	; (d572c <_Z37igh_hardware_water_management_servicev+0xf0>)
        previous_hr = current_hr;
    }

    if( true == button_irrigate )
    {
        if( (water_dispensed_by_button < (float)igh_current_threshold_settings.water_dispensed_period_low) &&
   d56d0:	68d0      	ldr	r0, [r2, #12]
   d56d2:	4a21      	ldr	r2, [pc, #132]	; (d5758 <_Z37igh_hardware_water_management_servicev+0x11c>)
   d56d4:	6812      	ldr	r2, [r2, #0]
   d56d6:	4290      	cmp	r0, r2
   d56d8:	d901      	bls.n	d56de <_Z37igh_hardware_water_management_servicev+0xa2>
            (valve_open_seconds_counter < igh_current_system_settings.water_dispenser_period) )
        {
            current_valve_position = VALVE_OPEN;
   d56da:	2301      	movs	r3, #1
   d56dc:	e020      	b.n	d5720 <_Z37igh_hardware_water_management_servicev+0xe4>
        }
        else
        {
            button_irrigate = false;
   d56de:	2200      	movs	r2, #0
   d56e0:	701a      	strb	r2, [r3, #0]
            current_valve_position = VALVE_CLOSE;
   d56e2:	700a      	strb	r2, [r1, #0]
   d56e4:	e01d      	b.n	d5722 <_Z37igh_hardware_water_management_servicev+0xe6>
        }
    }
    else
    {
        /* Only do auto irrigation if button irrigation is not set */
        if( true == ok_to_irrigate &&
   d56e6:	4b12      	ldr	r3, [pc, #72]	; (d5730 <_Z37igh_hardware_water_management_servicev+0xf4>)
   d56e8:	781b      	ldrb	r3, [r3, #0]
   d56ea:	b1c3      	cbz	r3, d571e <_Z37igh_hardware_water_management_servicev+0xe2>
        VALID_SOIL_DATA == refreshed_soil_data)
   d56ec:	4b1b      	ldr	r3, [pc, #108]	; (d575c <_Z37igh_hardware_water_management_servicev+0x120>)
        }
    }
    else
    {
        /* Only do auto irrigation if button irrigation is not set */
        if( true == ok_to_irrigate &&
   d56ee:	781b      	ldrb	r3, [r3, #0]
   d56f0:	2bff      	cmp	r3, #255	; 0xff
   d56f2:	d114      	bne.n	d571e <_Z37igh_hardware_water_management_servicev+0xe2>
        {
            /**
             * run the dispensor if we are within the dispensor window
             * and if we have valid sensor data
             * */
            if( soil_humidity < igh_current_threshold_settings.soil_humidity_low &&
   d56f4:	4b1a      	ldr	r3, [pc, #104]	; (d5760 <_Z37igh_hardware_water_management_servicev+0x124>)
   d56f6:	881a      	ldrh	r2, [r3, #0]
   d56f8:	4b15      	ldr	r3, [pc, #84]	; (d5750 <_Z37igh_hardware_water_management_servicev+0x114>)
   d56fa:	88d8      	ldrh	r0, [r3, #6]
   d56fc:	4290      	cmp	r0, r2
   d56fe:	d90e      	bls.n	d571e <_Z37igh_hardware_water_management_servicev+0xe2>
   d5700:	8c18      	ldrh	r0, [r3, #32]
   d5702:	4290      	cmp	r0, r2
   d5704:	d90b      	bls.n	d571e <_Z37igh_hardware_water_management_servicev+0xe2>
                soil_humidity < igh_current_threshold_settings.soil_humidity_high &&
   d5706:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
                total_water_dispensed_Liters < (float)igh_current_threshold_settings.water_dispensed_period_high )
   d570a:	4b0b      	ldr	r3, [pc, #44]	; (d5738 <_Z37igh_hardware_water_management_servicev+0xfc>)
            /**
             * run the dispensor if we are within the dispensor window
             * and if we have valid sensor data
             * */
            if( soil_humidity < igh_current_threshold_settings.soil_humidity_low &&
                soil_humidity < igh_current_threshold_settings.soil_humidity_high &&
   d570c:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d5710:	ed93 7a00 	vldr	s14, [r3]
   d5714:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d571c:	dcdd      	bgt.n	d56da <_Z37igh_hardware_water_management_servicev+0x9e>
            {
                /**
                 * close valve if even one of these conditions is not met
                 * current_valve_position <--- check this
                 * */
                current_valve_position = VALVE_CLOSE;
   d571e:	2300      	movs	r3, #0
   d5720:	700b      	strb	r3, [r1, #0]
        {
            // close valve
            current_valve_position = VALVE_CLOSE;
        }
    }
}
   d5722:	b005      	add	sp, #20
   d5724:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5726:	bf00      	nop
   d5728:	2003d98e 	.word	0x2003d98e
   d572c:	2003e604 	.word	0x2003e604
   d5730:	2003d984 	.word	0x2003d984
   d5734:	000dd070 	.word	0x000dd070
   d5738:	2003d9b4 	.word	0x2003d9b4
   d573c:	000dd08a 	.word	0x000dd08a
   d5740:	2003d800 	.word	0x2003d800
   d5744:	2003dfd4 	.word	0x2003dfd4
   d5748:	2003d985 	.word	0x2003d985
   d574c:	2003e64c 	.word	0x2003e64c
   d5750:	2003e650 	.word	0x2003e650
   d5754:	2003d988 	.word	0x2003d988
   d5758:	2003d990 	.word	0x2003d990
   d575c:	2003d98c 	.word	0x2003d98c
   d5760:	2003d9b0 	.word	0x2003d9b0

000d5764 <_Z37igh_hardware_valve_open_timer_servicev>:

void igh_hardware_valve_open_timer_service( void )
{
    // count for how many seconds the valve is open
    if( VALVE_OPEN == current_valve_position )
   d5764:	4b04      	ldr	r3, [pc, #16]	; (d5778 <_Z37igh_hardware_valve_open_timer_servicev+0x14>)
   d5766:	781b      	ldrb	r3, [r3, #0]
   d5768:	2b01      	cmp	r3, #1
   d576a:	4b04      	ldr	r3, [pc, #16]	; (d577c <_Z37igh_hardware_valve_open_timer_servicev+0x18>)
    {
        valve_open_seconds_counter++;
   d576c:	bf0a      	itet	eq
   d576e:	681a      	ldreq	r2, [r3, #0]
    }
    else
    {
        valve_open_seconds_counter = 0;
   d5770:	2200      	movne	r2, #0
void igh_hardware_valve_open_timer_service( void )
{
    // count for how many seconds the valve is open
    if( VALVE_OPEN == current_valve_position )
    {
        valve_open_seconds_counter++;
   d5772:	3201      	addeq	r2, #1
    }
    else
    {
        valve_open_seconds_counter = 0;
   d5774:	601a      	str	r2, [r3, #0]
   d5776:	4770      	bx	lr
   d5778:	2003e64c 	.word	0x2003e64c
   d577c:	2003d990 	.word	0x2003d990

000d5780 <_Z27igh_hardware_litres_servicev>:
{
    detachInterrupt( IGH_WATER_FLOW_PIN );
}

void igh_hardware_litres_service( void )
{
   d5780:	b510      	push	{r4, lr}
    uint32_t copy_flow_meter_pulses = 0;
    detach_flow_meter_interrupt();
   d5782:	f7ff ff47 	bl	d5614 <_Z27detach_flow_meter_interruptv>
    // copy the current flow meter pulses
    copy_flow_meter_pulses = flow_meter_pulses;
   d5786:	4b17      	ldr	r3, [pc, #92]	; (d57e4 <_Z27igh_hardware_litres_servicev+0x64>)
   d5788:	681c      	ldr	r4, [r3, #0]
    // reset and enable interrupts to avoid missing too many pulses
    flow_meter_pulses = 0;
   d578a:	2200      	movs	r2, #0
   d578c:	601a      	str	r2, [r3, #0]
    attach_flow_meter_interrupt();
   d578e:	f7ff fefb 	bl	d5588 <_Z27attach_flow_meter_interruptv>

    // because we are using a software timer, 
    // this routine will always happen once every second
    float flowRate = copy_flow_meter_pulses / FLOW_METER_CAL_FACTOR;
    float flow_Liters = flowRate / ONE_MIN;
   d5792:	4620      	mov	r0, r4
   d5794:	f005 fca0 	bl	db0d8 <__aeabi_ui2d>
   d5798:	2200      	movs	r2, #0
   d579a:	4b13      	ldr	r3, [pc, #76]	; (d57e8 <_Z27igh_hardware_litres_servicev+0x68>)
   d579c:	f005 fe3c 	bl	db418 <__aeabi_ddiv>
   d57a0:	f006 f808 	bl	db7b4 <__aeabi_d2f>
   d57a4:	eddf 7a11 	vldr	s15, [pc, #68]	; d57ec <_Z27igh_hardware_litres_servicev+0x6c>

    // add to the total amount of water flow
    total_water_dispensed_Liters += flow_Liters; 
   d57a8:	4b11      	ldr	r3, [pc, #68]	; (d57f0 <_Z27igh_hardware_litres_servicev+0x70>)
    attach_flow_meter_interrupt();

    // because we are using a software timer, 
    // this routine will always happen once every second
    float flowRate = copy_flow_meter_pulses / FLOW_METER_CAL_FACTOR;
    float flow_Liters = flowRate / ONE_MIN;
   d57aa:	ee07 0a10 	vmov	s14, r0
   d57ae:	eec7 6a27 	vdiv.f32	s13, s14, s15

    // add to the total amount of water flow
    total_water_dispensed_Liters += flow_Liters; 
   d57b2:	ed93 7a00 	vldr	s14, [r3]
   d57b6:	ee37 7a26 	vadd.f32	s14, s14, s13
   d57ba:	ed83 7a00 	vstr	s14, [r3]

    // if button is open, keep track of how much water is used up then
    if( true == button_irrigate )
   d57be:	4b0d      	ldr	r3, [pc, #52]	; (d57f4 <_Z27igh_hardware_litres_servicev+0x74>)
   d57c0:	781a      	ldrb	r2, [r3, #0]
   d57c2:	4b0d      	ldr	r3, [pc, #52]	; (d57f8 <_Z27igh_hardware_litres_servicev+0x78>)
   d57c4:	b132      	cbz	r2, d57d4 <_Z27igh_hardware_litres_servicev+0x54>
    {
        water_dispensed_by_button += flow_Liters;
   d57c6:	edd3 7a00 	vldr	s15, [r3]
   d57ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
   d57ce:	edc3 7a00 	vstr	s15, [r3]
   d57d2:	e001      	b.n	d57d8 <_Z27igh_hardware_litres_servicev+0x58>
    }
    else
    {
        water_dispensed_by_button = 0;
   d57d4:	2200      	movs	r2, #0
   d57d6:	601a      	str	r2, [r3, #0]
    }

    // keep track of valve open state
    igh_hardware_valve_open_timer_service();
   d57d8:	f7ff ffc4 	bl	d5764 <_Z37igh_hardware_valve_open_timer_servicev>
    // control valve state
    igh_hardware_water_management_service();
}
   d57dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }

    // keep track of valve open state
    igh_hardware_valve_open_timer_service();
    // control valve state
    igh_hardware_water_management_service();
   d57e0:	f7ff bf2c 	b.w	d563c <_Z37igh_hardware_water_management_servicev>
   d57e4:	2003d980 	.word	0x2003d980
   d57e8:	40120000 	.word	0x40120000
   d57ec:	42700000 	.word	0x42700000
   d57f0:	2003d9b4 	.word	0x2003d9b4
   d57f4:	2003d985 	.word	0x2003d985
   d57f8:	2003d988 	.word	0x2003d988

000d57fc <_GLOBAL__sub_I_liters_timer>:
    }
    else
    {
        valve_open_seconds_counter = 0;
    }
}
   d57fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
#define THREE_SECONDS          (3)


// button global variables
uint8_t igh_button_sec_counter;
Timer igh_button_timer(ONE_SECOND, igh_boron_button_press_duration);
   d5800:	f8df 807c 	ldr.w	r8, [pc, #124]	; d5880 <_GLOBAL__sub_I_liters_timer+0x84>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5804:	4f17      	ldr	r7, [pc, #92]	; (d5864 <_GLOBAL__sub_I_liters_timer+0x68>)
	    _M_manager = &_My_handler::_M_manager;
   d5806:	4c18      	ldr	r4, [pc, #96]	; (d5868 <_GLOBAL__sub_I_liters_timer+0x6c>)
   d5808:	4e18      	ldr	r6, [pc, #96]	; (d586c <_GLOBAL__sub_I_liters_timer+0x70>)
   d580a:	4d19      	ldr	r5, [pc, #100]	; (d5870 <_GLOBAL__sub_I_liters_timer+0x74>)
   d580c:	f002 ff70 	bl	d86f0 <HAL_Pin_Map>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d5810:	4b18      	ldr	r3, [pc, #96]	; (d5874 <_GLOBAL__sub_I_liters_timer+0x78>)
   d5812:	9300      	str	r3, [sp, #0]
   d5814:	466a      	mov	r2, sp
   d5816:	2300      	movs	r3, #0
   d5818:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d581c:	4640      	mov	r0, r8

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d581e:	9402      	str	r4, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5820:	9703      	str	r7, [sp, #12]
   d5822:	f7ff fe01 	bl	d5428 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5826:	4668      	mov	r0, sp
   d5828:	f7ff fdf4 	bl	d5414 <_ZNSt14_Function_baseD1Ev>
   d582c:	4632      	mov	r2, r6
   d582e:	4629      	mov	r1, r5
   d5830:	4640      	mov	r0, r8
   d5832:	f005 f9a5 	bl	dab80 <__aeabi_atexit>

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5836:	9402      	str	r4, [sp, #8]
static void igh_hardware_irrigiation_button_setup(void);
static void igh_hardware_onboard_led_setup(void);
static void igh_hardware_vlave_setup(void);
void igh_hardware_valve_open_timer_service( void );

Timer water_flow_timer(ONE_SECOND, igh_hardware_litres_service);
   d5838:	4c0f      	ldr	r4, [pc, #60]	; (d5878 <_GLOBAL__sub_I_liters_timer+0x7c>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d583a:	4b10      	ldr	r3, [pc, #64]	; (d587c <_GLOBAL__sub_I_liters_timer+0x80>)
   d583c:	9300      	str	r3, [sp, #0]
   d583e:	466a      	mov	r2, sp
   d5840:	2300      	movs	r3, #0
   d5842:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d5846:	4620      	mov	r0, r4
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5848:	9703      	str	r7, [sp, #12]
   d584a:	f7ff fded 	bl	d5428 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d584e:	4668      	mov	r0, sp
   d5850:	f7ff fde0 	bl	d5414 <_ZNSt14_Function_baseD1Ev>
   d5854:	4632      	mov	r2, r6
   d5856:	4629      	mov	r1, r5
   d5858:	4620      	mov	r0, r4
   d585a:	f005 f991 	bl	dab80 <__aeabi_atexit>
    }
    else
    {
        valve_open_seconds_counter = 0;
    }
}
   d585e:	b004      	add	sp, #16
   d5860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5864:	000d53b1 	.word	0x000d53b1
   d5868:	000d53b5 	.word	0x000d53b5
   d586c:	2003d8b8 	.word	0x2003d8b8
   d5870:	000d54ad 	.word	0x000d54ad
   d5874:	000d5559 	.word	0x000d5559
   d5878:	2003d964 	.word	0x2003d964
   d587c:	000d5781 	.word	0x000d5781
   d5880:	2003d994 	.word	0x2003d994

000d5884 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d5884:	7c03      	ldrb	r3, [r0, #16]
   d5886:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d588a:	4602      	mov	r2, r0
   d588c:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d5890:	b12b      	cbz	r3, d589e <_ZN4File9availableEv+0x1a>
   d5892:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d5894:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d5896:	1a18      	subs	r0, r3, r0
   d5898:	bf48      	it	mi
   d589a:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d589e:	4770      	bx	lr

000d58a0 <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
   d58a0:	4770      	bx	lr

000d58a2 <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d58a2:	4770      	bx	lr

000d58a4 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d58a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d58a6:	4602      	mov	r2, r0
   d58a8:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d58aa:	7913      	ldrb	r3, [r2, #4]
   d58ac:	6895      	ldr	r5, [r2, #8]
   d58ae:	b133      	cbz	r3, d58be <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d58b0:	b93d      	cbnz	r5, d58c2 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d58b2:	490c      	ldr	r1, [pc, #48]	; (d58e4 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d58b4:	b004      	add	sp, #16
   d58b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d58ba:	f003 bd47 	b.w	d934c <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d58be:	4b0a      	ldr	r3, [pc, #40]	; (d58e8 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d58c0:	e000      	b.n	d58c4 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d58c2:	4b0a      	ldr	r3, [pc, #40]	; (d58ec <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d58c4:	7b16      	ldrb	r6, [r2, #12]
   d58c6:	4c0a      	ldr	r4, [pc, #40]	; (d58f0 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d58c8:	490a      	ldr	r1, [pc, #40]	; (d58f4 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d58ca:	7b52      	ldrb	r2, [r2, #13]
   d58cc:	9202      	str	r2, [sp, #8]
   d58ce:	2e01      	cmp	r6, #1
   d58d0:	bf08      	it	eq
   d58d2:	4621      	moveq	r1, r4
   d58d4:	9101      	str	r1, [sp, #4]
   d58d6:	9500      	str	r5, [sp, #0]
   d58d8:	4a07      	ldr	r2, [pc, #28]	; (d58f8 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d58da:	2100      	movs	r1, #0
   d58dc:	f003 fe41 	bl	d9562 <_ZN5Print11printf_implEbPKcz>
  }
   d58e0:	b004      	add	sp, #16
   d58e2:	bd70      	pop	{r4, r5, r6, pc}
   d58e4:	000dd101 	.word	0x000dd101
   d58e8:	000dd2be 	.word	0x000dd2be
   d58ec:	000dd0f0 	.word	0x000dd0f0
   d58f0:	000dd0f9 	.word	0x000dd0f9
   d58f4:	000dd0fd 	.word	0x000dd0fd
   d58f8:	000dd117 	.word	0x000dd117

000d58fc <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d58fc:	3010      	adds	r0, #16
   d58fe:	f001 bd95 	b.w	d742c <_ZN7FatFile4syncEv>

000d5902 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d5902:	3010      	adds	r0, #16
   d5904:	f001 bc6c 	b.w	d71e0 <_ZN7FatFile4peekEv>

000d5908 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d5908:	3010      	adds	r0, #16
   d590a:	f001 be2f 	b.w	d756c <_ZN7FatFile5writeEPKvj>

000d590e <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d590e:	3008      	adds	r0, #8
   d5910:	f001 be2c 	b.w	d756c <_ZN7FatFile5writeEPKvj>

000d5914 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d5914:	b507      	push	{r0, r1, r2, lr}
   d5916:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d5918:	2201      	movs	r2, #1
   d591a:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d591e:	3010      	adds	r0, #16
   d5920:	4619      	mov	r1, r3
   d5922:	f001 fe23 	bl	d756c <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d5926:	b003      	add	sp, #12
   d5928:	f85d fb04 	ldr.w	pc, [sp], #4

000d592c <_ZN6SdFileD0Ev>:
   d592c:	b510      	push	{r4, lr}
   d592e:	212c      	movs	r1, #44	; 0x2c
   d5930:	4604      	mov	r4, r0
   d5932:	f005 f933 	bl	dab9c <_ZdlPvj>
   d5936:	4620      	mov	r0, r4
   d5938:	bd10      	pop	{r4, pc}

000d593a <_ZN4FileD0Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d593a:	b510      	push	{r4, lr}
   d593c:	2134      	movs	r1, #52	; 0x34
   d593e:	4604      	mov	r4, r0
   d5940:	f005 f92c 	bl	dab9c <_ZdlPvj>
   d5944:	4620      	mov	r0, r4
   d5946:	bd10      	pop	{r4, pc}

000d5948 <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d5948:	b507      	push	{r0, r1, r2, lr}
   d594a:	ab02      	add	r3, sp, #8
   d594c:	2201      	movs	r2, #1
   d594e:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d5952:	3008      	adds	r0, #8
   d5954:	4619      	mov	r1, r3
   d5956:	f001 fe09 	bl	d756c <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d595a:	b003      	add	sp, #12
   d595c:	f85d fb04 	ldr.w	pc, [sp], #4

000d5960 <_ZN7FatFile4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
   d5960:	b507      	push	{r0, r1, r2, lr}
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d5962:	2201      	movs	r2, #1
   d5964:	f10d 0107 	add.w	r1, sp, #7
   d5968:	f001 fb87 	bl	d707a <_ZN7FatFile4readEPvj>
   d596c:	2801      	cmp	r0, #1
   d596e:	bf0c      	ite	eq
   d5970:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d5974:	f04f 30ff 	movne.w	r0, #4294967295
  }
   d5978:	b003      	add	sp, #12
   d597a:	f85d fb04 	ldr.w	pc, [sp], #4

000d597e <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d597e:	b508      	push	{r3, lr}
    return FatFile::read();
   d5980:	3010      	adds	r0, #16
   d5982:	f7ff ffed 	bl	d5960 <_ZN7FatFile4readEv>
  }
   d5986:	bd08      	pop	{r3, pc}

000d5988 <_Z16igh_sd_log_setupv>:
 * convertedt to a character string
 * eg: 2E78FA2E.LOG
*/

uint8_t igh_sd_log_setup(void)
{
   d5988:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d598a:	4820      	ldr	r0, [pc, #128]	; (d5a0c <_Z16igh_sd_log_setupv+0x84>)
    if(sd_root.isOpen()) sd_root.close();
   d598c:	7a03      	ldrb	r3, [r0, #8]
   d598e:	b113      	cbz	r3, d5996 <_Z16igh_sd_log_setupv+0xe>
   d5990:	3008      	adds	r0, #8
   d5992:	f001 fd81 	bl	d7498 <_ZN7FatFile5closeEv>
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d5996:	4c1e      	ldr	r4, [pc, #120]	; (d5a10 <_Z16igh_sd_log_setupv+0x88>)
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d5998:	4b1e      	ldr	r3, [pc, #120]	; (d5a14 <_Z16igh_sd_log_setupv+0x8c>)
   d599a:	4a1f      	ldr	r2, [pc, #124]	; (d5a18 <_Z16igh_sd_log_setupv+0x90>)
   d599c:	9300      	str	r3, [sp, #0]
   d599e:	f504 668c 	add.w	r6, r4, #1120	; 0x460
   d59a2:	2300      	movs	r3, #0
   d59a4:	f88d 3004 	strb.w	r3, [sp, #4]
   d59a8:	9202      	str	r2, [sp, #8]
   d59aa:	2501      	movs	r5, #1
   d59ac:	f88d 300d 	strb.w	r3, [sp, #13]
   d59b0:	220e      	movs	r2, #14
   d59b2:	466b      	mov	r3, sp
   d59b4:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   d59b8:	4630      	mov	r0, r6
   d59ba:	f88d 500c 	strb.w	r5, [sp, #12]
   d59be:	f002 f91d 	bl	d7bfc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d59c2:	b300      	cbz	r0, d5a06 <_Z16igh_sd_log_setupv+0x7e>
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d59c4:	f204 403c 	addw	r0, r4, #1084	; 0x43c
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d59c8:	6026      	str	r6, [r4, #0]
    vwd()->close();
   d59ca:	f001 fd65 	bl	d7498 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d59ce:	4629      	mov	r1, r5
   d59d0:	4620      	mov	r0, r4
   d59d2:	f001 ffbc 	bl	d794e <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d59d6:	4601      	mov	r1, r0
   d59d8:	b180      	cbz	r0, d59fc <_Z16igh_sd_log_setupv+0x74>
   d59da:	4c0d      	ldr	r4, [pc, #52]	; (d5a10 <_Z16igh_sd_log_setupv+0x88>)
   d59dc:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   d59e0:	4621      	mov	r1, r4
   d59e2:	4628      	mov	r0, r5
   d59e4:	f001 fb31 	bl	d704a <_ZN7FatFile8openRootEP9FatVolume>
   d59e8:	b168      	cbz	r0, d5a06 <_Z16igh_sd_log_setupv+0x7e>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d59ea:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d59ee:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
   d59f2:	bf16      	itet	ne
   d59f4:	4b09      	ldrne	r3, [pc, #36]	; (d5a1c <_Z16igh_sd_log_setupv+0x94>)
   d59f6:	4618      	moveq	r0, r3
   d59f8:	601d      	strne	r5, [r3, #0]
   d59fa:	e005      	b.n	d5a08 <_Z16igh_sd_log_setupv+0x80>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d59fc:	4620      	mov	r0, r4
   d59fe:	f001 ffa6 	bl	d794e <_ZN9FatVolume4initEh>
   d5a02:	2800      	cmp	r0, #0
   d5a04:	d1e9      	bne.n	d59da <_Z16igh_sd_log_setupv+0x52>
   d5a06:	2000      	movs	r0, #0
    return igh_sd.begin(IGH_SD_CS);
}
   d5a08:	b004      	add	sp, #16
   d5a0a:	bd70      	pop	{r4, r5, r6, pc}
   d5a0c:	2003de74 	.word	0x2003de74
   d5a10:	2003d9f0 	.word	0x2003d9f0
   d5a14:	000dd0ac 	.word	0x000dd0ac
   d5a18:	02faf080 	.word	0x02faf080
   d5a1c:	2003df18 	.word	0x2003df18

000d5a20 <_Z24igh_sd_log_get_file_namemPc>:
{
    igh_file.rewindDirectory();
}

void igh_sd_log_get_file_name(unsigned long _unix_time, char * file_name)
{
   d5a20:	b507      	push	{r0, r1, r2, lr}
   d5a22:	4602      	mov	r2, r0
    sprintf(file_name, "%02X%02X%02X%02X.LOG", 
    (uint8_t)(_unix_time >> 24), 
    (uint8_t)(_unix_time >> 16), 
    (uint8_t)(_unix_time >> 8), 
    (uint8_t)(_unix_time));
   d5a24:	b2d3      	uxtb	r3, r2
   d5a26:	9301      	str	r3, [sp, #4]
   d5a28:	f3c2 2307 	ubfx	r3, r2, #8, #8
   d5a2c:	9300      	str	r3, [sp, #0]
{
    igh_file.rewindDirectory();
}

void igh_sd_log_get_file_name(unsigned long _unix_time, char * file_name)
{
   d5a2e:	4608      	mov	r0, r1
    sprintf(file_name, "%02X%02X%02X%02X.LOG", 
    (uint8_t)(_unix_time >> 24), 
    (uint8_t)(_unix_time >> 16), 
    (uint8_t)(_unix_time >> 8), 
    (uint8_t)(_unix_time));
   d5a30:	f3c2 4307 	ubfx	r3, r2, #16, #8
   d5a34:	4903      	ldr	r1, [pc, #12]	; (d5a44 <_Z24igh_sd_log_get_file_namemPc+0x24>)
   d5a36:	0e12      	lsrs	r2, r2, #24
   d5a38:	f003 f9ae 	bl	d8d98 <sprintf>
}
   d5a3c:	b003      	add	sp, #12
   d5a3e:	f85d fb04 	ldr.w	pc, [sp], #4
   d5a42:	bf00      	nop
   d5a44:	000dd135 	.word	0x000dd135

000d5a48 <_Z26igh_sd_log_save_data_pointmPhh>:

uint8_t igh_sd_log_save_data_point(unsigned long _unix_time, uint8_t * data, uint8_t size)
{
   d5a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5a4c:	b092      	sub	sp, #72	; 0x48
   d5a4e:	4688      	mov	r8, r1
    uint8_t ret = 0;
    char name[FILE_NAME_SIZE]; // include the null terminator?
    igh_sd_log_get_file_name(_unix_time, name);
   d5a50:	a901      	add	r1, sp, #4
    (uint8_t)(_unix_time >> 8), 
    (uint8_t)(_unix_time));
}

uint8_t igh_sd_log_save_data_point(unsigned long _unix_time, uint8_t * data, uint8_t size)
{
   d5a52:	4617      	mov	r7, r2
    uint8_t ret = 0;
    char name[FILE_NAME_SIZE]; // include the null terminator?
    igh_sd_log_get_file_name(_unix_time, name);
   d5a54:	f7ff ffe4 	bl	d5a20 <_Z24igh_sd_log_get_file_namemPc>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5a58:	2300      	movs	r3, #0
   d5a5a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d5a5e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5a62:	9306      	str	r3, [sp, #24]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5a64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5a68:	9307      	str	r3, [sp, #28]
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 public:
  File() {}
   d5a6a:	4b24      	ldr	r3, [pc, #144]	; (d5afc <_Z26igh_sd_log_save_data_pointmPhh+0xb4>)
   d5a6c:	9305      	str	r3, [sp, #20]
   * \param[in] oflag open flags.
   * \return a File object.
   */
  File open(const char *path, oflag_t oflag = FILE_READ) {
    File tmpFile;
    tmpFile.open(vwd(), path, oflag);
   d5a6e:	aa01      	add	r2, sp, #4
   d5a70:	f244 2302 	movw	r3, #16898	; 0x4202
   d5a74:	4922      	ldr	r1, [pc, #136]	; (d5b00 <_Z26igh_sd_log_save_data_pointmPhh+0xb8>)
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d5a76:	4e23      	ldr	r6, [pc, #140]	; (d5b04 <_Z26igh_sd_log_save_data_pointmPhh+0xbc>)
   d5a78:	a809      	add	r0, sp, #36	; 0x24
   d5a7a:	ac09      	add	r4, sp, #36	; 0x24
   d5a7c:	f001 fd13 	bl	d74a6 <_ZN7FatFile4openEPS_PKci>
   d5a80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5a82:	f106 0510 	add.w	r5, r6, #16
   d5a86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5a88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5a8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5a8c:	6823      	ldr	r3, [r4, #0]
   d5a8e:	602b      	str	r3, [r5, #0]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
   d5a90:	9b06      	ldr	r3, [sp, #24]
   d5a92:	6073      	str	r3, [r6, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   d5a94:	9b07      	ldr	r3, [sp, #28]
   d5a96:	60b3      	str	r3, [r6, #8]
   d5a98:	9b08      	ldr	r3, [sp, #32]
   d5a9a:	60f3      	str	r3, [r6, #12]
    igh_file = igh_sd.open((const char *)name, FILE_WRITE);

    Serial.print("Saving: "); Serial.print(name); Serial.print(" Size: "); Serial.print(size);
   d5a9c:	f004 f976 	bl	d9d8c <_Z16_fetch_usbserialv>
   d5aa0:	4919      	ldr	r1, [pc, #100]	; (d5b08 <_Z26igh_sd_log_save_data_pointmPhh+0xc0>)
   d5aa2:	f003 fc53 	bl	d934c <_ZN5Print5printEPKc>
   d5aa6:	f004 f971 	bl	d9d8c <_Z16_fetch_usbserialv>
   d5aaa:	a901      	add	r1, sp, #4
   d5aac:	f003 fc4e 	bl	d934c <_ZN5Print5printEPKc>
   d5ab0:	f004 f96c 	bl	d9d8c <_Z16_fetch_usbserialv>
   d5ab4:	4915      	ldr	r1, [pc, #84]	; (d5b0c <_Z26igh_sd_log_save_data_pointmPhh+0xc4>)
   d5ab6:	f003 fc49 	bl	d934c <_ZN5Print5printEPKc>
   d5aba:	f004 f967 	bl	d9d8c <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5abe:	220a      	movs	r2, #10
   d5ac0:	4639      	mov	r1, r7
   d5ac2:	f003 fc60 	bl	d9386 <_ZN5Print11printNumberEmh>

    if(igh_file)
   d5ac6:	7c34      	ldrb	r4, [r6, #16]
   d5ac8:	b15c      	cbz	r4, d5ae2 <_Z26igh_sd_log_save_data_pointmPhh+0x9a>
    {
        igh_file.write( data, size);
   d5aca:	463a      	mov	r2, r7
   d5acc:	4641      	mov	r1, r8
   d5ace:	4630      	mov	r0, r6
   d5ad0:	f7ff ff1a 	bl	d5908 <_ZN4File5writeEPKhj>
        Serial.println(" OK");
   d5ad4:	f004 f95a 	bl	d9d8c <_Z16_fetch_usbserialv>
   d5ad8:	490d      	ldr	r1, [pc, #52]	; (d5b10 <_Z26igh_sd_log_save_data_pointmPhh+0xc8>)
   d5ada:	f003 fc4a 	bl	d9372 <_ZN5Print7printlnEPKc>
        ret = 1;
   d5ade:	2401      	movs	r4, #1
   d5ae0:	e004      	b.n	d5aec <_Z26igh_sd_log_save_data_pointmPhh+0xa4>
    }
    else
    {
        Serial.println(" ERROR");
   d5ae2:	f004 f953 	bl	d9d8c <_Z16_fetch_usbserialv>
   d5ae6:	490b      	ldr	r1, [pc, #44]	; (d5b14 <_Z26igh_sd_log_save_data_pointmPhh+0xcc>)
   d5ae8:	f003 fc43 	bl	d9372 <_ZN5Print7printlnEPKc>
    }

    igh_file.close();
   d5aec:	480a      	ldr	r0, [pc, #40]	; (d5b18 <_Z26igh_sd_log_save_data_pointmPhh+0xd0>)
   d5aee:	f001 fcd3 	bl	d7498 <_ZN7FatFile5closeEv>
    return ret;
}
   d5af2:	4620      	mov	r0, r4
   d5af4:	b012      	add	sp, #72	; 0x48
   d5af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5afa:	bf00      	nop
   d5afc:	000dd0b8 	.word	0x000dd0b8
   d5b00:	2003de2c 	.word	0x2003de2c
   d5b04:	2003dea0 	.word	0x2003dea0
   d5b08:	000dd14a 	.word	0x000dd14a
   d5b0c:	000dd153 	.word	0x000dd153
   d5b10:	000dcdb8 	.word	0x000dcdb8
   d5b14:	000dcdc0 	.word	0x000dcdc0
   d5b18:	2003deb0 	.word	0x2003deb0

000d5b1c <_Z28igh_sd_log_remove_data_pointPc>:
  *
  * \return The value true is returned for success and
  * the value false is returned for failure.
  */
  bool remove(const char* path) {
    return FatFile::remove(vwd(), path);
   d5b1c:	4601      	mov	r1, r0
   d5b1e:	4801      	ldr	r0, [pc, #4]	; (d5b24 <_Z28igh_sd_log_remove_data_pointPc+0x8>)
   d5b20:	f001 bd10 	b.w	d7544 <_ZN7FatFile6removeEPS_PKc>
   d5b24:	2003de2c 	.word	0x2003de2c

000d5b28 <_Z26igh_sd_log_read_data_pointPcPhh>:
        return 1;
    }
}

uint8_t igh_sd_log_read_data_point(char * file_name, uint8_t * buffer, uint8_t data_length)
{
   d5b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5b2c:	b08e      	sub	sp, #56	; 0x38
   d5b2e:	4690      	mov	r8, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5b30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5b34:	9203      	str	r2, [sp, #12]
 public:
  File() {}
   d5b36:	4a18      	ldr	r2, [pc, #96]	; (d5b98 <_Z26igh_sd_log_read_data_pointPcPhh+0x70>)
   d5b38:	9201      	str	r2, [sp, #4]
   d5b3a:	2300      	movs	r3, #0
   * \param[in] oflag open flags.
   * \return a File object.
   */
  File open(const char *path, oflag_t oflag = FILE_READ) {
    File tmpFile;
    tmpFile.open(vwd(), path, oflag);
   d5b3c:	4602      	mov	r2, r0
   d5b3e:	460f      	mov	r7, r1
   d5b40:	a805      	add	r0, sp, #20
   d5b42:	4916      	ldr	r1, [pc, #88]	; (d5b9c <_Z26igh_sd_log_read_data_pointPcPhh+0x74>)
   d5b44:	f88d 3014 	strb.w	r3, [sp, #20]
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d5b48:	ac05      	add	r4, sp, #20
   d5b4a:	f88d 3015 	strb.w	r3, [sp, #21]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5b4e:	9302      	str	r3, [sp, #8]
   d5b50:	f001 fca9 	bl	d74a6 <_ZN7FatFile4openEPS_PKci>
   d5b54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5b56:	4e12      	ldr	r6, [pc, #72]	; (d5ba0 <_Z26igh_sd_log_read_data_pointPcPhh+0x78>)
   d5b58:	f106 0510 	add.w	r5, r6, #16
   d5b5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5b5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5b60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5b62:	6823      	ldr	r3, [r4, #0]
   d5b64:	602b      	str	r3, [r5, #0]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
   d5b66:	9b02      	ldr	r3, [sp, #8]
   d5b68:	6073      	str	r3, [r6, #4]
    igh_file = igh_sd.open( (const char *)file_name );
    if(igh_file)
   d5b6a:	7c30      	ldrb	r0, [r6, #16]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   d5b6c:	9b03      	ldr	r3, [sp, #12]
   d5b6e:	60b3      	str	r3, [r6, #8]
   d5b70:	9b04      	ldr	r3, [sp, #16]
   d5b72:	60f3      	str	r3, [r6, #12]
   d5b74:	b160      	cbz	r0, d5b90 <_Z26igh_sd_log_read_data_pointPcPhh+0x68>
   d5b76:	463c      	mov	r4, r7
    {
        for(int i = 0; i < data_length; i++)
   d5b78:	1be3      	subs	r3, r4, r7
   d5b7a:	4598      	cmp	r8, r3
        {
            buffer[i] = igh_file.read(); // read data_len number of chars
        }
        igh_file.close();
   d5b7c:	4809      	ldr	r0, [pc, #36]	; (d5ba4 <_Z26igh_sd_log_read_data_pointPcPhh+0x7c>)
uint8_t igh_sd_log_read_data_point(char * file_name, uint8_t * buffer, uint8_t data_length)
{
    igh_file = igh_sd.open( (const char *)file_name );
    if(igh_file)
    {
        for(int i = 0; i < data_length; i++)
   d5b7e:	dd04      	ble.n	d5b8a <_Z26igh_sd_log_read_data_pointPcPhh+0x62>
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    return FatFile::read();
   d5b80:	f7ff feee 	bl	d5960 <_ZN7FatFile4readEv>
        {
            buffer[i] = igh_file.read(); // read data_len number of chars
   d5b84:	f804 0b01 	strb.w	r0, [r4], #1
   d5b88:	e7f6      	b.n	d5b78 <_Z26igh_sd_log_read_data_pointPcPhh+0x50>
        }
        igh_file.close();
   d5b8a:	f001 fc85 	bl	d7498 <_ZN7FatFile5closeEv>
   d5b8e:	2001      	movs	r0, #1
    }
    else
    {
        return 0;
    }   
}
   d5b90:	b00e      	add	sp, #56	; 0x38
   d5b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5b96:	bf00      	nop
   d5b98:	000dd0b8 	.word	0x000dd0b8
   d5b9c:	2003de2c 	.word	0x2003de2c
   d5ba0:	2003dea0 	.word	0x2003dea0
   d5ba4:	2003deb0 	.word	0x2003deb0

000d5ba8 <_Z29igh_sd_log_get_next_file_namePc>:

uint8_t igh_sd_log_get_next_file_name(char * next_file_name)
{
   d5ba8:	b510      	push	{r4, lr}
   d5baa:	4604      	mov	r4, r0
    if(!igh_sd_log_setup())
   d5bac:	f7ff feec 	bl	d5988 <_Z16igh_sd_log_setupv>
   d5bb0:	b908      	cbnz	r0, d5bb6 <_Z29igh_sd_log_get_next_file_namePc+0xe>
    {
        return 0;
   d5bb2:	2000      	movs	r0, #0
   d5bb4:	bd10      	pop	{r4, pc}
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d5bb6:	4910      	ldr	r1, [pc, #64]	; (d5bf8 <_Z29igh_sd_log_get_next_file_namePc+0x50>)
   d5bb8:	4a10      	ldr	r2, [pc, #64]	; (d5bfc <_Z29igh_sd_log_get_next_file_namePc+0x54>)
   d5bba:	6809      	ldr	r1, [r1, #0]
   d5bbc:	4810      	ldr	r0, [pc, #64]	; (d5c00 <_Z29igh_sd_log_get_next_file_namePc+0x58>)
   d5bbe:	2300      	movs	r3, #0
   d5bc0:	f001 fc71 	bl	d74a6 <_ZN7FatFile4openEPS_PKci>
    }

    if (!sd_root.open("/"))
   d5bc4:	2800      	cmp	r0, #0
   d5bc6:	d0f4      	beq.n	d5bb2 <_Z29igh_sd_log_get_next_file_namePc+0xa>
    {
        return 0;
    }
    else
    {
        next_file.openNext(&sd_root, O_RDONLY); // skip one index
   d5bc8:	2200      	movs	r2, #0
   d5bca:	490d      	ldr	r1, [pc, #52]	; (d5c00 <_Z29igh_sd_log_get_next_file_namePc+0x58>)
   d5bcc:	480d      	ldr	r0, [pc, #52]	; (d5c04 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d5bce:	f001 fbee 	bl	d73ae <_ZN7FatFile8openNextEPS_i>
        next_file.close(); 
   d5bd2:	480c      	ldr	r0, [pc, #48]	; (d5c04 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d5bd4:	f001 fc60 	bl	d7498 <_ZN7FatFile5closeEv>
        if( next_file.openNext(&sd_root, O_RDONLY) )
   d5bd8:	2200      	movs	r2, #0
   d5bda:	4909      	ldr	r1, [pc, #36]	; (d5c00 <_Z29igh_sd_log_get_next_file_namePc+0x58>)
   d5bdc:	4809      	ldr	r0, [pc, #36]	; (d5c04 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d5bde:	f001 fbe6 	bl	d73ae <_ZN7FatFile8openNextEPS_i>
   d5be2:	2800      	cmp	r0, #0
   d5be4:	d0e5      	beq.n	d5bb2 <_Z29igh_sd_log_get_next_file_namePc+0xa>
        {
            next_file.getSFN(next_file_name);
   d5be6:	4621      	mov	r1, r4
   d5be8:	4806      	ldr	r0, [pc, #24]	; (d5c04 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d5bea:	f001 f991 	bl	d6f10 <_ZN7FatFile6getSFNEPc>
            next_file.close(); 
   d5bee:	4805      	ldr	r0, [pc, #20]	; (d5c04 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d5bf0:	f001 fc52 	bl	d7498 <_ZN7FatFile5closeEv>
   d5bf4:	2001      	movs	r0, #1
        else
        {
            return 0;
        }    
    }
}
   d5bf6:	bd10      	pop	{r4, pc}
   d5bf8:	2003df18 	.word	0x2003df18
   d5bfc:	000dd15b 	.word	0x000dd15b
   d5c00:	2003de7c 	.word	0x2003de7c
   d5c04:	2003d9cc 	.word	0x2003d9cc

000d5c08 <_GLOBAL__sub_I_igh_sd>:
    {
        return 0;
    }

    return 1;
   d5c08:	b570      	push	{r4, r5, r6, lr}
   d5c0a:	f002 fd71 	bl	d86f0 <HAL_Pin_Map>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d5c0e:	4b27      	ldr	r3, [pc, #156]	; (d5cac <_GLOBAL__sub_I_igh_sd+0xa4>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5c10:	4e27      	ldr	r6, [pc, #156]	; (d5cb0 <_GLOBAL__sub_I_igh_sd+0xa8>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d5c12:	2164      	movs	r1, #100	; 0x64
   d5c14:	f883 1460 	strb.w	r1, [r3, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d5c18:	4926      	ldr	r1, [pc, #152]	; (d5cb4 <_GLOBAL__sub_I_igh_sd+0xac>)
   d5c1a:	f8c3 1470 	str.w	r1, [r3, #1136]	; 0x470
   d5c1e:	2101      	movs	r1, #1
   d5c20:	f883 1474 	strb.w	r1, [r3, #1140]	; 0x474
   d5c24:	6831      	ldr	r1, [r6, #0]
   d5c26:	2200      	movs	r2, #0
   d5c28:	f011 0501 	ands.w	r5, r1, #1
   d5c2c:	71da      	strb	r2, [r3, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5c2e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
   d5c32:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
   d5c36:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
   d5c3a:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   d5c3e:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
   d5c42:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
   d5c46:	461c      	mov	r4, r3
   d5c48:	d10a      	bne.n	d5c60 <_GLOBAL__sub_I_igh_sd+0x58>
   d5c4a:	4630      	mov	r0, r6
   d5c4c:	f7fe fa2d 	bl	d40aa <__cxa_guard_acquire>
   d5c50:	b130      	cbz	r0, d5c60 <_GLOBAL__sub_I_igh_sd+0x58>
   d5c52:	4629      	mov	r1, r5
   d5c54:	4818      	ldr	r0, [pc, #96]	; (d5cb8 <_GLOBAL__sub_I_igh_sd+0xb0>)
   d5c56:	f003 f923 	bl	d8ea0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5c5a:	4630      	mov	r0, r6
   d5c5c:	f7fe fa2a 	bl	d40b4 <__cxa_guard_release>
   d5c60:	4816      	ldr	r0, [pc, #88]	; (d5cbc <_GLOBAL__sub_I_igh_sd+0xb4>)
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d5c62:	4b15      	ldr	r3, [pc, #84]	; (d5cb8 <_GLOBAL__sub_I_igh_sd+0xb0>)
   d5c64:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d5c68:	2400      	movs	r4, #0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5c6e:	7404      	strb	r4, [r0, #16]
   d5c70:	7444      	strb	r4, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5c72:	6044      	str	r4, [r0, #4]
   d5c74:	6083      	str	r3, [r0, #8]
#include <SPI.h>
#include "SdFat.h"
#include "igh_sd_log.h"

SdFat igh_sd;
File igh_file;
   d5c76:	4a12      	ldr	r2, [pc, #72]	; (d5cc0 <_GLOBAL__sub_I_igh_sd+0xb8>)
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 public:
  File() {}
   d5c78:	4b12      	ldr	r3, [pc, #72]	; (d5cc4 <_GLOBAL__sub_I_igh_sd+0xbc>)
   d5c7a:	4913      	ldr	r1, [pc, #76]	; (d5cc8 <_GLOBAL__sub_I_igh_sd+0xc0>)
   d5c7c:	6003      	str	r3, [r0, #0]
   d5c7e:	f004 ff7f 	bl	dab80 <__aeabi_atexit>
   d5c82:	4812      	ldr	r0, [pc, #72]	; (d5ccc <_GLOBAL__sub_I_igh_sd+0xc4>)
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 public:
  SdFile() {}
   d5c84:	4d12      	ldr	r5, [pc, #72]	; (d5cd0 <_GLOBAL__sub_I_igh_sd+0xc8>)
   d5c86:	7204      	strb	r4, [r0, #8]
   d5c88:	7244      	strb	r4, [r0, #9]
   d5c8a:	6044      	str	r4, [r0, #4]
SdFile sd_root;
   d5c8c:	4a0c      	ldr	r2, [pc, #48]	; (d5cc0 <_GLOBAL__sub_I_igh_sd+0xb8>)
   d5c8e:	4911      	ldr	r1, [pc, #68]	; (d5cd4 <_GLOBAL__sub_I_igh_sd+0xcc>)
   d5c90:	6005      	str	r5, [r0, #0]
   d5c92:	f004 ff75 	bl	dab80 <__aeabi_atexit>
   d5c96:	4810      	ldr	r0, [pc, #64]	; (d5cd8 <_GLOBAL__sub_I_igh_sd+0xd0>)
SdFile next_file;
   d5c98:	4a09      	ldr	r2, [pc, #36]	; (d5cc0 <_GLOBAL__sub_I_igh_sd+0xb8>)
   d5c9a:	7204      	strb	r4, [r0, #8]
   d5c9c:	7244      	strb	r4, [r0, #9]
   d5c9e:	6044      	str	r4, [r0, #4]
   d5ca0:	6005      	str	r5, [r0, #0]
   d5ca2:	490c      	ldr	r1, [pc, #48]	; (d5cd4 <_GLOBAL__sub_I_igh_sd+0xcc>)
    {
        return 0;
    }

    return 1;
   d5ca4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#include "igh_sd_log.h"

SdFat igh_sd;
File igh_file;
SdFile sd_root;
SdFile next_file;
   d5ca8:	f004 bf6a 	b.w	dab80 <__aeabi_atexit>
   d5cac:	2003d9f0 	.word	0x2003d9f0
   d5cb0:	2003d9b8 	.word	0x2003d9b8
   d5cb4:	000dd0ac 	.word	0x000dd0ac
   d5cb8:	2003d9bc 	.word	0x2003d9bc
   d5cbc:	2003dea0 	.word	0x2003dea0
   d5cc0:	2003d8b8 	.word	0x2003d8b8
   d5cc4:	000dd0b8 	.word	0x000dd0b8
   d5cc8:	000d58a3 	.word	0x000d58a3
   d5ccc:	2003de74 	.word	0x2003de74
   d5cd0:	000dd0e0 	.word	0x000dd0e0
   d5cd4:	000d58a1 	.word	0x000d58a1
   d5cd8:	2003d9c4 	.word	0x2003d9c4

000d5cdc <_ZN14CellularSignalD1Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d5cdc:	4770      	bx	lr

000d5cde <_ZN14CellularSignalD0Ev>:
   d5cde:	b510      	push	{r4, lr}
   d5ce0:	2128      	movs	r1, #40	; 0x28
   d5ce2:	4604      	mov	r4, r0
   d5ce4:	f004 ff5a 	bl	dab9c <_ZdlPvj>
   d5ce8:	4620      	mov	r0, r4
   d5cea:	bd10      	pop	{r4, pc}

000d5cec <_Z19igh_boron_sync_timev>:
/* Local function prototypes */
uint8_t get_int_from_str( uint8_t num );

/* Functions */
void igh_boron_sync_time(void)
{
   d5cec:	b510      	push	{r4, lr}
   d5cee:	f002 fdc7 	bl	d8880 <HAL_Timer_Get_Milli_Seconds>
    if((millis() - lastSync > ONE_DAY_MILLIS))
   d5cf2:	4b08      	ldr	r3, [pc, #32]	; (d5d14 <_Z19igh_boron_sync_timev+0x28>)
   d5cf4:	681a      	ldr	r2, [r3, #0]
   d5cf6:	1a80      	subs	r0, r0, r2
   d5cf8:	4a07      	ldr	r2, [pc, #28]	; (d5d18 <_Z19igh_boron_sync_timev+0x2c>)
   d5cfa:	4290      	cmp	r0, r2
   d5cfc:	461c      	mov	r4, r3
   d5cfe:	d908      	bls.n	d5d12 <_Z19igh_boron_sync_timev+0x26>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5d00:	f003 f80a 	bl	d8d18 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d5d04:	b110      	cbz	r0, d5d0c <_Z19igh_boron_sync_timev+0x20>
            return false;
        }
        return spark_sync_time(NULL);
   d5d06:	2000      	movs	r0, #0
   d5d08:	f003 f816 	bl	d8d38 <spark_sync_time>
   d5d0c:	f002 fdb8 	bl	d8880 <HAL_Timer_Get_Milli_Seconds>
    {
        Particle.syncTime();
        lastSync = millis(); 
   d5d10:	6020      	str	r0, [r4, #0]
   d5d12:	bd10      	pop	{r4, pc}
   d5d14:	2003defc 	.word	0x2003defc
   d5d18:	05265c00 	.word	0x05265c00

000d5d1c <_Z19igh_boron_unix_timev>:
    }
}

uint32_t igh_boron_unix_time(void)
{
    return (uint32_t)Time.now();
   d5d1c:	f003 bd7b 	b.w	d9816 <_ZN9TimeClass3nowEv>

000d5d20 <_Z13igh_boron_SoCv>:
}

float igh_boron_SoC(void)
{
    return fuel.getSoC();
   d5d20:	4801      	ldr	r0, [pc, #4]	; (d5d28 <_Z13igh_boron_SoCv+0x8>)
   d5d22:	f003 be91 	b.w	d9a48 <_ZN9FuelGauge6getSoCEv>
   d5d26:	bf00      	nop
   d5d28:	2003df00 	.word	0x2003df00

000d5d2c <_Z16get_int_from_strh>:
        k++; j++;
    }
}

uint8_t get_int_from_str( uint8_t num )
{
   d5d2c:	b510      	push	{r4, lr}
    unsigned long location = (unsigned long)strchr(hex_digits_LC, num);
   d5d2e:	4c04      	ldr	r4, [pc, #16]	; (d5d40 <_Z16get_int_from_strh+0x14>)
   d5d30:	4601      	mov	r1, r0
   d5d32:	4620      	mov	r0, r4
   d5d34:	f005 ff1a 	bl	dbb6c <strchr>
    unsigned long origin = (unsigned long)hex_digits_LC;
    return uint8_t(location - origin);
   d5d38:	1b00      	subs	r0, r0, r4
}
   d5d3a:	b2c0      	uxtb	r0, r0
   d5d3c:	bd10      	pop	{r4, pc}
   d5d3e:	bf00      	nop
   d5d40:	2003d7ec 	.word	0x2003d7ec

000d5d44 <_Z15igh_boron_setupv>:
{
    return Particle.connected();;
}

void igh_boron_setup(void)
{
   d5d44:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d5d48:	f002 fd9a 	bl	d8880 <HAL_Timer_Get_Milli_Seconds>
    lastSync = millis();
   d5d4c:	4b14      	ldr	r3, [pc, #80]	; (d5da0 <_Z15igh_boron_setupv+0x5c>)
   d5d4e:	6018      	str	r0, [r3, #0]
   d5d50:	4668      	mov	r0, sp
   d5d52:	f002 ffe9 	bl	d8d28 <spark_deviceID>
    // get serial number 
    memcpy( deviceID_string, System.deviceID(), sizeof(deviceID_string) );
   d5d56:	9b00      	ldr	r3, [sp, #0]
   d5d58:	4a12      	ldr	r2, [pc, #72]	; (d5da4 <_Z15igh_boron_setupv+0x60>)
   d5d5a:	f103 0118 	add.w	r1, r3, #24
   d5d5e:	4617      	mov	r7, r2
   d5d60:	f853 0b04 	ldr.w	r0, [r3], #4
   d5d64:	f842 0b04 	str.w	r0, [r2], #4
   d5d68:	428b      	cmp	r3, r1
   d5d6a:	d1f9      	bne.n	d5d60 <_Z15igh_boron_setupv+0x1c>
   d5d6c:	4668      	mov	r0, sp
   d5d6e:	f003 f9f9 	bl	d9164 <_ZN6StringD1Ev>
   d5d72:	4e0d      	ldr	r6, [pc, #52]	; (d5da8 <_Z15igh_boron_setupv+0x64>)
   d5d74:	2500      	movs	r5, #0

    uint8_t k = 0; uint8_t j = 0;
    while( k < sizeof(deviceID_string) )
    {
        boron_serial_number[j] = get_int_from_str(deviceID_string[k]) << 4;
   d5d76:	5d78      	ldrb	r0, [r7, r5]
   d5d78:	f7ff ffd8 	bl	d5d2c <_Z16get_int_from_strh>
   d5d7c:	eb07 0805 	add.w	r8, r7, r5
   d5d80:	0100      	lsls	r0, r0, #4
   d5d82:	b2c4      	uxtb	r4, r0
        k++;
        boron_serial_number[j] |= get_int_from_str(deviceID_string[k]);
   d5d84:	f898 0001 	ldrb.w	r0, [r8, #1]
    memcpy( deviceID_string, System.deviceID(), sizeof(deviceID_string) );

    uint8_t k = 0; uint8_t j = 0;
    while( k < sizeof(deviceID_string) )
    {
        boron_serial_number[j] = get_int_from_str(deviceID_string[k]) << 4;
   d5d88:	f806 4f01 	strb.w	r4, [r6, #1]!
        k++;
        boron_serial_number[j] |= get_int_from_str(deviceID_string[k]);
   d5d8c:	f7ff ffce 	bl	d5d2c <_Z16get_int_from_strh>
   d5d90:	3502      	adds	r5, #2
   d5d92:	4320      	orrs	r0, r4
    lastSync = millis();
    // get serial number 
    memcpy( deviceID_string, System.deviceID(), sizeof(deviceID_string) );

    uint8_t k = 0; uint8_t j = 0;
    while( k < sizeof(deviceID_string) )
   d5d94:	2d18      	cmp	r5, #24
    {
        boron_serial_number[j] = get_int_from_str(deviceID_string[k]) << 4;
        k++;
        boron_serial_number[j] |= get_int_from_str(deviceID_string[k]);
   d5d96:	7030      	strb	r0, [r6, #0]
    lastSync = millis();
    // get serial number 
    memcpy( deviceID_string, System.deviceID(), sizeof(deviceID_string) );

    uint8_t k = 0; uint8_t j = 0;
    while( k < sizeof(deviceID_string) )
   d5d98:	d1ed      	bne.n	d5d76 <_Z15igh_boron_setupv+0x32>
        boron_serial_number[j] = get_int_from_str(deviceID_string[k]) << 4;
        k++;
        boron_serial_number[j] |= get_int_from_str(deviceID_string[k]);
        k++; j++;
    }
}
   d5d9a:	b004      	add	sp, #16
   d5d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5da0:	2003defc 	.word	0x2003defc
   d5da4:	2003e684 	.word	0x2003e684
   d5da8:	2003e69b 	.word	0x2003e69b

000d5dac <_Z17igh_boron_servicev>:
    return uint8_t(location - origin);
}

void igh_boron_service(void)
{
    igh_boron_sync_time();
   d5dac:	f7ff bf9e 	b.w	d5cec <_Z19igh_boron_sync_timev>

000d5db0 <_GLOBAL__sub_I_lastSync>:
    Serial.print("network status:   "); Serial.println(igh_boron_connecetd_to_network());
    Serial.print("signal strength:  "); Serial.println(igh_boron_ss());
    Serial.print("signal quality:   "); Serial.println(igh_boron_sq());
    Serial.print("Battery Voltage:  "); Serial.println(igh_boron_voltage());
    Serial.print("Battery SOC:      "); Serial.println(igh_boron_SoC());
   d5db0:	b570      	push	{r4, r5, r6, lr}
   d5db2:	f002 fc9d 	bl	d86f0 <HAL_Pin_Map>
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d5db6:	4c10      	ldr	r4, [pc, #64]	; (d5df8 <_GLOBAL__sub_I_lastSync+0x48>)
   d5db8:	4b10      	ldr	r3, [pc, #64]	; (d5dfc <_GLOBAL__sub_I_lastSync+0x4c>)
   d5dba:	6023      	str	r3, [r4, #0]
   d5dbc:	2500      	movs	r5, #0
   d5dbe:	3328      	adds	r3, #40	; 0x28
   d5dc0:	4629      	mov	r1, r5
#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)

unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
   d5dc2:	4e0f      	ldr	r6, [pc, #60]	; (d5e00 <_GLOBAL__sub_I_lastSync+0x50>)
   d5dc4:	6063      	str	r3, [r4, #4]
   d5dc6:	2218      	movs	r2, #24
   d5dc8:	f104 0010 	add.w	r0, r4, #16
   d5dcc:	60a5      	str	r5, [r4, #8]
   d5dce:	60e5      	str	r5, [r4, #12]
   d5dd0:	f005 fe9c 	bl	dbb0c <memset>
   d5dd4:	4620      	mov	r0, r4
float signal_quality, signal_strength;
FuelGauge fuel;
   d5dd6:	4c0b      	ldr	r4, [pc, #44]	; (d5e04 <_GLOBAL__sub_I_lastSync+0x54>)
#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)

unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
   d5dd8:	490b      	ldr	r1, [pc, #44]	; (d5e08 <_GLOBAL__sub_I_lastSync+0x58>)
   d5dda:	4632      	mov	r2, r6
   d5ddc:	f004 fed0 	bl	dab80 <__aeabi_atexit>
float signal_quality, signal_strength;
FuelGauge fuel;
   d5de0:	4629      	mov	r1, r5
   d5de2:	4620      	mov	r0, r4
   d5de4:	f003 fdf0 	bl	d99c8 <_ZN9FuelGaugeC1Eb>
   d5de8:	4632      	mov	r2, r6
   d5dea:	4620      	mov	r0, r4
   d5dec:	4907      	ldr	r1, [pc, #28]	; (d5e0c <_GLOBAL__sub_I_lastSync+0x5c>)
    Serial.print("network status:   "); Serial.println(igh_boron_connecetd_to_network());
    Serial.print("signal strength:  "); Serial.println(igh_boron_ss());
    Serial.print("signal quality:   "); Serial.println(igh_boron_sq());
    Serial.print("Battery Voltage:  "); Serial.println(igh_boron_voltage());
    Serial.print("Battery SOC:      "); Serial.println(igh_boron_SoC());
   d5dee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
float signal_quality, signal_strength;
FuelGauge fuel;
   d5df2:	f004 bec5 	b.w	dab80 <__aeabi_atexit>
   d5df6:	bf00      	nop
   d5df8:	2003ded4 	.word	0x2003ded4
   d5dfc:	000dd328 	.word	0x000dd328
   d5e00:	2003d8b8 	.word	0x2003d8b8
   d5e04:	2003df00 	.word	0x2003df00
   d5e08:	000d5cdd 	.word	0x000d5cdd
   d5e0c:	000d99e7 	.word	0x000d99e7

000d5e10 <_Z21igh_rfm69_set_bitratehh>:
    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
} 

void igh_rfm69_set_bitrate(uint8_t msb, uint8_t lsb)
{
   d5e10:	b538      	push	{r3, r4, r5, lr}
    igh_radio.writeReg(REG_BITRATEMSB, msb); 
   d5e12:	4c07      	ldr	r4, [pc, #28]	; (d5e30 <_Z21igh_rfm69_set_bitratehh+0x20>)
    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
} 

void igh_rfm69_set_bitrate(uint8_t msb, uint8_t lsb)
{
   d5e14:	460d      	mov	r5, r1
    igh_radio.writeReg(REG_BITRATEMSB, msb); 
   d5e16:	4602      	mov	r2, r0
   d5e18:	2103      	movs	r1, #3
   d5e1a:	4620      	mov	r0, r4
   d5e1c:	f002 f96e 	bl	d80fc <_ZN5RFM698writeRegEhh>
    igh_radio.writeReg(REG_BITRATELSB, lsb);
   d5e20:	462a      	mov	r2, r5
   d5e22:	4620      	mov	r0, r4
   d5e24:	2104      	movs	r1, #4
}
   d5e26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
} 

void igh_rfm69_set_bitrate(uint8_t msb, uint8_t lsb)
{
    igh_radio.writeReg(REG_BITRATEMSB, msb); 
    igh_radio.writeReg(REG_BITRATELSB, lsb);
   d5e2a:	f002 b967 	b.w	d80fc <_ZN5RFM698writeRegEhh>
   d5e2e:	bf00      	nop
   d5e30:	2003df08 	.word	0x2003df08

000d5e34 <_Z25igh_rfm69_set_power_levelh>:
}

void igh_rfm69_set_power_level(uint8_t pwrlvl)
{
    igh_radio.setPowerLevel(pwrlvl);
   d5e34:	4601      	mov	r1, r0
   d5e36:	4801      	ldr	r0, [pc, #4]	; (d5e3c <_Z25igh_rfm69_set_power_levelh+0x8>)
   d5e38:	f002 b972 	b.w	d8120 <_ZN5RFM6913setPowerLevelEh>
   d5e3c:	2003df08 	.word	0x2003df08

000d5e40 <_Z15igh_rfm69_resetv>:
}

void igh_rfm69_reset(void)
{
   d5e40:	b508      	push	{r3, lr}
    digitalWrite(RFM69_RST, HIGH);
   d5e42:	2101      	movs	r1, #1
   d5e44:	2006      	movs	r0, #6
   d5e46:	f004 fdda 	bl	da9fe <digitalWrite>
    delay(100);
   d5e4a:	2064      	movs	r0, #100	; 0x64
   d5e4c:	f003 fcfe 	bl	d984c <delay>
    digitalWrite(RFM69_RST, LOW);
   d5e50:	2006      	movs	r0, #6
   d5e52:	2100      	movs	r1, #0
   d5e54:	f004 fdd3 	bl	da9fe <digitalWrite>
    delay(100);
   d5e58:	2064      	movs	r0, #100	; 0x64
}
   d5e5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void igh_rfm69_reset(void)
{
    digitalWrite(RFM69_RST, HIGH);
    delay(100);
    digitalWrite(RFM69_RST, LOW);
    delay(100);
   d5e5e:	f003 bcf5 	b.w	d984c <delay>
	...

000d5e64 <_Z15igh_rfm69_setupv>:
uint8_t rfm69_powerlevel  = 10; // default power level, about 100M line of site

RFM69 igh_radio = RFM69(RFM69_CS, RFM69_IRQ, IS_RFM69HCW, RFM69_IRQN);

void igh_rfm69_setup(void)
{
   d5e64:	b538      	push	{r3, r4, r5, lr}
    // first reset the module
    pinMode(RFM69_RST, OUTPUT);

    igh_rfm69_reset();
    
    if( false == igh_radio.initialize( FREQUENCY, RFM69_NODE_ID, RFM69_NETWORK_ID) )
   d5e66:	4c23      	ldr	r4, [pc, #140]	; (d5ef4 <_Z15igh_rfm69_setupv+0x90>)
RFM69 igh_radio = RFM69(RFM69_CS, RFM69_IRQ, IS_RFM69HCW, RFM69_IRQN);

void igh_rfm69_setup(void)
{
    // first reset the module
    pinMode(RFM69_RST, OUTPUT);
   d5e68:	2101      	movs	r1, #1
   d5e6a:	2006      	movs	r0, #6
   d5e6c:	f004 fdb6 	bl	da9dc <pinMode>

    igh_rfm69_reset();
   d5e70:	f7ff ffe6 	bl	d5e40 <_Z15igh_rfm69_resetv>
    
    if( false == igh_radio.initialize( FREQUENCY, RFM69_NODE_ID, RFM69_NETWORK_ID) )
   d5e74:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5e78:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   d5e7c:	481e      	ldr	r0, [pc, #120]	; (d5ef8 <_Z15igh_rfm69_setupv+0x94>)
   d5e7e:	215b      	movs	r1, #91	; 0x5b
   d5e80:	f002 fb12 	bl	d84a8 <_ZN5RFM6910initializeEhhh>
   d5e84:	b920      	cbnz	r0, d5e90 <_Z15igh_rfm69_setupv+0x2c>
    Serial.println("RFM69 INIT ERROR");
   d5e86:	f003 ff81 	bl	d9d8c <_Z16_fetch_usbserialv>
   d5e8a:	491c      	ldr	r1, [pc, #112]	; (d5efc <_Z15igh_rfm69_setupv+0x98>)
   d5e8c:	f003 fa71 	bl	d9372 <_ZN5Print7printlnEPKc>

    Serial.print( "NEW SHIELD RF ID: " ); Serial.println( RFM69_NODE_ID);
   d5e90:	f003 ff7c 	bl	d9d8c <_Z16_fetch_usbserialv>
   d5e94:	491a      	ldr	r1, [pc, #104]	; (d5f00 <_Z15igh_rfm69_setupv+0x9c>)
   d5e96:	f003 fa59 	bl	d934c <_ZN5Print5printEPKc>
   d5e9a:	f003 ff77 	bl	d9d8c <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5e9e:	220a      	movs	r2, #10
   d5ea0:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
   d5ea4:	4605      	mov	r5, r0
   d5ea6:	f003 fa6e 	bl	d9386 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d5eaa:	4628      	mov	r0, r5
   d5eac:	f003 fa55 	bl	d935a <_ZN5Print7printlnEv>
    Serial.print( "NEW NETWORK ID: " ); Serial.println( RFM69_NETWORK_ID);
   d5eb0:	f003 ff6c 	bl	d9d8c <_Z16_fetch_usbserialv>
   d5eb4:	4913      	ldr	r1, [pc, #76]	; (d5f04 <_Z15igh_rfm69_setupv+0xa0>)
   d5eb6:	f003 fa49 	bl	d934c <_ZN5Print5printEPKc>
   d5eba:	f003 ff67 	bl	d9d8c <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5ebe:	220a      	movs	r2, #10
   d5ec0:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   d5ec4:	4605      	mov	r5, r0
   d5ec6:	f003 fa5e 	bl	d9386 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d5eca:	4628      	mov	r0, r5
   d5ecc:	f003 fa45 	bl	d935a <_ZN5Print7printlnEv>

    igh_radio.setHighPower(); // This should only be called for RFM69HCW & HW
   d5ed0:	2101      	movs	r1, #1
   d5ed2:	4809      	ldr	r0, [pc, #36]	; (d5ef8 <_Z15igh_rfm69_setupv+0x94>)
   d5ed4:	f002 fa0e 	bl	d82f4 <_ZN5RFM6912setHighPowerEb>

    igh_rfm69_set_bitrate(RF_BITRATEMSB_9600, RF_BITRATELSB_9600); // set to 9.6Kbps
   d5ed8:	2105      	movs	r1, #5
   d5eda:	200d      	movs	r0, #13
   d5edc:	f7ff ff98 	bl	d5e10 <_Z21igh_rfm69_set_bitratehh>

    igh_rfm69_set_power_level(rfm69_powerlevel);
   d5ee0:	4b09      	ldr	r3, [pc, #36]	; (d5f08 <_Z15igh_rfm69_setupv+0xa4>)
   d5ee2:	7818      	ldrb	r0, [r3, #0]
   d5ee4:	f7ff ffa6 	bl	d5e34 <_Z25igh_rfm69_set_power_levelh>

    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
   d5ee8:	4908      	ldr	r1, [pc, #32]	; (d5f0c <_Z15igh_rfm69_setupv+0xa8>)
   d5eea:	4803      	ldr	r0, [pc, #12]	; (d5ef8 <_Z15igh_rfm69_setupv+0x94>)
} 
   d5eec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    igh_rfm69_set_bitrate(RF_BITRATEMSB_9600, RF_BITRATELSB_9600); // set to 9.6Kbps

    igh_rfm69_set_power_level(rfm69_powerlevel);

    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
   d5ef0:	f002 baae 	b.w	d8450 <_ZN5RFM697encryptEPKc>
   d5ef4:	2003e604 	.word	0x2003e604
   d5ef8:	2003df08 	.word	0x2003df08
   d5efc:	000dd15d 	.word	0x000dd15d
   d5f00:	000dd16e 	.word	0x000dd16e
   d5f04:	000dd181 	.word	0x000dd181
   d5f08:	2003d7fd 	.word	0x2003d7fd
   d5f0c:	000dd192 	.word	0x000dd192

000d5f10 <_Z27igh_rfm69_receive_raw_bytesPhh>:
    }
    
}

uint8_t igh_rfm69_receive_raw_bytes( uint8_t *buffer, uint8_t len )
{
   d5f10:	b570      	push	{r4, r5, r6, lr}
   d5f12:	4605      	mov	r5, r0
    uint8_t rx_len = 0;
    if ( igh_radio.receiveDone() )
   d5f14:	4809      	ldr	r0, [pc, #36]	; (d5f3c <_Z27igh_rfm69_receive_raw_bytesPhh+0x2c>)
    }
    
}

uint8_t igh_rfm69_receive_raw_bytes( uint8_t *buffer, uint8_t len )
{
   d5f16:	460e      	mov	r6, r1
    uint8_t rx_len = 0;
    if ( igh_radio.receiveDone() )
   d5f18:	f002 f9cc 	bl	d82b4 <_ZN5RFM6911receiveDoneEv>
   d5f1c:	b160      	cbz	r0, d5f38 <_Z27igh_rfm69_receive_raw_bytesPhh+0x28>
    {
        if( igh_radio.DATALEN <= len )
   d5f1e:	4c08      	ldr	r4, [pc, #32]	; (d5f40 <_Z27igh_rfm69_receive_raw_bytesPhh+0x30>)
   d5f20:	7823      	ldrb	r3, [r4, #0]
   d5f22:	42b3      	cmp	r3, r6
   d5f24:	d807      	bhi.n	d5f36 <_Z27igh_rfm69_receive_raw_bytesPhh+0x26>
        {
            memcpy( buffer, (uint8_t *)igh_radio.DATA, igh_radio.DATALEN);
   d5f26:	7822      	ldrb	r2, [r4, #0]
   d5f28:	4906      	ldr	r1, [pc, #24]	; (d5f44 <_Z27igh_rfm69_receive_raw_bytesPhh+0x34>)
   d5f2a:	4628      	mov	r0, r5
   d5f2c:	f005 fde3 	bl	dbaf6 <memcpy>
            rx_len = igh_radio.DATALEN;
   d5f30:	7820      	ldrb	r0, [r4, #0]
   d5f32:	b2c0      	uxtb	r0, r0
   d5f34:	bd70      	pop	{r4, r5, r6, pc}
    
}

uint8_t igh_rfm69_receive_raw_bytes( uint8_t *buffer, uint8_t len )
{
    uint8_t rx_len = 0;
   d5f36:	2000      	movs	r0, #0
            memcpy( buffer, (uint8_t *)igh_radio.DATA, igh_radio.DATALEN);
            rx_len = igh_radio.DATALEN;
        }
    }
    return rx_len;
}
   d5f38:	bd70      	pop	{r4, r5, r6, pc}
   d5f3a:	bf00      	nop
   d5f3c:	2003df08 	.word	0x2003df08
   d5f40:	2003df7f 	.word	0x2003df7f
   d5f44:	2003df42 	.word	0x2003df42

000d5f48 <_Z17igh_rfm69_servicev>:

void igh_rfm69_service( void )
{
   d5f48:	b510      	push	{r4, lr}
    // if new settings have been sent, re initialize the module
    if( true == initialize_rfm69 )
   d5f4a:	4c04      	ldr	r4, [pc, #16]	; (d5f5c <_Z17igh_rfm69_servicev+0x14>)
   d5f4c:	7823      	ldrb	r3, [r4, #0]
   d5f4e:	2b01      	cmp	r3, #1
   d5f50:	d103      	bne.n	d5f5a <_Z17igh_rfm69_servicev+0x12>
    {
        igh_rfm69_setup();
   d5f52:	f7ff ff87 	bl	d5e64 <_Z15igh_rfm69_setupv>
        initialize_rfm69 = false;
   d5f56:	2300      	movs	r3, #0
   d5f58:	7023      	strb	r3, [r4, #0]
   d5f5a:	bd10      	pop	{r4, pc}
   d5f5c:	2003d8bd 	.word	0x2003d8bd

000d5f60 <_GLOBAL__sub_I_NETWORKID>:
    }
   d5f60:	b508      	push	{r3, lr}
   d5f62:	f002 fbc5 	bl	d86f0 <HAL_Pin_Map>
    static volatile byte ACK_REQUESTED;
    static volatile byte ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
    static volatile int RSSI; //most accurate RSSI during reception (closest to the reception)
    static volatile byte _mode; //should be protected?

    RFM69(byte slaveSelectPin=RF69_SPI_CS, byte interruptPin=RF69_IRQ_PIN, bool isRFM69HW=false, byte interruptNum=RF69_IRQ_NUM) {
   d5f66:	4b08      	ldr	r3, [pc, #32]	; (d5f88 <_GLOBAL__sub_I_NETWORKID+0x28>)
   d5f68:	4a08      	ldr	r2, [pc, #32]	; (d5f8c <_GLOBAL__sub_I_NETWORKID+0x2c>)
   d5f6a:	601a      	str	r2, [r3, #0]
      _slaveSelectPin = slaveSelectPin;
   d5f6c:	2211      	movs	r2, #17
      _interruptPin = interruptPin;
      _interruptNum = interruptNum;
      _mode = RF69_MODE_STANDBY;
   d5f6e:	4908      	ldr	r1, [pc, #32]	; (d5f90 <_GLOBAL__sub_I_NETWORKID+0x30>)
    static volatile byte ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
    static volatile int RSSI; //most accurate RSSI during reception (closest to the reception)
    static volatile byte _mode; //should be protected?

    RFM69(byte slaveSelectPin=RF69_SPI_CS, byte interruptPin=RF69_IRQ_PIN, bool isRFM69HW=false, byte interruptNum=RF69_IRQ_NUM) {
      _slaveSelectPin = slaveSelectPin;
   d5f70:	711a      	strb	r2, [r3, #4]
      _interruptPin = interruptPin;
   d5f72:	2208      	movs	r2, #8
   d5f74:	715a      	strb	r2, [r3, #5]
      _interruptNum = interruptNum;
   d5f76:	719a      	strb	r2, [r3, #6]
      _mode = RF69_MODE_STANDBY;
   d5f78:	2201      	movs	r2, #1
   d5f7a:	700a      	strb	r2, [r1, #0]
      _promiscuousMode = false;
   d5f7c:	2100      	movs	r1, #0
   d5f7e:	7219      	strb	r1, [r3, #8]
      _powerLevel = 31;
   d5f80:	211f      	movs	r1, #31
   d5f82:	7259      	strb	r1, [r3, #9]
      _isRFM69HW = isRFM69HW;
   d5f84:	729a      	strb	r2, [r3, #10]
   d5f86:	bd08      	pop	{r3, pc}
   d5f88:	2003df08 	.word	0x2003df08
   d5f8c:	000dd1cc 	.word	0x000dd1cc
   d5f90:	2003df80 	.word	0x2003df80

000d5f94 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d5f94:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d5f96:	6984      	ldr	r4, [r0, #24]
   d5f98:	4b0a      	ldr	r3, [pc, #40]	; (d5fc4 <_ZN9TCPClientD1Ev+0x30>)
   d5f9a:	6003      	str	r3, [r0, #0]
   d5f9c:	4605      	mov	r5, r0
   d5f9e:	b17c      	cbz	r4, d5fc0 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5fa0:	6863      	ldr	r3, [r4, #4]
   d5fa2:	3b01      	subs	r3, #1
   d5fa4:	6063      	str	r3, [r4, #4]
   d5fa6:	b95b      	cbnz	r3, d5fc0 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d5fa8:	6823      	ldr	r3, [r4, #0]
   d5faa:	4620      	mov	r0, r4
   d5fac:	689b      	ldr	r3, [r3, #8]
   d5fae:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5fb0:	68a3      	ldr	r3, [r4, #8]
   d5fb2:	3b01      	subs	r3, #1
   d5fb4:	60a3      	str	r3, [r4, #8]
   d5fb6:	b91b      	cbnz	r3, d5fc0 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d5fb8:	6823      	ldr	r3, [r4, #0]
   d5fba:	4620      	mov	r0, r4
   d5fbc:	68db      	ldr	r3, [r3, #12]
   d5fbe:	4798      	blx	r3
   d5fc0:	4628      	mov	r0, r5
   d5fc2:	bd38      	pop	{r3, r4, r5, pc}
   d5fc4:	000dd47c 	.word	0x000dd47c

000d5fc8 <_ZN9TCPClientD0Ev>:
   d5fc8:	b510      	push	{r4, lr}
   d5fca:	4604      	mov	r4, r0
   d5fcc:	f7ff ffe2 	bl	d5f94 <_ZN9TCPClientD1Ev>
   d5fd0:	4620      	mov	r0, r4
   d5fd2:	211c      	movs	r1, #28
   d5fd4:	f004 fde2 	bl	dab9c <_ZdlPvj>
   d5fd8:	4620      	mov	r0, r4
   d5fda:	bd10      	pop	{r4, pc}

000d5fdc <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d5fdc:	b538      	push	{r3, r4, r5, lr}
   d5fde:	461d      	mov	r5, r3
    this->callback = callback;
   d5fe0:	9b05      	ldr	r3, [sp, #20]
   d5fe2:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
   d5fe4:	2300      	movs	r3, #0

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d5fe6:	4604      	mov	r4, r0
    this->callback = callback;
    this->qoscallback = NULL;
   d5fe8:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
   d5fea:	b102      	cbz	r2, d5fee <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
   d5fec:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
   d5fee:	b119      	cbz	r1, d5ff8 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
   d5ff0:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d5ff4:	f003 f944 	bl	d9280 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   d5ff8:	9b04      	ldr	r3, [sp, #16]
   d5ffa:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d5ffc:	9b06      	ldr	r3, [sp, #24]
    if (buffer != NULL)
   d5ffe:	69e0      	ldr	r0, [r4, #28]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
   d6000:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d6004:	2bff      	cmp	r3, #255	; 0xff
   d6006:	bfb8      	it	lt
   d6008:	23ff      	movlt	r3, #255	; 0xff
   d600a:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   d600e:	b108      	cbz	r0, d6014 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
   d6010:	f7fe f849 	bl	d40a6 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   d6014:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   d6018:	f7fe f841 	bl	d409e <_Znaj>
   d601c:	61e0      	str	r0, [r4, #28]
   d601e:	bd38      	pop	{r3, r4, r5, pc}

000d6020 <_ZN4MQTTC1EPctPFvS0_PhjE>:
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
   d6020:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d6024:	4604      	mov	r4, r0
   d6026:	2500      	movs	r5, #0
   d6028:	4617      	mov	r7, r2
   d602a:	4698      	mov	r8, r3
   d602c:	460e      	mov	r6, r1
   d602e:	f004 fbdd 	bl	da7ec <_ZN9TCPClientC1Ev>
   d6032:	61e5      	str	r5, [r4, #28]
   d6034:	490a      	ldr	r1, [pc, #40]	; (d6060 <_ZN4MQTTC1EPctPFvS0_PhjE+0x40>)
   d6036:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d603a:	f003 f8da 	bl	d91f2 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
   d603e:	23ff      	movs	r3, #255	; 0xff
   d6040:	9302      	str	r3, [sp, #8]
   d6042:	230f      	movs	r3, #15
   d6044:	9300      	str	r3, [sp, #0]
   d6046:	4620      	mov	r0, r4
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
   d6048:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
   d604a:	f8cd 8004 	str.w	r8, [sp, #4]
   d604e:	463b      	mov	r3, r7
   d6050:	462a      	mov	r2, r5
   d6052:	4631      	mov	r1, r6
   d6054:	f7ff ffc2 	bl	d5fdc <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
   d6058:	4620      	mov	r0, r4
   d605a:	b004      	add	sp, #16
   d605c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6060:	000dd2be 	.word	0x000dd2be

000d6064 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   d6064:	b510      	push	{r4, lr}
   d6066:	4604      	mov	r4, r0
    while(!_client.available()) {}
   d6068:	4620      	mov	r0, r4
   d606a:	f004 fb23 	bl	da6b4 <_ZN9TCPClient9availableEv>
   d606e:	2800      	cmp	r0, #0
   d6070:	d0fa      	beq.n	d6068 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   d6072:	4620      	mov	r0, r4
   d6074:	f004 f9c7 	bl	da406 <_ZN9TCPClient4readEv>
}
   d6078:	b2c0      	uxtb	r0, r0
   d607a:	bd10      	pop	{r4, pc}

000d607c <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d607c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6080:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
   d6082:	69c4      	ldr	r4, [r0, #28]
uint8_t MQTT::readByte() {
    while(!_client.available()) {}
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d6084:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   d6086:	f7ff ffed 	bl	d6064 <_ZN4MQTT8readByteEv>
   d608a:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d608c:	69eb      	ldr	r3, [r5, #28]
   d608e:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   d6092:	f04f 0901 	mov.w	r9, #1
   d6096:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   d609a:	2700      	movs	r7, #0
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
   d609c:	464e      	mov	r6, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   d609e:	4628      	mov	r0, r5
   d60a0:	f7ff ffe0 	bl	d6064 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   d60a4:	69eb      	ldr	r3, [r5, #28]
   d60a6:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   d60a8:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   d60ac:	fb13 f309 	smulbb	r3, r3, r9
   d60b0:	441f      	add	r7, r3
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d60b2:	1c74      	adds	r4, r6, #1
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
   d60b4:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d60b6:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   d60b8:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   d60ba:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   d60be:	d501      	bpl.n	d60c4 <_ZN4MQTT10readPacketEPh+0x48>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d60c0:	4626      	mov	r6, r4
   d60c2:	e7ec      	b.n	d609e <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d60c4:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   d60c6:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d60ca:	f888 3000 	strb.w	r3, [r8]

    if (isPublish) {
   d60ce:	d113      	bne.n	d60f8 <_ZN4MQTT10readPacketEPh+0x7c>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   d60d0:	4628      	mov	r0, r5
   d60d2:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d60d6:	f7ff ffc5 	bl	d6064 <_ZN4MQTT8readByteEv>
   d60da:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
   d60de:	4628      	mov	r0, r5
   d60e0:	1cf4      	adds	r4, r6, #3
   d60e2:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d60e6:	3602      	adds	r6, #2
   d60e8:	f7ff ffbc 	bl	d6064 <_ZN4MQTT8readByteEv>
   d60ec:	b2b6      	uxth	r6, r6
   d60ee:	b2a4      	uxth	r4, r4
   d60f0:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   d60f4:	2302      	movs	r3, #2
   d60f6:	e000      	b.n	d60fa <_ZN4MQTT10readPacketEPh+0x7e>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
   d60f8:	2300      	movs	r3, #0
   d60fa:	1b1b      	subs	r3, r3, r4
   d60fc:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d60fe:	19a3      	adds	r3, r4, r6
   d6100:	b29b      	uxth	r3, r3
   d6102:	429f      	cmp	r7, r3
   d6104:	d90b      	bls.n	d611e <_ZN4MQTT10readPacketEPh+0xa2>
        digit = readByte();
   d6106:	4628      	mov	r0, r5
   d6108:	f7ff ffac 	bl	d6064 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   d610c:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   d6110:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   d6112:	bf84      	itt	hi
   d6114:	69eb      	ldrhi	r3, [r5, #28]
   d6116:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   d6118:	3401      	adds	r4, #1
   d611a:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d611c:	e7ef      	b.n	d60fe <_ZN4MQTT10readPacketEPh+0x82>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
   d611e:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   d6122:	42a0      	cmp	r0, r4
   d6124:	bf2c      	ite	cs
   d6126:	4620      	movcs	r0, r4
   d6128:	2000      	movcc	r0, #0
   d612a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d612e <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d612e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6130:	4607      	mov	r7, r0
   d6132:	468e      	mov	lr, r1
   d6134:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   d6136:	461d      	mov	r5, r3
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
   d6138:	2400      	movs	r4, #0
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d613a:	a902      	add	r1, sp, #8
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
   d613c:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d6140:	4421      	add	r1, r4
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
   d6142:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
   d6144:	bf18      	it	ne
   d6146:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
   d614a:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d614c:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
   d6150:	b2e4      	uxtb	r4, r4
    } while(len > 0);
   d6152:	2d00      	cmp	r5, #0
   d6154:	d1f1      	bne.n	d613a <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
   d6156:	f1c4 0304 	rsb	r3, r4, #4
   d615a:	18d1      	adds	r1, r2, r3
   d615c:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
   d6160:	42a5      	cmp	r5, r4
   d6162:	da06      	bge.n	d6172 <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
   d6164:	1b2b      	subs	r3, r5, r4
   d6166:	a801      	add	r0, sp, #4
   d6168:	4413      	add	r3, r2
   d616a:	5c28      	ldrb	r0, [r5, r0]
   d616c:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
   d616e:	3501      	adds	r5, #1
   d6170:	e7f6      	b.n	d6160 <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   d6172:	1c72      	adds	r2, r6, #1
   d6174:	4422      	add	r2, r4
   d6176:	4638      	mov	r0, r7
   d6178:	f004 f89b 	bl	da2b2 <_ZN9TCPClient5writeEPKhj>
   d617c:	4605      	mov	r5, r0
   d617e:	f002 fb7f 	bl	d8880 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   d6182:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
   d6184:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   d6186:	4434      	add	r4, r6
   d6188:	b2a8      	uxth	r0, r5
}
   d618a:	1a23      	subs	r3, r4, r0
   d618c:	4258      	negs	r0, r3
   d618e:	4158      	adcs	r0, r3
   d6190:	b003      	add	sp, #12
   d6192:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6194 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d6194:	b510      	push	{r4, lr}
    buffer[0] = MQTTDISCONNECT;
   d6196:	69c3      	ldr	r3, [r0, #28]
   d6198:	22e0      	movs	r2, #224	; 0xe0
   d619a:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   d619c:	69c3      	ldr	r3, [r0, #28]
   d619e:	2200      	movs	r2, #0
   d61a0:	705a      	strb	r2, [r3, #1]
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d61a2:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
    buffer[1] = 0;
    _client.write(buffer,2);
   d61a4:	2202      	movs	r2, #2
   d61a6:	69c1      	ldr	r1, [r0, #28]
   d61a8:	f004 f883 	bl	da2b2 <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   d61ac:	4620      	mov	r0, r4
   d61ae:	f004 fa69 	bl	da684 <_ZN9TCPClient4stopEv>
   d61b2:	f002 fb65 	bl	d8880 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   d61b6:	6260      	str	r0, [r4, #36]	; 0x24
   d61b8:	62a0      	str	r0, [r4, #40]	; 0x28
   d61ba:	bd10      	pop	{r4, pc}

000d61bc <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d61bc:	3302      	adds	r3, #2
    _client.write(buffer,2);
    _client.stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   d61be:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d61c0:	b29b      	uxth	r3, r3
   d61c2:	460d      	mov	r5, r1
   d61c4:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
   d61c6:	f815 6b01 	ldrb.w	r6, [r5], #1
   d61ca:	b2a4      	uxth	r4, r4
   d61cc:	b13e      	cbz	r6, d61de <_ZN4MQTT11writeStringEPKcPht+0x22>
   d61ce:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
   d61d2:	429f      	cmp	r7, r3
   d61d4:	d903      	bls.n	d61de <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
   d61d6:	1c5c      	adds	r4, r3, #1
   d61d8:	54d6      	strb	r6, [r2, r3]
   d61da:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
   d61dc:	e7f2      	b.n	d61c4 <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   d61de:	1b19      	subs	r1, r3, r4
   d61e0:	440a      	add	r2, r1
   d61e2:	1221      	asrs	r1, r4, #8
   d61e4:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   d61e8:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
   d61ec:	4618      	mov	r0, r3
   d61ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d61f0 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   d61f0:	b538      	push	{r3, r4, r5, lr}
   d61f2:	4605      	mov	r5, r0
    bool rc = (int)_client.connected();
   d61f4:	f004 f873 	bl	da2de <_ZN9TCPClient9connectedEv>
   d61f8:	2800      	cmp	r0, #0
   d61fa:	bf14      	ite	ne
   d61fc:	2401      	movne	r4, #1
   d61fe:	2400      	moveq	r4, #0
    if (!rc) _client.stop();
   d6200:	d102      	bne.n	d6208 <_ZN4MQTT11isConnectedEv+0x18>
   d6202:	4628      	mov	r0, r5
   d6204:	f004 fa3e 	bl	da684 <_ZN9TCPClient4stopEv>
    return rc;
}
   d6208:	4620      	mov	r0, r4
   d620a:	bd38      	pop	{r3, r4, r5, pc}

000d620c <_ZN4MQTT9setBrokerEPct>:
    if (buffer != NULL)
      delete[] buffer;
    buffer = new uint8_t[this->maxpacketsize];
}

void MQTT::setBroker(char* domain, uint16_t port) {
   d620c:	b570      	push	{r4, r5, r6, lr}
   d620e:	4604      	mov	r4, r0
   d6210:	460e      	mov	r6, r1
   d6212:	4615      	mov	r5, r2
    if(isConnected()) {
   d6214:	f7ff ffec 	bl	d61f0 <_ZN4MQTT11isConnectedEv>
   d6218:	b110      	cbz	r0, d6220 <_ZN4MQTT9setBrokerEPct+0x14>
        disconnect();
   d621a:	4620      	mov	r0, r4
   d621c:	f7ff ffba 	bl	d6194 <_ZN4MQTT10disconnectEv>
    }
    this->domain = domain;
   d6220:	4631      	mov	r1, r6
   d6222:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d6226:	f003 f82b 	bl	d9280 <_ZN6StringaSEPKc>
    this->ip = NULL;
   d622a:	2300      	movs	r3, #0
   d622c:	64a3      	str	r3, [r4, #72]	; 0x48
    this->port = port;
   d622e:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
   d6232:	bd70      	pop	{r4, r5, r6, pc}

000d6234 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char *user, const char *pass) {
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   d6234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6238:	b087      	sub	sp, #28
   d623a:	4604      	mov	r4, r0
   d623c:	4689      	mov	r9, r1
   d623e:	4617      	mov	r7, r2
   d6240:	461e      	mov	r6, r3
   d6242:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if (!isConnected()) {
   d6246:	f7ff ffd3 	bl	d61f0 <_ZN4MQTT11isConnectedEv>
   d624a:	4605      	mov	r5, r0
   d624c:	2800      	cmp	r0, #0
   d624e:	f040 80bd 	bne.w	d63cc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x198>
        int result = 0;
        if (ip == NULL)
   d6252:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d6254:	b939      	cbnz	r1, d6266 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x32>
            result = _client.connect(this->domain.c_str(), this->port);
   d6256:	4603      	mov	r3, r0
   d6258:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d625c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d625e:	4620      	mov	r0, r4
   d6260:	f004 f914 	bl	da48c <_ZN9TCPClient7connectEPKctm>
   d6264:	e009      	b.n	d627a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x46>
        else
            result = _client.connect(this->ip, this->port);
   d6266:	4668      	mov	r0, sp
   d6268:	f003 fd24 	bl	d9cb4 <_ZN9IPAddressC1EPKh>
   d626c:	462b      	mov	r3, r5
   d626e:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d6272:	4669      	mov	r1, sp
   d6274:	4620      	mov	r0, r4
   d6276:	f004 f98b 	bl	da590 <_ZN9TCPClient7connectE9IPAddresstm>

        if (result) {
   d627a:	2800      	cmp	r0, #0
   d627c:	f000 80a2 	beq.w	d63c4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
            nextMsgId = 1;
   d6280:	2301      	movs	r3, #1
   d6282:	8423      	strh	r3, [r4, #32]
            uint16_t length = 5;

            if (version == MQTT_V311) {
   d6284:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
   d6288:	2b04      	cmp	r3, #4
   d628a:	d115      	bne.n	d62b8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x84>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d628c:	4b52      	ldr	r3, [pc, #328]	; (d63d8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a4>)
   d628e:	6818      	ldr	r0, [r3, #0]
   d6290:	889a      	ldrh	r2, [r3, #4]
   d6292:	f8ad 2004 	strh.w	r2, [sp, #4]
   d6296:	9000      	str	r0, [sp, #0]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d6298:	69e2      	ldr	r2, [r4, #28]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d629a:	799b      	ldrb	r3, [r3, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d629c:	9800      	ldr	r0, [sp, #0]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d629e:	f88d 3006 	strb.w	r3, [sp, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d62a2:	1d53      	adds	r3, r2, #5
   d62a4:	f8c2 0005 	str.w	r0, [r2, #5]
   d62a8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   d62ac:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d62b0:	719a      	strb	r2, [r3, #6]
   d62b2:	8099      	strh	r1, [r3, #4]
                length+=sizeof(MQTT_HEADER_V311);
   d62b4:	230c      	movs	r3, #12
   d62b6:	e012      	b.n	d62de <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d62b8:	4b48      	ldr	r3, [pc, #288]	; (d63dc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>)
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d62ba:	f8d4 c01c 	ldr.w	ip, [r4, #28]
            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d62be:	6818      	ldr	r0, [r3, #0]
   d62c0:	6859      	ldr	r1, [r3, #4]
   d62c2:	7a1b      	ldrb	r3, [r3, #8]
   d62c4:	466a      	mov	r2, sp
   d62c6:	c203      	stmia	r2!, {r0, r1}
   d62c8:	7013      	strb	r3, [r2, #0]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d62ca:	466b      	mov	r3, sp
   d62cc:	cb03      	ldmia	r3!, {r0, r1}
   d62ce:	f8cc 0005 	str.w	r0, [ip, #5]
   d62d2:	f8cc 1009 	str.w	r1, [ip, #9]
   d62d6:	7813      	ldrb	r3, [r2, #0]
   d62d8:	f88c 300d 	strb.w	r3, [ip, #13]
                length+=sizeof(MQTT_HEADER_V31);
   d62dc:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
   d62de:	f1b8 0f00 	cmp.w	r8, #0
   d62e2:	d00a      	beq.n	d62fa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc6>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   d62e4:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   d62e8:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   d62ec:	0152      	lsls	r2, r2, #5
   d62ee:	f042 0206 	orr.w	r2, r2, #6
   d62f2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
   d62f6:	b2d2      	uxtb	r2, r2
   d62f8:	e000      	b.n	d62fc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc8>
            } else {
                v = 0x02;
   d62fa:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
   d62fc:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
   d6300:	b909      	cbnz	r1, d6306 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xd2>
              v = v&0xfd;
   d6302:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
   d6306:	b12f      	cbz	r7, d6314 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>
                v = v|0x80;

                if(pass != NULL) {
   d6308:	b916      	cbnz	r6, d6310 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
   d630a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   d630e:	e001      	b.n	d6314 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>

                if(pass != NULL) {
                    v = v|(0x80>>1);
   d6310:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
   d6314:	69e1      	ldr	r1, [r4, #28]
   d6316:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
   d6318:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d631a:	69e1      	ldr	r1, [r4, #28]
   d631c:	1c58      	adds	r0, r3, #1
   d631e:	1212      	asrs	r2, r2, #8
   d6320:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   d6322:	1c9a      	adds	r2, r3, #2
   d6324:	69e1      	ldr	r1, [r4, #28]
   d6326:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d6328:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   d632a:	3303      	adds	r3, #3
   d632c:	69e2      	ldr	r2, [r4, #28]
   d632e:	4649      	mov	r1, r9
   d6330:	4620      	mov	r0, r4
   d6332:	f7ff ff43 	bl	d61bc <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
   d6336:	f1b8 0f00 	cmp.w	r8, #0
   d633a:	d00b      	beq.n	d6354 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
                length = writeString(willTopic, buffer, length);
   d633c:	4603      	mov	r3, r0
   d633e:	69e2      	ldr	r2, [r4, #28]
   d6340:	4641      	mov	r1, r8
   d6342:	4620      	mov	r0, r4
   d6344:	f7ff ff3a 	bl	d61bc <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   d6348:	69e2      	ldr	r2, [r4, #28]
   d634a:	9911      	ldr	r1, [sp, #68]	; 0x44
   d634c:	4603      	mov	r3, r0
   d634e:	4620      	mov	r0, r4
   d6350:	f7ff ff34 	bl	d61bc <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
   d6354:	b167      	cbz	r7, d6370 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                length = writeString(user,buffer,length);
   d6356:	4603      	mov	r3, r0
   d6358:	69e2      	ldr	r2, [r4, #28]
   d635a:	4639      	mov	r1, r7
   d635c:	4620      	mov	r0, r4
   d635e:	f7ff ff2d 	bl	d61bc <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
   d6362:	b12e      	cbz	r6, d6370 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                    length = writeString(pass,buffer,length);
   d6364:	4603      	mov	r3, r0
   d6366:	69e2      	ldr	r2, [r4, #28]
   d6368:	4631      	mov	r1, r6
   d636a:	4620      	mov	r0, r4
   d636c:	f7ff ff26 	bl	d61bc <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
   d6370:	1f43      	subs	r3, r0, #5
   d6372:	b29b      	uxth	r3, r3
   d6374:	69e2      	ldr	r2, [r4, #28]
   d6376:	2110      	movs	r1, #16
   d6378:	4620      	mov	r0, r4
   d637a:	f7ff fed8 	bl	d612e <_ZN4MQTT5writeEhPht>
   d637e:	f002 fa7f 	bl	d8880 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!_client.available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d6382:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
   d6386:	6260      	str	r0, [r4, #36]	; 0x24
   d6388:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!_client.available()) {
   d638a:	4620      	mov	r0, r4
   d638c:	f004 f992 	bl	da6b4 <_ZN9TCPClient9availableEv>
   d6390:	b940      	cbnz	r0, d63a4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x170>
   d6392:	f002 fa75 	bl	d8880 <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d6396:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d6398:	1ac0      	subs	r0, r0, r3
   d639a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d639c:	4373      	muls	r3, r6
   d639e:	4298      	cmp	r0, r3
   d63a0:	d9f3      	bls.n	d638a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
   d63a2:	e00f      	b.n	d63c4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                    _client.stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d63a4:	4669      	mov	r1, sp
   d63a6:	4620      	mov	r0, r4
   d63a8:	f7ff fe68 	bl	d607c <_ZN4MQTT10readPacketEPh>

            if (len == 4) {
   d63ac:	2804      	cmp	r0, #4
   d63ae:	d109      	bne.n	d63c4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                if (buffer[3] == CONN_ACCEPT) {
   d63b0:	69e3      	ldr	r3, [r4, #28]
   d63b2:	78de      	ldrb	r6, [r3, #3]
   d63b4:	b936      	cbnz	r6, d63c4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
   d63b6:	f002 fa63 	bl	d8880 <HAL_Timer_Get_Milli_Seconds>
                    lastInActivity = millis();
                    pingOutstanding = false;
                    debug_print(" Connect success\n");
                    return true;
   d63ba:	2501      	movs	r5, #1
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == CONN_ACCEPT) {
                    lastInActivity = millis();
   d63bc:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   d63be:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
   d63c2:	e004      	b.n	d63ce <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
                    // check EMQTT_CONNACK_RESPONSE code.
                    debug_print(" Connect fail. code = [%d]\n", buffer[3]);
                }
            }
        }
        _client.stop();
   d63c4:	4620      	mov	r0, r4
   d63c6:	f004 f95d 	bl	da684 <_ZN9TCPClient4stopEv>
   d63ca:	e000      	b.n	d63ce <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
    }
    return false;
   d63cc:	2500      	movs	r5, #0
}
   d63ce:	4628      	mov	r0, r5
   d63d0:	b007      	add	sp, #28
   d63d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d63d6:	bf00      	nop
   d63d8:	000dd1b4 	.word	0x000dd1b4
   d63dc:	000dd1bb 	.word	0x000dd1bb

000d63e0 <_ZN4MQTT7connectEPKc>:
void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}


bool MQTT::connect(const char *id) {
   d63e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   d63e2:	2304      	movs	r3, #4
   d63e4:	9305      	str	r3, [sp, #20]
   d63e6:	2301      	movs	r3, #1
   d63e8:	9304      	str	r3, [sp, #16]
   d63ea:	2300      	movs	r3, #0
   d63ec:	9303      	str	r3, [sp, #12]
   d63ee:	9302      	str	r3, [sp, #8]
   d63f0:	9301      	str	r3, [sp, #4]
   d63f2:	9300      	str	r3, [sp, #0]
   d63f4:	461a      	mov	r2, r3
   d63f6:	f7ff ff1d 	bl	d6234 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   d63fa:	b007      	add	sp, #28
   d63fc:	f85d fb04 	ldr.w	pc, [sp], #4

000d6400 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d6400:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6404:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   d6406:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d640a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d640e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
   d6412:	4604      	mov	r4, r0
   d6414:	468b      	mov	fp, r1
   d6416:	4691      	mov	r9, r2
   d6418:	469a      	mov	sl, r3
    if (isConnected()) {
   d641a:	f7ff fee9 	bl	d61f0 <_ZN4MQTT11isConnectedEv>
   d641e:	2800      	cmp	r0, #0
   d6420:	d04c      	beq.n	d64bc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xbc>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, this->maxpacketsize);
   d6422:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   d6426:	69e0      	ldr	r0, [r4, #28]
   d6428:	2100      	movs	r1, #0
   d642a:	f005 fb6f 	bl	dbb0c <memset>

        length = writeString(topic, buffer, length);
   d642e:	2305      	movs	r3, #5
   d6430:	69e2      	ldr	r2, [r4, #28]
   d6432:	4659      	mov	r1, fp
   d6434:	4620      	mov	r0, r4
   d6436:	f7ff fec1 	bl	d61bc <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
   d643a:	1e6b      	subs	r3, r5, #1
   d643c:	2b01      	cmp	r3, #1
   d643e:	d812      	bhi.n	d6466 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
            nextMsgId += 1;
   d6440:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d6442:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, this->maxpacketsize);

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
   d6444:	3301      	adds	r3, #1
   d6446:	b29b      	uxth	r3, r3
   d6448:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d644a:	121b      	asrs	r3, r3, #8
   d644c:	5413      	strb	r3, [r2, r0]
   d644e:	1c41      	adds	r1, r0, #1
   d6450:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
   d6452:	69e3      	ldr	r3, [r4, #28]
   d6454:	8c22      	ldrh	r2, [r4, #32]
   d6456:	545a      	strb	r2, [r3, r1]
   d6458:	3002      	adds	r0, #2
   d645a:	b280      	uxth	r0, r0
            if (messageid != NULL)
   d645c:	b11e      	cbz	r6, d6466 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
                *messageid = nextMsgId++;
   d645e:	8c23      	ldrh	r3, [r4, #32]
   d6460:	1c5a      	adds	r2, r3, #1
   d6462:	8422      	strh	r2, [r4, #32]
   d6464:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d6466:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d6468:	b291      	uxth	r1, r2
   d646a:	1883      	adds	r3, r0, r2
   d646c:	458a      	cmp	sl, r1
   d646e:	b29b      	uxth	r3, r3
   d6470:	d90a      	bls.n	d6488 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
   d6472:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
   d6476:	429e      	cmp	r6, r3
   d6478:	f102 0201 	add.w	r2, r2, #1
   d647c:	d904      	bls.n	d6488 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
            buffer[length++] = payload[i];
   d647e:	f819 6001 	ldrb.w	r6, [r9, r1]
   d6482:	69e1      	ldr	r1, [r4, #28]
   d6484:	54ce      	strb	r6, [r1, r3]
   d6486:	e7ef      	b.n	d6468 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x68>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
   d6488:	f1b8 0f00 	cmp.w	r8, #0
   d648c:	bf0c      	ite	eq
   d648e:	2130      	moveq	r1, #48	; 0x30
   d6490:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
   d6492:	b10f      	cbz	r7, d6498 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x98>
            header |= DUP_FLAG_ON_MASK;
   d6494:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
   d6498:	2d02      	cmp	r5, #2
   d649a:	d102      	bne.n	d64a2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa2>
            header |= MQTTQOS2_HEADER_MASK;
   d649c:	f041 0104 	orr.w	r1, r1, #4
   d64a0:	e003      	b.n	d64aa <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xaa>
        else if (qos == QOS1)
   d64a2:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   d64a4:	bf08      	it	eq
   d64a6:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d64aa:	3b05      	subs	r3, #5
   d64ac:	69e2      	ldr	r2, [r4, #28]
   d64ae:	b29b      	uxth	r3, r3
   d64b0:	4620      	mov	r0, r4
    }
    return false;
}
   d64b2:	b001      	add	sp, #4
   d64b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d64b8:	f7ff be39 	b.w	d612e <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d64bc:	b001      	add	sp, #4
   d64be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d64c2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   d64c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   d64c4:	9c08      	ldr	r4, [sp, #32]
   d64c6:	9403      	str	r4, [sp, #12]
   d64c8:	2400      	movs	r4, #0
   d64ca:	9402      	str	r4, [sp, #8]
   d64cc:	f89d 401c 	ldrb.w	r4, [sp, #28]
   d64d0:	9401      	str	r4, [sp, #4]
   d64d2:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d64d6:	9400      	str	r4, [sp, #0]
   d64d8:	f7ff ff92 	bl	d6400 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   d64dc:	b004      	add	sp, #16
   d64de:	bd10      	pop	{r4, pc}

000d64e0 <_ZN4MQTT7publishEPKcPKhj>:

bool MQTT::publish(const char * topic, const char* payload, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, (uint8_t*)payload, strlen(payload), false, qos, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength) {
   d64e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, false, QOS0, NULL);
   d64e2:	2400      	movs	r4, #0
   d64e4:	9402      	str	r4, [sp, #8]
   d64e6:	9401      	str	r4, [sp, #4]
   d64e8:	9400      	str	r4, [sp, #0]
   d64ea:	f7ff ffea 	bl	d64c2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   d64ee:	b004      	add	sp, #16
   d64f0:	bd10      	pop	{r4, pc}

000d64f2 <_ZN4MQTT14publishReleaseEt>:
        return write(header, buffer, length-5);
    }
    return false;
}

bool MQTT::publishRelease(uint16_t messageid) {
   d64f2:	b538      	push	{r3, r4, r5, lr}
   d64f4:	4604      	mov	r4, r0
   d64f6:	460d      	mov	r5, r1
    if (isConnected()) {
   d64f8:	f7ff fe7a 	bl	d61f0 <_ZN4MQTT11isConnectedEv>
   d64fc:	b190      	cbz	r0, d6524 <_ZN4MQTT14publishReleaseEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   d64fe:	69e3      	ldr	r3, [r4, #28]
   d6500:	2262      	movs	r2, #98	; 0x62
   d6502:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d6504:	69e3      	ldr	r3, [r4, #28]
   d6506:	2202      	movs	r2, #2
   d6508:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d650a:	69e3      	ldr	r3, [r4, #28]
   d650c:	122a      	asrs	r2, r5, #8
   d650e:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d6510:	69e3      	ldr	r3, [r4, #28]
   d6512:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
   d6514:	2204      	movs	r2, #4
   d6516:	69e1      	ldr	r1, [r4, #28]
   d6518:	4620      	mov	r0, r4
   d651a:	f003 feca 	bl	da2b2 <_ZN9TCPClient5writeEPKhj>
   d651e:	3000      	adds	r0, #0
   d6520:	bf18      	it	ne
   d6522:	2001      	movne	r0, #1
    }
    return false;
}
   d6524:	bd38      	pop	{r3, r4, r5, pc}

000d6526 <_ZN4MQTT15publishCompleteEt>:

bool MQTT::publishComplete(uint16_t messageid) {
   d6526:	b538      	push	{r3, r4, r5, lr}
   d6528:	4604      	mov	r4, r0
   d652a:	460d      	mov	r5, r1
    if (isConnected()) {
   d652c:	f7ff fe60 	bl	d61f0 <_ZN4MQTT11isConnectedEv>
   d6530:	b190      	cbz	r0, d6558 <_ZN4MQTT15publishCompleteEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   d6532:	69e3      	ldr	r3, [r4, #28]
   d6534:	2272      	movs	r2, #114	; 0x72
   d6536:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d6538:	69e3      	ldr	r3, [r4, #28]
   d653a:	2202      	movs	r2, #2
   d653c:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d653e:	69e3      	ldr	r3, [r4, #28]
   d6540:	122a      	asrs	r2, r5, #8
   d6542:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d6544:	69e3      	ldr	r3, [r4, #28]
   d6546:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
   d6548:	2204      	movs	r2, #4
   d654a:	69e1      	ldr	r1, [r4, #28]
   d654c:	4620      	mov	r0, r4
   d654e:	f003 feb0 	bl	da2b2 <_ZN9TCPClient5writeEPKhj>
   d6552:	3000      	adds	r0, #0
   d6554:	bf18      	it	ne
   d6556:	2001      	movne	r0, #1
    }
    return false;
}
   d6558:	bd38      	pop	{r3, r4, r5, pc}

000d655a <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
   d655a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d655e:	b083      	sub	sp, #12
   d6560:	af00      	add	r7, sp, #0
   d6562:	4604      	mov	r4, r0
    if (isConnected()) {
   d6564:	f7ff fe44 	bl	d61f0 <_ZN4MQTT11isConnectedEv>
   d6568:	4681      	mov	r9, r0
   d656a:	2800      	cmp	r0, #0
   d656c:	f000 80f6 	beq.w	d675c <_ZN4MQTT4loopEv+0x202>
   d6570:	f002 f986 	bl	d8880 <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   d6574:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d6576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d657a:	4353      	muls	r3, r2
   d657c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   d657e:	1a82      	subs	r2, r0, r2
   d6580:	429a      	cmp	r2, r3
   d6582:	4605      	mov	r5, r0
   d6584:	d803      	bhi.n	d658e <_ZN4MQTT4loopEv+0x34>
   d6586:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d6588:	1a82      	subs	r2, r0, r2
   d658a:	4293      	cmp	r3, r2
   d658c:	d217      	bcs.n	d65be <_ZN4MQTT4loopEv+0x64>
            if (pingOutstanding) {
   d658e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d6592:	b12b      	cbz	r3, d65a0 <_ZN4MQTT4loopEv+0x46>
                _client.stop();
   d6594:	4620      	mov	r0, r4
   d6596:	f004 f875 	bl	da684 <_ZN9TCPClient4stopEv>
                return false;
   d659a:	f04f 0900 	mov.w	r9, #0
   d659e:	e0dd      	b.n	d675c <_ZN4MQTT4loopEv+0x202>
            } else {
                buffer[0] = MQTTPINGREQ;
   d65a0:	69e2      	ldr	r2, [r4, #28]
   d65a2:	21c0      	movs	r1, #192	; 0xc0
   d65a4:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   d65a6:	69e2      	ldr	r2, [r4, #28]
   d65a8:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   d65aa:	69e1      	ldr	r1, [r4, #28]
   d65ac:	2202      	movs	r2, #2
   d65ae:	4620      	mov	r0, r4
   d65b0:	f003 fe7f 	bl	da2b2 <_ZN9TCPClient5writeEPKhj>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
   d65b4:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                _client.write(buffer,2);
                lastOutActivity = t;
   d65b6:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
   d65b8:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
   d65ba:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (_client.available()) {
   d65be:	4620      	mov	r0, r4
   d65c0:	f004 f878 	bl	da6b4 <_ZN9TCPClient9availableEv>
   d65c4:	2800      	cmp	r0, #0
   d65c6:	f000 80c9 	beq.w	d675c <_ZN4MQTT4loopEv+0x202>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d65ca:	1df9      	adds	r1, r7, #7
   d65cc:	4620      	mov	r0, r4
   d65ce:	f7ff fd55 	bl	d607c <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
   d65d2:	4602      	mov	r2, r0
   d65d4:	2800      	cmp	r0, #0
   d65d6:	f000 80c1 	beq.w	d675c <_ZN4MQTT4loopEv+0x202>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
   d65da:	69e3      	ldr	r3, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
   d65dc:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   d65de:	7818      	ldrb	r0, [r3, #0]
   d65e0:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   d65e4:	2930      	cmp	r1, #48	; 0x30
   d65e6:	d17d      	bne.n	d66e4 <_ZN4MQTT4loopEv+0x18a>
                    if (callback) {
   d65e8:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
   d65ec:	f1bb 0f00 	cmp.w	fp, #0
   d65f0:	f000 80b4 	beq.w	d675c <_ZN4MQTT4loopEv+0x202>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d65f4:	f897 c007 	ldrb.w	ip, [r7, #7]
   d65f8:	eb03 000c 	add.w	r0, r3, ip
              							_client.write(buffer, 4);
              							lastOutActivity = t;
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
   d65fc:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d65fe:	7881      	ldrb	r1, [r0, #2]
   d6600:	f890 e001 	ldrb.w	lr, [r0, #1]
   d6604:	eb01 2e0e 	add.w	lr, r1, lr, lsl #8
   d6608:	fa1f fe8e 	uxth.w	lr, lr
                        char topic[tl+1];
   d660c:	f10e 0108 	add.w	r1, lr, #8
   d6610:	f021 0107 	bic.w	r1, r1, #7
   d6614:	ebad 0d01 	sub.w	sp, sp, r1
   d6618:	4668      	mov	r0, sp
   d661a:	2100      	movs	r1, #0
                        for (uint16_t i=0;i<tl;i++) {
   d661c:	b28e      	uxth	r6, r1
   d661e:	45b6      	cmp	lr, r6
   d6620:	d906      	bls.n	d6630 <_ZN4MQTT4loopEv+0xd6>
                            topic[i] = buffer[llen+3+i];
   d6622:	eb0c 0601 	add.w	r6, ip, r1
   d6626:	441e      	add	r6, r3
   d6628:	78f6      	ldrb	r6, [r6, #3]
   d662a:	5446      	strb	r6, [r0, r1]
   d662c:	3101      	adds	r1, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
   d662e:	e7f5      	b.n	d661c <_ZN4MQTT4loopEv+0xc2>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
   d6630:	2100      	movs	r1, #0
   d6632:	f800 100e 	strb.w	r1, [r0, lr]
   d6636:	781e      	ldrb	r6, [r3, #0]
   d6638:	f006 0606 	and.w	r6, r6, #6
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d663c:	2e02      	cmp	r6, #2
   d663e:	f10c 0103 	add.w	r1, ip, #3
   d6642:	ebcc 0202 	rsb	r2, ip, r2
   d6646:	d11e      	bne.n	d6686 <_ZN4MQTT4loopEv+0x12c>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d6648:	4471      	add	r1, lr
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d664a:	ebce 0202 	rsb	r2, lr, r2
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d664e:	f813 8001 	ldrb.w	r8, [r3, r1]
   d6652:	4419      	add	r1, r3
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d6654:	3a05      	subs	r2, #5
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d6656:	7849      	ldrb	r1, [r1, #1]
   d6658:	eb01 2808 	add.w	r8, r1, r8, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d665c:	f10c 0105 	add.w	r1, ip, #5
   d6660:	4471      	add	r1, lr
   d6662:	4419      	add	r1, r3
   d6664:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   d6666:	69e3      	ldr	r3, [r4, #28]
   d6668:	2240      	movs	r2, #64	; 0x40
   d666a:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   d666c:	69e3      	ldr	r3, [r4, #28]
   d666e:	705e      	strb	r6, [r3, #1]
                            buffer[2] = (msgId >> 8);
   d6670:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d6672:	fa1f f888 	uxth.w	r8, r8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
   d6676:	ea4f 2228 	mov.w	r2, r8, asr #8
   d667a:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   d667c:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
   d667e:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
   d6680:	f883 8003 	strb.w	r8, [r3, #3]
   d6684:	e020      	b.n	d66c8 <_ZN4MQTT4loopEv+0x16e>
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   d6686:	2e04      	cmp	r6, #4
   d6688:	d124      	bne.n	d66d4 <_ZN4MQTT4loopEv+0x17a>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d668a:	4471      	add	r1, lr
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d668c:	ebce 0202 	rsb	r2, lr, r2
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d6690:	f813 8001 	ldrb.w	r8, [r3, r1]
   d6694:	4419      	add	r1, r3
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d6696:	3a05      	subs	r2, #5
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d6698:	7849      	ldrb	r1, [r1, #1]
   d669a:	eb01 2808 	add.w	r8, r1, r8, lsl #8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d669e:	f10c 0105 	add.w	r1, ip, #5
   d66a2:	4471      	add	r1, lr
   d66a4:	4419      	add	r1, r3
   d66a6:	47d8      	blx	fp

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
   d66a8:	69e3      	ldr	r3, [r4, #28]
   d66aa:	2250      	movs	r2, #80	; 0x50
   d66ac:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
   d66ae:	69e3      	ldr	r3, [r4, #28]
   d66b0:	2202      	movs	r2, #2
   d66b2:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
   d66b4:	69e3      	ldr	r3, [r4, #28]
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d66b6:	fa1f f888 	uxth.w	r8, r8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
   d66ba:	ea4f 2228 	mov.w	r2, r8, asr #8
   d66be:	709a      	strb	r2, [r3, #2]
              							buffer[3] = (msgId & 0xFF);
   d66c0:	69e3      	ldr	r3, [r4, #28]
              							_client.write(buffer, 4);
   d66c2:	4632      	mov	r2, r6
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
              							buffer[3] = (msgId & 0xFF);
   d66c4:	f883 8003 	strb.w	r8, [r3, #3]
              							_client.write(buffer, 4);
   d66c8:	69e1      	ldr	r1, [r4, #28]
   d66ca:	4620      	mov	r0, r4
   d66cc:	f003 fdf1 	bl	da2b2 <_ZN9TCPClient5writeEPKhj>
              							lastOutActivity = t;
   d66d0:	6265      	str	r5, [r4, #36]	; 0x24
   d66d2:	e005      	b.n	d66e0 <_ZN4MQTT4loopEv+0x186>
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
   d66d4:	3a03      	subs	r2, #3
   d66d6:	4471      	add	r1, lr
   d66d8:	ebce 0202 	rsb	r2, lr, r2
   d66dc:	4419      	add	r1, r3
   d66de:	47d8      	blx	fp
   d66e0:	46d5      	mov	sp, sl
   d66e2:	e03b      	b.n	d675c <_ZN4MQTT4loopEv+0x202>
                        }
                    }
                } else if (type == MQTTPUBREC) {
   d66e4:	2950      	cmp	r1, #80	; 0x50
   d66e6:	d108      	bne.n	d66fa <_ZN4MQTT4loopEv+0x1a0>
                    // check for the situation that QoS2 receive PUBREC, should return PUBREL
                    msgId = (buffer[2] << 8) + buffer[3];
                    this->publishRelease(msgId);
   d66e8:	7899      	ldrb	r1, [r3, #2]
   d66ea:	78db      	ldrb	r3, [r3, #3]
   d66ec:	eb03 2101 	add.w	r1, r3, r1, lsl #8
   d66f0:	b289      	uxth	r1, r1
   d66f2:	4620      	mov	r0, r4
   d66f4:	f7ff fefd 	bl	d64f2 <_ZN4MQTT14publishReleaseEt>
   d66f8:	e030      	b.n	d675c <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBACK) {
   d66fa:	2940      	cmp	r1, #64	; 0x40
   d66fc:	d00c      	beq.n	d6718 <_ZN4MQTT4loopEv+0x1be>
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
                        }
                    }
                } else if (type == MQTTPUBREL) {
   d66fe:	2960      	cmp	r1, #96	; 0x60
   d6700:	d108      	bne.n	d6714 <_ZN4MQTT4loopEv+0x1ba>
                  msgId = (buffer[2] << 8) + buffer[3];
                  this->publishComplete(msgId);
   d6702:	7899      	ldrb	r1, [r3, #2]
   d6704:	78db      	ldrb	r3, [r3, #3]
   d6706:	eb03 2101 	add.w	r1, r3, r1, lsl #8
   d670a:	b289      	uxth	r1, r1
   d670c:	4620      	mov	r0, r4
   d670e:	f7ff ff0a 	bl	d6526 <_ZN4MQTT15publishCompleteEt>
   d6712:	e023      	b.n	d675c <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBCOMP) {
   d6714:	2970      	cmp	r1, #112	; 0x70
   d6716:	d10d      	bne.n	d6734 <_ZN4MQTT4loopEv+0x1da>
                  if (qoscallback) {
   d6718:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d671a:	b1f9      	cbz	r1, d675c <_ZN4MQTT4loopEv+0x202>
                      // msgId only present for QOS==0
                      if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   d671c:	2a04      	cmp	r2, #4
   d671e:	d11d      	bne.n	d675c <_ZN4MQTT4loopEv+0x202>
   d6720:	f010 0f06 	tst.w	r0, #6
   d6724:	d11a      	bne.n	d675c <_ZN4MQTT4loopEv+0x202>
                          msgId = (buffer[2]<<8)+buffer[3];
                          this->qoscallback(msgId);
   d6726:	7898      	ldrb	r0, [r3, #2]
   d6728:	78db      	ldrb	r3, [r3, #3]
   d672a:	eb03 2000 	add.w	r0, r3, r0, lsl #8
   d672e:	b280      	uxth	r0, r0
   d6730:	4788      	blx	r1
   d6732:	e013      	b.n	d675c <_ZN4MQTT4loopEv+0x202>
                      }
                  }
                } else if (type == MQTTSUBACK) {
   d6734:	2990      	cmp	r1, #144	; 0x90
   d6736:	d011      	beq.n	d675c <_ZN4MQTT4loopEv+0x202>
                    // if something...
                } else if (type == MQTTPINGREQ) {
   d6738:	29c0      	cmp	r1, #192	; 0xc0
   d673a:	d10a      	bne.n	d6752 <_ZN4MQTT4loopEv+0x1f8>
                    buffer[0] = MQTTPINGRESP;
   d673c:	22d0      	movs	r2, #208	; 0xd0
   d673e:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   d6740:	69e3      	ldr	r3, [r4, #28]
   d6742:	2200      	movs	r2, #0
   d6744:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   d6746:	69e1      	ldr	r1, [r4, #28]
   d6748:	2202      	movs	r2, #2
   d674a:	4620      	mov	r0, r4
   d674c:	f003 fdb1 	bl	da2b2 <_ZN9TCPClient5writeEPKhj>
   d6750:	e004      	b.n	d675c <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPINGRESP) {
   d6752:	29d0      	cmp	r1, #208	; 0xd0
                    pingOutstanding = false;
   d6754:	bf04      	itt	eq
   d6756:	2300      	moveq	r3, #0
   d6758:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
            }
        }
        return true;
    }
    return false;
}
   d675c:	4648      	mov	r0, r9
   d675e:	370c      	adds	r7, #12
   d6760:	46bd      	mov	sp, r7
   d6762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6766 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
}

bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   d6766:	b570      	push	{r4, r5, r6, lr}
   d6768:	4604      	mov	r4, r0
   d676a:	460e      	mov	r6, r1
   d676c:	4615      	mov	r5, r2

    if (isConnected()) {
   d676e:	f7ff fd3f 	bl	d61f0 <_ZN4MQTT11isConnectedEv>
   d6772:	b1e8      	cbz	r0, d67b0 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4a>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
   d6774:	8c23      	ldrh	r3, [r4, #32]
   d6776:	3301      	adds	r3, #1
   d6778:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   d677a:	b903      	cbnz	r3, d677e <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x18>
            nextMsgId = 1;
   d677c:	2301      	movs	r3, #1
   d677e:	8423      	strh	r3, [r4, #32]
        }
        buffer[length++] = (nextMsgId >> 8);
   d6780:	8c23      	ldrh	r3, [r4, #32]
   d6782:	69e2      	ldr	r2, [r4, #28]
   d6784:	121b      	asrs	r3, r3, #8
   d6786:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   d6788:	69e3      	ldr	r3, [r4, #28]
   d678a:	8c22      	ldrh	r2, [r4, #32]
   d678c:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   d678e:	69e2      	ldr	r2, [r4, #28]
   d6790:	4631      	mov	r1, r6
   d6792:	2307      	movs	r3, #7
   d6794:	4620      	mov	r0, r4
   d6796:	f7ff fd11 	bl	d61bc <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   d679a:	69e3      	ldr	r3, [r4, #28]
   d679c:	541d      	strb	r5, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d679e:	1f03      	subs	r3, r0, #4
   d67a0:	69e2      	ldr	r2, [r4, #28]
   d67a2:	4620      	mov	r0, r4
   d67a4:	b29b      	uxth	r3, r3
   d67a6:	2182      	movs	r1, #130	; 0x82
    }
    return false;
}
   d67a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d67ac:	f7ff bcbf 	b.w	d612e <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d67b0:	bd70      	pop	{r4, r5, r6, pc}

000d67b2 <_ZN4MQTT9subscribeEPKc>:
    lastOutActivity = millis();
    return (rc == 1+llen+length);
}

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
   d67b2:	2200      	movs	r2, #0
   d67b4:	f7ff bfd7 	b.w	d6766 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000d67b8 <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
   d67b8:	b510      	push	{r4, lr}
   d67ba:	4604      	mov	r4, r0
    if (isConnected()) {
   d67bc:	f7ff fd18 	bl	d61f0 <_ZN4MQTT11isConnectedEv>
   d67c0:	b110      	cbz	r0, d67c8 <_ZN4MQTTD1Ev+0x10>
        disconnect();
   d67c2:	4620      	mov	r0, r4
   d67c4:	f7ff fce6 	bl	d6194 <_ZN4MQTT10disconnectEv>
    }

    if (buffer != NULL)
   d67c8:	69e0      	ldr	r0, [r4, #28]
   d67ca:	b108      	cbz	r0, d67d0 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
   d67cc:	f7fd fc6b 	bl	d40a6 <_ZdaPv>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
   d67d0:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d67d4:	f002 fcc6 	bl	d9164 <_ZN6StringD1Ev>
   d67d8:	4620      	mov	r0, r4
   d67da:	f7ff fbdb 	bl	d5f94 <_ZN9TCPClientD1Ev>
        disconnect();
    }

    if (buffer != NULL)
      delete[] buffer;
}
   d67de:	4620      	mov	r0, r4
   d67e0:	bd10      	pop	{r4, pc}

000d67e2 <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
   d67e2:	f001 bf85 	b.w	d86f0 <HAL_Pin_Map>

000d67e6 <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d67e6:	f001 bf83 	b.w	d86f0 <HAL_Pin_Map>

000d67ea <_GLOBAL__sub_I__ZN7istream3getEv>:
   d67ea:	f001 bf81 	b.w	d86f0 <HAL_Pin_Map>

000d67ee <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d67ee:	b510      	push	{r4, lr}
   d67f0:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d67f2:	3024      	adds	r0, #36	; 0x24
   d67f4:	f000 ff9c 	bl	d7730 <_ZN8FatCache4syncEv>
   d67f8:	b128      	cbz	r0, d6806 <_ZN9FatVolume9cacheSyncEv+0x18>
   d67fa:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d67fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d6802:	f000 bf95 	b.w	d7730 <_ZN8FatCache4syncEv>
  }
   d6806:	bd10      	pop	{r4, pc}

000d6808 <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d6808:	1e41      	subs	r1, r0, #1
   d680a:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d680e:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d6810:	0843      	lsrs	r3, r0, #1
   d6812:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d6816:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d681a:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d681e:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d6820:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d6822:	d1f5      	bne.n	d6810 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d6824:	4770      	bx	lr

000d6826 <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d6826:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   d6828:	68cb      	ldr	r3, [r1, #12]
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d682a:	4604      	mov	r4, r0
   d682c:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   d682e:	b923      	cbnz	r3, d683a <_ZN7FatFile11openClusterEPS_+0x14>
    return openRoot(file->m_vol);
   d6830:	6889      	ldr	r1, [r1, #8]
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   d6832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
   d6836:	f000 bc08 	b.w	d704a <_ZN7FatFile8openRootEP9FatVolume>
  }
  memset(this, 0, sizeof(FatFile));
   d683a:	2224      	movs	r2, #36	; 0x24
   d683c:	2100      	movs	r1, #0
   d683e:	f005 f965 	bl	dbb0c <memset>
  m_attr = FILE_ATTR_SUBDIR;
   d6842:	2310      	movs	r3, #16
  m_flags = F_READ;
   d6844:	2001      	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attr = FILE_ATTR_SUBDIR;
   d6846:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   d6848:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   d684a:	68ab      	ldr	r3, [r5, #8]
   d684c:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   d684e:	68eb      	ldr	r3, [r5, #12]
   d6850:	6223      	str	r3, [r4, #32]
  return true;
}
   d6852:	bd38      	pop	{r3, r4, r5, pc}

000d6854 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d6854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d6858:	7803      	ldrb	r3, [r0, #0]
   d685a:	2b20      	cmp	r3, #32
   d685c:	f100 0401 	add.w	r4, r0, #1
   d6860:	d101      	bne.n	d6866 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d6862:	4620      	mov	r0, r4
   d6864:	e7f8      	b.n	d6858 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6866:	4f70      	ldr	r7, [pc, #448]	; (d6a28 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d6868:	6088      	str	r0, [r1, #8]
   d686a:	4605      	mov	r5, r0
   d686c:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d686e:	462e      	mov	r6, r5
   d6870:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d6874:	b30b      	cbz	r3, d68ba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d6876:	2b2f      	cmp	r3, #47	; 0x2f
   d6878:	d101      	bne.n	d687e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d687a:	1903      	adds	r3, r0, r4
   d687c:	e017      	b.n	d68ae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d687e:	2b5c      	cmp	r3, #92	; 0x5c
   d6880:	d102      	bne.n	d6888 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d6882:	2000      	movs	r0, #0
   d6884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6888:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d688c:	b2e4      	uxtb	r4, r4
   d688e:	2c1d      	cmp	r4, #29
   d6890:	d803      	bhi.n	d689a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d6892:	fa27 f404 	lsr.w	r4, r7, r4
   d6896:	07e4      	lsls	r4, r4, #31
   d6898:	d4f3      	bmi.n	d6882 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d689a:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d689e:	2c3c      	cmp	r4, #60	; 0x3c
   d68a0:	d0ef      	beq.n	d6882 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d68a2:	3b20      	subs	r3, #32
   d68a4:	2b5e      	cmp	r3, #94	; 0x5e
   d68a6:	d9e1      	bls.n	d686c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d68a8:	e7eb      	b.n	d6882 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d68aa:	2d2f      	cmp	r5, #47	; 0x2f
   d68ac:	d105      	bne.n	d68ba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d68ae:	461e      	mov	r6, r3
   d68b0:	f813 5b01 	ldrb.w	r5, [r3], #1
   d68b4:	2d20      	cmp	r5, #32
   d68b6:	d1f8      	bne.n	d68aa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d68b8:	e7f9      	b.n	d68ae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d68ba:	6016      	str	r6, [r2, #0]
   d68bc:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d68be:	4298      	cmp	r0, r3
   d68c0:	ebc0 0803 	rsb	r8, r0, r3
   d68c4:	d009      	beq.n	d68da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d68c6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d68ca:	2a2e      	cmp	r2, #46	; 0x2e
   d68cc:	d0f7      	beq.n	d68be <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d68ce:	2a20      	cmp	r2, #32
   d68d0:	d0f5      	beq.n	d68be <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d68d2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d68d6:	dcd4      	bgt.n	d6882 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d68d8:	e001      	b.n	d68de <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d68da:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d68de:	f8c1 8004 	str.w	r8, [r1, #4]
   d68e2:	f101 030c 	add.w	r3, r1, #12
   d68e6:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d68ea:	2420      	movs	r4, #32
   d68ec:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d68f0:	4293      	cmp	r3, r2
   d68f2:	d1fb      	bne.n	d68ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d68f4:	4603      	mov	r3, r0
   d68f6:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d68f8:	f813 4b01 	ldrb.w	r4, [r3], #1
   d68fc:	2c2e      	cmp	r4, #46	; 0x2e
   d68fe:	d0fa      	beq.n	d68f6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d6900:	2c20      	cmp	r4, #32
   d6902:	d0f8      	beq.n	d68f6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d6904:	fab2 f482 	clz	r4, r2
   d6908:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d690a:	f108 36ff 	add.w	r6, r8, #4294967295
   d690e:	1c73      	adds	r3, r6, #1
   d6910:	d107      	bne.n	d6922 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d6912:	2700      	movs	r7, #0
   d6914:	f04f 0e07 	mov.w	lr, #7
   d6918:	463d      	mov	r5, r7
   d691a:	46ba      	mov	sl, r7
   d691c:	f04f 0908 	mov.w	r9, #8
   d6920:	e009      	b.n	d6936 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d6922:	5d83      	ldrb	r3, [r0, r6]
   d6924:	2b2e      	cmp	r3, #46	; 0x2e
   d6926:	d0f4      	beq.n	d6912 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d6928:	3e01      	subs	r6, #1
   d692a:	e7f0      	b.n	d690e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d692c:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d692e:	2b20      	cmp	r3, #32
   d6930:	d104      	bne.n	d693c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d6932:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d6934:	3201      	adds	r2, #1
   d6936:	4542      	cmp	r2, r8
   d6938:	dbf8      	blt.n	d692c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d693a:	e04b      	b.n	d69d4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d693c:	2b2e      	cmp	r3, #46	; 0x2e
   d693e:	d102      	bne.n	d6946 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d6940:	42b2      	cmp	r2, r6
   d6942:	d1f6      	bne.n	d6932 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d6944:	e003      	b.n	d694e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d6946:	2b22      	cmp	r3, #34	; 0x22
   d6948:	d017      	beq.n	d697a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d694a:	2b7c      	cmp	r3, #124	; 0x7c
   d694c:	d015      	beq.n	d697a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d694e:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d6952:	f1bc 0f05 	cmp.w	ip, #5
   d6956:	d801      	bhi.n	d695c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d6958:	2b2d      	cmp	r3, #45	; 0x2d
   d695a:	d10e      	bne.n	d697a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d695c:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d6960:	f1bc 0f05 	cmp.w	ip, #5
   d6964:	d909      	bls.n	d697a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d6966:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d696a:	f1bc 0f02 	cmp.w	ip, #2
   d696e:	d904      	bls.n	d697a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d6970:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d6974:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d6978:	d902      	bls.n	d6980 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d697a:	42b2      	cmp	r2, r6
   d697c:	d10e      	bne.n	d699c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d697e:	e049      	b.n	d6a14 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d6980:	42b2      	cmp	r2, r6
   d6982:	d047      	beq.n	d6a14 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d6984:	4575      	cmp	r5, lr
   d6986:	d821      	bhi.n	d69cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d6988:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d698c:	f1bc 0f19 	cmp.w	ip, #25
   d6990:	d808      	bhi.n	d69a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d6992:	3b20      	subs	r3, #32
   d6994:	b2db      	uxtb	r3, r3
        lc |= bit;
   d6996:	ea49 0707 	orr.w	r7, r9, r7
   d699a:	e00a      	b.n	d69b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d699c:	4575      	cmp	r5, lr
   d699e:	d815      	bhi.n	d69cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d69a0:	2400      	movs	r4, #0
      c = '_';
   d69a2:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d69a4:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d69a8:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d69ac:	bf98      	it	ls
   d69ae:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d69b2:	f105 0c01 	add.w	ip, r5, #1
   d69b6:	fa5f fc8c 	uxtb.w	ip, ip
   d69ba:	440d      	add	r5, r1
      if (i < 7) {
   d69bc:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d69c0:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d69c2:	d801      	bhi.n	d69c8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d69c4:	f881 c00c 	strb.w	ip, [r1, #12]
   d69c8:	4665      	mov	r5, ip
   d69ca:	e7b3      	b.n	d6934 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d69cc:	f1be 0f0a 	cmp.w	lr, #10
   d69d0:	d117      	bne.n	d6a02 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d69d2:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d69d4:	7b4b      	ldrb	r3, [r1, #13]
   d69d6:	2b20      	cmp	r3, #32
   d69d8:	f43f af53 	beq.w	d6882 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d69dc:	b13c      	cbz	r4, d69ee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d69de:	ea1a 0f07 	tst.w	sl, r7
   d69e2:	bf18      	it	ne
   d69e4:	2702      	movne	r7, #2
   d69e6:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d69e8:	2001      	movs	r0, #1
   d69ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d69ee:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d69f0:	2001      	movs	r0, #1
   d69f2:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d69f4:	4419      	add	r1, r3
   d69f6:	237e      	movs	r3, #126	; 0x7e
   d69f8:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d69fa:	2331      	movs	r3, #49	; 0x31
   d69fc:	738b      	strb	r3, [r1, #14]
   d69fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d6a02:	42b2      	cmp	r2, r6
   d6a04:	dce5      	bgt.n	d69d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d6a06:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d6a08:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d6a0c:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d6a0e:	f04f 0910 	mov.w	r9, #16
   d6a12:	e78e      	b.n	d6932 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d6a14:	f1be 0f0a 	cmp.w	lr, #10
   d6a18:	d0db      	beq.n	d69d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d6a1a:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d6a1c:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d6a20:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d6a22:	f04f 0910 	mov.w	r9, #16
   d6a26:	e785      	b.n	d6934 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d6a28:	31000101 	.word	0x31000101

000d6a2c <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d6a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6a2e:	b08b      	sub	sp, #44	; 0x2c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d6a30:	2300      	movs	r3, #0
   d6a32:	f88d 3004 	strb.w	r3, [sp, #4]
   d6a36:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6a3a:	7803      	ldrb	r3, [r0, #0]
   d6a3c:	0719      	lsls	r1, r3, #28

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d6a3e:	4604      	mov	r4, r0
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6a40:	d508      	bpl.n	d6a54 <_ZN7FatFile6removeEv+0x28>
   d6a42:	7883      	ldrb	r3, [r0, #2]
   d6a44:	079a      	lsls	r2, r3, #30
   d6a46:	d505      	bpl.n	d6a54 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   d6a48:	6a01      	ldr	r1, [r0, #32]
   d6a4a:	b129      	cbz	r1, d6a58 <_ZN7FatFile6removeEv+0x2c>
   d6a4c:	68a0      	ldr	r0, [r4, #8]
   d6a4e:	f000 ff60 	bl	d7912 <_ZN9FatVolume9freeChainEm>
   d6a52:	b908      	cbnz	r0, d6a58 <_ZN7FatFile6removeEv+0x2c>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   d6a54:	2000      	movs	r0, #0
   d6a56:	e049      	b.n	d6aec <_ZN7FatFile6removeEv+0xc0>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d6a58:	2101      	movs	r1, #1
   d6a5a:	4620      	mov	r0, r4
   d6a5c:	f000 fabc 	bl	d6fd8 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d6a60:	4605      	mov	r5, r0
   d6a62:	2800      	cmp	r0, #0
   d6a64:	d0f6      	beq.n	d6a54 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
   d6a66:	f7ff fecf 	bl	d6808 <_ZN7FatFile11lfnChecksumEPh>

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;
   d6a6a:	26e5      	movs	r6, #229	; 0xe5
   d6a6c:	702e      	strb	r6, [r5, #0]

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
   d6a6e:	2300      	movs	r3, #0
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
   d6a70:	4607      	mov	r7, r0

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
   d6a72:	7023      	strb	r3, [r4, #0]

  // Write entry to device.
  if (!m_vol->cacheSync()) {
   d6a74:	68a0      	ldr	r0, [r4, #8]
   d6a76:	f7ff feba 	bl	d67ee <_ZN9FatVolume9cacheSyncEv>
   d6a7a:	2800      	cmp	r0, #0
   d6a7c:	d0ea      	beq.n	d6a54 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
   d6a7e:	78e3      	ldrb	r3, [r4, #3]
   d6a80:	2b00      	cmp	r3, #0
   d6a82:	d033      	beq.n	d6aec <_ZN7FatFile6removeEv+0xc0>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
   d6a84:	4621      	mov	r1, r4
   d6a86:	a801      	add	r0, sp, #4
   d6a88:	f7ff fecd 	bl	d6826 <_ZN7FatFile11openClusterEPS_>
   d6a8c:	2800      	cmp	r0, #0
   d6a8e:	d0e1      	beq.n	d6a54 <_ZN7FatFile6removeEv+0x28>
   d6a90:	2501      	movs	r5, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d6a92:	78e3      	ldrb	r3, [r4, #3]
   d6a94:	42ab      	cmp	r3, r5
   d6a96:	d3dd      	bcc.n	d6a54 <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   d6a98:	88a1      	ldrh	r1, [r4, #4]
   d6a9a:	1b49      	subs	r1, r1, r5
   d6a9c:	0149      	lsls	r1, r1, #5
   d6a9e:	a801      	add	r0, sp, #4
   d6aa0:	f000 fbce 	bl	d7240 <_ZN7FatFile7seekSetEm>
   d6aa4:	2800      	cmp	r0, #0
   d6aa6:	d0d5      	beq.n	d6a54 <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   d6aa8:	2100      	movs	r1, #0
   d6aaa:	a801      	add	r0, sp, #4
   d6aac:	f000 fbab 	bl	d7206 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d6ab0:	2800      	cmp	r0, #0
   d6ab2:	d0cf      	beq.n	d6a54 <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d6ab4:	7ac3      	ldrb	r3, [r0, #11]
   d6ab6:	2b0f      	cmp	r3, #15
   d6ab8:	d1cc      	bne.n	d6a54 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   d6aba:	7802      	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d6abc:	f002 031f 	and.w	r3, r2, #31
   d6ac0:	429d      	cmp	r5, r3
   d6ac2:	d1c7      	bne.n	d6a54 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   d6ac4:	7b43      	ldrb	r3, [r0, #13]
   d6ac6:	42bb      	cmp	r3, r7
   d6ac8:	d1c4      	bne.n	d6a54 <_ZN7FatFile6removeEv+0x28>
        chksum != ldir->chksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->ord & LDIR_ORD_LAST_LONG_ENTRY;
    ldir->ord = DIR_NAME_DELETED;
   d6aca:	7006      	strb	r6, [r0, #0]
    m_vol->cacheDirty();
   d6acc:	68a1      	ldr	r1, [r4, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d6ace:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   d6ad2:	f043 0301 	orr.w	r3, r3, #1
   d6ad6:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   d6ada:	0653      	lsls	r3, r2, #25
   d6adc:	d503      	bpl.n	d6ae6 <_ZN7FatFile6removeEv+0xba>
      if (!m_vol->cacheSync()) {
   d6ade:	68a0      	ldr	r0, [r4, #8]
   d6ae0:	f7ff fe85 	bl	d67ee <_ZN9FatVolume9cacheSyncEv>
   d6ae4:	e002      	b.n	d6aec <_ZN7FatFile6removeEv+0xc0>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d6ae6:	3501      	adds	r5, #1
   d6ae8:	b2ed      	uxtb	r5, r5
   d6aea:	e7d2      	b.n	d6a92 <_ZN7FatFile6removeEv+0x66>
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
}
   d6aec:	b00b      	add	sp, #44	; 0x2c
   d6aee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6af0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d6af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d6af4:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d6af8:	4606      	mov	r6, r0
   d6afa:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d6afc:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d6afe:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d6b00:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d6b04:	6869      	ldr	r1, [r5, #4]
   d6b06:	68aa      	ldr	r2, [r5, #8]
   d6b08:	1863      	adds	r3, r4, r1
   d6b0a:	b29b      	uxth	r3, r3
   d6b0c:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d6b0e:	4291      	cmp	r1, r2
   d6b10:	d006      	beq.n	d6b20 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d6b12:	f812 0b01 	ldrb.w	r0, [r2], #1
   d6b16:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d6b1a:	4043      	eors	r3, r0
   d6b1c:	b29b      	uxth	r3, r3
   d6b1e:	e7f6      	b.n	d6b0e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d6b20:	f1b9 0f03 	cmp.w	r9, #3
   d6b24:	bf28      	it	cs
   d6b26:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6b2a:	f109 0204 	add.w	r2, r9, #4
   d6b2e:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d6b30:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6b34:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6b36:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6b38:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6b3a:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6b3c:	bf94      	ite	ls
   d6b3e:	3130      	addls	r1, #48	; 0x30
   d6b40:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6b42:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6b44:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d6b46:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6b4a:	d3f1      	bcc.n	d6b30 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d6b4c:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d6b50:	2100      	movs	r1, #0
   d6b52:	735f      	strb	r7, [r3, #13]
   d6b54:	4630      	mov	r0, r6
   d6b56:	f000 fb73 	bl	d7240 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d6b5a:	2101      	movs	r1, #1
   d6b5c:	4630      	mov	r0, r6
   d6b5e:	f000 fb52 	bl	d7206 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d6b62:	4601      	mov	r1, r0
   d6b64:	b928      	cbnz	r0, d6b72 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d6b66:	7870      	ldrb	r0, [r6, #1]
   d6b68:	fab0 f080 	clz	r0, r0
   d6b6c:	0940      	lsrs	r0, r0, #5
   d6b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d6b72:	7803      	ldrb	r3, [r0, #0]
   d6b74:	b14b      	cbz	r3, d6b8a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d6b76:	7ac3      	ldrb	r3, [r0, #11]
   d6b78:	071b      	lsls	r3, r3, #28
   d6b7a:	d4ee      	bmi.n	d6b5a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d6b7c:	220b      	movs	r2, #11
   d6b7e:	4640      	mov	r0, r8
   d6b80:	f004 ffaa 	bl	dbad8 <memcmp>
   d6b84:	2800      	cmp	r0, #0
   d6b86:	d1e8      	bne.n	d6b5a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d6b88:	e002      	b.n	d6b90 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d6b8a:	2001      	movs	r0, #1
   d6b8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d6b90:	3401      	adds	r4, #1
   d6b92:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d6b94:	2c64      	cmp	r4, #100	; 0x64
   d6b96:	d1b5      	bne.n	d6b04 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d6b98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d6b9c <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6ba0:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6ba2:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6ba4:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6ba6:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6baa:	9005      	str	r0, [sp, #20]
   d6bac:	460e      	mov	r6, r1
   d6bae:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6bb0:	d101      	bne.n	d6bb6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d6bb2:	2000      	movs	r0, #0
   d6bb4:	e1a0      	b.n	d6ef8 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6bb6:	9b05      	ldr	r3, [sp, #20]
   d6bb8:	781b      	ldrb	r3, [r3, #0]
   d6bba:	2b00      	cmp	r3, #0
   d6bbc:	d1f9      	bne.n	d6bb2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d6bbe:	6853      	ldr	r3, [r2, #4]
   d6bc0:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d6bc2:	7813      	ldrb	r3, [r2, #0]
   d6bc4:	079b      	lsls	r3, r3, #30
   d6bc6:	f000 818d 	beq.w	d6ee4 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d6bca:	9b02      	ldr	r3, [sp, #8]
   d6bcc:	270d      	movs	r7, #13
   d6bce:	330c      	adds	r3, #12
   d6bd0:	fbb3 f7f7 	udiv	r7, r3, r7
   d6bd4:	3701      	adds	r7, #1
   d6bd6:	b2ff      	uxtb	r7, r7
   d6bd8:	2100      	movs	r1, #0
   d6bda:	4630      	mov	r0, r6
   d6bdc:	f000 fb30 	bl	d7240 <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d6be0:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d6be4:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d6be8:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d6bec:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d6bee:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d6bf0:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d6bf2:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d6bf6:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d6bf8:	6972      	ldr	r2, [r6, #20]
   d6bfa:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d6bfc:	2101      	movs	r1, #1
   d6bfe:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d6c00:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d6c04:	f000 faff 	bl	d7206 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d6c08:	9b07      	ldr	r3, [sp, #28]
   d6c0a:	b920      	cbnz	r0, d6c16 <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d6c0c:	7873      	ldrb	r3, [r6, #1]
   d6c0e:	2b00      	cmp	r3, #0
   d6c10:	f000 8090 	beq.w	d6d34 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d6c14:	e7cd      	b.n	d6bb2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d6c16:	7802      	ldrb	r2, [r0, #0]
   d6c18:	2ae5      	cmp	r2, #229	; 0xe5
   d6c1a:	d000      	beq.n	d6c1e <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d6c1c:	b942      	cbnz	r2, d6c30 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d6c1e:	2c00      	cmp	r4, #0
   d6c20:	bf08      	it	eq
   d6c22:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d6c24:	42bc      	cmp	r4, r7
        freeFound++;
   d6c26:	bf3c      	itt	cc
   d6c28:	3401      	addcc	r4, #1
   d6c2a:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d6c2c:	b922      	cbnz	r2, d6c38 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d6c2e:	e081      	b.n	d6d34 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d6c30:	42bc      	cmp	r4, r7
   d6c32:	bf38      	it	cc
   d6c34:	2400      	movcc	r4, #0
   d6c36:	e003      	b.n	d6c40 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d6c38:	2ae5      	cmp	r2, #229	; 0xe5
   d6c3a:	d101      	bne.n	d6c40 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d6c3c:	2500      	movs	r5, #0
   d6c3e:	e7db      	b.n	d6bf8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d6c40:	2a2e      	cmp	r2, #46	; 0x2e
   d6c42:	d0fb      	beq.n	d6c3c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6c44:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d6c46:	290f      	cmp	r1, #15
   d6c48:	d152      	bne.n	d6cf0 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d6c4a:	b93d      	cbnz	r5, d6c5c <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d6c4c:	0651      	lsls	r1, r2, #25
   d6c4e:	d5d3      	bpl.n	d6bf8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d6c50:	7b43      	ldrb	r3, [r0, #13]
   d6c52:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d6c54:	f002 051f 	and.w	r5, r2, #31
   d6c58:	462b      	mov	r3, r5
   d6c5a:	e007      	b.n	d6c6c <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d6c5c:	3b01      	subs	r3, #1
   d6c5e:	b2db      	uxtb	r3, r3
   d6c60:	429a      	cmp	r2, r3
   d6c62:	d1eb      	bne.n	d6c3c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6c64:	7b42      	ldrb	r2, [r0, #13]
   d6c66:	9903      	ldr	r1, [sp, #12]
   d6c68:	4291      	cmp	r1, r2
   d6c6a:	d1e7      	bne.n	d6c3c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d6c6c:	1e5a      	subs	r2, r3, #1
   d6c6e:	f04f 0c0d 	mov.w	ip, #13
   d6c72:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d6c76:	9a02      	ldr	r2, [sp, #8]
   d6c78:	4562      	cmp	r2, ip
   d6c7a:	d9df      	bls.n	d6c3c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6c7c:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d6c80:	f1be 0f04 	cmp.w	lr, #4
   d6c84:	fa5f f28e 	uxtb.w	r2, lr
   d6c88:	d804      	bhi.n	d6c94 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d6c8a:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d6c8e:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d6c92:	e00c      	b.n	d6cae <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d6c94:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6c96:	bf95      	itete	ls
   d6c98:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6c9c:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6ca0:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6ca4:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6ca8:	bf94      	ite	ls
   d6caa:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6cac:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d6cae:	9902      	ldr	r1, [sp, #8]
   d6cb0:	4561      	cmp	r1, ip
   d6cb2:	d103      	bne.n	d6cbc <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d6cb4:	2a00      	cmp	r2, #0
   d6cb6:	bf18      	it	ne
   d6cb8:	2500      	movne	r5, #0
   d6cba:	e79d      	b.n	d6bf8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6cbc:	2aff      	cmp	r2, #255	; 0xff
   d6cbe:	d8bd      	bhi.n	d6c3c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6cc0:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d6cc2:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d6cc6:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6cc8:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d6ccc:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d6cd0:	bf98      	it	ls
   d6cd2:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6cd4:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d6cd8:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d6cdc:	bf98      	it	ls
   d6cde:	b2d2      	uxtbls	r2, r2
   d6ce0:	f1bc 0f19 	cmp.w	ip, #25
   d6ce4:	bf9c      	itt	ls
   d6ce6:	3120      	addls	r1, #32
   d6ce8:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6cea:	4291      	cmp	r1, r2
   d6cec:	d1a6      	bne.n	d6c3c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6cee:	e0fb      	b.n	d6ee8 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d6cf0:	0709      	lsls	r1, r1, #28
   d6cf2:	d4a3      	bmi.n	d6c3c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d6cf4:	b14d      	cbz	r5, d6d0a <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d6cf6:	2b01      	cmp	r3, #1
   d6cf8:	f47f af5b 	bne.w	d6bb2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d6cfc:	f7ff fd84 	bl	d6808 <_ZN7FatFile11lfnChecksumEPh>
   d6d00:	9b03      	ldr	r3, [sp, #12]
   d6d02:	4283      	cmp	r3, r0
   d6d04:	f47f af55 	bne.w	d6bb2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d6d08:	e00f      	b.n	d6d2a <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d6d0a:	220b      	movs	r2, #11
   d6d0c:	9906      	ldr	r1, [sp, #24]
   d6d0e:	9307      	str	r3, [sp, #28]
   d6d10:	f004 fee2 	bl	dbad8 <memcmp>
   d6d14:	9b07      	ldr	r3, [sp, #28]
   d6d16:	2800      	cmp	r0, #0
   d6d18:	f47f af6e 	bne.w	d6bf8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d6d1c:	f899 2000 	ldrb.w	r2, [r9]
   d6d20:	07d2      	lsls	r2, r2, #31
   d6d22:	d502      	bpl.n	d6d2a <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d6d24:	2201      	movs	r2, #1
   d6d26:	9204      	str	r2, [sp, #16]
   d6d28:	e766      	b.n	d6bf8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d6d2a:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d6d2e:	f000 80d1 	beq.w	d6ed4 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d6d32:	e73e      	b.n	d6bb2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d6d34:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d6d38:	f43f af3b 	beq.w	d6bb2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d6d3c:	f00b 0303 	and.w	r3, fp, #3
   d6d40:	3b01      	subs	r3, #1
   d6d42:	2b01      	cmp	r3, #1
   d6d44:	f63f af35 	bhi.w	d6bb2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d6d48:	2c00      	cmp	r4, #0
   d6d4a:	bf08      	it	eq
   d6d4c:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d6d4e:	42bc      	cmp	r4, r7
   d6d50:	d302      	bcc.n	d6d58 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d6d52:	9b04      	ldr	r3, [sp, #16]
   d6d54:	b9cb      	cbnz	r3, d6d8a <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d6d56:	e01f      	b.n	d6d98 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d6d58:	2100      	movs	r1, #0
   d6d5a:	4630      	mov	r0, r6
   d6d5c:	f000 fa53 	bl	d7206 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d6d60:	b910      	cbnz	r0, d6d68 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d6d62:	7873      	ldrb	r3, [r6, #1]
   d6d64:	b15b      	cbz	r3, d6d7e <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d6d66:	e724      	b.n	d6bb2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d6d68:	3401      	adds	r4, #1
   d6d6a:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d6d6c:	e7ef      	b.n	d6d4e <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d6d6e:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d6d70:	791b      	ldrb	r3, [r3, #4]
   d6d72:	2b01      	cmp	r3, #1
   d6d74:	d8ed      	bhi.n	d6d52 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d6d76:	3410      	adds	r4, #16
   d6d78:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d6d7a:	42a7      	cmp	r7, r4
   d6d7c:	d9e9      	bls.n	d6d52 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d6d7e:	4630      	mov	r0, r6
   d6d80:	f000 f8ea 	bl	d6f58 <_ZN7FatFile13addDirClusterEv>
   d6d84:	2800      	cmp	r0, #0
   d6d86:	d1f2      	bne.n	d6d6e <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d6d88:	e713      	b.n	d6bb2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d6d8a:	4649      	mov	r1, r9
   d6d8c:	4630      	mov	r0, r6
   d6d8e:	f7ff feaf 	bl	d6af0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d6d92:	2800      	cmp	r0, #0
   d6d94:	f43f af0d 	beq.w	d6bb2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d6d98:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d6d9c:	4630      	mov	r0, r6
   d6d9e:	f000 fa4f 	bl	d7240 <_ZN7FatFile7seekSetEm>
   d6da2:	2800      	cmp	r0, #0
   d6da4:	f43f af05 	beq.w	d6bb2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d6da8:	1e7d      	subs	r5, r7, #1
   d6daa:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6dac:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d6dae:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d6db2:	f04f 080f 	mov.w	r8, #15
   d6db6:	e041      	b.n	d6e3c <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d6db8:	2100      	movs	r1, #0
   d6dba:	4630      	mov	r0, r6
   d6dbc:	f000 fa23 	bl	d7206 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d6dc0:	4607      	mov	r7, r0
   d6dc2:	2800      	cmp	r0, #0
   d6dc4:	f43f aef5 	beq.w	d6bb2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d6dc8:	68b2      	ldr	r2, [r6, #8]
   d6dca:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d6dce:	42ac      	cmp	r4, r5
   d6dd0:	f043 0301 	orr.w	r3, r3, #1
   d6dd4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d6dd8:	bf0c      	ite	eq
   d6dda:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d6dde:	4622      	movne	r2, r4
   d6de0:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d6de2:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d6de6:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d6dea:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d6dee:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d6df0:	f7ff fd0a 	bl	d6808 <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6df4:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d6df6:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d6df8:	f887 a01a 	strb.w	sl, [r7, #26]
   d6dfc:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6e00:	f002 021f 	and.w	r2, r2, #31
   d6e04:	230d      	movs	r3, #13
   d6e06:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d6e08:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6e0c:	435a      	muls	r2, r3
   d6e0e:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d6e10:	9902      	ldr	r1, [sp, #8]
   d6e12:	4291      	cmp	r1, r2
   d6e14:	d915      	bls.n	d6e42 <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d6e16:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d6e1a:	2b04      	cmp	r3, #4
   d6e1c:	fa5f fc83 	uxtb.w	ip, r3
   d6e20:	f103 0001 	add.w	r0, r3, #1
   d6e24:	d813      	bhi.n	d6e4e <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d6e26:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d6e2a:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d6e2e:	280d      	cmp	r0, #13
   d6e30:	f102 0201 	add.w	r2, r2, #1
   d6e34:	4603      	mov	r3, r0
   d6e36:	d1eb      	bne.n	d6e10 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6e38:	3c01      	subs	r4, #1
   d6e3a:	b2e4      	uxtb	r4, r4
   d6e3c:	2c00      	cmp	r4, #0
   d6e3e:	d1bb      	bne.n	d6db8 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d6e40:	e00e      	b.n	d6e60 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d6e42:	bf14      	ite	ne
   d6e44:	f04f 31ff 	movne.w	r1, #4294967295
   d6e48:	2100      	moveq	r1, #0
   d6e4a:	b289      	uxth	r1, r1
   d6e4c:	e7e5      	b.n	d6e1a <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d6e4e:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d6e52:	bf94      	ite	ls
   d6e54:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d6e58:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d6e5c:	8099      	strh	r1, [r3, #4]
   d6e5e:	e7e6      	b.n	d6e2e <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d6e60:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d6e62:	4621      	mov	r1, r4
   d6e64:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d6e66:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d6e6a:	f000 f9cc 	bl	d7206 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d6e6e:	4607      	mov	r7, r0
   d6e70:	2800      	cmp	r0, #0
   d6e72:	f43f ae9e 	beq.w	d6bb2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d6e76:	2220      	movs	r2, #32
   d6e78:	4621      	mov	r1, r4
   d6e7a:	f004 fe47 	bl	dbb0c <memset>
  memcpy(dir->name, fname->sfn, 11);
   d6e7e:	464b      	mov	r3, r9
   d6e80:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d6e84:	603a      	str	r2, [r7, #0]
   d6e86:	685a      	ldr	r2, [r3, #4]
   d6e88:	607a      	str	r2, [r7, #4]
   d6e8a:	891a      	ldrh	r2, [r3, #8]
   d6e8c:	813a      	strh	r2, [r7, #8]
   d6e8e:	7a9b      	ldrb	r3, [r3, #10]
   d6e90:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d6e92:	f899 3000 	ldrb.w	r3, [r9]
   d6e96:	f003 0318 	and.w	r3, r3, #24
   d6e9a:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d6e9c:	4b18      	ldr	r3, [pc, #96]	; (d6f00 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d6e9e:	681b      	ldr	r3, [r3, #0]
   d6ea0:	b12b      	cbz	r3, d6eae <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d6ea2:	f107 010e 	add.w	r1, r7, #14
   d6ea6:	f107 0010 	add.w	r0, r7, #16
   d6eaa:	4798      	blx	r3
   d6eac:	e006      	b.n	d6ebc <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d6eae:	2321      	movs	r3, #33	; 0x21
   d6eb0:	743b      	strb	r3, [r7, #16]
   d6eb2:	2328      	movs	r3, #40	; 0x28
   d6eb4:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d6eb6:	2308      	movs	r3, #8
   d6eb8:	73bc      	strb	r4, [r7, #14]
   d6eba:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d6ebc:	8a3b      	ldrh	r3, [r7, #16]
   d6ebe:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d6ec0:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d6ec2:	89fb      	ldrh	r3, [r7, #14]
   d6ec4:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d6ec6:	68b2      	ldr	r2, [r6, #8]
   d6ec8:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d6ecc:	f043 0301 	orr.w	r3, r3, #1
   d6ed0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d6ed4:	9500      	str	r5, [sp, #0]
   d6ed6:	465b      	mov	r3, fp
   d6ed8:	4652      	mov	r2, sl
   d6eda:	4631      	mov	r1, r6
   d6edc:	9805      	ldr	r0, [sp, #20]
   d6ede:	f000 f9f8 	bl	d72d2 <_ZN7FatFile15openCachedEntryEPS_tih>
   d6ee2:	e009      	b.n	d6ef8 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d6ee4:	2701      	movs	r7, #1
   d6ee6:	e677      	b.n	d6bd8 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d6ee8:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d6eec:	f1be 0f0d 	cmp.w	lr, #13
   d6ef0:	f43f ae82 	beq.w	d6bf8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6ef4:	46d4      	mov	ip, sl
   d6ef6:	e6c3      	b.n	d6c80 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d6ef8:	b009      	add	sp, #36	; 0x24
   d6efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6efe:	bf00      	nop
   d6f00:	2003df1c 	.word	0x2003df1c

000d6f04 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d6f04:	f001 bbf4 	b.w	d86f0 <HAL_Pin_Map>

000d6f08 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d6f08:	f001 bbf2 	b.w	d86f0 <HAL_Pin_Map>

000d6f0c <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d6f0c:	f001 bbf0 	b.w	d86f0 <HAL_Pin_Map>

000d6f10 <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   d6f10:	b510      	push	{r4, lr}
   d6f12:	460c      	mov	r4, r1
   d6f14:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   d6f16:	b909      	cbnz	r1, d6f1c <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   d6f18:	2000      	movs	r0, #0
   d6f1a:	bd10      	pop	{r4, pc}
  dir_t* dir;
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
   d6f1c:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   d6f20:	d004      	beq.n	d6f2c <_ZN7FatFile6getSFNEPc+0x1c>
    name[0] = '/';
   d6f22:	232f      	movs	r3, #47	; 0x2f
   d6f24:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   d6f26:	2300      	movs	r3, #0
   d6f28:	7063      	strb	r3, [r4, #1]
   d6f2a:	e006      	b.n	d6f3a <_ZN7FatFile6getSFNEPc+0x2a>
    return true;
  }
  // cache entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   d6f2c:	f000 f854 	bl	d6fd8 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d6f30:	2800      	cmp	r0, #0
   d6f32:	d0f1      	beq.n	d6f18 <_ZN7FatFile6getSFNEPc+0x8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  dirName(dir, name);
   d6f34:	4621      	mov	r1, r4
   d6f36:	f000 f85e 	bl	d6ff6 <_ZN7FatFile7dirNameEPK14directoryEntryPc>
  return true;
   d6f3a:	2001      	movs	r0, #1

fail:
  return false;
}
   d6f3c:	bd10      	pop	{r4, pc}

000d6f3e <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d6f3e:	f001 bbd7 	b.w	d86f0 <HAL_Pin_Map>

000d6f42 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d6f42:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d6f44:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d6f46:	f043 0304 	orr.w	r3, r3, #4
   d6f4a:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d6f4c:	f100 0210 	add.w	r2, r0, #16
   d6f50:	6880      	ldr	r0, [r0, #8]
   d6f52:	f000 bca3 	b.w	d789c <_ZN9FatVolume15allocateClusterEmPm>
	...

000d6f58 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d6f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d6f5c:	7803      	ldrb	r3, [r0, #0]
   d6f5e:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d6f62:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d6f64:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d6f68:	b10b      	cbz	r3, d6f6e <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d6f6a:	2600      	movs	r6, #0
   d6f6c:	e02e      	b.n	d6fcc <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d6f6e:	6942      	ldr	r2, [r0, #20]
   d6f70:	4b18      	ldr	r3, [pc, #96]	; (d6fd4 <_ZN7FatFile13addDirClusterEv+0x7c>)
   d6f72:	429a      	cmp	r2, r3
   d6f74:	d8f9      	bhi.n	d6f6a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d6f76:	f7ff ffe4 	bl	d6f42 <_ZN7FatFile10addClusterEv>
   d6f7a:	4606      	mov	r6, r0
   d6f7c:	2800      	cmp	r0, #0
   d6f7e:	d0f4      	beq.n	d6f6a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d6f80:	6921      	ldr	r1, [r4, #16]
   d6f82:	68a0      	ldr	r0, [r4, #8]
   d6f84:	f000 fc1f 	bl	d77c6 <_ZNK9FatVolume17clusterFirstBlockEm>
   d6f88:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6f8a:	68a0      	ldr	r0, [r4, #8]
   d6f8c:	2205      	movs	r2, #5
   d6f8e:	4639      	mov	r1, r7
   d6f90:	3024      	adds	r0, #36	; 0x24
   d6f92:	f000 fbf4 	bl	d777e <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d6f96:	4680      	mov	r8, r0
   d6f98:	2800      	cmp	r0, #0
   d6f9a:	d0e6      	beq.n	d6f6a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d6f9c:	4629      	mov	r1, r5
   d6f9e:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6fa2:	f004 fdb3 	bl	dbb0c <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d6fa6:	2501      	movs	r5, #1
   d6fa8:	68a3      	ldr	r3, [r4, #8]
   d6faa:	791a      	ldrb	r2, [r3, #4]
   d6fac:	42aa      	cmp	r2, r5
   d6fae:	d909      	bls.n	d6fc4 <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d6fb0:	4642      	mov	r2, r8
   d6fb2:	19e9      	adds	r1, r5, r7
   d6fb4:	6818      	ldr	r0, [r3, #0]
   d6fb6:	f000 ff5f 	bl	d7e78 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d6fba:	2800      	cmp	r0, #0
   d6fbc:	d0d5      	beq.n	d6f6a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d6fbe:	3501      	adds	r5, #1
   d6fc0:	b2ed      	uxtb	r5, r5
   d6fc2:	e7f1      	b.n	d6fa8 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d6fc4:	6963      	ldr	r3, [r4, #20]
   d6fc6:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d6fca:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d6fcc:	4630      	mov	r0, r6
   d6fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6fd2:	bf00      	nop
   d6fd4:	001ffdff 	.word	0x001ffdff

000d6fd8 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d6fd8:	b510      	push	{r4, lr}
   d6fda:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6fdc:	6880      	ldr	r0, [r0, #8]
   d6fde:	460a      	mov	r2, r1
   d6fe0:	3024      	adds	r0, #36	; 0x24
   d6fe2:	69a1      	ldr	r1, [r4, #24]
   d6fe4:	f000 fbcb 	bl	d777e <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d6fe8:	b120      	cbz	r0, d6ff4 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d6fea:	88a3      	ldrh	r3, [r4, #4]
   d6fec:	f003 030f 	and.w	r3, r3, #15
   d6ff0:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d6ff4:	bd10      	pop	{r4, pc}

000d6ff6 <_ZN7FatFile7dirNameEPK14directoryEntryPc>:

fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   d6ff6:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6ff8:	2400      	movs	r4, #0
   d6ffa:	1e45      	subs	r5, r0, #1
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
   d6ffc:	2608      	movs	r6, #8
fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
   d6ffe:	4623      	mov	r3, r4
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
   d7000:	272e      	movs	r7, #46	; 0x2e
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
   d7002:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d7006:	2a20      	cmp	r2, #32
   d7008:	d018      	beq.n	d703c <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x46>
      continue;
    }
    if (i == 8) {
   d700a:	2c08      	cmp	r4, #8
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
   d700c:	bf02      	ittt	eq
   d700e:	54cf      	strbeq	r7, [r1, r3]
   d7010:	1c5a      	addeq	r2, r3, #1
   d7012:	b2d3      	uxtbeq	r3, r2
    }
    char c = dir->name[i];
   d7014:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   d7016:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
   d701a:	bf08      	it	eq
   d701c:	2610      	moveq	r6, #16
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   d701e:	f1be 0f19 	cmp.w	lr, #25
   d7022:	d806      	bhi.n	d7032 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3c>
   d7024:	f890 e00c 	ldrb.w	lr, [r0, #12]
   d7028:	ea16 0f0e 	tst.w	r6, lr
      c += 'a' - 'A';
   d702c:	bf1c      	itt	ne
   d702e:	3220      	addne	r2, #32
   d7030:	b2d2      	uxtbne	r2, r2
    }
    name[j++] = c;
   d7032:	f103 0e01 	add.w	lr, r3, #1
   d7036:	54ca      	strb	r2, [r1, r3]
   d7038:	fa5f f38e 	uxtb.w	r3, lr
   d703c:	3401      	adds	r4, #1
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
   d703e:	2c0b      	cmp	r4, #11
   d7040:	d1df      	bne.n	d7002 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xc>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
   d7042:	2200      	movs	r2, #0
   d7044:	54ca      	strb	r2, [r1, r3]
  return j;
}
   d7046:	4618      	mov	r0, r3
   d7048:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d704a <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d704a:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d704c:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d704e:	4605      	mov	r5, r0
   d7050:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d7052:	b984      	cbnz	r4, d7076 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d7054:	2224      	movs	r2, #36	; 0x24
   d7056:	4621      	mov	r1, r4
   d7058:	f004 fd58 	bl	dbb0c <memset>

  m_vol = vol;
   d705c:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d705e:	79f3      	ldrb	r3, [r6, #7]
   d7060:	2b10      	cmp	r3, #16
   d7062:	d003      	beq.n	d706c <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d7064:	2b20      	cmp	r3, #32
   d7066:	d106      	bne.n	d7076 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d7068:	2340      	movs	r3, #64	; 0x40
   d706a:	e000      	b.n	d706e <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d706c:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d706e:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d7070:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d7072:	70a8      	strb	r0, [r5, #2]
   d7074:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d7076:	2000      	movs	r0, #0
   d7078:	bd70      	pop	{r4, r5, r6, pc}

000d707a <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d707a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d707e:	7803      	ldrb	r3, [r0, #0]
   d7080:	4604      	mov	r4, r0
   d7082:	4689      	mov	r9, r1
   d7084:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d7086:	b14b      	cbz	r3, d709c <_ZN7FatFile4readEPvj+0x22>
   d7088:	7882      	ldrb	r2, [r0, #2]
   d708a:	07d1      	lsls	r1, r2, #31
   d708c:	d506      	bpl.n	d709c <_ZN7FatFile4readEPvj+0x22>
   d708e:	e00c      	b.n	d70aa <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d7090:	465a      	mov	r2, fp
   d7092:	6921      	ldr	r1, [r4, #16]
   d7094:	f000 fb9d 	bl	d77d2 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d7098:	2800      	cmp	r0, #0
   d709a:	da3d      	bge.n	d7118 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d709c:	7863      	ldrb	r3, [r4, #1]
   d709e:	f043 0302 	orr.w	r3, r3, #2
   d70a2:	7063      	strb	r3, [r4, #1]
  return -1;
   d70a4:	f04f 30ff 	mov.w	r0, #4294967295
   d70a8:	e097      	b.n	d71da <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d70aa:	071a      	lsls	r2, r3, #28
   d70ac:	d503      	bpl.n	d70b6 <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d70ae:	69e3      	ldr	r3, [r4, #28]
   d70b0:	6962      	ldr	r2, [r4, #20]
   d70b2:	1a9b      	subs	r3, r3, r2
   d70b4:	e007      	b.n	d70c6 <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d70b6:	069a      	lsls	r2, r3, #26
   d70b8:	d508      	bpl.n	d70cc <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d70ba:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d70bc:	891a      	ldrh	r2, [r3, #8]
   d70be:	6963      	ldr	r3, [r4, #20]
   d70c0:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d70c4:	b29b      	uxth	r3, r3
   d70c6:	429d      	cmp	r5, r3
   d70c8:	bf28      	it	cs
   d70ca:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d70cc:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d70ce:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d70d2:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d70d6:	2e00      	cmp	r6, #0
   d70d8:	d035      	beq.n	d7146 <_ZN7FatFile4readEPvj+0xcc>
   d70da:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d70dc:	6963      	ldr	r3, [r4, #20]
   d70de:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d70e0:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d70e4:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d70e8:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d70ec:	d002      	beq.n	d70f4 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d70ee:	6a03      	ldr	r3, [r0, #32]
   d70f0:	4419      	add	r1, r3
   d70f2:	e01d      	b.n	d7130 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d70f4:	f890 8005 	ldrb.w	r8, [r0, #5]
   d70f8:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d70fc:	f1ba 0f00 	cmp.w	sl, #0
   d7100:	d110      	bne.n	d7124 <_ZN7FatFile4readEPvj+0xaa>
   d7102:	f1b8 0f00 	cmp.w	r8, #0
   d7106:	d10d      	bne.n	d7124 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d7108:	2b00      	cmp	r3, #0
   d710a:	d1c1      	bne.n	d7090 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d710c:	0653      	lsls	r3, r2, #25
   d710e:	bf4c      	ite	mi
   d7110:	6a03      	ldrmi	r3, [r0, #32]
   d7112:	6a23      	ldrpl	r3, [r4, #32]
   d7114:	6123      	str	r3, [r4, #16]
   d7116:	e005      	b.n	d7124 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d7118:	d104      	bne.n	d7124 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d711a:	7823      	ldrb	r3, [r4, #0]
   d711c:	f013 0f70 	tst.w	r3, #112	; 0x70
   d7120:	d111      	bne.n	d7146 <_ZN7FatFile4readEPvj+0xcc>
   d7122:	e7bb      	b.n	d709c <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d7124:	6921      	ldr	r1, [r4, #16]
   d7126:	68a0      	ldr	r0, [r4, #8]
   d7128:	f000 fb4d 	bl	d77c6 <_ZNK9FatVolume17clusterFirstBlockEm>
   d712c:	eb08 0100 	add.w	r1, r8, r0
   d7130:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d7132:	f1ba 0f00 	cmp.w	sl, #0
   d7136:	d135      	bne.n	d71a4 <_ZN7FatFile4readEPvj+0x12a>
   d7138:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d713c:	d332      	bcc.n	d71a4 <_ZN7FatFile4readEPvj+0x12a>
   d713e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d7140:	4299      	cmp	r1, r3
   d7142:	d102      	bne.n	d714a <_ZN7FatFile4readEPvj+0xd0>
   d7144:	e02e      	b.n	d71a4 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d7146:	1ba8      	subs	r0, r5, r6
   d7148:	e047      	b.n	d71da <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d714a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d714e:	d31b      	bcc.n	d7188 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d7150:	7822      	ldrb	r2, [r4, #0]
   d7152:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d7154:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d7158:	d406      	bmi.n	d7168 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d715a:	7902      	ldrb	r2, [r0, #4]
   d715c:	ebc8 0202 	rsb	r2, r8, r2
   d7160:	b2d2      	uxtb	r2, r2
   d7162:	4592      	cmp	sl, r2
   d7164:	bf28      	it	cs
   d7166:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d7168:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d716a:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d716e:	d207      	bcs.n	d7180 <_ZN7FatFile4readEPvj+0x106>
   d7170:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d7172:	4653      	mov	r3, sl
   d7174:	464a      	mov	r2, r9
   d7176:	6800      	ldr	r0, [r0, #0]
   d7178:	f000 fe3c 	bl	d7df4 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d717c:	b960      	cbnz	r0, d7198 <_ZN7FatFile4readEPvj+0x11e>
   d717e:	e78d      	b.n	d709c <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d7180:	4453      	add	r3, sl
   d7182:	4299      	cmp	r1, r3
   d7184:	d321      	bcc.n	d71ca <_ZN7FatFile4readEPvj+0x150>
   d7186:	e7f3      	b.n	d7170 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d7188:	464a      	mov	r2, r9
   d718a:	6800      	ldr	r0, [r0, #0]
   d718c:	f000 fdea 	bl	d7d64 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d7190:	2800      	cmp	r0, #0
   d7192:	d083      	beq.n	d709c <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d7194:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d7198:	6963      	ldr	r3, [r4, #20]
   d719a:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d719c:	44b9      	add	r9, r7
    m_curPosition += n;
   d719e:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d71a0:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d71a2:	e798      	b.n	d70d6 <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d71a4:	2200      	movs	r2, #0
   d71a6:	3024      	adds	r0, #36	; 0x24
   d71a8:	f000 fae9 	bl	d777e <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d71ac:	2800      	cmp	r0, #0
   d71ae:	f43f af75 	beq.w	d709c <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d71b2:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d71b6:	42b7      	cmp	r7, r6
   d71b8:	bf28      	it	cs
   d71ba:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d71bc:	eb00 010a 	add.w	r1, r0, sl
   d71c0:	463a      	mov	r2, r7
   d71c2:	4648      	mov	r0, r9
   d71c4:	f004 fc97 	bl	dbaf6 <memcpy>
   d71c8:	e7e6      	b.n	d7198 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d71ca:	3024      	adds	r0, #36	; 0x24
   d71cc:	9101      	str	r1, [sp, #4]
   d71ce:	f000 faaf 	bl	d7730 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d71d2:	9901      	ldr	r1, [sp, #4]
   d71d4:	2800      	cmp	r0, #0
   d71d6:	d1cb      	bne.n	d7170 <_ZN7FatFile4readEPvj+0xf6>
   d71d8:	e760      	b.n	d709c <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d71da:	b003      	add	sp, #12
   d71dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d71e0 <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d71e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d71e2:	2201      	movs	r2, #1
   d71e4:	f10d 0107 	add.w	r1, sp, #7
   d71e8:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d71ea:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d71ec:	6905      	ldr	r5, [r0, #16]
   d71ee:	f7ff ff44 	bl	d707a <_ZN7FatFile4readEPvj>
   d71f2:	2801      	cmp	r0, #1
   d71f4:	bf05      	ittet	eq
   d71f6:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d71fa:	6166      	streq	r6, [r4, #20]
   d71fc:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = pos->cluster;
   d7200:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d7202:	b002      	add	sp, #8
   d7204:	bd70      	pop	{r4, r5, r6, pc}

000d7206 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d7206:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d7208:	6943      	ldr	r3, [r0, #20]
   d720a:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d720e:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d7210:	b105      	cbz	r5, d7214 <_ZN7FatFile12readDirCacheEb+0xe>
   d7212:	b969      	cbnz	r1, d7230 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d7214:	2201      	movs	r2, #1
   d7216:	f10d 0107 	add.w	r1, sp, #7
   d721a:	4620      	mov	r0, r4
   d721c:	f7ff ff2d 	bl	d707a <_ZN7FatFile4readEPvj>
   d7220:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d7222:	2801      	cmp	r0, #1
   d7224:	d001      	beq.n	d722a <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d7226:	2000      	movs	r0, #0
   d7228:	e008      	b.n	d723c <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d722a:	6963      	ldr	r3, [r4, #20]
   d722c:	331f      	adds	r3, #31
   d722e:	e000      	b.n	d7232 <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d7230:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d7232:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d7234:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d7236:	3030      	adds	r0, #48	; 0x30
   d7238:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d723c:	b003      	add	sp, #12
   d723e:	bd30      	pop	{r4, r5, pc}

000d7240 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d7240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7244:	460e      	mov	r6, r1
   d7246:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d7248:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d724a:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d724c:	2900      	cmp	r1, #0
   d724e:	d039      	beq.n	d72c4 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d7250:	6945      	ldr	r5, [r0, #20]
   d7252:	42b5      	cmp	r5, r6
   d7254:	d03a      	beq.n	d72cc <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d7256:	b90e      	cbnz	r6, d725c <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d7258:	6106      	str	r6, [r0, #16]
    goto done;
   d725a:	e031      	b.n	d72c0 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d725c:	070b      	lsls	r3, r1, #28
   d725e:	d503      	bpl.n	d7268 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d7260:	69c3      	ldr	r3, [r0, #28]
   d7262:	429e      	cmp	r6, r3
   d7264:	d82e      	bhi.n	d72c4 <_ZN7FatFile7seekSetEm+0x84>
   d7266:	e007      	b.n	d7278 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d7268:	0688      	lsls	r0, r1, #26
   d726a:	d505      	bpl.n	d7278 <_ZN7FatFile7seekSetEm+0x38>
   d726c:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d726e:	891b      	ldrh	r3, [r3, #8]
   d7270:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d7274:	d826      	bhi.n	d72c4 <_ZN7FatFile7seekSetEm+0x84>
   d7276:	e023      	b.n	d72c0 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d7278:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d727c:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d7280:	1e6a      	subs	r2, r5, #1
   d7282:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d7286:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d7288:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d728a:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d728c:	429a      	cmp	r2, r3
   d728e:	d800      	bhi.n	d7292 <_ZN7FatFile7seekSetEm+0x52>
   d7290:	b94d      	cbnz	r5, d72a6 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d7292:	064a      	lsls	r2, r1, #25
   d7294:	bf4c      	ite	mi
   d7296:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d729a:	6a22      	ldrpl	r2, [r4, #32]
   d729c:	6122      	str	r2, [r4, #16]
   d729e:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d72a0:	f104 0810 	add.w	r8, r4, #16
   d72a4:	e00a      	b.n	d72bc <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d72a6:	1a9b      	subs	r3, r3, r2
   d72a8:	e7f9      	b.n	d729e <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d72aa:	4642      	mov	r2, r8
   d72ac:	6921      	ldr	r1, [r4, #16]
   d72ae:	68a0      	ldr	r0, [r4, #8]
   d72b0:	f000 fa8f 	bl	d77d2 <_ZN9FatVolume6fatGetEmPm>
   d72b4:	2800      	cmp	r0, #0
   d72b6:	f105 35ff 	add.w	r5, r5, #4294967295
   d72ba:	dd03      	ble.n	d72c4 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d72bc:	2d00      	cmp	r5, #0
   d72be:	d1f4      	bne.n	d72aa <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d72c0:	6166      	str	r6, [r4, #20]
   d72c2:	e003      	b.n	d72cc <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d72c4:	6127      	str	r7, [r4, #16]
  return false;
   d72c6:	2000      	movs	r0, #0
   d72c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d72cc:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d72ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d72d2 <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d72d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d72d4:	460f      	mov	r7, r1
   d72d6:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d72d8:	2100      	movs	r1, #0
   d72da:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d72dc:	4604      	mov	r4, r0
   d72de:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d72e0:	f004 fc14 	bl	dbb0c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d72e4:	68b8      	ldr	r0, [r7, #8]
   d72e6:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d72e8:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d72ec:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d72ee:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d72f2:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d72f4:	6a3b      	ldr	r3, [r7, #32]
   d72f6:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d72f8:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d72fa:	7acb      	ldrb	r3, [r1, #11]
   d72fc:	071d      	lsls	r5, r3, #28
   d72fe:	d44c      	bmi.n	d739a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d7300:	1883      	adds	r3, r0, r2
   d7302:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d7306:	f003 0317 	and.w	r3, r3, #23
   d730a:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d730c:	7ac9      	ldrb	r1, [r1, #11]
   d730e:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d7312:	bf04      	itt	eq
   d7314:	f043 0308 	orreq.w	r3, r3, #8
   d7318:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d731a:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d731e:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d7320:	f006 0303 	and.w	r3, r6, #3
   d7324:	2b01      	cmp	r3, #1
   d7326:	d009      	beq.n	d733c <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d7328:	2b02      	cmp	r3, #2
   d732a:	d005      	beq.n	d7338 <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d732c:	2b00      	cmp	r3, #0
   d732e:	d134      	bne.n	d739a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d7330:	0571      	lsls	r1, r6, #21
   d7332:	d432      	bmi.n	d739a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d7334:	2301      	movs	r3, #1
   d7336:	e002      	b.n	d733e <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d7338:	2303      	movs	r3, #3
   d733a:	e000      	b.n	d733e <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d733c:	2302      	movs	r3, #2
   d733e:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d7340:	78a1      	ldrb	r1, [r4, #2]
   d7342:	078b      	lsls	r3, r1, #30
   d7344:	d503      	bpl.n	d734e <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d7346:	7823      	ldrb	r3, [r4, #0]
   d7348:	f013 0f11 	tst.w	r3, #17
   d734c:	d125      	bne.n	d739a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d734e:	b24b      	sxtb	r3, r1
   d7350:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d7354:	f006 0108 	and.w	r1, r6, #8
   d7358:	bf14      	ite	ne
   d735a:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d735e:	2700      	moveq	r7, #0
   d7360:	4319      	orrs	r1, r3
   d7362:	4339      	orrs	r1, r7
   d7364:	70a1      	strb	r1, [r4, #2]
   d7366:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d7368:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d736a:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d736c:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d736e:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d7372:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d7376:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d737a:	d504      	bpl.n	d7386 <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d737c:	b181      	cbz	r1, d73a0 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d737e:	f000 fac8 	bl	d7912 <_ZN9FatVolume9freeChainEm>
   d7382:	b968      	cbnz	r0, d73a0 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d7384:	e009      	b.n	d739a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d7386:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d7388:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d738a:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d738c:	0473      	lsls	r3, r6, #17
   d738e:	d50c      	bpl.n	d73aa <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d7390:	69e1      	ldr	r1, [r4, #28]
   d7392:	4620      	mov	r0, r4
   d7394:	f7ff ff54 	bl	d7240 <_ZN7FatFile7seekSetEm>
   d7398:	b938      	cbnz	r0, d73aa <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d739a:	2000      	movs	r0, #0
   d739c:	7020      	strb	r0, [r4, #0]
  return false;
   d739e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d73a0:	78a3      	ldrb	r3, [r4, #2]
   d73a2:	f043 0304 	orr.w	r3, r3, #4
   d73a6:	70a3      	strb	r3, [r4, #2]
   d73a8:	e7f0      	b.n	d738c <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d73aa:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d73ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d73ae <_ZN7FatFile8openNextEPS_i>:
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   d73ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   d73b2:	7803      	ldrb	r3, [r0, #0]
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   d73b4:	4606      	mov	r6, r0
   d73b6:	460d      	mov	r5, r1
   d73b8:	4617      	mov	r7, r2
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   d73ba:	bb53      	cbnz	r3, d7412 <_ZN7FatFile8openNextEPS_i+0x64>
   d73bc:	780b      	ldrb	r3, [r1, #0]
   d73be:	f013 0f70 	tst.w	r3, #112	; 0x70
   d73c2:	d026      	beq.n	d7412 <_ZN7FatFile8openNextEPS_i+0x64>
   d73c4:	694c      	ldr	r4, [r1, #20]
   d73c6:	f014 041f 	ands.w	r4, r4, #31
   d73ca:	d122      	bne.n	d7412 <_ZN7FatFile8openNextEPS_i+0x64>
   d73cc:	46a0      	mov	r8, r4
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    dir_t* dir = dirFile->readDirCache();
   d73ce:	2100      	movs	r1, #0
   d73d0:	4628      	mov	r0, r5
   d73d2:	f8d5 9014 	ldr.w	r9, [r5, #20]
   d73d6:	f7ff ff16 	bl	d7206 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d73da:	b1d0      	cbz	r0, d7412 <_ZN7FatFile8openNextEPS_i+0x64>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
   d73dc:	7803      	ldrb	r3, [r0, #0]
   d73de:	b1c3      	cbz	r3, d7412 <_ZN7FatFile8openNextEPS_i+0x64>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   d73e0:	2b2e      	cmp	r3, #46	; 0x2e
   d73e2:	d101      	bne.n	d73e8 <_ZN7FatFile8openNextEPS_i+0x3a>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
        lfnOrd = ldir->ord & 0X1F;
        chksum = ldir->chksum;
      }
    } else {
      lfnOrd = 0;
   d73e4:	2400      	movs	r4, #0
   d73e6:	e7f2      	b.n	d73ce <_ZN7FatFile8openNextEPS_i+0x20>
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   d73e8:	2be5      	cmp	r3, #229	; 0xe5
   d73ea:	d0fb      	beq.n	d73e4 <_ZN7FatFile8openNextEPS_i+0x36>
   d73ec:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d73ee:	f011 0f08 	tst.w	r1, #8
   d73f2:	d105      	bne.n	d7400 <_ZN7FatFile8openNextEPS_i+0x52>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   d73f4:	b17c      	cbz	r4, d7416 <_ZN7FatFile8openNextEPS_i+0x68>
   d73f6:	f7ff fa07 	bl	d6808 <_ZN7FatFile11lfnChecksumEPh>
   d73fa:	4580      	cmp	r8, r0
   d73fc:	d109      	bne.n	d7412 <_ZN7FatFile8openNextEPS_i+0x64>
   d73fe:	e00a      	b.n	d7416 <_ZN7FatFile8openNextEPS_i+0x68>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d7400:	290f      	cmp	r1, #15
   d7402:	d1ef      	bne.n	d73e4 <_ZN7FatFile8openNextEPS_i+0x36>
      ldir = reinterpret_cast<ldir_t*>(dir);
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   d7404:	0659      	lsls	r1, r3, #25
   d7406:	d5e2      	bpl.n	d73ce <_ZN7FatFile8openNextEPS_i+0x20>
        lfnOrd = ldir->ord & 0X1F;
   d7408:	f003 041f 	and.w	r4, r3, #31
        chksum = ldir->chksum;
   d740c:	f890 800d 	ldrb.w	r8, [r0, #13]
   d7410:	e7dd      	b.n	d73ce <_ZN7FatFile8openNextEPS_i+0x20>
      lfnOrd = 0;
    }
  }

fail:
  return false;
   d7412:	2000      	movs	r0, #0
   d7414:	e007      	b.n	d7426 <_ZN7FatFile8openNextEPS_i+0x78>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   d7416:	9400      	str	r4, [sp, #0]
   d7418:	463b      	mov	r3, r7
   d741a:	f3c9 124f 	ubfx	r2, r9, #5, #16
   d741e:	4629      	mov	r1, r5
   d7420:	4630      	mov	r0, r6
   d7422:	f7ff ff56 	bl	d72d2 <_ZN7FatFile15openCachedEntryEPS_tih>
    }
  }

fail:
  return false;
}
   d7426:	b003      	add	sp, #12
   d7428:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d742c <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d742c:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d742e:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d7430:	4604      	mov	r4, r0
  if (!isOpen()) {
   d7432:	b90b      	cbnz	r3, d7438 <_ZN7FatFile4syncEv+0xc>
    return true;
   d7434:	2001      	movs	r0, #1
   d7436:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d7438:	7883      	ldrb	r3, [r0, #2]
   d743a:	075a      	lsls	r2, r3, #29
   d743c:	d523      	bpl.n	d7486 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d743e:	2101      	movs	r1, #1
   d7440:	f7ff fdca 	bl	d6fd8 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d7444:	4605      	mov	r5, r0
   d7446:	b928      	cbnz	r0, d7454 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d7448:	7863      	ldrb	r3, [r4, #1]
   d744a:	f043 0301 	orr.w	r3, r3, #1
   d744e:	7063      	strb	r3, [r4, #1]
  return false;
   d7450:	2000      	movs	r0, #0
   d7452:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d7454:	7803      	ldrb	r3, [r0, #0]
   d7456:	2be5      	cmp	r3, #229	; 0xe5
   d7458:	d0f6      	beq.n	d7448 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d745a:	7823      	ldrb	r3, [r4, #0]
   d745c:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d745e:	bf44      	itt	mi
   d7460:	69e3      	ldrmi	r3, [r4, #28]
   d7462:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d7464:	8c23      	ldrh	r3, [r4, #32]
   d7466:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d7468:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d746a:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d746c:	4b09      	ldr	r3, [pc, #36]	; (d7494 <_ZN7FatFile4syncEv+0x68>)
   d746e:	681b      	ldr	r3, [r3, #0]
   d7470:	b12b      	cbz	r3, d747e <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d7472:	f100 0116 	add.w	r1, r0, #22
   d7476:	3018      	adds	r0, #24
   d7478:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d747a:	8b2b      	ldrh	r3, [r5, #24]
   d747c:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d747e:	78a3      	ldrb	r3, [r4, #2]
   d7480:	f023 0304 	bic.w	r3, r3, #4
   d7484:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d7486:	68a0      	ldr	r0, [r4, #8]
   d7488:	f7ff f9b1 	bl	d67ee <_ZN9FatVolume9cacheSyncEv>
   d748c:	2800      	cmp	r0, #0
   d748e:	d0db      	beq.n	d7448 <_ZN7FatFile4syncEv+0x1c>
   d7490:	e7d0      	b.n	d7434 <_ZN7FatFile4syncEv+0x8>
   d7492:	bf00      	nop
   d7494:	2003df1c 	.word	0x2003df1c

000d7498 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d7498:	b510      	push	{r4, lr}
   d749a:	4604      	mov	r4, r0
  bool rtn = sync();
   d749c:	f7ff ffc6 	bl	d742c <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d74a0:	2300      	movs	r3, #0
   d74a2:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d74a4:	bd10      	pop	{r4, pc}

000d74a6 <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d74a6:	b5f0      	push	{r4, r5, r6, r7, lr}
   d74a8:	b093      	sub	sp, #76	; 0x4c
   d74aa:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d74ac:	2300      	movs	r3, #0
   d74ae:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d74b2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d74b6:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d74b8:	9201      	str	r2, [sp, #4]
   d74ba:	4606      	mov	r6, r0
   d74bc:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d74be:	b10b      	cbz	r3, d74c4 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d74c0:	2000      	movs	r0, #0
   d74c2:	e03d      	b.n	d7540 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d74c4:	780b      	ldrb	r3, [r1, #0]
   d74c6:	f013 0f70 	tst.w	r3, #112	; 0x70
   d74ca:	d0f9      	beq.n	d74c0 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d74cc:	7813      	ldrb	r3, [r2, #0]
   d74ce:	2b2f      	cmp	r3, #47	; 0x2f
   d74d0:	d112      	bne.n	d74f8 <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d74d2:	9b01      	ldr	r3, [sp, #4]
   d74d4:	781a      	ldrb	r2, [r3, #0]
   d74d6:	2a2f      	cmp	r2, #47	; 0x2f
   d74d8:	d102      	bne.n	d74e0 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d74da:	3301      	adds	r3, #1
   d74dc:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d74de:	e7f8      	b.n	d74d2 <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d74e0:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d74e2:	b91a      	cbnz	r2, d74ec <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d74e4:	4630      	mov	r0, r6
   d74e6:	f7ff fdb0 	bl	d704a <_ZN7FatFile8openRootEP9FatVolume>
   d74ea:	e029      	b.n	d7540 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d74ec:	a809      	add	r0, sp, #36	; 0x24
   d74ee:	f7ff fdac 	bl	d704a <_ZN7FatFile8openRootEP9FatVolume>
   d74f2:	2800      	cmp	r0, #0
   d74f4:	d0e4      	beq.n	d74c0 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d74f6:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d74f8:	aa01      	add	r2, sp, #4
   d74fa:	a903      	add	r1, sp, #12
   d74fc:	9801      	ldr	r0, [sp, #4]
   d74fe:	f7ff f9a9 	bl	d6854 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d7502:	2800      	cmp	r0, #0
   d7504:	d0dc      	beq.n	d74c0 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d7506:	9b01      	ldr	r3, [sp, #4]
   d7508:	781b      	ldrb	r3, [r3, #0]
   d750a:	b19b      	cbz	r3, d7534 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d750c:	2300      	movs	r3, #0
   d750e:	aa03      	add	r2, sp, #12
   d7510:	4621      	mov	r1, r4
   d7512:	4630      	mov	r0, r6
   d7514:	f7ff fb42 	bl	d6b9c <_ZN7FatFile4openEPS_P7fname_ti>
   d7518:	2800      	cmp	r0, #0
   d751a:	d0d1      	beq.n	d74c0 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d751c:	4635      	mov	r5, r6
   d751e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7520:	ac09      	add	r4, sp, #36	; 0x24
   d7522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7528:	682b      	ldr	r3, [r5, #0]
   d752a:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d752c:	4630      	mov	r0, r6
   d752e:	f7ff ffb3 	bl	d7498 <_ZN7FatFile5closeEv>
   d7532:	e7e0      	b.n	d74f6 <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d7534:	463b      	mov	r3, r7
   d7536:	aa03      	add	r2, sp, #12
   d7538:	4621      	mov	r1, r4
   d753a:	4630      	mov	r0, r6
   d753c:	f7ff fb2e 	bl	d6b9c <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d7540:	b013      	add	sp, #76	; 0x4c
   d7542:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7544 <_ZN7FatFile6removeEPS_PKc>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove(FatFile* dirFile, const char* path) {
   d7544:	b500      	push	{lr}
   d7546:	b08b      	sub	sp, #44	; 0x2c
   d7548:	2300      	movs	r3, #0
   d754a:	f88d 3004 	strb.w	r3, [sp, #4]
   d754e:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile file;
  if (!file.open(dirFile, path, O_WRONLY)) {
   d7552:	460a      	mov	r2, r1
   d7554:	2301      	movs	r3, #1
   d7556:	4601      	mov	r1, r0
   d7558:	a801      	add	r0, sp, #4
   d755a:	f7ff ffa4 	bl	d74a6 <_ZN7FatFile4openEPS_PKci>
   d755e:	b110      	cbz	r0, d7566 <_ZN7FatFile6removeEPS_PKc+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return file.remove();
   d7560:	a801      	add	r0, sp, #4
   d7562:	f7ff fa63 	bl	d6a2c <_ZN7FatFile6removeEv>

fail:
  return false;
}
   d7566:	b00b      	add	sp, #44	; 0x2c
   d7568:	f85d fb04 	ldr.w	pc, [sp], #4

000d756c <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d756c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d7570:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d7572:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d7574:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d7576:	4604      	mov	r4, r0
   d7578:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d757a:	d508      	bpl.n	d758e <_ZN7FatFile5writeEPKvj+0x22>
   d757c:	7883      	ldrb	r3, [r0, #2]
   d757e:	079a      	lsls	r2, r3, #30
   d7580:	d505      	bpl.n	d758e <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d7582:	071b      	lsls	r3, r3, #28
   d7584:	d50b      	bpl.n	d759e <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d7586:	69e1      	ldr	r1, [r4, #28]
   d7588:	f7ff fe5a 	bl	d7240 <_ZN7FatFile7seekSetEm>
   d758c:	b938      	cbnz	r0, d759e <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d758e:	7863      	ldrb	r3, [r4, #1]
   d7590:	f043 0301 	orr.w	r3, r3, #1
   d7594:	7063      	strb	r3, [r4, #1]
  return -1;
   d7596:	f04f 30ff 	mov.w	r0, #4294967295
   d759a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d759e:	6963      	ldr	r3, [r4, #20]
   d75a0:	43db      	mvns	r3, r3
   d75a2:	4598      	cmp	r8, r3
   d75a4:	d8f3      	bhi.n	d758e <_ZN7FatFile5writeEPKvj+0x22>
   d75a6:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d75a8:	f04f 0a00 	mov.w	sl, #0
   d75ac:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d75ae:	2e00      	cmp	r6, #0
   d75b0:	f000 8081 	beq.w	d76b6 <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d75b4:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d75b6:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d75b8:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d75bc:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d75c0:	d11c      	bne.n	d75fc <_ZN7FatFile5writeEPKvj+0x90>
   d75c2:	b9df      	cbnz	r7, d75fc <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d75c4:	6921      	ldr	r1, [r4, #16]
   d75c6:	b171      	cbz	r1, d75e6 <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d75c8:	f104 0210 	add.w	r2, r4, #16
   d75cc:	f000 f901 	bl	d77d2 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d75d0:	2800      	cmp	r0, #0
   d75d2:	dbdc      	blt.n	d758e <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d75d4:	f040 808e 	bne.w	d76f4 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d75d8:	4620      	mov	r0, r4
   d75da:	f7ff fcb2 	bl	d6f42 <_ZN7FatFile10addClusterEv>
   d75de:	2800      	cmp	r0, #0
   d75e0:	f040 8088 	bne.w	d76f4 <_ZN7FatFile5writeEPKvj+0x188>
   d75e4:	e7d3      	b.n	d758e <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d75e6:	6a23      	ldr	r3, [r4, #32]
   d75e8:	b93b      	cbnz	r3, d75fa <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d75ea:	4620      	mov	r0, r4
   d75ec:	f7ff fca9 	bl	d6f42 <_ZN7FatFile10addClusterEv>
   d75f0:	2800      	cmp	r0, #0
   d75f2:	d0cc      	beq.n	d758e <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d75f4:	6923      	ldr	r3, [r4, #16]
   d75f6:	6223      	str	r3, [r4, #32]
   d75f8:	e000      	b.n	d75fc <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d75fa:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d75fc:	6921      	ldr	r1, [r4, #16]
   d75fe:	68a0      	ldr	r0, [r4, #8]
   d7600:	f000 f8e1 	bl	d77c6 <_ZNK9FatVolume17clusterFirstBlockEm>
   d7604:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d7606:	b917      	cbnz	r7, d760e <_ZN7FatFile5writeEPKvj+0xa2>
   d7608:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d760c:	d221      	bcs.n	d7652 <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d760e:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d7612:	42b5      	cmp	r5, r6
   d7614:	bf28      	it	cs
   d7616:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d7618:	b937      	cbnz	r7, d7628 <_ZN7FatFile5writeEPKvj+0xbc>
   d761a:	6963      	ldr	r3, [r4, #20]
   d761c:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d761e:	4293      	cmp	r3, r2
   d7620:	bf34      	ite	cc
   d7622:	2201      	movcc	r2, #1
   d7624:	2205      	movcs	r2, #5
   d7626:	e000      	b.n	d762a <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d7628:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d762a:	68a0      	ldr	r0, [r4, #8]
   d762c:	3024      	adds	r0, #36	; 0x24
   d762e:	f000 f8a6 	bl	d777e <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d7632:	2800      	cmp	r0, #0
   d7634:	d0ab      	beq.n	d758e <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d7636:	4438      	add	r0, r7
   d7638:	462a      	mov	r2, r5
   d763a:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d763c:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d763e:	f004 fa5a 	bl	dbaf6 <memcpy>
      if (512 == (n + blockOffset)) {
   d7642:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d7646:	d130      	bne.n	d76aa <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d7648:	68a0      	ldr	r0, [r4, #8]
   d764a:	3024      	adds	r0, #36	; 0x24
   d764c:	f000 f870 	bl	d7730 <_ZN8FatCache4syncEv>
   d7650:	e017      	b.n	d7682 <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d7652:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d7656:	68a0      	ldr	r0, [r4, #8]
   d7658:	d315      	bcc.n	d7686 <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d765a:	7902      	ldrb	r2, [r0, #4]
   d765c:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d765e:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d7660:	b2d2      	uxtb	r2, r2
   d7662:	4293      	cmp	r3, r2
   d7664:	bf28      	it	cs
   d7666:	4613      	movcs	r3, r2
   d7668:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d766a:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d766c:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d7670:	d302      	bcc.n	d7678 <_ZN7FatFile5writeEPKvj+0x10c>
   d7672:	441a      	add	r2, r3
   d7674:	4291      	cmp	r1, r2
   d7676:	d337      	bcc.n	d76e8 <_ZN7FatFile5writeEPKvj+0x17c>
   d7678:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d767a:	464a      	mov	r2, r9
   d767c:	6838      	ldr	r0, [r7, #0]
   d767e:	f000 fc6d 	bl	d7f5c <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d7682:	b990      	cbnz	r0, d76aa <_ZN7FatFile5writeEPKvj+0x13e>
   d7684:	e783      	b.n	d758e <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d7686:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d7688:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d768a:	bf02      	ittt	eq
   d768c:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d7690:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d7694:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d7696:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d7698:	464a      	mov	r2, r9
   d769a:	6818      	ldr	r0, [r3, #0]
   d769c:	f000 fbec 	bl	d7e78 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d76a0:	2800      	cmp	r0, #0
   d76a2:	f43f af74 	beq.w	d758e <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d76a6:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d76aa:	6963      	ldr	r3, [r4, #20]
   d76ac:	442b      	add	r3, r5
   d76ae:	6163      	str	r3, [r4, #20]
    src += n;
   d76b0:	44a9      	add	r9, r5
    nToWrite -= n;
   d76b2:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d76b4:	e77a      	b.n	d75ac <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d76b6:	69e2      	ldr	r2, [r4, #28]
   d76b8:	4293      	cmp	r3, r2
   d76ba:	d901      	bls.n	d76c0 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d76bc:	61e3      	str	r3, [r4, #28]
   d76be:	e002      	b.n	d76c6 <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d76c0:	4b0f      	ldr	r3, [pc, #60]	; (d7700 <_ZN7FatFile5writeEPKvj+0x194>)
   d76c2:	681b      	ldr	r3, [r3, #0]
   d76c4:	b11b      	cbz	r3, d76ce <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d76c6:	78a3      	ldrb	r3, [r4, #2]
   d76c8:	f043 0304 	orr.w	r3, r3, #4
   d76cc:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d76ce:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d76d2:	2b00      	cmp	r3, #0
   d76d4:	db02      	blt.n	d76dc <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d76d6:	4640      	mov	r0, r8
   d76d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d76dc:	4620      	mov	r0, r4
   d76de:	f7ff fea5 	bl	d742c <_ZN7FatFile4syncEv>
   d76e2:	2800      	cmp	r0, #0
   d76e4:	d1f7      	bne.n	d76d6 <_ZN7FatFile5writeEPKvj+0x16a>
   d76e6:	e752      	b.n	d758e <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d76e8:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d76ec:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d76f0:	62c2      	str	r2, [r0, #44]	; 0x2c
   d76f2:	e7c1      	b.n	d7678 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d76f4:	6921      	ldr	r1, [r4, #16]
   d76f6:	68a0      	ldr	r0, [r4, #8]
   d76f8:	f000 f865 	bl	d77c6 <_ZNK9FatVolume17clusterFirstBlockEm>
   d76fc:	4601      	mov	r1, r0
   d76fe:	e783      	b.n	d7608 <_ZN7FatFile5writeEPKvj+0x9c>
   d7700:	2003df1c 	.word	0x2003df1c

000d7704 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d7704:	f000 bff4 	b.w	d86f0 <HAL_Pin_Map>

000d7708 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d7708:	b570      	push	{r4, r5, r6, lr}
   d770a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d770c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d770e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d7710:	b149      	cbz	r1, d7726 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d7712:	f004 ff5f 	bl	dc5d4 <strlen>
   d7716:	682b      	ldr	r3, [r5, #0]
   d7718:	4602      	mov	r2, r0
   d771a:	4621      	mov	r1, r4
   d771c:	4628      	mov	r0, r5
   d771e:	68db      	ldr	r3, [r3, #12]
    }
   d7720:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7724:	4718      	bx	r3
    }
   d7726:	bd70      	pop	{r4, r5, r6, pc}

000d7728 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d7728:	f000 bfe2 	b.w	d86f0 <HAL_Pin_Map>

000d772c <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d772c:	f000 bfe0 	b.w	d86f0 <HAL_Pin_Map>

000d7730 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d7730:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d7732:	7803      	ldrb	r3, [r0, #0]
   d7734:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d7736:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d7738:	d51e      	bpl.n	d7778 <_ZN8FatCache4syncEv+0x48>
   d773a:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d773c:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d773e:	f100 060c 	add.w	r6, r0, #12
   d7742:	4632      	mov	r2, r6
   d7744:	6818      	ldr	r0, [r3, #0]
   d7746:	f000 fb97 	bl	d7e78 <_ZN9SdSpiCard10writeBlockEmPKh>
   d774a:	4605      	mov	r5, r0
   d774c:	b908      	cbnz	r0, d7752 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d774e:	2500      	movs	r5, #0
   d7750:	e013      	b.n	d777a <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d7752:	7823      	ldrb	r3, [r4, #0]
   d7754:	079b      	lsls	r3, r3, #30
   d7756:	d404      	bmi.n	d7762 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d7758:	7823      	ldrb	r3, [r4, #0]
   d775a:	f023 0301 	bic.w	r3, r3, #1
   d775e:	7023      	strb	r3, [r4, #0]
   d7760:	e00b      	b.n	d777a <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d7762:	6863      	ldr	r3, [r4, #4]
   d7764:	68a0      	ldr	r0, [r4, #8]
   d7766:	6919      	ldr	r1, [r3, #16]
   d7768:	4632      	mov	r2, r6
   d776a:	4401      	add	r1, r0
   d776c:	6818      	ldr	r0, [r3, #0]
   d776e:	f000 fb83 	bl	d7e78 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d7772:	2800      	cmp	r0, #0
   d7774:	d1f0      	bne.n	d7758 <_ZN8FatCache4syncEv+0x28>
   d7776:	e7ea      	b.n	d774e <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d7778:	2501      	movs	r5, #1

fail:
  return false;
}
   d777a:	4628      	mov	r0, r5
   d777c:	bd70      	pop	{r4, r5, r6, pc}

000d777e <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d777e:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d7780:	6883      	ldr	r3, [r0, #8]
   d7782:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d7784:	4604      	mov	r4, r0
   d7786:	460e      	mov	r6, r1
   d7788:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d778a:	d014      	beq.n	d77b6 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d778c:	f7ff ffd0 	bl	d7730 <_ZN8FatCache4syncEv>
   d7790:	b908      	cbnz	r0, d7796 <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d7792:	2000      	movs	r0, #0
   d7794:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d7796:	076b      	lsls	r3, r5, #29
   d7798:	d503      	bpl.n	d77a2 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d779a:	2300      	movs	r3, #0
   d779c:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d779e:	60a6      	str	r6, [r4, #8]
   d77a0:	e009      	b.n	d77b6 <_ZN8FatCache4readEmh+0x38>
   d77a2:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d77a4:	f104 020c 	add.w	r2, r4, #12
   d77a8:	4631      	mov	r1, r6
   d77aa:	6818      	ldr	r0, [r3, #0]
   d77ac:	f000 fada 	bl	d7d64 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d77b0:	2800      	cmp	r0, #0
   d77b2:	d1f2      	bne.n	d779a <_ZN8FatCache4readEmh+0x1c>
   d77b4:	e7ed      	b.n	d7792 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d77b6:	7823      	ldrb	r3, [r4, #0]
   d77b8:	4620      	mov	r0, r4
   d77ba:	f005 0503 	and.w	r5, r5, #3
   d77be:	431d      	orrs	r5, r3
   d77c0:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d77c4:	bd70      	pop	{r4, r5, r6, pc}

000d77c6 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d77c6:	7983      	ldrb	r3, [r0, #6]
   d77c8:	6940      	ldr	r0, [r0, #20]
   d77ca:	3902      	subs	r1, #2
   d77cc:	4099      	lsls	r1, r3
}
   d77ce:	4408      	add	r0, r1
   d77d0:	4770      	bx	lr

000d77d2 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d77d2:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d77d4:	b570      	push	{r4, r5, r6, lr}
   d77d6:	4605      	mov	r5, r0
   d77d8:	460c      	mov	r4, r1
   d77da:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d77dc:	d802      	bhi.n	d77e4 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d77de:	f04f 30ff 	mov.w	r0, #4294967295
   d77e2:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d77e4:	69c3      	ldr	r3, [r0, #28]
   d77e6:	4299      	cmp	r1, r3
   d77e8:	d8f9      	bhi.n	d77de <_ZN9FatVolume6fatGetEmPm+0xc>
   d77ea:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d77ec:	2b20      	cmp	r3, #32
   d77ee:	d110      	bne.n	d7812 <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d77f0:	6981      	ldr	r1, [r0, #24]
   d77f2:	2202      	movs	r2, #2
   d77f4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d77f8:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d77fc:	f7ff ffbf 	bl	d777e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d7800:	2800      	cmp	r0, #0
   d7802:	d0ec      	beq.n	d77de <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d7804:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d7808:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d780c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d7810:	e00f      	b.n	d7832 <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d7812:	2b10      	cmp	r3, #16
   d7814:	d1e3      	bne.n	d77de <_ZN9FatVolume6fatGetEmPm+0xc>
   d7816:	6983      	ldr	r3, [r0, #24]
   d7818:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d781c:	2202      	movs	r2, #2
   d781e:	4419      	add	r1, r3
   d7820:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d7824:	f7ff ffab 	bl	d777e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d7828:	2800      	cmp	r0, #0
   d782a:	d0d8      	beq.n	d77de <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d782c:	b2e4      	uxtb	r4, r4
   d782e:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d7832:	69ea      	ldr	r2, [r5, #28]
   d7834:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d7836:	bf9a      	itte	ls
   d7838:	6033      	strls	r3, [r6, #0]
  return 1;
   d783a:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d783c:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d783e:	bd70      	pop	{r4, r5, r6, pc}

000d7840 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d7840:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d7842:	b538      	push	{r3, r4, r5, lr}
   d7844:	460c      	mov	r4, r1
   d7846:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d7848:	d801      	bhi.n	d784e <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d784a:	2000      	movs	r0, #0
   d784c:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d784e:	69c3      	ldr	r3, [r0, #28]
   d7850:	4299      	cmp	r1, r3
   d7852:	d8fa      	bhi.n	d784a <_ZN9FatVolume6fatPutEmm+0xa>
   d7854:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d7856:	2b20      	cmp	r3, #32
   d7858:	d10e      	bne.n	d7878 <_ZN9FatVolume6fatPutEmm+0x38>
   d785a:	6981      	ldr	r1, [r0, #24]
   d785c:	2203      	movs	r2, #3
   d785e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d7862:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d7866:	f7ff ff8a 	bl	d777e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d786a:	2800      	cmp	r0, #0
   d786c:	d0ed      	beq.n	d784a <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d786e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d7872:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d7876:	e00f      	b.n	d7898 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d7878:	2b10      	cmp	r3, #16
   d787a:	d1e6      	bne.n	d784a <_ZN9FatVolume6fatPutEmm+0xa>
   d787c:	6983      	ldr	r3, [r0, #24]
   d787e:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d7882:	2203      	movs	r2, #3
   d7884:	4419      	add	r1, r3
   d7886:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d788a:	f7ff ff78 	bl	d777e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d788e:	2800      	cmp	r0, #0
   d7890:	d0db      	beq.n	d784a <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d7892:	b2e4      	uxtb	r4, r4
   d7894:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d7898:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d789a:	bd38      	pop	{r3, r4, r5, pc}

000d789c <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d789c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d78a0:	68c4      	ldr	r4, [r0, #12]
   d78a2:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d78a4:	4605      	mov	r5, r0
   d78a6:	460e      	mov	r6, r1
   d78a8:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d78aa:	d207      	bcs.n	d78bc <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d78ac:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d78ae:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d78b0:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d78b2:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d78b4:	429c      	cmp	r4, r3
   d78b6:	d903      	bls.n	d78c0 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d78b8:	b9cf      	cbnz	r7, d78ee <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d78ba:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d78bc:	2701      	movs	r7, #1
   d78be:	e7f7      	b.n	d78b0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d78c0:	42a6      	cmp	r6, r4
   d78c2:	d014      	beq.n	d78ee <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d78c4:	aa01      	add	r2, sp, #4
   d78c6:	4621      	mov	r1, r4
   d78c8:	4628      	mov	r0, r5
   d78ca:	f7ff ff82 	bl	d77d2 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d78ce:	2800      	cmp	r0, #0
   d78d0:	db0d      	blt.n	d78ee <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d78d2:	d0ed      	beq.n	d78b0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d78d4:	9b01      	ldr	r3, [sp, #4]
   d78d6:	2b00      	cmp	r3, #0
   d78d8:	d1ea      	bne.n	d78b0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d78da:	b107      	cbz	r7, d78de <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d78dc:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d78de:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d78e2:	4621      	mov	r1, r4
   d78e4:	4628      	mov	r0, r5
   d78e6:	f7ff ffab 	bl	d7840 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d78ea:	4607      	mov	r7, r0
   d78ec:	b908      	cbnz	r0, d78f2 <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d78ee:	2700      	movs	r7, #0
   d78f0:	e00b      	b.n	d790a <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d78f2:	b916      	cbnz	r6, d78fa <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d78f4:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d78f8:	e007      	b.n	d790a <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d78fa:	4622      	mov	r2, r4
   d78fc:	4631      	mov	r1, r6
   d78fe:	4628      	mov	r0, r5
   d7900:	f7ff ff9e 	bl	d7840 <_ZN9FatVolume6fatPutEmm>
   d7904:	2800      	cmp	r0, #0
   d7906:	d1f5      	bne.n	d78f4 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d7908:	e7f1      	b.n	d78ee <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d790a:	4638      	mov	r0, r7
   d790c:	b002      	add	sp, #8
   d790e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7912 <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d7912:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7914:	4605      	mov	r5, r0
   d7916:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d7918:	aa01      	add	r2, sp, #4
   d791a:	4621      	mov	r1, r4
   d791c:	4628      	mov	r0, r5
   d791e:	f7ff ff58 	bl	d77d2 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d7922:	1e06      	subs	r6, r0, #0
   d7924:	da01      	bge.n	d792a <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d7926:	2000      	movs	r0, #0
   d7928:	e00f      	b.n	d794a <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d792a:	2200      	movs	r2, #0
   d792c:	4621      	mov	r1, r4
   d792e:	4628      	mov	r0, r5
   d7930:	f7ff ff86 	bl	d7840 <_ZN9FatVolume6fatPutEmm>
   d7934:	2800      	cmp	r0, #0
   d7936:	d0f6      	beq.n	d7926 <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d7938:	68eb      	ldr	r3, [r5, #12]
   d793a:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d793c:	bf9c      	itt	ls
   d793e:	f104 34ff 	addls.w	r4, r4, #4294967295
   d7942:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d7944:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d7946:	2e00      	cmp	r6, #0
   d7948:	d1e6      	bne.n	d7918 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d794a:	b002      	add	sp, #8
   d794c:	bd70      	pop	{r4, r5, r6, pc}

000d794e <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d794e:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d7950:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d7952:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d7954:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d7956:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d7958:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d795c:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d795e:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d7960:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d7962:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d7966:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d7968:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d796c:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d7970:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d7974:	b1a1      	cbz	r1, d79a0 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d7976:	2904      	cmp	r1, #4
   d7978:	d85d      	bhi.n	d7a36 <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d797a:	4611      	mov	r1, r2
   d797c:	3024      	adds	r0, #36	; 0x24
   d797e:	f7ff fefe 	bl	d777e <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d7982:	2800      	cmp	r0, #0
   d7984:	d057      	beq.n	d7a36 <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d7986:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d798a:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d798e:	065b      	lsls	r3, r3, #25
   d7990:	d151      	bne.n	d7a36 <_ZN9FatVolume4initEh+0xe8>
   d7992:	351b      	adds	r5, #27
   d7994:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d7998:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d799c:	2d00      	cmp	r5, #0
   d799e:	d04a      	beq.n	d7a36 <_ZN9FatVolume4initEh+0xe8>
   d79a0:	2200      	movs	r2, #0
   d79a2:	4629      	mov	r1, r5
   d79a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d79a8:	f7ff fee9 	bl	d777e <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d79ac:	2800      	cmp	r0, #0
   d79ae:	d042      	beq.n	d7a36 <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d79b0:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d79b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d79b8:	d13d      	bne.n	d7a36 <_ZN9FatVolume4initEh+0xe8>
   d79ba:	7c03      	ldrb	r3, [r0, #16]
   d79bc:	2b02      	cmp	r3, #2
   d79be:	d13a      	bne.n	d7a36 <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d79c0:	89c3      	ldrh	r3, [r0, #14]
   d79c2:	2b00      	cmp	r3, #0
   d79c4:	d037      	beq.n	d7a36 <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d79c6:	7b41      	ldrb	r1, [r0, #13]
   d79c8:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d79ca:	1e4b      	subs	r3, r1, #1
   d79cc:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d79ce:	2300      	movs	r3, #0
   d79d0:	71a3      	strb	r3, [r4, #6]
   d79d2:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d79d4:	2301      	movs	r3, #1
   d79d6:	428b      	cmp	r3, r1
   d79d8:	d007      	beq.n	d79ea <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d79da:	3e01      	subs	r6, #1
   d79dc:	d02b      	beq.n	d7a36 <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d79de:	79a2      	ldrb	r2, [r4, #6]
   d79e0:	005b      	lsls	r3, r3, #1
   d79e2:	3201      	adds	r2, #1
   d79e4:	b2db      	uxtb	r3, r3
   d79e6:	71a2      	strb	r2, [r4, #6]
   d79e8:	e7f5      	b.n	d79d6 <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d79ea:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d79ec:	b902      	cbnz	r2, d79f0 <_ZN9FatVolume4initEh+0xa2>
   d79ee:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d79f0:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d79f2:	89c6      	ldrh	r6, [r0, #14]
   d79f4:	442e      	add	r6, r5
   d79f6:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d79f8:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d79fc:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d79fe:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d7a02:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d7a04:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d7a08:	0152      	lsls	r2, r2, #5
   d7a0a:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d7a0e:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d7a12:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d7a14:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d7a18:	b903      	cbnz	r3, d7a1c <_ZN9FatVolume4initEh+0xce>
   d7a1a:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d7a1c:	1aad      	subs	r5, r5, r2
   d7a1e:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d7a20:	79a5      	ldrb	r5, [r4, #6]
   d7a22:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d7a26:	1c6b      	adds	r3, r5, #1
   d7a28:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d7a2a:	f640 73f4 	movw	r3, #4084	; 0xff4
   d7a2e:	429d      	cmp	r5, r3
   d7a30:	d803      	bhi.n	d7a3a <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d7a32:	230c      	movs	r3, #12
   d7a34:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d7a36:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d7a38:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d7a3a:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d7a3e:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d7a40:	bf85      	ittet	hi
   d7a42:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d7a44:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d7a46:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d7a48:	2320      	movhi	r3, #32
   d7a4a:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d7a4c:	2001      	movs	r0, #1

fail:
  return false;
}
   d7a4e:	bd70      	pop	{r4, r5, r6, pc}

000d7a50 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d7a50:	f000 be4e 	b.w	d86f0 <HAL_Pin_Map>

000d7a54 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d7a54:	f000 be4c 	b.w	d86f0 <HAL_Pin_Map>

000d7a58 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d7a58:	f000 be4a 	b.w	d86f0 <HAL_Pin_Map>

000d7a5c <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d7a5c:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d7a5e:	4c0e      	ldr	r4, [pc, #56]	; (d7a98 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d7a60:	460e      	mov	r6, r1
   d7a62:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d7a64:	f000 ff04 	bl	d8870 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d7a68:	6823      	ldr	r3, [r4, #0]
   d7a6a:	1ac0      	subs	r0, r0, r3
   d7a6c:	4b0b      	ldr	r3, [pc, #44]	; (d7a9c <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d7a6e:	4298      	cmp	r0, r3
   d7a70:	d908      	bls.n	d7a84 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7a72:	f000 ff05 	bl	d8880 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7a76:	4b0a      	ldr	r3, [pc, #40]	; (d7aa0 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d7a78:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d7a7a:	f001 f945 	bl	d8d08 <spark_process>
   d7a7e:	f000 fef7 	bl	d8870 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d7a82:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d7a84:	f000 fefc 	bl	d8880 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d7a88:	b280      	uxth	r0, r0
   d7a8a:	1b80      	subs	r0, r0, r6
}
   d7a8c:	42a8      	cmp	r0, r5
   d7a8e:	bfd4      	ite	le
   d7a90:	2000      	movle	r0, #0
   d7a92:	2001      	movgt	r0, #1
   d7a94:	bd70      	pop	{r4, r5, r6, pc}
   d7a96:	bf00      	nop
   d7a98:	2003df20 	.word	0x2003df20
   d7a9c:	000186a0 	.word	0x000186a0
   d7aa0:	2003e3c4 	.word	0x2003e3c4

000d7aa4 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d7aa4:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d7aa6:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d7aa8:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d7aaa:	b94d      	cbnz	r5, d7ac0 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d7aac:	6840      	ldr	r0, [r0, #4]
   d7aae:	f000 fa7d 	bl	d7fac <_ZN14SdSpiAltDriver8activateEv>
   d7ab2:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d7ab4:	4629      	mov	r1, r5
   d7ab6:	7d18      	ldrb	r0, [r3, #20]
   d7ab8:	f002 ffa1 	bl	da9fe <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d7abc:	2301      	movs	r3, #1
   d7abe:	7223      	strb	r3, [r4, #8]
   d7ac0:	bd38      	pop	{r3, r4, r5, pc}

000d7ac2 <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d7ac2:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d7ac4:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d7ac6:	4604      	mov	r4, r0
  if (m_spiActive) {
   d7ac8:	b16b      	cbz	r3, d7ae6 <_ZN9SdSpiCard7spiStopEv+0x24>
   d7aca:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d7acc:	2101      	movs	r1, #1
   d7ace:	7d18      	ldrb	r0, [r3, #20]
   d7ad0:	f002 ff95 	bl	da9fe <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7ad4:	21ff      	movs	r1, #255	; 0xff
   d7ad6:	6860      	ldr	r0, [r4, #4]
   d7ad8:	f000 fa9a 	bl	d8010 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d7adc:	6860      	ldr	r0, [r4, #4]
   d7ade:	f000 fa79 	bl	d7fd4 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d7ae2:	2300      	movs	r3, #0
   d7ae4:	7223      	strb	r3, [r4, #8]
   d7ae6:	bd10      	pop	{r4, pc}

000d7ae8 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d7ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7aea:	4604      	mov	r4, r0
   d7aec:	460d      	mov	r5, r1
   d7aee:	4616      	mov	r6, r2
   d7af0:	f000 fec6 	bl	d8880 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d7af4:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7af6:	6860      	ldr	r0, [r4, #4]
   d7af8:	f000 fa6f 	bl	d7fda <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d7afc:	28ff      	cmp	r0, #255	; 0xff
   d7afe:	7260      	strb	r0, [r4, #9]
   d7b00:	d109      	bne.n	d7b16 <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d7b02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7b06:	4639      	mov	r1, r7
   d7b08:	4620      	mov	r0, r4
   d7b0a:	f7ff ffa7 	bl	d7a5c <_ZN9SdSpiCard10isTimedOutEtt>
   d7b0e:	2800      	cmp	r0, #0
   d7b10:	d0f1      	beq.n	d7af6 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7b12:	2355      	movs	r3, #85	; 0x55
   d7b14:	e00b      	b.n	d7b2e <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d7b16:	28fe      	cmp	r0, #254	; 0xfe
   d7b18:	d001      	beq.n	d7b1e <_ZN9SdSpiCard8readDataEPhj+0x36>
   d7b1a:	2350      	movs	r3, #80	; 0x50
   d7b1c:	e007      	b.n	d7b2e <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d7b1e:	4632      	mov	r2, r6
   d7b20:	4629      	mov	r1, r5
   d7b22:	6860      	ldr	r0, [r4, #4]
   d7b24:	f000 fa5e 	bl	d7fe4 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d7b28:	7260      	strb	r0, [r4, #9]
   d7b2a:	b130      	cbz	r0, d7b3a <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7b2c:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d7b2e:	4620      	mov	r0, r4
   d7b30:	7023      	strb	r3, [r4, #0]
   d7b32:	f7ff ffc6 	bl	d7ac2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7b36:	2000      	movs	r0, #0
}
   d7b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7b3a:	6860      	ldr	r0, [r4, #4]
   d7b3c:	f000 fa4d 	bl	d7fda <_ZN14SdSpiAltDriver7receiveEv>
   d7b40:	6860      	ldr	r0, [r4, #4]
   d7b42:	f000 fa4a 	bl	d7fda <_ZN14SdSpiAltDriver7receiveEv>
   d7b46:	2001      	movs	r0, #1
   d7b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7b4a <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d7b4a:	b570      	push	{r4, r5, r6, lr}
   d7b4c:	4604      	mov	r4, r0
   d7b4e:	460e      	mov	r6, r1
   d7b50:	f000 fe96 	bl	d8880 <HAL_Timer_Get_Milli_Seconds>
   d7b54:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d7b56:	4632      	mov	r2, r6
   d7b58:	4629      	mov	r1, r5
   d7b5a:	4620      	mov	r0, r4
   d7b5c:	f7ff ff7e 	bl	d7a5c <_ZN9SdSpiCard10isTimedOutEtt>
   d7b60:	b930      	cbnz	r0, d7b70 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d7b62:	6860      	ldr	r0, [r4, #4]
   d7b64:	f000 fa39 	bl	d7fda <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d7b68:	28ff      	cmp	r0, #255	; 0xff
   d7b6a:	d1f4      	bne.n	d7b56 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d7b6c:	2001      	movs	r0, #1
   d7b6e:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d7b70:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d7b72:	bd70      	pop	{r4, r5, r6, pc}

000d7b74 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d7b74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d7b76:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d7b78:	9201      	str	r2, [sp, #4]
   d7b7a:	4604      	mov	r4, r0
   d7b7c:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d7b7e:	b90b      	cbnz	r3, d7b84 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d7b80:	f7ff ff90 	bl	d7aa4 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d7b84:	b125      	cbz	r5, d7b90 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d7b86:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d7b8a:	4620      	mov	r0, r4
   d7b8c:	f7ff ffdd 	bl	d7b4a <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7b90:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d7b94:	6860      	ldr	r0, [r4, #4]
   d7b96:	f000 fa3b 	bl	d8010 <_ZN14SdSpiAltDriver4sendEh>
   d7b9a:	f10d 0607 	add.w	r6, sp, #7
   d7b9e:	f10d 0703 	add.w	r7, sp, #3
   d7ba2:	f816 1901 	ldrb.w	r1, [r6], #-1
   d7ba6:	6860      	ldr	r0, [r4, #4]
   d7ba8:	f000 fa32 	bl	d8010 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d7bac:	42be      	cmp	r6, r7
   d7bae:	d1f8      	bne.n	d7ba2 <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d7bb0:	2d00      	cmp	r5, #0
   d7bb2:	bf0c      	ite	eq
   d7bb4:	2195      	moveq	r1, #149	; 0x95
   d7bb6:	2187      	movne	r1, #135	; 0x87
   d7bb8:	6860      	ldr	r0, [r4, #4]
   d7bba:	f000 fa29 	bl	d8010 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7bbe:	6860      	ldr	r0, [r4, #4]
   d7bc0:	f000 fa0b 	bl	d7fda <_ZN14SdSpiAltDriver7receiveEv>
   d7bc4:	250b      	movs	r5, #11
   d7bc6:	6860      	ldr	r0, [r4, #4]
   d7bc8:	f000 fa07 	bl	d7fda <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d7bcc:	0603      	lsls	r3, r0, #24
   d7bce:	7260      	strb	r0, [r4, #9]
   d7bd0:	d503      	bpl.n	d7bda <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d7bd2:	3d01      	subs	r5, #1
   d7bd4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d7bd8:	d1f5      	bne.n	d7bc6 <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d7bda:	b003      	add	sp, #12
   d7bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7bde <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d7bde:	b570      	push	{r4, r5, r6, lr}
   d7be0:	4604      	mov	r4, r0
   d7be2:	460d      	mov	r5, r1
   d7be4:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d7be6:	2137      	movs	r1, #55	; 0x37
   d7be8:	2200      	movs	r2, #0
   d7bea:	f7ff ffc3 	bl	d7b74 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d7bee:	4632      	mov	r2, r6
   d7bf0:	4629      	mov	r1, r5
   d7bf2:	4620      	mov	r0, r4
  }
   d7bf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d7bf8:	f7ff bfbc 	b.w	d7b74 <_ZN9SdSpiCard11cardCommandEhm>

000d7bfc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d7bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d7c00:	2500      	movs	r5, #0
   d7c02:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d7c04:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d7c06:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d7c08:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d7c0a:	4604      	mov	r4, r0
   d7c0c:	4690      	mov	r8, r2
   d7c0e:	461e      	mov	r6, r3
   d7c10:	f000 fe36 	bl	d8880 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d7c14:	4641      	mov	r1, r8
   d7c16:	4607      	mov	r7, r0
   d7c18:	6860      	ldr	r0, [r4, #4]
   d7c1a:	f000 f9cb 	bl	d7fb4 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d7c1e:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d7c20:	4a4f      	ldr	r2, [pc, #316]	; (d7d60 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d7c22:	721d      	strb	r5, [r3, #8]
   d7c24:	f04f 0801 	mov.w	r8, #1
   d7c28:	60da      	str	r2, [r3, #12]
   d7c2a:	745d      	strb	r5, [r3, #17]
   d7c2c:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d7c30:	4620      	mov	r0, r4
   d7c32:	f7ff ff37 	bl	d7aa4 <_ZN9SdSpiCard8spiStartEv>
   d7c36:	6863      	ldr	r3, [r4, #4]
   d7c38:	4641      	mov	r1, r8
   d7c3a:	7d18      	ldrb	r0, [r3, #20]
   d7c3c:	f002 fedf 	bl	da9fe <digitalWrite>
   d7c40:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7c42:	21ff      	movs	r1, #255	; 0xff
   d7c44:	6860      	ldr	r0, [r4, #4]
   d7c46:	3d01      	subs	r5, #1
   d7c48:	f000 f9e2 	bl	d8010 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d7c4c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d7c50:	d1f7      	bne.n	d7c42 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d7c52:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d7c54:	4629      	mov	r1, r5
   d7c56:	7d18      	ldrb	r0, [r3, #20]
   d7c58:	f002 fed1 	bl	da9fe <digitalWrite>
   d7c5c:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d7c5e:	2200      	movs	r2, #0
   d7c60:	4611      	mov	r1, r2
   d7c62:	4620      	mov	r0, r4
   d7c64:	f7ff ff86 	bl	d7b74 <_ZN9SdSpiCard11cardCommandEhm>
   d7c68:	2801      	cmp	r0, #1
   d7c6a:	4680      	mov	r8, r0
   d7c6c:	d012      	beq.n	d7c94 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d7c6e:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d7c70:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d7c74:	d101      	bne.n	d7c7a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7c76:	2320      	movs	r3, #32
   d7c78:	e057      	b.n	d7d2a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7c7a:	21fd      	movs	r1, #253	; 0xfd
   d7c7c:	6860      	ldr	r0, [r4, #4]
   d7c7e:	f000 f9c7 	bl	d8010 <_ZN14SdSpiAltDriver4sendEh>
   d7c82:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7c86:	6860      	ldr	r0, [r4, #4]
   d7c88:	f000 f9a7 	bl	d7fda <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d7c8c:	f1b8 0801 	subs.w	r8, r8, #1
   d7c90:	d1f9      	bne.n	d7c86 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d7c92:	e7e4      	b.n	d7c5e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d7c94:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d7c98:	2108      	movs	r1, #8
   d7c9a:	4620      	mov	r0, r4
   d7c9c:	f7ff ff6a 	bl	d7b74 <_ZN9SdSpiCard11cardCommandEhm>
   d7ca0:	2805      	cmp	r0, #5
   d7ca2:	d102      	bne.n	d7caa <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d7ca4:	f884 800a 	strb.w	r8, [r4, #10]
   d7ca8:	e00f      	b.n	d7cca <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d7caa:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7cac:	6860      	ldr	r0, [r4, #4]
   d7cae:	f000 f994 	bl	d7fda <_ZN14SdSpiAltDriver7receiveEv>
   d7cb2:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d7cb4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d7cb8:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d7cba:	d1f7      	bne.n	d7cac <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d7cbc:	28aa      	cmp	r0, #170	; 0xaa
   d7cbe:	d102      	bne.n	d7cc6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d7cc0:	2302      	movs	r3, #2
   d7cc2:	72a3      	strb	r3, [r4, #10]
   d7cc4:	e001      	b.n	d7cca <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7cc6:	2325      	movs	r3, #37	; 0x25
   d7cc8:	e02f      	b.n	d7d2a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d7cca:	7aa3      	ldrb	r3, [r4, #10]
   d7ccc:	2b02      	cmp	r3, #2
   d7cce:	bf0c      	ite	eq
   d7cd0:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d7cd4:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d7cd6:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d7cd8:	462a      	mov	r2, r5
   d7cda:	2129      	movs	r1, #41	; 0x29
   d7cdc:	4620      	mov	r0, r4
   d7cde:	f7ff ff7e 	bl	d7bde <_ZN9SdSpiCard8cardAcmdEhm>
   d7ce2:	4602      	mov	r2, r0
   d7ce4:	b148      	cbz	r0, d7cfa <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d7ce6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d7cea:	4639      	mov	r1, r7
   d7cec:	4620      	mov	r0, r4
   d7cee:	f7ff feb5 	bl	d7a5c <_ZN9SdSpiCard10isTimedOutEtt>
   d7cf2:	2800      	cmp	r0, #0
   d7cf4:	d0f0      	beq.n	d7cd8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d7cf6:	2343      	movs	r3, #67	; 0x43
   d7cf8:	e017      	b.n	d7d2a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d7cfa:	7aa3      	ldrb	r3, [r4, #10]
   d7cfc:	2b02      	cmp	r3, #2
   d7cfe:	d00e      	beq.n	d7d1e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d7d00:	4620      	mov	r0, r4
   d7d02:	f7ff fede 	bl	d7ac2 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d7d06:	6863      	ldr	r3, [r4, #4]
   d7d08:	68b0      	ldr	r0, [r6, #8]
   d7d0a:	7934      	ldrb	r4, [r6, #4]
   d7d0c:	7b31      	ldrb	r1, [r6, #12]
   d7d0e:	7b72      	ldrb	r2, [r6, #13]
   d7d10:	745a      	strb	r2, [r3, #17]
   d7d12:	60d8      	str	r0, [r3, #12]
   d7d14:	721c      	strb	r4, [r3, #8]
   d7d16:	7419      	strb	r1, [r3, #16]
  return true;
   d7d18:	2001      	movs	r0, #1
   d7d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d7d1e:	213a      	movs	r1, #58	; 0x3a
   d7d20:	4620      	mov	r0, r4
   d7d22:	f7ff ff27 	bl	d7b74 <_ZN9SdSpiCard11cardCommandEhm>
   d7d26:	b138      	cbz	r0, d7d38 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d7d28:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d7d2a:	4620      	mov	r0, r4
   d7d2c:	7023      	strb	r3, [r4, #0]
   d7d2e:	f7ff fec8 	bl	d7ac2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7d32:	2000      	movs	r0, #0
}
   d7d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7d38:	6860      	ldr	r0, [r4, #4]
   d7d3a:	f000 f94e 	bl	d7fda <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d7d3e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d7d42:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d7d44:	bf04      	itt	eq
   d7d46:	2303      	moveq	r3, #3
   d7d48:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7d4a:	6860      	ldr	r0, [r4, #4]
   d7d4c:	f000 f945 	bl	d7fda <_ZN14SdSpiAltDriver7receiveEv>
   d7d50:	6860      	ldr	r0, [r4, #4]
   d7d52:	f000 f942 	bl	d7fda <_ZN14SdSpiAltDriver7receiveEv>
   d7d56:	6860      	ldr	r0, [r4, #4]
   d7d58:	f000 f93f 	bl	d7fda <_ZN14SdSpiAltDriver7receiveEv>
   d7d5c:	e7d0      	b.n	d7d00 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d7d5e:	bf00      	nop
   d7d60:	0003d090 	.word	0x0003d090

000d7d64 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d7d64:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d7d66:	7a83      	ldrb	r3, [r0, #10]
   d7d68:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d7d6a:	bf18      	it	ne
   d7d6c:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d7d6e:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d7d70:	460a      	mov	r2, r1
   d7d72:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d7d74:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d7d76:	f7ff fefd 	bl	d7b74 <_ZN9SdSpiCard11cardCommandEhm>
   d7d7a:	b110      	cbz	r0, d7d82 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7d7c:	2330      	movs	r3, #48	; 0x30
   d7d7e:	7023      	strb	r3, [r4, #0]
   d7d80:	e00b      	b.n	d7d9a <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d7d82:	4629      	mov	r1, r5
   d7d84:	f44f 7200 	mov.w	r2, #512	; 0x200
   d7d88:	4620      	mov	r0, r4
   d7d8a:	f7ff fead 	bl	d7ae8 <_ZN9SdSpiCard8readDataEPhj>
   d7d8e:	4605      	mov	r5, r0
   d7d90:	b118      	cbz	r0, d7d9a <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d7d92:	4620      	mov	r0, r4
   d7d94:	f7ff fe95 	bl	d7ac2 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d7d98:	e003      	b.n	d7da2 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d7d9a:	4620      	mov	r0, r4
   d7d9c:	f7ff fe91 	bl	d7ac2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7da0:	2500      	movs	r5, #0
}
   d7da2:	4628      	mov	r0, r5
   d7da4:	bd38      	pop	{r3, r4, r5, pc}

000d7da6 <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7da6:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d7da8:	7a83      	ldrb	r3, [r0, #10]
   d7daa:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7dac:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d7dae:	bf18      	it	ne
   d7db0:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d7db2:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7db4:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d7db6:	f7ff fedd 	bl	d7b74 <_ZN9SdSpiCard11cardCommandEhm>
   d7dba:	b130      	cbz	r0, d7dca <_ZN9SdSpiCard9readStartEm+0x24>
   d7dbc:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d7dbe:	4620      	mov	r0, r4
   d7dc0:	7023      	strb	r3, [r4, #0]
   d7dc2:	f7ff fe7e 	bl	d7ac2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7dc6:	2000      	movs	r0, #0
   d7dc8:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d7dca:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d7dcc:	bd10      	pop	{r4, pc}

000d7dce <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d7dce:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d7dd0:	2200      	movs	r2, #0
   d7dd2:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d7dd4:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d7dd6:	f7ff fecd 	bl	d7b74 <_ZN9SdSpiCard11cardCommandEhm>
   d7dda:	b130      	cbz	r0, d7dea <_ZN9SdSpiCard8readStopEv+0x1c>
   d7ddc:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d7dde:	4620      	mov	r0, r4
   d7de0:	7023      	strb	r3, [r4, #0]
   d7de2:	f7ff fe6e 	bl	d7ac2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7de6:	2000      	movs	r0, #0
   d7de8:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d7dea:	4620      	mov	r0, r4
   d7dec:	f7ff fe69 	bl	d7ac2 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d7df0:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d7df2:	bd10      	pop	{r4, pc}

000d7df4 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d7df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7df6:	4605      	mov	r5, r0
   d7df8:	4616      	mov	r6, r2
   d7dfa:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d7dfc:	f7ff ffd3 	bl	d7da6 <_ZN9SdSpiCard9readStartEm>
   d7e00:	b198      	cbz	r0, d7e2a <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d7e02:	2400      	movs	r4, #0
   d7e04:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d7e06:	429f      	cmp	r7, r3
   d7e08:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d7e0c:	d908      	bls.n	d7e20 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d7e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
   d7e12:	4628      	mov	r0, r5
   d7e14:	f7ff fe68 	bl	d7ae8 <_ZN9SdSpiCard8readDataEPhj>
   d7e18:	3401      	adds	r4, #1
   d7e1a:	2800      	cmp	r0, #0
   d7e1c:	d1f2      	bne.n	d7e04 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d7e1e:	e004      	b.n	d7e2a <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d7e20:	4628      	mov	r0, r5
}
   d7e22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d7e26:	f7ff bfd2 	b.w	d7dce <_ZN9SdSpiCard8readStopEv>
}
   d7e2a:	2000      	movs	r0, #0
   d7e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7e2e <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d7e2e:	b538      	push	{r3, r4, r5, lr}
   d7e30:	4604      	mov	r4, r0
   d7e32:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7e34:	6840      	ldr	r0, [r0, #4]
   d7e36:	f000 f8eb 	bl	d8010 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d7e3a:	f44f 7200 	mov.w	r2, #512	; 0x200
   d7e3e:	4629      	mov	r1, r5
   d7e40:	6860      	ldr	r0, [r4, #4]
   d7e42:	f000 f8e9 	bl	d8018 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7e46:	21ff      	movs	r1, #255	; 0xff
   d7e48:	6860      	ldr	r0, [r4, #4]
   d7e4a:	f000 f8e1 	bl	d8010 <_ZN14SdSpiAltDriver4sendEh>
   d7e4e:	21ff      	movs	r1, #255	; 0xff
   d7e50:	6860      	ldr	r0, [r4, #4]
   d7e52:	f000 f8dd 	bl	d8010 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7e56:	6860      	ldr	r0, [r4, #4]
   d7e58:	f000 f8bf 	bl	d7fda <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d7e5c:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d7e5e:	f000 001f 	and.w	r0, r0, #31
   d7e62:	2805      	cmp	r0, #5
   d7e64:	d006      	beq.n	d7e74 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7e66:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d7e68:	4620      	mov	r0, r4
   d7e6a:	7023      	strb	r3, [r4, #0]
   d7e6c:	f7ff fe29 	bl	d7ac2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7e70:	2000      	movs	r0, #0
   d7e72:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d7e74:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d7e76:	bd38      	pop	{r3, r4, r5, pc}

000d7e78 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7e78:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d7e7a:	7a83      	ldrb	r3, [r0, #10]
   d7e7c:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d7e7e:	bf18      	it	ne
   d7e80:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7e82:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d7e84:	460a      	mov	r2, r1
   d7e86:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7e88:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d7e8a:	f7ff fe73 	bl	d7b74 <_ZN9SdSpiCard11cardCommandEhm>
   d7e8e:	4606      	mov	r6, r0
   d7e90:	b108      	cbz	r0, d7e96 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d7e92:	2332      	movs	r3, #50	; 0x32
   d7e94:	e01d      	b.n	d7ed2 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d7e96:	462a      	mov	r2, r5
   d7e98:	21fe      	movs	r1, #254	; 0xfe
   d7e9a:	4620      	mov	r0, r4
   d7e9c:	f7ff ffc7 	bl	d7e2e <_ZN9SdSpiCard9writeDataEhPKh>
   d7ea0:	b1c0      	cbz	r0, d7ed4 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7ea2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d7ea6:	4620      	mov	r0, r4
   d7ea8:	f7ff fe4f 	bl	d7b4a <_ZN9SdSpiCard11waitNotBusyEt>
   d7eac:	4605      	mov	r5, r0
   d7eae:	b908      	cbnz	r0, d7eb4 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d7eb0:	235a      	movs	r3, #90	; 0x5a
   d7eb2:	e00e      	b.n	d7ed2 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d7eb4:	4632      	mov	r2, r6
   d7eb6:	210d      	movs	r1, #13
   d7eb8:	4620      	mov	r0, r4
   d7eba:	f7ff fe5b 	bl	d7b74 <_ZN9SdSpiCard11cardCommandEhm>
   d7ebe:	b938      	cbnz	r0, d7ed0 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7ec0:	6860      	ldr	r0, [r4, #4]
   d7ec2:	f000 f88a 	bl	d7fda <_ZN14SdSpiAltDriver7receiveEv>
   d7ec6:	b918      	cbnz	r0, d7ed0 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d7ec8:	4620      	mov	r0, r4
   d7eca:	f7ff fdfa 	bl	d7ac2 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d7ece:	e005      	b.n	d7edc <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7ed0:	2329      	movs	r3, #41	; 0x29
   d7ed2:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d7ed4:	4620      	mov	r0, r4
   d7ed6:	f7ff fdf4 	bl	d7ac2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7eda:	2500      	movs	r5, #0
}
   d7edc:	4628      	mov	r0, r5
   d7ede:	bd70      	pop	{r4, r5, r6, pc}

000d7ee0 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d7ee0:	b538      	push	{r3, r4, r5, lr}
   d7ee2:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7ee4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d7ee8:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7eea:	f7ff fe2e 	bl	d7b4a <_ZN9SdSpiCard11waitNotBusyEt>
   d7eee:	b910      	cbnz	r0, d7ef6 <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d7ef0:	235b      	movs	r3, #91	; 0x5b
   d7ef2:	7023      	strb	r3, [r4, #0]
   d7ef4:	e005      	b.n	d7f02 <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d7ef6:	462a      	mov	r2, r5
   d7ef8:	21fc      	movs	r1, #252	; 0xfc
   d7efa:	4620      	mov	r0, r4
   d7efc:	f7ff ff97 	bl	d7e2e <_ZN9SdSpiCard9writeDataEhPKh>
   d7f00:	b918      	cbnz	r0, d7f0a <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d7f02:	4620      	mov	r0, r4
   d7f04:	f7ff fddd 	bl	d7ac2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7f08:	2000      	movs	r0, #0
}
   d7f0a:	bd38      	pop	{r3, r4, r5, pc}

000d7f0c <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7f0c:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d7f0e:	7a83      	ldrb	r3, [r0, #10]
   d7f10:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7f12:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d7f14:	bf18      	it	ne
   d7f16:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d7f18:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7f1a:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d7f1c:	f7ff fe2a 	bl	d7b74 <_ZN9SdSpiCard11cardCommandEhm>
   d7f20:	b130      	cbz	r0, d7f30 <_ZN9SdSpiCard10writeStartEm+0x24>
   d7f22:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d7f24:	4620      	mov	r0, r4
   d7f26:	7023      	strb	r3, [r4, #0]
   d7f28:	f7ff fdcb 	bl	d7ac2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7f2c:	2000      	movs	r0, #0
   d7f2e:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d7f30:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d7f32:	bd10      	pop	{r4, pc}

000d7f34 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d7f34:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7f36:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d7f3a:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7f3c:	f7ff fe05 	bl	d7b4a <_ZN9SdSpiCard11waitNotBusyEt>
   d7f40:	4605      	mov	r5, r0
   d7f42:	b120      	cbz	r0, d7f4e <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7f44:	21fd      	movs	r1, #253	; 0xfd
   d7f46:	6860      	ldr	r0, [r4, #4]
   d7f48:	f000 f862 	bl	d8010 <_ZN14SdSpiAltDriver4sendEh>
   d7f4c:	e001      	b.n	d7f52 <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7f4e:	2356      	movs	r3, #86	; 0x56
   d7f50:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d7f52:	4620      	mov	r0, r4
   d7f54:	f7ff fdb5 	bl	d7ac2 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d7f58:	4628      	mov	r0, r5
   d7f5a:	bd38      	pop	{r3, r4, r5, pc}

000d7f5c <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d7f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7f5e:	4605      	mov	r5, r0
   d7f60:	4616      	mov	r6, r2
   d7f62:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d7f64:	f7ff ffd2 	bl	d7f0c <_ZN9SdSpiCard10writeStartEm>
   d7f68:	b170      	cbz	r0, d7f88 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d7f6a:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d7f6c:	42bc      	cmp	r4, r7
   d7f6e:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d7f72:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d7f74:	d004      	beq.n	d7f80 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d7f76:	f7ff ffb3 	bl	d7ee0 <_ZN9SdSpiCard9writeDataEPKh>
   d7f7a:	b128      	cbz	r0, d7f88 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d7f7c:	3401      	adds	r4, #1
   d7f7e:	e7f5      	b.n	d7f6c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d7f80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d7f84:	f7ff bfd6 	b.w	d7f34 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d7f88:	4628      	mov	r0, r5
   d7f8a:	f7ff fd9a 	bl	d7ac2 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d7f8e:	2000      	movs	r0, #0
   d7f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7f92 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d7f92:	f000 bbad 	b.w	d86f0 <HAL_Pin_Map>

000d7f96 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d7f96:	f000 bbab 	b.w	d86f0 <HAL_Pin_Map>

000d7f9a <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d7f9a:	f000 bba9 	b.w	d86f0 <HAL_Pin_Map>
	...

000d7fa0 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d7fa0:	4b01      	ldr	r3, [pc, #4]	; (d7fa8 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d7fa2:	2201      	movs	r2, #1
   d7fa4:	701a      	strb	r2, [r3, #0]
   d7fa6:	4770      	bx	lr
   d7fa8:	2003df24 	.word	0x2003df24

000d7fac <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d7fac:	1d01      	adds	r1, r0, #4
   d7fae:	6800      	ldr	r0, [r0, #0]
   d7fb0:	f000 bfcc 	b.w	d8f4c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d7fb4 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d7fb4:	b510      	push	{r4, lr}
   d7fb6:	4604      	mov	r4, r0
  m_csPin = csPin;
   d7fb8:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d7fba:	6800      	ldr	r0, [r0, #0]
   d7fbc:	f000 ff7a 	bl	d8eb4 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d7fc0:	7d20      	ldrb	r0, [r4, #20]
   d7fc2:	2101      	movs	r1, #1
   d7fc4:	f002 fd0a 	bl	da9dc <pinMode>
  digitalWrite(m_csPin, HIGH);
   d7fc8:	7d20      	ldrb	r0, [r4, #20]
   d7fca:	2101      	movs	r1, #1
}
   d7fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d7fd0:	f002 bd15 	b.w	da9fe <digitalWrite>

000d7fd4 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d7fd4:	6800      	ldr	r0, [r0, #0]
   d7fd6:	f000 bfa0 	b.w	d8f1a <_ZN8SPIClass14endTransactionEv>

000d7fda <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d7fda:	21ff      	movs	r1, #255	; 0xff
   d7fdc:	6800      	ldr	r0, [r0, #0]
   d7fde:	f001 b87b 	b.w	d90d8 <_ZN8SPIClass8transferEh>
	...

000d7fe4 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d7fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7fe6:	4b08      	ldr	r3, [pc, #32]	; (d8008 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d7fe8:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d7fea:	2500      	movs	r5, #0
   d7fec:	4c07      	ldr	r4, [pc, #28]	; (d800c <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7fee:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d7ff0:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7ff2:	4613      	mov	r3, r2
   d7ff4:	460a      	mov	r2, r1
   d7ff6:	4629      	mov	r1, r5
   d7ff8:	f001 f874 	bl	d90e4 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d7ffc:	7823      	ldrb	r3, [r4, #0]
   d7ffe:	2b00      	cmp	r3, #0
   d8000:	d0fc      	beq.n	d7ffc <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d8002:	2000      	movs	r0, #0
   d8004:	b003      	add	sp, #12
   d8006:	bd30      	pop	{r4, r5, pc}
   d8008:	000d7fa1 	.word	0x000d7fa1
   d800c:	2003df24 	.word	0x2003df24

000d8010 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d8010:	6800      	ldr	r0, [r0, #0]
   d8012:	f001 b861 	b.w	d90d8 <_ZN8SPIClass8transferEh>
	...

000d8018 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d8018:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d801a:	4b07      	ldr	r3, [pc, #28]	; (d8038 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d801c:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d801e:	2500      	movs	r5, #0
   d8020:	4c06      	ldr	r4, [pc, #24]	; (d803c <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d8022:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d8024:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d8026:	4613      	mov	r3, r2
   d8028:	462a      	mov	r2, r5
   d802a:	f001 f85b 	bl	d90e4 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d802e:	7823      	ldrb	r3, [r4, #0]
   d8030:	2b00      	cmp	r3, #0
   d8032:	d0fc      	beq.n	d802e <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d8034:	b003      	add	sp, #12
   d8036:	bd30      	pop	{r4, r5, pc}
   d8038:	000d7fa1 	.word	0x000d7fa1
   d803c:	2003df24 	.word	0x2003df24

000d8040 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d8040:	f000 bb56 	b.w	d86f0 <HAL_Pin_Map>

000d8044 <_ZN5RFM694isr0Ev>:
  }
  RSSI = readRSSI();
  //digitalWrite(4, 0);
}

void RFM69::isr0() { selfPointer->interruptHandler(); }
   d8044:	4b02      	ldr	r3, [pc, #8]	; (d8050 <_ZN5RFM694isr0Ev+0xc>)
   d8046:	6818      	ldr	r0, [r3, #0]
   d8048:	6803      	ldr	r3, [r0, #0]
   d804a:	681b      	ldr	r3, [r3, #0]
   d804c:	4718      	bx	r3
   d804e:	bf00      	nop
   d8050:	2003df3c 	.word	0x2003df3c

000d8054 <_ZN5RFM698unselectEv>:
  SPI1.setClockDivider(SPI_CLOCK_DIV16);
  digitalWrite(_slaveSelectPin, LOW);
}

/// UNselect the transceiver chip
void RFM69::unselect() {
   d8054:	b508      	push	{r3, lr}
  digitalWrite(_slaveSelectPin, HIGH);
   d8056:	2101      	movs	r1, #1
   d8058:	7900      	ldrb	r0, [r0, #4]
   d805a:	f002 fcd0 	bl	da9fe <digitalWrite>
  #ifndef PARTICLE
  SPCR = _SPCR;
  SPSR = _SPSR;
  #endif
  interrupts();
}
   d805e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  //restore SPI settings to what they were before talking to RFM69
  #ifndef PARTICLE
  SPCR = _SPCR;
  SPSR = _SPSR;
  #endif
  interrupts();
   d8062:	f001 beff 	b.w	d9e64 <_Z10interruptsv>
	...

000d8068 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d8068:	b510      	push	{r4, lr}
        static SPIClass instance(Interface);
   d806a:	4c08      	ldr	r4, [pc, #32]	; (d808c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x24>)
   d806c:	6823      	ldr	r3, [r4, #0]
   d806e:	07db      	lsls	r3, r3, #31
   d8070:	d40a      	bmi.n	d8088 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x20>
   d8072:	4620      	mov	r0, r4
   d8074:	f7fc f819 	bl	d40aa <__cxa_guard_acquire>
   d8078:	b130      	cbz	r0, d8088 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x20>
   d807a:	2101      	movs	r1, #1
   d807c:	4804      	ldr	r0, [pc, #16]	; (d8090 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x28>)
   d807e:	f000 ff0f 	bl	d8ea0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8082:	4620      	mov	r0, r4
   d8084:	f7fc f816 	bl	d40b4 <__cxa_guard_release>
        return instance;
    }
   d8088:	4801      	ldr	r0, [pc, #4]	; (d8090 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x28>)
   d808a:	bd10      	pop	{r4, pc}
   d808c:	2003df28 	.word	0x2003df28
   d8090:	2003df2c 	.word	0x2003df2c

000d8094 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   d8094:	b510      	push	{r4, lr}
   d8096:	4604      	mov	r4, r0
        return instance().transfer(data);
   d8098:	f7ff ffe6 	bl	d8068 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d809c:	4621      	mov	r1, r4
    }
   d809e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d80a2:	f001 b819 	b.w	d90d8 <_ZN8SPIClass8transferEh>

000d80a6 <_ZN5RFM696selectEv>:
  SPI1.transfer(value);
  unselect();
}

/// Select the transceiver
void RFM69::select() {
   d80a6:	b510      	push	{r4, lr}
   d80a8:	4604      	mov	r4, r0
  noInterrupts();
   d80aa:	f001 fed9 	bl	d9e60 <_Z12noInterruptsv>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d80ae:	f7ff ffdb 	bl	d8068 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d80b2:	2100      	movs	r1, #0
   d80b4:	f000 ff20 	bl	d8ef8 <_ZN8SPIClass11setDataModeEh>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   d80b8:	f7ff ffd6 	bl	d8068 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d80bc:	2101      	movs	r1, #1
   d80be:	f000 ff0a 	bl	d8ed6 <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
   d80c2:	f7ff ffd1 	bl	d8068 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d80c6:	2118      	movs	r1, #24
   d80c8:	f000 ffe2 	bl	d9090 <_ZN8SPIClass15setClockDividerEh>
  //set RFM69 SPI settings
  SPI1.setDataMode(SPI_MODE0);
  SPI1.setBitOrder(MSBFIRST);
  //SPI_CLOCK_DIV16; // 72MHz / 16 = 4.5MHz
  SPI1.setClockDivider(SPI_CLOCK_DIV16);
  digitalWrite(_slaveSelectPin, LOW);
   d80cc:	7920      	ldrb	r0, [r4, #4]
   d80ce:	2100      	movs	r1, #0
}
   d80d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  //set RFM69 SPI settings
  SPI1.setDataMode(SPI_MODE0);
  SPI1.setBitOrder(MSBFIRST);
  //SPI_CLOCK_DIV16; // 72MHz / 16 = 4.5MHz
  SPI1.setClockDivider(SPI_CLOCK_DIV16);
  digitalWrite(_slaveSelectPin, LOW);
   d80d4:	f002 bc93 	b.w	da9fe <digitalWrite>

000d80d8 <_ZN5RFM697readRegEh>:
  rssi >>= 1;
  return rssi;
}

byte RFM69::readReg(byte addr)
{
   d80d8:	b538      	push	{r3, r4, r5, lr}
   d80da:	460c      	mov	r4, r1
   d80dc:	4605      	mov	r5, r0
  select();
   d80de:	f7ff ffe2 	bl	d80a6 <_ZN5RFM696selectEv>
  SPI1.transfer(addr & 0x7F);
   d80e2:	f004 007f 	and.w	r0, r4, #127	; 0x7f
   d80e6:	f7ff ffd5 	bl	d8094 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  byte regval = SPI1.transfer(0);
   d80ea:	2000      	movs	r0, #0
   d80ec:	f7ff ffd2 	bl	d8094 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d80f0:	4604      	mov	r4, r0
  unselect();
   d80f2:	4628      	mov	r0, r5
   d80f4:	f7ff ffae 	bl	d8054 <_ZN5RFM698unselectEv>
  return regval;
}
   d80f8:	4620      	mov	r0, r4
   d80fa:	bd38      	pop	{r3, r4, r5, pc}

000d80fc <_ZN5RFM698writeRegEhh>:

void RFM69::writeReg(byte addr, byte value)
{
   d80fc:	b570      	push	{r4, r5, r6, lr}
   d80fe:	460e      	mov	r6, r1
   d8100:	4615      	mov	r5, r2
   d8102:	4604      	mov	r4, r0
  select();
   d8104:	f7ff ffcf 	bl	d80a6 <_ZN5RFM696selectEv>
  SPI1.transfer(addr | 0x80);
   d8108:	f046 0080 	orr.w	r0, r6, #128	; 0x80
   d810c:	f7ff ffc2 	bl	d8094 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  SPI1.transfer(value);
   d8110:	4628      	mov	r0, r5
   d8112:	f7ff ffbf 	bl	d8094 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  unselect();
   d8116:	4620      	mov	r0, r4
}
   d8118:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void RFM69::writeReg(byte addr, byte value)
{
  select();
  SPI1.transfer(addr | 0x80);
  SPI1.transfer(value);
  unselect();
   d811c:	f7ff bf9a 	b.w	d8054 <_ZN5RFM698unselectEv>

000d8120 <_ZN5RFM6913setPowerLevelEh>:
}

// set output power: 0=min, 31=max
// this results in a "weaker" transmitted signal, and directly results in a lower RSSI at the receiver
void RFM69::setPowerLevel(byte powerLevel)
{
   d8120:	b510      	push	{r4, lr}
  _powerLevel = powerLevel;
   d8122:	7241      	strb	r1, [r0, #9]
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | (_powerLevel > 31 ? 31 : _powerLevel));
   d8124:	2111      	movs	r1, #17
}

// set output power: 0=min, 31=max
// this results in a "weaker" transmitted signal, and directly results in a lower RSSI at the receiver
void RFM69::setPowerLevel(byte powerLevel)
{
   d8126:	4604      	mov	r4, r0
  _powerLevel = powerLevel;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | (_powerLevel > 31 ? 31 : _powerLevel));
   d8128:	f7ff ffd6 	bl	d80d8 <_ZN5RFM697readRegEh>
   d812c:	7a62      	ldrb	r2, [r4, #9]
   d812e:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
   d8132:	2a1f      	cmp	r2, #31
   d8134:	bf94      	ite	ls
   d8136:	4302      	orrls	r2, r0
   d8138:	f040 021f 	orrhi.w	r2, r0, #31
   d813c:	2111      	movs	r1, #17
   d813e:	4620      	mov	r0, r4
}
   d8140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// set output power: 0=min, 31=max
// this results in a "weaker" transmitted signal, and directly results in a lower RSSI at the receiver
void RFM69::setPowerLevel(byte powerLevel)
{
  _powerLevel = powerLevel;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | (_powerLevel > 31 ? 31 : _powerLevel));
   d8144:	f7ff bfda 	b.w	d80fc <_ZN5RFM698writeRegEhh>

000d8148 <_ZN5RFM698readRSSIEb>:
    unselect();
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
}

int RFM69::readRSSI(bool forceTrigger) {
   d8148:	b510      	push	{r4, lr}
   d814a:	4604      	mov	r4, r0
  int rssi = 0;
  if (forceTrigger)
   d814c:	b149      	cbz	r1, d8162 <_ZN5RFM698readRSSIEb+0x1a>
  {
    //RSSI trigger not needed if DAGC is in continuous mode
    writeReg(REG_RSSICONFIG, RF_RSSI_START);
   d814e:	2201      	movs	r2, #1
   d8150:	2123      	movs	r1, #35	; 0x23
   d8152:	f7ff ffd3 	bl	d80fc <_ZN5RFM698writeRegEhh>
    while ((readReg(REG_RSSICONFIG) & RF_RSSI_DONE) == 0x00); // Wait for RSSI_Ready
   d8156:	2123      	movs	r1, #35	; 0x23
   d8158:	4620      	mov	r0, r4
   d815a:	f7ff ffbd 	bl	d80d8 <_ZN5RFM697readRegEh>
   d815e:	0783      	lsls	r3, r0, #30
   d8160:	d5f9      	bpl.n	d8156 <_ZN5RFM698readRSSIEb+0xe>
  }
  rssi = -readReg(REG_RSSIVALUE);
   d8162:	2124      	movs	r1, #36	; 0x24
   d8164:	4620      	mov	r0, r4
   d8166:	f7ff ffb7 	bl	d80d8 <_ZN5RFM697readRegEh>
   d816a:	4240      	negs	r0, r0
  rssi >>= 1;
  return rssi;
   d816c:	1040      	asrs	r0, r0, #1
}
   d816e:	bd10      	pop	{r4, pc}

000d8170 <_ZN5RFM6916setHighPowerRegsEb>:
  uint16_t baudRate = 32000000L / speedBPS;;
  
  writeReg(REG_BITRATEMSB, (baudRate >> 8) & 0xFF);
  writeReg(REG_BITRATELSB, (baudRate >> 0) & 0xFF);
}
void RFM69::setHighPowerRegs(bool onOff) {
   d8170:	b538      	push	{r3, r4, r5, lr}
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
   d8172:	2900      	cmp	r1, #0
   d8174:	bf14      	ite	ne
   d8176:	225d      	movne	r2, #93	; 0x5d
   d8178:	2255      	moveq	r2, #85	; 0x55
   d817a:	460c      	mov	r4, r1
   d817c:	215a      	movs	r1, #90	; 0x5a
  uint16_t baudRate = 32000000L / speedBPS;;
  
  writeReg(REG_BITRATEMSB, (baudRate >> 8) & 0xFF);
  writeReg(REG_BITRATELSB, (baudRate >> 0) & 0xFF);
}
void RFM69::setHighPowerRegs(bool onOff) {
   d817e:	4605      	mov	r5, r0
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
   d8180:	f7ff ffbc 	bl	d80fc <_ZN5RFM698writeRegEhh>
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
   d8184:	2c00      	cmp	r4, #0
   d8186:	4628      	mov	r0, r5
   d8188:	bf14      	ite	ne
   d818a:	227c      	movne	r2, #124	; 0x7c
   d818c:	2270      	moveq	r2, #112	; 0x70
   d818e:	215c      	movs	r1, #92	; 0x5c
}
   d8190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeReg(REG_BITRATEMSB, (baudRate >> 8) & 0xFF);
  writeReg(REG_BITRATELSB, (baudRate >> 0) & 0xFF);
}
void RFM69::setHighPowerRegs(bool onOff) {
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
   d8194:	f7ff bfb2 	b.w	d80fc <_ZN5RFM698writeRegEhh>

000d8198 <_ZN5RFM697setModeEh>:
  writeReg(REG_FRFMID, freqHz >> 8);
  writeReg(REG_FRFLSB, freqHz);
}

void RFM69::setMode(byte newMode)
{
   d8198:	b570      	push	{r4, r5, r6, lr}
	if (newMode == _mode) return; //TODO: can remove this?
   d819a:	4d28      	ldr	r5, [pc, #160]	; (d823c <_ZN5RFM697setModeEh+0xa4>)
   d819c:	782b      	ldrb	r3, [r5, #0]
   d819e:	428b      	cmp	r3, r1
  writeReg(REG_FRFMID, freqHz >> 8);
  writeReg(REG_FRFLSB, freqHz);
}

void RFM69::setMode(byte newMode)
{
   d81a0:	4604      	mov	r4, r0
   d81a2:	460e      	mov	r6, r1
	if (newMode == _mode) return; //TODO: can remove this?
   d81a4:	d049      	beq.n	d823a <_ZN5RFM697setModeEh+0xa2>

	switch (newMode) {
   d81a6:	2904      	cmp	r1, #4
   d81a8:	d847      	bhi.n	d823a <_ZN5RFM697setModeEh+0xa2>
   d81aa:	e8df f001 	tbb	[pc, r1]
   d81ae:	2c34      	.short	0x2c34
   d81b0:	1224      	.short	0x1224
   d81b2:	03          	.byte	0x03
   d81b3:	00          	.byte	0x00
		case RF69_MODE_TX:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
   d81b4:	2101      	movs	r1, #1
   d81b6:	f7ff ff8f 	bl	d80d8 <_ZN5RFM697readRegEh>
   d81ba:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d81be:	f042 020c 	orr.w	r2, r2, #12
   d81c2:	2101      	movs	r1, #1
   d81c4:	4620      	mov	r0, r4
   d81c6:	f7ff ff99 	bl	d80fc <_ZN5RFM698writeRegEhh>
      if (_isRFM69HW) setHighPowerRegs(true);
   d81ca:	7aa3      	ldrb	r3, [r4, #10]
   d81cc:	b363      	cbz	r3, d8228 <_ZN5RFM697setModeEh+0x90>
   d81ce:	2101      	movs	r1, #1
   d81d0:	e00d      	b.n	d81ee <_ZN5RFM697setModeEh+0x56>
			break;
		case RF69_MODE_RX:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
   d81d2:	2101      	movs	r1, #1
   d81d4:	f7ff ff80 	bl	d80d8 <_ZN5RFM697readRegEh>
   d81d8:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d81dc:	f042 0210 	orr.w	r2, r2, #16
   d81e0:	2101      	movs	r1, #1
   d81e2:	4620      	mov	r0, r4
   d81e4:	f7ff ff8a 	bl	d80fc <_ZN5RFM698writeRegEhh>
      if (_isRFM69HW) setHighPowerRegs(false);
   d81e8:	7aa3      	ldrb	r3, [r4, #10]
   d81ea:	b1eb      	cbz	r3, d8228 <_ZN5RFM697setModeEh+0x90>
   d81ec:	2100      	movs	r1, #0
   d81ee:	4620      	mov	r0, r4
   d81f0:	f7ff ffbe 	bl	d8170 <_ZN5RFM6916setHighPowerRegsEb>
   d81f4:	e018      	b.n	d8228 <_ZN5RFM697setModeEh+0x90>
			break;
		case RF69_MODE_SYNTH:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SYNTHESIZER);
   d81f6:	2101      	movs	r1, #1
   d81f8:	f7ff ff6e 	bl	d80d8 <_ZN5RFM697readRegEh>
   d81fc:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d8200:	f042 0208 	orr.w	r2, r2, #8
   d8204:	e00c      	b.n	d8220 <_ZN5RFM697setModeEh+0x88>
			break;
		case RF69_MODE_STANDBY:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_STANDBY);
   d8206:	2101      	movs	r1, #1
   d8208:	f7ff ff66 	bl	d80d8 <_ZN5RFM697readRegEh>
   d820c:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d8210:	f042 0204 	orr.w	r2, r2, #4
   d8214:	e004      	b.n	d8220 <_ZN5RFM697setModeEh+0x88>
			break;
		case RF69_MODE_SLEEP:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
   d8216:	2101      	movs	r1, #1
   d8218:	f7ff ff5e 	bl	d80d8 <_ZN5RFM697readRegEh>
   d821c:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d8220:	2101      	movs	r1, #1
   d8222:	4620      	mov	r0, r4
   d8224:	f7ff ff6a 	bl	d80fc <_ZN5RFM698writeRegEhh>
		default: return;
	}

	// we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
	while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // Wait for ModeReady
   d8228:	782b      	ldrb	r3, [r5, #0]
   d822a:	b92b      	cbnz	r3, d8238 <_ZN5RFM697setModeEh+0xa0>
   d822c:	2127      	movs	r1, #39	; 0x27
   d822e:	4620      	mov	r0, r4
   d8230:	f7ff ff52 	bl	d80d8 <_ZN5RFM697readRegEh>
   d8234:	0603      	lsls	r3, r0, #24
   d8236:	d5f7      	bpl.n	d8228 <_ZN5RFM697setModeEh+0x90>

	_mode = newMode;
   d8238:	702e      	strb	r6, [r5, #0]
   d823a:	bd70      	pop	{r4, r5, r6, pc}
   d823c:	2003df80 	.word	0x2003df80

000d8240 <_ZN5RFM6912receiveBeginEv>:
}

void RFM69::isr0() { selfPointer->interruptHandler(); }

void RFM69::receiveBegin() {
  DATALEN = 0;
   d8240:	4a15      	ldr	r2, [pc, #84]	; (d8298 <_ZN5RFM6912receiveBeginEv+0x58>)
   d8242:	2300      	movs	r3, #0
  //digitalWrite(4, 0);
}

void RFM69::isr0() { selfPointer->interruptHandler(); }

void RFM69::receiveBegin() {
   d8244:	b510      	push	{r4, lr}
  DATALEN = 0;
   d8246:	7013      	strb	r3, [r2, #0]
  SENDERID = 0;
   d8248:	4a14      	ldr	r2, [pc, #80]	; (d829c <_ZN5RFM6912receiveBeginEv+0x5c>)
   d824a:	7013      	strb	r3, [r2, #0]
  TARGETID = 0;
   d824c:	4a14      	ldr	r2, [pc, #80]	; (d82a0 <_ZN5RFM6912receiveBeginEv+0x60>)
   d824e:	7013      	strb	r3, [r2, #0]
  PAYLOADLEN = 0;
   d8250:	4a14      	ldr	r2, [pc, #80]	; (d82a4 <_ZN5RFM6912receiveBeginEv+0x64>)
   d8252:	7013      	strb	r3, [r2, #0]
  ACK_REQUESTED = 0;
   d8254:	4a14      	ldr	r2, [pc, #80]	; (d82a8 <_ZN5RFM6912receiveBeginEv+0x68>)
   d8256:	7013      	strb	r3, [r2, #0]
  ACK_RECEIVED = 0;
   d8258:	4a14      	ldr	r2, [pc, #80]	; (d82ac <_ZN5RFM6912receiveBeginEv+0x6c>)
   d825a:	7013      	strb	r3, [r2, #0]
  RSSI = 0;
   d825c:	4a14      	ldr	r2, [pc, #80]	; (d82b0 <_ZN5RFM6912receiveBeginEv+0x70>)
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
   d825e:	2128      	movs	r1, #40	; 0x28
  SENDERID = 0;
  TARGETID = 0;
  PAYLOADLEN = 0;
  ACK_REQUESTED = 0;
  ACK_RECEIVED = 0;
  RSSI = 0;
   d8260:	6013      	str	r3, [r2, #0]
  //digitalWrite(4, 0);
}

void RFM69::isr0() { selfPointer->interruptHandler(); }

void RFM69::receiveBegin() {
   d8262:	4604      	mov	r4, r0
  TARGETID = 0;
  PAYLOADLEN = 0;
  ACK_REQUESTED = 0;
  ACK_RECEIVED = 0;
  RSSI = 0;
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
   d8264:	f7ff ff38 	bl	d80d8 <_ZN5RFM697readRegEh>
   d8268:	0743      	lsls	r3, r0, #29
   d826a:	d50a      	bpl.n	d8282 <_ZN5RFM6912receiveBeginEv+0x42>
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
   d826c:	213d      	movs	r1, #61	; 0x3d
   d826e:	4620      	mov	r0, r4
   d8270:	f7ff ff32 	bl	d80d8 <_ZN5RFM697readRegEh>
   d8274:	f040 0204 	orr.w	r2, r0, #4
   d8278:	b2d2      	uxtb	r2, r2
   d827a:	213d      	movs	r1, #61	; 0x3d
   d827c:	4620      	mov	r0, r4
   d827e:	f7ff ff3d 	bl	d80fc <_ZN5RFM698writeRegEhh>
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); //set DIO0 to "PAYLOADREADY" in receive mode
   d8282:	4620      	mov	r0, r4
   d8284:	2125      	movs	r1, #37	; 0x25
   d8286:	2240      	movs	r2, #64	; 0x40
   d8288:	f7ff ff38 	bl	d80fc <_ZN5RFM698writeRegEhh>
  setMode(RF69_MODE_RX);
   d828c:	4620      	mov	r0, r4
   d828e:	2103      	movs	r1, #3
}
   d8290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ACK_RECEIVED = 0;
  RSSI = 0;
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); //set DIO0 to "PAYLOADREADY" in receive mode
  setMode(RF69_MODE_RX);
   d8294:	f7ff bf80 	b.w	d8198 <_ZN5RFM697setModeEh>
   d8298:	2003df7f 	.word	0x2003df7f
   d829c:	2003df3a 	.word	0x2003df3a
   d82a0:	2003df38 	.word	0x2003df38
   d82a4:	2003df40 	.word	0x2003df40
   d82a8:	2003df39 	.word	0x2003df39
   d82ac:	2003df41 	.word	0x2003df41
   d82b0:	2003df34 	.word	0x2003df34

000d82b4 <_ZN5RFM6911receiveDoneEv>:
}

bool RFM69::receiveDone() {
   d82b4:	b510      	push	{r4, lr}
   d82b6:	4604      	mov	r4, r0
// ATOMIC_BLOCK(ATOMIC_FORCEON)
// {
  noInterrupts(); //re-enabled in unselect() via setMode() or via receiveBegin()
   d82b8:	f001 fdd2 	bl	d9e60 <_Z12noInterruptsv>
  if (_mode == RF69_MODE_RX && PAYLOADLEN>0)
   d82bc:	4b0b      	ldr	r3, [pc, #44]	; (d82ec <_ZN5RFM6911receiveDoneEv+0x38>)
   d82be:	781a      	ldrb	r2, [r3, #0]
   d82c0:	2a03      	cmp	r2, #3
   d82c2:	d102      	bne.n	d82ca <_ZN5RFM6911receiveDoneEv+0x16>
   d82c4:	4a0a      	ldr	r2, [pc, #40]	; (d82f0 <_ZN5RFM6911receiveDoneEv+0x3c>)
   d82c6:	7812      	ldrb	r2, [r2, #0]
   d82c8:	b952      	cbnz	r2, d82e0 <_ZN5RFM6911receiveDoneEv+0x2c>
  {
    setMode(RF69_MODE_STANDBY); //enables interrupts
    return true;
  }
  else if (_mode == RF69_MODE_RX)  //already in RX no payload yet
   d82ca:	781b      	ldrb	r3, [r3, #0]
   d82cc:	2b03      	cmp	r3, #3
   d82ce:	d102      	bne.n	d82d6 <_ZN5RFM6911receiveDoneEv+0x22>
  {
    interrupts(); //explicitly re-enable interrupts
   d82d0:	f001 fdc8 	bl	d9e64 <_Z10interruptsv>
   d82d4:	e002      	b.n	d82dc <_ZN5RFM6911receiveDoneEv+0x28>
    return false;
  }
  receiveBegin();
   d82d6:	4620      	mov	r0, r4
   d82d8:	f7ff ffb2 	bl	d8240 <_ZN5RFM6912receiveBeginEv>
  return false;
   d82dc:	2000      	movs	r0, #0
   d82de:	bd10      	pop	{r4, pc}
// ATOMIC_BLOCK(ATOMIC_FORCEON)
// {
  noInterrupts(); //re-enabled in unselect() via setMode() or via receiveBegin()
  if (_mode == RF69_MODE_RX && PAYLOADLEN>0)
  {
    setMode(RF69_MODE_STANDBY); //enables interrupts
   d82e0:	4620      	mov	r0, r4
   d82e2:	2101      	movs	r1, #1
   d82e4:	f7ff ff58 	bl	d8198 <_ZN5RFM697setModeEh>
    return true;
   d82e8:	2001      	movs	r0, #1
    return false;
  }
  receiveBegin();
  return false;
//}
}
   d82ea:	bd10      	pop	{r4, pc}
   d82ec:	2003df80 	.word	0x2003df80
   d82f0:	2003df40 	.word	0x2003df40

000d82f4 <_ZN5RFM6912setHighPowerEb>:
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

void RFM69::setHighPower(bool onOff) {
  _isRFM69HW = onOff;
  writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
   d82f4:	2900      	cmp	r1, #0
void RFM69::promiscuous(bool onOff) {
  _promiscuousMode=onOff;
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

void RFM69::setHighPower(bool onOff) {
   d82f6:	b510      	push	{r4, lr}
   d82f8:	4604      	mov	r4, r0
  _isRFM69HW = onOff;
   d82fa:	7281      	strb	r1, [r0, #10]
  writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
   d82fc:	bf14      	ite	ne
   d82fe:	220f      	movne	r2, #15
   d8300:	221a      	moveq	r2, #26
   d8302:	2113      	movs	r1, #19
   d8304:	f7ff fefa 	bl	d80fc <_ZN5RFM698writeRegEhh>
  if (_isRFM69HW) //turning ON
   d8308:	7aa3      	ldrb	r3, [r4, #10]
   d830a:	b143      	cbz	r3, d831e <_ZN5RFM6912setHighPowerEb+0x2a>
    writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); //enable P1 & P2 amplifier stages
   d830c:	2111      	movs	r1, #17
   d830e:	4620      	mov	r0, r4
   d8310:	f7ff fee2 	bl	d80d8 <_ZN5RFM697readRegEh>
   d8314:	f000 021f 	and.w	r2, r0, #31
   d8318:	f042 0260 	orr.w	r2, r2, #96	; 0x60
   d831c:	e002      	b.n	d8324 <_ZN5RFM6912setHighPowerEb+0x30>
  else
    writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); //enable P0 only
   d831e:	7a62      	ldrb	r2, [r4, #9]
   d8320:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   d8324:	4620      	mov	r0, r4
   d8326:	2111      	movs	r1, #17
}
   d8328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  _isRFM69HW = onOff;
  writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
  if (_isRFM69HW) //turning ON
    writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); //enable P1 & P2 amplifier stages
  else
    writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); //enable P0 only
   d832c:	f7ff bee6 	b.w	d80fc <_ZN5RFM698writeRegEhh>

000d8330 <_ZN5RFM6916interruptHandlerEv>:
	while (digitalRead(_interruptPin) == 0 && millis()-txStart < RF69_TX_LIMIT_MS); //wait for DIO0 to turn HIGH signalling transmission finish
  //while (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT == 0x00); // Wait for ModeReady
  setMode(RF69_MODE_STANDBY);
}

void RFM69::interruptHandler() {
   d8330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  //pinMode(4, OUTPUT);
  //digitalWrite(4, 1);
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
   d8334:	4b3d      	ldr	r3, [pc, #244]	; (d842c <_ZN5RFM6916interruptHandlerEv+0xfc>)
   d8336:	781b      	ldrb	r3, [r3, #0]
   d8338:	2b03      	cmp	r3, #3
	while (digitalRead(_interruptPin) == 0 && millis()-txStart < RF69_TX_LIMIT_MS); //wait for DIO0 to turn HIGH signalling transmission finish
  //while (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT == 0x00); // Wait for ModeReady
  setMode(RF69_MODE_STANDBY);
}

void RFM69::interruptHandler() {
   d833a:	4604      	mov	r4, r0
  //pinMode(4, OUTPUT);
  //digitalWrite(4, 1);
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
   d833c:	d114      	bne.n	d8368 <_ZN5RFM6916interruptHandlerEv+0x38>
   d833e:	2128      	movs	r1, #40	; 0x28
   d8340:	f7ff feca 	bl	d80d8 <_ZN5RFM697readRegEh>
   d8344:	0743      	lsls	r3, r0, #29
   d8346:	d417      	bmi.n	d8378 <_ZN5RFM6916interruptHandlerEv+0x48>
   d8348:	e00e      	b.n	d8368 <_ZN5RFM6916interruptHandlerEv+0x38>

    for (byte i= 0; i < DATALEN; i++)
    {
      DATA[i] = SPI1.transfer(0);
    }
    if (DATALEN<RF69_MAX_DATA_LEN) DATA[DATALEN]=0; //add null at end of string
   d834a:	7813      	ldrb	r3, [r2, #0]
   d834c:	2b3c      	cmp	r3, #60	; 0x3c
   d834e:	d804      	bhi.n	d835a <_ZN5RFM6916interruptHandlerEv+0x2a>
   d8350:	7813      	ldrb	r3, [r2, #0]
   d8352:	4a37      	ldr	r2, [pc, #220]	; (d8430 <_ZN5RFM6916interruptHandlerEv+0x100>)
   d8354:	b2db      	uxtb	r3, r3
   d8356:	2100      	movs	r1, #0
   d8358:	54d1      	strb	r1, [r2, r3]
    unselect();
   d835a:	4620      	mov	r0, r4
   d835c:	f7ff fe7a 	bl	d8054 <_ZN5RFM698unselectEv>
    setMode(RF69_MODE_RX);
   d8360:	2103      	movs	r1, #3
   d8362:	4620      	mov	r0, r4
   d8364:	f7ff ff18 	bl	d8198 <_ZN5RFM697setModeEh>
  }
  RSSI = readRSSI();
   d8368:	2100      	movs	r1, #0
   d836a:	4620      	mov	r0, r4
   d836c:	f7ff feec 	bl	d8148 <_ZN5RFM698readRSSIEb>
   d8370:	4b30      	ldr	r3, [pc, #192]	; (d8434 <_ZN5RFM6916interruptHandlerEv+0x104>)
   d8372:	6018      	str	r0, [r3, #0]
   d8374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  //pinMode(4, OUTPUT);
  //digitalWrite(4, 1);
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
  {
    //RSSI = readRSSI();
    setMode(RF69_MODE_STANDBY);
   d8378:	2101      	movs	r1, #1
   d837a:	4620      	mov	r0, r4
   d837c:	f7ff ff0c 	bl	d8198 <_ZN5RFM697setModeEh>
    select();
   d8380:	4620      	mov	r0, r4
   d8382:	f7ff fe90 	bl	d80a6 <_ZN5RFM696selectEv>
    SPI1.transfer(REG_FIFO & 0x7f);
   d8386:	2000      	movs	r0, #0
   d8388:	f7ff fe84 	bl	d8094 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
    PAYLOADLEN = SPI1.transfer(0);
   d838c:	2000      	movs	r0, #0
   d838e:	f7ff fe81 	bl	d8094 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d8392:	4d29      	ldr	r5, [pc, #164]	; (d8438 <_ZN5RFM6916interruptHandlerEv+0x108>)
   d8394:	7028      	strb	r0, [r5, #0]
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
   d8396:	782b      	ldrb	r3, [r5, #0]
   d8398:	2b42      	cmp	r3, #66	; 0x42
   d839a:	d814      	bhi.n	d83c6 <_ZN5RFM6916interruptHandlerEv+0x96>
   d839c:	782b      	ldrb	r3, [r5, #0]
   d839e:	b2db      	uxtb	r3, r3
    TARGETID = SPI1.transfer(0);
   d83a0:	2000      	movs	r0, #0
    //RSSI = readRSSI();
    setMode(RF69_MODE_STANDBY);
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
   d83a2:	702b      	strb	r3, [r5, #0]
    TARGETID = SPI1.transfer(0);
   d83a4:	f7ff fe76 	bl	d8094 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d83a8:	4b24      	ldr	r3, [pc, #144]	; (d843c <_ZN5RFM6916interruptHandlerEv+0x10c>)
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
   d83aa:	7a22      	ldrb	r2, [r4, #8]
    setMode(RF69_MODE_STANDBY);
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
    TARGETID = SPI1.transfer(0);
   d83ac:	7018      	strb	r0, [r3, #0]
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
   d83ae:	b932      	cbnz	r2, d83be <_ZN5RFM6916interruptHandlerEv+0x8e>
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
    TARGETID = SPI1.transfer(0);
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
   d83b0:	781a      	ldrb	r2, [r3, #0]
   d83b2:	79e1      	ldrb	r1, [r4, #7]
   d83b4:	4291      	cmp	r1, r2
   d83b6:	d002      	beq.n	d83be <_ZN5RFM6916interruptHandlerEv+0x8e>
   d83b8:	781b      	ldrb	r3, [r3, #0]
   d83ba:	2bff      	cmp	r3, #255	; 0xff
   d83bc:	d105      	bne.n	d83ca <_ZN5RFM6916interruptHandlerEv+0x9a>
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
   d83be:	782b      	ldrb	r3, [r5, #0]
   d83c0:	2b02      	cmp	r3, #2
   d83c2:	d902      	bls.n	d83ca <_ZN5RFM6916interruptHandlerEv+0x9a>
   d83c4:	e00b      	b.n	d83de <_ZN5RFM6916interruptHandlerEv+0xae>
    //RSSI = readRSSI();
    setMode(RF69_MODE_STANDBY);
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
   d83c6:	2342      	movs	r3, #66	; 0x42
   d83c8:	e7ea      	b.n	d83a0 <_ZN5RFM6916interruptHandlerEv+0x70>
    TARGETID = SPI1.transfer(0);
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
    {
      PAYLOADLEN = 0;
      unselect();
   d83ca:	4620      	mov	r0, r4
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
    TARGETID = SPI1.transfer(0);
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
    {
      PAYLOADLEN = 0;
   d83cc:	2300      	movs	r3, #0
   d83ce:	702b      	strb	r3, [r5, #0]
      unselect();
   d83d0:	f7ff fe40 	bl	d8054 <_ZN5RFM698unselectEv>
      receiveBegin();
   d83d4:	4620      	mov	r0, r4
    unselect();
    setMode(RF69_MODE_RX);
  }
  RSSI = readRSSI();
  //digitalWrite(4, 0);
}
   d83d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
    {
      PAYLOADLEN = 0;
      unselect();
      receiveBegin();
   d83da:	f7ff bf31 	b.w	d8240 <_ZN5RFM6912receiveBeginEv>
      //digitalWrite(4, 0);
      return;
    }

    DATALEN = PAYLOADLEN - 3;
   d83de:	4b16      	ldr	r3, [pc, #88]	; (d8438 <_ZN5RFM6916interruptHandlerEv+0x108>)
   d83e0:	4e17      	ldr	r6, [pc, #92]	; (d8440 <_ZN5RFM6916interruptHandlerEv+0x110>)
   d83e2:	781b      	ldrb	r3, [r3, #0]
    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag

    for (byte i= 0; i < DATALEN; i++)
    {
      DATA[i] = SPI1.transfer(0);
   d83e4:	4f12      	ldr	r7, [pc, #72]	; (d8430 <_ZN5RFM6916interruptHandlerEv+0x100>)
      receiveBegin();
      //digitalWrite(4, 0);
      return;
    }

    DATALEN = PAYLOADLEN - 3;
   d83e6:	3b03      	subs	r3, #3
   d83e8:	b2db      	uxtb	r3, r3
    SENDERID = SPI1.transfer(0);
   d83ea:	2000      	movs	r0, #0
      receiveBegin();
      //digitalWrite(4, 0);
      return;
    }

    DATALEN = PAYLOADLEN - 3;
   d83ec:	7033      	strb	r3, [r6, #0]
    SENDERID = SPI1.transfer(0);
   d83ee:	f7ff fe51 	bl	d8094 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d83f2:	4b14      	ldr	r3, [pc, #80]	; (d8444 <_ZN5RFM6916interruptHandlerEv+0x114>)
   d83f4:	7018      	strb	r0, [r3, #0]
    byte CTLbyte = SPI1.transfer(0);
   d83f6:	2000      	movs	r0, #0
   d83f8:	f7ff fe4c 	bl	d8094 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>

    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
   d83fc:	4a12      	ldr	r2, [pc, #72]	; (d8448 <_ZN5RFM6916interruptHandlerEv+0x118>)
   d83fe:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
   d8402:	b2db      	uxtb	r3, r3
   d8404:	7013      	strb	r3, [r2, #0]
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag
   d8406:	f000 0040 	and.w	r0, r0, #64	; 0x40
   d840a:	4b10      	ldr	r3, [pc, #64]	; (d844c <_ZN5RFM6916interruptHandlerEv+0x11c>)
   d840c:	b2c0      	uxtb	r0, r0
   d840e:	7018      	strb	r0, [r3, #0]
   d8410:	2300      	movs	r3, #0

    for (byte i= 0; i < DATALEN; i++)
   d8412:	7831      	ldrb	r1, [r6, #0]
   d8414:	4a0a      	ldr	r2, [pc, #40]	; (d8440 <_ZN5RFM6916interruptHandlerEv+0x110>)
   d8416:	b2dd      	uxtb	r5, r3
   d8418:	428d      	cmp	r5, r1
   d841a:	f103 0801 	add.w	r8, r3, #1
   d841e:	d294      	bcs.n	d834a <_ZN5RFM6916interruptHandlerEv+0x1a>
    {
      DATA[i] = SPI1.transfer(0);
   d8420:	2000      	movs	r0, #0
   d8422:	f7ff fe37 	bl	d8094 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
    byte CTLbyte = SPI1.transfer(0);

    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag

    for (byte i= 0; i < DATALEN; i++)
   d8426:	4643      	mov	r3, r8
    {
      DATA[i] = SPI1.transfer(0);
   d8428:	5578      	strb	r0, [r7, r5]
    byte CTLbyte = SPI1.transfer(0);

    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag

    for (byte i= 0; i < DATALEN; i++)
   d842a:	e7f2      	b.n	d8412 <_ZN5RFM6916interruptHandlerEv+0xe2>
   d842c:	2003df80 	.word	0x2003df80
   d8430:	2003df42 	.word	0x2003df42
   d8434:	2003df34 	.word	0x2003df34
   d8438:	2003df40 	.word	0x2003df40
   d843c:	2003df38 	.word	0x2003df38
   d8440:	2003df7f 	.word	0x2003df7f
   d8444:	2003df3a 	.word	0x2003df3a
   d8448:	2003df41 	.word	0x2003df41
   d844c:	2003df39 	.word	0x2003df39

000d8450 <_ZN5RFM697encryptEPKc>:
}

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM69::encrypt(const char* key) {
   d8450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8452:	460d      	mov	r5, r1
  setMode(RF69_MODE_STANDBY);
   d8454:	2101      	movs	r1, #1
}

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM69::encrypt(const char* key) {
   d8456:	4604      	mov	r4, r0
  setMode(RF69_MODE_STANDBY);
   d8458:	f7ff fe9e 	bl	d8198 <_ZN5RFM697setModeEh>
  if (key!=0)
   d845c:	b18d      	cbz	r5, d8482 <_ZN5RFM697encryptEPKc+0x32>
  {
    select();
   d845e:	4620      	mov	r0, r4
   d8460:	f7ff fe21 	bl	d80a6 <_ZN5RFM696selectEv>
    SPI1.transfer(REG_AESKEY1 | 0x80);
   d8464:	20be      	movs	r0, #190	; 0xbe
   d8466:	f7ff fe15 	bl	d8094 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d846a:	1e6e      	subs	r6, r5, #1
   d846c:	f105 070f 	add.w	r7, r5, #15
    for (byte i = 0; i<16; i++)
      SPI1.transfer(key[i]);
   d8470:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   d8474:	f7ff fe0e 	bl	d8094 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  setMode(RF69_MODE_STANDBY);
  if (key!=0)
  {
    select();
    SPI1.transfer(REG_AESKEY1 | 0x80);
    for (byte i = 0; i<16; i++)
   d8478:	42be      	cmp	r6, r7
   d847a:	d1f9      	bne.n	d8470 <_ZN5RFM697encryptEPKc+0x20>
      SPI1.transfer(key[i]);
    unselect();
   d847c:	4620      	mov	r0, r4
   d847e:	f7ff fde9 	bl	d8054 <_ZN5RFM698unselectEv>
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
   d8482:	213d      	movs	r1, #61	; 0x3d
   d8484:	4620      	mov	r0, r4
   d8486:	f7ff fe27 	bl	d80d8 <_ZN5RFM697readRegEh>
   d848a:	f020 0001 	bic.w	r0, r0, #1
   d848e:	2d00      	cmp	r5, #0
   d8490:	bf0c      	ite	eq
   d8492:	4602      	moveq	r2, r0
   d8494:	f040 0201 	orrne.w	r2, r0, #1
   d8498:	b2d2      	uxtb	r2, r2
   d849a:	4620      	mov	r0, r4
   d849c:	213d      	movs	r1, #61	; 0x3d
}
   d849e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    SPI1.transfer(REG_AESKEY1 | 0x80);
    for (byte i = 0; i<16; i++)
      SPI1.transfer(key[i]);
    unselect();
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
   d84a2:	f7ff be2b 	b.w	d80fc <_ZN5RFM698writeRegEhh>
	...

000d84a8 <_ZN5RFM6910initializeEhhh>:
volatile byte RFM69::ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
volatile int RFM69::RSSI; //most accurate RSSI during reception (closest to the reception)
RFM69* RFM69::selfPointer;

bool RFM69::initialize(byte freqBand, byte nodeID, byte networkID)
{
   d84a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d84aa:	b08f      	sub	sp, #60	; 0x3c
   d84ac:	460d      	mov	r5, r1
   d84ae:	4604      	mov	r4, r0
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d84b0:	2100      	movs	r1, #0
volatile byte RFM69::ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
volatile int RFM69::RSSI; //most accurate RSSI during reception (closest to the reception)
RFM69* RFM69::selfPointer;

bool RFM69::initialize(byte freqBand, byte nodeID, byte networkID)
{
   d84b2:	4616      	mov	r6, r2
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d84b4:	a803      	add	r0, sp, #12
   d84b6:	222a      	movs	r2, #42	; 0x2a
volatile byte RFM69::ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
volatile int RFM69::RSSI; //most accurate RSSI during reception (closest to the reception)
RFM69* RFM69::selfPointer;

bool RFM69::initialize(byte freqBand, byte nodeID, byte networkID)
{
   d84b8:	461f      	mov	r7, r3
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d84ba:	f003 fb27 	bl	dbb0c <memset>
   d84be:	2301      	movs	r3, #1
   d84c0:	f88d 300c 	strb.w	r3, [sp, #12]
   d84c4:	2303      	movs	r3, #3
   d84c6:	f88d 3010 	strb.w	r3, [sp, #16]
   d84ca:	f88d 3015 	strb.w	r3, [sp, #21]
   d84ce:	2306      	movs	r3, #6
   d84d0:	f88d 3016 	strb.w	r3, [sp, #22]
   d84d4:	2333      	movs	r3, #51	; 0x33
   d84d6:	f88d 3017 	strb.w	r3, [sp, #23]
   d84da:	2307      	movs	r3, #7
   d84dc:	f88d 3018 	strb.w	r3, [sp, #24]
   d84e0:	2308      	movs	r3, #8
   d84e2:	f88d 301a 	strb.w	r3, [sp, #26]
   d84e6:	2309      	movs	r3, #9
   d84e8:	f88d 301c 	strb.w	r3, [sp, #28]
   d84ec:	2319      	movs	r3, #25
   d84ee:	f88d 301e 	strb.w	r3, [sp, #30]
   d84f2:	2325      	movs	r3, #37	; 0x25
   d84f4:	f88d 3020 	strb.w	r3, [sp, #32]
   d84f8:	2329      	movs	r3, #41	; 0x29
   d84fa:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   d84fe:	23dc      	movs	r3, #220	; 0xdc
   d8500:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   d8504:	232e      	movs	r3, #46	; 0x2e
   d8506:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d850a:	2388      	movs	r3, #136	; 0x88
   d850c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   d8510:	232f      	movs	r3, #47	; 0x2f
   d8512:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   d8516:	232d      	movs	r3, #45	; 0x2d
   d8518:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   d851c:	2337      	movs	r3, #55	; 0x37
   d851e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   d8522:	2390      	movs	r3, #144	; 0x90
   d8524:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d8528:	2338      	movs	r3, #56	; 0x38
   d852a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   d852e:	233c      	movs	r3, #60	; 0x3c
   d8530:	2204      	movs	r2, #4
   d8532:	2102      	movs	r1, #2
   d8534:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
   d8538:	238f      	movs	r3, #143	; 0x8f
   d853a:	f88d 200d 	strb.w	r2, [sp, #13]
   d853e:	f88d 100e 	strb.w	r1, [sp, #14]
   d8542:	f88d 1011 	strb.w	r1, [sp, #17]
   d8546:	f88d 2012 	strb.w	r2, [sp, #18]
   d854a:	2105      	movs	r1, #5
   d854c:	2240      	movs	r2, #64	; 0x40
   d854e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   d8552:	233d      	movs	r3, #61	; 0x3d
   d8554:	f88d 2013 	strb.w	r2, [sp, #19]
   d8558:	f88d 1014 	strb.w	r1, [sp, #20]
   d855c:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
   d8560:	2142      	movs	r1, #66	; 0x42
   d8562:	2230      	movs	r2, #48	; 0x30
   d8564:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   d8568:	2312      	movs	r3, #18
   d856a:	f88d 101f 	strb.w	r1, [sp, #31]
   d856e:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   d8572:	f88d 102d 	strb.w	r1, [sp, #45]	; 0x2d
   d8576:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   d857a:	236f      	movs	r3, #111	; 0x6f
   d857c:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   d8580:	2d1f      	cmp	r5, #31
   d8582:	f04f 03ff 	mov.w	r3, #255	; 0xff
   d8586:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   d858a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   d858e:	d006      	beq.n	d859e <_ZN5RFM6910initializeEhhh+0xf6>
   d8590:	2d2b      	cmp	r5, #43	; 0x2b
   d8592:	d006      	beq.n	d85a2 <_ZN5RFM6910initializeEhhh+0xfa>
   d8594:	2d56      	cmp	r5, #86	; 0x56
   d8596:	bf0c      	ite	eq
   d8598:	22d9      	moveq	r2, #217	; 0xd9
   d859a:	22e4      	movne	r2, #228	; 0xe4
   d859c:	e002      	b.n	d85a4 <_ZN5RFM6910initializeEhhh+0xfc>
   d859e:	224e      	movs	r2, #78	; 0x4e
   d85a0:	e000      	b.n	d85a4 <_ZN5RFM6910initializeEhhh+0xfc>
   d85a2:	226c      	movs	r2, #108	; 0x6c
   d85a4:	2d1f      	cmp	r5, #31
   d85a6:	f88d 2019 	strb.w	r2, [sp, #25]
   d85aa:	d006      	beq.n	d85ba <_ZN5RFM6910initializeEhhh+0x112>
   d85ac:	2d2b      	cmp	r5, #43	; 0x2b
   d85ae:	d006      	beq.n	d85be <_ZN5RFM6910initializeEhhh+0x116>
   d85b0:	2d56      	cmp	r5, #86	; 0x56
   d85b2:	bf14      	ite	ne
   d85b4:	22c0      	movne	r2, #192	; 0xc0
   d85b6:	2200      	moveq	r2, #0
   d85b8:	e002      	b.n	d85c0 <_ZN5RFM6910initializeEhhh+0x118>
   d85ba:	22c0      	movs	r2, #192	; 0xc0
   d85bc:	e000      	b.n	d85c0 <_ZN5RFM6910initializeEhhh+0x118>
   d85be:	2240      	movs	r2, #64	; 0x40

  pinMode(_slaveSelectPin, OUTPUT);
   d85c0:	2101      	movs	r1, #1
   d85c2:	7920      	ldrb	r0, [r4, #4]
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d85c4:	f88d 201b 	strb.w	r2, [sp, #27]
   d85c8:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29

  pinMode(_slaveSelectPin, OUTPUT);
   d85cc:	f002 fa06 	bl	da9dc <pinMode>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d85d0:	f7ff fd4a 	bl	d8068 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d85d4:	f000 fc6e 	bl	d8eb4 <_ZN8SPIClass5beginEv>
   d85d8:	f000 f952 	bl	d8880 <HAL_Timer_Get_Milli_Seconds>
   d85dc:	4605      	mov	r5, r0
  // Set time out to 50ms
  #define TIME_OUT 50
  
  start_to = millis() ;

  do writeReg(REG_SYNCVALUE1, 0xaa); while (readReg(REG_SYNCVALUE1) != 0xaa && millis()-start_to < TIME_OUT);
   d85de:	22aa      	movs	r2, #170	; 0xaa
   d85e0:	212f      	movs	r1, #47	; 0x2f
   d85e2:	4620      	mov	r0, r4
   d85e4:	f7ff fd8a 	bl	d80fc <_ZN5RFM698writeRegEhh>
   d85e8:	212f      	movs	r1, #47	; 0x2f
   d85ea:	4620      	mov	r0, r4
   d85ec:	f7ff fd74 	bl	d80d8 <_ZN5RFM697readRegEh>
   d85f0:	28aa      	cmp	r0, #170	; 0xaa
   d85f2:	d004      	beq.n	d85fe <_ZN5RFM6910initializeEhhh+0x156>
   d85f4:	f000 f944 	bl	d8880 <HAL_Timer_Get_Milli_Seconds>
   d85f8:	1b40      	subs	r0, r0, r5
   d85fa:	2831      	cmp	r0, #49	; 0x31
   d85fc:	d9ef      	bls.n	d85de <_ZN5RFM6910initializeEhhh+0x136>
   d85fe:	f000 f93f 	bl	d8880 <HAL_Timer_Get_Milli_Seconds>
  if (millis()-start_to >= TIME_OUT) return (false);
   d8602:	1b40      	subs	r0, r0, r5
   d8604:	2831      	cmp	r0, #49	; 0x31
   d8606:	d82d      	bhi.n	d8664 <_ZN5RFM6910initializeEhhh+0x1bc>
   d8608:	f000 f93a 	bl	d8880 <HAL_Timer_Get_Milli_Seconds>
   d860c:	4605      	mov	r5, r0
    
  // Set time out 
  start_to = millis()  ;  
	do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis()-start_to < TIME_OUT);
   d860e:	2255      	movs	r2, #85	; 0x55
   d8610:	212f      	movs	r1, #47	; 0x2f
   d8612:	4620      	mov	r0, r4
   d8614:	f7ff fd72 	bl	d80fc <_ZN5RFM698writeRegEhh>
   d8618:	212f      	movs	r1, #47	; 0x2f
   d861a:	4620      	mov	r0, r4
   d861c:	f7ff fd5c 	bl	d80d8 <_ZN5RFM697readRegEh>
   d8620:	2855      	cmp	r0, #85	; 0x55
   d8622:	d021      	beq.n	d8668 <_ZN5RFM6910initializeEhhh+0x1c0>
   d8624:	f000 f92c 	bl	d8880 <HAL_Timer_Get_Milli_Seconds>
   d8628:	1b40      	subs	r0, r0, r5
   d862a:	2831      	cmp	r0, #49	; 0x31
   d862c:	d9ef      	bls.n	d860e <_ZN5RFM6910initializeEhhh+0x166>
   d862e:	e01b      	b.n	d8668 <_ZN5RFM6910initializeEhhh+0x1c0>
  for (byte i = 0; CONFIG[i][0] != 255; i++)
    writeReg(CONFIG[i][0], CONFIG[i][1]);

  // Encryption is persistent between resets and can trip you up during debugging.
  // Disable it during initialization so we always start from a known state.
  encrypt(0);
   d8630:	2100      	movs	r1, #0
   d8632:	4620      	mov	r0, r4
   d8634:	f7ff ff0c 	bl	d8450 <_ZN5RFM697encryptEPKc>

  setHighPower(_isRFM69HW); //called regardless if it's a RFM69W or RFM69HW
   d8638:	7aa1      	ldrb	r1, [r4, #10]
   d863a:	4620      	mov	r0, r4
   d863c:	f7ff fe5a 	bl	d82f4 <_ZN5RFM6912setHighPowerEb>
  setMode(RF69_MODE_STANDBY);
   d8640:	2101      	movs	r1, #1
   d8642:	4620      	mov	r0, r4
   d8644:	f7ff fda8 	bl	d8198 <_ZN5RFM697setModeEh>
   d8648:	f000 f91a 	bl	d8880 <HAL_Timer_Get_Milli_Seconds>
   d864c:	4605      	mov	r5, r0
  // Set time out 
  start_to = millis() ;
	while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis()-start_to < TIME_OUT); // Wait for ModeReady
   d864e:	2127      	movs	r1, #39	; 0x27
   d8650:	4620      	mov	r0, r4
   d8652:	f7ff fd41 	bl	d80d8 <_ZN5RFM697readRegEh>
   d8656:	0603      	lsls	r3, r0, #24
   d8658:	d51b      	bpl.n	d8692 <_ZN5RFM6910initializeEhhh+0x1ea>
   d865a:	f000 f911 	bl	d8880 <HAL_Timer_Get_Milli_Seconds>
  if (millis()-start_to >= TIME_OUT) return (false);
   d865e:	1b40      	subs	r0, r0, r5
   d8660:	2831      	cmp	r0, #49	; 0x31
   d8662:	d91c      	bls.n	d869e <_ZN5RFM6910initializeEhhh+0x1f6>
  // picking a non-interrupt enabled pin will prevent proper initialization
  // code thanks to @ScruffR - https://community.particle.io/t/how-to-make-rfm69-work-on-photon-solved-new-library-rfm69-particle/26497/93?u=bloukingfisher
  if (!attachInterrupt(_interruptNum, RFM69::isr0, RISING)) return false;
   d8664:	2000      	movs	r0, #0
   d8666:	e028      	b.n	d86ba <_ZN5RFM6910initializeEhhh+0x212>
   d8668:	f000 f90a 	bl	d8880 <HAL_Timer_Get_Milli_Seconds>
  if (millis()-start_to >= TIME_OUT) return (false);
    
  // Set time out 
  start_to = millis()  ;  
	do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis()-start_to < TIME_OUT);
  if (millis()-start_to >= TIME_OUT) return (false);
   d866c:	1b40      	subs	r0, r0, r5
   d866e:	2831      	cmp	r0, #49	; 0x31
   d8670:	d8f8      	bhi.n	d8664 <_ZN5RFM6910initializeEhhh+0x1bc>
   d8672:	2500      	movs	r5, #0
  for (byte i = 0; CONFIG[i][0] != 255; i++)
   d8674:	b2eb      	uxtb	r3, r5
   d8676:	aa0e      	add	r2, sp, #56	; 0x38
   d8678:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d867c:	3501      	adds	r5, #1
   d867e:	f813 1c2c 	ldrb.w	r1, [r3, #-44]
   d8682:	29ff      	cmp	r1, #255	; 0xff
   d8684:	d0d4      	beq.n	d8630 <_ZN5RFM6910initializeEhhh+0x188>
    writeReg(CONFIG[i][0], CONFIG[i][1]);
   d8686:	f813 2c2b 	ldrb.w	r2, [r3, #-43]
   d868a:	4620      	mov	r0, r4
   d868c:	f7ff fd36 	bl	d80fc <_ZN5RFM698writeRegEhh>
    
  // Set time out 
  start_to = millis()  ;  
	do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis()-start_to < TIME_OUT);
  if (millis()-start_to >= TIME_OUT) return (false);
  for (byte i = 0; CONFIG[i][0] != 255; i++)
   d8690:	e7f0      	b.n	d8674 <_ZN5RFM6910initializeEhhh+0x1cc>
   d8692:	f000 f8f5 	bl	d8880 <HAL_Timer_Get_Milli_Seconds>

  setHighPower(_isRFM69HW); //called regardless if it's a RFM69W or RFM69HW
  setMode(RF69_MODE_STANDBY);
  // Set time out 
  start_to = millis() ;
	while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis()-start_to < TIME_OUT); // Wait for ModeReady
   d8696:	1b40      	subs	r0, r0, r5
   d8698:	2831      	cmp	r0, #49	; 0x31
   d869a:	d9d8      	bls.n	d864e <_ZN5RFM6910initializeEhhh+0x1a6>
   d869c:	e7dd      	b.n	d865a <_ZN5RFM6910initializeEhhh+0x1b2>
  if (millis()-start_to >= TIME_OUT) return (false);
  // picking a non-interrupt enabled pin will prevent proper initialization
  // code thanks to @ScruffR - https://community.particle.io/t/how-to-make-rfm69-work-on-photon-solved-new-library-rfm69-particle/26497/93?u=bloukingfisher
  if (!attachInterrupt(_interruptNum, RFM69::isr0, RISING)) return false;
   d869e:	2300      	movs	r3, #0
   d86a0:	9300      	str	r3, [sp, #0]
   d86a2:	79a0      	ldrb	r0, [r4, #6]
   d86a4:	4906      	ldr	r1, [pc, #24]	; (d86c0 <_ZN5RFM6910initializeEhhh+0x218>)
   d86a6:	f04f 33ff 	mov.w	r3, #4294967295
   d86aa:	2201      	movs	r2, #1
   d86ac:	f001 fb96 	bl	d9ddc <_Z15attachInterrupttPFvvE13InterruptModeah>
   d86b0:	2800      	cmp	r0, #0
   d86b2:	d0d7      	beq.n	d8664 <_ZN5RFM6910initializeEhhh+0x1bc>

  selfPointer = this;
   d86b4:	4b03      	ldr	r3, [pc, #12]	; (d86c4 <_ZN5RFM6910initializeEhhh+0x21c>)
  _address = nodeID;
   d86b6:	71e6      	strb	r6, [r4, #7]
  if (millis()-start_to >= TIME_OUT) return (false);
  // picking a non-interrupt enabled pin will prevent proper initialization
  // code thanks to @ScruffR - https://community.particle.io/t/how-to-make-rfm69-work-on-photon-solved-new-library-rfm69-particle/26497/93?u=bloukingfisher
  if (!attachInterrupt(_interruptNum, RFM69::isr0, RISING)) return false;

  selfPointer = this;
   d86b8:	601c      	str	r4, [r3, #0]
  _address = nodeID;
  return true;
}
   d86ba:	b00f      	add	sp, #60	; 0x3c
   d86bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d86be:	bf00      	nop
   d86c0:	000d8045 	.word	0x000d8045
   d86c4:	2003df3c 	.word	0x2003df3c

000d86c8 <_GLOBAL__sub_I__ZN5RFM694DATAE>:
   d86c8:	f000 b812 	b.w	d86f0 <HAL_Pin_Map>

000d86cc <_GLOBAL__sub_I__ZN9RFM69_ATC18ACK_RSSI_REQUESTEDE>:
   d86cc:	f000 b810 	b.w	d86f0 <HAL_Pin_Map>

000d86d0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d86d0:	b508      	push	{r3, lr}
   d86d2:	4b02      	ldr	r3, [pc, #8]	; (d86dc <netdb_freeaddrinfo+0xc>)
   d86d4:	681b      	ldr	r3, [r3, #0]
   d86d6:	689b      	ldr	r3, [r3, #8]
   d86d8:	9301      	str	r3, [sp, #4]
   d86da:	bd08      	pop	{r3, pc}
   d86dc:	00030268 	.word	0x00030268

000d86e0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d86e0:	b508      	push	{r3, lr}
   d86e2:	4b02      	ldr	r3, [pc, #8]	; (d86ec <netdb_getaddrinfo+0xc>)
   d86e4:	681b      	ldr	r3, [r3, #0]
   d86e6:	68db      	ldr	r3, [r3, #12]
   d86e8:	9301      	str	r3, [sp, #4]
   d86ea:	bd08      	pop	{r3, pc}
   d86ec:	00030268 	.word	0x00030268

000d86f0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d86f0:	b508      	push	{r3, lr}
   d86f2:	4b02      	ldr	r3, [pc, #8]	; (d86fc <HAL_Pin_Map+0xc>)
   d86f4:	681b      	ldr	r3, [r3, #0]
   d86f6:	681b      	ldr	r3, [r3, #0]
   d86f8:	9301      	str	r3, [sp, #4]
   d86fa:	bd08      	pop	{r3, pc}
   d86fc:	0003022c 	.word	0x0003022c

000d8700 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d8700:	b508      	push	{r3, lr}
   d8702:	4b02      	ldr	r3, [pc, #8]	; (d870c <HAL_Pin_Mode+0xc>)
   d8704:	681b      	ldr	r3, [r3, #0]
   d8706:	689b      	ldr	r3, [r3, #8]
   d8708:	9301      	str	r3, [sp, #4]
   d870a:	bd08      	pop	{r3, pc}
   d870c:	0003022c 	.word	0x0003022c

000d8710 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d8710:	b508      	push	{r3, lr}
   d8712:	4b02      	ldr	r3, [pc, #8]	; (d871c <HAL_Get_Pin_Mode+0xc>)
   d8714:	681b      	ldr	r3, [r3, #0]
   d8716:	68db      	ldr	r3, [r3, #12]
   d8718:	9301      	str	r3, [sp, #4]
   d871a:	bd08      	pop	{r3, pc}
   d871c:	0003022c 	.word	0x0003022c

000d8720 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d8720:	b508      	push	{r3, lr}
   d8722:	4b02      	ldr	r3, [pc, #8]	; (d872c <HAL_GPIO_Write+0xc>)
   d8724:	681b      	ldr	r3, [r3, #0]
   d8726:	691b      	ldr	r3, [r3, #16]
   d8728:	9301      	str	r3, [sp, #4]
   d872a:	bd08      	pop	{r3, pc}
   d872c:	0003022c 	.word	0x0003022c

000d8730 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d8730:	b508      	push	{r3, lr}
   d8732:	4b02      	ldr	r3, [pc, #8]	; (d873c <HAL_GPIO_Read+0xc>)
   d8734:	681b      	ldr	r3, [r3, #0]
   d8736:	695b      	ldr	r3, [r3, #20]
   d8738:	9301      	str	r3, [sp, #4]
   d873a:	bd08      	pop	{r3, pc}
   d873c:	0003022c 	.word	0x0003022c

000d8740 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d8740:	b508      	push	{r3, lr}
   d8742:	4b02      	ldr	r3, [pc, #8]	; (d874c <HAL_Interrupts_Attach+0xc>)
   d8744:	681b      	ldr	r3, [r3, #0]
   d8746:	699b      	ldr	r3, [r3, #24]
   d8748:	9301      	str	r3, [sp, #4]
   d874a:	bd08      	pop	{r3, pc}
   d874c:	0003022c 	.word	0x0003022c

000d8750 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d8750:	b508      	push	{r3, lr}
   d8752:	4b02      	ldr	r3, [pc, #8]	; (d875c <HAL_Interrupts_Detach+0xc>)
   d8754:	681b      	ldr	r3, [r3, #0]
   d8756:	69db      	ldr	r3, [r3, #28]
   d8758:	9301      	str	r3, [sp, #4]
   d875a:	bd08      	pop	{r3, pc}
   d875c:	0003022c 	.word	0x0003022c

000d8760 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d8760:	b508      	push	{r3, lr}
   d8762:	4b02      	ldr	r3, [pc, #8]	; (d876c <HAL_Interrupts_Enable_All+0xc>)
   d8764:	681b      	ldr	r3, [r3, #0]
   d8766:	6a1b      	ldr	r3, [r3, #32]
   d8768:	9301      	str	r3, [sp, #4]
   d876a:	bd08      	pop	{r3, pc}
   d876c:	0003022c 	.word	0x0003022c

000d8770 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d8770:	b508      	push	{r3, lr}
   d8772:	4b02      	ldr	r3, [pc, #8]	; (d877c <HAL_Interrupts_Disable_All+0xc>)
   d8774:	681b      	ldr	r3, [r3, #0]
   d8776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8778:	9301      	str	r3, [sp, #4]
   d877a:	bd08      	pop	{r3, pc}
   d877c:	0003022c 	.word	0x0003022c

000d8780 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d8780:	b508      	push	{r3, lr}
   d8782:	4b02      	ldr	r3, [pc, #8]	; (d878c <HAL_SPI_Begin+0xc>)
   d8784:	681b      	ldr	r3, [r3, #0]
   d8786:	681b      	ldr	r3, [r3, #0]
   d8788:	9301      	str	r3, [sp, #4]
   d878a:	bd08      	pop	{r3, pc}
   d878c:	00030230 	.word	0x00030230

000d8790 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d8790:	b508      	push	{r3, lr}
   d8792:	4b02      	ldr	r3, [pc, #8]	; (d879c <HAL_SPI_Set_Bit_Order+0xc>)
   d8794:	681b      	ldr	r3, [r3, #0]
   d8796:	689b      	ldr	r3, [r3, #8]
   d8798:	9301      	str	r3, [sp, #4]
   d879a:	bd08      	pop	{r3, pc}
   d879c:	00030230 	.word	0x00030230

000d87a0 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d87a0:	b508      	push	{r3, lr}
   d87a2:	4b02      	ldr	r3, [pc, #8]	; (d87ac <HAL_SPI_Set_Data_Mode+0xc>)
   d87a4:	681b      	ldr	r3, [r3, #0]
   d87a6:	68db      	ldr	r3, [r3, #12]
   d87a8:	9301      	str	r3, [sp, #4]
   d87aa:	bd08      	pop	{r3, pc}
   d87ac:	00030230 	.word	0x00030230

000d87b0 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d87b0:	b508      	push	{r3, lr}
   d87b2:	4b02      	ldr	r3, [pc, #8]	; (d87bc <HAL_SPI_Set_Clock_Divider+0xc>)
   d87b4:	681b      	ldr	r3, [r3, #0]
   d87b6:	691b      	ldr	r3, [r3, #16]
   d87b8:	9301      	str	r3, [sp, #4]
   d87ba:	bd08      	pop	{r3, pc}
   d87bc:	00030230 	.word	0x00030230

000d87c0 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d87c0:	b508      	push	{r3, lr}
   d87c2:	4b02      	ldr	r3, [pc, #8]	; (d87cc <HAL_SPI_Send_Receive_Data+0xc>)
   d87c4:	681b      	ldr	r3, [r3, #0]
   d87c6:	695b      	ldr	r3, [r3, #20]
   d87c8:	9301      	str	r3, [sp, #4]
   d87ca:	bd08      	pop	{r3, pc}
   d87cc:	00030230 	.word	0x00030230

000d87d0 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d87d0:	b508      	push	{r3, lr}
   d87d2:	4b02      	ldr	r3, [pc, #8]	; (d87dc <HAL_SPI_Init+0xc>)
   d87d4:	681b      	ldr	r3, [r3, #0]
   d87d6:	69db      	ldr	r3, [r3, #28]
   d87d8:	9301      	str	r3, [sp, #4]
   d87da:	bd08      	pop	{r3, pc}
   d87dc:	00030230 	.word	0x00030230

000d87e0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d87e0:	b508      	push	{r3, lr}
   d87e2:	4b02      	ldr	r3, [pc, #8]	; (d87ec <HAL_SPI_Is_Enabled+0xc>)
   d87e4:	681b      	ldr	r3, [r3, #0]
   d87e6:	6a1b      	ldr	r3, [r3, #32]
   d87e8:	9301      	str	r3, [sp, #4]
   d87ea:	bd08      	pop	{r3, pc}
   d87ec:	00030230 	.word	0x00030230

000d87f0 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d87f0:	b508      	push	{r3, lr}
   d87f2:	4b02      	ldr	r3, [pc, #8]	; (d87fc <HAL_SPI_Info+0xc>)
   d87f4:	681b      	ldr	r3, [r3, #0]
   d87f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d87f8:	9301      	str	r3, [sp, #4]
   d87fa:	bd08      	pop	{r3, pc}
   d87fc:	00030230 	.word	0x00030230

000d8800 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d8800:	b508      	push	{r3, lr}
   d8802:	4b02      	ldr	r3, [pc, #8]	; (d880c <HAL_SPI_DMA_Transfer+0xc>)
   d8804:	681b      	ldr	r3, [r3, #0]
   d8806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8808:	9301      	str	r3, [sp, #4]
   d880a:	bd08      	pop	{r3, pc}
   d880c:	00030230 	.word	0x00030230

000d8810 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d8810:	b508      	push	{r3, lr}
   d8812:	4b02      	ldr	r3, [pc, #8]	; (d881c <HAL_SPI_DMA_Transfer_Status+0xc>)
   d8814:	681b      	ldr	r3, [r3, #0]
   d8816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d8818:	9301      	str	r3, [sp, #4]
   d881a:	bd08      	pop	{r3, pc}
   d881c:	00030230 	.word	0x00030230

000d8820 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d8820:	b508      	push	{r3, lr}
   d8822:	4b02      	ldr	r3, [pc, #8]	; (d882c <HAL_SPI_Set_Settings+0xc>)
   d8824:	681b      	ldr	r3, [r3, #0]
   d8826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8828:	9301      	str	r3, [sp, #4]
   d882a:	bd08      	pop	{r3, pc}
   d882c:	00030230 	.word	0x00030230

000d8830 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d8830:	b508      	push	{r3, lr}
   d8832:	4b02      	ldr	r3, [pc, #8]	; (d883c <HAL_SPI_Acquire+0xc>)
   d8834:	681b      	ldr	r3, [r3, #0]
   d8836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8838:	9301      	str	r3, [sp, #4]
   d883a:	bd08      	pop	{r3, pc}
   d883c:	00030230 	.word	0x00030230

000d8840 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d8840:	b508      	push	{r3, lr}
   d8842:	4b02      	ldr	r3, [pc, #8]	; (d884c <HAL_SPI_Release+0xc>)
   d8844:	681b      	ldr	r3, [r3, #0]
   d8846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8848:	9301      	str	r3, [sp, #4]
   d884a:	bd08      	pop	{r3, pc}
   d884c:	00030230 	.word	0x00030230

000d8850 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d8850:	b508      	push	{r3, lr}
   d8852:	4b02      	ldr	r3, [pc, #8]	; (d885c <if_index_to_name+0xc>)
   d8854:	681b      	ldr	r3, [r3, #0]
   d8856:	695b      	ldr	r3, [r3, #20]
   d8858:	9301      	str	r3, [sp, #4]
   d885a:	bd08      	pop	{r3, pc}
   d885c:	0003026c 	.word	0x0003026c

000d8860 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d8860:	b508      	push	{r3, lr}
   d8862:	4b02      	ldr	r3, [pc, #8]	; (d886c <HAL_RNG_GetRandomNumber+0xc>)
   d8864:	681b      	ldr	r3, [r3, #0]
   d8866:	685b      	ldr	r3, [r3, #4]
   d8868:	9301      	str	r3, [sp, #4]
   d886a:	bd08      	pop	{r3, pc}
   d886c:	00030218 	.word	0x00030218

000d8870 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d8870:	b508      	push	{r3, lr}
   d8872:	4b02      	ldr	r3, [pc, #8]	; (d887c <HAL_Timer_Get_Micro_Seconds+0xc>)
   d8874:	681b      	ldr	r3, [r3, #0]
   d8876:	691b      	ldr	r3, [r3, #16]
   d8878:	9301      	str	r3, [sp, #4]
   d887a:	bd08      	pop	{r3, pc}
   d887c:	00030218 	.word	0x00030218

000d8880 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d8880:	b508      	push	{r3, lr}
   d8882:	4b02      	ldr	r3, [pc, #8]	; (d888c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d8884:	681b      	ldr	r3, [r3, #0]
   d8886:	695b      	ldr	r3, [r3, #20]
   d8888:	9301      	str	r3, [sp, #4]
   d888a:	bd08      	pop	{r3, pc}
   d888c:	00030218 	.word	0x00030218

000d8890 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d8890:	b508      	push	{r3, lr}
   d8892:	4b02      	ldr	r3, [pc, #8]	; (d889c <HAL_RTC_Get_UnixTime+0xc>)
   d8894:	681b      	ldr	r3, [r3, #0]
   d8896:	69db      	ldr	r3, [r3, #28]
   d8898:	9301      	str	r3, [sp, #4]
   d889a:	bd08      	pop	{r3, pc}
   d889c:	00030218 	.word	0x00030218

000d88a0 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d88a0:	b508      	push	{r3, lr}
   d88a2:	4b02      	ldr	r3, [pc, #8]	; (d88ac <HAL_EEPROM_Init+0xc>)
   d88a4:	681b      	ldr	r3, [r3, #0]
   d88a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d88a8:	9301      	str	r3, [sp, #4]
   d88aa:	bd08      	pop	{r3, pc}
   d88ac:	00030218 	.word	0x00030218

000d88b0 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d88b0:	b508      	push	{r3, lr}
   d88b2:	4b02      	ldr	r3, [pc, #8]	; (d88bc <HAL_EEPROM_Get+0xc>)
   d88b4:	681b      	ldr	r3, [r3, #0]
   d88b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d88b8:	9301      	str	r3, [sp, #4]
   d88ba:	bd08      	pop	{r3, pc}
   d88bc:	00030218 	.word	0x00030218

000d88c0 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d88c0:	b508      	push	{r3, lr}
   d88c2:	4b02      	ldr	r3, [pc, #8]	; (d88cc <HAL_EEPROM_Put+0xc>)
   d88c4:	681b      	ldr	r3, [r3, #0]
   d88c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d88c8:	9301      	str	r3, [sp, #4]
   d88ca:	bd08      	pop	{r3, pc}
   d88cc:	00030218 	.word	0x00030218

000d88d0 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d88d0:	b508      	push	{r3, lr}
   d88d2:	4b02      	ldr	r3, [pc, #8]	; (d88dc <HAL_RTC_Time_Is_Valid+0xc>)
   d88d4:	681b      	ldr	r3, [r3, #0]
   d88d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d88d8:	9301      	str	r3, [sp, #4]
   d88da:	bd08      	pop	{r3, pc}
   d88dc:	00030218 	.word	0x00030218

000d88e0 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d88e0:	b508      	push	{r3, lr}
   d88e2:	4b02      	ldr	r3, [pc, #8]	; (d88ec <os_thread_is_current+0xc>)
   d88e4:	681b      	ldr	r3, [r3, #0]
   d88e6:	689b      	ldr	r3, [r3, #8]
   d88e8:	9301      	str	r3, [sp, #4]
   d88ea:	bd08      	pop	{r3, pc}
   d88ec:	00030248 	.word	0x00030248

000d88f0 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d88f0:	b508      	push	{r3, lr}
   d88f2:	4b02      	ldr	r3, [pc, #8]	; (d88fc <os_thread_yield+0xc>)
   d88f4:	681b      	ldr	r3, [r3, #0]
   d88f6:	68db      	ldr	r3, [r3, #12]
   d88f8:	9301      	str	r3, [sp, #4]
   d88fa:	bd08      	pop	{r3, pc}
   d88fc:	00030248 	.word	0x00030248

000d8900 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d8900:	b508      	push	{r3, lr}
   d8902:	4b02      	ldr	r3, [pc, #8]	; (d890c <os_thread_join+0xc>)
   d8904:	681b      	ldr	r3, [r3, #0]
   d8906:	691b      	ldr	r3, [r3, #16]
   d8908:	9301      	str	r3, [sp, #4]
   d890a:	bd08      	pop	{r3, pc}
   d890c:	00030248 	.word	0x00030248

000d8910 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d8910:	b508      	push	{r3, lr}
   d8912:	4b02      	ldr	r3, [pc, #8]	; (d891c <os_thread_cleanup+0xc>)
   d8914:	681b      	ldr	r3, [r3, #0]
   d8916:	695b      	ldr	r3, [r3, #20]
   d8918:	9301      	str	r3, [sp, #4]
   d891a:	bd08      	pop	{r3, pc}
   d891c:	00030248 	.word	0x00030248

000d8920 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d8920:	b508      	push	{r3, lr}
   d8922:	4b02      	ldr	r3, [pc, #8]	; (d892c <os_thread_scheduling+0xc>)
   d8924:	681b      	ldr	r3, [r3, #0]
   d8926:	69db      	ldr	r3, [r3, #28]
   d8928:	9301      	str	r3, [sp, #4]
   d892a:	bd08      	pop	{r3, pc}
   d892c:	00030248 	.word	0x00030248

000d8930 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d8930:	b508      	push	{r3, lr}
   d8932:	4b02      	ldr	r3, [pc, #8]	; (d893c <os_timer_create+0xc>)
   d8934:	681b      	ldr	r3, [r3, #0]
   d8936:	6a1b      	ldr	r3, [r3, #32]
   d8938:	9301      	str	r3, [sp, #4]
   d893a:	bd08      	pop	{r3, pc}
   d893c:	00030248 	.word	0x00030248

000d8940 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d8940:	b508      	push	{r3, lr}
   d8942:	4b02      	ldr	r3, [pc, #8]	; (d894c <os_timer_destroy+0xc>)
   d8944:	681b      	ldr	r3, [r3, #0]
   d8946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8948:	9301      	str	r3, [sp, #4]
   d894a:	bd08      	pop	{r3, pc}
   d894c:	00030248 	.word	0x00030248

000d8950 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d8950:	b508      	push	{r3, lr}
   d8952:	4b02      	ldr	r3, [pc, #8]	; (d895c <os_timer_get_id+0xc>)
   d8954:	681b      	ldr	r3, [r3, #0]
   d8956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8958:	9301      	str	r3, [sp, #4]
   d895a:	bd08      	pop	{r3, pc}
   d895c:	00030248 	.word	0x00030248

000d8960 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d8960:	b508      	push	{r3, lr}
   d8962:	4b02      	ldr	r3, [pc, #8]	; (d896c <os_timer_change+0xc>)
   d8964:	681b      	ldr	r3, [r3, #0]
   d8966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8968:	9301      	str	r3, [sp, #4]
   d896a:	bd08      	pop	{r3, pc}
   d896c:	00030248 	.word	0x00030248

000d8970 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d8970:	b508      	push	{r3, lr}
   d8972:	4b02      	ldr	r3, [pc, #8]	; (d897c <os_mutex_recursive_create+0xc>)
   d8974:	681b      	ldr	r3, [r3, #0]
   d8976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8978:	9301      	str	r3, [sp, #4]
   d897a:	bd08      	pop	{r3, pc}
   d897c:	00030248 	.word	0x00030248

000d8980 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d8980:	b508      	push	{r3, lr}
   d8982:	4b02      	ldr	r3, [pc, #8]	; (d898c <os_mutex_recursive_destroy+0xc>)
   d8984:	681b      	ldr	r3, [r3, #0]
   d8986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8988:	9301      	str	r3, [sp, #4]
   d898a:	bd08      	pop	{r3, pc}
   d898c:	00030248 	.word	0x00030248

000d8990 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d8990:	b508      	push	{r3, lr}
   d8992:	4b02      	ldr	r3, [pc, #8]	; (d899c <os_timer_set_id+0xc>)
   d8994:	681b      	ldr	r3, [r3, #0]
   d8996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d8998:	9301      	str	r3, [sp, #4]
   d899a:	bd08      	pop	{r3, pc}
   d899c:	00030248 	.word	0x00030248

000d89a0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d89a0:	b508      	push	{r3, lr}
   d89a2:	4b02      	ldr	r3, [pc, #8]	; (d89ac <inet_inet_ntop+0xc>)
   d89a4:	681b      	ldr	r3, [r3, #0]
   d89a6:	695b      	ldr	r3, [r3, #20]
   d89a8:	9301      	str	r3, [sp, #4]
   d89aa:	bd08      	pop	{r3, pc}
   d89ac:	00030264 	.word	0x00030264

000d89b0 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d89b0:	b508      	push	{r3, lr}
   d89b2:	4b02      	ldr	r3, [pc, #8]	; (d89bc <inet_htonl+0xc>)
   d89b4:	681b      	ldr	r3, [r3, #0]
   d89b6:	6a1b      	ldr	r3, [r3, #32]
   d89b8:	9301      	str	r3, [sp, #4]
   d89ba:	bd08      	pop	{r3, pc}
   d89bc:	00030264 	.word	0x00030264

000d89c0 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d89c0:	b508      	push	{r3, lr}
   d89c2:	4b02      	ldr	r3, [pc, #8]	; (d89cc <inet_htons+0xc>)
   d89c4:	681b      	ldr	r3, [r3, #0]
   d89c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d89c8:	9301      	str	r3, [sp, #4]
   d89ca:	bd08      	pop	{r3, pc}
   d89cc:	00030264 	.word	0x00030264

000d89d0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d89d0:	b508      	push	{r3, lr}
   d89d2:	4b02      	ldr	r3, [pc, #8]	; (d89dc <HAL_USART_Init+0xc>)
   d89d4:	681b      	ldr	r3, [r3, #0]
   d89d6:	681b      	ldr	r3, [r3, #0]
   d89d8:	9301      	str	r3, [sp, #4]
   d89da:	bd08      	pop	{r3, pc}
   d89dc:	0003023c 	.word	0x0003023c

000d89e0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d89e0:	b508      	push	{r3, lr}
   d89e2:	4b02      	ldr	r3, [pc, #8]	; (d89ec <HAL_USART_Write_Data+0xc>)
   d89e4:	681b      	ldr	r3, [r3, #0]
   d89e6:	68db      	ldr	r3, [r3, #12]
   d89e8:	9301      	str	r3, [sp, #4]
   d89ea:	bd08      	pop	{r3, pc}
   d89ec:	0003023c 	.word	0x0003023c

000d89f0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d89f0:	b508      	push	{r3, lr}
   d89f2:	4b02      	ldr	r3, [pc, #8]	; (d89fc <HAL_USART_Available_Data+0xc>)
   d89f4:	681b      	ldr	r3, [r3, #0]
   d89f6:	691b      	ldr	r3, [r3, #16]
   d89f8:	9301      	str	r3, [sp, #4]
   d89fa:	bd08      	pop	{r3, pc}
   d89fc:	0003023c 	.word	0x0003023c

000d8a00 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d8a00:	b508      	push	{r3, lr}
   d8a02:	4b02      	ldr	r3, [pc, #8]	; (d8a0c <HAL_USART_Read_Data+0xc>)
   d8a04:	681b      	ldr	r3, [r3, #0]
   d8a06:	695b      	ldr	r3, [r3, #20]
   d8a08:	9301      	str	r3, [sp, #4]
   d8a0a:	bd08      	pop	{r3, pc}
   d8a0c:	0003023c 	.word	0x0003023c

000d8a10 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d8a10:	b508      	push	{r3, lr}
   d8a12:	4b02      	ldr	r3, [pc, #8]	; (d8a1c <HAL_USART_Peek_Data+0xc>)
   d8a14:	681b      	ldr	r3, [r3, #0]
   d8a16:	699b      	ldr	r3, [r3, #24]
   d8a18:	9301      	str	r3, [sp, #4]
   d8a1a:	bd08      	pop	{r3, pc}
   d8a1c:	0003023c 	.word	0x0003023c

000d8a20 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d8a20:	b508      	push	{r3, lr}
   d8a22:	4b02      	ldr	r3, [pc, #8]	; (d8a2c <HAL_USART_Flush_Data+0xc>)
   d8a24:	681b      	ldr	r3, [r3, #0]
   d8a26:	69db      	ldr	r3, [r3, #28]
   d8a28:	9301      	str	r3, [sp, #4]
   d8a2a:	bd08      	pop	{r3, pc}
   d8a2c:	0003023c 	.word	0x0003023c

000d8a30 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d8a30:	b508      	push	{r3, lr}
   d8a32:	4b02      	ldr	r3, [pc, #8]	; (d8a3c <HAL_USART_Is_Enabled+0xc>)
   d8a34:	681b      	ldr	r3, [r3, #0]
   d8a36:	6a1b      	ldr	r3, [r3, #32]
   d8a38:	9301      	str	r3, [sp, #4]
   d8a3a:	bd08      	pop	{r3, pc}
   d8a3c:	0003023c 	.word	0x0003023c

000d8a40 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d8a40:	b508      	push	{r3, lr}
   d8a42:	4b02      	ldr	r3, [pc, #8]	; (d8a4c <HAL_USART_Available_Data_For_Write+0xc>)
   d8a44:	681b      	ldr	r3, [r3, #0]
   d8a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8a48:	9301      	str	r3, [sp, #4]
   d8a4a:	bd08      	pop	{r3, pc}
   d8a4c:	0003023c 	.word	0x0003023c

000d8a50 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d8a50:	b508      	push	{r3, lr}
   d8a52:	4b02      	ldr	r3, [pc, #8]	; (d8a5c <HAL_I2C_Begin_Transmission+0xc>)
   d8a54:	681b      	ldr	r3, [r3, #0]
   d8a56:	699b      	ldr	r3, [r3, #24]
   d8a58:	9301      	str	r3, [sp, #4]
   d8a5a:	bd08      	pop	{r3, pc}
   d8a5c:	00030228 	.word	0x00030228

000d8a60 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d8a60:	b508      	push	{r3, lr}
   d8a62:	4b02      	ldr	r3, [pc, #8]	; (d8a6c <HAL_I2C_End_Transmission+0xc>)
   d8a64:	681b      	ldr	r3, [r3, #0]
   d8a66:	69db      	ldr	r3, [r3, #28]
   d8a68:	9301      	str	r3, [sp, #4]
   d8a6a:	bd08      	pop	{r3, pc}
   d8a6c:	00030228 	.word	0x00030228

000d8a70 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d8a70:	b508      	push	{r3, lr}
   d8a72:	4b02      	ldr	r3, [pc, #8]	; (d8a7c <HAL_I2C_Write_Data+0xc>)
   d8a74:	681b      	ldr	r3, [r3, #0]
   d8a76:	6a1b      	ldr	r3, [r3, #32]
   d8a78:	9301      	str	r3, [sp, #4]
   d8a7a:	bd08      	pop	{r3, pc}
   d8a7c:	00030228 	.word	0x00030228

000d8a80 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d8a80:	b508      	push	{r3, lr}
   d8a82:	4b02      	ldr	r3, [pc, #8]	; (d8a8c <HAL_I2C_Available_Data+0xc>)
   d8a84:	681b      	ldr	r3, [r3, #0]
   d8a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8a88:	9301      	str	r3, [sp, #4]
   d8a8a:	bd08      	pop	{r3, pc}
   d8a8c:	00030228 	.word	0x00030228

000d8a90 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d8a90:	b508      	push	{r3, lr}
   d8a92:	4b02      	ldr	r3, [pc, #8]	; (d8a9c <HAL_I2C_Read_Data+0xc>)
   d8a94:	681b      	ldr	r3, [r3, #0]
   d8a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8a98:	9301      	str	r3, [sp, #4]
   d8a9a:	bd08      	pop	{r3, pc}
   d8a9c:	00030228 	.word	0x00030228

000d8aa0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d8aa0:	b508      	push	{r3, lr}
   d8aa2:	4b02      	ldr	r3, [pc, #8]	; (d8aac <HAL_I2C_Peek_Data+0xc>)
   d8aa4:	681b      	ldr	r3, [r3, #0]
   d8aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8aa8:	9301      	str	r3, [sp, #4]
   d8aaa:	bd08      	pop	{r3, pc}
   d8aac:	00030228 	.word	0x00030228

000d8ab0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d8ab0:	b508      	push	{r3, lr}
   d8ab2:	4b02      	ldr	r3, [pc, #8]	; (d8abc <HAL_I2C_Flush_Data+0xc>)
   d8ab4:	681b      	ldr	r3, [r3, #0]
   d8ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8ab8:	9301      	str	r3, [sp, #4]
   d8aba:	bd08      	pop	{r3, pc}
   d8abc:	00030228 	.word	0x00030228

000d8ac0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d8ac0:	b508      	push	{r3, lr}
   d8ac2:	4b02      	ldr	r3, [pc, #8]	; (d8acc <HAL_I2C_Is_Enabled+0xc>)
   d8ac4:	681b      	ldr	r3, [r3, #0]
   d8ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8ac8:	9301      	str	r3, [sp, #4]
   d8aca:	bd08      	pop	{r3, pc}
   d8acc:	00030228 	.word	0x00030228

000d8ad0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d8ad0:	b508      	push	{r3, lr}
   d8ad2:	4b02      	ldr	r3, [pc, #8]	; (d8adc <HAL_I2C_Init+0xc>)
   d8ad4:	681b      	ldr	r3, [r3, #0]
   d8ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8ad8:	9301      	str	r3, [sp, #4]
   d8ada:	bd08      	pop	{r3, pc}
   d8adc:	00030228 	.word	0x00030228

000d8ae0 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d8ae0:	b508      	push	{r3, lr}
   d8ae2:	4b02      	ldr	r3, [pc, #8]	; (d8aec <HAL_I2C_Acquire+0xc>)
   d8ae4:	681b      	ldr	r3, [r3, #0]
   d8ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8ae8:	9301      	str	r3, [sp, #4]
   d8aea:	bd08      	pop	{r3, pc}
   d8aec:	00030228 	.word	0x00030228

000d8af0 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d8af0:	b508      	push	{r3, lr}
   d8af2:	4b02      	ldr	r3, [pc, #8]	; (d8afc <HAL_I2C_Release+0xc>)
   d8af4:	681b      	ldr	r3, [r3, #0]
   d8af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8af8:	9301      	str	r3, [sp, #4]
   d8afa:	bd08      	pop	{r3, pc}
   d8afc:	00030228 	.word	0x00030228

000d8b00 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d8b00:	b508      	push	{r3, lr}
   d8b02:	4b02      	ldr	r3, [pc, #8]	; (d8b0c <HAL_I2C_Request_Data_Ex+0xc>)
   d8b04:	681b      	ldr	r3, [r3, #0]
   d8b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8b08:	9301      	str	r3, [sp, #4]
   d8b0a:	bd08      	pop	{r3, pc}
   d8b0c:	00030228 	.word	0x00030228

000d8b10 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d8b10:	b508      	push	{r3, lr}
   d8b12:	4b02      	ldr	r3, [pc, #8]	; (d8b1c <sock_setsockopt+0xc>)
   d8b14:	681b      	ldr	r3, [r3, #0]
   d8b16:	699b      	ldr	r3, [r3, #24]
   d8b18:	9301      	str	r3, [sp, #4]
   d8b1a:	bd08      	pop	{r3, pc}
   d8b1c:	00030238 	.word	0x00030238

000d8b20 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d8b20:	b508      	push	{r3, lr}
   d8b22:	4b02      	ldr	r3, [pc, #8]	; (d8b2c <sock_close+0xc>)
   d8b24:	681b      	ldr	r3, [r3, #0]
   d8b26:	69db      	ldr	r3, [r3, #28]
   d8b28:	9301      	str	r3, [sp, #4]
   d8b2a:	bd08      	pop	{r3, pc}
   d8b2c:	00030238 	.word	0x00030238

000d8b30 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d8b30:	b508      	push	{r3, lr}
   d8b32:	4b02      	ldr	r3, [pc, #8]	; (d8b3c <sock_connect+0xc>)
   d8b34:	681b      	ldr	r3, [r3, #0]
   d8b36:	6a1b      	ldr	r3, [r3, #32]
   d8b38:	9301      	str	r3, [sp, #4]
   d8b3a:	bd08      	pop	{r3, pc}
   d8b3c:	00030238 	.word	0x00030238

000d8b40 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d8b40:	b508      	push	{r3, lr}
   d8b42:	4b02      	ldr	r3, [pc, #8]	; (d8b4c <sock_recv+0xc>)
   d8b44:	681b      	ldr	r3, [r3, #0]
   d8b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8b48:	9301      	str	r3, [sp, #4]
   d8b4a:	bd08      	pop	{r3, pc}
   d8b4c:	00030238 	.word	0x00030238

000d8b50 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d8b50:	b508      	push	{r3, lr}
   d8b52:	4b02      	ldr	r3, [pc, #8]	; (d8b5c <sock_send+0xc>)
   d8b54:	681b      	ldr	r3, [r3, #0]
   d8b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8b58:	9301      	str	r3, [sp, #4]
   d8b5a:	bd08      	pop	{r3, pc}
   d8b5c:	00030238 	.word	0x00030238

000d8b60 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d8b60:	b508      	push	{r3, lr}
   d8b62:	4b02      	ldr	r3, [pc, #8]	; (d8b6c <sock_socket+0xc>)
   d8b64:	681b      	ldr	r3, [r3, #0]
   d8b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d8b68:	9301      	str	r3, [sp, #4]
   d8b6a:	bd08      	pop	{r3, pc}
   d8b6c:	00030238 	.word	0x00030238

000d8b70 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d8b70:	b508      	push	{r3, lr}
   d8b72:	4b02      	ldr	r3, [pc, #8]	; (d8b7c <HAL_USB_USART_Init+0xc>)
   d8b74:	681b      	ldr	r3, [r3, #0]
   d8b76:	681b      	ldr	r3, [r3, #0]
   d8b78:	9301      	str	r3, [sp, #4]
   d8b7a:	bd08      	pop	{r3, pc}
   d8b7c:	0003024c 	.word	0x0003024c

000d8b80 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d8b80:	b508      	push	{r3, lr}
   d8b82:	4b02      	ldr	r3, [pc, #8]	; (d8b8c <HAL_USB_USART_Begin+0xc>)
   d8b84:	681b      	ldr	r3, [r3, #0]
   d8b86:	685b      	ldr	r3, [r3, #4]
   d8b88:	9301      	str	r3, [sp, #4]
   d8b8a:	bd08      	pop	{r3, pc}
   d8b8c:	0003024c 	.word	0x0003024c

000d8b90 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d8b90:	b508      	push	{r3, lr}
   d8b92:	4b02      	ldr	r3, [pc, #8]	; (d8b9c <HAL_USB_USART_Available_Data+0xc>)
   d8b94:	681b      	ldr	r3, [r3, #0]
   d8b96:	691b      	ldr	r3, [r3, #16]
   d8b98:	9301      	str	r3, [sp, #4]
   d8b9a:	bd08      	pop	{r3, pc}
   d8b9c:	0003024c 	.word	0x0003024c

000d8ba0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d8ba0:	b508      	push	{r3, lr}
   d8ba2:	4b02      	ldr	r3, [pc, #8]	; (d8bac <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d8ba4:	681b      	ldr	r3, [r3, #0]
   d8ba6:	695b      	ldr	r3, [r3, #20]
   d8ba8:	9301      	str	r3, [sp, #4]
   d8baa:	bd08      	pop	{r3, pc}
   d8bac:	0003024c 	.word	0x0003024c

000d8bb0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8bb0:	b508      	push	{r3, lr}
   d8bb2:	4b02      	ldr	r3, [pc, #8]	; (d8bbc <HAL_USB_USART_Receive_Data+0xc>)
   d8bb4:	681b      	ldr	r3, [r3, #0]
   d8bb6:	699b      	ldr	r3, [r3, #24]
   d8bb8:	9301      	str	r3, [sp, #4]
   d8bba:	bd08      	pop	{r3, pc}
   d8bbc:	0003024c 	.word	0x0003024c

000d8bc0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8bc0:	b508      	push	{r3, lr}
   d8bc2:	4b02      	ldr	r3, [pc, #8]	; (d8bcc <HAL_USB_USART_Send_Data+0xc>)
   d8bc4:	681b      	ldr	r3, [r3, #0]
   d8bc6:	69db      	ldr	r3, [r3, #28]
   d8bc8:	9301      	str	r3, [sp, #4]
   d8bca:	bd08      	pop	{r3, pc}
   d8bcc:	0003024c 	.word	0x0003024c

000d8bd0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d8bd0:	b508      	push	{r3, lr}
   d8bd2:	4b02      	ldr	r3, [pc, #8]	; (d8bdc <HAL_USB_USART_Flush_Data+0xc>)
   d8bd4:	681b      	ldr	r3, [r3, #0]
   d8bd6:	6a1b      	ldr	r3, [r3, #32]
   d8bd8:	9301      	str	r3, [sp, #4]
   d8bda:	bd08      	pop	{r3, pc}
   d8bdc:	0003024c 	.word	0x0003024c

000d8be0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d8be0:	b508      	push	{r3, lr}
   d8be2:	4b02      	ldr	r3, [pc, #8]	; (d8bec <log_message+0xc>)
   d8be4:	681b      	ldr	r3, [r3, #0]
   d8be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8be8:	9301      	str	r3, [sp, #4]
   d8bea:	bd08      	pop	{r3, pc}
   d8bec:	00030260 	.word	0x00030260

000d8bf0 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d8bf0:	b508      	push	{r3, lr}
   d8bf2:	4b02      	ldr	r3, [pc, #8]	; (d8bfc <system_mode+0xc>)
   d8bf4:	681b      	ldr	r3, [r3, #0]
   d8bf6:	681b      	ldr	r3, [r3, #0]
   d8bf8:	9301      	str	r3, [sp, #4]
   d8bfa:	bd08      	pop	{r3, pc}
   d8bfc:	00030220 	.word	0x00030220

000d8c00 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d8c00:	b508      	push	{r3, lr}
   d8c02:	4b02      	ldr	r3, [pc, #8]	; (d8c0c <set_system_mode+0xc>)
   d8c04:	681b      	ldr	r3, [r3, #0]
   d8c06:	685b      	ldr	r3, [r3, #4]
   d8c08:	9301      	str	r3, [sp, #4]
   d8c0a:	bd08      	pop	{r3, pc}
   d8c0c:	00030220 	.word	0x00030220

000d8c10 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d8c10:	b508      	push	{r3, lr}
   d8c12:	4b02      	ldr	r3, [pc, #8]	; (d8c1c <system_delay_ms+0xc>)
   d8c14:	681b      	ldr	r3, [r3, #0]
   d8c16:	695b      	ldr	r3, [r3, #20]
   d8c18:	9301      	str	r3, [sp, #4]
   d8c1a:	bd08      	pop	{r3, pc}
   d8c1c:	00030220 	.word	0x00030220

000d8c20 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d8c20:	b508      	push	{r3, lr}
   d8c22:	4b02      	ldr	r3, [pc, #8]	; (d8c2c <system_thread_set_state+0xc>)
   d8c24:	681b      	ldr	r3, [r3, #0]
   d8c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8c28:	9301      	str	r3, [sp, #4]
   d8c2a:	bd08      	pop	{r3, pc}
   d8c2c:	00030220 	.word	0x00030220

000d8c30 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d8c30:	b508      	push	{r3, lr}
   d8c32:	4b02      	ldr	r3, [pc, #8]	; (d8c3c <system_thread_get_state+0xc>)
   d8c34:	681b      	ldr	r3, [r3, #0]
   d8c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d8c38:	9301      	str	r3, [sp, #4]
   d8c3a:	bd08      	pop	{r3, pc}
   d8c3c:	00030220 	.word	0x00030220

000d8c40 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d8c40:	b508      	push	{r3, lr}
   d8c42:	4b03      	ldr	r3, [pc, #12]	; (d8c50 <system_ctrl_set_app_request_handler+0x10>)
   d8c44:	681b      	ldr	r3, [r3, #0]
   d8c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d8c4a:	9301      	str	r3, [sp, #4]
   d8c4c:	bd08      	pop	{r3, pc}
   d8c4e:	0000      	.short	0x0000
   d8c50:	00030220 	.word	0x00030220

000d8c54 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d8c54:	b508      	push	{r3, lr}
   d8c56:	4b03      	ldr	r3, [pc, #12]	; (d8c64 <system_ctrl_set_result+0x10>)
   d8c58:	681b      	ldr	r3, [r3, #0]
   d8c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d8c5e:	9301      	str	r3, [sp, #4]
   d8c60:	bd08      	pop	{r3, pc}
   d8c62:	0000      	.short	0x0000
   d8c64:	00030220 	.word	0x00030220

000d8c68 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d8c68:	b508      	push	{r3, lr}
   d8c6a:	4b02      	ldr	r3, [pc, #8]	; (d8c74 <network_connect+0xc>)
   d8c6c:	681b      	ldr	r3, [r3, #0]
   d8c6e:	685b      	ldr	r3, [r3, #4]
   d8c70:	9301      	str	r3, [sp, #4]
   d8c72:	bd08      	pop	{r3, pc}
   d8c74:	00030240 	.word	0x00030240

000d8c78 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d8c78:	b508      	push	{r3, lr}
   d8c7a:	4b02      	ldr	r3, [pc, #8]	; (d8c84 <network_connecting+0xc>)
   d8c7c:	681b      	ldr	r3, [r3, #0]
   d8c7e:	689b      	ldr	r3, [r3, #8]
   d8c80:	9301      	str	r3, [sp, #4]
   d8c82:	bd08      	pop	{r3, pc}
   d8c84:	00030240 	.word	0x00030240

000d8c88 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d8c88:	b508      	push	{r3, lr}
   d8c8a:	4b02      	ldr	r3, [pc, #8]	; (d8c94 <network_disconnect+0xc>)
   d8c8c:	681b      	ldr	r3, [r3, #0]
   d8c8e:	68db      	ldr	r3, [r3, #12]
   d8c90:	9301      	str	r3, [sp, #4]
   d8c92:	bd08      	pop	{r3, pc}
   d8c94:	00030240 	.word	0x00030240

000d8c98 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d8c98:	b508      	push	{r3, lr}
   d8c9a:	4b02      	ldr	r3, [pc, #8]	; (d8ca4 <network_ready+0xc>)
   d8c9c:	681b      	ldr	r3, [r3, #0]
   d8c9e:	691b      	ldr	r3, [r3, #16]
   d8ca0:	9301      	str	r3, [sp, #4]
   d8ca2:	bd08      	pop	{r3, pc}
   d8ca4:	00030240 	.word	0x00030240

000d8ca8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d8ca8:	b508      	push	{r3, lr}
   d8caa:	4b02      	ldr	r3, [pc, #8]	; (d8cb4 <network_on+0xc>)
   d8cac:	681b      	ldr	r3, [r3, #0]
   d8cae:	695b      	ldr	r3, [r3, #20]
   d8cb0:	9301      	str	r3, [sp, #4]
   d8cb2:	bd08      	pop	{r3, pc}
   d8cb4:	00030240 	.word	0x00030240

000d8cb8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d8cb8:	b508      	push	{r3, lr}
   d8cba:	4b02      	ldr	r3, [pc, #8]	; (d8cc4 <network_off+0xc>)
   d8cbc:	681b      	ldr	r3, [r3, #0]
   d8cbe:	699b      	ldr	r3, [r3, #24]
   d8cc0:	9301      	str	r3, [sp, #4]
   d8cc2:	bd08      	pop	{r3, pc}
   d8cc4:	00030240 	.word	0x00030240

000d8cc8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d8cc8:	b508      	push	{r3, lr}
   d8cca:	4b02      	ldr	r3, [pc, #8]	; (d8cd4 <network_listen+0xc>)
   d8ccc:	681b      	ldr	r3, [r3, #0]
   d8cce:	69db      	ldr	r3, [r3, #28]
   d8cd0:	9301      	str	r3, [sp, #4]
   d8cd2:	bd08      	pop	{r3, pc}
   d8cd4:	00030240 	.word	0x00030240

000d8cd8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d8cd8:	b508      	push	{r3, lr}
   d8cda:	4b02      	ldr	r3, [pc, #8]	; (d8ce4 <network_listening+0xc>)
   d8cdc:	681b      	ldr	r3, [r3, #0]
   d8cde:	6a1b      	ldr	r3, [r3, #32]
   d8ce0:	9301      	str	r3, [sp, #4]
   d8ce2:	bd08      	pop	{r3, pc}
   d8ce4:	00030240 	.word	0x00030240

000d8ce8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d8ce8:	b508      	push	{r3, lr}
   d8cea:	4b02      	ldr	r3, [pc, #8]	; (d8cf4 <network_set_listen_timeout+0xc>)
   d8cec:	681b      	ldr	r3, [r3, #0]
   d8cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8cf0:	9301      	str	r3, [sp, #4]
   d8cf2:	bd08      	pop	{r3, pc}
   d8cf4:	00030240 	.word	0x00030240

000d8cf8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d8cf8:	b508      	push	{r3, lr}
   d8cfa:	4b02      	ldr	r3, [pc, #8]	; (d8d04 <network_get_listen_timeout+0xc>)
   d8cfc:	681b      	ldr	r3, [r3, #0]
   d8cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8d00:	9301      	str	r3, [sp, #4]
   d8d02:	bd08      	pop	{r3, pc}
   d8d04:	00030240 	.word	0x00030240

000d8d08 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d8d08:	b508      	push	{r3, lr}
   d8d0a:	4b02      	ldr	r3, [pc, #8]	; (d8d14 <spark_process+0xc>)
   d8d0c:	681b      	ldr	r3, [r3, #0]
   d8d0e:	689b      	ldr	r3, [r3, #8]
   d8d10:	9301      	str	r3, [sp, #4]
   d8d12:	bd08      	pop	{r3, pc}
   d8d14:	00030244 	.word	0x00030244

000d8d18 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d8d18:	b508      	push	{r3, lr}
   d8d1a:	4b02      	ldr	r3, [pc, #8]	; (d8d24 <spark_cloud_flag_connected+0xc>)
   d8d1c:	681b      	ldr	r3, [r3, #0]
   d8d1e:	695b      	ldr	r3, [r3, #20]
   d8d20:	9301      	str	r3, [sp, #4]
   d8d22:	bd08      	pop	{r3, pc}
   d8d24:	00030244 	.word	0x00030244

000d8d28 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d8d28:	b508      	push	{r3, lr}
   d8d2a:	4b02      	ldr	r3, [pc, #8]	; (d8d34 <spark_deviceID+0xc>)
   d8d2c:	681b      	ldr	r3, [r3, #0]
   d8d2e:	69db      	ldr	r3, [r3, #28]
   d8d30:	9301      	str	r3, [sp, #4]
   d8d32:	bd08      	pop	{r3, pc}
   d8d34:	00030244 	.word	0x00030244

000d8d38 <spark_sync_time>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d8d38:	b508      	push	{r3, lr}
   d8d3a:	4b02      	ldr	r3, [pc, #8]	; (d8d44 <spark_sync_time+0xc>)
   d8d3c:	681b      	ldr	r3, [r3, #0]
   d8d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8d40:	9301      	str	r3, [sp, #4]
   d8d42:	bd08      	pop	{r3, pc}
   d8d44:	00030244 	.word	0x00030244

000d8d48 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d8d48:	b508      	push	{r3, lr}
   d8d4a:	4b02      	ldr	r3, [pc, #8]	; (d8d54 <spark_sync_time_pending+0xc>)
   d8d4c:	681b      	ldr	r3, [r3, #0]
   d8d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8d50:	9301      	str	r3, [sp, #4]
   d8d52:	bd08      	pop	{r3, pc}
   d8d54:	00030244 	.word	0x00030244

000d8d58 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d8d58:	b508      	push	{r3, lr}
   d8d5a:	4b02      	ldr	r3, [pc, #8]	; (d8d64 <spark_set_random_seed_from_cloud_handler+0xc>)
   d8d5c:	681b      	ldr	r3, [r3, #0]
   d8d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8d60:	9301      	str	r3, [sp, #4]
   d8d62:	bd08      	pop	{r3, pc}
   d8d64:	00030244 	.word	0x00030244

000d8d68 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d8d68:	b508      	push	{r3, lr}
   d8d6a:	4b02      	ldr	r3, [pc, #8]	; (d8d74 <malloc+0xc>)
   d8d6c:	681b      	ldr	r3, [r3, #0]
   d8d6e:	681b      	ldr	r3, [r3, #0]
   d8d70:	9301      	str	r3, [sp, #4]
   d8d72:	bd08      	pop	{r3, pc}
   d8d74:	0003021c 	.word	0x0003021c

000d8d78 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d8d78:	b508      	push	{r3, lr}
   d8d7a:	4b02      	ldr	r3, [pc, #8]	; (d8d84 <free+0xc>)
   d8d7c:	681b      	ldr	r3, [r3, #0]
   d8d7e:	685b      	ldr	r3, [r3, #4]
   d8d80:	9301      	str	r3, [sp, #4]
   d8d82:	bd08      	pop	{r3, pc}
   d8d84:	0003021c 	.word	0x0003021c

000d8d88 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d8d88:	b508      	push	{r3, lr}
   d8d8a:	4b02      	ldr	r3, [pc, #8]	; (d8d94 <realloc+0xc>)
   d8d8c:	681b      	ldr	r3, [r3, #0]
   d8d8e:	689b      	ldr	r3, [r3, #8]
   d8d90:	9301      	str	r3, [sp, #4]
   d8d92:	bd08      	pop	{r3, pc}
   d8d94:	0003021c 	.word	0x0003021c

000d8d98 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d8d98:	b508      	push	{r3, lr}
   d8d9a:	4b02      	ldr	r3, [pc, #8]	; (d8da4 <sprintf+0xc>)
   d8d9c:	681b      	ldr	r3, [r3, #0]
   d8d9e:	68db      	ldr	r3, [r3, #12]
   d8da0:	9301      	str	r3, [sp, #4]
   d8da2:	bd08      	pop	{r3, pc}
   d8da4:	0003021c 	.word	0x0003021c

000d8da8 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d8da8:	b508      	push	{r3, lr}
   d8daa:	4b02      	ldr	r3, [pc, #8]	; (d8db4 <siprintf+0xc>)
   d8dac:	681b      	ldr	r3, [r3, #0]
   d8dae:	691b      	ldr	r3, [r3, #16]
   d8db0:	9301      	str	r3, [sp, #4]
   d8db2:	bd08      	pop	{r3, pc}
   d8db4:	0003021c 	.word	0x0003021c

000d8db8 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d8db8:	b508      	push	{r3, lr}
   d8dba:	4b02      	ldr	r3, [pc, #8]	; (d8dc4 <siscanf+0xc>)
   d8dbc:	681b      	ldr	r3, [r3, #0]
   d8dbe:	699b      	ldr	r3, [r3, #24]
   d8dc0:	9301      	str	r3, [sp, #4]
   d8dc2:	bd08      	pop	{r3, pc}
   d8dc4:	0003021c 	.word	0x0003021c

000d8dc8 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d8dc8:	b508      	push	{r3, lr}
   d8dca:	4b02      	ldr	r3, [pc, #8]	; (d8dd4 <snprintf+0xc>)
   d8dcc:	681b      	ldr	r3, [r3, #0]
   d8dce:	69db      	ldr	r3, [r3, #28]
   d8dd0:	9301      	str	r3, [sp, #4]
   d8dd2:	bd08      	pop	{r3, pc}
   d8dd4:	0003021c 	.word	0x0003021c

000d8dd8 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   d8dd8:	b508      	push	{r3, lr}
   d8dda:	4b02      	ldr	r3, [pc, #8]	; (d8de4 <sniprintf+0xc>)
   d8ddc:	681b      	ldr	r3, [r3, #0]
   d8dde:	6a1b      	ldr	r3, [r3, #32]
   d8de0:	9301      	str	r3, [sp, #4]
   d8de2:	bd08      	pop	{r3, pc}
   d8de4:	0003021c 	.word	0x0003021c

000d8de8 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d8de8:	b508      	push	{r3, lr}
   d8dea:	4b02      	ldr	r3, [pc, #8]	; (d8df4 <vsnprintf+0xc>)
   d8dec:	681b      	ldr	r3, [r3, #0]
   d8dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8df0:	9301      	str	r3, [sp, #4]
   d8df2:	bd08      	pop	{r3, pc}
   d8df4:	0003021c 	.word	0x0003021c

000d8df8 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d8df8:	b508      	push	{r3, lr}
   d8dfa:	4b02      	ldr	r3, [pc, #8]	; (d8e04 <_malloc_r+0xc>)
   d8dfc:	681b      	ldr	r3, [r3, #0]
   d8dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8e00:	9301      	str	r3, [sp, #4]
   d8e02:	bd08      	pop	{r3, pc}
   d8e04:	0003021c 	.word	0x0003021c

000d8e08 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d8e08:	b508      	push	{r3, lr}
   d8e0a:	4b02      	ldr	r3, [pc, #8]	; (d8e14 <__errno+0xc>)
   d8e0c:	681b      	ldr	r3, [r3, #0]
   d8e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8e10:	9301      	str	r3, [sp, #4]
   d8e12:	bd08      	pop	{r3, pc}
   d8e14:	0003021c 	.word	0x0003021c

000d8e18 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8e18:	2200      	movs	r2, #0
   d8e1a:	4611      	mov	r1, r2
   d8e1c:	6840      	ldr	r0, [r0, #4]
   d8e1e:	f7ff bf5b 	b.w	d8cd8 <network_listening>

000d8e22 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8e22:	2200      	movs	r2, #0
   d8e24:	4611      	mov	r1, r2
   d8e26:	6840      	ldr	r0, [r0, #4]
   d8e28:	f7ff bf66 	b.w	d8cf8 <network_get_listen_timeout>

000d8e2c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8e2c:	2200      	movs	r2, #0
   d8e2e:	6840      	ldr	r0, [r0, #4]
   d8e30:	f7ff bf5a 	b.w	d8ce8 <network_set_listen_timeout>

000d8e34 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8e34:	2200      	movs	r2, #0
   d8e36:	f081 0101 	eor.w	r1, r1, #1
   d8e3a:	6840      	ldr	r0, [r0, #4]
   d8e3c:	f7ff bf44 	b.w	d8cc8 <network_listen>

000d8e40 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d8e40:	2300      	movs	r3, #0
   d8e42:	461a      	mov	r2, r3
   d8e44:	4619      	mov	r1, r3
   d8e46:	6840      	ldr	r0, [r0, #4]
   d8e48:	f7ff bf36 	b.w	d8cb8 <network_off>

000d8e4c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d8e4c:	2300      	movs	r3, #0
   d8e4e:	461a      	mov	r2, r3
   d8e50:	4619      	mov	r1, r3
   d8e52:	6840      	ldr	r0, [r0, #4]
   d8e54:	f7ff bf28 	b.w	d8ca8 <network_on>

000d8e58 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8e58:	2200      	movs	r2, #0
   d8e5a:	4611      	mov	r1, r2
   d8e5c:	6840      	ldr	r0, [r0, #4]
   d8e5e:	f7ff bf1b 	b.w	d8c98 <network_ready>

000d8e62 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8e62:	2200      	movs	r2, #0
   d8e64:	4611      	mov	r1, r2
   d8e66:	6840      	ldr	r0, [r0, #4]
   d8e68:	f7ff bf06 	b.w	d8c78 <network_connecting>

000d8e6c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8e6c:	2200      	movs	r2, #0
   d8e6e:	2102      	movs	r1, #2
   d8e70:	6840      	ldr	r0, [r0, #4]
   d8e72:	f7ff bf09 	b.w	d8c88 <network_disconnect>

000d8e76 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8e76:	2300      	movs	r3, #0
   d8e78:	461a      	mov	r2, r3
   d8e7a:	6840      	ldr	r0, [r0, #4]
   d8e7c:	f7ff bef4 	b.w	d8c68 <network_connect>

000d8e80 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d8e80:	4b02      	ldr	r3, [pc, #8]	; (d8e8c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d8e82:	2203      	movs	r2, #3
   d8e84:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d8e86:	4a02      	ldr	r2, [pc, #8]	; (d8e90 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d8e88:	601a      	str	r2, [r3, #0]
   d8e8a:	4770      	bx	lr
   d8e8c:	2003df84 	.word	0x2003df84
   d8e90:	000dd1d8 	.word	0x000dd1d8

000d8e94 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d8e94:	2100      	movs	r1, #0
   d8e96:	f7ff bccb 	b.w	d8830 <HAL_SPI_Acquire>

000d8e9a <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d8e9a:	2100      	movs	r1, #0
   d8e9c:	f7ff bcd0 	b.w	d8840 <HAL_SPI_Release>

000d8ea0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d8ea0:	b510      	push	{r4, lr}
   d8ea2:	4604      	mov	r4, r0
{
    _spi = spi;
   d8ea4:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d8ea6:	4608      	mov	r0, r1
   d8ea8:	f7ff fc92 	bl	d87d0 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d8eac:	2300      	movs	r3, #0
   d8eae:	6063      	str	r3, [r4, #4]
}
   d8eb0:	4620      	mov	r0, r4
   d8eb2:	bd10      	pop	{r4, pc}

000d8eb4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d8eb4:	b510      	push	{r4, lr}
   d8eb6:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d8eb8:	7800      	ldrb	r0, [r0, #0]
   d8eba:	f7ff ffeb 	bl	d8e94 <_ZN8SPIClass4lockEv.isra.0>
   d8ebe:	b948      	cbnz	r0, d8ed4 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d8ec0:	7820      	ldrb	r0, [r4, #0]
   d8ec2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d8ec6:	f7ff fc5b 	bl	d8780 <HAL_SPI_Begin>
        unlock();
   d8eca:	7820      	ldrb	r0, [r4, #0]
    }
}
   d8ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d8ed0:	f7ff bfe3 	b.w	d8e9a <_ZN8SPIClass6unlockEv.isra.1>
   d8ed4:	bd10      	pop	{r4, pc}

000d8ed6 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d8ed6:	b538      	push	{r3, r4, r5, lr}
   d8ed8:	4604      	mov	r4, r0
    if (!lock())
   d8eda:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d8edc:	460d      	mov	r5, r1
    if (!lock())
   d8ede:	f7ff ffd9 	bl	d8e94 <_ZN8SPIClass4lockEv.isra.0>
   d8ee2:	b940      	cbnz	r0, d8ef6 <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d8ee4:	7820      	ldrb	r0, [r4, #0]
   d8ee6:	4629      	mov	r1, r5
   d8ee8:	f7ff fc52 	bl	d8790 <HAL_SPI_Set_Bit_Order>
        unlock();
   d8eec:	7820      	ldrb	r0, [r4, #0]
    }
}
   d8eee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d8ef2:	f7ff bfd2 	b.w	d8e9a <_ZN8SPIClass6unlockEv.isra.1>
   d8ef6:	bd38      	pop	{r3, r4, r5, pc}

000d8ef8 <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d8ef8:	b538      	push	{r3, r4, r5, lr}
   d8efa:	4604      	mov	r4, r0
    if (!lock())
   d8efc:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d8efe:	460d      	mov	r5, r1
    if (!lock())
   d8f00:	f7ff ffc8 	bl	d8e94 <_ZN8SPIClass4lockEv.isra.0>
   d8f04:	b940      	cbnz	r0, d8f18 <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d8f06:	7820      	ldrb	r0, [r4, #0]
   d8f08:	4629      	mov	r1, r5
   d8f0a:	f7ff fc49 	bl	d87a0 <HAL_SPI_Set_Data_Mode>
        unlock();
   d8f0e:	7820      	ldrb	r0, [r4, #0]
    }
}
   d8f10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d8f14:	f7ff bfc1 	b.w	d8e9a <_ZN8SPIClass6unlockEv.isra.1>
   d8f18:	bd38      	pop	{r3, r4, r5, pc}

000d8f1a <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d8f1a:	7800      	ldrb	r0, [r0, #0]
   d8f1c:	f7ff bfbd 	b.w	d8e9a <_ZN8SPIClass6unlockEv.isra.1>

000d8f20 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d8f20:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d8f22:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d8f24:	6018      	str	r0, [r3, #0]
   d8f26:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d8f28:	6818      	ldr	r0, [r3, #0]
   d8f2a:	4288      	cmp	r0, r1
   d8f2c:	b2e5      	uxtb	r5, r4
   d8f2e:	d906      	bls.n	d8f3e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d8f30:	3401      	adds	r4, #1
   d8f32:	2c08      	cmp	r4, #8
   d8f34:	d002      	beq.n	d8f3c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d8f36:	0840      	lsrs	r0, r0, #1
   d8f38:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d8f3a:	e7f5      	b.n	d8f28 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d8f3c:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d8f3e:	4b02      	ldr	r3, [pc, #8]	; (d8f48 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d8f40:	5d5b      	ldrb	r3, [r3, r5]
   d8f42:	7013      	strb	r3, [r2, #0]
   d8f44:	bd30      	pop	{r4, r5, pc}
   d8f46:	bf00      	nop
   d8f48:	000dd204 	.word	0x000dd204

000d8f4c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d8f4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8f50:	4607      	mov	r7, r0
   d8f52:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d8f54:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d8f56:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d8f58:	f7ff ff9c 	bl	d8e94 <_ZN8SPIClass4lockEv.isra.0>
   d8f5c:	2800      	cmp	r0, #0
   d8f5e:	db62      	blt.n	d9026 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d8f60:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d8f62:	2214      	movs	r2, #20
   d8f64:	2100      	movs	r1, #0
   d8f66:	a809      	add	r0, sp, #36	; 0x24
   d8f68:	f002 fdd0 	bl	dbb0c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d8f6c:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d8f6e:	4620      	mov	r0, r4
   d8f70:	2200      	movs	r2, #0
   d8f72:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d8f74:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d8f78:	f7ff fc3a 	bl	d87f0 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d8f7c:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d8f80:	b154      	cbz	r4, d8f98 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d8f82:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d8f86:	b935      	cbnz	r5, d8f96 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d8f88:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d8f8c:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d8f90:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d8f94:	e003      	b.n	d8f9e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d8f96:	2400      	movs	r4, #0
   d8f98:	46a1      	mov	r9, r4
   d8f9a:	46a0      	mov	r8, r4
   d8f9c:	2501      	movs	r5, #1
   d8f9e:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d8fa0:	b105      	cbz	r5, d8fa4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d8fa2:	b9bb      	cbnz	r3, d8fd4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d8fa4:	429d      	cmp	r5, r3
   d8fa6:	d10b      	bne.n	d8fc0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d8fa8:	68b2      	ldr	r2, [r6, #8]
   d8faa:	4542      	cmp	r2, r8
   d8fac:	d108      	bne.n	d8fc0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d8fae:	f88d 9020 	strb.w	r9, [sp, #32]
   d8fb2:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d8fb6:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d8fba:	89b2      	ldrh	r2, [r6, #12]
   d8fbc:	4291      	cmp	r1, r2
   d8fbe:	d009      	beq.n	d8fd4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d8fc0:	b153      	cbz	r3, d8fd8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d8fc2:	2400      	movs	r4, #0
   d8fc4:	7838      	ldrb	r0, [r7, #0]
   d8fc6:	9401      	str	r4, [sp, #4]
   d8fc8:	9400      	str	r4, [sp, #0]
   d8fca:	4623      	mov	r3, r4
   d8fcc:	4622      	mov	r2, r4
   d8fce:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d8fd0:	f7ff fc26 	bl	d8820 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d8fd4:	2000      	movs	r0, #0
   d8fd6:	e026      	b.n	d9026 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d8fd8:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d8fdc:	68b1      	ldr	r1, [r6, #8]
   d8fde:	980a      	ldr	r0, [sp, #40]	; 0x28
   d8fe0:	ab04      	add	r3, sp, #16
   d8fe2:	f10d 020f 	add.w	r2, sp, #15
   d8fe6:	f7ff ff9b 	bl	d8f20 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d8fea:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d8fec:	b105      	cbz	r5, d8ff0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d8fee:	b9b1      	cbnz	r1, d901e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d8ff0:	42a9      	cmp	r1, r5
   d8ff2:	d008      	beq.n	d9006 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d8ff4:	2400      	movs	r4, #0
   d8ff6:	7838      	ldrb	r0, [r7, #0]
   d8ff8:	9401      	str	r4, [sp, #4]
   d8ffa:	7b74      	ldrb	r4, [r6, #13]
   d8ffc:	7b33      	ldrb	r3, [r6, #12]
   d8ffe:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d9002:	9400      	str	r4, [sp, #0]
   d9004:	e7e4      	b.n	d8fd0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d9006:	68b3      	ldr	r3, [r6, #8]
   d9008:	4543      	cmp	r3, r8
   d900a:	d3f3      	bcc.n	d8ff4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d900c:	f88d 9020 	strb.w	r9, [sp, #32]
   d9010:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d9014:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d9018:	89b3      	ldrh	r3, [r6, #12]
   d901a:	429a      	cmp	r2, r3
   d901c:	d1ea      	bne.n	d8ff4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d901e:	9b04      	ldr	r3, [sp, #16]
   d9020:	4543      	cmp	r3, r8
   d9022:	d1e7      	bne.n	d8ff4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d9024:	e7d6      	b.n	d8fd4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d9026:	b00f      	add	sp, #60	; 0x3c
   d9028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d902c <_ZN8SPIClass13setClockSpeedEjj>:
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d902c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9030:	b088      	sub	sp, #32
    unsigned clock = 0;
   d9032:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d9034:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d9036:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d9038:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d903a:	460e      	mov	r6, r1
   d903c:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d903e:	f7ff ff29 	bl	d8e94 <_ZN8SPIClass4lockEv.isra.0>
   d9042:	4605      	mov	r5, r0
   d9044:	bb00      	cbnz	r0, d9088 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d9046:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d904a:	4601      	mov	r1, r0
   d904c:	2214      	movs	r2, #20
   d904e:	a803      	add	r0, sp, #12
   d9050:	f002 fd5c 	bl	dbb0c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d9054:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d9056:	462a      	mov	r2, r5
   d9058:	a903      	add	r1, sp, #12
   d905a:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d905c:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d9060:	f7ff fbc6 	bl	d87f0 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d9064:	ab02      	add	r3, sp, #8
   d9066:	f10d 0207 	add.w	r2, sp, #7
   d906a:	fb07 f106 	mul.w	r1, r7, r6
   d906e:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d9070:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d9074:	f7ff ff54 	bl	d8f20 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d9078:	7820      	ldrb	r0, [r4, #0]
   d907a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d907e:	f7ff fb97 	bl	d87b0 <HAL_SPI_Set_Clock_Divider>
        unlock();
   d9082:	7820      	ldrb	r0, [r4, #0]
   d9084:	f7ff ff09 	bl	d8e9a <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d9088:	9802      	ldr	r0, [sp, #8]
   d908a:	b008      	add	sp, #32
   d908c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d9090 <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d9090:	b538      	push	{r3, r4, r5, lr}
   d9092:	4604      	mov	r4, r0
    if (!lock())
   d9094:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d9096:	460d      	mov	r5, r1
    if (!lock())
   d9098:	f7ff fefc 	bl	d8e94 <_ZN8SPIClass4lockEv.isra.0>
   d909c:	b9c8      	cbnz	r0, d90d2 <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d909e:	6861      	ldr	r1, [r4, #4]
   d90a0:	b171      	cbz	r1, d90c0 <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d90a2:	4b0c      	ldr	r3, [pc, #48]	; (d90d4 <_ZN8SPIClass15setClockDividerEh+0x44>)
   d90a4:	5cc2      	ldrb	r2, [r0, r3]
   d90a6:	42aa      	cmp	r2, r5
   d90a8:	d002      	beq.n	d90b0 <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d90aa:	3001      	adds	r0, #1
   d90ac:	2808      	cmp	r0, #8
   d90ae:	d1f9      	bne.n	d90a4 <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d90b0:	3001      	adds	r0, #1
   d90b2:	b2c0      	uxtb	r0, r0
   d90b4:	40c1      	lsrs	r1, r0
   d90b6:	2201      	movs	r2, #1
   d90b8:	4620      	mov	r0, r4
   d90ba:	f7ff ffb7 	bl	d902c <_ZN8SPIClass13setClockSpeedEjj>
   d90be:	e003      	b.n	d90c8 <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d90c0:	4629      	mov	r1, r5
   d90c2:	7820      	ldrb	r0, [r4, #0]
   d90c4:	f7ff fb74 	bl	d87b0 <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d90c8:	7820      	ldrb	r0, [r4, #0]
    }
}
   d90ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d90ce:	f7ff bee4 	b.w	d8e9a <_ZN8SPIClass6unlockEv.isra.1>
   d90d2:	bd38      	pop	{r3, r4, r5, pc}
   d90d4:	000dd204 	.word	0x000dd204

000d90d8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d90d8:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d90da:	7800      	ldrb	r0, [r0, #0]
   d90dc:	f7ff fb70 	bl	d87c0 <HAL_SPI_Send_Receive_Data>
}
   d90e0:	b2c0      	uxtb	r0, r0
   d90e2:	bd08      	pop	{r3, pc}

000d90e4 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d90e4:	b530      	push	{r4, r5, lr}
   d90e6:	b087      	sub	sp, #28
   d90e8:	4604      	mov	r4, r0
   d90ea:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d90ec:	7800      	ldrb	r0, [r0, #0]
   d90ee:	9500      	str	r5, [sp, #0]
   d90f0:	f7ff fb86 	bl	d8800 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d90f4:	b93d      	cbnz	r5, d9106 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d90f6:	a902      	add	r1, sp, #8
   d90f8:	7820      	ldrb	r0, [r4, #0]
   d90fa:	f7ff fb89 	bl	d8810 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d90fe:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d9102:	07db      	lsls	r3, r3, #31
   d9104:	d4f7      	bmi.n	d90f6 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d9106:	b007      	add	sp, #28
   d9108:	bd30      	pop	{r4, r5, pc}

000d910a <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d910a:	7800      	ldrb	r0, [r0, #0]
   d910c:	f7ff bb68 	b.w	d87e0 <HAL_SPI_Is_Enabled>

000d9110 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d9110:	b510      	push	{r4, lr}
   d9112:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d9114:	6800      	ldr	r0, [r0, #0]
   d9116:	b118      	cbz	r0, d9120 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d9118:	f7ff fe2e 	bl	d8d78 <free>
            wakeupSource_ = nullptr;
   d911c:	2300      	movs	r3, #0
   d911e:	6023      	str	r3, [r4, #0]
   d9120:	bd10      	pop	{r4, pc}

000d9122 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d9122:	b510      	push	{r4, lr}
   d9124:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d9126:	f7ff fff3 	bl	d9110 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d912a:	4620      	mov	r0, r4
   d912c:	bd10      	pop	{r4, pc}
	...

000d9130 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d9130:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d9132:	4c09      	ldr	r4, [pc, #36]	; (d9158 <_GLOBAL__sub_I_System+0x28>)
   d9134:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d9136:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d913a:	6020      	str	r0, [r4, #0]
   d913c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d913e:	71a0      	strb	r0, [r4, #6]
   d9140:	8120      	strh	r0, [r4, #8]
   d9142:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d9144:	f7ff fd5c 	bl	d8c00 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d9148:	4620      	mov	r0, r4
   d914a:	4a04      	ldr	r2, [pc, #16]	; (d915c <_GLOBAL__sub_I_System+0x2c>)
   d914c:	4904      	ldr	r1, [pc, #16]	; (d9160 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d914e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d9152:	f001 bd15 	b.w	dab80 <__aeabi_atexit>
   d9156:	bf00      	nop
   d9158:	2003df8c 	.word	0x2003df8c
   d915c:	2003d8b8 	.word	0x2003d8b8
   d9160:	000d9123 	.word	0x000d9123

000d9164 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d9164:	b510      	push	{r4, lr}
   d9166:	4604      	mov	r4, r0
{
	free(buffer);
   d9168:	6800      	ldr	r0, [r0, #0]
   d916a:	f7ff fe05 	bl	d8d78 <free>
}
   d916e:	4620      	mov	r0, r4
   d9170:	bd10      	pop	{r4, pc}

000d9172 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d9172:	b510      	push	{r4, lr}
   d9174:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d9176:	6800      	ldr	r0, [r0, #0]
   d9178:	b108      	cbz	r0, d917e <_ZN6String10invalidateEv+0xc>
   d917a:	f7ff fdfd 	bl	d8d78 <free>
	buffer = NULL;
   d917e:	2300      	movs	r3, #0
   d9180:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d9182:	60a3      	str	r3, [r4, #8]
   d9184:	6063      	str	r3, [r4, #4]
   d9186:	bd10      	pop	{r4, pc}

000d9188 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d9188:	b538      	push	{r3, r4, r5, lr}
   d918a:	4604      	mov	r4, r0
   d918c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d918e:	6800      	ldr	r0, [r0, #0]
   d9190:	3101      	adds	r1, #1
   d9192:	f7ff fdf9 	bl	d8d88 <realloc>
	if (newbuffer) {
   d9196:	b110      	cbz	r0, d919e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d9198:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d919c:	2001      	movs	r0, #1
	}
	return 0;
}
   d919e:	bd38      	pop	{r3, r4, r5, pc}

000d91a0 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d91a0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d91a2:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d91a4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d91a6:	b113      	cbz	r3, d91ae <_ZN6String7reserveEj+0xe>
   d91a8:	6843      	ldr	r3, [r0, #4]
   d91aa:	428b      	cmp	r3, r1
   d91ac:	d207      	bcs.n	d91be <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d91ae:	4620      	mov	r0, r4
   d91b0:	f7ff ffea 	bl	d9188 <_ZN6String12changeBufferEj>
   d91b4:	b120      	cbz	r0, d91c0 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d91b6:	68a3      	ldr	r3, [r4, #8]
   d91b8:	b90b      	cbnz	r3, d91be <_ZN6String7reserveEj+0x1e>
   d91ba:	6822      	ldr	r2, [r4, #0]
   d91bc:	7013      	strb	r3, [r2, #0]
   d91be:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d91c0:	bd10      	pop	{r4, pc}

000d91c2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d91c2:	b570      	push	{r4, r5, r6, lr}
   d91c4:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d91c6:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d91c8:	4604      	mov	r4, r0
   d91ca:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d91cc:	f7ff ffe8 	bl	d91a0 <_ZN6String7reserveEj>
   d91d0:	b918      	cbnz	r0, d91da <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d91d2:	4620      	mov	r0, r4
   d91d4:	f7ff ffcd 	bl	d9172 <_ZN6String10invalidateEv>
		return *this;
   d91d8:	e009      	b.n	d91ee <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d91da:	462a      	mov	r2, r5
   d91dc:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d91de:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d91e0:	6820      	ldr	r0, [r4, #0]
   d91e2:	f002 fc88 	bl	dbaf6 <memcpy>
	buffer[len] = 0;
   d91e6:	6822      	ldr	r2, [r4, #0]
   d91e8:	68a3      	ldr	r3, [r4, #8]
   d91ea:	2100      	movs	r1, #0
   d91ec:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d91ee:	4620      	mov	r0, r4
   d91f0:	bd70      	pop	{r4, r5, r6, pc}

000d91f2 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d91f2:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d91f4:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d91f6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d91f8:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d91fa:	6043      	str	r3, [r0, #4]
	len = 0;
   d91fc:	6083      	str	r3, [r0, #8]
	flags = 0;
   d91fe:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d9200:	460d      	mov	r5, r1
   d9202:	b139      	cbz	r1, d9214 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d9204:	4608      	mov	r0, r1
   d9206:	f003 f9e5 	bl	dc5d4 <strlen>
   d920a:	4629      	mov	r1, r5
   d920c:	4602      	mov	r2, r0
   d920e:	4620      	mov	r0, r4
   d9210:	f7ff ffd7 	bl	d91c2 <_ZN6String4copyEPKcj>
}
   d9214:	4620      	mov	r0, r4
   d9216:	bd38      	pop	{r3, r4, r5, pc}

000d9218 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d9218:	b538      	push	{r3, r4, r5, lr}
   d921a:	4605      	mov	r5, r0
	if (buffer) {
   d921c:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d921e:	460c      	mov	r4, r1
	if (buffer) {
   d9220:	b160      	cbz	r0, d923c <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d9222:	686a      	ldr	r2, [r5, #4]
   d9224:	688b      	ldr	r3, [r1, #8]
   d9226:	429a      	cmp	r2, r3
   d9228:	d306      	bcc.n	d9238 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d922a:	6809      	ldr	r1, [r1, #0]
   d922c:	f002 fcb6 	bl	dbb9c <strcpy>
			len = rhs.len;
   d9230:	68a3      	ldr	r3, [r4, #8]
   d9232:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d9234:	2300      	movs	r3, #0
   d9236:	e00a      	b.n	d924e <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d9238:	f7ff fd9e 	bl	d8d78 <free>
		}
	}
	buffer = rhs.buffer;
   d923c:	6823      	ldr	r3, [r4, #0]
   d923e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d9240:	6863      	ldr	r3, [r4, #4]
   d9242:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d9244:	68a3      	ldr	r3, [r4, #8]
   d9246:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d9248:	2300      	movs	r3, #0
   d924a:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d924c:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d924e:	60a3      	str	r3, [r4, #8]
   d9250:	bd38      	pop	{r3, r4, r5, pc}

000d9252 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d9252:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d9254:	b510      	push	{r4, lr}
   d9256:	460b      	mov	r3, r1
   d9258:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d925a:	d007      	beq.n	d926c <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d925c:	6809      	ldr	r1, [r1, #0]
   d925e:	b119      	cbz	r1, d9268 <_ZN6StringaSERKS_+0x16>
   d9260:	689a      	ldr	r2, [r3, #8]
   d9262:	f7ff ffae 	bl	d91c2 <_ZN6String4copyEPKcj>
   d9266:	e001      	b.n	d926c <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d9268:	f7ff ff83 	bl	d9172 <_ZN6String10invalidateEv>

	return *this;
}
   d926c:	4620      	mov	r0, r4
   d926e:	bd10      	pop	{r4, pc}

000d9270 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d9270:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d9272:	b510      	push	{r4, lr}
   d9274:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d9276:	d001      	beq.n	d927c <_ZN6StringaSEOS_+0xc>
   d9278:	f7ff ffce 	bl	d9218 <_ZN6String4moveERS_>
	return *this;
}
   d927c:	4620      	mov	r0, r4
   d927e:	bd10      	pop	{r4, pc}

000d9280 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d9280:	b538      	push	{r3, r4, r5, lr}
   d9282:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d9284:	460c      	mov	r4, r1
   d9286:	b141      	cbz	r1, d929a <_ZN6StringaSEPKc+0x1a>
   d9288:	4608      	mov	r0, r1
   d928a:	f003 f9a3 	bl	dc5d4 <strlen>
   d928e:	4621      	mov	r1, r4
   d9290:	4602      	mov	r2, r0
   d9292:	4628      	mov	r0, r5
   d9294:	f7ff ff95 	bl	d91c2 <_ZN6String4copyEPKcj>
   d9298:	e001      	b.n	d929e <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d929a:	f7ff ff6a 	bl	d9172 <_ZN6String10invalidateEv>

	return *this;
}
   d929e:	4628      	mov	r0, r5
   d92a0:	bd38      	pop	{r3, r4, r5, pc}

000d92a2 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d92a2:	b570      	push	{r4, r5, r6, lr}
   d92a4:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d92a6:	460e      	mov	r6, r1
   d92a8:	b909      	cbnz	r1, d92ae <_ZN6String6concatEPKcj+0xc>
   d92aa:	2000      	movs	r0, #0
   d92ac:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d92ae:	b16a      	cbz	r2, d92cc <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d92b0:	6883      	ldr	r3, [r0, #8]
   d92b2:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d92b4:	4629      	mov	r1, r5
   d92b6:	f7ff ff73 	bl	d91a0 <_ZN6String7reserveEj>
   d92ba:	2800      	cmp	r0, #0
   d92bc:	d0f5      	beq.n	d92aa <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d92be:	6820      	ldr	r0, [r4, #0]
   d92c0:	68a3      	ldr	r3, [r4, #8]
   d92c2:	4631      	mov	r1, r6
   d92c4:	4418      	add	r0, r3
   d92c6:	f002 fc69 	bl	dbb9c <strcpy>
	len = newlen;
   d92ca:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d92cc:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d92ce:	bd70      	pop	{r4, r5, r6, pc}

000d92d0 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d92d0:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d92d2:	688a      	ldr	r2, [r1, #8]
   d92d4:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d92d6:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d92d8:	f7ff ffe3 	bl	d92a2 <_ZN6String6concatEPKcj>
   d92dc:	b910      	cbnz	r0, d92e4 <_ZplRK15StringSumHelperRK6String+0x14>
   d92de:	4620      	mov	r0, r4
   d92e0:	f7ff ff47 	bl	d9172 <_ZN6String10invalidateEv>
	return a;
}
   d92e4:	4620      	mov	r0, r4
   d92e6:	bd10      	pop	{r4, pc}

000d92e8 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d92e8:	b510      	push	{r4, lr}
   d92ea:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d92ec:	6800      	ldr	r0, [r0, #0]
   d92ee:	b108      	cbz	r0, d92f4 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d92f0:	f7ff fb46 	bl	d8980 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d92f4:	4620      	mov	r0, r4
   d92f6:	bd10      	pop	{r4, pc}

000d92f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d92f8:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d92fa:	4c06      	ldr	r4, [pc, #24]	; (d9314 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d92fc:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d92fe:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d9300:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d9302:	f7ff fb35 	bl	d8970 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d9306:	4620      	mov	r0, r4
   d9308:	4a03      	ldr	r2, [pc, #12]	; (d9318 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d930a:	4904      	ldr	r1, [pc, #16]	; (d931c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d930c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d9310:	f001 bc36 	b.w	dab80 <__aeabi_atexit>
   d9314:	2003df98 	.word	0x2003df98
   d9318:	2003d8b8 	.word	0x2003d8b8
   d931c:	000d92e9 	.word	0x000d92e9

000d9320 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d9320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9322:	4606      	mov	r6, r0
   d9324:	460d      	mov	r5, r1
   d9326:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d9328:	2400      	movs	r4, #0
  while (size--) {
   d932a:	42bd      	cmp	r5, r7
   d932c:	d00c      	beq.n	d9348 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d932e:	6833      	ldr	r3, [r6, #0]
   d9330:	f815 1b01 	ldrb.w	r1, [r5], #1
   d9334:	689b      	ldr	r3, [r3, #8]
   d9336:	4630      	mov	r0, r6
   d9338:	4798      	blx	r3
     if (chunk>=0)
   d933a:	2800      	cmp	r0, #0
   d933c:	db01      	blt.n	d9342 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d933e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d9340:	e7f3      	b.n	d932a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d9342:	2c00      	cmp	r4, #0
   d9344:	bf08      	it	eq
   d9346:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d9348:	4620      	mov	r0, r4
   d934a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d934c <_ZN5Print5printEPKc>:
   d934c:	b508      	push	{r3, lr}
   d934e:	f7fe f9db 	bl	d7708 <_ZN5Print5writeEPKc>
   d9352:	bd08      	pop	{r3, pc}

000d9354 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d9354:	6803      	ldr	r3, [r0, #0]
   d9356:	689b      	ldr	r3, [r3, #8]
   d9358:	4718      	bx	r3

000d935a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d935a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d935c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d935e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d9360:	f7ff fff8 	bl	d9354 <_ZN5Print5printEc>
  n += print('\n');
   d9364:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d9366:	4604      	mov	r4, r0
  n += print('\n');
   d9368:	4628      	mov	r0, r5
   d936a:	f7ff fff3 	bl	d9354 <_ZN5Print5printEc>
  return n;
}
   d936e:	4420      	add	r0, r4
   d9370:	bd38      	pop	{r3, r4, r5, pc}

000d9372 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d9372:	b538      	push	{r3, r4, r5, lr}
   d9374:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d9376:	f7fe f9c7 	bl	d7708 <_ZN5Print5writeEPKc>
   d937a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d937c:	4628      	mov	r0, r5
   d937e:	f7ff ffec 	bl	d935a <_ZN5Print7printlnEv>
  return n;
}
   d9382:	4420      	add	r0, r4
   d9384:	bd38      	pop	{r3, r4, r5, pc}

000d9386 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d9386:	b530      	push	{r4, r5, lr}
   d9388:	b08b      	sub	sp, #44	; 0x2c
   d938a:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d938c:	2100      	movs	r1, #0
   d938e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d9392:	2a01      	cmp	r2, #1
   d9394:	bf98      	it	ls
   d9396:	220a      	movls	r2, #10
   d9398:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d939c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d93a0:	fb05 3312 	mls	r3, r5, r2, r3
   d93a4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d93a8:	2b09      	cmp	r3, #9
   d93aa:	bf94      	ite	ls
   d93ac:	3330      	addls	r3, #48	; 0x30
   d93ae:	3337      	addhi	r3, #55	; 0x37
   d93b0:	b2db      	uxtb	r3, r3
   d93b2:	4621      	mov	r1, r4
   d93b4:	f804 3901 	strb.w	r3, [r4], #-1
   d93b8:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d93ba:	2d00      	cmp	r5, #0
   d93bc:	d1ee      	bne.n	d939c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d93be:	f7fe f9a3 	bl	d7708 <_ZN5Print5writeEPKc>
}
   d93c2:	b00b      	add	sp, #44	; 0x2c
   d93c4:	bd30      	pop	{r4, r5, pc}
	...

000d93c8 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d93c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d93cc:	ec57 6b10 	vmov	r6, r7, d0
   d93d0:	4682      	mov	sl, r0
   d93d2:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d93d4:	ee10 2a10 	vmov	r2, s0
   d93d8:	463b      	mov	r3, r7
   d93da:	ee10 0a10 	vmov	r0, s0
   d93de:	4639      	mov	r1, r7
   d93e0:	f002 f98a 	bl	db6f8 <__aeabi_dcmpun>
   d93e4:	b108      	cbz	r0, d93ea <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d93e6:	494e      	ldr	r1, [pc, #312]	; (d9520 <_ZN5Print10printFloatEdh+0x158>)
   d93e8:	e012      	b.n	d9410 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d93ea:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d93ee:	f04f 32ff 	mov.w	r2, #4294967295
   d93f2:	4b4c      	ldr	r3, [pc, #304]	; (d9524 <_ZN5Print10printFloatEdh+0x15c>)
   d93f4:	4630      	mov	r0, r6
   d93f6:	4649      	mov	r1, r9
   d93f8:	f002 f97e 	bl	db6f8 <__aeabi_dcmpun>
   d93fc:	b968      	cbnz	r0, d941a <_ZN5Print10printFloatEdh+0x52>
   d93fe:	f04f 32ff 	mov.w	r2, #4294967295
   d9402:	4b48      	ldr	r3, [pc, #288]	; (d9524 <_ZN5Print10printFloatEdh+0x15c>)
   d9404:	4630      	mov	r0, r6
   d9406:	4649      	mov	r1, r9
   d9408:	f002 f958 	bl	db6bc <__aeabi_dcmple>
   d940c:	b928      	cbnz	r0, d941a <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d940e:	4946      	ldr	r1, [pc, #280]	; (d9528 <_ZN5Print10printFloatEdh+0x160>)
   d9410:	4650      	mov	r0, sl
   d9412:	f7fe f979 	bl	d7708 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d9416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d941a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d941e:	4b43      	ldr	r3, [pc, #268]	; (d952c <_ZN5Print10printFloatEdh+0x164>)
   d9420:	4630      	mov	r0, r6
   d9422:	4639      	mov	r1, r7
   d9424:	f002 f95e 	bl	db6e4 <__aeabi_dcmpgt>
   d9428:	b108      	cbz	r0, d942e <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d942a:	4941      	ldr	r1, [pc, #260]	; (d9530 <_ZN5Print10printFloatEdh+0x168>)
   d942c:	e7f0      	b.n	d9410 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d942e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d9432:	4b40      	ldr	r3, [pc, #256]	; (d9534 <_ZN5Print10printFloatEdh+0x16c>)
   d9434:	4630      	mov	r0, r6
   d9436:	4639      	mov	r1, r7
   d9438:	f002 f936 	bl	db6a8 <__aeabi_dcmplt>
   d943c:	2800      	cmp	r0, #0
   d943e:	d1f4      	bne.n	d942a <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d9440:	2200      	movs	r2, #0
   d9442:	2300      	movs	r3, #0
   d9444:	4630      	mov	r0, r6
   d9446:	4639      	mov	r1, r7
   d9448:	f002 f92e 	bl	db6a8 <__aeabi_dcmplt>
   d944c:	b140      	cbz	r0, d9460 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d944e:	212d      	movs	r1, #45	; 0x2d
   d9450:	4650      	mov	r0, sl
   d9452:	f7ff ff7f 	bl	d9354 <_ZN5Print5printEc>
     number = -number;
   d9456:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d945a:	4604      	mov	r4, r0
     number = -number;
   d945c:	461f      	mov	r7, r3
   d945e:	e000      	b.n	d9462 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d9460:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d9462:	4935      	ldr	r1, [pc, #212]	; (d9538 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d9464:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d9468:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d946a:	fa5f f388 	uxtb.w	r3, r8
   d946e:	429d      	cmp	r5, r3
   d9470:	d906      	bls.n	d9480 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d9472:	2200      	movs	r2, #0
   d9474:	4b31      	ldr	r3, [pc, #196]	; (d953c <_ZN5Print10printFloatEdh+0x174>)
   d9476:	f001 ffcf 	bl	db418 <__aeabi_ddiv>
   d947a:	f108 0801 	add.w	r8, r8, #1
   d947e:	e7f4      	b.n	d946a <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d9480:	4632      	mov	r2, r6
   d9482:	463b      	mov	r3, r7
   d9484:	f001 fcec 	bl	dae60 <__adddf3>
   d9488:	460f      	mov	r7, r1
   d948a:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d948c:	f002 f972 	bl	db774 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d9490:	220a      	movs	r2, #10
   d9492:	4601      	mov	r1, r0
   d9494:	4680      	mov	r8, r0
   d9496:	4650      	mov	r0, sl
   d9498:	f7ff ff75 	bl	d9386 <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d949c:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d949e:	b3e5      	cbz	r5, d951a <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d94a0:	4640      	mov	r0, r8
   d94a2:	f001 fe19 	bl	db0d8 <__aeabi_ui2d>
   d94a6:	4602      	mov	r2, r0
   d94a8:	460b      	mov	r3, r1
   d94aa:	4630      	mov	r0, r6
   d94ac:	4639      	mov	r1, r7
   d94ae:	f001 fcd5 	bl	dae5c <__aeabi_dsub>
   d94b2:	4606      	mov	r6, r0
   d94b4:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d94b6:	4650      	mov	r0, sl
   d94b8:	4921      	ldr	r1, [pc, #132]	; (d9540 <_ZN5Print10printFloatEdh+0x178>)
   d94ba:	f7fe f925 	bl	d7708 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d94be:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d94c0:	2200      	movs	r2, #0
   d94c2:	4b1e      	ldr	r3, [pc, #120]	; (d953c <_ZN5Print10printFloatEdh+0x174>)
   d94c4:	4630      	mov	r0, r6
   d94c6:	4639      	mov	r1, r7
   d94c8:	f001 fe7c 	bl	db1c4 <__aeabi_dmul>
   d94cc:	4606      	mov	r6, r0
   d94ce:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d94d0:	f002 f928 	bl	db724 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d94d4:	f1b0 0900 	subs.w	r9, r0, #0
   d94d8:	da07      	bge.n	d94ea <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d94da:	212d      	movs	r1, #45	; 0x2d
   d94dc:	4650      	mov	r0, sl
   d94de:	f7ff ff39 	bl	d9354 <_ZN5Print5printEc>
            val = -n;
   d94e2:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d94e6:	4680      	mov	r8, r0
   d94e8:	e002      	b.n	d94f0 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d94ea:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d94ec:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d94f0:	220a      	movs	r2, #10
   d94f2:	4650      	mov	r0, sl
   d94f4:	f7ff ff47 	bl	d9386 <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d94f8:	4440      	add	r0, r8
   d94fa:	4404      	add	r4, r0
    remainder -= toPrint;
   d94fc:	4648      	mov	r0, r9
   d94fe:	f001 fdfb 	bl	db0f8 <__aeabi_i2d>
   d9502:	4602      	mov	r2, r0
   d9504:	460b      	mov	r3, r1
   d9506:	4630      	mov	r0, r6
   d9508:	4639      	mov	r1, r7
   d950a:	f001 fca7 	bl	dae5c <__aeabi_dsub>
   d950e:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d9510:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d9514:	4606      	mov	r6, r0
   d9516:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d9518:	d1d2      	bne.n	d94c0 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d951a:	4620      	mov	r0, r4
   d951c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9520:	000dd20c 	.word	0x000dd20c
   d9524:	7fefffff 	.word	0x7fefffff
   d9528:	000dd216 	.word	0x000dd216
   d952c:	41efffff 	.word	0x41efffff
   d9530:	000dd210 	.word	0x000dd210
   d9534:	c1efffff 	.word	0xc1efffff
   d9538:	3fe00000 	.word	0x3fe00000
   d953c:	40240000 	.word	0x40240000
   d9540:	000dd214 	.word	0x000dd214

000d9544 <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
   d9544:	b538      	push	{r3, r4, r5, lr}
   d9546:	4604      	mov	r4, r0
  return printFloat((double)n, digits);
   d9548:	ee10 0a10 	vmov	r0, s0
   d954c:	b2cd      	uxtb	r5, r1
   d954e:	f001 fde5 	bl	db11c <__aeabi_f2d>
   d9552:	ec41 0b10 	vmov	d0, r0, r1
   d9556:	4629      	mov	r1, r5
   d9558:	4620      	mov	r0, r4
}
   d955a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return write(c);
}

size_t Print::print(float n, int digits)
{
  return printFloat((double)n, digits);
   d955e:	f7ff bf33 	b.w	d93c8 <_ZN5Print10printFloatEdh>

000d9562 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d9562:	b40c      	push	{r2, r3}
   d9564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9568:	b087      	sub	sp, #28
   d956a:	af00      	add	r7, sp, #0
   d956c:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d9570:	4605      	mov	r5, r0
   d9572:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d9576:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d9578:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d957a:	4623      	mov	r3, r4
   d957c:	464a      	mov	r2, r9
   d957e:	2114      	movs	r1, #20
   d9580:	1d38      	adds	r0, r7, #4
   d9582:	f7ff fc31 	bl	d8de8 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d9586:	2813      	cmp	r0, #19
   d9588:	d805      	bhi.n	d9596 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d958a:	1d39      	adds	r1, r7, #4
   d958c:	4628      	mov	r0, r5
   d958e:	f7fe f8bb 	bl	d7708 <_ZN5Print5writeEPKc>
   d9592:	4604      	mov	r4, r0
   d9594:	e013      	b.n	d95be <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d9596:	f100 0308 	add.w	r3, r0, #8
   d959a:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d959e:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d95a0:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d95a4:	1c41      	adds	r1, r0, #1
   d95a6:	4623      	mov	r3, r4
   d95a8:	464a      	mov	r2, r9
   d95aa:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d95ac:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d95ae:	f7ff fc1b 	bl	d8de8 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d95b2:	4669      	mov	r1, sp
   d95b4:	4628      	mov	r0, r5
   d95b6:	f7fe f8a7 	bl	d7708 <_ZN5Print5writeEPKc>
   d95ba:	4604      	mov	r4, r0
   d95bc:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d95be:	b11e      	cbz	r6, d95c8 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d95c0:	4628      	mov	r0, r5
   d95c2:	f7ff feca 	bl	d935a <_ZN5Print7printlnEv>
   d95c6:	4404      	add	r4, r0
    return n;
}
   d95c8:	4620      	mov	r0, r4
   d95ca:	371c      	adds	r7, #28
   d95cc:	46bd      	mov	sp, r7
   d95ce:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d95d2:	b002      	add	sp, #8
   d95d4:	4770      	bx	lr
	...

000d95d8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d95d8:	4b01      	ldr	r3, [pc, #4]	; (d95e0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d95da:	4a02      	ldr	r2, [pc, #8]	; (d95e4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d95dc:	601a      	str	r2, [r3, #0]
   d95de:	4770      	bx	lr
   d95e0:	2003df9c 	.word	0x2003df9c
   d95e4:	000dd28d 	.word	0x000dd28d

000d95e8 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d95e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d95ea:	4b14      	ldr	r3, [pc, #80]	; (d963c <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d95ec:	4f14      	ldr	r7, [pc, #80]	; (d9640 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d95ee:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d95f0:	4b14      	ldr	r3, [pc, #80]	; (d9644 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d95f2:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d95f4:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d95f6:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d95f8:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d95fa:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d95fc:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d95fe:	d01b      	beq.n	d9638 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d9600:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d9602:	ad01      	add	r5, sp, #4
   d9604:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d9608:	f002 f96e 	bl	db8e8 <localtime>
	calendar_time->tm_year += 1900;
   d960c:	6943      	ldr	r3, [r0, #20]
   d960e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d9612:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d9614:	4604      	mov	r4, r0
   d9616:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d9618:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d961a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d961c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d961e:	f8d4 e000 	ldr.w	lr, [r4]
   d9622:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9626:	ad01      	add	r5, sp, #4
   d9628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d962a:	4c07      	ldr	r4, [pc, #28]	; (d9648 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d962c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d962e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d9632:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9634:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d9638:	b00b      	add	sp, #44	; 0x2c
   d963a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d963c:	2003dfd0 	.word	0x2003dfd0
   d9640:	2003dfcc 	.word	0x2003dfcc
   d9644:	2003dfc8 	.word	0x2003dfc8
   d9648:	2003dfa0 	.word	0x2003dfa0

000d964c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d964c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d964e:	2000      	movs	r0, #0
   d9650:	f7ff fb7a 	bl	d8d48 <spark_sync_time_pending>
   d9654:	b128      	cbz	r0, d9662 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d9656:	f7ff fb5f 	bl	d8d18 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d965a:	f080 0001 	eor.w	r0, r0, #1
   d965e:	b2c0      	uxtb	r0, r0
   d9660:	bd08      	pop	{r3, pc}
   d9662:	2001      	movs	r0, #1
    }
   d9664:	bd08      	pop	{r3, pc}
	...

000d9668 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d9668:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d966a:	4b0e      	ldr	r3, [pc, #56]	; (d96a4 <_ZN9TimeClass7timeStrEl+0x3c>)
   d966c:	681b      	ldr	r3, [r3, #0]
   d966e:	4419      	add	r1, r3
   d9670:	4b0d      	ldr	r3, [pc, #52]	; (d96a8 <_ZN9TimeClass7timeStrEl+0x40>)
   d9672:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d9674:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d9676:	a802      	add	r0, sp, #8
   d9678:	4419      	add	r1, r3
   d967a:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d967e:	f002 f933 	bl	db8e8 <localtime>
        char* ascstr = asctime(calendar_time);
   d9682:	f002 f8e7 	bl	db854 <asctime>
   d9686:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d9688:	f002 ffa4 	bl	dc5d4 <strlen>
        ascstr[len-1] = 0; // remove final newline
   d968c:	4428      	add	r0, r5
   d968e:	2300      	movs	r3, #0
   d9690:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d9694:	4629      	mov	r1, r5
   d9696:	4620      	mov	r0, r4
   d9698:	f7ff fdab 	bl	d91f2 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d969c:	4620      	mov	r0, r4
   d969e:	b003      	add	sp, #12
   d96a0:	bd30      	pop	{r4, r5, pc}
   d96a2:	bf00      	nop
   d96a4:	2003dfd0 	.word	0x2003dfd0
   d96a8:	2003dfc8 	.word	0x2003dfc8

000d96ac <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d96ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d96b0:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d96b2:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d96b4:	4607      	mov	r7, r0
   d96b6:	4689      	mov	r9, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d96b8:	4620      	mov	r0, r4
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d96ba:	4611      	mov	r1, r2
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d96bc:	223f      	movs	r2, #63	; 0x3f
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d96be:	461d      	mov	r5, r3
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d96c0:	f002 ffa5 	bl	dc60e <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d96c4:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d96c6:	4620      	mov	r0, r4
String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d96c8:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d96cc:	f002 ff82 	bl	dc5d4 <strlen>
   d96d0:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d96d2:	b925      	cbnz	r5, d96de <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        strcpy(time_zone_str, "Z");
   d96d4:	4924      	ldr	r1, [pc, #144]	; (d9768 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xbc>)
   d96d6:	a803      	add	r0, sp, #12
   d96d8:	f002 fa60 	bl	dbb9c <strcpy>
   d96dc:	e013      	b.n	d9706 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5a>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d96de:	213c      	movs	r1, #60	; 0x3c
   d96e0:	fb95 f2f1 	sdiv	r2, r5, r1
   d96e4:	2a00      	cmp	r2, #0
   d96e6:	bfb8      	it	lt
   d96e8:	4252      	neglt	r2, r2
   d96ea:	fb92 f3f1 	sdiv	r3, r2, r1
   d96ee:	fb01 2213 	mls	r2, r1, r3, r2
   d96f2:	9200      	str	r2, [sp, #0]
   d96f4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d96f8:	4a1c      	ldr	r2, [pc, #112]	; (d976c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xc0>)
   d96fa:	fb95 f3f3 	sdiv	r3, r5, r3
   d96fe:	2110      	movs	r1, #16
   d9700:	a803      	add	r0, sp, #12
   d9702:	f7ff fb61 	bl	d8dc8 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d9706:	4625      	mov	r5, r4
   d9708:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d970a:	f108 3aff 	add.w	sl, r8, #4294967295
   d970e:	45b2      	cmp	sl, r6
   d9710:	d91b      	bls.n	d974a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9e>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d9712:	782b      	ldrb	r3, [r5, #0]
   d9714:	2b25      	cmp	r3, #37	; 0x25
   d9716:	d116      	bne.n	d9746 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
   d9718:	786b      	ldrb	r3, [r5, #1]
   d971a:	2b7a      	cmp	r3, #122	; 0x7a
   d971c:	d113      	bne.n	d9746 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
        {
            size_t tzlen = strlen(time_zone_str);
   d971e:	a803      	add	r0, sp, #12
   d9720:	f002 ff58 	bl	dc5d4 <strlen>
   d9724:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d9726:	4430      	add	r0, r6
   d9728:	ebc6 020a 	rsb	r2, r6, sl
   d972c:	1ca9      	adds	r1, r5, #2
   d972e:	4420      	add	r0, r4
   d9730:	f002 f9e1 	bl	dbaf6 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d9734:	4642      	mov	r2, r8
   d9736:	a903      	add	r1, sp, #12
   d9738:	4628      	mov	r0, r5
   d973a:	f002 f9dc 	bl	dbaf6 <memcpy>
            len = strlen(format_str);
   d973e:	4620      	mov	r0, r4
   d9740:	f002 ff48 	bl	dc5d4 <strlen>
   d9744:	4680      	mov	r8, r0
   d9746:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d9748:	e7de      	b.n	d9708 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5c>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
   d974a:	464b      	mov	r3, r9
   d974c:	4622      	mov	r2, r4
   d974e:	2132      	movs	r1, #50	; 0x32
   d9750:	a807      	add	r0, sp, #28
   d9752:	f002 fa8b 	bl	dbc6c <strftime>
    return String(buf);
   d9756:	a907      	add	r1, sp, #28
   d9758:	4638      	mov	r0, r7
   d975a:	f7ff fd4a 	bl	d91f2 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d975e:	4638      	mov	r0, r7
   d9760:	b024      	add	sp, #144	; 0x90
   d9762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9766:	bf00      	nop
   d9768:	000dd9b5 	.word	0x000dd9b5
   d976c:	000dd2f6 	.word	0x000dd2f6

000d9770 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
   d9770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d9772:	4605      	mov	r5, r0
   d9774:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
   d9776:	461c      	mov	r4, r3
   d9778:	b913      	cbnz	r3, d9780 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
   d977a:	4b12      	ldr	r3, [pc, #72]	; (d97c4 <_ZN9TimeClass6formatElPKc+0x54>)
   d977c:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
   d977e:	b12c      	cbz	r4, d978c <_ZN9TimeClass6formatElPKc+0x1c>
   d9780:	4b11      	ldr	r3, [pc, #68]	; (d97c8 <_ZN9TimeClass6formatElPKc+0x58>)
   d9782:	4620      	mov	r0, r4
   d9784:	6819      	ldr	r1, [r3, #0]
   d9786:	f002 f9ff 	bl	dbb88 <strcmp>
   d978a:	b920      	cbnz	r0, d9796 <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
   d978c:	9901      	ldr	r1, [sp, #4]
   d978e:	4628      	mov	r0, r5
   d9790:	f7ff ff6a 	bl	d9668 <_ZN9TimeClass7timeStrEl>
   d9794:	e013      	b.n	d97be <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
   d9796:	4f0d      	ldr	r7, [pc, #52]	; (d97cc <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
   d9798:	9a01      	ldr	r2, [sp, #4]
   d979a:	683b      	ldr	r3, [r7, #0]
   d979c:	4e0c      	ldr	r6, [pc, #48]	; (d97d0 <_ZN9TimeClass6formatElPKc+0x60>)
   d979e:	441a      	add	r2, r3
   d97a0:	6833      	ldr	r3, [r6, #0]
   d97a2:	a802      	add	r0, sp, #8
   d97a4:	4413      	add	r3, r2
   d97a6:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
   d97aa:	f002 f89d 	bl	db8e8 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d97ae:	683a      	ldr	r2, [r7, #0]
   d97b0:	6833      	ldr	r3, [r6, #0]
   d97b2:	4601      	mov	r1, r0
   d97b4:	4413      	add	r3, r2
   d97b6:	4628      	mov	r0, r5
   d97b8:	4622      	mov	r2, r4
   d97ba:	f7ff ff77 	bl	d96ac <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
   d97be:	4628      	mov	r0, r5
   d97c0:	b003      	add	sp, #12
   d97c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d97c4:	2003dfc4 	.word	0x2003dfc4
   d97c8:	2003d800 	.word	0x2003d800
   d97cc:	2003dfd0 	.word	0x2003dfd0
   d97d0:	2003dfc8 	.word	0x2003dfc8

000d97d4 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d97d4:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d97d6:	2000      	movs	r0, #0
   d97d8:	f7ff f87a 	bl	d88d0 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d97dc:	4604      	mov	r4, r0
   d97de:	b968      	cbnz	r0, d97fc <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d97e0:	f7ff fa06 	bl	d8bf0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d97e4:	2801      	cmp	r0, #1
   d97e6:	d10b      	bne.n	d9800 <_ZN9TimeClass7isValidEv+0x2c>
   d97e8:	4620      	mov	r0, r4
   d97ea:	f7ff fa21 	bl	d8c30 <system_thread_get_state>
   d97ee:	b938      	cbnz	r0, d9800 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d97f0:	f7ff ff2c 	bl	d964c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d97f4:	b930      	cbnz	r0, d9804 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d97f6:	f7ff fa87 	bl	d8d08 <spark_process>
   d97fa:	e7f9      	b.n	d97f0 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d97fc:	2001      	movs	r0, #1
   d97fe:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d9800:	2000      	movs	r0, #0
   d9802:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d9804:	f7ff ff22 	bl	d964c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d9808:	2000      	movs	r0, #0
   d980a:	f7ff f861 	bl	d88d0 <HAL_RTC_Time_Is_Valid>
   d980e:	3000      	adds	r0, #0
   d9810:	bf18      	it	ne
   d9812:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d9814:	bd10      	pop	{r4, pc}

000d9816 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d9816:	b508      	push	{r3, lr}
    (void)isValid();
   d9818:	f7ff ffdc 	bl	d97d4 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d981c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d9820:	f7ff b836 	b.w	d8890 <HAL_RTC_Get_UnixTime>

000d9824 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d9824:	b508      	push	{r3, lr}
	return hour(now());
   d9826:	f7ff fff6 	bl	d9816 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d982a:	f7ff fedd 	bl	d95e8 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d982e:	4b01      	ldr	r3, [pc, #4]	; (d9834 <_ZN9TimeClass4hourEv+0x10>)
   d9830:	6898      	ldr	r0, [r3, #8]
   d9832:	bd08      	pop	{r3, pc}
   d9834:	2003dfa0 	.word	0x2003dfa0

000d9838 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d9838:	4b02      	ldr	r3, [pc, #8]	; (d9844 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d983a:	681a      	ldr	r2, [r3, #0]
   d983c:	4b02      	ldr	r3, [pc, #8]	; (d9848 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d983e:	601a      	str	r2, [r3, #0]
   d9840:	4770      	bx	lr
   d9842:	bf00      	nop
   d9844:	2003d800 	.word	0x2003d800
   d9848:	2003dfc4 	.word	0x2003dfc4

000d984c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d984c:	2100      	movs	r1, #0
   d984e:	f7ff b9df 	b.w	d8c10 <system_delay_ms>

000d9852 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d9852:	b510      	push	{r4, lr}
   d9854:	4604      	mov	r4, r0
   d9856:	f7fb fddd 	bl	d5414 <_ZNSt14_Function_baseD1Ev>
   d985a:	4620      	mov	r0, r4
   d985c:	bd10      	pop	{r4, pc}
	...

000d9860 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d9860:	4803      	ldr	r0, [pc, #12]	; (d9870 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d9862:	4a04      	ldr	r2, [pc, #16]	; (d9874 <_GLOBAL__sub_I_RGB+0x14>)
   d9864:	4904      	ldr	r1, [pc, #16]	; (d9878 <_GLOBAL__sub_I_RGB+0x18>)
   d9866:	2300      	movs	r3, #0
   d9868:	6083      	str	r3, [r0, #8]
   d986a:	f001 b989 	b.w	dab80 <__aeabi_atexit>
   d986e:	bf00      	nop
   d9870:	2003dfd8 	.word	0x2003dfd8
   d9874:	2003d8b8 	.word	0x2003d8b8
   d9878:	000d9853 	.word	0x000d9853

000d987c <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d987c:	7d00      	ldrb	r0, [r0, #20]
   d987e:	4770      	bx	lr

000d9880 <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d9880:	7d03      	ldrb	r3, [r0, #20]
   d9882:	b11b      	cbz	r3, d988c <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d9884:	6983      	ldr	r3, [r0, #24]
   d9886:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d988a:	d102      	bne.n	d9892 <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d988c:	ed9f 0a05 	vldr	s0, [pc, #20]	; d98a4 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d9890:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d9892:	ee07 3a90 	vmov	s15, r3
   d9896:	ed9f 7a04 	vldr	s14, [pc, #16]	; d98a8 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d989a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d989e:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d98a2:	4770      	bx	lr
   d98a4:	00000000 	.word	0x00000000
   d98a8:	42c80000 	.word	0x42c80000

000d98ac <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d98ac:	7d03      	ldrb	r3, [r0, #20]
   d98ae:	b11b      	cbz	r3, d98b8 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d98b0:	6a03      	ldr	r3, [r0, #32]
   d98b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d98b6:	d102      	bne.n	d98be <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d98b8:	ed9f 0a05 	vldr	s0, [pc, #20]	; d98d0 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d98bc:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d98be:	ee07 3a90 	vmov	s15, r3
   d98c2:	ed9f 7a04 	vldr	s14, [pc, #16]	; d98d4 <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d98c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d98ca:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d98ce:	4770      	bx	lr
   d98d0:	00000000 	.word	0x00000000
   d98d4:	42c80000 	.word	0x42c80000

000d98d8 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d98d8:	7d03      	ldrb	r3, [r0, #20]
   d98da:	b17b      	cbz	r3, d98fc <_ZNK14CellularSignal10getQualityEv+0x24>
   d98dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d98de:	2b00      	cmp	r3, #0
   d98e0:	db0c      	blt.n	d98fc <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d98e2:	ee07 3a90 	vmov	s15, r3
   d98e6:	eddf 6a07 	vldr	s13, [pc, #28]	; d9904 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d98ea:	ed9f 0a07 	vldr	s0, [pc, #28]	; d9908 <_ZNK14CellularSignal10getQualityEv+0x30>
   d98ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d98f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d98f6:	ee27 0a80 	vmul.f32	s0, s15, s0
   d98fa:	4770      	bx	lr
    }

    return -1.0f;
   d98fc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d9900:	4770      	bx	lr
   d9902:	bf00      	nop
   d9904:	477fff00 	.word	0x477fff00
   d9908:	42c80000 	.word	0x42c80000

000d990c <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d990c:	7d03      	ldrb	r3, [r0, #20]
   d990e:	b17b      	cbz	r3, d9930 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d9910:	69c3      	ldr	r3, [r0, #28]
   d9912:	2b00      	cmp	r3, #0
   d9914:	db0c      	blt.n	d9930 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d9916:	ee07 3a90 	vmov	s15, r3
   d991a:	eddf 6a07 	vldr	s13, [pc, #28]	; d9938 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d991e:	ed9f 0a07 	vldr	s0, [pc, #28]	; d993c <_ZNK14CellularSignal11getStrengthEv+0x30>
   d9922:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d9926:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d992a:	ee27 0a80 	vmul.f32	s0, s15, s0
   d992e:	4770      	bx	lr
    }

    return -1.0f;
   d9930:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d9934:	4770      	bx	lr
   d9936:	bf00      	nop
   d9938:	477fff00 	.word	0x477fff00
   d993c:	42c80000 	.word	0x42c80000

000d9940 <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d9940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9944:	4607      	mov	r7, r0
   d9946:	460c      	mov	r4, r1
{
    if (base == 0) {
   d9948:	4615      	mov	r5, r2
   d994a:	b92a      	cbnz	r2, d9958 <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d994c:	6803      	ldr	r3, [r0, #0]
   d994e:	b2c9      	uxtb	r1, r1
   d9950:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d9952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d9956:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d9958:	2900      	cmp	r1, #0
   d995a:	da07      	bge.n	d996c <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d995c:	2a0a      	cmp	r2, #10
   d995e:	d105      	bne.n	d996c <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d9960:	212d      	movs	r1, #45	; 0x2d
   d9962:	f7ff fcf7 	bl	d9354 <_ZN5Print5printEc>
            val = -n;
   d9966:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d9968:	4606      	mov	r6, r0
            val = -n;
   d996a:	e001      	b.n	d9970 <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d996c:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d996e:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d9970:	b2ea      	uxtb	r2, r5
   d9972:	4638      	mov	r0, r7
   d9974:	f7ff fd07 	bl	d9386 <_ZN5Print11printNumberEmh>
    }
}
   d9978:	4430      	add	r0, r6
   d997a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d997e <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
   d997e:	b570      	push	{r4, r5, r6, lr}
   d9980:	460d      	mov	r5, r1
   d9982:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d9984:	220a      	movs	r2, #10
   d9986:	6881      	ldr	r1, [r0, #8]
   d9988:	4628      	mov	r0, r5
   d998a:	f7ff ffd9 	bl	d9940 <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
   d998e:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d9990:	4604      	mov	r4, r0
    n += p.print(',');
   d9992:	4628      	mov	r0, r5
   d9994:	f7ff fcde 	bl	d9354 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d9998:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d999a:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d999c:	68f1      	ldr	r1, [r6, #12]
   d999e:	4628      	mov	r0, r5
   d99a0:	f7ff ffce 	bl	d9940 <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
   d99a4:	4420      	add	r0, r4
   d99a6:	bd70      	pop	{r4, r5, r6, pc}

000d99a8 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d99a8:	f1a0 0004 	sub.w	r0, r0, #4
   d99ac:	f7ff bfe7 	b.w	d997e <_ZNK14CellularSignal7printToER5Print>

000d99b0 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d99b0:	6800      	ldr	r0, [r0, #0]
   d99b2:	f000 bba2 	b.w	da0fa <_ZN7TwoWire4lockEv>

000d99b6 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d99b6:	b510      	push	{r4, lr}
   d99b8:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d99ba:	6001      	str	r1, [r0, #0]
   d99bc:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d99be:	b10a      	cbz	r2, d99c4 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d99c0:	f7ff fff6 	bl	d99b0 <_ZN9FuelGauge4lockEv>
    }
}
   d99c4:	4620      	mov	r0, r4
   d99c6:	bd10      	pop	{r4, pc}

000d99c8 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d99c8:	b538      	push	{r3, r4, r5, lr}
   d99ca:	4604      	mov	r4, r0
   d99cc:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d99ce:	f001 f8b1 	bl	dab34 <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d99d2:	462a      	mov	r2, r5
   d99d4:	4601      	mov	r1, r0
   d99d6:	4620      	mov	r0, r4
   d99d8:	f7ff ffed 	bl	d99b6 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d99dc:	4620      	mov	r0, r4
   d99de:	bd38      	pop	{r3, r4, r5, pc}

000d99e0 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d99e0:	6800      	ldr	r0, [r0, #0]
   d99e2:	f000 bb93 	b.w	da10c <_ZN7TwoWire6unlockEv>

000d99e6 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d99e6:	b510      	push	{r4, lr}
{
    if (lock_) {
   d99e8:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d99ea:	4604      	mov	r4, r0
{
    if (lock_) {
   d99ec:	b10b      	cbz	r3, d99f2 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d99ee:	f7ff fff7 	bl	d99e0 <_ZN9FuelGauge6unlockEv>
    }
}
   d99f2:	4620      	mov	r0, r4
   d99f4:	bd10      	pop	{r4, pc}

000d99f6 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d99f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d99f8:	4604      	mov	r4, r0
   d99fa:	4616      	mov	r6, r2
   d99fc:	461d      	mov	r5, r3
   d99fe:	460f      	mov	r7, r1
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d9a00:	f7ff ffd6 	bl	d99b0 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   d9a04:	6820      	ldr	r0, [r4, #0]
   d9a06:	2136      	movs	r1, #54	; 0x36
   d9a08:	f000 fb6c 	bl	da0e4 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
   d9a0c:	6820      	ldr	r0, [r4, #0]
   d9a0e:	6803      	ldr	r3, [r0, #0]
   d9a10:	4639      	mov	r1, r7
   d9a12:	689b      	ldr	r3, [r3, #8]
   d9a14:	4798      	blx	r3
    i2c_.endTransmission(true);
   d9a16:	2101      	movs	r1, #1
   d9a18:	6820      	ldr	r0, [r4, #0]
   d9a1a:	f000 fb66 	bl	da0ea <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
   d9a1e:	2202      	movs	r2, #2
   d9a20:	2136      	movs	r1, #54	; 0x36
   d9a22:	2301      	movs	r3, #1
   d9a24:	6820      	ldr	r0, [r4, #0]
   d9a26:	f000 fb47 	bl	da0b8 <_ZN7TwoWire11requestFromEhjh>
    MSB = i2c_.read();
   d9a2a:	6820      	ldr	r0, [r4, #0]
   d9a2c:	6803      	ldr	r3, [r0, #0]
   d9a2e:	695b      	ldr	r3, [r3, #20]
   d9a30:	4798      	blx	r3
   d9a32:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
   d9a34:	6820      	ldr	r0, [r4, #0]
   d9a36:	6803      	ldr	r3, [r0, #0]
   d9a38:	695b      	ldr	r3, [r3, #20]
   d9a3a:	4798      	blx	r3
   d9a3c:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d9a3e:	4620      	mov	r0, r4
}
   d9a40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d9a44:	f7ff bfcc 	b.w	d99e0 <_ZN9FuelGauge6unlockEv>

000d9a48 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
   d9a48:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d9a4a:	ab02      	add	r3, sp, #8
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d9a4c:	2200      	movs	r2, #0
	byte LSB = 0;
   d9a4e:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d9a52:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
   d9a56:	2104      	movs	r1, #4
   d9a58:	f10d 0206 	add.w	r2, sp, #6
   d9a5c:	f7ff ffcb 	bl	d99f6 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d9a60:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d9a64:	f001 fb48 	bl	db0f8 <__aeabi_i2d>
   d9a68:	2200      	movs	r2, #0
   d9a6a:	4b09      	ldr	r3, [pc, #36]	; (d9a90 <_ZN9FuelGauge6getSoCEv+0x48>)
   d9a6c:	f001 fbaa 	bl	db1c4 <__aeabi_dmul>
   d9a70:	f001 fea0 	bl	db7b4 <__aeabi_d2f>
   d9a74:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d9a78:	ee00 3a10 	vmov	s0, r3
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d9a7c:	ee07 0a90 	vmov	s15, r0
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d9a80:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d9a84:	ee37 0a80 	vadd.f32	s0, s15, s0
   d9a88:	b003      	add	sp, #12
   d9a8a:	f85d fb04 	ldr.w	pc, [sp], #4
   d9a8e:	bf00      	nop
   d9a90:	3f700000 	.word	0x3f700000

000d9a94 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d9a94:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d9a96:	4b0c      	ldr	r3, [pc, #48]	; (d9ac8 <serialEventRun+0x34>)
   d9a98:	b133      	cbz	r3, d9aa8 <serialEventRun+0x14>
   d9a9a:	f000 f977 	bl	d9d8c <_Z16_fetch_usbserialv>
   d9a9e:	6803      	ldr	r3, [r0, #0]
   d9aa0:	691b      	ldr	r3, [r3, #16]
   d9aa2:	4798      	blx	r3
   d9aa4:	2800      	cmp	r0, #0
   d9aa6:	dc09      	bgt.n	d9abc <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d9aa8:	4b08      	ldr	r3, [pc, #32]	; (d9acc <serialEventRun+0x38>)
   d9aaa:	b163      	cbz	r3, d9ac6 <serialEventRun+0x32>
   d9aac:	f000 fa84 	bl	d9fb8 <_Z22__fetch_global_Serial1v>
   d9ab0:	6803      	ldr	r3, [r0, #0]
   d9ab2:	691b      	ldr	r3, [r3, #16]
   d9ab4:	4798      	blx	r3
   d9ab6:	2800      	cmp	r0, #0
   d9ab8:	dc03      	bgt.n	d9ac2 <serialEventRun+0x2e>
   d9aba:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d9abc:	f3af 8000 	nop.w
   d9ac0:	e7f2      	b.n	d9aa8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d9ac2:	f3af 8000 	nop.w
   d9ac6:	bd08      	pop	{r3, pc}
	...

000d9ad0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d9ad0:	b508      	push	{r3, lr}
	serialEventRun();
   d9ad2:	f7ff ffdf 	bl	d9a94 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d9ad6:	f7fe fed3 	bl	d8880 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d9ada:	4b01      	ldr	r3, [pc, #4]	; (d9ae0 <_post_loop+0x10>)
   d9adc:	6018      	str	r0, [r3, #0]
   d9ade:	bd08      	pop	{r3, pc}
   d9ae0:	2003e3c4 	.word	0x2003e3c4

000d9ae4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d9ae4:	4802      	ldr	r0, [pc, #8]	; (d9af0 <_Z33system_initialize_user_backup_ramv+0xc>)
   d9ae6:	4a03      	ldr	r2, [pc, #12]	; (d9af4 <_Z33system_initialize_user_backup_ramv+0x10>)
   d9ae8:	4903      	ldr	r1, [pc, #12]	; (d9af8 <_Z33system_initialize_user_backup_ramv+0x14>)
   d9aea:	1a12      	subs	r2, r2, r0
   d9aec:	f002 b803 	b.w	dbaf6 <memcpy>
   d9af0:	2003f400 	.word	0x2003f400
   d9af4:	2003f404 	.word	0x2003f404
   d9af8:	000ddaa0 	.word	0x000ddaa0

000d9afc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d9afc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9afe:	2300      	movs	r3, #0
   d9b00:	9300      	str	r3, [sp, #0]
   d9b02:	461a      	mov	r2, r3
   d9b04:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9b08:	f7ff f8a4 	bl	d8c54 <system_ctrl_set_result>
}
   d9b0c:	b003      	add	sp, #12
   d9b0e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9b14 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d9b14:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d9b16:	8843      	ldrh	r3, [r0, #2]
   d9b18:	2b0a      	cmp	r3, #10
   d9b1a:	d008      	beq.n	d9b2e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d9b1c:	2b50      	cmp	r3, #80	; 0x50
   d9b1e:	d109      	bne.n	d9b34 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d9b20:	4b09      	ldr	r3, [pc, #36]	; (d9b48 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d9b22:	681b      	ldr	r3, [r3, #0]
   d9b24:	b13b      	cbz	r3, d9b36 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d9b26:	b003      	add	sp, #12
   d9b28:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d9b2c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d9b2e:	f7ff ffe5 	bl	d9afc <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d9b32:	e006      	b.n	d9b42 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9b34:	2300      	movs	r3, #0
   d9b36:	9300      	str	r3, [sp, #0]
   d9b38:	461a      	mov	r2, r3
   d9b3a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9b3e:	f7ff f889 	bl	d8c54 <system_ctrl_set_result>
        break;
    }
}
   d9b42:	b003      	add	sp, #12
   d9b44:	f85d fb04 	ldr.w	pc, [sp], #4
   d9b48:	2003dfe8 	.word	0x2003dfe8

000d9b4c <module_user_init_hook>:

void module_user_init_hook()
{
   d9b4c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d9b4e:	4c10      	ldr	r4, [pc, #64]	; (d9b90 <module_user_init_hook+0x44>)
   d9b50:	4d10      	ldr	r5, [pc, #64]	; (d9b94 <module_user_init_hook+0x48>)
   d9b52:	6823      	ldr	r3, [r4, #0]
   d9b54:	42ab      	cmp	r3, r5
   d9b56:	4b10      	ldr	r3, [pc, #64]	; (d9b98 <module_user_init_hook+0x4c>)
   d9b58:	bf0c      	ite	eq
   d9b5a:	2201      	moveq	r2, #1
   d9b5c:	2200      	movne	r2, #0
   d9b5e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d9b60:	d002      	beq.n	d9b68 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d9b62:	f7ff ffbf 	bl	d9ae4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d9b66:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d9b68:	f7fe fe7a 	bl	d8860 <HAL_RNG_GetRandomNumber>
   d9b6c:	4604      	mov	r4, r0
    srand(seed);
   d9b6e:	f001 ffd5 	bl	dbb1c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d9b72:	4b0a      	ldr	r3, [pc, #40]	; (d9b9c <module_user_init_hook+0x50>)
   d9b74:	b113      	cbz	r3, d9b7c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d9b76:	4620      	mov	r0, r4
   d9b78:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d9b7c:	2100      	movs	r1, #0
   d9b7e:	4807      	ldr	r0, [pc, #28]	; (d9b9c <module_user_init_hook+0x50>)
   d9b80:	f7ff f8ea 	bl	d8d58 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d9b84:	2100      	movs	r1, #0
   d9b86:	4806      	ldr	r0, [pc, #24]	; (d9ba0 <module_user_init_hook+0x54>)
}
   d9b88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d9b8c:	f7ff b858 	b.w	d8c40 <system_ctrl_set_app_request_handler>
   d9b90:	2003f400 	.word	0x2003f400
   d9b94:	9a271c1e 	.word	0x9a271c1e
   d9b98:	2003dfec 	.word	0x2003dfec
   d9b9c:	00000000 	.word	0x00000000
   d9ba0:	000d9b15 	.word	0x000d9b15

000d9ba4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d9ba4:	4770      	bx	lr

000d9ba6 <_ZN9IPAddressD0Ev>:
   d9ba6:	b510      	push	{r4, lr}
   d9ba8:	2118      	movs	r1, #24
   d9baa:	4604      	mov	r4, r0
   d9bac:	f000 fff6 	bl	dab9c <_ZdlPvj>
   d9bb0:	4620      	mov	r0, r4
   d9bb2:	bd10      	pop	{r4, pc}

000d9bb4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d9bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d9bb6:	7d03      	ldrb	r3, [r0, #20]
   d9bb8:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d9bba:	b08d      	sub	sp, #52	; 0x34
   d9bbc:	460e      	mov	r6, r1
   d9bbe:	f100 0704 	add.w	r7, r0, #4
   d9bc2:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d9bc6:	d002      	beq.n	d9bce <_ZNK9IPAddress7printToER5Print+0x1a>
   d9bc8:	f100 0508 	add.w	r5, r0, #8
   d9bcc:	e018      	b.n	d9c00 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d9bce:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9bd0:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d9bd2:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9bd6:	232f      	movs	r3, #47	; 0x2f
   d9bd8:	462a      	mov	r2, r5
   d9bda:	200a      	movs	r0, #10
   d9bdc:	f7fe fee0 	bl	d89a0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d9be0:	4628      	mov	r0, r5
   d9be2:	f002 fcf7 	bl	dc5d4 <strlen>
   d9be6:	6833      	ldr	r3, [r6, #0]
   d9be8:	4602      	mov	r2, r0
   d9bea:	68db      	ldr	r3, [r3, #12]
   d9bec:	4629      	mov	r1, r5
   d9bee:	4630      	mov	r0, r6
   d9bf0:	4798      	blx	r3
   d9bf2:	e00f      	b.n	d9c14 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d9bf4:	b124      	cbz	r4, d9c00 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d9bf6:	212e      	movs	r1, #46	; 0x2e
   d9bf8:	4630      	mov	r0, r6
   d9bfa:	f7ff fbab 	bl	d9354 <_ZN5Print5printEc>
   d9bfe:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d9c00:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d9c04:	220a      	movs	r2, #10
   d9c06:	4630      	mov	r0, r6
   d9c08:	f7ff fbbd 	bl	d9386 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d9c0c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d9c0e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d9c10:	d1f0      	bne.n	d9bf4 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d9c12:	4620      	mov	r0, r4
    }
    return n;
}
   d9c14:	b00d      	add	sp, #52	; 0x34
   d9c16:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9c18 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d9c18:	b510      	push	{r4, lr}
   d9c1a:	4b05      	ldr	r3, [pc, #20]	; (d9c30 <_ZN9IPAddressC1Ev+0x18>)
   d9c1c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d9c1e:	2211      	movs	r2, #17
   d9c20:	f840 3b04 	str.w	r3, [r0], #4
   d9c24:	2100      	movs	r1, #0
   d9c26:	f001 ff71 	bl	dbb0c <memset>
{
    clear();
}
   d9c2a:	4620      	mov	r0, r4
   d9c2c:	bd10      	pop	{r4, pc}
   d9c2e:	bf00      	nop
   d9c30:	000dd35c 	.word	0x000dd35c

000d9c34 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d9c34:	4603      	mov	r3, r0
   d9c36:	4a07      	ldr	r2, [pc, #28]	; (d9c54 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d9c38:	b510      	push	{r4, lr}
   d9c3a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d9c3e:	f101 0210 	add.w	r2, r1, #16
   d9c42:	f851 4b04 	ldr.w	r4, [r1], #4
   d9c46:	f843 4b04 	str.w	r4, [r3], #4
   d9c4a:	4291      	cmp	r1, r2
   d9c4c:	d1f9      	bne.n	d9c42 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d9c4e:	780a      	ldrb	r2, [r1, #0]
   d9c50:	701a      	strb	r2, [r3, #0]
}
   d9c52:	bd10      	pop	{r4, pc}
   d9c54:	000dd35c 	.word	0x000dd35c

000d9c58 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d9c58:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d9c5a:	2b04      	cmp	r3, #4
   d9c5c:	d101      	bne.n	d9c62 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d9c5e:	6840      	ldr	r0, [r0, #4]
   d9c60:	e008      	b.n	d9c74 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d9c62:	2b06      	cmp	r3, #6
   d9c64:	d10a      	bne.n	d9c7c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d9c66:	6843      	ldr	r3, [r0, #4]
   d9c68:	b953      	cbnz	r3, d9c80 <_ZNK9IPAddresscvbEv+0x28>
   d9c6a:	6883      	ldr	r3, [r0, #8]
   d9c6c:	b943      	cbnz	r3, d9c80 <_ZNK9IPAddresscvbEv+0x28>
   d9c6e:	68c3      	ldr	r3, [r0, #12]
   d9c70:	b933      	cbnz	r3, d9c80 <_ZNK9IPAddresscvbEv+0x28>
   d9c72:	6900      	ldr	r0, [r0, #16]
   d9c74:	3000      	adds	r0, #0
   d9c76:	bf18      	it	ne
   d9c78:	2001      	movne	r0, #1
   d9c7a:	4770      	bx	lr
    } else {
        return false;
   d9c7c:	2000      	movs	r0, #0
   d9c7e:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d9c80:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d9c82:	4770      	bx	lr

000d9c84 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d9c84:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d9c86:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d9c8a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d9c8e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d9c92:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d9c96:	2304      	movs	r3, #4
   d9c98:	6041      	str	r1, [r0, #4]
   d9c9a:	7503      	strb	r3, [r0, #20]
   d9c9c:	bd10      	pop	{r4, pc}

000d9c9e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d9c9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d9ca0:	780d      	ldrb	r5, [r1, #0]
   d9ca2:	788b      	ldrb	r3, [r1, #2]
   d9ca4:	784a      	ldrb	r2, [r1, #1]
   d9ca6:	78c9      	ldrb	r1, [r1, #3]
   d9ca8:	9100      	str	r1, [sp, #0]
   d9caa:	4629      	mov	r1, r5
   d9cac:	f7ff ffea 	bl	d9c84 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d9cb0:	b003      	add	sp, #12
   d9cb2:	bd30      	pop	{r4, r5, pc}

000d9cb4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
   d9cb4:	b510      	push	{r4, lr}
   d9cb6:	4b03      	ldr	r3, [pc, #12]	; (d9cc4 <_ZN9IPAddressC1EPKh+0x10>)
   d9cb8:	6003      	str	r3, [r0, #0]
   d9cba:	4604      	mov	r4, r0
{
    *this = address;
   d9cbc:	f7ff ffef 	bl	d9c9e <_ZN9IPAddressaSEPKh>
}
   d9cc0:	4620      	mov	r0, r4
   d9cc2:	bd10      	pop	{r4, pc}
   d9cc4:	000dd35c 	.word	0x000dd35c

000d9cc8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9cc8:	7441      	strb	r1, [r0, #17]
   d9cca:	4770      	bx	lr

000d9ccc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d9ccc:	4770      	bx	lr

000d9cce <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d9cce:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d9cd0:	2100      	movs	r1, #0
   d9cd2:	7c00      	ldrb	r0, [r0, #16]
   d9cd4:	f7fe ff6c 	bl	d8bb0 <HAL_USB_USART_Receive_Data>
}
   d9cd8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9cdc:	bf28      	it	cs
   d9cde:	f04f 30ff 	movcs.w	r0, #4294967295
   d9ce2:	bd08      	pop	{r3, pc}

000d9ce4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d9ce4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d9ce6:	2101      	movs	r1, #1
   d9ce8:	7c00      	ldrb	r0, [r0, #16]
   d9cea:	f7fe ff61 	bl	d8bb0 <HAL_USB_USART_Receive_Data>
}
   d9cee:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9cf2:	bf28      	it	cs
   d9cf4:	f04f 30ff 	movcs.w	r0, #4294967295
   d9cf8:	bd08      	pop	{r3, pc}

000d9cfa <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d9cfa:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d9cfc:	7c00      	ldrb	r0, [r0, #16]
   d9cfe:	f7fe ff4f 	bl	d8ba0 <HAL_USB_USART_Available_Data_For_Write>
}
   d9d02:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9d06:	bd08      	pop	{r3, pc}

000d9d08 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d9d08:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d9d0a:	7c00      	ldrb	r0, [r0, #16]
   d9d0c:	f7fe ff40 	bl	d8b90 <HAL_USB_USART_Available_Data>
}
   d9d10:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9d14:	bd08      	pop	{r3, pc}

000d9d16 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d9d16:	7c00      	ldrb	r0, [r0, #16]
   d9d18:	f7fe bf5a 	b.w	d8bd0 <HAL_USB_USART_Flush_Data>

000d9d1c <_ZN9USBSerialD0Ev>:
   d9d1c:	b510      	push	{r4, lr}
   d9d1e:	2114      	movs	r1, #20
   d9d20:	4604      	mov	r4, r0
   d9d22:	f000 ff3b 	bl	dab9c <_ZdlPvj>
   d9d26:	4620      	mov	r0, r4
   d9d28:	bd10      	pop	{r4, pc}

000d9d2a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d9d2a:	b538      	push	{r3, r4, r5, lr}
   d9d2c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9d2e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d9d30:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9d32:	f7fe ff35 	bl	d8ba0 <HAL_USB_USART_Available_Data_For_Write>
   d9d36:	2800      	cmp	r0, #0
   d9d38:	dc01      	bgt.n	d9d3e <_ZN9USBSerial5writeEh+0x14>
   d9d3a:	7c60      	ldrb	r0, [r4, #17]
   d9d3c:	b128      	cbz	r0, d9d4a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d9d3e:	4629      	mov	r1, r5
   d9d40:	7c20      	ldrb	r0, [r4, #16]
   d9d42:	f7fe ff3d 	bl	d8bc0 <HAL_USB_USART_Send_Data>
   d9d46:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d9d4a:	bd38      	pop	{r3, r4, r5, pc}

000d9d4c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9d4c:	b510      	push	{r4, lr}
   d9d4e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d9d50:	2300      	movs	r3, #0
   d9d52:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d9d54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9d58:	60a3      	str	r3, [r4, #8]
   d9d5a:	4b05      	ldr	r3, [pc, #20]	; (d9d70 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d9d5c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d9d5e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9d60:	4608      	mov	r0, r1
{
  _serial = serial;
   d9d62:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d9d64:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d9d66:	4611      	mov	r1, r2
   d9d68:	f7fe ff02 	bl	d8b70 <HAL_USB_USART_Init>
}
   d9d6c:	4620      	mov	r0, r4
   d9d6e:	bd10      	pop	{r4, pc}
   d9d70:	000dd370 	.word	0x000dd370

000d9d74 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d9d74:	2200      	movs	r2, #0
   d9d76:	7c00      	ldrb	r0, [r0, #16]
   d9d78:	f7fe bf02 	b.w	d8b80 <HAL_USB_USART_Begin>

000d9d7c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d9d7c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d9d7e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d9d80:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d9d82:	2100      	movs	r1, #0
   d9d84:	f001 fec2 	bl	dbb0c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d9d88:	4620      	mov	r0, r4
   d9d8a:	bd10      	pop	{r4, pc}

000d9d8c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d9d8c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9d8e:	4d0e      	ldr	r5, [pc, #56]	; (d9dc8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d9d90:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d9d92:	a801      	add	r0, sp, #4
   d9d94:	f7ff fff2 	bl	d9d7c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9d98:	6829      	ldr	r1, [r5, #0]
   d9d9a:	f011 0401 	ands.w	r4, r1, #1
   d9d9e:	d110      	bne.n	d9dc2 <_Z16_fetch_usbserialv+0x36>
   d9da0:	4628      	mov	r0, r5
   d9da2:	f7fa f982 	bl	d40aa <__cxa_guard_acquire>
   d9da6:	b160      	cbz	r0, d9dc2 <_Z16_fetch_usbserialv+0x36>
   d9da8:	aa01      	add	r2, sp, #4
   d9daa:	4621      	mov	r1, r4
   d9dac:	4807      	ldr	r0, [pc, #28]	; (d9dcc <_Z16_fetch_usbserialv+0x40>)
   d9dae:	f7ff ffcd 	bl	d9d4c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d9db2:	4628      	mov	r0, r5
   d9db4:	f7fa f97e 	bl	d40b4 <__cxa_guard_release>
   d9db8:	4a05      	ldr	r2, [pc, #20]	; (d9dd0 <_Z16_fetch_usbserialv+0x44>)
   d9dba:	4906      	ldr	r1, [pc, #24]	; (d9dd4 <_Z16_fetch_usbserialv+0x48>)
   d9dbc:	4803      	ldr	r0, [pc, #12]	; (d9dcc <_Z16_fetch_usbserialv+0x40>)
   d9dbe:	f000 fedf 	bl	dab80 <__aeabi_atexit>
	return _usbserial;
}
   d9dc2:	4802      	ldr	r0, [pc, #8]	; (d9dcc <_Z16_fetch_usbserialv+0x40>)
   d9dc4:	b007      	add	sp, #28
   d9dc6:	bd30      	pop	{r4, r5, pc}
   d9dc8:	2003dff0 	.word	0x2003dff0
   d9dcc:	2003dff4 	.word	0x2003dff4
   d9dd0:	2003d8b8 	.word	0x2003d8b8
   d9dd4:	000d9ccd 	.word	0x000d9ccd

000d9dd8 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d9dd8:	4700      	bx	r0
	...

000d9ddc <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d9ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9dde:	b085      	sub	sp, #20
   d9de0:	461c      	mov	r4, r3
   d9de2:	460e      	mov	r6, r1
   d9de4:	4617      	mov	r7, r2
   d9de6:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   d9de8:	f7fe fcb2 	bl	d8750 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   d9dec:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d9dee:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d9df0:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d9df4:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d9df6:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d9dfa:	bfa5      	ittet	ge
   d9dfc:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d9e00:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d9e04:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d9e06:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d9e08:	9300      	str	r3, [sp, #0]
   d9e0a:	4632      	mov	r2, r6
   d9e0c:	463b      	mov	r3, r7
   d9e0e:	4906      	ldr	r1, [pc, #24]	; (d9e28 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d9e10:	bfa8      	it	ge
   d9e12:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d9e16:	4628      	mov	r0, r5
   d9e18:	f7fe fc92 	bl	d8740 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d9e1c:	fab0 f080 	clz	r0, r0
   d9e20:	0940      	lsrs	r0, r0, #5
   d9e22:	b005      	add	sp, #20
   d9e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9e26:	bf00      	nop
   d9e28:	000d9dd9 	.word	0x000d9dd9

000d9e2c <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   d9e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9e2e:	4606      	mov	r6, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
   d9e30:	f7fe fc8e 	bl	d8750 <HAL_Interrupts_Detach>
   d9e34:	4607      	mov	r7, r0
   d9e36:	b968      	cbnz	r0, d9e54 <_Z15detachInterruptt+0x28>
        return false;
    }
    if (handlers[pin]) {
   d9e38:	4d08      	ldr	r5, [pc, #32]	; (d9e5c <_Z15detachInterruptt+0x30>)
   d9e3a:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
   d9e3e:	b15c      	cbz	r4, d9e58 <_Z15detachInterruptt+0x2c>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d9e40:	4620      	mov	r0, r4
   d9e42:	f7fb fae7 	bl	d5414 <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   d9e46:	2110      	movs	r1, #16
   d9e48:	4620      	mov	r0, r4
   d9e4a:	f000 fea7 	bl	dab9c <_ZdlPvj>
        handlers[pin] = nullptr;
   d9e4e:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
   d9e52:	e001      	b.n	d9e58 <_Z15detachInterruptt+0x2c>
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
        return false;
   d9e54:	2000      	movs	r0, #0
   d9e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    if (handlers[pin]) {
        delete handlers[pin];
        handlers[pin] = nullptr;
    }
    return true;
   d9e58:	2001      	movs	r0, #1
}
   d9e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d9e5c:	2003e008 	.word	0x2003e008

000d9e60 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d9e60:	f7fe bc86 	b.w	d8770 <HAL_Interrupts_Disable_All>

000d9e64 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d9e64:	f7fe bc7c 	b.w	d8760 <HAL_Interrupts_Enable_All>

000d9e68 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d9e68:	2200      	movs	r2, #0
   d9e6a:	4611      	mov	r1, r2
   d9e6c:	6840      	ldr	r0, [r0, #4]
   d9e6e:	f7fe bf13 	b.w	d8c98 <network_ready>

000d9e72 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d9e72:	2200      	movs	r2, #0
   d9e74:	4611      	mov	r1, r2
   d9e76:	6840      	ldr	r0, [r0, #4]
   d9e78:	f7fe bf2e 	b.w	d8cd8 <network_listening>

000d9e7c <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d9e7c:	2200      	movs	r2, #0
   d9e7e:	4611      	mov	r1, r2
   d9e80:	6840      	ldr	r0, [r0, #4]
   d9e82:	f7fe bf39 	b.w	d8cf8 <network_get_listen_timeout>

000d9e86 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d9e86:	2200      	movs	r2, #0
   d9e88:	6840      	ldr	r0, [r0, #4]
   d9e8a:	f7fe bf2d 	b.w	d8ce8 <network_set_listen_timeout>

000d9e8e <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d9e8e:	2200      	movs	r2, #0
   d9e90:	f081 0101 	eor.w	r1, r1, #1
   d9e94:	6840      	ldr	r0, [r0, #4]
   d9e96:	f7fe bf17 	b.w	d8cc8 <network_listen>

000d9e9a <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d9e9a:	2300      	movs	r3, #0
   d9e9c:	461a      	mov	r2, r3
   d9e9e:	4619      	mov	r1, r3
   d9ea0:	6840      	ldr	r0, [r0, #4]
   d9ea2:	f7fe bf09 	b.w	d8cb8 <network_off>

000d9ea6 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d9ea6:	2300      	movs	r3, #0
   d9ea8:	461a      	mov	r2, r3
   d9eaa:	4619      	mov	r1, r3
   d9eac:	6840      	ldr	r0, [r0, #4]
   d9eae:	f7fe befb 	b.w	d8ca8 <network_on>

000d9eb2 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d9eb2:	2200      	movs	r2, #0
   d9eb4:	4611      	mov	r1, r2
   d9eb6:	6840      	ldr	r0, [r0, #4]
   d9eb8:	f7fe bede 	b.w	d8c78 <network_connecting>

000d9ebc <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d9ebc:	2200      	movs	r2, #0
   d9ebe:	2102      	movs	r1, #2
   d9ec0:	6840      	ldr	r0, [r0, #4]
   d9ec2:	f7fe bee1 	b.w	d8c88 <network_disconnect>

000d9ec6 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d9ec6:	2300      	movs	r3, #0
   d9ec8:	461a      	mov	r2, r3
   d9eca:	6840      	ldr	r0, [r0, #4]
   d9ecc:	f7fe becc 	b.w	d8c68 <network_connect>

000d9ed0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d9ed0:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d9ed2:	4c08      	ldr	r4, [pc, #32]	; (d9ef4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d9ed4:	2528      	movs	r5, #40	; 0x28
   d9ed6:	462a      	mov	r2, r5
   d9ed8:	2100      	movs	r1, #0
   d9eda:	4620      	mov	r0, r4
   d9edc:	f001 fe16 	bl	dbb0c <memset>
        cid = -1;
   d9ee0:	f04f 33ff 	mov.w	r3, #4294967295
   d9ee4:	6063      	str	r3, [r4, #4]
   d9ee6:	4b04      	ldr	r3, [pc, #16]	; (d9ef8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d9ee8:	8025      	strh	r5, [r4, #0]
   d9eea:	2204      	movs	r2, #4
   d9eec:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d9eee:	4a03      	ldr	r2, [pc, #12]	; (d9efc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d9ef0:	601a      	str	r2, [r3, #0]
   d9ef2:	bd38      	pop	{r3, r4, r5, pc}
   d9ef4:	2003e0a0 	.word	0x2003e0a0
   d9ef8:	2003e098 	.word	0x2003e098
   d9efc:	000dd3a0 	.word	0x000dd3a0

000d9f00 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d9f00:	4770      	bx	lr

000d9f02 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9f02:	7441      	strb	r1, [r0, #17]
   d9f04:	4770      	bx	lr

000d9f06 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d9f06:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d9f08:	7c00      	ldrb	r0, [r0, #16]
   d9f0a:	f7fe fd99 	bl	d8a40 <HAL_USART_Available_Data_For_Write>
}
   d9f0e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9f12:	bd08      	pop	{r3, pc}

000d9f14 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d9f14:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d9f16:	7c00      	ldrb	r0, [r0, #16]
   d9f18:	f7fe fd6a 	bl	d89f0 <HAL_USART_Available_Data>
}
   d9f1c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9f20:	bd08      	pop	{r3, pc}

000d9f22 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d9f22:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d9f24:	7c00      	ldrb	r0, [r0, #16]
   d9f26:	f7fe fd73 	bl	d8a10 <HAL_USART_Peek_Data>
}
   d9f2a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9f2e:	bf28      	it	cs
   d9f30:	f04f 30ff 	movcs.w	r0, #4294967295
   d9f34:	bd08      	pop	{r3, pc}

000d9f36 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d9f36:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d9f38:	7c00      	ldrb	r0, [r0, #16]
   d9f3a:	f7fe fd61 	bl	d8a00 <HAL_USART_Read_Data>
}
   d9f3e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9f42:	bf28      	it	cs
   d9f44:	f04f 30ff 	movcs.w	r0, #4294967295
   d9f48:	bd08      	pop	{r3, pc}

000d9f4a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d9f4a:	7c00      	ldrb	r0, [r0, #16]
   d9f4c:	f7fe bd68 	b.w	d8a20 <HAL_USART_Flush_Data>

000d9f50 <_ZN11USARTSerialD0Ev>:
   d9f50:	b510      	push	{r4, lr}
   d9f52:	2114      	movs	r1, #20
   d9f54:	4604      	mov	r4, r0
   d9f56:	f000 fe21 	bl	dab9c <_ZdlPvj>
   d9f5a:	4620      	mov	r0, r4
   d9f5c:	bd10      	pop	{r4, pc}

000d9f5e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d9f5e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d9f60:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d9f62:	4604      	mov	r4, r0
   d9f64:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d9f66:	b925      	cbnz	r5, d9f72 <_ZN11USARTSerial5writeEh+0x14>
   d9f68:	7c00      	ldrb	r0, [r0, #16]
   d9f6a:	f7fe fd69 	bl	d8a40 <HAL_USART_Available_Data_For_Write>
   d9f6e:	2800      	cmp	r0, #0
   d9f70:	dd05      	ble.n	d9f7e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d9f72:	4631      	mov	r1, r6
   d9f74:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d9f76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d9f7a:	f7fe bd31 	b.w	d89e0 <HAL_USART_Write_Data>
  }
  return 0;
}
   d9f7e:	4628      	mov	r0, r5
   d9f80:	bd70      	pop	{r4, r5, r6, pc}
	...

000d9f84 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d9f84:	b510      	push	{r4, lr}
   d9f86:	4604      	mov	r4, r0
   d9f88:	4608      	mov	r0, r1
   d9f8a:	4611      	mov	r1, r2
   d9f8c:	2200      	movs	r2, #0
   d9f8e:	6062      	str	r2, [r4, #4]
   d9f90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d9f94:	60a2      	str	r2, [r4, #8]
   d9f96:	4a05      	ldr	r2, [pc, #20]	; (d9fac <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d9f98:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d9f9a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d9f9c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d9f9e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d9fa0:	461a      	mov	r2, r3
   d9fa2:	f7fe fd15 	bl	d89d0 <HAL_USART_Init>
}
   d9fa6:	4620      	mov	r0, r4
   d9fa8:	bd10      	pop	{r4, pc}
   d9faa:	bf00      	nop
   d9fac:	000dd3d4 	.word	0x000dd3d4

000d9fb0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d9fb0:	7c00      	ldrb	r0, [r0, #16]
   d9fb2:	f7fe bd3d 	b.w	d8a30 <HAL_USART_Is_Enabled>
	...

000d9fb8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d9fb8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d9fba:	4d0c      	ldr	r5, [pc, #48]	; (d9fec <_Z22__fetch_global_Serial1v+0x34>)
   d9fbc:	6829      	ldr	r1, [r5, #0]
   d9fbe:	f011 0401 	ands.w	r4, r1, #1
   d9fc2:	d111      	bne.n	d9fe8 <_Z22__fetch_global_Serial1v+0x30>
   d9fc4:	4628      	mov	r0, r5
   d9fc6:	f7fa f870 	bl	d40aa <__cxa_guard_acquire>
   d9fca:	b168      	cbz	r0, d9fe8 <_Z22__fetch_global_Serial1v+0x30>
   d9fcc:	4a08      	ldr	r2, [pc, #32]	; (d9ff0 <_Z22__fetch_global_Serial1v+0x38>)
   d9fce:	4b09      	ldr	r3, [pc, #36]	; (d9ff4 <_Z22__fetch_global_Serial1v+0x3c>)
   d9fd0:	4809      	ldr	r0, [pc, #36]	; (d9ff8 <_Z22__fetch_global_Serial1v+0x40>)
   d9fd2:	4621      	mov	r1, r4
   d9fd4:	f7ff ffd6 	bl	d9f84 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d9fd8:	4628      	mov	r0, r5
   d9fda:	f7fa f86b 	bl	d40b4 <__cxa_guard_release>
   d9fde:	4a07      	ldr	r2, [pc, #28]	; (d9ffc <_Z22__fetch_global_Serial1v+0x44>)
   d9fe0:	4907      	ldr	r1, [pc, #28]	; (da000 <_Z22__fetch_global_Serial1v+0x48>)
   d9fe2:	4805      	ldr	r0, [pc, #20]	; (d9ff8 <_Z22__fetch_global_Serial1v+0x40>)
   d9fe4:	f000 fdcc 	bl	dab80 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d9fe8:	4803      	ldr	r0, [pc, #12]	; (d9ff8 <_Z22__fetch_global_Serial1v+0x40>)
   d9fea:	bd38      	pop	{r3, r4, r5, pc}
   d9fec:	2003e160 	.word	0x2003e160
   d9ff0:	2003e164 	.word	0x2003e164
   d9ff4:	2003e0dc 	.word	0x2003e0dc
   d9ff8:	2003e0c8 	.word	0x2003e0c8
   d9ffc:	2003d8b8 	.word	0x2003d8b8
   da000:	000d9f01 	.word	0x000d9f01

000da004 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   da004:	4770      	bx	lr

000da006 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   da006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da008:	4606      	mov	r6, r0
   da00a:	4615      	mov	r5, r2
   da00c:	460c      	mov	r4, r1
   da00e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   da010:	42bc      	cmp	r4, r7
   da012:	d006      	beq.n	da022 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   da014:	6833      	ldr	r3, [r6, #0]
   da016:	f814 1b01 	ldrb.w	r1, [r4], #1
   da01a:	689b      	ldr	r3, [r3, #8]
   da01c:	4630      	mov	r0, r6
   da01e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   da020:	e7f6      	b.n	da010 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   da022:	4628      	mov	r0, r5
   da024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da026 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   da026:	2200      	movs	r2, #0
   da028:	7c00      	ldrb	r0, [r0, #16]
   da02a:	f7fe bd21 	b.w	d8a70 <HAL_I2C_Write_Data>

000da02e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   da02e:	2100      	movs	r1, #0
   da030:	7c00      	ldrb	r0, [r0, #16]
   da032:	f7fe bd25 	b.w	d8a80 <HAL_I2C_Available_Data>

000da036 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   da036:	2100      	movs	r1, #0
   da038:	7c00      	ldrb	r0, [r0, #16]
   da03a:	f7fe bd29 	b.w	d8a90 <HAL_I2C_Read_Data>

000da03e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   da03e:	2100      	movs	r1, #0
   da040:	7c00      	ldrb	r0, [r0, #16]
   da042:	f7fe bd2d 	b.w	d8aa0 <HAL_I2C_Peek_Data>

000da046 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   da046:	2100      	movs	r1, #0
   da048:	7c00      	ldrb	r0, [r0, #16]
   da04a:	f7fe bd31 	b.w	d8ab0 <HAL_I2C_Flush_Data>

000da04e <_ZN7TwoWireD0Ev>:
   da04e:	b510      	push	{r4, lr}
   da050:	2114      	movs	r1, #20
   da052:	4604      	mov	r4, r0
   da054:	f000 fda2 	bl	dab9c <_ZdlPvj>
   da058:	4620      	mov	r0, r4
   da05a:	bd10      	pop	{r4, pc}

000da05c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   da05c:	b510      	push	{r4, lr}
   da05e:	4604      	mov	r4, r0
   da060:	2300      	movs	r3, #0
   da062:	6063      	str	r3, [r4, #4]
   da064:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   da068:	60a3      	str	r3, [r4, #8]
   da06a:	4b04      	ldr	r3, [pc, #16]	; (da07c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   da06c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   da06e:	4608      	mov	r0, r1
   da070:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   da072:	4611      	mov	r1, r2
   da074:	f7fe fd2c 	bl	d8ad0 <HAL_I2C_Init>
}
   da078:	4620      	mov	r0, r4
   da07a:	bd10      	pop	{r4, pc}
   da07c:	000dd404 	.word	0x000dd404

000da080 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   da080:	b570      	push	{r4, r5, r6, lr}
   da082:	460c      	mov	r4, r1
   da084:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   da086:	2514      	movs	r5, #20
   da088:	4606      	mov	r6, r0
   da08a:	462a      	mov	r2, r5
   da08c:	2100      	movs	r1, #0
   da08e:	a801      	add	r0, sp, #4
   da090:	f001 fd3c 	bl	dbb0c <memset>
   da094:	7823      	ldrb	r3, [r4, #0]
   da096:	f88d 3008 	strb.w	r3, [sp, #8]
   da09a:	6863      	ldr	r3, [r4, #4]
   da09c:	9303      	str	r3, [sp, #12]
   da09e:	68e3      	ldr	r3, [r4, #12]
   da0a0:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   da0a2:	2200      	movs	r2, #0
   da0a4:	7a23      	ldrb	r3, [r4, #8]
   da0a6:	7c30      	ldrb	r0, [r6, #16]
   da0a8:	f8ad 5004 	strh.w	r5, [sp, #4]
   da0ac:	a901      	add	r1, sp, #4
   da0ae:	9305      	str	r3, [sp, #20]
   da0b0:	f7fe fd26 	bl	d8b00 <HAL_I2C_Request_Data_Ex>
}
   da0b4:	b006      	add	sp, #24
   da0b6:	bd70      	pop	{r4, r5, r6, pc}

000da0b8 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   da0b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   da0ba:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   da0bc:	f88d 1000 	strb.w	r1, [sp]
   da0c0:	f04f 0164 	mov.w	r1, #100	; 0x64
   da0c4:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   da0c6:	bf18      	it	ne
   da0c8:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   da0ca:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   da0cc:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   da0ce:	f88d 3008 	strb.w	r3, [sp, #8]
   da0d2:	f7ff ffd5 	bl	da080 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   da0d6:	b005      	add	sp, #20
   da0d8:	f85d fb04 	ldr.w	pc, [sp], #4

000da0dc <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   da0dc:	2200      	movs	r2, #0
   da0de:	7c00      	ldrb	r0, [r0, #16]
   da0e0:	f7fe bcb6 	b.w	d8a50 <HAL_I2C_Begin_Transmission>

000da0e4 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   da0e4:	b2c9      	uxtb	r1, r1
   da0e6:	f7ff bff9 	b.w	da0dc <_ZN7TwoWire17beginTransmissionEh>

000da0ea <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   da0ea:	2200      	movs	r2, #0
   da0ec:	7c00      	ldrb	r0, [r0, #16]
   da0ee:	f7fe bcb7 	b.w	d8a60 <HAL_I2C_End_Transmission>

000da0f2 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   da0f2:	2100      	movs	r1, #0
   da0f4:	7c00      	ldrb	r0, [r0, #16]
   da0f6:	f7fe bce3 	b.w	d8ac0 <HAL_I2C_Is_Enabled>

000da0fa <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   da0fa:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   da0fc:	2100      	movs	r1, #0
   da0fe:	7c00      	ldrb	r0, [r0, #16]
   da100:	f7fe fcee 	bl	d8ae0 <HAL_I2C_Acquire>
}
   da104:	fab0 f080 	clz	r0, r0
   da108:	0940      	lsrs	r0, r0, #5
   da10a:	bd08      	pop	{r3, pc}

000da10c <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   da10c:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   da10e:	2100      	movs	r1, #0
   da110:	7c00      	ldrb	r0, [r0, #16]
   da112:	f7fe fced 	bl	d8af0 <HAL_I2C_Release>
}
   da116:	fab0 f080 	clz	r0, r0
   da11a:	0940      	lsrs	r0, r0, #5
   da11c:	bd08      	pop	{r3, pc}

000da11e <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   da11e:	2200      	movs	r2, #0
   da120:	4611      	mov	r1, r2
   da122:	6840      	ldr	r0, [r0, #4]
   da124:	f7fe bdd8 	b.w	d8cd8 <network_listening>

000da128 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   da128:	2200      	movs	r2, #0
   da12a:	4611      	mov	r1, r2
   da12c:	6840      	ldr	r0, [r0, #4]
   da12e:	f7fe bde3 	b.w	d8cf8 <network_get_listen_timeout>

000da132 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   da132:	2200      	movs	r2, #0
   da134:	6840      	ldr	r0, [r0, #4]
   da136:	f7fe bdd7 	b.w	d8ce8 <network_set_listen_timeout>

000da13a <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   da13a:	2200      	movs	r2, #0
   da13c:	f081 0101 	eor.w	r1, r1, #1
   da140:	6840      	ldr	r0, [r0, #4]
   da142:	f7fe bdc1 	b.w	d8cc8 <network_listen>

000da146 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   da146:	2300      	movs	r3, #0
   da148:	461a      	mov	r2, r3
   da14a:	2101      	movs	r1, #1
   da14c:	6840      	ldr	r0, [r0, #4]
   da14e:	f7fe bdb3 	b.w	d8cb8 <network_off>

000da152 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   da152:	2300      	movs	r3, #0
   da154:	461a      	mov	r2, r3
   da156:	4619      	mov	r1, r3
   da158:	6840      	ldr	r0, [r0, #4]
   da15a:	f7fe bda5 	b.w	d8ca8 <network_on>

000da15e <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   da15e:	2200      	movs	r2, #0
   da160:	4611      	mov	r1, r2
   da162:	6840      	ldr	r0, [r0, #4]
   da164:	f7fe bd98 	b.w	d8c98 <network_ready>

000da168 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   da168:	2200      	movs	r2, #0
   da16a:	4611      	mov	r1, r2
   da16c:	6840      	ldr	r0, [r0, #4]
   da16e:	f7fe bd83 	b.w	d8c78 <network_connecting>

000da172 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   da172:	2200      	movs	r2, #0
   da174:	2102      	movs	r1, #2
   da176:	6840      	ldr	r0, [r0, #4]
   da178:	f7fe bd86 	b.w	d8c88 <network_disconnect>

000da17c <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   da17c:	2300      	movs	r3, #0
   da17e:	461a      	mov	r2, r3
   da180:	6840      	ldr	r0, [r0, #4]
   da182:	f7fe bd71 	b.w	d8c68 <network_connect>

000da186 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   da186:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   da188:	4605      	mov	r5, r0
   da18a:	b188      	cbz	r0, da1b0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   da18c:	6804      	ldr	r4, [r0, #0]
   da18e:	b14c      	cbz	r4, da1a4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   da190:	68a3      	ldr	r3, [r4, #8]
   da192:	b11b      	cbz	r3, da19c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   da194:	2203      	movs	r2, #3
   da196:	4621      	mov	r1, r4
   da198:	4620      	mov	r0, r4
   da19a:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   da19c:	2110      	movs	r1, #16
   da19e:	4620      	mov	r0, r4
   da1a0:	f000 fcfc 	bl	dab9c <_ZdlPvj>
   da1a4:	4628      	mov	r0, r5
   da1a6:	2114      	movs	r1, #20
      }
   da1a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   da1ac:	f000 bcf6 	b.w	dab9c <_ZdlPvj>
   da1b0:	bd38      	pop	{r3, r4, r5, pc}

000da1b2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   da1b2:	b110      	cbz	r0, da1ba <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   da1b4:	6803      	ldr	r3, [r0, #0]
   da1b6:	685b      	ldr	r3, [r3, #4]
   da1b8:	4718      	bx	r3
   da1ba:	4770      	bx	lr

000da1bc <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   da1bc:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   da1be:	6803      	ldr	r3, [r0, #0]
   da1c0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   da1c2:	b1bb      	cbz	r3, da1f4 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   da1c4:	6858      	ldr	r0, [r3, #4]
   da1c6:	f7fe fb8b 	bl	d88e0 <os_thread_is_current>
   da1ca:	b978      	cbnz	r0, da1ec <_ZN6ThreadD1Ev+0x30>
   da1cc:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   da1ce:	7c5a      	ldrb	r2, [r3, #17]
   da1d0:	b912      	cbnz	r2, da1d8 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   da1d2:	6858      	ldr	r0, [r3, #4]
   da1d4:	f7fe fb94 	bl	d8900 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   da1d8:	6823      	ldr	r3, [r4, #0]
   da1da:	6858      	ldr	r0, [r3, #4]
   da1dc:	f7fe fb98 	bl	d8910 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da1e0:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   da1e2:	2300      	movs	r3, #0
   da1e4:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   da1e6:	b128      	cbz	r0, da1f4 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   da1e8:	f7ff ffcd 	bl	da186 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   da1ec:	6820      	ldr	r0, [r4, #0]
   da1ee:	b108      	cbz	r0, da1f4 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   da1f0:	f7ff ffc9 	bl	da186 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   da1f4:	4620      	mov	r0, r4
   da1f6:	bd10      	pop	{r4, pc}

000da1f8 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   da1f8:	b538      	push	{r3, r4, r5, lr}
   da1fa:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   da1fc:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   da200:	b108      	cbz	r0, da206 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   da202:	f7f9 ff50 	bl	d40a6 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   da206:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   da20a:	b108      	cbz	r0, da210 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   da20c:	f7fe fbb8 	bl	d8980 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   da210:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   da214:	b135      	cbz	r5, da224 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   da216:	4628      	mov	r0, r5
   da218:	f7ff ffd0 	bl	da1bc <_ZN6ThreadD1Ev>
   da21c:	2104      	movs	r1, #4
   da21e:	4628      	mov	r0, r5
   da220:	f000 fcbc 	bl	dab9c <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   da224:	6820      	ldr	r0, [r4, #0]
   da226:	b108      	cbz	r0, da22c <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   da228:	f7ff ffc3 	bl	da1b2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   da22c:	4620      	mov	r0, r4
   da22e:	bd38      	pop	{r3, r4, r5, pc}

000da230 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   da230:	b510      	push	{r4, lr}
   da232:	4b04      	ldr	r3, [pc, #16]	; (da244 <_ZN5spark9MeshClassD1Ev+0x14>)
   da234:	4604      	mov	r4, r0
   da236:	f840 3b08 	str.w	r3, [r0], #8
   da23a:	f7ff ffdd 	bl	da1f8 <_ZN5spark11MeshPublishD1Ev>
   da23e:	4620      	mov	r0, r4
   da240:	bd10      	pop	{r4, pc}
   da242:	bf00      	nop
   da244:	000dd42c 	.word	0x000dd42c

000da248 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   da248:	b538      	push	{r3, r4, r5, lr}
   da24a:	4c0e      	ldr	r4, [pc, #56]	; (da284 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   da24c:	4b0e      	ldr	r3, [pc, #56]	; (da288 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   da24e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   da250:	2500      	movs	r5, #0
   da252:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   da254:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   da258:	6063      	str	r3, [r4, #4]
   da25a:	60a5      	str	r5, [r4, #8]
   da25c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   da260:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   da264:	f7fe fb84 	bl	d8970 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   da268:	4b08      	ldr	r3, [pc, #32]	; (da28c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   da26a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   da26e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   da272:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   da274:	4620      	mov	r0, r4
   da276:	4a06      	ldr	r2, [pc, #24]	; (da290 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   da278:	4906      	ldr	r1, [pc, #24]	; (da294 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   da27a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   da27e:	f000 bc7f 	b.w	dab80 <__aeabi_atexit>
   da282:	bf00      	nop
   da284:	2003e1e8 	.word	0x2003e1e8
   da288:	000dd4e0 	.word	0x000dd4e0
   da28c:	000dd42c 	.word	0x000dd42c
   da290:	2003d8b8 	.word	0x2003d8b8
   da294:	000da231 	.word	0x000da231

000da298 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   da298:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da29a:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   da29c:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   da29e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   da2a2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   da2a4:	2201      	movs	r2, #1
   da2a6:	f04f 33ff 	mov.w	r3, #4294967295
   da2aa:	4621      	mov	r1, r4
   da2ac:	47a8      	blx	r5
}
   da2ae:	b003      	add	sp, #12
   da2b0:	bd30      	pop	{r4, r5, pc}

000da2b2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   da2b2:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   da2b4:	6803      	ldr	r3, [r0, #0]
   da2b6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   da2b8:	f04f 33ff 	mov.w	r3, #4294967295
   da2bc:	46a4      	mov	ip, r4
}
   da2be:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   da2c2:	4760      	bx	ip

000da2c4 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   da2c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da2c6:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   da2c8:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   da2ca:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   da2ce:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   da2d0:	4621      	mov	r1, r4
   da2d2:	4613      	mov	r3, r2
   da2d4:	2201      	movs	r2, #1
   da2d6:	47a8      	blx	r5
}
   da2d8:	b003      	add	sp, #12
   da2da:	bd30      	pop	{r4, r5, pc}

000da2dc <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   da2dc:	4770      	bx	lr

000da2de <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   da2de:	b538      	push	{r3, r4, r5, lr}
   da2e0:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   da2e2:	681a      	ldr	r2, [r3, #0]
   da2e4:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   da2e6:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   da2e8:	da05      	bge.n	da2f6 <_ZN9TCPClient9connectedEv+0x18>
   da2ea:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da2ee:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   da2f2:	429a      	cmp	r2, r3
   da2f4:	d001      	beq.n	da2fa <_ZN9TCPClient9connectedEv+0x1c>
   da2f6:	2501      	movs	r5, #1
   da2f8:	e00b      	b.n	da312 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   da2fa:	6803      	ldr	r3, [r0, #0]
   da2fc:	691b      	ldr	r3, [r3, #16]
   da2fe:	4798      	blx	r3
   da300:	2800      	cmp	r0, #0
   da302:	bf14      	ite	ne
   da304:	2501      	movne	r5, #1
   da306:	2500      	moveq	r5, #0
        if (!rv) {
   da308:	d103      	bne.n	da312 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   da30a:	6823      	ldr	r3, [r4, #0]
   da30c:	4620      	mov	r0, r4
   da30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   da310:	4798      	blx	r3
        }
    }
    return rv;
}
   da312:	4628      	mov	r0, r5
   da314:	bd38      	pop	{r3, r4, r5, pc}

000da316 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   da316:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   da318:	6818      	ldr	r0, [r3, #0]
}
   da31a:	43c0      	mvns	r0, r0
   da31c:	0fc0      	lsrs	r0, r0, #31
   da31e:	4770      	bx	lr

000da320 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   da320:	4770      	bx	lr

000da322 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   da322:	2000      	movs	r0, #0
   da324:	4770      	bx	lr

000da326 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   da326:	b510      	push	{r4, lr}
   da328:	2114      	movs	r1, #20
   da32a:	4604      	mov	r4, r0
   da32c:	f000 fc36 	bl	dab9c <_ZdlPvj>
   da330:	4620      	mov	r0, r4
   da332:	bd10      	pop	{r4, pc}

000da334 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   da334:	f7f9 beb5 	b.w	d40a2 <_ZdlPv>

000da338 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   da338:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   da33a:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   da33c:	2200      	movs	r2, #0
   da33e:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   da340:	9202      	str	r2, [sp, #8]
   da342:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   da344:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   da346:	4604      	mov	r4, r0
   da348:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   da34a:	d008      	beq.n	da35e <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   da34c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   da350:	fbb3 f1f2 	udiv	r1, r3, r2
   da354:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   da356:	fb02 3111 	mls	r1, r2, r1, r3
   da35a:	434a      	muls	r2, r1
   da35c:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   da35e:	6960      	ldr	r0, [r4, #20]
   da360:	2308      	movs	r3, #8
   da362:	9300      	str	r3, [sp, #0]
   da364:	f241 0205 	movw	r2, #4101	; 0x1005
   da368:	446b      	add	r3, sp
   da36a:	f640 71ff 	movw	r1, #4095	; 0xfff
   da36e:	6800      	ldr	r0, [r0, #0]
   da370:	f7fe fbce 	bl	d8b10 <sock_setsockopt>
    if (ret < 0) {
   da374:	2800      	cmp	r0, #0
   da376:	db08      	blt.n	da38a <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   da378:	6960      	ldr	r0, [r4, #20]
   da37a:	2300      	movs	r3, #0
   da37c:	4632      	mov	r2, r6
   da37e:	4629      	mov	r1, r5
   da380:	6800      	ldr	r0, [r0, #0]
   da382:	f7fe fbe5 	bl	d8b50 <sock_send>
    if (ret < 0) {
   da386:	2800      	cmp	r0, #0
   da388:	da04      	bge.n	da394 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   da38a:	f7fe fd3d 	bl	d8e08 <__errno>
   da38e:	6803      	ldr	r3, [r0, #0]
   da390:	6063      	str	r3, [r4, #4]
   da392:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   da394:	b004      	add	sp, #16
   da396:	bd70      	pop	{r4, r5, r6, pc}

000da398 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   da398:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   da39a:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   da39c:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   da39e:	689b      	ldr	r3, [r3, #8]
   da3a0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   da3a2:	68a3      	ldr	r3, [r4, #8]
   da3a4:	3b01      	subs	r3, #1
   da3a6:	60a3      	str	r3, [r4, #8]
   da3a8:	b92b      	cbnz	r3, da3b6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   da3aa:	6823      	ldr	r3, [r4, #0]
   da3ac:	4620      	mov	r0, r4
   da3ae:	68db      	ldr	r3, [r3, #12]
        }
    }
   da3b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   da3b4:	4718      	bx	r3
   da3b6:	bd10      	pop	{r4, pc}

000da3b8 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   da3b8:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   da3ba:	4604      	mov	r4, r0
   da3bc:	694d      	ldr	r5, [r1, #20]
   da3be:	4b05      	ldr	r3, [pc, #20]	; (da3d4 <_ZN9TCPClient8remoteIPEv+0x1c>)
   da3c0:	f844 3b04 	str.w	r3, [r4], #4
   da3c4:	358c      	adds	r5, #140	; 0x8c
   da3c6:	4606      	mov	r6, r0
   da3c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da3ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da3cc:	682b      	ldr	r3, [r5, #0]
   da3ce:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   da3d0:	4630      	mov	r0, r6
   da3d2:	bd70      	pop	{r4, r5, r6, pc}
   da3d4:	000dd35c 	.word	0x000dd35c

000da3d8 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   da3d8:	b510      	push	{r4, lr}
   da3da:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   da3dc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da3e0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   da3e4:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   da3e6:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   da3e8:	d005      	beq.n	da3f6 <_ZN9TCPClient4peekEv+0x1e>
   da3ea:	6962      	ldr	r2, [r4, #20]
   da3ec:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   da3f0:	4413      	add	r3, r2
   da3f2:	7918      	ldrb	r0, [r3, #4]
   da3f4:	bd10      	pop	{r4, pc}
   da3f6:	6803      	ldr	r3, [r0, #0]
   da3f8:	691b      	ldr	r3, [r3, #16]
   da3fa:	4798      	blx	r3
   da3fc:	2800      	cmp	r0, #0
   da3fe:	d1f4      	bne.n	da3ea <_ZN9TCPClient4peekEv+0x12>
   da400:	f04f 30ff 	mov.w	r0, #4294967295
}
   da404:	bd10      	pop	{r4, pc}

000da406 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   da406:	b510      	push	{r4, lr}
   da408:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   da40a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da40e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   da412:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   da414:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   da416:	d008      	beq.n	da42a <_ZN9TCPClient4readEv+0x24>
   da418:	6962      	ldr	r2, [r4, #20]
   da41a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   da41e:	1c59      	adds	r1, r3, #1
   da420:	4413      	add	r3, r2
   da422:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   da426:	7918      	ldrb	r0, [r3, #4]
   da428:	bd10      	pop	{r4, pc}
   da42a:	6803      	ldr	r3, [r0, #0]
   da42c:	691b      	ldr	r3, [r3, #16]
   da42e:	4798      	blx	r3
   da430:	2800      	cmp	r0, #0
   da432:	d1f1      	bne.n	da418 <_ZN9TCPClient4readEv+0x12>
   da434:	f04f 30ff 	mov.w	r0, #4294967295
}
   da438:	bd10      	pop	{r4, pc}

000da43a <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   da43a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da43c:	6943      	ldr	r3, [r0, #20]
   da43e:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   da440:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da444:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   da448:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   da44a:	4605      	mov	r5, r0
   da44c:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   da44e:	d106      	bne.n	da45e <_ZN9TCPClient4readEPhj+0x24>
   da450:	6803      	ldr	r3, [r0, #0]
   da452:	691b      	ldr	r3, [r3, #16]
   da454:	4798      	blx	r3
   da456:	b910      	cbnz	r0, da45e <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   da458:	f04f 34ff 	mov.w	r4, #4294967295
   da45c:	e014      	b.n	da488 <_ZN9TCPClient4readEPhj+0x4e>
   da45e:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   da460:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   da464:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   da468:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   da46a:	42bc      	cmp	r4, r7
   da46c:	bf28      	it	cs
   da46e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   da470:	4419      	add	r1, r3
   da472:	4622      	mov	r2, r4
   da474:	3104      	adds	r1, #4
   da476:	4630      	mov	r0, r6
   da478:	f001 fb3d 	bl	dbaf6 <memcpy>
   da47c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   da47e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   da482:	4423      	add	r3, r4
   da484:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   da488:	4620      	mov	r0, r4
   da48a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da48c <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   da48c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da490:	4698      	mov	r8, r3
    stop();
   da492:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   da494:	b093      	sub	sp, #76	; 0x4c
    stop();
   da496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   da498:	460d      	mov	r5, r1
   da49a:	4606      	mov	r6, r0
   da49c:	4617      	mov	r7, r2
    stop();
   da49e:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   da4a0:	ab12      	add	r3, sp, #72	; 0x48
   da4a2:	2400      	movs	r4, #0
   da4a4:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   da4a8:	4622      	mov	r2, r4
   da4aa:	4621      	mov	r1, r4
   da4ac:	4628      	mov	r0, r5
   da4ae:	f7fe f917 	bl	d86e0 <netdb_getaddrinfo>
   da4b2:	4681      	mov	r9, r0
   da4b4:	2800      	cmp	r0, #0
   da4b6:	d13d      	bne.n	da534 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   da4b8:	9b00      	ldr	r3, [sp, #0]
   da4ba:	2b00      	cmp	r3, #0
   da4bc:	d056      	beq.n	da56c <_ZN9TCPClient7connectEPKctm+0xe0>
   da4be:	695b      	ldr	r3, [r3, #20]
   da4c0:	2b00      	cmp	r3, #0
   da4c2:	d053      	beq.n	da56c <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   da4c4:	a806      	add	r0, sp, #24
   da4c6:	f7ff fba7 	bl	d9c18 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   da4ca:	9b00      	ldr	r3, [sp, #0]
   da4cc:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   da4ce:	7863      	ldrb	r3, [r4, #1]
   da4d0:	2b02      	cmp	r3, #2
   da4d2:	d101      	bne.n	da4d8 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   da4d4:	1d21      	adds	r1, r4, #4
   da4d6:	e013      	b.n	da500 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   da4d8:	2b0a      	cmp	r3, #10
   da4da:	d114      	bne.n	da506 <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   da4dc:	2211      	movs	r2, #17
   da4de:	4649      	mov	r1, r9
   da4e0:	a801      	add	r0, sp, #4
   da4e2:	f001 fb13 	bl	dbb0c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   da4e6:	68a3      	ldr	r3, [r4, #8]
   da4e8:	bb33      	cbnz	r3, da538 <_ZN9TCPClient7connectEPKctm+0xac>
   da4ea:	68e3      	ldr	r3, [r4, #12]
   da4ec:	bb23      	cbnz	r3, da538 <_ZN9TCPClient7connectEPKctm+0xac>
   da4ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
   da4f2:	6925      	ldr	r5, [r4, #16]
   da4f4:	f7fe fa5c 	bl	d89b0 <inet_htonl>
   da4f8:	4285      	cmp	r5, r0
   da4fa:	d11d      	bne.n	da538 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   da4fc:	f104 0114 	add.w	r1, r4, #20
   da500:	a806      	add	r0, sp, #24
   da502:	f7ff fbcc 	bl	d9c9e <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   da506:	a806      	add	r0, sp, #24
   da508:	f7ff fba6 	bl	d9c58 <_ZNK9IPAddresscvbEv>
        if (addr) {
   da50c:	2800      	cmp	r0, #0
   da50e:	d02d      	beq.n	da56c <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   da510:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   da512:	ad07      	add	r5, sp, #28
   da514:	f8d3 9020 	ldr.w	r9, [r3, #32]
   da518:	4b18      	ldr	r3, [pc, #96]	; (da57c <_ZN9TCPClient7connectEPKctm+0xf0>)
   da51a:	930c      	str	r3, [sp, #48]	; 0x30
   da51c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da51e:	ac0d      	add	r4, sp, #52	; 0x34
   da520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da522:	682b      	ldr	r3, [r5, #0]
   da524:	7023      	strb	r3, [r4, #0]
   da526:	463a      	mov	r2, r7
   da528:	4643      	mov	r3, r8
   da52a:	a90c      	add	r1, sp, #48	; 0x30
   da52c:	4630      	mov	r0, r6
   da52e:	47c8      	blx	r9
   da530:	4681      	mov	r9, r0
   da532:	e01b      	b.n	da56c <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   da534:	46a1      	mov	r9, r4
   da536:	e019      	b.n	da56c <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   da538:	f104 0308 	add.w	r3, r4, #8
   da53c:	ad01      	add	r5, sp, #4
   da53e:	3418      	adds	r4, #24
   da540:	6818      	ldr	r0, [r3, #0]
   da542:	6859      	ldr	r1, [r3, #4]
   da544:	462a      	mov	r2, r5
   da546:	c203      	stmia	r2!, {r0, r1}
   da548:	3308      	adds	r3, #8
   da54a:	42a3      	cmp	r3, r4
   da54c:	4615      	mov	r5, r2
   da54e:	d1f7      	bne.n	da540 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   da550:	2306      	movs	r3, #6
            addr = IPAddress(a);
   da552:	a901      	add	r1, sp, #4
   da554:	a80c      	add	r0, sp, #48	; 0x30
   da556:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   da558:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   da55c:	f7ff fb6a 	bl	d9c34 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   da560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da562:	ac07      	add	r4, sp, #28
   da564:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da566:	682b      	ldr	r3, [r5, #0]
   da568:	7023      	strb	r3, [r4, #0]
   da56a:	e7cc      	b.n	da506 <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   da56c:	9800      	ldr	r0, [sp, #0]
   da56e:	f7fe f8af 	bl	d86d0 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   da572:	4648      	mov	r0, r9
   da574:	b013      	add	sp, #76	; 0x4c
   da576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da57a:	bf00      	nop
   da57c:	000dd35c 	.word	0x000dd35c

000da580 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   da580:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   da582:	2300      	movs	r3, #0
   da584:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   da588:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   da58a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   da58e:	4770      	bx	lr

000da590 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   da590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da594:	461e      	mov	r6, r3
    stop();
   da596:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   da598:	460c      	mov	r4, r1
   da59a:	b08a      	sub	sp, #40	; 0x28
    stop();
   da59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   da59e:	4605      	mov	r5, r0
   da5a0:	4617      	mov	r7, r2
    stop();
   da5a2:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   da5a4:	7d23      	ldrb	r3, [r4, #20]
   da5a6:	f8d5 8014 	ldr.w	r8, [r5, #20]
   da5aa:	2b04      	cmp	r3, #4
   da5ac:	bf0c      	ite	eq
   da5ae:	2002      	moveq	r0, #2
   da5b0:	200a      	movne	r0, #10
   da5b2:	2206      	movs	r2, #6
   da5b4:	2101      	movs	r1, #1
   da5b6:	f7fe fad3 	bl	d8b60 <sock_socket>
   da5ba:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   da5be:	696b      	ldr	r3, [r5, #20]
   da5c0:	681b      	ldr	r3, [r3, #0]
   da5c2:	2b00      	cmp	r3, #0
   da5c4:	db18      	blt.n	da5f8 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   da5c6:	4628      	mov	r0, r5
   da5c8:	f7ff ffda 	bl	da580 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   da5cc:	b1d6      	cbz	r6, da604 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   da5ce:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   da5d0:	a903      	add	r1, sp, #12
   da5d2:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   da5d4:	9303      	str	r3, [sp, #12]
   da5d6:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   da5da:	f7fe f939 	bl	d8850 <if_index_to_name>
   da5de:	b958      	cbnz	r0, da5f8 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   da5e0:	6968      	ldr	r0, [r5, #20]
   da5e2:	2306      	movs	r3, #6
   da5e4:	9300      	str	r3, [sp, #0]
   da5e6:	f241 020b 	movw	r2, #4107	; 0x100b
   da5ea:	ab03      	add	r3, sp, #12
   da5ec:	f640 71ff 	movw	r1, #4095	; 0xfff
   da5f0:	6800      	ldr	r0, [r0, #0]
   da5f2:	f7fe fa8d 	bl	d8b10 <sock_setsockopt>
   da5f6:	b128      	cbz	r0, da604 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   da5f8:	682b      	ldr	r3, [r5, #0]
   da5fa:	4628      	mov	r0, r5
   da5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   da5fe:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   da600:	4798      	blx	r3
   da602:	e03b      	b.n	da67c <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   da604:	261c      	movs	r6, #28
   da606:	4632      	mov	r2, r6
   da608:	2100      	movs	r1, #0
   da60a:	a803      	add	r0, sp, #12
   da60c:	f001 fa7e 	bl	dbb0c <memset>
    if (ip.version() == 4) {
   da610:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   da612:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   da616:	2b04      	cmp	r3, #4
   da618:	d10c      	bne.n	da634 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   da61a:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   da61c:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   da61e:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   da622:	f7fe f9cd 	bl	d89c0 <inet_htons>
   da626:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   da62a:	6860      	ldr	r0, [r4, #4]
   da62c:	f7fe f9c0 	bl	d89b0 <inet_htonl>
   da630:	9004      	str	r0, [sp, #16]
   da632:	e013      	b.n	da65c <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   da634:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   da636:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   da638:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   da63c:	f7fe f9c0 	bl	d89c0 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   da640:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   da642:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   da646:	1d23      	adds	r3, r4, #4
   da648:	f104 0714 	add.w	r7, r4, #20
   da64c:	6818      	ldr	r0, [r3, #0]
   da64e:	6859      	ldr	r1, [r3, #4]
   da650:	4632      	mov	r2, r6
   da652:	c203      	stmia	r2!, {r0, r1}
   da654:	3308      	adds	r3, #8
   da656:	42bb      	cmp	r3, r7
   da658:	4616      	mov	r6, r2
   da65a:	d1f7      	bne.n	da64c <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   da65c:	696b      	ldr	r3, [r5, #20]
   da65e:	221c      	movs	r2, #28
   da660:	a903      	add	r1, sp, #12
   da662:	6818      	ldr	r0, [r3, #0]
   da664:	f7fe fa64 	bl	d8b30 <sock_connect>
   da668:	2800      	cmp	r0, #0
   da66a:	d1c5      	bne.n	da5f8 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   da66c:	3404      	adds	r4, #4
   da66e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   da670:	696d      	ldr	r5, [r5, #20]
   da672:	358c      	adds	r5, #140	; 0x8c
   da674:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   da676:	6823      	ldr	r3, [r4, #0]
   da678:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   da67a:	2401      	movs	r4, #1
}
   da67c:	4620      	mov	r0, r4
   da67e:	b00a      	add	sp, #40	; 0x28
   da680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da684 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   da684:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   da686:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   da688:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   da68a:	6818      	ldr	r0, [r3, #0]
   da68c:	2800      	cmp	r0, #0
   da68e:	db01      	blt.n	da694 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   da690:	f7fe fa46 	bl	d8b20 <sock_close>
   da694:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   da696:	f04f 32ff 	mov.w	r2, #4294967295
   da69a:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   da69c:	6960      	ldr	r0, [r4, #20]
   da69e:	2211      	movs	r2, #17
   da6a0:	2100      	movs	r1, #0
   da6a2:	308c      	adds	r0, #140	; 0x8c
   da6a4:	f001 fa32 	bl	dbb0c <memset>
    d_->remoteIP.clear();
    flush_buffer();
   da6a8:	4620      	mov	r0, r4
}
   da6aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   da6ae:	f7ff bf67 	b.w	da580 <_ZN9TCPClient12flush_bufferEv>
	...

000da6b4 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   da6b4:	b530      	push	{r4, r5, lr}
   da6b6:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   da6b8:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   da6bc:	b08b      	sub	sp, #44	; 0x2c
   da6be:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   da6c0:	b11b      	cbz	r3, da6ca <_ZN9TCPClient9availableEv+0x16>
   da6c2:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   da6c6:	429a      	cmp	r2, r3
   da6c8:	d040      	beq.n	da74c <_ZN9TCPClient9availableEv+0x98>
   da6ca:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   da6cc:	6818      	ldr	r0, [r3, #0]
   da6ce:	2800      	cmp	r0, #0
   da6d0:	db3f      	blt.n	da752 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   da6d2:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   da6d6:	2d7f      	cmp	r5, #127	; 0x7f
   da6d8:	d83b      	bhi.n	da752 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   da6da:	1d19      	adds	r1, r3, #4
   da6dc:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   da6e0:	2308      	movs	r3, #8
   da6e2:	4429      	add	r1, r5
   da6e4:	f7fe fa2c 	bl	d8b40 <sock_recv>
            if (ret > 0) {
   da6e8:	2800      	cmp	r0, #0
   da6ea:	dd0c      	ble.n	da706 <_ZN9TCPClient9availableEv+0x52>
   da6ec:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   da6ee:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da6f2:	b90a      	cbnz	r2, da6f8 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   da6f4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   da6f8:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   da6fa:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   da6fe:	4418      	add	r0, r3
   da700:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   da704:	e025      	b.n	da752 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   da706:	f7fe fb7f 	bl	d8e08 <__errno>
   da70a:	6803      	ldr	r3, [r0, #0]
   da70c:	2b0b      	cmp	r3, #11
   da70e:	d020      	beq.n	da752 <_ZN9TCPClient9availableEv+0x9e>
   da710:	f7fe fb7a 	bl	d8e08 <__errno>
   da714:	6803      	ldr	r3, [r0, #0]
   da716:	2b0b      	cmp	r3, #11
   da718:	d01b      	beq.n	da752 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   da71a:	2320      	movs	r3, #32
   da71c:	2500      	movs	r5, #0
   da71e:	9302      	str	r3, [sp, #8]
   da720:	9503      	str	r5, [sp, #12]
   da722:	f7fe fb71 	bl	d8e08 <__errno>
   da726:	6803      	ldr	r3, [r0, #0]
   da728:	9301      	str	r3, [sp, #4]
   da72a:	4b0e      	ldr	r3, [pc, #56]	; (da764 <_ZN9TCPClient9availableEv+0xb0>)
   da72c:	9300      	str	r3, [sp, #0]
   da72e:	aa02      	add	r2, sp, #8
   da730:	462b      	mov	r3, r5
   da732:	490d      	ldr	r1, [pc, #52]	; (da768 <_ZN9TCPClient9availableEv+0xb4>)
   da734:	2032      	movs	r0, #50	; 0x32
   da736:	f7fe fa53 	bl	d8be0 <log_message>
                    sock_close(d_->sock);
   da73a:	6963      	ldr	r3, [r4, #20]
   da73c:	6818      	ldr	r0, [r3, #0]
   da73e:	f7fe f9ef 	bl	d8b20 <sock_close>
   da742:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   da744:	f04f 32ff 	mov.w	r2, #4294967295
   da748:	601a      	str	r2, [r3, #0]
   da74a:	e002      	b.n	da752 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   da74c:	f7ff ff18 	bl	da580 <_ZN9TCPClient12flush_bufferEv>
   da750:	e7bb      	b.n	da6ca <_ZN9TCPClient9availableEv+0x16>
   da752:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   da754:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   da758:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   da75c:	1a18      	subs	r0, r3, r0
}
   da75e:	b00b      	add	sp, #44	; 0x2c
   da760:	bd30      	pop	{r4, r5, pc}
   da762:	bf00      	nop
   da764:	000dd4c7 	.word	0x000dd4c7
   da768:	000dd4c0 	.word	0x000dd4c0

000da76c <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   da76c:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   da76e:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   da770:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   da772:	6001      	str	r1, [r0, #0]
   da774:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   da778:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   da77c:	3088      	adds	r0, #136	; 0x88
   da77e:	f7ff fa4b 	bl	d9c18 <_ZN9IPAddressC1Ev>
}
   da782:	4620      	mov	r0, r4
   da784:	bd10      	pop	{r4, pc}
	...

000da788 <_ZN9TCPClientC1Ei>:
   da788:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   da78c:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   da78e:	2300      	movs	r3, #0
   da790:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   da792:	4a14      	ldr	r2, [pc, #80]	; (da7e4 <_ZN9TCPClientC1Ei+0x5c>)
   da794:	6043      	str	r3, [r0, #4]
   da796:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   da798:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   da79a:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   da79c:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   da79e:	20a0      	movs	r0, #160	; 0xa0
   da7a0:	460e      	mov	r6, r1
   da7a2:	f7f9 fc7a 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   da7a6:	4605      	mov	r5, r0
   da7a8:	b110      	cbz	r0, da7b0 <_ZN9TCPClientC1Ei+0x28>
   da7aa:	4631      	mov	r1, r6
   da7ac:	f7ff ffde 	bl	da76c <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   da7b0:	2014      	movs	r0, #20
   da7b2:	f7f9 fc72 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   da7b6:	4603      	mov	r3, r0
   da7b8:	b128      	cbz	r0, da7c6 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   da7ba:	2201      	movs	r2, #1
   da7bc:	6042      	str	r2, [r0, #4]
   da7be:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   da7c0:	4a09      	ldr	r2, [pc, #36]	; (da7e8 <_ZN9TCPClientC1Ei+0x60>)
   da7c2:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   da7c4:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   da7c6:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   da7c8:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   da7ca:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   da7cc:	b128      	cbz	r0, da7da <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   da7ce:	6843      	ldr	r3, [r0, #4]
   da7d0:	3b01      	subs	r3, #1
   da7d2:	6043      	str	r3, [r0, #4]
   da7d4:	b90b      	cbnz	r3, da7da <_ZN9TCPClientC1Ei+0x52>
   da7d6:	f7ff fddf 	bl	da398 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   da7da:	4620      	mov	r0, r4
   da7dc:	f7ff fed0 	bl	da580 <_ZN9TCPClient12flush_bufferEv>
}
   da7e0:	4620      	mov	r0, r4
   da7e2:	bd70      	pop	{r4, r5, r6, pc}
   da7e4:	000dd47c 	.word	0x000dd47c
   da7e8:	000dd460 	.word	0x000dd460

000da7ec <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   da7ec:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   da7ee:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   da7f2:	4604      	mov	r4, r0
        : TCPClient(-1) {
   da7f4:	f7ff ffc8 	bl	da788 <_ZN9TCPClientC1Ei>
}
   da7f8:	4620      	mov	r0, r4
   da7fa:	bd10      	pop	{r4, pc}

000da7fc <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   da7fc:	b510      	push	{r4, lr}
   da7fe:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   da800:	6800      	ldr	r0, [r0, #0]
   da802:	2800      	cmp	r0, #0
   da804:	db01      	blt.n	da80a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   da806:	f7fe f98b 	bl	d8b20 <sock_close>
    }
}
   da80a:	4620      	mov	r0, r4
   da80c:	bd10      	pop	{r4, pc}

000da80e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   da80e:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   da810:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   da812:	4620      	mov	r0, r4
   da814:	f7ff fff2 	bl	da7fc <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   da818:	b124      	cbz	r4, da824 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   da81a:	4620      	mov	r0, r4
   da81c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   da820:	f7f9 bc3f 	b.w	d40a2 <_ZdlPv>
   da824:	bd10      	pop	{r4, pc}

000da826 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   da826:	2300      	movs	r3, #0
   da828:	461a      	mov	r2, r3
   da82a:	6840      	ldr	r0, [r0, #4]
   da82c:	f7fe ba1c 	b.w	d8c68 <network_connect>

000da830 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   da830:	2200      	movs	r2, #0
   da832:	2102      	movs	r1, #2
   da834:	6840      	ldr	r0, [r0, #4]
   da836:	f7fe ba27 	b.w	d8c88 <network_disconnect>

000da83a <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   da83a:	2200      	movs	r2, #0
   da83c:	4611      	mov	r1, r2
   da83e:	6840      	ldr	r0, [r0, #4]
   da840:	f7fe ba1a 	b.w	d8c78 <network_connecting>

000da844 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   da844:	2200      	movs	r2, #0
   da846:	4611      	mov	r1, r2
   da848:	6840      	ldr	r0, [r0, #4]
   da84a:	f7fe ba25 	b.w	d8c98 <network_ready>

000da84e <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   da84e:	2300      	movs	r3, #0
   da850:	461a      	mov	r2, r3
   da852:	4619      	mov	r1, r3
   da854:	6840      	ldr	r0, [r0, #4]
   da856:	f7fe ba27 	b.w	d8ca8 <network_on>

000da85a <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   da85a:	2300      	movs	r3, #0
   da85c:	461a      	mov	r2, r3
   da85e:	4619      	mov	r1, r3
   da860:	6840      	ldr	r0, [r0, #4]
   da862:	f7fe ba29 	b.w	d8cb8 <network_off>

000da866 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   da866:	2200      	movs	r2, #0
   da868:	f081 0101 	eor.w	r1, r1, #1
   da86c:	6840      	ldr	r0, [r0, #4]
   da86e:	f7fe ba2b 	b.w	d8cc8 <network_listen>

000da872 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   da872:	2200      	movs	r2, #0
   da874:	6840      	ldr	r0, [r0, #4]
   da876:	f7fe ba37 	b.w	d8ce8 <network_set_listen_timeout>

000da87a <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   da87a:	2200      	movs	r2, #0
   da87c:	4611      	mov	r1, r2
   da87e:	6840      	ldr	r0, [r0, #4]
   da880:	f7fe ba3a 	b.w	d8cf8 <network_get_listen_timeout>

000da884 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   da884:	2200      	movs	r2, #0
   da886:	4611      	mov	r1, r2
   da888:	6840      	ldr	r0, [r0, #4]
   da88a:	f7fe ba25 	b.w	d8cd8 <network_listening>

000da88e <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   da88e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   da892:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   da894:	b095      	sub	sp, #84	; 0x54
   da896:	4616      	mov	r6, r2
   da898:	460d      	mov	r5, r1
   da89a:	4607      	mov	r7, r0
    IPAddress addr;
   da89c:	f7ff f9bc 	bl	d9c18 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   da8a0:	4621      	mov	r1, r4
   da8a2:	2220      	movs	r2, #32
   da8a4:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   da8a6:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   da8a8:	f001 f930 	bl	dbb0c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   da8ac:	2340      	movs	r3, #64	; 0x40
   da8ae:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   da8b0:	4621      	mov	r1, r4
   da8b2:	466b      	mov	r3, sp
   da8b4:	aa0c      	add	r2, sp, #48	; 0x30
   da8b6:	4630      	mov	r0, r6
   da8b8:	f7fd ff12 	bl	d86e0 <netdb_getaddrinfo>
    if (!r) {
   da8bc:	4604      	mov	r4, r0
   da8be:	2800      	cmp	r0, #0
   da8c0:	d144      	bne.n	da94c <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   da8c2:	4602      	mov	r2, r0
   da8c4:	2101      	movs	r1, #1
   da8c6:	6868      	ldr	r0, [r5, #4]
   da8c8:	f7fe f9e6 	bl	d8c98 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da8cc:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   da8ce:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da8d0:	4622      	mov	r2, r4
   da8d2:	6868      	ldr	r0, [r5, #4]
   da8d4:	f7fe f9e0 	bl	d8c98 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da8d8:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da8da:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   da8dc:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da8de:	2e00      	cmp	r6, #0
   da8e0:	d034      	beq.n	da94c <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   da8e2:	2900      	cmp	r1, #0
   da8e4:	d132      	bne.n	da94c <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   da8e6:	6873      	ldr	r3, [r6, #4]
   da8e8:	2b02      	cmp	r3, #2
   da8ea:	d002      	beq.n	da8f2 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   da8ec:	2b0a      	cmp	r3, #10
   da8ee:	d009      	beq.n	da904 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   da8f0:	e02a      	b.n	da948 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   da8f2:	f1b8 0f00 	cmp.w	r8, #0
   da8f6:	d027      	beq.n	da948 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   da8f8:	6971      	ldr	r1, [r6, #20]
   da8fa:	4638      	mov	r0, r7
   da8fc:	3104      	adds	r1, #4
   da8fe:	f7ff f9ce 	bl	d9c9e <_ZN9IPAddressaSEPKh>
   da902:	e020      	b.n	da946 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   da904:	f1b9 0f00 	cmp.w	r9, #0
   da908:	d01e      	beq.n	da948 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   da90a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   da90c:	2211      	movs	r2, #17
   da90e:	a801      	add	r0, sp, #4
   da910:	f001 f8fc 	bl	dbb0c <memset>
                    a.v = 6;
   da914:	2306      	movs	r3, #6
   da916:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   da91a:	ad01      	add	r5, sp, #4
   da91c:	f104 0308 	add.w	r3, r4, #8
   da920:	3418      	adds	r4, #24
   da922:	6818      	ldr	r0, [r3, #0]
   da924:	6859      	ldr	r1, [r3, #4]
   da926:	462a      	mov	r2, r5
   da928:	c203      	stmia	r2!, {r0, r1}
   da92a:	3308      	adds	r3, #8
   da92c:	42a3      	cmp	r3, r4
   da92e:	4615      	mov	r5, r2
   da930:	d1f7      	bne.n	da922 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   da932:	a901      	add	r1, sp, #4
   da934:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   da936:	ad07      	add	r5, sp, #28
   da938:	f7ff f97c 	bl	d9c34 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   da93c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da93e:	1d3c      	adds	r4, r7, #4
   da940:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da942:	682b      	ldr	r3, [r5, #0]
   da944:	7023      	strb	r3, [r4, #0]
                    ok = true;
   da946:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da948:	69f6      	ldr	r6, [r6, #28]
   da94a:	e7c8      	b.n	da8de <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   da94c:	9800      	ldr	r0, [sp, #0]
   da94e:	f7fd febf 	bl	d86d0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   da952:	4638      	mov	r0, r7
   da954:	b015      	add	sp, #84	; 0x54
   da956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000da95c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   da95c:	4b02      	ldr	r3, [pc, #8]	; (da968 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   da95e:	4a03      	ldr	r2, [pc, #12]	; (da96c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   da960:	601a      	str	r2, [r3, #0]
   da962:	2200      	movs	r2, #0
   da964:	605a      	str	r2, [r3, #4]
   da966:	4770      	bx	lr
   da968:	2003e3bc 	.word	0x2003e3bc
   da96c:	000dd4e0 	.word	0x000dd4e0

000da970 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   da970:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   da972:	4e18      	ldr	r6, [pc, #96]	; (da9d4 <pinAvailable+0x64>)
   da974:	6831      	ldr	r1, [r6, #0]
   da976:	f011 0501 	ands.w	r5, r1, #1
   da97a:	4604      	mov	r4, r0
   da97c:	d10a      	bne.n	da994 <pinAvailable+0x24>
   da97e:	4630      	mov	r0, r6
   da980:	f7f9 fb93 	bl	d40aa <__cxa_guard_acquire>
   da984:	b130      	cbz	r0, da994 <pinAvailable+0x24>
   da986:	4629      	mov	r1, r5
   da988:	4813      	ldr	r0, [pc, #76]	; (da9d8 <pinAvailable+0x68>)
   da98a:	f7fe fa89 	bl	d8ea0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   da98e:	4630      	mov	r0, r6
   da990:	f7f9 fb90 	bl	d40b4 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   da994:	4810      	ldr	r0, [pc, #64]	; (da9d8 <pinAvailable+0x68>)
   da996:	f7fe fbb8 	bl	d910a <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   da99a:	b128      	cbz	r0, da9a8 <pinAvailable+0x38>
   da99c:	f1a4 030b 	sub.w	r3, r4, #11
   da9a0:	2b02      	cmp	r3, #2
   da9a2:	d801      	bhi.n	da9a8 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   da9a4:	2000      	movs	r0, #0
   da9a6:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   da9a8:	f000 f89e 	bl	daae8 <_Z19__fetch_global_Wirev>
   da9ac:	f7ff fba1 	bl	da0f2 <_ZN7TwoWire9isEnabledEv>
   da9b0:	b108      	cbz	r0, da9b6 <pinAvailable+0x46>
   da9b2:	2c01      	cmp	r4, #1
   da9b4:	d9f6      	bls.n	da9a4 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   da9b6:	f7ff faff 	bl	d9fb8 <_Z22__fetch_global_Serial1v>
   da9ba:	f7ff faf9 	bl	d9fb0 <_ZN11USARTSerial9isEnabledEv>
   da9be:	b118      	cbz	r0, da9c8 <pinAvailable+0x58>
   da9c0:	f1a4 0309 	sub.w	r3, r4, #9
   da9c4:	2b01      	cmp	r3, #1
   da9c6:	d9ed      	bls.n	da9a4 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   da9c8:	2c23      	cmp	r4, #35	; 0x23
   da9ca:	bf8c      	ite	hi
   da9cc:	2000      	movhi	r0, #0
   da9ce:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   da9d0:	bd70      	pop	{r4, r5, r6, pc}
   da9d2:	bf00      	nop
   da9d4:	2003d9b8 	.word	0x2003d9b8
   da9d8:	2003d9bc 	.word	0x2003d9bc

000da9dc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da9dc:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   da9de:	b538      	push	{r3, r4, r5, lr}
   da9e0:	4604      	mov	r4, r0
   da9e2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da9e4:	d80a      	bhi.n	da9fc <pinMode+0x20>
   da9e6:	29ff      	cmp	r1, #255	; 0xff
   da9e8:	d008      	beq.n	da9fc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   da9ea:	f7ff ffc1 	bl	da970 <pinAvailable>
   da9ee:	b128      	cbz	r0, da9fc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   da9f0:	4629      	mov	r1, r5
   da9f2:	4620      	mov	r0, r4
}
   da9f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   da9f8:	f7fd be82 	b.w	d8700 <HAL_Pin_Mode>
   da9fc:	bd38      	pop	{r3, r4, r5, pc}

000da9fe <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   da9fe:	b538      	push	{r3, r4, r5, lr}
   daa00:	4604      	mov	r4, r0
   daa02:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   daa04:	f7fd fe84 	bl	d8710 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   daa08:	28ff      	cmp	r0, #255	; 0xff
   daa0a:	d010      	beq.n	daa2e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   daa0c:	2806      	cmp	r0, #6
   daa0e:	d804      	bhi.n	daa1a <digitalWrite+0x1c>
   daa10:	234d      	movs	r3, #77	; 0x4d
   daa12:	fa23 f000 	lsr.w	r0, r3, r0
   daa16:	07c3      	lsls	r3, r0, #31
   daa18:	d409      	bmi.n	daa2e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   daa1a:	4620      	mov	r0, r4
   daa1c:	f7ff ffa8 	bl	da970 <pinAvailable>
   daa20:	b128      	cbz	r0, daa2e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   daa22:	4629      	mov	r1, r5
   daa24:	4620      	mov	r0, r4
}
   daa26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   daa2a:	f7fd be79 	b.w	d8720 <HAL_GPIO_Write>
   daa2e:	bd38      	pop	{r3, r4, r5, pc}

000daa30 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   daa30:	b510      	push	{r4, lr}
   daa32:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   daa34:	f7fd fe6c 	bl	d8710 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   daa38:	3804      	subs	r0, #4
   daa3a:	b2c0      	uxtb	r0, r0
   daa3c:	2801      	cmp	r0, #1
   daa3e:	d908      	bls.n	daa52 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   daa40:	4620      	mov	r0, r4
   daa42:	f7ff ff95 	bl	da970 <pinAvailable>
   daa46:	b120      	cbz	r0, daa52 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   daa48:	4620      	mov	r0, r4
}
   daa4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   daa4e:	f7fd be6f 	b.w	d8730 <HAL_GPIO_Read>
}
   daa52:	2000      	movs	r0, #0
   daa54:	bd10      	pop	{r4, pc}
	...

000daa58 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   daa58:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   daa5a:	4c07      	ldr	r4, [pc, #28]	; (daa78 <_Z21__fetch_global_EEPROMv+0x20>)
   daa5c:	6823      	ldr	r3, [r4, #0]
   daa5e:	07db      	lsls	r3, r3, #31
   daa60:	d408      	bmi.n	daa74 <_Z21__fetch_global_EEPROMv+0x1c>
   daa62:	4620      	mov	r0, r4
   daa64:	f7f9 fb21 	bl	d40aa <__cxa_guard_acquire>
   daa68:	b120      	cbz	r0, daa74 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   daa6a:	f7fd ff19 	bl	d88a0 <HAL_EEPROM_Init>
   daa6e:	4620      	mov	r0, r4
   daa70:	f7f9 fb20 	bl	d40b4 <__cxa_guard_release>
	return eeprom;
}
   daa74:	4801      	ldr	r0, [pc, #4]	; (daa7c <_Z21__fetch_global_EEPROMv+0x24>)
   daa76:	bd10      	pop	{r4, pc}
   daa78:	2003e3c8 	.word	0x2003e3c8
   daa7c:	2003e3cc 	.word	0x2003e3cc

000daa80 <_Z17acquireWireBufferv>:
   daa80:	b570      	push	{r4, r5, r6, lr}
   daa82:	4604      	mov	r4, r0
   daa84:	2514      	movs	r5, #20
   daa86:	462a      	mov	r2, r5
   daa88:	4e09      	ldr	r6, [pc, #36]	; (daab0 <_Z17acquireWireBufferv+0x30>)
   daa8a:	2100      	movs	r1, #0
   daa8c:	f001 f83e 	bl	dbb0c <memset>
   daa90:	8025      	strh	r5, [r4, #0]
   daa92:	2520      	movs	r5, #32
   daa94:	4631      	mov	r1, r6
   daa96:	60a5      	str	r5, [r4, #8]
   daa98:	6125      	str	r5, [r4, #16]
   daa9a:	4628      	mov	r0, r5
   daa9c:	f000 f880 	bl	daba0 <_ZnajRKSt9nothrow_t>
   daaa0:	4631      	mov	r1, r6
   daaa2:	6060      	str	r0, [r4, #4]
   daaa4:	4628      	mov	r0, r5
   daaa6:	f000 f87b 	bl	daba0 <_ZnajRKSt9nothrow_t>
   daaaa:	60e0      	str	r0, [r4, #12]
   daaac:	4620      	mov	r0, r4
   daaae:	bd70      	pop	{r4, r5, r6, pc}
   daab0:	000dd50c 	.word	0x000dd50c

000daab4 <_Z18acquireWire1Bufferv>:
	return defaultWireConfig();
}

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
   daab4:	b570      	push	{r4, r5, r6, lr}
   daab6:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   daab8:	2514      	movs	r5, #20
   daaba:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   daabc:	4e09      	ldr	r6, [pc, #36]	; (daae4 <_Z18acquireWire1Bufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   daabe:	2100      	movs	r1, #0
   daac0:	f001 f824 	bl	dbb0c <memset>
   daac4:	8025      	strh	r5, [r4, #0]
   daac6:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   daac8:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   daaca:	60a5      	str	r5, [r4, #8]
   daacc:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   daace:	4628      	mov	r0, r5
   daad0:	f000 f866 	bl	daba0 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   daad4:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   daad6:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   daad8:	4628      	mov	r0, r5
   daada:	f000 f861 	bl	daba0 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   daade:	60e0      	str	r0, [r4, #12]

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
	return defaultWireConfig();
}
   daae0:	4620      	mov	r0, r4
   daae2:	bd70      	pop	{r4, r5, r6, pc}
   daae4:	000dd50c 	.word	0x000dd50c

000daae8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   daae8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   daaea:	4d0e      	ldr	r5, [pc, #56]	; (dab24 <_Z19__fetch_global_Wirev+0x3c>)
   daaec:	6829      	ldr	r1, [r5, #0]
   daaee:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   daaf2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   daaf4:	d113      	bne.n	dab1e <_Z19__fetch_global_Wirev+0x36>
   daaf6:	4628      	mov	r0, r5
   daaf8:	f7f9 fad7 	bl	d40aa <__cxa_guard_acquire>
   daafc:	b178      	cbz	r0, dab1e <_Z19__fetch_global_Wirev+0x36>
   daafe:	a801      	add	r0, sp, #4
   dab00:	f7ff ffbe 	bl	daa80 <_Z17acquireWireBufferv>
   dab04:	aa01      	add	r2, sp, #4
   dab06:	4621      	mov	r1, r4
   dab08:	4807      	ldr	r0, [pc, #28]	; (dab28 <_Z19__fetch_global_Wirev+0x40>)
   dab0a:	f7ff faa7 	bl	da05c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   dab0e:	4628      	mov	r0, r5
   dab10:	f7f9 fad0 	bl	d40b4 <__cxa_guard_release>
   dab14:	4a05      	ldr	r2, [pc, #20]	; (dab2c <_Z19__fetch_global_Wirev+0x44>)
   dab16:	4906      	ldr	r1, [pc, #24]	; (dab30 <_Z19__fetch_global_Wirev+0x48>)
   dab18:	4803      	ldr	r0, [pc, #12]	; (dab28 <_Z19__fetch_global_Wirev+0x40>)
   dab1a:	f000 f831 	bl	dab80 <__aeabi_atexit>
	return wire;
}
   dab1e:	4802      	ldr	r0, [pc, #8]	; (dab28 <_Z19__fetch_global_Wirev+0x40>)
   dab20:	b007      	add	sp, #28
   dab22:	bd30      	pop	{r4, r5, pc}
   dab24:	2003e3d0 	.word	0x2003e3d0
   dab28:	2003e3e8 	.word	0x2003e3e8
   dab2c:	2003d8b8 	.word	0x2003d8b8
   dab30:	000da005 	.word	0x000da005

000dab34 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   dab34:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   dab36:	4c0e      	ldr	r4, [pc, #56]	; (dab70 <_Z20__fetch_global_Wire1v+0x3c>)
   dab38:	6823      	ldr	r3, [r4, #0]
   dab3a:	07db      	lsls	r3, r3, #31
	return wire;
}

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   dab3c:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   dab3e:	d413      	bmi.n	dab68 <_Z20__fetch_global_Wire1v+0x34>
   dab40:	4620      	mov	r0, r4
   dab42:	f7f9 fab2 	bl	d40aa <__cxa_guard_acquire>
   dab46:	b178      	cbz	r0, dab68 <_Z20__fetch_global_Wire1v+0x34>
   dab48:	a801      	add	r0, sp, #4
   dab4a:	f7ff ffb3 	bl	daab4 <_Z18acquireWire1Bufferv>
   dab4e:	aa01      	add	r2, sp, #4
   dab50:	2101      	movs	r1, #1
   dab52:	4808      	ldr	r0, [pc, #32]	; (dab74 <_Z20__fetch_global_Wire1v+0x40>)
   dab54:	f7ff fa82 	bl	da05c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   dab58:	4620      	mov	r0, r4
   dab5a:	f7f9 faab 	bl	d40b4 <__cxa_guard_release>
   dab5e:	4a06      	ldr	r2, [pc, #24]	; (dab78 <_Z20__fetch_global_Wire1v+0x44>)
   dab60:	4906      	ldr	r1, [pc, #24]	; (dab7c <_Z20__fetch_global_Wire1v+0x48>)
   dab62:	4804      	ldr	r0, [pc, #16]	; (dab74 <_Z20__fetch_global_Wire1v+0x40>)
   dab64:	f000 f80c 	bl	dab80 <__aeabi_atexit>
	return wire;
}
   dab68:	4802      	ldr	r0, [pc, #8]	; (dab74 <_Z20__fetch_global_Wire1v+0x40>)
   dab6a:	b006      	add	sp, #24
   dab6c:	bd10      	pop	{r4, pc}
   dab6e:	bf00      	nop
   dab70:	2003e3fc 	.word	0x2003e3fc
   dab74:	2003e3d4 	.word	0x2003e3d4
   dab78:	2003d8b8 	.word	0x2003d8b8
   dab7c:	000da005 	.word	0x000da005

000dab80 <__aeabi_atexit>:
   dab80:	460b      	mov	r3, r1
   dab82:	4601      	mov	r1, r0
   dab84:	4618      	mov	r0, r3
   dab86:	f000 bea1 	b.w	db8cc <__cxa_atexit>
	...

000dab8c <_ZSt15get_new_handlerv>:
   dab8c:	4b02      	ldr	r3, [pc, #8]	; (dab98 <_ZSt15get_new_handlerv+0xc>)
   dab8e:	6818      	ldr	r0, [r3, #0]
   dab90:	f3bf 8f5f 	dmb	sy
   dab94:	4770      	bx	lr
   dab96:	bf00      	nop
   dab98:	2003e400 	.word	0x2003e400

000dab9c <_ZdlPvj>:
   dab9c:	f7f9 ba81 	b.w	d40a2 <_ZdlPv>

000daba0 <_ZnajRKSt9nothrow_t>:
   daba0:	f000 b800 	b.w	daba4 <_ZnwjRKSt9nothrow_t>

000daba4 <_ZnwjRKSt9nothrow_t>:
   daba4:	b510      	push	{r4, lr}
   daba6:	2800      	cmp	r0, #0
   daba8:	bf14      	ite	ne
   dabaa:	4604      	movne	r4, r0
   dabac:	2401      	moveq	r4, #1
   dabae:	4620      	mov	r0, r4
   dabb0:	f7fe f8da 	bl	d8d68 <malloc>
   dabb4:	b920      	cbnz	r0, dabc0 <_ZnwjRKSt9nothrow_t+0x1c>
   dabb6:	f7ff ffe9 	bl	dab8c <_ZSt15get_new_handlerv>
   dabba:	b108      	cbz	r0, dabc0 <_ZnwjRKSt9nothrow_t+0x1c>
   dabbc:	4780      	blx	r0
   dabbe:	e7f6      	b.n	dabae <_ZnwjRKSt9nothrow_t+0xa>
   dabc0:	bd10      	pop	{r4, pc}
	...

000dabc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   dabc4:	4b18      	ldr	r3, [pc, #96]	; (dac28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   dabc6:	681a      	ldr	r2, [r3, #0]
   dabc8:	07d1      	lsls	r1, r2, #31
   dabca:	bf5c      	itt	pl
   dabcc:	2201      	movpl	r2, #1
   dabce:	601a      	strpl	r2, [r3, #0]
   dabd0:	4b16      	ldr	r3, [pc, #88]	; (dac2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   dabd2:	681a      	ldr	r2, [r3, #0]
   dabd4:	07d2      	lsls	r2, r2, #31
   dabd6:	bf5c      	itt	pl
   dabd8:	2201      	movpl	r2, #1
   dabda:	601a      	strpl	r2, [r3, #0]
   dabdc:	4b14      	ldr	r3, [pc, #80]	; (dac30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   dabde:	681a      	ldr	r2, [r3, #0]
   dabe0:	07d0      	lsls	r0, r2, #31
   dabe2:	bf5c      	itt	pl
   dabe4:	2201      	movpl	r2, #1
   dabe6:	601a      	strpl	r2, [r3, #0]
   dabe8:	4b12      	ldr	r3, [pc, #72]	; (dac34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   dabea:	681a      	ldr	r2, [r3, #0]
   dabec:	07d1      	lsls	r1, r2, #31
   dabee:	bf5c      	itt	pl
   dabf0:	2201      	movpl	r2, #1
   dabf2:	601a      	strpl	r2, [r3, #0]
   dabf4:	4b10      	ldr	r3, [pc, #64]	; (dac38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   dabf6:	681a      	ldr	r2, [r3, #0]
   dabf8:	07d2      	lsls	r2, r2, #31
   dabfa:	bf5c      	itt	pl
   dabfc:	2201      	movpl	r2, #1
   dabfe:	601a      	strpl	r2, [r3, #0]
   dac00:	4b0e      	ldr	r3, [pc, #56]	; (dac3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   dac02:	681a      	ldr	r2, [r3, #0]
   dac04:	07d0      	lsls	r0, r2, #31
   dac06:	bf5c      	itt	pl
   dac08:	2201      	movpl	r2, #1
   dac0a:	601a      	strpl	r2, [r3, #0]
   dac0c:	4b0c      	ldr	r3, [pc, #48]	; (dac40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   dac0e:	681a      	ldr	r2, [r3, #0]
   dac10:	07d1      	lsls	r1, r2, #31
   dac12:	bf5c      	itt	pl
   dac14:	2201      	movpl	r2, #1
   dac16:	601a      	strpl	r2, [r3, #0]
   dac18:	4b0a      	ldr	r3, [pc, #40]	; (dac44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   dac1a:	681a      	ldr	r2, [r3, #0]
   dac1c:	07d2      	lsls	r2, r2, #31
   dac1e:	bf5c      	itt	pl
   dac20:	2201      	movpl	r2, #1
   dac22:	601a      	strpl	r2, [r3, #0]
   dac24:	4770      	bx	lr
   dac26:	bf00      	nop
   dac28:	2003e420 	.word	0x2003e420
   dac2c:	2003e41c 	.word	0x2003e41c
   dac30:	2003e418 	.word	0x2003e418
   dac34:	2003e414 	.word	0x2003e414
   dac38:	2003e410 	.word	0x2003e410
   dac3c:	2003e40c 	.word	0x2003e40c
   dac40:	2003e408 	.word	0x2003e408
   dac44:	2003e404 	.word	0x2003e404

000dac48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   dac48:	4b24      	ldr	r3, [pc, #144]	; (dacdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   dac4a:	681a      	ldr	r2, [r3, #0]
   dac4c:	07d0      	lsls	r0, r2, #31
   dac4e:	bf5c      	itt	pl
   dac50:	2201      	movpl	r2, #1
   dac52:	601a      	strpl	r2, [r3, #0]
   dac54:	4b22      	ldr	r3, [pc, #136]	; (dace0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   dac56:	681a      	ldr	r2, [r3, #0]
   dac58:	07d1      	lsls	r1, r2, #31
   dac5a:	bf5c      	itt	pl
   dac5c:	2201      	movpl	r2, #1
   dac5e:	601a      	strpl	r2, [r3, #0]
   dac60:	4b20      	ldr	r3, [pc, #128]	; (dace4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   dac62:	681a      	ldr	r2, [r3, #0]
   dac64:	07d2      	lsls	r2, r2, #31
   dac66:	bf5c      	itt	pl
   dac68:	2201      	movpl	r2, #1
   dac6a:	601a      	strpl	r2, [r3, #0]
   dac6c:	4b1e      	ldr	r3, [pc, #120]	; (dace8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   dac6e:	681a      	ldr	r2, [r3, #0]
   dac70:	07d0      	lsls	r0, r2, #31
   dac72:	bf5c      	itt	pl
   dac74:	2201      	movpl	r2, #1
   dac76:	601a      	strpl	r2, [r3, #0]
   dac78:	4b1c      	ldr	r3, [pc, #112]	; (dacec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   dac7a:	681a      	ldr	r2, [r3, #0]
   dac7c:	07d1      	lsls	r1, r2, #31
   dac7e:	bf5c      	itt	pl
   dac80:	2201      	movpl	r2, #1
   dac82:	601a      	strpl	r2, [r3, #0]
   dac84:	4b1a      	ldr	r3, [pc, #104]	; (dacf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   dac86:	681a      	ldr	r2, [r3, #0]
   dac88:	07d2      	lsls	r2, r2, #31
   dac8a:	bf5c      	itt	pl
   dac8c:	2201      	movpl	r2, #1
   dac8e:	601a      	strpl	r2, [r3, #0]
   dac90:	4b18      	ldr	r3, [pc, #96]	; (dacf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   dac92:	681a      	ldr	r2, [r3, #0]
   dac94:	07d0      	lsls	r0, r2, #31
   dac96:	bf5c      	itt	pl
   dac98:	2201      	movpl	r2, #1
   dac9a:	601a      	strpl	r2, [r3, #0]
   dac9c:	4b16      	ldr	r3, [pc, #88]	; (dacf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   dac9e:	681a      	ldr	r2, [r3, #0]
   daca0:	07d1      	lsls	r1, r2, #31
   daca2:	bf5c      	itt	pl
   daca4:	2201      	movpl	r2, #1
   daca6:	601a      	strpl	r2, [r3, #0]
   daca8:	4b14      	ldr	r3, [pc, #80]	; (dacfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   dacaa:	681a      	ldr	r2, [r3, #0]
   dacac:	07d2      	lsls	r2, r2, #31
   dacae:	bf5c      	itt	pl
   dacb0:	2201      	movpl	r2, #1
   dacb2:	601a      	strpl	r2, [r3, #0]
   dacb4:	4b12      	ldr	r3, [pc, #72]	; (dad00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   dacb6:	681a      	ldr	r2, [r3, #0]
   dacb8:	07d0      	lsls	r0, r2, #31
   dacba:	bf5c      	itt	pl
   dacbc:	2201      	movpl	r2, #1
   dacbe:	601a      	strpl	r2, [r3, #0]
   dacc0:	4b10      	ldr	r3, [pc, #64]	; (dad04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   dacc2:	681a      	ldr	r2, [r3, #0]
   dacc4:	07d1      	lsls	r1, r2, #31
   dacc6:	bf5c      	itt	pl
   dacc8:	2201      	movpl	r2, #1
   dacca:	601a      	strpl	r2, [r3, #0]
   daccc:	4b0e      	ldr	r3, [pc, #56]	; (dad08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   dacce:	681a      	ldr	r2, [r3, #0]
   dacd0:	07d2      	lsls	r2, r2, #31
   dacd2:	bf5c      	itt	pl
   dacd4:	2201      	movpl	r2, #1
   dacd6:	601a      	strpl	r2, [r3, #0]
   dacd8:	4770      	bx	lr
   dacda:	bf00      	nop
   dacdc:	2003e450 	.word	0x2003e450
   dace0:	2003e44c 	.word	0x2003e44c
   dace4:	2003e448 	.word	0x2003e448
   dace8:	2003e444 	.word	0x2003e444
   dacec:	2003e440 	.word	0x2003e440
   dacf0:	2003e43c 	.word	0x2003e43c
   dacf4:	2003e438 	.word	0x2003e438
   dacf8:	2003e434 	.word	0x2003e434
   dacfc:	2003e430 	.word	0x2003e430
   dad00:	2003e42c 	.word	0x2003e42c
   dad04:	2003e428 	.word	0x2003e428
   dad08:	2003e424 	.word	0x2003e424

000dad0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   dad0c:	4b24      	ldr	r3, [pc, #144]	; (dada0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   dad0e:	681a      	ldr	r2, [r3, #0]
   dad10:	07d0      	lsls	r0, r2, #31
   dad12:	bf5c      	itt	pl
   dad14:	2201      	movpl	r2, #1
   dad16:	601a      	strpl	r2, [r3, #0]
   dad18:	4b22      	ldr	r3, [pc, #136]	; (dada4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   dad1a:	681a      	ldr	r2, [r3, #0]
   dad1c:	07d1      	lsls	r1, r2, #31
   dad1e:	bf5c      	itt	pl
   dad20:	2201      	movpl	r2, #1
   dad22:	601a      	strpl	r2, [r3, #0]
   dad24:	4b20      	ldr	r3, [pc, #128]	; (dada8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   dad26:	681a      	ldr	r2, [r3, #0]
   dad28:	07d2      	lsls	r2, r2, #31
   dad2a:	bf5c      	itt	pl
   dad2c:	2201      	movpl	r2, #1
   dad2e:	601a      	strpl	r2, [r3, #0]
   dad30:	4b1e      	ldr	r3, [pc, #120]	; (dadac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   dad32:	681a      	ldr	r2, [r3, #0]
   dad34:	07d0      	lsls	r0, r2, #31
   dad36:	bf5c      	itt	pl
   dad38:	2201      	movpl	r2, #1
   dad3a:	601a      	strpl	r2, [r3, #0]
   dad3c:	4b1c      	ldr	r3, [pc, #112]	; (dadb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   dad3e:	681a      	ldr	r2, [r3, #0]
   dad40:	07d1      	lsls	r1, r2, #31
   dad42:	bf5c      	itt	pl
   dad44:	2201      	movpl	r2, #1
   dad46:	601a      	strpl	r2, [r3, #0]
   dad48:	4b1a      	ldr	r3, [pc, #104]	; (dadb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   dad4a:	681a      	ldr	r2, [r3, #0]
   dad4c:	07d2      	lsls	r2, r2, #31
   dad4e:	bf5c      	itt	pl
   dad50:	2201      	movpl	r2, #1
   dad52:	601a      	strpl	r2, [r3, #0]
   dad54:	4b18      	ldr	r3, [pc, #96]	; (dadb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   dad56:	681a      	ldr	r2, [r3, #0]
   dad58:	07d0      	lsls	r0, r2, #31
   dad5a:	bf5c      	itt	pl
   dad5c:	2201      	movpl	r2, #1
   dad5e:	601a      	strpl	r2, [r3, #0]
   dad60:	4b16      	ldr	r3, [pc, #88]	; (dadbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   dad62:	681a      	ldr	r2, [r3, #0]
   dad64:	07d1      	lsls	r1, r2, #31
   dad66:	bf5c      	itt	pl
   dad68:	2201      	movpl	r2, #1
   dad6a:	601a      	strpl	r2, [r3, #0]
   dad6c:	4b14      	ldr	r3, [pc, #80]	; (dadc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   dad6e:	681a      	ldr	r2, [r3, #0]
   dad70:	07d2      	lsls	r2, r2, #31
   dad72:	bf5c      	itt	pl
   dad74:	2201      	movpl	r2, #1
   dad76:	601a      	strpl	r2, [r3, #0]
   dad78:	4b12      	ldr	r3, [pc, #72]	; (dadc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   dad7a:	681a      	ldr	r2, [r3, #0]
   dad7c:	07d0      	lsls	r0, r2, #31
   dad7e:	bf5c      	itt	pl
   dad80:	2201      	movpl	r2, #1
   dad82:	601a      	strpl	r2, [r3, #0]
   dad84:	4b10      	ldr	r3, [pc, #64]	; (dadc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   dad86:	681a      	ldr	r2, [r3, #0]
   dad88:	07d1      	lsls	r1, r2, #31
   dad8a:	bf5c      	itt	pl
   dad8c:	2201      	movpl	r2, #1
   dad8e:	601a      	strpl	r2, [r3, #0]
   dad90:	4b0e      	ldr	r3, [pc, #56]	; (dadcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   dad92:	681a      	ldr	r2, [r3, #0]
   dad94:	07d2      	lsls	r2, r2, #31
   dad96:	bf5c      	itt	pl
   dad98:	2201      	movpl	r2, #1
   dad9a:	601a      	strpl	r2, [r3, #0]
   dad9c:	4770      	bx	lr
   dad9e:	bf00      	nop
   dada0:	2003e480 	.word	0x2003e480
   dada4:	2003e47c 	.word	0x2003e47c
   dada8:	2003e478 	.word	0x2003e478
   dadac:	2003e474 	.word	0x2003e474
   dadb0:	2003e470 	.word	0x2003e470
   dadb4:	2003e46c 	.word	0x2003e46c
   dadb8:	2003e468 	.word	0x2003e468
   dadbc:	2003e464 	.word	0x2003e464
   dadc0:	2003e460 	.word	0x2003e460
   dadc4:	2003e45c 	.word	0x2003e45c
   dadc8:	2003e458 	.word	0x2003e458
   dadcc:	2003e454 	.word	0x2003e454

000dadd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   dadd0:	4b18      	ldr	r3, [pc, #96]	; (dae34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   dadd2:	681a      	ldr	r2, [r3, #0]
   dadd4:	07d1      	lsls	r1, r2, #31
   dadd6:	bf5c      	itt	pl
   dadd8:	2201      	movpl	r2, #1
   dadda:	601a      	strpl	r2, [r3, #0]
   daddc:	4b16      	ldr	r3, [pc, #88]	; (dae38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   dadde:	681a      	ldr	r2, [r3, #0]
   dade0:	07d2      	lsls	r2, r2, #31
   dade2:	bf5c      	itt	pl
   dade4:	2201      	movpl	r2, #1
   dade6:	601a      	strpl	r2, [r3, #0]
   dade8:	4b14      	ldr	r3, [pc, #80]	; (dae3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   dadea:	681a      	ldr	r2, [r3, #0]
   dadec:	07d0      	lsls	r0, r2, #31
   dadee:	bf5c      	itt	pl
   dadf0:	2201      	movpl	r2, #1
   dadf2:	601a      	strpl	r2, [r3, #0]
   dadf4:	4b12      	ldr	r3, [pc, #72]	; (dae40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   dadf6:	681a      	ldr	r2, [r3, #0]
   dadf8:	07d1      	lsls	r1, r2, #31
   dadfa:	bf5c      	itt	pl
   dadfc:	2201      	movpl	r2, #1
   dadfe:	601a      	strpl	r2, [r3, #0]
   dae00:	4b10      	ldr	r3, [pc, #64]	; (dae44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   dae02:	681a      	ldr	r2, [r3, #0]
   dae04:	07d2      	lsls	r2, r2, #31
   dae06:	bf5c      	itt	pl
   dae08:	2201      	movpl	r2, #1
   dae0a:	601a      	strpl	r2, [r3, #0]
   dae0c:	4b0e      	ldr	r3, [pc, #56]	; (dae48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   dae0e:	681a      	ldr	r2, [r3, #0]
   dae10:	07d0      	lsls	r0, r2, #31
   dae12:	bf5c      	itt	pl
   dae14:	2201      	movpl	r2, #1
   dae16:	601a      	strpl	r2, [r3, #0]
   dae18:	4b0c      	ldr	r3, [pc, #48]	; (dae4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   dae1a:	681a      	ldr	r2, [r3, #0]
   dae1c:	07d1      	lsls	r1, r2, #31
   dae1e:	bf5c      	itt	pl
   dae20:	2201      	movpl	r2, #1
   dae22:	601a      	strpl	r2, [r3, #0]
   dae24:	4b0a      	ldr	r3, [pc, #40]	; (dae50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   dae26:	681a      	ldr	r2, [r3, #0]
   dae28:	07d2      	lsls	r2, r2, #31
   dae2a:	bf5c      	itt	pl
   dae2c:	2201      	movpl	r2, #1
   dae2e:	601a      	strpl	r2, [r3, #0]
   dae30:	4770      	bx	lr
   dae32:	bf00      	nop
   dae34:	2003e4a0 	.word	0x2003e4a0
   dae38:	2003e49c 	.word	0x2003e49c
   dae3c:	2003e498 	.word	0x2003e498
   dae40:	2003e494 	.word	0x2003e494
   dae44:	2003e490 	.word	0x2003e490
   dae48:	2003e48c 	.word	0x2003e48c
   dae4c:	2003e488 	.word	0x2003e488
   dae50:	2003e484 	.word	0x2003e484

000dae54 <__aeabi_drsub>:
   dae54:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   dae58:	e002      	b.n	dae60 <__adddf3>
   dae5a:	bf00      	nop

000dae5c <__aeabi_dsub>:
   dae5c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000dae60 <__adddf3>:
   dae60:	b530      	push	{r4, r5, lr}
   dae62:	ea4f 0441 	mov.w	r4, r1, lsl #1
   dae66:	ea4f 0543 	mov.w	r5, r3, lsl #1
   dae6a:	ea94 0f05 	teq	r4, r5
   dae6e:	bf08      	it	eq
   dae70:	ea90 0f02 	teqeq	r0, r2
   dae74:	bf1f      	itttt	ne
   dae76:	ea54 0c00 	orrsne.w	ip, r4, r0
   dae7a:	ea55 0c02 	orrsne.w	ip, r5, r2
   dae7e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   dae82:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dae86:	f000 80e2 	beq.w	db04e <__adddf3+0x1ee>
   dae8a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   dae8e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   dae92:	bfb8      	it	lt
   dae94:	426d      	neglt	r5, r5
   dae96:	dd0c      	ble.n	daeb2 <__adddf3+0x52>
   dae98:	442c      	add	r4, r5
   dae9a:	ea80 0202 	eor.w	r2, r0, r2
   dae9e:	ea81 0303 	eor.w	r3, r1, r3
   daea2:	ea82 0000 	eor.w	r0, r2, r0
   daea6:	ea83 0101 	eor.w	r1, r3, r1
   daeaa:	ea80 0202 	eor.w	r2, r0, r2
   daeae:	ea81 0303 	eor.w	r3, r1, r3
   daeb2:	2d36      	cmp	r5, #54	; 0x36
   daeb4:	bf88      	it	hi
   daeb6:	bd30      	pophi	{r4, r5, pc}
   daeb8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   daebc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   daec0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   daec4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   daec8:	d002      	beq.n	daed0 <__adddf3+0x70>
   daeca:	4240      	negs	r0, r0
   daecc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   daed0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   daed4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   daed8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   daedc:	d002      	beq.n	daee4 <__adddf3+0x84>
   daede:	4252      	negs	r2, r2
   daee0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   daee4:	ea94 0f05 	teq	r4, r5
   daee8:	f000 80a7 	beq.w	db03a <__adddf3+0x1da>
   daeec:	f1a4 0401 	sub.w	r4, r4, #1
   daef0:	f1d5 0e20 	rsbs	lr, r5, #32
   daef4:	db0d      	blt.n	daf12 <__adddf3+0xb2>
   daef6:	fa02 fc0e 	lsl.w	ip, r2, lr
   daefa:	fa22 f205 	lsr.w	r2, r2, r5
   daefe:	1880      	adds	r0, r0, r2
   daf00:	f141 0100 	adc.w	r1, r1, #0
   daf04:	fa03 f20e 	lsl.w	r2, r3, lr
   daf08:	1880      	adds	r0, r0, r2
   daf0a:	fa43 f305 	asr.w	r3, r3, r5
   daf0e:	4159      	adcs	r1, r3
   daf10:	e00e      	b.n	daf30 <__adddf3+0xd0>
   daf12:	f1a5 0520 	sub.w	r5, r5, #32
   daf16:	f10e 0e20 	add.w	lr, lr, #32
   daf1a:	2a01      	cmp	r2, #1
   daf1c:	fa03 fc0e 	lsl.w	ip, r3, lr
   daf20:	bf28      	it	cs
   daf22:	f04c 0c02 	orrcs.w	ip, ip, #2
   daf26:	fa43 f305 	asr.w	r3, r3, r5
   daf2a:	18c0      	adds	r0, r0, r3
   daf2c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   daf30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   daf34:	d507      	bpl.n	daf46 <__adddf3+0xe6>
   daf36:	f04f 0e00 	mov.w	lr, #0
   daf3a:	f1dc 0c00 	rsbs	ip, ip, #0
   daf3e:	eb7e 0000 	sbcs.w	r0, lr, r0
   daf42:	eb6e 0101 	sbc.w	r1, lr, r1
   daf46:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   daf4a:	d31b      	bcc.n	daf84 <__adddf3+0x124>
   daf4c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   daf50:	d30c      	bcc.n	daf6c <__adddf3+0x10c>
   daf52:	0849      	lsrs	r1, r1, #1
   daf54:	ea5f 0030 	movs.w	r0, r0, rrx
   daf58:	ea4f 0c3c 	mov.w	ip, ip, rrx
   daf5c:	f104 0401 	add.w	r4, r4, #1
   daf60:	ea4f 5244 	mov.w	r2, r4, lsl #21
   daf64:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   daf68:	f080 809a 	bcs.w	db0a0 <__adddf3+0x240>
   daf6c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   daf70:	bf08      	it	eq
   daf72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   daf76:	f150 0000 	adcs.w	r0, r0, #0
   daf7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   daf7e:	ea41 0105 	orr.w	r1, r1, r5
   daf82:	bd30      	pop	{r4, r5, pc}
   daf84:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   daf88:	4140      	adcs	r0, r0
   daf8a:	eb41 0101 	adc.w	r1, r1, r1
   daf8e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   daf92:	f1a4 0401 	sub.w	r4, r4, #1
   daf96:	d1e9      	bne.n	daf6c <__adddf3+0x10c>
   daf98:	f091 0f00 	teq	r1, #0
   daf9c:	bf04      	itt	eq
   daf9e:	4601      	moveq	r1, r0
   dafa0:	2000      	moveq	r0, #0
   dafa2:	fab1 f381 	clz	r3, r1
   dafa6:	bf08      	it	eq
   dafa8:	3320      	addeq	r3, #32
   dafaa:	f1a3 030b 	sub.w	r3, r3, #11
   dafae:	f1b3 0220 	subs.w	r2, r3, #32
   dafb2:	da0c      	bge.n	dafce <__adddf3+0x16e>
   dafb4:	320c      	adds	r2, #12
   dafb6:	dd08      	ble.n	dafca <__adddf3+0x16a>
   dafb8:	f102 0c14 	add.w	ip, r2, #20
   dafbc:	f1c2 020c 	rsb	r2, r2, #12
   dafc0:	fa01 f00c 	lsl.w	r0, r1, ip
   dafc4:	fa21 f102 	lsr.w	r1, r1, r2
   dafc8:	e00c      	b.n	dafe4 <__adddf3+0x184>
   dafca:	f102 0214 	add.w	r2, r2, #20
   dafce:	bfd8      	it	le
   dafd0:	f1c2 0c20 	rsble	ip, r2, #32
   dafd4:	fa01 f102 	lsl.w	r1, r1, r2
   dafd8:	fa20 fc0c 	lsr.w	ip, r0, ip
   dafdc:	bfdc      	itt	le
   dafde:	ea41 010c 	orrle.w	r1, r1, ip
   dafe2:	4090      	lslle	r0, r2
   dafe4:	1ae4      	subs	r4, r4, r3
   dafe6:	bfa2      	ittt	ge
   dafe8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   dafec:	4329      	orrge	r1, r5
   dafee:	bd30      	popge	{r4, r5, pc}
   daff0:	ea6f 0404 	mvn.w	r4, r4
   daff4:	3c1f      	subs	r4, #31
   daff6:	da1c      	bge.n	db032 <__adddf3+0x1d2>
   daff8:	340c      	adds	r4, #12
   daffa:	dc0e      	bgt.n	db01a <__adddf3+0x1ba>
   daffc:	f104 0414 	add.w	r4, r4, #20
   db000:	f1c4 0220 	rsb	r2, r4, #32
   db004:	fa20 f004 	lsr.w	r0, r0, r4
   db008:	fa01 f302 	lsl.w	r3, r1, r2
   db00c:	ea40 0003 	orr.w	r0, r0, r3
   db010:	fa21 f304 	lsr.w	r3, r1, r4
   db014:	ea45 0103 	orr.w	r1, r5, r3
   db018:	bd30      	pop	{r4, r5, pc}
   db01a:	f1c4 040c 	rsb	r4, r4, #12
   db01e:	f1c4 0220 	rsb	r2, r4, #32
   db022:	fa20 f002 	lsr.w	r0, r0, r2
   db026:	fa01 f304 	lsl.w	r3, r1, r4
   db02a:	ea40 0003 	orr.w	r0, r0, r3
   db02e:	4629      	mov	r1, r5
   db030:	bd30      	pop	{r4, r5, pc}
   db032:	fa21 f004 	lsr.w	r0, r1, r4
   db036:	4629      	mov	r1, r5
   db038:	bd30      	pop	{r4, r5, pc}
   db03a:	f094 0f00 	teq	r4, #0
   db03e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   db042:	bf06      	itte	eq
   db044:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   db048:	3401      	addeq	r4, #1
   db04a:	3d01      	subne	r5, #1
   db04c:	e74e      	b.n	daeec <__adddf3+0x8c>
   db04e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   db052:	bf18      	it	ne
   db054:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   db058:	d029      	beq.n	db0ae <__adddf3+0x24e>
   db05a:	ea94 0f05 	teq	r4, r5
   db05e:	bf08      	it	eq
   db060:	ea90 0f02 	teqeq	r0, r2
   db064:	d005      	beq.n	db072 <__adddf3+0x212>
   db066:	ea54 0c00 	orrs.w	ip, r4, r0
   db06a:	bf04      	itt	eq
   db06c:	4619      	moveq	r1, r3
   db06e:	4610      	moveq	r0, r2
   db070:	bd30      	pop	{r4, r5, pc}
   db072:	ea91 0f03 	teq	r1, r3
   db076:	bf1e      	ittt	ne
   db078:	2100      	movne	r1, #0
   db07a:	2000      	movne	r0, #0
   db07c:	bd30      	popne	{r4, r5, pc}
   db07e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   db082:	d105      	bne.n	db090 <__adddf3+0x230>
   db084:	0040      	lsls	r0, r0, #1
   db086:	4149      	adcs	r1, r1
   db088:	bf28      	it	cs
   db08a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   db08e:	bd30      	pop	{r4, r5, pc}
   db090:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   db094:	bf3c      	itt	cc
   db096:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   db09a:	bd30      	popcc	{r4, r5, pc}
   db09c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db0a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   db0a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   db0a8:	f04f 0000 	mov.w	r0, #0
   db0ac:	bd30      	pop	{r4, r5, pc}
   db0ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   db0b2:	bf1a      	itte	ne
   db0b4:	4619      	movne	r1, r3
   db0b6:	4610      	movne	r0, r2
   db0b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   db0bc:	bf1c      	itt	ne
   db0be:	460b      	movne	r3, r1
   db0c0:	4602      	movne	r2, r0
   db0c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   db0c6:	bf06      	itte	eq
   db0c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   db0cc:	ea91 0f03 	teqeq	r1, r3
   db0d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   db0d4:	bd30      	pop	{r4, r5, pc}
   db0d6:	bf00      	nop

000db0d8 <__aeabi_ui2d>:
   db0d8:	f090 0f00 	teq	r0, #0
   db0dc:	bf04      	itt	eq
   db0de:	2100      	moveq	r1, #0
   db0e0:	4770      	bxeq	lr
   db0e2:	b530      	push	{r4, r5, lr}
   db0e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db0e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db0ec:	f04f 0500 	mov.w	r5, #0
   db0f0:	f04f 0100 	mov.w	r1, #0
   db0f4:	e750      	b.n	daf98 <__adddf3+0x138>
   db0f6:	bf00      	nop

000db0f8 <__aeabi_i2d>:
   db0f8:	f090 0f00 	teq	r0, #0
   db0fc:	bf04      	itt	eq
   db0fe:	2100      	moveq	r1, #0
   db100:	4770      	bxeq	lr
   db102:	b530      	push	{r4, r5, lr}
   db104:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db108:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db10c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   db110:	bf48      	it	mi
   db112:	4240      	negmi	r0, r0
   db114:	f04f 0100 	mov.w	r1, #0
   db118:	e73e      	b.n	daf98 <__adddf3+0x138>
   db11a:	bf00      	nop

000db11c <__aeabi_f2d>:
   db11c:	0042      	lsls	r2, r0, #1
   db11e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   db122:	ea4f 0131 	mov.w	r1, r1, rrx
   db126:	ea4f 7002 	mov.w	r0, r2, lsl #28
   db12a:	bf1f      	itttt	ne
   db12c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   db130:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   db134:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   db138:	4770      	bxne	lr
   db13a:	f092 0f00 	teq	r2, #0
   db13e:	bf14      	ite	ne
   db140:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   db144:	4770      	bxeq	lr
   db146:	b530      	push	{r4, r5, lr}
   db148:	f44f 7460 	mov.w	r4, #896	; 0x380
   db14c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db150:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   db154:	e720      	b.n	daf98 <__adddf3+0x138>
   db156:	bf00      	nop

000db158 <__aeabi_ul2d>:
   db158:	ea50 0201 	orrs.w	r2, r0, r1
   db15c:	bf08      	it	eq
   db15e:	4770      	bxeq	lr
   db160:	b530      	push	{r4, r5, lr}
   db162:	f04f 0500 	mov.w	r5, #0
   db166:	e00a      	b.n	db17e <__aeabi_l2d+0x16>

000db168 <__aeabi_l2d>:
   db168:	ea50 0201 	orrs.w	r2, r0, r1
   db16c:	bf08      	it	eq
   db16e:	4770      	bxeq	lr
   db170:	b530      	push	{r4, r5, lr}
   db172:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   db176:	d502      	bpl.n	db17e <__aeabi_l2d+0x16>
   db178:	4240      	negs	r0, r0
   db17a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db17e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db182:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db186:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   db18a:	f43f aedc 	beq.w	daf46 <__adddf3+0xe6>
   db18e:	f04f 0203 	mov.w	r2, #3
   db192:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   db196:	bf18      	it	ne
   db198:	3203      	addne	r2, #3
   db19a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   db19e:	bf18      	it	ne
   db1a0:	3203      	addne	r2, #3
   db1a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   db1a6:	f1c2 0320 	rsb	r3, r2, #32
   db1aa:	fa00 fc03 	lsl.w	ip, r0, r3
   db1ae:	fa20 f002 	lsr.w	r0, r0, r2
   db1b2:	fa01 fe03 	lsl.w	lr, r1, r3
   db1b6:	ea40 000e 	orr.w	r0, r0, lr
   db1ba:	fa21 f102 	lsr.w	r1, r1, r2
   db1be:	4414      	add	r4, r2
   db1c0:	e6c1      	b.n	daf46 <__adddf3+0xe6>
   db1c2:	bf00      	nop

000db1c4 <__aeabi_dmul>:
   db1c4:	b570      	push	{r4, r5, r6, lr}
   db1c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   db1ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   db1ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   db1d2:	bf1d      	ittte	ne
   db1d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   db1d8:	ea94 0f0c 	teqne	r4, ip
   db1dc:	ea95 0f0c 	teqne	r5, ip
   db1e0:	f000 f8de 	bleq	db3a0 <__aeabi_dmul+0x1dc>
   db1e4:	442c      	add	r4, r5
   db1e6:	ea81 0603 	eor.w	r6, r1, r3
   db1ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   db1ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   db1f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   db1f6:	bf18      	it	ne
   db1f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   db1fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db200:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   db204:	d038      	beq.n	db278 <__aeabi_dmul+0xb4>
   db206:	fba0 ce02 	umull	ip, lr, r0, r2
   db20a:	f04f 0500 	mov.w	r5, #0
   db20e:	fbe1 e502 	umlal	lr, r5, r1, r2
   db212:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   db216:	fbe0 e503 	umlal	lr, r5, r0, r3
   db21a:	f04f 0600 	mov.w	r6, #0
   db21e:	fbe1 5603 	umlal	r5, r6, r1, r3
   db222:	f09c 0f00 	teq	ip, #0
   db226:	bf18      	it	ne
   db228:	f04e 0e01 	orrne.w	lr, lr, #1
   db22c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   db230:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   db234:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   db238:	d204      	bcs.n	db244 <__aeabi_dmul+0x80>
   db23a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   db23e:	416d      	adcs	r5, r5
   db240:	eb46 0606 	adc.w	r6, r6, r6
   db244:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   db248:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   db24c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   db250:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   db254:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   db258:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   db25c:	bf88      	it	hi
   db25e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   db262:	d81e      	bhi.n	db2a2 <__aeabi_dmul+0xde>
   db264:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   db268:	bf08      	it	eq
   db26a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   db26e:	f150 0000 	adcs.w	r0, r0, #0
   db272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db276:	bd70      	pop	{r4, r5, r6, pc}
   db278:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   db27c:	ea46 0101 	orr.w	r1, r6, r1
   db280:	ea40 0002 	orr.w	r0, r0, r2
   db284:	ea81 0103 	eor.w	r1, r1, r3
   db288:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   db28c:	bfc2      	ittt	gt
   db28e:	ebd4 050c 	rsbsgt	r5, r4, ip
   db292:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   db296:	bd70      	popgt	{r4, r5, r6, pc}
   db298:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db29c:	f04f 0e00 	mov.w	lr, #0
   db2a0:	3c01      	subs	r4, #1
   db2a2:	f300 80ab 	bgt.w	db3fc <__aeabi_dmul+0x238>
   db2a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   db2aa:	bfde      	ittt	le
   db2ac:	2000      	movle	r0, #0
   db2ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   db2b2:	bd70      	pople	{r4, r5, r6, pc}
   db2b4:	f1c4 0400 	rsb	r4, r4, #0
   db2b8:	3c20      	subs	r4, #32
   db2ba:	da35      	bge.n	db328 <__aeabi_dmul+0x164>
   db2bc:	340c      	adds	r4, #12
   db2be:	dc1b      	bgt.n	db2f8 <__aeabi_dmul+0x134>
   db2c0:	f104 0414 	add.w	r4, r4, #20
   db2c4:	f1c4 0520 	rsb	r5, r4, #32
   db2c8:	fa00 f305 	lsl.w	r3, r0, r5
   db2cc:	fa20 f004 	lsr.w	r0, r0, r4
   db2d0:	fa01 f205 	lsl.w	r2, r1, r5
   db2d4:	ea40 0002 	orr.w	r0, r0, r2
   db2d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   db2dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   db2e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   db2e4:	fa21 f604 	lsr.w	r6, r1, r4
   db2e8:	eb42 0106 	adc.w	r1, r2, r6
   db2ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   db2f0:	bf08      	it	eq
   db2f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   db2f6:	bd70      	pop	{r4, r5, r6, pc}
   db2f8:	f1c4 040c 	rsb	r4, r4, #12
   db2fc:	f1c4 0520 	rsb	r5, r4, #32
   db300:	fa00 f304 	lsl.w	r3, r0, r4
   db304:	fa20 f005 	lsr.w	r0, r0, r5
   db308:	fa01 f204 	lsl.w	r2, r1, r4
   db30c:	ea40 0002 	orr.w	r0, r0, r2
   db310:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db314:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   db318:	f141 0100 	adc.w	r1, r1, #0
   db31c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   db320:	bf08      	it	eq
   db322:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   db326:	bd70      	pop	{r4, r5, r6, pc}
   db328:	f1c4 0520 	rsb	r5, r4, #32
   db32c:	fa00 f205 	lsl.w	r2, r0, r5
   db330:	ea4e 0e02 	orr.w	lr, lr, r2
   db334:	fa20 f304 	lsr.w	r3, r0, r4
   db338:	fa01 f205 	lsl.w	r2, r1, r5
   db33c:	ea43 0302 	orr.w	r3, r3, r2
   db340:	fa21 f004 	lsr.w	r0, r1, r4
   db344:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db348:	fa21 f204 	lsr.w	r2, r1, r4
   db34c:	ea20 0002 	bic.w	r0, r0, r2
   db350:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   db354:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   db358:	bf08      	it	eq
   db35a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   db35e:	bd70      	pop	{r4, r5, r6, pc}
   db360:	f094 0f00 	teq	r4, #0
   db364:	d10f      	bne.n	db386 <__aeabi_dmul+0x1c2>
   db366:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   db36a:	0040      	lsls	r0, r0, #1
   db36c:	eb41 0101 	adc.w	r1, r1, r1
   db370:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db374:	bf08      	it	eq
   db376:	3c01      	subeq	r4, #1
   db378:	d0f7      	beq.n	db36a <__aeabi_dmul+0x1a6>
   db37a:	ea41 0106 	orr.w	r1, r1, r6
   db37e:	f095 0f00 	teq	r5, #0
   db382:	bf18      	it	ne
   db384:	4770      	bxne	lr
   db386:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   db38a:	0052      	lsls	r2, r2, #1
   db38c:	eb43 0303 	adc.w	r3, r3, r3
   db390:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   db394:	bf08      	it	eq
   db396:	3d01      	subeq	r5, #1
   db398:	d0f7      	beq.n	db38a <__aeabi_dmul+0x1c6>
   db39a:	ea43 0306 	orr.w	r3, r3, r6
   db39e:	4770      	bx	lr
   db3a0:	ea94 0f0c 	teq	r4, ip
   db3a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   db3a8:	bf18      	it	ne
   db3aa:	ea95 0f0c 	teqne	r5, ip
   db3ae:	d00c      	beq.n	db3ca <__aeabi_dmul+0x206>
   db3b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db3b4:	bf18      	it	ne
   db3b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db3ba:	d1d1      	bne.n	db360 <__aeabi_dmul+0x19c>
   db3bc:	ea81 0103 	eor.w	r1, r1, r3
   db3c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db3c4:	f04f 0000 	mov.w	r0, #0
   db3c8:	bd70      	pop	{r4, r5, r6, pc}
   db3ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db3ce:	bf06      	itte	eq
   db3d0:	4610      	moveq	r0, r2
   db3d2:	4619      	moveq	r1, r3
   db3d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db3d8:	d019      	beq.n	db40e <__aeabi_dmul+0x24a>
   db3da:	ea94 0f0c 	teq	r4, ip
   db3de:	d102      	bne.n	db3e6 <__aeabi_dmul+0x222>
   db3e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   db3e4:	d113      	bne.n	db40e <__aeabi_dmul+0x24a>
   db3e6:	ea95 0f0c 	teq	r5, ip
   db3ea:	d105      	bne.n	db3f8 <__aeabi_dmul+0x234>
   db3ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   db3f0:	bf1c      	itt	ne
   db3f2:	4610      	movne	r0, r2
   db3f4:	4619      	movne	r1, r3
   db3f6:	d10a      	bne.n	db40e <__aeabi_dmul+0x24a>
   db3f8:	ea81 0103 	eor.w	r1, r1, r3
   db3fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db400:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   db404:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   db408:	f04f 0000 	mov.w	r0, #0
   db40c:	bd70      	pop	{r4, r5, r6, pc}
   db40e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   db412:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   db416:	bd70      	pop	{r4, r5, r6, pc}

000db418 <__aeabi_ddiv>:
   db418:	b570      	push	{r4, r5, r6, lr}
   db41a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   db41e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   db422:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   db426:	bf1d      	ittte	ne
   db428:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   db42c:	ea94 0f0c 	teqne	r4, ip
   db430:	ea95 0f0c 	teqne	r5, ip
   db434:	f000 f8a7 	bleq	db586 <__aeabi_ddiv+0x16e>
   db438:	eba4 0405 	sub.w	r4, r4, r5
   db43c:	ea81 0e03 	eor.w	lr, r1, r3
   db440:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   db444:	ea4f 3101 	mov.w	r1, r1, lsl #12
   db448:	f000 8088 	beq.w	db55c <__aeabi_ddiv+0x144>
   db44c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   db450:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   db454:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   db458:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   db45c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   db460:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   db464:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   db468:	ea4f 2600 	mov.w	r6, r0, lsl #8
   db46c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   db470:	429d      	cmp	r5, r3
   db472:	bf08      	it	eq
   db474:	4296      	cmpeq	r6, r2
   db476:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   db47a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   db47e:	d202      	bcs.n	db486 <__aeabi_ddiv+0x6e>
   db480:	085b      	lsrs	r3, r3, #1
   db482:	ea4f 0232 	mov.w	r2, r2, rrx
   db486:	1ab6      	subs	r6, r6, r2
   db488:	eb65 0503 	sbc.w	r5, r5, r3
   db48c:	085b      	lsrs	r3, r3, #1
   db48e:	ea4f 0232 	mov.w	r2, r2, rrx
   db492:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   db496:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   db49a:	ebb6 0e02 	subs.w	lr, r6, r2
   db49e:	eb75 0e03 	sbcs.w	lr, r5, r3
   db4a2:	bf22      	ittt	cs
   db4a4:	1ab6      	subcs	r6, r6, r2
   db4a6:	4675      	movcs	r5, lr
   db4a8:	ea40 000c 	orrcs.w	r0, r0, ip
   db4ac:	085b      	lsrs	r3, r3, #1
   db4ae:	ea4f 0232 	mov.w	r2, r2, rrx
   db4b2:	ebb6 0e02 	subs.w	lr, r6, r2
   db4b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   db4ba:	bf22      	ittt	cs
   db4bc:	1ab6      	subcs	r6, r6, r2
   db4be:	4675      	movcs	r5, lr
   db4c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   db4c4:	085b      	lsrs	r3, r3, #1
   db4c6:	ea4f 0232 	mov.w	r2, r2, rrx
   db4ca:	ebb6 0e02 	subs.w	lr, r6, r2
   db4ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   db4d2:	bf22      	ittt	cs
   db4d4:	1ab6      	subcs	r6, r6, r2
   db4d6:	4675      	movcs	r5, lr
   db4d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   db4dc:	085b      	lsrs	r3, r3, #1
   db4de:	ea4f 0232 	mov.w	r2, r2, rrx
   db4e2:	ebb6 0e02 	subs.w	lr, r6, r2
   db4e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   db4ea:	bf22      	ittt	cs
   db4ec:	1ab6      	subcs	r6, r6, r2
   db4ee:	4675      	movcs	r5, lr
   db4f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   db4f4:	ea55 0e06 	orrs.w	lr, r5, r6
   db4f8:	d018      	beq.n	db52c <__aeabi_ddiv+0x114>
   db4fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
   db4fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   db502:	ea4f 1606 	mov.w	r6, r6, lsl #4
   db506:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   db50a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   db50e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   db512:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   db516:	d1c0      	bne.n	db49a <__aeabi_ddiv+0x82>
   db518:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db51c:	d10b      	bne.n	db536 <__aeabi_ddiv+0x11e>
   db51e:	ea41 0100 	orr.w	r1, r1, r0
   db522:	f04f 0000 	mov.w	r0, #0
   db526:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   db52a:	e7b6      	b.n	db49a <__aeabi_ddiv+0x82>
   db52c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db530:	bf04      	itt	eq
   db532:	4301      	orreq	r1, r0
   db534:	2000      	moveq	r0, #0
   db536:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   db53a:	bf88      	it	hi
   db53c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   db540:	f63f aeaf 	bhi.w	db2a2 <__aeabi_dmul+0xde>
   db544:	ebb5 0c03 	subs.w	ip, r5, r3
   db548:	bf04      	itt	eq
   db54a:	ebb6 0c02 	subseq.w	ip, r6, r2
   db54e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   db552:	f150 0000 	adcs.w	r0, r0, #0
   db556:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db55a:	bd70      	pop	{r4, r5, r6, pc}
   db55c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   db560:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   db564:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   db568:	bfc2      	ittt	gt
   db56a:	ebd4 050c 	rsbsgt	r5, r4, ip
   db56e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   db572:	bd70      	popgt	{r4, r5, r6, pc}
   db574:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db578:	f04f 0e00 	mov.w	lr, #0
   db57c:	3c01      	subs	r4, #1
   db57e:	e690      	b.n	db2a2 <__aeabi_dmul+0xde>
   db580:	ea45 0e06 	orr.w	lr, r5, r6
   db584:	e68d      	b.n	db2a2 <__aeabi_dmul+0xde>
   db586:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   db58a:	ea94 0f0c 	teq	r4, ip
   db58e:	bf08      	it	eq
   db590:	ea95 0f0c 	teqeq	r5, ip
   db594:	f43f af3b 	beq.w	db40e <__aeabi_dmul+0x24a>
   db598:	ea94 0f0c 	teq	r4, ip
   db59c:	d10a      	bne.n	db5b4 <__aeabi_ddiv+0x19c>
   db59e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   db5a2:	f47f af34 	bne.w	db40e <__aeabi_dmul+0x24a>
   db5a6:	ea95 0f0c 	teq	r5, ip
   db5aa:	f47f af25 	bne.w	db3f8 <__aeabi_dmul+0x234>
   db5ae:	4610      	mov	r0, r2
   db5b0:	4619      	mov	r1, r3
   db5b2:	e72c      	b.n	db40e <__aeabi_dmul+0x24a>
   db5b4:	ea95 0f0c 	teq	r5, ip
   db5b8:	d106      	bne.n	db5c8 <__aeabi_ddiv+0x1b0>
   db5ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   db5be:	f43f aefd 	beq.w	db3bc <__aeabi_dmul+0x1f8>
   db5c2:	4610      	mov	r0, r2
   db5c4:	4619      	mov	r1, r3
   db5c6:	e722      	b.n	db40e <__aeabi_dmul+0x24a>
   db5c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db5cc:	bf18      	it	ne
   db5ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db5d2:	f47f aec5 	bne.w	db360 <__aeabi_dmul+0x19c>
   db5d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   db5da:	f47f af0d 	bne.w	db3f8 <__aeabi_dmul+0x234>
   db5de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   db5e2:	f47f aeeb 	bne.w	db3bc <__aeabi_dmul+0x1f8>
   db5e6:	e712      	b.n	db40e <__aeabi_dmul+0x24a>

000db5e8 <__gedf2>:
   db5e8:	f04f 3cff 	mov.w	ip, #4294967295
   db5ec:	e006      	b.n	db5fc <__cmpdf2+0x4>
   db5ee:	bf00      	nop

000db5f0 <__ledf2>:
   db5f0:	f04f 0c01 	mov.w	ip, #1
   db5f4:	e002      	b.n	db5fc <__cmpdf2+0x4>
   db5f6:	bf00      	nop

000db5f8 <__cmpdf2>:
   db5f8:	f04f 0c01 	mov.w	ip, #1
   db5fc:	f84d cd04 	str.w	ip, [sp, #-4]!
   db600:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   db604:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db608:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   db60c:	bf18      	it	ne
   db60e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   db612:	d01b      	beq.n	db64c <__cmpdf2+0x54>
   db614:	b001      	add	sp, #4
   db616:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   db61a:	bf0c      	ite	eq
   db61c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   db620:	ea91 0f03 	teqne	r1, r3
   db624:	bf02      	ittt	eq
   db626:	ea90 0f02 	teqeq	r0, r2
   db62a:	2000      	moveq	r0, #0
   db62c:	4770      	bxeq	lr
   db62e:	f110 0f00 	cmn.w	r0, #0
   db632:	ea91 0f03 	teq	r1, r3
   db636:	bf58      	it	pl
   db638:	4299      	cmppl	r1, r3
   db63a:	bf08      	it	eq
   db63c:	4290      	cmpeq	r0, r2
   db63e:	bf2c      	ite	cs
   db640:	17d8      	asrcs	r0, r3, #31
   db642:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   db646:	f040 0001 	orr.w	r0, r0, #1
   db64a:	4770      	bx	lr
   db64c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   db650:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db654:	d102      	bne.n	db65c <__cmpdf2+0x64>
   db656:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   db65a:	d107      	bne.n	db66c <__cmpdf2+0x74>
   db65c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   db660:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db664:	d1d6      	bne.n	db614 <__cmpdf2+0x1c>
   db666:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   db66a:	d0d3      	beq.n	db614 <__cmpdf2+0x1c>
   db66c:	f85d 0b04 	ldr.w	r0, [sp], #4
   db670:	4770      	bx	lr
   db672:	bf00      	nop

000db674 <__aeabi_cdrcmple>:
   db674:	4684      	mov	ip, r0
   db676:	4610      	mov	r0, r2
   db678:	4662      	mov	r2, ip
   db67a:	468c      	mov	ip, r1
   db67c:	4619      	mov	r1, r3
   db67e:	4663      	mov	r3, ip
   db680:	e000      	b.n	db684 <__aeabi_cdcmpeq>
   db682:	bf00      	nop

000db684 <__aeabi_cdcmpeq>:
   db684:	b501      	push	{r0, lr}
   db686:	f7ff ffb7 	bl	db5f8 <__cmpdf2>
   db68a:	2800      	cmp	r0, #0
   db68c:	bf48      	it	mi
   db68e:	f110 0f00 	cmnmi.w	r0, #0
   db692:	bd01      	pop	{r0, pc}

000db694 <__aeabi_dcmpeq>:
   db694:	f84d ed08 	str.w	lr, [sp, #-8]!
   db698:	f7ff fff4 	bl	db684 <__aeabi_cdcmpeq>
   db69c:	bf0c      	ite	eq
   db69e:	2001      	moveq	r0, #1
   db6a0:	2000      	movne	r0, #0
   db6a2:	f85d fb08 	ldr.w	pc, [sp], #8
   db6a6:	bf00      	nop

000db6a8 <__aeabi_dcmplt>:
   db6a8:	f84d ed08 	str.w	lr, [sp, #-8]!
   db6ac:	f7ff ffea 	bl	db684 <__aeabi_cdcmpeq>
   db6b0:	bf34      	ite	cc
   db6b2:	2001      	movcc	r0, #1
   db6b4:	2000      	movcs	r0, #0
   db6b6:	f85d fb08 	ldr.w	pc, [sp], #8
   db6ba:	bf00      	nop

000db6bc <__aeabi_dcmple>:
   db6bc:	f84d ed08 	str.w	lr, [sp, #-8]!
   db6c0:	f7ff ffe0 	bl	db684 <__aeabi_cdcmpeq>
   db6c4:	bf94      	ite	ls
   db6c6:	2001      	movls	r0, #1
   db6c8:	2000      	movhi	r0, #0
   db6ca:	f85d fb08 	ldr.w	pc, [sp], #8
   db6ce:	bf00      	nop

000db6d0 <__aeabi_dcmpge>:
   db6d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   db6d4:	f7ff ffce 	bl	db674 <__aeabi_cdrcmple>
   db6d8:	bf94      	ite	ls
   db6da:	2001      	movls	r0, #1
   db6dc:	2000      	movhi	r0, #0
   db6de:	f85d fb08 	ldr.w	pc, [sp], #8
   db6e2:	bf00      	nop

000db6e4 <__aeabi_dcmpgt>:
   db6e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   db6e8:	f7ff ffc4 	bl	db674 <__aeabi_cdrcmple>
   db6ec:	bf34      	ite	cc
   db6ee:	2001      	movcc	r0, #1
   db6f0:	2000      	movcs	r0, #0
   db6f2:	f85d fb08 	ldr.w	pc, [sp], #8
   db6f6:	bf00      	nop

000db6f8 <__aeabi_dcmpun>:
   db6f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   db6fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db700:	d102      	bne.n	db708 <__aeabi_dcmpun+0x10>
   db702:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   db706:	d10a      	bne.n	db71e <__aeabi_dcmpun+0x26>
   db708:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   db70c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db710:	d102      	bne.n	db718 <__aeabi_dcmpun+0x20>
   db712:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   db716:	d102      	bne.n	db71e <__aeabi_dcmpun+0x26>
   db718:	f04f 0000 	mov.w	r0, #0
   db71c:	4770      	bx	lr
   db71e:	f04f 0001 	mov.w	r0, #1
   db722:	4770      	bx	lr

000db724 <__aeabi_d2iz>:
   db724:	ea4f 0241 	mov.w	r2, r1, lsl #1
   db728:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   db72c:	d215      	bcs.n	db75a <__aeabi_d2iz+0x36>
   db72e:	d511      	bpl.n	db754 <__aeabi_d2iz+0x30>
   db730:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   db734:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   db738:	d912      	bls.n	db760 <__aeabi_d2iz+0x3c>
   db73a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   db73e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   db742:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   db746:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   db74a:	fa23 f002 	lsr.w	r0, r3, r2
   db74e:	bf18      	it	ne
   db750:	4240      	negne	r0, r0
   db752:	4770      	bx	lr
   db754:	f04f 0000 	mov.w	r0, #0
   db758:	4770      	bx	lr
   db75a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   db75e:	d105      	bne.n	db76c <__aeabi_d2iz+0x48>
   db760:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   db764:	bf08      	it	eq
   db766:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   db76a:	4770      	bx	lr
   db76c:	f04f 0000 	mov.w	r0, #0
   db770:	4770      	bx	lr
   db772:	bf00      	nop

000db774 <__aeabi_d2uiz>:
   db774:	004a      	lsls	r2, r1, #1
   db776:	d211      	bcs.n	db79c <__aeabi_d2uiz+0x28>
   db778:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   db77c:	d211      	bcs.n	db7a2 <__aeabi_d2uiz+0x2e>
   db77e:	d50d      	bpl.n	db79c <__aeabi_d2uiz+0x28>
   db780:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   db784:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   db788:	d40e      	bmi.n	db7a8 <__aeabi_d2uiz+0x34>
   db78a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   db78e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   db792:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   db796:	fa23 f002 	lsr.w	r0, r3, r2
   db79a:	4770      	bx	lr
   db79c:	f04f 0000 	mov.w	r0, #0
   db7a0:	4770      	bx	lr
   db7a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   db7a6:	d102      	bne.n	db7ae <__aeabi_d2uiz+0x3a>
   db7a8:	f04f 30ff 	mov.w	r0, #4294967295
   db7ac:	4770      	bx	lr
   db7ae:	f04f 0000 	mov.w	r0, #0
   db7b2:	4770      	bx	lr

000db7b4 <__aeabi_d2f>:
   db7b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   db7b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   db7bc:	bf24      	itt	cs
   db7be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   db7c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   db7c6:	d90d      	bls.n	db7e4 <__aeabi_d2f+0x30>
   db7c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   db7cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   db7d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   db7d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   db7d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   db7dc:	bf08      	it	eq
   db7de:	f020 0001 	biceq.w	r0, r0, #1
   db7e2:	4770      	bx	lr
   db7e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   db7e8:	d121      	bne.n	db82e <__aeabi_d2f+0x7a>
   db7ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   db7ee:	bfbc      	itt	lt
   db7f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   db7f4:	4770      	bxlt	lr
   db7f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db7fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
   db7fe:	f1c2 0218 	rsb	r2, r2, #24
   db802:	f1c2 0c20 	rsb	ip, r2, #32
   db806:	fa10 f30c 	lsls.w	r3, r0, ip
   db80a:	fa20 f002 	lsr.w	r0, r0, r2
   db80e:	bf18      	it	ne
   db810:	f040 0001 	orrne.w	r0, r0, #1
   db814:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   db818:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   db81c:	fa03 fc0c 	lsl.w	ip, r3, ip
   db820:	ea40 000c 	orr.w	r0, r0, ip
   db824:	fa23 f302 	lsr.w	r3, r3, r2
   db828:	ea4f 0343 	mov.w	r3, r3, lsl #1
   db82c:	e7cc      	b.n	db7c8 <__aeabi_d2f+0x14>
   db82e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   db832:	d107      	bne.n	db844 <__aeabi_d2f+0x90>
   db834:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   db838:	bf1e      	ittt	ne
   db83a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   db83e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   db842:	4770      	bxne	lr
   db844:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   db848:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   db84c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   db850:	4770      	bx	lr
   db852:	bf00      	nop

000db854 <asctime>:
   db854:	4b09      	ldr	r3, [pc, #36]	; (db87c <asctime+0x28>)
   db856:	b570      	push	{r4, r5, r6, lr}
   db858:	681c      	ldr	r4, [r3, #0]
   db85a:	6c25      	ldr	r5, [r4, #64]	; 0x40
   db85c:	4606      	mov	r6, r0
   db85e:	b93d      	cbnz	r5, db870 <asctime+0x1c>
   db860:	201a      	movs	r0, #26
   db862:	f7fd fa81 	bl	d8d68 <malloc>
   db866:	221a      	movs	r2, #26
   db868:	6420      	str	r0, [r4, #64]	; 0x40
   db86a:	4629      	mov	r1, r5
   db86c:	f000 f94e 	bl	dbb0c <memset>
   db870:	6c21      	ldr	r1, [r4, #64]	; 0x40
   db872:	4630      	mov	r0, r6
   db874:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   db878:	f000 b802 	b.w	db880 <asctime_r>
   db87c:	2003d868 	.word	0x2003d868

000db880 <asctime_r>:
   db880:	b510      	push	{r4, lr}
   db882:	460c      	mov	r4, r1
   db884:	6941      	ldr	r1, [r0, #20]
   db886:	6903      	ldr	r3, [r0, #16]
   db888:	6982      	ldr	r2, [r0, #24]
   db88a:	b086      	sub	sp, #24
   db88c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   db890:	9104      	str	r1, [sp, #16]
   db892:	6801      	ldr	r1, [r0, #0]
   db894:	9103      	str	r1, [sp, #12]
   db896:	6841      	ldr	r1, [r0, #4]
   db898:	9102      	str	r1, [sp, #8]
   db89a:	6881      	ldr	r1, [r0, #8]
   db89c:	9101      	str	r1, [sp, #4]
   db89e:	68c1      	ldr	r1, [r0, #12]
   db8a0:	9100      	str	r1, [sp, #0]
   db8a2:	4907      	ldr	r1, [pc, #28]	; (db8c0 <asctime_r+0x40>)
   db8a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   db8a8:	440b      	add	r3, r1
   db8aa:	4906      	ldr	r1, [pc, #24]	; (db8c4 <asctime_r+0x44>)
   db8ac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   db8b0:	440a      	add	r2, r1
   db8b2:	4620      	mov	r0, r4
   db8b4:	4904      	ldr	r1, [pc, #16]	; (db8c8 <asctime_r+0x48>)
   db8b6:	f7fd fa77 	bl	d8da8 <siprintf>
   db8ba:	4620      	mov	r0, r4
   db8bc:	b006      	add	sp, #24
   db8be:	bd10      	pop	{r4, pc}
   db8c0:	000dd522 	.word	0x000dd522
   db8c4:	000dd50d 	.word	0x000dd50d
   db8c8:	000dd546 	.word	0x000dd546

000db8cc <__cxa_atexit>:
   db8cc:	b510      	push	{r4, lr}
   db8ce:	4c05      	ldr	r4, [pc, #20]	; (db8e4 <__cxa_atexit+0x18>)
   db8d0:	4613      	mov	r3, r2
   db8d2:	b12c      	cbz	r4, db8e0 <__cxa_atexit+0x14>
   db8d4:	460a      	mov	r2, r1
   db8d6:	4601      	mov	r1, r0
   db8d8:	2002      	movs	r0, #2
   db8da:	f3af 8000 	nop.w
   db8de:	bd10      	pop	{r4, pc}
   db8e0:	4620      	mov	r0, r4
   db8e2:	bd10      	pop	{r4, pc}
   db8e4:	00000000 	.word	0x00000000

000db8e8 <localtime>:
   db8e8:	b538      	push	{r3, r4, r5, lr}
   db8ea:	4b07      	ldr	r3, [pc, #28]	; (db908 <localtime+0x20>)
   db8ec:	681c      	ldr	r4, [r3, #0]
   db8ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   db8f0:	4605      	mov	r5, r0
   db8f2:	b91b      	cbnz	r3, db8fc <localtime+0x14>
   db8f4:	2024      	movs	r0, #36	; 0x24
   db8f6:	f7fd fa37 	bl	d8d68 <malloc>
   db8fa:	63e0      	str	r0, [r4, #60]	; 0x3c
   db8fc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   db8fe:	4628      	mov	r0, r5
   db900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db904:	f000 b802 	b.w	db90c <localtime_r>
   db908:	2003d868 	.word	0x2003d868

000db90c <localtime_r>:
   db90c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db910:	460c      	mov	r4, r1
   db912:	4680      	mov	r8, r0
   db914:	f001 f99e 	bl	dcc54 <__gettzinfo>
   db918:	4621      	mov	r1, r4
   db91a:	4607      	mov	r7, r0
   db91c:	4640      	mov	r0, r8
   db91e:	f001 f99d 	bl	dcc5c <gmtime_r>
   db922:	6946      	ldr	r6, [r0, #20]
   db924:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   db928:	07b3      	lsls	r3, r6, #30
   db92a:	4604      	mov	r4, r0
   db92c:	d105      	bne.n	db93a <localtime_r+0x2e>
   db92e:	2264      	movs	r2, #100	; 0x64
   db930:	fb96 f3f2 	sdiv	r3, r6, r2
   db934:	fb02 6313 	mls	r3, r2, r3, r6
   db938:	b94b      	cbnz	r3, db94e <localtime_r+0x42>
   db93a:	f44f 75c8 	mov.w	r5, #400	; 0x190
   db93e:	fb96 f3f5 	sdiv	r3, r6, r5
   db942:	fb05 6513 	mls	r5, r5, r3, r6
   db946:	fab5 f385 	clz	r3, r5
   db94a:	095b      	lsrs	r3, r3, #5
   db94c:	e000      	b.n	db950 <localtime_r+0x44>
   db94e:	2301      	movs	r3, #1
   db950:	4a5f      	ldr	r2, [pc, #380]	; (dbad0 <localtime_r+0x1c4>)
   db952:	2530      	movs	r5, #48	; 0x30
   db954:	fb05 2503 	mla	r5, r5, r3, r2
   db958:	f000 ffac 	bl	dc8b4 <__tz_lock>
   db95c:	f000 ffac 	bl	dc8b8 <_tzset_unlocked>
   db960:	4b5c      	ldr	r3, [pc, #368]	; (dbad4 <localtime_r+0x1c8>)
   db962:	681b      	ldr	r3, [r3, #0]
   db964:	b1f3      	cbz	r3, db9a4 <localtime_r+0x98>
   db966:	687b      	ldr	r3, [r7, #4]
   db968:	429e      	cmp	r6, r3
   db96a:	d105      	bne.n	db978 <localtime_r+0x6c>
   db96c:	6839      	ldr	r1, [r7, #0]
   db96e:	f8d8 3000 	ldr.w	r3, [r8]
   db972:	69fa      	ldr	r2, [r7, #28]
   db974:	b941      	cbnz	r1, db988 <localtime_r+0x7c>
   db976:	e00a      	b.n	db98e <localtime_r+0x82>
   db978:	4630      	mov	r0, r6
   db97a:	f000 fef3 	bl	dc764 <__tzcalc_limits>
   db97e:	2800      	cmp	r0, #0
   db980:	d1f4      	bne.n	db96c <localtime_r+0x60>
   db982:	f04f 33ff 	mov.w	r3, #4294967295
   db986:	e00d      	b.n	db9a4 <localtime_r+0x98>
   db988:	4293      	cmp	r3, r2
   db98a:	db08      	blt.n	db99e <localtime_r+0x92>
   db98c:	e001      	b.n	db992 <localtime_r+0x86>
   db98e:	4293      	cmp	r3, r2
   db990:	da07      	bge.n	db9a2 <localtime_r+0x96>
   db992:	6bba      	ldr	r2, [r7, #56]	; 0x38
   db994:	4293      	cmp	r3, r2
   db996:	bfac      	ite	ge
   db998:	2300      	movge	r3, #0
   db99a:	2301      	movlt	r3, #1
   db99c:	e002      	b.n	db9a4 <localtime_r+0x98>
   db99e:	2300      	movs	r3, #0
   db9a0:	e000      	b.n	db9a4 <localtime_r+0x98>
   db9a2:	2301      	movs	r3, #1
   db9a4:	6223      	str	r3, [r4, #32]
   db9a6:	6a23      	ldr	r3, [r4, #32]
   db9a8:	2b01      	cmp	r3, #1
   db9aa:	bf0c      	ite	eq
   db9ac:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   db9ae:	6a39      	ldrne	r1, [r7, #32]
   db9b0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   db9b4:	203c      	movs	r0, #60	; 0x3c
   db9b6:	fb91 f6f3 	sdiv	r6, r1, r3
   db9ba:	fb03 1316 	mls	r3, r3, r6, r1
   db9be:	6861      	ldr	r1, [r4, #4]
   db9c0:	fb93 f2f0 	sdiv	r2, r3, r0
   db9c4:	fb00 3012 	mls	r0, r0, r2, r3
   db9c8:	6823      	ldr	r3, [r4, #0]
   db9ca:	1a89      	subs	r1, r1, r2
   db9cc:	68a2      	ldr	r2, [r4, #8]
   db9ce:	6061      	str	r1, [r4, #4]
   db9d0:	1a1b      	subs	r3, r3, r0
   db9d2:	1b92      	subs	r2, r2, r6
   db9d4:	2b3b      	cmp	r3, #59	; 0x3b
   db9d6:	6023      	str	r3, [r4, #0]
   db9d8:	60a2      	str	r2, [r4, #8]
   db9da:	dd03      	ble.n	db9e4 <localtime_r+0xd8>
   db9dc:	3101      	adds	r1, #1
   db9de:	6061      	str	r1, [r4, #4]
   db9e0:	3b3c      	subs	r3, #60	; 0x3c
   db9e2:	e004      	b.n	db9ee <localtime_r+0xe2>
   db9e4:	2b00      	cmp	r3, #0
   db9e6:	da03      	bge.n	db9f0 <localtime_r+0xe4>
   db9e8:	3901      	subs	r1, #1
   db9ea:	6061      	str	r1, [r4, #4]
   db9ec:	333c      	adds	r3, #60	; 0x3c
   db9ee:	6023      	str	r3, [r4, #0]
   db9f0:	6863      	ldr	r3, [r4, #4]
   db9f2:	2b3b      	cmp	r3, #59	; 0x3b
   db9f4:	dd03      	ble.n	db9fe <localtime_r+0xf2>
   db9f6:	3201      	adds	r2, #1
   db9f8:	60a2      	str	r2, [r4, #8]
   db9fa:	3b3c      	subs	r3, #60	; 0x3c
   db9fc:	e004      	b.n	dba08 <localtime_r+0xfc>
   db9fe:	2b00      	cmp	r3, #0
   dba00:	da03      	bge.n	dba0a <localtime_r+0xfe>
   dba02:	3a01      	subs	r2, #1
   dba04:	60a2      	str	r2, [r4, #8]
   dba06:	333c      	adds	r3, #60	; 0x3c
   dba08:	6063      	str	r3, [r4, #4]
   dba0a:	68a3      	ldr	r3, [r4, #8]
   dba0c:	2b17      	cmp	r3, #23
   dba0e:	dd22      	ble.n	dba56 <localtime_r+0x14a>
   dba10:	69e2      	ldr	r2, [r4, #28]
   dba12:	3201      	adds	r2, #1
   dba14:	61e2      	str	r2, [r4, #28]
   dba16:	69a2      	ldr	r2, [r4, #24]
   dba18:	3201      	adds	r2, #1
   dba1a:	2a06      	cmp	r2, #6
   dba1c:	bfc8      	it	gt
   dba1e:	2200      	movgt	r2, #0
   dba20:	61a2      	str	r2, [r4, #24]
   dba22:	68e2      	ldr	r2, [r4, #12]
   dba24:	3b18      	subs	r3, #24
   dba26:	3201      	adds	r2, #1
   dba28:	60a3      	str	r3, [r4, #8]
   dba2a:	6923      	ldr	r3, [r4, #16]
   dba2c:	60e2      	str	r2, [r4, #12]
   dba2e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   dba32:	428a      	cmp	r2, r1
   dba34:	dd46      	ble.n	dbac4 <localtime_r+0x1b8>
   dba36:	3301      	adds	r3, #1
   dba38:	2b0c      	cmp	r3, #12
   dba3a:	bf0c      	ite	eq
   dba3c:	6963      	ldreq	r3, [r4, #20]
   dba3e:	6123      	strne	r3, [r4, #16]
   dba40:	eba2 0201 	sub.w	r2, r2, r1
   dba44:	60e2      	str	r2, [r4, #12]
   dba46:	bf01      	itttt	eq
   dba48:	3301      	addeq	r3, #1
   dba4a:	2200      	moveq	r2, #0
   dba4c:	6122      	streq	r2, [r4, #16]
   dba4e:	6163      	streq	r3, [r4, #20]
   dba50:	bf08      	it	eq
   dba52:	61e2      	streq	r2, [r4, #28]
   dba54:	e036      	b.n	dbac4 <localtime_r+0x1b8>
   dba56:	2b00      	cmp	r3, #0
   dba58:	da34      	bge.n	dbac4 <localtime_r+0x1b8>
   dba5a:	69e2      	ldr	r2, [r4, #28]
   dba5c:	3a01      	subs	r2, #1
   dba5e:	61e2      	str	r2, [r4, #28]
   dba60:	69a2      	ldr	r2, [r4, #24]
   dba62:	3a01      	subs	r2, #1
   dba64:	bf48      	it	mi
   dba66:	2206      	movmi	r2, #6
   dba68:	61a2      	str	r2, [r4, #24]
   dba6a:	68e2      	ldr	r2, [r4, #12]
   dba6c:	3318      	adds	r3, #24
   dba6e:	3a01      	subs	r2, #1
   dba70:	60e2      	str	r2, [r4, #12]
   dba72:	60a3      	str	r3, [r4, #8]
   dba74:	bb32      	cbnz	r2, dbac4 <localtime_r+0x1b8>
   dba76:	6923      	ldr	r3, [r4, #16]
   dba78:	3b01      	subs	r3, #1
   dba7a:	d401      	bmi.n	dba80 <localtime_r+0x174>
   dba7c:	6123      	str	r3, [r4, #16]
   dba7e:	e01d      	b.n	dbabc <localtime_r+0x1b0>
   dba80:	230b      	movs	r3, #11
   dba82:	6123      	str	r3, [r4, #16]
   dba84:	6963      	ldr	r3, [r4, #20]
   dba86:	1e5a      	subs	r2, r3, #1
   dba88:	f012 0f03 	tst.w	r2, #3
   dba8c:	6162      	str	r2, [r4, #20]
   dba8e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   dba92:	d105      	bne.n	dbaa0 <localtime_r+0x194>
   dba94:	2164      	movs	r1, #100	; 0x64
   dba96:	fb93 f2f1 	sdiv	r2, r3, r1
   dba9a:	fb01 3212 	mls	r2, r1, r2, r3
   dba9e:	b94a      	cbnz	r2, dbab4 <localtime_r+0x1a8>
   dbaa0:	f44f 71c8 	mov.w	r1, #400	; 0x190
   dbaa4:	fb93 f2f1 	sdiv	r2, r3, r1
   dbaa8:	fb01 3312 	mls	r3, r1, r2, r3
   dbaac:	fab3 f383 	clz	r3, r3
   dbab0:	095b      	lsrs	r3, r3, #5
   dbab2:	e000      	b.n	dbab6 <localtime_r+0x1aa>
   dbab4:	2301      	movs	r3, #1
   dbab6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   dbaba:	61e3      	str	r3, [r4, #28]
   dbabc:	6923      	ldr	r3, [r4, #16]
   dbabe:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   dbac2:	60e3      	str	r3, [r4, #12]
   dbac4:	f000 fef7 	bl	dc8b6 <__tz_unlock>
   dbac8:	4620      	mov	r0, r4
   dbaca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dbace:	bf00      	nop
   dbad0:	000dd6cc 	.word	0x000dd6cc
   dbad4:	2003e5c0 	.word	0x2003e5c0

000dbad8 <memcmp>:
   dbad8:	b510      	push	{r4, lr}
   dbada:	3901      	subs	r1, #1
   dbadc:	4402      	add	r2, r0
   dbade:	4290      	cmp	r0, r2
   dbae0:	d007      	beq.n	dbaf2 <memcmp+0x1a>
   dbae2:	f810 3b01 	ldrb.w	r3, [r0], #1
   dbae6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dbaea:	42a3      	cmp	r3, r4
   dbaec:	d0f7      	beq.n	dbade <memcmp+0x6>
   dbaee:	1b18      	subs	r0, r3, r4
   dbaf0:	bd10      	pop	{r4, pc}
   dbaf2:	2000      	movs	r0, #0
   dbaf4:	bd10      	pop	{r4, pc}

000dbaf6 <memcpy>:
   dbaf6:	b510      	push	{r4, lr}
   dbaf8:	1e43      	subs	r3, r0, #1
   dbafa:	440a      	add	r2, r1
   dbafc:	4291      	cmp	r1, r2
   dbafe:	d004      	beq.n	dbb0a <memcpy+0x14>
   dbb00:	f811 4b01 	ldrb.w	r4, [r1], #1
   dbb04:	f803 4f01 	strb.w	r4, [r3, #1]!
   dbb08:	e7f8      	b.n	dbafc <memcpy+0x6>
   dbb0a:	bd10      	pop	{r4, pc}

000dbb0c <memset>:
   dbb0c:	4402      	add	r2, r0
   dbb0e:	4603      	mov	r3, r0
   dbb10:	4293      	cmp	r3, r2
   dbb12:	d002      	beq.n	dbb1a <memset+0xe>
   dbb14:	f803 1b01 	strb.w	r1, [r3], #1
   dbb18:	e7fa      	b.n	dbb10 <memset+0x4>
   dbb1a:	4770      	bx	lr

000dbb1c <srand>:
   dbb1c:	b538      	push	{r3, r4, r5, lr}
   dbb1e:	4b12      	ldr	r3, [pc, #72]	; (dbb68 <srand+0x4c>)
   dbb20:	681c      	ldr	r4, [r3, #0]
   dbb22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dbb24:	4605      	mov	r5, r0
   dbb26:	b9d3      	cbnz	r3, dbb5e <srand+0x42>
   dbb28:	2018      	movs	r0, #24
   dbb2a:	f7fd f91d 	bl	d8d68 <malloc>
   dbb2e:	f243 330e 	movw	r3, #13070	; 0x330e
   dbb32:	63a0      	str	r0, [r4, #56]	; 0x38
   dbb34:	8003      	strh	r3, [r0, #0]
   dbb36:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   dbb3a:	8043      	strh	r3, [r0, #2]
   dbb3c:	f241 2334 	movw	r3, #4660	; 0x1234
   dbb40:	8083      	strh	r3, [r0, #4]
   dbb42:	f24e 636d 	movw	r3, #58989	; 0xe66d
   dbb46:	80c3      	strh	r3, [r0, #6]
   dbb48:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   dbb4c:	8103      	strh	r3, [r0, #8]
   dbb4e:	2305      	movs	r3, #5
   dbb50:	8143      	strh	r3, [r0, #10]
   dbb52:	230b      	movs	r3, #11
   dbb54:	8183      	strh	r3, [r0, #12]
   dbb56:	2201      	movs	r2, #1
   dbb58:	2300      	movs	r3, #0
   dbb5a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dbb5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dbb60:	2200      	movs	r2, #0
   dbb62:	611d      	str	r5, [r3, #16]
   dbb64:	615a      	str	r2, [r3, #20]
   dbb66:	bd38      	pop	{r3, r4, r5, pc}
   dbb68:	2003d868 	.word	0x2003d868

000dbb6c <strchr>:
   dbb6c:	b2c9      	uxtb	r1, r1
   dbb6e:	4603      	mov	r3, r0
   dbb70:	f810 2b01 	ldrb.w	r2, [r0], #1
   dbb74:	b11a      	cbz	r2, dbb7e <strchr+0x12>
   dbb76:	4291      	cmp	r1, r2
   dbb78:	d1f9      	bne.n	dbb6e <strchr+0x2>
   dbb7a:	4618      	mov	r0, r3
   dbb7c:	4770      	bx	lr
   dbb7e:	2900      	cmp	r1, #0
   dbb80:	bf0c      	ite	eq
   dbb82:	4618      	moveq	r0, r3
   dbb84:	2000      	movne	r0, #0
   dbb86:	4770      	bx	lr

000dbb88 <strcmp>:
   dbb88:	f810 2b01 	ldrb.w	r2, [r0], #1
   dbb8c:	f811 3b01 	ldrb.w	r3, [r1], #1
   dbb90:	2a01      	cmp	r2, #1
   dbb92:	bf28      	it	cs
   dbb94:	429a      	cmpcs	r2, r3
   dbb96:	d0f7      	beq.n	dbb88 <strcmp>
   dbb98:	1ad0      	subs	r0, r2, r3
   dbb9a:	4770      	bx	lr

000dbb9c <strcpy>:
   dbb9c:	4603      	mov	r3, r0
   dbb9e:	f811 2b01 	ldrb.w	r2, [r1], #1
   dbba2:	f803 2b01 	strb.w	r2, [r3], #1
   dbba6:	2a00      	cmp	r2, #0
   dbba8:	d1f9      	bne.n	dbb9e <strcpy+0x2>
   dbbaa:	4770      	bx	lr

000dbbac <iso_year_adjust>:
   dbbac:	6941      	ldr	r1, [r0, #20]
   dbbae:	078b      	lsls	r3, r1, #30
   dbbb0:	b510      	push	{r4, lr}
   dbbb2:	d10c      	bne.n	dbbce <iso_year_adjust+0x22>
   dbbb4:	2900      	cmp	r1, #0
   dbbb6:	f240 736c 	movw	r3, #1900	; 0x76c
   dbbba:	bfa8      	it	ge
   dbbbc:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   dbbc0:	440b      	add	r3, r1
   dbbc2:	2464      	movs	r4, #100	; 0x64
   dbbc4:	fb93 f2f4 	sdiv	r2, r3, r4
   dbbc8:	fb04 3312 	mls	r3, r4, r2, r3
   dbbcc:	b983      	cbnz	r3, dbbf0 <iso_year_adjust+0x44>
   dbbce:	2900      	cmp	r1, #0
   dbbd0:	f240 736c 	movw	r3, #1900	; 0x76c
   dbbd4:	bfa8      	it	ge
   dbbd6:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   dbbda:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dbbde:	440b      	add	r3, r1
   dbbe0:	fb93 f1f2 	sdiv	r1, r3, r2
   dbbe4:	fb02 3311 	mls	r3, r2, r1, r3
   dbbe8:	fab3 f283 	clz	r2, r3
   dbbec:	0952      	lsrs	r2, r2, #5
   dbbee:	e000      	b.n	dbbf2 <iso_year_adjust+0x46>
   dbbf0:	2201      	movs	r2, #1
   dbbf2:	6983      	ldr	r3, [r0, #24]
   dbbf4:	69c1      	ldr	r1, [r0, #28]
   dbbf6:	005b      	lsls	r3, r3, #1
   dbbf8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   dbbfc:	4413      	add	r3, r2
   dbbfe:	2b21      	cmp	r3, #33	; 0x21
   dbc00:	dc0e      	bgt.n	dbc20 <iso_year_adjust+0x74>
   dbc02:	2b20      	cmp	r3, #32
   dbc04:	da2f      	bge.n	dbc66 <iso_year_adjust+0xba>
   dbc06:	2b0d      	cmp	r3, #13
   dbc08:	dc02      	bgt.n	dbc10 <iso_year_adjust+0x64>
   dbc0a:	2b0a      	cmp	r3, #10
   dbc0c:	db05      	blt.n	dbc1a <iso_year_adjust+0x6e>
   dbc0e:	e02a      	b.n	dbc66 <iso_year_adjust+0xba>
   dbc10:	2b10      	cmp	r3, #16
   dbc12:	db26      	blt.n	dbc62 <iso_year_adjust+0xb6>
   dbc14:	2b11      	cmp	r3, #17
   dbc16:	dd26      	ble.n	dbc66 <iso_year_adjust+0xba>
   dbc18:	3b1c      	subs	r3, #28
   dbc1a:	2b01      	cmp	r3, #1
   dbc1c:	d923      	bls.n	dbc66 <iso_year_adjust+0xba>
   dbc1e:	e020      	b.n	dbc62 <iso_year_adjust+0xb6>
   dbc20:	f241 62c6 	movw	r2, #5830	; 0x16c6
   dbc24:	4293      	cmp	r3, r2
   dbc26:	dc0e      	bgt.n	dbc46 <iso_year_adjust+0x9a>
   dbc28:	f241 62c2 	movw	r2, #5826	; 0x16c2
   dbc2c:	4293      	cmp	r3, r2
   dbc2e:	da16      	bge.n	dbc5e <iso_year_adjust+0xb2>
   dbc30:	f241 62a2 	movw	r2, #5794	; 0x16a2
   dbc34:	4293      	cmp	r3, r2
   dbc36:	d012      	beq.n	dbc5e <iso_year_adjust+0xb2>
   dbc38:	db13      	blt.n	dbc62 <iso_year_adjust+0xb6>
   dbc3a:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
   dbc3e:	3b12      	subs	r3, #18
   dbc40:	2b02      	cmp	r3, #2
   dbc42:	d90c      	bls.n	dbc5e <iso_year_adjust+0xb2>
   dbc44:	e00d      	b.n	dbc62 <iso_year_adjust+0xb6>
   dbc46:	f241 62d5 	movw	r2, #5845	; 0x16d5
   dbc4a:	4293      	cmp	r3, r2
   dbc4c:	d007      	beq.n	dbc5e <iso_year_adjust+0xb2>
   dbc4e:	f241 62d7 	movw	r2, #5847	; 0x16d7
   dbc52:	4293      	cmp	r3, r2
   dbc54:	d003      	beq.n	dbc5e <iso_year_adjust+0xb2>
   dbc56:	f241 62d3 	movw	r2, #5843	; 0x16d3
   dbc5a:	4293      	cmp	r3, r2
   dbc5c:	d101      	bne.n	dbc62 <iso_year_adjust+0xb6>
   dbc5e:	2001      	movs	r0, #1
   dbc60:	bd10      	pop	{r4, pc}
   dbc62:	2000      	movs	r0, #0
   dbc64:	bd10      	pop	{r4, pc}
   dbc66:	f04f 30ff 	mov.w	r0, #4294967295
   dbc6a:	bd10      	pop	{r4, pc}

000dbc6c <strftime>:
   dbc6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbc70:	b093      	sub	sp, #76	; 0x4c
   dbc72:	460e      	mov	r6, r1
   dbc74:	461d      	mov	r5, r3
   dbc76:	4607      	mov	r7, r0
   dbc78:	4691      	mov	r9, r2
   dbc7a:	f000 fd63 	bl	dc744 <__get_current_time_locale>
   dbc7e:	2300      	movs	r3, #0
   dbc80:	9306      	str	r3, [sp, #24]
   dbc82:	461c      	mov	r4, r3
   dbc84:	1e73      	subs	r3, r6, #1
   dbc86:	9003      	str	r0, [sp, #12]
   dbc88:	9302      	str	r3, [sp, #8]
   dbc8a:	f899 3000 	ldrb.w	r3, [r9]
   dbc8e:	2b00      	cmp	r3, #0
   dbc90:	f000 8492 	beq.w	dc5b8 <strftime+0x94c>
   dbc94:	2b25      	cmp	r3, #37	; 0x25
   dbc96:	d008      	beq.n	dbcaa <strftime+0x3e>
   dbc98:	9a02      	ldr	r2, [sp, #8]
   dbc9a:	4294      	cmp	r4, r2
   dbc9c:	f080 8490 	bcs.w	dc5c0 <strftime+0x954>
   dbca0:	553b      	strb	r3, [r7, r4]
   dbca2:	f109 0901 	add.w	r9, r9, #1
   dbca6:	3401      	adds	r4, #1
   dbca8:	e7ef      	b.n	dbc8a <strftime+0x1e>
   dbcaa:	f899 a001 	ldrb.w	sl, [r9, #1]
   dbcae:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
   dbcb2:	d007      	beq.n	dbcc4 <strftime+0x58>
   dbcb4:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   dbcb8:	d004      	beq.n	dbcc4 <strftime+0x58>
   dbcba:	f109 0901 	add.w	r9, r9, #1
   dbcbe:	f04f 0a00 	mov.w	sl, #0
   dbcc2:	e001      	b.n	dbcc8 <strftime+0x5c>
   dbcc4:	f109 0902 	add.w	r9, r9, #2
   dbcc8:	f899 3000 	ldrb.w	r3, [r9]
   dbccc:	3b31      	subs	r3, #49	; 0x31
   dbcce:	2b08      	cmp	r3, #8
   dbcd0:	d808      	bhi.n	dbce4 <strftime+0x78>
   dbcd2:	4648      	mov	r0, r9
   dbcd4:	220a      	movs	r2, #10
   dbcd6:	a90a      	add	r1, sp, #40	; 0x28
   dbcd8:	f000 fd2a 	bl	dc730 <strtoul>
   dbcdc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   dbce0:	4680      	mov	r8, r0
   dbce2:	e001      	b.n	dbce8 <strftime+0x7c>
   dbce4:	f04f 0800 	mov.w	r8, #0
   dbce8:	f899 3000 	ldrb.w	r3, [r9]
   dbcec:	2b45      	cmp	r3, #69	; 0x45
   dbcee:	d001      	beq.n	dbcf4 <strftime+0x88>
   dbcf0:	2b4f      	cmp	r3, #79	; 0x4f
   dbcf2:	d101      	bne.n	dbcf8 <strftime+0x8c>
   dbcf4:	f109 0901 	add.w	r9, r9, #1
   dbcf8:	f899 0000 	ldrb.w	r0, [r9]
   dbcfc:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   dbd00:	2b55      	cmp	r3, #85	; 0x55
   dbd02:	f200 845d 	bhi.w	dc5c0 <strftime+0x954>
   dbd06:	e8df f013 	tbh	[pc, r3, lsl #1]
   dbd0a:	044a      	.short	0x044a
   dbd0c:	045b045b 	.word	0x045b045b
   dbd10:	045b045b 	.word	0x045b045b
   dbd14:	045b045b 	.word	0x045b045b
   dbd18:	045b045b 	.word	0x045b045b
   dbd1c:	045b045b 	.word	0x045b045b
   dbd20:	045b045b 	.word	0x045b045b
   dbd24:	045b045b 	.word	0x045b045b
   dbd28:	045b045b 	.word	0x045b045b
   dbd2c:	045b045b 	.word	0x045b045b
   dbd30:	045b045b 	.word	0x045b045b
   dbd34:	045b045b 	.word	0x045b045b
   dbd38:	045b045b 	.word	0x045b045b
   dbd3c:	045b045b 	.word	0x045b045b
   dbd40:	006f045b 	.word	0x006f045b
   dbd44:	00d400a1 	.word	0x00d400a1
   dbd48:	045b011a 	.word	0x045b011a
   dbd4c:	01a0013f 	.word	0x01a0013f
   dbd50:	022d0226 	.word	0x022d0226
   dbd54:	045b045b 	.word	0x045b045b
   dbd58:	0260045b 	.word	0x0260045b
   dbd5c:	045b045b 	.word	0x045b045b
   dbd60:	045b0268 	.word	0x045b0268
   dbd64:	031d0297 	.word	0x031d0297
   dbd68:	033b0325 	.word	0x033b0325
   dbd6c:	03860343 	.word	0x03860343
   dbd70:	03a000c6 	.word	0x03a000c6
   dbd74:	045b041f 	.word	0x045b041f
   dbd78:	045b045b 	.word	0x045b045b
   dbd7c:	045b045b 	.word	0x045b045b
   dbd80:	0056045b 	.word	0x0056045b
   dbd84:	00ba0089 	.word	0x00ba0089
   dbd88:	010c010c 	.word	0x010c010c
   dbd8c:	0171045b 	.word	0x0171045b
   dbd90:	045b0089 	.word	0x045b0089
   dbd94:	0226023d 	.word	0x0226023d
   dbd98:	025d022d 	.word	0x025d022d
   dbd9c:	045b0262 	.word	0x045b0262
   dbda0:	045b0268 	.word	0x045b0268
   dbda4:	029c00be 	.word	0x029c00be
   dbda8:	032e031f 	.word	0x032e031f
   dbdac:	037f045b 	.word	0x037f045b
   dbdb0:	039200c2 	.word	0x039200c2
   dbdb4:	03e7      	.short	0x03e7
   dbdb6:	69ab      	ldr	r3, [r5, #24]
   dbdb8:	9a03      	ldr	r2, [sp, #12]
   dbdba:	3318      	adds	r3, #24
   dbdbc:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   dbdc0:	4640      	mov	r0, r8
   dbdc2:	f000 fc07 	bl	dc5d4 <strlen>
   dbdc6:	f108 38ff 	add.w	r8, r8, #4294967295
   dbdca:	193b      	adds	r3, r7, r4
   dbdcc:	4420      	add	r0, r4
   dbdce:	4284      	cmp	r4, r0
   dbdd0:	f000 83eb 	beq.w	dc5aa <strftime+0x93e>
   dbdd4:	9a02      	ldr	r2, [sp, #8]
   dbdd6:	4294      	cmp	r4, r2
   dbdd8:	f080 83f2 	bcs.w	dc5c0 <strftime+0x954>
   dbddc:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dbde0:	f803 2b01 	strb.w	r2, [r3], #1
   dbde4:	3401      	adds	r4, #1
   dbde6:	e7f2      	b.n	dbdce <strftime+0x162>
   dbde8:	69ab      	ldr	r3, [r5, #24]
   dbdea:	9a03      	ldr	r2, [sp, #12]
   dbdec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dbdf0:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
   dbdf4:	4640      	mov	r0, r8
   dbdf6:	f000 fbed 	bl	dc5d4 <strlen>
   dbdfa:	f108 38ff 	add.w	r8, r8, #4294967295
   dbdfe:	193b      	adds	r3, r7, r4
   dbe00:	4420      	add	r0, r4
   dbe02:	4284      	cmp	r4, r0
   dbe04:	f000 83d1 	beq.w	dc5aa <strftime+0x93e>
   dbe08:	9a02      	ldr	r2, [sp, #8]
   dbe0a:	4294      	cmp	r4, r2
   dbe0c:	f080 83d8 	bcs.w	dc5c0 <strftime+0x954>
   dbe10:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dbe14:	f803 2b01 	strb.w	r2, [r3], #1
   dbe18:	3401      	adds	r4, #1
   dbe1a:	e7f2      	b.n	dbe02 <strftime+0x196>
   dbe1c:	692b      	ldr	r3, [r5, #16]
   dbe1e:	9a03      	ldr	r2, [sp, #12]
   dbe20:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   dbe24:	4640      	mov	r0, r8
   dbe26:	f000 fbd5 	bl	dc5d4 <strlen>
   dbe2a:	f108 38ff 	add.w	r8, r8, #4294967295
   dbe2e:	193b      	adds	r3, r7, r4
   dbe30:	4420      	add	r0, r4
   dbe32:	4284      	cmp	r4, r0
   dbe34:	f000 83b9 	beq.w	dc5aa <strftime+0x93e>
   dbe38:	9a02      	ldr	r2, [sp, #8]
   dbe3a:	4294      	cmp	r4, r2
   dbe3c:	f080 83c0 	bcs.w	dc5c0 <strftime+0x954>
   dbe40:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dbe44:	f803 2b01 	strb.w	r2, [r3], #1
   dbe48:	3401      	adds	r4, #1
   dbe4a:	e7f2      	b.n	dbe32 <strftime+0x1c6>
   dbe4c:	692b      	ldr	r3, [r5, #16]
   dbe4e:	9a03      	ldr	r2, [sp, #12]
   dbe50:	330c      	adds	r3, #12
   dbe52:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   dbe56:	4640      	mov	r0, r8
   dbe58:	f000 fbbc 	bl	dc5d4 <strlen>
   dbe5c:	f108 38ff 	add.w	r8, r8, #4294967295
   dbe60:	193b      	adds	r3, r7, r4
   dbe62:	4420      	add	r0, r4
   dbe64:	4284      	cmp	r4, r0
   dbe66:	f000 83a0 	beq.w	dc5aa <strftime+0x93e>
   dbe6a:	9a02      	ldr	r2, [sp, #8]
   dbe6c:	4294      	cmp	r4, r2
   dbe6e:	f080 83a7 	bcs.w	dc5c0 <strftime+0x954>
   dbe72:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dbe76:	f803 2b01 	strb.w	r2, [r3], #1
   dbe7a:	3401      	adds	r4, #1
   dbe7c:	e7f2      	b.n	dbe64 <strftime+0x1f8>
   dbe7e:	9b03      	ldr	r3, [sp, #12]
   dbe80:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
   dbe84:	e00a      	b.n	dbe9c <strftime+0x230>
   dbe86:	9b03      	ldr	r3, [sp, #12]
   dbe88:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
   dbe8c:	e006      	b.n	dbe9c <strftime+0x230>
   dbe8e:	9b03      	ldr	r3, [sp, #12]
   dbe90:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
   dbe94:	e002      	b.n	dbe9c <strftime+0x230>
   dbe96:	9b03      	ldr	r3, [sp, #12]
   dbe98:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
   dbe9c:	4640      	mov	r0, r8
   dbe9e:	f000 fb99 	bl	dc5d4 <strlen>
   dbea2:	f898 3000 	ldrb.w	r3, [r8]
   dbea6:	2b00      	cmp	r3, #0
   dbea8:	f000 837f 	beq.w	dc5aa <strftime+0x93e>
   dbeac:	462b      	mov	r3, r5
   dbeae:	4642      	mov	r2, r8
   dbeb0:	e093      	b.n	dbfda <strftime+0x36e>
   dbeb2:	49b6      	ldr	r1, [pc, #728]	; (dc18c <strftime+0x520>)
   dbeb4:	f8d5 b014 	ldr.w	fp, [r5, #20]
   dbeb8:	458b      	cmp	fp, r1
   dbeba:	bfac      	ite	ge
   dbebc:	2100      	movge	r1, #0
   dbebe:	2101      	movlt	r1, #1
   dbec0:	f1bb 0f00 	cmp.w	fp, #0
   dbec4:	db04      	blt.n	dbed0 <strftime+0x264>
   dbec6:	2064      	movs	r0, #100	; 0x64
   dbec8:	fb9b f0f0 	sdiv	r0, fp, r0
   dbecc:	3013      	adds	r0, #19
   dbece:	e008      	b.n	dbee2 <strftime+0x276>
   dbed0:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
   dbed4:	9107      	str	r1, [sp, #28]
   dbed6:	f000 fe75 	bl	dcbc4 <abs>
   dbeda:	9907      	ldr	r1, [sp, #28]
   dbedc:	2364      	movs	r3, #100	; 0x64
   dbede:	fb90 f0f3 	sdiv	r0, r0, r3
   dbee2:	f1ba 0f00 	cmp.w	sl, #0
   dbee6:	d008      	beq.n	dbefa <strftime+0x28e>
   dbee8:	2863      	cmp	r0, #99	; 0x63
   dbeea:	dd09      	ble.n	dbf00 <strftime+0x294>
   dbeec:	4ba8      	ldr	r3, [pc, #672]	; (dc190 <strftime+0x524>)
   dbeee:	4aa9      	ldr	r2, [pc, #676]	; (dc194 <strftime+0x528>)
   dbef0:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   dbef4:	bf18      	it	ne
   dbef6:	4613      	movne	r3, r2
   dbef8:	e003      	b.n	dbf02 <strftime+0x296>
   dbefa:	4ba6      	ldr	r3, [pc, #664]	; (dc194 <strftime+0x528>)
   dbefc:	4aa6      	ldr	r2, [pc, #664]	; (dc198 <strftime+0x52c>)
   dbefe:	e001      	b.n	dbf04 <strftime+0x298>
   dbf00:	4ba4      	ldr	r3, [pc, #656]	; (dc194 <strftime+0x528>)
   dbf02:	4aa6      	ldr	r2, [pc, #664]	; (dc19c <strftime+0x530>)
   dbf04:	9001      	str	r0, [sp, #4]
   dbf06:	f1b8 0f01 	cmp.w	r8, #1
   dbf0a:	bf98      	it	ls
   dbf0c:	f04f 0802 	movls.w	r8, #2
   dbf10:	ebc1 0108 	rsb	r1, r1, r8
   dbf14:	9100      	str	r1, [sp, #0]
   dbf16:	489d      	ldr	r0, [pc, #628]	; (dc18c <strftime+0x520>)
   dbf18:	49a1      	ldr	r1, [pc, #644]	; (dc1a0 <strftime+0x534>)
   dbf1a:	4583      	cmp	fp, r0
   dbf1c:	bfb8      	it	lt
   dbf1e:	460b      	movlt	r3, r1
   dbf20:	e21e      	b.n	dc360 <strftime+0x6f4>
   dbf22:	4aa0      	ldr	r2, [pc, #640]	; (dc1a4 <strftime+0x538>)
   dbf24:	49a0      	ldr	r1, [pc, #640]	; (dc1a8 <strftime+0x53c>)
   dbf26:	68eb      	ldr	r3, [r5, #12]
   dbf28:	2864      	cmp	r0, #100	; 0x64
   dbf2a:	bf08      	it	eq
   dbf2c:	460a      	moveq	r2, r1
   dbf2e:	1b31      	subs	r1, r6, r4
   dbf30:	1938      	adds	r0, r7, r4
   dbf32:	f7fc ff51 	bl	d8dd8 <sniprintf>
   dbf36:	2800      	cmp	r0, #0
   dbf38:	f280 8302 	bge.w	dc540 <strftime+0x8d4>
   dbf3c:	e340      	b.n	dc5c0 <strftime+0x954>
   dbf3e:	6968      	ldr	r0, [r5, #20]
   dbf40:	692b      	ldr	r3, [r5, #16]
   dbf42:	2800      	cmp	r0, #0
   dbf44:	f103 0b01 	add.w	fp, r3, #1
   dbf48:	eb07 0804 	add.w	r8, r7, r4
   dbf4c:	ebc4 0a06 	rsb	sl, r4, r6
   dbf50:	68eb      	ldr	r3, [r5, #12]
   dbf52:	db05      	blt.n	dbf60 <strftime+0x2f4>
   dbf54:	2264      	movs	r2, #100	; 0x64
   dbf56:	fb90 f1f2 	sdiv	r1, r0, r2
   dbf5a:	fb02 0011 	mls	r0, r2, r1, r0
   dbf5e:	e00a      	b.n	dbf76 <strftime+0x30a>
   dbf60:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dbf64:	9307      	str	r3, [sp, #28]
   dbf66:	f000 fe2d 	bl	dcbc4 <abs>
   dbf6a:	2264      	movs	r2, #100	; 0x64
   dbf6c:	9b07      	ldr	r3, [sp, #28]
   dbf6e:	fb90 f1f2 	sdiv	r1, r0, r2
   dbf72:	fb01 0012 	mls	r0, r1, r2, r0
   dbf76:	4a8d      	ldr	r2, [pc, #564]	; (dc1ac <strftime+0x540>)
   dbf78:	9001      	str	r0, [sp, #4]
   dbf7a:	9300      	str	r3, [sp, #0]
   dbf7c:	4651      	mov	r1, sl
   dbf7e:	465b      	mov	r3, fp
   dbf80:	4640      	mov	r0, r8
   dbf82:	f7fc ff29 	bl	d8dd8 <sniprintf>
   dbf86:	e7d6      	b.n	dbf36 <strftime+0x2ca>
   dbf88:	2325      	movs	r3, #37	; 0x25
   dbf8a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   dbf8e:	f1ba 0f00 	cmp.w	sl, #0
   dbf92:	d007      	beq.n	dbfa4 <strftime+0x338>
   dbf94:	f1b8 0f05 	cmp.w	r8, #5
   dbf98:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
   dbf9c:	bf98      	it	ls
   dbf9e:	f04f 0806 	movls.w	r8, #6
   dbfa2:	e004      	b.n	dbfae <strftime+0x342>
   dbfa4:	232b      	movs	r3, #43	; 0x2b
   dbfa6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   dbfaa:	f04f 080a 	mov.w	r8, #10
   dbfae:	f1b8 0306 	subs.w	r3, r8, #6
   dbfb2:	d102      	bne.n	dbfba <strftime+0x34e>
   dbfb4:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   dbfb8:	e00a      	b.n	dbfd0 <strftime+0x364>
   dbfba:	4a7d      	ldr	r2, [pc, #500]	; (dc1b0 <strftime+0x544>)
   dbfbc:	211e      	movs	r1, #30
   dbfbe:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   dbfc2:	f7fc ff09 	bl	d8dd8 <sniprintf>
   dbfc6:	2800      	cmp	r0, #0
   dbfc8:	ddf4      	ble.n	dbfb4 <strftime+0x348>
   dbfca:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   dbfce:	4418      	add	r0, r3
   dbfd0:	4978      	ldr	r1, [pc, #480]	; (dc1b4 <strftime+0x548>)
   dbfd2:	f7ff fde3 	bl	dbb9c <strcpy>
   dbfd6:	462b      	mov	r3, r5
   dbfd8:	aa0a      	add	r2, sp, #40	; 0x28
   dbfda:	1b31      	subs	r1, r6, r4
   dbfdc:	1938      	adds	r0, r7, r4
   dbfde:	f7ff fe45 	bl	dbc6c <strftime>
   dbfe2:	2800      	cmp	r0, #0
   dbfe4:	f340 82ec 	ble.w	dc5c0 <strftime+0x954>
   dbfe8:	4404      	add	r4, r0
   dbfea:	e2de      	b.n	dc5aa <strftime+0x93e>
   dbfec:	4628      	mov	r0, r5
   dbfee:	f7ff fddd 	bl	dbbac <iso_year_adjust>
   dbff2:	4680      	mov	r8, r0
   dbff4:	6968      	ldr	r0, [r5, #20]
   dbff6:	2800      	cmp	r0, #0
   dbff8:	db05      	blt.n	dc006 <strftime+0x39a>
   dbffa:	2264      	movs	r2, #100	; 0x64
   dbffc:	fb90 f1f2 	sdiv	r1, r0, r2
   dc000:	fb02 0011 	mls	r0, r2, r1, r0
   dc004:	e008      	b.n	dc018 <strftime+0x3ac>
   dc006:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dc00a:	f000 fddb 	bl	dcbc4 <abs>
   dc00e:	2264      	movs	r2, #100	; 0x64
   dc010:	fb90 f3f2 	sdiv	r3, r0, r2
   dc014:	fb03 0012 	mls	r0, r3, r2, r0
   dc018:	f1b8 0f00 	cmp.w	r8, #0
   dc01c:	da06      	bge.n	dc02c <strftime+0x3c0>
   dc01e:	696a      	ldr	r2, [r5, #20]
   dc020:	4b65      	ldr	r3, [pc, #404]	; (dc1b8 <strftime+0x54c>)
   dc022:	429a      	cmp	r2, r3
   dc024:	bfb8      	it	lt
   dc026:	f04f 0801 	movlt.w	r8, #1
   dc02a:	e006      	b.n	dc03a <strftime+0x3ce>
   dc02c:	d005      	beq.n	dc03a <strftime+0x3ce>
   dc02e:	696a      	ldr	r2, [r5, #20]
   dc030:	4b56      	ldr	r3, [pc, #344]	; (dc18c <strftime+0x520>)
   dc032:	429a      	cmp	r2, r3
   dc034:	bfb8      	it	lt
   dc036:	f04f 38ff 	movlt.w	r8, #4294967295
   dc03a:	2364      	movs	r3, #100	; 0x64
   dc03c:	4440      	add	r0, r8
   dc03e:	fb90 f2f3 	sdiv	r2, r0, r3
   dc042:	fb03 0012 	mls	r0, r3, r2, r0
   dc046:	4418      	add	r0, r3
   dc048:	e1f9      	b.n	dc43e <strftime+0x7d2>
   dc04a:	4b50      	ldr	r3, [pc, #320]	; (dc18c <strftime+0x520>)
   dc04c:	6969      	ldr	r1, [r5, #20]
   dc04e:	9108      	str	r1, [sp, #32]
   dc050:	4299      	cmp	r1, r3
   dc052:	bfac      	ite	ge
   dc054:	2300      	movge	r3, #0
   dc056:	2301      	movlt	r3, #1
   dc058:	4628      	mov	r0, r5
   dc05a:	9307      	str	r3, [sp, #28]
   dc05c:	f7ff fda6 	bl	dbbac <iso_year_adjust>
   dc060:	9908      	ldr	r1, [sp, #32]
   dc062:	2900      	cmp	r1, #0
   dc064:	4683      	mov	fp, r0
   dc066:	db04      	blt.n	dc072 <strftime+0x406>
   dc068:	2364      	movs	r3, #100	; 0x64
   dc06a:	fb91 f3f3 	sdiv	r3, r1, r3
   dc06e:	3313      	adds	r3, #19
   dc070:	e008      	b.n	dc084 <strftime+0x418>
   dc072:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   dc076:	9108      	str	r1, [sp, #32]
   dc078:	f000 fda4 	bl	dcbc4 <abs>
   dc07c:	9908      	ldr	r1, [sp, #32]
   dc07e:	2364      	movs	r3, #100	; 0x64
   dc080:	fb90 f3f3 	sdiv	r3, r0, r3
   dc084:	6968      	ldr	r0, [r5, #20]
   dc086:	2800      	cmp	r0, #0
   dc088:	db06      	blt.n	dc098 <strftime+0x42c>
   dc08a:	f04f 0e64 	mov.w	lr, #100	; 0x64
   dc08e:	fb90 fcfe 	sdiv	ip, r0, lr
   dc092:	fb0e 001c 	mls	r0, lr, ip, r0
   dc096:	e00d      	b.n	dc0b4 <strftime+0x448>
   dc098:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dc09c:	9109      	str	r1, [sp, #36]	; 0x24
   dc09e:	9308      	str	r3, [sp, #32]
   dc0a0:	f000 fd90 	bl	dcbc4 <abs>
   dc0a4:	f04f 0e64 	mov.w	lr, #100	; 0x64
   dc0a8:	9909      	ldr	r1, [sp, #36]	; 0x24
   dc0aa:	9b08      	ldr	r3, [sp, #32]
   dc0ac:	fb90 fcfe 	sdiv	ip, r0, lr
   dc0b0:	fb0c 001e 	mls	r0, ip, lr, r0
   dc0b4:	f1bb 0f00 	cmp.w	fp, #0
   dc0b8:	da08      	bge.n	dc0cc <strftime+0x460>
   dc0ba:	6969      	ldr	r1, [r5, #20]
   dc0bc:	4a3e      	ldr	r2, [pc, #248]	; (dc1b8 <strftime+0x54c>)
   dc0be:	4291      	cmp	r1, r2
   dc0c0:	da0a      	bge.n	dc0d8 <strftime+0x46c>
   dc0c2:	f04f 0b01 	mov.w	fp, #1
   dc0c6:	f8cd b01c 	str.w	fp, [sp, #28]
   dc0ca:	e005      	b.n	dc0d8 <strftime+0x46c>
   dc0cc:	d004      	beq.n	dc0d8 <strftime+0x46c>
   dc0ce:	4a2f      	ldr	r2, [pc, #188]	; (dc18c <strftime+0x520>)
   dc0d0:	4291      	cmp	r1, r2
   dc0d2:	bfb8      	it	lt
   dc0d4:	f04f 3bff 	movlt.w	fp, #4294967295
   dc0d8:	eb0b 0200 	add.w	r2, fp, r0
   dc0dc:	1c50      	adds	r0, r2, #1
   dc0de:	d102      	bne.n	dc0e6 <strftime+0x47a>
   dc0e0:	3b01      	subs	r3, #1
   dc0e2:	2263      	movs	r2, #99	; 0x63
   dc0e4:	e003      	b.n	dc0ee <strftime+0x482>
   dc0e6:	2a64      	cmp	r2, #100	; 0x64
   dc0e8:	bf04      	itt	eq
   dc0ea:	3301      	addeq	r3, #1
   dc0ec:	2200      	moveq	r2, #0
   dc0ee:	2064      	movs	r0, #100	; 0x64
   dc0f0:	fb00 2303 	mla	r3, r0, r3, r2
   dc0f4:	9a07      	ldr	r2, [sp, #28]
   dc0f6:	b142      	cbz	r2, dc10a <strftime+0x49e>
   dc0f8:	222d      	movs	r2, #45	; 0x2d
   dc0fa:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   dc0fe:	f1b8 0f00 	cmp.w	r8, #0
   dc102:	d013      	beq.n	dc12c <strftime+0x4c0>
   dc104:	f108 38ff 	add.w	r8, r8, #4294967295
   dc108:	e010      	b.n	dc12c <strftime+0x4c0>
   dc10a:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   dc10e:	d110      	bne.n	dc132 <strftime+0x4c6>
   dc110:	f242 720f 	movw	r2, #9999	; 0x270f
   dc114:	4293      	cmp	r3, r2
   dc116:	d90c      	bls.n	dc132 <strftime+0x4c6>
   dc118:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   dc11c:	f1b8 0f00 	cmp.w	r8, #0
   dc120:	d1f0      	bne.n	dc104 <strftime+0x498>
   dc122:	aa12      	add	r2, sp, #72	; 0x48
   dc124:	2125      	movs	r1, #37	; 0x25
   dc126:	f802 1d1f 	strb.w	r1, [r2, #-31]!
   dc12a:	e00a      	b.n	dc142 <strftime+0x4d6>
   dc12c:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   dc130:	e000      	b.n	dc134 <strftime+0x4c8>
   dc132:	aa0a      	add	r2, sp, #40	; 0x28
   dc134:	2125      	movs	r1, #37	; 0x25
   dc136:	7011      	strb	r1, [r2, #0]
   dc138:	f1ba 0f00 	cmp.w	sl, #0
   dc13c:	d101      	bne.n	dc142 <strftime+0x4d6>
   dc13e:	1c50      	adds	r0, r2, #1
   dc140:	e002      	b.n	dc148 <strftime+0x4dc>
   dc142:	2130      	movs	r1, #48	; 0x30
   dc144:	1c90      	adds	r0, r2, #2
   dc146:	7051      	strb	r1, [r2, #1]
   dc148:	491c      	ldr	r1, [pc, #112]	; (dc1bc <strftime+0x550>)
   dc14a:	9307      	str	r3, [sp, #28]
   dc14c:	f7ff fd26 	bl	dbb9c <strcpy>
   dc150:	9b07      	ldr	r3, [sp, #28]
   dc152:	9300      	str	r3, [sp, #0]
   dc154:	e1ad      	b.n	dc4b2 <strftime+0x846>
   dc156:	4a14      	ldr	r2, [pc, #80]	; (dc1a8 <strftime+0x53c>)
   dc158:	4912      	ldr	r1, [pc, #72]	; (dc1a4 <strftime+0x538>)
   dc15a:	68ab      	ldr	r3, [r5, #8]
   dc15c:	286b      	cmp	r0, #107	; 0x6b
   dc15e:	bf08      	it	eq
   dc160:	460a      	moveq	r2, r1
   dc162:	e6e4      	b.n	dbf2e <strftime+0x2c2>
   dc164:	68a9      	ldr	r1, [r5, #8]
   dc166:	230c      	movs	r3, #12
   dc168:	b131      	cbz	r1, dc178 <strftime+0x50c>
   dc16a:	4299      	cmp	r1, r3
   dc16c:	bf0e      	itee	eq
   dc16e:	460b      	moveq	r3, r1
   dc170:	fb91 f2f3 	sdivne	r2, r1, r3
   dc174:	fb03 1312 	mlsne	r3, r3, r2, r1
   dc178:	4a0a      	ldr	r2, [pc, #40]	; (dc1a4 <strftime+0x538>)
   dc17a:	490b      	ldr	r1, [pc, #44]	; (dc1a8 <strftime+0x53c>)
   dc17c:	2849      	cmp	r0, #73	; 0x49
   dc17e:	bf08      	it	eq
   dc180:	460a      	moveq	r2, r1
   dc182:	e6d4      	b.n	dbf2e <strftime+0x2c2>
   dc184:	69eb      	ldr	r3, [r5, #28]
   dc186:	4a0e      	ldr	r2, [pc, #56]	; (dc1c0 <strftime+0x554>)
   dc188:	3301      	adds	r3, #1
   dc18a:	e6d0      	b.n	dbf2e <strftime+0x2c2>
   dc18c:	fffff894 	.word	0xfffff894
   dc190:	000dd73b 	.word	0x000dd73b
   dc194:	000dd2be 	.word	0x000dd2be
   dc198:	000dd72c 	.word	0x000dd72c
   dc19c:	000dd733 	.word	0x000dd733
   dc1a0:	000dd73d 	.word	0x000dd73d
   dc1a4:	000dd73f 	.word	0x000dd73f
   dc1a8:	000dd74d 	.word	0x000dd74d
   dc1ac:	000dd743 	.word	0x000dd743
   dc1b0:	000dd752 	.word	0x000dd752
   dc1b4:	000dd756 	.word	0x000dd756
   dc1b8:	fffff895 	.word	0xfffff895
   dc1bc:	000dd75e 	.word	0x000dd75e
   dc1c0:	000dd762 	.word	0x000dd762
   dc1c4:	692b      	ldr	r3, [r5, #16]
   dc1c6:	3301      	adds	r3, #1
   dc1c8:	e13d      	b.n	dc446 <strftime+0x7da>
   dc1ca:	686b      	ldr	r3, [r5, #4]
   dc1cc:	e13b      	b.n	dc446 <strftime+0x7da>
   dc1ce:	9b02      	ldr	r3, [sp, #8]
   dc1d0:	429c      	cmp	r4, r3
   dc1d2:	f080 81f5 	bcs.w	dc5c0 <strftime+0x954>
   dc1d6:	230a      	movs	r3, #10
   dc1d8:	e1e5      	b.n	dc5a6 <strftime+0x93a>
   dc1da:	68ab      	ldr	r3, [r5, #8]
   dc1dc:	9a03      	ldr	r2, [sp, #12]
   dc1de:	2b0b      	cmp	r3, #11
   dc1e0:	bfcc      	ite	gt
   dc1e2:	23a4      	movgt	r3, #164	; 0xa4
   dc1e4:	23a0      	movle	r3, #160	; 0xa0
   dc1e6:	4413      	add	r3, r2
   dc1e8:	f8d3 8004 	ldr.w	r8, [r3, #4]
   dc1ec:	4640      	mov	r0, r8
   dc1ee:	f000 f9f1 	bl	dc5d4 <strlen>
   dc1f2:	4bb2      	ldr	r3, [pc, #712]	; (dc4bc <strftime+0x850>)
   dc1f4:	f8d3 e000 	ldr.w	lr, [r3]
   dc1f8:	1939      	adds	r1, r7, r4
   dc1fa:	4642      	mov	r2, r8
   dc1fc:	4420      	add	r0, r4
   dc1fe:	4284      	cmp	r4, r0
   dc200:	f000 81d3 	beq.w	dc5aa <strftime+0x93e>
   dc204:	9b02      	ldr	r3, [sp, #8]
   dc206:	429c      	cmp	r4, r3
   dc208:	f080 81da 	bcs.w	dc5c0 <strftime+0x954>
   dc20c:	f899 3000 	ldrb.w	r3, [r9]
   dc210:	2b50      	cmp	r3, #80	; 0x50
   dc212:	f104 0401 	add.w	r4, r4, #1
   dc216:	7813      	ldrb	r3, [r2, #0]
   dc218:	d10a      	bne.n	dc230 <strftime+0x5c4>
   dc21a:	eb0e 0c03 	add.w	ip, lr, r3
   dc21e:	f89c c001 	ldrb.w	ip, [ip, #1]
   dc222:	f00c 0c03 	and.w	ip, ip, #3
   dc226:	f1bc 0f01 	cmp.w	ip, #1
   dc22a:	bf08      	it	eq
   dc22c:	3320      	addeq	r3, #32
   dc22e:	b2db      	uxtb	r3, r3
   dc230:	f801 3b01 	strb.w	r3, [r1], #1
   dc234:	3201      	adds	r2, #1
   dc236:	e7e2      	b.n	dc1fe <strftime+0x592>
   dc238:	686b      	ldr	r3, [r5, #4]
   dc23a:	9300      	str	r3, [sp, #0]
   dc23c:	4aa0      	ldr	r2, [pc, #640]	; (dc4c0 <strftime+0x854>)
   dc23e:	68ab      	ldr	r3, [r5, #8]
   dc240:	e139      	b.n	dc4b6 <strftime+0x84a>
   dc242:	6a2b      	ldr	r3, [r5, #32]
   dc244:	2b00      	cmp	r3, #0
   dc246:	db17      	blt.n	dc278 <strftime+0x60c>
   dc248:	f000 fb34 	bl	dc8b4 <__tz_lock>
   dc24c:	9b06      	ldr	r3, [sp, #24]
   dc24e:	b91b      	cbnz	r3, dc258 <strftime+0x5ec>
   dc250:	f000 fb32 	bl	dc8b8 <_tzset_unlocked>
   dc254:	2301      	movs	r3, #1
   dc256:	9306      	str	r3, [sp, #24]
   dc258:	f000 fcfc 	bl	dcc54 <__gettzinfo>
   dc25c:	6a2b      	ldr	r3, [r5, #32]
   dc25e:	2b00      	cmp	r3, #0
   dc260:	bfd4      	ite	le
   dc262:	2300      	movle	r3, #0
   dc264:	2301      	movgt	r3, #1
   dc266:	221c      	movs	r2, #28
   dc268:	fb02 0003 	mla	r0, r2, r3, r0
   dc26c:	6a03      	ldr	r3, [r0, #32]
   dc26e:	f1c3 0800 	rsb	r8, r3, #0
   dc272:	f000 fb20 	bl	dc8b6 <__tz_unlock>
   dc276:	e001      	b.n	dc27c <strftime+0x610>
   dc278:	f04f 0800 	mov.w	r8, #0
   dc27c:	f8d5 e014 	ldr.w	lr, [r5, #20]
   dc280:	4670      	mov	r0, lr
   dc282:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
   dc286:	ea4f 71e0 	mov.w	r1, r0, asr #31
   dc28a:	f141 33ff 	adc.w	r3, r1, #4294967295
   dc28e:	2a00      	cmp	r2, #0
   dc290:	f173 0b00 	sbcs.w	fp, r3, #0
   dc294:	ebc4 0c06 	rsb	ip, r4, r6
   dc298:	eb07 0a04 	add.w	sl, r7, r4
   dc29c:	da03      	bge.n	dc2a6 <strftime+0x63a>
   dc29e:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
   dc2a2:	f141 33ff 	adc.w	r3, r1, #4294967295
   dc2a6:	0891      	lsrs	r1, r2, #2
   dc2a8:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
   dc2ac:	109b      	asrs	r3, r3, #2
   dc2ae:	9104      	str	r1, [sp, #16]
   dc2b0:	9305      	str	r3, [sp, #20]
   dc2b2:	f10e 31ff 	add.w	r1, lr, #4294967295
   dc2b6:	2364      	movs	r3, #100	; 0x64
   dc2b8:	fb91 f1f3 	sdiv	r1, r1, r3
   dc2bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   dc2c0:	1a52      	subs	r2, r2, r1
   dc2c2:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   dc2c6:	f20e 102b 	addw	r0, lr, #299	; 0x12b
   dc2ca:	f44f 71c8 	mov.w	r1, #400	; 0x190
   dc2ce:	fb90 f1f1 	sdiv	r1, r0, r1
   dc2d2:	1852      	adds	r2, r2, r1
   dc2d4:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   dc2d8:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
   dc2dc:	f240 116d 	movw	r1, #365	; 0x16d
   dc2e0:	fb01 fe0e 	mul.w	lr, r1, lr
   dc2e4:	69e9      	ldr	r1, [r5, #28]
   dc2e6:	eb12 020e 	adds.w	r2, r2, lr
   dc2ea:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
   dc2ee:	1852      	adds	r2, r2, r1
   dc2f0:	f04f 0e18 	mov.w	lr, #24
   dc2f4:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   dc2f8:	fba2 010e 	umull	r0, r1, r2, lr
   dc2fc:	fb0e 1103 	mla	r1, lr, r3, r1
   dc300:	68ab      	ldr	r3, [r5, #8]
   dc302:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
   dc306:	18c0      	adds	r0, r0, r3
   dc308:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   dc30c:	fba0 230e 	umull	r2, r3, r0, lr
   dc310:	fb0e 3301 	mla	r3, lr, r1, r3
   dc314:	6869      	ldr	r1, [r5, #4]
   dc316:	1852      	adds	r2, r2, r1
   dc318:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   dc31c:	fba2 010e 	umull	r0, r1, r2, lr
   dc320:	fb0e 1103 	mla	r1, lr, r3, r1
   dc324:	682b      	ldr	r3, [r5, #0]
   dc326:	4a67      	ldr	r2, [pc, #412]	; (dc4c4 <strftime+0x858>)
   dc328:	18c0      	adds	r0, r0, r3
   dc32a:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   dc32e:	ebb0 0008 	subs.w	r0, r0, r8
   dc332:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
   dc336:	e9cd 0100 	strd	r0, r1, [sp]
   dc33a:	4661      	mov	r1, ip
   dc33c:	4650      	mov	r0, sl
   dc33e:	f7fc fd4b 	bl	d8dd8 <sniprintf>
   dc342:	e5f8      	b.n	dbf36 <strftime+0x2ca>
   dc344:	682b      	ldr	r3, [r5, #0]
   dc346:	e07e      	b.n	dc446 <strftime+0x7da>
   dc348:	9b02      	ldr	r3, [sp, #8]
   dc34a:	429c      	cmp	r4, r3
   dc34c:	f080 8138 	bcs.w	dc5c0 <strftime+0x954>
   dc350:	2309      	movs	r3, #9
   dc352:	e128      	b.n	dc5a6 <strftime+0x93a>
   dc354:	682b      	ldr	r3, [r5, #0]
   dc356:	9301      	str	r3, [sp, #4]
   dc358:	686b      	ldr	r3, [r5, #4]
   dc35a:	9300      	str	r3, [sp, #0]
   dc35c:	4a5a      	ldr	r2, [pc, #360]	; (dc4c8 <strftime+0x85c>)
   dc35e:	68ab      	ldr	r3, [r5, #8]
   dc360:	1b31      	subs	r1, r6, r4
   dc362:	1938      	adds	r0, r7, r4
   dc364:	e60d      	b.n	dbf82 <strftime+0x316>
   dc366:	9b02      	ldr	r3, [sp, #8]
   dc368:	429c      	cmp	r4, r3
   dc36a:	f080 8129 	bcs.w	dc5c0 <strftime+0x954>
   dc36e:	69ab      	ldr	r3, [r5, #24]
   dc370:	1c62      	adds	r2, r4, #1
   dc372:	b90b      	cbnz	r3, dc378 <strftime+0x70c>
   dc374:	2337      	movs	r3, #55	; 0x37
   dc376:	e000      	b.n	dc37a <strftime+0x70e>
   dc378:	3330      	adds	r3, #48	; 0x30
   dc37a:	553b      	strb	r3, [r7, r4]
   dc37c:	4614      	mov	r4, r2
   dc37e:	e114      	b.n	dc5aa <strftime+0x93e>
   dc380:	69eb      	ldr	r3, [r5, #28]
   dc382:	69aa      	ldr	r2, [r5, #24]
   dc384:	3307      	adds	r3, #7
   dc386:	1a9b      	subs	r3, r3, r2
   dc388:	2207      	movs	r2, #7
   dc38a:	fb93 f3f2 	sdiv	r3, r3, r2
   dc38e:	e05a      	b.n	dc446 <strftime+0x7da>
   dc390:	4628      	mov	r0, r5
   dc392:	f7ff fc0b 	bl	dbbac <iso_year_adjust>
   dc396:	69aa      	ldr	r2, [r5, #24]
   dc398:	b10a      	cbz	r2, dc39e <strftime+0x732>
   dc39a:	1e53      	subs	r3, r2, #1
   dc39c:	e000      	b.n	dc3a0 <strftime+0x734>
   dc39e:	2306      	movs	r3, #6
   dc3a0:	2800      	cmp	r0, #0
   dc3a2:	dc2f      	bgt.n	dc404 <strftime+0x798>
   dc3a4:	69ea      	ldr	r2, [r5, #28]
   dc3a6:	d101      	bne.n	dc3ac <strftime+0x740>
   dc3a8:	320a      	adds	r2, #10
   dc3aa:	e03b      	b.n	dc424 <strftime+0x7b8>
   dc3ac:	1a9a      	subs	r2, r3, r2
   dc3ae:	696b      	ldr	r3, [r5, #20]
   dc3b0:	f240 716b 	movw	r1, #1899	; 0x76b
   dc3b4:	2b00      	cmp	r3, #0
   dc3b6:	bfb4      	ite	lt
   dc3b8:	4608      	movlt	r0, r1
   dc3ba:	f06f 0064 	mvnge.w	r0, #100	; 0x64
   dc3be:	4418      	add	r0, r3
   dc3c0:	0781      	lsls	r1, r0, #30
   dc3c2:	d107      	bne.n	dc3d4 <strftime+0x768>
   dc3c4:	4601      	mov	r1, r0
   dc3c6:	f04f 0e64 	mov.w	lr, #100	; 0x64
   dc3ca:	fb90 f0fe 	sdiv	r0, r0, lr
   dc3ce:	fb0e 1110 	mls	r1, lr, r0, r1
   dc3d2:	b981      	cbnz	r1, dc3f6 <strftime+0x78a>
   dc3d4:	2b00      	cmp	r3, #0
   dc3d6:	f240 716b 	movw	r1, #1899	; 0x76b
   dc3da:	bfa8      	it	ge
   dc3dc:	f06f 0164 	mvnge.w	r1, #100	; 0x64
   dc3e0:	4419      	add	r1, r3
   dc3e2:	f44f 73c8 	mov.w	r3, #400	; 0x190
   dc3e6:	fb91 f0f3 	sdiv	r0, r1, r3
   dc3ea:	fb03 1110 	mls	r1, r3, r0, r1
   dc3ee:	fab1 f181 	clz	r1, r1
   dc3f2:	0949      	lsrs	r1, r1, #5
   dc3f4:	e000      	b.n	dc3f8 <strftime+0x78c>
   dc3f6:	2101      	movs	r1, #1
   dc3f8:	1a52      	subs	r2, r2, r1
   dc3fa:	2a05      	cmp	r2, #5
   dc3fc:	bfb4      	ite	lt
   dc3fe:	2335      	movlt	r3, #53	; 0x35
   dc400:	2334      	movge	r3, #52	; 0x34
   dc402:	e020      	b.n	dc446 <strftime+0x7da>
   dc404:	2301      	movs	r3, #1
   dc406:	e01e      	b.n	dc446 <strftime+0x7da>
   dc408:	9b02      	ldr	r3, [sp, #8]
   dc40a:	429c      	cmp	r4, r3
   dc40c:	f080 80d8 	bcs.w	dc5c0 <strftime+0x954>
   dc410:	69ab      	ldr	r3, [r5, #24]
   dc412:	3330      	adds	r3, #48	; 0x30
   dc414:	e0c7      	b.n	dc5a6 <strftime+0x93a>
   dc416:	69aa      	ldr	r2, [r5, #24]
   dc418:	b10a      	cbz	r2, dc41e <strftime+0x7b2>
   dc41a:	1e53      	subs	r3, r2, #1
   dc41c:	e000      	b.n	dc420 <strftime+0x7b4>
   dc41e:	2306      	movs	r3, #6
   dc420:	69ea      	ldr	r2, [r5, #28]
   dc422:	3207      	adds	r2, #7
   dc424:	1ad2      	subs	r2, r2, r3
   dc426:	2307      	movs	r3, #7
   dc428:	fb92 f3f3 	sdiv	r3, r2, r3
   dc42c:	e00b      	b.n	dc446 <strftime+0x7da>
   dc42e:	6968      	ldr	r0, [r5, #20]
   dc430:	2800      	cmp	r0, #0
   dc432:	da03      	bge.n	dc43c <strftime+0x7d0>
   dc434:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dc438:	f000 fbc4 	bl	dcbc4 <abs>
   dc43c:	2364      	movs	r3, #100	; 0x64
   dc43e:	fb90 f2f3 	sdiv	r2, r0, r3
   dc442:	fb02 0313 	mls	r3, r2, r3, r0
   dc446:	4a21      	ldr	r2, [pc, #132]	; (dc4cc <strftime+0x860>)
   dc448:	e571      	b.n	dbf2e <strftime+0x2c2>
   dc44a:	696b      	ldr	r3, [r5, #20]
   dc44c:	4a20      	ldr	r2, [pc, #128]	; (dc4d0 <strftime+0x864>)
   dc44e:	4293      	cmp	r3, r2
   dc450:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
   dc454:	da05      	bge.n	dc462 <strftime+0x7f6>
   dc456:	232d      	movs	r3, #45	; 0x2d
   dc458:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   dc45c:	f1cb 0b00 	rsb	fp, fp, #0
   dc460:	e008      	b.n	dc474 <strftime+0x808>
   dc462:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   dc466:	d10d      	bne.n	dc484 <strftime+0x818>
   dc468:	f242 730f 	movw	r3, #9999	; 0x270f
   dc46c:	459b      	cmp	fp, r3
   dc46e:	d911      	bls.n	dc494 <strftime+0x828>
   dc470:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   dc474:	f1b8 0f00 	cmp.w	r8, #0
   dc478:	d001      	beq.n	dc47e <strftime+0x812>
   dc47a:	f108 38ff 	add.w	r8, r8, #4294967295
   dc47e:	f10d 0329 	add.w	r3, sp, #41	; 0x29
   dc482:	e000      	b.n	dc486 <strftime+0x81a>
   dc484:	ab0a      	add	r3, sp, #40	; 0x28
   dc486:	2225      	movs	r2, #37	; 0x25
   dc488:	701a      	strb	r2, [r3, #0]
   dc48a:	f1ba 0f00 	cmp.w	sl, #0
   dc48e:	d108      	bne.n	dc4a2 <strftime+0x836>
   dc490:	1c58      	adds	r0, r3, #1
   dc492:	e009      	b.n	dc4a8 <strftime+0x83c>
   dc494:	f1b8 0f00 	cmp.w	r8, #0
   dc498:	d1f4      	bne.n	dc484 <strftime+0x818>
   dc49a:	2325      	movs	r3, #37	; 0x25
   dc49c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   dc4a0:	ab0a      	add	r3, sp, #40	; 0x28
   dc4a2:	2230      	movs	r2, #48	; 0x30
   dc4a4:	1c98      	adds	r0, r3, #2
   dc4a6:	705a      	strb	r2, [r3, #1]
   dc4a8:	490a      	ldr	r1, [pc, #40]	; (dc4d4 <strftime+0x868>)
   dc4aa:	f7ff fb77 	bl	dbb9c <strcpy>
   dc4ae:	f8cd b000 	str.w	fp, [sp]
   dc4b2:	4643      	mov	r3, r8
   dc4b4:	aa0a      	add	r2, sp, #40	; 0x28
   dc4b6:	1b31      	subs	r1, r6, r4
   dc4b8:	1938      	adds	r0, r7, r4
   dc4ba:	e03e      	b.n	dc53a <strftime+0x8ce>
   dc4bc:	2003d804 	.word	0x2003d804
   dc4c0:	000dd771 	.word	0x000dd771
   dc4c4:	000dd767 	.word	0x000dd767
   dc4c8:	000dd76c 	.word	0x000dd76c
   dc4cc:	000dd74d 	.word	0x000dd74d
   dc4d0:	fffff894 	.word	0xfffff894
   dc4d4:	000dd75e 	.word	0x000dd75e
   dc4d8:	6a2b      	ldr	r3, [r5, #32]
   dc4da:	2b00      	cmp	r3, #0
   dc4dc:	db65      	blt.n	dc5aa <strftime+0x93e>
   dc4de:	f000 f9e9 	bl	dc8b4 <__tz_lock>
   dc4e2:	9b06      	ldr	r3, [sp, #24]
   dc4e4:	b91b      	cbnz	r3, dc4ee <strftime+0x882>
   dc4e6:	f000 f9e7 	bl	dc8b8 <_tzset_unlocked>
   dc4ea:	2301      	movs	r3, #1
   dc4ec:	9306      	str	r3, [sp, #24]
   dc4ee:	f000 fbb1 	bl	dcc54 <__gettzinfo>
   dc4f2:	6a2b      	ldr	r3, [r5, #32]
   dc4f4:	2b00      	cmp	r3, #0
   dc4f6:	bfd4      	ite	le
   dc4f8:	2300      	movle	r3, #0
   dc4fa:	2301      	movgt	r3, #1
   dc4fc:	221c      	movs	r2, #28
   dc4fe:	fb02 0003 	mla	r0, r2, r3, r0
   dc502:	eb07 0a04 	add.w	sl, r7, r4
   dc506:	6a03      	ldr	r3, [r0, #32]
   dc508:	f1c3 0800 	rsb	r8, r3, #0
   dc50c:	f000 f9d3 	bl	dc8b6 <__tz_unlock>
   dc510:	233c      	movs	r3, #60	; 0x3c
   dc512:	fb98 f0f3 	sdiv	r0, r8, r3
   dc516:	9307      	str	r3, [sp, #28]
   dc518:	f000 fc38 	bl	dcd8c <labs>
   dc51c:	9b07      	ldr	r3, [sp, #28]
   dc51e:	fb90 f2f3 	sdiv	r2, r0, r3
   dc522:	ebc4 0b06 	rsb	fp, r4, r6
   dc526:	fb02 0013 	mls	r0, r2, r3, r0
   dc52a:	4a28      	ldr	r2, [pc, #160]	; (dc5cc <strftime+0x960>)
   dc52c:	9000      	str	r0, [sp, #0]
   dc52e:	4659      	mov	r1, fp
   dc530:	4650      	mov	r0, sl
   dc532:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dc536:	fb98 f3f3 	sdiv	r3, r8, r3
   dc53a:	f7fc fc4d 	bl	d8dd8 <sniprintf>
   dc53e:	e4fa      	b.n	dbf36 <strftime+0x2ca>
   dc540:	4404      	add	r4, r0
   dc542:	42a6      	cmp	r6, r4
   dc544:	d831      	bhi.n	dc5aa <strftime+0x93e>
   dc546:	e03b      	b.n	dc5c0 <strftime+0x954>
   dc548:	6a2b      	ldr	r3, [r5, #32]
   dc54a:	2b00      	cmp	r3, #0
   dc54c:	db2d      	blt.n	dc5aa <strftime+0x93e>
   dc54e:	f000 f9b1 	bl	dc8b4 <__tz_lock>
   dc552:	9b06      	ldr	r3, [sp, #24]
   dc554:	b91b      	cbnz	r3, dc55e <strftime+0x8f2>
   dc556:	f000 f9af 	bl	dc8b8 <_tzset_unlocked>
   dc55a:	2301      	movs	r3, #1
   dc55c:	9306      	str	r3, [sp, #24]
   dc55e:	6a2b      	ldr	r3, [r5, #32]
   dc560:	4a1b      	ldr	r2, [pc, #108]	; (dc5d0 <strftime+0x964>)
   dc562:	2b00      	cmp	r3, #0
   dc564:	bfd4      	ite	le
   dc566:	2300      	movle	r3, #0
   dc568:	2301      	movgt	r3, #1
   dc56a:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   dc56e:	4640      	mov	r0, r8
   dc570:	f000 f830 	bl	dc5d4 <strlen>
   dc574:	f108 38ff 	add.w	r8, r8, #4294967295
   dc578:	193b      	adds	r3, r7, r4
   dc57a:	4420      	add	r0, r4
   dc57c:	4284      	cmp	r4, r0
   dc57e:	d00b      	beq.n	dc598 <strftime+0x92c>
   dc580:	9a02      	ldr	r2, [sp, #8]
   dc582:	4294      	cmp	r4, r2
   dc584:	d205      	bcs.n	dc592 <strftime+0x926>
   dc586:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dc58a:	f803 2b01 	strb.w	r2, [r3], #1
   dc58e:	3401      	adds	r4, #1
   dc590:	e7f4      	b.n	dc57c <strftime+0x910>
   dc592:	f000 f990 	bl	dc8b6 <__tz_unlock>
   dc596:	e013      	b.n	dc5c0 <strftime+0x954>
   dc598:	f000 f98d 	bl	dc8b6 <__tz_unlock>
   dc59c:	e005      	b.n	dc5aa <strftime+0x93e>
   dc59e:	9b02      	ldr	r3, [sp, #8]
   dc5a0:	429c      	cmp	r4, r3
   dc5a2:	d20d      	bcs.n	dc5c0 <strftime+0x954>
   dc5a4:	2325      	movs	r3, #37	; 0x25
   dc5a6:	553b      	strb	r3, [r7, r4]
   dc5a8:	3401      	adds	r4, #1
   dc5aa:	f899 3000 	ldrb.w	r3, [r9]
   dc5ae:	b11b      	cbz	r3, dc5b8 <strftime+0x94c>
   dc5b0:	f109 0901 	add.w	r9, r9, #1
   dc5b4:	f7ff bb69 	b.w	dbc8a <strftime+0x1e>
   dc5b8:	b126      	cbz	r6, dc5c4 <strftime+0x958>
   dc5ba:	2300      	movs	r3, #0
   dc5bc:	553b      	strb	r3, [r7, r4]
   dc5be:	e001      	b.n	dc5c4 <strftime+0x958>
   dc5c0:	2000      	movs	r0, #0
   dc5c2:	e000      	b.n	dc5c6 <strftime+0x95a>
   dc5c4:	4620      	mov	r0, r4
   dc5c6:	b013      	add	sp, #76	; 0x4c
   dc5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc5cc:	000dd77b 	.word	0x000dd77b
   dc5d0:	2003d86c 	.word	0x2003d86c

000dc5d4 <strlen>:
   dc5d4:	4603      	mov	r3, r0
   dc5d6:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc5da:	2a00      	cmp	r2, #0
   dc5dc:	d1fb      	bne.n	dc5d6 <strlen+0x2>
   dc5de:	1a18      	subs	r0, r3, r0
   dc5e0:	3801      	subs	r0, #1
   dc5e2:	4770      	bx	lr

000dc5e4 <strncmp>:
   dc5e4:	b530      	push	{r4, r5, lr}
   dc5e6:	b182      	cbz	r2, dc60a <strncmp+0x26>
   dc5e8:	1e45      	subs	r5, r0, #1
   dc5ea:	3901      	subs	r1, #1
   dc5ec:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   dc5f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dc5f4:	42a3      	cmp	r3, r4
   dc5f6:	d106      	bne.n	dc606 <strncmp+0x22>
   dc5f8:	43ec      	mvns	r4, r5
   dc5fa:	4414      	add	r4, r2
   dc5fc:	42e0      	cmn	r0, r4
   dc5fe:	d001      	beq.n	dc604 <strncmp+0x20>
   dc600:	2b00      	cmp	r3, #0
   dc602:	d1f3      	bne.n	dc5ec <strncmp+0x8>
   dc604:	461c      	mov	r4, r3
   dc606:	1b18      	subs	r0, r3, r4
   dc608:	bd30      	pop	{r4, r5, pc}
   dc60a:	4610      	mov	r0, r2
   dc60c:	bd30      	pop	{r4, r5, pc}

000dc60e <strncpy>:
   dc60e:	b510      	push	{r4, lr}
   dc610:	4603      	mov	r3, r0
   dc612:	b142      	cbz	r2, dc626 <strncpy+0x18>
   dc614:	f811 4b01 	ldrb.w	r4, [r1], #1
   dc618:	f803 4b01 	strb.w	r4, [r3], #1
   dc61c:	3a01      	subs	r2, #1
   dc61e:	2c00      	cmp	r4, #0
   dc620:	d1f7      	bne.n	dc612 <strncpy+0x4>
   dc622:	441a      	add	r2, r3
   dc624:	e000      	b.n	dc628 <strncpy+0x1a>
   dc626:	bd10      	pop	{r4, pc}
   dc628:	4293      	cmp	r3, r2
   dc62a:	d002      	beq.n	dc632 <strncpy+0x24>
   dc62c:	f803 4b01 	strb.w	r4, [r3], #1
   dc630:	e7fa      	b.n	dc628 <strncpy+0x1a>
   dc632:	bd10      	pop	{r4, pc}

000dc634 <_strtoul_r>:
   dc634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc638:	4680      	mov	r8, r0
   dc63a:	483c      	ldr	r0, [pc, #240]	; (dc72c <_strtoul_r+0xf8>)
   dc63c:	f8d0 9000 	ldr.w	r9, [r0]
   dc640:	460e      	mov	r6, r1
   dc642:	4635      	mov	r5, r6
   dc644:	f815 4b01 	ldrb.w	r4, [r5], #1
   dc648:	eb09 0004 	add.w	r0, r9, r4
   dc64c:	7840      	ldrb	r0, [r0, #1]
   dc64e:	f000 0008 	and.w	r0, r0, #8
   dc652:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   dc656:	b108      	cbz	r0, dc65c <_strtoul_r+0x28>
   dc658:	462e      	mov	r6, r5
   dc65a:	e7f2      	b.n	dc642 <_strtoul_r+0xe>
   dc65c:	2c2d      	cmp	r4, #45	; 0x2d
   dc65e:	d103      	bne.n	dc668 <_strtoul_r+0x34>
   dc660:	1cb5      	adds	r5, r6, #2
   dc662:	7874      	ldrb	r4, [r6, #1]
   dc664:	2701      	movs	r7, #1
   dc666:	e003      	b.n	dc670 <_strtoul_r+0x3c>
   dc668:	2c2b      	cmp	r4, #43	; 0x2b
   dc66a:	bf04      	itt	eq
   dc66c:	7874      	ldrbeq	r4, [r6, #1]
   dc66e:	1cb5      	addeq	r5, r6, #2
   dc670:	b113      	cbz	r3, dc678 <_strtoul_r+0x44>
   dc672:	2b10      	cmp	r3, #16
   dc674:	d10a      	bne.n	dc68c <_strtoul_r+0x58>
   dc676:	e053      	b.n	dc720 <_strtoul_r+0xec>
   dc678:	2c30      	cmp	r4, #48	; 0x30
   dc67a:	d14f      	bne.n	dc71c <_strtoul_r+0xe8>
   dc67c:	7828      	ldrb	r0, [r5, #0]
   dc67e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dc682:	2858      	cmp	r0, #88	; 0x58
   dc684:	d145      	bne.n	dc712 <_strtoul_r+0xde>
   dc686:	786c      	ldrb	r4, [r5, #1]
   dc688:	2310      	movs	r3, #16
   dc68a:	3502      	adds	r5, #2
   dc68c:	f04f 3cff 	mov.w	ip, #4294967295
   dc690:	2600      	movs	r6, #0
   dc692:	fbbc fcf3 	udiv	ip, ip, r3
   dc696:	fb03 fa0c 	mul.w	sl, r3, ip
   dc69a:	ea6f 0a0a 	mvn.w	sl, sl
   dc69e:	4630      	mov	r0, r6
   dc6a0:	eb09 0e04 	add.w	lr, r9, r4
   dc6a4:	f89e e001 	ldrb.w	lr, [lr, #1]
   dc6a8:	f01e 0f04 	tst.w	lr, #4
   dc6ac:	d001      	beq.n	dc6b2 <_strtoul_r+0x7e>
   dc6ae:	3c30      	subs	r4, #48	; 0x30
   dc6b0:	e00b      	b.n	dc6ca <_strtoul_r+0x96>
   dc6b2:	f01e 0e03 	ands.w	lr, lr, #3
   dc6b6:	d01a      	beq.n	dc6ee <_strtoul_r+0xba>
   dc6b8:	f1be 0f01 	cmp.w	lr, #1
   dc6bc:	bf0c      	ite	eq
   dc6be:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dc6c2:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dc6c6:	ebce 0404 	rsb	r4, lr, r4
   dc6ca:	42a3      	cmp	r3, r4
   dc6cc:	dd0f      	ble.n	dc6ee <_strtoul_r+0xba>
   dc6ce:	2e00      	cmp	r6, #0
   dc6d0:	db08      	blt.n	dc6e4 <_strtoul_r+0xb0>
   dc6d2:	4560      	cmp	r0, ip
   dc6d4:	d806      	bhi.n	dc6e4 <_strtoul_r+0xb0>
   dc6d6:	d101      	bne.n	dc6dc <_strtoul_r+0xa8>
   dc6d8:	4554      	cmp	r4, sl
   dc6da:	dc03      	bgt.n	dc6e4 <_strtoul_r+0xb0>
   dc6dc:	fb03 4000 	mla	r0, r3, r0, r4
   dc6e0:	2601      	movs	r6, #1
   dc6e2:	e001      	b.n	dc6e8 <_strtoul_r+0xb4>
   dc6e4:	f04f 36ff 	mov.w	r6, #4294967295
   dc6e8:	f815 4b01 	ldrb.w	r4, [r5], #1
   dc6ec:	e7d8      	b.n	dc6a0 <_strtoul_r+0x6c>
   dc6ee:	2e00      	cmp	r6, #0
   dc6f0:	da07      	bge.n	dc702 <_strtoul_r+0xce>
   dc6f2:	2322      	movs	r3, #34	; 0x22
   dc6f4:	f8c8 3000 	str.w	r3, [r8]
   dc6f8:	f04f 30ff 	mov.w	r0, #4294967295
   dc6fc:	b92a      	cbnz	r2, dc70a <_strtoul_r+0xd6>
   dc6fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc702:	b107      	cbz	r7, dc706 <_strtoul_r+0xd2>
   dc704:	4240      	negs	r0, r0
   dc706:	b172      	cbz	r2, dc726 <_strtoul_r+0xf2>
   dc708:	b106      	cbz	r6, dc70c <_strtoul_r+0xd8>
   dc70a:	1e69      	subs	r1, r5, #1
   dc70c:	6011      	str	r1, [r2, #0]
   dc70e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc712:	2430      	movs	r4, #48	; 0x30
   dc714:	2b00      	cmp	r3, #0
   dc716:	d1b9      	bne.n	dc68c <_strtoul_r+0x58>
   dc718:	2308      	movs	r3, #8
   dc71a:	e7b7      	b.n	dc68c <_strtoul_r+0x58>
   dc71c:	230a      	movs	r3, #10
   dc71e:	e7b5      	b.n	dc68c <_strtoul_r+0x58>
   dc720:	2c30      	cmp	r4, #48	; 0x30
   dc722:	d0ab      	beq.n	dc67c <_strtoul_r+0x48>
   dc724:	e7b2      	b.n	dc68c <_strtoul_r+0x58>
   dc726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc72a:	bf00      	nop
   dc72c:	2003d804 	.word	0x2003d804

000dc730 <strtoul>:
   dc730:	4613      	mov	r3, r2
   dc732:	460a      	mov	r2, r1
   dc734:	4601      	mov	r1, r0
   dc736:	4802      	ldr	r0, [pc, #8]	; (dc740 <strtoul+0x10>)
   dc738:	6800      	ldr	r0, [r0, #0]
   dc73a:	f7ff bf7b 	b.w	dc634 <_strtoul_r>
   dc73e:	bf00      	nop
   dc740:	2003d868 	.word	0x2003d868

000dc744 <__get_current_time_locale>:
   dc744:	4b04      	ldr	r3, [pc, #16]	; (dc758 <__get_current_time_locale+0x14>)
   dc746:	4a05      	ldr	r2, [pc, #20]	; (dc75c <__get_current_time_locale+0x18>)
   dc748:	6818      	ldr	r0, [r3, #0]
   dc74a:	4b05      	ldr	r3, [pc, #20]	; (dc760 <__get_current_time_locale+0x1c>)
   dc74c:	2800      	cmp	r0, #0
   dc74e:	bf14      	ite	ne
   dc750:	4610      	movne	r0, r2
   dc752:	4618      	moveq	r0, r3
   dc754:	4770      	bx	lr
   dc756:	bf00      	nop
   dc758:	2003e4a4 	.word	0x2003e4a4
   dc75c:	2003e4a8 	.word	0x2003e4a8
   dc760:	000dd8b8 	.word	0x000dd8b8

000dc764 <__tzcalc_limits>:
   dc764:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc768:	4604      	mov	r4, r0
   dc76a:	f000 fa73 	bl	dcc54 <__gettzinfo>
   dc76e:	f240 73b1 	movw	r3, #1969	; 0x7b1
   dc772:	429c      	cmp	r4, r3
   dc774:	f340 8096 	ble.w	dc8a4 <__tzcalc_limits+0x140>
   dc778:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   dc77c:	18e3      	adds	r3, r4, r3
   dc77e:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   dc782:	109b      	asrs	r3, r3, #2
   dc784:	f240 156d 	movw	r5, #365	; 0x16d
   dc788:	fb05 3502 	mla	r5, r5, r2, r3
   dc78c:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   dc790:	f06f 0363 	mvn.w	r3, #99	; 0x63
   dc794:	fb92 f3f3 	sdiv	r3, r2, r3
   dc798:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   dc79c:	442b      	add	r3, r5
   dc79e:	18a5      	adds	r5, r4, r2
   dc7a0:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dc7a4:	fb95 f5f2 	sdiv	r5, r5, r2
   dc7a8:	441d      	add	r5, r3
   dc7aa:	2364      	movs	r3, #100	; 0x64
   dc7ac:	fb94 f7f2 	sdiv	r7, r4, r2
   dc7b0:	fb94 f6f3 	sdiv	r6, r4, r3
   dc7b4:	fb02 4717 	mls	r7, r2, r7, r4
   dc7b8:	fb03 4616 	mls	r6, r3, r6, r4
   dc7bc:	f100 0338 	add.w	r3, r0, #56	; 0x38
   dc7c0:	fab7 fe87 	clz	lr, r7
   dc7c4:	9301      	str	r3, [sp, #4]
   dc7c6:	f004 0303 	and.w	r3, r4, #3
   dc7ca:	6044      	str	r4, [r0, #4]
   dc7cc:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   dc7d0:	4601      	mov	r1, r0
   dc7d2:	9300      	str	r3, [sp, #0]
   dc7d4:	f04f 0c07 	mov.w	ip, #7
   dc7d8:	7a0b      	ldrb	r3, [r1, #8]
   dc7da:	2b4a      	cmp	r3, #74	; 0x4a
   dc7dc:	d10e      	bne.n	dc7fc <__tzcalc_limits+0x98>
   dc7de:	694b      	ldr	r3, [r1, #20]
   dc7e0:	9a00      	ldr	r2, [sp, #0]
   dc7e2:	18ec      	adds	r4, r5, r3
   dc7e4:	b902      	cbnz	r2, dc7e8 <__tzcalc_limits+0x84>
   dc7e6:	b906      	cbnz	r6, dc7ea <__tzcalc_limits+0x86>
   dc7e8:	b927      	cbnz	r7, dc7f4 <__tzcalc_limits+0x90>
   dc7ea:	2b3b      	cmp	r3, #59	; 0x3b
   dc7ec:	bfd4      	ite	le
   dc7ee:	2300      	movle	r3, #0
   dc7f0:	2301      	movgt	r3, #1
   dc7f2:	e000      	b.n	dc7f6 <__tzcalc_limits+0x92>
   dc7f4:	2300      	movs	r3, #0
   dc7f6:	4423      	add	r3, r4
   dc7f8:	3b01      	subs	r3, #1
   dc7fa:	e03f      	b.n	dc87c <__tzcalc_limits+0x118>
   dc7fc:	2b44      	cmp	r3, #68	; 0x44
   dc7fe:	d102      	bne.n	dc806 <__tzcalc_limits+0xa2>
   dc800:	694b      	ldr	r3, [r1, #20]
   dc802:	442b      	add	r3, r5
   dc804:	e03a      	b.n	dc87c <__tzcalc_limits+0x118>
   dc806:	9b00      	ldr	r3, [sp, #0]
   dc808:	b92b      	cbnz	r3, dc816 <__tzcalc_limits+0xb2>
   dc80a:	2e00      	cmp	r6, #0
   dc80c:	bf0c      	ite	eq
   dc80e:	46f0      	moveq	r8, lr
   dc810:	f04f 0801 	movne.w	r8, #1
   dc814:	e000      	b.n	dc818 <__tzcalc_limits+0xb4>
   dc816:	46f0      	mov	r8, lr
   dc818:	4b24      	ldr	r3, [pc, #144]	; (dc8ac <__tzcalc_limits+0x148>)
   dc81a:	68cc      	ldr	r4, [r1, #12]
   dc81c:	2230      	movs	r2, #48	; 0x30
   dc81e:	fb02 3808 	mla	r8, r2, r8, r3
   dc822:	f1a8 0a04 	sub.w	sl, r8, #4
   dc826:	46a9      	mov	r9, r5
   dc828:	2301      	movs	r3, #1
   dc82a:	42a3      	cmp	r3, r4
   dc82c:	da04      	bge.n	dc838 <__tzcalc_limits+0xd4>
   dc82e:	f85a bf04 	ldr.w	fp, [sl, #4]!
   dc832:	3301      	adds	r3, #1
   dc834:	44d9      	add	r9, fp
   dc836:	e7f8      	b.n	dc82a <__tzcalc_limits+0xc6>
   dc838:	f109 0304 	add.w	r3, r9, #4
   dc83c:	fb93 fbfc 	sdiv	fp, r3, ip
   dc840:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   dc844:	2c01      	cmp	r4, #1
   dc846:	ebca 0a03 	rsb	sl, sl, r3
   dc84a:	694b      	ldr	r3, [r1, #20]
   dc84c:	bfb8      	it	lt
   dc84e:	2401      	movlt	r4, #1
   dc850:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   dc854:	ebb3 0a0a 	subs.w	sl, r3, sl
   dc858:	690b      	ldr	r3, [r1, #16]
   dc85a:	f104 34ff 	add.w	r4, r4, #4294967295
   dc85e:	f103 33ff 	add.w	r3, r3, #4294967295
   dc862:	bf48      	it	mi
   dc864:	f10a 0a07 	addmi.w	sl, sl, #7
   dc868:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dc86c:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   dc870:	4453      	add	r3, sl
   dc872:	42a3      	cmp	r3, r4
   dc874:	db01      	blt.n	dc87a <__tzcalc_limits+0x116>
   dc876:	3b07      	subs	r3, #7
   dc878:	e7fb      	b.n	dc872 <__tzcalc_limits+0x10e>
   dc87a:	444b      	add	r3, r9
   dc87c:	698c      	ldr	r4, [r1, #24]
   dc87e:	4a0c      	ldr	r2, [pc, #48]	; (dc8b0 <__tzcalc_limits+0x14c>)
   dc880:	fb02 4303 	mla	r3, r2, r3, r4
   dc884:	6a0c      	ldr	r4, [r1, #32]
   dc886:	4423      	add	r3, r4
   dc888:	f841 3f1c 	str.w	r3, [r1, #28]!
   dc88c:	9b01      	ldr	r3, [sp, #4]
   dc88e:	4299      	cmp	r1, r3
   dc890:	d1a2      	bne.n	dc7d8 <__tzcalc_limits+0x74>
   dc892:	69c3      	ldr	r3, [r0, #28]
   dc894:	6b82      	ldr	r2, [r0, #56]	; 0x38
   dc896:	4293      	cmp	r3, r2
   dc898:	bfac      	ite	ge
   dc89a:	2300      	movge	r3, #0
   dc89c:	2301      	movlt	r3, #1
   dc89e:	6003      	str	r3, [r0, #0]
   dc8a0:	2001      	movs	r0, #1
   dc8a2:	e000      	b.n	dc8a6 <__tzcalc_limits+0x142>
   dc8a4:	2000      	movs	r0, #0
   dc8a6:	b003      	add	sp, #12
   dc8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc8ac:	000dd6cc 	.word	0x000dd6cc
   dc8b0:	00015180 	.word	0x00015180

000dc8b4 <__tz_lock>:
   dc8b4:	4770      	bx	lr

000dc8b6 <__tz_unlock>:
   dc8b6:	4770      	bx	lr

000dc8b8 <_tzset_unlocked>:
   dc8b8:	4b01      	ldr	r3, [pc, #4]	; (dc8c0 <_tzset_unlocked+0x8>)
   dc8ba:	6818      	ldr	r0, [r3, #0]
   dc8bc:	f000 b802 	b.w	dc8c4 <_tzset_unlocked_r>
   dc8c0:	2003d868 	.word	0x2003d868

000dc8c4 <_tzset_unlocked_r>:
   dc8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc8c8:	b08d      	sub	sp, #52	; 0x34
   dc8ca:	4607      	mov	r7, r0
   dc8cc:	f000 f9c2 	bl	dcc54 <__gettzinfo>
   dc8d0:	49b0      	ldr	r1, [pc, #704]	; (dcb94 <_tzset_unlocked_r+0x2d0>)
   dc8d2:	4eb1      	ldr	r6, [pc, #708]	; (dcb98 <_tzset_unlocked_r+0x2d4>)
   dc8d4:	4604      	mov	r4, r0
   dc8d6:	4638      	mov	r0, r7
   dc8d8:	f000 f9b4 	bl	dcc44 <_getenv_r>
   dc8dc:	4605      	mov	r5, r0
   dc8de:	b960      	cbnz	r0, dc8fa <_tzset_unlocked_r+0x36>
   dc8e0:	4bae      	ldr	r3, [pc, #696]	; (dcb9c <_tzset_unlocked_r+0x2d8>)
   dc8e2:	4aaf      	ldr	r2, [pc, #700]	; (dcba0 <_tzset_unlocked_r+0x2dc>)
   dc8e4:	6018      	str	r0, [r3, #0]
   dc8e6:	4baf      	ldr	r3, [pc, #700]	; (dcba4 <_tzset_unlocked_r+0x2e0>)
   dc8e8:	6018      	str	r0, [r3, #0]
   dc8ea:	4baf      	ldr	r3, [pc, #700]	; (dcba8 <_tzset_unlocked_r+0x2e4>)
   dc8ec:	6830      	ldr	r0, [r6, #0]
   dc8ee:	601a      	str	r2, [r3, #0]
   dc8f0:	605a      	str	r2, [r3, #4]
   dc8f2:	f7fc fa41 	bl	d8d78 <free>
   dc8f6:	6035      	str	r5, [r6, #0]
   dc8f8:	e148      	b.n	dcb8c <_tzset_unlocked_r+0x2c8>
   dc8fa:	6831      	ldr	r1, [r6, #0]
   dc8fc:	b979      	cbnz	r1, dc91e <_tzset_unlocked_r+0x5a>
   dc8fe:	6830      	ldr	r0, [r6, #0]
   dc900:	f7fc fa3a 	bl	d8d78 <free>
   dc904:	4628      	mov	r0, r5
   dc906:	f7ff fe65 	bl	dc5d4 <strlen>
   dc90a:	1c41      	adds	r1, r0, #1
   dc90c:	4638      	mov	r0, r7
   dc90e:	f7fc fa73 	bl	d8df8 <_malloc_r>
   dc912:	6030      	str	r0, [r6, #0]
   dc914:	b148      	cbz	r0, dc92a <_tzset_unlocked_r+0x66>
   dc916:	4629      	mov	r1, r5
   dc918:	f7ff f940 	bl	dbb9c <strcpy>
   dc91c:	e005      	b.n	dc92a <_tzset_unlocked_r+0x66>
   dc91e:	f7ff f933 	bl	dbb88 <strcmp>
   dc922:	2800      	cmp	r0, #0
   dc924:	f000 8132 	beq.w	dcb8c <_tzset_unlocked_r+0x2c8>
   dc928:	e7e9      	b.n	dc8fe <_tzset_unlocked_r+0x3a>
   dc92a:	782b      	ldrb	r3, [r5, #0]
   dc92c:	4a9f      	ldr	r2, [pc, #636]	; (dcbac <_tzset_unlocked_r+0x2e8>)
   dc92e:	49a0      	ldr	r1, [pc, #640]	; (dcbb0 <_tzset_unlocked_r+0x2ec>)
   dc930:	2b3a      	cmp	r3, #58	; 0x3a
   dc932:	bf08      	it	eq
   dc934:	3501      	addeq	r5, #1
   dc936:	ae0a      	add	r6, sp, #40	; 0x28
   dc938:	4633      	mov	r3, r6
   dc93a:	4628      	mov	r0, r5
   dc93c:	f7fc fa3c 	bl	d8db8 <siscanf>
   dc940:	2800      	cmp	r0, #0
   dc942:	f340 8123 	ble.w	dcb8c <_tzset_unlocked_r+0x2c8>
   dc946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc948:	18ef      	adds	r7, r5, r3
   dc94a:	5ceb      	ldrb	r3, [r5, r3]
   dc94c:	2b2d      	cmp	r3, #45	; 0x2d
   dc94e:	d103      	bne.n	dc958 <_tzset_unlocked_r+0x94>
   dc950:	3701      	adds	r7, #1
   dc952:	f04f 35ff 	mov.w	r5, #4294967295
   dc956:	e003      	b.n	dc960 <_tzset_unlocked_r+0x9c>
   dc958:	2b2b      	cmp	r3, #43	; 0x2b
   dc95a:	bf08      	it	eq
   dc95c:	3701      	addeq	r7, #1
   dc95e:	2501      	movs	r5, #1
   dc960:	f10d 0a20 	add.w	sl, sp, #32
   dc964:	f10d 0b1e 	add.w	fp, sp, #30
   dc968:	f04f 0800 	mov.w	r8, #0
   dc96c:	9603      	str	r6, [sp, #12]
   dc96e:	f8cd a008 	str.w	sl, [sp, #8]
   dc972:	9601      	str	r6, [sp, #4]
   dc974:	f8cd b000 	str.w	fp, [sp]
   dc978:	4633      	mov	r3, r6
   dc97a:	aa07      	add	r2, sp, #28
   dc97c:	498d      	ldr	r1, [pc, #564]	; (dcbb4 <_tzset_unlocked_r+0x2f0>)
   dc97e:	f8ad 801e 	strh.w	r8, [sp, #30]
   dc982:	4638      	mov	r0, r7
   dc984:	f8ad 8020 	strh.w	r8, [sp, #32]
   dc988:	f7fc fa16 	bl	d8db8 <siscanf>
   dc98c:	4540      	cmp	r0, r8
   dc98e:	f340 80fd 	ble.w	dcb8c <_tzset_unlocked_r+0x2c8>
   dc992:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dc996:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dc99a:	f8df 9224 	ldr.w	r9, [pc, #548]	; dcbc0 <_tzset_unlocked_r+0x2fc>
   dc99e:	213c      	movs	r1, #60	; 0x3c
   dc9a0:	fb01 3302 	mla	r3, r1, r2, r3
   dc9a4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dc9a8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dc9ac:	fb01 3302 	mla	r3, r1, r2, r3
   dc9b0:	435d      	muls	r5, r3
   dc9b2:	6225      	str	r5, [r4, #32]
   dc9b4:	4d7c      	ldr	r5, [pc, #496]	; (dcba8 <_tzset_unlocked_r+0x2e4>)
   dc9b6:	4b7d      	ldr	r3, [pc, #500]	; (dcbac <_tzset_unlocked_r+0x2e8>)
   dc9b8:	602b      	str	r3, [r5, #0]
   dc9ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc9bc:	497c      	ldr	r1, [pc, #496]	; (dcbb0 <_tzset_unlocked_r+0x2ec>)
   dc9be:	441f      	add	r7, r3
   dc9c0:	464a      	mov	r2, r9
   dc9c2:	4633      	mov	r3, r6
   dc9c4:	4638      	mov	r0, r7
   dc9c6:	f7fc f9f7 	bl	d8db8 <siscanf>
   dc9ca:	4540      	cmp	r0, r8
   dc9cc:	dc08      	bgt.n	dc9e0 <_tzset_unlocked_r+0x11c>
   dc9ce:	682b      	ldr	r3, [r5, #0]
   dc9d0:	606b      	str	r3, [r5, #4]
   dc9d2:	4b72      	ldr	r3, [pc, #456]	; (dcb9c <_tzset_unlocked_r+0x2d8>)
   dc9d4:	6a22      	ldr	r2, [r4, #32]
   dc9d6:	601a      	str	r2, [r3, #0]
   dc9d8:	4b72      	ldr	r3, [pc, #456]	; (dcba4 <_tzset_unlocked_r+0x2e0>)
   dc9da:	f8c3 8000 	str.w	r8, [r3]
   dc9de:	e0d5      	b.n	dcb8c <_tzset_unlocked_r+0x2c8>
   dc9e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc9e2:	f8c5 9004 	str.w	r9, [r5, #4]
   dc9e6:	18fd      	adds	r5, r7, r3
   dc9e8:	5cfb      	ldrb	r3, [r7, r3]
   dc9ea:	2b2d      	cmp	r3, #45	; 0x2d
   dc9ec:	d103      	bne.n	dc9f6 <_tzset_unlocked_r+0x132>
   dc9ee:	3501      	adds	r5, #1
   dc9f0:	f04f 37ff 	mov.w	r7, #4294967295
   dc9f4:	e003      	b.n	dc9fe <_tzset_unlocked_r+0x13a>
   dc9f6:	2b2b      	cmp	r3, #43	; 0x2b
   dc9f8:	bf08      	it	eq
   dc9fa:	3501      	addeq	r5, #1
   dc9fc:	2701      	movs	r7, #1
   dc9fe:	2300      	movs	r3, #0
   dca00:	f8ad 301c 	strh.w	r3, [sp, #28]
   dca04:	f8ad 301e 	strh.w	r3, [sp, #30]
   dca08:	f8ad 3020 	strh.w	r3, [sp, #32]
   dca0c:	930a      	str	r3, [sp, #40]	; 0x28
   dca0e:	9603      	str	r6, [sp, #12]
   dca10:	f8cd a008 	str.w	sl, [sp, #8]
   dca14:	9601      	str	r6, [sp, #4]
   dca16:	f8cd b000 	str.w	fp, [sp]
   dca1a:	4633      	mov	r3, r6
   dca1c:	aa07      	add	r2, sp, #28
   dca1e:	4965      	ldr	r1, [pc, #404]	; (dcbb4 <_tzset_unlocked_r+0x2f0>)
   dca20:	4628      	mov	r0, r5
   dca22:	f7fc f9c9 	bl	d8db8 <siscanf>
   dca26:	2800      	cmp	r0, #0
   dca28:	dc04      	bgt.n	dca34 <_tzset_unlocked_r+0x170>
   dca2a:	6a23      	ldr	r3, [r4, #32]
   dca2c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   dca30:	63e3      	str	r3, [r4, #60]	; 0x3c
   dca32:	e00e      	b.n	dca52 <_tzset_unlocked_r+0x18e>
   dca34:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dca38:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dca3c:	213c      	movs	r1, #60	; 0x3c
   dca3e:	fb01 3302 	mla	r3, r1, r2, r3
   dca42:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dca46:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dca4a:	fb01 3302 	mla	r3, r1, r2, r3
   dca4e:	435f      	muls	r7, r3
   dca50:	63e7      	str	r7, [r4, #60]	; 0x3c
   dca52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dca54:	4627      	mov	r7, r4
   dca56:	441d      	add	r5, r3
   dca58:	f04f 0900 	mov.w	r9, #0
   dca5c:	782b      	ldrb	r3, [r5, #0]
   dca5e:	2b2c      	cmp	r3, #44	; 0x2c
   dca60:	bf08      	it	eq
   dca62:	3501      	addeq	r5, #1
   dca64:	f895 8000 	ldrb.w	r8, [r5]
   dca68:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   dca6c:	d126      	bne.n	dcabc <_tzset_unlocked_r+0x1f8>
   dca6e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   dca72:	9302      	str	r3, [sp, #8]
   dca74:	ab09      	add	r3, sp, #36	; 0x24
   dca76:	9300      	str	r3, [sp, #0]
   dca78:	9603      	str	r6, [sp, #12]
   dca7a:	9601      	str	r6, [sp, #4]
   dca7c:	4633      	mov	r3, r6
   dca7e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   dca82:	494d      	ldr	r1, [pc, #308]	; (dcbb8 <_tzset_unlocked_r+0x2f4>)
   dca84:	4628      	mov	r0, r5
   dca86:	f7fc f997 	bl	d8db8 <siscanf>
   dca8a:	2803      	cmp	r0, #3
   dca8c:	d17e      	bne.n	dcb8c <_tzset_unlocked_r+0x2c8>
   dca8e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   dca92:	1e4b      	subs	r3, r1, #1
   dca94:	2b0b      	cmp	r3, #11
   dca96:	d879      	bhi.n	dcb8c <_tzset_unlocked_r+0x2c8>
   dca98:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   dca9c:	1e53      	subs	r3, r2, #1
   dca9e:	2b04      	cmp	r3, #4
   dcaa0:	d874      	bhi.n	dcb8c <_tzset_unlocked_r+0x2c8>
   dcaa2:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   dcaa6:	2b06      	cmp	r3, #6
   dcaa8:	d870      	bhi.n	dcb8c <_tzset_unlocked_r+0x2c8>
   dcaaa:	f887 8008 	strb.w	r8, [r7, #8]
   dcaae:	60f9      	str	r1, [r7, #12]
   dcab0:	613a      	str	r2, [r7, #16]
   dcab2:	617b      	str	r3, [r7, #20]
   dcab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dcab6:	eb05 0803 	add.w	r8, r5, r3
   dcaba:	e02a      	b.n	dcb12 <_tzset_unlocked_r+0x24e>
   dcabc:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   dcac0:	bf06      	itte	eq
   dcac2:	3501      	addeq	r5, #1
   dcac4:	4643      	moveq	r3, r8
   dcac6:	2344      	movne	r3, #68	; 0x44
   dcac8:	220a      	movs	r2, #10
   dcaca:	a90b      	add	r1, sp, #44	; 0x2c
   dcacc:	4628      	mov	r0, r5
   dcace:	9305      	str	r3, [sp, #20]
   dcad0:	f7ff fe2e 	bl	dc730 <strtoul>
   dcad4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   dcad8:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   dcadc:	4545      	cmp	r5, r8
   dcade:	9b05      	ldr	r3, [sp, #20]
   dcae0:	d114      	bne.n	dcb0c <_tzset_unlocked_r+0x248>
   dcae2:	234d      	movs	r3, #77	; 0x4d
   dcae4:	f1b9 0f00 	cmp.w	r9, #0
   dcae8:	d107      	bne.n	dcafa <_tzset_unlocked_r+0x236>
   dcaea:	7223      	strb	r3, [r4, #8]
   dcaec:	2303      	movs	r3, #3
   dcaee:	60e3      	str	r3, [r4, #12]
   dcaf0:	2302      	movs	r3, #2
   dcaf2:	6123      	str	r3, [r4, #16]
   dcaf4:	f8c4 9014 	str.w	r9, [r4, #20]
   dcaf8:	e00b      	b.n	dcb12 <_tzset_unlocked_r+0x24e>
   dcafa:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   dcafe:	230b      	movs	r3, #11
   dcb00:	62a3      	str	r3, [r4, #40]	; 0x28
   dcb02:	2301      	movs	r3, #1
   dcb04:	62e3      	str	r3, [r4, #44]	; 0x2c
   dcb06:	2300      	movs	r3, #0
   dcb08:	6323      	str	r3, [r4, #48]	; 0x30
   dcb0a:	e002      	b.n	dcb12 <_tzset_unlocked_r+0x24e>
   dcb0c:	b280      	uxth	r0, r0
   dcb0e:	723b      	strb	r3, [r7, #8]
   dcb10:	6178      	str	r0, [r7, #20]
   dcb12:	2302      	movs	r3, #2
   dcb14:	f8ad 301c 	strh.w	r3, [sp, #28]
   dcb18:	2300      	movs	r3, #0
   dcb1a:	f8ad 301e 	strh.w	r3, [sp, #30]
   dcb1e:	f8ad 3020 	strh.w	r3, [sp, #32]
   dcb22:	930a      	str	r3, [sp, #40]	; 0x28
   dcb24:	f898 3000 	ldrb.w	r3, [r8]
   dcb28:	2b2f      	cmp	r3, #47	; 0x2f
   dcb2a:	d10b      	bne.n	dcb44 <_tzset_unlocked_r+0x280>
   dcb2c:	9603      	str	r6, [sp, #12]
   dcb2e:	f8cd a008 	str.w	sl, [sp, #8]
   dcb32:	9601      	str	r6, [sp, #4]
   dcb34:	f8cd b000 	str.w	fp, [sp]
   dcb38:	4633      	mov	r3, r6
   dcb3a:	aa07      	add	r2, sp, #28
   dcb3c:	491f      	ldr	r1, [pc, #124]	; (dcbbc <_tzset_unlocked_r+0x2f8>)
   dcb3e:	4640      	mov	r0, r8
   dcb40:	f7fc f93a 	bl	d8db8 <siscanf>
   dcb44:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dcb48:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dcb4c:	213c      	movs	r1, #60	; 0x3c
   dcb4e:	fb01 3302 	mla	r3, r1, r2, r3
   dcb52:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dcb56:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dcb5a:	fb01 3302 	mla	r3, r1, r2, r3
   dcb5e:	61bb      	str	r3, [r7, #24]
   dcb60:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   dcb62:	f109 0901 	add.w	r9, r9, #1
   dcb66:	f1b9 0f02 	cmp.w	r9, #2
   dcb6a:	4445      	add	r5, r8
   dcb6c:	f107 071c 	add.w	r7, r7, #28
   dcb70:	f47f af74 	bne.w	dca5c <_tzset_unlocked_r+0x198>
   dcb74:	6860      	ldr	r0, [r4, #4]
   dcb76:	f7ff fdf5 	bl	dc764 <__tzcalc_limits>
   dcb7a:	4b08      	ldr	r3, [pc, #32]	; (dcb9c <_tzset_unlocked_r+0x2d8>)
   dcb7c:	6a22      	ldr	r2, [r4, #32]
   dcb7e:	601a      	str	r2, [r3, #0]
   dcb80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   dcb82:	1a9b      	subs	r3, r3, r2
   dcb84:	4a07      	ldr	r2, [pc, #28]	; (dcba4 <_tzset_unlocked_r+0x2e0>)
   dcb86:	bf18      	it	ne
   dcb88:	2301      	movne	r3, #1
   dcb8a:	6013      	str	r3, [r2, #0]
   dcb8c:	b00d      	add	sp, #52	; 0x34
   dcb8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dcb92:	bf00      	nop
   dcb94:	000dd9b4 	.word	0x000dd9b4
   dcb98:	2003e5bc 	.word	0x2003e5bc
   dcb9c:	2003e5c4 	.word	0x2003e5c4
   dcba0:	000dd9b7 	.word	0x000dd9b7
   dcba4:	2003e5c0 	.word	0x2003e5c0
   dcba8:	2003d86c 	.word	0x2003d86c
   dcbac:	2003e5af 	.word	0x2003e5af
   dcbb0:	000dd9bb 	.word	0x000dd9bb
   dcbb4:	000dd9de 	.word	0x000dd9de
   dcbb8:	000dd9ca 	.word	0x000dd9ca
   dcbbc:	000dd9dd 	.word	0x000dd9dd
   dcbc0:	2003e5a4 	.word	0x2003e5a4

000dcbc4 <abs>:
   dcbc4:	2800      	cmp	r0, #0
   dcbc6:	bfb8      	it	lt
   dcbc8:	4240      	neglt	r0, r0
   dcbca:	4770      	bx	lr

000dcbcc <_findenv_r>:
   dcbcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dcbd0:	4607      	mov	r7, r0
   dcbd2:	468b      	mov	fp, r1
   dcbd4:	4690      	mov	r8, r2
   dcbd6:	f000 f8dd 	bl	dcd94 <__env_lock>
   dcbda:	4b19      	ldr	r3, [pc, #100]	; (dcc40 <_findenv_r+0x74>)
   dcbdc:	681d      	ldr	r5, [r3, #0]
   dcbde:	469a      	mov	sl, r3
   dcbe0:	b13d      	cbz	r5, dcbf2 <_findenv_r+0x26>
   dcbe2:	465c      	mov	r4, fp
   dcbe4:	4623      	mov	r3, r4
   dcbe6:	f813 2b01 	ldrb.w	r2, [r3], #1
   dcbea:	b142      	cbz	r2, dcbfe <_findenv_r+0x32>
   dcbec:	2a3d      	cmp	r2, #61	; 0x3d
   dcbee:	461c      	mov	r4, r3
   dcbf0:	d1f8      	bne.n	dcbe4 <_findenv_r+0x18>
   dcbf2:	4638      	mov	r0, r7
   dcbf4:	f000 f8cf 	bl	dcd96 <__env_unlock>
   dcbf8:	2000      	movs	r0, #0
   dcbfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dcbfe:	ebcb 0404 	rsb	r4, fp, r4
   dcc02:	46a9      	mov	r9, r5
   dcc04:	f859 0b04 	ldr.w	r0, [r9], #4
   dcc08:	2800      	cmp	r0, #0
   dcc0a:	d0f2      	beq.n	dcbf2 <_findenv_r+0x26>
   dcc0c:	4622      	mov	r2, r4
   dcc0e:	4659      	mov	r1, fp
   dcc10:	f7ff fce8 	bl	dc5e4 <strncmp>
   dcc14:	b988      	cbnz	r0, dcc3a <_findenv_r+0x6e>
   dcc16:	f859 3c04 	ldr.w	r3, [r9, #-4]
   dcc1a:	191e      	adds	r6, r3, r4
   dcc1c:	5d1b      	ldrb	r3, [r3, r4]
   dcc1e:	2b3d      	cmp	r3, #61	; 0x3d
   dcc20:	d10b      	bne.n	dcc3a <_findenv_r+0x6e>
   dcc22:	f8da 3000 	ldr.w	r3, [sl]
   dcc26:	1aed      	subs	r5, r5, r3
   dcc28:	10ad      	asrs	r5, r5, #2
   dcc2a:	4638      	mov	r0, r7
   dcc2c:	f8c8 5000 	str.w	r5, [r8]
   dcc30:	f000 f8b1 	bl	dcd96 <__env_unlock>
   dcc34:	1c70      	adds	r0, r6, #1
   dcc36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dcc3a:	464d      	mov	r5, r9
   dcc3c:	e7e1      	b.n	dcc02 <_findenv_r+0x36>
   dcc3e:	bf00      	nop
   dcc40:	2003d8b4 	.word	0x2003d8b4

000dcc44 <_getenv_r>:
   dcc44:	b507      	push	{r0, r1, r2, lr}
   dcc46:	aa01      	add	r2, sp, #4
   dcc48:	f7ff ffc0 	bl	dcbcc <_findenv_r>
   dcc4c:	b003      	add	sp, #12
   dcc4e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dcc54 <__gettzinfo>:
   dcc54:	4800      	ldr	r0, [pc, #0]	; (dcc58 <__gettzinfo+0x4>)
   dcc56:	4770      	bx	lr
   dcc58:	2003d874 	.word	0x2003d874

000dcc5c <gmtime_r>:
   dcc5c:	6802      	ldr	r2, [r0, #0]
   dcc5e:	4b47      	ldr	r3, [pc, #284]	; (dcd7c <gmtime_r+0x120>)
   dcc60:	b5f0      	push	{r4, r5, r6, r7, lr}
   dcc62:	fb92 f4f3 	sdiv	r4, r2, r3
   dcc66:	fb03 2214 	mls	r2, r3, r4, r2
   dcc6a:	2a00      	cmp	r2, #0
   dcc6c:	bfbc      	itt	lt
   dcc6e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   dcc72:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   dcc76:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   dcc7a:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   dcc7e:	fb92 f3f0 	sdiv	r3, r2, r0
   dcc82:	fb00 2213 	mls	r2, r0, r3, r2
   dcc86:	f04f 003c 	mov.w	r0, #60	; 0x3c
   dcc8a:	bfac      	ite	ge
   dcc8c:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   dcc90:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   dcc94:	608b      	str	r3, [r1, #8]
   dcc96:	fb92 f3f0 	sdiv	r3, r2, r0
   dcc9a:	fb00 2213 	mls	r2, r0, r3, r2
   dcc9e:	604b      	str	r3, [r1, #4]
   dcca0:	600a      	str	r2, [r1, #0]
   dcca2:	2307      	movs	r3, #7
   dcca4:	1ce2      	adds	r2, r4, #3
   dcca6:	fb92 f3f3 	sdiv	r3, r2, r3
   dccaa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dccae:	1ad3      	subs	r3, r2, r3
   dccb0:	618b      	str	r3, [r1, #24]
   dccb2:	4b33      	ldr	r3, [pc, #204]	; (dcd80 <gmtime_r+0x124>)
   dccb4:	4d33      	ldr	r5, [pc, #204]	; (dcd84 <gmtime_r+0x128>)
   dccb6:	fb94 f5f5 	sdiv	r5, r4, r5
   dccba:	fb03 4405 	mla	r4, r3, r5, r4
   dccbe:	f648 62ac 	movw	r2, #36524	; 0x8eac
   dccc2:	fbb4 f2f2 	udiv	r2, r4, r2
   dccc6:	4422      	add	r2, r4
   dccc8:	f240 57b4 	movw	r7, #1460	; 0x5b4
   dcccc:	fbb4 f3f7 	udiv	r3, r4, r7
   dccd0:	1ad2      	subs	r2, r2, r3
   dccd2:	482d      	ldr	r0, [pc, #180]	; (dcd88 <gmtime_r+0x12c>)
   dccd4:	fbb4 f0f0 	udiv	r0, r4, r0
   dccd8:	f648 6694 	movw	r6, #36500	; 0x8e94
   dccdc:	1a13      	subs	r3, r2, r0
   dccde:	fbb3 f6f6 	udiv	r6, r3, r6
   dcce2:	4434      	add	r4, r6
   dcce4:	f240 126d 	movw	r2, #365	; 0x16d
   dcce8:	fbb3 f0f2 	udiv	r0, r3, r2
   dccec:	fbb3 f3f7 	udiv	r3, r3, r7
   dccf0:	1ae3      	subs	r3, r4, r3
   dccf2:	fb02 3310 	mls	r3, r2, r0, r3
   dccf6:	2499      	movs	r4, #153	; 0x99
   dccf8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   dccfc:	3202      	adds	r2, #2
   dccfe:	fbb2 f2f4 	udiv	r2, r2, r4
   dcd02:	2a0a      	cmp	r2, #10
   dcd04:	fb04 f402 	mul.w	r4, r4, r2
   dcd08:	f104 0602 	add.w	r6, r4, #2
   dcd0c:	f04f 0405 	mov.w	r4, #5
   dcd10:	fbb6 f4f4 	udiv	r4, r6, r4
   dcd14:	bf34      	ite	cc
   dcd16:	2602      	movcc	r6, #2
   dcd18:	f06f 0609 	mvncs.w	r6, #9
   dcd1c:	4416      	add	r6, r2
   dcd1e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dcd22:	fb02 0505 	mla	r5, r2, r5, r0
   dcd26:	1c5f      	adds	r7, r3, #1
   dcd28:	2e01      	cmp	r6, #1
   dcd2a:	bf98      	it	ls
   dcd2c:	3501      	addls	r5, #1
   dcd2e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   dcd32:	eba7 0704 	sub.w	r7, r7, r4
   dcd36:	d302      	bcc.n	dcd3e <gmtime_r+0xe2>
   dcd38:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   dcd3c:	e014      	b.n	dcd68 <gmtime_r+0x10c>
   dcd3e:	0782      	lsls	r2, r0, #30
   dcd40:	d105      	bne.n	dcd4e <gmtime_r+0xf2>
   dcd42:	2464      	movs	r4, #100	; 0x64
   dcd44:	fbb0 f2f4 	udiv	r2, r0, r4
   dcd48:	fb04 0212 	mls	r2, r4, r2, r0
   dcd4c:	b94a      	cbnz	r2, dcd62 <gmtime_r+0x106>
   dcd4e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dcd52:	fbb0 f4f2 	udiv	r4, r0, r2
   dcd56:	fb02 0014 	mls	r0, r2, r4, r0
   dcd5a:	fab0 f280 	clz	r2, r0
   dcd5e:	0952      	lsrs	r2, r2, #5
   dcd60:	e000      	b.n	dcd64 <gmtime_r+0x108>
   dcd62:	2201      	movs	r2, #1
   dcd64:	333b      	adds	r3, #59	; 0x3b
   dcd66:	441a      	add	r2, r3
   dcd68:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   dcd6c:	2300      	movs	r3, #0
   dcd6e:	61ca      	str	r2, [r1, #28]
   dcd70:	614d      	str	r5, [r1, #20]
   dcd72:	610e      	str	r6, [r1, #16]
   dcd74:	60cf      	str	r7, [r1, #12]
   dcd76:	620b      	str	r3, [r1, #32]
   dcd78:	4608      	mov	r0, r1
   dcd7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dcd7c:	00015180 	.word	0x00015180
   dcd80:	fffdc54f 	.word	0xfffdc54f
   dcd84:	00023ab1 	.word	0x00023ab1
   dcd88:	00023ab0 	.word	0x00023ab0

000dcd8c <labs>:
   dcd8c:	2800      	cmp	r0, #0
   dcd8e:	bfb8      	it	lt
   dcd90:	4240      	neglt	r0, r0
   dcd92:	4770      	bx	lr

000dcd94 <__env_lock>:
   dcd94:	4770      	bx	lr

000dcd96 <__env_unlock>:
   dcd96:	4770      	bx	lr

000dcd98 <dynalib_user>:
   dcd98:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   dcda8:	0000 0000 7055 6f6c 6461 6e69 3a67 0020     ....Uploading: .
   dcdb8:	4f20 004b 4420 4c45 4520 5252 524f 2000      OK. DEL ERROR. 
   dcdc8:	514d 5454 4520 5252 524f 5300 5245 4149     MQTT ERROR.SERIA
   dcdd8:	204c 4144 4154 5320 5445 4954 474e 2053     L DATA SETTINGS 
   dcde8:	2d2d 203e 007b 0030 0a7d 5300 5445 4954     --> {.0.}..SETTI
   dcdf8:	474e 2053 4146 4c49 4445 5400 4d45 4550     NGS FAILED.TEMPE
   dce08:	4152 5554 4552 203a 4300 4820 4d55 4449     RATURE: .C HUMID
   dce18:	5449 3a59 0020 0025 540a 4d49 3a45 0020     ITY: .%..TIME: .
   dce28:	504f 5320 4154 4554 003a 4552 4f50 5452     OP STATE:.REPORT
   dce38:	4e49 2047 4e49 4554 5652 4c41 203a 4400     ING INTERVAL: .D
   dce48:	5441 2041 4552 4f53 554c 4954 4e4f 203a     ATA RESOLUTION: 
   dce58:	5300 5245 4149 204c 554e 424d 5245 203a     .SERIAL NUMBER: 
   dce68:	4d00 5451 2054 5242 4b4f 5245 203a 4d00     .MQTT BROKER: .M
   dce78:	5451 2054 5242 4b4f 5245 5020 524f 3a54     QTT BROKER PORT:
   dce88:	0020 4954 454d 4f5a 454e 203a 4900 5252      .TIMEZONE: .IRR
   dce98:	4749 5441 4f49 204e 4f48 5255 203a 5600     IGATION HOUR: .V
   dcea8:	4c41 4556 4f20 4550 204e 4550 4952 444f     ALVE OPEN PERIOD
   dceb8:	203a 4300 4548 4b43 5553 3a4d 0020 7953     : .CHECKSUM: .Sy
   dcec8:	7473 6d65 5320 7465 6974 676e 2073 6153     stem Settings Sa
   dced8:	6576 2064 7573 6363 7365 6673 6c75 796c     ved successfully
   dcee8:	5400 7268 7365 6f68 646c 5320 7465 6974     .Threshold Setti
   dcef8:	676e 2073 6153 6576 2064 7573 6363 7365     ngs Saved succes
   dcf08:	6673 6c75 796c 5200 4345 4945 4556 2044     sfully.RECEIVED 
   dcf18:	534d 3a47 0020 4d0a 5345 4153 4547 5420     MSG: ..MESSAGE T
   dcf28:	5059 3a45 0020 3434 3500 0035 5550 4c42     YPE: .44.55.PUBL
   dcf38:	5349 2048 4146 4c49 4445 6200 6f72 656b     ISH FAILED.broke
   dcf48:	2e72 6968 6576 716d 632e 6d6f 0a00 6544     r.hivemq.com..De
   dcf58:	6976 6563 4920 3a44 0020 540a 7365 6974     vice ID: ..Testi
   dcf68:	676e 4520 5045 4f52 3a4d 0a00 7250 7365     ng EEPROM:..Pres
   dcf78:	2073 7562 7474 6e6f 6620 726f 203a 2000     s button for: . 
   dcf88:	6553 6f63 646e 0073 540a 7365 6974 676e     Seconds..Testing
   dcf98:	4220 7475 6f74 3a6e 0a00 6554 7473 6e69      Button:..Testin
   dcfa8:	2067 6156 766c 3a65 0a00 6554 7473 6e69     g Valve:..Testin
   dcfb8:	2067 4453 4320 7261 3a64 0a00 6554 7473     g SD Card:..Test
   dcfc8:	6e69 2067 6152 6964 3a6f 0a00 6e55 6e6b     ing Radio:..Unkn
   dcfd8:	776f 206e 6f63 6d6d 6e61 0064 5355 4e49     own command.USIN
   dcfe8:	2047 4544 4146 4c55 2054 4553 5454 4e49     G DEFAULT SETTIN
   dcff8:	5347 5500 4953 474e 5320 5445 4954 474e     GS.USING SETTING
   dd008:	2053 5246 4d4f 4d20 4d45 524f 0059 5355     S FROM MEMORY.US
   dd018:	4e49 2047 4544 4146 4c55 2054 4854 4552     ING DEFAULT THRE
   dd028:	4853 4c4f 5344 5500 4953 474e 5420 5248     SHOLDS.USING THR
   dd038:	5345 4f48 444c 2053 5246 4d4f 4d20 4d45     ESHOLDS FROM MEM
   dd048:	524f 0059 6574 7473 622e 6f72 656b 2e72     ORY.test.broker.
   dd058:	6f63 006d                                   com.

000dd05c <_ZTV5Timer>:
	...
   dd064:	54ad 000d 54f5 000d 53cd 000d 5249 4952     .T...T...S..IRRI
   dd074:	4147 4954 4e4f 5420 4d49 2045 5453 5241     GATION TIME STAR
   dd084:	4554 3a44 0020 4552 4553 5454 4e49 2047     TED: .RESETTING 
   dd094:	4157 4554 2052 4150 4152 534d 203a 0000     WATER PARAMS: ..

000dd0a4 <_ZTVN8particle13__SPISettingsE>:
	...
   dd0ac:	58a5 000d                                   .X..

000dd0b0 <_ZTV4File>:
	...
   dd0b8:	58a3 000d 593b 000d 5915 000d 5909 000d     .X..;Y...Y...Y..
   dd0c8:	5885 000d 597f 000d 5903 000d 58fd 000d     .X...Y...Y...X..

000dd0d8 <_ZTV6SdFile>:
	...
   dd0e0:	58a1 000d 592d 000d 5949 000d 590f 000d     .X..-Y..IY...Y..
   dd0f0:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   dd100:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   dd110:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   dd120:	676e 2073 7325 6c25 2075 7325 4d20 444f     ngs %s%lu %s MOD
   dd130:	2545 3e64 2500 3230 2558 3230 2558 3230     E%d>.%02X%02X%02
   dd140:	2558 3230 2e58 4f4c 0047 6153 6976 676e     X%02X.LOG.Saving
   dd150:	203a 2000 6953 657a 203a 2f00 5200 4d46     : . Size: ./.RFM
   dd160:	3936 4920 494e 2054 5245 4f52 0052 454e     69 INIT ERROR.NE
   dd170:	2057 4853 4549 444c 5220 2046 4449 203a     W SHIELD RF ID: 
   dd180:	4e00 5745 4e20 5445 4f57 4b52 4920 3a44     .NEW NETWORK ID:
   dd190:	0020 4749 2d48 4652 364d 4839 5743 4b2d      .IGH-RFM69HCW-K
   dd1a0:	5945 3c00 4554 5453 003e 543c 5345 3a54     EY.<TEST>.<TEST:
   dd1b0:	4b4f 003e 0400 514d 5454 0004 4d06 4951     OK>...MQTT...MQI
   dd1c0:	6473 0370                                   sdp.

000dd1c4 <_ZTV5RFM69>:
	...
   dd1cc:	8331 000d                                   1...

000dd1d0 <_ZTVN5spark13EthernetClassE>:
	...
   dd1d8:	8e77 000d 8e6d 000d 8e63 000d 8e59 000d     w...m...c...Y...
   dd1e8:	8e4d 000d 8e41 000d 8e35 000d 8e2d 000d     M...A...5...-...
   dd1f8:	8e23 000d 8e19 000d a88f 000d               #...........

000dd204 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dd204:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
   dd214:	002e 6e69 0066 6162 6475 5300 7265 6169     ..inf.baud.Seria
   dd224:	006c 6553 6972 6c61 0031 7974 6570 7000     l.Serial1.type.p
   dd234:	7261 6d61 6300 646d 6900 0064 6e68 0064     aram.cmd.id.hnd.
   dd244:	7473 6d72 6600 6c69 0074 766c 006c 6461     strm.filt.lvl.ad
   dd254:	4864 6e61 6c64 7265 7200 6d65 766f 4865     dHandler.removeH
   dd264:	6e61 6c64 7265 6500 756e 486d 6e61 6c64     andler.enumHandl
   dd274:	7265 0073 534a 4e4f 7453 6572 6d61 6f4c     ers.JSONStreamLo
   dd284:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
   dd294:	7530 0020 205d 2c00 0020 2928 203a 2000     0u .] ., .(): . 
   dd2a4:	005b 6f63 6564 3d20 0020 6925 6400 7465     [.code = .%i.det
   dd2b4:	6961 736c 3d20 0020 0a0d 6c00 006e 6e66     ails = ....ln.fn
   dd2c4:	6300 646f 0065 6564 6174 6c69 6e00 6e6f     .code.detail.non
   dd2d4:	0065 7274 6361 0065 6e69 6f66 7700 7261     e.trace.info.war
   dd2e4:	006e 7265 6f72 0072 6170 696e 0063 6c61     n.error.panic.al
   dd2f4:	006c 2b25 3330 3a64 3025 7532 2500 2d59     l.%+03d:%02u.%Y-
   dd304:	6d25 252d 5464 4825 253a 3a4d 5325 7a25     %m-%dT%H:%M:%S%z
   dd314:	6100 6373 6974 656d 0000 0000               .asctime....

000dd320 <_ZTV14CellularSignal>:
	...
   dd328:	5cdd 000d 5cdf 000d 987d 000d 990d 000d     .\...\..}.......
   dd338:	9881 000d 98d9 000d 98ad 000d 997f 000d     ................
   dd348:	fffc ffff 0000 0000 99a9 000d               ............

000dd354 <_ZTV9IPAddress>:
	...
   dd35c:	9bb5 000d 9ba5 000d 9ba7 000d               ............

000dd368 <_ZTV9USBSerial>:
	...
   dd370:	9ccd 000d 9d1d 000d 9d2b 000d 9321 000d     ........+...!...
   dd380:	9d09 000d 9ccf 000d 9ce5 000d 9d17 000d     ................
   dd390:	9cfb 000d 9cc9 000d                         ........

000dd398 <_ZTVN5spark13CellularClassE>:
	...
   dd3a0:	9ec7 000d 9ebd 000d 9eb3 000d 9e69 000d     ............i...
   dd3b0:	9ea7 000d 9e9b 000d 9e8f 000d 9e87 000d     ................
   dd3c0:	9e7d 000d 9e73 000d a88f 000d               }...s.......

000dd3cc <_ZTV11USARTSerial>:
	...
   dd3d4:	9f01 000d 9f51 000d 9f5f 000d 9321 000d     ....Q..._...!...
   dd3e4:	9f15 000d 9f37 000d 9f23 000d 9f4b 000d     ....7...#...K...
   dd3f4:	9f03 000d 9f07 000d                         ........

000dd3fc <_ZTV7TwoWire>:
	...
   dd404:	a005 000d a04f 000d a027 000d a007 000d     ....O...'.......
   dd414:	a02f 000d a037 000d a03f 000d a047 000d     /...7...?...G...

000dd424 <_ZTVN5spark9MeshClassE>:
	...
   dd42c:	a17d 000d a173 000d a169 000d a15f 000d     }...s...i..._...
   dd43c:	a153 000d a147 000d a13b 000d a133 000d     S...G...;...3...
   dd44c:	a129 000d a11f 000d a88f 000d               )...........

000dd458 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dd460:	a321 000d a327 000d a80f 000d a335 000d     !...'.......5...
   dd470:	a323 000d                                   #...

000dd474 <_ZTV9TCPClient>:
	...
   dd47c:	5f95 000d 5fc9 000d a299 000d a2b3 000d     ._..._..........
   dd48c:	a6b5 000d a407 000d a3d9 000d a2dd 000d     ................
   dd49c:	a591 000d a48d 000d a43b 000d a685 000d     ........;.......
   dd4ac:	a2df 000d a317 000d a2c5 000d a339 000d     ............9...
   dd4bc:	a3b9 000d 6977 6972 676e 7200 6365 2076     ....wiring.recv 
   dd4cc:	7265 6f72 2072 203d 6425 0000               error = %d..

000dd4d8 <_ZTVN5spark12NetworkClassE>:
	...
   dd4e0:	a827 000d a831 000d a83b 000d a845 000d     '...1...;...E...
   dd4f0:	a84f 000d a85b 000d a867 000d a873 000d     O...[...g...s...
   dd500:	a87b 000d a885 000d a88f 000d               {...........

000dd50c <_ZSt7nothrow>:
	...

000dd50d <day_name.4725>:
   dd50d:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dd51d:	6972 6153 4a74                                   riSat

000dd522 <mon_name.4726>:
   dd522:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dd532:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dd542:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   dd552:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   dd562:	6425 000a                                   %d..

000dd566 <_ctype_>:
   dd566:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dd576:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dd586:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dd596:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dd5a6:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dd5b6:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dd5c6:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dd5d6:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dd5e6:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dd668 <__sf_fake_stdin>:
	...

000dd688 <__sf_fake_stdout>:
	...

000dd6a8 <__sf_fake_stderr>:
	...
   dd6c8:	0043 0000                                   C...

000dd6cc <__month_lengths>:
   dd6cc:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   dd6dc:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dd6ec:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dd6fc:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   dd70c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dd71c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dd72c:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
   dd73c:	2d00 2500 6432 2500 322e 2f64 2e25 6432     .-.%2d.%.2d/%.2d
   dd74c:	252f 322e 0064 6c25 0075 2d59 6d25 252d     /%.2d.%lu.Y-%m-%
   dd75c:	0064 2a2e 0075 2e25 6433 2500 6c6c 0064     d..*u.%.3d.%lld.
   dd76c:	2e25 6432 253a 322e 3a64 2e25 6432 2500     %.2d:%.2d:%.2d.%
   dd77c:	302b 6c33 2564 322e 646c 4c00 5f43 4954     +03ld%.2ld.LC_TI
   dd78c:	454d 4a00 6e61 4600 6265 4d00 7261 4100     ME.Jan.Feb.Mar.A
   dd79c:	7270 4d00 7961 4a00 6e75 4a00 6c75 4100     pr.May.Jun.Jul.A
   dd7ac:	6775 5300 7065 4f00 7463 4e00 766f 4400     ug.Sep.Oct.Nov.D
   dd7bc:	6365 4a00 6e61 6175 7972 4600 6265 7572     ec.January.Febru
   dd7cc:	7261 0079 614d 6372 0068 7041 6972 006c     ary.March.April.
   dd7dc:	754a 656e 4a00 6c75 0079 7541 7567 7473     June.July.August
   dd7ec:	5300 7065 6574 626d 7265 4f00 7463 626f     .September.Octob
   dd7fc:	7265 4e00 766f 6d65 6562 0072 6544 6563     er.November.Dece
   dd80c:	626d 7265 5300 6e75 4d00 6e6f 5400 6575     mber.Sun.Mon.Tue
   dd81c:	5700 6465 5400 7568 4600 6972 5300 7461     .Wed.Thu.Fri.Sat
   dd82c:	5300 6e75 6164 0079 6f4d 646e 7961 5400     .Sunday.Monday.T
   dd83c:	6575 6473 7961 5700 6465 656e 6473 7961     uesday.Wednesday
   dd84c:	5400 7568 7372 6164 0079 7246 6469 7961     .Thursday.Friday
   dd85c:	5300 7461 7275 6164 0079 4825 253a 3a4d     .Saturday.%H:%M:
   dd86c:	5325 2500 2f6d 6425 252f 0079 6125 2520     %S.%m/%d/%y.%a %
   dd87c:	2062 6525 2520 3a48 4d25 253a 2053 5925     b %e %H:%M:%S %Y
   dd88c:	4100 004d 4d50 2500 2061 6225 2520 2065     .AM.PM.%a %b %e 
   dd89c:	4825 253a 3a4d 5325 2520 205a 5925 2500     %H:%M:%S %Z %Y.%
   dd8ac:	3a49 4d25 253a 2053 7025 0000               I:%M:%S %p..

000dd8b8 <_C_time_locale>:
   dd8b8:	d78f 000d d793 000d d797 000d d79b 000d     ................
   dd8c8:	d79f 000d d7a3 000d d7a7 000d d7ab 000d     ................
   dd8d8:	d7af 000d d7b3 000d d7b7 000d d7bb 000d     ................
   dd8e8:	d7bf 000d d7c7 000d d7d0 000d d7d6 000d     ................
   dd8f8:	d79f 000d d7dc 000d d7e1 000d d7e6 000d     ................
   dd908:	d7ed 000d d7f7 000d d7ff 000d d808 000d     ................
   dd918:	d811 000d d815 000d d819 000d d81d 000d     ................
   dd928:	d821 000d d825 000d d829 000d d82d 000d     !...%...)...-...
   dd938:	d834 000d d83b 000d d843 000d d84d 000d     4...;...C...M...
   dd948:	d856 000d d85d 000d d866 000d d86f 000d     V...]...f...o...
   dd958:	d878 000d d88d 000d d890 000d d893 000d     x...............
   dd968:	d7bf 000d d7c7 000d d7d0 000d d7d6 000d     ................
   dd978:	d79f 000d d7dc 000d d7e1 000d d7e6 000d     ................
   dd988:	d7ed 000d d7f7 000d d7ff 000d d808 000d     ................
   dd998:	d23a 000d d8ab 000d d2be 000d d2be 000d     :...............
   dd9a8:	d2be 000d d2be 000d d2be 000d 5a54 4700     ............TZ.G
   dd9b8:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
   dd9c8:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
   dd9d8:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
   dd9e8:	3a6e 6825 2575 006e                         n:%hu%n.

000dd9f0 <link_const_variable_data_end>:
   dd9f0:	000d462d 	.word	0x000d462d
   dd9f4:	000d4ed3 	.word	0x000d4ed3
   dd9f8:	000d513d 	.word	0x000d513d
   dd9fc:	000d51cd 	.word	0x000d51cd
   dda00:	000d539d 	.word	0x000d539d
   dda04:	000d57fd 	.word	0x000d57fd
   dda08:	000d5c09 	.word	0x000d5c09
   dda0c:	000d5db1 	.word	0x000d5db1
   dda10:	000d5f61 	.word	0x000d5f61
   dda14:	000d67e3 	.word	0x000d67e3
   dda18:	000d67e7 	.word	0x000d67e7
   dda1c:	000d67eb 	.word	0x000d67eb
   dda20:	000d6f05 	.word	0x000d6f05
   dda24:	000d6f09 	.word	0x000d6f09
   dda28:	000d6f0d 	.word	0x000d6f0d
   dda2c:	000d6f3f 	.word	0x000d6f3f
   dda30:	000d7705 	.word	0x000d7705
   dda34:	000d7729 	.word	0x000d7729
   dda38:	000d772d 	.word	0x000d772d
   dda3c:	000d7a51 	.word	0x000d7a51
   dda40:	000d7a55 	.word	0x000d7a55
   dda44:	000d7a59 	.word	0x000d7a59
   dda48:	000d7f93 	.word	0x000d7f93
   dda4c:	000d7f97 	.word	0x000d7f97
   dda50:	000d7f9b 	.word	0x000d7f9b
   dda54:	000d8041 	.word	0x000d8041
   dda58:	000d86c9 	.word	0x000d86c9
   dda5c:	000d86cd 	.word	0x000d86cd
   dda60:	000d8e81 	.word	0x000d8e81
   dda64:	000d9131 	.word	0x000d9131
   dda68:	000d92f9 	.word	0x000d92f9
   dda6c:	000d95d9 	.word	0x000d95d9
   dda70:	000d9839 	.word	0x000d9839
   dda74:	000d9861 	.word	0x000d9861
   dda78:	000d9ed1 	.word	0x000d9ed1
   dda7c:	000da249 	.word	0x000da249
   dda80:	000da95d 	.word	0x000da95d
   dda84:	000dabc5 	.word	0x000dabc5
   dda88:	000dac49 	.word	0x000dac49
   dda8c:	000dad0d 	.word	0x000dad0d
   dda90:	000dadd1 	.word	0x000dadd1

000dda94 <link_constructors_end>:
	...
