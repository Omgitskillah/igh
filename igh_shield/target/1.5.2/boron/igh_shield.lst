
c:/Users/Clarence.Alucho/Documents/git/igh/igh_shield/target/1.5.2/boron/igh_shield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006524  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000da540  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  2003dd2c  000da544  0001dd2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000a54  2003dd9c  2003dd9c  0002dd9c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000da5b4  000da5b4  0002a5b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000da5dc  000da5dc  0002a5dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001b914f  00000000  00000000  0002a5e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000256ad  00000000  00000000  001e372f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00030677  00000000  00000000  00208ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000035c8  00000000  00000000  00239453  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006308  00000000  00000000  0023ca1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0005a489  00000000  00000000  00242d23  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0006a15d  00000000  00000000  0029d1ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00117930  00000000  00000000  00307309  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000fe34  00000000  00000000  0041ec3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f005 fec4 	bl	d9dba <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f005 fec9 	bl	d9dd0 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003dd2c 	.word	0x2003dd2c
   d4048:	000da544 	.word	0x000da544
   d404c:	2003dd9c 	.word	0x2003dd9c
   d4050:	2003dd9c 	.word	0x2003dd9c
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f004 fac9 	bl	d85f0 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000da534 	.word	0x000da534
   d4080:	000da498 	.word	0x000da498

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b820 	b.w	d40c8 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f82a 	bl	d40e2 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f004 ba6f 	b.w	d8574 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f003 bcaf 	b.w	d79f8 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f003 bcad 	b.w	d79f8 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <igh_settings_calculate_checksum>:
 * struct must have a single byte at the end designated for the checksum for this to work
 * \param p_struct: pointer to data struct, total_bytes: sizeof(data struct)
 * \return the checksum
 */
uint8_t igh_settings_calculate_checksum(void * p_struct, size_t total_bytes)
{
   d40ae:	b510      	push	{r4, lr}
    data = (uint8_t *)p_struct;

    // uint8_t data_buffer[length];
    // memcpy(data_buffer, data, length);

    data += 1; // ignore checksum byte
   d40b0:	1c42      	adds	r2, r0, #1
 */
uint8_t igh_settings_calculate_checksum(void * p_struct, size_t total_bytes)
{
    uint8_t length = (uint8_t)total_bytes; 
    uint8_t * data;
    int sum = 0;
   d40b2:	2300      	movs	r3, #0
    // uint8_t data_buffer[length];
    // memcpy(data_buffer, data, length);

    data += 1; // ignore checksum byte
    // start at 1 to ignore the checksum byte
    for( int i = 1; i < length; i++)
   d40b4:	b2c9      	uxtb	r1, r1
   d40b6:	1a14      	subs	r4, r2, r0
   d40b8:	42a1      	cmp	r1, r4
   d40ba:	dd03      	ble.n	d40c4 <igh_settings_calculate_checksum+0x16>
    {
        sum += (0xFF & *data++);
   d40bc:	f812 4b01 	ldrb.w	r4, [r2], #1
   d40c0:	4423      	add	r3, r4
   d40c2:	e7f8      	b.n	d40b6 <igh_settings_calculate_checksum+0x8>
    }

    checksum = (uint8_t)(sum % 256);

    return checksum;
}
   d40c4:	b2d8      	uxtb	r0, r3
   d40c6:	bd10      	pop	{r4, pc}

000d40c8 <setup>:
#endif

SYSTEM_THREAD(ENABLED);

void setup() 
{
   d40c8:	b508      	push	{r3, lr}
    igh_hardware_setup();
   d40ca:	f000 fbf3 	bl	d48b4 <_Z18igh_hardware_setupv>
#ifdef TEST_MODE
    // go into test mode
    igh_log_begin();
   d40ce:	f000 f85f 	bl	d4190 <_Z13igh_log_beginv>
#endif
    igh_boron_setup();
   d40d2:	f000 fccd 	bl	d4a70 <_Z15igh_boron_setupv>
    igh_sd_log_setup();
   d40d6:	f000 fe19 	bl	d4d0c <_Z16igh_sd_log_setupv>
    igh_rfm69_setup();
}
   d40da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    // go into test mode
    igh_log_begin();
#endif
    igh_boron_setup();
    igh_sd_log_setup();
    igh_rfm69_setup();
   d40de:	f002 bc67 	b.w	d69b0 <_Z15igh_rfm69_setupv>

000d40e2 <loop>:
}

void loop() 
{
   d40e2:	b508      	push	{r3, lr}
#ifdef TEST_MODE
    // process test commands
    igh_process_serial_cmd(); 
   d40e4:	f000 f85e 	bl	d41a4 <_Z22igh_process_serial_cmdv>
#endif
    igh_boron_service();
   d40e8:	f000 fcca 	bl	d4a80 <_Z17igh_boron_servicev>
    igh_hardware_service();
   d40ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#ifdef TEST_MODE
    // process test commands
    igh_process_serial_cmd(); 
#endif
    igh_boron_service();
    igh_hardware_service();
   d40f0:	f000 bbd4 	b.w	d489c <_Z20igh_hardware_servicev>

000d40f4 <_GLOBAL__sub_I_setup>:
   d40f4:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d40f6:	f003 f98b 	bl	d7410 <HAL_Pin_Map>
#define TEST_MODE
#ifdef TEST_MODE
#include "particle_api/igh_log.h"
#endif

SYSTEM_THREAD(ENABLED);
   d40fa:	2100      	movs	r1, #0
   d40fc:	2001      	movs	r0, #1
    // process test commands
    igh_process_serial_cmd(); 
#endif
    igh_boron_service();
    igh_hardware_service();
   d40fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#define TEST_MODE
#ifdef TEST_MODE
#include "particle_api/igh_log.h"
#endif

SYSTEM_THREAD(ENABLED);
   d4102:	f003 bbd5 	b.w	d78b0 <system_thread_set_state>

000d4106 <_Z13igh_log_print6String>:
    }
    return 0;
}

void igh_log_print(String _str)
{
   d4106:	b510      	push	{r4, lr}
   d4108:	4604      	mov	r4, r0
    Serial.print(_str);
   d410a:	f004 fb71 	bl	d87f0 <_Z16_fetch_usbserialv>
   d410e:	6821      	ldr	r1, [r4, #0]
}
   d4110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return 0;
}

void igh_log_print(String _str)
{
    Serial.print(_str);
   d4114:	f003 bf24 	b.w	d7f60 <_ZN5Print5printEPKc>

000d4118 <_ZL22igh_append_test_statush.part.1>:
    igh_log_print(test_rfm69_radio);
    // Add more tests here
    igh_log_print(test_padding);
}

static void igh_append_test_status(uint8_t _status)
   d4118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
    if(_status)
    {
        igh_log_print(test_success); igh_log_print("\n");
   d411a:	490b      	ldr	r1, [pc, #44]	; (d4148 <_ZL22igh_append_test_statush.part.1+0x30>)
   d411c:	4668      	mov	r0, sp
   d411e:	f003 feb6 	bl	d7e8e <_ZN6StringC1EPK19__FlashStringHelper>
   d4122:	4668      	mov	r0, sp
   d4124:	f7ff ffef 	bl	d4106 <_Z13igh_log_print6String>
   d4128:	4668      	mov	r0, sp
   d412a:	f003 fe69 	bl	d7e00 <_ZN6StringD1Ev>
   d412e:	4907      	ldr	r1, [pc, #28]	; (d414c <_ZL22igh_append_test_statush.part.1+0x34>)
   d4130:	4668      	mov	r0, sp
   d4132:	f003 feac 	bl	d7e8e <_ZN6StringC1EPK19__FlashStringHelper>
   d4136:	4668      	mov	r0, sp
   d4138:	f7ff ffe5 	bl	d4106 <_Z13igh_log_print6String>
   d413c:	4668      	mov	r0, sp
   d413e:	f003 fe5f 	bl	d7e00 <_ZN6StringD1Ev>
    }
    else
    {
        igh_log_print(test_fail); igh_log_print("\n");
    }   
}
   d4142:	b005      	add	sp, #20
   d4144:	f85d fb04 	ldr.w	pc, [sp], #4
   d4148:	000d9eee 	.word	0x000d9eee
   d414c:	000da260 	.word	0x000da260

000d4150 <_ZL22igh_append_test_statush>:
    // Add more tests here
    igh_log_print(test_padding);
}

static void igh_append_test_status(uint8_t _status)
{
   d4150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if(_status)
   d4152:	b110      	cbz	r0, d415a <_ZL22igh_append_test_statush+0xa>
   d4154:	f7ff ffe0 	bl	d4118 <_ZL22igh_append_test_statush.part.1>
   d4158:	e013      	b.n	d4182 <_ZL22igh_append_test_statush+0x32>
    {
        igh_log_print(test_success); igh_log_print("\n");
    }
    else
    {
        igh_log_print(test_fail); igh_log_print("\n");
   d415a:	490b      	ldr	r1, [pc, #44]	; (d4188 <_ZL22igh_append_test_statush+0x38>)
   d415c:	4668      	mov	r0, sp
   d415e:	f003 fe96 	bl	d7e8e <_ZN6StringC1EPK19__FlashStringHelper>
   d4162:	4668      	mov	r0, sp
   d4164:	f7ff ffcf 	bl	d4106 <_Z13igh_log_print6String>
   d4168:	4668      	mov	r0, sp
   d416a:	f003 fe49 	bl	d7e00 <_ZN6StringD1Ev>
   d416e:	4907      	ldr	r1, [pc, #28]	; (d418c <_ZL22igh_append_test_statush+0x3c>)
   d4170:	4668      	mov	r0, sp
   d4172:	f003 fe8c 	bl	d7e8e <_ZN6StringC1EPK19__FlashStringHelper>
   d4176:	4668      	mov	r0, sp
   d4178:	f7ff ffc5 	bl	d4106 <_Z13igh_log_print6String>
   d417c:	4668      	mov	r0, sp
   d417e:	f003 fe3f 	bl	d7e00 <_ZN6StringD1Ev>
    }   
}
   d4182:	b005      	add	sp, #20
   d4184:	f85d fb04 	ldr.w	pc, [sp], #4
   d4188:	000d9f01 	.word	0x000d9f01
   d418c:	000da260 	.word	0x000da260

000d4190 <_Z13igh_log_beginv>:
{
    Serial.print(_str);
}

void igh_log_begin(void)
{
   d4190:	b508      	push	{r3, lr}
    Serial.begin(IGH_LOG_BAUD);
   d4192:	f004 fb2d 	bl	d87f0 <_Z16_fetch_usbserialv>
   d4196:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
}
   d419a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.print(_str);
}

void igh_log_begin(void)
{
    Serial.begin(IGH_LOG_BAUD);
   d419e:	f004 bb1b 	b.w	d87d8 <_ZN9USBSerial5beginEl>
	...

000d41a4 <_Z22igh_process_serial_cmdv>:
        igh_log_print(test_fail); igh_log_print("\n");
    }   
}

uint8_t igh_process_serial_cmd(void)
{
   d41a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d41a6:	b089      	sub	sp, #36	; 0x24
    uint8_t ret = 0;
    char resp[10];
    memset(resp, '\0', sizeof(resp));
   d41a8:	2300      	movs	r3, #0
   d41aa:	9301      	str	r3, [sp, #4]
   d41ac:	9302      	str	r3, [sp, #8]
   d41ae:	f8ad 300c 	strh.w	r3, [sp, #12]

uint8_t test_rfm69_flag = 0;

static uint8_t igh_log_read(char * _ch)
{
    if( Serial.available() )
   d41b2:	f004 fb1d 	bl	d87f0 <_Z16_fetch_usbserialv>
   d41b6:	6803      	ldr	r3, [r0, #0]
   d41b8:	691b      	ldr	r3, [r3, #16]
   d41ba:	4798      	blx	r3
   d41bc:	b198      	cbz	r0, d41e6 <_Z22igh_process_serial_cmdv+0x42>
    {
        *_ch = Serial.read();
   d41be:	f004 fb17 	bl	d87f0 <_Z16_fetch_usbserialv>
   d41c2:	6803      	ldr	r3, [r0, #0]
   d41c4:	695b      	ldr	r3, [r3, #20]
   d41c6:	4798      	blx	r3
   d41c8:	b2c4      	uxtb	r4, r0
        while (Serial.available()) Serial.read(); // remove any other data
   d41ca:	f004 fb11 	bl	d87f0 <_Z16_fetch_usbserialv>
   d41ce:	6803      	ldr	r3, [r0, #0]
   d41d0:	691b      	ldr	r3, [r3, #16]
   d41d2:	4798      	blx	r3
   d41d4:	2800      	cmp	r0, #0
   d41d6:	f000 80d5 	beq.w	d4384 <_Z22igh_process_serial_cmdv+0x1e0>
   d41da:	f004 fb09 	bl	d87f0 <_Z16_fetch_usbserialv>
   d41de:	6803      	ldr	r3, [r0, #0]
   d41e0:	695b      	ldr	r3, [r3, #20]
   d41e2:	4798      	blx	r3
   d41e4:	e7f1      	b.n	d41ca <_Z22igh_process_serial_cmdv+0x26>
    }   
}

uint8_t igh_process_serial_cmd(void)
{
    uint8_t ret = 0;
   d41e6:	4604      	mov	r4, r0
   d41e8:	e06e      	b.n	d42c8 <_Z22igh_process_serial_cmdv+0x124>
    Serial.begin(IGH_LOG_BAUD);
}

static void print_cmd_options(void)
{
    igh_log_print(test_padding);
   d41ea:	49b1      	ldr	r1, [pc, #708]	; (d44b0 <_Z22igh_process_serial_cmdv+0x30c>)
   d41ec:	a804      	add	r0, sp, #16
   d41ee:	f003 fe4e 	bl	d7e8e <_ZN6StringC1EPK19__FlashStringHelper>
   d41f2:	a804      	add	r0, sp, #16
   d41f4:	f7ff ff87 	bl	d4106 <_Z13igh_log_print6String>
   d41f8:	a804      	add	r0, sp, #16
   d41fa:	f003 fe01 	bl	d7e00 <_ZN6StringD1Ev>
    igh_log_print(test_header);
   d41fe:	49ad      	ldr	r1, [pc, #692]	; (d44b4 <_Z22igh_process_serial_cmdv+0x310>)
   d4200:	a804      	add	r0, sp, #16
   d4202:	f003 fe44 	bl	d7e8e <_ZN6StringC1EPK19__FlashStringHelper>
   d4206:	a804      	add	r0, sp, #16
   d4208:	f7ff ff7d 	bl	d4106 <_Z13igh_log_print6String>
   d420c:	a804      	add	r0, sp, #16
   d420e:	f003 fdf7 	bl	d7e00 <_ZN6StringD1Ev>
    igh_log_print(test_padding);
   d4212:	49a7      	ldr	r1, [pc, #668]	; (d44b0 <_Z22igh_process_serial_cmdv+0x30c>)
   d4214:	a804      	add	r0, sp, #16
   d4216:	f003 fe3a 	bl	d7e8e <_ZN6StringC1EPK19__FlashStringHelper>
   d421a:	a804      	add	r0, sp, #16
   d421c:	f7ff ff73 	bl	d4106 <_Z13igh_log_print6String>
   d4220:	a804      	add	r0, sp, #16
   d4222:	f003 fded 	bl	d7e00 <_ZN6StringD1Ev>
    igh_log_print(test_cmd_options);
   d4226:	49a4      	ldr	r1, [pc, #656]	; (d44b8 <_Z22igh_process_serial_cmdv+0x314>)
   d4228:	a804      	add	r0, sp, #16
   d422a:	f003 fe30 	bl	d7e8e <_ZN6StringC1EPK19__FlashStringHelper>
   d422e:	a804      	add	r0, sp, #16
   d4230:	f7ff ff69 	bl	d4106 <_Z13igh_log_print6String>
   d4234:	a804      	add	r0, sp, #16
   d4236:	f003 fde3 	bl	d7e00 <_ZN6StringD1Ev>
    igh_log_print(test_flash_cmd);
   d423a:	49a0      	ldr	r1, [pc, #640]	; (d44bc <_Z22igh_process_serial_cmdv+0x318>)
   d423c:	a804      	add	r0, sp, #16
   d423e:	f003 fe26 	bl	d7e8e <_ZN6StringC1EPK19__FlashStringHelper>
   d4242:	a804      	add	r0, sp, #16
   d4244:	f7ff ff5f 	bl	d4106 <_Z13igh_log_print6String>
   d4248:	a804      	add	r0, sp, #16
   d424a:	f003 fdd9 	bl	d7e00 <_ZN6StringD1Ev>
    igh_log_print(test_device_api);
   d424e:	499c      	ldr	r1, [pc, #624]	; (d44c0 <_Z22igh_process_serial_cmdv+0x31c>)
   d4250:	a804      	add	r0, sp, #16
   d4252:	f003 fe1c 	bl	d7e8e <_ZN6StringC1EPK19__FlashStringHelper>
   d4256:	a804      	add	r0, sp, #16
   d4258:	f7ff ff55 	bl	d4106 <_Z13igh_log_print6String>
   d425c:	a804      	add	r0, sp, #16
   d425e:	f003 fdcf 	bl	d7e00 <_ZN6StringD1Ev>
    igh_log_print(test_button_press);
   d4262:	4998      	ldr	r1, [pc, #608]	; (d44c4 <_Z22igh_process_serial_cmdv+0x320>)
   d4264:	a804      	add	r0, sp, #16
   d4266:	f003 fe12 	bl	d7e8e <_ZN6StringC1EPK19__FlashStringHelper>
   d426a:	a804      	add	r0, sp, #16
   d426c:	f7ff ff4b 	bl	d4106 <_Z13igh_log_print6String>
   d4270:	a804      	add	r0, sp, #16
   d4272:	f003 fdc5 	bl	d7e00 <_ZN6StringD1Ev>
    igh_log_print(test_valve_state);
   d4276:	4994      	ldr	r1, [pc, #592]	; (d44c8 <_Z22igh_process_serial_cmdv+0x324>)
   d4278:	a804      	add	r0, sp, #16
   d427a:	f003 fe08 	bl	d7e8e <_ZN6StringC1EPK19__FlashStringHelper>
   d427e:	a804      	add	r0, sp, #16
   d4280:	f7ff ff41 	bl	d4106 <_Z13igh_log_print6String>
   d4284:	a804      	add	r0, sp, #16
   d4286:	f003 fdbb 	bl	d7e00 <_ZN6StringD1Ev>
    igh_log_print(test_sd_card);
   d428a:	4990      	ldr	r1, [pc, #576]	; (d44cc <_Z22igh_process_serial_cmdv+0x328>)
   d428c:	a804      	add	r0, sp, #16
   d428e:	f003 fdfe 	bl	d7e8e <_ZN6StringC1EPK19__FlashStringHelper>
   d4292:	a804      	add	r0, sp, #16
   d4294:	f7ff ff37 	bl	d4106 <_Z13igh_log_print6String>
   d4298:	a804      	add	r0, sp, #16
   d429a:	f003 fdb1 	bl	d7e00 <_ZN6StringD1Ev>
    igh_log_print(test_rfm69_radio);
   d429e:	498c      	ldr	r1, [pc, #560]	; (d44d0 <_Z22igh_process_serial_cmdv+0x32c>)
   d42a0:	a804      	add	r0, sp, #16
   d42a2:	f003 fdf4 	bl	d7e8e <_ZN6StringC1EPK19__FlashStringHelper>
   d42a6:	a804      	add	r0, sp, #16
   d42a8:	f7ff ff2d 	bl	d4106 <_Z13igh_log_print6String>
   d42ac:	a804      	add	r0, sp, #16
   d42ae:	f003 fda7 	bl	d7e00 <_ZN6StringD1Ev>
    // Add more tests here
    igh_log_print(test_padding);
   d42b2:	497f      	ldr	r1, [pc, #508]	; (d44b0 <_Z22igh_process_serial_cmdv+0x30c>)
   d42b4:	a804      	add	r0, sp, #16
   d42b6:	f003 fdea 	bl	d7e8e <_ZN6StringC1EPK19__FlashStringHelper>
   d42ba:	a804      	add	r0, sp, #16
   d42bc:	f7ff ff23 	bl	d4106 <_Z13igh_log_print6String>
   d42c0:	a804      	add	r0, sp, #16
   d42c2:	f003 fd9d 	bl	d7e00 <_ZN6StringD1Ev>
                igh_append_test_status(ret);  
                break;

            case test_device:
                igh_boron_test_device();
                ret = 1;
   d42c6:	2401      	movs	r4, #1
    {
        // Do nothing;
    }

    // Test button routine
    if(test_button_flag)
   d42c8:	4d82      	ldr	r5, [pc, #520]	; (d44d4 <_Z22igh_process_serial_cmdv+0x330>)
   d42ca:	782b      	ldrb	r3, [r5, #0]
   d42cc:	b1c3      	cbz	r3, d4300 <_Z22igh_process_serial_cmdv+0x15c>
    {
        if(igh_button_sec_counter >= button_test_duration)
   d42ce:	4b82      	ldr	r3, [pc, #520]	; (d44d8 <_Z22igh_process_serial_cmdv+0x334>)
   d42d0:	781a      	ldrb	r2, [r3, #0]
   d42d2:	4b82      	ldr	r3, [pc, #520]	; (d44dc <_Z22igh_process_serial_cmdv+0x338>)
   d42d4:	781b      	ldrb	r3, [r3, #0]
   d42d6:	429a      	cmp	r2, r3
   d42d8:	d304      	bcc.n	d42e4 <_Z22igh_process_serial_cmdv+0x140>
   d42da:	f7ff ff1d 	bl	d4118 <_ZL22igh_append_test_statush.part.1>
        {
            ret = 1;
            igh_append_test_status(ret);
            test_button_flag = false;
   d42de:	2300      	movs	r3, #0
   d42e0:	702b      	strb	r3, [r5, #0]
    // Test button routine
    if(test_button_flag)
    {
        if(igh_button_sec_counter >= button_test_duration)
        {
            ret = 1;
   d42e2:	2401      	movs	r4, #1

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d42e4:	f003 f954 	bl	d7590 <HAL_Timer_Get_Milli_Seconds>
            igh_append_test_status(ret);
            test_button_flag = false;
        }

        if( (millis() - test_button_timeout_counter) >= test_button_timeout )
   d42e8:	4b7d      	ldr	r3, [pc, #500]	; (d44e0 <_Z22igh_process_serial_cmdv+0x33c>)
   d42ea:	681b      	ldr	r3, [r3, #0]
   d42ec:	1ac0      	subs	r0, r0, r3
   d42ee:	4b7d      	ldr	r3, [pc, #500]	; (d44e4 <_Z22igh_process_serial_cmdv+0x340>)
   d42f0:	681b      	ldr	r3, [r3, #0]
   d42f2:	4298      	cmp	r0, r3
   d42f4:	d304      	bcc.n	d4300 <_Z22igh_process_serial_cmdv+0x15c>
        {
            ret = 0;
            igh_append_test_status(ret);
   d42f6:	2000      	movs	r0, #0
            test_button_flag = false;
   d42f8:	2400      	movs	r4, #0
        }

        if( (millis() - test_button_timeout_counter) >= test_button_timeout )
        {
            ret = 0;
            igh_append_test_status(ret);
   d42fa:	f7ff ff29 	bl	d4150 <_ZL22igh_append_test_statush>
            test_button_flag = false;
   d42fe:	702c      	strb	r4, [r5, #0]
        }
    }

    // valve test routine
    if(test_valve_flag)
   d4300:	4e79      	ldr	r6, [pc, #484]	; (d44e8 <_Z22igh_process_serial_cmdv+0x344>)
   d4302:	7833      	ldrb	r3, [r6, #0]
   d4304:	2b00      	cmp	r3, #0
   d4306:	d030      	beq.n	d436a <_Z22igh_process_serial_cmdv+0x1c6>
    {
        if(open_close)
   d4308:	4b78      	ldr	r3, [pc, #480]	; (d44ec <_Z22igh_process_serial_cmdv+0x348>)
   d430a:	781a      	ldrb	r2, [r3, #0]
   d430c:	461d      	mov	r5, r3
   d430e:	4b78      	ldr	r3, [pc, #480]	; (d44f0 <_Z22igh_process_serial_cmdv+0x34c>)
   d4310:	b102      	cbz	r2, d4314 <_Z22igh_process_serial_cmdv+0x170>
        {
            current_valve_position = VALVE_OPEN;
   d4312:	2201      	movs	r2, #1
        else
        {
            current_valve_position = VALVE_CLOSE;
        }
        
        if( (millis() - test_valve_counter) >= valve_transit_time )
   d4314:	4f77      	ldr	r7, [pc, #476]	; (d44f4 <_Z22igh_process_serial_cmdv+0x350>)
        {
            current_valve_position = VALVE_OPEN;
        }
        else
        {
            current_valve_position = VALVE_CLOSE;
   d4316:	701a      	strb	r2, [r3, #0]
   d4318:	f003 f93a 	bl	d7590 <HAL_Timer_Get_Milli_Seconds>
        }
        
        if( (millis() - test_valve_counter) >= valve_transit_time )
   d431c:	683b      	ldr	r3, [r7, #0]
   d431e:	1ac0      	subs	r0, r0, r3
   d4320:	f241 736f 	movw	r3, #5999	; 0x176f
   d4324:	4298      	cmp	r0, r3
   d4326:	d920      	bls.n	d436a <_Z22igh_process_serial_cmdv+0x1c6>
        {
            if(open_close)
   d4328:	782d      	ldrb	r5, [r5, #0]
   d432a:	b155      	cbz	r5, d4342 <_Z22igh_process_serial_cmdv+0x19e>
            {
                valva_open_pass = igh_hardware_test_valve_state();
   d432c:	f000 fab8 	bl	d48a0 <_Z29igh_hardware_test_valve_statev>
   d4330:	4b71      	ldr	r3, [pc, #452]	; (d44f8 <_Z22igh_process_serial_cmdv+0x354>)
   d4332:	7018      	strb	r0, [r3, #0]
                open_close = false;
   d4334:	4b6d      	ldr	r3, [pc, #436]	; (d44ec <_Z22igh_process_serial_cmdv+0x348>)
   d4336:	2200      	movs	r2, #0
   d4338:	701a      	strb	r2, [r3, #0]
   d433a:	f003 f929 	bl	d7590 <HAL_Timer_Get_Milli_Seconds>
                test_valve_counter = millis();
   d433e:	6038      	str	r0, [r7, #0]
   d4340:	e013      	b.n	d436a <_Z22igh_process_serial_cmdv+0x1c6>
            }
            else
            {
                valve_closed_pass = !igh_hardware_test_valve_state();
   d4342:	f000 faad 	bl	d48a0 <_Z29igh_hardware_test_valve_statev>
   d4346:	4b6d      	ldr	r3, [pc, #436]	; (d44fc <_Z22igh_process_serial_cmdv+0x358>)
   d4348:	2800      	cmp	r0, #0
   d434a:	bf0c      	ite	eq
   d434c:	2201      	moveq	r2, #1
   d434e:	2200      	movne	r2, #0
   d4350:	701a      	strb	r2, [r3, #0]

                ret = (valve_closed_pass && valva_open_pass);
   d4352:	d104      	bne.n	d435e <_Z22igh_process_serial_cmdv+0x1ba>
   d4354:	4b68      	ldr	r3, [pc, #416]	; (d44f8 <_Z22igh_process_serial_cmdv+0x354>)
   d4356:	781d      	ldrb	r5, [r3, #0]
   d4358:	3500      	adds	r5, #0
   d435a:	bf18      	it	ne
   d435c:	2501      	movne	r5, #1
                igh_append_test_status(ret);
   d435e:	4628      	mov	r0, r5
   d4360:	f7ff fef6 	bl	d4150 <_ZL22igh_append_test_statush>
                test_valve_flag = false;
   d4364:	2300      	movs	r3, #0
            }
            else
            {
                valve_closed_pass = !igh_hardware_test_valve_state();

                ret = (valve_closed_pass && valva_open_pass);
   d4366:	462c      	mov	r4, r5
                igh_append_test_status(ret);
                test_valve_flag = false;
   d4368:	7033      	strb	r3, [r6, #0]
            }   
        }
    }

    if(test_rfm69_flag)
   d436a:	4d65      	ldr	r5, [pc, #404]	; (d4500 <_Z22igh_process_serial_cmdv+0x35c>)
   d436c:	782b      	ldrb	r3, [r5, #0]
   d436e:	2b00      	cmp	r3, #0
   d4370:	f000 80e6 	beq.w	d4540 <_Z22igh_process_serial_cmdv+0x39c>
    {
        ret = igh_rfm69_test_service(); // this function is blocking
   d4374:	f002 fbc4 	bl	d6b00 <_Z22igh_rfm69_test_servicev>
   d4378:	4604      	mov	r4, r0
        igh_append_test_status(ret);
   d437a:	f7ff fee9 	bl	d4150 <_ZL22igh_append_test_statush>
        test_rfm69_flag = false;
   d437e:	2300      	movs	r3, #0
   d4380:	702b      	strb	r3, [r5, #0]
    }

    return ret;
   d4382:	e0dd      	b.n	d4540 <_Z22igh_process_serial_cmdv+0x39c>
    memset(resp, '\0', sizeof(resp));

    char serial_cmd = '\0';
    if( igh_log_read(&serial_cmd) )
    {
        switch(serial_cmd)
   d4384:	f1a4 0031 	sub.w	r0, r4, #49	; 0x31
   d4388:	280e      	cmp	r0, #14
   d438a:	f200 80d7 	bhi.w	d453c <_Z22igh_process_serial_cmdv+0x398>
   d438e:	a301      	add	r3, pc, #4	; (adr r3, d4394 <_Z22igh_process_serial_cmdv+0x1f0>)
   d4390:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   d4394:	000d43d1 	.word	0x000d43d1
   d4398:	000d43eb 	.word	0x000d43eb
   d439c:	000d43f1 	.word	0x000d43f1
   d43a0:	000d446b 	.word	0x000d446b
   d43a4:	000d4491 	.word	0x000d4491
   d43a8:	000d451d 	.word	0x000d451d
   d43ac:	000d453d 	.word	0x000d453d
   d43b0:	000d453d 	.word	0x000d453d
   d43b4:	000d453d 	.word	0x000d453d
   d43b8:	000d453d 	.word	0x000d453d
   d43bc:	000d453d 	.word	0x000d453d
   d43c0:	000d453d 	.word	0x000d453d
   d43c4:	000d453d 	.word	0x000d453d
   d43c8:	000d453d 	.word	0x000d453d
   d43cc:	000d41eb 	.word	0x000d41eb
                print_cmd_options();
                ret = 1;
                break;

            case test_flash:
                igh_log_print(F("\nTesting flash:"));
   d43d0:	494c      	ldr	r1, [pc, #304]	; (d4504 <_Z22igh_process_serial_cmdv+0x360>)
   d43d2:	a804      	add	r0, sp, #16
   d43d4:	f003 fd5b 	bl	d7e8e <_ZN6StringC1EPK19__FlashStringHelper>
   d43d8:	a804      	add	r0, sp, #16
   d43da:	f7ff fe94 	bl	d4106 <_Z13igh_log_print6String>
   d43de:	a804      	add	r0, sp, #16
   d43e0:	f003 fd0e 	bl	d7e00 <_ZN6StringD1Ev>
                ret = igh_eeproom_test(); // this should be true based on actual test
   d43e4:	f000 f94e 	bl	d4684 <_Z16igh_eeproom_testv>
   d43e8:	e05e      	b.n	d44a8 <_Z22igh_process_serial_cmdv+0x304>
                igh_append_test_status(ret);  
                break;

            case test_device:
                igh_boron_test_device();
   d43ea:	f000 fb51 	bl	d4a90 <_Z21igh_boron_test_devicev>
   d43ee:	e76a      	b.n	d42c6 <_Z22igh_process_serial_cmdv+0x122>
                ret = 1;
                break;

            case test_button:
                button_test_duration = random(5); // get a random number to test button press duration
   d43f0:	2005      	movs	r0, #5
   d43f2:	f004 fbe6 	bl	d8bc2 <_Z6randomi>
   d43f6:	4c39      	ldr	r4, [pc, #228]	; (d44dc <_Z22igh_process_serial_cmdv+0x338>)
                igh_log_print(F("\nPress button for: ")); igh_log_print(String(button_test_duration)); igh_log_print(F(" Seconds"));
   d43f8:	4943      	ldr	r1, [pc, #268]	; (d4508 <_Z22igh_process_serial_cmdv+0x364>)
                igh_boron_test_device();
                ret = 1;
                break;

            case test_button:
                button_test_duration = random(5); // get a random number to test button press duration
   d43fa:	7020      	strb	r0, [r4, #0]
                igh_log_print(F("\nPress button for: ")); igh_log_print(String(button_test_duration)); igh_log_print(F(" Seconds"));
   d43fc:	a804      	add	r0, sp, #16
   d43fe:	f003 fd46 	bl	d7e8e <_ZN6StringC1EPK19__FlashStringHelper>
   d4402:	a804      	add	r0, sp, #16
   d4404:	f7ff fe7f 	bl	d4106 <_Z13igh_log_print6String>
   d4408:	a804      	add	r0, sp, #16
   d440a:	f003 fcf9 	bl	d7e00 <_ZN6StringD1Ev>
   d440e:	220a      	movs	r2, #10
   d4410:	7821      	ldrb	r1, [r4, #0]
   d4412:	a804      	add	r0, sp, #16
   d4414:	f003 fd5f 	bl	d7ed6 <_ZN6StringC1Ehh>
   d4418:	a804      	add	r0, sp, #16
   d441a:	f7ff fe74 	bl	d4106 <_Z13igh_log_print6String>
   d441e:	a804      	add	r0, sp, #16
   d4420:	f003 fcee 	bl	d7e00 <_ZN6StringD1Ev>
   d4424:	4939      	ldr	r1, [pc, #228]	; (d450c <_Z22igh_process_serial_cmdv+0x368>)
   d4426:	a804      	add	r0, sp, #16
   d4428:	f003 fd31 	bl	d7e8e <_ZN6StringC1EPK19__FlashStringHelper>
   d442c:	a804      	add	r0, sp, #16
   d442e:	f7ff fe6a 	bl	d4106 <_Z13igh_log_print6String>
   d4432:	a804      	add	r0, sp, #16
   d4434:	f003 fce4 	bl	d7e00 <_ZN6StringD1Ev>
                igh_log_print(F("\nTesting Button:"));
   d4438:	4935      	ldr	r1, [pc, #212]	; (d4510 <_Z22igh_process_serial_cmdv+0x36c>)
   d443a:	a804      	add	r0, sp, #16
   d443c:	f003 fd27 	bl	d7e8e <_ZN6StringC1EPK19__FlashStringHelper>
   d4440:	a804      	add	r0, sp, #16
   d4442:	f7ff fe60 	bl	d4106 <_Z13igh_log_print6String>
   d4446:	a804      	add	r0, sp, #16
   d4448:	f003 fcda 	bl	d7e00 <_ZN6StringD1Ev>
                test_button_flag = 1;
   d444c:	4b21      	ldr	r3, [pc, #132]	; (d44d4 <_Z22igh_process_serial_cmdv+0x330>)
   d444e:	2201      	movs	r2, #1
   d4450:	701a      	strb	r2, [r3, #0]
                test_button_timeout = (button_test_duration + 5) * 1000; // + 5 gives you at least 5 seconds to start pressing
   d4452:	7823      	ldrb	r3, [r4, #0]
   d4454:	1d5a      	adds	r2, r3, #5
   d4456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d445a:	4353      	muls	r3, r2
   d445c:	4a21      	ldr	r2, [pc, #132]	; (d44e4 <_Z22igh_process_serial_cmdv+0x340>)
   d445e:	6013      	str	r3, [r2, #0]
   d4460:	f003 f896 	bl	d7590 <HAL_Timer_Get_Milli_Seconds>
                test_button_timeout_counter = millis();
   d4464:	4b1e      	ldr	r3, [pc, #120]	; (d44e0 <_Z22igh_process_serial_cmdv+0x33c>)
   d4466:	6018      	str	r0, [r3, #0]
   d4468:	e068      	b.n	d453c <_Z22igh_process_serial_cmdv+0x398>
                break;

            case test_valve:
                igh_log_print(F("\nTesting Valve:"));
   d446a:	492a      	ldr	r1, [pc, #168]	; (d4514 <_Z22igh_process_serial_cmdv+0x370>)
   d446c:	a804      	add	r0, sp, #16
   d446e:	f003 fd0e 	bl	d7e8e <_ZN6StringC1EPK19__FlashStringHelper>
   d4472:	a804      	add	r0, sp, #16
   d4474:	f7ff fe47 	bl	d4106 <_Z13igh_log_print6String>
   d4478:	a804      	add	r0, sp, #16
   d447a:	f003 fcc1 	bl	d7e00 <_ZN6StringD1Ev>
                test_valve_flag = true;
   d447e:	4b1a      	ldr	r3, [pc, #104]	; (d44e8 <_Z22igh_process_serial_cmdv+0x344>)
   d4480:	2401      	movs	r4, #1
   d4482:	701c      	strb	r4, [r3, #0]
   d4484:	f003 f884 	bl	d7590 <HAL_Timer_Get_Milli_Seconds>
                test_valve_counter = millis();
   d4488:	4b1a      	ldr	r3, [pc, #104]	; (d44f4 <_Z22igh_process_serial_cmdv+0x350>)
   d448a:	6018      	str	r0, [r3, #0]
                open_close = true;
   d448c:	4b17      	ldr	r3, [pc, #92]	; (d44ec <_Z22igh_process_serial_cmdv+0x348>)
   d448e:	701c      	strb	r4, [r3, #0]

            case test_sd:
                igh_log_print(F("\nTesting SD Card:"));
   d4490:	4921      	ldr	r1, [pc, #132]	; (d4518 <_Z22igh_process_serial_cmdv+0x374>)
   d4492:	a804      	add	r0, sp, #16
   d4494:	f003 fcfb 	bl	d7e8e <_ZN6StringC1EPK19__FlashStringHelper>
   d4498:	a804      	add	r0, sp, #16
   d449a:	f7ff fe34 	bl	d4106 <_Z13igh_log_print6String>
   d449e:	a804      	add	r0, sp, #16
   d44a0:	f003 fcae 	bl	d7e00 <_ZN6StringD1Ev>
                ret = igh_sd_log_test();
   d44a4:	f000 fd7e 	bl	d4fa4 <_Z15igh_sd_log_testv>
   d44a8:	4604      	mov	r4, r0
                igh_append_test_status(ret);
   d44aa:	f7ff fe51 	bl	d4150 <_ZL22igh_append_test_statush>
                break; 
   d44ae:	e70b      	b.n	d42c8 <_Z22igh_process_serial_cmdv+0x124>
   d44b0:	000d9fa8 	.word	0x000d9fa8
   d44b4:	000d9ede 	.word	0x000d9ede
   d44b8:	000d9f08 	.word	0x000d9f08
   d44bc:	000d9f14 	.word	0x000d9f14
   d44c0:	000d9f94 	.word	0x000d9f94
   d44c4:	000d9ec8 	.word	0x000d9ec8
   d44c8:	000d9fba 	.word	0x000d9fba
   d44cc:	000d9fd1 	.word	0x000d9fd1
   d44d0:	000d9ef2 	.word	0x000d9ef2
   d44d4:	2003ddac 	.word	0x2003ddac
   d44d8:	2003ddb6 	.word	0x2003ddb6
   d44dc:	2003ddae 	.word	0x2003ddae
   d44e0:	2003dda8 	.word	0x2003dda8
   d44e4:	2003dda4 	.word	0x2003dda4
   d44e8:	2003ddaf 	.word	0x2003ddaf
   d44ec:	2003ddad 	.word	0x2003ddad
   d44f0:	2003ddb5 	.word	0x2003ddb5
   d44f4:	2003ddb0 	.word	0x2003ddb0
   d44f8:	2003dda0 	.word	0x2003dda0
   d44fc:	2003dda1 	.word	0x2003dda1
   d4500:	2003ddb4 	.word	0x2003ddb4
   d4504:	000d9f24 	.word	0x000d9f24
   d4508:	000d9f34 	.word	0x000d9f34
   d450c:	000d9f48 	.word	0x000d9f48
   d4510:	000d9f51 	.word	0x000d9f51
   d4514:	000d9f62 	.word	0x000d9f62
   d4518:	000d9f72 	.word	0x000d9f72

            case test_rfm69:
                igh_log_print(F("\nTesting Radio:"));
   d451c:	490a      	ldr	r1, [pc, #40]	; (d4548 <_Z22igh_process_serial_cmdv+0x3a4>)
   d451e:	a804      	add	r0, sp, #16
   d4520:	f003 fcb5 	bl	d7e8e <_ZN6StringC1EPK19__FlashStringHelper>
   d4524:	a804      	add	r0, sp, #16
   d4526:	f7ff fdee 	bl	d4106 <_Z13igh_log_print6String>
   d452a:	a804      	add	r0, sp, #16
   d452c:	f003 fc68 	bl	d7e00 <_ZN6StringD1Ev>
                test_rfm69_flag = 1;
   d4530:	4b06      	ldr	r3, [pc, #24]	; (d454c <_Z22igh_process_serial_cmdv+0x3a8>)
   d4532:	2401      	movs	r4, #1
   d4534:	701c      	strb	r4, [r3, #0]
                igh_rfm69_test();
   d4536:	f002 facb 	bl	d6ad0 <_Z14igh_rfm69_testv>
                ret = 1;
            break;
   d453a:	e6c5      	b.n	d42c8 <_Z22igh_process_serial_cmdv+0x124>
    }   
}

uint8_t igh_process_serial_cmd(void)
{
    uint8_t ret = 0;
   d453c:	2400      	movs	r4, #0
   d453e:	e6c3      	b.n	d42c8 <_Z22igh_process_serial_cmdv+0x124>
        igh_append_test_status(ret);
        test_rfm69_flag = false;
    }

    return ret;
   d4540:	4620      	mov	r0, r4
   d4542:	b009      	add	sp, #36	; 0x24
   d4544:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4546:	bf00      	nop
   d4548:	000d9f84 	.word	0x000d9f84
   d454c:	2003ddb4 	.word	0x2003ddb4

000d4550 <_GLOBAL__sub_I_test_valve_flag>:
   d4550:	f002 bf5e 	b.w	d7410 <HAL_Pin_Map>

000d4554 <_Z24igh_eeprom_update_errorsm>:
 * \brief Save errors bit field
 * \param error_bit_field: error bit field
 * \return void
 */
void igh_eeprom_update_errors(uint32_t error_bit_field)
{
   d4554:	b513      	push	{r0, r1, r4, lr}
   d4556:	ac02      	add	r4, sp, #8
   d4558:	f844 0d04 	str.w	r0, [r4, #-4]!
    EEPROM.put(SYSTEM_ERRORS_ADDRESS, error_bit_field);
   d455c:	f004 fd12 	bl	d8f84 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4560:	2204      	movs	r2, #4
   d4562:	4621      	mov	r1, r4
   d4564:	f44f 6080 	mov.w	r0, #1024	; 0x400
   d4568:	f003 f832 	bl	d75d0 <HAL_EEPROM_Put>
}
   d456c:	b002      	add	sp, #8
   d456e:	bd10      	pop	{r4, pc}

000d4570 <_Z31igh_eeprom_read_system_settingsP15system_settings>:
 * \brief Gets system settings from eeprom emulator
 * \param running_system_settings_buffer: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_system_settings(system_settings * running_system_settings_buffer)
{
   d4570:	b530      	push	{r4, r5, lr}
   d4572:	b091      	sub	sp, #68	; 0x44
  system_settings local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d4574:	223c      	movs	r2, #60	; 0x3c
   d4576:	2100      	movs	r1, #0
 * \brief Gets system settings from eeprom emulator
 * \param running_system_settings_buffer: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_system_settings(system_settings * running_system_settings_buffer)
{
   d4578:	4605      	mov	r5, r0
  system_settings local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d457a:	a801      	add	r0, sp, #4
   d457c:	f005 fc28 	bl	d9dd0 <memset>
  EEPROM.get(SYSTEM_SETTINGS_ADDRESS, local_buffer);
   d4580:	f004 fd00 	bl	d8f84 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4584:	223c      	movs	r2, #60	; 0x3c
   d4586:	a901      	add	r1, sp, #4
   d4588:	2000      	movs	r0, #0
   d458a:	f003 f819 	bl	d75c0 <HAL_EEPROM_Get>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));
   d458e:	213c      	movs	r1, #60	; 0x3c
   d4590:	a801      	add	r0, sp, #4
   d4592:	f7ff fd8c 	bl	d40ae <igh_settings_calculate_checksum>

  if( checksum != local_buffer.checksum)
   d4596:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d459a:	4283      	cmp	r3, r0
   d459c:	d10c      	bne.n	d45b8 <_Z31igh_eeprom_read_system_settingsP15system_settings+0x48>
  {
    return 0;
  }

  *running_system_settings_buffer = local_buffer;
   d459e:	ac01      	add	r4, sp, #4
   d45a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d45a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d45a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d45a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d45a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d45aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d45ac:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   d45b0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  return 1;
   d45b4:	2001      	movs	r0, #1
   d45b6:	e000      	b.n	d45ba <_Z31igh_eeprom_read_system_settingsP15system_settings+0x4a>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));

  if( checksum != local_buffer.checksum)
  {
    return 0;
   d45b8:	2000      	movs	r0, #0
  }

  *running_system_settings_buffer = local_buffer;
  return 1;

}
   d45ba:	b011      	add	sp, #68	; 0x44
   d45bc:	bd30      	pop	{r4, r5, pc}

000d45be <_Z31igh_eeprom_save_system_settingsP15system_settings>:
 * \brief Save system settings  to eeprom emulator
 * \param settings_to_save: pointer to struct to save
 * \return true or false based on write success
 */
uint8_t igh_eeprom_save_system_settings(system_settings * settings_to_save)
{
   d45be:	b510      	push	{r4, lr}
   d45c0:	4604      	mov	r4, r0
   d45c2:	b090      	sub	sp, #64	; 0x40
  system_settings local_buffer;
  // save the data
  EEPROM.put(SYSTEM_SETTINGS_ADDRESS, *settings_to_save);
   d45c4:	f004 fcde 	bl	d8f84 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d45c8:	223c      	movs	r2, #60	; 0x3c
   d45ca:	4621      	mov	r1, r4
   d45cc:	2000      	movs	r0, #0
   d45ce:	f002 ffff 	bl	d75d0 <HAL_EEPROM_Put>
  // check if data is saved
  igh_eeprom_read_system_settings(&local_buffer);
   d45d2:	a801      	add	r0, sp, #4
   d45d4:	f7ff ffcc 	bl	d4570 <_Z31igh_eeprom_read_system_settingsP15system_settings>

  if( local_buffer.checksum != (settings_to_save->checksum))
  {
    return 0;
   d45d8:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d45dc:	7823      	ldrb	r3, [r4, #0]
  }

  return 1;
}
   d45de:	1ac3      	subs	r3, r0, r3
   d45e0:	4258      	negs	r0, r3
   d45e2:	4158      	adcs	r0, r3
   d45e4:	b010      	add	sp, #64	; 0x40
   d45e6:	bd10      	pop	{r4, pc}

000d45e8 <_Z34igh_eeprom_read_threshold_settingsP10thresholds>:
 * \brief Gets threshold settings from eeprom emulator
 * \param running_thresholds: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_threshold_settings(thresholds * running_thresholds)
{
   d45e8:	b530      	push	{r4, r5, lr}
   d45ea:	b08f      	sub	sp, #60	; 0x3c
  thresholds local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d45ec:	2234      	movs	r2, #52	; 0x34
   d45ee:	2100      	movs	r1, #0
 * \brief Gets threshold settings from eeprom emulator
 * \param running_thresholds: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_threshold_settings(thresholds * running_thresholds)
{
   d45f0:	4605      	mov	r5, r0
  thresholds local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d45f2:	a801      	add	r0, sp, #4
   d45f4:	f005 fbec 	bl	d9dd0 <memset>
  EEPROM.get(SYSTEM_THRESHOLDS_ADDRESS, local_buffer);
   d45f8:	f004 fcc4 	bl	d8f84 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d45fc:	2234      	movs	r2, #52	; 0x34
   d45fe:	a901      	add	r1, sp, #4
   d4600:	f44f 7000 	mov.w	r0, #512	; 0x200
   d4604:	f002 ffdc 	bl	d75c0 <HAL_EEPROM_Get>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));
   d4608:	2134      	movs	r1, #52	; 0x34
   d460a:	a801      	add	r0, sp, #4
   d460c:	f7ff fd4f 	bl	d40ae <igh_settings_calculate_checksum>
  
  if( checksum != local_buffer.checksum)
   d4610:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4614:	4283      	cmp	r3, r0
   d4616:	d10a      	bne.n	d462e <_Z34igh_eeprom_read_threshold_settingsP10thresholds+0x46>
  {
    return 0;
  }
  
  *running_thresholds = local_buffer;
   d4618:	ac01      	add	r4, sp, #4
   d461a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d461c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d461e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4622:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4624:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4626:	6823      	ldr	r3, [r4, #0]
   d4628:	602b      	str	r3, [r5, #0]
  return 1;
   d462a:	2001      	movs	r0, #1
   d462c:	e000      	b.n	d4630 <_Z34igh_eeprom_read_threshold_settingsP10thresholds+0x48>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));
  
  if( checksum != local_buffer.checksum)
  {
    return 0;
   d462e:	2000      	movs	r0, #0
  }
  
  *running_thresholds = local_buffer;
  return 1;
}
   d4630:	b00f      	add	sp, #60	; 0x3c
   d4632:	bd30      	pop	{r4, r5, pc}

000d4634 <_Z34igh_eeprom_save_threshold_settingsP10thresholds>:
 * \brief Save threshold settings  to eeprom emulator
 * \param settings_to_save: pointer to struct to save
 * \return true or false based on write success
 */
uint8_t igh_eeprom_save_threshold_settings(thresholds * settings_to_save)
{
   d4634:	b510      	push	{r4, lr}
   d4636:	4604      	mov	r4, r0
   d4638:	b08e      	sub	sp, #56	; 0x38
    thresholds local_buffer;
    // save the data
    EEPROM.put(SYSTEM_THRESHOLDS_ADDRESS, *settings_to_save);
   d463a:	f004 fca3 	bl	d8f84 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d463e:	2234      	movs	r2, #52	; 0x34
   d4640:	4621      	mov	r1, r4
   d4642:	f44f 7000 	mov.w	r0, #512	; 0x200
   d4646:	f002 ffc3 	bl	d75d0 <HAL_EEPROM_Put>
    // check if data is saved
    igh_eeprom_read_threshold_settings(&local_buffer);
   d464a:	a801      	add	r0, sp, #4
   d464c:	f7ff ffcc 	bl	d45e8 <_Z34igh_eeprom_read_threshold_settingsP10thresholds>

    if( local_buffer.checksum != (settings_to_save->checksum))
    {
        return 0;
   d4650:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d4654:	7823      	ldrb	r3, [r4, #0]
    }

    return 1;
}
   d4656:	1ac3      	subs	r3, r0, r3
   d4658:	4258      	negs	r0, r3
   d465a:	4158      	adcs	r0, r3
   d465c:	b00e      	add	sp, #56	; 0x38
   d465e:	bd10      	pop	{r4, pc}

000d4660 <_Z21igh_eeprom_get_errorsPm>:
 * \brief Gets errors stored in eeprom
 * \param error_bit_field; uint32 bit fiel to populate
 * \return void
 */
void igh_eeprom_get_errors(uint32_t * error_bit_field)
{
   d4660:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t _error = 0;
   d4662:	ac02      	add	r4, sp, #8
   d4664:	2300      	movs	r3, #0
   d4666:	f844 3d04 	str.w	r3, [r4, #-4]!
 * \brief Gets errors stored in eeprom
 * \param error_bit_field; uint32 bit fiel to populate
 * \return void
 */
void igh_eeprom_get_errors(uint32_t * error_bit_field)
{
   d466a:	4605      	mov	r5, r0
    uint32_t _error = 0;
    EEPROM.get(SYSTEM_ERRORS_ADDRESS, _error);
   d466c:	f004 fc8a 	bl	d8f84 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4670:	2204      	movs	r2, #4
   d4672:	4621      	mov	r1, r4
   d4674:	f44f 6080 	mov.w	r0, #1024	; 0x400
   d4678:	f002 ffa2 	bl	d75c0 <HAL_EEPROM_Get>
    *error_bit_field = _error;
   d467c:	9b01      	ldr	r3, [sp, #4]
   d467e:	602b      	str	r3, [r5, #0]
}
   d4680:	b003      	add	sp, #12
   d4682:	bd30      	pop	{r4, r5, pc}

000d4684 <_Z16igh_eeproom_testv>:
 * \brief Tests that we can read and write to the EEPROM just fine
 * \param void
 * \return true or false
 */
uint8_t igh_eeproom_test(void)
{
   d4684:	b5f0      	push	{r4, r5, r6, r7, lr}
    thresholds test_thresholds;
    system_settings test_system_settings;

    uint8_t test_shield_id[12] = {0xe0,0x0f,0xce,0x68,0x9a,0x75,0x47,0x05,0xe7,0x9a,0x0e,0x37};
   d4686:	4a42      	ldr	r2, [pc, #264]	; (d4790 <_Z16igh_eeproom_testv+0x10c>)
 * \brief Tests that we can read and write to the EEPROM just fine
 * \param void
 * \return true or false
 */
uint8_t igh_eeproom_test(void)
{
   d4688:	b0a5      	sub	sp, #148	; 0x94
    thresholds test_thresholds;
    system_settings test_system_settings;

    uint8_t test_shield_id[12] = {0xe0,0x0f,0xce,0x68,0x9a,0x75,0x47,0x05,0xe7,0x9a,0x0e,0x37};
   d468a:	6810      	ldr	r0, [r2, #0]
   d468c:	6851      	ldr	r1, [r2, #4]
   d468e:	ab01      	add	r3, sp, #4
   d4690:	c303      	stmia	r3!, {r0, r1}
   d4692:	6890      	ldr	r0, [r2, #8]
   d4694:	6018      	str	r0, [r3, #0]
    uint8_t test_broker[] = "test.broker.com";
   d4696:	4b3f      	ldr	r3, [pc, #252]	; (d4794 <_Z16igh_eeproom_testv+0x110>)
   d4698:	aa04      	add	r2, sp, #16
   d469a:	f103 0710 	add.w	r7, r3, #16
   d469e:	ae01      	add	r6, sp, #4
   d46a0:	4615      	mov	r5, r2
   d46a2:	6818      	ldr	r0, [r3, #0]
   d46a4:	6859      	ldr	r1, [r3, #4]
   d46a6:	4614      	mov	r4, r2
   d46a8:	c403      	stmia	r4!, {r0, r1}
   d46aa:	3308      	adds	r3, #8
   d46ac:	42bb      	cmp	r3, r7
   d46ae:	4622      	mov	r2, r4
   d46b0:	d1f7      	bne.n	d46a2 <_Z16igh_eeproom_testv+0x1e>

    memset(&test_system_settings, 0, sizeof(test_system_settings));
   d46b2:	223c      	movs	r2, #60	; 0x3c
   d46b4:	2100      	movs	r1, #0
   d46b6:	a815      	add	r0, sp, #84	; 0x54
   d46b8:	f005 fb8a 	bl	d9dd0 <memset>
    memset(&test_thresholds, 0, sizeof(test_thresholds));
   d46bc:	2234      	movs	r2, #52	; 0x34
   d46be:	2100      	movs	r1, #0
   d46c0:	a808      	add	r0, sp, #32
   d46c2:	f005 fb85 	bl	d9dd0 <memset>

    memcpy(test_system_settings.serial_number, test_shield_id, 12);
   d46c6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   d46ca:	ab18      	add	r3, sp, #96	; 0x60
   d46cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    memcpy(test_system_settings.broker, test_broker, sizeof(test_broker));
   d46d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   d46d4:	ac1b      	add	r4, sp, #108	; 0x6c
   d46d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    test_system_settings.op_state = OP_INACTIVE;
    test_system_settings.reporting_interval = 0x11111111;
   d46da:	f04f 3511 	mov.w	r5, #286331153	; 0x11111111
    test_system_settings.data_resolution = 0x11111111;
    test_system_settings.broker_port = 0x1111;
   d46de:	f241 1411 	movw	r4, #4369	; 0x1111
    test_system_settings.checksum = igh_settings_calculate_checksum(&test_system_settings, sizeof(test_system_settings));
   d46e2:	213c      	movs	r1, #60	; 0x3c
   d46e4:	a815      	add	r0, sp, #84	; 0x54
    memcpy(test_system_settings.serial_number, test_shield_id, 12);
    memcpy(test_system_settings.broker, test_broker, sizeof(test_broker));
    test_system_settings.op_state = OP_INACTIVE;
    test_system_settings.reporting_interval = 0x11111111;
    test_system_settings.data_resolution = 0x11111111;
    test_system_settings.broker_port = 0x1111;
   d46e6:	f8ad 408c 	strh.w	r4, [sp, #140]	; 0x8c
    memset(&test_thresholds, 0, sizeof(test_thresholds));

    memcpy(test_system_settings.serial_number, test_shield_id, 12);
    memcpy(test_system_settings.broker, test_broker, sizeof(test_broker));
    test_system_settings.op_state = OP_INACTIVE;
    test_system_settings.reporting_interval = 0x11111111;
   d46ea:	9516      	str	r5, [sp, #88]	; 0x58
    test_system_settings.data_resolution = 0x11111111;
   d46ec:	9517      	str	r5, [sp, #92]	; 0x5c
    test_system_settings.broker_port = 0x1111;
    test_system_settings.checksum = igh_settings_calculate_checksum(&test_system_settings, sizeof(test_system_settings));
   d46ee:	f7ff fcde 	bl	d40ae <igh_settings_calculate_checksum>
    test_thresholds.shield_battery_level_high = 0x1111;
    test_thresholds.spear_battery_level_low = 0x1111;
    test_thresholds.spear_battery_level_high = 0x1111;
    test_thresholds.water_dispensed_period_high = 0x11111111;
    test_thresholds.water_dispensed_period_low = 0x11111111;
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));
   d46f2:	2134      	movs	r1, #52	; 0x34
    memcpy(test_system_settings.broker, test_broker, sizeof(test_broker));
    test_system_settings.op_state = OP_INACTIVE;
    test_system_settings.reporting_interval = 0x11111111;
    test_system_settings.data_resolution = 0x11111111;
    test_system_settings.broker_port = 0x1111;
    test_system_settings.checksum = igh_settings_calculate_checksum(&test_system_settings, sizeof(test_system_settings));
   d46f4:	f88d 0054 	strb.w	r0, [sp, #84]	; 0x54
    test_thresholds.shield_battery_level_high = 0x1111;
    test_thresholds.spear_battery_level_low = 0x1111;
    test_thresholds.spear_battery_level_high = 0x1111;
    test_thresholds.water_dispensed_period_high = 0x11111111;
    test_thresholds.water_dispensed_period_low = 0x11111111;
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));
   d46f8:	a808      	add	r0, sp, #32
    test_system_settings.reporting_interval = 0x11111111;
    test_system_settings.data_resolution = 0x11111111;
    test_system_settings.broker_port = 0x1111;
    test_system_settings.checksum = igh_settings_calculate_checksum(&test_system_settings, sizeof(test_system_settings));

    test_thresholds.soil_moisture_low = 0x1111;
   d46fa:	f8ad 4022 	strh.w	r4, [sp, #34]	; 0x22
    test_thresholds.soil_moisture_high = 0x1111;
   d46fe:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    test_thresholds.air_humidity_low = 0x1111;
   d4702:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
    test_thresholds.air_humidity_high = 0x1111;
   d4706:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
    test_thresholds.soil_humidity_low = 0x1111;
   d470a:	f8ad 4026 	strh.w	r4, [sp, #38]	; 0x26
    test_thresholds.soil_humidity_high = 0x1111;
   d470e:	f8ad 4040 	strh.w	r4, [sp, #64]	; 0x40
    test_thresholds.carbon_dioxide_low = 0x1111;
   d4712:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
    test_thresholds.carbon_dioxide_high = 0x1111;
   d4716:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
    test_thresholds.air_temperature_low = 0x1111;
   d471a:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
    test_thresholds.air_temperature_high = 0x1111;
   d471e:	f8ad 4044 	strh.w	r4, [sp, #68]	; 0x44
    test_thresholds.soil_temperature_low = 0x1111;
   d4722:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
    test_thresholds.soil_temperature_high = 0x1111;
   d4726:	f8ad 4046 	strh.w	r4, [sp, #70]	; 0x46
    test_thresholds.soil_npk_low = 0x1111;
   d472a:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    test_thresholds.soil_npk_high = 0x1111;
   d472e:	f8ad 4048 	strh.w	r4, [sp, #72]	; 0x48
    test_thresholds.light_intensity_high = 0x1111;
   d4732:	f8ad 404a 	strh.w	r4, [sp, #74]	; 0x4a
    test_thresholds.light_intensity_low = 0x1111;
   d4736:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
    test_thresholds.shield_battery_level_low = 0x1111;
   d473a:	f8ad 4032 	strh.w	r4, [sp, #50]	; 0x32
    test_thresholds.shield_battery_level_high = 0x1111;
   d473e:	f8ad 404c 	strh.w	r4, [sp, #76]	; 0x4c
    test_thresholds.spear_battery_level_low = 0x1111;
   d4742:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    test_thresholds.spear_battery_level_high = 0x1111;
   d4746:	f8ad 404e 	strh.w	r4, [sp, #78]	; 0x4e
    test_thresholds.water_dispensed_period_high = 0x11111111;
   d474a:	9514      	str	r5, [sp, #80]	; 0x50
    test_thresholds.water_dispensed_period_low = 0x11111111;
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));

    uint32_t test_error = 0xAAAAAAAA;
    uint32_t ret_test_error = 0;
   d474c:	ac24      	add	r4, sp, #144	; 0x90
    test_thresholds.shield_battery_level_low = 0x1111;
    test_thresholds.shield_battery_level_high = 0x1111;
    test_thresholds.spear_battery_level_low = 0x1111;
    test_thresholds.spear_battery_level_high = 0x1111;
    test_thresholds.water_dispensed_period_high = 0x11111111;
    test_thresholds.water_dispensed_period_low = 0x11111111;
   d474e:	950e      	str	r5, [sp, #56]	; 0x38
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));
   d4750:	f7ff fcad 	bl	d40ae <igh_settings_calculate_checksum>

    uint32_t test_error = 0xAAAAAAAA;
    uint32_t ret_test_error = 0;
   d4754:	2300      	movs	r3, #0
   d4756:	f844 3d90 	str.w	r3, [r4, #-144]!
    test_thresholds.shield_battery_level_high = 0x1111;
    test_thresholds.spear_battery_level_low = 0x1111;
    test_thresholds.spear_battery_level_high = 0x1111;
    test_thresholds.water_dispensed_period_high = 0x11111111;
    test_thresholds.water_dispensed_period_low = 0x11111111;
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));
   d475a:	f88d 0020 	strb.w	r0, [sp, #32]

    uint32_t test_error = 0xAAAAAAAA;
    uint32_t ret_test_error = 0;
    igh_eeprom_update_errors(test_error);
   d475e:	f04f 30aa 	mov.w	r0, #2863311530	; 0xaaaaaaaa
   d4762:	f7ff fef7 	bl	d4554 <_Z24igh_eeprom_update_errorsm>
    igh_eeprom_get_errors(&ret_test_error);
   d4766:	4620      	mov	r0, r4
   d4768:	f7ff ff7a 	bl	d4660 <_Z21igh_eeprom_get_errorsPm>

    return igh_eeprom_save_system_settings(&test_system_settings)
   d476c:	a815      	add	r0, sp, #84	; 0x54
   d476e:	f7ff ff26 	bl	d45be <_Z31igh_eeprom_save_system_settingsP15system_settings>
           && igh_eeprom_save_threshold_settings(&test_thresholds)
           && (ret_test_error == test_error);
   d4772:	b908      	cbnz	r0, d4778 <_Z16igh_eeproom_testv+0xf4>
   d4774:	2000      	movs	r0, #0
   d4776:	e009      	b.n	d478c <_Z16igh_eeproom_testv+0x108>
    uint32_t ret_test_error = 0;
    igh_eeprom_update_errors(test_error);
    igh_eeprom_get_errors(&ret_test_error);

    return igh_eeprom_save_system_settings(&test_system_settings)
           && igh_eeprom_save_threshold_settings(&test_thresholds)
   d4778:	a808      	add	r0, sp, #32
   d477a:	f7ff ff5b 	bl	d4634 <_Z34igh_eeprom_save_threshold_settingsP10thresholds>
   d477e:	2800      	cmp	r0, #0
   d4780:	d0f8      	beq.n	d4774 <_Z16igh_eeproom_testv+0xf0>
           && (ret_test_error == test_error);
   d4782:	9800      	ldr	r0, [sp, #0]
   d4784:	f1a0 33aa 	sub.w	r3, r0, #2863311530	; 0xaaaaaaaa
   d4788:	4258      	negs	r0, r3
   d478a:	4158      	adcs	r0, r3
}
   d478c:	b025      	add	sp, #148	; 0x94
   d478e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4790:	000d9fe2 	.word	0x000d9fe2
   d4794:	000d9fee 	.word	0x000d9fee

000d4798 <_GLOBAL__sub_I__Z31igh_eeprom_save_system_settingsP15system_settings>:
   d4798:	f002 be3a 	b.w	d7410 <HAL_Pin_Map>

000d479c <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d479c:	6803      	ldr	r3, [r0, #0]
   d479e:	4718      	bx	r3

000d47a0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d47a0:	2a01      	cmp	r2, #1
   d47a2:	d002      	beq.n	d47aa <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d47a4:	2a02      	cmp	r2, #2
   d47a6:	d002      	beq.n	d47ae <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d47a8:	e004      	b.n	d47b4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d47aa:	6001      	str	r1, [r0, #0]
	      break;
   d47ac:	e002      	b.n	d47b4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d47ae:	680b      	ldr	r3, [r1, #0]
   d47b0:	b100      	cbz	r0, d47b4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d47b2:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d47b4:	2000      	movs	r0, #0
   d47b6:	4770      	bx	lr

000d47b8 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d47b8:	6943      	ldr	r3, [r0, #20]
   d47ba:	b113      	cbz	r3, d47c2 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d47bc:	6983      	ldr	r3, [r0, #24]
   d47be:	300c      	adds	r0, #12
   d47c0:	4718      	bx	r3
   d47c2:	4770      	bx	lr

000d47c4 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d47c4:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d47c6:	2100      	movs	r1, #0
   d47c8:	4604      	mov	r4, r0
   d47ca:	4608      	mov	r0, r1
   d47cc:	f002 ff30 	bl	d7630 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d47d0:	a902      	add	r1, sp, #8
   d47d2:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d47d4:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d47d6:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d47da:	f002 ff41 	bl	d7660 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d47de:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d47e0:	b10c      	cbz	r4, d47e6 <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d47e2:	2301      	movs	r3, #1
   d47e4:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d47e6:	2100      	movs	r1, #0
   d47e8:	2001      	movs	r0, #1
   d47ea:	f002 ff21 	bl	d7630 <os_thread_scheduling>
            }
        }
        if (t) {
   d47ee:	b12c      	cbz	r4, d47fc <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d47f0:	6823      	ldr	r3, [r4, #0]
   d47f2:	4620      	mov	r0, r4
   d47f4:	689b      	ldr	r3, [r3, #8]
   d47f6:	4798      	blx	r3
            t->running = false;
   d47f8:	2300      	movs	r3, #0
   d47fa:	7123      	strb	r3, [r4, #4]
        }
    }
   d47fc:	b002      	add	sp, #8
   d47fe:	bd10      	pop	{r4, pc}

000d4800 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4800:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4802:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4804:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4806:	b113      	cbz	r3, d480e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4808:	2203      	movs	r2, #3
   d480a:	4601      	mov	r1, r0
   d480c:	4798      	blx	r3
    }
   d480e:	4620      	mov	r0, r4
   d4810:	bd10      	pop	{r4, pc}

000d4812 <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d4812:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d4814:	6880      	ldr	r0, [r0, #8]
   d4816:	2300      	movs	r3, #0
   d4818:	b138      	cbz	r0, d482a <_ZN5Timer5_stopEjb+0x18>
   d481a:	e88d 000a 	stmia.w	sp, {r1, r3}
   d481e:	2102      	movs	r1, #2
   d4820:	f002 ff26 	bl	d7670 <os_timer_change>
   d4824:	fab0 f080 	clz	r0, r0
   d4828:	0940      	lsrs	r0, r0, #5
    }
   d482a:	b003      	add	sp, #12
   d482c:	f85d fb04 	ldr.w	pc, [sp], #4

000d4830 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4830:	b538      	push	{r3, r4, r5, lr}
   d4832:	4b10      	ldr	r3, [pc, #64]	; (d4874 <_ZN5TimerD1Ev+0x44>)
   d4834:	6003      	str	r3, [r0, #0]
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d4836:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4838:	4604      	mov	r4, r0
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d483a:	b1a3      	cbz	r3, d4866 <_ZN5TimerD1Ev+0x36>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d483c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4840:	2200      	movs	r2, #0
   d4842:	f7ff ffe6 	bl	d4812 <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d4846:	2100      	movs	r1, #0
   d4848:	68a0      	ldr	r0, [r4, #8]
   d484a:	f002 ff29 	bl	d76a0 <os_timer_set_id>
            while (running) {
   d484e:	7923      	ldrb	r3, [r4, #4]
   d4850:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d4854:	b113      	cbz	r3, d485c <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d4856:	f002 fed3 	bl	d7600 <os_thread_yield>
   d485a:	e7f8      	b.n	d484e <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d485c:	4629      	mov	r1, r5
   d485e:	68a0      	ldr	r0, [r4, #8]
   d4860:	f002 fef6 	bl	d7650 <os_timer_destroy>
            handle = nullptr;
   d4864:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4866:	f104 000c 	add.w	r0, r4, #12
   d486a:	f7ff ffc9 	bl	d4800 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d486e:	4620      	mov	r0, r4
   d4870:	bd38      	pop	{r3, r4, r5, pc}
   d4872:	bf00      	nop
   d4874:	000da008 	.word	0x000da008

000d4878 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4878:	b510      	push	{r4, lr}
   d487a:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d487c:	f7ff ffd8 	bl	d4830 <_ZN5TimerD1Ev>
   d4880:	4620      	mov	r0, r4
   d4882:	211c      	movs	r1, #28
   d4884:	f004 fc20 	bl	d90c8 <_ZdlPvj>
   d4888:	4620      	mov	r0, r4
   d488a:	bd10      	pop	{r4, pc}

000d488c <_Z32igh_hardware_service_valve_statev>:
    current_valve_position = VALVE_CLOSE;
}

void igh_hardware_service_valve_state(void)
{
    digitalWrite(IGH_IRRIGATION_VALVE, current_valve_position);
   d488c:	4b02      	ldr	r3, [pc, #8]	; (d4898 <_Z32igh_hardware_service_valve_statev+0xc>)
   d488e:	2007      	movs	r0, #7
   d4890:	7819      	ldrb	r1, [r3, #0]
   d4892:	f004 bb4a 	b.w	d8f2a <digitalWrite>
   d4896:	bf00      	nop
   d4898:	2003ddb5 	.word	0x2003ddb5

000d489c <_Z20igh_hardware_servicev>:
    igh_hardware_vlave_setup();
}

void igh_hardware_service(void)
{
    igh_hardware_service_valve_state();
   d489c:	f7ff bff6 	b.w	d488c <_Z32igh_hardware_service_valve_statev>

000d48a0 <_Z29igh_hardware_test_valve_statev>:
{
    digitalWrite(IGH_IRRIGATION_VALVE, current_valve_position);
}

uint8_t igh_hardware_test_valve_state(void)
{
   d48a0:	b508      	push	{r3, lr}
    return digitalRead(IGH_IRRIGATION_VALVE);
   d48a2:	2007      	movs	r0, #7
   d48a4:	f004 fb5a 	bl	d8f5c <digitalRead>
}
   d48a8:	b2c0      	uxtb	r0, r0
   d48aa:	bd08      	pop	{r3, pc}

000d48ac <_Z26igh_boron_toggle_boron_ledh>:


/* Onboard LED APIs */
void igh_boron_toggle_boron_led(uint8_t _state)
{
    digitalWrite(BORON_LED, _state);
   d48ac:	4601      	mov	r1, r0
   d48ae:	2007      	movs	r0, #7
   d48b0:	f004 bb3b 	b.w	d8f2a <digitalWrite>

000d48b4 <_Z18igh_hardware_setupv>:
static void igh_hardware_irrigiation_button_setup(void);
static void igh_hardware_onboard_led_setup(void);
static void igh_hardware_vlave_setup(void);

void igh_hardware_setup(void)
{
   d48b4:	b513      	push	{r0, r1, r4, lr}


/* Button APIs */
static void igh_hardware_irrigiation_button_setup(void)
{
    pinMode(IGH_IRRIGATION_BUTTON, INPUT_PULLUP);
   d48b6:	2102      	movs	r1, #2
   d48b8:	2005      	movs	r0, #5
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d48ba:	4c12      	ldr	r4, [pc, #72]	; (d4904 <_Z18igh_hardware_setupv+0x50>)
   d48bc:	f004 fb24 	bl	d8f08 <pinMode>
   d48c0:	2200      	movs	r2, #0
   d48c2:	4611      	mov	r1, r2
   d48c4:	4620      	mov	r0, r4
   d48c6:	f7ff ffa4 	bl	d4812 <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d48ca:	68a0      	ldr	r0, [r4, #8]
   d48cc:	b140      	cbz	r0, d48e0 <_Z18igh_hardware_setupv+0x2c>
   d48ce:	2300      	movs	r3, #0
   d48d0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d48d4:	e88d 000c 	stmia.w	sp, {r2, r3}
   d48d8:	4619      	mov	r1, r3
   d48da:	461a      	mov	r2, r3
   d48dc:	f002 fec8 	bl	d7670 <os_timer_change>
    igh_button_timer.start();
    igh_button_sec_counter = 0;
   d48e0:	4b09      	ldr	r3, [pc, #36]	; (d4908 <_Z18igh_hardware_setupv+0x54>)
   d48e2:	2400      	movs	r4, #0
    digitalWrite(BORON_LED, _state);
}

static void igh_hardware_onboard_led_setup(void)
{
    pinMode(BORON_LED, OUTPUT);
   d48e4:	2101      	movs	r1, #1
   d48e6:	2007      	movs	r0, #7
/* Button APIs */
static void igh_hardware_irrigiation_button_setup(void)
{
    pinMode(IGH_IRRIGATION_BUTTON, INPUT_PULLUP);
    igh_button_timer.start();
    igh_button_sec_counter = 0;
   d48e8:	701c      	strb	r4, [r3, #0]
    digitalWrite(BORON_LED, _state);
}

static void igh_hardware_onboard_led_setup(void)
{
    pinMode(BORON_LED, OUTPUT);
   d48ea:	f004 fb0d 	bl	d8f08 <pinMode>
    igh_boron_toggle_boron_led(OFF);
   d48ee:	4620      	mov	r0, r4
   d48f0:	f7ff ffdc 	bl	d48ac <_Z26igh_boron_toggle_boron_ledh>


/* Valve control APIs */
static void igh_hardware_vlave_setup(void)
{
    pinMode(IGH_IRRIGATION_VALVE, OUTPUT);
   d48f4:	2101      	movs	r1, #1
   d48f6:	2007      	movs	r0, #7
   d48f8:	f004 fb06 	bl	d8f08 <pinMode>
    current_valve_position = VALVE_CLOSE;
   d48fc:	4b03      	ldr	r3, [pc, #12]	; (d490c <_Z18igh_hardware_setupv+0x58>)
   d48fe:	701c      	strb	r4, [r3, #0]
void igh_hardware_setup(void)
{
    igh_hardware_irrigiation_button_setup();
    igh_hardware_onboard_led_setup();
    igh_hardware_vlave_setup();
}
   d4900:	b002      	add	sp, #8
   d4902:	bd10      	pop	{r4, pc}
   d4904:	2003ddb8 	.word	0x2003ddb8
   d4908:	2003ddb6 	.word	0x2003ddb6
   d490c:	2003ddb5 	.word	0x2003ddb5

000d4910 <_Z21igh_boron_read_buttonv>:
    igh_button_timer.start();
    igh_button_sec_counter = 0;
}

uint8_t igh_boron_read_button(void)
{
   d4910:	b508      	push	{r3, lr}
    return digitalRead(IGH_IRRIGATION_BUTTON);
   d4912:	2005      	movs	r0, #5
   d4914:	f004 fb22 	bl	d8f5c <digitalRead>
}
   d4918:	b2c0      	uxtb	r0, r0
   d491a:	bd08      	pop	{r3, pc}

000d491c <_Z31igh_boron_button_press_durationv>:

void igh_boron_button_press_duration(void)
{
   d491c:	b508      	push	{r3, lr}
    if(!igh_boron_read_button())
   d491e:	f7ff fff7 	bl	d4910 <_Z21igh_boron_read_buttonv>
   d4922:	4b04      	ldr	r3, [pc, #16]	; (d4934 <_Z31igh_boron_button_press_durationv+0x18>)
   d4924:	b910      	cbnz	r0, d492c <_Z31igh_boron_button_press_durationv+0x10>
    {
        igh_button_sec_counter++;
   d4926:	781a      	ldrb	r2, [r3, #0]
   d4928:	3201      	adds	r2, #1
   d492a:	e000      	b.n	d492e <_Z31igh_boron_button_press_durationv+0x12>
    }
    else
    {
        igh_button_sec_counter = 0;
   d492c:	2200      	movs	r2, #0
   d492e:	701a      	strb	r2, [r3, #0]
   d4930:	bd08      	pop	{r3, pc}
   d4932:	bf00      	nop
   d4934:	2003ddb6 	.word	0x2003ddb6

000d4938 <_GLOBAL__sub_I_igh_button_sec_counter>:
    } 
   d4938:	b570      	push	{r4, r5, r6, lr}
   d493a:	b088      	sub	sp, #32
   d493c:	f002 fd68 	bl	d7410 <HAL_Pin_Map>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d4940:	4b19      	ldr	r3, [pc, #100]	; (d49a8 <_GLOBAL__sub_I_igh_button_sec_counter+0x70>)
   d4942:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4944:	ad04      	add	r5, sp, #16
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d4946:	4c19      	ldr	r4, [pc, #100]	; (d49ac <_GLOBAL__sub_I_igh_button_sec_counter+0x74>)
   d4948:	4b19      	ldr	r3, [pc, #100]	; (d49b0 <_GLOBAL__sub_I_igh_button_sec_counter+0x78>)
   d494a:	6023      	str	r3, [r4, #0]
   d494c:	e895 0003 	ldmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4950:	f104 020c 	add.w	r2, r4, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4954:	ae02      	add	r6, sp, #8
   d4956:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d495a:	e892 0003 	ldmia.w	r2, {r0, r1}
   d495e:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4962:	e896 0003 	ldmia.w	r6, {r0, r1}
   d4966:	e882 0003 	stmia.w	r2, {r0, r1}
   d496a:	4a12      	ldr	r2, [pc, #72]	; (d49b4 <_GLOBAL__sub_I_igh_button_sec_counter+0x7c>)
   d496c:	6162      	str	r2, [r4, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d496e:	69a2      	ldr	r2, [r4, #24]
   d4970:	9207      	str	r2, [sp, #28]
   d4972:	2300      	movs	r3, #0
      __b = _GLIBCXX_MOVE(__tmp);
   d4974:	4a10      	ldr	r2, [pc, #64]	; (d49b8 <_GLOBAL__sub_I_igh_button_sec_counter+0x80>)
   d4976:	7123      	strb	r3, [r4, #4]
   d4978:	60a3      	str	r3, [r4, #8]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d497a:	9306      	str	r3, [sp, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   d497c:	61a2      	str	r2, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d497e:	9301      	str	r3, [sp, #4]
   d4980:	9300      	str	r3, [sp, #0]
   d4982:	4a0e      	ldr	r2, [pc, #56]	; (d49bc <_GLOBAL__sub_I_igh_button_sec_counter+0x84>)
   d4984:	4623      	mov	r3, r4
   d4986:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d498a:	f104 0008 	add.w	r0, r4, #8
   d498e:	f002 fe57 	bl	d7640 <os_timer_create>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4992:	4628      	mov	r0, r5
   d4994:	f7ff ff34 	bl	d4800 <_ZNSt14_Function_baseD1Ev>
#include "Particle.h"
#include "igh_hardware.h"

// button global variables
uint8_t igh_button_sec_counter;
Timer igh_button_timer(1000, igh_boron_button_press_duration);
   d4998:	4a09      	ldr	r2, [pc, #36]	; (d49c0 <_GLOBAL__sub_I_igh_button_sec_counter+0x88>)
   d499a:	490a      	ldr	r1, [pc, #40]	; (d49c4 <_GLOBAL__sub_I_igh_button_sec_counter+0x8c>)
   d499c:	4620      	mov	r0, r4
   d499e:	f004 fb85 	bl	d90ac <__aeabi_atexit>
    }
    else
    {
        igh_button_sec_counter = 0;
    } 
   d49a2:	b008      	add	sp, #32
   d49a4:	bd70      	pop	{r4, r5, r6, pc}
   d49a6:	bf00      	nop
   d49a8:	000d491d 	.word	0x000d491d
   d49ac:	2003ddb8 	.word	0x2003ddb8
   d49b0:	000da008 	.word	0x000da008
   d49b4:	000d47a1 	.word	0x000d47a1
   d49b8:	000d479d 	.word	0x000d479d
   d49bc:	000d47c5 	.word	0x000d47c5
   d49c0:	2003dd9c 	.word	0x2003dd9c
   d49c4:	000d4831 	.word	0x000d4831

000d49c8 <_ZN14CellularSignalD1Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d49c8:	4770      	bx	lr

000d49ca <_ZN14CellularSignalD0Ev>:
   d49ca:	b510      	push	{r4, lr}
   d49cc:	2128      	movs	r1, #40	; 0x28
   d49ce:	4604      	mov	r4, r0
   d49d0:	f004 fb7a 	bl	d90c8 <_ZdlPvj>
   d49d4:	4620      	mov	r0, r4
   d49d6:	bd10      	pop	{r4, pc}

000d49d8 <_Z19igh_boron_sync_timev>:
float battery_voltage, battery_SOC;
unsigned long unix_time;

/* Functions */
void igh_boron_sync_time(void)
{
   d49d8:	b510      	push	{r4, lr}
   d49da:	f002 fdd9 	bl	d7590 <HAL_Timer_Get_Milli_Seconds>
    if((millis() - lastSync > ONE_DAY_MILLIS))
   d49de:	4b08      	ldr	r3, [pc, #32]	; (d4a00 <_Z19igh_boron_sync_timev+0x28>)
   d49e0:	681a      	ldr	r2, [r3, #0]
   d49e2:	1a80      	subs	r0, r0, r2
   d49e4:	4a07      	ldr	r2, [pc, #28]	; (d4a04 <_Z19igh_boron_sync_timev+0x2c>)
   d49e6:	4290      	cmp	r0, r2
   d49e8:	461c      	mov	r4, r3
   d49ea:	d908      	bls.n	d49fe <_Z19igh_boron_sync_timev+0x26>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d49ec:	f002 ffdc 	bl	d79a8 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d49f0:	b110      	cbz	r0, d49f8 <_Z19igh_boron_sync_timev+0x20>
            return false;
        }
        return spark_sync_time(NULL);
   d49f2:	2000      	movs	r0, #0
   d49f4:	f002 ffe0 	bl	d79b8 <spark_sync_time>
   d49f8:	f002 fdca 	bl	d7590 <HAL_Timer_Get_Milli_Seconds>
    {
        Particle.syncTime();
        lastSync = millis(); 
   d49fc:	6020      	str	r0, [r4, #0]
   d49fe:	bd10      	pop	{r4, pc}
   d4a00:	2003ddfc 	.word	0x2003ddfc
   d4a04:	05265c00 	.word	0x05265c00

000d4a08 <_Z13igh_boron_SoCv>:
    return Time.now();
}

float igh_boron_SoC(void)
{
    return fuel.getSoC();
   d4a08:	4801      	ldr	r0, [pc, #4]	; (d4a10 <_Z13igh_boron_SoCv+0x8>)
   d4a0a:	f003 bd6f 	b.w	d84ec <_ZN9FuelGauge6getSoCEv>
   d4a0e:	bf00      	nop
   d4a10:	2003de00 	.word	0x2003de00

000d4a14 <_Z17igh_boron_voltagev>:
}

float igh_boron_voltage(void)
{
    return fuel.getVCell();
   d4a14:	4801      	ldr	r0, [pc, #4]	; (d4a1c <_Z17igh_boron_voltagev+0x8>)
   d4a16:	f003 bd53 	b.w	d84c0 <_ZN9FuelGauge8getVCellEv>
   d4a1a:	bf00      	nop
   d4a1c:	2003de00 	.word	0x2003de00

000d4a20 <_Z26igh_boron_get_celular_datav>:
}

void igh_boron_get_celular_data(void)
{
   d4a20:	b530      	push	{r4, r5, lr}
   d4a22:	b08b      	sub	sp, #44	; 0x2c
    signal = Cellular.RSSI();
   d4a24:	4668      	mov	r0, sp
#include "cellular_enums_hal.h"

/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
   d4a26:	4c09      	ldr	r4, [pc, #36]	; (d4a4c <_Z26igh_boron_get_celular_datav+0x2c>)
   d4a28:	4909      	ldr	r1, [pc, #36]	; (d4a50 <_Z26igh_boron_get_celular_datav+0x30>)
   d4a2a:	f003 ff69 	bl	d8900 <_ZN5spark13CellularClass4RSSIEv>
   d4a2e:	9b02      	ldr	r3, [sp, #8]
   d4a30:	60a3      	str	r3, [r4, #8]
   d4a32:	ad04      	add	r5, sp, #16
   d4a34:	9b03      	ldr	r3, [sp, #12]
   d4a36:	60e3      	str	r3, [r4, #12]
   d4a38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4a3a:	3410      	adds	r4, #16
   d4a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4a3e:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4a42:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d4a46:	b00b      	add	sp, #44	; 0x2c
   d4a48:	bd30      	pop	{r4, r5, pc}
   d4a4a:	bf00      	nop
   d4a4c:	2003ddd4 	.word	0x2003ddd4
   d4a50:	2003e3e4 	.word	0x2003e3e4

000d4a54 <_Z12igh_boron_ssv>:
    return signal.getQuality();
}

float igh_boron_ss(void)
{
    return signal.getQuality();
   d4a54:	4801      	ldr	r0, [pc, #4]	; (d4a5c <_Z12igh_boron_ssv+0x8>)
   d4a56:	f003 bc61 	b.w	d831c <_ZNK14CellularSignal10getQualityEv>
   d4a5a:	bf00      	nop
   d4a5c:	2003ddd4 	.word	0x2003ddd4

000d4a60 <_Z30igh_boron_connecetd_to_networkv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4a60:	4b02      	ldr	r3, [pc, #8]	; (d4a6c <_Z30igh_boron_connecetd_to_networkv+0xc>)
   d4a62:	2200      	movs	r2, #0
   d4a64:	4611      	mov	r1, r2
   d4a66:	6858      	ldr	r0, [r3, #4]
   d4a68:	f002 bf5e 	b.w	d7928 <network_ready>
   d4a6c:	2003e3e4 	.word	0x2003e3e4

000d4a70 <_Z15igh_boron_setupv>:
{
    return Particle.connected();;
}

void igh_boron_setup(void)
{
   d4a70:	b508      	push	{r3, lr}
   d4a72:	f002 fd8d 	bl	d7590 <HAL_Timer_Get_Milli_Seconds>
    lastSync = millis();
   d4a76:	4b01      	ldr	r3, [pc, #4]	; (d4a7c <_Z15igh_boron_setupv+0xc>)
   d4a78:	6018      	str	r0, [r3, #0]
   d4a7a:	bd08      	pop	{r3, pc}
   d4a7c:	2003ddfc 	.word	0x2003ddfc

000d4a80 <_Z17igh_boron_servicev>:
}

void igh_boron_service(void)
{
   d4a80:	b508      	push	{r3, lr}
    igh_boron_sync_time();
   d4a82:	f7ff ffa9 	bl	d49d8 <_Z19igh_boron_sync_timev>
    igh_boron_get_celular_data();
}
   d4a86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void igh_boron_service(void)
{
    igh_boron_sync_time();
    igh_boron_get_celular_data();
   d4a8a:	f7ff bfc9 	b.w	d4a20 <_Z26igh_boron_get_celular_datav>
	...

000d4a90 <_Z21igh_boron_test_devicev>:
}

void igh_boron_test_device(void)
{
   d4a90:	b510      	push	{r4, lr}
    Serial.print("\nUnix Time:      "); Serial.println(igh_boron_unix_time());
   d4a92:	f003 fead 	bl	d87f0 <_Z16_fetch_usbserialv>
   d4a96:	4937      	ldr	r1, [pc, #220]	; (d4b74 <_Z21igh_boron_test_devicev+0xe4>)
   d4a98:	f003 fa62 	bl	d7f60 <_ZN5Print5printEPKc>
   d4a9c:	f003 fea8 	bl	d87f0 <_Z16_fetch_usbserialv>
   d4aa0:	4604      	mov	r4, r0
    }
}

unsigned long igh_boron_unix_time(void)
{
    return Time.now();
   d4aa2:	f003 fbe3 	bl	d826c <_ZN9TimeClass3nowEv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4aa6:	220a      	movs	r2, #10
   d4aa8:	4601      	mov	r1, r0
   d4aaa:	4620      	mov	r0, r4
   d4aac:	f003 fa75 	bl	d7f9a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4ab0:	4620      	mov	r0, r4
   d4ab2:	f003 fa5c 	bl	d7f6e <_ZN5Print7printlnEv>
}

void igh_boron_test_device(void)
{
    Serial.print("\nUnix Time:      "); Serial.println(igh_boron_unix_time());
    Serial.print("cloud status:     "); Serial.println(igh_boron_connected_to_cloud());
   d4ab6:	f003 fe9b 	bl	d87f0 <_Z16_fetch_usbserialv>
   d4aba:	492f      	ldr	r1, [pc, #188]	; (d4b78 <_Z21igh_boron_test_devicev+0xe8>)
   d4abc:	f003 fa50 	bl	d7f60 <_ZN5Print5printEPKc>
   d4ac0:	f003 fe96 	bl	d87f0 <_Z16_fetch_usbserialv>
   d4ac4:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4ac6:	f002 ff6f 	bl	d79a8 <spark_cloud_flag_connected>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4aca:	220a      	movs	r2, #10
   d4acc:	4601      	mov	r1, r0
   d4ace:	4620      	mov	r0, r4
   d4ad0:	f003 fa63 	bl	d7f9a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4ad4:	4620      	mov	r0, r4
   d4ad6:	f003 fa4a 	bl	d7f6e <_ZN5Print7printlnEv>
    Serial.print("network status:   "); Serial.println(igh_boron_connecetd_to_network());
   d4ada:	f003 fe89 	bl	d87f0 <_Z16_fetch_usbserialv>
   d4ade:	4927      	ldr	r1, [pc, #156]	; (d4b7c <_Z21igh_boron_test_devicev+0xec>)
   d4ae0:	f003 fa3e 	bl	d7f60 <_ZN5Print5printEPKc>
   d4ae4:	f003 fe84 	bl	d87f0 <_Z16_fetch_usbserialv>
   d4ae8:	4604      	mov	r4, r0
   d4aea:	f7ff ffb9 	bl	d4a60 <_Z30igh_boron_connecetd_to_networkv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4aee:	220a      	movs	r2, #10
   d4af0:	4601      	mov	r1, r0
   d4af2:	4620      	mov	r0, r4
   d4af4:	f003 fa51 	bl	d7f9a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4af8:	4620      	mov	r0, r4
   d4afa:	f003 fa38 	bl	d7f6e <_ZN5Print7printlnEv>
    Serial.print("signal strength:  "); Serial.println(igh_boron_ss());
   d4afe:	f003 fe77 	bl	d87f0 <_Z16_fetch_usbserialv>
   d4b02:	491f      	ldr	r1, [pc, #124]	; (d4b80 <_Z21igh_boron_test_devicev+0xf0>)
   d4b04:	f003 fa2c 	bl	d7f60 <_ZN5Print5printEPKc>
   d4b08:	f003 fe72 	bl	d87f0 <_Z16_fetch_usbserialv>
   d4b0c:	4604      	mov	r4, r0
   d4b0e:	f7ff ffa1 	bl	d4a54 <_Z12igh_boron_ssv>
   d4b12:	2102      	movs	r1, #2
   d4b14:	4620      	mov	r0, r4
   d4b16:	f003 fb2a 	bl	d816e <_ZN5Print7printlnEfi>
    Serial.print("signal quality:   "); Serial.println(igh_boron_sq());
   d4b1a:	f003 fe69 	bl	d87f0 <_Z16_fetch_usbserialv>
   d4b1e:	4919      	ldr	r1, [pc, #100]	; (d4b84 <_Z21igh_boron_test_devicev+0xf4>)
   d4b20:	f003 fa1e 	bl	d7f60 <_ZN5Print5printEPKc>
   d4b24:	f003 fe64 	bl	d87f0 <_Z16_fetch_usbserialv>
   d4b28:	4604      	mov	r4, r0
   d4b2a:	f7ff ff93 	bl	d4a54 <_Z12igh_boron_ssv>
   d4b2e:	2102      	movs	r1, #2
   d4b30:	4620      	mov	r0, r4
   d4b32:	f003 fb1c 	bl	d816e <_ZN5Print7printlnEfi>
    Serial.print("Battery Voltage:  "); Serial.println(igh_boron_voltage());
   d4b36:	f003 fe5b 	bl	d87f0 <_Z16_fetch_usbserialv>
   d4b3a:	4913      	ldr	r1, [pc, #76]	; (d4b88 <_Z21igh_boron_test_devicev+0xf8>)
   d4b3c:	f003 fa10 	bl	d7f60 <_ZN5Print5printEPKc>
   d4b40:	f003 fe56 	bl	d87f0 <_Z16_fetch_usbserialv>
   d4b44:	4604      	mov	r4, r0
   d4b46:	f7ff ff65 	bl	d4a14 <_Z17igh_boron_voltagev>
   d4b4a:	2102      	movs	r1, #2
   d4b4c:	4620      	mov	r0, r4
   d4b4e:	f003 fb0e 	bl	d816e <_ZN5Print7printlnEfi>
    Serial.print("Battery SOC:      "); Serial.println(igh_boron_SoC());
   d4b52:	f003 fe4d 	bl	d87f0 <_Z16_fetch_usbserialv>
   d4b56:	490d      	ldr	r1, [pc, #52]	; (d4b8c <_Z21igh_boron_test_devicev+0xfc>)
   d4b58:	f003 fa02 	bl	d7f60 <_ZN5Print5printEPKc>
   d4b5c:	f003 fe48 	bl	d87f0 <_Z16_fetch_usbserialv>
   d4b60:	4604      	mov	r4, r0
   d4b62:	f7ff ff51 	bl	d4a08 <_Z13igh_boron_SoCv>
   d4b66:	4620      	mov	r0, r4
   d4b68:	2102      	movs	r1, #2
}
   d4b6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.print("cloud status:     "); Serial.println(igh_boron_connected_to_cloud());
    Serial.print("network status:   "); Serial.println(igh_boron_connecetd_to_network());
    Serial.print("signal strength:  "); Serial.println(igh_boron_ss());
    Serial.print("signal quality:   "); Serial.println(igh_boron_sq());
    Serial.print("Battery Voltage:  "); Serial.println(igh_boron_voltage());
    Serial.print("Battery SOC:      "); Serial.println(igh_boron_SoC());
   d4b6e:	f003 bafe 	b.w	d816e <_ZN5Print7printlnEfi>
   d4b72:	bf00      	nop
   d4b74:	000da014 	.word	0x000da014
   d4b78:	000da026 	.word	0x000da026
   d4b7c:	000da039 	.word	0x000da039
   d4b80:	000da04c 	.word	0x000da04c
   d4b84:	000da05f 	.word	0x000da05f
   d4b88:	000da072 	.word	0x000da072
   d4b8c:	000da085 	.word	0x000da085

000d4b90 <_GLOBAL__sub_I_lastSync>:
}
   d4b90:	b570      	push	{r4, r5, r6, lr}
   d4b92:	f002 fc3d 	bl	d7410 <HAL_Pin_Map>
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d4b96:	4c10      	ldr	r4, [pc, #64]	; (d4bd8 <_GLOBAL__sub_I_lastSync+0x48>)
   d4b98:	4b10      	ldr	r3, [pc, #64]	; (d4bdc <_GLOBAL__sub_I_lastSync+0x4c>)
   d4b9a:	6023      	str	r3, [r4, #0]
   d4b9c:	2500      	movs	r5, #0
   d4b9e:	3328      	adds	r3, #40	; 0x28
   d4ba0:	4629      	mov	r1, r5
#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)

unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
   d4ba2:	4e0f      	ldr	r6, [pc, #60]	; (d4be0 <_GLOBAL__sub_I_lastSync+0x50>)
   d4ba4:	6063      	str	r3, [r4, #4]
   d4ba6:	2218      	movs	r2, #24
   d4ba8:	f104 0010 	add.w	r0, r4, #16
   d4bac:	60a5      	str	r5, [r4, #8]
   d4bae:	60e5      	str	r5, [r4, #12]
   d4bb0:	f005 f90e 	bl	d9dd0 <memset>
   d4bb4:	4620      	mov	r0, r4
float signal_quality, signal_strength;
FuelGauge fuel;
   d4bb6:	4c0b      	ldr	r4, [pc, #44]	; (d4be4 <_GLOBAL__sub_I_lastSync+0x54>)
#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)

unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
   d4bb8:	490b      	ldr	r1, [pc, #44]	; (d4be8 <_GLOBAL__sub_I_lastSync+0x58>)
   d4bba:	4632      	mov	r2, r6
   d4bbc:	f004 fa76 	bl	d90ac <__aeabi_atexit>
float signal_quality, signal_strength;
FuelGauge fuel;
   d4bc0:	4629      	mov	r1, r5
   d4bc2:	4620      	mov	r0, r4
   d4bc4:	f003 fc3c 	bl	d8440 <_ZN9FuelGaugeC1Eb>
   d4bc8:	4632      	mov	r2, r6
   d4bca:	4620      	mov	r0, r4
   d4bcc:	4907      	ldr	r1, [pc, #28]	; (d4bec <_GLOBAL__sub_I_lastSync+0x5c>)
    Serial.print("network status:   "); Serial.println(igh_boron_connecetd_to_network());
    Serial.print("signal strength:  "); Serial.println(igh_boron_ss());
    Serial.print("signal quality:   "); Serial.println(igh_boron_sq());
    Serial.print("Battery Voltage:  "); Serial.println(igh_boron_voltage());
    Serial.print("Battery SOC:      "); Serial.println(igh_boron_SoC());
}
   d4bce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
float signal_quality, signal_strength;
FuelGauge fuel;
   d4bd2:	f004 ba6b 	b.w	d90ac <__aeabi_atexit>
   d4bd6:	bf00      	nop
   d4bd8:	2003ddd4 	.word	0x2003ddd4
   d4bdc:	000da2cc 	.word	0x000da2cc
   d4be0:	2003dd9c 	.word	0x2003dd9c
   d4be4:	2003de00 	.word	0x2003de00
   d4be8:	000d49c9 	.word	0x000d49c9
   d4bec:	000d845f 	.word	0x000d845f

000d4bf0 <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
   d4bf0:	f002 bc0e 	b.w	d7410 <HAL_Pin_Map>

000d4bf4 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d4bf4:	7c03      	ldrb	r3, [r0, #16]
   d4bf6:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d4bfa:	4602      	mov	r2, r0
   d4bfc:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d4c00:	b12b      	cbz	r3, d4c0e <_ZN4File9availableEv+0x1a>
   d4c02:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d4c04:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d4c06:	1a18      	subs	r0, r3, r0
   d4c08:	bf48      	it	mi
   d4c0a:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d4c0e:	4770      	bx	lr

000d4c10 <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
   d4c10:	4770      	bx	lr

000d4c12 <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d4c12:	4770      	bx	lr

000d4c14 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4c14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4c16:	4602      	mov	r2, r0
   d4c18:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4c1a:	7913      	ldrb	r3, [r2, #4]
   d4c1c:	6895      	ldr	r5, [r2, #8]
   d4c1e:	b133      	cbz	r3, d4c2e <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d4c20:	b93d      	cbnz	r5, d4c32 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d4c22:	490c      	ldr	r1, [pc, #48]	; (d4c54 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d4c24:	b004      	add	sp, #16
   d4c26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d4c2a:	f003 b999 	b.w	d7f60 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d4c2e:	4b0a      	ldr	r3, [pc, #40]	; (d4c58 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d4c30:	e000      	b.n	d4c34 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d4c32:	4b0a      	ldr	r3, [pc, #40]	; (d4c5c <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d4c34:	7b16      	ldrb	r6, [r2, #12]
   d4c36:	4c0a      	ldr	r4, [pc, #40]	; (d4c60 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d4c38:	490a      	ldr	r1, [pc, #40]	; (d4c64 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4c3a:	7b52      	ldrb	r2, [r2, #13]
   d4c3c:	9202      	str	r2, [sp, #8]
   d4c3e:	2e01      	cmp	r6, #1
   d4c40:	bf08      	it	eq
   d4c42:	4621      	moveq	r1, r4
   d4c44:	9101      	str	r1, [sp, #4]
   d4c46:	9500      	str	r5, [sp, #0]
   d4c48:	4a07      	ldr	r2, [pc, #28]	; (d4c68 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d4c4a:	2100      	movs	r1, #0
   d4c4c:	f003 fa9e 	bl	d818c <_ZN5Print11printf_implEbPKcz>
  }
   d4c50:	b004      	add	sp, #16
   d4c52:	bd70      	pop	{r4, r5, r6, pc}
   d4c54:	000da0f5 	.word	0x000da0f5
   d4c58:	000da261 	.word	0x000da261
   d4c5c:	000da0e4 	.word	0x000da0e4
   d4c60:	000da0ed 	.word	0x000da0ed
   d4c64:	000da0f1 	.word	0x000da0f1
   d4c68:	000da10b 	.word	0x000da10b

000d4c6c <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d4c6c:	3010      	adds	r0, #16
   d4c6e:	f001 b869 	b.w	d5d44 <_ZN7FatFile4syncEv>

000d4c72 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d4c72:	3010      	adds	r0, #16
   d4c74:	f000 bf40 	b.w	d5af8 <_ZN7FatFile4peekEv>

000d4c78 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d4c78:	3010      	adds	r0, #16
   d4c7a:	f001 b903 	b.w	d5e84 <_ZN7FatFile5writeEPKvj>

000d4c7e <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d4c7e:	3008      	adds	r0, #8
   d4c80:	f001 b900 	b.w	d5e84 <_ZN7FatFile5writeEPKvj>

000d4c84 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d4c84:	b507      	push	{r0, r1, r2, lr}
   d4c86:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d4c88:	2201      	movs	r2, #1
   d4c8a:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d4c8e:	3010      	adds	r0, #16
   d4c90:	4619      	mov	r1, r3
   d4c92:	f001 f8f7 	bl	d5e84 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d4c96:	b003      	add	sp, #12
   d4c98:	f85d fb04 	ldr.w	pc, [sp], #4

000d4c9c <_ZN6SdFileD0Ev>:
   d4c9c:	b510      	push	{r4, lr}
   d4c9e:	212c      	movs	r1, #44	; 0x2c
   d4ca0:	4604      	mov	r4, r0
   d4ca2:	f004 fa11 	bl	d90c8 <_ZdlPvj>
   d4ca6:	4620      	mov	r0, r4
   d4ca8:	bd10      	pop	{r4, pc}

000d4caa <_ZN4FileD0Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d4caa:	b510      	push	{r4, lr}
   d4cac:	2134      	movs	r1, #52	; 0x34
   d4cae:	4604      	mov	r4, r0
   d4cb0:	f004 fa0a 	bl	d90c8 <_ZdlPvj>
   d4cb4:	4620      	mov	r0, r4
   d4cb6:	bd10      	pop	{r4, pc}

000d4cb8 <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d4cb8:	b507      	push	{r0, r1, r2, lr}
   d4cba:	ab02      	add	r3, sp, #8
   d4cbc:	2201      	movs	r2, #1
   d4cbe:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d4cc2:	3008      	adds	r0, #8
   d4cc4:	4619      	mov	r1, r3
   d4cc6:	f001 f8dd 	bl	d5e84 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d4cca:	b003      	add	sp, #12
   d4ccc:	f85d fb04 	ldr.w	pc, [sp], #4

000d4cd0 <_ZN7FatFile4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
   d4cd0:	b507      	push	{r0, r1, r2, lr}
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d4cd2:	2201      	movs	r2, #1
   d4cd4:	f10d 0107 	add.w	r1, sp, #7
   d4cd8:	f000 fe5b 	bl	d5992 <_ZN7FatFile4readEPvj>
   d4cdc:	2801      	cmp	r0, #1
   d4cde:	bf0c      	ite	eq
   d4ce0:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d4ce4:	f04f 30ff 	movne.w	r0, #4294967295
  }
   d4ce8:	b003      	add	sp, #12
   d4cea:	f85d fb04 	ldr.w	pc, [sp], #4

000d4cee <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d4cee:	b508      	push	{r3, lr}
    return FatFile::read();
   d4cf0:	3010      	adds	r0, #16
   d4cf2:	f7ff ffed 	bl	d4cd0 <_ZN7FatFile4readEv>
  }
   d4cf6:	bd08      	pop	{r3, pc}

000d4cf8 <_ZN4File15rewindDirectoryEv>:
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (isDir()) {
   d4cf8:	7c03      	ldrb	r3, [r0, #16]
   d4cfa:	f013 0f70 	tst.w	r3, #112	; 0x70
   d4cfe:	d003      	beq.n	d4d08 <_ZN4File15rewindDirectoryEv+0x10>
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d4d00:	2100      	movs	r1, #0
   d4d02:	3010      	adds	r0, #16
   d4d04:	f000 bf28 	b.w	d5b58 <_ZN7FatFile7seekSetEm>
   d4d08:	4770      	bx	lr
	...

000d4d0c <_Z16igh_sd_log_setupv>:
 * convertedt to a character string
 * eg: 2E78FA2E.LOG
*/

uint8_t igh_sd_log_setup(void)
{
   d4d0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4d0e:	4820      	ldr	r0, [pc, #128]	; (d4d90 <_Z16igh_sd_log_setupv+0x84>)
    if(sd_root.isOpen()) sd_root.close();
   d4d10:	7a03      	ldrb	r3, [r0, #8]
   d4d12:	b113      	cbz	r3, d4d1a <_Z16igh_sd_log_setupv+0xe>
   d4d14:	3008      	adds	r0, #8
   d4d16:	f001 f84b 	bl	d5db0 <_ZN7FatFile5closeEv>
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4d1a:	4c1e      	ldr	r4, [pc, #120]	; (d4d94 <_Z16igh_sd_log_setupv+0x88>)
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d4d1c:	4b1e      	ldr	r3, [pc, #120]	; (d4d98 <_Z16igh_sd_log_setupv+0x8c>)
   d4d1e:	4a1f      	ldr	r2, [pc, #124]	; (d4d9c <_Z16igh_sd_log_setupv+0x90>)
   d4d20:	9300      	str	r3, [sp, #0]
   d4d22:	f504 668c 	add.w	r6, r4, #1120	; 0x460
   d4d26:	2300      	movs	r3, #0
   d4d28:	f88d 3004 	strb.w	r3, [sp, #4]
   d4d2c:	9202      	str	r2, [sp, #8]
   d4d2e:	2501      	movs	r5, #1
   d4d30:	f88d 300d 	strb.w	r3, [sp, #13]
   d4d34:	220e      	movs	r2, #14
   d4d36:	466b      	mov	r3, sp
   d4d38:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   d4d3c:	4630      	mov	r0, r6
   d4d3e:	f88d 500c 	strb.w	r5, [sp, #12]
   d4d42:	f001 fbe7 	bl	d6514 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d4d46:	b300      	cbz	r0, d4d8a <_Z16igh_sd_log_setupv+0x7e>
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d4d48:	f204 403c 	addw	r0, r4, #1084	; 0x43c
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d4d4c:	6026      	str	r6, [r4, #0]
    vwd()->close();
   d4d4e:	f001 f82f 	bl	d5db0 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d4d52:	4629      	mov	r1, r5
   d4d54:	4620      	mov	r0, r4
   d4d56:	f001 fa86 	bl	d6266 <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d4d5a:	4601      	mov	r1, r0
   d4d5c:	b180      	cbz	r0, d4d80 <_Z16igh_sd_log_setupv+0x74>
   d4d5e:	4c0d      	ldr	r4, [pc, #52]	; (d4d94 <_Z16igh_sd_log_setupv+0x88>)
   d4d60:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   d4d64:	4621      	mov	r1, r4
   d4d66:	4628      	mov	r0, r5
   d4d68:	f000 fdfb 	bl	d5962 <_ZN7FatFile8openRootEP9FatVolume>
   d4d6c:	b168      	cbz	r0, d4d8a <_Z16igh_sd_log_setupv+0x7e>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d4d6e:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d4d72:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
   d4d76:	bf16      	itet	ne
   d4d78:	4b09      	ldrne	r3, [pc, #36]	; (d4da0 <_Z16igh_sd_log_setupv+0x94>)
   d4d7a:	4618      	moveq	r0, r3
   d4d7c:	601d      	strne	r5, [r3, #0]
   d4d7e:	e005      	b.n	d4d8c <_Z16igh_sd_log_setupv+0x80>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d4d80:	4620      	mov	r0, r4
   d4d82:	f001 fa70 	bl	d6266 <_ZN9FatVolume4initEh>
   d4d86:	2800      	cmp	r0, #0
   d4d88:	d1e9      	bne.n	d4d5e <_Z16igh_sd_log_setupv+0x52>
   d4d8a:	2000      	movs	r0, #0
    return igh_sd.begin(IGH_SD_CS);
}
   d4d8c:	b004      	add	sp, #16
   d4d8e:	bd70      	pop	{r4, r5, r6, pc}
   d4d90:	2003e2c4 	.word	0x2003e2c4
   d4d94:	2003de40 	.word	0x2003de40
   d4d98:	000da0a0 	.word	0x000da0a0
   d4d9c:	02faf080 	.word	0x02faf080
   d4da0:	2003e324 	.word	0x2003e324

000d4da4 <_Z24igh_sd_log_get_file_namemPc>:
{
    igh_file.rewindDirectory();
}

void igh_sd_log_get_file_name(unsigned long _unix_time, char * file_name)
{
   d4da4:	b507      	push	{r0, r1, r2, lr}
   d4da6:	4602      	mov	r2, r0
    sprintf(file_name, "%02X%02X%02X%02X.LOG", 
    (uint8_t)(_unix_time >> 24), 
    (uint8_t)(_unix_time >> 16), 
    (uint8_t)(_unix_time >> 8), 
    (uint8_t)(_unix_time));
   d4da8:	b2d3      	uxtb	r3, r2
   d4daa:	9301      	str	r3, [sp, #4]
   d4dac:	f3c2 2307 	ubfx	r3, r2, #8, #8
   d4db0:	9300      	str	r3, [sp, #0]
{
    igh_file.rewindDirectory();
}

void igh_sd_log_get_file_name(unsigned long _unix_time, char * file_name)
{
   d4db2:	4608      	mov	r0, r1
    sprintf(file_name, "%02X%02X%02X%02X.LOG", 
    (uint8_t)(_unix_time >> 24), 
    (uint8_t)(_unix_time >> 16), 
    (uint8_t)(_unix_time >> 8), 
    (uint8_t)(_unix_time));
   d4db4:	f3c2 4307 	ubfx	r3, r2, #16, #8
   d4db8:	4903      	ldr	r1, [pc, #12]	; (d4dc8 <_Z24igh_sd_log_get_file_namemPc+0x24>)
   d4dba:	0e12      	lsrs	r2, r2, #24
   d4dbc:	f002 fe2c 	bl	d7a18 <sprintf>
}
   d4dc0:	b003      	add	sp, #12
   d4dc2:	f85d fb04 	ldr.w	pc, [sp], #4
   d4dc6:	bf00      	nop
   d4dc8:	000da129 	.word	0x000da129

000d4dcc <_Z26igh_sd_log_save_data_pointmPhh>:

uint8_t igh_sd_log_save_data_point(unsigned long _unix_time, uint8_t * data, uint8_t size)
{
   d4dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4dce:	b093      	sub	sp, #76	; 0x4c
   d4dd0:	460f      	mov	r7, r1
    char name[FILE_NAME_SIZE]; // include the null terminator?
    igh_sd_log_get_file_name(_unix_time, name);
   d4dd2:	a901      	add	r1, sp, #4
   d4dd4:	f7ff ffe6 	bl	d4da4 <_Z24igh_sd_log_get_file_namemPc>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4dd8:	2300      	movs	r3, #0
   d4dda:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d4dde:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4de2:	9306      	str	r3, [sp, #24]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4de4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4de8:	9307      	str	r3, [sp, #28]
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 public:
  File() {}
   d4dea:	4b13      	ldr	r3, [pc, #76]	; (d4e38 <_Z26igh_sd_log_save_data_pointmPhh+0x6c>)
   d4dec:	9305      	str	r3, [sp, #20]
   * \param[in] oflag open flags.
   * \return a File object.
   */
  File open(const char *path, oflag_t oflag = FILE_READ) {
    File tmpFile;
    tmpFile.open(vwd(), path, oflag);
   d4dee:	aa01      	add	r2, sp, #4
   d4df0:	f244 2302 	movw	r3, #16898	; 0x4202
   d4df4:	4911      	ldr	r1, [pc, #68]	; (d4e3c <_Z26igh_sd_log_save_data_pointmPhh+0x70>)
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d4df6:	4e12      	ldr	r6, [pc, #72]	; (d4e40 <_Z26igh_sd_log_save_data_pointmPhh+0x74>)
   d4df8:	a809      	add	r0, sp, #36	; 0x24
   d4dfa:	ac09      	add	r4, sp, #36	; 0x24
   d4dfc:	f000 ffdf 	bl	d5dbe <_ZN7FatFile4openEPS_PKci>
   d4e00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4e02:	f106 0510 	add.w	r5, r6, #16
   d4e06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4e08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4e0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4e0c:	6823      	ldr	r3, [r4, #0]
   d4e0e:	602b      	str	r3, [r5, #0]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
   d4e10:	9b06      	ldr	r3, [sp, #24]
   d4e12:	6073      	str	r3, [r6, #4]
    igh_file = igh_sd.open((const char *)name, FILE_WRITE);

    if(igh_file)
   d4e14:	7c30      	ldrb	r0, [r6, #16]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   d4e16:	9b07      	ldr	r3, [sp, #28]
   d4e18:	60b3      	str	r3, [r6, #8]
   d4e1a:	9b08      	ldr	r3, [sp, #32]
   d4e1c:	60f3      	str	r3, [r6, #12]
   d4e1e:	b140      	cbz	r0, d4e32 <_Z26igh_sd_log_save_data_pointmPhh+0x66>
    {
        igh_file.println((const char *)data);
   d4e20:	4639      	mov	r1, r7
   d4e22:	4630      	mov	r0, r6
   d4e24:	f003 f8af 	bl	d7f86 <_ZN5Print7printlnEPKc>
        igh_file.close();
   d4e28:	f1a5 0020 	sub.w	r0, r5, #32
   d4e2c:	f000 ffc0 	bl	d5db0 <_ZN7FatFile5closeEv>
   d4e30:	2001      	movs	r0, #1
    }
    else
    {
        return 0;
    }
}
   d4e32:	b013      	add	sp, #76	; 0x4c
   d4e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4e36:	bf00      	nop
   d4e38:	000da0ac 	.word	0x000da0ac
   d4e3c:	2003e27c 	.word	0x2003e27c
   d4e40:	2003e2f0 	.word	0x2003e2f0

000d4e44 <_Z28igh_sd_log_remove_data_pointPc>:
  *
  * \return The value true is returned for success and
  * the value false is returned for failure.
  */
  bool remove(const char* path) {
    return FatFile::remove(vwd(), path);
   d4e44:	4601      	mov	r1, r0
   d4e46:	4801      	ldr	r0, [pc, #4]	; (d4e4c <_Z28igh_sd_log_remove_data_pointPc+0x8>)
   d4e48:	f001 b808 	b.w	d5e5c <_ZN7FatFile6removeEPS_PKc>
   d4e4c:	2003e27c 	.word	0x2003e27c

000d4e50 <_Z24igh_sd_log_clear_sd_datav>:
{
    return igh_sd.remove(file_name);
}

uint8_t igh_sd_log_clear_sd_data(void)
{
   d4e50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if(!igh_sd_log_setup())
   d4e52:	f7ff ff5b 	bl	d4d0c <_Z16igh_sd_log_setupv>
   d4e56:	b908      	cbnz	r0, d4e5c <_Z24igh_sd_log_clear_sd_datav+0xc>
    {
        return 0;
   d4e58:	2000      	movs	r0, #0
   d4e5a:	e023      	b.n	d4ea4 <_Z24igh_sd_log_clear_sd_datav+0x54>
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d4e5c:	4913      	ldr	r1, [pc, #76]	; (d4eac <_Z24igh_sd_log_clear_sd_datav+0x5c>)
   d4e5e:	4a14      	ldr	r2, [pc, #80]	; (d4eb0 <_Z24igh_sd_log_clear_sd_datav+0x60>)
   d4e60:	6809      	ldr	r1, [r1, #0]
   d4e62:	4814      	ldr	r0, [pc, #80]	; (d4eb4 <_Z24igh_sd_log_clear_sd_datav+0x64>)
   d4e64:	2300      	movs	r3, #0
   d4e66:	f000 ffaa 	bl	d5dbe <_ZN7FatFile4openEPS_PKci>
    }

    if (!sd_root.open("/"))
   d4e6a:	2800      	cmp	r0, #0
   d4e6c:	d0f4      	beq.n	d4e58 <_Z24igh_sd_log_clear_sd_datav+0x8>
    {
        return 0;
    }
    else
    {
        while ( next_file.openNext(&sd_root, O_RDONLY) )
   d4e6e:	2200      	movs	r2, #0
   d4e70:	4910      	ldr	r1, [pc, #64]	; (d4eb4 <_Z24igh_sd_log_clear_sd_datav+0x64>)
   d4e72:	4811      	ldr	r0, [pc, #68]	; (d4eb8 <_Z24igh_sd_log_clear_sd_datav+0x68>)
   d4e74:	f000 ff27 	bl	d5cc6 <_ZN7FatFile8openNextEPS_i>
   d4e78:	b180      	cbz	r0, d4e9c <_Z24igh_sd_log_clear_sd_datav+0x4c>
        {
            char file_to_delete[FILE_NAME_SIZE];
            memset(file_to_delete, '\0', FILE_NAME_SIZE);
   d4e7a:	220d      	movs	r2, #13
   d4e7c:	2100      	movs	r1, #0
   d4e7e:	4668      	mov	r0, sp
   d4e80:	f004 ffa6 	bl	d9dd0 <memset>

            next_file.getSFN(file_to_delete);
   d4e84:	4669      	mov	r1, sp
   d4e86:	480c      	ldr	r0, [pc, #48]	; (d4eb8 <_Z24igh_sd_log_clear_sd_datav+0x68>)
   d4e88:	f000 fcce 	bl	d5828 <_ZN7FatFile6getSFNEPc>
            next_file.close();
   d4e8c:	480a      	ldr	r0, [pc, #40]	; (d4eb8 <_Z24igh_sd_log_clear_sd_datav+0x68>)
   d4e8e:	f000 ff8f 	bl	d5db0 <_ZN7FatFile5closeEv>
   d4e92:	4669      	mov	r1, sp
   d4e94:	4809      	ldr	r0, [pc, #36]	; (d4ebc <_Z24igh_sd_log_clear_sd_datav+0x6c>)
   d4e96:	f000 ffe1 	bl	d5e5c <_ZN7FatFile6removeEPS_PKc>
   d4e9a:	e7e8      	b.n	d4e6e <_Z24igh_sd_log_clear_sd_datav+0x1e>
            igh_sd.remove(file_to_delete);
        }
        igh_file.rewindDirectory();
   d4e9c:	4808      	ldr	r0, [pc, #32]	; (d4ec0 <_Z24igh_sd_log_clear_sd_datav+0x70>)
   d4e9e:	f7ff ff2b 	bl	d4cf8 <_ZN4File15rewindDirectoryEv>
   d4ea2:	2001      	movs	r0, #1
        return 1;
    }
}
   d4ea4:	b005      	add	sp, #20
   d4ea6:	f85d fb04 	ldr.w	pc, [sp], #4
   d4eaa:	bf00      	nop
   d4eac:	2003e324 	.word	0x2003e324
   d4eb0:	000da13e 	.word	0x000da13e
   d4eb4:	2003e2cc 	.word	0x2003e2cc
   d4eb8:	2003de1c 	.word	0x2003de1c
   d4ebc:	2003e27c 	.word	0x2003e27c
   d4ec0:	2003e2f0 	.word	0x2003e2f0

000d4ec4 <_Z26igh_sd_log_read_data_pointPcPhh>:

uint8_t igh_sd_log_read_data_point(char * file_name, uint8_t * buffer, uint8_t data_length)
{
   d4ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4ec8:	b08e      	sub	sp, #56	; 0x38
   d4eca:	4690      	mov	r8, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4ecc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4ed0:	9203      	str	r2, [sp, #12]
 public:
  File() {}
   d4ed2:	4a18      	ldr	r2, [pc, #96]	; (d4f34 <_Z26igh_sd_log_read_data_pointPcPhh+0x70>)
   d4ed4:	9201      	str	r2, [sp, #4]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4ed6:	2300      	movs	r3, #0
   * \param[in] oflag open flags.
   * \return a File object.
   */
  File open(const char *path, oflag_t oflag = FILE_READ) {
    File tmpFile;
    tmpFile.open(vwd(), path, oflag);
   d4ed8:	4602      	mov	r2, r0
   d4eda:	460f      	mov	r7, r1
   d4edc:	a805      	add	r0, sp, #20
   d4ede:	4916      	ldr	r1, [pc, #88]	; (d4f38 <_Z26igh_sd_log_read_data_pointPcPhh+0x74>)
   d4ee0:	f88d 3014 	strb.w	r3, [sp, #20]
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d4ee4:	ac05      	add	r4, sp, #20
   d4ee6:	f88d 3015 	strb.w	r3, [sp, #21]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4eea:	9302      	str	r3, [sp, #8]
   d4eec:	f000 ff67 	bl	d5dbe <_ZN7FatFile4openEPS_PKci>
   d4ef0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4ef2:	4e12      	ldr	r6, [pc, #72]	; (d4f3c <_Z26igh_sd_log_read_data_pointPcPhh+0x78>)
   d4ef4:	f106 0510 	add.w	r5, r6, #16
   d4ef8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4efa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4efc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4efe:	6823      	ldr	r3, [r4, #0]
   d4f00:	602b      	str	r3, [r5, #0]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
   d4f02:	9b02      	ldr	r3, [sp, #8]
   d4f04:	6073      	str	r3, [r6, #4]
    igh_file = igh_sd.open( (const char *)file_name );
    if(igh_file)
   d4f06:	7c30      	ldrb	r0, [r6, #16]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   d4f08:	9b03      	ldr	r3, [sp, #12]
   d4f0a:	60b3      	str	r3, [r6, #8]
   d4f0c:	9b04      	ldr	r3, [sp, #16]
   d4f0e:	60f3      	str	r3, [r6, #12]
   d4f10:	b160      	cbz	r0, d4f2c <_Z26igh_sd_log_read_data_pointPcPhh+0x68>
   d4f12:	463c      	mov	r4, r7
    {
        for(int i = 0; i < data_length; i++)
   d4f14:	1be3      	subs	r3, r4, r7
   d4f16:	4598      	cmp	r8, r3
        {
            buffer[i] = igh_file.read(); // read data_len number of chars
        }
        igh_file.close();
   d4f18:	4809      	ldr	r0, [pc, #36]	; (d4f40 <_Z26igh_sd_log_read_data_pointPcPhh+0x7c>)
uint8_t igh_sd_log_read_data_point(char * file_name, uint8_t * buffer, uint8_t data_length)
{
    igh_file = igh_sd.open( (const char *)file_name );
    if(igh_file)
    {
        for(int i = 0; i < data_length; i++)
   d4f1a:	dd04      	ble.n	d4f26 <_Z26igh_sd_log_read_data_pointPcPhh+0x62>
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    return FatFile::read();
   d4f1c:	f7ff fed8 	bl	d4cd0 <_ZN7FatFile4readEv>
        {
            buffer[i] = igh_file.read(); // read data_len number of chars
   d4f20:	f804 0b01 	strb.w	r0, [r4], #1
   d4f24:	e7f6      	b.n	d4f14 <_Z26igh_sd_log_read_data_pointPcPhh+0x50>
        }
        igh_file.close();
   d4f26:	f000 ff43 	bl	d5db0 <_ZN7FatFile5closeEv>
   d4f2a:	2001      	movs	r0, #1
    }
    else
    {
        return 0;
    }   
}
   d4f2c:	b00e      	add	sp, #56	; 0x38
   d4f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4f32:	bf00      	nop
   d4f34:	000da0ac 	.word	0x000da0ac
   d4f38:	2003e27c 	.word	0x2003e27c
   d4f3c:	2003e2f0 	.word	0x2003e2f0
   d4f40:	2003e300 	.word	0x2003e300

000d4f44 <_Z29igh_sd_log_get_next_file_namePc>:

uint8_t igh_sd_log_get_next_file_name(char * next_file_name)
{
   d4f44:	b510      	push	{r4, lr}
   d4f46:	4604      	mov	r4, r0
    if(!igh_sd_log_setup())
   d4f48:	f7ff fee0 	bl	d4d0c <_Z16igh_sd_log_setupv>
   d4f4c:	b908      	cbnz	r0, d4f52 <_Z29igh_sd_log_get_next_file_namePc+0xe>
    {
        return 0;
   d4f4e:	2000      	movs	r0, #0
   d4f50:	bd10      	pop	{r4, pc}
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d4f52:	4910      	ldr	r1, [pc, #64]	; (d4f94 <_Z29igh_sd_log_get_next_file_namePc+0x50>)
   d4f54:	4a10      	ldr	r2, [pc, #64]	; (d4f98 <_Z29igh_sd_log_get_next_file_namePc+0x54>)
   d4f56:	6809      	ldr	r1, [r1, #0]
   d4f58:	4810      	ldr	r0, [pc, #64]	; (d4f9c <_Z29igh_sd_log_get_next_file_namePc+0x58>)
   d4f5a:	2300      	movs	r3, #0
   d4f5c:	f000 ff2f 	bl	d5dbe <_ZN7FatFile4openEPS_PKci>
    }

    if (!sd_root.open("/"))
   d4f60:	2800      	cmp	r0, #0
   d4f62:	d0f4      	beq.n	d4f4e <_Z29igh_sd_log_get_next_file_namePc+0xa>
    {
        return 0;
    }
    else
    {
        next_file.openNext(&sd_root, O_RDONLY); // skip one index
   d4f64:	2200      	movs	r2, #0
   d4f66:	490d      	ldr	r1, [pc, #52]	; (d4f9c <_Z29igh_sd_log_get_next_file_namePc+0x58>)
   d4f68:	480d      	ldr	r0, [pc, #52]	; (d4fa0 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d4f6a:	f000 feac 	bl	d5cc6 <_ZN7FatFile8openNextEPS_i>
        next_file.close(); 
   d4f6e:	480c      	ldr	r0, [pc, #48]	; (d4fa0 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d4f70:	f000 ff1e 	bl	d5db0 <_ZN7FatFile5closeEv>
        if( next_file.openNext(&sd_root, O_RDONLY) )
   d4f74:	2200      	movs	r2, #0
   d4f76:	4909      	ldr	r1, [pc, #36]	; (d4f9c <_Z29igh_sd_log_get_next_file_namePc+0x58>)
   d4f78:	4809      	ldr	r0, [pc, #36]	; (d4fa0 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d4f7a:	f000 fea4 	bl	d5cc6 <_ZN7FatFile8openNextEPS_i>
   d4f7e:	2800      	cmp	r0, #0
   d4f80:	d0e5      	beq.n	d4f4e <_Z29igh_sd_log_get_next_file_namePc+0xa>
        {
            next_file.getSFN(next_file_name);
   d4f82:	4621      	mov	r1, r4
   d4f84:	4806      	ldr	r0, [pc, #24]	; (d4fa0 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d4f86:	f000 fc4f 	bl	d5828 <_ZN7FatFile6getSFNEPc>
            next_file.close(); 
   d4f8a:	4805      	ldr	r0, [pc, #20]	; (d4fa0 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d4f8c:	f000 ff10 	bl	d5db0 <_ZN7FatFile5closeEv>
   d4f90:	2001      	movs	r0, #1
        else
        {
            return 0;
        }    
    }
}
   d4f92:	bd10      	pop	{r4, pc}
   d4f94:	2003e324 	.word	0x2003e324
   d4f98:	000da13e 	.word	0x000da13e
   d4f9c:	2003e2cc 	.word	0x2003e2cc
   d4fa0:	2003de1c 	.word	0x2003de1c

000d4fa4 <_Z15igh_sd_log_testv>:

uint8_t igh_sd_log_test(void)
{
   d4fa4:	b510      	push	{r4, lr}
   d4fa6:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
    if( !igh_sd_log_clear_sd_data() )
   d4faa:	f7ff ff51 	bl	d4e50 <_Z24igh_sd_log_clear_sd_datav>
   d4fae:	b908      	cbnz	r0, d4fb4 <_Z15igh_sd_log_testv+0x10>
    {
        return 0;
   d4fb0:	2000      	movs	r0, #0
   d4fb2:	e033      	b.n	d501c <_Z15igh_sd_log_testv+0x78>
    }

    unsigned long test_timestamp = random(2015707648); 
   d4fb4:	481b      	ldr	r0, [pc, #108]	; (d5024 <_Z15igh_sd_log_testv+0x80>)
   d4fb6:	f003 fe04 	bl	d8bc2 <_Z6randomi>

    uint8_t size = MAX_FILE_SIZE;
    uint8_t data[size];

    memset(data, 't', size);
   d4fba:	22ff      	movs	r2, #255	; 0xff
    if( !igh_sd_log_clear_sd_data() )
    {
        return 0;
    }

    unsigned long test_timestamp = random(2015707648); 
   d4fbc:	4604      	mov	r4, r0

    uint8_t size = MAX_FILE_SIZE;
    uint8_t data[size];

    memset(data, 't', size);
   d4fbe:	2174      	movs	r1, #116	; 0x74
   d4fc0:	a808      	add	r0, sp, #32
   d4fc2:	f004 ff05 	bl	d9dd0 <memset>
    if ( !igh_sd_log_save_data_point(test_timestamp, data, size) )
   d4fc6:	22ff      	movs	r2, #255	; 0xff
   d4fc8:	a908      	add	r1, sp, #32
   d4fca:	4620      	mov	r0, r4
   d4fcc:	f7ff fefe 	bl	d4dcc <_Z26igh_sd_log_save_data_pointmPhh>
   d4fd0:	2800      	cmp	r0, #0
   d4fd2:	d0ed      	beq.n	d4fb0 <_Z15igh_sd_log_testv+0xc>
        return 0;
    }

    char test_name[FILE_NAME_SIZE];
    uint8_t test_buffer[size];
    igh_sd_log_get_file_name(test_timestamp, test_name);
   d4fd4:	4669      	mov	r1, sp
   d4fd6:	4620      	mov	r0, r4
   d4fd8:	f7ff fee4 	bl	d4da4 <_Z24igh_sd_log_get_file_namemPc>

    if( !igh_sd_log_read_data_point(test_name, test_buffer, size) )
   d4fdc:	22ff      	movs	r2, #255	; 0xff
   d4fde:	a948      	add	r1, sp, #288	; 0x120
   d4fe0:	4668      	mov	r0, sp
   d4fe2:	f7ff ff6f 	bl	d4ec4 <_Z26igh_sd_log_read_data_pointPcPhh>
   d4fe6:	2800      	cmp	r0, #0
   d4fe8:	d0e2      	beq.n	d4fb0 <_Z15igh_sd_log_testv+0xc>
    {
        return 0;
    }

    if ( 0 != memcmp( data, test_buffer, size) )
   d4fea:	22ff      	movs	r2, #255	; 0xff
   d4fec:	a948      	add	r1, sp, #288	; 0x120
   d4fee:	a808      	add	r0, sp, #32
   d4ff0:	f004 fed4 	bl	d9d9c <memcmp>
   d4ff4:	2800      	cmp	r0, #0
   d4ff6:	d1db      	bne.n	d4fb0 <_Z15igh_sd_log_testv+0xc>
        return 0;
    }

    char read_name[FILE_NAME_SIZE];

    if( !igh_sd_log_get_next_file_name(read_name) )
   d4ff8:	a804      	add	r0, sp, #16
   d4ffa:	f7ff ffa3 	bl	d4f44 <_Z29igh_sd_log_get_next_file_namePc>
   d4ffe:	2800      	cmp	r0, #0
   d5000:	d0d6      	beq.n	d4fb0 <_Z15igh_sd_log_testv+0xc>
    {
        return 0;
    }

    
    if( 0 != memcmp( test_name, read_name, FILE_NAME_SIZE) )
   d5002:	220d      	movs	r2, #13
   d5004:	a904      	add	r1, sp, #16
   d5006:	4668      	mov	r0, sp
   d5008:	f004 fec8 	bl	d9d9c <memcmp>
   d500c:	2800      	cmp	r0, #0
   d500e:	d1cf      	bne.n	d4fb0 <_Z15igh_sd_log_testv+0xc>
    {
        return 0;
    }

    if( !igh_sd_log_remove_data_point(read_name) )
   d5010:	a804      	add	r0, sp, #16
   d5012:	f7ff ff17 	bl	d4e44 <_Z28igh_sd_log_remove_data_pointPc>

uint8_t igh_sd_log_test(void)
{
    if( !igh_sd_log_clear_sd_data() )
    {
        return 0;
   d5016:	3000      	adds	r0, #0
   d5018:	bf18      	it	ne
   d501a:	2001      	movne	r0, #1
    {
        return 0;
    }

    return 1;
   d501c:	f50d 7d08 	add.w	sp, sp, #544	; 0x220
   d5020:	bd10      	pop	{r4, pc}
   d5022:	bf00      	nop
   d5024:	78254200 	.word	0x78254200

000d5028 <_GLOBAL__sub_I_igh_sd>:
   d5028:	b570      	push	{r4, r5, r6, lr}
   d502a:	f002 f9f1 	bl	d7410 <HAL_Pin_Map>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d502e:	4b27      	ldr	r3, [pc, #156]	; (d50cc <_GLOBAL__sub_I_igh_sd+0xa4>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5030:	4e27      	ldr	r6, [pc, #156]	; (d50d0 <_GLOBAL__sub_I_igh_sd+0xa8>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d5032:	2164      	movs	r1, #100	; 0x64
   d5034:	f883 1460 	strb.w	r1, [r3, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d5038:	4926      	ldr	r1, [pc, #152]	; (d50d4 <_GLOBAL__sub_I_igh_sd+0xac>)
   d503a:	f8c3 1470 	str.w	r1, [r3, #1136]	; 0x470
   d503e:	2101      	movs	r1, #1
   d5040:	f883 1474 	strb.w	r1, [r3, #1140]	; 0x474
   d5044:	6831      	ldr	r1, [r6, #0]
   d5046:	2200      	movs	r2, #0
   d5048:	f011 0501 	ands.w	r5, r1, #1
   d504c:	71da      	strb	r2, [r3, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d504e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
   d5052:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
   d5056:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
   d505a:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   d505e:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
   d5062:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
   d5066:	461c      	mov	r4, r3
   d5068:	d10a      	bne.n	d5080 <_GLOBAL__sub_I_igh_sd+0x58>
   d506a:	4630      	mov	r0, r6
   d506c:	f7ff f817 	bl	d409e <__cxa_guard_acquire>
   d5070:	b130      	cbz	r0, d5080 <_GLOBAL__sub_I_igh_sd+0x58>
   d5072:	4629      	mov	r1, r5
   d5074:	4818      	ldr	r0, [pc, #96]	; (d50d8 <_GLOBAL__sub_I_igh_sd+0xb0>)
   d5076:	f002 fd23 	bl	d7ac0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d507a:	4630      	mov	r0, r6
   d507c:	f7ff f814 	bl	d40a8 <__cxa_guard_release>
   d5080:	4816      	ldr	r0, [pc, #88]	; (d50dc <_GLOBAL__sub_I_igh_sd+0xb4>)
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d5082:	4b15      	ldr	r3, [pc, #84]	; (d50d8 <_GLOBAL__sub_I_igh_sd+0xb0>)
   d5084:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d5088:	2400      	movs	r4, #0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d508a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d508e:	7404      	strb	r4, [r0, #16]
   d5090:	7444      	strb	r4, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5092:	6044      	str	r4, [r0, #4]
   d5094:	6083      	str	r3, [r0, #8]
#include <SPI.h>
#include "SdFat.h"
#include "igh_sd_log.h"

SdFat igh_sd;
File igh_file;
   d5096:	4a12      	ldr	r2, [pc, #72]	; (d50e0 <_GLOBAL__sub_I_igh_sd+0xb8>)
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 public:
  File() {}
   d5098:	4b12      	ldr	r3, [pc, #72]	; (d50e4 <_GLOBAL__sub_I_igh_sd+0xbc>)
   d509a:	4913      	ldr	r1, [pc, #76]	; (d50e8 <_GLOBAL__sub_I_igh_sd+0xc0>)
   d509c:	6003      	str	r3, [r0, #0]
   d509e:	f004 f805 	bl	d90ac <__aeabi_atexit>
   d50a2:	4812      	ldr	r0, [pc, #72]	; (d50ec <_GLOBAL__sub_I_igh_sd+0xc4>)
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 public:
  SdFile() {}
   d50a4:	4d12      	ldr	r5, [pc, #72]	; (d50f0 <_GLOBAL__sub_I_igh_sd+0xc8>)
   d50a6:	7204      	strb	r4, [r0, #8]
   d50a8:	7244      	strb	r4, [r0, #9]
   d50aa:	6044      	str	r4, [r0, #4]
SdFile sd_root;
   d50ac:	4a0c      	ldr	r2, [pc, #48]	; (d50e0 <_GLOBAL__sub_I_igh_sd+0xb8>)
   d50ae:	4911      	ldr	r1, [pc, #68]	; (d50f4 <_GLOBAL__sub_I_igh_sd+0xcc>)
   d50b0:	6005      	str	r5, [r0, #0]
   d50b2:	f003 fffb 	bl	d90ac <__aeabi_atexit>
   d50b6:	4810      	ldr	r0, [pc, #64]	; (d50f8 <_GLOBAL__sub_I_igh_sd+0xd0>)
SdFile next_file;
   d50b8:	4a09      	ldr	r2, [pc, #36]	; (d50e0 <_GLOBAL__sub_I_igh_sd+0xb8>)
   d50ba:	7204      	strb	r4, [r0, #8]
   d50bc:	7244      	strb	r4, [r0, #9]
   d50be:	6044      	str	r4, [r0, #4]
   d50c0:	6005      	str	r5, [r0, #0]
   d50c2:	490c      	ldr	r1, [pc, #48]	; (d50f4 <_GLOBAL__sub_I_igh_sd+0xcc>)
    {
        return 0;
    }

    return 1;
   d50c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#include "igh_sd_log.h"

SdFat igh_sd;
File igh_file;
SdFile sd_root;
SdFile next_file;
   d50c8:	f003 bff0 	b.w	d90ac <__aeabi_atexit>
   d50cc:	2003de40 	.word	0x2003de40
   d50d0:	2003de08 	.word	0x2003de08
   d50d4:	000da0a0 	.word	0x000da0a0
   d50d8:	2003de0c 	.word	0x2003de0c
   d50dc:	2003e2f0 	.word	0x2003e2f0
   d50e0:	2003dd9c 	.word	0x2003dd9c
   d50e4:	000da0ac 	.word	0x000da0ac
   d50e8:	000d4c13 	.word	0x000d4c13
   d50ec:	2003e2c4 	.word	0x2003e2c4
   d50f0:	000da0d4 	.word	0x000da0d4
   d50f4:	000d4c11 	.word	0x000d4c11
   d50f8:	2003de14 	.word	0x2003de14

000d50fc <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d50fc:	f002 b988 	b.w	d7410 <HAL_Pin_Map>

000d5100 <_GLOBAL__sub_I__ZN7istream3getEv>:
   d5100:	f002 b986 	b.w	d7410 <HAL_Pin_Map>

000d5104 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d5104:	b510      	push	{r4, lr}
   d5106:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5108:	3024      	adds	r0, #36	; 0x24
   d510a:	f000 ff9d 	bl	d6048 <_ZN8FatCache4syncEv>
   d510e:	b128      	cbz	r0, d511c <_ZN9FatVolume9cacheSyncEv+0x18>
   d5110:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d5114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5118:	f000 bf96 	b.w	d6048 <_ZN8FatCache4syncEv>
  }
   d511c:	bd10      	pop	{r4, pc}

000d511e <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d511e:	1e41      	subs	r1, r0, #1
   d5120:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d5124:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d5126:	0843      	lsrs	r3, r0, #1
   d5128:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d512c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d5130:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d5134:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d5136:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d5138:	d1f5      	bne.n	d5126 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d513a:	4770      	bx	lr

000d513c <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d513c:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   d513e:	68cb      	ldr	r3, [r1, #12]
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d5140:	4604      	mov	r4, r0
   d5142:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   d5144:	b923      	cbnz	r3, d5150 <_ZN7FatFile11openClusterEPS_+0x14>
    return openRoot(file->m_vol);
   d5146:	6889      	ldr	r1, [r1, #8]
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   d5148:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
   d514c:	f000 bc09 	b.w	d5962 <_ZN7FatFile8openRootEP9FatVolume>
  }
  memset(this, 0, sizeof(FatFile));
   d5150:	2224      	movs	r2, #36	; 0x24
   d5152:	2100      	movs	r1, #0
   d5154:	f004 fe3c 	bl	d9dd0 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   d5158:	2310      	movs	r3, #16
  m_flags = F_READ;
   d515a:	2001      	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attr = FILE_ATTR_SUBDIR;
   d515c:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   d515e:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   d5160:	68ab      	ldr	r3, [r5, #8]
   d5162:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   d5164:	68eb      	ldr	r3, [r5, #12]
   d5166:	6223      	str	r3, [r4, #32]
  return true;
}
   d5168:	bd38      	pop	{r3, r4, r5, pc}
	...

000d516c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d516c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d5170:	7803      	ldrb	r3, [r0, #0]
   d5172:	2b20      	cmp	r3, #32
   d5174:	f100 0401 	add.w	r4, r0, #1
   d5178:	d101      	bne.n	d517e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d517a:	4620      	mov	r0, r4
   d517c:	e7f8      	b.n	d5170 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d517e:	4f70      	ldr	r7, [pc, #448]	; (d5340 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d5180:	6088      	str	r0, [r1, #8]
   d5182:	4605      	mov	r5, r0
   d5184:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d5186:	462e      	mov	r6, r5
   d5188:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d518c:	b30b      	cbz	r3, d51d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d518e:	2b2f      	cmp	r3, #47	; 0x2f
   d5190:	d101      	bne.n	d5196 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d5192:	1903      	adds	r3, r0, r4
   d5194:	e017      	b.n	d51c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d5196:	2b5c      	cmp	r3, #92	; 0x5c
   d5198:	d102      	bne.n	d51a0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d519a:	2000      	movs	r0, #0
   d519c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d51a0:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d51a4:	b2e4      	uxtb	r4, r4
   d51a6:	2c1d      	cmp	r4, #29
   d51a8:	d803      	bhi.n	d51b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d51aa:	fa27 f404 	lsr.w	r4, r7, r4
   d51ae:	07e4      	lsls	r4, r4, #31
   d51b0:	d4f3      	bmi.n	d519a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d51b2:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d51b6:	2c3c      	cmp	r4, #60	; 0x3c
   d51b8:	d0ef      	beq.n	d519a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d51ba:	3b20      	subs	r3, #32
   d51bc:	2b5e      	cmp	r3, #94	; 0x5e
   d51be:	d9e1      	bls.n	d5184 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d51c0:	e7eb      	b.n	d519a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d51c2:	2d2f      	cmp	r5, #47	; 0x2f
   d51c4:	d105      	bne.n	d51d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d51c6:	461e      	mov	r6, r3
   d51c8:	f813 5b01 	ldrb.w	r5, [r3], #1
   d51cc:	2d20      	cmp	r5, #32
   d51ce:	d1f8      	bne.n	d51c2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d51d0:	e7f9      	b.n	d51c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d51d2:	6016      	str	r6, [r2, #0]
   d51d4:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d51d6:	4298      	cmp	r0, r3
   d51d8:	ebc0 0803 	rsb	r8, r0, r3
   d51dc:	d009      	beq.n	d51f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d51de:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d51e2:	2a2e      	cmp	r2, #46	; 0x2e
   d51e4:	d0f7      	beq.n	d51d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d51e6:	2a20      	cmp	r2, #32
   d51e8:	d0f5      	beq.n	d51d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d51ea:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d51ee:	dcd4      	bgt.n	d519a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d51f0:	e001      	b.n	d51f6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d51f2:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d51f6:	f8c1 8004 	str.w	r8, [r1, #4]
   d51fa:	f101 030c 	add.w	r3, r1, #12
   d51fe:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d5202:	2420      	movs	r4, #32
   d5204:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d5208:	4293      	cmp	r3, r2
   d520a:	d1fb      	bne.n	d5204 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d520c:	4603      	mov	r3, r0
   d520e:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d5210:	f813 4b01 	ldrb.w	r4, [r3], #1
   d5214:	2c2e      	cmp	r4, #46	; 0x2e
   d5216:	d0fa      	beq.n	d520e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d5218:	2c20      	cmp	r4, #32
   d521a:	d0f8      	beq.n	d520e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d521c:	fab2 f482 	clz	r4, r2
   d5220:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d5222:	f108 36ff 	add.w	r6, r8, #4294967295
   d5226:	1c73      	adds	r3, r6, #1
   d5228:	d107      	bne.n	d523a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d522a:	2700      	movs	r7, #0
   d522c:	f04f 0e07 	mov.w	lr, #7
   d5230:	463d      	mov	r5, r7
   d5232:	46ba      	mov	sl, r7
   d5234:	f04f 0908 	mov.w	r9, #8
   d5238:	e009      	b.n	d524e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d523a:	5d83      	ldrb	r3, [r0, r6]
   d523c:	2b2e      	cmp	r3, #46	; 0x2e
   d523e:	d0f4      	beq.n	d522a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d5240:	3e01      	subs	r6, #1
   d5242:	e7f0      	b.n	d5226 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d5244:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d5246:	2b20      	cmp	r3, #32
   d5248:	d104      	bne.n	d5254 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d524a:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d524c:	3201      	adds	r2, #1
   d524e:	4542      	cmp	r2, r8
   d5250:	dbf8      	blt.n	d5244 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d5252:	e04b      	b.n	d52ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d5254:	2b2e      	cmp	r3, #46	; 0x2e
   d5256:	d102      	bne.n	d525e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d5258:	42b2      	cmp	r2, r6
   d525a:	d1f6      	bne.n	d524a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d525c:	e003      	b.n	d5266 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d525e:	2b22      	cmp	r3, #34	; 0x22
   d5260:	d017      	beq.n	d5292 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d5262:	2b7c      	cmp	r3, #124	; 0x7c
   d5264:	d015      	beq.n	d5292 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d5266:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d526a:	f1bc 0f05 	cmp.w	ip, #5
   d526e:	d801      	bhi.n	d5274 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d5270:	2b2d      	cmp	r3, #45	; 0x2d
   d5272:	d10e      	bne.n	d5292 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d5274:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d5278:	f1bc 0f05 	cmp.w	ip, #5
   d527c:	d909      	bls.n	d5292 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d527e:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d5282:	f1bc 0f02 	cmp.w	ip, #2
   d5286:	d904      	bls.n	d5292 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d5288:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d528c:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d5290:	d902      	bls.n	d5298 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d5292:	42b2      	cmp	r2, r6
   d5294:	d10e      	bne.n	d52b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d5296:	e049      	b.n	d532c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d5298:	42b2      	cmp	r2, r6
   d529a:	d047      	beq.n	d532c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d529c:	4575      	cmp	r5, lr
   d529e:	d821      	bhi.n	d52e4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d52a0:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d52a4:	f1bc 0f19 	cmp.w	ip, #25
   d52a8:	d808      	bhi.n	d52bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d52aa:	3b20      	subs	r3, #32
   d52ac:	b2db      	uxtb	r3, r3
        lc |= bit;
   d52ae:	ea49 0707 	orr.w	r7, r9, r7
   d52b2:	e00a      	b.n	d52ca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d52b4:	4575      	cmp	r5, lr
   d52b6:	d815      	bhi.n	d52e4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d52b8:	2400      	movs	r4, #0
      c = '_';
   d52ba:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d52bc:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d52c0:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d52c4:	bf98      	it	ls
   d52c6:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d52ca:	f105 0c01 	add.w	ip, r5, #1
   d52ce:	fa5f fc8c 	uxtb.w	ip, ip
   d52d2:	440d      	add	r5, r1
      if (i < 7) {
   d52d4:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d52d8:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d52da:	d801      	bhi.n	d52e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d52dc:	f881 c00c 	strb.w	ip, [r1, #12]
   d52e0:	4665      	mov	r5, ip
   d52e2:	e7b3      	b.n	d524c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d52e4:	f1be 0f0a 	cmp.w	lr, #10
   d52e8:	d117      	bne.n	d531a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d52ea:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d52ec:	7b4b      	ldrb	r3, [r1, #13]
   d52ee:	2b20      	cmp	r3, #32
   d52f0:	f43f af53 	beq.w	d519a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d52f4:	b13c      	cbz	r4, d5306 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d52f6:	ea1a 0f07 	tst.w	sl, r7
   d52fa:	bf18      	it	ne
   d52fc:	2702      	movne	r7, #2
   d52fe:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d5300:	2001      	movs	r0, #1
   d5302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d5306:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d5308:	2001      	movs	r0, #1
   d530a:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d530c:	4419      	add	r1, r3
   d530e:	237e      	movs	r3, #126	; 0x7e
   d5310:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d5312:	2331      	movs	r3, #49	; 0x31
   d5314:	738b      	strb	r3, [r1, #14]
   d5316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d531a:	42b2      	cmp	r2, r6
   d531c:	dce5      	bgt.n	d52ea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d531e:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d5320:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d5324:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d5326:	f04f 0910 	mov.w	r9, #16
   d532a:	e78e      	b.n	d524a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d532c:	f1be 0f0a 	cmp.w	lr, #10
   d5330:	d0db      	beq.n	d52ea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d5332:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d5334:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d5338:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d533a:	f04f 0910 	mov.w	r9, #16
   d533e:	e785      	b.n	d524c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d5340:	31000101 	.word	0x31000101

000d5344 <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d5344:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5346:	b08b      	sub	sp, #44	; 0x2c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5348:	2300      	movs	r3, #0
   d534a:	f88d 3004 	strb.w	r3, [sp, #4]
   d534e:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5352:	7803      	ldrb	r3, [r0, #0]
   d5354:	0719      	lsls	r1, r3, #28

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d5356:	4604      	mov	r4, r0
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5358:	d508      	bpl.n	d536c <_ZN7FatFile6removeEv+0x28>
   d535a:	7883      	ldrb	r3, [r0, #2]
   d535c:	079a      	lsls	r2, r3, #30
   d535e:	d505      	bpl.n	d536c <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   d5360:	6a01      	ldr	r1, [r0, #32]
   d5362:	b129      	cbz	r1, d5370 <_ZN7FatFile6removeEv+0x2c>
   d5364:	68a0      	ldr	r0, [r4, #8]
   d5366:	f000 ff60 	bl	d622a <_ZN9FatVolume9freeChainEm>
   d536a:	b908      	cbnz	r0, d5370 <_ZN7FatFile6removeEv+0x2c>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   d536c:	2000      	movs	r0, #0
   d536e:	e049      	b.n	d5404 <_ZN7FatFile6removeEv+0xc0>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d5370:	2101      	movs	r1, #1
   d5372:	4620      	mov	r0, r4
   d5374:	f000 fabc 	bl	d58f0 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d5378:	4605      	mov	r5, r0
   d537a:	2800      	cmp	r0, #0
   d537c:	d0f6      	beq.n	d536c <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
   d537e:	f7ff fece 	bl	d511e <_ZN7FatFile11lfnChecksumEPh>

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;
   d5382:	26e5      	movs	r6, #229	; 0xe5
   d5384:	702e      	strb	r6, [r5, #0]

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
   d5386:	2300      	movs	r3, #0
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
   d5388:	4607      	mov	r7, r0

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
   d538a:	7023      	strb	r3, [r4, #0]

  // Write entry to device.
  if (!m_vol->cacheSync()) {
   d538c:	68a0      	ldr	r0, [r4, #8]
   d538e:	f7ff feb9 	bl	d5104 <_ZN9FatVolume9cacheSyncEv>
   d5392:	2800      	cmp	r0, #0
   d5394:	d0ea      	beq.n	d536c <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
   d5396:	78e3      	ldrb	r3, [r4, #3]
   d5398:	2b00      	cmp	r3, #0
   d539a:	d033      	beq.n	d5404 <_ZN7FatFile6removeEv+0xc0>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
   d539c:	4621      	mov	r1, r4
   d539e:	a801      	add	r0, sp, #4
   d53a0:	f7ff fecc 	bl	d513c <_ZN7FatFile11openClusterEPS_>
   d53a4:	2800      	cmp	r0, #0
   d53a6:	d0e1      	beq.n	d536c <_ZN7FatFile6removeEv+0x28>
   d53a8:	2501      	movs	r5, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d53aa:	78e3      	ldrb	r3, [r4, #3]
   d53ac:	42ab      	cmp	r3, r5
   d53ae:	d3dd      	bcc.n	d536c <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   d53b0:	88a1      	ldrh	r1, [r4, #4]
   d53b2:	1b49      	subs	r1, r1, r5
   d53b4:	0149      	lsls	r1, r1, #5
   d53b6:	a801      	add	r0, sp, #4
   d53b8:	f000 fbce 	bl	d5b58 <_ZN7FatFile7seekSetEm>
   d53bc:	2800      	cmp	r0, #0
   d53be:	d0d5      	beq.n	d536c <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   d53c0:	2100      	movs	r1, #0
   d53c2:	a801      	add	r0, sp, #4
   d53c4:	f000 fbab 	bl	d5b1e <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d53c8:	2800      	cmp	r0, #0
   d53ca:	d0cf      	beq.n	d536c <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d53cc:	7ac3      	ldrb	r3, [r0, #11]
   d53ce:	2b0f      	cmp	r3, #15
   d53d0:	d1cc      	bne.n	d536c <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   d53d2:	7802      	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d53d4:	f002 031f 	and.w	r3, r2, #31
   d53d8:	429d      	cmp	r5, r3
   d53da:	d1c7      	bne.n	d536c <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   d53dc:	7b43      	ldrb	r3, [r0, #13]
   d53de:	42bb      	cmp	r3, r7
   d53e0:	d1c4      	bne.n	d536c <_ZN7FatFile6removeEv+0x28>
        chksum != ldir->chksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->ord & LDIR_ORD_LAST_LONG_ENTRY;
    ldir->ord = DIR_NAME_DELETED;
   d53e2:	7006      	strb	r6, [r0, #0]
    m_vol->cacheDirty();
   d53e4:	68a1      	ldr	r1, [r4, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d53e6:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   d53ea:	f043 0301 	orr.w	r3, r3, #1
   d53ee:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   d53f2:	0653      	lsls	r3, r2, #25
   d53f4:	d503      	bpl.n	d53fe <_ZN7FatFile6removeEv+0xba>
      if (!m_vol->cacheSync()) {
   d53f6:	68a0      	ldr	r0, [r4, #8]
   d53f8:	f7ff fe84 	bl	d5104 <_ZN9FatVolume9cacheSyncEv>
   d53fc:	e002      	b.n	d5404 <_ZN7FatFile6removeEv+0xc0>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d53fe:	3501      	adds	r5, #1
   d5400:	b2ed      	uxtb	r5, r5
   d5402:	e7d2      	b.n	d53aa <_ZN7FatFile6removeEv+0x66>
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
}
   d5404:	b00b      	add	sp, #44	; 0x2c
   d5406:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5408 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d5408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d540c:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d5410:	4606      	mov	r6, r0
   d5412:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d5414:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d5416:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d5418:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d541c:	6869      	ldr	r1, [r5, #4]
   d541e:	68aa      	ldr	r2, [r5, #8]
   d5420:	1863      	adds	r3, r4, r1
   d5422:	b29b      	uxth	r3, r3
   d5424:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d5426:	4291      	cmp	r1, r2
   d5428:	d006      	beq.n	d5438 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d542a:	f812 0b01 	ldrb.w	r0, [r2], #1
   d542e:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d5432:	4043      	eors	r3, r0
   d5434:	b29b      	uxth	r3, r3
   d5436:	e7f6      	b.n	d5426 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d5438:	f1b9 0f03 	cmp.w	r9, #3
   d543c:	bf28      	it	cs
   d543e:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5442:	f109 0204 	add.w	r2, r9, #4
   d5446:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d5448:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d544c:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d544e:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5450:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5452:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5454:	bf94      	ite	ls
   d5456:	3130      	addls	r1, #48	; 0x30
   d5458:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d545a:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d545c:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d545e:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5462:	d3f1      	bcc.n	d5448 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d5464:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d5468:	2100      	movs	r1, #0
   d546a:	735f      	strb	r7, [r3, #13]
   d546c:	4630      	mov	r0, r6
   d546e:	f000 fb73 	bl	d5b58 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d5472:	2101      	movs	r1, #1
   d5474:	4630      	mov	r0, r6
   d5476:	f000 fb52 	bl	d5b1e <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d547a:	4601      	mov	r1, r0
   d547c:	b928      	cbnz	r0, d548a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d547e:	7870      	ldrb	r0, [r6, #1]
   d5480:	fab0 f080 	clz	r0, r0
   d5484:	0940      	lsrs	r0, r0, #5
   d5486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d548a:	7803      	ldrb	r3, [r0, #0]
   d548c:	b14b      	cbz	r3, d54a2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d548e:	7ac3      	ldrb	r3, [r0, #11]
   d5490:	071b      	lsls	r3, r3, #28
   d5492:	d4ee      	bmi.n	d5472 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d5494:	220b      	movs	r2, #11
   d5496:	4640      	mov	r0, r8
   d5498:	f004 fc80 	bl	d9d9c <memcmp>
   d549c:	2800      	cmp	r0, #0
   d549e:	d1e8      	bne.n	d5472 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d54a0:	e002      	b.n	d54a8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d54a2:	2001      	movs	r0, #1
   d54a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d54a8:	3401      	adds	r4, #1
   d54aa:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d54ac:	2c64      	cmp	r4, #100	; 0x64
   d54ae:	d1b5      	bne.n	d541c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d54b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d54b4 <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d54b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d54b8:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d54ba:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d54bc:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d54be:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d54c2:	9005      	str	r0, [sp, #20]
   d54c4:	460e      	mov	r6, r1
   d54c6:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d54c8:	d101      	bne.n	d54ce <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d54ca:	2000      	movs	r0, #0
   d54cc:	e1a0      	b.n	d5810 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d54ce:	9b05      	ldr	r3, [sp, #20]
   d54d0:	781b      	ldrb	r3, [r3, #0]
   d54d2:	2b00      	cmp	r3, #0
   d54d4:	d1f9      	bne.n	d54ca <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d54d6:	6853      	ldr	r3, [r2, #4]
   d54d8:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d54da:	7813      	ldrb	r3, [r2, #0]
   d54dc:	079b      	lsls	r3, r3, #30
   d54de:	f000 818d 	beq.w	d57fc <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d54e2:	9b02      	ldr	r3, [sp, #8]
   d54e4:	270d      	movs	r7, #13
   d54e6:	330c      	adds	r3, #12
   d54e8:	fbb3 f7f7 	udiv	r7, r3, r7
   d54ec:	3701      	adds	r7, #1
   d54ee:	b2ff      	uxtb	r7, r7
   d54f0:	2100      	movs	r1, #0
   d54f2:	4630      	mov	r0, r6
   d54f4:	f000 fb30 	bl	d5b58 <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d54f8:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d54fc:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d5500:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d5504:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d5506:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d5508:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d550a:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d550e:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d5510:	6972      	ldr	r2, [r6, #20]
   d5512:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d5514:	2101      	movs	r1, #1
   d5516:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d5518:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d551c:	f000 faff 	bl	d5b1e <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d5520:	9b07      	ldr	r3, [sp, #28]
   d5522:	b920      	cbnz	r0, d552e <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d5524:	7873      	ldrb	r3, [r6, #1]
   d5526:	2b00      	cmp	r3, #0
   d5528:	f000 8090 	beq.w	d564c <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d552c:	e7cd      	b.n	d54ca <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d552e:	7802      	ldrb	r2, [r0, #0]
   d5530:	2ae5      	cmp	r2, #229	; 0xe5
   d5532:	d000      	beq.n	d5536 <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d5534:	b942      	cbnz	r2, d5548 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d5536:	2c00      	cmp	r4, #0
   d5538:	bf08      	it	eq
   d553a:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d553c:	42bc      	cmp	r4, r7
        freeFound++;
   d553e:	bf3c      	itt	cc
   d5540:	3401      	addcc	r4, #1
   d5542:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d5544:	b922      	cbnz	r2, d5550 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d5546:	e081      	b.n	d564c <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d5548:	42bc      	cmp	r4, r7
   d554a:	bf38      	it	cc
   d554c:	2400      	movcc	r4, #0
   d554e:	e003      	b.n	d5558 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d5550:	2ae5      	cmp	r2, #229	; 0xe5
   d5552:	d101      	bne.n	d5558 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d5554:	2500      	movs	r5, #0
   d5556:	e7db      	b.n	d5510 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d5558:	2a2e      	cmp	r2, #46	; 0x2e
   d555a:	d0fb      	beq.n	d5554 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d555c:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d555e:	290f      	cmp	r1, #15
   d5560:	d152      	bne.n	d5608 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d5562:	b93d      	cbnz	r5, d5574 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d5564:	0651      	lsls	r1, r2, #25
   d5566:	d5d3      	bpl.n	d5510 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d5568:	7b43      	ldrb	r3, [r0, #13]
   d556a:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d556c:	f002 051f 	and.w	r5, r2, #31
   d5570:	462b      	mov	r3, r5
   d5572:	e007      	b.n	d5584 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d5574:	3b01      	subs	r3, #1
   d5576:	b2db      	uxtb	r3, r3
   d5578:	429a      	cmp	r2, r3
   d557a:	d1eb      	bne.n	d5554 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d557c:	7b42      	ldrb	r2, [r0, #13]
   d557e:	9903      	ldr	r1, [sp, #12]
   d5580:	4291      	cmp	r1, r2
   d5582:	d1e7      	bne.n	d5554 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d5584:	1e5a      	subs	r2, r3, #1
   d5586:	f04f 0c0d 	mov.w	ip, #13
   d558a:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d558e:	9a02      	ldr	r2, [sp, #8]
   d5590:	4562      	cmp	r2, ip
   d5592:	d9df      	bls.n	d5554 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5594:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d5598:	f1be 0f04 	cmp.w	lr, #4
   d559c:	fa5f f28e 	uxtb.w	r2, lr
   d55a0:	d804      	bhi.n	d55ac <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d55a2:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d55a6:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d55aa:	e00c      	b.n	d55c6 <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d55ac:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d55ae:	bf95      	itete	ls
   d55b0:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d55b4:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d55b8:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d55bc:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d55c0:	bf94      	ite	ls
   d55c2:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d55c4:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d55c6:	9902      	ldr	r1, [sp, #8]
   d55c8:	4561      	cmp	r1, ip
   d55ca:	d103      	bne.n	d55d4 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d55cc:	2a00      	cmp	r2, #0
   d55ce:	bf18      	it	ne
   d55d0:	2500      	movne	r5, #0
   d55d2:	e79d      	b.n	d5510 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d55d4:	2aff      	cmp	r2, #255	; 0xff
   d55d6:	d8bd      	bhi.n	d5554 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d55d8:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d55da:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d55de:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d55e0:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d55e4:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d55e8:	bf98      	it	ls
   d55ea:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d55ec:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d55f0:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d55f4:	bf98      	it	ls
   d55f6:	b2d2      	uxtbls	r2, r2
   d55f8:	f1bc 0f19 	cmp.w	ip, #25
   d55fc:	bf9c      	itt	ls
   d55fe:	3120      	addls	r1, #32
   d5600:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5602:	4291      	cmp	r1, r2
   d5604:	d1a6      	bne.n	d5554 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5606:	e0fb      	b.n	d5800 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d5608:	0709      	lsls	r1, r1, #28
   d560a:	d4a3      	bmi.n	d5554 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d560c:	b14d      	cbz	r5, d5622 <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d560e:	2b01      	cmp	r3, #1
   d5610:	f47f af5b 	bne.w	d54ca <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d5614:	f7ff fd83 	bl	d511e <_ZN7FatFile11lfnChecksumEPh>
   d5618:	9b03      	ldr	r3, [sp, #12]
   d561a:	4283      	cmp	r3, r0
   d561c:	f47f af55 	bne.w	d54ca <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d5620:	e00f      	b.n	d5642 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d5622:	220b      	movs	r2, #11
   d5624:	9906      	ldr	r1, [sp, #24]
   d5626:	9307      	str	r3, [sp, #28]
   d5628:	f004 fbb8 	bl	d9d9c <memcmp>
   d562c:	9b07      	ldr	r3, [sp, #28]
   d562e:	2800      	cmp	r0, #0
   d5630:	f47f af6e 	bne.w	d5510 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d5634:	f899 2000 	ldrb.w	r2, [r9]
   d5638:	07d2      	lsls	r2, r2, #31
   d563a:	d502      	bpl.n	d5642 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d563c:	2201      	movs	r2, #1
   d563e:	9204      	str	r2, [sp, #16]
   d5640:	e766      	b.n	d5510 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d5642:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d5646:	f000 80d1 	beq.w	d57ec <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d564a:	e73e      	b.n	d54ca <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d564c:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d5650:	f43f af3b 	beq.w	d54ca <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d5654:	f00b 0303 	and.w	r3, fp, #3
   d5658:	3b01      	subs	r3, #1
   d565a:	2b01      	cmp	r3, #1
   d565c:	f63f af35 	bhi.w	d54ca <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d5660:	2c00      	cmp	r4, #0
   d5662:	bf08      	it	eq
   d5664:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d5666:	42bc      	cmp	r4, r7
   d5668:	d302      	bcc.n	d5670 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d566a:	9b04      	ldr	r3, [sp, #16]
   d566c:	b9cb      	cbnz	r3, d56a2 <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d566e:	e01f      	b.n	d56b0 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d5670:	2100      	movs	r1, #0
   d5672:	4630      	mov	r0, r6
   d5674:	f000 fa53 	bl	d5b1e <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d5678:	b910      	cbnz	r0, d5680 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d567a:	7873      	ldrb	r3, [r6, #1]
   d567c:	b15b      	cbz	r3, d5696 <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d567e:	e724      	b.n	d54ca <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d5680:	3401      	adds	r4, #1
   d5682:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d5684:	e7ef      	b.n	d5666 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d5686:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d5688:	791b      	ldrb	r3, [r3, #4]
   d568a:	2b01      	cmp	r3, #1
   d568c:	d8ed      	bhi.n	d566a <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d568e:	3410      	adds	r4, #16
   d5690:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d5692:	42a7      	cmp	r7, r4
   d5694:	d9e9      	bls.n	d566a <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d5696:	4630      	mov	r0, r6
   d5698:	f000 f8ea 	bl	d5870 <_ZN7FatFile13addDirClusterEv>
   d569c:	2800      	cmp	r0, #0
   d569e:	d1f2      	bne.n	d5686 <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d56a0:	e713      	b.n	d54ca <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d56a2:	4649      	mov	r1, r9
   d56a4:	4630      	mov	r0, r6
   d56a6:	f7ff feaf 	bl	d5408 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d56aa:	2800      	cmp	r0, #0
   d56ac:	f43f af0d 	beq.w	d54ca <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d56b0:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d56b4:	4630      	mov	r0, r6
   d56b6:	f000 fa4f 	bl	d5b58 <_ZN7FatFile7seekSetEm>
   d56ba:	2800      	cmp	r0, #0
   d56bc:	f43f af05 	beq.w	d54ca <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d56c0:	1e7d      	subs	r5, r7, #1
   d56c2:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d56c4:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d56c6:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d56ca:	f04f 080f 	mov.w	r8, #15
   d56ce:	e041      	b.n	d5754 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d56d0:	2100      	movs	r1, #0
   d56d2:	4630      	mov	r0, r6
   d56d4:	f000 fa23 	bl	d5b1e <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d56d8:	4607      	mov	r7, r0
   d56da:	2800      	cmp	r0, #0
   d56dc:	f43f aef5 	beq.w	d54ca <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d56e0:	68b2      	ldr	r2, [r6, #8]
   d56e2:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d56e6:	42ac      	cmp	r4, r5
   d56e8:	f043 0301 	orr.w	r3, r3, #1
   d56ec:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d56f0:	bf0c      	ite	eq
   d56f2:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d56f6:	4622      	movne	r2, r4
   d56f8:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d56fa:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d56fe:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d5702:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d5706:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d5708:	f7ff fd09 	bl	d511e <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d570c:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d570e:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d5710:	f887 a01a 	strb.w	sl, [r7, #26]
   d5714:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5718:	f002 021f 	and.w	r2, r2, #31
   d571c:	230d      	movs	r3, #13
   d571e:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d5720:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5724:	435a      	muls	r2, r3
   d5726:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d5728:	9902      	ldr	r1, [sp, #8]
   d572a:	4291      	cmp	r1, r2
   d572c:	d915      	bls.n	d575a <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d572e:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d5732:	2b04      	cmp	r3, #4
   d5734:	fa5f fc83 	uxtb.w	ip, r3
   d5738:	f103 0001 	add.w	r0, r3, #1
   d573c:	d813      	bhi.n	d5766 <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d573e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d5742:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d5746:	280d      	cmp	r0, #13
   d5748:	f102 0201 	add.w	r2, r2, #1
   d574c:	4603      	mov	r3, r0
   d574e:	d1eb      	bne.n	d5728 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d5750:	3c01      	subs	r4, #1
   d5752:	b2e4      	uxtb	r4, r4
   d5754:	2c00      	cmp	r4, #0
   d5756:	d1bb      	bne.n	d56d0 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d5758:	e00e      	b.n	d5778 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d575a:	bf14      	ite	ne
   d575c:	f04f 31ff 	movne.w	r1, #4294967295
   d5760:	2100      	moveq	r1, #0
   d5762:	b289      	uxth	r1, r1
   d5764:	e7e5      	b.n	d5732 <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d5766:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d576a:	bf94      	ite	ls
   d576c:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d5770:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d5774:	8099      	strh	r1, [r3, #4]
   d5776:	e7e6      	b.n	d5746 <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d5778:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d577a:	4621      	mov	r1, r4
   d577c:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d577e:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d5782:	f000 f9cc 	bl	d5b1e <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d5786:	4607      	mov	r7, r0
   d5788:	2800      	cmp	r0, #0
   d578a:	f43f ae9e 	beq.w	d54ca <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d578e:	2220      	movs	r2, #32
   d5790:	4621      	mov	r1, r4
   d5792:	f004 fb1d 	bl	d9dd0 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d5796:	464b      	mov	r3, r9
   d5798:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d579c:	603a      	str	r2, [r7, #0]
   d579e:	685a      	ldr	r2, [r3, #4]
   d57a0:	607a      	str	r2, [r7, #4]
   d57a2:	891a      	ldrh	r2, [r3, #8]
   d57a4:	813a      	strh	r2, [r7, #8]
   d57a6:	7a9b      	ldrb	r3, [r3, #10]
   d57a8:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d57aa:	f899 3000 	ldrb.w	r3, [r9]
   d57ae:	f003 0318 	and.w	r3, r3, #24
   d57b2:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d57b4:	4b18      	ldr	r3, [pc, #96]	; (d5818 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d57b6:	681b      	ldr	r3, [r3, #0]
   d57b8:	b12b      	cbz	r3, d57c6 <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d57ba:	f107 010e 	add.w	r1, r7, #14
   d57be:	f107 0010 	add.w	r0, r7, #16
   d57c2:	4798      	blx	r3
   d57c4:	e006      	b.n	d57d4 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d57c6:	2321      	movs	r3, #33	; 0x21
   d57c8:	743b      	strb	r3, [r7, #16]
   d57ca:	2328      	movs	r3, #40	; 0x28
   d57cc:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d57ce:	2308      	movs	r3, #8
   d57d0:	73bc      	strb	r4, [r7, #14]
   d57d2:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d57d4:	8a3b      	ldrh	r3, [r7, #16]
   d57d6:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d57d8:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d57da:	89fb      	ldrh	r3, [r7, #14]
   d57dc:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d57de:	68b2      	ldr	r2, [r6, #8]
   d57e0:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d57e4:	f043 0301 	orr.w	r3, r3, #1
   d57e8:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d57ec:	9500      	str	r5, [sp, #0]
   d57ee:	465b      	mov	r3, fp
   d57f0:	4652      	mov	r2, sl
   d57f2:	4631      	mov	r1, r6
   d57f4:	9805      	ldr	r0, [sp, #20]
   d57f6:	f000 f9f8 	bl	d5bea <_ZN7FatFile15openCachedEntryEPS_tih>
   d57fa:	e009      	b.n	d5810 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d57fc:	2701      	movs	r7, #1
   d57fe:	e677      	b.n	d54f0 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d5800:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d5804:	f1be 0f0d 	cmp.w	lr, #13
   d5808:	f43f ae82 	beq.w	d5510 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d580c:	46d4      	mov	ip, sl
   d580e:	e6c3      	b.n	d5598 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d5810:	b009      	add	sp, #36	; 0x24
   d5812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5816:	bf00      	nop
   d5818:	2003e328 	.word	0x2003e328

000d581c <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d581c:	f001 bdf8 	b.w	d7410 <HAL_Pin_Map>

000d5820 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d5820:	f001 bdf6 	b.w	d7410 <HAL_Pin_Map>

000d5824 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d5824:	f001 bdf4 	b.w	d7410 <HAL_Pin_Map>

000d5828 <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   d5828:	b510      	push	{r4, lr}
   d582a:	460c      	mov	r4, r1
   d582c:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   d582e:	b909      	cbnz	r1, d5834 <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   d5830:	2000      	movs	r0, #0
   d5832:	bd10      	pop	{r4, pc}
  dir_t* dir;
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
   d5834:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   d5838:	d004      	beq.n	d5844 <_ZN7FatFile6getSFNEPc+0x1c>
    name[0] = '/';
   d583a:	232f      	movs	r3, #47	; 0x2f
   d583c:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   d583e:	2300      	movs	r3, #0
   d5840:	7063      	strb	r3, [r4, #1]
   d5842:	e006      	b.n	d5852 <_ZN7FatFile6getSFNEPc+0x2a>
    return true;
  }
  // cache entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   d5844:	f000 f854 	bl	d58f0 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d5848:	2800      	cmp	r0, #0
   d584a:	d0f1      	beq.n	d5830 <_ZN7FatFile6getSFNEPc+0x8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  dirName(dir, name);
   d584c:	4621      	mov	r1, r4
   d584e:	f000 f85e 	bl	d590e <_ZN7FatFile7dirNameEPK14directoryEntryPc>
  return true;
   d5852:	2001      	movs	r0, #1

fail:
  return false;
}
   d5854:	bd10      	pop	{r4, pc}

000d5856 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d5856:	f001 bddb 	b.w	d7410 <HAL_Pin_Map>

000d585a <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d585a:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d585c:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d585e:	f043 0304 	orr.w	r3, r3, #4
   d5862:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5864:	f100 0210 	add.w	r2, r0, #16
   d5868:	6880      	ldr	r0, [r0, #8]
   d586a:	f000 bca3 	b.w	d61b4 <_ZN9FatVolume15allocateClusterEmPm>
	...

000d5870 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d5870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d5874:	7803      	ldrb	r3, [r0, #0]
   d5876:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d587a:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d587c:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d5880:	b10b      	cbz	r3, d5886 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d5882:	2600      	movs	r6, #0
   d5884:	e02e      	b.n	d58e4 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d5886:	6942      	ldr	r2, [r0, #20]
   d5888:	4b18      	ldr	r3, [pc, #96]	; (d58ec <_ZN7FatFile13addDirClusterEv+0x7c>)
   d588a:	429a      	cmp	r2, r3
   d588c:	d8f9      	bhi.n	d5882 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d588e:	f7ff ffe4 	bl	d585a <_ZN7FatFile10addClusterEv>
   d5892:	4606      	mov	r6, r0
   d5894:	2800      	cmp	r0, #0
   d5896:	d0f4      	beq.n	d5882 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d5898:	6921      	ldr	r1, [r4, #16]
   d589a:	68a0      	ldr	r0, [r4, #8]
   d589c:	f000 fc1f 	bl	d60de <_ZNK9FatVolume17clusterFirstBlockEm>
   d58a0:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d58a2:	68a0      	ldr	r0, [r4, #8]
   d58a4:	2205      	movs	r2, #5
   d58a6:	4639      	mov	r1, r7
   d58a8:	3024      	adds	r0, #36	; 0x24
   d58aa:	f000 fbf4 	bl	d6096 <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d58ae:	4680      	mov	r8, r0
   d58b0:	2800      	cmp	r0, #0
   d58b2:	d0e6      	beq.n	d5882 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d58b4:	4629      	mov	r1, r5
   d58b6:	f44f 7200 	mov.w	r2, #512	; 0x200
   d58ba:	f004 fa89 	bl	d9dd0 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d58be:	2501      	movs	r5, #1
   d58c0:	68a3      	ldr	r3, [r4, #8]
   d58c2:	791a      	ldrb	r2, [r3, #4]
   d58c4:	42aa      	cmp	r2, r5
   d58c6:	d909      	bls.n	d58dc <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d58c8:	4642      	mov	r2, r8
   d58ca:	19e9      	adds	r1, r5, r7
   d58cc:	6818      	ldr	r0, [r3, #0]
   d58ce:	f000 ff5f 	bl	d6790 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d58d2:	2800      	cmp	r0, #0
   d58d4:	d0d5      	beq.n	d5882 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d58d6:	3501      	adds	r5, #1
   d58d8:	b2ed      	uxtb	r5, r5
   d58da:	e7f1      	b.n	d58c0 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d58dc:	6963      	ldr	r3, [r4, #20]
   d58de:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d58e2:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d58e4:	4630      	mov	r0, r6
   d58e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d58ea:	bf00      	nop
   d58ec:	001ffdff 	.word	0x001ffdff

000d58f0 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d58f0:	b510      	push	{r4, lr}
   d58f2:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d58f4:	6880      	ldr	r0, [r0, #8]
   d58f6:	460a      	mov	r2, r1
   d58f8:	3024      	adds	r0, #36	; 0x24
   d58fa:	69a1      	ldr	r1, [r4, #24]
   d58fc:	f000 fbcb 	bl	d6096 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d5900:	b120      	cbz	r0, d590c <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d5902:	88a3      	ldrh	r3, [r4, #4]
   d5904:	f003 030f 	and.w	r3, r3, #15
   d5908:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d590c:	bd10      	pop	{r4, pc}

000d590e <_ZN7FatFile7dirNameEPK14directoryEntryPc>:

fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   d590e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5910:	2400      	movs	r4, #0
   d5912:	1e45      	subs	r5, r0, #1
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
   d5914:	2608      	movs	r6, #8
fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
   d5916:	4623      	mov	r3, r4
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
   d5918:	272e      	movs	r7, #46	; 0x2e
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
   d591a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d591e:	2a20      	cmp	r2, #32
   d5920:	d018      	beq.n	d5954 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x46>
      continue;
    }
    if (i == 8) {
   d5922:	2c08      	cmp	r4, #8
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
   d5924:	bf02      	ittt	eq
   d5926:	54cf      	strbeq	r7, [r1, r3]
   d5928:	1c5a      	addeq	r2, r3, #1
   d592a:	b2d3      	uxtbeq	r3, r2
    }
    char c = dir->name[i];
   d592c:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   d592e:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
   d5932:	bf08      	it	eq
   d5934:	2610      	moveq	r6, #16
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   d5936:	f1be 0f19 	cmp.w	lr, #25
   d593a:	d806      	bhi.n	d594a <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3c>
   d593c:	f890 e00c 	ldrb.w	lr, [r0, #12]
   d5940:	ea16 0f0e 	tst.w	r6, lr
      c += 'a' - 'A';
   d5944:	bf1c      	itt	ne
   d5946:	3220      	addne	r2, #32
   d5948:	b2d2      	uxtbne	r2, r2
    }
    name[j++] = c;
   d594a:	f103 0e01 	add.w	lr, r3, #1
   d594e:	54ca      	strb	r2, [r1, r3]
   d5950:	fa5f f38e 	uxtb.w	r3, lr
   d5954:	3401      	adds	r4, #1
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
   d5956:	2c0b      	cmp	r4, #11
   d5958:	d1df      	bne.n	d591a <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xc>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
   d595a:	2200      	movs	r2, #0
   d595c:	54ca      	strb	r2, [r1, r3]
  return j;
}
   d595e:	4618      	mov	r0, r3
   d5960:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5962 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d5962:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d5964:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d5966:	4605      	mov	r5, r0
   d5968:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d596a:	b984      	cbnz	r4, d598e <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d596c:	2224      	movs	r2, #36	; 0x24
   d596e:	4621      	mov	r1, r4
   d5970:	f004 fa2e 	bl	d9dd0 <memset>

  m_vol = vol;
   d5974:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d5976:	79f3      	ldrb	r3, [r6, #7]
   d5978:	2b10      	cmp	r3, #16
   d597a:	d003      	beq.n	d5984 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d597c:	2b20      	cmp	r3, #32
   d597e:	d106      	bne.n	d598e <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d5980:	2340      	movs	r3, #64	; 0x40
   d5982:	e000      	b.n	d5986 <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d5984:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d5986:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d5988:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d598a:	70a8      	strb	r0, [r5, #2]
   d598c:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d598e:	2000      	movs	r0, #0
   d5990:	bd70      	pop	{r4, r5, r6, pc}

000d5992 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d5992:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5996:	7803      	ldrb	r3, [r0, #0]
   d5998:	4604      	mov	r4, r0
   d599a:	4689      	mov	r9, r1
   d599c:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d599e:	b14b      	cbz	r3, d59b4 <_ZN7FatFile4readEPvj+0x22>
   d59a0:	7882      	ldrb	r2, [r0, #2]
   d59a2:	07d1      	lsls	r1, r2, #31
   d59a4:	d506      	bpl.n	d59b4 <_ZN7FatFile4readEPvj+0x22>
   d59a6:	e00c      	b.n	d59c2 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d59a8:	465a      	mov	r2, fp
   d59aa:	6921      	ldr	r1, [r4, #16]
   d59ac:	f000 fb9d 	bl	d60ea <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d59b0:	2800      	cmp	r0, #0
   d59b2:	da3d      	bge.n	d5a30 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d59b4:	7863      	ldrb	r3, [r4, #1]
   d59b6:	f043 0302 	orr.w	r3, r3, #2
   d59ba:	7063      	strb	r3, [r4, #1]
  return -1;
   d59bc:	f04f 30ff 	mov.w	r0, #4294967295
   d59c0:	e097      	b.n	d5af2 <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d59c2:	071a      	lsls	r2, r3, #28
   d59c4:	d503      	bpl.n	d59ce <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d59c6:	69e3      	ldr	r3, [r4, #28]
   d59c8:	6962      	ldr	r2, [r4, #20]
   d59ca:	1a9b      	subs	r3, r3, r2
   d59cc:	e007      	b.n	d59de <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d59ce:	069a      	lsls	r2, r3, #26
   d59d0:	d508      	bpl.n	d59e4 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d59d2:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d59d4:	891a      	ldrh	r2, [r3, #8]
   d59d6:	6963      	ldr	r3, [r4, #20]
   d59d8:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d59dc:	b29b      	uxth	r3, r3
   d59de:	429d      	cmp	r5, r3
   d59e0:	bf28      	it	cs
   d59e2:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d59e4:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d59e6:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d59ea:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d59ee:	2e00      	cmp	r6, #0
   d59f0:	d035      	beq.n	d5a5e <_ZN7FatFile4readEPvj+0xcc>
   d59f2:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d59f4:	6963      	ldr	r3, [r4, #20]
   d59f6:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d59f8:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d59fc:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d5a00:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d5a04:	d002      	beq.n	d5a0c <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d5a06:	6a03      	ldr	r3, [r0, #32]
   d5a08:	4419      	add	r1, r3
   d5a0a:	e01d      	b.n	d5a48 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5a0c:	f890 8005 	ldrb.w	r8, [r0, #5]
   d5a10:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d5a14:	f1ba 0f00 	cmp.w	sl, #0
   d5a18:	d110      	bne.n	d5a3c <_ZN7FatFile4readEPvj+0xaa>
   d5a1a:	f1b8 0f00 	cmp.w	r8, #0
   d5a1e:	d10d      	bne.n	d5a3c <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d5a20:	2b00      	cmp	r3, #0
   d5a22:	d1c1      	bne.n	d59a8 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5a24:	0653      	lsls	r3, r2, #25
   d5a26:	bf4c      	ite	mi
   d5a28:	6a03      	ldrmi	r3, [r0, #32]
   d5a2a:	6a23      	ldrpl	r3, [r4, #32]
   d5a2c:	6123      	str	r3, [r4, #16]
   d5a2e:	e005      	b.n	d5a3c <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d5a30:	d104      	bne.n	d5a3c <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d5a32:	7823      	ldrb	r3, [r4, #0]
   d5a34:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5a38:	d111      	bne.n	d5a5e <_ZN7FatFile4readEPvj+0xcc>
   d5a3a:	e7bb      	b.n	d59b4 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5a3c:	6921      	ldr	r1, [r4, #16]
   d5a3e:	68a0      	ldr	r0, [r4, #8]
   d5a40:	f000 fb4d 	bl	d60de <_ZNK9FatVolume17clusterFirstBlockEm>
   d5a44:	eb08 0100 	add.w	r1, r8, r0
   d5a48:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d5a4a:	f1ba 0f00 	cmp.w	sl, #0
   d5a4e:	d135      	bne.n	d5abc <_ZN7FatFile4readEPvj+0x12a>
   d5a50:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5a54:	d332      	bcc.n	d5abc <_ZN7FatFile4readEPvj+0x12a>
   d5a56:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5a58:	4299      	cmp	r1, r3
   d5a5a:	d102      	bne.n	d5a62 <_ZN7FatFile4readEPvj+0xd0>
   d5a5c:	e02e      	b.n	d5abc <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d5a5e:	1ba8      	subs	r0, r5, r6
   d5a60:	e047      	b.n	d5af2 <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d5a62:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5a66:	d31b      	bcc.n	d5aa0 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d5a68:	7822      	ldrb	r2, [r4, #0]
   d5a6a:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d5a6c:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d5a70:	d406      	bmi.n	d5a80 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d5a72:	7902      	ldrb	r2, [r0, #4]
   d5a74:	ebc8 0202 	rsb	r2, r8, r2
   d5a78:	b2d2      	uxtb	r2, r2
   d5a7a:	4592      	cmp	sl, r2
   d5a7c:	bf28      	it	cs
   d5a7e:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5a80:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d5a82:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5a86:	d207      	bcs.n	d5a98 <_ZN7FatFile4readEPvj+0x106>
   d5a88:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d5a8a:	4653      	mov	r3, sl
   d5a8c:	464a      	mov	r2, r9
   d5a8e:	6800      	ldr	r0, [r0, #0]
   d5a90:	f000 fe3c 	bl	d670c <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d5a94:	b960      	cbnz	r0, d5ab0 <_ZN7FatFile4readEPvj+0x11e>
   d5a96:	e78d      	b.n	d59b4 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5a98:	4453      	add	r3, sl
   d5a9a:	4299      	cmp	r1, r3
   d5a9c:	d321      	bcc.n	d5ae2 <_ZN7FatFile4readEPvj+0x150>
   d5a9e:	e7f3      	b.n	d5a88 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d5aa0:	464a      	mov	r2, r9
   d5aa2:	6800      	ldr	r0, [r0, #0]
   d5aa4:	f000 fdea 	bl	d667c <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d5aa8:	2800      	cmp	r0, #0
   d5aaa:	d083      	beq.n	d59b4 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d5aac:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d5ab0:	6963      	ldr	r3, [r4, #20]
   d5ab2:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d5ab4:	44b9      	add	r9, r7
    m_curPosition += n;
   d5ab6:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d5ab8:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d5aba:	e798      	b.n	d59ee <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5abc:	2200      	movs	r2, #0
   d5abe:	3024      	adds	r0, #36	; 0x24
   d5ac0:	f000 fae9 	bl	d6096 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d5ac4:	2800      	cmp	r0, #0
   d5ac6:	f43f af75 	beq.w	d59b4 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d5aca:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d5ace:	42b7      	cmp	r7, r6
   d5ad0:	bf28      	it	cs
   d5ad2:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d5ad4:	eb00 010a 	add.w	r1, r0, sl
   d5ad8:	463a      	mov	r2, r7
   d5ada:	4648      	mov	r0, r9
   d5adc:	f004 f96d 	bl	d9dba <memcpy>
   d5ae0:	e7e6      	b.n	d5ab0 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5ae2:	3024      	adds	r0, #36	; 0x24
   d5ae4:	9101      	str	r1, [sp, #4]
   d5ae6:	f000 faaf 	bl	d6048 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d5aea:	9901      	ldr	r1, [sp, #4]
   d5aec:	2800      	cmp	r0, #0
   d5aee:	d1cb      	bne.n	d5a88 <_ZN7FatFile4readEPvj+0xf6>
   d5af0:	e760      	b.n	d59b4 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d5af2:	b003      	add	sp, #12
   d5af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5af8 <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d5af8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d5afa:	2201      	movs	r2, #1
   d5afc:	f10d 0107 	add.w	r1, sp, #7
   d5b00:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d5b02:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d5b04:	6905      	ldr	r5, [r0, #16]
   d5b06:	f7ff ff44 	bl	d5992 <_ZN7FatFile4readEPvj>
   d5b0a:	2801      	cmp	r0, #1
   d5b0c:	bf05      	ittet	eq
   d5b0e:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d5b12:	6166      	streq	r6, [r4, #20]
   d5b14:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = pos->cluster;
   d5b18:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d5b1a:	b002      	add	sp, #8
   d5b1c:	bd70      	pop	{r4, r5, r6, pc}

000d5b1e <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d5b1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d5b20:	6943      	ldr	r3, [r0, #20]
   d5b22:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d5b26:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d5b28:	b105      	cbz	r5, d5b2c <_ZN7FatFile12readDirCacheEb+0xe>
   d5b2a:	b969      	cbnz	r1, d5b48 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d5b2c:	2201      	movs	r2, #1
   d5b2e:	f10d 0107 	add.w	r1, sp, #7
   d5b32:	4620      	mov	r0, r4
   d5b34:	f7ff ff2d 	bl	d5992 <_ZN7FatFile4readEPvj>
   d5b38:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d5b3a:	2801      	cmp	r0, #1
   d5b3c:	d001      	beq.n	d5b42 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d5b3e:	2000      	movs	r0, #0
   d5b40:	e008      	b.n	d5b54 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d5b42:	6963      	ldr	r3, [r4, #20]
   d5b44:	331f      	adds	r3, #31
   d5b46:	e000      	b.n	d5b4a <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d5b48:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d5b4a:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d5b4c:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d5b4e:	3030      	adds	r0, #48	; 0x30
   d5b50:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d5b54:	b003      	add	sp, #12
   d5b56:	bd30      	pop	{r4, r5, pc}

000d5b58 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5b5c:	460e      	mov	r6, r1
   d5b5e:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d5b60:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5b62:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d5b64:	2900      	cmp	r1, #0
   d5b66:	d039      	beq.n	d5bdc <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d5b68:	6945      	ldr	r5, [r0, #20]
   d5b6a:	42b5      	cmp	r5, r6
   d5b6c:	d03a      	beq.n	d5be4 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d5b6e:	b90e      	cbnz	r6, d5b74 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d5b70:	6106      	str	r6, [r0, #16]
    goto done;
   d5b72:	e031      	b.n	d5bd8 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d5b74:	070b      	lsls	r3, r1, #28
   d5b76:	d503      	bpl.n	d5b80 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d5b78:	69c3      	ldr	r3, [r0, #28]
   d5b7a:	429e      	cmp	r6, r3
   d5b7c:	d82e      	bhi.n	d5bdc <_ZN7FatFile7seekSetEm+0x84>
   d5b7e:	e007      	b.n	d5b90 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d5b80:	0688      	lsls	r0, r1, #26
   d5b82:	d505      	bpl.n	d5b90 <_ZN7FatFile7seekSetEm+0x38>
   d5b84:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d5b86:	891b      	ldrh	r3, [r3, #8]
   d5b88:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d5b8c:	d826      	bhi.n	d5bdc <_ZN7FatFile7seekSetEm+0x84>
   d5b8e:	e023      	b.n	d5bd8 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5b90:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d5b94:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d5b98:	1e6a      	subs	r2, r5, #1
   d5b9a:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5b9e:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5ba0:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5ba2:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d5ba4:	429a      	cmp	r2, r3
   d5ba6:	d800      	bhi.n	d5baa <_ZN7FatFile7seekSetEm+0x52>
   d5ba8:	b94d      	cbnz	r5, d5bbe <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5baa:	064a      	lsls	r2, r1, #25
   d5bac:	bf4c      	ite	mi
   d5bae:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d5bb2:	6a22      	ldrpl	r2, [r4, #32]
   d5bb4:	6122      	str	r2, [r4, #16]
   d5bb6:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5bb8:	f104 0810 	add.w	r8, r4, #16
   d5bbc:	e00a      	b.n	d5bd4 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d5bbe:	1a9b      	subs	r3, r3, r2
   d5bc0:	e7f9      	b.n	d5bb6 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5bc2:	4642      	mov	r2, r8
   d5bc4:	6921      	ldr	r1, [r4, #16]
   d5bc6:	68a0      	ldr	r0, [r4, #8]
   d5bc8:	f000 fa8f 	bl	d60ea <_ZN9FatVolume6fatGetEmPm>
   d5bcc:	2800      	cmp	r0, #0
   d5bce:	f105 35ff 	add.w	r5, r5, #4294967295
   d5bd2:	dd03      	ble.n	d5bdc <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d5bd4:	2d00      	cmp	r5, #0
   d5bd6:	d1f4      	bne.n	d5bc2 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d5bd8:	6166      	str	r6, [r4, #20]
   d5bda:	e003      	b.n	d5be4 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d5bdc:	6127      	str	r7, [r4, #16]
  return false;
   d5bde:	2000      	movs	r0, #0
   d5be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d5be4:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d5be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5bea <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d5bea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5bec:	460f      	mov	r7, r1
   d5bee:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d5bf0:	2100      	movs	r1, #0
   d5bf2:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d5bf4:	4604      	mov	r4, r0
   d5bf6:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d5bf8:	f004 f8ea 	bl	d9dd0 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d5bfc:	68b8      	ldr	r0, [r7, #8]
   d5bfe:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5c00:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d5c04:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5c06:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d5c0a:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d5c0c:	6a3b      	ldr	r3, [r7, #32]
   d5c0e:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5c10:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d5c12:	7acb      	ldrb	r3, [r1, #11]
   d5c14:	071d      	lsls	r5, r3, #28
   d5c16:	d44c      	bmi.n	d5cb2 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d5c18:	1883      	adds	r3, r0, r2
   d5c1a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d5c1e:	f003 0317 	and.w	r3, r3, #23
   d5c22:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d5c24:	7ac9      	ldrb	r1, [r1, #11]
   d5c26:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d5c2a:	bf04      	itt	eq
   d5c2c:	f043 0308 	orreq.w	r3, r3, #8
   d5c30:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d5c32:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d5c36:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d5c38:	f006 0303 	and.w	r3, r6, #3
   d5c3c:	2b01      	cmp	r3, #1
   d5c3e:	d009      	beq.n	d5c54 <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d5c40:	2b02      	cmp	r3, #2
   d5c42:	d005      	beq.n	d5c50 <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d5c44:	2b00      	cmp	r3, #0
   d5c46:	d134      	bne.n	d5cb2 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d5c48:	0571      	lsls	r1, r6, #21
   d5c4a:	d432      	bmi.n	d5cb2 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d5c4c:	2301      	movs	r3, #1
   d5c4e:	e002      	b.n	d5c56 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d5c50:	2303      	movs	r3, #3
   d5c52:	e000      	b.n	d5c56 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d5c54:	2302      	movs	r3, #2
   d5c56:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d5c58:	78a1      	ldrb	r1, [r4, #2]
   d5c5a:	078b      	lsls	r3, r1, #30
   d5c5c:	d503      	bpl.n	d5c66 <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d5c5e:	7823      	ldrb	r3, [r4, #0]
   d5c60:	f013 0f11 	tst.w	r3, #17
   d5c64:	d125      	bne.n	d5cb2 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d5c66:	b24b      	sxtb	r3, r1
   d5c68:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d5c6c:	f006 0108 	and.w	r1, r6, #8
   d5c70:	bf14      	ite	ne
   d5c72:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d5c76:	2700      	moveq	r7, #0
   d5c78:	4319      	orrs	r1, r3
   d5c7a:	4339      	orrs	r1, r7
   d5c7c:	70a1      	strb	r1, [r4, #2]
   d5c7e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d5c80:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d5c82:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d5c84:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d5c86:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d5c8a:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d5c8e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d5c92:	d504      	bpl.n	d5c9e <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d5c94:	b181      	cbz	r1, d5cb8 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d5c96:	f000 fac8 	bl	d622a <_ZN9FatVolume9freeChainEm>
   d5c9a:	b968      	cbnz	r0, d5cb8 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d5c9c:	e009      	b.n	d5cb2 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d5c9e:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d5ca0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d5ca2:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d5ca4:	0473      	lsls	r3, r6, #17
   d5ca6:	d50c      	bpl.n	d5cc2 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d5ca8:	69e1      	ldr	r1, [r4, #28]
   d5caa:	4620      	mov	r0, r4
   d5cac:	f7ff ff54 	bl	d5b58 <_ZN7FatFile7seekSetEm>
   d5cb0:	b938      	cbnz	r0, d5cc2 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d5cb2:	2000      	movs	r0, #0
   d5cb4:	7020      	strb	r0, [r4, #0]
  return false;
   d5cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d5cb8:	78a3      	ldrb	r3, [r4, #2]
   d5cba:	f043 0304 	orr.w	r3, r3, #4
   d5cbe:	70a3      	strb	r3, [r4, #2]
   d5cc0:	e7f0      	b.n	d5ca4 <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d5cc2:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d5cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5cc6 <_ZN7FatFile8openNextEPS_i>:
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   d5cc6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   d5cca:	7803      	ldrb	r3, [r0, #0]
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   d5ccc:	4606      	mov	r6, r0
   d5cce:	460d      	mov	r5, r1
   d5cd0:	4617      	mov	r7, r2
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   d5cd2:	bb53      	cbnz	r3, d5d2a <_ZN7FatFile8openNextEPS_i+0x64>
   d5cd4:	780b      	ldrb	r3, [r1, #0]
   d5cd6:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5cda:	d026      	beq.n	d5d2a <_ZN7FatFile8openNextEPS_i+0x64>
   d5cdc:	694c      	ldr	r4, [r1, #20]
   d5cde:	f014 041f 	ands.w	r4, r4, #31
   d5ce2:	d122      	bne.n	d5d2a <_ZN7FatFile8openNextEPS_i+0x64>
   d5ce4:	46a0      	mov	r8, r4
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    dir_t* dir = dirFile->readDirCache();
   d5ce6:	2100      	movs	r1, #0
   d5ce8:	4628      	mov	r0, r5
   d5cea:	f8d5 9014 	ldr.w	r9, [r5, #20]
   d5cee:	f7ff ff16 	bl	d5b1e <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d5cf2:	b1d0      	cbz	r0, d5d2a <_ZN7FatFile8openNextEPS_i+0x64>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
   d5cf4:	7803      	ldrb	r3, [r0, #0]
   d5cf6:	b1c3      	cbz	r3, d5d2a <_ZN7FatFile8openNextEPS_i+0x64>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   d5cf8:	2b2e      	cmp	r3, #46	; 0x2e
   d5cfa:	d101      	bne.n	d5d00 <_ZN7FatFile8openNextEPS_i+0x3a>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
        lfnOrd = ldir->ord & 0X1F;
        chksum = ldir->chksum;
      }
    } else {
      lfnOrd = 0;
   d5cfc:	2400      	movs	r4, #0
   d5cfe:	e7f2      	b.n	d5ce6 <_ZN7FatFile8openNextEPS_i+0x20>
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   d5d00:	2be5      	cmp	r3, #229	; 0xe5
   d5d02:	d0fb      	beq.n	d5cfc <_ZN7FatFile8openNextEPS_i+0x36>
   d5d04:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d5d06:	f011 0f08 	tst.w	r1, #8
   d5d0a:	d105      	bne.n	d5d18 <_ZN7FatFile8openNextEPS_i+0x52>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   d5d0c:	b17c      	cbz	r4, d5d2e <_ZN7FatFile8openNextEPS_i+0x68>
   d5d0e:	f7ff fa06 	bl	d511e <_ZN7FatFile11lfnChecksumEPh>
   d5d12:	4580      	cmp	r8, r0
   d5d14:	d109      	bne.n	d5d2a <_ZN7FatFile8openNextEPS_i+0x64>
   d5d16:	e00a      	b.n	d5d2e <_ZN7FatFile8openNextEPS_i+0x68>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d5d18:	290f      	cmp	r1, #15
   d5d1a:	d1ef      	bne.n	d5cfc <_ZN7FatFile8openNextEPS_i+0x36>
      ldir = reinterpret_cast<ldir_t*>(dir);
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   d5d1c:	0659      	lsls	r1, r3, #25
   d5d1e:	d5e2      	bpl.n	d5ce6 <_ZN7FatFile8openNextEPS_i+0x20>
        lfnOrd = ldir->ord & 0X1F;
   d5d20:	f003 041f 	and.w	r4, r3, #31
        chksum = ldir->chksum;
   d5d24:	f890 800d 	ldrb.w	r8, [r0, #13]
   d5d28:	e7dd      	b.n	d5ce6 <_ZN7FatFile8openNextEPS_i+0x20>
      lfnOrd = 0;
    }
  }

fail:
  return false;
   d5d2a:	2000      	movs	r0, #0
   d5d2c:	e007      	b.n	d5d3e <_ZN7FatFile8openNextEPS_i+0x78>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   d5d2e:	9400      	str	r4, [sp, #0]
   d5d30:	463b      	mov	r3, r7
   d5d32:	f3c9 124f 	ubfx	r2, r9, #5, #16
   d5d36:	4629      	mov	r1, r5
   d5d38:	4630      	mov	r0, r6
   d5d3a:	f7ff ff56 	bl	d5bea <_ZN7FatFile15openCachedEntryEPS_tih>
    }
  }

fail:
  return false;
}
   d5d3e:	b003      	add	sp, #12
   d5d40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5d44 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5d44:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d5d46:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5d48:	4604      	mov	r4, r0
  if (!isOpen()) {
   d5d4a:	b90b      	cbnz	r3, d5d50 <_ZN7FatFile4syncEv+0xc>
    return true;
   d5d4c:	2001      	movs	r0, #1
   d5d4e:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d5d50:	7883      	ldrb	r3, [r0, #2]
   d5d52:	075a      	lsls	r2, r3, #29
   d5d54:	d523      	bpl.n	d5d9e <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d5d56:	2101      	movs	r1, #1
   d5d58:	f7ff fdca 	bl	d58f0 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5d5c:	4605      	mov	r5, r0
   d5d5e:	b928      	cbnz	r0, d5d6c <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d5d60:	7863      	ldrb	r3, [r4, #1]
   d5d62:	f043 0301 	orr.w	r3, r3, #1
   d5d66:	7063      	strb	r3, [r4, #1]
  return false;
   d5d68:	2000      	movs	r0, #0
   d5d6a:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5d6c:	7803      	ldrb	r3, [r0, #0]
   d5d6e:	2be5      	cmp	r3, #229	; 0xe5
   d5d70:	d0f6      	beq.n	d5d60 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d5d72:	7823      	ldrb	r3, [r4, #0]
   d5d74:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d5d76:	bf44      	itt	mi
   d5d78:	69e3      	ldrmi	r3, [r4, #28]
   d5d7a:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d5d7c:	8c23      	ldrh	r3, [r4, #32]
   d5d7e:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d5d80:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5d82:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d5d84:	4b09      	ldr	r3, [pc, #36]	; (d5dac <_ZN7FatFile4syncEv+0x68>)
   d5d86:	681b      	ldr	r3, [r3, #0]
   d5d88:	b12b      	cbz	r3, d5d96 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d5d8a:	f100 0116 	add.w	r1, r0, #22
   d5d8e:	3018      	adds	r0, #24
   d5d90:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d5d92:	8b2b      	ldrh	r3, [r5, #24]
   d5d94:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d5d96:	78a3      	ldrb	r3, [r4, #2]
   d5d98:	f023 0304 	bic.w	r3, r3, #4
   d5d9c:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d5d9e:	68a0      	ldr	r0, [r4, #8]
   d5da0:	f7ff f9b0 	bl	d5104 <_ZN9FatVolume9cacheSyncEv>
   d5da4:	2800      	cmp	r0, #0
   d5da6:	d0db      	beq.n	d5d60 <_ZN7FatFile4syncEv+0x1c>
   d5da8:	e7d0      	b.n	d5d4c <_ZN7FatFile4syncEv+0x8>
   d5daa:	bf00      	nop
   d5dac:	2003e328 	.word	0x2003e328

000d5db0 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d5db0:	b510      	push	{r4, lr}
   d5db2:	4604      	mov	r4, r0
  bool rtn = sync();
   d5db4:	f7ff ffc6 	bl	d5d44 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d5db8:	2300      	movs	r3, #0
   d5dba:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d5dbc:	bd10      	pop	{r4, pc}

000d5dbe <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5dbe:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5dc0:	b093      	sub	sp, #76	; 0x4c
   d5dc2:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5dc4:	2300      	movs	r3, #0
   d5dc6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d5dca:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5dce:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5dd0:	9201      	str	r2, [sp, #4]
   d5dd2:	4606      	mov	r6, r0
   d5dd4:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5dd6:	b10b      	cbz	r3, d5ddc <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d5dd8:	2000      	movs	r0, #0
   d5dda:	e03d      	b.n	d5e58 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5ddc:	780b      	ldrb	r3, [r1, #0]
   d5dde:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5de2:	d0f9      	beq.n	d5dd8 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d5de4:	7813      	ldrb	r3, [r2, #0]
   d5de6:	2b2f      	cmp	r3, #47	; 0x2f
   d5de8:	d112      	bne.n	d5e10 <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d5dea:	9b01      	ldr	r3, [sp, #4]
   d5dec:	781a      	ldrb	r2, [r3, #0]
   d5dee:	2a2f      	cmp	r2, #47	; 0x2f
   d5df0:	d102      	bne.n	d5df8 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d5df2:	3301      	adds	r3, #1
   d5df4:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d5df6:	e7f8      	b.n	d5dea <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d5df8:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d5dfa:	b91a      	cbnz	r2, d5e04 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d5dfc:	4630      	mov	r0, r6
   d5dfe:	f7ff fdb0 	bl	d5962 <_ZN7FatFile8openRootEP9FatVolume>
   d5e02:	e029      	b.n	d5e58 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d5e04:	a809      	add	r0, sp, #36	; 0x24
   d5e06:	f7ff fdac 	bl	d5962 <_ZN7FatFile8openRootEP9FatVolume>
   d5e0a:	2800      	cmp	r0, #0
   d5e0c:	d0e4      	beq.n	d5dd8 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d5e0e:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d5e10:	aa01      	add	r2, sp, #4
   d5e12:	a903      	add	r1, sp, #12
   d5e14:	9801      	ldr	r0, [sp, #4]
   d5e16:	f7ff f9a9 	bl	d516c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d5e1a:	2800      	cmp	r0, #0
   d5e1c:	d0dc      	beq.n	d5dd8 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d5e1e:	9b01      	ldr	r3, [sp, #4]
   d5e20:	781b      	ldrb	r3, [r3, #0]
   d5e22:	b19b      	cbz	r3, d5e4c <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d5e24:	2300      	movs	r3, #0
   d5e26:	aa03      	add	r2, sp, #12
   d5e28:	4621      	mov	r1, r4
   d5e2a:	4630      	mov	r0, r6
   d5e2c:	f7ff fb42 	bl	d54b4 <_ZN7FatFile4openEPS_P7fname_ti>
   d5e30:	2800      	cmp	r0, #0
   d5e32:	d0d1      	beq.n	d5dd8 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d5e34:	4635      	mov	r5, r6
   d5e36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5e38:	ac09      	add	r4, sp, #36	; 0x24
   d5e3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5e3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5e3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5e40:	682b      	ldr	r3, [r5, #0]
   d5e42:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d5e44:	4630      	mov	r0, r6
   d5e46:	f7ff ffb3 	bl	d5db0 <_ZN7FatFile5closeEv>
   d5e4a:	e7e0      	b.n	d5e0e <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d5e4c:	463b      	mov	r3, r7
   d5e4e:	aa03      	add	r2, sp, #12
   d5e50:	4621      	mov	r1, r4
   d5e52:	4630      	mov	r0, r6
   d5e54:	f7ff fb2e 	bl	d54b4 <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d5e58:	b013      	add	sp, #76	; 0x4c
   d5e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5e5c <_ZN7FatFile6removeEPS_PKc>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove(FatFile* dirFile, const char* path) {
   d5e5c:	b500      	push	{lr}
   d5e5e:	b08b      	sub	sp, #44	; 0x2c
   d5e60:	2300      	movs	r3, #0
   d5e62:	f88d 3004 	strb.w	r3, [sp, #4]
   d5e66:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile file;
  if (!file.open(dirFile, path, O_WRONLY)) {
   d5e6a:	460a      	mov	r2, r1
   d5e6c:	2301      	movs	r3, #1
   d5e6e:	4601      	mov	r1, r0
   d5e70:	a801      	add	r0, sp, #4
   d5e72:	f7ff ffa4 	bl	d5dbe <_ZN7FatFile4openEPS_PKci>
   d5e76:	b110      	cbz	r0, d5e7e <_ZN7FatFile6removeEPS_PKc+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return file.remove();
   d5e78:	a801      	add	r0, sp, #4
   d5e7a:	f7ff fa63 	bl	d5344 <_ZN7FatFile6removeEv>

fail:
  return false;
}
   d5e7e:	b00b      	add	sp, #44	; 0x2c
   d5e80:	f85d fb04 	ldr.w	pc, [sp], #4

000d5e84 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5e88:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5e8a:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5e8c:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5e8e:	4604      	mov	r4, r0
   d5e90:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5e92:	d508      	bpl.n	d5ea6 <_ZN7FatFile5writeEPKvj+0x22>
   d5e94:	7883      	ldrb	r3, [r0, #2]
   d5e96:	079a      	lsls	r2, r3, #30
   d5e98:	d505      	bpl.n	d5ea6 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d5e9a:	071b      	lsls	r3, r3, #28
   d5e9c:	d50b      	bpl.n	d5eb6 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d5e9e:	69e1      	ldr	r1, [r4, #28]
   d5ea0:	f7ff fe5a 	bl	d5b58 <_ZN7FatFile7seekSetEm>
   d5ea4:	b938      	cbnz	r0, d5eb6 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d5ea6:	7863      	ldrb	r3, [r4, #1]
   d5ea8:	f043 0301 	orr.w	r3, r3, #1
   d5eac:	7063      	strb	r3, [r4, #1]
  return -1;
   d5eae:	f04f 30ff 	mov.w	r0, #4294967295
   d5eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d5eb6:	6963      	ldr	r3, [r4, #20]
   d5eb8:	43db      	mvns	r3, r3
   d5eba:	4598      	cmp	r8, r3
   d5ebc:	d8f3      	bhi.n	d5ea6 <_ZN7FatFile5writeEPKvj+0x22>
   d5ebe:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5ec0:	f04f 0a00 	mov.w	sl, #0
   d5ec4:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d5ec6:	2e00      	cmp	r6, #0
   d5ec8:	f000 8081 	beq.w	d5fce <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d5ecc:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5ece:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5ed0:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d5ed4:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5ed8:	d11c      	bne.n	d5f14 <_ZN7FatFile5writeEPKvj+0x90>
   d5eda:	b9df      	cbnz	r7, d5f14 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d5edc:	6921      	ldr	r1, [r4, #16]
   d5ede:	b171      	cbz	r1, d5efe <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5ee0:	f104 0210 	add.w	r2, r4, #16
   d5ee4:	f000 f901 	bl	d60ea <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d5ee8:	2800      	cmp	r0, #0
   d5eea:	dbdc      	blt.n	d5ea6 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d5eec:	f040 808e 	bne.w	d600c <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d5ef0:	4620      	mov	r0, r4
   d5ef2:	f7ff fcb2 	bl	d585a <_ZN7FatFile10addClusterEv>
   d5ef6:	2800      	cmp	r0, #0
   d5ef8:	f040 8088 	bne.w	d600c <_ZN7FatFile5writeEPKvj+0x188>
   d5efc:	e7d3      	b.n	d5ea6 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d5efe:	6a23      	ldr	r3, [r4, #32]
   d5f00:	b93b      	cbnz	r3, d5f12 <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d5f02:	4620      	mov	r0, r4
   d5f04:	f7ff fca9 	bl	d585a <_ZN7FatFile10addClusterEv>
   d5f08:	2800      	cmp	r0, #0
   d5f0a:	d0cc      	beq.n	d5ea6 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d5f0c:	6923      	ldr	r3, [r4, #16]
   d5f0e:	6223      	str	r3, [r4, #32]
   d5f10:	e000      	b.n	d5f14 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d5f12:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5f14:	6921      	ldr	r1, [r4, #16]
   d5f16:	68a0      	ldr	r0, [r4, #8]
   d5f18:	f000 f8e1 	bl	d60de <_ZNK9FatVolume17clusterFirstBlockEm>
   d5f1c:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d5f1e:	b917      	cbnz	r7, d5f26 <_ZN7FatFile5writeEPKvj+0xa2>
   d5f20:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5f24:	d221      	bcs.n	d5f6a <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d5f26:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d5f2a:	42b5      	cmp	r5, r6
   d5f2c:	bf28      	it	cs
   d5f2e:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d5f30:	b937      	cbnz	r7, d5f40 <_ZN7FatFile5writeEPKvj+0xbc>
   d5f32:	6963      	ldr	r3, [r4, #20]
   d5f34:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d5f36:	4293      	cmp	r3, r2
   d5f38:	bf34      	ite	cc
   d5f3a:	2201      	movcc	r2, #1
   d5f3c:	2205      	movcs	r2, #5
   d5f3e:	e000      	b.n	d5f42 <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d5f40:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5f42:	68a0      	ldr	r0, [r4, #8]
   d5f44:	3024      	adds	r0, #36	; 0x24
   d5f46:	f000 f8a6 	bl	d6096 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d5f4a:	2800      	cmp	r0, #0
   d5f4c:	d0ab      	beq.n	d5ea6 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d5f4e:	4438      	add	r0, r7
   d5f50:	462a      	mov	r2, r5
   d5f52:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d5f54:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d5f56:	f003 ff30 	bl	d9dba <memcpy>
      if (512 == (n + blockOffset)) {
   d5f5a:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d5f5e:	d130      	bne.n	d5fc2 <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5f60:	68a0      	ldr	r0, [r4, #8]
   d5f62:	3024      	adds	r0, #36	; 0x24
   d5f64:	f000 f870 	bl	d6048 <_ZN8FatCache4syncEv>
   d5f68:	e017      	b.n	d5f9a <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d5f6a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5f6e:	68a0      	ldr	r0, [r4, #8]
   d5f70:	d315      	bcc.n	d5f9e <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d5f72:	7902      	ldrb	r2, [r0, #4]
   d5f74:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d5f76:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d5f78:	b2d2      	uxtb	r2, r2
   d5f7a:	4293      	cmp	r3, r2
   d5f7c:	bf28      	it	cs
   d5f7e:	4613      	movcs	r3, r2
   d5f80:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5f82:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d5f84:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5f88:	d302      	bcc.n	d5f90 <_ZN7FatFile5writeEPKvj+0x10c>
   d5f8a:	441a      	add	r2, r3
   d5f8c:	4291      	cmp	r1, r2
   d5f8e:	d337      	bcc.n	d6000 <_ZN7FatFile5writeEPKvj+0x17c>
   d5f90:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d5f92:	464a      	mov	r2, r9
   d5f94:	6838      	ldr	r0, [r7, #0]
   d5f96:	f000 fc6d 	bl	d6874 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d5f9a:	b990      	cbnz	r0, d5fc2 <_ZN7FatFile5writeEPKvj+0x13e>
   d5f9c:	e783      	b.n	d5ea6 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d5f9e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5fa0:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5fa2:	bf02      	ittt	eq
   d5fa4:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5fa8:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5fac:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d5fae:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5fb0:	464a      	mov	r2, r9
   d5fb2:	6818      	ldr	r0, [r3, #0]
   d5fb4:	f000 fbec 	bl	d6790 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d5fb8:	2800      	cmp	r0, #0
   d5fba:	f43f af74 	beq.w	d5ea6 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d5fbe:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d5fc2:	6963      	ldr	r3, [r4, #20]
   d5fc4:	442b      	add	r3, r5
   d5fc6:	6163      	str	r3, [r4, #20]
    src += n;
   d5fc8:	44a9      	add	r9, r5
    nToWrite -= n;
   d5fca:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d5fcc:	e77a      	b.n	d5ec4 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d5fce:	69e2      	ldr	r2, [r4, #28]
   d5fd0:	4293      	cmp	r3, r2
   d5fd2:	d901      	bls.n	d5fd8 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d5fd4:	61e3      	str	r3, [r4, #28]
   d5fd6:	e002      	b.n	d5fde <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d5fd8:	4b0f      	ldr	r3, [pc, #60]	; (d6018 <_ZN7FatFile5writeEPKvj+0x194>)
   d5fda:	681b      	ldr	r3, [r3, #0]
   d5fdc:	b11b      	cbz	r3, d5fe6 <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d5fde:	78a3      	ldrb	r3, [r4, #2]
   d5fe0:	f043 0304 	orr.w	r3, r3, #4
   d5fe4:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d5fe6:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d5fea:	2b00      	cmp	r3, #0
   d5fec:	db02      	blt.n	d5ff4 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d5fee:	4640      	mov	r0, r8
   d5ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d5ff4:	4620      	mov	r0, r4
   d5ff6:	f7ff fea5 	bl	d5d44 <_ZN7FatFile4syncEv>
   d5ffa:	2800      	cmp	r0, #0
   d5ffc:	d1f7      	bne.n	d5fee <_ZN7FatFile5writeEPKvj+0x16a>
   d5ffe:	e752      	b.n	d5ea6 <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d6000:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d6004:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d6008:	62c2      	str	r2, [r0, #44]	; 0x2c
   d600a:	e7c1      	b.n	d5f90 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d600c:	6921      	ldr	r1, [r4, #16]
   d600e:	68a0      	ldr	r0, [r4, #8]
   d6010:	f000 f865 	bl	d60de <_ZNK9FatVolume17clusterFirstBlockEm>
   d6014:	4601      	mov	r1, r0
   d6016:	e783      	b.n	d5f20 <_ZN7FatFile5writeEPKvj+0x9c>
   d6018:	2003e328 	.word	0x2003e328

000d601c <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d601c:	f001 b9f8 	b.w	d7410 <HAL_Pin_Map>

000d6020 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6020:	b570      	push	{r4, r5, r6, lr}
   d6022:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6024:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6026:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6028:	b149      	cbz	r1, d603e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d602a:	f003 ff3b 	bl	d9ea4 <strlen>
   d602e:	682b      	ldr	r3, [r5, #0]
   d6030:	4602      	mov	r2, r0
   d6032:	4621      	mov	r1, r4
   d6034:	4628      	mov	r0, r5
   d6036:	68db      	ldr	r3, [r3, #12]
    }
   d6038:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d603c:	4718      	bx	r3
    }
   d603e:	bd70      	pop	{r4, r5, r6, pc}

000d6040 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d6040:	f001 b9e6 	b.w	d7410 <HAL_Pin_Map>

000d6044 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d6044:	f001 b9e4 	b.w	d7410 <HAL_Pin_Map>

000d6048 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d6048:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d604a:	7803      	ldrb	r3, [r0, #0]
   d604c:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d604e:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d6050:	d51e      	bpl.n	d6090 <_ZN8FatCache4syncEv+0x48>
   d6052:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d6054:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d6056:	f100 060c 	add.w	r6, r0, #12
   d605a:	4632      	mov	r2, r6
   d605c:	6818      	ldr	r0, [r3, #0]
   d605e:	f000 fb97 	bl	d6790 <_ZN9SdSpiCard10writeBlockEmPKh>
   d6062:	4605      	mov	r5, r0
   d6064:	b908      	cbnz	r0, d606a <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d6066:	2500      	movs	r5, #0
   d6068:	e013      	b.n	d6092 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d606a:	7823      	ldrb	r3, [r4, #0]
   d606c:	079b      	lsls	r3, r3, #30
   d606e:	d404      	bmi.n	d607a <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d6070:	7823      	ldrb	r3, [r4, #0]
   d6072:	f023 0301 	bic.w	r3, r3, #1
   d6076:	7023      	strb	r3, [r4, #0]
   d6078:	e00b      	b.n	d6092 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d607a:	6863      	ldr	r3, [r4, #4]
   d607c:	68a0      	ldr	r0, [r4, #8]
   d607e:	6919      	ldr	r1, [r3, #16]
   d6080:	4632      	mov	r2, r6
   d6082:	4401      	add	r1, r0
   d6084:	6818      	ldr	r0, [r3, #0]
   d6086:	f000 fb83 	bl	d6790 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d608a:	2800      	cmp	r0, #0
   d608c:	d1f0      	bne.n	d6070 <_ZN8FatCache4syncEv+0x28>
   d608e:	e7ea      	b.n	d6066 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d6090:	2501      	movs	r5, #1

fail:
  return false;
}
   d6092:	4628      	mov	r0, r5
   d6094:	bd70      	pop	{r4, r5, r6, pc}

000d6096 <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d6096:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d6098:	6883      	ldr	r3, [r0, #8]
   d609a:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d609c:	4604      	mov	r4, r0
   d609e:	460e      	mov	r6, r1
   d60a0:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d60a2:	d014      	beq.n	d60ce <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d60a4:	f7ff ffd0 	bl	d6048 <_ZN8FatCache4syncEv>
   d60a8:	b908      	cbnz	r0, d60ae <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d60aa:	2000      	movs	r0, #0
   d60ac:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d60ae:	076b      	lsls	r3, r5, #29
   d60b0:	d503      	bpl.n	d60ba <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d60b2:	2300      	movs	r3, #0
   d60b4:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d60b6:	60a6      	str	r6, [r4, #8]
   d60b8:	e009      	b.n	d60ce <_ZN8FatCache4readEmh+0x38>
   d60ba:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d60bc:	f104 020c 	add.w	r2, r4, #12
   d60c0:	4631      	mov	r1, r6
   d60c2:	6818      	ldr	r0, [r3, #0]
   d60c4:	f000 fada 	bl	d667c <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d60c8:	2800      	cmp	r0, #0
   d60ca:	d1f2      	bne.n	d60b2 <_ZN8FatCache4readEmh+0x1c>
   d60cc:	e7ed      	b.n	d60aa <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d60ce:	7823      	ldrb	r3, [r4, #0]
   d60d0:	4620      	mov	r0, r4
   d60d2:	f005 0503 	and.w	r5, r5, #3
   d60d6:	431d      	orrs	r5, r3
   d60d8:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d60dc:	bd70      	pop	{r4, r5, r6, pc}

000d60de <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d60de:	7983      	ldrb	r3, [r0, #6]
   d60e0:	6940      	ldr	r0, [r0, #20]
   d60e2:	3902      	subs	r1, #2
   d60e4:	4099      	lsls	r1, r3
}
   d60e6:	4408      	add	r0, r1
   d60e8:	4770      	bx	lr

000d60ea <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d60ea:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d60ec:	b570      	push	{r4, r5, r6, lr}
   d60ee:	4605      	mov	r5, r0
   d60f0:	460c      	mov	r4, r1
   d60f2:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d60f4:	d802      	bhi.n	d60fc <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d60f6:	f04f 30ff 	mov.w	r0, #4294967295
   d60fa:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d60fc:	69c3      	ldr	r3, [r0, #28]
   d60fe:	4299      	cmp	r1, r3
   d6100:	d8f9      	bhi.n	d60f6 <_ZN9FatVolume6fatGetEmPm+0xc>
   d6102:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d6104:	2b20      	cmp	r3, #32
   d6106:	d110      	bne.n	d612a <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d6108:	6981      	ldr	r1, [r0, #24]
   d610a:	2202      	movs	r2, #2
   d610c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d6110:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d6114:	f7ff ffbf 	bl	d6096 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d6118:	2800      	cmp	r0, #0
   d611a:	d0ec      	beq.n	d60f6 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d611c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d6120:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d6124:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d6128:	e00f      	b.n	d614a <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d612a:	2b10      	cmp	r3, #16
   d612c:	d1e3      	bne.n	d60f6 <_ZN9FatVolume6fatGetEmPm+0xc>
   d612e:	6983      	ldr	r3, [r0, #24]
   d6130:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d6134:	2202      	movs	r2, #2
   d6136:	4419      	add	r1, r3
   d6138:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d613c:	f7ff ffab 	bl	d6096 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d6140:	2800      	cmp	r0, #0
   d6142:	d0d8      	beq.n	d60f6 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d6144:	b2e4      	uxtb	r4, r4
   d6146:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d614a:	69ea      	ldr	r2, [r5, #28]
   d614c:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d614e:	bf9a      	itte	ls
   d6150:	6033      	strls	r3, [r6, #0]
  return 1;
   d6152:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d6154:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d6156:	bd70      	pop	{r4, r5, r6, pc}

000d6158 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6158:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d615a:	b538      	push	{r3, r4, r5, lr}
   d615c:	460c      	mov	r4, r1
   d615e:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6160:	d801      	bhi.n	d6166 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d6162:	2000      	movs	r0, #0
   d6164:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6166:	69c3      	ldr	r3, [r0, #28]
   d6168:	4299      	cmp	r1, r3
   d616a:	d8fa      	bhi.n	d6162 <_ZN9FatVolume6fatPutEmm+0xa>
   d616c:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d616e:	2b20      	cmp	r3, #32
   d6170:	d10e      	bne.n	d6190 <_ZN9FatVolume6fatPutEmm+0x38>
   d6172:	6981      	ldr	r1, [r0, #24]
   d6174:	2203      	movs	r2, #3
   d6176:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d617a:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d617e:	f7ff ff8a 	bl	d6096 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d6182:	2800      	cmp	r0, #0
   d6184:	d0ed      	beq.n	d6162 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d6186:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d618a:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d618e:	e00f      	b.n	d61b0 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d6190:	2b10      	cmp	r3, #16
   d6192:	d1e6      	bne.n	d6162 <_ZN9FatVolume6fatPutEmm+0xa>
   d6194:	6983      	ldr	r3, [r0, #24]
   d6196:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d619a:	2203      	movs	r2, #3
   d619c:	4419      	add	r1, r3
   d619e:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d61a2:	f7ff ff78 	bl	d6096 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d61a6:	2800      	cmp	r0, #0
   d61a8:	d0db      	beq.n	d6162 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d61aa:	b2e4      	uxtb	r4, r4
   d61ac:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d61b0:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d61b2:	bd38      	pop	{r3, r4, r5, pc}

000d61b4 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d61b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d61b8:	68c4      	ldr	r4, [r0, #12]
   d61ba:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d61bc:	4605      	mov	r5, r0
   d61be:	460e      	mov	r6, r1
   d61c0:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d61c2:	d207      	bcs.n	d61d4 <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d61c4:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d61c6:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d61c8:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d61ca:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d61cc:	429c      	cmp	r4, r3
   d61ce:	d903      	bls.n	d61d8 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d61d0:	b9cf      	cbnz	r7, d6206 <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d61d2:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d61d4:	2701      	movs	r7, #1
   d61d6:	e7f7      	b.n	d61c8 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d61d8:	42a6      	cmp	r6, r4
   d61da:	d014      	beq.n	d6206 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d61dc:	aa01      	add	r2, sp, #4
   d61de:	4621      	mov	r1, r4
   d61e0:	4628      	mov	r0, r5
   d61e2:	f7ff ff82 	bl	d60ea <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d61e6:	2800      	cmp	r0, #0
   d61e8:	db0d      	blt.n	d6206 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d61ea:	d0ed      	beq.n	d61c8 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d61ec:	9b01      	ldr	r3, [sp, #4]
   d61ee:	2b00      	cmp	r3, #0
   d61f0:	d1ea      	bne.n	d61c8 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d61f2:	b107      	cbz	r7, d61f6 <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d61f4:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d61f6:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d61fa:	4621      	mov	r1, r4
   d61fc:	4628      	mov	r0, r5
   d61fe:	f7ff ffab 	bl	d6158 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d6202:	4607      	mov	r7, r0
   d6204:	b908      	cbnz	r0, d620a <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d6206:	2700      	movs	r7, #0
   d6208:	e00b      	b.n	d6222 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d620a:	b916      	cbnz	r6, d6212 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d620c:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d6210:	e007      	b.n	d6222 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d6212:	4622      	mov	r2, r4
   d6214:	4631      	mov	r1, r6
   d6216:	4628      	mov	r0, r5
   d6218:	f7ff ff9e 	bl	d6158 <_ZN9FatVolume6fatPutEmm>
   d621c:	2800      	cmp	r0, #0
   d621e:	d1f5      	bne.n	d620c <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d6220:	e7f1      	b.n	d6206 <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d6222:	4638      	mov	r0, r7
   d6224:	b002      	add	sp, #8
   d6226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d622a <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d622a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d622c:	4605      	mov	r5, r0
   d622e:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d6230:	aa01      	add	r2, sp, #4
   d6232:	4621      	mov	r1, r4
   d6234:	4628      	mov	r0, r5
   d6236:	f7ff ff58 	bl	d60ea <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d623a:	1e06      	subs	r6, r0, #0
   d623c:	da01      	bge.n	d6242 <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d623e:	2000      	movs	r0, #0
   d6240:	e00f      	b.n	d6262 <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d6242:	2200      	movs	r2, #0
   d6244:	4621      	mov	r1, r4
   d6246:	4628      	mov	r0, r5
   d6248:	f7ff ff86 	bl	d6158 <_ZN9FatVolume6fatPutEmm>
   d624c:	2800      	cmp	r0, #0
   d624e:	d0f6      	beq.n	d623e <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d6250:	68eb      	ldr	r3, [r5, #12]
   d6252:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d6254:	bf9c      	itt	ls
   d6256:	f104 34ff 	addls.w	r4, r4, #4294967295
   d625a:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d625c:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d625e:	2e00      	cmp	r6, #0
   d6260:	d1e6      	bne.n	d6230 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d6262:	b002      	add	sp, #8
   d6264:	bd70      	pop	{r4, r5, r6, pc}

000d6266 <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d6266:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d6268:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d626a:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d626c:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d626e:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d6270:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d6274:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d6276:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d6278:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d627a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d627e:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d6280:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d6284:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d6288:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d628c:	b1a1      	cbz	r1, d62b8 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d628e:	2904      	cmp	r1, #4
   d6290:	d85d      	bhi.n	d634e <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6292:	4611      	mov	r1, r2
   d6294:	3024      	adds	r0, #36	; 0x24
   d6296:	f7ff fefe 	bl	d6096 <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d629a:	2800      	cmp	r0, #0
   d629c:	d057      	beq.n	d634e <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d629e:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d62a2:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d62a6:	065b      	lsls	r3, r3, #25
   d62a8:	d151      	bne.n	d634e <_ZN9FatVolume4initEh+0xe8>
   d62aa:	351b      	adds	r5, #27
   d62ac:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d62b0:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d62b4:	2d00      	cmp	r5, #0
   d62b6:	d04a      	beq.n	d634e <_ZN9FatVolume4initEh+0xe8>
   d62b8:	2200      	movs	r2, #0
   d62ba:	4629      	mov	r1, r5
   d62bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d62c0:	f7ff fee9 	bl	d6096 <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d62c4:	2800      	cmp	r0, #0
   d62c6:	d042      	beq.n	d634e <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d62c8:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d62cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d62d0:	d13d      	bne.n	d634e <_ZN9FatVolume4initEh+0xe8>
   d62d2:	7c03      	ldrb	r3, [r0, #16]
   d62d4:	2b02      	cmp	r3, #2
   d62d6:	d13a      	bne.n	d634e <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d62d8:	89c3      	ldrh	r3, [r0, #14]
   d62da:	2b00      	cmp	r3, #0
   d62dc:	d037      	beq.n	d634e <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d62de:	7b41      	ldrb	r1, [r0, #13]
   d62e0:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d62e2:	1e4b      	subs	r3, r1, #1
   d62e4:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d62e6:	2300      	movs	r3, #0
   d62e8:	71a3      	strb	r3, [r4, #6]
   d62ea:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d62ec:	2301      	movs	r3, #1
   d62ee:	428b      	cmp	r3, r1
   d62f0:	d007      	beq.n	d6302 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d62f2:	3e01      	subs	r6, #1
   d62f4:	d02b      	beq.n	d634e <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d62f6:	79a2      	ldrb	r2, [r4, #6]
   d62f8:	005b      	lsls	r3, r3, #1
   d62fa:	3201      	adds	r2, #1
   d62fc:	b2db      	uxtb	r3, r3
   d62fe:	71a2      	strb	r2, [r4, #6]
   d6300:	e7f5      	b.n	d62ee <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d6302:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d6304:	b902      	cbnz	r2, d6308 <_ZN9FatVolume4initEh+0xa2>
   d6306:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d6308:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d630a:	89c6      	ldrh	r6, [r0, #14]
   d630c:	442e      	add	r6, r5
   d630e:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d6310:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d6314:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d6316:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d631a:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d631c:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d6320:	0152      	lsls	r2, r2, #5
   d6322:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d6326:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d632a:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d632c:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d6330:	b903      	cbnz	r3, d6334 <_ZN9FatVolume4initEh+0xce>
   d6332:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d6334:	1aad      	subs	r5, r5, r2
   d6336:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d6338:	79a5      	ldrb	r5, [r4, #6]
   d633a:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d633e:	1c6b      	adds	r3, r5, #1
   d6340:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d6342:	f640 73f4 	movw	r3, #4084	; 0xff4
   d6346:	429d      	cmp	r5, r3
   d6348:	d803      	bhi.n	d6352 <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d634a:	230c      	movs	r3, #12
   d634c:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d634e:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d6350:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d6352:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d6356:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d6358:	bf85      	ittet	hi
   d635a:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d635c:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d635e:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d6360:	2320      	movhi	r3, #32
   d6362:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d6364:	2001      	movs	r0, #1

fail:
  return false;
}
   d6366:	bd70      	pop	{r4, r5, r6, pc}

000d6368 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d6368:	f001 b852 	b.w	d7410 <HAL_Pin_Map>

000d636c <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d636c:	f001 b850 	b.w	d7410 <HAL_Pin_Map>

000d6370 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d6370:	f001 b84e 	b.w	d7410 <HAL_Pin_Map>

000d6374 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d6374:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d6376:	4c0e      	ldr	r4, [pc, #56]	; (d63b0 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d6378:	460e      	mov	r6, r1
   d637a:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d637c:	f001 f900 	bl	d7580 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d6380:	6823      	ldr	r3, [r4, #0]
   d6382:	1ac0      	subs	r0, r0, r3
   d6384:	4b0b      	ldr	r3, [pc, #44]	; (d63b4 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d6386:	4298      	cmp	r0, r3
   d6388:	d908      	bls.n	d639c <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d638a:	f001 f901 	bl	d7590 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d638e:	4b0a      	ldr	r3, [pc, #40]	; (d63b8 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d6390:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d6392:	f001 fb01 	bl	d7998 <spark_process>
   d6396:	f001 f8f3 	bl	d7580 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d639a:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d639c:	f001 f8f8 	bl	d7590 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d63a0:	b280      	uxth	r0, r0
   d63a2:	1b80      	subs	r0, r0, r6
}
   d63a4:	42a8      	cmp	r0, r5
   d63a6:	bfd4      	ite	le
   d63a8:	2000      	movle	r0, #0
   d63aa:	2001      	movgt	r0, #1
   d63ac:	bd70      	pop	{r4, r5, r6, pc}
   d63ae:	bf00      	nop
   d63b0:	2003e32c 	.word	0x2003e32c
   d63b4:	000186a0 	.word	0x000186a0
   d63b8:	2003e710 	.word	0x2003e710

000d63bc <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d63bc:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d63be:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d63c0:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d63c2:	b94d      	cbnz	r5, d63d8 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d63c4:	6840      	ldr	r0, [r0, #4]
   d63c6:	f000 fa7d 	bl	d68c4 <_ZN14SdSpiAltDriver8activateEv>
   d63ca:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d63cc:	4629      	mov	r1, r5
   d63ce:	7d18      	ldrb	r0, [r3, #20]
   d63d0:	f002 fdab 	bl	d8f2a <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d63d4:	2301      	movs	r3, #1
   d63d6:	7223      	strb	r3, [r4, #8]
   d63d8:	bd38      	pop	{r3, r4, r5, pc}

000d63da <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d63da:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d63dc:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d63de:	4604      	mov	r4, r0
  if (m_spiActive) {
   d63e0:	b16b      	cbz	r3, d63fe <_ZN9SdSpiCard7spiStopEv+0x24>
   d63e2:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d63e4:	2101      	movs	r1, #1
   d63e6:	7d18      	ldrb	r0, [r3, #20]
   d63e8:	f002 fd9f 	bl	d8f2a <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d63ec:	21ff      	movs	r1, #255	; 0xff
   d63ee:	6860      	ldr	r0, [r4, #4]
   d63f0:	f000 fa9a 	bl	d6928 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d63f4:	6860      	ldr	r0, [r4, #4]
   d63f6:	f000 fa79 	bl	d68ec <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d63fa:	2300      	movs	r3, #0
   d63fc:	7223      	strb	r3, [r4, #8]
   d63fe:	bd10      	pop	{r4, pc}

000d6400 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d6400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6402:	4604      	mov	r4, r0
   d6404:	460d      	mov	r5, r1
   d6406:	4616      	mov	r6, r2
   d6408:	f001 f8c2 	bl	d7590 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d640c:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d640e:	6860      	ldr	r0, [r4, #4]
   d6410:	f000 fa6f 	bl	d68f2 <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d6414:	28ff      	cmp	r0, #255	; 0xff
   d6416:	7260      	strb	r0, [r4, #9]
   d6418:	d109      	bne.n	d642e <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d641a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d641e:	4639      	mov	r1, r7
   d6420:	4620      	mov	r0, r4
   d6422:	f7ff ffa7 	bl	d6374 <_ZN9SdSpiCard10isTimedOutEtt>
   d6426:	2800      	cmp	r0, #0
   d6428:	d0f1      	beq.n	d640e <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d642a:	2355      	movs	r3, #85	; 0x55
   d642c:	e00b      	b.n	d6446 <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d642e:	28fe      	cmp	r0, #254	; 0xfe
   d6430:	d001      	beq.n	d6436 <_ZN9SdSpiCard8readDataEPhj+0x36>
   d6432:	2350      	movs	r3, #80	; 0x50
   d6434:	e007      	b.n	d6446 <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d6436:	4632      	mov	r2, r6
   d6438:	4629      	mov	r1, r5
   d643a:	6860      	ldr	r0, [r4, #4]
   d643c:	f000 fa5e 	bl	d68fc <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d6440:	7260      	strb	r0, [r4, #9]
   d6442:	b130      	cbz	r0, d6452 <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6444:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d6446:	4620      	mov	r0, r4
   d6448:	7023      	strb	r3, [r4, #0]
   d644a:	f7ff ffc6 	bl	d63da <_ZN9SdSpiCard7spiStopEv>
  return false;
   d644e:	2000      	movs	r0, #0
}
   d6450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6452:	6860      	ldr	r0, [r4, #4]
   d6454:	f000 fa4d 	bl	d68f2 <_ZN14SdSpiAltDriver7receiveEv>
   d6458:	6860      	ldr	r0, [r4, #4]
   d645a:	f000 fa4a 	bl	d68f2 <_ZN14SdSpiAltDriver7receiveEv>
   d645e:	2001      	movs	r0, #1
   d6460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6462 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d6462:	b570      	push	{r4, r5, r6, lr}
   d6464:	4604      	mov	r4, r0
   d6466:	460e      	mov	r6, r1
   d6468:	f001 f892 	bl	d7590 <HAL_Timer_Get_Milli_Seconds>
   d646c:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d646e:	4632      	mov	r2, r6
   d6470:	4629      	mov	r1, r5
   d6472:	4620      	mov	r0, r4
   d6474:	f7ff ff7e 	bl	d6374 <_ZN9SdSpiCard10isTimedOutEtt>
   d6478:	b930      	cbnz	r0, d6488 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d647a:	6860      	ldr	r0, [r4, #4]
   d647c:	f000 fa39 	bl	d68f2 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d6480:	28ff      	cmp	r0, #255	; 0xff
   d6482:	d1f4      	bne.n	d646e <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d6484:	2001      	movs	r0, #1
   d6486:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d6488:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d648a:	bd70      	pop	{r4, r5, r6, pc}

000d648c <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d648c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d648e:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d6490:	9201      	str	r2, [sp, #4]
   d6492:	4604      	mov	r4, r0
   d6494:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d6496:	b90b      	cbnz	r3, d649c <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d6498:	f7ff ff90 	bl	d63bc <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d649c:	b125      	cbz	r5, d64a8 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d649e:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d64a2:	4620      	mov	r0, r4
   d64a4:	f7ff ffdd 	bl	d6462 <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d64a8:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d64ac:	6860      	ldr	r0, [r4, #4]
   d64ae:	f000 fa3b 	bl	d6928 <_ZN14SdSpiAltDriver4sendEh>
   d64b2:	f10d 0607 	add.w	r6, sp, #7
   d64b6:	f10d 0703 	add.w	r7, sp, #3
   d64ba:	f816 1901 	ldrb.w	r1, [r6], #-1
   d64be:	6860      	ldr	r0, [r4, #4]
   d64c0:	f000 fa32 	bl	d6928 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d64c4:	42be      	cmp	r6, r7
   d64c6:	d1f8      	bne.n	d64ba <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d64c8:	2d00      	cmp	r5, #0
   d64ca:	bf0c      	ite	eq
   d64cc:	2195      	moveq	r1, #149	; 0x95
   d64ce:	2187      	movne	r1, #135	; 0x87
   d64d0:	6860      	ldr	r0, [r4, #4]
   d64d2:	f000 fa29 	bl	d6928 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d64d6:	6860      	ldr	r0, [r4, #4]
   d64d8:	f000 fa0b 	bl	d68f2 <_ZN14SdSpiAltDriver7receiveEv>
   d64dc:	250b      	movs	r5, #11
   d64de:	6860      	ldr	r0, [r4, #4]
   d64e0:	f000 fa07 	bl	d68f2 <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d64e4:	0603      	lsls	r3, r0, #24
   d64e6:	7260      	strb	r0, [r4, #9]
   d64e8:	d503      	bpl.n	d64f2 <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d64ea:	3d01      	subs	r5, #1
   d64ec:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d64f0:	d1f5      	bne.n	d64de <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d64f2:	b003      	add	sp, #12
   d64f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d64f6 <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d64f6:	b570      	push	{r4, r5, r6, lr}
   d64f8:	4604      	mov	r4, r0
   d64fa:	460d      	mov	r5, r1
   d64fc:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d64fe:	2137      	movs	r1, #55	; 0x37
   d6500:	2200      	movs	r2, #0
   d6502:	f7ff ffc3 	bl	d648c <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d6506:	4632      	mov	r2, r6
   d6508:	4629      	mov	r1, r5
   d650a:	4620      	mov	r0, r4
  }
   d650c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d6510:	f7ff bfbc 	b.w	d648c <_ZN9SdSpiCard11cardCommandEhm>

000d6514 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d6514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d6518:	2500      	movs	r5, #0
   d651a:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d651c:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d651e:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d6520:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d6522:	4604      	mov	r4, r0
   d6524:	4690      	mov	r8, r2
   d6526:	461e      	mov	r6, r3
   d6528:	f001 f832 	bl	d7590 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d652c:	4641      	mov	r1, r8
   d652e:	4607      	mov	r7, r0
   d6530:	6860      	ldr	r0, [r4, #4]
   d6532:	f000 f9cb 	bl	d68cc <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d6536:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d6538:	4a4f      	ldr	r2, [pc, #316]	; (d6678 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d653a:	721d      	strb	r5, [r3, #8]
   d653c:	f04f 0801 	mov.w	r8, #1
   d6540:	60da      	str	r2, [r3, #12]
   d6542:	745d      	strb	r5, [r3, #17]
   d6544:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d6548:	4620      	mov	r0, r4
   d654a:	f7ff ff37 	bl	d63bc <_ZN9SdSpiCard8spiStartEv>
   d654e:	6863      	ldr	r3, [r4, #4]
   d6550:	4641      	mov	r1, r8
   d6552:	7d18      	ldrb	r0, [r3, #20]
   d6554:	f002 fce9 	bl	d8f2a <digitalWrite>
   d6558:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d655a:	21ff      	movs	r1, #255	; 0xff
   d655c:	6860      	ldr	r0, [r4, #4]
   d655e:	3d01      	subs	r5, #1
   d6560:	f000 f9e2 	bl	d6928 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d6564:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6568:	d1f7      	bne.n	d655a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d656a:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d656c:	4629      	mov	r1, r5
   d656e:	7d18      	ldrb	r0, [r3, #20]
   d6570:	f002 fcdb 	bl	d8f2a <digitalWrite>
   d6574:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d6576:	2200      	movs	r2, #0
   d6578:	4611      	mov	r1, r2
   d657a:	4620      	mov	r0, r4
   d657c:	f7ff ff86 	bl	d648c <_ZN9SdSpiCard11cardCommandEhm>
   d6580:	2801      	cmp	r0, #1
   d6582:	4680      	mov	r8, r0
   d6584:	d012      	beq.n	d65ac <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d6586:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d6588:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d658c:	d101      	bne.n	d6592 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d658e:	2320      	movs	r3, #32
   d6590:	e057      	b.n	d6642 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6592:	21fd      	movs	r1, #253	; 0xfd
   d6594:	6860      	ldr	r0, [r4, #4]
   d6596:	f000 f9c7 	bl	d6928 <_ZN14SdSpiAltDriver4sendEh>
   d659a:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d659e:	6860      	ldr	r0, [r4, #4]
   d65a0:	f000 f9a7 	bl	d68f2 <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d65a4:	f1b8 0801 	subs.w	r8, r8, #1
   d65a8:	d1f9      	bne.n	d659e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d65aa:	e7e4      	b.n	d6576 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d65ac:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d65b0:	2108      	movs	r1, #8
   d65b2:	4620      	mov	r0, r4
   d65b4:	f7ff ff6a 	bl	d648c <_ZN9SdSpiCard11cardCommandEhm>
   d65b8:	2805      	cmp	r0, #5
   d65ba:	d102      	bne.n	d65c2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d65bc:	f884 800a 	strb.w	r8, [r4, #10]
   d65c0:	e00f      	b.n	d65e2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d65c2:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d65c4:	6860      	ldr	r0, [r4, #4]
   d65c6:	f000 f994 	bl	d68f2 <_ZN14SdSpiAltDriver7receiveEv>
   d65ca:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d65cc:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d65d0:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d65d2:	d1f7      	bne.n	d65c4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d65d4:	28aa      	cmp	r0, #170	; 0xaa
   d65d6:	d102      	bne.n	d65de <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d65d8:	2302      	movs	r3, #2
   d65da:	72a3      	strb	r3, [r4, #10]
   d65dc:	e001      	b.n	d65e2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d65de:	2325      	movs	r3, #37	; 0x25
   d65e0:	e02f      	b.n	d6642 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d65e2:	7aa3      	ldrb	r3, [r4, #10]
   d65e4:	2b02      	cmp	r3, #2
   d65e6:	bf0c      	ite	eq
   d65e8:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d65ec:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d65ee:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d65f0:	462a      	mov	r2, r5
   d65f2:	2129      	movs	r1, #41	; 0x29
   d65f4:	4620      	mov	r0, r4
   d65f6:	f7ff ff7e 	bl	d64f6 <_ZN9SdSpiCard8cardAcmdEhm>
   d65fa:	4602      	mov	r2, r0
   d65fc:	b148      	cbz	r0, d6612 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d65fe:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d6602:	4639      	mov	r1, r7
   d6604:	4620      	mov	r0, r4
   d6606:	f7ff feb5 	bl	d6374 <_ZN9SdSpiCard10isTimedOutEtt>
   d660a:	2800      	cmp	r0, #0
   d660c:	d0f0      	beq.n	d65f0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d660e:	2343      	movs	r3, #67	; 0x43
   d6610:	e017      	b.n	d6642 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d6612:	7aa3      	ldrb	r3, [r4, #10]
   d6614:	2b02      	cmp	r3, #2
   d6616:	d00e      	beq.n	d6636 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d6618:	4620      	mov	r0, r4
   d661a:	f7ff fede 	bl	d63da <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d661e:	6863      	ldr	r3, [r4, #4]
   d6620:	68b0      	ldr	r0, [r6, #8]
   d6622:	7934      	ldrb	r4, [r6, #4]
   d6624:	7b31      	ldrb	r1, [r6, #12]
   d6626:	7b72      	ldrb	r2, [r6, #13]
   d6628:	745a      	strb	r2, [r3, #17]
   d662a:	60d8      	str	r0, [r3, #12]
   d662c:	721c      	strb	r4, [r3, #8]
   d662e:	7419      	strb	r1, [r3, #16]
  return true;
   d6630:	2001      	movs	r0, #1
   d6632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d6636:	213a      	movs	r1, #58	; 0x3a
   d6638:	4620      	mov	r0, r4
   d663a:	f7ff ff27 	bl	d648c <_ZN9SdSpiCard11cardCommandEhm>
   d663e:	b138      	cbz	r0, d6650 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d6640:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d6642:	4620      	mov	r0, r4
   d6644:	7023      	strb	r3, [r4, #0]
   d6646:	f7ff fec8 	bl	d63da <_ZN9SdSpiCard7spiStopEv>
  return false;
   d664a:	2000      	movs	r0, #0
}
   d664c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6650:	6860      	ldr	r0, [r4, #4]
   d6652:	f000 f94e 	bl	d68f2 <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d6656:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d665a:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d665c:	bf04      	itt	eq
   d665e:	2303      	moveq	r3, #3
   d6660:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6662:	6860      	ldr	r0, [r4, #4]
   d6664:	f000 f945 	bl	d68f2 <_ZN14SdSpiAltDriver7receiveEv>
   d6668:	6860      	ldr	r0, [r4, #4]
   d666a:	f000 f942 	bl	d68f2 <_ZN14SdSpiAltDriver7receiveEv>
   d666e:	6860      	ldr	r0, [r4, #4]
   d6670:	f000 f93f 	bl	d68f2 <_ZN14SdSpiAltDriver7receiveEv>
   d6674:	e7d0      	b.n	d6618 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d6676:	bf00      	nop
   d6678:	0003d090 	.word	0x0003d090

000d667c <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d667c:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d667e:	7a83      	ldrb	r3, [r0, #10]
   d6680:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d6682:	bf18      	it	ne
   d6684:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6686:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d6688:	460a      	mov	r2, r1
   d668a:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d668c:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d668e:	f7ff fefd 	bl	d648c <_ZN9SdSpiCard11cardCommandEhm>
   d6692:	b110      	cbz	r0, d669a <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6694:	2330      	movs	r3, #48	; 0x30
   d6696:	7023      	strb	r3, [r4, #0]
   d6698:	e00b      	b.n	d66b2 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d669a:	4629      	mov	r1, r5
   d669c:	f44f 7200 	mov.w	r2, #512	; 0x200
   d66a0:	4620      	mov	r0, r4
   d66a2:	f7ff fead 	bl	d6400 <_ZN9SdSpiCard8readDataEPhj>
   d66a6:	4605      	mov	r5, r0
   d66a8:	b118      	cbz	r0, d66b2 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d66aa:	4620      	mov	r0, r4
   d66ac:	f7ff fe95 	bl	d63da <_ZN9SdSpiCard7spiStopEv>
  return true;
   d66b0:	e003      	b.n	d66ba <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d66b2:	4620      	mov	r0, r4
   d66b4:	f7ff fe91 	bl	d63da <_ZN9SdSpiCard7spiStopEv>
  return false;
   d66b8:	2500      	movs	r5, #0
}
   d66ba:	4628      	mov	r0, r5
   d66bc:	bd38      	pop	{r3, r4, r5, pc}

000d66be <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d66be:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d66c0:	7a83      	ldrb	r3, [r0, #10]
   d66c2:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d66c4:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d66c6:	bf18      	it	ne
   d66c8:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d66ca:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d66cc:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d66ce:	f7ff fedd 	bl	d648c <_ZN9SdSpiCard11cardCommandEhm>
   d66d2:	b130      	cbz	r0, d66e2 <_ZN9SdSpiCard9readStartEm+0x24>
   d66d4:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d66d6:	4620      	mov	r0, r4
   d66d8:	7023      	strb	r3, [r4, #0]
   d66da:	f7ff fe7e 	bl	d63da <_ZN9SdSpiCard7spiStopEv>
  return false;
   d66de:	2000      	movs	r0, #0
   d66e0:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d66e2:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d66e4:	bd10      	pop	{r4, pc}

000d66e6 <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d66e6:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d66e8:	2200      	movs	r2, #0
   d66ea:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d66ec:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d66ee:	f7ff fecd 	bl	d648c <_ZN9SdSpiCard11cardCommandEhm>
   d66f2:	b130      	cbz	r0, d6702 <_ZN9SdSpiCard8readStopEv+0x1c>
   d66f4:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d66f6:	4620      	mov	r0, r4
   d66f8:	7023      	strb	r3, [r4, #0]
   d66fa:	f7ff fe6e 	bl	d63da <_ZN9SdSpiCard7spiStopEv>
  return false;
   d66fe:	2000      	movs	r0, #0
   d6700:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d6702:	4620      	mov	r0, r4
   d6704:	f7ff fe69 	bl	d63da <_ZN9SdSpiCard7spiStopEv>
  return true;
   d6708:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d670a:	bd10      	pop	{r4, pc}

000d670c <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d670c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d670e:	4605      	mov	r5, r0
   d6710:	4616      	mov	r6, r2
   d6712:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d6714:	f7ff ffd3 	bl	d66be <_ZN9SdSpiCard9readStartEm>
   d6718:	b198      	cbz	r0, d6742 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d671a:	2400      	movs	r4, #0
   d671c:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d671e:	429f      	cmp	r7, r3
   d6720:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d6724:	d908      	bls.n	d6738 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d6726:	f44f 7200 	mov.w	r2, #512	; 0x200
   d672a:	4628      	mov	r0, r5
   d672c:	f7ff fe68 	bl	d6400 <_ZN9SdSpiCard8readDataEPhj>
   d6730:	3401      	adds	r4, #1
   d6732:	2800      	cmp	r0, #0
   d6734:	d1f2      	bne.n	d671c <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d6736:	e004      	b.n	d6742 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d6738:	4628      	mov	r0, r5
}
   d673a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d673e:	f7ff bfd2 	b.w	d66e6 <_ZN9SdSpiCard8readStopEv>
}
   d6742:	2000      	movs	r0, #0
   d6744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6746 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d6746:	b538      	push	{r3, r4, r5, lr}
   d6748:	4604      	mov	r4, r0
   d674a:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d674c:	6840      	ldr	r0, [r0, #4]
   d674e:	f000 f8eb 	bl	d6928 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d6752:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6756:	4629      	mov	r1, r5
   d6758:	6860      	ldr	r0, [r4, #4]
   d675a:	f000 f8e9 	bl	d6930 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d675e:	21ff      	movs	r1, #255	; 0xff
   d6760:	6860      	ldr	r0, [r4, #4]
   d6762:	f000 f8e1 	bl	d6928 <_ZN14SdSpiAltDriver4sendEh>
   d6766:	21ff      	movs	r1, #255	; 0xff
   d6768:	6860      	ldr	r0, [r4, #4]
   d676a:	f000 f8dd 	bl	d6928 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d676e:	6860      	ldr	r0, [r4, #4]
   d6770:	f000 f8bf 	bl	d68f2 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d6774:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d6776:	f000 001f 	and.w	r0, r0, #31
   d677a:	2805      	cmp	r0, #5
   d677c:	d006      	beq.n	d678c <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d677e:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6780:	4620      	mov	r0, r4
   d6782:	7023      	strb	r3, [r4, #0]
   d6784:	f7ff fe29 	bl	d63da <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6788:	2000      	movs	r0, #0
   d678a:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d678c:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d678e:	bd38      	pop	{r3, r4, r5, pc}

000d6790 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6790:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6792:	7a83      	ldrb	r3, [r0, #10]
   d6794:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d6796:	bf18      	it	ne
   d6798:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d679a:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d679c:	460a      	mov	r2, r1
   d679e:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d67a0:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d67a2:	f7ff fe73 	bl	d648c <_ZN9SdSpiCard11cardCommandEhm>
   d67a6:	4606      	mov	r6, r0
   d67a8:	b108      	cbz	r0, d67ae <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d67aa:	2332      	movs	r3, #50	; 0x32
   d67ac:	e01d      	b.n	d67ea <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d67ae:	462a      	mov	r2, r5
   d67b0:	21fe      	movs	r1, #254	; 0xfe
   d67b2:	4620      	mov	r0, r4
   d67b4:	f7ff ffc7 	bl	d6746 <_ZN9SdSpiCard9writeDataEhPKh>
   d67b8:	b1c0      	cbz	r0, d67ec <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d67ba:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d67be:	4620      	mov	r0, r4
   d67c0:	f7ff fe4f 	bl	d6462 <_ZN9SdSpiCard11waitNotBusyEt>
   d67c4:	4605      	mov	r5, r0
   d67c6:	b908      	cbnz	r0, d67cc <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d67c8:	235a      	movs	r3, #90	; 0x5a
   d67ca:	e00e      	b.n	d67ea <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d67cc:	4632      	mov	r2, r6
   d67ce:	210d      	movs	r1, #13
   d67d0:	4620      	mov	r0, r4
   d67d2:	f7ff fe5b 	bl	d648c <_ZN9SdSpiCard11cardCommandEhm>
   d67d6:	b938      	cbnz	r0, d67e8 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d67d8:	6860      	ldr	r0, [r4, #4]
   d67da:	f000 f88a 	bl	d68f2 <_ZN14SdSpiAltDriver7receiveEv>
   d67de:	b918      	cbnz	r0, d67e8 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d67e0:	4620      	mov	r0, r4
   d67e2:	f7ff fdfa 	bl	d63da <_ZN9SdSpiCard7spiStopEv>
  return true;
   d67e6:	e005      	b.n	d67f4 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d67e8:	2329      	movs	r3, #41	; 0x29
   d67ea:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d67ec:	4620      	mov	r0, r4
   d67ee:	f7ff fdf4 	bl	d63da <_ZN9SdSpiCard7spiStopEv>
  return false;
   d67f2:	2500      	movs	r5, #0
}
   d67f4:	4628      	mov	r0, r5
   d67f6:	bd70      	pop	{r4, r5, r6, pc}

000d67f8 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d67f8:	b538      	push	{r3, r4, r5, lr}
   d67fa:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d67fc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d6800:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6802:	f7ff fe2e 	bl	d6462 <_ZN9SdSpiCard11waitNotBusyEt>
   d6806:	b910      	cbnz	r0, d680e <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d6808:	235b      	movs	r3, #91	; 0x5b
   d680a:	7023      	strb	r3, [r4, #0]
   d680c:	e005      	b.n	d681a <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d680e:	462a      	mov	r2, r5
   d6810:	21fc      	movs	r1, #252	; 0xfc
   d6812:	4620      	mov	r0, r4
   d6814:	f7ff ff97 	bl	d6746 <_ZN9SdSpiCard9writeDataEhPKh>
   d6818:	b918      	cbnz	r0, d6822 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d681a:	4620      	mov	r0, r4
   d681c:	f7ff fddd 	bl	d63da <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6820:	2000      	movs	r0, #0
}
   d6822:	bd38      	pop	{r3, r4, r5, pc}

000d6824 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6824:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6826:	7a83      	ldrb	r3, [r0, #10]
   d6828:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d682a:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d682c:	bf18      	it	ne
   d682e:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d6830:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6832:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d6834:	f7ff fe2a 	bl	d648c <_ZN9SdSpiCard11cardCommandEhm>
   d6838:	b130      	cbz	r0, d6848 <_ZN9SdSpiCard10writeStartEm+0x24>
   d683a:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d683c:	4620      	mov	r0, r4
   d683e:	7023      	strb	r3, [r4, #0]
   d6840:	f7ff fdcb 	bl	d63da <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6844:	2000      	movs	r0, #0
   d6846:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d6848:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d684a:	bd10      	pop	{r4, pc}

000d684c <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d684c:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d684e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d6852:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6854:	f7ff fe05 	bl	d6462 <_ZN9SdSpiCard11waitNotBusyEt>
   d6858:	4605      	mov	r5, r0
   d685a:	b120      	cbz	r0, d6866 <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d685c:	21fd      	movs	r1, #253	; 0xfd
   d685e:	6860      	ldr	r0, [r4, #4]
   d6860:	f000 f862 	bl	d6928 <_ZN14SdSpiAltDriver4sendEh>
   d6864:	e001      	b.n	d686a <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6866:	2356      	movs	r3, #86	; 0x56
   d6868:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d686a:	4620      	mov	r0, r4
   d686c:	f7ff fdb5 	bl	d63da <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d6870:	4628      	mov	r0, r5
   d6872:	bd38      	pop	{r3, r4, r5, pc}

000d6874 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d6874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6876:	4605      	mov	r5, r0
   d6878:	4616      	mov	r6, r2
   d687a:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d687c:	f7ff ffd2 	bl	d6824 <_ZN9SdSpiCard10writeStartEm>
   d6880:	b170      	cbz	r0, d68a0 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d6882:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6884:	42bc      	cmp	r4, r7
   d6886:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d688a:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d688c:	d004      	beq.n	d6898 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d688e:	f7ff ffb3 	bl	d67f8 <_ZN9SdSpiCard9writeDataEPKh>
   d6892:	b128      	cbz	r0, d68a0 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6894:	3401      	adds	r4, #1
   d6896:	e7f5      	b.n	d6884 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d6898:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d689c:	f7ff bfd6 	b.w	d684c <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d68a0:	4628      	mov	r0, r5
   d68a2:	f7ff fd9a 	bl	d63da <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d68a6:	2000      	movs	r0, #0
   d68a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d68aa <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d68aa:	f000 bdb1 	b.w	d7410 <HAL_Pin_Map>

000d68ae <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d68ae:	f000 bdaf 	b.w	d7410 <HAL_Pin_Map>

000d68b2 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d68b2:	f000 bdad 	b.w	d7410 <HAL_Pin_Map>
	...

000d68b8 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d68b8:	4b01      	ldr	r3, [pc, #4]	; (d68c0 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d68ba:	2201      	movs	r2, #1
   d68bc:	701a      	strb	r2, [r3, #0]
   d68be:	4770      	bx	lr
   d68c0:	2003e330 	.word	0x2003e330

000d68c4 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d68c4:	1d01      	adds	r1, r0, #4
   d68c6:	6800      	ldr	r0, [r0, #0]
   d68c8:	f001 b950 	b.w	d7b6c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d68cc <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d68cc:	b510      	push	{r4, lr}
   d68ce:	4604      	mov	r4, r0
  m_csPin = csPin;
   d68d0:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d68d2:	6800      	ldr	r0, [r0, #0]
   d68d4:	f001 f8fe 	bl	d7ad4 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d68d8:	7d20      	ldrb	r0, [r4, #20]
   d68da:	2101      	movs	r1, #1
   d68dc:	f002 fb14 	bl	d8f08 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d68e0:	7d20      	ldrb	r0, [r4, #20]
   d68e2:	2101      	movs	r1, #1
}
   d68e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d68e8:	f002 bb1f 	b.w	d8f2a <digitalWrite>

000d68ec <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d68ec:	6800      	ldr	r0, [r0, #0]
   d68ee:	f001 b924 	b.w	d7b3a <_ZN8SPIClass14endTransactionEv>

000d68f2 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d68f2:	21ff      	movs	r1, #255	; 0xff
   d68f4:	6800      	ldr	r0, [r0, #0]
   d68f6:	f001 b9ff 	b.w	d7cf8 <_ZN8SPIClass8transferEh>
	...

000d68fc <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d68fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d68fe:	4b08      	ldr	r3, [pc, #32]	; (d6920 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d6900:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6902:	2500      	movs	r5, #0
   d6904:	4c07      	ldr	r4, [pc, #28]	; (d6924 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d6906:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6908:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d690a:	4613      	mov	r3, r2
   d690c:	460a      	mov	r2, r1
   d690e:	4629      	mov	r1, r5
   d6910:	f001 f9f8 	bl	d7d04 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d6914:	7823      	ldrb	r3, [r4, #0]
   d6916:	2b00      	cmp	r3, #0
   d6918:	d0fc      	beq.n	d6914 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d691a:	2000      	movs	r0, #0
   d691c:	b003      	add	sp, #12
   d691e:	bd30      	pop	{r4, r5, pc}
   d6920:	000d68b9 	.word	0x000d68b9
   d6924:	2003e330 	.word	0x2003e330

000d6928 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d6928:	6800      	ldr	r0, [r0, #0]
   d692a:	f001 b9e5 	b.w	d7cf8 <_ZN8SPIClass8transferEh>
	...

000d6930 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d6930:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d6932:	4b07      	ldr	r3, [pc, #28]	; (d6950 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d6934:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6936:	2500      	movs	r5, #0
   d6938:	4c06      	ldr	r4, [pc, #24]	; (d6954 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d693a:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d693c:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d693e:	4613      	mov	r3, r2
   d6940:	462a      	mov	r2, r5
   d6942:	f001 f9df 	bl	d7d04 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d6946:	7823      	ldrb	r3, [r4, #0]
   d6948:	2b00      	cmp	r3, #0
   d694a:	d0fc      	beq.n	d6946 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d694c:	b003      	add	sp, #12
   d694e:	bd30      	pop	{r4, r5, pc}
   d6950:	000d68b9 	.word	0x000d68b9
   d6954:	2003e330 	.word	0x2003e330

000d6958 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d6958:	f000 bd5a 	b.w	d7410 <HAL_Pin_Map>

000d695c <_Z21igh_rfm69_set_bitratehh>:
    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
} 

void igh_rfm69_set_bitrate(uint8_t msb, uint8_t lsb)
{
   d695c:	b538      	push	{r3, r4, r5, lr}
    igh_radio.writeReg(REG_BITRATEMSB, msb); 
   d695e:	4c07      	ldr	r4, [pc, #28]	; (d697c <_Z21igh_rfm69_set_bitratehh+0x20>)
    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
} 

void igh_rfm69_set_bitrate(uint8_t msb, uint8_t lsb)
{
   d6960:	460d      	mov	r5, r1
    igh_radio.writeReg(REG_BITRATEMSB, msb); 
   d6962:	4602      	mov	r2, r0
   d6964:	2103      	movs	r1, #3
   d6966:	4620      	mov	r0, r4
   d6968:	f000 f978 	bl	d6c5c <_ZN5RFM698writeRegEhh>
    igh_radio.writeReg(REG_BITRATELSB, lsb);
   d696c:	462a      	mov	r2, r5
   d696e:	4620      	mov	r0, r4
   d6970:	2104      	movs	r1, #4
}
   d6972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
} 

void igh_rfm69_set_bitrate(uint8_t msb, uint8_t lsb)
{
    igh_radio.writeReg(REG_BITRATEMSB, msb); 
    igh_radio.writeReg(REG_BITRATELSB, lsb);
   d6976:	f000 b971 	b.w	d6c5c <_ZN5RFM698writeRegEhh>
   d697a:	bf00      	nop
   d697c:	2003e334 	.word	0x2003e334

000d6980 <_Z25igh_rfm69_set_power_levelh>:
}

void igh_rfm69_set_power_level(uint8_t pwrlvl)
{
    igh_radio.setPowerLevel(pwrlvl);
   d6980:	4601      	mov	r1, r0
   d6982:	4801      	ldr	r0, [pc, #4]	; (d6988 <_Z25igh_rfm69_set_power_levelh+0x8>)
   d6984:	f000 b97c 	b.w	d6c80 <_ZN5RFM6913setPowerLevelEh>
   d6988:	2003e334 	.word	0x2003e334

000d698c <_Z15igh_rfm69_resetv>:
}

void igh_rfm69_reset(void)
{
   d698c:	b508      	push	{r3, lr}
    digitalWrite(RFM69_RST, HIGH);
   d698e:	2101      	movs	r1, #1
   d6990:	2006      	movs	r0, #6
   d6992:	f002 faca 	bl	d8f2a <digitalWrite>
    delay(100);
   d6996:	2064      	movs	r0, #100	; 0x64
   d6998:	f001 fc7a 	bl	d8290 <delay>
    digitalWrite(RFM69_RST, LOW);
   d699c:	2006      	movs	r0, #6
   d699e:	2100      	movs	r1, #0
   d69a0:	f002 fac3 	bl	d8f2a <digitalWrite>
    delay(100);
   d69a4:	2064      	movs	r0, #100	; 0x64
}
   d69a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void igh_rfm69_reset(void)
{
    digitalWrite(RFM69_RST, HIGH);
    delay(100);
    digitalWrite(RFM69_RST, LOW);
    delay(100);
   d69aa:	f001 bc71 	b.w	d8290 <delay>
	...

000d69b0 <_Z15igh_rfm69_setupv>:
uint8_t rfm69_powerlevel  = 10; // default power level, about 100M line of site

RFM69 igh_radio = RFM69(RFM69_CS, RFM69_IRQ, IS_RFM69HCW, RFM69_IRQN);

void igh_rfm69_setup(void)
{
   d69b0:	b510      	push	{r4, lr}
    // first reset the module
    pinMode(RFM69_RST, OUTPUT);
   d69b2:	2101      	movs	r1, #1
   d69b4:	2006      	movs	r0, #6
   d69b6:	f002 faa7 	bl	d8f08 <pinMode>

    igh_rfm69_reset();
    
    igh_radio.initialize(FREQUENCY,NODEID,NETWORKID);
   d69ba:	4c0e      	ldr	r4, [pc, #56]	; (d69f4 <_Z15igh_rfm69_setupv+0x44>)
void igh_rfm69_setup(void)
{
    // first reset the module
    pinMode(RFM69_RST, OUTPUT);

    igh_rfm69_reset();
   d69bc:	f7ff ffe6 	bl	d698c <_Z15igh_rfm69_resetv>
    
    igh_radio.initialize(FREQUENCY,NODEID,NETWORKID);
   d69c0:	4b0d      	ldr	r3, [pc, #52]	; (d69f8 <_Z15igh_rfm69_setupv+0x48>)
   d69c2:	4a0e      	ldr	r2, [pc, #56]	; (d69fc <_Z15igh_rfm69_setupv+0x4c>)
   d69c4:	781b      	ldrb	r3, [r3, #0]
   d69c6:	7812      	ldrb	r2, [r2, #0]
   d69c8:	212b      	movs	r1, #43	; 0x2b
   d69ca:	4620      	mov	r0, r4
   d69cc:	f000 fbfc 	bl	d71c8 <_ZN5RFM6910initializeEhhh>

    igh_radio.setHighPower(); // This should only be called for RFM69HCW & HW
   d69d0:	4620      	mov	r0, r4
   d69d2:	2101      	movs	r1, #1
   d69d4:	f000 fa5a 	bl	d6e8c <_ZN5RFM6912setHighPowerEb>

    igh_rfm69_set_bitrate(RF_BITRATEMSB_9600, RF_BITRATELSB_9600); // set to 9.6Kbps
   d69d8:	2105      	movs	r1, #5
   d69da:	200d      	movs	r0, #13
   d69dc:	f7ff ffbe 	bl	d695c <_Z21igh_rfm69_set_bitratehh>

    igh_rfm69_set_power_level(rfm69_powerlevel);
   d69e0:	4b07      	ldr	r3, [pc, #28]	; (d6a00 <_Z15igh_rfm69_setupv+0x50>)
   d69e2:	7818      	ldrb	r0, [r3, #0]
   d69e4:	f7ff ffcc 	bl	d6980 <_Z25igh_rfm69_set_power_levelh>

    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
   d69e8:	4620      	mov	r0, r4
   d69ea:	4906      	ldr	r1, [pc, #24]	; (d6a04 <_Z15igh_rfm69_setupv+0x54>)
} 
   d69ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    igh_rfm69_set_bitrate(RF_BITRATEMSB_9600, RF_BITRATELSB_9600); // set to 9.6Kbps

    igh_rfm69_set_power_level(rfm69_powerlevel);

    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
   d69f0:	f000 bbbe 	b.w	d7170 <_ZN5RFM697encryptEPKc>
   d69f4:	2003e334 	.word	0x2003e334
   d69f8:	2003dd30 	.word	0x2003dd30
   d69fc:	2003dd32 	.word	0x2003dd32
   d6a00:	2003dd2e 	.word	0x2003dd2e
   d6a04:	000da140 	.word	0x000da140

000d6a08 <_Z18igh_rfm69_send_pktPhhs>:
    digitalWrite(RFM69_RST, LOW);
    delay(100);
}

void igh_rfm69_send_pkt(uint8_t * pkt, uint8_t len, int16_t rx_id)
{
   d6a08:	b537      	push	{r0, r1, r2, r4, r5, lr}
    // send but dont ask for ACK, if ACK is required, use (rx_id, pkt, len, true) as arg
    igh_radio.send(rx_id, pkt, len);
   d6a0a:	4c08      	ldr	r4, [pc, #32]	; (d6a2c <_Z18igh_rfm69_send_pktPhhs+0x24>)
   d6a0c:	b2d5      	uxtb	r5, r2
   d6a0e:	2300      	movs	r3, #0
   d6a10:	9300      	str	r3, [sp, #0]
   d6a12:	4602      	mov	r2, r0
   d6a14:	460b      	mov	r3, r1
   d6a16:	4620      	mov	r0, r4
   d6a18:	4629      	mov	r1, r5
   d6a1a:	f000 fab1 	bl	d6f80 <_ZN5RFM694sendEhPKvhb>
    // listen mode
    igh_radio.receiveDone();
   d6a1e:	4620      	mov	r0, r4
}
   d6a20:	b003      	add	sp, #12
   d6a22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
void igh_rfm69_send_pkt(uint8_t * pkt, uint8_t len, int16_t rx_id)
{
    // send but dont ask for ACK, if ACK is required, use (rx_id, pkt, len, true) as arg
    igh_radio.send(rx_id, pkt, len);
    // listen mode
    igh_radio.receiveDone();
   d6a26:	f000 ba11 	b.w	d6e4c <_ZN5RFM6911receiveDoneEv>
   d6a2a:	bf00      	nop
   d6a2c:	2003e334 	.word	0x2003e334

000d6a30 <_Z25igh_rfm69_process_rx_dataPh>:
}

uint8_t igh_rfm69_process_rx_data(uint8_t * rx_buffer)
{
   d6a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6a34:	4606      	mov	r6, r0
   d6a36:	af00      	add	r7, sp, #0
    if ( igh_radio.receiveDone() )
   d6a38:	4821      	ldr	r0, [pc, #132]	; (d6ac0 <_Z25igh_rfm69_process_rx_dataPh+0x90>)
   d6a3a:	f000 fa07 	bl	d6e4c <_ZN5RFM6911receiveDoneEv>
   d6a3e:	4604      	mov	r4, r0
   d6a40:	b3b0      	cbz	r0, d6ab0 <_Z25igh_rfm69_process_rx_dataPh+0x80>
    {
        uint8_t fist_byte = 0;
        uint8_t last_byte = igh_radio.DATALEN - 2; // reduce index by one then move one byte back behind the null terminator
   d6a42:	f8df 8088 	ldr.w	r8, [pc, #136]	; d6acc <_Z25igh_rfm69_process_rx_dataPh+0x9c>
        char rx[igh_radio.DATALEN];
        memcpy(rx, (char *)igh_radio.DATA, igh_radio.DATALEN);
   d6a46:	491f      	ldr	r1, [pc, #124]	; (d6ac4 <_Z25igh_rfm69_process_rx_dataPh+0x94>)
uint8_t igh_rfm69_process_rx_data(uint8_t * rx_buffer)
{
    if ( igh_radio.receiveDone() )
    {
        uint8_t fist_byte = 0;
        uint8_t last_byte = igh_radio.DATALEN - 2; // reduce index by one then move one byte back behind the null terminator
   d6a48:	f898 4000 	ldrb.w	r4, [r8]
        char rx[igh_radio.DATALEN];
   d6a4c:	f898 3000 	ldrb.w	r3, [r8]
        memcpy(rx, (char *)igh_radio.DATA, igh_radio.DATALEN);
   d6a50:	f898 2000 	ldrb.w	r2, [r8]
{
    if ( igh_radio.receiveDone() )
    {
        uint8_t fist_byte = 0;
        uint8_t last_byte = igh_radio.DATALEN - 2; // reduce index by one then move one byte back behind the null terminator
        char rx[igh_radio.DATALEN];
   d6a54:	3307      	adds	r3, #7
   d6a56:	f023 0307 	bic.w	r3, r3, #7
        }
        else
        {
            igh_radio.receiveDone();
            return 0;
        }
   d6a5a:	466d      	mov	r5, sp
{
    if ( igh_radio.receiveDone() )
    {
        uint8_t fist_byte = 0;
        uint8_t last_byte = igh_radio.DATALEN - 2; // reduce index by one then move one byte back behind the null terminator
        char rx[igh_radio.DATALEN];
   d6a5c:	ebad 0d03 	sub.w	sp, sp, r3
        memcpy(rx, (char *)igh_radio.DATA, igh_radio.DATALEN);
   d6a60:	4668      	mov	r0, sp
   d6a62:	f003 f9aa 	bl	d9dba <memcpy>

        if ( (rx[fist_byte] == START_BYTE) && (rx[last_byte] == END_BYTE))
   d6a66:	f89d 3000 	ldrb.w	r3, [sp]
   d6a6a:	2b3c      	cmp	r3, #60	; 0x3c
uint8_t igh_rfm69_process_rx_data(uint8_t * rx_buffer)
{
    if ( igh_radio.receiveDone() )
    {
        uint8_t fist_byte = 0;
        uint8_t last_byte = igh_radio.DATALEN - 2; // reduce index by one then move one byte back behind the null terminator
   d6a6c:	b2e4      	uxtb	r4, r4
        char rx[igh_radio.DATALEN];
        memcpy(rx, (char *)igh_radio.DATA, igh_radio.DATALEN);

        if ( (rx[fist_byte] == START_BYTE) && (rx[last_byte] == END_BYTE))
   d6a6e:	d119      	bne.n	d6aa4 <_Z25igh_rfm69_process_rx_dataPh+0x74>
   d6a70:	3c02      	subs	r4, #2
   d6a72:	b2e4      	uxtb	r4, r4
   d6a74:	f81d 3004 	ldrb.w	r3, [sp, r4]
   d6a78:	2b3e      	cmp	r3, #62	; 0x3e
   d6a7a:	d113      	bne.n	d6aa4 <_Z25igh_rfm69_process_rx_dataPh+0x74>
        {
            // only copy over valid data
            memcpy(rx_buffer, (uint8_t *)igh_radio.DATA, igh_radio.DATALEN);
   d6a7c:	f898 2000 	ldrb.w	r2, [r8]
   d6a80:	4910      	ldr	r1, [pc, #64]	; (d6ac4 <_Z25igh_rfm69_process_rx_dataPh+0x94>)
   d6a82:	4630      	mov	r0, r6
   d6a84:	f003 f999 	bl	d9dba <memcpy>
            // this should never happen as we will never request for an ACK
            if( igh_radio.ACKRequested() )
   d6a88:	480d      	ldr	r0, [pc, #52]	; (d6ac0 <_Z25igh_rfm69_process_rx_dataPh+0x90>)
   d6a8a:	f000 f881 	bl	d6b90 <_ZN5RFM6912ACKRequestedEv>
   d6a8e:	b120      	cbz	r0, d6a9a <_Z25igh_rfm69_process_rx_dataPh+0x6a>
            {
                igh_radio.sendACK();
   d6a90:	2200      	movs	r2, #0
   d6a92:	490d      	ldr	r1, [pc, #52]	; (d6ac8 <_Z25igh_rfm69_process_rx_dataPh+0x98>)
   d6a94:	480a      	ldr	r0, [pc, #40]	; (d6ac0 <_Z25igh_rfm69_process_rx_dataPh+0x90>)
   d6a96:	f000 faa3 	bl	d6fe0 <_ZN5RFM697sendACKEPKvh>
            }
            // continue listening
            igh_radio.receiveDone();
   d6a9a:	4809      	ldr	r0, [pc, #36]	; (d6ac0 <_Z25igh_rfm69_process_rx_dataPh+0x90>)
   d6a9c:	f000 f9d6 	bl	d6e4c <_ZN5RFM6911receiveDoneEv>
            return 1;
   d6aa0:	2001      	movs	r0, #1
   d6aa2:	e003      	b.n	d6aac <_Z25igh_rfm69_process_rx_dataPh+0x7c>
        }
        else
        {
            igh_radio.receiveDone();
   d6aa4:	4806      	ldr	r0, [pc, #24]	; (d6ac0 <_Z25igh_rfm69_process_rx_dataPh+0x90>)
   d6aa6:	f000 f9d1 	bl	d6e4c <_ZN5RFM6911receiveDoneEv>
            return 0;
   d6aaa:	2000      	movs	r0, #0
   d6aac:	46ad      	mov	sp, r5
   d6aae:	e003      	b.n	d6ab8 <_Z25igh_rfm69_process_rx_dataPh+0x88>
        
    }
    else
    {
        // nothing to do
        igh_radio.receiveDone();
   d6ab0:	4803      	ldr	r0, [pc, #12]	; (d6ac0 <_Z25igh_rfm69_process_rx_dataPh+0x90>)
   d6ab2:	f000 f9cb 	bl	d6e4c <_ZN5RFM6911receiveDoneEv>
        return 0;
   d6ab6:	4620      	mov	r0, r4
    } 
}
   d6ab8:	46bd      	mov	sp, r7
   d6aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6abe:	bf00      	nop
   d6ac0:	2003e334 	.word	0x2003e334
   d6ac4:	2003e352 	.word	0x2003e352
   d6ac8:	000da261 	.word	0x000da261
   d6acc:	2003e38f 	.word	0x2003e38f

000d6ad0 <_Z14igh_rfm69_testv>:

void igh_rfm69_test(void)
{
   d6ad0:	b507      	push	{r0, r1, r2, lr}
    uint8_t test_data[] = "<TEST>";
   d6ad2:	4b09      	ldr	r3, [pc, #36]	; (d6af8 <_Z14igh_rfm69_testv+0x28>)
   d6ad4:	6818      	ldr	r0, [r3, #0]
   d6ad6:	889a      	ldrh	r2, [r3, #4]
   d6ad8:	799b      	ldrb	r3, [r3, #6]
   d6ada:	f88d 3006 	strb.w	r3, [sp, #6]
    igh_rfm69_send_pkt(test_data, sizeof(test_data), TEST_NODE);
   d6ade:	4b07      	ldr	r3, [pc, #28]	; (d6afc <_Z14igh_rfm69_testv+0x2c>)
    } 
}

void igh_rfm69_test(void)
{
    uint8_t test_data[] = "<TEST>";
   d6ae0:	9000      	str	r0, [sp, #0]
   d6ae2:	f8ad 2004 	strh.w	r2, [sp, #4]
    igh_rfm69_send_pkt(test_data, sizeof(test_data), TEST_NODE);
   d6ae6:	2107      	movs	r1, #7
   d6ae8:	f9b3 2000 	ldrsh.w	r2, [r3]
   d6aec:	4668      	mov	r0, sp
   d6aee:	f7ff ff8b 	bl	d6a08 <_Z18igh_rfm69_send_pktPhhs>
    
}
   d6af2:	b003      	add	sp, #12
   d6af4:	f85d fb04 	ldr.w	pc, [sp], #4
   d6af8:	000da151 	.word	0x000da151
   d6afc:	2003dd2c 	.word	0x2003dd2c

000d6b00 <_Z22igh_rfm69_test_servicev>:

uint8_t igh_rfm69_test_service(void)
{
   d6b00:	b510      	push	{r4, lr}
    uint8_t expected_resp[] = "<TEST:OK>";
   d6b02:	4a11      	ldr	r2, [pc, #68]	; (d6b48 <_Z22igh_rfm69_test_servicev+0x48>)
    igh_rfm69_send_pkt(test_data, sizeof(test_data), TEST_NODE);
    
}

uint8_t igh_rfm69_test_service(void)
{
   d6b04:	b086      	sub	sp, #24
    uint8_t expected_resp[] = "<TEST:OK>";
   d6b06:	6810      	ldr	r0, [r2, #0]
   d6b08:	6851      	ldr	r1, [r2, #4]
   d6b0a:	8912      	ldrh	r2, [r2, #8]
   d6b0c:	466b      	mov	r3, sp
   d6b0e:	c303      	stmia	r3!, {r0, r1}
   d6b10:	801a      	strh	r2, [r3, #0]
    uint8_t resp_buffer[10]; // expect a <TEST:OK>
    memset(resp_buffer, '\0', sizeof(resp_buffer));
   d6b12:	2300      	movs	r3, #0
   d6b14:	9303      	str	r3, [sp, #12]
   d6b16:	9304      	str	r3, [sp, #16]
   d6b18:	f8ad 3014 	strh.w	r3, [sp, #20]
   d6b1c:	2405      	movs	r4, #5
    
    for(int i = 0; i < 5; i++)
    {
        if( igh_rfm69_process_rx_data(resp_buffer) ) break;
   d6b1e:	a803      	add	r0, sp, #12
   d6b20:	f7ff ff86 	bl	d6a30 <_Z25igh_rfm69_process_rx_dataPh>
   d6b24:	b928      	cbnz	r0, d6b32 <_Z22igh_rfm69_test_servicev+0x32>
        delay(1000); // wait a total of 5 seconds
   d6b26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d6b2a:	f001 fbb1 	bl	d8290 <delay>
{
    uint8_t expected_resp[] = "<TEST:OK>";
    uint8_t resp_buffer[10]; // expect a <TEST:OK>
    memset(resp_buffer, '\0', sizeof(resp_buffer));
    
    for(int i = 0; i < 5; i++)
   d6b2e:	3c01      	subs	r4, #1
   d6b30:	d1f5      	bne.n	d6b1e <_Z22igh_rfm69_test_servicev+0x1e>
    {
        if( igh_rfm69_process_rx_data(resp_buffer) ) break;
        delay(1000); // wait a total of 5 seconds
    }

    if(0 == memcmp(expected_resp, resp_buffer, sizeof(expected_resp)))
   d6b32:	220a      	movs	r2, #10
   d6b34:	a903      	add	r1, sp, #12
   d6b36:	4668      	mov	r0, sp
   d6b38:	f003 f930 	bl	d9d9c <memcmp>
   d6b3c:	fab0 f080 	clz	r0, r0
   d6b40:	0940      	lsrs	r0, r0, #5
    else
    {
        return 0;
    }
    
   d6b42:	b006      	add	sp, #24
   d6b44:	bd10      	pop	{r4, pc}
   d6b46:	bf00      	nop
   d6b48:	000da158 	.word	0x000da158

000d6b4c <_GLOBAL__sub_I_NETWORKID>:
   d6b4c:	b508      	push	{r3, lr}
   d6b4e:	f000 fc5f 	bl	d7410 <HAL_Pin_Map>
    static volatile byte ACK_REQUESTED;
    static volatile byte ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
    static volatile int RSSI; //most accurate RSSI during reception (closest to the reception)
    static volatile byte _mode; //should be protected?

    RFM69(byte slaveSelectPin=RF69_SPI_CS, byte interruptPin=RF69_IRQ_PIN, bool isRFM69HW=false, byte interruptNum=RF69_IRQ_NUM) {
   d6b52:	4b08      	ldr	r3, [pc, #32]	; (d6b74 <_GLOBAL__sub_I_NETWORKID+0x28>)
   d6b54:	4a08      	ldr	r2, [pc, #32]	; (d6b78 <_GLOBAL__sub_I_NETWORKID+0x2c>)
   d6b56:	601a      	str	r2, [r3, #0]
      _slaveSelectPin = slaveSelectPin;
   d6b58:	2211      	movs	r2, #17
      _interruptPin = interruptPin;
      _interruptNum = interruptNum;
      _mode = RF69_MODE_STANDBY;
   d6b5a:	4908      	ldr	r1, [pc, #32]	; (d6b7c <_GLOBAL__sub_I_NETWORKID+0x30>)
    static volatile byte ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
    static volatile int RSSI; //most accurate RSSI during reception (closest to the reception)
    static volatile byte _mode; //should be protected?

    RFM69(byte slaveSelectPin=RF69_SPI_CS, byte interruptPin=RF69_IRQ_PIN, bool isRFM69HW=false, byte interruptNum=RF69_IRQ_NUM) {
      _slaveSelectPin = slaveSelectPin;
   d6b5c:	711a      	strb	r2, [r3, #4]
      _interruptPin = interruptPin;
   d6b5e:	2202      	movs	r2, #2
   d6b60:	715a      	strb	r2, [r3, #5]
      _interruptNum = interruptNum;
   d6b62:	719a      	strb	r2, [r3, #6]
      _mode = RF69_MODE_STANDBY;
   d6b64:	2201      	movs	r2, #1
   d6b66:	700a      	strb	r2, [r1, #0]
      _promiscuousMode = false;
   d6b68:	2100      	movs	r1, #0
   d6b6a:	7219      	strb	r1, [r3, #8]
      _powerLevel = 31;
   d6b6c:	211f      	movs	r1, #31
   d6b6e:	7259      	strb	r1, [r3, #9]
      _isRFM69HW = isRFM69HW;
   d6b70:	729a      	strb	r2, [r3, #10]
   d6b72:	bd08      	pop	{r3, pc}
   d6b74:	2003e334 	.word	0x2003e334
   d6b78:	000da16c 	.word	0x000da16c
   d6b7c:	2003e390 	.word	0x2003e390

000d6b80 <_ZN5RFM694isr0Ev>:
  }
  RSSI = readRSSI();
  //digitalWrite(4, 0);
}

void RFM69::isr0() { selfPointer->interruptHandler(); }
   d6b80:	4b02      	ldr	r3, [pc, #8]	; (d6b8c <_ZN5RFM694isr0Ev+0xc>)
   d6b82:	6818      	ldr	r0, [r3, #0]
   d6b84:	6803      	ldr	r3, [r0, #0]
   d6b86:	681b      	ldr	r3, [r3, #0]
   d6b88:	4718      	bx	r3
   d6b8a:	bf00      	nop
   d6b8c:	2003e34c 	.word	0x2003e34c

000d6b90 <_ZN5RFM6912ACKRequestedEv>:
  return false;
}

//check whether an ACK was requested in the last received packet (non-broadcasted packet)
bool RFM69::ACKRequested() {
  return ACK_REQUESTED && (TARGETID != RF69_BROADCAST_ADDR);
   d6b90:	4b05      	ldr	r3, [pc, #20]	; (d6ba8 <_ZN5RFM6912ACKRequestedEv+0x18>)
   d6b92:	781b      	ldrb	r3, [r3, #0]
   d6b94:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d6b98:	b123      	cbz	r3, d6ba4 <_ZN5RFM6912ACKRequestedEv+0x14>
   d6b9a:	4b04      	ldr	r3, [pc, #16]	; (d6bac <_ZN5RFM6912ACKRequestedEv+0x1c>)
   d6b9c:	7818      	ldrb	r0, [r3, #0]
   d6b9e:	38ff      	subs	r0, #255	; 0xff
   d6ba0:	bf18      	it	ne
   d6ba2:	2001      	movne	r0, #1
}
   d6ba4:	4770      	bx	lr
   d6ba6:	bf00      	nop
   d6ba8:	2003e349 	.word	0x2003e349
   d6bac:	2003e348 	.word	0x2003e348

000d6bb0 <_ZN5RFM698unselectEv>:
  SPI.setClockDivider(SPI_CLOCK_DIV16);
  digitalWrite(_slaveSelectPin, LOW);
}

/// UNselect the transceiver chip
void RFM69::unselect() {
   d6bb0:	b508      	push	{r3, lr}
  digitalWrite(_slaveSelectPin, HIGH);
   d6bb2:	2101      	movs	r1, #1
   d6bb4:	7900      	ldrb	r0, [r0, #4]
   d6bb6:	f002 f9b8 	bl	d8f2a <digitalWrite>
  #ifndef PARTICLE
  SPCR = _SPCR;
  SPSR = _SPSR;
  #endif
  interrupts();
}
   d6bba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  //restore SPI settings to what they were before talking to RFM69
  #ifndef PARTICLE
  SPCR = _SPCR;
  SPSR = _SPSR;
  #endif
  interrupts();
   d6bbe:	f001 be69 	b.w	d8894 <_Z10interruptsv>
	...

000d6bc4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d6bc4:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d6bc6:	4d09      	ldr	r5, [pc, #36]	; (d6bec <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d6bc8:	6829      	ldr	r1, [r5, #0]
   d6bca:	f011 0401 	ands.w	r4, r1, #1
   d6bce:	d10a      	bne.n	d6be6 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d6bd0:	4628      	mov	r0, r5
   d6bd2:	f7fd fa64 	bl	d409e <__cxa_guard_acquire>
   d6bd6:	b130      	cbz	r0, d6be6 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d6bd8:	4621      	mov	r1, r4
   d6bda:	4805      	ldr	r0, [pc, #20]	; (d6bf0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d6bdc:	f000 ff70 	bl	d7ac0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6be0:	4628      	mov	r0, r5
   d6be2:	f7fd fa61 	bl	d40a8 <__cxa_guard_release>
        return instance;
    }
   d6be6:	4802      	ldr	r0, [pc, #8]	; (d6bf0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d6be8:	bd38      	pop	{r3, r4, r5, pc}
   d6bea:	bf00      	nop
   d6bec:	2003de08 	.word	0x2003de08
   d6bf0:	2003de0c 	.word	0x2003de0c

000d6bf4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.3>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   d6bf4:	b510      	push	{r4, lr}
   d6bf6:	4604      	mov	r4, r0
        return instance().transfer(data);
   d6bf8:	f7ff ffe4 	bl	d6bc4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d6bfc:	4621      	mov	r1, r4
    }
   d6bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d6c02:	f001 b879 	b.w	d7cf8 <_ZN8SPIClass8transferEh>

000d6c06 <_ZN5RFM696selectEv>:
  SPI.transfer(value);
  unselect();
}

/// Select the transceiver
void RFM69::select() {
   d6c06:	b510      	push	{r4, lr}
   d6c08:	4604      	mov	r4, r0
  noInterrupts();
   d6c0a:	f001 fe41 	bl	d8890 <_Z12noInterruptsv>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d6c0e:	f7ff ffd9 	bl	d6bc4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d6c12:	2100      	movs	r1, #0
   d6c14:	f000 ff80 	bl	d7b18 <_ZN8SPIClass11setDataModeEh>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   d6c18:	f7ff ffd4 	bl	d6bc4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d6c1c:	2101      	movs	r1, #1
   d6c1e:	f000 ff6a 	bl	d7af6 <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
   d6c22:	f7ff ffcf 	bl	d6bc4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d6c26:	2118      	movs	r1, #24
   d6c28:	f001 f842 	bl	d7cb0 <_ZN8SPIClass15setClockDividerEh>
  //set RFM69 SPI settings
  SPI.setDataMode(SPI_MODE0);
  SPI.setBitOrder(MSBFIRST);
  //SPI_CLOCK_DIV16; // 72MHz / 16 = 4.5MHz
  SPI.setClockDivider(SPI_CLOCK_DIV16);
  digitalWrite(_slaveSelectPin, LOW);
   d6c2c:	7920      	ldrb	r0, [r4, #4]
   d6c2e:	2100      	movs	r1, #0
}
   d6c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  //set RFM69 SPI settings
  SPI.setDataMode(SPI_MODE0);
  SPI.setBitOrder(MSBFIRST);
  //SPI_CLOCK_DIV16; // 72MHz / 16 = 4.5MHz
  SPI.setClockDivider(SPI_CLOCK_DIV16);
  digitalWrite(_slaveSelectPin, LOW);
   d6c34:	f002 b979 	b.w	d8f2a <digitalWrite>

000d6c38 <_ZN5RFM697readRegEh>:
  rssi >>= 1;
  return rssi;
}

byte RFM69::readReg(byte addr)
{
   d6c38:	b538      	push	{r3, r4, r5, lr}
   d6c3a:	460c      	mov	r4, r1
   d6c3c:	4605      	mov	r5, r0
  select();
   d6c3e:	f7ff ffe2 	bl	d6c06 <_ZN5RFM696selectEv>
  SPI.transfer(addr & 0x7F);
   d6c42:	f004 007f 	and.w	r0, r4, #127	; 0x7f
   d6c46:	f7ff ffd5 	bl	d6bf4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.3>
  byte regval = SPI.transfer(0);
   d6c4a:	2000      	movs	r0, #0
   d6c4c:	f7ff ffd2 	bl	d6bf4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.3>
   d6c50:	4604      	mov	r4, r0
  unselect();
   d6c52:	4628      	mov	r0, r5
   d6c54:	f7ff ffac 	bl	d6bb0 <_ZN5RFM698unselectEv>
  return regval;
}
   d6c58:	4620      	mov	r0, r4
   d6c5a:	bd38      	pop	{r3, r4, r5, pc}

000d6c5c <_ZN5RFM698writeRegEhh>:

void RFM69::writeReg(byte addr, byte value)
{
   d6c5c:	b570      	push	{r4, r5, r6, lr}
   d6c5e:	460e      	mov	r6, r1
   d6c60:	4615      	mov	r5, r2
   d6c62:	4604      	mov	r4, r0
  select();
   d6c64:	f7ff ffcf 	bl	d6c06 <_ZN5RFM696selectEv>
  SPI.transfer(addr | 0x80);
   d6c68:	f046 0080 	orr.w	r0, r6, #128	; 0x80
   d6c6c:	f7ff ffc2 	bl	d6bf4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.3>
  SPI.transfer(value);
   d6c70:	4628      	mov	r0, r5
   d6c72:	f7ff ffbf 	bl	d6bf4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.3>
  unselect();
   d6c76:	4620      	mov	r0, r4
}
   d6c78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void RFM69::writeReg(byte addr, byte value)
{
  select();
  SPI.transfer(addr | 0x80);
  SPI.transfer(value);
  unselect();
   d6c7c:	f7ff bf98 	b.w	d6bb0 <_ZN5RFM698unselectEv>

000d6c80 <_ZN5RFM6913setPowerLevelEh>:
}

// set output power: 0=min, 31=max
// this results in a "weaker" transmitted signal, and directly results in a lower RSSI at the receiver
void RFM69::setPowerLevel(byte powerLevel)
{
   d6c80:	b510      	push	{r4, lr}
  _powerLevel = powerLevel;
   d6c82:	7241      	strb	r1, [r0, #9]
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | (_powerLevel > 31 ? 31 : _powerLevel));
   d6c84:	2111      	movs	r1, #17
}

// set output power: 0=min, 31=max
// this results in a "weaker" transmitted signal, and directly results in a lower RSSI at the receiver
void RFM69::setPowerLevel(byte powerLevel)
{
   d6c86:	4604      	mov	r4, r0
  _powerLevel = powerLevel;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | (_powerLevel > 31 ? 31 : _powerLevel));
   d6c88:	f7ff ffd6 	bl	d6c38 <_ZN5RFM697readRegEh>
   d6c8c:	7a62      	ldrb	r2, [r4, #9]
   d6c8e:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
   d6c92:	2a1f      	cmp	r2, #31
   d6c94:	bf94      	ite	ls
   d6c96:	4302      	orrls	r2, r0
   d6c98:	f040 021f 	orrhi.w	r2, r0, #31
   d6c9c:	2111      	movs	r1, #17
   d6c9e:	4620      	mov	r0, r4
}
   d6ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// set output power: 0=min, 31=max
// this results in a "weaker" transmitted signal, and directly results in a lower RSSI at the receiver
void RFM69::setPowerLevel(byte powerLevel)
{
  _powerLevel = powerLevel;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | (_powerLevel > 31 ? 31 : _powerLevel));
   d6ca4:	f7ff bfda 	b.w	d6c5c <_ZN5RFM698writeRegEhh>

000d6ca8 <_ZN5RFM698readRSSIEb>:
    unselect();
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
}

int RFM69::readRSSI(bool forceTrigger) {
   d6ca8:	b510      	push	{r4, lr}
   d6caa:	4604      	mov	r4, r0
  int rssi = 0;
  if (forceTrigger)
   d6cac:	b149      	cbz	r1, d6cc2 <_ZN5RFM698readRSSIEb+0x1a>
  {
    //RSSI trigger not needed if DAGC is in continuous mode
    writeReg(REG_RSSICONFIG, RF_RSSI_START);
   d6cae:	2201      	movs	r2, #1
   d6cb0:	2123      	movs	r1, #35	; 0x23
   d6cb2:	f7ff ffd3 	bl	d6c5c <_ZN5RFM698writeRegEhh>
    while ((readReg(REG_RSSICONFIG) & RF_RSSI_DONE) == 0x00); // Wait for RSSI_Ready
   d6cb6:	2123      	movs	r1, #35	; 0x23
   d6cb8:	4620      	mov	r0, r4
   d6cba:	f7ff ffbd 	bl	d6c38 <_ZN5RFM697readRegEh>
   d6cbe:	0783      	lsls	r3, r0, #30
   d6cc0:	d5f9      	bpl.n	d6cb6 <_ZN5RFM698readRSSIEb+0xe>
  }
  rssi = -readReg(REG_RSSIVALUE);
   d6cc2:	2124      	movs	r1, #36	; 0x24
   d6cc4:	4620      	mov	r0, r4
   d6cc6:	f7ff ffb7 	bl	d6c38 <_ZN5RFM697readRegEh>
   d6cca:	4240      	negs	r0, r0
  rssi >>= 1;
  return rssi;
   d6ccc:	1040      	asrs	r0, r0, #1
}
   d6cce:	bd10      	pop	{r4, pc}

000d6cd0 <_ZN5RFM6916setHighPowerRegsEb>:
  uint16_t baudRate = 32000000L / speedBPS;;
  
  writeReg(REG_BITRATEMSB, (baudRate >> 8) & 0xFF);
  writeReg(REG_BITRATELSB, (baudRate >> 0) & 0xFF);
}
void RFM69::setHighPowerRegs(bool onOff) {
   d6cd0:	b538      	push	{r3, r4, r5, lr}
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
   d6cd2:	2900      	cmp	r1, #0
   d6cd4:	bf14      	ite	ne
   d6cd6:	225d      	movne	r2, #93	; 0x5d
   d6cd8:	2255      	moveq	r2, #85	; 0x55
   d6cda:	460c      	mov	r4, r1
   d6cdc:	215a      	movs	r1, #90	; 0x5a
  uint16_t baudRate = 32000000L / speedBPS;;
  
  writeReg(REG_BITRATEMSB, (baudRate >> 8) & 0xFF);
  writeReg(REG_BITRATELSB, (baudRate >> 0) & 0xFF);
}
void RFM69::setHighPowerRegs(bool onOff) {
   d6cde:	4605      	mov	r5, r0
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
   d6ce0:	f7ff ffbc 	bl	d6c5c <_ZN5RFM698writeRegEhh>
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
   d6ce4:	2c00      	cmp	r4, #0
   d6ce6:	4628      	mov	r0, r5
   d6ce8:	bf14      	ite	ne
   d6cea:	227c      	movne	r2, #124	; 0x7c
   d6cec:	2270      	moveq	r2, #112	; 0x70
   d6cee:	215c      	movs	r1, #92	; 0x5c
}
   d6cf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeReg(REG_BITRATEMSB, (baudRate >> 8) & 0xFF);
  writeReg(REG_BITRATELSB, (baudRate >> 0) & 0xFF);
}
void RFM69::setHighPowerRegs(bool onOff) {
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
   d6cf4:	f7ff bfb2 	b.w	d6c5c <_ZN5RFM698writeRegEhh>

000d6cf8 <_ZN5RFM697setModeEh>:
  writeReg(REG_FRFMID, freqHz >> 8);
  writeReg(REG_FRFLSB, freqHz);
}

void RFM69::setMode(byte newMode)
{
   d6cf8:	b570      	push	{r4, r5, r6, lr}
	if (newMode == _mode) return; //TODO: can remove this?
   d6cfa:	4d28      	ldr	r5, [pc, #160]	; (d6d9c <_ZN5RFM697setModeEh+0xa4>)
   d6cfc:	782b      	ldrb	r3, [r5, #0]
   d6cfe:	428b      	cmp	r3, r1
  writeReg(REG_FRFMID, freqHz >> 8);
  writeReg(REG_FRFLSB, freqHz);
}

void RFM69::setMode(byte newMode)
{
   d6d00:	4604      	mov	r4, r0
   d6d02:	460e      	mov	r6, r1
	if (newMode == _mode) return; //TODO: can remove this?
   d6d04:	d049      	beq.n	d6d9a <_ZN5RFM697setModeEh+0xa2>

	switch (newMode) {
   d6d06:	2904      	cmp	r1, #4
   d6d08:	d847      	bhi.n	d6d9a <_ZN5RFM697setModeEh+0xa2>
   d6d0a:	e8df f001 	tbb	[pc, r1]
   d6d0e:	2c34      	.short	0x2c34
   d6d10:	1224      	.short	0x1224
   d6d12:	03          	.byte	0x03
   d6d13:	00          	.byte	0x00
		case RF69_MODE_TX:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
   d6d14:	2101      	movs	r1, #1
   d6d16:	f7ff ff8f 	bl	d6c38 <_ZN5RFM697readRegEh>
   d6d1a:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d6d1e:	f042 020c 	orr.w	r2, r2, #12
   d6d22:	2101      	movs	r1, #1
   d6d24:	4620      	mov	r0, r4
   d6d26:	f7ff ff99 	bl	d6c5c <_ZN5RFM698writeRegEhh>
      if (_isRFM69HW) setHighPowerRegs(true);
   d6d2a:	7aa3      	ldrb	r3, [r4, #10]
   d6d2c:	b363      	cbz	r3, d6d88 <_ZN5RFM697setModeEh+0x90>
   d6d2e:	2101      	movs	r1, #1
   d6d30:	e00d      	b.n	d6d4e <_ZN5RFM697setModeEh+0x56>
			break;
		case RF69_MODE_RX:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
   d6d32:	2101      	movs	r1, #1
   d6d34:	f7ff ff80 	bl	d6c38 <_ZN5RFM697readRegEh>
   d6d38:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d6d3c:	f042 0210 	orr.w	r2, r2, #16
   d6d40:	2101      	movs	r1, #1
   d6d42:	4620      	mov	r0, r4
   d6d44:	f7ff ff8a 	bl	d6c5c <_ZN5RFM698writeRegEhh>
      if (_isRFM69HW) setHighPowerRegs(false);
   d6d48:	7aa3      	ldrb	r3, [r4, #10]
   d6d4a:	b1eb      	cbz	r3, d6d88 <_ZN5RFM697setModeEh+0x90>
   d6d4c:	2100      	movs	r1, #0
   d6d4e:	4620      	mov	r0, r4
   d6d50:	f7ff ffbe 	bl	d6cd0 <_ZN5RFM6916setHighPowerRegsEb>
   d6d54:	e018      	b.n	d6d88 <_ZN5RFM697setModeEh+0x90>
			break;
		case RF69_MODE_SYNTH:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SYNTHESIZER);
   d6d56:	2101      	movs	r1, #1
   d6d58:	f7ff ff6e 	bl	d6c38 <_ZN5RFM697readRegEh>
   d6d5c:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d6d60:	f042 0208 	orr.w	r2, r2, #8
   d6d64:	e00c      	b.n	d6d80 <_ZN5RFM697setModeEh+0x88>
			break;
		case RF69_MODE_STANDBY:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_STANDBY);
   d6d66:	2101      	movs	r1, #1
   d6d68:	f7ff ff66 	bl	d6c38 <_ZN5RFM697readRegEh>
   d6d6c:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d6d70:	f042 0204 	orr.w	r2, r2, #4
   d6d74:	e004      	b.n	d6d80 <_ZN5RFM697setModeEh+0x88>
			break;
		case RF69_MODE_SLEEP:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
   d6d76:	2101      	movs	r1, #1
   d6d78:	f7ff ff5e 	bl	d6c38 <_ZN5RFM697readRegEh>
   d6d7c:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d6d80:	2101      	movs	r1, #1
   d6d82:	4620      	mov	r0, r4
   d6d84:	f7ff ff6a 	bl	d6c5c <_ZN5RFM698writeRegEhh>
		default: return;
	}

	// we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
	while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // Wait for ModeReady
   d6d88:	782b      	ldrb	r3, [r5, #0]
   d6d8a:	b92b      	cbnz	r3, d6d98 <_ZN5RFM697setModeEh+0xa0>
   d6d8c:	2127      	movs	r1, #39	; 0x27
   d6d8e:	4620      	mov	r0, r4
   d6d90:	f7ff ff52 	bl	d6c38 <_ZN5RFM697readRegEh>
   d6d94:	0603      	lsls	r3, r0, #24
   d6d96:	d5f7      	bpl.n	d6d88 <_ZN5RFM697setModeEh+0x90>

	_mode = newMode;
   d6d98:	702e      	strb	r6, [r5, #0]
   d6d9a:	bd70      	pop	{r4, r5, r6, pc}
   d6d9c:	2003e390 	.word	0x2003e390

000d6da0 <_ZN5RFM697canSendEv>:
  _powerLevel = powerLevel;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | (_powerLevel > 31 ? 31 : _powerLevel));
}

bool RFM69::canSend()
{
   d6da0:	b510      	push	{r4, lr}
  if (_mode == RF69_MODE_RX && PAYLOADLEN == 0 && readRSSI() < CSMA_LIMIT) //if signal stronger than -100dBm is detected assume channel activity
   d6da2:	4b0b      	ldr	r3, [pc, #44]	; (d6dd0 <_ZN5RFM697canSendEv+0x30>)
   d6da4:	781b      	ldrb	r3, [r3, #0]
   d6da6:	2b03      	cmp	r3, #3
  _powerLevel = powerLevel;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | (_powerLevel > 31 ? 31 : _powerLevel));
}

bool RFM69::canSend()
{
   d6da8:	4604      	mov	r4, r0
  if (_mode == RF69_MODE_RX && PAYLOADLEN == 0 && readRSSI() < CSMA_LIMIT) //if signal stronger than -100dBm is detected assume channel activity
   d6daa:	d10e      	bne.n	d6dca <_ZN5RFM697canSendEv+0x2a>
   d6dac:	4b09      	ldr	r3, [pc, #36]	; (d6dd4 <_ZN5RFM697canSendEv+0x34>)
   d6dae:	781b      	ldrb	r3, [r3, #0]
   d6db0:	f003 01ff 	and.w	r1, r3, #255	; 0xff
   d6db4:	b94b      	cbnz	r3, d6dca <_ZN5RFM697canSendEv+0x2a>
   d6db6:	f7ff ff77 	bl	d6ca8 <_ZN5RFM698readRSSIEb>
   d6dba:	305a      	adds	r0, #90	; 0x5a
   d6dbc:	da05      	bge.n	d6dca <_ZN5RFM697canSendEv+0x2a>
  {
    setMode(RF69_MODE_STANDBY);
   d6dbe:	4620      	mov	r0, r4
   d6dc0:	2101      	movs	r1, #1
   d6dc2:	f7ff ff99 	bl	d6cf8 <_ZN5RFM697setModeEh>
    return true;
   d6dc6:	2001      	movs	r0, #1
   d6dc8:	bd10      	pop	{r4, pc}
  }
  return false;
   d6dca:	2000      	movs	r0, #0
}
   d6dcc:	bd10      	pop	{r4, pc}
   d6dce:	bf00      	nop
   d6dd0:	2003e390 	.word	0x2003e390
   d6dd4:	2003e350 	.word	0x2003e350

000d6dd8 <_ZN5RFM6912receiveBeginEv>:
}

void RFM69::isr0() { selfPointer->interruptHandler(); }

void RFM69::receiveBegin() {
  DATALEN = 0;
   d6dd8:	4a15      	ldr	r2, [pc, #84]	; (d6e30 <_ZN5RFM6912receiveBeginEv+0x58>)
   d6dda:	2300      	movs	r3, #0
  //digitalWrite(4, 0);
}

void RFM69::isr0() { selfPointer->interruptHandler(); }

void RFM69::receiveBegin() {
   d6ddc:	b510      	push	{r4, lr}
  DATALEN = 0;
   d6dde:	7013      	strb	r3, [r2, #0]
  SENDERID = 0;
   d6de0:	4a14      	ldr	r2, [pc, #80]	; (d6e34 <_ZN5RFM6912receiveBeginEv+0x5c>)
   d6de2:	7013      	strb	r3, [r2, #0]
  TARGETID = 0;
   d6de4:	4a14      	ldr	r2, [pc, #80]	; (d6e38 <_ZN5RFM6912receiveBeginEv+0x60>)
   d6de6:	7013      	strb	r3, [r2, #0]
  PAYLOADLEN = 0;
   d6de8:	4a14      	ldr	r2, [pc, #80]	; (d6e3c <_ZN5RFM6912receiveBeginEv+0x64>)
   d6dea:	7013      	strb	r3, [r2, #0]
  ACK_REQUESTED = 0;
   d6dec:	4a14      	ldr	r2, [pc, #80]	; (d6e40 <_ZN5RFM6912receiveBeginEv+0x68>)
   d6dee:	7013      	strb	r3, [r2, #0]
  ACK_RECEIVED = 0;
   d6df0:	4a14      	ldr	r2, [pc, #80]	; (d6e44 <_ZN5RFM6912receiveBeginEv+0x6c>)
   d6df2:	7013      	strb	r3, [r2, #0]
  RSSI = 0;
   d6df4:	4a14      	ldr	r2, [pc, #80]	; (d6e48 <_ZN5RFM6912receiveBeginEv+0x70>)
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
   d6df6:	2128      	movs	r1, #40	; 0x28
  SENDERID = 0;
  TARGETID = 0;
  PAYLOADLEN = 0;
  ACK_REQUESTED = 0;
  ACK_RECEIVED = 0;
  RSSI = 0;
   d6df8:	6013      	str	r3, [r2, #0]
  //digitalWrite(4, 0);
}

void RFM69::isr0() { selfPointer->interruptHandler(); }

void RFM69::receiveBegin() {
   d6dfa:	4604      	mov	r4, r0
  TARGETID = 0;
  PAYLOADLEN = 0;
  ACK_REQUESTED = 0;
  ACK_RECEIVED = 0;
  RSSI = 0;
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
   d6dfc:	f7ff ff1c 	bl	d6c38 <_ZN5RFM697readRegEh>
   d6e00:	0743      	lsls	r3, r0, #29
   d6e02:	d50a      	bpl.n	d6e1a <_ZN5RFM6912receiveBeginEv+0x42>
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
   d6e04:	213d      	movs	r1, #61	; 0x3d
   d6e06:	4620      	mov	r0, r4
   d6e08:	f7ff ff16 	bl	d6c38 <_ZN5RFM697readRegEh>
   d6e0c:	f040 0204 	orr.w	r2, r0, #4
   d6e10:	b2d2      	uxtb	r2, r2
   d6e12:	213d      	movs	r1, #61	; 0x3d
   d6e14:	4620      	mov	r0, r4
   d6e16:	f7ff ff21 	bl	d6c5c <_ZN5RFM698writeRegEhh>
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); //set DIO0 to "PAYLOADREADY" in receive mode
   d6e1a:	4620      	mov	r0, r4
   d6e1c:	2125      	movs	r1, #37	; 0x25
   d6e1e:	2240      	movs	r2, #64	; 0x40
   d6e20:	f7ff ff1c 	bl	d6c5c <_ZN5RFM698writeRegEhh>
  setMode(RF69_MODE_RX);
   d6e24:	4620      	mov	r0, r4
   d6e26:	2103      	movs	r1, #3
}
   d6e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ACK_RECEIVED = 0;
  RSSI = 0;
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); //set DIO0 to "PAYLOADREADY" in receive mode
  setMode(RF69_MODE_RX);
   d6e2c:	f7ff bf64 	b.w	d6cf8 <_ZN5RFM697setModeEh>
   d6e30:	2003e38f 	.word	0x2003e38f
   d6e34:	2003e34a 	.word	0x2003e34a
   d6e38:	2003e348 	.word	0x2003e348
   d6e3c:	2003e350 	.word	0x2003e350
   d6e40:	2003e349 	.word	0x2003e349
   d6e44:	2003e351 	.word	0x2003e351
   d6e48:	2003e344 	.word	0x2003e344

000d6e4c <_ZN5RFM6911receiveDoneEv>:
}

bool RFM69::receiveDone() {
   d6e4c:	b510      	push	{r4, lr}
   d6e4e:	4604      	mov	r4, r0
// ATOMIC_BLOCK(ATOMIC_FORCEON)
// {
  noInterrupts(); //re-enabled in unselect() via setMode() or via receiveBegin()
   d6e50:	f001 fd1e 	bl	d8890 <_Z12noInterruptsv>
  if (_mode == RF69_MODE_RX && PAYLOADLEN>0)
   d6e54:	4b0b      	ldr	r3, [pc, #44]	; (d6e84 <_ZN5RFM6911receiveDoneEv+0x38>)
   d6e56:	781a      	ldrb	r2, [r3, #0]
   d6e58:	2a03      	cmp	r2, #3
   d6e5a:	d102      	bne.n	d6e62 <_ZN5RFM6911receiveDoneEv+0x16>
   d6e5c:	4a0a      	ldr	r2, [pc, #40]	; (d6e88 <_ZN5RFM6911receiveDoneEv+0x3c>)
   d6e5e:	7812      	ldrb	r2, [r2, #0]
   d6e60:	b952      	cbnz	r2, d6e78 <_ZN5RFM6911receiveDoneEv+0x2c>
  {
    setMode(RF69_MODE_STANDBY); //enables interrupts
    return true;
  }
  else if (_mode == RF69_MODE_RX)  //already in RX no payload yet
   d6e62:	781b      	ldrb	r3, [r3, #0]
   d6e64:	2b03      	cmp	r3, #3
   d6e66:	d102      	bne.n	d6e6e <_ZN5RFM6911receiveDoneEv+0x22>
  {
    interrupts(); //explicitly re-enable interrupts
   d6e68:	f001 fd14 	bl	d8894 <_Z10interruptsv>
   d6e6c:	e002      	b.n	d6e74 <_ZN5RFM6911receiveDoneEv+0x28>
    return false;
  }
  receiveBegin();
   d6e6e:	4620      	mov	r0, r4
   d6e70:	f7ff ffb2 	bl	d6dd8 <_ZN5RFM6912receiveBeginEv>
  return false;
   d6e74:	2000      	movs	r0, #0
   d6e76:	bd10      	pop	{r4, pc}
// ATOMIC_BLOCK(ATOMIC_FORCEON)
// {
  noInterrupts(); //re-enabled in unselect() via setMode() or via receiveBegin()
  if (_mode == RF69_MODE_RX && PAYLOADLEN>0)
  {
    setMode(RF69_MODE_STANDBY); //enables interrupts
   d6e78:	4620      	mov	r0, r4
   d6e7a:	2101      	movs	r1, #1
   d6e7c:	f7ff ff3c 	bl	d6cf8 <_ZN5RFM697setModeEh>
    return true;
   d6e80:	2001      	movs	r0, #1
    return false;
  }
  receiveBegin();
  return false;
//}
}
   d6e82:	bd10      	pop	{r4, pc}
   d6e84:	2003e390 	.word	0x2003e390
   d6e88:	2003e350 	.word	0x2003e350

000d6e8c <_ZN5RFM6912setHighPowerEb>:
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

void RFM69::setHighPower(bool onOff) {
  _isRFM69HW = onOff;
  writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
   d6e8c:	2900      	cmp	r1, #0
void RFM69::promiscuous(bool onOff) {
  _promiscuousMode=onOff;
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

void RFM69::setHighPower(bool onOff) {
   d6e8e:	b510      	push	{r4, lr}
   d6e90:	4604      	mov	r4, r0
  _isRFM69HW = onOff;
   d6e92:	7281      	strb	r1, [r0, #10]
  writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
   d6e94:	bf14      	ite	ne
   d6e96:	220f      	movne	r2, #15
   d6e98:	221a      	moveq	r2, #26
   d6e9a:	2113      	movs	r1, #19
   d6e9c:	f7ff fede 	bl	d6c5c <_ZN5RFM698writeRegEhh>
  if (_isRFM69HW) //turning ON
   d6ea0:	7aa3      	ldrb	r3, [r4, #10]
   d6ea2:	b143      	cbz	r3, d6eb6 <_ZN5RFM6912setHighPowerEb+0x2a>
    writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); //enable P1 & P2 amplifier stages
   d6ea4:	2111      	movs	r1, #17
   d6ea6:	4620      	mov	r0, r4
   d6ea8:	f7ff fec6 	bl	d6c38 <_ZN5RFM697readRegEh>
   d6eac:	f000 021f 	and.w	r2, r0, #31
   d6eb0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
   d6eb4:	e002      	b.n	d6ebc <_ZN5RFM6912setHighPowerEb+0x30>
  else
    writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); //enable P0 only
   d6eb6:	7a62      	ldrb	r2, [r4, #9]
   d6eb8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   d6ebc:	4620      	mov	r0, r4
   d6ebe:	2111      	movs	r1, #17
}
   d6ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  _isRFM69HW = onOff;
  writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
  if (_isRFM69HW) //turning ON
    writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); //enable P1 & P2 amplifier stages
  else
    writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); //enable P0 only
   d6ec4:	f7ff beca 	b.w	d6c5c <_ZN5RFM698writeRegEhh>

000d6ec8 <_ZN5RFM699sendFrameEhPKvhbb>:
  sendFrame(sender, buffer, bufferSize, false, true);
  RSSI = _RSSI; //restore payload RSSI
}

void RFM69::sendFrame(byte toAddress, const void* buffer, byte bufferSize, bool requestACK, bool sendACK)
{
   d6ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6ecc:	4689      	mov	r9, r1
  setMode(RF69_MODE_STANDBY); //turn off receiver to prevent reception while filling fifo
   d6ece:	2101      	movs	r1, #1
  sendFrame(sender, buffer, bufferSize, false, true);
  RSSI = _RSSI; //restore payload RSSI
}

void RFM69::sendFrame(byte toAddress, const void* buffer, byte bufferSize, bool requestACK, bool sendACK)
{
   d6ed0:	4604      	mov	r4, r0
   d6ed2:	4617      	mov	r7, r2
   d6ed4:	461d      	mov	r5, r3
   d6ed6:	f89d 6020 	ldrb.w	r6, [sp, #32]
   d6eda:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
  setMode(RF69_MODE_STANDBY); //turn off receiver to prevent reception while filling fifo
   d6ede:	f7ff ff0b 	bl	d6cf8 <_ZN5RFM697setModeEh>
	while ((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // Wait for ModeReady
   d6ee2:	2127      	movs	r1, #39	; 0x27
   d6ee4:	4620      	mov	r0, r4
   d6ee6:	f7ff fea7 	bl	d6c38 <_ZN5RFM697readRegEh>
   d6eea:	0603      	lsls	r3, r0, #24
   d6eec:	d5f9      	bpl.n	d6ee2 <_ZN5RFM699sendFrameEhPKvhbb+0x1a>
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_00); // DIO0 is "Packet Sent"
   d6eee:	2200      	movs	r2, #0
   d6ef0:	2125      	movs	r1, #37	; 0x25
   d6ef2:	4620      	mov	r0, r4
   d6ef4:	f7ff feb2 	bl	d6c5c <_ZN5RFM698writeRegEhh>
   d6ef8:	2d3d      	cmp	r5, #61	; 0x3d
  if (bufferSize > RF69_MAX_DATA_LEN) bufferSize = RF69_MAX_DATA_LEN;

	//write to FIFO
	select();
   d6efa:	4620      	mov	r0, r4
   d6efc:	bf28      	it	cs
   d6efe:	253d      	movcs	r5, #61	; 0x3d
   d6f00:	f7ff fe81 	bl	d6c06 <_ZN5RFM696selectEv>
	SPI.transfer(REG_FIFO | 0x80);
   d6f04:	2080      	movs	r0, #128	; 0x80
   d6f06:	f7ff fe75 	bl	d6bf4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.3>
	SPI.transfer(bufferSize + 3);
   d6f0a:	1ce8      	adds	r0, r5, #3
   d6f0c:	b2c0      	uxtb	r0, r0
   d6f0e:	f7ff fe71 	bl	d6bf4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.3>
	SPI.transfer(toAddress);
   d6f12:	4648      	mov	r0, r9
   d6f14:	f7ff fe6e 	bl	d6bf4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.3>
  SPI.transfer(_address);
   d6f18:	79e0      	ldrb	r0, [r4, #7]
   d6f1a:	f7ff fe6b 	bl	d6bf4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.3>

  //control byte
  if (sendACK)
   d6f1e:	f1b8 0f00 	cmp.w	r8, #0
   d6f22:	d004      	beq.n	d6f2e <_ZN5RFM699sendFrameEhPKvhbb+0x66>
    SPI.transfer(0x80);
   d6f24:	2080      	movs	r0, #128	; 0x80
   d6f26:	f7ff fe65 	bl	d6bf4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.3>
  sendFrame(sender, buffer, bufferSize, false, true);
  RSSI = _RSSI; //restore payload RSSI
}

void RFM69::sendFrame(byte toAddress, const void* buffer, byte bufferSize, bool requestACK, bool sendACK)
{
   d6f2a:	463e      	mov	r6, r7
   d6f2c:	e004      	b.n	d6f38 <_ZN5RFM699sendFrameEhPKvhbb+0x70>
  SPI.transfer(_address);

  //control byte
  if (sendACK)
    SPI.transfer(0x80);
  else if (requestACK)
   d6f2e:	b10e      	cbz	r6, d6f34 <_ZN5RFM699sendFrameEhPKvhbb+0x6c>
    SPI.transfer(0x40);
   d6f30:	2040      	movs	r0, #64	; 0x40
   d6f32:	e7f8      	b.n	d6f26 <_ZN5RFM699sendFrameEhPKvhbb+0x5e>
  else SPI.transfer(0x00);
   d6f34:	4630      	mov	r0, r6
   d6f36:	e7f6      	b.n	d6f26 <_ZN5RFM699sendFrameEhPKvhbb+0x5e>

	for (byte i = 0; i < bufferSize; i++)
   d6f38:	1bf3      	subs	r3, r6, r7
   d6f3a:	b2db      	uxtb	r3, r3
   d6f3c:	42ab      	cmp	r3, r5
   d6f3e:	d204      	bcs.n	d6f4a <_ZN5RFM699sendFrameEhPKvhbb+0x82>
    SPI.transfer(((byte*)buffer)[i]);
   d6f40:	f816 0b01 	ldrb.w	r0, [r6], #1
   d6f44:	f7ff fe56 	bl	d6bf4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.3>
    SPI.transfer(0x80);
  else if (requestACK)
    SPI.transfer(0x40);
  else SPI.transfer(0x00);

	for (byte i = 0; i < bufferSize; i++)
   d6f48:	e7f6      	b.n	d6f38 <_ZN5RFM699sendFrameEhPKvhbb+0x70>
    SPI.transfer(((byte*)buffer)[i]);
	unselect();
   d6f4a:	4620      	mov	r0, r4
   d6f4c:	f7ff fe30 	bl	d6bb0 <_ZN5RFM698unselectEv>

	/* no need to wait for transmit mode to be ready since its handled by the radio */
	setMode(RF69_MODE_TX);
   d6f50:	2104      	movs	r1, #4
   d6f52:	4620      	mov	r0, r4
   d6f54:	f7ff fed0 	bl	d6cf8 <_ZN5RFM697setModeEh>
   d6f58:	f000 fb1a 	bl	d7590 <HAL_Timer_Get_Milli_Seconds>
   d6f5c:	4605      	mov	r5, r0
  unsigned long txStart = millis();
	while (digitalRead(_interruptPin) == 0 && millis()-txStart < RF69_TX_LIMIT_MS); //wait for DIO0 to turn HIGH signalling transmission finish
   d6f5e:	7960      	ldrb	r0, [r4, #5]
   d6f60:	f001 fffc 	bl	d8f5c <digitalRead>
   d6f64:	b128      	cbz	r0, d6f72 <_ZN5RFM699sendFrameEhPKvhbb+0xaa>
  //while (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT == 0x00); // Wait for ModeReady
  setMode(RF69_MODE_STANDBY);
   d6f66:	4620      	mov	r0, r4
   d6f68:	2101      	movs	r1, #1
}
   d6f6a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	/* no need to wait for transmit mode to be ready since its handled by the radio */
	setMode(RF69_MODE_TX);
  unsigned long txStart = millis();
	while (digitalRead(_interruptPin) == 0 && millis()-txStart < RF69_TX_LIMIT_MS); //wait for DIO0 to turn HIGH signalling transmission finish
  //while (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT == 0x00); // Wait for ModeReady
  setMode(RF69_MODE_STANDBY);
   d6f6e:	f7ff bec3 	b.w	d6cf8 <_ZN5RFM697setModeEh>
   d6f72:	f000 fb0d 	bl	d7590 <HAL_Timer_Get_Milli_Seconds>
	unselect();

	/* no need to wait for transmit mode to be ready since its handled by the radio */
	setMode(RF69_MODE_TX);
  unsigned long txStart = millis();
	while (digitalRead(_interruptPin) == 0 && millis()-txStart < RF69_TX_LIMIT_MS); //wait for DIO0 to turn HIGH signalling transmission finish
   d6f76:	1b40      	subs	r0, r0, r5
   d6f78:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d6f7c:	d3ef      	bcc.n	d6f5e <_ZN5RFM699sendFrameEhPKvhbb+0x96>
   d6f7e:	e7f2      	b.n	d6f66 <_ZN5RFM699sendFrameEhPKvhbb+0x9e>

000d6f80 <_ZN5RFM694sendEhPKvhb>:
  }
  return false;
}

void RFM69::send(byte toAddress, const void* buffer, byte bufferSize, bool requestACK)
{
   d6f80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d6f84:	460d      	mov	r5, r1
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
   d6f86:	213d      	movs	r1, #61	; 0x3d
  }
  return false;
}

void RFM69::send(byte toAddress, const void* buffer, byte bufferSize, bool requestACK)
{
   d6f88:	461f      	mov	r7, r3
   d6f8a:	4604      	mov	r4, r0
   d6f8c:	4616      	mov	r6, r2
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
   d6f8e:	f7ff fe53 	bl	d6c38 <_ZN5RFM697readRegEh>
   d6f92:	f040 0204 	orr.w	r2, r0, #4
   d6f96:	b2d2      	uxtb	r2, r2
   d6f98:	213d      	movs	r1, #61	; 0x3d
   d6f9a:	4620      	mov	r0, r4
   d6f9c:	f7ff fe5e 	bl	d6c5c <_ZN5RFM698writeRegEhh>
   d6fa0:	f000 faf6 	bl	d7590 <HAL_Timer_Get_Milli_Seconds>
   d6fa4:	4680      	mov	r8, r0
  unsigned long now = millis();
  while (!canSend() && millis()-now < RF69_CSMA_LIMIT_MS) receiveDone();
   d6fa6:	4620      	mov	r0, r4
   d6fa8:	f7ff fefa 	bl	d6da0 <_ZN5RFM697canSendEv>
   d6fac:	b950      	cbnz	r0, d6fc4 <_ZN5RFM694sendEhPKvhb+0x44>
   d6fae:	f000 faef 	bl	d7590 <HAL_Timer_Get_Milli_Seconds>
   d6fb2:	ebc8 0000 	rsb	r0, r8, r0
   d6fb6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d6fba:	d203      	bcs.n	d6fc4 <_ZN5RFM694sendEhPKvhb+0x44>
   d6fbc:	4620      	mov	r0, r4
   d6fbe:	f7ff ff45 	bl	d6e4c <_ZN5RFM6911receiveDoneEv>
   d6fc2:	e7f0      	b.n	d6fa6 <_ZN5RFM694sendEhPKvhb+0x26>
  sendFrame(toAddress, buffer, bufferSize, requestACK, false);
   d6fc4:	2300      	movs	r3, #0
   d6fc6:	9301      	str	r3, [sp, #4]
   d6fc8:	f89d 3020 	ldrb.w	r3, [sp, #32]
   d6fcc:	9300      	str	r3, [sp, #0]
   d6fce:	4632      	mov	r2, r6
   d6fd0:	463b      	mov	r3, r7
   d6fd2:	4629      	mov	r1, r5
   d6fd4:	4620      	mov	r0, r4
   d6fd6:	f7ff ff77 	bl	d6ec8 <_ZN5RFM699sendFrameEhPKvhbb>
}
   d6fda:	b002      	add	sp, #8
   d6fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6fe0 <_ZN5RFM697sendACKEPKvh>:
bool RFM69::ACKRequested() {
  return ACK_REQUESTED && (TARGETID != RF69_BROADCAST_ADDR);
}

/// Should be called immediately after reception in case sender wants ACK
void RFM69::sendACK(const void* buffer, byte bufferSize) {
   d6fe0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  byte sender = SENDERID;
   d6fe4:	4b18      	ldr	r3, [pc, #96]	; (d7048 <_ZN5RFM697sendACKEPKvh+0x68>)
  int _RSSI = RSSI; //save payload received RSSI value
   d6fe6:	4c19      	ldr	r4, [pc, #100]	; (d704c <_ZN5RFM697sendACKEPKvh+0x6c>)
  return ACK_REQUESTED && (TARGETID != RF69_BROADCAST_ADDR);
}

/// Should be called immediately after reception in case sender wants ACK
void RFM69::sendACK(const void* buffer, byte bufferSize) {
  byte sender = SENDERID;
   d6fe8:	781e      	ldrb	r6, [r3, #0]
  int _RSSI = RSSI; //save payload received RSSI value
   d6fea:	6827      	ldr	r7, [r4, #0]
bool RFM69::ACKRequested() {
  return ACK_REQUESTED && (TARGETID != RF69_BROADCAST_ADDR);
}

/// Should be called immediately after reception in case sender wants ACK
void RFM69::sendACK(const void* buffer, byte bufferSize) {
   d6fec:	4688      	mov	r8, r1
  byte sender = SENDERID;
  int _RSSI = RSSI; //save payload received RSSI value
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
   d6fee:	213d      	movs	r1, #61	; 0x3d
bool RFM69::ACKRequested() {
  return ACK_REQUESTED && (TARGETID != RF69_BROADCAST_ADDR);
}

/// Should be called immediately after reception in case sender wants ACK
void RFM69::sendACK(const void* buffer, byte bufferSize) {
   d6ff0:	4605      	mov	r5, r0
   d6ff2:	4691      	mov	r9, r2
  byte sender = SENDERID;
  int _RSSI = RSSI; //save payload received RSSI value
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
   d6ff4:	f7ff fe20 	bl	d6c38 <_ZN5RFM697readRegEh>
   d6ff8:	f040 0204 	orr.w	r2, r0, #4
   d6ffc:	b2d2      	uxtb	r2, r2
   d6ffe:	213d      	movs	r1, #61	; 0x3d
   d7000:	4628      	mov	r0, r5
   d7002:	f7ff fe2b 	bl	d6c5c <_ZN5RFM698writeRegEhh>
   d7006:	f000 fac3 	bl	d7590 <HAL_Timer_Get_Milli_Seconds>
  return ACK_REQUESTED && (TARGETID != RF69_BROADCAST_ADDR);
}

/// Should be called immediately after reception in case sender wants ACK
void RFM69::sendACK(const void* buffer, byte bufferSize) {
  byte sender = SENDERID;
   d700a:	b2f6      	uxtb	r6, r6
   d700c:	4682      	mov	sl, r0
  int _RSSI = RSSI; //save payload received RSSI value
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
  unsigned long now = millis();
  while (!canSend() && millis()-now < RF69_CSMA_LIMIT_MS) receiveDone();
   d700e:	4628      	mov	r0, r5
   d7010:	f7ff fec6 	bl	d6da0 <_ZN5RFM697canSendEv>
   d7014:	b950      	cbnz	r0, d702c <_ZN5RFM697sendACKEPKvh+0x4c>
   d7016:	f000 fabb 	bl	d7590 <HAL_Timer_Get_Milli_Seconds>
   d701a:	ebca 0000 	rsb	r0, sl, r0
   d701e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d7022:	d203      	bcs.n	d702c <_ZN5RFM697sendACKEPKvh+0x4c>
   d7024:	4628      	mov	r0, r5
   d7026:	f7ff ff11 	bl	d6e4c <_ZN5RFM6911receiveDoneEv>
   d702a:	e7f0      	b.n	d700e <_ZN5RFM697sendACKEPKvh+0x2e>
  sendFrame(sender, buffer, bufferSize, false, true);
   d702c:	2200      	movs	r2, #0
   d702e:	2301      	movs	r3, #1
   d7030:	e88d 000c 	stmia.w	sp, {r2, r3}
   d7034:	4631      	mov	r1, r6
   d7036:	464b      	mov	r3, r9
   d7038:	4642      	mov	r2, r8
   d703a:	4628      	mov	r0, r5
   d703c:	f7ff ff44 	bl	d6ec8 <_ZN5RFM699sendFrameEhPKvhbb>
  RSSI = _RSSI; //restore payload RSSI
   d7040:	6027      	str	r7, [r4, #0]
}
   d7042:	b002      	add	sp, #8
   d7044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7048:	2003e34a 	.word	0x2003e34a
   d704c:	2003e344 	.word	0x2003e344

000d7050 <_ZN5RFM6916interruptHandlerEv>:
	while (digitalRead(_interruptPin) == 0 && millis()-txStart < RF69_TX_LIMIT_MS); //wait for DIO0 to turn HIGH signalling transmission finish
  //while (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT == 0x00); // Wait for ModeReady
  setMode(RF69_MODE_STANDBY);
}

void RFM69::interruptHandler() {
   d7050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  //pinMode(4, OUTPUT);
  //digitalWrite(4, 1);
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
   d7054:	4b3d      	ldr	r3, [pc, #244]	; (d714c <_ZN5RFM6916interruptHandlerEv+0xfc>)
   d7056:	781b      	ldrb	r3, [r3, #0]
   d7058:	2b03      	cmp	r3, #3
	while (digitalRead(_interruptPin) == 0 && millis()-txStart < RF69_TX_LIMIT_MS); //wait for DIO0 to turn HIGH signalling transmission finish
  //while (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT == 0x00); // Wait for ModeReady
  setMode(RF69_MODE_STANDBY);
}

void RFM69::interruptHandler() {
   d705a:	4604      	mov	r4, r0
  //pinMode(4, OUTPUT);
  //digitalWrite(4, 1);
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
   d705c:	d114      	bne.n	d7088 <_ZN5RFM6916interruptHandlerEv+0x38>
   d705e:	2128      	movs	r1, #40	; 0x28
   d7060:	f7ff fdea 	bl	d6c38 <_ZN5RFM697readRegEh>
   d7064:	0743      	lsls	r3, r0, #29
   d7066:	d417      	bmi.n	d7098 <_ZN5RFM6916interruptHandlerEv+0x48>
   d7068:	e00e      	b.n	d7088 <_ZN5RFM6916interruptHandlerEv+0x38>

    for (byte i= 0; i < DATALEN; i++)
    {
      DATA[i] = SPI.transfer(0);
    }
    if (DATALEN<RF69_MAX_DATA_LEN) DATA[DATALEN]=0; //add null at end of string
   d706a:	7813      	ldrb	r3, [r2, #0]
   d706c:	2b3c      	cmp	r3, #60	; 0x3c
   d706e:	d804      	bhi.n	d707a <_ZN5RFM6916interruptHandlerEv+0x2a>
   d7070:	7813      	ldrb	r3, [r2, #0]
   d7072:	4a37      	ldr	r2, [pc, #220]	; (d7150 <_ZN5RFM6916interruptHandlerEv+0x100>)
   d7074:	b2db      	uxtb	r3, r3
   d7076:	2100      	movs	r1, #0
   d7078:	54d1      	strb	r1, [r2, r3]
    unselect();
   d707a:	4620      	mov	r0, r4
   d707c:	f7ff fd98 	bl	d6bb0 <_ZN5RFM698unselectEv>
    setMode(RF69_MODE_RX);
   d7080:	2103      	movs	r1, #3
   d7082:	4620      	mov	r0, r4
   d7084:	f7ff fe38 	bl	d6cf8 <_ZN5RFM697setModeEh>
  }
  RSSI = readRSSI();
   d7088:	2100      	movs	r1, #0
   d708a:	4620      	mov	r0, r4
   d708c:	f7ff fe0c 	bl	d6ca8 <_ZN5RFM698readRSSIEb>
   d7090:	4b30      	ldr	r3, [pc, #192]	; (d7154 <_ZN5RFM6916interruptHandlerEv+0x104>)
   d7092:	6018      	str	r0, [r3, #0]
   d7094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  //pinMode(4, OUTPUT);
  //digitalWrite(4, 1);
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
  {
    //RSSI = readRSSI();
    setMode(RF69_MODE_STANDBY);
   d7098:	2101      	movs	r1, #1
   d709a:	4620      	mov	r0, r4
   d709c:	f7ff fe2c 	bl	d6cf8 <_ZN5RFM697setModeEh>
    select();
   d70a0:	4620      	mov	r0, r4
   d70a2:	f7ff fdb0 	bl	d6c06 <_ZN5RFM696selectEv>
    SPI.transfer(REG_FIFO & 0x7f);
   d70a6:	2000      	movs	r0, #0
   d70a8:	f7ff fda4 	bl	d6bf4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.3>
    PAYLOADLEN = SPI.transfer(0);
   d70ac:	2000      	movs	r0, #0
   d70ae:	f7ff fda1 	bl	d6bf4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.3>
   d70b2:	4d29      	ldr	r5, [pc, #164]	; (d7158 <_ZN5RFM6916interruptHandlerEv+0x108>)
   d70b4:	7028      	strb	r0, [r5, #0]
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
   d70b6:	782b      	ldrb	r3, [r5, #0]
   d70b8:	2b42      	cmp	r3, #66	; 0x42
   d70ba:	d814      	bhi.n	d70e6 <_ZN5RFM6916interruptHandlerEv+0x96>
   d70bc:	782b      	ldrb	r3, [r5, #0]
   d70be:	b2db      	uxtb	r3, r3
    TARGETID = SPI.transfer(0);
   d70c0:	2000      	movs	r0, #0
    //RSSI = readRSSI();
    setMode(RF69_MODE_STANDBY);
    select();
    SPI.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
   d70c2:	702b      	strb	r3, [r5, #0]
    TARGETID = SPI.transfer(0);
   d70c4:	f7ff fd96 	bl	d6bf4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.3>
   d70c8:	4b24      	ldr	r3, [pc, #144]	; (d715c <_ZN5RFM6916interruptHandlerEv+0x10c>)
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
   d70ca:	7a22      	ldrb	r2, [r4, #8]
    setMode(RF69_MODE_STANDBY);
    select();
    SPI.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
    TARGETID = SPI.transfer(0);
   d70cc:	7018      	strb	r0, [r3, #0]
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
   d70ce:	b932      	cbnz	r2, d70de <_ZN5RFM6916interruptHandlerEv+0x8e>
    select();
    SPI.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
    TARGETID = SPI.transfer(0);
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
   d70d0:	781a      	ldrb	r2, [r3, #0]
   d70d2:	79e1      	ldrb	r1, [r4, #7]
   d70d4:	4291      	cmp	r1, r2
   d70d6:	d002      	beq.n	d70de <_ZN5RFM6916interruptHandlerEv+0x8e>
   d70d8:	781b      	ldrb	r3, [r3, #0]
   d70da:	2bff      	cmp	r3, #255	; 0xff
   d70dc:	d105      	bne.n	d70ea <_ZN5RFM6916interruptHandlerEv+0x9a>
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
   d70de:	782b      	ldrb	r3, [r5, #0]
   d70e0:	2b02      	cmp	r3, #2
   d70e2:	d902      	bls.n	d70ea <_ZN5RFM6916interruptHandlerEv+0x9a>
   d70e4:	e00b      	b.n	d70fe <_ZN5RFM6916interruptHandlerEv+0xae>
    //RSSI = readRSSI();
    setMode(RF69_MODE_STANDBY);
    select();
    SPI.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
   d70e6:	2342      	movs	r3, #66	; 0x42
   d70e8:	e7ea      	b.n	d70c0 <_ZN5RFM6916interruptHandlerEv+0x70>
    TARGETID = SPI.transfer(0);
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
    {
      PAYLOADLEN = 0;
      unselect();
   d70ea:	4620      	mov	r0, r4
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
    TARGETID = SPI.transfer(0);
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
    {
      PAYLOADLEN = 0;
   d70ec:	2300      	movs	r3, #0
   d70ee:	702b      	strb	r3, [r5, #0]
      unselect();
   d70f0:	f7ff fd5e 	bl	d6bb0 <_ZN5RFM698unselectEv>
      receiveBegin();
   d70f4:	4620      	mov	r0, r4
    unselect();
    setMode(RF69_MODE_RX);
  }
  RSSI = readRSSI();
  //digitalWrite(4, 0);
}
   d70f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
    {
      PAYLOADLEN = 0;
      unselect();
      receiveBegin();
   d70fa:	f7ff be6d 	b.w	d6dd8 <_ZN5RFM6912receiveBeginEv>
      //digitalWrite(4, 0);
      return;
    }

    DATALEN = PAYLOADLEN - 3;
   d70fe:	4b16      	ldr	r3, [pc, #88]	; (d7158 <_ZN5RFM6916interruptHandlerEv+0x108>)
   d7100:	4e17      	ldr	r6, [pc, #92]	; (d7160 <_ZN5RFM6916interruptHandlerEv+0x110>)
   d7102:	781b      	ldrb	r3, [r3, #0]
    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag

    for (byte i= 0; i < DATALEN; i++)
    {
      DATA[i] = SPI.transfer(0);
   d7104:	4f12      	ldr	r7, [pc, #72]	; (d7150 <_ZN5RFM6916interruptHandlerEv+0x100>)
      receiveBegin();
      //digitalWrite(4, 0);
      return;
    }

    DATALEN = PAYLOADLEN - 3;
   d7106:	3b03      	subs	r3, #3
   d7108:	b2db      	uxtb	r3, r3
    SENDERID = SPI.transfer(0);
   d710a:	2000      	movs	r0, #0
      receiveBegin();
      //digitalWrite(4, 0);
      return;
    }

    DATALEN = PAYLOADLEN - 3;
   d710c:	7033      	strb	r3, [r6, #0]
    SENDERID = SPI.transfer(0);
   d710e:	f7ff fd71 	bl	d6bf4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.3>
   d7112:	4b14      	ldr	r3, [pc, #80]	; (d7164 <_ZN5RFM6916interruptHandlerEv+0x114>)
   d7114:	7018      	strb	r0, [r3, #0]
    byte CTLbyte = SPI.transfer(0);
   d7116:	2000      	movs	r0, #0
   d7118:	f7ff fd6c 	bl	d6bf4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.3>

    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
   d711c:	4a12      	ldr	r2, [pc, #72]	; (d7168 <_ZN5RFM6916interruptHandlerEv+0x118>)
   d711e:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
   d7122:	b2db      	uxtb	r3, r3
   d7124:	7013      	strb	r3, [r2, #0]
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag
   d7126:	f000 0040 	and.w	r0, r0, #64	; 0x40
   d712a:	4b10      	ldr	r3, [pc, #64]	; (d716c <_ZN5RFM6916interruptHandlerEv+0x11c>)
   d712c:	b2c0      	uxtb	r0, r0
   d712e:	7018      	strb	r0, [r3, #0]
   d7130:	2300      	movs	r3, #0

    for (byte i= 0; i < DATALEN; i++)
   d7132:	7831      	ldrb	r1, [r6, #0]
   d7134:	4a0a      	ldr	r2, [pc, #40]	; (d7160 <_ZN5RFM6916interruptHandlerEv+0x110>)
   d7136:	b2dd      	uxtb	r5, r3
   d7138:	428d      	cmp	r5, r1
   d713a:	f103 0801 	add.w	r8, r3, #1
   d713e:	d294      	bcs.n	d706a <_ZN5RFM6916interruptHandlerEv+0x1a>
    {
      DATA[i] = SPI.transfer(0);
   d7140:	2000      	movs	r0, #0
   d7142:	f7ff fd57 	bl	d6bf4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.3>
    byte CTLbyte = SPI.transfer(0);

    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag

    for (byte i= 0; i < DATALEN; i++)
   d7146:	4643      	mov	r3, r8
    {
      DATA[i] = SPI.transfer(0);
   d7148:	5578      	strb	r0, [r7, r5]
    byte CTLbyte = SPI.transfer(0);

    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag

    for (byte i= 0; i < DATALEN; i++)
   d714a:	e7f2      	b.n	d7132 <_ZN5RFM6916interruptHandlerEv+0xe2>
   d714c:	2003e390 	.word	0x2003e390
   d7150:	2003e352 	.word	0x2003e352
   d7154:	2003e344 	.word	0x2003e344
   d7158:	2003e350 	.word	0x2003e350
   d715c:	2003e348 	.word	0x2003e348
   d7160:	2003e38f 	.word	0x2003e38f
   d7164:	2003e34a 	.word	0x2003e34a
   d7168:	2003e351 	.word	0x2003e351
   d716c:	2003e349 	.word	0x2003e349

000d7170 <_ZN5RFM697encryptEPKc>:
}

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM69::encrypt(const char* key) {
   d7170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7172:	460d      	mov	r5, r1
  setMode(RF69_MODE_STANDBY);
   d7174:	2101      	movs	r1, #1
}

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM69::encrypt(const char* key) {
   d7176:	4604      	mov	r4, r0
  setMode(RF69_MODE_STANDBY);
   d7178:	f7ff fdbe 	bl	d6cf8 <_ZN5RFM697setModeEh>
  if (key!=0)
   d717c:	b18d      	cbz	r5, d71a2 <_ZN5RFM697encryptEPKc+0x32>
  {
    select();
   d717e:	4620      	mov	r0, r4
   d7180:	f7ff fd41 	bl	d6c06 <_ZN5RFM696selectEv>
    SPI.transfer(REG_AESKEY1 | 0x80);
   d7184:	20be      	movs	r0, #190	; 0xbe
   d7186:	f7ff fd35 	bl	d6bf4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.3>
   d718a:	1e6e      	subs	r6, r5, #1
   d718c:	f105 070f 	add.w	r7, r5, #15
    for (byte i = 0; i<16; i++)
      SPI.transfer(key[i]);
   d7190:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   d7194:	f7ff fd2e 	bl	d6bf4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.3>
  setMode(RF69_MODE_STANDBY);
  if (key!=0)
  {
    select();
    SPI.transfer(REG_AESKEY1 | 0x80);
    for (byte i = 0; i<16; i++)
   d7198:	42be      	cmp	r6, r7
   d719a:	d1f9      	bne.n	d7190 <_ZN5RFM697encryptEPKc+0x20>
      SPI.transfer(key[i]);
    unselect();
   d719c:	4620      	mov	r0, r4
   d719e:	f7ff fd07 	bl	d6bb0 <_ZN5RFM698unselectEv>
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
   d71a2:	213d      	movs	r1, #61	; 0x3d
   d71a4:	4620      	mov	r0, r4
   d71a6:	f7ff fd47 	bl	d6c38 <_ZN5RFM697readRegEh>
   d71aa:	f020 0001 	bic.w	r0, r0, #1
   d71ae:	2d00      	cmp	r5, #0
   d71b0:	bf0c      	ite	eq
   d71b2:	4602      	moveq	r2, r0
   d71b4:	f040 0201 	orrne.w	r2, r0, #1
   d71b8:	b2d2      	uxtb	r2, r2
   d71ba:	4620      	mov	r0, r4
   d71bc:	213d      	movs	r1, #61	; 0x3d
}
   d71be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    SPI.transfer(REG_AESKEY1 | 0x80);
    for (byte i = 0; i<16; i++)
      SPI.transfer(key[i]);
    unselect();
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
   d71c2:	f7ff bd4b 	b.w	d6c5c <_ZN5RFM698writeRegEhh>
	...

000d71c8 <_ZN5RFM6910initializeEhhh>:
volatile byte RFM69::ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
volatile int RFM69::RSSI; //most accurate RSSI during reception (closest to the reception)
RFM69* RFM69::selfPointer;

bool RFM69::initialize(byte freqBand, byte nodeID, byte networkID)
{
   d71c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d71ca:	b08f      	sub	sp, #60	; 0x3c
   d71cc:	460d      	mov	r5, r1
   d71ce:	4604      	mov	r4, r0
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d71d0:	2100      	movs	r1, #0
volatile byte RFM69::ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
volatile int RFM69::RSSI; //most accurate RSSI during reception (closest to the reception)
RFM69* RFM69::selfPointer;

bool RFM69::initialize(byte freqBand, byte nodeID, byte networkID)
{
   d71d2:	4616      	mov	r6, r2
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d71d4:	a803      	add	r0, sp, #12
   d71d6:	222a      	movs	r2, #42	; 0x2a
volatile byte RFM69::ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
volatile int RFM69::RSSI; //most accurate RSSI during reception (closest to the reception)
RFM69* RFM69::selfPointer;

bool RFM69::initialize(byte freqBand, byte nodeID, byte networkID)
{
   d71d8:	461f      	mov	r7, r3
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d71da:	f002 fdf9 	bl	d9dd0 <memset>
   d71de:	2301      	movs	r3, #1
   d71e0:	f88d 300c 	strb.w	r3, [sp, #12]
   d71e4:	2303      	movs	r3, #3
   d71e6:	f88d 3010 	strb.w	r3, [sp, #16]
   d71ea:	f88d 3015 	strb.w	r3, [sp, #21]
   d71ee:	2306      	movs	r3, #6
   d71f0:	f88d 3016 	strb.w	r3, [sp, #22]
   d71f4:	2333      	movs	r3, #51	; 0x33
   d71f6:	f88d 3017 	strb.w	r3, [sp, #23]
   d71fa:	2307      	movs	r3, #7
   d71fc:	f88d 3018 	strb.w	r3, [sp, #24]
   d7200:	2308      	movs	r3, #8
   d7202:	f88d 301a 	strb.w	r3, [sp, #26]
   d7206:	2309      	movs	r3, #9
   d7208:	f88d 301c 	strb.w	r3, [sp, #28]
   d720c:	2319      	movs	r3, #25
   d720e:	f88d 301e 	strb.w	r3, [sp, #30]
   d7212:	2325      	movs	r3, #37	; 0x25
   d7214:	f88d 3020 	strb.w	r3, [sp, #32]
   d7218:	2329      	movs	r3, #41	; 0x29
   d721a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   d721e:	23dc      	movs	r3, #220	; 0xdc
   d7220:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   d7224:	232e      	movs	r3, #46	; 0x2e
   d7226:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d722a:	2388      	movs	r3, #136	; 0x88
   d722c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   d7230:	232f      	movs	r3, #47	; 0x2f
   d7232:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   d7236:	232d      	movs	r3, #45	; 0x2d
   d7238:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   d723c:	2337      	movs	r3, #55	; 0x37
   d723e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   d7242:	2390      	movs	r3, #144	; 0x90
   d7244:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d7248:	2338      	movs	r3, #56	; 0x38
   d724a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   d724e:	233c      	movs	r3, #60	; 0x3c
   d7250:	2204      	movs	r2, #4
   d7252:	2102      	movs	r1, #2
   d7254:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
   d7258:	238f      	movs	r3, #143	; 0x8f
   d725a:	f88d 200d 	strb.w	r2, [sp, #13]
   d725e:	f88d 100e 	strb.w	r1, [sp, #14]
   d7262:	f88d 1011 	strb.w	r1, [sp, #17]
   d7266:	f88d 2012 	strb.w	r2, [sp, #18]
   d726a:	2105      	movs	r1, #5
   d726c:	2240      	movs	r2, #64	; 0x40
   d726e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   d7272:	233d      	movs	r3, #61	; 0x3d
   d7274:	f88d 2013 	strb.w	r2, [sp, #19]
   d7278:	f88d 1014 	strb.w	r1, [sp, #20]
   d727c:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
   d7280:	2142      	movs	r1, #66	; 0x42
   d7282:	2230      	movs	r2, #48	; 0x30
   d7284:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   d7288:	2312      	movs	r3, #18
   d728a:	f88d 101f 	strb.w	r1, [sp, #31]
   d728e:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   d7292:	f88d 102d 	strb.w	r1, [sp, #45]	; 0x2d
   d7296:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   d729a:	236f      	movs	r3, #111	; 0x6f
   d729c:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   d72a0:	2d1f      	cmp	r5, #31
   d72a2:	f04f 03ff 	mov.w	r3, #255	; 0xff
   d72a6:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   d72aa:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   d72ae:	d006      	beq.n	d72be <_ZN5RFM6910initializeEhhh+0xf6>
   d72b0:	2d2b      	cmp	r5, #43	; 0x2b
   d72b2:	d006      	beq.n	d72c2 <_ZN5RFM6910initializeEhhh+0xfa>
   d72b4:	2d56      	cmp	r5, #86	; 0x56
   d72b6:	bf0c      	ite	eq
   d72b8:	22d9      	moveq	r2, #217	; 0xd9
   d72ba:	22e4      	movne	r2, #228	; 0xe4
   d72bc:	e002      	b.n	d72c4 <_ZN5RFM6910initializeEhhh+0xfc>
   d72be:	224e      	movs	r2, #78	; 0x4e
   d72c0:	e000      	b.n	d72c4 <_ZN5RFM6910initializeEhhh+0xfc>
   d72c2:	226c      	movs	r2, #108	; 0x6c
   d72c4:	2d1f      	cmp	r5, #31
   d72c6:	f88d 2019 	strb.w	r2, [sp, #25]
   d72ca:	d006      	beq.n	d72da <_ZN5RFM6910initializeEhhh+0x112>
   d72cc:	2d2b      	cmp	r5, #43	; 0x2b
   d72ce:	d006      	beq.n	d72de <_ZN5RFM6910initializeEhhh+0x116>
   d72d0:	2d56      	cmp	r5, #86	; 0x56
   d72d2:	bf14      	ite	ne
   d72d4:	22c0      	movne	r2, #192	; 0xc0
   d72d6:	2200      	moveq	r2, #0
   d72d8:	e002      	b.n	d72e0 <_ZN5RFM6910initializeEhhh+0x118>
   d72da:	22c0      	movs	r2, #192	; 0xc0
   d72dc:	e000      	b.n	d72e0 <_ZN5RFM6910initializeEhhh+0x118>
   d72de:	2240      	movs	r2, #64	; 0x40

  pinMode(_slaveSelectPin, OUTPUT);
   d72e0:	2101      	movs	r1, #1
   d72e2:	7920      	ldrb	r0, [r4, #4]
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d72e4:	f88d 201b 	strb.w	r2, [sp, #27]
   d72e8:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29

  pinMode(_slaveSelectPin, OUTPUT);
   d72ec:	f001 fe0c 	bl	d8f08 <pinMode>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d72f0:	f7ff fc68 	bl	d6bc4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d72f4:	f000 fbee 	bl	d7ad4 <_ZN8SPIClass5beginEv>
   d72f8:	f000 f94a 	bl	d7590 <HAL_Timer_Get_Milli_Seconds>
   d72fc:	4605      	mov	r5, r0
  // Set time out to 50ms
  #define TIME_OUT 50
  
  start_to = millis() ;

  do writeReg(REG_SYNCVALUE1, 0xaa); while (readReg(REG_SYNCVALUE1) != 0xaa && millis()-start_to < TIME_OUT);
   d72fe:	22aa      	movs	r2, #170	; 0xaa
   d7300:	212f      	movs	r1, #47	; 0x2f
   d7302:	4620      	mov	r0, r4
   d7304:	f7ff fcaa 	bl	d6c5c <_ZN5RFM698writeRegEhh>
   d7308:	212f      	movs	r1, #47	; 0x2f
   d730a:	4620      	mov	r0, r4
   d730c:	f7ff fc94 	bl	d6c38 <_ZN5RFM697readRegEh>
   d7310:	28aa      	cmp	r0, #170	; 0xaa
   d7312:	d004      	beq.n	d731e <_ZN5RFM6910initializeEhhh+0x156>
   d7314:	f000 f93c 	bl	d7590 <HAL_Timer_Get_Milli_Seconds>
   d7318:	1b40      	subs	r0, r0, r5
   d731a:	2831      	cmp	r0, #49	; 0x31
   d731c:	d9ef      	bls.n	d72fe <_ZN5RFM6910initializeEhhh+0x136>
   d731e:	f000 f937 	bl	d7590 <HAL_Timer_Get_Milli_Seconds>
  if (millis()-start_to >= TIME_OUT) return (false);
   d7322:	1b40      	subs	r0, r0, r5
   d7324:	2831      	cmp	r0, #49	; 0x31
   d7326:	d82d      	bhi.n	d7384 <_ZN5RFM6910initializeEhhh+0x1bc>
   d7328:	f000 f932 	bl	d7590 <HAL_Timer_Get_Milli_Seconds>
   d732c:	4605      	mov	r5, r0
    
  // Set time out 
  start_to = millis()  ;  
	do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis()-start_to < TIME_OUT);
   d732e:	2255      	movs	r2, #85	; 0x55
   d7330:	212f      	movs	r1, #47	; 0x2f
   d7332:	4620      	mov	r0, r4
   d7334:	f7ff fc92 	bl	d6c5c <_ZN5RFM698writeRegEhh>
   d7338:	212f      	movs	r1, #47	; 0x2f
   d733a:	4620      	mov	r0, r4
   d733c:	f7ff fc7c 	bl	d6c38 <_ZN5RFM697readRegEh>
   d7340:	2855      	cmp	r0, #85	; 0x55
   d7342:	d021      	beq.n	d7388 <_ZN5RFM6910initializeEhhh+0x1c0>
   d7344:	f000 f924 	bl	d7590 <HAL_Timer_Get_Milli_Seconds>
   d7348:	1b40      	subs	r0, r0, r5
   d734a:	2831      	cmp	r0, #49	; 0x31
   d734c:	d9ef      	bls.n	d732e <_ZN5RFM6910initializeEhhh+0x166>
   d734e:	e01b      	b.n	d7388 <_ZN5RFM6910initializeEhhh+0x1c0>
  for (byte i = 0; CONFIG[i][0] != 255; i++)
    writeReg(CONFIG[i][0], CONFIG[i][1]);

  // Encryption is persistent between resets and can trip you up during debugging.
  // Disable it during initialization so we always start from a known state.
  encrypt(0);
   d7350:	2100      	movs	r1, #0
   d7352:	4620      	mov	r0, r4
   d7354:	f7ff ff0c 	bl	d7170 <_ZN5RFM697encryptEPKc>

  setHighPower(_isRFM69HW); //called regardless if it's a RFM69W or RFM69HW
   d7358:	7aa1      	ldrb	r1, [r4, #10]
   d735a:	4620      	mov	r0, r4
   d735c:	f7ff fd96 	bl	d6e8c <_ZN5RFM6912setHighPowerEb>
  setMode(RF69_MODE_STANDBY);
   d7360:	2101      	movs	r1, #1
   d7362:	4620      	mov	r0, r4
   d7364:	f7ff fcc8 	bl	d6cf8 <_ZN5RFM697setModeEh>
   d7368:	f000 f912 	bl	d7590 <HAL_Timer_Get_Milli_Seconds>
   d736c:	4605      	mov	r5, r0
  // Set time out 
  start_to = millis() ;
	while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis()-start_to < TIME_OUT); // Wait for ModeReady
   d736e:	2127      	movs	r1, #39	; 0x27
   d7370:	4620      	mov	r0, r4
   d7372:	f7ff fc61 	bl	d6c38 <_ZN5RFM697readRegEh>
   d7376:	0603      	lsls	r3, r0, #24
   d7378:	d51b      	bpl.n	d73b2 <_ZN5RFM6910initializeEhhh+0x1ea>
   d737a:	f000 f909 	bl	d7590 <HAL_Timer_Get_Milli_Seconds>
  if (millis()-start_to >= TIME_OUT) return (false);
   d737e:	1b40      	subs	r0, r0, r5
   d7380:	2831      	cmp	r0, #49	; 0x31
   d7382:	d91c      	bls.n	d73be <_ZN5RFM6910initializeEhhh+0x1f6>
  // picking a non-interrupt enabled pin will prevent proper initialization
  // code thanks to @ScruffR - https://community.particle.io/t/how-to-make-rfm69-work-on-photon-solved-new-library-rfm69-particle/26497/93?u=bloukingfisher
  if (!attachInterrupt(_interruptNum, RFM69::isr0, RISING)) return false;
   d7384:	2000      	movs	r0, #0
   d7386:	e028      	b.n	d73da <_ZN5RFM6910initializeEhhh+0x212>
   d7388:	f000 f902 	bl	d7590 <HAL_Timer_Get_Milli_Seconds>
  if (millis()-start_to >= TIME_OUT) return (false);
    
  // Set time out 
  start_to = millis()  ;  
	do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis()-start_to < TIME_OUT);
  if (millis()-start_to >= TIME_OUT) return (false);
   d738c:	1b40      	subs	r0, r0, r5
   d738e:	2831      	cmp	r0, #49	; 0x31
   d7390:	d8f8      	bhi.n	d7384 <_ZN5RFM6910initializeEhhh+0x1bc>
   d7392:	2500      	movs	r5, #0
  for (byte i = 0; CONFIG[i][0] != 255; i++)
   d7394:	b2eb      	uxtb	r3, r5
   d7396:	aa0e      	add	r2, sp, #56	; 0x38
   d7398:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d739c:	3501      	adds	r5, #1
   d739e:	f813 1c2c 	ldrb.w	r1, [r3, #-44]
   d73a2:	29ff      	cmp	r1, #255	; 0xff
   d73a4:	d0d4      	beq.n	d7350 <_ZN5RFM6910initializeEhhh+0x188>
    writeReg(CONFIG[i][0], CONFIG[i][1]);
   d73a6:	f813 2c2b 	ldrb.w	r2, [r3, #-43]
   d73aa:	4620      	mov	r0, r4
   d73ac:	f7ff fc56 	bl	d6c5c <_ZN5RFM698writeRegEhh>
    
  // Set time out 
  start_to = millis()  ;  
	do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis()-start_to < TIME_OUT);
  if (millis()-start_to >= TIME_OUT) return (false);
  for (byte i = 0; CONFIG[i][0] != 255; i++)
   d73b0:	e7f0      	b.n	d7394 <_ZN5RFM6910initializeEhhh+0x1cc>
   d73b2:	f000 f8ed 	bl	d7590 <HAL_Timer_Get_Milli_Seconds>

  setHighPower(_isRFM69HW); //called regardless if it's a RFM69W or RFM69HW
  setMode(RF69_MODE_STANDBY);
  // Set time out 
  start_to = millis() ;
	while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis()-start_to < TIME_OUT); // Wait for ModeReady
   d73b6:	1b40      	subs	r0, r0, r5
   d73b8:	2831      	cmp	r0, #49	; 0x31
   d73ba:	d9d8      	bls.n	d736e <_ZN5RFM6910initializeEhhh+0x1a6>
   d73bc:	e7dd      	b.n	d737a <_ZN5RFM6910initializeEhhh+0x1b2>
  if (millis()-start_to >= TIME_OUT) return (false);
  // picking a non-interrupt enabled pin will prevent proper initialization
  // code thanks to @ScruffR - https://community.particle.io/t/how-to-make-rfm69-work-on-photon-solved-new-library-rfm69-particle/26497/93?u=bloukingfisher
  if (!attachInterrupt(_interruptNum, RFM69::isr0, RISING)) return false;
   d73be:	2300      	movs	r3, #0
   d73c0:	9300      	str	r3, [sp, #0]
   d73c2:	79a0      	ldrb	r0, [r4, #6]
   d73c4:	4906      	ldr	r1, [pc, #24]	; (d73e0 <_ZN5RFM6910initializeEhhh+0x218>)
   d73c6:	f04f 33ff 	mov.w	r3, #4294967295
   d73ca:	2201      	movs	r2, #1
   d73cc:	f001 fa38 	bl	d8840 <_Z15attachInterrupttPFvvE13InterruptModeah>
   d73d0:	2800      	cmp	r0, #0
   d73d2:	d0d7      	beq.n	d7384 <_ZN5RFM6910initializeEhhh+0x1bc>

  selfPointer = this;
   d73d4:	4b03      	ldr	r3, [pc, #12]	; (d73e4 <_ZN5RFM6910initializeEhhh+0x21c>)
  _address = nodeID;
   d73d6:	71e6      	strb	r6, [r4, #7]
  if (millis()-start_to >= TIME_OUT) return (false);
  // picking a non-interrupt enabled pin will prevent proper initialization
  // code thanks to @ScruffR - https://community.particle.io/t/how-to-make-rfm69-work-on-photon-solved-new-library-rfm69-particle/26497/93?u=bloukingfisher
  if (!attachInterrupt(_interruptNum, RFM69::isr0, RISING)) return false;

  selfPointer = this;
   d73d8:	601c      	str	r4, [r3, #0]
  _address = nodeID;
  return true;
}
   d73da:	b00f      	add	sp, #60	; 0x3c
   d73dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d73de:	bf00      	nop
   d73e0:	000d6b81 	.word	0x000d6b81
   d73e4:	2003e34c 	.word	0x2003e34c

000d73e8 <_GLOBAL__sub_I__ZN5RFM694DATAE>:
   d73e8:	f000 b812 	b.w	d7410 <HAL_Pin_Map>

000d73ec <_GLOBAL__sub_I__ZN9RFM69_ATC18ACK_RSSI_REQUESTEDE>:
   d73ec:	f000 b810 	b.w	d7410 <HAL_Pin_Map>

000d73f0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d73f0:	b508      	push	{r3, lr}
   d73f2:	4b02      	ldr	r3, [pc, #8]	; (d73fc <netdb_freeaddrinfo+0xc>)
   d73f4:	681b      	ldr	r3, [r3, #0]
   d73f6:	689b      	ldr	r3, [r3, #8]
   d73f8:	9301      	str	r3, [sp, #4]
   d73fa:	bd08      	pop	{r3, pc}
   d73fc:	00030268 	.word	0x00030268

000d7400 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d7400:	b508      	push	{r3, lr}
   d7402:	4b02      	ldr	r3, [pc, #8]	; (d740c <netdb_getaddrinfo+0xc>)
   d7404:	681b      	ldr	r3, [r3, #0]
   d7406:	68db      	ldr	r3, [r3, #12]
   d7408:	9301      	str	r3, [sp, #4]
   d740a:	bd08      	pop	{r3, pc}
   d740c:	00030268 	.word	0x00030268

000d7410 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d7410:	b508      	push	{r3, lr}
   d7412:	4b02      	ldr	r3, [pc, #8]	; (d741c <HAL_Pin_Map+0xc>)
   d7414:	681b      	ldr	r3, [r3, #0]
   d7416:	681b      	ldr	r3, [r3, #0]
   d7418:	9301      	str	r3, [sp, #4]
   d741a:	bd08      	pop	{r3, pc}
   d741c:	0003022c 	.word	0x0003022c

000d7420 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7420:	b508      	push	{r3, lr}
   d7422:	4b02      	ldr	r3, [pc, #8]	; (d742c <HAL_Pin_Mode+0xc>)
   d7424:	681b      	ldr	r3, [r3, #0]
   d7426:	689b      	ldr	r3, [r3, #8]
   d7428:	9301      	str	r3, [sp, #4]
   d742a:	bd08      	pop	{r3, pc}
   d742c:	0003022c 	.word	0x0003022c

000d7430 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7430:	b508      	push	{r3, lr}
   d7432:	4b02      	ldr	r3, [pc, #8]	; (d743c <HAL_Get_Pin_Mode+0xc>)
   d7434:	681b      	ldr	r3, [r3, #0]
   d7436:	68db      	ldr	r3, [r3, #12]
   d7438:	9301      	str	r3, [sp, #4]
   d743a:	bd08      	pop	{r3, pc}
   d743c:	0003022c 	.word	0x0003022c

000d7440 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7440:	b508      	push	{r3, lr}
   d7442:	4b02      	ldr	r3, [pc, #8]	; (d744c <HAL_GPIO_Write+0xc>)
   d7444:	681b      	ldr	r3, [r3, #0]
   d7446:	691b      	ldr	r3, [r3, #16]
   d7448:	9301      	str	r3, [sp, #4]
   d744a:	bd08      	pop	{r3, pc}
   d744c:	0003022c 	.word	0x0003022c

000d7450 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d7450:	b508      	push	{r3, lr}
   d7452:	4b02      	ldr	r3, [pc, #8]	; (d745c <HAL_GPIO_Read+0xc>)
   d7454:	681b      	ldr	r3, [r3, #0]
   d7456:	695b      	ldr	r3, [r3, #20]
   d7458:	9301      	str	r3, [sp, #4]
   d745a:	bd08      	pop	{r3, pc}
   d745c:	0003022c 	.word	0x0003022c

000d7460 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d7460:	b508      	push	{r3, lr}
   d7462:	4b02      	ldr	r3, [pc, #8]	; (d746c <HAL_Interrupts_Attach+0xc>)
   d7464:	681b      	ldr	r3, [r3, #0]
   d7466:	699b      	ldr	r3, [r3, #24]
   d7468:	9301      	str	r3, [sp, #4]
   d746a:	bd08      	pop	{r3, pc}
   d746c:	0003022c 	.word	0x0003022c

000d7470 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d7470:	b508      	push	{r3, lr}
   d7472:	4b02      	ldr	r3, [pc, #8]	; (d747c <HAL_Interrupts_Detach+0xc>)
   d7474:	681b      	ldr	r3, [r3, #0]
   d7476:	69db      	ldr	r3, [r3, #28]
   d7478:	9301      	str	r3, [sp, #4]
   d747a:	bd08      	pop	{r3, pc}
   d747c:	0003022c 	.word	0x0003022c

000d7480 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d7480:	b508      	push	{r3, lr}
   d7482:	4b02      	ldr	r3, [pc, #8]	; (d748c <HAL_Interrupts_Enable_All+0xc>)
   d7484:	681b      	ldr	r3, [r3, #0]
   d7486:	6a1b      	ldr	r3, [r3, #32]
   d7488:	9301      	str	r3, [sp, #4]
   d748a:	bd08      	pop	{r3, pc}
   d748c:	0003022c 	.word	0x0003022c

000d7490 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d7490:	b508      	push	{r3, lr}
   d7492:	4b02      	ldr	r3, [pc, #8]	; (d749c <HAL_Interrupts_Disable_All+0xc>)
   d7494:	681b      	ldr	r3, [r3, #0]
   d7496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7498:	9301      	str	r3, [sp, #4]
   d749a:	bd08      	pop	{r3, pc}
   d749c:	0003022c 	.word	0x0003022c

000d74a0 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d74a0:	b508      	push	{r3, lr}
   d74a2:	4b02      	ldr	r3, [pc, #8]	; (d74ac <HAL_SPI_Begin+0xc>)
   d74a4:	681b      	ldr	r3, [r3, #0]
   d74a6:	681b      	ldr	r3, [r3, #0]
   d74a8:	9301      	str	r3, [sp, #4]
   d74aa:	bd08      	pop	{r3, pc}
   d74ac:	00030230 	.word	0x00030230

000d74b0 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d74b0:	b508      	push	{r3, lr}
   d74b2:	4b02      	ldr	r3, [pc, #8]	; (d74bc <HAL_SPI_Set_Bit_Order+0xc>)
   d74b4:	681b      	ldr	r3, [r3, #0]
   d74b6:	689b      	ldr	r3, [r3, #8]
   d74b8:	9301      	str	r3, [sp, #4]
   d74ba:	bd08      	pop	{r3, pc}
   d74bc:	00030230 	.word	0x00030230

000d74c0 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d74c0:	b508      	push	{r3, lr}
   d74c2:	4b02      	ldr	r3, [pc, #8]	; (d74cc <HAL_SPI_Set_Data_Mode+0xc>)
   d74c4:	681b      	ldr	r3, [r3, #0]
   d74c6:	68db      	ldr	r3, [r3, #12]
   d74c8:	9301      	str	r3, [sp, #4]
   d74ca:	bd08      	pop	{r3, pc}
   d74cc:	00030230 	.word	0x00030230

000d74d0 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d74d0:	b508      	push	{r3, lr}
   d74d2:	4b02      	ldr	r3, [pc, #8]	; (d74dc <HAL_SPI_Set_Clock_Divider+0xc>)
   d74d4:	681b      	ldr	r3, [r3, #0]
   d74d6:	691b      	ldr	r3, [r3, #16]
   d74d8:	9301      	str	r3, [sp, #4]
   d74da:	bd08      	pop	{r3, pc}
   d74dc:	00030230 	.word	0x00030230

000d74e0 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d74e0:	b508      	push	{r3, lr}
   d74e2:	4b02      	ldr	r3, [pc, #8]	; (d74ec <HAL_SPI_Send_Receive_Data+0xc>)
   d74e4:	681b      	ldr	r3, [r3, #0]
   d74e6:	695b      	ldr	r3, [r3, #20]
   d74e8:	9301      	str	r3, [sp, #4]
   d74ea:	bd08      	pop	{r3, pc}
   d74ec:	00030230 	.word	0x00030230

000d74f0 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d74f0:	b508      	push	{r3, lr}
   d74f2:	4b02      	ldr	r3, [pc, #8]	; (d74fc <HAL_SPI_Init+0xc>)
   d74f4:	681b      	ldr	r3, [r3, #0]
   d74f6:	69db      	ldr	r3, [r3, #28]
   d74f8:	9301      	str	r3, [sp, #4]
   d74fa:	bd08      	pop	{r3, pc}
   d74fc:	00030230 	.word	0x00030230

000d7500 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d7500:	b508      	push	{r3, lr}
   d7502:	4b02      	ldr	r3, [pc, #8]	; (d750c <HAL_SPI_Is_Enabled+0xc>)
   d7504:	681b      	ldr	r3, [r3, #0]
   d7506:	6a1b      	ldr	r3, [r3, #32]
   d7508:	9301      	str	r3, [sp, #4]
   d750a:	bd08      	pop	{r3, pc}
   d750c:	00030230 	.word	0x00030230

000d7510 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d7510:	b508      	push	{r3, lr}
   d7512:	4b02      	ldr	r3, [pc, #8]	; (d751c <HAL_SPI_Info+0xc>)
   d7514:	681b      	ldr	r3, [r3, #0]
   d7516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7518:	9301      	str	r3, [sp, #4]
   d751a:	bd08      	pop	{r3, pc}
   d751c:	00030230 	.word	0x00030230

000d7520 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d7520:	b508      	push	{r3, lr}
   d7522:	4b02      	ldr	r3, [pc, #8]	; (d752c <HAL_SPI_DMA_Transfer+0xc>)
   d7524:	681b      	ldr	r3, [r3, #0]
   d7526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7528:	9301      	str	r3, [sp, #4]
   d752a:	bd08      	pop	{r3, pc}
   d752c:	00030230 	.word	0x00030230

000d7530 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d7530:	b508      	push	{r3, lr}
   d7532:	4b02      	ldr	r3, [pc, #8]	; (d753c <HAL_SPI_DMA_Transfer_Status+0xc>)
   d7534:	681b      	ldr	r3, [r3, #0]
   d7536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7538:	9301      	str	r3, [sp, #4]
   d753a:	bd08      	pop	{r3, pc}
   d753c:	00030230 	.word	0x00030230

000d7540 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d7540:	b508      	push	{r3, lr}
   d7542:	4b02      	ldr	r3, [pc, #8]	; (d754c <HAL_SPI_Set_Settings+0xc>)
   d7544:	681b      	ldr	r3, [r3, #0]
   d7546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7548:	9301      	str	r3, [sp, #4]
   d754a:	bd08      	pop	{r3, pc}
   d754c:	00030230 	.word	0x00030230

000d7550 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d7550:	b508      	push	{r3, lr}
   d7552:	4b02      	ldr	r3, [pc, #8]	; (d755c <HAL_SPI_Acquire+0xc>)
   d7554:	681b      	ldr	r3, [r3, #0]
   d7556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7558:	9301      	str	r3, [sp, #4]
   d755a:	bd08      	pop	{r3, pc}
   d755c:	00030230 	.word	0x00030230

000d7560 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d7560:	b508      	push	{r3, lr}
   d7562:	4b02      	ldr	r3, [pc, #8]	; (d756c <HAL_SPI_Release+0xc>)
   d7564:	681b      	ldr	r3, [r3, #0]
   d7566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7568:	9301      	str	r3, [sp, #4]
   d756a:	bd08      	pop	{r3, pc}
   d756c:	00030230 	.word	0x00030230

000d7570 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7570:	b508      	push	{r3, lr}
   d7572:	4b02      	ldr	r3, [pc, #8]	; (d757c <HAL_RNG_GetRandomNumber+0xc>)
   d7574:	681b      	ldr	r3, [r3, #0]
   d7576:	685b      	ldr	r3, [r3, #4]
   d7578:	9301      	str	r3, [sp, #4]
   d757a:	bd08      	pop	{r3, pc}
   d757c:	00030218 	.word	0x00030218

000d7580 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d7580:	b508      	push	{r3, lr}
   d7582:	4b02      	ldr	r3, [pc, #8]	; (d758c <HAL_Timer_Get_Micro_Seconds+0xc>)
   d7584:	681b      	ldr	r3, [r3, #0]
   d7586:	691b      	ldr	r3, [r3, #16]
   d7588:	9301      	str	r3, [sp, #4]
   d758a:	bd08      	pop	{r3, pc}
   d758c:	00030218 	.word	0x00030218

000d7590 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7590:	b508      	push	{r3, lr}
   d7592:	4b02      	ldr	r3, [pc, #8]	; (d759c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7594:	681b      	ldr	r3, [r3, #0]
   d7596:	695b      	ldr	r3, [r3, #20]
   d7598:	9301      	str	r3, [sp, #4]
   d759a:	bd08      	pop	{r3, pc}
   d759c:	00030218 	.word	0x00030218

000d75a0 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d75a0:	b508      	push	{r3, lr}
   d75a2:	4b02      	ldr	r3, [pc, #8]	; (d75ac <HAL_RTC_Get_UnixTime+0xc>)
   d75a4:	681b      	ldr	r3, [r3, #0]
   d75a6:	69db      	ldr	r3, [r3, #28]
   d75a8:	9301      	str	r3, [sp, #4]
   d75aa:	bd08      	pop	{r3, pc}
   d75ac:	00030218 	.word	0x00030218

000d75b0 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d75b0:	b508      	push	{r3, lr}
   d75b2:	4b02      	ldr	r3, [pc, #8]	; (d75bc <HAL_EEPROM_Init+0xc>)
   d75b4:	681b      	ldr	r3, [r3, #0]
   d75b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d75b8:	9301      	str	r3, [sp, #4]
   d75ba:	bd08      	pop	{r3, pc}
   d75bc:	00030218 	.word	0x00030218

000d75c0 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d75c0:	b508      	push	{r3, lr}
   d75c2:	4b02      	ldr	r3, [pc, #8]	; (d75cc <HAL_EEPROM_Get+0xc>)
   d75c4:	681b      	ldr	r3, [r3, #0]
   d75c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d75c8:	9301      	str	r3, [sp, #4]
   d75ca:	bd08      	pop	{r3, pc}
   d75cc:	00030218 	.word	0x00030218

000d75d0 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d75d0:	b508      	push	{r3, lr}
   d75d2:	4b02      	ldr	r3, [pc, #8]	; (d75dc <HAL_EEPROM_Put+0xc>)
   d75d4:	681b      	ldr	r3, [r3, #0]
   d75d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d75d8:	9301      	str	r3, [sp, #4]
   d75da:	bd08      	pop	{r3, pc}
   d75dc:	00030218 	.word	0x00030218

000d75e0 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d75e0:	b508      	push	{r3, lr}
   d75e2:	4b02      	ldr	r3, [pc, #8]	; (d75ec <HAL_RTC_Time_Is_Valid+0xc>)
   d75e4:	681b      	ldr	r3, [r3, #0]
   d75e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d75e8:	9301      	str	r3, [sp, #4]
   d75ea:	bd08      	pop	{r3, pc}
   d75ec:	00030218 	.word	0x00030218

000d75f0 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d75f0:	b508      	push	{r3, lr}
   d75f2:	4b02      	ldr	r3, [pc, #8]	; (d75fc <os_thread_is_current+0xc>)
   d75f4:	681b      	ldr	r3, [r3, #0]
   d75f6:	689b      	ldr	r3, [r3, #8]
   d75f8:	9301      	str	r3, [sp, #4]
   d75fa:	bd08      	pop	{r3, pc}
   d75fc:	00030248 	.word	0x00030248

000d7600 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d7600:	b508      	push	{r3, lr}
   d7602:	4b02      	ldr	r3, [pc, #8]	; (d760c <os_thread_yield+0xc>)
   d7604:	681b      	ldr	r3, [r3, #0]
   d7606:	68db      	ldr	r3, [r3, #12]
   d7608:	9301      	str	r3, [sp, #4]
   d760a:	bd08      	pop	{r3, pc}
   d760c:	00030248 	.word	0x00030248

000d7610 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d7610:	b508      	push	{r3, lr}
   d7612:	4b02      	ldr	r3, [pc, #8]	; (d761c <os_thread_join+0xc>)
   d7614:	681b      	ldr	r3, [r3, #0]
   d7616:	691b      	ldr	r3, [r3, #16]
   d7618:	9301      	str	r3, [sp, #4]
   d761a:	bd08      	pop	{r3, pc}
   d761c:	00030248 	.word	0x00030248

000d7620 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d7620:	b508      	push	{r3, lr}
   d7622:	4b02      	ldr	r3, [pc, #8]	; (d762c <os_thread_cleanup+0xc>)
   d7624:	681b      	ldr	r3, [r3, #0]
   d7626:	695b      	ldr	r3, [r3, #20]
   d7628:	9301      	str	r3, [sp, #4]
   d762a:	bd08      	pop	{r3, pc}
   d762c:	00030248 	.word	0x00030248

000d7630 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d7630:	b508      	push	{r3, lr}
   d7632:	4b02      	ldr	r3, [pc, #8]	; (d763c <os_thread_scheduling+0xc>)
   d7634:	681b      	ldr	r3, [r3, #0]
   d7636:	69db      	ldr	r3, [r3, #28]
   d7638:	9301      	str	r3, [sp, #4]
   d763a:	bd08      	pop	{r3, pc}
   d763c:	00030248 	.word	0x00030248

000d7640 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d7640:	b508      	push	{r3, lr}
   d7642:	4b02      	ldr	r3, [pc, #8]	; (d764c <os_timer_create+0xc>)
   d7644:	681b      	ldr	r3, [r3, #0]
   d7646:	6a1b      	ldr	r3, [r3, #32]
   d7648:	9301      	str	r3, [sp, #4]
   d764a:	bd08      	pop	{r3, pc}
   d764c:	00030248 	.word	0x00030248

000d7650 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d7650:	b508      	push	{r3, lr}
   d7652:	4b02      	ldr	r3, [pc, #8]	; (d765c <os_timer_destroy+0xc>)
   d7654:	681b      	ldr	r3, [r3, #0]
   d7656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7658:	9301      	str	r3, [sp, #4]
   d765a:	bd08      	pop	{r3, pc}
   d765c:	00030248 	.word	0x00030248

000d7660 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d7660:	b508      	push	{r3, lr}
   d7662:	4b02      	ldr	r3, [pc, #8]	; (d766c <os_timer_get_id+0xc>)
   d7664:	681b      	ldr	r3, [r3, #0]
   d7666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7668:	9301      	str	r3, [sp, #4]
   d766a:	bd08      	pop	{r3, pc}
   d766c:	00030248 	.word	0x00030248

000d7670 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d7670:	b508      	push	{r3, lr}
   d7672:	4b02      	ldr	r3, [pc, #8]	; (d767c <os_timer_change+0xc>)
   d7674:	681b      	ldr	r3, [r3, #0]
   d7676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7678:	9301      	str	r3, [sp, #4]
   d767a:	bd08      	pop	{r3, pc}
   d767c:	00030248 	.word	0x00030248

000d7680 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7680:	b508      	push	{r3, lr}
   d7682:	4b02      	ldr	r3, [pc, #8]	; (d768c <os_mutex_recursive_create+0xc>)
   d7684:	681b      	ldr	r3, [r3, #0]
   d7686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7688:	9301      	str	r3, [sp, #4]
   d768a:	bd08      	pop	{r3, pc}
   d768c:	00030248 	.word	0x00030248

000d7690 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d7690:	b508      	push	{r3, lr}
   d7692:	4b02      	ldr	r3, [pc, #8]	; (d769c <os_mutex_recursive_destroy+0xc>)
   d7694:	681b      	ldr	r3, [r3, #0]
   d7696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7698:	9301      	str	r3, [sp, #4]
   d769a:	bd08      	pop	{r3, pc}
   d769c:	00030248 	.word	0x00030248

000d76a0 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d76a0:	b508      	push	{r3, lr}
   d76a2:	4b02      	ldr	r3, [pc, #8]	; (d76ac <os_timer_set_id+0xc>)
   d76a4:	681b      	ldr	r3, [r3, #0]
   d76a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d76a8:	9301      	str	r3, [sp, #4]
   d76aa:	bd08      	pop	{r3, pc}
   d76ac:	00030248 	.word	0x00030248

000d76b0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d76b0:	b508      	push	{r3, lr}
   d76b2:	4b02      	ldr	r3, [pc, #8]	; (d76bc <inet_inet_ntop+0xc>)
   d76b4:	681b      	ldr	r3, [r3, #0]
   d76b6:	695b      	ldr	r3, [r3, #20]
   d76b8:	9301      	str	r3, [sp, #4]
   d76ba:	bd08      	pop	{r3, pc}
   d76bc:	00030264 	.word	0x00030264

000d76c0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d76c0:	b508      	push	{r3, lr}
   d76c2:	4b02      	ldr	r3, [pc, #8]	; (d76cc <HAL_USART_Init+0xc>)
   d76c4:	681b      	ldr	r3, [r3, #0]
   d76c6:	681b      	ldr	r3, [r3, #0]
   d76c8:	9301      	str	r3, [sp, #4]
   d76ca:	bd08      	pop	{r3, pc}
   d76cc:	0003023c 	.word	0x0003023c

000d76d0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d76d0:	b508      	push	{r3, lr}
   d76d2:	4b02      	ldr	r3, [pc, #8]	; (d76dc <HAL_USART_Write_Data+0xc>)
   d76d4:	681b      	ldr	r3, [r3, #0]
   d76d6:	68db      	ldr	r3, [r3, #12]
   d76d8:	9301      	str	r3, [sp, #4]
   d76da:	bd08      	pop	{r3, pc}
   d76dc:	0003023c 	.word	0x0003023c

000d76e0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d76e0:	b508      	push	{r3, lr}
   d76e2:	4b02      	ldr	r3, [pc, #8]	; (d76ec <HAL_USART_Available_Data+0xc>)
   d76e4:	681b      	ldr	r3, [r3, #0]
   d76e6:	691b      	ldr	r3, [r3, #16]
   d76e8:	9301      	str	r3, [sp, #4]
   d76ea:	bd08      	pop	{r3, pc}
   d76ec:	0003023c 	.word	0x0003023c

000d76f0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d76f0:	b508      	push	{r3, lr}
   d76f2:	4b02      	ldr	r3, [pc, #8]	; (d76fc <HAL_USART_Read_Data+0xc>)
   d76f4:	681b      	ldr	r3, [r3, #0]
   d76f6:	695b      	ldr	r3, [r3, #20]
   d76f8:	9301      	str	r3, [sp, #4]
   d76fa:	bd08      	pop	{r3, pc}
   d76fc:	0003023c 	.word	0x0003023c

000d7700 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d7700:	b508      	push	{r3, lr}
   d7702:	4b02      	ldr	r3, [pc, #8]	; (d770c <HAL_USART_Peek_Data+0xc>)
   d7704:	681b      	ldr	r3, [r3, #0]
   d7706:	699b      	ldr	r3, [r3, #24]
   d7708:	9301      	str	r3, [sp, #4]
   d770a:	bd08      	pop	{r3, pc}
   d770c:	0003023c 	.word	0x0003023c

000d7710 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d7710:	b508      	push	{r3, lr}
   d7712:	4b02      	ldr	r3, [pc, #8]	; (d771c <HAL_USART_Flush_Data+0xc>)
   d7714:	681b      	ldr	r3, [r3, #0]
   d7716:	69db      	ldr	r3, [r3, #28]
   d7718:	9301      	str	r3, [sp, #4]
   d771a:	bd08      	pop	{r3, pc}
   d771c:	0003023c 	.word	0x0003023c

000d7720 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d7720:	b508      	push	{r3, lr}
   d7722:	4b02      	ldr	r3, [pc, #8]	; (d772c <HAL_USART_Is_Enabled+0xc>)
   d7724:	681b      	ldr	r3, [r3, #0]
   d7726:	6a1b      	ldr	r3, [r3, #32]
   d7728:	9301      	str	r3, [sp, #4]
   d772a:	bd08      	pop	{r3, pc}
   d772c:	0003023c 	.word	0x0003023c

000d7730 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d7730:	b508      	push	{r3, lr}
   d7732:	4b02      	ldr	r3, [pc, #8]	; (d773c <HAL_USART_Available_Data_For_Write+0xc>)
   d7734:	681b      	ldr	r3, [r3, #0]
   d7736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7738:	9301      	str	r3, [sp, #4]
   d773a:	bd08      	pop	{r3, pc}
   d773c:	0003023c 	.word	0x0003023c

000d7740 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d7740:	b508      	push	{r3, lr}
   d7742:	4b02      	ldr	r3, [pc, #8]	; (d774c <HAL_I2C_Begin_Transmission+0xc>)
   d7744:	681b      	ldr	r3, [r3, #0]
   d7746:	699b      	ldr	r3, [r3, #24]
   d7748:	9301      	str	r3, [sp, #4]
   d774a:	bd08      	pop	{r3, pc}
   d774c:	00030228 	.word	0x00030228

000d7750 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d7750:	b508      	push	{r3, lr}
   d7752:	4b02      	ldr	r3, [pc, #8]	; (d775c <HAL_I2C_End_Transmission+0xc>)
   d7754:	681b      	ldr	r3, [r3, #0]
   d7756:	69db      	ldr	r3, [r3, #28]
   d7758:	9301      	str	r3, [sp, #4]
   d775a:	bd08      	pop	{r3, pc}
   d775c:	00030228 	.word	0x00030228

000d7760 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d7760:	b508      	push	{r3, lr}
   d7762:	4b02      	ldr	r3, [pc, #8]	; (d776c <HAL_I2C_Write_Data+0xc>)
   d7764:	681b      	ldr	r3, [r3, #0]
   d7766:	6a1b      	ldr	r3, [r3, #32]
   d7768:	9301      	str	r3, [sp, #4]
   d776a:	bd08      	pop	{r3, pc}
   d776c:	00030228 	.word	0x00030228

000d7770 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d7770:	b508      	push	{r3, lr}
   d7772:	4b02      	ldr	r3, [pc, #8]	; (d777c <HAL_I2C_Available_Data+0xc>)
   d7774:	681b      	ldr	r3, [r3, #0]
   d7776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7778:	9301      	str	r3, [sp, #4]
   d777a:	bd08      	pop	{r3, pc}
   d777c:	00030228 	.word	0x00030228

000d7780 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d7780:	b508      	push	{r3, lr}
   d7782:	4b02      	ldr	r3, [pc, #8]	; (d778c <HAL_I2C_Read_Data+0xc>)
   d7784:	681b      	ldr	r3, [r3, #0]
   d7786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7788:	9301      	str	r3, [sp, #4]
   d778a:	bd08      	pop	{r3, pc}
   d778c:	00030228 	.word	0x00030228

000d7790 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d7790:	b508      	push	{r3, lr}
   d7792:	4b02      	ldr	r3, [pc, #8]	; (d779c <HAL_I2C_Peek_Data+0xc>)
   d7794:	681b      	ldr	r3, [r3, #0]
   d7796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7798:	9301      	str	r3, [sp, #4]
   d779a:	bd08      	pop	{r3, pc}
   d779c:	00030228 	.word	0x00030228

000d77a0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d77a0:	b508      	push	{r3, lr}
   d77a2:	4b02      	ldr	r3, [pc, #8]	; (d77ac <HAL_I2C_Flush_Data+0xc>)
   d77a4:	681b      	ldr	r3, [r3, #0]
   d77a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d77a8:	9301      	str	r3, [sp, #4]
   d77aa:	bd08      	pop	{r3, pc}
   d77ac:	00030228 	.word	0x00030228

000d77b0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d77b0:	b508      	push	{r3, lr}
   d77b2:	4b02      	ldr	r3, [pc, #8]	; (d77bc <HAL_I2C_Is_Enabled+0xc>)
   d77b4:	681b      	ldr	r3, [r3, #0]
   d77b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d77b8:	9301      	str	r3, [sp, #4]
   d77ba:	bd08      	pop	{r3, pc}
   d77bc:	00030228 	.word	0x00030228

000d77c0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d77c0:	b508      	push	{r3, lr}
   d77c2:	4b02      	ldr	r3, [pc, #8]	; (d77cc <HAL_I2C_Init+0xc>)
   d77c4:	681b      	ldr	r3, [r3, #0]
   d77c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d77c8:	9301      	str	r3, [sp, #4]
   d77ca:	bd08      	pop	{r3, pc}
   d77cc:	00030228 	.word	0x00030228

000d77d0 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d77d0:	b508      	push	{r3, lr}
   d77d2:	4b02      	ldr	r3, [pc, #8]	; (d77dc <HAL_I2C_Acquire+0xc>)
   d77d4:	681b      	ldr	r3, [r3, #0]
   d77d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d77d8:	9301      	str	r3, [sp, #4]
   d77da:	bd08      	pop	{r3, pc}
   d77dc:	00030228 	.word	0x00030228

000d77e0 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d77e0:	b508      	push	{r3, lr}
   d77e2:	4b02      	ldr	r3, [pc, #8]	; (d77ec <HAL_I2C_Release+0xc>)
   d77e4:	681b      	ldr	r3, [r3, #0]
   d77e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d77e8:	9301      	str	r3, [sp, #4]
   d77ea:	bd08      	pop	{r3, pc}
   d77ec:	00030228 	.word	0x00030228

000d77f0 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d77f0:	b508      	push	{r3, lr}
   d77f2:	4b02      	ldr	r3, [pc, #8]	; (d77fc <HAL_I2C_Request_Data_Ex+0xc>)
   d77f4:	681b      	ldr	r3, [r3, #0]
   d77f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d77f8:	9301      	str	r3, [sp, #4]
   d77fa:	bd08      	pop	{r3, pc}
   d77fc:	00030228 	.word	0x00030228

000d7800 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d7800:	b508      	push	{r3, lr}
   d7802:	4b02      	ldr	r3, [pc, #8]	; (d780c <cellular_signal+0xc>)
   d7804:	681b      	ldr	r3, [r3, #0]
   d7806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7808:	9301      	str	r3, [sp, #4]
   d780a:	bd08      	pop	{r3, pc}
   d780c:	00030274 	.word	0x00030274

000d7810 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d7810:	b508      	push	{r3, lr}
   d7812:	4b02      	ldr	r3, [pc, #8]	; (d781c <HAL_USB_USART_Init+0xc>)
   d7814:	681b      	ldr	r3, [r3, #0]
   d7816:	681b      	ldr	r3, [r3, #0]
   d7818:	9301      	str	r3, [sp, #4]
   d781a:	bd08      	pop	{r3, pc}
   d781c:	0003024c 	.word	0x0003024c

000d7820 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d7820:	b508      	push	{r3, lr}
   d7822:	4b02      	ldr	r3, [pc, #8]	; (d782c <HAL_USB_USART_Begin+0xc>)
   d7824:	681b      	ldr	r3, [r3, #0]
   d7826:	685b      	ldr	r3, [r3, #4]
   d7828:	9301      	str	r3, [sp, #4]
   d782a:	bd08      	pop	{r3, pc}
   d782c:	0003024c 	.word	0x0003024c

000d7830 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d7830:	b508      	push	{r3, lr}
   d7832:	4b02      	ldr	r3, [pc, #8]	; (d783c <HAL_USB_USART_Available_Data+0xc>)
   d7834:	681b      	ldr	r3, [r3, #0]
   d7836:	691b      	ldr	r3, [r3, #16]
   d7838:	9301      	str	r3, [sp, #4]
   d783a:	bd08      	pop	{r3, pc}
   d783c:	0003024c 	.word	0x0003024c

000d7840 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d7840:	b508      	push	{r3, lr}
   d7842:	4b02      	ldr	r3, [pc, #8]	; (d784c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d7844:	681b      	ldr	r3, [r3, #0]
   d7846:	695b      	ldr	r3, [r3, #20]
   d7848:	9301      	str	r3, [sp, #4]
   d784a:	bd08      	pop	{r3, pc}
   d784c:	0003024c 	.word	0x0003024c

000d7850 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7850:	b508      	push	{r3, lr}
   d7852:	4b02      	ldr	r3, [pc, #8]	; (d785c <HAL_USB_USART_Receive_Data+0xc>)
   d7854:	681b      	ldr	r3, [r3, #0]
   d7856:	699b      	ldr	r3, [r3, #24]
   d7858:	9301      	str	r3, [sp, #4]
   d785a:	bd08      	pop	{r3, pc}
   d785c:	0003024c 	.word	0x0003024c

000d7860 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7860:	b508      	push	{r3, lr}
   d7862:	4b02      	ldr	r3, [pc, #8]	; (d786c <HAL_USB_USART_Send_Data+0xc>)
   d7864:	681b      	ldr	r3, [r3, #0]
   d7866:	69db      	ldr	r3, [r3, #28]
   d7868:	9301      	str	r3, [sp, #4]
   d786a:	bd08      	pop	{r3, pc}
   d786c:	0003024c 	.word	0x0003024c

000d7870 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d7870:	b508      	push	{r3, lr}
   d7872:	4b02      	ldr	r3, [pc, #8]	; (d787c <HAL_USB_USART_Flush_Data+0xc>)
   d7874:	681b      	ldr	r3, [r3, #0]
   d7876:	6a1b      	ldr	r3, [r3, #32]
   d7878:	9301      	str	r3, [sp, #4]
   d787a:	bd08      	pop	{r3, pc}
   d787c:	0003024c 	.word	0x0003024c

000d7880 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d7880:	b508      	push	{r3, lr}
   d7882:	4b02      	ldr	r3, [pc, #8]	; (d788c <system_mode+0xc>)
   d7884:	681b      	ldr	r3, [r3, #0]
   d7886:	681b      	ldr	r3, [r3, #0]
   d7888:	9301      	str	r3, [sp, #4]
   d788a:	bd08      	pop	{r3, pc}
   d788c:	00030220 	.word	0x00030220

000d7890 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d7890:	b508      	push	{r3, lr}
   d7892:	4b02      	ldr	r3, [pc, #8]	; (d789c <set_system_mode+0xc>)
   d7894:	681b      	ldr	r3, [r3, #0]
   d7896:	685b      	ldr	r3, [r3, #4]
   d7898:	9301      	str	r3, [sp, #4]
   d789a:	bd08      	pop	{r3, pc}
   d789c:	00030220 	.word	0x00030220

000d78a0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d78a0:	b508      	push	{r3, lr}
   d78a2:	4b02      	ldr	r3, [pc, #8]	; (d78ac <system_delay_ms+0xc>)
   d78a4:	681b      	ldr	r3, [r3, #0]
   d78a6:	695b      	ldr	r3, [r3, #20]
   d78a8:	9301      	str	r3, [sp, #4]
   d78aa:	bd08      	pop	{r3, pc}
   d78ac:	00030220 	.word	0x00030220

000d78b0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d78b0:	b508      	push	{r3, lr}
   d78b2:	4b02      	ldr	r3, [pc, #8]	; (d78bc <system_thread_set_state+0xc>)
   d78b4:	681b      	ldr	r3, [r3, #0]
   d78b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d78b8:	9301      	str	r3, [sp, #4]
   d78ba:	bd08      	pop	{r3, pc}
   d78bc:	00030220 	.word	0x00030220

000d78c0 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d78c0:	b508      	push	{r3, lr}
   d78c2:	4b02      	ldr	r3, [pc, #8]	; (d78cc <system_thread_get_state+0xc>)
   d78c4:	681b      	ldr	r3, [r3, #0]
   d78c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d78c8:	9301      	str	r3, [sp, #4]
   d78ca:	bd08      	pop	{r3, pc}
   d78cc:	00030220 	.word	0x00030220

000d78d0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d78d0:	b508      	push	{r3, lr}
   d78d2:	4b03      	ldr	r3, [pc, #12]	; (d78e0 <system_ctrl_set_app_request_handler+0x10>)
   d78d4:	681b      	ldr	r3, [r3, #0]
   d78d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d78da:	9301      	str	r3, [sp, #4]
   d78dc:	bd08      	pop	{r3, pc}
   d78de:	0000      	.short	0x0000
   d78e0:	00030220 	.word	0x00030220

000d78e4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d78e4:	b508      	push	{r3, lr}
   d78e6:	4b03      	ldr	r3, [pc, #12]	; (d78f4 <system_ctrl_set_result+0x10>)
   d78e8:	681b      	ldr	r3, [r3, #0]
   d78ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d78ee:	9301      	str	r3, [sp, #4]
   d78f0:	bd08      	pop	{r3, pc}
   d78f2:	0000      	.short	0x0000
   d78f4:	00030220 	.word	0x00030220

000d78f8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d78f8:	b508      	push	{r3, lr}
   d78fa:	4b02      	ldr	r3, [pc, #8]	; (d7904 <network_connect+0xc>)
   d78fc:	681b      	ldr	r3, [r3, #0]
   d78fe:	685b      	ldr	r3, [r3, #4]
   d7900:	9301      	str	r3, [sp, #4]
   d7902:	bd08      	pop	{r3, pc}
   d7904:	00030240 	.word	0x00030240

000d7908 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d7908:	b508      	push	{r3, lr}
   d790a:	4b02      	ldr	r3, [pc, #8]	; (d7914 <network_connecting+0xc>)
   d790c:	681b      	ldr	r3, [r3, #0]
   d790e:	689b      	ldr	r3, [r3, #8]
   d7910:	9301      	str	r3, [sp, #4]
   d7912:	bd08      	pop	{r3, pc}
   d7914:	00030240 	.word	0x00030240

000d7918 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d7918:	b508      	push	{r3, lr}
   d791a:	4b02      	ldr	r3, [pc, #8]	; (d7924 <network_disconnect+0xc>)
   d791c:	681b      	ldr	r3, [r3, #0]
   d791e:	68db      	ldr	r3, [r3, #12]
   d7920:	9301      	str	r3, [sp, #4]
   d7922:	bd08      	pop	{r3, pc}
   d7924:	00030240 	.word	0x00030240

000d7928 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d7928:	b508      	push	{r3, lr}
   d792a:	4b02      	ldr	r3, [pc, #8]	; (d7934 <network_ready+0xc>)
   d792c:	681b      	ldr	r3, [r3, #0]
   d792e:	691b      	ldr	r3, [r3, #16]
   d7930:	9301      	str	r3, [sp, #4]
   d7932:	bd08      	pop	{r3, pc}
   d7934:	00030240 	.word	0x00030240

000d7938 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d7938:	b508      	push	{r3, lr}
   d793a:	4b02      	ldr	r3, [pc, #8]	; (d7944 <network_on+0xc>)
   d793c:	681b      	ldr	r3, [r3, #0]
   d793e:	695b      	ldr	r3, [r3, #20]
   d7940:	9301      	str	r3, [sp, #4]
   d7942:	bd08      	pop	{r3, pc}
   d7944:	00030240 	.word	0x00030240

000d7948 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d7948:	b508      	push	{r3, lr}
   d794a:	4b02      	ldr	r3, [pc, #8]	; (d7954 <network_off+0xc>)
   d794c:	681b      	ldr	r3, [r3, #0]
   d794e:	699b      	ldr	r3, [r3, #24]
   d7950:	9301      	str	r3, [sp, #4]
   d7952:	bd08      	pop	{r3, pc}
   d7954:	00030240 	.word	0x00030240

000d7958 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d7958:	b508      	push	{r3, lr}
   d795a:	4b02      	ldr	r3, [pc, #8]	; (d7964 <network_listen+0xc>)
   d795c:	681b      	ldr	r3, [r3, #0]
   d795e:	69db      	ldr	r3, [r3, #28]
   d7960:	9301      	str	r3, [sp, #4]
   d7962:	bd08      	pop	{r3, pc}
   d7964:	00030240 	.word	0x00030240

000d7968 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d7968:	b508      	push	{r3, lr}
   d796a:	4b02      	ldr	r3, [pc, #8]	; (d7974 <network_listening+0xc>)
   d796c:	681b      	ldr	r3, [r3, #0]
   d796e:	6a1b      	ldr	r3, [r3, #32]
   d7970:	9301      	str	r3, [sp, #4]
   d7972:	bd08      	pop	{r3, pc}
   d7974:	00030240 	.word	0x00030240

000d7978 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d7978:	b508      	push	{r3, lr}
   d797a:	4b02      	ldr	r3, [pc, #8]	; (d7984 <network_set_listen_timeout+0xc>)
   d797c:	681b      	ldr	r3, [r3, #0]
   d797e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7980:	9301      	str	r3, [sp, #4]
   d7982:	bd08      	pop	{r3, pc}
   d7984:	00030240 	.word	0x00030240

000d7988 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d7988:	b508      	push	{r3, lr}
   d798a:	4b02      	ldr	r3, [pc, #8]	; (d7994 <network_get_listen_timeout+0xc>)
   d798c:	681b      	ldr	r3, [r3, #0]
   d798e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7990:	9301      	str	r3, [sp, #4]
   d7992:	bd08      	pop	{r3, pc}
   d7994:	00030240 	.word	0x00030240

000d7998 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d7998:	b508      	push	{r3, lr}
   d799a:	4b02      	ldr	r3, [pc, #8]	; (d79a4 <spark_process+0xc>)
   d799c:	681b      	ldr	r3, [r3, #0]
   d799e:	689b      	ldr	r3, [r3, #8]
   d79a0:	9301      	str	r3, [sp, #4]
   d79a2:	bd08      	pop	{r3, pc}
   d79a4:	00030244 	.word	0x00030244

000d79a8 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d79a8:	b508      	push	{r3, lr}
   d79aa:	4b02      	ldr	r3, [pc, #8]	; (d79b4 <spark_cloud_flag_connected+0xc>)
   d79ac:	681b      	ldr	r3, [r3, #0]
   d79ae:	695b      	ldr	r3, [r3, #20]
   d79b0:	9301      	str	r3, [sp, #4]
   d79b2:	bd08      	pop	{r3, pc}
   d79b4:	00030244 	.word	0x00030244

000d79b8 <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d79b8:	b508      	push	{r3, lr}
   d79ba:	4b02      	ldr	r3, [pc, #8]	; (d79c4 <spark_sync_time+0xc>)
   d79bc:	681b      	ldr	r3, [r3, #0]
   d79be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d79c0:	9301      	str	r3, [sp, #4]
   d79c2:	bd08      	pop	{r3, pc}
   d79c4:	00030244 	.word	0x00030244

000d79c8 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d79c8:	b508      	push	{r3, lr}
   d79ca:	4b02      	ldr	r3, [pc, #8]	; (d79d4 <spark_sync_time_pending+0xc>)
   d79cc:	681b      	ldr	r3, [r3, #0]
   d79ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d79d0:	9301      	str	r3, [sp, #4]
   d79d2:	bd08      	pop	{r3, pc}
   d79d4:	00030244 	.word	0x00030244

000d79d8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d79d8:	b508      	push	{r3, lr}
   d79da:	4b02      	ldr	r3, [pc, #8]	; (d79e4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d79dc:	681b      	ldr	r3, [r3, #0]
   d79de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d79e0:	9301      	str	r3, [sp, #4]
   d79e2:	bd08      	pop	{r3, pc}
   d79e4:	00030244 	.word	0x00030244

000d79e8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d79e8:	b508      	push	{r3, lr}
   d79ea:	4b02      	ldr	r3, [pc, #8]	; (d79f4 <malloc+0xc>)
   d79ec:	681b      	ldr	r3, [r3, #0]
   d79ee:	681b      	ldr	r3, [r3, #0]
   d79f0:	9301      	str	r3, [sp, #4]
   d79f2:	bd08      	pop	{r3, pc}
   d79f4:	0003021c 	.word	0x0003021c

000d79f8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d79f8:	b508      	push	{r3, lr}
   d79fa:	4b02      	ldr	r3, [pc, #8]	; (d7a04 <free+0xc>)
   d79fc:	681b      	ldr	r3, [r3, #0]
   d79fe:	685b      	ldr	r3, [r3, #4]
   d7a00:	9301      	str	r3, [sp, #4]
   d7a02:	bd08      	pop	{r3, pc}
   d7a04:	0003021c 	.word	0x0003021c

000d7a08 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d7a08:	b508      	push	{r3, lr}
   d7a0a:	4b02      	ldr	r3, [pc, #8]	; (d7a14 <realloc+0xc>)
   d7a0c:	681b      	ldr	r3, [r3, #0]
   d7a0e:	689b      	ldr	r3, [r3, #8]
   d7a10:	9301      	str	r3, [sp, #4]
   d7a12:	bd08      	pop	{r3, pc}
   d7a14:	0003021c 	.word	0x0003021c

000d7a18 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d7a18:	b508      	push	{r3, lr}
   d7a1a:	4b02      	ldr	r3, [pc, #8]	; (d7a24 <sprintf+0xc>)
   d7a1c:	681b      	ldr	r3, [r3, #0]
   d7a1e:	68db      	ldr	r3, [r3, #12]
   d7a20:	9301      	str	r3, [sp, #4]
   d7a22:	bd08      	pop	{r3, pc}
   d7a24:	0003021c 	.word	0x0003021c

000d7a28 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d7a28:	b508      	push	{r3, lr}
   d7a2a:	4b02      	ldr	r3, [pc, #8]	; (d7a34 <vsnprintf+0xc>)
   d7a2c:	681b      	ldr	r3, [r3, #0]
   d7a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7a30:	9301      	str	r3, [sp, #4]
   d7a32:	bd08      	pop	{r3, pc}
   d7a34:	0003021c 	.word	0x0003021c

000d7a38 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7a38:	2200      	movs	r2, #0
   d7a3a:	4611      	mov	r1, r2
   d7a3c:	6840      	ldr	r0, [r0, #4]
   d7a3e:	f7ff bf93 	b.w	d7968 <network_listening>

000d7a42 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7a42:	2200      	movs	r2, #0
   d7a44:	4611      	mov	r1, r2
   d7a46:	6840      	ldr	r0, [r0, #4]
   d7a48:	f7ff bf9e 	b.w	d7988 <network_get_listen_timeout>

000d7a4c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7a4c:	2200      	movs	r2, #0
   d7a4e:	6840      	ldr	r0, [r0, #4]
   d7a50:	f7ff bf92 	b.w	d7978 <network_set_listen_timeout>

000d7a54 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7a54:	2200      	movs	r2, #0
   d7a56:	f081 0101 	eor.w	r1, r1, #1
   d7a5a:	6840      	ldr	r0, [r0, #4]
   d7a5c:	f7ff bf7c 	b.w	d7958 <network_listen>

000d7a60 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d7a60:	2300      	movs	r3, #0
   d7a62:	461a      	mov	r2, r3
   d7a64:	4619      	mov	r1, r3
   d7a66:	6840      	ldr	r0, [r0, #4]
   d7a68:	f7ff bf6e 	b.w	d7948 <network_off>

000d7a6c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7a6c:	2300      	movs	r3, #0
   d7a6e:	461a      	mov	r2, r3
   d7a70:	4619      	mov	r1, r3
   d7a72:	6840      	ldr	r0, [r0, #4]
   d7a74:	f7ff bf60 	b.w	d7938 <network_on>

000d7a78 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7a78:	2200      	movs	r2, #0
   d7a7a:	4611      	mov	r1, r2
   d7a7c:	6840      	ldr	r0, [r0, #4]
   d7a7e:	f7ff bf53 	b.w	d7928 <network_ready>

000d7a82 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7a82:	2200      	movs	r2, #0
   d7a84:	4611      	mov	r1, r2
   d7a86:	6840      	ldr	r0, [r0, #4]
   d7a88:	f7ff bf3e 	b.w	d7908 <network_connecting>

000d7a8c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7a8c:	2200      	movs	r2, #0
   d7a8e:	2102      	movs	r1, #2
   d7a90:	6840      	ldr	r0, [r0, #4]
   d7a92:	f7ff bf41 	b.w	d7918 <network_disconnect>

000d7a96 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7a96:	2300      	movs	r3, #0
   d7a98:	461a      	mov	r2, r3
   d7a9a:	6840      	ldr	r0, [r0, #4]
   d7a9c:	f7ff bf2c 	b.w	d78f8 <network_connect>

000d7aa0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d7aa0:	4b02      	ldr	r3, [pc, #8]	; (d7aac <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d7aa2:	2203      	movs	r2, #3
   d7aa4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d7aa6:	4a02      	ldr	r2, [pc, #8]	; (d7ab0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d7aa8:	601a      	str	r2, [r3, #0]
   d7aaa:	4770      	bx	lr
   d7aac:	2003e394 	.word	0x2003e394
   d7ab0:	000da178 	.word	0x000da178

000d7ab4 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d7ab4:	2100      	movs	r1, #0
   d7ab6:	f7ff bd4b 	b.w	d7550 <HAL_SPI_Acquire>

000d7aba <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d7aba:	2100      	movs	r1, #0
   d7abc:	f7ff bd50 	b.w	d7560 <HAL_SPI_Release>

000d7ac0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d7ac0:	b510      	push	{r4, lr}
   d7ac2:	4604      	mov	r4, r0
{
    _spi = spi;
   d7ac4:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d7ac6:	4608      	mov	r0, r1
   d7ac8:	f7ff fd12 	bl	d74f0 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7acc:	2300      	movs	r3, #0
   d7ace:	6063      	str	r3, [r4, #4]
}
   d7ad0:	4620      	mov	r0, r4
   d7ad2:	bd10      	pop	{r4, pc}

000d7ad4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d7ad4:	b510      	push	{r4, lr}
   d7ad6:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d7ad8:	7800      	ldrb	r0, [r0, #0]
   d7ada:	f7ff ffeb 	bl	d7ab4 <_ZN8SPIClass4lockEv.isra.0>
   d7ade:	b948      	cbnz	r0, d7af4 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d7ae0:	7820      	ldrb	r0, [r4, #0]
   d7ae2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d7ae6:	f7ff fcdb 	bl	d74a0 <HAL_SPI_Begin>
        unlock();
   d7aea:	7820      	ldrb	r0, [r4, #0]
    }
}
   d7aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d7af0:	f7ff bfe3 	b.w	d7aba <_ZN8SPIClass6unlockEv.isra.1>
   d7af4:	bd10      	pop	{r4, pc}

000d7af6 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d7af6:	b538      	push	{r3, r4, r5, lr}
   d7af8:	4604      	mov	r4, r0
    if (!lock())
   d7afa:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d7afc:	460d      	mov	r5, r1
    if (!lock())
   d7afe:	f7ff ffd9 	bl	d7ab4 <_ZN8SPIClass4lockEv.isra.0>
   d7b02:	b940      	cbnz	r0, d7b16 <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d7b04:	7820      	ldrb	r0, [r4, #0]
   d7b06:	4629      	mov	r1, r5
   d7b08:	f7ff fcd2 	bl	d74b0 <HAL_SPI_Set_Bit_Order>
        unlock();
   d7b0c:	7820      	ldrb	r0, [r4, #0]
    }
}
   d7b0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d7b12:	f7ff bfd2 	b.w	d7aba <_ZN8SPIClass6unlockEv.isra.1>
   d7b16:	bd38      	pop	{r3, r4, r5, pc}

000d7b18 <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d7b18:	b538      	push	{r3, r4, r5, lr}
   d7b1a:	4604      	mov	r4, r0
    if (!lock())
   d7b1c:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d7b1e:	460d      	mov	r5, r1
    if (!lock())
   d7b20:	f7ff ffc8 	bl	d7ab4 <_ZN8SPIClass4lockEv.isra.0>
   d7b24:	b940      	cbnz	r0, d7b38 <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d7b26:	7820      	ldrb	r0, [r4, #0]
   d7b28:	4629      	mov	r1, r5
   d7b2a:	f7ff fcc9 	bl	d74c0 <HAL_SPI_Set_Data_Mode>
        unlock();
   d7b2e:	7820      	ldrb	r0, [r4, #0]
    }
}
   d7b30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d7b34:	f7ff bfc1 	b.w	d7aba <_ZN8SPIClass6unlockEv.isra.1>
   d7b38:	bd38      	pop	{r3, r4, r5, pc}

000d7b3a <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d7b3a:	7800      	ldrb	r0, [r0, #0]
   d7b3c:	f7ff bfbd 	b.w	d7aba <_ZN8SPIClass6unlockEv.isra.1>

000d7b40 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d7b40:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d7b42:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d7b44:	6018      	str	r0, [r3, #0]
   d7b46:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d7b48:	6818      	ldr	r0, [r3, #0]
   d7b4a:	4288      	cmp	r0, r1
   d7b4c:	b2e5      	uxtb	r5, r4
   d7b4e:	d906      	bls.n	d7b5e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d7b50:	3401      	adds	r4, #1
   d7b52:	2c08      	cmp	r4, #8
   d7b54:	d002      	beq.n	d7b5c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d7b56:	0840      	lsrs	r0, r0, #1
   d7b58:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d7b5a:	e7f5      	b.n	d7b48 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d7b5c:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d7b5e:	4b02      	ldr	r3, [pc, #8]	; (d7b68 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d7b60:	5d5b      	ldrb	r3, [r3, r5]
   d7b62:	7013      	strb	r3, [r2, #0]
   d7b64:	bd30      	pop	{r4, r5, pc}
   d7b66:	bf00      	nop
   d7b68:	000da1a4 	.word	0x000da1a4

000d7b6c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d7b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7b70:	4607      	mov	r7, r0
   d7b72:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d7b74:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d7b76:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d7b78:	f7ff ff9c 	bl	d7ab4 <_ZN8SPIClass4lockEv.isra.0>
   d7b7c:	2800      	cmp	r0, #0
   d7b7e:	db62      	blt.n	d7c46 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d7b80:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d7b82:	2214      	movs	r2, #20
   d7b84:	2100      	movs	r1, #0
   d7b86:	a809      	add	r0, sp, #36	; 0x24
   d7b88:	f002 f922 	bl	d9dd0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d7b8c:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d7b8e:	4620      	mov	r0, r4
   d7b90:	2200      	movs	r2, #0
   d7b92:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d7b94:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d7b98:	f7ff fcba 	bl	d7510 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d7b9c:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d7ba0:	b154      	cbz	r4, d7bb8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d7ba2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d7ba6:	b935      	cbnz	r5, d7bb6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d7ba8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d7bac:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d7bb0:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d7bb4:	e003      	b.n	d7bbe <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d7bb6:	2400      	movs	r4, #0
   d7bb8:	46a1      	mov	r9, r4
   d7bba:	46a0      	mov	r8, r4
   d7bbc:	2501      	movs	r5, #1
   d7bbe:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d7bc0:	b105      	cbz	r5, d7bc4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d7bc2:	b9bb      	cbnz	r3, d7bf4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d7bc4:	429d      	cmp	r5, r3
   d7bc6:	d10b      	bne.n	d7be0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d7bc8:	68b2      	ldr	r2, [r6, #8]
   d7bca:	4542      	cmp	r2, r8
   d7bcc:	d108      	bne.n	d7be0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d7bce:	f88d 9020 	strb.w	r9, [sp, #32]
   d7bd2:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d7bd6:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d7bda:	89b2      	ldrh	r2, [r6, #12]
   d7bdc:	4291      	cmp	r1, r2
   d7bde:	d009      	beq.n	d7bf4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d7be0:	b153      	cbz	r3, d7bf8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d7be2:	2400      	movs	r4, #0
   d7be4:	7838      	ldrb	r0, [r7, #0]
   d7be6:	9401      	str	r4, [sp, #4]
   d7be8:	9400      	str	r4, [sp, #0]
   d7bea:	4623      	mov	r3, r4
   d7bec:	4622      	mov	r2, r4
   d7bee:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d7bf0:	f7ff fca6 	bl	d7540 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d7bf4:	2000      	movs	r0, #0
   d7bf6:	e026      	b.n	d7c46 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d7bf8:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d7bfc:	68b1      	ldr	r1, [r6, #8]
   d7bfe:	980a      	ldr	r0, [sp, #40]	; 0x28
   d7c00:	ab04      	add	r3, sp, #16
   d7c02:	f10d 020f 	add.w	r2, sp, #15
   d7c06:	f7ff ff9b 	bl	d7b40 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d7c0a:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d7c0c:	b105      	cbz	r5, d7c10 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d7c0e:	b9b1      	cbnz	r1, d7c3e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d7c10:	42a9      	cmp	r1, r5
   d7c12:	d008      	beq.n	d7c26 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d7c14:	2400      	movs	r4, #0
   d7c16:	7838      	ldrb	r0, [r7, #0]
   d7c18:	9401      	str	r4, [sp, #4]
   d7c1a:	7b74      	ldrb	r4, [r6, #13]
   d7c1c:	7b33      	ldrb	r3, [r6, #12]
   d7c1e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d7c22:	9400      	str	r4, [sp, #0]
   d7c24:	e7e4      	b.n	d7bf0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d7c26:	68b3      	ldr	r3, [r6, #8]
   d7c28:	4543      	cmp	r3, r8
   d7c2a:	d3f3      	bcc.n	d7c14 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d7c2c:	f88d 9020 	strb.w	r9, [sp, #32]
   d7c30:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d7c34:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d7c38:	89b3      	ldrh	r3, [r6, #12]
   d7c3a:	429a      	cmp	r2, r3
   d7c3c:	d1ea      	bne.n	d7c14 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d7c3e:	9b04      	ldr	r3, [sp, #16]
   d7c40:	4543      	cmp	r3, r8
   d7c42:	d1e7      	bne.n	d7c14 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d7c44:	e7d6      	b.n	d7bf4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d7c46:	b00f      	add	sp, #60	; 0x3c
   d7c48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7c4c <_ZN8SPIClass13setClockSpeedEjj>:
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d7c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7c50:	b088      	sub	sp, #32
    unsigned clock = 0;
   d7c52:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d7c54:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d7c56:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d7c58:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d7c5a:	460e      	mov	r6, r1
   d7c5c:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d7c5e:	f7ff ff29 	bl	d7ab4 <_ZN8SPIClass4lockEv.isra.0>
   d7c62:	4605      	mov	r5, r0
   d7c64:	bb00      	cbnz	r0, d7ca8 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d7c66:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d7c6a:	4601      	mov	r1, r0
   d7c6c:	2214      	movs	r2, #20
   d7c6e:	a803      	add	r0, sp, #12
   d7c70:	f002 f8ae 	bl	d9dd0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d7c74:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d7c76:	462a      	mov	r2, r5
   d7c78:	a903      	add	r1, sp, #12
   d7c7a:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d7c7c:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d7c80:	f7ff fc46 	bl	d7510 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d7c84:	ab02      	add	r3, sp, #8
   d7c86:	f10d 0207 	add.w	r2, sp, #7
   d7c8a:	fb07 f106 	mul.w	r1, r7, r6
   d7c8e:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d7c90:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d7c94:	f7ff ff54 	bl	d7b40 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d7c98:	7820      	ldrb	r0, [r4, #0]
   d7c9a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d7c9e:	f7ff fc17 	bl	d74d0 <HAL_SPI_Set_Clock_Divider>
        unlock();
   d7ca2:	7820      	ldrb	r0, [r4, #0]
   d7ca4:	f7ff ff09 	bl	d7aba <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d7ca8:	9802      	ldr	r0, [sp, #8]
   d7caa:	b008      	add	sp, #32
   d7cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7cb0 <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d7cb0:	b538      	push	{r3, r4, r5, lr}
   d7cb2:	4604      	mov	r4, r0
    if (!lock())
   d7cb4:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d7cb6:	460d      	mov	r5, r1
    if (!lock())
   d7cb8:	f7ff fefc 	bl	d7ab4 <_ZN8SPIClass4lockEv.isra.0>
   d7cbc:	b9c8      	cbnz	r0, d7cf2 <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d7cbe:	6861      	ldr	r1, [r4, #4]
   d7cc0:	b171      	cbz	r1, d7ce0 <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d7cc2:	4b0c      	ldr	r3, [pc, #48]	; (d7cf4 <_ZN8SPIClass15setClockDividerEh+0x44>)
   d7cc4:	5cc2      	ldrb	r2, [r0, r3]
   d7cc6:	42aa      	cmp	r2, r5
   d7cc8:	d002      	beq.n	d7cd0 <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d7cca:	3001      	adds	r0, #1
   d7ccc:	2808      	cmp	r0, #8
   d7cce:	d1f9      	bne.n	d7cc4 <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d7cd0:	3001      	adds	r0, #1
   d7cd2:	b2c0      	uxtb	r0, r0
   d7cd4:	40c1      	lsrs	r1, r0
   d7cd6:	2201      	movs	r2, #1
   d7cd8:	4620      	mov	r0, r4
   d7cda:	f7ff ffb7 	bl	d7c4c <_ZN8SPIClass13setClockSpeedEjj>
   d7cde:	e003      	b.n	d7ce8 <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d7ce0:	4629      	mov	r1, r5
   d7ce2:	7820      	ldrb	r0, [r4, #0]
   d7ce4:	f7ff fbf4 	bl	d74d0 <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d7ce8:	7820      	ldrb	r0, [r4, #0]
    }
}
   d7cea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d7cee:	f7ff bee4 	b.w	d7aba <_ZN8SPIClass6unlockEv.isra.1>
   d7cf2:	bd38      	pop	{r3, r4, r5, pc}
   d7cf4:	000da1a4 	.word	0x000da1a4

000d7cf8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d7cf8:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d7cfa:	7800      	ldrb	r0, [r0, #0]
   d7cfc:	f7ff fbf0 	bl	d74e0 <HAL_SPI_Send_Receive_Data>
}
   d7d00:	b2c0      	uxtb	r0, r0
   d7d02:	bd08      	pop	{r3, pc}

000d7d04 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d7d04:	b530      	push	{r4, r5, lr}
   d7d06:	b087      	sub	sp, #28
   d7d08:	4604      	mov	r4, r0
   d7d0a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d7d0c:	7800      	ldrb	r0, [r0, #0]
   d7d0e:	9500      	str	r5, [sp, #0]
   d7d10:	f7ff fc06 	bl	d7520 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d7d14:	b93d      	cbnz	r5, d7d26 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d7d16:	a902      	add	r1, sp, #8
   d7d18:	7820      	ldrb	r0, [r4, #0]
   d7d1a:	f7ff fc09 	bl	d7530 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d7d1e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d7d22:	07db      	lsls	r3, r3, #31
   d7d24:	d4f7      	bmi.n	d7d16 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d7d26:	b007      	add	sp, #28
   d7d28:	bd30      	pop	{r4, r5, pc}

000d7d2a <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d7d2a:	7800      	ldrb	r0, [r0, #0]
   d7d2c:	f7ff bbe8 	b.w	d7500 <HAL_SPI_Is_Enabled>

000d7d30 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d7d30:	b510      	push	{r4, lr}
   d7d32:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d7d34:	6800      	ldr	r0, [r0, #0]
   d7d36:	b118      	cbz	r0, d7d40 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d7d38:	f7ff fe5e 	bl	d79f8 <free>
            wakeupSource_ = nullptr;
   d7d3c:	2300      	movs	r3, #0
   d7d3e:	6023      	str	r3, [r4, #0]
   d7d40:	bd10      	pop	{r4, pc}

000d7d42 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d7d42:	b510      	push	{r4, lr}
   d7d44:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d7d46:	f7ff fff3 	bl	d7d30 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d7d4a:	4620      	mov	r0, r4
   d7d4c:	bd10      	pop	{r4, pc}
	...

000d7d50 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7d50:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7d52:	4c09      	ldr	r4, [pc, #36]	; (d7d78 <_GLOBAL__sub_I_System+0x28>)
   d7d54:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7d56:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7d5a:	6020      	str	r0, [r4, #0]
   d7d5c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7d5e:	71a0      	strb	r0, [r4, #6]
   d7d60:	8120      	strh	r0, [r4, #8]
   d7d62:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7d64:	f7ff fd94 	bl	d7890 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d7d68:	4620      	mov	r0, r4
   d7d6a:	4a04      	ldr	r2, [pc, #16]	; (d7d7c <_GLOBAL__sub_I_System+0x2c>)
   d7d6c:	4904      	ldr	r1, [pc, #16]	; (d7d80 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7d6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d7d72:	f001 b99b 	b.w	d90ac <__aeabi_atexit>
   d7d76:	bf00      	nop
   d7d78:	2003e39c 	.word	0x2003e39c
   d7d7c:	2003dd9c 	.word	0x2003dd9c
   d7d80:	000d7d43 	.word	0x000d7d43

000d7d84 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d7d84:	b510      	push	{r4, lr}
   d7d86:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d7d88:	f002 f88c 	bl	d9ea4 <strlen>
   d7d8c:	3801      	subs	r0, #1
   d7d8e:	1823      	adds	r3, r4, r0
   d7d90:	4620      	mov	r0, r4
	while(i<j){
   d7d92:	4298      	cmp	r0, r3
   d7d94:	d206      	bcs.n	d7da4 <_Z11str_reversePc+0x20>
		c = *i;
   d7d96:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d7d98:	7819      	ldrb	r1, [r3, #0]
   d7d9a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d7d9e:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d7da2:	e7f6      	b.n	d7d92 <_Z11str_reversePc+0xe>
   d7da4:	bd10      	pop	{r4, pc}

000d7da6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d7da6:	b570      	push	{r4, r5, r6, lr}
   d7da8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d7daa:	1e91      	subs	r1, r2, #2
   d7dac:	2922      	cmp	r1, #34	; 0x22
   d7dae:	d820      	bhi.n	d7df2 <ultoa+0x4c>
   d7db0:	4625      	mov	r5, r4
   d7db2:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d7db4:	b910      	cbnz	r0, d7dbc <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d7db6:	4423      	add	r3, r4
            *ptr++ = '0';
   d7db8:	2230      	movs	r2, #48	; 0x30
   d7dba:	e00e      	b.n	d7dda <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d7dbc:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d7dc0:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d7dc4:	b2c1      	uxtb	r1, r0
   d7dc6:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d7dca:	2809      	cmp	r0, #9
                *ptr += '0';
   d7dcc:	bf94      	ite	ls
   d7dce:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d7dd0:	3157      	addhi	r1, #87	; 0x57
   d7dd2:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d7dd6:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d7dd8:	e7eb      	b.n	d7db2 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d7dda:	4299      	cmp	r1, r3
   d7ddc:	d202      	bcs.n	d7de4 <ultoa+0x3e>
            *ptr++ = '0';
   d7dde:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d7de2:	e7fa      	b.n	d7dda <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d7de4:	2300      	movs	r3, #0
	str_reverse(buffer);
   d7de6:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d7de8:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d7dea:	f7ff ffcb 	bl	d7d84 <_Z11str_reversePc>
	return buffer;
   d7dee:	4620      	mov	r0, r4
   d7df0:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d7df2:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d7df4:	bd70      	pop	{r4, r5, r6, pc}

000d7df6 <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   d7df6:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   d7df8:	2301      	movs	r3, #1
   d7dfa:	f7ff ffd4 	bl	d7da6 <ultoa>
}
   d7dfe:	bd08      	pop	{r3, pc}

000d7e00 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7e00:	b510      	push	{r4, lr}
   d7e02:	4604      	mov	r4, r0
{
	free(buffer);
   d7e04:	6800      	ldr	r0, [r0, #0]
   d7e06:	f7ff fdf7 	bl	d79f8 <free>
}
   d7e0a:	4620      	mov	r0, r4
   d7e0c:	bd10      	pop	{r4, pc}

000d7e0e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7e0e:	b510      	push	{r4, lr}
   d7e10:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7e12:	6800      	ldr	r0, [r0, #0]
   d7e14:	b108      	cbz	r0, d7e1a <_ZN6String10invalidateEv+0xc>
   d7e16:	f7ff fdef 	bl	d79f8 <free>
	buffer = NULL;
   d7e1a:	2300      	movs	r3, #0
   d7e1c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d7e1e:	60a3      	str	r3, [r4, #8]
   d7e20:	6063      	str	r3, [r4, #4]
   d7e22:	bd10      	pop	{r4, pc}

000d7e24 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7e24:	b538      	push	{r3, r4, r5, lr}
   d7e26:	4604      	mov	r4, r0
   d7e28:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d7e2a:	6800      	ldr	r0, [r0, #0]
   d7e2c:	3101      	adds	r1, #1
   d7e2e:	f7ff fdeb 	bl	d7a08 <realloc>
	if (newbuffer) {
   d7e32:	b110      	cbz	r0, d7e3a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7e34:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d7e38:	2001      	movs	r0, #1
	}
	return 0;
}
   d7e3a:	bd38      	pop	{r3, r4, r5, pc}

000d7e3c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7e3c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7e3e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7e40:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d7e42:	b113      	cbz	r3, d7e4a <_ZN6String7reserveEj+0xe>
   d7e44:	6843      	ldr	r3, [r0, #4]
   d7e46:	428b      	cmp	r3, r1
   d7e48:	d207      	bcs.n	d7e5a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d7e4a:	4620      	mov	r0, r4
   d7e4c:	f7ff ffea 	bl	d7e24 <_ZN6String12changeBufferEj>
   d7e50:	b120      	cbz	r0, d7e5c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d7e52:	68a3      	ldr	r3, [r4, #8]
   d7e54:	b90b      	cbnz	r3, d7e5a <_ZN6String7reserveEj+0x1e>
   d7e56:	6822      	ldr	r2, [r4, #0]
   d7e58:	7013      	strb	r3, [r2, #0]
   d7e5a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d7e5c:	bd10      	pop	{r4, pc}

000d7e5e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7e5e:	b570      	push	{r4, r5, r6, lr}
   d7e60:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d7e62:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7e64:	4604      	mov	r4, r0
   d7e66:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d7e68:	f7ff ffe8 	bl	d7e3c <_ZN6String7reserveEj>
   d7e6c:	b918      	cbnz	r0, d7e76 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d7e6e:	4620      	mov	r0, r4
   d7e70:	f7ff ffcd 	bl	d7e0e <_ZN6String10invalidateEv>
		return *this;
   d7e74:	e009      	b.n	d7e8a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d7e76:	462a      	mov	r2, r5
   d7e78:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d7e7a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d7e7c:	6820      	ldr	r0, [r4, #0]
   d7e7e:	f001 ff9c 	bl	d9dba <memcpy>
	buffer[len] = 0;
   d7e82:	6822      	ldr	r2, [r4, #0]
   d7e84:	68a3      	ldr	r3, [r4, #8]
   d7e86:	2100      	movs	r1, #0
   d7e88:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d7e8a:	4620      	mov	r0, r4
   d7e8c:	bd70      	pop	{r4, r5, r6, pc}

000d7e8e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7e8e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7e90:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7e92:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7e94:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7e96:	6043      	str	r3, [r0, #4]
	len = 0;
   d7e98:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7e9a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d7e9c:	460d      	mov	r5, r1
   d7e9e:	b139      	cbz	r1, d7eb0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d7ea0:	4608      	mov	r0, r1
   d7ea2:	f001 ffff 	bl	d9ea4 <strlen>
   d7ea6:	4629      	mov	r1, r5
   d7ea8:	4602      	mov	r2, r0
   d7eaa:	4620      	mov	r0, r4
   d7eac:	f7ff ffd7 	bl	d7e5e <_ZN6String4copyEPKcj>
}
   d7eb0:	4620      	mov	r0, r4
   d7eb2:	bd38      	pop	{r3, r4, r5, pc}

000d7eb4 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d7eb4:	b538      	push	{r3, r4, r5, lr}
   d7eb6:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d7eb8:	460c      	mov	r4, r1
   d7eba:	b141      	cbz	r1, d7ece <_ZN6StringaSEPKc+0x1a>
   d7ebc:	4608      	mov	r0, r1
   d7ebe:	f001 fff1 	bl	d9ea4 <strlen>
   d7ec2:	4621      	mov	r1, r4
   d7ec4:	4602      	mov	r2, r0
   d7ec6:	4628      	mov	r0, r5
   d7ec8:	f7ff ffc9 	bl	d7e5e <_ZN6String4copyEPKcj>
   d7ecc:	e001      	b.n	d7ed2 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d7ece:	f7ff ff9e 	bl	d7e0e <_ZN6String10invalidateEv>

	return *this;
}
   d7ed2:	4628      	mov	r0, r5
   d7ed4:	bd38      	pop	{r3, r4, r5, pc}

000d7ed6 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
   d7ed6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d7ed8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7eda:	2300      	movs	r3, #0
   d7edc:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d7ede:	6063      	str	r3, [r4, #4]
	len = 0;
   d7ee0:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d7ee2:	7323      	strb	r3, [r4, #12]
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
   d7ee4:	4608      	mov	r0, r1
{
	init();
	char buf[9];
	utoa(value, buf, base);
   d7ee6:	a901      	add	r1, sp, #4
   d7ee8:	f7ff ff85 	bl	d7df6 <utoa>
	*this = buf;
   d7eec:	a901      	add	r1, sp, #4
   d7eee:	4620      	mov	r0, r4
   d7ef0:	f7ff ffe0 	bl	d7eb4 <_ZN6StringaSEPKc>
}
   d7ef4:	4620      	mov	r0, r4
   d7ef6:	b004      	add	sp, #16
   d7ef8:	bd10      	pop	{r4, pc}

000d7efa <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d7efa:	b510      	push	{r4, lr}
   d7efc:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7efe:	6800      	ldr	r0, [r0, #0]
   d7f00:	b108      	cbz	r0, d7f06 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d7f02:	f7ff fbc5 	bl	d7690 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d7f06:	4620      	mov	r0, r4
   d7f08:	bd10      	pop	{r4, pc}
	...

000d7f0c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7f0c:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7f0e:	4c06      	ldr	r4, [pc, #24]	; (d7f28 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7f10:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d7f12:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7f14:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d7f16:	f7ff fbb3 	bl	d7680 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d7f1a:	4620      	mov	r0, r4
   d7f1c:	4a03      	ldr	r2, [pc, #12]	; (d7f2c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d7f1e:	4904      	ldr	r1, [pc, #16]	; (d7f30 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d7f24:	f001 b8c2 	b.w	d90ac <__aeabi_atexit>
   d7f28:	2003e3a8 	.word	0x2003e3a8
   d7f2c:	2003dd9c 	.word	0x2003dd9c
   d7f30:	000d7efb 	.word	0x000d7efb

000d7f34 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7f36:	4606      	mov	r6, r0
   d7f38:	460d      	mov	r5, r1
   d7f3a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d7f3c:	2400      	movs	r4, #0
  while (size--) {
   d7f3e:	42bd      	cmp	r5, r7
   d7f40:	d00c      	beq.n	d7f5c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7f42:	6833      	ldr	r3, [r6, #0]
   d7f44:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7f48:	689b      	ldr	r3, [r3, #8]
   d7f4a:	4630      	mov	r0, r6
   d7f4c:	4798      	blx	r3
     if (chunk>=0)
   d7f4e:	2800      	cmp	r0, #0
   d7f50:	db01      	blt.n	d7f56 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7f52:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d7f54:	e7f3      	b.n	d7f3e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7f56:	2c00      	cmp	r4, #0
   d7f58:	bf08      	it	eq
   d7f5a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d7f5c:	4620      	mov	r0, r4
   d7f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7f60 <_ZN5Print5printEPKc>:
   d7f60:	b508      	push	{r3, lr}
   d7f62:	f7fe f85d 	bl	d6020 <_ZN5Print5writeEPKc>
   d7f66:	bd08      	pop	{r3, pc}

000d7f68 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d7f68:	6803      	ldr	r3, [r0, #0]
   d7f6a:	689b      	ldr	r3, [r3, #8]
   d7f6c:	4718      	bx	r3

000d7f6e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7f6e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7f70:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7f72:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7f74:	f7ff fff8 	bl	d7f68 <_ZN5Print5printEc>
  n += print('\n');
   d7f78:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d7f7a:	4604      	mov	r4, r0
  n += print('\n');
   d7f7c:	4628      	mov	r0, r5
   d7f7e:	f7ff fff3 	bl	d7f68 <_ZN5Print5printEc>
  return n;
}
   d7f82:	4420      	add	r0, r4
   d7f84:	bd38      	pop	{r3, r4, r5, pc}

000d7f86 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d7f86:	b538      	push	{r3, r4, r5, lr}
   d7f88:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7f8a:	f7fe f849 	bl	d6020 <_ZN5Print5writeEPKc>
   d7f8e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d7f90:	4628      	mov	r0, r5
   d7f92:	f7ff ffec 	bl	d7f6e <_ZN5Print7printlnEv>
  return n;
}
   d7f96:	4420      	add	r0, r4
   d7f98:	bd38      	pop	{r3, r4, r5, pc}

000d7f9a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7f9a:	b530      	push	{r4, r5, lr}
   d7f9c:	b08b      	sub	sp, #44	; 0x2c
   d7f9e:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7fa0:	2100      	movs	r1, #0
   d7fa2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7fa6:	2a01      	cmp	r2, #1
   d7fa8:	bf98      	it	ls
   d7faa:	220a      	movls	r2, #10
   d7fac:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d7fb0:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d7fb4:	fb05 3312 	mls	r3, r5, r2, r3
   d7fb8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7fbc:	2b09      	cmp	r3, #9
   d7fbe:	bf94      	ite	ls
   d7fc0:	3330      	addls	r3, #48	; 0x30
   d7fc2:	3337      	addhi	r3, #55	; 0x37
   d7fc4:	b2db      	uxtb	r3, r3
   d7fc6:	4621      	mov	r1, r4
   d7fc8:	f804 3901 	strb.w	r3, [r4], #-1
   d7fcc:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d7fce:	2d00      	cmp	r5, #0
   d7fd0:	d1ee      	bne.n	d7fb0 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d7fd2:	f7fe f825 	bl	d6020 <_ZN5Print5writeEPKc>
}
   d7fd6:	b00b      	add	sp, #44	; 0x2c
   d7fd8:	bd30      	pop	{r4, r5, pc}
	...

000d7fdc <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d7fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7fe0:	ec57 6b10 	vmov	r6, r7, d0
   d7fe4:	4682      	mov	sl, r0
   d7fe6:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d7fe8:	ee10 2a10 	vmov	r2, s0
   d7fec:	463b      	mov	r3, r7
   d7fee:	ee10 0a10 	vmov	r0, s0
   d7ff2:	4639      	mov	r1, r7
   d7ff4:	f001 fe16 	bl	d9c24 <__aeabi_dcmpun>
   d7ff8:	b108      	cbz	r0, d7ffe <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7ffa:	494e      	ldr	r1, [pc, #312]	; (d8134 <_ZN5Print10printFloatEdh+0x158>)
   d7ffc:	e012      	b.n	d8024 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d7ffe:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d8002:	f04f 32ff 	mov.w	r2, #4294967295
   d8006:	4b4c      	ldr	r3, [pc, #304]	; (d8138 <_ZN5Print10printFloatEdh+0x15c>)
   d8008:	4630      	mov	r0, r6
   d800a:	4649      	mov	r1, r9
   d800c:	f001 fe0a 	bl	d9c24 <__aeabi_dcmpun>
   d8010:	b968      	cbnz	r0, d802e <_ZN5Print10printFloatEdh+0x52>
   d8012:	f04f 32ff 	mov.w	r2, #4294967295
   d8016:	4b48      	ldr	r3, [pc, #288]	; (d8138 <_ZN5Print10printFloatEdh+0x15c>)
   d8018:	4630      	mov	r0, r6
   d801a:	4649      	mov	r1, r9
   d801c:	f001 fde4 	bl	d9be8 <__aeabi_dcmple>
   d8020:	b928      	cbnz	r0, d802e <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d8022:	4946      	ldr	r1, [pc, #280]	; (d813c <_ZN5Print10printFloatEdh+0x160>)
   d8024:	4650      	mov	r0, sl
   d8026:	f7fd fffb 	bl	d6020 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d802a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d802e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d8032:	4b43      	ldr	r3, [pc, #268]	; (d8140 <_ZN5Print10printFloatEdh+0x164>)
   d8034:	4630      	mov	r0, r6
   d8036:	4639      	mov	r1, r7
   d8038:	f001 fdea 	bl	d9c10 <__aeabi_dcmpgt>
   d803c:	b108      	cbz	r0, d8042 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d803e:	4941      	ldr	r1, [pc, #260]	; (d8144 <_ZN5Print10printFloatEdh+0x168>)
   d8040:	e7f0      	b.n	d8024 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d8042:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d8046:	4b40      	ldr	r3, [pc, #256]	; (d8148 <_ZN5Print10printFloatEdh+0x16c>)
   d8048:	4630      	mov	r0, r6
   d804a:	4639      	mov	r1, r7
   d804c:	f001 fdc2 	bl	d9bd4 <__aeabi_dcmplt>
   d8050:	2800      	cmp	r0, #0
   d8052:	d1f4      	bne.n	d803e <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d8054:	2200      	movs	r2, #0
   d8056:	2300      	movs	r3, #0
   d8058:	4630      	mov	r0, r6
   d805a:	4639      	mov	r1, r7
   d805c:	f001 fdba 	bl	d9bd4 <__aeabi_dcmplt>
   d8060:	b140      	cbz	r0, d8074 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d8062:	212d      	movs	r1, #45	; 0x2d
   d8064:	4650      	mov	r0, sl
   d8066:	f7ff ff7f 	bl	d7f68 <_ZN5Print5printEc>
     number = -number;
   d806a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d806e:	4604      	mov	r4, r0
     number = -number;
   d8070:	461f      	mov	r7, r3
   d8072:	e000      	b.n	d8076 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d8074:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d8076:	4935      	ldr	r1, [pc, #212]	; (d814c <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d8078:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d807c:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d807e:	fa5f f388 	uxtb.w	r3, r8
   d8082:	429d      	cmp	r5, r3
   d8084:	d906      	bls.n	d8094 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d8086:	2200      	movs	r2, #0
   d8088:	4b31      	ldr	r3, [pc, #196]	; (d8150 <_ZN5Print10printFloatEdh+0x174>)
   d808a:	f001 fc5b 	bl	d9944 <__aeabi_ddiv>
   d808e:	f108 0801 	add.w	r8, r8, #1
   d8092:	e7f4      	b.n	d807e <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d8094:	4632      	mov	r2, r6
   d8096:	463b      	mov	r3, r7
   d8098:	f001 f978 	bl	d938c <__adddf3>
   d809c:	460f      	mov	r7, r1
   d809e:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d80a0:	f001 fdfe 	bl	d9ca0 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d80a4:	220a      	movs	r2, #10
   d80a6:	4601      	mov	r1, r0
   d80a8:	4680      	mov	r8, r0
   d80aa:	4650      	mov	r0, sl
   d80ac:	f7ff ff75 	bl	d7f9a <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d80b0:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d80b2:	b3e5      	cbz	r5, d812e <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d80b4:	4640      	mov	r0, r8
   d80b6:	f001 faa5 	bl	d9604 <__aeabi_ui2d>
   d80ba:	4602      	mov	r2, r0
   d80bc:	460b      	mov	r3, r1
   d80be:	4630      	mov	r0, r6
   d80c0:	4639      	mov	r1, r7
   d80c2:	f001 f961 	bl	d9388 <__aeabi_dsub>
   d80c6:	4606      	mov	r6, r0
   d80c8:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d80ca:	4650      	mov	r0, sl
   d80cc:	4921      	ldr	r1, [pc, #132]	; (d8154 <_ZN5Print10printFloatEdh+0x178>)
   d80ce:	f7fd ffa7 	bl	d6020 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d80d2:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d80d4:	2200      	movs	r2, #0
   d80d6:	4b1e      	ldr	r3, [pc, #120]	; (d8150 <_ZN5Print10printFloatEdh+0x174>)
   d80d8:	4630      	mov	r0, r6
   d80da:	4639      	mov	r1, r7
   d80dc:	f001 fb08 	bl	d96f0 <__aeabi_dmul>
   d80e0:	4606      	mov	r6, r0
   d80e2:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d80e4:	f001 fdb4 	bl	d9c50 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d80e8:	f1b0 0900 	subs.w	r9, r0, #0
   d80ec:	da07      	bge.n	d80fe <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d80ee:	212d      	movs	r1, #45	; 0x2d
   d80f0:	4650      	mov	r0, sl
   d80f2:	f7ff ff39 	bl	d7f68 <_ZN5Print5printEc>
            val = -n;
   d80f6:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d80fa:	4680      	mov	r8, r0
   d80fc:	e002      	b.n	d8104 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d80fe:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d8100:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d8104:	220a      	movs	r2, #10
   d8106:	4650      	mov	r0, sl
   d8108:	f7ff ff47 	bl	d7f9a <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d810c:	4440      	add	r0, r8
   d810e:	4404      	add	r4, r0
    remainder -= toPrint;
   d8110:	4648      	mov	r0, r9
   d8112:	f001 fa87 	bl	d9624 <__aeabi_i2d>
   d8116:	4602      	mov	r2, r0
   d8118:	460b      	mov	r3, r1
   d811a:	4630      	mov	r0, r6
   d811c:	4639      	mov	r1, r7
   d811e:	f001 f933 	bl	d9388 <__aeabi_dsub>
   d8122:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d8124:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d8128:	4606      	mov	r6, r0
   d812a:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d812c:	d1d2      	bne.n	d80d4 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d812e:	4620      	mov	r0, r4
   d8130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8134:	000da1ac 	.word	0x000da1ac
   d8138:	7fefffff 	.word	0x7fefffff
   d813c:	000da1b6 	.word	0x000da1b6
   d8140:	41efffff 	.word	0x41efffff
   d8144:	000da1b0 	.word	0x000da1b0
   d8148:	c1efffff 	.word	0xc1efffff
   d814c:	3fe00000 	.word	0x3fe00000
   d8150:	40240000 	.word	0x40240000
   d8154:	000da1b4 	.word	0x000da1b4

000d8158 <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d8158:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d815a:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d815c:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d815e:	f7ff ff3d 	bl	d7fdc <_ZN5Print10printFloatEdh>
   d8162:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d8164:	4628      	mov	r0, r5
   d8166:	f7ff ff02 	bl	d7f6e <_ZN5Print7printlnEv>
  return n;
}
   d816a:	4420      	add	r0, r4
   d816c:	bd38      	pop	{r3, r4, r5, pc}

000d816e <_ZN5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d816e:	b538      	push	{r3, r4, r5, lr}
   d8170:	4604      	mov	r4, r0
    return println((double)num, digits);
   d8172:	ee10 0a10 	vmov	r0, s0
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d8176:	460d      	mov	r5, r1
    return println((double)num, digits);
   d8178:	f001 fa66 	bl	d9648 <__aeabi_f2d>
   d817c:	ec41 0b10 	vmov	d0, r0, r1
   d8180:	4629      	mov	r1, r5
   d8182:	4620      	mov	r0, r4
}
   d8184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return n;
}

size_t Print::println(float num, int digits)
{
    return println((double)num, digits);
   d8188:	f7ff bfe6 	b.w	d8158 <_ZN5Print7printlnEdi>

000d818c <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d818c:	b40c      	push	{r2, r3}
   d818e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8192:	b087      	sub	sp, #28
   d8194:	af00      	add	r7, sp, #0
   d8196:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d819a:	4605      	mov	r5, r0
   d819c:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d81a0:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d81a2:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d81a4:	4623      	mov	r3, r4
   d81a6:	464a      	mov	r2, r9
   d81a8:	2114      	movs	r1, #20
   d81aa:	1d38      	adds	r0, r7, #4
   d81ac:	f7ff fc3c 	bl	d7a28 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d81b0:	2813      	cmp	r0, #19
   d81b2:	d805      	bhi.n	d81c0 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d81b4:	1d39      	adds	r1, r7, #4
   d81b6:	4628      	mov	r0, r5
   d81b8:	f7fd ff32 	bl	d6020 <_ZN5Print5writeEPKc>
   d81bc:	4604      	mov	r4, r0
   d81be:	e013      	b.n	d81e8 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d81c0:	f100 0308 	add.w	r3, r0, #8
   d81c4:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d81c8:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d81ca:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d81ce:	1c41      	adds	r1, r0, #1
   d81d0:	4623      	mov	r3, r4
   d81d2:	464a      	mov	r2, r9
   d81d4:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d81d6:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d81d8:	f7ff fc26 	bl	d7a28 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d81dc:	4669      	mov	r1, sp
   d81de:	4628      	mov	r0, r5
   d81e0:	f7fd ff1e 	bl	d6020 <_ZN5Print5writeEPKc>
   d81e4:	4604      	mov	r4, r0
   d81e6:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d81e8:	b11e      	cbz	r6, d81f2 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d81ea:	4628      	mov	r0, r5
   d81ec:	f7ff febf 	bl	d7f6e <_ZN5Print7printlnEv>
   d81f0:	4404      	add	r4, r0
    return n;
}
   d81f2:	4620      	mov	r0, r4
   d81f4:	371c      	adds	r7, #28
   d81f6:	46bd      	mov	sp, r7
   d81f8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d81fc:	b002      	add	sp, #8
   d81fe:	4770      	bx	lr

000d8200 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d8200:	4b01      	ldr	r3, [pc, #4]	; (d8208 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d8202:	4a02      	ldr	r2, [pc, #8]	; (d820c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d8204:	601a      	str	r2, [r3, #0]
   d8206:	4770      	bx	lr
   d8208:	2003e3ac 	.word	0x2003e3ac
   d820c:	000da22d 	.word	0x000da22d

000d8210 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d8210:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8212:	2000      	movs	r0, #0
   d8214:	f7ff fbd8 	bl	d79c8 <spark_sync_time_pending>
   d8218:	b128      	cbz	r0, d8226 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d821a:	f7ff fbc5 	bl	d79a8 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d821e:	f080 0001 	eor.w	r0, r0, #1
   d8222:	b2c0      	uxtb	r0, r0
   d8224:	bd08      	pop	{r3, pc}
   d8226:	2001      	movs	r0, #1
    }
   d8228:	bd08      	pop	{r3, pc}

000d822a <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d822a:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d822c:	2000      	movs	r0, #0
   d822e:	f7ff f9d7 	bl	d75e0 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d8232:	4604      	mov	r4, r0
   d8234:	b968      	cbnz	r0, d8252 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d8236:	f7ff fb23 	bl	d7880 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d823a:	2801      	cmp	r0, #1
   d823c:	d10b      	bne.n	d8256 <_ZN9TimeClass7isValidEv+0x2c>
   d823e:	4620      	mov	r0, r4
   d8240:	f7ff fb3e 	bl	d78c0 <system_thread_get_state>
   d8244:	b938      	cbnz	r0, d8256 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d8246:	f7ff ffe3 	bl	d8210 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d824a:	b930      	cbnz	r0, d825a <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d824c:	f7ff fba4 	bl	d7998 <spark_process>
   d8250:	e7f9      	b.n	d8246 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d8252:	2001      	movs	r0, #1
   d8254:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d8256:	2000      	movs	r0, #0
   d8258:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d825a:	f7ff ffd9 	bl	d8210 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d825e:	2000      	movs	r0, #0
   d8260:	f7ff f9be 	bl	d75e0 <HAL_RTC_Time_Is_Valid>
   d8264:	3000      	adds	r0, #0
   d8266:	bf18      	it	ne
   d8268:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d826a:	bd10      	pop	{r4, pc}

000d826c <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d826c:	b508      	push	{r3, lr}
    (void)isValid();
   d826e:	f7ff ffdc 	bl	d822a <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d8272:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d8276:	f7ff b993 	b.w	d75a0 <HAL_RTC_Get_UnixTime>
	...

000d827c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d827c:	4b02      	ldr	r3, [pc, #8]	; (d8288 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d827e:	681a      	ldr	r2, [r3, #0]
   d8280:	4b02      	ldr	r3, [pc, #8]	; (d828c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d8282:	601a      	str	r2, [r3, #0]
   d8284:	4770      	bx	lr
   d8286:	bf00      	nop
   d8288:	2003dd34 	.word	0x2003dd34
   d828c:	2003e3b0 	.word	0x2003e3b0

000d8290 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d8290:	2100      	movs	r1, #0
   d8292:	f7ff bb05 	b.w	d78a0 <system_delay_ms>

000d8296 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d8296:	b510      	push	{r4, lr}
   d8298:	4604      	mov	r4, r0
   d829a:	f7fc fab1 	bl	d4800 <_ZNSt14_Function_baseD1Ev>
   d829e:	4620      	mov	r0, r4
   d82a0:	bd10      	pop	{r4, pc}
	...

000d82a4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d82a4:	4803      	ldr	r0, [pc, #12]	; (d82b4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d82a6:	4a04      	ldr	r2, [pc, #16]	; (d82b8 <_GLOBAL__sub_I_RGB+0x14>)
   d82a8:	4904      	ldr	r1, [pc, #16]	; (d82bc <_GLOBAL__sub_I_RGB+0x18>)
   d82aa:	2300      	movs	r3, #0
   d82ac:	6083      	str	r3, [r0, #8]
   d82ae:	f000 befd 	b.w	d90ac <__aeabi_atexit>
   d82b2:	bf00      	nop
   d82b4:	2003e3b4 	.word	0x2003e3b4
   d82b8:	2003dd9c 	.word	0x2003dd9c
   d82bc:	000d8297 	.word	0x000d8297

000d82c0 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d82c0:	7d00      	ldrb	r0, [r0, #20]
   d82c2:	4770      	bx	lr

000d82c4 <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d82c4:	7d03      	ldrb	r3, [r0, #20]
   d82c6:	b11b      	cbz	r3, d82d0 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d82c8:	6983      	ldr	r3, [r0, #24]
   d82ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d82ce:	d102      	bne.n	d82d6 <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d82d0:	ed9f 0a05 	vldr	s0, [pc, #20]	; d82e8 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d82d4:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d82d6:	ee07 3a90 	vmov	s15, r3
   d82da:	ed9f 7a04 	vldr	s14, [pc, #16]	; d82ec <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d82de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d82e2:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d82e6:	4770      	bx	lr
   d82e8:	00000000 	.word	0x00000000
   d82ec:	42c80000 	.word	0x42c80000

000d82f0 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d82f0:	7d03      	ldrb	r3, [r0, #20]
   d82f2:	b11b      	cbz	r3, d82fc <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d82f4:	6a03      	ldr	r3, [r0, #32]
   d82f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d82fa:	d102      	bne.n	d8302 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d82fc:	ed9f 0a05 	vldr	s0, [pc, #20]	; d8314 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d8300:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d8302:	ee07 3a90 	vmov	s15, r3
   d8306:	ed9f 7a04 	vldr	s14, [pc, #16]	; d8318 <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d830a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d830e:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d8312:	4770      	bx	lr
   d8314:	00000000 	.word	0x00000000
   d8318:	42c80000 	.word	0x42c80000

000d831c <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d831c:	7d03      	ldrb	r3, [r0, #20]
   d831e:	b17b      	cbz	r3, d8340 <_ZNK14CellularSignal10getQualityEv+0x24>
   d8320:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d8322:	2b00      	cmp	r3, #0
   d8324:	db0c      	blt.n	d8340 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d8326:	ee07 3a90 	vmov	s15, r3
   d832a:	eddf 6a07 	vldr	s13, [pc, #28]	; d8348 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d832e:	ed9f 0a07 	vldr	s0, [pc, #28]	; d834c <_ZNK14CellularSignal10getQualityEv+0x30>
   d8332:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d8336:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d833a:	ee27 0a80 	vmul.f32	s0, s15, s0
   d833e:	4770      	bx	lr
    }

    return -1.0f;
   d8340:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d8344:	4770      	bx	lr
   d8346:	bf00      	nop
   d8348:	477fff00 	.word	0x477fff00
   d834c:	42c80000 	.word	0x42c80000

000d8350 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d8350:	7d03      	ldrb	r3, [r0, #20]
   d8352:	b17b      	cbz	r3, d8374 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d8354:	69c3      	ldr	r3, [r0, #28]
   d8356:	2b00      	cmp	r3, #0
   d8358:	db0c      	blt.n	d8374 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d835a:	ee07 3a90 	vmov	s15, r3
   d835e:	eddf 6a07 	vldr	s13, [pc, #28]	; d837c <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d8362:	ed9f 0a07 	vldr	s0, [pc, #28]	; d8380 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d8366:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d836a:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d836e:	ee27 0a80 	vmul.f32	s0, s15, s0
   d8372:	4770      	bx	lr
    }

    return -1.0f;
   d8374:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d8378:	4770      	bx	lr
   d837a:	bf00      	nop
   d837c:	477fff00 	.word	0x477fff00
   d8380:	42c80000 	.word	0x42c80000

000d8384 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d8384:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d8386:	460d      	mov	r5, r1
   d8388:	f100 0410 	add.w	r4, r0, #16
   d838c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d838e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8390:	e895 0003 	ldmia.w	r5, {r0, r1}
   d8394:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d8398:	2001      	movs	r0, #1
   d839a:	bd30      	pop	{r4, r5, pc}

000d839c <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d839c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d83a0:	4607      	mov	r7, r0
   d83a2:	460c      	mov	r4, r1
{
    if (base == 0) {
   d83a4:	4615      	mov	r5, r2
   d83a6:	b92a      	cbnz	r2, d83b4 <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d83a8:	6803      	ldr	r3, [r0, #0]
   d83aa:	b2c9      	uxtb	r1, r1
   d83ac:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d83ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d83b2:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d83b4:	2900      	cmp	r1, #0
   d83b6:	da07      	bge.n	d83c8 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d83b8:	2a0a      	cmp	r2, #10
   d83ba:	d105      	bne.n	d83c8 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d83bc:	212d      	movs	r1, #45	; 0x2d
   d83be:	f7ff fdd3 	bl	d7f68 <_ZN5Print5printEc>
            val = -n;
   d83c2:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d83c4:	4606      	mov	r6, r0
            val = -n;
   d83c6:	e001      	b.n	d83cc <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d83c8:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d83ca:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d83cc:	b2ea      	uxtb	r2, r5
   d83ce:	4638      	mov	r0, r7
   d83d0:	f7ff fde3 	bl	d7f9a <_ZN5Print11printNumberEmh>
    }
}
   d83d4:	4430      	add	r0, r6
   d83d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d83da <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
   d83da:	b570      	push	{r4, r5, r6, lr}
   d83dc:	460d      	mov	r5, r1
   d83de:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d83e0:	220a      	movs	r2, #10
   d83e2:	6881      	ldr	r1, [r0, #8]
   d83e4:	4628      	mov	r0, r5
   d83e6:	f7ff ffd9 	bl	d839c <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
   d83ea:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d83ec:	4604      	mov	r4, r0
    n += p.print(',');
   d83ee:	4628      	mov	r0, r5
   d83f0:	f7ff fdba 	bl	d7f68 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d83f4:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d83f6:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d83f8:	68f1      	ldr	r1, [r6, #12]
   d83fa:	4628      	mov	r0, r5
   d83fc:	f7ff ffce 	bl	d839c <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
   d8400:	4420      	add	r0, r4
   d8402:	bd70      	pop	{r4, r5, r6, pc}

000d8404 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d8404:	f1a0 0004 	sub.w	r0, r0, #4
   d8408:	f7ff bfe7 	b.w	d83da <_ZNK14CellularSignal7printToER5Print>

000d840c <_ZN6detail9_getVCellEhh>:
namespace detail {
	// Converts VCELL_REGISTER reading to Battery Voltage
	float _getVCell(byte MSB, byte LSB) {
		// VCELL = 12-bit value, 1.25mV (1V/800) per bit
		float value = (float)((MSB << 4) | (LSB >> 4));
		return value / 800.0;
   d840c:	0909      	lsrs	r1, r1, #4
   d840e:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
   d8412:	ee07 0a90 	vmov	s15, r0
   d8416:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
	}
   d841a:	eddf 7a02 	vldr	s15, [pc, #8]	; d8424 <_ZN6detail9_getVCellEhh+0x18>
   d841e:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d8422:	4770      	bx	lr
   d8424:	44480000 	.word	0x44480000

000d8428 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d8428:	6800      	ldr	r0, [r0, #0]
   d842a:	f000 bbb8 	b.w	d8b9e <_ZN7TwoWire4lockEv>

000d842e <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d842e:	b510      	push	{r4, lr}
   d8430:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d8432:	6001      	str	r1, [r0, #0]
   d8434:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d8436:	b10a      	cbz	r2, d843c <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d8438:	f7ff fff6 	bl	d8428 <_ZN9FuelGauge4lockEv>
    }
}
   d843c:	4620      	mov	r0, r4
   d843e:	bd10      	pop	{r4, pc}

000d8440 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d8440:	b538      	push	{r3, r4, r5, lr}
   d8442:	4604      	mov	r4, r0
   d8444:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d8446:	f000 fe0b 	bl	d9060 <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d844a:	462a      	mov	r2, r5
   d844c:	4601      	mov	r1, r0
   d844e:	4620      	mov	r0, r4
   d8450:	f7ff ffed 	bl	d842e <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d8454:	4620      	mov	r0, r4
   d8456:	bd38      	pop	{r3, r4, r5, pc}

000d8458 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d8458:	6800      	ldr	r0, [r0, #0]
   d845a:	f000 bba9 	b.w	d8bb0 <_ZN7TwoWire6unlockEv>

000d845e <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d845e:	b510      	push	{r4, lr}
{
    if (lock_) {
   d8460:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d8462:	4604      	mov	r4, r0
{
    if (lock_) {
   d8464:	b10b      	cbz	r3, d846a <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d8466:	f7ff fff7 	bl	d8458 <_ZN9FuelGauge6unlockEv>
    }
}
   d846a:	4620      	mov	r0, r4
   d846c:	bd10      	pop	{r4, pc}

000d846e <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d846e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8470:	4604      	mov	r4, r0
   d8472:	4616      	mov	r6, r2
   d8474:	461d      	mov	r5, r3
   d8476:	460f      	mov	r7, r1
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d8478:	f7ff ffd6 	bl	d8428 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   d847c:	6820      	ldr	r0, [r4, #0]
   d847e:	2136      	movs	r1, #54	; 0x36
   d8480:	f000 fb82 	bl	d8b88 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
   d8484:	6820      	ldr	r0, [r4, #0]
   d8486:	6803      	ldr	r3, [r0, #0]
   d8488:	4639      	mov	r1, r7
   d848a:	689b      	ldr	r3, [r3, #8]
   d848c:	4798      	blx	r3
    i2c_.endTransmission(true);
   d848e:	2101      	movs	r1, #1
   d8490:	6820      	ldr	r0, [r4, #0]
   d8492:	f000 fb7c 	bl	d8b8e <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
   d8496:	2202      	movs	r2, #2
   d8498:	2136      	movs	r1, #54	; 0x36
   d849a:	2301      	movs	r3, #1
   d849c:	6820      	ldr	r0, [r4, #0]
   d849e:	f000 fb5d 	bl	d8b5c <_ZN7TwoWire11requestFromEhjh>
    MSB = i2c_.read();
   d84a2:	6820      	ldr	r0, [r4, #0]
   d84a4:	6803      	ldr	r3, [r0, #0]
   d84a6:	695b      	ldr	r3, [r3, #20]
   d84a8:	4798      	blx	r3
   d84aa:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
   d84ac:	6820      	ldr	r0, [r4, #0]
   d84ae:	6803      	ldr	r3, [r0, #0]
   d84b0:	695b      	ldr	r3, [r3, #20]
   d84b2:	4798      	blx	r3
   d84b4:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d84b6:	4620      	mov	r0, r4
}
   d84b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d84bc:	f7ff bfcc 	b.w	d8458 <_ZN9FuelGauge6unlockEv>

000d84c0 <_ZN9FuelGauge8getVCellEv>:
		return MSB + decimal;
	}
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {
   d84c0:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d84c2:	ab02      	add	r3, sp, #8
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {

	byte MSB = 0;
   d84c4:	2200      	movs	r2, #0
   d84c6:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;
   d84ca:	f803 2d01 	strb.w	r2, [r3, #-1]!

	readRegister(VCELL_REGISTER, MSB, LSB);
   d84ce:	2102      	movs	r1, #2
   d84d0:	f10d 0206 	add.w	r2, sp, #6
   d84d4:	f7ff ffcb 	bl	d846e <_ZN9FuelGauge12readRegisterEhRhS0_>
	return detail::_getVCell(MSB, LSB);
   d84d8:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d84dc:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   d84e0:	b003      	add	sp, #12
   d84e2:	f85d eb04 	ldr.w	lr, [sp], #4

	byte MSB = 0;
	byte LSB = 0;

	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
   d84e6:	f7ff bf91 	b.w	d840c <_ZN6detail9_getVCellEhh>
	...

000d84ec <_ZN9FuelGauge6getSoCEv>:
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
   d84ec:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d84ee:	ab02      	add	r3, sp, #8
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d84f0:	2200      	movs	r2, #0
	byte LSB = 0;
   d84f2:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d84f6:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
   d84fa:	2104      	movs	r1, #4
   d84fc:	f10d 0206 	add.w	r2, sp, #6
   d8500:	f7ff ffb5 	bl	d846e <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d8504:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d8508:	f001 f88c 	bl	d9624 <__aeabi_i2d>
   d850c:	2200      	movs	r2, #0
   d850e:	4b09      	ldr	r3, [pc, #36]	; (d8534 <_ZN9FuelGauge6getSoCEv+0x48>)
   d8510:	f001 f8ee 	bl	d96f0 <__aeabi_dmul>
   d8514:	f001 fbe4 	bl	d9ce0 <__aeabi_d2f>
   d8518:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d851c:	ee00 3a10 	vmov	s0, r3
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d8520:	ee07 0a90 	vmov	s15, r0
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d8524:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d8528:	ee37 0a80 	vadd.f32	s0, s15, s0
   d852c:	b003      	add	sp, #12
   d852e:	f85d fb04 	ldr.w	pc, [sp], #4
   d8532:	bf00      	nop
   d8534:	3f700000 	.word	0x3f700000

000d8538 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d8538:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d853a:	4b0c      	ldr	r3, [pc, #48]	; (d856c <serialEventRun+0x34>)
   d853c:	b133      	cbz	r3, d854c <serialEventRun+0x14>
   d853e:	f000 f957 	bl	d87f0 <_Z16_fetch_usbserialv>
   d8542:	6803      	ldr	r3, [r0, #0]
   d8544:	691b      	ldr	r3, [r3, #16]
   d8546:	4798      	blx	r3
   d8548:	2800      	cmp	r0, #0
   d854a:	dc09      	bgt.n	d8560 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d854c:	4b08      	ldr	r3, [pc, #32]	; (d8570 <serialEventRun+0x38>)
   d854e:	b163      	cbz	r3, d856a <serialEventRun+0x32>
   d8550:	f000 fa84 	bl	d8a5c <_Z22__fetch_global_Serial1v>
   d8554:	6803      	ldr	r3, [r0, #0]
   d8556:	691b      	ldr	r3, [r3, #16]
   d8558:	4798      	blx	r3
   d855a:	2800      	cmp	r0, #0
   d855c:	dc03      	bgt.n	d8566 <serialEventRun+0x2e>
   d855e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d8560:	f3af 8000 	nop.w
   d8564:	e7f2      	b.n	d854c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d8566:	f3af 8000 	nop.w
   d856a:	bd08      	pop	{r3, pc}
	...

000d8574 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d8574:	b508      	push	{r3, lr}
	serialEventRun();
   d8576:	f7ff ffdf 	bl	d8538 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d857a:	f7ff f809 	bl	d7590 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d857e:	4b01      	ldr	r3, [pc, #4]	; (d8584 <_post_loop+0x10>)
   d8580:	6018      	str	r0, [r3, #0]
   d8582:	bd08      	pop	{r3, pc}
   d8584:	2003e710 	.word	0x2003e710

000d8588 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8588:	4802      	ldr	r0, [pc, #8]	; (d8594 <_Z33system_initialize_user_backup_ramv+0xc>)
   d858a:	4a03      	ldr	r2, [pc, #12]	; (d8598 <_Z33system_initialize_user_backup_ramv+0x10>)
   d858c:	4903      	ldr	r1, [pc, #12]	; (d859c <_Z33system_initialize_user_backup_ramv+0x14>)
   d858e:	1a12      	subs	r2, r2, r0
   d8590:	f001 bc13 	b.w	d9dba <memcpy>
   d8594:	2003f400 	.word	0x2003f400
   d8598:	2003f404 	.word	0x2003f404
   d859c:	000da540 	.word	0x000da540

000d85a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d85a0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d85a2:	2300      	movs	r3, #0
   d85a4:	9300      	str	r3, [sp, #0]
   d85a6:	461a      	mov	r2, r3
   d85a8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d85ac:	f7ff f99a 	bl	d78e4 <system_ctrl_set_result>
}
   d85b0:	b003      	add	sp, #12
   d85b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d85b8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d85b8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d85ba:	8843      	ldrh	r3, [r0, #2]
   d85bc:	2b0a      	cmp	r3, #10
   d85be:	d008      	beq.n	d85d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d85c0:	2b50      	cmp	r3, #80	; 0x50
   d85c2:	d109      	bne.n	d85d8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d85c4:	4b09      	ldr	r3, [pc, #36]	; (d85ec <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d85c6:	681b      	ldr	r3, [r3, #0]
   d85c8:	b13b      	cbz	r3, d85da <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d85ca:	b003      	add	sp, #12
   d85cc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d85d0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d85d2:	f7ff ffe5 	bl	d85a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d85d6:	e006      	b.n	d85e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d85d8:	2300      	movs	r3, #0
   d85da:	9300      	str	r3, [sp, #0]
   d85dc:	461a      	mov	r2, r3
   d85de:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d85e2:	f7ff f97f 	bl	d78e4 <system_ctrl_set_result>
        break;
    }
}
   d85e6:	b003      	add	sp, #12
   d85e8:	f85d fb04 	ldr.w	pc, [sp], #4
   d85ec:	2003e3c4 	.word	0x2003e3c4

000d85f0 <module_user_init_hook>:

void module_user_init_hook()
{
   d85f0:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d85f2:	4c10      	ldr	r4, [pc, #64]	; (d8634 <module_user_init_hook+0x44>)
   d85f4:	4d10      	ldr	r5, [pc, #64]	; (d8638 <module_user_init_hook+0x48>)
   d85f6:	6823      	ldr	r3, [r4, #0]
   d85f8:	42ab      	cmp	r3, r5
   d85fa:	4b10      	ldr	r3, [pc, #64]	; (d863c <module_user_init_hook+0x4c>)
   d85fc:	bf0c      	ite	eq
   d85fe:	2201      	moveq	r2, #1
   d8600:	2200      	movne	r2, #0
   d8602:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d8604:	d002      	beq.n	d860c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d8606:	f7ff ffbf 	bl	d8588 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d860a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d860c:	f7fe ffb0 	bl	d7570 <HAL_RNG_GetRandomNumber>
   d8610:	4604      	mov	r4, r0
    srand(seed);
   d8612:	f001 fbe5 	bl	d9de0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d8616:	4b0a      	ldr	r3, [pc, #40]	; (d8640 <module_user_init_hook+0x50>)
   d8618:	b113      	cbz	r3, d8620 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d861a:	4620      	mov	r0, r4
   d861c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d8620:	2100      	movs	r1, #0
   d8622:	4807      	ldr	r0, [pc, #28]	; (d8640 <module_user_init_hook+0x50>)
   d8624:	f7ff f9d8 	bl	d79d8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8628:	2100      	movs	r1, #0
   d862a:	4806      	ldr	r0, [pc, #24]	; (d8644 <module_user_init_hook+0x54>)
}
   d862c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8630:	f7ff b94e 	b.w	d78d0 <system_ctrl_set_app_request_handler>
   d8634:	2003f400 	.word	0x2003f400
   d8638:	9a271c1e 	.word	0x9a271c1e
   d863c:	2003e3c8 	.word	0x2003e3c8
   d8640:	00000000 	.word	0x00000000
   d8644:	000d85b9 	.word	0x000d85b9

000d8648 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d8648:	4770      	bx	lr

000d864a <_ZN9IPAddressD0Ev>:
   d864a:	b510      	push	{r4, lr}
   d864c:	2118      	movs	r1, #24
   d864e:	4604      	mov	r4, r0
   d8650:	f000 fd3a 	bl	d90c8 <_ZdlPvj>
   d8654:	4620      	mov	r0, r4
   d8656:	bd10      	pop	{r4, pc}

000d8658 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8658:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d865a:	7d03      	ldrb	r3, [r0, #20]
   d865c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d865e:	b08d      	sub	sp, #52	; 0x34
   d8660:	460e      	mov	r6, r1
   d8662:	f100 0704 	add.w	r7, r0, #4
   d8666:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d866a:	d002      	beq.n	d8672 <_ZNK9IPAddress7printToER5Print+0x1a>
   d866c:	f100 0508 	add.w	r5, r0, #8
   d8670:	e018      	b.n	d86a4 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d8672:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8674:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d8676:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d867a:	232f      	movs	r3, #47	; 0x2f
   d867c:	462a      	mov	r2, r5
   d867e:	200a      	movs	r0, #10
   d8680:	f7ff f816 	bl	d76b0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d8684:	4628      	mov	r0, r5
   d8686:	f001 fc0d 	bl	d9ea4 <strlen>
   d868a:	6833      	ldr	r3, [r6, #0]
   d868c:	4602      	mov	r2, r0
   d868e:	68db      	ldr	r3, [r3, #12]
   d8690:	4629      	mov	r1, r5
   d8692:	4630      	mov	r0, r6
   d8694:	4798      	blx	r3
   d8696:	e00f      	b.n	d86b8 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d8698:	b124      	cbz	r4, d86a4 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d869a:	212e      	movs	r1, #46	; 0x2e
   d869c:	4630      	mov	r0, r6
   d869e:	f7ff fc63 	bl	d7f68 <_ZN5Print5printEc>
   d86a2:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d86a4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d86a8:	220a      	movs	r2, #10
   d86aa:	4630      	mov	r0, r6
   d86ac:	f7ff fc75 	bl	d7f9a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d86b0:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d86b2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d86b4:	d1f0      	bne.n	d8698 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d86b6:	4620      	mov	r0, r4
    }
    return n;
}
   d86b8:	b00d      	add	sp, #52	; 0x34
   d86ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d86bc <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d86bc:	b510      	push	{r4, lr}
   d86be:	4b05      	ldr	r3, [pc, #20]	; (d86d4 <_ZN9IPAddressC1Ev+0x18>)
   d86c0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d86c2:	2211      	movs	r2, #17
   d86c4:	f840 3b04 	str.w	r3, [r0], #4
   d86c8:	2100      	movs	r1, #0
   d86ca:	f001 fb81 	bl	d9dd0 <memset>
{
    clear();
}
   d86ce:	4620      	mov	r0, r4
   d86d0:	bd10      	pop	{r4, pc}
   d86d2:	bf00      	nop
   d86d4:	000da300 	.word	0x000da300

000d86d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d86d8:	4603      	mov	r3, r0
   d86da:	4a07      	ldr	r2, [pc, #28]	; (d86f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d86dc:	b510      	push	{r4, lr}
   d86de:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d86e2:	f101 0210 	add.w	r2, r1, #16
   d86e6:	f851 4b04 	ldr.w	r4, [r1], #4
   d86ea:	f843 4b04 	str.w	r4, [r3], #4
   d86ee:	4291      	cmp	r1, r2
   d86f0:	d1f9      	bne.n	d86e6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d86f2:	780a      	ldrb	r2, [r1, #0]
   d86f4:	701a      	strb	r2, [r3, #0]
}
   d86f6:	bd10      	pop	{r4, pc}
   d86f8:	000da300 	.word	0x000da300

000d86fc <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d86fc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d86fe:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d8702:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d8706:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d870a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d870e:	2304      	movs	r3, #4
   d8710:	6041      	str	r1, [r0, #4]
   d8712:	7503      	strb	r3, [r0, #20]
   d8714:	bd10      	pop	{r4, pc}

000d8716 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d8716:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d8718:	780d      	ldrb	r5, [r1, #0]
   d871a:	788b      	ldrb	r3, [r1, #2]
   d871c:	784a      	ldrb	r2, [r1, #1]
   d871e:	78c9      	ldrb	r1, [r1, #3]
   d8720:	9100      	str	r1, [sp, #0]
   d8722:	4629      	mov	r1, r5
   d8724:	f7ff ffea 	bl	d86fc <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d8728:	b003      	add	sp, #12
   d872a:	bd30      	pop	{r4, r5, pc}

000d872c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d872c:	7441      	strb	r1, [r0, #17]
   d872e:	4770      	bx	lr

000d8730 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d8730:	4770      	bx	lr

000d8732 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d8732:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d8734:	2100      	movs	r1, #0
   d8736:	7c00      	ldrb	r0, [r0, #16]
   d8738:	f7ff f88a 	bl	d7850 <HAL_USB_USART_Receive_Data>
}
   d873c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8740:	bf28      	it	cs
   d8742:	f04f 30ff 	movcs.w	r0, #4294967295
   d8746:	bd08      	pop	{r3, pc}

000d8748 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d8748:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d874a:	2101      	movs	r1, #1
   d874c:	7c00      	ldrb	r0, [r0, #16]
   d874e:	f7ff f87f 	bl	d7850 <HAL_USB_USART_Receive_Data>
}
   d8752:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8756:	bf28      	it	cs
   d8758:	f04f 30ff 	movcs.w	r0, #4294967295
   d875c:	bd08      	pop	{r3, pc}

000d875e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d875e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d8760:	7c00      	ldrb	r0, [r0, #16]
   d8762:	f7ff f86d 	bl	d7840 <HAL_USB_USART_Available_Data_For_Write>
}
   d8766:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d876a:	bd08      	pop	{r3, pc}

000d876c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d876c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d876e:	7c00      	ldrb	r0, [r0, #16]
   d8770:	f7ff f85e 	bl	d7830 <HAL_USB_USART_Available_Data>
}
   d8774:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8778:	bd08      	pop	{r3, pc}

000d877a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d877a:	7c00      	ldrb	r0, [r0, #16]
   d877c:	f7ff b878 	b.w	d7870 <HAL_USB_USART_Flush_Data>

000d8780 <_ZN9USBSerialD0Ev>:
   d8780:	b510      	push	{r4, lr}
   d8782:	2114      	movs	r1, #20
   d8784:	4604      	mov	r4, r0
   d8786:	f000 fc9f 	bl	d90c8 <_ZdlPvj>
   d878a:	4620      	mov	r0, r4
   d878c:	bd10      	pop	{r4, pc}

000d878e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d878e:	b538      	push	{r3, r4, r5, lr}
   d8790:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8792:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d8794:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8796:	f7ff f853 	bl	d7840 <HAL_USB_USART_Available_Data_For_Write>
   d879a:	2800      	cmp	r0, #0
   d879c:	dc01      	bgt.n	d87a2 <_ZN9USBSerial5writeEh+0x14>
   d879e:	7c60      	ldrb	r0, [r4, #17]
   d87a0:	b128      	cbz	r0, d87ae <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d87a2:	4629      	mov	r1, r5
   d87a4:	7c20      	ldrb	r0, [r4, #16]
   d87a6:	f7ff f85b 	bl	d7860 <HAL_USB_USART_Send_Data>
   d87aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d87ae:	bd38      	pop	{r3, r4, r5, pc}

000d87b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d87b0:	b510      	push	{r4, lr}
   d87b2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d87b4:	2300      	movs	r3, #0
   d87b6:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d87b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d87bc:	60a3      	str	r3, [r4, #8]
   d87be:	4b05      	ldr	r3, [pc, #20]	; (d87d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d87c0:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d87c2:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d87c4:	4608      	mov	r0, r1
{
  _serial = serial;
   d87c6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d87c8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d87ca:	4611      	mov	r1, r2
   d87cc:	f7ff f820 	bl	d7810 <HAL_USB_USART_Init>
}
   d87d0:	4620      	mov	r0, r4
   d87d2:	bd10      	pop	{r4, pc}
   d87d4:	000da314 	.word	0x000da314

000d87d8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d87d8:	2200      	movs	r2, #0
   d87da:	7c00      	ldrb	r0, [r0, #16]
   d87dc:	f7ff b820 	b.w	d7820 <HAL_USB_USART_Begin>

000d87e0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d87e0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d87e2:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d87e4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d87e6:	2100      	movs	r1, #0
   d87e8:	f001 faf2 	bl	d9dd0 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d87ec:	4620      	mov	r0, r4
   d87ee:	bd10      	pop	{r4, pc}

000d87f0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d87f0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d87f2:	4d0e      	ldr	r5, [pc, #56]	; (d882c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d87f4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d87f6:	a801      	add	r0, sp, #4
   d87f8:	f7ff fff2 	bl	d87e0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d87fc:	6829      	ldr	r1, [r5, #0]
   d87fe:	f011 0401 	ands.w	r4, r1, #1
   d8802:	d110      	bne.n	d8826 <_Z16_fetch_usbserialv+0x36>
   d8804:	4628      	mov	r0, r5
   d8806:	f7fb fc4a 	bl	d409e <__cxa_guard_acquire>
   d880a:	b160      	cbz	r0, d8826 <_Z16_fetch_usbserialv+0x36>
   d880c:	aa01      	add	r2, sp, #4
   d880e:	4621      	mov	r1, r4
   d8810:	4807      	ldr	r0, [pc, #28]	; (d8830 <_Z16_fetch_usbserialv+0x40>)
   d8812:	f7ff ffcd 	bl	d87b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d8816:	4628      	mov	r0, r5
   d8818:	f7fb fc46 	bl	d40a8 <__cxa_guard_release>
   d881c:	4a05      	ldr	r2, [pc, #20]	; (d8834 <_Z16_fetch_usbserialv+0x44>)
   d881e:	4906      	ldr	r1, [pc, #24]	; (d8838 <_Z16_fetch_usbserialv+0x48>)
   d8820:	4803      	ldr	r0, [pc, #12]	; (d8830 <_Z16_fetch_usbserialv+0x40>)
   d8822:	f000 fc43 	bl	d90ac <__aeabi_atexit>
	return _usbserial;
}
   d8826:	4802      	ldr	r0, [pc, #8]	; (d8830 <_Z16_fetch_usbserialv+0x40>)
   d8828:	b007      	add	sp, #28
   d882a:	bd30      	pop	{r4, r5, pc}
   d882c:	2003e3cc 	.word	0x2003e3cc
   d8830:	2003e3d0 	.word	0x2003e3d0
   d8834:	2003dd9c 	.word	0x2003dd9c
   d8838:	000d8731 	.word	0x000d8731

000d883c <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d883c:	4700      	bx	r0
	...

000d8840 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d8840:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8842:	b085      	sub	sp, #20
   d8844:	461c      	mov	r4, r3
   d8846:	460e      	mov	r6, r1
   d8848:	4617      	mov	r7, r2
   d884a:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   d884c:	f7fe fe10 	bl	d7470 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   d8850:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d8852:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8854:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d8858:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d885a:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d885e:	bfa5      	ittet	ge
   d8860:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d8864:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d8868:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d886a:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d886c:	9300      	str	r3, [sp, #0]
   d886e:	4632      	mov	r2, r6
   d8870:	463b      	mov	r3, r7
   d8872:	4906      	ldr	r1, [pc, #24]	; (d888c <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d8874:	bfa8      	it	ge
   d8876:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d887a:	4628      	mov	r0, r5
   d887c:	f7fe fdf0 	bl	d7460 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d8880:	fab0 f080 	clz	r0, r0
   d8884:	0940      	lsrs	r0, r0, #5
   d8886:	b005      	add	sp, #20
   d8888:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d888a:	bf00      	nop
   d888c:	000d883d 	.word	0x000d883d

000d8890 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d8890:	f7fe bdfe 	b.w	d7490 <HAL_Interrupts_Disable_All>

000d8894 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d8894:	f7fe bdf4 	b.w	d7480 <HAL_Interrupts_Enable_All>

000d8898 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d8898:	2200      	movs	r2, #0
   d889a:	4611      	mov	r1, r2
   d889c:	6840      	ldr	r0, [r0, #4]
   d889e:	f7ff b843 	b.w	d7928 <network_ready>

000d88a2 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d88a2:	2200      	movs	r2, #0
   d88a4:	4611      	mov	r1, r2
   d88a6:	6840      	ldr	r0, [r0, #4]
   d88a8:	f7ff b85e 	b.w	d7968 <network_listening>

000d88ac <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d88ac:	2200      	movs	r2, #0
   d88ae:	4611      	mov	r1, r2
   d88b0:	6840      	ldr	r0, [r0, #4]
   d88b2:	f7ff b869 	b.w	d7988 <network_get_listen_timeout>

000d88b6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d88b6:	2200      	movs	r2, #0
   d88b8:	6840      	ldr	r0, [r0, #4]
   d88ba:	f7ff b85d 	b.w	d7978 <network_set_listen_timeout>

000d88be <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d88be:	2200      	movs	r2, #0
   d88c0:	f081 0101 	eor.w	r1, r1, #1
   d88c4:	6840      	ldr	r0, [r0, #4]
   d88c6:	f7ff b847 	b.w	d7958 <network_listen>

000d88ca <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d88ca:	2300      	movs	r3, #0
   d88cc:	461a      	mov	r2, r3
   d88ce:	4619      	mov	r1, r3
   d88d0:	6840      	ldr	r0, [r0, #4]
   d88d2:	f7ff b839 	b.w	d7948 <network_off>

000d88d6 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d88d6:	2300      	movs	r3, #0
   d88d8:	461a      	mov	r2, r3
   d88da:	4619      	mov	r1, r3
   d88dc:	6840      	ldr	r0, [r0, #4]
   d88de:	f7ff b82b 	b.w	d7938 <network_on>

000d88e2 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d88e2:	2200      	movs	r2, #0
   d88e4:	4611      	mov	r1, r2
   d88e6:	6840      	ldr	r0, [r0, #4]
   d88e8:	f7ff b80e 	b.w	d7908 <network_connecting>

000d88ec <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d88ec:	2200      	movs	r2, #0
   d88ee:	2102      	movs	r1, #2
   d88f0:	6840      	ldr	r0, [r0, #4]
   d88f2:	f7ff b811 	b.w	d7918 <network_disconnect>

000d88f6 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d88f6:	2300      	movs	r3, #0
   d88f8:	461a      	mov	r2, r3
   d88fa:	6840      	ldr	r0, [r0, #4]
   d88fc:	f7fe bffc 	b.w	d78f8 <network_connect>

000d8900 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d8900:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d8902:	4b1b      	ldr	r3, [pc, #108]	; (d8970 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d8904:	6003      	str	r3, [r0, #0]
   d8906:	2500      	movs	r5, #0
   d8908:	460f      	mov	r7, r1
   d890a:	3328      	adds	r3, #40	; 0x28
   d890c:	2618      	movs	r6, #24
   d890e:	b089      	sub	sp, #36	; 0x24
   d8910:	6043      	str	r3, [r0, #4]
   d8912:	6085      	str	r5, [r0, #8]
   d8914:	60c5      	str	r5, [r0, #12]
   d8916:	4632      	mov	r2, r6
   d8918:	4629      	mov	r1, r5
   d891a:	4604      	mov	r4, r0
   d891c:	3010      	adds	r0, #16
   d891e:	f001 fa57 	bl	d9dd0 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d8922:	462a      	mov	r2, r5
   d8924:	4629      	mov	r1, r5
   d8926:	6878      	ldr	r0, [r7, #4]
   d8928:	f7fe fffe 	bl	d7928 <network_ready>
   d892c:	b908      	cbnz	r0, d8932 <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d892e:	60a0      	str	r0, [r4, #8]
            return sig;
   d8930:	e01b      	b.n	d896a <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d8932:	4629      	mov	r1, r5
   d8934:	4632      	mov	r2, r6
   d8936:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d8938:	9500      	str	r5, [sp, #0]
   d893a:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d893c:	f001 fa48 	bl	d9dd0 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d8940:	a902      	add	r1, sp, #8
   d8942:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d8944:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d8948:	f7fe ff5a 	bl	d7800 <cellular_signal>
   d894c:	b110      	cbz	r0, d8954 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d894e:	2301      	movs	r3, #1
   d8950:	60a3      	str	r3, [r4, #8]
            return sig;
   d8952:	e00a      	b.n	d896a <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d8954:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d8956:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d8958:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d895a:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d895c:	b90b      	cbnz	r3, d8962 <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d895e:	2302      	movs	r3, #2
   d8960:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d8962:	a902      	add	r1, sp, #8
   d8964:	4620      	mov	r0, r4
   d8966:	f7ff fd0d 	bl	d8384 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d896a:	4620      	mov	r0, r4
   d896c:	b009      	add	sp, #36	; 0x24
   d896e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8970:	000da2cc 	.word	0x000da2cc

000d8974 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d8974:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d8976:	4c08      	ldr	r4, [pc, #32]	; (d8998 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d8978:	2528      	movs	r5, #40	; 0x28
   d897a:	462a      	mov	r2, r5
   d897c:	2100      	movs	r1, #0
   d897e:	4620      	mov	r0, r4
   d8980:	f001 fa26 	bl	d9dd0 <memset>
        cid = -1;
   d8984:	f04f 33ff 	mov.w	r3, #4294967295
   d8988:	6063      	str	r3, [r4, #4]
   d898a:	4b04      	ldr	r3, [pc, #16]	; (d899c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d898c:	8025      	strh	r5, [r4, #0]
   d898e:	2204      	movs	r2, #4
   d8990:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d8992:	4a03      	ldr	r2, [pc, #12]	; (d89a0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d8994:	601a      	str	r2, [r3, #0]
   d8996:	bd38      	pop	{r3, r4, r5, pc}
   d8998:	2003e3ec 	.word	0x2003e3ec
   d899c:	2003e3e4 	.word	0x2003e3e4
   d89a0:	000da344 	.word	0x000da344

000d89a4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d89a4:	4770      	bx	lr

000d89a6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d89a6:	7441      	strb	r1, [r0, #17]
   d89a8:	4770      	bx	lr

000d89aa <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d89aa:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d89ac:	7c00      	ldrb	r0, [r0, #16]
   d89ae:	f7fe febf 	bl	d7730 <HAL_USART_Available_Data_For_Write>
}
   d89b2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d89b6:	bd08      	pop	{r3, pc}

000d89b8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d89b8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d89ba:	7c00      	ldrb	r0, [r0, #16]
   d89bc:	f7fe fe90 	bl	d76e0 <HAL_USART_Available_Data>
}
   d89c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d89c4:	bd08      	pop	{r3, pc}

000d89c6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d89c6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d89c8:	7c00      	ldrb	r0, [r0, #16]
   d89ca:	f7fe fe99 	bl	d7700 <HAL_USART_Peek_Data>
}
   d89ce:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d89d2:	bf28      	it	cs
   d89d4:	f04f 30ff 	movcs.w	r0, #4294967295
   d89d8:	bd08      	pop	{r3, pc}

000d89da <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d89da:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d89dc:	7c00      	ldrb	r0, [r0, #16]
   d89de:	f7fe fe87 	bl	d76f0 <HAL_USART_Read_Data>
}
   d89e2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d89e6:	bf28      	it	cs
   d89e8:	f04f 30ff 	movcs.w	r0, #4294967295
   d89ec:	bd08      	pop	{r3, pc}

000d89ee <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d89ee:	7c00      	ldrb	r0, [r0, #16]
   d89f0:	f7fe be8e 	b.w	d7710 <HAL_USART_Flush_Data>

000d89f4 <_ZN11USARTSerialD0Ev>:
   d89f4:	b510      	push	{r4, lr}
   d89f6:	2114      	movs	r1, #20
   d89f8:	4604      	mov	r4, r0
   d89fa:	f000 fb65 	bl	d90c8 <_ZdlPvj>
   d89fe:	4620      	mov	r0, r4
   d8a00:	bd10      	pop	{r4, pc}

000d8a02 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d8a02:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d8a04:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d8a06:	4604      	mov	r4, r0
   d8a08:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d8a0a:	b925      	cbnz	r5, d8a16 <_ZN11USARTSerial5writeEh+0x14>
   d8a0c:	7c00      	ldrb	r0, [r0, #16]
   d8a0e:	f7fe fe8f 	bl	d7730 <HAL_USART_Available_Data_For_Write>
   d8a12:	2800      	cmp	r0, #0
   d8a14:	dd05      	ble.n	d8a22 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d8a16:	4631      	mov	r1, r6
   d8a18:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d8a1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d8a1e:	f7fe be57 	b.w	d76d0 <HAL_USART_Write_Data>
  }
  return 0;
}
   d8a22:	4628      	mov	r0, r5
   d8a24:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8a28 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d8a28:	b510      	push	{r4, lr}
   d8a2a:	4604      	mov	r4, r0
   d8a2c:	4608      	mov	r0, r1
   d8a2e:	4611      	mov	r1, r2
   d8a30:	2200      	movs	r2, #0
   d8a32:	6062      	str	r2, [r4, #4]
   d8a34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8a38:	60a2      	str	r2, [r4, #8]
   d8a3a:	4a05      	ldr	r2, [pc, #20]	; (d8a50 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d8a3c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d8a3e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d8a40:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d8a42:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d8a44:	461a      	mov	r2, r3
   d8a46:	f7fe fe3b 	bl	d76c0 <HAL_USART_Init>
}
   d8a4a:	4620      	mov	r0, r4
   d8a4c:	bd10      	pop	{r4, pc}
   d8a4e:	bf00      	nop
   d8a50:	000da378 	.word	0x000da378

000d8a54 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d8a54:	7c00      	ldrb	r0, [r0, #16]
   d8a56:	f7fe be63 	b.w	d7720 <HAL_USART_Is_Enabled>
	...

000d8a5c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d8a5c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d8a5e:	4d0c      	ldr	r5, [pc, #48]	; (d8a90 <_Z22__fetch_global_Serial1v+0x34>)
   d8a60:	6829      	ldr	r1, [r5, #0]
   d8a62:	f011 0401 	ands.w	r4, r1, #1
   d8a66:	d111      	bne.n	d8a8c <_Z22__fetch_global_Serial1v+0x30>
   d8a68:	4628      	mov	r0, r5
   d8a6a:	f7fb fb18 	bl	d409e <__cxa_guard_acquire>
   d8a6e:	b168      	cbz	r0, d8a8c <_Z22__fetch_global_Serial1v+0x30>
   d8a70:	4a08      	ldr	r2, [pc, #32]	; (d8a94 <_Z22__fetch_global_Serial1v+0x38>)
   d8a72:	4b09      	ldr	r3, [pc, #36]	; (d8a98 <_Z22__fetch_global_Serial1v+0x3c>)
   d8a74:	4809      	ldr	r0, [pc, #36]	; (d8a9c <_Z22__fetch_global_Serial1v+0x40>)
   d8a76:	4621      	mov	r1, r4
   d8a78:	f7ff ffd6 	bl	d8a28 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d8a7c:	4628      	mov	r0, r5
   d8a7e:	f7fb fb13 	bl	d40a8 <__cxa_guard_release>
   d8a82:	4a07      	ldr	r2, [pc, #28]	; (d8aa0 <_Z22__fetch_global_Serial1v+0x44>)
   d8a84:	4907      	ldr	r1, [pc, #28]	; (d8aa4 <_Z22__fetch_global_Serial1v+0x48>)
   d8a86:	4805      	ldr	r0, [pc, #20]	; (d8a9c <_Z22__fetch_global_Serial1v+0x40>)
   d8a88:	f000 fb10 	bl	d90ac <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d8a8c:	4803      	ldr	r0, [pc, #12]	; (d8a9c <_Z22__fetch_global_Serial1v+0x40>)
   d8a8e:	bd38      	pop	{r3, r4, r5, pc}
   d8a90:	2003e4ac 	.word	0x2003e4ac
   d8a94:	2003e4b0 	.word	0x2003e4b0
   d8a98:	2003e428 	.word	0x2003e428
   d8a9c:	2003e414 	.word	0x2003e414
   d8aa0:	2003dd9c 	.word	0x2003dd9c
   d8aa4:	000d89a5 	.word	0x000d89a5

000d8aa8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d8aa8:	4770      	bx	lr

000d8aaa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d8aaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8aac:	4606      	mov	r6, r0
   d8aae:	4615      	mov	r5, r2
   d8ab0:	460c      	mov	r4, r1
   d8ab2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8ab4:	42bc      	cmp	r4, r7
   d8ab6:	d006      	beq.n	d8ac6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8ab8:	6833      	ldr	r3, [r6, #0]
   d8aba:	f814 1b01 	ldrb.w	r1, [r4], #1
   d8abe:	689b      	ldr	r3, [r3, #8]
   d8ac0:	4630      	mov	r0, r6
   d8ac2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8ac4:	e7f6      	b.n	d8ab4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d8ac6:	4628      	mov	r0, r5
   d8ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8aca <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d8aca:	2200      	movs	r2, #0
   d8acc:	7c00      	ldrb	r0, [r0, #16]
   d8ace:	f7fe be47 	b.w	d7760 <HAL_I2C_Write_Data>

000d8ad2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d8ad2:	2100      	movs	r1, #0
   d8ad4:	7c00      	ldrb	r0, [r0, #16]
   d8ad6:	f7fe be4b 	b.w	d7770 <HAL_I2C_Available_Data>

000d8ada <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d8ada:	2100      	movs	r1, #0
   d8adc:	7c00      	ldrb	r0, [r0, #16]
   d8ade:	f7fe be4f 	b.w	d7780 <HAL_I2C_Read_Data>

000d8ae2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d8ae2:	2100      	movs	r1, #0
   d8ae4:	7c00      	ldrb	r0, [r0, #16]
   d8ae6:	f7fe be53 	b.w	d7790 <HAL_I2C_Peek_Data>

000d8aea <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d8aea:	2100      	movs	r1, #0
   d8aec:	7c00      	ldrb	r0, [r0, #16]
   d8aee:	f7fe be57 	b.w	d77a0 <HAL_I2C_Flush_Data>

000d8af2 <_ZN7TwoWireD0Ev>:
   d8af2:	b510      	push	{r4, lr}
   d8af4:	2114      	movs	r1, #20
   d8af6:	4604      	mov	r4, r0
   d8af8:	f000 fae6 	bl	d90c8 <_ZdlPvj>
   d8afc:	4620      	mov	r0, r4
   d8afe:	bd10      	pop	{r4, pc}

000d8b00 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d8b00:	b510      	push	{r4, lr}
   d8b02:	4604      	mov	r4, r0
   d8b04:	2300      	movs	r3, #0
   d8b06:	6063      	str	r3, [r4, #4]
   d8b08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8b0c:	60a3      	str	r3, [r4, #8]
   d8b0e:	4b04      	ldr	r3, [pc, #16]	; (d8b20 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d8b10:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d8b12:	4608      	mov	r0, r1
   d8b14:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d8b16:	4611      	mov	r1, r2
   d8b18:	f7fe fe52 	bl	d77c0 <HAL_I2C_Init>
}
   d8b1c:	4620      	mov	r0, r4
   d8b1e:	bd10      	pop	{r4, pc}
   d8b20:	000da3a8 	.word	0x000da3a8

000d8b24 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d8b24:	b570      	push	{r4, r5, r6, lr}
   d8b26:	460c      	mov	r4, r1
   d8b28:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d8b2a:	2514      	movs	r5, #20
   d8b2c:	4606      	mov	r6, r0
   d8b2e:	462a      	mov	r2, r5
   d8b30:	2100      	movs	r1, #0
   d8b32:	a801      	add	r0, sp, #4
   d8b34:	f001 f94c 	bl	d9dd0 <memset>
   d8b38:	7823      	ldrb	r3, [r4, #0]
   d8b3a:	f88d 3008 	strb.w	r3, [sp, #8]
   d8b3e:	6863      	ldr	r3, [r4, #4]
   d8b40:	9303      	str	r3, [sp, #12]
   d8b42:	68e3      	ldr	r3, [r4, #12]
   d8b44:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d8b46:	2200      	movs	r2, #0
   d8b48:	7a23      	ldrb	r3, [r4, #8]
   d8b4a:	7c30      	ldrb	r0, [r6, #16]
   d8b4c:	f8ad 5004 	strh.w	r5, [sp, #4]
   d8b50:	a901      	add	r1, sp, #4
   d8b52:	9305      	str	r3, [sp, #20]
   d8b54:	f7fe fe4c 	bl	d77f0 <HAL_I2C_Request_Data_Ex>
}
   d8b58:	b006      	add	sp, #24
   d8b5a:	bd70      	pop	{r4, r5, r6, pc}

000d8b5c <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d8b5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d8b5e:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8b60:	f88d 1000 	strb.w	r1, [sp]
   d8b64:	f04f 0164 	mov.w	r1, #100	; 0x64
   d8b68:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d8b6a:	bf18      	it	ne
   d8b6c:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d8b6e:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d8b70:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d8b72:	f88d 3008 	strb.w	r3, [sp, #8]
   d8b76:	f7ff ffd5 	bl	d8b24 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d8b7a:	b005      	add	sp, #20
   d8b7c:	f85d fb04 	ldr.w	pc, [sp], #4

000d8b80 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d8b80:	2200      	movs	r2, #0
   d8b82:	7c00      	ldrb	r0, [r0, #16]
   d8b84:	f7fe bddc 	b.w	d7740 <HAL_I2C_Begin_Transmission>

000d8b88 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d8b88:	b2c9      	uxtb	r1, r1
   d8b8a:	f7ff bff9 	b.w	d8b80 <_ZN7TwoWire17beginTransmissionEh>

000d8b8e <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d8b8e:	2200      	movs	r2, #0
   d8b90:	7c00      	ldrb	r0, [r0, #16]
   d8b92:	f7fe bddd 	b.w	d7750 <HAL_I2C_End_Transmission>

000d8b96 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d8b96:	2100      	movs	r1, #0
   d8b98:	7c00      	ldrb	r0, [r0, #16]
   d8b9a:	f7fe be09 	b.w	d77b0 <HAL_I2C_Is_Enabled>

000d8b9e <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d8b9e:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d8ba0:	2100      	movs	r1, #0
   d8ba2:	7c00      	ldrb	r0, [r0, #16]
   d8ba4:	f7fe fe14 	bl	d77d0 <HAL_I2C_Acquire>
}
   d8ba8:	fab0 f080 	clz	r0, r0
   d8bac:	0940      	lsrs	r0, r0, #5
   d8bae:	bd08      	pop	{r3, pc}

000d8bb0 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d8bb0:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d8bb2:	2100      	movs	r1, #0
   d8bb4:	7c00      	ldrb	r0, [r0, #16]
   d8bb6:	f7fe fe13 	bl	d77e0 <HAL_I2C_Release>
}
   d8bba:	fab0 f080 	clz	r0, r0
   d8bbe:	0940      	lsrs	r0, r0, #5
   d8bc0:	bd08      	pop	{r3, pc}

000d8bc2 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d8bc2:	b510      	push	{r4, lr}
  if (0 == max) {
   d8bc4:	4604      	mov	r4, r0
   d8bc6:	b130      	cbz	r0, d8bd6 <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
   d8bc8:	f001 f932 	bl	d9e30 <rand>
   d8bcc:	fb90 f3f4 	sdiv	r3, r0, r4
   d8bd0:	fb03 0014 	mls	r0, r3, r4, r0
   d8bd4:	bd10      	pop	{r4, pc}
}
   d8bd6:	bd10      	pop	{r4, pc}

000d8bd8 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8bd8:	2200      	movs	r2, #0
   d8bda:	4611      	mov	r1, r2
   d8bdc:	6840      	ldr	r0, [r0, #4]
   d8bde:	f7fe bec3 	b.w	d7968 <network_listening>

000d8be2 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8be2:	2200      	movs	r2, #0
   d8be4:	4611      	mov	r1, r2
   d8be6:	6840      	ldr	r0, [r0, #4]
   d8be8:	f7fe bece 	b.w	d7988 <network_get_listen_timeout>

000d8bec <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8bec:	2200      	movs	r2, #0
   d8bee:	6840      	ldr	r0, [r0, #4]
   d8bf0:	f7fe bec2 	b.w	d7978 <network_set_listen_timeout>

000d8bf4 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8bf4:	2200      	movs	r2, #0
   d8bf6:	f081 0101 	eor.w	r1, r1, #1
   d8bfa:	6840      	ldr	r0, [r0, #4]
   d8bfc:	f7fe beac 	b.w	d7958 <network_listen>

000d8c00 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d8c00:	2300      	movs	r3, #0
   d8c02:	461a      	mov	r2, r3
   d8c04:	2101      	movs	r1, #1
   d8c06:	6840      	ldr	r0, [r0, #4]
   d8c08:	f7fe be9e 	b.w	d7948 <network_off>

000d8c0c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d8c0c:	2300      	movs	r3, #0
   d8c0e:	461a      	mov	r2, r3
   d8c10:	4619      	mov	r1, r3
   d8c12:	6840      	ldr	r0, [r0, #4]
   d8c14:	f7fe be90 	b.w	d7938 <network_on>

000d8c18 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8c18:	2200      	movs	r2, #0
   d8c1a:	4611      	mov	r1, r2
   d8c1c:	6840      	ldr	r0, [r0, #4]
   d8c1e:	f7fe be83 	b.w	d7928 <network_ready>

000d8c22 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8c22:	2200      	movs	r2, #0
   d8c24:	4611      	mov	r1, r2
   d8c26:	6840      	ldr	r0, [r0, #4]
   d8c28:	f7fe be6e 	b.w	d7908 <network_connecting>

000d8c2c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8c2c:	2200      	movs	r2, #0
   d8c2e:	2102      	movs	r1, #2
   d8c30:	6840      	ldr	r0, [r0, #4]
   d8c32:	f7fe be71 	b.w	d7918 <network_disconnect>

000d8c36 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8c36:	2300      	movs	r3, #0
   d8c38:	461a      	mov	r2, r3
   d8c3a:	6840      	ldr	r0, [r0, #4]
   d8c3c:	f7fe be5c 	b.w	d78f8 <network_connect>

000d8c40 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d8c40:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8c42:	4605      	mov	r5, r0
   d8c44:	b188      	cbz	r0, d8c6a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8c46:	6804      	ldr	r4, [r0, #0]
   d8c48:	b14c      	cbz	r4, d8c5e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d8c4a:	68a3      	ldr	r3, [r4, #8]
   d8c4c:	b11b      	cbz	r3, d8c56 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d8c4e:	2203      	movs	r2, #3
   d8c50:	4621      	mov	r1, r4
   d8c52:	4620      	mov	r0, r4
   d8c54:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8c56:	2110      	movs	r1, #16
   d8c58:	4620      	mov	r0, r4
   d8c5a:	f000 fa35 	bl	d90c8 <_ZdlPvj>
   d8c5e:	4628      	mov	r0, r5
   d8c60:	2114      	movs	r1, #20
      }
   d8c62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8c66:	f000 ba2f 	b.w	d90c8 <_ZdlPvj>
   d8c6a:	bd38      	pop	{r3, r4, r5, pc}

000d8c6c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d8c6c:	b110      	cbz	r0, d8c74 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d8c6e:	6803      	ldr	r3, [r0, #0]
   d8c70:	685b      	ldr	r3, [r3, #4]
   d8c72:	4718      	bx	r3
   d8c74:	4770      	bx	lr

000d8c76 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d8c76:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d8c78:	6803      	ldr	r3, [r0, #0]
   d8c7a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d8c7c:	b1bb      	cbz	r3, d8cae <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d8c7e:	6858      	ldr	r0, [r3, #4]
   d8c80:	f7fe fcb6 	bl	d75f0 <os_thread_is_current>
   d8c84:	b978      	cbnz	r0, d8ca6 <_ZN6ThreadD1Ev+0x30>
   d8c86:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d8c88:	7c5a      	ldrb	r2, [r3, #17]
   d8c8a:	b912      	cbnz	r2, d8c92 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d8c8c:	6858      	ldr	r0, [r3, #4]
   d8c8e:	f7fe fcbf 	bl	d7610 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d8c92:	6823      	ldr	r3, [r4, #0]
   d8c94:	6858      	ldr	r0, [r3, #4]
   d8c96:	f7fe fcc3 	bl	d7620 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8c9a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d8c9c:	2300      	movs	r3, #0
   d8c9e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d8ca0:	b128      	cbz	r0, d8cae <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d8ca2:	f7ff ffcd 	bl	d8c40 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8ca6:	6820      	ldr	r0, [r4, #0]
   d8ca8:	b108      	cbz	r0, d8cae <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d8caa:	f7ff ffc9 	bl	d8c40 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d8cae:	4620      	mov	r0, r4
   d8cb0:	bd10      	pop	{r4, pc}

000d8cb2 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d8cb2:	b538      	push	{r3, r4, r5, lr}
   d8cb4:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8cb6:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d8cba:	b108      	cbz	r0, d8cc0 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d8cbc:	f7fb f9ed 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d8cc0:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d8cc4:	b108      	cbz	r0, d8cca <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d8cc6:	f7fe fce3 	bl	d7690 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8cca:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d8cce:	b135      	cbz	r5, d8cde <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8cd0:	4628      	mov	r0, r5
   d8cd2:	f7ff ffd0 	bl	d8c76 <_ZN6ThreadD1Ev>
   d8cd6:	2104      	movs	r1, #4
   d8cd8:	4628      	mov	r0, r5
   d8cda:	f000 f9f5 	bl	d90c8 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8cde:	6820      	ldr	r0, [r4, #0]
   d8ce0:	b108      	cbz	r0, d8ce6 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d8ce2:	f7ff ffc3 	bl	d8c6c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d8ce6:	4620      	mov	r0, r4
   d8ce8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8cec <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d8cec:	b510      	push	{r4, lr}
   d8cee:	4b04      	ldr	r3, [pc, #16]	; (d8d00 <_ZN5spark9MeshClassD1Ev+0x14>)
   d8cf0:	4604      	mov	r4, r0
   d8cf2:	f840 3b08 	str.w	r3, [r0], #8
   d8cf6:	f7ff ffdc 	bl	d8cb2 <_ZN5spark11MeshPublishD1Ev>
   d8cfa:	4620      	mov	r0, r4
   d8cfc:	bd10      	pop	{r4, pc}
   d8cfe:	bf00      	nop
   d8d00:	000da3d0 	.word	0x000da3d0

000d8d04 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d8d04:	b538      	push	{r3, r4, r5, lr}
   d8d06:	4c0e      	ldr	r4, [pc, #56]	; (d8d40 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d8d08:	4b0e      	ldr	r3, [pc, #56]	; (d8d44 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d8d0a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d8d0c:	2500      	movs	r5, #0
   d8d0e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d8d10:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d8d14:	6063      	str	r3, [r4, #4]
   d8d16:	60a5      	str	r5, [r4, #8]
   d8d18:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8d1c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d8d20:	f7fe fcae 	bl	d7680 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d8d24:	4b08      	ldr	r3, [pc, #32]	; (d8d48 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d8d26:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8d2a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d8d2e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d8d30:	4620      	mov	r0, r4
   d8d32:	4a06      	ldr	r2, [pc, #24]	; (d8d4c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d8d34:	4906      	ldr	r1, [pc, #24]	; (d8d50 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d8d36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d8d3a:	f000 b9b7 	b.w	d90ac <__aeabi_atexit>
   d8d3e:	bf00      	nop
   d8d40:	2003e534 	.word	0x2003e534
   d8d44:	000da404 	.word	0x000da404
   d8d48:	000da3d0 	.word	0x000da3d0
   d8d4c:	2003dd9c 	.word	0x2003dd9c
   d8d50:	000d8ced 	.word	0x000d8ced

000d8d54 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8d54:	2300      	movs	r3, #0
   d8d56:	461a      	mov	r2, r3
   d8d58:	6840      	ldr	r0, [r0, #4]
   d8d5a:	f7fe bdcd 	b.w	d78f8 <network_connect>

000d8d5e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8d5e:	2200      	movs	r2, #0
   d8d60:	2102      	movs	r1, #2
   d8d62:	6840      	ldr	r0, [r0, #4]
   d8d64:	f7fe bdd8 	b.w	d7918 <network_disconnect>

000d8d68 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8d68:	2200      	movs	r2, #0
   d8d6a:	4611      	mov	r1, r2
   d8d6c:	6840      	ldr	r0, [r0, #4]
   d8d6e:	f7fe bdcb 	b.w	d7908 <network_connecting>

000d8d72 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d8d72:	2200      	movs	r2, #0
   d8d74:	4611      	mov	r1, r2
   d8d76:	6840      	ldr	r0, [r0, #4]
   d8d78:	f7fe bdd6 	b.w	d7928 <network_ready>

000d8d7c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8d7c:	2300      	movs	r3, #0
   d8d7e:	461a      	mov	r2, r3
   d8d80:	4619      	mov	r1, r3
   d8d82:	6840      	ldr	r0, [r0, #4]
   d8d84:	f7fe bdd8 	b.w	d7938 <network_on>

000d8d88 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8d88:	2300      	movs	r3, #0
   d8d8a:	461a      	mov	r2, r3
   d8d8c:	4619      	mov	r1, r3
   d8d8e:	6840      	ldr	r0, [r0, #4]
   d8d90:	f7fe bdda 	b.w	d7948 <network_off>

000d8d94 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8d94:	2200      	movs	r2, #0
   d8d96:	f081 0101 	eor.w	r1, r1, #1
   d8d9a:	6840      	ldr	r0, [r0, #4]
   d8d9c:	f7fe bddc 	b.w	d7958 <network_listen>

000d8da0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8da0:	2200      	movs	r2, #0
   d8da2:	6840      	ldr	r0, [r0, #4]
   d8da4:	f7fe bde8 	b.w	d7978 <network_set_listen_timeout>

000d8da8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8da8:	2200      	movs	r2, #0
   d8daa:	4611      	mov	r1, r2
   d8dac:	6840      	ldr	r0, [r0, #4]
   d8dae:	f7fe bdeb 	b.w	d7988 <network_get_listen_timeout>

000d8db2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8db2:	2200      	movs	r2, #0
   d8db4:	4611      	mov	r1, r2
   d8db6:	6840      	ldr	r0, [r0, #4]
   d8db8:	f7fe bdd6 	b.w	d7968 <network_listening>

000d8dbc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8dbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8dc0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d8dc2:	b095      	sub	sp, #84	; 0x54
   d8dc4:	4616      	mov	r6, r2
   d8dc6:	460d      	mov	r5, r1
   d8dc8:	4607      	mov	r7, r0
    IPAddress addr;
   d8dca:	f7ff fc77 	bl	d86bc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d8dce:	4621      	mov	r1, r4
   d8dd0:	2220      	movs	r2, #32
   d8dd2:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8dd4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8dd6:	f000 fffb 	bl	d9dd0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8dda:	2340      	movs	r3, #64	; 0x40
   d8ddc:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8dde:	4621      	mov	r1, r4
   d8de0:	466b      	mov	r3, sp
   d8de2:	aa0c      	add	r2, sp, #48	; 0x30
   d8de4:	4630      	mov	r0, r6
   d8de6:	f7fe fb0b 	bl	d7400 <netdb_getaddrinfo>
    if (!r) {
   d8dea:	4604      	mov	r4, r0
   d8dec:	2800      	cmp	r0, #0
   d8dee:	d144      	bne.n	d8e7a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8df0:	4602      	mov	r2, r0
   d8df2:	2101      	movs	r1, #1
   d8df4:	6868      	ldr	r0, [r5, #4]
   d8df6:	f7fe fd97 	bl	d7928 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8dfa:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8dfc:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8dfe:	4622      	mov	r2, r4
   d8e00:	6868      	ldr	r0, [r5, #4]
   d8e02:	f7fe fd91 	bl	d7928 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8e06:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8e08:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d8e0a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8e0c:	2e00      	cmp	r6, #0
   d8e0e:	d034      	beq.n	d8e7a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d8e10:	2900      	cmp	r1, #0
   d8e12:	d132      	bne.n	d8e7a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8e14:	6873      	ldr	r3, [r6, #4]
   d8e16:	2b02      	cmp	r3, #2
   d8e18:	d002      	beq.n	d8e20 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d8e1a:	2b0a      	cmp	r3, #10
   d8e1c:	d009      	beq.n	d8e32 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d8e1e:	e02a      	b.n	d8e76 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d8e20:	f1b8 0f00 	cmp.w	r8, #0
   d8e24:	d027      	beq.n	d8e76 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d8e26:	6971      	ldr	r1, [r6, #20]
   d8e28:	4638      	mov	r0, r7
   d8e2a:	3104      	adds	r1, #4
   d8e2c:	f7ff fc73 	bl	d8716 <_ZN9IPAddressaSEPKh>
   d8e30:	e020      	b.n	d8e74 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8e32:	f1b9 0f00 	cmp.w	r9, #0
   d8e36:	d01e      	beq.n	d8e76 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8e38:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8e3a:	2211      	movs	r2, #17
   d8e3c:	a801      	add	r0, sp, #4
   d8e3e:	f000 ffc7 	bl	d9dd0 <memset>
                    a.v = 6;
   d8e42:	2306      	movs	r3, #6
   d8e44:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8e48:	ad01      	add	r5, sp, #4
   d8e4a:	f104 0308 	add.w	r3, r4, #8
   d8e4e:	3418      	adds	r4, #24
   d8e50:	6818      	ldr	r0, [r3, #0]
   d8e52:	6859      	ldr	r1, [r3, #4]
   d8e54:	462a      	mov	r2, r5
   d8e56:	c203      	stmia	r2!, {r0, r1}
   d8e58:	3308      	adds	r3, #8
   d8e5a:	42a3      	cmp	r3, r4
   d8e5c:	4615      	mov	r5, r2
   d8e5e:	d1f7      	bne.n	d8e50 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d8e60:	a901      	add	r1, sp, #4
   d8e62:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d8e64:	ad07      	add	r5, sp, #28
   d8e66:	f7ff fc37 	bl	d86d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8e6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8e6c:	1d3c      	adds	r4, r7, #4
   d8e6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8e70:	682b      	ldr	r3, [r5, #0]
   d8e72:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d8e74:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8e76:	69f6      	ldr	r6, [r6, #28]
   d8e78:	e7c8      	b.n	d8e0c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8e7a:	9800      	ldr	r0, [sp, #0]
   d8e7c:	f7fe fab8 	bl	d73f0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8e80:	4638      	mov	r0, r7
   d8e82:	b015      	add	sp, #84	; 0x54
   d8e84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d8e88 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8e88:	4b02      	ldr	r3, [pc, #8]	; (d8e94 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8e8a:	4a03      	ldr	r2, [pc, #12]	; (d8e98 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8e8c:	601a      	str	r2, [r3, #0]
   d8e8e:	2200      	movs	r2, #0
   d8e90:	605a      	str	r2, [r3, #4]
   d8e92:	4770      	bx	lr
   d8e94:	2003e708 	.word	0x2003e708
   d8e98:	000da404 	.word	0x000da404

000d8e9c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d8e9c:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d8e9e:	4e18      	ldr	r6, [pc, #96]	; (d8f00 <pinAvailable+0x64>)
   d8ea0:	6831      	ldr	r1, [r6, #0]
   d8ea2:	f011 0501 	ands.w	r5, r1, #1
   d8ea6:	4604      	mov	r4, r0
   d8ea8:	d10a      	bne.n	d8ec0 <pinAvailable+0x24>
   d8eaa:	4630      	mov	r0, r6
   d8eac:	f7fb f8f7 	bl	d409e <__cxa_guard_acquire>
   d8eb0:	b130      	cbz	r0, d8ec0 <pinAvailable+0x24>
   d8eb2:	4629      	mov	r1, r5
   d8eb4:	4813      	ldr	r0, [pc, #76]	; (d8f04 <pinAvailable+0x68>)
   d8eb6:	f7fe fe03 	bl	d7ac0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8eba:	4630      	mov	r0, r6
   d8ebc:	f7fb f8f4 	bl	d40a8 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d8ec0:	4810      	ldr	r0, [pc, #64]	; (d8f04 <pinAvailable+0x68>)
   d8ec2:	f7fe ff32 	bl	d7d2a <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d8ec6:	b128      	cbz	r0, d8ed4 <pinAvailable+0x38>
   d8ec8:	f1a4 030b 	sub.w	r3, r4, #11
   d8ecc:	2b02      	cmp	r3, #2
   d8ece:	d801      	bhi.n	d8ed4 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d8ed0:	2000      	movs	r0, #0
   d8ed2:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d8ed4:	f000 f89e 	bl	d9014 <_Z19__fetch_global_Wirev>
   d8ed8:	f7ff fe5d 	bl	d8b96 <_ZN7TwoWire9isEnabledEv>
   d8edc:	b108      	cbz	r0, d8ee2 <pinAvailable+0x46>
   d8ede:	2c01      	cmp	r4, #1
   d8ee0:	d9f6      	bls.n	d8ed0 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d8ee2:	f7ff fdbb 	bl	d8a5c <_Z22__fetch_global_Serial1v>
   d8ee6:	f7ff fdb5 	bl	d8a54 <_ZN11USARTSerial9isEnabledEv>
   d8eea:	b118      	cbz	r0, d8ef4 <pinAvailable+0x58>
   d8eec:	f1a4 0309 	sub.w	r3, r4, #9
   d8ef0:	2b01      	cmp	r3, #1
   d8ef2:	d9ed      	bls.n	d8ed0 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d8ef4:	2c23      	cmp	r4, #35	; 0x23
   d8ef6:	bf8c      	ite	hi
   d8ef8:	2000      	movhi	r0, #0
   d8efa:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d8efc:	bd70      	pop	{r4, r5, r6, pc}
   d8efe:	bf00      	nop
   d8f00:	2003de08 	.word	0x2003de08
   d8f04:	2003de0c 	.word	0x2003de0c

000d8f08 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8f08:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d8f0a:	b538      	push	{r3, r4, r5, lr}
   d8f0c:	4604      	mov	r4, r0
   d8f0e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8f10:	d80a      	bhi.n	d8f28 <pinMode+0x20>
   d8f12:	29ff      	cmp	r1, #255	; 0xff
   d8f14:	d008      	beq.n	d8f28 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8f16:	f7ff ffc1 	bl	d8e9c <pinAvailable>
   d8f1a:	b128      	cbz	r0, d8f28 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8f1c:	4629      	mov	r1, r5
   d8f1e:	4620      	mov	r0, r4
}
   d8f20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8f24:	f7fe ba7c 	b.w	d7420 <HAL_Pin_Mode>
   d8f28:	bd38      	pop	{r3, r4, r5, pc}

000d8f2a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d8f2a:	b538      	push	{r3, r4, r5, lr}
   d8f2c:	4604      	mov	r4, r0
   d8f2e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8f30:	f7fe fa7e 	bl	d7430 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8f34:	28ff      	cmp	r0, #255	; 0xff
   d8f36:	d010      	beq.n	d8f5a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d8f38:	2806      	cmp	r0, #6
   d8f3a:	d804      	bhi.n	d8f46 <digitalWrite+0x1c>
   d8f3c:	234d      	movs	r3, #77	; 0x4d
   d8f3e:	fa23 f000 	lsr.w	r0, r3, r0
   d8f42:	07c3      	lsls	r3, r0, #31
   d8f44:	d409      	bmi.n	d8f5a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d8f46:	4620      	mov	r0, r4
   d8f48:	f7ff ffa8 	bl	d8e9c <pinAvailable>
   d8f4c:	b128      	cbz	r0, d8f5a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8f4e:	4629      	mov	r1, r5
   d8f50:	4620      	mov	r0, r4
}
   d8f52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8f56:	f7fe ba73 	b.w	d7440 <HAL_GPIO_Write>
   d8f5a:	bd38      	pop	{r3, r4, r5, pc}

000d8f5c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d8f5c:	b510      	push	{r4, lr}
   d8f5e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8f60:	f7fe fa66 	bl	d7430 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d8f64:	3804      	subs	r0, #4
   d8f66:	b2c0      	uxtb	r0, r0
   d8f68:	2801      	cmp	r0, #1
   d8f6a:	d908      	bls.n	d8f7e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d8f6c:	4620      	mov	r0, r4
   d8f6e:	f7ff ff95 	bl	d8e9c <pinAvailable>
   d8f72:	b120      	cbz	r0, d8f7e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8f74:	4620      	mov	r0, r4
}
   d8f76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8f7a:	f7fe ba69 	b.w	d7450 <HAL_GPIO_Read>
}
   d8f7e:	2000      	movs	r0, #0
   d8f80:	bd10      	pop	{r4, pc}
	...

000d8f84 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d8f84:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d8f86:	4c07      	ldr	r4, [pc, #28]	; (d8fa4 <_Z21__fetch_global_EEPROMv+0x20>)
   d8f88:	6823      	ldr	r3, [r4, #0]
   d8f8a:	07db      	lsls	r3, r3, #31
   d8f8c:	d408      	bmi.n	d8fa0 <_Z21__fetch_global_EEPROMv+0x1c>
   d8f8e:	4620      	mov	r0, r4
   d8f90:	f7fb f885 	bl	d409e <__cxa_guard_acquire>
   d8f94:	b120      	cbz	r0, d8fa0 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d8f96:	f7fe fb0b 	bl	d75b0 <HAL_EEPROM_Init>
   d8f9a:	4620      	mov	r0, r4
   d8f9c:	f7fb f884 	bl	d40a8 <__cxa_guard_release>
	return eeprom;
}
   d8fa0:	4801      	ldr	r0, [pc, #4]	; (d8fa8 <_Z21__fetch_global_EEPROMv+0x24>)
   d8fa2:	bd10      	pop	{r4, pc}
   d8fa4:	2003e714 	.word	0x2003e714
   d8fa8:	2003e718 	.word	0x2003e718

000d8fac <_Z17acquireWireBufferv>:
   d8fac:	b570      	push	{r4, r5, r6, lr}
   d8fae:	4604      	mov	r4, r0
   d8fb0:	2514      	movs	r5, #20
   d8fb2:	462a      	mov	r2, r5
   d8fb4:	4e09      	ldr	r6, [pc, #36]	; (d8fdc <_Z17acquireWireBufferv+0x30>)
   d8fb6:	2100      	movs	r1, #0
   d8fb8:	f000 ff0a 	bl	d9dd0 <memset>
   d8fbc:	8025      	strh	r5, [r4, #0]
   d8fbe:	2520      	movs	r5, #32
   d8fc0:	4631      	mov	r1, r6
   d8fc2:	60a5      	str	r5, [r4, #8]
   d8fc4:	6125      	str	r5, [r4, #16]
   d8fc6:	4628      	mov	r0, r5
   d8fc8:	f000 f880 	bl	d90cc <_ZnajRKSt9nothrow_t>
   d8fcc:	4631      	mov	r1, r6
   d8fce:	6060      	str	r0, [r4, #4]
   d8fd0:	4628      	mov	r0, r5
   d8fd2:	f000 f87b 	bl	d90cc <_ZnajRKSt9nothrow_t>
   d8fd6:	60e0      	str	r0, [r4, #12]
   d8fd8:	4620      	mov	r0, r4
   d8fda:	bd70      	pop	{r4, r5, r6, pc}
   d8fdc:	000da430 	.word	0x000da430

000d8fe0 <_Z18acquireWire1Bufferv>:
	return defaultWireConfig();
}

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
   d8fe0:	b570      	push	{r4, r5, r6, lr}
   d8fe2:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d8fe4:	2514      	movs	r5, #20
   d8fe6:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8fe8:	4e09      	ldr	r6, [pc, #36]	; (d9010 <_Z18acquireWire1Bufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d8fea:	2100      	movs	r1, #0
   d8fec:	f000 fef0 	bl	d9dd0 <memset>
   d8ff0:	8025      	strh	r5, [r4, #0]
   d8ff2:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8ff4:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d8ff6:	60a5      	str	r5, [r4, #8]
   d8ff8:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8ffa:	4628      	mov	r0, r5
   d8ffc:	f000 f866 	bl	d90cc <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9000:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d9002:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9004:	4628      	mov	r0, r5
   d9006:	f000 f861 	bl	d90cc <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d900a:	60e0      	str	r0, [r4, #12]

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
	return defaultWireConfig();
}
   d900c:	4620      	mov	r0, r4
   d900e:	bd70      	pop	{r4, r5, r6, pc}
   d9010:	000da430 	.word	0x000da430

000d9014 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d9014:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9016:	4d0e      	ldr	r5, [pc, #56]	; (d9050 <_Z19__fetch_global_Wirev+0x3c>)
   d9018:	6829      	ldr	r1, [r5, #0]
   d901a:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d901e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9020:	d113      	bne.n	d904a <_Z19__fetch_global_Wirev+0x36>
   d9022:	4628      	mov	r0, r5
   d9024:	f7fb f83b 	bl	d409e <__cxa_guard_acquire>
   d9028:	b178      	cbz	r0, d904a <_Z19__fetch_global_Wirev+0x36>
   d902a:	a801      	add	r0, sp, #4
   d902c:	f7ff ffbe 	bl	d8fac <_Z17acquireWireBufferv>
   d9030:	aa01      	add	r2, sp, #4
   d9032:	4621      	mov	r1, r4
   d9034:	4807      	ldr	r0, [pc, #28]	; (d9054 <_Z19__fetch_global_Wirev+0x40>)
   d9036:	f7ff fd63 	bl	d8b00 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d903a:	4628      	mov	r0, r5
   d903c:	f7fb f834 	bl	d40a8 <__cxa_guard_release>
   d9040:	4a05      	ldr	r2, [pc, #20]	; (d9058 <_Z19__fetch_global_Wirev+0x44>)
   d9042:	4906      	ldr	r1, [pc, #24]	; (d905c <_Z19__fetch_global_Wirev+0x48>)
   d9044:	4803      	ldr	r0, [pc, #12]	; (d9054 <_Z19__fetch_global_Wirev+0x40>)
   d9046:	f000 f831 	bl	d90ac <__aeabi_atexit>
	return wire;
}
   d904a:	4802      	ldr	r0, [pc, #8]	; (d9054 <_Z19__fetch_global_Wirev+0x40>)
   d904c:	b007      	add	sp, #28
   d904e:	bd30      	pop	{r4, r5, pc}
   d9050:	2003e71c 	.word	0x2003e71c
   d9054:	2003e734 	.word	0x2003e734
   d9058:	2003dd9c 	.word	0x2003dd9c
   d905c:	000d8aa9 	.word	0x000d8aa9

000d9060 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d9060:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d9062:	4c0e      	ldr	r4, [pc, #56]	; (d909c <_Z20__fetch_global_Wire1v+0x3c>)
   d9064:	6823      	ldr	r3, [r4, #0]
   d9066:	07db      	lsls	r3, r3, #31
	return wire;
}

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d9068:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d906a:	d413      	bmi.n	d9094 <_Z20__fetch_global_Wire1v+0x34>
   d906c:	4620      	mov	r0, r4
   d906e:	f7fb f816 	bl	d409e <__cxa_guard_acquire>
   d9072:	b178      	cbz	r0, d9094 <_Z20__fetch_global_Wire1v+0x34>
   d9074:	a801      	add	r0, sp, #4
   d9076:	f7ff ffb3 	bl	d8fe0 <_Z18acquireWire1Bufferv>
   d907a:	aa01      	add	r2, sp, #4
   d907c:	2101      	movs	r1, #1
   d907e:	4808      	ldr	r0, [pc, #32]	; (d90a0 <_Z20__fetch_global_Wire1v+0x40>)
   d9080:	f7ff fd3e 	bl	d8b00 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d9084:	4620      	mov	r0, r4
   d9086:	f7fb f80f 	bl	d40a8 <__cxa_guard_release>
   d908a:	4a06      	ldr	r2, [pc, #24]	; (d90a4 <_Z20__fetch_global_Wire1v+0x44>)
   d908c:	4906      	ldr	r1, [pc, #24]	; (d90a8 <_Z20__fetch_global_Wire1v+0x48>)
   d908e:	4804      	ldr	r0, [pc, #16]	; (d90a0 <_Z20__fetch_global_Wire1v+0x40>)
   d9090:	f000 f80c 	bl	d90ac <__aeabi_atexit>
	return wire;
}
   d9094:	4802      	ldr	r0, [pc, #8]	; (d90a0 <_Z20__fetch_global_Wire1v+0x40>)
   d9096:	b006      	add	sp, #24
   d9098:	bd10      	pop	{r4, pc}
   d909a:	bf00      	nop
   d909c:	2003e748 	.word	0x2003e748
   d90a0:	2003e720 	.word	0x2003e720
   d90a4:	2003dd9c 	.word	0x2003dd9c
   d90a8:	000d8aa9 	.word	0x000d8aa9

000d90ac <__aeabi_atexit>:
   d90ac:	460b      	mov	r3, r1
   d90ae:	4601      	mov	r1, r0
   d90b0:	4618      	mov	r0, r3
   d90b2:	f000 be65 	b.w	d9d80 <__cxa_atexit>
	...

000d90b8 <_ZSt15get_new_handlerv>:
   d90b8:	4b02      	ldr	r3, [pc, #8]	; (d90c4 <_ZSt15get_new_handlerv+0xc>)
   d90ba:	6818      	ldr	r0, [r3, #0]
   d90bc:	f3bf 8f5f 	dmb	sy
   d90c0:	4770      	bx	lr
   d90c2:	bf00      	nop
   d90c4:	2003e74c 	.word	0x2003e74c

000d90c8 <_ZdlPvj>:
   d90c8:	f7fa bfe5 	b.w	d4096 <_ZdlPv>

000d90cc <_ZnajRKSt9nothrow_t>:
   d90cc:	f000 b800 	b.w	d90d0 <_ZnwjRKSt9nothrow_t>

000d90d0 <_ZnwjRKSt9nothrow_t>:
   d90d0:	b510      	push	{r4, lr}
   d90d2:	2800      	cmp	r0, #0
   d90d4:	bf14      	ite	ne
   d90d6:	4604      	movne	r4, r0
   d90d8:	2401      	moveq	r4, #1
   d90da:	4620      	mov	r0, r4
   d90dc:	f7fe fc84 	bl	d79e8 <malloc>
   d90e0:	b920      	cbnz	r0, d90ec <_ZnwjRKSt9nothrow_t+0x1c>
   d90e2:	f7ff ffe9 	bl	d90b8 <_ZSt15get_new_handlerv>
   d90e6:	b108      	cbz	r0, d90ec <_ZnwjRKSt9nothrow_t+0x1c>
   d90e8:	4780      	blx	r0
   d90ea:	e7f6      	b.n	d90da <_ZnwjRKSt9nothrow_t+0xa>
   d90ec:	bd10      	pop	{r4, pc}
	...

000d90f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d90f0:	4b18      	ldr	r3, [pc, #96]	; (d9154 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d90f2:	681a      	ldr	r2, [r3, #0]
   d90f4:	07d1      	lsls	r1, r2, #31
   d90f6:	bf5c      	itt	pl
   d90f8:	2201      	movpl	r2, #1
   d90fa:	601a      	strpl	r2, [r3, #0]
   d90fc:	4b16      	ldr	r3, [pc, #88]	; (d9158 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d90fe:	681a      	ldr	r2, [r3, #0]
   d9100:	07d2      	lsls	r2, r2, #31
   d9102:	bf5c      	itt	pl
   d9104:	2201      	movpl	r2, #1
   d9106:	601a      	strpl	r2, [r3, #0]
   d9108:	4b14      	ldr	r3, [pc, #80]	; (d915c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d910a:	681a      	ldr	r2, [r3, #0]
   d910c:	07d0      	lsls	r0, r2, #31
   d910e:	bf5c      	itt	pl
   d9110:	2201      	movpl	r2, #1
   d9112:	601a      	strpl	r2, [r3, #0]
   d9114:	4b12      	ldr	r3, [pc, #72]	; (d9160 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d9116:	681a      	ldr	r2, [r3, #0]
   d9118:	07d1      	lsls	r1, r2, #31
   d911a:	bf5c      	itt	pl
   d911c:	2201      	movpl	r2, #1
   d911e:	601a      	strpl	r2, [r3, #0]
   d9120:	4b10      	ldr	r3, [pc, #64]	; (d9164 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d9122:	681a      	ldr	r2, [r3, #0]
   d9124:	07d2      	lsls	r2, r2, #31
   d9126:	bf5c      	itt	pl
   d9128:	2201      	movpl	r2, #1
   d912a:	601a      	strpl	r2, [r3, #0]
   d912c:	4b0e      	ldr	r3, [pc, #56]	; (d9168 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d912e:	681a      	ldr	r2, [r3, #0]
   d9130:	07d0      	lsls	r0, r2, #31
   d9132:	bf5c      	itt	pl
   d9134:	2201      	movpl	r2, #1
   d9136:	601a      	strpl	r2, [r3, #0]
   d9138:	4b0c      	ldr	r3, [pc, #48]	; (d916c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d913a:	681a      	ldr	r2, [r3, #0]
   d913c:	07d1      	lsls	r1, r2, #31
   d913e:	bf5c      	itt	pl
   d9140:	2201      	movpl	r2, #1
   d9142:	601a      	strpl	r2, [r3, #0]
   d9144:	4b0a      	ldr	r3, [pc, #40]	; (d9170 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d9146:	681a      	ldr	r2, [r3, #0]
   d9148:	07d2      	lsls	r2, r2, #31
   d914a:	bf5c      	itt	pl
   d914c:	2201      	movpl	r2, #1
   d914e:	601a      	strpl	r2, [r3, #0]
   d9150:	4770      	bx	lr
   d9152:	bf00      	nop
   d9154:	2003e76c 	.word	0x2003e76c
   d9158:	2003e768 	.word	0x2003e768
   d915c:	2003e764 	.word	0x2003e764
   d9160:	2003e760 	.word	0x2003e760
   d9164:	2003e75c 	.word	0x2003e75c
   d9168:	2003e758 	.word	0x2003e758
   d916c:	2003e754 	.word	0x2003e754
   d9170:	2003e750 	.word	0x2003e750

000d9174 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d9174:	4b24      	ldr	r3, [pc, #144]	; (d9208 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d9176:	681a      	ldr	r2, [r3, #0]
   d9178:	07d0      	lsls	r0, r2, #31
   d917a:	bf5c      	itt	pl
   d917c:	2201      	movpl	r2, #1
   d917e:	601a      	strpl	r2, [r3, #0]
   d9180:	4b22      	ldr	r3, [pc, #136]	; (d920c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d9182:	681a      	ldr	r2, [r3, #0]
   d9184:	07d1      	lsls	r1, r2, #31
   d9186:	bf5c      	itt	pl
   d9188:	2201      	movpl	r2, #1
   d918a:	601a      	strpl	r2, [r3, #0]
   d918c:	4b20      	ldr	r3, [pc, #128]	; (d9210 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d918e:	681a      	ldr	r2, [r3, #0]
   d9190:	07d2      	lsls	r2, r2, #31
   d9192:	bf5c      	itt	pl
   d9194:	2201      	movpl	r2, #1
   d9196:	601a      	strpl	r2, [r3, #0]
   d9198:	4b1e      	ldr	r3, [pc, #120]	; (d9214 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d919a:	681a      	ldr	r2, [r3, #0]
   d919c:	07d0      	lsls	r0, r2, #31
   d919e:	bf5c      	itt	pl
   d91a0:	2201      	movpl	r2, #1
   d91a2:	601a      	strpl	r2, [r3, #0]
   d91a4:	4b1c      	ldr	r3, [pc, #112]	; (d9218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d91a6:	681a      	ldr	r2, [r3, #0]
   d91a8:	07d1      	lsls	r1, r2, #31
   d91aa:	bf5c      	itt	pl
   d91ac:	2201      	movpl	r2, #1
   d91ae:	601a      	strpl	r2, [r3, #0]
   d91b0:	4b1a      	ldr	r3, [pc, #104]	; (d921c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d91b2:	681a      	ldr	r2, [r3, #0]
   d91b4:	07d2      	lsls	r2, r2, #31
   d91b6:	bf5c      	itt	pl
   d91b8:	2201      	movpl	r2, #1
   d91ba:	601a      	strpl	r2, [r3, #0]
   d91bc:	4b18      	ldr	r3, [pc, #96]	; (d9220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d91be:	681a      	ldr	r2, [r3, #0]
   d91c0:	07d0      	lsls	r0, r2, #31
   d91c2:	bf5c      	itt	pl
   d91c4:	2201      	movpl	r2, #1
   d91c6:	601a      	strpl	r2, [r3, #0]
   d91c8:	4b16      	ldr	r3, [pc, #88]	; (d9224 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d91ca:	681a      	ldr	r2, [r3, #0]
   d91cc:	07d1      	lsls	r1, r2, #31
   d91ce:	bf5c      	itt	pl
   d91d0:	2201      	movpl	r2, #1
   d91d2:	601a      	strpl	r2, [r3, #0]
   d91d4:	4b14      	ldr	r3, [pc, #80]	; (d9228 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d91d6:	681a      	ldr	r2, [r3, #0]
   d91d8:	07d2      	lsls	r2, r2, #31
   d91da:	bf5c      	itt	pl
   d91dc:	2201      	movpl	r2, #1
   d91de:	601a      	strpl	r2, [r3, #0]
   d91e0:	4b12      	ldr	r3, [pc, #72]	; (d922c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d91e2:	681a      	ldr	r2, [r3, #0]
   d91e4:	07d0      	lsls	r0, r2, #31
   d91e6:	bf5c      	itt	pl
   d91e8:	2201      	movpl	r2, #1
   d91ea:	601a      	strpl	r2, [r3, #0]
   d91ec:	4b10      	ldr	r3, [pc, #64]	; (d9230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d91ee:	681a      	ldr	r2, [r3, #0]
   d91f0:	07d1      	lsls	r1, r2, #31
   d91f2:	bf5c      	itt	pl
   d91f4:	2201      	movpl	r2, #1
   d91f6:	601a      	strpl	r2, [r3, #0]
   d91f8:	4b0e      	ldr	r3, [pc, #56]	; (d9234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d91fa:	681a      	ldr	r2, [r3, #0]
   d91fc:	07d2      	lsls	r2, r2, #31
   d91fe:	bf5c      	itt	pl
   d9200:	2201      	movpl	r2, #1
   d9202:	601a      	strpl	r2, [r3, #0]
   d9204:	4770      	bx	lr
   d9206:	bf00      	nop
   d9208:	2003e79c 	.word	0x2003e79c
   d920c:	2003e798 	.word	0x2003e798
   d9210:	2003e794 	.word	0x2003e794
   d9214:	2003e790 	.word	0x2003e790
   d9218:	2003e78c 	.word	0x2003e78c
   d921c:	2003e788 	.word	0x2003e788
   d9220:	2003e784 	.word	0x2003e784
   d9224:	2003e780 	.word	0x2003e780
   d9228:	2003e77c 	.word	0x2003e77c
   d922c:	2003e778 	.word	0x2003e778
   d9230:	2003e774 	.word	0x2003e774
   d9234:	2003e770 	.word	0x2003e770

000d9238 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d9238:	4b24      	ldr	r3, [pc, #144]	; (d92cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d923a:	681a      	ldr	r2, [r3, #0]
   d923c:	07d0      	lsls	r0, r2, #31
   d923e:	bf5c      	itt	pl
   d9240:	2201      	movpl	r2, #1
   d9242:	601a      	strpl	r2, [r3, #0]
   d9244:	4b22      	ldr	r3, [pc, #136]	; (d92d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d9246:	681a      	ldr	r2, [r3, #0]
   d9248:	07d1      	lsls	r1, r2, #31
   d924a:	bf5c      	itt	pl
   d924c:	2201      	movpl	r2, #1
   d924e:	601a      	strpl	r2, [r3, #0]
   d9250:	4b20      	ldr	r3, [pc, #128]	; (d92d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d9252:	681a      	ldr	r2, [r3, #0]
   d9254:	07d2      	lsls	r2, r2, #31
   d9256:	bf5c      	itt	pl
   d9258:	2201      	movpl	r2, #1
   d925a:	601a      	strpl	r2, [r3, #0]
   d925c:	4b1e      	ldr	r3, [pc, #120]	; (d92d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d925e:	681a      	ldr	r2, [r3, #0]
   d9260:	07d0      	lsls	r0, r2, #31
   d9262:	bf5c      	itt	pl
   d9264:	2201      	movpl	r2, #1
   d9266:	601a      	strpl	r2, [r3, #0]
   d9268:	4b1c      	ldr	r3, [pc, #112]	; (d92dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d926a:	681a      	ldr	r2, [r3, #0]
   d926c:	07d1      	lsls	r1, r2, #31
   d926e:	bf5c      	itt	pl
   d9270:	2201      	movpl	r2, #1
   d9272:	601a      	strpl	r2, [r3, #0]
   d9274:	4b1a      	ldr	r3, [pc, #104]	; (d92e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d9276:	681a      	ldr	r2, [r3, #0]
   d9278:	07d2      	lsls	r2, r2, #31
   d927a:	bf5c      	itt	pl
   d927c:	2201      	movpl	r2, #1
   d927e:	601a      	strpl	r2, [r3, #0]
   d9280:	4b18      	ldr	r3, [pc, #96]	; (d92e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d9282:	681a      	ldr	r2, [r3, #0]
   d9284:	07d0      	lsls	r0, r2, #31
   d9286:	bf5c      	itt	pl
   d9288:	2201      	movpl	r2, #1
   d928a:	601a      	strpl	r2, [r3, #0]
   d928c:	4b16      	ldr	r3, [pc, #88]	; (d92e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d928e:	681a      	ldr	r2, [r3, #0]
   d9290:	07d1      	lsls	r1, r2, #31
   d9292:	bf5c      	itt	pl
   d9294:	2201      	movpl	r2, #1
   d9296:	601a      	strpl	r2, [r3, #0]
   d9298:	4b14      	ldr	r3, [pc, #80]	; (d92ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d929a:	681a      	ldr	r2, [r3, #0]
   d929c:	07d2      	lsls	r2, r2, #31
   d929e:	bf5c      	itt	pl
   d92a0:	2201      	movpl	r2, #1
   d92a2:	601a      	strpl	r2, [r3, #0]
   d92a4:	4b12      	ldr	r3, [pc, #72]	; (d92f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d92a6:	681a      	ldr	r2, [r3, #0]
   d92a8:	07d0      	lsls	r0, r2, #31
   d92aa:	bf5c      	itt	pl
   d92ac:	2201      	movpl	r2, #1
   d92ae:	601a      	strpl	r2, [r3, #0]
   d92b0:	4b10      	ldr	r3, [pc, #64]	; (d92f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d92b2:	681a      	ldr	r2, [r3, #0]
   d92b4:	07d1      	lsls	r1, r2, #31
   d92b6:	bf5c      	itt	pl
   d92b8:	2201      	movpl	r2, #1
   d92ba:	601a      	strpl	r2, [r3, #0]
   d92bc:	4b0e      	ldr	r3, [pc, #56]	; (d92f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d92be:	681a      	ldr	r2, [r3, #0]
   d92c0:	07d2      	lsls	r2, r2, #31
   d92c2:	bf5c      	itt	pl
   d92c4:	2201      	movpl	r2, #1
   d92c6:	601a      	strpl	r2, [r3, #0]
   d92c8:	4770      	bx	lr
   d92ca:	bf00      	nop
   d92cc:	2003e7cc 	.word	0x2003e7cc
   d92d0:	2003e7c8 	.word	0x2003e7c8
   d92d4:	2003e7c4 	.word	0x2003e7c4
   d92d8:	2003e7c0 	.word	0x2003e7c0
   d92dc:	2003e7bc 	.word	0x2003e7bc
   d92e0:	2003e7b8 	.word	0x2003e7b8
   d92e4:	2003e7b4 	.word	0x2003e7b4
   d92e8:	2003e7b0 	.word	0x2003e7b0
   d92ec:	2003e7ac 	.word	0x2003e7ac
   d92f0:	2003e7a8 	.word	0x2003e7a8
   d92f4:	2003e7a4 	.word	0x2003e7a4
   d92f8:	2003e7a0 	.word	0x2003e7a0

000d92fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d92fc:	4b18      	ldr	r3, [pc, #96]	; (d9360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d92fe:	681a      	ldr	r2, [r3, #0]
   d9300:	07d1      	lsls	r1, r2, #31
   d9302:	bf5c      	itt	pl
   d9304:	2201      	movpl	r2, #1
   d9306:	601a      	strpl	r2, [r3, #0]
   d9308:	4b16      	ldr	r3, [pc, #88]	; (d9364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d930a:	681a      	ldr	r2, [r3, #0]
   d930c:	07d2      	lsls	r2, r2, #31
   d930e:	bf5c      	itt	pl
   d9310:	2201      	movpl	r2, #1
   d9312:	601a      	strpl	r2, [r3, #0]
   d9314:	4b14      	ldr	r3, [pc, #80]	; (d9368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d9316:	681a      	ldr	r2, [r3, #0]
   d9318:	07d0      	lsls	r0, r2, #31
   d931a:	bf5c      	itt	pl
   d931c:	2201      	movpl	r2, #1
   d931e:	601a      	strpl	r2, [r3, #0]
   d9320:	4b12      	ldr	r3, [pc, #72]	; (d936c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d9322:	681a      	ldr	r2, [r3, #0]
   d9324:	07d1      	lsls	r1, r2, #31
   d9326:	bf5c      	itt	pl
   d9328:	2201      	movpl	r2, #1
   d932a:	601a      	strpl	r2, [r3, #0]
   d932c:	4b10      	ldr	r3, [pc, #64]	; (d9370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d932e:	681a      	ldr	r2, [r3, #0]
   d9330:	07d2      	lsls	r2, r2, #31
   d9332:	bf5c      	itt	pl
   d9334:	2201      	movpl	r2, #1
   d9336:	601a      	strpl	r2, [r3, #0]
   d9338:	4b0e      	ldr	r3, [pc, #56]	; (d9374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d933a:	681a      	ldr	r2, [r3, #0]
   d933c:	07d0      	lsls	r0, r2, #31
   d933e:	bf5c      	itt	pl
   d9340:	2201      	movpl	r2, #1
   d9342:	601a      	strpl	r2, [r3, #0]
   d9344:	4b0c      	ldr	r3, [pc, #48]	; (d9378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d9346:	681a      	ldr	r2, [r3, #0]
   d9348:	07d1      	lsls	r1, r2, #31
   d934a:	bf5c      	itt	pl
   d934c:	2201      	movpl	r2, #1
   d934e:	601a      	strpl	r2, [r3, #0]
   d9350:	4b0a      	ldr	r3, [pc, #40]	; (d937c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d9352:	681a      	ldr	r2, [r3, #0]
   d9354:	07d2      	lsls	r2, r2, #31
   d9356:	bf5c      	itt	pl
   d9358:	2201      	movpl	r2, #1
   d935a:	601a      	strpl	r2, [r3, #0]
   d935c:	4770      	bx	lr
   d935e:	bf00      	nop
   d9360:	2003e7ec 	.word	0x2003e7ec
   d9364:	2003e7e8 	.word	0x2003e7e8
   d9368:	2003e7e4 	.word	0x2003e7e4
   d936c:	2003e7e0 	.word	0x2003e7e0
   d9370:	2003e7dc 	.word	0x2003e7dc
   d9374:	2003e7d8 	.word	0x2003e7d8
   d9378:	2003e7d4 	.word	0x2003e7d4
   d937c:	2003e7d0 	.word	0x2003e7d0

000d9380 <__aeabi_drsub>:
   d9380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d9384:	e002      	b.n	d938c <__adddf3>
   d9386:	bf00      	nop

000d9388 <__aeabi_dsub>:
   d9388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d938c <__adddf3>:
   d938c:	b530      	push	{r4, r5, lr}
   d938e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d9392:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d9396:	ea94 0f05 	teq	r4, r5
   d939a:	bf08      	it	eq
   d939c:	ea90 0f02 	teqeq	r0, r2
   d93a0:	bf1f      	itttt	ne
   d93a2:	ea54 0c00 	orrsne.w	ip, r4, r0
   d93a6:	ea55 0c02 	orrsne.w	ip, r5, r2
   d93aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d93ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d93b2:	f000 80e2 	beq.w	d957a <__adddf3+0x1ee>
   d93b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d93ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d93be:	bfb8      	it	lt
   d93c0:	426d      	neglt	r5, r5
   d93c2:	dd0c      	ble.n	d93de <__adddf3+0x52>
   d93c4:	442c      	add	r4, r5
   d93c6:	ea80 0202 	eor.w	r2, r0, r2
   d93ca:	ea81 0303 	eor.w	r3, r1, r3
   d93ce:	ea82 0000 	eor.w	r0, r2, r0
   d93d2:	ea83 0101 	eor.w	r1, r3, r1
   d93d6:	ea80 0202 	eor.w	r2, r0, r2
   d93da:	ea81 0303 	eor.w	r3, r1, r3
   d93de:	2d36      	cmp	r5, #54	; 0x36
   d93e0:	bf88      	it	hi
   d93e2:	bd30      	pophi	{r4, r5, pc}
   d93e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d93e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d93ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d93f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d93f4:	d002      	beq.n	d93fc <__adddf3+0x70>
   d93f6:	4240      	negs	r0, r0
   d93f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d93fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d9400:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d9408:	d002      	beq.n	d9410 <__adddf3+0x84>
   d940a:	4252      	negs	r2, r2
   d940c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9410:	ea94 0f05 	teq	r4, r5
   d9414:	f000 80a7 	beq.w	d9566 <__adddf3+0x1da>
   d9418:	f1a4 0401 	sub.w	r4, r4, #1
   d941c:	f1d5 0e20 	rsbs	lr, r5, #32
   d9420:	db0d      	blt.n	d943e <__adddf3+0xb2>
   d9422:	fa02 fc0e 	lsl.w	ip, r2, lr
   d9426:	fa22 f205 	lsr.w	r2, r2, r5
   d942a:	1880      	adds	r0, r0, r2
   d942c:	f141 0100 	adc.w	r1, r1, #0
   d9430:	fa03 f20e 	lsl.w	r2, r3, lr
   d9434:	1880      	adds	r0, r0, r2
   d9436:	fa43 f305 	asr.w	r3, r3, r5
   d943a:	4159      	adcs	r1, r3
   d943c:	e00e      	b.n	d945c <__adddf3+0xd0>
   d943e:	f1a5 0520 	sub.w	r5, r5, #32
   d9442:	f10e 0e20 	add.w	lr, lr, #32
   d9446:	2a01      	cmp	r2, #1
   d9448:	fa03 fc0e 	lsl.w	ip, r3, lr
   d944c:	bf28      	it	cs
   d944e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d9452:	fa43 f305 	asr.w	r3, r3, r5
   d9456:	18c0      	adds	r0, r0, r3
   d9458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d945c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9460:	d507      	bpl.n	d9472 <__adddf3+0xe6>
   d9462:	f04f 0e00 	mov.w	lr, #0
   d9466:	f1dc 0c00 	rsbs	ip, ip, #0
   d946a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d946e:	eb6e 0101 	sbc.w	r1, lr, r1
   d9472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d9476:	d31b      	bcc.n	d94b0 <__adddf3+0x124>
   d9478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d947c:	d30c      	bcc.n	d9498 <__adddf3+0x10c>
   d947e:	0849      	lsrs	r1, r1, #1
   d9480:	ea5f 0030 	movs.w	r0, r0, rrx
   d9484:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d9488:	f104 0401 	add.w	r4, r4, #1
   d948c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d9490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d9494:	f080 809a 	bcs.w	d95cc <__adddf3+0x240>
   d9498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d949c:	bf08      	it	eq
   d949e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d94a2:	f150 0000 	adcs.w	r0, r0, #0
   d94a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d94aa:	ea41 0105 	orr.w	r1, r1, r5
   d94ae:	bd30      	pop	{r4, r5, pc}
   d94b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d94b4:	4140      	adcs	r0, r0
   d94b6:	eb41 0101 	adc.w	r1, r1, r1
   d94ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d94be:	f1a4 0401 	sub.w	r4, r4, #1
   d94c2:	d1e9      	bne.n	d9498 <__adddf3+0x10c>
   d94c4:	f091 0f00 	teq	r1, #0
   d94c8:	bf04      	itt	eq
   d94ca:	4601      	moveq	r1, r0
   d94cc:	2000      	moveq	r0, #0
   d94ce:	fab1 f381 	clz	r3, r1
   d94d2:	bf08      	it	eq
   d94d4:	3320      	addeq	r3, #32
   d94d6:	f1a3 030b 	sub.w	r3, r3, #11
   d94da:	f1b3 0220 	subs.w	r2, r3, #32
   d94de:	da0c      	bge.n	d94fa <__adddf3+0x16e>
   d94e0:	320c      	adds	r2, #12
   d94e2:	dd08      	ble.n	d94f6 <__adddf3+0x16a>
   d94e4:	f102 0c14 	add.w	ip, r2, #20
   d94e8:	f1c2 020c 	rsb	r2, r2, #12
   d94ec:	fa01 f00c 	lsl.w	r0, r1, ip
   d94f0:	fa21 f102 	lsr.w	r1, r1, r2
   d94f4:	e00c      	b.n	d9510 <__adddf3+0x184>
   d94f6:	f102 0214 	add.w	r2, r2, #20
   d94fa:	bfd8      	it	le
   d94fc:	f1c2 0c20 	rsble	ip, r2, #32
   d9500:	fa01 f102 	lsl.w	r1, r1, r2
   d9504:	fa20 fc0c 	lsr.w	ip, r0, ip
   d9508:	bfdc      	itt	le
   d950a:	ea41 010c 	orrle.w	r1, r1, ip
   d950e:	4090      	lslle	r0, r2
   d9510:	1ae4      	subs	r4, r4, r3
   d9512:	bfa2      	ittt	ge
   d9514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d9518:	4329      	orrge	r1, r5
   d951a:	bd30      	popge	{r4, r5, pc}
   d951c:	ea6f 0404 	mvn.w	r4, r4
   d9520:	3c1f      	subs	r4, #31
   d9522:	da1c      	bge.n	d955e <__adddf3+0x1d2>
   d9524:	340c      	adds	r4, #12
   d9526:	dc0e      	bgt.n	d9546 <__adddf3+0x1ba>
   d9528:	f104 0414 	add.w	r4, r4, #20
   d952c:	f1c4 0220 	rsb	r2, r4, #32
   d9530:	fa20 f004 	lsr.w	r0, r0, r4
   d9534:	fa01 f302 	lsl.w	r3, r1, r2
   d9538:	ea40 0003 	orr.w	r0, r0, r3
   d953c:	fa21 f304 	lsr.w	r3, r1, r4
   d9540:	ea45 0103 	orr.w	r1, r5, r3
   d9544:	bd30      	pop	{r4, r5, pc}
   d9546:	f1c4 040c 	rsb	r4, r4, #12
   d954a:	f1c4 0220 	rsb	r2, r4, #32
   d954e:	fa20 f002 	lsr.w	r0, r0, r2
   d9552:	fa01 f304 	lsl.w	r3, r1, r4
   d9556:	ea40 0003 	orr.w	r0, r0, r3
   d955a:	4629      	mov	r1, r5
   d955c:	bd30      	pop	{r4, r5, pc}
   d955e:	fa21 f004 	lsr.w	r0, r1, r4
   d9562:	4629      	mov	r1, r5
   d9564:	bd30      	pop	{r4, r5, pc}
   d9566:	f094 0f00 	teq	r4, #0
   d956a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d956e:	bf06      	itte	eq
   d9570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d9574:	3401      	addeq	r4, #1
   d9576:	3d01      	subne	r5, #1
   d9578:	e74e      	b.n	d9418 <__adddf3+0x8c>
   d957a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d957e:	bf18      	it	ne
   d9580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9584:	d029      	beq.n	d95da <__adddf3+0x24e>
   d9586:	ea94 0f05 	teq	r4, r5
   d958a:	bf08      	it	eq
   d958c:	ea90 0f02 	teqeq	r0, r2
   d9590:	d005      	beq.n	d959e <__adddf3+0x212>
   d9592:	ea54 0c00 	orrs.w	ip, r4, r0
   d9596:	bf04      	itt	eq
   d9598:	4619      	moveq	r1, r3
   d959a:	4610      	moveq	r0, r2
   d959c:	bd30      	pop	{r4, r5, pc}
   d959e:	ea91 0f03 	teq	r1, r3
   d95a2:	bf1e      	ittt	ne
   d95a4:	2100      	movne	r1, #0
   d95a6:	2000      	movne	r0, #0
   d95a8:	bd30      	popne	{r4, r5, pc}
   d95aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d95ae:	d105      	bne.n	d95bc <__adddf3+0x230>
   d95b0:	0040      	lsls	r0, r0, #1
   d95b2:	4149      	adcs	r1, r1
   d95b4:	bf28      	it	cs
   d95b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d95ba:	bd30      	pop	{r4, r5, pc}
   d95bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d95c0:	bf3c      	itt	cc
   d95c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d95c6:	bd30      	popcc	{r4, r5, pc}
   d95c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d95cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d95d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d95d4:	f04f 0000 	mov.w	r0, #0
   d95d8:	bd30      	pop	{r4, r5, pc}
   d95da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d95de:	bf1a      	itte	ne
   d95e0:	4619      	movne	r1, r3
   d95e2:	4610      	movne	r0, r2
   d95e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d95e8:	bf1c      	itt	ne
   d95ea:	460b      	movne	r3, r1
   d95ec:	4602      	movne	r2, r0
   d95ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d95f2:	bf06      	itte	eq
   d95f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d95f8:	ea91 0f03 	teqeq	r1, r3
   d95fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d9600:	bd30      	pop	{r4, r5, pc}
   d9602:	bf00      	nop

000d9604 <__aeabi_ui2d>:
   d9604:	f090 0f00 	teq	r0, #0
   d9608:	bf04      	itt	eq
   d960a:	2100      	moveq	r1, #0
   d960c:	4770      	bxeq	lr
   d960e:	b530      	push	{r4, r5, lr}
   d9610:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9614:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9618:	f04f 0500 	mov.w	r5, #0
   d961c:	f04f 0100 	mov.w	r1, #0
   d9620:	e750      	b.n	d94c4 <__adddf3+0x138>
   d9622:	bf00      	nop

000d9624 <__aeabi_i2d>:
   d9624:	f090 0f00 	teq	r0, #0
   d9628:	bf04      	itt	eq
   d962a:	2100      	moveq	r1, #0
   d962c:	4770      	bxeq	lr
   d962e:	b530      	push	{r4, r5, lr}
   d9630:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9634:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d963c:	bf48      	it	mi
   d963e:	4240      	negmi	r0, r0
   d9640:	f04f 0100 	mov.w	r1, #0
   d9644:	e73e      	b.n	d94c4 <__adddf3+0x138>
   d9646:	bf00      	nop

000d9648 <__aeabi_f2d>:
   d9648:	0042      	lsls	r2, r0, #1
   d964a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d964e:	ea4f 0131 	mov.w	r1, r1, rrx
   d9652:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d9656:	bf1f      	itttt	ne
   d9658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d965c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d9664:	4770      	bxne	lr
   d9666:	f092 0f00 	teq	r2, #0
   d966a:	bf14      	ite	ne
   d966c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9670:	4770      	bxeq	lr
   d9672:	b530      	push	{r4, r5, lr}
   d9674:	f44f 7460 	mov.w	r4, #896	; 0x380
   d9678:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d967c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9680:	e720      	b.n	d94c4 <__adddf3+0x138>
   d9682:	bf00      	nop

000d9684 <__aeabi_ul2d>:
   d9684:	ea50 0201 	orrs.w	r2, r0, r1
   d9688:	bf08      	it	eq
   d968a:	4770      	bxeq	lr
   d968c:	b530      	push	{r4, r5, lr}
   d968e:	f04f 0500 	mov.w	r5, #0
   d9692:	e00a      	b.n	d96aa <__aeabi_l2d+0x16>

000d9694 <__aeabi_l2d>:
   d9694:	ea50 0201 	orrs.w	r2, r0, r1
   d9698:	bf08      	it	eq
   d969a:	4770      	bxeq	lr
   d969c:	b530      	push	{r4, r5, lr}
   d969e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d96a2:	d502      	bpl.n	d96aa <__aeabi_l2d+0x16>
   d96a4:	4240      	negs	r0, r0
   d96a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d96aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d96ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d96b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d96b6:	f43f aedc 	beq.w	d9472 <__adddf3+0xe6>
   d96ba:	f04f 0203 	mov.w	r2, #3
   d96be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d96c2:	bf18      	it	ne
   d96c4:	3203      	addne	r2, #3
   d96c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d96ca:	bf18      	it	ne
   d96cc:	3203      	addne	r2, #3
   d96ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d96d2:	f1c2 0320 	rsb	r3, r2, #32
   d96d6:	fa00 fc03 	lsl.w	ip, r0, r3
   d96da:	fa20 f002 	lsr.w	r0, r0, r2
   d96de:	fa01 fe03 	lsl.w	lr, r1, r3
   d96e2:	ea40 000e 	orr.w	r0, r0, lr
   d96e6:	fa21 f102 	lsr.w	r1, r1, r2
   d96ea:	4414      	add	r4, r2
   d96ec:	e6c1      	b.n	d9472 <__adddf3+0xe6>
   d96ee:	bf00      	nop

000d96f0 <__aeabi_dmul>:
   d96f0:	b570      	push	{r4, r5, r6, lr}
   d96f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d96f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d96fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d96fe:	bf1d      	ittte	ne
   d9700:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9704:	ea94 0f0c 	teqne	r4, ip
   d9708:	ea95 0f0c 	teqne	r5, ip
   d970c:	f000 f8de 	bleq	d98cc <__aeabi_dmul+0x1dc>
   d9710:	442c      	add	r4, r5
   d9712:	ea81 0603 	eor.w	r6, r1, r3
   d9716:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d971a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d971e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d9722:	bf18      	it	ne
   d9724:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9728:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d972c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9730:	d038      	beq.n	d97a4 <__aeabi_dmul+0xb4>
   d9732:	fba0 ce02 	umull	ip, lr, r0, r2
   d9736:	f04f 0500 	mov.w	r5, #0
   d973a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d973e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d9742:	fbe0 e503 	umlal	lr, r5, r0, r3
   d9746:	f04f 0600 	mov.w	r6, #0
   d974a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d974e:	f09c 0f00 	teq	ip, #0
   d9752:	bf18      	it	ne
   d9754:	f04e 0e01 	orrne.w	lr, lr, #1
   d9758:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d975c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d9760:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d9764:	d204      	bcs.n	d9770 <__aeabi_dmul+0x80>
   d9766:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d976a:	416d      	adcs	r5, r5
   d976c:	eb46 0606 	adc.w	r6, r6, r6
   d9770:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d9774:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d9778:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d977c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d9780:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d9784:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9788:	bf88      	it	hi
   d978a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d978e:	d81e      	bhi.n	d97ce <__aeabi_dmul+0xde>
   d9790:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d9794:	bf08      	it	eq
   d9796:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d979a:	f150 0000 	adcs.w	r0, r0, #0
   d979e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d97a2:	bd70      	pop	{r4, r5, r6, pc}
   d97a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d97a8:	ea46 0101 	orr.w	r1, r6, r1
   d97ac:	ea40 0002 	orr.w	r0, r0, r2
   d97b0:	ea81 0103 	eor.w	r1, r1, r3
   d97b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d97b8:	bfc2      	ittt	gt
   d97ba:	ebd4 050c 	rsbsgt	r5, r4, ip
   d97be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d97c2:	bd70      	popgt	{r4, r5, r6, pc}
   d97c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d97c8:	f04f 0e00 	mov.w	lr, #0
   d97cc:	3c01      	subs	r4, #1
   d97ce:	f300 80ab 	bgt.w	d9928 <__aeabi_dmul+0x238>
   d97d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d97d6:	bfde      	ittt	le
   d97d8:	2000      	movle	r0, #0
   d97da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d97de:	bd70      	pople	{r4, r5, r6, pc}
   d97e0:	f1c4 0400 	rsb	r4, r4, #0
   d97e4:	3c20      	subs	r4, #32
   d97e6:	da35      	bge.n	d9854 <__aeabi_dmul+0x164>
   d97e8:	340c      	adds	r4, #12
   d97ea:	dc1b      	bgt.n	d9824 <__aeabi_dmul+0x134>
   d97ec:	f104 0414 	add.w	r4, r4, #20
   d97f0:	f1c4 0520 	rsb	r5, r4, #32
   d97f4:	fa00 f305 	lsl.w	r3, r0, r5
   d97f8:	fa20 f004 	lsr.w	r0, r0, r4
   d97fc:	fa01 f205 	lsl.w	r2, r1, r5
   d9800:	ea40 0002 	orr.w	r0, r0, r2
   d9804:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d9808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d980c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9810:	fa21 f604 	lsr.w	r6, r1, r4
   d9814:	eb42 0106 	adc.w	r1, r2, r6
   d9818:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d981c:	bf08      	it	eq
   d981e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9822:	bd70      	pop	{r4, r5, r6, pc}
   d9824:	f1c4 040c 	rsb	r4, r4, #12
   d9828:	f1c4 0520 	rsb	r5, r4, #32
   d982c:	fa00 f304 	lsl.w	r3, r0, r4
   d9830:	fa20 f005 	lsr.w	r0, r0, r5
   d9834:	fa01 f204 	lsl.w	r2, r1, r4
   d9838:	ea40 0002 	orr.w	r0, r0, r2
   d983c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9840:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9844:	f141 0100 	adc.w	r1, r1, #0
   d9848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d984c:	bf08      	it	eq
   d984e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9852:	bd70      	pop	{r4, r5, r6, pc}
   d9854:	f1c4 0520 	rsb	r5, r4, #32
   d9858:	fa00 f205 	lsl.w	r2, r0, r5
   d985c:	ea4e 0e02 	orr.w	lr, lr, r2
   d9860:	fa20 f304 	lsr.w	r3, r0, r4
   d9864:	fa01 f205 	lsl.w	r2, r1, r5
   d9868:	ea43 0302 	orr.w	r3, r3, r2
   d986c:	fa21 f004 	lsr.w	r0, r1, r4
   d9870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9874:	fa21 f204 	lsr.w	r2, r1, r4
   d9878:	ea20 0002 	bic.w	r0, r0, r2
   d987c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d9880:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9884:	bf08      	it	eq
   d9886:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d988a:	bd70      	pop	{r4, r5, r6, pc}
   d988c:	f094 0f00 	teq	r4, #0
   d9890:	d10f      	bne.n	d98b2 <__aeabi_dmul+0x1c2>
   d9892:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d9896:	0040      	lsls	r0, r0, #1
   d9898:	eb41 0101 	adc.w	r1, r1, r1
   d989c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d98a0:	bf08      	it	eq
   d98a2:	3c01      	subeq	r4, #1
   d98a4:	d0f7      	beq.n	d9896 <__aeabi_dmul+0x1a6>
   d98a6:	ea41 0106 	orr.w	r1, r1, r6
   d98aa:	f095 0f00 	teq	r5, #0
   d98ae:	bf18      	it	ne
   d98b0:	4770      	bxne	lr
   d98b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d98b6:	0052      	lsls	r2, r2, #1
   d98b8:	eb43 0303 	adc.w	r3, r3, r3
   d98bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d98c0:	bf08      	it	eq
   d98c2:	3d01      	subeq	r5, #1
   d98c4:	d0f7      	beq.n	d98b6 <__aeabi_dmul+0x1c6>
   d98c6:	ea43 0306 	orr.w	r3, r3, r6
   d98ca:	4770      	bx	lr
   d98cc:	ea94 0f0c 	teq	r4, ip
   d98d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d98d4:	bf18      	it	ne
   d98d6:	ea95 0f0c 	teqne	r5, ip
   d98da:	d00c      	beq.n	d98f6 <__aeabi_dmul+0x206>
   d98dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d98e0:	bf18      	it	ne
   d98e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d98e6:	d1d1      	bne.n	d988c <__aeabi_dmul+0x19c>
   d98e8:	ea81 0103 	eor.w	r1, r1, r3
   d98ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d98f0:	f04f 0000 	mov.w	r0, #0
   d98f4:	bd70      	pop	{r4, r5, r6, pc}
   d98f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d98fa:	bf06      	itte	eq
   d98fc:	4610      	moveq	r0, r2
   d98fe:	4619      	moveq	r1, r3
   d9900:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9904:	d019      	beq.n	d993a <__aeabi_dmul+0x24a>
   d9906:	ea94 0f0c 	teq	r4, ip
   d990a:	d102      	bne.n	d9912 <__aeabi_dmul+0x222>
   d990c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d9910:	d113      	bne.n	d993a <__aeabi_dmul+0x24a>
   d9912:	ea95 0f0c 	teq	r5, ip
   d9916:	d105      	bne.n	d9924 <__aeabi_dmul+0x234>
   d9918:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d991c:	bf1c      	itt	ne
   d991e:	4610      	movne	r0, r2
   d9920:	4619      	movne	r1, r3
   d9922:	d10a      	bne.n	d993a <__aeabi_dmul+0x24a>
   d9924:	ea81 0103 	eor.w	r1, r1, r3
   d9928:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d992c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9930:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9934:	f04f 0000 	mov.w	r0, #0
   d9938:	bd70      	pop	{r4, r5, r6, pc}
   d993a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d993e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d9942:	bd70      	pop	{r4, r5, r6, pc}

000d9944 <__aeabi_ddiv>:
   d9944:	b570      	push	{r4, r5, r6, lr}
   d9946:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d994a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d994e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9952:	bf1d      	ittte	ne
   d9954:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9958:	ea94 0f0c 	teqne	r4, ip
   d995c:	ea95 0f0c 	teqne	r5, ip
   d9960:	f000 f8a7 	bleq	d9ab2 <__aeabi_ddiv+0x16e>
   d9964:	eba4 0405 	sub.w	r4, r4, r5
   d9968:	ea81 0e03 	eor.w	lr, r1, r3
   d996c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9970:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9974:	f000 8088 	beq.w	d9a88 <__aeabi_ddiv+0x144>
   d9978:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d997c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d9980:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d9984:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d9988:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d998c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d9990:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d9994:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d9998:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d999c:	429d      	cmp	r5, r3
   d999e:	bf08      	it	eq
   d99a0:	4296      	cmpeq	r6, r2
   d99a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d99a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d99aa:	d202      	bcs.n	d99b2 <__aeabi_ddiv+0x6e>
   d99ac:	085b      	lsrs	r3, r3, #1
   d99ae:	ea4f 0232 	mov.w	r2, r2, rrx
   d99b2:	1ab6      	subs	r6, r6, r2
   d99b4:	eb65 0503 	sbc.w	r5, r5, r3
   d99b8:	085b      	lsrs	r3, r3, #1
   d99ba:	ea4f 0232 	mov.w	r2, r2, rrx
   d99be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d99c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d99c6:	ebb6 0e02 	subs.w	lr, r6, r2
   d99ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   d99ce:	bf22      	ittt	cs
   d99d0:	1ab6      	subcs	r6, r6, r2
   d99d2:	4675      	movcs	r5, lr
   d99d4:	ea40 000c 	orrcs.w	r0, r0, ip
   d99d8:	085b      	lsrs	r3, r3, #1
   d99da:	ea4f 0232 	mov.w	r2, r2, rrx
   d99de:	ebb6 0e02 	subs.w	lr, r6, r2
   d99e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d99e6:	bf22      	ittt	cs
   d99e8:	1ab6      	subcs	r6, r6, r2
   d99ea:	4675      	movcs	r5, lr
   d99ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d99f0:	085b      	lsrs	r3, r3, #1
   d99f2:	ea4f 0232 	mov.w	r2, r2, rrx
   d99f6:	ebb6 0e02 	subs.w	lr, r6, r2
   d99fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d99fe:	bf22      	ittt	cs
   d9a00:	1ab6      	subcs	r6, r6, r2
   d9a02:	4675      	movcs	r5, lr
   d9a04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d9a08:	085b      	lsrs	r3, r3, #1
   d9a0a:	ea4f 0232 	mov.w	r2, r2, rrx
   d9a0e:	ebb6 0e02 	subs.w	lr, r6, r2
   d9a12:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9a16:	bf22      	ittt	cs
   d9a18:	1ab6      	subcs	r6, r6, r2
   d9a1a:	4675      	movcs	r5, lr
   d9a1c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d9a20:	ea55 0e06 	orrs.w	lr, r5, r6
   d9a24:	d018      	beq.n	d9a58 <__aeabi_ddiv+0x114>
   d9a26:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d9a2a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d9a2e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d9a32:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d9a36:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d9a3a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d9a3e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d9a42:	d1c0      	bne.n	d99c6 <__aeabi_ddiv+0x82>
   d9a44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9a48:	d10b      	bne.n	d9a62 <__aeabi_ddiv+0x11e>
   d9a4a:	ea41 0100 	orr.w	r1, r1, r0
   d9a4e:	f04f 0000 	mov.w	r0, #0
   d9a52:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d9a56:	e7b6      	b.n	d99c6 <__aeabi_ddiv+0x82>
   d9a58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9a5c:	bf04      	itt	eq
   d9a5e:	4301      	orreq	r1, r0
   d9a60:	2000      	moveq	r0, #0
   d9a62:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9a66:	bf88      	it	hi
   d9a68:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9a6c:	f63f aeaf 	bhi.w	d97ce <__aeabi_dmul+0xde>
   d9a70:	ebb5 0c03 	subs.w	ip, r5, r3
   d9a74:	bf04      	itt	eq
   d9a76:	ebb6 0c02 	subseq.w	ip, r6, r2
   d9a7a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9a7e:	f150 0000 	adcs.w	r0, r0, #0
   d9a82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9a86:	bd70      	pop	{r4, r5, r6, pc}
   d9a88:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9a8c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d9a90:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d9a94:	bfc2      	ittt	gt
   d9a96:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9a9a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9a9e:	bd70      	popgt	{r4, r5, r6, pc}
   d9aa0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9aa4:	f04f 0e00 	mov.w	lr, #0
   d9aa8:	3c01      	subs	r4, #1
   d9aaa:	e690      	b.n	d97ce <__aeabi_dmul+0xde>
   d9aac:	ea45 0e06 	orr.w	lr, r5, r6
   d9ab0:	e68d      	b.n	d97ce <__aeabi_dmul+0xde>
   d9ab2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9ab6:	ea94 0f0c 	teq	r4, ip
   d9aba:	bf08      	it	eq
   d9abc:	ea95 0f0c 	teqeq	r5, ip
   d9ac0:	f43f af3b 	beq.w	d993a <__aeabi_dmul+0x24a>
   d9ac4:	ea94 0f0c 	teq	r4, ip
   d9ac8:	d10a      	bne.n	d9ae0 <__aeabi_ddiv+0x19c>
   d9aca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9ace:	f47f af34 	bne.w	d993a <__aeabi_dmul+0x24a>
   d9ad2:	ea95 0f0c 	teq	r5, ip
   d9ad6:	f47f af25 	bne.w	d9924 <__aeabi_dmul+0x234>
   d9ada:	4610      	mov	r0, r2
   d9adc:	4619      	mov	r1, r3
   d9ade:	e72c      	b.n	d993a <__aeabi_dmul+0x24a>
   d9ae0:	ea95 0f0c 	teq	r5, ip
   d9ae4:	d106      	bne.n	d9af4 <__aeabi_ddiv+0x1b0>
   d9ae6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9aea:	f43f aefd 	beq.w	d98e8 <__aeabi_dmul+0x1f8>
   d9aee:	4610      	mov	r0, r2
   d9af0:	4619      	mov	r1, r3
   d9af2:	e722      	b.n	d993a <__aeabi_dmul+0x24a>
   d9af4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9af8:	bf18      	it	ne
   d9afa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9afe:	f47f aec5 	bne.w	d988c <__aeabi_dmul+0x19c>
   d9b02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d9b06:	f47f af0d 	bne.w	d9924 <__aeabi_dmul+0x234>
   d9b0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d9b0e:	f47f aeeb 	bne.w	d98e8 <__aeabi_dmul+0x1f8>
   d9b12:	e712      	b.n	d993a <__aeabi_dmul+0x24a>

000d9b14 <__gedf2>:
   d9b14:	f04f 3cff 	mov.w	ip, #4294967295
   d9b18:	e006      	b.n	d9b28 <__cmpdf2+0x4>
   d9b1a:	bf00      	nop

000d9b1c <__ledf2>:
   d9b1c:	f04f 0c01 	mov.w	ip, #1
   d9b20:	e002      	b.n	d9b28 <__cmpdf2+0x4>
   d9b22:	bf00      	nop

000d9b24 <__cmpdf2>:
   d9b24:	f04f 0c01 	mov.w	ip, #1
   d9b28:	f84d cd04 	str.w	ip, [sp, #-4]!
   d9b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9b38:	bf18      	it	ne
   d9b3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d9b3e:	d01b      	beq.n	d9b78 <__cmpdf2+0x54>
   d9b40:	b001      	add	sp, #4
   d9b42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d9b46:	bf0c      	ite	eq
   d9b48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d9b4c:	ea91 0f03 	teqne	r1, r3
   d9b50:	bf02      	ittt	eq
   d9b52:	ea90 0f02 	teqeq	r0, r2
   d9b56:	2000      	moveq	r0, #0
   d9b58:	4770      	bxeq	lr
   d9b5a:	f110 0f00 	cmn.w	r0, #0
   d9b5e:	ea91 0f03 	teq	r1, r3
   d9b62:	bf58      	it	pl
   d9b64:	4299      	cmppl	r1, r3
   d9b66:	bf08      	it	eq
   d9b68:	4290      	cmpeq	r0, r2
   d9b6a:	bf2c      	ite	cs
   d9b6c:	17d8      	asrcs	r0, r3, #31
   d9b6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d9b72:	f040 0001 	orr.w	r0, r0, #1
   d9b76:	4770      	bx	lr
   d9b78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9b7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9b80:	d102      	bne.n	d9b88 <__cmpdf2+0x64>
   d9b82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9b86:	d107      	bne.n	d9b98 <__cmpdf2+0x74>
   d9b88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9b8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9b90:	d1d6      	bne.n	d9b40 <__cmpdf2+0x1c>
   d9b92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9b96:	d0d3      	beq.n	d9b40 <__cmpdf2+0x1c>
   d9b98:	f85d 0b04 	ldr.w	r0, [sp], #4
   d9b9c:	4770      	bx	lr
   d9b9e:	bf00      	nop

000d9ba0 <__aeabi_cdrcmple>:
   d9ba0:	4684      	mov	ip, r0
   d9ba2:	4610      	mov	r0, r2
   d9ba4:	4662      	mov	r2, ip
   d9ba6:	468c      	mov	ip, r1
   d9ba8:	4619      	mov	r1, r3
   d9baa:	4663      	mov	r3, ip
   d9bac:	e000      	b.n	d9bb0 <__aeabi_cdcmpeq>
   d9bae:	bf00      	nop

000d9bb0 <__aeabi_cdcmpeq>:
   d9bb0:	b501      	push	{r0, lr}
   d9bb2:	f7ff ffb7 	bl	d9b24 <__cmpdf2>
   d9bb6:	2800      	cmp	r0, #0
   d9bb8:	bf48      	it	mi
   d9bba:	f110 0f00 	cmnmi.w	r0, #0
   d9bbe:	bd01      	pop	{r0, pc}

000d9bc0 <__aeabi_dcmpeq>:
   d9bc0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9bc4:	f7ff fff4 	bl	d9bb0 <__aeabi_cdcmpeq>
   d9bc8:	bf0c      	ite	eq
   d9bca:	2001      	moveq	r0, #1
   d9bcc:	2000      	movne	r0, #0
   d9bce:	f85d fb08 	ldr.w	pc, [sp], #8
   d9bd2:	bf00      	nop

000d9bd4 <__aeabi_dcmplt>:
   d9bd4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9bd8:	f7ff ffea 	bl	d9bb0 <__aeabi_cdcmpeq>
   d9bdc:	bf34      	ite	cc
   d9bde:	2001      	movcc	r0, #1
   d9be0:	2000      	movcs	r0, #0
   d9be2:	f85d fb08 	ldr.w	pc, [sp], #8
   d9be6:	bf00      	nop

000d9be8 <__aeabi_dcmple>:
   d9be8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9bec:	f7ff ffe0 	bl	d9bb0 <__aeabi_cdcmpeq>
   d9bf0:	bf94      	ite	ls
   d9bf2:	2001      	movls	r0, #1
   d9bf4:	2000      	movhi	r0, #0
   d9bf6:	f85d fb08 	ldr.w	pc, [sp], #8
   d9bfa:	bf00      	nop

000d9bfc <__aeabi_dcmpge>:
   d9bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9c00:	f7ff ffce 	bl	d9ba0 <__aeabi_cdrcmple>
   d9c04:	bf94      	ite	ls
   d9c06:	2001      	movls	r0, #1
   d9c08:	2000      	movhi	r0, #0
   d9c0a:	f85d fb08 	ldr.w	pc, [sp], #8
   d9c0e:	bf00      	nop

000d9c10 <__aeabi_dcmpgt>:
   d9c10:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9c14:	f7ff ffc4 	bl	d9ba0 <__aeabi_cdrcmple>
   d9c18:	bf34      	ite	cc
   d9c1a:	2001      	movcc	r0, #1
   d9c1c:	2000      	movcs	r0, #0
   d9c1e:	f85d fb08 	ldr.w	pc, [sp], #8
   d9c22:	bf00      	nop

000d9c24 <__aeabi_dcmpun>:
   d9c24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9c28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9c2c:	d102      	bne.n	d9c34 <__aeabi_dcmpun+0x10>
   d9c2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9c32:	d10a      	bne.n	d9c4a <__aeabi_dcmpun+0x26>
   d9c34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9c38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9c3c:	d102      	bne.n	d9c44 <__aeabi_dcmpun+0x20>
   d9c3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9c42:	d102      	bne.n	d9c4a <__aeabi_dcmpun+0x26>
   d9c44:	f04f 0000 	mov.w	r0, #0
   d9c48:	4770      	bx	lr
   d9c4a:	f04f 0001 	mov.w	r0, #1
   d9c4e:	4770      	bx	lr

000d9c50 <__aeabi_d2iz>:
   d9c50:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9c54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9c58:	d215      	bcs.n	d9c86 <__aeabi_d2iz+0x36>
   d9c5a:	d511      	bpl.n	d9c80 <__aeabi_d2iz+0x30>
   d9c5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9c60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9c64:	d912      	bls.n	d9c8c <__aeabi_d2iz+0x3c>
   d9c66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9c6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9c6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9c72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9c76:	fa23 f002 	lsr.w	r0, r3, r2
   d9c7a:	bf18      	it	ne
   d9c7c:	4240      	negne	r0, r0
   d9c7e:	4770      	bx	lr
   d9c80:	f04f 0000 	mov.w	r0, #0
   d9c84:	4770      	bx	lr
   d9c86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9c8a:	d105      	bne.n	d9c98 <__aeabi_d2iz+0x48>
   d9c8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d9c90:	bf08      	it	eq
   d9c92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9c96:	4770      	bx	lr
   d9c98:	f04f 0000 	mov.w	r0, #0
   d9c9c:	4770      	bx	lr
   d9c9e:	bf00      	nop

000d9ca0 <__aeabi_d2uiz>:
   d9ca0:	004a      	lsls	r2, r1, #1
   d9ca2:	d211      	bcs.n	d9cc8 <__aeabi_d2uiz+0x28>
   d9ca4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9ca8:	d211      	bcs.n	d9cce <__aeabi_d2uiz+0x2e>
   d9caa:	d50d      	bpl.n	d9cc8 <__aeabi_d2uiz+0x28>
   d9cac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9cb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9cb4:	d40e      	bmi.n	d9cd4 <__aeabi_d2uiz+0x34>
   d9cb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9cba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9cbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9cc2:	fa23 f002 	lsr.w	r0, r3, r2
   d9cc6:	4770      	bx	lr
   d9cc8:	f04f 0000 	mov.w	r0, #0
   d9ccc:	4770      	bx	lr
   d9cce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9cd2:	d102      	bne.n	d9cda <__aeabi_d2uiz+0x3a>
   d9cd4:	f04f 30ff 	mov.w	r0, #4294967295
   d9cd8:	4770      	bx	lr
   d9cda:	f04f 0000 	mov.w	r0, #0
   d9cde:	4770      	bx	lr

000d9ce0 <__aeabi_d2f>:
   d9ce0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9ce4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d9ce8:	bf24      	itt	cs
   d9cea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d9cee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d9cf2:	d90d      	bls.n	d9d10 <__aeabi_d2f+0x30>
   d9cf4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9cf8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d9cfc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d9d00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d9d04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9d08:	bf08      	it	eq
   d9d0a:	f020 0001 	biceq.w	r0, r0, #1
   d9d0e:	4770      	bx	lr
   d9d10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d9d14:	d121      	bne.n	d9d5a <__aeabi_d2f+0x7a>
   d9d16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d9d1a:	bfbc      	itt	lt
   d9d1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d9d20:	4770      	bxlt	lr
   d9d22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9d26:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d9d2a:	f1c2 0218 	rsb	r2, r2, #24
   d9d2e:	f1c2 0c20 	rsb	ip, r2, #32
   d9d32:	fa10 f30c 	lsls.w	r3, r0, ip
   d9d36:	fa20 f002 	lsr.w	r0, r0, r2
   d9d3a:	bf18      	it	ne
   d9d3c:	f040 0001 	orrne.w	r0, r0, #1
   d9d40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9d44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9d48:	fa03 fc0c 	lsl.w	ip, r3, ip
   d9d4c:	ea40 000c 	orr.w	r0, r0, ip
   d9d50:	fa23 f302 	lsr.w	r3, r3, r2
   d9d54:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9d58:	e7cc      	b.n	d9cf4 <__aeabi_d2f+0x14>
   d9d5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d9d5e:	d107      	bne.n	d9d70 <__aeabi_d2f+0x90>
   d9d60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d9d64:	bf1e      	ittt	ne
   d9d66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d9d6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d9d6e:	4770      	bxne	lr
   d9d70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d9d74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9d78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9d7c:	4770      	bx	lr
   d9d7e:	bf00      	nop

000d9d80 <__cxa_atexit>:
   d9d80:	b510      	push	{r4, lr}
   d9d82:	4c05      	ldr	r4, [pc, #20]	; (d9d98 <__cxa_atexit+0x18>)
   d9d84:	4613      	mov	r3, r2
   d9d86:	b12c      	cbz	r4, d9d94 <__cxa_atexit+0x14>
   d9d88:	460a      	mov	r2, r1
   d9d8a:	4601      	mov	r1, r0
   d9d8c:	2002      	movs	r0, #2
   d9d8e:	f3af 8000 	nop.w
   d9d92:	bd10      	pop	{r4, pc}
   d9d94:	4620      	mov	r0, r4
   d9d96:	bd10      	pop	{r4, pc}
   d9d98:	00000000 	.word	0x00000000

000d9d9c <memcmp>:
   d9d9c:	b510      	push	{r4, lr}
   d9d9e:	3901      	subs	r1, #1
   d9da0:	4402      	add	r2, r0
   d9da2:	4290      	cmp	r0, r2
   d9da4:	d007      	beq.n	d9db6 <memcmp+0x1a>
   d9da6:	f810 3b01 	ldrb.w	r3, [r0], #1
   d9daa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d9dae:	42a3      	cmp	r3, r4
   d9db0:	d0f7      	beq.n	d9da2 <memcmp+0x6>
   d9db2:	1b18      	subs	r0, r3, r4
   d9db4:	bd10      	pop	{r4, pc}
   d9db6:	2000      	movs	r0, #0
   d9db8:	bd10      	pop	{r4, pc}

000d9dba <memcpy>:
   d9dba:	b510      	push	{r4, lr}
   d9dbc:	1e43      	subs	r3, r0, #1
   d9dbe:	440a      	add	r2, r1
   d9dc0:	4291      	cmp	r1, r2
   d9dc2:	d004      	beq.n	d9dce <memcpy+0x14>
   d9dc4:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9dc8:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9dcc:	e7f8      	b.n	d9dc0 <memcpy+0x6>
   d9dce:	bd10      	pop	{r4, pc}

000d9dd0 <memset>:
   d9dd0:	4402      	add	r2, r0
   d9dd2:	4603      	mov	r3, r0
   d9dd4:	4293      	cmp	r3, r2
   d9dd6:	d002      	beq.n	d9dde <memset+0xe>
   d9dd8:	f803 1b01 	strb.w	r1, [r3], #1
   d9ddc:	e7fa      	b.n	d9dd4 <memset+0x4>
   d9dde:	4770      	bx	lr

000d9de0 <srand>:
   d9de0:	b538      	push	{r3, r4, r5, lr}
   d9de2:	4b12      	ldr	r3, [pc, #72]	; (d9e2c <srand+0x4c>)
   d9de4:	681c      	ldr	r4, [r3, #0]
   d9de6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9de8:	4605      	mov	r5, r0
   d9dea:	b9d3      	cbnz	r3, d9e22 <srand+0x42>
   d9dec:	2018      	movs	r0, #24
   d9dee:	f7fd fdfb 	bl	d79e8 <malloc>
   d9df2:	f243 330e 	movw	r3, #13070	; 0x330e
   d9df6:	63a0      	str	r0, [r4, #56]	; 0x38
   d9df8:	8003      	strh	r3, [r0, #0]
   d9dfa:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d9dfe:	8043      	strh	r3, [r0, #2]
   d9e00:	f241 2334 	movw	r3, #4660	; 0x1234
   d9e04:	8083      	strh	r3, [r0, #4]
   d9e06:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d9e0a:	80c3      	strh	r3, [r0, #6]
   d9e0c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9e10:	8103      	strh	r3, [r0, #8]
   d9e12:	2305      	movs	r3, #5
   d9e14:	8143      	strh	r3, [r0, #10]
   d9e16:	230b      	movs	r3, #11
   d9e18:	8183      	strh	r3, [r0, #12]
   d9e1a:	2201      	movs	r2, #1
   d9e1c:	2300      	movs	r3, #0
   d9e1e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9e22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9e24:	2200      	movs	r2, #0
   d9e26:	611d      	str	r5, [r3, #16]
   d9e28:	615a      	str	r2, [r3, #20]
   d9e2a:	bd38      	pop	{r3, r4, r5, pc}
   d9e2c:	2003dd98 	.word	0x2003dd98

000d9e30 <rand>:
   d9e30:	4b19      	ldr	r3, [pc, #100]	; (d9e98 <rand+0x68>)
   d9e32:	b510      	push	{r4, lr}
   d9e34:	681c      	ldr	r4, [r3, #0]
   d9e36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9e38:	b9d3      	cbnz	r3, d9e70 <rand+0x40>
   d9e3a:	2018      	movs	r0, #24
   d9e3c:	f7fd fdd4 	bl	d79e8 <malloc>
   d9e40:	f243 330e 	movw	r3, #13070	; 0x330e
   d9e44:	63a0      	str	r0, [r4, #56]	; 0x38
   d9e46:	8003      	strh	r3, [r0, #0]
   d9e48:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d9e4c:	8043      	strh	r3, [r0, #2]
   d9e4e:	f241 2334 	movw	r3, #4660	; 0x1234
   d9e52:	8083      	strh	r3, [r0, #4]
   d9e54:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d9e58:	80c3      	strh	r3, [r0, #6]
   d9e5a:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9e5e:	8103      	strh	r3, [r0, #8]
   d9e60:	2305      	movs	r3, #5
   d9e62:	8143      	strh	r3, [r0, #10]
   d9e64:	230b      	movs	r3, #11
   d9e66:	8183      	strh	r3, [r0, #12]
   d9e68:	2201      	movs	r2, #1
   d9e6a:	2300      	movs	r3, #0
   d9e6c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9e70:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d9e72:	4c0a      	ldr	r4, [pc, #40]	; (d9e9c <rand+0x6c>)
   d9e74:	690b      	ldr	r3, [r1, #16]
   d9e76:	6948      	ldr	r0, [r1, #20]
   d9e78:	4a09      	ldr	r2, [pc, #36]	; (d9ea0 <rand+0x70>)
   d9e7a:	435c      	muls	r4, r3
   d9e7c:	fb02 4000 	mla	r0, r2, r0, r4
   d9e80:	fba3 2302 	umull	r2, r3, r3, r2
   d9e84:	3201      	adds	r2, #1
   d9e86:	4403      	add	r3, r0
   d9e88:	f143 0300 	adc.w	r3, r3, #0
   d9e8c:	e9c1 2304 	strd	r2, r3, [r1, #16]
   d9e90:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d9e94:	bd10      	pop	{r4, pc}
   d9e96:	bf00      	nop
   d9e98:	2003dd98 	.word	0x2003dd98
   d9e9c:	5851f42d 	.word	0x5851f42d
   d9ea0:	4c957f2d 	.word	0x4c957f2d

000d9ea4 <strlen>:
   d9ea4:	4603      	mov	r3, r0
   d9ea6:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9eaa:	2a00      	cmp	r2, #0
   d9eac:	d1fb      	bne.n	d9ea6 <strlen+0x2>
   d9eae:	1a18      	subs	r0, r3, r0
   d9eb0:	3801      	subs	r0, #1
   d9eb2:	4770      	bx	lr

000d9eb4 <dynalib_user>:
   d9eb4:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d9ec4:	0000 0000                                   ....

000d9ec8 <_ZL17test_button_press>:
   d9ec8:	2e33 5420 7365 2074 7542 7474 6e6f 5020     3. Test Button P
   d9ed8:	6572 7373 000a                              ress..

000d9ede <_ZL11test_header>:
   d9ede:	4749 2048 6853 6569 646c 5420 7365 0074     IGH Shield Test.

000d9eee <_ZL12test_success>:
   d9eee:	4f20 004b                                    OK.

000d9ef2 <_ZL16test_rfm69_radio>:
   d9ef2:	2e36 5420 7365 2074 6152 6964 0a6f 2000          6. Test Radio..

000d9f01 <_ZL9test_fail>:
   d9f01:	4520 5252 524f 3f00                               ERROR.

000d9f08 <_ZL16test_cmd_options>:
   d9f08:	2e3f 4f20 7470 6f69 736e 000a               ?. Options..

000d9f14 <_ZL14test_flash_cmd>:
   d9f14:	2e31 5420 7365 2074 4545 5250 4d4f 000a     1. Test EEPROM..
   d9f24:	540a 7365 6974 676e 6620 616c 6873 003a     .Testing flash:.
   d9f34:	500a 6572 7373 6220 7475 6f74 206e 6f66     .Press button fo
   d9f44:	3a72 0020 5320 6365 6e6f 7364 0a00 6554     r: . Seconds..Te
   d9f54:	7473 6e69 2067 7542 7474 6e6f 003a 540a     sting Button:..T
   d9f64:	7365 6974 676e 5620 6c61 6576 003a 540a     esting Valve:..T
   d9f74:	7365 6974 676e 5320 2044 6143 6472 003a     esting SD Card:.
   d9f84:	540a 7365 6974 676e 5220 6461 6f69 003a     .Testing Radio:.

000d9f94 <_ZL15test_device_api>:
   d9f94:	2e32 5420 7365 2074 6544 6976 6563 4120     2. Test Device A
   d9fa4:	4950 000a                                   PI..

000d9fa8 <_ZL12test_padding>:
   d9fa8:	2a0a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     .***************
   d9fb8:	000a                                        ..

000d9fba <_ZL16test_valve_state>:
   d9fba:	2e34 5420 7365 2074 6156 766c 2065 6f43     4. Test Valve Co
   d9fca:	746e 6f72 0a6c 3500                              ntrol..

000d9fd1 <_ZL12test_sd_card>:
   d9fd1:	2e35 5420 7365 2074 4453 4320 7261 0a64     5. Test SD Card.
   d9fe1:	e000 ce0f 9a68 4775 e705 0e9a 7437 7365     ....h.uG....7tes
   d9ff1:	2e74 7262 6b6f 7265 632e 6d6f 0000 0000          t.broker.com...

000da000 <_ZTV5Timer>:
	...
   da008:	4831 000d 4879 000d 47b9 000d 550a 696e     1H..yH...G...Uni
   da018:	2078 6954 656d 203a 2020 2020 0020 6c63     x Time:      .cl
   da028:	756f 2064 7473 7461 7375 203a 2020 2020     oud status:     
   da038:	6e00 7465 6f77 6b72 7320 6174 7574 3a73     .network status:
   da048:	2020 0020 6973 6e67 6c61 7320 7274 6e65        .signal stren
   da058:	7467 3a68 2020 7300 6769 616e 206c 7571     gth:  .signal qu
   da068:	6c61 7469 3a79 2020 0020 6142 7474 7265     ality:   .Batter
   da078:	2079 6f56 746c 6761 3a65 2020 4200 7461     y Voltage:  .Bat
   da088:	6574 7972 5320 434f 203a 2020 2020 0020     tery SOC:      .

000da098 <_ZTVN8particle13__SPISettingsE>:
	...
   da0a0:	4c15 000d                                   .L..

000da0a4 <_ZTV4File>:
	...
   da0ac:	4c13 000d 4cab 000d 4c85 000d 4c79 000d     .L...L...L..yL..
   da0bc:	4bf5 000d 4cef 000d 4c73 000d 4c6d 000d     .K...L..sL..mL..

000da0cc <_ZTV6SdFile>:
	...
   da0d4:	4c11 000d 4c9d 000d 4cb9 000d 4c7f 000d     .L...L...L...L..
   da0e4:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   da0f4:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   da104:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   da114:	676e 2073 7325 6c25 2075 7325 4d20 444f     ngs %s%lu %s MOD
   da124:	2545 3e64 2500 3230 2558 3230 2558 3230     E%d>.%02X%02X%02
   da134:	2558 3230 2e58 4f4c 0047 002f 4749 2d48     X%02X.LOG./.IGH-
   da144:	4652 364d 4839 5743 4b2d 5945 3c00 4554     RFM69HCW-KEY.<TE
   da154:	5453 003e 543c 5345 3a54 4b4f 003e 0000     ST>.<TEST:OK>...

000da164 <_ZTV5RFM69>:
	...
   da16c:	7051 000d                                   Qp..

000da170 <_ZTVN5spark13EthernetClassE>:
	...
   da178:	7a97 000d 7a8d 000d 7a83 000d 7a79 000d     .z...z...z..yz..
   da188:	7a6d 000d 7a61 000d 7a55 000d 7a4d 000d     mz..az..Uz..Mz..
   da198:	7a43 000d 7a39 000d 8dbd 000d               Cz..9z......

000da1a4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   da1a4:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
   da1b4:	002e 6e69 0066 6162 6475 5300 7265 6169     ..inf.baud.Seria
   da1c4:	006c 6553 6972 6c61 0031 7974 6570 7000     l.Serial1.type.p
   da1d4:	7261 6d61 6300 646d 6900 0064 6e68 0064     aram.cmd.id.hnd.
   da1e4:	7473 6d72 6600 6c69 0074 766c 006c 6461     strm.filt.lvl.ad
   da1f4:	4864 6e61 6c64 7265 7200 6d65 766f 4865     dHandler.removeH
   da204:	6e61 6c64 7265 6500 756e 486d 6e61 6c64     andler.enumHandl
   da214:	7265 0073 534a 4e4f 7453 6572 6d61 6f4c     ers.JSONStreamLo
   da224:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
   da234:	7530 0020 205d 2500 0064 202c 2800 3a29     0u .] .%d., .():
   da244:	0020 5b20 6300 646f 2065 203d 2500 0069      . [.code = .%i.
   da254:	6564 6174 6c69 2073 203d 0d00 000a 6e6c     details = ....ln
   da264:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   da274:	6f6e 656e 7400 6172 6563 6900 666e 006f     none.trace.info.
   da284:	6177 6e72 6500 7272 726f 7000 6e61 6369     warn.error.panic
   da294:	6100 6c6c 5a00 2500 302b 6433 253a 3230     .all.Z.%+03d:%02
   da2a4:	0075 5925 252d 2d6d 6425 2554 3a48 4d25     u.%Y-%m-%dT%H:%M
   da2b4:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000da2c4 <_ZTV14CellularSignal>:
	...
   da2cc:	49c9 000d 49cb 000d 82c1 000d 8351 000d     .I...I......Q...
   da2dc:	82c5 000d 831d 000d 82f1 000d 83db 000d     ................
   da2ec:	fffc ffff 0000 0000 8405 000d               ............

000da2f8 <_ZTV9IPAddress>:
	...
   da300:	8659 000d 8649 000d 864b 000d               Y...I...K...

000da30c <_ZTV9USBSerial>:
	...
   da314:	8731 000d 8781 000d 878f 000d 7f35 000d     1...........5...
   da324:	876d 000d 8733 000d 8749 000d 877b 000d     m...3...I...{...
   da334:	875f 000d 872d 000d                         _...-...

000da33c <_ZTVN5spark13CellularClassE>:
	...
   da344:	88f7 000d 88ed 000d 88e3 000d 8899 000d     ................
   da354:	88d7 000d 88cb 000d 88bf 000d 88b7 000d     ................
   da364:	88ad 000d 88a3 000d 8dbd 000d               ............

000da370 <_ZTV11USARTSerial>:
	...
   da378:	89a5 000d 89f5 000d 8a03 000d 7f35 000d     ............5...
   da388:	89b9 000d 89db 000d 89c7 000d 89ef 000d     ................
   da398:	89a7 000d 89ab 000d                         ........

000da3a0 <_ZTV7TwoWire>:
	...
   da3a8:	8aa9 000d 8af3 000d 8acb 000d 8aab 000d     ................
   da3b8:	8ad3 000d 8adb 000d 8ae3 000d 8aeb 000d     ................

000da3c8 <_ZTVN5spark9MeshClassE>:
	...
   da3d0:	8c37 000d 8c2d 000d 8c23 000d 8c19 000d     7...-...#.......
   da3e0:	8c0d 000d 8c01 000d 8bf5 000d 8bed 000d     ................
   da3f0:	8be3 000d 8bd9 000d 8dbd 000d               ............

000da3fc <_ZTVN5spark12NetworkClassE>:
	...
   da404:	8d55 000d 8d5f 000d 8d69 000d 8d73 000d     U..._...i...s...
   da414:	8d7d 000d 8d89 000d 8d95 000d 8da1 000d     }...............
   da424:	8da9 000d 8db3 000d 8dbd 000d               ............

000da430 <_ZSt7nothrow>:
   da430:	0000 0000                                   ....

000da434 <__sf_fake_stdin>:
	...

000da454 <__sf_fake_stdout>:
	...

000da474 <__sf_fake_stderr>:
	...
   da494:	0043                                        C.

000da496 <link_const_variable_data_end>:
	...

000da498 <link_constructors_location>:
   da498:	000d40f5 	.word	0x000d40f5
   da49c:	000d4551 	.word	0x000d4551
   da4a0:	000d4799 	.word	0x000d4799
   da4a4:	000d4939 	.word	0x000d4939
   da4a8:	000d4b91 	.word	0x000d4b91
   da4ac:	000d4bf1 	.word	0x000d4bf1
   da4b0:	000d5029 	.word	0x000d5029
   da4b4:	000d50fd 	.word	0x000d50fd
   da4b8:	000d5101 	.word	0x000d5101
   da4bc:	000d581d 	.word	0x000d581d
   da4c0:	000d5821 	.word	0x000d5821
   da4c4:	000d5825 	.word	0x000d5825
   da4c8:	000d5857 	.word	0x000d5857
   da4cc:	000d601d 	.word	0x000d601d
   da4d0:	000d6041 	.word	0x000d6041
   da4d4:	000d6045 	.word	0x000d6045
   da4d8:	000d6369 	.word	0x000d6369
   da4dc:	000d636d 	.word	0x000d636d
   da4e0:	000d6371 	.word	0x000d6371
   da4e4:	000d68ab 	.word	0x000d68ab
   da4e8:	000d68af 	.word	0x000d68af
   da4ec:	000d68b3 	.word	0x000d68b3
   da4f0:	000d6959 	.word	0x000d6959
   da4f4:	000d6b4d 	.word	0x000d6b4d
   da4f8:	000d73e9 	.word	0x000d73e9
   da4fc:	000d73ed 	.word	0x000d73ed
   da500:	000d7aa1 	.word	0x000d7aa1
   da504:	000d7d51 	.word	0x000d7d51
   da508:	000d7f0d 	.word	0x000d7f0d
   da50c:	000d8201 	.word	0x000d8201
   da510:	000d827d 	.word	0x000d827d
   da514:	000d82a5 	.word	0x000d82a5
   da518:	000d8975 	.word	0x000d8975
   da51c:	000d8d05 	.word	0x000d8d05
   da520:	000d8e89 	.word	0x000d8e89
   da524:	000d90f1 	.word	0x000d90f1
   da528:	000d9175 	.word	0x000d9175
   da52c:	000d9239 	.word	0x000d9239
   da530:	000d92fd 	.word	0x000d92fd

000da534 <link_constructors_end>:
	...
