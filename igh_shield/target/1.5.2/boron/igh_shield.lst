
d:/git/igh/igh_shield/target/1.5.2/boron/igh_shield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009980  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000dd9a0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000ec  2003d7f4  000dd9a4  0001d7f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000f10  2003d8e0  2003d8e0  0002d8e0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000dda90  000dda90  0001da90  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000ddab8  000ddab8  0001dab8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001dd525  00000000  00000000  0001dabc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00028156  00000000  00000000  001fafe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003339a  00000000  00000000  00223137  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000039b0  00000000  00000000  002564d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006b28  00000000  00000000  00259e81  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0005ec2c  00000000  00000000  002609a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000703d9  00000000  00000000  002bf5d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011cb7c  00000000  00000000  0032f9ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00010cc4  00000000  00000000  0044c52c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f007 fcf6 	bl	dba22 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f007 fcfb 	bl	dba38 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003d7f4 	.word	0x2003d7f4
   d404c:	000dd9a4 	.word	0x000dd9a4
   d4050:	2003d8e0 	.word	0x2003d8e0
   d4054:	2003d8e0 	.word	0x2003d8e0
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f005 fd0b 	bl	d9a78 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000dd998 	.word	0x000dd998
   d4084:	000dd8f4 	.word	0x000dd8f4

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 baca 	b.w	d4620 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fac9 	bl	d4624 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f005 bcb1 	b.w	d99fc <_post_loop>

000d409a <_Znwj>:
   d409a:	f004 be37 	b.w	d8d0c <malloc>

000d409e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409e:	f004 be35 	b.w	d8d0c <malloc>

000d40a2 <_ZdlPv>:
   d40a2:	f004 be3b 	b.w	d8d1c <free>

000d40a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a6:	f004 be39 	b.w	d8d1c <free>

000d40aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40aa:	7800      	ldrb	r0, [r0, #0]
   d40ac:	fab0 f080 	clz	r0, r0
   d40b0:	0940      	lsrs	r0, r0, #5
   d40b2:	4770      	bx	lr

000d40b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b4:	2301      	movs	r3, #1
   d40b6:	7003      	strb	r3, [r0, #0]
   d40b8:	4770      	bx	lr
	...

000d40bc <igh_settings_process_settings_tuples>:
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));

} 

uint8_t igh_settings_process_settings_tuples( uint8_t * settings, uint8_t byte_tracker, uint8_t end_index )
{
   d40bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            case SUBID_WATER_DISPENSED_PERIOD_HIGH:
                if(LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH == current_tuple_length)
                {
                    uint8_t new_water_dispensed_period_high[LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH]; 
                    memcpy(new_water_dispensed_period_high, &settings[current_data_index], LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH);
                    igh_current_threshold_settings.water_dispensed_period_high = GET32(new_water_dispensed_period_high);
   d40c0:	4fab      	ldr	r7, [pc, #684]	; (d4370 <igh_settings_process_settings_tuples+0x2b4>)
            case SUBID_MQTT_BROKER_PORT:
                if(LENGTH_SUBID_MQTT_PORT == current_tuple_length)
                {
                    uint8_t new_mqtt_port[LENGTH_SUBID_MQTT_PORT]; 
                    memcpy(new_mqtt_port, &settings[current_data_index], LENGTH_SUBID_MQTT_PORT);
                    igh_current_system_settings.broker_port = GET16(new_mqtt_port);
   d40c2:	f8df 82bc 	ldr.w	r8, [pc, #700]	; d4380 <igh_settings_process_settings_tuples+0x2c4>
                    mqtt_set_broker = 1;
   d40c6:	f8df 92bc 	ldr.w	r9, [pc, #700]	; d4384 <igh_settings_process_settings_tuples+0x2c8>
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));

} 

uint8_t igh_settings_process_settings_tuples( uint8_t * settings, uint8_t byte_tracker, uint8_t end_index )
{
   d40ca:	4605      	mov	r5, r0
   d40cc:	468b      	mov	fp, r1
   d40ce:	4692      	mov	sl, r2
    //cycle through tuples to get the settings data
    uint8_t current_tuple_id;
    uint8_t current_tuple_length;
    uint8_t current_data_index;

    while(byte_tracker < end_index)
   d40d0:	45d3      	cmp	fp, sl
   d40d2:	f080 81b2 	bcs.w	d443a <igh_settings_process_settings_tuples+0x37e>
    {
        // extract tuples
        current_tuple_id = settings[byte_tracker];
        // extract the length
        current_tuple_length = settings[byte_tracker + 1]; // should always follow
   d40d6:	eb05 030b 	add.w	r3, r5, fp
        // extract the tuple data based on tuple id
        current_data_index = byte_tracker + 2;
   d40da:	f10b 0402 	add.w	r4, fp, #2
    while(byte_tracker < end_index)
    {
        // extract tuples
        current_tuple_id = settings[byte_tracker];
        // extract the length
        current_tuple_length = settings[byte_tracker + 1]; // should always follow
   d40de:	785e      	ldrb	r6, [r3, #1]
        // extract the tuple data based on tuple id
        current_data_index = byte_tracker + 2;

        switch(current_tuple_id)
   d40e0:	f815 300b 	ldrb.w	r3, [r5, fp]
   d40e4:	3b01      	subs	r3, #1
        // extract tuples
        current_tuple_id = settings[byte_tracker];
        // extract the length
        current_tuple_length = settings[byte_tracker + 1]; // should always follow
        // extract the tuple data based on tuple id
        current_data_index = byte_tracker + 2;
   d40e6:	b2e4      	uxtb	r4, r4

        switch(current_tuple_id)
   d40e8:	2b39      	cmp	r3, #57	; 0x39
   d40ea:	f200 81a0 	bhi.w	d442e <igh_settings_process_settings_tuples+0x372>
   d40ee:	e8df f013 	tbh	[pc, r3, lsl #1]
   d40f2:	003a      	.short	0x003a
   d40f4:	00820071 	.word	0x00820071
   d40f8:	00930063 	.word	0x00930063
   d40fc:	004400a6 	.word	0x004400a6
   d4100:	0190005c 	.word	0x0190005c
   d4104:	019e019e 	.word	0x019e019e
   d4108:	019e019e 	.word	0x019e019e
   d410c:	019e019e 	.word	0x019e019e
   d4110:	00c800b4 	.word	0x00c800b4
   d4114:	00f000dc 	.word	0x00f000dc
   d4118:	01180104 	.word	0x01180104
   d411c:	014b0135 	.word	0x014b0135
   d4120:	016f015d 	.word	0x016f015d
   d4124:	019e0181 	.word	0x019e0181
   d4128:	019e019e 	.word	0x019e019e
   d412c:	019e019e 	.word	0x019e019e
   d4130:	019e019e 	.word	0x019e019e
   d4134:	019e019e 	.word	0x019e019e
   d4138:	019e019e 	.word	0x019e019e
   d413c:	019e019e 	.word	0x019e019e
   d4140:	019e019e 	.word	0x019e019e
   d4144:	019e019e 	.word	0x019e019e
   d4148:	019e019e 	.word	0x019e019e
   d414c:	019e019e 	.word	0x019e019e
   d4150:	00d200be 	.word	0x00d200be
   d4154:	00fa00e6 	.word	0x00fa00e6
   d4158:	0122010e 	.word	0x0122010e
   d415c:	0154012c 	.word	0x0154012c
   d4160:	01780166 	.word	0x01780166
   d4164:	0190      	.short	0x0190
        {
            case SUBID_OPSTATE:
                if(LENGTH_SUBID_OPSTATE == current_tuple_length)
   d4166:	2e01      	cmp	r6, #1
   d4168:	f040 816a 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    // check if new state is valid
                    if( (OP_INACTIVE == (settings[current_data_index]))|| 
   d416c:	5d2b      	ldrb	r3, [r5, r4]
   d416e:	2b03      	cmp	r3, #3
   d4170:	f200 815d 	bhi.w	d442e <igh_settings_process_settings_tuples+0x372>
                        (OP_BASIC == (settings[current_data_index]))||
                        (OP_STANDARD == (settings[current_data_index]))||
                        (OP_PREMIUM == (settings[current_data_index]))  
                    )
                    {
                        igh_current_system_settings.op_state = (device_op_state)settings[current_data_index];
   d4174:	f888 3009 	strb.w	r3, [r8, #9]
   d4178:	e159      	b.n	d442e <igh_settings_process_settings_tuples+0x372>
                    return 0;
                }
                break;

            case SUBID_TIMEZONE:
                if(LENGTH_SUBID_SUBID_TIMEZONE == current_tuple_length)
   d417a:	2e02      	cmp	r6, #2
   d417c:	f040 8160 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    // check if new timezone is valid
                    if( POSITIVE_TIME_ZONE == settings[current_data_index] )
   d4180:	5d2b      	ldrb	r3, [r5, r4]
   d4182:	2bff      	cmp	r3, #255	; 0xff
   d4184:	d105      	bne.n	d4192 <igh_settings_process_settings_tuples+0xd6>
                    {
                        if( MAX_TIMEZONE > settings[current_data_index + 1] )
   d4186:	442c      	add	r4, r5
   d4188:	7863      	ldrb	r3, [r4, #1]
   d418a:	2b0b      	cmp	r3, #11
   d418c:	f200 814f 	bhi.w	d442e <igh_settings_process_settings_tuples+0x372>
   d4190:	e008      	b.n	d41a4 <igh_settings_process_settings_tuples+0xe8>
                        {
                            igh_current_system_settings.timezone = (int)settings[current_data_index + 1];
                        }
                    }

                    else if( NEGATIVE_TIME_ZONE == settings[current_data_index] )
   d4192:	2b00      	cmp	r3, #0
   d4194:	f040 814b 	bne.w	d442e <igh_settings_process_settings_tuples+0x372>
                    {
                        if( MAX_TIMEZONE > settings[current_data_index + 1] )
   d4198:	442c      	add	r4, r5
   d419a:	7863      	ldrb	r3, [r4, #1]
   d419c:	2b0b      	cmp	r3, #11
   d419e:	f200 8146 	bhi.w	d442e <igh_settings_process_settings_tuples+0x372>
                        {
                            igh_current_system_settings.timezone = -1 * settings[current_data_index + 1];
   d41a2:	425b      	negs	r3, r3
   d41a4:	f8c8 3004 	str.w	r3, [r8, #4]
   d41a8:	e141      	b.n	d442e <igh_settings_process_settings_tuples+0x372>
                    return 0;
                }
                break;

            case SUBID_IRRIGATION_HR:
                if(LENGTH_SUBID_SUBID_IRRIGATION_HR == current_tuple_length)
   d41aa:	2e01      	cmp	r6, #1
   d41ac:	f040 8148 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    // check if the time is within 24 hours
                    if( MAX_HOUR >  (settings[current_data_index]) ||
                        MIN_HOUR <= (settings[current_data_index]))
                    {
                        igh_current_system_settings.irrigation_hr = settings[current_data_index];
   d41b0:	5d2b      	ldrb	r3, [r5, r4]
   d41b2:	f888 3008 	strb.w	r3, [r8, #8]
   d41b6:	e13a      	b.n	d442e <igh_settings_process_settings_tuples+0x372>
                    return 0;
                }
                break;

            case SUBID_SET_SERIAL_NUMBER:
                if(LENGTH_SUBID_SET_SERIAL_NUMBER == current_tuple_length)
   d41b8:	2e0c      	cmp	r6, #12
   d41ba:	f040 8141 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    memcpy(igh_current_system_settings.serial_number, &settings[current_data_index], LENGTH_SUBID_SET_SERIAL_NUMBER);
   d41be:	442c      	add	r4, r5
   d41c0:	4b6c      	ldr	r3, [pc, #432]	; (d4374 <igh_settings_process_settings_tuples+0x2b8>)
   d41c2:	6820      	ldr	r0, [r4, #0]
   d41c4:	6861      	ldr	r1, [r4, #4]
   d41c6:	c303      	stmia	r3!, {r0, r1}
   d41c8:	68a0      	ldr	r0, [r4, #8]
   d41ca:	6018      	str	r0, [r3, #0]
                    initialize_rfm69 = 1;
   d41cc:	4b6a      	ldr	r3, [pc, #424]	; (d4378 <igh_settings_process_settings_tuples+0x2bc>)
   d41ce:	2201      	movs	r2, #1
   d41d0:	701a      	strb	r2, [r3, #0]
                else
                {
                    // stop processing any more settings as they may be corrupt
                    return 0;
                }
                break;
   d41d2:	e12c      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_REPORTING_INTERVAL:
                if(LENGTH_SUBID_REPORTING_INTERVAL == current_tuple_length)
   d41d4:	2e04      	cmp	r6, #4
   d41d6:	f040 8133 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_reporting_interval[LENGTH_SUBID_REPORTING_INTERVAL]; 
                    memcpy(new_reporting_interval, &settings[current_data_index], LENGTH_SUBID_REPORTING_INTERVAL);
   d41da:	1929      	adds	r1, r5, r4
                    igh_current_system_settings.reporting_interval = GET32(new_reporting_interval);
   d41dc:	5d2a      	ldrb	r2, [r5, r4]
   d41de:	784b      	ldrb	r3, [r1, #1]
   d41e0:	041b      	lsls	r3, r3, #16
   d41e2:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   d41e6:	78ca      	ldrb	r2, [r1, #3]
   d41e8:	4413      	add	r3, r2
   d41ea:	788a      	ldrb	r2, [r1, #2]
   d41ec:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d41f0:	f8c8 3010 	str.w	r3, [r8, #16]
                else
                {
                    // stop processing any more settings as they may be corrupt
                    return 0;
                }
                break;
   d41f4:	e11b      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_DATA_RESOLUTION:
                if(LENGTH_SUBID_DATA_RESOLUTION == current_tuple_length)
   d41f6:	2e04      	cmp	r6, #4
   d41f8:	f040 8122 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_data_resolution[LENGTH_SUBID_DATA_RESOLUTION]; 
                    memcpy(new_data_resolution, &settings[current_data_index], LENGTH_SUBID_DATA_RESOLUTION);
   d41fc:	1929      	adds	r1, r5, r4
                    igh_current_system_settings.data_resolution = GET32(new_data_resolution);
   d41fe:	5d2a      	ldrb	r2, [r5, r4]
   d4200:	784b      	ldrb	r3, [r1, #1]
   d4202:	041b      	lsls	r3, r3, #16
   d4204:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   d4208:	78ca      	ldrb	r2, [r1, #3]
   d420a:	4413      	add	r3, r2
   d420c:	788a      	ldrb	r2, [r1, #2]
   d420e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4212:	f8c8 3014 	str.w	r3, [r8, #20]
                }
                else
                {
                    return 0;
                }
                break;
   d4216:	e10a      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_MQTT_BROKER:
                if( sizeof(igh_current_system_settings.broker) > current_tuple_length)
   d4218:	2e1f      	cmp	r6, #31
   d421a:	f200 8111 	bhi.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    memset(igh_current_system_settings.broker, '\0', sizeof(igh_current_system_settings.broker));
   d421e:	2220      	movs	r2, #32
   d4220:	2100      	movs	r1, #0
   d4222:	4856      	ldr	r0, [pc, #344]	; (d437c <igh_settings_process_settings_tuples+0x2c0>)
   d4224:	f007 fc08 	bl	dba38 <memset>
                    memcpy(igh_current_system_settings.broker, &settings[current_data_index], current_tuple_length);
   d4228:	4632      	mov	r2, r6
   d422a:	1929      	adds	r1, r5, r4
   d422c:	4853      	ldr	r0, [pc, #332]	; (d437c <igh_settings_process_settings_tuples+0x2c0>)
   d422e:	f007 fbf8 	bl	dba22 <memcpy>
                    igh_current_system_settings.broker[current_tuple_length] = '\0'; // terminate the string
   d4232:	eb08 0306 	add.w	r3, r8, r6
   d4236:	2200      	movs	r2, #0
   d4238:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   d423c:	e009      	b.n	d4252 <igh_settings_process_settings_tuples+0x196>
                    return 0;
                }
                break;

            case SUBID_MQTT_BROKER_PORT:
                if(LENGTH_SUBID_MQTT_PORT == current_tuple_length)
   d423e:	2e02      	cmp	r6, #2
   d4240:	f040 80fe 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_mqtt_port[LENGTH_SUBID_MQTT_PORT]; 
                    memcpy(new_mqtt_port, &settings[current_data_index], LENGTH_SUBID_MQTT_PORT);
   d4244:	192b      	adds	r3, r5, r4
                    igh_current_system_settings.broker_port = GET16(new_mqtt_port);
   d4246:	5d2a      	ldrb	r2, [r5, r4]
   d4248:	785b      	ldrb	r3, [r3, #1]
   d424a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d424e:	f8a8 3044 	strh.w	r3, [r8, #68]	; 0x44
                    mqtt_set_broker = 1;
   d4252:	2301      	movs	r3, #1
   d4254:	f889 3000 	strb.w	r3, [r9]
                }
                else
                {
                    return 0;
                }
                break; 
   d4258:	e0e9      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_SOIL_MOISTURE_LOW:
                if(LENGTH_SUBID_SOIL_MOISTURE_LOW == current_tuple_length)
   d425a:	2e02      	cmp	r6, #2
   d425c:	f040 80f0 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_moisture_low_th[LENGTH_SUBID_SOIL_MOISTURE_LOW]; 
                    memcpy(new_moisture_low_th, &settings[current_data_index], LENGTH_SUBID_SOIL_MOISTURE_LOW);
   d4260:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_moisture_low = GET16(new_moisture_low_th);
   d4262:	5d2a      	ldrb	r2, [r5, r4]
   d4264:	785b      	ldrb	r3, [r3, #1]
   d4266:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d426a:	807b      	strh	r3, [r7, #2]
                }
                else
                {
                    return 0;
                }
                break; 
   d426c:	e0df      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_SOIL_MOISTURE_HIGH:
                if(LENGTH_SUBID_SOIL_MOISTURE_HIGH == current_tuple_length)
   d426e:	2e02      	cmp	r6, #2
   d4270:	f040 80e6 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_moisture_high_th[LENGTH_SUBID_SOIL_MOISTURE_HIGH]; 
                    memcpy(new_moisture_high_th, &settings[current_data_index], LENGTH_SUBID_SOIL_MOISTURE_LOW);
   d4274:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_moisture_high = GET16(new_moisture_high_th);
   d4276:	5d2a      	ldrb	r2, [r5, r4]
   d4278:	785b      	ldrb	r3, [r3, #1]
   d427a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d427e:	83bb      	strh	r3, [r7, #28]
                }
                else
                {
                    return 0;
                }
                break; 
   d4280:	e0d5      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_AIR_HUMIDITY_LOW:
                if(LENGTH_SUBID_AIR_HUMIDITY_LOW  == current_tuple_length)
   d4282:	2e02      	cmp	r6, #2
   d4284:	f040 80dc 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_air_humidity_low_th[LENGTH_SUBID_AIR_HUMIDITY_LOW]; 
                    memcpy(new_air_humidity_low_th, &settings[current_data_index], LENGTH_SUBID_AIR_HUMIDITY_LOW);
   d4288:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.air_humidity_low = GET16(new_air_humidity_low_th);
   d428a:	5d2a      	ldrb	r2, [r5, r4]
   d428c:	785b      	ldrb	r3, [r3, #1]
   d428e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4292:	80bb      	strh	r3, [r7, #4]
                }
                else
                {
                    return 0;
                }
                break; 
   d4294:	e0cb      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_AIR_HUMIDITY_HIGH:
                if(LENGTH_SUBID_AIR_HUMIDITY_HIGH  == current_tuple_length)
   d4296:	2e02      	cmp	r6, #2
   d4298:	f040 80d2 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_air_humidity_high_th[LENGTH_SUBID_AIR_HUMIDITY_HIGH]; 
                    memcpy(new_air_humidity_high_th, &settings[current_data_index], LENGTH_SUBID_AIR_HUMIDITY_HIGH);
   d429c:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.air_humidity_high = GET16(new_air_humidity_high_th);
   d429e:	5d2a      	ldrb	r2, [r5, r4]
   d42a0:	785b      	ldrb	r3, [r3, #1]
   d42a2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d42a6:	83fb      	strh	r3, [r7, #30]
                }
                else
                {
                    return 0;
                }
                break;
   d42a8:	e0c1      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_SOIL_HUMIDITY_LOW:
                if(LENGTH_SUBID_SOIL_HUMIDITY_LOW  == current_tuple_length)
   d42aa:	2e02      	cmp	r6, #2
   d42ac:	f040 80c8 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_soil_humidity_low_th[LENGTH_SUBID_SOIL_HUMIDITY_LOW]; 
                    memcpy(new_soil_humidity_low_th, &settings[current_data_index], LENGTH_SUBID_SOIL_HUMIDITY_LOW);
   d42b0:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_humidity_low = GET16(new_soil_humidity_low_th);
   d42b2:	5d2a      	ldrb	r2, [r5, r4]
   d42b4:	785b      	ldrb	r3, [r3, #1]
   d42b6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d42ba:	80fb      	strh	r3, [r7, #6]
                }
                else
                {
                    return 0;
                }
                break; 
   d42bc:	e0b7      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_SOIL_HUMIDITY_HIGH:
                if(LENGTH_SUBID_SOIL_HUMIDITY_HIGH  == current_tuple_length)
   d42be:	2e02      	cmp	r6, #2
   d42c0:	f040 80be 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_soil_humidity_high_th[LENGTH_SUBID_SOIL_HUMIDITY_HIGH]; 
                    memcpy(new_soil_humidity_high_th, &settings[current_data_index], LENGTH_SUBID_SOIL_HUMIDITY_HIGH);
   d42c4:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_humidity_high = GET16(new_soil_humidity_high_th);
   d42c6:	5d2a      	ldrb	r2, [r5, r4]
   d42c8:	785b      	ldrb	r3, [r3, #1]
   d42ca:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d42ce:	843b      	strh	r3, [r7, #32]
                }
                else
                {
                    return 0;
                }
                break;
   d42d0:	e0ad      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_CARBON_DIOXIDE_LOW:
                if(LENGTH_SUBID_CARBON_DIOXIDE_LOW  == current_tuple_length)
   d42d2:	2e02      	cmp	r6, #2
   d42d4:	f040 80b4 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_carbon_dioxide_low_th[LENGTH_SUBID_CARBON_DIOXIDE_LOW]; 
                    memcpy(new_carbon_dioxide_low_th, &settings[current_data_index], LENGTH_SUBID_CARBON_DIOXIDE_LOW);
   d42d8:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.carbon_dioxide_low = GET16(new_carbon_dioxide_low_th);
   d42da:	5d2a      	ldrb	r2, [r5, r4]
   d42dc:	785b      	ldrb	r3, [r3, #1]
   d42de:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d42e2:	813b      	strh	r3, [r7, #8]
                }
                else
                {
                    return 0;
                }
                break; 
   d42e4:	e0a3      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_CARBON_DIOXIDE_HIGH:
                if(LENGTH_SUBID_CARBON_DIOXIDE_HIGH  == current_tuple_length)
   d42e6:	2e02      	cmp	r6, #2
   d42e8:	f040 80aa 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_carbon_dioxide_high_th[LENGTH_SUBID_CARBON_DIOXIDE_HIGH]; 
                    memcpy(new_carbon_dioxide_high_th, &settings[current_data_index], LENGTH_SUBID_CARBON_DIOXIDE_HIGH);
   d42ec:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.carbon_dioxide_high = GET16(new_carbon_dioxide_high_th);
   d42ee:	5d2a      	ldrb	r2, [r5, r4]
   d42f0:	785b      	ldrb	r3, [r3, #1]
   d42f2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d42f6:	847b      	strh	r3, [r7, #34]	; 0x22
                }
                else
                {
                    return 0;
                }
                break;
   d42f8:	e099      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_AIR_TEMPERATURE_LOW:
                if(LENGTH_SUBID_AIR_TEMPERATURE_LOW  == current_tuple_length)
   d42fa:	2e02      	cmp	r6, #2
   d42fc:	f040 80a0 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_air_temperature_low_th[LENGTH_SUBID_AIR_TEMPERATURE_LOW]; 
                    memcpy(new_air_temperature_low_th, &settings[current_data_index], LENGTH_SUBID_AIR_TEMPERATURE_LOW);
   d4300:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.air_temperature_low = GET16(new_air_temperature_low_th);
   d4302:	5d2a      	ldrb	r2, [r5, r4]
   d4304:	785b      	ldrb	r3, [r3, #1]
   d4306:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d430a:	817b      	strh	r3, [r7, #10]
                }
                else
                {
                    return 0;
                }
                break; 
   d430c:	e08f      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_AIR_TEMPERATURE_HIGH:
                if(LENGTH_SUBID_AIR_TEMPERATURE_HIGH  == current_tuple_length)
   d430e:	2e02      	cmp	r6, #2
   d4310:	f040 8096 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_air_temperature_high_th[LENGTH_SUBID_AIR_TEMPERATURE_HIGH]; 
                    memcpy(new_air_temperature_high_th, &settings[current_data_index], LENGTH_SUBID_AIR_TEMPERATURE_HIGH);
   d4314:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.air_temperature_high = GET16(new_air_temperature_high_th);
   d4316:	5d2a      	ldrb	r2, [r5, r4]
   d4318:	785b      	ldrb	r3, [r3, #1]
   d431a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d431e:	84bb      	strh	r3, [r7, #36]	; 0x24
                }
                else
                {
                    return 0;
                }
                break;
   d4320:	e085      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_SOIL_TEMPERATURE_LOW:
                if(LENGTH_SUBID_SOIL_TEMPERATURE_LOW  == current_tuple_length)
   d4322:	2e02      	cmp	r6, #2
   d4324:	f040 808c 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_soil_temperature_low_th[LENGTH_SUBID_SOIL_TEMPERATURE_LOW]; 
                    memcpy(new_soil_temperature_low_th, &settings[current_data_index], LENGTH_SUBID_SOIL_TEMPERATURE_LOW);
   d4328:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_temperature_low = GET16(new_soil_temperature_low_th);
   d432a:	5d2a      	ldrb	r2, [r5, r4]
   d432c:	785b      	ldrb	r3, [r3, #1]
   d432e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4332:	81bb      	strh	r3, [r7, #12]
                }
                else
                {
                    return 0;
                }
                break; 
   d4334:	e07b      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_SOIL_TEMPERATURE_HIGH:
                if(LENGTH_SUBID_SOIL_TEMPERATURE_HIGH  == current_tuple_length)
   d4336:	2e02      	cmp	r6, #2
   d4338:	f040 8082 	bne.w	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_soil_temperature_high_th[LENGTH_SUBID_SOIL_TEMPERATURE_HIGH]; 
                    memcpy(new_soil_temperature_high_th, &settings[current_data_index], LENGTH_SUBID_SOIL_TEMPERATURE_HIGH);
   d433c:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_temperature_high = GET16(new_soil_temperature_high_th);
   d433e:	5d2a      	ldrb	r2, [r5, r4]
   d4340:	785b      	ldrb	r3, [r3, #1]
   d4342:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4346:	84fb      	strh	r3, [r7, #38]	; 0x26
                }
                else
                {
                    return 0;
                }
                break;    
   d4348:	e071      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_SOIL_NPK_HIGH:
                if(LENGTH_SUBID_SOIL_NPK_HIGH  == current_tuple_length)
   d434a:	2e02      	cmp	r6, #2
   d434c:	d178      	bne.n	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_soil_npk_high_th[LENGTH_SUBID_SOIL_NPK_HIGH]; 
                    memcpy(new_soil_npk_high_th, &settings[current_data_index], LENGTH_SUBID_SOIL_NPK_HIGH);
   d434e:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_npk_high = GET16(new_soil_npk_high_th);
   d4350:	5d2a      	ldrb	r2, [r5, r4]
   d4352:	785b      	ldrb	r3, [r3, #1]
   d4354:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4358:	853b      	strh	r3, [r7, #40]	; 0x28
                }
                else
                {
                    return 0;
                }
                break;   
   d435a:	e068      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_SOIL_NPK_LOW:
                if(LENGTH_SUBID_SOIL_NPK_LOW  == current_tuple_length)
   d435c:	2e02      	cmp	r6, #2
   d435e:	d16f      	bne.n	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_soil_npk_low_th[LENGTH_SUBID_SOIL_NPK_LOW]; 
                    memcpy(new_soil_npk_low_th, &settings[current_data_index], LENGTH_SUBID_SOIL_NPK_LOW);
   d4360:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_npk_low = GET16(new_soil_npk_low_th);
   d4362:	5d2a      	ldrb	r2, [r5, r4]
   d4364:	785b      	ldrb	r3, [r3, #1]
   d4366:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d436a:	81fb      	strh	r3, [r7, #14]
                }
                else
                {
                    return 0;
                }
                break; 
   d436c:	e05f      	b.n	d442e <igh_settings_process_settings_tuples+0x372>
   d436e:	bf00      	nop
   d4370:	2003e650 	.word	0x2003e650
   d4374:	2003e61c 	.word	0x2003e61c
   d4378:	2003d8e5 	.word	0x2003d8e5
   d437c:	2003e628 	.word	0x2003e628
   d4380:	2003e604 	.word	0x2003e604
   d4384:	2003d7f4 	.word	0x2003d7f4

            case SUBID_LIGHT_INTENSITY_LOW:
                if(LENGTH_SUBID_LIGHT_INTENSITY_LOW  == current_tuple_length)
   d4388:	2e02      	cmp	r6, #2
   d438a:	d159      	bne.n	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_light_intensity_low_th[LENGTH_SUBID_LIGHT_INTENSITY_LOW]; 
                    memcpy(new_light_intensity_low_th, &settings[current_data_index], LENGTH_SUBID_LIGHT_INTENSITY_LOW);
   d438c:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.light_intensity_low = GET16(new_light_intensity_low_th);
   d438e:	5d2a      	ldrb	r2, [r5, r4]
   d4390:	785b      	ldrb	r3, [r3, #1]
   d4392:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4396:	823b      	strh	r3, [r7, #16]
                }
                else
                {
                    return 0;
                }
                break; 
   d4398:	e049      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_LIGHT_INTENSITY_HIGH:
                if(LENGTH_SUBID_LIGHT_INTENSITY_HIGH  == current_tuple_length)
   d439a:	2e02      	cmp	r6, #2
   d439c:	d150      	bne.n	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_light_intensity_high_th[LENGTH_SUBID_LIGHT_INTENSITY_HIGH]; 
                    memcpy(new_light_intensity_high_th, &settings[current_data_index], LENGTH_SUBID_LIGHT_INTENSITY_HIGH);
   d439e:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.light_intensity_high = GET16(new_light_intensity_high_th);
   d43a0:	5d2a      	ldrb	r2, [r5, r4]
   d43a2:	785b      	ldrb	r3, [r3, #1]
   d43a4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d43a8:	857b      	strh	r3, [r7, #42]	; 0x2a
                }
                else
                {
                    return 0;
                }
                break; 
   d43aa:	e040      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_SHIELD_BATTERY_LEVEL_LOW:
                if(LENGTH_SUBID_SHIELD_BATTERY_LEVEL_LOW  == current_tuple_length)
   d43ac:	2e02      	cmp	r6, #2
   d43ae:	d147      	bne.n	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_shield_battery_low_th[LENGTH_SUBID_SHIELD_BATTERY_LEVEL_LOW]; 
                    memcpy(new_shield_battery_low_th, &settings[current_data_index], LENGTH_SUBID_SHIELD_BATTERY_LEVEL_LOW);
   d43b0:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.shield_battery_level_low = GET16(new_shield_battery_low_th);
   d43b2:	5d2a      	ldrb	r2, [r5, r4]
   d43b4:	785b      	ldrb	r3, [r3, #1]
   d43b6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d43ba:	827b      	strh	r3, [r7, #18]
                }
                else
                {
                    return 0;
                }
                break;
   d43bc:	e037      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_SHIELD_BATTERY_LEVEL_HIGH:
                if(LENGTH_SUBID_SHIELD_BATTERY_LEVEL_HIGH  == current_tuple_length)
   d43be:	2e02      	cmp	r6, #2
   d43c0:	d13e      	bne.n	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_shield_battery_high_th[LENGTH_SUBID_SHIELD_BATTERY_LEVEL_HIGH]; 
                    memcpy(new_shield_battery_high_th, &settings[current_data_index], LENGTH_SUBID_SHIELD_BATTERY_LEVEL_HIGH);
   d43c2:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.shield_battery_level_high = GET16(new_shield_battery_high_th);
   d43c4:	5d2a      	ldrb	r2, [r5, r4]
   d43c6:	785b      	ldrb	r3, [r3, #1]
   d43c8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d43cc:	85bb      	strh	r3, [r7, #44]	; 0x2c
                }
                else
                {
                    return 0;
                }
                break;  
   d43ce:	e02e      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_SPEAR_BATTERY_LEVEL_LOW:
                if(LENGTH_SUBID_SPEAR_BATTERY_LEVEL_LOW  == current_tuple_length)
   d43d0:	2e02      	cmp	r6, #2
   d43d2:	d135      	bne.n	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_spear_battery_low_th[LENGTH_SUBID_SPEAR_BATTERY_LEVEL_LOW]; 
                    memcpy(new_spear_battery_low_th, &settings[current_data_index], LENGTH_SUBID_SPEAR_BATTERY_LEVEL_LOW);
   d43d4:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.spear_battery_level_low = GET16(new_spear_battery_low_th);
   d43d6:	5d2a      	ldrb	r2, [r5, r4]
   d43d8:	785b      	ldrb	r3, [r3, #1]
   d43da:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d43de:	82bb      	strh	r3, [r7, #20]
                }
                else
                {
                    return 0;
                }
                break;
   d43e0:	e025      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_SPEAR_BATTERY_LEVEL_HIGH:
                if(LENGTH_SUBID_SPEAR_BATTERY_LEVEL_HIGH  == current_tuple_length)
   d43e2:	2e02      	cmp	r6, #2
   d43e4:	d12c      	bne.n	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_spear_battery_high_th[LENGTH_SUBID_SPEAR_BATTERY_LEVEL_HIGH]; 
                    memcpy(new_spear_battery_high_th, &settings[current_data_index], LENGTH_SUBID_SPEAR_BATTERY_LEVEL_HIGH);
   d43e6:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.spear_battery_level_high = GET16(new_spear_battery_high_th);
   d43e8:	5d2a      	ldrb	r2, [r5, r4]
   d43ea:	785b      	ldrb	r3, [r3, #1]
   d43ec:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d43f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
                }
                else
                {
                    return 0;
                }
                break;
   d43f2:	e01c      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_WATER_DISPENSED_PERIOD_LOW:
                if(LENGTH_SUBID_WATER_DISPENSED_PERIOD_LOW == current_tuple_length)
   d43f4:	2e04      	cmp	r6, #4
   d43f6:	d123      	bne.n	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_water_dispensed_period_low[LENGTH_SUBID_WATER_DISPENSED_PERIOD_LOW]; 
                    memcpy(new_water_dispensed_period_low, &settings[current_data_index], LENGTH_SUBID_WATER_DISPENSED_PERIOD_LOW);
   d43f8:	1929      	adds	r1, r5, r4
                    igh_current_threshold_settings.water_dispensed_period_low = GET32(new_water_dispensed_period_low);
   d43fa:	5d2a      	ldrb	r2, [r5, r4]
   d43fc:	784b      	ldrb	r3, [r1, #1]
   d43fe:	041b      	lsls	r3, r3, #16
   d4400:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   d4404:	78ca      	ldrb	r2, [r1, #3]
   d4406:	4413      	add	r3, r2
   d4408:	788a      	ldrb	r2, [r1, #2]
   d440a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d440e:	61bb      	str	r3, [r7, #24]
                else
                {
                    // stop processing any more settings as they may be corrupt
                    return 0;
                }
                break;
   d4410:	e00d      	b.n	d442e <igh_settings_process_settings_tuples+0x372>

            case SUBID_WATER_DISPENSED_PERIOD_HIGH:
                if(LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH == current_tuple_length)
   d4412:	2e04      	cmp	r6, #4
   d4414:	d114      	bne.n	d4440 <igh_settings_process_settings_tuples+0x384>
                {
                    uint8_t new_water_dispensed_period_high[LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH]; 
                    memcpy(new_water_dispensed_period_high, &settings[current_data_index], LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH);
   d4416:	1929      	adds	r1, r5, r4
                    igh_current_threshold_settings.water_dispensed_period_high = GET32(new_water_dispensed_period_high);
   d4418:	5d2a      	ldrb	r2, [r5, r4]
   d441a:	784b      	ldrb	r3, [r1, #1]
   d441c:	041b      	lsls	r3, r3, #16
   d441e:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   d4422:	78ca      	ldrb	r2, [r1, #3]
   d4424:	4413      	add	r3, r2
   d4426:	788a      	ldrb	r2, [r1, #2]
   d4428:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d442c:	633b      	str	r3, [r7, #48]	; 0x30

            default: // nothing to do hear
                break;
        }
        // move index to next tuple id
        byte_tracker += current_tuple_length + TUPLE_HEADER_LEN;
   d442e:	1cb3      	adds	r3, r6, #2
   d4430:	eb0b 0603 	add.w	r6, fp, r3
   d4434:	fa5f fb86 	uxtb.w	fp, r6
   d4438:	e64a      	b.n	d40d0 <igh_settings_process_settings_tuples+0x14>
    }
    return 1;
   d443a:	2001      	movs	r0, #1
   d443c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    
                }
                else
                {
                    // stop processing any more settings as they may be corrupt
                    return 0;
   d4440:	2000      	movs	r0, #0
        }
        // move index to next tuple id
        byte_tracker += current_tuple_length + TUPLE_HEADER_LEN;
    }
    return 1;
}
   d4442:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4446:	bf00      	nop

000d4448 <igh_settings_calculate_checksum>:
 * struct must have a single byte at the end designated for the checksum for this to work
 * \param p_struct: pointer to data struct, total_bytes: sizeof(data struct)
 * \return the checksum
 */
uint8_t igh_settings_calculate_checksum(void * p_struct, size_t total_bytes)
{
   d4448:	b510      	push	{r4, lr}
    data = (uint8_t *)p_struct;

    // uint8_t data_buffer[length];
    // memcpy(data_buffer, data, length);

    data += 1; // ignore checksum byte
   d444a:	1c42      	adds	r2, r0, #1
 */
uint8_t igh_settings_calculate_checksum(void * p_struct, size_t total_bytes)
{
    uint8_t length = (uint8_t)total_bytes; 
    uint8_t * data;
    int sum = 0;
   d444c:	2300      	movs	r3, #0
    // uint8_t data_buffer[length];
    // memcpy(data_buffer, data, length);

    data += 1; // ignore checksum byte
    // start at 1 to ignore the checksum byte
    for( int i = 1; i < length; i++)
   d444e:	b2c9      	uxtb	r1, r1
   d4450:	1a14      	subs	r4, r2, r0
   d4452:	42a1      	cmp	r1, r4
   d4454:	dd03      	ble.n	d445e <igh_settings_calculate_checksum+0x16>
    {
        sum += (0xFF & *data++);
   d4456:	f812 4b01 	ldrb.w	r4, [r2], #1
   d445a:	4423      	add	r3, r4
   d445c:	e7f8      	b.n	d4450 <igh_settings_calculate_checksum+0x8>
    }

    checksum = (uint8_t)(sum % 256);

    return checksum;
}
   d445e:	b2d8      	uxtb	r0, r3
   d4460:	bd10      	pop	{r4, pc}
	...

000d4464 <igh_settings_parse_new_settings>:
    }
    return 1;
}

uint8_t igh_settings_parse_new_settings(uint8_t * settings)
{
   d4464:	b510      	push	{r4, lr}
    // get the length
    uint8_t length = settings[PAYLOAD_LEN_INDEX]; // byte at position one should always be length
   d4466:	7c82      	ldrb	r2, [r0, #18]
    // guard the process
    if(0 >= length)
   d4468:	b90a      	cbnz	r2, d446e <igh_settings_parse_new_settings+0xa>
    {
        return 0; // do not allow settings with zero payload to be processed
   d446a:	2000      	movs	r0, #0
   d446c:	bd10      	pop	{r4, pc}
    // get index of last byte to process
    uint8_t settings_end_index = FIRST_TUPLE_INDEX + length;
    // get the location of first tuple
    uint8_t settings_byte_tracker = FIRST_TUPLE_INDEX;
    
    if( 0 == igh_settings_process_settings_tuples( settings, settings_byte_tracker, settings_end_index ) ) 
   d446e:	3213      	adds	r2, #19
   d4470:	b2d2      	uxtb	r2, r2
   d4472:	2113      	movs	r1, #19
   d4474:	f7ff fe22 	bl	d40bc <igh_settings_process_settings_tuples>
   d4478:	2800      	cmp	r0, #0
   d447a:	d0f6      	beq.n	d446a <igh_settings_parse_new_settings+0x6>
        return 0;
    }
    else
    {
        // update the checksum of the system settings
        igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
   d447c:	4c07      	ldr	r4, [pc, #28]	; (d449c <igh_settings_parse_new_settings+0x38>)
   d447e:	2148      	movs	r1, #72	; 0x48
   d4480:	4620      	mov	r0, r4
   d4482:	f7ff ffe1 	bl	d4448 <igh_settings_calculate_checksum>
   d4486:	7020      	strb	r0, [r4, #0]
        // update the checksum for the threshold settings
        igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
   d4488:	4c05      	ldr	r4, [pc, #20]	; (d44a0 <igh_settings_parse_new_settings+0x3c>)
   d448a:	2134      	movs	r1, #52	; 0x34
   d448c:	4620      	mov	r0, r4
   d448e:	f7ff ffdb 	bl	d4448 <igh_settings_calculate_checksum>
        
        new_settings_available = 1;
   d4492:	4b04      	ldr	r3, [pc, #16]	; (d44a4 <igh_settings_parse_new_settings+0x40>)
    else
    {
        // update the checksum of the system settings
        igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
        // update the checksum for the threshold settings
        igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
   d4494:	7020      	strb	r0, [r4, #0]
        
        new_settings_available = 1;
   d4496:	2001      	movs	r0, #1
   d4498:	7018      	strb	r0, [r3, #0]
    }
    
    return 1;
}
   d449a:	bd10      	pop	{r4, pc}
   d449c:	2003e604 	.word	0x2003e604
   d44a0:	2003e650 	.word	0x2003e650
   d44a4:	2003d8e4 	.word	0x2003d8e4

000d44a8 <igh_settings_process_settings>:
 */
uint8_t igh_settings_process_settings(uint8_t * settings)
{
    uint8_t ret = 0; 
    igh_pkt_id settings_type = (igh_pkt_id)settings[PAYLOAD_INDEX];
    switch(settings_type)
   d44a8:	7c42      	ldrb	r2, [r0, #17]
   d44aa:	2a0f      	cmp	r2, #15
   d44ac:	d003      	beq.n	d44b6 <igh_settings_process_settings+0xe>
   d44ae:	2a10      	cmp	r2, #16
   d44b0:	d108      	bne.n	d44c4 <igh_settings_process_settings+0x1c>
    {
        case VALVE_POSITION:
            ret = igh_settings_remote_valvle_control(settings);
            break;
        case IGH_SEND_SETTINGS:
            ret = igh_settings_parse_new_settings(settings);
   d44b2:	f7ff bfd7 	b.w	d4464 <igh_settings_parse_new_settings>
    return buffer_index_tracker;
}

LOCAL uint8_t igh_settings_remote_valvle_control(uint8_t * settings)
{
    if( ((valve_position)settings[FIRST_TUPLE_INDEX] == VALVE_CLOSE) ||
   d44b6:	7cc3      	ldrb	r3, [r0, #19]
   d44b8:	2b01      	cmp	r3, #1
   d44ba:	d803      	bhi.n	d44c4 <igh_settings_process_settings+0x1c>
        ((valve_position)settings[FIRST_TUPLE_INDEX] == VALVE_OPEN) )
    {
        current_valve_position =  (valve_position)settings[FIRST_TUPLE_INDEX];
   d44bc:	4a02      	ldr	r2, [pc, #8]	; (d44c8 <igh_settings_process_settings+0x20>)
        return 1;
   d44be:	2001      	movs	r0, #1
LOCAL uint8_t igh_settings_remote_valvle_control(uint8_t * settings)
{
    if( ((valve_position)settings[FIRST_TUPLE_INDEX] == VALVE_CLOSE) ||
        ((valve_position)settings[FIRST_TUPLE_INDEX] == VALVE_OPEN) )
    {
        current_valve_position =  (valve_position)settings[FIRST_TUPLE_INDEX];
   d44c0:	7013      	strb	r3, [r2, #0]
   d44c2:	4770      	bx	lr
        return 1;
    }

    return 0;
   d44c4:	2000      	movs	r0, #0
        default:
            break;
    }

    return ret;
}
   d44c6:	4770      	bx	lr
   d44c8:	2003e64c 	.word	0x2003e64c

000d44cc <igh_settings_reset_system_to_default>:
    
    return 1;
}

void igh_settings_reset_system_to_default(void)
{
   d44cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


LOCAL void igh_settings_get_defaults(void) // Total bytes 
{
    // System settings
    memset(&igh_default_system_settings, 0, sizeof(igh_default_system_settings));
   d44ce:	4c34      	ldr	r4, [pc, #208]	; (d45a0 <igh_settings_reset_system_to_default+0xd4>)
   d44d0:	2248      	movs	r2, #72	; 0x48
   d44d2:	2100      	movs	r1, #0
   d44d4:	4620      	mov	r0, r4
   d44d6:	f007 faaf 	bl	dba38 <memset>
    igh_default_system_settings.timezone                    = DEFAULT_TIMEZONE;
   d44da:	2303      	movs	r3, #3
    igh_default_system_settings.irrigation_hr               = DEFAULT_IRRIGATION_HR;
    igh_default_system_settings.water_dispenser_period      = DEFAULT_WATER_DISP_PERIOD;
    igh_default_system_settings.op_state                    = DEFAULT_NEW_OPSTATE;
    igh_default_system_settings.reporting_interval          = DEFAULT_REPORTING_INTERVAL;
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
   d44dc:	4a31      	ldr	r2, [pc, #196]	; (d45a4 <igh_settings_reset_system_to_default+0xd8>)

LOCAL void igh_settings_get_defaults(void) // Total bytes 
{
    // System settings
    memset(&igh_default_system_settings, 0, sizeof(igh_default_system_settings));
    igh_default_system_settings.timezone                    = DEFAULT_TIMEZONE;
   d44de:	6063      	str	r3, [r4, #4]
    igh_default_system_settings.irrigation_hr               = DEFAULT_IRRIGATION_HR;
   d44e0:	2307      	movs	r3, #7
   d44e2:	7223      	strb	r3, [r4, #8]
    igh_default_system_settings.water_dispenser_period      = DEFAULT_WATER_DISP_PERIOD;
   d44e4:	f44f 63e1 	mov.w	r3, #1800	; 0x708
    igh_default_system_settings.op_state                    = DEFAULT_NEW_OPSTATE;
    igh_default_system_settings.reporting_interval          = DEFAULT_REPORTING_INTERVAL;
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
   d44e8:	6810      	ldr	r0, [r2, #0]
   d44ea:	6851      	ldr	r1, [r2, #4]
{
    // System settings
    memset(&igh_default_system_settings, 0, sizeof(igh_default_system_settings));
    igh_default_system_settings.timezone                    = DEFAULT_TIMEZONE;
    igh_default_system_settings.irrigation_hr               = DEFAULT_IRRIGATION_HR;
    igh_default_system_settings.water_dispenser_period      = DEFAULT_WATER_DISP_PERIOD;
   d44ec:	60e3      	str	r3, [r4, #12]
    igh_default_system_settings.op_state                    = DEFAULT_NEW_OPSTATE;
    igh_default_system_settings.reporting_interval          = DEFAULT_REPORTING_INTERVAL;
   d44ee:	6123      	str	r3, [r4, #16]
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
   d44f0:	f44f 7316 	mov.w	r3, #600	; 0x258
   d44f4:	6163      	str	r3, [r4, #20]
    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
   d44f6:	f104 0318 	add.w	r3, r4, #24
   d44fa:	c303      	stmia	r3!, {r0, r1}
   d44fc:	6890      	ldr	r0, [r2, #8]
   d44fe:	6018      	str	r0, [r3, #0]
    memcpy(igh_default_system_settings.broker, default_broker_url, sizeof(default_broker_url));
   d4500:	4b29      	ldr	r3, [pc, #164]	; (d45a8 <igh_settings_reset_system_to_default+0xdc>)
   d4502:	f104 0224 	add.w	r2, r4, #36	; 0x24
   d4506:	f103 0610 	add.w	r6, r3, #16
   d450a:	6818      	ldr	r0, [r3, #0]
   d450c:	6859      	ldr	r1, [r3, #4]
   d450e:	4615      	mov	r5, r2
   d4510:	c503      	stmia	r5!, {r0, r1}
   d4512:	3308      	adds	r3, #8
   d4514:	42b3      	cmp	r3, r6
   d4516:	462a      	mov	r2, r5
   d4518:	d1f7      	bne.n	d450a <igh_settings_reset_system_to_default+0x3e>
   d451a:	881b      	ldrh	r3, [r3, #0]
   d451c:	802b      	strh	r3, [r5, #0]
    igh_default_system_settings.broker_port                 = DEFAULT_MQTT_BROKER_PORT;
    igh_default_system_settings.checksum = igh_settings_calculate_checksum(&igh_default_system_settings, sizeof(igh_default_system_settings));
   d451e:	2148      	movs	r1, #72	; 0x48
    igh_default_system_settings.op_state                    = DEFAULT_NEW_OPSTATE;
    igh_default_system_settings.reporting_interval          = DEFAULT_REPORTING_INTERVAL;
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
    memcpy(igh_default_system_settings.broker, default_broker_url, sizeof(default_broker_url));
    igh_default_system_settings.broker_port                 = DEFAULT_MQTT_BROKER_PORT;
   d4520:	f240 735b 	movw	r3, #1883	; 0x75b
    igh_default_system_settings.checksum = igh_settings_calculate_checksum(&igh_default_system_settings, sizeof(igh_default_system_settings));
   d4524:	481e      	ldr	r0, [pc, #120]	; (d45a0 <igh_settings_reset_system_to_default+0xd4>)
    igh_default_system_settings.op_state                    = DEFAULT_NEW_OPSTATE;
    igh_default_system_settings.reporting_interval          = DEFAULT_REPORTING_INTERVAL;
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
    memcpy(igh_default_system_settings.broker, default_broker_url, sizeof(default_broker_url));
    igh_default_system_settings.broker_port                 = DEFAULT_MQTT_BROKER_PORT;
   d4526:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    igh_default_system_settings.checksum = igh_settings_calculate_checksum(&igh_default_system_settings, sizeof(igh_default_system_settings));
   d452a:	f7ff ff8d 	bl	d4448 <igh_settings_calculate_checksum>
   d452e:	7020      	strb	r0, [r4, #0]

    //High Threshold tirggers
    memset(&igh_default_thresholds, 0, sizeof(igh_default_thresholds));
   d4530:	4c1e      	ldr	r4, [pc, #120]	; (d45ac <igh_settings_reset_system_to_default+0xe0>)
}

void igh_settings_reset_system_to_default(void)
{
    igh_settings_get_defaults();
    igh_current_system_settings = igh_default_system_settings;
   d4532:	4f1f      	ldr	r7, [pc, #124]	; (d45b0 <igh_settings_reset_system_to_default+0xe4>)
    igh_current_threshold_settings = igh_default_thresholds;
   d4534:	4e1f      	ldr	r6, [pc, #124]	; (d45b4 <igh_settings_reset_system_to_default+0xe8>)
    memcpy(igh_default_system_settings.broker, default_broker_url, sizeof(default_broker_url));
    igh_default_system_settings.broker_port                 = DEFAULT_MQTT_BROKER_PORT;
    igh_default_system_settings.checksum = igh_settings_calculate_checksum(&igh_default_system_settings, sizeof(igh_default_system_settings));

    //High Threshold tirggers
    memset(&igh_default_thresholds, 0, sizeof(igh_default_thresholds));
   d4536:	2234      	movs	r2, #52	; 0x34
   d4538:	2100      	movs	r1, #0
   d453a:	4620      	mov	r0, r4
   d453c:	f007 fa7c 	bl	dba38 <memset>
    igh_default_thresholds.soil_moisture_low                = DEFAULT_SOIL_MOISTURE_LOW;                   
    igh_default_thresholds.air_humidity_low                 = DEFAULT_AIR_HUMIDITY_LOW;                     
    igh_default_thresholds.soil_humidity_low                = DEFAULT_SOIL_HUMIDITY_LOW;                   
   d4540:	233c      	movs	r3, #60	; 0x3c
   d4542:	80e3      	strh	r3, [r4, #6]
    igh_default_thresholds.light_intensity_low              = DEFAULT_LIGHT_INTENSITY_LOW;               
    igh_default_thresholds.shield_battery_level_low         = DEFAULT_SHIELD_BATTERY_LEVEL_LOW;     
    igh_default_thresholds.spear_battery_level_low          = DEFAULT_SPEAR_BATTERY_LEVEL_LOW;      
    igh_default_thresholds.water_dispensed_period_low       = DEFAULT_WATER_DISPENSED_PERIOD_LOW;
    // Low Threshold Trigger
    igh_default_thresholds.soil_moisture_high               = DEFAULT_SOIL_MOISTURE_HIGH;                 
   d4544:	23ff      	movs	r3, #255	; 0xff
   d4546:	83a3      	strh	r3, [r4, #28]
    igh_default_thresholds.air_humidity_high                = DEFAULT_AIR_HUMIDITY_HIGH;                   
   d4548:	83e3      	strh	r3, [r4, #30]
    igh_default_thresholds.soil_humidity_high               = DEFAULT_SOIL_HUMIDITY_HIGH;                 
   d454a:	225a      	movs	r2, #90	; 0x5a
    igh_default_thresholds.carbon_dioxide_high              = DEFAULT_CARBON_DIOXIDE_HIGH;        
   d454c:	8463      	strh	r3, [r4, #34]	; 0x22
    igh_default_thresholds.air_temperature_high             = DEFAULT_AIR_TEMPERATURE_HIGH;             
   d454e:	84a3      	strh	r3, [r4, #36]	; 0x24
    igh_default_thresholds.soil_temperature_high            = DEFAULT_SOIL_TEMPERATURE_HIGH;           
   d4550:	84e3      	strh	r3, [r4, #38]	; 0x26
    igh_default_thresholds.soil_npk_high                    = DEFAULT_SOIL_NPK_HIGH;                           
   d4552:	8523      	strh	r3, [r4, #40]	; 0x28
    igh_default_thresholds.light_intensity_high             = DEFAULT_LIGHT_INTENSITY_HIGH;             
   d4554:	8563      	strh	r3, [r4, #42]	; 0x2a
    igh_default_thresholds.shield_battery_level_high        = DEFAULT_SHIELD_BATTERY_LEVEL_HIGH;   
   d4556:	85a3      	strh	r3, [r4, #44]	; 0x2c
    igh_default_thresholds.spear_battery_level_high         = DEFAULT_SPEAR_BATTERY_LEVEL_HIGH;     
   d4558:	85e3      	strh	r3, [r4, #46]	; 0x2e
    igh_default_thresholds.water_dispensed_period_high      = DEFAULT_WATER_DISPENSED_PERIOD_HIGH;
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));
   d455a:	2134      	movs	r1, #52	; 0x34
    igh_default_thresholds.soil_temperature_high            = DEFAULT_SOIL_TEMPERATURE_HIGH;           
    igh_default_thresholds.soil_npk_high                    = DEFAULT_SOIL_NPK_HIGH;                           
    igh_default_thresholds.light_intensity_high             = DEFAULT_LIGHT_INTENSITY_HIGH;             
    igh_default_thresholds.shield_battery_level_high        = DEFAULT_SHIELD_BATTERY_LEVEL_HIGH;   
    igh_default_thresholds.spear_battery_level_high         = DEFAULT_SPEAR_BATTERY_LEVEL_HIGH;     
    igh_default_thresholds.water_dispensed_period_high      = DEFAULT_WATER_DISPENSED_PERIOD_HIGH;
   d455c:	f44f 7348 	mov.w	r3, #800	; 0x320
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));
   d4560:	4620      	mov	r0, r4
    igh_default_thresholds.spear_battery_level_low          = DEFAULT_SPEAR_BATTERY_LEVEL_LOW;      
    igh_default_thresholds.water_dispensed_period_low       = DEFAULT_WATER_DISPENSED_PERIOD_LOW;
    // Low Threshold Trigger
    igh_default_thresholds.soil_moisture_high               = DEFAULT_SOIL_MOISTURE_HIGH;                 
    igh_default_thresholds.air_humidity_high                = DEFAULT_AIR_HUMIDITY_HIGH;                   
    igh_default_thresholds.soil_humidity_high               = DEFAULT_SOIL_HUMIDITY_HIGH;                 
   d4562:	8422      	strh	r2, [r4, #32]
    igh_default_thresholds.soil_temperature_high            = DEFAULT_SOIL_TEMPERATURE_HIGH;           
    igh_default_thresholds.soil_npk_high                    = DEFAULT_SOIL_NPK_HIGH;                           
    igh_default_thresholds.light_intensity_high             = DEFAULT_LIGHT_INTENSITY_HIGH;             
    igh_default_thresholds.shield_battery_level_high        = DEFAULT_SHIELD_BATTERY_LEVEL_HIGH;   
    igh_default_thresholds.spear_battery_level_high         = DEFAULT_SPEAR_BATTERY_LEVEL_HIGH;     
    igh_default_thresholds.water_dispensed_period_high      = DEFAULT_WATER_DISPENSED_PERIOD_HIGH;
   d4564:	6323      	str	r3, [r4, #48]	; 0x30
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));
   d4566:	f7ff ff6f 	bl	d4448 <igh_settings_calculate_checksum>
}

void igh_settings_reset_system_to_default(void)
{
    igh_settings_get_defaults();
    igh_current_system_settings = igh_default_system_settings;
   d456a:	2248      	movs	r2, #72	; 0x48
    igh_default_thresholds.soil_npk_high                    = DEFAULT_SOIL_NPK_HIGH;                           
    igh_default_thresholds.light_intensity_high             = DEFAULT_LIGHT_INTENSITY_HIGH;             
    igh_default_thresholds.shield_battery_level_high        = DEFAULT_SHIELD_BATTERY_LEVEL_HIGH;   
    igh_default_thresholds.spear_battery_level_high         = DEFAULT_SPEAR_BATTERY_LEVEL_HIGH;     
    igh_default_thresholds.water_dispensed_period_high      = DEFAULT_WATER_DISPENSED_PERIOD_HIGH;
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));
   d456c:	7020      	strb	r0, [r4, #0]
}

void igh_settings_reset_system_to_default(void)
{
    igh_settings_get_defaults();
    igh_current_system_settings = igh_default_system_settings;
   d456e:	490c      	ldr	r1, [pc, #48]	; (d45a0 <igh_settings_reset_system_to_default+0xd4>)
   d4570:	4638      	mov	r0, r7
   d4572:	f007 fa56 	bl	dba22 <memcpy>
    igh_current_threshold_settings = igh_default_thresholds;
   d4576:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4578:	4635      	mov	r5, r6
   d457a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d457c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d457e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4580:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4582:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4584:	6823      	ldr	r3, [r4, #0]
   d4586:	602b      	str	r3, [r5, #0]
    // update the checksum of the system settings
    igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
   d4588:	2148      	movs	r1, #72	; 0x48
   d458a:	4638      	mov	r0, r7
   d458c:	f7ff ff5c 	bl	d4448 <igh_settings_calculate_checksum>
    // update the checksum for the threshold settings
    igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
   d4590:	2134      	movs	r1, #52	; 0x34
{
    igh_settings_get_defaults();
    igh_current_system_settings = igh_default_system_settings;
    igh_current_threshold_settings = igh_default_thresholds;
    // update the checksum of the system settings
    igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
   d4592:	7038      	strb	r0, [r7, #0]
    // update the checksum for the threshold settings
    igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
   d4594:	4630      	mov	r0, r6
   d4596:	f7ff ff57 	bl	d4448 <igh_settings_calculate_checksum>
   d459a:	7030      	strb	r0, [r6, #0]
   d459c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d459e:	bf00      	nop
   d45a0:	2003e6a8 	.word	0x2003e6a8
   d45a4:	2003d807 	.word	0x2003d807
   d45a8:	2003d7f5 	.word	0x2003d7f5
   d45ac:	2003e5cc 	.word	0x2003e5cc
   d45b0:	2003e604 	.word	0x2003e604
   d45b4:	2003e650 	.word	0x2003e650

000d45b8 <igh_message_process_incoming_msg>:
 * \brief Process incoming messages and action them repsectively
 * \param ack_msg incoimng message byte array
 * \return true or false
 */
uint8_t igh_message_process_incoming_msg(uint8_t * buffer)
{
   d45b8:	b538      	push	{r3, r4, r5, lr}
    igh_msg_type message_type = UNKNOWN_MSG;
    uint8_t length = buffer[LEN_INDEX]; // get the length
   d45ba:	7843      	ldrb	r3, [r0, #1]
 * \brief Process incoming messages and action them repsectively
 * \param ack_msg incoimng message byte array
 * \return true or false
 */
uint8_t igh_message_process_incoming_msg(uint8_t * buffer)
{
   d45bc:	4604      	mov	r4, r0
    igh_msg_type message_type = UNKNOWN_MSG;
    uint8_t length = buffer[LEN_INDEX]; // get the length

    if(length <= 0) // prevent any messages with zero length from being processed
   d45be:	b33b      	cbz	r3, d4610 <igh_message_process_incoming_msg+0x58>
    {
        return message_type;    
    }

    if( (buffer[0] == FRAME_START) && (buffer[length-1] == FRAME_END) )
   d45c0:	7802      	ldrb	r2, [r0, #0]
   d45c2:	2a3c      	cmp	r2, #60	; 0x3c
   d45c4:	d124      	bne.n	d4610 <igh_message_process_incoming_msg+0x58>
   d45c6:	4403      	add	r3, r0
   d45c8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d45cc:	2b3e      	cmp	r3, #62	; 0x3e
   d45ce:	d11f      	bne.n	d4610 <igh_message_process_incoming_msg+0x58>
    {
        // check the serial number
        if( 0 != memcmp(boron_serial_number, &buffer[SN_INDEX], sizeof(boron_serial_number)))
   d45d0:	1d01      	adds	r1, r0, #4
   d45d2:	220c      	movs	r2, #12
   d45d4:	4810      	ldr	r0, [pc, #64]	; (d4618 <igh_message_process_incoming_msg+0x60>)
   d45d6:	f007 fa15 	bl	dba04 <memcmp>
   d45da:	b9c8      	cbnz	r0, d4610 <igh_message_process_incoming_msg+0x58>
            // if the serial number does not match, do nothing as this message wasn't meant for this device,
            // This ideally should never happen
        }
        else
        {
            if( MSG_ACK == buffer[MSG_TYPE_INDEX] )
   d45dc:	78a5      	ldrb	r5, [r4, #2]
   d45de:	2d41      	cmp	r5, #65	; 0x41
   d45e0:	d110      	bne.n	d4604 <igh_message_process_incoming_msg+0x4c>
LOCAL uint8_t igh_message_process_ACK(uint8_t * ack_msg)
{
    // get the ACK tuple id
    igh_pkt_id _ack_id = (igh_pkt_id)ack_msg[PAYLOAD_INDEX];

    if( (MSG_ACK_TUPLE != _ack_id) || (SIZE_OF_MSG_ACK_TUPLE != ack_msg[PAYLOAD_INDEX + 1]) )
   d45e2:	7c63      	ldrb	r3, [r4, #17]
   d45e4:	4a0d      	ldr	r2, [pc, #52]	; (d461c <igh_message_process_incoming_msg+0x64>)
   d45e6:	b913      	cbnz	r3, d45ee <igh_message_process_incoming_msg+0x36>
   d45e8:	7ca3      	ldrb	r3, [r4, #18]
   d45ea:	2b01      	cmp	r3, #1
   d45ec:	d002      	beq.n	d45f4 <igh_message_process_incoming_msg+0x3c>
    {
        upload_igh_message_id--;
   d45ee:	7813      	ldrb	r3, [r2, #0]
   d45f0:	3b01      	subs	r3, #1
   d45f2:	e005      	b.n	d4600 <igh_message_process_incoming_msg+0x48>
        return 0;
    }

    uint8_t acked_msd_id = ack_msg[PAYLOAD_INDEX + 2];
    uint8_t sent_message_id = upload_igh_message_id - 1; // the message id will have been incremented after the last send
   d45f4:	7813      	ldrb	r3, [r2, #0]
    if (acked_msd_id != sent_message_id)
   d45f6:	7ce1      	ldrb	r1, [r4, #19]
        upload_igh_message_id--;
        return 0;
    }

    uint8_t acked_msd_id = ack_msg[PAYLOAD_INDEX + 2];
    uint8_t sent_message_id = upload_igh_message_id - 1; // the message id will have been incremented after the last send
   d45f8:	3b01      	subs	r3, #1
   d45fa:	b2db      	uxtb	r3, r3
    if (acked_msd_id != sent_message_id)
   d45fc:	4299      	cmp	r1, r3
   d45fe:	d008      	beq.n	d4612 <igh_message_process_incoming_msg+0x5a>
    {
        upload_igh_message_id--; // roll back to send the previous message
   d4600:	7013      	strb	r3, [r2, #0]
   d4602:	e005      	b.n	d4610 <igh_message_process_incoming_msg+0x58>
                if(igh_message_process_ACK(buffer))
                {
                    message_type = MSG_ACK;
                }
            }
            else if( SETTINGS_MSG == buffer[MSG_TYPE_INDEX] )
   d4604:	2d53      	cmp	r5, #83	; 0x53
   d4606:	d103      	bne.n	d4610 <igh_message_process_incoming_msg+0x58>
            {
                // process settings here
                if(igh_settings_process_settings(buffer))
   d4608:	4620      	mov	r0, r4
   d460a:	f7ff ff4d 	bl	d44a8 <igh_settings_process_settings>
   d460e:	b900      	cbnz	r0, d4612 <igh_message_process_incoming_msg+0x5a>
 * \param ack_msg incoimng message byte array
 * \return true or false
 */
uint8_t igh_message_process_incoming_msg(uint8_t * buffer)
{
    igh_msg_type message_type = UNKNOWN_MSG;
   d4610:	2500      	movs	r5, #0
        // if there is no frame start or no frame end, do nothing and return zer0
        // This may mean the length was wrong or the message was corrupted
    }

    return message_type; // should return the extracted tuple id for processing later
}
   d4612:	4628      	mov	r0, r5
   d4614:	bd38      	pop	{r3, r4, r5, pc}
   d4616:	bf00      	nop
   d4618:	2003e69c 	.word	0x2003e69c
   d461c:	2003d8e6 	.word	0x2003d8e6

000d4620 <setup>:

/* Run Application routine */
void setup() 
{
    // setup application
    igh_app_setup();
   d4620:	f000 b85c 	b.w	d46dc <_Z13igh_app_setupv>

000d4624 <loop>:
}

void loop() 
{
    // run main app
    igh_main_application();
   d4624:	f000 bc2e 	b.w	d4e84 <_Z20igh_main_applicationv>

000d4628 <_GLOBAL__sub_I_setup>:
}
   d4628:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d462a:	f004 f833 	bl	d8694 <HAL_Pin_Map>
#include "particle_api/igh_log.h"
#endif

#include "include/igh_app.h"

SYSTEM_THREAD(ENABLED);
   d462e:	2100      	movs	r1, #0
   d4630:	2001      	movs	r0, #1

void loop() 
{
    // run main app
    igh_main_application();
}
   d4632:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#include "particle_api/igh_log.h"
#endif

#include "include/igh_app.h"

SYSTEM_THREAD(ENABLED);
   d4636:	f004 bac5 	b.w	d8bc4 <system_thread_set_state>
	...

000d463c <_Z19igh_app_log_servicev.part.1>:
        }
    }
    return ret;
}

void igh_app_log_service( void )
   d463c:	b510      	push	{r4, lr}
{
    if( (millis() - log_service_timer) > ONE_SECOND )
    {
        // throttle sending data
        // Serial.print(".");
        if( 1 == mqtt_connected )
   d463e:	4b21      	ldr	r3, [pc, #132]	; (d46c4 <_Z19igh_app_log_servicev.part.1+0x88>)
   d4640:	781b      	ldrb	r3, [r3, #0]
   d4642:	2b01      	cmp	r3, #1
        }
    }
    return ret;
}

void igh_app_log_service( void )
   d4644:	b0c8      	sub	sp, #288	; 0x120
{
    if( (millis() - log_service_timer) > ONE_SECOND )
    {
        // throttle sending data
        // Serial.print(".");
        if( 1 == mqtt_connected )
   d4646:	d136      	bne.n	d46b6 <_Z19igh_app_log_servicev.part.1+0x7a>
        {
            char next_file[FILE_NAME_SIZE];
            if( true == igh_sd_log_get_next_file_name(next_file) )
   d4648:	4668      	mov	r0, sp
   d464a:	f001 fa7f 	bl	d5b4c <_Z29igh_sd_log_get_next_file_namePc>
   d464e:	2801      	cmp	r0, #1
   d4650:	d131      	bne.n	d46b6 <_Z19igh_app_log_servicev.part.1+0x7a>
            {
                uint8_t sd_data_point[MAX_FILE_SIZE];
                if( true == igh_sd_log_read_data_point(next_file, sd_data_point, MAX_FILE_SIZE) )
   d4652:	22ff      	movs	r2, #255	; 0xff
   d4654:	a908      	add	r1, sp, #32
   d4656:	4668      	mov	r0, sp
   d4658:	f001 fa38 	bl	d5acc <_Z26igh_sd_log_read_data_pointPcPhh>
   d465c:	2801      	cmp	r0, #1
   d465e:	d12a      	bne.n	d46b6 <_Z19igh_app_log_servicev.part.1+0x7a>
                {
                    Serial.print("Uploading: "); Serial.print((String)next_file);
   d4660:	f005 fb2a 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d4664:	4918      	ldr	r1, [pc, #96]	; (d46c8 <_Z19igh_app_log_servicev.part.1+0x8c>)
   d4666:	f004 fe43 	bl	d92f0 <_ZN5Print5printEPKc>
   d466a:	f005 fb25 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d466e:	4669      	mov	r1, sp
   d4670:	4604      	mov	r4, r0
   d4672:	a804      	add	r0, sp, #16
   d4674:	f004 fd8f 	bl	d9196 <_ZN6StringC1EPK19__FlashStringHelper>
   d4678:	9904      	ldr	r1, [sp, #16]
   d467a:	4620      	mov	r0, r4
   d467c:	f004 fe38 	bl	d92f0 <_ZN5Print5printEPKc>
   d4680:	a804      	add	r0, sp, #16
   d4682:	f004 fd41 	bl	d9108 <_ZN6StringD1Ev>
                    //     if( sd_data_point[i] <= 0x0F ) Serial.print("0");
                    //     Serial.print( sd_data_point[i], HEX );
                    // }
                    // Serial.println("}");

                    if( true == igh_mqtt_publish_data(sd_data_point, sd_data_point[1]) )
   d4686:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
   d468a:	a808      	add	r0, sp, #32
   d468c:	f000 fd1e 	bl	d50cc <_Z21igh_mqtt_publish_dataPhj>
   d4690:	b160      	cbz	r0, d46ac <_Z19igh_app_log_servicev.part.1+0x70>
                    {
                        if( true == igh_sd_log_remove_data_point(next_file) ) 
   d4692:	4668      	mov	r0, sp
   d4694:	f001 fa14 	bl	d5ac0 <_Z28igh_sd_log_remove_data_pointPc>
   d4698:	2801      	cmp	r0, #1
   d469a:	d103      	bne.n	d46a4 <_Z19igh_app_log_servicev.part.1+0x68>
                        {
                            Serial.println(" OK");
   d469c:	f005 fb0c 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d46a0:	490a      	ldr	r1, [pc, #40]	; (d46cc <_Z19igh_app_log_servicev.part.1+0x90>)
   d46a2:	e006      	b.n	d46b2 <_Z19igh_app_log_servicev.part.1+0x76>
                        }
                        else
                        {
                            Serial.println(" DEL ERROR");
   d46a4:	f005 fb08 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d46a8:	4909      	ldr	r1, [pc, #36]	; (d46d0 <_Z19igh_app_log_servicev.part.1+0x94>)
   d46aa:	e002      	b.n	d46b2 <_Z19igh_app_log_servicev.part.1+0x76>
                        }
                    }
                    else
                    {
                        Serial.println(" MQTT ERROR");
   d46ac:	f005 fb04 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d46b0:	4908      	ldr	r1, [pc, #32]	; (d46d4 <_Z19igh_app_log_servicev.part.1+0x98>)
   d46b2:	f004 fe30 	bl	d9316 <_ZN5Print7printlnEPKc>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d46b6:	f004 f8b5 	bl	d8824 <HAL_Timer_Get_Milli_Seconds>
            {
                // Serial.println("No new file to send");
            }
        }

        log_service_timer = millis();
   d46ba:	4b07      	ldr	r3, [pc, #28]	; (d46d8 <_Z19igh_app_log_servicev.part.1+0x9c>)
   d46bc:	6018      	str	r0, [r3, #0]
    }
}
   d46be:	b048      	add	sp, #288	; 0x120
   d46c0:	bd10      	pop	{r4, pc}
   d46c2:	bf00      	nop
   d46c4:	2003d979 	.word	0x2003d979
   d46c8:	000dccd8 	.word	0x000dccd8
   d46cc:	000dcce4 	.word	0x000dcce4
   d46d0:	000dcce8 	.word	0x000dcce8
   d46d4:	000dccf3 	.word	0x000dccf3
   d46d8:	2003d8e8 	.word	0x2003d8e8

000d46dc <_Z13igh_app_setupv>:
void igh_app_log_service( void );
void igh_app_get_temperature_and_humidity( uint8_t * incoming_data );
uint16_t igh_app_calculate_humidity( uint16_t temperature, uint16_t humidity );

void igh_app_setup( void )
{
   d46dc:	b508      	push	{r3, lr}
    Serial.begin(19200);
   d46de:	f005 faeb 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d46e2:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
   d46e6:	f005 fadb 	bl	d9ca0 <_ZN9USBSerial5beginEl>
    
    igh_boron_setup();
   d46ea:	f001 fafd 	bl	d5ce8 <_Z15igh_boron_setupv>

    // setup hardwar
    igh_hardware_setup();
   d46ee:	f000 feeb 	bl	d54c8 <_Z18igh_hardware_setupv>
    
    // get settings from eeprom
    igh_eeprom_init();
   d46f2:	f000 fd93 	bl	d521c <_Z15igh_eeprom_initv>
    
    // starte the radio
    igh_rfm69_setup();
   d46f6:	f001 fb87 	bl	d5e08 <_Z15igh_rfm69_setupv>
    
    // setup MQTT
    igh_mqtt_setup();
   d46fa:	f000 fc1d 	bl	d4f38 <_Z14igh_mqtt_setupv>

    // setup the SD card
    igh_sd_log_setup();
}
   d46fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    
    // setup MQTT
    igh_mqtt_setup();

    // setup the SD card
    igh_sd_log_setup();
   d4702:	f001 b913 	b.w	d592c <_Z16igh_sd_log_setupv>
	...

000d4708 <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir>:
uint8_t igh_app_add_message_header( uint8_t *_buffer, uint8_t start, igh_msg_type msg_type, igh_msg_dir dir )
{
    uint8_t i = start;

    // Add Message type
    _buffer[i++] = ERROR_MSG;
   d4708:	2345      	movs	r3, #69	; 0x45
        device_restart = false;
    }
}

uint8_t igh_app_add_message_header( uint8_t *_buffer, uint8_t start, igh_msg_type msg_type, igh_msg_dir dir )
{
   d470a:	b530      	push	{r4, r5, lr}
    uint8_t i = start;

    // Add Message type
    _buffer[i++] = ERROR_MSG;
   d470c:	5443      	strb	r3, [r0, r1]

    // Add direction
    _buffer[i++] = IGH_UPLOAD;
   d470e:	1c4b      	adds	r3, r1, #1
   d4710:	b2db      	uxtb	r3, r3
   d4712:	2255      	movs	r2, #85	; 0x55
   d4714:	54c2      	strb	r2, [r0, r3]

    // Add shield serial number
    memcpy( &_buffer[i], 
            boron_serial_number, 
            sizeof(boron_serial_number) );
   d4716:	4c0b      	ldr	r4, [pc, #44]	; (d4744 <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir+0x3c>)
   d4718:	1c8a      	adds	r2, r1, #2
   d471a:	b2d2      	uxtb	r2, r2
   d471c:	6823      	ldr	r3, [r4, #0]
   d471e:	5083      	str	r3, [r0, r2]
   d4720:	1885      	adds	r5, r0, r2
   d4722:	6863      	ldr	r3, [r4, #4]
   d4724:	606b      	str	r3, [r5, #4]
   d4726:	68a3      	ldr	r3, [r4, #8]
   d4728:	60ab      	str	r3, [r5, #8]

    i += sizeof(boron_serial_number);

    // Add incremental message ID
    static uint8_t message_id = 0;
    _buffer[i++] = message_id++;
   d472a:	4b07      	ldr	r3, [pc, #28]	; (d4748 <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir+0x40>)
   d472c:	781a      	ldrb	r2, [r3, #0]
   d472e:	1c54      	adds	r4, r2, #1
   d4730:	701c      	strb	r4, [r3, #0]
   d4732:	f101 030e 	add.w	r3, r1, #14
   d4736:	b2db      	uxtb	r3, r3
   d4738:	54c2      	strb	r2, [r0, r3]

    return i;
   d473a:	f101 000f 	add.w	r0, r1, #15
}
   d473e:	b2c0      	uxtb	r0, r0
   d4740:	bd30      	pop	{r4, r5, pc}
   d4742:	bf00      	nop
   d4744:	2003e69c 	.word	0x2003e69c
   d4748:	2003d8e7 	.word	0x2003d8e7

000d474c <_Z19igh_app_add_payloadPhhS_h>:

uint8_t igh_app_add_payload( uint8_t *_buffer, uint8_t start, uint8_t * _payload, uint8_t _payload_len )
{
   d474c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4750:	460c      	mov	r4, r1
   d4752:	4605      	mov	r5, r0
   d4754:	4699      	mov	r9, r3
   d4756:	4617      	mov	r7, r2
    uint32_t timestamp_to_store = igh_boron_unix_time();
   d4758:	f001 fab2 	bl	d5cc0 <_Z19igh_boron_unix_timev>
   d475c:	4680      	mov	r8, r0
    float battery_soc_float = igh_boron_SoC();
   d475e:	f001 fab1 	bl	d5cc4 <_Z13igh_boron_SoCv>
    memcpy(&battery_soc, &battery_soc_float, sizeof battery_soc);

    uint8_t i = start;

    // Add DATA PKT PID
    _buffer[i++] = DATA_PKT;
   d4762:	23fe      	movs	r3, #254	; 0xfe
   d4764:	552b      	strb	r3, [r5, r4]
    i++; // leave room for payload length

    // Add Shield ID
    _buffer[i++] = SHIELD_ID;
   d4766:	1ca3      	adds	r3, r4, #2
   d4768:	b2db      	uxtb	r3, r3
   d476a:	2217      	movs	r2, #23
   d476c:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = sizeof(boron_serial_number);
   d476e:	1ce3      	adds	r3, r4, #3
   d4770:	b2db      	uxtb	r3, r3
   d4772:	220c      	movs	r2, #12
   d4774:	54ea      	strb	r2, [r5, r3]
    memcpy(&_buffer[i], igh_current_system_settings.serial_number, sizeof(igh_current_system_settings.serial_number) );
   d4776:	4b47      	ldr	r3, [pc, #284]	; (d4894 <_Z19igh_app_add_payloadPhhS_h+0x148>)
   d4778:	1d22      	adds	r2, r4, #4
   d477a:	cb03      	ldmia	r3!, {r0, r1}
   d477c:	b2d2      	uxtb	r2, r2
   d477e:	eb05 0e02 	add.w	lr, r5, r2
   d4782:	50a8      	str	r0, [r5, r2]
   d4784:	f8ce 1004 	str.w	r1, [lr, #4]
   d4788:	6818      	ldr	r0, [r3, #0]
   d478a:	f8ce 0008 	str.w	r0, [lr, #8]
    i += sizeof(boron_serial_number);

    // Add Timestamp
    _buffer[i++] = STORE_TIMESTAMP;
   d478e:	f104 0310 	add.w	r3, r4, #16
   d4792:	b2db      	uxtb	r3, r3
   d4794:	2202      	movs	r2, #2
   d4796:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = SIZE_OF_STORE_TIMESTAMP;
   d4798:	f104 0311 	add.w	r3, r4, #17
   d479c:	b2db      	uxtb	r3, r3
   d479e:	2204      	movs	r2, #4
   d47a0:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)timestamp_to_store;
   d47a2:	f104 0312 	add.w	r3, r4, #18
   d47a6:	b2db      	uxtb	r3, r3
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 8);
   d47a8:	ea4f 2118 	mov.w	r1, r8, lsr #8
    i += sizeof(boron_serial_number);

    // Add Timestamp
    _buffer[i++] = STORE_TIMESTAMP;
    _buffer[i++] = SIZE_OF_STORE_TIMESTAMP;
    _buffer[i++] = (uint8_t)timestamp_to_store;
   d47ac:	f805 8003 	strb.w	r8, [r5, r3]
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 8);
   d47b0:	f104 0313 	add.w	r3, r4, #19
   d47b4:	b2db      	uxtb	r3, r3
uint8_t igh_app_add_payload( uint8_t *_buffer, uint8_t start, uint8_t * _payload, uint8_t _payload_len )
{
    uint32_t timestamp_to_store = igh_boron_unix_time();
    float battery_soc_float = igh_boron_SoC();
    uint32_t battery_soc;
    memcpy(&battery_soc, &battery_soc_float, sizeof battery_soc);
   d47b6:	ee10 6a10 	vmov	r6, s0

    // Add Timestamp
    _buffer[i++] = STORE_TIMESTAMP;
    _buffer[i++] = SIZE_OF_STORE_TIMESTAMP;
    _buffer[i++] = (uint8_t)timestamp_to_store;
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 8);
   d47ba:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 16);
   d47bc:	f104 0314 	add.w	r3, r4, #20
   d47c0:	b2db      	uxtb	r3, r3
   d47c2:	ea4f 4118 	mov.w	r1, r8, lsr #16
   d47c6:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 24);
   d47c8:	f104 0315 	add.w	r3, r4, #21
   d47cc:	b2db      	uxtb	r3, r3
   d47ce:	ea4f 6818 	mov.w	r8, r8, lsr #24
   d47d2:	f805 8003 	strb.w	r8, [r5, r3]

    // Add Shield battery level
    _buffer[i++] = SHIELD_BATTERY_LEVEL;
   d47d6:	f104 0316 	add.w	r3, r4, #22
   d47da:	b2db      	uxtb	r3, r3
   d47dc:	210d      	movs	r1, #13
   d47de:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = SIZE_OF_SHIELD_BATTERY_LEVEL;
   d47e0:	f104 0317 	add.w	r3, r4, #23
   d47e4:	b2db      	uxtb	r3, r3
    _buffer[i++] = (uint8_t)battery_soc;
    _buffer[i++] = (uint8_t)( battery_soc >> 8);
   d47e6:	0a31      	lsrs	r1, r6, #8
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 16);
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 24);

    // Add Shield battery level
    _buffer[i++] = SHIELD_BATTERY_LEVEL;
    _buffer[i++] = SIZE_OF_SHIELD_BATTERY_LEVEL;
   d47e8:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)battery_soc;
   d47ea:	f104 0318 	add.w	r3, r4, #24
   d47ee:	b2db      	uxtb	r3, r3
    _buffer[i++] = current_valve_position;

    // Add water dispensed 
    uint32_t curr_water_L = 0;
    memcpy( &curr_water_L, &total_water_dispensed_Liters, sizeof curr_water_L );
    _buffer[i++] = WATER_DISPENSED;
   d47f0:	2007      	movs	r0, #7
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 24);

    // Add Shield battery level
    _buffer[i++] = SHIELD_BATTERY_LEVEL;
    _buffer[i++] = SIZE_OF_SHIELD_BATTERY_LEVEL;
    _buffer[i++] = (uint8_t)battery_soc;
   d47f2:	54ee      	strb	r6, [r5, r3]
    _buffer[i++] = (uint8_t)( battery_soc >> 8);
   d47f4:	f104 0319 	add.w	r3, r4, #25
   d47f8:	b2db      	uxtb	r3, r3
   d47fa:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = (uint8_t)( battery_soc >> 16);
   d47fc:	f104 031a 	add.w	r3, r4, #26
   d4800:	b2db      	uxtb	r3, r3
   d4802:	0c31      	lsrs	r1, r6, #16
   d4804:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = (uint8_t)( battery_soc >> 24);
   d4806:	f104 031b 	add.w	r3, r4, #27
   d480a:	b2db      	uxtb	r3, r3
   d480c:	0e36      	lsrs	r6, r6, #24
   d480e:	54ee      	strb	r6, [r5, r3]

    // Add Valve position
    _buffer[i++] = VALVE_POSITION;
   d4810:	f104 031c 	add.w	r3, r4, #28
   d4814:	b2db      	uxtb	r3, r3
   d4816:	210f      	movs	r1, #15
   d4818:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = SIZE_OF_VALVE_POSITION;
   d481a:	f104 031d 	add.w	r3, r4, #29
   d481e:	b2db      	uxtb	r3, r3
   d4820:	2101      	movs	r1, #1
   d4822:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = current_valve_position;
   d4824:	4b1c      	ldr	r3, [pc, #112]	; (d4898 <_Z19igh_app_add_payloadPhhS_h+0x14c>)
   d4826:	7819      	ldrb	r1, [r3, #0]
   d4828:	f104 031e 	add.w	r3, r4, #30
   d482c:	b2db      	uxtb	r3, r3
   d482e:	54e9      	strb	r1, [r5, r3]

    // Add water dispensed 
    uint32_t curr_water_L = 0;
    memcpy( &curr_water_L, &total_water_dispensed_Liters, sizeof curr_water_L );
   d4830:	4b1a      	ldr	r3, [pc, #104]	; (d489c <_Z19igh_app_add_payloadPhhS_h+0x150>)
   d4832:	6819      	ldr	r1, [r3, #0]
    _buffer[i++] = WATER_DISPENSED;
   d4834:	f104 031f 	add.w	r3, r4, #31
   d4838:	b2db      	uxtb	r3, r3
   d483a:	54e8      	strb	r0, [r5, r3]
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
   d483c:	f104 0320 	add.w	r3, r4, #32
   d4840:	b2db      	uxtb	r3, r3
    _buffer[i++] = (uint8_t)curr_water_L;
    _buffer[i++] = (uint8_t)( curr_water_L >> 8);
    _buffer[i++] = (uint8_t)( curr_water_L >> 16);
    _buffer[i++] = (uint8_t)( curr_water_L >> 24);
   d4842:	f104 0025 	add.w	r0, r4, #37	; 0x25

    // Add water dispensed 
    uint32_t curr_water_L = 0;
    memcpy( &curr_water_L, &total_water_dispensed_Liters, sizeof curr_water_L );
    _buffer[i++] = WATER_DISPENSED;
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
   d4846:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)curr_water_L;
   d4848:	f104 0321 	add.w	r3, r4, #33	; 0x21
   d484c:	b2db      	uxtb	r3, r3
    _buffer[i++] = (uint8_t)( curr_water_L >> 8);
   d484e:	0a0a      	lsrs	r2, r1, #8
    // Add water dispensed 
    uint32_t curr_water_L = 0;
    memcpy( &curr_water_L, &total_water_dispensed_Liters, sizeof curr_water_L );
    _buffer[i++] = WATER_DISPENSED;
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
    _buffer[i++] = (uint8_t)curr_water_L;
   d4850:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = (uint8_t)( curr_water_L >> 8);
   d4852:	f104 0322 	add.w	r3, r4, #34	; 0x22
   d4856:	b2db      	uxtb	r3, r3
    _buffer[i++] = (uint8_t)( curr_water_L >> 16);
    _buffer[i++] = (uint8_t)( curr_water_L >> 24);
   d4858:	b2c0      	uxtb	r0, r0
    uint32_t curr_water_L = 0;
    memcpy( &curr_water_L, &total_water_dispensed_Liters, sizeof curr_water_L );
    _buffer[i++] = WATER_DISPENSED;
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
    _buffer[i++] = (uint8_t)curr_water_L;
    _buffer[i++] = (uint8_t)( curr_water_L >> 8);
   d485a:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)( curr_water_L >> 16);
   d485c:	f104 0323 	add.w	r3, r4, #35	; 0x23
   d4860:	b2db      	uxtb	r3, r3
   d4862:	0c0a      	lsrs	r2, r1, #16
   d4864:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)( curr_water_L >> 24);
   d4866:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d486a:	b2db      	uxtb	r3, r3

    // only add payload if the package fits, prevvent memory leak
    if( (_payload_len + i + 1) < MESSAGE_SIZE )
   d486c:	eb09 0600 	add.w	r6, r9, r0
    _buffer[i++] = WATER_DISPENSED;
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
    _buffer[i++] = (uint8_t)curr_water_L;
    _buffer[i++] = (uint8_t)( curr_water_L >> 8);
    _buffer[i++] = (uint8_t)( curr_water_L >> 16);
    _buffer[i++] = (uint8_t)( curr_water_L >> 24);
   d4870:	0e09      	lsrs	r1, r1, #24

    // only add payload if the package fits, prevvent memory leak
    if( (_payload_len + i + 1) < MESSAGE_SIZE )
   d4872:	2efd      	cmp	r6, #253	; 0xfd
    _buffer[i++] = WATER_DISPENSED;
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
    _buffer[i++] = (uint8_t)curr_water_L;
    _buffer[i++] = (uint8_t)( curr_water_L >> 8);
    _buffer[i++] = (uint8_t)( curr_water_L >> 16);
    _buffer[i++] = (uint8_t)( curr_water_L >> 24);
   d4874:	54e9      	strb	r1, [r5, r3]

    // only add payload if the package fits, prevvent memory leak
    if( (_payload_len + i + 1) < MESSAGE_SIZE )
   d4876:	dc05      	bgt.n	d4884 <_Z19igh_app_add_payloadPhhS_h+0x138>
    {
        memcpy(&_buffer[i], _payload, _payload_len);
   d4878:	464a      	mov	r2, r9
   d487a:	4639      	mov	r1, r7
   d487c:	4428      	add	r0, r5
   d487e:	f007 f8d0 	bl	dba22 <memcpy>
        i += _payload_len;
   d4882:	b2f0      	uxtb	r0, r6
    }

    // add the payload length
    _buffer[ start + 1 ] = i - start - 2;
   d4884:	4425      	add	r5, r4
   d4886:	f1c4 04fe 	rsb	r4, r4, #254	; 0xfe
   d488a:	4404      	add	r4, r0
   d488c:	706c      	strb	r4, [r5, #1]

    return i;
}
   d488e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4892:	bf00      	nop
   d4894:	2003e61c 	.word	0x2003e61c
   d4898:	2003e64c 	.word	0x2003e64c
   d489c:	2003d9dc 	.word	0x2003d9dc

000d48a0 <_Z27igh_app_send_device_restartv>:
        igh_boron_toggle_boron_led(OFF);
    }
}

void igh_app_send_device_restart( void )
{
   d48a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t current_time = igh_boron_unix_time();

    // only ssave a restart message if the time is synced. Otherwise wait till that happens
    if( (true == device_restart)
   d48a2:	4e19      	ldr	r6, [pc, #100]	; (d4908 <_Z27igh_app_send_device_restartv+0x68>)
    }
}

void igh_app_send_device_restart( void )
{
    uint32_t current_time = igh_boron_unix_time();
   d48a4:	f001 fa0c 	bl	d5cc0 <_Z19igh_boron_unix_timev>

    // only ssave a restart message if the time is synced. Otherwise wait till that happens
    if( (true == device_restart)
   d48a8:	7835      	ldrb	r5, [r6, #0]
   d48aa:	2d01      	cmp	r5, #1
    }
}

void igh_app_send_device_restart( void )
{
    uint32_t current_time = igh_boron_unix_time();
   d48ac:	4607      	mov	r7, r0

    // only ssave a restart message if the time is synced. Otherwise wait till that happens
    if( (true == device_restart)
   d48ae:	d128      	bne.n	d4902 <_Z27igh_app_send_device_restartv+0x62>
        && (JAN_01_2020 < current_time) )
   d48b0:	4b16      	ldr	r3, [pc, #88]	; (d490c <_Z27igh_app_send_device_restartv+0x6c>)
   d48b2:	4298      	cmp	r0, r3
   d48b4:	d925      	bls.n	d4902 <_Z27igh_app_send_device_restartv+0x62>
    {
        uint8_t i = 0; // keep track of pkt data
        uint8_t restart_msg[3];

        // first clear the buffer
        memset( igh_msg_buffer, 0, sizeof(igh_msg_buffer) );
   d48b6:	4c16      	ldr	r4, [pc, #88]	; (d4910 <_Z27igh_app_send_device_restartv+0x70>)
   d48b8:	22ff      	movs	r2, #255	; 0xff
   d48ba:	2100      	movs	r1, #0
   d48bc:	4620      	mov	r0, r4
   d48be:	f007 f8bb 	bl	dba38 <memset>

        // Add Retart Message
        restart_msg[0] = RESTART;
   d48c2:	23fd      	movs	r3, #253	; 0xfd
   d48c4:	f88d 3004 	strb.w	r3, [sp, #4]
        restart_msg[1] = SIZE_OF_RESTART;
        restart_msg[2] = true;

        // Add frame start
        igh_msg_buffer[i++] = FRAME_START;
   d48c8:	233c      	movs	r3, #60	; 0x3c
   d48ca:	7023      	strb	r3, [r4, #0]
        i++; // leave room for pkg length

        i = igh_app_add_message_header( igh_msg_buffer, i, ERROR_MSG, IGH_UPLOAD );
   d48cc:	2245      	movs	r2, #69	; 0x45
   d48ce:	2355      	movs	r3, #85	; 0x55
   d48d0:	2102      	movs	r1, #2
   d48d2:	4620      	mov	r0, r4
        // first clear the buffer
        memset( igh_msg_buffer, 0, sizeof(igh_msg_buffer) );

        // Add Retart Message
        restart_msg[0] = RESTART;
        restart_msg[1] = SIZE_OF_RESTART;
   d48d4:	f88d 5005 	strb.w	r5, [sp, #5]
        restart_msg[2] = true;
   d48d8:	f88d 5006 	strb.w	r5, [sp, #6]

        // Add frame start
        igh_msg_buffer[i++] = FRAME_START;
        i++; // leave room for pkg length

        i = igh_app_add_message_header( igh_msg_buffer, i, ERROR_MSG, IGH_UPLOAD );
   d48dc:	f7ff ff14 	bl	d4708 <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir>
        i = igh_app_add_payload( igh_msg_buffer, i, restart_msg, sizeof(restart_msg) );
   d48e0:	2303      	movs	r3, #3
   d48e2:	4601      	mov	r1, r0
   d48e4:	aa01      	add	r2, sp, #4
   d48e6:	4620      	mov	r0, r4
   d48e8:	f7ff ff30 	bl	d474c <_Z19igh_app_add_payloadPhhS_h>

        // Add Frame End 
        igh_msg_buffer[i++] = FRAME_END;
   d48ec:	233e      	movs	r3, #62	; 0x3e
   d48ee:	1c42      	adds	r2, r0, #1
   d48f0:	5423      	strb	r3, [r4, r0]
   d48f2:	b2d2      	uxtb	r2, r2
        //     Serial.print(igh_msg_buffer[k], HEX);
        // }
        // Serial.print("}\n");

        // save restart message
        igh_sd_log_save_data_point( (unsigned long)current_time, igh_msg_buffer, i );
   d48f4:	4621      	mov	r1, r4
   d48f6:	4638      	mov	r0, r7
        i = igh_app_add_payload( igh_msg_buffer, i, restart_msg, sizeof(restart_msg) );

        // Add Frame End 
        igh_msg_buffer[i++] = FRAME_END;

        igh_msg_buffer[1] = i; // add length
   d48f8:	7062      	strb	r2, [r4, #1]
        //     Serial.print(igh_msg_buffer[k], HEX);
        // }
        // Serial.print("}\n");

        // save restart message
        igh_sd_log_save_data_point( (unsigned long)current_time, igh_msg_buffer, i );
   d48fa:	f001 f877 	bl	d59ec <_Z26igh_sd_log_save_data_pointmPhh>

        device_restart = false;
   d48fe:	2300      	movs	r3, #0
   d4900:	7033      	strb	r3, [r6, #0]
    }
}
   d4902:	b003      	add	sp, #12
   d4904:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4906:	bf00      	nop
   d4908:	2003d813 	.word	0x2003d813
   d490c:	5e0be100 	.word	0x5e0be100
   d4910:	2003e6f1 	.word	0x2003e6f1

000d4914 <_Z27igh_app_get_serial_hex_dataPhh>:
        new_settings_available = 0;
    }
}

uint8_t igh_app_get_serial_hex_data( uint8_t * buffer, uint8_t len )
{
   d4914:	b570      	push	{r4, r5, r6, lr}
   d4916:	460d      	mov	r5, r1
   d4918:	4606      	mov	r6, r0
    uint8_t ret = 0;

    uint8_t bytes_available = Serial.available();
   d491a:	f005 f9cd 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d491e:	6803      	ldr	r3, [r0, #0]
   d4920:	691b      	ldr	r3, [r3, #16]
   d4922:	4798      	blx	r3
   d4924:	b2c4      	uxtb	r4, r0
    if( bytes_available > 0 )
   d4926:	b90c      	cbnz	r4, d492c <_Z27igh_app_get_serial_hex_dataPhh+0x18>
    }
}

uint8_t igh_app_get_serial_hex_data( uint8_t * buffer, uint8_t len )
{
    uint8_t ret = 0;
   d4928:	2400      	movs	r4, #0
   d492a:	e019      	b.n	d4960 <_Z27igh_app_get_serial_hex_dataPhh+0x4c>

    uint8_t bytes_available = Serial.available();
    if( bytes_available > 0 )
    {
        if( bytes_available <= len )
   d492c:	42ac      	cmp	r4, r5
   d492e:	d80c      	bhi.n	d494a <_Z27igh_app_get_serial_hex_dataPhh+0x36>
   d4930:	4635      	mov	r5, r6
        {
            for( uint8_t i = 0; i < bytes_available; i++ )
            {
                // read all available bytes
                buffer[i] = Serial.read();
   d4932:	f005 f9c1 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d4936:	6803      	ldr	r3, [r0, #0]
   d4938:	695b      	ldr	r3, [r3, #20]
   d493a:	4798      	blx	r3
   d493c:	f805 0b01 	strb.w	r0, [r5], #1
    uint8_t bytes_available = Serial.available();
    if( bytes_available > 0 )
    {
        if( bytes_available <= len )
        {
            for( uint8_t i = 0; i < bytes_available; i++ )
   d4940:	1bab      	subs	r3, r5, r6
   d4942:	b2db      	uxtb	r3, r3
   d4944:	429c      	cmp	r4, r3
   d4946:	d8f4      	bhi.n	d4932 <_Z27igh_app_get_serial_hex_dataPhh+0x1e>
   d4948:	e00a      	b.n	d4960 <_Z27igh_app_get_serial_hex_dataPhh+0x4c>
   d494a:	2500      	movs	r5, #0
        else
        {
            for( uint8_t i = 0; i < bytes_available; i++ )
            {
                // dump the data
                Serial.read();
   d494c:	f005 f9b4 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d4950:	6803      	ldr	r3, [r0, #0]
   d4952:	3501      	adds	r5, #1
   d4954:	695b      	ldr	r3, [r3, #20]
   d4956:	4798      	blx	r3
            }
            ret = bytes_available;
        }
        else
        {
            for( uint8_t i = 0; i < bytes_available; i++ )
   d4958:	b2eb      	uxtb	r3, r5
   d495a:	429c      	cmp	r4, r3
   d495c:	d8f6      	bhi.n	d494c <_Z27igh_app_get_serial_hex_dataPhh+0x38>
   d495e:	e7e3      	b.n	d4928 <_Z27igh_app_get_serial_hex_dataPhh+0x14>
                Serial.read();
            }
        }
    }
    return ret;
}
   d4960:	4620      	mov	r0, r4
   d4962:	bd70      	pop	{r4, r5, r6, pc}

000d4964 <_Z24igh_app_get_new_settingsv>:

    return i;
}

void igh_app_get_new_settings( void )
{
   d4964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    memset( igh_msg_buffer, 0, sizeof(igh_msg_buffer) );
   d4966:	4c26      	ldr	r4, [pc, #152]	; (d4a00 <_Z24igh_app_get_new_settingsv+0x9c>)
   d4968:	22ff      	movs	r2, #255	; 0xff
   d496a:	2100      	movs	r1, #0
   d496c:	4620      	mov	r0, r4
   d496e:	f007 f863 	bl	dba38 <memset>
    uint8_t rx_bytes = igh_app_get_serial_hex_data(igh_msg_buffer, sizeof(igh_msg_buffer));
   d4972:	21ff      	movs	r1, #255	; 0xff
   d4974:	4620      	mov	r0, r4
   d4976:	f7ff ffcd 	bl	d4914 <_Z27igh_app_get_serial_hex_dataPhh>
    if ( 0 < rx_bytes ) // via Serial
   d497a:	4606      	mov	r6, r0
   d497c:	2800      	cmp	r0, #0
   d497e:	d03e      	beq.n	d49fe <_Z24igh_app_get_new_settingsv+0x9a>
    {

        Serial.print("SERIAL DATA SETTINGS --> {");
   d4980:	f005 f99a 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d4984:	491f      	ldr	r1, [pc, #124]	; (d4a04 <_Z24igh_app_get_new_settingsv+0xa0>)
   d4986:	f004 fcb3 	bl	d92f0 <_ZN5Print5printEPKc>
   d498a:	1e77      	subs	r7, r6, #1
   d498c:	1e65      	subs	r5, r4, #1
   d498e:	4427      	add	r7, r4
        for( uint8_t k = 0; k < rx_bytes; k++ )
   d4990:	42bd      	cmp	r5, r7
   d4992:	d00f      	beq.n	d49b4 <_Z24igh_app_get_new_settingsv+0x50>
        {
            if( igh_msg_buffer[k] <= 0x0F ) Serial.print("0");
   d4994:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d4998:	2b0f      	cmp	r3, #15
   d499a:	d804      	bhi.n	d49a6 <_Z24igh_app_get_new_settingsv+0x42>
   d499c:	f005 f98c 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d49a0:	4919      	ldr	r1, [pc, #100]	; (d4a08 <_Z24igh_app_get_new_settingsv+0xa4>)
   d49a2:	f004 fca5 	bl	d92f0 <_ZN5Print5printEPKc>
            Serial.print(igh_msg_buffer[k], HEX);
   d49a6:	f005 f987 	bl	d9cb8 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d49aa:	2210      	movs	r2, #16
   d49ac:	7829      	ldrb	r1, [r5, #0]
   d49ae:	f004 fcbc 	bl	d932a <_ZN5Print11printNumberEmh>
    uint8_t rx_bytes = igh_app_get_serial_hex_data(igh_msg_buffer, sizeof(igh_msg_buffer));
    if ( 0 < rx_bytes ) // via Serial
    {

        Serial.print("SERIAL DATA SETTINGS --> {");
        for( uint8_t k = 0; k < rx_bytes; k++ )
   d49b2:	e7ed      	b.n	d4990 <_Z24igh_app_get_new_settingsv+0x2c>
        {
            if( igh_msg_buffer[k] <= 0x0F ) Serial.print("0");
            Serial.print(igh_msg_buffer[k], HEX);
        }
        Serial.print("}\n");
   d49b4:	f005 f980 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d49b8:	4914      	ldr	r1, [pc, #80]	; (d4a0c <_Z24igh_app_get_new_settingsv+0xa8>)
   d49ba:	f004 fc99 	bl	d92f0 <_ZN5Print5printEPKc>

        if( IGH_SEND_SETTINGS == igh_msg_buffer[0] )
   d49be:	7823      	ldrb	r3, [r4, #0]
   d49c0:	2b10      	cmp	r3, #16
   d49c2:	d11c      	bne.n	d49fe <_Z24igh_app_get_new_settingsv+0x9a>
        {
            if( true == igh_settings_process_settings_tuples( igh_msg_buffer, 2, rx_bytes) )
   d49c4:	4632      	mov	r2, r6
   d49c6:	2102      	movs	r1, #2
   d49c8:	480d      	ldr	r0, [pc, #52]	; (d4a00 <_Z24igh_app_get_new_settingsv+0x9c>)
   d49ca:	f7ff fb77 	bl	d40bc <igh_settings_process_settings_tuples>
   d49ce:	2801      	cmp	r0, #1
   d49d0:	d10e      	bne.n	d49f0 <_Z24igh_app_get_new_settingsv+0x8c>
            {
                new_settings_available = 1;
   d49d2:	4b0f      	ldr	r3, [pc, #60]	; (d4a10 <_Z24igh_app_get_new_settingsv+0xac>)
                // update the checksum of the system settings
                igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
   d49d4:	4c0f      	ldr	r4, [pc, #60]	; (d4a14 <_Z24igh_app_get_new_settingsv+0xb0>)

        if( IGH_SEND_SETTINGS == igh_msg_buffer[0] )
        {
            if( true == igh_settings_process_settings_tuples( igh_msg_buffer, 2, rx_bytes) )
            {
                new_settings_available = 1;
   d49d6:	7018      	strb	r0, [r3, #0]
                // update the checksum of the system settings
                igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
   d49d8:	2148      	movs	r1, #72	; 0x48
   d49da:	4620      	mov	r0, r4
   d49dc:	f7ff fd34 	bl	d4448 <igh_settings_calculate_checksum>
   d49e0:	7020      	strb	r0, [r4, #0]
                // update the checksum for the threshold settings
                igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
   d49e2:	4c0d      	ldr	r4, [pc, #52]	; (d4a18 <_Z24igh_app_get_new_settingsv+0xb4>)
   d49e4:	2134      	movs	r1, #52	; 0x34
   d49e6:	4620      	mov	r0, r4
   d49e8:	f7ff fd2e 	bl	d4448 <igh_settings_calculate_checksum>
   d49ec:	7020      	strb	r0, [r4, #0]
   d49ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            }
            else
            {
                Serial.println("SETTINGS FAILED");
   d49f0:	f005 f962 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d49f4:	4909      	ldr	r1, [pc, #36]	; (d4a1c <_Z24igh_app_get_new_settingsv+0xb8>)
            }
            
        }
    }
}
   d49f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                // update the checksum for the threshold settings
                igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
            }
            else
            {
                Serial.println("SETTINGS FAILED");
   d49fa:	f004 bc8c 	b.w	d9316 <_ZN5Print7printlnEPKc>
   d49fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4a00:	2003e6f1 	.word	0x2003e6f1
   d4a04:	000dccff 	.word	0x000dccff
   d4a08:	000dcd1a 	.word	0x000dcd1a
   d4a0c:	000dcd1c 	.word	0x000dcd1c
   d4a10:	2003d8e4 	.word	0x2003d8e4
   d4a14:	2003e604 	.word	0x2003e604
   d4a18:	2003e650 	.word	0x2003e650
   d4a1c:	000dcd1f 	.word	0x000dcd1f

000d4a20 <_Z19igh_app_log_servicev>:
    }
    return ret;
}

void igh_app_log_service( void )
{
   d4a20:	b508      	push	{r3, lr}
   d4a22:	f003 feff 	bl	d8824 <HAL_Timer_Get_Milli_Seconds>
    if( (millis() - log_service_timer) > ONE_SECOND )
   d4a26:	4b05      	ldr	r3, [pc, #20]	; (d4a3c <_Z19igh_app_log_servicev+0x1c>)
   d4a28:	681b      	ldr	r3, [r3, #0]
   d4a2a:	1ac0      	subs	r0, r0, r3
   d4a2c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4a30:	d903      	bls.n	d4a3a <_Z19igh_app_log_servicev+0x1a>
            }
        }

        log_service_timer = millis();
    }
}
   d4a32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4a36:	f7ff be01 	b.w	d463c <_Z19igh_app_log_servicev.part.1>
   d4a3a:	bd08      	pop	{r3, pc}
   d4a3c:	2003d8e8 	.word	0x2003d8e8

000d4a40 <_Z26igh_app_calculate_humiditytt>:
        refreshed_soil_data = INVALID_SOIL_DATA;
    }   
}

uint16_t igh_app_calculate_humidity( uint16_t new_temperature, uint16_t new_humidity )
{
   d4a40:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   d4a44:	ed2d 8b02 	vpush	{d8}
   d4a48:	4606      	mov	r6, r0
   d4a4a:	b082      	sub	sp, #8
    double linearHumidity = SOIL_HUMIDITY_MULTIPLIER_C1 + SOIL_HUMIDITY_MULTIPLIER_C2 * new_humidity 
   d4a4c:	4608      	mov	r0, r1
   d4a4e:	f006 fae9 	bl	db024 <__aeabi_i2d>
   d4a52:	4604      	mov	r4, r0
                          + SOIL_HUMIDITY_MULTIPLIER_C3 * new_humidity * new_humidity;

    float temperature = SOIL_TEMPERATURE_MULTIPLIER_D1 
                      + SOIL_TEMPERATURE_MULTIPLIER_D2 * new_temperature;
   d4a54:	4630      	mov	r0, r6
    }   
}

uint16_t igh_app_calculate_humidity( uint16_t new_temperature, uint16_t new_humidity )
{
    double linearHumidity = SOIL_HUMIDITY_MULTIPLIER_C1 + SOIL_HUMIDITY_MULTIPLIER_C2 * new_humidity 
   d4a56:	460d      	mov	r5, r1
                          + SOIL_HUMIDITY_MULTIPLIER_C3 * new_humidity * new_humidity;

    float temperature = SOIL_TEMPERATURE_MULTIPLIER_D1 
                      + SOIL_TEMPERATURE_MULTIPLIER_D2 * new_temperature;
   d4a58:	f006 fae4 	bl	db024 <__aeabi_i2d>
   d4a5c:	a342      	add	r3, pc, #264	; (adr r3, d4b68 <_Z26igh_app_calculate_humiditytt+0x128>)
   d4a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4a62:	f006 fb45 	bl	db0f0 <__aeabi_dmul>
   d4a66:	a342      	add	r3, pc, #264	; (adr r3, d4b70 <_Z26igh_app_calculate_humiditytt+0x130>)
   d4a68:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4a6c:	f006 f98c 	bl	dad88 <__aeabi_dsub>
   d4a70:	f006 fe36 	bl	db6e0 <__aeabi_d2f>

    float correctedHumidity = (temperature - ROOM_TEMPERATURE) * 
                              (SOIL_HUMIDITY_MULTIPLIER_T1 + SOIL_HUMIDITY_MULTIPLIER_T2 * new_humidity) 
                              + linearHumidity;
   d4a74:	a340      	add	r3, pc, #256	; (adr r3, d4b78 <_Z26igh_app_calculate_humiditytt+0x138>)
   d4a76:	e9d3 2300 	ldrd	r2, r3, [r3]
{
    double linearHumidity = SOIL_HUMIDITY_MULTIPLIER_C1 + SOIL_HUMIDITY_MULTIPLIER_C2 * new_humidity 
                          + SOIL_HUMIDITY_MULTIPLIER_C3 * new_humidity * new_humidity;

    float temperature = SOIL_TEMPERATURE_MULTIPLIER_D1 
                      + SOIL_TEMPERATURE_MULTIPLIER_D2 * new_temperature;
   d4a7a:	4606      	mov	r6, r0

    float correctedHumidity = (temperature - ROOM_TEMPERATURE) * 
                              (SOIL_HUMIDITY_MULTIPLIER_T1 + SOIL_HUMIDITY_MULTIPLIER_T2 * new_humidity) 
                              + linearHumidity;
   d4a7c:	4629      	mov	r1, r5
   d4a7e:	4620      	mov	r0, r4
   d4a80:	f006 fb36 	bl	db0f0 <__aeabi_dmul>
   d4a84:	a33e      	add	r3, pc, #248	; (adr r3, d4b80 <_Z26igh_app_calculate_humiditytt+0x140>)
   d4a86:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4a8a:	f006 f97d 	bl	dad88 <__aeabi_dsub>
   d4a8e:	a33e      	add	r3, pc, #248	; (adr r3, d4b88 <_Z26igh_app_calculate_humiditytt+0x148>)
   d4a90:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4a94:	4680      	mov	r8, r0
   d4a96:	4689      	mov	r9, r1
   d4a98:	4620      	mov	r0, r4
   d4a9a:	4629      	mov	r1, r5
   d4a9c:	f006 fb28 	bl	db0f0 <__aeabi_dmul>
   d4aa0:	4622      	mov	r2, r4
   d4aa2:	462b      	mov	r3, r5
   d4aa4:	f006 fb24 	bl	db0f0 <__aeabi_dmul>
   d4aa8:	4602      	mov	r2, r0
   d4aaa:	460b      	mov	r3, r1
   d4aac:	4640      	mov	r0, r8
   d4aae:	4649      	mov	r1, r9
   d4ab0:	f006 f96c 	bl	dad8c <__adddf3>
   d4ab4:	a336      	add	r3, pc, #216	; (adr r3, d4b90 <_Z26igh_app_calculate_humiditytt+0x150>)
   d4ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4aba:	4680      	mov	r8, r0
   d4abc:	4689      	mov	r9, r1
   d4abe:	4620      	mov	r0, r4
   d4ac0:	4629      	mov	r1, r5
   d4ac2:	f006 fb15 	bl	db0f0 <__aeabi_dmul>
   d4ac6:	a328      	add	r3, pc, #160	; (adr r3, d4b68 <_Z26igh_app_calculate_humiditytt+0x128>)
   d4ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4acc:	f006 f95e 	bl	dad8c <__adddf3>
   d4ad0:	4604      	mov	r4, r0
   d4ad2:	4630      	mov	r0, r6
   d4ad4:	460d      	mov	r5, r1
   d4ad6:	f006 fab7 	bl	db048 <__aeabi_f2d>
   d4ada:	2200      	movs	r2, #0
   d4adc:	4b1e      	ldr	r3, [pc, #120]	; (d4b58 <_Z26igh_app_calculate_humiditytt+0x118>)
   d4ade:	f006 f953 	bl	dad88 <__aeabi_dsub>
   d4ae2:	4602      	mov	r2, r0
   d4ae4:	460b      	mov	r3, r1
   d4ae6:	4620      	mov	r0, r4
   d4ae8:	4629      	mov	r1, r5
   d4aea:	f006 fb01 	bl	db0f0 <__aeabi_dmul>
   d4aee:	4602      	mov	r2, r0
   d4af0:	460b      	mov	r3, r1
   d4af2:	4640      	mov	r0, r8
   d4af4:	4649      	mov	r1, r9
   d4af6:	f006 f949 	bl	dad8c <__adddf3>
   d4afa:	f006 fdf1 	bl	db6e0 <__aeabi_d2f>
   d4afe:	ee08 0a10 	vmov	s16, r0

    Serial.print("TEMPERATURE: "); Serial.print(temperature);
   d4b02:	f005 f8d9 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d4b06:	4915      	ldr	r1, [pc, #84]	; (d4b5c <_Z26igh_app_calculate_humiditytt+0x11c>)
   d4b08:	f004 fbf2 	bl	d92f0 <_ZN5Print5printEPKc>
   d4b0c:	f005 f8d4 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d4b10:	ee00 6a10 	vmov	s0, r6
   d4b14:	2102      	movs	r1, #2
   d4b16:	f004 fce7 	bl	d94e8 <_ZN5Print5printEfi>
    Serial.print("C HUMIDITY: "); Serial.print(correctedHumidity);
   d4b1a:	f005 f8cd 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d4b1e:	4910      	ldr	r1, [pc, #64]	; (d4b60 <_Z26igh_app_calculate_humiditytt+0x120>)
   d4b20:	f004 fbe6 	bl	d92f0 <_ZN5Print5printEPKc>
   d4b24:	f005 f8c8 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d4b28:	eeb0 0a48 	vmov.f32	s0, s16
   d4b2c:	2102      	movs	r1, #2
   d4b2e:	f004 fcdb 	bl	d94e8 <_ZN5Print5printEfi>
    Serial.println("%");
   d4b32:	f005 f8c1 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d4b36:	490b      	ldr	r1, [pc, #44]	; (d4b64 <_Z26igh_app_calculate_humiditytt+0x124>)
   d4b38:	f004 fbed 	bl	d9316 <_ZN5Print7printlnEPKc>

    // offload the decimal places
    return (uint16_t)correctedHumidity;
   d4b3c:	eefc 7ac8 	vcvt.u32.f32	s15, s16
   d4b40:	edcd 7a01 	vstr	s15, [sp, #4]
}
   d4b44:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   d4b48:	b002      	add	sp, #8
   d4b4a:	ecbd 8b02 	vpop	{d8}
   d4b4e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   d4b52:	bf00      	nop
   d4b54:	f3af 8000 	nop.w
   d4b58:	40390000 	.word	0x40390000
   d4b5c:	000dcd2f 	.word	0x000dcd2f
   d4b60:	000dcd3d 	.word	0x000dcd3d
   d4b64:	000dcd4a 	.word	0x000dcd4a
   d4b68:	47ae147b 	.word	0x47ae147b
   d4b6c:	3f847ae1 	.word	0x3f847ae1
   d4b70:	e147ae14 	.word	0xe147ae14
   d4b74:	4043d47a 	.word	0x4043d47a
   d4b78:	a786c227 	.word	0xa786c227
   d4b7c:	3fa2ca57 	.word	0x3fa2ca57
   d4b80:	adab9f56 	.word	0xadab9f56
   d4b84:	40005fd8 	.word	0x40005fd8
   d4b88:	d2ff5e1d 	.word	0xd2ff5e1d
   d4b8c:	bebad603 	.word	0xbebad603
   d4b90:	88e368f1 	.word	0x88e368f1
   d4b94:	3f14f8b5 	.word	0x3f14f8b5

000d4b98 <_Z36igh_app_get_temperature_and_humidityPh>:
        log_service_timer = millis();
    }
}

void igh_app_get_temperature_and_humidity( uint8_t * incoming_data )
{
   d4b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t current_tuple_length = 0;
    uint8_t current_data_index = 0;
    uint8_t byte_tracker = 2;

    uint16_t new_temperature = 0xFFFF;
    uint16_t new_humidity = 0xFFFF;
   d4b9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    bool valid_temerature = false;
    bool valid_humidity = false;
   d4b9e:	2500      	movs	r5, #0
        log_service_timer = millis();
    }
}

void igh_app_get_temperature_and_humidity( uint8_t * incoming_data )
{
   d4ba0:	4604      	mov	r4, r0
    uint8_t data_len = incoming_data[1];
   d4ba2:	7846      	ldrb	r6, [r0, #1]
    uint8_t current_data_index = 0;
    uint8_t byte_tracker = 2;

    uint16_t new_temperature = 0xFFFF;
    uint16_t new_humidity = 0xFFFF;
    bool valid_temerature = false;
   d4ba4:	46ae      	mov	lr, r5
    uint8_t current_tuple_id = 0;
    uint8_t current_tuple_length = 0;
    uint8_t current_data_index = 0;
    uint8_t byte_tracker = 2;

    uint16_t new_temperature = 0xFFFF;
   d4ba6:	4608      	mov	r0, r1
{
    uint8_t data_len = incoming_data[1];
    uint8_t current_tuple_id = 0;
    uint8_t current_tuple_length = 0;
    uint8_t current_data_index = 0;
    uint8_t byte_tracker = 2;
   d4ba8:	2702      	movs	r7, #2
    uint16_t new_temperature = 0xFFFF;
    uint16_t new_humidity = 0xFFFF;
    bool valid_temerature = false;
    bool valid_humidity = false;

    while(byte_tracker < data_len)
   d4baa:	42b7      	cmp	r7, r6
   d4bac:	d223      	bcs.n	d4bf6 <_Z36igh_app_get_temperature_and_humidityPh+0x5e>
        // extract the length
        current_tuple_length = incoming_data[byte_tracker + 1];
        // extract the tuple data based on tuple id
        current_data_index = byte_tracker + 2;

        switch( current_tuple_id )
   d4bae:	f814 c007 	ldrb.w	ip, [r4, r7]
    while(byte_tracker < data_len)
    {
        // extract tuples
        current_tuple_id = incoming_data[byte_tracker];
        // extract the length
        current_tuple_length = incoming_data[byte_tracker + 1];
   d4bb2:	19e3      	adds	r3, r4, r7
        // extract the tuple data based on tuple id
        current_data_index = byte_tracker + 2;
   d4bb4:	1cba      	adds	r2, r7, #2

        switch( current_tuple_id )
   d4bb6:	f1bc 0f06 	cmp.w	ip, #6
    while(byte_tracker < data_len)
    {
        // extract tuples
        current_tuple_id = incoming_data[byte_tracker];
        // extract the length
        current_tuple_length = incoming_data[byte_tracker + 1];
   d4bba:	785b      	ldrb	r3, [r3, #1]
        // extract the tuple data based on tuple id
        current_data_index = byte_tracker + 2;
   d4bbc:	b2d2      	uxtb	r2, r2

        switch( current_tuple_id )
   d4bbe:	d00d      	beq.n	d4bdc <_Z36igh_app_get_temperature_and_humidityPh+0x44>
   d4bc0:	f1bc 0f0a 	cmp.w	ip, #10
   d4bc4:	d113      	bne.n	d4bee <_Z36igh_app_get_temperature_and_humidityPh+0x56>
        {
            case SOIL_TEMPERATURE:
                if( SIZE_OF_SOIL_TEMPERATURE == current_tuple_length )
   d4bc6:	2b02      	cmp	r3, #2
   d4bc8:	d111      	bne.n	d4bee <_Z36igh_app_get_temperature_and_humidityPh+0x56>
                {
                    uint8_t new_temperature_reading[SIZE_OF_SOIL_TEMPERATURE]; 
                    memcpy(new_temperature_reading, &incoming_data[current_data_index], SIZE_OF_SOIL_TEMPERATURE);
   d4bca:	18a0      	adds	r0, r4, r2
                    new_temperature = GET16_LI(new_temperature_reading);
   d4bcc:	5ca2      	ldrb	r2, [r4, r2]
   d4bce:	7840      	ldrb	r0, [r0, #1]
   d4bd0:	eb02 2000 	add.w	r0, r2, r0, lsl #8
   d4bd4:	b280      	uxth	r0, r0
                    valid_temerature = true;
   d4bd6:	f04f 0e01 	mov.w	lr, #1
   d4bda:	e008      	b.n	d4bee <_Z36igh_app_get_temperature_and_humidityPh+0x56>
                    /* Do nothing */
                }
                break;
                
            case SOIL_HUMIDITY:
                if( SIZE_OF_SOIL_HUMIDITY == current_tuple_length )
   d4bdc:	2b02      	cmp	r3, #2
   d4bde:	d106      	bne.n	d4bee <_Z36igh_app_get_temperature_and_humidityPh+0x56>
                {
                    uint8_t new_humidity_reading[SIZE_OF_SOIL_HUMIDITY]; 
                    memcpy(new_humidity_reading, &incoming_data[current_data_index], SIZE_OF_SOIL_HUMIDITY);
   d4be0:	18a1      	adds	r1, r4, r2
                    new_humidity = GET16_LI(new_humidity_reading);
   d4be2:	5ca2      	ldrb	r2, [r4, r2]
   d4be4:	7849      	ldrb	r1, [r1, #1]
   d4be6:	eb02 2101 	add.w	r1, r2, r1, lsl #8
   d4bea:	b289      	uxth	r1, r1
                    valid_humidity = true;
   d4bec:	2501      	movs	r5, #1
            default:
                /* Ignore other data */
                break;
        }
        // move index to next tuple id
        byte_tracker += current_tuple_length + TUPLE_HEADER_LEN;
   d4bee:	1c9a      	adds	r2, r3, #2
   d4bf0:	18bb      	adds	r3, r7, r2
   d4bf2:	b2df      	uxtb	r7, r3
    uint16_t new_temperature = 0xFFFF;
    uint16_t new_humidity = 0xFFFF;
    bool valid_temerature = false;
    bool valid_humidity = false;

    while(byte_tracker < data_len)
   d4bf4:	e7d9      	b.n	d4baa <_Z36igh_app_get_temperature_and_humidityPh+0x12>
   d4bf6:	4b07      	ldr	r3, [pc, #28]	; (d4c14 <_Z36igh_app_get_temperature_and_humidityPh+0x7c>)
        // move index to next tuple id
        byte_tracker += current_tuple_length + TUPLE_HEADER_LEN;
    }


    if( true == valid_humidity &&
   d4bf8:	b14d      	cbz	r5, d4c0e <_Z36igh_app_get_temperature_and_humidityPh+0x76>
   d4bfa:	f1be 0f00 	cmp.w	lr, #0
   d4bfe:	d006      	beq.n	d4c0e <_Z36igh_app_get_temperature_and_humidityPh+0x76>
        true == valid_temerature )
    {
        refreshed_soil_data = VALID_SOIL_DATA;
   d4c00:	22ff      	movs	r2, #255	; 0xff
   d4c02:	701a      	strb	r2, [r3, #0]
        soil_humidity = igh_app_calculate_humidity(new_temperature, new_humidity);
   d4c04:	f7ff ff1c 	bl	d4a40 <_Z26igh_app_calculate_humiditytt>
   d4c08:	4b03      	ldr	r3, [pc, #12]	; (d4c18 <_Z36igh_app_get_temperature_and_humidityPh+0x80>)
   d4c0a:	8018      	strh	r0, [r3, #0]
   d4c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    else
    {
        refreshed_soil_data = INVALID_SOIL_DATA;
   d4c0e:	2200      	movs	r2, #0
   d4c10:	701a      	strb	r2, [r3, #0]
   d4c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4c14:	2003d9b5 	.word	0x2003d9b5
   d4c18:	2003d9d8 	.word	0x2003d9d8

000d4c1c <_ZN5Print7printlnImLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
   d4c1c:	b538      	push	{r3, r4, r5, lr}
   d4c1e:	4605      	mov	r5, r0

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   d4c20:	b922      	cbnz	r2, d4c2c <_ZN5Print7printlnImLi0EEEjT_i+0x10>
        return write(n);
   d4c22:	6803      	ldr	r3, [r0, #0]
   d4c24:	b2c9      	uxtb	r1, r1
   d4c26:	689b      	ldr	r3, [r3, #8]
   d4c28:	4798      	blx	r3
   d4c2a:	e002      	b.n	d4c32 <_ZN5Print7printlnImLi0EEEjT_i+0x16>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4c2c:	b2d2      	uxtb	r2, r2
   d4c2e:	f004 fb7c 	bl	d932a <_ZN5Print11printNumberEmh>
   d4c32:	4604      	mov	r4, r0
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4c34:	4628      	mov	r0, r5
   d4c36:	f004 fb62 	bl	d92fe <_ZN5Print7printlnEv>
        return n;
    }
   d4c3a:	4420      	add	r0, r4
   d4c3c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4c40 <_Z37igh_app_receive_and_stage_sensor_datav>:
    igh_hardware_service_valve_state();

}

void igh_app_receive_and_stage_sensor_data( void )
{
   d4c40:	b570      	push	{r4, r5, r6, lr}
   d4c42:	b090      	sub	sp, #64	; 0x40
    uint8_t rx_buffer[RF69_MAX_DATA_LEN];
    uint8_t data_rx_len = 0;

    data_rx_len = igh_rfm69_receive_raw_bytes( rx_buffer, sizeof(rx_buffer) );
   d4c44:	213d      	movs	r1, #61	; 0x3d
   d4c46:	4668      	mov	r0, sp
   d4c48:	f001 f934 	bl	d5eb4 <_Z27igh_rfm69_receive_raw_bytesPhh>

    if( 0 != data_rx_len )
   d4c4c:	4605      	mov	r5, r0
   d4c4e:	b3c8      	cbz	r0, d4cc4 <_Z37igh_app_receive_and_stage_sensor_datav+0x84>
        igh_app_get_temperature_and_humidity(rx_buffer);

        uint8_t i = 0; // keep track of pkt data

        // first clear the buffer
        memset( igh_msg_buffer, 0, sizeof(igh_msg_buffer) );
   d4c50:	4c1d      	ldr	r4, [pc, #116]	; (d4cc8 <_Z37igh_app_receive_and_stage_sensor_datav+0x88>)

    data_rx_len = igh_rfm69_receive_raw_bytes( rx_buffer, sizeof(rx_buffer) );

    if( 0 != data_rx_len )
    {
        igh_boron_toggle_boron_led(ON);
   d4c52:	2001      	movs	r0, #1
   d4c54:	f000 fbf6 	bl	d5444 <_Z26igh_boron_toggle_boron_ledh>

        // read data needed by the shield
        igh_app_get_temperature_and_humidity(rx_buffer);
   d4c58:	4668      	mov	r0, sp
   d4c5a:	f7ff ff9d 	bl	d4b98 <_Z36igh_app_get_temperature_and_humidityPh>

        uint8_t i = 0; // keep track of pkt data

        // first clear the buffer
        memset( igh_msg_buffer, 0, sizeof(igh_msg_buffer) );
   d4c5e:	22ff      	movs	r2, #255	; 0xff
   d4c60:	2100      	movs	r1, #0
   d4c62:	4620      	mov	r0, r4
   d4c64:	f006 fee8 	bl	dba38 <memset>

        // Add frame start
        igh_msg_buffer[i++] = FRAME_START;
   d4c68:	233c      	movs	r3, #60	; 0x3c
   d4c6a:	7023      	strb	r3, [r4, #0]
        i++; // leave room for pkg length

        i = igh_app_add_message_header( igh_msg_buffer, i, ERROR_MSG, IGH_UPLOAD );
   d4c6c:	2245      	movs	r2, #69	; 0x45
   d4c6e:	2355      	movs	r3, #85	; 0x55
   d4c70:	2102      	movs	r1, #2
   d4c72:	4620      	mov	r0, r4
   d4c74:	f7ff fd48 	bl	d4708 <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir>
        i = igh_app_add_payload( igh_msg_buffer, i, rx_buffer, data_rx_len );
   d4c78:	466a      	mov	r2, sp
   d4c7a:	4601      	mov	r1, r0
   d4c7c:	462b      	mov	r3, r5
   d4c7e:	4620      	mov	r0, r4
   d4c80:	f7ff fd64 	bl	d474c <_Z19igh_app_add_payloadPhhS_h>

        // Add Frame End 
        igh_msg_buffer[i++] = FRAME_END;
   d4c84:	1c45      	adds	r5, r0, #1
   d4c86:	233e      	movs	r3, #62	; 0x3e
   d4c88:	b2ed      	uxtb	r5, r5
   d4c8a:	5423      	strb	r3, [r4, r0]

        igh_msg_buffer[1] = i; // add length
   d4c8c:	7065      	strb	r5, [r4, #1]

        Serial.print("\nTIME: "); Serial.println(igh_boron_unix_time(), HEX);
   d4c8e:	f005 f813 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d4c92:	490e      	ldr	r1, [pc, #56]	; (d4ccc <_Z37igh_app_receive_and_stage_sensor_datav+0x8c>)
   d4c94:	f004 fb2c 	bl	d92f0 <_ZN5Print5printEPKc>
   d4c98:	f005 f80e 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d4c9c:	4606      	mov	r6, r0
   d4c9e:	f001 f80f 	bl	d5cc0 <_Z19igh_boron_unix_timev>
   d4ca2:	2210      	movs	r2, #16
   d4ca4:	4601      	mov	r1, r0
   d4ca6:	4630      	mov	r0, r6
   d4ca8:	f7ff ffb8 	bl	d4c1c <_ZN5Print7printlnImLi0EEEjT_i>
        //     Serial.print(igh_msg_buffer[k], HEX);
        // }
        // Serial.print("}\n");

        // publish the data or store it if the publish fails
        uint32_t current_time = igh_boron_unix_time();
   d4cac:	f001 f808 	bl	d5cc0 <_Z19igh_boron_unix_timev>
        
        // Log data only if the time is synced
        if( JAN_01_2020 < current_time )
   d4cb0:	4b07      	ldr	r3, [pc, #28]	; (d4cd0 <_Z37igh_app_receive_and_stage_sensor_datav+0x90>)
   d4cb2:	4298      	cmp	r0, r3
   d4cb4:	d903      	bls.n	d4cbe <_Z37igh_app_receive_and_stage_sensor_datav+0x7e>
        igh_sd_log_save_data_point( (unsigned long)current_time, igh_msg_buffer, i );
   d4cb6:	462a      	mov	r2, r5
   d4cb8:	4621      	mov	r1, r4
   d4cba:	f000 fe97 	bl	d59ec <_Z26igh_sd_log_save_data_pointmPhh>
        
        igh_boron_toggle_boron_led(OFF);
   d4cbe:	2000      	movs	r0, #0
   d4cc0:	f000 fbc0 	bl	d5444 <_Z26igh_boron_toggle_boron_ledh>
    }
}
   d4cc4:	b010      	add	sp, #64	; 0x40
   d4cc6:	bd70      	pop	{r4, r5, r6, pc}
   d4cc8:	2003e6f1 	.word	0x2003e6f1
   d4ccc:	000dcd4c 	.word	0x000dcd4c
   d4cd0:	5e0be100 	.word	0x5e0be100

000d4cd4 <_Z27igh_app_commit_new_settingsv>:
        }
    }
}

void igh_app_commit_new_settings( void )
{
   d4cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( 1 == new_settings_available )
   d4cd8:	4b5a      	ldr	r3, [pc, #360]	; (d4e44 <_Z27igh_app_commit_new_settingsv+0x170>)
   d4cda:	781a      	ldrb	r2, [r3, #0]
   d4cdc:	2a01      	cmp	r2, #1
   d4cde:	461f      	mov	r7, r3
   d4ce0:	f040 80ad 	bne.w	d4e3e <_Z27igh_app_commit_new_settingsv+0x16a>
    {
        Serial.print("OP STATE:"); Serial.println(igh_current_system_settings.op_state);
   d4ce4:	f004 ffe8 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d4ce8:	4957      	ldr	r1, [pc, #348]	; (d4e48 <_Z27igh_app_commit_new_settingsv+0x174>)
   d4cea:	4c58      	ldr	r4, [pc, #352]	; (d4e4c <_Z27igh_app_commit_new_settingsv+0x178>)
   d4cec:	f004 fb00 	bl	d92f0 <_ZN5Print5printEPKc>
   d4cf0:	f004 ffe2 	bl	d9cb8 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4cf4:	220a      	movs	r2, #10
   d4cf6:	7a61      	ldrb	r1, [r4, #9]
   d4cf8:	4605      	mov	r5, r0
   d4cfa:	f004 fb16 	bl	d932a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4cfe:	4628      	mov	r0, r5
   d4d00:	f004 fafd 	bl	d92fe <_ZN5Print7printlnEv>
        Serial.print("REPORTING INTERVAL: "); Serial.println(igh_current_system_settings.reporting_interval);
   d4d04:	f004 ffd8 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d4d08:	4951      	ldr	r1, [pc, #324]	; (d4e50 <_Z27igh_app_commit_new_settingsv+0x17c>)
   d4d0a:	f004 faf1 	bl	d92f0 <_ZN5Print5printEPKc>
   d4d0e:	f004 ffd3 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d4d12:	220a      	movs	r2, #10
   d4d14:	6921      	ldr	r1, [r4, #16]
   d4d16:	f7ff ff81 	bl	d4c1c <_ZN5Print7printlnImLi0EEEjT_i>
        Serial.print("DATA RESOLUTION: "); Serial.println(igh_current_system_settings.data_resolution);
   d4d1a:	f004 ffcd 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d4d1e:	494d      	ldr	r1, [pc, #308]	; (d4e54 <_Z27igh_app_commit_new_settingsv+0x180>)
   d4d20:	f004 fae6 	bl	d92f0 <_ZN5Print5printEPKc>
   d4d24:	f004 ffc8 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d4d28:	220a      	movs	r2, #10
   d4d2a:	6961      	ldr	r1, [r4, #20]
   d4d2c:	f7ff ff76 	bl	d4c1c <_ZN5Print7printlnImLi0EEEjT_i>
        Serial.print("SERIAL NUMBER: ");
   d4d30:	f004 ffc2 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d4d34:	4948      	ldr	r1, [pc, #288]	; (d4e58 <_Z27igh_app_commit_new_settingsv+0x184>)
   d4d36:	f004 fadb 	bl	d92f0 <_ZN5Print5printEPKc>
   d4d3a:	f104 0617 	add.w	r6, r4, #23
   d4d3e:	f104 0823 	add.w	r8, r4, #35	; 0x23
   d4d42:	4625      	mov	r5, r4
        for( uint8_t i = 0; i < sizeof(igh_default_system_settings.serial_number); i++ )
        {
            if( igh_current_system_settings.serial_number[i] <= 0x0F ) Serial.print("0");
   d4d44:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   d4d48:	2b0f      	cmp	r3, #15
   d4d4a:	d804      	bhi.n	d4d56 <_Z27igh_app_commit_new_settingsv+0x82>
   d4d4c:	f004 ffb4 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d4d50:	4942      	ldr	r1, [pc, #264]	; (d4e5c <_Z27igh_app_commit_new_settingsv+0x188>)
   d4d52:	f004 facd 	bl	d92f0 <_ZN5Print5printEPKc>
            Serial.print(igh_current_system_settings.serial_number[i], HEX);
   d4d56:	f004 ffaf 	bl	d9cb8 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4d5a:	2210      	movs	r2, #16
   d4d5c:	7831      	ldrb	r1, [r6, #0]
   d4d5e:	f004 fae4 	bl	d932a <_ZN5Print11printNumberEmh>
    {
        Serial.print("OP STATE:"); Serial.println(igh_current_system_settings.op_state);
        Serial.print("REPORTING INTERVAL: "); Serial.println(igh_current_system_settings.reporting_interval);
        Serial.print("DATA RESOLUTION: "); Serial.println(igh_current_system_settings.data_resolution);
        Serial.print("SERIAL NUMBER: ");
        for( uint8_t i = 0; i < sizeof(igh_default_system_settings.serial_number); i++ )
   d4d62:	45b0      	cmp	r8, r6
   d4d64:	d1ee      	bne.n	d4d44 <_Z27igh_app_commit_new_settingsv+0x70>
        {
            if( igh_current_system_settings.serial_number[i] <= 0x0F ) Serial.print("0");
            Serial.print(igh_current_system_settings.serial_number[i], HEX);
        }
        Serial.print("\n");
   d4d66:	f004 ffa7 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d4d6a:	493d      	ldr	r1, [pc, #244]	; (d4e60 <_Z27igh_app_commit_new_settingsv+0x18c>)
   d4d6c:	f004 fac0 	bl	d92f0 <_ZN5Print5printEPKc>
        Serial.print("MQTT BROKER: "); Serial.println((char *)igh_current_system_settings.broker);
   d4d70:	f004 ffa2 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d4d74:	493b      	ldr	r1, [pc, #236]	; (d4e64 <_Z27igh_app_commit_new_settingsv+0x190>)
   d4d76:	f004 fabb 	bl	d92f0 <_ZN5Print5printEPKc>
   d4d7a:	f004 ff9d 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d4d7e:	493a      	ldr	r1, [pc, #232]	; (d4e68 <_Z27igh_app_commit_new_settingsv+0x194>)
   d4d80:	f004 fac9 	bl	d9316 <_ZN5Print7printlnEPKc>
        Serial.print("MQTT BROKER PORT: "); Serial.println(igh_current_system_settings.broker_port);
   d4d84:	f004 ff98 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d4d88:	4938      	ldr	r1, [pc, #224]	; (d4e6c <_Z27igh_app_commit_new_settingsv+0x198>)
   d4d8a:	f004 fab1 	bl	d92f0 <_ZN5Print5printEPKc>
   d4d8e:	f004 ff93 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d4d92:	220a      	movs	r2, #10
   d4d94:	f8b5 1044 	ldrh.w	r1, [r5, #68]	; 0x44
   d4d98:	4604      	mov	r4, r0
   d4d9a:	f004 fac6 	bl	d932a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4d9e:	4620      	mov	r0, r4
   d4da0:	f004 faad 	bl	d92fe <_ZN5Print7printlnEv>
        Serial.print("TIMEZONE: "); Serial.println(igh_current_system_settings.timezone);
   d4da4:	f004 ff88 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d4da8:	4931      	ldr	r1, [pc, #196]	; (d4e70 <_Z27igh_app_commit_new_settingsv+0x19c>)
   d4daa:	f004 faa1 	bl	d92f0 <_ZN5Print5printEPKc>
   d4dae:	f004 ff83 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d4db2:	686c      	ldr	r4, [r5, #4]
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d4db4:	2c00      	cmp	r4, #0
   d4db6:	4606      	mov	r6, r0
   d4db8:	da04      	bge.n	d4dc4 <_Z27igh_app_commit_new_settingsv+0xf0>
            t = print('-');
   d4dba:	212d      	movs	r1, #45	; 0x2d
   d4dbc:	f004 fa9c 	bl	d92f8 <_ZN5Print5printEc>
            val = -n;
   d4dc0:	4261      	negs	r1, r4
   d4dc2:	e000      	b.n	d4dc6 <_Z27igh_app_commit_new_settingsv+0xf2>
        } else {
            val = n;
   d4dc4:	4621      	mov	r1, r4
        }
        return printNumber(val, base) + t;
   d4dc6:	220a      	movs	r2, #10
   d4dc8:	4630      	mov	r0, r6
   d4dca:	f004 faae 	bl	d932a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4dce:	4630      	mov	r0, r6
   d4dd0:	f004 fa95 	bl	d92fe <_ZN5Print7printlnEv>
        Serial.print("IRRIGATION HOUR: "); Serial.println(igh_current_system_settings.irrigation_hr);
   d4dd4:	f004 ff70 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d4dd8:	4926      	ldr	r1, [pc, #152]	; (d4e74 <_Z27igh_app_commit_new_settingsv+0x1a0>)
   d4dda:	f004 fa89 	bl	d92f0 <_ZN5Print5printEPKc>
   d4dde:	f004 ff6b 	bl	d9cb8 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4de2:	220a      	movs	r2, #10
   d4de4:	7a29      	ldrb	r1, [r5, #8]
   d4de6:	4604      	mov	r4, r0
   d4de8:	f004 fa9f 	bl	d932a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4dec:	4620      	mov	r0, r4
   d4dee:	f004 fa86 	bl	d92fe <_ZN5Print7printlnEv>
        Serial.print("VALVE OPEN PERIOD: "); Serial.println(igh_current_system_settings.water_dispenser_period);
   d4df2:	f004 ff61 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d4df6:	4920      	ldr	r1, [pc, #128]	; (d4e78 <_Z27igh_app_commit_new_settingsv+0x1a4>)
   d4df8:	f004 fa7a 	bl	d92f0 <_ZN5Print5printEPKc>
   d4dfc:	f004 ff5c 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d4e00:	220a      	movs	r2, #10
   d4e02:	68e9      	ldr	r1, [r5, #12]
   d4e04:	f7ff ff0a 	bl	d4c1c <_ZN5Print7printlnImLi0EEEjT_i>
        Serial.print("CHECKSUM: "); Serial.println(igh_current_system_settings.checksum);
   d4e08:	f004 ff56 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d4e0c:	491b      	ldr	r1, [pc, #108]	; (d4e7c <_Z27igh_app_commit_new_settingsv+0x1a8>)
   d4e0e:	f004 fa6f 	bl	d92f0 <_ZN5Print5printEPKc>
   d4e12:	f004 ff51 	bl	d9cb8 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4e16:	220a      	movs	r2, #10
   d4e18:	7829      	ldrb	r1, [r5, #0]
   d4e1a:	4604      	mov	r4, r0
   d4e1c:	f004 fa85 	bl	d932a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4e20:	4620      	mov	r0, r4
   d4e22:	f004 fa6c 	bl	d92fe <_ZN5Print7printlnEv>

        if ( true == igh_eeprom_save_system_settings( &igh_current_system_settings) )
   d4e26:	4809      	ldr	r0, [pc, #36]	; (d4e4c <_Z27igh_app_commit_new_settingsv+0x178>)
   d4e28:	f000 fa22 	bl	d5270 <_Z31igh_eeprom_save_system_settingsP15system_settings>
   d4e2c:	2801      	cmp	r0, #1
   d4e2e:	d104      	bne.n	d4e3a <_Z27igh_app_commit_new_settingsv+0x166>
        {
            Serial.println("Settings Saved successfully");
   d4e30:	f004 ff42 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d4e34:	4912      	ldr	r1, [pc, #72]	; (d4e80 <_Z27igh_app_commit_new_settingsv+0x1ac>)
   d4e36:	f004 fa6e 	bl	d9316 <_ZN5Print7printlnEPKc>
        }

        new_settings_available = 0;
   d4e3a:	2300      	movs	r3, #0
   d4e3c:	703b      	strb	r3, [r7, #0]
   d4e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4e42:	bf00      	nop
   d4e44:	2003d8e4 	.word	0x2003d8e4
   d4e48:	000dcd54 	.word	0x000dcd54
   d4e4c:	2003e604 	.word	0x2003e604
   d4e50:	000dcd5e 	.word	0x000dcd5e
   d4e54:	000dcd73 	.word	0x000dcd73
   d4e58:	000dcd85 	.word	0x000dcd85
   d4e5c:	000dcd1a 	.word	0x000dcd1a
   d4e60:	000dd1c1 	.word	0x000dd1c1
   d4e64:	000dcd95 	.word	0x000dcd95
   d4e68:	2003e628 	.word	0x2003e628
   d4e6c:	000dcda3 	.word	0x000dcda3
   d4e70:	000dcf48 	.word	0x000dcf48
   d4e74:	000dcdb6 	.word	0x000dcdb6
   d4e78:	000dcdc8 	.word	0x000dcdc8
   d4e7c:	000dcddc 	.word	0x000dcddc
   d4e80:	000dcde7 	.word	0x000dcde7

000d4e84 <_Z20igh_main_applicationv>:
    // setup the SD card
    igh_sd_log_setup();
}

void igh_main_application( void )
{
   d4e84:	b508      	push	{r3, lr}
    // check if there are any settings to read
    igh_app_get_new_settings();
   d4e86:	f7ff fd6d 	bl	d4964 <_Z24igh_app_get_new_settingsv>

    // commit new settings if available
    igh_app_commit_new_settings();
   d4e8a:	f7ff ff23 	bl	d4cd4 <_Z27igh_app_commit_new_settingsv>

    // process boron service
    igh_boron_service();
   d4e8e:	f000 ff5f 	bl	d5d50 <_Z17igh_boron_servicev>
    
    // Send or store device restart message
    igh_app_send_device_restart();
   d4e92:	f7ff fd05 	bl	d48a0 <_Z27igh_app_send_device_restartv>
    
    // Send or Store Spear data
    igh_app_receive_and_stage_sensor_data();
   d4e96:	f7ff fed3 	bl	d4c40 <_Z37igh_app_receive_and_stage_sensor_datav>

    // Run MQTT service in background
    igh_mqtt_service();
   d4e9a:	f000 f897 	bl	d4fcc <_Z16igh_mqtt_servicev>

    // rfm69 service in the background
    igh_rfm69_service();
   d4e9e:	f001 f825 	bl	d5eec <_Z17igh_rfm69_servicev>

    // manage data on SD card
    igh_app_log_service();
   d4ea2:	f7ff fdbd 	bl	d4a20 <_Z19igh_app_log_servicev>

    // control the valve
    igh_hardware_service_valve_state();

}
   d4ea6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

    // manage data on SD card
    igh_app_log_service();

    // control the valve
    igh_hardware_service_valve_state();
   d4eaa:	f000 bac3 	b.w	d5434 <_Z32igh_hardware_service_valve_statev>

000d4eae <_GLOBAL__sub_I_log_service_timer>:
   d4eae:	f003 bbf1 	b.w	d8694 <HAL_Pin_Map>
	...

000d4eb4 <_Z13mqtt_callbackPcPhj>:

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);

void mqtt_callback(char* topic, byte* payload, unsigned int length) {
   d4eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    igh_msg_type msg_type = UNKNOWN_MSG;
    uint8_t p[length];
   d4eb8:	1dd3      	adds	r3, r2, #7
   d4eba:	f023 0307 	bic.w	r3, r3, #7

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);

void mqtt_callback(char* topic, byte* payload, unsigned int length) {
   d4ebe:	af00      	add	r7, sp, #0
    igh_msg_type msg_type = UNKNOWN_MSG;
    uint8_t p[length];
   d4ec0:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(p, payload, length);
   d4ec4:	4668      	mov	r0, sp

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);

void mqtt_callback(char* topic, byte* payload, unsigned int length) {
   d4ec6:	4690      	mov	r8, r2
    igh_msg_type msg_type = UNKNOWN_MSG;
    uint8_t p[length];
    memcpy(p, payload, length);
   d4ec8:	f006 fdab 	bl	dba22 <memcpy>

    Serial.print("RECEIVED MSG: ");
   d4ecc:	f004 fef4 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d4ed0:	4916      	ldr	r1, [pc, #88]	; (d4f2c <_Z13mqtt_callbackPcPhj+0x78>)
   d4ed2:	f004 fa0d 	bl	d92f0 <_ZN5Print5printEPKc>
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);

void mqtt_callback(char* topic, byte* payload, unsigned int length) {
    igh_msg_type msg_type = UNKNOWN_MSG;
    uint8_t p[length];
   d4ed6:	466c      	mov	r4, sp
    memcpy(p, payload, length);

    Serial.print("RECEIVED MSG: ");
   d4ed8:	2500      	movs	r5, #0
    for( uint8_t i = 0; i < length; i++ )
   d4eda:	b2ee      	uxtb	r6, r5
   d4edc:	45b0      	cmp	r8, r6
   d4ede:	d90f      	bls.n	d4f00 <_Z13mqtt_callbackPcPhj+0x4c>
    {
        if( p[i] <= 0x0F ) Serial.print("0");
   d4ee0:	5da3      	ldrb	r3, [r4, r6]
   d4ee2:	2b0f      	cmp	r3, #15
   d4ee4:	d804      	bhi.n	d4ef0 <_Z13mqtt_callbackPcPhj+0x3c>
   d4ee6:	f004 fee7 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d4eea:	4911      	ldr	r1, [pc, #68]	; (d4f30 <_Z13mqtt_callbackPcPhj+0x7c>)
   d4eec:	f004 fa00 	bl	d92f0 <_ZN5Print5printEPKc>
        Serial.print(p[i], HEX);
   d4ef0:	f004 fee2 	bl	d9cb8 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4ef4:	2210      	movs	r2, #16
   d4ef6:	5da1      	ldrb	r1, [r4, r6]
   d4ef8:	f004 fa17 	bl	d932a <_ZN5Print11printNumberEmh>
   d4efc:	3501      	adds	r5, #1
    igh_msg_type msg_type = UNKNOWN_MSG;
    uint8_t p[length];
    memcpy(p, payload, length);

    Serial.print("RECEIVED MSG: ");
    for( uint8_t i = 0; i < length; i++ )
   d4efe:	e7ec      	b.n	d4eda <_Z13mqtt_callbackPcPhj+0x26>
    {
        if( p[i] <= 0x0F ) Serial.print("0");
        Serial.print(p[i], HEX);
    }

    msg_type = (igh_msg_type)igh_message_process_incoming_msg( p );
   d4f00:	4620      	mov	r0, r4
   d4f02:	f7ff fb59 	bl	d45b8 <igh_message_process_incoming_msg>
   d4f06:	4605      	mov	r5, r0

    Serial.print("\nMESSAGE TYPE: ");
   d4f08:	f004 fed6 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d4f0c:	4909      	ldr	r1, [pc, #36]	; (d4f34 <_Z13mqtt_callbackPcPhj+0x80>)
   d4f0e:	f004 f9ef 	bl	d92f0 <_ZN5Print5printEPKc>
    Serial.println((int)msg_type);
   d4f12:	f004 fed1 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d4f16:	220a      	movs	r2, #10
   d4f18:	4604      	mov	r4, r0
   d4f1a:	4629      	mov	r1, r5
   d4f1c:	f004 fa05 	bl	d932a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4f20:	4620      	mov	r0, r4
   d4f22:	f004 f9ec 	bl	d92fe <_ZN5Print7printlnEv>
}
   d4f26:	46bd      	mov	sp, r7
   d4f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4f2c:	000dce03 	.word	0x000dce03
   d4f30:	000dcd1a 	.word	0x000dcd1a
   d4f34:	000dce12 	.word	0x000dce12

000d4f38 <_Z14igh_mqtt_setupv>:

void igh_mqtt_setup( void )
{
   d4f38:	b510      	push	{r4, lr}
    // set mqtt device name
    device_name = System.deviceID();
   d4f3a:	4c1e      	ldr	r4, [pc, #120]	; (d4fb4 <_Z14igh_mqtt_setupv+0x7c>)
    Serial.print("\nMESSAGE TYPE: ");
    Serial.println((int)msg_type);
}

void igh_mqtt_setup( void )
{
   d4f3c:	b088      	sub	sp, #32
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d4f3e:	a804      	add	r0, sp, #16
   d4f40:	f003 fec4 	bl	d8ccc <spark_deviceID>
    // set mqtt device name
    device_name = System.deviceID();
   d4f44:	a904      	add	r1, sp, #16
   d4f46:	4620      	mov	r0, r4
   d4f48:	f004 f964 	bl	d9214 <_ZN6StringaSEOS_>
   d4f4c:	a804      	add	r0, sp, #16
   d4f4e:	f004 f8db 	bl	d9108 <_ZN6StringD1Ev>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4f52:	4919      	ldr	r1, [pc, #100]	; (d4fb8 <_Z14igh_mqtt_setupv+0x80>)
   d4f54:	a804      	add	r0, sp, #16
   d4f56:	f004 f91e 	bl	d9196 <_ZN6StringC1EPK19__FlashStringHelper>
   d4f5a:	4668      	mov	r0, sp
   d4f5c:	f003 feb6 	bl	d8ccc <spark_deviceID>
    inbound_topic = "44" + System.deviceID();
   d4f60:	4669      	mov	r1, sp
   d4f62:	a804      	add	r0, sp, #16
   d4f64:	f004 f986 	bl	d9274 <_ZplRK15StringSumHelperRK6String>
   d4f68:	4601      	mov	r1, r0
   d4f6a:	4814      	ldr	r0, [pc, #80]	; (d4fbc <_Z14igh_mqtt_setupv+0x84>)
   d4f6c:	f004 f943 	bl	d91f6 <_ZN6StringaSERKS_>
   d4f70:	4668      	mov	r0, sp
   d4f72:	f004 f8c9 	bl	d9108 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4f76:	a804      	add	r0, sp, #16
   d4f78:	f004 f8c6 	bl	d9108 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4f7c:	4910      	ldr	r1, [pc, #64]	; (d4fc0 <_Z14igh_mqtt_setupv+0x88>)
   d4f7e:	a804      	add	r0, sp, #16
   d4f80:	f004 f909 	bl	d9196 <_ZN6StringC1EPK19__FlashStringHelper>
   d4f84:	4668      	mov	r0, sp
   d4f86:	f003 fea1 	bl	d8ccc <spark_deviceID>
    outbound_topic = "55" + System.deviceID();
   d4f8a:	4669      	mov	r1, sp
   d4f8c:	a804      	add	r0, sp, #16
   d4f8e:	f004 f971 	bl	d9274 <_ZplRK15StringSumHelperRK6String>
   d4f92:	4601      	mov	r1, r0
   d4f94:	480b      	ldr	r0, [pc, #44]	; (d4fc4 <_Z14igh_mqtt_setupv+0x8c>)
   d4f96:	f004 f92e 	bl	d91f6 <_ZN6StringaSERKS_>
   d4f9a:	4668      	mov	r0, sp
   d4f9c:	f004 f8b4 	bl	d9108 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4fa0:	a804      	add	r0, sp, #16
   d4fa2:	f004 f8b1 	bl	d9108 <_ZN6StringD1Ev>
    client.connect( (const char *)device_name );
   d4fa6:	6821      	ldr	r1, [r4, #0]
   d4fa8:	4807      	ldr	r0, [pc, #28]	; (d4fc8 <_Z14igh_mqtt_setupv+0x90>)
   d4faa:	f001 f9eb 	bl	d6384 <_ZN4MQTT7connectEPKc>

}
   d4fae:	b008      	add	sp, #32
   d4fb0:	bd10      	pop	{r4, pc}
   d4fb2:	bf00      	nop
   d4fb4:	2003d910 	.word	0x2003d910
   d4fb8:	000dce22 	.word	0x000dce22
   d4fbc:	2003d8f0 	.word	0x2003d8f0
   d4fc0:	000dce25 	.word	0x000dce25
   d4fc4:	2003d900 	.word	0x2003d900
   d4fc8:	2003d920 	.word	0x2003d920

000d4fcc <_Z16igh_mqtt_servicev>:

void igh_mqtt_service( void )
{
   d4fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if( true == mqtt_set_broker )
   d4fd0:	4b34      	ldr	r3, [pc, #208]	; (d50a4 <_Z16igh_mqtt_servicev+0xd8>)
   d4fd2:	781a      	ldrb	r2, [r3, #0]
   d4fd4:	2a01      	cmp	r2, #1
    client.connect( (const char *)device_name );

}

void igh_mqtt_service( void )
{
   d4fd6:	af00      	add	r7, sp, #0
   d4fd8:	461d      	mov	r5, r3
    if( true == mqtt_set_broker )
   d4fda:	d139      	bne.n	d5050 <_Z16igh_mqtt_servicev+0x84>
    {
        uint8_t broker_len = 0;
        while( igh_current_system_settings.broker[broker_len] )
   d4fdc:	4932      	ldr	r1, [pc, #200]	; (d50a8 <_Z16igh_mqtt_servicev+0xdc>)
        Serial.print("BROKER: "); Serial.print(new_broker);
        Serial.print(" PORT: "); Serial.println(igh_current_system_settings.broker_port);
        
        client.setBroker(new_broker, igh_current_system_settings.broker_port);

        mqtt_set_broker = false;
   d4fde:	46e8      	mov	r8, sp
   d4fe0:	2200      	movs	r2, #0
   d4fe2:	1c50      	adds	r0, r2, #1
void igh_mqtt_service( void )
{
    if( true == mqtt_set_broker )
    {
        uint8_t broker_len = 0;
        while( igh_current_system_settings.broker[broker_len] )
   d4fe4:	b2d2      	uxtb	r2, r2
   d4fe6:	188b      	adds	r3, r1, r2
   d4fe8:	4e2f      	ldr	r6, [pc, #188]	; (d50a8 <_Z16igh_mqtt_servicev+0xdc>)
   d4fea:	f893 4024 	ldrb.w	r4, [r3, #36]	; 0x24
   d4fee:	b10c      	cbz	r4, d4ff4 <_Z16igh_mqtt_servicev+0x28>
   d4ff0:	4602      	mov	r2, r0
   d4ff2:	e7f6      	b.n	d4fe2 <_Z16igh_mqtt_servicev+0x16>
        {
            if( '\0' == igh_current_system_settings.broker[broker_len] ) break;
            broker_len++;
        }
        
        char new_broker[broker_len + 1];
   d4ff4:	f102 0308 	add.w	r3, r2, #8
   d4ff8:	f023 0307 	bic.w	r3, r3, #7
   d4ffc:	ebad 0d03 	sub.w	sp, sp, r3
        memcpy( new_broker, igh_current_system_settings.broker, sizeof(new_broker) );
   d5000:	3201      	adds	r2, #1
   d5002:	f106 0124 	add.w	r1, r6, #36	; 0x24
   d5006:	4668      	mov	r0, sp
   d5008:	f006 fd0b 	bl	dba22 <memcpy>

        Serial.print("BROKER: "); Serial.print(new_broker);
   d500c:	f004 fe54 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d5010:	4926      	ldr	r1, [pc, #152]	; (d50ac <_Z16igh_mqtt_servicev+0xe0>)
   d5012:	f004 f96d 	bl	d92f0 <_ZN5Print5printEPKc>
   d5016:	f004 fe4f 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d501a:	4669      	mov	r1, sp
   d501c:	f004 f968 	bl	d92f0 <_ZN5Print5printEPKc>
        Serial.print(" PORT: "); Serial.println(igh_current_system_settings.broker_port);
   d5020:	f004 fe4a 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d5024:	4922      	ldr	r1, [pc, #136]	; (d50b0 <_Z16igh_mqtt_servicev+0xe4>)
   d5026:	f004 f963 	bl	d92f0 <_ZN5Print5printEPKc>
   d502a:	f004 fe45 	bl	d9cb8 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d502e:	220a      	movs	r2, #10
   d5030:	f8b6 1044 	ldrh.w	r1, [r6, #68]	; 0x44
   d5034:	4681      	mov	r9, r0
   d5036:	f004 f978 	bl	d932a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d503a:	4648      	mov	r0, r9
   d503c:	f004 f95f 	bl	d92fe <_ZN5Print7printlnEv>
        
        client.setBroker(new_broker, igh_current_system_settings.broker_port);
   d5040:	4669      	mov	r1, sp
   d5042:	f8b6 2044 	ldrh.w	r2, [r6, #68]	; 0x44
   d5046:	481b      	ldr	r0, [pc, #108]	; (d50b4 <_Z16igh_mqtt_servicev+0xe8>)
   d5048:	f001 f8b2 	bl	d61b0 <_ZN4MQTT9setBrokerEPct>

        mqtt_set_broker = false;
   d504c:	702c      	strb	r4, [r5, #0]
   d504e:	46c5      	mov	sp, r8
    }

    if (client.isConnected())
   d5050:	4818      	ldr	r0, [pc, #96]	; (d50b4 <_Z16igh_mqtt_servicev+0xe8>)
   d5052:	4c19      	ldr	r4, [pc, #100]	; (d50b8 <_Z16igh_mqtt_servicev+0xec>)
   d5054:	f001 f89e 	bl	d6194 <_ZN4MQTT11isConnectedEv>
   d5058:	b170      	cbz	r0, d5078 <_Z16igh_mqtt_servicev+0xac>
    {
        client.loop();
   d505a:	4816      	ldr	r0, [pc, #88]	; (d50b4 <_Z16igh_mqtt_servicev+0xe8>)
        mqtt_connected = 1;
   d505c:	2501      	movs	r5, #1
        mqtt_set_broker = false;
    }

    if (client.isConnected())
    {
        client.loop();
   d505e:	f001 fa4e 	bl	d64fe <_ZN4MQTT4loopEv>
        mqtt_connected = 1;
   d5062:	7025      	strb	r5, [r4, #0]

        if( false == mqtt_subscribed )
   d5064:	4c15      	ldr	r4, [pc, #84]	; (d50bc <_Z16igh_mqtt_servicev+0xf0>)
   d5066:	7823      	ldrb	r3, [r4, #0]
   d5068:	b9c3      	cbnz	r3, d509c <_Z16igh_mqtt_servicev+0xd0>
   d506a:	4b15      	ldr	r3, [pc, #84]	; (d50c0 <_Z16igh_mqtt_servicev+0xf4>)
        {
            client.subscribe( (const char *)inbound_topic );
   d506c:	4811      	ldr	r0, [pc, #68]	; (d50b4 <_Z16igh_mqtt_servicev+0xe8>)
   d506e:	6819      	ldr	r1, [r3, #0]
   d5070:	f001 fb71 	bl	d6756 <_ZN4MQTT9subscribeEPKc>
            mqtt_subscribed = true;
   d5074:	7025      	strb	r5, [r4, #0]
   d5076:	e011      	b.n	d509c <_Z16igh_mqtt_servicev+0xd0>
        }
    }
    else
    {
        /* try to connect */
        mqtt_connected = 0;
   d5078:	7020      	strb	r0, [r4, #0]

        if( (millis() - reconnect_interval) > 10000 )
   d507a:	4c12      	ldr	r4, [pc, #72]	; (d50c4 <_Z16igh_mqtt_servicev+0xf8>)
   d507c:	f003 fbd2 	bl	d8824 <HAL_Timer_Get_Milli_Seconds>
   d5080:	6823      	ldr	r3, [r4, #0]
   d5082:	1ac0      	subs	r0, r0, r3
   d5084:	f242 7310 	movw	r3, #10000	; 0x2710
   d5088:	4298      	cmp	r0, r3
   d508a:	d907      	bls.n	d509c <_Z16igh_mqtt_servicev+0xd0>
   d508c:	4b0e      	ldr	r3, [pc, #56]	; (d50c8 <_Z16igh_mqtt_servicev+0xfc>)
        {
            // try to reconnect only once every 10 seconds
            client.connect( (const char *)device_name );
   d508e:	4809      	ldr	r0, [pc, #36]	; (d50b4 <_Z16igh_mqtt_servicev+0xe8>)
   d5090:	6819      	ldr	r1, [r3, #0]
   d5092:	f001 f977 	bl	d6384 <_ZN4MQTT7connectEPKc>
   d5096:	f003 fbc5 	bl	d8824 <HAL_Timer_Get_Milli_Seconds>
            reconnect_interval = millis();
   d509a:	6020      	str	r0, [r4, #0]
        }
    }
}
   d509c:	46bd      	mov	sp, r7
   d509e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d50a2:	bf00      	nop
   d50a4:	2003d7f4 	.word	0x2003d7f4
   d50a8:	2003e604 	.word	0x2003e604
   d50ac:	000dcd9a 	.word	0x000dcd9a
   d50b0:	000dcdae 	.word	0x000dcdae
   d50b4:	2003d920 	.word	0x2003d920
   d50b8:	2003d979 	.word	0x2003d979
   d50bc:	2003d978 	.word	0x2003d978
   d50c0:	2003d8f0 	.word	0x2003d8f0
   d50c4:	2003d8ec 	.word	0x2003d8ec
   d50c8:	2003d910 	.word	0x2003d910

000d50cc <_Z21igh_mqtt_publish_dataPhj>:

bool igh_mqtt_publish_data( uint8_t *payload, unsigned int len )
{
   d50cc:	b570      	push	{r4, r5, r6, lr}
   d50ce:	4605      	mov	r5, r0
    bool ret = false;
    if (client.isConnected()) {
   d50d0:	480d      	ldr	r0, [pc, #52]	; (d5108 <_Z21igh_mqtt_publish_dataPhj+0x3c>)
        }
    }
}

bool igh_mqtt_publish_data( uint8_t *payload, unsigned int len )
{
   d50d2:	460e      	mov	r6, r1
    bool ret = false;
    if (client.isConnected()) {
   d50d4:	f001 f85e 	bl	d6194 <_ZN4MQTT11isConnectedEv>
   d50d8:	4604      	mov	r4, r0
   d50da:	b168      	cbz	r0, d50f8 <_Z21igh_mqtt_publish_dataPhj+0x2c>
        client.publish( (const char *)outbound_topic, 
                        (const uint8_t*) payload, len);
   d50dc:	490b      	ldr	r1, [pc, #44]	; (d510c <_Z21igh_mqtt_publish_dataPhj+0x40>)
   d50de:	480a      	ldr	r0, [pc, #40]	; (d5108 <_Z21igh_mqtt_publish_dataPhj+0x3c>)
   d50e0:	6809      	ldr	r1, [r1, #0]
   d50e2:	4633      	mov	r3, r6
   d50e4:	462a      	mov	r2, r5
   d50e6:	f001 f9cd 	bl	d6484 <_ZN4MQTT7publishEPKcPKhj>
   d50ea:	4b09      	ldr	r3, [pc, #36]	; (d5110 <_Z21igh_mqtt_publish_dataPhj+0x44>)
        client.subscribe( (const char *)inbound_topic );
   d50ec:	4806      	ldr	r0, [pc, #24]	; (d5108 <_Z21igh_mqtt_publish_dataPhj+0x3c>)
   d50ee:	6819      	ldr	r1, [r3, #0]
   d50f0:	f001 fb31 	bl	d6756 <_ZN4MQTT9subscribeEPKc>
        ret = true;
   d50f4:	2001      	movs	r0, #1
   d50f6:	bd70      	pop	{r4, r5, r6, pc}
    }
    else
    {
        Serial.println("PUBLISH FAILED");
   d50f8:	f004 fdde 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d50fc:	4905      	ldr	r1, [pc, #20]	; (d5114 <_Z21igh_mqtt_publish_dataPhj+0x48>)
   d50fe:	f004 f90a 	bl	d9316 <_ZN5Print7printlnEPKc>
    }
}

bool igh_mqtt_publish_data( uint8_t *payload, unsigned int len )
{
    bool ret = false;
   d5102:	4620      	mov	r0, r4
    else
    {
        Serial.println("PUBLISH FAILED");
    }
    return ret;
}
   d5104:	bd70      	pop	{r4, r5, r6, pc}
   d5106:	bf00      	nop
   d5108:	2003d920 	.word	0x2003d920
   d510c:	2003d900 	.word	0x2003d900
   d5110:	2003d8f0 	.word	0x2003d8f0
   d5114:	000dce28 	.word	0x000dce28

000d5118 <_GLOBAL__sub_I_device_name>:
   d5118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#include "include/igh_settings.h"
#include "include/igh_default_settings.h"
#include "include/igh_message.h"

/* MQTT variables */
String device_name;
   d511a:	4e19      	ldr	r6, [pc, #100]	; (d5180 <_GLOBAL__sub_I_device_name+0x68>)
   d511c:	4f19      	ldr	r7, [pc, #100]	; (d5184 <_GLOBAL__sub_I_device_name+0x6c>)
   d511e:	4c1a      	ldr	r4, [pc, #104]	; (d5188 <_GLOBAL__sub_I_device_name+0x70>)
   d5120:	4d1a      	ldr	r5, [pc, #104]	; (d518c <_GLOBAL__sub_I_device_name+0x74>)
   d5122:	f003 fab7 	bl	d8694 <HAL_Pin_Map>
   d5126:	4631      	mov	r1, r6
   d5128:	4638      	mov	r0, r7
   d512a:	f004 f834 	bl	d9196 <_ZN6StringC1EPK19__FlashStringHelper>
   d512e:	4638      	mov	r0, r7
String inbound_topic;
   d5130:	4f17      	ldr	r7, [pc, #92]	; (d5190 <_GLOBAL__sub_I_device_name+0x78>)
#include "include/igh_settings.h"
#include "include/igh_default_settings.h"
#include "include/igh_message.h"

/* MQTT variables */
String device_name;
   d5132:	4622      	mov	r2, r4
   d5134:	4629      	mov	r1, r5
   d5136:	f005 fcb9 	bl	daaac <__aeabi_atexit>
String inbound_topic;
   d513a:	4631      	mov	r1, r6
   d513c:	4638      	mov	r0, r7
   d513e:	f004 f82a 	bl	d9196 <_ZN6StringC1EPK19__FlashStringHelper>
   d5142:	4638      	mov	r0, r7
String outbound_topic;
   d5144:	4f13      	ldr	r7, [pc, #76]	; (d5194 <_GLOBAL__sub_I_device_name+0x7c>)
#include "include/igh_default_settings.h"
#include "include/igh_message.h"

/* MQTT variables */
String device_name;
String inbound_topic;
   d5146:	4622      	mov	r2, r4
   d5148:	4629      	mov	r1, r5
   d514a:	f005 fcaf 	bl	daaac <__aeabi_atexit>
String outbound_topic;
   d514e:	4631      	mov	r1, r6
   d5150:	4638      	mov	r0, r7
   d5152:	f004 f820 	bl	d9196 <_ZN6StringC1EPK19__FlashStringHelper>
   d5156:	4629      	mov	r1, r5
bool mqtt_subscribed = false;
uint8_t mqtt_connected = 0;

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);
   d5158:	4d0f      	ldr	r5, [pc, #60]	; (d5198 <_GLOBAL__sub_I_device_name+0x80>)
#include "include/igh_message.h"

/* MQTT variables */
String device_name;
String inbound_topic;
String outbound_topic;
   d515a:	4622      	mov	r2, r4
   d515c:	4638      	mov	r0, r7
   d515e:	f005 fca5 	bl	daaac <__aeabi_atexit>
bool mqtt_subscribed = false;
uint8_t mqtt_connected = 0;

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);
   d5162:	4b0e      	ldr	r3, [pc, #56]	; (d519c <_GLOBAL__sub_I_device_name+0x84>)
   d5164:	490e      	ldr	r1, [pc, #56]	; (d51a0 <_GLOBAL__sub_I_device_name+0x88>)
   d5166:	f240 725b 	movw	r2, #1883	; 0x75b
   d516a:	4628      	mov	r0, r5
   d516c:	f000 ff2a 	bl	d5fc4 <_ZN4MQTTC1EPctPFvS0_PhjE>
   d5170:	4622      	mov	r2, r4
   d5172:	4628      	mov	r0, r5
   d5174:	490b      	ldr	r1, [pc, #44]	; (d51a4 <_GLOBAL__sub_I_device_name+0x8c>)
    else
    {
        Serial.println("PUBLISH FAILED");
    }
    return ret;
}
   d5176:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
bool mqtt_subscribed = false;
uint8_t mqtt_connected = 0;

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);
   d517a:	f005 bc97 	b.w	daaac <__aeabi_atexit>
   d517e:	bf00      	nop
   d5180:	000dd1c2 	.word	0x000dd1c2
   d5184:	2003d910 	.word	0x2003d910
   d5188:	2003d8e0 	.word	0x2003d8e0
   d518c:	000d9109 	.word	0x000d9109
   d5190:	2003d8f0 	.word	0x2003d8f0
   d5194:	2003d900 	.word	0x2003d900
   d5198:	2003d920 	.word	0x2003d920
   d519c:	000d4eb5 	.word	0x000d4eb5
   d51a0:	000dce37 	.word	0x000dce37
   d51a4:	000d675d 	.word	0x000d675d

000d51a8 <_GLOBAL__sub_I_test_valve_flag>:
        igh_append_test_status(ret);
        test_rfm69_flag = false;
    }

    return ret;
   d51a8:	b510      	push	{r4, lr}
static void print_cmd_options(void);
static void igh_append_test_status(uint8_t _status);

uint8_t test_rfm69_flag = 0;

String IGH_ID;
   d51aa:	4c07      	ldr	r4, [pc, #28]	; (d51c8 <_GLOBAL__sub_I_test_valve_flag+0x20>)
   d51ac:	f003 fa72 	bl	d8694 <HAL_Pin_Map>
   d51b0:	4906      	ldr	r1, [pc, #24]	; (d51cc <_GLOBAL__sub_I_test_valve_flag+0x24>)
   d51b2:	4620      	mov	r0, r4
   d51b4:	f003 ffef 	bl	d9196 <_ZN6StringC1EPK19__FlashStringHelper>
   d51b8:	4620      	mov	r0, r4
   d51ba:	4a05      	ldr	r2, [pc, #20]	; (d51d0 <_GLOBAL__sub_I_test_valve_flag+0x28>)
   d51bc:	4905      	ldr	r1, [pc, #20]	; (d51d4 <_GLOBAL__sub_I_test_valve_flag+0x2c>)
        igh_append_test_status(ret);
        test_rfm69_flag = false;
    }

    return ret;
   d51be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void print_cmd_options(void);
static void igh_append_test_status(uint8_t _status);

uint8_t test_rfm69_flag = 0;

String IGH_ID;
   d51c2:	f005 bc73 	b.w	daaac <__aeabi_atexit>
   d51c6:	bf00      	nop
   d51c8:	2003d97c 	.word	0x2003d97c
   d51cc:	000dd1c2 	.word	0x000dd1c2
   d51d0:	2003d8e0 	.word	0x2003d8e0
   d51d4:	000d9109 	.word	0x000d9109

000d51d8 <_Z31igh_eeprom_read_system_settingsP15system_settings>:
 * \brief Gets system settings from eeprom emulator
 * \param running_system_settings_buffer: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_system_settings(system_settings * running_system_settings_buffer)
{
   d51d8:	b510      	push	{r4, lr}
   d51da:	b092      	sub	sp, #72	; 0x48
  system_settings local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d51dc:	2248      	movs	r2, #72	; 0x48
   d51de:	2100      	movs	r1, #0
 * \brief Gets system settings from eeprom emulator
 * \param running_system_settings_buffer: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_system_settings(system_settings * running_system_settings_buffer)
{
   d51e0:	4604      	mov	r4, r0
  system_settings local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d51e2:	4668      	mov	r0, sp
   d51e4:	f006 fc28 	bl	dba38 <memset>
  EEPROM.get(SYSTEM_SETTINGS_ADDRESS, local_buffer);
   d51e8:	f005 fbcc 	bl	da984 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d51ec:	2248      	movs	r2, #72	; 0x48
   d51ee:	4669      	mov	r1, sp
   d51f0:	2000      	movs	r0, #0
   d51f2:	f003 fb2f 	bl	d8854 <HAL_EEPROM_Get>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));
   d51f6:	2148      	movs	r1, #72	; 0x48
   d51f8:	4668      	mov	r0, sp
   d51fa:	f7ff f925 	bl	d4448 <igh_settings_calculate_checksum>

  if( checksum != local_buffer.checksum)
   d51fe:	f89d 3000 	ldrb.w	r3, [sp]
   d5202:	4283      	cmp	r3, r0
   d5204:	d106      	bne.n	d5214 <_Z31igh_eeprom_read_system_settingsP15system_settings+0x3c>
  {
    return 0;
  }

  *running_system_settings_buffer = local_buffer;
   d5206:	2248      	movs	r2, #72	; 0x48
   d5208:	4669      	mov	r1, sp
   d520a:	4620      	mov	r0, r4
   d520c:	f006 fc09 	bl	dba22 <memcpy>
  return 1;
   d5210:	2001      	movs	r0, #1
   d5212:	e000      	b.n	d5216 <_Z31igh_eeprom_read_system_settingsP15system_settings+0x3e>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));

  if( checksum != local_buffer.checksum)
  {
    return 0;
   d5214:	2000      	movs	r0, #0
  }

  *running_system_settings_buffer = local_buffer;
  return 1;

}
   d5216:	b012      	add	sp, #72	; 0x48
   d5218:	bd10      	pop	{r4, pc}
	...

000d521c <_Z15igh_eeprom_initv>:
#define SYSTEM_THRESHOLDS_ADDRESS   (int)0x0200
#define SYSTEM_ERRORS_ADDRESS       (int)0x0400


void igh_eeprom_init( void )
{
   d521c:	b510      	push	{r4, lr}
   d521e:	b092      	sub	sp, #72	; 0x48
  system_settings settings_in_memory;
  bool settings_read_successfully = igh_eeprom_read_system_settings(&settings_in_memory);
   d5220:	4668      	mov	r0, sp
   d5222:	f7ff ffd9 	bl	d51d8 <_Z31igh_eeprom_read_system_settingsP15system_settings>
  uint8_t valid_checksum = igh_settings_calculate_checksum( &settings_in_memory, sizeof(settings_in_memory) );
   d5226:	2148      	movs	r1, #72	; 0x48


void igh_eeprom_init( void )
{
  system_settings settings_in_memory;
  bool settings_read_successfully = igh_eeprom_read_system_settings(&settings_in_memory);
   d5228:	4604      	mov	r4, r0
  uint8_t valid_checksum = igh_settings_calculate_checksum( &settings_in_memory, sizeof(settings_in_memory) );
   d522a:	4668      	mov	r0, sp
   d522c:	f7ff f90c 	bl	d4448 <igh_settings_calculate_checksum>

  if( false == settings_read_successfully ||
   d5230:	b124      	cbz	r4, d523c <_Z15igh_eeprom_initv+0x20>
   d5232:	f89d 3000 	ldrb.w	r3, [sp]
   d5236:	4283      	cmp	r3, r0
   d5238:	d100      	bne.n	d523c <_Z15igh_eeprom_initv+0x20>
      (settings_in_memory.checksum != valid_checksum) ||
   d523a:	b93b      	cbnz	r3, d524c <_Z15igh_eeprom_initv+0x30>
      ( 0 == settings_in_memory.checksum) )
  {
    // if we can't get valid settings from memory at all, use default settings
    Serial.println("USING DEFAULT SETTINGS");
   d523c:	f004 fd3c 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d5240:	4908      	ldr	r1, [pc, #32]	; (d5264 <_Z15igh_eeprom_initv+0x48>)
   d5242:	f004 f868 	bl	d9316 <_ZN5Print7printlnEPKc>
    igh_settings_reset_system_to_default();
   d5246:	f7ff f941 	bl	d44cc <igh_settings_reset_system_to_default>
   d524a:	e009      	b.n	d5260 <_Z15igh_eeprom_initv+0x44>
  }
  else
  {
    Serial.println("USING SETTINGS FROM MEMORY");
   d524c:	f004 fd34 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d5250:	4905      	ldr	r1, [pc, #20]	; (d5268 <_Z15igh_eeprom_initv+0x4c>)
   d5252:	f004 f860 	bl	d9316 <_ZN5Print7printlnEPKc>
    igh_current_system_settings = settings_in_memory;
   d5256:	2248      	movs	r2, #72	; 0x48
   d5258:	4669      	mov	r1, sp
   d525a:	4804      	ldr	r0, [pc, #16]	; (d526c <_Z15igh_eeprom_initv+0x50>)
   d525c:	f006 fbe1 	bl	dba22 <memcpy>
  }
}
   d5260:	b012      	add	sp, #72	; 0x48
   d5262:	bd10      	pop	{r4, pc}
   d5264:	000dced8 	.word	0x000dced8
   d5268:	000dceef 	.word	0x000dceef
   d526c:	2003e604 	.word	0x2003e604

000d5270 <_Z31igh_eeprom_save_system_settingsP15system_settings>:
 * \brief Save system settings  to eeprom emulator
 * \param settings_to_save: pointer to struct to save
 * \return true or false based on write success
 */
uint8_t igh_eeprom_save_system_settings(system_settings * settings_to_save)
{
   d5270:	b510      	push	{r4, lr}
   d5272:	4604      	mov	r4, r0
   d5274:	b092      	sub	sp, #72	; 0x48
  system_settings local_buffer;
  // save the data
  EEPROM.put(SYSTEM_SETTINGS_ADDRESS, *settings_to_save);
   d5276:	f005 fb85 	bl	da984 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d527a:	2248      	movs	r2, #72	; 0x48
   d527c:	4621      	mov	r1, r4
   d527e:	2000      	movs	r0, #0
   d5280:	f003 faf0 	bl	d8864 <HAL_EEPROM_Put>
  // check if data is saved
  igh_eeprom_read_system_settings(&local_buffer);
   d5284:	4668      	mov	r0, sp
   d5286:	f7ff ffa7 	bl	d51d8 <_Z31igh_eeprom_read_system_settingsP15system_settings>

  if( local_buffer.checksum != (settings_to_save->checksum))
  {
    return 0;
   d528a:	f89d 0000 	ldrb.w	r0, [sp]
   d528e:	7823      	ldrb	r3, [r4, #0]
  }

  return 1;
}
   d5290:	1ac3      	subs	r3, r0, r3
   d5292:	4258      	negs	r0, r3
   d5294:	4158      	adcs	r0, r3
   d5296:	b012      	add	sp, #72	; 0x48
   d5298:	bd10      	pop	{r4, pc}

000d529a <_GLOBAL__sub_I__Z15igh_eeprom_initv>:
   d529a:	f003 b9fb 	b.w	d8694 <HAL_Pin_Map>
	...

000d52a0 <_Z30igh_app_water_counter_callbackv>:
    water_flow_timer.start();
}

void igh_app_water_counter_callback( void )
{
    flow_meter_pulses++;
   d52a0:	4a02      	ldr	r2, [pc, #8]	; (d52ac <_Z30igh_app_water_counter_callbackv+0xc>)
   d52a2:	6813      	ldr	r3, [r2, #0]
   d52a4:	3301      	adds	r3, #1
   d52a6:	6013      	str	r3, [r2, #0]
   d52a8:	4770      	bx	lr
   d52aa:	bf00      	nop
   d52ac:	2003d9a8 	.word	0x2003d9a8

000d52b0 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d52b0:	6803      	ldr	r3, [r0, #0]
   d52b2:	4718      	bx	r3

000d52b4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d52b4:	2a01      	cmp	r2, #1
   d52b6:	d002      	beq.n	d52be <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d52b8:	2a02      	cmp	r2, #2
   d52ba:	d002      	beq.n	d52c2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d52bc:	e004      	b.n	d52c8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d52be:	6001      	str	r1, [r0, #0]
	      break;
   d52c0:	e002      	b.n	d52c8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d52c2:	680b      	ldr	r3, [r1, #0]
   d52c4:	b100      	cbz	r0, d52c8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d52c6:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d52c8:	2000      	movs	r0, #0
   d52ca:	4770      	bx	lr

000d52cc <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d52cc:	6943      	ldr	r3, [r0, #20]
   d52ce:	b113      	cbz	r3, d52d6 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d52d0:	6983      	ldr	r3, [r0, #24]
   d52d2:	300c      	adds	r0, #12
   d52d4:	4718      	bx	r3
   d52d6:	4770      	bx	lr

000d52d8 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d52d8:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d52da:	2100      	movs	r1, #0
   d52dc:	4604      	mov	r4, r0
   d52de:	4608      	mov	r0, r1
   d52e0:	f003 faf0 	bl	d88c4 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d52e4:	a902      	add	r1, sp, #8
   d52e6:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d52e8:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d52ea:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d52ee:	f003 fb01 	bl	d88f4 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d52f2:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d52f4:	b10c      	cbz	r4, d52fa <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d52f6:	2301      	movs	r3, #1
   d52f8:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d52fa:	2100      	movs	r1, #0
   d52fc:	2001      	movs	r0, #1
   d52fe:	f003 fae1 	bl	d88c4 <os_thread_scheduling>
            }
        }
        if (t) {
   d5302:	b12c      	cbz	r4, d5310 <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d5304:	6823      	ldr	r3, [r4, #0]
   d5306:	4620      	mov	r0, r4
   d5308:	689b      	ldr	r3, [r3, #8]
   d530a:	4798      	blx	r3
            t->running = false;
   d530c:	2300      	movs	r3, #0
   d530e:	7123      	strb	r3, [r4, #4]
        }
    }
   d5310:	b002      	add	sp, #8
   d5312:	bd10      	pop	{r4, pc}

000d5314 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5314:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5316:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5318:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d531a:	b113      	cbz	r3, d5322 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d531c:	2203      	movs	r2, #3
   d531e:	4601      	mov	r1, r0
   d5320:	4798      	blx	r3
    }
   d5322:	4620      	mov	r0, r4
   d5324:	bd10      	pop	{r4, pc}
	...

000d5328 <_ZN5TimerC1EjSt8functionIFvvEEb>:
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d5328:	b5f0      	push	{r4, r5, r6, r7, lr}
   d532a:	2500      	movs	r5, #0
   d532c:	468e      	mov	lr, r1
   d532e:	4915      	ldr	r1, [pc, #84]	; (d5384 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   d5330:	7105      	strb	r5, [r0, #4]
   d5332:	6085      	str	r5, [r0, #8]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5334:	6145      	str	r5, [r0, #20]
   d5336:	6001      	str	r1, [r0, #0]
   d5338:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d533a:	e892 0003 	ldmia.w	r2, {r0, r1}
   d533e:	b085      	sub	sp, #20
   d5340:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d5342:	f104 060c 	add.w	r6, r4, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5346:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d534a:	e896 0003 	ldmia.w	r6, {r0, r1}
   d534e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5352:	e897 0003 	ldmia.w	r7, {r0, r1}
   d5356:	e886 0003 	stmia.w	r6, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d535a:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   d535c:	6960      	ldr	r0, [r4, #20]
   d535e:	6090      	str	r0, [r2, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5360:	6161      	str	r1, [r4, #20]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5362:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5364:	69a0      	ldr	r0, [r4, #24]
   d5366:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5368:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d536a:	e88d 0028 	stmia.w	sp, {r3, r5}
   d536e:	4a06      	ldr	r2, [pc, #24]	; (d5388 <_ZN5TimerC1EjSt8functionIFvvEEb+0x60>)
   d5370:	4623      	mov	r3, r4
   d5372:	4671      	mov	r1, lr
   d5374:	f104 0008 	add.w	r0, r4, #8
   d5378:	f003 faac 	bl	d88d4 <os_timer_create>
    }
   d537c:	4620      	mov	r0, r4
   d537e:	b005      	add	sp, #20
   d5380:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5382:	bf00      	nop
   d5384:	000dcf24 	.word	0x000dcf24
   d5388:	000d52d9 	.word	0x000d52d9

000d538c <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d538c:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d538e:	6880      	ldr	r0, [r0, #8]
   d5390:	2300      	movs	r3, #0
   d5392:	b138      	cbz	r0, d53a4 <_ZN5Timer5_stopEjb+0x18>
   d5394:	e88d 000a 	stmia.w	sp, {r1, r3}
   d5398:	2102      	movs	r1, #2
   d539a:	f003 fab3 	bl	d8904 <os_timer_change>
   d539e:	fab0 f080 	clz	r0, r0
   d53a2:	0940      	lsrs	r0, r0, #5
    }
   d53a4:	b003      	add	sp, #12
   d53a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d53ac <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d53ac:	b538      	push	{r3, r4, r5, lr}
   d53ae:	4b10      	ldr	r3, [pc, #64]	; (d53f0 <_ZN5TimerD1Ev+0x44>)
   d53b0:	6003      	str	r3, [r0, #0]
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d53b2:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d53b4:	4604      	mov	r4, r0
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d53b6:	b1a3      	cbz	r3, d53e2 <_ZN5TimerD1Ev+0x36>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d53b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d53bc:	2200      	movs	r2, #0
   d53be:	f7ff ffe5 	bl	d538c <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d53c2:	2100      	movs	r1, #0
   d53c4:	68a0      	ldr	r0, [r4, #8]
   d53c6:	f003 fab5 	bl	d8934 <os_timer_set_id>
            while (running) {
   d53ca:	7923      	ldrb	r3, [r4, #4]
   d53cc:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d53d0:	b113      	cbz	r3, d53d8 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d53d2:	f003 fa5f 	bl	d8894 <os_thread_yield>
   d53d6:	e7f8      	b.n	d53ca <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d53d8:	4629      	mov	r1, r5
   d53da:	68a0      	ldr	r0, [r4, #8]
   d53dc:	f003 fa82 	bl	d88e4 <os_timer_destroy>
            handle = nullptr;
   d53e0:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d53e2:	f104 000c 	add.w	r0, r4, #12
   d53e6:	f7ff ff95 	bl	d5314 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d53ea:	4620      	mov	r0, r4
   d53ec:	bd38      	pop	{r3, r4, r5, pc}
   d53ee:	bf00      	nop
   d53f0:	000dcf24 	.word	0x000dcf24

000d53f4 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d53f4:	b510      	push	{r4, lr}
   d53f6:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d53f8:	f7ff ffd8 	bl	d53ac <_ZN5TimerD1Ev>
   d53fc:	4620      	mov	r0, r4
   d53fe:	211c      	movs	r1, #28
   d5400:	f005 fb62 	bl	daac8 <_ZdlPvj>
   d5404:	4620      	mov	r0, r4
   d5406:	bd10      	pop	{r4, pc}

000d5408 <_ZN5Timer6_startEjb>:
    inline bool changePeriod(std::chrono::milliseconds ms, unsigned block=default_wait) { return changePeriod(ms.count(), block); }

    bool isValid() const { return handle!=nullptr; }
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
   d5408:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d540a:	4606      	mov	r6, r0
   d540c:	4614      	mov	r4, r2
   d540e:	460d      	mov	r5, r1
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d5410:	2200      	movs	r2, #0
   d5412:	4621      	mov	r1, r4
   d5414:	f7ff ffba 	bl	d538c <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d5418:	68b0      	ldr	r0, [r6, #8]
   d541a:	2300      	movs	r3, #0
   d541c:	b140      	cbz	r0, d5430 <_ZN5Timer6_startEjb+0x28>
   d541e:	9301      	str	r3, [sp, #4]
   d5420:	9500      	str	r5, [sp, #0]
   d5422:	4622      	mov	r2, r4
   d5424:	4619      	mov	r1, r3
   d5426:	f003 fa6d 	bl	d8904 <os_timer_change>
   d542a:	fab0 f080 	clz	r0, r0
   d542e:	0940      	lsrs	r0, r0, #5
    }
   d5430:	b002      	add	sp, #8
   d5432:	bd70      	pop	{r4, r5, r6, pc}

000d5434 <_Z32igh_hardware_service_valve_statev>:
    current_valve_position = VALVE_CLOSE;
}

void igh_hardware_service_valve_state(void)
{
    digitalWrite(IGH_IRRIGATION_VALVE, current_valve_position);
   d5434:	4b02      	ldr	r3, [pc, #8]	; (d5440 <_Z32igh_hardware_service_valve_statev+0xc>)
   d5436:	2007      	movs	r0, #7
   d5438:	7819      	ldrb	r1, [r3, #0]
   d543a:	f005 ba76 	b.w	da92a <digitalWrite>
   d543e:	bf00      	nop
   d5440:	2003e64c 	.word	0x2003e64c

000d5444 <_Z26igh_boron_toggle_boron_ledh>:
}

/* Onboard LED APIs */
void igh_boron_toggle_boron_led(uint8_t _state)
{
    digitalWrite(BORON_LED, _state);
   d5444:	4601      	mov	r1, r0
   d5446:	2007      	movs	r0, #7
   d5448:	f005 ba6f 	b.w	da92a <digitalWrite>

000d544c <_Z21igh_boron_read_buttonv>:
    igh_button_timer.start();
    igh_button_sec_counter = 0;
}

uint8_t igh_boron_read_button(void)
{
   d544c:	b508      	push	{r3, lr}
    return digitalRead(IGH_IRRIGATION_BUTTON);
   d544e:	200f      	movs	r0, #15
   d5450:	f005 fa84 	bl	da95c <digitalRead>
}
   d5454:	b2c0      	uxtb	r0, r0
   d5456:	bd08      	pop	{r3, pc}

000d5458 <_Z31igh_boron_button_press_durationv>:

void igh_boron_button_press_duration(void)
{
   d5458:	b508      	push	{r3, lr}
    if(!igh_boron_read_button())
   d545a:	f7ff fff7 	bl	d544c <_Z21igh_boron_read_buttonv>
   d545e:	4b08      	ldr	r3, [pc, #32]	; (d5480 <_Z31igh_boron_button_press_durationv+0x28>)
   d5460:	b910      	cbnz	r0, d5468 <_Z31igh_boron_button_press_durationv+0x10>
    {
        igh_button_sec_counter++;
   d5462:	781a      	ldrb	r2, [r3, #0]
   d5464:	3201      	adds	r2, #1
   d5466:	e000      	b.n	d546a <_Z31igh_boron_button_press_durationv+0x12>
    }
    else
    {
        igh_button_sec_counter = 0;
   d5468:	2200      	movs	r2, #0
   d546a:	701a      	strb	r2, [r3, #0]
    } 

    if( THREE_SECONDS >= igh_button_sec_counter )
   d546c:	781b      	ldrb	r3, [r3, #0]
   d546e:	2b03      	cmp	r3, #3
    {
        // start or stop irrigation at any time with button
        button_irrigate = !button_irrigate;
   d5470:	bf9f      	itttt	ls
   d5472:	4a04      	ldrls	r2, [pc, #16]	; (d5484 <_Z31igh_boron_button_press_durationv+0x2c>)
   d5474:	7813      	ldrbls	r3, [r2, #0]
   d5476:	f083 0301 	eorls.w	r3, r3, #1
   d547a:	7013      	strbls	r3, [r2, #0]
   d547c:	bd08      	pop	{r3, pc}
   d547e:	bf00      	nop
   d5480:	2003d9b6 	.word	0x2003d9b6
   d5484:	2003d9ad 	.word	0x2003d9ad

000d5488 <_Z27attach_flow_meter_interruptv>:
{
    flow_meter_pulses++;
}

void attach_flow_meter_interrupt( void )
{
   d5488:	b507      	push	{r0, r1, r2, lr}
    pinMode( IGH_WATER_FLOW_PIN, INPUT_PULLUP );
   d548a:	2102      	movs	r1, #2
   d548c:	2005      	movs	r0, #5
   d548e:	f005 fa3b 	bl	da908 <pinMode>
    attachInterrupt( IGH_WATER_FLOW_PIN , igh_app_water_counter_callback, FALLING );
   d5492:	2300      	movs	r3, #0
   d5494:	9300      	str	r3, [sp, #0]
   d5496:	2202      	movs	r2, #2
   d5498:	f04f 33ff 	mov.w	r3, #4294967295
   d549c:	4903      	ldr	r1, [pc, #12]	; (d54ac <_Z27attach_flow_meter_interruptv+0x24>)
   d549e:	2005      	movs	r0, #5
   d54a0:	f004 fc32 	bl	d9d08 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
   d54a4:	b003      	add	sp, #12
   d54a6:	f85d fb04 	ldr.w	pc, [sp], #4
   d54aa:	bf00      	nop
   d54ac:	000d52a1 	.word	0x000d52a1

000d54b0 <_Z29igh_hardware_water_flow_setupv>:
        button_irrigate = !button_irrigate;
    }
}

void igh_hardware_water_flow_setup( void )
{
   d54b0:	b508      	push	{r3, lr}
    attach_flow_meter_interrupt();
   d54b2:	f7ff ffe9 	bl	d5488 <_Z27attach_flow_meter_interruptv>
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d54b6:	2200      	movs	r2, #0
   d54b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d54bc:	4801      	ldr	r0, [pc, #4]	; (d54c4 <_Z29igh_hardware_water_flow_setupv+0x14>)
   d54be:	f7ff ffa3 	bl	d5408 <_ZN5Timer6_startEjb>
   d54c2:	bd08      	pop	{r3, pc}
   d54c4:	2003d98c 	.word	0x2003d98c

000d54c8 <_Z18igh_hardware_setupv>:
Timer water_flow_timer(ONE_SECOND, igh_hardware_litres_service);



void igh_hardware_setup(void)
{
   d54c8:	b510      	push	{r4, lr}


/* Button APIs */
static void igh_hardware_irrigiation_button_setup(void)
{
    pinMode(IGH_IRRIGATION_BUTTON, INPUT_PULLUP);
   d54ca:	2102      	movs	r1, #2
   d54cc:	200f      	movs	r0, #15
   d54ce:	f005 fa1b 	bl	da908 <pinMode>
   d54d2:	2200      	movs	r2, #0
   d54d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d54d8:	480b      	ldr	r0, [pc, #44]	; (d5508 <_Z18igh_hardware_setupv+0x40>)
   d54da:	f7ff ff95 	bl	d5408 <_ZN5Timer6_startEjb>
    igh_button_timer.start();
    igh_button_sec_counter = 0;
   d54de:	4b0b      	ldr	r3, [pc, #44]	; (d550c <_Z18igh_hardware_setupv+0x44>)
   d54e0:	2400      	movs	r4, #0
    digitalWrite(BORON_LED, _state);
}

static void igh_hardware_onboard_led_setup(void)
{
    pinMode(BORON_LED, OUTPUT);
   d54e2:	2101      	movs	r1, #1
   d54e4:	2007      	movs	r0, #7
/* Button APIs */
static void igh_hardware_irrigiation_button_setup(void)
{
    pinMode(IGH_IRRIGATION_BUTTON, INPUT_PULLUP);
    igh_button_timer.start();
    igh_button_sec_counter = 0;
   d54e6:	701c      	strb	r4, [r3, #0]
    digitalWrite(BORON_LED, _state);
}

static void igh_hardware_onboard_led_setup(void)
{
    pinMode(BORON_LED, OUTPUT);
   d54e8:	f005 fa0e 	bl	da908 <pinMode>
    igh_boron_toggle_boron_led(OFF);
   d54ec:	4620      	mov	r0, r4
   d54ee:	f7ff ffa9 	bl	d5444 <_Z26igh_boron_toggle_boron_ledh>


/* Valve control APIs */
static void igh_hardware_vlave_setup(void)
{
    pinMode(IGH_IRRIGATION_VALVE, OUTPUT);
   d54f2:	2101      	movs	r1, #1
   d54f4:	2007      	movs	r0, #7
   d54f6:	f005 fa07 	bl	da908 <pinMode>
    current_valve_position = VALVE_CLOSE;
   d54fa:	4b05      	ldr	r3, [pc, #20]	; (d5510 <_Z18igh_hardware_setupv+0x48>)
   d54fc:	701c      	strb	r4, [r3, #0]
{
    igh_hardware_irrigiation_button_setup();
    igh_hardware_onboard_led_setup();
    igh_hardware_vlave_setup();
    igh_hardware_water_flow_setup();
}
   d54fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void igh_hardware_setup(void)
{
    igh_hardware_irrigiation_button_setup();
    igh_hardware_onboard_led_setup();
    igh_hardware_vlave_setup();
    igh_hardware_water_flow_setup();
   d5502:	f7ff bfd5 	b.w	d54b0 <_Z29igh_hardware_water_flow_setupv>
   d5506:	bf00      	nop
   d5508:	2003d9bc 	.word	0x2003d9bc
   d550c:	2003d9b6 	.word	0x2003d9b6
   d5510:	2003e64c 	.word	0x2003e64c

000d5514 <_Z27detach_flow_meter_interruptv>:
    attachInterrupt( IGH_WATER_FLOW_PIN , igh_app_water_counter_callback, FALLING );
}

void detach_flow_meter_interrupt( void )
{
    detachInterrupt( IGH_WATER_FLOW_PIN );
   d5514:	2005      	movs	r0, #5
   d5516:	f004 bc1f 	b.w	d9d58 <_Z15detachInterruptt>
	...

000d551c <_Z23igh_get_local_time_hourv>:
    // control valve state
    igh_hardware_water_management_service();
}

uint8_t igh_get_local_time_hour( void )
{
   d551c:	b538      	push	{r3, r4, r5, lr}
    int local_hour = 0;
    int utc_hour = 0;
    // utc_hour = Time.hour();
    hour_counter++;
   d551e:	4b1d      	ldr	r3, [pc, #116]	; (d5594 <_Z23igh_get_local_time_hourv+0x78>)
   d5520:	781a      	ldrb	r2, [r3, #0]
   d5522:	3201      	adds	r2, #1
   d5524:	b2d2      	uxtb	r2, r2

    if( hour_counter > 23)
   d5526:	2a17      	cmp	r2, #23
    {
        hour_counter = 0;
   d5528:	bf88      	it	hi
   d552a:	2200      	movhi	r2, #0
   d552c:	701a      	strb	r2, [r3, #0]
    }

    utc_hour = hour_counter;
   d552e:	781c      	ldrb	r4, [r3, #0]

    Serial.print("\nUTC HOUR: ");
   d5530:	f004 fbc2 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d5534:	4918      	ldr	r1, [pc, #96]	; (d5598 <_Z23igh_get_local_time_hourv+0x7c>)
   d5536:	f003 fedb 	bl	d92f0 <_ZN5Print5printEPKc>
    Serial.println( utc_hour );
   d553a:	f004 fbbd 	bl	d9cb8 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d553e:	220a      	movs	r2, #10
   d5540:	4621      	mov	r1, r4
   d5542:	4605      	mov	r5, r0
   d5544:	f003 fef1 	bl	d932a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d5548:	4628      	mov	r0, r5
   d554a:	f003 fed8 	bl	d92fe <_ZN5Print7printlnEv>

    //correct to timezone
    local_hour = utc_hour + igh_current_system_settings.timezone;
   d554e:	4b13      	ldr	r3, [pc, #76]	; (d559c <_Z23igh_get_local_time_hourv+0x80>)
   d5550:	685b      	ldr	r3, [r3, #4]
   d5552:	441c      	add	r4, r3

    Serial.print("\nUTC HOUR + TIMEZONE: ");
   d5554:	f004 fbb0 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d5558:	4911      	ldr	r1, [pc, #68]	; (d55a0 <_Z23igh_get_local_time_hourv+0x84>)
   d555a:	f003 fec9 	bl	d92f0 <_ZN5Print5printEPKc>
    Serial.println( local_hour );
   d555e:	f004 fbab 	bl	d9cb8 <_Z16_fetch_usbserialv>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d5562:	2c00      	cmp	r4, #0
   d5564:	4605      	mov	r5, r0
   d5566:	da04      	bge.n	d5572 <_Z23igh_get_local_time_hourv+0x56>
            t = print('-');
   d5568:	212d      	movs	r1, #45	; 0x2d
   d556a:	f003 fec5 	bl	d92f8 <_ZN5Print5printEc>
            val = -n;
   d556e:	4261      	negs	r1, r4
   d5570:	e000      	b.n	d5574 <_Z23igh_get_local_time_hourv+0x58>
        } else {
            val = n;
   d5572:	4621      	mov	r1, r4
        }
        return printNumber(val, base) + t;
   d5574:	220a      	movs	r2, #10
   d5576:	4628      	mov	r0, r5
   d5578:	f003 fed7 	bl	d932a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d557c:	4628      	mov	r0, r5
   d557e:	f003 febe 	bl	d92fe <_ZN5Print7printlnEv>

    if( local_hour < 0 )
   d5582:	2c00      	cmp	r4, #0
   d5584:	da01      	bge.n	d558a <_Z23igh_get_local_time_hourv+0x6e>
    {
        local_hour += TWENTY_FOUR_HOURS;
   d5586:	3418      	adds	r4, #24
   d5588:	e002      	b.n	d5590 <_Z23igh_get_local_time_hourv+0x74>
    }
    else if( local_hour > TWENTY_FOUR_HOURS )
   d558a:	2c18      	cmp	r4, #24
    {
        local_hour -= TWENTY_FOUR_HOURS;
   d558c:	bfc8      	it	gt
   d558e:	3c18      	subgt	r4, #24
    }

    return (uint8_t)local_hour;
}
   d5590:	b2e0      	uxtb	r0, r4
   d5592:	bd38      	pop	{r3, r4, r5, pc}
   d5594:	2003d9b4 	.word	0x2003d9b4
   d5598:	000dcf30 	.word	0x000dcf30
   d559c:	2003e604 	.word	0x2003e604
   d55a0:	000dcf3c 	.word	0x000dcf3c

000d55a4 <_Z37igh_hardware_water_management_servicev>:

void igh_hardware_water_management_service( void )
{
   d55a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d55a6:	b085      	sub	sp, #20
    // This should run on a one second tick
    uint8_t current_hr = igh_get_local_time_hour();
   d55a8:	f7ff ffb8 	bl	d551c <_Z23igh_get_local_time_hourv>
   d55ac:	4604      	mov	r4, r0

    Serial.print("CURRENT HOUR 1: ");
   d55ae:	f004 fb83 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d55b2:	4944      	ldr	r1, [pc, #272]	; (d56c4 <_Z37igh_hardware_water_management_servicev+0x120>)
   d55b4:	f003 fe9c 	bl	d92f0 <_ZN5Print5printEPKc>
    Serial.println( current_hr );
   d55b8:	f004 fb7e 	bl	d9cb8 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d55bc:	220a      	movs	r2, #10
   d55be:	4605      	mov	r5, r0
   d55c0:	4621      	mov	r1, r4
   d55c2:	f003 feb2 	bl	d932a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d55c6:	4628      	mov	r0, r5
   d55c8:	f003 fe99 	bl	d92fe <_ZN5Print7printlnEv>

    if( current_hr != previous_hr )
   d55cc:	4b3e      	ldr	r3, [pc, #248]	; (d56c8 <_Z37igh_hardware_water_management_servicev+0x124>)
   d55ce:	781a      	ldrb	r2, [r3, #0]
   d55d0:	42a2      	cmp	r2, r4
   d55d2:	461d      	mov	r5, r3
   d55d4:	d03c      	beq.n	d5650 <_Z37igh_hardware_water_management_servicev+0xac>
    {
        Serial.print("CURRENT HOUR 2: ");
   d55d6:	f004 fb6f 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d55da:	493c      	ldr	r1, [pc, #240]	; (d56cc <_Z37igh_hardware_water_management_servicev+0x128>)
   d55dc:	f003 fe88 	bl	d92f0 <_ZN5Print5printEPKc>
        Serial.println( current_hr );
   d55e0:	f004 fb6a 	bl	d9cb8 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d55e4:	220a      	movs	r2, #10
   d55e6:	4606      	mov	r6, r0
   d55e8:	4621      	mov	r1, r4
   d55ea:	f003 fe9e 	bl	d932a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d55ee:	4630      	mov	r0, r6
   d55f0:	f003 fe85 	bl	d92fe <_ZN5Print7printlnEv>

        if( current_hr == igh_current_system_settings.irrigation_hr )
   d55f4:	4b36      	ldr	r3, [pc, #216]	; (d56d0 <_Z37igh_hardware_water_management_servicev+0x12c>)
   d55f6:	7a1b      	ldrb	r3, [r3, #8]
   d55f8:	42a3      	cmp	r3, r4
   d55fa:	d109      	bne.n	d5610 <_Z37igh_hardware_water_management_servicev+0x6c>
        {
            // it is ok to irrigat if it hits the irrigation hour
            ok_to_irrigate = true;
   d55fc:	4b35      	ldr	r3, [pc, #212]	; (d56d4 <_Z37igh_hardware_water_management_servicev+0x130>)
   d55fe:	2201      	movs	r2, #1
   d5600:	701a      	strb	r2, [r3, #0]
            time_t time = Time.now();
   d5602:	f004 f8a8 	bl	d9756 <_ZN9TimeClass3nowEv>
   d5606:	4607      	mov	r7, r0
            Serial.print("IRRIGATION TIME STARTED: ");
   d5608:	f004 fb56 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d560c:	4932      	ldr	r1, [pc, #200]	; (d56d8 <_Z37igh_hardware_water_management_servicev+0x134>)
   d560e:	e00b      	b.n	d5628 <_Z37igh_hardware_water_management_servicev+0x84>
            Serial.println( Time.format(time, TIME_FORMAT_DEFAULT) );
        }
        else if( MIDNIGHT == current_hr )
   d5610:	b9ec      	cbnz	r4, d564e <_Z37igh_hardware_water_management_servicev+0xaa>
        {
            // reset the system at midnight
            ok_to_irrigate = false;
   d5612:	4b30      	ldr	r3, [pc, #192]	; (d56d4 <_Z37igh_hardware_water_management_servicev+0x130>)
   d5614:	701c      	strb	r4, [r3, #0]
            total_water_dispensed_Liters = 0;
   d5616:	4b31      	ldr	r3, [pc, #196]	; (d56dc <_Z37igh_hardware_water_management_servicev+0x138>)
   d5618:	2200      	movs	r2, #0
   d561a:	601a      	str	r2, [r3, #0]
            
            time_t time = Time.now();
   d561c:	f004 f89b 	bl	d9756 <_ZN9TimeClass3nowEv>
   d5620:	4607      	mov	r7, r0
            Serial.print("RESETTING WATER PARAMS: ");
   d5622:	f004 fb49 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d5626:	492e      	ldr	r1, [pc, #184]	; (d56e0 <_Z37igh_hardware_water_management_servicev+0x13c>)
   d5628:	f003 fe62 	bl	d92f0 <_ZN5Print5printEPKc>
            Serial.println( Time.format(time, TIME_FORMAT_DEFAULT) );
   d562c:	f004 fb44 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d5630:	4b2c      	ldr	r3, [pc, #176]	; (d56e4 <_Z37igh_hardware_water_management_servicev+0x140>)
   d5632:	492d      	ldr	r1, [pc, #180]	; (d56e8 <_Z37igh_hardware_water_management_servicev+0x144>)
   d5634:	681b      	ldr	r3, [r3, #0]
   d5636:	4606      	mov	r6, r0
   d5638:	463a      	mov	r2, r7
   d563a:	4668      	mov	r0, sp
   d563c:	f004 f838 	bl	d96b0 <_ZN9TimeClass6formatElPKc>
   d5640:	9900      	ldr	r1, [sp, #0]
   d5642:	4630      	mov	r0, r6
   d5644:	f003 fe67 	bl	d9316 <_ZN5Print7printlnEPKc>
   d5648:	4668      	mov	r0, sp
   d564a:	f003 fd5d 	bl	d9108 <_ZN6StringD1Ev>
        }

        previous_hr = current_hr;
   d564e:	702c      	strb	r4, [r5, #0]
    }

    if( true == button_irrigate )
   d5650:	4b26      	ldr	r3, [pc, #152]	; (d56ec <_Z37igh_hardware_water_management_servicev+0x148>)
   d5652:	4927      	ldr	r1, [pc, #156]	; (d56f0 <_Z37igh_hardware_water_management_servicev+0x14c>)
   d5654:	781b      	ldrb	r3, [r3, #0]
   d5656:	b1a3      	cbz	r3, d5682 <_Z37igh_hardware_water_management_servicev+0xde>
    {
        if( (water_dispensed_by_button < (float)igh_current_threshold_settings.water_dispensed_period_low) &&
   d5658:	4b26      	ldr	r3, [pc, #152]	; (d56f4 <_Z37igh_hardware_water_management_servicev+0x150>)
   d565a:	edd3 7a06 	vldr	s15, [r3, #24]
   d565e:	4b26      	ldr	r3, [pc, #152]	; (d56f8 <_Z37igh_hardware_water_management_servicev+0x154>)
   d5660:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d5664:	ed93 7a00 	vldr	s14, [r3]
   d5668:	eef4 7ac7 	vcmpe.f32	s15, s14
   d566c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5670:	dd0a      	ble.n	d5688 <_Z37igh_hardware_water_management_servicev+0xe4>
            (valve_open_seconds_counter < igh_current_system_settings.water_dispenser_period) )
   d5672:	4b17      	ldr	r3, [pc, #92]	; (d56d0 <_Z37igh_hardware_water_management_servicev+0x12c>)
        previous_hr = current_hr;
    }

    if( true == button_irrigate )
    {
        if( (water_dispensed_by_button < (float)igh_current_threshold_settings.water_dispensed_period_low) &&
   d5674:	68da      	ldr	r2, [r3, #12]
   d5676:	4b21      	ldr	r3, [pc, #132]	; (d56fc <_Z37igh_hardware_water_management_servicev+0x158>)
   d5678:	681b      	ldr	r3, [r3, #0]
   d567a:	429a      	cmp	r2, r3
   d567c:	d904      	bls.n	d5688 <_Z37igh_hardware_water_management_servicev+0xe4>
            (valve_open_seconds_counter < igh_current_system_settings.water_dispenser_period) )
        {
            current_valve_position = VALVE_OPEN;
   d567e:	2301      	movs	r3, #1
   d5680:	e003      	b.n	d568a <_Z37igh_hardware_water_management_servicev+0xe6>
        }
    }
    else
    {
        /* Only do auto irrigation if button irrigation is not set */
        if( true == ok_to_irrigate &&
   d5682:	4b14      	ldr	r3, [pc, #80]	; (d56d4 <_Z37igh_hardware_water_management_servicev+0x130>)
   d5684:	781b      	ldrb	r3, [r3, #0]
   d5686:	b91b      	cbnz	r3, d5690 <_Z37igh_hardware_water_management_servicev+0xec>
        {
            current_valve_position = VALVE_OPEN;
        }
        else
        {
            current_valve_position = VALVE_CLOSE;
   d5688:	2300      	movs	r3, #0
   d568a:	700b      	strb	r3, [r1, #0]
            // close valve
            current_valve_position = VALVE_CLOSE;
        }
    }
    
}
   d568c:	b005      	add	sp, #20
   d568e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    }
    else
    {
        /* Only do auto irrigation if button irrigation is not set */
        if( true == ok_to_irrigate &&
        VALID_SOIL_DATA == refreshed_soil_data)
   d5690:	4b1b      	ldr	r3, [pc, #108]	; (d5700 <_Z37igh_hardware_water_management_servicev+0x15c>)
        }
    }
    else
    {
        /* Only do auto irrigation if button irrigation is not set */
        if( true == ok_to_irrigate &&
   d5692:	781b      	ldrb	r3, [r3, #0]
   d5694:	2bff      	cmp	r3, #255	; 0xff
   d5696:	d1f7      	bne.n	d5688 <_Z37igh_hardware_water_management_servicev+0xe4>
        {
            /**
             * run the dispensor if we are within the dispensor window
             * and if we have valid sensor data
             * */
            if( soil_humidity < igh_current_threshold_settings.soil_humidity_low &&
   d5698:	4b1a      	ldr	r3, [pc, #104]	; (d5704 <_Z37igh_hardware_water_management_servicev+0x160>)
   d569a:	881a      	ldrh	r2, [r3, #0]
   d569c:	4b15      	ldr	r3, [pc, #84]	; (d56f4 <_Z37igh_hardware_water_management_servicev+0x150>)
   d569e:	88d8      	ldrh	r0, [r3, #6]
   d56a0:	4290      	cmp	r0, r2
   d56a2:	d9f1      	bls.n	d5688 <_Z37igh_hardware_water_management_servicev+0xe4>
   d56a4:	8c18      	ldrh	r0, [r3, #32]
   d56a6:	4290      	cmp	r0, r2
   d56a8:	d9ee      	bls.n	d5688 <_Z37igh_hardware_water_management_servicev+0xe4>
                soil_humidity < igh_current_threshold_settings.soil_humidity_high &&
   d56aa:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
                total_water_dispensed_Liters < (float)igh_current_threshold_settings.water_dispensed_period_high )
   d56ae:	4b0b      	ldr	r3, [pc, #44]	; (d56dc <_Z37igh_hardware_water_management_servicev+0x138>)
            /**
             * run the dispensor if we are within the dispensor window
             * and if we have valid sensor data
             * */
            if( soil_humidity < igh_current_threshold_settings.soil_humidity_low &&
                soil_humidity < igh_current_threshold_settings.soil_humidity_high &&
   d56b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d56b4:	ed93 7a00 	vldr	s14, [r3]
   d56b8:	eef4 7ac7 	vcmpe.f32	s15, s14
   d56bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d56c0:	dcdd      	bgt.n	d567e <_Z37igh_hardware_water_management_servicev+0xda>
   d56c2:	e7e1      	b.n	d5688 <_Z37igh_hardware_water_management_servicev+0xe4>
   d56c4:	000dcf53 	.word	0x000dcf53
   d56c8:	2003d9b7 	.word	0x2003d9b7
   d56cc:	000dcf64 	.word	0x000dcf64
   d56d0:	2003e604 	.word	0x2003e604
   d56d4:	2003d9ac 	.word	0x2003d9ac
   d56d8:	000dcf75 	.word	0x000dcf75
   d56dc:	2003d9dc 	.word	0x2003d9dc
   d56e0:	000dcf8f 	.word	0x000dcf8f
   d56e4:	2003d828 	.word	0x2003d828
   d56e8:	2003dfd4 	.word	0x2003dfd4
   d56ec:	2003d9ad 	.word	0x2003d9ad
   d56f0:	2003e64c 	.word	0x2003e64c
   d56f4:	2003e650 	.word	0x2003e650
   d56f8:	2003d9b0 	.word	0x2003d9b0
   d56fc:	2003d9b8 	.word	0x2003d9b8
   d5700:	2003d9b5 	.word	0x2003d9b5
   d5704:	2003d9d8 	.word	0x2003d9d8

000d5708 <_Z37igh_hardware_valve_open_timer_servicev>:
}

void igh_hardware_valve_open_timer_service( void )
{
    // count for how many seconds the valve is open
    if( VALVE_OPEN == current_valve_position )
   d5708:	4b04      	ldr	r3, [pc, #16]	; (d571c <_Z37igh_hardware_valve_open_timer_servicev+0x14>)
   d570a:	781b      	ldrb	r3, [r3, #0]
   d570c:	2b01      	cmp	r3, #1
   d570e:	4b04      	ldr	r3, [pc, #16]	; (d5720 <_Z37igh_hardware_valve_open_timer_servicev+0x18>)
    {
        valve_open_seconds_counter++;
   d5710:	bf0a      	itet	eq
   d5712:	681a      	ldreq	r2, [r3, #0]
    }
    else
    {
        valve_open_seconds_counter = 0;
   d5714:	2200      	movne	r2, #0
void igh_hardware_valve_open_timer_service( void )
{
    // count for how many seconds the valve is open
    if( VALVE_OPEN == current_valve_position )
    {
        valve_open_seconds_counter++;
   d5716:	3201      	addeq	r2, #1
    }
    else
    {
        valve_open_seconds_counter = 0;
   d5718:	601a      	str	r2, [r3, #0]
   d571a:	4770      	bx	lr
   d571c:	2003e64c 	.word	0x2003e64c
   d5720:	2003d9b8 	.word	0x2003d9b8

000d5724 <_Z27igh_hardware_litres_servicev>:
{
    detachInterrupt( IGH_WATER_FLOW_PIN );
}

void igh_hardware_litres_service( void )
{
   d5724:	b510      	push	{r4, lr}
    uint32_t copy_flow_meter_pulses = 0;
    detach_flow_meter_interrupt();
   d5726:	f7ff fef5 	bl	d5514 <_Z27detach_flow_meter_interruptv>
    // copy the current flow meter pulses
    copy_flow_meter_pulses = flow_meter_pulses;
   d572a:	4b17      	ldr	r3, [pc, #92]	; (d5788 <_Z27igh_hardware_litres_servicev+0x64>)
   d572c:	681c      	ldr	r4, [r3, #0]
    // reset and enable interrupts to avoid missing too many pulses
    flow_meter_pulses = 0;
   d572e:	2200      	movs	r2, #0
   d5730:	601a      	str	r2, [r3, #0]
    attach_flow_meter_interrupt();
   d5732:	f7ff fea9 	bl	d5488 <_Z27attach_flow_meter_interruptv>

    // because we are using a software timer, 
    // this routine will always happen once every second
    float flowRate = copy_flow_meter_pulses / FLOW_METER_CAL_FACTOR;
    float flow_Liters = flowRate / ONE_MIN;
   d5736:	4620      	mov	r0, r4
   d5738:	f005 fc64 	bl	db004 <__aeabi_ui2d>
   d573c:	2200      	movs	r2, #0
   d573e:	4b13      	ldr	r3, [pc, #76]	; (d578c <_Z27igh_hardware_litres_servicev+0x68>)
   d5740:	f005 fe00 	bl	db344 <__aeabi_ddiv>
   d5744:	f005 ffcc 	bl	db6e0 <__aeabi_d2f>
   d5748:	eddf 7a11 	vldr	s15, [pc, #68]	; d5790 <_Z27igh_hardware_litres_servicev+0x6c>

    // add to the total amount of water flow
    total_water_dispensed_Liters += flow_Liters; 
   d574c:	4b11      	ldr	r3, [pc, #68]	; (d5794 <_Z27igh_hardware_litres_servicev+0x70>)
    attach_flow_meter_interrupt();

    // because we are using a software timer, 
    // this routine will always happen once every second
    float flowRate = copy_flow_meter_pulses / FLOW_METER_CAL_FACTOR;
    float flow_Liters = flowRate / ONE_MIN;
   d574e:	ee07 0a10 	vmov	s14, r0
   d5752:	eec7 6a27 	vdiv.f32	s13, s14, s15

    // add to the total amount of water flow
    total_water_dispensed_Liters += flow_Liters; 
   d5756:	ed93 7a00 	vldr	s14, [r3]
   d575a:	ee37 7a26 	vadd.f32	s14, s14, s13
   d575e:	ed83 7a00 	vstr	s14, [r3]

    // if button is open, keep track of how much water is used up then
    if( true == button_irrigate )
   d5762:	4b0d      	ldr	r3, [pc, #52]	; (d5798 <_Z27igh_hardware_litres_servicev+0x74>)
   d5764:	781a      	ldrb	r2, [r3, #0]
   d5766:	4b0d      	ldr	r3, [pc, #52]	; (d579c <_Z27igh_hardware_litres_servicev+0x78>)
   d5768:	b132      	cbz	r2, d5778 <_Z27igh_hardware_litres_servicev+0x54>
    {
        water_dispensed_by_button += flow_Liters;
   d576a:	edd3 7a00 	vldr	s15, [r3]
   d576e:	ee77 7aa6 	vadd.f32	s15, s15, s13
   d5772:	edc3 7a00 	vstr	s15, [r3]
   d5776:	e001      	b.n	d577c <_Z27igh_hardware_litres_servicev+0x58>
    }
    else
    {
        water_dispensed_by_button = 0;
   d5778:	2200      	movs	r2, #0
   d577a:	601a      	str	r2, [r3, #0]
    }

    // keep track of valve open state
    igh_hardware_valve_open_timer_service();
   d577c:	f7ff ffc4 	bl	d5708 <_Z37igh_hardware_valve_open_timer_servicev>
    // control valve state
    igh_hardware_water_management_service();
}
   d5780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }

    // keep track of valve open state
    igh_hardware_valve_open_timer_service();
    // control valve state
    igh_hardware_water_management_service();
   d5784:	f7ff bf0e 	b.w	d55a4 <_Z37igh_hardware_water_management_servicev>
   d5788:	2003d9a8 	.word	0x2003d9a8
   d578c:	40120000 	.word	0x40120000
   d5790:	42700000 	.word	0x42700000
   d5794:	2003d9dc 	.word	0x2003d9dc
   d5798:	2003d9ad 	.word	0x2003d9ad
   d579c:	2003d9b0 	.word	0x2003d9b0

000d57a0 <_GLOBAL__sub_I_liters_timer>:
    }
    else
    {
        valve_open_seconds_counter = 0;
    }
}
   d57a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
#define THREE_SECONDS          (3)


// button global variables
uint8_t igh_button_sec_counter;
Timer igh_button_timer(ONE_SECOND, igh_boron_button_press_duration);
   d57a4:	f8df 807c 	ldr.w	r8, [pc, #124]	; d5824 <_GLOBAL__sub_I_liters_timer+0x84>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d57a8:	4f17      	ldr	r7, [pc, #92]	; (d5808 <_GLOBAL__sub_I_liters_timer+0x68>)
	    _M_manager = &_My_handler::_M_manager;
   d57aa:	4c18      	ldr	r4, [pc, #96]	; (d580c <_GLOBAL__sub_I_liters_timer+0x6c>)
   d57ac:	4e18      	ldr	r6, [pc, #96]	; (d5810 <_GLOBAL__sub_I_liters_timer+0x70>)
   d57ae:	4d19      	ldr	r5, [pc, #100]	; (d5814 <_GLOBAL__sub_I_liters_timer+0x74>)
   d57b0:	f002 ff70 	bl	d8694 <HAL_Pin_Map>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d57b4:	4b18      	ldr	r3, [pc, #96]	; (d5818 <_GLOBAL__sub_I_liters_timer+0x78>)
   d57b6:	9300      	str	r3, [sp, #0]
   d57b8:	466a      	mov	r2, sp
   d57ba:	2300      	movs	r3, #0
   d57bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d57c0:	4640      	mov	r0, r8

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d57c2:	9402      	str	r4, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d57c4:	9703      	str	r7, [sp, #12]
   d57c6:	f7ff fdaf 	bl	d5328 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d57ca:	4668      	mov	r0, sp
   d57cc:	f7ff fda2 	bl	d5314 <_ZNSt14_Function_baseD1Ev>
   d57d0:	4632      	mov	r2, r6
   d57d2:	4629      	mov	r1, r5
   d57d4:	4640      	mov	r0, r8
   d57d6:	f005 f969 	bl	daaac <__aeabi_atexit>

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d57da:	9402      	str	r4, [sp, #8]
static void igh_hardware_irrigiation_button_setup(void);
static void igh_hardware_onboard_led_setup(void);
static void igh_hardware_vlave_setup(void);
void igh_hardware_valve_open_timer_service( void );

Timer water_flow_timer(ONE_SECOND, igh_hardware_litres_service);
   d57dc:	4c0f      	ldr	r4, [pc, #60]	; (d581c <_GLOBAL__sub_I_liters_timer+0x7c>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d57de:	4b10      	ldr	r3, [pc, #64]	; (d5820 <_GLOBAL__sub_I_liters_timer+0x80>)
   d57e0:	9300      	str	r3, [sp, #0]
   d57e2:	466a      	mov	r2, sp
   d57e4:	2300      	movs	r3, #0
   d57e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d57ea:	4620      	mov	r0, r4
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d57ec:	9703      	str	r7, [sp, #12]
   d57ee:	f7ff fd9b 	bl	d5328 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d57f2:	4668      	mov	r0, sp
   d57f4:	f7ff fd8e 	bl	d5314 <_ZNSt14_Function_baseD1Ev>
   d57f8:	4632      	mov	r2, r6
   d57fa:	4629      	mov	r1, r5
   d57fc:	4620      	mov	r0, r4
   d57fe:	f005 f955 	bl	daaac <__aeabi_atexit>
    }
    else
    {
        valve_open_seconds_counter = 0;
    }
}
   d5802:	b004      	add	sp, #16
   d5804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5808:	000d52b1 	.word	0x000d52b1
   d580c:	000d52b5 	.word	0x000d52b5
   d5810:	2003d8e0 	.word	0x2003d8e0
   d5814:	000d53ad 	.word	0x000d53ad
   d5818:	000d5459 	.word	0x000d5459
   d581c:	2003d98c 	.word	0x2003d98c
   d5820:	000d5725 	.word	0x000d5725
   d5824:	2003d9bc 	.word	0x2003d9bc

000d5828 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d5828:	7c03      	ldrb	r3, [r0, #16]
   d582a:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d582e:	4602      	mov	r2, r0
   d5830:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d5834:	b12b      	cbz	r3, d5842 <_ZN4File9availableEv+0x1a>
   d5836:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d5838:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d583a:	1a18      	subs	r0, r3, r0
   d583c:	bf48      	it	mi
   d583e:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d5842:	4770      	bx	lr

000d5844 <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
   d5844:	4770      	bx	lr

000d5846 <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d5846:	4770      	bx	lr

000d5848 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d5848:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d584a:	4602      	mov	r2, r0
   d584c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d584e:	7913      	ldrb	r3, [r2, #4]
   d5850:	6895      	ldr	r5, [r2, #8]
   d5852:	b133      	cbz	r3, d5862 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d5854:	b93d      	cbnz	r5, d5866 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d5856:	490c      	ldr	r1, [pc, #48]	; (d5888 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d5858:	b004      	add	sp, #16
   d585a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d585e:	f003 bd47 	b.w	d92f0 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d5862:	4b0a      	ldr	r3, [pc, #40]	; (d588c <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d5864:	e000      	b.n	d5868 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d5866:	4b0a      	ldr	r3, [pc, #40]	; (d5890 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d5868:	7b16      	ldrb	r6, [r2, #12]
   d586a:	4c0a      	ldr	r4, [pc, #40]	; (d5894 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d586c:	490a      	ldr	r1, [pc, #40]	; (d5898 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d586e:	7b52      	ldrb	r2, [r2, #13]
   d5870:	9202      	str	r2, [sp, #8]
   d5872:	2e01      	cmp	r6, #1
   d5874:	bf08      	it	eq
   d5876:	4621      	moveq	r1, r4
   d5878:	9101      	str	r1, [sp, #4]
   d587a:	9500      	str	r5, [sp, #0]
   d587c:	4a07      	ldr	r2, [pc, #28]	; (d589c <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d587e:	2100      	movs	r1, #0
   d5880:	f003 fe41 	bl	d9506 <_ZN5Print11printf_implEbPKcz>
  }
   d5884:	b004      	add	sp, #16
   d5886:	bd70      	pop	{r4, r5, r6, pc}
   d5888:	000dd005 	.word	0x000dd005
   d588c:	000dd1c2 	.word	0x000dd1c2
   d5890:	000dcff4 	.word	0x000dcff4
   d5894:	000dcffd 	.word	0x000dcffd
   d5898:	000dd001 	.word	0x000dd001
   d589c:	000dd01b 	.word	0x000dd01b

000d58a0 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d58a0:	3010      	adds	r0, #16
   d58a2:	f001 bd95 	b.w	d73d0 <_ZN7FatFile4syncEv>

000d58a6 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d58a6:	3010      	adds	r0, #16
   d58a8:	f001 bc6c 	b.w	d7184 <_ZN7FatFile4peekEv>

000d58ac <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d58ac:	3010      	adds	r0, #16
   d58ae:	f001 be2f 	b.w	d7510 <_ZN7FatFile5writeEPKvj>

000d58b2 <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d58b2:	3008      	adds	r0, #8
   d58b4:	f001 be2c 	b.w	d7510 <_ZN7FatFile5writeEPKvj>

000d58b8 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d58b8:	b507      	push	{r0, r1, r2, lr}
   d58ba:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d58bc:	2201      	movs	r2, #1
   d58be:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d58c2:	3010      	adds	r0, #16
   d58c4:	4619      	mov	r1, r3
   d58c6:	f001 fe23 	bl	d7510 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d58ca:	b003      	add	sp, #12
   d58cc:	f85d fb04 	ldr.w	pc, [sp], #4

000d58d0 <_ZN6SdFileD0Ev>:
   d58d0:	b510      	push	{r4, lr}
   d58d2:	212c      	movs	r1, #44	; 0x2c
   d58d4:	4604      	mov	r4, r0
   d58d6:	f005 f8f7 	bl	daac8 <_ZdlPvj>
   d58da:	4620      	mov	r0, r4
   d58dc:	bd10      	pop	{r4, pc}

000d58de <_ZN4FileD0Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d58de:	b510      	push	{r4, lr}
   d58e0:	2134      	movs	r1, #52	; 0x34
   d58e2:	4604      	mov	r4, r0
   d58e4:	f005 f8f0 	bl	daac8 <_ZdlPvj>
   d58e8:	4620      	mov	r0, r4
   d58ea:	bd10      	pop	{r4, pc}

000d58ec <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d58ec:	b507      	push	{r0, r1, r2, lr}
   d58ee:	ab02      	add	r3, sp, #8
   d58f0:	2201      	movs	r2, #1
   d58f2:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d58f6:	3008      	adds	r0, #8
   d58f8:	4619      	mov	r1, r3
   d58fa:	f001 fe09 	bl	d7510 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d58fe:	b003      	add	sp, #12
   d5900:	f85d fb04 	ldr.w	pc, [sp], #4

000d5904 <_ZN7FatFile4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
   d5904:	b507      	push	{r0, r1, r2, lr}
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d5906:	2201      	movs	r2, #1
   d5908:	f10d 0107 	add.w	r1, sp, #7
   d590c:	f001 fb87 	bl	d701e <_ZN7FatFile4readEPvj>
   d5910:	2801      	cmp	r0, #1
   d5912:	bf0c      	ite	eq
   d5914:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d5918:	f04f 30ff 	movne.w	r0, #4294967295
  }
   d591c:	b003      	add	sp, #12
   d591e:	f85d fb04 	ldr.w	pc, [sp], #4

000d5922 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d5922:	b508      	push	{r3, lr}
    return FatFile::read();
   d5924:	3010      	adds	r0, #16
   d5926:	f7ff ffed 	bl	d5904 <_ZN7FatFile4readEv>
  }
   d592a:	bd08      	pop	{r3, pc}

000d592c <_Z16igh_sd_log_setupv>:
 * convertedt to a character string
 * eg: 2E78FA2E.LOG
*/

uint8_t igh_sd_log_setup(void)
{
   d592c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d592e:	4820      	ldr	r0, [pc, #128]	; (d59b0 <_Z16igh_sd_log_setupv+0x84>)
    if(sd_root.isOpen()) sd_root.close();
   d5930:	7a03      	ldrb	r3, [r0, #8]
   d5932:	b113      	cbz	r3, d593a <_Z16igh_sd_log_setupv+0xe>
   d5934:	3008      	adds	r0, #8
   d5936:	f001 fd81 	bl	d743c <_ZN7FatFile5closeEv>
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d593a:	4c1e      	ldr	r4, [pc, #120]	; (d59b4 <_Z16igh_sd_log_setupv+0x88>)
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d593c:	4b1e      	ldr	r3, [pc, #120]	; (d59b8 <_Z16igh_sd_log_setupv+0x8c>)
   d593e:	4a1f      	ldr	r2, [pc, #124]	; (d59bc <_Z16igh_sd_log_setupv+0x90>)
   d5940:	9300      	str	r3, [sp, #0]
   d5942:	f504 668c 	add.w	r6, r4, #1120	; 0x460
   d5946:	2300      	movs	r3, #0
   d5948:	f88d 3004 	strb.w	r3, [sp, #4]
   d594c:	9202      	str	r2, [sp, #8]
   d594e:	2501      	movs	r5, #1
   d5950:	f88d 300d 	strb.w	r3, [sp, #13]
   d5954:	220e      	movs	r2, #14
   d5956:	466b      	mov	r3, sp
   d5958:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   d595c:	4630      	mov	r0, r6
   d595e:	f88d 500c 	strb.w	r5, [sp, #12]
   d5962:	f002 f91d 	bl	d7ba0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d5966:	b300      	cbz	r0, d59aa <_Z16igh_sd_log_setupv+0x7e>
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d5968:	f204 403c 	addw	r0, r4, #1084	; 0x43c
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d596c:	6026      	str	r6, [r4, #0]
    vwd()->close();
   d596e:	f001 fd65 	bl	d743c <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d5972:	4629      	mov	r1, r5
   d5974:	4620      	mov	r0, r4
   d5976:	f001 ffbc 	bl	d78f2 <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d597a:	4601      	mov	r1, r0
   d597c:	b180      	cbz	r0, d59a0 <_Z16igh_sd_log_setupv+0x74>
   d597e:	4c0d      	ldr	r4, [pc, #52]	; (d59b4 <_Z16igh_sd_log_setupv+0x88>)
   d5980:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   d5984:	4621      	mov	r1, r4
   d5986:	4628      	mov	r0, r5
   d5988:	f001 fb31 	bl	d6fee <_ZN7FatFile8openRootEP9FatVolume>
   d598c:	b168      	cbz	r0, d59aa <_Z16igh_sd_log_setupv+0x7e>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d598e:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d5992:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
   d5996:	bf16      	itet	ne
   d5998:	4b09      	ldrne	r3, [pc, #36]	; (d59c0 <_Z16igh_sd_log_setupv+0x94>)
   d599a:	4618      	moveq	r0, r3
   d599c:	601d      	strne	r5, [r3, #0]
   d599e:	e005      	b.n	d59ac <_Z16igh_sd_log_setupv+0x80>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d59a0:	4620      	mov	r0, r4
   d59a2:	f001 ffa6 	bl	d78f2 <_ZN9FatVolume4initEh>
   d59a6:	2800      	cmp	r0, #0
   d59a8:	d1e9      	bne.n	d597e <_Z16igh_sd_log_setupv+0x52>
   d59aa:	2000      	movs	r0, #0
    return igh_sd.begin(IGH_SD_CS);
}
   d59ac:	b004      	add	sp, #16
   d59ae:	bd70      	pop	{r4, r5, r6, pc}
   d59b0:	2003de9c 	.word	0x2003de9c
   d59b4:	2003da18 	.word	0x2003da18
   d59b8:	000dcfb0 	.word	0x000dcfb0
   d59bc:	02faf080 	.word	0x02faf080
   d59c0:	2003df40 	.word	0x2003df40

000d59c4 <_Z24igh_sd_log_get_file_namemPc>:
{
    igh_file.rewindDirectory();
}

void igh_sd_log_get_file_name(unsigned long _unix_time, char * file_name)
{
   d59c4:	b507      	push	{r0, r1, r2, lr}
   d59c6:	4602      	mov	r2, r0
    sprintf(file_name, "%02X%02X%02X%02X.LOG", 
    (uint8_t)(_unix_time >> 24), 
    (uint8_t)(_unix_time >> 16), 
    (uint8_t)(_unix_time >> 8), 
    (uint8_t)(_unix_time));
   d59c8:	b2d3      	uxtb	r3, r2
   d59ca:	9301      	str	r3, [sp, #4]
   d59cc:	f3c2 2307 	ubfx	r3, r2, #8, #8
   d59d0:	9300      	str	r3, [sp, #0]
{
    igh_file.rewindDirectory();
}

void igh_sd_log_get_file_name(unsigned long _unix_time, char * file_name)
{
   d59d2:	4608      	mov	r0, r1
    sprintf(file_name, "%02X%02X%02X%02X.LOG", 
    (uint8_t)(_unix_time >> 24), 
    (uint8_t)(_unix_time >> 16), 
    (uint8_t)(_unix_time >> 8), 
    (uint8_t)(_unix_time));
   d59d4:	f3c2 4307 	ubfx	r3, r2, #16, #8
   d59d8:	4903      	ldr	r1, [pc, #12]	; (d59e8 <_Z24igh_sd_log_get_file_namemPc+0x24>)
   d59da:	0e12      	lsrs	r2, r2, #24
   d59dc:	f003 f9ae 	bl	d8d3c <sprintf>
}
   d59e0:	b003      	add	sp, #12
   d59e2:	f85d fb04 	ldr.w	pc, [sp], #4
   d59e6:	bf00      	nop
   d59e8:	000dd039 	.word	0x000dd039

000d59ec <_Z26igh_sd_log_save_data_pointmPhh>:

uint8_t igh_sd_log_save_data_point(unsigned long _unix_time, uint8_t * data, uint8_t size)
{
   d59ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d59f0:	b092      	sub	sp, #72	; 0x48
   d59f2:	4688      	mov	r8, r1
    uint8_t ret = 0;
    char name[FILE_NAME_SIZE]; // include the null terminator?
    igh_sd_log_get_file_name(_unix_time, name);
   d59f4:	a901      	add	r1, sp, #4
    (uint8_t)(_unix_time >> 8), 
    (uint8_t)(_unix_time));
}

uint8_t igh_sd_log_save_data_point(unsigned long _unix_time, uint8_t * data, uint8_t size)
{
   d59f6:	4617      	mov	r7, r2
    uint8_t ret = 0;
    char name[FILE_NAME_SIZE]; // include the null terminator?
    igh_sd_log_get_file_name(_unix_time, name);
   d59f8:	f7ff ffe4 	bl	d59c4 <_Z24igh_sd_log_get_file_namemPc>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d59fc:	2300      	movs	r3, #0
   d59fe:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d5a02:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5a06:	9306      	str	r3, [sp, #24]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5a08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5a0c:	9307      	str	r3, [sp, #28]
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 public:
  File() {}
   d5a0e:	4b24      	ldr	r3, [pc, #144]	; (d5aa0 <_Z26igh_sd_log_save_data_pointmPhh+0xb4>)
   d5a10:	9305      	str	r3, [sp, #20]
   * \param[in] oflag open flags.
   * \return a File object.
   */
  File open(const char *path, oflag_t oflag = FILE_READ) {
    File tmpFile;
    tmpFile.open(vwd(), path, oflag);
   d5a12:	aa01      	add	r2, sp, #4
   d5a14:	f244 2302 	movw	r3, #16898	; 0x4202
   d5a18:	4922      	ldr	r1, [pc, #136]	; (d5aa4 <_Z26igh_sd_log_save_data_pointmPhh+0xb8>)
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d5a1a:	4e23      	ldr	r6, [pc, #140]	; (d5aa8 <_Z26igh_sd_log_save_data_pointmPhh+0xbc>)
   d5a1c:	a809      	add	r0, sp, #36	; 0x24
   d5a1e:	ac09      	add	r4, sp, #36	; 0x24
   d5a20:	f001 fd13 	bl	d744a <_ZN7FatFile4openEPS_PKci>
   d5a24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5a26:	f106 0510 	add.w	r5, r6, #16
   d5a2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5a2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5a2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5a30:	6823      	ldr	r3, [r4, #0]
   d5a32:	602b      	str	r3, [r5, #0]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
   d5a34:	9b06      	ldr	r3, [sp, #24]
   d5a36:	6073      	str	r3, [r6, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   d5a38:	9b07      	ldr	r3, [sp, #28]
   d5a3a:	60b3      	str	r3, [r6, #8]
   d5a3c:	9b08      	ldr	r3, [sp, #32]
   d5a3e:	60f3      	str	r3, [r6, #12]
    igh_file = igh_sd.open((const char *)name, FILE_WRITE);

    Serial.print("Saving: "); Serial.print(name); Serial.print(" Size: "); Serial.print(size);
   d5a40:	f004 f93a 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d5a44:	4919      	ldr	r1, [pc, #100]	; (d5aac <_Z26igh_sd_log_save_data_pointmPhh+0xc0>)
   d5a46:	f003 fc53 	bl	d92f0 <_ZN5Print5printEPKc>
   d5a4a:	f004 f935 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d5a4e:	a901      	add	r1, sp, #4
   d5a50:	f003 fc4e 	bl	d92f0 <_ZN5Print5printEPKc>
   d5a54:	f004 f930 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d5a58:	4915      	ldr	r1, [pc, #84]	; (d5ab0 <_Z26igh_sd_log_save_data_pointmPhh+0xc4>)
   d5a5a:	f003 fc49 	bl	d92f0 <_ZN5Print5printEPKc>
   d5a5e:	f004 f92b 	bl	d9cb8 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5a62:	220a      	movs	r2, #10
   d5a64:	4639      	mov	r1, r7
   d5a66:	f003 fc60 	bl	d932a <_ZN5Print11printNumberEmh>

    if(igh_file)
   d5a6a:	7c34      	ldrb	r4, [r6, #16]
   d5a6c:	b15c      	cbz	r4, d5a86 <_Z26igh_sd_log_save_data_pointmPhh+0x9a>
    {
        igh_file.write( data, size);
   d5a6e:	463a      	mov	r2, r7
   d5a70:	4641      	mov	r1, r8
   d5a72:	4630      	mov	r0, r6
   d5a74:	f7ff ff1a 	bl	d58ac <_ZN4File5writeEPKhj>
        Serial.println(" OK");
   d5a78:	f004 f91e 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d5a7c:	490d      	ldr	r1, [pc, #52]	; (d5ab4 <_Z26igh_sd_log_save_data_pointmPhh+0xc8>)
   d5a7e:	f003 fc4a 	bl	d9316 <_ZN5Print7printlnEPKc>
        ret = 1;
   d5a82:	2401      	movs	r4, #1
   d5a84:	e004      	b.n	d5a90 <_Z26igh_sd_log_save_data_pointmPhh+0xa4>
    }
    else
    {
        Serial.println(" ERROR");
   d5a86:	f004 f917 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d5a8a:	490b      	ldr	r1, [pc, #44]	; (d5ab8 <_Z26igh_sd_log_save_data_pointmPhh+0xcc>)
   d5a8c:	f003 fc43 	bl	d9316 <_ZN5Print7printlnEPKc>
    }

    igh_file.close();
   d5a90:	480a      	ldr	r0, [pc, #40]	; (d5abc <_Z26igh_sd_log_save_data_pointmPhh+0xd0>)
   d5a92:	f001 fcd3 	bl	d743c <_ZN7FatFile5closeEv>
    return ret;
}
   d5a96:	4620      	mov	r0, r4
   d5a98:	b012      	add	sp, #72	; 0x48
   d5a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5a9e:	bf00      	nop
   d5aa0:	000dcfbc 	.word	0x000dcfbc
   d5aa4:	2003de54 	.word	0x2003de54
   d5aa8:	2003dec8 	.word	0x2003dec8
   d5aac:	000dd04e 	.word	0x000dd04e
   d5ab0:	000dd057 	.word	0x000dd057
   d5ab4:	000dcce4 	.word	0x000dcce4
   d5ab8:	000dccec 	.word	0x000dccec
   d5abc:	2003ded8 	.word	0x2003ded8

000d5ac0 <_Z28igh_sd_log_remove_data_pointPc>:
  *
  * \return The value true is returned for success and
  * the value false is returned for failure.
  */
  bool remove(const char* path) {
    return FatFile::remove(vwd(), path);
   d5ac0:	4601      	mov	r1, r0
   d5ac2:	4801      	ldr	r0, [pc, #4]	; (d5ac8 <_Z28igh_sd_log_remove_data_pointPc+0x8>)
   d5ac4:	f001 bd10 	b.w	d74e8 <_ZN7FatFile6removeEPS_PKc>
   d5ac8:	2003de54 	.word	0x2003de54

000d5acc <_Z26igh_sd_log_read_data_pointPcPhh>:
        return 1;
    }
}

uint8_t igh_sd_log_read_data_point(char * file_name, uint8_t * buffer, uint8_t data_length)
{
   d5acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5ad0:	b08e      	sub	sp, #56	; 0x38
   d5ad2:	4690      	mov	r8, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5ad4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5ad8:	9203      	str	r2, [sp, #12]
 public:
  File() {}
   d5ada:	4a18      	ldr	r2, [pc, #96]	; (d5b3c <_Z26igh_sd_log_read_data_pointPcPhh+0x70>)
   d5adc:	9201      	str	r2, [sp, #4]
   d5ade:	2300      	movs	r3, #0
   * \param[in] oflag open flags.
   * \return a File object.
   */
  File open(const char *path, oflag_t oflag = FILE_READ) {
    File tmpFile;
    tmpFile.open(vwd(), path, oflag);
   d5ae0:	4602      	mov	r2, r0
   d5ae2:	460f      	mov	r7, r1
   d5ae4:	a805      	add	r0, sp, #20
   d5ae6:	4916      	ldr	r1, [pc, #88]	; (d5b40 <_Z26igh_sd_log_read_data_pointPcPhh+0x74>)
   d5ae8:	f88d 3014 	strb.w	r3, [sp, #20]
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d5aec:	ac05      	add	r4, sp, #20
   d5aee:	f88d 3015 	strb.w	r3, [sp, #21]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5af2:	9302      	str	r3, [sp, #8]
   d5af4:	f001 fca9 	bl	d744a <_ZN7FatFile4openEPS_PKci>
   d5af8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5afa:	4e12      	ldr	r6, [pc, #72]	; (d5b44 <_Z26igh_sd_log_read_data_pointPcPhh+0x78>)
   d5afc:	f106 0510 	add.w	r5, r6, #16
   d5b00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5b02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5b04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5b06:	6823      	ldr	r3, [r4, #0]
   d5b08:	602b      	str	r3, [r5, #0]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
   d5b0a:	9b02      	ldr	r3, [sp, #8]
   d5b0c:	6073      	str	r3, [r6, #4]
    igh_file = igh_sd.open( (const char *)file_name );
    if(igh_file)
   d5b0e:	7c30      	ldrb	r0, [r6, #16]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   d5b10:	9b03      	ldr	r3, [sp, #12]
   d5b12:	60b3      	str	r3, [r6, #8]
   d5b14:	9b04      	ldr	r3, [sp, #16]
   d5b16:	60f3      	str	r3, [r6, #12]
   d5b18:	b160      	cbz	r0, d5b34 <_Z26igh_sd_log_read_data_pointPcPhh+0x68>
   d5b1a:	463c      	mov	r4, r7
    {
        for(int i = 0; i < data_length; i++)
   d5b1c:	1be3      	subs	r3, r4, r7
   d5b1e:	4598      	cmp	r8, r3
        {
            buffer[i] = igh_file.read(); // read data_len number of chars
        }
        igh_file.close();
   d5b20:	4809      	ldr	r0, [pc, #36]	; (d5b48 <_Z26igh_sd_log_read_data_pointPcPhh+0x7c>)
uint8_t igh_sd_log_read_data_point(char * file_name, uint8_t * buffer, uint8_t data_length)
{
    igh_file = igh_sd.open( (const char *)file_name );
    if(igh_file)
    {
        for(int i = 0; i < data_length; i++)
   d5b22:	dd04      	ble.n	d5b2e <_Z26igh_sd_log_read_data_pointPcPhh+0x62>
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    return FatFile::read();
   d5b24:	f7ff feee 	bl	d5904 <_ZN7FatFile4readEv>
        {
            buffer[i] = igh_file.read(); // read data_len number of chars
   d5b28:	f804 0b01 	strb.w	r0, [r4], #1
   d5b2c:	e7f6      	b.n	d5b1c <_Z26igh_sd_log_read_data_pointPcPhh+0x50>
        }
        igh_file.close();
   d5b2e:	f001 fc85 	bl	d743c <_ZN7FatFile5closeEv>
   d5b32:	2001      	movs	r0, #1
    }
    else
    {
        return 0;
    }   
}
   d5b34:	b00e      	add	sp, #56	; 0x38
   d5b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5b3a:	bf00      	nop
   d5b3c:	000dcfbc 	.word	0x000dcfbc
   d5b40:	2003de54 	.word	0x2003de54
   d5b44:	2003dec8 	.word	0x2003dec8
   d5b48:	2003ded8 	.word	0x2003ded8

000d5b4c <_Z29igh_sd_log_get_next_file_namePc>:

uint8_t igh_sd_log_get_next_file_name(char * next_file_name)
{
   d5b4c:	b510      	push	{r4, lr}
   d5b4e:	4604      	mov	r4, r0
    if(!igh_sd_log_setup())
   d5b50:	f7ff feec 	bl	d592c <_Z16igh_sd_log_setupv>
   d5b54:	b908      	cbnz	r0, d5b5a <_Z29igh_sd_log_get_next_file_namePc+0xe>
    {
        return 0;
   d5b56:	2000      	movs	r0, #0
   d5b58:	bd10      	pop	{r4, pc}
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d5b5a:	4910      	ldr	r1, [pc, #64]	; (d5b9c <_Z29igh_sd_log_get_next_file_namePc+0x50>)
   d5b5c:	4a10      	ldr	r2, [pc, #64]	; (d5ba0 <_Z29igh_sd_log_get_next_file_namePc+0x54>)
   d5b5e:	6809      	ldr	r1, [r1, #0]
   d5b60:	4810      	ldr	r0, [pc, #64]	; (d5ba4 <_Z29igh_sd_log_get_next_file_namePc+0x58>)
   d5b62:	2300      	movs	r3, #0
   d5b64:	f001 fc71 	bl	d744a <_ZN7FatFile4openEPS_PKci>
    }

    if (!sd_root.open("/"))
   d5b68:	2800      	cmp	r0, #0
   d5b6a:	d0f4      	beq.n	d5b56 <_Z29igh_sd_log_get_next_file_namePc+0xa>
    {
        return 0;
    }
    else
    {
        next_file.openNext(&sd_root, O_RDONLY); // skip one index
   d5b6c:	2200      	movs	r2, #0
   d5b6e:	490d      	ldr	r1, [pc, #52]	; (d5ba4 <_Z29igh_sd_log_get_next_file_namePc+0x58>)
   d5b70:	480d      	ldr	r0, [pc, #52]	; (d5ba8 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d5b72:	f001 fbee 	bl	d7352 <_ZN7FatFile8openNextEPS_i>
        next_file.close(); 
   d5b76:	480c      	ldr	r0, [pc, #48]	; (d5ba8 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d5b78:	f001 fc60 	bl	d743c <_ZN7FatFile5closeEv>
        if( next_file.openNext(&sd_root, O_RDONLY) )
   d5b7c:	2200      	movs	r2, #0
   d5b7e:	4909      	ldr	r1, [pc, #36]	; (d5ba4 <_Z29igh_sd_log_get_next_file_namePc+0x58>)
   d5b80:	4809      	ldr	r0, [pc, #36]	; (d5ba8 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d5b82:	f001 fbe6 	bl	d7352 <_ZN7FatFile8openNextEPS_i>
   d5b86:	2800      	cmp	r0, #0
   d5b88:	d0e5      	beq.n	d5b56 <_Z29igh_sd_log_get_next_file_namePc+0xa>
        {
            next_file.getSFN(next_file_name);
   d5b8a:	4621      	mov	r1, r4
   d5b8c:	4806      	ldr	r0, [pc, #24]	; (d5ba8 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d5b8e:	f001 f991 	bl	d6eb4 <_ZN7FatFile6getSFNEPc>
            next_file.close(); 
   d5b92:	4805      	ldr	r0, [pc, #20]	; (d5ba8 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d5b94:	f001 fc52 	bl	d743c <_ZN7FatFile5closeEv>
   d5b98:	2001      	movs	r0, #1
        else
        {
            return 0;
        }    
    }
}
   d5b9a:	bd10      	pop	{r4, pc}
   d5b9c:	2003df40 	.word	0x2003df40
   d5ba0:	000dd05f 	.word	0x000dd05f
   d5ba4:	2003dea4 	.word	0x2003dea4
   d5ba8:	2003d9f4 	.word	0x2003d9f4

000d5bac <_GLOBAL__sub_I_igh_sd>:
    {
        return 0;
    }

    return 1;
   d5bac:	b570      	push	{r4, r5, r6, lr}
   d5bae:	f002 fd71 	bl	d8694 <HAL_Pin_Map>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d5bb2:	4b27      	ldr	r3, [pc, #156]	; (d5c50 <_GLOBAL__sub_I_igh_sd+0xa4>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5bb4:	4e27      	ldr	r6, [pc, #156]	; (d5c54 <_GLOBAL__sub_I_igh_sd+0xa8>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d5bb6:	2164      	movs	r1, #100	; 0x64
   d5bb8:	f883 1460 	strb.w	r1, [r3, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d5bbc:	4926      	ldr	r1, [pc, #152]	; (d5c58 <_GLOBAL__sub_I_igh_sd+0xac>)
   d5bbe:	f8c3 1470 	str.w	r1, [r3, #1136]	; 0x470
   d5bc2:	2101      	movs	r1, #1
   d5bc4:	f883 1474 	strb.w	r1, [r3, #1140]	; 0x474
   d5bc8:	6831      	ldr	r1, [r6, #0]
   d5bca:	2200      	movs	r2, #0
   d5bcc:	f011 0501 	ands.w	r5, r1, #1
   d5bd0:	71da      	strb	r2, [r3, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5bd2:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
   d5bd6:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
   d5bda:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
   d5bde:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   d5be2:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
   d5be6:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
   d5bea:	461c      	mov	r4, r3
   d5bec:	d10a      	bne.n	d5c04 <_GLOBAL__sub_I_igh_sd+0x58>
   d5bee:	4630      	mov	r0, r6
   d5bf0:	f7fe fa5b 	bl	d40aa <__cxa_guard_acquire>
   d5bf4:	b130      	cbz	r0, d5c04 <_GLOBAL__sub_I_igh_sd+0x58>
   d5bf6:	4629      	mov	r1, r5
   d5bf8:	4818      	ldr	r0, [pc, #96]	; (d5c5c <_GLOBAL__sub_I_igh_sd+0xb0>)
   d5bfa:	f003 f923 	bl	d8e44 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5bfe:	4630      	mov	r0, r6
   d5c00:	f7fe fa58 	bl	d40b4 <__cxa_guard_release>
   d5c04:	4816      	ldr	r0, [pc, #88]	; (d5c60 <_GLOBAL__sub_I_igh_sd+0xb4>)
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d5c06:	4b15      	ldr	r3, [pc, #84]	; (d5c5c <_GLOBAL__sub_I_igh_sd+0xb0>)
   d5c08:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d5c0c:	2400      	movs	r4, #0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5c12:	7404      	strb	r4, [r0, #16]
   d5c14:	7444      	strb	r4, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5c16:	6044      	str	r4, [r0, #4]
   d5c18:	6083      	str	r3, [r0, #8]
#include <SPI.h>
#include "SdFat.h"
#include "igh_sd_log.h"

SdFat igh_sd;
File igh_file;
   d5c1a:	4a12      	ldr	r2, [pc, #72]	; (d5c64 <_GLOBAL__sub_I_igh_sd+0xb8>)
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 public:
  File() {}
   d5c1c:	4b12      	ldr	r3, [pc, #72]	; (d5c68 <_GLOBAL__sub_I_igh_sd+0xbc>)
   d5c1e:	4913      	ldr	r1, [pc, #76]	; (d5c6c <_GLOBAL__sub_I_igh_sd+0xc0>)
   d5c20:	6003      	str	r3, [r0, #0]
   d5c22:	f004 ff43 	bl	daaac <__aeabi_atexit>
   d5c26:	4812      	ldr	r0, [pc, #72]	; (d5c70 <_GLOBAL__sub_I_igh_sd+0xc4>)
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 public:
  SdFile() {}
   d5c28:	4d12      	ldr	r5, [pc, #72]	; (d5c74 <_GLOBAL__sub_I_igh_sd+0xc8>)
   d5c2a:	7204      	strb	r4, [r0, #8]
   d5c2c:	7244      	strb	r4, [r0, #9]
   d5c2e:	6044      	str	r4, [r0, #4]
SdFile sd_root;
   d5c30:	4a0c      	ldr	r2, [pc, #48]	; (d5c64 <_GLOBAL__sub_I_igh_sd+0xb8>)
   d5c32:	4911      	ldr	r1, [pc, #68]	; (d5c78 <_GLOBAL__sub_I_igh_sd+0xcc>)
   d5c34:	6005      	str	r5, [r0, #0]
   d5c36:	f004 ff39 	bl	daaac <__aeabi_atexit>
   d5c3a:	4810      	ldr	r0, [pc, #64]	; (d5c7c <_GLOBAL__sub_I_igh_sd+0xd0>)
SdFile next_file;
   d5c3c:	4a09      	ldr	r2, [pc, #36]	; (d5c64 <_GLOBAL__sub_I_igh_sd+0xb8>)
   d5c3e:	7204      	strb	r4, [r0, #8]
   d5c40:	7244      	strb	r4, [r0, #9]
   d5c42:	6044      	str	r4, [r0, #4]
   d5c44:	6005      	str	r5, [r0, #0]
   d5c46:	490c      	ldr	r1, [pc, #48]	; (d5c78 <_GLOBAL__sub_I_igh_sd+0xcc>)
    {
        return 0;
    }

    return 1;
   d5c48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#include "igh_sd_log.h"

SdFat igh_sd;
File igh_file;
SdFile sd_root;
SdFile next_file;
   d5c4c:	f004 bf2e 	b.w	daaac <__aeabi_atexit>
   d5c50:	2003da18 	.word	0x2003da18
   d5c54:	2003d9e0 	.word	0x2003d9e0
   d5c58:	000dcfb0 	.word	0x000dcfb0
   d5c5c:	2003d9e4 	.word	0x2003d9e4
   d5c60:	2003dec8 	.word	0x2003dec8
   d5c64:	2003d8e0 	.word	0x2003d8e0
   d5c68:	000dcfbc 	.word	0x000dcfbc
   d5c6c:	000d5847 	.word	0x000d5847
   d5c70:	2003de9c 	.word	0x2003de9c
   d5c74:	000dcfe4 	.word	0x000dcfe4
   d5c78:	000d5845 	.word	0x000d5845
   d5c7c:	2003d9ec 	.word	0x2003d9ec

000d5c80 <_ZN14CellularSignalD1Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d5c80:	4770      	bx	lr

000d5c82 <_ZN14CellularSignalD0Ev>:
   d5c82:	b510      	push	{r4, lr}
   d5c84:	2128      	movs	r1, #40	; 0x28
   d5c86:	4604      	mov	r4, r0
   d5c88:	f004 ff1e 	bl	daac8 <_ZdlPvj>
   d5c8c:	4620      	mov	r0, r4
   d5c8e:	bd10      	pop	{r4, pc}

000d5c90 <_Z19igh_boron_sync_timev>:
/* Local function prototypes */
uint8_t get_int_from_str( uint8_t num );

/* Functions */
void igh_boron_sync_time(void)
{
   d5c90:	b510      	push	{r4, lr}
   d5c92:	f002 fdc7 	bl	d8824 <HAL_Timer_Get_Milli_Seconds>
    if((millis() - lastSync > ONE_DAY_MILLIS))
   d5c96:	4b08      	ldr	r3, [pc, #32]	; (d5cb8 <_Z19igh_boron_sync_timev+0x28>)
   d5c98:	681a      	ldr	r2, [r3, #0]
   d5c9a:	1a80      	subs	r0, r0, r2
   d5c9c:	4a07      	ldr	r2, [pc, #28]	; (d5cbc <_Z19igh_boron_sync_timev+0x2c>)
   d5c9e:	4290      	cmp	r0, r2
   d5ca0:	461c      	mov	r4, r3
   d5ca2:	d908      	bls.n	d5cb6 <_Z19igh_boron_sync_timev+0x26>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5ca4:	f003 f80a 	bl	d8cbc <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d5ca8:	b110      	cbz	r0, d5cb0 <_Z19igh_boron_sync_timev+0x20>
            return false;
        }
        return spark_sync_time(NULL);
   d5caa:	2000      	movs	r0, #0
   d5cac:	f003 f816 	bl	d8cdc <spark_sync_time>
   d5cb0:	f002 fdb8 	bl	d8824 <HAL_Timer_Get_Milli_Seconds>
    {
        Particle.syncTime();
        lastSync = millis(); 
   d5cb4:	6020      	str	r0, [r4, #0]
   d5cb6:	bd10      	pop	{r4, pc}
   d5cb8:	2003df24 	.word	0x2003df24
   d5cbc:	05265c00 	.word	0x05265c00

000d5cc0 <_Z19igh_boron_unix_timev>:
    }
}

uint32_t igh_boron_unix_time(void)
{
    return (uint32_t)Time.now();
   d5cc0:	f003 bd49 	b.w	d9756 <_ZN9TimeClass3nowEv>

000d5cc4 <_Z13igh_boron_SoCv>:
}

float igh_boron_SoC(void)
{
    return fuel.getSoC();
   d5cc4:	4801      	ldr	r0, [pc, #4]	; (d5ccc <_Z13igh_boron_SoCv+0x8>)
   d5cc6:	f003 be55 	b.w	d9974 <_ZN9FuelGauge6getSoCEv>
   d5cca:	bf00      	nop
   d5ccc:	2003df28 	.word	0x2003df28

000d5cd0 <_Z16get_int_from_strh>:
        k++; j++;
    }
}

uint8_t get_int_from_str( uint8_t num )
{
   d5cd0:	b510      	push	{r4, lr}
    unsigned long location = (unsigned long)strchr(hex_digits_LC, num);
   d5cd2:	4c04      	ldr	r4, [pc, #16]	; (d5ce4 <_Z16get_int_from_strh+0x14>)
   d5cd4:	4601      	mov	r1, r0
   d5cd6:	4620      	mov	r0, r4
   d5cd8:	f005 fede 	bl	dba98 <strchr>
    unsigned long origin = (unsigned long)hex_digits_LC;
    return uint8_t(location - origin);
   d5cdc:	1b00      	subs	r0, r0, r4
}
   d5cde:	b2c0      	uxtb	r0, r0
   d5ce0:	bd10      	pop	{r4, pc}
   d5ce2:	bf00      	nop
   d5ce4:	2003d814 	.word	0x2003d814

000d5ce8 <_Z15igh_boron_setupv>:
{
    return Particle.connected();;
}

void igh_boron_setup(void)
{
   d5ce8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d5cec:	f002 fd9a 	bl	d8824 <HAL_Timer_Get_Milli_Seconds>
    lastSync = millis();
   d5cf0:	4b14      	ldr	r3, [pc, #80]	; (d5d44 <_Z15igh_boron_setupv+0x5c>)
   d5cf2:	6018      	str	r0, [r3, #0]
   d5cf4:	4668      	mov	r0, sp
   d5cf6:	f002 ffe9 	bl	d8ccc <spark_deviceID>
    // get serial number 
    memcpy( deviceID_string, System.deviceID(), sizeof(deviceID_string) );
   d5cfa:	9b00      	ldr	r3, [sp, #0]
   d5cfc:	4a12      	ldr	r2, [pc, #72]	; (d5d48 <_Z15igh_boron_setupv+0x60>)
   d5cfe:	f103 0118 	add.w	r1, r3, #24
   d5d02:	4617      	mov	r7, r2
   d5d04:	f853 0b04 	ldr.w	r0, [r3], #4
   d5d08:	f842 0b04 	str.w	r0, [r2], #4
   d5d0c:	428b      	cmp	r3, r1
   d5d0e:	d1f9      	bne.n	d5d04 <_Z15igh_boron_setupv+0x1c>
   d5d10:	4668      	mov	r0, sp
   d5d12:	f003 f9f9 	bl	d9108 <_ZN6StringD1Ev>
   d5d16:	4e0d      	ldr	r6, [pc, #52]	; (d5d4c <_Z15igh_boron_setupv+0x64>)
   d5d18:	2500      	movs	r5, #0

    uint8_t k = 0; uint8_t j = 0;
    while( k < sizeof(deviceID_string) )
    {
        boron_serial_number[j] = get_int_from_str(deviceID_string[k]) << 4;
   d5d1a:	5d78      	ldrb	r0, [r7, r5]
   d5d1c:	f7ff ffd8 	bl	d5cd0 <_Z16get_int_from_strh>
   d5d20:	eb07 0805 	add.w	r8, r7, r5
   d5d24:	0100      	lsls	r0, r0, #4
   d5d26:	b2c4      	uxtb	r4, r0
        k++;
        boron_serial_number[j] |= get_int_from_str(deviceID_string[k]);
   d5d28:	f898 0001 	ldrb.w	r0, [r8, #1]
    memcpy( deviceID_string, System.deviceID(), sizeof(deviceID_string) );

    uint8_t k = 0; uint8_t j = 0;
    while( k < sizeof(deviceID_string) )
    {
        boron_serial_number[j] = get_int_from_str(deviceID_string[k]) << 4;
   d5d2c:	f806 4f01 	strb.w	r4, [r6, #1]!
        k++;
        boron_serial_number[j] |= get_int_from_str(deviceID_string[k]);
   d5d30:	f7ff ffce 	bl	d5cd0 <_Z16get_int_from_strh>
   d5d34:	3502      	adds	r5, #2
   d5d36:	4320      	orrs	r0, r4
    lastSync = millis();
    // get serial number 
    memcpy( deviceID_string, System.deviceID(), sizeof(deviceID_string) );

    uint8_t k = 0; uint8_t j = 0;
    while( k < sizeof(deviceID_string) )
   d5d38:	2d18      	cmp	r5, #24
    {
        boron_serial_number[j] = get_int_from_str(deviceID_string[k]) << 4;
        k++;
        boron_serial_number[j] |= get_int_from_str(deviceID_string[k]);
   d5d3a:	7030      	strb	r0, [r6, #0]
    lastSync = millis();
    // get serial number 
    memcpy( deviceID_string, System.deviceID(), sizeof(deviceID_string) );

    uint8_t k = 0; uint8_t j = 0;
    while( k < sizeof(deviceID_string) )
   d5d3c:	d1ed      	bne.n	d5d1a <_Z15igh_boron_setupv+0x32>
        boron_serial_number[j] = get_int_from_str(deviceID_string[k]) << 4;
        k++;
        boron_serial_number[j] |= get_int_from_str(deviceID_string[k]);
        k++; j++;
    }
}
   d5d3e:	b004      	add	sp, #16
   d5d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5d44:	2003df24 	.word	0x2003df24
   d5d48:	2003e684 	.word	0x2003e684
   d5d4c:	2003e69b 	.word	0x2003e69b

000d5d50 <_Z17igh_boron_servicev>:
    return uint8_t(location - origin);
}

void igh_boron_service(void)
{
    igh_boron_sync_time();
   d5d50:	f7ff bf9e 	b.w	d5c90 <_Z19igh_boron_sync_timev>

000d5d54 <_GLOBAL__sub_I_lastSync>:
    Serial.print("network status:   "); Serial.println(igh_boron_connecetd_to_network());
    Serial.print("signal strength:  "); Serial.println(igh_boron_ss());
    Serial.print("signal quality:   "); Serial.println(igh_boron_sq());
    Serial.print("Battery Voltage:  "); Serial.println(igh_boron_voltage());
    Serial.print("Battery SOC:      "); Serial.println(igh_boron_SoC());
   d5d54:	b570      	push	{r4, r5, r6, lr}
   d5d56:	f002 fc9d 	bl	d8694 <HAL_Pin_Map>
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d5d5a:	4c10      	ldr	r4, [pc, #64]	; (d5d9c <_GLOBAL__sub_I_lastSync+0x48>)
   d5d5c:	4b10      	ldr	r3, [pc, #64]	; (d5da0 <_GLOBAL__sub_I_lastSync+0x4c>)
   d5d5e:	6023      	str	r3, [r4, #0]
   d5d60:	2500      	movs	r5, #0
   d5d62:	3328      	adds	r3, #40	; 0x28
   d5d64:	4629      	mov	r1, r5
#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)

unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
   d5d66:	4e0f      	ldr	r6, [pc, #60]	; (d5da4 <_GLOBAL__sub_I_lastSync+0x50>)
   d5d68:	6063      	str	r3, [r4, #4]
   d5d6a:	2218      	movs	r2, #24
   d5d6c:	f104 0010 	add.w	r0, r4, #16
   d5d70:	60a5      	str	r5, [r4, #8]
   d5d72:	60e5      	str	r5, [r4, #12]
   d5d74:	f005 fe60 	bl	dba38 <memset>
   d5d78:	4620      	mov	r0, r4
float signal_quality, signal_strength;
FuelGauge fuel;
   d5d7a:	4c0b      	ldr	r4, [pc, #44]	; (d5da8 <_GLOBAL__sub_I_lastSync+0x54>)
#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)

unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
   d5d7c:	490b      	ldr	r1, [pc, #44]	; (d5dac <_GLOBAL__sub_I_lastSync+0x58>)
   d5d7e:	4632      	mov	r2, r6
   d5d80:	f004 fe94 	bl	daaac <__aeabi_atexit>
float signal_quality, signal_strength;
FuelGauge fuel;
   d5d84:	4629      	mov	r1, r5
   d5d86:	4620      	mov	r0, r4
   d5d88:	f003 fdb4 	bl	d98f4 <_ZN9FuelGaugeC1Eb>
   d5d8c:	4632      	mov	r2, r6
   d5d8e:	4620      	mov	r0, r4
   d5d90:	4907      	ldr	r1, [pc, #28]	; (d5db0 <_GLOBAL__sub_I_lastSync+0x5c>)
    Serial.print("network status:   "); Serial.println(igh_boron_connecetd_to_network());
    Serial.print("signal strength:  "); Serial.println(igh_boron_ss());
    Serial.print("signal quality:   "); Serial.println(igh_boron_sq());
    Serial.print("Battery Voltage:  "); Serial.println(igh_boron_voltage());
    Serial.print("Battery SOC:      "); Serial.println(igh_boron_SoC());
   d5d92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
float signal_quality, signal_strength;
FuelGauge fuel;
   d5d96:	f004 be89 	b.w	daaac <__aeabi_atexit>
   d5d9a:	bf00      	nop
   d5d9c:	2003defc 	.word	0x2003defc
   d5da0:	000dd22c 	.word	0x000dd22c
   d5da4:	2003d8e0 	.word	0x2003d8e0
   d5da8:	2003df28 	.word	0x2003df28
   d5dac:	000d5c81 	.word	0x000d5c81
   d5db0:	000d9913 	.word	0x000d9913

000d5db4 <_Z21igh_rfm69_set_bitratehh>:
    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
} 

void igh_rfm69_set_bitrate(uint8_t msb, uint8_t lsb)
{
   d5db4:	b538      	push	{r3, r4, r5, lr}
    igh_radio.writeReg(REG_BITRATEMSB, msb); 
   d5db6:	4c07      	ldr	r4, [pc, #28]	; (d5dd4 <_Z21igh_rfm69_set_bitratehh+0x20>)
    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
} 

void igh_rfm69_set_bitrate(uint8_t msb, uint8_t lsb)
{
   d5db8:	460d      	mov	r5, r1
    igh_radio.writeReg(REG_BITRATEMSB, msb); 
   d5dba:	4602      	mov	r2, r0
   d5dbc:	2103      	movs	r1, #3
   d5dbe:	4620      	mov	r0, r4
   d5dc0:	f002 f96e 	bl	d80a0 <_ZN5RFM698writeRegEhh>
    igh_radio.writeReg(REG_BITRATELSB, lsb);
   d5dc4:	462a      	mov	r2, r5
   d5dc6:	4620      	mov	r0, r4
   d5dc8:	2104      	movs	r1, #4
}
   d5dca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
} 

void igh_rfm69_set_bitrate(uint8_t msb, uint8_t lsb)
{
    igh_radio.writeReg(REG_BITRATEMSB, msb); 
    igh_radio.writeReg(REG_BITRATELSB, lsb);
   d5dce:	f002 b967 	b.w	d80a0 <_ZN5RFM698writeRegEhh>
   d5dd2:	bf00      	nop
   d5dd4:	2003df30 	.word	0x2003df30

000d5dd8 <_Z25igh_rfm69_set_power_levelh>:
}

void igh_rfm69_set_power_level(uint8_t pwrlvl)
{
    igh_radio.setPowerLevel(pwrlvl);
   d5dd8:	4601      	mov	r1, r0
   d5dda:	4801      	ldr	r0, [pc, #4]	; (d5de0 <_Z25igh_rfm69_set_power_levelh+0x8>)
   d5ddc:	f002 b972 	b.w	d80c4 <_ZN5RFM6913setPowerLevelEh>
   d5de0:	2003df30 	.word	0x2003df30

000d5de4 <_Z15igh_rfm69_resetv>:
}

void igh_rfm69_reset(void)
{
   d5de4:	b508      	push	{r3, lr}
    digitalWrite(RFM69_RST, HIGH);
   d5de6:	2101      	movs	r1, #1
   d5de8:	2006      	movs	r0, #6
   d5dea:	f004 fd9e 	bl	da92a <digitalWrite>
    delay(100);
   d5dee:	2064      	movs	r0, #100	; 0x64
   d5df0:	f003 fcc2 	bl	d9778 <delay>
    digitalWrite(RFM69_RST, LOW);
   d5df4:	2006      	movs	r0, #6
   d5df6:	2100      	movs	r1, #0
   d5df8:	f004 fd97 	bl	da92a <digitalWrite>
    delay(100);
   d5dfc:	2064      	movs	r0, #100	; 0x64
}
   d5dfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void igh_rfm69_reset(void)
{
    digitalWrite(RFM69_RST, HIGH);
    delay(100);
    digitalWrite(RFM69_RST, LOW);
    delay(100);
   d5e02:	f003 bcb9 	b.w	d9778 <delay>
	...

000d5e08 <_Z15igh_rfm69_setupv>:
uint8_t rfm69_powerlevel  = 10; // default power level, about 100M line of site

RFM69 igh_radio = RFM69(RFM69_CS, RFM69_IRQ, IS_RFM69HCW, RFM69_IRQN);

void igh_rfm69_setup(void)
{
   d5e08:	b538      	push	{r3, r4, r5, lr}
    // first reset the module
    pinMode(RFM69_RST, OUTPUT);

    igh_rfm69_reset();
    
    if( false == igh_radio.initialize( FREQUENCY, RFM69_NODE_ID, RFM69_NETWORK_ID) )
   d5e0a:	4c23      	ldr	r4, [pc, #140]	; (d5e98 <_Z15igh_rfm69_setupv+0x90>)
RFM69 igh_radio = RFM69(RFM69_CS, RFM69_IRQ, IS_RFM69HCW, RFM69_IRQN);

void igh_rfm69_setup(void)
{
    // first reset the module
    pinMode(RFM69_RST, OUTPUT);
   d5e0c:	2101      	movs	r1, #1
   d5e0e:	2006      	movs	r0, #6
   d5e10:	f004 fd7a 	bl	da908 <pinMode>

    igh_rfm69_reset();
   d5e14:	f7ff ffe6 	bl	d5de4 <_Z15igh_rfm69_resetv>
    
    if( false == igh_radio.initialize( FREQUENCY, RFM69_NODE_ID, RFM69_NETWORK_ID) )
   d5e18:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5e1c:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   d5e20:	481e      	ldr	r0, [pc, #120]	; (d5e9c <_Z15igh_rfm69_setupv+0x94>)
   d5e22:	215b      	movs	r1, #91	; 0x5b
   d5e24:	f002 fb12 	bl	d844c <_ZN5RFM6910initializeEhhh>
   d5e28:	b920      	cbnz	r0, d5e34 <_Z15igh_rfm69_setupv+0x2c>
    Serial.println("RFM69 INIT ERROR");
   d5e2a:	f003 ff45 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d5e2e:	491c      	ldr	r1, [pc, #112]	; (d5ea0 <_Z15igh_rfm69_setupv+0x98>)
   d5e30:	f003 fa71 	bl	d9316 <_ZN5Print7printlnEPKc>

    Serial.print( "NEW SHIELD RF ID: " ); Serial.println( RFM69_NODE_ID);
   d5e34:	f003 ff40 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d5e38:	491a      	ldr	r1, [pc, #104]	; (d5ea4 <_Z15igh_rfm69_setupv+0x9c>)
   d5e3a:	f003 fa59 	bl	d92f0 <_ZN5Print5printEPKc>
   d5e3e:	f003 ff3b 	bl	d9cb8 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5e42:	220a      	movs	r2, #10
   d5e44:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
   d5e48:	4605      	mov	r5, r0
   d5e4a:	f003 fa6e 	bl	d932a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d5e4e:	4628      	mov	r0, r5
   d5e50:	f003 fa55 	bl	d92fe <_ZN5Print7printlnEv>
    Serial.print( "NEW NETWORK ID: " ); Serial.println( RFM69_NETWORK_ID);
   d5e54:	f003 ff30 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d5e58:	4913      	ldr	r1, [pc, #76]	; (d5ea8 <_Z15igh_rfm69_setupv+0xa0>)
   d5e5a:	f003 fa49 	bl	d92f0 <_ZN5Print5printEPKc>
   d5e5e:	f003 ff2b 	bl	d9cb8 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5e62:	220a      	movs	r2, #10
   d5e64:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   d5e68:	4605      	mov	r5, r0
   d5e6a:	f003 fa5e 	bl	d932a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d5e6e:	4628      	mov	r0, r5
   d5e70:	f003 fa45 	bl	d92fe <_ZN5Print7printlnEv>

    igh_radio.setHighPower(); // This should only be called for RFM69HCW & HW
   d5e74:	2101      	movs	r1, #1
   d5e76:	4809      	ldr	r0, [pc, #36]	; (d5e9c <_Z15igh_rfm69_setupv+0x94>)
   d5e78:	f002 fa0e 	bl	d8298 <_ZN5RFM6912setHighPowerEb>

    igh_rfm69_set_bitrate(RF_BITRATEMSB_9600, RF_BITRATELSB_9600); // set to 9.6Kbps
   d5e7c:	2105      	movs	r1, #5
   d5e7e:	200d      	movs	r0, #13
   d5e80:	f7ff ff98 	bl	d5db4 <_Z21igh_rfm69_set_bitratehh>

    igh_rfm69_set_power_level(rfm69_powerlevel);
   d5e84:	4b09      	ldr	r3, [pc, #36]	; (d5eac <_Z15igh_rfm69_setupv+0xa4>)
   d5e86:	7818      	ldrb	r0, [r3, #0]
   d5e88:	f7ff ffa6 	bl	d5dd8 <_Z25igh_rfm69_set_power_levelh>

    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
   d5e8c:	4908      	ldr	r1, [pc, #32]	; (d5eb0 <_Z15igh_rfm69_setupv+0xa8>)
   d5e8e:	4803      	ldr	r0, [pc, #12]	; (d5e9c <_Z15igh_rfm69_setupv+0x94>)
} 
   d5e90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    igh_rfm69_set_bitrate(RF_BITRATEMSB_9600, RF_BITRATELSB_9600); // set to 9.6Kbps

    igh_rfm69_set_power_level(rfm69_powerlevel);

    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
   d5e94:	f002 baae 	b.w	d83f4 <_ZN5RFM697encryptEPKc>
   d5e98:	2003e604 	.word	0x2003e604
   d5e9c:	2003df30 	.word	0x2003df30
   d5ea0:	000dd061 	.word	0x000dd061
   d5ea4:	000dd072 	.word	0x000dd072
   d5ea8:	000dd085 	.word	0x000dd085
   d5eac:	2003d825 	.word	0x2003d825
   d5eb0:	000dd096 	.word	0x000dd096

000d5eb4 <_Z27igh_rfm69_receive_raw_bytesPhh>:
    }
    
}

uint8_t igh_rfm69_receive_raw_bytes( uint8_t *buffer, uint8_t len )
{
   d5eb4:	b570      	push	{r4, r5, r6, lr}
   d5eb6:	4605      	mov	r5, r0
    uint8_t rx_len = 0;
    if ( igh_radio.receiveDone() )
   d5eb8:	4809      	ldr	r0, [pc, #36]	; (d5ee0 <_Z27igh_rfm69_receive_raw_bytesPhh+0x2c>)
    }
    
}

uint8_t igh_rfm69_receive_raw_bytes( uint8_t *buffer, uint8_t len )
{
   d5eba:	460e      	mov	r6, r1
    uint8_t rx_len = 0;
    if ( igh_radio.receiveDone() )
   d5ebc:	f002 f9cc 	bl	d8258 <_ZN5RFM6911receiveDoneEv>
   d5ec0:	b160      	cbz	r0, d5edc <_Z27igh_rfm69_receive_raw_bytesPhh+0x28>
    {
        if( igh_radio.DATALEN <= len )
   d5ec2:	4c08      	ldr	r4, [pc, #32]	; (d5ee4 <_Z27igh_rfm69_receive_raw_bytesPhh+0x30>)
   d5ec4:	7823      	ldrb	r3, [r4, #0]
   d5ec6:	42b3      	cmp	r3, r6
   d5ec8:	d807      	bhi.n	d5eda <_Z27igh_rfm69_receive_raw_bytesPhh+0x26>
        {
            memcpy( buffer, (uint8_t *)igh_radio.DATA, igh_radio.DATALEN);
   d5eca:	7822      	ldrb	r2, [r4, #0]
   d5ecc:	4906      	ldr	r1, [pc, #24]	; (d5ee8 <_Z27igh_rfm69_receive_raw_bytesPhh+0x34>)
   d5ece:	4628      	mov	r0, r5
   d5ed0:	f005 fda7 	bl	dba22 <memcpy>
            rx_len = igh_radio.DATALEN;
   d5ed4:	7820      	ldrb	r0, [r4, #0]
   d5ed6:	b2c0      	uxtb	r0, r0
   d5ed8:	bd70      	pop	{r4, r5, r6, pc}
    
}

uint8_t igh_rfm69_receive_raw_bytes( uint8_t *buffer, uint8_t len )
{
    uint8_t rx_len = 0;
   d5eda:	2000      	movs	r0, #0
            memcpy( buffer, (uint8_t *)igh_radio.DATA, igh_radio.DATALEN);
            rx_len = igh_radio.DATALEN;
        }
    }
    return rx_len;
}
   d5edc:	bd70      	pop	{r4, r5, r6, pc}
   d5ede:	bf00      	nop
   d5ee0:	2003df30 	.word	0x2003df30
   d5ee4:	2003dfa7 	.word	0x2003dfa7
   d5ee8:	2003df6a 	.word	0x2003df6a

000d5eec <_Z17igh_rfm69_servicev>:

void igh_rfm69_service( void )
{
   d5eec:	b510      	push	{r4, lr}
    // if new settings have been sent, re initialize the module
    if( true == initialize_rfm69 )
   d5eee:	4c04      	ldr	r4, [pc, #16]	; (d5f00 <_Z17igh_rfm69_servicev+0x14>)
   d5ef0:	7823      	ldrb	r3, [r4, #0]
   d5ef2:	2b01      	cmp	r3, #1
   d5ef4:	d103      	bne.n	d5efe <_Z17igh_rfm69_servicev+0x12>
    {
        igh_rfm69_setup();
   d5ef6:	f7ff ff87 	bl	d5e08 <_Z15igh_rfm69_setupv>
        initialize_rfm69 = false;
   d5efa:	2300      	movs	r3, #0
   d5efc:	7023      	strb	r3, [r4, #0]
   d5efe:	bd10      	pop	{r4, pc}
   d5f00:	2003d8e5 	.word	0x2003d8e5

000d5f04 <_GLOBAL__sub_I_NETWORKID>:
    }
   d5f04:	b508      	push	{r3, lr}
   d5f06:	f002 fbc5 	bl	d8694 <HAL_Pin_Map>
    static volatile byte ACK_REQUESTED;
    static volatile byte ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
    static volatile int RSSI; //most accurate RSSI during reception (closest to the reception)
    static volatile byte _mode; //should be protected?

    RFM69(byte slaveSelectPin=RF69_SPI_CS, byte interruptPin=RF69_IRQ_PIN, bool isRFM69HW=false, byte interruptNum=RF69_IRQ_NUM) {
   d5f0a:	4b08      	ldr	r3, [pc, #32]	; (d5f2c <_GLOBAL__sub_I_NETWORKID+0x28>)
   d5f0c:	4a08      	ldr	r2, [pc, #32]	; (d5f30 <_GLOBAL__sub_I_NETWORKID+0x2c>)
   d5f0e:	601a      	str	r2, [r3, #0]
      _slaveSelectPin = slaveSelectPin;
   d5f10:	2211      	movs	r2, #17
      _interruptPin = interruptPin;
      _interruptNum = interruptNum;
      _mode = RF69_MODE_STANDBY;
   d5f12:	4908      	ldr	r1, [pc, #32]	; (d5f34 <_GLOBAL__sub_I_NETWORKID+0x30>)
    static volatile byte ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
    static volatile int RSSI; //most accurate RSSI during reception (closest to the reception)
    static volatile byte _mode; //should be protected?

    RFM69(byte slaveSelectPin=RF69_SPI_CS, byte interruptPin=RF69_IRQ_PIN, bool isRFM69HW=false, byte interruptNum=RF69_IRQ_NUM) {
      _slaveSelectPin = slaveSelectPin;
   d5f14:	711a      	strb	r2, [r3, #4]
      _interruptPin = interruptPin;
   d5f16:	2208      	movs	r2, #8
   d5f18:	715a      	strb	r2, [r3, #5]
      _interruptNum = interruptNum;
   d5f1a:	719a      	strb	r2, [r3, #6]
      _mode = RF69_MODE_STANDBY;
   d5f1c:	2201      	movs	r2, #1
   d5f1e:	700a      	strb	r2, [r1, #0]
      _promiscuousMode = false;
   d5f20:	2100      	movs	r1, #0
   d5f22:	7219      	strb	r1, [r3, #8]
      _powerLevel = 31;
   d5f24:	211f      	movs	r1, #31
   d5f26:	7259      	strb	r1, [r3, #9]
      _isRFM69HW = isRFM69HW;
   d5f28:	729a      	strb	r2, [r3, #10]
   d5f2a:	bd08      	pop	{r3, pc}
   d5f2c:	2003df30 	.word	0x2003df30
   d5f30:	000dd0d0 	.word	0x000dd0d0
   d5f34:	2003dfa8 	.word	0x2003dfa8

000d5f38 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d5f38:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d5f3a:	6984      	ldr	r4, [r0, #24]
   d5f3c:	4b0a      	ldr	r3, [pc, #40]	; (d5f68 <_ZN9TCPClientD1Ev+0x30>)
   d5f3e:	6003      	str	r3, [r0, #0]
   d5f40:	4605      	mov	r5, r0
   d5f42:	b17c      	cbz	r4, d5f64 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5f44:	6863      	ldr	r3, [r4, #4]
   d5f46:	3b01      	subs	r3, #1
   d5f48:	6063      	str	r3, [r4, #4]
   d5f4a:	b95b      	cbnz	r3, d5f64 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d5f4c:	6823      	ldr	r3, [r4, #0]
   d5f4e:	4620      	mov	r0, r4
   d5f50:	689b      	ldr	r3, [r3, #8]
   d5f52:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5f54:	68a3      	ldr	r3, [r4, #8]
   d5f56:	3b01      	subs	r3, #1
   d5f58:	60a3      	str	r3, [r4, #8]
   d5f5a:	b91b      	cbnz	r3, d5f64 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d5f5c:	6823      	ldr	r3, [r4, #0]
   d5f5e:	4620      	mov	r0, r4
   d5f60:	68db      	ldr	r3, [r3, #12]
   d5f62:	4798      	blx	r3
   d5f64:	4628      	mov	r0, r5
   d5f66:	bd38      	pop	{r3, r4, r5, pc}
   d5f68:	000dd380 	.word	0x000dd380

000d5f6c <_ZN9TCPClientD0Ev>:
   d5f6c:	b510      	push	{r4, lr}
   d5f6e:	4604      	mov	r4, r0
   d5f70:	f7ff ffe2 	bl	d5f38 <_ZN9TCPClientD1Ev>
   d5f74:	4620      	mov	r0, r4
   d5f76:	211c      	movs	r1, #28
   d5f78:	f004 fda6 	bl	daac8 <_ZdlPvj>
   d5f7c:	4620      	mov	r0, r4
   d5f7e:	bd10      	pop	{r4, pc}

000d5f80 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d5f80:	b538      	push	{r3, r4, r5, lr}
   d5f82:	461d      	mov	r5, r3
    this->callback = callback;
   d5f84:	9b05      	ldr	r3, [sp, #20]
   d5f86:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
   d5f88:	2300      	movs	r3, #0

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d5f8a:	4604      	mov	r4, r0
    this->callback = callback;
    this->qoscallback = NULL;
   d5f8c:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
   d5f8e:	b102      	cbz	r2, d5f92 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
   d5f90:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
   d5f92:	b119      	cbz	r1, d5f9c <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
   d5f94:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d5f98:	f003 f944 	bl	d9224 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   d5f9c:	9b04      	ldr	r3, [sp, #16]
   d5f9e:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d5fa0:	9b06      	ldr	r3, [sp, #24]
    if (buffer != NULL)
   d5fa2:	69e0      	ldr	r0, [r4, #28]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
   d5fa4:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d5fa8:	2bff      	cmp	r3, #255	; 0xff
   d5faa:	bfb8      	it	lt
   d5fac:	23ff      	movlt	r3, #255	; 0xff
   d5fae:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   d5fb2:	b108      	cbz	r0, d5fb8 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
   d5fb4:	f7fe f877 	bl	d40a6 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   d5fb8:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   d5fbc:	f7fe f86f 	bl	d409e <_Znaj>
   d5fc0:	61e0      	str	r0, [r4, #28]
   d5fc2:	bd38      	pop	{r3, r4, r5, pc}

000d5fc4 <_ZN4MQTTC1EPctPFvS0_PhjE>:
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
   d5fc4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d5fc8:	4604      	mov	r4, r0
   d5fca:	2500      	movs	r5, #0
   d5fcc:	4617      	mov	r7, r2
   d5fce:	4698      	mov	r8, r3
   d5fd0:	460e      	mov	r6, r1
   d5fd2:	f004 fba1 	bl	da718 <_ZN9TCPClientC1Ev>
   d5fd6:	61e5      	str	r5, [r4, #28]
   d5fd8:	490a      	ldr	r1, [pc, #40]	; (d6004 <_ZN4MQTTC1EPctPFvS0_PhjE+0x40>)
   d5fda:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d5fde:	f003 f8da 	bl	d9196 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
   d5fe2:	23ff      	movs	r3, #255	; 0xff
   d5fe4:	9302      	str	r3, [sp, #8]
   d5fe6:	230f      	movs	r3, #15
   d5fe8:	9300      	str	r3, [sp, #0]
   d5fea:	4620      	mov	r0, r4
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
   d5fec:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
   d5fee:	f8cd 8004 	str.w	r8, [sp, #4]
   d5ff2:	463b      	mov	r3, r7
   d5ff4:	462a      	mov	r2, r5
   d5ff6:	4631      	mov	r1, r6
   d5ff8:	f7ff ffc2 	bl	d5f80 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
   d5ffc:	4620      	mov	r0, r4
   d5ffe:	b004      	add	sp, #16
   d6000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6004:	000dd1c2 	.word	0x000dd1c2

000d6008 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   d6008:	b510      	push	{r4, lr}
   d600a:	4604      	mov	r4, r0
    while(!_client.available()) {}
   d600c:	4620      	mov	r0, r4
   d600e:	f004 fae7 	bl	da5e0 <_ZN9TCPClient9availableEv>
   d6012:	2800      	cmp	r0, #0
   d6014:	d0fa      	beq.n	d600c <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   d6016:	4620      	mov	r0, r4
   d6018:	f004 f98b 	bl	da332 <_ZN9TCPClient4readEv>
}
   d601c:	b2c0      	uxtb	r0, r0
   d601e:	bd10      	pop	{r4, pc}

000d6020 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d6020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6024:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
   d6026:	69c4      	ldr	r4, [r0, #28]
uint8_t MQTT::readByte() {
    while(!_client.available()) {}
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d6028:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   d602a:	f7ff ffed 	bl	d6008 <_ZN4MQTT8readByteEv>
   d602e:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d6030:	69eb      	ldr	r3, [r5, #28]
   d6032:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   d6036:	f04f 0901 	mov.w	r9, #1
   d603a:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   d603e:	2700      	movs	r7, #0
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
   d6040:	464e      	mov	r6, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   d6042:	4628      	mov	r0, r5
   d6044:	f7ff ffe0 	bl	d6008 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   d6048:	69eb      	ldr	r3, [r5, #28]
   d604a:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   d604c:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   d6050:	fb13 f309 	smulbb	r3, r3, r9
   d6054:	441f      	add	r7, r3
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d6056:	1c74      	adds	r4, r6, #1
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
   d6058:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d605a:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   d605c:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   d605e:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   d6062:	d501      	bpl.n	d6068 <_ZN4MQTT10readPacketEPh+0x48>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d6064:	4626      	mov	r6, r4
   d6066:	e7ec      	b.n	d6042 <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d6068:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   d606a:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d606e:	f888 3000 	strb.w	r3, [r8]

    if (isPublish) {
   d6072:	d113      	bne.n	d609c <_ZN4MQTT10readPacketEPh+0x7c>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   d6074:	4628      	mov	r0, r5
   d6076:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d607a:	f7ff ffc5 	bl	d6008 <_ZN4MQTT8readByteEv>
   d607e:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
   d6082:	4628      	mov	r0, r5
   d6084:	1cf4      	adds	r4, r6, #3
   d6086:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d608a:	3602      	adds	r6, #2
   d608c:	f7ff ffbc 	bl	d6008 <_ZN4MQTT8readByteEv>
   d6090:	b2b6      	uxth	r6, r6
   d6092:	b2a4      	uxth	r4, r4
   d6094:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   d6098:	2302      	movs	r3, #2
   d609a:	e000      	b.n	d609e <_ZN4MQTT10readPacketEPh+0x7e>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
   d609c:	2300      	movs	r3, #0
   d609e:	1b1b      	subs	r3, r3, r4
   d60a0:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d60a2:	19a3      	adds	r3, r4, r6
   d60a4:	b29b      	uxth	r3, r3
   d60a6:	429f      	cmp	r7, r3
   d60a8:	d90b      	bls.n	d60c2 <_ZN4MQTT10readPacketEPh+0xa2>
        digit = readByte();
   d60aa:	4628      	mov	r0, r5
   d60ac:	f7ff ffac 	bl	d6008 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   d60b0:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   d60b4:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   d60b6:	bf84      	itt	hi
   d60b8:	69eb      	ldrhi	r3, [r5, #28]
   d60ba:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   d60bc:	3401      	adds	r4, #1
   d60be:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d60c0:	e7ef      	b.n	d60a2 <_ZN4MQTT10readPacketEPh+0x82>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
   d60c2:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   d60c6:	42a0      	cmp	r0, r4
   d60c8:	bf2c      	ite	cs
   d60ca:	4620      	movcs	r0, r4
   d60cc:	2000      	movcc	r0, #0
   d60ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d60d2 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d60d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d60d4:	4607      	mov	r7, r0
   d60d6:	468e      	mov	lr, r1
   d60d8:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   d60da:	461d      	mov	r5, r3
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
   d60dc:	2400      	movs	r4, #0
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d60de:	a902      	add	r1, sp, #8
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
   d60e0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d60e4:	4421      	add	r1, r4
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
   d60e6:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
   d60e8:	bf18      	it	ne
   d60ea:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
   d60ee:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d60f0:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
   d60f4:	b2e4      	uxtb	r4, r4
    } while(len > 0);
   d60f6:	2d00      	cmp	r5, #0
   d60f8:	d1f1      	bne.n	d60de <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
   d60fa:	f1c4 0304 	rsb	r3, r4, #4
   d60fe:	18d1      	adds	r1, r2, r3
   d6100:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
   d6104:	42a5      	cmp	r5, r4
   d6106:	da06      	bge.n	d6116 <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
   d6108:	1b2b      	subs	r3, r5, r4
   d610a:	a801      	add	r0, sp, #4
   d610c:	4413      	add	r3, r2
   d610e:	5c28      	ldrb	r0, [r5, r0]
   d6110:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
   d6112:	3501      	adds	r5, #1
   d6114:	e7f6      	b.n	d6104 <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   d6116:	1c72      	adds	r2, r6, #1
   d6118:	4422      	add	r2, r4
   d611a:	4638      	mov	r0, r7
   d611c:	f004 f85f 	bl	da1de <_ZN9TCPClient5writeEPKhj>
   d6120:	4605      	mov	r5, r0
   d6122:	f002 fb7f 	bl	d8824 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   d6126:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
   d6128:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   d612a:	4434      	add	r4, r6
   d612c:	b2a8      	uxth	r0, r5
}
   d612e:	1a23      	subs	r3, r4, r0
   d6130:	4258      	negs	r0, r3
   d6132:	4158      	adcs	r0, r3
   d6134:	b003      	add	sp, #12
   d6136:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6138 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d6138:	b510      	push	{r4, lr}
    buffer[0] = MQTTDISCONNECT;
   d613a:	69c3      	ldr	r3, [r0, #28]
   d613c:	22e0      	movs	r2, #224	; 0xe0
   d613e:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   d6140:	69c3      	ldr	r3, [r0, #28]
   d6142:	2200      	movs	r2, #0
   d6144:	705a      	strb	r2, [r3, #1]
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d6146:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
    buffer[1] = 0;
    _client.write(buffer,2);
   d6148:	2202      	movs	r2, #2
   d614a:	69c1      	ldr	r1, [r0, #28]
   d614c:	f004 f847 	bl	da1de <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   d6150:	4620      	mov	r0, r4
   d6152:	f004 fa2d 	bl	da5b0 <_ZN9TCPClient4stopEv>
   d6156:	f002 fb65 	bl	d8824 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   d615a:	6260      	str	r0, [r4, #36]	; 0x24
   d615c:	62a0      	str	r0, [r4, #40]	; 0x28
   d615e:	bd10      	pop	{r4, pc}

000d6160 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d6160:	3302      	adds	r3, #2
    _client.write(buffer,2);
    _client.stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   d6162:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d6164:	b29b      	uxth	r3, r3
   d6166:	460d      	mov	r5, r1
   d6168:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
   d616a:	f815 6b01 	ldrb.w	r6, [r5], #1
   d616e:	b2a4      	uxth	r4, r4
   d6170:	b13e      	cbz	r6, d6182 <_ZN4MQTT11writeStringEPKcPht+0x22>
   d6172:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
   d6176:	429f      	cmp	r7, r3
   d6178:	d903      	bls.n	d6182 <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
   d617a:	1c5c      	adds	r4, r3, #1
   d617c:	54d6      	strb	r6, [r2, r3]
   d617e:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
   d6180:	e7f2      	b.n	d6168 <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   d6182:	1b19      	subs	r1, r3, r4
   d6184:	440a      	add	r2, r1
   d6186:	1221      	asrs	r1, r4, #8
   d6188:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   d618c:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
   d6190:	4618      	mov	r0, r3
   d6192:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6194 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   d6194:	b538      	push	{r3, r4, r5, lr}
   d6196:	4605      	mov	r5, r0
    bool rc = (int)_client.connected();
   d6198:	f004 f837 	bl	da20a <_ZN9TCPClient9connectedEv>
   d619c:	2800      	cmp	r0, #0
   d619e:	bf14      	ite	ne
   d61a0:	2401      	movne	r4, #1
   d61a2:	2400      	moveq	r4, #0
    if (!rc) _client.stop();
   d61a4:	d102      	bne.n	d61ac <_ZN4MQTT11isConnectedEv+0x18>
   d61a6:	4628      	mov	r0, r5
   d61a8:	f004 fa02 	bl	da5b0 <_ZN9TCPClient4stopEv>
    return rc;
}
   d61ac:	4620      	mov	r0, r4
   d61ae:	bd38      	pop	{r3, r4, r5, pc}

000d61b0 <_ZN4MQTT9setBrokerEPct>:
    if (buffer != NULL)
      delete[] buffer;
    buffer = new uint8_t[this->maxpacketsize];
}

void MQTT::setBroker(char* domain, uint16_t port) {
   d61b0:	b570      	push	{r4, r5, r6, lr}
   d61b2:	4604      	mov	r4, r0
   d61b4:	460e      	mov	r6, r1
   d61b6:	4615      	mov	r5, r2
    if(isConnected()) {
   d61b8:	f7ff ffec 	bl	d6194 <_ZN4MQTT11isConnectedEv>
   d61bc:	b110      	cbz	r0, d61c4 <_ZN4MQTT9setBrokerEPct+0x14>
        disconnect();
   d61be:	4620      	mov	r0, r4
   d61c0:	f7ff ffba 	bl	d6138 <_ZN4MQTT10disconnectEv>
    }
    this->domain = domain;
   d61c4:	4631      	mov	r1, r6
   d61c6:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d61ca:	f003 f82b 	bl	d9224 <_ZN6StringaSEPKc>
    this->ip = NULL;
   d61ce:	2300      	movs	r3, #0
   d61d0:	64a3      	str	r3, [r4, #72]	; 0x48
    this->port = port;
   d61d2:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
   d61d6:	bd70      	pop	{r4, r5, r6, pc}

000d61d8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char *user, const char *pass) {
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   d61d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d61dc:	b087      	sub	sp, #28
   d61de:	4604      	mov	r4, r0
   d61e0:	4689      	mov	r9, r1
   d61e2:	4617      	mov	r7, r2
   d61e4:	461e      	mov	r6, r3
   d61e6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if (!isConnected()) {
   d61ea:	f7ff ffd3 	bl	d6194 <_ZN4MQTT11isConnectedEv>
   d61ee:	4605      	mov	r5, r0
   d61f0:	2800      	cmp	r0, #0
   d61f2:	f040 80bd 	bne.w	d6370 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x198>
        int result = 0;
        if (ip == NULL)
   d61f6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d61f8:	b939      	cbnz	r1, d620a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x32>
            result = _client.connect(this->domain.c_str(), this->port);
   d61fa:	4603      	mov	r3, r0
   d61fc:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d6200:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d6202:	4620      	mov	r0, r4
   d6204:	f004 f8d8 	bl	da3b8 <_ZN9TCPClient7connectEPKctm>
   d6208:	e009      	b.n	d621e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x46>
        else
            result = _client.connect(this->ip, this->port);
   d620a:	4668      	mov	r0, sp
   d620c:	f003 fce8 	bl	d9be0 <_ZN9IPAddressC1EPKh>
   d6210:	462b      	mov	r3, r5
   d6212:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d6216:	4669      	mov	r1, sp
   d6218:	4620      	mov	r0, r4
   d621a:	f004 f94f 	bl	da4bc <_ZN9TCPClient7connectE9IPAddresstm>

        if (result) {
   d621e:	2800      	cmp	r0, #0
   d6220:	f000 80a2 	beq.w	d6368 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
            nextMsgId = 1;
   d6224:	2301      	movs	r3, #1
   d6226:	8423      	strh	r3, [r4, #32]
            uint16_t length = 5;

            if (version == MQTT_V311) {
   d6228:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
   d622c:	2b04      	cmp	r3, #4
   d622e:	d115      	bne.n	d625c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x84>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d6230:	4b52      	ldr	r3, [pc, #328]	; (d637c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a4>)
   d6232:	6818      	ldr	r0, [r3, #0]
   d6234:	889a      	ldrh	r2, [r3, #4]
   d6236:	f8ad 2004 	strh.w	r2, [sp, #4]
   d623a:	9000      	str	r0, [sp, #0]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d623c:	69e2      	ldr	r2, [r4, #28]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d623e:	799b      	ldrb	r3, [r3, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d6240:	9800      	ldr	r0, [sp, #0]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d6242:	f88d 3006 	strb.w	r3, [sp, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d6246:	1d53      	adds	r3, r2, #5
   d6248:	f8c2 0005 	str.w	r0, [r2, #5]
   d624c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   d6250:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d6254:	719a      	strb	r2, [r3, #6]
   d6256:	8099      	strh	r1, [r3, #4]
                length+=sizeof(MQTT_HEADER_V311);
   d6258:	230c      	movs	r3, #12
   d625a:	e012      	b.n	d6282 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d625c:	4b48      	ldr	r3, [pc, #288]	; (d6380 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>)
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d625e:	f8d4 c01c 	ldr.w	ip, [r4, #28]
            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d6262:	6818      	ldr	r0, [r3, #0]
   d6264:	6859      	ldr	r1, [r3, #4]
   d6266:	7a1b      	ldrb	r3, [r3, #8]
   d6268:	466a      	mov	r2, sp
   d626a:	c203      	stmia	r2!, {r0, r1}
   d626c:	7013      	strb	r3, [r2, #0]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d626e:	466b      	mov	r3, sp
   d6270:	cb03      	ldmia	r3!, {r0, r1}
   d6272:	f8cc 0005 	str.w	r0, [ip, #5]
   d6276:	f8cc 1009 	str.w	r1, [ip, #9]
   d627a:	7813      	ldrb	r3, [r2, #0]
   d627c:	f88c 300d 	strb.w	r3, [ip, #13]
                length+=sizeof(MQTT_HEADER_V31);
   d6280:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
   d6282:	f1b8 0f00 	cmp.w	r8, #0
   d6286:	d00a      	beq.n	d629e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc6>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   d6288:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   d628c:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   d6290:	0152      	lsls	r2, r2, #5
   d6292:	f042 0206 	orr.w	r2, r2, #6
   d6296:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
   d629a:	b2d2      	uxtb	r2, r2
   d629c:	e000      	b.n	d62a0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc8>
            } else {
                v = 0x02;
   d629e:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
   d62a0:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
   d62a4:	b909      	cbnz	r1, d62aa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xd2>
              v = v&0xfd;
   d62a6:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
   d62aa:	b12f      	cbz	r7, d62b8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>
                v = v|0x80;

                if(pass != NULL) {
   d62ac:	b916      	cbnz	r6, d62b4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
   d62ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   d62b2:	e001      	b.n	d62b8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>

                if(pass != NULL) {
                    v = v|(0x80>>1);
   d62b4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
   d62b8:	69e1      	ldr	r1, [r4, #28]
   d62ba:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
   d62bc:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d62be:	69e1      	ldr	r1, [r4, #28]
   d62c0:	1c58      	adds	r0, r3, #1
   d62c2:	1212      	asrs	r2, r2, #8
   d62c4:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   d62c6:	1c9a      	adds	r2, r3, #2
   d62c8:	69e1      	ldr	r1, [r4, #28]
   d62ca:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d62cc:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   d62ce:	3303      	adds	r3, #3
   d62d0:	69e2      	ldr	r2, [r4, #28]
   d62d2:	4649      	mov	r1, r9
   d62d4:	4620      	mov	r0, r4
   d62d6:	f7ff ff43 	bl	d6160 <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
   d62da:	f1b8 0f00 	cmp.w	r8, #0
   d62de:	d00b      	beq.n	d62f8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
                length = writeString(willTopic, buffer, length);
   d62e0:	4603      	mov	r3, r0
   d62e2:	69e2      	ldr	r2, [r4, #28]
   d62e4:	4641      	mov	r1, r8
   d62e6:	4620      	mov	r0, r4
   d62e8:	f7ff ff3a 	bl	d6160 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   d62ec:	69e2      	ldr	r2, [r4, #28]
   d62ee:	9911      	ldr	r1, [sp, #68]	; 0x44
   d62f0:	4603      	mov	r3, r0
   d62f2:	4620      	mov	r0, r4
   d62f4:	f7ff ff34 	bl	d6160 <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
   d62f8:	b167      	cbz	r7, d6314 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                length = writeString(user,buffer,length);
   d62fa:	4603      	mov	r3, r0
   d62fc:	69e2      	ldr	r2, [r4, #28]
   d62fe:	4639      	mov	r1, r7
   d6300:	4620      	mov	r0, r4
   d6302:	f7ff ff2d 	bl	d6160 <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
   d6306:	b12e      	cbz	r6, d6314 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                    length = writeString(pass,buffer,length);
   d6308:	4603      	mov	r3, r0
   d630a:	69e2      	ldr	r2, [r4, #28]
   d630c:	4631      	mov	r1, r6
   d630e:	4620      	mov	r0, r4
   d6310:	f7ff ff26 	bl	d6160 <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
   d6314:	1f43      	subs	r3, r0, #5
   d6316:	b29b      	uxth	r3, r3
   d6318:	69e2      	ldr	r2, [r4, #28]
   d631a:	2110      	movs	r1, #16
   d631c:	4620      	mov	r0, r4
   d631e:	f7ff fed8 	bl	d60d2 <_ZN4MQTT5writeEhPht>
   d6322:	f002 fa7f 	bl	d8824 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!_client.available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d6326:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
   d632a:	6260      	str	r0, [r4, #36]	; 0x24
   d632c:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!_client.available()) {
   d632e:	4620      	mov	r0, r4
   d6330:	f004 f956 	bl	da5e0 <_ZN9TCPClient9availableEv>
   d6334:	b940      	cbnz	r0, d6348 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x170>
   d6336:	f002 fa75 	bl	d8824 <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d633a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d633c:	1ac0      	subs	r0, r0, r3
   d633e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d6340:	4373      	muls	r3, r6
   d6342:	4298      	cmp	r0, r3
   d6344:	d9f3      	bls.n	d632e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
   d6346:	e00f      	b.n	d6368 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                    _client.stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d6348:	4669      	mov	r1, sp
   d634a:	4620      	mov	r0, r4
   d634c:	f7ff fe68 	bl	d6020 <_ZN4MQTT10readPacketEPh>

            if (len == 4) {
   d6350:	2804      	cmp	r0, #4
   d6352:	d109      	bne.n	d6368 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                if (buffer[3] == CONN_ACCEPT) {
   d6354:	69e3      	ldr	r3, [r4, #28]
   d6356:	78de      	ldrb	r6, [r3, #3]
   d6358:	b936      	cbnz	r6, d6368 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
   d635a:	f002 fa63 	bl	d8824 <HAL_Timer_Get_Milli_Seconds>
                    lastInActivity = millis();
                    pingOutstanding = false;
                    debug_print(" Connect success\n");
                    return true;
   d635e:	2501      	movs	r5, #1
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == CONN_ACCEPT) {
                    lastInActivity = millis();
   d6360:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   d6362:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
   d6366:	e004      	b.n	d6372 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
                    // check EMQTT_CONNACK_RESPONSE code.
                    debug_print(" Connect fail. code = [%d]\n", buffer[3]);
                }
            }
        }
        _client.stop();
   d6368:	4620      	mov	r0, r4
   d636a:	f004 f921 	bl	da5b0 <_ZN9TCPClient4stopEv>
   d636e:	e000      	b.n	d6372 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
    }
    return false;
   d6370:	2500      	movs	r5, #0
}
   d6372:	4628      	mov	r0, r5
   d6374:	b007      	add	sp, #28
   d6376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d637a:	bf00      	nop
   d637c:	000dd0b8 	.word	0x000dd0b8
   d6380:	000dd0bf 	.word	0x000dd0bf

000d6384 <_ZN4MQTT7connectEPKc>:
void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}


bool MQTT::connect(const char *id) {
   d6384:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   d6386:	2304      	movs	r3, #4
   d6388:	9305      	str	r3, [sp, #20]
   d638a:	2301      	movs	r3, #1
   d638c:	9304      	str	r3, [sp, #16]
   d638e:	2300      	movs	r3, #0
   d6390:	9303      	str	r3, [sp, #12]
   d6392:	9302      	str	r3, [sp, #8]
   d6394:	9301      	str	r3, [sp, #4]
   d6396:	9300      	str	r3, [sp, #0]
   d6398:	461a      	mov	r2, r3
   d639a:	f7ff ff1d 	bl	d61d8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   d639e:	b007      	add	sp, #28
   d63a0:	f85d fb04 	ldr.w	pc, [sp], #4

000d63a4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d63a4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d63a8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   d63aa:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d63ae:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d63b2:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
   d63b6:	4604      	mov	r4, r0
   d63b8:	468b      	mov	fp, r1
   d63ba:	4691      	mov	r9, r2
   d63bc:	469a      	mov	sl, r3
    if (isConnected()) {
   d63be:	f7ff fee9 	bl	d6194 <_ZN4MQTT11isConnectedEv>
   d63c2:	2800      	cmp	r0, #0
   d63c4:	d04c      	beq.n	d6460 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xbc>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, this->maxpacketsize);
   d63c6:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   d63ca:	69e0      	ldr	r0, [r4, #28]
   d63cc:	2100      	movs	r1, #0
   d63ce:	f005 fb33 	bl	dba38 <memset>

        length = writeString(topic, buffer, length);
   d63d2:	2305      	movs	r3, #5
   d63d4:	69e2      	ldr	r2, [r4, #28]
   d63d6:	4659      	mov	r1, fp
   d63d8:	4620      	mov	r0, r4
   d63da:	f7ff fec1 	bl	d6160 <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
   d63de:	1e6b      	subs	r3, r5, #1
   d63e0:	2b01      	cmp	r3, #1
   d63e2:	d812      	bhi.n	d640a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
            nextMsgId += 1;
   d63e4:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d63e6:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, this->maxpacketsize);

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
   d63e8:	3301      	adds	r3, #1
   d63ea:	b29b      	uxth	r3, r3
   d63ec:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d63ee:	121b      	asrs	r3, r3, #8
   d63f0:	5413      	strb	r3, [r2, r0]
   d63f2:	1c41      	adds	r1, r0, #1
   d63f4:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
   d63f6:	69e3      	ldr	r3, [r4, #28]
   d63f8:	8c22      	ldrh	r2, [r4, #32]
   d63fa:	545a      	strb	r2, [r3, r1]
   d63fc:	3002      	adds	r0, #2
   d63fe:	b280      	uxth	r0, r0
            if (messageid != NULL)
   d6400:	b11e      	cbz	r6, d640a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
                *messageid = nextMsgId++;
   d6402:	8c23      	ldrh	r3, [r4, #32]
   d6404:	1c5a      	adds	r2, r3, #1
   d6406:	8422      	strh	r2, [r4, #32]
   d6408:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d640a:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d640c:	b291      	uxth	r1, r2
   d640e:	1883      	adds	r3, r0, r2
   d6410:	458a      	cmp	sl, r1
   d6412:	b29b      	uxth	r3, r3
   d6414:	d90a      	bls.n	d642c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
   d6416:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
   d641a:	429e      	cmp	r6, r3
   d641c:	f102 0201 	add.w	r2, r2, #1
   d6420:	d904      	bls.n	d642c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
            buffer[length++] = payload[i];
   d6422:	f819 6001 	ldrb.w	r6, [r9, r1]
   d6426:	69e1      	ldr	r1, [r4, #28]
   d6428:	54ce      	strb	r6, [r1, r3]
   d642a:	e7ef      	b.n	d640c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x68>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
   d642c:	f1b8 0f00 	cmp.w	r8, #0
   d6430:	bf0c      	ite	eq
   d6432:	2130      	moveq	r1, #48	; 0x30
   d6434:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
   d6436:	b10f      	cbz	r7, d643c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x98>
            header |= DUP_FLAG_ON_MASK;
   d6438:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
   d643c:	2d02      	cmp	r5, #2
   d643e:	d102      	bne.n	d6446 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa2>
            header |= MQTTQOS2_HEADER_MASK;
   d6440:	f041 0104 	orr.w	r1, r1, #4
   d6444:	e003      	b.n	d644e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xaa>
        else if (qos == QOS1)
   d6446:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   d6448:	bf08      	it	eq
   d644a:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d644e:	3b05      	subs	r3, #5
   d6450:	69e2      	ldr	r2, [r4, #28]
   d6452:	b29b      	uxth	r3, r3
   d6454:	4620      	mov	r0, r4
    }
    return false;
}
   d6456:	b001      	add	sp, #4
   d6458:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d645c:	f7ff be39 	b.w	d60d2 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d6460:	b001      	add	sp, #4
   d6462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6466 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   d6466:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   d6468:	9c08      	ldr	r4, [sp, #32]
   d646a:	9403      	str	r4, [sp, #12]
   d646c:	2400      	movs	r4, #0
   d646e:	9402      	str	r4, [sp, #8]
   d6470:	f89d 401c 	ldrb.w	r4, [sp, #28]
   d6474:	9401      	str	r4, [sp, #4]
   d6476:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d647a:	9400      	str	r4, [sp, #0]
   d647c:	f7ff ff92 	bl	d63a4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   d6480:	b004      	add	sp, #16
   d6482:	bd10      	pop	{r4, pc}

000d6484 <_ZN4MQTT7publishEPKcPKhj>:

bool MQTT::publish(const char * topic, const char* payload, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, (uint8_t*)payload, strlen(payload), false, qos, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength) {
   d6484:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, false, QOS0, NULL);
   d6486:	2400      	movs	r4, #0
   d6488:	9402      	str	r4, [sp, #8]
   d648a:	9401      	str	r4, [sp, #4]
   d648c:	9400      	str	r4, [sp, #0]
   d648e:	f7ff ffea 	bl	d6466 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   d6492:	b004      	add	sp, #16
   d6494:	bd10      	pop	{r4, pc}

000d6496 <_ZN4MQTT14publishReleaseEt>:
        return write(header, buffer, length-5);
    }
    return false;
}

bool MQTT::publishRelease(uint16_t messageid) {
   d6496:	b538      	push	{r3, r4, r5, lr}
   d6498:	4604      	mov	r4, r0
   d649a:	460d      	mov	r5, r1
    if (isConnected()) {
   d649c:	f7ff fe7a 	bl	d6194 <_ZN4MQTT11isConnectedEv>
   d64a0:	b190      	cbz	r0, d64c8 <_ZN4MQTT14publishReleaseEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   d64a2:	69e3      	ldr	r3, [r4, #28]
   d64a4:	2262      	movs	r2, #98	; 0x62
   d64a6:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d64a8:	69e3      	ldr	r3, [r4, #28]
   d64aa:	2202      	movs	r2, #2
   d64ac:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d64ae:	69e3      	ldr	r3, [r4, #28]
   d64b0:	122a      	asrs	r2, r5, #8
   d64b2:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d64b4:	69e3      	ldr	r3, [r4, #28]
   d64b6:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
   d64b8:	2204      	movs	r2, #4
   d64ba:	69e1      	ldr	r1, [r4, #28]
   d64bc:	4620      	mov	r0, r4
   d64be:	f003 fe8e 	bl	da1de <_ZN9TCPClient5writeEPKhj>
   d64c2:	3000      	adds	r0, #0
   d64c4:	bf18      	it	ne
   d64c6:	2001      	movne	r0, #1
    }
    return false;
}
   d64c8:	bd38      	pop	{r3, r4, r5, pc}

000d64ca <_ZN4MQTT15publishCompleteEt>:

bool MQTT::publishComplete(uint16_t messageid) {
   d64ca:	b538      	push	{r3, r4, r5, lr}
   d64cc:	4604      	mov	r4, r0
   d64ce:	460d      	mov	r5, r1
    if (isConnected()) {
   d64d0:	f7ff fe60 	bl	d6194 <_ZN4MQTT11isConnectedEv>
   d64d4:	b190      	cbz	r0, d64fc <_ZN4MQTT15publishCompleteEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   d64d6:	69e3      	ldr	r3, [r4, #28]
   d64d8:	2272      	movs	r2, #114	; 0x72
   d64da:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d64dc:	69e3      	ldr	r3, [r4, #28]
   d64de:	2202      	movs	r2, #2
   d64e0:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d64e2:	69e3      	ldr	r3, [r4, #28]
   d64e4:	122a      	asrs	r2, r5, #8
   d64e6:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d64e8:	69e3      	ldr	r3, [r4, #28]
   d64ea:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
   d64ec:	2204      	movs	r2, #4
   d64ee:	69e1      	ldr	r1, [r4, #28]
   d64f0:	4620      	mov	r0, r4
   d64f2:	f003 fe74 	bl	da1de <_ZN9TCPClient5writeEPKhj>
   d64f6:	3000      	adds	r0, #0
   d64f8:	bf18      	it	ne
   d64fa:	2001      	movne	r0, #1
    }
    return false;
}
   d64fc:	bd38      	pop	{r3, r4, r5, pc}

000d64fe <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
   d64fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6502:	b083      	sub	sp, #12
   d6504:	af00      	add	r7, sp, #0
   d6506:	4604      	mov	r4, r0
    if (isConnected()) {
   d6508:	f7ff fe44 	bl	d6194 <_ZN4MQTT11isConnectedEv>
   d650c:	4681      	mov	r9, r0
   d650e:	2800      	cmp	r0, #0
   d6510:	f000 80f6 	beq.w	d6700 <_ZN4MQTT4loopEv+0x202>
   d6514:	f002 f986 	bl	d8824 <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   d6518:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d651a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d651e:	4353      	muls	r3, r2
   d6520:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   d6522:	1a82      	subs	r2, r0, r2
   d6524:	429a      	cmp	r2, r3
   d6526:	4605      	mov	r5, r0
   d6528:	d803      	bhi.n	d6532 <_ZN4MQTT4loopEv+0x34>
   d652a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d652c:	1a82      	subs	r2, r0, r2
   d652e:	4293      	cmp	r3, r2
   d6530:	d217      	bcs.n	d6562 <_ZN4MQTT4loopEv+0x64>
            if (pingOutstanding) {
   d6532:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d6536:	b12b      	cbz	r3, d6544 <_ZN4MQTT4loopEv+0x46>
                _client.stop();
   d6538:	4620      	mov	r0, r4
   d653a:	f004 f839 	bl	da5b0 <_ZN9TCPClient4stopEv>
                return false;
   d653e:	f04f 0900 	mov.w	r9, #0
   d6542:	e0dd      	b.n	d6700 <_ZN4MQTT4loopEv+0x202>
            } else {
                buffer[0] = MQTTPINGREQ;
   d6544:	69e2      	ldr	r2, [r4, #28]
   d6546:	21c0      	movs	r1, #192	; 0xc0
   d6548:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   d654a:	69e2      	ldr	r2, [r4, #28]
   d654c:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   d654e:	69e1      	ldr	r1, [r4, #28]
   d6550:	2202      	movs	r2, #2
   d6552:	4620      	mov	r0, r4
   d6554:	f003 fe43 	bl	da1de <_ZN9TCPClient5writeEPKhj>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
   d6558:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                _client.write(buffer,2);
                lastOutActivity = t;
   d655a:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
   d655c:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
   d655e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (_client.available()) {
   d6562:	4620      	mov	r0, r4
   d6564:	f004 f83c 	bl	da5e0 <_ZN9TCPClient9availableEv>
   d6568:	2800      	cmp	r0, #0
   d656a:	f000 80c9 	beq.w	d6700 <_ZN4MQTT4loopEv+0x202>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d656e:	1df9      	adds	r1, r7, #7
   d6570:	4620      	mov	r0, r4
   d6572:	f7ff fd55 	bl	d6020 <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
   d6576:	4602      	mov	r2, r0
   d6578:	2800      	cmp	r0, #0
   d657a:	f000 80c1 	beq.w	d6700 <_ZN4MQTT4loopEv+0x202>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
   d657e:	69e3      	ldr	r3, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
   d6580:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   d6582:	7818      	ldrb	r0, [r3, #0]
   d6584:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   d6588:	2930      	cmp	r1, #48	; 0x30
   d658a:	d17d      	bne.n	d6688 <_ZN4MQTT4loopEv+0x18a>
                    if (callback) {
   d658c:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
   d6590:	f1bb 0f00 	cmp.w	fp, #0
   d6594:	f000 80b4 	beq.w	d6700 <_ZN4MQTT4loopEv+0x202>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d6598:	f897 c007 	ldrb.w	ip, [r7, #7]
   d659c:	eb03 000c 	add.w	r0, r3, ip
              							_client.write(buffer, 4);
              							lastOutActivity = t;
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
   d65a0:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d65a2:	7881      	ldrb	r1, [r0, #2]
   d65a4:	f890 e001 	ldrb.w	lr, [r0, #1]
   d65a8:	eb01 2e0e 	add.w	lr, r1, lr, lsl #8
   d65ac:	fa1f fe8e 	uxth.w	lr, lr
                        char topic[tl+1];
   d65b0:	f10e 0108 	add.w	r1, lr, #8
   d65b4:	f021 0107 	bic.w	r1, r1, #7
   d65b8:	ebad 0d01 	sub.w	sp, sp, r1
   d65bc:	4668      	mov	r0, sp
   d65be:	2100      	movs	r1, #0
                        for (uint16_t i=0;i<tl;i++) {
   d65c0:	b28e      	uxth	r6, r1
   d65c2:	45b6      	cmp	lr, r6
   d65c4:	d906      	bls.n	d65d4 <_ZN4MQTT4loopEv+0xd6>
                            topic[i] = buffer[llen+3+i];
   d65c6:	eb0c 0601 	add.w	r6, ip, r1
   d65ca:	441e      	add	r6, r3
   d65cc:	78f6      	ldrb	r6, [r6, #3]
   d65ce:	5446      	strb	r6, [r0, r1]
   d65d0:	3101      	adds	r1, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
   d65d2:	e7f5      	b.n	d65c0 <_ZN4MQTT4loopEv+0xc2>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
   d65d4:	2100      	movs	r1, #0
   d65d6:	f800 100e 	strb.w	r1, [r0, lr]
   d65da:	781e      	ldrb	r6, [r3, #0]
   d65dc:	f006 0606 	and.w	r6, r6, #6
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d65e0:	2e02      	cmp	r6, #2
   d65e2:	f10c 0103 	add.w	r1, ip, #3
   d65e6:	ebcc 0202 	rsb	r2, ip, r2
   d65ea:	d11e      	bne.n	d662a <_ZN4MQTT4loopEv+0x12c>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d65ec:	4471      	add	r1, lr
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d65ee:	ebce 0202 	rsb	r2, lr, r2
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d65f2:	f813 8001 	ldrb.w	r8, [r3, r1]
   d65f6:	4419      	add	r1, r3
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d65f8:	3a05      	subs	r2, #5
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d65fa:	7849      	ldrb	r1, [r1, #1]
   d65fc:	eb01 2808 	add.w	r8, r1, r8, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d6600:	f10c 0105 	add.w	r1, ip, #5
   d6604:	4471      	add	r1, lr
   d6606:	4419      	add	r1, r3
   d6608:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   d660a:	69e3      	ldr	r3, [r4, #28]
   d660c:	2240      	movs	r2, #64	; 0x40
   d660e:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   d6610:	69e3      	ldr	r3, [r4, #28]
   d6612:	705e      	strb	r6, [r3, #1]
                            buffer[2] = (msgId >> 8);
   d6614:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d6616:	fa1f f888 	uxth.w	r8, r8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
   d661a:	ea4f 2228 	mov.w	r2, r8, asr #8
   d661e:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   d6620:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
   d6622:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
   d6624:	f883 8003 	strb.w	r8, [r3, #3]
   d6628:	e020      	b.n	d666c <_ZN4MQTT4loopEv+0x16e>
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   d662a:	2e04      	cmp	r6, #4
   d662c:	d124      	bne.n	d6678 <_ZN4MQTT4loopEv+0x17a>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d662e:	4471      	add	r1, lr
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d6630:	ebce 0202 	rsb	r2, lr, r2
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d6634:	f813 8001 	ldrb.w	r8, [r3, r1]
   d6638:	4419      	add	r1, r3
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d663a:	3a05      	subs	r2, #5
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d663c:	7849      	ldrb	r1, [r1, #1]
   d663e:	eb01 2808 	add.w	r8, r1, r8, lsl #8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d6642:	f10c 0105 	add.w	r1, ip, #5
   d6646:	4471      	add	r1, lr
   d6648:	4419      	add	r1, r3
   d664a:	47d8      	blx	fp

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
   d664c:	69e3      	ldr	r3, [r4, #28]
   d664e:	2250      	movs	r2, #80	; 0x50
   d6650:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
   d6652:	69e3      	ldr	r3, [r4, #28]
   d6654:	2202      	movs	r2, #2
   d6656:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
   d6658:	69e3      	ldr	r3, [r4, #28]
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d665a:	fa1f f888 	uxth.w	r8, r8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
   d665e:	ea4f 2228 	mov.w	r2, r8, asr #8
   d6662:	709a      	strb	r2, [r3, #2]
              							buffer[3] = (msgId & 0xFF);
   d6664:	69e3      	ldr	r3, [r4, #28]
              							_client.write(buffer, 4);
   d6666:	4632      	mov	r2, r6
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
              							buffer[3] = (msgId & 0xFF);
   d6668:	f883 8003 	strb.w	r8, [r3, #3]
              							_client.write(buffer, 4);
   d666c:	69e1      	ldr	r1, [r4, #28]
   d666e:	4620      	mov	r0, r4
   d6670:	f003 fdb5 	bl	da1de <_ZN9TCPClient5writeEPKhj>
              							lastOutActivity = t;
   d6674:	6265      	str	r5, [r4, #36]	; 0x24
   d6676:	e005      	b.n	d6684 <_ZN4MQTT4loopEv+0x186>
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
   d6678:	3a03      	subs	r2, #3
   d667a:	4471      	add	r1, lr
   d667c:	ebce 0202 	rsb	r2, lr, r2
   d6680:	4419      	add	r1, r3
   d6682:	47d8      	blx	fp
   d6684:	46d5      	mov	sp, sl
   d6686:	e03b      	b.n	d6700 <_ZN4MQTT4loopEv+0x202>
                        }
                    }
                } else if (type == MQTTPUBREC) {
   d6688:	2950      	cmp	r1, #80	; 0x50
   d668a:	d108      	bne.n	d669e <_ZN4MQTT4loopEv+0x1a0>
                    // check for the situation that QoS2 receive PUBREC, should return PUBREL
                    msgId = (buffer[2] << 8) + buffer[3];
                    this->publishRelease(msgId);
   d668c:	7899      	ldrb	r1, [r3, #2]
   d668e:	78db      	ldrb	r3, [r3, #3]
   d6690:	eb03 2101 	add.w	r1, r3, r1, lsl #8
   d6694:	b289      	uxth	r1, r1
   d6696:	4620      	mov	r0, r4
   d6698:	f7ff fefd 	bl	d6496 <_ZN4MQTT14publishReleaseEt>
   d669c:	e030      	b.n	d6700 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBACK) {
   d669e:	2940      	cmp	r1, #64	; 0x40
   d66a0:	d00c      	beq.n	d66bc <_ZN4MQTT4loopEv+0x1be>
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
                        }
                    }
                } else if (type == MQTTPUBREL) {
   d66a2:	2960      	cmp	r1, #96	; 0x60
   d66a4:	d108      	bne.n	d66b8 <_ZN4MQTT4loopEv+0x1ba>
                  msgId = (buffer[2] << 8) + buffer[3];
                  this->publishComplete(msgId);
   d66a6:	7899      	ldrb	r1, [r3, #2]
   d66a8:	78db      	ldrb	r3, [r3, #3]
   d66aa:	eb03 2101 	add.w	r1, r3, r1, lsl #8
   d66ae:	b289      	uxth	r1, r1
   d66b0:	4620      	mov	r0, r4
   d66b2:	f7ff ff0a 	bl	d64ca <_ZN4MQTT15publishCompleteEt>
   d66b6:	e023      	b.n	d6700 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBCOMP) {
   d66b8:	2970      	cmp	r1, #112	; 0x70
   d66ba:	d10d      	bne.n	d66d8 <_ZN4MQTT4loopEv+0x1da>
                  if (qoscallback) {
   d66bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d66be:	b1f9      	cbz	r1, d6700 <_ZN4MQTT4loopEv+0x202>
                      // msgId only present for QOS==0
                      if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   d66c0:	2a04      	cmp	r2, #4
   d66c2:	d11d      	bne.n	d6700 <_ZN4MQTT4loopEv+0x202>
   d66c4:	f010 0f06 	tst.w	r0, #6
   d66c8:	d11a      	bne.n	d6700 <_ZN4MQTT4loopEv+0x202>
                          msgId = (buffer[2]<<8)+buffer[3];
                          this->qoscallback(msgId);
   d66ca:	7898      	ldrb	r0, [r3, #2]
   d66cc:	78db      	ldrb	r3, [r3, #3]
   d66ce:	eb03 2000 	add.w	r0, r3, r0, lsl #8
   d66d2:	b280      	uxth	r0, r0
   d66d4:	4788      	blx	r1
   d66d6:	e013      	b.n	d6700 <_ZN4MQTT4loopEv+0x202>
                      }
                  }
                } else if (type == MQTTSUBACK) {
   d66d8:	2990      	cmp	r1, #144	; 0x90
   d66da:	d011      	beq.n	d6700 <_ZN4MQTT4loopEv+0x202>
                    // if something...
                } else if (type == MQTTPINGREQ) {
   d66dc:	29c0      	cmp	r1, #192	; 0xc0
   d66de:	d10a      	bne.n	d66f6 <_ZN4MQTT4loopEv+0x1f8>
                    buffer[0] = MQTTPINGRESP;
   d66e0:	22d0      	movs	r2, #208	; 0xd0
   d66e2:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   d66e4:	69e3      	ldr	r3, [r4, #28]
   d66e6:	2200      	movs	r2, #0
   d66e8:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   d66ea:	69e1      	ldr	r1, [r4, #28]
   d66ec:	2202      	movs	r2, #2
   d66ee:	4620      	mov	r0, r4
   d66f0:	f003 fd75 	bl	da1de <_ZN9TCPClient5writeEPKhj>
   d66f4:	e004      	b.n	d6700 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPINGRESP) {
   d66f6:	29d0      	cmp	r1, #208	; 0xd0
                    pingOutstanding = false;
   d66f8:	bf04      	itt	eq
   d66fa:	2300      	moveq	r3, #0
   d66fc:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
            }
        }
        return true;
    }
    return false;
}
   d6700:	4648      	mov	r0, r9
   d6702:	370c      	adds	r7, #12
   d6704:	46bd      	mov	sp, r7
   d6706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d670a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
}

bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   d670a:	b570      	push	{r4, r5, r6, lr}
   d670c:	4604      	mov	r4, r0
   d670e:	460e      	mov	r6, r1
   d6710:	4615      	mov	r5, r2

    if (isConnected()) {
   d6712:	f7ff fd3f 	bl	d6194 <_ZN4MQTT11isConnectedEv>
   d6716:	b1e8      	cbz	r0, d6754 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4a>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
   d6718:	8c23      	ldrh	r3, [r4, #32]
   d671a:	3301      	adds	r3, #1
   d671c:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   d671e:	b903      	cbnz	r3, d6722 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x18>
            nextMsgId = 1;
   d6720:	2301      	movs	r3, #1
   d6722:	8423      	strh	r3, [r4, #32]
        }
        buffer[length++] = (nextMsgId >> 8);
   d6724:	8c23      	ldrh	r3, [r4, #32]
   d6726:	69e2      	ldr	r2, [r4, #28]
   d6728:	121b      	asrs	r3, r3, #8
   d672a:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   d672c:	69e3      	ldr	r3, [r4, #28]
   d672e:	8c22      	ldrh	r2, [r4, #32]
   d6730:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   d6732:	69e2      	ldr	r2, [r4, #28]
   d6734:	4631      	mov	r1, r6
   d6736:	2307      	movs	r3, #7
   d6738:	4620      	mov	r0, r4
   d673a:	f7ff fd11 	bl	d6160 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   d673e:	69e3      	ldr	r3, [r4, #28]
   d6740:	541d      	strb	r5, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d6742:	1f03      	subs	r3, r0, #4
   d6744:	69e2      	ldr	r2, [r4, #28]
   d6746:	4620      	mov	r0, r4
   d6748:	b29b      	uxth	r3, r3
   d674a:	2182      	movs	r1, #130	; 0x82
    }
    return false;
}
   d674c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d6750:	f7ff bcbf 	b.w	d60d2 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d6754:	bd70      	pop	{r4, r5, r6, pc}

000d6756 <_ZN4MQTT9subscribeEPKc>:
    lastOutActivity = millis();
    return (rc == 1+llen+length);
}

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
   d6756:	2200      	movs	r2, #0
   d6758:	f7ff bfd7 	b.w	d670a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000d675c <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
   d675c:	b510      	push	{r4, lr}
   d675e:	4604      	mov	r4, r0
    if (isConnected()) {
   d6760:	f7ff fd18 	bl	d6194 <_ZN4MQTT11isConnectedEv>
   d6764:	b110      	cbz	r0, d676c <_ZN4MQTTD1Ev+0x10>
        disconnect();
   d6766:	4620      	mov	r0, r4
   d6768:	f7ff fce6 	bl	d6138 <_ZN4MQTT10disconnectEv>
    }

    if (buffer != NULL)
   d676c:	69e0      	ldr	r0, [r4, #28]
   d676e:	b108      	cbz	r0, d6774 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
   d6770:	f7fd fc99 	bl	d40a6 <_ZdaPv>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
   d6774:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d6778:	f002 fcc6 	bl	d9108 <_ZN6StringD1Ev>
   d677c:	4620      	mov	r0, r4
   d677e:	f7ff fbdb 	bl	d5f38 <_ZN9TCPClientD1Ev>
        disconnect();
    }

    if (buffer != NULL)
      delete[] buffer;
}
   d6782:	4620      	mov	r0, r4
   d6784:	bd10      	pop	{r4, pc}

000d6786 <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
   d6786:	f001 bf85 	b.w	d8694 <HAL_Pin_Map>

000d678a <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d678a:	f001 bf83 	b.w	d8694 <HAL_Pin_Map>

000d678e <_GLOBAL__sub_I__ZN7istream3getEv>:
   d678e:	f001 bf81 	b.w	d8694 <HAL_Pin_Map>

000d6792 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d6792:	b510      	push	{r4, lr}
   d6794:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d6796:	3024      	adds	r0, #36	; 0x24
   d6798:	f000 ff9c 	bl	d76d4 <_ZN8FatCache4syncEv>
   d679c:	b128      	cbz	r0, d67aa <_ZN9FatVolume9cacheSyncEv+0x18>
   d679e:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d67a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d67a6:	f000 bf95 	b.w	d76d4 <_ZN8FatCache4syncEv>
  }
   d67aa:	bd10      	pop	{r4, pc}

000d67ac <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d67ac:	1e41      	subs	r1, r0, #1
   d67ae:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d67b2:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d67b4:	0843      	lsrs	r3, r0, #1
   d67b6:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d67ba:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d67be:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d67c2:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d67c4:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d67c6:	d1f5      	bne.n	d67b4 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d67c8:	4770      	bx	lr

000d67ca <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d67ca:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   d67cc:	68cb      	ldr	r3, [r1, #12]
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d67ce:	4604      	mov	r4, r0
   d67d0:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   d67d2:	b923      	cbnz	r3, d67de <_ZN7FatFile11openClusterEPS_+0x14>
    return openRoot(file->m_vol);
   d67d4:	6889      	ldr	r1, [r1, #8]
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   d67d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
   d67da:	f000 bc08 	b.w	d6fee <_ZN7FatFile8openRootEP9FatVolume>
  }
  memset(this, 0, sizeof(FatFile));
   d67de:	2224      	movs	r2, #36	; 0x24
   d67e0:	2100      	movs	r1, #0
   d67e2:	f005 f929 	bl	dba38 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   d67e6:	2310      	movs	r3, #16
  m_flags = F_READ;
   d67e8:	2001      	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attr = FILE_ATTR_SUBDIR;
   d67ea:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   d67ec:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   d67ee:	68ab      	ldr	r3, [r5, #8]
   d67f0:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   d67f2:	68eb      	ldr	r3, [r5, #12]
   d67f4:	6223      	str	r3, [r4, #32]
  return true;
}
   d67f6:	bd38      	pop	{r3, r4, r5, pc}

000d67f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d67f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d67fc:	7803      	ldrb	r3, [r0, #0]
   d67fe:	2b20      	cmp	r3, #32
   d6800:	f100 0401 	add.w	r4, r0, #1
   d6804:	d101      	bne.n	d680a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d6806:	4620      	mov	r0, r4
   d6808:	e7f8      	b.n	d67fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d680a:	4f70      	ldr	r7, [pc, #448]	; (d69cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d680c:	6088      	str	r0, [r1, #8]
   d680e:	4605      	mov	r5, r0
   d6810:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d6812:	462e      	mov	r6, r5
   d6814:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d6818:	b30b      	cbz	r3, d685e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d681a:	2b2f      	cmp	r3, #47	; 0x2f
   d681c:	d101      	bne.n	d6822 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d681e:	1903      	adds	r3, r0, r4
   d6820:	e017      	b.n	d6852 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6822:	2b5c      	cmp	r3, #92	; 0x5c
   d6824:	d102      	bne.n	d682c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d6826:	2000      	movs	r0, #0
   d6828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d682c:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d6830:	b2e4      	uxtb	r4, r4
   d6832:	2c1d      	cmp	r4, #29
   d6834:	d803      	bhi.n	d683e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d6836:	fa27 f404 	lsr.w	r4, r7, r4
   d683a:	07e4      	lsls	r4, r4, #31
   d683c:	d4f3      	bmi.n	d6826 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d683e:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d6842:	2c3c      	cmp	r4, #60	; 0x3c
   d6844:	d0ef      	beq.n	d6826 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d6846:	3b20      	subs	r3, #32
   d6848:	2b5e      	cmp	r3, #94	; 0x5e
   d684a:	d9e1      	bls.n	d6810 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d684c:	e7eb      	b.n	d6826 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d684e:	2d2f      	cmp	r5, #47	; 0x2f
   d6850:	d105      	bne.n	d685e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d6852:	461e      	mov	r6, r3
   d6854:	f813 5b01 	ldrb.w	r5, [r3], #1
   d6858:	2d20      	cmp	r5, #32
   d685a:	d1f8      	bne.n	d684e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d685c:	e7f9      	b.n	d6852 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d685e:	6016      	str	r6, [r2, #0]
   d6860:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d6862:	4298      	cmp	r0, r3
   d6864:	ebc0 0803 	rsb	r8, r0, r3
   d6868:	d009      	beq.n	d687e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d686a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d686e:	2a2e      	cmp	r2, #46	; 0x2e
   d6870:	d0f7      	beq.n	d6862 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d6872:	2a20      	cmp	r2, #32
   d6874:	d0f5      	beq.n	d6862 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d6876:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d687a:	dcd4      	bgt.n	d6826 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d687c:	e001      	b.n	d6882 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d687e:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d6882:	f8c1 8004 	str.w	r8, [r1, #4]
   d6886:	f101 030c 	add.w	r3, r1, #12
   d688a:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d688e:	2420      	movs	r4, #32
   d6890:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d6894:	4293      	cmp	r3, r2
   d6896:	d1fb      	bne.n	d6890 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d6898:	4603      	mov	r3, r0
   d689a:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d689c:	f813 4b01 	ldrb.w	r4, [r3], #1
   d68a0:	2c2e      	cmp	r4, #46	; 0x2e
   d68a2:	d0fa      	beq.n	d689a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d68a4:	2c20      	cmp	r4, #32
   d68a6:	d0f8      	beq.n	d689a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d68a8:	fab2 f482 	clz	r4, r2
   d68ac:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d68ae:	f108 36ff 	add.w	r6, r8, #4294967295
   d68b2:	1c73      	adds	r3, r6, #1
   d68b4:	d107      	bne.n	d68c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d68b6:	2700      	movs	r7, #0
   d68b8:	f04f 0e07 	mov.w	lr, #7
   d68bc:	463d      	mov	r5, r7
   d68be:	46ba      	mov	sl, r7
   d68c0:	f04f 0908 	mov.w	r9, #8
   d68c4:	e009      	b.n	d68da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d68c6:	5d83      	ldrb	r3, [r0, r6]
   d68c8:	2b2e      	cmp	r3, #46	; 0x2e
   d68ca:	d0f4      	beq.n	d68b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d68cc:	3e01      	subs	r6, #1
   d68ce:	e7f0      	b.n	d68b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d68d0:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d68d2:	2b20      	cmp	r3, #32
   d68d4:	d104      	bne.n	d68e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d68d6:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d68d8:	3201      	adds	r2, #1
   d68da:	4542      	cmp	r2, r8
   d68dc:	dbf8      	blt.n	d68d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d68de:	e04b      	b.n	d6978 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d68e0:	2b2e      	cmp	r3, #46	; 0x2e
   d68e2:	d102      	bne.n	d68ea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d68e4:	42b2      	cmp	r2, r6
   d68e6:	d1f6      	bne.n	d68d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d68e8:	e003      	b.n	d68f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d68ea:	2b22      	cmp	r3, #34	; 0x22
   d68ec:	d017      	beq.n	d691e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d68ee:	2b7c      	cmp	r3, #124	; 0x7c
   d68f0:	d015      	beq.n	d691e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d68f2:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d68f6:	f1bc 0f05 	cmp.w	ip, #5
   d68fa:	d801      	bhi.n	d6900 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d68fc:	2b2d      	cmp	r3, #45	; 0x2d
   d68fe:	d10e      	bne.n	d691e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d6900:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d6904:	f1bc 0f05 	cmp.w	ip, #5
   d6908:	d909      	bls.n	d691e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d690a:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d690e:	f1bc 0f02 	cmp.w	ip, #2
   d6912:	d904      	bls.n	d691e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d6914:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d6918:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d691c:	d902      	bls.n	d6924 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d691e:	42b2      	cmp	r2, r6
   d6920:	d10e      	bne.n	d6940 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d6922:	e049      	b.n	d69b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d6924:	42b2      	cmp	r2, r6
   d6926:	d047      	beq.n	d69b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d6928:	4575      	cmp	r5, lr
   d692a:	d821      	bhi.n	d6970 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d692c:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d6930:	f1bc 0f19 	cmp.w	ip, #25
   d6934:	d808      	bhi.n	d6948 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d6936:	3b20      	subs	r3, #32
   d6938:	b2db      	uxtb	r3, r3
        lc |= bit;
   d693a:	ea49 0707 	orr.w	r7, r9, r7
   d693e:	e00a      	b.n	d6956 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d6940:	4575      	cmp	r5, lr
   d6942:	d815      	bhi.n	d6970 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d6944:	2400      	movs	r4, #0
      c = '_';
   d6946:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d6948:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d694c:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d6950:	bf98      	it	ls
   d6952:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d6956:	f105 0c01 	add.w	ip, r5, #1
   d695a:	fa5f fc8c 	uxtb.w	ip, ip
   d695e:	440d      	add	r5, r1
      if (i < 7) {
   d6960:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d6964:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d6966:	d801      	bhi.n	d696c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d6968:	f881 c00c 	strb.w	ip, [r1, #12]
   d696c:	4665      	mov	r5, ip
   d696e:	e7b3      	b.n	d68d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d6970:	f1be 0f0a 	cmp.w	lr, #10
   d6974:	d117      	bne.n	d69a6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d6976:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d6978:	7b4b      	ldrb	r3, [r1, #13]
   d697a:	2b20      	cmp	r3, #32
   d697c:	f43f af53 	beq.w	d6826 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d6980:	b13c      	cbz	r4, d6992 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d6982:	ea1a 0f07 	tst.w	sl, r7
   d6986:	bf18      	it	ne
   d6988:	2702      	movne	r7, #2
   d698a:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d698c:	2001      	movs	r0, #1
   d698e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d6992:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d6994:	2001      	movs	r0, #1
   d6996:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d6998:	4419      	add	r1, r3
   d699a:	237e      	movs	r3, #126	; 0x7e
   d699c:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d699e:	2331      	movs	r3, #49	; 0x31
   d69a0:	738b      	strb	r3, [r1, #14]
   d69a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d69a6:	42b2      	cmp	r2, r6
   d69a8:	dce5      	bgt.n	d6976 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d69aa:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d69ac:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d69b0:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d69b2:	f04f 0910 	mov.w	r9, #16
   d69b6:	e78e      	b.n	d68d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d69b8:	f1be 0f0a 	cmp.w	lr, #10
   d69bc:	d0db      	beq.n	d6976 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d69be:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d69c0:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d69c4:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d69c6:	f04f 0910 	mov.w	r9, #16
   d69ca:	e785      	b.n	d68d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d69cc:	31000101 	.word	0x31000101

000d69d0 <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d69d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d69d2:	b08b      	sub	sp, #44	; 0x2c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d69d4:	2300      	movs	r3, #0
   d69d6:	f88d 3004 	strb.w	r3, [sp, #4]
   d69da:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d69de:	7803      	ldrb	r3, [r0, #0]
   d69e0:	0719      	lsls	r1, r3, #28

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d69e2:	4604      	mov	r4, r0
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d69e4:	d508      	bpl.n	d69f8 <_ZN7FatFile6removeEv+0x28>
   d69e6:	7883      	ldrb	r3, [r0, #2]
   d69e8:	079a      	lsls	r2, r3, #30
   d69ea:	d505      	bpl.n	d69f8 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   d69ec:	6a01      	ldr	r1, [r0, #32]
   d69ee:	b129      	cbz	r1, d69fc <_ZN7FatFile6removeEv+0x2c>
   d69f0:	68a0      	ldr	r0, [r4, #8]
   d69f2:	f000 ff60 	bl	d78b6 <_ZN9FatVolume9freeChainEm>
   d69f6:	b908      	cbnz	r0, d69fc <_ZN7FatFile6removeEv+0x2c>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   d69f8:	2000      	movs	r0, #0
   d69fa:	e049      	b.n	d6a90 <_ZN7FatFile6removeEv+0xc0>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d69fc:	2101      	movs	r1, #1
   d69fe:	4620      	mov	r0, r4
   d6a00:	f000 fabc 	bl	d6f7c <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d6a04:	4605      	mov	r5, r0
   d6a06:	2800      	cmp	r0, #0
   d6a08:	d0f6      	beq.n	d69f8 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
   d6a0a:	f7ff fecf 	bl	d67ac <_ZN7FatFile11lfnChecksumEPh>

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;
   d6a0e:	26e5      	movs	r6, #229	; 0xe5
   d6a10:	702e      	strb	r6, [r5, #0]

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
   d6a12:	2300      	movs	r3, #0
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
   d6a14:	4607      	mov	r7, r0

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
   d6a16:	7023      	strb	r3, [r4, #0]

  // Write entry to device.
  if (!m_vol->cacheSync()) {
   d6a18:	68a0      	ldr	r0, [r4, #8]
   d6a1a:	f7ff feba 	bl	d6792 <_ZN9FatVolume9cacheSyncEv>
   d6a1e:	2800      	cmp	r0, #0
   d6a20:	d0ea      	beq.n	d69f8 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
   d6a22:	78e3      	ldrb	r3, [r4, #3]
   d6a24:	2b00      	cmp	r3, #0
   d6a26:	d033      	beq.n	d6a90 <_ZN7FatFile6removeEv+0xc0>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
   d6a28:	4621      	mov	r1, r4
   d6a2a:	a801      	add	r0, sp, #4
   d6a2c:	f7ff fecd 	bl	d67ca <_ZN7FatFile11openClusterEPS_>
   d6a30:	2800      	cmp	r0, #0
   d6a32:	d0e1      	beq.n	d69f8 <_ZN7FatFile6removeEv+0x28>
   d6a34:	2501      	movs	r5, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d6a36:	78e3      	ldrb	r3, [r4, #3]
   d6a38:	42ab      	cmp	r3, r5
   d6a3a:	d3dd      	bcc.n	d69f8 <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   d6a3c:	88a1      	ldrh	r1, [r4, #4]
   d6a3e:	1b49      	subs	r1, r1, r5
   d6a40:	0149      	lsls	r1, r1, #5
   d6a42:	a801      	add	r0, sp, #4
   d6a44:	f000 fbce 	bl	d71e4 <_ZN7FatFile7seekSetEm>
   d6a48:	2800      	cmp	r0, #0
   d6a4a:	d0d5      	beq.n	d69f8 <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   d6a4c:	2100      	movs	r1, #0
   d6a4e:	a801      	add	r0, sp, #4
   d6a50:	f000 fbab 	bl	d71aa <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d6a54:	2800      	cmp	r0, #0
   d6a56:	d0cf      	beq.n	d69f8 <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d6a58:	7ac3      	ldrb	r3, [r0, #11]
   d6a5a:	2b0f      	cmp	r3, #15
   d6a5c:	d1cc      	bne.n	d69f8 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   d6a5e:	7802      	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d6a60:	f002 031f 	and.w	r3, r2, #31
   d6a64:	429d      	cmp	r5, r3
   d6a66:	d1c7      	bne.n	d69f8 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   d6a68:	7b43      	ldrb	r3, [r0, #13]
   d6a6a:	42bb      	cmp	r3, r7
   d6a6c:	d1c4      	bne.n	d69f8 <_ZN7FatFile6removeEv+0x28>
        chksum != ldir->chksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->ord & LDIR_ORD_LAST_LONG_ENTRY;
    ldir->ord = DIR_NAME_DELETED;
   d6a6e:	7006      	strb	r6, [r0, #0]
    m_vol->cacheDirty();
   d6a70:	68a1      	ldr	r1, [r4, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d6a72:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   d6a76:	f043 0301 	orr.w	r3, r3, #1
   d6a7a:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   d6a7e:	0653      	lsls	r3, r2, #25
   d6a80:	d503      	bpl.n	d6a8a <_ZN7FatFile6removeEv+0xba>
      if (!m_vol->cacheSync()) {
   d6a82:	68a0      	ldr	r0, [r4, #8]
   d6a84:	f7ff fe85 	bl	d6792 <_ZN9FatVolume9cacheSyncEv>
   d6a88:	e002      	b.n	d6a90 <_ZN7FatFile6removeEv+0xc0>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d6a8a:	3501      	adds	r5, #1
   d6a8c:	b2ed      	uxtb	r5, r5
   d6a8e:	e7d2      	b.n	d6a36 <_ZN7FatFile6removeEv+0x66>
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
}
   d6a90:	b00b      	add	sp, #44	; 0x2c
   d6a92:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6a94 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d6a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d6a98:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d6a9c:	4606      	mov	r6, r0
   d6a9e:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d6aa0:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d6aa2:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d6aa4:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d6aa8:	6869      	ldr	r1, [r5, #4]
   d6aaa:	68aa      	ldr	r2, [r5, #8]
   d6aac:	1863      	adds	r3, r4, r1
   d6aae:	b29b      	uxth	r3, r3
   d6ab0:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d6ab2:	4291      	cmp	r1, r2
   d6ab4:	d006      	beq.n	d6ac4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d6ab6:	f812 0b01 	ldrb.w	r0, [r2], #1
   d6aba:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d6abe:	4043      	eors	r3, r0
   d6ac0:	b29b      	uxth	r3, r3
   d6ac2:	e7f6      	b.n	d6ab2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d6ac4:	f1b9 0f03 	cmp.w	r9, #3
   d6ac8:	bf28      	it	cs
   d6aca:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6ace:	f109 0204 	add.w	r2, r9, #4
   d6ad2:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d6ad4:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6ad8:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6ada:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6adc:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6ade:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6ae0:	bf94      	ite	ls
   d6ae2:	3130      	addls	r1, #48	; 0x30
   d6ae4:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6ae6:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6ae8:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d6aea:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6aee:	d3f1      	bcc.n	d6ad4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d6af0:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d6af4:	2100      	movs	r1, #0
   d6af6:	735f      	strb	r7, [r3, #13]
   d6af8:	4630      	mov	r0, r6
   d6afa:	f000 fb73 	bl	d71e4 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d6afe:	2101      	movs	r1, #1
   d6b00:	4630      	mov	r0, r6
   d6b02:	f000 fb52 	bl	d71aa <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d6b06:	4601      	mov	r1, r0
   d6b08:	b928      	cbnz	r0, d6b16 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d6b0a:	7870      	ldrb	r0, [r6, #1]
   d6b0c:	fab0 f080 	clz	r0, r0
   d6b10:	0940      	lsrs	r0, r0, #5
   d6b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d6b16:	7803      	ldrb	r3, [r0, #0]
   d6b18:	b14b      	cbz	r3, d6b2e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d6b1a:	7ac3      	ldrb	r3, [r0, #11]
   d6b1c:	071b      	lsls	r3, r3, #28
   d6b1e:	d4ee      	bmi.n	d6afe <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d6b20:	220b      	movs	r2, #11
   d6b22:	4640      	mov	r0, r8
   d6b24:	f004 ff6e 	bl	dba04 <memcmp>
   d6b28:	2800      	cmp	r0, #0
   d6b2a:	d1e8      	bne.n	d6afe <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d6b2c:	e002      	b.n	d6b34 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d6b2e:	2001      	movs	r0, #1
   d6b30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d6b34:	3401      	adds	r4, #1
   d6b36:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d6b38:	2c64      	cmp	r4, #100	; 0x64
   d6b3a:	d1b5      	bne.n	d6aa8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d6b3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d6b40 <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6b44:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6b46:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6b48:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6b4a:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6b4e:	9005      	str	r0, [sp, #20]
   d6b50:	460e      	mov	r6, r1
   d6b52:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6b54:	d101      	bne.n	d6b5a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d6b56:	2000      	movs	r0, #0
   d6b58:	e1a0      	b.n	d6e9c <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6b5a:	9b05      	ldr	r3, [sp, #20]
   d6b5c:	781b      	ldrb	r3, [r3, #0]
   d6b5e:	2b00      	cmp	r3, #0
   d6b60:	d1f9      	bne.n	d6b56 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d6b62:	6853      	ldr	r3, [r2, #4]
   d6b64:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d6b66:	7813      	ldrb	r3, [r2, #0]
   d6b68:	079b      	lsls	r3, r3, #30
   d6b6a:	f000 818d 	beq.w	d6e88 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d6b6e:	9b02      	ldr	r3, [sp, #8]
   d6b70:	270d      	movs	r7, #13
   d6b72:	330c      	adds	r3, #12
   d6b74:	fbb3 f7f7 	udiv	r7, r3, r7
   d6b78:	3701      	adds	r7, #1
   d6b7a:	b2ff      	uxtb	r7, r7
   d6b7c:	2100      	movs	r1, #0
   d6b7e:	4630      	mov	r0, r6
   d6b80:	f000 fb30 	bl	d71e4 <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d6b84:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d6b88:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d6b8c:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d6b90:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d6b92:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d6b94:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d6b96:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d6b9a:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d6b9c:	6972      	ldr	r2, [r6, #20]
   d6b9e:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d6ba0:	2101      	movs	r1, #1
   d6ba2:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d6ba4:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d6ba8:	f000 faff 	bl	d71aa <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d6bac:	9b07      	ldr	r3, [sp, #28]
   d6bae:	b920      	cbnz	r0, d6bba <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d6bb0:	7873      	ldrb	r3, [r6, #1]
   d6bb2:	2b00      	cmp	r3, #0
   d6bb4:	f000 8090 	beq.w	d6cd8 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d6bb8:	e7cd      	b.n	d6b56 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d6bba:	7802      	ldrb	r2, [r0, #0]
   d6bbc:	2ae5      	cmp	r2, #229	; 0xe5
   d6bbe:	d000      	beq.n	d6bc2 <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d6bc0:	b942      	cbnz	r2, d6bd4 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d6bc2:	2c00      	cmp	r4, #0
   d6bc4:	bf08      	it	eq
   d6bc6:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d6bc8:	42bc      	cmp	r4, r7
        freeFound++;
   d6bca:	bf3c      	itt	cc
   d6bcc:	3401      	addcc	r4, #1
   d6bce:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d6bd0:	b922      	cbnz	r2, d6bdc <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d6bd2:	e081      	b.n	d6cd8 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d6bd4:	42bc      	cmp	r4, r7
   d6bd6:	bf38      	it	cc
   d6bd8:	2400      	movcc	r4, #0
   d6bda:	e003      	b.n	d6be4 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d6bdc:	2ae5      	cmp	r2, #229	; 0xe5
   d6bde:	d101      	bne.n	d6be4 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d6be0:	2500      	movs	r5, #0
   d6be2:	e7db      	b.n	d6b9c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d6be4:	2a2e      	cmp	r2, #46	; 0x2e
   d6be6:	d0fb      	beq.n	d6be0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6be8:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d6bea:	290f      	cmp	r1, #15
   d6bec:	d152      	bne.n	d6c94 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d6bee:	b93d      	cbnz	r5, d6c00 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d6bf0:	0651      	lsls	r1, r2, #25
   d6bf2:	d5d3      	bpl.n	d6b9c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d6bf4:	7b43      	ldrb	r3, [r0, #13]
   d6bf6:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d6bf8:	f002 051f 	and.w	r5, r2, #31
   d6bfc:	462b      	mov	r3, r5
   d6bfe:	e007      	b.n	d6c10 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d6c00:	3b01      	subs	r3, #1
   d6c02:	b2db      	uxtb	r3, r3
   d6c04:	429a      	cmp	r2, r3
   d6c06:	d1eb      	bne.n	d6be0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6c08:	7b42      	ldrb	r2, [r0, #13]
   d6c0a:	9903      	ldr	r1, [sp, #12]
   d6c0c:	4291      	cmp	r1, r2
   d6c0e:	d1e7      	bne.n	d6be0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d6c10:	1e5a      	subs	r2, r3, #1
   d6c12:	f04f 0c0d 	mov.w	ip, #13
   d6c16:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d6c1a:	9a02      	ldr	r2, [sp, #8]
   d6c1c:	4562      	cmp	r2, ip
   d6c1e:	d9df      	bls.n	d6be0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6c20:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d6c24:	f1be 0f04 	cmp.w	lr, #4
   d6c28:	fa5f f28e 	uxtb.w	r2, lr
   d6c2c:	d804      	bhi.n	d6c38 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d6c2e:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d6c32:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d6c36:	e00c      	b.n	d6c52 <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d6c38:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6c3a:	bf95      	itete	ls
   d6c3c:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6c40:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6c44:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6c48:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6c4c:	bf94      	ite	ls
   d6c4e:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6c50:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d6c52:	9902      	ldr	r1, [sp, #8]
   d6c54:	4561      	cmp	r1, ip
   d6c56:	d103      	bne.n	d6c60 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d6c58:	2a00      	cmp	r2, #0
   d6c5a:	bf18      	it	ne
   d6c5c:	2500      	movne	r5, #0
   d6c5e:	e79d      	b.n	d6b9c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6c60:	2aff      	cmp	r2, #255	; 0xff
   d6c62:	d8bd      	bhi.n	d6be0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6c64:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d6c66:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d6c6a:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6c6c:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d6c70:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d6c74:	bf98      	it	ls
   d6c76:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6c78:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d6c7c:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d6c80:	bf98      	it	ls
   d6c82:	b2d2      	uxtbls	r2, r2
   d6c84:	f1bc 0f19 	cmp.w	ip, #25
   d6c88:	bf9c      	itt	ls
   d6c8a:	3120      	addls	r1, #32
   d6c8c:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6c8e:	4291      	cmp	r1, r2
   d6c90:	d1a6      	bne.n	d6be0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6c92:	e0fb      	b.n	d6e8c <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d6c94:	0709      	lsls	r1, r1, #28
   d6c96:	d4a3      	bmi.n	d6be0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d6c98:	b14d      	cbz	r5, d6cae <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d6c9a:	2b01      	cmp	r3, #1
   d6c9c:	f47f af5b 	bne.w	d6b56 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d6ca0:	f7ff fd84 	bl	d67ac <_ZN7FatFile11lfnChecksumEPh>
   d6ca4:	9b03      	ldr	r3, [sp, #12]
   d6ca6:	4283      	cmp	r3, r0
   d6ca8:	f47f af55 	bne.w	d6b56 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d6cac:	e00f      	b.n	d6cce <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d6cae:	220b      	movs	r2, #11
   d6cb0:	9906      	ldr	r1, [sp, #24]
   d6cb2:	9307      	str	r3, [sp, #28]
   d6cb4:	f004 fea6 	bl	dba04 <memcmp>
   d6cb8:	9b07      	ldr	r3, [sp, #28]
   d6cba:	2800      	cmp	r0, #0
   d6cbc:	f47f af6e 	bne.w	d6b9c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d6cc0:	f899 2000 	ldrb.w	r2, [r9]
   d6cc4:	07d2      	lsls	r2, r2, #31
   d6cc6:	d502      	bpl.n	d6cce <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d6cc8:	2201      	movs	r2, #1
   d6cca:	9204      	str	r2, [sp, #16]
   d6ccc:	e766      	b.n	d6b9c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d6cce:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d6cd2:	f000 80d1 	beq.w	d6e78 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d6cd6:	e73e      	b.n	d6b56 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d6cd8:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d6cdc:	f43f af3b 	beq.w	d6b56 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d6ce0:	f00b 0303 	and.w	r3, fp, #3
   d6ce4:	3b01      	subs	r3, #1
   d6ce6:	2b01      	cmp	r3, #1
   d6ce8:	f63f af35 	bhi.w	d6b56 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d6cec:	2c00      	cmp	r4, #0
   d6cee:	bf08      	it	eq
   d6cf0:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d6cf2:	42bc      	cmp	r4, r7
   d6cf4:	d302      	bcc.n	d6cfc <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d6cf6:	9b04      	ldr	r3, [sp, #16]
   d6cf8:	b9cb      	cbnz	r3, d6d2e <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d6cfa:	e01f      	b.n	d6d3c <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d6cfc:	2100      	movs	r1, #0
   d6cfe:	4630      	mov	r0, r6
   d6d00:	f000 fa53 	bl	d71aa <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d6d04:	b910      	cbnz	r0, d6d0c <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d6d06:	7873      	ldrb	r3, [r6, #1]
   d6d08:	b15b      	cbz	r3, d6d22 <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d6d0a:	e724      	b.n	d6b56 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d6d0c:	3401      	adds	r4, #1
   d6d0e:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d6d10:	e7ef      	b.n	d6cf2 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d6d12:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d6d14:	791b      	ldrb	r3, [r3, #4]
   d6d16:	2b01      	cmp	r3, #1
   d6d18:	d8ed      	bhi.n	d6cf6 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d6d1a:	3410      	adds	r4, #16
   d6d1c:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d6d1e:	42a7      	cmp	r7, r4
   d6d20:	d9e9      	bls.n	d6cf6 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d6d22:	4630      	mov	r0, r6
   d6d24:	f000 f8ea 	bl	d6efc <_ZN7FatFile13addDirClusterEv>
   d6d28:	2800      	cmp	r0, #0
   d6d2a:	d1f2      	bne.n	d6d12 <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d6d2c:	e713      	b.n	d6b56 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d6d2e:	4649      	mov	r1, r9
   d6d30:	4630      	mov	r0, r6
   d6d32:	f7ff feaf 	bl	d6a94 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d6d36:	2800      	cmp	r0, #0
   d6d38:	f43f af0d 	beq.w	d6b56 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d6d3c:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d6d40:	4630      	mov	r0, r6
   d6d42:	f000 fa4f 	bl	d71e4 <_ZN7FatFile7seekSetEm>
   d6d46:	2800      	cmp	r0, #0
   d6d48:	f43f af05 	beq.w	d6b56 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d6d4c:	1e7d      	subs	r5, r7, #1
   d6d4e:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6d50:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d6d52:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d6d56:	f04f 080f 	mov.w	r8, #15
   d6d5a:	e041      	b.n	d6de0 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d6d5c:	2100      	movs	r1, #0
   d6d5e:	4630      	mov	r0, r6
   d6d60:	f000 fa23 	bl	d71aa <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d6d64:	4607      	mov	r7, r0
   d6d66:	2800      	cmp	r0, #0
   d6d68:	f43f aef5 	beq.w	d6b56 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d6d6c:	68b2      	ldr	r2, [r6, #8]
   d6d6e:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d6d72:	42ac      	cmp	r4, r5
   d6d74:	f043 0301 	orr.w	r3, r3, #1
   d6d78:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d6d7c:	bf0c      	ite	eq
   d6d7e:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d6d82:	4622      	movne	r2, r4
   d6d84:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d6d86:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d6d8a:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d6d8e:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d6d92:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d6d94:	f7ff fd0a 	bl	d67ac <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6d98:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d6d9a:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d6d9c:	f887 a01a 	strb.w	sl, [r7, #26]
   d6da0:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6da4:	f002 021f 	and.w	r2, r2, #31
   d6da8:	230d      	movs	r3, #13
   d6daa:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d6dac:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6db0:	435a      	muls	r2, r3
   d6db2:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d6db4:	9902      	ldr	r1, [sp, #8]
   d6db6:	4291      	cmp	r1, r2
   d6db8:	d915      	bls.n	d6de6 <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d6dba:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d6dbe:	2b04      	cmp	r3, #4
   d6dc0:	fa5f fc83 	uxtb.w	ip, r3
   d6dc4:	f103 0001 	add.w	r0, r3, #1
   d6dc8:	d813      	bhi.n	d6df2 <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d6dca:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d6dce:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d6dd2:	280d      	cmp	r0, #13
   d6dd4:	f102 0201 	add.w	r2, r2, #1
   d6dd8:	4603      	mov	r3, r0
   d6dda:	d1eb      	bne.n	d6db4 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6ddc:	3c01      	subs	r4, #1
   d6dde:	b2e4      	uxtb	r4, r4
   d6de0:	2c00      	cmp	r4, #0
   d6de2:	d1bb      	bne.n	d6d5c <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d6de4:	e00e      	b.n	d6e04 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d6de6:	bf14      	ite	ne
   d6de8:	f04f 31ff 	movne.w	r1, #4294967295
   d6dec:	2100      	moveq	r1, #0
   d6dee:	b289      	uxth	r1, r1
   d6df0:	e7e5      	b.n	d6dbe <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d6df2:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d6df6:	bf94      	ite	ls
   d6df8:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d6dfc:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d6e00:	8099      	strh	r1, [r3, #4]
   d6e02:	e7e6      	b.n	d6dd2 <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d6e04:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d6e06:	4621      	mov	r1, r4
   d6e08:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d6e0a:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d6e0e:	f000 f9cc 	bl	d71aa <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d6e12:	4607      	mov	r7, r0
   d6e14:	2800      	cmp	r0, #0
   d6e16:	f43f ae9e 	beq.w	d6b56 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d6e1a:	2220      	movs	r2, #32
   d6e1c:	4621      	mov	r1, r4
   d6e1e:	f004 fe0b 	bl	dba38 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d6e22:	464b      	mov	r3, r9
   d6e24:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d6e28:	603a      	str	r2, [r7, #0]
   d6e2a:	685a      	ldr	r2, [r3, #4]
   d6e2c:	607a      	str	r2, [r7, #4]
   d6e2e:	891a      	ldrh	r2, [r3, #8]
   d6e30:	813a      	strh	r2, [r7, #8]
   d6e32:	7a9b      	ldrb	r3, [r3, #10]
   d6e34:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d6e36:	f899 3000 	ldrb.w	r3, [r9]
   d6e3a:	f003 0318 	and.w	r3, r3, #24
   d6e3e:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d6e40:	4b18      	ldr	r3, [pc, #96]	; (d6ea4 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d6e42:	681b      	ldr	r3, [r3, #0]
   d6e44:	b12b      	cbz	r3, d6e52 <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d6e46:	f107 010e 	add.w	r1, r7, #14
   d6e4a:	f107 0010 	add.w	r0, r7, #16
   d6e4e:	4798      	blx	r3
   d6e50:	e006      	b.n	d6e60 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d6e52:	2321      	movs	r3, #33	; 0x21
   d6e54:	743b      	strb	r3, [r7, #16]
   d6e56:	2328      	movs	r3, #40	; 0x28
   d6e58:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d6e5a:	2308      	movs	r3, #8
   d6e5c:	73bc      	strb	r4, [r7, #14]
   d6e5e:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d6e60:	8a3b      	ldrh	r3, [r7, #16]
   d6e62:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d6e64:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d6e66:	89fb      	ldrh	r3, [r7, #14]
   d6e68:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d6e6a:	68b2      	ldr	r2, [r6, #8]
   d6e6c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d6e70:	f043 0301 	orr.w	r3, r3, #1
   d6e74:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d6e78:	9500      	str	r5, [sp, #0]
   d6e7a:	465b      	mov	r3, fp
   d6e7c:	4652      	mov	r2, sl
   d6e7e:	4631      	mov	r1, r6
   d6e80:	9805      	ldr	r0, [sp, #20]
   d6e82:	f000 f9f8 	bl	d7276 <_ZN7FatFile15openCachedEntryEPS_tih>
   d6e86:	e009      	b.n	d6e9c <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d6e88:	2701      	movs	r7, #1
   d6e8a:	e677      	b.n	d6b7c <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d6e8c:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d6e90:	f1be 0f0d 	cmp.w	lr, #13
   d6e94:	f43f ae82 	beq.w	d6b9c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6e98:	46d4      	mov	ip, sl
   d6e9a:	e6c3      	b.n	d6c24 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d6e9c:	b009      	add	sp, #36	; 0x24
   d6e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6ea2:	bf00      	nop
   d6ea4:	2003df44 	.word	0x2003df44

000d6ea8 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d6ea8:	f001 bbf4 	b.w	d8694 <HAL_Pin_Map>

000d6eac <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d6eac:	f001 bbf2 	b.w	d8694 <HAL_Pin_Map>

000d6eb0 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d6eb0:	f001 bbf0 	b.w	d8694 <HAL_Pin_Map>

000d6eb4 <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   d6eb4:	b510      	push	{r4, lr}
   d6eb6:	460c      	mov	r4, r1
   d6eb8:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   d6eba:	b909      	cbnz	r1, d6ec0 <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   d6ebc:	2000      	movs	r0, #0
   d6ebe:	bd10      	pop	{r4, pc}
  dir_t* dir;
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
   d6ec0:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   d6ec4:	d004      	beq.n	d6ed0 <_ZN7FatFile6getSFNEPc+0x1c>
    name[0] = '/';
   d6ec6:	232f      	movs	r3, #47	; 0x2f
   d6ec8:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   d6eca:	2300      	movs	r3, #0
   d6ecc:	7063      	strb	r3, [r4, #1]
   d6ece:	e006      	b.n	d6ede <_ZN7FatFile6getSFNEPc+0x2a>
    return true;
  }
  // cache entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   d6ed0:	f000 f854 	bl	d6f7c <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d6ed4:	2800      	cmp	r0, #0
   d6ed6:	d0f1      	beq.n	d6ebc <_ZN7FatFile6getSFNEPc+0x8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  dirName(dir, name);
   d6ed8:	4621      	mov	r1, r4
   d6eda:	f000 f85e 	bl	d6f9a <_ZN7FatFile7dirNameEPK14directoryEntryPc>
  return true;
   d6ede:	2001      	movs	r0, #1

fail:
  return false;
}
   d6ee0:	bd10      	pop	{r4, pc}

000d6ee2 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d6ee2:	f001 bbd7 	b.w	d8694 <HAL_Pin_Map>

000d6ee6 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d6ee6:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d6ee8:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d6eea:	f043 0304 	orr.w	r3, r3, #4
   d6eee:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d6ef0:	f100 0210 	add.w	r2, r0, #16
   d6ef4:	6880      	ldr	r0, [r0, #8]
   d6ef6:	f000 bca3 	b.w	d7840 <_ZN9FatVolume15allocateClusterEmPm>
	...

000d6efc <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d6efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d6f00:	7803      	ldrb	r3, [r0, #0]
   d6f02:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d6f06:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d6f08:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d6f0c:	b10b      	cbz	r3, d6f12 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d6f0e:	2600      	movs	r6, #0
   d6f10:	e02e      	b.n	d6f70 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d6f12:	6942      	ldr	r2, [r0, #20]
   d6f14:	4b18      	ldr	r3, [pc, #96]	; (d6f78 <_ZN7FatFile13addDirClusterEv+0x7c>)
   d6f16:	429a      	cmp	r2, r3
   d6f18:	d8f9      	bhi.n	d6f0e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d6f1a:	f7ff ffe4 	bl	d6ee6 <_ZN7FatFile10addClusterEv>
   d6f1e:	4606      	mov	r6, r0
   d6f20:	2800      	cmp	r0, #0
   d6f22:	d0f4      	beq.n	d6f0e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d6f24:	6921      	ldr	r1, [r4, #16]
   d6f26:	68a0      	ldr	r0, [r4, #8]
   d6f28:	f000 fc1f 	bl	d776a <_ZNK9FatVolume17clusterFirstBlockEm>
   d6f2c:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6f2e:	68a0      	ldr	r0, [r4, #8]
   d6f30:	2205      	movs	r2, #5
   d6f32:	4639      	mov	r1, r7
   d6f34:	3024      	adds	r0, #36	; 0x24
   d6f36:	f000 fbf4 	bl	d7722 <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d6f3a:	4680      	mov	r8, r0
   d6f3c:	2800      	cmp	r0, #0
   d6f3e:	d0e6      	beq.n	d6f0e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d6f40:	4629      	mov	r1, r5
   d6f42:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6f46:	f004 fd77 	bl	dba38 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d6f4a:	2501      	movs	r5, #1
   d6f4c:	68a3      	ldr	r3, [r4, #8]
   d6f4e:	791a      	ldrb	r2, [r3, #4]
   d6f50:	42aa      	cmp	r2, r5
   d6f52:	d909      	bls.n	d6f68 <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d6f54:	4642      	mov	r2, r8
   d6f56:	19e9      	adds	r1, r5, r7
   d6f58:	6818      	ldr	r0, [r3, #0]
   d6f5a:	f000 ff5f 	bl	d7e1c <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d6f5e:	2800      	cmp	r0, #0
   d6f60:	d0d5      	beq.n	d6f0e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d6f62:	3501      	adds	r5, #1
   d6f64:	b2ed      	uxtb	r5, r5
   d6f66:	e7f1      	b.n	d6f4c <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d6f68:	6963      	ldr	r3, [r4, #20]
   d6f6a:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d6f6e:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d6f70:	4630      	mov	r0, r6
   d6f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6f76:	bf00      	nop
   d6f78:	001ffdff 	.word	0x001ffdff

000d6f7c <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d6f7c:	b510      	push	{r4, lr}
   d6f7e:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6f80:	6880      	ldr	r0, [r0, #8]
   d6f82:	460a      	mov	r2, r1
   d6f84:	3024      	adds	r0, #36	; 0x24
   d6f86:	69a1      	ldr	r1, [r4, #24]
   d6f88:	f000 fbcb 	bl	d7722 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d6f8c:	b120      	cbz	r0, d6f98 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d6f8e:	88a3      	ldrh	r3, [r4, #4]
   d6f90:	f003 030f 	and.w	r3, r3, #15
   d6f94:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d6f98:	bd10      	pop	{r4, pc}

000d6f9a <_ZN7FatFile7dirNameEPK14directoryEntryPc>:

fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   d6f9a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6f9c:	2400      	movs	r4, #0
   d6f9e:	1e45      	subs	r5, r0, #1
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
   d6fa0:	2608      	movs	r6, #8
fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
   d6fa2:	4623      	mov	r3, r4
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
   d6fa4:	272e      	movs	r7, #46	; 0x2e
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
   d6fa6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d6faa:	2a20      	cmp	r2, #32
   d6fac:	d018      	beq.n	d6fe0 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x46>
      continue;
    }
    if (i == 8) {
   d6fae:	2c08      	cmp	r4, #8
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
   d6fb0:	bf02      	ittt	eq
   d6fb2:	54cf      	strbeq	r7, [r1, r3]
   d6fb4:	1c5a      	addeq	r2, r3, #1
   d6fb6:	b2d3      	uxtbeq	r3, r2
    }
    char c = dir->name[i];
   d6fb8:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   d6fba:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
   d6fbe:	bf08      	it	eq
   d6fc0:	2610      	moveq	r6, #16
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   d6fc2:	f1be 0f19 	cmp.w	lr, #25
   d6fc6:	d806      	bhi.n	d6fd6 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3c>
   d6fc8:	f890 e00c 	ldrb.w	lr, [r0, #12]
   d6fcc:	ea16 0f0e 	tst.w	r6, lr
      c += 'a' - 'A';
   d6fd0:	bf1c      	itt	ne
   d6fd2:	3220      	addne	r2, #32
   d6fd4:	b2d2      	uxtbne	r2, r2
    }
    name[j++] = c;
   d6fd6:	f103 0e01 	add.w	lr, r3, #1
   d6fda:	54ca      	strb	r2, [r1, r3]
   d6fdc:	fa5f f38e 	uxtb.w	r3, lr
   d6fe0:	3401      	adds	r4, #1
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
   d6fe2:	2c0b      	cmp	r4, #11
   d6fe4:	d1df      	bne.n	d6fa6 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xc>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
   d6fe6:	2200      	movs	r2, #0
   d6fe8:	54ca      	strb	r2, [r1, r3]
  return j;
}
   d6fea:	4618      	mov	r0, r3
   d6fec:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6fee <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d6fee:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d6ff0:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d6ff2:	4605      	mov	r5, r0
   d6ff4:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d6ff6:	b984      	cbnz	r4, d701a <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d6ff8:	2224      	movs	r2, #36	; 0x24
   d6ffa:	4621      	mov	r1, r4
   d6ffc:	f004 fd1c 	bl	dba38 <memset>

  m_vol = vol;
   d7000:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d7002:	79f3      	ldrb	r3, [r6, #7]
   d7004:	2b10      	cmp	r3, #16
   d7006:	d003      	beq.n	d7010 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d7008:	2b20      	cmp	r3, #32
   d700a:	d106      	bne.n	d701a <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d700c:	2340      	movs	r3, #64	; 0x40
   d700e:	e000      	b.n	d7012 <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d7010:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d7012:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d7014:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d7016:	70a8      	strb	r0, [r5, #2]
   d7018:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d701a:	2000      	movs	r0, #0
   d701c:	bd70      	pop	{r4, r5, r6, pc}

000d701e <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d701e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7022:	7803      	ldrb	r3, [r0, #0]
   d7024:	4604      	mov	r4, r0
   d7026:	4689      	mov	r9, r1
   d7028:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d702a:	b14b      	cbz	r3, d7040 <_ZN7FatFile4readEPvj+0x22>
   d702c:	7882      	ldrb	r2, [r0, #2]
   d702e:	07d1      	lsls	r1, r2, #31
   d7030:	d506      	bpl.n	d7040 <_ZN7FatFile4readEPvj+0x22>
   d7032:	e00c      	b.n	d704e <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d7034:	465a      	mov	r2, fp
   d7036:	6921      	ldr	r1, [r4, #16]
   d7038:	f000 fb9d 	bl	d7776 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d703c:	2800      	cmp	r0, #0
   d703e:	da3d      	bge.n	d70bc <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d7040:	7863      	ldrb	r3, [r4, #1]
   d7042:	f043 0302 	orr.w	r3, r3, #2
   d7046:	7063      	strb	r3, [r4, #1]
  return -1;
   d7048:	f04f 30ff 	mov.w	r0, #4294967295
   d704c:	e097      	b.n	d717e <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d704e:	071a      	lsls	r2, r3, #28
   d7050:	d503      	bpl.n	d705a <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d7052:	69e3      	ldr	r3, [r4, #28]
   d7054:	6962      	ldr	r2, [r4, #20]
   d7056:	1a9b      	subs	r3, r3, r2
   d7058:	e007      	b.n	d706a <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d705a:	069a      	lsls	r2, r3, #26
   d705c:	d508      	bpl.n	d7070 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d705e:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d7060:	891a      	ldrh	r2, [r3, #8]
   d7062:	6963      	ldr	r3, [r4, #20]
   d7064:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d7068:	b29b      	uxth	r3, r3
   d706a:	429d      	cmp	r5, r3
   d706c:	bf28      	it	cs
   d706e:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d7070:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d7072:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d7076:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d707a:	2e00      	cmp	r6, #0
   d707c:	d035      	beq.n	d70ea <_ZN7FatFile4readEPvj+0xcc>
   d707e:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d7080:	6963      	ldr	r3, [r4, #20]
   d7082:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d7084:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d7088:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d708c:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d7090:	d002      	beq.n	d7098 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d7092:	6a03      	ldr	r3, [r0, #32]
   d7094:	4419      	add	r1, r3
   d7096:	e01d      	b.n	d70d4 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d7098:	f890 8005 	ldrb.w	r8, [r0, #5]
   d709c:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d70a0:	f1ba 0f00 	cmp.w	sl, #0
   d70a4:	d110      	bne.n	d70c8 <_ZN7FatFile4readEPvj+0xaa>
   d70a6:	f1b8 0f00 	cmp.w	r8, #0
   d70aa:	d10d      	bne.n	d70c8 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d70ac:	2b00      	cmp	r3, #0
   d70ae:	d1c1      	bne.n	d7034 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d70b0:	0653      	lsls	r3, r2, #25
   d70b2:	bf4c      	ite	mi
   d70b4:	6a03      	ldrmi	r3, [r0, #32]
   d70b6:	6a23      	ldrpl	r3, [r4, #32]
   d70b8:	6123      	str	r3, [r4, #16]
   d70ba:	e005      	b.n	d70c8 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d70bc:	d104      	bne.n	d70c8 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d70be:	7823      	ldrb	r3, [r4, #0]
   d70c0:	f013 0f70 	tst.w	r3, #112	; 0x70
   d70c4:	d111      	bne.n	d70ea <_ZN7FatFile4readEPvj+0xcc>
   d70c6:	e7bb      	b.n	d7040 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d70c8:	6921      	ldr	r1, [r4, #16]
   d70ca:	68a0      	ldr	r0, [r4, #8]
   d70cc:	f000 fb4d 	bl	d776a <_ZNK9FatVolume17clusterFirstBlockEm>
   d70d0:	eb08 0100 	add.w	r1, r8, r0
   d70d4:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d70d6:	f1ba 0f00 	cmp.w	sl, #0
   d70da:	d135      	bne.n	d7148 <_ZN7FatFile4readEPvj+0x12a>
   d70dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d70e0:	d332      	bcc.n	d7148 <_ZN7FatFile4readEPvj+0x12a>
   d70e2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d70e4:	4299      	cmp	r1, r3
   d70e6:	d102      	bne.n	d70ee <_ZN7FatFile4readEPvj+0xd0>
   d70e8:	e02e      	b.n	d7148 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d70ea:	1ba8      	subs	r0, r5, r6
   d70ec:	e047      	b.n	d717e <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d70ee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d70f2:	d31b      	bcc.n	d712c <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d70f4:	7822      	ldrb	r2, [r4, #0]
   d70f6:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d70f8:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d70fc:	d406      	bmi.n	d710c <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d70fe:	7902      	ldrb	r2, [r0, #4]
   d7100:	ebc8 0202 	rsb	r2, r8, r2
   d7104:	b2d2      	uxtb	r2, r2
   d7106:	4592      	cmp	sl, r2
   d7108:	bf28      	it	cs
   d710a:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d710c:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d710e:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d7112:	d207      	bcs.n	d7124 <_ZN7FatFile4readEPvj+0x106>
   d7114:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d7116:	4653      	mov	r3, sl
   d7118:	464a      	mov	r2, r9
   d711a:	6800      	ldr	r0, [r0, #0]
   d711c:	f000 fe3c 	bl	d7d98 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d7120:	b960      	cbnz	r0, d713c <_ZN7FatFile4readEPvj+0x11e>
   d7122:	e78d      	b.n	d7040 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d7124:	4453      	add	r3, sl
   d7126:	4299      	cmp	r1, r3
   d7128:	d321      	bcc.n	d716e <_ZN7FatFile4readEPvj+0x150>
   d712a:	e7f3      	b.n	d7114 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d712c:	464a      	mov	r2, r9
   d712e:	6800      	ldr	r0, [r0, #0]
   d7130:	f000 fdea 	bl	d7d08 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d7134:	2800      	cmp	r0, #0
   d7136:	d083      	beq.n	d7040 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d7138:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d713c:	6963      	ldr	r3, [r4, #20]
   d713e:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d7140:	44b9      	add	r9, r7
    m_curPosition += n;
   d7142:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d7144:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d7146:	e798      	b.n	d707a <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d7148:	2200      	movs	r2, #0
   d714a:	3024      	adds	r0, #36	; 0x24
   d714c:	f000 fae9 	bl	d7722 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d7150:	2800      	cmp	r0, #0
   d7152:	f43f af75 	beq.w	d7040 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d7156:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d715a:	42b7      	cmp	r7, r6
   d715c:	bf28      	it	cs
   d715e:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d7160:	eb00 010a 	add.w	r1, r0, sl
   d7164:	463a      	mov	r2, r7
   d7166:	4648      	mov	r0, r9
   d7168:	f004 fc5b 	bl	dba22 <memcpy>
   d716c:	e7e6      	b.n	d713c <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d716e:	3024      	adds	r0, #36	; 0x24
   d7170:	9101      	str	r1, [sp, #4]
   d7172:	f000 faaf 	bl	d76d4 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d7176:	9901      	ldr	r1, [sp, #4]
   d7178:	2800      	cmp	r0, #0
   d717a:	d1cb      	bne.n	d7114 <_ZN7FatFile4readEPvj+0xf6>
   d717c:	e760      	b.n	d7040 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d717e:	b003      	add	sp, #12
   d7180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7184 <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d7184:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d7186:	2201      	movs	r2, #1
   d7188:	f10d 0107 	add.w	r1, sp, #7
   d718c:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d718e:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d7190:	6905      	ldr	r5, [r0, #16]
   d7192:	f7ff ff44 	bl	d701e <_ZN7FatFile4readEPvj>
   d7196:	2801      	cmp	r0, #1
   d7198:	bf05      	ittet	eq
   d719a:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d719e:	6166      	streq	r6, [r4, #20]
   d71a0:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = pos->cluster;
   d71a4:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d71a6:	b002      	add	sp, #8
   d71a8:	bd70      	pop	{r4, r5, r6, pc}

000d71aa <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d71aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d71ac:	6943      	ldr	r3, [r0, #20]
   d71ae:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d71b2:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d71b4:	b105      	cbz	r5, d71b8 <_ZN7FatFile12readDirCacheEb+0xe>
   d71b6:	b969      	cbnz	r1, d71d4 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d71b8:	2201      	movs	r2, #1
   d71ba:	f10d 0107 	add.w	r1, sp, #7
   d71be:	4620      	mov	r0, r4
   d71c0:	f7ff ff2d 	bl	d701e <_ZN7FatFile4readEPvj>
   d71c4:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d71c6:	2801      	cmp	r0, #1
   d71c8:	d001      	beq.n	d71ce <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d71ca:	2000      	movs	r0, #0
   d71cc:	e008      	b.n	d71e0 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d71ce:	6963      	ldr	r3, [r4, #20]
   d71d0:	331f      	adds	r3, #31
   d71d2:	e000      	b.n	d71d6 <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d71d4:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d71d6:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d71d8:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d71da:	3030      	adds	r0, #48	; 0x30
   d71dc:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d71e0:	b003      	add	sp, #12
   d71e2:	bd30      	pop	{r4, r5, pc}

000d71e4 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d71e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d71e8:	460e      	mov	r6, r1
   d71ea:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d71ec:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d71ee:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d71f0:	2900      	cmp	r1, #0
   d71f2:	d039      	beq.n	d7268 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d71f4:	6945      	ldr	r5, [r0, #20]
   d71f6:	42b5      	cmp	r5, r6
   d71f8:	d03a      	beq.n	d7270 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d71fa:	b90e      	cbnz	r6, d7200 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d71fc:	6106      	str	r6, [r0, #16]
    goto done;
   d71fe:	e031      	b.n	d7264 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d7200:	070b      	lsls	r3, r1, #28
   d7202:	d503      	bpl.n	d720c <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d7204:	69c3      	ldr	r3, [r0, #28]
   d7206:	429e      	cmp	r6, r3
   d7208:	d82e      	bhi.n	d7268 <_ZN7FatFile7seekSetEm+0x84>
   d720a:	e007      	b.n	d721c <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d720c:	0688      	lsls	r0, r1, #26
   d720e:	d505      	bpl.n	d721c <_ZN7FatFile7seekSetEm+0x38>
   d7210:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d7212:	891b      	ldrh	r3, [r3, #8]
   d7214:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d7218:	d826      	bhi.n	d7268 <_ZN7FatFile7seekSetEm+0x84>
   d721a:	e023      	b.n	d7264 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d721c:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d7220:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d7224:	1e6a      	subs	r2, r5, #1
   d7226:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d722a:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d722c:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d722e:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d7230:	429a      	cmp	r2, r3
   d7232:	d800      	bhi.n	d7236 <_ZN7FatFile7seekSetEm+0x52>
   d7234:	b94d      	cbnz	r5, d724a <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d7236:	064a      	lsls	r2, r1, #25
   d7238:	bf4c      	ite	mi
   d723a:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d723e:	6a22      	ldrpl	r2, [r4, #32]
   d7240:	6122      	str	r2, [r4, #16]
   d7242:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d7244:	f104 0810 	add.w	r8, r4, #16
   d7248:	e00a      	b.n	d7260 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d724a:	1a9b      	subs	r3, r3, r2
   d724c:	e7f9      	b.n	d7242 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d724e:	4642      	mov	r2, r8
   d7250:	6921      	ldr	r1, [r4, #16]
   d7252:	68a0      	ldr	r0, [r4, #8]
   d7254:	f000 fa8f 	bl	d7776 <_ZN9FatVolume6fatGetEmPm>
   d7258:	2800      	cmp	r0, #0
   d725a:	f105 35ff 	add.w	r5, r5, #4294967295
   d725e:	dd03      	ble.n	d7268 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d7260:	2d00      	cmp	r5, #0
   d7262:	d1f4      	bne.n	d724e <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d7264:	6166      	str	r6, [r4, #20]
   d7266:	e003      	b.n	d7270 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d7268:	6127      	str	r7, [r4, #16]
  return false;
   d726a:	2000      	movs	r0, #0
   d726c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d7270:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d7272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7276 <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d7276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7278:	460f      	mov	r7, r1
   d727a:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d727c:	2100      	movs	r1, #0
   d727e:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d7280:	4604      	mov	r4, r0
   d7282:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d7284:	f004 fbd8 	bl	dba38 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d7288:	68b8      	ldr	r0, [r7, #8]
   d728a:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d728c:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d7290:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d7292:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d7296:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d7298:	6a3b      	ldr	r3, [r7, #32]
   d729a:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d729c:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d729e:	7acb      	ldrb	r3, [r1, #11]
   d72a0:	071d      	lsls	r5, r3, #28
   d72a2:	d44c      	bmi.n	d733e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d72a4:	1883      	adds	r3, r0, r2
   d72a6:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d72aa:	f003 0317 	and.w	r3, r3, #23
   d72ae:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d72b0:	7ac9      	ldrb	r1, [r1, #11]
   d72b2:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d72b6:	bf04      	itt	eq
   d72b8:	f043 0308 	orreq.w	r3, r3, #8
   d72bc:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d72be:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d72c2:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d72c4:	f006 0303 	and.w	r3, r6, #3
   d72c8:	2b01      	cmp	r3, #1
   d72ca:	d009      	beq.n	d72e0 <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d72cc:	2b02      	cmp	r3, #2
   d72ce:	d005      	beq.n	d72dc <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d72d0:	2b00      	cmp	r3, #0
   d72d2:	d134      	bne.n	d733e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d72d4:	0571      	lsls	r1, r6, #21
   d72d6:	d432      	bmi.n	d733e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d72d8:	2301      	movs	r3, #1
   d72da:	e002      	b.n	d72e2 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d72dc:	2303      	movs	r3, #3
   d72de:	e000      	b.n	d72e2 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d72e0:	2302      	movs	r3, #2
   d72e2:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d72e4:	78a1      	ldrb	r1, [r4, #2]
   d72e6:	078b      	lsls	r3, r1, #30
   d72e8:	d503      	bpl.n	d72f2 <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d72ea:	7823      	ldrb	r3, [r4, #0]
   d72ec:	f013 0f11 	tst.w	r3, #17
   d72f0:	d125      	bne.n	d733e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d72f2:	b24b      	sxtb	r3, r1
   d72f4:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d72f8:	f006 0108 	and.w	r1, r6, #8
   d72fc:	bf14      	ite	ne
   d72fe:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d7302:	2700      	moveq	r7, #0
   d7304:	4319      	orrs	r1, r3
   d7306:	4339      	orrs	r1, r7
   d7308:	70a1      	strb	r1, [r4, #2]
   d730a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d730c:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d730e:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d7310:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d7312:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d7316:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d731a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d731e:	d504      	bpl.n	d732a <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d7320:	b181      	cbz	r1, d7344 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d7322:	f000 fac8 	bl	d78b6 <_ZN9FatVolume9freeChainEm>
   d7326:	b968      	cbnz	r0, d7344 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d7328:	e009      	b.n	d733e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d732a:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d732c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d732e:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d7330:	0473      	lsls	r3, r6, #17
   d7332:	d50c      	bpl.n	d734e <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d7334:	69e1      	ldr	r1, [r4, #28]
   d7336:	4620      	mov	r0, r4
   d7338:	f7ff ff54 	bl	d71e4 <_ZN7FatFile7seekSetEm>
   d733c:	b938      	cbnz	r0, d734e <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d733e:	2000      	movs	r0, #0
   d7340:	7020      	strb	r0, [r4, #0]
  return false;
   d7342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d7344:	78a3      	ldrb	r3, [r4, #2]
   d7346:	f043 0304 	orr.w	r3, r3, #4
   d734a:	70a3      	strb	r3, [r4, #2]
   d734c:	e7f0      	b.n	d7330 <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d734e:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d7350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7352 <_ZN7FatFile8openNextEPS_i>:
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   d7352:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   d7356:	7803      	ldrb	r3, [r0, #0]
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   d7358:	4606      	mov	r6, r0
   d735a:	460d      	mov	r5, r1
   d735c:	4617      	mov	r7, r2
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   d735e:	bb53      	cbnz	r3, d73b6 <_ZN7FatFile8openNextEPS_i+0x64>
   d7360:	780b      	ldrb	r3, [r1, #0]
   d7362:	f013 0f70 	tst.w	r3, #112	; 0x70
   d7366:	d026      	beq.n	d73b6 <_ZN7FatFile8openNextEPS_i+0x64>
   d7368:	694c      	ldr	r4, [r1, #20]
   d736a:	f014 041f 	ands.w	r4, r4, #31
   d736e:	d122      	bne.n	d73b6 <_ZN7FatFile8openNextEPS_i+0x64>
   d7370:	46a0      	mov	r8, r4
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    dir_t* dir = dirFile->readDirCache();
   d7372:	2100      	movs	r1, #0
   d7374:	4628      	mov	r0, r5
   d7376:	f8d5 9014 	ldr.w	r9, [r5, #20]
   d737a:	f7ff ff16 	bl	d71aa <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d737e:	b1d0      	cbz	r0, d73b6 <_ZN7FatFile8openNextEPS_i+0x64>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
   d7380:	7803      	ldrb	r3, [r0, #0]
   d7382:	b1c3      	cbz	r3, d73b6 <_ZN7FatFile8openNextEPS_i+0x64>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   d7384:	2b2e      	cmp	r3, #46	; 0x2e
   d7386:	d101      	bne.n	d738c <_ZN7FatFile8openNextEPS_i+0x3a>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
        lfnOrd = ldir->ord & 0X1F;
        chksum = ldir->chksum;
      }
    } else {
      lfnOrd = 0;
   d7388:	2400      	movs	r4, #0
   d738a:	e7f2      	b.n	d7372 <_ZN7FatFile8openNextEPS_i+0x20>
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   d738c:	2be5      	cmp	r3, #229	; 0xe5
   d738e:	d0fb      	beq.n	d7388 <_ZN7FatFile8openNextEPS_i+0x36>
   d7390:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d7392:	f011 0f08 	tst.w	r1, #8
   d7396:	d105      	bne.n	d73a4 <_ZN7FatFile8openNextEPS_i+0x52>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   d7398:	b17c      	cbz	r4, d73ba <_ZN7FatFile8openNextEPS_i+0x68>
   d739a:	f7ff fa07 	bl	d67ac <_ZN7FatFile11lfnChecksumEPh>
   d739e:	4580      	cmp	r8, r0
   d73a0:	d109      	bne.n	d73b6 <_ZN7FatFile8openNextEPS_i+0x64>
   d73a2:	e00a      	b.n	d73ba <_ZN7FatFile8openNextEPS_i+0x68>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d73a4:	290f      	cmp	r1, #15
   d73a6:	d1ef      	bne.n	d7388 <_ZN7FatFile8openNextEPS_i+0x36>
      ldir = reinterpret_cast<ldir_t*>(dir);
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   d73a8:	0659      	lsls	r1, r3, #25
   d73aa:	d5e2      	bpl.n	d7372 <_ZN7FatFile8openNextEPS_i+0x20>
        lfnOrd = ldir->ord & 0X1F;
   d73ac:	f003 041f 	and.w	r4, r3, #31
        chksum = ldir->chksum;
   d73b0:	f890 800d 	ldrb.w	r8, [r0, #13]
   d73b4:	e7dd      	b.n	d7372 <_ZN7FatFile8openNextEPS_i+0x20>
      lfnOrd = 0;
    }
  }

fail:
  return false;
   d73b6:	2000      	movs	r0, #0
   d73b8:	e007      	b.n	d73ca <_ZN7FatFile8openNextEPS_i+0x78>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   d73ba:	9400      	str	r4, [sp, #0]
   d73bc:	463b      	mov	r3, r7
   d73be:	f3c9 124f 	ubfx	r2, r9, #5, #16
   d73c2:	4629      	mov	r1, r5
   d73c4:	4630      	mov	r0, r6
   d73c6:	f7ff ff56 	bl	d7276 <_ZN7FatFile15openCachedEntryEPS_tih>
    }
  }

fail:
  return false;
}
   d73ca:	b003      	add	sp, #12
   d73cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d73d0 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d73d0:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d73d2:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d73d4:	4604      	mov	r4, r0
  if (!isOpen()) {
   d73d6:	b90b      	cbnz	r3, d73dc <_ZN7FatFile4syncEv+0xc>
    return true;
   d73d8:	2001      	movs	r0, #1
   d73da:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d73dc:	7883      	ldrb	r3, [r0, #2]
   d73de:	075a      	lsls	r2, r3, #29
   d73e0:	d523      	bpl.n	d742a <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d73e2:	2101      	movs	r1, #1
   d73e4:	f7ff fdca 	bl	d6f7c <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d73e8:	4605      	mov	r5, r0
   d73ea:	b928      	cbnz	r0, d73f8 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d73ec:	7863      	ldrb	r3, [r4, #1]
   d73ee:	f043 0301 	orr.w	r3, r3, #1
   d73f2:	7063      	strb	r3, [r4, #1]
  return false;
   d73f4:	2000      	movs	r0, #0
   d73f6:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d73f8:	7803      	ldrb	r3, [r0, #0]
   d73fa:	2be5      	cmp	r3, #229	; 0xe5
   d73fc:	d0f6      	beq.n	d73ec <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d73fe:	7823      	ldrb	r3, [r4, #0]
   d7400:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d7402:	bf44      	itt	mi
   d7404:	69e3      	ldrmi	r3, [r4, #28]
   d7406:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d7408:	8c23      	ldrh	r3, [r4, #32]
   d740a:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d740c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d740e:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d7410:	4b09      	ldr	r3, [pc, #36]	; (d7438 <_ZN7FatFile4syncEv+0x68>)
   d7412:	681b      	ldr	r3, [r3, #0]
   d7414:	b12b      	cbz	r3, d7422 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d7416:	f100 0116 	add.w	r1, r0, #22
   d741a:	3018      	adds	r0, #24
   d741c:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d741e:	8b2b      	ldrh	r3, [r5, #24]
   d7420:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d7422:	78a3      	ldrb	r3, [r4, #2]
   d7424:	f023 0304 	bic.w	r3, r3, #4
   d7428:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d742a:	68a0      	ldr	r0, [r4, #8]
   d742c:	f7ff f9b1 	bl	d6792 <_ZN9FatVolume9cacheSyncEv>
   d7430:	2800      	cmp	r0, #0
   d7432:	d0db      	beq.n	d73ec <_ZN7FatFile4syncEv+0x1c>
   d7434:	e7d0      	b.n	d73d8 <_ZN7FatFile4syncEv+0x8>
   d7436:	bf00      	nop
   d7438:	2003df44 	.word	0x2003df44

000d743c <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d743c:	b510      	push	{r4, lr}
   d743e:	4604      	mov	r4, r0
  bool rtn = sync();
   d7440:	f7ff ffc6 	bl	d73d0 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d7444:	2300      	movs	r3, #0
   d7446:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d7448:	bd10      	pop	{r4, pc}

000d744a <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d744a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d744c:	b093      	sub	sp, #76	; 0x4c
   d744e:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d7450:	2300      	movs	r3, #0
   d7452:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d7456:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d745a:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d745c:	9201      	str	r2, [sp, #4]
   d745e:	4606      	mov	r6, r0
   d7460:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d7462:	b10b      	cbz	r3, d7468 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d7464:	2000      	movs	r0, #0
   d7466:	e03d      	b.n	d74e4 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d7468:	780b      	ldrb	r3, [r1, #0]
   d746a:	f013 0f70 	tst.w	r3, #112	; 0x70
   d746e:	d0f9      	beq.n	d7464 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d7470:	7813      	ldrb	r3, [r2, #0]
   d7472:	2b2f      	cmp	r3, #47	; 0x2f
   d7474:	d112      	bne.n	d749c <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d7476:	9b01      	ldr	r3, [sp, #4]
   d7478:	781a      	ldrb	r2, [r3, #0]
   d747a:	2a2f      	cmp	r2, #47	; 0x2f
   d747c:	d102      	bne.n	d7484 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d747e:	3301      	adds	r3, #1
   d7480:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d7482:	e7f8      	b.n	d7476 <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d7484:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d7486:	b91a      	cbnz	r2, d7490 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d7488:	4630      	mov	r0, r6
   d748a:	f7ff fdb0 	bl	d6fee <_ZN7FatFile8openRootEP9FatVolume>
   d748e:	e029      	b.n	d74e4 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d7490:	a809      	add	r0, sp, #36	; 0x24
   d7492:	f7ff fdac 	bl	d6fee <_ZN7FatFile8openRootEP9FatVolume>
   d7496:	2800      	cmp	r0, #0
   d7498:	d0e4      	beq.n	d7464 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d749a:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d749c:	aa01      	add	r2, sp, #4
   d749e:	a903      	add	r1, sp, #12
   d74a0:	9801      	ldr	r0, [sp, #4]
   d74a2:	f7ff f9a9 	bl	d67f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d74a6:	2800      	cmp	r0, #0
   d74a8:	d0dc      	beq.n	d7464 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d74aa:	9b01      	ldr	r3, [sp, #4]
   d74ac:	781b      	ldrb	r3, [r3, #0]
   d74ae:	b19b      	cbz	r3, d74d8 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d74b0:	2300      	movs	r3, #0
   d74b2:	aa03      	add	r2, sp, #12
   d74b4:	4621      	mov	r1, r4
   d74b6:	4630      	mov	r0, r6
   d74b8:	f7ff fb42 	bl	d6b40 <_ZN7FatFile4openEPS_P7fname_ti>
   d74bc:	2800      	cmp	r0, #0
   d74be:	d0d1      	beq.n	d7464 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d74c0:	4635      	mov	r5, r6
   d74c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d74c4:	ac09      	add	r4, sp, #36	; 0x24
   d74c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d74c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d74ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d74cc:	682b      	ldr	r3, [r5, #0]
   d74ce:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d74d0:	4630      	mov	r0, r6
   d74d2:	f7ff ffb3 	bl	d743c <_ZN7FatFile5closeEv>
   d74d6:	e7e0      	b.n	d749a <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d74d8:	463b      	mov	r3, r7
   d74da:	aa03      	add	r2, sp, #12
   d74dc:	4621      	mov	r1, r4
   d74de:	4630      	mov	r0, r6
   d74e0:	f7ff fb2e 	bl	d6b40 <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d74e4:	b013      	add	sp, #76	; 0x4c
   d74e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d74e8 <_ZN7FatFile6removeEPS_PKc>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove(FatFile* dirFile, const char* path) {
   d74e8:	b500      	push	{lr}
   d74ea:	b08b      	sub	sp, #44	; 0x2c
   d74ec:	2300      	movs	r3, #0
   d74ee:	f88d 3004 	strb.w	r3, [sp, #4]
   d74f2:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile file;
  if (!file.open(dirFile, path, O_WRONLY)) {
   d74f6:	460a      	mov	r2, r1
   d74f8:	2301      	movs	r3, #1
   d74fa:	4601      	mov	r1, r0
   d74fc:	a801      	add	r0, sp, #4
   d74fe:	f7ff ffa4 	bl	d744a <_ZN7FatFile4openEPS_PKci>
   d7502:	b110      	cbz	r0, d750a <_ZN7FatFile6removeEPS_PKc+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return file.remove();
   d7504:	a801      	add	r0, sp, #4
   d7506:	f7ff fa63 	bl	d69d0 <_ZN7FatFile6removeEv>

fail:
  return false;
}
   d750a:	b00b      	add	sp, #44	; 0x2c
   d750c:	f85d fb04 	ldr.w	pc, [sp], #4

000d7510 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d7510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d7514:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d7516:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d7518:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d751a:	4604      	mov	r4, r0
   d751c:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d751e:	d508      	bpl.n	d7532 <_ZN7FatFile5writeEPKvj+0x22>
   d7520:	7883      	ldrb	r3, [r0, #2]
   d7522:	079a      	lsls	r2, r3, #30
   d7524:	d505      	bpl.n	d7532 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d7526:	071b      	lsls	r3, r3, #28
   d7528:	d50b      	bpl.n	d7542 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d752a:	69e1      	ldr	r1, [r4, #28]
   d752c:	f7ff fe5a 	bl	d71e4 <_ZN7FatFile7seekSetEm>
   d7530:	b938      	cbnz	r0, d7542 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d7532:	7863      	ldrb	r3, [r4, #1]
   d7534:	f043 0301 	orr.w	r3, r3, #1
   d7538:	7063      	strb	r3, [r4, #1]
  return -1;
   d753a:	f04f 30ff 	mov.w	r0, #4294967295
   d753e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d7542:	6963      	ldr	r3, [r4, #20]
   d7544:	43db      	mvns	r3, r3
   d7546:	4598      	cmp	r8, r3
   d7548:	d8f3      	bhi.n	d7532 <_ZN7FatFile5writeEPKvj+0x22>
   d754a:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d754c:	f04f 0a00 	mov.w	sl, #0
   d7550:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d7552:	2e00      	cmp	r6, #0
   d7554:	f000 8081 	beq.w	d765a <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d7558:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d755a:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d755c:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d7560:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d7564:	d11c      	bne.n	d75a0 <_ZN7FatFile5writeEPKvj+0x90>
   d7566:	b9df      	cbnz	r7, d75a0 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d7568:	6921      	ldr	r1, [r4, #16]
   d756a:	b171      	cbz	r1, d758a <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d756c:	f104 0210 	add.w	r2, r4, #16
   d7570:	f000 f901 	bl	d7776 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d7574:	2800      	cmp	r0, #0
   d7576:	dbdc      	blt.n	d7532 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d7578:	f040 808e 	bne.w	d7698 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d757c:	4620      	mov	r0, r4
   d757e:	f7ff fcb2 	bl	d6ee6 <_ZN7FatFile10addClusterEv>
   d7582:	2800      	cmp	r0, #0
   d7584:	f040 8088 	bne.w	d7698 <_ZN7FatFile5writeEPKvj+0x188>
   d7588:	e7d3      	b.n	d7532 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d758a:	6a23      	ldr	r3, [r4, #32]
   d758c:	b93b      	cbnz	r3, d759e <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d758e:	4620      	mov	r0, r4
   d7590:	f7ff fca9 	bl	d6ee6 <_ZN7FatFile10addClusterEv>
   d7594:	2800      	cmp	r0, #0
   d7596:	d0cc      	beq.n	d7532 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d7598:	6923      	ldr	r3, [r4, #16]
   d759a:	6223      	str	r3, [r4, #32]
   d759c:	e000      	b.n	d75a0 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d759e:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d75a0:	6921      	ldr	r1, [r4, #16]
   d75a2:	68a0      	ldr	r0, [r4, #8]
   d75a4:	f000 f8e1 	bl	d776a <_ZNK9FatVolume17clusterFirstBlockEm>
   d75a8:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d75aa:	b917      	cbnz	r7, d75b2 <_ZN7FatFile5writeEPKvj+0xa2>
   d75ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d75b0:	d221      	bcs.n	d75f6 <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d75b2:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d75b6:	42b5      	cmp	r5, r6
   d75b8:	bf28      	it	cs
   d75ba:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d75bc:	b937      	cbnz	r7, d75cc <_ZN7FatFile5writeEPKvj+0xbc>
   d75be:	6963      	ldr	r3, [r4, #20]
   d75c0:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d75c2:	4293      	cmp	r3, r2
   d75c4:	bf34      	ite	cc
   d75c6:	2201      	movcc	r2, #1
   d75c8:	2205      	movcs	r2, #5
   d75ca:	e000      	b.n	d75ce <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d75cc:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d75ce:	68a0      	ldr	r0, [r4, #8]
   d75d0:	3024      	adds	r0, #36	; 0x24
   d75d2:	f000 f8a6 	bl	d7722 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d75d6:	2800      	cmp	r0, #0
   d75d8:	d0ab      	beq.n	d7532 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d75da:	4438      	add	r0, r7
   d75dc:	462a      	mov	r2, r5
   d75de:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d75e0:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d75e2:	f004 fa1e 	bl	dba22 <memcpy>
      if (512 == (n + blockOffset)) {
   d75e6:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d75ea:	d130      	bne.n	d764e <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d75ec:	68a0      	ldr	r0, [r4, #8]
   d75ee:	3024      	adds	r0, #36	; 0x24
   d75f0:	f000 f870 	bl	d76d4 <_ZN8FatCache4syncEv>
   d75f4:	e017      	b.n	d7626 <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d75f6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d75fa:	68a0      	ldr	r0, [r4, #8]
   d75fc:	d315      	bcc.n	d762a <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d75fe:	7902      	ldrb	r2, [r0, #4]
   d7600:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d7602:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d7604:	b2d2      	uxtb	r2, r2
   d7606:	4293      	cmp	r3, r2
   d7608:	bf28      	it	cs
   d760a:	4613      	movcs	r3, r2
   d760c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d760e:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d7610:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d7614:	d302      	bcc.n	d761c <_ZN7FatFile5writeEPKvj+0x10c>
   d7616:	441a      	add	r2, r3
   d7618:	4291      	cmp	r1, r2
   d761a:	d337      	bcc.n	d768c <_ZN7FatFile5writeEPKvj+0x17c>
   d761c:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d761e:	464a      	mov	r2, r9
   d7620:	6838      	ldr	r0, [r7, #0]
   d7622:	f000 fc6d 	bl	d7f00 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d7626:	b990      	cbnz	r0, d764e <_ZN7FatFile5writeEPKvj+0x13e>
   d7628:	e783      	b.n	d7532 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d762a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d762c:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d762e:	bf02      	ittt	eq
   d7630:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d7634:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d7638:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d763a:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d763c:	464a      	mov	r2, r9
   d763e:	6818      	ldr	r0, [r3, #0]
   d7640:	f000 fbec 	bl	d7e1c <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d7644:	2800      	cmp	r0, #0
   d7646:	f43f af74 	beq.w	d7532 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d764a:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d764e:	6963      	ldr	r3, [r4, #20]
   d7650:	442b      	add	r3, r5
   d7652:	6163      	str	r3, [r4, #20]
    src += n;
   d7654:	44a9      	add	r9, r5
    nToWrite -= n;
   d7656:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d7658:	e77a      	b.n	d7550 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d765a:	69e2      	ldr	r2, [r4, #28]
   d765c:	4293      	cmp	r3, r2
   d765e:	d901      	bls.n	d7664 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d7660:	61e3      	str	r3, [r4, #28]
   d7662:	e002      	b.n	d766a <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d7664:	4b0f      	ldr	r3, [pc, #60]	; (d76a4 <_ZN7FatFile5writeEPKvj+0x194>)
   d7666:	681b      	ldr	r3, [r3, #0]
   d7668:	b11b      	cbz	r3, d7672 <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d766a:	78a3      	ldrb	r3, [r4, #2]
   d766c:	f043 0304 	orr.w	r3, r3, #4
   d7670:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d7672:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d7676:	2b00      	cmp	r3, #0
   d7678:	db02      	blt.n	d7680 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d767a:	4640      	mov	r0, r8
   d767c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d7680:	4620      	mov	r0, r4
   d7682:	f7ff fea5 	bl	d73d0 <_ZN7FatFile4syncEv>
   d7686:	2800      	cmp	r0, #0
   d7688:	d1f7      	bne.n	d767a <_ZN7FatFile5writeEPKvj+0x16a>
   d768a:	e752      	b.n	d7532 <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d768c:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d7690:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d7694:	62c2      	str	r2, [r0, #44]	; 0x2c
   d7696:	e7c1      	b.n	d761c <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d7698:	6921      	ldr	r1, [r4, #16]
   d769a:	68a0      	ldr	r0, [r4, #8]
   d769c:	f000 f865 	bl	d776a <_ZNK9FatVolume17clusterFirstBlockEm>
   d76a0:	4601      	mov	r1, r0
   d76a2:	e783      	b.n	d75ac <_ZN7FatFile5writeEPKvj+0x9c>
   d76a4:	2003df44 	.word	0x2003df44

000d76a8 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d76a8:	f000 bff4 	b.w	d8694 <HAL_Pin_Map>

000d76ac <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d76ac:	b570      	push	{r4, r5, r6, lr}
   d76ae:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d76b0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d76b2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d76b4:	b149      	cbz	r1, d76ca <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d76b6:	f004 ff23 	bl	dc500 <strlen>
   d76ba:	682b      	ldr	r3, [r5, #0]
   d76bc:	4602      	mov	r2, r0
   d76be:	4621      	mov	r1, r4
   d76c0:	4628      	mov	r0, r5
   d76c2:	68db      	ldr	r3, [r3, #12]
    }
   d76c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d76c8:	4718      	bx	r3
    }
   d76ca:	bd70      	pop	{r4, r5, r6, pc}

000d76cc <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d76cc:	f000 bfe2 	b.w	d8694 <HAL_Pin_Map>

000d76d0 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d76d0:	f000 bfe0 	b.w	d8694 <HAL_Pin_Map>

000d76d4 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d76d4:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d76d6:	7803      	ldrb	r3, [r0, #0]
   d76d8:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d76da:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d76dc:	d51e      	bpl.n	d771c <_ZN8FatCache4syncEv+0x48>
   d76de:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d76e0:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d76e2:	f100 060c 	add.w	r6, r0, #12
   d76e6:	4632      	mov	r2, r6
   d76e8:	6818      	ldr	r0, [r3, #0]
   d76ea:	f000 fb97 	bl	d7e1c <_ZN9SdSpiCard10writeBlockEmPKh>
   d76ee:	4605      	mov	r5, r0
   d76f0:	b908      	cbnz	r0, d76f6 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d76f2:	2500      	movs	r5, #0
   d76f4:	e013      	b.n	d771e <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d76f6:	7823      	ldrb	r3, [r4, #0]
   d76f8:	079b      	lsls	r3, r3, #30
   d76fa:	d404      	bmi.n	d7706 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d76fc:	7823      	ldrb	r3, [r4, #0]
   d76fe:	f023 0301 	bic.w	r3, r3, #1
   d7702:	7023      	strb	r3, [r4, #0]
   d7704:	e00b      	b.n	d771e <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d7706:	6863      	ldr	r3, [r4, #4]
   d7708:	68a0      	ldr	r0, [r4, #8]
   d770a:	6919      	ldr	r1, [r3, #16]
   d770c:	4632      	mov	r2, r6
   d770e:	4401      	add	r1, r0
   d7710:	6818      	ldr	r0, [r3, #0]
   d7712:	f000 fb83 	bl	d7e1c <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d7716:	2800      	cmp	r0, #0
   d7718:	d1f0      	bne.n	d76fc <_ZN8FatCache4syncEv+0x28>
   d771a:	e7ea      	b.n	d76f2 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d771c:	2501      	movs	r5, #1

fail:
  return false;
}
   d771e:	4628      	mov	r0, r5
   d7720:	bd70      	pop	{r4, r5, r6, pc}

000d7722 <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d7722:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d7724:	6883      	ldr	r3, [r0, #8]
   d7726:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d7728:	4604      	mov	r4, r0
   d772a:	460e      	mov	r6, r1
   d772c:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d772e:	d014      	beq.n	d775a <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d7730:	f7ff ffd0 	bl	d76d4 <_ZN8FatCache4syncEv>
   d7734:	b908      	cbnz	r0, d773a <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d7736:	2000      	movs	r0, #0
   d7738:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d773a:	076b      	lsls	r3, r5, #29
   d773c:	d503      	bpl.n	d7746 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d773e:	2300      	movs	r3, #0
   d7740:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d7742:	60a6      	str	r6, [r4, #8]
   d7744:	e009      	b.n	d775a <_ZN8FatCache4readEmh+0x38>
   d7746:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d7748:	f104 020c 	add.w	r2, r4, #12
   d774c:	4631      	mov	r1, r6
   d774e:	6818      	ldr	r0, [r3, #0]
   d7750:	f000 fada 	bl	d7d08 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d7754:	2800      	cmp	r0, #0
   d7756:	d1f2      	bne.n	d773e <_ZN8FatCache4readEmh+0x1c>
   d7758:	e7ed      	b.n	d7736 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d775a:	7823      	ldrb	r3, [r4, #0]
   d775c:	4620      	mov	r0, r4
   d775e:	f005 0503 	and.w	r5, r5, #3
   d7762:	431d      	orrs	r5, r3
   d7764:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d7768:	bd70      	pop	{r4, r5, r6, pc}

000d776a <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d776a:	7983      	ldrb	r3, [r0, #6]
   d776c:	6940      	ldr	r0, [r0, #20]
   d776e:	3902      	subs	r1, #2
   d7770:	4099      	lsls	r1, r3
}
   d7772:	4408      	add	r0, r1
   d7774:	4770      	bx	lr

000d7776 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d7776:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d7778:	b570      	push	{r4, r5, r6, lr}
   d777a:	4605      	mov	r5, r0
   d777c:	460c      	mov	r4, r1
   d777e:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d7780:	d802      	bhi.n	d7788 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d7782:	f04f 30ff 	mov.w	r0, #4294967295
   d7786:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d7788:	69c3      	ldr	r3, [r0, #28]
   d778a:	4299      	cmp	r1, r3
   d778c:	d8f9      	bhi.n	d7782 <_ZN9FatVolume6fatGetEmPm+0xc>
   d778e:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d7790:	2b20      	cmp	r3, #32
   d7792:	d110      	bne.n	d77b6 <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d7794:	6981      	ldr	r1, [r0, #24]
   d7796:	2202      	movs	r2, #2
   d7798:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d779c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d77a0:	f7ff ffbf 	bl	d7722 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d77a4:	2800      	cmp	r0, #0
   d77a6:	d0ec      	beq.n	d7782 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d77a8:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d77ac:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d77b0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d77b4:	e00f      	b.n	d77d6 <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d77b6:	2b10      	cmp	r3, #16
   d77b8:	d1e3      	bne.n	d7782 <_ZN9FatVolume6fatGetEmPm+0xc>
   d77ba:	6983      	ldr	r3, [r0, #24]
   d77bc:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d77c0:	2202      	movs	r2, #2
   d77c2:	4419      	add	r1, r3
   d77c4:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d77c8:	f7ff ffab 	bl	d7722 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d77cc:	2800      	cmp	r0, #0
   d77ce:	d0d8      	beq.n	d7782 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d77d0:	b2e4      	uxtb	r4, r4
   d77d2:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d77d6:	69ea      	ldr	r2, [r5, #28]
   d77d8:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d77da:	bf9a      	itte	ls
   d77dc:	6033      	strls	r3, [r6, #0]
  return 1;
   d77de:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d77e0:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d77e2:	bd70      	pop	{r4, r5, r6, pc}

000d77e4 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d77e4:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d77e6:	b538      	push	{r3, r4, r5, lr}
   d77e8:	460c      	mov	r4, r1
   d77ea:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d77ec:	d801      	bhi.n	d77f2 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d77ee:	2000      	movs	r0, #0
   d77f0:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d77f2:	69c3      	ldr	r3, [r0, #28]
   d77f4:	4299      	cmp	r1, r3
   d77f6:	d8fa      	bhi.n	d77ee <_ZN9FatVolume6fatPutEmm+0xa>
   d77f8:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d77fa:	2b20      	cmp	r3, #32
   d77fc:	d10e      	bne.n	d781c <_ZN9FatVolume6fatPutEmm+0x38>
   d77fe:	6981      	ldr	r1, [r0, #24]
   d7800:	2203      	movs	r2, #3
   d7802:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d7806:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d780a:	f7ff ff8a 	bl	d7722 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d780e:	2800      	cmp	r0, #0
   d7810:	d0ed      	beq.n	d77ee <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d7812:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d7816:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d781a:	e00f      	b.n	d783c <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d781c:	2b10      	cmp	r3, #16
   d781e:	d1e6      	bne.n	d77ee <_ZN9FatVolume6fatPutEmm+0xa>
   d7820:	6983      	ldr	r3, [r0, #24]
   d7822:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d7826:	2203      	movs	r2, #3
   d7828:	4419      	add	r1, r3
   d782a:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d782e:	f7ff ff78 	bl	d7722 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d7832:	2800      	cmp	r0, #0
   d7834:	d0db      	beq.n	d77ee <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d7836:	b2e4      	uxtb	r4, r4
   d7838:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d783c:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d783e:	bd38      	pop	{r3, r4, r5, pc}

000d7840 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d7840:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d7844:	68c4      	ldr	r4, [r0, #12]
   d7846:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d7848:	4605      	mov	r5, r0
   d784a:	460e      	mov	r6, r1
   d784c:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d784e:	d207      	bcs.n	d7860 <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d7850:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d7852:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d7854:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d7856:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d7858:	429c      	cmp	r4, r3
   d785a:	d903      	bls.n	d7864 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d785c:	b9cf      	cbnz	r7, d7892 <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d785e:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d7860:	2701      	movs	r7, #1
   d7862:	e7f7      	b.n	d7854 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d7864:	42a6      	cmp	r6, r4
   d7866:	d014      	beq.n	d7892 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d7868:	aa01      	add	r2, sp, #4
   d786a:	4621      	mov	r1, r4
   d786c:	4628      	mov	r0, r5
   d786e:	f7ff ff82 	bl	d7776 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d7872:	2800      	cmp	r0, #0
   d7874:	db0d      	blt.n	d7892 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d7876:	d0ed      	beq.n	d7854 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d7878:	9b01      	ldr	r3, [sp, #4]
   d787a:	2b00      	cmp	r3, #0
   d787c:	d1ea      	bne.n	d7854 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d787e:	b107      	cbz	r7, d7882 <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d7880:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d7882:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d7886:	4621      	mov	r1, r4
   d7888:	4628      	mov	r0, r5
   d788a:	f7ff ffab 	bl	d77e4 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d788e:	4607      	mov	r7, r0
   d7890:	b908      	cbnz	r0, d7896 <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d7892:	2700      	movs	r7, #0
   d7894:	e00b      	b.n	d78ae <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d7896:	b916      	cbnz	r6, d789e <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d7898:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d789c:	e007      	b.n	d78ae <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d789e:	4622      	mov	r2, r4
   d78a0:	4631      	mov	r1, r6
   d78a2:	4628      	mov	r0, r5
   d78a4:	f7ff ff9e 	bl	d77e4 <_ZN9FatVolume6fatPutEmm>
   d78a8:	2800      	cmp	r0, #0
   d78aa:	d1f5      	bne.n	d7898 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d78ac:	e7f1      	b.n	d7892 <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d78ae:	4638      	mov	r0, r7
   d78b0:	b002      	add	sp, #8
   d78b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d78b6 <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d78b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d78b8:	4605      	mov	r5, r0
   d78ba:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d78bc:	aa01      	add	r2, sp, #4
   d78be:	4621      	mov	r1, r4
   d78c0:	4628      	mov	r0, r5
   d78c2:	f7ff ff58 	bl	d7776 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d78c6:	1e06      	subs	r6, r0, #0
   d78c8:	da01      	bge.n	d78ce <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d78ca:	2000      	movs	r0, #0
   d78cc:	e00f      	b.n	d78ee <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d78ce:	2200      	movs	r2, #0
   d78d0:	4621      	mov	r1, r4
   d78d2:	4628      	mov	r0, r5
   d78d4:	f7ff ff86 	bl	d77e4 <_ZN9FatVolume6fatPutEmm>
   d78d8:	2800      	cmp	r0, #0
   d78da:	d0f6      	beq.n	d78ca <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d78dc:	68eb      	ldr	r3, [r5, #12]
   d78de:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d78e0:	bf9c      	itt	ls
   d78e2:	f104 34ff 	addls.w	r4, r4, #4294967295
   d78e6:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d78e8:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d78ea:	2e00      	cmp	r6, #0
   d78ec:	d1e6      	bne.n	d78bc <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d78ee:	b002      	add	sp, #8
   d78f0:	bd70      	pop	{r4, r5, r6, pc}

000d78f2 <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d78f2:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d78f4:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d78f6:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d78f8:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d78fa:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d78fc:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d7900:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d7902:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d7904:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d7906:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d790a:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d790c:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d7910:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d7914:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d7918:	b1a1      	cbz	r1, d7944 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d791a:	2904      	cmp	r1, #4
   d791c:	d85d      	bhi.n	d79da <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d791e:	4611      	mov	r1, r2
   d7920:	3024      	adds	r0, #36	; 0x24
   d7922:	f7ff fefe 	bl	d7722 <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d7926:	2800      	cmp	r0, #0
   d7928:	d057      	beq.n	d79da <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d792a:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d792e:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d7932:	065b      	lsls	r3, r3, #25
   d7934:	d151      	bne.n	d79da <_ZN9FatVolume4initEh+0xe8>
   d7936:	351b      	adds	r5, #27
   d7938:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d793c:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d7940:	2d00      	cmp	r5, #0
   d7942:	d04a      	beq.n	d79da <_ZN9FatVolume4initEh+0xe8>
   d7944:	2200      	movs	r2, #0
   d7946:	4629      	mov	r1, r5
   d7948:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d794c:	f7ff fee9 	bl	d7722 <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d7950:	2800      	cmp	r0, #0
   d7952:	d042      	beq.n	d79da <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d7954:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d7958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d795c:	d13d      	bne.n	d79da <_ZN9FatVolume4initEh+0xe8>
   d795e:	7c03      	ldrb	r3, [r0, #16]
   d7960:	2b02      	cmp	r3, #2
   d7962:	d13a      	bne.n	d79da <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d7964:	89c3      	ldrh	r3, [r0, #14]
   d7966:	2b00      	cmp	r3, #0
   d7968:	d037      	beq.n	d79da <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d796a:	7b41      	ldrb	r1, [r0, #13]
   d796c:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d796e:	1e4b      	subs	r3, r1, #1
   d7970:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d7972:	2300      	movs	r3, #0
   d7974:	71a3      	strb	r3, [r4, #6]
   d7976:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d7978:	2301      	movs	r3, #1
   d797a:	428b      	cmp	r3, r1
   d797c:	d007      	beq.n	d798e <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d797e:	3e01      	subs	r6, #1
   d7980:	d02b      	beq.n	d79da <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d7982:	79a2      	ldrb	r2, [r4, #6]
   d7984:	005b      	lsls	r3, r3, #1
   d7986:	3201      	adds	r2, #1
   d7988:	b2db      	uxtb	r3, r3
   d798a:	71a2      	strb	r2, [r4, #6]
   d798c:	e7f5      	b.n	d797a <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d798e:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d7990:	b902      	cbnz	r2, d7994 <_ZN9FatVolume4initEh+0xa2>
   d7992:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d7994:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d7996:	89c6      	ldrh	r6, [r0, #14]
   d7998:	442e      	add	r6, r5
   d799a:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d799c:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d79a0:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d79a2:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d79a6:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d79a8:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d79ac:	0152      	lsls	r2, r2, #5
   d79ae:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d79b2:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d79b6:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d79b8:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d79bc:	b903      	cbnz	r3, d79c0 <_ZN9FatVolume4initEh+0xce>
   d79be:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d79c0:	1aad      	subs	r5, r5, r2
   d79c2:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d79c4:	79a5      	ldrb	r5, [r4, #6]
   d79c6:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d79ca:	1c6b      	adds	r3, r5, #1
   d79cc:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d79ce:	f640 73f4 	movw	r3, #4084	; 0xff4
   d79d2:	429d      	cmp	r5, r3
   d79d4:	d803      	bhi.n	d79de <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d79d6:	230c      	movs	r3, #12
   d79d8:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d79da:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d79dc:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d79de:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d79e2:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d79e4:	bf85      	ittet	hi
   d79e6:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d79e8:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d79ea:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d79ec:	2320      	movhi	r3, #32
   d79ee:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d79f0:	2001      	movs	r0, #1

fail:
  return false;
}
   d79f2:	bd70      	pop	{r4, r5, r6, pc}

000d79f4 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d79f4:	f000 be4e 	b.w	d8694 <HAL_Pin_Map>

000d79f8 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d79f8:	f000 be4c 	b.w	d8694 <HAL_Pin_Map>

000d79fc <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d79fc:	f000 be4a 	b.w	d8694 <HAL_Pin_Map>

000d7a00 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d7a00:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d7a02:	4c0e      	ldr	r4, [pc, #56]	; (d7a3c <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d7a04:	460e      	mov	r6, r1
   d7a06:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d7a08:	f000 ff04 	bl	d8814 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d7a0c:	6823      	ldr	r3, [r4, #0]
   d7a0e:	1ac0      	subs	r0, r0, r3
   d7a10:	4b0b      	ldr	r3, [pc, #44]	; (d7a40 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d7a12:	4298      	cmp	r0, r3
   d7a14:	d908      	bls.n	d7a28 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7a16:	f000 ff05 	bl	d8824 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7a1a:	4b0a      	ldr	r3, [pc, #40]	; (d7a44 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d7a1c:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d7a1e:	f001 f945 	bl	d8cac <spark_process>
   d7a22:	f000 fef7 	bl	d8814 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d7a26:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d7a28:	f000 fefc 	bl	d8824 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d7a2c:	b280      	uxth	r0, r0
   d7a2e:	1b80      	subs	r0, r0, r6
}
   d7a30:	42a8      	cmp	r0, r5
   d7a32:	bfd4      	ite	le
   d7a34:	2000      	movle	r0, #0
   d7a36:	2001      	movgt	r0, #1
   d7a38:	bd70      	pop	{r4, r5, r6, pc}
   d7a3a:	bf00      	nop
   d7a3c:	2003df48 	.word	0x2003df48
   d7a40:	000186a0 	.word	0x000186a0
   d7a44:	2003e3c4 	.word	0x2003e3c4

000d7a48 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d7a48:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d7a4a:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d7a4c:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d7a4e:	b94d      	cbnz	r5, d7a64 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d7a50:	6840      	ldr	r0, [r0, #4]
   d7a52:	f000 fa7d 	bl	d7f50 <_ZN14SdSpiAltDriver8activateEv>
   d7a56:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d7a58:	4629      	mov	r1, r5
   d7a5a:	7d18      	ldrb	r0, [r3, #20]
   d7a5c:	f002 ff65 	bl	da92a <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d7a60:	2301      	movs	r3, #1
   d7a62:	7223      	strb	r3, [r4, #8]
   d7a64:	bd38      	pop	{r3, r4, r5, pc}

000d7a66 <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d7a66:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d7a68:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d7a6a:	4604      	mov	r4, r0
  if (m_spiActive) {
   d7a6c:	b16b      	cbz	r3, d7a8a <_ZN9SdSpiCard7spiStopEv+0x24>
   d7a6e:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d7a70:	2101      	movs	r1, #1
   d7a72:	7d18      	ldrb	r0, [r3, #20]
   d7a74:	f002 ff59 	bl	da92a <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7a78:	21ff      	movs	r1, #255	; 0xff
   d7a7a:	6860      	ldr	r0, [r4, #4]
   d7a7c:	f000 fa9a 	bl	d7fb4 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d7a80:	6860      	ldr	r0, [r4, #4]
   d7a82:	f000 fa79 	bl	d7f78 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d7a86:	2300      	movs	r3, #0
   d7a88:	7223      	strb	r3, [r4, #8]
   d7a8a:	bd10      	pop	{r4, pc}

000d7a8c <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d7a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7a8e:	4604      	mov	r4, r0
   d7a90:	460d      	mov	r5, r1
   d7a92:	4616      	mov	r6, r2
   d7a94:	f000 fec6 	bl	d8824 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d7a98:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7a9a:	6860      	ldr	r0, [r4, #4]
   d7a9c:	f000 fa6f 	bl	d7f7e <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d7aa0:	28ff      	cmp	r0, #255	; 0xff
   d7aa2:	7260      	strb	r0, [r4, #9]
   d7aa4:	d109      	bne.n	d7aba <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d7aa6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7aaa:	4639      	mov	r1, r7
   d7aac:	4620      	mov	r0, r4
   d7aae:	f7ff ffa7 	bl	d7a00 <_ZN9SdSpiCard10isTimedOutEtt>
   d7ab2:	2800      	cmp	r0, #0
   d7ab4:	d0f1      	beq.n	d7a9a <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7ab6:	2355      	movs	r3, #85	; 0x55
   d7ab8:	e00b      	b.n	d7ad2 <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d7aba:	28fe      	cmp	r0, #254	; 0xfe
   d7abc:	d001      	beq.n	d7ac2 <_ZN9SdSpiCard8readDataEPhj+0x36>
   d7abe:	2350      	movs	r3, #80	; 0x50
   d7ac0:	e007      	b.n	d7ad2 <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d7ac2:	4632      	mov	r2, r6
   d7ac4:	4629      	mov	r1, r5
   d7ac6:	6860      	ldr	r0, [r4, #4]
   d7ac8:	f000 fa5e 	bl	d7f88 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d7acc:	7260      	strb	r0, [r4, #9]
   d7ace:	b130      	cbz	r0, d7ade <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7ad0:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d7ad2:	4620      	mov	r0, r4
   d7ad4:	7023      	strb	r3, [r4, #0]
   d7ad6:	f7ff ffc6 	bl	d7a66 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7ada:	2000      	movs	r0, #0
}
   d7adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7ade:	6860      	ldr	r0, [r4, #4]
   d7ae0:	f000 fa4d 	bl	d7f7e <_ZN14SdSpiAltDriver7receiveEv>
   d7ae4:	6860      	ldr	r0, [r4, #4]
   d7ae6:	f000 fa4a 	bl	d7f7e <_ZN14SdSpiAltDriver7receiveEv>
   d7aea:	2001      	movs	r0, #1
   d7aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7aee <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d7aee:	b570      	push	{r4, r5, r6, lr}
   d7af0:	4604      	mov	r4, r0
   d7af2:	460e      	mov	r6, r1
   d7af4:	f000 fe96 	bl	d8824 <HAL_Timer_Get_Milli_Seconds>
   d7af8:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d7afa:	4632      	mov	r2, r6
   d7afc:	4629      	mov	r1, r5
   d7afe:	4620      	mov	r0, r4
   d7b00:	f7ff ff7e 	bl	d7a00 <_ZN9SdSpiCard10isTimedOutEtt>
   d7b04:	b930      	cbnz	r0, d7b14 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d7b06:	6860      	ldr	r0, [r4, #4]
   d7b08:	f000 fa39 	bl	d7f7e <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d7b0c:	28ff      	cmp	r0, #255	; 0xff
   d7b0e:	d1f4      	bne.n	d7afa <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d7b10:	2001      	movs	r0, #1
   d7b12:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d7b14:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d7b16:	bd70      	pop	{r4, r5, r6, pc}

000d7b18 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d7b18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d7b1a:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d7b1c:	9201      	str	r2, [sp, #4]
   d7b1e:	4604      	mov	r4, r0
   d7b20:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d7b22:	b90b      	cbnz	r3, d7b28 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d7b24:	f7ff ff90 	bl	d7a48 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d7b28:	b125      	cbz	r5, d7b34 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d7b2a:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d7b2e:	4620      	mov	r0, r4
   d7b30:	f7ff ffdd 	bl	d7aee <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7b34:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d7b38:	6860      	ldr	r0, [r4, #4]
   d7b3a:	f000 fa3b 	bl	d7fb4 <_ZN14SdSpiAltDriver4sendEh>
   d7b3e:	f10d 0607 	add.w	r6, sp, #7
   d7b42:	f10d 0703 	add.w	r7, sp, #3
   d7b46:	f816 1901 	ldrb.w	r1, [r6], #-1
   d7b4a:	6860      	ldr	r0, [r4, #4]
   d7b4c:	f000 fa32 	bl	d7fb4 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d7b50:	42be      	cmp	r6, r7
   d7b52:	d1f8      	bne.n	d7b46 <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d7b54:	2d00      	cmp	r5, #0
   d7b56:	bf0c      	ite	eq
   d7b58:	2195      	moveq	r1, #149	; 0x95
   d7b5a:	2187      	movne	r1, #135	; 0x87
   d7b5c:	6860      	ldr	r0, [r4, #4]
   d7b5e:	f000 fa29 	bl	d7fb4 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7b62:	6860      	ldr	r0, [r4, #4]
   d7b64:	f000 fa0b 	bl	d7f7e <_ZN14SdSpiAltDriver7receiveEv>
   d7b68:	250b      	movs	r5, #11
   d7b6a:	6860      	ldr	r0, [r4, #4]
   d7b6c:	f000 fa07 	bl	d7f7e <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d7b70:	0603      	lsls	r3, r0, #24
   d7b72:	7260      	strb	r0, [r4, #9]
   d7b74:	d503      	bpl.n	d7b7e <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d7b76:	3d01      	subs	r5, #1
   d7b78:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d7b7c:	d1f5      	bne.n	d7b6a <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d7b7e:	b003      	add	sp, #12
   d7b80:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7b82 <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d7b82:	b570      	push	{r4, r5, r6, lr}
   d7b84:	4604      	mov	r4, r0
   d7b86:	460d      	mov	r5, r1
   d7b88:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d7b8a:	2137      	movs	r1, #55	; 0x37
   d7b8c:	2200      	movs	r2, #0
   d7b8e:	f7ff ffc3 	bl	d7b18 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d7b92:	4632      	mov	r2, r6
   d7b94:	4629      	mov	r1, r5
   d7b96:	4620      	mov	r0, r4
  }
   d7b98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d7b9c:	f7ff bfbc 	b.w	d7b18 <_ZN9SdSpiCard11cardCommandEhm>

000d7ba0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d7ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d7ba4:	2500      	movs	r5, #0
   d7ba6:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d7ba8:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d7baa:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d7bac:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d7bae:	4604      	mov	r4, r0
   d7bb0:	4690      	mov	r8, r2
   d7bb2:	461e      	mov	r6, r3
   d7bb4:	f000 fe36 	bl	d8824 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d7bb8:	4641      	mov	r1, r8
   d7bba:	4607      	mov	r7, r0
   d7bbc:	6860      	ldr	r0, [r4, #4]
   d7bbe:	f000 f9cb 	bl	d7f58 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d7bc2:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d7bc4:	4a4f      	ldr	r2, [pc, #316]	; (d7d04 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d7bc6:	721d      	strb	r5, [r3, #8]
   d7bc8:	f04f 0801 	mov.w	r8, #1
   d7bcc:	60da      	str	r2, [r3, #12]
   d7bce:	745d      	strb	r5, [r3, #17]
   d7bd0:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d7bd4:	4620      	mov	r0, r4
   d7bd6:	f7ff ff37 	bl	d7a48 <_ZN9SdSpiCard8spiStartEv>
   d7bda:	6863      	ldr	r3, [r4, #4]
   d7bdc:	4641      	mov	r1, r8
   d7bde:	7d18      	ldrb	r0, [r3, #20]
   d7be0:	f002 fea3 	bl	da92a <digitalWrite>
   d7be4:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7be6:	21ff      	movs	r1, #255	; 0xff
   d7be8:	6860      	ldr	r0, [r4, #4]
   d7bea:	3d01      	subs	r5, #1
   d7bec:	f000 f9e2 	bl	d7fb4 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d7bf0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d7bf4:	d1f7      	bne.n	d7be6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d7bf6:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d7bf8:	4629      	mov	r1, r5
   d7bfa:	7d18      	ldrb	r0, [r3, #20]
   d7bfc:	f002 fe95 	bl	da92a <digitalWrite>
   d7c00:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d7c02:	2200      	movs	r2, #0
   d7c04:	4611      	mov	r1, r2
   d7c06:	4620      	mov	r0, r4
   d7c08:	f7ff ff86 	bl	d7b18 <_ZN9SdSpiCard11cardCommandEhm>
   d7c0c:	2801      	cmp	r0, #1
   d7c0e:	4680      	mov	r8, r0
   d7c10:	d012      	beq.n	d7c38 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d7c12:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d7c14:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d7c18:	d101      	bne.n	d7c1e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7c1a:	2320      	movs	r3, #32
   d7c1c:	e057      	b.n	d7cce <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7c1e:	21fd      	movs	r1, #253	; 0xfd
   d7c20:	6860      	ldr	r0, [r4, #4]
   d7c22:	f000 f9c7 	bl	d7fb4 <_ZN14SdSpiAltDriver4sendEh>
   d7c26:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7c2a:	6860      	ldr	r0, [r4, #4]
   d7c2c:	f000 f9a7 	bl	d7f7e <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d7c30:	f1b8 0801 	subs.w	r8, r8, #1
   d7c34:	d1f9      	bne.n	d7c2a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d7c36:	e7e4      	b.n	d7c02 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d7c38:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d7c3c:	2108      	movs	r1, #8
   d7c3e:	4620      	mov	r0, r4
   d7c40:	f7ff ff6a 	bl	d7b18 <_ZN9SdSpiCard11cardCommandEhm>
   d7c44:	2805      	cmp	r0, #5
   d7c46:	d102      	bne.n	d7c4e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d7c48:	f884 800a 	strb.w	r8, [r4, #10]
   d7c4c:	e00f      	b.n	d7c6e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d7c4e:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7c50:	6860      	ldr	r0, [r4, #4]
   d7c52:	f000 f994 	bl	d7f7e <_ZN14SdSpiAltDriver7receiveEv>
   d7c56:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d7c58:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d7c5c:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d7c5e:	d1f7      	bne.n	d7c50 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d7c60:	28aa      	cmp	r0, #170	; 0xaa
   d7c62:	d102      	bne.n	d7c6a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d7c64:	2302      	movs	r3, #2
   d7c66:	72a3      	strb	r3, [r4, #10]
   d7c68:	e001      	b.n	d7c6e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7c6a:	2325      	movs	r3, #37	; 0x25
   d7c6c:	e02f      	b.n	d7cce <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d7c6e:	7aa3      	ldrb	r3, [r4, #10]
   d7c70:	2b02      	cmp	r3, #2
   d7c72:	bf0c      	ite	eq
   d7c74:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d7c78:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d7c7a:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d7c7c:	462a      	mov	r2, r5
   d7c7e:	2129      	movs	r1, #41	; 0x29
   d7c80:	4620      	mov	r0, r4
   d7c82:	f7ff ff7e 	bl	d7b82 <_ZN9SdSpiCard8cardAcmdEhm>
   d7c86:	4602      	mov	r2, r0
   d7c88:	b148      	cbz	r0, d7c9e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d7c8a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d7c8e:	4639      	mov	r1, r7
   d7c90:	4620      	mov	r0, r4
   d7c92:	f7ff feb5 	bl	d7a00 <_ZN9SdSpiCard10isTimedOutEtt>
   d7c96:	2800      	cmp	r0, #0
   d7c98:	d0f0      	beq.n	d7c7c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d7c9a:	2343      	movs	r3, #67	; 0x43
   d7c9c:	e017      	b.n	d7cce <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d7c9e:	7aa3      	ldrb	r3, [r4, #10]
   d7ca0:	2b02      	cmp	r3, #2
   d7ca2:	d00e      	beq.n	d7cc2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d7ca4:	4620      	mov	r0, r4
   d7ca6:	f7ff fede 	bl	d7a66 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d7caa:	6863      	ldr	r3, [r4, #4]
   d7cac:	68b0      	ldr	r0, [r6, #8]
   d7cae:	7934      	ldrb	r4, [r6, #4]
   d7cb0:	7b31      	ldrb	r1, [r6, #12]
   d7cb2:	7b72      	ldrb	r2, [r6, #13]
   d7cb4:	745a      	strb	r2, [r3, #17]
   d7cb6:	60d8      	str	r0, [r3, #12]
   d7cb8:	721c      	strb	r4, [r3, #8]
   d7cba:	7419      	strb	r1, [r3, #16]
  return true;
   d7cbc:	2001      	movs	r0, #1
   d7cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d7cc2:	213a      	movs	r1, #58	; 0x3a
   d7cc4:	4620      	mov	r0, r4
   d7cc6:	f7ff ff27 	bl	d7b18 <_ZN9SdSpiCard11cardCommandEhm>
   d7cca:	b138      	cbz	r0, d7cdc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d7ccc:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d7cce:	4620      	mov	r0, r4
   d7cd0:	7023      	strb	r3, [r4, #0]
   d7cd2:	f7ff fec8 	bl	d7a66 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7cd6:	2000      	movs	r0, #0
}
   d7cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7cdc:	6860      	ldr	r0, [r4, #4]
   d7cde:	f000 f94e 	bl	d7f7e <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d7ce2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d7ce6:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d7ce8:	bf04      	itt	eq
   d7cea:	2303      	moveq	r3, #3
   d7cec:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7cee:	6860      	ldr	r0, [r4, #4]
   d7cf0:	f000 f945 	bl	d7f7e <_ZN14SdSpiAltDriver7receiveEv>
   d7cf4:	6860      	ldr	r0, [r4, #4]
   d7cf6:	f000 f942 	bl	d7f7e <_ZN14SdSpiAltDriver7receiveEv>
   d7cfa:	6860      	ldr	r0, [r4, #4]
   d7cfc:	f000 f93f 	bl	d7f7e <_ZN14SdSpiAltDriver7receiveEv>
   d7d00:	e7d0      	b.n	d7ca4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d7d02:	bf00      	nop
   d7d04:	0003d090 	.word	0x0003d090

000d7d08 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d7d08:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d7d0a:	7a83      	ldrb	r3, [r0, #10]
   d7d0c:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d7d0e:	bf18      	it	ne
   d7d10:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d7d12:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d7d14:	460a      	mov	r2, r1
   d7d16:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d7d18:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d7d1a:	f7ff fefd 	bl	d7b18 <_ZN9SdSpiCard11cardCommandEhm>
   d7d1e:	b110      	cbz	r0, d7d26 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7d20:	2330      	movs	r3, #48	; 0x30
   d7d22:	7023      	strb	r3, [r4, #0]
   d7d24:	e00b      	b.n	d7d3e <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d7d26:	4629      	mov	r1, r5
   d7d28:	f44f 7200 	mov.w	r2, #512	; 0x200
   d7d2c:	4620      	mov	r0, r4
   d7d2e:	f7ff fead 	bl	d7a8c <_ZN9SdSpiCard8readDataEPhj>
   d7d32:	4605      	mov	r5, r0
   d7d34:	b118      	cbz	r0, d7d3e <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d7d36:	4620      	mov	r0, r4
   d7d38:	f7ff fe95 	bl	d7a66 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d7d3c:	e003      	b.n	d7d46 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d7d3e:	4620      	mov	r0, r4
   d7d40:	f7ff fe91 	bl	d7a66 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7d44:	2500      	movs	r5, #0
}
   d7d46:	4628      	mov	r0, r5
   d7d48:	bd38      	pop	{r3, r4, r5, pc}

000d7d4a <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7d4a:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d7d4c:	7a83      	ldrb	r3, [r0, #10]
   d7d4e:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7d50:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d7d52:	bf18      	it	ne
   d7d54:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d7d56:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7d58:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d7d5a:	f7ff fedd 	bl	d7b18 <_ZN9SdSpiCard11cardCommandEhm>
   d7d5e:	b130      	cbz	r0, d7d6e <_ZN9SdSpiCard9readStartEm+0x24>
   d7d60:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d7d62:	4620      	mov	r0, r4
   d7d64:	7023      	strb	r3, [r4, #0]
   d7d66:	f7ff fe7e 	bl	d7a66 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7d6a:	2000      	movs	r0, #0
   d7d6c:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d7d6e:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d7d70:	bd10      	pop	{r4, pc}

000d7d72 <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d7d72:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d7d74:	2200      	movs	r2, #0
   d7d76:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d7d78:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d7d7a:	f7ff fecd 	bl	d7b18 <_ZN9SdSpiCard11cardCommandEhm>
   d7d7e:	b130      	cbz	r0, d7d8e <_ZN9SdSpiCard8readStopEv+0x1c>
   d7d80:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d7d82:	4620      	mov	r0, r4
   d7d84:	7023      	strb	r3, [r4, #0]
   d7d86:	f7ff fe6e 	bl	d7a66 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7d8a:	2000      	movs	r0, #0
   d7d8c:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d7d8e:	4620      	mov	r0, r4
   d7d90:	f7ff fe69 	bl	d7a66 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d7d94:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d7d96:	bd10      	pop	{r4, pc}

000d7d98 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d7d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7d9a:	4605      	mov	r5, r0
   d7d9c:	4616      	mov	r6, r2
   d7d9e:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d7da0:	f7ff ffd3 	bl	d7d4a <_ZN9SdSpiCard9readStartEm>
   d7da4:	b198      	cbz	r0, d7dce <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d7da6:	2400      	movs	r4, #0
   d7da8:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d7daa:	429f      	cmp	r7, r3
   d7dac:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d7db0:	d908      	bls.n	d7dc4 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d7db2:	f44f 7200 	mov.w	r2, #512	; 0x200
   d7db6:	4628      	mov	r0, r5
   d7db8:	f7ff fe68 	bl	d7a8c <_ZN9SdSpiCard8readDataEPhj>
   d7dbc:	3401      	adds	r4, #1
   d7dbe:	2800      	cmp	r0, #0
   d7dc0:	d1f2      	bne.n	d7da8 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d7dc2:	e004      	b.n	d7dce <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d7dc4:	4628      	mov	r0, r5
}
   d7dc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d7dca:	f7ff bfd2 	b.w	d7d72 <_ZN9SdSpiCard8readStopEv>
}
   d7dce:	2000      	movs	r0, #0
   d7dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7dd2 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d7dd2:	b538      	push	{r3, r4, r5, lr}
   d7dd4:	4604      	mov	r4, r0
   d7dd6:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7dd8:	6840      	ldr	r0, [r0, #4]
   d7dda:	f000 f8eb 	bl	d7fb4 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d7dde:	f44f 7200 	mov.w	r2, #512	; 0x200
   d7de2:	4629      	mov	r1, r5
   d7de4:	6860      	ldr	r0, [r4, #4]
   d7de6:	f000 f8e9 	bl	d7fbc <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7dea:	21ff      	movs	r1, #255	; 0xff
   d7dec:	6860      	ldr	r0, [r4, #4]
   d7dee:	f000 f8e1 	bl	d7fb4 <_ZN14SdSpiAltDriver4sendEh>
   d7df2:	21ff      	movs	r1, #255	; 0xff
   d7df4:	6860      	ldr	r0, [r4, #4]
   d7df6:	f000 f8dd 	bl	d7fb4 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7dfa:	6860      	ldr	r0, [r4, #4]
   d7dfc:	f000 f8bf 	bl	d7f7e <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d7e00:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d7e02:	f000 001f 	and.w	r0, r0, #31
   d7e06:	2805      	cmp	r0, #5
   d7e08:	d006      	beq.n	d7e18 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7e0a:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d7e0c:	4620      	mov	r0, r4
   d7e0e:	7023      	strb	r3, [r4, #0]
   d7e10:	f7ff fe29 	bl	d7a66 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7e14:	2000      	movs	r0, #0
   d7e16:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d7e18:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d7e1a:	bd38      	pop	{r3, r4, r5, pc}

000d7e1c <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7e1c:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d7e1e:	7a83      	ldrb	r3, [r0, #10]
   d7e20:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d7e22:	bf18      	it	ne
   d7e24:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7e26:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d7e28:	460a      	mov	r2, r1
   d7e2a:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7e2c:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d7e2e:	f7ff fe73 	bl	d7b18 <_ZN9SdSpiCard11cardCommandEhm>
   d7e32:	4606      	mov	r6, r0
   d7e34:	b108      	cbz	r0, d7e3a <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d7e36:	2332      	movs	r3, #50	; 0x32
   d7e38:	e01d      	b.n	d7e76 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d7e3a:	462a      	mov	r2, r5
   d7e3c:	21fe      	movs	r1, #254	; 0xfe
   d7e3e:	4620      	mov	r0, r4
   d7e40:	f7ff ffc7 	bl	d7dd2 <_ZN9SdSpiCard9writeDataEhPKh>
   d7e44:	b1c0      	cbz	r0, d7e78 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7e46:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d7e4a:	4620      	mov	r0, r4
   d7e4c:	f7ff fe4f 	bl	d7aee <_ZN9SdSpiCard11waitNotBusyEt>
   d7e50:	4605      	mov	r5, r0
   d7e52:	b908      	cbnz	r0, d7e58 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d7e54:	235a      	movs	r3, #90	; 0x5a
   d7e56:	e00e      	b.n	d7e76 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d7e58:	4632      	mov	r2, r6
   d7e5a:	210d      	movs	r1, #13
   d7e5c:	4620      	mov	r0, r4
   d7e5e:	f7ff fe5b 	bl	d7b18 <_ZN9SdSpiCard11cardCommandEhm>
   d7e62:	b938      	cbnz	r0, d7e74 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7e64:	6860      	ldr	r0, [r4, #4]
   d7e66:	f000 f88a 	bl	d7f7e <_ZN14SdSpiAltDriver7receiveEv>
   d7e6a:	b918      	cbnz	r0, d7e74 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d7e6c:	4620      	mov	r0, r4
   d7e6e:	f7ff fdfa 	bl	d7a66 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d7e72:	e005      	b.n	d7e80 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7e74:	2329      	movs	r3, #41	; 0x29
   d7e76:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d7e78:	4620      	mov	r0, r4
   d7e7a:	f7ff fdf4 	bl	d7a66 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7e7e:	2500      	movs	r5, #0
}
   d7e80:	4628      	mov	r0, r5
   d7e82:	bd70      	pop	{r4, r5, r6, pc}

000d7e84 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d7e84:	b538      	push	{r3, r4, r5, lr}
   d7e86:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7e88:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d7e8c:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7e8e:	f7ff fe2e 	bl	d7aee <_ZN9SdSpiCard11waitNotBusyEt>
   d7e92:	b910      	cbnz	r0, d7e9a <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d7e94:	235b      	movs	r3, #91	; 0x5b
   d7e96:	7023      	strb	r3, [r4, #0]
   d7e98:	e005      	b.n	d7ea6 <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d7e9a:	462a      	mov	r2, r5
   d7e9c:	21fc      	movs	r1, #252	; 0xfc
   d7e9e:	4620      	mov	r0, r4
   d7ea0:	f7ff ff97 	bl	d7dd2 <_ZN9SdSpiCard9writeDataEhPKh>
   d7ea4:	b918      	cbnz	r0, d7eae <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d7ea6:	4620      	mov	r0, r4
   d7ea8:	f7ff fddd 	bl	d7a66 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7eac:	2000      	movs	r0, #0
}
   d7eae:	bd38      	pop	{r3, r4, r5, pc}

000d7eb0 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7eb0:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d7eb2:	7a83      	ldrb	r3, [r0, #10]
   d7eb4:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7eb6:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d7eb8:	bf18      	it	ne
   d7eba:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d7ebc:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7ebe:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d7ec0:	f7ff fe2a 	bl	d7b18 <_ZN9SdSpiCard11cardCommandEhm>
   d7ec4:	b130      	cbz	r0, d7ed4 <_ZN9SdSpiCard10writeStartEm+0x24>
   d7ec6:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d7ec8:	4620      	mov	r0, r4
   d7eca:	7023      	strb	r3, [r4, #0]
   d7ecc:	f7ff fdcb 	bl	d7a66 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7ed0:	2000      	movs	r0, #0
   d7ed2:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d7ed4:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d7ed6:	bd10      	pop	{r4, pc}

000d7ed8 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d7ed8:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7eda:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d7ede:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7ee0:	f7ff fe05 	bl	d7aee <_ZN9SdSpiCard11waitNotBusyEt>
   d7ee4:	4605      	mov	r5, r0
   d7ee6:	b120      	cbz	r0, d7ef2 <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7ee8:	21fd      	movs	r1, #253	; 0xfd
   d7eea:	6860      	ldr	r0, [r4, #4]
   d7eec:	f000 f862 	bl	d7fb4 <_ZN14SdSpiAltDriver4sendEh>
   d7ef0:	e001      	b.n	d7ef6 <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7ef2:	2356      	movs	r3, #86	; 0x56
   d7ef4:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d7ef6:	4620      	mov	r0, r4
   d7ef8:	f7ff fdb5 	bl	d7a66 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d7efc:	4628      	mov	r0, r5
   d7efe:	bd38      	pop	{r3, r4, r5, pc}

000d7f00 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d7f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7f02:	4605      	mov	r5, r0
   d7f04:	4616      	mov	r6, r2
   d7f06:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d7f08:	f7ff ffd2 	bl	d7eb0 <_ZN9SdSpiCard10writeStartEm>
   d7f0c:	b170      	cbz	r0, d7f2c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d7f0e:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d7f10:	42bc      	cmp	r4, r7
   d7f12:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d7f16:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d7f18:	d004      	beq.n	d7f24 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d7f1a:	f7ff ffb3 	bl	d7e84 <_ZN9SdSpiCard9writeDataEPKh>
   d7f1e:	b128      	cbz	r0, d7f2c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d7f20:	3401      	adds	r4, #1
   d7f22:	e7f5      	b.n	d7f10 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d7f24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d7f28:	f7ff bfd6 	b.w	d7ed8 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d7f2c:	4628      	mov	r0, r5
   d7f2e:	f7ff fd9a 	bl	d7a66 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d7f32:	2000      	movs	r0, #0
   d7f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7f36 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d7f36:	f000 bbad 	b.w	d8694 <HAL_Pin_Map>

000d7f3a <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d7f3a:	f000 bbab 	b.w	d8694 <HAL_Pin_Map>

000d7f3e <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d7f3e:	f000 bba9 	b.w	d8694 <HAL_Pin_Map>
	...

000d7f44 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d7f44:	4b01      	ldr	r3, [pc, #4]	; (d7f4c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d7f46:	2201      	movs	r2, #1
   d7f48:	701a      	strb	r2, [r3, #0]
   d7f4a:	4770      	bx	lr
   d7f4c:	2003df4c 	.word	0x2003df4c

000d7f50 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d7f50:	1d01      	adds	r1, r0, #4
   d7f52:	6800      	ldr	r0, [r0, #0]
   d7f54:	f000 bfcc 	b.w	d8ef0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d7f58 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d7f58:	b510      	push	{r4, lr}
   d7f5a:	4604      	mov	r4, r0
  m_csPin = csPin;
   d7f5c:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d7f5e:	6800      	ldr	r0, [r0, #0]
   d7f60:	f000 ff7a 	bl	d8e58 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d7f64:	7d20      	ldrb	r0, [r4, #20]
   d7f66:	2101      	movs	r1, #1
   d7f68:	f002 fcce 	bl	da908 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d7f6c:	7d20      	ldrb	r0, [r4, #20]
   d7f6e:	2101      	movs	r1, #1
}
   d7f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d7f74:	f002 bcd9 	b.w	da92a <digitalWrite>

000d7f78 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d7f78:	6800      	ldr	r0, [r0, #0]
   d7f7a:	f000 bfa0 	b.w	d8ebe <_ZN8SPIClass14endTransactionEv>

000d7f7e <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d7f7e:	21ff      	movs	r1, #255	; 0xff
   d7f80:	6800      	ldr	r0, [r0, #0]
   d7f82:	f001 b87b 	b.w	d907c <_ZN8SPIClass8transferEh>
	...

000d7f88 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d7f88:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7f8a:	4b08      	ldr	r3, [pc, #32]	; (d7fac <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d7f8c:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d7f8e:	2500      	movs	r5, #0
   d7f90:	4c07      	ldr	r4, [pc, #28]	; (d7fb0 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7f92:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d7f94:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7f96:	4613      	mov	r3, r2
   d7f98:	460a      	mov	r2, r1
   d7f9a:	4629      	mov	r1, r5
   d7f9c:	f001 f874 	bl	d9088 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d7fa0:	7823      	ldrb	r3, [r4, #0]
   d7fa2:	2b00      	cmp	r3, #0
   d7fa4:	d0fc      	beq.n	d7fa0 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d7fa6:	2000      	movs	r0, #0
   d7fa8:	b003      	add	sp, #12
   d7faa:	bd30      	pop	{r4, r5, pc}
   d7fac:	000d7f45 	.word	0x000d7f45
   d7fb0:	2003df4c 	.word	0x2003df4c

000d7fb4 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d7fb4:	6800      	ldr	r0, [r0, #0]
   d7fb6:	f001 b861 	b.w	d907c <_ZN8SPIClass8transferEh>
	...

000d7fbc <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d7fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d7fbe:	4b07      	ldr	r3, [pc, #28]	; (d7fdc <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d7fc0:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d7fc2:	2500      	movs	r5, #0
   d7fc4:	4c06      	ldr	r4, [pc, #24]	; (d7fe0 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d7fc6:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d7fc8:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d7fca:	4613      	mov	r3, r2
   d7fcc:	462a      	mov	r2, r5
   d7fce:	f001 f85b 	bl	d9088 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d7fd2:	7823      	ldrb	r3, [r4, #0]
   d7fd4:	2b00      	cmp	r3, #0
   d7fd6:	d0fc      	beq.n	d7fd2 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d7fd8:	b003      	add	sp, #12
   d7fda:	bd30      	pop	{r4, r5, pc}
   d7fdc:	000d7f45 	.word	0x000d7f45
   d7fe0:	2003df4c 	.word	0x2003df4c

000d7fe4 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d7fe4:	f000 bb56 	b.w	d8694 <HAL_Pin_Map>

000d7fe8 <_ZN5RFM694isr0Ev>:
  }
  RSSI = readRSSI();
  //digitalWrite(4, 0);
}

void RFM69::isr0() { selfPointer->interruptHandler(); }
   d7fe8:	4b02      	ldr	r3, [pc, #8]	; (d7ff4 <_ZN5RFM694isr0Ev+0xc>)
   d7fea:	6818      	ldr	r0, [r3, #0]
   d7fec:	6803      	ldr	r3, [r0, #0]
   d7fee:	681b      	ldr	r3, [r3, #0]
   d7ff0:	4718      	bx	r3
   d7ff2:	bf00      	nop
   d7ff4:	2003df64 	.word	0x2003df64

000d7ff8 <_ZN5RFM698unselectEv>:
  SPI1.setClockDivider(SPI_CLOCK_DIV16);
  digitalWrite(_slaveSelectPin, LOW);
}

/// UNselect the transceiver chip
void RFM69::unselect() {
   d7ff8:	b508      	push	{r3, lr}
  digitalWrite(_slaveSelectPin, HIGH);
   d7ffa:	2101      	movs	r1, #1
   d7ffc:	7900      	ldrb	r0, [r0, #4]
   d7ffe:	f002 fc94 	bl	da92a <digitalWrite>
  #ifndef PARTICLE
  SPCR = _SPCR;
  SPSR = _SPSR;
  #endif
  interrupts();
}
   d8002:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  //restore SPI settings to what they were before talking to RFM69
  #ifndef PARTICLE
  SPCR = _SPCR;
  SPSR = _SPSR;
  #endif
  interrupts();
   d8006:	f001 bec3 	b.w	d9d90 <_Z10interruptsv>
	...

000d800c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d800c:	b510      	push	{r4, lr}
        static SPIClass instance(Interface);
   d800e:	4c08      	ldr	r4, [pc, #32]	; (d8030 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x24>)
   d8010:	6823      	ldr	r3, [r4, #0]
   d8012:	07db      	lsls	r3, r3, #31
   d8014:	d40a      	bmi.n	d802c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x20>
   d8016:	4620      	mov	r0, r4
   d8018:	f7fc f847 	bl	d40aa <__cxa_guard_acquire>
   d801c:	b130      	cbz	r0, d802c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x20>
   d801e:	2101      	movs	r1, #1
   d8020:	4804      	ldr	r0, [pc, #16]	; (d8034 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x28>)
   d8022:	f000 ff0f 	bl	d8e44 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8026:	4620      	mov	r0, r4
   d8028:	f7fc f844 	bl	d40b4 <__cxa_guard_release>
        return instance;
    }
   d802c:	4801      	ldr	r0, [pc, #4]	; (d8034 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x28>)
   d802e:	bd10      	pop	{r4, pc}
   d8030:	2003df50 	.word	0x2003df50
   d8034:	2003df54 	.word	0x2003df54

000d8038 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   d8038:	b510      	push	{r4, lr}
   d803a:	4604      	mov	r4, r0
        return instance().transfer(data);
   d803c:	f7ff ffe6 	bl	d800c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d8040:	4621      	mov	r1, r4
    }
   d8042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d8046:	f001 b819 	b.w	d907c <_ZN8SPIClass8transferEh>

000d804a <_ZN5RFM696selectEv>:
  SPI1.transfer(value);
  unselect();
}

/// Select the transceiver
void RFM69::select() {
   d804a:	b510      	push	{r4, lr}
   d804c:	4604      	mov	r4, r0
  noInterrupts();
   d804e:	f001 fe9d 	bl	d9d8c <_Z12noInterruptsv>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d8052:	f7ff ffdb 	bl	d800c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d8056:	2100      	movs	r1, #0
   d8058:	f000 ff20 	bl	d8e9c <_ZN8SPIClass11setDataModeEh>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   d805c:	f7ff ffd6 	bl	d800c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d8060:	2101      	movs	r1, #1
   d8062:	f000 ff0a 	bl	d8e7a <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
   d8066:	f7ff ffd1 	bl	d800c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d806a:	2118      	movs	r1, #24
   d806c:	f000 ffe2 	bl	d9034 <_ZN8SPIClass15setClockDividerEh>
  //set RFM69 SPI settings
  SPI1.setDataMode(SPI_MODE0);
  SPI1.setBitOrder(MSBFIRST);
  //SPI_CLOCK_DIV16; // 72MHz / 16 = 4.5MHz
  SPI1.setClockDivider(SPI_CLOCK_DIV16);
  digitalWrite(_slaveSelectPin, LOW);
   d8070:	7920      	ldrb	r0, [r4, #4]
   d8072:	2100      	movs	r1, #0
}
   d8074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  //set RFM69 SPI settings
  SPI1.setDataMode(SPI_MODE0);
  SPI1.setBitOrder(MSBFIRST);
  //SPI_CLOCK_DIV16; // 72MHz / 16 = 4.5MHz
  SPI1.setClockDivider(SPI_CLOCK_DIV16);
  digitalWrite(_slaveSelectPin, LOW);
   d8078:	f002 bc57 	b.w	da92a <digitalWrite>

000d807c <_ZN5RFM697readRegEh>:
  rssi >>= 1;
  return rssi;
}

byte RFM69::readReg(byte addr)
{
   d807c:	b538      	push	{r3, r4, r5, lr}
   d807e:	460c      	mov	r4, r1
   d8080:	4605      	mov	r5, r0
  select();
   d8082:	f7ff ffe2 	bl	d804a <_ZN5RFM696selectEv>
  SPI1.transfer(addr & 0x7F);
   d8086:	f004 007f 	and.w	r0, r4, #127	; 0x7f
   d808a:	f7ff ffd5 	bl	d8038 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  byte regval = SPI1.transfer(0);
   d808e:	2000      	movs	r0, #0
   d8090:	f7ff ffd2 	bl	d8038 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d8094:	4604      	mov	r4, r0
  unselect();
   d8096:	4628      	mov	r0, r5
   d8098:	f7ff ffae 	bl	d7ff8 <_ZN5RFM698unselectEv>
  return regval;
}
   d809c:	4620      	mov	r0, r4
   d809e:	bd38      	pop	{r3, r4, r5, pc}

000d80a0 <_ZN5RFM698writeRegEhh>:

void RFM69::writeReg(byte addr, byte value)
{
   d80a0:	b570      	push	{r4, r5, r6, lr}
   d80a2:	460e      	mov	r6, r1
   d80a4:	4615      	mov	r5, r2
   d80a6:	4604      	mov	r4, r0
  select();
   d80a8:	f7ff ffcf 	bl	d804a <_ZN5RFM696selectEv>
  SPI1.transfer(addr | 0x80);
   d80ac:	f046 0080 	orr.w	r0, r6, #128	; 0x80
   d80b0:	f7ff ffc2 	bl	d8038 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  SPI1.transfer(value);
   d80b4:	4628      	mov	r0, r5
   d80b6:	f7ff ffbf 	bl	d8038 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  unselect();
   d80ba:	4620      	mov	r0, r4
}
   d80bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void RFM69::writeReg(byte addr, byte value)
{
  select();
  SPI1.transfer(addr | 0x80);
  SPI1.transfer(value);
  unselect();
   d80c0:	f7ff bf9a 	b.w	d7ff8 <_ZN5RFM698unselectEv>

000d80c4 <_ZN5RFM6913setPowerLevelEh>:
}

// set output power: 0=min, 31=max
// this results in a "weaker" transmitted signal, and directly results in a lower RSSI at the receiver
void RFM69::setPowerLevel(byte powerLevel)
{
   d80c4:	b510      	push	{r4, lr}
  _powerLevel = powerLevel;
   d80c6:	7241      	strb	r1, [r0, #9]
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | (_powerLevel > 31 ? 31 : _powerLevel));
   d80c8:	2111      	movs	r1, #17
}

// set output power: 0=min, 31=max
// this results in a "weaker" transmitted signal, and directly results in a lower RSSI at the receiver
void RFM69::setPowerLevel(byte powerLevel)
{
   d80ca:	4604      	mov	r4, r0
  _powerLevel = powerLevel;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | (_powerLevel > 31 ? 31 : _powerLevel));
   d80cc:	f7ff ffd6 	bl	d807c <_ZN5RFM697readRegEh>
   d80d0:	7a62      	ldrb	r2, [r4, #9]
   d80d2:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
   d80d6:	2a1f      	cmp	r2, #31
   d80d8:	bf94      	ite	ls
   d80da:	4302      	orrls	r2, r0
   d80dc:	f040 021f 	orrhi.w	r2, r0, #31
   d80e0:	2111      	movs	r1, #17
   d80e2:	4620      	mov	r0, r4
}
   d80e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// set output power: 0=min, 31=max
// this results in a "weaker" transmitted signal, and directly results in a lower RSSI at the receiver
void RFM69::setPowerLevel(byte powerLevel)
{
  _powerLevel = powerLevel;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | (_powerLevel > 31 ? 31 : _powerLevel));
   d80e8:	f7ff bfda 	b.w	d80a0 <_ZN5RFM698writeRegEhh>

000d80ec <_ZN5RFM698readRSSIEb>:
    unselect();
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
}

int RFM69::readRSSI(bool forceTrigger) {
   d80ec:	b510      	push	{r4, lr}
   d80ee:	4604      	mov	r4, r0
  int rssi = 0;
  if (forceTrigger)
   d80f0:	b149      	cbz	r1, d8106 <_ZN5RFM698readRSSIEb+0x1a>
  {
    //RSSI trigger not needed if DAGC is in continuous mode
    writeReg(REG_RSSICONFIG, RF_RSSI_START);
   d80f2:	2201      	movs	r2, #1
   d80f4:	2123      	movs	r1, #35	; 0x23
   d80f6:	f7ff ffd3 	bl	d80a0 <_ZN5RFM698writeRegEhh>
    while ((readReg(REG_RSSICONFIG) & RF_RSSI_DONE) == 0x00); // Wait for RSSI_Ready
   d80fa:	2123      	movs	r1, #35	; 0x23
   d80fc:	4620      	mov	r0, r4
   d80fe:	f7ff ffbd 	bl	d807c <_ZN5RFM697readRegEh>
   d8102:	0783      	lsls	r3, r0, #30
   d8104:	d5f9      	bpl.n	d80fa <_ZN5RFM698readRSSIEb+0xe>
  }
  rssi = -readReg(REG_RSSIVALUE);
   d8106:	2124      	movs	r1, #36	; 0x24
   d8108:	4620      	mov	r0, r4
   d810a:	f7ff ffb7 	bl	d807c <_ZN5RFM697readRegEh>
   d810e:	4240      	negs	r0, r0
  rssi >>= 1;
  return rssi;
   d8110:	1040      	asrs	r0, r0, #1
}
   d8112:	bd10      	pop	{r4, pc}

000d8114 <_ZN5RFM6916setHighPowerRegsEb>:
  uint16_t baudRate = 32000000L / speedBPS;;
  
  writeReg(REG_BITRATEMSB, (baudRate >> 8) & 0xFF);
  writeReg(REG_BITRATELSB, (baudRate >> 0) & 0xFF);
}
void RFM69::setHighPowerRegs(bool onOff) {
   d8114:	b538      	push	{r3, r4, r5, lr}
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
   d8116:	2900      	cmp	r1, #0
   d8118:	bf14      	ite	ne
   d811a:	225d      	movne	r2, #93	; 0x5d
   d811c:	2255      	moveq	r2, #85	; 0x55
   d811e:	460c      	mov	r4, r1
   d8120:	215a      	movs	r1, #90	; 0x5a
  uint16_t baudRate = 32000000L / speedBPS;;
  
  writeReg(REG_BITRATEMSB, (baudRate >> 8) & 0xFF);
  writeReg(REG_BITRATELSB, (baudRate >> 0) & 0xFF);
}
void RFM69::setHighPowerRegs(bool onOff) {
   d8122:	4605      	mov	r5, r0
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
   d8124:	f7ff ffbc 	bl	d80a0 <_ZN5RFM698writeRegEhh>
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
   d8128:	2c00      	cmp	r4, #0
   d812a:	4628      	mov	r0, r5
   d812c:	bf14      	ite	ne
   d812e:	227c      	movne	r2, #124	; 0x7c
   d8130:	2270      	moveq	r2, #112	; 0x70
   d8132:	215c      	movs	r1, #92	; 0x5c
}
   d8134:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeReg(REG_BITRATEMSB, (baudRate >> 8) & 0xFF);
  writeReg(REG_BITRATELSB, (baudRate >> 0) & 0xFF);
}
void RFM69::setHighPowerRegs(bool onOff) {
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
   d8138:	f7ff bfb2 	b.w	d80a0 <_ZN5RFM698writeRegEhh>

000d813c <_ZN5RFM697setModeEh>:
  writeReg(REG_FRFMID, freqHz >> 8);
  writeReg(REG_FRFLSB, freqHz);
}

void RFM69::setMode(byte newMode)
{
   d813c:	b570      	push	{r4, r5, r6, lr}
	if (newMode == _mode) return; //TODO: can remove this?
   d813e:	4d28      	ldr	r5, [pc, #160]	; (d81e0 <_ZN5RFM697setModeEh+0xa4>)
   d8140:	782b      	ldrb	r3, [r5, #0]
   d8142:	428b      	cmp	r3, r1
  writeReg(REG_FRFMID, freqHz >> 8);
  writeReg(REG_FRFLSB, freqHz);
}

void RFM69::setMode(byte newMode)
{
   d8144:	4604      	mov	r4, r0
   d8146:	460e      	mov	r6, r1
	if (newMode == _mode) return; //TODO: can remove this?
   d8148:	d049      	beq.n	d81de <_ZN5RFM697setModeEh+0xa2>

	switch (newMode) {
   d814a:	2904      	cmp	r1, #4
   d814c:	d847      	bhi.n	d81de <_ZN5RFM697setModeEh+0xa2>
   d814e:	e8df f001 	tbb	[pc, r1]
   d8152:	2c34      	.short	0x2c34
   d8154:	1224      	.short	0x1224
   d8156:	03          	.byte	0x03
   d8157:	00          	.byte	0x00
		case RF69_MODE_TX:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
   d8158:	2101      	movs	r1, #1
   d815a:	f7ff ff8f 	bl	d807c <_ZN5RFM697readRegEh>
   d815e:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d8162:	f042 020c 	orr.w	r2, r2, #12
   d8166:	2101      	movs	r1, #1
   d8168:	4620      	mov	r0, r4
   d816a:	f7ff ff99 	bl	d80a0 <_ZN5RFM698writeRegEhh>
      if (_isRFM69HW) setHighPowerRegs(true);
   d816e:	7aa3      	ldrb	r3, [r4, #10]
   d8170:	b363      	cbz	r3, d81cc <_ZN5RFM697setModeEh+0x90>
   d8172:	2101      	movs	r1, #1
   d8174:	e00d      	b.n	d8192 <_ZN5RFM697setModeEh+0x56>
			break;
		case RF69_MODE_RX:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
   d8176:	2101      	movs	r1, #1
   d8178:	f7ff ff80 	bl	d807c <_ZN5RFM697readRegEh>
   d817c:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d8180:	f042 0210 	orr.w	r2, r2, #16
   d8184:	2101      	movs	r1, #1
   d8186:	4620      	mov	r0, r4
   d8188:	f7ff ff8a 	bl	d80a0 <_ZN5RFM698writeRegEhh>
      if (_isRFM69HW) setHighPowerRegs(false);
   d818c:	7aa3      	ldrb	r3, [r4, #10]
   d818e:	b1eb      	cbz	r3, d81cc <_ZN5RFM697setModeEh+0x90>
   d8190:	2100      	movs	r1, #0
   d8192:	4620      	mov	r0, r4
   d8194:	f7ff ffbe 	bl	d8114 <_ZN5RFM6916setHighPowerRegsEb>
   d8198:	e018      	b.n	d81cc <_ZN5RFM697setModeEh+0x90>
			break;
		case RF69_MODE_SYNTH:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SYNTHESIZER);
   d819a:	2101      	movs	r1, #1
   d819c:	f7ff ff6e 	bl	d807c <_ZN5RFM697readRegEh>
   d81a0:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d81a4:	f042 0208 	orr.w	r2, r2, #8
   d81a8:	e00c      	b.n	d81c4 <_ZN5RFM697setModeEh+0x88>
			break;
		case RF69_MODE_STANDBY:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_STANDBY);
   d81aa:	2101      	movs	r1, #1
   d81ac:	f7ff ff66 	bl	d807c <_ZN5RFM697readRegEh>
   d81b0:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d81b4:	f042 0204 	orr.w	r2, r2, #4
   d81b8:	e004      	b.n	d81c4 <_ZN5RFM697setModeEh+0x88>
			break;
		case RF69_MODE_SLEEP:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
   d81ba:	2101      	movs	r1, #1
   d81bc:	f7ff ff5e 	bl	d807c <_ZN5RFM697readRegEh>
   d81c0:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d81c4:	2101      	movs	r1, #1
   d81c6:	4620      	mov	r0, r4
   d81c8:	f7ff ff6a 	bl	d80a0 <_ZN5RFM698writeRegEhh>
		default: return;
	}

	// we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
	while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // Wait for ModeReady
   d81cc:	782b      	ldrb	r3, [r5, #0]
   d81ce:	b92b      	cbnz	r3, d81dc <_ZN5RFM697setModeEh+0xa0>
   d81d0:	2127      	movs	r1, #39	; 0x27
   d81d2:	4620      	mov	r0, r4
   d81d4:	f7ff ff52 	bl	d807c <_ZN5RFM697readRegEh>
   d81d8:	0603      	lsls	r3, r0, #24
   d81da:	d5f7      	bpl.n	d81cc <_ZN5RFM697setModeEh+0x90>

	_mode = newMode;
   d81dc:	702e      	strb	r6, [r5, #0]
   d81de:	bd70      	pop	{r4, r5, r6, pc}
   d81e0:	2003dfa8 	.word	0x2003dfa8

000d81e4 <_ZN5RFM6912receiveBeginEv>:
}

void RFM69::isr0() { selfPointer->interruptHandler(); }

void RFM69::receiveBegin() {
  DATALEN = 0;
   d81e4:	4a15      	ldr	r2, [pc, #84]	; (d823c <_ZN5RFM6912receiveBeginEv+0x58>)
   d81e6:	2300      	movs	r3, #0
  //digitalWrite(4, 0);
}

void RFM69::isr0() { selfPointer->interruptHandler(); }

void RFM69::receiveBegin() {
   d81e8:	b510      	push	{r4, lr}
  DATALEN = 0;
   d81ea:	7013      	strb	r3, [r2, #0]
  SENDERID = 0;
   d81ec:	4a14      	ldr	r2, [pc, #80]	; (d8240 <_ZN5RFM6912receiveBeginEv+0x5c>)
   d81ee:	7013      	strb	r3, [r2, #0]
  TARGETID = 0;
   d81f0:	4a14      	ldr	r2, [pc, #80]	; (d8244 <_ZN5RFM6912receiveBeginEv+0x60>)
   d81f2:	7013      	strb	r3, [r2, #0]
  PAYLOADLEN = 0;
   d81f4:	4a14      	ldr	r2, [pc, #80]	; (d8248 <_ZN5RFM6912receiveBeginEv+0x64>)
   d81f6:	7013      	strb	r3, [r2, #0]
  ACK_REQUESTED = 0;
   d81f8:	4a14      	ldr	r2, [pc, #80]	; (d824c <_ZN5RFM6912receiveBeginEv+0x68>)
   d81fa:	7013      	strb	r3, [r2, #0]
  ACK_RECEIVED = 0;
   d81fc:	4a14      	ldr	r2, [pc, #80]	; (d8250 <_ZN5RFM6912receiveBeginEv+0x6c>)
   d81fe:	7013      	strb	r3, [r2, #0]
  RSSI = 0;
   d8200:	4a14      	ldr	r2, [pc, #80]	; (d8254 <_ZN5RFM6912receiveBeginEv+0x70>)
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
   d8202:	2128      	movs	r1, #40	; 0x28
  SENDERID = 0;
  TARGETID = 0;
  PAYLOADLEN = 0;
  ACK_REQUESTED = 0;
  ACK_RECEIVED = 0;
  RSSI = 0;
   d8204:	6013      	str	r3, [r2, #0]
  //digitalWrite(4, 0);
}

void RFM69::isr0() { selfPointer->interruptHandler(); }

void RFM69::receiveBegin() {
   d8206:	4604      	mov	r4, r0
  TARGETID = 0;
  PAYLOADLEN = 0;
  ACK_REQUESTED = 0;
  ACK_RECEIVED = 0;
  RSSI = 0;
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
   d8208:	f7ff ff38 	bl	d807c <_ZN5RFM697readRegEh>
   d820c:	0743      	lsls	r3, r0, #29
   d820e:	d50a      	bpl.n	d8226 <_ZN5RFM6912receiveBeginEv+0x42>
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
   d8210:	213d      	movs	r1, #61	; 0x3d
   d8212:	4620      	mov	r0, r4
   d8214:	f7ff ff32 	bl	d807c <_ZN5RFM697readRegEh>
   d8218:	f040 0204 	orr.w	r2, r0, #4
   d821c:	b2d2      	uxtb	r2, r2
   d821e:	213d      	movs	r1, #61	; 0x3d
   d8220:	4620      	mov	r0, r4
   d8222:	f7ff ff3d 	bl	d80a0 <_ZN5RFM698writeRegEhh>
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); //set DIO0 to "PAYLOADREADY" in receive mode
   d8226:	4620      	mov	r0, r4
   d8228:	2125      	movs	r1, #37	; 0x25
   d822a:	2240      	movs	r2, #64	; 0x40
   d822c:	f7ff ff38 	bl	d80a0 <_ZN5RFM698writeRegEhh>
  setMode(RF69_MODE_RX);
   d8230:	4620      	mov	r0, r4
   d8232:	2103      	movs	r1, #3
}
   d8234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ACK_RECEIVED = 0;
  RSSI = 0;
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); //set DIO0 to "PAYLOADREADY" in receive mode
  setMode(RF69_MODE_RX);
   d8238:	f7ff bf80 	b.w	d813c <_ZN5RFM697setModeEh>
   d823c:	2003dfa7 	.word	0x2003dfa7
   d8240:	2003df62 	.word	0x2003df62
   d8244:	2003df60 	.word	0x2003df60
   d8248:	2003df68 	.word	0x2003df68
   d824c:	2003df61 	.word	0x2003df61
   d8250:	2003df69 	.word	0x2003df69
   d8254:	2003df5c 	.word	0x2003df5c

000d8258 <_ZN5RFM6911receiveDoneEv>:
}

bool RFM69::receiveDone() {
   d8258:	b510      	push	{r4, lr}
   d825a:	4604      	mov	r4, r0
// ATOMIC_BLOCK(ATOMIC_FORCEON)
// {
  noInterrupts(); //re-enabled in unselect() via setMode() or via receiveBegin()
   d825c:	f001 fd96 	bl	d9d8c <_Z12noInterruptsv>
  if (_mode == RF69_MODE_RX && PAYLOADLEN>0)
   d8260:	4b0b      	ldr	r3, [pc, #44]	; (d8290 <_ZN5RFM6911receiveDoneEv+0x38>)
   d8262:	781a      	ldrb	r2, [r3, #0]
   d8264:	2a03      	cmp	r2, #3
   d8266:	d102      	bne.n	d826e <_ZN5RFM6911receiveDoneEv+0x16>
   d8268:	4a0a      	ldr	r2, [pc, #40]	; (d8294 <_ZN5RFM6911receiveDoneEv+0x3c>)
   d826a:	7812      	ldrb	r2, [r2, #0]
   d826c:	b952      	cbnz	r2, d8284 <_ZN5RFM6911receiveDoneEv+0x2c>
  {
    setMode(RF69_MODE_STANDBY); //enables interrupts
    return true;
  }
  else if (_mode == RF69_MODE_RX)  //already in RX no payload yet
   d826e:	781b      	ldrb	r3, [r3, #0]
   d8270:	2b03      	cmp	r3, #3
   d8272:	d102      	bne.n	d827a <_ZN5RFM6911receiveDoneEv+0x22>
  {
    interrupts(); //explicitly re-enable interrupts
   d8274:	f001 fd8c 	bl	d9d90 <_Z10interruptsv>
   d8278:	e002      	b.n	d8280 <_ZN5RFM6911receiveDoneEv+0x28>
    return false;
  }
  receiveBegin();
   d827a:	4620      	mov	r0, r4
   d827c:	f7ff ffb2 	bl	d81e4 <_ZN5RFM6912receiveBeginEv>
  return false;
   d8280:	2000      	movs	r0, #0
   d8282:	bd10      	pop	{r4, pc}
// ATOMIC_BLOCK(ATOMIC_FORCEON)
// {
  noInterrupts(); //re-enabled in unselect() via setMode() or via receiveBegin()
  if (_mode == RF69_MODE_RX && PAYLOADLEN>0)
  {
    setMode(RF69_MODE_STANDBY); //enables interrupts
   d8284:	4620      	mov	r0, r4
   d8286:	2101      	movs	r1, #1
   d8288:	f7ff ff58 	bl	d813c <_ZN5RFM697setModeEh>
    return true;
   d828c:	2001      	movs	r0, #1
    return false;
  }
  receiveBegin();
  return false;
//}
}
   d828e:	bd10      	pop	{r4, pc}
   d8290:	2003dfa8 	.word	0x2003dfa8
   d8294:	2003df68 	.word	0x2003df68

000d8298 <_ZN5RFM6912setHighPowerEb>:
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

void RFM69::setHighPower(bool onOff) {
  _isRFM69HW = onOff;
  writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
   d8298:	2900      	cmp	r1, #0
void RFM69::promiscuous(bool onOff) {
  _promiscuousMode=onOff;
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

void RFM69::setHighPower(bool onOff) {
   d829a:	b510      	push	{r4, lr}
   d829c:	4604      	mov	r4, r0
  _isRFM69HW = onOff;
   d829e:	7281      	strb	r1, [r0, #10]
  writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
   d82a0:	bf14      	ite	ne
   d82a2:	220f      	movne	r2, #15
   d82a4:	221a      	moveq	r2, #26
   d82a6:	2113      	movs	r1, #19
   d82a8:	f7ff fefa 	bl	d80a0 <_ZN5RFM698writeRegEhh>
  if (_isRFM69HW) //turning ON
   d82ac:	7aa3      	ldrb	r3, [r4, #10]
   d82ae:	b143      	cbz	r3, d82c2 <_ZN5RFM6912setHighPowerEb+0x2a>
    writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); //enable P1 & P2 amplifier stages
   d82b0:	2111      	movs	r1, #17
   d82b2:	4620      	mov	r0, r4
   d82b4:	f7ff fee2 	bl	d807c <_ZN5RFM697readRegEh>
   d82b8:	f000 021f 	and.w	r2, r0, #31
   d82bc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
   d82c0:	e002      	b.n	d82c8 <_ZN5RFM6912setHighPowerEb+0x30>
  else
    writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); //enable P0 only
   d82c2:	7a62      	ldrb	r2, [r4, #9]
   d82c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   d82c8:	4620      	mov	r0, r4
   d82ca:	2111      	movs	r1, #17
}
   d82cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  _isRFM69HW = onOff;
  writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
  if (_isRFM69HW) //turning ON
    writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); //enable P1 & P2 amplifier stages
  else
    writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); //enable P0 only
   d82d0:	f7ff bee6 	b.w	d80a0 <_ZN5RFM698writeRegEhh>

000d82d4 <_ZN5RFM6916interruptHandlerEv>:
	while (digitalRead(_interruptPin) == 0 && millis()-txStart < RF69_TX_LIMIT_MS); //wait for DIO0 to turn HIGH signalling transmission finish
  //while (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT == 0x00); // Wait for ModeReady
  setMode(RF69_MODE_STANDBY);
}

void RFM69::interruptHandler() {
   d82d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  //pinMode(4, OUTPUT);
  //digitalWrite(4, 1);
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
   d82d8:	4b3d      	ldr	r3, [pc, #244]	; (d83d0 <_ZN5RFM6916interruptHandlerEv+0xfc>)
   d82da:	781b      	ldrb	r3, [r3, #0]
   d82dc:	2b03      	cmp	r3, #3
	while (digitalRead(_interruptPin) == 0 && millis()-txStart < RF69_TX_LIMIT_MS); //wait for DIO0 to turn HIGH signalling transmission finish
  //while (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT == 0x00); // Wait for ModeReady
  setMode(RF69_MODE_STANDBY);
}

void RFM69::interruptHandler() {
   d82de:	4604      	mov	r4, r0
  //pinMode(4, OUTPUT);
  //digitalWrite(4, 1);
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
   d82e0:	d114      	bne.n	d830c <_ZN5RFM6916interruptHandlerEv+0x38>
   d82e2:	2128      	movs	r1, #40	; 0x28
   d82e4:	f7ff feca 	bl	d807c <_ZN5RFM697readRegEh>
   d82e8:	0743      	lsls	r3, r0, #29
   d82ea:	d417      	bmi.n	d831c <_ZN5RFM6916interruptHandlerEv+0x48>
   d82ec:	e00e      	b.n	d830c <_ZN5RFM6916interruptHandlerEv+0x38>

    for (byte i= 0; i < DATALEN; i++)
    {
      DATA[i] = SPI1.transfer(0);
    }
    if (DATALEN<RF69_MAX_DATA_LEN) DATA[DATALEN]=0; //add null at end of string
   d82ee:	7813      	ldrb	r3, [r2, #0]
   d82f0:	2b3c      	cmp	r3, #60	; 0x3c
   d82f2:	d804      	bhi.n	d82fe <_ZN5RFM6916interruptHandlerEv+0x2a>
   d82f4:	7813      	ldrb	r3, [r2, #0]
   d82f6:	4a37      	ldr	r2, [pc, #220]	; (d83d4 <_ZN5RFM6916interruptHandlerEv+0x100>)
   d82f8:	b2db      	uxtb	r3, r3
   d82fa:	2100      	movs	r1, #0
   d82fc:	54d1      	strb	r1, [r2, r3]
    unselect();
   d82fe:	4620      	mov	r0, r4
   d8300:	f7ff fe7a 	bl	d7ff8 <_ZN5RFM698unselectEv>
    setMode(RF69_MODE_RX);
   d8304:	2103      	movs	r1, #3
   d8306:	4620      	mov	r0, r4
   d8308:	f7ff ff18 	bl	d813c <_ZN5RFM697setModeEh>
  }
  RSSI = readRSSI();
   d830c:	2100      	movs	r1, #0
   d830e:	4620      	mov	r0, r4
   d8310:	f7ff feec 	bl	d80ec <_ZN5RFM698readRSSIEb>
   d8314:	4b30      	ldr	r3, [pc, #192]	; (d83d8 <_ZN5RFM6916interruptHandlerEv+0x104>)
   d8316:	6018      	str	r0, [r3, #0]
   d8318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  //pinMode(4, OUTPUT);
  //digitalWrite(4, 1);
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
  {
    //RSSI = readRSSI();
    setMode(RF69_MODE_STANDBY);
   d831c:	2101      	movs	r1, #1
   d831e:	4620      	mov	r0, r4
   d8320:	f7ff ff0c 	bl	d813c <_ZN5RFM697setModeEh>
    select();
   d8324:	4620      	mov	r0, r4
   d8326:	f7ff fe90 	bl	d804a <_ZN5RFM696selectEv>
    SPI1.transfer(REG_FIFO & 0x7f);
   d832a:	2000      	movs	r0, #0
   d832c:	f7ff fe84 	bl	d8038 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
    PAYLOADLEN = SPI1.transfer(0);
   d8330:	2000      	movs	r0, #0
   d8332:	f7ff fe81 	bl	d8038 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d8336:	4d29      	ldr	r5, [pc, #164]	; (d83dc <_ZN5RFM6916interruptHandlerEv+0x108>)
   d8338:	7028      	strb	r0, [r5, #0]
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
   d833a:	782b      	ldrb	r3, [r5, #0]
   d833c:	2b42      	cmp	r3, #66	; 0x42
   d833e:	d814      	bhi.n	d836a <_ZN5RFM6916interruptHandlerEv+0x96>
   d8340:	782b      	ldrb	r3, [r5, #0]
   d8342:	b2db      	uxtb	r3, r3
    TARGETID = SPI1.transfer(0);
   d8344:	2000      	movs	r0, #0
    //RSSI = readRSSI();
    setMode(RF69_MODE_STANDBY);
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
   d8346:	702b      	strb	r3, [r5, #0]
    TARGETID = SPI1.transfer(0);
   d8348:	f7ff fe76 	bl	d8038 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d834c:	4b24      	ldr	r3, [pc, #144]	; (d83e0 <_ZN5RFM6916interruptHandlerEv+0x10c>)
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
   d834e:	7a22      	ldrb	r2, [r4, #8]
    setMode(RF69_MODE_STANDBY);
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
    TARGETID = SPI1.transfer(0);
   d8350:	7018      	strb	r0, [r3, #0]
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
   d8352:	b932      	cbnz	r2, d8362 <_ZN5RFM6916interruptHandlerEv+0x8e>
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
    TARGETID = SPI1.transfer(0);
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
   d8354:	781a      	ldrb	r2, [r3, #0]
   d8356:	79e1      	ldrb	r1, [r4, #7]
   d8358:	4291      	cmp	r1, r2
   d835a:	d002      	beq.n	d8362 <_ZN5RFM6916interruptHandlerEv+0x8e>
   d835c:	781b      	ldrb	r3, [r3, #0]
   d835e:	2bff      	cmp	r3, #255	; 0xff
   d8360:	d105      	bne.n	d836e <_ZN5RFM6916interruptHandlerEv+0x9a>
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
   d8362:	782b      	ldrb	r3, [r5, #0]
   d8364:	2b02      	cmp	r3, #2
   d8366:	d902      	bls.n	d836e <_ZN5RFM6916interruptHandlerEv+0x9a>
   d8368:	e00b      	b.n	d8382 <_ZN5RFM6916interruptHandlerEv+0xae>
    //RSSI = readRSSI();
    setMode(RF69_MODE_STANDBY);
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
   d836a:	2342      	movs	r3, #66	; 0x42
   d836c:	e7ea      	b.n	d8344 <_ZN5RFM6916interruptHandlerEv+0x70>
    TARGETID = SPI1.transfer(0);
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
    {
      PAYLOADLEN = 0;
      unselect();
   d836e:	4620      	mov	r0, r4
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
    TARGETID = SPI1.transfer(0);
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
    {
      PAYLOADLEN = 0;
   d8370:	2300      	movs	r3, #0
   d8372:	702b      	strb	r3, [r5, #0]
      unselect();
   d8374:	f7ff fe40 	bl	d7ff8 <_ZN5RFM698unselectEv>
      receiveBegin();
   d8378:	4620      	mov	r0, r4
    unselect();
    setMode(RF69_MODE_RX);
  }
  RSSI = readRSSI();
  //digitalWrite(4, 0);
}
   d837a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
    {
      PAYLOADLEN = 0;
      unselect();
      receiveBegin();
   d837e:	f7ff bf31 	b.w	d81e4 <_ZN5RFM6912receiveBeginEv>
      //digitalWrite(4, 0);
      return;
    }

    DATALEN = PAYLOADLEN - 3;
   d8382:	4b16      	ldr	r3, [pc, #88]	; (d83dc <_ZN5RFM6916interruptHandlerEv+0x108>)
   d8384:	4e17      	ldr	r6, [pc, #92]	; (d83e4 <_ZN5RFM6916interruptHandlerEv+0x110>)
   d8386:	781b      	ldrb	r3, [r3, #0]
    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag

    for (byte i= 0; i < DATALEN; i++)
    {
      DATA[i] = SPI1.transfer(0);
   d8388:	4f12      	ldr	r7, [pc, #72]	; (d83d4 <_ZN5RFM6916interruptHandlerEv+0x100>)
      receiveBegin();
      //digitalWrite(4, 0);
      return;
    }

    DATALEN = PAYLOADLEN - 3;
   d838a:	3b03      	subs	r3, #3
   d838c:	b2db      	uxtb	r3, r3
    SENDERID = SPI1.transfer(0);
   d838e:	2000      	movs	r0, #0
      receiveBegin();
      //digitalWrite(4, 0);
      return;
    }

    DATALEN = PAYLOADLEN - 3;
   d8390:	7033      	strb	r3, [r6, #0]
    SENDERID = SPI1.transfer(0);
   d8392:	f7ff fe51 	bl	d8038 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d8396:	4b14      	ldr	r3, [pc, #80]	; (d83e8 <_ZN5RFM6916interruptHandlerEv+0x114>)
   d8398:	7018      	strb	r0, [r3, #0]
    byte CTLbyte = SPI1.transfer(0);
   d839a:	2000      	movs	r0, #0
   d839c:	f7ff fe4c 	bl	d8038 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>

    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
   d83a0:	4a12      	ldr	r2, [pc, #72]	; (d83ec <_ZN5RFM6916interruptHandlerEv+0x118>)
   d83a2:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
   d83a6:	b2db      	uxtb	r3, r3
   d83a8:	7013      	strb	r3, [r2, #0]
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag
   d83aa:	f000 0040 	and.w	r0, r0, #64	; 0x40
   d83ae:	4b10      	ldr	r3, [pc, #64]	; (d83f0 <_ZN5RFM6916interruptHandlerEv+0x11c>)
   d83b0:	b2c0      	uxtb	r0, r0
   d83b2:	7018      	strb	r0, [r3, #0]
   d83b4:	2300      	movs	r3, #0

    for (byte i= 0; i < DATALEN; i++)
   d83b6:	7831      	ldrb	r1, [r6, #0]
   d83b8:	4a0a      	ldr	r2, [pc, #40]	; (d83e4 <_ZN5RFM6916interruptHandlerEv+0x110>)
   d83ba:	b2dd      	uxtb	r5, r3
   d83bc:	428d      	cmp	r5, r1
   d83be:	f103 0801 	add.w	r8, r3, #1
   d83c2:	d294      	bcs.n	d82ee <_ZN5RFM6916interruptHandlerEv+0x1a>
    {
      DATA[i] = SPI1.transfer(0);
   d83c4:	2000      	movs	r0, #0
   d83c6:	f7ff fe37 	bl	d8038 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
    byte CTLbyte = SPI1.transfer(0);

    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag

    for (byte i= 0; i < DATALEN; i++)
   d83ca:	4643      	mov	r3, r8
    {
      DATA[i] = SPI1.transfer(0);
   d83cc:	5578      	strb	r0, [r7, r5]
    byte CTLbyte = SPI1.transfer(0);

    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag

    for (byte i= 0; i < DATALEN; i++)
   d83ce:	e7f2      	b.n	d83b6 <_ZN5RFM6916interruptHandlerEv+0xe2>
   d83d0:	2003dfa8 	.word	0x2003dfa8
   d83d4:	2003df6a 	.word	0x2003df6a
   d83d8:	2003df5c 	.word	0x2003df5c
   d83dc:	2003df68 	.word	0x2003df68
   d83e0:	2003df60 	.word	0x2003df60
   d83e4:	2003dfa7 	.word	0x2003dfa7
   d83e8:	2003df62 	.word	0x2003df62
   d83ec:	2003df69 	.word	0x2003df69
   d83f0:	2003df61 	.word	0x2003df61

000d83f4 <_ZN5RFM697encryptEPKc>:
}

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM69::encrypt(const char* key) {
   d83f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d83f6:	460d      	mov	r5, r1
  setMode(RF69_MODE_STANDBY);
   d83f8:	2101      	movs	r1, #1
}

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM69::encrypt(const char* key) {
   d83fa:	4604      	mov	r4, r0
  setMode(RF69_MODE_STANDBY);
   d83fc:	f7ff fe9e 	bl	d813c <_ZN5RFM697setModeEh>
  if (key!=0)
   d8400:	b18d      	cbz	r5, d8426 <_ZN5RFM697encryptEPKc+0x32>
  {
    select();
   d8402:	4620      	mov	r0, r4
   d8404:	f7ff fe21 	bl	d804a <_ZN5RFM696selectEv>
    SPI1.transfer(REG_AESKEY1 | 0x80);
   d8408:	20be      	movs	r0, #190	; 0xbe
   d840a:	f7ff fe15 	bl	d8038 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d840e:	1e6e      	subs	r6, r5, #1
   d8410:	f105 070f 	add.w	r7, r5, #15
    for (byte i = 0; i<16; i++)
      SPI1.transfer(key[i]);
   d8414:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   d8418:	f7ff fe0e 	bl	d8038 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  setMode(RF69_MODE_STANDBY);
  if (key!=0)
  {
    select();
    SPI1.transfer(REG_AESKEY1 | 0x80);
    for (byte i = 0; i<16; i++)
   d841c:	42be      	cmp	r6, r7
   d841e:	d1f9      	bne.n	d8414 <_ZN5RFM697encryptEPKc+0x20>
      SPI1.transfer(key[i]);
    unselect();
   d8420:	4620      	mov	r0, r4
   d8422:	f7ff fde9 	bl	d7ff8 <_ZN5RFM698unselectEv>
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
   d8426:	213d      	movs	r1, #61	; 0x3d
   d8428:	4620      	mov	r0, r4
   d842a:	f7ff fe27 	bl	d807c <_ZN5RFM697readRegEh>
   d842e:	f020 0001 	bic.w	r0, r0, #1
   d8432:	2d00      	cmp	r5, #0
   d8434:	bf0c      	ite	eq
   d8436:	4602      	moveq	r2, r0
   d8438:	f040 0201 	orrne.w	r2, r0, #1
   d843c:	b2d2      	uxtb	r2, r2
   d843e:	4620      	mov	r0, r4
   d8440:	213d      	movs	r1, #61	; 0x3d
}
   d8442:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    SPI1.transfer(REG_AESKEY1 | 0x80);
    for (byte i = 0; i<16; i++)
      SPI1.transfer(key[i]);
    unselect();
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
   d8446:	f7ff be2b 	b.w	d80a0 <_ZN5RFM698writeRegEhh>
	...

000d844c <_ZN5RFM6910initializeEhhh>:
volatile byte RFM69::ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
volatile int RFM69::RSSI; //most accurate RSSI during reception (closest to the reception)
RFM69* RFM69::selfPointer;

bool RFM69::initialize(byte freqBand, byte nodeID, byte networkID)
{
   d844c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d844e:	b08f      	sub	sp, #60	; 0x3c
   d8450:	460d      	mov	r5, r1
   d8452:	4604      	mov	r4, r0
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d8454:	2100      	movs	r1, #0
volatile byte RFM69::ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
volatile int RFM69::RSSI; //most accurate RSSI during reception (closest to the reception)
RFM69* RFM69::selfPointer;

bool RFM69::initialize(byte freqBand, byte nodeID, byte networkID)
{
   d8456:	4616      	mov	r6, r2
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d8458:	a803      	add	r0, sp, #12
   d845a:	222a      	movs	r2, #42	; 0x2a
volatile byte RFM69::ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
volatile int RFM69::RSSI; //most accurate RSSI during reception (closest to the reception)
RFM69* RFM69::selfPointer;

bool RFM69::initialize(byte freqBand, byte nodeID, byte networkID)
{
   d845c:	461f      	mov	r7, r3
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d845e:	f003 faeb 	bl	dba38 <memset>
   d8462:	2301      	movs	r3, #1
   d8464:	f88d 300c 	strb.w	r3, [sp, #12]
   d8468:	2303      	movs	r3, #3
   d846a:	f88d 3010 	strb.w	r3, [sp, #16]
   d846e:	f88d 3015 	strb.w	r3, [sp, #21]
   d8472:	2306      	movs	r3, #6
   d8474:	f88d 3016 	strb.w	r3, [sp, #22]
   d8478:	2333      	movs	r3, #51	; 0x33
   d847a:	f88d 3017 	strb.w	r3, [sp, #23]
   d847e:	2307      	movs	r3, #7
   d8480:	f88d 3018 	strb.w	r3, [sp, #24]
   d8484:	2308      	movs	r3, #8
   d8486:	f88d 301a 	strb.w	r3, [sp, #26]
   d848a:	2309      	movs	r3, #9
   d848c:	f88d 301c 	strb.w	r3, [sp, #28]
   d8490:	2319      	movs	r3, #25
   d8492:	f88d 301e 	strb.w	r3, [sp, #30]
   d8496:	2325      	movs	r3, #37	; 0x25
   d8498:	f88d 3020 	strb.w	r3, [sp, #32]
   d849c:	2329      	movs	r3, #41	; 0x29
   d849e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   d84a2:	23dc      	movs	r3, #220	; 0xdc
   d84a4:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   d84a8:	232e      	movs	r3, #46	; 0x2e
   d84aa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d84ae:	2388      	movs	r3, #136	; 0x88
   d84b0:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   d84b4:	232f      	movs	r3, #47	; 0x2f
   d84b6:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   d84ba:	232d      	movs	r3, #45	; 0x2d
   d84bc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   d84c0:	2337      	movs	r3, #55	; 0x37
   d84c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   d84c6:	2390      	movs	r3, #144	; 0x90
   d84c8:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d84cc:	2338      	movs	r3, #56	; 0x38
   d84ce:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   d84d2:	233c      	movs	r3, #60	; 0x3c
   d84d4:	2204      	movs	r2, #4
   d84d6:	2102      	movs	r1, #2
   d84d8:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
   d84dc:	238f      	movs	r3, #143	; 0x8f
   d84de:	f88d 200d 	strb.w	r2, [sp, #13]
   d84e2:	f88d 100e 	strb.w	r1, [sp, #14]
   d84e6:	f88d 1011 	strb.w	r1, [sp, #17]
   d84ea:	f88d 2012 	strb.w	r2, [sp, #18]
   d84ee:	2105      	movs	r1, #5
   d84f0:	2240      	movs	r2, #64	; 0x40
   d84f2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   d84f6:	233d      	movs	r3, #61	; 0x3d
   d84f8:	f88d 2013 	strb.w	r2, [sp, #19]
   d84fc:	f88d 1014 	strb.w	r1, [sp, #20]
   d8500:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
   d8504:	2142      	movs	r1, #66	; 0x42
   d8506:	2230      	movs	r2, #48	; 0x30
   d8508:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   d850c:	2312      	movs	r3, #18
   d850e:	f88d 101f 	strb.w	r1, [sp, #31]
   d8512:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   d8516:	f88d 102d 	strb.w	r1, [sp, #45]	; 0x2d
   d851a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   d851e:	236f      	movs	r3, #111	; 0x6f
   d8520:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   d8524:	2d1f      	cmp	r5, #31
   d8526:	f04f 03ff 	mov.w	r3, #255	; 0xff
   d852a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   d852e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   d8532:	d006      	beq.n	d8542 <_ZN5RFM6910initializeEhhh+0xf6>
   d8534:	2d2b      	cmp	r5, #43	; 0x2b
   d8536:	d006      	beq.n	d8546 <_ZN5RFM6910initializeEhhh+0xfa>
   d8538:	2d56      	cmp	r5, #86	; 0x56
   d853a:	bf0c      	ite	eq
   d853c:	22d9      	moveq	r2, #217	; 0xd9
   d853e:	22e4      	movne	r2, #228	; 0xe4
   d8540:	e002      	b.n	d8548 <_ZN5RFM6910initializeEhhh+0xfc>
   d8542:	224e      	movs	r2, #78	; 0x4e
   d8544:	e000      	b.n	d8548 <_ZN5RFM6910initializeEhhh+0xfc>
   d8546:	226c      	movs	r2, #108	; 0x6c
   d8548:	2d1f      	cmp	r5, #31
   d854a:	f88d 2019 	strb.w	r2, [sp, #25]
   d854e:	d006      	beq.n	d855e <_ZN5RFM6910initializeEhhh+0x112>
   d8550:	2d2b      	cmp	r5, #43	; 0x2b
   d8552:	d006      	beq.n	d8562 <_ZN5RFM6910initializeEhhh+0x116>
   d8554:	2d56      	cmp	r5, #86	; 0x56
   d8556:	bf14      	ite	ne
   d8558:	22c0      	movne	r2, #192	; 0xc0
   d855a:	2200      	moveq	r2, #0
   d855c:	e002      	b.n	d8564 <_ZN5RFM6910initializeEhhh+0x118>
   d855e:	22c0      	movs	r2, #192	; 0xc0
   d8560:	e000      	b.n	d8564 <_ZN5RFM6910initializeEhhh+0x118>
   d8562:	2240      	movs	r2, #64	; 0x40

  pinMode(_slaveSelectPin, OUTPUT);
   d8564:	2101      	movs	r1, #1
   d8566:	7920      	ldrb	r0, [r4, #4]
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d8568:	f88d 201b 	strb.w	r2, [sp, #27]
   d856c:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29

  pinMode(_slaveSelectPin, OUTPUT);
   d8570:	f002 f9ca 	bl	da908 <pinMode>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d8574:	f7ff fd4a 	bl	d800c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d8578:	f000 fc6e 	bl	d8e58 <_ZN8SPIClass5beginEv>
   d857c:	f000 f952 	bl	d8824 <HAL_Timer_Get_Milli_Seconds>
   d8580:	4605      	mov	r5, r0
  // Set time out to 50ms
  #define TIME_OUT 50
  
  start_to = millis() ;

  do writeReg(REG_SYNCVALUE1, 0xaa); while (readReg(REG_SYNCVALUE1) != 0xaa && millis()-start_to < TIME_OUT);
   d8582:	22aa      	movs	r2, #170	; 0xaa
   d8584:	212f      	movs	r1, #47	; 0x2f
   d8586:	4620      	mov	r0, r4
   d8588:	f7ff fd8a 	bl	d80a0 <_ZN5RFM698writeRegEhh>
   d858c:	212f      	movs	r1, #47	; 0x2f
   d858e:	4620      	mov	r0, r4
   d8590:	f7ff fd74 	bl	d807c <_ZN5RFM697readRegEh>
   d8594:	28aa      	cmp	r0, #170	; 0xaa
   d8596:	d004      	beq.n	d85a2 <_ZN5RFM6910initializeEhhh+0x156>
   d8598:	f000 f944 	bl	d8824 <HAL_Timer_Get_Milli_Seconds>
   d859c:	1b40      	subs	r0, r0, r5
   d859e:	2831      	cmp	r0, #49	; 0x31
   d85a0:	d9ef      	bls.n	d8582 <_ZN5RFM6910initializeEhhh+0x136>
   d85a2:	f000 f93f 	bl	d8824 <HAL_Timer_Get_Milli_Seconds>
  if (millis()-start_to >= TIME_OUT) return (false);
   d85a6:	1b40      	subs	r0, r0, r5
   d85a8:	2831      	cmp	r0, #49	; 0x31
   d85aa:	d82d      	bhi.n	d8608 <_ZN5RFM6910initializeEhhh+0x1bc>
   d85ac:	f000 f93a 	bl	d8824 <HAL_Timer_Get_Milli_Seconds>
   d85b0:	4605      	mov	r5, r0
    
  // Set time out 
  start_to = millis()  ;  
	do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis()-start_to < TIME_OUT);
   d85b2:	2255      	movs	r2, #85	; 0x55
   d85b4:	212f      	movs	r1, #47	; 0x2f
   d85b6:	4620      	mov	r0, r4
   d85b8:	f7ff fd72 	bl	d80a0 <_ZN5RFM698writeRegEhh>
   d85bc:	212f      	movs	r1, #47	; 0x2f
   d85be:	4620      	mov	r0, r4
   d85c0:	f7ff fd5c 	bl	d807c <_ZN5RFM697readRegEh>
   d85c4:	2855      	cmp	r0, #85	; 0x55
   d85c6:	d021      	beq.n	d860c <_ZN5RFM6910initializeEhhh+0x1c0>
   d85c8:	f000 f92c 	bl	d8824 <HAL_Timer_Get_Milli_Seconds>
   d85cc:	1b40      	subs	r0, r0, r5
   d85ce:	2831      	cmp	r0, #49	; 0x31
   d85d0:	d9ef      	bls.n	d85b2 <_ZN5RFM6910initializeEhhh+0x166>
   d85d2:	e01b      	b.n	d860c <_ZN5RFM6910initializeEhhh+0x1c0>
  for (byte i = 0; CONFIG[i][0] != 255; i++)
    writeReg(CONFIG[i][0], CONFIG[i][1]);

  // Encryption is persistent between resets and can trip you up during debugging.
  // Disable it during initialization so we always start from a known state.
  encrypt(0);
   d85d4:	2100      	movs	r1, #0
   d85d6:	4620      	mov	r0, r4
   d85d8:	f7ff ff0c 	bl	d83f4 <_ZN5RFM697encryptEPKc>

  setHighPower(_isRFM69HW); //called regardless if it's a RFM69W or RFM69HW
   d85dc:	7aa1      	ldrb	r1, [r4, #10]
   d85de:	4620      	mov	r0, r4
   d85e0:	f7ff fe5a 	bl	d8298 <_ZN5RFM6912setHighPowerEb>
  setMode(RF69_MODE_STANDBY);
   d85e4:	2101      	movs	r1, #1
   d85e6:	4620      	mov	r0, r4
   d85e8:	f7ff fda8 	bl	d813c <_ZN5RFM697setModeEh>
   d85ec:	f000 f91a 	bl	d8824 <HAL_Timer_Get_Milli_Seconds>
   d85f0:	4605      	mov	r5, r0
  // Set time out 
  start_to = millis() ;
	while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis()-start_to < TIME_OUT); // Wait for ModeReady
   d85f2:	2127      	movs	r1, #39	; 0x27
   d85f4:	4620      	mov	r0, r4
   d85f6:	f7ff fd41 	bl	d807c <_ZN5RFM697readRegEh>
   d85fa:	0603      	lsls	r3, r0, #24
   d85fc:	d51b      	bpl.n	d8636 <_ZN5RFM6910initializeEhhh+0x1ea>
   d85fe:	f000 f911 	bl	d8824 <HAL_Timer_Get_Milli_Seconds>
  if (millis()-start_to >= TIME_OUT) return (false);
   d8602:	1b40      	subs	r0, r0, r5
   d8604:	2831      	cmp	r0, #49	; 0x31
   d8606:	d91c      	bls.n	d8642 <_ZN5RFM6910initializeEhhh+0x1f6>
  // picking a non-interrupt enabled pin will prevent proper initialization
  // code thanks to @ScruffR - https://community.particle.io/t/how-to-make-rfm69-work-on-photon-solved-new-library-rfm69-particle/26497/93?u=bloukingfisher
  if (!attachInterrupt(_interruptNum, RFM69::isr0, RISING)) return false;
   d8608:	2000      	movs	r0, #0
   d860a:	e028      	b.n	d865e <_ZN5RFM6910initializeEhhh+0x212>
   d860c:	f000 f90a 	bl	d8824 <HAL_Timer_Get_Milli_Seconds>
  if (millis()-start_to >= TIME_OUT) return (false);
    
  // Set time out 
  start_to = millis()  ;  
	do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis()-start_to < TIME_OUT);
  if (millis()-start_to >= TIME_OUT) return (false);
   d8610:	1b40      	subs	r0, r0, r5
   d8612:	2831      	cmp	r0, #49	; 0x31
   d8614:	d8f8      	bhi.n	d8608 <_ZN5RFM6910initializeEhhh+0x1bc>
   d8616:	2500      	movs	r5, #0
  for (byte i = 0; CONFIG[i][0] != 255; i++)
   d8618:	b2eb      	uxtb	r3, r5
   d861a:	aa0e      	add	r2, sp, #56	; 0x38
   d861c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d8620:	3501      	adds	r5, #1
   d8622:	f813 1c2c 	ldrb.w	r1, [r3, #-44]
   d8626:	29ff      	cmp	r1, #255	; 0xff
   d8628:	d0d4      	beq.n	d85d4 <_ZN5RFM6910initializeEhhh+0x188>
    writeReg(CONFIG[i][0], CONFIG[i][1]);
   d862a:	f813 2c2b 	ldrb.w	r2, [r3, #-43]
   d862e:	4620      	mov	r0, r4
   d8630:	f7ff fd36 	bl	d80a0 <_ZN5RFM698writeRegEhh>
    
  // Set time out 
  start_to = millis()  ;  
	do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis()-start_to < TIME_OUT);
  if (millis()-start_to >= TIME_OUT) return (false);
  for (byte i = 0; CONFIG[i][0] != 255; i++)
   d8634:	e7f0      	b.n	d8618 <_ZN5RFM6910initializeEhhh+0x1cc>
   d8636:	f000 f8f5 	bl	d8824 <HAL_Timer_Get_Milli_Seconds>

  setHighPower(_isRFM69HW); //called regardless if it's a RFM69W or RFM69HW
  setMode(RF69_MODE_STANDBY);
  // Set time out 
  start_to = millis() ;
	while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis()-start_to < TIME_OUT); // Wait for ModeReady
   d863a:	1b40      	subs	r0, r0, r5
   d863c:	2831      	cmp	r0, #49	; 0x31
   d863e:	d9d8      	bls.n	d85f2 <_ZN5RFM6910initializeEhhh+0x1a6>
   d8640:	e7dd      	b.n	d85fe <_ZN5RFM6910initializeEhhh+0x1b2>
  if (millis()-start_to >= TIME_OUT) return (false);
  // picking a non-interrupt enabled pin will prevent proper initialization
  // code thanks to @ScruffR - https://community.particle.io/t/how-to-make-rfm69-work-on-photon-solved-new-library-rfm69-particle/26497/93?u=bloukingfisher
  if (!attachInterrupt(_interruptNum, RFM69::isr0, RISING)) return false;
   d8642:	2300      	movs	r3, #0
   d8644:	9300      	str	r3, [sp, #0]
   d8646:	79a0      	ldrb	r0, [r4, #6]
   d8648:	4906      	ldr	r1, [pc, #24]	; (d8664 <_ZN5RFM6910initializeEhhh+0x218>)
   d864a:	f04f 33ff 	mov.w	r3, #4294967295
   d864e:	2201      	movs	r2, #1
   d8650:	f001 fb5a 	bl	d9d08 <_Z15attachInterrupttPFvvE13InterruptModeah>
   d8654:	2800      	cmp	r0, #0
   d8656:	d0d7      	beq.n	d8608 <_ZN5RFM6910initializeEhhh+0x1bc>

  selfPointer = this;
   d8658:	4b03      	ldr	r3, [pc, #12]	; (d8668 <_ZN5RFM6910initializeEhhh+0x21c>)
  _address = nodeID;
   d865a:	71e6      	strb	r6, [r4, #7]
  if (millis()-start_to >= TIME_OUT) return (false);
  // picking a non-interrupt enabled pin will prevent proper initialization
  // code thanks to @ScruffR - https://community.particle.io/t/how-to-make-rfm69-work-on-photon-solved-new-library-rfm69-particle/26497/93?u=bloukingfisher
  if (!attachInterrupt(_interruptNum, RFM69::isr0, RISING)) return false;

  selfPointer = this;
   d865c:	601c      	str	r4, [r3, #0]
  _address = nodeID;
  return true;
}
   d865e:	b00f      	add	sp, #60	; 0x3c
   d8660:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8662:	bf00      	nop
   d8664:	000d7fe9 	.word	0x000d7fe9
   d8668:	2003df64 	.word	0x2003df64

000d866c <_GLOBAL__sub_I__ZN5RFM694DATAE>:
   d866c:	f000 b812 	b.w	d8694 <HAL_Pin_Map>

000d8670 <_GLOBAL__sub_I__ZN9RFM69_ATC18ACK_RSSI_REQUESTEDE>:
   d8670:	f000 b810 	b.w	d8694 <HAL_Pin_Map>

000d8674 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d8674:	b508      	push	{r3, lr}
   d8676:	4b02      	ldr	r3, [pc, #8]	; (d8680 <netdb_freeaddrinfo+0xc>)
   d8678:	681b      	ldr	r3, [r3, #0]
   d867a:	689b      	ldr	r3, [r3, #8]
   d867c:	9301      	str	r3, [sp, #4]
   d867e:	bd08      	pop	{r3, pc}
   d8680:	00030268 	.word	0x00030268

000d8684 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d8684:	b508      	push	{r3, lr}
   d8686:	4b02      	ldr	r3, [pc, #8]	; (d8690 <netdb_getaddrinfo+0xc>)
   d8688:	681b      	ldr	r3, [r3, #0]
   d868a:	68db      	ldr	r3, [r3, #12]
   d868c:	9301      	str	r3, [sp, #4]
   d868e:	bd08      	pop	{r3, pc}
   d8690:	00030268 	.word	0x00030268

000d8694 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d8694:	b508      	push	{r3, lr}
   d8696:	4b02      	ldr	r3, [pc, #8]	; (d86a0 <HAL_Pin_Map+0xc>)
   d8698:	681b      	ldr	r3, [r3, #0]
   d869a:	681b      	ldr	r3, [r3, #0]
   d869c:	9301      	str	r3, [sp, #4]
   d869e:	bd08      	pop	{r3, pc}
   d86a0:	0003022c 	.word	0x0003022c

000d86a4 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d86a4:	b508      	push	{r3, lr}
   d86a6:	4b02      	ldr	r3, [pc, #8]	; (d86b0 <HAL_Pin_Mode+0xc>)
   d86a8:	681b      	ldr	r3, [r3, #0]
   d86aa:	689b      	ldr	r3, [r3, #8]
   d86ac:	9301      	str	r3, [sp, #4]
   d86ae:	bd08      	pop	{r3, pc}
   d86b0:	0003022c 	.word	0x0003022c

000d86b4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d86b4:	b508      	push	{r3, lr}
   d86b6:	4b02      	ldr	r3, [pc, #8]	; (d86c0 <HAL_Get_Pin_Mode+0xc>)
   d86b8:	681b      	ldr	r3, [r3, #0]
   d86ba:	68db      	ldr	r3, [r3, #12]
   d86bc:	9301      	str	r3, [sp, #4]
   d86be:	bd08      	pop	{r3, pc}
   d86c0:	0003022c 	.word	0x0003022c

000d86c4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d86c4:	b508      	push	{r3, lr}
   d86c6:	4b02      	ldr	r3, [pc, #8]	; (d86d0 <HAL_GPIO_Write+0xc>)
   d86c8:	681b      	ldr	r3, [r3, #0]
   d86ca:	691b      	ldr	r3, [r3, #16]
   d86cc:	9301      	str	r3, [sp, #4]
   d86ce:	bd08      	pop	{r3, pc}
   d86d0:	0003022c 	.word	0x0003022c

000d86d4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d86d4:	b508      	push	{r3, lr}
   d86d6:	4b02      	ldr	r3, [pc, #8]	; (d86e0 <HAL_GPIO_Read+0xc>)
   d86d8:	681b      	ldr	r3, [r3, #0]
   d86da:	695b      	ldr	r3, [r3, #20]
   d86dc:	9301      	str	r3, [sp, #4]
   d86de:	bd08      	pop	{r3, pc}
   d86e0:	0003022c 	.word	0x0003022c

000d86e4 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d86e4:	b508      	push	{r3, lr}
   d86e6:	4b02      	ldr	r3, [pc, #8]	; (d86f0 <HAL_Interrupts_Attach+0xc>)
   d86e8:	681b      	ldr	r3, [r3, #0]
   d86ea:	699b      	ldr	r3, [r3, #24]
   d86ec:	9301      	str	r3, [sp, #4]
   d86ee:	bd08      	pop	{r3, pc}
   d86f0:	0003022c 	.word	0x0003022c

000d86f4 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d86f4:	b508      	push	{r3, lr}
   d86f6:	4b02      	ldr	r3, [pc, #8]	; (d8700 <HAL_Interrupts_Detach+0xc>)
   d86f8:	681b      	ldr	r3, [r3, #0]
   d86fa:	69db      	ldr	r3, [r3, #28]
   d86fc:	9301      	str	r3, [sp, #4]
   d86fe:	bd08      	pop	{r3, pc}
   d8700:	0003022c 	.word	0x0003022c

000d8704 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d8704:	b508      	push	{r3, lr}
   d8706:	4b02      	ldr	r3, [pc, #8]	; (d8710 <HAL_Interrupts_Enable_All+0xc>)
   d8708:	681b      	ldr	r3, [r3, #0]
   d870a:	6a1b      	ldr	r3, [r3, #32]
   d870c:	9301      	str	r3, [sp, #4]
   d870e:	bd08      	pop	{r3, pc}
   d8710:	0003022c 	.word	0x0003022c

000d8714 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d8714:	b508      	push	{r3, lr}
   d8716:	4b02      	ldr	r3, [pc, #8]	; (d8720 <HAL_Interrupts_Disable_All+0xc>)
   d8718:	681b      	ldr	r3, [r3, #0]
   d871a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d871c:	9301      	str	r3, [sp, #4]
   d871e:	bd08      	pop	{r3, pc}
   d8720:	0003022c 	.word	0x0003022c

000d8724 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d8724:	b508      	push	{r3, lr}
   d8726:	4b02      	ldr	r3, [pc, #8]	; (d8730 <HAL_SPI_Begin+0xc>)
   d8728:	681b      	ldr	r3, [r3, #0]
   d872a:	681b      	ldr	r3, [r3, #0]
   d872c:	9301      	str	r3, [sp, #4]
   d872e:	bd08      	pop	{r3, pc}
   d8730:	00030230 	.word	0x00030230

000d8734 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d8734:	b508      	push	{r3, lr}
   d8736:	4b02      	ldr	r3, [pc, #8]	; (d8740 <HAL_SPI_Set_Bit_Order+0xc>)
   d8738:	681b      	ldr	r3, [r3, #0]
   d873a:	689b      	ldr	r3, [r3, #8]
   d873c:	9301      	str	r3, [sp, #4]
   d873e:	bd08      	pop	{r3, pc}
   d8740:	00030230 	.word	0x00030230

000d8744 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d8744:	b508      	push	{r3, lr}
   d8746:	4b02      	ldr	r3, [pc, #8]	; (d8750 <HAL_SPI_Set_Data_Mode+0xc>)
   d8748:	681b      	ldr	r3, [r3, #0]
   d874a:	68db      	ldr	r3, [r3, #12]
   d874c:	9301      	str	r3, [sp, #4]
   d874e:	bd08      	pop	{r3, pc}
   d8750:	00030230 	.word	0x00030230

000d8754 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d8754:	b508      	push	{r3, lr}
   d8756:	4b02      	ldr	r3, [pc, #8]	; (d8760 <HAL_SPI_Set_Clock_Divider+0xc>)
   d8758:	681b      	ldr	r3, [r3, #0]
   d875a:	691b      	ldr	r3, [r3, #16]
   d875c:	9301      	str	r3, [sp, #4]
   d875e:	bd08      	pop	{r3, pc}
   d8760:	00030230 	.word	0x00030230

000d8764 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d8764:	b508      	push	{r3, lr}
   d8766:	4b02      	ldr	r3, [pc, #8]	; (d8770 <HAL_SPI_Send_Receive_Data+0xc>)
   d8768:	681b      	ldr	r3, [r3, #0]
   d876a:	695b      	ldr	r3, [r3, #20]
   d876c:	9301      	str	r3, [sp, #4]
   d876e:	bd08      	pop	{r3, pc}
   d8770:	00030230 	.word	0x00030230

000d8774 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d8774:	b508      	push	{r3, lr}
   d8776:	4b02      	ldr	r3, [pc, #8]	; (d8780 <HAL_SPI_Init+0xc>)
   d8778:	681b      	ldr	r3, [r3, #0]
   d877a:	69db      	ldr	r3, [r3, #28]
   d877c:	9301      	str	r3, [sp, #4]
   d877e:	bd08      	pop	{r3, pc}
   d8780:	00030230 	.word	0x00030230

000d8784 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d8784:	b508      	push	{r3, lr}
   d8786:	4b02      	ldr	r3, [pc, #8]	; (d8790 <HAL_SPI_Is_Enabled+0xc>)
   d8788:	681b      	ldr	r3, [r3, #0]
   d878a:	6a1b      	ldr	r3, [r3, #32]
   d878c:	9301      	str	r3, [sp, #4]
   d878e:	bd08      	pop	{r3, pc}
   d8790:	00030230 	.word	0x00030230

000d8794 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d8794:	b508      	push	{r3, lr}
   d8796:	4b02      	ldr	r3, [pc, #8]	; (d87a0 <HAL_SPI_Info+0xc>)
   d8798:	681b      	ldr	r3, [r3, #0]
   d879a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d879c:	9301      	str	r3, [sp, #4]
   d879e:	bd08      	pop	{r3, pc}
   d87a0:	00030230 	.word	0x00030230

000d87a4 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d87a4:	b508      	push	{r3, lr}
   d87a6:	4b02      	ldr	r3, [pc, #8]	; (d87b0 <HAL_SPI_DMA_Transfer+0xc>)
   d87a8:	681b      	ldr	r3, [r3, #0]
   d87aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d87ac:	9301      	str	r3, [sp, #4]
   d87ae:	bd08      	pop	{r3, pc}
   d87b0:	00030230 	.word	0x00030230

000d87b4 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d87b4:	b508      	push	{r3, lr}
   d87b6:	4b02      	ldr	r3, [pc, #8]	; (d87c0 <HAL_SPI_DMA_Transfer_Status+0xc>)
   d87b8:	681b      	ldr	r3, [r3, #0]
   d87ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d87bc:	9301      	str	r3, [sp, #4]
   d87be:	bd08      	pop	{r3, pc}
   d87c0:	00030230 	.word	0x00030230

000d87c4 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d87c4:	b508      	push	{r3, lr}
   d87c6:	4b02      	ldr	r3, [pc, #8]	; (d87d0 <HAL_SPI_Set_Settings+0xc>)
   d87c8:	681b      	ldr	r3, [r3, #0]
   d87ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d87cc:	9301      	str	r3, [sp, #4]
   d87ce:	bd08      	pop	{r3, pc}
   d87d0:	00030230 	.word	0x00030230

000d87d4 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d87d4:	b508      	push	{r3, lr}
   d87d6:	4b02      	ldr	r3, [pc, #8]	; (d87e0 <HAL_SPI_Acquire+0xc>)
   d87d8:	681b      	ldr	r3, [r3, #0]
   d87da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d87dc:	9301      	str	r3, [sp, #4]
   d87de:	bd08      	pop	{r3, pc}
   d87e0:	00030230 	.word	0x00030230

000d87e4 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d87e4:	b508      	push	{r3, lr}
   d87e6:	4b02      	ldr	r3, [pc, #8]	; (d87f0 <HAL_SPI_Release+0xc>)
   d87e8:	681b      	ldr	r3, [r3, #0]
   d87ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d87ec:	9301      	str	r3, [sp, #4]
   d87ee:	bd08      	pop	{r3, pc}
   d87f0:	00030230 	.word	0x00030230

000d87f4 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d87f4:	b508      	push	{r3, lr}
   d87f6:	4b02      	ldr	r3, [pc, #8]	; (d8800 <if_index_to_name+0xc>)
   d87f8:	681b      	ldr	r3, [r3, #0]
   d87fa:	695b      	ldr	r3, [r3, #20]
   d87fc:	9301      	str	r3, [sp, #4]
   d87fe:	bd08      	pop	{r3, pc}
   d8800:	0003026c 	.word	0x0003026c

000d8804 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d8804:	b508      	push	{r3, lr}
   d8806:	4b02      	ldr	r3, [pc, #8]	; (d8810 <HAL_RNG_GetRandomNumber+0xc>)
   d8808:	681b      	ldr	r3, [r3, #0]
   d880a:	685b      	ldr	r3, [r3, #4]
   d880c:	9301      	str	r3, [sp, #4]
   d880e:	bd08      	pop	{r3, pc}
   d8810:	00030218 	.word	0x00030218

000d8814 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d8814:	b508      	push	{r3, lr}
   d8816:	4b02      	ldr	r3, [pc, #8]	; (d8820 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d8818:	681b      	ldr	r3, [r3, #0]
   d881a:	691b      	ldr	r3, [r3, #16]
   d881c:	9301      	str	r3, [sp, #4]
   d881e:	bd08      	pop	{r3, pc}
   d8820:	00030218 	.word	0x00030218

000d8824 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d8824:	b508      	push	{r3, lr}
   d8826:	4b02      	ldr	r3, [pc, #8]	; (d8830 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d8828:	681b      	ldr	r3, [r3, #0]
   d882a:	695b      	ldr	r3, [r3, #20]
   d882c:	9301      	str	r3, [sp, #4]
   d882e:	bd08      	pop	{r3, pc}
   d8830:	00030218 	.word	0x00030218

000d8834 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d8834:	b508      	push	{r3, lr}
   d8836:	4b02      	ldr	r3, [pc, #8]	; (d8840 <HAL_RTC_Get_UnixTime+0xc>)
   d8838:	681b      	ldr	r3, [r3, #0]
   d883a:	69db      	ldr	r3, [r3, #28]
   d883c:	9301      	str	r3, [sp, #4]
   d883e:	bd08      	pop	{r3, pc}
   d8840:	00030218 	.word	0x00030218

000d8844 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d8844:	b508      	push	{r3, lr}
   d8846:	4b02      	ldr	r3, [pc, #8]	; (d8850 <HAL_EEPROM_Init+0xc>)
   d8848:	681b      	ldr	r3, [r3, #0]
   d884a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d884c:	9301      	str	r3, [sp, #4]
   d884e:	bd08      	pop	{r3, pc}
   d8850:	00030218 	.word	0x00030218

000d8854 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d8854:	b508      	push	{r3, lr}
   d8856:	4b02      	ldr	r3, [pc, #8]	; (d8860 <HAL_EEPROM_Get+0xc>)
   d8858:	681b      	ldr	r3, [r3, #0]
   d885a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d885c:	9301      	str	r3, [sp, #4]
   d885e:	bd08      	pop	{r3, pc}
   d8860:	00030218 	.word	0x00030218

000d8864 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d8864:	b508      	push	{r3, lr}
   d8866:	4b02      	ldr	r3, [pc, #8]	; (d8870 <HAL_EEPROM_Put+0xc>)
   d8868:	681b      	ldr	r3, [r3, #0]
   d886a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d886c:	9301      	str	r3, [sp, #4]
   d886e:	bd08      	pop	{r3, pc}
   d8870:	00030218 	.word	0x00030218

000d8874 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d8874:	b508      	push	{r3, lr}
   d8876:	4b02      	ldr	r3, [pc, #8]	; (d8880 <HAL_RTC_Time_Is_Valid+0xc>)
   d8878:	681b      	ldr	r3, [r3, #0]
   d887a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d887c:	9301      	str	r3, [sp, #4]
   d887e:	bd08      	pop	{r3, pc}
   d8880:	00030218 	.word	0x00030218

000d8884 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d8884:	b508      	push	{r3, lr}
   d8886:	4b02      	ldr	r3, [pc, #8]	; (d8890 <os_thread_is_current+0xc>)
   d8888:	681b      	ldr	r3, [r3, #0]
   d888a:	689b      	ldr	r3, [r3, #8]
   d888c:	9301      	str	r3, [sp, #4]
   d888e:	bd08      	pop	{r3, pc}
   d8890:	00030248 	.word	0x00030248

000d8894 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d8894:	b508      	push	{r3, lr}
   d8896:	4b02      	ldr	r3, [pc, #8]	; (d88a0 <os_thread_yield+0xc>)
   d8898:	681b      	ldr	r3, [r3, #0]
   d889a:	68db      	ldr	r3, [r3, #12]
   d889c:	9301      	str	r3, [sp, #4]
   d889e:	bd08      	pop	{r3, pc}
   d88a0:	00030248 	.word	0x00030248

000d88a4 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d88a4:	b508      	push	{r3, lr}
   d88a6:	4b02      	ldr	r3, [pc, #8]	; (d88b0 <os_thread_join+0xc>)
   d88a8:	681b      	ldr	r3, [r3, #0]
   d88aa:	691b      	ldr	r3, [r3, #16]
   d88ac:	9301      	str	r3, [sp, #4]
   d88ae:	bd08      	pop	{r3, pc}
   d88b0:	00030248 	.word	0x00030248

000d88b4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d88b4:	b508      	push	{r3, lr}
   d88b6:	4b02      	ldr	r3, [pc, #8]	; (d88c0 <os_thread_cleanup+0xc>)
   d88b8:	681b      	ldr	r3, [r3, #0]
   d88ba:	695b      	ldr	r3, [r3, #20]
   d88bc:	9301      	str	r3, [sp, #4]
   d88be:	bd08      	pop	{r3, pc}
   d88c0:	00030248 	.word	0x00030248

000d88c4 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d88c4:	b508      	push	{r3, lr}
   d88c6:	4b02      	ldr	r3, [pc, #8]	; (d88d0 <os_thread_scheduling+0xc>)
   d88c8:	681b      	ldr	r3, [r3, #0]
   d88ca:	69db      	ldr	r3, [r3, #28]
   d88cc:	9301      	str	r3, [sp, #4]
   d88ce:	bd08      	pop	{r3, pc}
   d88d0:	00030248 	.word	0x00030248

000d88d4 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d88d4:	b508      	push	{r3, lr}
   d88d6:	4b02      	ldr	r3, [pc, #8]	; (d88e0 <os_timer_create+0xc>)
   d88d8:	681b      	ldr	r3, [r3, #0]
   d88da:	6a1b      	ldr	r3, [r3, #32]
   d88dc:	9301      	str	r3, [sp, #4]
   d88de:	bd08      	pop	{r3, pc}
   d88e0:	00030248 	.word	0x00030248

000d88e4 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d88e4:	b508      	push	{r3, lr}
   d88e6:	4b02      	ldr	r3, [pc, #8]	; (d88f0 <os_timer_destroy+0xc>)
   d88e8:	681b      	ldr	r3, [r3, #0]
   d88ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d88ec:	9301      	str	r3, [sp, #4]
   d88ee:	bd08      	pop	{r3, pc}
   d88f0:	00030248 	.word	0x00030248

000d88f4 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d88f4:	b508      	push	{r3, lr}
   d88f6:	4b02      	ldr	r3, [pc, #8]	; (d8900 <os_timer_get_id+0xc>)
   d88f8:	681b      	ldr	r3, [r3, #0]
   d88fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d88fc:	9301      	str	r3, [sp, #4]
   d88fe:	bd08      	pop	{r3, pc}
   d8900:	00030248 	.word	0x00030248

000d8904 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d8904:	b508      	push	{r3, lr}
   d8906:	4b02      	ldr	r3, [pc, #8]	; (d8910 <os_timer_change+0xc>)
   d8908:	681b      	ldr	r3, [r3, #0]
   d890a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d890c:	9301      	str	r3, [sp, #4]
   d890e:	bd08      	pop	{r3, pc}
   d8910:	00030248 	.word	0x00030248

000d8914 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d8914:	b508      	push	{r3, lr}
   d8916:	4b02      	ldr	r3, [pc, #8]	; (d8920 <os_mutex_recursive_create+0xc>)
   d8918:	681b      	ldr	r3, [r3, #0]
   d891a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d891c:	9301      	str	r3, [sp, #4]
   d891e:	bd08      	pop	{r3, pc}
   d8920:	00030248 	.word	0x00030248

000d8924 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d8924:	b508      	push	{r3, lr}
   d8926:	4b02      	ldr	r3, [pc, #8]	; (d8930 <os_mutex_recursive_destroy+0xc>)
   d8928:	681b      	ldr	r3, [r3, #0]
   d892a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d892c:	9301      	str	r3, [sp, #4]
   d892e:	bd08      	pop	{r3, pc}
   d8930:	00030248 	.word	0x00030248

000d8934 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d8934:	b508      	push	{r3, lr}
   d8936:	4b02      	ldr	r3, [pc, #8]	; (d8940 <os_timer_set_id+0xc>)
   d8938:	681b      	ldr	r3, [r3, #0]
   d893a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d893c:	9301      	str	r3, [sp, #4]
   d893e:	bd08      	pop	{r3, pc}
   d8940:	00030248 	.word	0x00030248

000d8944 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d8944:	b508      	push	{r3, lr}
   d8946:	4b02      	ldr	r3, [pc, #8]	; (d8950 <inet_inet_ntop+0xc>)
   d8948:	681b      	ldr	r3, [r3, #0]
   d894a:	695b      	ldr	r3, [r3, #20]
   d894c:	9301      	str	r3, [sp, #4]
   d894e:	bd08      	pop	{r3, pc}
   d8950:	00030264 	.word	0x00030264

000d8954 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d8954:	b508      	push	{r3, lr}
   d8956:	4b02      	ldr	r3, [pc, #8]	; (d8960 <inet_htonl+0xc>)
   d8958:	681b      	ldr	r3, [r3, #0]
   d895a:	6a1b      	ldr	r3, [r3, #32]
   d895c:	9301      	str	r3, [sp, #4]
   d895e:	bd08      	pop	{r3, pc}
   d8960:	00030264 	.word	0x00030264

000d8964 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d8964:	b508      	push	{r3, lr}
   d8966:	4b02      	ldr	r3, [pc, #8]	; (d8970 <inet_htons+0xc>)
   d8968:	681b      	ldr	r3, [r3, #0]
   d896a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d896c:	9301      	str	r3, [sp, #4]
   d896e:	bd08      	pop	{r3, pc}
   d8970:	00030264 	.word	0x00030264

000d8974 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d8974:	b508      	push	{r3, lr}
   d8976:	4b02      	ldr	r3, [pc, #8]	; (d8980 <HAL_USART_Init+0xc>)
   d8978:	681b      	ldr	r3, [r3, #0]
   d897a:	681b      	ldr	r3, [r3, #0]
   d897c:	9301      	str	r3, [sp, #4]
   d897e:	bd08      	pop	{r3, pc}
   d8980:	0003023c 	.word	0x0003023c

000d8984 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d8984:	b508      	push	{r3, lr}
   d8986:	4b02      	ldr	r3, [pc, #8]	; (d8990 <HAL_USART_Write_Data+0xc>)
   d8988:	681b      	ldr	r3, [r3, #0]
   d898a:	68db      	ldr	r3, [r3, #12]
   d898c:	9301      	str	r3, [sp, #4]
   d898e:	bd08      	pop	{r3, pc}
   d8990:	0003023c 	.word	0x0003023c

000d8994 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d8994:	b508      	push	{r3, lr}
   d8996:	4b02      	ldr	r3, [pc, #8]	; (d89a0 <HAL_USART_Available_Data+0xc>)
   d8998:	681b      	ldr	r3, [r3, #0]
   d899a:	691b      	ldr	r3, [r3, #16]
   d899c:	9301      	str	r3, [sp, #4]
   d899e:	bd08      	pop	{r3, pc}
   d89a0:	0003023c 	.word	0x0003023c

000d89a4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d89a4:	b508      	push	{r3, lr}
   d89a6:	4b02      	ldr	r3, [pc, #8]	; (d89b0 <HAL_USART_Read_Data+0xc>)
   d89a8:	681b      	ldr	r3, [r3, #0]
   d89aa:	695b      	ldr	r3, [r3, #20]
   d89ac:	9301      	str	r3, [sp, #4]
   d89ae:	bd08      	pop	{r3, pc}
   d89b0:	0003023c 	.word	0x0003023c

000d89b4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d89b4:	b508      	push	{r3, lr}
   d89b6:	4b02      	ldr	r3, [pc, #8]	; (d89c0 <HAL_USART_Peek_Data+0xc>)
   d89b8:	681b      	ldr	r3, [r3, #0]
   d89ba:	699b      	ldr	r3, [r3, #24]
   d89bc:	9301      	str	r3, [sp, #4]
   d89be:	bd08      	pop	{r3, pc}
   d89c0:	0003023c 	.word	0x0003023c

000d89c4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d89c4:	b508      	push	{r3, lr}
   d89c6:	4b02      	ldr	r3, [pc, #8]	; (d89d0 <HAL_USART_Flush_Data+0xc>)
   d89c8:	681b      	ldr	r3, [r3, #0]
   d89ca:	69db      	ldr	r3, [r3, #28]
   d89cc:	9301      	str	r3, [sp, #4]
   d89ce:	bd08      	pop	{r3, pc}
   d89d0:	0003023c 	.word	0x0003023c

000d89d4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d89d4:	b508      	push	{r3, lr}
   d89d6:	4b02      	ldr	r3, [pc, #8]	; (d89e0 <HAL_USART_Is_Enabled+0xc>)
   d89d8:	681b      	ldr	r3, [r3, #0]
   d89da:	6a1b      	ldr	r3, [r3, #32]
   d89dc:	9301      	str	r3, [sp, #4]
   d89de:	bd08      	pop	{r3, pc}
   d89e0:	0003023c 	.word	0x0003023c

000d89e4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d89e4:	b508      	push	{r3, lr}
   d89e6:	4b02      	ldr	r3, [pc, #8]	; (d89f0 <HAL_USART_Available_Data_For_Write+0xc>)
   d89e8:	681b      	ldr	r3, [r3, #0]
   d89ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d89ec:	9301      	str	r3, [sp, #4]
   d89ee:	bd08      	pop	{r3, pc}
   d89f0:	0003023c 	.word	0x0003023c

000d89f4 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d89f4:	b508      	push	{r3, lr}
   d89f6:	4b02      	ldr	r3, [pc, #8]	; (d8a00 <HAL_I2C_Begin_Transmission+0xc>)
   d89f8:	681b      	ldr	r3, [r3, #0]
   d89fa:	699b      	ldr	r3, [r3, #24]
   d89fc:	9301      	str	r3, [sp, #4]
   d89fe:	bd08      	pop	{r3, pc}
   d8a00:	00030228 	.word	0x00030228

000d8a04 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d8a04:	b508      	push	{r3, lr}
   d8a06:	4b02      	ldr	r3, [pc, #8]	; (d8a10 <HAL_I2C_End_Transmission+0xc>)
   d8a08:	681b      	ldr	r3, [r3, #0]
   d8a0a:	69db      	ldr	r3, [r3, #28]
   d8a0c:	9301      	str	r3, [sp, #4]
   d8a0e:	bd08      	pop	{r3, pc}
   d8a10:	00030228 	.word	0x00030228

000d8a14 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d8a14:	b508      	push	{r3, lr}
   d8a16:	4b02      	ldr	r3, [pc, #8]	; (d8a20 <HAL_I2C_Write_Data+0xc>)
   d8a18:	681b      	ldr	r3, [r3, #0]
   d8a1a:	6a1b      	ldr	r3, [r3, #32]
   d8a1c:	9301      	str	r3, [sp, #4]
   d8a1e:	bd08      	pop	{r3, pc}
   d8a20:	00030228 	.word	0x00030228

000d8a24 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d8a24:	b508      	push	{r3, lr}
   d8a26:	4b02      	ldr	r3, [pc, #8]	; (d8a30 <HAL_I2C_Available_Data+0xc>)
   d8a28:	681b      	ldr	r3, [r3, #0]
   d8a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8a2c:	9301      	str	r3, [sp, #4]
   d8a2e:	bd08      	pop	{r3, pc}
   d8a30:	00030228 	.word	0x00030228

000d8a34 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d8a34:	b508      	push	{r3, lr}
   d8a36:	4b02      	ldr	r3, [pc, #8]	; (d8a40 <HAL_I2C_Read_Data+0xc>)
   d8a38:	681b      	ldr	r3, [r3, #0]
   d8a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8a3c:	9301      	str	r3, [sp, #4]
   d8a3e:	bd08      	pop	{r3, pc}
   d8a40:	00030228 	.word	0x00030228

000d8a44 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d8a44:	b508      	push	{r3, lr}
   d8a46:	4b02      	ldr	r3, [pc, #8]	; (d8a50 <HAL_I2C_Peek_Data+0xc>)
   d8a48:	681b      	ldr	r3, [r3, #0]
   d8a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8a4c:	9301      	str	r3, [sp, #4]
   d8a4e:	bd08      	pop	{r3, pc}
   d8a50:	00030228 	.word	0x00030228

000d8a54 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d8a54:	b508      	push	{r3, lr}
   d8a56:	4b02      	ldr	r3, [pc, #8]	; (d8a60 <HAL_I2C_Flush_Data+0xc>)
   d8a58:	681b      	ldr	r3, [r3, #0]
   d8a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8a5c:	9301      	str	r3, [sp, #4]
   d8a5e:	bd08      	pop	{r3, pc}
   d8a60:	00030228 	.word	0x00030228

000d8a64 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d8a64:	b508      	push	{r3, lr}
   d8a66:	4b02      	ldr	r3, [pc, #8]	; (d8a70 <HAL_I2C_Is_Enabled+0xc>)
   d8a68:	681b      	ldr	r3, [r3, #0]
   d8a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8a6c:	9301      	str	r3, [sp, #4]
   d8a6e:	bd08      	pop	{r3, pc}
   d8a70:	00030228 	.word	0x00030228

000d8a74 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d8a74:	b508      	push	{r3, lr}
   d8a76:	4b02      	ldr	r3, [pc, #8]	; (d8a80 <HAL_I2C_Init+0xc>)
   d8a78:	681b      	ldr	r3, [r3, #0]
   d8a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8a7c:	9301      	str	r3, [sp, #4]
   d8a7e:	bd08      	pop	{r3, pc}
   d8a80:	00030228 	.word	0x00030228

000d8a84 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d8a84:	b508      	push	{r3, lr}
   d8a86:	4b02      	ldr	r3, [pc, #8]	; (d8a90 <HAL_I2C_Acquire+0xc>)
   d8a88:	681b      	ldr	r3, [r3, #0]
   d8a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8a8c:	9301      	str	r3, [sp, #4]
   d8a8e:	bd08      	pop	{r3, pc}
   d8a90:	00030228 	.word	0x00030228

000d8a94 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d8a94:	b508      	push	{r3, lr}
   d8a96:	4b02      	ldr	r3, [pc, #8]	; (d8aa0 <HAL_I2C_Release+0xc>)
   d8a98:	681b      	ldr	r3, [r3, #0]
   d8a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8a9c:	9301      	str	r3, [sp, #4]
   d8a9e:	bd08      	pop	{r3, pc}
   d8aa0:	00030228 	.word	0x00030228

000d8aa4 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d8aa4:	b508      	push	{r3, lr}
   d8aa6:	4b02      	ldr	r3, [pc, #8]	; (d8ab0 <HAL_I2C_Request_Data_Ex+0xc>)
   d8aa8:	681b      	ldr	r3, [r3, #0]
   d8aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8aac:	9301      	str	r3, [sp, #4]
   d8aae:	bd08      	pop	{r3, pc}
   d8ab0:	00030228 	.word	0x00030228

000d8ab4 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d8ab4:	b508      	push	{r3, lr}
   d8ab6:	4b02      	ldr	r3, [pc, #8]	; (d8ac0 <sock_setsockopt+0xc>)
   d8ab8:	681b      	ldr	r3, [r3, #0]
   d8aba:	699b      	ldr	r3, [r3, #24]
   d8abc:	9301      	str	r3, [sp, #4]
   d8abe:	bd08      	pop	{r3, pc}
   d8ac0:	00030238 	.word	0x00030238

000d8ac4 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d8ac4:	b508      	push	{r3, lr}
   d8ac6:	4b02      	ldr	r3, [pc, #8]	; (d8ad0 <sock_close+0xc>)
   d8ac8:	681b      	ldr	r3, [r3, #0]
   d8aca:	69db      	ldr	r3, [r3, #28]
   d8acc:	9301      	str	r3, [sp, #4]
   d8ace:	bd08      	pop	{r3, pc}
   d8ad0:	00030238 	.word	0x00030238

000d8ad4 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d8ad4:	b508      	push	{r3, lr}
   d8ad6:	4b02      	ldr	r3, [pc, #8]	; (d8ae0 <sock_connect+0xc>)
   d8ad8:	681b      	ldr	r3, [r3, #0]
   d8ada:	6a1b      	ldr	r3, [r3, #32]
   d8adc:	9301      	str	r3, [sp, #4]
   d8ade:	bd08      	pop	{r3, pc}
   d8ae0:	00030238 	.word	0x00030238

000d8ae4 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d8ae4:	b508      	push	{r3, lr}
   d8ae6:	4b02      	ldr	r3, [pc, #8]	; (d8af0 <sock_recv+0xc>)
   d8ae8:	681b      	ldr	r3, [r3, #0]
   d8aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8aec:	9301      	str	r3, [sp, #4]
   d8aee:	bd08      	pop	{r3, pc}
   d8af0:	00030238 	.word	0x00030238

000d8af4 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d8af4:	b508      	push	{r3, lr}
   d8af6:	4b02      	ldr	r3, [pc, #8]	; (d8b00 <sock_send+0xc>)
   d8af8:	681b      	ldr	r3, [r3, #0]
   d8afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8afc:	9301      	str	r3, [sp, #4]
   d8afe:	bd08      	pop	{r3, pc}
   d8b00:	00030238 	.word	0x00030238

000d8b04 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d8b04:	b508      	push	{r3, lr}
   d8b06:	4b02      	ldr	r3, [pc, #8]	; (d8b10 <sock_socket+0xc>)
   d8b08:	681b      	ldr	r3, [r3, #0]
   d8b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d8b0c:	9301      	str	r3, [sp, #4]
   d8b0e:	bd08      	pop	{r3, pc}
   d8b10:	00030238 	.word	0x00030238

000d8b14 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d8b14:	b508      	push	{r3, lr}
   d8b16:	4b02      	ldr	r3, [pc, #8]	; (d8b20 <HAL_USB_USART_Init+0xc>)
   d8b18:	681b      	ldr	r3, [r3, #0]
   d8b1a:	681b      	ldr	r3, [r3, #0]
   d8b1c:	9301      	str	r3, [sp, #4]
   d8b1e:	bd08      	pop	{r3, pc}
   d8b20:	0003024c 	.word	0x0003024c

000d8b24 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d8b24:	b508      	push	{r3, lr}
   d8b26:	4b02      	ldr	r3, [pc, #8]	; (d8b30 <HAL_USB_USART_Begin+0xc>)
   d8b28:	681b      	ldr	r3, [r3, #0]
   d8b2a:	685b      	ldr	r3, [r3, #4]
   d8b2c:	9301      	str	r3, [sp, #4]
   d8b2e:	bd08      	pop	{r3, pc}
   d8b30:	0003024c 	.word	0x0003024c

000d8b34 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d8b34:	b508      	push	{r3, lr}
   d8b36:	4b02      	ldr	r3, [pc, #8]	; (d8b40 <HAL_USB_USART_Available_Data+0xc>)
   d8b38:	681b      	ldr	r3, [r3, #0]
   d8b3a:	691b      	ldr	r3, [r3, #16]
   d8b3c:	9301      	str	r3, [sp, #4]
   d8b3e:	bd08      	pop	{r3, pc}
   d8b40:	0003024c 	.word	0x0003024c

000d8b44 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d8b44:	b508      	push	{r3, lr}
   d8b46:	4b02      	ldr	r3, [pc, #8]	; (d8b50 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d8b48:	681b      	ldr	r3, [r3, #0]
   d8b4a:	695b      	ldr	r3, [r3, #20]
   d8b4c:	9301      	str	r3, [sp, #4]
   d8b4e:	bd08      	pop	{r3, pc}
   d8b50:	0003024c 	.word	0x0003024c

000d8b54 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8b54:	b508      	push	{r3, lr}
   d8b56:	4b02      	ldr	r3, [pc, #8]	; (d8b60 <HAL_USB_USART_Receive_Data+0xc>)
   d8b58:	681b      	ldr	r3, [r3, #0]
   d8b5a:	699b      	ldr	r3, [r3, #24]
   d8b5c:	9301      	str	r3, [sp, #4]
   d8b5e:	bd08      	pop	{r3, pc}
   d8b60:	0003024c 	.word	0x0003024c

000d8b64 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8b64:	b508      	push	{r3, lr}
   d8b66:	4b02      	ldr	r3, [pc, #8]	; (d8b70 <HAL_USB_USART_Send_Data+0xc>)
   d8b68:	681b      	ldr	r3, [r3, #0]
   d8b6a:	69db      	ldr	r3, [r3, #28]
   d8b6c:	9301      	str	r3, [sp, #4]
   d8b6e:	bd08      	pop	{r3, pc}
   d8b70:	0003024c 	.word	0x0003024c

000d8b74 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d8b74:	b508      	push	{r3, lr}
   d8b76:	4b02      	ldr	r3, [pc, #8]	; (d8b80 <HAL_USB_USART_Flush_Data+0xc>)
   d8b78:	681b      	ldr	r3, [r3, #0]
   d8b7a:	6a1b      	ldr	r3, [r3, #32]
   d8b7c:	9301      	str	r3, [sp, #4]
   d8b7e:	bd08      	pop	{r3, pc}
   d8b80:	0003024c 	.word	0x0003024c

000d8b84 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d8b84:	b508      	push	{r3, lr}
   d8b86:	4b02      	ldr	r3, [pc, #8]	; (d8b90 <log_message+0xc>)
   d8b88:	681b      	ldr	r3, [r3, #0]
   d8b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8b8c:	9301      	str	r3, [sp, #4]
   d8b8e:	bd08      	pop	{r3, pc}
   d8b90:	00030260 	.word	0x00030260

000d8b94 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d8b94:	b508      	push	{r3, lr}
   d8b96:	4b02      	ldr	r3, [pc, #8]	; (d8ba0 <system_mode+0xc>)
   d8b98:	681b      	ldr	r3, [r3, #0]
   d8b9a:	681b      	ldr	r3, [r3, #0]
   d8b9c:	9301      	str	r3, [sp, #4]
   d8b9e:	bd08      	pop	{r3, pc}
   d8ba0:	00030220 	.word	0x00030220

000d8ba4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d8ba4:	b508      	push	{r3, lr}
   d8ba6:	4b02      	ldr	r3, [pc, #8]	; (d8bb0 <set_system_mode+0xc>)
   d8ba8:	681b      	ldr	r3, [r3, #0]
   d8baa:	685b      	ldr	r3, [r3, #4]
   d8bac:	9301      	str	r3, [sp, #4]
   d8bae:	bd08      	pop	{r3, pc}
   d8bb0:	00030220 	.word	0x00030220

000d8bb4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d8bb4:	b508      	push	{r3, lr}
   d8bb6:	4b02      	ldr	r3, [pc, #8]	; (d8bc0 <system_delay_ms+0xc>)
   d8bb8:	681b      	ldr	r3, [r3, #0]
   d8bba:	695b      	ldr	r3, [r3, #20]
   d8bbc:	9301      	str	r3, [sp, #4]
   d8bbe:	bd08      	pop	{r3, pc}
   d8bc0:	00030220 	.word	0x00030220

000d8bc4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d8bc4:	b508      	push	{r3, lr}
   d8bc6:	4b02      	ldr	r3, [pc, #8]	; (d8bd0 <system_thread_set_state+0xc>)
   d8bc8:	681b      	ldr	r3, [r3, #0]
   d8bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8bcc:	9301      	str	r3, [sp, #4]
   d8bce:	bd08      	pop	{r3, pc}
   d8bd0:	00030220 	.word	0x00030220

000d8bd4 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d8bd4:	b508      	push	{r3, lr}
   d8bd6:	4b02      	ldr	r3, [pc, #8]	; (d8be0 <system_thread_get_state+0xc>)
   d8bd8:	681b      	ldr	r3, [r3, #0]
   d8bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d8bdc:	9301      	str	r3, [sp, #4]
   d8bde:	bd08      	pop	{r3, pc}
   d8be0:	00030220 	.word	0x00030220

000d8be4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d8be4:	b508      	push	{r3, lr}
   d8be6:	4b03      	ldr	r3, [pc, #12]	; (d8bf4 <system_ctrl_set_app_request_handler+0x10>)
   d8be8:	681b      	ldr	r3, [r3, #0]
   d8bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d8bee:	9301      	str	r3, [sp, #4]
   d8bf0:	bd08      	pop	{r3, pc}
   d8bf2:	0000      	.short	0x0000
   d8bf4:	00030220 	.word	0x00030220

000d8bf8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d8bf8:	b508      	push	{r3, lr}
   d8bfa:	4b03      	ldr	r3, [pc, #12]	; (d8c08 <system_ctrl_set_result+0x10>)
   d8bfc:	681b      	ldr	r3, [r3, #0]
   d8bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d8c02:	9301      	str	r3, [sp, #4]
   d8c04:	bd08      	pop	{r3, pc}
   d8c06:	0000      	.short	0x0000
   d8c08:	00030220 	.word	0x00030220

000d8c0c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d8c0c:	b508      	push	{r3, lr}
   d8c0e:	4b02      	ldr	r3, [pc, #8]	; (d8c18 <network_connect+0xc>)
   d8c10:	681b      	ldr	r3, [r3, #0]
   d8c12:	685b      	ldr	r3, [r3, #4]
   d8c14:	9301      	str	r3, [sp, #4]
   d8c16:	bd08      	pop	{r3, pc}
   d8c18:	00030240 	.word	0x00030240

000d8c1c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d8c1c:	b508      	push	{r3, lr}
   d8c1e:	4b02      	ldr	r3, [pc, #8]	; (d8c28 <network_connecting+0xc>)
   d8c20:	681b      	ldr	r3, [r3, #0]
   d8c22:	689b      	ldr	r3, [r3, #8]
   d8c24:	9301      	str	r3, [sp, #4]
   d8c26:	bd08      	pop	{r3, pc}
   d8c28:	00030240 	.word	0x00030240

000d8c2c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d8c2c:	b508      	push	{r3, lr}
   d8c2e:	4b02      	ldr	r3, [pc, #8]	; (d8c38 <network_disconnect+0xc>)
   d8c30:	681b      	ldr	r3, [r3, #0]
   d8c32:	68db      	ldr	r3, [r3, #12]
   d8c34:	9301      	str	r3, [sp, #4]
   d8c36:	bd08      	pop	{r3, pc}
   d8c38:	00030240 	.word	0x00030240

000d8c3c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d8c3c:	b508      	push	{r3, lr}
   d8c3e:	4b02      	ldr	r3, [pc, #8]	; (d8c48 <network_ready+0xc>)
   d8c40:	681b      	ldr	r3, [r3, #0]
   d8c42:	691b      	ldr	r3, [r3, #16]
   d8c44:	9301      	str	r3, [sp, #4]
   d8c46:	bd08      	pop	{r3, pc}
   d8c48:	00030240 	.word	0x00030240

000d8c4c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d8c4c:	b508      	push	{r3, lr}
   d8c4e:	4b02      	ldr	r3, [pc, #8]	; (d8c58 <network_on+0xc>)
   d8c50:	681b      	ldr	r3, [r3, #0]
   d8c52:	695b      	ldr	r3, [r3, #20]
   d8c54:	9301      	str	r3, [sp, #4]
   d8c56:	bd08      	pop	{r3, pc}
   d8c58:	00030240 	.word	0x00030240

000d8c5c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d8c5c:	b508      	push	{r3, lr}
   d8c5e:	4b02      	ldr	r3, [pc, #8]	; (d8c68 <network_off+0xc>)
   d8c60:	681b      	ldr	r3, [r3, #0]
   d8c62:	699b      	ldr	r3, [r3, #24]
   d8c64:	9301      	str	r3, [sp, #4]
   d8c66:	bd08      	pop	{r3, pc}
   d8c68:	00030240 	.word	0x00030240

000d8c6c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d8c6c:	b508      	push	{r3, lr}
   d8c6e:	4b02      	ldr	r3, [pc, #8]	; (d8c78 <network_listen+0xc>)
   d8c70:	681b      	ldr	r3, [r3, #0]
   d8c72:	69db      	ldr	r3, [r3, #28]
   d8c74:	9301      	str	r3, [sp, #4]
   d8c76:	bd08      	pop	{r3, pc}
   d8c78:	00030240 	.word	0x00030240

000d8c7c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d8c7c:	b508      	push	{r3, lr}
   d8c7e:	4b02      	ldr	r3, [pc, #8]	; (d8c88 <network_listening+0xc>)
   d8c80:	681b      	ldr	r3, [r3, #0]
   d8c82:	6a1b      	ldr	r3, [r3, #32]
   d8c84:	9301      	str	r3, [sp, #4]
   d8c86:	bd08      	pop	{r3, pc}
   d8c88:	00030240 	.word	0x00030240

000d8c8c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d8c8c:	b508      	push	{r3, lr}
   d8c8e:	4b02      	ldr	r3, [pc, #8]	; (d8c98 <network_set_listen_timeout+0xc>)
   d8c90:	681b      	ldr	r3, [r3, #0]
   d8c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8c94:	9301      	str	r3, [sp, #4]
   d8c96:	bd08      	pop	{r3, pc}
   d8c98:	00030240 	.word	0x00030240

000d8c9c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d8c9c:	b508      	push	{r3, lr}
   d8c9e:	4b02      	ldr	r3, [pc, #8]	; (d8ca8 <network_get_listen_timeout+0xc>)
   d8ca0:	681b      	ldr	r3, [r3, #0]
   d8ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8ca4:	9301      	str	r3, [sp, #4]
   d8ca6:	bd08      	pop	{r3, pc}
   d8ca8:	00030240 	.word	0x00030240

000d8cac <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d8cac:	b508      	push	{r3, lr}
   d8cae:	4b02      	ldr	r3, [pc, #8]	; (d8cb8 <spark_process+0xc>)
   d8cb0:	681b      	ldr	r3, [r3, #0]
   d8cb2:	689b      	ldr	r3, [r3, #8]
   d8cb4:	9301      	str	r3, [sp, #4]
   d8cb6:	bd08      	pop	{r3, pc}
   d8cb8:	00030244 	.word	0x00030244

000d8cbc <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d8cbc:	b508      	push	{r3, lr}
   d8cbe:	4b02      	ldr	r3, [pc, #8]	; (d8cc8 <spark_cloud_flag_connected+0xc>)
   d8cc0:	681b      	ldr	r3, [r3, #0]
   d8cc2:	695b      	ldr	r3, [r3, #20]
   d8cc4:	9301      	str	r3, [sp, #4]
   d8cc6:	bd08      	pop	{r3, pc}
   d8cc8:	00030244 	.word	0x00030244

000d8ccc <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d8ccc:	b508      	push	{r3, lr}
   d8cce:	4b02      	ldr	r3, [pc, #8]	; (d8cd8 <spark_deviceID+0xc>)
   d8cd0:	681b      	ldr	r3, [r3, #0]
   d8cd2:	69db      	ldr	r3, [r3, #28]
   d8cd4:	9301      	str	r3, [sp, #4]
   d8cd6:	bd08      	pop	{r3, pc}
   d8cd8:	00030244 	.word	0x00030244

000d8cdc <spark_sync_time>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d8cdc:	b508      	push	{r3, lr}
   d8cde:	4b02      	ldr	r3, [pc, #8]	; (d8ce8 <spark_sync_time+0xc>)
   d8ce0:	681b      	ldr	r3, [r3, #0]
   d8ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8ce4:	9301      	str	r3, [sp, #4]
   d8ce6:	bd08      	pop	{r3, pc}
   d8ce8:	00030244 	.word	0x00030244

000d8cec <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d8cec:	b508      	push	{r3, lr}
   d8cee:	4b02      	ldr	r3, [pc, #8]	; (d8cf8 <spark_sync_time_pending+0xc>)
   d8cf0:	681b      	ldr	r3, [r3, #0]
   d8cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8cf4:	9301      	str	r3, [sp, #4]
   d8cf6:	bd08      	pop	{r3, pc}
   d8cf8:	00030244 	.word	0x00030244

000d8cfc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d8cfc:	b508      	push	{r3, lr}
   d8cfe:	4b02      	ldr	r3, [pc, #8]	; (d8d08 <spark_set_random_seed_from_cloud_handler+0xc>)
   d8d00:	681b      	ldr	r3, [r3, #0]
   d8d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8d04:	9301      	str	r3, [sp, #4]
   d8d06:	bd08      	pop	{r3, pc}
   d8d08:	00030244 	.word	0x00030244

000d8d0c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d8d0c:	b508      	push	{r3, lr}
   d8d0e:	4b02      	ldr	r3, [pc, #8]	; (d8d18 <malloc+0xc>)
   d8d10:	681b      	ldr	r3, [r3, #0]
   d8d12:	681b      	ldr	r3, [r3, #0]
   d8d14:	9301      	str	r3, [sp, #4]
   d8d16:	bd08      	pop	{r3, pc}
   d8d18:	0003021c 	.word	0x0003021c

000d8d1c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d8d1c:	b508      	push	{r3, lr}
   d8d1e:	4b02      	ldr	r3, [pc, #8]	; (d8d28 <free+0xc>)
   d8d20:	681b      	ldr	r3, [r3, #0]
   d8d22:	685b      	ldr	r3, [r3, #4]
   d8d24:	9301      	str	r3, [sp, #4]
   d8d26:	bd08      	pop	{r3, pc}
   d8d28:	0003021c 	.word	0x0003021c

000d8d2c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d8d2c:	b508      	push	{r3, lr}
   d8d2e:	4b02      	ldr	r3, [pc, #8]	; (d8d38 <realloc+0xc>)
   d8d30:	681b      	ldr	r3, [r3, #0]
   d8d32:	689b      	ldr	r3, [r3, #8]
   d8d34:	9301      	str	r3, [sp, #4]
   d8d36:	bd08      	pop	{r3, pc}
   d8d38:	0003021c 	.word	0x0003021c

000d8d3c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d8d3c:	b508      	push	{r3, lr}
   d8d3e:	4b02      	ldr	r3, [pc, #8]	; (d8d48 <sprintf+0xc>)
   d8d40:	681b      	ldr	r3, [r3, #0]
   d8d42:	68db      	ldr	r3, [r3, #12]
   d8d44:	9301      	str	r3, [sp, #4]
   d8d46:	bd08      	pop	{r3, pc}
   d8d48:	0003021c 	.word	0x0003021c

000d8d4c <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d8d4c:	b508      	push	{r3, lr}
   d8d4e:	4b02      	ldr	r3, [pc, #8]	; (d8d58 <siprintf+0xc>)
   d8d50:	681b      	ldr	r3, [r3, #0]
   d8d52:	691b      	ldr	r3, [r3, #16]
   d8d54:	9301      	str	r3, [sp, #4]
   d8d56:	bd08      	pop	{r3, pc}
   d8d58:	0003021c 	.word	0x0003021c

000d8d5c <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d8d5c:	b508      	push	{r3, lr}
   d8d5e:	4b02      	ldr	r3, [pc, #8]	; (d8d68 <siscanf+0xc>)
   d8d60:	681b      	ldr	r3, [r3, #0]
   d8d62:	699b      	ldr	r3, [r3, #24]
   d8d64:	9301      	str	r3, [sp, #4]
   d8d66:	bd08      	pop	{r3, pc}
   d8d68:	0003021c 	.word	0x0003021c

000d8d6c <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d8d6c:	b508      	push	{r3, lr}
   d8d6e:	4b02      	ldr	r3, [pc, #8]	; (d8d78 <snprintf+0xc>)
   d8d70:	681b      	ldr	r3, [r3, #0]
   d8d72:	69db      	ldr	r3, [r3, #28]
   d8d74:	9301      	str	r3, [sp, #4]
   d8d76:	bd08      	pop	{r3, pc}
   d8d78:	0003021c 	.word	0x0003021c

000d8d7c <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   d8d7c:	b508      	push	{r3, lr}
   d8d7e:	4b02      	ldr	r3, [pc, #8]	; (d8d88 <sniprintf+0xc>)
   d8d80:	681b      	ldr	r3, [r3, #0]
   d8d82:	6a1b      	ldr	r3, [r3, #32]
   d8d84:	9301      	str	r3, [sp, #4]
   d8d86:	bd08      	pop	{r3, pc}
   d8d88:	0003021c 	.word	0x0003021c

000d8d8c <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d8d8c:	b508      	push	{r3, lr}
   d8d8e:	4b02      	ldr	r3, [pc, #8]	; (d8d98 <vsnprintf+0xc>)
   d8d90:	681b      	ldr	r3, [r3, #0]
   d8d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8d94:	9301      	str	r3, [sp, #4]
   d8d96:	bd08      	pop	{r3, pc}
   d8d98:	0003021c 	.word	0x0003021c

000d8d9c <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d8d9c:	b508      	push	{r3, lr}
   d8d9e:	4b02      	ldr	r3, [pc, #8]	; (d8da8 <_malloc_r+0xc>)
   d8da0:	681b      	ldr	r3, [r3, #0]
   d8da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8da4:	9301      	str	r3, [sp, #4]
   d8da6:	bd08      	pop	{r3, pc}
   d8da8:	0003021c 	.word	0x0003021c

000d8dac <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d8dac:	b508      	push	{r3, lr}
   d8dae:	4b02      	ldr	r3, [pc, #8]	; (d8db8 <__errno+0xc>)
   d8db0:	681b      	ldr	r3, [r3, #0]
   d8db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8db4:	9301      	str	r3, [sp, #4]
   d8db6:	bd08      	pop	{r3, pc}
   d8db8:	0003021c 	.word	0x0003021c

000d8dbc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8dbc:	2200      	movs	r2, #0
   d8dbe:	4611      	mov	r1, r2
   d8dc0:	6840      	ldr	r0, [r0, #4]
   d8dc2:	f7ff bf5b 	b.w	d8c7c <network_listening>

000d8dc6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8dc6:	2200      	movs	r2, #0
   d8dc8:	4611      	mov	r1, r2
   d8dca:	6840      	ldr	r0, [r0, #4]
   d8dcc:	f7ff bf66 	b.w	d8c9c <network_get_listen_timeout>

000d8dd0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8dd0:	2200      	movs	r2, #0
   d8dd2:	6840      	ldr	r0, [r0, #4]
   d8dd4:	f7ff bf5a 	b.w	d8c8c <network_set_listen_timeout>

000d8dd8 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8dd8:	2200      	movs	r2, #0
   d8dda:	f081 0101 	eor.w	r1, r1, #1
   d8dde:	6840      	ldr	r0, [r0, #4]
   d8de0:	f7ff bf44 	b.w	d8c6c <network_listen>

000d8de4 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d8de4:	2300      	movs	r3, #0
   d8de6:	461a      	mov	r2, r3
   d8de8:	4619      	mov	r1, r3
   d8dea:	6840      	ldr	r0, [r0, #4]
   d8dec:	f7ff bf36 	b.w	d8c5c <network_off>

000d8df0 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d8df0:	2300      	movs	r3, #0
   d8df2:	461a      	mov	r2, r3
   d8df4:	4619      	mov	r1, r3
   d8df6:	6840      	ldr	r0, [r0, #4]
   d8df8:	f7ff bf28 	b.w	d8c4c <network_on>

000d8dfc <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8dfc:	2200      	movs	r2, #0
   d8dfe:	4611      	mov	r1, r2
   d8e00:	6840      	ldr	r0, [r0, #4]
   d8e02:	f7ff bf1b 	b.w	d8c3c <network_ready>

000d8e06 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8e06:	2200      	movs	r2, #0
   d8e08:	4611      	mov	r1, r2
   d8e0a:	6840      	ldr	r0, [r0, #4]
   d8e0c:	f7ff bf06 	b.w	d8c1c <network_connecting>

000d8e10 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8e10:	2200      	movs	r2, #0
   d8e12:	2102      	movs	r1, #2
   d8e14:	6840      	ldr	r0, [r0, #4]
   d8e16:	f7ff bf09 	b.w	d8c2c <network_disconnect>

000d8e1a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8e1a:	2300      	movs	r3, #0
   d8e1c:	461a      	mov	r2, r3
   d8e1e:	6840      	ldr	r0, [r0, #4]
   d8e20:	f7ff bef4 	b.w	d8c0c <network_connect>

000d8e24 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d8e24:	4b02      	ldr	r3, [pc, #8]	; (d8e30 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d8e26:	2203      	movs	r2, #3
   d8e28:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d8e2a:	4a02      	ldr	r2, [pc, #8]	; (d8e34 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d8e2c:	601a      	str	r2, [r3, #0]
   d8e2e:	4770      	bx	lr
   d8e30:	2003dfac 	.word	0x2003dfac
   d8e34:	000dd0dc 	.word	0x000dd0dc

000d8e38 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d8e38:	2100      	movs	r1, #0
   d8e3a:	f7ff bccb 	b.w	d87d4 <HAL_SPI_Acquire>

000d8e3e <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d8e3e:	2100      	movs	r1, #0
   d8e40:	f7ff bcd0 	b.w	d87e4 <HAL_SPI_Release>

000d8e44 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d8e44:	b510      	push	{r4, lr}
   d8e46:	4604      	mov	r4, r0
{
    _spi = spi;
   d8e48:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d8e4a:	4608      	mov	r0, r1
   d8e4c:	f7ff fc92 	bl	d8774 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d8e50:	2300      	movs	r3, #0
   d8e52:	6063      	str	r3, [r4, #4]
}
   d8e54:	4620      	mov	r0, r4
   d8e56:	bd10      	pop	{r4, pc}

000d8e58 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d8e58:	b510      	push	{r4, lr}
   d8e5a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d8e5c:	7800      	ldrb	r0, [r0, #0]
   d8e5e:	f7ff ffeb 	bl	d8e38 <_ZN8SPIClass4lockEv.isra.0>
   d8e62:	b948      	cbnz	r0, d8e78 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d8e64:	7820      	ldrb	r0, [r4, #0]
   d8e66:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d8e6a:	f7ff fc5b 	bl	d8724 <HAL_SPI_Begin>
        unlock();
   d8e6e:	7820      	ldrb	r0, [r4, #0]
    }
}
   d8e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d8e74:	f7ff bfe3 	b.w	d8e3e <_ZN8SPIClass6unlockEv.isra.1>
   d8e78:	bd10      	pop	{r4, pc}

000d8e7a <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d8e7a:	b538      	push	{r3, r4, r5, lr}
   d8e7c:	4604      	mov	r4, r0
    if (!lock())
   d8e7e:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d8e80:	460d      	mov	r5, r1
    if (!lock())
   d8e82:	f7ff ffd9 	bl	d8e38 <_ZN8SPIClass4lockEv.isra.0>
   d8e86:	b940      	cbnz	r0, d8e9a <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d8e88:	7820      	ldrb	r0, [r4, #0]
   d8e8a:	4629      	mov	r1, r5
   d8e8c:	f7ff fc52 	bl	d8734 <HAL_SPI_Set_Bit_Order>
        unlock();
   d8e90:	7820      	ldrb	r0, [r4, #0]
    }
}
   d8e92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d8e96:	f7ff bfd2 	b.w	d8e3e <_ZN8SPIClass6unlockEv.isra.1>
   d8e9a:	bd38      	pop	{r3, r4, r5, pc}

000d8e9c <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d8e9c:	b538      	push	{r3, r4, r5, lr}
   d8e9e:	4604      	mov	r4, r0
    if (!lock())
   d8ea0:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d8ea2:	460d      	mov	r5, r1
    if (!lock())
   d8ea4:	f7ff ffc8 	bl	d8e38 <_ZN8SPIClass4lockEv.isra.0>
   d8ea8:	b940      	cbnz	r0, d8ebc <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d8eaa:	7820      	ldrb	r0, [r4, #0]
   d8eac:	4629      	mov	r1, r5
   d8eae:	f7ff fc49 	bl	d8744 <HAL_SPI_Set_Data_Mode>
        unlock();
   d8eb2:	7820      	ldrb	r0, [r4, #0]
    }
}
   d8eb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d8eb8:	f7ff bfc1 	b.w	d8e3e <_ZN8SPIClass6unlockEv.isra.1>
   d8ebc:	bd38      	pop	{r3, r4, r5, pc}

000d8ebe <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d8ebe:	7800      	ldrb	r0, [r0, #0]
   d8ec0:	f7ff bfbd 	b.w	d8e3e <_ZN8SPIClass6unlockEv.isra.1>

000d8ec4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d8ec4:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d8ec6:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d8ec8:	6018      	str	r0, [r3, #0]
   d8eca:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d8ecc:	6818      	ldr	r0, [r3, #0]
   d8ece:	4288      	cmp	r0, r1
   d8ed0:	b2e5      	uxtb	r5, r4
   d8ed2:	d906      	bls.n	d8ee2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d8ed4:	3401      	adds	r4, #1
   d8ed6:	2c08      	cmp	r4, #8
   d8ed8:	d002      	beq.n	d8ee0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d8eda:	0840      	lsrs	r0, r0, #1
   d8edc:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d8ede:	e7f5      	b.n	d8ecc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d8ee0:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d8ee2:	4b02      	ldr	r3, [pc, #8]	; (d8eec <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d8ee4:	5d5b      	ldrb	r3, [r3, r5]
   d8ee6:	7013      	strb	r3, [r2, #0]
   d8ee8:	bd30      	pop	{r4, r5, pc}
   d8eea:	bf00      	nop
   d8eec:	000dd108 	.word	0x000dd108

000d8ef0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d8ef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8ef4:	4607      	mov	r7, r0
   d8ef6:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d8ef8:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d8efa:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d8efc:	f7ff ff9c 	bl	d8e38 <_ZN8SPIClass4lockEv.isra.0>
   d8f00:	2800      	cmp	r0, #0
   d8f02:	db62      	blt.n	d8fca <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d8f04:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d8f06:	2214      	movs	r2, #20
   d8f08:	2100      	movs	r1, #0
   d8f0a:	a809      	add	r0, sp, #36	; 0x24
   d8f0c:	f002 fd94 	bl	dba38 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d8f10:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d8f12:	4620      	mov	r0, r4
   d8f14:	2200      	movs	r2, #0
   d8f16:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d8f18:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d8f1c:	f7ff fc3a 	bl	d8794 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d8f20:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d8f24:	b154      	cbz	r4, d8f3c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d8f26:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d8f2a:	b935      	cbnz	r5, d8f3a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d8f2c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d8f30:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d8f34:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d8f38:	e003      	b.n	d8f42 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d8f3a:	2400      	movs	r4, #0
   d8f3c:	46a1      	mov	r9, r4
   d8f3e:	46a0      	mov	r8, r4
   d8f40:	2501      	movs	r5, #1
   d8f42:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d8f44:	b105      	cbz	r5, d8f48 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d8f46:	b9bb      	cbnz	r3, d8f78 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d8f48:	429d      	cmp	r5, r3
   d8f4a:	d10b      	bne.n	d8f64 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d8f4c:	68b2      	ldr	r2, [r6, #8]
   d8f4e:	4542      	cmp	r2, r8
   d8f50:	d108      	bne.n	d8f64 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d8f52:	f88d 9020 	strb.w	r9, [sp, #32]
   d8f56:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d8f5a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d8f5e:	89b2      	ldrh	r2, [r6, #12]
   d8f60:	4291      	cmp	r1, r2
   d8f62:	d009      	beq.n	d8f78 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d8f64:	b153      	cbz	r3, d8f7c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d8f66:	2400      	movs	r4, #0
   d8f68:	7838      	ldrb	r0, [r7, #0]
   d8f6a:	9401      	str	r4, [sp, #4]
   d8f6c:	9400      	str	r4, [sp, #0]
   d8f6e:	4623      	mov	r3, r4
   d8f70:	4622      	mov	r2, r4
   d8f72:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d8f74:	f7ff fc26 	bl	d87c4 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d8f78:	2000      	movs	r0, #0
   d8f7a:	e026      	b.n	d8fca <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d8f7c:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d8f80:	68b1      	ldr	r1, [r6, #8]
   d8f82:	980a      	ldr	r0, [sp, #40]	; 0x28
   d8f84:	ab04      	add	r3, sp, #16
   d8f86:	f10d 020f 	add.w	r2, sp, #15
   d8f8a:	f7ff ff9b 	bl	d8ec4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d8f8e:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d8f90:	b105      	cbz	r5, d8f94 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d8f92:	b9b1      	cbnz	r1, d8fc2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d8f94:	42a9      	cmp	r1, r5
   d8f96:	d008      	beq.n	d8faa <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d8f98:	2400      	movs	r4, #0
   d8f9a:	7838      	ldrb	r0, [r7, #0]
   d8f9c:	9401      	str	r4, [sp, #4]
   d8f9e:	7b74      	ldrb	r4, [r6, #13]
   d8fa0:	7b33      	ldrb	r3, [r6, #12]
   d8fa2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d8fa6:	9400      	str	r4, [sp, #0]
   d8fa8:	e7e4      	b.n	d8f74 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d8faa:	68b3      	ldr	r3, [r6, #8]
   d8fac:	4543      	cmp	r3, r8
   d8fae:	d3f3      	bcc.n	d8f98 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d8fb0:	f88d 9020 	strb.w	r9, [sp, #32]
   d8fb4:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d8fb8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d8fbc:	89b3      	ldrh	r3, [r6, #12]
   d8fbe:	429a      	cmp	r2, r3
   d8fc0:	d1ea      	bne.n	d8f98 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d8fc2:	9b04      	ldr	r3, [sp, #16]
   d8fc4:	4543      	cmp	r3, r8
   d8fc6:	d1e7      	bne.n	d8f98 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d8fc8:	e7d6      	b.n	d8f78 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d8fca:	b00f      	add	sp, #60	; 0x3c
   d8fcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d8fd0 <_ZN8SPIClass13setClockSpeedEjj>:
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d8fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8fd4:	b088      	sub	sp, #32
    unsigned clock = 0;
   d8fd6:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d8fd8:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d8fda:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d8fdc:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d8fde:	460e      	mov	r6, r1
   d8fe0:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d8fe2:	f7ff ff29 	bl	d8e38 <_ZN8SPIClass4lockEv.isra.0>
   d8fe6:	4605      	mov	r5, r0
   d8fe8:	bb00      	cbnz	r0, d902c <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d8fea:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d8fee:	4601      	mov	r1, r0
   d8ff0:	2214      	movs	r2, #20
   d8ff2:	a803      	add	r0, sp, #12
   d8ff4:	f002 fd20 	bl	dba38 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d8ff8:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d8ffa:	462a      	mov	r2, r5
   d8ffc:	a903      	add	r1, sp, #12
   d8ffe:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d9000:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d9004:	f7ff fbc6 	bl	d8794 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d9008:	ab02      	add	r3, sp, #8
   d900a:	f10d 0207 	add.w	r2, sp, #7
   d900e:	fb07 f106 	mul.w	r1, r7, r6
   d9012:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d9014:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d9018:	f7ff ff54 	bl	d8ec4 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d901c:	7820      	ldrb	r0, [r4, #0]
   d901e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d9022:	f7ff fb97 	bl	d8754 <HAL_SPI_Set_Clock_Divider>
        unlock();
   d9026:	7820      	ldrb	r0, [r4, #0]
   d9028:	f7ff ff09 	bl	d8e3e <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d902c:	9802      	ldr	r0, [sp, #8]
   d902e:	b008      	add	sp, #32
   d9030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d9034 <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d9034:	b538      	push	{r3, r4, r5, lr}
   d9036:	4604      	mov	r4, r0
    if (!lock())
   d9038:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d903a:	460d      	mov	r5, r1
    if (!lock())
   d903c:	f7ff fefc 	bl	d8e38 <_ZN8SPIClass4lockEv.isra.0>
   d9040:	b9c8      	cbnz	r0, d9076 <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d9042:	6861      	ldr	r1, [r4, #4]
   d9044:	b171      	cbz	r1, d9064 <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d9046:	4b0c      	ldr	r3, [pc, #48]	; (d9078 <_ZN8SPIClass15setClockDividerEh+0x44>)
   d9048:	5cc2      	ldrb	r2, [r0, r3]
   d904a:	42aa      	cmp	r2, r5
   d904c:	d002      	beq.n	d9054 <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d904e:	3001      	adds	r0, #1
   d9050:	2808      	cmp	r0, #8
   d9052:	d1f9      	bne.n	d9048 <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d9054:	3001      	adds	r0, #1
   d9056:	b2c0      	uxtb	r0, r0
   d9058:	40c1      	lsrs	r1, r0
   d905a:	2201      	movs	r2, #1
   d905c:	4620      	mov	r0, r4
   d905e:	f7ff ffb7 	bl	d8fd0 <_ZN8SPIClass13setClockSpeedEjj>
   d9062:	e003      	b.n	d906c <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d9064:	4629      	mov	r1, r5
   d9066:	7820      	ldrb	r0, [r4, #0]
   d9068:	f7ff fb74 	bl	d8754 <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d906c:	7820      	ldrb	r0, [r4, #0]
    }
}
   d906e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d9072:	f7ff bee4 	b.w	d8e3e <_ZN8SPIClass6unlockEv.isra.1>
   d9076:	bd38      	pop	{r3, r4, r5, pc}
   d9078:	000dd108 	.word	0x000dd108

000d907c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d907c:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d907e:	7800      	ldrb	r0, [r0, #0]
   d9080:	f7ff fb70 	bl	d8764 <HAL_SPI_Send_Receive_Data>
}
   d9084:	b2c0      	uxtb	r0, r0
   d9086:	bd08      	pop	{r3, pc}

000d9088 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d9088:	b530      	push	{r4, r5, lr}
   d908a:	b087      	sub	sp, #28
   d908c:	4604      	mov	r4, r0
   d908e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d9090:	7800      	ldrb	r0, [r0, #0]
   d9092:	9500      	str	r5, [sp, #0]
   d9094:	f7ff fb86 	bl	d87a4 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d9098:	b93d      	cbnz	r5, d90aa <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d909a:	a902      	add	r1, sp, #8
   d909c:	7820      	ldrb	r0, [r4, #0]
   d909e:	f7ff fb89 	bl	d87b4 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d90a2:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d90a6:	07db      	lsls	r3, r3, #31
   d90a8:	d4f7      	bmi.n	d909a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d90aa:	b007      	add	sp, #28
   d90ac:	bd30      	pop	{r4, r5, pc}

000d90ae <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d90ae:	7800      	ldrb	r0, [r0, #0]
   d90b0:	f7ff bb68 	b.w	d8784 <HAL_SPI_Is_Enabled>

000d90b4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d90b4:	b510      	push	{r4, lr}
   d90b6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d90b8:	6800      	ldr	r0, [r0, #0]
   d90ba:	b118      	cbz	r0, d90c4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d90bc:	f7ff fe2e 	bl	d8d1c <free>
            wakeupSource_ = nullptr;
   d90c0:	2300      	movs	r3, #0
   d90c2:	6023      	str	r3, [r4, #0]
   d90c4:	bd10      	pop	{r4, pc}

000d90c6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d90c6:	b510      	push	{r4, lr}
   d90c8:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d90ca:	f7ff fff3 	bl	d90b4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d90ce:	4620      	mov	r0, r4
   d90d0:	bd10      	pop	{r4, pc}
	...

000d90d4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d90d4:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d90d6:	4c09      	ldr	r4, [pc, #36]	; (d90fc <_GLOBAL__sub_I_System+0x28>)
   d90d8:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d90da:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d90de:	6020      	str	r0, [r4, #0]
   d90e0:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d90e2:	71a0      	strb	r0, [r4, #6]
   d90e4:	8120      	strh	r0, [r4, #8]
   d90e6:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d90e8:	f7ff fd5c 	bl	d8ba4 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d90ec:	4620      	mov	r0, r4
   d90ee:	4a04      	ldr	r2, [pc, #16]	; (d9100 <_GLOBAL__sub_I_System+0x2c>)
   d90f0:	4904      	ldr	r1, [pc, #16]	; (d9104 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d90f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d90f6:	f001 bcd9 	b.w	daaac <__aeabi_atexit>
   d90fa:	bf00      	nop
   d90fc:	2003dfb4 	.word	0x2003dfb4
   d9100:	2003d8e0 	.word	0x2003d8e0
   d9104:	000d90c7 	.word	0x000d90c7

000d9108 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d9108:	b510      	push	{r4, lr}
   d910a:	4604      	mov	r4, r0
{
	free(buffer);
   d910c:	6800      	ldr	r0, [r0, #0]
   d910e:	f7ff fe05 	bl	d8d1c <free>
}
   d9112:	4620      	mov	r0, r4
   d9114:	bd10      	pop	{r4, pc}

000d9116 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d9116:	b510      	push	{r4, lr}
   d9118:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d911a:	6800      	ldr	r0, [r0, #0]
   d911c:	b108      	cbz	r0, d9122 <_ZN6String10invalidateEv+0xc>
   d911e:	f7ff fdfd 	bl	d8d1c <free>
	buffer = NULL;
   d9122:	2300      	movs	r3, #0
   d9124:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d9126:	60a3      	str	r3, [r4, #8]
   d9128:	6063      	str	r3, [r4, #4]
   d912a:	bd10      	pop	{r4, pc}

000d912c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d912c:	b538      	push	{r3, r4, r5, lr}
   d912e:	4604      	mov	r4, r0
   d9130:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d9132:	6800      	ldr	r0, [r0, #0]
   d9134:	3101      	adds	r1, #1
   d9136:	f7ff fdf9 	bl	d8d2c <realloc>
	if (newbuffer) {
   d913a:	b110      	cbz	r0, d9142 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d913c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d9140:	2001      	movs	r0, #1
	}
	return 0;
}
   d9142:	bd38      	pop	{r3, r4, r5, pc}

000d9144 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d9144:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d9146:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d9148:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d914a:	b113      	cbz	r3, d9152 <_ZN6String7reserveEj+0xe>
   d914c:	6843      	ldr	r3, [r0, #4]
   d914e:	428b      	cmp	r3, r1
   d9150:	d207      	bcs.n	d9162 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d9152:	4620      	mov	r0, r4
   d9154:	f7ff ffea 	bl	d912c <_ZN6String12changeBufferEj>
   d9158:	b120      	cbz	r0, d9164 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d915a:	68a3      	ldr	r3, [r4, #8]
   d915c:	b90b      	cbnz	r3, d9162 <_ZN6String7reserveEj+0x1e>
   d915e:	6822      	ldr	r2, [r4, #0]
   d9160:	7013      	strb	r3, [r2, #0]
   d9162:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d9164:	bd10      	pop	{r4, pc}

000d9166 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d9166:	b570      	push	{r4, r5, r6, lr}
   d9168:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d916a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d916c:	4604      	mov	r4, r0
   d916e:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d9170:	f7ff ffe8 	bl	d9144 <_ZN6String7reserveEj>
   d9174:	b918      	cbnz	r0, d917e <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d9176:	4620      	mov	r0, r4
   d9178:	f7ff ffcd 	bl	d9116 <_ZN6String10invalidateEv>
		return *this;
   d917c:	e009      	b.n	d9192 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d917e:	462a      	mov	r2, r5
   d9180:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d9182:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d9184:	6820      	ldr	r0, [r4, #0]
   d9186:	f002 fc4c 	bl	dba22 <memcpy>
	buffer[len] = 0;
   d918a:	6822      	ldr	r2, [r4, #0]
   d918c:	68a3      	ldr	r3, [r4, #8]
   d918e:	2100      	movs	r1, #0
   d9190:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d9192:	4620      	mov	r0, r4
   d9194:	bd70      	pop	{r4, r5, r6, pc}

000d9196 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d9196:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9198:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d919a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d919c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d919e:	6043      	str	r3, [r0, #4]
	len = 0;
   d91a0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d91a2:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d91a4:	460d      	mov	r5, r1
   d91a6:	b139      	cbz	r1, d91b8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d91a8:	4608      	mov	r0, r1
   d91aa:	f003 f9a9 	bl	dc500 <strlen>
   d91ae:	4629      	mov	r1, r5
   d91b0:	4602      	mov	r2, r0
   d91b2:	4620      	mov	r0, r4
   d91b4:	f7ff ffd7 	bl	d9166 <_ZN6String4copyEPKcj>
}
   d91b8:	4620      	mov	r0, r4
   d91ba:	bd38      	pop	{r3, r4, r5, pc}

000d91bc <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d91bc:	b538      	push	{r3, r4, r5, lr}
   d91be:	4605      	mov	r5, r0
	if (buffer) {
   d91c0:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d91c2:	460c      	mov	r4, r1
	if (buffer) {
   d91c4:	b160      	cbz	r0, d91e0 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d91c6:	686a      	ldr	r2, [r5, #4]
   d91c8:	688b      	ldr	r3, [r1, #8]
   d91ca:	429a      	cmp	r2, r3
   d91cc:	d306      	bcc.n	d91dc <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d91ce:	6809      	ldr	r1, [r1, #0]
   d91d0:	f002 fc7a 	bl	dbac8 <strcpy>
			len = rhs.len;
   d91d4:	68a3      	ldr	r3, [r4, #8]
   d91d6:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d91d8:	2300      	movs	r3, #0
   d91da:	e00a      	b.n	d91f2 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d91dc:	f7ff fd9e 	bl	d8d1c <free>
		}
	}
	buffer = rhs.buffer;
   d91e0:	6823      	ldr	r3, [r4, #0]
   d91e2:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d91e4:	6863      	ldr	r3, [r4, #4]
   d91e6:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d91e8:	68a3      	ldr	r3, [r4, #8]
   d91ea:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d91ec:	2300      	movs	r3, #0
   d91ee:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d91f0:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d91f2:	60a3      	str	r3, [r4, #8]
   d91f4:	bd38      	pop	{r3, r4, r5, pc}

000d91f6 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d91f6:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d91f8:	b510      	push	{r4, lr}
   d91fa:	460b      	mov	r3, r1
   d91fc:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d91fe:	d007      	beq.n	d9210 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d9200:	6809      	ldr	r1, [r1, #0]
   d9202:	b119      	cbz	r1, d920c <_ZN6StringaSERKS_+0x16>
   d9204:	689a      	ldr	r2, [r3, #8]
   d9206:	f7ff ffae 	bl	d9166 <_ZN6String4copyEPKcj>
   d920a:	e001      	b.n	d9210 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d920c:	f7ff ff83 	bl	d9116 <_ZN6String10invalidateEv>

	return *this;
}
   d9210:	4620      	mov	r0, r4
   d9212:	bd10      	pop	{r4, pc}

000d9214 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d9214:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d9216:	b510      	push	{r4, lr}
   d9218:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d921a:	d001      	beq.n	d9220 <_ZN6StringaSEOS_+0xc>
   d921c:	f7ff ffce 	bl	d91bc <_ZN6String4moveERS_>
	return *this;
}
   d9220:	4620      	mov	r0, r4
   d9222:	bd10      	pop	{r4, pc}

000d9224 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d9224:	b538      	push	{r3, r4, r5, lr}
   d9226:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d9228:	460c      	mov	r4, r1
   d922a:	b141      	cbz	r1, d923e <_ZN6StringaSEPKc+0x1a>
   d922c:	4608      	mov	r0, r1
   d922e:	f003 f967 	bl	dc500 <strlen>
   d9232:	4621      	mov	r1, r4
   d9234:	4602      	mov	r2, r0
   d9236:	4628      	mov	r0, r5
   d9238:	f7ff ff95 	bl	d9166 <_ZN6String4copyEPKcj>
   d923c:	e001      	b.n	d9242 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d923e:	f7ff ff6a 	bl	d9116 <_ZN6String10invalidateEv>

	return *this;
}
   d9242:	4628      	mov	r0, r5
   d9244:	bd38      	pop	{r3, r4, r5, pc}

000d9246 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d9246:	b570      	push	{r4, r5, r6, lr}
   d9248:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d924a:	460e      	mov	r6, r1
   d924c:	b909      	cbnz	r1, d9252 <_ZN6String6concatEPKcj+0xc>
   d924e:	2000      	movs	r0, #0
   d9250:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d9252:	b16a      	cbz	r2, d9270 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d9254:	6883      	ldr	r3, [r0, #8]
   d9256:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d9258:	4629      	mov	r1, r5
   d925a:	f7ff ff73 	bl	d9144 <_ZN6String7reserveEj>
   d925e:	2800      	cmp	r0, #0
   d9260:	d0f5      	beq.n	d924e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d9262:	6820      	ldr	r0, [r4, #0]
   d9264:	68a3      	ldr	r3, [r4, #8]
   d9266:	4631      	mov	r1, r6
   d9268:	4418      	add	r0, r3
   d926a:	f002 fc2d 	bl	dbac8 <strcpy>
	len = newlen;
   d926e:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d9270:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d9272:	bd70      	pop	{r4, r5, r6, pc}

000d9274 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d9274:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d9276:	688a      	ldr	r2, [r1, #8]
   d9278:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d927a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d927c:	f7ff ffe3 	bl	d9246 <_ZN6String6concatEPKcj>
   d9280:	b910      	cbnz	r0, d9288 <_ZplRK15StringSumHelperRK6String+0x14>
   d9282:	4620      	mov	r0, r4
   d9284:	f7ff ff47 	bl	d9116 <_ZN6String10invalidateEv>
	return a;
}
   d9288:	4620      	mov	r0, r4
   d928a:	bd10      	pop	{r4, pc}

000d928c <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d928c:	b510      	push	{r4, lr}
   d928e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d9290:	6800      	ldr	r0, [r0, #0]
   d9292:	b108      	cbz	r0, d9298 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d9294:	f7ff fb46 	bl	d8924 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d9298:	4620      	mov	r0, r4
   d929a:	bd10      	pop	{r4, pc}

000d929c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d929c:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d929e:	4c06      	ldr	r4, [pc, #24]	; (d92b8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d92a0:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d92a2:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d92a4:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d92a6:	f7ff fb35 	bl	d8914 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d92aa:	4620      	mov	r0, r4
   d92ac:	4a03      	ldr	r2, [pc, #12]	; (d92bc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d92ae:	4904      	ldr	r1, [pc, #16]	; (d92c0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d92b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d92b4:	f001 bbfa 	b.w	daaac <__aeabi_atexit>
   d92b8:	2003dfc0 	.word	0x2003dfc0
   d92bc:	2003d8e0 	.word	0x2003d8e0
   d92c0:	000d928d 	.word	0x000d928d

000d92c4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d92c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d92c6:	4606      	mov	r6, r0
   d92c8:	460d      	mov	r5, r1
   d92ca:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d92cc:	2400      	movs	r4, #0
  while (size--) {
   d92ce:	42bd      	cmp	r5, r7
   d92d0:	d00c      	beq.n	d92ec <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d92d2:	6833      	ldr	r3, [r6, #0]
   d92d4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d92d8:	689b      	ldr	r3, [r3, #8]
   d92da:	4630      	mov	r0, r6
   d92dc:	4798      	blx	r3
     if (chunk>=0)
   d92de:	2800      	cmp	r0, #0
   d92e0:	db01      	blt.n	d92e6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d92e2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d92e4:	e7f3      	b.n	d92ce <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d92e6:	2c00      	cmp	r4, #0
   d92e8:	bf08      	it	eq
   d92ea:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d92ec:	4620      	mov	r0, r4
   d92ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d92f0 <_ZN5Print5printEPKc>:
   d92f0:	b508      	push	{r3, lr}
   d92f2:	f7fe f9db 	bl	d76ac <_ZN5Print5writeEPKc>
   d92f6:	bd08      	pop	{r3, pc}

000d92f8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d92f8:	6803      	ldr	r3, [r0, #0]
   d92fa:	689b      	ldr	r3, [r3, #8]
   d92fc:	4718      	bx	r3

000d92fe <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d92fe:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d9300:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d9302:	4605      	mov	r5, r0
  size_t n = print('\r');
   d9304:	f7ff fff8 	bl	d92f8 <_ZN5Print5printEc>
  n += print('\n');
   d9308:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d930a:	4604      	mov	r4, r0
  n += print('\n');
   d930c:	4628      	mov	r0, r5
   d930e:	f7ff fff3 	bl	d92f8 <_ZN5Print5printEc>
  return n;
}
   d9312:	4420      	add	r0, r4
   d9314:	bd38      	pop	{r3, r4, r5, pc}

000d9316 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d9316:	b538      	push	{r3, r4, r5, lr}
   d9318:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d931a:	f7fe f9c7 	bl	d76ac <_ZN5Print5writeEPKc>
   d931e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d9320:	4628      	mov	r0, r5
   d9322:	f7ff ffec 	bl	d92fe <_ZN5Print7printlnEv>
  return n;
}
   d9326:	4420      	add	r0, r4
   d9328:	bd38      	pop	{r3, r4, r5, pc}

000d932a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d932a:	b530      	push	{r4, r5, lr}
   d932c:	b08b      	sub	sp, #44	; 0x2c
   d932e:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d9330:	2100      	movs	r1, #0
   d9332:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d9336:	2a01      	cmp	r2, #1
   d9338:	bf98      	it	ls
   d933a:	220a      	movls	r2, #10
   d933c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d9340:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d9344:	fb05 3312 	mls	r3, r5, r2, r3
   d9348:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d934c:	2b09      	cmp	r3, #9
   d934e:	bf94      	ite	ls
   d9350:	3330      	addls	r3, #48	; 0x30
   d9352:	3337      	addhi	r3, #55	; 0x37
   d9354:	b2db      	uxtb	r3, r3
   d9356:	4621      	mov	r1, r4
   d9358:	f804 3901 	strb.w	r3, [r4], #-1
   d935c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d935e:	2d00      	cmp	r5, #0
   d9360:	d1ee      	bne.n	d9340 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d9362:	f7fe f9a3 	bl	d76ac <_ZN5Print5writeEPKc>
}
   d9366:	b00b      	add	sp, #44	; 0x2c
   d9368:	bd30      	pop	{r4, r5, pc}
	...

000d936c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d936c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9370:	ec57 6b10 	vmov	r6, r7, d0
   d9374:	4682      	mov	sl, r0
   d9376:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d9378:	ee10 2a10 	vmov	r2, s0
   d937c:	463b      	mov	r3, r7
   d937e:	ee10 0a10 	vmov	r0, s0
   d9382:	4639      	mov	r1, r7
   d9384:	f002 f94e 	bl	db624 <__aeabi_dcmpun>
   d9388:	b108      	cbz	r0, d938e <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d938a:	494e      	ldr	r1, [pc, #312]	; (d94c4 <_ZN5Print10printFloatEdh+0x158>)
   d938c:	e012      	b.n	d93b4 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d938e:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d9392:	f04f 32ff 	mov.w	r2, #4294967295
   d9396:	4b4c      	ldr	r3, [pc, #304]	; (d94c8 <_ZN5Print10printFloatEdh+0x15c>)
   d9398:	4630      	mov	r0, r6
   d939a:	4649      	mov	r1, r9
   d939c:	f002 f942 	bl	db624 <__aeabi_dcmpun>
   d93a0:	b968      	cbnz	r0, d93be <_ZN5Print10printFloatEdh+0x52>
   d93a2:	f04f 32ff 	mov.w	r2, #4294967295
   d93a6:	4b48      	ldr	r3, [pc, #288]	; (d94c8 <_ZN5Print10printFloatEdh+0x15c>)
   d93a8:	4630      	mov	r0, r6
   d93aa:	4649      	mov	r1, r9
   d93ac:	f002 f91c 	bl	db5e8 <__aeabi_dcmple>
   d93b0:	b928      	cbnz	r0, d93be <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d93b2:	4946      	ldr	r1, [pc, #280]	; (d94cc <_ZN5Print10printFloatEdh+0x160>)
   d93b4:	4650      	mov	r0, sl
   d93b6:	f7fe f979 	bl	d76ac <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d93ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d93be:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d93c2:	4b43      	ldr	r3, [pc, #268]	; (d94d0 <_ZN5Print10printFloatEdh+0x164>)
   d93c4:	4630      	mov	r0, r6
   d93c6:	4639      	mov	r1, r7
   d93c8:	f002 f922 	bl	db610 <__aeabi_dcmpgt>
   d93cc:	b108      	cbz	r0, d93d2 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d93ce:	4941      	ldr	r1, [pc, #260]	; (d94d4 <_ZN5Print10printFloatEdh+0x168>)
   d93d0:	e7f0      	b.n	d93b4 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d93d2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d93d6:	4b40      	ldr	r3, [pc, #256]	; (d94d8 <_ZN5Print10printFloatEdh+0x16c>)
   d93d8:	4630      	mov	r0, r6
   d93da:	4639      	mov	r1, r7
   d93dc:	f002 f8fa 	bl	db5d4 <__aeabi_dcmplt>
   d93e0:	2800      	cmp	r0, #0
   d93e2:	d1f4      	bne.n	d93ce <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d93e4:	2200      	movs	r2, #0
   d93e6:	2300      	movs	r3, #0
   d93e8:	4630      	mov	r0, r6
   d93ea:	4639      	mov	r1, r7
   d93ec:	f002 f8f2 	bl	db5d4 <__aeabi_dcmplt>
   d93f0:	b140      	cbz	r0, d9404 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d93f2:	212d      	movs	r1, #45	; 0x2d
   d93f4:	4650      	mov	r0, sl
   d93f6:	f7ff ff7f 	bl	d92f8 <_ZN5Print5printEc>
     number = -number;
   d93fa:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d93fe:	4604      	mov	r4, r0
     number = -number;
   d9400:	461f      	mov	r7, r3
   d9402:	e000      	b.n	d9406 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d9404:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d9406:	4935      	ldr	r1, [pc, #212]	; (d94dc <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d9408:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d940c:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d940e:	fa5f f388 	uxtb.w	r3, r8
   d9412:	429d      	cmp	r5, r3
   d9414:	d906      	bls.n	d9424 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d9416:	2200      	movs	r2, #0
   d9418:	4b31      	ldr	r3, [pc, #196]	; (d94e0 <_ZN5Print10printFloatEdh+0x174>)
   d941a:	f001 ff93 	bl	db344 <__aeabi_ddiv>
   d941e:	f108 0801 	add.w	r8, r8, #1
   d9422:	e7f4      	b.n	d940e <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d9424:	4632      	mov	r2, r6
   d9426:	463b      	mov	r3, r7
   d9428:	f001 fcb0 	bl	dad8c <__adddf3>
   d942c:	460f      	mov	r7, r1
   d942e:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d9430:	f002 f936 	bl	db6a0 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d9434:	220a      	movs	r2, #10
   d9436:	4601      	mov	r1, r0
   d9438:	4680      	mov	r8, r0
   d943a:	4650      	mov	r0, sl
   d943c:	f7ff ff75 	bl	d932a <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d9440:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d9442:	b3e5      	cbz	r5, d94be <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d9444:	4640      	mov	r0, r8
   d9446:	f001 fddd 	bl	db004 <__aeabi_ui2d>
   d944a:	4602      	mov	r2, r0
   d944c:	460b      	mov	r3, r1
   d944e:	4630      	mov	r0, r6
   d9450:	4639      	mov	r1, r7
   d9452:	f001 fc99 	bl	dad88 <__aeabi_dsub>
   d9456:	4606      	mov	r6, r0
   d9458:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d945a:	4650      	mov	r0, sl
   d945c:	4921      	ldr	r1, [pc, #132]	; (d94e4 <_ZN5Print10printFloatEdh+0x178>)
   d945e:	f7fe f925 	bl	d76ac <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d9462:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d9464:	2200      	movs	r2, #0
   d9466:	4b1e      	ldr	r3, [pc, #120]	; (d94e0 <_ZN5Print10printFloatEdh+0x174>)
   d9468:	4630      	mov	r0, r6
   d946a:	4639      	mov	r1, r7
   d946c:	f001 fe40 	bl	db0f0 <__aeabi_dmul>
   d9470:	4606      	mov	r6, r0
   d9472:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d9474:	f002 f8ec 	bl	db650 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d9478:	f1b0 0900 	subs.w	r9, r0, #0
   d947c:	da07      	bge.n	d948e <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d947e:	212d      	movs	r1, #45	; 0x2d
   d9480:	4650      	mov	r0, sl
   d9482:	f7ff ff39 	bl	d92f8 <_ZN5Print5printEc>
            val = -n;
   d9486:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d948a:	4680      	mov	r8, r0
   d948c:	e002      	b.n	d9494 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d948e:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d9490:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d9494:	220a      	movs	r2, #10
   d9496:	4650      	mov	r0, sl
   d9498:	f7ff ff47 	bl	d932a <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d949c:	4440      	add	r0, r8
   d949e:	4404      	add	r4, r0
    remainder -= toPrint;
   d94a0:	4648      	mov	r0, r9
   d94a2:	f001 fdbf 	bl	db024 <__aeabi_i2d>
   d94a6:	4602      	mov	r2, r0
   d94a8:	460b      	mov	r3, r1
   d94aa:	4630      	mov	r0, r6
   d94ac:	4639      	mov	r1, r7
   d94ae:	f001 fc6b 	bl	dad88 <__aeabi_dsub>
   d94b2:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d94b4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d94b8:	4606      	mov	r6, r0
   d94ba:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d94bc:	d1d2      	bne.n	d9464 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d94be:	4620      	mov	r0, r4
   d94c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d94c4:	000dd110 	.word	0x000dd110
   d94c8:	7fefffff 	.word	0x7fefffff
   d94cc:	000dd11a 	.word	0x000dd11a
   d94d0:	41efffff 	.word	0x41efffff
   d94d4:	000dd114 	.word	0x000dd114
   d94d8:	c1efffff 	.word	0xc1efffff
   d94dc:	3fe00000 	.word	0x3fe00000
   d94e0:	40240000 	.word	0x40240000
   d94e4:	000dd118 	.word	0x000dd118

000d94e8 <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
   d94e8:	b538      	push	{r3, r4, r5, lr}
   d94ea:	4604      	mov	r4, r0
  return printFloat((double)n, digits);
   d94ec:	ee10 0a10 	vmov	r0, s0
   d94f0:	b2cd      	uxtb	r5, r1
   d94f2:	f001 fda9 	bl	db048 <__aeabi_f2d>
   d94f6:	ec41 0b10 	vmov	d0, r0, r1
   d94fa:	4629      	mov	r1, r5
   d94fc:	4620      	mov	r0, r4
}
   d94fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return write(c);
}

size_t Print::print(float n, int digits)
{
  return printFloat((double)n, digits);
   d9502:	f7ff bf33 	b.w	d936c <_ZN5Print10printFloatEdh>

000d9506 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d9506:	b40c      	push	{r2, r3}
   d9508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d950c:	b087      	sub	sp, #28
   d950e:	af00      	add	r7, sp, #0
   d9510:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d9514:	4605      	mov	r5, r0
   d9516:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d951a:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d951c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d951e:	4623      	mov	r3, r4
   d9520:	464a      	mov	r2, r9
   d9522:	2114      	movs	r1, #20
   d9524:	1d38      	adds	r0, r7, #4
   d9526:	f7ff fc31 	bl	d8d8c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d952a:	2813      	cmp	r0, #19
   d952c:	d805      	bhi.n	d953a <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d952e:	1d39      	adds	r1, r7, #4
   d9530:	4628      	mov	r0, r5
   d9532:	f7fe f8bb 	bl	d76ac <_ZN5Print5writeEPKc>
   d9536:	4604      	mov	r4, r0
   d9538:	e013      	b.n	d9562 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d953a:	f100 0308 	add.w	r3, r0, #8
   d953e:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d9542:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d9544:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d9548:	1c41      	adds	r1, r0, #1
   d954a:	4623      	mov	r3, r4
   d954c:	464a      	mov	r2, r9
   d954e:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d9550:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d9552:	f7ff fc1b 	bl	d8d8c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d9556:	4669      	mov	r1, sp
   d9558:	4628      	mov	r0, r5
   d955a:	f7fe f8a7 	bl	d76ac <_ZN5Print5writeEPKc>
   d955e:	4604      	mov	r4, r0
   d9560:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d9562:	b11e      	cbz	r6, d956c <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d9564:	4628      	mov	r0, r5
   d9566:	f7ff feca 	bl	d92fe <_ZN5Print7printlnEv>
   d956a:	4404      	add	r4, r0
    return n;
}
   d956c:	4620      	mov	r0, r4
   d956e:	371c      	adds	r7, #28
   d9570:	46bd      	mov	sp, r7
   d9572:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9576:	b002      	add	sp, #8
   d9578:	4770      	bx	lr
	...

000d957c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d957c:	4b01      	ldr	r3, [pc, #4]	; (d9584 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d957e:	4a02      	ldr	r2, [pc, #8]	; (d9588 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d9580:	601a      	str	r2, [r3, #0]
   d9582:	4770      	bx	lr
   d9584:	2003dfc4 	.word	0x2003dfc4
   d9588:	000dd191 	.word	0x000dd191

000d958c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d958c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d958e:	2000      	movs	r0, #0
   d9590:	f7ff fbac 	bl	d8cec <spark_sync_time_pending>
   d9594:	b128      	cbz	r0, d95a2 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d9596:	f7ff fb91 	bl	d8cbc <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d959a:	f080 0001 	eor.w	r0, r0, #1
   d959e:	b2c0      	uxtb	r0, r0
   d95a0:	bd08      	pop	{r3, pc}
   d95a2:	2001      	movs	r0, #1
    }
   d95a4:	bd08      	pop	{r3, pc}
	...

000d95a8 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d95a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d95aa:	4b0e      	ldr	r3, [pc, #56]	; (d95e4 <_ZN9TimeClass7timeStrEl+0x3c>)
   d95ac:	681b      	ldr	r3, [r3, #0]
   d95ae:	4419      	add	r1, r3
   d95b0:	4b0d      	ldr	r3, [pc, #52]	; (d95e8 <_ZN9TimeClass7timeStrEl+0x40>)
   d95b2:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d95b4:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d95b6:	a802      	add	r0, sp, #8
   d95b8:	4419      	add	r1, r3
   d95ba:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d95be:	f002 f929 	bl	db814 <localtime>
        char* ascstr = asctime(calendar_time);
   d95c2:	f002 f8dd 	bl	db780 <asctime>
   d95c6:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d95c8:	f002 ff9a 	bl	dc500 <strlen>
        ascstr[len-1] = 0; // remove final newline
   d95cc:	4428      	add	r0, r5
   d95ce:	2300      	movs	r3, #0
   d95d0:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d95d4:	4629      	mov	r1, r5
   d95d6:	4620      	mov	r0, r4
   d95d8:	f7ff fddd 	bl	d9196 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d95dc:	4620      	mov	r0, r4
   d95de:	b003      	add	sp, #12
   d95e0:	bd30      	pop	{r4, r5, pc}
   d95e2:	bf00      	nop
   d95e4:	2003dfd0 	.word	0x2003dfd0
   d95e8:	2003dfcc 	.word	0x2003dfcc

000d95ec <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d95ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d95f0:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d95f2:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d95f4:	4607      	mov	r7, r0
   d95f6:	4689      	mov	r9, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d95f8:	4620      	mov	r0, r4
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d95fa:	4611      	mov	r1, r2
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d95fc:	223f      	movs	r2, #63	; 0x3f
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d95fe:	461d      	mov	r5, r3
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9600:	f002 ff9b 	bl	dc53a <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d9604:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d9606:	4620      	mov	r0, r4
String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d9608:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d960c:	f002 ff78 	bl	dc500 <strlen>
   d9610:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d9612:	b925      	cbnz	r5, d961e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        strcpy(time_zone_str, "Z");
   d9614:	4924      	ldr	r1, [pc, #144]	; (d96a8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xbc>)
   d9616:	a803      	add	r0, sp, #12
   d9618:	f002 fa56 	bl	dbac8 <strcpy>
   d961c:	e013      	b.n	d9646 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5a>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d961e:	213c      	movs	r1, #60	; 0x3c
   d9620:	fb95 f2f1 	sdiv	r2, r5, r1
   d9624:	2a00      	cmp	r2, #0
   d9626:	bfb8      	it	lt
   d9628:	4252      	neglt	r2, r2
   d962a:	fb92 f3f1 	sdiv	r3, r2, r1
   d962e:	fb01 2213 	mls	r2, r1, r3, r2
   d9632:	9200      	str	r2, [sp, #0]
   d9634:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d9638:	4a1c      	ldr	r2, [pc, #112]	; (d96ac <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xc0>)
   d963a:	fb95 f3f3 	sdiv	r3, r5, r3
   d963e:	2110      	movs	r1, #16
   d9640:	a803      	add	r0, sp, #12
   d9642:	f7ff fb93 	bl	d8d6c <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d9646:	4625      	mov	r5, r4
   d9648:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d964a:	f108 3aff 	add.w	sl, r8, #4294967295
   d964e:	45b2      	cmp	sl, r6
   d9650:	d91b      	bls.n	d968a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9e>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d9652:	782b      	ldrb	r3, [r5, #0]
   d9654:	2b25      	cmp	r3, #37	; 0x25
   d9656:	d116      	bne.n	d9686 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
   d9658:	786b      	ldrb	r3, [r5, #1]
   d965a:	2b7a      	cmp	r3, #122	; 0x7a
   d965c:	d113      	bne.n	d9686 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
        {
            size_t tzlen = strlen(time_zone_str);
   d965e:	a803      	add	r0, sp, #12
   d9660:	f002 ff4e 	bl	dc500 <strlen>
   d9664:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d9666:	4430      	add	r0, r6
   d9668:	ebc6 020a 	rsb	r2, r6, sl
   d966c:	1ca9      	adds	r1, r5, #2
   d966e:	4420      	add	r0, r4
   d9670:	f002 f9d7 	bl	dba22 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d9674:	4642      	mov	r2, r8
   d9676:	a903      	add	r1, sp, #12
   d9678:	4628      	mov	r0, r5
   d967a:	f002 f9d2 	bl	dba22 <memcpy>
            len = strlen(format_str);
   d967e:	4620      	mov	r0, r4
   d9680:	f002 ff3e 	bl	dc500 <strlen>
   d9684:	4680      	mov	r8, r0
   d9686:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d9688:	e7de      	b.n	d9648 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5c>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
   d968a:	464b      	mov	r3, r9
   d968c:	4622      	mov	r2, r4
   d968e:	2132      	movs	r1, #50	; 0x32
   d9690:	a807      	add	r0, sp, #28
   d9692:	f002 fa81 	bl	dbb98 <strftime>
    return String(buf);
   d9696:	a907      	add	r1, sp, #28
   d9698:	4638      	mov	r0, r7
   d969a:	f7ff fd7c 	bl	d9196 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d969e:	4638      	mov	r0, r7
   d96a0:	b024      	add	sp, #144	; 0x90
   d96a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d96a6:	bf00      	nop
   d96a8:	000dd8b9 	.word	0x000dd8b9
   d96ac:	000dd1fa 	.word	0x000dd1fa

000d96b0 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
   d96b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d96b2:	4605      	mov	r5, r0
   d96b4:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
   d96b6:	461c      	mov	r4, r3
   d96b8:	b913      	cbnz	r3, d96c0 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
   d96ba:	4b12      	ldr	r3, [pc, #72]	; (d9704 <_ZN9TimeClass6formatElPKc+0x54>)
   d96bc:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
   d96be:	b12c      	cbz	r4, d96cc <_ZN9TimeClass6formatElPKc+0x1c>
   d96c0:	4b11      	ldr	r3, [pc, #68]	; (d9708 <_ZN9TimeClass6formatElPKc+0x58>)
   d96c2:	4620      	mov	r0, r4
   d96c4:	6819      	ldr	r1, [r3, #0]
   d96c6:	f002 f9f5 	bl	dbab4 <strcmp>
   d96ca:	b920      	cbnz	r0, d96d6 <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
   d96cc:	9901      	ldr	r1, [sp, #4]
   d96ce:	4628      	mov	r0, r5
   d96d0:	f7ff ff6a 	bl	d95a8 <_ZN9TimeClass7timeStrEl>
   d96d4:	e013      	b.n	d96fe <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
   d96d6:	4f0d      	ldr	r7, [pc, #52]	; (d970c <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
   d96d8:	9a01      	ldr	r2, [sp, #4]
   d96da:	683b      	ldr	r3, [r7, #0]
   d96dc:	4e0c      	ldr	r6, [pc, #48]	; (d9710 <_ZN9TimeClass6formatElPKc+0x60>)
   d96de:	441a      	add	r2, r3
   d96e0:	6833      	ldr	r3, [r6, #0]
   d96e2:	a802      	add	r0, sp, #8
   d96e4:	4413      	add	r3, r2
   d96e6:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
   d96ea:	f002 f893 	bl	db814 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d96ee:	683a      	ldr	r2, [r7, #0]
   d96f0:	6833      	ldr	r3, [r6, #0]
   d96f2:	4601      	mov	r1, r0
   d96f4:	4413      	add	r3, r2
   d96f6:	4628      	mov	r0, r5
   d96f8:	4622      	mov	r2, r4
   d96fa:	f7ff ff77 	bl	d95ec <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
   d96fe:	4628      	mov	r0, r5
   d9700:	b003      	add	sp, #12
   d9702:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9704:	2003dfc8 	.word	0x2003dfc8
   d9708:	2003d828 	.word	0x2003d828
   d970c:	2003dfd0 	.word	0x2003dfd0
   d9710:	2003dfcc 	.word	0x2003dfcc

000d9714 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d9714:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d9716:	2000      	movs	r0, #0
   d9718:	f7ff f8ac 	bl	d8874 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d971c:	4604      	mov	r4, r0
   d971e:	b968      	cbnz	r0, d973c <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d9720:	f7ff fa38 	bl	d8b94 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d9724:	2801      	cmp	r0, #1
   d9726:	d10b      	bne.n	d9740 <_ZN9TimeClass7isValidEv+0x2c>
   d9728:	4620      	mov	r0, r4
   d972a:	f7ff fa53 	bl	d8bd4 <system_thread_get_state>
   d972e:	b938      	cbnz	r0, d9740 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d9730:	f7ff ff2c 	bl	d958c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d9734:	b930      	cbnz	r0, d9744 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d9736:	f7ff fab9 	bl	d8cac <spark_process>
   d973a:	e7f9      	b.n	d9730 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d973c:	2001      	movs	r0, #1
   d973e:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d9740:	2000      	movs	r0, #0
   d9742:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d9744:	f7ff ff22 	bl	d958c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d9748:	2000      	movs	r0, #0
   d974a:	f7ff f893 	bl	d8874 <HAL_RTC_Time_Is_Valid>
   d974e:	3000      	adds	r0, #0
   d9750:	bf18      	it	ne
   d9752:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d9754:	bd10      	pop	{r4, pc}

000d9756 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d9756:	b508      	push	{r3, lr}
    (void)isValid();
   d9758:	f7ff ffdc 	bl	d9714 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d975c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d9760:	f7ff b868 	b.w	d8834 <HAL_RTC_Get_UnixTime>

000d9764 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d9764:	4b02      	ldr	r3, [pc, #8]	; (d9770 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d9766:	681a      	ldr	r2, [r3, #0]
   d9768:	4b02      	ldr	r3, [pc, #8]	; (d9774 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d976a:	601a      	str	r2, [r3, #0]
   d976c:	4770      	bx	lr
   d976e:	bf00      	nop
   d9770:	2003d828 	.word	0x2003d828
   d9774:	2003dfc8 	.word	0x2003dfc8

000d9778 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d9778:	2100      	movs	r1, #0
   d977a:	f7ff ba1b 	b.w	d8bb4 <system_delay_ms>

000d977e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d977e:	b510      	push	{r4, lr}
   d9780:	4604      	mov	r4, r0
   d9782:	f7fb fdc7 	bl	d5314 <_ZNSt14_Function_baseD1Ev>
   d9786:	4620      	mov	r0, r4
   d9788:	bd10      	pop	{r4, pc}
	...

000d978c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d978c:	4803      	ldr	r0, [pc, #12]	; (d979c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d978e:	4a04      	ldr	r2, [pc, #16]	; (d97a0 <_GLOBAL__sub_I_RGB+0x14>)
   d9790:	4904      	ldr	r1, [pc, #16]	; (d97a4 <_GLOBAL__sub_I_RGB+0x18>)
   d9792:	2300      	movs	r3, #0
   d9794:	6083      	str	r3, [r0, #8]
   d9796:	f001 b989 	b.w	daaac <__aeabi_atexit>
   d979a:	bf00      	nop
   d979c:	2003dfd8 	.word	0x2003dfd8
   d97a0:	2003d8e0 	.word	0x2003d8e0
   d97a4:	000d977f 	.word	0x000d977f

000d97a8 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d97a8:	7d00      	ldrb	r0, [r0, #20]
   d97aa:	4770      	bx	lr

000d97ac <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d97ac:	7d03      	ldrb	r3, [r0, #20]
   d97ae:	b11b      	cbz	r3, d97b8 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d97b0:	6983      	ldr	r3, [r0, #24]
   d97b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d97b6:	d102      	bne.n	d97be <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d97b8:	ed9f 0a05 	vldr	s0, [pc, #20]	; d97d0 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d97bc:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d97be:	ee07 3a90 	vmov	s15, r3
   d97c2:	ed9f 7a04 	vldr	s14, [pc, #16]	; d97d4 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d97c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d97ca:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d97ce:	4770      	bx	lr
   d97d0:	00000000 	.word	0x00000000
   d97d4:	42c80000 	.word	0x42c80000

000d97d8 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d97d8:	7d03      	ldrb	r3, [r0, #20]
   d97da:	b11b      	cbz	r3, d97e4 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d97dc:	6a03      	ldr	r3, [r0, #32]
   d97de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d97e2:	d102      	bne.n	d97ea <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d97e4:	ed9f 0a05 	vldr	s0, [pc, #20]	; d97fc <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d97e8:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d97ea:	ee07 3a90 	vmov	s15, r3
   d97ee:	ed9f 7a04 	vldr	s14, [pc, #16]	; d9800 <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d97f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d97f6:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d97fa:	4770      	bx	lr
   d97fc:	00000000 	.word	0x00000000
   d9800:	42c80000 	.word	0x42c80000

000d9804 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d9804:	7d03      	ldrb	r3, [r0, #20]
   d9806:	b17b      	cbz	r3, d9828 <_ZNK14CellularSignal10getQualityEv+0x24>
   d9808:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d980a:	2b00      	cmp	r3, #0
   d980c:	db0c      	blt.n	d9828 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d980e:	ee07 3a90 	vmov	s15, r3
   d9812:	eddf 6a07 	vldr	s13, [pc, #28]	; d9830 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d9816:	ed9f 0a07 	vldr	s0, [pc, #28]	; d9834 <_ZNK14CellularSignal10getQualityEv+0x30>
   d981a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d981e:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d9822:	ee27 0a80 	vmul.f32	s0, s15, s0
   d9826:	4770      	bx	lr
    }

    return -1.0f;
   d9828:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d982c:	4770      	bx	lr
   d982e:	bf00      	nop
   d9830:	477fff00 	.word	0x477fff00
   d9834:	42c80000 	.word	0x42c80000

000d9838 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d9838:	7d03      	ldrb	r3, [r0, #20]
   d983a:	b17b      	cbz	r3, d985c <_ZNK14CellularSignal11getStrengthEv+0x24>
   d983c:	69c3      	ldr	r3, [r0, #28]
   d983e:	2b00      	cmp	r3, #0
   d9840:	db0c      	blt.n	d985c <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d9842:	ee07 3a90 	vmov	s15, r3
   d9846:	eddf 6a07 	vldr	s13, [pc, #28]	; d9864 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d984a:	ed9f 0a07 	vldr	s0, [pc, #28]	; d9868 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d984e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d9852:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d9856:	ee27 0a80 	vmul.f32	s0, s15, s0
   d985a:	4770      	bx	lr
    }

    return -1.0f;
   d985c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d9860:	4770      	bx	lr
   d9862:	bf00      	nop
   d9864:	477fff00 	.word	0x477fff00
   d9868:	42c80000 	.word	0x42c80000

000d986c <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d986c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9870:	4607      	mov	r7, r0
   d9872:	460c      	mov	r4, r1
{
    if (base == 0) {
   d9874:	4615      	mov	r5, r2
   d9876:	b92a      	cbnz	r2, d9884 <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d9878:	6803      	ldr	r3, [r0, #0]
   d987a:	b2c9      	uxtb	r1, r1
   d987c:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d987e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d9882:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d9884:	2900      	cmp	r1, #0
   d9886:	da07      	bge.n	d9898 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d9888:	2a0a      	cmp	r2, #10
   d988a:	d105      	bne.n	d9898 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d988c:	212d      	movs	r1, #45	; 0x2d
   d988e:	f7ff fd33 	bl	d92f8 <_ZN5Print5printEc>
            val = -n;
   d9892:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d9894:	4606      	mov	r6, r0
            val = -n;
   d9896:	e001      	b.n	d989c <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d9898:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d989a:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d989c:	b2ea      	uxtb	r2, r5
   d989e:	4638      	mov	r0, r7
   d98a0:	f7ff fd43 	bl	d932a <_ZN5Print11printNumberEmh>
    }
}
   d98a4:	4430      	add	r0, r6
   d98a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d98aa <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
   d98aa:	b570      	push	{r4, r5, r6, lr}
   d98ac:	460d      	mov	r5, r1
   d98ae:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d98b0:	220a      	movs	r2, #10
   d98b2:	6881      	ldr	r1, [r0, #8]
   d98b4:	4628      	mov	r0, r5
   d98b6:	f7ff ffd9 	bl	d986c <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
   d98ba:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d98bc:	4604      	mov	r4, r0
    n += p.print(',');
   d98be:	4628      	mov	r0, r5
   d98c0:	f7ff fd1a 	bl	d92f8 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d98c4:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d98c6:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d98c8:	68f1      	ldr	r1, [r6, #12]
   d98ca:	4628      	mov	r0, r5
   d98cc:	f7ff ffce 	bl	d986c <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
   d98d0:	4420      	add	r0, r4
   d98d2:	bd70      	pop	{r4, r5, r6, pc}

000d98d4 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d98d4:	f1a0 0004 	sub.w	r0, r0, #4
   d98d8:	f7ff bfe7 	b.w	d98aa <_ZNK14CellularSignal7printToER5Print>

000d98dc <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d98dc:	6800      	ldr	r0, [r0, #0]
   d98de:	f000 bba2 	b.w	da026 <_ZN7TwoWire4lockEv>

000d98e2 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d98e2:	b510      	push	{r4, lr}
   d98e4:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d98e6:	6001      	str	r1, [r0, #0]
   d98e8:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d98ea:	b10a      	cbz	r2, d98f0 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d98ec:	f7ff fff6 	bl	d98dc <_ZN9FuelGauge4lockEv>
    }
}
   d98f0:	4620      	mov	r0, r4
   d98f2:	bd10      	pop	{r4, pc}

000d98f4 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d98f4:	b538      	push	{r3, r4, r5, lr}
   d98f6:	4604      	mov	r4, r0
   d98f8:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d98fa:	f001 f8b1 	bl	daa60 <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d98fe:	462a      	mov	r2, r5
   d9900:	4601      	mov	r1, r0
   d9902:	4620      	mov	r0, r4
   d9904:	f7ff ffed 	bl	d98e2 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d9908:	4620      	mov	r0, r4
   d990a:	bd38      	pop	{r3, r4, r5, pc}

000d990c <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d990c:	6800      	ldr	r0, [r0, #0]
   d990e:	f000 bb93 	b.w	da038 <_ZN7TwoWire6unlockEv>

000d9912 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d9912:	b510      	push	{r4, lr}
{
    if (lock_) {
   d9914:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d9916:	4604      	mov	r4, r0
{
    if (lock_) {
   d9918:	b10b      	cbz	r3, d991e <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d991a:	f7ff fff7 	bl	d990c <_ZN9FuelGauge6unlockEv>
    }
}
   d991e:	4620      	mov	r0, r4
   d9920:	bd10      	pop	{r4, pc}

000d9922 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d9922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9924:	4604      	mov	r4, r0
   d9926:	4616      	mov	r6, r2
   d9928:	461d      	mov	r5, r3
   d992a:	460f      	mov	r7, r1
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d992c:	f7ff ffd6 	bl	d98dc <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   d9930:	6820      	ldr	r0, [r4, #0]
   d9932:	2136      	movs	r1, #54	; 0x36
   d9934:	f000 fb6c 	bl	da010 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
   d9938:	6820      	ldr	r0, [r4, #0]
   d993a:	6803      	ldr	r3, [r0, #0]
   d993c:	4639      	mov	r1, r7
   d993e:	689b      	ldr	r3, [r3, #8]
   d9940:	4798      	blx	r3
    i2c_.endTransmission(true);
   d9942:	2101      	movs	r1, #1
   d9944:	6820      	ldr	r0, [r4, #0]
   d9946:	f000 fb66 	bl	da016 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
   d994a:	2202      	movs	r2, #2
   d994c:	2136      	movs	r1, #54	; 0x36
   d994e:	2301      	movs	r3, #1
   d9950:	6820      	ldr	r0, [r4, #0]
   d9952:	f000 fb47 	bl	d9fe4 <_ZN7TwoWire11requestFromEhjh>
    MSB = i2c_.read();
   d9956:	6820      	ldr	r0, [r4, #0]
   d9958:	6803      	ldr	r3, [r0, #0]
   d995a:	695b      	ldr	r3, [r3, #20]
   d995c:	4798      	blx	r3
   d995e:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
   d9960:	6820      	ldr	r0, [r4, #0]
   d9962:	6803      	ldr	r3, [r0, #0]
   d9964:	695b      	ldr	r3, [r3, #20]
   d9966:	4798      	blx	r3
   d9968:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d996a:	4620      	mov	r0, r4
}
   d996c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d9970:	f7ff bfcc 	b.w	d990c <_ZN9FuelGauge6unlockEv>

000d9974 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
   d9974:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d9976:	ab02      	add	r3, sp, #8
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d9978:	2200      	movs	r2, #0
	byte LSB = 0;
   d997a:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d997e:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
   d9982:	2104      	movs	r1, #4
   d9984:	f10d 0206 	add.w	r2, sp, #6
   d9988:	f7ff ffcb 	bl	d9922 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d998c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d9990:	f001 fb48 	bl	db024 <__aeabi_i2d>
   d9994:	2200      	movs	r2, #0
   d9996:	4b09      	ldr	r3, [pc, #36]	; (d99bc <_ZN9FuelGauge6getSoCEv+0x48>)
   d9998:	f001 fbaa 	bl	db0f0 <__aeabi_dmul>
   d999c:	f001 fea0 	bl	db6e0 <__aeabi_d2f>
   d99a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d99a4:	ee00 3a10 	vmov	s0, r3
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d99a8:	ee07 0a90 	vmov	s15, r0
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d99ac:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d99b0:	ee37 0a80 	vadd.f32	s0, s15, s0
   d99b4:	b003      	add	sp, #12
   d99b6:	f85d fb04 	ldr.w	pc, [sp], #4
   d99ba:	bf00      	nop
   d99bc:	3f700000 	.word	0x3f700000

000d99c0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d99c0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d99c2:	4b0c      	ldr	r3, [pc, #48]	; (d99f4 <serialEventRun+0x34>)
   d99c4:	b133      	cbz	r3, d99d4 <serialEventRun+0x14>
   d99c6:	f000 f977 	bl	d9cb8 <_Z16_fetch_usbserialv>
   d99ca:	6803      	ldr	r3, [r0, #0]
   d99cc:	691b      	ldr	r3, [r3, #16]
   d99ce:	4798      	blx	r3
   d99d0:	2800      	cmp	r0, #0
   d99d2:	dc09      	bgt.n	d99e8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d99d4:	4b08      	ldr	r3, [pc, #32]	; (d99f8 <serialEventRun+0x38>)
   d99d6:	b163      	cbz	r3, d99f2 <serialEventRun+0x32>
   d99d8:	f000 fa84 	bl	d9ee4 <_Z22__fetch_global_Serial1v>
   d99dc:	6803      	ldr	r3, [r0, #0]
   d99de:	691b      	ldr	r3, [r3, #16]
   d99e0:	4798      	blx	r3
   d99e2:	2800      	cmp	r0, #0
   d99e4:	dc03      	bgt.n	d99ee <serialEventRun+0x2e>
   d99e6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d99e8:	f3af 8000 	nop.w
   d99ec:	e7f2      	b.n	d99d4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d99ee:	f3af 8000 	nop.w
   d99f2:	bd08      	pop	{r3, pc}
	...

000d99fc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d99fc:	b508      	push	{r3, lr}
	serialEventRun();
   d99fe:	f7ff ffdf 	bl	d99c0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d9a02:	f7fe ff0f 	bl	d8824 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d9a06:	4b01      	ldr	r3, [pc, #4]	; (d9a0c <_post_loop+0x10>)
   d9a08:	6018      	str	r0, [r3, #0]
   d9a0a:	bd08      	pop	{r3, pc}
   d9a0c:	2003e3c4 	.word	0x2003e3c4

000d9a10 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d9a10:	4802      	ldr	r0, [pc, #8]	; (d9a1c <_Z33system_initialize_user_backup_ramv+0xc>)
   d9a12:	4a03      	ldr	r2, [pc, #12]	; (d9a20 <_Z33system_initialize_user_backup_ramv+0x10>)
   d9a14:	4903      	ldr	r1, [pc, #12]	; (d9a24 <_Z33system_initialize_user_backup_ramv+0x14>)
   d9a16:	1a12      	subs	r2, r2, r0
   d9a18:	f002 b803 	b.w	dba22 <memcpy>
   d9a1c:	2003f400 	.word	0x2003f400
   d9a20:	2003f404 	.word	0x2003f404
   d9a24:	000dd9a0 	.word	0x000dd9a0

000d9a28 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d9a28:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9a2a:	2300      	movs	r3, #0
   d9a2c:	9300      	str	r3, [sp, #0]
   d9a2e:	461a      	mov	r2, r3
   d9a30:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9a34:	f7ff f8e0 	bl	d8bf8 <system_ctrl_set_result>
}
   d9a38:	b003      	add	sp, #12
   d9a3a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9a40 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d9a40:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d9a42:	8843      	ldrh	r3, [r0, #2]
   d9a44:	2b0a      	cmp	r3, #10
   d9a46:	d008      	beq.n	d9a5a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d9a48:	2b50      	cmp	r3, #80	; 0x50
   d9a4a:	d109      	bne.n	d9a60 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d9a4c:	4b09      	ldr	r3, [pc, #36]	; (d9a74 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d9a4e:	681b      	ldr	r3, [r3, #0]
   d9a50:	b13b      	cbz	r3, d9a62 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d9a52:	b003      	add	sp, #12
   d9a54:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d9a58:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d9a5a:	f7ff ffe5 	bl	d9a28 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d9a5e:	e006      	b.n	d9a6e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9a60:	2300      	movs	r3, #0
   d9a62:	9300      	str	r3, [sp, #0]
   d9a64:	461a      	mov	r2, r3
   d9a66:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9a6a:	f7ff f8c5 	bl	d8bf8 <system_ctrl_set_result>
        break;
    }
}
   d9a6e:	b003      	add	sp, #12
   d9a70:	f85d fb04 	ldr.w	pc, [sp], #4
   d9a74:	2003dfe8 	.word	0x2003dfe8

000d9a78 <module_user_init_hook>:

void module_user_init_hook()
{
   d9a78:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d9a7a:	4c10      	ldr	r4, [pc, #64]	; (d9abc <module_user_init_hook+0x44>)
   d9a7c:	4d10      	ldr	r5, [pc, #64]	; (d9ac0 <module_user_init_hook+0x48>)
   d9a7e:	6823      	ldr	r3, [r4, #0]
   d9a80:	42ab      	cmp	r3, r5
   d9a82:	4b10      	ldr	r3, [pc, #64]	; (d9ac4 <module_user_init_hook+0x4c>)
   d9a84:	bf0c      	ite	eq
   d9a86:	2201      	moveq	r2, #1
   d9a88:	2200      	movne	r2, #0
   d9a8a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d9a8c:	d002      	beq.n	d9a94 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d9a8e:	f7ff ffbf 	bl	d9a10 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d9a92:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d9a94:	f7fe feb6 	bl	d8804 <HAL_RNG_GetRandomNumber>
   d9a98:	4604      	mov	r4, r0
    srand(seed);
   d9a9a:	f001 ffd5 	bl	dba48 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d9a9e:	4b0a      	ldr	r3, [pc, #40]	; (d9ac8 <module_user_init_hook+0x50>)
   d9aa0:	b113      	cbz	r3, d9aa8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d9aa2:	4620      	mov	r0, r4
   d9aa4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d9aa8:	2100      	movs	r1, #0
   d9aaa:	4807      	ldr	r0, [pc, #28]	; (d9ac8 <module_user_init_hook+0x50>)
   d9aac:	f7ff f926 	bl	d8cfc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d9ab0:	2100      	movs	r1, #0
   d9ab2:	4806      	ldr	r0, [pc, #24]	; (d9acc <module_user_init_hook+0x54>)
}
   d9ab4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d9ab8:	f7ff b894 	b.w	d8be4 <system_ctrl_set_app_request_handler>
   d9abc:	2003f400 	.word	0x2003f400
   d9ac0:	9a271c1e 	.word	0x9a271c1e
   d9ac4:	2003dfec 	.word	0x2003dfec
   d9ac8:	00000000 	.word	0x00000000
   d9acc:	000d9a41 	.word	0x000d9a41

000d9ad0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d9ad0:	4770      	bx	lr

000d9ad2 <_ZN9IPAddressD0Ev>:
   d9ad2:	b510      	push	{r4, lr}
   d9ad4:	2118      	movs	r1, #24
   d9ad6:	4604      	mov	r4, r0
   d9ad8:	f000 fff6 	bl	daac8 <_ZdlPvj>
   d9adc:	4620      	mov	r0, r4
   d9ade:	bd10      	pop	{r4, pc}

000d9ae0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d9ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d9ae2:	7d03      	ldrb	r3, [r0, #20]
   d9ae4:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d9ae6:	b08d      	sub	sp, #52	; 0x34
   d9ae8:	460e      	mov	r6, r1
   d9aea:	f100 0704 	add.w	r7, r0, #4
   d9aee:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d9af2:	d002      	beq.n	d9afa <_ZNK9IPAddress7printToER5Print+0x1a>
   d9af4:	f100 0508 	add.w	r5, r0, #8
   d9af8:	e018      	b.n	d9b2c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d9afa:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9afc:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d9afe:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9b02:	232f      	movs	r3, #47	; 0x2f
   d9b04:	462a      	mov	r2, r5
   d9b06:	200a      	movs	r0, #10
   d9b08:	f7fe ff1c 	bl	d8944 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d9b0c:	4628      	mov	r0, r5
   d9b0e:	f002 fcf7 	bl	dc500 <strlen>
   d9b12:	6833      	ldr	r3, [r6, #0]
   d9b14:	4602      	mov	r2, r0
   d9b16:	68db      	ldr	r3, [r3, #12]
   d9b18:	4629      	mov	r1, r5
   d9b1a:	4630      	mov	r0, r6
   d9b1c:	4798      	blx	r3
   d9b1e:	e00f      	b.n	d9b40 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d9b20:	b124      	cbz	r4, d9b2c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d9b22:	212e      	movs	r1, #46	; 0x2e
   d9b24:	4630      	mov	r0, r6
   d9b26:	f7ff fbe7 	bl	d92f8 <_ZN5Print5printEc>
   d9b2a:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d9b2c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d9b30:	220a      	movs	r2, #10
   d9b32:	4630      	mov	r0, r6
   d9b34:	f7ff fbf9 	bl	d932a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d9b38:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d9b3a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d9b3c:	d1f0      	bne.n	d9b20 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d9b3e:	4620      	mov	r0, r4
    }
    return n;
}
   d9b40:	b00d      	add	sp, #52	; 0x34
   d9b42:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9b44 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d9b44:	b510      	push	{r4, lr}
   d9b46:	4b05      	ldr	r3, [pc, #20]	; (d9b5c <_ZN9IPAddressC1Ev+0x18>)
   d9b48:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d9b4a:	2211      	movs	r2, #17
   d9b4c:	f840 3b04 	str.w	r3, [r0], #4
   d9b50:	2100      	movs	r1, #0
   d9b52:	f001 ff71 	bl	dba38 <memset>
{
    clear();
}
   d9b56:	4620      	mov	r0, r4
   d9b58:	bd10      	pop	{r4, pc}
   d9b5a:	bf00      	nop
   d9b5c:	000dd260 	.word	0x000dd260

000d9b60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d9b60:	4603      	mov	r3, r0
   d9b62:	4a07      	ldr	r2, [pc, #28]	; (d9b80 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d9b64:	b510      	push	{r4, lr}
   d9b66:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d9b6a:	f101 0210 	add.w	r2, r1, #16
   d9b6e:	f851 4b04 	ldr.w	r4, [r1], #4
   d9b72:	f843 4b04 	str.w	r4, [r3], #4
   d9b76:	4291      	cmp	r1, r2
   d9b78:	d1f9      	bne.n	d9b6e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d9b7a:	780a      	ldrb	r2, [r1, #0]
   d9b7c:	701a      	strb	r2, [r3, #0]
}
   d9b7e:	bd10      	pop	{r4, pc}
   d9b80:	000dd260 	.word	0x000dd260

000d9b84 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d9b84:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d9b86:	2b04      	cmp	r3, #4
   d9b88:	d101      	bne.n	d9b8e <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d9b8a:	6840      	ldr	r0, [r0, #4]
   d9b8c:	e008      	b.n	d9ba0 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d9b8e:	2b06      	cmp	r3, #6
   d9b90:	d10a      	bne.n	d9ba8 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d9b92:	6843      	ldr	r3, [r0, #4]
   d9b94:	b953      	cbnz	r3, d9bac <_ZNK9IPAddresscvbEv+0x28>
   d9b96:	6883      	ldr	r3, [r0, #8]
   d9b98:	b943      	cbnz	r3, d9bac <_ZNK9IPAddresscvbEv+0x28>
   d9b9a:	68c3      	ldr	r3, [r0, #12]
   d9b9c:	b933      	cbnz	r3, d9bac <_ZNK9IPAddresscvbEv+0x28>
   d9b9e:	6900      	ldr	r0, [r0, #16]
   d9ba0:	3000      	adds	r0, #0
   d9ba2:	bf18      	it	ne
   d9ba4:	2001      	movne	r0, #1
   d9ba6:	4770      	bx	lr
    } else {
        return false;
   d9ba8:	2000      	movs	r0, #0
   d9baa:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d9bac:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d9bae:	4770      	bx	lr

000d9bb0 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d9bb0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d9bb2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d9bb6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d9bba:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d9bbe:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d9bc2:	2304      	movs	r3, #4
   d9bc4:	6041      	str	r1, [r0, #4]
   d9bc6:	7503      	strb	r3, [r0, #20]
   d9bc8:	bd10      	pop	{r4, pc}

000d9bca <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d9bca:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d9bcc:	780d      	ldrb	r5, [r1, #0]
   d9bce:	788b      	ldrb	r3, [r1, #2]
   d9bd0:	784a      	ldrb	r2, [r1, #1]
   d9bd2:	78c9      	ldrb	r1, [r1, #3]
   d9bd4:	9100      	str	r1, [sp, #0]
   d9bd6:	4629      	mov	r1, r5
   d9bd8:	f7ff ffea 	bl	d9bb0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d9bdc:	b003      	add	sp, #12
   d9bde:	bd30      	pop	{r4, r5, pc}

000d9be0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
   d9be0:	b510      	push	{r4, lr}
   d9be2:	4b03      	ldr	r3, [pc, #12]	; (d9bf0 <_ZN9IPAddressC1EPKh+0x10>)
   d9be4:	6003      	str	r3, [r0, #0]
   d9be6:	4604      	mov	r4, r0
{
    *this = address;
   d9be8:	f7ff ffef 	bl	d9bca <_ZN9IPAddressaSEPKh>
}
   d9bec:	4620      	mov	r0, r4
   d9bee:	bd10      	pop	{r4, pc}
   d9bf0:	000dd260 	.word	0x000dd260

000d9bf4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9bf4:	7441      	strb	r1, [r0, #17]
   d9bf6:	4770      	bx	lr

000d9bf8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d9bf8:	4770      	bx	lr

000d9bfa <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d9bfa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d9bfc:	2100      	movs	r1, #0
   d9bfe:	7c00      	ldrb	r0, [r0, #16]
   d9c00:	f7fe ffa8 	bl	d8b54 <HAL_USB_USART_Receive_Data>
}
   d9c04:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9c08:	bf28      	it	cs
   d9c0a:	f04f 30ff 	movcs.w	r0, #4294967295
   d9c0e:	bd08      	pop	{r3, pc}

000d9c10 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d9c10:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d9c12:	2101      	movs	r1, #1
   d9c14:	7c00      	ldrb	r0, [r0, #16]
   d9c16:	f7fe ff9d 	bl	d8b54 <HAL_USB_USART_Receive_Data>
}
   d9c1a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9c1e:	bf28      	it	cs
   d9c20:	f04f 30ff 	movcs.w	r0, #4294967295
   d9c24:	bd08      	pop	{r3, pc}

000d9c26 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d9c26:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d9c28:	7c00      	ldrb	r0, [r0, #16]
   d9c2a:	f7fe ff8b 	bl	d8b44 <HAL_USB_USART_Available_Data_For_Write>
}
   d9c2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9c32:	bd08      	pop	{r3, pc}

000d9c34 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d9c34:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d9c36:	7c00      	ldrb	r0, [r0, #16]
   d9c38:	f7fe ff7c 	bl	d8b34 <HAL_USB_USART_Available_Data>
}
   d9c3c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9c40:	bd08      	pop	{r3, pc}

000d9c42 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d9c42:	7c00      	ldrb	r0, [r0, #16]
   d9c44:	f7fe bf96 	b.w	d8b74 <HAL_USB_USART_Flush_Data>

000d9c48 <_ZN9USBSerialD0Ev>:
   d9c48:	b510      	push	{r4, lr}
   d9c4a:	2114      	movs	r1, #20
   d9c4c:	4604      	mov	r4, r0
   d9c4e:	f000 ff3b 	bl	daac8 <_ZdlPvj>
   d9c52:	4620      	mov	r0, r4
   d9c54:	bd10      	pop	{r4, pc}

000d9c56 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d9c56:	b538      	push	{r3, r4, r5, lr}
   d9c58:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9c5a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d9c5c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9c5e:	f7fe ff71 	bl	d8b44 <HAL_USB_USART_Available_Data_For_Write>
   d9c62:	2800      	cmp	r0, #0
   d9c64:	dc01      	bgt.n	d9c6a <_ZN9USBSerial5writeEh+0x14>
   d9c66:	7c60      	ldrb	r0, [r4, #17]
   d9c68:	b128      	cbz	r0, d9c76 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d9c6a:	4629      	mov	r1, r5
   d9c6c:	7c20      	ldrb	r0, [r4, #16]
   d9c6e:	f7fe ff79 	bl	d8b64 <HAL_USB_USART_Send_Data>
   d9c72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d9c76:	bd38      	pop	{r3, r4, r5, pc}

000d9c78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9c78:	b510      	push	{r4, lr}
   d9c7a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d9c7c:	2300      	movs	r3, #0
   d9c7e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d9c80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9c84:	60a3      	str	r3, [r4, #8]
   d9c86:	4b05      	ldr	r3, [pc, #20]	; (d9c9c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d9c88:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d9c8a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9c8c:	4608      	mov	r0, r1
{
  _serial = serial;
   d9c8e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d9c90:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d9c92:	4611      	mov	r1, r2
   d9c94:	f7fe ff3e 	bl	d8b14 <HAL_USB_USART_Init>
}
   d9c98:	4620      	mov	r0, r4
   d9c9a:	bd10      	pop	{r4, pc}
   d9c9c:	000dd274 	.word	0x000dd274

000d9ca0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d9ca0:	2200      	movs	r2, #0
   d9ca2:	7c00      	ldrb	r0, [r0, #16]
   d9ca4:	f7fe bf3e 	b.w	d8b24 <HAL_USB_USART_Begin>

000d9ca8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d9ca8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d9caa:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d9cac:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d9cae:	2100      	movs	r1, #0
   d9cb0:	f001 fec2 	bl	dba38 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d9cb4:	4620      	mov	r0, r4
   d9cb6:	bd10      	pop	{r4, pc}

000d9cb8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d9cb8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9cba:	4d0e      	ldr	r5, [pc, #56]	; (d9cf4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d9cbc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d9cbe:	a801      	add	r0, sp, #4
   d9cc0:	f7ff fff2 	bl	d9ca8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9cc4:	6829      	ldr	r1, [r5, #0]
   d9cc6:	f011 0401 	ands.w	r4, r1, #1
   d9cca:	d110      	bne.n	d9cee <_Z16_fetch_usbserialv+0x36>
   d9ccc:	4628      	mov	r0, r5
   d9cce:	f7fa f9ec 	bl	d40aa <__cxa_guard_acquire>
   d9cd2:	b160      	cbz	r0, d9cee <_Z16_fetch_usbserialv+0x36>
   d9cd4:	aa01      	add	r2, sp, #4
   d9cd6:	4621      	mov	r1, r4
   d9cd8:	4807      	ldr	r0, [pc, #28]	; (d9cf8 <_Z16_fetch_usbserialv+0x40>)
   d9cda:	f7ff ffcd 	bl	d9c78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d9cde:	4628      	mov	r0, r5
   d9ce0:	f7fa f9e8 	bl	d40b4 <__cxa_guard_release>
   d9ce4:	4a05      	ldr	r2, [pc, #20]	; (d9cfc <_Z16_fetch_usbserialv+0x44>)
   d9ce6:	4906      	ldr	r1, [pc, #24]	; (d9d00 <_Z16_fetch_usbserialv+0x48>)
   d9ce8:	4803      	ldr	r0, [pc, #12]	; (d9cf8 <_Z16_fetch_usbserialv+0x40>)
   d9cea:	f000 fedf 	bl	daaac <__aeabi_atexit>
	return _usbserial;
}
   d9cee:	4802      	ldr	r0, [pc, #8]	; (d9cf8 <_Z16_fetch_usbserialv+0x40>)
   d9cf0:	b007      	add	sp, #28
   d9cf2:	bd30      	pop	{r4, r5, pc}
   d9cf4:	2003dff0 	.word	0x2003dff0
   d9cf8:	2003dff4 	.word	0x2003dff4
   d9cfc:	2003d8e0 	.word	0x2003d8e0
   d9d00:	000d9bf9 	.word	0x000d9bf9

000d9d04 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d9d04:	4700      	bx	r0
	...

000d9d08 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d9d08:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9d0a:	b085      	sub	sp, #20
   d9d0c:	461c      	mov	r4, r3
   d9d0e:	460e      	mov	r6, r1
   d9d10:	4617      	mov	r7, r2
   d9d12:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   d9d14:	f7fe fcee 	bl	d86f4 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   d9d18:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d9d1a:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d9d1c:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d9d20:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d9d22:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d9d26:	bfa5      	ittet	ge
   d9d28:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d9d2c:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d9d30:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d9d32:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d9d34:	9300      	str	r3, [sp, #0]
   d9d36:	4632      	mov	r2, r6
   d9d38:	463b      	mov	r3, r7
   d9d3a:	4906      	ldr	r1, [pc, #24]	; (d9d54 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d9d3c:	bfa8      	it	ge
   d9d3e:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d9d42:	4628      	mov	r0, r5
   d9d44:	f7fe fcce 	bl	d86e4 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d9d48:	fab0 f080 	clz	r0, r0
   d9d4c:	0940      	lsrs	r0, r0, #5
   d9d4e:	b005      	add	sp, #20
   d9d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9d52:	bf00      	nop
   d9d54:	000d9d05 	.word	0x000d9d05

000d9d58 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   d9d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9d5a:	4606      	mov	r6, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
   d9d5c:	f7fe fcca 	bl	d86f4 <HAL_Interrupts_Detach>
   d9d60:	4607      	mov	r7, r0
   d9d62:	b968      	cbnz	r0, d9d80 <_Z15detachInterruptt+0x28>
        return false;
    }
    if (handlers[pin]) {
   d9d64:	4d08      	ldr	r5, [pc, #32]	; (d9d88 <_Z15detachInterruptt+0x30>)
   d9d66:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
   d9d6a:	b15c      	cbz	r4, d9d84 <_Z15detachInterruptt+0x2c>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d9d6c:	4620      	mov	r0, r4
   d9d6e:	f7fb fad1 	bl	d5314 <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   d9d72:	2110      	movs	r1, #16
   d9d74:	4620      	mov	r0, r4
   d9d76:	f000 fea7 	bl	daac8 <_ZdlPvj>
        handlers[pin] = nullptr;
   d9d7a:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
   d9d7e:	e001      	b.n	d9d84 <_Z15detachInterruptt+0x2c>
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
        return false;
   d9d80:	2000      	movs	r0, #0
   d9d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    if (handlers[pin]) {
        delete handlers[pin];
        handlers[pin] = nullptr;
    }
    return true;
   d9d84:	2001      	movs	r0, #1
}
   d9d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d9d88:	2003e008 	.word	0x2003e008

000d9d8c <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d9d8c:	f7fe bcc2 	b.w	d8714 <HAL_Interrupts_Disable_All>

000d9d90 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d9d90:	f7fe bcb8 	b.w	d8704 <HAL_Interrupts_Enable_All>

000d9d94 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d9d94:	2200      	movs	r2, #0
   d9d96:	4611      	mov	r1, r2
   d9d98:	6840      	ldr	r0, [r0, #4]
   d9d9a:	f7fe bf4f 	b.w	d8c3c <network_ready>

000d9d9e <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d9d9e:	2200      	movs	r2, #0
   d9da0:	4611      	mov	r1, r2
   d9da2:	6840      	ldr	r0, [r0, #4]
   d9da4:	f7fe bf6a 	b.w	d8c7c <network_listening>

000d9da8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d9da8:	2200      	movs	r2, #0
   d9daa:	4611      	mov	r1, r2
   d9dac:	6840      	ldr	r0, [r0, #4]
   d9dae:	f7fe bf75 	b.w	d8c9c <network_get_listen_timeout>

000d9db2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d9db2:	2200      	movs	r2, #0
   d9db4:	6840      	ldr	r0, [r0, #4]
   d9db6:	f7fe bf69 	b.w	d8c8c <network_set_listen_timeout>

000d9dba <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d9dba:	2200      	movs	r2, #0
   d9dbc:	f081 0101 	eor.w	r1, r1, #1
   d9dc0:	6840      	ldr	r0, [r0, #4]
   d9dc2:	f7fe bf53 	b.w	d8c6c <network_listen>

000d9dc6 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d9dc6:	2300      	movs	r3, #0
   d9dc8:	461a      	mov	r2, r3
   d9dca:	4619      	mov	r1, r3
   d9dcc:	6840      	ldr	r0, [r0, #4]
   d9dce:	f7fe bf45 	b.w	d8c5c <network_off>

000d9dd2 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d9dd2:	2300      	movs	r3, #0
   d9dd4:	461a      	mov	r2, r3
   d9dd6:	4619      	mov	r1, r3
   d9dd8:	6840      	ldr	r0, [r0, #4]
   d9dda:	f7fe bf37 	b.w	d8c4c <network_on>

000d9dde <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d9dde:	2200      	movs	r2, #0
   d9de0:	4611      	mov	r1, r2
   d9de2:	6840      	ldr	r0, [r0, #4]
   d9de4:	f7fe bf1a 	b.w	d8c1c <network_connecting>

000d9de8 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d9de8:	2200      	movs	r2, #0
   d9dea:	2102      	movs	r1, #2
   d9dec:	6840      	ldr	r0, [r0, #4]
   d9dee:	f7fe bf1d 	b.w	d8c2c <network_disconnect>

000d9df2 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d9df2:	2300      	movs	r3, #0
   d9df4:	461a      	mov	r2, r3
   d9df6:	6840      	ldr	r0, [r0, #4]
   d9df8:	f7fe bf08 	b.w	d8c0c <network_connect>

000d9dfc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d9dfc:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d9dfe:	4c08      	ldr	r4, [pc, #32]	; (d9e20 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d9e00:	2528      	movs	r5, #40	; 0x28
   d9e02:	462a      	mov	r2, r5
   d9e04:	2100      	movs	r1, #0
   d9e06:	4620      	mov	r0, r4
   d9e08:	f001 fe16 	bl	dba38 <memset>
        cid = -1;
   d9e0c:	f04f 33ff 	mov.w	r3, #4294967295
   d9e10:	6063      	str	r3, [r4, #4]
   d9e12:	4b04      	ldr	r3, [pc, #16]	; (d9e24 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d9e14:	8025      	strh	r5, [r4, #0]
   d9e16:	2204      	movs	r2, #4
   d9e18:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d9e1a:	4a03      	ldr	r2, [pc, #12]	; (d9e28 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d9e1c:	601a      	str	r2, [r3, #0]
   d9e1e:	bd38      	pop	{r3, r4, r5, pc}
   d9e20:	2003e0a0 	.word	0x2003e0a0
   d9e24:	2003e098 	.word	0x2003e098
   d9e28:	000dd2a4 	.word	0x000dd2a4

000d9e2c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d9e2c:	4770      	bx	lr

000d9e2e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9e2e:	7441      	strb	r1, [r0, #17]
   d9e30:	4770      	bx	lr

000d9e32 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d9e32:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d9e34:	7c00      	ldrb	r0, [r0, #16]
   d9e36:	f7fe fdd5 	bl	d89e4 <HAL_USART_Available_Data_For_Write>
}
   d9e3a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9e3e:	bd08      	pop	{r3, pc}

000d9e40 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d9e40:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d9e42:	7c00      	ldrb	r0, [r0, #16]
   d9e44:	f7fe fda6 	bl	d8994 <HAL_USART_Available_Data>
}
   d9e48:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9e4c:	bd08      	pop	{r3, pc}

000d9e4e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d9e4e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d9e50:	7c00      	ldrb	r0, [r0, #16]
   d9e52:	f7fe fdaf 	bl	d89b4 <HAL_USART_Peek_Data>
}
   d9e56:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9e5a:	bf28      	it	cs
   d9e5c:	f04f 30ff 	movcs.w	r0, #4294967295
   d9e60:	bd08      	pop	{r3, pc}

000d9e62 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d9e62:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d9e64:	7c00      	ldrb	r0, [r0, #16]
   d9e66:	f7fe fd9d 	bl	d89a4 <HAL_USART_Read_Data>
}
   d9e6a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9e6e:	bf28      	it	cs
   d9e70:	f04f 30ff 	movcs.w	r0, #4294967295
   d9e74:	bd08      	pop	{r3, pc}

000d9e76 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d9e76:	7c00      	ldrb	r0, [r0, #16]
   d9e78:	f7fe bda4 	b.w	d89c4 <HAL_USART_Flush_Data>

000d9e7c <_ZN11USARTSerialD0Ev>:
   d9e7c:	b510      	push	{r4, lr}
   d9e7e:	2114      	movs	r1, #20
   d9e80:	4604      	mov	r4, r0
   d9e82:	f000 fe21 	bl	daac8 <_ZdlPvj>
   d9e86:	4620      	mov	r0, r4
   d9e88:	bd10      	pop	{r4, pc}

000d9e8a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d9e8a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d9e8c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d9e8e:	4604      	mov	r4, r0
   d9e90:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d9e92:	b925      	cbnz	r5, d9e9e <_ZN11USARTSerial5writeEh+0x14>
   d9e94:	7c00      	ldrb	r0, [r0, #16]
   d9e96:	f7fe fda5 	bl	d89e4 <HAL_USART_Available_Data_For_Write>
   d9e9a:	2800      	cmp	r0, #0
   d9e9c:	dd05      	ble.n	d9eaa <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d9e9e:	4631      	mov	r1, r6
   d9ea0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d9ea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d9ea6:	f7fe bd6d 	b.w	d8984 <HAL_USART_Write_Data>
  }
  return 0;
}
   d9eaa:	4628      	mov	r0, r5
   d9eac:	bd70      	pop	{r4, r5, r6, pc}
	...

000d9eb0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d9eb0:	b510      	push	{r4, lr}
   d9eb2:	4604      	mov	r4, r0
   d9eb4:	4608      	mov	r0, r1
   d9eb6:	4611      	mov	r1, r2
   d9eb8:	2200      	movs	r2, #0
   d9eba:	6062      	str	r2, [r4, #4]
   d9ebc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d9ec0:	60a2      	str	r2, [r4, #8]
   d9ec2:	4a05      	ldr	r2, [pc, #20]	; (d9ed8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d9ec4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d9ec6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d9ec8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d9eca:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d9ecc:	461a      	mov	r2, r3
   d9ece:	f7fe fd51 	bl	d8974 <HAL_USART_Init>
}
   d9ed2:	4620      	mov	r0, r4
   d9ed4:	bd10      	pop	{r4, pc}
   d9ed6:	bf00      	nop
   d9ed8:	000dd2d8 	.word	0x000dd2d8

000d9edc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d9edc:	7c00      	ldrb	r0, [r0, #16]
   d9ede:	f7fe bd79 	b.w	d89d4 <HAL_USART_Is_Enabled>
	...

000d9ee4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d9ee4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d9ee6:	4d0c      	ldr	r5, [pc, #48]	; (d9f18 <_Z22__fetch_global_Serial1v+0x34>)
   d9ee8:	6829      	ldr	r1, [r5, #0]
   d9eea:	f011 0401 	ands.w	r4, r1, #1
   d9eee:	d111      	bne.n	d9f14 <_Z22__fetch_global_Serial1v+0x30>
   d9ef0:	4628      	mov	r0, r5
   d9ef2:	f7fa f8da 	bl	d40aa <__cxa_guard_acquire>
   d9ef6:	b168      	cbz	r0, d9f14 <_Z22__fetch_global_Serial1v+0x30>
   d9ef8:	4a08      	ldr	r2, [pc, #32]	; (d9f1c <_Z22__fetch_global_Serial1v+0x38>)
   d9efa:	4b09      	ldr	r3, [pc, #36]	; (d9f20 <_Z22__fetch_global_Serial1v+0x3c>)
   d9efc:	4809      	ldr	r0, [pc, #36]	; (d9f24 <_Z22__fetch_global_Serial1v+0x40>)
   d9efe:	4621      	mov	r1, r4
   d9f00:	f7ff ffd6 	bl	d9eb0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d9f04:	4628      	mov	r0, r5
   d9f06:	f7fa f8d5 	bl	d40b4 <__cxa_guard_release>
   d9f0a:	4a07      	ldr	r2, [pc, #28]	; (d9f28 <_Z22__fetch_global_Serial1v+0x44>)
   d9f0c:	4907      	ldr	r1, [pc, #28]	; (d9f2c <_Z22__fetch_global_Serial1v+0x48>)
   d9f0e:	4805      	ldr	r0, [pc, #20]	; (d9f24 <_Z22__fetch_global_Serial1v+0x40>)
   d9f10:	f000 fdcc 	bl	daaac <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d9f14:	4803      	ldr	r0, [pc, #12]	; (d9f24 <_Z22__fetch_global_Serial1v+0x40>)
   d9f16:	bd38      	pop	{r3, r4, r5, pc}
   d9f18:	2003e160 	.word	0x2003e160
   d9f1c:	2003e164 	.word	0x2003e164
   d9f20:	2003e0dc 	.word	0x2003e0dc
   d9f24:	2003e0c8 	.word	0x2003e0c8
   d9f28:	2003d8e0 	.word	0x2003d8e0
   d9f2c:	000d9e2d 	.word	0x000d9e2d

000d9f30 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d9f30:	4770      	bx	lr

000d9f32 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d9f32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9f34:	4606      	mov	r6, r0
   d9f36:	4615      	mov	r5, r2
   d9f38:	460c      	mov	r4, r1
   d9f3a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d9f3c:	42bc      	cmp	r4, r7
   d9f3e:	d006      	beq.n	d9f4e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d9f40:	6833      	ldr	r3, [r6, #0]
   d9f42:	f814 1b01 	ldrb.w	r1, [r4], #1
   d9f46:	689b      	ldr	r3, [r3, #8]
   d9f48:	4630      	mov	r0, r6
   d9f4a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d9f4c:	e7f6      	b.n	d9f3c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d9f4e:	4628      	mov	r0, r5
   d9f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9f52 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d9f52:	2200      	movs	r2, #0
   d9f54:	7c00      	ldrb	r0, [r0, #16]
   d9f56:	f7fe bd5d 	b.w	d8a14 <HAL_I2C_Write_Data>

000d9f5a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d9f5a:	2100      	movs	r1, #0
   d9f5c:	7c00      	ldrb	r0, [r0, #16]
   d9f5e:	f7fe bd61 	b.w	d8a24 <HAL_I2C_Available_Data>

000d9f62 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d9f62:	2100      	movs	r1, #0
   d9f64:	7c00      	ldrb	r0, [r0, #16]
   d9f66:	f7fe bd65 	b.w	d8a34 <HAL_I2C_Read_Data>

000d9f6a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d9f6a:	2100      	movs	r1, #0
   d9f6c:	7c00      	ldrb	r0, [r0, #16]
   d9f6e:	f7fe bd69 	b.w	d8a44 <HAL_I2C_Peek_Data>

000d9f72 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d9f72:	2100      	movs	r1, #0
   d9f74:	7c00      	ldrb	r0, [r0, #16]
   d9f76:	f7fe bd6d 	b.w	d8a54 <HAL_I2C_Flush_Data>

000d9f7a <_ZN7TwoWireD0Ev>:
   d9f7a:	b510      	push	{r4, lr}
   d9f7c:	2114      	movs	r1, #20
   d9f7e:	4604      	mov	r4, r0
   d9f80:	f000 fda2 	bl	daac8 <_ZdlPvj>
   d9f84:	4620      	mov	r0, r4
   d9f86:	bd10      	pop	{r4, pc}

000d9f88 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d9f88:	b510      	push	{r4, lr}
   d9f8a:	4604      	mov	r4, r0
   d9f8c:	2300      	movs	r3, #0
   d9f8e:	6063      	str	r3, [r4, #4]
   d9f90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9f94:	60a3      	str	r3, [r4, #8]
   d9f96:	4b04      	ldr	r3, [pc, #16]	; (d9fa8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d9f98:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d9f9a:	4608      	mov	r0, r1
   d9f9c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d9f9e:	4611      	mov	r1, r2
   d9fa0:	f7fe fd68 	bl	d8a74 <HAL_I2C_Init>
}
   d9fa4:	4620      	mov	r0, r4
   d9fa6:	bd10      	pop	{r4, pc}
   d9fa8:	000dd308 	.word	0x000dd308

000d9fac <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d9fac:	b570      	push	{r4, r5, r6, lr}
   d9fae:	460c      	mov	r4, r1
   d9fb0:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d9fb2:	2514      	movs	r5, #20
   d9fb4:	4606      	mov	r6, r0
   d9fb6:	462a      	mov	r2, r5
   d9fb8:	2100      	movs	r1, #0
   d9fba:	a801      	add	r0, sp, #4
   d9fbc:	f001 fd3c 	bl	dba38 <memset>
   d9fc0:	7823      	ldrb	r3, [r4, #0]
   d9fc2:	f88d 3008 	strb.w	r3, [sp, #8]
   d9fc6:	6863      	ldr	r3, [r4, #4]
   d9fc8:	9303      	str	r3, [sp, #12]
   d9fca:	68e3      	ldr	r3, [r4, #12]
   d9fcc:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d9fce:	2200      	movs	r2, #0
   d9fd0:	7a23      	ldrb	r3, [r4, #8]
   d9fd2:	7c30      	ldrb	r0, [r6, #16]
   d9fd4:	f8ad 5004 	strh.w	r5, [sp, #4]
   d9fd8:	a901      	add	r1, sp, #4
   d9fda:	9305      	str	r3, [sp, #20]
   d9fdc:	f7fe fd62 	bl	d8aa4 <HAL_I2C_Request_Data_Ex>
}
   d9fe0:	b006      	add	sp, #24
   d9fe2:	bd70      	pop	{r4, r5, r6, pc}

000d9fe4 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d9fe4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d9fe6:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9fe8:	f88d 1000 	strb.w	r1, [sp]
   d9fec:	f04f 0164 	mov.w	r1, #100	; 0x64
   d9ff0:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d9ff2:	bf18      	it	ne
   d9ff4:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d9ff6:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d9ff8:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d9ffa:	f88d 3008 	strb.w	r3, [sp, #8]
   d9ffe:	f7ff ffd5 	bl	d9fac <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   da002:	b005      	add	sp, #20
   da004:	f85d fb04 	ldr.w	pc, [sp], #4

000da008 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   da008:	2200      	movs	r2, #0
   da00a:	7c00      	ldrb	r0, [r0, #16]
   da00c:	f7fe bcf2 	b.w	d89f4 <HAL_I2C_Begin_Transmission>

000da010 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   da010:	b2c9      	uxtb	r1, r1
   da012:	f7ff bff9 	b.w	da008 <_ZN7TwoWire17beginTransmissionEh>

000da016 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   da016:	2200      	movs	r2, #0
   da018:	7c00      	ldrb	r0, [r0, #16]
   da01a:	f7fe bcf3 	b.w	d8a04 <HAL_I2C_End_Transmission>

000da01e <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   da01e:	2100      	movs	r1, #0
   da020:	7c00      	ldrb	r0, [r0, #16]
   da022:	f7fe bd1f 	b.w	d8a64 <HAL_I2C_Is_Enabled>

000da026 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   da026:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   da028:	2100      	movs	r1, #0
   da02a:	7c00      	ldrb	r0, [r0, #16]
   da02c:	f7fe fd2a 	bl	d8a84 <HAL_I2C_Acquire>
}
   da030:	fab0 f080 	clz	r0, r0
   da034:	0940      	lsrs	r0, r0, #5
   da036:	bd08      	pop	{r3, pc}

000da038 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   da038:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   da03a:	2100      	movs	r1, #0
   da03c:	7c00      	ldrb	r0, [r0, #16]
   da03e:	f7fe fd29 	bl	d8a94 <HAL_I2C_Release>
}
   da042:	fab0 f080 	clz	r0, r0
   da046:	0940      	lsrs	r0, r0, #5
   da048:	bd08      	pop	{r3, pc}

000da04a <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   da04a:	2200      	movs	r2, #0
   da04c:	4611      	mov	r1, r2
   da04e:	6840      	ldr	r0, [r0, #4]
   da050:	f7fe be14 	b.w	d8c7c <network_listening>

000da054 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   da054:	2200      	movs	r2, #0
   da056:	4611      	mov	r1, r2
   da058:	6840      	ldr	r0, [r0, #4]
   da05a:	f7fe be1f 	b.w	d8c9c <network_get_listen_timeout>

000da05e <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   da05e:	2200      	movs	r2, #0
   da060:	6840      	ldr	r0, [r0, #4]
   da062:	f7fe be13 	b.w	d8c8c <network_set_listen_timeout>

000da066 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   da066:	2200      	movs	r2, #0
   da068:	f081 0101 	eor.w	r1, r1, #1
   da06c:	6840      	ldr	r0, [r0, #4]
   da06e:	f7fe bdfd 	b.w	d8c6c <network_listen>

000da072 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   da072:	2300      	movs	r3, #0
   da074:	461a      	mov	r2, r3
   da076:	2101      	movs	r1, #1
   da078:	6840      	ldr	r0, [r0, #4]
   da07a:	f7fe bdef 	b.w	d8c5c <network_off>

000da07e <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   da07e:	2300      	movs	r3, #0
   da080:	461a      	mov	r2, r3
   da082:	4619      	mov	r1, r3
   da084:	6840      	ldr	r0, [r0, #4]
   da086:	f7fe bde1 	b.w	d8c4c <network_on>

000da08a <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   da08a:	2200      	movs	r2, #0
   da08c:	4611      	mov	r1, r2
   da08e:	6840      	ldr	r0, [r0, #4]
   da090:	f7fe bdd4 	b.w	d8c3c <network_ready>

000da094 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   da094:	2200      	movs	r2, #0
   da096:	4611      	mov	r1, r2
   da098:	6840      	ldr	r0, [r0, #4]
   da09a:	f7fe bdbf 	b.w	d8c1c <network_connecting>

000da09e <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   da09e:	2200      	movs	r2, #0
   da0a0:	2102      	movs	r1, #2
   da0a2:	6840      	ldr	r0, [r0, #4]
   da0a4:	f7fe bdc2 	b.w	d8c2c <network_disconnect>

000da0a8 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   da0a8:	2300      	movs	r3, #0
   da0aa:	461a      	mov	r2, r3
   da0ac:	6840      	ldr	r0, [r0, #4]
   da0ae:	f7fe bdad 	b.w	d8c0c <network_connect>

000da0b2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   da0b2:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   da0b4:	4605      	mov	r5, r0
   da0b6:	b188      	cbz	r0, da0dc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   da0b8:	6804      	ldr	r4, [r0, #0]
   da0ba:	b14c      	cbz	r4, da0d0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   da0bc:	68a3      	ldr	r3, [r4, #8]
   da0be:	b11b      	cbz	r3, da0c8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   da0c0:	2203      	movs	r2, #3
   da0c2:	4621      	mov	r1, r4
   da0c4:	4620      	mov	r0, r4
   da0c6:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   da0c8:	2110      	movs	r1, #16
   da0ca:	4620      	mov	r0, r4
   da0cc:	f000 fcfc 	bl	daac8 <_ZdlPvj>
   da0d0:	4628      	mov	r0, r5
   da0d2:	2114      	movs	r1, #20
      }
   da0d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   da0d8:	f000 bcf6 	b.w	daac8 <_ZdlPvj>
   da0dc:	bd38      	pop	{r3, r4, r5, pc}

000da0de <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   da0de:	b110      	cbz	r0, da0e6 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   da0e0:	6803      	ldr	r3, [r0, #0]
   da0e2:	685b      	ldr	r3, [r3, #4]
   da0e4:	4718      	bx	r3
   da0e6:	4770      	bx	lr

000da0e8 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   da0e8:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   da0ea:	6803      	ldr	r3, [r0, #0]
   da0ec:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   da0ee:	b1bb      	cbz	r3, da120 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   da0f0:	6858      	ldr	r0, [r3, #4]
   da0f2:	f7fe fbc7 	bl	d8884 <os_thread_is_current>
   da0f6:	b978      	cbnz	r0, da118 <_ZN6ThreadD1Ev+0x30>
   da0f8:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   da0fa:	7c5a      	ldrb	r2, [r3, #17]
   da0fc:	b912      	cbnz	r2, da104 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   da0fe:	6858      	ldr	r0, [r3, #4]
   da100:	f7fe fbd0 	bl	d88a4 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   da104:	6823      	ldr	r3, [r4, #0]
   da106:	6858      	ldr	r0, [r3, #4]
   da108:	f7fe fbd4 	bl	d88b4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da10c:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   da10e:	2300      	movs	r3, #0
   da110:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   da112:	b128      	cbz	r0, da120 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   da114:	f7ff ffcd 	bl	da0b2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   da118:	6820      	ldr	r0, [r4, #0]
   da11a:	b108      	cbz	r0, da120 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   da11c:	f7ff ffc9 	bl	da0b2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   da120:	4620      	mov	r0, r4
   da122:	bd10      	pop	{r4, pc}

000da124 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   da124:	b538      	push	{r3, r4, r5, lr}
   da126:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   da128:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   da12c:	b108      	cbz	r0, da132 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   da12e:	f7f9 ffba 	bl	d40a6 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   da132:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   da136:	b108      	cbz	r0, da13c <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   da138:	f7fe fbf4 	bl	d8924 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   da13c:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   da140:	b135      	cbz	r5, da150 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   da142:	4628      	mov	r0, r5
   da144:	f7ff ffd0 	bl	da0e8 <_ZN6ThreadD1Ev>
   da148:	2104      	movs	r1, #4
   da14a:	4628      	mov	r0, r5
   da14c:	f000 fcbc 	bl	daac8 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   da150:	6820      	ldr	r0, [r4, #0]
   da152:	b108      	cbz	r0, da158 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   da154:	f7ff ffc3 	bl	da0de <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   da158:	4620      	mov	r0, r4
   da15a:	bd38      	pop	{r3, r4, r5, pc}

000da15c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   da15c:	b510      	push	{r4, lr}
   da15e:	4b04      	ldr	r3, [pc, #16]	; (da170 <_ZN5spark9MeshClassD1Ev+0x14>)
   da160:	4604      	mov	r4, r0
   da162:	f840 3b08 	str.w	r3, [r0], #8
   da166:	f7ff ffdd 	bl	da124 <_ZN5spark11MeshPublishD1Ev>
   da16a:	4620      	mov	r0, r4
   da16c:	bd10      	pop	{r4, pc}
   da16e:	bf00      	nop
   da170:	000dd330 	.word	0x000dd330

000da174 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   da174:	b538      	push	{r3, r4, r5, lr}
   da176:	4c0e      	ldr	r4, [pc, #56]	; (da1b0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   da178:	4b0e      	ldr	r3, [pc, #56]	; (da1b4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   da17a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   da17c:	2500      	movs	r5, #0
   da17e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   da180:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   da184:	6063      	str	r3, [r4, #4]
   da186:	60a5      	str	r5, [r4, #8]
   da188:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   da18c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   da190:	f7fe fbc0 	bl	d8914 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   da194:	4b08      	ldr	r3, [pc, #32]	; (da1b8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   da196:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   da19a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   da19e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   da1a0:	4620      	mov	r0, r4
   da1a2:	4a06      	ldr	r2, [pc, #24]	; (da1bc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   da1a4:	4906      	ldr	r1, [pc, #24]	; (da1c0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   da1a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   da1aa:	f000 bc7f 	b.w	daaac <__aeabi_atexit>
   da1ae:	bf00      	nop
   da1b0:	2003e1e8 	.word	0x2003e1e8
   da1b4:	000dd3e4 	.word	0x000dd3e4
   da1b8:	000dd330 	.word	0x000dd330
   da1bc:	2003d8e0 	.word	0x2003d8e0
   da1c0:	000da15d 	.word	0x000da15d

000da1c4 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   da1c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da1c6:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   da1c8:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   da1ca:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   da1ce:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   da1d0:	2201      	movs	r2, #1
   da1d2:	f04f 33ff 	mov.w	r3, #4294967295
   da1d6:	4621      	mov	r1, r4
   da1d8:	47a8      	blx	r5
}
   da1da:	b003      	add	sp, #12
   da1dc:	bd30      	pop	{r4, r5, pc}

000da1de <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   da1de:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   da1e0:	6803      	ldr	r3, [r0, #0]
   da1e2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   da1e4:	f04f 33ff 	mov.w	r3, #4294967295
   da1e8:	46a4      	mov	ip, r4
}
   da1ea:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   da1ee:	4760      	bx	ip

000da1f0 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   da1f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da1f2:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   da1f4:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   da1f6:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   da1fa:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   da1fc:	4621      	mov	r1, r4
   da1fe:	4613      	mov	r3, r2
   da200:	2201      	movs	r2, #1
   da202:	47a8      	blx	r5
}
   da204:	b003      	add	sp, #12
   da206:	bd30      	pop	{r4, r5, pc}

000da208 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   da208:	4770      	bx	lr

000da20a <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   da20a:	b538      	push	{r3, r4, r5, lr}
   da20c:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   da20e:	681a      	ldr	r2, [r3, #0]
   da210:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   da212:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   da214:	da05      	bge.n	da222 <_ZN9TCPClient9connectedEv+0x18>
   da216:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da21a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   da21e:	429a      	cmp	r2, r3
   da220:	d001      	beq.n	da226 <_ZN9TCPClient9connectedEv+0x1c>
   da222:	2501      	movs	r5, #1
   da224:	e00b      	b.n	da23e <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   da226:	6803      	ldr	r3, [r0, #0]
   da228:	691b      	ldr	r3, [r3, #16]
   da22a:	4798      	blx	r3
   da22c:	2800      	cmp	r0, #0
   da22e:	bf14      	ite	ne
   da230:	2501      	movne	r5, #1
   da232:	2500      	moveq	r5, #0
        if (!rv) {
   da234:	d103      	bne.n	da23e <_ZN9TCPClient9connectedEv+0x34>
            stop();
   da236:	6823      	ldr	r3, [r4, #0]
   da238:	4620      	mov	r0, r4
   da23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   da23c:	4798      	blx	r3
        }
    }
    return rv;
}
   da23e:	4628      	mov	r0, r5
   da240:	bd38      	pop	{r3, r4, r5, pc}

000da242 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   da242:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   da244:	6818      	ldr	r0, [r3, #0]
}
   da246:	43c0      	mvns	r0, r0
   da248:	0fc0      	lsrs	r0, r0, #31
   da24a:	4770      	bx	lr

000da24c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   da24c:	4770      	bx	lr

000da24e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   da24e:	2000      	movs	r0, #0
   da250:	4770      	bx	lr

000da252 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   da252:	b510      	push	{r4, lr}
   da254:	2114      	movs	r1, #20
   da256:	4604      	mov	r4, r0
   da258:	f000 fc36 	bl	daac8 <_ZdlPvj>
   da25c:	4620      	mov	r0, r4
   da25e:	bd10      	pop	{r4, pc}

000da260 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   da260:	f7f9 bf1f 	b.w	d40a2 <_ZdlPv>

000da264 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   da264:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   da266:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   da268:	2200      	movs	r2, #0
   da26a:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   da26c:	9202      	str	r2, [sp, #8]
   da26e:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   da270:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   da272:	4604      	mov	r4, r0
   da274:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   da276:	d008      	beq.n	da28a <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   da278:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   da27c:	fbb3 f1f2 	udiv	r1, r3, r2
   da280:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   da282:	fb02 3111 	mls	r1, r2, r1, r3
   da286:	434a      	muls	r2, r1
   da288:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   da28a:	6960      	ldr	r0, [r4, #20]
   da28c:	2308      	movs	r3, #8
   da28e:	9300      	str	r3, [sp, #0]
   da290:	f241 0205 	movw	r2, #4101	; 0x1005
   da294:	446b      	add	r3, sp
   da296:	f640 71ff 	movw	r1, #4095	; 0xfff
   da29a:	6800      	ldr	r0, [r0, #0]
   da29c:	f7fe fc0a 	bl	d8ab4 <sock_setsockopt>
    if (ret < 0) {
   da2a0:	2800      	cmp	r0, #0
   da2a2:	db08      	blt.n	da2b6 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   da2a4:	6960      	ldr	r0, [r4, #20]
   da2a6:	2300      	movs	r3, #0
   da2a8:	4632      	mov	r2, r6
   da2aa:	4629      	mov	r1, r5
   da2ac:	6800      	ldr	r0, [r0, #0]
   da2ae:	f7fe fc21 	bl	d8af4 <sock_send>
    if (ret < 0) {
   da2b2:	2800      	cmp	r0, #0
   da2b4:	da04      	bge.n	da2c0 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   da2b6:	f7fe fd79 	bl	d8dac <__errno>
   da2ba:	6803      	ldr	r3, [r0, #0]
   da2bc:	6063      	str	r3, [r4, #4]
   da2be:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   da2c0:	b004      	add	sp, #16
   da2c2:	bd70      	pop	{r4, r5, r6, pc}

000da2c4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   da2c4:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   da2c6:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   da2c8:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   da2ca:	689b      	ldr	r3, [r3, #8]
   da2cc:	4798      	blx	r3
          if (--_M_weak_count == 0)
   da2ce:	68a3      	ldr	r3, [r4, #8]
   da2d0:	3b01      	subs	r3, #1
   da2d2:	60a3      	str	r3, [r4, #8]
   da2d4:	b92b      	cbnz	r3, da2e2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   da2d6:	6823      	ldr	r3, [r4, #0]
   da2d8:	4620      	mov	r0, r4
   da2da:	68db      	ldr	r3, [r3, #12]
        }
    }
   da2dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   da2e0:	4718      	bx	r3
   da2e2:	bd10      	pop	{r4, pc}

000da2e4 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   da2e4:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   da2e6:	4604      	mov	r4, r0
   da2e8:	694d      	ldr	r5, [r1, #20]
   da2ea:	4b05      	ldr	r3, [pc, #20]	; (da300 <_ZN9TCPClient8remoteIPEv+0x1c>)
   da2ec:	f844 3b04 	str.w	r3, [r4], #4
   da2f0:	358c      	adds	r5, #140	; 0x8c
   da2f2:	4606      	mov	r6, r0
   da2f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da2f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da2f8:	682b      	ldr	r3, [r5, #0]
   da2fa:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   da2fc:	4630      	mov	r0, r6
   da2fe:	bd70      	pop	{r4, r5, r6, pc}
   da300:	000dd260 	.word	0x000dd260

000da304 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   da304:	b510      	push	{r4, lr}
   da306:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   da308:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da30c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   da310:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   da312:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   da314:	d005      	beq.n	da322 <_ZN9TCPClient4peekEv+0x1e>
   da316:	6962      	ldr	r2, [r4, #20]
   da318:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   da31c:	4413      	add	r3, r2
   da31e:	7918      	ldrb	r0, [r3, #4]
   da320:	bd10      	pop	{r4, pc}
   da322:	6803      	ldr	r3, [r0, #0]
   da324:	691b      	ldr	r3, [r3, #16]
   da326:	4798      	blx	r3
   da328:	2800      	cmp	r0, #0
   da32a:	d1f4      	bne.n	da316 <_ZN9TCPClient4peekEv+0x12>
   da32c:	f04f 30ff 	mov.w	r0, #4294967295
}
   da330:	bd10      	pop	{r4, pc}

000da332 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   da332:	b510      	push	{r4, lr}
   da334:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   da336:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da33a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   da33e:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   da340:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   da342:	d008      	beq.n	da356 <_ZN9TCPClient4readEv+0x24>
   da344:	6962      	ldr	r2, [r4, #20]
   da346:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   da34a:	1c59      	adds	r1, r3, #1
   da34c:	4413      	add	r3, r2
   da34e:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   da352:	7918      	ldrb	r0, [r3, #4]
   da354:	bd10      	pop	{r4, pc}
   da356:	6803      	ldr	r3, [r0, #0]
   da358:	691b      	ldr	r3, [r3, #16]
   da35a:	4798      	blx	r3
   da35c:	2800      	cmp	r0, #0
   da35e:	d1f1      	bne.n	da344 <_ZN9TCPClient4readEv+0x12>
   da360:	f04f 30ff 	mov.w	r0, #4294967295
}
   da364:	bd10      	pop	{r4, pc}

000da366 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   da366:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da368:	6943      	ldr	r3, [r0, #20]
   da36a:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   da36c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da370:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   da374:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   da376:	4605      	mov	r5, r0
   da378:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   da37a:	d106      	bne.n	da38a <_ZN9TCPClient4readEPhj+0x24>
   da37c:	6803      	ldr	r3, [r0, #0]
   da37e:	691b      	ldr	r3, [r3, #16]
   da380:	4798      	blx	r3
   da382:	b910      	cbnz	r0, da38a <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   da384:	f04f 34ff 	mov.w	r4, #4294967295
   da388:	e014      	b.n	da3b4 <_ZN9TCPClient4readEPhj+0x4e>
   da38a:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   da38c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   da390:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   da394:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   da396:	42bc      	cmp	r4, r7
   da398:	bf28      	it	cs
   da39a:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   da39c:	4419      	add	r1, r3
   da39e:	4622      	mov	r2, r4
   da3a0:	3104      	adds	r1, #4
   da3a2:	4630      	mov	r0, r6
   da3a4:	f001 fb3d 	bl	dba22 <memcpy>
   da3a8:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   da3aa:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   da3ae:	4423      	add	r3, r4
   da3b0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   da3b4:	4620      	mov	r0, r4
   da3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da3b8 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   da3b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da3bc:	4698      	mov	r8, r3
    stop();
   da3be:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   da3c0:	b093      	sub	sp, #76	; 0x4c
    stop();
   da3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   da3c4:	460d      	mov	r5, r1
   da3c6:	4606      	mov	r6, r0
   da3c8:	4617      	mov	r7, r2
    stop();
   da3ca:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   da3cc:	ab12      	add	r3, sp, #72	; 0x48
   da3ce:	2400      	movs	r4, #0
   da3d0:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   da3d4:	4622      	mov	r2, r4
   da3d6:	4621      	mov	r1, r4
   da3d8:	4628      	mov	r0, r5
   da3da:	f7fe f953 	bl	d8684 <netdb_getaddrinfo>
   da3de:	4681      	mov	r9, r0
   da3e0:	2800      	cmp	r0, #0
   da3e2:	d13d      	bne.n	da460 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   da3e4:	9b00      	ldr	r3, [sp, #0]
   da3e6:	2b00      	cmp	r3, #0
   da3e8:	d056      	beq.n	da498 <_ZN9TCPClient7connectEPKctm+0xe0>
   da3ea:	695b      	ldr	r3, [r3, #20]
   da3ec:	2b00      	cmp	r3, #0
   da3ee:	d053      	beq.n	da498 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   da3f0:	a806      	add	r0, sp, #24
   da3f2:	f7ff fba7 	bl	d9b44 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   da3f6:	9b00      	ldr	r3, [sp, #0]
   da3f8:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   da3fa:	7863      	ldrb	r3, [r4, #1]
   da3fc:	2b02      	cmp	r3, #2
   da3fe:	d101      	bne.n	da404 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   da400:	1d21      	adds	r1, r4, #4
   da402:	e013      	b.n	da42c <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   da404:	2b0a      	cmp	r3, #10
   da406:	d114      	bne.n	da432 <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   da408:	2211      	movs	r2, #17
   da40a:	4649      	mov	r1, r9
   da40c:	a801      	add	r0, sp, #4
   da40e:	f001 fb13 	bl	dba38 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   da412:	68a3      	ldr	r3, [r4, #8]
   da414:	bb33      	cbnz	r3, da464 <_ZN9TCPClient7connectEPKctm+0xac>
   da416:	68e3      	ldr	r3, [r4, #12]
   da418:	bb23      	cbnz	r3, da464 <_ZN9TCPClient7connectEPKctm+0xac>
   da41a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   da41e:	6925      	ldr	r5, [r4, #16]
   da420:	f7fe fa98 	bl	d8954 <inet_htonl>
   da424:	4285      	cmp	r5, r0
   da426:	d11d      	bne.n	da464 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   da428:	f104 0114 	add.w	r1, r4, #20
   da42c:	a806      	add	r0, sp, #24
   da42e:	f7ff fbcc 	bl	d9bca <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   da432:	a806      	add	r0, sp, #24
   da434:	f7ff fba6 	bl	d9b84 <_ZNK9IPAddresscvbEv>
        if (addr) {
   da438:	2800      	cmp	r0, #0
   da43a:	d02d      	beq.n	da498 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   da43c:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   da43e:	ad07      	add	r5, sp, #28
   da440:	f8d3 9020 	ldr.w	r9, [r3, #32]
   da444:	4b18      	ldr	r3, [pc, #96]	; (da4a8 <_ZN9TCPClient7connectEPKctm+0xf0>)
   da446:	930c      	str	r3, [sp, #48]	; 0x30
   da448:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da44a:	ac0d      	add	r4, sp, #52	; 0x34
   da44c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da44e:	682b      	ldr	r3, [r5, #0]
   da450:	7023      	strb	r3, [r4, #0]
   da452:	463a      	mov	r2, r7
   da454:	4643      	mov	r3, r8
   da456:	a90c      	add	r1, sp, #48	; 0x30
   da458:	4630      	mov	r0, r6
   da45a:	47c8      	blx	r9
   da45c:	4681      	mov	r9, r0
   da45e:	e01b      	b.n	da498 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   da460:	46a1      	mov	r9, r4
   da462:	e019      	b.n	da498 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   da464:	f104 0308 	add.w	r3, r4, #8
   da468:	ad01      	add	r5, sp, #4
   da46a:	3418      	adds	r4, #24
   da46c:	6818      	ldr	r0, [r3, #0]
   da46e:	6859      	ldr	r1, [r3, #4]
   da470:	462a      	mov	r2, r5
   da472:	c203      	stmia	r2!, {r0, r1}
   da474:	3308      	adds	r3, #8
   da476:	42a3      	cmp	r3, r4
   da478:	4615      	mov	r5, r2
   da47a:	d1f7      	bne.n	da46c <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   da47c:	2306      	movs	r3, #6
            addr = IPAddress(a);
   da47e:	a901      	add	r1, sp, #4
   da480:	a80c      	add	r0, sp, #48	; 0x30
   da482:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   da484:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   da488:	f7ff fb6a 	bl	d9b60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   da48c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da48e:	ac07      	add	r4, sp, #28
   da490:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da492:	682b      	ldr	r3, [r5, #0]
   da494:	7023      	strb	r3, [r4, #0]
   da496:	e7cc      	b.n	da432 <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   da498:	9800      	ldr	r0, [sp, #0]
   da49a:	f7fe f8eb 	bl	d8674 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   da49e:	4648      	mov	r0, r9
   da4a0:	b013      	add	sp, #76	; 0x4c
   da4a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da4a6:	bf00      	nop
   da4a8:	000dd260 	.word	0x000dd260

000da4ac <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   da4ac:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   da4ae:	2300      	movs	r3, #0
   da4b0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   da4b4:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   da4b6:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   da4ba:	4770      	bx	lr

000da4bc <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   da4bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da4c0:	461e      	mov	r6, r3
    stop();
   da4c2:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   da4c4:	460c      	mov	r4, r1
   da4c6:	b08a      	sub	sp, #40	; 0x28
    stop();
   da4c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   da4ca:	4605      	mov	r5, r0
   da4cc:	4617      	mov	r7, r2
    stop();
   da4ce:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   da4d0:	7d23      	ldrb	r3, [r4, #20]
   da4d2:	f8d5 8014 	ldr.w	r8, [r5, #20]
   da4d6:	2b04      	cmp	r3, #4
   da4d8:	bf0c      	ite	eq
   da4da:	2002      	moveq	r0, #2
   da4dc:	200a      	movne	r0, #10
   da4de:	2206      	movs	r2, #6
   da4e0:	2101      	movs	r1, #1
   da4e2:	f7fe fb0f 	bl	d8b04 <sock_socket>
   da4e6:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   da4ea:	696b      	ldr	r3, [r5, #20]
   da4ec:	681b      	ldr	r3, [r3, #0]
   da4ee:	2b00      	cmp	r3, #0
   da4f0:	db18      	blt.n	da524 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   da4f2:	4628      	mov	r0, r5
   da4f4:	f7ff ffda 	bl	da4ac <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   da4f8:	b1d6      	cbz	r6, da530 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   da4fa:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   da4fc:	a903      	add	r1, sp, #12
   da4fe:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   da500:	9303      	str	r3, [sp, #12]
   da502:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   da506:	f7fe f975 	bl	d87f4 <if_index_to_name>
   da50a:	b958      	cbnz	r0, da524 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   da50c:	6968      	ldr	r0, [r5, #20]
   da50e:	2306      	movs	r3, #6
   da510:	9300      	str	r3, [sp, #0]
   da512:	f241 020b 	movw	r2, #4107	; 0x100b
   da516:	ab03      	add	r3, sp, #12
   da518:	f640 71ff 	movw	r1, #4095	; 0xfff
   da51c:	6800      	ldr	r0, [r0, #0]
   da51e:	f7fe fac9 	bl	d8ab4 <sock_setsockopt>
   da522:	b128      	cbz	r0, da530 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   da524:	682b      	ldr	r3, [r5, #0]
   da526:	4628      	mov	r0, r5
   da528:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   da52a:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   da52c:	4798      	blx	r3
   da52e:	e03b      	b.n	da5a8 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   da530:	261c      	movs	r6, #28
   da532:	4632      	mov	r2, r6
   da534:	2100      	movs	r1, #0
   da536:	a803      	add	r0, sp, #12
   da538:	f001 fa7e 	bl	dba38 <memset>
    if (ip.version() == 4) {
   da53c:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   da53e:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   da542:	2b04      	cmp	r3, #4
   da544:	d10c      	bne.n	da560 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   da546:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   da548:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   da54a:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   da54e:	f7fe fa09 	bl	d8964 <inet_htons>
   da552:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   da556:	6860      	ldr	r0, [r4, #4]
   da558:	f7fe f9fc 	bl	d8954 <inet_htonl>
   da55c:	9004      	str	r0, [sp, #16]
   da55e:	e013      	b.n	da588 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   da560:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   da562:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   da564:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   da568:	f7fe f9fc 	bl	d8964 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   da56c:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   da56e:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   da572:	1d23      	adds	r3, r4, #4
   da574:	f104 0714 	add.w	r7, r4, #20
   da578:	6818      	ldr	r0, [r3, #0]
   da57a:	6859      	ldr	r1, [r3, #4]
   da57c:	4632      	mov	r2, r6
   da57e:	c203      	stmia	r2!, {r0, r1}
   da580:	3308      	adds	r3, #8
   da582:	42bb      	cmp	r3, r7
   da584:	4616      	mov	r6, r2
   da586:	d1f7      	bne.n	da578 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   da588:	696b      	ldr	r3, [r5, #20]
   da58a:	221c      	movs	r2, #28
   da58c:	a903      	add	r1, sp, #12
   da58e:	6818      	ldr	r0, [r3, #0]
   da590:	f7fe faa0 	bl	d8ad4 <sock_connect>
   da594:	2800      	cmp	r0, #0
   da596:	d1c5      	bne.n	da524 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   da598:	3404      	adds	r4, #4
   da59a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   da59c:	696d      	ldr	r5, [r5, #20]
   da59e:	358c      	adds	r5, #140	; 0x8c
   da5a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   da5a2:	6823      	ldr	r3, [r4, #0]
   da5a4:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   da5a6:	2401      	movs	r4, #1
}
   da5a8:	4620      	mov	r0, r4
   da5aa:	b00a      	add	sp, #40	; 0x28
   da5ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da5b0 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   da5b0:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   da5b2:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   da5b4:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   da5b6:	6818      	ldr	r0, [r3, #0]
   da5b8:	2800      	cmp	r0, #0
   da5ba:	db01      	blt.n	da5c0 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   da5bc:	f7fe fa82 	bl	d8ac4 <sock_close>
   da5c0:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   da5c2:	f04f 32ff 	mov.w	r2, #4294967295
   da5c6:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   da5c8:	6960      	ldr	r0, [r4, #20]
   da5ca:	2211      	movs	r2, #17
   da5cc:	2100      	movs	r1, #0
   da5ce:	308c      	adds	r0, #140	; 0x8c
   da5d0:	f001 fa32 	bl	dba38 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   da5d4:	4620      	mov	r0, r4
}
   da5d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   da5da:	f7ff bf67 	b.w	da4ac <_ZN9TCPClient12flush_bufferEv>
	...

000da5e0 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   da5e0:	b530      	push	{r4, r5, lr}
   da5e2:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   da5e4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   da5e8:	b08b      	sub	sp, #44	; 0x2c
   da5ea:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   da5ec:	b11b      	cbz	r3, da5f6 <_ZN9TCPClient9availableEv+0x16>
   da5ee:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   da5f2:	429a      	cmp	r2, r3
   da5f4:	d040      	beq.n	da678 <_ZN9TCPClient9availableEv+0x98>
   da5f6:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   da5f8:	6818      	ldr	r0, [r3, #0]
   da5fa:	2800      	cmp	r0, #0
   da5fc:	db3f      	blt.n	da67e <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   da5fe:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   da602:	2d7f      	cmp	r5, #127	; 0x7f
   da604:	d83b      	bhi.n	da67e <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   da606:	1d19      	adds	r1, r3, #4
   da608:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   da60c:	2308      	movs	r3, #8
   da60e:	4429      	add	r1, r5
   da610:	f7fe fa68 	bl	d8ae4 <sock_recv>
            if (ret > 0) {
   da614:	2800      	cmp	r0, #0
   da616:	dd0c      	ble.n	da632 <_ZN9TCPClient9availableEv+0x52>
   da618:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   da61a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da61e:	b90a      	cbnz	r2, da624 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   da620:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   da624:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   da626:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   da62a:	4418      	add	r0, r3
   da62c:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   da630:	e025      	b.n	da67e <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   da632:	f7fe fbbb 	bl	d8dac <__errno>
   da636:	6803      	ldr	r3, [r0, #0]
   da638:	2b0b      	cmp	r3, #11
   da63a:	d020      	beq.n	da67e <_ZN9TCPClient9availableEv+0x9e>
   da63c:	f7fe fbb6 	bl	d8dac <__errno>
   da640:	6803      	ldr	r3, [r0, #0]
   da642:	2b0b      	cmp	r3, #11
   da644:	d01b      	beq.n	da67e <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   da646:	2320      	movs	r3, #32
   da648:	2500      	movs	r5, #0
   da64a:	9302      	str	r3, [sp, #8]
   da64c:	9503      	str	r5, [sp, #12]
   da64e:	f7fe fbad 	bl	d8dac <__errno>
   da652:	6803      	ldr	r3, [r0, #0]
   da654:	9301      	str	r3, [sp, #4]
   da656:	4b0e      	ldr	r3, [pc, #56]	; (da690 <_ZN9TCPClient9availableEv+0xb0>)
   da658:	9300      	str	r3, [sp, #0]
   da65a:	aa02      	add	r2, sp, #8
   da65c:	462b      	mov	r3, r5
   da65e:	490d      	ldr	r1, [pc, #52]	; (da694 <_ZN9TCPClient9availableEv+0xb4>)
   da660:	2032      	movs	r0, #50	; 0x32
   da662:	f7fe fa8f 	bl	d8b84 <log_message>
                    sock_close(d_->sock);
   da666:	6963      	ldr	r3, [r4, #20]
   da668:	6818      	ldr	r0, [r3, #0]
   da66a:	f7fe fa2b 	bl	d8ac4 <sock_close>
   da66e:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   da670:	f04f 32ff 	mov.w	r2, #4294967295
   da674:	601a      	str	r2, [r3, #0]
   da676:	e002      	b.n	da67e <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   da678:	f7ff ff18 	bl	da4ac <_ZN9TCPClient12flush_bufferEv>
   da67c:	e7bb      	b.n	da5f6 <_ZN9TCPClient9availableEv+0x16>
   da67e:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   da680:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   da684:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   da688:	1a18      	subs	r0, r3, r0
}
   da68a:	b00b      	add	sp, #44	; 0x2c
   da68c:	bd30      	pop	{r4, r5, pc}
   da68e:	bf00      	nop
   da690:	000dd3cb 	.word	0x000dd3cb
   da694:	000dd3c4 	.word	0x000dd3c4

000da698 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   da698:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   da69a:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   da69c:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   da69e:	6001      	str	r1, [r0, #0]
   da6a0:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   da6a4:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   da6a8:	3088      	adds	r0, #136	; 0x88
   da6aa:	f7ff fa4b 	bl	d9b44 <_ZN9IPAddressC1Ev>
}
   da6ae:	4620      	mov	r0, r4
   da6b0:	bd10      	pop	{r4, pc}
	...

000da6b4 <_ZN9TCPClientC1Ei>:
   da6b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   da6b8:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   da6ba:	2300      	movs	r3, #0
   da6bc:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   da6be:	4a14      	ldr	r2, [pc, #80]	; (da710 <_ZN9TCPClientC1Ei+0x5c>)
   da6c0:	6043      	str	r3, [r0, #4]
   da6c2:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   da6c4:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   da6c6:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   da6c8:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   da6ca:	20a0      	movs	r0, #160	; 0xa0
   da6cc:	460e      	mov	r6, r1
   da6ce:	f7f9 fce4 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   da6d2:	4605      	mov	r5, r0
   da6d4:	b110      	cbz	r0, da6dc <_ZN9TCPClientC1Ei+0x28>
   da6d6:	4631      	mov	r1, r6
   da6d8:	f7ff ffde 	bl	da698 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   da6dc:	2014      	movs	r0, #20
   da6de:	f7f9 fcdc 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   da6e2:	4603      	mov	r3, r0
   da6e4:	b128      	cbz	r0, da6f2 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   da6e6:	2201      	movs	r2, #1
   da6e8:	6042      	str	r2, [r0, #4]
   da6ea:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   da6ec:	4a09      	ldr	r2, [pc, #36]	; (da714 <_ZN9TCPClientC1Ei+0x60>)
   da6ee:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   da6f0:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   da6f2:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   da6f4:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   da6f6:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   da6f8:	b128      	cbz	r0, da706 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   da6fa:	6843      	ldr	r3, [r0, #4]
   da6fc:	3b01      	subs	r3, #1
   da6fe:	6043      	str	r3, [r0, #4]
   da700:	b90b      	cbnz	r3, da706 <_ZN9TCPClientC1Ei+0x52>
   da702:	f7ff fddf 	bl	da2c4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   da706:	4620      	mov	r0, r4
   da708:	f7ff fed0 	bl	da4ac <_ZN9TCPClient12flush_bufferEv>
}
   da70c:	4620      	mov	r0, r4
   da70e:	bd70      	pop	{r4, r5, r6, pc}
   da710:	000dd380 	.word	0x000dd380
   da714:	000dd364 	.word	0x000dd364

000da718 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   da718:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   da71a:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   da71e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   da720:	f7ff ffc8 	bl	da6b4 <_ZN9TCPClientC1Ei>
}
   da724:	4620      	mov	r0, r4
   da726:	bd10      	pop	{r4, pc}

000da728 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   da728:	b510      	push	{r4, lr}
   da72a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   da72c:	6800      	ldr	r0, [r0, #0]
   da72e:	2800      	cmp	r0, #0
   da730:	db01      	blt.n	da736 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   da732:	f7fe f9c7 	bl	d8ac4 <sock_close>
    }
}
   da736:	4620      	mov	r0, r4
   da738:	bd10      	pop	{r4, pc}

000da73a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   da73a:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   da73c:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   da73e:	4620      	mov	r0, r4
   da740:	f7ff fff2 	bl	da728 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   da744:	b124      	cbz	r4, da750 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   da746:	4620      	mov	r0, r4
   da748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   da74c:	f7f9 bca9 	b.w	d40a2 <_ZdlPv>
   da750:	bd10      	pop	{r4, pc}

000da752 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   da752:	2300      	movs	r3, #0
   da754:	461a      	mov	r2, r3
   da756:	6840      	ldr	r0, [r0, #4]
   da758:	f7fe ba58 	b.w	d8c0c <network_connect>

000da75c <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   da75c:	2200      	movs	r2, #0
   da75e:	2102      	movs	r1, #2
   da760:	6840      	ldr	r0, [r0, #4]
   da762:	f7fe ba63 	b.w	d8c2c <network_disconnect>

000da766 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   da766:	2200      	movs	r2, #0
   da768:	4611      	mov	r1, r2
   da76a:	6840      	ldr	r0, [r0, #4]
   da76c:	f7fe ba56 	b.w	d8c1c <network_connecting>

000da770 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   da770:	2200      	movs	r2, #0
   da772:	4611      	mov	r1, r2
   da774:	6840      	ldr	r0, [r0, #4]
   da776:	f7fe ba61 	b.w	d8c3c <network_ready>

000da77a <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   da77a:	2300      	movs	r3, #0
   da77c:	461a      	mov	r2, r3
   da77e:	4619      	mov	r1, r3
   da780:	6840      	ldr	r0, [r0, #4]
   da782:	f7fe ba63 	b.w	d8c4c <network_on>

000da786 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   da786:	2300      	movs	r3, #0
   da788:	461a      	mov	r2, r3
   da78a:	4619      	mov	r1, r3
   da78c:	6840      	ldr	r0, [r0, #4]
   da78e:	f7fe ba65 	b.w	d8c5c <network_off>

000da792 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   da792:	2200      	movs	r2, #0
   da794:	f081 0101 	eor.w	r1, r1, #1
   da798:	6840      	ldr	r0, [r0, #4]
   da79a:	f7fe ba67 	b.w	d8c6c <network_listen>

000da79e <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   da79e:	2200      	movs	r2, #0
   da7a0:	6840      	ldr	r0, [r0, #4]
   da7a2:	f7fe ba73 	b.w	d8c8c <network_set_listen_timeout>

000da7a6 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   da7a6:	2200      	movs	r2, #0
   da7a8:	4611      	mov	r1, r2
   da7aa:	6840      	ldr	r0, [r0, #4]
   da7ac:	f7fe ba76 	b.w	d8c9c <network_get_listen_timeout>

000da7b0 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   da7b0:	2200      	movs	r2, #0
   da7b2:	4611      	mov	r1, r2
   da7b4:	6840      	ldr	r0, [r0, #4]
   da7b6:	f7fe ba61 	b.w	d8c7c <network_listening>

000da7ba <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   da7ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   da7be:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   da7c0:	b095      	sub	sp, #84	; 0x54
   da7c2:	4616      	mov	r6, r2
   da7c4:	460d      	mov	r5, r1
   da7c6:	4607      	mov	r7, r0
    IPAddress addr;
   da7c8:	f7ff f9bc 	bl	d9b44 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   da7cc:	4621      	mov	r1, r4
   da7ce:	2220      	movs	r2, #32
   da7d0:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   da7d2:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   da7d4:	f001 f930 	bl	dba38 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   da7d8:	2340      	movs	r3, #64	; 0x40
   da7da:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   da7dc:	4621      	mov	r1, r4
   da7de:	466b      	mov	r3, sp
   da7e0:	aa0c      	add	r2, sp, #48	; 0x30
   da7e2:	4630      	mov	r0, r6
   da7e4:	f7fd ff4e 	bl	d8684 <netdb_getaddrinfo>
    if (!r) {
   da7e8:	4604      	mov	r4, r0
   da7ea:	2800      	cmp	r0, #0
   da7ec:	d144      	bne.n	da878 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   da7ee:	4602      	mov	r2, r0
   da7f0:	2101      	movs	r1, #1
   da7f2:	6868      	ldr	r0, [r5, #4]
   da7f4:	f7fe fa22 	bl	d8c3c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da7f8:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   da7fa:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da7fc:	4622      	mov	r2, r4
   da7fe:	6868      	ldr	r0, [r5, #4]
   da800:	f7fe fa1c 	bl	d8c3c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da804:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da806:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   da808:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da80a:	2e00      	cmp	r6, #0
   da80c:	d034      	beq.n	da878 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   da80e:	2900      	cmp	r1, #0
   da810:	d132      	bne.n	da878 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   da812:	6873      	ldr	r3, [r6, #4]
   da814:	2b02      	cmp	r3, #2
   da816:	d002      	beq.n	da81e <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   da818:	2b0a      	cmp	r3, #10
   da81a:	d009      	beq.n	da830 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   da81c:	e02a      	b.n	da874 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   da81e:	f1b8 0f00 	cmp.w	r8, #0
   da822:	d027      	beq.n	da874 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   da824:	6971      	ldr	r1, [r6, #20]
   da826:	4638      	mov	r0, r7
   da828:	3104      	adds	r1, #4
   da82a:	f7ff f9ce 	bl	d9bca <_ZN9IPAddressaSEPKh>
   da82e:	e020      	b.n	da872 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   da830:	f1b9 0f00 	cmp.w	r9, #0
   da834:	d01e      	beq.n	da874 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   da836:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   da838:	2211      	movs	r2, #17
   da83a:	a801      	add	r0, sp, #4
   da83c:	f001 f8fc 	bl	dba38 <memset>
                    a.v = 6;
   da840:	2306      	movs	r3, #6
   da842:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   da846:	ad01      	add	r5, sp, #4
   da848:	f104 0308 	add.w	r3, r4, #8
   da84c:	3418      	adds	r4, #24
   da84e:	6818      	ldr	r0, [r3, #0]
   da850:	6859      	ldr	r1, [r3, #4]
   da852:	462a      	mov	r2, r5
   da854:	c203      	stmia	r2!, {r0, r1}
   da856:	3308      	adds	r3, #8
   da858:	42a3      	cmp	r3, r4
   da85a:	4615      	mov	r5, r2
   da85c:	d1f7      	bne.n	da84e <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   da85e:	a901      	add	r1, sp, #4
   da860:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   da862:	ad07      	add	r5, sp, #28
   da864:	f7ff f97c 	bl	d9b60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   da868:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da86a:	1d3c      	adds	r4, r7, #4
   da86c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da86e:	682b      	ldr	r3, [r5, #0]
   da870:	7023      	strb	r3, [r4, #0]
                    ok = true;
   da872:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da874:	69f6      	ldr	r6, [r6, #28]
   da876:	e7c8      	b.n	da80a <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   da878:	9800      	ldr	r0, [sp, #0]
   da87a:	f7fd fefb 	bl	d8674 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   da87e:	4638      	mov	r0, r7
   da880:	b015      	add	sp, #84	; 0x54
   da882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000da888 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   da888:	4b02      	ldr	r3, [pc, #8]	; (da894 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   da88a:	4a03      	ldr	r2, [pc, #12]	; (da898 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   da88c:	601a      	str	r2, [r3, #0]
   da88e:	2200      	movs	r2, #0
   da890:	605a      	str	r2, [r3, #4]
   da892:	4770      	bx	lr
   da894:	2003e3bc 	.word	0x2003e3bc
   da898:	000dd3e4 	.word	0x000dd3e4

000da89c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   da89c:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   da89e:	4e18      	ldr	r6, [pc, #96]	; (da900 <pinAvailable+0x64>)
   da8a0:	6831      	ldr	r1, [r6, #0]
   da8a2:	f011 0501 	ands.w	r5, r1, #1
   da8a6:	4604      	mov	r4, r0
   da8a8:	d10a      	bne.n	da8c0 <pinAvailable+0x24>
   da8aa:	4630      	mov	r0, r6
   da8ac:	f7f9 fbfd 	bl	d40aa <__cxa_guard_acquire>
   da8b0:	b130      	cbz	r0, da8c0 <pinAvailable+0x24>
   da8b2:	4629      	mov	r1, r5
   da8b4:	4813      	ldr	r0, [pc, #76]	; (da904 <pinAvailable+0x68>)
   da8b6:	f7fe fac5 	bl	d8e44 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   da8ba:	4630      	mov	r0, r6
   da8bc:	f7f9 fbfa 	bl	d40b4 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   da8c0:	4810      	ldr	r0, [pc, #64]	; (da904 <pinAvailable+0x68>)
   da8c2:	f7fe fbf4 	bl	d90ae <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   da8c6:	b128      	cbz	r0, da8d4 <pinAvailable+0x38>
   da8c8:	f1a4 030b 	sub.w	r3, r4, #11
   da8cc:	2b02      	cmp	r3, #2
   da8ce:	d801      	bhi.n	da8d4 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   da8d0:	2000      	movs	r0, #0
   da8d2:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   da8d4:	f000 f89e 	bl	daa14 <_Z19__fetch_global_Wirev>
   da8d8:	f7ff fba1 	bl	da01e <_ZN7TwoWire9isEnabledEv>
   da8dc:	b108      	cbz	r0, da8e2 <pinAvailable+0x46>
   da8de:	2c01      	cmp	r4, #1
   da8e0:	d9f6      	bls.n	da8d0 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   da8e2:	f7ff faff 	bl	d9ee4 <_Z22__fetch_global_Serial1v>
   da8e6:	f7ff faf9 	bl	d9edc <_ZN11USARTSerial9isEnabledEv>
   da8ea:	b118      	cbz	r0, da8f4 <pinAvailable+0x58>
   da8ec:	f1a4 0309 	sub.w	r3, r4, #9
   da8f0:	2b01      	cmp	r3, #1
   da8f2:	d9ed      	bls.n	da8d0 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   da8f4:	2c23      	cmp	r4, #35	; 0x23
   da8f6:	bf8c      	ite	hi
   da8f8:	2000      	movhi	r0, #0
   da8fa:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   da8fc:	bd70      	pop	{r4, r5, r6, pc}
   da8fe:	bf00      	nop
   da900:	2003d9e0 	.word	0x2003d9e0
   da904:	2003d9e4 	.word	0x2003d9e4

000da908 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da908:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   da90a:	b538      	push	{r3, r4, r5, lr}
   da90c:	4604      	mov	r4, r0
   da90e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da910:	d80a      	bhi.n	da928 <pinMode+0x20>
   da912:	29ff      	cmp	r1, #255	; 0xff
   da914:	d008      	beq.n	da928 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   da916:	f7ff ffc1 	bl	da89c <pinAvailable>
   da91a:	b128      	cbz	r0, da928 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   da91c:	4629      	mov	r1, r5
   da91e:	4620      	mov	r0, r4
}
   da920:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   da924:	f7fd bebe 	b.w	d86a4 <HAL_Pin_Mode>
   da928:	bd38      	pop	{r3, r4, r5, pc}

000da92a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   da92a:	b538      	push	{r3, r4, r5, lr}
   da92c:	4604      	mov	r4, r0
   da92e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da930:	f7fd fec0 	bl	d86b4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   da934:	28ff      	cmp	r0, #255	; 0xff
   da936:	d010      	beq.n	da95a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   da938:	2806      	cmp	r0, #6
   da93a:	d804      	bhi.n	da946 <digitalWrite+0x1c>
   da93c:	234d      	movs	r3, #77	; 0x4d
   da93e:	fa23 f000 	lsr.w	r0, r3, r0
   da942:	07c3      	lsls	r3, r0, #31
   da944:	d409      	bmi.n	da95a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   da946:	4620      	mov	r0, r4
   da948:	f7ff ffa8 	bl	da89c <pinAvailable>
   da94c:	b128      	cbz	r0, da95a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   da94e:	4629      	mov	r1, r5
   da950:	4620      	mov	r0, r4
}
   da952:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   da956:	f7fd beb5 	b.w	d86c4 <HAL_GPIO_Write>
   da95a:	bd38      	pop	{r3, r4, r5, pc}

000da95c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   da95c:	b510      	push	{r4, lr}
   da95e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da960:	f7fd fea8 	bl	d86b4 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   da964:	3804      	subs	r0, #4
   da966:	b2c0      	uxtb	r0, r0
   da968:	2801      	cmp	r0, #1
   da96a:	d908      	bls.n	da97e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   da96c:	4620      	mov	r0, r4
   da96e:	f7ff ff95 	bl	da89c <pinAvailable>
   da972:	b120      	cbz	r0, da97e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   da974:	4620      	mov	r0, r4
}
   da976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   da97a:	f7fd beab 	b.w	d86d4 <HAL_GPIO_Read>
}
   da97e:	2000      	movs	r0, #0
   da980:	bd10      	pop	{r4, pc}
	...

000da984 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   da984:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   da986:	4c07      	ldr	r4, [pc, #28]	; (da9a4 <_Z21__fetch_global_EEPROMv+0x20>)
   da988:	6823      	ldr	r3, [r4, #0]
   da98a:	07db      	lsls	r3, r3, #31
   da98c:	d408      	bmi.n	da9a0 <_Z21__fetch_global_EEPROMv+0x1c>
   da98e:	4620      	mov	r0, r4
   da990:	f7f9 fb8b 	bl	d40aa <__cxa_guard_acquire>
   da994:	b120      	cbz	r0, da9a0 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   da996:	f7fd ff55 	bl	d8844 <HAL_EEPROM_Init>
   da99a:	4620      	mov	r0, r4
   da99c:	f7f9 fb8a 	bl	d40b4 <__cxa_guard_release>
	return eeprom;
}
   da9a0:	4801      	ldr	r0, [pc, #4]	; (da9a8 <_Z21__fetch_global_EEPROMv+0x24>)
   da9a2:	bd10      	pop	{r4, pc}
   da9a4:	2003e3c8 	.word	0x2003e3c8
   da9a8:	2003e3cc 	.word	0x2003e3cc

000da9ac <_Z17acquireWireBufferv>:
   da9ac:	b570      	push	{r4, r5, r6, lr}
   da9ae:	4604      	mov	r4, r0
   da9b0:	2514      	movs	r5, #20
   da9b2:	462a      	mov	r2, r5
   da9b4:	4e09      	ldr	r6, [pc, #36]	; (da9dc <_Z17acquireWireBufferv+0x30>)
   da9b6:	2100      	movs	r1, #0
   da9b8:	f001 f83e 	bl	dba38 <memset>
   da9bc:	8025      	strh	r5, [r4, #0]
   da9be:	2520      	movs	r5, #32
   da9c0:	4631      	mov	r1, r6
   da9c2:	60a5      	str	r5, [r4, #8]
   da9c4:	6125      	str	r5, [r4, #16]
   da9c6:	4628      	mov	r0, r5
   da9c8:	f000 f880 	bl	daacc <_ZnajRKSt9nothrow_t>
   da9cc:	4631      	mov	r1, r6
   da9ce:	6060      	str	r0, [r4, #4]
   da9d0:	4628      	mov	r0, r5
   da9d2:	f000 f87b 	bl	daacc <_ZnajRKSt9nothrow_t>
   da9d6:	60e0      	str	r0, [r4, #12]
   da9d8:	4620      	mov	r0, r4
   da9da:	bd70      	pop	{r4, r5, r6, pc}
   da9dc:	000dd410 	.word	0x000dd410

000da9e0 <_Z18acquireWire1Bufferv>:
	return defaultWireConfig();
}

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
   da9e0:	b570      	push	{r4, r5, r6, lr}
   da9e2:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   da9e4:	2514      	movs	r5, #20
   da9e6:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da9e8:	4e09      	ldr	r6, [pc, #36]	; (daa10 <_Z18acquireWire1Bufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   da9ea:	2100      	movs	r1, #0
   da9ec:	f001 f824 	bl	dba38 <memset>
   da9f0:	8025      	strh	r5, [r4, #0]
   da9f2:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da9f4:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   da9f6:	60a5      	str	r5, [r4, #8]
   da9f8:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da9fa:	4628      	mov	r0, r5
   da9fc:	f000 f866 	bl	daacc <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   daa00:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   daa02:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   daa04:	4628      	mov	r0, r5
   daa06:	f000 f861 	bl	daacc <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   daa0a:	60e0      	str	r0, [r4, #12]

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
	return defaultWireConfig();
}
   daa0c:	4620      	mov	r0, r4
   daa0e:	bd70      	pop	{r4, r5, r6, pc}
   daa10:	000dd410 	.word	0x000dd410

000daa14 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   daa14:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   daa16:	4d0e      	ldr	r5, [pc, #56]	; (daa50 <_Z19__fetch_global_Wirev+0x3c>)
   daa18:	6829      	ldr	r1, [r5, #0]
   daa1a:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   daa1e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   daa20:	d113      	bne.n	daa4a <_Z19__fetch_global_Wirev+0x36>
   daa22:	4628      	mov	r0, r5
   daa24:	f7f9 fb41 	bl	d40aa <__cxa_guard_acquire>
   daa28:	b178      	cbz	r0, daa4a <_Z19__fetch_global_Wirev+0x36>
   daa2a:	a801      	add	r0, sp, #4
   daa2c:	f7ff ffbe 	bl	da9ac <_Z17acquireWireBufferv>
   daa30:	aa01      	add	r2, sp, #4
   daa32:	4621      	mov	r1, r4
   daa34:	4807      	ldr	r0, [pc, #28]	; (daa54 <_Z19__fetch_global_Wirev+0x40>)
   daa36:	f7ff faa7 	bl	d9f88 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   daa3a:	4628      	mov	r0, r5
   daa3c:	f7f9 fb3a 	bl	d40b4 <__cxa_guard_release>
   daa40:	4a05      	ldr	r2, [pc, #20]	; (daa58 <_Z19__fetch_global_Wirev+0x44>)
   daa42:	4906      	ldr	r1, [pc, #24]	; (daa5c <_Z19__fetch_global_Wirev+0x48>)
   daa44:	4803      	ldr	r0, [pc, #12]	; (daa54 <_Z19__fetch_global_Wirev+0x40>)
   daa46:	f000 f831 	bl	daaac <__aeabi_atexit>
	return wire;
}
   daa4a:	4802      	ldr	r0, [pc, #8]	; (daa54 <_Z19__fetch_global_Wirev+0x40>)
   daa4c:	b007      	add	sp, #28
   daa4e:	bd30      	pop	{r4, r5, pc}
   daa50:	2003e3d0 	.word	0x2003e3d0
   daa54:	2003e3e8 	.word	0x2003e3e8
   daa58:	2003d8e0 	.word	0x2003d8e0
   daa5c:	000d9f31 	.word	0x000d9f31

000daa60 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   daa60:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   daa62:	4c0e      	ldr	r4, [pc, #56]	; (daa9c <_Z20__fetch_global_Wire1v+0x3c>)
   daa64:	6823      	ldr	r3, [r4, #0]
   daa66:	07db      	lsls	r3, r3, #31
	return wire;
}

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   daa68:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   daa6a:	d413      	bmi.n	daa94 <_Z20__fetch_global_Wire1v+0x34>
   daa6c:	4620      	mov	r0, r4
   daa6e:	f7f9 fb1c 	bl	d40aa <__cxa_guard_acquire>
   daa72:	b178      	cbz	r0, daa94 <_Z20__fetch_global_Wire1v+0x34>
   daa74:	a801      	add	r0, sp, #4
   daa76:	f7ff ffb3 	bl	da9e0 <_Z18acquireWire1Bufferv>
   daa7a:	aa01      	add	r2, sp, #4
   daa7c:	2101      	movs	r1, #1
   daa7e:	4808      	ldr	r0, [pc, #32]	; (daaa0 <_Z20__fetch_global_Wire1v+0x40>)
   daa80:	f7ff fa82 	bl	d9f88 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   daa84:	4620      	mov	r0, r4
   daa86:	f7f9 fb15 	bl	d40b4 <__cxa_guard_release>
   daa8a:	4a06      	ldr	r2, [pc, #24]	; (daaa4 <_Z20__fetch_global_Wire1v+0x44>)
   daa8c:	4906      	ldr	r1, [pc, #24]	; (daaa8 <_Z20__fetch_global_Wire1v+0x48>)
   daa8e:	4804      	ldr	r0, [pc, #16]	; (daaa0 <_Z20__fetch_global_Wire1v+0x40>)
   daa90:	f000 f80c 	bl	daaac <__aeabi_atexit>
	return wire;
}
   daa94:	4802      	ldr	r0, [pc, #8]	; (daaa0 <_Z20__fetch_global_Wire1v+0x40>)
   daa96:	b006      	add	sp, #24
   daa98:	bd10      	pop	{r4, pc}
   daa9a:	bf00      	nop
   daa9c:	2003e3fc 	.word	0x2003e3fc
   daaa0:	2003e3d4 	.word	0x2003e3d4
   daaa4:	2003d8e0 	.word	0x2003d8e0
   daaa8:	000d9f31 	.word	0x000d9f31

000daaac <__aeabi_atexit>:
   daaac:	460b      	mov	r3, r1
   daaae:	4601      	mov	r1, r0
   daab0:	4618      	mov	r0, r3
   daab2:	f000 bea1 	b.w	db7f8 <__cxa_atexit>
	...

000daab8 <_ZSt15get_new_handlerv>:
   daab8:	4b02      	ldr	r3, [pc, #8]	; (daac4 <_ZSt15get_new_handlerv+0xc>)
   daaba:	6818      	ldr	r0, [r3, #0]
   daabc:	f3bf 8f5f 	dmb	sy
   daac0:	4770      	bx	lr
   daac2:	bf00      	nop
   daac4:	2003e400 	.word	0x2003e400

000daac8 <_ZdlPvj>:
   daac8:	f7f9 baeb 	b.w	d40a2 <_ZdlPv>

000daacc <_ZnajRKSt9nothrow_t>:
   daacc:	f000 b800 	b.w	daad0 <_ZnwjRKSt9nothrow_t>

000daad0 <_ZnwjRKSt9nothrow_t>:
   daad0:	b510      	push	{r4, lr}
   daad2:	2800      	cmp	r0, #0
   daad4:	bf14      	ite	ne
   daad6:	4604      	movne	r4, r0
   daad8:	2401      	moveq	r4, #1
   daada:	4620      	mov	r0, r4
   daadc:	f7fe f916 	bl	d8d0c <malloc>
   daae0:	b920      	cbnz	r0, daaec <_ZnwjRKSt9nothrow_t+0x1c>
   daae2:	f7ff ffe9 	bl	daab8 <_ZSt15get_new_handlerv>
   daae6:	b108      	cbz	r0, daaec <_ZnwjRKSt9nothrow_t+0x1c>
   daae8:	4780      	blx	r0
   daaea:	e7f6      	b.n	daada <_ZnwjRKSt9nothrow_t+0xa>
   daaec:	bd10      	pop	{r4, pc}
	...

000daaf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   daaf0:	4b18      	ldr	r3, [pc, #96]	; (dab54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   daaf2:	681a      	ldr	r2, [r3, #0]
   daaf4:	07d1      	lsls	r1, r2, #31
   daaf6:	bf5c      	itt	pl
   daaf8:	2201      	movpl	r2, #1
   daafa:	601a      	strpl	r2, [r3, #0]
   daafc:	4b16      	ldr	r3, [pc, #88]	; (dab58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   daafe:	681a      	ldr	r2, [r3, #0]
   dab00:	07d2      	lsls	r2, r2, #31
   dab02:	bf5c      	itt	pl
   dab04:	2201      	movpl	r2, #1
   dab06:	601a      	strpl	r2, [r3, #0]
   dab08:	4b14      	ldr	r3, [pc, #80]	; (dab5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   dab0a:	681a      	ldr	r2, [r3, #0]
   dab0c:	07d0      	lsls	r0, r2, #31
   dab0e:	bf5c      	itt	pl
   dab10:	2201      	movpl	r2, #1
   dab12:	601a      	strpl	r2, [r3, #0]
   dab14:	4b12      	ldr	r3, [pc, #72]	; (dab60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   dab16:	681a      	ldr	r2, [r3, #0]
   dab18:	07d1      	lsls	r1, r2, #31
   dab1a:	bf5c      	itt	pl
   dab1c:	2201      	movpl	r2, #1
   dab1e:	601a      	strpl	r2, [r3, #0]
   dab20:	4b10      	ldr	r3, [pc, #64]	; (dab64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   dab22:	681a      	ldr	r2, [r3, #0]
   dab24:	07d2      	lsls	r2, r2, #31
   dab26:	bf5c      	itt	pl
   dab28:	2201      	movpl	r2, #1
   dab2a:	601a      	strpl	r2, [r3, #0]
   dab2c:	4b0e      	ldr	r3, [pc, #56]	; (dab68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   dab2e:	681a      	ldr	r2, [r3, #0]
   dab30:	07d0      	lsls	r0, r2, #31
   dab32:	bf5c      	itt	pl
   dab34:	2201      	movpl	r2, #1
   dab36:	601a      	strpl	r2, [r3, #0]
   dab38:	4b0c      	ldr	r3, [pc, #48]	; (dab6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   dab3a:	681a      	ldr	r2, [r3, #0]
   dab3c:	07d1      	lsls	r1, r2, #31
   dab3e:	bf5c      	itt	pl
   dab40:	2201      	movpl	r2, #1
   dab42:	601a      	strpl	r2, [r3, #0]
   dab44:	4b0a      	ldr	r3, [pc, #40]	; (dab70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   dab46:	681a      	ldr	r2, [r3, #0]
   dab48:	07d2      	lsls	r2, r2, #31
   dab4a:	bf5c      	itt	pl
   dab4c:	2201      	movpl	r2, #1
   dab4e:	601a      	strpl	r2, [r3, #0]
   dab50:	4770      	bx	lr
   dab52:	bf00      	nop
   dab54:	2003e420 	.word	0x2003e420
   dab58:	2003e41c 	.word	0x2003e41c
   dab5c:	2003e418 	.word	0x2003e418
   dab60:	2003e414 	.word	0x2003e414
   dab64:	2003e410 	.word	0x2003e410
   dab68:	2003e40c 	.word	0x2003e40c
   dab6c:	2003e408 	.word	0x2003e408
   dab70:	2003e404 	.word	0x2003e404

000dab74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   dab74:	4b24      	ldr	r3, [pc, #144]	; (dac08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   dab76:	681a      	ldr	r2, [r3, #0]
   dab78:	07d0      	lsls	r0, r2, #31
   dab7a:	bf5c      	itt	pl
   dab7c:	2201      	movpl	r2, #1
   dab7e:	601a      	strpl	r2, [r3, #0]
   dab80:	4b22      	ldr	r3, [pc, #136]	; (dac0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   dab82:	681a      	ldr	r2, [r3, #0]
   dab84:	07d1      	lsls	r1, r2, #31
   dab86:	bf5c      	itt	pl
   dab88:	2201      	movpl	r2, #1
   dab8a:	601a      	strpl	r2, [r3, #0]
   dab8c:	4b20      	ldr	r3, [pc, #128]	; (dac10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   dab8e:	681a      	ldr	r2, [r3, #0]
   dab90:	07d2      	lsls	r2, r2, #31
   dab92:	bf5c      	itt	pl
   dab94:	2201      	movpl	r2, #1
   dab96:	601a      	strpl	r2, [r3, #0]
   dab98:	4b1e      	ldr	r3, [pc, #120]	; (dac14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   dab9a:	681a      	ldr	r2, [r3, #0]
   dab9c:	07d0      	lsls	r0, r2, #31
   dab9e:	bf5c      	itt	pl
   daba0:	2201      	movpl	r2, #1
   daba2:	601a      	strpl	r2, [r3, #0]
   daba4:	4b1c      	ldr	r3, [pc, #112]	; (dac18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   daba6:	681a      	ldr	r2, [r3, #0]
   daba8:	07d1      	lsls	r1, r2, #31
   dabaa:	bf5c      	itt	pl
   dabac:	2201      	movpl	r2, #1
   dabae:	601a      	strpl	r2, [r3, #0]
   dabb0:	4b1a      	ldr	r3, [pc, #104]	; (dac1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   dabb2:	681a      	ldr	r2, [r3, #0]
   dabb4:	07d2      	lsls	r2, r2, #31
   dabb6:	bf5c      	itt	pl
   dabb8:	2201      	movpl	r2, #1
   dabba:	601a      	strpl	r2, [r3, #0]
   dabbc:	4b18      	ldr	r3, [pc, #96]	; (dac20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   dabbe:	681a      	ldr	r2, [r3, #0]
   dabc0:	07d0      	lsls	r0, r2, #31
   dabc2:	bf5c      	itt	pl
   dabc4:	2201      	movpl	r2, #1
   dabc6:	601a      	strpl	r2, [r3, #0]
   dabc8:	4b16      	ldr	r3, [pc, #88]	; (dac24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   dabca:	681a      	ldr	r2, [r3, #0]
   dabcc:	07d1      	lsls	r1, r2, #31
   dabce:	bf5c      	itt	pl
   dabd0:	2201      	movpl	r2, #1
   dabd2:	601a      	strpl	r2, [r3, #0]
   dabd4:	4b14      	ldr	r3, [pc, #80]	; (dac28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   dabd6:	681a      	ldr	r2, [r3, #0]
   dabd8:	07d2      	lsls	r2, r2, #31
   dabda:	bf5c      	itt	pl
   dabdc:	2201      	movpl	r2, #1
   dabde:	601a      	strpl	r2, [r3, #0]
   dabe0:	4b12      	ldr	r3, [pc, #72]	; (dac2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   dabe2:	681a      	ldr	r2, [r3, #0]
   dabe4:	07d0      	lsls	r0, r2, #31
   dabe6:	bf5c      	itt	pl
   dabe8:	2201      	movpl	r2, #1
   dabea:	601a      	strpl	r2, [r3, #0]
   dabec:	4b10      	ldr	r3, [pc, #64]	; (dac30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   dabee:	681a      	ldr	r2, [r3, #0]
   dabf0:	07d1      	lsls	r1, r2, #31
   dabf2:	bf5c      	itt	pl
   dabf4:	2201      	movpl	r2, #1
   dabf6:	601a      	strpl	r2, [r3, #0]
   dabf8:	4b0e      	ldr	r3, [pc, #56]	; (dac34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   dabfa:	681a      	ldr	r2, [r3, #0]
   dabfc:	07d2      	lsls	r2, r2, #31
   dabfe:	bf5c      	itt	pl
   dac00:	2201      	movpl	r2, #1
   dac02:	601a      	strpl	r2, [r3, #0]
   dac04:	4770      	bx	lr
   dac06:	bf00      	nop
   dac08:	2003e450 	.word	0x2003e450
   dac0c:	2003e44c 	.word	0x2003e44c
   dac10:	2003e448 	.word	0x2003e448
   dac14:	2003e444 	.word	0x2003e444
   dac18:	2003e440 	.word	0x2003e440
   dac1c:	2003e43c 	.word	0x2003e43c
   dac20:	2003e438 	.word	0x2003e438
   dac24:	2003e434 	.word	0x2003e434
   dac28:	2003e430 	.word	0x2003e430
   dac2c:	2003e42c 	.word	0x2003e42c
   dac30:	2003e428 	.word	0x2003e428
   dac34:	2003e424 	.word	0x2003e424

000dac38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   dac38:	4b24      	ldr	r3, [pc, #144]	; (daccc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   dac3a:	681a      	ldr	r2, [r3, #0]
   dac3c:	07d0      	lsls	r0, r2, #31
   dac3e:	bf5c      	itt	pl
   dac40:	2201      	movpl	r2, #1
   dac42:	601a      	strpl	r2, [r3, #0]
   dac44:	4b22      	ldr	r3, [pc, #136]	; (dacd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   dac46:	681a      	ldr	r2, [r3, #0]
   dac48:	07d1      	lsls	r1, r2, #31
   dac4a:	bf5c      	itt	pl
   dac4c:	2201      	movpl	r2, #1
   dac4e:	601a      	strpl	r2, [r3, #0]
   dac50:	4b20      	ldr	r3, [pc, #128]	; (dacd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   dac52:	681a      	ldr	r2, [r3, #0]
   dac54:	07d2      	lsls	r2, r2, #31
   dac56:	bf5c      	itt	pl
   dac58:	2201      	movpl	r2, #1
   dac5a:	601a      	strpl	r2, [r3, #0]
   dac5c:	4b1e      	ldr	r3, [pc, #120]	; (dacd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   dac5e:	681a      	ldr	r2, [r3, #0]
   dac60:	07d0      	lsls	r0, r2, #31
   dac62:	bf5c      	itt	pl
   dac64:	2201      	movpl	r2, #1
   dac66:	601a      	strpl	r2, [r3, #0]
   dac68:	4b1c      	ldr	r3, [pc, #112]	; (dacdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   dac6a:	681a      	ldr	r2, [r3, #0]
   dac6c:	07d1      	lsls	r1, r2, #31
   dac6e:	bf5c      	itt	pl
   dac70:	2201      	movpl	r2, #1
   dac72:	601a      	strpl	r2, [r3, #0]
   dac74:	4b1a      	ldr	r3, [pc, #104]	; (dace0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   dac76:	681a      	ldr	r2, [r3, #0]
   dac78:	07d2      	lsls	r2, r2, #31
   dac7a:	bf5c      	itt	pl
   dac7c:	2201      	movpl	r2, #1
   dac7e:	601a      	strpl	r2, [r3, #0]
   dac80:	4b18      	ldr	r3, [pc, #96]	; (dace4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   dac82:	681a      	ldr	r2, [r3, #0]
   dac84:	07d0      	lsls	r0, r2, #31
   dac86:	bf5c      	itt	pl
   dac88:	2201      	movpl	r2, #1
   dac8a:	601a      	strpl	r2, [r3, #0]
   dac8c:	4b16      	ldr	r3, [pc, #88]	; (dace8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   dac8e:	681a      	ldr	r2, [r3, #0]
   dac90:	07d1      	lsls	r1, r2, #31
   dac92:	bf5c      	itt	pl
   dac94:	2201      	movpl	r2, #1
   dac96:	601a      	strpl	r2, [r3, #0]
   dac98:	4b14      	ldr	r3, [pc, #80]	; (dacec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   dac9a:	681a      	ldr	r2, [r3, #0]
   dac9c:	07d2      	lsls	r2, r2, #31
   dac9e:	bf5c      	itt	pl
   daca0:	2201      	movpl	r2, #1
   daca2:	601a      	strpl	r2, [r3, #0]
   daca4:	4b12      	ldr	r3, [pc, #72]	; (dacf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   daca6:	681a      	ldr	r2, [r3, #0]
   daca8:	07d0      	lsls	r0, r2, #31
   dacaa:	bf5c      	itt	pl
   dacac:	2201      	movpl	r2, #1
   dacae:	601a      	strpl	r2, [r3, #0]
   dacb0:	4b10      	ldr	r3, [pc, #64]	; (dacf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   dacb2:	681a      	ldr	r2, [r3, #0]
   dacb4:	07d1      	lsls	r1, r2, #31
   dacb6:	bf5c      	itt	pl
   dacb8:	2201      	movpl	r2, #1
   dacba:	601a      	strpl	r2, [r3, #0]
   dacbc:	4b0e      	ldr	r3, [pc, #56]	; (dacf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   dacbe:	681a      	ldr	r2, [r3, #0]
   dacc0:	07d2      	lsls	r2, r2, #31
   dacc2:	bf5c      	itt	pl
   dacc4:	2201      	movpl	r2, #1
   dacc6:	601a      	strpl	r2, [r3, #0]
   dacc8:	4770      	bx	lr
   dacca:	bf00      	nop
   daccc:	2003e480 	.word	0x2003e480
   dacd0:	2003e47c 	.word	0x2003e47c
   dacd4:	2003e478 	.word	0x2003e478
   dacd8:	2003e474 	.word	0x2003e474
   dacdc:	2003e470 	.word	0x2003e470
   dace0:	2003e46c 	.word	0x2003e46c
   dace4:	2003e468 	.word	0x2003e468
   dace8:	2003e464 	.word	0x2003e464
   dacec:	2003e460 	.word	0x2003e460
   dacf0:	2003e45c 	.word	0x2003e45c
   dacf4:	2003e458 	.word	0x2003e458
   dacf8:	2003e454 	.word	0x2003e454

000dacfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   dacfc:	4b18      	ldr	r3, [pc, #96]	; (dad60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   dacfe:	681a      	ldr	r2, [r3, #0]
   dad00:	07d1      	lsls	r1, r2, #31
   dad02:	bf5c      	itt	pl
   dad04:	2201      	movpl	r2, #1
   dad06:	601a      	strpl	r2, [r3, #0]
   dad08:	4b16      	ldr	r3, [pc, #88]	; (dad64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   dad0a:	681a      	ldr	r2, [r3, #0]
   dad0c:	07d2      	lsls	r2, r2, #31
   dad0e:	bf5c      	itt	pl
   dad10:	2201      	movpl	r2, #1
   dad12:	601a      	strpl	r2, [r3, #0]
   dad14:	4b14      	ldr	r3, [pc, #80]	; (dad68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   dad16:	681a      	ldr	r2, [r3, #0]
   dad18:	07d0      	lsls	r0, r2, #31
   dad1a:	bf5c      	itt	pl
   dad1c:	2201      	movpl	r2, #1
   dad1e:	601a      	strpl	r2, [r3, #0]
   dad20:	4b12      	ldr	r3, [pc, #72]	; (dad6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   dad22:	681a      	ldr	r2, [r3, #0]
   dad24:	07d1      	lsls	r1, r2, #31
   dad26:	bf5c      	itt	pl
   dad28:	2201      	movpl	r2, #1
   dad2a:	601a      	strpl	r2, [r3, #0]
   dad2c:	4b10      	ldr	r3, [pc, #64]	; (dad70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   dad2e:	681a      	ldr	r2, [r3, #0]
   dad30:	07d2      	lsls	r2, r2, #31
   dad32:	bf5c      	itt	pl
   dad34:	2201      	movpl	r2, #1
   dad36:	601a      	strpl	r2, [r3, #0]
   dad38:	4b0e      	ldr	r3, [pc, #56]	; (dad74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   dad3a:	681a      	ldr	r2, [r3, #0]
   dad3c:	07d0      	lsls	r0, r2, #31
   dad3e:	bf5c      	itt	pl
   dad40:	2201      	movpl	r2, #1
   dad42:	601a      	strpl	r2, [r3, #0]
   dad44:	4b0c      	ldr	r3, [pc, #48]	; (dad78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   dad46:	681a      	ldr	r2, [r3, #0]
   dad48:	07d1      	lsls	r1, r2, #31
   dad4a:	bf5c      	itt	pl
   dad4c:	2201      	movpl	r2, #1
   dad4e:	601a      	strpl	r2, [r3, #0]
   dad50:	4b0a      	ldr	r3, [pc, #40]	; (dad7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   dad52:	681a      	ldr	r2, [r3, #0]
   dad54:	07d2      	lsls	r2, r2, #31
   dad56:	bf5c      	itt	pl
   dad58:	2201      	movpl	r2, #1
   dad5a:	601a      	strpl	r2, [r3, #0]
   dad5c:	4770      	bx	lr
   dad5e:	bf00      	nop
   dad60:	2003e4a0 	.word	0x2003e4a0
   dad64:	2003e49c 	.word	0x2003e49c
   dad68:	2003e498 	.word	0x2003e498
   dad6c:	2003e494 	.word	0x2003e494
   dad70:	2003e490 	.word	0x2003e490
   dad74:	2003e48c 	.word	0x2003e48c
   dad78:	2003e488 	.word	0x2003e488
   dad7c:	2003e484 	.word	0x2003e484

000dad80 <__aeabi_drsub>:
   dad80:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   dad84:	e002      	b.n	dad8c <__adddf3>
   dad86:	bf00      	nop

000dad88 <__aeabi_dsub>:
   dad88:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000dad8c <__adddf3>:
   dad8c:	b530      	push	{r4, r5, lr}
   dad8e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   dad92:	ea4f 0543 	mov.w	r5, r3, lsl #1
   dad96:	ea94 0f05 	teq	r4, r5
   dad9a:	bf08      	it	eq
   dad9c:	ea90 0f02 	teqeq	r0, r2
   dada0:	bf1f      	itttt	ne
   dada2:	ea54 0c00 	orrsne.w	ip, r4, r0
   dada6:	ea55 0c02 	orrsne.w	ip, r5, r2
   dadaa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   dadae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dadb2:	f000 80e2 	beq.w	daf7a <__adddf3+0x1ee>
   dadb6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   dadba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   dadbe:	bfb8      	it	lt
   dadc0:	426d      	neglt	r5, r5
   dadc2:	dd0c      	ble.n	dadde <__adddf3+0x52>
   dadc4:	442c      	add	r4, r5
   dadc6:	ea80 0202 	eor.w	r2, r0, r2
   dadca:	ea81 0303 	eor.w	r3, r1, r3
   dadce:	ea82 0000 	eor.w	r0, r2, r0
   dadd2:	ea83 0101 	eor.w	r1, r3, r1
   dadd6:	ea80 0202 	eor.w	r2, r0, r2
   dadda:	ea81 0303 	eor.w	r3, r1, r3
   dadde:	2d36      	cmp	r5, #54	; 0x36
   dade0:	bf88      	it	hi
   dade2:	bd30      	pophi	{r4, r5, pc}
   dade4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dade8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dadec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   dadf0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   dadf4:	d002      	beq.n	dadfc <__adddf3+0x70>
   dadf6:	4240      	negs	r0, r0
   dadf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dadfc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   dae00:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dae04:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   dae08:	d002      	beq.n	dae10 <__adddf3+0x84>
   dae0a:	4252      	negs	r2, r2
   dae0c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dae10:	ea94 0f05 	teq	r4, r5
   dae14:	f000 80a7 	beq.w	daf66 <__adddf3+0x1da>
   dae18:	f1a4 0401 	sub.w	r4, r4, #1
   dae1c:	f1d5 0e20 	rsbs	lr, r5, #32
   dae20:	db0d      	blt.n	dae3e <__adddf3+0xb2>
   dae22:	fa02 fc0e 	lsl.w	ip, r2, lr
   dae26:	fa22 f205 	lsr.w	r2, r2, r5
   dae2a:	1880      	adds	r0, r0, r2
   dae2c:	f141 0100 	adc.w	r1, r1, #0
   dae30:	fa03 f20e 	lsl.w	r2, r3, lr
   dae34:	1880      	adds	r0, r0, r2
   dae36:	fa43 f305 	asr.w	r3, r3, r5
   dae3a:	4159      	adcs	r1, r3
   dae3c:	e00e      	b.n	dae5c <__adddf3+0xd0>
   dae3e:	f1a5 0520 	sub.w	r5, r5, #32
   dae42:	f10e 0e20 	add.w	lr, lr, #32
   dae46:	2a01      	cmp	r2, #1
   dae48:	fa03 fc0e 	lsl.w	ip, r3, lr
   dae4c:	bf28      	it	cs
   dae4e:	f04c 0c02 	orrcs.w	ip, ip, #2
   dae52:	fa43 f305 	asr.w	r3, r3, r5
   dae56:	18c0      	adds	r0, r0, r3
   dae58:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   dae5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dae60:	d507      	bpl.n	dae72 <__adddf3+0xe6>
   dae62:	f04f 0e00 	mov.w	lr, #0
   dae66:	f1dc 0c00 	rsbs	ip, ip, #0
   dae6a:	eb7e 0000 	sbcs.w	r0, lr, r0
   dae6e:	eb6e 0101 	sbc.w	r1, lr, r1
   dae72:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dae76:	d31b      	bcc.n	daeb0 <__adddf3+0x124>
   dae78:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   dae7c:	d30c      	bcc.n	dae98 <__adddf3+0x10c>
   dae7e:	0849      	lsrs	r1, r1, #1
   dae80:	ea5f 0030 	movs.w	r0, r0, rrx
   dae84:	ea4f 0c3c 	mov.w	ip, ip, rrx
   dae88:	f104 0401 	add.w	r4, r4, #1
   dae8c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   dae90:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   dae94:	f080 809a 	bcs.w	dafcc <__adddf3+0x240>
   dae98:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   dae9c:	bf08      	it	eq
   dae9e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   daea2:	f150 0000 	adcs.w	r0, r0, #0
   daea6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   daeaa:	ea41 0105 	orr.w	r1, r1, r5
   daeae:	bd30      	pop	{r4, r5, pc}
   daeb0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   daeb4:	4140      	adcs	r0, r0
   daeb6:	eb41 0101 	adc.w	r1, r1, r1
   daeba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   daebe:	f1a4 0401 	sub.w	r4, r4, #1
   daec2:	d1e9      	bne.n	dae98 <__adddf3+0x10c>
   daec4:	f091 0f00 	teq	r1, #0
   daec8:	bf04      	itt	eq
   daeca:	4601      	moveq	r1, r0
   daecc:	2000      	moveq	r0, #0
   daece:	fab1 f381 	clz	r3, r1
   daed2:	bf08      	it	eq
   daed4:	3320      	addeq	r3, #32
   daed6:	f1a3 030b 	sub.w	r3, r3, #11
   daeda:	f1b3 0220 	subs.w	r2, r3, #32
   daede:	da0c      	bge.n	daefa <__adddf3+0x16e>
   daee0:	320c      	adds	r2, #12
   daee2:	dd08      	ble.n	daef6 <__adddf3+0x16a>
   daee4:	f102 0c14 	add.w	ip, r2, #20
   daee8:	f1c2 020c 	rsb	r2, r2, #12
   daeec:	fa01 f00c 	lsl.w	r0, r1, ip
   daef0:	fa21 f102 	lsr.w	r1, r1, r2
   daef4:	e00c      	b.n	daf10 <__adddf3+0x184>
   daef6:	f102 0214 	add.w	r2, r2, #20
   daefa:	bfd8      	it	le
   daefc:	f1c2 0c20 	rsble	ip, r2, #32
   daf00:	fa01 f102 	lsl.w	r1, r1, r2
   daf04:	fa20 fc0c 	lsr.w	ip, r0, ip
   daf08:	bfdc      	itt	le
   daf0a:	ea41 010c 	orrle.w	r1, r1, ip
   daf0e:	4090      	lslle	r0, r2
   daf10:	1ae4      	subs	r4, r4, r3
   daf12:	bfa2      	ittt	ge
   daf14:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   daf18:	4329      	orrge	r1, r5
   daf1a:	bd30      	popge	{r4, r5, pc}
   daf1c:	ea6f 0404 	mvn.w	r4, r4
   daf20:	3c1f      	subs	r4, #31
   daf22:	da1c      	bge.n	daf5e <__adddf3+0x1d2>
   daf24:	340c      	adds	r4, #12
   daf26:	dc0e      	bgt.n	daf46 <__adddf3+0x1ba>
   daf28:	f104 0414 	add.w	r4, r4, #20
   daf2c:	f1c4 0220 	rsb	r2, r4, #32
   daf30:	fa20 f004 	lsr.w	r0, r0, r4
   daf34:	fa01 f302 	lsl.w	r3, r1, r2
   daf38:	ea40 0003 	orr.w	r0, r0, r3
   daf3c:	fa21 f304 	lsr.w	r3, r1, r4
   daf40:	ea45 0103 	orr.w	r1, r5, r3
   daf44:	bd30      	pop	{r4, r5, pc}
   daf46:	f1c4 040c 	rsb	r4, r4, #12
   daf4a:	f1c4 0220 	rsb	r2, r4, #32
   daf4e:	fa20 f002 	lsr.w	r0, r0, r2
   daf52:	fa01 f304 	lsl.w	r3, r1, r4
   daf56:	ea40 0003 	orr.w	r0, r0, r3
   daf5a:	4629      	mov	r1, r5
   daf5c:	bd30      	pop	{r4, r5, pc}
   daf5e:	fa21 f004 	lsr.w	r0, r1, r4
   daf62:	4629      	mov	r1, r5
   daf64:	bd30      	pop	{r4, r5, pc}
   daf66:	f094 0f00 	teq	r4, #0
   daf6a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   daf6e:	bf06      	itte	eq
   daf70:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   daf74:	3401      	addeq	r4, #1
   daf76:	3d01      	subne	r5, #1
   daf78:	e74e      	b.n	dae18 <__adddf3+0x8c>
   daf7a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   daf7e:	bf18      	it	ne
   daf80:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   daf84:	d029      	beq.n	dafda <__adddf3+0x24e>
   daf86:	ea94 0f05 	teq	r4, r5
   daf8a:	bf08      	it	eq
   daf8c:	ea90 0f02 	teqeq	r0, r2
   daf90:	d005      	beq.n	daf9e <__adddf3+0x212>
   daf92:	ea54 0c00 	orrs.w	ip, r4, r0
   daf96:	bf04      	itt	eq
   daf98:	4619      	moveq	r1, r3
   daf9a:	4610      	moveq	r0, r2
   daf9c:	bd30      	pop	{r4, r5, pc}
   daf9e:	ea91 0f03 	teq	r1, r3
   dafa2:	bf1e      	ittt	ne
   dafa4:	2100      	movne	r1, #0
   dafa6:	2000      	movne	r0, #0
   dafa8:	bd30      	popne	{r4, r5, pc}
   dafaa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   dafae:	d105      	bne.n	dafbc <__adddf3+0x230>
   dafb0:	0040      	lsls	r0, r0, #1
   dafb2:	4149      	adcs	r1, r1
   dafb4:	bf28      	it	cs
   dafb6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   dafba:	bd30      	pop	{r4, r5, pc}
   dafbc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   dafc0:	bf3c      	itt	cc
   dafc2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   dafc6:	bd30      	popcc	{r4, r5, pc}
   dafc8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dafcc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   dafd0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dafd4:	f04f 0000 	mov.w	r0, #0
   dafd8:	bd30      	pop	{r4, r5, pc}
   dafda:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dafde:	bf1a      	itte	ne
   dafe0:	4619      	movne	r1, r3
   dafe2:	4610      	movne	r0, r2
   dafe4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   dafe8:	bf1c      	itt	ne
   dafea:	460b      	movne	r3, r1
   dafec:	4602      	movne	r2, r0
   dafee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   daff2:	bf06      	itte	eq
   daff4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   daff8:	ea91 0f03 	teqeq	r1, r3
   daffc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   db000:	bd30      	pop	{r4, r5, pc}
   db002:	bf00      	nop

000db004 <__aeabi_ui2d>:
   db004:	f090 0f00 	teq	r0, #0
   db008:	bf04      	itt	eq
   db00a:	2100      	moveq	r1, #0
   db00c:	4770      	bxeq	lr
   db00e:	b530      	push	{r4, r5, lr}
   db010:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db014:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db018:	f04f 0500 	mov.w	r5, #0
   db01c:	f04f 0100 	mov.w	r1, #0
   db020:	e750      	b.n	daec4 <__adddf3+0x138>
   db022:	bf00      	nop

000db024 <__aeabi_i2d>:
   db024:	f090 0f00 	teq	r0, #0
   db028:	bf04      	itt	eq
   db02a:	2100      	moveq	r1, #0
   db02c:	4770      	bxeq	lr
   db02e:	b530      	push	{r4, r5, lr}
   db030:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db034:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db038:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   db03c:	bf48      	it	mi
   db03e:	4240      	negmi	r0, r0
   db040:	f04f 0100 	mov.w	r1, #0
   db044:	e73e      	b.n	daec4 <__adddf3+0x138>
   db046:	bf00      	nop

000db048 <__aeabi_f2d>:
   db048:	0042      	lsls	r2, r0, #1
   db04a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   db04e:	ea4f 0131 	mov.w	r1, r1, rrx
   db052:	ea4f 7002 	mov.w	r0, r2, lsl #28
   db056:	bf1f      	itttt	ne
   db058:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   db05c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   db060:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   db064:	4770      	bxne	lr
   db066:	f092 0f00 	teq	r2, #0
   db06a:	bf14      	ite	ne
   db06c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   db070:	4770      	bxeq	lr
   db072:	b530      	push	{r4, r5, lr}
   db074:	f44f 7460 	mov.w	r4, #896	; 0x380
   db078:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db07c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   db080:	e720      	b.n	daec4 <__adddf3+0x138>
   db082:	bf00      	nop

000db084 <__aeabi_ul2d>:
   db084:	ea50 0201 	orrs.w	r2, r0, r1
   db088:	bf08      	it	eq
   db08a:	4770      	bxeq	lr
   db08c:	b530      	push	{r4, r5, lr}
   db08e:	f04f 0500 	mov.w	r5, #0
   db092:	e00a      	b.n	db0aa <__aeabi_l2d+0x16>

000db094 <__aeabi_l2d>:
   db094:	ea50 0201 	orrs.w	r2, r0, r1
   db098:	bf08      	it	eq
   db09a:	4770      	bxeq	lr
   db09c:	b530      	push	{r4, r5, lr}
   db09e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   db0a2:	d502      	bpl.n	db0aa <__aeabi_l2d+0x16>
   db0a4:	4240      	negs	r0, r0
   db0a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db0aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db0ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db0b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   db0b6:	f43f aedc 	beq.w	dae72 <__adddf3+0xe6>
   db0ba:	f04f 0203 	mov.w	r2, #3
   db0be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   db0c2:	bf18      	it	ne
   db0c4:	3203      	addne	r2, #3
   db0c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   db0ca:	bf18      	it	ne
   db0cc:	3203      	addne	r2, #3
   db0ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   db0d2:	f1c2 0320 	rsb	r3, r2, #32
   db0d6:	fa00 fc03 	lsl.w	ip, r0, r3
   db0da:	fa20 f002 	lsr.w	r0, r0, r2
   db0de:	fa01 fe03 	lsl.w	lr, r1, r3
   db0e2:	ea40 000e 	orr.w	r0, r0, lr
   db0e6:	fa21 f102 	lsr.w	r1, r1, r2
   db0ea:	4414      	add	r4, r2
   db0ec:	e6c1      	b.n	dae72 <__adddf3+0xe6>
   db0ee:	bf00      	nop

000db0f0 <__aeabi_dmul>:
   db0f0:	b570      	push	{r4, r5, r6, lr}
   db0f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   db0f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   db0fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   db0fe:	bf1d      	ittte	ne
   db100:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   db104:	ea94 0f0c 	teqne	r4, ip
   db108:	ea95 0f0c 	teqne	r5, ip
   db10c:	f000 f8de 	bleq	db2cc <__aeabi_dmul+0x1dc>
   db110:	442c      	add	r4, r5
   db112:	ea81 0603 	eor.w	r6, r1, r3
   db116:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   db11a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   db11e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   db122:	bf18      	it	ne
   db124:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   db128:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db12c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   db130:	d038      	beq.n	db1a4 <__aeabi_dmul+0xb4>
   db132:	fba0 ce02 	umull	ip, lr, r0, r2
   db136:	f04f 0500 	mov.w	r5, #0
   db13a:	fbe1 e502 	umlal	lr, r5, r1, r2
   db13e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   db142:	fbe0 e503 	umlal	lr, r5, r0, r3
   db146:	f04f 0600 	mov.w	r6, #0
   db14a:	fbe1 5603 	umlal	r5, r6, r1, r3
   db14e:	f09c 0f00 	teq	ip, #0
   db152:	bf18      	it	ne
   db154:	f04e 0e01 	orrne.w	lr, lr, #1
   db158:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   db15c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   db160:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   db164:	d204      	bcs.n	db170 <__aeabi_dmul+0x80>
   db166:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   db16a:	416d      	adcs	r5, r5
   db16c:	eb46 0606 	adc.w	r6, r6, r6
   db170:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   db174:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   db178:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   db17c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   db180:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   db184:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   db188:	bf88      	it	hi
   db18a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   db18e:	d81e      	bhi.n	db1ce <__aeabi_dmul+0xde>
   db190:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   db194:	bf08      	it	eq
   db196:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   db19a:	f150 0000 	adcs.w	r0, r0, #0
   db19e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db1a2:	bd70      	pop	{r4, r5, r6, pc}
   db1a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   db1a8:	ea46 0101 	orr.w	r1, r6, r1
   db1ac:	ea40 0002 	orr.w	r0, r0, r2
   db1b0:	ea81 0103 	eor.w	r1, r1, r3
   db1b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   db1b8:	bfc2      	ittt	gt
   db1ba:	ebd4 050c 	rsbsgt	r5, r4, ip
   db1be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   db1c2:	bd70      	popgt	{r4, r5, r6, pc}
   db1c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db1c8:	f04f 0e00 	mov.w	lr, #0
   db1cc:	3c01      	subs	r4, #1
   db1ce:	f300 80ab 	bgt.w	db328 <__aeabi_dmul+0x238>
   db1d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   db1d6:	bfde      	ittt	le
   db1d8:	2000      	movle	r0, #0
   db1da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   db1de:	bd70      	pople	{r4, r5, r6, pc}
   db1e0:	f1c4 0400 	rsb	r4, r4, #0
   db1e4:	3c20      	subs	r4, #32
   db1e6:	da35      	bge.n	db254 <__aeabi_dmul+0x164>
   db1e8:	340c      	adds	r4, #12
   db1ea:	dc1b      	bgt.n	db224 <__aeabi_dmul+0x134>
   db1ec:	f104 0414 	add.w	r4, r4, #20
   db1f0:	f1c4 0520 	rsb	r5, r4, #32
   db1f4:	fa00 f305 	lsl.w	r3, r0, r5
   db1f8:	fa20 f004 	lsr.w	r0, r0, r4
   db1fc:	fa01 f205 	lsl.w	r2, r1, r5
   db200:	ea40 0002 	orr.w	r0, r0, r2
   db204:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   db208:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   db20c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   db210:	fa21 f604 	lsr.w	r6, r1, r4
   db214:	eb42 0106 	adc.w	r1, r2, r6
   db218:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   db21c:	bf08      	it	eq
   db21e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   db222:	bd70      	pop	{r4, r5, r6, pc}
   db224:	f1c4 040c 	rsb	r4, r4, #12
   db228:	f1c4 0520 	rsb	r5, r4, #32
   db22c:	fa00 f304 	lsl.w	r3, r0, r4
   db230:	fa20 f005 	lsr.w	r0, r0, r5
   db234:	fa01 f204 	lsl.w	r2, r1, r4
   db238:	ea40 0002 	orr.w	r0, r0, r2
   db23c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db240:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   db244:	f141 0100 	adc.w	r1, r1, #0
   db248:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   db24c:	bf08      	it	eq
   db24e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   db252:	bd70      	pop	{r4, r5, r6, pc}
   db254:	f1c4 0520 	rsb	r5, r4, #32
   db258:	fa00 f205 	lsl.w	r2, r0, r5
   db25c:	ea4e 0e02 	orr.w	lr, lr, r2
   db260:	fa20 f304 	lsr.w	r3, r0, r4
   db264:	fa01 f205 	lsl.w	r2, r1, r5
   db268:	ea43 0302 	orr.w	r3, r3, r2
   db26c:	fa21 f004 	lsr.w	r0, r1, r4
   db270:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db274:	fa21 f204 	lsr.w	r2, r1, r4
   db278:	ea20 0002 	bic.w	r0, r0, r2
   db27c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   db280:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   db284:	bf08      	it	eq
   db286:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   db28a:	bd70      	pop	{r4, r5, r6, pc}
   db28c:	f094 0f00 	teq	r4, #0
   db290:	d10f      	bne.n	db2b2 <__aeabi_dmul+0x1c2>
   db292:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   db296:	0040      	lsls	r0, r0, #1
   db298:	eb41 0101 	adc.w	r1, r1, r1
   db29c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db2a0:	bf08      	it	eq
   db2a2:	3c01      	subeq	r4, #1
   db2a4:	d0f7      	beq.n	db296 <__aeabi_dmul+0x1a6>
   db2a6:	ea41 0106 	orr.w	r1, r1, r6
   db2aa:	f095 0f00 	teq	r5, #0
   db2ae:	bf18      	it	ne
   db2b0:	4770      	bxne	lr
   db2b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   db2b6:	0052      	lsls	r2, r2, #1
   db2b8:	eb43 0303 	adc.w	r3, r3, r3
   db2bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   db2c0:	bf08      	it	eq
   db2c2:	3d01      	subeq	r5, #1
   db2c4:	d0f7      	beq.n	db2b6 <__aeabi_dmul+0x1c6>
   db2c6:	ea43 0306 	orr.w	r3, r3, r6
   db2ca:	4770      	bx	lr
   db2cc:	ea94 0f0c 	teq	r4, ip
   db2d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   db2d4:	bf18      	it	ne
   db2d6:	ea95 0f0c 	teqne	r5, ip
   db2da:	d00c      	beq.n	db2f6 <__aeabi_dmul+0x206>
   db2dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db2e0:	bf18      	it	ne
   db2e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db2e6:	d1d1      	bne.n	db28c <__aeabi_dmul+0x19c>
   db2e8:	ea81 0103 	eor.w	r1, r1, r3
   db2ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db2f0:	f04f 0000 	mov.w	r0, #0
   db2f4:	bd70      	pop	{r4, r5, r6, pc}
   db2f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db2fa:	bf06      	itte	eq
   db2fc:	4610      	moveq	r0, r2
   db2fe:	4619      	moveq	r1, r3
   db300:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db304:	d019      	beq.n	db33a <__aeabi_dmul+0x24a>
   db306:	ea94 0f0c 	teq	r4, ip
   db30a:	d102      	bne.n	db312 <__aeabi_dmul+0x222>
   db30c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   db310:	d113      	bne.n	db33a <__aeabi_dmul+0x24a>
   db312:	ea95 0f0c 	teq	r5, ip
   db316:	d105      	bne.n	db324 <__aeabi_dmul+0x234>
   db318:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   db31c:	bf1c      	itt	ne
   db31e:	4610      	movne	r0, r2
   db320:	4619      	movne	r1, r3
   db322:	d10a      	bne.n	db33a <__aeabi_dmul+0x24a>
   db324:	ea81 0103 	eor.w	r1, r1, r3
   db328:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db32c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   db330:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   db334:	f04f 0000 	mov.w	r0, #0
   db338:	bd70      	pop	{r4, r5, r6, pc}
   db33a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   db33e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   db342:	bd70      	pop	{r4, r5, r6, pc}

000db344 <__aeabi_ddiv>:
   db344:	b570      	push	{r4, r5, r6, lr}
   db346:	f04f 0cff 	mov.w	ip, #255	; 0xff
   db34a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   db34e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   db352:	bf1d      	ittte	ne
   db354:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   db358:	ea94 0f0c 	teqne	r4, ip
   db35c:	ea95 0f0c 	teqne	r5, ip
   db360:	f000 f8a7 	bleq	db4b2 <__aeabi_ddiv+0x16e>
   db364:	eba4 0405 	sub.w	r4, r4, r5
   db368:	ea81 0e03 	eor.w	lr, r1, r3
   db36c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   db370:	ea4f 3101 	mov.w	r1, r1, lsl #12
   db374:	f000 8088 	beq.w	db488 <__aeabi_ddiv+0x144>
   db378:	ea4f 3303 	mov.w	r3, r3, lsl #12
   db37c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   db380:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   db384:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   db388:	ea4f 2202 	mov.w	r2, r2, lsl #8
   db38c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   db390:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   db394:	ea4f 2600 	mov.w	r6, r0, lsl #8
   db398:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   db39c:	429d      	cmp	r5, r3
   db39e:	bf08      	it	eq
   db3a0:	4296      	cmpeq	r6, r2
   db3a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   db3a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   db3aa:	d202      	bcs.n	db3b2 <__aeabi_ddiv+0x6e>
   db3ac:	085b      	lsrs	r3, r3, #1
   db3ae:	ea4f 0232 	mov.w	r2, r2, rrx
   db3b2:	1ab6      	subs	r6, r6, r2
   db3b4:	eb65 0503 	sbc.w	r5, r5, r3
   db3b8:	085b      	lsrs	r3, r3, #1
   db3ba:	ea4f 0232 	mov.w	r2, r2, rrx
   db3be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   db3c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   db3c6:	ebb6 0e02 	subs.w	lr, r6, r2
   db3ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   db3ce:	bf22      	ittt	cs
   db3d0:	1ab6      	subcs	r6, r6, r2
   db3d2:	4675      	movcs	r5, lr
   db3d4:	ea40 000c 	orrcs.w	r0, r0, ip
   db3d8:	085b      	lsrs	r3, r3, #1
   db3da:	ea4f 0232 	mov.w	r2, r2, rrx
   db3de:	ebb6 0e02 	subs.w	lr, r6, r2
   db3e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   db3e6:	bf22      	ittt	cs
   db3e8:	1ab6      	subcs	r6, r6, r2
   db3ea:	4675      	movcs	r5, lr
   db3ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   db3f0:	085b      	lsrs	r3, r3, #1
   db3f2:	ea4f 0232 	mov.w	r2, r2, rrx
   db3f6:	ebb6 0e02 	subs.w	lr, r6, r2
   db3fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   db3fe:	bf22      	ittt	cs
   db400:	1ab6      	subcs	r6, r6, r2
   db402:	4675      	movcs	r5, lr
   db404:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   db408:	085b      	lsrs	r3, r3, #1
   db40a:	ea4f 0232 	mov.w	r2, r2, rrx
   db40e:	ebb6 0e02 	subs.w	lr, r6, r2
   db412:	eb75 0e03 	sbcs.w	lr, r5, r3
   db416:	bf22      	ittt	cs
   db418:	1ab6      	subcs	r6, r6, r2
   db41a:	4675      	movcs	r5, lr
   db41c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   db420:	ea55 0e06 	orrs.w	lr, r5, r6
   db424:	d018      	beq.n	db458 <__aeabi_ddiv+0x114>
   db426:	ea4f 1505 	mov.w	r5, r5, lsl #4
   db42a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   db42e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   db432:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   db436:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   db43a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   db43e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   db442:	d1c0      	bne.n	db3c6 <__aeabi_ddiv+0x82>
   db444:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db448:	d10b      	bne.n	db462 <__aeabi_ddiv+0x11e>
   db44a:	ea41 0100 	orr.w	r1, r1, r0
   db44e:	f04f 0000 	mov.w	r0, #0
   db452:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   db456:	e7b6      	b.n	db3c6 <__aeabi_ddiv+0x82>
   db458:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db45c:	bf04      	itt	eq
   db45e:	4301      	orreq	r1, r0
   db460:	2000      	moveq	r0, #0
   db462:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   db466:	bf88      	it	hi
   db468:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   db46c:	f63f aeaf 	bhi.w	db1ce <__aeabi_dmul+0xde>
   db470:	ebb5 0c03 	subs.w	ip, r5, r3
   db474:	bf04      	itt	eq
   db476:	ebb6 0c02 	subseq.w	ip, r6, r2
   db47a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   db47e:	f150 0000 	adcs.w	r0, r0, #0
   db482:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db486:	bd70      	pop	{r4, r5, r6, pc}
   db488:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   db48c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   db490:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   db494:	bfc2      	ittt	gt
   db496:	ebd4 050c 	rsbsgt	r5, r4, ip
   db49a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   db49e:	bd70      	popgt	{r4, r5, r6, pc}
   db4a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db4a4:	f04f 0e00 	mov.w	lr, #0
   db4a8:	3c01      	subs	r4, #1
   db4aa:	e690      	b.n	db1ce <__aeabi_dmul+0xde>
   db4ac:	ea45 0e06 	orr.w	lr, r5, r6
   db4b0:	e68d      	b.n	db1ce <__aeabi_dmul+0xde>
   db4b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   db4b6:	ea94 0f0c 	teq	r4, ip
   db4ba:	bf08      	it	eq
   db4bc:	ea95 0f0c 	teqeq	r5, ip
   db4c0:	f43f af3b 	beq.w	db33a <__aeabi_dmul+0x24a>
   db4c4:	ea94 0f0c 	teq	r4, ip
   db4c8:	d10a      	bne.n	db4e0 <__aeabi_ddiv+0x19c>
   db4ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   db4ce:	f47f af34 	bne.w	db33a <__aeabi_dmul+0x24a>
   db4d2:	ea95 0f0c 	teq	r5, ip
   db4d6:	f47f af25 	bne.w	db324 <__aeabi_dmul+0x234>
   db4da:	4610      	mov	r0, r2
   db4dc:	4619      	mov	r1, r3
   db4de:	e72c      	b.n	db33a <__aeabi_dmul+0x24a>
   db4e0:	ea95 0f0c 	teq	r5, ip
   db4e4:	d106      	bne.n	db4f4 <__aeabi_ddiv+0x1b0>
   db4e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   db4ea:	f43f aefd 	beq.w	db2e8 <__aeabi_dmul+0x1f8>
   db4ee:	4610      	mov	r0, r2
   db4f0:	4619      	mov	r1, r3
   db4f2:	e722      	b.n	db33a <__aeabi_dmul+0x24a>
   db4f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db4f8:	bf18      	it	ne
   db4fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db4fe:	f47f aec5 	bne.w	db28c <__aeabi_dmul+0x19c>
   db502:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   db506:	f47f af0d 	bne.w	db324 <__aeabi_dmul+0x234>
   db50a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   db50e:	f47f aeeb 	bne.w	db2e8 <__aeabi_dmul+0x1f8>
   db512:	e712      	b.n	db33a <__aeabi_dmul+0x24a>

000db514 <__gedf2>:
   db514:	f04f 3cff 	mov.w	ip, #4294967295
   db518:	e006      	b.n	db528 <__cmpdf2+0x4>
   db51a:	bf00      	nop

000db51c <__ledf2>:
   db51c:	f04f 0c01 	mov.w	ip, #1
   db520:	e002      	b.n	db528 <__cmpdf2+0x4>
   db522:	bf00      	nop

000db524 <__cmpdf2>:
   db524:	f04f 0c01 	mov.w	ip, #1
   db528:	f84d cd04 	str.w	ip, [sp, #-4]!
   db52c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   db530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db534:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   db538:	bf18      	it	ne
   db53a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   db53e:	d01b      	beq.n	db578 <__cmpdf2+0x54>
   db540:	b001      	add	sp, #4
   db542:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   db546:	bf0c      	ite	eq
   db548:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   db54c:	ea91 0f03 	teqne	r1, r3
   db550:	bf02      	ittt	eq
   db552:	ea90 0f02 	teqeq	r0, r2
   db556:	2000      	moveq	r0, #0
   db558:	4770      	bxeq	lr
   db55a:	f110 0f00 	cmn.w	r0, #0
   db55e:	ea91 0f03 	teq	r1, r3
   db562:	bf58      	it	pl
   db564:	4299      	cmppl	r1, r3
   db566:	bf08      	it	eq
   db568:	4290      	cmpeq	r0, r2
   db56a:	bf2c      	ite	cs
   db56c:	17d8      	asrcs	r0, r3, #31
   db56e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   db572:	f040 0001 	orr.w	r0, r0, #1
   db576:	4770      	bx	lr
   db578:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   db57c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db580:	d102      	bne.n	db588 <__cmpdf2+0x64>
   db582:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   db586:	d107      	bne.n	db598 <__cmpdf2+0x74>
   db588:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   db58c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db590:	d1d6      	bne.n	db540 <__cmpdf2+0x1c>
   db592:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   db596:	d0d3      	beq.n	db540 <__cmpdf2+0x1c>
   db598:	f85d 0b04 	ldr.w	r0, [sp], #4
   db59c:	4770      	bx	lr
   db59e:	bf00      	nop

000db5a0 <__aeabi_cdrcmple>:
   db5a0:	4684      	mov	ip, r0
   db5a2:	4610      	mov	r0, r2
   db5a4:	4662      	mov	r2, ip
   db5a6:	468c      	mov	ip, r1
   db5a8:	4619      	mov	r1, r3
   db5aa:	4663      	mov	r3, ip
   db5ac:	e000      	b.n	db5b0 <__aeabi_cdcmpeq>
   db5ae:	bf00      	nop

000db5b0 <__aeabi_cdcmpeq>:
   db5b0:	b501      	push	{r0, lr}
   db5b2:	f7ff ffb7 	bl	db524 <__cmpdf2>
   db5b6:	2800      	cmp	r0, #0
   db5b8:	bf48      	it	mi
   db5ba:	f110 0f00 	cmnmi.w	r0, #0
   db5be:	bd01      	pop	{r0, pc}

000db5c0 <__aeabi_dcmpeq>:
   db5c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   db5c4:	f7ff fff4 	bl	db5b0 <__aeabi_cdcmpeq>
   db5c8:	bf0c      	ite	eq
   db5ca:	2001      	moveq	r0, #1
   db5cc:	2000      	movne	r0, #0
   db5ce:	f85d fb08 	ldr.w	pc, [sp], #8
   db5d2:	bf00      	nop

000db5d4 <__aeabi_dcmplt>:
   db5d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   db5d8:	f7ff ffea 	bl	db5b0 <__aeabi_cdcmpeq>
   db5dc:	bf34      	ite	cc
   db5de:	2001      	movcc	r0, #1
   db5e0:	2000      	movcs	r0, #0
   db5e2:	f85d fb08 	ldr.w	pc, [sp], #8
   db5e6:	bf00      	nop

000db5e8 <__aeabi_dcmple>:
   db5e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   db5ec:	f7ff ffe0 	bl	db5b0 <__aeabi_cdcmpeq>
   db5f0:	bf94      	ite	ls
   db5f2:	2001      	movls	r0, #1
   db5f4:	2000      	movhi	r0, #0
   db5f6:	f85d fb08 	ldr.w	pc, [sp], #8
   db5fa:	bf00      	nop

000db5fc <__aeabi_dcmpge>:
   db5fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   db600:	f7ff ffce 	bl	db5a0 <__aeabi_cdrcmple>
   db604:	bf94      	ite	ls
   db606:	2001      	movls	r0, #1
   db608:	2000      	movhi	r0, #0
   db60a:	f85d fb08 	ldr.w	pc, [sp], #8
   db60e:	bf00      	nop

000db610 <__aeabi_dcmpgt>:
   db610:	f84d ed08 	str.w	lr, [sp, #-8]!
   db614:	f7ff ffc4 	bl	db5a0 <__aeabi_cdrcmple>
   db618:	bf34      	ite	cc
   db61a:	2001      	movcc	r0, #1
   db61c:	2000      	movcs	r0, #0
   db61e:	f85d fb08 	ldr.w	pc, [sp], #8
   db622:	bf00      	nop

000db624 <__aeabi_dcmpun>:
   db624:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   db628:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db62c:	d102      	bne.n	db634 <__aeabi_dcmpun+0x10>
   db62e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   db632:	d10a      	bne.n	db64a <__aeabi_dcmpun+0x26>
   db634:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   db638:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db63c:	d102      	bne.n	db644 <__aeabi_dcmpun+0x20>
   db63e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   db642:	d102      	bne.n	db64a <__aeabi_dcmpun+0x26>
   db644:	f04f 0000 	mov.w	r0, #0
   db648:	4770      	bx	lr
   db64a:	f04f 0001 	mov.w	r0, #1
   db64e:	4770      	bx	lr

000db650 <__aeabi_d2iz>:
   db650:	ea4f 0241 	mov.w	r2, r1, lsl #1
   db654:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   db658:	d215      	bcs.n	db686 <__aeabi_d2iz+0x36>
   db65a:	d511      	bpl.n	db680 <__aeabi_d2iz+0x30>
   db65c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   db660:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   db664:	d912      	bls.n	db68c <__aeabi_d2iz+0x3c>
   db666:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   db66a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   db66e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   db672:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   db676:	fa23 f002 	lsr.w	r0, r3, r2
   db67a:	bf18      	it	ne
   db67c:	4240      	negne	r0, r0
   db67e:	4770      	bx	lr
   db680:	f04f 0000 	mov.w	r0, #0
   db684:	4770      	bx	lr
   db686:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   db68a:	d105      	bne.n	db698 <__aeabi_d2iz+0x48>
   db68c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   db690:	bf08      	it	eq
   db692:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   db696:	4770      	bx	lr
   db698:	f04f 0000 	mov.w	r0, #0
   db69c:	4770      	bx	lr
   db69e:	bf00      	nop

000db6a0 <__aeabi_d2uiz>:
   db6a0:	004a      	lsls	r2, r1, #1
   db6a2:	d211      	bcs.n	db6c8 <__aeabi_d2uiz+0x28>
   db6a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   db6a8:	d211      	bcs.n	db6ce <__aeabi_d2uiz+0x2e>
   db6aa:	d50d      	bpl.n	db6c8 <__aeabi_d2uiz+0x28>
   db6ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   db6b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   db6b4:	d40e      	bmi.n	db6d4 <__aeabi_d2uiz+0x34>
   db6b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   db6ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   db6be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   db6c2:	fa23 f002 	lsr.w	r0, r3, r2
   db6c6:	4770      	bx	lr
   db6c8:	f04f 0000 	mov.w	r0, #0
   db6cc:	4770      	bx	lr
   db6ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   db6d2:	d102      	bne.n	db6da <__aeabi_d2uiz+0x3a>
   db6d4:	f04f 30ff 	mov.w	r0, #4294967295
   db6d8:	4770      	bx	lr
   db6da:	f04f 0000 	mov.w	r0, #0
   db6de:	4770      	bx	lr

000db6e0 <__aeabi_d2f>:
   db6e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   db6e4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   db6e8:	bf24      	itt	cs
   db6ea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   db6ee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   db6f2:	d90d      	bls.n	db710 <__aeabi_d2f+0x30>
   db6f4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   db6f8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   db6fc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   db700:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   db704:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   db708:	bf08      	it	eq
   db70a:	f020 0001 	biceq.w	r0, r0, #1
   db70e:	4770      	bx	lr
   db710:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   db714:	d121      	bne.n	db75a <__aeabi_d2f+0x7a>
   db716:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   db71a:	bfbc      	itt	lt
   db71c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   db720:	4770      	bxlt	lr
   db722:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db726:	ea4f 5252 	mov.w	r2, r2, lsr #21
   db72a:	f1c2 0218 	rsb	r2, r2, #24
   db72e:	f1c2 0c20 	rsb	ip, r2, #32
   db732:	fa10 f30c 	lsls.w	r3, r0, ip
   db736:	fa20 f002 	lsr.w	r0, r0, r2
   db73a:	bf18      	it	ne
   db73c:	f040 0001 	orrne.w	r0, r0, #1
   db740:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   db744:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   db748:	fa03 fc0c 	lsl.w	ip, r3, ip
   db74c:	ea40 000c 	orr.w	r0, r0, ip
   db750:	fa23 f302 	lsr.w	r3, r3, r2
   db754:	ea4f 0343 	mov.w	r3, r3, lsl #1
   db758:	e7cc      	b.n	db6f4 <__aeabi_d2f+0x14>
   db75a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   db75e:	d107      	bne.n	db770 <__aeabi_d2f+0x90>
   db760:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   db764:	bf1e      	ittt	ne
   db766:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   db76a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   db76e:	4770      	bxne	lr
   db770:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   db774:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   db778:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   db77c:	4770      	bx	lr
   db77e:	bf00      	nop

000db780 <asctime>:
   db780:	4b09      	ldr	r3, [pc, #36]	; (db7a8 <asctime+0x28>)
   db782:	b570      	push	{r4, r5, r6, lr}
   db784:	681c      	ldr	r4, [r3, #0]
   db786:	6c25      	ldr	r5, [r4, #64]	; 0x40
   db788:	4606      	mov	r6, r0
   db78a:	b93d      	cbnz	r5, db79c <asctime+0x1c>
   db78c:	201a      	movs	r0, #26
   db78e:	f7fd fabd 	bl	d8d0c <malloc>
   db792:	221a      	movs	r2, #26
   db794:	6420      	str	r0, [r4, #64]	; 0x40
   db796:	4629      	mov	r1, r5
   db798:	f000 f94e 	bl	dba38 <memset>
   db79c:	6c21      	ldr	r1, [r4, #64]	; 0x40
   db79e:	4630      	mov	r0, r6
   db7a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   db7a4:	f000 b802 	b.w	db7ac <asctime_r>
   db7a8:	2003d890 	.word	0x2003d890

000db7ac <asctime_r>:
   db7ac:	b510      	push	{r4, lr}
   db7ae:	460c      	mov	r4, r1
   db7b0:	6941      	ldr	r1, [r0, #20]
   db7b2:	6903      	ldr	r3, [r0, #16]
   db7b4:	6982      	ldr	r2, [r0, #24]
   db7b6:	b086      	sub	sp, #24
   db7b8:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   db7bc:	9104      	str	r1, [sp, #16]
   db7be:	6801      	ldr	r1, [r0, #0]
   db7c0:	9103      	str	r1, [sp, #12]
   db7c2:	6841      	ldr	r1, [r0, #4]
   db7c4:	9102      	str	r1, [sp, #8]
   db7c6:	6881      	ldr	r1, [r0, #8]
   db7c8:	9101      	str	r1, [sp, #4]
   db7ca:	68c1      	ldr	r1, [r0, #12]
   db7cc:	9100      	str	r1, [sp, #0]
   db7ce:	4907      	ldr	r1, [pc, #28]	; (db7ec <asctime_r+0x40>)
   db7d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   db7d4:	440b      	add	r3, r1
   db7d6:	4906      	ldr	r1, [pc, #24]	; (db7f0 <asctime_r+0x44>)
   db7d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   db7dc:	440a      	add	r2, r1
   db7de:	4620      	mov	r0, r4
   db7e0:	4904      	ldr	r1, [pc, #16]	; (db7f4 <asctime_r+0x48>)
   db7e2:	f7fd fab3 	bl	d8d4c <siprintf>
   db7e6:	4620      	mov	r0, r4
   db7e8:	b006      	add	sp, #24
   db7ea:	bd10      	pop	{r4, pc}
   db7ec:	000dd426 	.word	0x000dd426
   db7f0:	000dd411 	.word	0x000dd411
   db7f4:	000dd44a 	.word	0x000dd44a

000db7f8 <__cxa_atexit>:
   db7f8:	b510      	push	{r4, lr}
   db7fa:	4c05      	ldr	r4, [pc, #20]	; (db810 <__cxa_atexit+0x18>)
   db7fc:	4613      	mov	r3, r2
   db7fe:	b12c      	cbz	r4, db80c <__cxa_atexit+0x14>
   db800:	460a      	mov	r2, r1
   db802:	4601      	mov	r1, r0
   db804:	2002      	movs	r0, #2
   db806:	f3af 8000 	nop.w
   db80a:	bd10      	pop	{r4, pc}
   db80c:	4620      	mov	r0, r4
   db80e:	bd10      	pop	{r4, pc}
   db810:	00000000 	.word	0x00000000

000db814 <localtime>:
   db814:	b538      	push	{r3, r4, r5, lr}
   db816:	4b07      	ldr	r3, [pc, #28]	; (db834 <localtime+0x20>)
   db818:	681c      	ldr	r4, [r3, #0]
   db81a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   db81c:	4605      	mov	r5, r0
   db81e:	b91b      	cbnz	r3, db828 <localtime+0x14>
   db820:	2024      	movs	r0, #36	; 0x24
   db822:	f7fd fa73 	bl	d8d0c <malloc>
   db826:	63e0      	str	r0, [r4, #60]	; 0x3c
   db828:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   db82a:	4628      	mov	r0, r5
   db82c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db830:	f000 b802 	b.w	db838 <localtime_r>
   db834:	2003d890 	.word	0x2003d890

000db838 <localtime_r>:
   db838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db83c:	460c      	mov	r4, r1
   db83e:	4680      	mov	r8, r0
   db840:	f001 f99e 	bl	dcb80 <__gettzinfo>
   db844:	4621      	mov	r1, r4
   db846:	4607      	mov	r7, r0
   db848:	4640      	mov	r0, r8
   db84a:	f001 f99d 	bl	dcb88 <gmtime_r>
   db84e:	6946      	ldr	r6, [r0, #20]
   db850:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   db854:	07b3      	lsls	r3, r6, #30
   db856:	4604      	mov	r4, r0
   db858:	d105      	bne.n	db866 <localtime_r+0x2e>
   db85a:	2264      	movs	r2, #100	; 0x64
   db85c:	fb96 f3f2 	sdiv	r3, r6, r2
   db860:	fb02 6313 	mls	r3, r2, r3, r6
   db864:	b94b      	cbnz	r3, db87a <localtime_r+0x42>
   db866:	f44f 75c8 	mov.w	r5, #400	; 0x190
   db86a:	fb96 f3f5 	sdiv	r3, r6, r5
   db86e:	fb05 6513 	mls	r5, r5, r3, r6
   db872:	fab5 f385 	clz	r3, r5
   db876:	095b      	lsrs	r3, r3, #5
   db878:	e000      	b.n	db87c <localtime_r+0x44>
   db87a:	2301      	movs	r3, #1
   db87c:	4a5f      	ldr	r2, [pc, #380]	; (db9fc <localtime_r+0x1c4>)
   db87e:	2530      	movs	r5, #48	; 0x30
   db880:	fb05 2503 	mla	r5, r5, r3, r2
   db884:	f000 ffac 	bl	dc7e0 <__tz_lock>
   db888:	f000 ffac 	bl	dc7e4 <_tzset_unlocked>
   db88c:	4b5c      	ldr	r3, [pc, #368]	; (dba00 <localtime_r+0x1c8>)
   db88e:	681b      	ldr	r3, [r3, #0]
   db890:	b1f3      	cbz	r3, db8d0 <localtime_r+0x98>
   db892:	687b      	ldr	r3, [r7, #4]
   db894:	429e      	cmp	r6, r3
   db896:	d105      	bne.n	db8a4 <localtime_r+0x6c>
   db898:	6839      	ldr	r1, [r7, #0]
   db89a:	f8d8 3000 	ldr.w	r3, [r8]
   db89e:	69fa      	ldr	r2, [r7, #28]
   db8a0:	b941      	cbnz	r1, db8b4 <localtime_r+0x7c>
   db8a2:	e00a      	b.n	db8ba <localtime_r+0x82>
   db8a4:	4630      	mov	r0, r6
   db8a6:	f000 fef3 	bl	dc690 <__tzcalc_limits>
   db8aa:	2800      	cmp	r0, #0
   db8ac:	d1f4      	bne.n	db898 <localtime_r+0x60>
   db8ae:	f04f 33ff 	mov.w	r3, #4294967295
   db8b2:	e00d      	b.n	db8d0 <localtime_r+0x98>
   db8b4:	4293      	cmp	r3, r2
   db8b6:	db08      	blt.n	db8ca <localtime_r+0x92>
   db8b8:	e001      	b.n	db8be <localtime_r+0x86>
   db8ba:	4293      	cmp	r3, r2
   db8bc:	da07      	bge.n	db8ce <localtime_r+0x96>
   db8be:	6bba      	ldr	r2, [r7, #56]	; 0x38
   db8c0:	4293      	cmp	r3, r2
   db8c2:	bfac      	ite	ge
   db8c4:	2300      	movge	r3, #0
   db8c6:	2301      	movlt	r3, #1
   db8c8:	e002      	b.n	db8d0 <localtime_r+0x98>
   db8ca:	2300      	movs	r3, #0
   db8cc:	e000      	b.n	db8d0 <localtime_r+0x98>
   db8ce:	2301      	movs	r3, #1
   db8d0:	6223      	str	r3, [r4, #32]
   db8d2:	6a23      	ldr	r3, [r4, #32]
   db8d4:	2b01      	cmp	r3, #1
   db8d6:	bf0c      	ite	eq
   db8d8:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   db8da:	6a39      	ldrne	r1, [r7, #32]
   db8dc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   db8e0:	203c      	movs	r0, #60	; 0x3c
   db8e2:	fb91 f6f3 	sdiv	r6, r1, r3
   db8e6:	fb03 1316 	mls	r3, r3, r6, r1
   db8ea:	6861      	ldr	r1, [r4, #4]
   db8ec:	fb93 f2f0 	sdiv	r2, r3, r0
   db8f0:	fb00 3012 	mls	r0, r0, r2, r3
   db8f4:	6823      	ldr	r3, [r4, #0]
   db8f6:	1a89      	subs	r1, r1, r2
   db8f8:	68a2      	ldr	r2, [r4, #8]
   db8fa:	6061      	str	r1, [r4, #4]
   db8fc:	1a1b      	subs	r3, r3, r0
   db8fe:	1b92      	subs	r2, r2, r6
   db900:	2b3b      	cmp	r3, #59	; 0x3b
   db902:	6023      	str	r3, [r4, #0]
   db904:	60a2      	str	r2, [r4, #8]
   db906:	dd03      	ble.n	db910 <localtime_r+0xd8>
   db908:	3101      	adds	r1, #1
   db90a:	6061      	str	r1, [r4, #4]
   db90c:	3b3c      	subs	r3, #60	; 0x3c
   db90e:	e004      	b.n	db91a <localtime_r+0xe2>
   db910:	2b00      	cmp	r3, #0
   db912:	da03      	bge.n	db91c <localtime_r+0xe4>
   db914:	3901      	subs	r1, #1
   db916:	6061      	str	r1, [r4, #4]
   db918:	333c      	adds	r3, #60	; 0x3c
   db91a:	6023      	str	r3, [r4, #0]
   db91c:	6863      	ldr	r3, [r4, #4]
   db91e:	2b3b      	cmp	r3, #59	; 0x3b
   db920:	dd03      	ble.n	db92a <localtime_r+0xf2>
   db922:	3201      	adds	r2, #1
   db924:	60a2      	str	r2, [r4, #8]
   db926:	3b3c      	subs	r3, #60	; 0x3c
   db928:	e004      	b.n	db934 <localtime_r+0xfc>
   db92a:	2b00      	cmp	r3, #0
   db92c:	da03      	bge.n	db936 <localtime_r+0xfe>
   db92e:	3a01      	subs	r2, #1
   db930:	60a2      	str	r2, [r4, #8]
   db932:	333c      	adds	r3, #60	; 0x3c
   db934:	6063      	str	r3, [r4, #4]
   db936:	68a3      	ldr	r3, [r4, #8]
   db938:	2b17      	cmp	r3, #23
   db93a:	dd22      	ble.n	db982 <localtime_r+0x14a>
   db93c:	69e2      	ldr	r2, [r4, #28]
   db93e:	3201      	adds	r2, #1
   db940:	61e2      	str	r2, [r4, #28]
   db942:	69a2      	ldr	r2, [r4, #24]
   db944:	3201      	adds	r2, #1
   db946:	2a06      	cmp	r2, #6
   db948:	bfc8      	it	gt
   db94a:	2200      	movgt	r2, #0
   db94c:	61a2      	str	r2, [r4, #24]
   db94e:	68e2      	ldr	r2, [r4, #12]
   db950:	3b18      	subs	r3, #24
   db952:	3201      	adds	r2, #1
   db954:	60a3      	str	r3, [r4, #8]
   db956:	6923      	ldr	r3, [r4, #16]
   db958:	60e2      	str	r2, [r4, #12]
   db95a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   db95e:	428a      	cmp	r2, r1
   db960:	dd46      	ble.n	db9f0 <localtime_r+0x1b8>
   db962:	3301      	adds	r3, #1
   db964:	2b0c      	cmp	r3, #12
   db966:	bf0c      	ite	eq
   db968:	6963      	ldreq	r3, [r4, #20]
   db96a:	6123      	strne	r3, [r4, #16]
   db96c:	eba2 0201 	sub.w	r2, r2, r1
   db970:	60e2      	str	r2, [r4, #12]
   db972:	bf01      	itttt	eq
   db974:	3301      	addeq	r3, #1
   db976:	2200      	moveq	r2, #0
   db978:	6122      	streq	r2, [r4, #16]
   db97a:	6163      	streq	r3, [r4, #20]
   db97c:	bf08      	it	eq
   db97e:	61e2      	streq	r2, [r4, #28]
   db980:	e036      	b.n	db9f0 <localtime_r+0x1b8>
   db982:	2b00      	cmp	r3, #0
   db984:	da34      	bge.n	db9f0 <localtime_r+0x1b8>
   db986:	69e2      	ldr	r2, [r4, #28]
   db988:	3a01      	subs	r2, #1
   db98a:	61e2      	str	r2, [r4, #28]
   db98c:	69a2      	ldr	r2, [r4, #24]
   db98e:	3a01      	subs	r2, #1
   db990:	bf48      	it	mi
   db992:	2206      	movmi	r2, #6
   db994:	61a2      	str	r2, [r4, #24]
   db996:	68e2      	ldr	r2, [r4, #12]
   db998:	3318      	adds	r3, #24
   db99a:	3a01      	subs	r2, #1
   db99c:	60e2      	str	r2, [r4, #12]
   db99e:	60a3      	str	r3, [r4, #8]
   db9a0:	bb32      	cbnz	r2, db9f0 <localtime_r+0x1b8>
   db9a2:	6923      	ldr	r3, [r4, #16]
   db9a4:	3b01      	subs	r3, #1
   db9a6:	d401      	bmi.n	db9ac <localtime_r+0x174>
   db9a8:	6123      	str	r3, [r4, #16]
   db9aa:	e01d      	b.n	db9e8 <localtime_r+0x1b0>
   db9ac:	230b      	movs	r3, #11
   db9ae:	6123      	str	r3, [r4, #16]
   db9b0:	6963      	ldr	r3, [r4, #20]
   db9b2:	1e5a      	subs	r2, r3, #1
   db9b4:	f012 0f03 	tst.w	r2, #3
   db9b8:	6162      	str	r2, [r4, #20]
   db9ba:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   db9be:	d105      	bne.n	db9cc <localtime_r+0x194>
   db9c0:	2164      	movs	r1, #100	; 0x64
   db9c2:	fb93 f2f1 	sdiv	r2, r3, r1
   db9c6:	fb01 3212 	mls	r2, r1, r2, r3
   db9ca:	b94a      	cbnz	r2, db9e0 <localtime_r+0x1a8>
   db9cc:	f44f 71c8 	mov.w	r1, #400	; 0x190
   db9d0:	fb93 f2f1 	sdiv	r2, r3, r1
   db9d4:	fb01 3312 	mls	r3, r1, r2, r3
   db9d8:	fab3 f383 	clz	r3, r3
   db9dc:	095b      	lsrs	r3, r3, #5
   db9de:	e000      	b.n	db9e2 <localtime_r+0x1aa>
   db9e0:	2301      	movs	r3, #1
   db9e2:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   db9e6:	61e3      	str	r3, [r4, #28]
   db9e8:	6923      	ldr	r3, [r4, #16]
   db9ea:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   db9ee:	60e3      	str	r3, [r4, #12]
   db9f0:	f000 fef7 	bl	dc7e2 <__tz_unlock>
   db9f4:	4620      	mov	r0, r4
   db9f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   db9fa:	bf00      	nop
   db9fc:	000dd5d0 	.word	0x000dd5d0
   dba00:	2003e5c0 	.word	0x2003e5c0

000dba04 <memcmp>:
   dba04:	b510      	push	{r4, lr}
   dba06:	3901      	subs	r1, #1
   dba08:	4402      	add	r2, r0
   dba0a:	4290      	cmp	r0, r2
   dba0c:	d007      	beq.n	dba1e <memcmp+0x1a>
   dba0e:	f810 3b01 	ldrb.w	r3, [r0], #1
   dba12:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dba16:	42a3      	cmp	r3, r4
   dba18:	d0f7      	beq.n	dba0a <memcmp+0x6>
   dba1a:	1b18      	subs	r0, r3, r4
   dba1c:	bd10      	pop	{r4, pc}
   dba1e:	2000      	movs	r0, #0
   dba20:	bd10      	pop	{r4, pc}

000dba22 <memcpy>:
   dba22:	b510      	push	{r4, lr}
   dba24:	1e43      	subs	r3, r0, #1
   dba26:	440a      	add	r2, r1
   dba28:	4291      	cmp	r1, r2
   dba2a:	d004      	beq.n	dba36 <memcpy+0x14>
   dba2c:	f811 4b01 	ldrb.w	r4, [r1], #1
   dba30:	f803 4f01 	strb.w	r4, [r3, #1]!
   dba34:	e7f8      	b.n	dba28 <memcpy+0x6>
   dba36:	bd10      	pop	{r4, pc}

000dba38 <memset>:
   dba38:	4402      	add	r2, r0
   dba3a:	4603      	mov	r3, r0
   dba3c:	4293      	cmp	r3, r2
   dba3e:	d002      	beq.n	dba46 <memset+0xe>
   dba40:	f803 1b01 	strb.w	r1, [r3], #1
   dba44:	e7fa      	b.n	dba3c <memset+0x4>
   dba46:	4770      	bx	lr

000dba48 <srand>:
   dba48:	b538      	push	{r3, r4, r5, lr}
   dba4a:	4b12      	ldr	r3, [pc, #72]	; (dba94 <srand+0x4c>)
   dba4c:	681c      	ldr	r4, [r3, #0]
   dba4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dba50:	4605      	mov	r5, r0
   dba52:	b9d3      	cbnz	r3, dba8a <srand+0x42>
   dba54:	2018      	movs	r0, #24
   dba56:	f7fd f959 	bl	d8d0c <malloc>
   dba5a:	f243 330e 	movw	r3, #13070	; 0x330e
   dba5e:	63a0      	str	r0, [r4, #56]	; 0x38
   dba60:	8003      	strh	r3, [r0, #0]
   dba62:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   dba66:	8043      	strh	r3, [r0, #2]
   dba68:	f241 2334 	movw	r3, #4660	; 0x1234
   dba6c:	8083      	strh	r3, [r0, #4]
   dba6e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   dba72:	80c3      	strh	r3, [r0, #6]
   dba74:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   dba78:	8103      	strh	r3, [r0, #8]
   dba7a:	2305      	movs	r3, #5
   dba7c:	8143      	strh	r3, [r0, #10]
   dba7e:	230b      	movs	r3, #11
   dba80:	8183      	strh	r3, [r0, #12]
   dba82:	2201      	movs	r2, #1
   dba84:	2300      	movs	r3, #0
   dba86:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dba8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dba8c:	2200      	movs	r2, #0
   dba8e:	611d      	str	r5, [r3, #16]
   dba90:	615a      	str	r2, [r3, #20]
   dba92:	bd38      	pop	{r3, r4, r5, pc}
   dba94:	2003d890 	.word	0x2003d890

000dba98 <strchr>:
   dba98:	b2c9      	uxtb	r1, r1
   dba9a:	4603      	mov	r3, r0
   dba9c:	f810 2b01 	ldrb.w	r2, [r0], #1
   dbaa0:	b11a      	cbz	r2, dbaaa <strchr+0x12>
   dbaa2:	4291      	cmp	r1, r2
   dbaa4:	d1f9      	bne.n	dba9a <strchr+0x2>
   dbaa6:	4618      	mov	r0, r3
   dbaa8:	4770      	bx	lr
   dbaaa:	2900      	cmp	r1, #0
   dbaac:	bf0c      	ite	eq
   dbaae:	4618      	moveq	r0, r3
   dbab0:	2000      	movne	r0, #0
   dbab2:	4770      	bx	lr

000dbab4 <strcmp>:
   dbab4:	f810 2b01 	ldrb.w	r2, [r0], #1
   dbab8:	f811 3b01 	ldrb.w	r3, [r1], #1
   dbabc:	2a01      	cmp	r2, #1
   dbabe:	bf28      	it	cs
   dbac0:	429a      	cmpcs	r2, r3
   dbac2:	d0f7      	beq.n	dbab4 <strcmp>
   dbac4:	1ad0      	subs	r0, r2, r3
   dbac6:	4770      	bx	lr

000dbac8 <strcpy>:
   dbac8:	4603      	mov	r3, r0
   dbaca:	f811 2b01 	ldrb.w	r2, [r1], #1
   dbace:	f803 2b01 	strb.w	r2, [r3], #1
   dbad2:	2a00      	cmp	r2, #0
   dbad4:	d1f9      	bne.n	dbaca <strcpy+0x2>
   dbad6:	4770      	bx	lr

000dbad8 <iso_year_adjust>:
   dbad8:	6941      	ldr	r1, [r0, #20]
   dbada:	078b      	lsls	r3, r1, #30
   dbadc:	b510      	push	{r4, lr}
   dbade:	d10c      	bne.n	dbafa <iso_year_adjust+0x22>
   dbae0:	2900      	cmp	r1, #0
   dbae2:	f240 736c 	movw	r3, #1900	; 0x76c
   dbae6:	bfa8      	it	ge
   dbae8:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   dbaec:	440b      	add	r3, r1
   dbaee:	2464      	movs	r4, #100	; 0x64
   dbaf0:	fb93 f2f4 	sdiv	r2, r3, r4
   dbaf4:	fb04 3312 	mls	r3, r4, r2, r3
   dbaf8:	b983      	cbnz	r3, dbb1c <iso_year_adjust+0x44>
   dbafa:	2900      	cmp	r1, #0
   dbafc:	f240 736c 	movw	r3, #1900	; 0x76c
   dbb00:	bfa8      	it	ge
   dbb02:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   dbb06:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dbb0a:	440b      	add	r3, r1
   dbb0c:	fb93 f1f2 	sdiv	r1, r3, r2
   dbb10:	fb02 3311 	mls	r3, r2, r1, r3
   dbb14:	fab3 f283 	clz	r2, r3
   dbb18:	0952      	lsrs	r2, r2, #5
   dbb1a:	e000      	b.n	dbb1e <iso_year_adjust+0x46>
   dbb1c:	2201      	movs	r2, #1
   dbb1e:	6983      	ldr	r3, [r0, #24]
   dbb20:	69c1      	ldr	r1, [r0, #28]
   dbb22:	005b      	lsls	r3, r3, #1
   dbb24:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   dbb28:	4413      	add	r3, r2
   dbb2a:	2b21      	cmp	r3, #33	; 0x21
   dbb2c:	dc0e      	bgt.n	dbb4c <iso_year_adjust+0x74>
   dbb2e:	2b20      	cmp	r3, #32
   dbb30:	da2f      	bge.n	dbb92 <iso_year_adjust+0xba>
   dbb32:	2b0d      	cmp	r3, #13
   dbb34:	dc02      	bgt.n	dbb3c <iso_year_adjust+0x64>
   dbb36:	2b0a      	cmp	r3, #10
   dbb38:	db05      	blt.n	dbb46 <iso_year_adjust+0x6e>
   dbb3a:	e02a      	b.n	dbb92 <iso_year_adjust+0xba>
   dbb3c:	2b10      	cmp	r3, #16
   dbb3e:	db26      	blt.n	dbb8e <iso_year_adjust+0xb6>
   dbb40:	2b11      	cmp	r3, #17
   dbb42:	dd26      	ble.n	dbb92 <iso_year_adjust+0xba>
   dbb44:	3b1c      	subs	r3, #28
   dbb46:	2b01      	cmp	r3, #1
   dbb48:	d923      	bls.n	dbb92 <iso_year_adjust+0xba>
   dbb4a:	e020      	b.n	dbb8e <iso_year_adjust+0xb6>
   dbb4c:	f241 62c6 	movw	r2, #5830	; 0x16c6
   dbb50:	4293      	cmp	r3, r2
   dbb52:	dc0e      	bgt.n	dbb72 <iso_year_adjust+0x9a>
   dbb54:	f241 62c2 	movw	r2, #5826	; 0x16c2
   dbb58:	4293      	cmp	r3, r2
   dbb5a:	da16      	bge.n	dbb8a <iso_year_adjust+0xb2>
   dbb5c:	f241 62a2 	movw	r2, #5794	; 0x16a2
   dbb60:	4293      	cmp	r3, r2
   dbb62:	d012      	beq.n	dbb8a <iso_year_adjust+0xb2>
   dbb64:	db13      	blt.n	dbb8e <iso_year_adjust+0xb6>
   dbb66:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
   dbb6a:	3b12      	subs	r3, #18
   dbb6c:	2b02      	cmp	r3, #2
   dbb6e:	d90c      	bls.n	dbb8a <iso_year_adjust+0xb2>
   dbb70:	e00d      	b.n	dbb8e <iso_year_adjust+0xb6>
   dbb72:	f241 62d5 	movw	r2, #5845	; 0x16d5
   dbb76:	4293      	cmp	r3, r2
   dbb78:	d007      	beq.n	dbb8a <iso_year_adjust+0xb2>
   dbb7a:	f241 62d7 	movw	r2, #5847	; 0x16d7
   dbb7e:	4293      	cmp	r3, r2
   dbb80:	d003      	beq.n	dbb8a <iso_year_adjust+0xb2>
   dbb82:	f241 62d3 	movw	r2, #5843	; 0x16d3
   dbb86:	4293      	cmp	r3, r2
   dbb88:	d101      	bne.n	dbb8e <iso_year_adjust+0xb6>
   dbb8a:	2001      	movs	r0, #1
   dbb8c:	bd10      	pop	{r4, pc}
   dbb8e:	2000      	movs	r0, #0
   dbb90:	bd10      	pop	{r4, pc}
   dbb92:	f04f 30ff 	mov.w	r0, #4294967295
   dbb96:	bd10      	pop	{r4, pc}

000dbb98 <strftime>:
   dbb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbb9c:	b093      	sub	sp, #76	; 0x4c
   dbb9e:	460e      	mov	r6, r1
   dbba0:	461d      	mov	r5, r3
   dbba2:	4607      	mov	r7, r0
   dbba4:	4691      	mov	r9, r2
   dbba6:	f000 fd63 	bl	dc670 <__get_current_time_locale>
   dbbaa:	2300      	movs	r3, #0
   dbbac:	9306      	str	r3, [sp, #24]
   dbbae:	461c      	mov	r4, r3
   dbbb0:	1e73      	subs	r3, r6, #1
   dbbb2:	9003      	str	r0, [sp, #12]
   dbbb4:	9302      	str	r3, [sp, #8]
   dbbb6:	f899 3000 	ldrb.w	r3, [r9]
   dbbba:	2b00      	cmp	r3, #0
   dbbbc:	f000 8492 	beq.w	dc4e4 <strftime+0x94c>
   dbbc0:	2b25      	cmp	r3, #37	; 0x25
   dbbc2:	d008      	beq.n	dbbd6 <strftime+0x3e>
   dbbc4:	9a02      	ldr	r2, [sp, #8]
   dbbc6:	4294      	cmp	r4, r2
   dbbc8:	f080 8490 	bcs.w	dc4ec <strftime+0x954>
   dbbcc:	553b      	strb	r3, [r7, r4]
   dbbce:	f109 0901 	add.w	r9, r9, #1
   dbbd2:	3401      	adds	r4, #1
   dbbd4:	e7ef      	b.n	dbbb6 <strftime+0x1e>
   dbbd6:	f899 a001 	ldrb.w	sl, [r9, #1]
   dbbda:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
   dbbde:	d007      	beq.n	dbbf0 <strftime+0x58>
   dbbe0:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   dbbe4:	d004      	beq.n	dbbf0 <strftime+0x58>
   dbbe6:	f109 0901 	add.w	r9, r9, #1
   dbbea:	f04f 0a00 	mov.w	sl, #0
   dbbee:	e001      	b.n	dbbf4 <strftime+0x5c>
   dbbf0:	f109 0902 	add.w	r9, r9, #2
   dbbf4:	f899 3000 	ldrb.w	r3, [r9]
   dbbf8:	3b31      	subs	r3, #49	; 0x31
   dbbfa:	2b08      	cmp	r3, #8
   dbbfc:	d808      	bhi.n	dbc10 <strftime+0x78>
   dbbfe:	4648      	mov	r0, r9
   dbc00:	220a      	movs	r2, #10
   dbc02:	a90a      	add	r1, sp, #40	; 0x28
   dbc04:	f000 fd2a 	bl	dc65c <strtoul>
   dbc08:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   dbc0c:	4680      	mov	r8, r0
   dbc0e:	e001      	b.n	dbc14 <strftime+0x7c>
   dbc10:	f04f 0800 	mov.w	r8, #0
   dbc14:	f899 3000 	ldrb.w	r3, [r9]
   dbc18:	2b45      	cmp	r3, #69	; 0x45
   dbc1a:	d001      	beq.n	dbc20 <strftime+0x88>
   dbc1c:	2b4f      	cmp	r3, #79	; 0x4f
   dbc1e:	d101      	bne.n	dbc24 <strftime+0x8c>
   dbc20:	f109 0901 	add.w	r9, r9, #1
   dbc24:	f899 0000 	ldrb.w	r0, [r9]
   dbc28:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   dbc2c:	2b55      	cmp	r3, #85	; 0x55
   dbc2e:	f200 845d 	bhi.w	dc4ec <strftime+0x954>
   dbc32:	e8df f013 	tbh	[pc, r3, lsl #1]
   dbc36:	044a      	.short	0x044a
   dbc38:	045b045b 	.word	0x045b045b
   dbc3c:	045b045b 	.word	0x045b045b
   dbc40:	045b045b 	.word	0x045b045b
   dbc44:	045b045b 	.word	0x045b045b
   dbc48:	045b045b 	.word	0x045b045b
   dbc4c:	045b045b 	.word	0x045b045b
   dbc50:	045b045b 	.word	0x045b045b
   dbc54:	045b045b 	.word	0x045b045b
   dbc58:	045b045b 	.word	0x045b045b
   dbc5c:	045b045b 	.word	0x045b045b
   dbc60:	045b045b 	.word	0x045b045b
   dbc64:	045b045b 	.word	0x045b045b
   dbc68:	045b045b 	.word	0x045b045b
   dbc6c:	006f045b 	.word	0x006f045b
   dbc70:	00d400a1 	.word	0x00d400a1
   dbc74:	045b011a 	.word	0x045b011a
   dbc78:	01a0013f 	.word	0x01a0013f
   dbc7c:	022d0226 	.word	0x022d0226
   dbc80:	045b045b 	.word	0x045b045b
   dbc84:	0260045b 	.word	0x0260045b
   dbc88:	045b045b 	.word	0x045b045b
   dbc8c:	045b0268 	.word	0x045b0268
   dbc90:	031d0297 	.word	0x031d0297
   dbc94:	033b0325 	.word	0x033b0325
   dbc98:	03860343 	.word	0x03860343
   dbc9c:	03a000c6 	.word	0x03a000c6
   dbca0:	045b041f 	.word	0x045b041f
   dbca4:	045b045b 	.word	0x045b045b
   dbca8:	045b045b 	.word	0x045b045b
   dbcac:	0056045b 	.word	0x0056045b
   dbcb0:	00ba0089 	.word	0x00ba0089
   dbcb4:	010c010c 	.word	0x010c010c
   dbcb8:	0171045b 	.word	0x0171045b
   dbcbc:	045b0089 	.word	0x045b0089
   dbcc0:	0226023d 	.word	0x0226023d
   dbcc4:	025d022d 	.word	0x025d022d
   dbcc8:	045b0262 	.word	0x045b0262
   dbccc:	045b0268 	.word	0x045b0268
   dbcd0:	029c00be 	.word	0x029c00be
   dbcd4:	032e031f 	.word	0x032e031f
   dbcd8:	037f045b 	.word	0x037f045b
   dbcdc:	039200c2 	.word	0x039200c2
   dbce0:	03e7      	.short	0x03e7
   dbce2:	69ab      	ldr	r3, [r5, #24]
   dbce4:	9a03      	ldr	r2, [sp, #12]
   dbce6:	3318      	adds	r3, #24
   dbce8:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   dbcec:	4640      	mov	r0, r8
   dbcee:	f000 fc07 	bl	dc500 <strlen>
   dbcf2:	f108 38ff 	add.w	r8, r8, #4294967295
   dbcf6:	193b      	adds	r3, r7, r4
   dbcf8:	4420      	add	r0, r4
   dbcfa:	4284      	cmp	r4, r0
   dbcfc:	f000 83eb 	beq.w	dc4d6 <strftime+0x93e>
   dbd00:	9a02      	ldr	r2, [sp, #8]
   dbd02:	4294      	cmp	r4, r2
   dbd04:	f080 83f2 	bcs.w	dc4ec <strftime+0x954>
   dbd08:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dbd0c:	f803 2b01 	strb.w	r2, [r3], #1
   dbd10:	3401      	adds	r4, #1
   dbd12:	e7f2      	b.n	dbcfa <strftime+0x162>
   dbd14:	69ab      	ldr	r3, [r5, #24]
   dbd16:	9a03      	ldr	r2, [sp, #12]
   dbd18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dbd1c:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
   dbd20:	4640      	mov	r0, r8
   dbd22:	f000 fbed 	bl	dc500 <strlen>
   dbd26:	f108 38ff 	add.w	r8, r8, #4294967295
   dbd2a:	193b      	adds	r3, r7, r4
   dbd2c:	4420      	add	r0, r4
   dbd2e:	4284      	cmp	r4, r0
   dbd30:	f000 83d1 	beq.w	dc4d6 <strftime+0x93e>
   dbd34:	9a02      	ldr	r2, [sp, #8]
   dbd36:	4294      	cmp	r4, r2
   dbd38:	f080 83d8 	bcs.w	dc4ec <strftime+0x954>
   dbd3c:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dbd40:	f803 2b01 	strb.w	r2, [r3], #1
   dbd44:	3401      	adds	r4, #1
   dbd46:	e7f2      	b.n	dbd2e <strftime+0x196>
   dbd48:	692b      	ldr	r3, [r5, #16]
   dbd4a:	9a03      	ldr	r2, [sp, #12]
   dbd4c:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   dbd50:	4640      	mov	r0, r8
   dbd52:	f000 fbd5 	bl	dc500 <strlen>
   dbd56:	f108 38ff 	add.w	r8, r8, #4294967295
   dbd5a:	193b      	adds	r3, r7, r4
   dbd5c:	4420      	add	r0, r4
   dbd5e:	4284      	cmp	r4, r0
   dbd60:	f000 83b9 	beq.w	dc4d6 <strftime+0x93e>
   dbd64:	9a02      	ldr	r2, [sp, #8]
   dbd66:	4294      	cmp	r4, r2
   dbd68:	f080 83c0 	bcs.w	dc4ec <strftime+0x954>
   dbd6c:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dbd70:	f803 2b01 	strb.w	r2, [r3], #1
   dbd74:	3401      	adds	r4, #1
   dbd76:	e7f2      	b.n	dbd5e <strftime+0x1c6>
   dbd78:	692b      	ldr	r3, [r5, #16]
   dbd7a:	9a03      	ldr	r2, [sp, #12]
   dbd7c:	330c      	adds	r3, #12
   dbd7e:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   dbd82:	4640      	mov	r0, r8
   dbd84:	f000 fbbc 	bl	dc500 <strlen>
   dbd88:	f108 38ff 	add.w	r8, r8, #4294967295
   dbd8c:	193b      	adds	r3, r7, r4
   dbd8e:	4420      	add	r0, r4
   dbd90:	4284      	cmp	r4, r0
   dbd92:	f000 83a0 	beq.w	dc4d6 <strftime+0x93e>
   dbd96:	9a02      	ldr	r2, [sp, #8]
   dbd98:	4294      	cmp	r4, r2
   dbd9a:	f080 83a7 	bcs.w	dc4ec <strftime+0x954>
   dbd9e:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dbda2:	f803 2b01 	strb.w	r2, [r3], #1
   dbda6:	3401      	adds	r4, #1
   dbda8:	e7f2      	b.n	dbd90 <strftime+0x1f8>
   dbdaa:	9b03      	ldr	r3, [sp, #12]
   dbdac:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
   dbdb0:	e00a      	b.n	dbdc8 <strftime+0x230>
   dbdb2:	9b03      	ldr	r3, [sp, #12]
   dbdb4:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
   dbdb8:	e006      	b.n	dbdc8 <strftime+0x230>
   dbdba:	9b03      	ldr	r3, [sp, #12]
   dbdbc:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
   dbdc0:	e002      	b.n	dbdc8 <strftime+0x230>
   dbdc2:	9b03      	ldr	r3, [sp, #12]
   dbdc4:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
   dbdc8:	4640      	mov	r0, r8
   dbdca:	f000 fb99 	bl	dc500 <strlen>
   dbdce:	f898 3000 	ldrb.w	r3, [r8]
   dbdd2:	2b00      	cmp	r3, #0
   dbdd4:	f000 837f 	beq.w	dc4d6 <strftime+0x93e>
   dbdd8:	462b      	mov	r3, r5
   dbdda:	4642      	mov	r2, r8
   dbddc:	e093      	b.n	dbf06 <strftime+0x36e>
   dbdde:	49b6      	ldr	r1, [pc, #728]	; (dc0b8 <strftime+0x520>)
   dbde0:	f8d5 b014 	ldr.w	fp, [r5, #20]
   dbde4:	458b      	cmp	fp, r1
   dbde6:	bfac      	ite	ge
   dbde8:	2100      	movge	r1, #0
   dbdea:	2101      	movlt	r1, #1
   dbdec:	f1bb 0f00 	cmp.w	fp, #0
   dbdf0:	db04      	blt.n	dbdfc <strftime+0x264>
   dbdf2:	2064      	movs	r0, #100	; 0x64
   dbdf4:	fb9b f0f0 	sdiv	r0, fp, r0
   dbdf8:	3013      	adds	r0, #19
   dbdfa:	e008      	b.n	dbe0e <strftime+0x276>
   dbdfc:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
   dbe00:	9107      	str	r1, [sp, #28]
   dbe02:	f000 fe75 	bl	dcaf0 <abs>
   dbe06:	9907      	ldr	r1, [sp, #28]
   dbe08:	2364      	movs	r3, #100	; 0x64
   dbe0a:	fb90 f0f3 	sdiv	r0, r0, r3
   dbe0e:	f1ba 0f00 	cmp.w	sl, #0
   dbe12:	d008      	beq.n	dbe26 <strftime+0x28e>
   dbe14:	2863      	cmp	r0, #99	; 0x63
   dbe16:	dd09      	ble.n	dbe2c <strftime+0x294>
   dbe18:	4ba8      	ldr	r3, [pc, #672]	; (dc0bc <strftime+0x524>)
   dbe1a:	4aa9      	ldr	r2, [pc, #676]	; (dc0c0 <strftime+0x528>)
   dbe1c:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   dbe20:	bf18      	it	ne
   dbe22:	4613      	movne	r3, r2
   dbe24:	e003      	b.n	dbe2e <strftime+0x296>
   dbe26:	4ba6      	ldr	r3, [pc, #664]	; (dc0c0 <strftime+0x528>)
   dbe28:	4aa6      	ldr	r2, [pc, #664]	; (dc0c4 <strftime+0x52c>)
   dbe2a:	e001      	b.n	dbe30 <strftime+0x298>
   dbe2c:	4ba4      	ldr	r3, [pc, #656]	; (dc0c0 <strftime+0x528>)
   dbe2e:	4aa6      	ldr	r2, [pc, #664]	; (dc0c8 <strftime+0x530>)
   dbe30:	9001      	str	r0, [sp, #4]
   dbe32:	f1b8 0f01 	cmp.w	r8, #1
   dbe36:	bf98      	it	ls
   dbe38:	f04f 0802 	movls.w	r8, #2
   dbe3c:	ebc1 0108 	rsb	r1, r1, r8
   dbe40:	9100      	str	r1, [sp, #0]
   dbe42:	489d      	ldr	r0, [pc, #628]	; (dc0b8 <strftime+0x520>)
   dbe44:	49a1      	ldr	r1, [pc, #644]	; (dc0cc <strftime+0x534>)
   dbe46:	4583      	cmp	fp, r0
   dbe48:	bfb8      	it	lt
   dbe4a:	460b      	movlt	r3, r1
   dbe4c:	e21e      	b.n	dc28c <strftime+0x6f4>
   dbe4e:	4aa0      	ldr	r2, [pc, #640]	; (dc0d0 <strftime+0x538>)
   dbe50:	49a0      	ldr	r1, [pc, #640]	; (dc0d4 <strftime+0x53c>)
   dbe52:	68eb      	ldr	r3, [r5, #12]
   dbe54:	2864      	cmp	r0, #100	; 0x64
   dbe56:	bf08      	it	eq
   dbe58:	460a      	moveq	r2, r1
   dbe5a:	1b31      	subs	r1, r6, r4
   dbe5c:	1938      	adds	r0, r7, r4
   dbe5e:	f7fc ff8d 	bl	d8d7c <sniprintf>
   dbe62:	2800      	cmp	r0, #0
   dbe64:	f280 8302 	bge.w	dc46c <strftime+0x8d4>
   dbe68:	e340      	b.n	dc4ec <strftime+0x954>
   dbe6a:	6968      	ldr	r0, [r5, #20]
   dbe6c:	692b      	ldr	r3, [r5, #16]
   dbe6e:	2800      	cmp	r0, #0
   dbe70:	f103 0b01 	add.w	fp, r3, #1
   dbe74:	eb07 0804 	add.w	r8, r7, r4
   dbe78:	ebc4 0a06 	rsb	sl, r4, r6
   dbe7c:	68eb      	ldr	r3, [r5, #12]
   dbe7e:	db05      	blt.n	dbe8c <strftime+0x2f4>
   dbe80:	2264      	movs	r2, #100	; 0x64
   dbe82:	fb90 f1f2 	sdiv	r1, r0, r2
   dbe86:	fb02 0011 	mls	r0, r2, r1, r0
   dbe8a:	e00a      	b.n	dbea2 <strftime+0x30a>
   dbe8c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dbe90:	9307      	str	r3, [sp, #28]
   dbe92:	f000 fe2d 	bl	dcaf0 <abs>
   dbe96:	2264      	movs	r2, #100	; 0x64
   dbe98:	9b07      	ldr	r3, [sp, #28]
   dbe9a:	fb90 f1f2 	sdiv	r1, r0, r2
   dbe9e:	fb01 0012 	mls	r0, r1, r2, r0
   dbea2:	4a8d      	ldr	r2, [pc, #564]	; (dc0d8 <strftime+0x540>)
   dbea4:	9001      	str	r0, [sp, #4]
   dbea6:	9300      	str	r3, [sp, #0]
   dbea8:	4651      	mov	r1, sl
   dbeaa:	465b      	mov	r3, fp
   dbeac:	4640      	mov	r0, r8
   dbeae:	f7fc ff65 	bl	d8d7c <sniprintf>
   dbeb2:	e7d6      	b.n	dbe62 <strftime+0x2ca>
   dbeb4:	2325      	movs	r3, #37	; 0x25
   dbeb6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   dbeba:	f1ba 0f00 	cmp.w	sl, #0
   dbebe:	d007      	beq.n	dbed0 <strftime+0x338>
   dbec0:	f1b8 0f05 	cmp.w	r8, #5
   dbec4:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
   dbec8:	bf98      	it	ls
   dbeca:	f04f 0806 	movls.w	r8, #6
   dbece:	e004      	b.n	dbeda <strftime+0x342>
   dbed0:	232b      	movs	r3, #43	; 0x2b
   dbed2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   dbed6:	f04f 080a 	mov.w	r8, #10
   dbeda:	f1b8 0306 	subs.w	r3, r8, #6
   dbede:	d102      	bne.n	dbee6 <strftime+0x34e>
   dbee0:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   dbee4:	e00a      	b.n	dbefc <strftime+0x364>
   dbee6:	4a7d      	ldr	r2, [pc, #500]	; (dc0dc <strftime+0x544>)
   dbee8:	211e      	movs	r1, #30
   dbeea:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   dbeee:	f7fc ff45 	bl	d8d7c <sniprintf>
   dbef2:	2800      	cmp	r0, #0
   dbef4:	ddf4      	ble.n	dbee0 <strftime+0x348>
   dbef6:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   dbefa:	4418      	add	r0, r3
   dbefc:	4978      	ldr	r1, [pc, #480]	; (dc0e0 <strftime+0x548>)
   dbefe:	f7ff fde3 	bl	dbac8 <strcpy>
   dbf02:	462b      	mov	r3, r5
   dbf04:	aa0a      	add	r2, sp, #40	; 0x28
   dbf06:	1b31      	subs	r1, r6, r4
   dbf08:	1938      	adds	r0, r7, r4
   dbf0a:	f7ff fe45 	bl	dbb98 <strftime>
   dbf0e:	2800      	cmp	r0, #0
   dbf10:	f340 82ec 	ble.w	dc4ec <strftime+0x954>
   dbf14:	4404      	add	r4, r0
   dbf16:	e2de      	b.n	dc4d6 <strftime+0x93e>
   dbf18:	4628      	mov	r0, r5
   dbf1a:	f7ff fddd 	bl	dbad8 <iso_year_adjust>
   dbf1e:	4680      	mov	r8, r0
   dbf20:	6968      	ldr	r0, [r5, #20]
   dbf22:	2800      	cmp	r0, #0
   dbf24:	db05      	blt.n	dbf32 <strftime+0x39a>
   dbf26:	2264      	movs	r2, #100	; 0x64
   dbf28:	fb90 f1f2 	sdiv	r1, r0, r2
   dbf2c:	fb02 0011 	mls	r0, r2, r1, r0
   dbf30:	e008      	b.n	dbf44 <strftime+0x3ac>
   dbf32:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dbf36:	f000 fddb 	bl	dcaf0 <abs>
   dbf3a:	2264      	movs	r2, #100	; 0x64
   dbf3c:	fb90 f3f2 	sdiv	r3, r0, r2
   dbf40:	fb03 0012 	mls	r0, r3, r2, r0
   dbf44:	f1b8 0f00 	cmp.w	r8, #0
   dbf48:	da06      	bge.n	dbf58 <strftime+0x3c0>
   dbf4a:	696a      	ldr	r2, [r5, #20]
   dbf4c:	4b65      	ldr	r3, [pc, #404]	; (dc0e4 <strftime+0x54c>)
   dbf4e:	429a      	cmp	r2, r3
   dbf50:	bfb8      	it	lt
   dbf52:	f04f 0801 	movlt.w	r8, #1
   dbf56:	e006      	b.n	dbf66 <strftime+0x3ce>
   dbf58:	d005      	beq.n	dbf66 <strftime+0x3ce>
   dbf5a:	696a      	ldr	r2, [r5, #20]
   dbf5c:	4b56      	ldr	r3, [pc, #344]	; (dc0b8 <strftime+0x520>)
   dbf5e:	429a      	cmp	r2, r3
   dbf60:	bfb8      	it	lt
   dbf62:	f04f 38ff 	movlt.w	r8, #4294967295
   dbf66:	2364      	movs	r3, #100	; 0x64
   dbf68:	4440      	add	r0, r8
   dbf6a:	fb90 f2f3 	sdiv	r2, r0, r3
   dbf6e:	fb03 0012 	mls	r0, r3, r2, r0
   dbf72:	4418      	add	r0, r3
   dbf74:	e1f9      	b.n	dc36a <strftime+0x7d2>
   dbf76:	4b50      	ldr	r3, [pc, #320]	; (dc0b8 <strftime+0x520>)
   dbf78:	6969      	ldr	r1, [r5, #20]
   dbf7a:	9108      	str	r1, [sp, #32]
   dbf7c:	4299      	cmp	r1, r3
   dbf7e:	bfac      	ite	ge
   dbf80:	2300      	movge	r3, #0
   dbf82:	2301      	movlt	r3, #1
   dbf84:	4628      	mov	r0, r5
   dbf86:	9307      	str	r3, [sp, #28]
   dbf88:	f7ff fda6 	bl	dbad8 <iso_year_adjust>
   dbf8c:	9908      	ldr	r1, [sp, #32]
   dbf8e:	2900      	cmp	r1, #0
   dbf90:	4683      	mov	fp, r0
   dbf92:	db04      	blt.n	dbf9e <strftime+0x406>
   dbf94:	2364      	movs	r3, #100	; 0x64
   dbf96:	fb91 f3f3 	sdiv	r3, r1, r3
   dbf9a:	3313      	adds	r3, #19
   dbf9c:	e008      	b.n	dbfb0 <strftime+0x418>
   dbf9e:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   dbfa2:	9108      	str	r1, [sp, #32]
   dbfa4:	f000 fda4 	bl	dcaf0 <abs>
   dbfa8:	9908      	ldr	r1, [sp, #32]
   dbfaa:	2364      	movs	r3, #100	; 0x64
   dbfac:	fb90 f3f3 	sdiv	r3, r0, r3
   dbfb0:	6968      	ldr	r0, [r5, #20]
   dbfb2:	2800      	cmp	r0, #0
   dbfb4:	db06      	blt.n	dbfc4 <strftime+0x42c>
   dbfb6:	f04f 0e64 	mov.w	lr, #100	; 0x64
   dbfba:	fb90 fcfe 	sdiv	ip, r0, lr
   dbfbe:	fb0e 001c 	mls	r0, lr, ip, r0
   dbfc2:	e00d      	b.n	dbfe0 <strftime+0x448>
   dbfc4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dbfc8:	9109      	str	r1, [sp, #36]	; 0x24
   dbfca:	9308      	str	r3, [sp, #32]
   dbfcc:	f000 fd90 	bl	dcaf0 <abs>
   dbfd0:	f04f 0e64 	mov.w	lr, #100	; 0x64
   dbfd4:	9909      	ldr	r1, [sp, #36]	; 0x24
   dbfd6:	9b08      	ldr	r3, [sp, #32]
   dbfd8:	fb90 fcfe 	sdiv	ip, r0, lr
   dbfdc:	fb0c 001e 	mls	r0, ip, lr, r0
   dbfe0:	f1bb 0f00 	cmp.w	fp, #0
   dbfe4:	da08      	bge.n	dbff8 <strftime+0x460>
   dbfe6:	6969      	ldr	r1, [r5, #20]
   dbfe8:	4a3e      	ldr	r2, [pc, #248]	; (dc0e4 <strftime+0x54c>)
   dbfea:	4291      	cmp	r1, r2
   dbfec:	da0a      	bge.n	dc004 <strftime+0x46c>
   dbfee:	f04f 0b01 	mov.w	fp, #1
   dbff2:	f8cd b01c 	str.w	fp, [sp, #28]
   dbff6:	e005      	b.n	dc004 <strftime+0x46c>
   dbff8:	d004      	beq.n	dc004 <strftime+0x46c>
   dbffa:	4a2f      	ldr	r2, [pc, #188]	; (dc0b8 <strftime+0x520>)
   dbffc:	4291      	cmp	r1, r2
   dbffe:	bfb8      	it	lt
   dc000:	f04f 3bff 	movlt.w	fp, #4294967295
   dc004:	eb0b 0200 	add.w	r2, fp, r0
   dc008:	1c50      	adds	r0, r2, #1
   dc00a:	d102      	bne.n	dc012 <strftime+0x47a>
   dc00c:	3b01      	subs	r3, #1
   dc00e:	2263      	movs	r2, #99	; 0x63
   dc010:	e003      	b.n	dc01a <strftime+0x482>
   dc012:	2a64      	cmp	r2, #100	; 0x64
   dc014:	bf04      	itt	eq
   dc016:	3301      	addeq	r3, #1
   dc018:	2200      	moveq	r2, #0
   dc01a:	2064      	movs	r0, #100	; 0x64
   dc01c:	fb00 2303 	mla	r3, r0, r3, r2
   dc020:	9a07      	ldr	r2, [sp, #28]
   dc022:	b142      	cbz	r2, dc036 <strftime+0x49e>
   dc024:	222d      	movs	r2, #45	; 0x2d
   dc026:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   dc02a:	f1b8 0f00 	cmp.w	r8, #0
   dc02e:	d013      	beq.n	dc058 <strftime+0x4c0>
   dc030:	f108 38ff 	add.w	r8, r8, #4294967295
   dc034:	e010      	b.n	dc058 <strftime+0x4c0>
   dc036:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   dc03a:	d110      	bne.n	dc05e <strftime+0x4c6>
   dc03c:	f242 720f 	movw	r2, #9999	; 0x270f
   dc040:	4293      	cmp	r3, r2
   dc042:	d90c      	bls.n	dc05e <strftime+0x4c6>
   dc044:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   dc048:	f1b8 0f00 	cmp.w	r8, #0
   dc04c:	d1f0      	bne.n	dc030 <strftime+0x498>
   dc04e:	aa12      	add	r2, sp, #72	; 0x48
   dc050:	2125      	movs	r1, #37	; 0x25
   dc052:	f802 1d1f 	strb.w	r1, [r2, #-31]!
   dc056:	e00a      	b.n	dc06e <strftime+0x4d6>
   dc058:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   dc05c:	e000      	b.n	dc060 <strftime+0x4c8>
   dc05e:	aa0a      	add	r2, sp, #40	; 0x28
   dc060:	2125      	movs	r1, #37	; 0x25
   dc062:	7011      	strb	r1, [r2, #0]
   dc064:	f1ba 0f00 	cmp.w	sl, #0
   dc068:	d101      	bne.n	dc06e <strftime+0x4d6>
   dc06a:	1c50      	adds	r0, r2, #1
   dc06c:	e002      	b.n	dc074 <strftime+0x4dc>
   dc06e:	2130      	movs	r1, #48	; 0x30
   dc070:	1c90      	adds	r0, r2, #2
   dc072:	7051      	strb	r1, [r2, #1]
   dc074:	491c      	ldr	r1, [pc, #112]	; (dc0e8 <strftime+0x550>)
   dc076:	9307      	str	r3, [sp, #28]
   dc078:	f7ff fd26 	bl	dbac8 <strcpy>
   dc07c:	9b07      	ldr	r3, [sp, #28]
   dc07e:	9300      	str	r3, [sp, #0]
   dc080:	e1ad      	b.n	dc3de <strftime+0x846>
   dc082:	4a14      	ldr	r2, [pc, #80]	; (dc0d4 <strftime+0x53c>)
   dc084:	4912      	ldr	r1, [pc, #72]	; (dc0d0 <strftime+0x538>)
   dc086:	68ab      	ldr	r3, [r5, #8]
   dc088:	286b      	cmp	r0, #107	; 0x6b
   dc08a:	bf08      	it	eq
   dc08c:	460a      	moveq	r2, r1
   dc08e:	e6e4      	b.n	dbe5a <strftime+0x2c2>
   dc090:	68a9      	ldr	r1, [r5, #8]
   dc092:	230c      	movs	r3, #12
   dc094:	b131      	cbz	r1, dc0a4 <strftime+0x50c>
   dc096:	4299      	cmp	r1, r3
   dc098:	bf0e      	itee	eq
   dc09a:	460b      	moveq	r3, r1
   dc09c:	fb91 f2f3 	sdivne	r2, r1, r3
   dc0a0:	fb03 1312 	mlsne	r3, r3, r2, r1
   dc0a4:	4a0a      	ldr	r2, [pc, #40]	; (dc0d0 <strftime+0x538>)
   dc0a6:	490b      	ldr	r1, [pc, #44]	; (dc0d4 <strftime+0x53c>)
   dc0a8:	2849      	cmp	r0, #73	; 0x49
   dc0aa:	bf08      	it	eq
   dc0ac:	460a      	moveq	r2, r1
   dc0ae:	e6d4      	b.n	dbe5a <strftime+0x2c2>
   dc0b0:	69eb      	ldr	r3, [r5, #28]
   dc0b2:	4a0e      	ldr	r2, [pc, #56]	; (dc0ec <strftime+0x554>)
   dc0b4:	3301      	adds	r3, #1
   dc0b6:	e6d0      	b.n	dbe5a <strftime+0x2c2>
   dc0b8:	fffff894 	.word	0xfffff894
   dc0bc:	000dd63f 	.word	0x000dd63f
   dc0c0:	000dd1c2 	.word	0x000dd1c2
   dc0c4:	000dd630 	.word	0x000dd630
   dc0c8:	000dd637 	.word	0x000dd637
   dc0cc:	000dd641 	.word	0x000dd641
   dc0d0:	000dd643 	.word	0x000dd643
   dc0d4:	000dd651 	.word	0x000dd651
   dc0d8:	000dd647 	.word	0x000dd647
   dc0dc:	000dd656 	.word	0x000dd656
   dc0e0:	000dd65a 	.word	0x000dd65a
   dc0e4:	fffff895 	.word	0xfffff895
   dc0e8:	000dd662 	.word	0x000dd662
   dc0ec:	000dd666 	.word	0x000dd666
   dc0f0:	692b      	ldr	r3, [r5, #16]
   dc0f2:	3301      	adds	r3, #1
   dc0f4:	e13d      	b.n	dc372 <strftime+0x7da>
   dc0f6:	686b      	ldr	r3, [r5, #4]
   dc0f8:	e13b      	b.n	dc372 <strftime+0x7da>
   dc0fa:	9b02      	ldr	r3, [sp, #8]
   dc0fc:	429c      	cmp	r4, r3
   dc0fe:	f080 81f5 	bcs.w	dc4ec <strftime+0x954>
   dc102:	230a      	movs	r3, #10
   dc104:	e1e5      	b.n	dc4d2 <strftime+0x93a>
   dc106:	68ab      	ldr	r3, [r5, #8]
   dc108:	9a03      	ldr	r2, [sp, #12]
   dc10a:	2b0b      	cmp	r3, #11
   dc10c:	bfcc      	ite	gt
   dc10e:	23a4      	movgt	r3, #164	; 0xa4
   dc110:	23a0      	movle	r3, #160	; 0xa0
   dc112:	4413      	add	r3, r2
   dc114:	f8d3 8004 	ldr.w	r8, [r3, #4]
   dc118:	4640      	mov	r0, r8
   dc11a:	f000 f9f1 	bl	dc500 <strlen>
   dc11e:	4bb2      	ldr	r3, [pc, #712]	; (dc3e8 <strftime+0x850>)
   dc120:	f8d3 e000 	ldr.w	lr, [r3]
   dc124:	1939      	adds	r1, r7, r4
   dc126:	4642      	mov	r2, r8
   dc128:	4420      	add	r0, r4
   dc12a:	4284      	cmp	r4, r0
   dc12c:	f000 81d3 	beq.w	dc4d6 <strftime+0x93e>
   dc130:	9b02      	ldr	r3, [sp, #8]
   dc132:	429c      	cmp	r4, r3
   dc134:	f080 81da 	bcs.w	dc4ec <strftime+0x954>
   dc138:	f899 3000 	ldrb.w	r3, [r9]
   dc13c:	2b50      	cmp	r3, #80	; 0x50
   dc13e:	f104 0401 	add.w	r4, r4, #1
   dc142:	7813      	ldrb	r3, [r2, #0]
   dc144:	d10a      	bne.n	dc15c <strftime+0x5c4>
   dc146:	eb0e 0c03 	add.w	ip, lr, r3
   dc14a:	f89c c001 	ldrb.w	ip, [ip, #1]
   dc14e:	f00c 0c03 	and.w	ip, ip, #3
   dc152:	f1bc 0f01 	cmp.w	ip, #1
   dc156:	bf08      	it	eq
   dc158:	3320      	addeq	r3, #32
   dc15a:	b2db      	uxtb	r3, r3
   dc15c:	f801 3b01 	strb.w	r3, [r1], #1
   dc160:	3201      	adds	r2, #1
   dc162:	e7e2      	b.n	dc12a <strftime+0x592>
   dc164:	686b      	ldr	r3, [r5, #4]
   dc166:	9300      	str	r3, [sp, #0]
   dc168:	4aa0      	ldr	r2, [pc, #640]	; (dc3ec <strftime+0x854>)
   dc16a:	68ab      	ldr	r3, [r5, #8]
   dc16c:	e139      	b.n	dc3e2 <strftime+0x84a>
   dc16e:	6a2b      	ldr	r3, [r5, #32]
   dc170:	2b00      	cmp	r3, #0
   dc172:	db17      	blt.n	dc1a4 <strftime+0x60c>
   dc174:	f000 fb34 	bl	dc7e0 <__tz_lock>
   dc178:	9b06      	ldr	r3, [sp, #24]
   dc17a:	b91b      	cbnz	r3, dc184 <strftime+0x5ec>
   dc17c:	f000 fb32 	bl	dc7e4 <_tzset_unlocked>
   dc180:	2301      	movs	r3, #1
   dc182:	9306      	str	r3, [sp, #24]
   dc184:	f000 fcfc 	bl	dcb80 <__gettzinfo>
   dc188:	6a2b      	ldr	r3, [r5, #32]
   dc18a:	2b00      	cmp	r3, #0
   dc18c:	bfd4      	ite	le
   dc18e:	2300      	movle	r3, #0
   dc190:	2301      	movgt	r3, #1
   dc192:	221c      	movs	r2, #28
   dc194:	fb02 0003 	mla	r0, r2, r3, r0
   dc198:	6a03      	ldr	r3, [r0, #32]
   dc19a:	f1c3 0800 	rsb	r8, r3, #0
   dc19e:	f000 fb20 	bl	dc7e2 <__tz_unlock>
   dc1a2:	e001      	b.n	dc1a8 <strftime+0x610>
   dc1a4:	f04f 0800 	mov.w	r8, #0
   dc1a8:	f8d5 e014 	ldr.w	lr, [r5, #20]
   dc1ac:	4670      	mov	r0, lr
   dc1ae:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
   dc1b2:	ea4f 71e0 	mov.w	r1, r0, asr #31
   dc1b6:	f141 33ff 	adc.w	r3, r1, #4294967295
   dc1ba:	2a00      	cmp	r2, #0
   dc1bc:	f173 0b00 	sbcs.w	fp, r3, #0
   dc1c0:	ebc4 0c06 	rsb	ip, r4, r6
   dc1c4:	eb07 0a04 	add.w	sl, r7, r4
   dc1c8:	da03      	bge.n	dc1d2 <strftime+0x63a>
   dc1ca:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
   dc1ce:	f141 33ff 	adc.w	r3, r1, #4294967295
   dc1d2:	0891      	lsrs	r1, r2, #2
   dc1d4:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
   dc1d8:	109b      	asrs	r3, r3, #2
   dc1da:	9104      	str	r1, [sp, #16]
   dc1dc:	9305      	str	r3, [sp, #20]
   dc1de:	f10e 31ff 	add.w	r1, lr, #4294967295
   dc1e2:	2364      	movs	r3, #100	; 0x64
   dc1e4:	fb91 f1f3 	sdiv	r1, r1, r3
   dc1e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   dc1ec:	1a52      	subs	r2, r2, r1
   dc1ee:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   dc1f2:	f20e 102b 	addw	r0, lr, #299	; 0x12b
   dc1f6:	f44f 71c8 	mov.w	r1, #400	; 0x190
   dc1fa:	fb90 f1f1 	sdiv	r1, r0, r1
   dc1fe:	1852      	adds	r2, r2, r1
   dc200:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   dc204:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
   dc208:	f240 116d 	movw	r1, #365	; 0x16d
   dc20c:	fb01 fe0e 	mul.w	lr, r1, lr
   dc210:	69e9      	ldr	r1, [r5, #28]
   dc212:	eb12 020e 	adds.w	r2, r2, lr
   dc216:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
   dc21a:	1852      	adds	r2, r2, r1
   dc21c:	f04f 0e18 	mov.w	lr, #24
   dc220:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   dc224:	fba2 010e 	umull	r0, r1, r2, lr
   dc228:	fb0e 1103 	mla	r1, lr, r3, r1
   dc22c:	68ab      	ldr	r3, [r5, #8]
   dc22e:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
   dc232:	18c0      	adds	r0, r0, r3
   dc234:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   dc238:	fba0 230e 	umull	r2, r3, r0, lr
   dc23c:	fb0e 3301 	mla	r3, lr, r1, r3
   dc240:	6869      	ldr	r1, [r5, #4]
   dc242:	1852      	adds	r2, r2, r1
   dc244:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   dc248:	fba2 010e 	umull	r0, r1, r2, lr
   dc24c:	fb0e 1103 	mla	r1, lr, r3, r1
   dc250:	682b      	ldr	r3, [r5, #0]
   dc252:	4a67      	ldr	r2, [pc, #412]	; (dc3f0 <strftime+0x858>)
   dc254:	18c0      	adds	r0, r0, r3
   dc256:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   dc25a:	ebb0 0008 	subs.w	r0, r0, r8
   dc25e:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
   dc262:	e9cd 0100 	strd	r0, r1, [sp]
   dc266:	4661      	mov	r1, ip
   dc268:	4650      	mov	r0, sl
   dc26a:	f7fc fd87 	bl	d8d7c <sniprintf>
   dc26e:	e5f8      	b.n	dbe62 <strftime+0x2ca>
   dc270:	682b      	ldr	r3, [r5, #0]
   dc272:	e07e      	b.n	dc372 <strftime+0x7da>
   dc274:	9b02      	ldr	r3, [sp, #8]
   dc276:	429c      	cmp	r4, r3
   dc278:	f080 8138 	bcs.w	dc4ec <strftime+0x954>
   dc27c:	2309      	movs	r3, #9
   dc27e:	e128      	b.n	dc4d2 <strftime+0x93a>
   dc280:	682b      	ldr	r3, [r5, #0]
   dc282:	9301      	str	r3, [sp, #4]
   dc284:	686b      	ldr	r3, [r5, #4]
   dc286:	9300      	str	r3, [sp, #0]
   dc288:	4a5a      	ldr	r2, [pc, #360]	; (dc3f4 <strftime+0x85c>)
   dc28a:	68ab      	ldr	r3, [r5, #8]
   dc28c:	1b31      	subs	r1, r6, r4
   dc28e:	1938      	adds	r0, r7, r4
   dc290:	e60d      	b.n	dbeae <strftime+0x316>
   dc292:	9b02      	ldr	r3, [sp, #8]
   dc294:	429c      	cmp	r4, r3
   dc296:	f080 8129 	bcs.w	dc4ec <strftime+0x954>
   dc29a:	69ab      	ldr	r3, [r5, #24]
   dc29c:	1c62      	adds	r2, r4, #1
   dc29e:	b90b      	cbnz	r3, dc2a4 <strftime+0x70c>
   dc2a0:	2337      	movs	r3, #55	; 0x37
   dc2a2:	e000      	b.n	dc2a6 <strftime+0x70e>
   dc2a4:	3330      	adds	r3, #48	; 0x30
   dc2a6:	553b      	strb	r3, [r7, r4]
   dc2a8:	4614      	mov	r4, r2
   dc2aa:	e114      	b.n	dc4d6 <strftime+0x93e>
   dc2ac:	69eb      	ldr	r3, [r5, #28]
   dc2ae:	69aa      	ldr	r2, [r5, #24]
   dc2b0:	3307      	adds	r3, #7
   dc2b2:	1a9b      	subs	r3, r3, r2
   dc2b4:	2207      	movs	r2, #7
   dc2b6:	fb93 f3f2 	sdiv	r3, r3, r2
   dc2ba:	e05a      	b.n	dc372 <strftime+0x7da>
   dc2bc:	4628      	mov	r0, r5
   dc2be:	f7ff fc0b 	bl	dbad8 <iso_year_adjust>
   dc2c2:	69aa      	ldr	r2, [r5, #24]
   dc2c4:	b10a      	cbz	r2, dc2ca <strftime+0x732>
   dc2c6:	1e53      	subs	r3, r2, #1
   dc2c8:	e000      	b.n	dc2cc <strftime+0x734>
   dc2ca:	2306      	movs	r3, #6
   dc2cc:	2800      	cmp	r0, #0
   dc2ce:	dc2f      	bgt.n	dc330 <strftime+0x798>
   dc2d0:	69ea      	ldr	r2, [r5, #28]
   dc2d2:	d101      	bne.n	dc2d8 <strftime+0x740>
   dc2d4:	320a      	adds	r2, #10
   dc2d6:	e03b      	b.n	dc350 <strftime+0x7b8>
   dc2d8:	1a9a      	subs	r2, r3, r2
   dc2da:	696b      	ldr	r3, [r5, #20]
   dc2dc:	f240 716b 	movw	r1, #1899	; 0x76b
   dc2e0:	2b00      	cmp	r3, #0
   dc2e2:	bfb4      	ite	lt
   dc2e4:	4608      	movlt	r0, r1
   dc2e6:	f06f 0064 	mvnge.w	r0, #100	; 0x64
   dc2ea:	4418      	add	r0, r3
   dc2ec:	0781      	lsls	r1, r0, #30
   dc2ee:	d107      	bne.n	dc300 <strftime+0x768>
   dc2f0:	4601      	mov	r1, r0
   dc2f2:	f04f 0e64 	mov.w	lr, #100	; 0x64
   dc2f6:	fb90 f0fe 	sdiv	r0, r0, lr
   dc2fa:	fb0e 1110 	mls	r1, lr, r0, r1
   dc2fe:	b981      	cbnz	r1, dc322 <strftime+0x78a>
   dc300:	2b00      	cmp	r3, #0
   dc302:	f240 716b 	movw	r1, #1899	; 0x76b
   dc306:	bfa8      	it	ge
   dc308:	f06f 0164 	mvnge.w	r1, #100	; 0x64
   dc30c:	4419      	add	r1, r3
   dc30e:	f44f 73c8 	mov.w	r3, #400	; 0x190
   dc312:	fb91 f0f3 	sdiv	r0, r1, r3
   dc316:	fb03 1110 	mls	r1, r3, r0, r1
   dc31a:	fab1 f181 	clz	r1, r1
   dc31e:	0949      	lsrs	r1, r1, #5
   dc320:	e000      	b.n	dc324 <strftime+0x78c>
   dc322:	2101      	movs	r1, #1
   dc324:	1a52      	subs	r2, r2, r1
   dc326:	2a05      	cmp	r2, #5
   dc328:	bfb4      	ite	lt
   dc32a:	2335      	movlt	r3, #53	; 0x35
   dc32c:	2334      	movge	r3, #52	; 0x34
   dc32e:	e020      	b.n	dc372 <strftime+0x7da>
   dc330:	2301      	movs	r3, #1
   dc332:	e01e      	b.n	dc372 <strftime+0x7da>
   dc334:	9b02      	ldr	r3, [sp, #8]
   dc336:	429c      	cmp	r4, r3
   dc338:	f080 80d8 	bcs.w	dc4ec <strftime+0x954>
   dc33c:	69ab      	ldr	r3, [r5, #24]
   dc33e:	3330      	adds	r3, #48	; 0x30
   dc340:	e0c7      	b.n	dc4d2 <strftime+0x93a>
   dc342:	69aa      	ldr	r2, [r5, #24]
   dc344:	b10a      	cbz	r2, dc34a <strftime+0x7b2>
   dc346:	1e53      	subs	r3, r2, #1
   dc348:	e000      	b.n	dc34c <strftime+0x7b4>
   dc34a:	2306      	movs	r3, #6
   dc34c:	69ea      	ldr	r2, [r5, #28]
   dc34e:	3207      	adds	r2, #7
   dc350:	1ad2      	subs	r2, r2, r3
   dc352:	2307      	movs	r3, #7
   dc354:	fb92 f3f3 	sdiv	r3, r2, r3
   dc358:	e00b      	b.n	dc372 <strftime+0x7da>
   dc35a:	6968      	ldr	r0, [r5, #20]
   dc35c:	2800      	cmp	r0, #0
   dc35e:	da03      	bge.n	dc368 <strftime+0x7d0>
   dc360:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dc364:	f000 fbc4 	bl	dcaf0 <abs>
   dc368:	2364      	movs	r3, #100	; 0x64
   dc36a:	fb90 f2f3 	sdiv	r2, r0, r3
   dc36e:	fb02 0313 	mls	r3, r2, r3, r0
   dc372:	4a21      	ldr	r2, [pc, #132]	; (dc3f8 <strftime+0x860>)
   dc374:	e571      	b.n	dbe5a <strftime+0x2c2>
   dc376:	696b      	ldr	r3, [r5, #20]
   dc378:	4a20      	ldr	r2, [pc, #128]	; (dc3fc <strftime+0x864>)
   dc37a:	4293      	cmp	r3, r2
   dc37c:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
   dc380:	da05      	bge.n	dc38e <strftime+0x7f6>
   dc382:	232d      	movs	r3, #45	; 0x2d
   dc384:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   dc388:	f1cb 0b00 	rsb	fp, fp, #0
   dc38c:	e008      	b.n	dc3a0 <strftime+0x808>
   dc38e:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   dc392:	d10d      	bne.n	dc3b0 <strftime+0x818>
   dc394:	f242 730f 	movw	r3, #9999	; 0x270f
   dc398:	459b      	cmp	fp, r3
   dc39a:	d911      	bls.n	dc3c0 <strftime+0x828>
   dc39c:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   dc3a0:	f1b8 0f00 	cmp.w	r8, #0
   dc3a4:	d001      	beq.n	dc3aa <strftime+0x812>
   dc3a6:	f108 38ff 	add.w	r8, r8, #4294967295
   dc3aa:	f10d 0329 	add.w	r3, sp, #41	; 0x29
   dc3ae:	e000      	b.n	dc3b2 <strftime+0x81a>
   dc3b0:	ab0a      	add	r3, sp, #40	; 0x28
   dc3b2:	2225      	movs	r2, #37	; 0x25
   dc3b4:	701a      	strb	r2, [r3, #0]
   dc3b6:	f1ba 0f00 	cmp.w	sl, #0
   dc3ba:	d108      	bne.n	dc3ce <strftime+0x836>
   dc3bc:	1c58      	adds	r0, r3, #1
   dc3be:	e009      	b.n	dc3d4 <strftime+0x83c>
   dc3c0:	f1b8 0f00 	cmp.w	r8, #0
   dc3c4:	d1f4      	bne.n	dc3b0 <strftime+0x818>
   dc3c6:	2325      	movs	r3, #37	; 0x25
   dc3c8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   dc3cc:	ab0a      	add	r3, sp, #40	; 0x28
   dc3ce:	2230      	movs	r2, #48	; 0x30
   dc3d0:	1c98      	adds	r0, r3, #2
   dc3d2:	705a      	strb	r2, [r3, #1]
   dc3d4:	490a      	ldr	r1, [pc, #40]	; (dc400 <strftime+0x868>)
   dc3d6:	f7ff fb77 	bl	dbac8 <strcpy>
   dc3da:	f8cd b000 	str.w	fp, [sp]
   dc3de:	4643      	mov	r3, r8
   dc3e0:	aa0a      	add	r2, sp, #40	; 0x28
   dc3e2:	1b31      	subs	r1, r6, r4
   dc3e4:	1938      	adds	r0, r7, r4
   dc3e6:	e03e      	b.n	dc466 <strftime+0x8ce>
   dc3e8:	2003d82c 	.word	0x2003d82c
   dc3ec:	000dd675 	.word	0x000dd675
   dc3f0:	000dd66b 	.word	0x000dd66b
   dc3f4:	000dd670 	.word	0x000dd670
   dc3f8:	000dd651 	.word	0x000dd651
   dc3fc:	fffff894 	.word	0xfffff894
   dc400:	000dd662 	.word	0x000dd662
   dc404:	6a2b      	ldr	r3, [r5, #32]
   dc406:	2b00      	cmp	r3, #0
   dc408:	db65      	blt.n	dc4d6 <strftime+0x93e>
   dc40a:	f000 f9e9 	bl	dc7e0 <__tz_lock>
   dc40e:	9b06      	ldr	r3, [sp, #24]
   dc410:	b91b      	cbnz	r3, dc41a <strftime+0x882>
   dc412:	f000 f9e7 	bl	dc7e4 <_tzset_unlocked>
   dc416:	2301      	movs	r3, #1
   dc418:	9306      	str	r3, [sp, #24]
   dc41a:	f000 fbb1 	bl	dcb80 <__gettzinfo>
   dc41e:	6a2b      	ldr	r3, [r5, #32]
   dc420:	2b00      	cmp	r3, #0
   dc422:	bfd4      	ite	le
   dc424:	2300      	movle	r3, #0
   dc426:	2301      	movgt	r3, #1
   dc428:	221c      	movs	r2, #28
   dc42a:	fb02 0003 	mla	r0, r2, r3, r0
   dc42e:	eb07 0a04 	add.w	sl, r7, r4
   dc432:	6a03      	ldr	r3, [r0, #32]
   dc434:	f1c3 0800 	rsb	r8, r3, #0
   dc438:	f000 f9d3 	bl	dc7e2 <__tz_unlock>
   dc43c:	233c      	movs	r3, #60	; 0x3c
   dc43e:	fb98 f0f3 	sdiv	r0, r8, r3
   dc442:	9307      	str	r3, [sp, #28]
   dc444:	f000 fc38 	bl	dccb8 <labs>
   dc448:	9b07      	ldr	r3, [sp, #28]
   dc44a:	fb90 f2f3 	sdiv	r2, r0, r3
   dc44e:	ebc4 0b06 	rsb	fp, r4, r6
   dc452:	fb02 0013 	mls	r0, r2, r3, r0
   dc456:	4a28      	ldr	r2, [pc, #160]	; (dc4f8 <strftime+0x960>)
   dc458:	9000      	str	r0, [sp, #0]
   dc45a:	4659      	mov	r1, fp
   dc45c:	4650      	mov	r0, sl
   dc45e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dc462:	fb98 f3f3 	sdiv	r3, r8, r3
   dc466:	f7fc fc89 	bl	d8d7c <sniprintf>
   dc46a:	e4fa      	b.n	dbe62 <strftime+0x2ca>
   dc46c:	4404      	add	r4, r0
   dc46e:	42a6      	cmp	r6, r4
   dc470:	d831      	bhi.n	dc4d6 <strftime+0x93e>
   dc472:	e03b      	b.n	dc4ec <strftime+0x954>
   dc474:	6a2b      	ldr	r3, [r5, #32]
   dc476:	2b00      	cmp	r3, #0
   dc478:	db2d      	blt.n	dc4d6 <strftime+0x93e>
   dc47a:	f000 f9b1 	bl	dc7e0 <__tz_lock>
   dc47e:	9b06      	ldr	r3, [sp, #24]
   dc480:	b91b      	cbnz	r3, dc48a <strftime+0x8f2>
   dc482:	f000 f9af 	bl	dc7e4 <_tzset_unlocked>
   dc486:	2301      	movs	r3, #1
   dc488:	9306      	str	r3, [sp, #24]
   dc48a:	6a2b      	ldr	r3, [r5, #32]
   dc48c:	4a1b      	ldr	r2, [pc, #108]	; (dc4fc <strftime+0x964>)
   dc48e:	2b00      	cmp	r3, #0
   dc490:	bfd4      	ite	le
   dc492:	2300      	movle	r3, #0
   dc494:	2301      	movgt	r3, #1
   dc496:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   dc49a:	4640      	mov	r0, r8
   dc49c:	f000 f830 	bl	dc500 <strlen>
   dc4a0:	f108 38ff 	add.w	r8, r8, #4294967295
   dc4a4:	193b      	adds	r3, r7, r4
   dc4a6:	4420      	add	r0, r4
   dc4a8:	4284      	cmp	r4, r0
   dc4aa:	d00b      	beq.n	dc4c4 <strftime+0x92c>
   dc4ac:	9a02      	ldr	r2, [sp, #8]
   dc4ae:	4294      	cmp	r4, r2
   dc4b0:	d205      	bcs.n	dc4be <strftime+0x926>
   dc4b2:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dc4b6:	f803 2b01 	strb.w	r2, [r3], #1
   dc4ba:	3401      	adds	r4, #1
   dc4bc:	e7f4      	b.n	dc4a8 <strftime+0x910>
   dc4be:	f000 f990 	bl	dc7e2 <__tz_unlock>
   dc4c2:	e013      	b.n	dc4ec <strftime+0x954>
   dc4c4:	f000 f98d 	bl	dc7e2 <__tz_unlock>
   dc4c8:	e005      	b.n	dc4d6 <strftime+0x93e>
   dc4ca:	9b02      	ldr	r3, [sp, #8]
   dc4cc:	429c      	cmp	r4, r3
   dc4ce:	d20d      	bcs.n	dc4ec <strftime+0x954>
   dc4d0:	2325      	movs	r3, #37	; 0x25
   dc4d2:	553b      	strb	r3, [r7, r4]
   dc4d4:	3401      	adds	r4, #1
   dc4d6:	f899 3000 	ldrb.w	r3, [r9]
   dc4da:	b11b      	cbz	r3, dc4e4 <strftime+0x94c>
   dc4dc:	f109 0901 	add.w	r9, r9, #1
   dc4e0:	f7ff bb69 	b.w	dbbb6 <strftime+0x1e>
   dc4e4:	b126      	cbz	r6, dc4f0 <strftime+0x958>
   dc4e6:	2300      	movs	r3, #0
   dc4e8:	553b      	strb	r3, [r7, r4]
   dc4ea:	e001      	b.n	dc4f0 <strftime+0x958>
   dc4ec:	2000      	movs	r0, #0
   dc4ee:	e000      	b.n	dc4f2 <strftime+0x95a>
   dc4f0:	4620      	mov	r0, r4
   dc4f2:	b013      	add	sp, #76	; 0x4c
   dc4f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc4f8:	000dd67f 	.word	0x000dd67f
   dc4fc:	2003d894 	.word	0x2003d894

000dc500 <strlen>:
   dc500:	4603      	mov	r3, r0
   dc502:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc506:	2a00      	cmp	r2, #0
   dc508:	d1fb      	bne.n	dc502 <strlen+0x2>
   dc50a:	1a18      	subs	r0, r3, r0
   dc50c:	3801      	subs	r0, #1
   dc50e:	4770      	bx	lr

000dc510 <strncmp>:
   dc510:	b530      	push	{r4, r5, lr}
   dc512:	b182      	cbz	r2, dc536 <strncmp+0x26>
   dc514:	1e45      	subs	r5, r0, #1
   dc516:	3901      	subs	r1, #1
   dc518:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   dc51c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dc520:	42a3      	cmp	r3, r4
   dc522:	d106      	bne.n	dc532 <strncmp+0x22>
   dc524:	43ec      	mvns	r4, r5
   dc526:	4414      	add	r4, r2
   dc528:	42e0      	cmn	r0, r4
   dc52a:	d001      	beq.n	dc530 <strncmp+0x20>
   dc52c:	2b00      	cmp	r3, #0
   dc52e:	d1f3      	bne.n	dc518 <strncmp+0x8>
   dc530:	461c      	mov	r4, r3
   dc532:	1b18      	subs	r0, r3, r4
   dc534:	bd30      	pop	{r4, r5, pc}
   dc536:	4610      	mov	r0, r2
   dc538:	bd30      	pop	{r4, r5, pc}

000dc53a <strncpy>:
   dc53a:	b510      	push	{r4, lr}
   dc53c:	4603      	mov	r3, r0
   dc53e:	b142      	cbz	r2, dc552 <strncpy+0x18>
   dc540:	f811 4b01 	ldrb.w	r4, [r1], #1
   dc544:	f803 4b01 	strb.w	r4, [r3], #1
   dc548:	3a01      	subs	r2, #1
   dc54a:	2c00      	cmp	r4, #0
   dc54c:	d1f7      	bne.n	dc53e <strncpy+0x4>
   dc54e:	441a      	add	r2, r3
   dc550:	e000      	b.n	dc554 <strncpy+0x1a>
   dc552:	bd10      	pop	{r4, pc}
   dc554:	4293      	cmp	r3, r2
   dc556:	d002      	beq.n	dc55e <strncpy+0x24>
   dc558:	f803 4b01 	strb.w	r4, [r3], #1
   dc55c:	e7fa      	b.n	dc554 <strncpy+0x1a>
   dc55e:	bd10      	pop	{r4, pc}

000dc560 <_strtoul_r>:
   dc560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc564:	4680      	mov	r8, r0
   dc566:	483c      	ldr	r0, [pc, #240]	; (dc658 <_strtoul_r+0xf8>)
   dc568:	f8d0 9000 	ldr.w	r9, [r0]
   dc56c:	460e      	mov	r6, r1
   dc56e:	4635      	mov	r5, r6
   dc570:	f815 4b01 	ldrb.w	r4, [r5], #1
   dc574:	eb09 0004 	add.w	r0, r9, r4
   dc578:	7840      	ldrb	r0, [r0, #1]
   dc57a:	f000 0008 	and.w	r0, r0, #8
   dc57e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   dc582:	b108      	cbz	r0, dc588 <_strtoul_r+0x28>
   dc584:	462e      	mov	r6, r5
   dc586:	e7f2      	b.n	dc56e <_strtoul_r+0xe>
   dc588:	2c2d      	cmp	r4, #45	; 0x2d
   dc58a:	d103      	bne.n	dc594 <_strtoul_r+0x34>
   dc58c:	1cb5      	adds	r5, r6, #2
   dc58e:	7874      	ldrb	r4, [r6, #1]
   dc590:	2701      	movs	r7, #1
   dc592:	e003      	b.n	dc59c <_strtoul_r+0x3c>
   dc594:	2c2b      	cmp	r4, #43	; 0x2b
   dc596:	bf04      	itt	eq
   dc598:	7874      	ldrbeq	r4, [r6, #1]
   dc59a:	1cb5      	addeq	r5, r6, #2
   dc59c:	b113      	cbz	r3, dc5a4 <_strtoul_r+0x44>
   dc59e:	2b10      	cmp	r3, #16
   dc5a0:	d10a      	bne.n	dc5b8 <_strtoul_r+0x58>
   dc5a2:	e053      	b.n	dc64c <_strtoul_r+0xec>
   dc5a4:	2c30      	cmp	r4, #48	; 0x30
   dc5a6:	d14f      	bne.n	dc648 <_strtoul_r+0xe8>
   dc5a8:	7828      	ldrb	r0, [r5, #0]
   dc5aa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dc5ae:	2858      	cmp	r0, #88	; 0x58
   dc5b0:	d145      	bne.n	dc63e <_strtoul_r+0xde>
   dc5b2:	786c      	ldrb	r4, [r5, #1]
   dc5b4:	2310      	movs	r3, #16
   dc5b6:	3502      	adds	r5, #2
   dc5b8:	f04f 3cff 	mov.w	ip, #4294967295
   dc5bc:	2600      	movs	r6, #0
   dc5be:	fbbc fcf3 	udiv	ip, ip, r3
   dc5c2:	fb03 fa0c 	mul.w	sl, r3, ip
   dc5c6:	ea6f 0a0a 	mvn.w	sl, sl
   dc5ca:	4630      	mov	r0, r6
   dc5cc:	eb09 0e04 	add.w	lr, r9, r4
   dc5d0:	f89e e001 	ldrb.w	lr, [lr, #1]
   dc5d4:	f01e 0f04 	tst.w	lr, #4
   dc5d8:	d001      	beq.n	dc5de <_strtoul_r+0x7e>
   dc5da:	3c30      	subs	r4, #48	; 0x30
   dc5dc:	e00b      	b.n	dc5f6 <_strtoul_r+0x96>
   dc5de:	f01e 0e03 	ands.w	lr, lr, #3
   dc5e2:	d01a      	beq.n	dc61a <_strtoul_r+0xba>
   dc5e4:	f1be 0f01 	cmp.w	lr, #1
   dc5e8:	bf0c      	ite	eq
   dc5ea:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dc5ee:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dc5f2:	ebce 0404 	rsb	r4, lr, r4
   dc5f6:	42a3      	cmp	r3, r4
   dc5f8:	dd0f      	ble.n	dc61a <_strtoul_r+0xba>
   dc5fa:	2e00      	cmp	r6, #0
   dc5fc:	db08      	blt.n	dc610 <_strtoul_r+0xb0>
   dc5fe:	4560      	cmp	r0, ip
   dc600:	d806      	bhi.n	dc610 <_strtoul_r+0xb0>
   dc602:	d101      	bne.n	dc608 <_strtoul_r+0xa8>
   dc604:	4554      	cmp	r4, sl
   dc606:	dc03      	bgt.n	dc610 <_strtoul_r+0xb0>
   dc608:	fb03 4000 	mla	r0, r3, r0, r4
   dc60c:	2601      	movs	r6, #1
   dc60e:	e001      	b.n	dc614 <_strtoul_r+0xb4>
   dc610:	f04f 36ff 	mov.w	r6, #4294967295
   dc614:	f815 4b01 	ldrb.w	r4, [r5], #1
   dc618:	e7d8      	b.n	dc5cc <_strtoul_r+0x6c>
   dc61a:	2e00      	cmp	r6, #0
   dc61c:	da07      	bge.n	dc62e <_strtoul_r+0xce>
   dc61e:	2322      	movs	r3, #34	; 0x22
   dc620:	f8c8 3000 	str.w	r3, [r8]
   dc624:	f04f 30ff 	mov.w	r0, #4294967295
   dc628:	b92a      	cbnz	r2, dc636 <_strtoul_r+0xd6>
   dc62a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc62e:	b107      	cbz	r7, dc632 <_strtoul_r+0xd2>
   dc630:	4240      	negs	r0, r0
   dc632:	b172      	cbz	r2, dc652 <_strtoul_r+0xf2>
   dc634:	b106      	cbz	r6, dc638 <_strtoul_r+0xd8>
   dc636:	1e69      	subs	r1, r5, #1
   dc638:	6011      	str	r1, [r2, #0]
   dc63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc63e:	2430      	movs	r4, #48	; 0x30
   dc640:	2b00      	cmp	r3, #0
   dc642:	d1b9      	bne.n	dc5b8 <_strtoul_r+0x58>
   dc644:	2308      	movs	r3, #8
   dc646:	e7b7      	b.n	dc5b8 <_strtoul_r+0x58>
   dc648:	230a      	movs	r3, #10
   dc64a:	e7b5      	b.n	dc5b8 <_strtoul_r+0x58>
   dc64c:	2c30      	cmp	r4, #48	; 0x30
   dc64e:	d0ab      	beq.n	dc5a8 <_strtoul_r+0x48>
   dc650:	e7b2      	b.n	dc5b8 <_strtoul_r+0x58>
   dc652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc656:	bf00      	nop
   dc658:	2003d82c 	.word	0x2003d82c

000dc65c <strtoul>:
   dc65c:	4613      	mov	r3, r2
   dc65e:	460a      	mov	r2, r1
   dc660:	4601      	mov	r1, r0
   dc662:	4802      	ldr	r0, [pc, #8]	; (dc66c <strtoul+0x10>)
   dc664:	6800      	ldr	r0, [r0, #0]
   dc666:	f7ff bf7b 	b.w	dc560 <_strtoul_r>
   dc66a:	bf00      	nop
   dc66c:	2003d890 	.word	0x2003d890

000dc670 <__get_current_time_locale>:
   dc670:	4b04      	ldr	r3, [pc, #16]	; (dc684 <__get_current_time_locale+0x14>)
   dc672:	4a05      	ldr	r2, [pc, #20]	; (dc688 <__get_current_time_locale+0x18>)
   dc674:	6818      	ldr	r0, [r3, #0]
   dc676:	4b05      	ldr	r3, [pc, #20]	; (dc68c <__get_current_time_locale+0x1c>)
   dc678:	2800      	cmp	r0, #0
   dc67a:	bf14      	ite	ne
   dc67c:	4610      	movne	r0, r2
   dc67e:	4618      	moveq	r0, r3
   dc680:	4770      	bx	lr
   dc682:	bf00      	nop
   dc684:	2003e4a4 	.word	0x2003e4a4
   dc688:	2003e4a8 	.word	0x2003e4a8
   dc68c:	000dd7bc 	.word	0x000dd7bc

000dc690 <__tzcalc_limits>:
   dc690:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc694:	4604      	mov	r4, r0
   dc696:	f000 fa73 	bl	dcb80 <__gettzinfo>
   dc69a:	f240 73b1 	movw	r3, #1969	; 0x7b1
   dc69e:	429c      	cmp	r4, r3
   dc6a0:	f340 8096 	ble.w	dc7d0 <__tzcalc_limits+0x140>
   dc6a4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   dc6a8:	18e3      	adds	r3, r4, r3
   dc6aa:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   dc6ae:	109b      	asrs	r3, r3, #2
   dc6b0:	f240 156d 	movw	r5, #365	; 0x16d
   dc6b4:	fb05 3502 	mla	r5, r5, r2, r3
   dc6b8:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   dc6bc:	f06f 0363 	mvn.w	r3, #99	; 0x63
   dc6c0:	fb92 f3f3 	sdiv	r3, r2, r3
   dc6c4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   dc6c8:	442b      	add	r3, r5
   dc6ca:	18a5      	adds	r5, r4, r2
   dc6cc:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dc6d0:	fb95 f5f2 	sdiv	r5, r5, r2
   dc6d4:	441d      	add	r5, r3
   dc6d6:	2364      	movs	r3, #100	; 0x64
   dc6d8:	fb94 f7f2 	sdiv	r7, r4, r2
   dc6dc:	fb94 f6f3 	sdiv	r6, r4, r3
   dc6e0:	fb02 4717 	mls	r7, r2, r7, r4
   dc6e4:	fb03 4616 	mls	r6, r3, r6, r4
   dc6e8:	f100 0338 	add.w	r3, r0, #56	; 0x38
   dc6ec:	fab7 fe87 	clz	lr, r7
   dc6f0:	9301      	str	r3, [sp, #4]
   dc6f2:	f004 0303 	and.w	r3, r4, #3
   dc6f6:	6044      	str	r4, [r0, #4]
   dc6f8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   dc6fc:	4601      	mov	r1, r0
   dc6fe:	9300      	str	r3, [sp, #0]
   dc700:	f04f 0c07 	mov.w	ip, #7
   dc704:	7a0b      	ldrb	r3, [r1, #8]
   dc706:	2b4a      	cmp	r3, #74	; 0x4a
   dc708:	d10e      	bne.n	dc728 <__tzcalc_limits+0x98>
   dc70a:	694b      	ldr	r3, [r1, #20]
   dc70c:	9a00      	ldr	r2, [sp, #0]
   dc70e:	18ec      	adds	r4, r5, r3
   dc710:	b902      	cbnz	r2, dc714 <__tzcalc_limits+0x84>
   dc712:	b906      	cbnz	r6, dc716 <__tzcalc_limits+0x86>
   dc714:	b927      	cbnz	r7, dc720 <__tzcalc_limits+0x90>
   dc716:	2b3b      	cmp	r3, #59	; 0x3b
   dc718:	bfd4      	ite	le
   dc71a:	2300      	movle	r3, #0
   dc71c:	2301      	movgt	r3, #1
   dc71e:	e000      	b.n	dc722 <__tzcalc_limits+0x92>
   dc720:	2300      	movs	r3, #0
   dc722:	4423      	add	r3, r4
   dc724:	3b01      	subs	r3, #1
   dc726:	e03f      	b.n	dc7a8 <__tzcalc_limits+0x118>
   dc728:	2b44      	cmp	r3, #68	; 0x44
   dc72a:	d102      	bne.n	dc732 <__tzcalc_limits+0xa2>
   dc72c:	694b      	ldr	r3, [r1, #20]
   dc72e:	442b      	add	r3, r5
   dc730:	e03a      	b.n	dc7a8 <__tzcalc_limits+0x118>
   dc732:	9b00      	ldr	r3, [sp, #0]
   dc734:	b92b      	cbnz	r3, dc742 <__tzcalc_limits+0xb2>
   dc736:	2e00      	cmp	r6, #0
   dc738:	bf0c      	ite	eq
   dc73a:	46f0      	moveq	r8, lr
   dc73c:	f04f 0801 	movne.w	r8, #1
   dc740:	e000      	b.n	dc744 <__tzcalc_limits+0xb4>
   dc742:	46f0      	mov	r8, lr
   dc744:	4b24      	ldr	r3, [pc, #144]	; (dc7d8 <__tzcalc_limits+0x148>)
   dc746:	68cc      	ldr	r4, [r1, #12]
   dc748:	2230      	movs	r2, #48	; 0x30
   dc74a:	fb02 3808 	mla	r8, r2, r8, r3
   dc74e:	f1a8 0a04 	sub.w	sl, r8, #4
   dc752:	46a9      	mov	r9, r5
   dc754:	2301      	movs	r3, #1
   dc756:	42a3      	cmp	r3, r4
   dc758:	da04      	bge.n	dc764 <__tzcalc_limits+0xd4>
   dc75a:	f85a bf04 	ldr.w	fp, [sl, #4]!
   dc75e:	3301      	adds	r3, #1
   dc760:	44d9      	add	r9, fp
   dc762:	e7f8      	b.n	dc756 <__tzcalc_limits+0xc6>
   dc764:	f109 0304 	add.w	r3, r9, #4
   dc768:	fb93 fbfc 	sdiv	fp, r3, ip
   dc76c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   dc770:	2c01      	cmp	r4, #1
   dc772:	ebca 0a03 	rsb	sl, sl, r3
   dc776:	694b      	ldr	r3, [r1, #20]
   dc778:	bfb8      	it	lt
   dc77a:	2401      	movlt	r4, #1
   dc77c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   dc780:	ebb3 0a0a 	subs.w	sl, r3, sl
   dc784:	690b      	ldr	r3, [r1, #16]
   dc786:	f104 34ff 	add.w	r4, r4, #4294967295
   dc78a:	f103 33ff 	add.w	r3, r3, #4294967295
   dc78e:	bf48      	it	mi
   dc790:	f10a 0a07 	addmi.w	sl, sl, #7
   dc794:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dc798:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   dc79c:	4453      	add	r3, sl
   dc79e:	42a3      	cmp	r3, r4
   dc7a0:	db01      	blt.n	dc7a6 <__tzcalc_limits+0x116>
   dc7a2:	3b07      	subs	r3, #7
   dc7a4:	e7fb      	b.n	dc79e <__tzcalc_limits+0x10e>
   dc7a6:	444b      	add	r3, r9
   dc7a8:	698c      	ldr	r4, [r1, #24]
   dc7aa:	4a0c      	ldr	r2, [pc, #48]	; (dc7dc <__tzcalc_limits+0x14c>)
   dc7ac:	fb02 4303 	mla	r3, r2, r3, r4
   dc7b0:	6a0c      	ldr	r4, [r1, #32]
   dc7b2:	4423      	add	r3, r4
   dc7b4:	f841 3f1c 	str.w	r3, [r1, #28]!
   dc7b8:	9b01      	ldr	r3, [sp, #4]
   dc7ba:	4299      	cmp	r1, r3
   dc7bc:	d1a2      	bne.n	dc704 <__tzcalc_limits+0x74>
   dc7be:	69c3      	ldr	r3, [r0, #28]
   dc7c0:	6b82      	ldr	r2, [r0, #56]	; 0x38
   dc7c2:	4293      	cmp	r3, r2
   dc7c4:	bfac      	ite	ge
   dc7c6:	2300      	movge	r3, #0
   dc7c8:	2301      	movlt	r3, #1
   dc7ca:	6003      	str	r3, [r0, #0]
   dc7cc:	2001      	movs	r0, #1
   dc7ce:	e000      	b.n	dc7d2 <__tzcalc_limits+0x142>
   dc7d0:	2000      	movs	r0, #0
   dc7d2:	b003      	add	sp, #12
   dc7d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc7d8:	000dd5d0 	.word	0x000dd5d0
   dc7dc:	00015180 	.word	0x00015180

000dc7e0 <__tz_lock>:
   dc7e0:	4770      	bx	lr

000dc7e2 <__tz_unlock>:
   dc7e2:	4770      	bx	lr

000dc7e4 <_tzset_unlocked>:
   dc7e4:	4b01      	ldr	r3, [pc, #4]	; (dc7ec <_tzset_unlocked+0x8>)
   dc7e6:	6818      	ldr	r0, [r3, #0]
   dc7e8:	f000 b802 	b.w	dc7f0 <_tzset_unlocked_r>
   dc7ec:	2003d890 	.word	0x2003d890

000dc7f0 <_tzset_unlocked_r>:
   dc7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc7f4:	b08d      	sub	sp, #52	; 0x34
   dc7f6:	4607      	mov	r7, r0
   dc7f8:	f000 f9c2 	bl	dcb80 <__gettzinfo>
   dc7fc:	49b0      	ldr	r1, [pc, #704]	; (dcac0 <_tzset_unlocked_r+0x2d0>)
   dc7fe:	4eb1      	ldr	r6, [pc, #708]	; (dcac4 <_tzset_unlocked_r+0x2d4>)
   dc800:	4604      	mov	r4, r0
   dc802:	4638      	mov	r0, r7
   dc804:	f000 f9b4 	bl	dcb70 <_getenv_r>
   dc808:	4605      	mov	r5, r0
   dc80a:	b960      	cbnz	r0, dc826 <_tzset_unlocked_r+0x36>
   dc80c:	4bae      	ldr	r3, [pc, #696]	; (dcac8 <_tzset_unlocked_r+0x2d8>)
   dc80e:	4aaf      	ldr	r2, [pc, #700]	; (dcacc <_tzset_unlocked_r+0x2dc>)
   dc810:	6018      	str	r0, [r3, #0]
   dc812:	4baf      	ldr	r3, [pc, #700]	; (dcad0 <_tzset_unlocked_r+0x2e0>)
   dc814:	6018      	str	r0, [r3, #0]
   dc816:	4baf      	ldr	r3, [pc, #700]	; (dcad4 <_tzset_unlocked_r+0x2e4>)
   dc818:	6830      	ldr	r0, [r6, #0]
   dc81a:	601a      	str	r2, [r3, #0]
   dc81c:	605a      	str	r2, [r3, #4]
   dc81e:	f7fc fa7d 	bl	d8d1c <free>
   dc822:	6035      	str	r5, [r6, #0]
   dc824:	e148      	b.n	dcab8 <_tzset_unlocked_r+0x2c8>
   dc826:	6831      	ldr	r1, [r6, #0]
   dc828:	b979      	cbnz	r1, dc84a <_tzset_unlocked_r+0x5a>
   dc82a:	6830      	ldr	r0, [r6, #0]
   dc82c:	f7fc fa76 	bl	d8d1c <free>
   dc830:	4628      	mov	r0, r5
   dc832:	f7ff fe65 	bl	dc500 <strlen>
   dc836:	1c41      	adds	r1, r0, #1
   dc838:	4638      	mov	r0, r7
   dc83a:	f7fc faaf 	bl	d8d9c <_malloc_r>
   dc83e:	6030      	str	r0, [r6, #0]
   dc840:	b148      	cbz	r0, dc856 <_tzset_unlocked_r+0x66>
   dc842:	4629      	mov	r1, r5
   dc844:	f7ff f940 	bl	dbac8 <strcpy>
   dc848:	e005      	b.n	dc856 <_tzset_unlocked_r+0x66>
   dc84a:	f7ff f933 	bl	dbab4 <strcmp>
   dc84e:	2800      	cmp	r0, #0
   dc850:	f000 8132 	beq.w	dcab8 <_tzset_unlocked_r+0x2c8>
   dc854:	e7e9      	b.n	dc82a <_tzset_unlocked_r+0x3a>
   dc856:	782b      	ldrb	r3, [r5, #0]
   dc858:	4a9f      	ldr	r2, [pc, #636]	; (dcad8 <_tzset_unlocked_r+0x2e8>)
   dc85a:	49a0      	ldr	r1, [pc, #640]	; (dcadc <_tzset_unlocked_r+0x2ec>)
   dc85c:	2b3a      	cmp	r3, #58	; 0x3a
   dc85e:	bf08      	it	eq
   dc860:	3501      	addeq	r5, #1
   dc862:	ae0a      	add	r6, sp, #40	; 0x28
   dc864:	4633      	mov	r3, r6
   dc866:	4628      	mov	r0, r5
   dc868:	f7fc fa78 	bl	d8d5c <siscanf>
   dc86c:	2800      	cmp	r0, #0
   dc86e:	f340 8123 	ble.w	dcab8 <_tzset_unlocked_r+0x2c8>
   dc872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc874:	18ef      	adds	r7, r5, r3
   dc876:	5ceb      	ldrb	r3, [r5, r3]
   dc878:	2b2d      	cmp	r3, #45	; 0x2d
   dc87a:	d103      	bne.n	dc884 <_tzset_unlocked_r+0x94>
   dc87c:	3701      	adds	r7, #1
   dc87e:	f04f 35ff 	mov.w	r5, #4294967295
   dc882:	e003      	b.n	dc88c <_tzset_unlocked_r+0x9c>
   dc884:	2b2b      	cmp	r3, #43	; 0x2b
   dc886:	bf08      	it	eq
   dc888:	3701      	addeq	r7, #1
   dc88a:	2501      	movs	r5, #1
   dc88c:	f10d 0a20 	add.w	sl, sp, #32
   dc890:	f10d 0b1e 	add.w	fp, sp, #30
   dc894:	f04f 0800 	mov.w	r8, #0
   dc898:	9603      	str	r6, [sp, #12]
   dc89a:	f8cd a008 	str.w	sl, [sp, #8]
   dc89e:	9601      	str	r6, [sp, #4]
   dc8a0:	f8cd b000 	str.w	fp, [sp]
   dc8a4:	4633      	mov	r3, r6
   dc8a6:	aa07      	add	r2, sp, #28
   dc8a8:	498d      	ldr	r1, [pc, #564]	; (dcae0 <_tzset_unlocked_r+0x2f0>)
   dc8aa:	f8ad 801e 	strh.w	r8, [sp, #30]
   dc8ae:	4638      	mov	r0, r7
   dc8b0:	f8ad 8020 	strh.w	r8, [sp, #32]
   dc8b4:	f7fc fa52 	bl	d8d5c <siscanf>
   dc8b8:	4540      	cmp	r0, r8
   dc8ba:	f340 80fd 	ble.w	dcab8 <_tzset_unlocked_r+0x2c8>
   dc8be:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dc8c2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dc8c6:	f8df 9224 	ldr.w	r9, [pc, #548]	; dcaec <_tzset_unlocked_r+0x2fc>
   dc8ca:	213c      	movs	r1, #60	; 0x3c
   dc8cc:	fb01 3302 	mla	r3, r1, r2, r3
   dc8d0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dc8d4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dc8d8:	fb01 3302 	mla	r3, r1, r2, r3
   dc8dc:	435d      	muls	r5, r3
   dc8de:	6225      	str	r5, [r4, #32]
   dc8e0:	4d7c      	ldr	r5, [pc, #496]	; (dcad4 <_tzset_unlocked_r+0x2e4>)
   dc8e2:	4b7d      	ldr	r3, [pc, #500]	; (dcad8 <_tzset_unlocked_r+0x2e8>)
   dc8e4:	602b      	str	r3, [r5, #0]
   dc8e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc8e8:	497c      	ldr	r1, [pc, #496]	; (dcadc <_tzset_unlocked_r+0x2ec>)
   dc8ea:	441f      	add	r7, r3
   dc8ec:	464a      	mov	r2, r9
   dc8ee:	4633      	mov	r3, r6
   dc8f0:	4638      	mov	r0, r7
   dc8f2:	f7fc fa33 	bl	d8d5c <siscanf>
   dc8f6:	4540      	cmp	r0, r8
   dc8f8:	dc08      	bgt.n	dc90c <_tzset_unlocked_r+0x11c>
   dc8fa:	682b      	ldr	r3, [r5, #0]
   dc8fc:	606b      	str	r3, [r5, #4]
   dc8fe:	4b72      	ldr	r3, [pc, #456]	; (dcac8 <_tzset_unlocked_r+0x2d8>)
   dc900:	6a22      	ldr	r2, [r4, #32]
   dc902:	601a      	str	r2, [r3, #0]
   dc904:	4b72      	ldr	r3, [pc, #456]	; (dcad0 <_tzset_unlocked_r+0x2e0>)
   dc906:	f8c3 8000 	str.w	r8, [r3]
   dc90a:	e0d5      	b.n	dcab8 <_tzset_unlocked_r+0x2c8>
   dc90c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc90e:	f8c5 9004 	str.w	r9, [r5, #4]
   dc912:	18fd      	adds	r5, r7, r3
   dc914:	5cfb      	ldrb	r3, [r7, r3]
   dc916:	2b2d      	cmp	r3, #45	; 0x2d
   dc918:	d103      	bne.n	dc922 <_tzset_unlocked_r+0x132>
   dc91a:	3501      	adds	r5, #1
   dc91c:	f04f 37ff 	mov.w	r7, #4294967295
   dc920:	e003      	b.n	dc92a <_tzset_unlocked_r+0x13a>
   dc922:	2b2b      	cmp	r3, #43	; 0x2b
   dc924:	bf08      	it	eq
   dc926:	3501      	addeq	r5, #1
   dc928:	2701      	movs	r7, #1
   dc92a:	2300      	movs	r3, #0
   dc92c:	f8ad 301c 	strh.w	r3, [sp, #28]
   dc930:	f8ad 301e 	strh.w	r3, [sp, #30]
   dc934:	f8ad 3020 	strh.w	r3, [sp, #32]
   dc938:	930a      	str	r3, [sp, #40]	; 0x28
   dc93a:	9603      	str	r6, [sp, #12]
   dc93c:	f8cd a008 	str.w	sl, [sp, #8]
   dc940:	9601      	str	r6, [sp, #4]
   dc942:	f8cd b000 	str.w	fp, [sp]
   dc946:	4633      	mov	r3, r6
   dc948:	aa07      	add	r2, sp, #28
   dc94a:	4965      	ldr	r1, [pc, #404]	; (dcae0 <_tzset_unlocked_r+0x2f0>)
   dc94c:	4628      	mov	r0, r5
   dc94e:	f7fc fa05 	bl	d8d5c <siscanf>
   dc952:	2800      	cmp	r0, #0
   dc954:	dc04      	bgt.n	dc960 <_tzset_unlocked_r+0x170>
   dc956:	6a23      	ldr	r3, [r4, #32]
   dc958:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   dc95c:	63e3      	str	r3, [r4, #60]	; 0x3c
   dc95e:	e00e      	b.n	dc97e <_tzset_unlocked_r+0x18e>
   dc960:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dc964:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dc968:	213c      	movs	r1, #60	; 0x3c
   dc96a:	fb01 3302 	mla	r3, r1, r2, r3
   dc96e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dc972:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dc976:	fb01 3302 	mla	r3, r1, r2, r3
   dc97a:	435f      	muls	r7, r3
   dc97c:	63e7      	str	r7, [r4, #60]	; 0x3c
   dc97e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc980:	4627      	mov	r7, r4
   dc982:	441d      	add	r5, r3
   dc984:	f04f 0900 	mov.w	r9, #0
   dc988:	782b      	ldrb	r3, [r5, #0]
   dc98a:	2b2c      	cmp	r3, #44	; 0x2c
   dc98c:	bf08      	it	eq
   dc98e:	3501      	addeq	r5, #1
   dc990:	f895 8000 	ldrb.w	r8, [r5]
   dc994:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   dc998:	d126      	bne.n	dc9e8 <_tzset_unlocked_r+0x1f8>
   dc99a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   dc99e:	9302      	str	r3, [sp, #8]
   dc9a0:	ab09      	add	r3, sp, #36	; 0x24
   dc9a2:	9300      	str	r3, [sp, #0]
   dc9a4:	9603      	str	r6, [sp, #12]
   dc9a6:	9601      	str	r6, [sp, #4]
   dc9a8:	4633      	mov	r3, r6
   dc9aa:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   dc9ae:	494d      	ldr	r1, [pc, #308]	; (dcae4 <_tzset_unlocked_r+0x2f4>)
   dc9b0:	4628      	mov	r0, r5
   dc9b2:	f7fc f9d3 	bl	d8d5c <siscanf>
   dc9b6:	2803      	cmp	r0, #3
   dc9b8:	d17e      	bne.n	dcab8 <_tzset_unlocked_r+0x2c8>
   dc9ba:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   dc9be:	1e4b      	subs	r3, r1, #1
   dc9c0:	2b0b      	cmp	r3, #11
   dc9c2:	d879      	bhi.n	dcab8 <_tzset_unlocked_r+0x2c8>
   dc9c4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   dc9c8:	1e53      	subs	r3, r2, #1
   dc9ca:	2b04      	cmp	r3, #4
   dc9cc:	d874      	bhi.n	dcab8 <_tzset_unlocked_r+0x2c8>
   dc9ce:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   dc9d2:	2b06      	cmp	r3, #6
   dc9d4:	d870      	bhi.n	dcab8 <_tzset_unlocked_r+0x2c8>
   dc9d6:	f887 8008 	strb.w	r8, [r7, #8]
   dc9da:	60f9      	str	r1, [r7, #12]
   dc9dc:	613a      	str	r2, [r7, #16]
   dc9de:	617b      	str	r3, [r7, #20]
   dc9e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc9e2:	eb05 0803 	add.w	r8, r5, r3
   dc9e6:	e02a      	b.n	dca3e <_tzset_unlocked_r+0x24e>
   dc9e8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   dc9ec:	bf06      	itte	eq
   dc9ee:	3501      	addeq	r5, #1
   dc9f0:	4643      	moveq	r3, r8
   dc9f2:	2344      	movne	r3, #68	; 0x44
   dc9f4:	220a      	movs	r2, #10
   dc9f6:	a90b      	add	r1, sp, #44	; 0x2c
   dc9f8:	4628      	mov	r0, r5
   dc9fa:	9305      	str	r3, [sp, #20]
   dc9fc:	f7ff fe2e 	bl	dc65c <strtoul>
   dca00:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   dca04:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   dca08:	4545      	cmp	r5, r8
   dca0a:	9b05      	ldr	r3, [sp, #20]
   dca0c:	d114      	bne.n	dca38 <_tzset_unlocked_r+0x248>
   dca0e:	234d      	movs	r3, #77	; 0x4d
   dca10:	f1b9 0f00 	cmp.w	r9, #0
   dca14:	d107      	bne.n	dca26 <_tzset_unlocked_r+0x236>
   dca16:	7223      	strb	r3, [r4, #8]
   dca18:	2303      	movs	r3, #3
   dca1a:	60e3      	str	r3, [r4, #12]
   dca1c:	2302      	movs	r3, #2
   dca1e:	6123      	str	r3, [r4, #16]
   dca20:	f8c4 9014 	str.w	r9, [r4, #20]
   dca24:	e00b      	b.n	dca3e <_tzset_unlocked_r+0x24e>
   dca26:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   dca2a:	230b      	movs	r3, #11
   dca2c:	62a3      	str	r3, [r4, #40]	; 0x28
   dca2e:	2301      	movs	r3, #1
   dca30:	62e3      	str	r3, [r4, #44]	; 0x2c
   dca32:	2300      	movs	r3, #0
   dca34:	6323      	str	r3, [r4, #48]	; 0x30
   dca36:	e002      	b.n	dca3e <_tzset_unlocked_r+0x24e>
   dca38:	b280      	uxth	r0, r0
   dca3a:	723b      	strb	r3, [r7, #8]
   dca3c:	6178      	str	r0, [r7, #20]
   dca3e:	2302      	movs	r3, #2
   dca40:	f8ad 301c 	strh.w	r3, [sp, #28]
   dca44:	2300      	movs	r3, #0
   dca46:	f8ad 301e 	strh.w	r3, [sp, #30]
   dca4a:	f8ad 3020 	strh.w	r3, [sp, #32]
   dca4e:	930a      	str	r3, [sp, #40]	; 0x28
   dca50:	f898 3000 	ldrb.w	r3, [r8]
   dca54:	2b2f      	cmp	r3, #47	; 0x2f
   dca56:	d10b      	bne.n	dca70 <_tzset_unlocked_r+0x280>
   dca58:	9603      	str	r6, [sp, #12]
   dca5a:	f8cd a008 	str.w	sl, [sp, #8]
   dca5e:	9601      	str	r6, [sp, #4]
   dca60:	f8cd b000 	str.w	fp, [sp]
   dca64:	4633      	mov	r3, r6
   dca66:	aa07      	add	r2, sp, #28
   dca68:	491f      	ldr	r1, [pc, #124]	; (dcae8 <_tzset_unlocked_r+0x2f8>)
   dca6a:	4640      	mov	r0, r8
   dca6c:	f7fc f976 	bl	d8d5c <siscanf>
   dca70:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dca74:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dca78:	213c      	movs	r1, #60	; 0x3c
   dca7a:	fb01 3302 	mla	r3, r1, r2, r3
   dca7e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dca82:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dca86:	fb01 3302 	mla	r3, r1, r2, r3
   dca8a:	61bb      	str	r3, [r7, #24]
   dca8c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   dca8e:	f109 0901 	add.w	r9, r9, #1
   dca92:	f1b9 0f02 	cmp.w	r9, #2
   dca96:	4445      	add	r5, r8
   dca98:	f107 071c 	add.w	r7, r7, #28
   dca9c:	f47f af74 	bne.w	dc988 <_tzset_unlocked_r+0x198>
   dcaa0:	6860      	ldr	r0, [r4, #4]
   dcaa2:	f7ff fdf5 	bl	dc690 <__tzcalc_limits>
   dcaa6:	4b08      	ldr	r3, [pc, #32]	; (dcac8 <_tzset_unlocked_r+0x2d8>)
   dcaa8:	6a22      	ldr	r2, [r4, #32]
   dcaaa:	601a      	str	r2, [r3, #0]
   dcaac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   dcaae:	1a9b      	subs	r3, r3, r2
   dcab0:	4a07      	ldr	r2, [pc, #28]	; (dcad0 <_tzset_unlocked_r+0x2e0>)
   dcab2:	bf18      	it	ne
   dcab4:	2301      	movne	r3, #1
   dcab6:	6013      	str	r3, [r2, #0]
   dcab8:	b00d      	add	sp, #52	; 0x34
   dcaba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dcabe:	bf00      	nop
   dcac0:	000dd8b8 	.word	0x000dd8b8
   dcac4:	2003e5bc 	.word	0x2003e5bc
   dcac8:	2003e5c4 	.word	0x2003e5c4
   dcacc:	000dd8bb 	.word	0x000dd8bb
   dcad0:	2003e5c0 	.word	0x2003e5c0
   dcad4:	2003d894 	.word	0x2003d894
   dcad8:	2003e5af 	.word	0x2003e5af
   dcadc:	000dd8bf 	.word	0x000dd8bf
   dcae0:	000dd8e2 	.word	0x000dd8e2
   dcae4:	000dd8ce 	.word	0x000dd8ce
   dcae8:	000dd8e1 	.word	0x000dd8e1
   dcaec:	2003e5a4 	.word	0x2003e5a4

000dcaf0 <abs>:
   dcaf0:	2800      	cmp	r0, #0
   dcaf2:	bfb8      	it	lt
   dcaf4:	4240      	neglt	r0, r0
   dcaf6:	4770      	bx	lr

000dcaf8 <_findenv_r>:
   dcaf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dcafc:	4607      	mov	r7, r0
   dcafe:	468b      	mov	fp, r1
   dcb00:	4690      	mov	r8, r2
   dcb02:	f000 f8dd 	bl	dccc0 <__env_lock>
   dcb06:	4b19      	ldr	r3, [pc, #100]	; (dcb6c <_findenv_r+0x74>)
   dcb08:	681d      	ldr	r5, [r3, #0]
   dcb0a:	469a      	mov	sl, r3
   dcb0c:	b13d      	cbz	r5, dcb1e <_findenv_r+0x26>
   dcb0e:	465c      	mov	r4, fp
   dcb10:	4623      	mov	r3, r4
   dcb12:	f813 2b01 	ldrb.w	r2, [r3], #1
   dcb16:	b142      	cbz	r2, dcb2a <_findenv_r+0x32>
   dcb18:	2a3d      	cmp	r2, #61	; 0x3d
   dcb1a:	461c      	mov	r4, r3
   dcb1c:	d1f8      	bne.n	dcb10 <_findenv_r+0x18>
   dcb1e:	4638      	mov	r0, r7
   dcb20:	f000 f8cf 	bl	dccc2 <__env_unlock>
   dcb24:	2000      	movs	r0, #0
   dcb26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dcb2a:	ebcb 0404 	rsb	r4, fp, r4
   dcb2e:	46a9      	mov	r9, r5
   dcb30:	f859 0b04 	ldr.w	r0, [r9], #4
   dcb34:	2800      	cmp	r0, #0
   dcb36:	d0f2      	beq.n	dcb1e <_findenv_r+0x26>
   dcb38:	4622      	mov	r2, r4
   dcb3a:	4659      	mov	r1, fp
   dcb3c:	f7ff fce8 	bl	dc510 <strncmp>
   dcb40:	b988      	cbnz	r0, dcb66 <_findenv_r+0x6e>
   dcb42:	f859 3c04 	ldr.w	r3, [r9, #-4]
   dcb46:	191e      	adds	r6, r3, r4
   dcb48:	5d1b      	ldrb	r3, [r3, r4]
   dcb4a:	2b3d      	cmp	r3, #61	; 0x3d
   dcb4c:	d10b      	bne.n	dcb66 <_findenv_r+0x6e>
   dcb4e:	f8da 3000 	ldr.w	r3, [sl]
   dcb52:	1aed      	subs	r5, r5, r3
   dcb54:	10ad      	asrs	r5, r5, #2
   dcb56:	4638      	mov	r0, r7
   dcb58:	f8c8 5000 	str.w	r5, [r8]
   dcb5c:	f000 f8b1 	bl	dccc2 <__env_unlock>
   dcb60:	1c70      	adds	r0, r6, #1
   dcb62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dcb66:	464d      	mov	r5, r9
   dcb68:	e7e1      	b.n	dcb2e <_findenv_r+0x36>
   dcb6a:	bf00      	nop
   dcb6c:	2003d8dc 	.word	0x2003d8dc

000dcb70 <_getenv_r>:
   dcb70:	b507      	push	{r0, r1, r2, lr}
   dcb72:	aa01      	add	r2, sp, #4
   dcb74:	f7ff ffc0 	bl	dcaf8 <_findenv_r>
   dcb78:	b003      	add	sp, #12
   dcb7a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dcb80 <__gettzinfo>:
   dcb80:	4800      	ldr	r0, [pc, #0]	; (dcb84 <__gettzinfo+0x4>)
   dcb82:	4770      	bx	lr
   dcb84:	2003d89c 	.word	0x2003d89c

000dcb88 <gmtime_r>:
   dcb88:	6802      	ldr	r2, [r0, #0]
   dcb8a:	4b47      	ldr	r3, [pc, #284]	; (dcca8 <gmtime_r+0x120>)
   dcb8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   dcb8e:	fb92 f4f3 	sdiv	r4, r2, r3
   dcb92:	fb03 2214 	mls	r2, r3, r4, r2
   dcb96:	2a00      	cmp	r2, #0
   dcb98:	bfbc      	itt	lt
   dcb9a:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   dcb9e:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   dcba2:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   dcba6:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   dcbaa:	fb92 f3f0 	sdiv	r3, r2, r0
   dcbae:	fb00 2213 	mls	r2, r0, r3, r2
   dcbb2:	f04f 003c 	mov.w	r0, #60	; 0x3c
   dcbb6:	bfac      	ite	ge
   dcbb8:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   dcbbc:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   dcbc0:	608b      	str	r3, [r1, #8]
   dcbc2:	fb92 f3f0 	sdiv	r3, r2, r0
   dcbc6:	fb00 2213 	mls	r2, r0, r3, r2
   dcbca:	604b      	str	r3, [r1, #4]
   dcbcc:	600a      	str	r2, [r1, #0]
   dcbce:	2307      	movs	r3, #7
   dcbd0:	1ce2      	adds	r2, r4, #3
   dcbd2:	fb92 f3f3 	sdiv	r3, r2, r3
   dcbd6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dcbda:	1ad3      	subs	r3, r2, r3
   dcbdc:	618b      	str	r3, [r1, #24]
   dcbde:	4b33      	ldr	r3, [pc, #204]	; (dccac <gmtime_r+0x124>)
   dcbe0:	4d33      	ldr	r5, [pc, #204]	; (dccb0 <gmtime_r+0x128>)
   dcbe2:	fb94 f5f5 	sdiv	r5, r4, r5
   dcbe6:	fb03 4405 	mla	r4, r3, r5, r4
   dcbea:	f648 62ac 	movw	r2, #36524	; 0x8eac
   dcbee:	fbb4 f2f2 	udiv	r2, r4, r2
   dcbf2:	4422      	add	r2, r4
   dcbf4:	f240 57b4 	movw	r7, #1460	; 0x5b4
   dcbf8:	fbb4 f3f7 	udiv	r3, r4, r7
   dcbfc:	1ad2      	subs	r2, r2, r3
   dcbfe:	482d      	ldr	r0, [pc, #180]	; (dccb4 <gmtime_r+0x12c>)
   dcc00:	fbb4 f0f0 	udiv	r0, r4, r0
   dcc04:	f648 6694 	movw	r6, #36500	; 0x8e94
   dcc08:	1a13      	subs	r3, r2, r0
   dcc0a:	fbb3 f6f6 	udiv	r6, r3, r6
   dcc0e:	4434      	add	r4, r6
   dcc10:	f240 126d 	movw	r2, #365	; 0x16d
   dcc14:	fbb3 f0f2 	udiv	r0, r3, r2
   dcc18:	fbb3 f3f7 	udiv	r3, r3, r7
   dcc1c:	1ae3      	subs	r3, r4, r3
   dcc1e:	fb02 3310 	mls	r3, r2, r0, r3
   dcc22:	2499      	movs	r4, #153	; 0x99
   dcc24:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   dcc28:	3202      	adds	r2, #2
   dcc2a:	fbb2 f2f4 	udiv	r2, r2, r4
   dcc2e:	2a0a      	cmp	r2, #10
   dcc30:	fb04 f402 	mul.w	r4, r4, r2
   dcc34:	f104 0602 	add.w	r6, r4, #2
   dcc38:	f04f 0405 	mov.w	r4, #5
   dcc3c:	fbb6 f4f4 	udiv	r4, r6, r4
   dcc40:	bf34      	ite	cc
   dcc42:	2602      	movcc	r6, #2
   dcc44:	f06f 0609 	mvncs.w	r6, #9
   dcc48:	4416      	add	r6, r2
   dcc4a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dcc4e:	fb02 0505 	mla	r5, r2, r5, r0
   dcc52:	1c5f      	adds	r7, r3, #1
   dcc54:	2e01      	cmp	r6, #1
   dcc56:	bf98      	it	ls
   dcc58:	3501      	addls	r5, #1
   dcc5a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   dcc5e:	eba7 0704 	sub.w	r7, r7, r4
   dcc62:	d302      	bcc.n	dcc6a <gmtime_r+0xe2>
   dcc64:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   dcc68:	e014      	b.n	dcc94 <gmtime_r+0x10c>
   dcc6a:	0782      	lsls	r2, r0, #30
   dcc6c:	d105      	bne.n	dcc7a <gmtime_r+0xf2>
   dcc6e:	2464      	movs	r4, #100	; 0x64
   dcc70:	fbb0 f2f4 	udiv	r2, r0, r4
   dcc74:	fb04 0212 	mls	r2, r4, r2, r0
   dcc78:	b94a      	cbnz	r2, dcc8e <gmtime_r+0x106>
   dcc7a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dcc7e:	fbb0 f4f2 	udiv	r4, r0, r2
   dcc82:	fb02 0014 	mls	r0, r2, r4, r0
   dcc86:	fab0 f280 	clz	r2, r0
   dcc8a:	0952      	lsrs	r2, r2, #5
   dcc8c:	e000      	b.n	dcc90 <gmtime_r+0x108>
   dcc8e:	2201      	movs	r2, #1
   dcc90:	333b      	adds	r3, #59	; 0x3b
   dcc92:	441a      	add	r2, r3
   dcc94:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   dcc98:	2300      	movs	r3, #0
   dcc9a:	61ca      	str	r2, [r1, #28]
   dcc9c:	614d      	str	r5, [r1, #20]
   dcc9e:	610e      	str	r6, [r1, #16]
   dcca0:	60cf      	str	r7, [r1, #12]
   dcca2:	620b      	str	r3, [r1, #32]
   dcca4:	4608      	mov	r0, r1
   dcca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dcca8:	00015180 	.word	0x00015180
   dccac:	fffdc54f 	.word	0xfffdc54f
   dccb0:	00023ab1 	.word	0x00023ab1
   dccb4:	00023ab0 	.word	0x00023ab0

000dccb8 <labs>:
   dccb8:	2800      	cmp	r0, #0
   dccba:	bfb8      	it	lt
   dccbc:	4240      	neglt	r0, r0
   dccbe:	4770      	bx	lr

000dccc0 <__env_lock>:
   dccc0:	4770      	bx	lr

000dccc2 <__env_unlock>:
   dccc2:	4770      	bx	lr

000dccc4 <dynalib_user>:
   dccc4:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   dccd4:	0000 0000 7055 6f6c 6461 6e69 3a67 0020     ....Uploading: .
   dcce4:	4f20 004b 4420 4c45 4520 5252 524f 2000      OK. DEL ERROR. 
   dccf4:	514d 5454 4520 5252 524f 5300 5245 4149     MQTT ERROR.SERIA
   dcd04:	204c 4144 4154 5320 5445 4954 474e 2053     L DATA SETTINGS 
   dcd14:	2d2d 203e 007b 0030 0a7d 5300 5445 4954     --> {.0.}..SETTI
   dcd24:	474e 2053 4146 4c49 4445 5400 4d45 4550     NGS FAILED.TEMPE
   dcd34:	4152 5554 4552 203a 4300 4820 4d55 4449     RATURE: .C HUMID
   dcd44:	5449 3a59 0020 0025 540a 4d49 3a45 0020     ITY: .%..TIME: .
   dcd54:	504f 5320 4154 4554 003a 4552 4f50 5452     OP STATE:.REPORT
   dcd64:	4e49 2047 4e49 4554 5652 4c41 203a 4400     ING INTERVAL: .D
   dcd74:	5441 2041 4552 4f53 554c 4954 4e4f 203a     ATA RESOLUTION: 
   dcd84:	5300 5245 4149 204c 554e 424d 5245 203a     .SERIAL NUMBER: 
   dcd94:	4d00 5451 2054 5242 4b4f 5245 203a 4d00     .MQTT BROKER: .M
   dcda4:	5451 2054 5242 4b4f 5245 5020 524f 3a54     QTT BROKER PORT:
   dcdb4:	0020 5249 4952 4147 4954 4e4f 4820 554f      .IRRIGATION HOU
   dcdc4:	3a52 0020 4156 564c 2045 504f 4e45 5020     R: .VALVE OPEN P
   dcdd4:	5245 4f49 3a44 0020 4843 4345 534b 4d55     ERIOD: .CHECKSUM
   dcde4:	203a 5300 7465 6974 676e 2073 6153 6576     : .Settings Save
   dcdf4:	2064 7573 6363 7365 6673 6c75 796c 5200     d successfully.R
   dce04:	4345 4945 4556 2044 534d 3a47 0020 4d0a     ECEIVED MSG: ..M
   dce14:	5345 4153 4547 5420 5059 3a45 0020 3434     ESSAGE TYPE: .44
   dce24:	3500 0035 5550 4c42 5349 2048 4146 4c49     .55.PUBLISH FAIL
   dce34:	4445 6200 6f72 656b 2e72 6968 6576 716d     ED.broker.hivemq
   dce44:	632e 6d6f 0a00 6544 6976 6563 4920 3a44     .com..Device ID:
   dce54:	0020 540a 7365 6974 676e 4520 5045 4f52      ..Testing EEPRO
   dce64:	3a4d 0a00 7250 7365 2073 7562 7474 6e6f     M:..Press button
   dce74:	6620 726f 203a 2000 6553 6f63 646e 0073      for: . Seconds.
   dce84:	540a 7365 6974 676e 4220 7475 6f74 3a6e     .Testing Button:
   dce94:	0a00 6554 7473 6e69 2067 6156 766c 3a65     ..Testing Valve:
   dcea4:	0a00 6554 7473 6e69 2067 4453 4320 7261     ..Testing SD Car
   dceb4:	3a64 0a00 6554 7473 6e69 2067 6152 6964     d:..Testing Radi
   dcec4:	3a6f 0a00 6e55 6e6b 776f 206e 6f63 6d6d     o:..Unknown comm
   dced4:	6e61 0064 5355 4e49 2047 4544 4146 4c55     and.USING DEFAUL
   dcee4:	2054 4553 5454 4e49 5347 5500 4953 474e     T SETTINGS.USING
   dcef4:	5320 5445 4954 474e 2053 5246 4d4f 4d20      SETTINGS FROM M
   dcf04:	4d45 524f 0059 6574 7473 622e 6f72 656b     EMORY.test.broke
   dcf14:	2e72 6f63 006d 0000                         r.com...

000dcf1c <_ZTV5Timer>:
	...
   dcf24:	53ad 000d 53f5 000d 52cd 000d 550a 4354     .S...S...R...UTC
   dcf34:	4820 554f 3a52 0020 550a 4354 4820 554f      HOUR: ..UTC HOU
   dcf44:	2052 202b 4954 454d 4f5a 454e 203a 4300     R + TIMEZONE: .C
   dcf54:	5255 4552 544e 4820 554f 2052 3a31 0020     URRENT HOUR 1: .
   dcf64:	5543 5252 4e45 2054 4f48 5255 3220 203a     CURRENT HOUR 2: 
   dcf74:	4900 5252 4749 5441 4f49 204e 4954 454d     .IRRIGATION TIME
   dcf84:	5320 4154 5452 4445 203a 5200 5345 5445      STARTED: .RESET
   dcf94:	4954 474e 5720 5441 5245 5020 5241 4d41     TING WATER PARAM
   dcfa4:	3a53 0020                                   S: .

000dcfa8 <_ZTVN8particle13__SPISettingsE>:
	...
   dcfb0:	5849 000d                                   IX..

000dcfb4 <_ZTV4File>:
	...
   dcfbc:	5847 000d 58df 000d 58b9 000d 58ad 000d     GX...X...X...X..
   dcfcc:	5829 000d 5923 000d 58a7 000d 58a1 000d     )X..#Y...X...X..

000dcfdc <_ZTV6SdFile>:
	...
   dcfe4:	5845 000d 58d1 000d 58ed 000d 58b3 000d     EX...X...X...X..
   dcff4:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   dd004:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   dd014:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   dd024:	676e 2073 7325 6c25 2075 7325 4d20 444f     ngs %s%lu %s MOD
   dd034:	2545 3e64 2500 3230 2558 3230 2558 3230     E%d>.%02X%02X%02
   dd044:	2558 3230 2e58 4f4c 0047 6153 6976 676e     X%02X.LOG.Saving
   dd054:	203a 2000 6953 657a 203a 2f00 5200 4d46     : . Size: ./.RFM
   dd064:	3936 4920 494e 2054 5245 4f52 0052 454e     69 INIT ERROR.NE
   dd074:	2057 4853 4549 444c 5220 2046 4449 203a     W SHIELD RF ID: 
   dd084:	4e00 5745 4e20 5445 4f57 4b52 4920 3a44     .NEW NETWORK ID:
   dd094:	0020 4749 2d48 4652 364d 4839 5743 4b2d      .IGH-RFM69HCW-K
   dd0a4:	5945 3c00 4554 5453 003e 543c 5345 3a54     EY.<TEST>.<TEST:
   dd0b4:	4b4f 003e 0400 514d 5454 0004 4d06 4951     OK>...MQTT...MQI
   dd0c4:	6473 0370                                   sdp.

000dd0c8 <_ZTV5RFM69>:
	...
   dd0d0:	82d5 000d                                   ....

000dd0d4 <_ZTVN5spark13EthernetClassE>:
	...
   dd0dc:	8e1b 000d 8e11 000d 8e07 000d 8dfd 000d     ................
   dd0ec:	8df1 000d 8de5 000d 8dd9 000d 8dd1 000d     ................
   dd0fc:	8dc7 000d 8dbd 000d a7bb 000d               ............

000dd108 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dd108:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
   dd118:	002e 6e69 0066 6162 6475 5300 7265 6169     ..inf.baud.Seria
   dd128:	006c 6553 6972 6c61 0031 7974 6570 7000     l.Serial1.type.p
   dd138:	7261 6d61 6300 646d 6900 0064 6e68 0064     aram.cmd.id.hnd.
   dd148:	7473 6d72 6600 6c69 0074 766c 006c 6461     strm.filt.lvl.ad
   dd158:	4864 6e61 6c64 7265 7200 6d65 766f 4865     dHandler.removeH
   dd168:	6e61 6c64 7265 6500 756e 486d 6e61 6c64     andler.enumHandl
   dd178:	7265 0073 534a 4e4f 7453 6572 6d61 6f4c     ers.JSONStreamLo
   dd188:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
   dd198:	7530 0020 205d 2c00 0020 2928 203a 2000     0u .] ., .(): . 
   dd1a8:	005b 6f63 6564 3d20 0020 6925 6400 7465     [.code = .%i.det
   dd1b8:	6961 736c 3d20 0020 0a0d 6c00 006e 6e66     ails = ....ln.fn
   dd1c8:	6300 646f 0065 6564 6174 6c69 6e00 6e6f     .code.detail.non
   dd1d8:	0065 7274 6361 0065 6e69 6f66 7700 7261     e.trace.info.war
   dd1e8:	006e 7265 6f72 0072 6170 696e 0063 6c61     n.error.panic.al
   dd1f8:	006c 2b25 3330 3a64 3025 7532 2500 2d59     l.%+03d:%02u.%Y-
   dd208:	6d25 252d 5464 4825 253a 3a4d 5325 7a25     %m-%dT%H:%M:%S%z
   dd218:	6100 6373 6974 656d 0000 0000               .asctime....

000dd224 <_ZTV14CellularSignal>:
	...
   dd22c:	5c81 000d 5c83 000d 97a9 000d 9839 000d     .\...\......9...
   dd23c:	97ad 000d 9805 000d 97d9 000d 98ab 000d     ................
   dd24c:	fffc ffff 0000 0000 98d5 000d               ............

000dd258 <_ZTV9IPAddress>:
	...
   dd260:	9ae1 000d 9ad1 000d 9ad3 000d               ............

000dd26c <_ZTV9USBSerial>:
	...
   dd274:	9bf9 000d 9c49 000d 9c57 000d 92c5 000d     ....I...W.......
   dd284:	9c35 000d 9bfb 000d 9c11 000d 9c43 000d     5...........C...
   dd294:	9c27 000d 9bf5 000d                         '.......

000dd29c <_ZTVN5spark13CellularClassE>:
	...
   dd2a4:	9df3 000d 9de9 000d 9ddf 000d 9d95 000d     ................
   dd2b4:	9dd3 000d 9dc7 000d 9dbb 000d 9db3 000d     ................
   dd2c4:	9da9 000d 9d9f 000d a7bb 000d               ............

000dd2d0 <_ZTV11USARTSerial>:
	...
   dd2d8:	9e2d 000d 9e7d 000d 9e8b 000d 92c5 000d     -...}...........
   dd2e8:	9e41 000d 9e63 000d 9e4f 000d 9e77 000d     A...c...O...w...
   dd2f8:	9e2f 000d 9e33 000d                         /...3...

000dd300 <_ZTV7TwoWire>:
	...
   dd308:	9f31 000d 9f7b 000d 9f53 000d 9f33 000d     1...{...S...3...
   dd318:	9f5b 000d 9f63 000d 9f6b 000d 9f73 000d     [...c...k...s...

000dd328 <_ZTVN5spark9MeshClassE>:
	...
   dd330:	a0a9 000d a09f 000d a095 000d a08b 000d     ................
   dd340:	a07f 000d a073 000d a067 000d a05f 000d     ....s...g..._...
   dd350:	a055 000d a04b 000d a7bb 000d               U...K.......

000dd35c <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dd364:	a24d 000d a253 000d a73b 000d a261 000d     M...S...;...a...
   dd374:	a24f 000d                                   O...

000dd378 <_ZTV9TCPClient>:
	...
   dd380:	5f39 000d 5f6d 000d a1c5 000d a1df 000d     9_..m_..........
   dd390:	a5e1 000d a333 000d a305 000d a209 000d     ....3...........
   dd3a0:	a4bd 000d a3b9 000d a367 000d a5b1 000d     ........g.......
   dd3b0:	a20b 000d a243 000d a1f1 000d a265 000d     ....C.......e...
   dd3c0:	a2e5 000d 6977 6972 676e 7200 6365 2076     ....wiring.recv 
   dd3d0:	7265 6f72 2072 203d 6425 0000               error = %d..

000dd3dc <_ZTVN5spark12NetworkClassE>:
	...
   dd3e4:	a753 000d a75d 000d a767 000d a771 000d     S...]...g...q...
   dd3f4:	a77b 000d a787 000d a793 000d a79f 000d     {...............
   dd404:	a7a7 000d a7b1 000d a7bb 000d               ............

000dd410 <_ZSt7nothrow>:
	...

000dd411 <day_name.4725>:
   dd411:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dd421:	6972 6153 4a74                                   riSat

000dd426 <mon_name.4726>:
   dd426:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dd436:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dd446:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   dd456:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   dd466:	6425 000a                                   %d..

000dd46a <_ctype_>:
   dd46a:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dd47a:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dd48a:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dd49a:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dd4aa:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dd4ba:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dd4ca:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dd4da:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dd4ea:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dd56c <__sf_fake_stdin>:
	...

000dd58c <__sf_fake_stdout>:
	...

000dd5ac <__sf_fake_stderr>:
	...
   dd5cc:	0043 0000                                   C...

000dd5d0 <__month_lengths>:
   dd5d0:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   dd5e0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dd5f0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dd600:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   dd610:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dd620:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dd630:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
   dd640:	2d00 2500 6432 2500 322e 2f64 2e25 6432     .-.%2d.%.2d/%.2d
   dd650:	252f 322e 0064 6c25 0075 2d59 6d25 252d     /%.2d.%lu.Y-%m-%
   dd660:	0064 2a2e 0075 2e25 6433 2500 6c6c 0064     d..*u.%.3d.%lld.
   dd670:	2e25 6432 253a 322e 3a64 2e25 6432 2500     %.2d:%.2d:%.2d.%
   dd680:	302b 6c33 2564 322e 646c 4c00 5f43 4954     +03ld%.2ld.LC_TI
   dd690:	454d 4a00 6e61 4600 6265 4d00 7261 4100     ME.Jan.Feb.Mar.A
   dd6a0:	7270 4d00 7961 4a00 6e75 4a00 6c75 4100     pr.May.Jun.Jul.A
   dd6b0:	6775 5300 7065 4f00 7463 4e00 766f 4400     ug.Sep.Oct.Nov.D
   dd6c0:	6365 4a00 6e61 6175 7972 4600 6265 7572     ec.January.Febru
   dd6d0:	7261 0079 614d 6372 0068 7041 6972 006c     ary.March.April.
   dd6e0:	754a 656e 4a00 6c75 0079 7541 7567 7473     June.July.August
   dd6f0:	5300 7065 6574 626d 7265 4f00 7463 626f     .September.Octob
   dd700:	7265 4e00 766f 6d65 6562 0072 6544 6563     er.November.Dece
   dd710:	626d 7265 5300 6e75 4d00 6e6f 5400 6575     mber.Sun.Mon.Tue
   dd720:	5700 6465 5400 7568 4600 6972 5300 7461     .Wed.Thu.Fri.Sat
   dd730:	5300 6e75 6164 0079 6f4d 646e 7961 5400     .Sunday.Monday.T
   dd740:	6575 6473 7961 5700 6465 656e 6473 7961     uesday.Wednesday
   dd750:	5400 7568 7372 6164 0079 7246 6469 7961     .Thursday.Friday
   dd760:	5300 7461 7275 6164 0079 4825 253a 3a4d     .Saturday.%H:%M:
   dd770:	5325 2500 2f6d 6425 252f 0079 6125 2520     %S.%m/%d/%y.%a %
   dd780:	2062 6525 2520 3a48 4d25 253a 2053 5925     b %e %H:%M:%S %Y
   dd790:	4100 004d 4d50 2500 2061 6225 2520 2065     .AM.PM.%a %b %e 
   dd7a0:	4825 253a 3a4d 5325 2520 205a 5925 2500     %H:%M:%S %Z %Y.%
   dd7b0:	3a49 4d25 253a 2053 7025 0000               I:%M:%S %p..

000dd7bc <_C_time_locale>:
   dd7bc:	d693 000d d697 000d d69b 000d d69f 000d     ................
   dd7cc:	d6a3 000d d6a7 000d d6ab 000d d6af 000d     ................
   dd7dc:	d6b3 000d d6b7 000d d6bb 000d d6bf 000d     ................
   dd7ec:	d6c3 000d d6cb 000d d6d4 000d d6da 000d     ................
   dd7fc:	d6a3 000d d6e0 000d d6e5 000d d6ea 000d     ................
   dd80c:	d6f1 000d d6fb 000d d703 000d d70c 000d     ................
   dd81c:	d715 000d d719 000d d71d 000d d721 000d     ............!...
   dd82c:	d725 000d d729 000d d72d 000d d731 000d     %...)...-...1...
   dd83c:	d738 000d d73f 000d d747 000d d751 000d     8...?...G...Q...
   dd84c:	d75a 000d d761 000d d76a 000d d773 000d     Z...a...j...s...
   dd85c:	d77c 000d d791 000d d794 000d d797 000d     |...............
   dd86c:	d6c3 000d d6cb 000d d6d4 000d d6da 000d     ................
   dd87c:	d6a3 000d d6e0 000d d6e5 000d d6ea 000d     ................
   dd88c:	d6f1 000d d6fb 000d d703 000d d70c 000d     ................
   dd89c:	d13e 000d d7af 000d d1c2 000d d1c2 000d     >...............
   dd8ac:	d1c2 000d d1c2 000d d1c2 000d 5a54 4700     ............TZ.G
   dd8bc:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
   dd8cc:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
   dd8dc:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
   dd8ec:	3a6e 6825 2575 006e                         n:%hu%n.

000dd8f4 <link_const_variable_data_end>:
   dd8f4:	000d4629 	.word	0x000d4629
   dd8f8:	000d4eaf 	.word	0x000d4eaf
   dd8fc:	000d5119 	.word	0x000d5119
   dd900:	000d51a9 	.word	0x000d51a9
   dd904:	000d529b 	.word	0x000d529b
   dd908:	000d57a1 	.word	0x000d57a1
   dd90c:	000d5bad 	.word	0x000d5bad
   dd910:	000d5d55 	.word	0x000d5d55
   dd914:	000d5f05 	.word	0x000d5f05
   dd918:	000d6787 	.word	0x000d6787
   dd91c:	000d678b 	.word	0x000d678b
   dd920:	000d678f 	.word	0x000d678f
   dd924:	000d6ea9 	.word	0x000d6ea9
   dd928:	000d6ead 	.word	0x000d6ead
   dd92c:	000d6eb1 	.word	0x000d6eb1
   dd930:	000d6ee3 	.word	0x000d6ee3
   dd934:	000d76a9 	.word	0x000d76a9
   dd938:	000d76cd 	.word	0x000d76cd
   dd93c:	000d76d1 	.word	0x000d76d1
   dd940:	000d79f5 	.word	0x000d79f5
   dd944:	000d79f9 	.word	0x000d79f9
   dd948:	000d79fd 	.word	0x000d79fd
   dd94c:	000d7f37 	.word	0x000d7f37
   dd950:	000d7f3b 	.word	0x000d7f3b
   dd954:	000d7f3f 	.word	0x000d7f3f
   dd958:	000d7fe5 	.word	0x000d7fe5
   dd95c:	000d866d 	.word	0x000d866d
   dd960:	000d8671 	.word	0x000d8671
   dd964:	000d8e25 	.word	0x000d8e25
   dd968:	000d90d5 	.word	0x000d90d5
   dd96c:	000d929d 	.word	0x000d929d
   dd970:	000d957d 	.word	0x000d957d
   dd974:	000d9765 	.word	0x000d9765
   dd978:	000d978d 	.word	0x000d978d
   dd97c:	000d9dfd 	.word	0x000d9dfd
   dd980:	000da175 	.word	0x000da175
   dd984:	000da889 	.word	0x000da889
   dd988:	000daaf1 	.word	0x000daaf1
   dd98c:	000dab75 	.word	0x000dab75
   dd990:	000dac39 	.word	0x000dac39
   dd994:	000dacfd 	.word	0x000dacfd

000dd998 <link_constructors_end>:
	...
