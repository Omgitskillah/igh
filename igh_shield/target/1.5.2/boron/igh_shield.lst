
d:/git/igh/igh_shield/target/1.5.2/boron/igh_shield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007524  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000db540  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000009c  2003da54  000db544  0001da54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000d00  2003daf0  2003daf0  0002daf0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000db5e0  000db5e0  0002b5e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000db608  000db608  0002b608  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001dac61  00000000  00000000  0002b60c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00027f8e  00000000  00000000  0020626d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00032903  00000000  00000000  0022e1fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003948  00000000  00000000  00260afe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006a28  00000000  00000000  00264446  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0005eb64  00000000  00000000  0026ae6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000701b2  00000000  00000000  002c99d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011c388  00000000  00000000  00339b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0001072c  00000000  00000000  00455f0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f006 fe34 	bl	dac9a <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f006 fe39 	bl	dacb0 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003da54 	.word	0x2003da54
   d4048:	000db544 	.word	0x000db544
   d404c:	2003daf0 	.word	0x2003daf0
   d4050:	2003daf0 	.word	0x2003daf0
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f005 f87d 	bl	d9158 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000db538 	.word	0x000db538
   d4080:	000db494 	.word	0x000db494

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 baa4 	b.w	d45d0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 faa3 	bl	d45d4 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f005 b823 	b.w	d90dc <_post_loop>

000d4096 <_Znwj>:
   d4096:	f004 bb55 	b.w	d8744 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f004 bb53 	b.w	d8744 <malloc>

000d409e <_ZdlPv>:
   d409e:	f004 bb59 	b.w	d8754 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f004 bb57 	b.w	d8754 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <igh_settings_process_settings_tuples>:
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));

} 

uint8_t igh_settings_process_settings_tuples( uint8_t * settings, uint8_t byte_tracker, uint8_t end_index )
{
   d40b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            case SUBID_WATER_DISPENSED_PERIOD_HIGH:
                if(LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH == current_tuple_length)
                {
                    uint8_t new_water_dispensed_period_high[LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH]; 
                    memcpy(new_water_dispensed_period_high, &settings[current_data_index], LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH);
                    igh_current_threshold_settings.water_dispensed_period_high = GET32(new_water_dispensed_period_high);
   d40bc:	4fa8      	ldr	r7, [pc, #672]	; (d4360 <igh_settings_process_settings_tuples+0x2a8>)
            case SUBID_MQTT_BROKER_PORT:
                if(LENGTH_SUBID_MQTT_PORT == current_tuple_length)
                {
                    uint8_t new_mqtt_port[LENGTH_SUBID_MQTT_PORT]; 
                    memcpy(new_mqtt_port, &settings[current_data_index], LENGTH_SUBID_MQTT_PORT);
                    igh_current_system_settings.broker_port = GET16(new_mqtt_port);
   d40be:	f8df 82b0 	ldr.w	r8, [pc, #688]	; d4370 <igh_settings_process_settings_tuples+0x2b8>
                    mqtt_set_broker = 1;
   d40c2:	f8df 92b0 	ldr.w	r9, [pc, #688]	; d4374 <igh_settings_process_settings_tuples+0x2bc>
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));

} 

uint8_t igh_settings_process_settings_tuples( uint8_t * settings, uint8_t byte_tracker, uint8_t end_index )
{
   d40c6:	4605      	mov	r5, r0
   d40c8:	468b      	mov	fp, r1
   d40ca:	4692      	mov	sl, r2
    //cycle through tuples to get the settings data
    uint8_t current_tuple_id;
    uint8_t current_tuple_length;
    uint8_t current_data_index;

    while(byte_tracker < end_index)
   d40cc:	45d3      	cmp	fp, sl
   d40ce:	f080 8191 	bcs.w	d43f4 <igh_settings_process_settings_tuples+0x33c>
    {
        // extract tuples
        current_tuple_id = settings[byte_tracker];
        // extract the length
        current_tuple_length = settings[byte_tracker + 1]; // should always follow
   d40d2:	eb05 030b 	add.w	r3, r5, fp
        // extract the tuple data based on tuple id
        current_data_index = byte_tracker + 2;
   d40d6:	f10b 0402 	add.w	r4, fp, #2
    while(byte_tracker < end_index)
    {
        // extract tuples
        current_tuple_id = settings[byte_tracker];
        // extract the length
        current_tuple_length = settings[byte_tracker + 1]; // should always follow
   d40da:	785e      	ldrb	r6, [r3, #1]
        // extract the tuple data based on tuple id
        current_data_index = byte_tracker + 2;

        switch(current_tuple_id)
   d40dc:	f815 300b 	ldrb.w	r3, [r5, fp]
   d40e0:	3b01      	subs	r3, #1
        // extract tuples
        current_tuple_id = settings[byte_tracker];
        // extract the length
        current_tuple_length = settings[byte_tracker + 1]; // should always follow
        // extract the tuple data based on tuple id
        current_data_index = byte_tracker + 2;
   d40e2:	b2e4      	uxtb	r4, r4

        switch(current_tuple_id)
   d40e4:	2b39      	cmp	r3, #57	; 0x39
   d40e6:	f200 817f 	bhi.w	d43e8 <igh_settings_process_settings_tuples+0x330>
   d40ea:	e8df f013 	tbh	[pc, r3, lsl #1]
   d40ee:	003a      	.short	0x003a
   d40f0:	00630052 	.word	0x00630052
   d40f4:	00740044 	.word	0x00740044
   d40f8:	017d0086 	.word	0x017d0086
   d40fc:	017d017d 	.word	0x017d017d
   d4100:	017d017d 	.word	0x017d017d
   d4104:	017d017d 	.word	0x017d017d
   d4108:	017d017d 	.word	0x017d017d
   d410c:	00a80094 	.word	0x00a80094
   d4110:	00d000bc 	.word	0x00d000bc
   d4114:	00f800e4 	.word	0x00f800e4
   d4118:	011e0115 	.word	0x011e0115
   d411c:	014e0130 	.word	0x014e0130
   d4120:	017d0160 	.word	0x017d0160
   d4124:	017d017d 	.word	0x017d017d
   d4128:	017d017d 	.word	0x017d017d
   d412c:	017d017d 	.word	0x017d017d
   d4130:	017d017d 	.word	0x017d017d
   d4134:	017d017d 	.word	0x017d017d
   d4138:	017d017d 	.word	0x017d017d
   d413c:	017d017d 	.word	0x017d017d
   d4140:	017d017d 	.word	0x017d017d
   d4144:	017d017d 	.word	0x017d017d
   d4148:	017d017d 	.word	0x017d017d
   d414c:	00b2009e 	.word	0x00b2009e
   d4150:	00da00c6 	.word	0x00da00c6
   d4154:	010200ee 	.word	0x010200ee
   d4158:	0127010c 	.word	0x0127010c
   d415c:	01570145 	.word	0x01570145
   d4160:	016f      	.short	0x016f
        {
            case SUBID_OPSTATE:
                if(LENGTH_SUBID_OPSTATE == current_tuple_length)
   d4162:	2e01      	cmp	r6, #1
   d4164:	f040 8149 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    // check if new state is valid
                    if( (OP_INACTIVE == (settings[current_data_index]))|| 
   d4168:	5d2b      	ldrb	r3, [r5, r4]
   d416a:	2b03      	cmp	r3, #3
   d416c:	f200 813c 	bhi.w	d43e8 <igh_settings_process_settings_tuples+0x330>
                        (OP_BASIC == (settings[current_data_index]))||
                        (OP_STANDARD == (settings[current_data_index]))||
                        (OP_PREMIUM == (settings[current_data_index]))  
                    )
                    {
                        igh_current_system_settings.op_state = (device_op_state)settings[current_data_index];
   d4170:	f888 3001 	strb.w	r3, [r8, #1]
   d4174:	e138      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>
                    return 0;
                }
                break;

            case SUBID_SET_SERIAL_NUMBER:
                if(LENGTH_SUBID_SET_SERIAL_NUMBER == current_tuple_length)
   d4176:	2e0c      	cmp	r6, #12
   d4178:	f040 813f 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    memcpy(igh_current_system_settings.serial_number, &settings[current_data_index], LENGTH_SUBID_SET_SERIAL_NUMBER);
   d417c:	442c      	add	r4, r5
   d417e:	4b79      	ldr	r3, [pc, #484]	; (d4364 <igh_settings_process_settings_tuples+0x2ac>)
   d4180:	6820      	ldr	r0, [r4, #0]
   d4182:	6861      	ldr	r1, [r4, #4]
   d4184:	c303      	stmia	r3!, {r0, r1}
   d4186:	68a0      	ldr	r0, [r4, #8]
   d4188:	6018      	str	r0, [r3, #0]
                    initialize_rfm69 = 1;
   d418a:	4b77      	ldr	r3, [pc, #476]	; (d4368 <igh_settings_process_settings_tuples+0x2b0>)
   d418c:	2201      	movs	r2, #1
   d418e:	701a      	strb	r2, [r3, #0]
                else
                {
                    // stop processing any more settings as they may be corrupt
                    return 0;
                }
                break;
   d4190:	e12a      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_REPORTING_INTERVAL:
                if(LENGTH_SUBID_REPORTING_INTERVAL == current_tuple_length)
   d4192:	2e04      	cmp	r6, #4
   d4194:	f040 8131 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_reporting_interval[LENGTH_SUBID_REPORTING_INTERVAL]; 
                    memcpy(new_reporting_interval, &settings[current_data_index], LENGTH_SUBID_REPORTING_INTERVAL);
   d4198:	1929      	adds	r1, r5, r4
                    igh_current_system_settings.reporting_interval = GET32(new_reporting_interval);
   d419a:	5d2a      	ldrb	r2, [r5, r4]
   d419c:	784b      	ldrb	r3, [r1, #1]
   d419e:	041b      	lsls	r3, r3, #16
   d41a0:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   d41a4:	78ca      	ldrb	r2, [r1, #3]
   d41a6:	4413      	add	r3, r2
   d41a8:	788a      	ldrb	r2, [r1, #2]
   d41aa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d41ae:	f8c8 3004 	str.w	r3, [r8, #4]
                else
                {
                    // stop processing any more settings as they may be corrupt
                    return 0;
                }
                break;
   d41b2:	e119      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_DATA_RESOLUTION:
                if(LENGTH_SUBID_DATA_RESOLUTION == current_tuple_length)
   d41b4:	2e04      	cmp	r6, #4
   d41b6:	f040 8120 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_data_resolution[LENGTH_SUBID_DATA_RESOLUTION]; 
                    memcpy(new_data_resolution, &settings[current_data_index], LENGTH_SUBID_DATA_RESOLUTION);
   d41ba:	1929      	adds	r1, r5, r4
                    igh_current_system_settings.data_resolution = GET32(new_data_resolution);
   d41bc:	5d2a      	ldrb	r2, [r5, r4]
   d41be:	784b      	ldrb	r3, [r1, #1]
   d41c0:	041b      	lsls	r3, r3, #16
   d41c2:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   d41c6:	78ca      	ldrb	r2, [r1, #3]
   d41c8:	4413      	add	r3, r2
   d41ca:	788a      	ldrb	r2, [r1, #2]
   d41cc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d41d0:	f8c8 3008 	str.w	r3, [r8, #8]
                }
                else
                {
                    return 0;
                }
                break;
   d41d4:	e108      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_MQTT_BROKER:
                if( sizeof(igh_current_system_settings.broker) > current_tuple_length)
   d41d6:	2e1f      	cmp	r6, #31
   d41d8:	f200 810f 	bhi.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    memset(igh_current_system_settings.broker, '\0', sizeof(igh_current_system_settings.broker));
   d41dc:	2220      	movs	r2, #32
   d41de:	2100      	movs	r1, #0
   d41e0:	4862      	ldr	r0, [pc, #392]	; (d436c <igh_settings_process_settings_tuples+0x2b4>)
   d41e2:	f006 fd65 	bl	dacb0 <memset>
                    memcpy(igh_current_system_settings.broker, &settings[current_data_index], current_tuple_length);
   d41e6:	4632      	mov	r2, r6
   d41e8:	1929      	adds	r1, r5, r4
   d41ea:	4860      	ldr	r0, [pc, #384]	; (d436c <igh_settings_process_settings_tuples+0x2b4>)
   d41ec:	f006 fd55 	bl	dac9a <memcpy>
                    igh_current_system_settings.broker[current_tuple_length] = '\0'; // terminate the string
   d41f0:	eb08 0306 	add.w	r3, r8, r6
   d41f4:	2200      	movs	r2, #0
   d41f6:	761a      	strb	r2, [r3, #24]
   d41f8:	e009      	b.n	d420e <igh_settings_process_settings_tuples+0x156>
                    return 0;
                }
                break;

            case SUBID_MQTT_BROKER_PORT:
                if(LENGTH_SUBID_MQTT_PORT == current_tuple_length)
   d41fa:	2e02      	cmp	r6, #2
   d41fc:	f040 80fd 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_mqtt_port[LENGTH_SUBID_MQTT_PORT]; 
                    memcpy(new_mqtt_port, &settings[current_data_index], LENGTH_SUBID_MQTT_PORT);
   d4200:	192b      	adds	r3, r5, r4
                    igh_current_system_settings.broker_port = GET16(new_mqtt_port);
   d4202:	5d2a      	ldrb	r2, [r5, r4]
   d4204:	785b      	ldrb	r3, [r3, #1]
   d4206:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d420a:	f8a8 3038 	strh.w	r3, [r8, #56]	; 0x38
                    mqtt_set_broker = 1;
   d420e:	2301      	movs	r3, #1
   d4210:	f889 3000 	strb.w	r3, [r9]
                }
                else
                {
                    return 0;
                }
                break; 
   d4214:	e0e8      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_SOIL_MOISTURE_LOW:
                if(LENGTH_SUBID_SOIL_MOISTURE_LOW == current_tuple_length)
   d4216:	2e02      	cmp	r6, #2
   d4218:	f040 80ef 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_moisture_low_th[LENGTH_SUBID_SOIL_MOISTURE_LOW]; 
                    memcpy(new_moisture_low_th, &settings[current_data_index], LENGTH_SUBID_SOIL_MOISTURE_LOW);
   d421c:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_moisture_low = GET16(new_moisture_low_th);
   d421e:	5d2a      	ldrb	r2, [r5, r4]
   d4220:	785b      	ldrb	r3, [r3, #1]
   d4222:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4226:	807b      	strh	r3, [r7, #2]
                }
                else
                {
                    return 0;
                }
                break; 
   d4228:	e0de      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_SOIL_MOISTURE_HIGH:
                if(LENGTH_SUBID_SOIL_MOISTURE_HIGH == current_tuple_length)
   d422a:	2e02      	cmp	r6, #2
   d422c:	f040 80e5 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_moisture_high_th[LENGTH_SUBID_SOIL_MOISTURE_HIGH]; 
                    memcpy(new_moisture_high_th, &settings[current_data_index], LENGTH_SUBID_SOIL_MOISTURE_LOW);
   d4230:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_moisture_high = GET16(new_moisture_high_th);
   d4232:	5d2a      	ldrb	r2, [r5, r4]
   d4234:	785b      	ldrb	r3, [r3, #1]
   d4236:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d423a:	83bb      	strh	r3, [r7, #28]
                }
                else
                {
                    return 0;
                }
                break; 
   d423c:	e0d4      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_AIR_HUMIDITY_LOW:
                if(LENGTH_SUBID_AIR_HUMIDITY_LOW  == current_tuple_length)
   d423e:	2e02      	cmp	r6, #2
   d4240:	f040 80db 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_air_humidity_low_th[LENGTH_SUBID_AIR_HUMIDITY_LOW]; 
                    memcpy(new_air_humidity_low_th, &settings[current_data_index], LENGTH_SUBID_AIR_HUMIDITY_LOW);
   d4244:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.air_humidity_low = GET16(new_air_humidity_low_th);
   d4246:	5d2a      	ldrb	r2, [r5, r4]
   d4248:	785b      	ldrb	r3, [r3, #1]
   d424a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d424e:	80bb      	strh	r3, [r7, #4]
                }
                else
                {
                    return 0;
                }
                break; 
   d4250:	e0ca      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_AIR_HUMIDITY_HIGH:
                if(LENGTH_SUBID_AIR_HUMIDITY_HIGH  == current_tuple_length)
   d4252:	2e02      	cmp	r6, #2
   d4254:	f040 80d1 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_air_humidity_high_th[LENGTH_SUBID_AIR_HUMIDITY_HIGH]; 
                    memcpy(new_air_humidity_high_th, &settings[current_data_index], LENGTH_SUBID_AIR_HUMIDITY_HIGH);
   d4258:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.air_humidity_high = GET16(new_air_humidity_high_th);
   d425a:	5d2a      	ldrb	r2, [r5, r4]
   d425c:	785b      	ldrb	r3, [r3, #1]
   d425e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4262:	83fb      	strh	r3, [r7, #30]
                }
                else
                {
                    return 0;
                }
                break;
   d4264:	e0c0      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_SOIL_HUMIDITY_LOW:
                if(LENGTH_SUBID_SOIL_HUMIDITY_LOW  == current_tuple_length)
   d4266:	2e02      	cmp	r6, #2
   d4268:	f040 80c7 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_soil_humidity_low_th[LENGTH_SUBID_SOIL_HUMIDITY_LOW]; 
                    memcpy(new_soil_humidity_low_th, &settings[current_data_index], LENGTH_SUBID_SOIL_HUMIDITY_LOW);
   d426c:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_humidity_low = GET16(new_soil_humidity_low_th);
   d426e:	5d2a      	ldrb	r2, [r5, r4]
   d4270:	785b      	ldrb	r3, [r3, #1]
   d4272:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4276:	80fb      	strh	r3, [r7, #6]
                }
                else
                {
                    return 0;
                }
                break; 
   d4278:	e0b6      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_SOIL_HUMIDITY_HIGH:
                if(LENGTH_SUBID_SOIL_HUMIDITY_HIGH  == current_tuple_length)
   d427a:	2e02      	cmp	r6, #2
   d427c:	f040 80bd 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_soil_humidity_high_th[LENGTH_SUBID_SOIL_HUMIDITY_HIGH]; 
                    memcpy(new_soil_humidity_high_th, &settings[current_data_index], LENGTH_SUBID_SOIL_HUMIDITY_HIGH);
   d4280:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_humidity_high = GET16(new_soil_humidity_high_th);
   d4282:	5d2a      	ldrb	r2, [r5, r4]
   d4284:	785b      	ldrb	r3, [r3, #1]
   d4286:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d428a:	843b      	strh	r3, [r7, #32]
                }
                else
                {
                    return 0;
                }
                break;
   d428c:	e0ac      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_CARBON_DIOXIDE_LOW:
                if(LENGTH_SUBID_CARBON_DIOXIDE_LOW  == current_tuple_length)
   d428e:	2e02      	cmp	r6, #2
   d4290:	f040 80b3 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_carbon_dioxide_low_th[LENGTH_SUBID_CARBON_DIOXIDE_LOW]; 
                    memcpy(new_carbon_dioxide_low_th, &settings[current_data_index], LENGTH_SUBID_CARBON_DIOXIDE_LOW);
   d4294:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.carbon_dioxide_low = GET16(new_carbon_dioxide_low_th);
   d4296:	5d2a      	ldrb	r2, [r5, r4]
   d4298:	785b      	ldrb	r3, [r3, #1]
   d429a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d429e:	813b      	strh	r3, [r7, #8]
                }
                else
                {
                    return 0;
                }
                break; 
   d42a0:	e0a2      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_CARBON_DIOXIDE_HIGH:
                if(LENGTH_SUBID_CARBON_DIOXIDE_HIGH  == current_tuple_length)
   d42a2:	2e02      	cmp	r6, #2
   d42a4:	f040 80a9 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_carbon_dioxide_high_th[LENGTH_SUBID_CARBON_DIOXIDE_HIGH]; 
                    memcpy(new_carbon_dioxide_high_th, &settings[current_data_index], LENGTH_SUBID_CARBON_DIOXIDE_HIGH);
   d42a8:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.carbon_dioxide_high = GET16(new_carbon_dioxide_high_th);
   d42aa:	5d2a      	ldrb	r2, [r5, r4]
   d42ac:	785b      	ldrb	r3, [r3, #1]
   d42ae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d42b2:	847b      	strh	r3, [r7, #34]	; 0x22
                }
                else
                {
                    return 0;
                }
                break;
   d42b4:	e098      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_AIR_TEMPERATURE_LOW:
                if(LENGTH_SUBID_AIR_TEMPERATURE_LOW  == current_tuple_length)
   d42b6:	2e02      	cmp	r6, #2
   d42b8:	f040 809f 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_air_temperature_low_th[LENGTH_SUBID_AIR_TEMPERATURE_LOW]; 
                    memcpy(new_air_temperature_low_th, &settings[current_data_index], LENGTH_SUBID_AIR_TEMPERATURE_LOW);
   d42bc:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.air_temperature_low = GET16(new_air_temperature_low_th);
   d42be:	5d2a      	ldrb	r2, [r5, r4]
   d42c0:	785b      	ldrb	r3, [r3, #1]
   d42c2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d42c6:	817b      	strh	r3, [r7, #10]
                }
                else
                {
                    return 0;
                }
                break; 
   d42c8:	e08e      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_AIR_TEMPERATURE_HIGH:
                if(LENGTH_SUBID_AIR_TEMPERATURE_HIGH  == current_tuple_length)
   d42ca:	2e02      	cmp	r6, #2
   d42cc:	f040 8095 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_air_temperature_high_th[LENGTH_SUBID_AIR_TEMPERATURE_HIGH]; 
                    memcpy(new_air_temperature_high_th, &settings[current_data_index], LENGTH_SUBID_AIR_TEMPERATURE_HIGH);
   d42d0:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.air_temperature_high = GET16(new_air_temperature_high_th);
   d42d2:	5d2a      	ldrb	r2, [r5, r4]
   d42d4:	785b      	ldrb	r3, [r3, #1]
   d42d6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d42da:	84bb      	strh	r3, [r7, #36]	; 0x24
                }
                else
                {
                    return 0;
                }
                break;
   d42dc:	e084      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_SOIL_TEMPERATURE_LOW:
                if(LENGTH_SUBID_SOIL_TEMPERATURE_LOW  == current_tuple_length)
   d42de:	2e02      	cmp	r6, #2
   d42e0:	f040 808b 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_soil_temperature_low_th[LENGTH_SUBID_SOIL_TEMPERATURE_LOW]; 
                    memcpy(new_soil_temperature_low_th, &settings[current_data_index], LENGTH_SUBID_SOIL_TEMPERATURE_LOW);
   d42e4:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_temperature_low = GET16(new_soil_temperature_low_th);
   d42e6:	5d2a      	ldrb	r2, [r5, r4]
   d42e8:	785b      	ldrb	r3, [r3, #1]
   d42ea:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d42ee:	81bb      	strh	r3, [r7, #12]
                }
                else
                {
                    return 0;
                }
                break; 
   d42f0:	e07a      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_SOIL_TEMPERATURE_HIGH:
                if(LENGTH_SUBID_SOIL_TEMPERATURE_HIGH  == current_tuple_length)
   d42f2:	2e02      	cmp	r6, #2
   d42f4:	f040 8081 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_soil_temperature_high_th[LENGTH_SUBID_SOIL_TEMPERATURE_HIGH]; 
                    memcpy(new_soil_temperature_high_th, &settings[current_data_index], LENGTH_SUBID_SOIL_TEMPERATURE_HIGH);
   d42f8:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_temperature_high = GET16(new_soil_temperature_high_th);
   d42fa:	5d2a      	ldrb	r2, [r5, r4]
   d42fc:	785b      	ldrb	r3, [r3, #1]
   d42fe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4302:	84fb      	strh	r3, [r7, #38]	; 0x26
                }
                else
                {
                    return 0;
                }
                break;    
   d4304:	e070      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_SOIL_NPK_HIGH:
                if(LENGTH_SUBID_SOIL_NPK_HIGH  == current_tuple_length)
   d4306:	2e02      	cmp	r6, #2
   d4308:	d177      	bne.n	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_soil_npk_high_th[LENGTH_SUBID_SOIL_NPK_HIGH]; 
                    memcpy(new_soil_npk_high_th, &settings[current_data_index], LENGTH_SUBID_SOIL_NPK_HIGH);
   d430a:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_npk_high = GET16(new_soil_npk_high_th);
   d430c:	5d2a      	ldrb	r2, [r5, r4]
   d430e:	785b      	ldrb	r3, [r3, #1]
   d4310:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4314:	853b      	strh	r3, [r7, #40]	; 0x28
                }
                else
                {
                    return 0;
                }
                break;   
   d4316:	e067      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_SOIL_NPK_LOW:
                if(LENGTH_SUBID_SOIL_NPK_LOW  == current_tuple_length)
   d4318:	2e02      	cmp	r6, #2
   d431a:	d16e      	bne.n	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_soil_npk_low_th[LENGTH_SUBID_SOIL_NPK_LOW]; 
                    memcpy(new_soil_npk_low_th, &settings[current_data_index], LENGTH_SUBID_SOIL_NPK_LOW);
   d431c:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_npk_low = GET16(new_soil_npk_low_th);
   d431e:	5d2a      	ldrb	r2, [r5, r4]
   d4320:	785b      	ldrb	r3, [r3, #1]
   d4322:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4326:	81fb      	strh	r3, [r7, #14]
                }
                else
                {
                    return 0;
                }
                break; 
   d4328:	e05e      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_LIGHT_INTENSITY_LOW:
                if(LENGTH_SUBID_LIGHT_INTENSITY_LOW  == current_tuple_length)
   d432a:	2e02      	cmp	r6, #2
   d432c:	d165      	bne.n	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_light_intensity_low_th[LENGTH_SUBID_LIGHT_INTENSITY_LOW]; 
                    memcpy(new_light_intensity_low_th, &settings[current_data_index], LENGTH_SUBID_LIGHT_INTENSITY_LOW);
   d432e:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.light_intensity_low = GET16(new_light_intensity_low_th);
   d4330:	5d2a      	ldrb	r2, [r5, r4]
   d4332:	785b      	ldrb	r3, [r3, #1]
   d4334:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4338:	823b      	strh	r3, [r7, #16]
                }
                else
                {
                    return 0;
                }
                break; 
   d433a:	e055      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_LIGHT_INTENSITY_HIGH:
                if(LENGTH_SUBID_LIGHT_INTENSITY_HIGH  == current_tuple_length)
   d433c:	2e02      	cmp	r6, #2
   d433e:	d15c      	bne.n	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_light_intensity_high_th[LENGTH_SUBID_LIGHT_INTENSITY_HIGH]; 
                    memcpy(new_light_intensity_high_th, &settings[current_data_index], LENGTH_SUBID_LIGHT_INTENSITY_HIGH);
   d4340:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.light_intensity_high = GET16(new_light_intensity_high_th);
   d4342:	5d2a      	ldrb	r2, [r5, r4]
   d4344:	785b      	ldrb	r3, [r3, #1]
   d4346:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d434a:	857b      	strh	r3, [r7, #42]	; 0x2a
                }
                else
                {
                    return 0;
                }
                break; 
   d434c:	e04c      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_SHIELD_BATTERY_LEVEL_LOW:
                if(LENGTH_SUBID_SHIELD_BATTERY_LEVEL_LOW  == current_tuple_length)
   d434e:	2e02      	cmp	r6, #2
   d4350:	d153      	bne.n	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_shield_battery_low_th[LENGTH_SUBID_SHIELD_BATTERY_LEVEL_LOW]; 
                    memcpy(new_shield_battery_low_th, &settings[current_data_index], LENGTH_SUBID_SHIELD_BATTERY_LEVEL_LOW);
   d4352:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.shield_battery_level_low = GET16(new_shield_battery_low_th);
   d4354:	5d2a      	ldrb	r2, [r5, r4]
   d4356:	785b      	ldrb	r3, [r3, #1]
   d4358:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d435c:	827b      	strh	r3, [r7, #18]
                }
                else
                {
                    return 0;
                }
                break;
   d435e:	e043      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>
   d4360:	2003e65c 	.word	0x2003e65c
   d4364:	2003e628 	.word	0x2003e628
   d4368:	2003daf5 	.word	0x2003daf5
   d436c:	2003e634 	.word	0x2003e634
   d4370:	2003e61c 	.word	0x2003e61c
   d4374:	2003da54 	.word	0x2003da54

            case SUBID_SHIELD_BATTERY_LEVEL_HIGH:
                if(LENGTH_SUBID_SHIELD_BATTERY_LEVEL_HIGH  == current_tuple_length)
   d4378:	2e02      	cmp	r6, #2
   d437a:	d13e      	bne.n	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_shield_battery_high_th[LENGTH_SUBID_SHIELD_BATTERY_LEVEL_HIGH]; 
                    memcpy(new_shield_battery_high_th, &settings[current_data_index], LENGTH_SUBID_SHIELD_BATTERY_LEVEL_HIGH);
   d437c:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.shield_battery_level_high = GET16(new_shield_battery_high_th);
   d437e:	5d2a      	ldrb	r2, [r5, r4]
   d4380:	785b      	ldrb	r3, [r3, #1]
   d4382:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4386:	85bb      	strh	r3, [r7, #44]	; 0x2c
                }
                else
                {
                    return 0;
                }
                break;  
   d4388:	e02e      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_SPEAR_BATTERY_LEVEL_LOW:
                if(LENGTH_SUBID_SPEAR_BATTERY_LEVEL_LOW  == current_tuple_length)
   d438a:	2e02      	cmp	r6, #2
   d438c:	d135      	bne.n	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_spear_battery_low_th[LENGTH_SUBID_SPEAR_BATTERY_LEVEL_LOW]; 
                    memcpy(new_spear_battery_low_th, &settings[current_data_index], LENGTH_SUBID_SPEAR_BATTERY_LEVEL_LOW);
   d438e:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.spear_battery_level_low = GET16(new_spear_battery_low_th);
   d4390:	5d2a      	ldrb	r2, [r5, r4]
   d4392:	785b      	ldrb	r3, [r3, #1]
   d4394:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4398:	82bb      	strh	r3, [r7, #20]
                }
                else
                {
                    return 0;
                }
                break;
   d439a:	e025      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_SPEAR_BATTERY_LEVEL_HIGH:
                if(LENGTH_SUBID_SPEAR_BATTERY_LEVEL_HIGH  == current_tuple_length)
   d439c:	2e02      	cmp	r6, #2
   d439e:	d12c      	bne.n	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_spear_battery_high_th[LENGTH_SUBID_SPEAR_BATTERY_LEVEL_HIGH]; 
                    memcpy(new_spear_battery_high_th, &settings[current_data_index], LENGTH_SUBID_SPEAR_BATTERY_LEVEL_HIGH);
   d43a0:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.spear_battery_level_high = GET16(new_spear_battery_high_th);
   d43a2:	5d2a      	ldrb	r2, [r5, r4]
   d43a4:	785b      	ldrb	r3, [r3, #1]
   d43a6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d43aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
                }
                else
                {
                    return 0;
                }
                break;
   d43ac:	e01c      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_WATER_DISPENSED_PERIOD_LOW:
                if(LENGTH_SUBID_WATER_DISPENSED_PERIOD_LOW == current_tuple_length)
   d43ae:	2e04      	cmp	r6, #4
   d43b0:	d123      	bne.n	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_water_dispensed_period_low[LENGTH_SUBID_WATER_DISPENSED_PERIOD_LOW]; 
                    memcpy(new_water_dispensed_period_low, &settings[current_data_index], LENGTH_SUBID_WATER_DISPENSED_PERIOD_LOW);
   d43b2:	1929      	adds	r1, r5, r4
                    igh_current_threshold_settings.water_dispensed_period_low = GET32(new_water_dispensed_period_low);
   d43b4:	5d2a      	ldrb	r2, [r5, r4]
   d43b6:	784b      	ldrb	r3, [r1, #1]
   d43b8:	041b      	lsls	r3, r3, #16
   d43ba:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   d43be:	78ca      	ldrb	r2, [r1, #3]
   d43c0:	4413      	add	r3, r2
   d43c2:	788a      	ldrb	r2, [r1, #2]
   d43c4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d43c8:	61bb      	str	r3, [r7, #24]
                else
                {
                    // stop processing any more settings as they may be corrupt
                    return 0;
                }
                break;
   d43ca:	e00d      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_WATER_DISPENSED_PERIOD_HIGH:
                if(LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH == current_tuple_length)
   d43cc:	2e04      	cmp	r6, #4
   d43ce:	d114      	bne.n	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_water_dispensed_period_high[LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH]; 
                    memcpy(new_water_dispensed_period_high, &settings[current_data_index], LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH);
   d43d0:	1929      	adds	r1, r5, r4
                    igh_current_threshold_settings.water_dispensed_period_high = GET32(new_water_dispensed_period_high);
   d43d2:	5d2a      	ldrb	r2, [r5, r4]
   d43d4:	784b      	ldrb	r3, [r1, #1]
   d43d6:	041b      	lsls	r3, r3, #16
   d43d8:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   d43dc:	78ca      	ldrb	r2, [r1, #3]
   d43de:	4413      	add	r3, r2
   d43e0:	788a      	ldrb	r2, [r1, #2]
   d43e2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d43e6:	633b      	str	r3, [r7, #48]	; 0x30

            default: // nothing to do hear
                break;
        }
        // move index to next tuple id
        byte_tracker += current_tuple_length + TUPLE_HEADER_LEN;
   d43e8:	1cb3      	adds	r3, r6, #2
   d43ea:	eb0b 0603 	add.w	r6, fp, r3
   d43ee:	fa5f fb86 	uxtb.w	fp, r6
   d43f2:	e66b      	b.n	d40cc <igh_settings_process_settings_tuples+0x14>
    }
    return 1;
   d43f4:	2001      	movs	r0, #1
   d43f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    
                }
                else
                {
                    // stop processing any more settings as they may be corrupt
                    return 0;
   d43fa:	2000      	movs	r0, #0
        }
        // move index to next tuple id
        byte_tracker += current_tuple_length + TUPLE_HEADER_LEN;
    }
    return 1;
}
   d43fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4400 <igh_settings_calculate_checksum>:
 * struct must have a single byte at the end designated for the checksum for this to work
 * \param p_struct: pointer to data struct, total_bytes: sizeof(data struct)
 * \return the checksum
 */
uint8_t igh_settings_calculate_checksum(void * p_struct, size_t total_bytes)
{
   d4400:	b510      	push	{r4, lr}
    data = (uint8_t *)p_struct;

    // uint8_t data_buffer[length];
    // memcpy(data_buffer, data, length);

    data += 1; // ignore checksum byte
   d4402:	1c42      	adds	r2, r0, #1
 */
uint8_t igh_settings_calculate_checksum(void * p_struct, size_t total_bytes)
{
    uint8_t length = (uint8_t)total_bytes; 
    uint8_t * data;
    int sum = 0;
   d4404:	2300      	movs	r3, #0
    // uint8_t data_buffer[length];
    // memcpy(data_buffer, data, length);

    data += 1; // ignore checksum byte
    // start at 1 to ignore the checksum byte
    for( int i = 1; i < length; i++)
   d4406:	b2c9      	uxtb	r1, r1
   d4408:	1a14      	subs	r4, r2, r0
   d440a:	42a1      	cmp	r1, r4
   d440c:	dd03      	ble.n	d4416 <igh_settings_calculate_checksum+0x16>
    {
        sum += (0xFF & *data++);
   d440e:	f812 4b01 	ldrb.w	r4, [r2], #1
   d4412:	4423      	add	r3, r4
   d4414:	e7f8      	b.n	d4408 <igh_settings_calculate_checksum+0x8>
    }

    checksum = (uint8_t)(sum % 256);

    return checksum;
}
   d4416:	b2d8      	uxtb	r0, r3
   d4418:	bd10      	pop	{r4, pc}
	...

000d441c <igh_settings_parse_new_settings>:
    }
    return 1;
}

uint8_t igh_settings_parse_new_settings(uint8_t * settings)
{
   d441c:	b510      	push	{r4, lr}
    // get the length
    uint8_t length = settings[PAYLOAD_LEN_INDEX]; // byte at position one should always be length
   d441e:	7c82      	ldrb	r2, [r0, #18]
    // guard the process
    if(0 >= length)
   d4420:	b90a      	cbnz	r2, d4426 <igh_settings_parse_new_settings+0xa>
    {
        return 0; // do not allow settings with zero payload to be processed
   d4422:	2000      	movs	r0, #0
   d4424:	bd10      	pop	{r4, pc}
    // get index of last byte to process
    uint8_t settings_end_index = FIRST_TUPLE_INDEX + length;
    // get the location of first tuple
    uint8_t settings_byte_tracker = FIRST_TUPLE_INDEX;
    
    if( 0 == igh_settings_process_settings_tuples( settings, settings_byte_tracker, settings_end_index ) ) 
   d4426:	3213      	adds	r2, #19
   d4428:	b2d2      	uxtb	r2, r2
   d442a:	2113      	movs	r1, #19
   d442c:	f7ff fe44 	bl	d40b8 <igh_settings_process_settings_tuples>
   d4430:	2800      	cmp	r0, #0
   d4432:	d0f6      	beq.n	d4422 <igh_settings_parse_new_settings+0x6>
        return 0;
    }
    else
    {
        // update the checksum of the system settings
        igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
   d4434:	4c07      	ldr	r4, [pc, #28]	; (d4454 <igh_settings_parse_new_settings+0x38>)
   d4436:	213c      	movs	r1, #60	; 0x3c
   d4438:	4620      	mov	r0, r4
   d443a:	f7ff ffe1 	bl	d4400 <igh_settings_calculate_checksum>
   d443e:	7020      	strb	r0, [r4, #0]
        // update the checksum for the threshold settings
        igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
   d4440:	4c05      	ldr	r4, [pc, #20]	; (d4458 <igh_settings_parse_new_settings+0x3c>)
   d4442:	2134      	movs	r1, #52	; 0x34
   d4444:	4620      	mov	r0, r4
   d4446:	f7ff ffdb 	bl	d4400 <igh_settings_calculate_checksum>
        
        new_settings_available = 1;
   d444a:	4b04      	ldr	r3, [pc, #16]	; (d445c <igh_settings_parse_new_settings+0x40>)
    else
    {
        // update the checksum of the system settings
        igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
        // update the checksum for the threshold settings
        igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
   d444c:	7020      	strb	r0, [r4, #0]
        
        new_settings_available = 1;
   d444e:	2001      	movs	r0, #1
   d4450:	7018      	strb	r0, [r3, #0]
    }
    
    return 1;
}
   d4452:	bd10      	pop	{r4, pc}
   d4454:	2003e61c 	.word	0x2003e61c
   d4458:	2003e65c 	.word	0x2003e65c
   d445c:	2003daf4 	.word	0x2003daf4

000d4460 <igh_settings_process_settings>:
 */
uint8_t igh_settings_process_settings(uint8_t * settings)
{
    uint8_t ret = 0; 
    igh_pkt_id settings_type = (igh_pkt_id)settings[PAYLOAD_INDEX];
    switch(settings_type)
   d4460:	7c42      	ldrb	r2, [r0, #17]
   d4462:	2a0f      	cmp	r2, #15
   d4464:	d003      	beq.n	d446e <igh_settings_process_settings+0xe>
   d4466:	2a10      	cmp	r2, #16
   d4468:	d108      	bne.n	d447c <igh_settings_process_settings+0x1c>
    {
        case VALVE_POSITION:
            ret = igh_settings_remote_valvle_control(settings);
            break;
        case IGH_SEND_SETTINGS:
            ret = igh_settings_parse_new_settings(settings);
   d446a:	f7ff bfd7 	b.w	d441c <igh_settings_parse_new_settings>
    return buffer_index_tracker;
}

LOCAL uint8_t igh_settings_remote_valvle_control(uint8_t * settings)
{
    if( ((valve_position)settings[FIRST_TUPLE_INDEX] == VALVE_CLOSE) ||
   d446e:	7cc3      	ldrb	r3, [r0, #19]
   d4470:	2b01      	cmp	r3, #1
   d4472:	d803      	bhi.n	d447c <igh_settings_process_settings+0x1c>
        ((valve_position)settings[FIRST_TUPLE_INDEX] == VALVE_OPEN) )
    {
        current_valve_position =  (valve_position)settings[FIRST_TUPLE_INDEX];
   d4474:	4a02      	ldr	r2, [pc, #8]	; (d4480 <igh_settings_process_settings+0x20>)
        return 1;
   d4476:	2001      	movs	r0, #1
LOCAL uint8_t igh_settings_remote_valvle_control(uint8_t * settings)
{
    if( ((valve_position)settings[FIRST_TUPLE_INDEX] == VALVE_CLOSE) ||
        ((valve_position)settings[FIRST_TUPLE_INDEX] == VALVE_OPEN) )
    {
        current_valve_position =  (valve_position)settings[FIRST_TUPLE_INDEX];
   d4478:	7013      	strb	r3, [r2, #0]
   d447a:	4770      	bx	lr
        return 1;
    }

    return 0;
   d447c:	2000      	movs	r0, #0
        default:
            break;
    }

    return ret;
}
   d447e:	4770      	bx	lr
   d4480:	2003e658 	.word	0x2003e658

000d4484 <igh_settings_reset_system_to_default>:
    
    return 1;
}

void igh_settings_reset_system_to_default(void)
{
   d4484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


LOCAL void igh_settings_get_defaults(void) // Total bytes 
{
    // System settings
    memset(&igh_default_system_settings, 0, sizeof(igh_default_system_settings));
   d4486:	4c32      	ldr	r4, [pc, #200]	; (d4550 <igh_settings_reset_system_to_default+0xcc>)
   d4488:	223c      	movs	r2, #60	; 0x3c
   d448a:	2100      	movs	r1, #0
   d448c:	4620      	mov	r0, r4
   d448e:	f006 fc0f 	bl	dacb0 <memset>
    igh_default_system_settings.op_state                    = DEFAULT_NEW_OPSTATE;
    igh_default_system_settings.reporting_interval          = DEFAULT_REPORTING_INTERVAL;
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
   d4492:	4a30      	ldr	r2, [pc, #192]	; (d4554 <igh_settings_reset_system_to_default+0xd0>)
LOCAL void igh_settings_get_defaults(void) // Total bytes 
{
    // System settings
    memset(&igh_default_system_settings, 0, sizeof(igh_default_system_settings));
    igh_default_system_settings.op_state                    = DEFAULT_NEW_OPSTATE;
    igh_default_system_settings.reporting_interval          = DEFAULT_REPORTING_INTERVAL;
   d4494:	f44f 63e1 	mov.w	r3, #1800	; 0x708
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
   d4498:	6810      	ldr	r0, [r2, #0]
   d449a:	6851      	ldr	r1, [r2, #4]
LOCAL void igh_settings_get_defaults(void) // Total bytes 
{
    // System settings
    memset(&igh_default_system_settings, 0, sizeof(igh_default_system_settings));
    igh_default_system_settings.op_state                    = DEFAULT_NEW_OPSTATE;
    igh_default_system_settings.reporting_interval          = DEFAULT_REPORTING_INTERVAL;
   d449c:	6063      	str	r3, [r4, #4]
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
   d449e:	f44f 7316 	mov.w	r3, #600	; 0x258
   d44a2:	60a3      	str	r3, [r4, #8]
    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
   d44a4:	f104 030c 	add.w	r3, r4, #12
   d44a8:	c303      	stmia	r3!, {r0, r1}
   d44aa:	6890      	ldr	r0, [r2, #8]
   d44ac:	6018      	str	r0, [r3, #0]
    memcpy(igh_default_system_settings.broker, default_broker_url, sizeof(default_broker_url));
   d44ae:	4b2a      	ldr	r3, [pc, #168]	; (d4558 <igh_settings_reset_system_to_default+0xd4>)
   d44b0:	f104 0218 	add.w	r2, r4, #24
   d44b4:	f103 0610 	add.w	r6, r3, #16
   d44b8:	6818      	ldr	r0, [r3, #0]
   d44ba:	6859      	ldr	r1, [r3, #4]
   d44bc:	4615      	mov	r5, r2
   d44be:	c503      	stmia	r5!, {r0, r1}
   d44c0:	3308      	adds	r3, #8
   d44c2:	42b3      	cmp	r3, r6
   d44c4:	462a      	mov	r2, r5
   d44c6:	d1f7      	bne.n	d44b8 <igh_settings_reset_system_to_default+0x34>
   d44c8:	881b      	ldrh	r3, [r3, #0]
   d44ca:	802b      	strh	r3, [r5, #0]
    igh_default_system_settings.broker_port                 = DEFAULT_MQTT_BROKER_PORT;
    igh_default_system_settings.checksum = igh_settings_calculate_checksum(&igh_default_system_settings, sizeof(igh_default_system_settings));
   d44cc:	213c      	movs	r1, #60	; 0x3c
    igh_default_system_settings.op_state                    = DEFAULT_NEW_OPSTATE;
    igh_default_system_settings.reporting_interval          = DEFAULT_REPORTING_INTERVAL;
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
    memcpy(igh_default_system_settings.broker, default_broker_url, sizeof(default_broker_url));
    igh_default_system_settings.broker_port                 = DEFAULT_MQTT_BROKER_PORT;
   d44ce:	f240 735b 	movw	r3, #1883	; 0x75b
    igh_default_system_settings.checksum = igh_settings_calculate_checksum(&igh_default_system_settings, sizeof(igh_default_system_settings));
   d44d2:	481f      	ldr	r0, [pc, #124]	; (d4550 <igh_settings_reset_system_to_default+0xcc>)
    igh_default_system_settings.op_state                    = DEFAULT_NEW_OPSTATE;
    igh_default_system_settings.reporting_interval          = DEFAULT_REPORTING_INTERVAL;
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
    memcpy(igh_default_system_settings.broker, default_broker_url, sizeof(default_broker_url));
    igh_default_system_settings.broker_port                 = DEFAULT_MQTT_BROKER_PORT;
   d44d4:	8723      	strh	r3, [r4, #56]	; 0x38
    igh_default_system_settings.checksum = igh_settings_calculate_checksum(&igh_default_system_settings, sizeof(igh_default_system_settings));
   d44d6:	f7ff ff93 	bl	d4400 <igh_settings_calculate_checksum>
   d44da:	7020      	strb	r0, [r4, #0]

    //High Threshold tirggers
    memset(&igh_default_thresholds, 0, sizeof(igh_default_thresholds));
   d44dc:	4c1f      	ldr	r4, [pc, #124]	; (d455c <igh_settings_reset_system_to_default+0xd8>)
}

void igh_settings_reset_system_to_default(void)
{
    igh_settings_get_defaults();
    igh_current_system_settings = igh_default_system_settings;
   d44de:	4e1c      	ldr	r6, [pc, #112]	; (d4550 <igh_settings_reset_system_to_default+0xcc>)
   d44e0:	4f1f      	ldr	r7, [pc, #124]	; (d4560 <igh_settings_reset_system_to_default+0xdc>)
    memcpy(igh_default_system_settings.broker, default_broker_url, sizeof(default_broker_url));
    igh_default_system_settings.broker_port                 = DEFAULT_MQTT_BROKER_PORT;
    igh_default_system_settings.checksum = igh_settings_calculate_checksum(&igh_default_system_settings, sizeof(igh_default_system_settings));

    //High Threshold tirggers
    memset(&igh_default_thresholds, 0, sizeof(igh_default_thresholds));
   d44e2:	2234      	movs	r2, #52	; 0x34
   d44e4:	2100      	movs	r1, #0
   d44e6:	4620      	mov	r0, r4
   d44e8:	f006 fbe2 	bl	dacb0 <memset>
    igh_default_thresholds.light_intensity_low              = DEFAULT_LIGHT_INTENSITY_LOW;               
    igh_default_thresholds.shield_battery_level_low         = DEFAULT_SHIELD_BATTERY_LEVEL_LOW;     
    igh_default_thresholds.spear_battery_level_low          = DEFAULT_SPEAR_BATTERY_LEVEL_LOW;      
    igh_default_thresholds.water_dispensed_period_low       = DEFAULT_WATER_DISPENSED_PERIOD_LOW;
    // Low Threshold Trigger
    igh_default_thresholds.soil_moisture_high               = DEFAULT_SOIL_MOISTURE_HIGH;                 
   d44ec:	23ff      	movs	r3, #255	; 0xff
    igh_default_thresholds.soil_npk_high                    = DEFAULT_SOIL_NPK_HIGH;                           
    igh_default_thresholds.light_intensity_high             = DEFAULT_LIGHT_INTENSITY_HIGH;             
    igh_default_thresholds.shield_battery_level_high        = DEFAULT_SHIELD_BATTERY_LEVEL_HIGH;   
    igh_default_thresholds.spear_battery_level_high         = DEFAULT_SPEAR_BATTERY_LEVEL_HIGH;     
    igh_default_thresholds.water_dispensed_period_high      = DEFAULT_WATER_DISPENSED_PERIOD_HIGH;
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));
   d44ee:	2134      	movs	r1, #52	; 0x34
   d44f0:	4620      	mov	r0, r4
    igh_default_thresholds.light_intensity_low              = DEFAULT_LIGHT_INTENSITY_LOW;               
    igh_default_thresholds.shield_battery_level_low         = DEFAULT_SHIELD_BATTERY_LEVEL_LOW;     
    igh_default_thresholds.spear_battery_level_low          = DEFAULT_SPEAR_BATTERY_LEVEL_LOW;      
    igh_default_thresholds.water_dispensed_period_low       = DEFAULT_WATER_DISPENSED_PERIOD_LOW;
    // Low Threshold Trigger
    igh_default_thresholds.soil_moisture_high               = DEFAULT_SOIL_MOISTURE_HIGH;                 
   d44f2:	83a3      	strh	r3, [r4, #28]
    igh_default_thresholds.air_humidity_high                = DEFAULT_AIR_HUMIDITY_HIGH;                   
   d44f4:	83e3      	strh	r3, [r4, #30]
    igh_default_thresholds.soil_humidity_high               = DEFAULT_SOIL_HUMIDITY_HIGH;                 
   d44f6:	8423      	strh	r3, [r4, #32]
    igh_default_thresholds.carbon_dioxide_high              = DEFAULT_CARBON_DIOXIDE_HIGH;        
   d44f8:	8463      	strh	r3, [r4, #34]	; 0x22
    igh_default_thresholds.air_temperature_high             = DEFAULT_AIR_TEMPERATURE_HIGH;             
   d44fa:	84a3      	strh	r3, [r4, #36]	; 0x24
    igh_default_thresholds.soil_temperature_high            = DEFAULT_SOIL_TEMPERATURE_HIGH;           
   d44fc:	84e3      	strh	r3, [r4, #38]	; 0x26
    igh_default_thresholds.soil_npk_high                    = DEFAULT_SOIL_NPK_HIGH;                           
   d44fe:	8523      	strh	r3, [r4, #40]	; 0x28
    igh_default_thresholds.light_intensity_high             = DEFAULT_LIGHT_INTENSITY_HIGH;             
   d4500:	8563      	strh	r3, [r4, #42]	; 0x2a
    igh_default_thresholds.shield_battery_level_high        = DEFAULT_SHIELD_BATTERY_LEVEL_HIGH;   
   d4502:	85a3      	strh	r3, [r4, #44]	; 0x2c
    igh_default_thresholds.spear_battery_level_high         = DEFAULT_SPEAR_BATTERY_LEVEL_HIGH;     
   d4504:	85e3      	strh	r3, [r4, #46]	; 0x2e
    igh_default_thresholds.water_dispensed_period_high      = DEFAULT_WATER_DISPENSED_PERIOD_HIGH;
   d4506:	6323      	str	r3, [r4, #48]	; 0x30
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));
   d4508:	f7ff ff7a 	bl	d4400 <igh_settings_calculate_checksum>
   d450c:	7020      	strb	r0, [r4, #0]
}

void igh_settings_reset_system_to_default(void)
{
    igh_settings_get_defaults();
    igh_current_system_settings = igh_default_system_settings;
   d450e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d4510:	463d      	mov	r5, r7
   d4512:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4514:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d4516:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4518:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d451a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d451c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   d4520:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    igh_current_threshold_settings = igh_default_thresholds;
   d4524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4526:	4e0f      	ldr	r6, [pc, #60]	; (d4564 <igh_settings_reset_system_to_default+0xe0>)
   d4528:	4635      	mov	r5, r6
   d452a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d452c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d452e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4530:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4532:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4534:	6823      	ldr	r3, [r4, #0]
   d4536:	602b      	str	r3, [r5, #0]
    // update the checksum of the system settings
    igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
   d4538:	213c      	movs	r1, #60	; 0x3c
   d453a:	4638      	mov	r0, r7
   d453c:	f7ff ff60 	bl	d4400 <igh_settings_calculate_checksum>
    // update the checksum for the threshold settings
    igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
   d4540:	2134      	movs	r1, #52	; 0x34
{
    igh_settings_get_defaults();
    igh_current_system_settings = igh_default_system_settings;
    igh_current_threshold_settings = igh_default_thresholds;
    // update the checksum of the system settings
    igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
   d4542:	7038      	strb	r0, [r7, #0]
    // update the checksum for the threshold settings
    igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
   d4544:	4630      	mov	r0, r6
   d4546:	f7ff ff5b 	bl	d4400 <igh_settings_calculate_checksum>
   d454a:	7030      	strb	r0, [r6, #0]
   d454c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d454e:	bf00      	nop
   d4550:	2003e6b4 	.word	0x2003e6b4
   d4554:	2003da67 	.word	0x2003da67
   d4558:	2003da55 	.word	0x2003da55
   d455c:	2003e5e4 	.word	0x2003e5e4
   d4560:	2003e61c 	.word	0x2003e61c
   d4564:	2003e65c 	.word	0x2003e65c

000d4568 <igh_message_process_incoming_msg>:
 * \brief Process incoming messages and action them repsectively
 * \param ack_msg incoimng message byte array
 * \return true or false
 */
uint8_t igh_message_process_incoming_msg(uint8_t * buffer)
{
   d4568:	b538      	push	{r3, r4, r5, lr}
    igh_msg_type message_type = UNKNOWN_MSG;
    uint8_t length = buffer[LEN_INDEX]; // get the length
   d456a:	7843      	ldrb	r3, [r0, #1]
 * \brief Process incoming messages and action them repsectively
 * \param ack_msg incoimng message byte array
 * \return true or false
 */
uint8_t igh_message_process_incoming_msg(uint8_t * buffer)
{
   d456c:	4604      	mov	r4, r0
    igh_msg_type message_type = UNKNOWN_MSG;
    uint8_t length = buffer[LEN_INDEX]; // get the length

    if(length <= 0) // prevent any messages with zero length from being processed
   d456e:	b33b      	cbz	r3, d45c0 <igh_message_process_incoming_msg+0x58>
    {
        return message_type;    
    }

    if( (buffer[0] == FRAME_START) && (buffer[length-1] == FRAME_END) )
   d4570:	7802      	ldrb	r2, [r0, #0]
   d4572:	2a3c      	cmp	r2, #60	; 0x3c
   d4574:	d124      	bne.n	d45c0 <igh_message_process_incoming_msg+0x58>
   d4576:	4403      	add	r3, r0
   d4578:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d457c:	2b3e      	cmp	r3, #62	; 0x3e
   d457e:	d11f      	bne.n	d45c0 <igh_message_process_incoming_msg+0x58>
    {
        // check the serial number
        if( 0 != memcmp(boron_serial_number, &buffer[SN_INDEX], sizeof(boron_serial_number)))
   d4580:	1d01      	adds	r1, r0, #4
   d4582:	220c      	movs	r2, #12
   d4584:	4810      	ldr	r0, [pc, #64]	; (d45c8 <igh_message_process_incoming_msg+0x60>)
   d4586:	f006 fb79 	bl	dac7c <memcmp>
   d458a:	b9c8      	cbnz	r0, d45c0 <igh_message_process_incoming_msg+0x58>
            // if the serial number does not match, do nothing as this message wasn't meant for this device,
            // This ideally should never happen
        }
        else
        {
            if( MSG_ACK == buffer[MSG_TYPE_INDEX] )
   d458c:	78a5      	ldrb	r5, [r4, #2]
   d458e:	2d41      	cmp	r5, #65	; 0x41
   d4590:	d110      	bne.n	d45b4 <igh_message_process_incoming_msg+0x4c>
LOCAL uint8_t igh_message_process_ACK(uint8_t * ack_msg)
{
    // get the ACK tuple id
    igh_pkt_id _ack_id = (igh_pkt_id)ack_msg[PAYLOAD_INDEX];

    if( (MSG_ACK_TUPLE != _ack_id) || (SIZE_OF_MSG_ACK_TUPLE != ack_msg[PAYLOAD_INDEX + 1]) )
   d4592:	7c63      	ldrb	r3, [r4, #17]
   d4594:	4a0d      	ldr	r2, [pc, #52]	; (d45cc <igh_message_process_incoming_msg+0x64>)
   d4596:	b913      	cbnz	r3, d459e <igh_message_process_incoming_msg+0x36>
   d4598:	7ca3      	ldrb	r3, [r4, #18]
   d459a:	2b01      	cmp	r3, #1
   d459c:	d002      	beq.n	d45a4 <igh_message_process_incoming_msg+0x3c>
    {
        upload_igh_message_id--;
   d459e:	7813      	ldrb	r3, [r2, #0]
   d45a0:	3b01      	subs	r3, #1
   d45a2:	e005      	b.n	d45b0 <igh_message_process_incoming_msg+0x48>
        return 0;
    }

    uint8_t acked_msd_id = ack_msg[PAYLOAD_INDEX + 2];
    uint8_t sent_message_id = upload_igh_message_id - 1; // the message id will have been incremented after the last send
   d45a4:	7813      	ldrb	r3, [r2, #0]
    if (acked_msd_id != sent_message_id)
   d45a6:	7ce1      	ldrb	r1, [r4, #19]
        upload_igh_message_id--;
        return 0;
    }

    uint8_t acked_msd_id = ack_msg[PAYLOAD_INDEX + 2];
    uint8_t sent_message_id = upload_igh_message_id - 1; // the message id will have been incremented after the last send
   d45a8:	3b01      	subs	r3, #1
   d45aa:	b2db      	uxtb	r3, r3
    if (acked_msd_id != sent_message_id)
   d45ac:	4299      	cmp	r1, r3
   d45ae:	d008      	beq.n	d45c2 <igh_message_process_incoming_msg+0x5a>
    {
        upload_igh_message_id--; // roll back to send the previous message
   d45b0:	7013      	strb	r3, [r2, #0]
   d45b2:	e005      	b.n	d45c0 <igh_message_process_incoming_msg+0x58>
                if(igh_message_process_ACK(buffer))
                {
                    message_type = MSG_ACK;
                }
            }
            else if( SETTINGS_MSG == buffer[MSG_TYPE_INDEX] )
   d45b4:	2d53      	cmp	r5, #83	; 0x53
   d45b6:	d103      	bne.n	d45c0 <igh_message_process_incoming_msg+0x58>
            {
                // process settings here
                if(igh_settings_process_settings(buffer))
   d45b8:	4620      	mov	r0, r4
   d45ba:	f7ff ff51 	bl	d4460 <igh_settings_process_settings>
   d45be:	b900      	cbnz	r0, d45c2 <igh_message_process_incoming_msg+0x5a>
 * \param ack_msg incoimng message byte array
 * \return true or false
 */
uint8_t igh_message_process_incoming_msg(uint8_t * buffer)
{
    igh_msg_type message_type = UNKNOWN_MSG;
   d45c0:	2500      	movs	r5, #0
        // if there is no frame start or no frame end, do nothing and return zer0
        // This may mean the length was wrong or the message was corrupted
    }

    return message_type; // should return the extracted tuple id for processing later
}
   d45c2:	4628      	mov	r0, r5
   d45c4:	bd38      	pop	{r3, r4, r5, pc}
   d45c6:	bf00      	nop
   d45c8:	2003e6a8 	.word	0x2003e6a8
   d45cc:	2003daf6 	.word	0x2003daf6

000d45d0 <setup>:

/* Run Application routine */
void setup() 
{
    // setup application
    igh_app_setup();
   d45d0:	f000 b882 	b.w	d46d8 <_Z13igh_app_setupv>

000d45d4 <loop>:
}

void loop() 
{
    // run main app
    igh_main_application();
   d45d4:	f000 bb6c 	b.w	d4cb0 <_Z20igh_main_applicationv>

000d45d8 <_GLOBAL__sub_I_setup>:
}
   d45d8:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d45da:	f003 fd77 	bl	d80cc <HAL_Pin_Map>
#include "particle_api/igh_log.h"
#endif

#include "include/igh_app.h"

SYSTEM_THREAD(ENABLED);
   d45de:	2100      	movs	r1, #0
   d45e0:	2001      	movs	r0, #1

void loop() 
{
    // run main app
    igh_main_application();
}
   d45e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#include "particle_api/igh_log.h"
#endif

#include "include/igh_app.h"

SYSTEM_THREAD(ENABLED);
   d45e6:	f004 b809 	b.w	d85fc <system_thread_set_state>
	...

000d45ec <_Z19igh_app_log_servicev.part.2>:
        }
    }
    return ret;
}

void igh_app_log_service( void )
   d45ec:	b530      	push	{r4, r5, lr}
   d45ee:	b0c9      	sub	sp, #292	; 0x124
{
    if( (millis() - log_service_timer) > ONE_SECOND )
    {
        // throttle sending data
        Serial.print(".");
   d45f0:	f004 fed2 	bl	d9398 <_Z16_fetch_usbserialv>
   d45f4:	492f      	ldr	r1, [pc, #188]	; (d46b4 <_Z19igh_app_log_servicev.part.2+0xc8>)
   d45f6:	f004 fb6f 	bl	d8cd8 <_ZN5Print5printEPKc>
        if( 1 == mqtt_connected )
   d45fa:	4b2f      	ldr	r3, [pc, #188]	; (d46b8 <_Z19igh_app_log_servicev.part.2+0xcc>)
   d45fc:	781b      	ldrb	r3, [r3, #0]
   d45fe:	2b01      	cmp	r3, #1
   d4600:	d151      	bne.n	d46a6 <_Z19igh_app_log_servicev.part.2+0xba>
        {
            char next_file[FILE_NAME_SIZE];
            if( true == igh_sd_log_get_next_file_name(next_file) )
   d4602:	4668      	mov	r0, sp
   d4604:	f000 ffc2 	bl	d558c <_Z29igh_sd_log_get_next_file_namePc>
   d4608:	2801      	cmp	r0, #1
   d460a:	d14c      	bne.n	d46a6 <_Z19igh_app_log_servicev.part.2+0xba>
            {
                uint8_t sd_data_point[MAX_FILE_SIZE];
                if( true == igh_sd_log_read_data_point(next_file, sd_data_point, MAX_FILE_SIZE) )
   d460c:	22ff      	movs	r2, #255	; 0xff
   d460e:	a908      	add	r1, sp, #32
   d4610:	4668      	mov	r0, sp
   d4612:	f000 ff7b 	bl	d550c <_Z26igh_sd_log_read_data_pointPcPhh>
   d4616:	2801      	cmp	r0, #1
   d4618:	d145      	bne.n	d46a6 <_Z19igh_app_log_servicev.part.2+0xba>
                {
                    Serial.print("NEXT FILE TO SEND: "); Serial.println((String)next_file);
   d461a:	f004 febd 	bl	d9398 <_Z16_fetch_usbserialv>
   d461e:	4927      	ldr	r1, [pc, #156]	; (d46bc <_Z19igh_app_log_servicev.part.2+0xd0>)
   d4620:	f004 fb5a 	bl	d8cd8 <_ZN5Print5printEPKc>
   d4624:	f004 feb8 	bl	d9398 <_Z16_fetch_usbserialv>
   d4628:	4669      	mov	r1, sp
   d462a:	4604      	mov	r4, r0
   d462c:	a804      	add	r0, sp, #16
   d462e:	f004 faa6 	bl	d8b7e <_ZN6StringC1EPK19__FlashStringHelper>
   d4632:	9904      	ldr	r1, [sp, #16]
   d4634:	4620      	mov	r0, r4
   d4636:	f004 fb62 	bl	d8cfe <_ZN5Print7printlnEPKc>
   d463a:	a804      	add	r0, sp, #16
   d463c:	f004 fa58 	bl	d8af0 <_ZN6StringD1Ev>
                    Serial.print("PAYLOAD: {");
   d4640:	f004 feaa 	bl	d9398 <_Z16_fetch_usbserialv>
   d4644:	491e      	ldr	r1, [pc, #120]	; (d46c0 <_Z19igh_app_log_servicev.part.2+0xd4>)
   d4646:	f004 fb47 	bl	d8cd8 <_ZN5Print5printEPKc>
   d464a:	f10d 041f 	add.w	r4, sp, #31
   d464e:	f50d 758f 	add.w	r5, sp, #286	; 0x11e
                    for(uint8_t i = 0; i < MAX_FILE_SIZE; i++ )
                    {
                        if( sd_data_point[i] <= 0x0F ) Serial.print("0");
   d4652:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   d4656:	2b0f      	cmp	r3, #15
   d4658:	d804      	bhi.n	d4664 <_Z19igh_app_log_servicev.part.2+0x78>
   d465a:	f004 fe9d 	bl	d9398 <_Z16_fetch_usbserialv>
   d465e:	4919      	ldr	r1, [pc, #100]	; (d46c4 <_Z19igh_app_log_servicev.part.2+0xd8>)
   d4660:	f004 fb3a 	bl	d8cd8 <_ZN5Print5printEPKc>
                        Serial.print( sd_data_point[i], HEX );
   d4664:	f004 fe98 	bl	d9398 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4668:	2210      	movs	r2, #16
   d466a:	7821      	ldrb	r1, [r4, #0]
   d466c:	f004 fb51 	bl	d8d12 <_ZN5Print11printNumberEmh>
                uint8_t sd_data_point[MAX_FILE_SIZE];
                if( true == igh_sd_log_read_data_point(next_file, sd_data_point, MAX_FILE_SIZE) )
                {
                    Serial.print("NEXT FILE TO SEND: "); Serial.println((String)next_file);
                    Serial.print("PAYLOAD: {");
                    for(uint8_t i = 0; i < MAX_FILE_SIZE; i++ )
   d4670:	42ac      	cmp	r4, r5
   d4672:	d1ee      	bne.n	d4652 <_Z19igh_app_log_servicev.part.2+0x66>
                    {
                        if( sd_data_point[i] <= 0x0F ) Serial.print("0");
                        Serial.print( sd_data_point[i], HEX );
                    }
                    Serial.println("}");
   d4674:	f004 fe90 	bl	d9398 <_Z16_fetch_usbserialv>
   d4678:	4913      	ldr	r1, [pc, #76]	; (d46c8 <_Z19igh_app_log_servicev.part.2+0xdc>)
   d467a:	f004 fb40 	bl	d8cfe <_ZN5Print7printlnEPKc>

                    if( true == igh_mqtt_publish_data(sd_data_point, sd_data_point[1]) )
   d467e:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
   d4682:	a808      	add	r0, sp, #32
   d4684:	f000 fc22 	bl	d4ecc <_Z21igh_mqtt_publish_dataPhj>
   d4688:	b168      	cbz	r0, d46a6 <_Z19igh_app_log_servicev.part.2+0xba>
                    {
                        if( true == igh_sd_log_remove_data_point(next_file) ) 
   d468a:	4668      	mov	r0, sp
   d468c:	f000 ff38 	bl	d5500 <_Z28igh_sd_log_remove_data_pointPc>
   d4690:	2801      	cmp	r0, #1
   d4692:	d103      	bne.n	d469c <_Z19igh_app_log_servicev.part.2+0xb0>
                        {
                            Serial.println("File Deleted");
   d4694:	f004 fe80 	bl	d9398 <_Z16_fetch_usbserialv>
   d4698:	490c      	ldr	r1, [pc, #48]	; (d46cc <_Z19igh_app_log_servicev.part.2+0xe0>)
   d469a:	e002      	b.n	d46a2 <_Z19igh_app_log_servicev.part.2+0xb6>
                        }
                        else
                        {
                            Serial.println("File delete file");
   d469c:	f004 fe7c 	bl	d9398 <_Z16_fetch_usbserialv>
   d46a0:	490b      	ldr	r1, [pc, #44]	; (d46d0 <_Z19igh_app_log_servicev.part.2+0xe4>)
   d46a2:	f004 fb2c 	bl	d8cfe <_ZN5Print7printlnEPKc>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d46a6:	f003 fdd9 	bl	d825c <HAL_Timer_Get_Milli_Seconds>
            {
                // Serial.println("No new file to send");
            }
        }

        log_service_timer = millis();
   d46aa:	4b0a      	ldr	r3, [pc, #40]	; (d46d4 <_Z19igh_app_log_servicev.part.2+0xe8>)
   d46ac:	6018      	str	r0, [r3, #0]
    }
}
   d46ae:	b049      	add	sp, #292	; 0x124
   d46b0:	bd30      	pop	{r4, r5, pc}
   d46b2:	bf00      	nop
   d46b4:	000dad60 	.word	0x000dad60
   d46b8:	2003db89 	.word	0x2003db89
   d46bc:	000dad62 	.word	0x000dad62
   d46c0:	000dad76 	.word	0x000dad76
   d46c4:	000dad81 	.word	0x000dad81
   d46c8:	000dad83 	.word	0x000dad83
   d46cc:	000dad85 	.word	0x000dad85
   d46d0:	000dad92 	.word	0x000dad92
   d46d4:	2003daf8 	.word	0x2003daf8

000d46d8 <_Z13igh_app_setupv>:
void igh_app_get_new_settings( void );
void igh_app_commit_new_settings( void );
void igh_app_log_service( void );

void igh_app_setup( void )
{
   d46d8:	b508      	push	{r3, lr}
    Serial.begin(19200);
   d46da:	f004 fe5d 	bl	d9398 <_Z16_fetch_usbserialv>
   d46de:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
   d46e2:	f004 fe4d 	bl	d9380 <_ZN9USBSerial5beginEl>
    Serial.println("START");
   d46e6:	f004 fe57 	bl	d9398 <_Z16_fetch_usbserialv>
   d46ea:	4907      	ldr	r1, [pc, #28]	; (d4708 <_Z13igh_app_setupv+0x30>)
   d46ec:	f004 fb07 	bl	d8cfe <_ZN5Print7printlnEPKc>
    
    igh_boron_setup();
   d46f0:	f001 f81a 	bl	d5728 <_Z15igh_boron_setupv>
    
    // get settings from eeprom
    igh_eeprom_init();
   d46f4:	f000 fc98 	bl	d5028 <_Z15igh_eeprom_initv>
    
    // starte the radio
    igh_rfm69_setup();
   d46f8:	f001 f8a6 	bl	d5848 <_Z15igh_rfm69_setupv>
    
    // setup MQTT
    igh_mqtt_setup();
   d46fc:	f000 fb30 	bl	d4d60 <_Z14igh_mqtt_setupv>

    // setup the SD card
    igh_sd_log_setup();
}
   d4700:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    
    // setup MQTT
    igh_mqtt_setup();

    // setup the SD card
    igh_sd_log_setup();
   d4704:	f000 be30 	b.w	d5368 <_Z16igh_sd_log_setupv>
   d4708:	000dada3 	.word	0x000dada3

000d470c <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir>:
uint8_t igh_app_add_message_header( uint8_t *_buffer, uint8_t start, igh_msg_type msg_type, igh_msg_dir dir )
{
    uint8_t i = start;

    // Add Message type
    _buffer[i++] = ERROR_MSG;
   d470c:	2345      	movs	r3, #69	; 0x45
        device_restart = false;
    }
}

uint8_t igh_app_add_message_header( uint8_t *_buffer, uint8_t start, igh_msg_type msg_type, igh_msg_dir dir )
{
   d470e:	b530      	push	{r4, r5, lr}
    uint8_t i = start;

    // Add Message type
    _buffer[i++] = ERROR_MSG;
   d4710:	5443      	strb	r3, [r0, r1]

    // Add direction
    _buffer[i++] = IGH_UPLOAD;
   d4712:	1c4b      	adds	r3, r1, #1
   d4714:	b2db      	uxtb	r3, r3
   d4716:	2255      	movs	r2, #85	; 0x55
   d4718:	54c2      	strb	r2, [r0, r3]

    // Add shield serial number
    memcpy( &_buffer[i], 
            boron_serial_number, 
            sizeof(boron_serial_number) );
   d471a:	4c0b      	ldr	r4, [pc, #44]	; (d4748 <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir+0x3c>)
   d471c:	1c8a      	adds	r2, r1, #2
   d471e:	b2d2      	uxtb	r2, r2
   d4720:	6823      	ldr	r3, [r4, #0]
   d4722:	5083      	str	r3, [r0, r2]
   d4724:	1885      	adds	r5, r0, r2
   d4726:	6863      	ldr	r3, [r4, #4]
   d4728:	606b      	str	r3, [r5, #4]
   d472a:	68a3      	ldr	r3, [r4, #8]
   d472c:	60ab      	str	r3, [r5, #8]

    i += sizeof(boron_serial_number);

    // Add incremental message ID
    static uint8_t message_id = 0;
    _buffer[i++] = message_id++;
   d472e:	4b07      	ldr	r3, [pc, #28]	; (d474c <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir+0x40>)
   d4730:	781a      	ldrb	r2, [r3, #0]
   d4732:	1c54      	adds	r4, r2, #1
   d4734:	701c      	strb	r4, [r3, #0]
   d4736:	f101 030e 	add.w	r3, r1, #14
   d473a:	b2db      	uxtb	r3, r3
   d473c:	54c2      	strb	r2, [r0, r3]

    return i;
   d473e:	f101 000f 	add.w	r0, r1, #15
}
   d4742:	b2c0      	uxtb	r0, r0
   d4744:	bd30      	pop	{r4, r5, pc}
   d4746:	bf00      	nop
   d4748:	2003e6a8 	.word	0x2003e6a8
   d474c:	2003daf7 	.word	0x2003daf7

000d4750 <_Z19igh_app_add_payloadPhhS_h>:

uint8_t igh_app_add_payload( uint8_t *_buffer, uint8_t start, uint8_t * _payload, uint8_t _payload_len )
{
   d4750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4754:	460c      	mov	r4, r1
   d4756:	4605      	mov	r5, r0
   d4758:	4699      	mov	r9, r3
   d475a:	4690      	mov	r8, r2
    uint32_t timestamp_to_store = igh_boron_unix_time();
   d475c:	f000 ffd0 	bl	d5700 <_Z19igh_boron_unix_timev>
   d4760:	4607      	mov	r7, r0
    float battery_soc_float = igh_boron_SoC();
   d4762:	f000 ffcf 	bl	d5704 <_Z13igh_boron_SoCv>
    uint32_t total_water_dispensed = 12364897; // replace with actual reading

    uint8_t i = start;

    // Add DATA PKT PID
    _buffer[i++] = DATA_PKT;
   d4766:	23fe      	movs	r3, #254	; 0xfe
   d4768:	552b      	strb	r3, [r5, r4]
    i++; // leave room for payload length

    // Add Shield ID
    _buffer[i++] = SHIELD_ID;
   d476a:	1ca3      	adds	r3, r4, #2
   d476c:	b2db      	uxtb	r3, r3
   d476e:	2217      	movs	r2, #23
   d4770:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = sizeof(boron_serial_number);
   d4772:	1ce3      	adds	r3, r4, #3
   d4774:	b2db      	uxtb	r3, r3
   d4776:	220c      	movs	r2, #12
   d4778:	54ea      	strb	r2, [r5, r3]
    memcpy(&_buffer[i], igh_current_system_settings.serial_number, sizeof(igh_current_system_settings.serial_number) );
   d477a:	4b46      	ldr	r3, [pc, #280]	; (d4894 <_Z19igh_app_add_payloadPhhS_h+0x144>)
   d477c:	1d22      	adds	r2, r4, #4
   d477e:	cb03      	ldmia	r3!, {r0, r1}
   d4780:	b2d2      	uxtb	r2, r2
   d4782:	eb05 0e02 	add.w	lr, r5, r2
   d4786:	50a8      	str	r0, [r5, r2]
   d4788:	f8ce 1004 	str.w	r1, [lr, #4]
   d478c:	6818      	ldr	r0, [r3, #0]
   d478e:	f8ce 0008 	str.w	r0, [lr, #8]
    i += sizeof(boron_serial_number);

    // Add Timestamp
    _buffer[i++] = STORE_TIMESTAMP;
   d4792:	f104 0310 	add.w	r3, r4, #16
   d4796:	b2db      	uxtb	r3, r3
   d4798:	2202      	movs	r2, #2
   d479a:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = SIZE_OF_STORE_TIMESTAMP;
   d479c:	f104 0311 	add.w	r3, r4, #17
   d47a0:	b2db      	uxtb	r3, r3
   d47a2:	2204      	movs	r2, #4
   d47a4:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)timestamp_to_store;
   d47a6:	f104 0312 	add.w	r3, r4, #18
   d47aa:	b2db      	uxtb	r3, r3
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 8);
   d47ac:	0a39      	lsrs	r1, r7, #8
    i += sizeof(boron_serial_number);

    // Add Timestamp
    _buffer[i++] = STORE_TIMESTAMP;
    _buffer[i++] = SIZE_OF_STORE_TIMESTAMP;
    _buffer[i++] = (uint8_t)timestamp_to_store;
   d47ae:	54ef      	strb	r7, [r5, r3]
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 8);
   d47b0:	f104 0313 	add.w	r3, r4, #19
   d47b4:	b2db      	uxtb	r3, r3
uint8_t igh_app_add_payload( uint8_t *_buffer, uint8_t start, uint8_t * _payload, uint8_t _payload_len )
{
    uint32_t timestamp_to_store = igh_boron_unix_time();
    float battery_soc_float = igh_boron_SoC();
    uint32_t battery_soc;
    memcpy(&battery_soc, &battery_soc_float, sizeof battery_soc);
   d47b6:	ee10 6a10 	vmov	r6, s0

    // Add Timestamp
    _buffer[i++] = STORE_TIMESTAMP;
    _buffer[i++] = SIZE_OF_STORE_TIMESTAMP;
    _buffer[i++] = (uint8_t)timestamp_to_store;
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 8);
   d47ba:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 16);
   d47bc:	f104 0314 	add.w	r3, r4, #20
   d47c0:	b2db      	uxtb	r3, r3
   d47c2:	0c39      	lsrs	r1, r7, #16
   d47c4:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 24);
   d47c6:	f104 0315 	add.w	r3, r4, #21
   d47ca:	b2db      	uxtb	r3, r3
   d47cc:	0e3f      	lsrs	r7, r7, #24
   d47ce:	54ef      	strb	r7, [r5, r3]

    // Add Shield battery level
    _buffer[i++] = SHIELD_BATTERY_LEVEL;
   d47d0:	f104 0316 	add.w	r3, r4, #22
   d47d4:	b2db      	uxtb	r3, r3
   d47d6:	210d      	movs	r1, #13
   d47d8:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = SIZE_OF_SHIELD_BATTERY_LEVEL;
   d47da:	f104 0317 	add.w	r3, r4, #23
   d47de:	b2db      	uxtb	r3, r3
    _buffer[i++] = (uint8_t)battery_soc;
    _buffer[i++] = (uint8_t)( battery_soc >> 8);
   d47e0:	0a31      	lsrs	r1, r6, #8
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 16);
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 24);

    // Add Shield battery level
    _buffer[i++] = SHIELD_BATTERY_LEVEL;
    _buffer[i++] = SIZE_OF_SHIELD_BATTERY_LEVEL;
   d47e2:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)battery_soc;
   d47e4:	f104 0318 	add.w	r3, r4, #24
   d47e8:	b2db      	uxtb	r3, r3
    _buffer[i++] = WATER_DISPENSED;
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
    _buffer[i++] = (uint8_t)total_water_dispensed;
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 8);
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 16);
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 24);
   d47ea:	f104 0025 	add.w	r0, r4, #37	; 0x25
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 24);

    // Add Shield battery level
    _buffer[i++] = SHIELD_BATTERY_LEVEL;
    _buffer[i++] = SIZE_OF_SHIELD_BATTERY_LEVEL;
    _buffer[i++] = (uint8_t)battery_soc;
   d47ee:	54ee      	strb	r6, [r5, r3]
    _buffer[i++] = (uint8_t)( battery_soc >> 8);
   d47f0:	f104 0319 	add.w	r3, r4, #25
   d47f4:	b2db      	uxtb	r3, r3
    _buffer[i++] = WATER_DISPENSED;
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
    _buffer[i++] = (uint8_t)total_water_dispensed;
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 8);
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 16);
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 24);
   d47f6:	b2c0      	uxtb	r0, r0

    // Add Shield battery level
    _buffer[i++] = SHIELD_BATTERY_LEVEL;
    _buffer[i++] = SIZE_OF_SHIELD_BATTERY_LEVEL;
    _buffer[i++] = (uint8_t)battery_soc;
    _buffer[i++] = (uint8_t)( battery_soc >> 8);
   d47f8:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = (uint8_t)( battery_soc >> 16);
   d47fa:	f104 031a 	add.w	r3, r4, #26
   d47fe:	b2db      	uxtb	r3, r3
   d4800:	0c31      	lsrs	r1, r6, #16
   d4802:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = (uint8_t)( battery_soc >> 24);
   d4804:	f104 031b 	add.w	r3, r4, #27
   d4808:	b2db      	uxtb	r3, r3
   d480a:	0e36      	lsrs	r6, r6, #24
   d480c:	54ee      	strb	r6, [r5, r3]

    // Add Valve position
    _buffer[i++] = VALVE_POSITION;
   d480e:	f104 031c 	add.w	r3, r4, #28
   d4812:	b2db      	uxtb	r3, r3
   d4814:	210f      	movs	r1, #15
   d4816:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = SIZE_OF_VALVE_POSITION;
   d4818:	f104 031d 	add.w	r3, r4, #29
   d481c:	b2db      	uxtb	r3, r3
   d481e:	2101      	movs	r1, #1
   d4820:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = current_valve_position;
   d4822:	4b1d      	ldr	r3, [pc, #116]	; (d4898 <_Z19igh_app_add_payloadPhhS_h+0x148>)
   d4824:	7819      	ldrb	r1, [r3, #0]
   d4826:	f104 031e 	add.w	r3, r4, #30
   d482a:	b2db      	uxtb	r3, r3
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 8);
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 16);
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 24);

    // only add payload if the package fits, prevvent memory leak
    if( (_payload_len + i + 1) < MESSAGE_SIZE )
   d482c:	eb09 0600 	add.w	r6, r9, r0
    _buffer[i++] = (uint8_t)( battery_soc >> 24);

    // Add Valve position
    _buffer[i++] = VALVE_POSITION;
    _buffer[i++] = SIZE_OF_VALVE_POSITION;
    _buffer[i++] = current_valve_position;
   d4830:	54e9      	strb	r1, [r5, r3]

    // Add water dispensed 
    _buffer[i++] = WATER_DISPENSED;
   d4832:	f104 031f 	add.w	r3, r4, #31
   d4836:	b2db      	uxtb	r3, r3
   d4838:	2107      	movs	r1, #7
   d483a:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
   d483c:	f104 0320 	add.w	r3, r4, #32
   d4840:	b2db      	uxtb	r3, r3
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 8);
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 16);
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 24);

    // only add payload if the package fits, prevvent memory leak
    if( (_payload_len + i + 1) < MESSAGE_SIZE )
   d4842:	2efd      	cmp	r6, #253	; 0xfd
    _buffer[i++] = SIZE_OF_VALVE_POSITION;
    _buffer[i++] = current_valve_position;

    // Add water dispensed 
    _buffer[i++] = WATER_DISPENSED;
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
   d4844:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)total_water_dispensed;
   d4846:	f104 0321 	add.w	r3, r4, #33	; 0x21
   d484a:	b2db      	uxtb	r3, r3
   d484c:	f04f 0261 	mov.w	r2, #97	; 0x61
   d4850:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 8);
   d4852:	f104 0322 	add.w	r3, r4, #34	; 0x22
   d4856:	b2db      	uxtb	r3, r3
   d4858:	f04f 02ac 	mov.w	r2, #172	; 0xac
   d485c:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 16);
   d485e:	f104 0323 	add.w	r3, r4, #35	; 0x23
   d4862:	b2db      	uxtb	r3, r3
   d4864:	f04f 02bc 	mov.w	r2, #188	; 0xbc
   d4868:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 24);
   d486a:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d486e:	b2db      	uxtb	r3, r3
   d4870:	f04f 0200 	mov.w	r2, #0
   d4874:	54ea      	strb	r2, [r5, r3]

    // only add payload if the package fits, prevvent memory leak
    if( (_payload_len + i + 1) < MESSAGE_SIZE )
   d4876:	dc05      	bgt.n	d4884 <_Z19igh_app_add_payloadPhhS_h+0x134>
    {
        memcpy(&_buffer[i], _payload, _payload_len);
   d4878:	464a      	mov	r2, r9
   d487a:	4641      	mov	r1, r8
   d487c:	4428      	add	r0, r5
   d487e:	f006 fa0c 	bl	dac9a <memcpy>
        i += _payload_len;
   d4882:	b2f0      	uxtb	r0, r6
    }

    // add the payload length
    _buffer[ start + 1 ] = i - start - 2;
   d4884:	4425      	add	r5, r4
   d4886:	f1c4 04fe 	rsb	r4, r4, #254	; 0xfe
   d488a:	4404      	add	r4, r0
   d488c:	706c      	strb	r4, [r5, #1]

    return i;
}
   d488e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4892:	bf00      	nop
   d4894:	2003e628 	.word	0x2003e628
   d4898:	2003e658 	.word	0x2003e658

000d489c <_Z27igh_app_send_device_restartv>:

    }
}

void igh_app_send_device_restart( void )
{
   d489c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint32_t current_time = igh_boron_unix_time();
   d48a0:	f000 ff2e 	bl	d5700 <_Z19igh_boron_unix_timev>

    // only ssave a restart message if the time is synced. Otherwise wait till that happens
    if( (true == device_restart)
   d48a4:	4b29      	ldr	r3, [pc, #164]	; (d494c <_Z27igh_app_send_device_restartv+0xb0>)
   d48a6:	781d      	ldrb	r5, [r3, #0]
   d48a8:	2d01      	cmp	r5, #1
    }
}

void igh_app_send_device_restart( void )
{
    uint32_t current_time = igh_boron_unix_time();
   d48aa:	4607      	mov	r7, r0
   d48ac:	4698      	mov	r8, r3

    // only ssave a restart message if the time is synced. Otherwise wait till that happens
    if( (true == device_restart)
   d48ae:	d149      	bne.n	d4944 <_Z27igh_app_send_device_restartv+0xa8>
        && (JAN_01_2020 < current_time) )
   d48b0:	4b27      	ldr	r3, [pc, #156]	; (d4950 <_Z27igh_app_send_device_restartv+0xb4>)
   d48b2:	4298      	cmp	r0, r3
   d48b4:	d946      	bls.n	d4944 <_Z27igh_app_send_device_restartv+0xa8>
    {
        uint8_t i = 0; // keep track of pkt data
        uint8_t restart_msg[3];

        // first clear the buffer
        memset( igh_msg_buffer, 0, sizeof(igh_msg_buffer) );
   d48b6:	4c27      	ldr	r4, [pc, #156]	; (d4954 <_Z27igh_app_send_device_restartv+0xb8>)
   d48b8:	22ff      	movs	r2, #255	; 0xff
   d48ba:	2100      	movs	r1, #0
   d48bc:	4620      	mov	r0, r4
   d48be:	f006 f9f7 	bl	dacb0 <memset>

        // Add Retart Message
        restart_msg[0] = RESTART;
   d48c2:	23fd      	movs	r3, #253	; 0xfd
   d48c4:	f88d 3004 	strb.w	r3, [sp, #4]
        restart_msg[1] = SIZE_OF_RESTART;
        restart_msg[2] = true;

        // Add frame start
        igh_msg_buffer[i++] = FRAME_START;
   d48c8:	233c      	movs	r3, #60	; 0x3c
   d48ca:	7023      	strb	r3, [r4, #0]
        i++; // leave room for pkg length

        i = igh_app_add_message_header( igh_msg_buffer, i, ERROR_MSG, IGH_UPLOAD );
   d48cc:	2245      	movs	r2, #69	; 0x45
   d48ce:	2355      	movs	r3, #85	; 0x55
   d48d0:	2102      	movs	r1, #2
   d48d2:	4620      	mov	r0, r4
        // first clear the buffer
        memset( igh_msg_buffer, 0, sizeof(igh_msg_buffer) );

        // Add Retart Message
        restart_msg[0] = RESTART;
        restart_msg[1] = SIZE_OF_RESTART;
   d48d4:	f88d 5005 	strb.w	r5, [sp, #5]
        restart_msg[2] = true;
   d48d8:	f88d 5006 	strb.w	r5, [sp, #6]

        // Add frame start
        igh_msg_buffer[i++] = FRAME_START;
        i++; // leave room for pkg length

        i = igh_app_add_message_header( igh_msg_buffer, i, ERROR_MSG, IGH_UPLOAD );
   d48dc:	f7ff ff16 	bl	d470c <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir>
        i = igh_app_add_payload( igh_msg_buffer, i, restart_msg, sizeof(restart_msg) );
   d48e0:	aa01      	add	r2, sp, #4
   d48e2:	4601      	mov	r1, r0
   d48e4:	2303      	movs	r3, #3
   d48e6:	4620      	mov	r0, r4
   d48e8:	f7ff ff32 	bl	d4750 <_Z19igh_app_add_payloadPhhS_h>

        // Add Frame End 
        igh_msg_buffer[i++] = FRAME_END;
   d48ec:	1c45      	adds	r5, r0, #1
   d48ee:	233e      	movs	r3, #62	; 0x3e
   d48f0:	b2ed      	uxtb	r5, r5
   d48f2:	5423      	strb	r3, [r4, r0]

        igh_msg_buffer[1] = i; // add length
   d48f4:	7065      	strb	r5, [r4, #1]

        Serial.print("{");
   d48f6:	f004 fd4f 	bl	d9398 <_Z16_fetch_usbserialv>
   d48fa:	4917      	ldr	r1, [pc, #92]	; (d4958 <_Z27igh_app_send_device_restartv+0xbc>)
   d48fc:	f004 f9ec 	bl	d8cd8 <_ZN5Print5printEPKc>
   d4900:	1e6b      	subs	r3, r5, #1
   d4902:	1e66      	subs	r6, r4, #1
   d4904:	441c      	add	r4, r3
        for( uint8_t k = 0; k < i; k++ )
   d4906:	42a6      	cmp	r6, r4
   d4908:	d00f      	beq.n	d492a <_Z27igh_app_send_device_restartv+0x8e>
        {
            if( igh_msg_buffer[k] <= 0x0F ) Serial.print("0");
   d490a:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   d490e:	2b0f      	cmp	r3, #15
   d4910:	d804      	bhi.n	d491c <_Z27igh_app_send_device_restartv+0x80>
   d4912:	f004 fd41 	bl	d9398 <_Z16_fetch_usbserialv>
   d4916:	4911      	ldr	r1, [pc, #68]	; (d495c <_Z27igh_app_send_device_restartv+0xc0>)
   d4918:	f004 f9de 	bl	d8cd8 <_ZN5Print5printEPKc>
            Serial.print(igh_msg_buffer[k], HEX);
   d491c:	f004 fd3c 	bl	d9398 <_Z16_fetch_usbserialv>
   d4920:	2210      	movs	r2, #16
   d4922:	7831      	ldrb	r1, [r6, #0]
   d4924:	f004 f9f5 	bl	d8d12 <_ZN5Print11printNumberEmh>
        igh_msg_buffer[i++] = FRAME_END;

        igh_msg_buffer[1] = i; // add length

        Serial.print("{");
        for( uint8_t k = 0; k < i; k++ )
   d4928:	e7ed      	b.n	d4906 <_Z27igh_app_send_device_restartv+0x6a>
        {
            if( igh_msg_buffer[k] <= 0x0F ) Serial.print("0");
            Serial.print(igh_msg_buffer[k], HEX);
        }
        Serial.print("}\n");
   d492a:	f004 fd35 	bl	d9398 <_Z16_fetch_usbserialv>
   d492e:	490c      	ldr	r1, [pc, #48]	; (d4960 <_Z27igh_app_send_device_restartv+0xc4>)
   d4930:	f004 f9d2 	bl	d8cd8 <_ZN5Print5printEPKc>

        // save restart message
        igh_sd_log_save_data_point( (unsigned long)current_time, igh_msg_buffer, i );
   d4934:	462a      	mov	r2, r5
   d4936:	4907      	ldr	r1, [pc, #28]	; (d4954 <_Z27igh_app_send_device_restartv+0xb8>)
   d4938:	4638      	mov	r0, r7
   d493a:	f000 fd75 	bl	d5428 <_Z26igh_sd_log_save_data_pointmPhh>

        device_restart = false;
   d493e:	2300      	movs	r3, #0
   d4940:	f888 3000 	strb.w	r3, [r8]
    }
}
   d4944:	b002      	add	sp, #8
   d4946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d494a:	bf00      	nop
   d494c:	2003da73 	.word	0x2003da73
   d4950:	386d4380 	.word	0x386d4380
   d4954:	2003e6f1 	.word	0x2003e6f1
   d4958:	000dad7f 	.word	0x000dad7f
   d495c:	000dad81 	.word	0x000dad81
   d4960:	000dada9 	.word	0x000dada9

000d4964 <_Z37igh_app_receive_and_stage_sensor_datav>:
    // manage data on SD card
    igh_app_log_service();
}

void igh_app_receive_and_stage_sensor_data( void )
{
   d4964:	b570      	push	{r4, r5, r6, lr}
   d4966:	b090      	sub	sp, #64	; 0x40
    uint8_t rx_buffer[RF69_MAX_DATA_LEN];
    uint8_t data_rx_len = 0;

    data_rx_len = igh_rfm69_receive_raw_bytes( rx_buffer, sizeof(rx_buffer) );
   d4968:	213d      	movs	r1, #61	; 0x3d
   d496a:	4668      	mov	r0, sp
   d496c:	f000 ffbe 	bl	d58ec <_Z27igh_rfm69_receive_raw_bytesPhh>

    if( 0 != data_rx_len )
   d4970:	4605      	mov	r5, r0
   d4972:	2800      	cmp	r0, #0
   d4974:	d052      	beq.n	d4a1c <_Z37igh_app_receive_and_stage_sensor_datav+0xb8>
    {
        uint8_t i = 0; // keep track of pkt data

        // first clear the buffer
        memset( igh_msg_buffer, 0, sizeof(igh_msg_buffer) );
   d4976:	4c2a      	ldr	r4, [pc, #168]	; (d4a20 <_Z37igh_app_receive_and_stage_sensor_datav+0xbc>)
   d4978:	22ff      	movs	r2, #255	; 0xff
   d497a:	2100      	movs	r1, #0
   d497c:	4620      	mov	r0, r4
   d497e:	f006 f997 	bl	dacb0 <memset>

        // Add frame start
        igh_msg_buffer[i++] = FRAME_START;
   d4982:	233c      	movs	r3, #60	; 0x3c
   d4984:	7023      	strb	r3, [r4, #0]
        i++; // leave room for pkg length

        i = igh_app_add_message_header( igh_msg_buffer, i, ERROR_MSG, IGH_UPLOAD );
   d4986:	2245      	movs	r2, #69	; 0x45
   d4988:	2355      	movs	r3, #85	; 0x55
   d498a:	2102      	movs	r1, #2
   d498c:	4620      	mov	r0, r4
   d498e:	f7ff febd 	bl	d470c <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir>
        i = igh_app_add_payload( igh_msg_buffer, i, rx_buffer, data_rx_len );
   d4992:	466a      	mov	r2, sp
   d4994:	4601      	mov	r1, r0
   d4996:	462b      	mov	r3, r5
   d4998:	4620      	mov	r0, r4
   d499a:	f7ff fed9 	bl	d4750 <_Z19igh_app_add_payloadPhhS_h>

        // Add Frame End 
        igh_msg_buffer[i++] = FRAME_END;
   d499e:	1c45      	adds	r5, r0, #1
   d49a0:	233e      	movs	r3, #62	; 0x3e
   d49a2:	b2ed      	uxtb	r5, r5
   d49a4:	5423      	strb	r3, [r4, r0]

        igh_msg_buffer[1] = i; // add length
   d49a6:	7065      	strb	r5, [r4, #1]

        Serial.print("\nTIMESTAMP: "); Serial.println(igh_boron_unix_time());
   d49a8:	f004 fcf6 	bl	d9398 <_Z16_fetch_usbserialv>
   d49ac:	491d      	ldr	r1, [pc, #116]	; (d4a24 <_Z37igh_app_receive_and_stage_sensor_datav+0xc0>)
   d49ae:	f004 f993 	bl	d8cd8 <_ZN5Print5printEPKc>
   d49b2:	f004 fcf1 	bl	d9398 <_Z16_fetch_usbserialv>
   d49b6:	4606      	mov	r6, r0
   d49b8:	f000 fea2 	bl	d5700 <_Z19igh_boron_unix_timev>
   d49bc:	220a      	movs	r2, #10
   d49be:	4601      	mov	r1, r0
   d49c0:	4630      	mov	r0, r6
   d49c2:	f004 f9a6 	bl	d8d12 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d49c6:	4630      	mov	r0, r6
   d49c8:	f004 f98d 	bl	d8ce6 <_ZN5Print7printlnEv>

        Serial.print("{");
   d49cc:	f004 fce4 	bl	d9398 <_Z16_fetch_usbserialv>
   d49d0:	4915      	ldr	r1, [pc, #84]	; (d4a28 <_Z37igh_app_receive_and_stage_sensor_datav+0xc4>)
   d49d2:	f004 f981 	bl	d8cd8 <_ZN5Print5printEPKc>
   d49d6:	1e6b      	subs	r3, r5, #1
   d49d8:	1e66      	subs	r6, r4, #1
   d49da:	441c      	add	r4, r3
        for( uint8_t k = 0; k < i; k++ )
   d49dc:	42a6      	cmp	r6, r4
   d49de:	d00f      	beq.n	d4a00 <_Z37igh_app_receive_and_stage_sensor_datav+0x9c>
        {
            if( igh_msg_buffer[k] <= 0x0F ) Serial.print("0");
   d49e0:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   d49e4:	2b0f      	cmp	r3, #15
   d49e6:	d804      	bhi.n	d49f2 <_Z37igh_app_receive_and_stage_sensor_datav+0x8e>
   d49e8:	f004 fcd6 	bl	d9398 <_Z16_fetch_usbserialv>
   d49ec:	490f      	ldr	r1, [pc, #60]	; (d4a2c <_Z37igh_app_receive_and_stage_sensor_datav+0xc8>)
   d49ee:	f004 f973 	bl	d8cd8 <_ZN5Print5printEPKc>
            Serial.print(igh_msg_buffer[k], HEX);
   d49f2:	f004 fcd1 	bl	d9398 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d49f6:	2210      	movs	r2, #16
   d49f8:	7831      	ldrb	r1, [r6, #0]
   d49fa:	f004 f98a 	bl	d8d12 <_ZN5Print11printNumberEmh>
        igh_msg_buffer[1] = i; // add length

        Serial.print("\nTIMESTAMP: "); Serial.println(igh_boron_unix_time());

        Serial.print("{");
        for( uint8_t k = 0; k < i; k++ )
   d49fe:	e7ed      	b.n	d49dc <_Z37igh_app_receive_and_stage_sensor_datav+0x78>
        {
            if( igh_msg_buffer[k] <= 0x0F ) Serial.print("0");
            Serial.print(igh_msg_buffer[k], HEX);
        }
        Serial.print("}\n");
   d4a00:	f004 fcca 	bl	d9398 <_Z16_fetch_usbserialv>
   d4a04:	490a      	ldr	r1, [pc, #40]	; (d4a30 <_Z37igh_app_receive_and_stage_sensor_datav+0xcc>)
   d4a06:	f004 f967 	bl	d8cd8 <_ZN5Print5printEPKc>

        // publish the data or store it if the publish fails
        uint32_t current_time = igh_boron_unix_time();
   d4a0a:	f000 fe79 	bl	d5700 <_Z19igh_boron_unix_timev>
        
        // Log data only if the time is synced
        if( JAN_01_2020 < current_time )
   d4a0e:	4b09      	ldr	r3, [pc, #36]	; (d4a34 <_Z37igh_app_receive_and_stage_sensor_datav+0xd0>)
   d4a10:	4298      	cmp	r0, r3
   d4a12:	d903      	bls.n	d4a1c <_Z37igh_app_receive_and_stage_sensor_datav+0xb8>
        igh_sd_log_save_data_point( (unsigned long)current_time, igh_msg_buffer, i );
   d4a14:	462a      	mov	r2, r5
   d4a16:	4902      	ldr	r1, [pc, #8]	; (d4a20 <_Z37igh_app_receive_and_stage_sensor_datav+0xbc>)
   d4a18:	f000 fd06 	bl	d5428 <_Z26igh_sd_log_save_data_pointmPhh>

    }
}
   d4a1c:	b010      	add	sp, #64	; 0x40
   d4a1e:	bd70      	pop	{r4, r5, r6, pc}
   d4a20:	2003e6f1 	.word	0x2003e6f1
   d4a24:	000dadac 	.word	0x000dadac
   d4a28:	000dad7f 	.word	0x000dad7f
   d4a2c:	000dad81 	.word	0x000dad81
   d4a30:	000dada9 	.word	0x000dada9
   d4a34:	386d4380 	.word	0x386d4380

000d4a38 <_Z27igh_app_commit_new_settingsv>:
        }
    }
}

void igh_app_commit_new_settings( void )
{
   d4a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( 1 == new_settings_available )
   d4a3a:	4b45      	ldr	r3, [pc, #276]	; (d4b50 <_Z27igh_app_commit_new_settingsv+0x118>)
   d4a3c:	781a      	ldrb	r2, [r3, #0]
   d4a3e:	2a01      	cmp	r2, #1
   d4a40:	461e      	mov	r6, r3
   d4a42:	f040 8084 	bne.w	d4b4e <_Z27igh_app_commit_new_settingsv+0x116>
    {
        Serial.print("OP STATE:"); Serial.println(igh_current_system_settings.op_state);
   d4a46:	f004 fca7 	bl	d9398 <_Z16_fetch_usbserialv>
   d4a4a:	4942      	ldr	r1, [pc, #264]	; (d4b54 <_Z27igh_app_commit_new_settingsv+0x11c>)
   d4a4c:	4c42      	ldr	r4, [pc, #264]	; (d4b58 <_Z27igh_app_commit_new_settingsv+0x120>)
   d4a4e:	f004 f943 	bl	d8cd8 <_ZN5Print5printEPKc>
   d4a52:	f004 fca1 	bl	d9398 <_Z16_fetch_usbserialv>
   d4a56:	220a      	movs	r2, #10
   d4a58:	7861      	ldrb	r1, [r4, #1]
   d4a5a:	4605      	mov	r5, r0
   d4a5c:	f004 f959 	bl	d8d12 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4a60:	4628      	mov	r0, r5
   d4a62:	f004 f940 	bl	d8ce6 <_ZN5Print7printlnEv>
        Serial.print("REPORTING INTERVAL: "); Serial.println(igh_current_system_settings.reporting_interval);
   d4a66:	f004 fc97 	bl	d9398 <_Z16_fetch_usbserialv>
   d4a6a:	493c      	ldr	r1, [pc, #240]	; (d4b5c <_Z27igh_app_commit_new_settingsv+0x124>)
   d4a6c:	f004 f934 	bl	d8cd8 <_ZN5Print5printEPKc>
   d4a70:	f004 fc92 	bl	d9398 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4a74:	220a      	movs	r2, #10
   d4a76:	6861      	ldr	r1, [r4, #4]
   d4a78:	4605      	mov	r5, r0
   d4a7a:	f004 f94a 	bl	d8d12 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4a7e:	4628      	mov	r0, r5
   d4a80:	f004 f931 	bl	d8ce6 <_ZN5Print7printlnEv>
        Serial.print("DATA RESOLUTION: "); Serial.println(igh_current_system_settings.data_resolution);
   d4a84:	f004 fc88 	bl	d9398 <_Z16_fetch_usbserialv>
   d4a88:	4935      	ldr	r1, [pc, #212]	; (d4b60 <_Z27igh_app_commit_new_settingsv+0x128>)
   d4a8a:	f004 f925 	bl	d8cd8 <_ZN5Print5printEPKc>
   d4a8e:	f004 fc83 	bl	d9398 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4a92:	220a      	movs	r2, #10
   d4a94:	68a1      	ldr	r1, [r4, #8]
   d4a96:	4605      	mov	r5, r0
   d4a98:	f004 f93b 	bl	d8d12 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4a9c:	4628      	mov	r0, r5
   d4a9e:	f004 f922 	bl	d8ce6 <_ZN5Print7printlnEv>
        Serial.print("SERIAL NUMBER: ");
   d4aa2:	f004 fc79 	bl	d9398 <_Z16_fetch_usbserialv>
   d4aa6:	492f      	ldr	r1, [pc, #188]	; (d4b64 <_Z27igh_app_commit_new_settingsv+0x12c>)
   d4aa8:	f004 f916 	bl	d8cd8 <_ZN5Print5printEPKc>
   d4aac:	f104 050b 	add.w	r5, r4, #11
   d4ab0:	f104 0717 	add.w	r7, r4, #23
        for( uint8_t i = 0; i < sizeof(igh_default_system_settings.serial_number); i++ )
        {
            if( igh_current_system_settings.serial_number[i] <= 0x0F ) Serial.print("0");
   d4ab4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d4ab8:	2b0f      	cmp	r3, #15
   d4aba:	d804      	bhi.n	d4ac6 <_Z27igh_app_commit_new_settingsv+0x8e>
   d4abc:	f004 fc6c 	bl	d9398 <_Z16_fetch_usbserialv>
   d4ac0:	4929      	ldr	r1, [pc, #164]	; (d4b68 <_Z27igh_app_commit_new_settingsv+0x130>)
   d4ac2:	f004 f909 	bl	d8cd8 <_ZN5Print5printEPKc>
            Serial.print(igh_current_system_settings.serial_number[i], HEX);
   d4ac6:	f004 fc67 	bl	d9398 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4aca:	2210      	movs	r2, #16
   d4acc:	7829      	ldrb	r1, [r5, #0]
   d4ace:	f004 f920 	bl	d8d12 <_ZN5Print11printNumberEmh>
    {
        Serial.print("OP STATE:"); Serial.println(igh_current_system_settings.op_state);
        Serial.print("REPORTING INTERVAL: "); Serial.println(igh_current_system_settings.reporting_interval);
        Serial.print("DATA RESOLUTION: "); Serial.println(igh_current_system_settings.data_resolution);
        Serial.print("SERIAL NUMBER: ");
        for( uint8_t i = 0; i < sizeof(igh_default_system_settings.serial_number); i++ )
   d4ad2:	42af      	cmp	r7, r5
   d4ad4:	d1ee      	bne.n	d4ab4 <_Z27igh_app_commit_new_settingsv+0x7c>
        {
            if( igh_current_system_settings.serial_number[i] <= 0x0F ) Serial.print("0");
            Serial.print(igh_current_system_settings.serial_number[i], HEX);
        }
        Serial.print("\n");
   d4ad6:	f004 fc5f 	bl	d9398 <_Z16_fetch_usbserialv>
        Serial.print("MQTT BROKER: "); Serial.println((char *)igh_current_system_settings.broker);
   d4ada:	4d24      	ldr	r5, [pc, #144]	; (d4b6c <_Z27igh_app_commit_new_settingsv+0x134>)
        for( uint8_t i = 0; i < sizeof(igh_default_system_settings.serial_number); i++ )
        {
            if( igh_current_system_settings.serial_number[i] <= 0x0F ) Serial.print("0");
            Serial.print(igh_current_system_settings.serial_number[i], HEX);
        }
        Serial.print("\n");
   d4adc:	4924      	ldr	r1, [pc, #144]	; (d4b70 <_Z27igh_app_commit_new_settingsv+0x138>)
   d4ade:	f004 f8fb 	bl	d8cd8 <_ZN5Print5printEPKc>
        Serial.print("MQTT BROKER: "); Serial.println((char *)igh_current_system_settings.broker);
   d4ae2:	f004 fc59 	bl	d9398 <_Z16_fetch_usbserialv>
   d4ae6:	4923      	ldr	r1, [pc, #140]	; (d4b74 <_Z27igh_app_commit_new_settingsv+0x13c>)
   d4ae8:	f004 f8f6 	bl	d8cd8 <_ZN5Print5printEPKc>
   d4aec:	f004 fc54 	bl	d9398 <_Z16_fetch_usbserialv>
   d4af0:	4629      	mov	r1, r5
   d4af2:	f004 f904 	bl	d8cfe <_ZN5Print7printlnEPKc>
        Serial.print("MQTT BROKER PORT: "); Serial.println(igh_current_system_settings.broker_port);
   d4af6:	f004 fc4f 	bl	d9398 <_Z16_fetch_usbserialv>
   d4afa:	491f      	ldr	r1, [pc, #124]	; (d4b78 <_Z27igh_app_commit_new_settingsv+0x140>)
   d4afc:	f004 f8ec 	bl	d8cd8 <_ZN5Print5printEPKc>
   d4b00:	f004 fc4a 	bl	d9398 <_Z16_fetch_usbserialv>
   d4b04:	220a      	movs	r2, #10
   d4b06:	8f21      	ldrh	r1, [r4, #56]	; 0x38
   d4b08:	4607      	mov	r7, r0
   d4b0a:	f004 f902 	bl	d8d12 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4b0e:	4638      	mov	r0, r7
   d4b10:	f004 f8e9 	bl	d8ce6 <_ZN5Print7printlnEv>
        Serial.print("CHECKSUM: "); Serial.println(igh_current_system_settings.checksum);
   d4b14:	f004 fc40 	bl	d9398 <_Z16_fetch_usbserialv>
   d4b18:	4918      	ldr	r1, [pc, #96]	; (d4b7c <_Z27igh_app_commit_new_settingsv+0x144>)
   d4b1a:	f004 f8dd 	bl	d8cd8 <_ZN5Print5printEPKc>
   d4b1e:	f004 fc3b 	bl	d9398 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4b22:	220a      	movs	r2, #10
   d4b24:	f815 1c18 	ldrb.w	r1, [r5, #-24]
   d4b28:	4604      	mov	r4, r0
   d4b2a:	f004 f8f2 	bl	d8d12 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4b2e:	4620      	mov	r0, r4
   d4b30:	f004 f8d9 	bl	d8ce6 <_ZN5Print7printlnEv>

        if ( true == igh_eeprom_save_system_settings( &igh_current_system_settings) )
   d4b34:	f1a5 0018 	sub.w	r0, r5, #24
   d4b38:	f000 faa8 	bl	d508c <_Z31igh_eeprom_save_system_settingsP15system_settings>
   d4b3c:	2801      	cmp	r0, #1
   d4b3e:	d104      	bne.n	d4b4a <_Z27igh_app_commit_new_settingsv+0x112>
        {
            Serial.println("Settings Saved successfully");
   d4b40:	f004 fc2a 	bl	d9398 <_Z16_fetch_usbserialv>
   d4b44:	490e      	ldr	r1, [pc, #56]	; (d4b80 <_Z27igh_app_commit_new_settingsv+0x148>)
   d4b46:	f004 f8da 	bl	d8cfe <_ZN5Print7printlnEPKc>
        }

        new_settings_available = 0;
   d4b4a:	2300      	movs	r3, #0
   d4b4c:	7033      	strb	r3, [r6, #0]
   d4b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4b50:	2003daf4 	.word	0x2003daf4
   d4b54:	000dadb9 	.word	0x000dadb9
   d4b58:	2003e61c 	.word	0x2003e61c
   d4b5c:	000dadc3 	.word	0x000dadc3
   d4b60:	000dadd8 	.word	0x000dadd8
   d4b64:	000dadea 	.word	0x000dadea
   d4b68:	000dad81 	.word	0x000dad81
   d4b6c:	2003e634 	.word	0x2003e634
   d4b70:	000db1db 	.word	0x000db1db
   d4b74:	000dadfa 	.word	0x000dadfa
   d4b78:	000dae08 	.word	0x000dae08
   d4b7c:	000dae1b 	.word	0x000dae1b
   d4b80:	000dae26 	.word	0x000dae26

000d4b84 <_Z27igh_app_get_serial_hex_dataPhh>:
    }
}

uint8_t igh_app_get_serial_hex_data( uint8_t * buffer, uint8_t len )
{
   d4b84:	b570      	push	{r4, r5, r6, lr}
   d4b86:	460d      	mov	r5, r1
   d4b88:	4606      	mov	r6, r0
    uint8_t ret = 0;

    uint8_t bytes_available = Serial.available();
   d4b8a:	f004 fc05 	bl	d9398 <_Z16_fetch_usbserialv>
   d4b8e:	6803      	ldr	r3, [r0, #0]
   d4b90:	691b      	ldr	r3, [r3, #16]
   d4b92:	4798      	blx	r3
   d4b94:	b2c4      	uxtb	r4, r0
    if( bytes_available > 0 )
   d4b96:	b90c      	cbnz	r4, d4b9c <_Z27igh_app_get_serial_hex_dataPhh+0x18>
    }
}

uint8_t igh_app_get_serial_hex_data( uint8_t * buffer, uint8_t len )
{
    uint8_t ret = 0;
   d4b98:	2400      	movs	r4, #0
   d4b9a:	e019      	b.n	d4bd0 <_Z27igh_app_get_serial_hex_dataPhh+0x4c>

    uint8_t bytes_available = Serial.available();
    if( bytes_available > 0 )
    {
        if( bytes_available <= len )
   d4b9c:	42ac      	cmp	r4, r5
   d4b9e:	d80c      	bhi.n	d4bba <_Z27igh_app_get_serial_hex_dataPhh+0x36>
   d4ba0:	4635      	mov	r5, r6
        {
            for( uint8_t i = 0; i < bytes_available; i++ )
            {
                // read all available bytes
                buffer[i] = Serial.read();
   d4ba2:	f004 fbf9 	bl	d9398 <_Z16_fetch_usbserialv>
   d4ba6:	6803      	ldr	r3, [r0, #0]
   d4ba8:	695b      	ldr	r3, [r3, #20]
   d4baa:	4798      	blx	r3
   d4bac:	f805 0b01 	strb.w	r0, [r5], #1
    uint8_t bytes_available = Serial.available();
    if( bytes_available > 0 )
    {
        if( bytes_available <= len )
        {
            for( uint8_t i = 0; i < bytes_available; i++ )
   d4bb0:	1bab      	subs	r3, r5, r6
   d4bb2:	b2db      	uxtb	r3, r3
   d4bb4:	429c      	cmp	r4, r3
   d4bb6:	d8f4      	bhi.n	d4ba2 <_Z27igh_app_get_serial_hex_dataPhh+0x1e>
   d4bb8:	e00a      	b.n	d4bd0 <_Z27igh_app_get_serial_hex_dataPhh+0x4c>
   d4bba:	2500      	movs	r5, #0
        else
        {
            for( uint8_t i = 0; i < bytes_available; i++ )
            {
                // dump the data
                Serial.read();
   d4bbc:	f004 fbec 	bl	d9398 <_Z16_fetch_usbserialv>
   d4bc0:	6803      	ldr	r3, [r0, #0]
   d4bc2:	3501      	adds	r5, #1
   d4bc4:	695b      	ldr	r3, [r3, #20]
   d4bc6:	4798      	blx	r3
            }
            ret = bytes_available;
        }
        else
        {
            for( uint8_t i = 0; i < bytes_available; i++ )
   d4bc8:	b2eb      	uxtb	r3, r5
   d4bca:	429c      	cmp	r4, r3
   d4bcc:	d8f6      	bhi.n	d4bbc <_Z27igh_app_get_serial_hex_dataPhh+0x38>
   d4bce:	e7e3      	b.n	d4b98 <_Z27igh_app_get_serial_hex_dataPhh+0x14>
                Serial.read();
            }
        }
    }
    return ret;
}
   d4bd0:	4620      	mov	r0, r4
   d4bd2:	bd70      	pop	{r4, r5, r6, pc}

000d4bd4 <_Z24igh_app_get_new_settingsv>:

    return i;
}

void igh_app_get_new_settings( void )
{
   d4bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    memset( igh_msg_buffer, 0, sizeof(igh_msg_buffer) );
   d4bd6:	4c26      	ldr	r4, [pc, #152]	; (d4c70 <_Z24igh_app_get_new_settingsv+0x9c>)
   d4bd8:	22ff      	movs	r2, #255	; 0xff
   d4bda:	2100      	movs	r1, #0
   d4bdc:	4620      	mov	r0, r4
   d4bde:	f006 f867 	bl	dacb0 <memset>
    uint8_t rx_bytes = igh_app_get_serial_hex_data(igh_msg_buffer, sizeof(igh_msg_buffer));
   d4be2:	21ff      	movs	r1, #255	; 0xff
   d4be4:	4620      	mov	r0, r4
   d4be6:	f7ff ffcd 	bl	d4b84 <_Z27igh_app_get_serial_hex_dataPhh>
    if ( 0 < rx_bytes ) // via Serial
   d4bea:	4606      	mov	r6, r0
   d4bec:	2800      	cmp	r0, #0
   d4bee:	d03e      	beq.n	d4c6e <_Z24igh_app_get_new_settingsv+0x9a>
    {

        Serial.print("SERIAL DATA SETTINGS --> {");
   d4bf0:	f004 fbd2 	bl	d9398 <_Z16_fetch_usbserialv>
   d4bf4:	491f      	ldr	r1, [pc, #124]	; (d4c74 <_Z24igh_app_get_new_settingsv+0xa0>)
   d4bf6:	f004 f86f 	bl	d8cd8 <_ZN5Print5printEPKc>
   d4bfa:	1e77      	subs	r7, r6, #1
   d4bfc:	1e65      	subs	r5, r4, #1
   d4bfe:	4427      	add	r7, r4
        for( uint8_t k = 0; k < rx_bytes; k++ )
   d4c00:	42bd      	cmp	r5, r7
   d4c02:	d00f      	beq.n	d4c24 <_Z24igh_app_get_new_settingsv+0x50>
        {
            if( igh_msg_buffer[k] <= 0x0F ) Serial.print("0");
   d4c04:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d4c08:	2b0f      	cmp	r3, #15
   d4c0a:	d804      	bhi.n	d4c16 <_Z24igh_app_get_new_settingsv+0x42>
   d4c0c:	f004 fbc4 	bl	d9398 <_Z16_fetch_usbserialv>
   d4c10:	4919      	ldr	r1, [pc, #100]	; (d4c78 <_Z24igh_app_get_new_settingsv+0xa4>)
   d4c12:	f004 f861 	bl	d8cd8 <_ZN5Print5printEPKc>
            Serial.print(igh_msg_buffer[k], HEX);
   d4c16:	f004 fbbf 	bl	d9398 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4c1a:	2210      	movs	r2, #16
   d4c1c:	7829      	ldrb	r1, [r5, #0]
   d4c1e:	f004 f878 	bl	d8d12 <_ZN5Print11printNumberEmh>
    uint8_t rx_bytes = igh_app_get_serial_hex_data(igh_msg_buffer, sizeof(igh_msg_buffer));
    if ( 0 < rx_bytes ) // via Serial
    {

        Serial.print("SERIAL DATA SETTINGS --> {");
        for( uint8_t k = 0; k < rx_bytes; k++ )
   d4c22:	e7ed      	b.n	d4c00 <_Z24igh_app_get_new_settingsv+0x2c>
        {
            if( igh_msg_buffer[k] <= 0x0F ) Serial.print("0");
            Serial.print(igh_msg_buffer[k], HEX);
        }
        Serial.print("}\n");
   d4c24:	f004 fbb8 	bl	d9398 <_Z16_fetch_usbserialv>
   d4c28:	4914      	ldr	r1, [pc, #80]	; (d4c7c <_Z24igh_app_get_new_settingsv+0xa8>)
   d4c2a:	f004 f855 	bl	d8cd8 <_ZN5Print5printEPKc>

        if( IGH_SEND_SETTINGS == igh_msg_buffer[0] )
   d4c2e:	7823      	ldrb	r3, [r4, #0]
   d4c30:	2b10      	cmp	r3, #16
   d4c32:	d11c      	bne.n	d4c6e <_Z24igh_app_get_new_settingsv+0x9a>
        {
            if( true == igh_settings_process_settings_tuples( igh_msg_buffer, 2, rx_bytes) )
   d4c34:	4632      	mov	r2, r6
   d4c36:	2102      	movs	r1, #2
   d4c38:	480d      	ldr	r0, [pc, #52]	; (d4c70 <_Z24igh_app_get_new_settingsv+0x9c>)
   d4c3a:	f7ff fa3d 	bl	d40b8 <igh_settings_process_settings_tuples>
   d4c3e:	2801      	cmp	r0, #1
   d4c40:	d10e      	bne.n	d4c60 <_Z24igh_app_get_new_settingsv+0x8c>
            {
                new_settings_available = 1;
   d4c42:	4b0f      	ldr	r3, [pc, #60]	; (d4c80 <_Z24igh_app_get_new_settingsv+0xac>)
                // update the checksum of the system settings
                igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
   d4c44:	4c0f      	ldr	r4, [pc, #60]	; (d4c84 <_Z24igh_app_get_new_settingsv+0xb0>)

        if( IGH_SEND_SETTINGS == igh_msg_buffer[0] )
        {
            if( true == igh_settings_process_settings_tuples( igh_msg_buffer, 2, rx_bytes) )
            {
                new_settings_available = 1;
   d4c46:	7018      	strb	r0, [r3, #0]
                // update the checksum of the system settings
                igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
   d4c48:	213c      	movs	r1, #60	; 0x3c
   d4c4a:	4620      	mov	r0, r4
   d4c4c:	f7ff fbd8 	bl	d4400 <igh_settings_calculate_checksum>
   d4c50:	7020      	strb	r0, [r4, #0]
                // update the checksum for the threshold settings
                igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
   d4c52:	4c0d      	ldr	r4, [pc, #52]	; (d4c88 <_Z24igh_app_get_new_settingsv+0xb4>)
   d4c54:	2134      	movs	r1, #52	; 0x34
   d4c56:	4620      	mov	r0, r4
   d4c58:	f7ff fbd2 	bl	d4400 <igh_settings_calculate_checksum>
   d4c5c:	7020      	strb	r0, [r4, #0]
   d4c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            }
            else
            {
                Serial.println("SETTINGS FAILED");
   d4c60:	f004 fb9a 	bl	d9398 <_Z16_fetch_usbserialv>
   d4c64:	4909      	ldr	r1, [pc, #36]	; (d4c8c <_Z24igh_app_get_new_settingsv+0xb8>)
            }
            
        }
    }
}
   d4c66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                // update the checksum for the threshold settings
                igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
            }
            else
            {
                Serial.println("SETTINGS FAILED");
   d4c6a:	f004 b848 	b.w	d8cfe <_ZN5Print7printlnEPKc>
   d4c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4c70:	2003e6f1 	.word	0x2003e6f1
   d4c74:	000dae42 	.word	0x000dae42
   d4c78:	000dad81 	.word	0x000dad81
   d4c7c:	000dada9 	.word	0x000dada9
   d4c80:	2003daf4 	.word	0x2003daf4
   d4c84:	2003e61c 	.word	0x2003e61c
   d4c88:	2003e65c 	.word	0x2003e65c
   d4c8c:	000dae5d 	.word	0x000dae5d

000d4c90 <_Z19igh_app_log_servicev>:
    }
    return ret;
}

void igh_app_log_service( void )
{
   d4c90:	b508      	push	{r3, lr}
   d4c92:	f003 fae3 	bl	d825c <HAL_Timer_Get_Milli_Seconds>
    if( (millis() - log_service_timer) > ONE_SECOND )
   d4c96:	4b05      	ldr	r3, [pc, #20]	; (d4cac <_Z19igh_app_log_servicev+0x1c>)
   d4c98:	681b      	ldr	r3, [r3, #0]
   d4c9a:	1ac0      	subs	r0, r0, r3
   d4c9c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4ca0:	d903      	bls.n	d4caa <_Z19igh_app_log_servicev+0x1a>
            }
        }

        log_service_timer = millis();
    }
}
   d4ca2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4ca6:	f7ff bca1 	b.w	d45ec <_Z19igh_app_log_servicev.part.2>
   d4caa:	bd08      	pop	{r3, pc}
   d4cac:	2003daf8 	.word	0x2003daf8

000d4cb0 <_Z20igh_main_applicationv>:
    // setup the SD card
    igh_sd_log_setup();
}

void igh_main_application( void )
{
   d4cb0:	b508      	push	{r3, lr}
    // check if there are any settings to read
    igh_app_get_new_settings();
   d4cb2:	f7ff ff8f 	bl	d4bd4 <_Z24igh_app_get_new_settingsv>

    // commit new settings if available
    igh_app_commit_new_settings();
   d4cb6:	f7ff febf 	bl	d4a38 <_Z27igh_app_commit_new_settingsv>

    // process boron service
    igh_boron_service();
   d4cba:	f000 fd69 	bl	d5790 <_Z17igh_boron_servicev>
    
    // Send or store device restart message
    igh_app_send_device_restart();
   d4cbe:	f7ff fded 	bl	d489c <_Z27igh_app_send_device_restartv>
    
    // Send or Store Spear data
    igh_app_receive_and_stage_sensor_data();
   d4cc2:	f7ff fe4f 	bl	d4964 <_Z37igh_app_receive_and_stage_sensor_datav>

    // Run MQTT service in background
    igh_mqtt_service();
   d4cc6:	f000 f895 	bl	d4df4 <_Z16igh_mqtt_servicev>

    // rfm69 service in the background
    igh_rfm69_service();
   d4cca:	f000 fe2b 	bl	d5924 <_Z17igh_rfm69_servicev>

    // manage data on SD card
    igh_app_log_service();
}
   d4cce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

    // rfm69 service in the background
    igh_rfm69_service();

    // manage data on SD card
    igh_app_log_service();
   d4cd2:	f7ff bfdd 	b.w	d4c90 <_Z19igh_app_log_servicev>

000d4cd6 <_GLOBAL__sub_I_log_service_timer>:
   d4cd6:	f003 b9f9 	b.w	d80cc <HAL_Pin_Map>
	...

000d4cdc <_Z13mqtt_callbackPcPhj>:

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);

void mqtt_callback(char* topic, byte* payload, unsigned int length) {
   d4cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    igh_msg_type msg_type = UNKNOWN_MSG;
    uint8_t p[length];
   d4ce0:	1dd3      	adds	r3, r2, #7
   d4ce2:	f023 0307 	bic.w	r3, r3, #7

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);

void mqtt_callback(char* topic, byte* payload, unsigned int length) {
   d4ce6:	af00      	add	r7, sp, #0
    igh_msg_type msg_type = UNKNOWN_MSG;
    uint8_t p[length];
   d4ce8:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(p, payload, length);
   d4cec:	4668      	mov	r0, sp

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);

void mqtt_callback(char* topic, byte* payload, unsigned int length) {
   d4cee:	4690      	mov	r8, r2
    igh_msg_type msg_type = UNKNOWN_MSG;
    uint8_t p[length];
    memcpy(p, payload, length);
   d4cf0:	f005 ffd3 	bl	dac9a <memcpy>

    Serial.print("RECEIVED MSG: ");
   d4cf4:	f004 fb50 	bl	d9398 <_Z16_fetch_usbserialv>
   d4cf8:	4916      	ldr	r1, [pc, #88]	; (d4d54 <_Z13mqtt_callbackPcPhj+0x78>)
   d4cfa:	f003 ffed 	bl	d8cd8 <_ZN5Print5printEPKc>
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);

void mqtt_callback(char* topic, byte* payload, unsigned int length) {
    igh_msg_type msg_type = UNKNOWN_MSG;
    uint8_t p[length];
   d4cfe:	466c      	mov	r4, sp
    memcpy(p, payload, length);

    Serial.print("RECEIVED MSG: ");
   d4d00:	2500      	movs	r5, #0
    for( uint8_t i = 0; i < length; i++ )
   d4d02:	b2ee      	uxtb	r6, r5
   d4d04:	45b0      	cmp	r8, r6
   d4d06:	d90f      	bls.n	d4d28 <_Z13mqtt_callbackPcPhj+0x4c>
    {
        if( p[i] <= 0x0F ) Serial.print("0");
   d4d08:	5da3      	ldrb	r3, [r4, r6]
   d4d0a:	2b0f      	cmp	r3, #15
   d4d0c:	d804      	bhi.n	d4d18 <_Z13mqtt_callbackPcPhj+0x3c>
   d4d0e:	f004 fb43 	bl	d9398 <_Z16_fetch_usbserialv>
   d4d12:	4911      	ldr	r1, [pc, #68]	; (d4d58 <_Z13mqtt_callbackPcPhj+0x7c>)
   d4d14:	f003 ffe0 	bl	d8cd8 <_ZN5Print5printEPKc>
        Serial.print(p[i], HEX);
   d4d18:	f004 fb3e 	bl	d9398 <_Z16_fetch_usbserialv>
   d4d1c:	2210      	movs	r2, #16
   d4d1e:	5da1      	ldrb	r1, [r4, r6]
   d4d20:	f003 fff7 	bl	d8d12 <_ZN5Print11printNumberEmh>
   d4d24:	3501      	adds	r5, #1
    igh_msg_type msg_type = UNKNOWN_MSG;
    uint8_t p[length];
    memcpy(p, payload, length);

    Serial.print("RECEIVED MSG: ");
    for( uint8_t i = 0; i < length; i++ )
   d4d26:	e7ec      	b.n	d4d02 <_Z13mqtt_callbackPcPhj+0x26>
    {
        if( p[i] <= 0x0F ) Serial.print("0");
        Serial.print(p[i], HEX);
    }

    msg_type = (igh_msg_type)igh_message_process_incoming_msg( p );
   d4d28:	4620      	mov	r0, r4
   d4d2a:	f7ff fc1d 	bl	d4568 <igh_message_process_incoming_msg>
   d4d2e:	4605      	mov	r5, r0

    Serial.print("\nMESSAGE TYPE: ");
   d4d30:	f004 fb32 	bl	d9398 <_Z16_fetch_usbserialv>
   d4d34:	4909      	ldr	r1, [pc, #36]	; (d4d5c <_Z13mqtt_callbackPcPhj+0x80>)
   d4d36:	f003 ffcf 	bl	d8cd8 <_ZN5Print5printEPKc>
    Serial.println((int)msg_type);
   d4d3a:	f004 fb2d 	bl	d9398 <_Z16_fetch_usbserialv>
   d4d3e:	220a      	movs	r2, #10
   d4d40:	4604      	mov	r4, r0
   d4d42:	4629      	mov	r1, r5
   d4d44:	f003 ffe5 	bl	d8d12 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4d48:	4620      	mov	r0, r4
   d4d4a:	f003 ffcc 	bl	d8ce6 <_ZN5Print7printlnEv>
}
   d4d4e:	46bd      	mov	sp, r7
   d4d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4d54:	000dae6d 	.word	0x000dae6d
   d4d58:	000dad81 	.word	0x000dad81
   d4d5c:	000dae7c 	.word	0x000dae7c

000d4d60 <_Z14igh_mqtt_setupv>:

void igh_mqtt_setup( void )
{
   d4d60:	b510      	push	{r4, lr}
    // set mqtt device name
    device_name = System.deviceID();
   d4d62:	4c1e      	ldr	r4, [pc, #120]	; (d4ddc <_Z14igh_mqtt_setupv+0x7c>)
    Serial.print("\nMESSAGE TYPE: ");
    Serial.println((int)msg_type);
}

void igh_mqtt_setup( void )
{
   d4d64:	b088      	sub	sp, #32
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d4d66:	a804      	add	r0, sp, #16
   d4d68:	f003 fccc 	bl	d8704 <spark_deviceID>
    // set mqtt device name
    device_name = System.deviceID();
   d4d6c:	a904      	add	r1, sp, #16
   d4d6e:	4620      	mov	r0, r4
   d4d70:	f003 ff44 	bl	d8bfc <_ZN6StringaSEOS_>
   d4d74:	a804      	add	r0, sp, #16
   d4d76:	f003 febb 	bl	d8af0 <_ZN6StringD1Ev>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4d7a:	4919      	ldr	r1, [pc, #100]	; (d4de0 <_Z14igh_mqtt_setupv+0x80>)
   d4d7c:	a804      	add	r0, sp, #16
   d4d7e:	f003 fefe 	bl	d8b7e <_ZN6StringC1EPK19__FlashStringHelper>
   d4d82:	4668      	mov	r0, sp
   d4d84:	f003 fcbe 	bl	d8704 <spark_deviceID>
    inbound_topic = "44" + System.deviceID();
   d4d88:	4669      	mov	r1, sp
   d4d8a:	a804      	add	r0, sp, #16
   d4d8c:	f003 ff66 	bl	d8c5c <_ZplRK15StringSumHelperRK6String>
   d4d90:	4601      	mov	r1, r0
   d4d92:	4814      	ldr	r0, [pc, #80]	; (d4de4 <_Z14igh_mqtt_setupv+0x84>)
   d4d94:	f003 ff23 	bl	d8bde <_ZN6StringaSERKS_>
   d4d98:	4668      	mov	r0, sp
   d4d9a:	f003 fea9 	bl	d8af0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4d9e:	a804      	add	r0, sp, #16
   d4da0:	f003 fea6 	bl	d8af0 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4da4:	4910      	ldr	r1, [pc, #64]	; (d4de8 <_Z14igh_mqtt_setupv+0x88>)
   d4da6:	a804      	add	r0, sp, #16
   d4da8:	f003 fee9 	bl	d8b7e <_ZN6StringC1EPK19__FlashStringHelper>
   d4dac:	4668      	mov	r0, sp
   d4dae:	f003 fca9 	bl	d8704 <spark_deviceID>
    outbound_topic = "55" + System.deviceID();
   d4db2:	4669      	mov	r1, sp
   d4db4:	a804      	add	r0, sp, #16
   d4db6:	f003 ff51 	bl	d8c5c <_ZplRK15StringSumHelperRK6String>
   d4dba:	4601      	mov	r1, r0
   d4dbc:	480b      	ldr	r0, [pc, #44]	; (d4dec <_Z14igh_mqtt_setupv+0x8c>)
   d4dbe:	f003 ff0e 	bl	d8bde <_ZN6StringaSERKS_>
   d4dc2:	4668      	mov	r0, sp
   d4dc4:	f003 fe94 	bl	d8af0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4dc8:	a804      	add	r0, sp, #16
   d4dca:	f003 fe91 	bl	d8af0 <_ZN6StringD1Ev>
    client.connect( (const char *)device_name );
   d4dce:	6821      	ldr	r1, [r4, #0]
   d4dd0:	4807      	ldr	r0, [pc, #28]	; (d4df0 <_Z14igh_mqtt_setupv+0x90>)
   d4dd2:	f000 fff3 	bl	d5dbc <_ZN4MQTT7connectEPKc>

}
   d4dd6:	b008      	add	sp, #32
   d4dd8:	bd10      	pop	{r4, pc}
   d4dda:	bf00      	nop
   d4ddc:	2003db20 	.word	0x2003db20
   d4de0:	000dae8c 	.word	0x000dae8c
   d4de4:	2003db00 	.word	0x2003db00
   d4de8:	000dae8f 	.word	0x000dae8f
   d4dec:	2003db10 	.word	0x2003db10
   d4df0:	2003db30 	.word	0x2003db30

000d4df4 <_Z16igh_mqtt_servicev>:

void igh_mqtt_service( void )
{
   d4df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( true == mqtt_set_broker )
   d4df8:	4b2b      	ldr	r3, [pc, #172]	; (d4ea8 <_Z16igh_mqtt_servicev+0xb4>)
   d4dfa:	781a      	ldrb	r2, [r3, #0]
   d4dfc:	2a01      	cmp	r2, #1
    client.connect( (const char *)device_name );

}

void igh_mqtt_service( void )
{
   d4dfe:	af00      	add	r7, sp, #0
   d4e00:	461d      	mov	r5, r3
    if( true == mqtt_set_broker )
   d4e02:	d127      	bne.n	d4e54 <_Z16igh_mqtt_servicev+0x60>
    {
        uint8_t broker_len = 0;
        while( igh_current_system_settings.broker[broker_len] )
   d4e04:	4929      	ldr	r1, [pc, #164]	; (d4eac <_Z16igh_mqtt_servicev+0xb8>)

        Serial.print("NEW MQTT BROKER SET: "); Serial.println(new_broker);
        
        client.setBroker(new_broker, igh_current_system_settings.broker_port);

        mqtt_set_broker = false;
   d4e06:	46e8      	mov	r8, sp
   d4e08:	2200      	movs	r2, #0
   d4e0a:	1c50      	adds	r0, r2, #1
void igh_mqtt_service( void )
{
    if( true == mqtt_set_broker )
    {
        uint8_t broker_len = 0;
        while( igh_current_system_settings.broker[broker_len] )
   d4e0c:	b2d2      	uxtb	r2, r2
   d4e0e:	188b      	adds	r3, r1, r2
   d4e10:	4e26      	ldr	r6, [pc, #152]	; (d4eac <_Z16igh_mqtt_servicev+0xb8>)
   d4e12:	7e1c      	ldrb	r4, [r3, #24]
   d4e14:	b10c      	cbz	r4, d4e1a <_Z16igh_mqtt_servicev+0x26>
   d4e16:	4602      	mov	r2, r0
   d4e18:	e7f7      	b.n	d4e0a <_Z16igh_mqtt_servicev+0x16>
        {
            if( '\0' == igh_current_system_settings.broker[broker_len] ) break;
            broker_len++;
        }
        
        char new_broker[broker_len + 1];
   d4e1a:	f102 0308 	add.w	r3, r2, #8
   d4e1e:	f023 0307 	bic.w	r3, r3, #7
   d4e22:	ebad 0d03 	sub.w	sp, sp, r3
        memcpy( new_broker, igh_current_system_settings.broker, sizeof(new_broker) );
   d4e26:	3201      	adds	r2, #1
   d4e28:	f106 0118 	add.w	r1, r6, #24
   d4e2c:	4668      	mov	r0, sp
   d4e2e:	f005 ff34 	bl	dac9a <memcpy>

        Serial.print("NEW MQTT BROKER SET: "); Serial.println(new_broker);
   d4e32:	f004 fab1 	bl	d9398 <_Z16_fetch_usbserialv>
   d4e36:	491e      	ldr	r1, [pc, #120]	; (d4eb0 <_Z16igh_mqtt_servicev+0xbc>)
   d4e38:	f003 ff4e 	bl	d8cd8 <_ZN5Print5printEPKc>
   d4e3c:	f004 faac 	bl	d9398 <_Z16_fetch_usbserialv>
   d4e40:	4669      	mov	r1, sp
   d4e42:	f003 ff5c 	bl	d8cfe <_ZN5Print7printlnEPKc>
        
        client.setBroker(new_broker, igh_current_system_settings.broker_port);
   d4e46:	4669      	mov	r1, sp
   d4e48:	8f32      	ldrh	r2, [r6, #56]	; 0x38
   d4e4a:	481a      	ldr	r0, [pc, #104]	; (d4eb4 <_Z16igh_mqtt_servicev+0xc0>)
   d4e4c:	f000 fecc 	bl	d5be8 <_ZN4MQTT9setBrokerEPct>

        mqtt_set_broker = false;
   d4e50:	702c      	strb	r4, [r5, #0]
   d4e52:	46c5      	mov	sp, r8
    }

    if (client.isConnected())
   d4e54:	4817      	ldr	r0, [pc, #92]	; (d4eb4 <_Z16igh_mqtt_servicev+0xc0>)
   d4e56:	4c18      	ldr	r4, [pc, #96]	; (d4eb8 <_Z16igh_mqtt_servicev+0xc4>)
   d4e58:	f000 feb8 	bl	d5bcc <_ZN4MQTT11isConnectedEv>
   d4e5c:	b170      	cbz	r0, d4e7c <_Z16igh_mqtt_servicev+0x88>
    {
        client.loop();
   d4e5e:	4815      	ldr	r0, [pc, #84]	; (d4eb4 <_Z16igh_mqtt_servicev+0xc0>)
        mqtt_connected = 1;
   d4e60:	2501      	movs	r5, #1
        mqtt_set_broker = false;
    }

    if (client.isConnected())
    {
        client.loop();
   d4e62:	f001 f868 	bl	d5f36 <_ZN4MQTT4loopEv>
        mqtt_connected = 1;
   d4e66:	7025      	strb	r5, [r4, #0]

        if( false == mqtt_subscribed )
   d4e68:	4c14      	ldr	r4, [pc, #80]	; (d4ebc <_Z16igh_mqtt_servicev+0xc8>)
   d4e6a:	7823      	ldrb	r3, [r4, #0]
   d4e6c:	b9c3      	cbnz	r3, d4ea0 <_Z16igh_mqtt_servicev+0xac>
   d4e6e:	4b14      	ldr	r3, [pc, #80]	; (d4ec0 <_Z16igh_mqtt_servicev+0xcc>)
        {
            client.subscribe( (const char *)inbound_topic );
   d4e70:	4810      	ldr	r0, [pc, #64]	; (d4eb4 <_Z16igh_mqtt_servicev+0xc0>)
   d4e72:	6819      	ldr	r1, [r3, #0]
   d4e74:	f001 f98b 	bl	d618e <_ZN4MQTT9subscribeEPKc>
            mqtt_subscribed = true;
   d4e78:	7025      	strb	r5, [r4, #0]
   d4e7a:	e011      	b.n	d4ea0 <_Z16igh_mqtt_servicev+0xac>
        }
    }
    else
    {
        /* try to connect */
        mqtt_connected = 0;
   d4e7c:	7020      	strb	r0, [r4, #0]

        if( (millis() - reconnect_interval) > 10000 )
   d4e7e:	4c11      	ldr	r4, [pc, #68]	; (d4ec4 <_Z16igh_mqtt_servicev+0xd0>)
   d4e80:	f003 f9ec 	bl	d825c <HAL_Timer_Get_Milli_Seconds>
   d4e84:	6823      	ldr	r3, [r4, #0]
   d4e86:	1ac0      	subs	r0, r0, r3
   d4e88:	f242 7310 	movw	r3, #10000	; 0x2710
   d4e8c:	4298      	cmp	r0, r3
   d4e8e:	d907      	bls.n	d4ea0 <_Z16igh_mqtt_servicev+0xac>
   d4e90:	4b0d      	ldr	r3, [pc, #52]	; (d4ec8 <_Z16igh_mqtt_servicev+0xd4>)
            // Serial.println("====================");
            // Serial.print("InTopic: "); Serial.println(inbound_topic);
            // Serial.print("OutTopic: "); Serial.println(outbound_topic);
            // Serial.print("Device Name: "); Serial.println(device_name);

            client.connect( (const char *)device_name );
   d4e92:	4808      	ldr	r0, [pc, #32]	; (d4eb4 <_Z16igh_mqtt_servicev+0xc0>)
   d4e94:	6819      	ldr	r1, [r3, #0]
   d4e96:	f000 ff91 	bl	d5dbc <_ZN4MQTT7connectEPKc>
   d4e9a:	f003 f9df 	bl	d825c <HAL_Timer_Get_Milli_Seconds>
            reconnect_interval = millis();
   d4e9e:	6020      	str	r0, [r4, #0]
        }
    }
}
   d4ea0:	46bd      	mov	sp, r7
   d4ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4ea6:	bf00      	nop
   d4ea8:	2003da54 	.word	0x2003da54
   d4eac:	2003e61c 	.word	0x2003e61c
   d4eb0:	000dae92 	.word	0x000dae92
   d4eb4:	2003db30 	.word	0x2003db30
   d4eb8:	2003db89 	.word	0x2003db89
   d4ebc:	2003db88 	.word	0x2003db88
   d4ec0:	2003db00 	.word	0x2003db00
   d4ec4:	2003dafc 	.word	0x2003dafc
   d4ec8:	2003db20 	.word	0x2003db20

000d4ecc <_Z21igh_mqtt_publish_dataPhj>:

bool igh_mqtt_publish_data( uint8_t *payload, unsigned int len )
{
   d4ecc:	b570      	push	{r4, r5, r6, lr}
   d4ece:	4605      	mov	r5, r0
    bool ret = false;
    if (client.isConnected()) {
   d4ed0:	480d      	ldr	r0, [pc, #52]	; (d4f08 <_Z21igh_mqtt_publish_dataPhj+0x3c>)
        }
    }
}

bool igh_mqtt_publish_data( uint8_t *payload, unsigned int len )
{
   d4ed2:	460e      	mov	r6, r1
    bool ret = false;
    if (client.isConnected()) {
   d4ed4:	f000 fe7a 	bl	d5bcc <_ZN4MQTT11isConnectedEv>
   d4ed8:	4604      	mov	r4, r0
   d4eda:	b168      	cbz	r0, d4ef8 <_Z21igh_mqtt_publish_dataPhj+0x2c>
        client.publish( (const char *)outbound_topic, 
                        (const uint8_t*) payload, len);
   d4edc:	490b      	ldr	r1, [pc, #44]	; (d4f0c <_Z21igh_mqtt_publish_dataPhj+0x40>)
   d4ede:	480a      	ldr	r0, [pc, #40]	; (d4f08 <_Z21igh_mqtt_publish_dataPhj+0x3c>)
   d4ee0:	6809      	ldr	r1, [r1, #0]
   d4ee2:	4633      	mov	r3, r6
   d4ee4:	462a      	mov	r2, r5
   d4ee6:	f000 ffe9 	bl	d5ebc <_ZN4MQTT7publishEPKcPKhj>
   d4eea:	4b09      	ldr	r3, [pc, #36]	; (d4f10 <_Z21igh_mqtt_publish_dataPhj+0x44>)
        client.subscribe( (const char *)inbound_topic );
   d4eec:	4806      	ldr	r0, [pc, #24]	; (d4f08 <_Z21igh_mqtt_publish_dataPhj+0x3c>)
   d4eee:	6819      	ldr	r1, [r3, #0]
   d4ef0:	f001 f94d 	bl	d618e <_ZN4MQTT9subscribeEPKc>
        ret = true;
   d4ef4:	2001      	movs	r0, #1
   d4ef6:	bd70      	pop	{r4, r5, r6, pc}
    }
    else
    {
        Serial.println("PUBLISH FAILED");
   d4ef8:	f004 fa4e 	bl	d9398 <_Z16_fetch_usbserialv>
   d4efc:	4905      	ldr	r1, [pc, #20]	; (d4f14 <_Z21igh_mqtt_publish_dataPhj+0x48>)
   d4efe:	f003 fefe 	bl	d8cfe <_ZN5Print7printlnEPKc>
    }
}

bool igh_mqtt_publish_data( uint8_t *payload, unsigned int len )
{
    bool ret = false;
   d4f02:	4620      	mov	r0, r4
    else
    {
        Serial.println("PUBLISH FAILED");
    }
    return ret;
}
   d4f04:	bd70      	pop	{r4, r5, r6, pc}
   d4f06:	bf00      	nop
   d4f08:	2003db30 	.word	0x2003db30
   d4f0c:	2003db10 	.word	0x2003db10
   d4f10:	2003db00 	.word	0x2003db00
   d4f14:	000daea8 	.word	0x000daea8

000d4f18 <_GLOBAL__sub_I_device_name>:
   d4f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#include "include/igh_settings.h"
#include "include/igh_default_settings.h"
#include "include/igh_message.h"

/* MQTT variables */
String device_name;
   d4f1a:	4e19      	ldr	r6, [pc, #100]	; (d4f80 <_GLOBAL__sub_I_device_name+0x68>)
   d4f1c:	4f19      	ldr	r7, [pc, #100]	; (d4f84 <_GLOBAL__sub_I_device_name+0x6c>)
   d4f1e:	4c1a      	ldr	r4, [pc, #104]	; (d4f88 <_GLOBAL__sub_I_device_name+0x70>)
   d4f20:	4d1a      	ldr	r5, [pc, #104]	; (d4f8c <_GLOBAL__sub_I_device_name+0x74>)
   d4f22:	f003 f8d3 	bl	d80cc <HAL_Pin_Map>
   d4f26:	4631      	mov	r1, r6
   d4f28:	4638      	mov	r0, r7
   d4f2a:	f003 fe28 	bl	d8b7e <_ZN6StringC1EPK19__FlashStringHelper>
   d4f2e:	4638      	mov	r0, r7
String inbound_topic;
   d4f30:	4f17      	ldr	r7, [pc, #92]	; (d4f90 <_GLOBAL__sub_I_device_name+0x78>)
#include "include/igh_settings.h"
#include "include/igh_default_settings.h"
#include "include/igh_message.h"

/* MQTT variables */
String device_name;
   d4f32:	4622      	mov	r2, r4
   d4f34:	4629      	mov	r1, r5
   d4f36:	f005 f90f 	bl	da158 <__aeabi_atexit>
String inbound_topic;
   d4f3a:	4631      	mov	r1, r6
   d4f3c:	4638      	mov	r0, r7
   d4f3e:	f003 fe1e 	bl	d8b7e <_ZN6StringC1EPK19__FlashStringHelper>
   d4f42:	4638      	mov	r0, r7
String outbound_topic;
   d4f44:	4f13      	ldr	r7, [pc, #76]	; (d4f94 <_GLOBAL__sub_I_device_name+0x7c>)
#include "include/igh_default_settings.h"
#include "include/igh_message.h"

/* MQTT variables */
String device_name;
String inbound_topic;
   d4f46:	4622      	mov	r2, r4
   d4f48:	4629      	mov	r1, r5
   d4f4a:	f005 f905 	bl	da158 <__aeabi_atexit>
String outbound_topic;
   d4f4e:	4631      	mov	r1, r6
   d4f50:	4638      	mov	r0, r7
   d4f52:	f003 fe14 	bl	d8b7e <_ZN6StringC1EPK19__FlashStringHelper>
   d4f56:	4629      	mov	r1, r5
bool mqtt_subscribed = false;
uint8_t mqtt_connected = 0;

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);
   d4f58:	4d0f      	ldr	r5, [pc, #60]	; (d4f98 <_GLOBAL__sub_I_device_name+0x80>)
#include "include/igh_message.h"

/* MQTT variables */
String device_name;
String inbound_topic;
String outbound_topic;
   d4f5a:	4622      	mov	r2, r4
   d4f5c:	4638      	mov	r0, r7
   d4f5e:	f005 f8fb 	bl	da158 <__aeabi_atexit>
bool mqtt_subscribed = false;
uint8_t mqtt_connected = 0;

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);
   d4f62:	4b0e      	ldr	r3, [pc, #56]	; (d4f9c <_GLOBAL__sub_I_device_name+0x84>)
   d4f64:	490e      	ldr	r1, [pc, #56]	; (d4fa0 <_GLOBAL__sub_I_device_name+0x88>)
   d4f66:	f240 725b 	movw	r2, #1883	; 0x75b
   d4f6a:	4628      	mov	r0, r5
   d4f6c:	f000 fd46 	bl	d59fc <_ZN4MQTTC1EPctPFvS0_PhjE>
   d4f70:	4622      	mov	r2, r4
   d4f72:	4628      	mov	r0, r5
   d4f74:	490b      	ldr	r1, [pc, #44]	; (d4fa4 <_GLOBAL__sub_I_device_name+0x8c>)
    else
    {
        Serial.println("PUBLISH FAILED");
    }
    return ret;
}
   d4f76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
bool mqtt_subscribed = false;
uint8_t mqtt_connected = 0;

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);
   d4f7a:	f005 b8ed 	b.w	da158 <__aeabi_atexit>
   d4f7e:	bf00      	nop
   d4f80:	000db1dc 	.word	0x000db1dc
   d4f84:	2003db20 	.word	0x2003db20
   d4f88:	2003daf0 	.word	0x2003daf0
   d4f8c:	000d8af1 	.word	0x000d8af1
   d4f90:	2003db00 	.word	0x2003db00
   d4f94:	2003db10 	.word	0x2003db10
   d4f98:	2003db30 	.word	0x2003db30
   d4f9c:	000d4cdd 	.word	0x000d4cdd
   d4fa0:	000daeb7 	.word	0x000daeb7
   d4fa4:	000d6195 	.word	0x000d6195

000d4fa8 <_GLOBAL__sub_I_test_valve_flag>:
        igh_append_test_status(ret);
        test_rfm69_flag = false;
    }

    return ret;
   d4fa8:	b510      	push	{r4, lr}
static void print_cmd_options(void);
static void igh_append_test_status(uint8_t _status);

uint8_t test_rfm69_flag = 0;

String IGH_ID;
   d4faa:	4c07      	ldr	r4, [pc, #28]	; (d4fc8 <_GLOBAL__sub_I_test_valve_flag+0x20>)
   d4fac:	f003 f88e 	bl	d80cc <HAL_Pin_Map>
   d4fb0:	4906      	ldr	r1, [pc, #24]	; (d4fcc <_GLOBAL__sub_I_test_valve_flag+0x24>)
   d4fb2:	4620      	mov	r0, r4
   d4fb4:	f003 fde3 	bl	d8b7e <_ZN6StringC1EPK19__FlashStringHelper>
   d4fb8:	4620      	mov	r0, r4
   d4fba:	4a05      	ldr	r2, [pc, #20]	; (d4fd0 <_GLOBAL__sub_I_test_valve_flag+0x28>)
   d4fbc:	4905      	ldr	r1, [pc, #20]	; (d4fd4 <_GLOBAL__sub_I_test_valve_flag+0x2c>)
        igh_append_test_status(ret);
        test_rfm69_flag = false;
    }

    return ret;
   d4fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void print_cmd_options(void);
static void igh_append_test_status(uint8_t _status);

uint8_t test_rfm69_flag = 0;

String IGH_ID;
   d4fc2:	f005 b8c9 	b.w	da158 <__aeabi_atexit>
   d4fc6:	bf00      	nop
   d4fc8:	2003db8c 	.word	0x2003db8c
   d4fcc:	000db1dc 	.word	0x000db1dc
   d4fd0:	2003daf0 	.word	0x2003daf0
   d4fd4:	000d8af1 	.word	0x000d8af1

000d4fd8 <_Z31igh_eeprom_read_system_settingsP15system_settings>:
 * \brief Gets system settings from eeprom emulator
 * \param running_system_settings_buffer: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_system_settings(system_settings * running_system_settings_buffer)
{
   d4fd8:	b530      	push	{r4, r5, lr}
   d4fda:	b091      	sub	sp, #68	; 0x44
  system_settings local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d4fdc:	223c      	movs	r2, #60	; 0x3c
   d4fde:	2100      	movs	r1, #0
 * \brief Gets system settings from eeprom emulator
 * \param running_system_settings_buffer: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_system_settings(system_settings * running_system_settings_buffer)
{
   d4fe0:	4605      	mov	r5, r0
  system_settings local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d4fe2:	a801      	add	r0, sp, #4
   d4fe4:	f005 fe64 	bl	dacb0 <memset>
  EEPROM.get(SYSTEM_SETTINGS_ADDRESS, local_buffer);
   d4fe8:	f005 f822 	bl	da030 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4fec:	223c      	movs	r2, #60	; 0x3c
   d4fee:	a901      	add	r1, sp, #4
   d4ff0:	2000      	movs	r0, #0
   d4ff2:	f003 f94b 	bl	d828c <HAL_EEPROM_Get>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));
   d4ff6:	213c      	movs	r1, #60	; 0x3c
   d4ff8:	a801      	add	r0, sp, #4
   d4ffa:	f7ff fa01 	bl	d4400 <igh_settings_calculate_checksum>

  if( checksum != local_buffer.checksum)
   d4ffe:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d5002:	4283      	cmp	r3, r0
   d5004:	d10c      	bne.n	d5020 <_Z31igh_eeprom_read_system_settingsP15system_settings+0x48>
  {
    return 0;
  }

  *running_system_settings_buffer = local_buffer;
   d5006:	ac01      	add	r4, sp, #4
   d5008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d500a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d500c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d500e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5010:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5012:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5014:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   d5018:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  return 1;
   d501c:	2001      	movs	r0, #1
   d501e:	e000      	b.n	d5022 <_Z31igh_eeprom_read_system_settingsP15system_settings+0x4a>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));

  if( checksum != local_buffer.checksum)
  {
    return 0;
   d5020:	2000      	movs	r0, #0
  }

  *running_system_settings_buffer = local_buffer;
  return 1;

}
   d5022:	b011      	add	sp, #68	; 0x44
   d5024:	bd30      	pop	{r4, r5, pc}
	...

000d5028 <_Z15igh_eeprom_initv>:
#define SYSTEM_THRESHOLDS_ADDRESS   (int)0x0200
#define SYSTEM_ERRORS_ADDRESS       (int)0x0400


void igh_eeprom_init( void )
{
   d5028:	b530      	push	{r4, r5, lr}
   d502a:	b091      	sub	sp, #68	; 0x44
  system_settings settings_in_memory;
  bool settings_read_successfully = igh_eeprom_read_system_settings(&settings_in_memory);
   d502c:	a801      	add	r0, sp, #4
   d502e:	f7ff ffd3 	bl	d4fd8 <_Z31igh_eeprom_read_system_settingsP15system_settings>
  uint8_t valid_checksum = igh_settings_calculate_checksum( &settings_in_memory, sizeof(settings_in_memory) );
   d5032:	213c      	movs	r1, #60	; 0x3c


void igh_eeprom_init( void )
{
  system_settings settings_in_memory;
  bool settings_read_successfully = igh_eeprom_read_system_settings(&settings_in_memory);
   d5034:	4604      	mov	r4, r0
  uint8_t valid_checksum = igh_settings_calculate_checksum( &settings_in_memory, sizeof(settings_in_memory) );
   d5036:	a801      	add	r0, sp, #4
   d5038:	f7ff f9e2 	bl	d4400 <igh_settings_calculate_checksum>

  if( false == settings_read_successfully ||
   d503c:	b124      	cbz	r4, d5048 <_Z15igh_eeprom_initv+0x20>
   d503e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d5042:	4283      	cmp	r3, r0
   d5044:	d100      	bne.n	d5048 <_Z15igh_eeprom_initv+0x20>
      (settings_in_memory.checksum != valid_checksum) ||
   d5046:	b93b      	cbnz	r3, d5058 <_Z15igh_eeprom_initv+0x30>
      ( 0 == settings_in_memory.checksum) )
  {
    // if we can't get valid settings from memory at all, use default settings
    Serial.println("USING DEFAULT SETTINGS");
   d5048:	f004 f9a6 	bl	d9398 <_Z16_fetch_usbserialv>
   d504c:	490c      	ldr	r1, [pc, #48]	; (d5080 <_Z15igh_eeprom_initv+0x58>)
   d504e:	f003 fe56 	bl	d8cfe <_ZN5Print7printlnEPKc>
    igh_settings_reset_system_to_default();
   d5052:	f7ff fa17 	bl	d4484 <igh_settings_reset_system_to_default>
   d5056:	e010      	b.n	d507a <_Z15igh_eeprom_initv+0x52>
  }
  else
  {
    Serial.println("USING SETTINGS FROM MEMORY");
   d5058:	f004 f99e 	bl	d9398 <_Z16_fetch_usbserialv>
    igh_current_system_settings = settings_in_memory;
   d505c:	ac01      	add	r4, sp, #4
    Serial.println("USING DEFAULT SETTINGS");
    igh_settings_reset_system_to_default();
  }
  else
  {
    Serial.println("USING SETTINGS FROM MEMORY");
   d505e:	4909      	ldr	r1, [pc, #36]	; (d5084 <_Z15igh_eeprom_initv+0x5c>)
    igh_current_system_settings = settings_in_memory;
   d5060:	4d09      	ldr	r5, [pc, #36]	; (d5088 <_Z15igh_eeprom_initv+0x60>)
    Serial.println("USING DEFAULT SETTINGS");
    igh_settings_reset_system_to_default();
  }
  else
  {
    Serial.println("USING SETTINGS FROM MEMORY");
   d5062:	f003 fe4c 	bl	d8cfe <_ZN5Print7printlnEPKc>
    igh_current_system_settings = settings_in_memory;
   d5066:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5068:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d506a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d506c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d506e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5070:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5072:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   d5076:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  }
}
   d507a:	b011      	add	sp, #68	; 0x44
   d507c:	bd30      	pop	{r4, r5, pc}
   d507e:	bf00      	nop
   d5080:	000daf58 	.word	0x000daf58
   d5084:	000daf6f 	.word	0x000daf6f
   d5088:	2003e61c 	.word	0x2003e61c

000d508c <_Z31igh_eeprom_save_system_settingsP15system_settings>:
 * \brief Save system settings  to eeprom emulator
 * \param settings_to_save: pointer to struct to save
 * \return true or false based on write success
 */
uint8_t igh_eeprom_save_system_settings(system_settings * settings_to_save)
{
   d508c:	b510      	push	{r4, lr}
   d508e:	4604      	mov	r4, r0
   d5090:	b090      	sub	sp, #64	; 0x40
  system_settings local_buffer;
  // save the data
  EEPROM.put(SYSTEM_SETTINGS_ADDRESS, *settings_to_save);
   d5092:	f004 ffcd 	bl	da030 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d5096:	223c      	movs	r2, #60	; 0x3c
   d5098:	4621      	mov	r1, r4
   d509a:	2000      	movs	r0, #0
   d509c:	f003 f8fe 	bl	d829c <HAL_EEPROM_Put>
  // check if data is saved
  igh_eeprom_read_system_settings(&local_buffer);
   d50a0:	a801      	add	r0, sp, #4
   d50a2:	f7ff ff99 	bl	d4fd8 <_Z31igh_eeprom_read_system_settingsP15system_settings>

  if( local_buffer.checksum != (settings_to_save->checksum))
  {
    return 0;
   d50a6:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d50aa:	7823      	ldrb	r3, [r4, #0]
  }

  return 1;
}
   d50ac:	1ac3      	subs	r3, r0, r3
   d50ae:	4258      	negs	r0, r3
   d50b0:	4158      	adcs	r0, r3
   d50b2:	b010      	add	sp, #64	; 0x40
   d50b4:	bd10      	pop	{r4, pc}

000d50b6 <_GLOBAL__sub_I__Z15igh_eeprom_initv>:
   d50b6:	f003 b809 	b.w	d80cc <HAL_Pin_Map>

000d50ba <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d50ba:	6803      	ldr	r3, [r0, #0]
   d50bc:	4718      	bx	r3

000d50be <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d50be:	2a01      	cmp	r2, #1
   d50c0:	d002      	beq.n	d50c8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d50c2:	2a02      	cmp	r2, #2
   d50c4:	d002      	beq.n	d50cc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d50c6:	e004      	b.n	d50d2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d50c8:	6001      	str	r1, [r0, #0]
	      break;
   d50ca:	e002      	b.n	d50d2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d50cc:	680b      	ldr	r3, [r1, #0]
   d50ce:	b100      	cbz	r0, d50d2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d50d0:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d50d2:	2000      	movs	r0, #0
   d50d4:	4770      	bx	lr

000d50d6 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d50d6:	6943      	ldr	r3, [r0, #20]
   d50d8:	b113      	cbz	r3, d50e0 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d50da:	6983      	ldr	r3, [r0, #24]
   d50dc:	300c      	adds	r0, #12
   d50de:	4718      	bx	r3
   d50e0:	4770      	bx	lr

000d50e2 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d50e2:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d50e4:	2100      	movs	r1, #0
   d50e6:	4604      	mov	r4, r0
   d50e8:	4608      	mov	r0, r1
   d50ea:	f003 f907 	bl	d82fc <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d50ee:	a902      	add	r1, sp, #8
   d50f0:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d50f2:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d50f4:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d50f8:	f003 f918 	bl	d832c <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d50fc:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d50fe:	b10c      	cbz	r4, d5104 <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d5100:	2301      	movs	r3, #1
   d5102:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d5104:	2100      	movs	r1, #0
   d5106:	2001      	movs	r0, #1
   d5108:	f003 f8f8 	bl	d82fc <os_thread_scheduling>
            }
        }
        if (t) {
   d510c:	b12c      	cbz	r4, d511a <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d510e:	6823      	ldr	r3, [r4, #0]
   d5110:	4620      	mov	r0, r4
   d5112:	689b      	ldr	r3, [r3, #8]
   d5114:	4798      	blx	r3
            t->running = false;
   d5116:	2300      	movs	r3, #0
   d5118:	7123      	strb	r3, [r4, #4]
        }
    }
   d511a:	b002      	add	sp, #8
   d511c:	bd10      	pop	{r4, pc}

000d511e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d511e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5120:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5122:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5124:	b113      	cbz	r3, d512c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5126:	2203      	movs	r2, #3
   d5128:	4601      	mov	r1, r0
   d512a:	4798      	blx	r3
    }
   d512c:	4620      	mov	r0, r4
   d512e:	bd10      	pop	{r4, pc}

000d5130 <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d5130:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d5132:	6880      	ldr	r0, [r0, #8]
   d5134:	2300      	movs	r3, #0
   d5136:	b138      	cbz	r0, d5148 <_ZN5Timer5_stopEjb+0x18>
   d5138:	e88d 000a 	stmia.w	sp, {r1, r3}
   d513c:	2102      	movs	r1, #2
   d513e:	f003 f8fd 	bl	d833c <os_timer_change>
   d5142:	fab0 f080 	clz	r0, r0
   d5146:	0940      	lsrs	r0, r0, #5
    }
   d5148:	b003      	add	sp, #12
   d514a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5150 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d5150:	b538      	push	{r3, r4, r5, lr}
   d5152:	4b10      	ldr	r3, [pc, #64]	; (d5194 <_ZN5TimerD1Ev+0x44>)
   d5154:	6003      	str	r3, [r0, #0]
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d5156:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d5158:	4604      	mov	r4, r0
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d515a:	b1a3      	cbz	r3, d5186 <_ZN5TimerD1Ev+0x36>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d515c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d5160:	2200      	movs	r2, #0
   d5162:	f7ff ffe5 	bl	d5130 <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d5166:	2100      	movs	r1, #0
   d5168:	68a0      	ldr	r0, [r4, #8]
   d516a:	f003 f8ff 	bl	d836c <os_timer_set_id>
            while (running) {
   d516e:	7923      	ldrb	r3, [r4, #4]
   d5170:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d5174:	b113      	cbz	r3, d517c <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d5176:	f003 f8a9 	bl	d82cc <os_thread_yield>
   d517a:	e7f8      	b.n	d516e <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d517c:	4629      	mov	r1, r5
   d517e:	68a0      	ldr	r0, [r4, #8]
   d5180:	f003 f8cc 	bl	d831c <os_timer_destroy>
            handle = nullptr;
   d5184:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5186:	f104 000c 	add.w	r0, r4, #12
   d518a:	f7ff ffc8 	bl	d511e <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d518e:	4620      	mov	r0, r4
   d5190:	bd38      	pop	{r3, r4, r5, pc}
   d5192:	bf00      	nop
   d5194:	000dafa4 	.word	0x000dafa4

000d5198 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d5198:	b510      	push	{r4, lr}
   d519a:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d519c:	f7ff ffd8 	bl	d5150 <_ZN5TimerD1Ev>
   d51a0:	4620      	mov	r0, r4
   d51a2:	211c      	movs	r1, #28
   d51a4:	f004 ffe6 	bl	da174 <_ZdlPvj>
   d51a8:	4620      	mov	r0, r4
   d51aa:	bd10      	pop	{r4, pc}

000d51ac <_Z21igh_boron_read_buttonv>:
    igh_button_timer.start();
    igh_button_sec_counter = 0;
}

uint8_t igh_boron_read_button(void)
{
   d51ac:	b508      	push	{r3, lr}
    return digitalRead(IGH_IRRIGATION_BUTTON);
   d51ae:	200f      	movs	r0, #15
   d51b0:	f004 ff2a 	bl	da008 <digitalRead>
}
   d51b4:	b2c0      	uxtb	r0, r0
   d51b6:	bd08      	pop	{r3, pc}

000d51b8 <_Z31igh_boron_button_press_durationv>:

void igh_boron_button_press_duration(void)
{
   d51b8:	b508      	push	{r3, lr}
    if(!igh_boron_read_button())
   d51ba:	f7ff fff7 	bl	d51ac <_Z21igh_boron_read_buttonv>
   d51be:	4b04      	ldr	r3, [pc, #16]	; (d51d0 <_Z31igh_boron_button_press_durationv+0x18>)
   d51c0:	b910      	cbnz	r0, d51c8 <_Z31igh_boron_button_press_durationv+0x10>
    {
        igh_button_sec_counter++;
   d51c2:	781a      	ldrb	r2, [r3, #0]
   d51c4:	3201      	adds	r2, #1
   d51c6:	e000      	b.n	d51ca <_Z31igh_boron_button_press_durationv+0x12>
    }
    else
    {
        igh_button_sec_counter = 0;
   d51c8:	2200      	movs	r2, #0
   d51ca:	701a      	strb	r2, [r3, #0]
   d51cc:	bd08      	pop	{r3, pc}
   d51ce:	bf00      	nop
   d51d0:	2003db9c 	.word	0x2003db9c

000d51d4 <_GLOBAL__sub_I_igh_button_sec_counter>:
    } 
   d51d4:	b570      	push	{r4, r5, r6, lr}
   d51d6:	b088      	sub	sp, #32
   d51d8:	f002 ff78 	bl	d80cc <HAL_Pin_Map>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d51dc:	4b19      	ldr	r3, [pc, #100]	; (d5244 <_GLOBAL__sub_I_igh_button_sec_counter+0x70>)
   d51de:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d51e0:	ad04      	add	r5, sp, #16
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d51e2:	4c19      	ldr	r4, [pc, #100]	; (d5248 <_GLOBAL__sub_I_igh_button_sec_counter+0x74>)
   d51e4:	4b19      	ldr	r3, [pc, #100]	; (d524c <_GLOBAL__sub_I_igh_button_sec_counter+0x78>)
   d51e6:	6023      	str	r3, [r4, #0]
   d51e8:	e895 0003 	ldmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d51ec:	f104 020c 	add.w	r2, r4, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d51f0:	ae02      	add	r6, sp, #8
   d51f2:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d51f6:	e892 0003 	ldmia.w	r2, {r0, r1}
   d51fa:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d51fe:	e896 0003 	ldmia.w	r6, {r0, r1}
   d5202:	e882 0003 	stmia.w	r2, {r0, r1}
   d5206:	4a12      	ldr	r2, [pc, #72]	; (d5250 <_GLOBAL__sub_I_igh_button_sec_counter+0x7c>)
   d5208:	6162      	str	r2, [r4, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d520a:	69a2      	ldr	r2, [r4, #24]
   d520c:	9207      	str	r2, [sp, #28]
   d520e:	2300      	movs	r3, #0
      __b = _GLIBCXX_MOVE(__tmp);
   d5210:	4a10      	ldr	r2, [pc, #64]	; (d5254 <_GLOBAL__sub_I_igh_button_sec_counter+0x80>)
   d5212:	7123      	strb	r3, [r4, #4]
   d5214:	60a3      	str	r3, [r4, #8]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5216:	9306      	str	r3, [sp, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   d5218:	61a2      	str	r2, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d521a:	9301      	str	r3, [sp, #4]
   d521c:	9300      	str	r3, [sp, #0]
   d521e:	4a0e      	ldr	r2, [pc, #56]	; (d5258 <_GLOBAL__sub_I_igh_button_sec_counter+0x84>)
   d5220:	4623      	mov	r3, r4
   d5222:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d5226:	f104 0008 	add.w	r0, r4, #8
   d522a:	f003 f86f 	bl	d830c <os_timer_create>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d522e:	4628      	mov	r0, r5
   d5230:	f7ff ff75 	bl	d511e <_ZNSt14_Function_baseD1Ev>
#include "igh_hardware.h"
#include "include/igh_settings.h"

// button global variables
uint8_t igh_button_sec_counter;
Timer igh_button_timer(1000, igh_boron_button_press_duration);
   d5234:	4a09      	ldr	r2, [pc, #36]	; (d525c <_GLOBAL__sub_I_igh_button_sec_counter+0x88>)
   d5236:	490a      	ldr	r1, [pc, #40]	; (d5260 <_GLOBAL__sub_I_igh_button_sec_counter+0x8c>)
   d5238:	4620      	mov	r0, r4
   d523a:	f004 ff8d 	bl	da158 <__aeabi_atexit>
    }
    else
    {
        igh_button_sec_counter = 0;
    } 
   d523e:	b008      	add	sp, #32
   d5240:	bd70      	pop	{r4, r5, r6, pc}
   d5242:	bf00      	nop
   d5244:	000d51b9 	.word	0x000d51b9
   d5248:	2003dba0 	.word	0x2003dba0
   d524c:	000dafa4 	.word	0x000dafa4
   d5250:	000d50bf 	.word	0x000d50bf
   d5254:	000d50bb 	.word	0x000d50bb
   d5258:	000d50e3 	.word	0x000d50e3
   d525c:	2003daf0 	.word	0x2003daf0
   d5260:	000d5151 	.word	0x000d5151

000d5264 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d5264:	7c03      	ldrb	r3, [r0, #16]
   d5266:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d526a:	4602      	mov	r2, r0
   d526c:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d5270:	b12b      	cbz	r3, d527e <_ZN4File9availableEv+0x1a>
   d5272:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d5274:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d5276:	1a18      	subs	r0, r3, r0
   d5278:	bf48      	it	mi
   d527a:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d527e:	4770      	bx	lr

000d5280 <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
   d5280:	4770      	bx	lr

000d5282 <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d5282:	4770      	bx	lr

000d5284 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d5284:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5286:	4602      	mov	r2, r0
   d5288:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d528a:	7913      	ldrb	r3, [r2, #4]
   d528c:	6895      	ldr	r5, [r2, #8]
   d528e:	b133      	cbz	r3, d529e <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d5290:	b93d      	cbnz	r5, d52a2 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d5292:	490c      	ldr	r1, [pc, #48]	; (d52c4 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d5294:	b004      	add	sp, #16
   d5296:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d529a:	f003 bd1d 	b.w	d8cd8 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d529e:	4b0a      	ldr	r3, [pc, #40]	; (d52c8 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d52a0:	e000      	b.n	d52a4 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d52a2:	4b0a      	ldr	r3, [pc, #40]	; (d52cc <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d52a4:	7b16      	ldrb	r6, [r2, #12]
   d52a6:	4c0a      	ldr	r4, [pc, #40]	; (d52d0 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d52a8:	490a      	ldr	r1, [pc, #40]	; (d52d4 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d52aa:	7b52      	ldrb	r2, [r2, #13]
   d52ac:	9202      	str	r2, [sp, #8]
   d52ae:	2e01      	cmp	r6, #1
   d52b0:	bf08      	it	eq
   d52b2:	4621      	moveq	r1, r4
   d52b4:	9101      	str	r1, [sp, #4]
   d52b6:	9500      	str	r5, [sp, #0]
   d52b8:	4a07      	ldr	r2, [pc, #28]	; (d52d8 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d52ba:	2100      	movs	r1, #0
   d52bc:	f003 fd49 	bl	d8d52 <_ZN5Print11printf_implEbPKcz>
  }
   d52c0:	b004      	add	sp, #16
   d52c2:	bd70      	pop	{r4, r5, r6, pc}
   d52c4:	000db00d 	.word	0x000db00d
   d52c8:	000db1dc 	.word	0x000db1dc
   d52cc:	000daffc 	.word	0x000daffc
   d52d0:	000db005 	.word	0x000db005
   d52d4:	000db009 	.word	0x000db009
   d52d8:	000db023 	.word	0x000db023

000d52dc <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d52dc:	3010      	adds	r0, #16
   d52de:	f001 bd93 	b.w	d6e08 <_ZN7FatFile4syncEv>

000d52e2 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d52e2:	3010      	adds	r0, #16
   d52e4:	f001 bc6a 	b.w	d6bbc <_ZN7FatFile4peekEv>

000d52e8 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d52e8:	3010      	adds	r0, #16
   d52ea:	f001 be2d 	b.w	d6f48 <_ZN7FatFile5writeEPKvj>

000d52ee <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d52ee:	3008      	adds	r0, #8
   d52f0:	f001 be2a 	b.w	d6f48 <_ZN7FatFile5writeEPKvj>

000d52f4 <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d52f4:	b507      	push	{r0, r1, r2, lr}
   d52f6:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d52f8:	2201      	movs	r2, #1
   d52fa:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d52fe:	3008      	adds	r0, #8
   d5300:	4619      	mov	r1, r3
   d5302:	f001 fe21 	bl	d6f48 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d5306:	b003      	add	sp, #12
   d5308:	f85d fb04 	ldr.w	pc, [sp], #4

000d530c <_ZN6SdFileD0Ev>:
   d530c:	b510      	push	{r4, lr}
   d530e:	212c      	movs	r1, #44	; 0x2c
   d5310:	4604      	mov	r4, r0
   d5312:	f004 ff2f 	bl	da174 <_ZdlPvj>
   d5316:	4620      	mov	r0, r4
   d5318:	bd10      	pop	{r4, pc}

000d531a <_ZN4FileD0Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d531a:	b510      	push	{r4, lr}
   d531c:	2134      	movs	r1, #52	; 0x34
   d531e:	4604      	mov	r4, r0
   d5320:	f004 ff28 	bl	da174 <_ZdlPvj>
   d5324:	4620      	mov	r0, r4
   d5326:	bd10      	pop	{r4, pc}

000d5328 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d5328:	b507      	push	{r0, r1, r2, lr}
   d532a:	ab02      	add	r3, sp, #8
   d532c:	2201      	movs	r2, #1
   d532e:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d5332:	3010      	adds	r0, #16
   d5334:	4619      	mov	r1, r3
   d5336:	f001 fe07 	bl	d6f48 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d533a:	b003      	add	sp, #12
   d533c:	f85d fb04 	ldr.w	pc, [sp], #4

000d5340 <_ZN7FatFile4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
   d5340:	b507      	push	{r0, r1, r2, lr}
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d5342:	2201      	movs	r2, #1
   d5344:	f10d 0107 	add.w	r1, sp, #7
   d5348:	f001 fb85 	bl	d6a56 <_ZN7FatFile4readEPvj>
   d534c:	2801      	cmp	r0, #1
   d534e:	bf0c      	ite	eq
   d5350:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d5354:	f04f 30ff 	movne.w	r0, #4294967295
  }
   d5358:	b003      	add	sp, #12
   d535a:	f85d fb04 	ldr.w	pc, [sp], #4

000d535e <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d535e:	b508      	push	{r3, lr}
    return FatFile::read();
   d5360:	3010      	adds	r0, #16
   d5362:	f7ff ffed 	bl	d5340 <_ZN7FatFile4readEv>
  }
   d5366:	bd08      	pop	{r3, pc}

000d5368 <_Z16igh_sd_log_setupv>:
 * convertedt to a character string
 * eg: 2E78FA2E.LOG
*/

uint8_t igh_sd_log_setup(void)
{
   d5368:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d536a:	4820      	ldr	r0, [pc, #128]	; (d53ec <_Z16igh_sd_log_setupv+0x84>)
    if(sd_root.isOpen()) sd_root.close();
   d536c:	7a03      	ldrb	r3, [r0, #8]
   d536e:	b113      	cbz	r3, d5376 <_Z16igh_sd_log_setupv+0xe>
   d5370:	3008      	adds	r0, #8
   d5372:	f001 fd7f 	bl	d6e74 <_ZN7FatFile5closeEv>
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d5376:	4c1e      	ldr	r4, [pc, #120]	; (d53f0 <_Z16igh_sd_log_setupv+0x88>)
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d5378:	4b1e      	ldr	r3, [pc, #120]	; (d53f4 <_Z16igh_sd_log_setupv+0x8c>)
   d537a:	4a1f      	ldr	r2, [pc, #124]	; (d53f8 <_Z16igh_sd_log_setupv+0x90>)
   d537c:	9300      	str	r3, [sp, #0]
   d537e:	f504 668c 	add.w	r6, r4, #1120	; 0x460
   d5382:	2300      	movs	r3, #0
   d5384:	f88d 3004 	strb.w	r3, [sp, #4]
   d5388:	9202      	str	r2, [sp, #8]
   d538a:	2501      	movs	r5, #1
   d538c:	f88d 300d 	strb.w	r3, [sp, #13]
   d5390:	220e      	movs	r2, #14
   d5392:	466b      	mov	r3, sp
   d5394:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   d5398:	4630      	mov	r0, r6
   d539a:	f88d 500c 	strb.w	r5, [sp, #12]
   d539e:	f002 f91b 	bl	d75d8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d53a2:	b300      	cbz	r0, d53e6 <_Z16igh_sd_log_setupv+0x7e>
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d53a4:	f204 403c 	addw	r0, r4, #1084	; 0x43c
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d53a8:	6026      	str	r6, [r4, #0]
    vwd()->close();
   d53aa:	f001 fd63 	bl	d6e74 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d53ae:	4629      	mov	r1, r5
   d53b0:	4620      	mov	r0, r4
   d53b2:	f001 ffba 	bl	d732a <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d53b6:	4601      	mov	r1, r0
   d53b8:	b180      	cbz	r0, d53dc <_Z16igh_sd_log_setupv+0x74>
   d53ba:	4c0d      	ldr	r4, [pc, #52]	; (d53f0 <_Z16igh_sd_log_setupv+0x88>)
   d53bc:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   d53c0:	4621      	mov	r1, r4
   d53c2:	4628      	mov	r0, r5
   d53c4:	f001 fb2f 	bl	d6a26 <_ZN7FatFile8openRootEP9FatVolume>
   d53c8:	b168      	cbz	r0, d53e6 <_Z16igh_sd_log_setupv+0x7e>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d53ca:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d53ce:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
   d53d2:	bf16      	itet	ne
   d53d4:	4b09      	ldrne	r3, [pc, #36]	; (d53fc <_Z16igh_sd_log_setupv+0x94>)
   d53d6:	4618      	moveq	r0, r3
   d53d8:	601d      	strne	r5, [r3, #0]
   d53da:	e005      	b.n	d53e8 <_Z16igh_sd_log_setupv+0x80>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d53dc:	4620      	mov	r0, r4
   d53de:	f001 ffa4 	bl	d732a <_ZN9FatVolume4initEh>
   d53e2:	2800      	cmp	r0, #0
   d53e4:	d1e9      	bne.n	d53ba <_Z16igh_sd_log_setupv+0x52>
   d53e6:	2000      	movs	r0, #0
    return igh_sd.begin(IGH_SD_CS);
}
   d53e8:	b004      	add	sp, #16
   d53ea:	bd70      	pop	{r4, r5, r6, pc}
   d53ec:	2003e078 	.word	0x2003e078
   d53f0:	2003dbf4 	.word	0x2003dbf4
   d53f4:	000dafb8 	.word	0x000dafb8
   d53f8:	02faf080 	.word	0x02faf080
   d53fc:	2003e11c 	.word	0x2003e11c

000d5400 <_Z24igh_sd_log_get_file_namemPc>:
{
    igh_file.rewindDirectory();
}

void igh_sd_log_get_file_name(unsigned long _unix_time, char * file_name)
{
   d5400:	b507      	push	{r0, r1, r2, lr}
   d5402:	4602      	mov	r2, r0
    sprintf(file_name, "%02X%02X%02X%02X.LOG", 
    (uint8_t)(_unix_time >> 24), 
    (uint8_t)(_unix_time >> 16), 
    (uint8_t)(_unix_time >> 8), 
    (uint8_t)(_unix_time));
   d5404:	b2d3      	uxtb	r3, r2
   d5406:	9301      	str	r3, [sp, #4]
   d5408:	f3c2 2307 	ubfx	r3, r2, #8, #8
   d540c:	9300      	str	r3, [sp, #0]
{
    igh_file.rewindDirectory();
}

void igh_sd_log_get_file_name(unsigned long _unix_time, char * file_name)
{
   d540e:	4608      	mov	r0, r1
    sprintf(file_name, "%02X%02X%02X%02X.LOG", 
    (uint8_t)(_unix_time >> 24), 
    (uint8_t)(_unix_time >> 16), 
    (uint8_t)(_unix_time >> 8), 
    (uint8_t)(_unix_time));
   d5410:	f3c2 4307 	ubfx	r3, r2, #16, #8
   d5414:	4903      	ldr	r1, [pc, #12]	; (d5424 <_Z24igh_sd_log_get_file_namemPc+0x24>)
   d5416:	0e12      	lsrs	r2, r2, #24
   d5418:	f003 f9ac 	bl	d8774 <sprintf>
}
   d541c:	b003      	add	sp, #12
   d541e:	f85d fb04 	ldr.w	pc, [sp], #4
   d5422:	bf00      	nop
   d5424:	000db041 	.word	0x000db041

000d5428 <_Z26igh_sd_log_save_data_pointmPhh>:

uint8_t igh_sd_log_save_data_point(unsigned long _unix_time, uint8_t * data, uint8_t size)
{
   d5428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d542c:	b092      	sub	sp, #72	; 0x48
   d542e:	4688      	mov	r8, r1
    char name[FILE_NAME_SIZE]; // include the null terminator?
    igh_sd_log_get_file_name(_unix_time, name);
   d5430:	a901      	add	r1, sp, #4
    (uint8_t)(_unix_time >> 8), 
    (uint8_t)(_unix_time));
}

uint8_t igh_sd_log_save_data_point(unsigned long _unix_time, uint8_t * data, uint8_t size)
{
   d5432:	4617      	mov	r7, r2
    char name[FILE_NAME_SIZE]; // include the null terminator?
    igh_sd_log_get_file_name(_unix_time, name);
   d5434:	f7ff ffe4 	bl	d5400 <_Z24igh_sd_log_get_file_namemPc>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5438:	2300      	movs	r3, #0
   d543a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d543e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5442:	9306      	str	r3, [sp, #24]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5444:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5448:	9307      	str	r3, [sp, #28]
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 public:
  File() {}
   d544a:	4b26      	ldr	r3, [pc, #152]	; (d54e4 <_Z26igh_sd_log_save_data_pointmPhh+0xbc>)
   d544c:	9305      	str	r3, [sp, #20]
   * \param[in] oflag open flags.
   * \return a File object.
   */
  File open(const char *path, oflag_t oflag = FILE_READ) {
    File tmpFile;
    tmpFile.open(vwd(), path, oflag);
   d544e:	aa01      	add	r2, sp, #4
   d5450:	f244 2302 	movw	r3, #16898	; 0x4202
   d5454:	4924      	ldr	r1, [pc, #144]	; (d54e8 <_Z26igh_sd_log_save_data_pointmPhh+0xc0>)
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d5456:	4e25      	ldr	r6, [pc, #148]	; (d54ec <_Z26igh_sd_log_save_data_pointmPhh+0xc4>)
   d5458:	a809      	add	r0, sp, #36	; 0x24
   d545a:	ac09      	add	r4, sp, #36	; 0x24
   d545c:	f001 fd11 	bl	d6e82 <_ZN7FatFile4openEPS_PKci>
   d5460:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5462:	f106 0510 	add.w	r5, r6, #16
   d5466:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5468:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d546a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d546c:	6823      	ldr	r3, [r4, #0]
   d546e:	602b      	str	r3, [r5, #0]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
   d5470:	9b06      	ldr	r3, [sp, #24]
   d5472:	6073      	str	r3, [r6, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   d5474:	9b07      	ldr	r3, [sp, #28]
   d5476:	60b3      	str	r3, [r6, #8]
   d5478:	9b08      	ldr	r3, [sp, #32]
   d547a:	60f3      	str	r3, [r6, #12]
    igh_file = igh_sd.open((const char *)name, FILE_WRITE);

    Serial.print("File name: "); Serial.print(name); Serial.print(" Size: "); Serial.println(size);
   d547c:	f003 ff8c 	bl	d9398 <_Z16_fetch_usbserialv>
   d5480:	491b      	ldr	r1, [pc, #108]	; (d54f0 <_Z26igh_sd_log_save_data_pointmPhh+0xc8>)
   d5482:	f003 fc29 	bl	d8cd8 <_ZN5Print5printEPKc>
   d5486:	f003 ff87 	bl	d9398 <_Z16_fetch_usbserialv>
   d548a:	a901      	add	r1, sp, #4
   d548c:	f003 fc24 	bl	d8cd8 <_ZN5Print5printEPKc>
   d5490:	f003 ff82 	bl	d9398 <_Z16_fetch_usbserialv>
   d5494:	4917      	ldr	r1, [pc, #92]	; (d54f4 <_Z26igh_sd_log_save_data_pointmPhh+0xcc>)
   d5496:	f003 fc1f 	bl	d8cd8 <_ZN5Print5printEPKc>
   d549a:	f003 ff7d 	bl	d9398 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d549e:	220a      	movs	r2, #10
   d54a0:	4604      	mov	r4, r0
   d54a2:	4639      	mov	r1, r7
   d54a4:	f003 fc35 	bl	d8d12 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d54a8:	4620      	mov	r0, r4
   d54aa:	f003 fc1c 	bl	d8ce6 <_ZN5Print7printlnEv>

    if(igh_file)
   d54ae:	7c34      	ldrb	r4, [r6, #16]
   d54b0:	b17c      	cbz	r4, d54d2 <_Z26igh_sd_log_save_data_pointmPhh+0xaa>
    {
        igh_file.write( data, size);
   d54b2:	463a      	mov	r2, r7
   d54b4:	4641      	mov	r1, r8
   d54b6:	4630      	mov	r0, r6
   d54b8:	f7ff ff16 	bl	d52e8 <_ZN4File5writeEPKhj>
        igh_file.close();
   d54bc:	f1a5 0020 	sub.w	r0, r5, #32
   d54c0:	f001 fcd8 	bl	d6e74 <_ZN7FatFile5closeEv>
        Serial.println("DATA LOG SUCCESS");
   d54c4:	f003 ff68 	bl	d9398 <_Z16_fetch_usbserialv>
   d54c8:	490b      	ldr	r1, [pc, #44]	; (d54f8 <_Z26igh_sd_log_save_data_pointmPhh+0xd0>)
   d54ca:	f003 fc18 	bl	d8cfe <_ZN5Print7printlnEPKc>
        return 1;
   d54ce:	2001      	movs	r0, #1
   d54d0:	e005      	b.n	d54de <_Z26igh_sd_log_save_data_pointmPhh+0xb6>
    }
    else
    {
        Serial.println("DATA LOG ERROR");
   d54d2:	f003 ff61 	bl	d9398 <_Z16_fetch_usbserialv>
   d54d6:	4909      	ldr	r1, [pc, #36]	; (d54fc <_Z26igh_sd_log_save_data_pointmPhh+0xd4>)
   d54d8:	f003 fc11 	bl	d8cfe <_ZN5Print7printlnEPKc>
        return 0;
   d54dc:	4620      	mov	r0, r4
    }
}
   d54de:	b012      	add	sp, #72	; 0x48
   d54e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d54e4:	000dafc4 	.word	0x000dafc4
   d54e8:	2003e030 	.word	0x2003e030
   d54ec:	2003e0a4 	.word	0x2003e0a4
   d54f0:	000db056 	.word	0x000db056
   d54f4:	000db062 	.word	0x000db062
   d54f8:	000db06a 	.word	0x000db06a
   d54fc:	000db07b 	.word	0x000db07b

000d5500 <_Z28igh_sd_log_remove_data_pointPc>:
  *
  * \return The value true is returned for success and
  * the value false is returned for failure.
  */
  bool remove(const char* path) {
    return FatFile::remove(vwd(), path);
   d5500:	4601      	mov	r1, r0
   d5502:	4801      	ldr	r0, [pc, #4]	; (d5508 <_Z28igh_sd_log_remove_data_pointPc+0x8>)
   d5504:	f001 bd0c 	b.w	d6f20 <_ZN7FatFile6removeEPS_PKc>
   d5508:	2003e030 	.word	0x2003e030

000d550c <_Z26igh_sd_log_read_data_pointPcPhh>:
        return 1;
    }
}

uint8_t igh_sd_log_read_data_point(char * file_name, uint8_t * buffer, uint8_t data_length)
{
   d550c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5510:	b08e      	sub	sp, #56	; 0x38
   d5512:	4690      	mov	r8, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5514:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5518:	9203      	str	r2, [sp, #12]
 public:
  File() {}
   d551a:	4a18      	ldr	r2, [pc, #96]	; (d557c <_Z26igh_sd_log_read_data_pointPcPhh+0x70>)
   d551c:	9201      	str	r2, [sp, #4]
   d551e:	2300      	movs	r3, #0
   * \param[in] oflag open flags.
   * \return a File object.
   */
  File open(const char *path, oflag_t oflag = FILE_READ) {
    File tmpFile;
    tmpFile.open(vwd(), path, oflag);
   d5520:	4602      	mov	r2, r0
   d5522:	460f      	mov	r7, r1
   d5524:	a805      	add	r0, sp, #20
   d5526:	4916      	ldr	r1, [pc, #88]	; (d5580 <_Z26igh_sd_log_read_data_pointPcPhh+0x74>)
   d5528:	f88d 3014 	strb.w	r3, [sp, #20]
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d552c:	ac05      	add	r4, sp, #20
   d552e:	f88d 3015 	strb.w	r3, [sp, #21]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5532:	9302      	str	r3, [sp, #8]
   d5534:	f001 fca5 	bl	d6e82 <_ZN7FatFile4openEPS_PKci>
   d5538:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d553a:	4e12      	ldr	r6, [pc, #72]	; (d5584 <_Z26igh_sd_log_read_data_pointPcPhh+0x78>)
   d553c:	f106 0510 	add.w	r5, r6, #16
   d5540:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5542:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5544:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5546:	6823      	ldr	r3, [r4, #0]
   d5548:	602b      	str	r3, [r5, #0]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
   d554a:	9b02      	ldr	r3, [sp, #8]
   d554c:	6073      	str	r3, [r6, #4]
    igh_file = igh_sd.open( (const char *)file_name );
    if(igh_file)
   d554e:	7c30      	ldrb	r0, [r6, #16]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   d5550:	9b03      	ldr	r3, [sp, #12]
   d5552:	60b3      	str	r3, [r6, #8]
   d5554:	9b04      	ldr	r3, [sp, #16]
   d5556:	60f3      	str	r3, [r6, #12]
   d5558:	b160      	cbz	r0, d5574 <_Z26igh_sd_log_read_data_pointPcPhh+0x68>
   d555a:	463c      	mov	r4, r7
    {
        for(int i = 0; i < data_length; i++)
   d555c:	1be3      	subs	r3, r4, r7
   d555e:	4598      	cmp	r8, r3
        {
            buffer[i] = igh_file.read(); // read data_len number of chars
        }
        igh_file.close();
   d5560:	4809      	ldr	r0, [pc, #36]	; (d5588 <_Z26igh_sd_log_read_data_pointPcPhh+0x7c>)
uint8_t igh_sd_log_read_data_point(char * file_name, uint8_t * buffer, uint8_t data_length)
{
    igh_file = igh_sd.open( (const char *)file_name );
    if(igh_file)
    {
        for(int i = 0; i < data_length; i++)
   d5562:	dd04      	ble.n	d556e <_Z26igh_sd_log_read_data_pointPcPhh+0x62>
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    return FatFile::read();
   d5564:	f7ff feec 	bl	d5340 <_ZN7FatFile4readEv>
        {
            buffer[i] = igh_file.read(); // read data_len number of chars
   d5568:	f804 0b01 	strb.w	r0, [r4], #1
   d556c:	e7f6      	b.n	d555c <_Z26igh_sd_log_read_data_pointPcPhh+0x50>
        }
        igh_file.close();
   d556e:	f001 fc81 	bl	d6e74 <_ZN7FatFile5closeEv>
   d5572:	2001      	movs	r0, #1
    }
    else
    {
        return 0;
    }   
}
   d5574:	b00e      	add	sp, #56	; 0x38
   d5576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d557a:	bf00      	nop
   d557c:	000dafc4 	.word	0x000dafc4
   d5580:	2003e030 	.word	0x2003e030
   d5584:	2003e0a4 	.word	0x2003e0a4
   d5588:	2003e0b4 	.word	0x2003e0b4

000d558c <_Z29igh_sd_log_get_next_file_namePc>:

uint8_t igh_sd_log_get_next_file_name(char * next_file_name)
{
   d558c:	b510      	push	{r4, lr}
   d558e:	4604      	mov	r4, r0
    if(!igh_sd_log_setup())
   d5590:	f7ff feea 	bl	d5368 <_Z16igh_sd_log_setupv>
   d5594:	b908      	cbnz	r0, d559a <_Z29igh_sd_log_get_next_file_namePc+0xe>
    {
        return 0;
   d5596:	2000      	movs	r0, #0
   d5598:	bd10      	pop	{r4, pc}
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d559a:	4910      	ldr	r1, [pc, #64]	; (d55dc <_Z29igh_sd_log_get_next_file_namePc+0x50>)
   d559c:	4a10      	ldr	r2, [pc, #64]	; (d55e0 <_Z29igh_sd_log_get_next_file_namePc+0x54>)
   d559e:	6809      	ldr	r1, [r1, #0]
   d55a0:	4810      	ldr	r0, [pc, #64]	; (d55e4 <_Z29igh_sd_log_get_next_file_namePc+0x58>)
   d55a2:	2300      	movs	r3, #0
   d55a4:	f001 fc6d 	bl	d6e82 <_ZN7FatFile4openEPS_PKci>
    }

    if (!sd_root.open("/"))
   d55a8:	2800      	cmp	r0, #0
   d55aa:	d0f4      	beq.n	d5596 <_Z29igh_sd_log_get_next_file_namePc+0xa>
    {
        return 0;
    }
    else
    {
        next_file.openNext(&sd_root, O_RDONLY); // skip one index
   d55ac:	2200      	movs	r2, #0
   d55ae:	490d      	ldr	r1, [pc, #52]	; (d55e4 <_Z29igh_sd_log_get_next_file_namePc+0x58>)
   d55b0:	480d      	ldr	r0, [pc, #52]	; (d55e8 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d55b2:	f001 fbea 	bl	d6d8a <_ZN7FatFile8openNextEPS_i>
        next_file.close(); 
   d55b6:	480c      	ldr	r0, [pc, #48]	; (d55e8 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d55b8:	f001 fc5c 	bl	d6e74 <_ZN7FatFile5closeEv>
        if( next_file.openNext(&sd_root, O_RDONLY) )
   d55bc:	2200      	movs	r2, #0
   d55be:	4909      	ldr	r1, [pc, #36]	; (d55e4 <_Z29igh_sd_log_get_next_file_namePc+0x58>)
   d55c0:	4809      	ldr	r0, [pc, #36]	; (d55e8 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d55c2:	f001 fbe2 	bl	d6d8a <_ZN7FatFile8openNextEPS_i>
   d55c6:	2800      	cmp	r0, #0
   d55c8:	d0e5      	beq.n	d5596 <_Z29igh_sd_log_get_next_file_namePc+0xa>
        {
            next_file.getSFN(next_file_name);
   d55ca:	4621      	mov	r1, r4
   d55cc:	4806      	ldr	r0, [pc, #24]	; (d55e8 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d55ce:	f001 f98d 	bl	d68ec <_ZN7FatFile6getSFNEPc>
            next_file.close(); 
   d55d2:	4805      	ldr	r0, [pc, #20]	; (d55e8 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d55d4:	f001 fc4e 	bl	d6e74 <_ZN7FatFile5closeEv>
   d55d8:	2001      	movs	r0, #1
        else
        {
            return 0;
        }    
    }
}
   d55da:	bd10      	pop	{r4, pc}
   d55dc:	2003e11c 	.word	0x2003e11c
   d55e0:	000db08a 	.word	0x000db08a
   d55e4:	2003e080 	.word	0x2003e080
   d55e8:	2003dbd0 	.word	0x2003dbd0

000d55ec <_GLOBAL__sub_I_igh_sd>:
    {
        return 0;
    }

    return 1;
   d55ec:	b570      	push	{r4, r5, r6, lr}
   d55ee:	f002 fd6d 	bl	d80cc <HAL_Pin_Map>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d55f2:	4b27      	ldr	r3, [pc, #156]	; (d5690 <_GLOBAL__sub_I_igh_sd+0xa4>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d55f4:	4e27      	ldr	r6, [pc, #156]	; (d5694 <_GLOBAL__sub_I_igh_sd+0xa8>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d55f6:	2164      	movs	r1, #100	; 0x64
   d55f8:	f883 1460 	strb.w	r1, [r3, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d55fc:	4926      	ldr	r1, [pc, #152]	; (d5698 <_GLOBAL__sub_I_igh_sd+0xac>)
   d55fe:	f8c3 1470 	str.w	r1, [r3, #1136]	; 0x470
   d5602:	2101      	movs	r1, #1
   d5604:	f883 1474 	strb.w	r1, [r3, #1140]	; 0x474
   d5608:	6831      	ldr	r1, [r6, #0]
   d560a:	2200      	movs	r2, #0
   d560c:	f011 0501 	ands.w	r5, r1, #1
   d5610:	71da      	strb	r2, [r3, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5612:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
   d5616:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
   d561a:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
   d561e:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   d5622:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
   d5626:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
   d562a:	461c      	mov	r4, r3
   d562c:	d10a      	bne.n	d5644 <_GLOBAL__sub_I_igh_sd+0x58>
   d562e:	4630      	mov	r0, r6
   d5630:	f7fe fd39 	bl	d40a6 <__cxa_guard_acquire>
   d5634:	b130      	cbz	r0, d5644 <_GLOBAL__sub_I_igh_sd+0x58>
   d5636:	4629      	mov	r1, r5
   d5638:	4818      	ldr	r0, [pc, #96]	; (d569c <_GLOBAL__sub_I_igh_sd+0xb0>)
   d563a:	f003 f8f7 	bl	d882c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d563e:	4630      	mov	r0, r6
   d5640:	f7fe fd36 	bl	d40b0 <__cxa_guard_release>
   d5644:	4816      	ldr	r0, [pc, #88]	; (d56a0 <_GLOBAL__sub_I_igh_sd+0xb4>)
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d5646:	4b15      	ldr	r3, [pc, #84]	; (d569c <_GLOBAL__sub_I_igh_sd+0xb0>)
   d5648:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d564c:	2400      	movs	r4, #0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d564e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5652:	7404      	strb	r4, [r0, #16]
   d5654:	7444      	strb	r4, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5656:	6044      	str	r4, [r0, #4]
   d5658:	6083      	str	r3, [r0, #8]
#include <SPI.h>
#include "SdFat.h"
#include "igh_sd_log.h"

SdFat igh_sd;
File igh_file;
   d565a:	4a12      	ldr	r2, [pc, #72]	; (d56a4 <_GLOBAL__sub_I_igh_sd+0xb8>)
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 public:
  File() {}
   d565c:	4b12      	ldr	r3, [pc, #72]	; (d56a8 <_GLOBAL__sub_I_igh_sd+0xbc>)
   d565e:	4913      	ldr	r1, [pc, #76]	; (d56ac <_GLOBAL__sub_I_igh_sd+0xc0>)
   d5660:	6003      	str	r3, [r0, #0]
   d5662:	f004 fd79 	bl	da158 <__aeabi_atexit>
   d5666:	4812      	ldr	r0, [pc, #72]	; (d56b0 <_GLOBAL__sub_I_igh_sd+0xc4>)
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 public:
  SdFile() {}
   d5668:	4d12      	ldr	r5, [pc, #72]	; (d56b4 <_GLOBAL__sub_I_igh_sd+0xc8>)
   d566a:	7204      	strb	r4, [r0, #8]
   d566c:	7244      	strb	r4, [r0, #9]
   d566e:	6044      	str	r4, [r0, #4]
SdFile sd_root;
   d5670:	4a0c      	ldr	r2, [pc, #48]	; (d56a4 <_GLOBAL__sub_I_igh_sd+0xb8>)
   d5672:	4911      	ldr	r1, [pc, #68]	; (d56b8 <_GLOBAL__sub_I_igh_sd+0xcc>)
   d5674:	6005      	str	r5, [r0, #0]
   d5676:	f004 fd6f 	bl	da158 <__aeabi_atexit>
   d567a:	4810      	ldr	r0, [pc, #64]	; (d56bc <_GLOBAL__sub_I_igh_sd+0xd0>)
SdFile next_file;
   d567c:	4a09      	ldr	r2, [pc, #36]	; (d56a4 <_GLOBAL__sub_I_igh_sd+0xb8>)
   d567e:	7204      	strb	r4, [r0, #8]
   d5680:	7244      	strb	r4, [r0, #9]
   d5682:	6044      	str	r4, [r0, #4]
   d5684:	6005      	str	r5, [r0, #0]
   d5686:	490c      	ldr	r1, [pc, #48]	; (d56b8 <_GLOBAL__sub_I_igh_sd+0xcc>)
    {
        return 0;
    }

    return 1;
   d5688:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#include "igh_sd_log.h"

SdFat igh_sd;
File igh_file;
SdFile sd_root;
SdFile next_file;
   d568c:	f004 bd64 	b.w	da158 <__aeabi_atexit>
   d5690:	2003dbf4 	.word	0x2003dbf4
   d5694:	2003dbbc 	.word	0x2003dbbc
   d5698:	000dafb8 	.word	0x000dafb8
   d569c:	2003dbc0 	.word	0x2003dbc0
   d56a0:	2003e0a4 	.word	0x2003e0a4
   d56a4:	2003daf0 	.word	0x2003daf0
   d56a8:	000dafc4 	.word	0x000dafc4
   d56ac:	000d5283 	.word	0x000d5283
   d56b0:	2003e078 	.word	0x2003e078
   d56b4:	000dafec 	.word	0x000dafec
   d56b8:	000d5281 	.word	0x000d5281
   d56bc:	2003dbc8 	.word	0x2003dbc8

000d56c0 <_ZN14CellularSignalD1Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d56c0:	4770      	bx	lr

000d56c2 <_ZN14CellularSignalD0Ev>:
   d56c2:	b510      	push	{r4, lr}
   d56c4:	2128      	movs	r1, #40	; 0x28
   d56c6:	4604      	mov	r4, r0
   d56c8:	f004 fd54 	bl	da174 <_ZdlPvj>
   d56cc:	4620      	mov	r0, r4
   d56ce:	bd10      	pop	{r4, pc}

000d56d0 <_Z19igh_boron_sync_timev>:
/* Local function prototypes */
uint8_t get_int_from_str( uint8_t num );

/* Functions */
void igh_boron_sync_time(void)
{
   d56d0:	b510      	push	{r4, lr}
   d56d2:	f002 fdc3 	bl	d825c <HAL_Timer_Get_Milli_Seconds>
    if((millis() - lastSync > ONE_DAY_MILLIS))
   d56d6:	4b08      	ldr	r3, [pc, #32]	; (d56f8 <_Z19igh_boron_sync_timev+0x28>)
   d56d8:	681a      	ldr	r2, [r3, #0]
   d56da:	1a80      	subs	r0, r0, r2
   d56dc:	4a07      	ldr	r2, [pc, #28]	; (d56fc <_Z19igh_boron_sync_timev+0x2c>)
   d56de:	4290      	cmp	r0, r2
   d56e0:	461c      	mov	r4, r3
   d56e2:	d908      	bls.n	d56f6 <_Z19igh_boron_sync_timev+0x26>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d56e4:	f003 f806 	bl	d86f4 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d56e8:	b110      	cbz	r0, d56f0 <_Z19igh_boron_sync_timev+0x20>
            return false;
        }
        return spark_sync_time(NULL);
   d56ea:	2000      	movs	r0, #0
   d56ec:	f003 f812 	bl	d8714 <spark_sync_time>
   d56f0:	f002 fdb4 	bl	d825c <HAL_Timer_Get_Milli_Seconds>
    {
        Particle.syncTime();
        lastSync = millis(); 
   d56f4:	6020      	str	r0, [r4, #0]
   d56f6:	bd10      	pop	{r4, pc}
   d56f8:	2003e100 	.word	0x2003e100
   d56fc:	05265c00 	.word	0x05265c00

000d5700 <_Z19igh_boron_unix_timev>:
    }
}

uint32_t igh_boron_unix_time(void)
{
    return (uint32_t)Time.now();
   d5700:	f003 bb98 	b.w	d8e34 <_ZN9TimeClass3nowEv>

000d5704 <_Z13igh_boron_SoCv>:
}

float igh_boron_SoC(void)
{
    return fuel.getSoC();
   d5704:	4801      	ldr	r0, [pc, #4]	; (d570c <_Z13igh_boron_SoCv+0x8>)
   d5706:	f003 bca5 	b.w	d9054 <_ZN9FuelGauge6getSoCEv>
   d570a:	bf00      	nop
   d570c:	2003e104 	.word	0x2003e104

000d5710 <_Z16get_int_from_strh>:
        k++; j++;
    }
}

uint8_t get_int_from_str( uint8_t num )
{
   d5710:	b510      	push	{r4, lr}
    unsigned long location = (unsigned long)strchr(hex_digits_LC, num);
   d5712:	4c04      	ldr	r4, [pc, #16]	; (d5724 <_Z16get_int_from_strh+0x14>)
   d5714:	4601      	mov	r1, r0
   d5716:	4620      	mov	r0, r4
   d5718:	f005 fafa 	bl	dad10 <strchr>
    unsigned long origin = (unsigned long)hex_digits_LC;
    return uint8_t(location - origin);
   d571c:	1b00      	subs	r0, r0, r4
}
   d571e:	b2c0      	uxtb	r0, r0
   d5720:	bd10      	pop	{r4, pc}
   d5722:	bf00      	nop
   d5724:	2003da74 	.word	0x2003da74

000d5728 <_Z15igh_boron_setupv>:
{
    return Particle.connected();;
}

void igh_boron_setup(void)
{
   d5728:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d572c:	f002 fd96 	bl	d825c <HAL_Timer_Get_Milli_Seconds>
    lastSync = millis();
   d5730:	4b14      	ldr	r3, [pc, #80]	; (d5784 <_Z15igh_boron_setupv+0x5c>)
   d5732:	6018      	str	r0, [r3, #0]
   d5734:	4668      	mov	r0, sp
   d5736:	f002 ffe5 	bl	d8704 <spark_deviceID>
    // get serial number 
    memcpy( deviceID_string, System.deviceID(), sizeof(deviceID_string) );
   d573a:	9b00      	ldr	r3, [sp, #0]
   d573c:	4a12      	ldr	r2, [pc, #72]	; (d5788 <_Z15igh_boron_setupv+0x60>)
   d573e:	f103 0118 	add.w	r1, r3, #24
   d5742:	4617      	mov	r7, r2
   d5744:	f853 0b04 	ldr.w	r0, [r3], #4
   d5748:	f842 0b04 	str.w	r0, [r2], #4
   d574c:	428b      	cmp	r3, r1
   d574e:	d1f9      	bne.n	d5744 <_Z15igh_boron_setupv+0x1c>
   d5750:	4668      	mov	r0, sp
   d5752:	f003 f9cd 	bl	d8af0 <_ZN6StringD1Ev>
   d5756:	4e0d      	ldr	r6, [pc, #52]	; (d578c <_Z15igh_boron_setupv+0x64>)
   d5758:	2500      	movs	r5, #0

    uint8_t k = 0; uint8_t j = 0;
    while( k < sizeof(deviceID_string) )
    {
        boron_serial_number[j] = get_int_from_str(deviceID_string[k]) << 4;
   d575a:	5d78      	ldrb	r0, [r7, r5]
   d575c:	f7ff ffd8 	bl	d5710 <_Z16get_int_from_strh>
   d5760:	eb07 0805 	add.w	r8, r7, r5
   d5764:	0100      	lsls	r0, r0, #4
   d5766:	b2c4      	uxtb	r4, r0
        k++;
        boron_serial_number[j] |= get_int_from_str(deviceID_string[k]);
   d5768:	f898 0001 	ldrb.w	r0, [r8, #1]
    memcpy( deviceID_string, System.deviceID(), sizeof(deviceID_string) );

    uint8_t k = 0; uint8_t j = 0;
    while( k < sizeof(deviceID_string) )
    {
        boron_serial_number[j] = get_int_from_str(deviceID_string[k]) << 4;
   d576c:	f806 4f01 	strb.w	r4, [r6, #1]!
        k++;
        boron_serial_number[j] |= get_int_from_str(deviceID_string[k]);
   d5770:	f7ff ffce 	bl	d5710 <_Z16get_int_from_strh>
   d5774:	3502      	adds	r5, #2
   d5776:	4320      	orrs	r0, r4
    lastSync = millis();
    // get serial number 
    memcpy( deviceID_string, System.deviceID(), sizeof(deviceID_string) );

    uint8_t k = 0; uint8_t j = 0;
    while( k < sizeof(deviceID_string) )
   d5778:	2d18      	cmp	r5, #24
    {
        boron_serial_number[j] = get_int_from_str(deviceID_string[k]) << 4;
        k++;
        boron_serial_number[j] |= get_int_from_str(deviceID_string[k]);
   d577a:	7030      	strb	r0, [r6, #0]
    lastSync = millis();
    // get serial number 
    memcpy( deviceID_string, System.deviceID(), sizeof(deviceID_string) );

    uint8_t k = 0; uint8_t j = 0;
    while( k < sizeof(deviceID_string) )
   d577c:	d1ed      	bne.n	d575a <_Z15igh_boron_setupv+0x32>
        boron_serial_number[j] = get_int_from_str(deviceID_string[k]) << 4;
        k++;
        boron_serial_number[j] |= get_int_from_str(deviceID_string[k]);
        k++; j++;
    }
}
   d577e:	b004      	add	sp, #16
   d5780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5784:	2003e100 	.word	0x2003e100
   d5788:	2003e690 	.word	0x2003e690
   d578c:	2003e6a7 	.word	0x2003e6a7

000d5790 <_Z17igh_boron_servicev>:
    return uint8_t(location - origin);
}

void igh_boron_service(void)
{
    igh_boron_sync_time();
   d5790:	f7ff bf9e 	b.w	d56d0 <_Z19igh_boron_sync_timev>

000d5794 <_GLOBAL__sub_I_lastSync>:
    Serial.print("network status:   "); Serial.println(igh_boron_connecetd_to_network());
    Serial.print("signal strength:  "); Serial.println(igh_boron_ss());
    Serial.print("signal quality:   "); Serial.println(igh_boron_sq());
    Serial.print("Battery Voltage:  "); Serial.println(igh_boron_voltage());
    Serial.print("Battery SOC:      "); Serial.println(igh_boron_SoC());
   d5794:	b570      	push	{r4, r5, r6, lr}
   d5796:	f002 fc99 	bl	d80cc <HAL_Pin_Map>
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d579a:	4c10      	ldr	r4, [pc, #64]	; (d57dc <_GLOBAL__sub_I_lastSync+0x48>)
   d579c:	4b10      	ldr	r3, [pc, #64]	; (d57e0 <_GLOBAL__sub_I_lastSync+0x4c>)
   d579e:	6023      	str	r3, [r4, #0]
   d57a0:	2500      	movs	r5, #0
   d57a2:	3328      	adds	r3, #40	; 0x28
   d57a4:	4629      	mov	r1, r5
#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)

unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
   d57a6:	4e0f      	ldr	r6, [pc, #60]	; (d57e4 <_GLOBAL__sub_I_lastSync+0x50>)
   d57a8:	6063      	str	r3, [r4, #4]
   d57aa:	2218      	movs	r2, #24
   d57ac:	f104 0010 	add.w	r0, r4, #16
   d57b0:	60a5      	str	r5, [r4, #8]
   d57b2:	60e5      	str	r5, [r4, #12]
   d57b4:	f005 fa7c 	bl	dacb0 <memset>
   d57b8:	4620      	mov	r0, r4
float signal_quality, signal_strength;
FuelGauge fuel;
   d57ba:	4c0b      	ldr	r4, [pc, #44]	; (d57e8 <_GLOBAL__sub_I_lastSync+0x54>)
#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)

unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
   d57bc:	490b      	ldr	r1, [pc, #44]	; (d57ec <_GLOBAL__sub_I_lastSync+0x58>)
   d57be:	4632      	mov	r2, r6
   d57c0:	f004 fcca 	bl	da158 <__aeabi_atexit>
float signal_quality, signal_strength;
FuelGauge fuel;
   d57c4:	4629      	mov	r1, r5
   d57c6:	4620      	mov	r0, r4
   d57c8:	f003 fc04 	bl	d8fd4 <_ZN9FuelGaugeC1Eb>
   d57cc:	4632      	mov	r2, r6
   d57ce:	4620      	mov	r0, r4
   d57d0:	4907      	ldr	r1, [pc, #28]	; (d57f0 <_GLOBAL__sub_I_lastSync+0x5c>)
    Serial.print("network status:   "); Serial.println(igh_boron_connecetd_to_network());
    Serial.print("signal strength:  "); Serial.println(igh_boron_ss());
    Serial.print("signal quality:   "); Serial.println(igh_boron_sq());
    Serial.print("Battery Voltage:  "); Serial.println(igh_boron_voltage());
    Serial.print("Battery SOC:      "); Serial.println(igh_boron_SoC());
   d57d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
float signal_quality, signal_strength;
FuelGauge fuel;
   d57d6:	f004 bcbf 	b.w	da158 <__aeabi_atexit>
   d57da:	bf00      	nop
   d57dc:	2003e0d8 	.word	0x2003e0d8
   d57e0:	000db248 	.word	0x000db248
   d57e4:	2003daf0 	.word	0x2003daf0
   d57e8:	2003e104 	.word	0x2003e104
   d57ec:	000d56c1 	.word	0x000d56c1
   d57f0:	000d8ff3 	.word	0x000d8ff3

000d57f4 <_Z21igh_rfm69_set_bitratehh>:
    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
} 

void igh_rfm69_set_bitrate(uint8_t msb, uint8_t lsb)
{
   d57f4:	b538      	push	{r3, r4, r5, lr}
    igh_radio.writeReg(REG_BITRATEMSB, msb); 
   d57f6:	4c07      	ldr	r4, [pc, #28]	; (d5814 <_Z21igh_rfm69_set_bitratehh+0x20>)
    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
} 

void igh_rfm69_set_bitrate(uint8_t msb, uint8_t lsb)
{
   d57f8:	460d      	mov	r5, r1
    igh_radio.writeReg(REG_BITRATEMSB, msb); 
   d57fa:	4602      	mov	r2, r0
   d57fc:	2103      	movs	r1, #3
   d57fe:	4620      	mov	r0, r4
   d5800:	f002 f96a 	bl	d7ad8 <_ZN5RFM698writeRegEhh>
    igh_radio.writeReg(REG_BITRATELSB, lsb);
   d5804:	462a      	mov	r2, r5
   d5806:	4620      	mov	r0, r4
   d5808:	2104      	movs	r1, #4
}
   d580a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
} 

void igh_rfm69_set_bitrate(uint8_t msb, uint8_t lsb)
{
    igh_radio.writeReg(REG_BITRATEMSB, msb); 
    igh_radio.writeReg(REG_BITRATELSB, lsb);
   d580e:	f002 b963 	b.w	d7ad8 <_ZN5RFM698writeRegEhh>
   d5812:	bf00      	nop
   d5814:	2003e10c 	.word	0x2003e10c

000d5818 <_Z25igh_rfm69_set_power_levelh>:
}

void igh_rfm69_set_power_level(uint8_t pwrlvl)
{
    igh_radio.setPowerLevel(pwrlvl);
   d5818:	4601      	mov	r1, r0
   d581a:	4801      	ldr	r0, [pc, #4]	; (d5820 <_Z25igh_rfm69_set_power_levelh+0x8>)
   d581c:	f002 b96e 	b.w	d7afc <_ZN5RFM6913setPowerLevelEh>
   d5820:	2003e10c 	.word	0x2003e10c

000d5824 <_Z15igh_rfm69_resetv>:
}

void igh_rfm69_reset(void)
{
   d5824:	b508      	push	{r3, lr}
    digitalWrite(RFM69_RST, HIGH);
   d5826:	2101      	movs	r1, #1
   d5828:	2006      	movs	r0, #6
   d582a:	f004 fbd4 	bl	d9fd6 <digitalWrite>
    delay(100);
   d582e:	2064      	movs	r0, #100	; 0x64
   d5830:	f003 fb12 	bl	d8e58 <delay>
    digitalWrite(RFM69_RST, LOW);
   d5834:	2006      	movs	r0, #6
   d5836:	2100      	movs	r1, #0
   d5838:	f004 fbcd 	bl	d9fd6 <digitalWrite>
    delay(100);
   d583c:	2064      	movs	r0, #100	; 0x64
}
   d583e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void igh_rfm69_reset(void)
{
    digitalWrite(RFM69_RST, HIGH);
    delay(100);
    digitalWrite(RFM69_RST, LOW);
    delay(100);
   d5842:	f003 bb09 	b.w	d8e58 <delay>
	...

000d5848 <_Z15igh_rfm69_setupv>:
uint8_t rfm69_powerlevel  = 10; // default power level, about 100M line of site

RFM69 igh_radio = RFM69(RFM69_CS, RFM69_IRQ, IS_RFM69HCW, RFM69_IRQN);

void igh_rfm69_setup(void)
{
   d5848:	b538      	push	{r3, r4, r5, lr}
    // first reset the module
    pinMode(RFM69_RST, OUTPUT);

    igh_rfm69_reset();
    
    if( false == igh_radio.initialize( FREQUENCY, RFM69_NODE_ID, RFM69_NETWORK_ID) )
   d584a:	4c21      	ldr	r4, [pc, #132]	; (d58d0 <_Z15igh_rfm69_setupv+0x88>)
RFM69 igh_radio = RFM69(RFM69_CS, RFM69_IRQ, IS_RFM69HCW, RFM69_IRQN);

void igh_rfm69_setup(void)
{
    // first reset the module
    pinMode(RFM69_RST, OUTPUT);
   d584c:	2101      	movs	r1, #1
   d584e:	2006      	movs	r0, #6
   d5850:	f004 fbb0 	bl	d9fb4 <pinMode>

    igh_rfm69_reset();
   d5854:	f7ff ffe6 	bl	d5824 <_Z15igh_rfm69_resetv>
    
    if( false == igh_radio.initialize( FREQUENCY, RFM69_NODE_ID, RFM69_NETWORK_ID) )
   d5858:	7da3      	ldrb	r3, [r4, #22]
   d585a:	7de2      	ldrb	r2, [r4, #23]
   d585c:	481d      	ldr	r0, [pc, #116]	; (d58d4 <_Z15igh_rfm69_setupv+0x8c>)
   d585e:	215b      	movs	r1, #91	; 0x5b
   d5860:	f002 fb10 	bl	d7e84 <_ZN5RFM6910initializeEhhh>
   d5864:	b920      	cbnz	r0, d5870 <_Z15igh_rfm69_setupv+0x28>
    Serial.println("RFM69 INIT ERROR");
   d5866:	f003 fd97 	bl	d9398 <_Z16_fetch_usbserialv>
   d586a:	491b      	ldr	r1, [pc, #108]	; (d58d8 <_Z15igh_rfm69_setupv+0x90>)
   d586c:	f003 fa47 	bl	d8cfe <_ZN5Print7printlnEPKc>

    Serial.print( "NEW NODE ID: " ); Serial.println( RFM69_NODE_ID);
   d5870:	f003 fd92 	bl	d9398 <_Z16_fetch_usbserialv>
   d5874:	4919      	ldr	r1, [pc, #100]	; (d58dc <_Z15igh_rfm69_setupv+0x94>)
   d5876:	f003 fa2f 	bl	d8cd8 <_ZN5Print5printEPKc>
   d587a:	f003 fd8d 	bl	d9398 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d587e:	220a      	movs	r2, #10
   d5880:	7de1      	ldrb	r1, [r4, #23]
   d5882:	4605      	mov	r5, r0
   d5884:	f003 fa45 	bl	d8d12 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d5888:	4628      	mov	r0, r5
   d588a:	f003 fa2c 	bl	d8ce6 <_ZN5Print7printlnEv>
    Serial.print( "NEW NETWORK ID: " ); Serial.println( RFM69_NETWORK_ID);
   d588e:	f003 fd83 	bl	d9398 <_Z16_fetch_usbserialv>
   d5892:	4913      	ldr	r1, [pc, #76]	; (d58e0 <_Z15igh_rfm69_setupv+0x98>)
   d5894:	f003 fa20 	bl	d8cd8 <_ZN5Print5printEPKc>
   d5898:	f003 fd7e 	bl	d9398 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d589c:	220a      	movs	r2, #10
   d589e:	7da1      	ldrb	r1, [r4, #22]
   d58a0:	4605      	mov	r5, r0
   d58a2:	f003 fa36 	bl	d8d12 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d58a6:	4628      	mov	r0, r5
   d58a8:	f003 fa1d 	bl	d8ce6 <_ZN5Print7printlnEv>

    igh_radio.setHighPower(); // This should only be called for RFM69HCW & HW
   d58ac:	2101      	movs	r1, #1
   d58ae:	4809      	ldr	r0, [pc, #36]	; (d58d4 <_Z15igh_rfm69_setupv+0x8c>)
   d58b0:	f002 fa0e 	bl	d7cd0 <_ZN5RFM6912setHighPowerEb>

    igh_rfm69_set_bitrate(RF_BITRATEMSB_9600, RF_BITRATELSB_9600); // set to 9.6Kbps
   d58b4:	2105      	movs	r1, #5
   d58b6:	200d      	movs	r0, #13
   d58b8:	f7ff ff9c 	bl	d57f4 <_Z21igh_rfm69_set_bitratehh>

    igh_rfm69_set_power_level(rfm69_powerlevel);
   d58bc:	4b09      	ldr	r3, [pc, #36]	; (d58e4 <_Z15igh_rfm69_setupv+0x9c>)
   d58be:	7818      	ldrb	r0, [r3, #0]
   d58c0:	f7ff ffaa 	bl	d5818 <_Z25igh_rfm69_set_power_levelh>

    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
   d58c4:	4908      	ldr	r1, [pc, #32]	; (d58e8 <_Z15igh_rfm69_setupv+0xa0>)
   d58c6:	4803      	ldr	r0, [pc, #12]	; (d58d4 <_Z15igh_rfm69_setupv+0x8c>)
} 
   d58c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    igh_rfm69_set_bitrate(RF_BITRATEMSB_9600, RF_BITRATELSB_9600); // set to 9.6Kbps

    igh_rfm69_set_power_level(rfm69_powerlevel);

    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
   d58cc:	f002 baae 	b.w	d7e2c <_ZN5RFM697encryptEPKc>
   d58d0:	2003e61c 	.word	0x2003e61c
   d58d4:	2003e10c 	.word	0x2003e10c
   d58d8:	000db08c 	.word	0x000db08c
   d58dc:	000db09d 	.word	0x000db09d
   d58e0:	000db0ab 	.word	0x000db0ab
   d58e4:	2003da85 	.word	0x2003da85
   d58e8:	000db0bc 	.word	0x000db0bc

000d58ec <_Z27igh_rfm69_receive_raw_bytesPhh>:
    }
    
}

uint8_t igh_rfm69_receive_raw_bytes( uint8_t *buffer, uint8_t len )
{
   d58ec:	b570      	push	{r4, r5, r6, lr}
   d58ee:	4605      	mov	r5, r0
    uint8_t rx_len = 0;
    if ( igh_radio.receiveDone() )
   d58f0:	4809      	ldr	r0, [pc, #36]	; (d5918 <_Z27igh_rfm69_receive_raw_bytesPhh+0x2c>)
    }
    
}

uint8_t igh_rfm69_receive_raw_bytes( uint8_t *buffer, uint8_t len )
{
   d58f2:	460e      	mov	r6, r1
    uint8_t rx_len = 0;
    if ( igh_radio.receiveDone() )
   d58f4:	f002 f9cc 	bl	d7c90 <_ZN5RFM6911receiveDoneEv>
   d58f8:	b160      	cbz	r0, d5914 <_Z27igh_rfm69_receive_raw_bytesPhh+0x28>
    {
        if( igh_radio.DATALEN <= len )
   d58fa:	4c08      	ldr	r4, [pc, #32]	; (d591c <_Z27igh_rfm69_receive_raw_bytesPhh+0x30>)
   d58fc:	7823      	ldrb	r3, [r4, #0]
   d58fe:	42b3      	cmp	r3, r6
   d5900:	d807      	bhi.n	d5912 <_Z27igh_rfm69_receive_raw_bytesPhh+0x26>
        {
            memcpy( buffer, (uint8_t *)igh_radio.DATA, igh_radio.DATALEN);
   d5902:	7822      	ldrb	r2, [r4, #0]
   d5904:	4906      	ldr	r1, [pc, #24]	; (d5920 <_Z27igh_rfm69_receive_raw_bytesPhh+0x34>)
   d5906:	4628      	mov	r0, r5
   d5908:	f005 f9c7 	bl	dac9a <memcpy>
            rx_len = igh_radio.DATALEN;
   d590c:	7820      	ldrb	r0, [r4, #0]
   d590e:	b2c0      	uxtb	r0, r0
   d5910:	bd70      	pop	{r4, r5, r6, pc}
    
}

uint8_t igh_rfm69_receive_raw_bytes( uint8_t *buffer, uint8_t len )
{
    uint8_t rx_len = 0;
   d5912:	2000      	movs	r0, #0
            memcpy( buffer, (uint8_t *)igh_radio.DATA, igh_radio.DATALEN);
            rx_len = igh_radio.DATALEN;
        }
    }
    return rx_len;
}
   d5914:	bd70      	pop	{r4, r5, r6, pc}
   d5916:	bf00      	nop
   d5918:	2003e10c 	.word	0x2003e10c
   d591c:	2003e183 	.word	0x2003e183
   d5920:	2003e146 	.word	0x2003e146

000d5924 <_Z17igh_rfm69_servicev>:

void igh_rfm69_service( void )
{
   d5924:	b510      	push	{r4, lr}
    // if new settings have been sent, re initialize the module
    if( true == initialize_rfm69 )
   d5926:	4c04      	ldr	r4, [pc, #16]	; (d5938 <_Z17igh_rfm69_servicev+0x14>)
   d5928:	7823      	ldrb	r3, [r4, #0]
   d592a:	2b01      	cmp	r3, #1
   d592c:	d103      	bne.n	d5936 <_Z17igh_rfm69_servicev+0x12>
    {
        igh_rfm69_setup();
   d592e:	f7ff ff8b 	bl	d5848 <_Z15igh_rfm69_setupv>
        initialize_rfm69 = false;
   d5932:	2300      	movs	r3, #0
   d5934:	7023      	strb	r3, [r4, #0]
   d5936:	bd10      	pop	{r4, pc}
   d5938:	2003daf5 	.word	0x2003daf5

000d593c <_GLOBAL__sub_I_NETWORKID>:
    }
   d593c:	b508      	push	{r3, lr}
   d593e:	f002 fbc5 	bl	d80cc <HAL_Pin_Map>
    static volatile byte ACK_REQUESTED;
    static volatile byte ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
    static volatile int RSSI; //most accurate RSSI during reception (closest to the reception)
    static volatile byte _mode; //should be protected?

    RFM69(byte slaveSelectPin=RF69_SPI_CS, byte interruptPin=RF69_IRQ_PIN, bool isRFM69HW=false, byte interruptNum=RF69_IRQ_NUM) {
   d5942:	4b08      	ldr	r3, [pc, #32]	; (d5964 <_GLOBAL__sub_I_NETWORKID+0x28>)
   d5944:	4a08      	ldr	r2, [pc, #32]	; (d5968 <_GLOBAL__sub_I_NETWORKID+0x2c>)
   d5946:	601a      	str	r2, [r3, #0]
      _slaveSelectPin = slaveSelectPin;
   d5948:	2211      	movs	r2, #17
      _interruptPin = interruptPin;
      _interruptNum = interruptNum;
      _mode = RF69_MODE_STANDBY;
   d594a:	4908      	ldr	r1, [pc, #32]	; (d596c <_GLOBAL__sub_I_NETWORKID+0x30>)
    static volatile byte ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
    static volatile int RSSI; //most accurate RSSI during reception (closest to the reception)
    static volatile byte _mode; //should be protected?

    RFM69(byte slaveSelectPin=RF69_SPI_CS, byte interruptPin=RF69_IRQ_PIN, bool isRFM69HW=false, byte interruptNum=RF69_IRQ_NUM) {
      _slaveSelectPin = slaveSelectPin;
   d594c:	711a      	strb	r2, [r3, #4]
      _interruptPin = interruptPin;
   d594e:	2208      	movs	r2, #8
   d5950:	715a      	strb	r2, [r3, #5]
      _interruptNum = interruptNum;
   d5952:	719a      	strb	r2, [r3, #6]
      _mode = RF69_MODE_STANDBY;
   d5954:	2201      	movs	r2, #1
   d5956:	700a      	strb	r2, [r1, #0]
      _promiscuousMode = false;
   d5958:	2100      	movs	r1, #0
   d595a:	7219      	strb	r1, [r3, #8]
      _powerLevel = 31;
   d595c:	211f      	movs	r1, #31
   d595e:	7259      	strb	r1, [r3, #9]
      _isRFM69HW = isRFM69HW;
   d5960:	729a      	strb	r2, [r3, #10]
   d5962:	bd08      	pop	{r3, pc}
   d5964:	2003e10c 	.word	0x2003e10c
   d5968:	000db0f8 	.word	0x000db0f8
   d596c:	2003e184 	.word	0x2003e184

000d5970 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d5970:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d5972:	6984      	ldr	r4, [r0, #24]
   d5974:	4b0a      	ldr	r3, [pc, #40]	; (d59a0 <_ZN9TCPClientD1Ev+0x30>)
   d5976:	6003      	str	r3, [r0, #0]
   d5978:	4605      	mov	r5, r0
   d597a:	b17c      	cbz	r4, d599c <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d597c:	6863      	ldr	r3, [r4, #4]
   d597e:	3b01      	subs	r3, #1
   d5980:	6063      	str	r3, [r4, #4]
   d5982:	b95b      	cbnz	r3, d599c <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d5984:	6823      	ldr	r3, [r4, #0]
   d5986:	4620      	mov	r0, r4
   d5988:	689b      	ldr	r3, [r3, #8]
   d598a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d598c:	68a3      	ldr	r3, [r4, #8]
   d598e:	3b01      	subs	r3, #1
   d5990:	60a3      	str	r3, [r4, #8]
   d5992:	b91b      	cbnz	r3, d599c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d5994:	6823      	ldr	r3, [r4, #0]
   d5996:	4620      	mov	r0, r4
   d5998:	68db      	ldr	r3, [r3, #12]
   d599a:	4798      	blx	r3
   d599c:	4628      	mov	r0, r5
   d599e:	bd38      	pop	{r3, r4, r5, pc}
   d59a0:	000db39c 	.word	0x000db39c

000d59a4 <_ZN9TCPClientD0Ev>:
   d59a4:	b510      	push	{r4, lr}
   d59a6:	4604      	mov	r4, r0
   d59a8:	f7ff ffe2 	bl	d5970 <_ZN9TCPClientD1Ev>
   d59ac:	4620      	mov	r0, r4
   d59ae:	211c      	movs	r1, #28
   d59b0:	f004 fbe0 	bl	da174 <_ZdlPvj>
   d59b4:	4620      	mov	r0, r4
   d59b6:	bd10      	pop	{r4, pc}

000d59b8 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d59b8:	b538      	push	{r3, r4, r5, lr}
   d59ba:	461d      	mov	r5, r3
    this->callback = callback;
   d59bc:	9b05      	ldr	r3, [sp, #20]
   d59be:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
   d59c0:	2300      	movs	r3, #0

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d59c2:	4604      	mov	r4, r0
    this->callback = callback;
    this->qoscallback = NULL;
   d59c4:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
   d59c6:	b102      	cbz	r2, d59ca <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
   d59c8:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
   d59ca:	b119      	cbz	r1, d59d4 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
   d59cc:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d59d0:	f003 f91c 	bl	d8c0c <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   d59d4:	9b04      	ldr	r3, [sp, #16]
   d59d6:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d59d8:	9b06      	ldr	r3, [sp, #24]
    if (buffer != NULL)
   d59da:	69e0      	ldr	r0, [r4, #28]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
   d59dc:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d59e0:	2bff      	cmp	r3, #255	; 0xff
   d59e2:	bfb8      	it	lt
   d59e4:	23ff      	movlt	r3, #255	; 0xff
   d59e6:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   d59ea:	b108      	cbz	r0, d59f0 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
   d59ec:	f7fe fb59 	bl	d40a2 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   d59f0:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   d59f4:	f7fe fb51 	bl	d409a <_Znaj>
   d59f8:	61e0      	str	r0, [r4, #28]
   d59fa:	bd38      	pop	{r3, r4, r5, pc}

000d59fc <_ZN4MQTTC1EPctPFvS0_PhjE>:
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
   d59fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d5a00:	4604      	mov	r4, r0
   d5a02:	2500      	movs	r5, #0
   d5a04:	4617      	mov	r7, r2
   d5a06:	4698      	mov	r8, r3
   d5a08:	460e      	mov	r6, r1
   d5a0a:	f004 f9db 	bl	d9dc4 <_ZN9TCPClientC1Ev>
   d5a0e:	61e5      	str	r5, [r4, #28]
   d5a10:	490a      	ldr	r1, [pc, #40]	; (d5a3c <_ZN4MQTTC1EPctPFvS0_PhjE+0x40>)
   d5a12:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d5a16:	f003 f8b2 	bl	d8b7e <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
   d5a1a:	23ff      	movs	r3, #255	; 0xff
   d5a1c:	9302      	str	r3, [sp, #8]
   d5a1e:	230f      	movs	r3, #15
   d5a20:	9300      	str	r3, [sp, #0]
   d5a22:	4620      	mov	r0, r4
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
   d5a24:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
   d5a26:	f8cd 8004 	str.w	r8, [sp, #4]
   d5a2a:	463b      	mov	r3, r7
   d5a2c:	462a      	mov	r2, r5
   d5a2e:	4631      	mov	r1, r6
   d5a30:	f7ff ffc2 	bl	d59b8 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
   d5a34:	4620      	mov	r0, r4
   d5a36:	b004      	add	sp, #16
   d5a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5a3c:	000db1dc 	.word	0x000db1dc

000d5a40 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   d5a40:	b510      	push	{r4, lr}
   d5a42:	4604      	mov	r4, r0
    while(!_client.available()) {}
   d5a44:	4620      	mov	r0, r4
   d5a46:	f004 f921 	bl	d9c8c <_ZN9TCPClient9availableEv>
   d5a4a:	2800      	cmp	r0, #0
   d5a4c:	d0fa      	beq.n	d5a44 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   d5a4e:	4620      	mov	r0, r4
   d5a50:	f003 ffc5 	bl	d99de <_ZN9TCPClient4readEv>
}
   d5a54:	b2c0      	uxtb	r0, r0
   d5a56:	bd10      	pop	{r4, pc}

000d5a58 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d5a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5a5c:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
   d5a5e:	69c4      	ldr	r4, [r0, #28]
uint8_t MQTT::readByte() {
    while(!_client.available()) {}
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d5a60:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   d5a62:	f7ff ffed 	bl	d5a40 <_ZN4MQTT8readByteEv>
   d5a66:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d5a68:	69eb      	ldr	r3, [r5, #28]
   d5a6a:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   d5a6e:	f04f 0901 	mov.w	r9, #1
   d5a72:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   d5a76:	2700      	movs	r7, #0
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
   d5a78:	464e      	mov	r6, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   d5a7a:	4628      	mov	r0, r5
   d5a7c:	f7ff ffe0 	bl	d5a40 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   d5a80:	69eb      	ldr	r3, [r5, #28]
   d5a82:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   d5a84:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   d5a88:	fb13 f309 	smulbb	r3, r3, r9
   d5a8c:	441f      	add	r7, r3
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d5a8e:	1c74      	adds	r4, r6, #1
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
   d5a90:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d5a92:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   d5a94:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   d5a96:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   d5a9a:	d501      	bpl.n	d5aa0 <_ZN4MQTT10readPacketEPh+0x48>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d5a9c:	4626      	mov	r6, r4
   d5a9e:	e7ec      	b.n	d5a7a <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d5aa0:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   d5aa2:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d5aa6:	f888 3000 	strb.w	r3, [r8]

    if (isPublish) {
   d5aaa:	d113      	bne.n	d5ad4 <_ZN4MQTT10readPacketEPh+0x7c>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   d5aac:	4628      	mov	r0, r5
   d5aae:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d5ab2:	f7ff ffc5 	bl	d5a40 <_ZN4MQTT8readByteEv>
   d5ab6:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
   d5aba:	4628      	mov	r0, r5
   d5abc:	1cf4      	adds	r4, r6, #3
   d5abe:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d5ac2:	3602      	adds	r6, #2
   d5ac4:	f7ff ffbc 	bl	d5a40 <_ZN4MQTT8readByteEv>
   d5ac8:	b2b6      	uxth	r6, r6
   d5aca:	b2a4      	uxth	r4, r4
   d5acc:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   d5ad0:	2302      	movs	r3, #2
   d5ad2:	e000      	b.n	d5ad6 <_ZN4MQTT10readPacketEPh+0x7e>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
   d5ad4:	2300      	movs	r3, #0
   d5ad6:	1b1b      	subs	r3, r3, r4
   d5ad8:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d5ada:	19a3      	adds	r3, r4, r6
   d5adc:	b29b      	uxth	r3, r3
   d5ade:	429f      	cmp	r7, r3
   d5ae0:	d90b      	bls.n	d5afa <_ZN4MQTT10readPacketEPh+0xa2>
        digit = readByte();
   d5ae2:	4628      	mov	r0, r5
   d5ae4:	f7ff ffac 	bl	d5a40 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   d5ae8:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   d5aec:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   d5aee:	bf84      	itt	hi
   d5af0:	69eb      	ldrhi	r3, [r5, #28]
   d5af2:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   d5af4:	3401      	adds	r4, #1
   d5af6:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d5af8:	e7ef      	b.n	d5ada <_ZN4MQTT10readPacketEPh+0x82>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
   d5afa:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   d5afe:	42a0      	cmp	r0, r4
   d5b00:	bf2c      	ite	cs
   d5b02:	4620      	movcs	r0, r4
   d5b04:	2000      	movcc	r0, #0
   d5b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5b0a <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d5b0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5b0c:	4607      	mov	r7, r0
   d5b0e:	468e      	mov	lr, r1
   d5b10:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   d5b12:	461d      	mov	r5, r3
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
   d5b14:	2400      	movs	r4, #0
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d5b16:	a902      	add	r1, sp, #8
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
   d5b18:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d5b1c:	4421      	add	r1, r4
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
   d5b1e:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
   d5b20:	bf18      	it	ne
   d5b22:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
   d5b26:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d5b28:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
   d5b2c:	b2e4      	uxtb	r4, r4
    } while(len > 0);
   d5b2e:	2d00      	cmp	r5, #0
   d5b30:	d1f1      	bne.n	d5b16 <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
   d5b32:	f1c4 0304 	rsb	r3, r4, #4
   d5b36:	18d1      	adds	r1, r2, r3
   d5b38:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
   d5b3c:	42a5      	cmp	r5, r4
   d5b3e:	da06      	bge.n	d5b4e <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
   d5b40:	1b2b      	subs	r3, r5, r4
   d5b42:	a801      	add	r0, sp, #4
   d5b44:	4413      	add	r3, r2
   d5b46:	5c28      	ldrb	r0, [r5, r0]
   d5b48:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
   d5b4a:	3501      	adds	r5, #1
   d5b4c:	e7f6      	b.n	d5b3c <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   d5b4e:	1c72      	adds	r2, r6, #1
   d5b50:	4422      	add	r2, r4
   d5b52:	4638      	mov	r0, r7
   d5b54:	f003 fe99 	bl	d988a <_ZN9TCPClient5writeEPKhj>
   d5b58:	4605      	mov	r5, r0
   d5b5a:	f002 fb7f 	bl	d825c <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   d5b5e:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
   d5b60:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   d5b62:	4434      	add	r4, r6
   d5b64:	b2a8      	uxth	r0, r5
}
   d5b66:	1a23      	subs	r3, r4, r0
   d5b68:	4258      	negs	r0, r3
   d5b6a:	4158      	adcs	r0, r3
   d5b6c:	b003      	add	sp, #12
   d5b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5b70 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d5b70:	b510      	push	{r4, lr}
    buffer[0] = MQTTDISCONNECT;
   d5b72:	69c3      	ldr	r3, [r0, #28]
   d5b74:	22e0      	movs	r2, #224	; 0xe0
   d5b76:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   d5b78:	69c3      	ldr	r3, [r0, #28]
   d5b7a:	2200      	movs	r2, #0
   d5b7c:	705a      	strb	r2, [r3, #1]
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d5b7e:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
    buffer[1] = 0;
    _client.write(buffer,2);
   d5b80:	2202      	movs	r2, #2
   d5b82:	69c1      	ldr	r1, [r0, #28]
   d5b84:	f003 fe81 	bl	d988a <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   d5b88:	4620      	mov	r0, r4
   d5b8a:	f004 f867 	bl	d9c5c <_ZN9TCPClient4stopEv>
   d5b8e:	f002 fb65 	bl	d825c <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   d5b92:	6260      	str	r0, [r4, #36]	; 0x24
   d5b94:	62a0      	str	r0, [r4, #40]	; 0x28
   d5b96:	bd10      	pop	{r4, pc}

000d5b98 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d5b98:	3302      	adds	r3, #2
    _client.write(buffer,2);
    _client.stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   d5b9a:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d5b9c:	b29b      	uxth	r3, r3
   d5b9e:	460d      	mov	r5, r1
   d5ba0:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
   d5ba2:	f815 6b01 	ldrb.w	r6, [r5], #1
   d5ba6:	b2a4      	uxth	r4, r4
   d5ba8:	b13e      	cbz	r6, d5bba <_ZN4MQTT11writeStringEPKcPht+0x22>
   d5baa:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
   d5bae:	429f      	cmp	r7, r3
   d5bb0:	d903      	bls.n	d5bba <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
   d5bb2:	1c5c      	adds	r4, r3, #1
   d5bb4:	54d6      	strb	r6, [r2, r3]
   d5bb6:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
   d5bb8:	e7f2      	b.n	d5ba0 <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   d5bba:	1b19      	subs	r1, r3, r4
   d5bbc:	440a      	add	r2, r1
   d5bbe:	1221      	asrs	r1, r4, #8
   d5bc0:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   d5bc4:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
   d5bc8:	4618      	mov	r0, r3
   d5bca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5bcc <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   d5bcc:	b538      	push	{r3, r4, r5, lr}
   d5bce:	4605      	mov	r5, r0
    bool rc = (int)_client.connected();
   d5bd0:	f003 fe71 	bl	d98b6 <_ZN9TCPClient9connectedEv>
   d5bd4:	2800      	cmp	r0, #0
   d5bd6:	bf14      	ite	ne
   d5bd8:	2401      	movne	r4, #1
   d5bda:	2400      	moveq	r4, #0
    if (!rc) _client.stop();
   d5bdc:	d102      	bne.n	d5be4 <_ZN4MQTT11isConnectedEv+0x18>
   d5bde:	4628      	mov	r0, r5
   d5be0:	f004 f83c 	bl	d9c5c <_ZN9TCPClient4stopEv>
    return rc;
}
   d5be4:	4620      	mov	r0, r4
   d5be6:	bd38      	pop	{r3, r4, r5, pc}

000d5be8 <_ZN4MQTT9setBrokerEPct>:
    if (buffer != NULL)
      delete[] buffer;
    buffer = new uint8_t[this->maxpacketsize];
}

void MQTT::setBroker(char* domain, uint16_t port) {
   d5be8:	b570      	push	{r4, r5, r6, lr}
   d5bea:	4604      	mov	r4, r0
   d5bec:	460e      	mov	r6, r1
   d5bee:	4615      	mov	r5, r2
    if(isConnected()) {
   d5bf0:	f7ff ffec 	bl	d5bcc <_ZN4MQTT11isConnectedEv>
   d5bf4:	b110      	cbz	r0, d5bfc <_ZN4MQTT9setBrokerEPct+0x14>
        disconnect();
   d5bf6:	4620      	mov	r0, r4
   d5bf8:	f7ff ffba 	bl	d5b70 <_ZN4MQTT10disconnectEv>
    }
    this->domain = domain;
   d5bfc:	4631      	mov	r1, r6
   d5bfe:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d5c02:	f003 f803 	bl	d8c0c <_ZN6StringaSEPKc>
    this->ip = NULL;
   d5c06:	2300      	movs	r3, #0
   d5c08:	64a3      	str	r3, [r4, #72]	; 0x48
    this->port = port;
   d5c0a:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
   d5c0e:	bd70      	pop	{r4, r5, r6, pc}

000d5c10 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char *user, const char *pass) {
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   d5c10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5c14:	b087      	sub	sp, #28
   d5c16:	4604      	mov	r4, r0
   d5c18:	4689      	mov	r9, r1
   d5c1a:	4617      	mov	r7, r2
   d5c1c:	461e      	mov	r6, r3
   d5c1e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if (!isConnected()) {
   d5c22:	f7ff ffd3 	bl	d5bcc <_ZN4MQTT11isConnectedEv>
   d5c26:	4605      	mov	r5, r0
   d5c28:	2800      	cmp	r0, #0
   d5c2a:	f040 80bd 	bne.w	d5da8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x198>
        int result = 0;
        if (ip == NULL)
   d5c2e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d5c30:	b939      	cbnz	r1, d5c42 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x32>
            result = _client.connect(this->domain.c_str(), this->port);
   d5c32:	4603      	mov	r3, r0
   d5c34:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d5c38:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d5c3a:	4620      	mov	r0, r4
   d5c3c:	f003 ff12 	bl	d9a64 <_ZN9TCPClient7connectEPKctm>
   d5c40:	e009      	b.n	d5c56 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x46>
        else
            result = _client.connect(this->ip, this->port);
   d5c42:	4668      	mov	r0, sp
   d5c44:	f003 fb3c 	bl	d92c0 <_ZN9IPAddressC1EPKh>
   d5c48:	462b      	mov	r3, r5
   d5c4a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d5c4e:	4669      	mov	r1, sp
   d5c50:	4620      	mov	r0, r4
   d5c52:	f003 ff89 	bl	d9b68 <_ZN9TCPClient7connectE9IPAddresstm>

        if (result) {
   d5c56:	2800      	cmp	r0, #0
   d5c58:	f000 80a2 	beq.w	d5da0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
            nextMsgId = 1;
   d5c5c:	2301      	movs	r3, #1
   d5c5e:	8423      	strh	r3, [r4, #32]
            uint16_t length = 5;

            if (version == MQTT_V311) {
   d5c60:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
   d5c64:	2b04      	cmp	r3, #4
   d5c66:	d115      	bne.n	d5c94 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x84>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d5c68:	4b52      	ldr	r3, [pc, #328]	; (d5db4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a4>)
   d5c6a:	6818      	ldr	r0, [r3, #0]
   d5c6c:	889a      	ldrh	r2, [r3, #4]
   d5c6e:	f8ad 2004 	strh.w	r2, [sp, #4]
   d5c72:	9000      	str	r0, [sp, #0]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d5c74:	69e2      	ldr	r2, [r4, #28]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d5c76:	799b      	ldrb	r3, [r3, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d5c78:	9800      	ldr	r0, [sp, #0]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d5c7a:	f88d 3006 	strb.w	r3, [sp, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d5c7e:	1d53      	adds	r3, r2, #5
   d5c80:	f8c2 0005 	str.w	r0, [r2, #5]
   d5c84:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   d5c88:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d5c8c:	719a      	strb	r2, [r3, #6]
   d5c8e:	8099      	strh	r1, [r3, #4]
                length+=sizeof(MQTT_HEADER_V311);
   d5c90:	230c      	movs	r3, #12
   d5c92:	e012      	b.n	d5cba <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d5c94:	4b48      	ldr	r3, [pc, #288]	; (d5db8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>)
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d5c96:	f8d4 c01c 	ldr.w	ip, [r4, #28]
            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d5c9a:	6818      	ldr	r0, [r3, #0]
   d5c9c:	6859      	ldr	r1, [r3, #4]
   d5c9e:	7a1b      	ldrb	r3, [r3, #8]
   d5ca0:	466a      	mov	r2, sp
   d5ca2:	c203      	stmia	r2!, {r0, r1}
   d5ca4:	7013      	strb	r3, [r2, #0]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d5ca6:	466b      	mov	r3, sp
   d5ca8:	cb03      	ldmia	r3!, {r0, r1}
   d5caa:	f8cc 0005 	str.w	r0, [ip, #5]
   d5cae:	f8cc 1009 	str.w	r1, [ip, #9]
   d5cb2:	7813      	ldrb	r3, [r2, #0]
   d5cb4:	f88c 300d 	strb.w	r3, [ip, #13]
                length+=sizeof(MQTT_HEADER_V31);
   d5cb8:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
   d5cba:	f1b8 0f00 	cmp.w	r8, #0
   d5cbe:	d00a      	beq.n	d5cd6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc6>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   d5cc0:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   d5cc4:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   d5cc8:	0152      	lsls	r2, r2, #5
   d5cca:	f042 0206 	orr.w	r2, r2, #6
   d5cce:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
   d5cd2:	b2d2      	uxtb	r2, r2
   d5cd4:	e000      	b.n	d5cd8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc8>
            } else {
                v = 0x02;
   d5cd6:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
   d5cd8:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
   d5cdc:	b909      	cbnz	r1, d5ce2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xd2>
              v = v&0xfd;
   d5cde:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
   d5ce2:	b12f      	cbz	r7, d5cf0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>
                v = v|0x80;

                if(pass != NULL) {
   d5ce4:	b916      	cbnz	r6, d5cec <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
   d5ce6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   d5cea:	e001      	b.n	d5cf0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>

                if(pass != NULL) {
                    v = v|(0x80>>1);
   d5cec:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
   d5cf0:	69e1      	ldr	r1, [r4, #28]
   d5cf2:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
   d5cf4:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d5cf6:	69e1      	ldr	r1, [r4, #28]
   d5cf8:	1c58      	adds	r0, r3, #1
   d5cfa:	1212      	asrs	r2, r2, #8
   d5cfc:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   d5cfe:	1c9a      	adds	r2, r3, #2
   d5d00:	69e1      	ldr	r1, [r4, #28]
   d5d02:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d5d04:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   d5d06:	3303      	adds	r3, #3
   d5d08:	69e2      	ldr	r2, [r4, #28]
   d5d0a:	4649      	mov	r1, r9
   d5d0c:	4620      	mov	r0, r4
   d5d0e:	f7ff ff43 	bl	d5b98 <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
   d5d12:	f1b8 0f00 	cmp.w	r8, #0
   d5d16:	d00b      	beq.n	d5d30 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
                length = writeString(willTopic, buffer, length);
   d5d18:	4603      	mov	r3, r0
   d5d1a:	69e2      	ldr	r2, [r4, #28]
   d5d1c:	4641      	mov	r1, r8
   d5d1e:	4620      	mov	r0, r4
   d5d20:	f7ff ff3a 	bl	d5b98 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   d5d24:	69e2      	ldr	r2, [r4, #28]
   d5d26:	9911      	ldr	r1, [sp, #68]	; 0x44
   d5d28:	4603      	mov	r3, r0
   d5d2a:	4620      	mov	r0, r4
   d5d2c:	f7ff ff34 	bl	d5b98 <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
   d5d30:	b167      	cbz	r7, d5d4c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                length = writeString(user,buffer,length);
   d5d32:	4603      	mov	r3, r0
   d5d34:	69e2      	ldr	r2, [r4, #28]
   d5d36:	4639      	mov	r1, r7
   d5d38:	4620      	mov	r0, r4
   d5d3a:	f7ff ff2d 	bl	d5b98 <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
   d5d3e:	b12e      	cbz	r6, d5d4c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                    length = writeString(pass,buffer,length);
   d5d40:	4603      	mov	r3, r0
   d5d42:	69e2      	ldr	r2, [r4, #28]
   d5d44:	4631      	mov	r1, r6
   d5d46:	4620      	mov	r0, r4
   d5d48:	f7ff ff26 	bl	d5b98 <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
   d5d4c:	1f43      	subs	r3, r0, #5
   d5d4e:	b29b      	uxth	r3, r3
   d5d50:	69e2      	ldr	r2, [r4, #28]
   d5d52:	2110      	movs	r1, #16
   d5d54:	4620      	mov	r0, r4
   d5d56:	f7ff fed8 	bl	d5b0a <_ZN4MQTT5writeEhPht>
   d5d5a:	f002 fa7f 	bl	d825c <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!_client.available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d5d5e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
   d5d62:	6260      	str	r0, [r4, #36]	; 0x24
   d5d64:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!_client.available()) {
   d5d66:	4620      	mov	r0, r4
   d5d68:	f003 ff90 	bl	d9c8c <_ZN9TCPClient9availableEv>
   d5d6c:	b940      	cbnz	r0, d5d80 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x170>
   d5d6e:	f002 fa75 	bl	d825c <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d5d72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d5d74:	1ac0      	subs	r0, r0, r3
   d5d76:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d5d78:	4373      	muls	r3, r6
   d5d7a:	4298      	cmp	r0, r3
   d5d7c:	d9f3      	bls.n	d5d66 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
   d5d7e:	e00f      	b.n	d5da0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                    _client.stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d5d80:	4669      	mov	r1, sp
   d5d82:	4620      	mov	r0, r4
   d5d84:	f7ff fe68 	bl	d5a58 <_ZN4MQTT10readPacketEPh>

            if (len == 4) {
   d5d88:	2804      	cmp	r0, #4
   d5d8a:	d109      	bne.n	d5da0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                if (buffer[3] == CONN_ACCEPT) {
   d5d8c:	69e3      	ldr	r3, [r4, #28]
   d5d8e:	78de      	ldrb	r6, [r3, #3]
   d5d90:	b936      	cbnz	r6, d5da0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
   d5d92:	f002 fa63 	bl	d825c <HAL_Timer_Get_Milli_Seconds>
                    lastInActivity = millis();
                    pingOutstanding = false;
                    debug_print(" Connect success\n");
                    return true;
   d5d96:	2501      	movs	r5, #1
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == CONN_ACCEPT) {
                    lastInActivity = millis();
   d5d98:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   d5d9a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
   d5d9e:	e004      	b.n	d5daa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
                    // check EMQTT_CONNACK_RESPONSE code.
                    debug_print(" Connect fail. code = [%d]\n", buffer[3]);
                }
            }
        }
        _client.stop();
   d5da0:	4620      	mov	r0, r4
   d5da2:	f003 ff5b 	bl	d9c5c <_ZN9TCPClient4stopEv>
   d5da6:	e000      	b.n	d5daa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
    }
    return false;
   d5da8:	2500      	movs	r5, #0
}
   d5daa:	4628      	mov	r0, r5
   d5dac:	b007      	add	sp, #28
   d5dae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5db2:	bf00      	nop
   d5db4:	000db0de 	.word	0x000db0de
   d5db8:	000db0e5 	.word	0x000db0e5

000d5dbc <_ZN4MQTT7connectEPKc>:
void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}


bool MQTT::connect(const char *id) {
   d5dbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   d5dbe:	2304      	movs	r3, #4
   d5dc0:	9305      	str	r3, [sp, #20]
   d5dc2:	2301      	movs	r3, #1
   d5dc4:	9304      	str	r3, [sp, #16]
   d5dc6:	2300      	movs	r3, #0
   d5dc8:	9303      	str	r3, [sp, #12]
   d5dca:	9302      	str	r3, [sp, #8]
   d5dcc:	9301      	str	r3, [sp, #4]
   d5dce:	9300      	str	r3, [sp, #0]
   d5dd0:	461a      	mov	r2, r3
   d5dd2:	f7ff ff1d 	bl	d5c10 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   d5dd6:	b007      	add	sp, #28
   d5dd8:	f85d fb04 	ldr.w	pc, [sp], #4

000d5ddc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d5ddc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5de0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   d5de2:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d5de6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d5dea:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
   d5dee:	4604      	mov	r4, r0
   d5df0:	468b      	mov	fp, r1
   d5df2:	4691      	mov	r9, r2
   d5df4:	469a      	mov	sl, r3
    if (isConnected()) {
   d5df6:	f7ff fee9 	bl	d5bcc <_ZN4MQTT11isConnectedEv>
   d5dfa:	2800      	cmp	r0, #0
   d5dfc:	d04c      	beq.n	d5e98 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xbc>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, this->maxpacketsize);
   d5dfe:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   d5e02:	69e0      	ldr	r0, [r4, #28]
   d5e04:	2100      	movs	r1, #0
   d5e06:	f004 ff53 	bl	dacb0 <memset>

        length = writeString(topic, buffer, length);
   d5e0a:	2305      	movs	r3, #5
   d5e0c:	69e2      	ldr	r2, [r4, #28]
   d5e0e:	4659      	mov	r1, fp
   d5e10:	4620      	mov	r0, r4
   d5e12:	f7ff fec1 	bl	d5b98 <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
   d5e16:	1e6b      	subs	r3, r5, #1
   d5e18:	2b01      	cmp	r3, #1
   d5e1a:	d812      	bhi.n	d5e42 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
            nextMsgId += 1;
   d5e1c:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d5e1e:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, this->maxpacketsize);

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
   d5e20:	3301      	adds	r3, #1
   d5e22:	b29b      	uxth	r3, r3
   d5e24:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d5e26:	121b      	asrs	r3, r3, #8
   d5e28:	5413      	strb	r3, [r2, r0]
   d5e2a:	1c41      	adds	r1, r0, #1
   d5e2c:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
   d5e2e:	69e3      	ldr	r3, [r4, #28]
   d5e30:	8c22      	ldrh	r2, [r4, #32]
   d5e32:	545a      	strb	r2, [r3, r1]
   d5e34:	3002      	adds	r0, #2
   d5e36:	b280      	uxth	r0, r0
            if (messageid != NULL)
   d5e38:	b11e      	cbz	r6, d5e42 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
                *messageid = nextMsgId++;
   d5e3a:	8c23      	ldrh	r3, [r4, #32]
   d5e3c:	1c5a      	adds	r2, r3, #1
   d5e3e:	8422      	strh	r2, [r4, #32]
   d5e40:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d5e42:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d5e44:	b291      	uxth	r1, r2
   d5e46:	1883      	adds	r3, r0, r2
   d5e48:	458a      	cmp	sl, r1
   d5e4a:	b29b      	uxth	r3, r3
   d5e4c:	d90a      	bls.n	d5e64 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
   d5e4e:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
   d5e52:	429e      	cmp	r6, r3
   d5e54:	f102 0201 	add.w	r2, r2, #1
   d5e58:	d904      	bls.n	d5e64 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
            buffer[length++] = payload[i];
   d5e5a:	f819 6001 	ldrb.w	r6, [r9, r1]
   d5e5e:	69e1      	ldr	r1, [r4, #28]
   d5e60:	54ce      	strb	r6, [r1, r3]
   d5e62:	e7ef      	b.n	d5e44 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x68>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
   d5e64:	f1b8 0f00 	cmp.w	r8, #0
   d5e68:	bf0c      	ite	eq
   d5e6a:	2130      	moveq	r1, #48	; 0x30
   d5e6c:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
   d5e6e:	b10f      	cbz	r7, d5e74 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x98>
            header |= DUP_FLAG_ON_MASK;
   d5e70:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
   d5e74:	2d02      	cmp	r5, #2
   d5e76:	d102      	bne.n	d5e7e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa2>
            header |= MQTTQOS2_HEADER_MASK;
   d5e78:	f041 0104 	orr.w	r1, r1, #4
   d5e7c:	e003      	b.n	d5e86 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xaa>
        else if (qos == QOS1)
   d5e7e:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   d5e80:	bf08      	it	eq
   d5e82:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d5e86:	3b05      	subs	r3, #5
   d5e88:	69e2      	ldr	r2, [r4, #28]
   d5e8a:	b29b      	uxth	r3, r3
   d5e8c:	4620      	mov	r0, r4
    }
    return false;
}
   d5e8e:	b001      	add	sp, #4
   d5e90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d5e94:	f7ff be39 	b.w	d5b0a <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d5e98:	b001      	add	sp, #4
   d5e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5e9e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   d5e9e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   d5ea0:	9c08      	ldr	r4, [sp, #32]
   d5ea2:	9403      	str	r4, [sp, #12]
   d5ea4:	2400      	movs	r4, #0
   d5ea6:	9402      	str	r4, [sp, #8]
   d5ea8:	f89d 401c 	ldrb.w	r4, [sp, #28]
   d5eac:	9401      	str	r4, [sp, #4]
   d5eae:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d5eb2:	9400      	str	r4, [sp, #0]
   d5eb4:	f7ff ff92 	bl	d5ddc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   d5eb8:	b004      	add	sp, #16
   d5eba:	bd10      	pop	{r4, pc}

000d5ebc <_ZN4MQTT7publishEPKcPKhj>:

bool MQTT::publish(const char * topic, const char* payload, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, (uint8_t*)payload, strlen(payload), false, qos, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength) {
   d5ebc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, false, QOS0, NULL);
   d5ebe:	2400      	movs	r4, #0
   d5ec0:	9402      	str	r4, [sp, #8]
   d5ec2:	9401      	str	r4, [sp, #4]
   d5ec4:	9400      	str	r4, [sp, #0]
   d5ec6:	f7ff ffea 	bl	d5e9e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   d5eca:	b004      	add	sp, #16
   d5ecc:	bd10      	pop	{r4, pc}

000d5ece <_ZN4MQTT14publishReleaseEt>:
        return write(header, buffer, length-5);
    }
    return false;
}

bool MQTT::publishRelease(uint16_t messageid) {
   d5ece:	b538      	push	{r3, r4, r5, lr}
   d5ed0:	4604      	mov	r4, r0
   d5ed2:	460d      	mov	r5, r1
    if (isConnected()) {
   d5ed4:	f7ff fe7a 	bl	d5bcc <_ZN4MQTT11isConnectedEv>
   d5ed8:	b190      	cbz	r0, d5f00 <_ZN4MQTT14publishReleaseEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   d5eda:	69e3      	ldr	r3, [r4, #28]
   d5edc:	2262      	movs	r2, #98	; 0x62
   d5ede:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d5ee0:	69e3      	ldr	r3, [r4, #28]
   d5ee2:	2202      	movs	r2, #2
   d5ee4:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d5ee6:	69e3      	ldr	r3, [r4, #28]
   d5ee8:	122a      	asrs	r2, r5, #8
   d5eea:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d5eec:	69e3      	ldr	r3, [r4, #28]
   d5eee:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
   d5ef0:	2204      	movs	r2, #4
   d5ef2:	69e1      	ldr	r1, [r4, #28]
   d5ef4:	4620      	mov	r0, r4
   d5ef6:	f003 fcc8 	bl	d988a <_ZN9TCPClient5writeEPKhj>
   d5efa:	3000      	adds	r0, #0
   d5efc:	bf18      	it	ne
   d5efe:	2001      	movne	r0, #1
    }
    return false;
}
   d5f00:	bd38      	pop	{r3, r4, r5, pc}

000d5f02 <_ZN4MQTT15publishCompleteEt>:

bool MQTT::publishComplete(uint16_t messageid) {
   d5f02:	b538      	push	{r3, r4, r5, lr}
   d5f04:	4604      	mov	r4, r0
   d5f06:	460d      	mov	r5, r1
    if (isConnected()) {
   d5f08:	f7ff fe60 	bl	d5bcc <_ZN4MQTT11isConnectedEv>
   d5f0c:	b190      	cbz	r0, d5f34 <_ZN4MQTT15publishCompleteEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   d5f0e:	69e3      	ldr	r3, [r4, #28]
   d5f10:	2272      	movs	r2, #114	; 0x72
   d5f12:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d5f14:	69e3      	ldr	r3, [r4, #28]
   d5f16:	2202      	movs	r2, #2
   d5f18:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d5f1a:	69e3      	ldr	r3, [r4, #28]
   d5f1c:	122a      	asrs	r2, r5, #8
   d5f1e:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d5f20:	69e3      	ldr	r3, [r4, #28]
   d5f22:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
   d5f24:	2204      	movs	r2, #4
   d5f26:	69e1      	ldr	r1, [r4, #28]
   d5f28:	4620      	mov	r0, r4
   d5f2a:	f003 fcae 	bl	d988a <_ZN9TCPClient5writeEPKhj>
   d5f2e:	3000      	adds	r0, #0
   d5f30:	bf18      	it	ne
   d5f32:	2001      	movne	r0, #1
    }
    return false;
}
   d5f34:	bd38      	pop	{r3, r4, r5, pc}

000d5f36 <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
   d5f36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5f3a:	b083      	sub	sp, #12
   d5f3c:	af00      	add	r7, sp, #0
   d5f3e:	4604      	mov	r4, r0
    if (isConnected()) {
   d5f40:	f7ff fe44 	bl	d5bcc <_ZN4MQTT11isConnectedEv>
   d5f44:	4681      	mov	r9, r0
   d5f46:	2800      	cmp	r0, #0
   d5f48:	f000 80f6 	beq.w	d6138 <_ZN4MQTT4loopEv+0x202>
   d5f4c:	f002 f986 	bl	d825c <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   d5f50:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d5f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5f56:	4353      	muls	r3, r2
   d5f58:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   d5f5a:	1a82      	subs	r2, r0, r2
   d5f5c:	429a      	cmp	r2, r3
   d5f5e:	4605      	mov	r5, r0
   d5f60:	d803      	bhi.n	d5f6a <_ZN4MQTT4loopEv+0x34>
   d5f62:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d5f64:	1a82      	subs	r2, r0, r2
   d5f66:	4293      	cmp	r3, r2
   d5f68:	d217      	bcs.n	d5f9a <_ZN4MQTT4loopEv+0x64>
            if (pingOutstanding) {
   d5f6a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d5f6e:	b12b      	cbz	r3, d5f7c <_ZN4MQTT4loopEv+0x46>
                _client.stop();
   d5f70:	4620      	mov	r0, r4
   d5f72:	f003 fe73 	bl	d9c5c <_ZN9TCPClient4stopEv>
                return false;
   d5f76:	f04f 0900 	mov.w	r9, #0
   d5f7a:	e0dd      	b.n	d6138 <_ZN4MQTT4loopEv+0x202>
            } else {
                buffer[0] = MQTTPINGREQ;
   d5f7c:	69e2      	ldr	r2, [r4, #28]
   d5f7e:	21c0      	movs	r1, #192	; 0xc0
   d5f80:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   d5f82:	69e2      	ldr	r2, [r4, #28]
   d5f84:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   d5f86:	69e1      	ldr	r1, [r4, #28]
   d5f88:	2202      	movs	r2, #2
   d5f8a:	4620      	mov	r0, r4
   d5f8c:	f003 fc7d 	bl	d988a <_ZN9TCPClient5writeEPKhj>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
   d5f90:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                _client.write(buffer,2);
                lastOutActivity = t;
   d5f92:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
   d5f94:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
   d5f96:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (_client.available()) {
   d5f9a:	4620      	mov	r0, r4
   d5f9c:	f003 fe76 	bl	d9c8c <_ZN9TCPClient9availableEv>
   d5fa0:	2800      	cmp	r0, #0
   d5fa2:	f000 80c9 	beq.w	d6138 <_ZN4MQTT4loopEv+0x202>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d5fa6:	1df9      	adds	r1, r7, #7
   d5fa8:	4620      	mov	r0, r4
   d5faa:	f7ff fd55 	bl	d5a58 <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
   d5fae:	4602      	mov	r2, r0
   d5fb0:	2800      	cmp	r0, #0
   d5fb2:	f000 80c1 	beq.w	d6138 <_ZN4MQTT4loopEv+0x202>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
   d5fb6:	69e3      	ldr	r3, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
   d5fb8:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   d5fba:	7818      	ldrb	r0, [r3, #0]
   d5fbc:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   d5fc0:	2930      	cmp	r1, #48	; 0x30
   d5fc2:	d17d      	bne.n	d60c0 <_ZN4MQTT4loopEv+0x18a>
                    if (callback) {
   d5fc4:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
   d5fc8:	f1bb 0f00 	cmp.w	fp, #0
   d5fcc:	f000 80b4 	beq.w	d6138 <_ZN4MQTT4loopEv+0x202>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d5fd0:	f897 c007 	ldrb.w	ip, [r7, #7]
   d5fd4:	eb03 000c 	add.w	r0, r3, ip
              							_client.write(buffer, 4);
              							lastOutActivity = t;
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
   d5fd8:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d5fda:	7881      	ldrb	r1, [r0, #2]
   d5fdc:	f890 e001 	ldrb.w	lr, [r0, #1]
   d5fe0:	eb01 2e0e 	add.w	lr, r1, lr, lsl #8
   d5fe4:	fa1f fe8e 	uxth.w	lr, lr
                        char topic[tl+1];
   d5fe8:	f10e 0108 	add.w	r1, lr, #8
   d5fec:	f021 0107 	bic.w	r1, r1, #7
   d5ff0:	ebad 0d01 	sub.w	sp, sp, r1
   d5ff4:	4668      	mov	r0, sp
   d5ff6:	2100      	movs	r1, #0
                        for (uint16_t i=0;i<tl;i++) {
   d5ff8:	b28e      	uxth	r6, r1
   d5ffa:	45b6      	cmp	lr, r6
   d5ffc:	d906      	bls.n	d600c <_ZN4MQTT4loopEv+0xd6>
                            topic[i] = buffer[llen+3+i];
   d5ffe:	eb0c 0601 	add.w	r6, ip, r1
   d6002:	441e      	add	r6, r3
   d6004:	78f6      	ldrb	r6, [r6, #3]
   d6006:	5446      	strb	r6, [r0, r1]
   d6008:	3101      	adds	r1, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
   d600a:	e7f5      	b.n	d5ff8 <_ZN4MQTT4loopEv+0xc2>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
   d600c:	2100      	movs	r1, #0
   d600e:	f800 100e 	strb.w	r1, [r0, lr]
   d6012:	781e      	ldrb	r6, [r3, #0]
   d6014:	f006 0606 	and.w	r6, r6, #6
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d6018:	2e02      	cmp	r6, #2
   d601a:	f10c 0103 	add.w	r1, ip, #3
   d601e:	ebcc 0202 	rsb	r2, ip, r2
   d6022:	d11e      	bne.n	d6062 <_ZN4MQTT4loopEv+0x12c>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d6024:	4471      	add	r1, lr
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d6026:	ebce 0202 	rsb	r2, lr, r2
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d602a:	f813 8001 	ldrb.w	r8, [r3, r1]
   d602e:	4419      	add	r1, r3
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d6030:	3a05      	subs	r2, #5
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d6032:	7849      	ldrb	r1, [r1, #1]
   d6034:	eb01 2808 	add.w	r8, r1, r8, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d6038:	f10c 0105 	add.w	r1, ip, #5
   d603c:	4471      	add	r1, lr
   d603e:	4419      	add	r1, r3
   d6040:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   d6042:	69e3      	ldr	r3, [r4, #28]
   d6044:	2240      	movs	r2, #64	; 0x40
   d6046:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   d6048:	69e3      	ldr	r3, [r4, #28]
   d604a:	705e      	strb	r6, [r3, #1]
                            buffer[2] = (msgId >> 8);
   d604c:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d604e:	fa1f f888 	uxth.w	r8, r8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
   d6052:	ea4f 2228 	mov.w	r2, r8, asr #8
   d6056:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   d6058:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
   d605a:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
   d605c:	f883 8003 	strb.w	r8, [r3, #3]
   d6060:	e020      	b.n	d60a4 <_ZN4MQTT4loopEv+0x16e>
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   d6062:	2e04      	cmp	r6, #4
   d6064:	d124      	bne.n	d60b0 <_ZN4MQTT4loopEv+0x17a>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d6066:	4471      	add	r1, lr
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d6068:	ebce 0202 	rsb	r2, lr, r2
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d606c:	f813 8001 	ldrb.w	r8, [r3, r1]
   d6070:	4419      	add	r1, r3
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d6072:	3a05      	subs	r2, #5
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d6074:	7849      	ldrb	r1, [r1, #1]
   d6076:	eb01 2808 	add.w	r8, r1, r8, lsl #8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d607a:	f10c 0105 	add.w	r1, ip, #5
   d607e:	4471      	add	r1, lr
   d6080:	4419      	add	r1, r3
   d6082:	47d8      	blx	fp

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
   d6084:	69e3      	ldr	r3, [r4, #28]
   d6086:	2250      	movs	r2, #80	; 0x50
   d6088:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
   d608a:	69e3      	ldr	r3, [r4, #28]
   d608c:	2202      	movs	r2, #2
   d608e:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
   d6090:	69e3      	ldr	r3, [r4, #28]
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d6092:	fa1f f888 	uxth.w	r8, r8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
   d6096:	ea4f 2228 	mov.w	r2, r8, asr #8
   d609a:	709a      	strb	r2, [r3, #2]
              							buffer[3] = (msgId & 0xFF);
   d609c:	69e3      	ldr	r3, [r4, #28]
              							_client.write(buffer, 4);
   d609e:	4632      	mov	r2, r6
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
              							buffer[3] = (msgId & 0xFF);
   d60a0:	f883 8003 	strb.w	r8, [r3, #3]
              							_client.write(buffer, 4);
   d60a4:	69e1      	ldr	r1, [r4, #28]
   d60a6:	4620      	mov	r0, r4
   d60a8:	f003 fbef 	bl	d988a <_ZN9TCPClient5writeEPKhj>
              							lastOutActivity = t;
   d60ac:	6265      	str	r5, [r4, #36]	; 0x24
   d60ae:	e005      	b.n	d60bc <_ZN4MQTT4loopEv+0x186>
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
   d60b0:	3a03      	subs	r2, #3
   d60b2:	4471      	add	r1, lr
   d60b4:	ebce 0202 	rsb	r2, lr, r2
   d60b8:	4419      	add	r1, r3
   d60ba:	47d8      	blx	fp
   d60bc:	46d5      	mov	sp, sl
   d60be:	e03b      	b.n	d6138 <_ZN4MQTT4loopEv+0x202>
                        }
                    }
                } else if (type == MQTTPUBREC) {
   d60c0:	2950      	cmp	r1, #80	; 0x50
   d60c2:	d108      	bne.n	d60d6 <_ZN4MQTT4loopEv+0x1a0>
                    // check for the situation that QoS2 receive PUBREC, should return PUBREL
                    msgId = (buffer[2] << 8) + buffer[3];
                    this->publishRelease(msgId);
   d60c4:	7899      	ldrb	r1, [r3, #2]
   d60c6:	78db      	ldrb	r3, [r3, #3]
   d60c8:	eb03 2101 	add.w	r1, r3, r1, lsl #8
   d60cc:	b289      	uxth	r1, r1
   d60ce:	4620      	mov	r0, r4
   d60d0:	f7ff fefd 	bl	d5ece <_ZN4MQTT14publishReleaseEt>
   d60d4:	e030      	b.n	d6138 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBACK) {
   d60d6:	2940      	cmp	r1, #64	; 0x40
   d60d8:	d00c      	beq.n	d60f4 <_ZN4MQTT4loopEv+0x1be>
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
                        }
                    }
                } else if (type == MQTTPUBREL) {
   d60da:	2960      	cmp	r1, #96	; 0x60
   d60dc:	d108      	bne.n	d60f0 <_ZN4MQTT4loopEv+0x1ba>
                  msgId = (buffer[2] << 8) + buffer[3];
                  this->publishComplete(msgId);
   d60de:	7899      	ldrb	r1, [r3, #2]
   d60e0:	78db      	ldrb	r3, [r3, #3]
   d60e2:	eb03 2101 	add.w	r1, r3, r1, lsl #8
   d60e6:	b289      	uxth	r1, r1
   d60e8:	4620      	mov	r0, r4
   d60ea:	f7ff ff0a 	bl	d5f02 <_ZN4MQTT15publishCompleteEt>
   d60ee:	e023      	b.n	d6138 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBCOMP) {
   d60f0:	2970      	cmp	r1, #112	; 0x70
   d60f2:	d10d      	bne.n	d6110 <_ZN4MQTT4loopEv+0x1da>
                  if (qoscallback) {
   d60f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d60f6:	b1f9      	cbz	r1, d6138 <_ZN4MQTT4loopEv+0x202>
                      // msgId only present for QOS==0
                      if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   d60f8:	2a04      	cmp	r2, #4
   d60fa:	d11d      	bne.n	d6138 <_ZN4MQTT4loopEv+0x202>
   d60fc:	f010 0f06 	tst.w	r0, #6
   d6100:	d11a      	bne.n	d6138 <_ZN4MQTT4loopEv+0x202>
                          msgId = (buffer[2]<<8)+buffer[3];
                          this->qoscallback(msgId);
   d6102:	7898      	ldrb	r0, [r3, #2]
   d6104:	78db      	ldrb	r3, [r3, #3]
   d6106:	eb03 2000 	add.w	r0, r3, r0, lsl #8
   d610a:	b280      	uxth	r0, r0
   d610c:	4788      	blx	r1
   d610e:	e013      	b.n	d6138 <_ZN4MQTT4loopEv+0x202>
                      }
                  }
                } else if (type == MQTTSUBACK) {
   d6110:	2990      	cmp	r1, #144	; 0x90
   d6112:	d011      	beq.n	d6138 <_ZN4MQTT4loopEv+0x202>
                    // if something...
                } else if (type == MQTTPINGREQ) {
   d6114:	29c0      	cmp	r1, #192	; 0xc0
   d6116:	d10a      	bne.n	d612e <_ZN4MQTT4loopEv+0x1f8>
                    buffer[0] = MQTTPINGRESP;
   d6118:	22d0      	movs	r2, #208	; 0xd0
   d611a:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   d611c:	69e3      	ldr	r3, [r4, #28]
   d611e:	2200      	movs	r2, #0
   d6120:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   d6122:	69e1      	ldr	r1, [r4, #28]
   d6124:	2202      	movs	r2, #2
   d6126:	4620      	mov	r0, r4
   d6128:	f003 fbaf 	bl	d988a <_ZN9TCPClient5writeEPKhj>
   d612c:	e004      	b.n	d6138 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPINGRESP) {
   d612e:	29d0      	cmp	r1, #208	; 0xd0
                    pingOutstanding = false;
   d6130:	bf04      	itt	eq
   d6132:	2300      	moveq	r3, #0
   d6134:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
            }
        }
        return true;
    }
    return false;
}
   d6138:	4648      	mov	r0, r9
   d613a:	370c      	adds	r7, #12
   d613c:	46bd      	mov	sp, r7
   d613e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6142 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
}

bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   d6142:	b570      	push	{r4, r5, r6, lr}
   d6144:	4604      	mov	r4, r0
   d6146:	460e      	mov	r6, r1
   d6148:	4615      	mov	r5, r2

    if (isConnected()) {
   d614a:	f7ff fd3f 	bl	d5bcc <_ZN4MQTT11isConnectedEv>
   d614e:	b1e8      	cbz	r0, d618c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4a>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
   d6150:	8c23      	ldrh	r3, [r4, #32]
   d6152:	3301      	adds	r3, #1
   d6154:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   d6156:	b903      	cbnz	r3, d615a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x18>
            nextMsgId = 1;
   d6158:	2301      	movs	r3, #1
   d615a:	8423      	strh	r3, [r4, #32]
        }
        buffer[length++] = (nextMsgId >> 8);
   d615c:	8c23      	ldrh	r3, [r4, #32]
   d615e:	69e2      	ldr	r2, [r4, #28]
   d6160:	121b      	asrs	r3, r3, #8
   d6162:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   d6164:	69e3      	ldr	r3, [r4, #28]
   d6166:	8c22      	ldrh	r2, [r4, #32]
   d6168:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   d616a:	69e2      	ldr	r2, [r4, #28]
   d616c:	4631      	mov	r1, r6
   d616e:	2307      	movs	r3, #7
   d6170:	4620      	mov	r0, r4
   d6172:	f7ff fd11 	bl	d5b98 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   d6176:	69e3      	ldr	r3, [r4, #28]
   d6178:	541d      	strb	r5, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d617a:	1f03      	subs	r3, r0, #4
   d617c:	69e2      	ldr	r2, [r4, #28]
   d617e:	4620      	mov	r0, r4
   d6180:	b29b      	uxth	r3, r3
   d6182:	2182      	movs	r1, #130	; 0x82
    }
    return false;
}
   d6184:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d6188:	f7ff bcbf 	b.w	d5b0a <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d618c:	bd70      	pop	{r4, r5, r6, pc}

000d618e <_ZN4MQTT9subscribeEPKc>:
    lastOutActivity = millis();
    return (rc == 1+llen+length);
}

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
   d618e:	2200      	movs	r2, #0
   d6190:	f7ff bfd7 	b.w	d6142 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000d6194 <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
   d6194:	b510      	push	{r4, lr}
   d6196:	4604      	mov	r4, r0
    if (isConnected()) {
   d6198:	f7ff fd18 	bl	d5bcc <_ZN4MQTT11isConnectedEv>
   d619c:	b110      	cbz	r0, d61a4 <_ZN4MQTTD1Ev+0x10>
        disconnect();
   d619e:	4620      	mov	r0, r4
   d61a0:	f7ff fce6 	bl	d5b70 <_ZN4MQTT10disconnectEv>
    }

    if (buffer != NULL)
   d61a4:	69e0      	ldr	r0, [r4, #28]
   d61a6:	b108      	cbz	r0, d61ac <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
   d61a8:	f7fd ff7b 	bl	d40a2 <_ZdaPv>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
   d61ac:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d61b0:	f002 fc9e 	bl	d8af0 <_ZN6StringD1Ev>
   d61b4:	4620      	mov	r0, r4
   d61b6:	f7ff fbdb 	bl	d5970 <_ZN9TCPClientD1Ev>
        disconnect();
    }

    if (buffer != NULL)
      delete[] buffer;
}
   d61ba:	4620      	mov	r0, r4
   d61bc:	bd10      	pop	{r4, pc}

000d61be <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
   d61be:	f001 bf85 	b.w	d80cc <HAL_Pin_Map>

000d61c2 <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d61c2:	f001 bf83 	b.w	d80cc <HAL_Pin_Map>

000d61c6 <_GLOBAL__sub_I__ZN7istream3getEv>:
   d61c6:	f001 bf81 	b.w	d80cc <HAL_Pin_Map>

000d61ca <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d61ca:	b510      	push	{r4, lr}
   d61cc:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d61ce:	3024      	adds	r0, #36	; 0x24
   d61d0:	f000 ff9c 	bl	d710c <_ZN8FatCache4syncEv>
   d61d4:	b128      	cbz	r0, d61e2 <_ZN9FatVolume9cacheSyncEv+0x18>
   d61d6:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d61da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d61de:	f000 bf95 	b.w	d710c <_ZN8FatCache4syncEv>
  }
   d61e2:	bd10      	pop	{r4, pc}

000d61e4 <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d61e4:	1e41      	subs	r1, r0, #1
   d61e6:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d61ea:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d61ec:	0843      	lsrs	r3, r0, #1
   d61ee:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d61f2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d61f6:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d61fa:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d61fc:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d61fe:	d1f5      	bne.n	d61ec <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d6200:	4770      	bx	lr

000d6202 <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d6202:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   d6204:	68cb      	ldr	r3, [r1, #12]
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d6206:	4604      	mov	r4, r0
   d6208:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   d620a:	b923      	cbnz	r3, d6216 <_ZN7FatFile11openClusterEPS_+0x14>
    return openRoot(file->m_vol);
   d620c:	6889      	ldr	r1, [r1, #8]
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   d620e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
   d6212:	f000 bc08 	b.w	d6a26 <_ZN7FatFile8openRootEP9FatVolume>
  }
  memset(this, 0, sizeof(FatFile));
   d6216:	2224      	movs	r2, #36	; 0x24
   d6218:	2100      	movs	r1, #0
   d621a:	f004 fd49 	bl	dacb0 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   d621e:	2310      	movs	r3, #16
  m_flags = F_READ;
   d6220:	2001      	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attr = FILE_ATTR_SUBDIR;
   d6222:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   d6224:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   d6226:	68ab      	ldr	r3, [r5, #8]
   d6228:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   d622a:	68eb      	ldr	r3, [r5, #12]
   d622c:	6223      	str	r3, [r4, #32]
  return true;
}
   d622e:	bd38      	pop	{r3, r4, r5, pc}

000d6230 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d6230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d6234:	7803      	ldrb	r3, [r0, #0]
   d6236:	2b20      	cmp	r3, #32
   d6238:	f100 0401 	add.w	r4, r0, #1
   d623c:	d101      	bne.n	d6242 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d623e:	4620      	mov	r0, r4
   d6240:	e7f8      	b.n	d6234 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6242:	4f70      	ldr	r7, [pc, #448]	; (d6404 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d6244:	6088      	str	r0, [r1, #8]
   d6246:	4605      	mov	r5, r0
   d6248:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d624a:	462e      	mov	r6, r5
   d624c:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d6250:	b30b      	cbz	r3, d6296 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d6252:	2b2f      	cmp	r3, #47	; 0x2f
   d6254:	d101      	bne.n	d625a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d6256:	1903      	adds	r3, r0, r4
   d6258:	e017      	b.n	d628a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d625a:	2b5c      	cmp	r3, #92	; 0x5c
   d625c:	d102      	bne.n	d6264 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d625e:	2000      	movs	r0, #0
   d6260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6264:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d6268:	b2e4      	uxtb	r4, r4
   d626a:	2c1d      	cmp	r4, #29
   d626c:	d803      	bhi.n	d6276 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d626e:	fa27 f404 	lsr.w	r4, r7, r4
   d6272:	07e4      	lsls	r4, r4, #31
   d6274:	d4f3      	bmi.n	d625e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d6276:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d627a:	2c3c      	cmp	r4, #60	; 0x3c
   d627c:	d0ef      	beq.n	d625e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d627e:	3b20      	subs	r3, #32
   d6280:	2b5e      	cmp	r3, #94	; 0x5e
   d6282:	d9e1      	bls.n	d6248 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d6284:	e7eb      	b.n	d625e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d6286:	2d2f      	cmp	r5, #47	; 0x2f
   d6288:	d105      	bne.n	d6296 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d628a:	461e      	mov	r6, r3
   d628c:	f813 5b01 	ldrb.w	r5, [r3], #1
   d6290:	2d20      	cmp	r5, #32
   d6292:	d1f8      	bne.n	d6286 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d6294:	e7f9      	b.n	d628a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d6296:	6016      	str	r6, [r2, #0]
   d6298:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d629a:	4298      	cmp	r0, r3
   d629c:	ebc0 0803 	rsb	r8, r0, r3
   d62a0:	d009      	beq.n	d62b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d62a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d62a6:	2a2e      	cmp	r2, #46	; 0x2e
   d62a8:	d0f7      	beq.n	d629a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d62aa:	2a20      	cmp	r2, #32
   d62ac:	d0f5      	beq.n	d629a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d62ae:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d62b2:	dcd4      	bgt.n	d625e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d62b4:	e001      	b.n	d62ba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d62b6:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d62ba:	f8c1 8004 	str.w	r8, [r1, #4]
   d62be:	f101 030c 	add.w	r3, r1, #12
   d62c2:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d62c6:	2420      	movs	r4, #32
   d62c8:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d62cc:	4293      	cmp	r3, r2
   d62ce:	d1fb      	bne.n	d62c8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d62d0:	4603      	mov	r3, r0
   d62d2:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d62d4:	f813 4b01 	ldrb.w	r4, [r3], #1
   d62d8:	2c2e      	cmp	r4, #46	; 0x2e
   d62da:	d0fa      	beq.n	d62d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d62dc:	2c20      	cmp	r4, #32
   d62de:	d0f8      	beq.n	d62d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d62e0:	fab2 f482 	clz	r4, r2
   d62e4:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d62e6:	f108 36ff 	add.w	r6, r8, #4294967295
   d62ea:	1c73      	adds	r3, r6, #1
   d62ec:	d107      	bne.n	d62fe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d62ee:	2700      	movs	r7, #0
   d62f0:	f04f 0e07 	mov.w	lr, #7
   d62f4:	463d      	mov	r5, r7
   d62f6:	46ba      	mov	sl, r7
   d62f8:	f04f 0908 	mov.w	r9, #8
   d62fc:	e009      	b.n	d6312 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d62fe:	5d83      	ldrb	r3, [r0, r6]
   d6300:	2b2e      	cmp	r3, #46	; 0x2e
   d6302:	d0f4      	beq.n	d62ee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d6304:	3e01      	subs	r6, #1
   d6306:	e7f0      	b.n	d62ea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d6308:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d630a:	2b20      	cmp	r3, #32
   d630c:	d104      	bne.n	d6318 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d630e:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d6310:	3201      	adds	r2, #1
   d6312:	4542      	cmp	r2, r8
   d6314:	dbf8      	blt.n	d6308 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d6316:	e04b      	b.n	d63b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d6318:	2b2e      	cmp	r3, #46	; 0x2e
   d631a:	d102      	bne.n	d6322 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d631c:	42b2      	cmp	r2, r6
   d631e:	d1f6      	bne.n	d630e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d6320:	e003      	b.n	d632a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d6322:	2b22      	cmp	r3, #34	; 0x22
   d6324:	d017      	beq.n	d6356 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d6326:	2b7c      	cmp	r3, #124	; 0x7c
   d6328:	d015      	beq.n	d6356 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d632a:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d632e:	f1bc 0f05 	cmp.w	ip, #5
   d6332:	d801      	bhi.n	d6338 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d6334:	2b2d      	cmp	r3, #45	; 0x2d
   d6336:	d10e      	bne.n	d6356 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d6338:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d633c:	f1bc 0f05 	cmp.w	ip, #5
   d6340:	d909      	bls.n	d6356 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d6342:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d6346:	f1bc 0f02 	cmp.w	ip, #2
   d634a:	d904      	bls.n	d6356 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d634c:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d6350:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d6354:	d902      	bls.n	d635c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d6356:	42b2      	cmp	r2, r6
   d6358:	d10e      	bne.n	d6378 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d635a:	e049      	b.n	d63f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d635c:	42b2      	cmp	r2, r6
   d635e:	d047      	beq.n	d63f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d6360:	4575      	cmp	r5, lr
   d6362:	d821      	bhi.n	d63a8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d6364:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d6368:	f1bc 0f19 	cmp.w	ip, #25
   d636c:	d808      	bhi.n	d6380 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d636e:	3b20      	subs	r3, #32
   d6370:	b2db      	uxtb	r3, r3
        lc |= bit;
   d6372:	ea49 0707 	orr.w	r7, r9, r7
   d6376:	e00a      	b.n	d638e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d6378:	4575      	cmp	r5, lr
   d637a:	d815      	bhi.n	d63a8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d637c:	2400      	movs	r4, #0
      c = '_';
   d637e:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d6380:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d6384:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d6388:	bf98      	it	ls
   d638a:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d638e:	f105 0c01 	add.w	ip, r5, #1
   d6392:	fa5f fc8c 	uxtb.w	ip, ip
   d6396:	440d      	add	r5, r1
      if (i < 7) {
   d6398:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d639c:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d639e:	d801      	bhi.n	d63a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d63a0:	f881 c00c 	strb.w	ip, [r1, #12]
   d63a4:	4665      	mov	r5, ip
   d63a6:	e7b3      	b.n	d6310 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d63a8:	f1be 0f0a 	cmp.w	lr, #10
   d63ac:	d117      	bne.n	d63de <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d63ae:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d63b0:	7b4b      	ldrb	r3, [r1, #13]
   d63b2:	2b20      	cmp	r3, #32
   d63b4:	f43f af53 	beq.w	d625e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d63b8:	b13c      	cbz	r4, d63ca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d63ba:	ea1a 0f07 	tst.w	sl, r7
   d63be:	bf18      	it	ne
   d63c0:	2702      	movne	r7, #2
   d63c2:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d63c4:	2001      	movs	r0, #1
   d63c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d63ca:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d63cc:	2001      	movs	r0, #1
   d63ce:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d63d0:	4419      	add	r1, r3
   d63d2:	237e      	movs	r3, #126	; 0x7e
   d63d4:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d63d6:	2331      	movs	r3, #49	; 0x31
   d63d8:	738b      	strb	r3, [r1, #14]
   d63da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d63de:	42b2      	cmp	r2, r6
   d63e0:	dce5      	bgt.n	d63ae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d63e2:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d63e4:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d63e8:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d63ea:	f04f 0910 	mov.w	r9, #16
   d63ee:	e78e      	b.n	d630e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d63f0:	f1be 0f0a 	cmp.w	lr, #10
   d63f4:	d0db      	beq.n	d63ae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d63f6:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d63f8:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d63fc:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d63fe:	f04f 0910 	mov.w	r9, #16
   d6402:	e785      	b.n	d6310 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d6404:	31000101 	.word	0x31000101

000d6408 <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d6408:	b5f0      	push	{r4, r5, r6, r7, lr}
   d640a:	b08b      	sub	sp, #44	; 0x2c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d640c:	2300      	movs	r3, #0
   d640e:	f88d 3004 	strb.w	r3, [sp, #4]
   d6412:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6416:	7803      	ldrb	r3, [r0, #0]
   d6418:	0719      	lsls	r1, r3, #28

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d641a:	4604      	mov	r4, r0
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d641c:	d508      	bpl.n	d6430 <_ZN7FatFile6removeEv+0x28>
   d641e:	7883      	ldrb	r3, [r0, #2]
   d6420:	079a      	lsls	r2, r3, #30
   d6422:	d505      	bpl.n	d6430 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   d6424:	6a01      	ldr	r1, [r0, #32]
   d6426:	b129      	cbz	r1, d6434 <_ZN7FatFile6removeEv+0x2c>
   d6428:	68a0      	ldr	r0, [r4, #8]
   d642a:	f000 ff60 	bl	d72ee <_ZN9FatVolume9freeChainEm>
   d642e:	b908      	cbnz	r0, d6434 <_ZN7FatFile6removeEv+0x2c>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   d6430:	2000      	movs	r0, #0
   d6432:	e049      	b.n	d64c8 <_ZN7FatFile6removeEv+0xc0>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d6434:	2101      	movs	r1, #1
   d6436:	4620      	mov	r0, r4
   d6438:	f000 fabc 	bl	d69b4 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d643c:	4605      	mov	r5, r0
   d643e:	2800      	cmp	r0, #0
   d6440:	d0f6      	beq.n	d6430 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
   d6442:	f7ff fecf 	bl	d61e4 <_ZN7FatFile11lfnChecksumEPh>

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;
   d6446:	26e5      	movs	r6, #229	; 0xe5
   d6448:	702e      	strb	r6, [r5, #0]

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
   d644a:	2300      	movs	r3, #0
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
   d644c:	4607      	mov	r7, r0

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
   d644e:	7023      	strb	r3, [r4, #0]

  // Write entry to device.
  if (!m_vol->cacheSync()) {
   d6450:	68a0      	ldr	r0, [r4, #8]
   d6452:	f7ff feba 	bl	d61ca <_ZN9FatVolume9cacheSyncEv>
   d6456:	2800      	cmp	r0, #0
   d6458:	d0ea      	beq.n	d6430 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
   d645a:	78e3      	ldrb	r3, [r4, #3]
   d645c:	2b00      	cmp	r3, #0
   d645e:	d033      	beq.n	d64c8 <_ZN7FatFile6removeEv+0xc0>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
   d6460:	4621      	mov	r1, r4
   d6462:	a801      	add	r0, sp, #4
   d6464:	f7ff fecd 	bl	d6202 <_ZN7FatFile11openClusterEPS_>
   d6468:	2800      	cmp	r0, #0
   d646a:	d0e1      	beq.n	d6430 <_ZN7FatFile6removeEv+0x28>
   d646c:	2501      	movs	r5, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d646e:	78e3      	ldrb	r3, [r4, #3]
   d6470:	42ab      	cmp	r3, r5
   d6472:	d3dd      	bcc.n	d6430 <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   d6474:	88a1      	ldrh	r1, [r4, #4]
   d6476:	1b49      	subs	r1, r1, r5
   d6478:	0149      	lsls	r1, r1, #5
   d647a:	a801      	add	r0, sp, #4
   d647c:	f000 fbce 	bl	d6c1c <_ZN7FatFile7seekSetEm>
   d6480:	2800      	cmp	r0, #0
   d6482:	d0d5      	beq.n	d6430 <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   d6484:	2100      	movs	r1, #0
   d6486:	a801      	add	r0, sp, #4
   d6488:	f000 fbab 	bl	d6be2 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d648c:	2800      	cmp	r0, #0
   d648e:	d0cf      	beq.n	d6430 <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d6490:	7ac3      	ldrb	r3, [r0, #11]
   d6492:	2b0f      	cmp	r3, #15
   d6494:	d1cc      	bne.n	d6430 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   d6496:	7802      	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d6498:	f002 031f 	and.w	r3, r2, #31
   d649c:	429d      	cmp	r5, r3
   d649e:	d1c7      	bne.n	d6430 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   d64a0:	7b43      	ldrb	r3, [r0, #13]
   d64a2:	42bb      	cmp	r3, r7
   d64a4:	d1c4      	bne.n	d6430 <_ZN7FatFile6removeEv+0x28>
        chksum != ldir->chksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->ord & LDIR_ORD_LAST_LONG_ENTRY;
    ldir->ord = DIR_NAME_DELETED;
   d64a6:	7006      	strb	r6, [r0, #0]
    m_vol->cacheDirty();
   d64a8:	68a1      	ldr	r1, [r4, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d64aa:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   d64ae:	f043 0301 	orr.w	r3, r3, #1
   d64b2:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   d64b6:	0653      	lsls	r3, r2, #25
   d64b8:	d503      	bpl.n	d64c2 <_ZN7FatFile6removeEv+0xba>
      if (!m_vol->cacheSync()) {
   d64ba:	68a0      	ldr	r0, [r4, #8]
   d64bc:	f7ff fe85 	bl	d61ca <_ZN9FatVolume9cacheSyncEv>
   d64c0:	e002      	b.n	d64c8 <_ZN7FatFile6removeEv+0xc0>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d64c2:	3501      	adds	r5, #1
   d64c4:	b2ed      	uxtb	r5, r5
   d64c6:	e7d2      	b.n	d646e <_ZN7FatFile6removeEv+0x66>
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
}
   d64c8:	b00b      	add	sp, #44	; 0x2c
   d64ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d64cc <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d64cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d64d0:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d64d4:	4606      	mov	r6, r0
   d64d6:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d64d8:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d64da:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d64dc:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d64e0:	6869      	ldr	r1, [r5, #4]
   d64e2:	68aa      	ldr	r2, [r5, #8]
   d64e4:	1863      	adds	r3, r4, r1
   d64e6:	b29b      	uxth	r3, r3
   d64e8:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d64ea:	4291      	cmp	r1, r2
   d64ec:	d006      	beq.n	d64fc <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d64ee:	f812 0b01 	ldrb.w	r0, [r2], #1
   d64f2:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d64f6:	4043      	eors	r3, r0
   d64f8:	b29b      	uxth	r3, r3
   d64fa:	e7f6      	b.n	d64ea <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d64fc:	f1b9 0f03 	cmp.w	r9, #3
   d6500:	bf28      	it	cs
   d6502:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6506:	f109 0204 	add.w	r2, r9, #4
   d650a:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d650c:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6510:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6512:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6514:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6516:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6518:	bf94      	ite	ls
   d651a:	3130      	addls	r1, #48	; 0x30
   d651c:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d651e:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6520:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d6522:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6526:	d3f1      	bcc.n	d650c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d6528:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d652c:	2100      	movs	r1, #0
   d652e:	735f      	strb	r7, [r3, #13]
   d6530:	4630      	mov	r0, r6
   d6532:	f000 fb73 	bl	d6c1c <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d6536:	2101      	movs	r1, #1
   d6538:	4630      	mov	r0, r6
   d653a:	f000 fb52 	bl	d6be2 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d653e:	4601      	mov	r1, r0
   d6540:	b928      	cbnz	r0, d654e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d6542:	7870      	ldrb	r0, [r6, #1]
   d6544:	fab0 f080 	clz	r0, r0
   d6548:	0940      	lsrs	r0, r0, #5
   d654a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d654e:	7803      	ldrb	r3, [r0, #0]
   d6550:	b14b      	cbz	r3, d6566 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d6552:	7ac3      	ldrb	r3, [r0, #11]
   d6554:	071b      	lsls	r3, r3, #28
   d6556:	d4ee      	bmi.n	d6536 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d6558:	220b      	movs	r2, #11
   d655a:	4640      	mov	r0, r8
   d655c:	f004 fb8e 	bl	dac7c <memcmp>
   d6560:	2800      	cmp	r0, #0
   d6562:	d1e8      	bne.n	d6536 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d6564:	e002      	b.n	d656c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d6566:	2001      	movs	r0, #1
   d6568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d656c:	3401      	adds	r4, #1
   d656e:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d6570:	2c64      	cmp	r4, #100	; 0x64
   d6572:	d1b5      	bne.n	d64e0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d6574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d6578 <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d657c:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d657e:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6580:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6582:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6586:	9005      	str	r0, [sp, #20]
   d6588:	460e      	mov	r6, r1
   d658a:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d658c:	d101      	bne.n	d6592 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d658e:	2000      	movs	r0, #0
   d6590:	e1a0      	b.n	d68d4 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6592:	9b05      	ldr	r3, [sp, #20]
   d6594:	781b      	ldrb	r3, [r3, #0]
   d6596:	2b00      	cmp	r3, #0
   d6598:	d1f9      	bne.n	d658e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d659a:	6853      	ldr	r3, [r2, #4]
   d659c:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d659e:	7813      	ldrb	r3, [r2, #0]
   d65a0:	079b      	lsls	r3, r3, #30
   d65a2:	f000 818d 	beq.w	d68c0 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d65a6:	9b02      	ldr	r3, [sp, #8]
   d65a8:	270d      	movs	r7, #13
   d65aa:	330c      	adds	r3, #12
   d65ac:	fbb3 f7f7 	udiv	r7, r3, r7
   d65b0:	3701      	adds	r7, #1
   d65b2:	b2ff      	uxtb	r7, r7
   d65b4:	2100      	movs	r1, #0
   d65b6:	4630      	mov	r0, r6
   d65b8:	f000 fb30 	bl	d6c1c <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d65bc:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d65c0:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d65c4:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d65c8:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d65ca:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d65cc:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d65ce:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d65d2:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d65d4:	6972      	ldr	r2, [r6, #20]
   d65d6:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d65d8:	2101      	movs	r1, #1
   d65da:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d65dc:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d65e0:	f000 faff 	bl	d6be2 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d65e4:	9b07      	ldr	r3, [sp, #28]
   d65e6:	b920      	cbnz	r0, d65f2 <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d65e8:	7873      	ldrb	r3, [r6, #1]
   d65ea:	2b00      	cmp	r3, #0
   d65ec:	f000 8090 	beq.w	d6710 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d65f0:	e7cd      	b.n	d658e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d65f2:	7802      	ldrb	r2, [r0, #0]
   d65f4:	2ae5      	cmp	r2, #229	; 0xe5
   d65f6:	d000      	beq.n	d65fa <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d65f8:	b942      	cbnz	r2, d660c <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d65fa:	2c00      	cmp	r4, #0
   d65fc:	bf08      	it	eq
   d65fe:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d6600:	42bc      	cmp	r4, r7
        freeFound++;
   d6602:	bf3c      	itt	cc
   d6604:	3401      	addcc	r4, #1
   d6606:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d6608:	b922      	cbnz	r2, d6614 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d660a:	e081      	b.n	d6710 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d660c:	42bc      	cmp	r4, r7
   d660e:	bf38      	it	cc
   d6610:	2400      	movcc	r4, #0
   d6612:	e003      	b.n	d661c <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d6614:	2ae5      	cmp	r2, #229	; 0xe5
   d6616:	d101      	bne.n	d661c <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d6618:	2500      	movs	r5, #0
   d661a:	e7db      	b.n	d65d4 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d661c:	2a2e      	cmp	r2, #46	; 0x2e
   d661e:	d0fb      	beq.n	d6618 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6620:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d6622:	290f      	cmp	r1, #15
   d6624:	d152      	bne.n	d66cc <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d6626:	b93d      	cbnz	r5, d6638 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d6628:	0651      	lsls	r1, r2, #25
   d662a:	d5d3      	bpl.n	d65d4 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d662c:	7b43      	ldrb	r3, [r0, #13]
   d662e:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d6630:	f002 051f 	and.w	r5, r2, #31
   d6634:	462b      	mov	r3, r5
   d6636:	e007      	b.n	d6648 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d6638:	3b01      	subs	r3, #1
   d663a:	b2db      	uxtb	r3, r3
   d663c:	429a      	cmp	r2, r3
   d663e:	d1eb      	bne.n	d6618 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6640:	7b42      	ldrb	r2, [r0, #13]
   d6642:	9903      	ldr	r1, [sp, #12]
   d6644:	4291      	cmp	r1, r2
   d6646:	d1e7      	bne.n	d6618 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d6648:	1e5a      	subs	r2, r3, #1
   d664a:	f04f 0c0d 	mov.w	ip, #13
   d664e:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d6652:	9a02      	ldr	r2, [sp, #8]
   d6654:	4562      	cmp	r2, ip
   d6656:	d9df      	bls.n	d6618 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6658:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d665c:	f1be 0f04 	cmp.w	lr, #4
   d6660:	fa5f f28e 	uxtb.w	r2, lr
   d6664:	d804      	bhi.n	d6670 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d6666:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d666a:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d666e:	e00c      	b.n	d668a <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d6670:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6672:	bf95      	itete	ls
   d6674:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6678:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d667c:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6680:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6684:	bf94      	ite	ls
   d6686:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6688:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d668a:	9902      	ldr	r1, [sp, #8]
   d668c:	4561      	cmp	r1, ip
   d668e:	d103      	bne.n	d6698 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d6690:	2a00      	cmp	r2, #0
   d6692:	bf18      	it	ne
   d6694:	2500      	movne	r5, #0
   d6696:	e79d      	b.n	d65d4 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6698:	2aff      	cmp	r2, #255	; 0xff
   d669a:	d8bd      	bhi.n	d6618 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d669c:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d669e:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d66a2:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d66a4:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d66a8:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d66ac:	bf98      	it	ls
   d66ae:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d66b0:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d66b4:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d66b8:	bf98      	it	ls
   d66ba:	b2d2      	uxtbls	r2, r2
   d66bc:	f1bc 0f19 	cmp.w	ip, #25
   d66c0:	bf9c      	itt	ls
   d66c2:	3120      	addls	r1, #32
   d66c4:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d66c6:	4291      	cmp	r1, r2
   d66c8:	d1a6      	bne.n	d6618 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d66ca:	e0fb      	b.n	d68c4 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d66cc:	0709      	lsls	r1, r1, #28
   d66ce:	d4a3      	bmi.n	d6618 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d66d0:	b14d      	cbz	r5, d66e6 <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d66d2:	2b01      	cmp	r3, #1
   d66d4:	f47f af5b 	bne.w	d658e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d66d8:	f7ff fd84 	bl	d61e4 <_ZN7FatFile11lfnChecksumEPh>
   d66dc:	9b03      	ldr	r3, [sp, #12]
   d66de:	4283      	cmp	r3, r0
   d66e0:	f47f af55 	bne.w	d658e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d66e4:	e00f      	b.n	d6706 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d66e6:	220b      	movs	r2, #11
   d66e8:	9906      	ldr	r1, [sp, #24]
   d66ea:	9307      	str	r3, [sp, #28]
   d66ec:	f004 fac6 	bl	dac7c <memcmp>
   d66f0:	9b07      	ldr	r3, [sp, #28]
   d66f2:	2800      	cmp	r0, #0
   d66f4:	f47f af6e 	bne.w	d65d4 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d66f8:	f899 2000 	ldrb.w	r2, [r9]
   d66fc:	07d2      	lsls	r2, r2, #31
   d66fe:	d502      	bpl.n	d6706 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d6700:	2201      	movs	r2, #1
   d6702:	9204      	str	r2, [sp, #16]
   d6704:	e766      	b.n	d65d4 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d6706:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d670a:	f000 80d1 	beq.w	d68b0 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d670e:	e73e      	b.n	d658e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d6710:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d6714:	f43f af3b 	beq.w	d658e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d6718:	f00b 0303 	and.w	r3, fp, #3
   d671c:	3b01      	subs	r3, #1
   d671e:	2b01      	cmp	r3, #1
   d6720:	f63f af35 	bhi.w	d658e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d6724:	2c00      	cmp	r4, #0
   d6726:	bf08      	it	eq
   d6728:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d672a:	42bc      	cmp	r4, r7
   d672c:	d302      	bcc.n	d6734 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d672e:	9b04      	ldr	r3, [sp, #16]
   d6730:	b9cb      	cbnz	r3, d6766 <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d6732:	e01f      	b.n	d6774 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d6734:	2100      	movs	r1, #0
   d6736:	4630      	mov	r0, r6
   d6738:	f000 fa53 	bl	d6be2 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d673c:	b910      	cbnz	r0, d6744 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d673e:	7873      	ldrb	r3, [r6, #1]
   d6740:	b15b      	cbz	r3, d675a <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d6742:	e724      	b.n	d658e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d6744:	3401      	adds	r4, #1
   d6746:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d6748:	e7ef      	b.n	d672a <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d674a:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d674c:	791b      	ldrb	r3, [r3, #4]
   d674e:	2b01      	cmp	r3, #1
   d6750:	d8ed      	bhi.n	d672e <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d6752:	3410      	adds	r4, #16
   d6754:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d6756:	42a7      	cmp	r7, r4
   d6758:	d9e9      	bls.n	d672e <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d675a:	4630      	mov	r0, r6
   d675c:	f000 f8ea 	bl	d6934 <_ZN7FatFile13addDirClusterEv>
   d6760:	2800      	cmp	r0, #0
   d6762:	d1f2      	bne.n	d674a <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d6764:	e713      	b.n	d658e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d6766:	4649      	mov	r1, r9
   d6768:	4630      	mov	r0, r6
   d676a:	f7ff feaf 	bl	d64cc <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d676e:	2800      	cmp	r0, #0
   d6770:	f43f af0d 	beq.w	d658e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d6774:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d6778:	4630      	mov	r0, r6
   d677a:	f000 fa4f 	bl	d6c1c <_ZN7FatFile7seekSetEm>
   d677e:	2800      	cmp	r0, #0
   d6780:	f43f af05 	beq.w	d658e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d6784:	1e7d      	subs	r5, r7, #1
   d6786:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6788:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d678a:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d678e:	f04f 080f 	mov.w	r8, #15
   d6792:	e041      	b.n	d6818 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d6794:	2100      	movs	r1, #0
   d6796:	4630      	mov	r0, r6
   d6798:	f000 fa23 	bl	d6be2 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d679c:	4607      	mov	r7, r0
   d679e:	2800      	cmp	r0, #0
   d67a0:	f43f aef5 	beq.w	d658e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d67a4:	68b2      	ldr	r2, [r6, #8]
   d67a6:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d67aa:	42ac      	cmp	r4, r5
   d67ac:	f043 0301 	orr.w	r3, r3, #1
   d67b0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d67b4:	bf0c      	ite	eq
   d67b6:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d67ba:	4622      	movne	r2, r4
   d67bc:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d67be:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d67c2:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d67c6:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d67ca:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d67cc:	f7ff fd0a 	bl	d61e4 <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d67d0:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d67d2:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d67d4:	f887 a01a 	strb.w	sl, [r7, #26]
   d67d8:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d67dc:	f002 021f 	and.w	r2, r2, #31
   d67e0:	230d      	movs	r3, #13
   d67e2:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d67e4:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d67e8:	435a      	muls	r2, r3
   d67ea:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d67ec:	9902      	ldr	r1, [sp, #8]
   d67ee:	4291      	cmp	r1, r2
   d67f0:	d915      	bls.n	d681e <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d67f2:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d67f6:	2b04      	cmp	r3, #4
   d67f8:	fa5f fc83 	uxtb.w	ip, r3
   d67fc:	f103 0001 	add.w	r0, r3, #1
   d6800:	d813      	bhi.n	d682a <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d6802:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d6806:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d680a:	280d      	cmp	r0, #13
   d680c:	f102 0201 	add.w	r2, r2, #1
   d6810:	4603      	mov	r3, r0
   d6812:	d1eb      	bne.n	d67ec <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6814:	3c01      	subs	r4, #1
   d6816:	b2e4      	uxtb	r4, r4
   d6818:	2c00      	cmp	r4, #0
   d681a:	d1bb      	bne.n	d6794 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d681c:	e00e      	b.n	d683c <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d681e:	bf14      	ite	ne
   d6820:	f04f 31ff 	movne.w	r1, #4294967295
   d6824:	2100      	moveq	r1, #0
   d6826:	b289      	uxth	r1, r1
   d6828:	e7e5      	b.n	d67f6 <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d682a:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d682e:	bf94      	ite	ls
   d6830:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d6834:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d6838:	8099      	strh	r1, [r3, #4]
   d683a:	e7e6      	b.n	d680a <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d683c:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d683e:	4621      	mov	r1, r4
   d6840:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d6842:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d6846:	f000 f9cc 	bl	d6be2 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d684a:	4607      	mov	r7, r0
   d684c:	2800      	cmp	r0, #0
   d684e:	f43f ae9e 	beq.w	d658e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d6852:	2220      	movs	r2, #32
   d6854:	4621      	mov	r1, r4
   d6856:	f004 fa2b 	bl	dacb0 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d685a:	464b      	mov	r3, r9
   d685c:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d6860:	603a      	str	r2, [r7, #0]
   d6862:	685a      	ldr	r2, [r3, #4]
   d6864:	607a      	str	r2, [r7, #4]
   d6866:	891a      	ldrh	r2, [r3, #8]
   d6868:	813a      	strh	r2, [r7, #8]
   d686a:	7a9b      	ldrb	r3, [r3, #10]
   d686c:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d686e:	f899 3000 	ldrb.w	r3, [r9]
   d6872:	f003 0318 	and.w	r3, r3, #24
   d6876:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d6878:	4b18      	ldr	r3, [pc, #96]	; (d68dc <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d687a:	681b      	ldr	r3, [r3, #0]
   d687c:	b12b      	cbz	r3, d688a <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d687e:	f107 010e 	add.w	r1, r7, #14
   d6882:	f107 0010 	add.w	r0, r7, #16
   d6886:	4798      	blx	r3
   d6888:	e006      	b.n	d6898 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d688a:	2321      	movs	r3, #33	; 0x21
   d688c:	743b      	strb	r3, [r7, #16]
   d688e:	2328      	movs	r3, #40	; 0x28
   d6890:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d6892:	2308      	movs	r3, #8
   d6894:	73bc      	strb	r4, [r7, #14]
   d6896:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d6898:	8a3b      	ldrh	r3, [r7, #16]
   d689a:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d689c:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d689e:	89fb      	ldrh	r3, [r7, #14]
   d68a0:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d68a2:	68b2      	ldr	r2, [r6, #8]
   d68a4:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d68a8:	f043 0301 	orr.w	r3, r3, #1
   d68ac:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d68b0:	9500      	str	r5, [sp, #0]
   d68b2:	465b      	mov	r3, fp
   d68b4:	4652      	mov	r2, sl
   d68b6:	4631      	mov	r1, r6
   d68b8:	9805      	ldr	r0, [sp, #20]
   d68ba:	f000 f9f8 	bl	d6cae <_ZN7FatFile15openCachedEntryEPS_tih>
   d68be:	e009      	b.n	d68d4 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d68c0:	2701      	movs	r7, #1
   d68c2:	e677      	b.n	d65b4 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d68c4:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d68c8:	f1be 0f0d 	cmp.w	lr, #13
   d68cc:	f43f ae82 	beq.w	d65d4 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d68d0:	46d4      	mov	ip, sl
   d68d2:	e6c3      	b.n	d665c <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d68d4:	b009      	add	sp, #36	; 0x24
   d68d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d68da:	bf00      	nop
   d68dc:	2003e120 	.word	0x2003e120

000d68e0 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d68e0:	f001 bbf4 	b.w	d80cc <HAL_Pin_Map>

000d68e4 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d68e4:	f001 bbf2 	b.w	d80cc <HAL_Pin_Map>

000d68e8 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d68e8:	f001 bbf0 	b.w	d80cc <HAL_Pin_Map>

000d68ec <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   d68ec:	b510      	push	{r4, lr}
   d68ee:	460c      	mov	r4, r1
   d68f0:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   d68f2:	b909      	cbnz	r1, d68f8 <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   d68f4:	2000      	movs	r0, #0
   d68f6:	bd10      	pop	{r4, pc}
  dir_t* dir;
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
   d68f8:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   d68fc:	d004      	beq.n	d6908 <_ZN7FatFile6getSFNEPc+0x1c>
    name[0] = '/';
   d68fe:	232f      	movs	r3, #47	; 0x2f
   d6900:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   d6902:	2300      	movs	r3, #0
   d6904:	7063      	strb	r3, [r4, #1]
   d6906:	e006      	b.n	d6916 <_ZN7FatFile6getSFNEPc+0x2a>
    return true;
  }
  // cache entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   d6908:	f000 f854 	bl	d69b4 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d690c:	2800      	cmp	r0, #0
   d690e:	d0f1      	beq.n	d68f4 <_ZN7FatFile6getSFNEPc+0x8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  dirName(dir, name);
   d6910:	4621      	mov	r1, r4
   d6912:	f000 f85e 	bl	d69d2 <_ZN7FatFile7dirNameEPK14directoryEntryPc>
  return true;
   d6916:	2001      	movs	r0, #1

fail:
  return false;
}
   d6918:	bd10      	pop	{r4, pc}

000d691a <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d691a:	f001 bbd7 	b.w	d80cc <HAL_Pin_Map>

000d691e <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d691e:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d6920:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d6922:	f043 0304 	orr.w	r3, r3, #4
   d6926:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d6928:	f100 0210 	add.w	r2, r0, #16
   d692c:	6880      	ldr	r0, [r0, #8]
   d692e:	f000 bca3 	b.w	d7278 <_ZN9FatVolume15allocateClusterEmPm>
	...

000d6934 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d6934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d6938:	7803      	ldrb	r3, [r0, #0]
   d693a:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d693e:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d6940:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d6944:	b10b      	cbz	r3, d694a <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d6946:	2600      	movs	r6, #0
   d6948:	e02e      	b.n	d69a8 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d694a:	6942      	ldr	r2, [r0, #20]
   d694c:	4b18      	ldr	r3, [pc, #96]	; (d69b0 <_ZN7FatFile13addDirClusterEv+0x7c>)
   d694e:	429a      	cmp	r2, r3
   d6950:	d8f9      	bhi.n	d6946 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d6952:	f7ff ffe4 	bl	d691e <_ZN7FatFile10addClusterEv>
   d6956:	4606      	mov	r6, r0
   d6958:	2800      	cmp	r0, #0
   d695a:	d0f4      	beq.n	d6946 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d695c:	6921      	ldr	r1, [r4, #16]
   d695e:	68a0      	ldr	r0, [r4, #8]
   d6960:	f000 fc1f 	bl	d71a2 <_ZNK9FatVolume17clusterFirstBlockEm>
   d6964:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6966:	68a0      	ldr	r0, [r4, #8]
   d6968:	2205      	movs	r2, #5
   d696a:	4639      	mov	r1, r7
   d696c:	3024      	adds	r0, #36	; 0x24
   d696e:	f000 fbf4 	bl	d715a <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d6972:	4680      	mov	r8, r0
   d6974:	2800      	cmp	r0, #0
   d6976:	d0e6      	beq.n	d6946 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d6978:	4629      	mov	r1, r5
   d697a:	f44f 7200 	mov.w	r2, #512	; 0x200
   d697e:	f004 f997 	bl	dacb0 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d6982:	2501      	movs	r5, #1
   d6984:	68a3      	ldr	r3, [r4, #8]
   d6986:	791a      	ldrb	r2, [r3, #4]
   d6988:	42aa      	cmp	r2, r5
   d698a:	d909      	bls.n	d69a0 <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d698c:	4642      	mov	r2, r8
   d698e:	19e9      	adds	r1, r5, r7
   d6990:	6818      	ldr	r0, [r3, #0]
   d6992:	f000 ff5f 	bl	d7854 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d6996:	2800      	cmp	r0, #0
   d6998:	d0d5      	beq.n	d6946 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d699a:	3501      	adds	r5, #1
   d699c:	b2ed      	uxtb	r5, r5
   d699e:	e7f1      	b.n	d6984 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d69a0:	6963      	ldr	r3, [r4, #20]
   d69a2:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d69a6:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d69a8:	4630      	mov	r0, r6
   d69aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d69ae:	bf00      	nop
   d69b0:	001ffdff 	.word	0x001ffdff

000d69b4 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d69b4:	b510      	push	{r4, lr}
   d69b6:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d69b8:	6880      	ldr	r0, [r0, #8]
   d69ba:	460a      	mov	r2, r1
   d69bc:	3024      	adds	r0, #36	; 0x24
   d69be:	69a1      	ldr	r1, [r4, #24]
   d69c0:	f000 fbcb 	bl	d715a <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d69c4:	b120      	cbz	r0, d69d0 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d69c6:	88a3      	ldrh	r3, [r4, #4]
   d69c8:	f003 030f 	and.w	r3, r3, #15
   d69cc:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d69d0:	bd10      	pop	{r4, pc}

000d69d2 <_ZN7FatFile7dirNameEPK14directoryEntryPc>:

fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   d69d2:	b5f0      	push	{r4, r5, r6, r7, lr}
   d69d4:	2400      	movs	r4, #0
   d69d6:	1e45      	subs	r5, r0, #1
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
   d69d8:	2608      	movs	r6, #8
fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
   d69da:	4623      	mov	r3, r4
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
   d69dc:	272e      	movs	r7, #46	; 0x2e
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
   d69de:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d69e2:	2a20      	cmp	r2, #32
   d69e4:	d018      	beq.n	d6a18 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x46>
      continue;
    }
    if (i == 8) {
   d69e6:	2c08      	cmp	r4, #8
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
   d69e8:	bf02      	ittt	eq
   d69ea:	54cf      	strbeq	r7, [r1, r3]
   d69ec:	1c5a      	addeq	r2, r3, #1
   d69ee:	b2d3      	uxtbeq	r3, r2
    }
    char c = dir->name[i];
   d69f0:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   d69f2:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
   d69f6:	bf08      	it	eq
   d69f8:	2610      	moveq	r6, #16
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   d69fa:	f1be 0f19 	cmp.w	lr, #25
   d69fe:	d806      	bhi.n	d6a0e <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3c>
   d6a00:	f890 e00c 	ldrb.w	lr, [r0, #12]
   d6a04:	ea16 0f0e 	tst.w	r6, lr
      c += 'a' - 'A';
   d6a08:	bf1c      	itt	ne
   d6a0a:	3220      	addne	r2, #32
   d6a0c:	b2d2      	uxtbne	r2, r2
    }
    name[j++] = c;
   d6a0e:	f103 0e01 	add.w	lr, r3, #1
   d6a12:	54ca      	strb	r2, [r1, r3]
   d6a14:	fa5f f38e 	uxtb.w	r3, lr
   d6a18:	3401      	adds	r4, #1
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
   d6a1a:	2c0b      	cmp	r4, #11
   d6a1c:	d1df      	bne.n	d69de <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xc>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
   d6a1e:	2200      	movs	r2, #0
   d6a20:	54ca      	strb	r2, [r1, r3]
  return j;
}
   d6a22:	4618      	mov	r0, r3
   d6a24:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6a26 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d6a26:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d6a28:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d6a2a:	4605      	mov	r5, r0
   d6a2c:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d6a2e:	b984      	cbnz	r4, d6a52 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d6a30:	2224      	movs	r2, #36	; 0x24
   d6a32:	4621      	mov	r1, r4
   d6a34:	f004 f93c 	bl	dacb0 <memset>

  m_vol = vol;
   d6a38:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d6a3a:	79f3      	ldrb	r3, [r6, #7]
   d6a3c:	2b10      	cmp	r3, #16
   d6a3e:	d003      	beq.n	d6a48 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d6a40:	2b20      	cmp	r3, #32
   d6a42:	d106      	bne.n	d6a52 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d6a44:	2340      	movs	r3, #64	; 0x40
   d6a46:	e000      	b.n	d6a4a <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d6a48:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d6a4a:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d6a4c:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d6a4e:	70a8      	strb	r0, [r5, #2]
   d6a50:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d6a52:	2000      	movs	r0, #0
   d6a54:	bd70      	pop	{r4, r5, r6, pc}

000d6a56 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d6a56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6a5a:	7803      	ldrb	r3, [r0, #0]
   d6a5c:	4604      	mov	r4, r0
   d6a5e:	4689      	mov	r9, r1
   d6a60:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d6a62:	b14b      	cbz	r3, d6a78 <_ZN7FatFile4readEPvj+0x22>
   d6a64:	7882      	ldrb	r2, [r0, #2]
   d6a66:	07d1      	lsls	r1, r2, #31
   d6a68:	d506      	bpl.n	d6a78 <_ZN7FatFile4readEPvj+0x22>
   d6a6a:	e00c      	b.n	d6a86 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6a6c:	465a      	mov	r2, fp
   d6a6e:	6921      	ldr	r1, [r4, #16]
   d6a70:	f000 fb9d 	bl	d71ae <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d6a74:	2800      	cmp	r0, #0
   d6a76:	da3d      	bge.n	d6af4 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d6a78:	7863      	ldrb	r3, [r4, #1]
   d6a7a:	f043 0302 	orr.w	r3, r3, #2
   d6a7e:	7063      	strb	r3, [r4, #1]
  return -1;
   d6a80:	f04f 30ff 	mov.w	r0, #4294967295
   d6a84:	e097      	b.n	d6bb6 <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d6a86:	071a      	lsls	r2, r3, #28
   d6a88:	d503      	bpl.n	d6a92 <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d6a8a:	69e3      	ldr	r3, [r4, #28]
   d6a8c:	6962      	ldr	r2, [r4, #20]
   d6a8e:	1a9b      	subs	r3, r3, r2
   d6a90:	e007      	b.n	d6aa2 <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d6a92:	069a      	lsls	r2, r3, #26
   d6a94:	d508      	bpl.n	d6aa8 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d6a96:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d6a98:	891a      	ldrh	r2, [r3, #8]
   d6a9a:	6963      	ldr	r3, [r4, #20]
   d6a9c:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d6aa0:	b29b      	uxth	r3, r3
   d6aa2:	429d      	cmp	r5, r3
   d6aa4:	bf28      	it	cs
   d6aa6:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d6aa8:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d6aaa:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6aae:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d6ab2:	2e00      	cmp	r6, #0
   d6ab4:	d035      	beq.n	d6b22 <_ZN7FatFile4readEPvj+0xcc>
   d6ab6:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d6ab8:	6963      	ldr	r3, [r4, #20]
   d6aba:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d6abc:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d6ac0:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d6ac4:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d6ac8:	d002      	beq.n	d6ad0 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d6aca:	6a03      	ldr	r3, [r0, #32]
   d6acc:	4419      	add	r1, r3
   d6ace:	e01d      	b.n	d6b0c <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d6ad0:	f890 8005 	ldrb.w	r8, [r0, #5]
   d6ad4:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d6ad8:	f1ba 0f00 	cmp.w	sl, #0
   d6adc:	d110      	bne.n	d6b00 <_ZN7FatFile4readEPvj+0xaa>
   d6ade:	f1b8 0f00 	cmp.w	r8, #0
   d6ae2:	d10d      	bne.n	d6b00 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d6ae4:	2b00      	cmp	r3, #0
   d6ae6:	d1c1      	bne.n	d6a6c <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d6ae8:	0653      	lsls	r3, r2, #25
   d6aea:	bf4c      	ite	mi
   d6aec:	6a03      	ldrmi	r3, [r0, #32]
   d6aee:	6a23      	ldrpl	r3, [r4, #32]
   d6af0:	6123      	str	r3, [r4, #16]
   d6af2:	e005      	b.n	d6b00 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d6af4:	d104      	bne.n	d6b00 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d6af6:	7823      	ldrb	r3, [r4, #0]
   d6af8:	f013 0f70 	tst.w	r3, #112	; 0x70
   d6afc:	d111      	bne.n	d6b22 <_ZN7FatFile4readEPvj+0xcc>
   d6afe:	e7bb      	b.n	d6a78 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d6b00:	6921      	ldr	r1, [r4, #16]
   d6b02:	68a0      	ldr	r0, [r4, #8]
   d6b04:	f000 fb4d 	bl	d71a2 <_ZNK9FatVolume17clusterFirstBlockEm>
   d6b08:	eb08 0100 	add.w	r1, r8, r0
   d6b0c:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d6b0e:	f1ba 0f00 	cmp.w	sl, #0
   d6b12:	d135      	bne.n	d6b80 <_ZN7FatFile4readEPvj+0x12a>
   d6b14:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6b18:	d332      	bcc.n	d6b80 <_ZN7FatFile4readEPvj+0x12a>
   d6b1a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d6b1c:	4299      	cmp	r1, r3
   d6b1e:	d102      	bne.n	d6b26 <_ZN7FatFile4readEPvj+0xd0>
   d6b20:	e02e      	b.n	d6b80 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d6b22:	1ba8      	subs	r0, r5, r6
   d6b24:	e047      	b.n	d6bb6 <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d6b26:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d6b2a:	d31b      	bcc.n	d6b64 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d6b2c:	7822      	ldrb	r2, [r4, #0]
   d6b2e:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d6b30:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d6b34:	d406      	bmi.n	d6b44 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d6b36:	7902      	ldrb	r2, [r0, #4]
   d6b38:	ebc8 0202 	rsb	r2, r8, r2
   d6b3c:	b2d2      	uxtb	r2, r2
   d6b3e:	4592      	cmp	sl, r2
   d6b40:	bf28      	it	cs
   d6b42:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6b44:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d6b46:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6b4a:	d207      	bcs.n	d6b5c <_ZN7FatFile4readEPvj+0x106>
   d6b4c:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d6b4e:	4653      	mov	r3, sl
   d6b50:	464a      	mov	r2, r9
   d6b52:	6800      	ldr	r0, [r0, #0]
   d6b54:	f000 fe3c 	bl	d77d0 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d6b58:	b960      	cbnz	r0, d6b74 <_ZN7FatFile4readEPvj+0x11e>
   d6b5a:	e78d      	b.n	d6a78 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6b5c:	4453      	add	r3, sl
   d6b5e:	4299      	cmp	r1, r3
   d6b60:	d321      	bcc.n	d6ba6 <_ZN7FatFile4readEPvj+0x150>
   d6b62:	e7f3      	b.n	d6b4c <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d6b64:	464a      	mov	r2, r9
   d6b66:	6800      	ldr	r0, [r0, #0]
   d6b68:	f000 fdea 	bl	d7740 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d6b6c:	2800      	cmp	r0, #0
   d6b6e:	d083      	beq.n	d6a78 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d6b70:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d6b74:	6963      	ldr	r3, [r4, #20]
   d6b76:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d6b78:	44b9      	add	r9, r7
    m_curPosition += n;
   d6b7a:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d6b7c:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d6b7e:	e798      	b.n	d6ab2 <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6b80:	2200      	movs	r2, #0
   d6b82:	3024      	adds	r0, #36	; 0x24
   d6b84:	f000 fae9 	bl	d715a <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d6b88:	2800      	cmp	r0, #0
   d6b8a:	f43f af75 	beq.w	d6a78 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d6b8e:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d6b92:	42b7      	cmp	r7, r6
   d6b94:	bf28      	it	cs
   d6b96:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d6b98:	eb00 010a 	add.w	r1, r0, sl
   d6b9c:	463a      	mov	r2, r7
   d6b9e:	4648      	mov	r0, r9
   d6ba0:	f004 f87b 	bl	dac9a <memcpy>
   d6ba4:	e7e6      	b.n	d6b74 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d6ba6:	3024      	adds	r0, #36	; 0x24
   d6ba8:	9101      	str	r1, [sp, #4]
   d6baa:	f000 faaf 	bl	d710c <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d6bae:	9901      	ldr	r1, [sp, #4]
   d6bb0:	2800      	cmp	r0, #0
   d6bb2:	d1cb      	bne.n	d6b4c <_ZN7FatFile4readEPvj+0xf6>
   d6bb4:	e760      	b.n	d6a78 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d6bb6:	b003      	add	sp, #12
   d6bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6bbc <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d6bbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d6bbe:	2201      	movs	r2, #1
   d6bc0:	f10d 0107 	add.w	r1, sp, #7
   d6bc4:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d6bc6:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d6bc8:	6905      	ldr	r5, [r0, #16]
   d6bca:	f7ff ff44 	bl	d6a56 <_ZN7FatFile4readEPvj>
   d6bce:	2801      	cmp	r0, #1
   d6bd0:	bf05      	ittet	eq
   d6bd2:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d6bd6:	6166      	streq	r6, [r4, #20]
   d6bd8:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = pos->cluster;
   d6bdc:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d6bde:	b002      	add	sp, #8
   d6be0:	bd70      	pop	{r4, r5, r6, pc}

000d6be2 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d6be2:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d6be4:	6943      	ldr	r3, [r0, #20]
   d6be6:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d6bea:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d6bec:	b105      	cbz	r5, d6bf0 <_ZN7FatFile12readDirCacheEb+0xe>
   d6bee:	b969      	cbnz	r1, d6c0c <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d6bf0:	2201      	movs	r2, #1
   d6bf2:	f10d 0107 	add.w	r1, sp, #7
   d6bf6:	4620      	mov	r0, r4
   d6bf8:	f7ff ff2d 	bl	d6a56 <_ZN7FatFile4readEPvj>
   d6bfc:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d6bfe:	2801      	cmp	r0, #1
   d6c00:	d001      	beq.n	d6c06 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d6c02:	2000      	movs	r0, #0
   d6c04:	e008      	b.n	d6c18 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d6c06:	6963      	ldr	r3, [r4, #20]
   d6c08:	331f      	adds	r3, #31
   d6c0a:	e000      	b.n	d6c0e <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d6c0c:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d6c0e:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d6c10:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d6c12:	3030      	adds	r0, #48	; 0x30
   d6c14:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d6c18:	b003      	add	sp, #12
   d6c1a:	bd30      	pop	{r4, r5, pc}

000d6c1c <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d6c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6c20:	460e      	mov	r6, r1
   d6c22:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d6c24:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d6c26:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d6c28:	2900      	cmp	r1, #0
   d6c2a:	d039      	beq.n	d6ca0 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d6c2c:	6945      	ldr	r5, [r0, #20]
   d6c2e:	42b5      	cmp	r5, r6
   d6c30:	d03a      	beq.n	d6ca8 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d6c32:	b90e      	cbnz	r6, d6c38 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d6c34:	6106      	str	r6, [r0, #16]
    goto done;
   d6c36:	e031      	b.n	d6c9c <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d6c38:	070b      	lsls	r3, r1, #28
   d6c3a:	d503      	bpl.n	d6c44 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d6c3c:	69c3      	ldr	r3, [r0, #28]
   d6c3e:	429e      	cmp	r6, r3
   d6c40:	d82e      	bhi.n	d6ca0 <_ZN7FatFile7seekSetEm+0x84>
   d6c42:	e007      	b.n	d6c54 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d6c44:	0688      	lsls	r0, r1, #26
   d6c46:	d505      	bpl.n	d6c54 <_ZN7FatFile7seekSetEm+0x38>
   d6c48:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d6c4a:	891b      	ldrh	r3, [r3, #8]
   d6c4c:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d6c50:	d826      	bhi.n	d6ca0 <_ZN7FatFile7seekSetEm+0x84>
   d6c52:	e023      	b.n	d6c9c <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d6c54:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d6c58:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d6c5c:	1e6a      	subs	r2, r5, #1
   d6c5e:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d6c62:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d6c64:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d6c66:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d6c68:	429a      	cmp	r2, r3
   d6c6a:	d800      	bhi.n	d6c6e <_ZN7FatFile7seekSetEm+0x52>
   d6c6c:	b94d      	cbnz	r5, d6c82 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d6c6e:	064a      	lsls	r2, r1, #25
   d6c70:	bf4c      	ite	mi
   d6c72:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d6c76:	6a22      	ldrpl	r2, [r4, #32]
   d6c78:	6122      	str	r2, [r4, #16]
   d6c7a:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d6c7c:	f104 0810 	add.w	r8, r4, #16
   d6c80:	e00a      	b.n	d6c98 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d6c82:	1a9b      	subs	r3, r3, r2
   d6c84:	e7f9      	b.n	d6c7a <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d6c86:	4642      	mov	r2, r8
   d6c88:	6921      	ldr	r1, [r4, #16]
   d6c8a:	68a0      	ldr	r0, [r4, #8]
   d6c8c:	f000 fa8f 	bl	d71ae <_ZN9FatVolume6fatGetEmPm>
   d6c90:	2800      	cmp	r0, #0
   d6c92:	f105 35ff 	add.w	r5, r5, #4294967295
   d6c96:	dd03      	ble.n	d6ca0 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d6c98:	2d00      	cmp	r5, #0
   d6c9a:	d1f4      	bne.n	d6c86 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d6c9c:	6166      	str	r6, [r4, #20]
   d6c9e:	e003      	b.n	d6ca8 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d6ca0:	6127      	str	r7, [r4, #16]
  return false;
   d6ca2:	2000      	movs	r0, #0
   d6ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d6ca8:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d6caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6cae <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d6cae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6cb0:	460f      	mov	r7, r1
   d6cb2:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d6cb4:	2100      	movs	r1, #0
   d6cb6:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d6cb8:	4604      	mov	r4, r0
   d6cba:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d6cbc:	f003 fff8 	bl	dacb0 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d6cc0:	68b8      	ldr	r0, [r7, #8]
   d6cc2:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d6cc4:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d6cc8:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d6cca:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d6cce:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d6cd0:	6a3b      	ldr	r3, [r7, #32]
   d6cd2:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d6cd4:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d6cd6:	7acb      	ldrb	r3, [r1, #11]
   d6cd8:	071d      	lsls	r5, r3, #28
   d6cda:	d44c      	bmi.n	d6d76 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d6cdc:	1883      	adds	r3, r0, r2
   d6cde:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d6ce2:	f003 0317 	and.w	r3, r3, #23
   d6ce6:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d6ce8:	7ac9      	ldrb	r1, [r1, #11]
   d6cea:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d6cee:	bf04      	itt	eq
   d6cf0:	f043 0308 	orreq.w	r3, r3, #8
   d6cf4:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d6cf6:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d6cfa:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d6cfc:	f006 0303 	and.w	r3, r6, #3
   d6d00:	2b01      	cmp	r3, #1
   d6d02:	d009      	beq.n	d6d18 <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d6d04:	2b02      	cmp	r3, #2
   d6d06:	d005      	beq.n	d6d14 <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d6d08:	2b00      	cmp	r3, #0
   d6d0a:	d134      	bne.n	d6d76 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d6d0c:	0571      	lsls	r1, r6, #21
   d6d0e:	d432      	bmi.n	d6d76 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d6d10:	2301      	movs	r3, #1
   d6d12:	e002      	b.n	d6d1a <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d6d14:	2303      	movs	r3, #3
   d6d16:	e000      	b.n	d6d1a <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d6d18:	2302      	movs	r3, #2
   d6d1a:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d6d1c:	78a1      	ldrb	r1, [r4, #2]
   d6d1e:	078b      	lsls	r3, r1, #30
   d6d20:	d503      	bpl.n	d6d2a <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d6d22:	7823      	ldrb	r3, [r4, #0]
   d6d24:	f013 0f11 	tst.w	r3, #17
   d6d28:	d125      	bne.n	d6d76 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d6d2a:	b24b      	sxtb	r3, r1
   d6d2c:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d6d30:	f006 0108 	and.w	r1, r6, #8
   d6d34:	bf14      	ite	ne
   d6d36:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d6d3a:	2700      	moveq	r7, #0
   d6d3c:	4319      	orrs	r1, r3
   d6d3e:	4339      	orrs	r1, r7
   d6d40:	70a1      	strb	r1, [r4, #2]
   d6d42:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d6d44:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d6d46:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d6d48:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d6d4a:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d6d4e:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d6d52:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d6d56:	d504      	bpl.n	d6d62 <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d6d58:	b181      	cbz	r1, d6d7c <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d6d5a:	f000 fac8 	bl	d72ee <_ZN9FatVolume9freeChainEm>
   d6d5e:	b968      	cbnz	r0, d6d7c <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d6d60:	e009      	b.n	d6d76 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d6d62:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d6d64:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d6d66:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d6d68:	0473      	lsls	r3, r6, #17
   d6d6a:	d50c      	bpl.n	d6d86 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d6d6c:	69e1      	ldr	r1, [r4, #28]
   d6d6e:	4620      	mov	r0, r4
   d6d70:	f7ff ff54 	bl	d6c1c <_ZN7FatFile7seekSetEm>
   d6d74:	b938      	cbnz	r0, d6d86 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d6d76:	2000      	movs	r0, #0
   d6d78:	7020      	strb	r0, [r4, #0]
  return false;
   d6d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d6d7c:	78a3      	ldrb	r3, [r4, #2]
   d6d7e:	f043 0304 	orr.w	r3, r3, #4
   d6d82:	70a3      	strb	r3, [r4, #2]
   d6d84:	e7f0      	b.n	d6d68 <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d6d86:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d6d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6d8a <_ZN7FatFile8openNextEPS_i>:
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   d6d8a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   d6d8e:	7803      	ldrb	r3, [r0, #0]
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   d6d90:	4606      	mov	r6, r0
   d6d92:	460d      	mov	r5, r1
   d6d94:	4617      	mov	r7, r2
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   d6d96:	bb53      	cbnz	r3, d6dee <_ZN7FatFile8openNextEPS_i+0x64>
   d6d98:	780b      	ldrb	r3, [r1, #0]
   d6d9a:	f013 0f70 	tst.w	r3, #112	; 0x70
   d6d9e:	d026      	beq.n	d6dee <_ZN7FatFile8openNextEPS_i+0x64>
   d6da0:	694c      	ldr	r4, [r1, #20]
   d6da2:	f014 041f 	ands.w	r4, r4, #31
   d6da6:	d122      	bne.n	d6dee <_ZN7FatFile8openNextEPS_i+0x64>
   d6da8:	46a0      	mov	r8, r4
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    dir_t* dir = dirFile->readDirCache();
   d6daa:	2100      	movs	r1, #0
   d6dac:	4628      	mov	r0, r5
   d6dae:	f8d5 9014 	ldr.w	r9, [r5, #20]
   d6db2:	f7ff ff16 	bl	d6be2 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d6db6:	b1d0      	cbz	r0, d6dee <_ZN7FatFile8openNextEPS_i+0x64>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
   d6db8:	7803      	ldrb	r3, [r0, #0]
   d6dba:	b1c3      	cbz	r3, d6dee <_ZN7FatFile8openNextEPS_i+0x64>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   d6dbc:	2b2e      	cmp	r3, #46	; 0x2e
   d6dbe:	d101      	bne.n	d6dc4 <_ZN7FatFile8openNextEPS_i+0x3a>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
        lfnOrd = ldir->ord & 0X1F;
        chksum = ldir->chksum;
      }
    } else {
      lfnOrd = 0;
   d6dc0:	2400      	movs	r4, #0
   d6dc2:	e7f2      	b.n	d6daa <_ZN7FatFile8openNextEPS_i+0x20>
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   d6dc4:	2be5      	cmp	r3, #229	; 0xe5
   d6dc6:	d0fb      	beq.n	d6dc0 <_ZN7FatFile8openNextEPS_i+0x36>
   d6dc8:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d6dca:	f011 0f08 	tst.w	r1, #8
   d6dce:	d105      	bne.n	d6ddc <_ZN7FatFile8openNextEPS_i+0x52>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   d6dd0:	b17c      	cbz	r4, d6df2 <_ZN7FatFile8openNextEPS_i+0x68>
   d6dd2:	f7ff fa07 	bl	d61e4 <_ZN7FatFile11lfnChecksumEPh>
   d6dd6:	4580      	cmp	r8, r0
   d6dd8:	d109      	bne.n	d6dee <_ZN7FatFile8openNextEPS_i+0x64>
   d6dda:	e00a      	b.n	d6df2 <_ZN7FatFile8openNextEPS_i+0x68>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d6ddc:	290f      	cmp	r1, #15
   d6dde:	d1ef      	bne.n	d6dc0 <_ZN7FatFile8openNextEPS_i+0x36>
      ldir = reinterpret_cast<ldir_t*>(dir);
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   d6de0:	0659      	lsls	r1, r3, #25
   d6de2:	d5e2      	bpl.n	d6daa <_ZN7FatFile8openNextEPS_i+0x20>
        lfnOrd = ldir->ord & 0X1F;
   d6de4:	f003 041f 	and.w	r4, r3, #31
        chksum = ldir->chksum;
   d6de8:	f890 800d 	ldrb.w	r8, [r0, #13]
   d6dec:	e7dd      	b.n	d6daa <_ZN7FatFile8openNextEPS_i+0x20>
      lfnOrd = 0;
    }
  }

fail:
  return false;
   d6dee:	2000      	movs	r0, #0
   d6df0:	e007      	b.n	d6e02 <_ZN7FatFile8openNextEPS_i+0x78>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   d6df2:	9400      	str	r4, [sp, #0]
   d6df4:	463b      	mov	r3, r7
   d6df6:	f3c9 124f 	ubfx	r2, r9, #5, #16
   d6dfa:	4629      	mov	r1, r5
   d6dfc:	4630      	mov	r0, r6
   d6dfe:	f7ff ff56 	bl	d6cae <_ZN7FatFile15openCachedEntryEPS_tih>
    }
  }

fail:
  return false;
}
   d6e02:	b003      	add	sp, #12
   d6e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6e08 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d6e08:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d6e0a:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d6e0c:	4604      	mov	r4, r0
  if (!isOpen()) {
   d6e0e:	b90b      	cbnz	r3, d6e14 <_ZN7FatFile4syncEv+0xc>
    return true;
   d6e10:	2001      	movs	r0, #1
   d6e12:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d6e14:	7883      	ldrb	r3, [r0, #2]
   d6e16:	075a      	lsls	r2, r3, #29
   d6e18:	d523      	bpl.n	d6e62 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d6e1a:	2101      	movs	r1, #1
   d6e1c:	f7ff fdca 	bl	d69b4 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d6e20:	4605      	mov	r5, r0
   d6e22:	b928      	cbnz	r0, d6e30 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d6e24:	7863      	ldrb	r3, [r4, #1]
   d6e26:	f043 0301 	orr.w	r3, r3, #1
   d6e2a:	7063      	strb	r3, [r4, #1]
  return false;
   d6e2c:	2000      	movs	r0, #0
   d6e2e:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d6e30:	7803      	ldrb	r3, [r0, #0]
   d6e32:	2be5      	cmp	r3, #229	; 0xe5
   d6e34:	d0f6      	beq.n	d6e24 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d6e36:	7823      	ldrb	r3, [r4, #0]
   d6e38:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d6e3a:	bf44      	itt	mi
   d6e3c:	69e3      	ldrmi	r3, [r4, #28]
   d6e3e:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d6e40:	8c23      	ldrh	r3, [r4, #32]
   d6e42:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d6e44:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d6e46:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d6e48:	4b09      	ldr	r3, [pc, #36]	; (d6e70 <_ZN7FatFile4syncEv+0x68>)
   d6e4a:	681b      	ldr	r3, [r3, #0]
   d6e4c:	b12b      	cbz	r3, d6e5a <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d6e4e:	f100 0116 	add.w	r1, r0, #22
   d6e52:	3018      	adds	r0, #24
   d6e54:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d6e56:	8b2b      	ldrh	r3, [r5, #24]
   d6e58:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d6e5a:	78a3      	ldrb	r3, [r4, #2]
   d6e5c:	f023 0304 	bic.w	r3, r3, #4
   d6e60:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d6e62:	68a0      	ldr	r0, [r4, #8]
   d6e64:	f7ff f9b1 	bl	d61ca <_ZN9FatVolume9cacheSyncEv>
   d6e68:	2800      	cmp	r0, #0
   d6e6a:	d0db      	beq.n	d6e24 <_ZN7FatFile4syncEv+0x1c>
   d6e6c:	e7d0      	b.n	d6e10 <_ZN7FatFile4syncEv+0x8>
   d6e6e:	bf00      	nop
   d6e70:	2003e120 	.word	0x2003e120

000d6e74 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d6e74:	b510      	push	{r4, lr}
   d6e76:	4604      	mov	r4, r0
  bool rtn = sync();
   d6e78:	f7ff ffc6 	bl	d6e08 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d6e7c:	2300      	movs	r3, #0
   d6e7e:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d6e80:	bd10      	pop	{r4, pc}

000d6e82 <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d6e82:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6e84:	b093      	sub	sp, #76	; 0x4c
   d6e86:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d6e88:	2300      	movs	r3, #0
   d6e8a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d6e8e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d6e92:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d6e94:	9201      	str	r2, [sp, #4]
   d6e96:	4606      	mov	r6, r0
   d6e98:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d6e9a:	b10b      	cbz	r3, d6ea0 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d6e9c:	2000      	movs	r0, #0
   d6e9e:	e03d      	b.n	d6f1c <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d6ea0:	780b      	ldrb	r3, [r1, #0]
   d6ea2:	f013 0f70 	tst.w	r3, #112	; 0x70
   d6ea6:	d0f9      	beq.n	d6e9c <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d6ea8:	7813      	ldrb	r3, [r2, #0]
   d6eaa:	2b2f      	cmp	r3, #47	; 0x2f
   d6eac:	d112      	bne.n	d6ed4 <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d6eae:	9b01      	ldr	r3, [sp, #4]
   d6eb0:	781a      	ldrb	r2, [r3, #0]
   d6eb2:	2a2f      	cmp	r2, #47	; 0x2f
   d6eb4:	d102      	bne.n	d6ebc <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d6eb6:	3301      	adds	r3, #1
   d6eb8:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d6eba:	e7f8      	b.n	d6eae <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d6ebc:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d6ebe:	b91a      	cbnz	r2, d6ec8 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d6ec0:	4630      	mov	r0, r6
   d6ec2:	f7ff fdb0 	bl	d6a26 <_ZN7FatFile8openRootEP9FatVolume>
   d6ec6:	e029      	b.n	d6f1c <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d6ec8:	a809      	add	r0, sp, #36	; 0x24
   d6eca:	f7ff fdac 	bl	d6a26 <_ZN7FatFile8openRootEP9FatVolume>
   d6ece:	2800      	cmp	r0, #0
   d6ed0:	d0e4      	beq.n	d6e9c <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d6ed2:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d6ed4:	aa01      	add	r2, sp, #4
   d6ed6:	a903      	add	r1, sp, #12
   d6ed8:	9801      	ldr	r0, [sp, #4]
   d6eda:	f7ff f9a9 	bl	d6230 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d6ede:	2800      	cmp	r0, #0
   d6ee0:	d0dc      	beq.n	d6e9c <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d6ee2:	9b01      	ldr	r3, [sp, #4]
   d6ee4:	781b      	ldrb	r3, [r3, #0]
   d6ee6:	b19b      	cbz	r3, d6f10 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d6ee8:	2300      	movs	r3, #0
   d6eea:	aa03      	add	r2, sp, #12
   d6eec:	4621      	mov	r1, r4
   d6eee:	4630      	mov	r0, r6
   d6ef0:	f7ff fb42 	bl	d6578 <_ZN7FatFile4openEPS_P7fname_ti>
   d6ef4:	2800      	cmp	r0, #0
   d6ef6:	d0d1      	beq.n	d6e9c <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d6ef8:	4635      	mov	r5, r6
   d6efa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6efc:	ac09      	add	r4, sp, #36	; 0x24
   d6efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6f04:	682b      	ldr	r3, [r5, #0]
   d6f06:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d6f08:	4630      	mov	r0, r6
   d6f0a:	f7ff ffb3 	bl	d6e74 <_ZN7FatFile5closeEv>
   d6f0e:	e7e0      	b.n	d6ed2 <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d6f10:	463b      	mov	r3, r7
   d6f12:	aa03      	add	r2, sp, #12
   d6f14:	4621      	mov	r1, r4
   d6f16:	4630      	mov	r0, r6
   d6f18:	f7ff fb2e 	bl	d6578 <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d6f1c:	b013      	add	sp, #76	; 0x4c
   d6f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6f20 <_ZN7FatFile6removeEPS_PKc>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove(FatFile* dirFile, const char* path) {
   d6f20:	b500      	push	{lr}
   d6f22:	b08b      	sub	sp, #44	; 0x2c
   d6f24:	2300      	movs	r3, #0
   d6f26:	f88d 3004 	strb.w	r3, [sp, #4]
   d6f2a:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile file;
  if (!file.open(dirFile, path, O_WRONLY)) {
   d6f2e:	460a      	mov	r2, r1
   d6f30:	2301      	movs	r3, #1
   d6f32:	4601      	mov	r1, r0
   d6f34:	a801      	add	r0, sp, #4
   d6f36:	f7ff ffa4 	bl	d6e82 <_ZN7FatFile4openEPS_PKci>
   d6f3a:	b110      	cbz	r0, d6f42 <_ZN7FatFile6removeEPS_PKc+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return file.remove();
   d6f3c:	a801      	add	r0, sp, #4
   d6f3e:	f7ff fa63 	bl	d6408 <_ZN7FatFile6removeEv>

fail:
  return false;
}
   d6f42:	b00b      	add	sp, #44	; 0x2c
   d6f44:	f85d fb04 	ldr.w	pc, [sp], #4

000d6f48 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d6f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6f4c:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d6f4e:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6f50:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d6f52:	4604      	mov	r4, r0
   d6f54:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6f56:	d508      	bpl.n	d6f6a <_ZN7FatFile5writeEPKvj+0x22>
   d6f58:	7883      	ldrb	r3, [r0, #2]
   d6f5a:	079a      	lsls	r2, r3, #30
   d6f5c:	d505      	bpl.n	d6f6a <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d6f5e:	071b      	lsls	r3, r3, #28
   d6f60:	d50b      	bpl.n	d6f7a <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d6f62:	69e1      	ldr	r1, [r4, #28]
   d6f64:	f7ff fe5a 	bl	d6c1c <_ZN7FatFile7seekSetEm>
   d6f68:	b938      	cbnz	r0, d6f7a <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d6f6a:	7863      	ldrb	r3, [r4, #1]
   d6f6c:	f043 0301 	orr.w	r3, r3, #1
   d6f70:	7063      	strb	r3, [r4, #1]
  return -1;
   d6f72:	f04f 30ff 	mov.w	r0, #4294967295
   d6f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d6f7a:	6963      	ldr	r3, [r4, #20]
   d6f7c:	43db      	mvns	r3, r3
   d6f7e:	4598      	cmp	r8, r3
   d6f80:	d8f3      	bhi.n	d6f6a <_ZN7FatFile5writeEPKvj+0x22>
   d6f82:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d6f84:	f04f 0a00 	mov.w	sl, #0
   d6f88:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d6f8a:	2e00      	cmp	r6, #0
   d6f8c:	f000 8081 	beq.w	d7092 <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d6f90:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d6f92:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d6f94:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d6f98:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d6f9c:	d11c      	bne.n	d6fd8 <_ZN7FatFile5writeEPKvj+0x90>
   d6f9e:	b9df      	cbnz	r7, d6fd8 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d6fa0:	6921      	ldr	r1, [r4, #16]
   d6fa2:	b171      	cbz	r1, d6fc2 <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6fa4:	f104 0210 	add.w	r2, r4, #16
   d6fa8:	f000 f901 	bl	d71ae <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d6fac:	2800      	cmp	r0, #0
   d6fae:	dbdc      	blt.n	d6f6a <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d6fb0:	f040 808e 	bne.w	d70d0 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d6fb4:	4620      	mov	r0, r4
   d6fb6:	f7ff fcb2 	bl	d691e <_ZN7FatFile10addClusterEv>
   d6fba:	2800      	cmp	r0, #0
   d6fbc:	f040 8088 	bne.w	d70d0 <_ZN7FatFile5writeEPKvj+0x188>
   d6fc0:	e7d3      	b.n	d6f6a <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d6fc2:	6a23      	ldr	r3, [r4, #32]
   d6fc4:	b93b      	cbnz	r3, d6fd6 <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d6fc6:	4620      	mov	r0, r4
   d6fc8:	f7ff fca9 	bl	d691e <_ZN7FatFile10addClusterEv>
   d6fcc:	2800      	cmp	r0, #0
   d6fce:	d0cc      	beq.n	d6f6a <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d6fd0:	6923      	ldr	r3, [r4, #16]
   d6fd2:	6223      	str	r3, [r4, #32]
   d6fd4:	e000      	b.n	d6fd8 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d6fd6:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d6fd8:	6921      	ldr	r1, [r4, #16]
   d6fda:	68a0      	ldr	r0, [r4, #8]
   d6fdc:	f000 f8e1 	bl	d71a2 <_ZNK9FatVolume17clusterFirstBlockEm>
   d6fe0:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d6fe2:	b917      	cbnz	r7, d6fea <_ZN7FatFile5writeEPKvj+0xa2>
   d6fe4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6fe8:	d221      	bcs.n	d702e <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d6fea:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d6fee:	42b5      	cmp	r5, r6
   d6ff0:	bf28      	it	cs
   d6ff2:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d6ff4:	b937      	cbnz	r7, d7004 <_ZN7FatFile5writeEPKvj+0xbc>
   d6ff6:	6963      	ldr	r3, [r4, #20]
   d6ff8:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d6ffa:	4293      	cmp	r3, r2
   d6ffc:	bf34      	ite	cc
   d6ffe:	2201      	movcc	r2, #1
   d7000:	2205      	movcs	r2, #5
   d7002:	e000      	b.n	d7006 <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d7004:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d7006:	68a0      	ldr	r0, [r4, #8]
   d7008:	3024      	adds	r0, #36	; 0x24
   d700a:	f000 f8a6 	bl	d715a <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d700e:	2800      	cmp	r0, #0
   d7010:	d0ab      	beq.n	d6f6a <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d7012:	4438      	add	r0, r7
   d7014:	462a      	mov	r2, r5
   d7016:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d7018:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d701a:	f003 fe3e 	bl	dac9a <memcpy>
      if (512 == (n + blockOffset)) {
   d701e:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d7022:	d130      	bne.n	d7086 <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d7024:	68a0      	ldr	r0, [r4, #8]
   d7026:	3024      	adds	r0, #36	; 0x24
   d7028:	f000 f870 	bl	d710c <_ZN8FatCache4syncEv>
   d702c:	e017      	b.n	d705e <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d702e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d7032:	68a0      	ldr	r0, [r4, #8]
   d7034:	d315      	bcc.n	d7062 <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d7036:	7902      	ldrb	r2, [r0, #4]
   d7038:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d703a:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d703c:	b2d2      	uxtb	r2, r2
   d703e:	4293      	cmp	r3, r2
   d7040:	bf28      	it	cs
   d7042:	4613      	movcs	r3, r2
   d7044:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d7046:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d7048:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d704c:	d302      	bcc.n	d7054 <_ZN7FatFile5writeEPKvj+0x10c>
   d704e:	441a      	add	r2, r3
   d7050:	4291      	cmp	r1, r2
   d7052:	d337      	bcc.n	d70c4 <_ZN7FatFile5writeEPKvj+0x17c>
   d7054:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d7056:	464a      	mov	r2, r9
   d7058:	6838      	ldr	r0, [r7, #0]
   d705a:	f000 fc6d 	bl	d7938 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d705e:	b990      	cbnz	r0, d7086 <_ZN7FatFile5writeEPKvj+0x13e>
   d7060:	e783      	b.n	d6f6a <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d7062:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d7064:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d7066:	bf02      	ittt	eq
   d7068:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d706c:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d7070:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d7072:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d7074:	464a      	mov	r2, r9
   d7076:	6818      	ldr	r0, [r3, #0]
   d7078:	f000 fbec 	bl	d7854 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d707c:	2800      	cmp	r0, #0
   d707e:	f43f af74 	beq.w	d6f6a <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d7082:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d7086:	6963      	ldr	r3, [r4, #20]
   d7088:	442b      	add	r3, r5
   d708a:	6163      	str	r3, [r4, #20]
    src += n;
   d708c:	44a9      	add	r9, r5
    nToWrite -= n;
   d708e:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d7090:	e77a      	b.n	d6f88 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d7092:	69e2      	ldr	r2, [r4, #28]
   d7094:	4293      	cmp	r3, r2
   d7096:	d901      	bls.n	d709c <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d7098:	61e3      	str	r3, [r4, #28]
   d709a:	e002      	b.n	d70a2 <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d709c:	4b0f      	ldr	r3, [pc, #60]	; (d70dc <_ZN7FatFile5writeEPKvj+0x194>)
   d709e:	681b      	ldr	r3, [r3, #0]
   d70a0:	b11b      	cbz	r3, d70aa <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d70a2:	78a3      	ldrb	r3, [r4, #2]
   d70a4:	f043 0304 	orr.w	r3, r3, #4
   d70a8:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d70aa:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d70ae:	2b00      	cmp	r3, #0
   d70b0:	db02      	blt.n	d70b8 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d70b2:	4640      	mov	r0, r8
   d70b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d70b8:	4620      	mov	r0, r4
   d70ba:	f7ff fea5 	bl	d6e08 <_ZN7FatFile4syncEv>
   d70be:	2800      	cmp	r0, #0
   d70c0:	d1f7      	bne.n	d70b2 <_ZN7FatFile5writeEPKvj+0x16a>
   d70c2:	e752      	b.n	d6f6a <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d70c4:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d70c8:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d70cc:	62c2      	str	r2, [r0, #44]	; 0x2c
   d70ce:	e7c1      	b.n	d7054 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d70d0:	6921      	ldr	r1, [r4, #16]
   d70d2:	68a0      	ldr	r0, [r4, #8]
   d70d4:	f000 f865 	bl	d71a2 <_ZNK9FatVolume17clusterFirstBlockEm>
   d70d8:	4601      	mov	r1, r0
   d70da:	e783      	b.n	d6fe4 <_ZN7FatFile5writeEPKvj+0x9c>
   d70dc:	2003e120 	.word	0x2003e120

000d70e0 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d70e0:	f000 bff4 	b.w	d80cc <HAL_Pin_Map>

000d70e4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d70e4:	b570      	push	{r4, r5, r6, lr}
   d70e6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d70e8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d70ea:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d70ec:	b149      	cbz	r1, d7102 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d70ee:	f003 fe25 	bl	dad3c <strlen>
   d70f2:	682b      	ldr	r3, [r5, #0]
   d70f4:	4602      	mov	r2, r0
   d70f6:	4621      	mov	r1, r4
   d70f8:	4628      	mov	r0, r5
   d70fa:	68db      	ldr	r3, [r3, #12]
    }
   d70fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7100:	4718      	bx	r3
    }
   d7102:	bd70      	pop	{r4, r5, r6, pc}

000d7104 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d7104:	f000 bfe2 	b.w	d80cc <HAL_Pin_Map>

000d7108 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d7108:	f000 bfe0 	b.w	d80cc <HAL_Pin_Map>

000d710c <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d710c:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d710e:	7803      	ldrb	r3, [r0, #0]
   d7110:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d7112:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d7114:	d51e      	bpl.n	d7154 <_ZN8FatCache4syncEv+0x48>
   d7116:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d7118:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d711a:	f100 060c 	add.w	r6, r0, #12
   d711e:	4632      	mov	r2, r6
   d7120:	6818      	ldr	r0, [r3, #0]
   d7122:	f000 fb97 	bl	d7854 <_ZN9SdSpiCard10writeBlockEmPKh>
   d7126:	4605      	mov	r5, r0
   d7128:	b908      	cbnz	r0, d712e <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d712a:	2500      	movs	r5, #0
   d712c:	e013      	b.n	d7156 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d712e:	7823      	ldrb	r3, [r4, #0]
   d7130:	079b      	lsls	r3, r3, #30
   d7132:	d404      	bmi.n	d713e <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d7134:	7823      	ldrb	r3, [r4, #0]
   d7136:	f023 0301 	bic.w	r3, r3, #1
   d713a:	7023      	strb	r3, [r4, #0]
   d713c:	e00b      	b.n	d7156 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d713e:	6863      	ldr	r3, [r4, #4]
   d7140:	68a0      	ldr	r0, [r4, #8]
   d7142:	6919      	ldr	r1, [r3, #16]
   d7144:	4632      	mov	r2, r6
   d7146:	4401      	add	r1, r0
   d7148:	6818      	ldr	r0, [r3, #0]
   d714a:	f000 fb83 	bl	d7854 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d714e:	2800      	cmp	r0, #0
   d7150:	d1f0      	bne.n	d7134 <_ZN8FatCache4syncEv+0x28>
   d7152:	e7ea      	b.n	d712a <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d7154:	2501      	movs	r5, #1

fail:
  return false;
}
   d7156:	4628      	mov	r0, r5
   d7158:	bd70      	pop	{r4, r5, r6, pc}

000d715a <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d715a:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d715c:	6883      	ldr	r3, [r0, #8]
   d715e:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d7160:	4604      	mov	r4, r0
   d7162:	460e      	mov	r6, r1
   d7164:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d7166:	d014      	beq.n	d7192 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d7168:	f7ff ffd0 	bl	d710c <_ZN8FatCache4syncEv>
   d716c:	b908      	cbnz	r0, d7172 <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d716e:	2000      	movs	r0, #0
   d7170:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d7172:	076b      	lsls	r3, r5, #29
   d7174:	d503      	bpl.n	d717e <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d7176:	2300      	movs	r3, #0
   d7178:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d717a:	60a6      	str	r6, [r4, #8]
   d717c:	e009      	b.n	d7192 <_ZN8FatCache4readEmh+0x38>
   d717e:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d7180:	f104 020c 	add.w	r2, r4, #12
   d7184:	4631      	mov	r1, r6
   d7186:	6818      	ldr	r0, [r3, #0]
   d7188:	f000 fada 	bl	d7740 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d718c:	2800      	cmp	r0, #0
   d718e:	d1f2      	bne.n	d7176 <_ZN8FatCache4readEmh+0x1c>
   d7190:	e7ed      	b.n	d716e <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d7192:	7823      	ldrb	r3, [r4, #0]
   d7194:	4620      	mov	r0, r4
   d7196:	f005 0503 	and.w	r5, r5, #3
   d719a:	431d      	orrs	r5, r3
   d719c:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d71a0:	bd70      	pop	{r4, r5, r6, pc}

000d71a2 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d71a2:	7983      	ldrb	r3, [r0, #6]
   d71a4:	6940      	ldr	r0, [r0, #20]
   d71a6:	3902      	subs	r1, #2
   d71a8:	4099      	lsls	r1, r3
}
   d71aa:	4408      	add	r0, r1
   d71ac:	4770      	bx	lr

000d71ae <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d71ae:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d71b0:	b570      	push	{r4, r5, r6, lr}
   d71b2:	4605      	mov	r5, r0
   d71b4:	460c      	mov	r4, r1
   d71b6:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d71b8:	d802      	bhi.n	d71c0 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d71ba:	f04f 30ff 	mov.w	r0, #4294967295
   d71be:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d71c0:	69c3      	ldr	r3, [r0, #28]
   d71c2:	4299      	cmp	r1, r3
   d71c4:	d8f9      	bhi.n	d71ba <_ZN9FatVolume6fatGetEmPm+0xc>
   d71c6:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d71c8:	2b20      	cmp	r3, #32
   d71ca:	d110      	bne.n	d71ee <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d71cc:	6981      	ldr	r1, [r0, #24]
   d71ce:	2202      	movs	r2, #2
   d71d0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d71d4:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d71d8:	f7ff ffbf 	bl	d715a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d71dc:	2800      	cmp	r0, #0
   d71de:	d0ec      	beq.n	d71ba <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d71e0:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d71e4:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d71e8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d71ec:	e00f      	b.n	d720e <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d71ee:	2b10      	cmp	r3, #16
   d71f0:	d1e3      	bne.n	d71ba <_ZN9FatVolume6fatGetEmPm+0xc>
   d71f2:	6983      	ldr	r3, [r0, #24]
   d71f4:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d71f8:	2202      	movs	r2, #2
   d71fa:	4419      	add	r1, r3
   d71fc:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d7200:	f7ff ffab 	bl	d715a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d7204:	2800      	cmp	r0, #0
   d7206:	d0d8      	beq.n	d71ba <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d7208:	b2e4      	uxtb	r4, r4
   d720a:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d720e:	69ea      	ldr	r2, [r5, #28]
   d7210:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d7212:	bf9a      	itte	ls
   d7214:	6033      	strls	r3, [r6, #0]
  return 1;
   d7216:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d7218:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d721a:	bd70      	pop	{r4, r5, r6, pc}

000d721c <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d721c:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d721e:	b538      	push	{r3, r4, r5, lr}
   d7220:	460c      	mov	r4, r1
   d7222:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d7224:	d801      	bhi.n	d722a <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d7226:	2000      	movs	r0, #0
   d7228:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d722a:	69c3      	ldr	r3, [r0, #28]
   d722c:	4299      	cmp	r1, r3
   d722e:	d8fa      	bhi.n	d7226 <_ZN9FatVolume6fatPutEmm+0xa>
   d7230:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d7232:	2b20      	cmp	r3, #32
   d7234:	d10e      	bne.n	d7254 <_ZN9FatVolume6fatPutEmm+0x38>
   d7236:	6981      	ldr	r1, [r0, #24]
   d7238:	2203      	movs	r2, #3
   d723a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d723e:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d7242:	f7ff ff8a 	bl	d715a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d7246:	2800      	cmp	r0, #0
   d7248:	d0ed      	beq.n	d7226 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d724a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d724e:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d7252:	e00f      	b.n	d7274 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d7254:	2b10      	cmp	r3, #16
   d7256:	d1e6      	bne.n	d7226 <_ZN9FatVolume6fatPutEmm+0xa>
   d7258:	6983      	ldr	r3, [r0, #24]
   d725a:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d725e:	2203      	movs	r2, #3
   d7260:	4419      	add	r1, r3
   d7262:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d7266:	f7ff ff78 	bl	d715a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d726a:	2800      	cmp	r0, #0
   d726c:	d0db      	beq.n	d7226 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d726e:	b2e4      	uxtb	r4, r4
   d7270:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d7274:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d7276:	bd38      	pop	{r3, r4, r5, pc}

000d7278 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d7278:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d727c:	68c4      	ldr	r4, [r0, #12]
   d727e:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d7280:	4605      	mov	r5, r0
   d7282:	460e      	mov	r6, r1
   d7284:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d7286:	d207      	bcs.n	d7298 <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d7288:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d728a:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d728c:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d728e:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d7290:	429c      	cmp	r4, r3
   d7292:	d903      	bls.n	d729c <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d7294:	b9cf      	cbnz	r7, d72ca <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d7296:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d7298:	2701      	movs	r7, #1
   d729a:	e7f7      	b.n	d728c <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d729c:	42a6      	cmp	r6, r4
   d729e:	d014      	beq.n	d72ca <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d72a0:	aa01      	add	r2, sp, #4
   d72a2:	4621      	mov	r1, r4
   d72a4:	4628      	mov	r0, r5
   d72a6:	f7ff ff82 	bl	d71ae <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d72aa:	2800      	cmp	r0, #0
   d72ac:	db0d      	blt.n	d72ca <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d72ae:	d0ed      	beq.n	d728c <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d72b0:	9b01      	ldr	r3, [sp, #4]
   d72b2:	2b00      	cmp	r3, #0
   d72b4:	d1ea      	bne.n	d728c <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d72b6:	b107      	cbz	r7, d72ba <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d72b8:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d72ba:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d72be:	4621      	mov	r1, r4
   d72c0:	4628      	mov	r0, r5
   d72c2:	f7ff ffab 	bl	d721c <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d72c6:	4607      	mov	r7, r0
   d72c8:	b908      	cbnz	r0, d72ce <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d72ca:	2700      	movs	r7, #0
   d72cc:	e00b      	b.n	d72e6 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d72ce:	b916      	cbnz	r6, d72d6 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d72d0:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d72d4:	e007      	b.n	d72e6 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d72d6:	4622      	mov	r2, r4
   d72d8:	4631      	mov	r1, r6
   d72da:	4628      	mov	r0, r5
   d72dc:	f7ff ff9e 	bl	d721c <_ZN9FatVolume6fatPutEmm>
   d72e0:	2800      	cmp	r0, #0
   d72e2:	d1f5      	bne.n	d72d0 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d72e4:	e7f1      	b.n	d72ca <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d72e6:	4638      	mov	r0, r7
   d72e8:	b002      	add	sp, #8
   d72ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d72ee <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d72ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d72f0:	4605      	mov	r5, r0
   d72f2:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d72f4:	aa01      	add	r2, sp, #4
   d72f6:	4621      	mov	r1, r4
   d72f8:	4628      	mov	r0, r5
   d72fa:	f7ff ff58 	bl	d71ae <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d72fe:	1e06      	subs	r6, r0, #0
   d7300:	da01      	bge.n	d7306 <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d7302:	2000      	movs	r0, #0
   d7304:	e00f      	b.n	d7326 <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d7306:	2200      	movs	r2, #0
   d7308:	4621      	mov	r1, r4
   d730a:	4628      	mov	r0, r5
   d730c:	f7ff ff86 	bl	d721c <_ZN9FatVolume6fatPutEmm>
   d7310:	2800      	cmp	r0, #0
   d7312:	d0f6      	beq.n	d7302 <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d7314:	68eb      	ldr	r3, [r5, #12]
   d7316:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d7318:	bf9c      	itt	ls
   d731a:	f104 34ff 	addls.w	r4, r4, #4294967295
   d731e:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d7320:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d7322:	2e00      	cmp	r6, #0
   d7324:	d1e6      	bne.n	d72f4 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d7326:	b002      	add	sp, #8
   d7328:	bd70      	pop	{r4, r5, r6, pc}

000d732a <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d732a:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d732c:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d732e:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d7330:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d7332:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d7334:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d7338:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d733a:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d733c:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d733e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d7342:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d7344:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d7348:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d734c:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d7350:	b1a1      	cbz	r1, d737c <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d7352:	2904      	cmp	r1, #4
   d7354:	d85d      	bhi.n	d7412 <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d7356:	4611      	mov	r1, r2
   d7358:	3024      	adds	r0, #36	; 0x24
   d735a:	f7ff fefe 	bl	d715a <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d735e:	2800      	cmp	r0, #0
   d7360:	d057      	beq.n	d7412 <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d7362:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d7366:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d736a:	065b      	lsls	r3, r3, #25
   d736c:	d151      	bne.n	d7412 <_ZN9FatVolume4initEh+0xe8>
   d736e:	351b      	adds	r5, #27
   d7370:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d7374:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d7378:	2d00      	cmp	r5, #0
   d737a:	d04a      	beq.n	d7412 <_ZN9FatVolume4initEh+0xe8>
   d737c:	2200      	movs	r2, #0
   d737e:	4629      	mov	r1, r5
   d7380:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d7384:	f7ff fee9 	bl	d715a <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d7388:	2800      	cmp	r0, #0
   d738a:	d042      	beq.n	d7412 <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d738c:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d7390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d7394:	d13d      	bne.n	d7412 <_ZN9FatVolume4initEh+0xe8>
   d7396:	7c03      	ldrb	r3, [r0, #16]
   d7398:	2b02      	cmp	r3, #2
   d739a:	d13a      	bne.n	d7412 <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d739c:	89c3      	ldrh	r3, [r0, #14]
   d739e:	2b00      	cmp	r3, #0
   d73a0:	d037      	beq.n	d7412 <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d73a2:	7b41      	ldrb	r1, [r0, #13]
   d73a4:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d73a6:	1e4b      	subs	r3, r1, #1
   d73a8:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d73aa:	2300      	movs	r3, #0
   d73ac:	71a3      	strb	r3, [r4, #6]
   d73ae:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d73b0:	2301      	movs	r3, #1
   d73b2:	428b      	cmp	r3, r1
   d73b4:	d007      	beq.n	d73c6 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d73b6:	3e01      	subs	r6, #1
   d73b8:	d02b      	beq.n	d7412 <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d73ba:	79a2      	ldrb	r2, [r4, #6]
   d73bc:	005b      	lsls	r3, r3, #1
   d73be:	3201      	adds	r2, #1
   d73c0:	b2db      	uxtb	r3, r3
   d73c2:	71a2      	strb	r2, [r4, #6]
   d73c4:	e7f5      	b.n	d73b2 <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d73c6:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d73c8:	b902      	cbnz	r2, d73cc <_ZN9FatVolume4initEh+0xa2>
   d73ca:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d73cc:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d73ce:	89c6      	ldrh	r6, [r0, #14]
   d73d0:	442e      	add	r6, r5
   d73d2:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d73d4:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d73d8:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d73da:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d73de:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d73e0:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d73e4:	0152      	lsls	r2, r2, #5
   d73e6:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d73ea:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d73ee:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d73f0:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d73f4:	b903      	cbnz	r3, d73f8 <_ZN9FatVolume4initEh+0xce>
   d73f6:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d73f8:	1aad      	subs	r5, r5, r2
   d73fa:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d73fc:	79a5      	ldrb	r5, [r4, #6]
   d73fe:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d7402:	1c6b      	adds	r3, r5, #1
   d7404:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d7406:	f640 73f4 	movw	r3, #4084	; 0xff4
   d740a:	429d      	cmp	r5, r3
   d740c:	d803      	bhi.n	d7416 <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d740e:	230c      	movs	r3, #12
   d7410:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d7412:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d7414:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d7416:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d741a:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d741c:	bf85      	ittet	hi
   d741e:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d7420:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d7422:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d7424:	2320      	movhi	r3, #32
   d7426:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d7428:	2001      	movs	r0, #1

fail:
  return false;
}
   d742a:	bd70      	pop	{r4, r5, r6, pc}

000d742c <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d742c:	f000 be4e 	b.w	d80cc <HAL_Pin_Map>

000d7430 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d7430:	f000 be4c 	b.w	d80cc <HAL_Pin_Map>

000d7434 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d7434:	f000 be4a 	b.w	d80cc <HAL_Pin_Map>

000d7438 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d7438:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d743a:	4c0e      	ldr	r4, [pc, #56]	; (d7474 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d743c:	460e      	mov	r6, r1
   d743e:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d7440:	f000 ff04 	bl	d824c <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d7444:	6823      	ldr	r3, [r4, #0]
   d7446:	1ac0      	subs	r0, r0, r3
   d7448:	4b0b      	ldr	r3, [pc, #44]	; (d7478 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d744a:	4298      	cmp	r0, r3
   d744c:	d908      	bls.n	d7460 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d744e:	f000 ff05 	bl	d825c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7452:	4b0a      	ldr	r3, [pc, #40]	; (d747c <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d7454:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d7456:	f001 f945 	bl	d86e4 <spark_process>
   d745a:	f000 fef7 	bl	d824c <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d745e:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d7460:	f000 fefc 	bl	d825c <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d7464:	b280      	uxth	r0, r0
   d7466:	1b80      	subs	r0, r0, r6
}
   d7468:	42a8      	cmp	r0, r5
   d746a:	bfd4      	ite	le
   d746c:	2000      	movle	r0, #0
   d746e:	2001      	movgt	r0, #1
   d7470:	bd70      	pop	{r4, r5, r6, pc}
   d7472:	bf00      	nop
   d7474:	2003e124 	.word	0x2003e124
   d7478:	000186a0 	.word	0x000186a0
   d747c:	2003e504 	.word	0x2003e504

000d7480 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d7480:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d7482:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d7484:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d7486:	b94d      	cbnz	r5, d749c <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d7488:	6840      	ldr	r0, [r0, #4]
   d748a:	f000 fa7d 	bl	d7988 <_ZN14SdSpiAltDriver8activateEv>
   d748e:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d7490:	4629      	mov	r1, r5
   d7492:	7d18      	ldrb	r0, [r3, #20]
   d7494:	f002 fd9f 	bl	d9fd6 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d7498:	2301      	movs	r3, #1
   d749a:	7223      	strb	r3, [r4, #8]
   d749c:	bd38      	pop	{r3, r4, r5, pc}

000d749e <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d749e:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d74a0:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d74a2:	4604      	mov	r4, r0
  if (m_spiActive) {
   d74a4:	b16b      	cbz	r3, d74c2 <_ZN9SdSpiCard7spiStopEv+0x24>
   d74a6:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d74a8:	2101      	movs	r1, #1
   d74aa:	7d18      	ldrb	r0, [r3, #20]
   d74ac:	f002 fd93 	bl	d9fd6 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d74b0:	21ff      	movs	r1, #255	; 0xff
   d74b2:	6860      	ldr	r0, [r4, #4]
   d74b4:	f000 fa9a 	bl	d79ec <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d74b8:	6860      	ldr	r0, [r4, #4]
   d74ba:	f000 fa79 	bl	d79b0 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d74be:	2300      	movs	r3, #0
   d74c0:	7223      	strb	r3, [r4, #8]
   d74c2:	bd10      	pop	{r4, pc}

000d74c4 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d74c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d74c6:	4604      	mov	r4, r0
   d74c8:	460d      	mov	r5, r1
   d74ca:	4616      	mov	r6, r2
   d74cc:	f000 fec6 	bl	d825c <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d74d0:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d74d2:	6860      	ldr	r0, [r4, #4]
   d74d4:	f000 fa6f 	bl	d79b6 <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d74d8:	28ff      	cmp	r0, #255	; 0xff
   d74da:	7260      	strb	r0, [r4, #9]
   d74dc:	d109      	bne.n	d74f2 <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d74de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d74e2:	4639      	mov	r1, r7
   d74e4:	4620      	mov	r0, r4
   d74e6:	f7ff ffa7 	bl	d7438 <_ZN9SdSpiCard10isTimedOutEtt>
   d74ea:	2800      	cmp	r0, #0
   d74ec:	d0f1      	beq.n	d74d2 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d74ee:	2355      	movs	r3, #85	; 0x55
   d74f0:	e00b      	b.n	d750a <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d74f2:	28fe      	cmp	r0, #254	; 0xfe
   d74f4:	d001      	beq.n	d74fa <_ZN9SdSpiCard8readDataEPhj+0x36>
   d74f6:	2350      	movs	r3, #80	; 0x50
   d74f8:	e007      	b.n	d750a <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d74fa:	4632      	mov	r2, r6
   d74fc:	4629      	mov	r1, r5
   d74fe:	6860      	ldr	r0, [r4, #4]
   d7500:	f000 fa5e 	bl	d79c0 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d7504:	7260      	strb	r0, [r4, #9]
   d7506:	b130      	cbz	r0, d7516 <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7508:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d750a:	4620      	mov	r0, r4
   d750c:	7023      	strb	r3, [r4, #0]
   d750e:	f7ff ffc6 	bl	d749e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7512:	2000      	movs	r0, #0
}
   d7514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7516:	6860      	ldr	r0, [r4, #4]
   d7518:	f000 fa4d 	bl	d79b6 <_ZN14SdSpiAltDriver7receiveEv>
   d751c:	6860      	ldr	r0, [r4, #4]
   d751e:	f000 fa4a 	bl	d79b6 <_ZN14SdSpiAltDriver7receiveEv>
   d7522:	2001      	movs	r0, #1
   d7524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7526 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d7526:	b570      	push	{r4, r5, r6, lr}
   d7528:	4604      	mov	r4, r0
   d752a:	460e      	mov	r6, r1
   d752c:	f000 fe96 	bl	d825c <HAL_Timer_Get_Milli_Seconds>
   d7530:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d7532:	4632      	mov	r2, r6
   d7534:	4629      	mov	r1, r5
   d7536:	4620      	mov	r0, r4
   d7538:	f7ff ff7e 	bl	d7438 <_ZN9SdSpiCard10isTimedOutEtt>
   d753c:	b930      	cbnz	r0, d754c <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d753e:	6860      	ldr	r0, [r4, #4]
   d7540:	f000 fa39 	bl	d79b6 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d7544:	28ff      	cmp	r0, #255	; 0xff
   d7546:	d1f4      	bne.n	d7532 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d7548:	2001      	movs	r0, #1
   d754a:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d754c:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d754e:	bd70      	pop	{r4, r5, r6, pc}

000d7550 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d7550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d7552:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d7554:	9201      	str	r2, [sp, #4]
   d7556:	4604      	mov	r4, r0
   d7558:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d755a:	b90b      	cbnz	r3, d7560 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d755c:	f7ff ff90 	bl	d7480 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d7560:	b125      	cbz	r5, d756c <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d7562:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d7566:	4620      	mov	r0, r4
   d7568:	f7ff ffdd 	bl	d7526 <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d756c:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d7570:	6860      	ldr	r0, [r4, #4]
   d7572:	f000 fa3b 	bl	d79ec <_ZN14SdSpiAltDriver4sendEh>
   d7576:	f10d 0607 	add.w	r6, sp, #7
   d757a:	f10d 0703 	add.w	r7, sp, #3
   d757e:	f816 1901 	ldrb.w	r1, [r6], #-1
   d7582:	6860      	ldr	r0, [r4, #4]
   d7584:	f000 fa32 	bl	d79ec <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d7588:	42be      	cmp	r6, r7
   d758a:	d1f8      	bne.n	d757e <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d758c:	2d00      	cmp	r5, #0
   d758e:	bf0c      	ite	eq
   d7590:	2195      	moveq	r1, #149	; 0x95
   d7592:	2187      	movne	r1, #135	; 0x87
   d7594:	6860      	ldr	r0, [r4, #4]
   d7596:	f000 fa29 	bl	d79ec <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d759a:	6860      	ldr	r0, [r4, #4]
   d759c:	f000 fa0b 	bl	d79b6 <_ZN14SdSpiAltDriver7receiveEv>
   d75a0:	250b      	movs	r5, #11
   d75a2:	6860      	ldr	r0, [r4, #4]
   d75a4:	f000 fa07 	bl	d79b6 <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d75a8:	0603      	lsls	r3, r0, #24
   d75aa:	7260      	strb	r0, [r4, #9]
   d75ac:	d503      	bpl.n	d75b6 <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d75ae:	3d01      	subs	r5, #1
   d75b0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d75b4:	d1f5      	bne.n	d75a2 <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d75b6:	b003      	add	sp, #12
   d75b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d75ba <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d75ba:	b570      	push	{r4, r5, r6, lr}
   d75bc:	4604      	mov	r4, r0
   d75be:	460d      	mov	r5, r1
   d75c0:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d75c2:	2137      	movs	r1, #55	; 0x37
   d75c4:	2200      	movs	r2, #0
   d75c6:	f7ff ffc3 	bl	d7550 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d75ca:	4632      	mov	r2, r6
   d75cc:	4629      	mov	r1, r5
   d75ce:	4620      	mov	r0, r4
  }
   d75d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d75d4:	f7ff bfbc 	b.w	d7550 <_ZN9SdSpiCard11cardCommandEhm>

000d75d8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d75d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d75dc:	2500      	movs	r5, #0
   d75de:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d75e0:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d75e2:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d75e4:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d75e6:	4604      	mov	r4, r0
   d75e8:	4690      	mov	r8, r2
   d75ea:	461e      	mov	r6, r3
   d75ec:	f000 fe36 	bl	d825c <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d75f0:	4641      	mov	r1, r8
   d75f2:	4607      	mov	r7, r0
   d75f4:	6860      	ldr	r0, [r4, #4]
   d75f6:	f000 f9cb 	bl	d7990 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d75fa:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d75fc:	4a4f      	ldr	r2, [pc, #316]	; (d773c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d75fe:	721d      	strb	r5, [r3, #8]
   d7600:	f04f 0801 	mov.w	r8, #1
   d7604:	60da      	str	r2, [r3, #12]
   d7606:	745d      	strb	r5, [r3, #17]
   d7608:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d760c:	4620      	mov	r0, r4
   d760e:	f7ff ff37 	bl	d7480 <_ZN9SdSpiCard8spiStartEv>
   d7612:	6863      	ldr	r3, [r4, #4]
   d7614:	4641      	mov	r1, r8
   d7616:	7d18      	ldrb	r0, [r3, #20]
   d7618:	f002 fcdd 	bl	d9fd6 <digitalWrite>
   d761c:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d761e:	21ff      	movs	r1, #255	; 0xff
   d7620:	6860      	ldr	r0, [r4, #4]
   d7622:	3d01      	subs	r5, #1
   d7624:	f000 f9e2 	bl	d79ec <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d7628:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d762c:	d1f7      	bne.n	d761e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d762e:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d7630:	4629      	mov	r1, r5
   d7632:	7d18      	ldrb	r0, [r3, #20]
   d7634:	f002 fccf 	bl	d9fd6 <digitalWrite>
   d7638:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d763a:	2200      	movs	r2, #0
   d763c:	4611      	mov	r1, r2
   d763e:	4620      	mov	r0, r4
   d7640:	f7ff ff86 	bl	d7550 <_ZN9SdSpiCard11cardCommandEhm>
   d7644:	2801      	cmp	r0, #1
   d7646:	4680      	mov	r8, r0
   d7648:	d012      	beq.n	d7670 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d764a:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d764c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d7650:	d101      	bne.n	d7656 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7652:	2320      	movs	r3, #32
   d7654:	e057      	b.n	d7706 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7656:	21fd      	movs	r1, #253	; 0xfd
   d7658:	6860      	ldr	r0, [r4, #4]
   d765a:	f000 f9c7 	bl	d79ec <_ZN14SdSpiAltDriver4sendEh>
   d765e:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7662:	6860      	ldr	r0, [r4, #4]
   d7664:	f000 f9a7 	bl	d79b6 <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d7668:	f1b8 0801 	subs.w	r8, r8, #1
   d766c:	d1f9      	bne.n	d7662 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d766e:	e7e4      	b.n	d763a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d7670:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d7674:	2108      	movs	r1, #8
   d7676:	4620      	mov	r0, r4
   d7678:	f7ff ff6a 	bl	d7550 <_ZN9SdSpiCard11cardCommandEhm>
   d767c:	2805      	cmp	r0, #5
   d767e:	d102      	bne.n	d7686 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d7680:	f884 800a 	strb.w	r8, [r4, #10]
   d7684:	e00f      	b.n	d76a6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d7686:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7688:	6860      	ldr	r0, [r4, #4]
   d768a:	f000 f994 	bl	d79b6 <_ZN14SdSpiAltDriver7receiveEv>
   d768e:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d7690:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d7694:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d7696:	d1f7      	bne.n	d7688 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d7698:	28aa      	cmp	r0, #170	; 0xaa
   d769a:	d102      	bne.n	d76a2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d769c:	2302      	movs	r3, #2
   d769e:	72a3      	strb	r3, [r4, #10]
   d76a0:	e001      	b.n	d76a6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d76a2:	2325      	movs	r3, #37	; 0x25
   d76a4:	e02f      	b.n	d7706 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d76a6:	7aa3      	ldrb	r3, [r4, #10]
   d76a8:	2b02      	cmp	r3, #2
   d76aa:	bf0c      	ite	eq
   d76ac:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d76b0:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d76b2:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d76b4:	462a      	mov	r2, r5
   d76b6:	2129      	movs	r1, #41	; 0x29
   d76b8:	4620      	mov	r0, r4
   d76ba:	f7ff ff7e 	bl	d75ba <_ZN9SdSpiCard8cardAcmdEhm>
   d76be:	4602      	mov	r2, r0
   d76c0:	b148      	cbz	r0, d76d6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d76c2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d76c6:	4639      	mov	r1, r7
   d76c8:	4620      	mov	r0, r4
   d76ca:	f7ff feb5 	bl	d7438 <_ZN9SdSpiCard10isTimedOutEtt>
   d76ce:	2800      	cmp	r0, #0
   d76d0:	d0f0      	beq.n	d76b4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d76d2:	2343      	movs	r3, #67	; 0x43
   d76d4:	e017      	b.n	d7706 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d76d6:	7aa3      	ldrb	r3, [r4, #10]
   d76d8:	2b02      	cmp	r3, #2
   d76da:	d00e      	beq.n	d76fa <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d76dc:	4620      	mov	r0, r4
   d76de:	f7ff fede 	bl	d749e <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d76e2:	6863      	ldr	r3, [r4, #4]
   d76e4:	68b0      	ldr	r0, [r6, #8]
   d76e6:	7934      	ldrb	r4, [r6, #4]
   d76e8:	7b31      	ldrb	r1, [r6, #12]
   d76ea:	7b72      	ldrb	r2, [r6, #13]
   d76ec:	745a      	strb	r2, [r3, #17]
   d76ee:	60d8      	str	r0, [r3, #12]
   d76f0:	721c      	strb	r4, [r3, #8]
   d76f2:	7419      	strb	r1, [r3, #16]
  return true;
   d76f4:	2001      	movs	r0, #1
   d76f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d76fa:	213a      	movs	r1, #58	; 0x3a
   d76fc:	4620      	mov	r0, r4
   d76fe:	f7ff ff27 	bl	d7550 <_ZN9SdSpiCard11cardCommandEhm>
   d7702:	b138      	cbz	r0, d7714 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d7704:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d7706:	4620      	mov	r0, r4
   d7708:	7023      	strb	r3, [r4, #0]
   d770a:	f7ff fec8 	bl	d749e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d770e:	2000      	movs	r0, #0
}
   d7710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7714:	6860      	ldr	r0, [r4, #4]
   d7716:	f000 f94e 	bl	d79b6 <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d771a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d771e:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d7720:	bf04      	itt	eq
   d7722:	2303      	moveq	r3, #3
   d7724:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7726:	6860      	ldr	r0, [r4, #4]
   d7728:	f000 f945 	bl	d79b6 <_ZN14SdSpiAltDriver7receiveEv>
   d772c:	6860      	ldr	r0, [r4, #4]
   d772e:	f000 f942 	bl	d79b6 <_ZN14SdSpiAltDriver7receiveEv>
   d7732:	6860      	ldr	r0, [r4, #4]
   d7734:	f000 f93f 	bl	d79b6 <_ZN14SdSpiAltDriver7receiveEv>
   d7738:	e7d0      	b.n	d76dc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d773a:	bf00      	nop
   d773c:	0003d090 	.word	0x0003d090

000d7740 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d7740:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d7742:	7a83      	ldrb	r3, [r0, #10]
   d7744:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d7746:	bf18      	it	ne
   d7748:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d774a:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d774c:	460a      	mov	r2, r1
   d774e:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d7750:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d7752:	f7ff fefd 	bl	d7550 <_ZN9SdSpiCard11cardCommandEhm>
   d7756:	b110      	cbz	r0, d775e <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7758:	2330      	movs	r3, #48	; 0x30
   d775a:	7023      	strb	r3, [r4, #0]
   d775c:	e00b      	b.n	d7776 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d775e:	4629      	mov	r1, r5
   d7760:	f44f 7200 	mov.w	r2, #512	; 0x200
   d7764:	4620      	mov	r0, r4
   d7766:	f7ff fead 	bl	d74c4 <_ZN9SdSpiCard8readDataEPhj>
   d776a:	4605      	mov	r5, r0
   d776c:	b118      	cbz	r0, d7776 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d776e:	4620      	mov	r0, r4
   d7770:	f7ff fe95 	bl	d749e <_ZN9SdSpiCard7spiStopEv>
  return true;
   d7774:	e003      	b.n	d777e <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d7776:	4620      	mov	r0, r4
   d7778:	f7ff fe91 	bl	d749e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d777c:	2500      	movs	r5, #0
}
   d777e:	4628      	mov	r0, r5
   d7780:	bd38      	pop	{r3, r4, r5, pc}

000d7782 <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7782:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d7784:	7a83      	ldrb	r3, [r0, #10]
   d7786:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7788:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d778a:	bf18      	it	ne
   d778c:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d778e:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7790:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d7792:	f7ff fedd 	bl	d7550 <_ZN9SdSpiCard11cardCommandEhm>
   d7796:	b130      	cbz	r0, d77a6 <_ZN9SdSpiCard9readStartEm+0x24>
   d7798:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d779a:	4620      	mov	r0, r4
   d779c:	7023      	strb	r3, [r4, #0]
   d779e:	f7ff fe7e 	bl	d749e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d77a2:	2000      	movs	r0, #0
   d77a4:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d77a6:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d77a8:	bd10      	pop	{r4, pc}

000d77aa <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d77aa:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d77ac:	2200      	movs	r2, #0
   d77ae:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d77b0:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d77b2:	f7ff fecd 	bl	d7550 <_ZN9SdSpiCard11cardCommandEhm>
   d77b6:	b130      	cbz	r0, d77c6 <_ZN9SdSpiCard8readStopEv+0x1c>
   d77b8:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d77ba:	4620      	mov	r0, r4
   d77bc:	7023      	strb	r3, [r4, #0]
   d77be:	f7ff fe6e 	bl	d749e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d77c2:	2000      	movs	r0, #0
   d77c4:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d77c6:	4620      	mov	r0, r4
   d77c8:	f7ff fe69 	bl	d749e <_ZN9SdSpiCard7spiStopEv>
  return true;
   d77cc:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d77ce:	bd10      	pop	{r4, pc}

000d77d0 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d77d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d77d2:	4605      	mov	r5, r0
   d77d4:	4616      	mov	r6, r2
   d77d6:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d77d8:	f7ff ffd3 	bl	d7782 <_ZN9SdSpiCard9readStartEm>
   d77dc:	b198      	cbz	r0, d7806 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d77de:	2400      	movs	r4, #0
   d77e0:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d77e2:	429f      	cmp	r7, r3
   d77e4:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d77e8:	d908      	bls.n	d77fc <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d77ea:	f44f 7200 	mov.w	r2, #512	; 0x200
   d77ee:	4628      	mov	r0, r5
   d77f0:	f7ff fe68 	bl	d74c4 <_ZN9SdSpiCard8readDataEPhj>
   d77f4:	3401      	adds	r4, #1
   d77f6:	2800      	cmp	r0, #0
   d77f8:	d1f2      	bne.n	d77e0 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d77fa:	e004      	b.n	d7806 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d77fc:	4628      	mov	r0, r5
}
   d77fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d7802:	f7ff bfd2 	b.w	d77aa <_ZN9SdSpiCard8readStopEv>
}
   d7806:	2000      	movs	r0, #0
   d7808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d780a <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d780a:	b538      	push	{r3, r4, r5, lr}
   d780c:	4604      	mov	r4, r0
   d780e:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7810:	6840      	ldr	r0, [r0, #4]
   d7812:	f000 f8eb 	bl	d79ec <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d7816:	f44f 7200 	mov.w	r2, #512	; 0x200
   d781a:	4629      	mov	r1, r5
   d781c:	6860      	ldr	r0, [r4, #4]
   d781e:	f000 f8e9 	bl	d79f4 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7822:	21ff      	movs	r1, #255	; 0xff
   d7824:	6860      	ldr	r0, [r4, #4]
   d7826:	f000 f8e1 	bl	d79ec <_ZN14SdSpiAltDriver4sendEh>
   d782a:	21ff      	movs	r1, #255	; 0xff
   d782c:	6860      	ldr	r0, [r4, #4]
   d782e:	f000 f8dd 	bl	d79ec <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7832:	6860      	ldr	r0, [r4, #4]
   d7834:	f000 f8bf 	bl	d79b6 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d7838:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d783a:	f000 001f 	and.w	r0, r0, #31
   d783e:	2805      	cmp	r0, #5
   d7840:	d006      	beq.n	d7850 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7842:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d7844:	4620      	mov	r0, r4
   d7846:	7023      	strb	r3, [r4, #0]
   d7848:	f7ff fe29 	bl	d749e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d784c:	2000      	movs	r0, #0
   d784e:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d7850:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d7852:	bd38      	pop	{r3, r4, r5, pc}

000d7854 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7854:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d7856:	7a83      	ldrb	r3, [r0, #10]
   d7858:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d785a:	bf18      	it	ne
   d785c:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d785e:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d7860:	460a      	mov	r2, r1
   d7862:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7864:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d7866:	f7ff fe73 	bl	d7550 <_ZN9SdSpiCard11cardCommandEhm>
   d786a:	4606      	mov	r6, r0
   d786c:	b108      	cbz	r0, d7872 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d786e:	2332      	movs	r3, #50	; 0x32
   d7870:	e01d      	b.n	d78ae <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d7872:	462a      	mov	r2, r5
   d7874:	21fe      	movs	r1, #254	; 0xfe
   d7876:	4620      	mov	r0, r4
   d7878:	f7ff ffc7 	bl	d780a <_ZN9SdSpiCard9writeDataEhPKh>
   d787c:	b1c0      	cbz	r0, d78b0 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d787e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d7882:	4620      	mov	r0, r4
   d7884:	f7ff fe4f 	bl	d7526 <_ZN9SdSpiCard11waitNotBusyEt>
   d7888:	4605      	mov	r5, r0
   d788a:	b908      	cbnz	r0, d7890 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d788c:	235a      	movs	r3, #90	; 0x5a
   d788e:	e00e      	b.n	d78ae <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d7890:	4632      	mov	r2, r6
   d7892:	210d      	movs	r1, #13
   d7894:	4620      	mov	r0, r4
   d7896:	f7ff fe5b 	bl	d7550 <_ZN9SdSpiCard11cardCommandEhm>
   d789a:	b938      	cbnz	r0, d78ac <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d789c:	6860      	ldr	r0, [r4, #4]
   d789e:	f000 f88a 	bl	d79b6 <_ZN14SdSpiAltDriver7receiveEv>
   d78a2:	b918      	cbnz	r0, d78ac <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d78a4:	4620      	mov	r0, r4
   d78a6:	f7ff fdfa 	bl	d749e <_ZN9SdSpiCard7spiStopEv>
  return true;
   d78aa:	e005      	b.n	d78b8 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d78ac:	2329      	movs	r3, #41	; 0x29
   d78ae:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d78b0:	4620      	mov	r0, r4
   d78b2:	f7ff fdf4 	bl	d749e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d78b6:	2500      	movs	r5, #0
}
   d78b8:	4628      	mov	r0, r5
   d78ba:	bd70      	pop	{r4, r5, r6, pc}

000d78bc <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d78bc:	b538      	push	{r3, r4, r5, lr}
   d78be:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d78c0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d78c4:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d78c6:	f7ff fe2e 	bl	d7526 <_ZN9SdSpiCard11waitNotBusyEt>
   d78ca:	b910      	cbnz	r0, d78d2 <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d78cc:	235b      	movs	r3, #91	; 0x5b
   d78ce:	7023      	strb	r3, [r4, #0]
   d78d0:	e005      	b.n	d78de <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d78d2:	462a      	mov	r2, r5
   d78d4:	21fc      	movs	r1, #252	; 0xfc
   d78d6:	4620      	mov	r0, r4
   d78d8:	f7ff ff97 	bl	d780a <_ZN9SdSpiCard9writeDataEhPKh>
   d78dc:	b918      	cbnz	r0, d78e6 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d78de:	4620      	mov	r0, r4
   d78e0:	f7ff fddd 	bl	d749e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d78e4:	2000      	movs	r0, #0
}
   d78e6:	bd38      	pop	{r3, r4, r5, pc}

000d78e8 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d78e8:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d78ea:	7a83      	ldrb	r3, [r0, #10]
   d78ec:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d78ee:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d78f0:	bf18      	it	ne
   d78f2:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d78f4:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d78f6:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d78f8:	f7ff fe2a 	bl	d7550 <_ZN9SdSpiCard11cardCommandEhm>
   d78fc:	b130      	cbz	r0, d790c <_ZN9SdSpiCard10writeStartEm+0x24>
   d78fe:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d7900:	4620      	mov	r0, r4
   d7902:	7023      	strb	r3, [r4, #0]
   d7904:	f7ff fdcb 	bl	d749e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7908:	2000      	movs	r0, #0
   d790a:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d790c:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d790e:	bd10      	pop	{r4, pc}

000d7910 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d7910:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7912:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d7916:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7918:	f7ff fe05 	bl	d7526 <_ZN9SdSpiCard11waitNotBusyEt>
   d791c:	4605      	mov	r5, r0
   d791e:	b120      	cbz	r0, d792a <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7920:	21fd      	movs	r1, #253	; 0xfd
   d7922:	6860      	ldr	r0, [r4, #4]
   d7924:	f000 f862 	bl	d79ec <_ZN14SdSpiAltDriver4sendEh>
   d7928:	e001      	b.n	d792e <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d792a:	2356      	movs	r3, #86	; 0x56
   d792c:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d792e:	4620      	mov	r0, r4
   d7930:	f7ff fdb5 	bl	d749e <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d7934:	4628      	mov	r0, r5
   d7936:	bd38      	pop	{r3, r4, r5, pc}

000d7938 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d7938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d793a:	4605      	mov	r5, r0
   d793c:	4616      	mov	r6, r2
   d793e:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d7940:	f7ff ffd2 	bl	d78e8 <_ZN9SdSpiCard10writeStartEm>
   d7944:	b170      	cbz	r0, d7964 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d7946:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d7948:	42bc      	cmp	r4, r7
   d794a:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d794e:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d7950:	d004      	beq.n	d795c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d7952:	f7ff ffb3 	bl	d78bc <_ZN9SdSpiCard9writeDataEPKh>
   d7956:	b128      	cbz	r0, d7964 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d7958:	3401      	adds	r4, #1
   d795a:	e7f5      	b.n	d7948 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d795c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d7960:	f7ff bfd6 	b.w	d7910 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d7964:	4628      	mov	r0, r5
   d7966:	f7ff fd9a 	bl	d749e <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d796a:	2000      	movs	r0, #0
   d796c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d796e <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d796e:	f000 bbad 	b.w	d80cc <HAL_Pin_Map>

000d7972 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d7972:	f000 bbab 	b.w	d80cc <HAL_Pin_Map>

000d7976 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d7976:	f000 bba9 	b.w	d80cc <HAL_Pin_Map>
	...

000d797c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d797c:	4b01      	ldr	r3, [pc, #4]	; (d7984 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d797e:	2201      	movs	r2, #1
   d7980:	701a      	strb	r2, [r3, #0]
   d7982:	4770      	bx	lr
   d7984:	2003e128 	.word	0x2003e128

000d7988 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d7988:	1d01      	adds	r1, r0, #4
   d798a:	6800      	ldr	r0, [r0, #0]
   d798c:	f000 bfa4 	b.w	d88d8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d7990 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d7990:	b510      	push	{r4, lr}
   d7992:	4604      	mov	r4, r0
  m_csPin = csPin;
   d7994:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d7996:	6800      	ldr	r0, [r0, #0]
   d7998:	f000 ff52 	bl	d8840 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d799c:	7d20      	ldrb	r0, [r4, #20]
   d799e:	2101      	movs	r1, #1
   d79a0:	f002 fb08 	bl	d9fb4 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d79a4:	7d20      	ldrb	r0, [r4, #20]
   d79a6:	2101      	movs	r1, #1
}
   d79a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d79ac:	f002 bb13 	b.w	d9fd6 <digitalWrite>

000d79b0 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d79b0:	6800      	ldr	r0, [r0, #0]
   d79b2:	f000 bf78 	b.w	d88a6 <_ZN8SPIClass14endTransactionEv>

000d79b6 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d79b6:	21ff      	movs	r1, #255	; 0xff
   d79b8:	6800      	ldr	r0, [r0, #0]
   d79ba:	f001 b853 	b.w	d8a64 <_ZN8SPIClass8transferEh>
	...

000d79c0 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d79c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d79c2:	4b08      	ldr	r3, [pc, #32]	; (d79e4 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d79c4:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d79c6:	2500      	movs	r5, #0
   d79c8:	4c07      	ldr	r4, [pc, #28]	; (d79e8 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d79ca:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d79cc:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d79ce:	4613      	mov	r3, r2
   d79d0:	460a      	mov	r2, r1
   d79d2:	4629      	mov	r1, r5
   d79d4:	f001 f84c 	bl	d8a70 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d79d8:	7823      	ldrb	r3, [r4, #0]
   d79da:	2b00      	cmp	r3, #0
   d79dc:	d0fc      	beq.n	d79d8 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d79de:	2000      	movs	r0, #0
   d79e0:	b003      	add	sp, #12
   d79e2:	bd30      	pop	{r4, r5, pc}
   d79e4:	000d797d 	.word	0x000d797d
   d79e8:	2003e128 	.word	0x2003e128

000d79ec <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d79ec:	6800      	ldr	r0, [r0, #0]
   d79ee:	f001 b839 	b.w	d8a64 <_ZN8SPIClass8transferEh>
	...

000d79f4 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d79f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d79f6:	4b07      	ldr	r3, [pc, #28]	; (d7a14 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d79f8:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d79fa:	2500      	movs	r5, #0
   d79fc:	4c06      	ldr	r4, [pc, #24]	; (d7a18 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d79fe:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d7a00:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d7a02:	4613      	mov	r3, r2
   d7a04:	462a      	mov	r2, r5
   d7a06:	f001 f833 	bl	d8a70 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d7a0a:	7823      	ldrb	r3, [r4, #0]
   d7a0c:	2b00      	cmp	r3, #0
   d7a0e:	d0fc      	beq.n	d7a0a <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d7a10:	b003      	add	sp, #12
   d7a12:	bd30      	pop	{r4, r5, pc}
   d7a14:	000d797d 	.word	0x000d797d
   d7a18:	2003e128 	.word	0x2003e128

000d7a1c <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d7a1c:	f000 bb56 	b.w	d80cc <HAL_Pin_Map>

000d7a20 <_ZN5RFM694isr0Ev>:
  }
  RSSI = readRSSI();
  //digitalWrite(4, 0);
}

void RFM69::isr0() { selfPointer->interruptHandler(); }
   d7a20:	4b02      	ldr	r3, [pc, #8]	; (d7a2c <_ZN5RFM694isr0Ev+0xc>)
   d7a22:	6818      	ldr	r0, [r3, #0]
   d7a24:	6803      	ldr	r3, [r0, #0]
   d7a26:	681b      	ldr	r3, [r3, #0]
   d7a28:	4718      	bx	r3
   d7a2a:	bf00      	nop
   d7a2c:	2003e140 	.word	0x2003e140

000d7a30 <_ZN5RFM698unselectEv>:
  SPI1.setClockDivider(SPI_CLOCK_DIV16);
  digitalWrite(_slaveSelectPin, LOW);
}

/// UNselect the transceiver chip
void RFM69::unselect() {
   d7a30:	b508      	push	{r3, lr}
  digitalWrite(_slaveSelectPin, HIGH);
   d7a32:	2101      	movs	r1, #1
   d7a34:	7900      	ldrb	r0, [r0, #4]
   d7a36:	f002 face 	bl	d9fd6 <digitalWrite>
  #ifndef PARTICLE
  SPCR = _SPCR;
  SPSR = _SPSR;
  #endif
  interrupts();
}
   d7a3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  //restore SPI settings to what they were before talking to RFM69
  #ifndef PARTICLE
  SPCR = _SPCR;
  SPSR = _SPSR;
  #endif
  interrupts();
   d7a3e:	f001 bcfd 	b.w	d943c <_Z10interruptsv>
	...

000d7a44 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d7a44:	b510      	push	{r4, lr}
        static SPIClass instance(Interface);
   d7a46:	4c08      	ldr	r4, [pc, #32]	; (d7a68 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x24>)
   d7a48:	6823      	ldr	r3, [r4, #0]
   d7a4a:	07db      	lsls	r3, r3, #31
   d7a4c:	d40a      	bmi.n	d7a64 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x20>
   d7a4e:	4620      	mov	r0, r4
   d7a50:	f7fc fb29 	bl	d40a6 <__cxa_guard_acquire>
   d7a54:	b130      	cbz	r0, d7a64 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x20>
   d7a56:	2101      	movs	r1, #1
   d7a58:	4804      	ldr	r0, [pc, #16]	; (d7a6c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x28>)
   d7a5a:	f000 fee7 	bl	d882c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7a5e:	4620      	mov	r0, r4
   d7a60:	f7fc fb26 	bl	d40b0 <__cxa_guard_release>
        return instance;
    }
   d7a64:	4801      	ldr	r0, [pc, #4]	; (d7a6c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x28>)
   d7a66:	bd10      	pop	{r4, pc}
   d7a68:	2003e12c 	.word	0x2003e12c
   d7a6c:	2003e130 	.word	0x2003e130

000d7a70 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   d7a70:	b510      	push	{r4, lr}
   d7a72:	4604      	mov	r4, r0
        return instance().transfer(data);
   d7a74:	f7ff ffe6 	bl	d7a44 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d7a78:	4621      	mov	r1, r4
    }
   d7a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d7a7e:	f000 bff1 	b.w	d8a64 <_ZN8SPIClass8transferEh>

000d7a82 <_ZN5RFM696selectEv>:
  SPI1.transfer(value);
  unselect();
}

/// Select the transceiver
void RFM69::select() {
   d7a82:	b510      	push	{r4, lr}
   d7a84:	4604      	mov	r4, r0
  noInterrupts();
   d7a86:	f001 fcd7 	bl	d9438 <_Z12noInterruptsv>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d7a8a:	f7ff ffdb 	bl	d7a44 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d7a8e:	2100      	movs	r1, #0
   d7a90:	f000 fef8 	bl	d8884 <_ZN8SPIClass11setDataModeEh>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   d7a94:	f7ff ffd6 	bl	d7a44 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d7a98:	2101      	movs	r1, #1
   d7a9a:	f000 fee2 	bl	d8862 <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
   d7a9e:	f7ff ffd1 	bl	d7a44 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d7aa2:	2118      	movs	r1, #24
   d7aa4:	f000 ffba 	bl	d8a1c <_ZN8SPIClass15setClockDividerEh>
  //set RFM69 SPI settings
  SPI1.setDataMode(SPI_MODE0);
  SPI1.setBitOrder(MSBFIRST);
  //SPI_CLOCK_DIV16; // 72MHz / 16 = 4.5MHz
  SPI1.setClockDivider(SPI_CLOCK_DIV16);
  digitalWrite(_slaveSelectPin, LOW);
   d7aa8:	7920      	ldrb	r0, [r4, #4]
   d7aaa:	2100      	movs	r1, #0
}
   d7aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  //set RFM69 SPI settings
  SPI1.setDataMode(SPI_MODE0);
  SPI1.setBitOrder(MSBFIRST);
  //SPI_CLOCK_DIV16; // 72MHz / 16 = 4.5MHz
  SPI1.setClockDivider(SPI_CLOCK_DIV16);
  digitalWrite(_slaveSelectPin, LOW);
   d7ab0:	f002 ba91 	b.w	d9fd6 <digitalWrite>

000d7ab4 <_ZN5RFM697readRegEh>:
  rssi >>= 1;
  return rssi;
}

byte RFM69::readReg(byte addr)
{
   d7ab4:	b538      	push	{r3, r4, r5, lr}
   d7ab6:	460c      	mov	r4, r1
   d7ab8:	4605      	mov	r5, r0
  select();
   d7aba:	f7ff ffe2 	bl	d7a82 <_ZN5RFM696selectEv>
  SPI1.transfer(addr & 0x7F);
   d7abe:	f004 007f 	and.w	r0, r4, #127	; 0x7f
   d7ac2:	f7ff ffd5 	bl	d7a70 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  byte regval = SPI1.transfer(0);
   d7ac6:	2000      	movs	r0, #0
   d7ac8:	f7ff ffd2 	bl	d7a70 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d7acc:	4604      	mov	r4, r0
  unselect();
   d7ace:	4628      	mov	r0, r5
   d7ad0:	f7ff ffae 	bl	d7a30 <_ZN5RFM698unselectEv>
  return regval;
}
   d7ad4:	4620      	mov	r0, r4
   d7ad6:	bd38      	pop	{r3, r4, r5, pc}

000d7ad8 <_ZN5RFM698writeRegEhh>:

void RFM69::writeReg(byte addr, byte value)
{
   d7ad8:	b570      	push	{r4, r5, r6, lr}
   d7ada:	460e      	mov	r6, r1
   d7adc:	4615      	mov	r5, r2
   d7ade:	4604      	mov	r4, r0
  select();
   d7ae0:	f7ff ffcf 	bl	d7a82 <_ZN5RFM696selectEv>
  SPI1.transfer(addr | 0x80);
   d7ae4:	f046 0080 	orr.w	r0, r6, #128	; 0x80
   d7ae8:	f7ff ffc2 	bl	d7a70 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  SPI1.transfer(value);
   d7aec:	4628      	mov	r0, r5
   d7aee:	f7ff ffbf 	bl	d7a70 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  unselect();
   d7af2:	4620      	mov	r0, r4
}
   d7af4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void RFM69::writeReg(byte addr, byte value)
{
  select();
  SPI1.transfer(addr | 0x80);
  SPI1.transfer(value);
  unselect();
   d7af8:	f7ff bf9a 	b.w	d7a30 <_ZN5RFM698unselectEv>

000d7afc <_ZN5RFM6913setPowerLevelEh>:
}

// set output power: 0=min, 31=max
// this results in a "weaker" transmitted signal, and directly results in a lower RSSI at the receiver
void RFM69::setPowerLevel(byte powerLevel)
{
   d7afc:	b510      	push	{r4, lr}
  _powerLevel = powerLevel;
   d7afe:	7241      	strb	r1, [r0, #9]
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | (_powerLevel > 31 ? 31 : _powerLevel));
   d7b00:	2111      	movs	r1, #17
}

// set output power: 0=min, 31=max
// this results in a "weaker" transmitted signal, and directly results in a lower RSSI at the receiver
void RFM69::setPowerLevel(byte powerLevel)
{
   d7b02:	4604      	mov	r4, r0
  _powerLevel = powerLevel;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | (_powerLevel > 31 ? 31 : _powerLevel));
   d7b04:	f7ff ffd6 	bl	d7ab4 <_ZN5RFM697readRegEh>
   d7b08:	7a62      	ldrb	r2, [r4, #9]
   d7b0a:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
   d7b0e:	2a1f      	cmp	r2, #31
   d7b10:	bf94      	ite	ls
   d7b12:	4302      	orrls	r2, r0
   d7b14:	f040 021f 	orrhi.w	r2, r0, #31
   d7b18:	2111      	movs	r1, #17
   d7b1a:	4620      	mov	r0, r4
}
   d7b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// set output power: 0=min, 31=max
// this results in a "weaker" transmitted signal, and directly results in a lower RSSI at the receiver
void RFM69::setPowerLevel(byte powerLevel)
{
  _powerLevel = powerLevel;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | (_powerLevel > 31 ? 31 : _powerLevel));
   d7b20:	f7ff bfda 	b.w	d7ad8 <_ZN5RFM698writeRegEhh>

000d7b24 <_ZN5RFM698readRSSIEb>:
    unselect();
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
}

int RFM69::readRSSI(bool forceTrigger) {
   d7b24:	b510      	push	{r4, lr}
   d7b26:	4604      	mov	r4, r0
  int rssi = 0;
  if (forceTrigger)
   d7b28:	b149      	cbz	r1, d7b3e <_ZN5RFM698readRSSIEb+0x1a>
  {
    //RSSI trigger not needed if DAGC is in continuous mode
    writeReg(REG_RSSICONFIG, RF_RSSI_START);
   d7b2a:	2201      	movs	r2, #1
   d7b2c:	2123      	movs	r1, #35	; 0x23
   d7b2e:	f7ff ffd3 	bl	d7ad8 <_ZN5RFM698writeRegEhh>
    while ((readReg(REG_RSSICONFIG) & RF_RSSI_DONE) == 0x00); // Wait for RSSI_Ready
   d7b32:	2123      	movs	r1, #35	; 0x23
   d7b34:	4620      	mov	r0, r4
   d7b36:	f7ff ffbd 	bl	d7ab4 <_ZN5RFM697readRegEh>
   d7b3a:	0783      	lsls	r3, r0, #30
   d7b3c:	d5f9      	bpl.n	d7b32 <_ZN5RFM698readRSSIEb+0xe>
  }
  rssi = -readReg(REG_RSSIVALUE);
   d7b3e:	2124      	movs	r1, #36	; 0x24
   d7b40:	4620      	mov	r0, r4
   d7b42:	f7ff ffb7 	bl	d7ab4 <_ZN5RFM697readRegEh>
   d7b46:	4240      	negs	r0, r0
  rssi >>= 1;
  return rssi;
   d7b48:	1040      	asrs	r0, r0, #1
}
   d7b4a:	bd10      	pop	{r4, pc}

000d7b4c <_ZN5RFM6916setHighPowerRegsEb>:
  uint16_t baudRate = 32000000L / speedBPS;;
  
  writeReg(REG_BITRATEMSB, (baudRate >> 8) & 0xFF);
  writeReg(REG_BITRATELSB, (baudRate >> 0) & 0xFF);
}
void RFM69::setHighPowerRegs(bool onOff) {
   d7b4c:	b538      	push	{r3, r4, r5, lr}
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
   d7b4e:	2900      	cmp	r1, #0
   d7b50:	bf14      	ite	ne
   d7b52:	225d      	movne	r2, #93	; 0x5d
   d7b54:	2255      	moveq	r2, #85	; 0x55
   d7b56:	460c      	mov	r4, r1
   d7b58:	215a      	movs	r1, #90	; 0x5a
  uint16_t baudRate = 32000000L / speedBPS;;
  
  writeReg(REG_BITRATEMSB, (baudRate >> 8) & 0xFF);
  writeReg(REG_BITRATELSB, (baudRate >> 0) & 0xFF);
}
void RFM69::setHighPowerRegs(bool onOff) {
   d7b5a:	4605      	mov	r5, r0
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
   d7b5c:	f7ff ffbc 	bl	d7ad8 <_ZN5RFM698writeRegEhh>
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
   d7b60:	2c00      	cmp	r4, #0
   d7b62:	4628      	mov	r0, r5
   d7b64:	bf14      	ite	ne
   d7b66:	227c      	movne	r2, #124	; 0x7c
   d7b68:	2270      	moveq	r2, #112	; 0x70
   d7b6a:	215c      	movs	r1, #92	; 0x5c
}
   d7b6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeReg(REG_BITRATEMSB, (baudRate >> 8) & 0xFF);
  writeReg(REG_BITRATELSB, (baudRate >> 0) & 0xFF);
}
void RFM69::setHighPowerRegs(bool onOff) {
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
   d7b70:	f7ff bfb2 	b.w	d7ad8 <_ZN5RFM698writeRegEhh>

000d7b74 <_ZN5RFM697setModeEh>:
  writeReg(REG_FRFMID, freqHz >> 8);
  writeReg(REG_FRFLSB, freqHz);
}

void RFM69::setMode(byte newMode)
{
   d7b74:	b570      	push	{r4, r5, r6, lr}
	if (newMode == _mode) return; //TODO: can remove this?
   d7b76:	4d28      	ldr	r5, [pc, #160]	; (d7c18 <_ZN5RFM697setModeEh+0xa4>)
   d7b78:	782b      	ldrb	r3, [r5, #0]
   d7b7a:	428b      	cmp	r3, r1
  writeReg(REG_FRFMID, freqHz >> 8);
  writeReg(REG_FRFLSB, freqHz);
}

void RFM69::setMode(byte newMode)
{
   d7b7c:	4604      	mov	r4, r0
   d7b7e:	460e      	mov	r6, r1
	if (newMode == _mode) return; //TODO: can remove this?
   d7b80:	d049      	beq.n	d7c16 <_ZN5RFM697setModeEh+0xa2>

	switch (newMode) {
   d7b82:	2904      	cmp	r1, #4
   d7b84:	d847      	bhi.n	d7c16 <_ZN5RFM697setModeEh+0xa2>
   d7b86:	e8df f001 	tbb	[pc, r1]
   d7b8a:	2c34      	.short	0x2c34
   d7b8c:	1224      	.short	0x1224
   d7b8e:	03          	.byte	0x03
   d7b8f:	00          	.byte	0x00
		case RF69_MODE_TX:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
   d7b90:	2101      	movs	r1, #1
   d7b92:	f7ff ff8f 	bl	d7ab4 <_ZN5RFM697readRegEh>
   d7b96:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d7b9a:	f042 020c 	orr.w	r2, r2, #12
   d7b9e:	2101      	movs	r1, #1
   d7ba0:	4620      	mov	r0, r4
   d7ba2:	f7ff ff99 	bl	d7ad8 <_ZN5RFM698writeRegEhh>
      if (_isRFM69HW) setHighPowerRegs(true);
   d7ba6:	7aa3      	ldrb	r3, [r4, #10]
   d7ba8:	b363      	cbz	r3, d7c04 <_ZN5RFM697setModeEh+0x90>
   d7baa:	2101      	movs	r1, #1
   d7bac:	e00d      	b.n	d7bca <_ZN5RFM697setModeEh+0x56>
			break;
		case RF69_MODE_RX:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
   d7bae:	2101      	movs	r1, #1
   d7bb0:	f7ff ff80 	bl	d7ab4 <_ZN5RFM697readRegEh>
   d7bb4:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d7bb8:	f042 0210 	orr.w	r2, r2, #16
   d7bbc:	2101      	movs	r1, #1
   d7bbe:	4620      	mov	r0, r4
   d7bc0:	f7ff ff8a 	bl	d7ad8 <_ZN5RFM698writeRegEhh>
      if (_isRFM69HW) setHighPowerRegs(false);
   d7bc4:	7aa3      	ldrb	r3, [r4, #10]
   d7bc6:	b1eb      	cbz	r3, d7c04 <_ZN5RFM697setModeEh+0x90>
   d7bc8:	2100      	movs	r1, #0
   d7bca:	4620      	mov	r0, r4
   d7bcc:	f7ff ffbe 	bl	d7b4c <_ZN5RFM6916setHighPowerRegsEb>
   d7bd0:	e018      	b.n	d7c04 <_ZN5RFM697setModeEh+0x90>
			break;
		case RF69_MODE_SYNTH:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SYNTHESIZER);
   d7bd2:	2101      	movs	r1, #1
   d7bd4:	f7ff ff6e 	bl	d7ab4 <_ZN5RFM697readRegEh>
   d7bd8:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d7bdc:	f042 0208 	orr.w	r2, r2, #8
   d7be0:	e00c      	b.n	d7bfc <_ZN5RFM697setModeEh+0x88>
			break;
		case RF69_MODE_STANDBY:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_STANDBY);
   d7be2:	2101      	movs	r1, #1
   d7be4:	f7ff ff66 	bl	d7ab4 <_ZN5RFM697readRegEh>
   d7be8:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d7bec:	f042 0204 	orr.w	r2, r2, #4
   d7bf0:	e004      	b.n	d7bfc <_ZN5RFM697setModeEh+0x88>
			break;
		case RF69_MODE_SLEEP:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
   d7bf2:	2101      	movs	r1, #1
   d7bf4:	f7ff ff5e 	bl	d7ab4 <_ZN5RFM697readRegEh>
   d7bf8:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d7bfc:	2101      	movs	r1, #1
   d7bfe:	4620      	mov	r0, r4
   d7c00:	f7ff ff6a 	bl	d7ad8 <_ZN5RFM698writeRegEhh>
		default: return;
	}

	// we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
	while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // Wait for ModeReady
   d7c04:	782b      	ldrb	r3, [r5, #0]
   d7c06:	b92b      	cbnz	r3, d7c14 <_ZN5RFM697setModeEh+0xa0>
   d7c08:	2127      	movs	r1, #39	; 0x27
   d7c0a:	4620      	mov	r0, r4
   d7c0c:	f7ff ff52 	bl	d7ab4 <_ZN5RFM697readRegEh>
   d7c10:	0603      	lsls	r3, r0, #24
   d7c12:	d5f7      	bpl.n	d7c04 <_ZN5RFM697setModeEh+0x90>

	_mode = newMode;
   d7c14:	702e      	strb	r6, [r5, #0]
   d7c16:	bd70      	pop	{r4, r5, r6, pc}
   d7c18:	2003e184 	.word	0x2003e184

000d7c1c <_ZN5RFM6912receiveBeginEv>:
}

void RFM69::isr0() { selfPointer->interruptHandler(); }

void RFM69::receiveBegin() {
  DATALEN = 0;
   d7c1c:	4a15      	ldr	r2, [pc, #84]	; (d7c74 <_ZN5RFM6912receiveBeginEv+0x58>)
   d7c1e:	2300      	movs	r3, #0
  //digitalWrite(4, 0);
}

void RFM69::isr0() { selfPointer->interruptHandler(); }

void RFM69::receiveBegin() {
   d7c20:	b510      	push	{r4, lr}
  DATALEN = 0;
   d7c22:	7013      	strb	r3, [r2, #0]
  SENDERID = 0;
   d7c24:	4a14      	ldr	r2, [pc, #80]	; (d7c78 <_ZN5RFM6912receiveBeginEv+0x5c>)
   d7c26:	7013      	strb	r3, [r2, #0]
  TARGETID = 0;
   d7c28:	4a14      	ldr	r2, [pc, #80]	; (d7c7c <_ZN5RFM6912receiveBeginEv+0x60>)
   d7c2a:	7013      	strb	r3, [r2, #0]
  PAYLOADLEN = 0;
   d7c2c:	4a14      	ldr	r2, [pc, #80]	; (d7c80 <_ZN5RFM6912receiveBeginEv+0x64>)
   d7c2e:	7013      	strb	r3, [r2, #0]
  ACK_REQUESTED = 0;
   d7c30:	4a14      	ldr	r2, [pc, #80]	; (d7c84 <_ZN5RFM6912receiveBeginEv+0x68>)
   d7c32:	7013      	strb	r3, [r2, #0]
  ACK_RECEIVED = 0;
   d7c34:	4a14      	ldr	r2, [pc, #80]	; (d7c88 <_ZN5RFM6912receiveBeginEv+0x6c>)
   d7c36:	7013      	strb	r3, [r2, #0]
  RSSI = 0;
   d7c38:	4a14      	ldr	r2, [pc, #80]	; (d7c8c <_ZN5RFM6912receiveBeginEv+0x70>)
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
   d7c3a:	2128      	movs	r1, #40	; 0x28
  SENDERID = 0;
  TARGETID = 0;
  PAYLOADLEN = 0;
  ACK_REQUESTED = 0;
  ACK_RECEIVED = 0;
  RSSI = 0;
   d7c3c:	6013      	str	r3, [r2, #0]
  //digitalWrite(4, 0);
}

void RFM69::isr0() { selfPointer->interruptHandler(); }

void RFM69::receiveBegin() {
   d7c3e:	4604      	mov	r4, r0
  TARGETID = 0;
  PAYLOADLEN = 0;
  ACK_REQUESTED = 0;
  ACK_RECEIVED = 0;
  RSSI = 0;
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
   d7c40:	f7ff ff38 	bl	d7ab4 <_ZN5RFM697readRegEh>
   d7c44:	0743      	lsls	r3, r0, #29
   d7c46:	d50a      	bpl.n	d7c5e <_ZN5RFM6912receiveBeginEv+0x42>
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
   d7c48:	213d      	movs	r1, #61	; 0x3d
   d7c4a:	4620      	mov	r0, r4
   d7c4c:	f7ff ff32 	bl	d7ab4 <_ZN5RFM697readRegEh>
   d7c50:	f040 0204 	orr.w	r2, r0, #4
   d7c54:	b2d2      	uxtb	r2, r2
   d7c56:	213d      	movs	r1, #61	; 0x3d
   d7c58:	4620      	mov	r0, r4
   d7c5a:	f7ff ff3d 	bl	d7ad8 <_ZN5RFM698writeRegEhh>
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); //set DIO0 to "PAYLOADREADY" in receive mode
   d7c5e:	4620      	mov	r0, r4
   d7c60:	2125      	movs	r1, #37	; 0x25
   d7c62:	2240      	movs	r2, #64	; 0x40
   d7c64:	f7ff ff38 	bl	d7ad8 <_ZN5RFM698writeRegEhh>
  setMode(RF69_MODE_RX);
   d7c68:	4620      	mov	r0, r4
   d7c6a:	2103      	movs	r1, #3
}
   d7c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ACK_RECEIVED = 0;
  RSSI = 0;
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); //set DIO0 to "PAYLOADREADY" in receive mode
  setMode(RF69_MODE_RX);
   d7c70:	f7ff bf80 	b.w	d7b74 <_ZN5RFM697setModeEh>
   d7c74:	2003e183 	.word	0x2003e183
   d7c78:	2003e13e 	.word	0x2003e13e
   d7c7c:	2003e13c 	.word	0x2003e13c
   d7c80:	2003e144 	.word	0x2003e144
   d7c84:	2003e13d 	.word	0x2003e13d
   d7c88:	2003e145 	.word	0x2003e145
   d7c8c:	2003e138 	.word	0x2003e138

000d7c90 <_ZN5RFM6911receiveDoneEv>:
}

bool RFM69::receiveDone() {
   d7c90:	b510      	push	{r4, lr}
   d7c92:	4604      	mov	r4, r0
// ATOMIC_BLOCK(ATOMIC_FORCEON)
// {
  noInterrupts(); //re-enabled in unselect() via setMode() or via receiveBegin()
   d7c94:	f001 fbd0 	bl	d9438 <_Z12noInterruptsv>
  if (_mode == RF69_MODE_RX && PAYLOADLEN>0)
   d7c98:	4b0b      	ldr	r3, [pc, #44]	; (d7cc8 <_ZN5RFM6911receiveDoneEv+0x38>)
   d7c9a:	781a      	ldrb	r2, [r3, #0]
   d7c9c:	2a03      	cmp	r2, #3
   d7c9e:	d102      	bne.n	d7ca6 <_ZN5RFM6911receiveDoneEv+0x16>
   d7ca0:	4a0a      	ldr	r2, [pc, #40]	; (d7ccc <_ZN5RFM6911receiveDoneEv+0x3c>)
   d7ca2:	7812      	ldrb	r2, [r2, #0]
   d7ca4:	b952      	cbnz	r2, d7cbc <_ZN5RFM6911receiveDoneEv+0x2c>
  {
    setMode(RF69_MODE_STANDBY); //enables interrupts
    return true;
  }
  else if (_mode == RF69_MODE_RX)  //already in RX no payload yet
   d7ca6:	781b      	ldrb	r3, [r3, #0]
   d7ca8:	2b03      	cmp	r3, #3
   d7caa:	d102      	bne.n	d7cb2 <_ZN5RFM6911receiveDoneEv+0x22>
  {
    interrupts(); //explicitly re-enable interrupts
   d7cac:	f001 fbc6 	bl	d943c <_Z10interruptsv>
   d7cb0:	e002      	b.n	d7cb8 <_ZN5RFM6911receiveDoneEv+0x28>
    return false;
  }
  receiveBegin();
   d7cb2:	4620      	mov	r0, r4
   d7cb4:	f7ff ffb2 	bl	d7c1c <_ZN5RFM6912receiveBeginEv>
  return false;
   d7cb8:	2000      	movs	r0, #0
   d7cba:	bd10      	pop	{r4, pc}
// ATOMIC_BLOCK(ATOMIC_FORCEON)
// {
  noInterrupts(); //re-enabled in unselect() via setMode() or via receiveBegin()
  if (_mode == RF69_MODE_RX && PAYLOADLEN>0)
  {
    setMode(RF69_MODE_STANDBY); //enables interrupts
   d7cbc:	4620      	mov	r0, r4
   d7cbe:	2101      	movs	r1, #1
   d7cc0:	f7ff ff58 	bl	d7b74 <_ZN5RFM697setModeEh>
    return true;
   d7cc4:	2001      	movs	r0, #1
    return false;
  }
  receiveBegin();
  return false;
//}
}
   d7cc6:	bd10      	pop	{r4, pc}
   d7cc8:	2003e184 	.word	0x2003e184
   d7ccc:	2003e144 	.word	0x2003e144

000d7cd0 <_ZN5RFM6912setHighPowerEb>:
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

void RFM69::setHighPower(bool onOff) {
  _isRFM69HW = onOff;
  writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
   d7cd0:	2900      	cmp	r1, #0
void RFM69::promiscuous(bool onOff) {
  _promiscuousMode=onOff;
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

void RFM69::setHighPower(bool onOff) {
   d7cd2:	b510      	push	{r4, lr}
   d7cd4:	4604      	mov	r4, r0
  _isRFM69HW = onOff;
   d7cd6:	7281      	strb	r1, [r0, #10]
  writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
   d7cd8:	bf14      	ite	ne
   d7cda:	220f      	movne	r2, #15
   d7cdc:	221a      	moveq	r2, #26
   d7cde:	2113      	movs	r1, #19
   d7ce0:	f7ff fefa 	bl	d7ad8 <_ZN5RFM698writeRegEhh>
  if (_isRFM69HW) //turning ON
   d7ce4:	7aa3      	ldrb	r3, [r4, #10]
   d7ce6:	b143      	cbz	r3, d7cfa <_ZN5RFM6912setHighPowerEb+0x2a>
    writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); //enable P1 & P2 amplifier stages
   d7ce8:	2111      	movs	r1, #17
   d7cea:	4620      	mov	r0, r4
   d7cec:	f7ff fee2 	bl	d7ab4 <_ZN5RFM697readRegEh>
   d7cf0:	f000 021f 	and.w	r2, r0, #31
   d7cf4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
   d7cf8:	e002      	b.n	d7d00 <_ZN5RFM6912setHighPowerEb+0x30>
  else
    writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); //enable P0 only
   d7cfa:	7a62      	ldrb	r2, [r4, #9]
   d7cfc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   d7d00:	4620      	mov	r0, r4
   d7d02:	2111      	movs	r1, #17
}
   d7d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  _isRFM69HW = onOff;
  writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
  if (_isRFM69HW) //turning ON
    writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); //enable P1 & P2 amplifier stages
  else
    writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); //enable P0 only
   d7d08:	f7ff bee6 	b.w	d7ad8 <_ZN5RFM698writeRegEhh>

000d7d0c <_ZN5RFM6916interruptHandlerEv>:
	while (digitalRead(_interruptPin) == 0 && millis()-txStart < RF69_TX_LIMIT_MS); //wait for DIO0 to turn HIGH signalling transmission finish
  //while (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT == 0x00); // Wait for ModeReady
  setMode(RF69_MODE_STANDBY);
}

void RFM69::interruptHandler() {
   d7d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  //pinMode(4, OUTPUT);
  //digitalWrite(4, 1);
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
   d7d10:	4b3d      	ldr	r3, [pc, #244]	; (d7e08 <_ZN5RFM6916interruptHandlerEv+0xfc>)
   d7d12:	781b      	ldrb	r3, [r3, #0]
   d7d14:	2b03      	cmp	r3, #3
	while (digitalRead(_interruptPin) == 0 && millis()-txStart < RF69_TX_LIMIT_MS); //wait for DIO0 to turn HIGH signalling transmission finish
  //while (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT == 0x00); // Wait for ModeReady
  setMode(RF69_MODE_STANDBY);
}

void RFM69::interruptHandler() {
   d7d16:	4604      	mov	r4, r0
  //pinMode(4, OUTPUT);
  //digitalWrite(4, 1);
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
   d7d18:	d114      	bne.n	d7d44 <_ZN5RFM6916interruptHandlerEv+0x38>
   d7d1a:	2128      	movs	r1, #40	; 0x28
   d7d1c:	f7ff feca 	bl	d7ab4 <_ZN5RFM697readRegEh>
   d7d20:	0743      	lsls	r3, r0, #29
   d7d22:	d417      	bmi.n	d7d54 <_ZN5RFM6916interruptHandlerEv+0x48>
   d7d24:	e00e      	b.n	d7d44 <_ZN5RFM6916interruptHandlerEv+0x38>

    for (byte i= 0; i < DATALEN; i++)
    {
      DATA[i] = SPI1.transfer(0);
    }
    if (DATALEN<RF69_MAX_DATA_LEN) DATA[DATALEN]=0; //add null at end of string
   d7d26:	7813      	ldrb	r3, [r2, #0]
   d7d28:	2b3c      	cmp	r3, #60	; 0x3c
   d7d2a:	d804      	bhi.n	d7d36 <_ZN5RFM6916interruptHandlerEv+0x2a>
   d7d2c:	7813      	ldrb	r3, [r2, #0]
   d7d2e:	4a37      	ldr	r2, [pc, #220]	; (d7e0c <_ZN5RFM6916interruptHandlerEv+0x100>)
   d7d30:	b2db      	uxtb	r3, r3
   d7d32:	2100      	movs	r1, #0
   d7d34:	54d1      	strb	r1, [r2, r3]
    unselect();
   d7d36:	4620      	mov	r0, r4
   d7d38:	f7ff fe7a 	bl	d7a30 <_ZN5RFM698unselectEv>
    setMode(RF69_MODE_RX);
   d7d3c:	2103      	movs	r1, #3
   d7d3e:	4620      	mov	r0, r4
   d7d40:	f7ff ff18 	bl	d7b74 <_ZN5RFM697setModeEh>
  }
  RSSI = readRSSI();
   d7d44:	2100      	movs	r1, #0
   d7d46:	4620      	mov	r0, r4
   d7d48:	f7ff feec 	bl	d7b24 <_ZN5RFM698readRSSIEb>
   d7d4c:	4b30      	ldr	r3, [pc, #192]	; (d7e10 <_ZN5RFM6916interruptHandlerEv+0x104>)
   d7d4e:	6018      	str	r0, [r3, #0]
   d7d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  //pinMode(4, OUTPUT);
  //digitalWrite(4, 1);
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
  {
    //RSSI = readRSSI();
    setMode(RF69_MODE_STANDBY);
   d7d54:	2101      	movs	r1, #1
   d7d56:	4620      	mov	r0, r4
   d7d58:	f7ff ff0c 	bl	d7b74 <_ZN5RFM697setModeEh>
    select();
   d7d5c:	4620      	mov	r0, r4
   d7d5e:	f7ff fe90 	bl	d7a82 <_ZN5RFM696selectEv>
    SPI1.transfer(REG_FIFO & 0x7f);
   d7d62:	2000      	movs	r0, #0
   d7d64:	f7ff fe84 	bl	d7a70 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
    PAYLOADLEN = SPI1.transfer(0);
   d7d68:	2000      	movs	r0, #0
   d7d6a:	f7ff fe81 	bl	d7a70 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d7d6e:	4d29      	ldr	r5, [pc, #164]	; (d7e14 <_ZN5RFM6916interruptHandlerEv+0x108>)
   d7d70:	7028      	strb	r0, [r5, #0]
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
   d7d72:	782b      	ldrb	r3, [r5, #0]
   d7d74:	2b42      	cmp	r3, #66	; 0x42
   d7d76:	d814      	bhi.n	d7da2 <_ZN5RFM6916interruptHandlerEv+0x96>
   d7d78:	782b      	ldrb	r3, [r5, #0]
   d7d7a:	b2db      	uxtb	r3, r3
    TARGETID = SPI1.transfer(0);
   d7d7c:	2000      	movs	r0, #0
    //RSSI = readRSSI();
    setMode(RF69_MODE_STANDBY);
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
   d7d7e:	702b      	strb	r3, [r5, #0]
    TARGETID = SPI1.transfer(0);
   d7d80:	f7ff fe76 	bl	d7a70 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d7d84:	4b24      	ldr	r3, [pc, #144]	; (d7e18 <_ZN5RFM6916interruptHandlerEv+0x10c>)
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
   d7d86:	7a22      	ldrb	r2, [r4, #8]
    setMode(RF69_MODE_STANDBY);
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
    TARGETID = SPI1.transfer(0);
   d7d88:	7018      	strb	r0, [r3, #0]
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
   d7d8a:	b932      	cbnz	r2, d7d9a <_ZN5RFM6916interruptHandlerEv+0x8e>
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
    TARGETID = SPI1.transfer(0);
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
   d7d8c:	781a      	ldrb	r2, [r3, #0]
   d7d8e:	79e1      	ldrb	r1, [r4, #7]
   d7d90:	4291      	cmp	r1, r2
   d7d92:	d002      	beq.n	d7d9a <_ZN5RFM6916interruptHandlerEv+0x8e>
   d7d94:	781b      	ldrb	r3, [r3, #0]
   d7d96:	2bff      	cmp	r3, #255	; 0xff
   d7d98:	d105      	bne.n	d7da6 <_ZN5RFM6916interruptHandlerEv+0x9a>
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
   d7d9a:	782b      	ldrb	r3, [r5, #0]
   d7d9c:	2b02      	cmp	r3, #2
   d7d9e:	d902      	bls.n	d7da6 <_ZN5RFM6916interruptHandlerEv+0x9a>
   d7da0:	e00b      	b.n	d7dba <_ZN5RFM6916interruptHandlerEv+0xae>
    //RSSI = readRSSI();
    setMode(RF69_MODE_STANDBY);
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
   d7da2:	2342      	movs	r3, #66	; 0x42
   d7da4:	e7ea      	b.n	d7d7c <_ZN5RFM6916interruptHandlerEv+0x70>
    TARGETID = SPI1.transfer(0);
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
    {
      PAYLOADLEN = 0;
      unselect();
   d7da6:	4620      	mov	r0, r4
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
    TARGETID = SPI1.transfer(0);
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
    {
      PAYLOADLEN = 0;
   d7da8:	2300      	movs	r3, #0
   d7daa:	702b      	strb	r3, [r5, #0]
      unselect();
   d7dac:	f7ff fe40 	bl	d7a30 <_ZN5RFM698unselectEv>
      receiveBegin();
   d7db0:	4620      	mov	r0, r4
    unselect();
    setMode(RF69_MODE_RX);
  }
  RSSI = readRSSI();
  //digitalWrite(4, 0);
}
   d7db2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
    {
      PAYLOADLEN = 0;
      unselect();
      receiveBegin();
   d7db6:	f7ff bf31 	b.w	d7c1c <_ZN5RFM6912receiveBeginEv>
      //digitalWrite(4, 0);
      return;
    }

    DATALEN = PAYLOADLEN - 3;
   d7dba:	4b16      	ldr	r3, [pc, #88]	; (d7e14 <_ZN5RFM6916interruptHandlerEv+0x108>)
   d7dbc:	4e17      	ldr	r6, [pc, #92]	; (d7e1c <_ZN5RFM6916interruptHandlerEv+0x110>)
   d7dbe:	781b      	ldrb	r3, [r3, #0]
    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag

    for (byte i= 0; i < DATALEN; i++)
    {
      DATA[i] = SPI1.transfer(0);
   d7dc0:	4f12      	ldr	r7, [pc, #72]	; (d7e0c <_ZN5RFM6916interruptHandlerEv+0x100>)
      receiveBegin();
      //digitalWrite(4, 0);
      return;
    }

    DATALEN = PAYLOADLEN - 3;
   d7dc2:	3b03      	subs	r3, #3
   d7dc4:	b2db      	uxtb	r3, r3
    SENDERID = SPI1.transfer(0);
   d7dc6:	2000      	movs	r0, #0
      receiveBegin();
      //digitalWrite(4, 0);
      return;
    }

    DATALEN = PAYLOADLEN - 3;
   d7dc8:	7033      	strb	r3, [r6, #0]
    SENDERID = SPI1.transfer(0);
   d7dca:	f7ff fe51 	bl	d7a70 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d7dce:	4b14      	ldr	r3, [pc, #80]	; (d7e20 <_ZN5RFM6916interruptHandlerEv+0x114>)
   d7dd0:	7018      	strb	r0, [r3, #0]
    byte CTLbyte = SPI1.transfer(0);
   d7dd2:	2000      	movs	r0, #0
   d7dd4:	f7ff fe4c 	bl	d7a70 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>

    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
   d7dd8:	4a12      	ldr	r2, [pc, #72]	; (d7e24 <_ZN5RFM6916interruptHandlerEv+0x118>)
   d7dda:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
   d7dde:	b2db      	uxtb	r3, r3
   d7de0:	7013      	strb	r3, [r2, #0]
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag
   d7de2:	f000 0040 	and.w	r0, r0, #64	; 0x40
   d7de6:	4b10      	ldr	r3, [pc, #64]	; (d7e28 <_ZN5RFM6916interruptHandlerEv+0x11c>)
   d7de8:	b2c0      	uxtb	r0, r0
   d7dea:	7018      	strb	r0, [r3, #0]
   d7dec:	2300      	movs	r3, #0

    for (byte i= 0; i < DATALEN; i++)
   d7dee:	7831      	ldrb	r1, [r6, #0]
   d7df0:	4a0a      	ldr	r2, [pc, #40]	; (d7e1c <_ZN5RFM6916interruptHandlerEv+0x110>)
   d7df2:	b2dd      	uxtb	r5, r3
   d7df4:	428d      	cmp	r5, r1
   d7df6:	f103 0801 	add.w	r8, r3, #1
   d7dfa:	d294      	bcs.n	d7d26 <_ZN5RFM6916interruptHandlerEv+0x1a>
    {
      DATA[i] = SPI1.transfer(0);
   d7dfc:	2000      	movs	r0, #0
   d7dfe:	f7ff fe37 	bl	d7a70 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
    byte CTLbyte = SPI1.transfer(0);

    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag

    for (byte i= 0; i < DATALEN; i++)
   d7e02:	4643      	mov	r3, r8
    {
      DATA[i] = SPI1.transfer(0);
   d7e04:	5578      	strb	r0, [r7, r5]
    byte CTLbyte = SPI1.transfer(0);

    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag

    for (byte i= 0; i < DATALEN; i++)
   d7e06:	e7f2      	b.n	d7dee <_ZN5RFM6916interruptHandlerEv+0xe2>
   d7e08:	2003e184 	.word	0x2003e184
   d7e0c:	2003e146 	.word	0x2003e146
   d7e10:	2003e138 	.word	0x2003e138
   d7e14:	2003e144 	.word	0x2003e144
   d7e18:	2003e13c 	.word	0x2003e13c
   d7e1c:	2003e183 	.word	0x2003e183
   d7e20:	2003e13e 	.word	0x2003e13e
   d7e24:	2003e145 	.word	0x2003e145
   d7e28:	2003e13d 	.word	0x2003e13d

000d7e2c <_ZN5RFM697encryptEPKc>:
}

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM69::encrypt(const char* key) {
   d7e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7e2e:	460d      	mov	r5, r1
  setMode(RF69_MODE_STANDBY);
   d7e30:	2101      	movs	r1, #1
}

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM69::encrypt(const char* key) {
   d7e32:	4604      	mov	r4, r0
  setMode(RF69_MODE_STANDBY);
   d7e34:	f7ff fe9e 	bl	d7b74 <_ZN5RFM697setModeEh>
  if (key!=0)
   d7e38:	b18d      	cbz	r5, d7e5e <_ZN5RFM697encryptEPKc+0x32>
  {
    select();
   d7e3a:	4620      	mov	r0, r4
   d7e3c:	f7ff fe21 	bl	d7a82 <_ZN5RFM696selectEv>
    SPI1.transfer(REG_AESKEY1 | 0x80);
   d7e40:	20be      	movs	r0, #190	; 0xbe
   d7e42:	f7ff fe15 	bl	d7a70 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d7e46:	1e6e      	subs	r6, r5, #1
   d7e48:	f105 070f 	add.w	r7, r5, #15
    for (byte i = 0; i<16; i++)
      SPI1.transfer(key[i]);
   d7e4c:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   d7e50:	f7ff fe0e 	bl	d7a70 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  setMode(RF69_MODE_STANDBY);
  if (key!=0)
  {
    select();
    SPI1.transfer(REG_AESKEY1 | 0x80);
    for (byte i = 0; i<16; i++)
   d7e54:	42be      	cmp	r6, r7
   d7e56:	d1f9      	bne.n	d7e4c <_ZN5RFM697encryptEPKc+0x20>
      SPI1.transfer(key[i]);
    unselect();
   d7e58:	4620      	mov	r0, r4
   d7e5a:	f7ff fde9 	bl	d7a30 <_ZN5RFM698unselectEv>
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
   d7e5e:	213d      	movs	r1, #61	; 0x3d
   d7e60:	4620      	mov	r0, r4
   d7e62:	f7ff fe27 	bl	d7ab4 <_ZN5RFM697readRegEh>
   d7e66:	f020 0001 	bic.w	r0, r0, #1
   d7e6a:	2d00      	cmp	r5, #0
   d7e6c:	bf0c      	ite	eq
   d7e6e:	4602      	moveq	r2, r0
   d7e70:	f040 0201 	orrne.w	r2, r0, #1
   d7e74:	b2d2      	uxtb	r2, r2
   d7e76:	4620      	mov	r0, r4
   d7e78:	213d      	movs	r1, #61	; 0x3d
}
   d7e7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    SPI1.transfer(REG_AESKEY1 | 0x80);
    for (byte i = 0; i<16; i++)
      SPI1.transfer(key[i]);
    unselect();
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
   d7e7e:	f7ff be2b 	b.w	d7ad8 <_ZN5RFM698writeRegEhh>
	...

000d7e84 <_ZN5RFM6910initializeEhhh>:
volatile byte RFM69::ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
volatile int RFM69::RSSI; //most accurate RSSI during reception (closest to the reception)
RFM69* RFM69::selfPointer;

bool RFM69::initialize(byte freqBand, byte nodeID, byte networkID)
{
   d7e84:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7e86:	b08f      	sub	sp, #60	; 0x3c
   d7e88:	460d      	mov	r5, r1
   d7e8a:	4604      	mov	r4, r0
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d7e8c:	2100      	movs	r1, #0
volatile byte RFM69::ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
volatile int RFM69::RSSI; //most accurate RSSI during reception (closest to the reception)
RFM69* RFM69::selfPointer;

bool RFM69::initialize(byte freqBand, byte nodeID, byte networkID)
{
   d7e8e:	4616      	mov	r6, r2
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d7e90:	a803      	add	r0, sp, #12
   d7e92:	222a      	movs	r2, #42	; 0x2a
volatile byte RFM69::ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
volatile int RFM69::RSSI; //most accurate RSSI during reception (closest to the reception)
RFM69* RFM69::selfPointer;

bool RFM69::initialize(byte freqBand, byte nodeID, byte networkID)
{
   d7e94:	461f      	mov	r7, r3
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d7e96:	f002 ff0b 	bl	dacb0 <memset>
   d7e9a:	2301      	movs	r3, #1
   d7e9c:	f88d 300c 	strb.w	r3, [sp, #12]
   d7ea0:	2303      	movs	r3, #3
   d7ea2:	f88d 3010 	strb.w	r3, [sp, #16]
   d7ea6:	f88d 3015 	strb.w	r3, [sp, #21]
   d7eaa:	2306      	movs	r3, #6
   d7eac:	f88d 3016 	strb.w	r3, [sp, #22]
   d7eb0:	2333      	movs	r3, #51	; 0x33
   d7eb2:	f88d 3017 	strb.w	r3, [sp, #23]
   d7eb6:	2307      	movs	r3, #7
   d7eb8:	f88d 3018 	strb.w	r3, [sp, #24]
   d7ebc:	2308      	movs	r3, #8
   d7ebe:	f88d 301a 	strb.w	r3, [sp, #26]
   d7ec2:	2309      	movs	r3, #9
   d7ec4:	f88d 301c 	strb.w	r3, [sp, #28]
   d7ec8:	2319      	movs	r3, #25
   d7eca:	f88d 301e 	strb.w	r3, [sp, #30]
   d7ece:	2325      	movs	r3, #37	; 0x25
   d7ed0:	f88d 3020 	strb.w	r3, [sp, #32]
   d7ed4:	2329      	movs	r3, #41	; 0x29
   d7ed6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   d7eda:	23dc      	movs	r3, #220	; 0xdc
   d7edc:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   d7ee0:	232e      	movs	r3, #46	; 0x2e
   d7ee2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d7ee6:	2388      	movs	r3, #136	; 0x88
   d7ee8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   d7eec:	232f      	movs	r3, #47	; 0x2f
   d7eee:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   d7ef2:	232d      	movs	r3, #45	; 0x2d
   d7ef4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   d7ef8:	2337      	movs	r3, #55	; 0x37
   d7efa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   d7efe:	2390      	movs	r3, #144	; 0x90
   d7f00:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d7f04:	2338      	movs	r3, #56	; 0x38
   d7f06:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   d7f0a:	233c      	movs	r3, #60	; 0x3c
   d7f0c:	2204      	movs	r2, #4
   d7f0e:	2102      	movs	r1, #2
   d7f10:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
   d7f14:	238f      	movs	r3, #143	; 0x8f
   d7f16:	f88d 200d 	strb.w	r2, [sp, #13]
   d7f1a:	f88d 100e 	strb.w	r1, [sp, #14]
   d7f1e:	f88d 1011 	strb.w	r1, [sp, #17]
   d7f22:	f88d 2012 	strb.w	r2, [sp, #18]
   d7f26:	2105      	movs	r1, #5
   d7f28:	2240      	movs	r2, #64	; 0x40
   d7f2a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   d7f2e:	233d      	movs	r3, #61	; 0x3d
   d7f30:	f88d 2013 	strb.w	r2, [sp, #19]
   d7f34:	f88d 1014 	strb.w	r1, [sp, #20]
   d7f38:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
   d7f3c:	2142      	movs	r1, #66	; 0x42
   d7f3e:	2230      	movs	r2, #48	; 0x30
   d7f40:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   d7f44:	2312      	movs	r3, #18
   d7f46:	f88d 101f 	strb.w	r1, [sp, #31]
   d7f4a:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   d7f4e:	f88d 102d 	strb.w	r1, [sp, #45]	; 0x2d
   d7f52:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   d7f56:	236f      	movs	r3, #111	; 0x6f
   d7f58:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   d7f5c:	2d1f      	cmp	r5, #31
   d7f5e:	f04f 03ff 	mov.w	r3, #255	; 0xff
   d7f62:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   d7f66:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   d7f6a:	d006      	beq.n	d7f7a <_ZN5RFM6910initializeEhhh+0xf6>
   d7f6c:	2d2b      	cmp	r5, #43	; 0x2b
   d7f6e:	d006      	beq.n	d7f7e <_ZN5RFM6910initializeEhhh+0xfa>
   d7f70:	2d56      	cmp	r5, #86	; 0x56
   d7f72:	bf0c      	ite	eq
   d7f74:	22d9      	moveq	r2, #217	; 0xd9
   d7f76:	22e4      	movne	r2, #228	; 0xe4
   d7f78:	e002      	b.n	d7f80 <_ZN5RFM6910initializeEhhh+0xfc>
   d7f7a:	224e      	movs	r2, #78	; 0x4e
   d7f7c:	e000      	b.n	d7f80 <_ZN5RFM6910initializeEhhh+0xfc>
   d7f7e:	226c      	movs	r2, #108	; 0x6c
   d7f80:	2d1f      	cmp	r5, #31
   d7f82:	f88d 2019 	strb.w	r2, [sp, #25]
   d7f86:	d006      	beq.n	d7f96 <_ZN5RFM6910initializeEhhh+0x112>
   d7f88:	2d2b      	cmp	r5, #43	; 0x2b
   d7f8a:	d006      	beq.n	d7f9a <_ZN5RFM6910initializeEhhh+0x116>
   d7f8c:	2d56      	cmp	r5, #86	; 0x56
   d7f8e:	bf14      	ite	ne
   d7f90:	22c0      	movne	r2, #192	; 0xc0
   d7f92:	2200      	moveq	r2, #0
   d7f94:	e002      	b.n	d7f9c <_ZN5RFM6910initializeEhhh+0x118>
   d7f96:	22c0      	movs	r2, #192	; 0xc0
   d7f98:	e000      	b.n	d7f9c <_ZN5RFM6910initializeEhhh+0x118>
   d7f9a:	2240      	movs	r2, #64	; 0x40

  pinMode(_slaveSelectPin, OUTPUT);
   d7f9c:	2101      	movs	r1, #1
   d7f9e:	7920      	ldrb	r0, [r4, #4]
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d7fa0:	f88d 201b 	strb.w	r2, [sp, #27]
   d7fa4:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29

  pinMode(_slaveSelectPin, OUTPUT);
   d7fa8:	f002 f804 	bl	d9fb4 <pinMode>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d7fac:	f7ff fd4a 	bl	d7a44 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d7fb0:	f000 fc46 	bl	d8840 <_ZN8SPIClass5beginEv>
   d7fb4:	f000 f952 	bl	d825c <HAL_Timer_Get_Milli_Seconds>
   d7fb8:	4605      	mov	r5, r0
  // Set time out to 50ms
  #define TIME_OUT 50
  
  start_to = millis() ;

  do writeReg(REG_SYNCVALUE1, 0xaa); while (readReg(REG_SYNCVALUE1) != 0xaa && millis()-start_to < TIME_OUT);
   d7fba:	22aa      	movs	r2, #170	; 0xaa
   d7fbc:	212f      	movs	r1, #47	; 0x2f
   d7fbe:	4620      	mov	r0, r4
   d7fc0:	f7ff fd8a 	bl	d7ad8 <_ZN5RFM698writeRegEhh>
   d7fc4:	212f      	movs	r1, #47	; 0x2f
   d7fc6:	4620      	mov	r0, r4
   d7fc8:	f7ff fd74 	bl	d7ab4 <_ZN5RFM697readRegEh>
   d7fcc:	28aa      	cmp	r0, #170	; 0xaa
   d7fce:	d004      	beq.n	d7fda <_ZN5RFM6910initializeEhhh+0x156>
   d7fd0:	f000 f944 	bl	d825c <HAL_Timer_Get_Milli_Seconds>
   d7fd4:	1b40      	subs	r0, r0, r5
   d7fd6:	2831      	cmp	r0, #49	; 0x31
   d7fd8:	d9ef      	bls.n	d7fba <_ZN5RFM6910initializeEhhh+0x136>
   d7fda:	f000 f93f 	bl	d825c <HAL_Timer_Get_Milli_Seconds>
  if (millis()-start_to >= TIME_OUT) return (false);
   d7fde:	1b40      	subs	r0, r0, r5
   d7fe0:	2831      	cmp	r0, #49	; 0x31
   d7fe2:	d82d      	bhi.n	d8040 <_ZN5RFM6910initializeEhhh+0x1bc>
   d7fe4:	f000 f93a 	bl	d825c <HAL_Timer_Get_Milli_Seconds>
   d7fe8:	4605      	mov	r5, r0
    
  // Set time out 
  start_to = millis()  ;  
	do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis()-start_to < TIME_OUT);
   d7fea:	2255      	movs	r2, #85	; 0x55
   d7fec:	212f      	movs	r1, #47	; 0x2f
   d7fee:	4620      	mov	r0, r4
   d7ff0:	f7ff fd72 	bl	d7ad8 <_ZN5RFM698writeRegEhh>
   d7ff4:	212f      	movs	r1, #47	; 0x2f
   d7ff6:	4620      	mov	r0, r4
   d7ff8:	f7ff fd5c 	bl	d7ab4 <_ZN5RFM697readRegEh>
   d7ffc:	2855      	cmp	r0, #85	; 0x55
   d7ffe:	d021      	beq.n	d8044 <_ZN5RFM6910initializeEhhh+0x1c0>
   d8000:	f000 f92c 	bl	d825c <HAL_Timer_Get_Milli_Seconds>
   d8004:	1b40      	subs	r0, r0, r5
   d8006:	2831      	cmp	r0, #49	; 0x31
   d8008:	d9ef      	bls.n	d7fea <_ZN5RFM6910initializeEhhh+0x166>
   d800a:	e01b      	b.n	d8044 <_ZN5RFM6910initializeEhhh+0x1c0>
  for (byte i = 0; CONFIG[i][0] != 255; i++)
    writeReg(CONFIG[i][0], CONFIG[i][1]);

  // Encryption is persistent between resets and can trip you up during debugging.
  // Disable it during initialization so we always start from a known state.
  encrypt(0);
   d800c:	2100      	movs	r1, #0
   d800e:	4620      	mov	r0, r4
   d8010:	f7ff ff0c 	bl	d7e2c <_ZN5RFM697encryptEPKc>

  setHighPower(_isRFM69HW); //called regardless if it's a RFM69W or RFM69HW
   d8014:	7aa1      	ldrb	r1, [r4, #10]
   d8016:	4620      	mov	r0, r4
   d8018:	f7ff fe5a 	bl	d7cd0 <_ZN5RFM6912setHighPowerEb>
  setMode(RF69_MODE_STANDBY);
   d801c:	2101      	movs	r1, #1
   d801e:	4620      	mov	r0, r4
   d8020:	f7ff fda8 	bl	d7b74 <_ZN5RFM697setModeEh>
   d8024:	f000 f91a 	bl	d825c <HAL_Timer_Get_Milli_Seconds>
   d8028:	4605      	mov	r5, r0
  // Set time out 
  start_to = millis() ;
	while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis()-start_to < TIME_OUT); // Wait for ModeReady
   d802a:	2127      	movs	r1, #39	; 0x27
   d802c:	4620      	mov	r0, r4
   d802e:	f7ff fd41 	bl	d7ab4 <_ZN5RFM697readRegEh>
   d8032:	0603      	lsls	r3, r0, #24
   d8034:	d51b      	bpl.n	d806e <_ZN5RFM6910initializeEhhh+0x1ea>
   d8036:	f000 f911 	bl	d825c <HAL_Timer_Get_Milli_Seconds>
  if (millis()-start_to >= TIME_OUT) return (false);
   d803a:	1b40      	subs	r0, r0, r5
   d803c:	2831      	cmp	r0, #49	; 0x31
   d803e:	d91c      	bls.n	d807a <_ZN5RFM6910initializeEhhh+0x1f6>
  // picking a non-interrupt enabled pin will prevent proper initialization
  // code thanks to @ScruffR - https://community.particle.io/t/how-to-make-rfm69-work-on-photon-solved-new-library-rfm69-particle/26497/93?u=bloukingfisher
  if (!attachInterrupt(_interruptNum, RFM69::isr0, RISING)) return false;
   d8040:	2000      	movs	r0, #0
   d8042:	e028      	b.n	d8096 <_ZN5RFM6910initializeEhhh+0x212>
   d8044:	f000 f90a 	bl	d825c <HAL_Timer_Get_Milli_Seconds>
  if (millis()-start_to >= TIME_OUT) return (false);
    
  // Set time out 
  start_to = millis()  ;  
	do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis()-start_to < TIME_OUT);
  if (millis()-start_to >= TIME_OUT) return (false);
   d8048:	1b40      	subs	r0, r0, r5
   d804a:	2831      	cmp	r0, #49	; 0x31
   d804c:	d8f8      	bhi.n	d8040 <_ZN5RFM6910initializeEhhh+0x1bc>
   d804e:	2500      	movs	r5, #0
  for (byte i = 0; CONFIG[i][0] != 255; i++)
   d8050:	b2eb      	uxtb	r3, r5
   d8052:	aa0e      	add	r2, sp, #56	; 0x38
   d8054:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d8058:	3501      	adds	r5, #1
   d805a:	f813 1c2c 	ldrb.w	r1, [r3, #-44]
   d805e:	29ff      	cmp	r1, #255	; 0xff
   d8060:	d0d4      	beq.n	d800c <_ZN5RFM6910initializeEhhh+0x188>
    writeReg(CONFIG[i][0], CONFIG[i][1]);
   d8062:	f813 2c2b 	ldrb.w	r2, [r3, #-43]
   d8066:	4620      	mov	r0, r4
   d8068:	f7ff fd36 	bl	d7ad8 <_ZN5RFM698writeRegEhh>
    
  // Set time out 
  start_to = millis()  ;  
	do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis()-start_to < TIME_OUT);
  if (millis()-start_to >= TIME_OUT) return (false);
  for (byte i = 0; CONFIG[i][0] != 255; i++)
   d806c:	e7f0      	b.n	d8050 <_ZN5RFM6910initializeEhhh+0x1cc>
   d806e:	f000 f8f5 	bl	d825c <HAL_Timer_Get_Milli_Seconds>

  setHighPower(_isRFM69HW); //called regardless if it's a RFM69W or RFM69HW
  setMode(RF69_MODE_STANDBY);
  // Set time out 
  start_to = millis() ;
	while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis()-start_to < TIME_OUT); // Wait for ModeReady
   d8072:	1b40      	subs	r0, r0, r5
   d8074:	2831      	cmp	r0, #49	; 0x31
   d8076:	d9d8      	bls.n	d802a <_ZN5RFM6910initializeEhhh+0x1a6>
   d8078:	e7dd      	b.n	d8036 <_ZN5RFM6910initializeEhhh+0x1b2>
  if (millis()-start_to >= TIME_OUT) return (false);
  // picking a non-interrupt enabled pin will prevent proper initialization
  // code thanks to @ScruffR - https://community.particle.io/t/how-to-make-rfm69-work-on-photon-solved-new-library-rfm69-particle/26497/93?u=bloukingfisher
  if (!attachInterrupt(_interruptNum, RFM69::isr0, RISING)) return false;
   d807a:	2300      	movs	r3, #0
   d807c:	9300      	str	r3, [sp, #0]
   d807e:	79a0      	ldrb	r0, [r4, #6]
   d8080:	4906      	ldr	r1, [pc, #24]	; (d809c <_ZN5RFM6910initializeEhhh+0x218>)
   d8082:	f04f 33ff 	mov.w	r3, #4294967295
   d8086:	2201      	movs	r2, #1
   d8088:	f001 f9ae 	bl	d93e8 <_Z15attachInterrupttPFvvE13InterruptModeah>
   d808c:	2800      	cmp	r0, #0
   d808e:	d0d7      	beq.n	d8040 <_ZN5RFM6910initializeEhhh+0x1bc>

  selfPointer = this;
   d8090:	4b03      	ldr	r3, [pc, #12]	; (d80a0 <_ZN5RFM6910initializeEhhh+0x21c>)
  _address = nodeID;
   d8092:	71e6      	strb	r6, [r4, #7]
  if (millis()-start_to >= TIME_OUT) return (false);
  // picking a non-interrupt enabled pin will prevent proper initialization
  // code thanks to @ScruffR - https://community.particle.io/t/how-to-make-rfm69-work-on-photon-solved-new-library-rfm69-particle/26497/93?u=bloukingfisher
  if (!attachInterrupt(_interruptNum, RFM69::isr0, RISING)) return false;

  selfPointer = this;
   d8094:	601c      	str	r4, [r3, #0]
  _address = nodeID;
  return true;
}
   d8096:	b00f      	add	sp, #60	; 0x3c
   d8098:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d809a:	bf00      	nop
   d809c:	000d7a21 	.word	0x000d7a21
   d80a0:	2003e140 	.word	0x2003e140

000d80a4 <_GLOBAL__sub_I__ZN5RFM694DATAE>:
   d80a4:	f000 b812 	b.w	d80cc <HAL_Pin_Map>

000d80a8 <_GLOBAL__sub_I__ZN9RFM69_ATC18ACK_RSSI_REQUESTEDE>:
   d80a8:	f000 b810 	b.w	d80cc <HAL_Pin_Map>

000d80ac <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d80ac:	b508      	push	{r3, lr}
   d80ae:	4b02      	ldr	r3, [pc, #8]	; (d80b8 <netdb_freeaddrinfo+0xc>)
   d80b0:	681b      	ldr	r3, [r3, #0]
   d80b2:	689b      	ldr	r3, [r3, #8]
   d80b4:	9301      	str	r3, [sp, #4]
   d80b6:	bd08      	pop	{r3, pc}
   d80b8:	00030268 	.word	0x00030268

000d80bc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d80bc:	b508      	push	{r3, lr}
   d80be:	4b02      	ldr	r3, [pc, #8]	; (d80c8 <netdb_getaddrinfo+0xc>)
   d80c0:	681b      	ldr	r3, [r3, #0]
   d80c2:	68db      	ldr	r3, [r3, #12]
   d80c4:	9301      	str	r3, [sp, #4]
   d80c6:	bd08      	pop	{r3, pc}
   d80c8:	00030268 	.word	0x00030268

000d80cc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d80cc:	b508      	push	{r3, lr}
   d80ce:	4b02      	ldr	r3, [pc, #8]	; (d80d8 <HAL_Pin_Map+0xc>)
   d80d0:	681b      	ldr	r3, [r3, #0]
   d80d2:	681b      	ldr	r3, [r3, #0]
   d80d4:	9301      	str	r3, [sp, #4]
   d80d6:	bd08      	pop	{r3, pc}
   d80d8:	0003022c 	.word	0x0003022c

000d80dc <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d80dc:	b508      	push	{r3, lr}
   d80de:	4b02      	ldr	r3, [pc, #8]	; (d80e8 <HAL_Pin_Mode+0xc>)
   d80e0:	681b      	ldr	r3, [r3, #0]
   d80e2:	689b      	ldr	r3, [r3, #8]
   d80e4:	9301      	str	r3, [sp, #4]
   d80e6:	bd08      	pop	{r3, pc}
   d80e8:	0003022c 	.word	0x0003022c

000d80ec <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d80ec:	b508      	push	{r3, lr}
   d80ee:	4b02      	ldr	r3, [pc, #8]	; (d80f8 <HAL_Get_Pin_Mode+0xc>)
   d80f0:	681b      	ldr	r3, [r3, #0]
   d80f2:	68db      	ldr	r3, [r3, #12]
   d80f4:	9301      	str	r3, [sp, #4]
   d80f6:	bd08      	pop	{r3, pc}
   d80f8:	0003022c 	.word	0x0003022c

000d80fc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d80fc:	b508      	push	{r3, lr}
   d80fe:	4b02      	ldr	r3, [pc, #8]	; (d8108 <HAL_GPIO_Write+0xc>)
   d8100:	681b      	ldr	r3, [r3, #0]
   d8102:	691b      	ldr	r3, [r3, #16]
   d8104:	9301      	str	r3, [sp, #4]
   d8106:	bd08      	pop	{r3, pc}
   d8108:	0003022c 	.word	0x0003022c

000d810c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d810c:	b508      	push	{r3, lr}
   d810e:	4b02      	ldr	r3, [pc, #8]	; (d8118 <HAL_GPIO_Read+0xc>)
   d8110:	681b      	ldr	r3, [r3, #0]
   d8112:	695b      	ldr	r3, [r3, #20]
   d8114:	9301      	str	r3, [sp, #4]
   d8116:	bd08      	pop	{r3, pc}
   d8118:	0003022c 	.word	0x0003022c

000d811c <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d811c:	b508      	push	{r3, lr}
   d811e:	4b02      	ldr	r3, [pc, #8]	; (d8128 <HAL_Interrupts_Attach+0xc>)
   d8120:	681b      	ldr	r3, [r3, #0]
   d8122:	699b      	ldr	r3, [r3, #24]
   d8124:	9301      	str	r3, [sp, #4]
   d8126:	bd08      	pop	{r3, pc}
   d8128:	0003022c 	.word	0x0003022c

000d812c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d812c:	b508      	push	{r3, lr}
   d812e:	4b02      	ldr	r3, [pc, #8]	; (d8138 <HAL_Interrupts_Detach+0xc>)
   d8130:	681b      	ldr	r3, [r3, #0]
   d8132:	69db      	ldr	r3, [r3, #28]
   d8134:	9301      	str	r3, [sp, #4]
   d8136:	bd08      	pop	{r3, pc}
   d8138:	0003022c 	.word	0x0003022c

000d813c <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d813c:	b508      	push	{r3, lr}
   d813e:	4b02      	ldr	r3, [pc, #8]	; (d8148 <HAL_Interrupts_Enable_All+0xc>)
   d8140:	681b      	ldr	r3, [r3, #0]
   d8142:	6a1b      	ldr	r3, [r3, #32]
   d8144:	9301      	str	r3, [sp, #4]
   d8146:	bd08      	pop	{r3, pc}
   d8148:	0003022c 	.word	0x0003022c

000d814c <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d814c:	b508      	push	{r3, lr}
   d814e:	4b02      	ldr	r3, [pc, #8]	; (d8158 <HAL_Interrupts_Disable_All+0xc>)
   d8150:	681b      	ldr	r3, [r3, #0]
   d8152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8154:	9301      	str	r3, [sp, #4]
   d8156:	bd08      	pop	{r3, pc}
   d8158:	0003022c 	.word	0x0003022c

000d815c <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d815c:	b508      	push	{r3, lr}
   d815e:	4b02      	ldr	r3, [pc, #8]	; (d8168 <HAL_SPI_Begin+0xc>)
   d8160:	681b      	ldr	r3, [r3, #0]
   d8162:	681b      	ldr	r3, [r3, #0]
   d8164:	9301      	str	r3, [sp, #4]
   d8166:	bd08      	pop	{r3, pc}
   d8168:	00030230 	.word	0x00030230

000d816c <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d816c:	b508      	push	{r3, lr}
   d816e:	4b02      	ldr	r3, [pc, #8]	; (d8178 <HAL_SPI_Set_Bit_Order+0xc>)
   d8170:	681b      	ldr	r3, [r3, #0]
   d8172:	689b      	ldr	r3, [r3, #8]
   d8174:	9301      	str	r3, [sp, #4]
   d8176:	bd08      	pop	{r3, pc}
   d8178:	00030230 	.word	0x00030230

000d817c <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d817c:	b508      	push	{r3, lr}
   d817e:	4b02      	ldr	r3, [pc, #8]	; (d8188 <HAL_SPI_Set_Data_Mode+0xc>)
   d8180:	681b      	ldr	r3, [r3, #0]
   d8182:	68db      	ldr	r3, [r3, #12]
   d8184:	9301      	str	r3, [sp, #4]
   d8186:	bd08      	pop	{r3, pc}
   d8188:	00030230 	.word	0x00030230

000d818c <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d818c:	b508      	push	{r3, lr}
   d818e:	4b02      	ldr	r3, [pc, #8]	; (d8198 <HAL_SPI_Set_Clock_Divider+0xc>)
   d8190:	681b      	ldr	r3, [r3, #0]
   d8192:	691b      	ldr	r3, [r3, #16]
   d8194:	9301      	str	r3, [sp, #4]
   d8196:	bd08      	pop	{r3, pc}
   d8198:	00030230 	.word	0x00030230

000d819c <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d819c:	b508      	push	{r3, lr}
   d819e:	4b02      	ldr	r3, [pc, #8]	; (d81a8 <HAL_SPI_Send_Receive_Data+0xc>)
   d81a0:	681b      	ldr	r3, [r3, #0]
   d81a2:	695b      	ldr	r3, [r3, #20]
   d81a4:	9301      	str	r3, [sp, #4]
   d81a6:	bd08      	pop	{r3, pc}
   d81a8:	00030230 	.word	0x00030230

000d81ac <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d81ac:	b508      	push	{r3, lr}
   d81ae:	4b02      	ldr	r3, [pc, #8]	; (d81b8 <HAL_SPI_Init+0xc>)
   d81b0:	681b      	ldr	r3, [r3, #0]
   d81b2:	69db      	ldr	r3, [r3, #28]
   d81b4:	9301      	str	r3, [sp, #4]
   d81b6:	bd08      	pop	{r3, pc}
   d81b8:	00030230 	.word	0x00030230

000d81bc <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d81bc:	b508      	push	{r3, lr}
   d81be:	4b02      	ldr	r3, [pc, #8]	; (d81c8 <HAL_SPI_Is_Enabled+0xc>)
   d81c0:	681b      	ldr	r3, [r3, #0]
   d81c2:	6a1b      	ldr	r3, [r3, #32]
   d81c4:	9301      	str	r3, [sp, #4]
   d81c6:	bd08      	pop	{r3, pc}
   d81c8:	00030230 	.word	0x00030230

000d81cc <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d81cc:	b508      	push	{r3, lr}
   d81ce:	4b02      	ldr	r3, [pc, #8]	; (d81d8 <HAL_SPI_Info+0xc>)
   d81d0:	681b      	ldr	r3, [r3, #0]
   d81d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d81d4:	9301      	str	r3, [sp, #4]
   d81d6:	bd08      	pop	{r3, pc}
   d81d8:	00030230 	.word	0x00030230

000d81dc <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d81dc:	b508      	push	{r3, lr}
   d81de:	4b02      	ldr	r3, [pc, #8]	; (d81e8 <HAL_SPI_DMA_Transfer+0xc>)
   d81e0:	681b      	ldr	r3, [r3, #0]
   d81e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d81e4:	9301      	str	r3, [sp, #4]
   d81e6:	bd08      	pop	{r3, pc}
   d81e8:	00030230 	.word	0x00030230

000d81ec <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d81ec:	b508      	push	{r3, lr}
   d81ee:	4b02      	ldr	r3, [pc, #8]	; (d81f8 <HAL_SPI_DMA_Transfer_Status+0xc>)
   d81f0:	681b      	ldr	r3, [r3, #0]
   d81f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d81f4:	9301      	str	r3, [sp, #4]
   d81f6:	bd08      	pop	{r3, pc}
   d81f8:	00030230 	.word	0x00030230

000d81fc <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d81fc:	b508      	push	{r3, lr}
   d81fe:	4b02      	ldr	r3, [pc, #8]	; (d8208 <HAL_SPI_Set_Settings+0xc>)
   d8200:	681b      	ldr	r3, [r3, #0]
   d8202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8204:	9301      	str	r3, [sp, #4]
   d8206:	bd08      	pop	{r3, pc}
   d8208:	00030230 	.word	0x00030230

000d820c <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d820c:	b508      	push	{r3, lr}
   d820e:	4b02      	ldr	r3, [pc, #8]	; (d8218 <HAL_SPI_Acquire+0xc>)
   d8210:	681b      	ldr	r3, [r3, #0]
   d8212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8214:	9301      	str	r3, [sp, #4]
   d8216:	bd08      	pop	{r3, pc}
   d8218:	00030230 	.word	0x00030230

000d821c <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d821c:	b508      	push	{r3, lr}
   d821e:	4b02      	ldr	r3, [pc, #8]	; (d8228 <HAL_SPI_Release+0xc>)
   d8220:	681b      	ldr	r3, [r3, #0]
   d8222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8224:	9301      	str	r3, [sp, #4]
   d8226:	bd08      	pop	{r3, pc}
   d8228:	00030230 	.word	0x00030230

000d822c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d822c:	b508      	push	{r3, lr}
   d822e:	4b02      	ldr	r3, [pc, #8]	; (d8238 <if_index_to_name+0xc>)
   d8230:	681b      	ldr	r3, [r3, #0]
   d8232:	695b      	ldr	r3, [r3, #20]
   d8234:	9301      	str	r3, [sp, #4]
   d8236:	bd08      	pop	{r3, pc}
   d8238:	0003026c 	.word	0x0003026c

000d823c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d823c:	b508      	push	{r3, lr}
   d823e:	4b02      	ldr	r3, [pc, #8]	; (d8248 <HAL_RNG_GetRandomNumber+0xc>)
   d8240:	681b      	ldr	r3, [r3, #0]
   d8242:	685b      	ldr	r3, [r3, #4]
   d8244:	9301      	str	r3, [sp, #4]
   d8246:	bd08      	pop	{r3, pc}
   d8248:	00030218 	.word	0x00030218

000d824c <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d824c:	b508      	push	{r3, lr}
   d824e:	4b02      	ldr	r3, [pc, #8]	; (d8258 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d8250:	681b      	ldr	r3, [r3, #0]
   d8252:	691b      	ldr	r3, [r3, #16]
   d8254:	9301      	str	r3, [sp, #4]
   d8256:	bd08      	pop	{r3, pc}
   d8258:	00030218 	.word	0x00030218

000d825c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d825c:	b508      	push	{r3, lr}
   d825e:	4b02      	ldr	r3, [pc, #8]	; (d8268 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d8260:	681b      	ldr	r3, [r3, #0]
   d8262:	695b      	ldr	r3, [r3, #20]
   d8264:	9301      	str	r3, [sp, #4]
   d8266:	bd08      	pop	{r3, pc}
   d8268:	00030218 	.word	0x00030218

000d826c <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d826c:	b508      	push	{r3, lr}
   d826e:	4b02      	ldr	r3, [pc, #8]	; (d8278 <HAL_RTC_Get_UnixTime+0xc>)
   d8270:	681b      	ldr	r3, [r3, #0]
   d8272:	69db      	ldr	r3, [r3, #28]
   d8274:	9301      	str	r3, [sp, #4]
   d8276:	bd08      	pop	{r3, pc}
   d8278:	00030218 	.word	0x00030218

000d827c <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d827c:	b508      	push	{r3, lr}
   d827e:	4b02      	ldr	r3, [pc, #8]	; (d8288 <HAL_EEPROM_Init+0xc>)
   d8280:	681b      	ldr	r3, [r3, #0]
   d8282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8284:	9301      	str	r3, [sp, #4]
   d8286:	bd08      	pop	{r3, pc}
   d8288:	00030218 	.word	0x00030218

000d828c <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d828c:	b508      	push	{r3, lr}
   d828e:	4b02      	ldr	r3, [pc, #8]	; (d8298 <HAL_EEPROM_Get+0xc>)
   d8290:	681b      	ldr	r3, [r3, #0]
   d8292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8294:	9301      	str	r3, [sp, #4]
   d8296:	bd08      	pop	{r3, pc}
   d8298:	00030218 	.word	0x00030218

000d829c <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d829c:	b508      	push	{r3, lr}
   d829e:	4b02      	ldr	r3, [pc, #8]	; (d82a8 <HAL_EEPROM_Put+0xc>)
   d82a0:	681b      	ldr	r3, [r3, #0]
   d82a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d82a4:	9301      	str	r3, [sp, #4]
   d82a6:	bd08      	pop	{r3, pc}
   d82a8:	00030218 	.word	0x00030218

000d82ac <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d82ac:	b508      	push	{r3, lr}
   d82ae:	4b02      	ldr	r3, [pc, #8]	; (d82b8 <HAL_RTC_Time_Is_Valid+0xc>)
   d82b0:	681b      	ldr	r3, [r3, #0]
   d82b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d82b4:	9301      	str	r3, [sp, #4]
   d82b6:	bd08      	pop	{r3, pc}
   d82b8:	00030218 	.word	0x00030218

000d82bc <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d82bc:	b508      	push	{r3, lr}
   d82be:	4b02      	ldr	r3, [pc, #8]	; (d82c8 <os_thread_is_current+0xc>)
   d82c0:	681b      	ldr	r3, [r3, #0]
   d82c2:	689b      	ldr	r3, [r3, #8]
   d82c4:	9301      	str	r3, [sp, #4]
   d82c6:	bd08      	pop	{r3, pc}
   d82c8:	00030248 	.word	0x00030248

000d82cc <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d82cc:	b508      	push	{r3, lr}
   d82ce:	4b02      	ldr	r3, [pc, #8]	; (d82d8 <os_thread_yield+0xc>)
   d82d0:	681b      	ldr	r3, [r3, #0]
   d82d2:	68db      	ldr	r3, [r3, #12]
   d82d4:	9301      	str	r3, [sp, #4]
   d82d6:	bd08      	pop	{r3, pc}
   d82d8:	00030248 	.word	0x00030248

000d82dc <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d82dc:	b508      	push	{r3, lr}
   d82de:	4b02      	ldr	r3, [pc, #8]	; (d82e8 <os_thread_join+0xc>)
   d82e0:	681b      	ldr	r3, [r3, #0]
   d82e2:	691b      	ldr	r3, [r3, #16]
   d82e4:	9301      	str	r3, [sp, #4]
   d82e6:	bd08      	pop	{r3, pc}
   d82e8:	00030248 	.word	0x00030248

000d82ec <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d82ec:	b508      	push	{r3, lr}
   d82ee:	4b02      	ldr	r3, [pc, #8]	; (d82f8 <os_thread_cleanup+0xc>)
   d82f0:	681b      	ldr	r3, [r3, #0]
   d82f2:	695b      	ldr	r3, [r3, #20]
   d82f4:	9301      	str	r3, [sp, #4]
   d82f6:	bd08      	pop	{r3, pc}
   d82f8:	00030248 	.word	0x00030248

000d82fc <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d82fc:	b508      	push	{r3, lr}
   d82fe:	4b02      	ldr	r3, [pc, #8]	; (d8308 <os_thread_scheduling+0xc>)
   d8300:	681b      	ldr	r3, [r3, #0]
   d8302:	69db      	ldr	r3, [r3, #28]
   d8304:	9301      	str	r3, [sp, #4]
   d8306:	bd08      	pop	{r3, pc}
   d8308:	00030248 	.word	0x00030248

000d830c <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d830c:	b508      	push	{r3, lr}
   d830e:	4b02      	ldr	r3, [pc, #8]	; (d8318 <os_timer_create+0xc>)
   d8310:	681b      	ldr	r3, [r3, #0]
   d8312:	6a1b      	ldr	r3, [r3, #32]
   d8314:	9301      	str	r3, [sp, #4]
   d8316:	bd08      	pop	{r3, pc}
   d8318:	00030248 	.word	0x00030248

000d831c <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d831c:	b508      	push	{r3, lr}
   d831e:	4b02      	ldr	r3, [pc, #8]	; (d8328 <os_timer_destroy+0xc>)
   d8320:	681b      	ldr	r3, [r3, #0]
   d8322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8324:	9301      	str	r3, [sp, #4]
   d8326:	bd08      	pop	{r3, pc}
   d8328:	00030248 	.word	0x00030248

000d832c <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d832c:	b508      	push	{r3, lr}
   d832e:	4b02      	ldr	r3, [pc, #8]	; (d8338 <os_timer_get_id+0xc>)
   d8330:	681b      	ldr	r3, [r3, #0]
   d8332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8334:	9301      	str	r3, [sp, #4]
   d8336:	bd08      	pop	{r3, pc}
   d8338:	00030248 	.word	0x00030248

000d833c <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d833c:	b508      	push	{r3, lr}
   d833e:	4b02      	ldr	r3, [pc, #8]	; (d8348 <os_timer_change+0xc>)
   d8340:	681b      	ldr	r3, [r3, #0]
   d8342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8344:	9301      	str	r3, [sp, #4]
   d8346:	bd08      	pop	{r3, pc}
   d8348:	00030248 	.word	0x00030248

000d834c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d834c:	b508      	push	{r3, lr}
   d834e:	4b02      	ldr	r3, [pc, #8]	; (d8358 <os_mutex_recursive_create+0xc>)
   d8350:	681b      	ldr	r3, [r3, #0]
   d8352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8354:	9301      	str	r3, [sp, #4]
   d8356:	bd08      	pop	{r3, pc}
   d8358:	00030248 	.word	0x00030248

000d835c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d835c:	b508      	push	{r3, lr}
   d835e:	4b02      	ldr	r3, [pc, #8]	; (d8368 <os_mutex_recursive_destroy+0xc>)
   d8360:	681b      	ldr	r3, [r3, #0]
   d8362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8364:	9301      	str	r3, [sp, #4]
   d8366:	bd08      	pop	{r3, pc}
   d8368:	00030248 	.word	0x00030248

000d836c <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d836c:	b508      	push	{r3, lr}
   d836e:	4b02      	ldr	r3, [pc, #8]	; (d8378 <os_timer_set_id+0xc>)
   d8370:	681b      	ldr	r3, [r3, #0]
   d8372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d8374:	9301      	str	r3, [sp, #4]
   d8376:	bd08      	pop	{r3, pc}
   d8378:	00030248 	.word	0x00030248

000d837c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d837c:	b508      	push	{r3, lr}
   d837e:	4b02      	ldr	r3, [pc, #8]	; (d8388 <inet_inet_ntop+0xc>)
   d8380:	681b      	ldr	r3, [r3, #0]
   d8382:	695b      	ldr	r3, [r3, #20]
   d8384:	9301      	str	r3, [sp, #4]
   d8386:	bd08      	pop	{r3, pc}
   d8388:	00030264 	.word	0x00030264

000d838c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d838c:	b508      	push	{r3, lr}
   d838e:	4b02      	ldr	r3, [pc, #8]	; (d8398 <inet_htonl+0xc>)
   d8390:	681b      	ldr	r3, [r3, #0]
   d8392:	6a1b      	ldr	r3, [r3, #32]
   d8394:	9301      	str	r3, [sp, #4]
   d8396:	bd08      	pop	{r3, pc}
   d8398:	00030264 	.word	0x00030264

000d839c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d839c:	b508      	push	{r3, lr}
   d839e:	4b02      	ldr	r3, [pc, #8]	; (d83a8 <inet_htons+0xc>)
   d83a0:	681b      	ldr	r3, [r3, #0]
   d83a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d83a4:	9301      	str	r3, [sp, #4]
   d83a6:	bd08      	pop	{r3, pc}
   d83a8:	00030264 	.word	0x00030264

000d83ac <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d83ac:	b508      	push	{r3, lr}
   d83ae:	4b02      	ldr	r3, [pc, #8]	; (d83b8 <HAL_USART_Init+0xc>)
   d83b0:	681b      	ldr	r3, [r3, #0]
   d83b2:	681b      	ldr	r3, [r3, #0]
   d83b4:	9301      	str	r3, [sp, #4]
   d83b6:	bd08      	pop	{r3, pc}
   d83b8:	0003023c 	.word	0x0003023c

000d83bc <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d83bc:	b508      	push	{r3, lr}
   d83be:	4b02      	ldr	r3, [pc, #8]	; (d83c8 <HAL_USART_Write_Data+0xc>)
   d83c0:	681b      	ldr	r3, [r3, #0]
   d83c2:	68db      	ldr	r3, [r3, #12]
   d83c4:	9301      	str	r3, [sp, #4]
   d83c6:	bd08      	pop	{r3, pc}
   d83c8:	0003023c 	.word	0x0003023c

000d83cc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d83cc:	b508      	push	{r3, lr}
   d83ce:	4b02      	ldr	r3, [pc, #8]	; (d83d8 <HAL_USART_Available_Data+0xc>)
   d83d0:	681b      	ldr	r3, [r3, #0]
   d83d2:	691b      	ldr	r3, [r3, #16]
   d83d4:	9301      	str	r3, [sp, #4]
   d83d6:	bd08      	pop	{r3, pc}
   d83d8:	0003023c 	.word	0x0003023c

000d83dc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d83dc:	b508      	push	{r3, lr}
   d83de:	4b02      	ldr	r3, [pc, #8]	; (d83e8 <HAL_USART_Read_Data+0xc>)
   d83e0:	681b      	ldr	r3, [r3, #0]
   d83e2:	695b      	ldr	r3, [r3, #20]
   d83e4:	9301      	str	r3, [sp, #4]
   d83e6:	bd08      	pop	{r3, pc}
   d83e8:	0003023c 	.word	0x0003023c

000d83ec <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d83ec:	b508      	push	{r3, lr}
   d83ee:	4b02      	ldr	r3, [pc, #8]	; (d83f8 <HAL_USART_Peek_Data+0xc>)
   d83f0:	681b      	ldr	r3, [r3, #0]
   d83f2:	699b      	ldr	r3, [r3, #24]
   d83f4:	9301      	str	r3, [sp, #4]
   d83f6:	bd08      	pop	{r3, pc}
   d83f8:	0003023c 	.word	0x0003023c

000d83fc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d83fc:	b508      	push	{r3, lr}
   d83fe:	4b02      	ldr	r3, [pc, #8]	; (d8408 <HAL_USART_Flush_Data+0xc>)
   d8400:	681b      	ldr	r3, [r3, #0]
   d8402:	69db      	ldr	r3, [r3, #28]
   d8404:	9301      	str	r3, [sp, #4]
   d8406:	bd08      	pop	{r3, pc}
   d8408:	0003023c 	.word	0x0003023c

000d840c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d840c:	b508      	push	{r3, lr}
   d840e:	4b02      	ldr	r3, [pc, #8]	; (d8418 <HAL_USART_Is_Enabled+0xc>)
   d8410:	681b      	ldr	r3, [r3, #0]
   d8412:	6a1b      	ldr	r3, [r3, #32]
   d8414:	9301      	str	r3, [sp, #4]
   d8416:	bd08      	pop	{r3, pc}
   d8418:	0003023c 	.word	0x0003023c

000d841c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d841c:	b508      	push	{r3, lr}
   d841e:	4b02      	ldr	r3, [pc, #8]	; (d8428 <HAL_USART_Available_Data_For_Write+0xc>)
   d8420:	681b      	ldr	r3, [r3, #0]
   d8422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8424:	9301      	str	r3, [sp, #4]
   d8426:	bd08      	pop	{r3, pc}
   d8428:	0003023c 	.word	0x0003023c

000d842c <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d842c:	b508      	push	{r3, lr}
   d842e:	4b02      	ldr	r3, [pc, #8]	; (d8438 <HAL_I2C_Begin_Transmission+0xc>)
   d8430:	681b      	ldr	r3, [r3, #0]
   d8432:	699b      	ldr	r3, [r3, #24]
   d8434:	9301      	str	r3, [sp, #4]
   d8436:	bd08      	pop	{r3, pc}
   d8438:	00030228 	.word	0x00030228

000d843c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d843c:	b508      	push	{r3, lr}
   d843e:	4b02      	ldr	r3, [pc, #8]	; (d8448 <HAL_I2C_End_Transmission+0xc>)
   d8440:	681b      	ldr	r3, [r3, #0]
   d8442:	69db      	ldr	r3, [r3, #28]
   d8444:	9301      	str	r3, [sp, #4]
   d8446:	bd08      	pop	{r3, pc}
   d8448:	00030228 	.word	0x00030228

000d844c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d844c:	b508      	push	{r3, lr}
   d844e:	4b02      	ldr	r3, [pc, #8]	; (d8458 <HAL_I2C_Write_Data+0xc>)
   d8450:	681b      	ldr	r3, [r3, #0]
   d8452:	6a1b      	ldr	r3, [r3, #32]
   d8454:	9301      	str	r3, [sp, #4]
   d8456:	bd08      	pop	{r3, pc}
   d8458:	00030228 	.word	0x00030228

000d845c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d845c:	b508      	push	{r3, lr}
   d845e:	4b02      	ldr	r3, [pc, #8]	; (d8468 <HAL_I2C_Available_Data+0xc>)
   d8460:	681b      	ldr	r3, [r3, #0]
   d8462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8464:	9301      	str	r3, [sp, #4]
   d8466:	bd08      	pop	{r3, pc}
   d8468:	00030228 	.word	0x00030228

000d846c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d846c:	b508      	push	{r3, lr}
   d846e:	4b02      	ldr	r3, [pc, #8]	; (d8478 <HAL_I2C_Read_Data+0xc>)
   d8470:	681b      	ldr	r3, [r3, #0]
   d8472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8474:	9301      	str	r3, [sp, #4]
   d8476:	bd08      	pop	{r3, pc}
   d8478:	00030228 	.word	0x00030228

000d847c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d847c:	b508      	push	{r3, lr}
   d847e:	4b02      	ldr	r3, [pc, #8]	; (d8488 <HAL_I2C_Peek_Data+0xc>)
   d8480:	681b      	ldr	r3, [r3, #0]
   d8482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8484:	9301      	str	r3, [sp, #4]
   d8486:	bd08      	pop	{r3, pc}
   d8488:	00030228 	.word	0x00030228

000d848c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d848c:	b508      	push	{r3, lr}
   d848e:	4b02      	ldr	r3, [pc, #8]	; (d8498 <HAL_I2C_Flush_Data+0xc>)
   d8490:	681b      	ldr	r3, [r3, #0]
   d8492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8494:	9301      	str	r3, [sp, #4]
   d8496:	bd08      	pop	{r3, pc}
   d8498:	00030228 	.word	0x00030228

000d849c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d849c:	b508      	push	{r3, lr}
   d849e:	4b02      	ldr	r3, [pc, #8]	; (d84a8 <HAL_I2C_Is_Enabled+0xc>)
   d84a0:	681b      	ldr	r3, [r3, #0]
   d84a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d84a4:	9301      	str	r3, [sp, #4]
   d84a6:	bd08      	pop	{r3, pc}
   d84a8:	00030228 	.word	0x00030228

000d84ac <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d84ac:	b508      	push	{r3, lr}
   d84ae:	4b02      	ldr	r3, [pc, #8]	; (d84b8 <HAL_I2C_Init+0xc>)
   d84b0:	681b      	ldr	r3, [r3, #0]
   d84b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d84b4:	9301      	str	r3, [sp, #4]
   d84b6:	bd08      	pop	{r3, pc}
   d84b8:	00030228 	.word	0x00030228

000d84bc <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d84bc:	b508      	push	{r3, lr}
   d84be:	4b02      	ldr	r3, [pc, #8]	; (d84c8 <HAL_I2C_Acquire+0xc>)
   d84c0:	681b      	ldr	r3, [r3, #0]
   d84c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d84c4:	9301      	str	r3, [sp, #4]
   d84c6:	bd08      	pop	{r3, pc}
   d84c8:	00030228 	.word	0x00030228

000d84cc <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d84cc:	b508      	push	{r3, lr}
   d84ce:	4b02      	ldr	r3, [pc, #8]	; (d84d8 <HAL_I2C_Release+0xc>)
   d84d0:	681b      	ldr	r3, [r3, #0]
   d84d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d84d4:	9301      	str	r3, [sp, #4]
   d84d6:	bd08      	pop	{r3, pc}
   d84d8:	00030228 	.word	0x00030228

000d84dc <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d84dc:	b508      	push	{r3, lr}
   d84de:	4b02      	ldr	r3, [pc, #8]	; (d84e8 <HAL_I2C_Request_Data_Ex+0xc>)
   d84e0:	681b      	ldr	r3, [r3, #0]
   d84e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d84e4:	9301      	str	r3, [sp, #4]
   d84e6:	bd08      	pop	{r3, pc}
   d84e8:	00030228 	.word	0x00030228

000d84ec <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d84ec:	b508      	push	{r3, lr}
   d84ee:	4b02      	ldr	r3, [pc, #8]	; (d84f8 <sock_setsockopt+0xc>)
   d84f0:	681b      	ldr	r3, [r3, #0]
   d84f2:	699b      	ldr	r3, [r3, #24]
   d84f4:	9301      	str	r3, [sp, #4]
   d84f6:	bd08      	pop	{r3, pc}
   d84f8:	00030238 	.word	0x00030238

000d84fc <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d84fc:	b508      	push	{r3, lr}
   d84fe:	4b02      	ldr	r3, [pc, #8]	; (d8508 <sock_close+0xc>)
   d8500:	681b      	ldr	r3, [r3, #0]
   d8502:	69db      	ldr	r3, [r3, #28]
   d8504:	9301      	str	r3, [sp, #4]
   d8506:	bd08      	pop	{r3, pc}
   d8508:	00030238 	.word	0x00030238

000d850c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d850c:	b508      	push	{r3, lr}
   d850e:	4b02      	ldr	r3, [pc, #8]	; (d8518 <sock_connect+0xc>)
   d8510:	681b      	ldr	r3, [r3, #0]
   d8512:	6a1b      	ldr	r3, [r3, #32]
   d8514:	9301      	str	r3, [sp, #4]
   d8516:	bd08      	pop	{r3, pc}
   d8518:	00030238 	.word	0x00030238

000d851c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d851c:	b508      	push	{r3, lr}
   d851e:	4b02      	ldr	r3, [pc, #8]	; (d8528 <sock_recv+0xc>)
   d8520:	681b      	ldr	r3, [r3, #0]
   d8522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8524:	9301      	str	r3, [sp, #4]
   d8526:	bd08      	pop	{r3, pc}
   d8528:	00030238 	.word	0x00030238

000d852c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d852c:	b508      	push	{r3, lr}
   d852e:	4b02      	ldr	r3, [pc, #8]	; (d8538 <sock_send+0xc>)
   d8530:	681b      	ldr	r3, [r3, #0]
   d8532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8534:	9301      	str	r3, [sp, #4]
   d8536:	bd08      	pop	{r3, pc}
   d8538:	00030238 	.word	0x00030238

000d853c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d853c:	b508      	push	{r3, lr}
   d853e:	4b02      	ldr	r3, [pc, #8]	; (d8548 <sock_socket+0xc>)
   d8540:	681b      	ldr	r3, [r3, #0]
   d8542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d8544:	9301      	str	r3, [sp, #4]
   d8546:	bd08      	pop	{r3, pc}
   d8548:	00030238 	.word	0x00030238

000d854c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d854c:	b508      	push	{r3, lr}
   d854e:	4b02      	ldr	r3, [pc, #8]	; (d8558 <HAL_USB_USART_Init+0xc>)
   d8550:	681b      	ldr	r3, [r3, #0]
   d8552:	681b      	ldr	r3, [r3, #0]
   d8554:	9301      	str	r3, [sp, #4]
   d8556:	bd08      	pop	{r3, pc}
   d8558:	0003024c 	.word	0x0003024c

000d855c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d855c:	b508      	push	{r3, lr}
   d855e:	4b02      	ldr	r3, [pc, #8]	; (d8568 <HAL_USB_USART_Begin+0xc>)
   d8560:	681b      	ldr	r3, [r3, #0]
   d8562:	685b      	ldr	r3, [r3, #4]
   d8564:	9301      	str	r3, [sp, #4]
   d8566:	bd08      	pop	{r3, pc}
   d8568:	0003024c 	.word	0x0003024c

000d856c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d856c:	b508      	push	{r3, lr}
   d856e:	4b02      	ldr	r3, [pc, #8]	; (d8578 <HAL_USB_USART_Available_Data+0xc>)
   d8570:	681b      	ldr	r3, [r3, #0]
   d8572:	691b      	ldr	r3, [r3, #16]
   d8574:	9301      	str	r3, [sp, #4]
   d8576:	bd08      	pop	{r3, pc}
   d8578:	0003024c 	.word	0x0003024c

000d857c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d857c:	b508      	push	{r3, lr}
   d857e:	4b02      	ldr	r3, [pc, #8]	; (d8588 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d8580:	681b      	ldr	r3, [r3, #0]
   d8582:	695b      	ldr	r3, [r3, #20]
   d8584:	9301      	str	r3, [sp, #4]
   d8586:	bd08      	pop	{r3, pc}
   d8588:	0003024c 	.word	0x0003024c

000d858c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d858c:	b508      	push	{r3, lr}
   d858e:	4b02      	ldr	r3, [pc, #8]	; (d8598 <HAL_USB_USART_Receive_Data+0xc>)
   d8590:	681b      	ldr	r3, [r3, #0]
   d8592:	699b      	ldr	r3, [r3, #24]
   d8594:	9301      	str	r3, [sp, #4]
   d8596:	bd08      	pop	{r3, pc}
   d8598:	0003024c 	.word	0x0003024c

000d859c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d859c:	b508      	push	{r3, lr}
   d859e:	4b02      	ldr	r3, [pc, #8]	; (d85a8 <HAL_USB_USART_Send_Data+0xc>)
   d85a0:	681b      	ldr	r3, [r3, #0]
   d85a2:	69db      	ldr	r3, [r3, #28]
   d85a4:	9301      	str	r3, [sp, #4]
   d85a6:	bd08      	pop	{r3, pc}
   d85a8:	0003024c 	.word	0x0003024c

000d85ac <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d85ac:	b508      	push	{r3, lr}
   d85ae:	4b02      	ldr	r3, [pc, #8]	; (d85b8 <HAL_USB_USART_Flush_Data+0xc>)
   d85b0:	681b      	ldr	r3, [r3, #0]
   d85b2:	6a1b      	ldr	r3, [r3, #32]
   d85b4:	9301      	str	r3, [sp, #4]
   d85b6:	bd08      	pop	{r3, pc}
   d85b8:	0003024c 	.word	0x0003024c

000d85bc <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d85bc:	b508      	push	{r3, lr}
   d85be:	4b02      	ldr	r3, [pc, #8]	; (d85c8 <log_message+0xc>)
   d85c0:	681b      	ldr	r3, [r3, #0]
   d85c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d85c4:	9301      	str	r3, [sp, #4]
   d85c6:	bd08      	pop	{r3, pc}
   d85c8:	00030260 	.word	0x00030260

000d85cc <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d85cc:	b508      	push	{r3, lr}
   d85ce:	4b02      	ldr	r3, [pc, #8]	; (d85d8 <system_mode+0xc>)
   d85d0:	681b      	ldr	r3, [r3, #0]
   d85d2:	681b      	ldr	r3, [r3, #0]
   d85d4:	9301      	str	r3, [sp, #4]
   d85d6:	bd08      	pop	{r3, pc}
   d85d8:	00030220 	.word	0x00030220

000d85dc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d85dc:	b508      	push	{r3, lr}
   d85de:	4b02      	ldr	r3, [pc, #8]	; (d85e8 <set_system_mode+0xc>)
   d85e0:	681b      	ldr	r3, [r3, #0]
   d85e2:	685b      	ldr	r3, [r3, #4]
   d85e4:	9301      	str	r3, [sp, #4]
   d85e6:	bd08      	pop	{r3, pc}
   d85e8:	00030220 	.word	0x00030220

000d85ec <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d85ec:	b508      	push	{r3, lr}
   d85ee:	4b02      	ldr	r3, [pc, #8]	; (d85f8 <system_delay_ms+0xc>)
   d85f0:	681b      	ldr	r3, [r3, #0]
   d85f2:	695b      	ldr	r3, [r3, #20]
   d85f4:	9301      	str	r3, [sp, #4]
   d85f6:	bd08      	pop	{r3, pc}
   d85f8:	00030220 	.word	0x00030220

000d85fc <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d85fc:	b508      	push	{r3, lr}
   d85fe:	4b02      	ldr	r3, [pc, #8]	; (d8608 <system_thread_set_state+0xc>)
   d8600:	681b      	ldr	r3, [r3, #0]
   d8602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8604:	9301      	str	r3, [sp, #4]
   d8606:	bd08      	pop	{r3, pc}
   d8608:	00030220 	.word	0x00030220

000d860c <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d860c:	b508      	push	{r3, lr}
   d860e:	4b02      	ldr	r3, [pc, #8]	; (d8618 <system_thread_get_state+0xc>)
   d8610:	681b      	ldr	r3, [r3, #0]
   d8612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d8614:	9301      	str	r3, [sp, #4]
   d8616:	bd08      	pop	{r3, pc}
   d8618:	00030220 	.word	0x00030220

000d861c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d861c:	b508      	push	{r3, lr}
   d861e:	4b03      	ldr	r3, [pc, #12]	; (d862c <system_ctrl_set_app_request_handler+0x10>)
   d8620:	681b      	ldr	r3, [r3, #0]
   d8622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d8626:	9301      	str	r3, [sp, #4]
   d8628:	bd08      	pop	{r3, pc}
   d862a:	0000      	.short	0x0000
   d862c:	00030220 	.word	0x00030220

000d8630 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d8630:	b508      	push	{r3, lr}
   d8632:	4b03      	ldr	r3, [pc, #12]	; (d8640 <system_ctrl_set_result+0x10>)
   d8634:	681b      	ldr	r3, [r3, #0]
   d8636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d863a:	9301      	str	r3, [sp, #4]
   d863c:	bd08      	pop	{r3, pc}
   d863e:	0000      	.short	0x0000
   d8640:	00030220 	.word	0x00030220

000d8644 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d8644:	b508      	push	{r3, lr}
   d8646:	4b02      	ldr	r3, [pc, #8]	; (d8650 <network_connect+0xc>)
   d8648:	681b      	ldr	r3, [r3, #0]
   d864a:	685b      	ldr	r3, [r3, #4]
   d864c:	9301      	str	r3, [sp, #4]
   d864e:	bd08      	pop	{r3, pc}
   d8650:	00030240 	.word	0x00030240

000d8654 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d8654:	b508      	push	{r3, lr}
   d8656:	4b02      	ldr	r3, [pc, #8]	; (d8660 <network_connecting+0xc>)
   d8658:	681b      	ldr	r3, [r3, #0]
   d865a:	689b      	ldr	r3, [r3, #8]
   d865c:	9301      	str	r3, [sp, #4]
   d865e:	bd08      	pop	{r3, pc}
   d8660:	00030240 	.word	0x00030240

000d8664 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d8664:	b508      	push	{r3, lr}
   d8666:	4b02      	ldr	r3, [pc, #8]	; (d8670 <network_disconnect+0xc>)
   d8668:	681b      	ldr	r3, [r3, #0]
   d866a:	68db      	ldr	r3, [r3, #12]
   d866c:	9301      	str	r3, [sp, #4]
   d866e:	bd08      	pop	{r3, pc}
   d8670:	00030240 	.word	0x00030240

000d8674 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d8674:	b508      	push	{r3, lr}
   d8676:	4b02      	ldr	r3, [pc, #8]	; (d8680 <network_ready+0xc>)
   d8678:	681b      	ldr	r3, [r3, #0]
   d867a:	691b      	ldr	r3, [r3, #16]
   d867c:	9301      	str	r3, [sp, #4]
   d867e:	bd08      	pop	{r3, pc}
   d8680:	00030240 	.word	0x00030240

000d8684 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d8684:	b508      	push	{r3, lr}
   d8686:	4b02      	ldr	r3, [pc, #8]	; (d8690 <network_on+0xc>)
   d8688:	681b      	ldr	r3, [r3, #0]
   d868a:	695b      	ldr	r3, [r3, #20]
   d868c:	9301      	str	r3, [sp, #4]
   d868e:	bd08      	pop	{r3, pc}
   d8690:	00030240 	.word	0x00030240

000d8694 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d8694:	b508      	push	{r3, lr}
   d8696:	4b02      	ldr	r3, [pc, #8]	; (d86a0 <network_off+0xc>)
   d8698:	681b      	ldr	r3, [r3, #0]
   d869a:	699b      	ldr	r3, [r3, #24]
   d869c:	9301      	str	r3, [sp, #4]
   d869e:	bd08      	pop	{r3, pc}
   d86a0:	00030240 	.word	0x00030240

000d86a4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d86a4:	b508      	push	{r3, lr}
   d86a6:	4b02      	ldr	r3, [pc, #8]	; (d86b0 <network_listen+0xc>)
   d86a8:	681b      	ldr	r3, [r3, #0]
   d86aa:	69db      	ldr	r3, [r3, #28]
   d86ac:	9301      	str	r3, [sp, #4]
   d86ae:	bd08      	pop	{r3, pc}
   d86b0:	00030240 	.word	0x00030240

000d86b4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d86b4:	b508      	push	{r3, lr}
   d86b6:	4b02      	ldr	r3, [pc, #8]	; (d86c0 <network_listening+0xc>)
   d86b8:	681b      	ldr	r3, [r3, #0]
   d86ba:	6a1b      	ldr	r3, [r3, #32]
   d86bc:	9301      	str	r3, [sp, #4]
   d86be:	bd08      	pop	{r3, pc}
   d86c0:	00030240 	.word	0x00030240

000d86c4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d86c4:	b508      	push	{r3, lr}
   d86c6:	4b02      	ldr	r3, [pc, #8]	; (d86d0 <network_set_listen_timeout+0xc>)
   d86c8:	681b      	ldr	r3, [r3, #0]
   d86ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d86cc:	9301      	str	r3, [sp, #4]
   d86ce:	bd08      	pop	{r3, pc}
   d86d0:	00030240 	.word	0x00030240

000d86d4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d86d4:	b508      	push	{r3, lr}
   d86d6:	4b02      	ldr	r3, [pc, #8]	; (d86e0 <network_get_listen_timeout+0xc>)
   d86d8:	681b      	ldr	r3, [r3, #0]
   d86da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d86dc:	9301      	str	r3, [sp, #4]
   d86de:	bd08      	pop	{r3, pc}
   d86e0:	00030240 	.word	0x00030240

000d86e4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d86e4:	b508      	push	{r3, lr}
   d86e6:	4b02      	ldr	r3, [pc, #8]	; (d86f0 <spark_process+0xc>)
   d86e8:	681b      	ldr	r3, [r3, #0]
   d86ea:	689b      	ldr	r3, [r3, #8]
   d86ec:	9301      	str	r3, [sp, #4]
   d86ee:	bd08      	pop	{r3, pc}
   d86f0:	00030244 	.word	0x00030244

000d86f4 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d86f4:	b508      	push	{r3, lr}
   d86f6:	4b02      	ldr	r3, [pc, #8]	; (d8700 <spark_cloud_flag_connected+0xc>)
   d86f8:	681b      	ldr	r3, [r3, #0]
   d86fa:	695b      	ldr	r3, [r3, #20]
   d86fc:	9301      	str	r3, [sp, #4]
   d86fe:	bd08      	pop	{r3, pc}
   d8700:	00030244 	.word	0x00030244

000d8704 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d8704:	b508      	push	{r3, lr}
   d8706:	4b02      	ldr	r3, [pc, #8]	; (d8710 <spark_deviceID+0xc>)
   d8708:	681b      	ldr	r3, [r3, #0]
   d870a:	69db      	ldr	r3, [r3, #28]
   d870c:	9301      	str	r3, [sp, #4]
   d870e:	bd08      	pop	{r3, pc}
   d8710:	00030244 	.word	0x00030244

000d8714 <spark_sync_time>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d8714:	b508      	push	{r3, lr}
   d8716:	4b02      	ldr	r3, [pc, #8]	; (d8720 <spark_sync_time+0xc>)
   d8718:	681b      	ldr	r3, [r3, #0]
   d871a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d871c:	9301      	str	r3, [sp, #4]
   d871e:	bd08      	pop	{r3, pc}
   d8720:	00030244 	.word	0x00030244

000d8724 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d8724:	b508      	push	{r3, lr}
   d8726:	4b02      	ldr	r3, [pc, #8]	; (d8730 <spark_sync_time_pending+0xc>)
   d8728:	681b      	ldr	r3, [r3, #0]
   d872a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d872c:	9301      	str	r3, [sp, #4]
   d872e:	bd08      	pop	{r3, pc}
   d8730:	00030244 	.word	0x00030244

000d8734 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d8734:	b508      	push	{r3, lr}
   d8736:	4b02      	ldr	r3, [pc, #8]	; (d8740 <spark_set_random_seed_from_cloud_handler+0xc>)
   d8738:	681b      	ldr	r3, [r3, #0]
   d873a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d873c:	9301      	str	r3, [sp, #4]
   d873e:	bd08      	pop	{r3, pc}
   d8740:	00030244 	.word	0x00030244

000d8744 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d8744:	b508      	push	{r3, lr}
   d8746:	4b02      	ldr	r3, [pc, #8]	; (d8750 <malloc+0xc>)
   d8748:	681b      	ldr	r3, [r3, #0]
   d874a:	681b      	ldr	r3, [r3, #0]
   d874c:	9301      	str	r3, [sp, #4]
   d874e:	bd08      	pop	{r3, pc}
   d8750:	0003021c 	.word	0x0003021c

000d8754 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d8754:	b508      	push	{r3, lr}
   d8756:	4b02      	ldr	r3, [pc, #8]	; (d8760 <free+0xc>)
   d8758:	681b      	ldr	r3, [r3, #0]
   d875a:	685b      	ldr	r3, [r3, #4]
   d875c:	9301      	str	r3, [sp, #4]
   d875e:	bd08      	pop	{r3, pc}
   d8760:	0003021c 	.word	0x0003021c

000d8764 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d8764:	b508      	push	{r3, lr}
   d8766:	4b02      	ldr	r3, [pc, #8]	; (d8770 <realloc+0xc>)
   d8768:	681b      	ldr	r3, [r3, #0]
   d876a:	689b      	ldr	r3, [r3, #8]
   d876c:	9301      	str	r3, [sp, #4]
   d876e:	bd08      	pop	{r3, pc}
   d8770:	0003021c 	.word	0x0003021c

000d8774 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d8774:	b508      	push	{r3, lr}
   d8776:	4b02      	ldr	r3, [pc, #8]	; (d8780 <sprintf+0xc>)
   d8778:	681b      	ldr	r3, [r3, #0]
   d877a:	68db      	ldr	r3, [r3, #12]
   d877c:	9301      	str	r3, [sp, #4]
   d877e:	bd08      	pop	{r3, pc}
   d8780:	0003021c 	.word	0x0003021c

000d8784 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d8784:	b508      	push	{r3, lr}
   d8786:	4b02      	ldr	r3, [pc, #8]	; (d8790 <vsnprintf+0xc>)
   d8788:	681b      	ldr	r3, [r3, #0]
   d878a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d878c:	9301      	str	r3, [sp, #4]
   d878e:	bd08      	pop	{r3, pc}
   d8790:	0003021c 	.word	0x0003021c

000d8794 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d8794:	b508      	push	{r3, lr}
   d8796:	4b02      	ldr	r3, [pc, #8]	; (d87a0 <__errno+0xc>)
   d8798:	681b      	ldr	r3, [r3, #0]
   d879a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d879c:	9301      	str	r3, [sp, #4]
   d879e:	bd08      	pop	{r3, pc}
   d87a0:	0003021c 	.word	0x0003021c

000d87a4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d87a4:	2200      	movs	r2, #0
   d87a6:	4611      	mov	r1, r2
   d87a8:	6840      	ldr	r0, [r0, #4]
   d87aa:	f7ff bf83 	b.w	d86b4 <network_listening>

000d87ae <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d87ae:	2200      	movs	r2, #0
   d87b0:	4611      	mov	r1, r2
   d87b2:	6840      	ldr	r0, [r0, #4]
   d87b4:	f7ff bf8e 	b.w	d86d4 <network_get_listen_timeout>

000d87b8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d87b8:	2200      	movs	r2, #0
   d87ba:	6840      	ldr	r0, [r0, #4]
   d87bc:	f7ff bf82 	b.w	d86c4 <network_set_listen_timeout>

000d87c0 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d87c0:	2200      	movs	r2, #0
   d87c2:	f081 0101 	eor.w	r1, r1, #1
   d87c6:	6840      	ldr	r0, [r0, #4]
   d87c8:	f7ff bf6c 	b.w	d86a4 <network_listen>

000d87cc <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d87cc:	2300      	movs	r3, #0
   d87ce:	461a      	mov	r2, r3
   d87d0:	4619      	mov	r1, r3
   d87d2:	6840      	ldr	r0, [r0, #4]
   d87d4:	f7ff bf5e 	b.w	d8694 <network_off>

000d87d8 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d87d8:	2300      	movs	r3, #0
   d87da:	461a      	mov	r2, r3
   d87dc:	4619      	mov	r1, r3
   d87de:	6840      	ldr	r0, [r0, #4]
   d87e0:	f7ff bf50 	b.w	d8684 <network_on>

000d87e4 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d87e4:	2200      	movs	r2, #0
   d87e6:	4611      	mov	r1, r2
   d87e8:	6840      	ldr	r0, [r0, #4]
   d87ea:	f7ff bf43 	b.w	d8674 <network_ready>

000d87ee <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d87ee:	2200      	movs	r2, #0
   d87f0:	4611      	mov	r1, r2
   d87f2:	6840      	ldr	r0, [r0, #4]
   d87f4:	f7ff bf2e 	b.w	d8654 <network_connecting>

000d87f8 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d87f8:	2200      	movs	r2, #0
   d87fa:	2102      	movs	r1, #2
   d87fc:	6840      	ldr	r0, [r0, #4]
   d87fe:	f7ff bf31 	b.w	d8664 <network_disconnect>

000d8802 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8802:	2300      	movs	r3, #0
   d8804:	461a      	mov	r2, r3
   d8806:	6840      	ldr	r0, [r0, #4]
   d8808:	f7ff bf1c 	b.w	d8644 <network_connect>

000d880c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d880c:	4b02      	ldr	r3, [pc, #8]	; (d8818 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d880e:	2203      	movs	r2, #3
   d8810:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d8812:	4a02      	ldr	r2, [pc, #8]	; (d881c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d8814:	601a      	str	r2, [r3, #0]
   d8816:	4770      	bx	lr
   d8818:	2003e188 	.word	0x2003e188
   d881c:	000db104 	.word	0x000db104

000d8820 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d8820:	2100      	movs	r1, #0
   d8822:	f7ff bcf3 	b.w	d820c <HAL_SPI_Acquire>

000d8826 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d8826:	2100      	movs	r1, #0
   d8828:	f7ff bcf8 	b.w	d821c <HAL_SPI_Release>

000d882c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d882c:	b510      	push	{r4, lr}
   d882e:	4604      	mov	r4, r0
{
    _spi = spi;
   d8830:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d8832:	4608      	mov	r0, r1
   d8834:	f7ff fcba 	bl	d81ac <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d8838:	2300      	movs	r3, #0
   d883a:	6063      	str	r3, [r4, #4]
}
   d883c:	4620      	mov	r0, r4
   d883e:	bd10      	pop	{r4, pc}

000d8840 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d8840:	b510      	push	{r4, lr}
   d8842:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d8844:	7800      	ldrb	r0, [r0, #0]
   d8846:	f7ff ffeb 	bl	d8820 <_ZN8SPIClass4lockEv.isra.0>
   d884a:	b948      	cbnz	r0, d8860 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d884c:	7820      	ldrb	r0, [r4, #0]
   d884e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d8852:	f7ff fc83 	bl	d815c <HAL_SPI_Begin>
        unlock();
   d8856:	7820      	ldrb	r0, [r4, #0]
    }
}
   d8858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d885c:	f7ff bfe3 	b.w	d8826 <_ZN8SPIClass6unlockEv.isra.1>
   d8860:	bd10      	pop	{r4, pc}

000d8862 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d8862:	b538      	push	{r3, r4, r5, lr}
   d8864:	4604      	mov	r4, r0
    if (!lock())
   d8866:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d8868:	460d      	mov	r5, r1
    if (!lock())
   d886a:	f7ff ffd9 	bl	d8820 <_ZN8SPIClass4lockEv.isra.0>
   d886e:	b940      	cbnz	r0, d8882 <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d8870:	7820      	ldrb	r0, [r4, #0]
   d8872:	4629      	mov	r1, r5
   d8874:	f7ff fc7a 	bl	d816c <HAL_SPI_Set_Bit_Order>
        unlock();
   d8878:	7820      	ldrb	r0, [r4, #0]
    }
}
   d887a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d887e:	f7ff bfd2 	b.w	d8826 <_ZN8SPIClass6unlockEv.isra.1>
   d8882:	bd38      	pop	{r3, r4, r5, pc}

000d8884 <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d8884:	b538      	push	{r3, r4, r5, lr}
   d8886:	4604      	mov	r4, r0
    if (!lock())
   d8888:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d888a:	460d      	mov	r5, r1
    if (!lock())
   d888c:	f7ff ffc8 	bl	d8820 <_ZN8SPIClass4lockEv.isra.0>
   d8890:	b940      	cbnz	r0, d88a4 <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d8892:	7820      	ldrb	r0, [r4, #0]
   d8894:	4629      	mov	r1, r5
   d8896:	f7ff fc71 	bl	d817c <HAL_SPI_Set_Data_Mode>
        unlock();
   d889a:	7820      	ldrb	r0, [r4, #0]
    }
}
   d889c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d88a0:	f7ff bfc1 	b.w	d8826 <_ZN8SPIClass6unlockEv.isra.1>
   d88a4:	bd38      	pop	{r3, r4, r5, pc}

000d88a6 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d88a6:	7800      	ldrb	r0, [r0, #0]
   d88a8:	f7ff bfbd 	b.w	d8826 <_ZN8SPIClass6unlockEv.isra.1>

000d88ac <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d88ac:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d88ae:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d88b0:	6018      	str	r0, [r3, #0]
   d88b2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d88b4:	6818      	ldr	r0, [r3, #0]
   d88b6:	4288      	cmp	r0, r1
   d88b8:	b2e5      	uxtb	r5, r4
   d88ba:	d906      	bls.n	d88ca <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d88bc:	3401      	adds	r4, #1
   d88be:	2c08      	cmp	r4, #8
   d88c0:	d002      	beq.n	d88c8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d88c2:	0840      	lsrs	r0, r0, #1
   d88c4:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d88c6:	e7f5      	b.n	d88b4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d88c8:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d88ca:	4b02      	ldr	r3, [pc, #8]	; (d88d4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d88cc:	5d5b      	ldrb	r3, [r3, r5]
   d88ce:	7013      	strb	r3, [r2, #0]
   d88d0:	bd30      	pop	{r4, r5, pc}
   d88d2:	bf00      	nop
   d88d4:	000db130 	.word	0x000db130

000d88d8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d88d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d88dc:	4607      	mov	r7, r0
   d88de:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d88e0:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d88e2:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d88e4:	f7ff ff9c 	bl	d8820 <_ZN8SPIClass4lockEv.isra.0>
   d88e8:	2800      	cmp	r0, #0
   d88ea:	db62      	blt.n	d89b2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d88ec:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d88ee:	2214      	movs	r2, #20
   d88f0:	2100      	movs	r1, #0
   d88f2:	a809      	add	r0, sp, #36	; 0x24
   d88f4:	f002 f9dc 	bl	dacb0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d88f8:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d88fa:	4620      	mov	r0, r4
   d88fc:	2200      	movs	r2, #0
   d88fe:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d8900:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d8904:	f7ff fc62 	bl	d81cc <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d8908:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d890c:	b154      	cbz	r4, d8924 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d890e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d8912:	b935      	cbnz	r5, d8922 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d8914:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d8918:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d891c:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d8920:	e003      	b.n	d892a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d8922:	2400      	movs	r4, #0
   d8924:	46a1      	mov	r9, r4
   d8926:	46a0      	mov	r8, r4
   d8928:	2501      	movs	r5, #1
   d892a:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d892c:	b105      	cbz	r5, d8930 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d892e:	b9bb      	cbnz	r3, d8960 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d8930:	429d      	cmp	r5, r3
   d8932:	d10b      	bne.n	d894c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d8934:	68b2      	ldr	r2, [r6, #8]
   d8936:	4542      	cmp	r2, r8
   d8938:	d108      	bne.n	d894c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d893a:	f88d 9020 	strb.w	r9, [sp, #32]
   d893e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d8942:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d8946:	89b2      	ldrh	r2, [r6, #12]
   d8948:	4291      	cmp	r1, r2
   d894a:	d009      	beq.n	d8960 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d894c:	b153      	cbz	r3, d8964 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d894e:	2400      	movs	r4, #0
   d8950:	7838      	ldrb	r0, [r7, #0]
   d8952:	9401      	str	r4, [sp, #4]
   d8954:	9400      	str	r4, [sp, #0]
   d8956:	4623      	mov	r3, r4
   d8958:	4622      	mov	r2, r4
   d895a:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d895c:	f7ff fc4e 	bl	d81fc <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d8960:	2000      	movs	r0, #0
   d8962:	e026      	b.n	d89b2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d8964:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d8968:	68b1      	ldr	r1, [r6, #8]
   d896a:	980a      	ldr	r0, [sp, #40]	; 0x28
   d896c:	ab04      	add	r3, sp, #16
   d896e:	f10d 020f 	add.w	r2, sp, #15
   d8972:	f7ff ff9b 	bl	d88ac <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d8976:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d8978:	b105      	cbz	r5, d897c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d897a:	b9b1      	cbnz	r1, d89aa <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d897c:	42a9      	cmp	r1, r5
   d897e:	d008      	beq.n	d8992 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d8980:	2400      	movs	r4, #0
   d8982:	7838      	ldrb	r0, [r7, #0]
   d8984:	9401      	str	r4, [sp, #4]
   d8986:	7b74      	ldrb	r4, [r6, #13]
   d8988:	7b33      	ldrb	r3, [r6, #12]
   d898a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d898e:	9400      	str	r4, [sp, #0]
   d8990:	e7e4      	b.n	d895c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d8992:	68b3      	ldr	r3, [r6, #8]
   d8994:	4543      	cmp	r3, r8
   d8996:	d3f3      	bcc.n	d8980 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d8998:	f88d 9020 	strb.w	r9, [sp, #32]
   d899c:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d89a0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d89a4:	89b3      	ldrh	r3, [r6, #12]
   d89a6:	429a      	cmp	r2, r3
   d89a8:	d1ea      	bne.n	d8980 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d89aa:	9b04      	ldr	r3, [sp, #16]
   d89ac:	4543      	cmp	r3, r8
   d89ae:	d1e7      	bne.n	d8980 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d89b0:	e7d6      	b.n	d8960 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d89b2:	b00f      	add	sp, #60	; 0x3c
   d89b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d89b8 <_ZN8SPIClass13setClockSpeedEjj>:
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d89b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d89bc:	b088      	sub	sp, #32
    unsigned clock = 0;
   d89be:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d89c0:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d89c2:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d89c4:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d89c6:	460e      	mov	r6, r1
   d89c8:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d89ca:	f7ff ff29 	bl	d8820 <_ZN8SPIClass4lockEv.isra.0>
   d89ce:	4605      	mov	r5, r0
   d89d0:	bb00      	cbnz	r0, d8a14 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d89d2:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d89d6:	4601      	mov	r1, r0
   d89d8:	2214      	movs	r2, #20
   d89da:	a803      	add	r0, sp, #12
   d89dc:	f002 f968 	bl	dacb0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d89e0:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d89e2:	462a      	mov	r2, r5
   d89e4:	a903      	add	r1, sp, #12
   d89e6:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d89e8:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d89ec:	f7ff fbee 	bl	d81cc <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d89f0:	ab02      	add	r3, sp, #8
   d89f2:	f10d 0207 	add.w	r2, sp, #7
   d89f6:	fb07 f106 	mul.w	r1, r7, r6
   d89fa:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d89fc:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d8a00:	f7ff ff54 	bl	d88ac <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d8a04:	7820      	ldrb	r0, [r4, #0]
   d8a06:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d8a0a:	f7ff fbbf 	bl	d818c <HAL_SPI_Set_Clock_Divider>
        unlock();
   d8a0e:	7820      	ldrb	r0, [r4, #0]
   d8a10:	f7ff ff09 	bl	d8826 <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d8a14:	9802      	ldr	r0, [sp, #8]
   d8a16:	b008      	add	sp, #32
   d8a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8a1c <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d8a1c:	b538      	push	{r3, r4, r5, lr}
   d8a1e:	4604      	mov	r4, r0
    if (!lock())
   d8a20:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d8a22:	460d      	mov	r5, r1
    if (!lock())
   d8a24:	f7ff fefc 	bl	d8820 <_ZN8SPIClass4lockEv.isra.0>
   d8a28:	b9c8      	cbnz	r0, d8a5e <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d8a2a:	6861      	ldr	r1, [r4, #4]
   d8a2c:	b171      	cbz	r1, d8a4c <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d8a2e:	4b0c      	ldr	r3, [pc, #48]	; (d8a60 <_ZN8SPIClass15setClockDividerEh+0x44>)
   d8a30:	5cc2      	ldrb	r2, [r0, r3]
   d8a32:	42aa      	cmp	r2, r5
   d8a34:	d002      	beq.n	d8a3c <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d8a36:	3001      	adds	r0, #1
   d8a38:	2808      	cmp	r0, #8
   d8a3a:	d1f9      	bne.n	d8a30 <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d8a3c:	3001      	adds	r0, #1
   d8a3e:	b2c0      	uxtb	r0, r0
   d8a40:	40c1      	lsrs	r1, r0
   d8a42:	2201      	movs	r2, #1
   d8a44:	4620      	mov	r0, r4
   d8a46:	f7ff ffb7 	bl	d89b8 <_ZN8SPIClass13setClockSpeedEjj>
   d8a4a:	e003      	b.n	d8a54 <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d8a4c:	4629      	mov	r1, r5
   d8a4e:	7820      	ldrb	r0, [r4, #0]
   d8a50:	f7ff fb9c 	bl	d818c <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d8a54:	7820      	ldrb	r0, [r4, #0]
    }
}
   d8a56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d8a5a:	f7ff bee4 	b.w	d8826 <_ZN8SPIClass6unlockEv.isra.1>
   d8a5e:	bd38      	pop	{r3, r4, r5, pc}
   d8a60:	000db130 	.word	0x000db130

000d8a64 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d8a64:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d8a66:	7800      	ldrb	r0, [r0, #0]
   d8a68:	f7ff fb98 	bl	d819c <HAL_SPI_Send_Receive_Data>
}
   d8a6c:	b2c0      	uxtb	r0, r0
   d8a6e:	bd08      	pop	{r3, pc}

000d8a70 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d8a70:	b530      	push	{r4, r5, lr}
   d8a72:	b087      	sub	sp, #28
   d8a74:	4604      	mov	r4, r0
   d8a76:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d8a78:	7800      	ldrb	r0, [r0, #0]
   d8a7a:	9500      	str	r5, [sp, #0]
   d8a7c:	f7ff fbae 	bl	d81dc <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d8a80:	b93d      	cbnz	r5, d8a92 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d8a82:	a902      	add	r1, sp, #8
   d8a84:	7820      	ldrb	r0, [r4, #0]
   d8a86:	f7ff fbb1 	bl	d81ec <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d8a8a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d8a8e:	07db      	lsls	r3, r3, #31
   d8a90:	d4f7      	bmi.n	d8a82 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d8a92:	b007      	add	sp, #28
   d8a94:	bd30      	pop	{r4, r5, pc}

000d8a96 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d8a96:	7800      	ldrb	r0, [r0, #0]
   d8a98:	f7ff bb90 	b.w	d81bc <HAL_SPI_Is_Enabled>

000d8a9c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d8a9c:	b510      	push	{r4, lr}
   d8a9e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d8aa0:	6800      	ldr	r0, [r0, #0]
   d8aa2:	b118      	cbz	r0, d8aac <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d8aa4:	f7ff fe56 	bl	d8754 <free>
            wakeupSource_ = nullptr;
   d8aa8:	2300      	movs	r3, #0
   d8aaa:	6023      	str	r3, [r4, #0]
   d8aac:	bd10      	pop	{r4, pc}

000d8aae <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d8aae:	b510      	push	{r4, lr}
   d8ab0:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d8ab2:	f7ff fff3 	bl	d8a9c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d8ab6:	4620      	mov	r0, r4
   d8ab8:	bd10      	pop	{r4, pc}
	...

000d8abc <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d8abc:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d8abe:	4c09      	ldr	r4, [pc, #36]	; (d8ae4 <_GLOBAL__sub_I_System+0x28>)
   d8ac0:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d8ac2:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d8ac6:	6020      	str	r0, [r4, #0]
   d8ac8:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d8aca:	71a0      	strb	r0, [r4, #6]
   d8acc:	8120      	strh	r0, [r4, #8]
   d8ace:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d8ad0:	f7ff fd84 	bl	d85dc <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d8ad4:	4620      	mov	r0, r4
   d8ad6:	4a04      	ldr	r2, [pc, #16]	; (d8ae8 <_GLOBAL__sub_I_System+0x2c>)
   d8ad8:	4904      	ldr	r1, [pc, #16]	; (d8aec <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d8ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d8ade:	f001 bb3b 	b.w	da158 <__aeabi_atexit>
   d8ae2:	bf00      	nop
   d8ae4:	2003e190 	.word	0x2003e190
   d8ae8:	2003daf0 	.word	0x2003daf0
   d8aec:	000d8aaf 	.word	0x000d8aaf

000d8af0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d8af0:	b510      	push	{r4, lr}
   d8af2:	4604      	mov	r4, r0
{
	free(buffer);
   d8af4:	6800      	ldr	r0, [r0, #0]
   d8af6:	f7ff fe2d 	bl	d8754 <free>
}
   d8afa:	4620      	mov	r0, r4
   d8afc:	bd10      	pop	{r4, pc}

000d8afe <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d8afe:	b510      	push	{r4, lr}
   d8b00:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d8b02:	6800      	ldr	r0, [r0, #0]
   d8b04:	b108      	cbz	r0, d8b0a <_ZN6String10invalidateEv+0xc>
   d8b06:	f7ff fe25 	bl	d8754 <free>
	buffer = NULL;
   d8b0a:	2300      	movs	r3, #0
   d8b0c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d8b0e:	60a3      	str	r3, [r4, #8]
   d8b10:	6063      	str	r3, [r4, #4]
   d8b12:	bd10      	pop	{r4, pc}

000d8b14 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d8b14:	b538      	push	{r3, r4, r5, lr}
   d8b16:	4604      	mov	r4, r0
   d8b18:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d8b1a:	6800      	ldr	r0, [r0, #0]
   d8b1c:	3101      	adds	r1, #1
   d8b1e:	f7ff fe21 	bl	d8764 <realloc>
	if (newbuffer) {
   d8b22:	b110      	cbz	r0, d8b2a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d8b24:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d8b28:	2001      	movs	r0, #1
	}
	return 0;
}
   d8b2a:	bd38      	pop	{r3, r4, r5, pc}

000d8b2c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d8b2c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d8b2e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d8b30:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d8b32:	b113      	cbz	r3, d8b3a <_ZN6String7reserveEj+0xe>
   d8b34:	6843      	ldr	r3, [r0, #4]
   d8b36:	428b      	cmp	r3, r1
   d8b38:	d207      	bcs.n	d8b4a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d8b3a:	4620      	mov	r0, r4
   d8b3c:	f7ff ffea 	bl	d8b14 <_ZN6String12changeBufferEj>
   d8b40:	b120      	cbz	r0, d8b4c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d8b42:	68a3      	ldr	r3, [r4, #8]
   d8b44:	b90b      	cbnz	r3, d8b4a <_ZN6String7reserveEj+0x1e>
   d8b46:	6822      	ldr	r2, [r4, #0]
   d8b48:	7013      	strb	r3, [r2, #0]
   d8b4a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d8b4c:	bd10      	pop	{r4, pc}

000d8b4e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d8b4e:	b570      	push	{r4, r5, r6, lr}
   d8b50:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d8b52:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d8b54:	4604      	mov	r4, r0
   d8b56:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d8b58:	f7ff ffe8 	bl	d8b2c <_ZN6String7reserveEj>
   d8b5c:	b918      	cbnz	r0, d8b66 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d8b5e:	4620      	mov	r0, r4
   d8b60:	f7ff ffcd 	bl	d8afe <_ZN6String10invalidateEv>
		return *this;
   d8b64:	e009      	b.n	d8b7a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d8b66:	462a      	mov	r2, r5
   d8b68:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d8b6a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d8b6c:	6820      	ldr	r0, [r4, #0]
   d8b6e:	f002 f894 	bl	dac9a <memcpy>
	buffer[len] = 0;
   d8b72:	6822      	ldr	r2, [r4, #0]
   d8b74:	68a3      	ldr	r3, [r4, #8]
   d8b76:	2100      	movs	r1, #0
   d8b78:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d8b7a:	4620      	mov	r0, r4
   d8b7c:	bd70      	pop	{r4, r5, r6, pc}

000d8b7e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d8b7e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d8b80:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d8b82:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d8b84:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d8b86:	6043      	str	r3, [r0, #4]
	len = 0;
   d8b88:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8b8a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d8b8c:	460d      	mov	r5, r1
   d8b8e:	b139      	cbz	r1, d8ba0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d8b90:	4608      	mov	r0, r1
   d8b92:	f002 f8d3 	bl	dad3c <strlen>
   d8b96:	4629      	mov	r1, r5
   d8b98:	4602      	mov	r2, r0
   d8b9a:	4620      	mov	r0, r4
   d8b9c:	f7ff ffd7 	bl	d8b4e <_ZN6String4copyEPKcj>
}
   d8ba0:	4620      	mov	r0, r4
   d8ba2:	bd38      	pop	{r3, r4, r5, pc}

000d8ba4 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d8ba4:	b538      	push	{r3, r4, r5, lr}
   d8ba6:	4605      	mov	r5, r0
	if (buffer) {
   d8ba8:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d8baa:	460c      	mov	r4, r1
	if (buffer) {
   d8bac:	b160      	cbz	r0, d8bc8 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d8bae:	686a      	ldr	r2, [r5, #4]
   d8bb0:	688b      	ldr	r3, [r1, #8]
   d8bb2:	429a      	cmp	r2, r3
   d8bb4:	d306      	bcc.n	d8bc4 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d8bb6:	6809      	ldr	r1, [r1, #0]
   d8bb8:	f002 f8b8 	bl	dad2c <strcpy>
			len = rhs.len;
   d8bbc:	68a3      	ldr	r3, [r4, #8]
   d8bbe:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d8bc0:	2300      	movs	r3, #0
   d8bc2:	e00a      	b.n	d8bda <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d8bc4:	f7ff fdc6 	bl	d8754 <free>
		}
	}
	buffer = rhs.buffer;
   d8bc8:	6823      	ldr	r3, [r4, #0]
   d8bca:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d8bcc:	6863      	ldr	r3, [r4, #4]
   d8bce:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d8bd0:	68a3      	ldr	r3, [r4, #8]
   d8bd2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d8bd4:	2300      	movs	r3, #0
   d8bd6:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d8bd8:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d8bda:	60a3      	str	r3, [r4, #8]
   d8bdc:	bd38      	pop	{r3, r4, r5, pc}

000d8bde <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d8bde:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d8be0:	b510      	push	{r4, lr}
   d8be2:	460b      	mov	r3, r1
   d8be4:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d8be6:	d007      	beq.n	d8bf8 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d8be8:	6809      	ldr	r1, [r1, #0]
   d8bea:	b119      	cbz	r1, d8bf4 <_ZN6StringaSERKS_+0x16>
   d8bec:	689a      	ldr	r2, [r3, #8]
   d8bee:	f7ff ffae 	bl	d8b4e <_ZN6String4copyEPKcj>
   d8bf2:	e001      	b.n	d8bf8 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d8bf4:	f7ff ff83 	bl	d8afe <_ZN6String10invalidateEv>

	return *this;
}
   d8bf8:	4620      	mov	r0, r4
   d8bfa:	bd10      	pop	{r4, pc}

000d8bfc <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d8bfc:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d8bfe:	b510      	push	{r4, lr}
   d8c00:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d8c02:	d001      	beq.n	d8c08 <_ZN6StringaSEOS_+0xc>
   d8c04:	f7ff ffce 	bl	d8ba4 <_ZN6String4moveERS_>
	return *this;
}
   d8c08:	4620      	mov	r0, r4
   d8c0a:	bd10      	pop	{r4, pc}

000d8c0c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d8c0c:	b538      	push	{r3, r4, r5, lr}
   d8c0e:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d8c10:	460c      	mov	r4, r1
   d8c12:	b141      	cbz	r1, d8c26 <_ZN6StringaSEPKc+0x1a>
   d8c14:	4608      	mov	r0, r1
   d8c16:	f002 f891 	bl	dad3c <strlen>
   d8c1a:	4621      	mov	r1, r4
   d8c1c:	4602      	mov	r2, r0
   d8c1e:	4628      	mov	r0, r5
   d8c20:	f7ff ff95 	bl	d8b4e <_ZN6String4copyEPKcj>
   d8c24:	e001      	b.n	d8c2a <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d8c26:	f7ff ff6a 	bl	d8afe <_ZN6String10invalidateEv>

	return *this;
}
   d8c2a:	4628      	mov	r0, r5
   d8c2c:	bd38      	pop	{r3, r4, r5, pc}

000d8c2e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d8c2e:	b570      	push	{r4, r5, r6, lr}
   d8c30:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d8c32:	460e      	mov	r6, r1
   d8c34:	b909      	cbnz	r1, d8c3a <_ZN6String6concatEPKcj+0xc>
   d8c36:	2000      	movs	r0, #0
   d8c38:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d8c3a:	b16a      	cbz	r2, d8c58 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d8c3c:	6883      	ldr	r3, [r0, #8]
   d8c3e:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d8c40:	4629      	mov	r1, r5
   d8c42:	f7ff ff73 	bl	d8b2c <_ZN6String7reserveEj>
   d8c46:	2800      	cmp	r0, #0
   d8c48:	d0f5      	beq.n	d8c36 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d8c4a:	6820      	ldr	r0, [r4, #0]
   d8c4c:	68a3      	ldr	r3, [r4, #8]
   d8c4e:	4631      	mov	r1, r6
   d8c50:	4418      	add	r0, r3
   d8c52:	f002 f86b 	bl	dad2c <strcpy>
	len = newlen;
   d8c56:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d8c58:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d8c5a:	bd70      	pop	{r4, r5, r6, pc}

000d8c5c <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d8c5c:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d8c5e:	688a      	ldr	r2, [r1, #8]
   d8c60:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d8c62:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d8c64:	f7ff ffe3 	bl	d8c2e <_ZN6String6concatEPKcj>
   d8c68:	b910      	cbnz	r0, d8c70 <_ZplRK15StringSumHelperRK6String+0x14>
   d8c6a:	4620      	mov	r0, r4
   d8c6c:	f7ff ff47 	bl	d8afe <_ZN6String10invalidateEv>
	return a;
}
   d8c70:	4620      	mov	r0, r4
   d8c72:	bd10      	pop	{r4, pc}

000d8c74 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d8c74:	b510      	push	{r4, lr}
   d8c76:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d8c78:	6800      	ldr	r0, [r0, #0]
   d8c7a:	b108      	cbz	r0, d8c80 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d8c7c:	f7ff fb6e 	bl	d835c <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d8c80:	4620      	mov	r0, r4
   d8c82:	bd10      	pop	{r4, pc}

000d8c84 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d8c84:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8c86:	4c06      	ldr	r4, [pc, #24]	; (d8ca0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d8c88:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d8c8a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8c8c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d8c8e:	f7ff fb5d 	bl	d834c <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d8c92:	4620      	mov	r0, r4
   d8c94:	4a03      	ldr	r2, [pc, #12]	; (d8ca4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d8c96:	4904      	ldr	r1, [pc, #16]	; (d8ca8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d8c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d8c9c:	f001 ba5c 	b.w	da158 <__aeabi_atexit>
   d8ca0:	2003e19c 	.word	0x2003e19c
   d8ca4:	2003daf0 	.word	0x2003daf0
   d8ca8:	000d8c75 	.word	0x000d8c75

000d8cac <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d8cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8cae:	4606      	mov	r6, r0
   d8cb0:	460d      	mov	r5, r1
   d8cb2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d8cb4:	2400      	movs	r4, #0
  while (size--) {
   d8cb6:	42bd      	cmp	r5, r7
   d8cb8:	d00c      	beq.n	d8cd4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d8cba:	6833      	ldr	r3, [r6, #0]
   d8cbc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d8cc0:	689b      	ldr	r3, [r3, #8]
   d8cc2:	4630      	mov	r0, r6
   d8cc4:	4798      	blx	r3
     if (chunk>=0)
   d8cc6:	2800      	cmp	r0, #0
   d8cc8:	db01      	blt.n	d8cce <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d8cca:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d8ccc:	e7f3      	b.n	d8cb6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d8cce:	2c00      	cmp	r4, #0
   d8cd0:	bf08      	it	eq
   d8cd2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d8cd4:	4620      	mov	r0, r4
   d8cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8cd8 <_ZN5Print5printEPKc>:
   d8cd8:	b508      	push	{r3, lr}
   d8cda:	f7fe fa03 	bl	d70e4 <_ZN5Print5writeEPKc>
   d8cde:	bd08      	pop	{r3, pc}

000d8ce0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d8ce0:	6803      	ldr	r3, [r0, #0]
   d8ce2:	689b      	ldr	r3, [r3, #8]
   d8ce4:	4718      	bx	r3

000d8ce6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d8ce6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d8ce8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d8cea:	4605      	mov	r5, r0
  size_t n = print('\r');
   d8cec:	f7ff fff8 	bl	d8ce0 <_ZN5Print5printEc>
  n += print('\n');
   d8cf0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d8cf2:	4604      	mov	r4, r0
  n += print('\n');
   d8cf4:	4628      	mov	r0, r5
   d8cf6:	f7ff fff3 	bl	d8ce0 <_ZN5Print5printEc>
  return n;
}
   d8cfa:	4420      	add	r0, r4
   d8cfc:	bd38      	pop	{r3, r4, r5, pc}

000d8cfe <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d8cfe:	b538      	push	{r3, r4, r5, lr}
   d8d00:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d8d02:	f7fe f9ef 	bl	d70e4 <_ZN5Print5writeEPKc>
   d8d06:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d8d08:	4628      	mov	r0, r5
   d8d0a:	f7ff ffec 	bl	d8ce6 <_ZN5Print7printlnEv>
  return n;
}
   d8d0e:	4420      	add	r0, r4
   d8d10:	bd38      	pop	{r3, r4, r5, pc}

000d8d12 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d8d12:	b530      	push	{r4, r5, lr}
   d8d14:	b08b      	sub	sp, #44	; 0x2c
   d8d16:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d8d18:	2100      	movs	r1, #0
   d8d1a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d8d1e:	2a01      	cmp	r2, #1
   d8d20:	bf98      	it	ls
   d8d22:	220a      	movls	r2, #10
   d8d24:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d8d28:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d8d2c:	fb05 3312 	mls	r3, r5, r2, r3
   d8d30:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8d34:	2b09      	cmp	r3, #9
   d8d36:	bf94      	ite	ls
   d8d38:	3330      	addls	r3, #48	; 0x30
   d8d3a:	3337      	addhi	r3, #55	; 0x37
   d8d3c:	b2db      	uxtb	r3, r3
   d8d3e:	4621      	mov	r1, r4
   d8d40:	f804 3901 	strb.w	r3, [r4], #-1
   d8d44:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d8d46:	2d00      	cmp	r5, #0
   d8d48:	d1ee      	bne.n	d8d28 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d8d4a:	f7fe f9cb 	bl	d70e4 <_ZN5Print5writeEPKc>
}
   d8d4e:	b00b      	add	sp, #44	; 0x2c
   d8d50:	bd30      	pop	{r4, r5, pc}

000d8d52 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d8d52:	b40c      	push	{r2, r3}
   d8d54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8d58:	b087      	sub	sp, #28
   d8d5a:	af00      	add	r7, sp, #0
   d8d5c:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d8d60:	4605      	mov	r5, r0
   d8d62:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d8d66:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d8d68:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d8d6a:	4623      	mov	r3, r4
   d8d6c:	464a      	mov	r2, r9
   d8d6e:	2114      	movs	r1, #20
   d8d70:	1d38      	adds	r0, r7, #4
   d8d72:	f7ff fd07 	bl	d8784 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d8d76:	2813      	cmp	r0, #19
   d8d78:	d805      	bhi.n	d8d86 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d8d7a:	1d39      	adds	r1, r7, #4
   d8d7c:	4628      	mov	r0, r5
   d8d7e:	f7fe f9b1 	bl	d70e4 <_ZN5Print5writeEPKc>
   d8d82:	4604      	mov	r4, r0
   d8d84:	e013      	b.n	d8dae <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d8d86:	f100 0308 	add.w	r3, r0, #8
   d8d8a:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d8d8e:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d8d90:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d8d94:	1c41      	adds	r1, r0, #1
   d8d96:	4623      	mov	r3, r4
   d8d98:	464a      	mov	r2, r9
   d8d9a:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d8d9c:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d8d9e:	f7ff fcf1 	bl	d8784 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d8da2:	4669      	mov	r1, sp
   d8da4:	4628      	mov	r0, r5
   d8da6:	f7fe f99d 	bl	d70e4 <_ZN5Print5writeEPKc>
   d8daa:	4604      	mov	r4, r0
   d8dac:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d8dae:	b11e      	cbz	r6, d8db8 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d8db0:	4628      	mov	r0, r5
   d8db2:	f7ff ff98 	bl	d8ce6 <_ZN5Print7printlnEv>
   d8db6:	4404      	add	r4, r0
    return n;
}
   d8db8:	4620      	mov	r0, r4
   d8dba:	371c      	adds	r7, #28
   d8dbc:	46bd      	mov	sp, r7
   d8dbe:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8dc2:	b002      	add	sp, #8
   d8dc4:	4770      	bx	lr
	...

000d8dc8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d8dc8:	4b01      	ldr	r3, [pc, #4]	; (d8dd0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d8dca:	4a02      	ldr	r2, [pc, #8]	; (d8dd4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d8dcc:	601a      	str	r2, [r3, #0]
   d8dce:	4770      	bx	lr
   d8dd0:	2003e1a0 	.word	0x2003e1a0
   d8dd4:	000db1ab 	.word	0x000db1ab

000d8dd8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d8dd8:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8dda:	2000      	movs	r0, #0
   d8ddc:	f7ff fca2 	bl	d8724 <spark_sync_time_pending>
   d8de0:	b128      	cbz	r0, d8dee <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8de2:	f7ff fc87 	bl	d86f4 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8de6:	f080 0001 	eor.w	r0, r0, #1
   d8dea:	b2c0      	uxtb	r0, r0
   d8dec:	bd08      	pop	{r3, pc}
   d8dee:	2001      	movs	r0, #1
    }
   d8df0:	bd08      	pop	{r3, pc}

000d8df2 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d8df2:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d8df4:	2000      	movs	r0, #0
   d8df6:	f7ff fa59 	bl	d82ac <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d8dfa:	4604      	mov	r4, r0
   d8dfc:	b968      	cbnz	r0, d8e1a <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d8dfe:	f7ff fbe5 	bl	d85cc <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d8e02:	2801      	cmp	r0, #1
   d8e04:	d10b      	bne.n	d8e1e <_ZN9TimeClass7isValidEv+0x2c>
   d8e06:	4620      	mov	r0, r4
   d8e08:	f7ff fc00 	bl	d860c <system_thread_get_state>
   d8e0c:	b938      	cbnz	r0, d8e1e <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d8e0e:	f7ff ffe3 	bl	d8dd8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d8e12:	b930      	cbnz	r0, d8e22 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d8e14:	f7ff fc66 	bl	d86e4 <spark_process>
   d8e18:	e7f9      	b.n	d8e0e <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d8e1a:	2001      	movs	r0, #1
   d8e1c:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d8e1e:	2000      	movs	r0, #0
   d8e20:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d8e22:	f7ff ffd9 	bl	d8dd8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d8e26:	2000      	movs	r0, #0
   d8e28:	f7ff fa40 	bl	d82ac <HAL_RTC_Time_Is_Valid>
   d8e2c:	3000      	adds	r0, #0
   d8e2e:	bf18      	it	ne
   d8e30:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d8e32:	bd10      	pop	{r4, pc}

000d8e34 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d8e34:	b508      	push	{r3, lr}
    (void)isValid();
   d8e36:	f7ff ffdc 	bl	d8df2 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d8e3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d8e3e:	f7ff ba15 	b.w	d826c <HAL_RTC_Get_UnixTime>
	...

000d8e44 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d8e44:	4b02      	ldr	r3, [pc, #8]	; (d8e50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d8e46:	681a      	ldr	r2, [r3, #0]
   d8e48:	4b02      	ldr	r3, [pc, #8]	; (d8e54 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d8e4a:	601a      	str	r2, [r3, #0]
   d8e4c:	4770      	bx	lr
   d8e4e:	bf00      	nop
   d8e50:	2003da88 	.word	0x2003da88
   d8e54:	2003e1a4 	.word	0x2003e1a4

000d8e58 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d8e58:	2100      	movs	r1, #0
   d8e5a:	f7ff bbc7 	b.w	d85ec <system_delay_ms>

000d8e5e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d8e5e:	b510      	push	{r4, lr}
   d8e60:	4604      	mov	r4, r0
   d8e62:	f7fc f95c 	bl	d511e <_ZNSt14_Function_baseD1Ev>
   d8e66:	4620      	mov	r0, r4
   d8e68:	bd10      	pop	{r4, pc}
	...

000d8e6c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8e6c:	4803      	ldr	r0, [pc, #12]	; (d8e7c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d8e6e:	4a04      	ldr	r2, [pc, #16]	; (d8e80 <_GLOBAL__sub_I_RGB+0x14>)
   d8e70:	4904      	ldr	r1, [pc, #16]	; (d8e84 <_GLOBAL__sub_I_RGB+0x18>)
   d8e72:	2300      	movs	r3, #0
   d8e74:	6083      	str	r3, [r0, #8]
   d8e76:	f001 b96f 	b.w	da158 <__aeabi_atexit>
   d8e7a:	bf00      	nop
   d8e7c:	2003e1a8 	.word	0x2003e1a8
   d8e80:	2003daf0 	.word	0x2003daf0
   d8e84:	000d8e5f 	.word	0x000d8e5f

000d8e88 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d8e88:	7d00      	ldrb	r0, [r0, #20]
   d8e8a:	4770      	bx	lr

000d8e8c <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d8e8c:	7d03      	ldrb	r3, [r0, #20]
   d8e8e:	b11b      	cbz	r3, d8e98 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d8e90:	6983      	ldr	r3, [r0, #24]
   d8e92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d8e96:	d102      	bne.n	d8e9e <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d8e98:	ed9f 0a05 	vldr	s0, [pc, #20]	; d8eb0 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d8e9c:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d8e9e:	ee07 3a90 	vmov	s15, r3
   d8ea2:	ed9f 7a04 	vldr	s14, [pc, #16]	; d8eb4 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d8ea6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8eaa:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d8eae:	4770      	bx	lr
   d8eb0:	00000000 	.word	0x00000000
   d8eb4:	42c80000 	.word	0x42c80000

000d8eb8 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d8eb8:	7d03      	ldrb	r3, [r0, #20]
   d8eba:	b11b      	cbz	r3, d8ec4 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d8ebc:	6a03      	ldr	r3, [r0, #32]
   d8ebe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d8ec2:	d102      	bne.n	d8eca <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d8ec4:	ed9f 0a05 	vldr	s0, [pc, #20]	; d8edc <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d8ec8:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d8eca:	ee07 3a90 	vmov	s15, r3
   d8ece:	ed9f 7a04 	vldr	s14, [pc, #16]	; d8ee0 <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d8ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8ed6:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d8eda:	4770      	bx	lr
   d8edc:	00000000 	.word	0x00000000
   d8ee0:	42c80000 	.word	0x42c80000

000d8ee4 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d8ee4:	7d03      	ldrb	r3, [r0, #20]
   d8ee6:	b17b      	cbz	r3, d8f08 <_ZNK14CellularSignal10getQualityEv+0x24>
   d8ee8:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d8eea:	2b00      	cmp	r3, #0
   d8eec:	db0c      	blt.n	d8f08 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d8eee:	ee07 3a90 	vmov	s15, r3
   d8ef2:	eddf 6a07 	vldr	s13, [pc, #28]	; d8f10 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d8ef6:	ed9f 0a07 	vldr	s0, [pc, #28]	; d8f14 <_ZNK14CellularSignal10getQualityEv+0x30>
   d8efa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d8efe:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d8f02:	ee27 0a80 	vmul.f32	s0, s15, s0
   d8f06:	4770      	bx	lr
    }

    return -1.0f;
   d8f08:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d8f0c:	4770      	bx	lr
   d8f0e:	bf00      	nop
   d8f10:	477fff00 	.word	0x477fff00
   d8f14:	42c80000 	.word	0x42c80000

000d8f18 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d8f18:	7d03      	ldrb	r3, [r0, #20]
   d8f1a:	b17b      	cbz	r3, d8f3c <_ZNK14CellularSignal11getStrengthEv+0x24>
   d8f1c:	69c3      	ldr	r3, [r0, #28]
   d8f1e:	2b00      	cmp	r3, #0
   d8f20:	db0c      	blt.n	d8f3c <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d8f22:	ee07 3a90 	vmov	s15, r3
   d8f26:	eddf 6a07 	vldr	s13, [pc, #28]	; d8f44 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d8f2a:	ed9f 0a07 	vldr	s0, [pc, #28]	; d8f48 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d8f2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d8f32:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d8f36:	ee27 0a80 	vmul.f32	s0, s15, s0
   d8f3a:	4770      	bx	lr
    }

    return -1.0f;
   d8f3c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d8f40:	4770      	bx	lr
   d8f42:	bf00      	nop
   d8f44:	477fff00 	.word	0x477fff00
   d8f48:	42c80000 	.word	0x42c80000

000d8f4c <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d8f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8f50:	4607      	mov	r7, r0
   d8f52:	460c      	mov	r4, r1
{
    if (base == 0) {
   d8f54:	4615      	mov	r5, r2
   d8f56:	b92a      	cbnz	r2, d8f64 <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d8f58:	6803      	ldr	r3, [r0, #0]
   d8f5a:	b2c9      	uxtb	r1, r1
   d8f5c:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d8f5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d8f62:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d8f64:	2900      	cmp	r1, #0
   d8f66:	da07      	bge.n	d8f78 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d8f68:	2a0a      	cmp	r2, #10
   d8f6a:	d105      	bne.n	d8f78 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d8f6c:	212d      	movs	r1, #45	; 0x2d
   d8f6e:	f7ff feb7 	bl	d8ce0 <_ZN5Print5printEc>
            val = -n;
   d8f72:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d8f74:	4606      	mov	r6, r0
            val = -n;
   d8f76:	e001      	b.n	d8f7c <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d8f78:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d8f7a:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d8f7c:	b2ea      	uxtb	r2, r5
   d8f7e:	4638      	mov	r0, r7
   d8f80:	f7ff fec7 	bl	d8d12 <_ZN5Print11printNumberEmh>
    }
}
   d8f84:	4430      	add	r0, r6
   d8f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8f8a <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
   d8f8a:	b570      	push	{r4, r5, r6, lr}
   d8f8c:	460d      	mov	r5, r1
   d8f8e:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d8f90:	220a      	movs	r2, #10
   d8f92:	6881      	ldr	r1, [r0, #8]
   d8f94:	4628      	mov	r0, r5
   d8f96:	f7ff ffd9 	bl	d8f4c <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
   d8f9a:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d8f9c:	4604      	mov	r4, r0
    n += p.print(',');
   d8f9e:	4628      	mov	r0, r5
   d8fa0:	f7ff fe9e 	bl	d8ce0 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d8fa4:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d8fa6:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d8fa8:	68f1      	ldr	r1, [r6, #12]
   d8faa:	4628      	mov	r0, r5
   d8fac:	f7ff ffce 	bl	d8f4c <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
   d8fb0:	4420      	add	r0, r4
   d8fb2:	bd70      	pop	{r4, r5, r6, pc}

000d8fb4 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d8fb4:	f1a0 0004 	sub.w	r0, r0, #4
   d8fb8:	f7ff bfe7 	b.w	d8f8a <_ZNK14CellularSignal7printToER5Print>

000d8fbc <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d8fbc:	6800      	ldr	r0, [r0, #0]
   d8fbe:	f000 bb88 	b.w	d96d2 <_ZN7TwoWire4lockEv>

000d8fc2 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d8fc2:	b510      	push	{r4, lr}
   d8fc4:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d8fc6:	6001      	str	r1, [r0, #0]
   d8fc8:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d8fca:	b10a      	cbz	r2, d8fd0 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d8fcc:	f7ff fff6 	bl	d8fbc <_ZN9FuelGauge4lockEv>
    }
}
   d8fd0:	4620      	mov	r0, r4
   d8fd2:	bd10      	pop	{r4, pc}

000d8fd4 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d8fd4:	b538      	push	{r3, r4, r5, lr}
   d8fd6:	4604      	mov	r4, r0
   d8fd8:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d8fda:	f001 f897 	bl	da10c <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d8fde:	462a      	mov	r2, r5
   d8fe0:	4601      	mov	r1, r0
   d8fe2:	4620      	mov	r0, r4
   d8fe4:	f7ff ffed 	bl	d8fc2 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d8fe8:	4620      	mov	r0, r4
   d8fea:	bd38      	pop	{r3, r4, r5, pc}

000d8fec <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d8fec:	6800      	ldr	r0, [r0, #0]
   d8fee:	f000 bb79 	b.w	d96e4 <_ZN7TwoWire6unlockEv>

000d8ff2 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d8ff2:	b510      	push	{r4, lr}
{
    if (lock_) {
   d8ff4:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d8ff6:	4604      	mov	r4, r0
{
    if (lock_) {
   d8ff8:	b10b      	cbz	r3, d8ffe <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d8ffa:	f7ff fff7 	bl	d8fec <_ZN9FuelGauge6unlockEv>
    }
}
   d8ffe:	4620      	mov	r0, r4
   d9000:	bd10      	pop	{r4, pc}

000d9002 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d9002:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9004:	4604      	mov	r4, r0
   d9006:	4616      	mov	r6, r2
   d9008:	461d      	mov	r5, r3
   d900a:	460f      	mov	r7, r1
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d900c:	f7ff ffd6 	bl	d8fbc <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   d9010:	6820      	ldr	r0, [r4, #0]
   d9012:	2136      	movs	r1, #54	; 0x36
   d9014:	f000 fb52 	bl	d96bc <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
   d9018:	6820      	ldr	r0, [r4, #0]
   d901a:	6803      	ldr	r3, [r0, #0]
   d901c:	4639      	mov	r1, r7
   d901e:	689b      	ldr	r3, [r3, #8]
   d9020:	4798      	blx	r3
    i2c_.endTransmission(true);
   d9022:	2101      	movs	r1, #1
   d9024:	6820      	ldr	r0, [r4, #0]
   d9026:	f000 fb4c 	bl	d96c2 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
   d902a:	2202      	movs	r2, #2
   d902c:	2136      	movs	r1, #54	; 0x36
   d902e:	2301      	movs	r3, #1
   d9030:	6820      	ldr	r0, [r4, #0]
   d9032:	f000 fb2d 	bl	d9690 <_ZN7TwoWire11requestFromEhjh>
    MSB = i2c_.read();
   d9036:	6820      	ldr	r0, [r4, #0]
   d9038:	6803      	ldr	r3, [r0, #0]
   d903a:	695b      	ldr	r3, [r3, #20]
   d903c:	4798      	blx	r3
   d903e:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
   d9040:	6820      	ldr	r0, [r4, #0]
   d9042:	6803      	ldr	r3, [r0, #0]
   d9044:	695b      	ldr	r3, [r3, #20]
   d9046:	4798      	blx	r3
   d9048:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d904a:	4620      	mov	r0, r4
}
   d904c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d9050:	f7ff bfcc 	b.w	d8fec <_ZN9FuelGauge6unlockEv>

000d9054 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
   d9054:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d9056:	ab02      	add	r3, sp, #8
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d9058:	2200      	movs	r2, #0
	byte LSB = 0;
   d905a:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d905e:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
   d9062:	2104      	movs	r1, #4
   d9064:	f10d 0206 	add.w	r2, sp, #6
   d9068:	f7ff ffcb 	bl	d9002 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d906c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d9070:	f001 fb2e 	bl	da6d0 <__aeabi_i2d>
   d9074:	2200      	movs	r2, #0
   d9076:	4b09      	ldr	r3, [pc, #36]	; (d909c <_ZN9FuelGauge6getSoCEv+0x48>)
   d9078:	f001 fb90 	bl	da79c <__aeabi_dmul>
   d907c:	f001 fda0 	bl	dabc0 <__aeabi_d2f>
   d9080:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d9084:	ee00 3a10 	vmov	s0, r3
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d9088:	ee07 0a90 	vmov	s15, r0
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d908c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d9090:	ee37 0a80 	vadd.f32	s0, s15, s0
   d9094:	b003      	add	sp, #12
   d9096:	f85d fb04 	ldr.w	pc, [sp], #4
   d909a:	bf00      	nop
   d909c:	3f700000 	.word	0x3f700000

000d90a0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d90a0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d90a2:	4b0c      	ldr	r3, [pc, #48]	; (d90d4 <serialEventRun+0x34>)
   d90a4:	b133      	cbz	r3, d90b4 <serialEventRun+0x14>
   d90a6:	f000 f977 	bl	d9398 <_Z16_fetch_usbserialv>
   d90aa:	6803      	ldr	r3, [r0, #0]
   d90ac:	691b      	ldr	r3, [r3, #16]
   d90ae:	4798      	blx	r3
   d90b0:	2800      	cmp	r0, #0
   d90b2:	dc09      	bgt.n	d90c8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d90b4:	4b08      	ldr	r3, [pc, #32]	; (d90d8 <serialEventRun+0x38>)
   d90b6:	b163      	cbz	r3, d90d2 <serialEventRun+0x32>
   d90b8:	f000 fa6a 	bl	d9590 <_Z22__fetch_global_Serial1v>
   d90bc:	6803      	ldr	r3, [r0, #0]
   d90be:	691b      	ldr	r3, [r3, #16]
   d90c0:	4798      	blx	r3
   d90c2:	2800      	cmp	r0, #0
   d90c4:	dc03      	bgt.n	d90ce <serialEventRun+0x2e>
   d90c6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d90c8:	f3af 8000 	nop.w
   d90cc:	e7f2      	b.n	d90b4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d90ce:	f3af 8000 	nop.w
   d90d2:	bd08      	pop	{r3, pc}
	...

000d90dc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d90dc:	b508      	push	{r3, lr}
	serialEventRun();
   d90de:	f7ff ffdf 	bl	d90a0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d90e2:	f7ff f8bb 	bl	d825c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d90e6:	4b01      	ldr	r3, [pc, #4]	; (d90ec <_post_loop+0x10>)
   d90e8:	6018      	str	r0, [r3, #0]
   d90ea:	bd08      	pop	{r3, pc}
   d90ec:	2003e504 	.word	0x2003e504

000d90f0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d90f0:	4802      	ldr	r0, [pc, #8]	; (d90fc <_Z33system_initialize_user_backup_ramv+0xc>)
   d90f2:	4a03      	ldr	r2, [pc, #12]	; (d9100 <_Z33system_initialize_user_backup_ramv+0x10>)
   d90f4:	4903      	ldr	r1, [pc, #12]	; (d9104 <_Z33system_initialize_user_backup_ramv+0x14>)
   d90f6:	1a12      	subs	r2, r2, r0
   d90f8:	f001 bdcf 	b.w	dac9a <memcpy>
   d90fc:	2003f400 	.word	0x2003f400
   d9100:	2003f404 	.word	0x2003f404
   d9104:	000db540 	.word	0x000db540

000d9108 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d9108:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d910a:	2300      	movs	r3, #0
   d910c:	9300      	str	r3, [sp, #0]
   d910e:	461a      	mov	r2, r3
   d9110:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9114:	f7ff fa8c 	bl	d8630 <system_ctrl_set_result>
}
   d9118:	b003      	add	sp, #12
   d911a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9120 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d9120:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d9122:	8843      	ldrh	r3, [r0, #2]
   d9124:	2b0a      	cmp	r3, #10
   d9126:	d008      	beq.n	d913a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d9128:	2b50      	cmp	r3, #80	; 0x50
   d912a:	d109      	bne.n	d9140 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d912c:	4b09      	ldr	r3, [pc, #36]	; (d9154 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d912e:	681b      	ldr	r3, [r3, #0]
   d9130:	b13b      	cbz	r3, d9142 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d9132:	b003      	add	sp, #12
   d9134:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d9138:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d913a:	f7ff ffe5 	bl	d9108 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d913e:	e006      	b.n	d914e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9140:	2300      	movs	r3, #0
   d9142:	9300      	str	r3, [sp, #0]
   d9144:	461a      	mov	r2, r3
   d9146:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d914a:	f7ff fa71 	bl	d8630 <system_ctrl_set_result>
        break;
    }
}
   d914e:	b003      	add	sp, #12
   d9150:	f85d fb04 	ldr.w	pc, [sp], #4
   d9154:	2003e1b8 	.word	0x2003e1b8

000d9158 <module_user_init_hook>:

void module_user_init_hook()
{
   d9158:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d915a:	4c10      	ldr	r4, [pc, #64]	; (d919c <module_user_init_hook+0x44>)
   d915c:	4d10      	ldr	r5, [pc, #64]	; (d91a0 <module_user_init_hook+0x48>)
   d915e:	6823      	ldr	r3, [r4, #0]
   d9160:	42ab      	cmp	r3, r5
   d9162:	4b10      	ldr	r3, [pc, #64]	; (d91a4 <module_user_init_hook+0x4c>)
   d9164:	bf0c      	ite	eq
   d9166:	2201      	moveq	r2, #1
   d9168:	2200      	movne	r2, #0
   d916a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d916c:	d002      	beq.n	d9174 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d916e:	f7ff ffbf 	bl	d90f0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d9172:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d9174:	f7ff f862 	bl	d823c <HAL_RNG_GetRandomNumber>
   d9178:	4604      	mov	r4, r0
    srand(seed);
   d917a:	f001 fda1 	bl	dacc0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d917e:	4b0a      	ldr	r3, [pc, #40]	; (d91a8 <module_user_init_hook+0x50>)
   d9180:	b113      	cbz	r3, d9188 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d9182:	4620      	mov	r0, r4
   d9184:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d9188:	2100      	movs	r1, #0
   d918a:	4807      	ldr	r0, [pc, #28]	; (d91a8 <module_user_init_hook+0x50>)
   d918c:	f7ff fad2 	bl	d8734 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d9190:	2100      	movs	r1, #0
   d9192:	4806      	ldr	r0, [pc, #24]	; (d91ac <module_user_init_hook+0x54>)
}
   d9194:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d9198:	f7ff ba40 	b.w	d861c <system_ctrl_set_app_request_handler>
   d919c:	2003f400 	.word	0x2003f400
   d91a0:	9a271c1e 	.word	0x9a271c1e
   d91a4:	2003e1bc 	.word	0x2003e1bc
   d91a8:	00000000 	.word	0x00000000
   d91ac:	000d9121 	.word	0x000d9121

000d91b0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d91b0:	4770      	bx	lr

000d91b2 <_ZN9IPAddressD0Ev>:
   d91b2:	b510      	push	{r4, lr}
   d91b4:	2118      	movs	r1, #24
   d91b6:	4604      	mov	r4, r0
   d91b8:	f000 ffdc 	bl	da174 <_ZdlPvj>
   d91bc:	4620      	mov	r0, r4
   d91be:	bd10      	pop	{r4, pc}

000d91c0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d91c0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d91c2:	7d03      	ldrb	r3, [r0, #20]
   d91c4:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d91c6:	b08d      	sub	sp, #52	; 0x34
   d91c8:	460e      	mov	r6, r1
   d91ca:	f100 0704 	add.w	r7, r0, #4
   d91ce:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d91d2:	d002      	beq.n	d91da <_ZNK9IPAddress7printToER5Print+0x1a>
   d91d4:	f100 0508 	add.w	r5, r0, #8
   d91d8:	e018      	b.n	d920c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d91da:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d91dc:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d91de:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d91e2:	232f      	movs	r3, #47	; 0x2f
   d91e4:	462a      	mov	r2, r5
   d91e6:	200a      	movs	r0, #10
   d91e8:	f7ff f8c8 	bl	d837c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d91ec:	4628      	mov	r0, r5
   d91ee:	f001 fda5 	bl	dad3c <strlen>
   d91f2:	6833      	ldr	r3, [r6, #0]
   d91f4:	4602      	mov	r2, r0
   d91f6:	68db      	ldr	r3, [r3, #12]
   d91f8:	4629      	mov	r1, r5
   d91fa:	4630      	mov	r0, r6
   d91fc:	4798      	blx	r3
   d91fe:	e00f      	b.n	d9220 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d9200:	b124      	cbz	r4, d920c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d9202:	212e      	movs	r1, #46	; 0x2e
   d9204:	4630      	mov	r0, r6
   d9206:	f7ff fd6b 	bl	d8ce0 <_ZN5Print5printEc>
   d920a:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d920c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d9210:	220a      	movs	r2, #10
   d9212:	4630      	mov	r0, r6
   d9214:	f7ff fd7d 	bl	d8d12 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d9218:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d921a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d921c:	d1f0      	bne.n	d9200 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d921e:	4620      	mov	r0, r4
    }
    return n;
}
   d9220:	b00d      	add	sp, #52	; 0x34
   d9222:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9224 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d9224:	b510      	push	{r4, lr}
   d9226:	4b05      	ldr	r3, [pc, #20]	; (d923c <_ZN9IPAddressC1Ev+0x18>)
   d9228:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d922a:	2211      	movs	r2, #17
   d922c:	f840 3b04 	str.w	r3, [r0], #4
   d9230:	2100      	movs	r1, #0
   d9232:	f001 fd3d 	bl	dacb0 <memset>
{
    clear();
}
   d9236:	4620      	mov	r0, r4
   d9238:	bd10      	pop	{r4, pc}
   d923a:	bf00      	nop
   d923c:	000db27c 	.word	0x000db27c

000d9240 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d9240:	4603      	mov	r3, r0
   d9242:	4a07      	ldr	r2, [pc, #28]	; (d9260 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d9244:	b510      	push	{r4, lr}
   d9246:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d924a:	f101 0210 	add.w	r2, r1, #16
   d924e:	f851 4b04 	ldr.w	r4, [r1], #4
   d9252:	f843 4b04 	str.w	r4, [r3], #4
   d9256:	4291      	cmp	r1, r2
   d9258:	d1f9      	bne.n	d924e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d925a:	780a      	ldrb	r2, [r1, #0]
   d925c:	701a      	strb	r2, [r3, #0]
}
   d925e:	bd10      	pop	{r4, pc}
   d9260:	000db27c 	.word	0x000db27c

000d9264 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d9264:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d9266:	2b04      	cmp	r3, #4
   d9268:	d101      	bne.n	d926e <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d926a:	6840      	ldr	r0, [r0, #4]
   d926c:	e008      	b.n	d9280 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d926e:	2b06      	cmp	r3, #6
   d9270:	d10a      	bne.n	d9288 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d9272:	6843      	ldr	r3, [r0, #4]
   d9274:	b953      	cbnz	r3, d928c <_ZNK9IPAddresscvbEv+0x28>
   d9276:	6883      	ldr	r3, [r0, #8]
   d9278:	b943      	cbnz	r3, d928c <_ZNK9IPAddresscvbEv+0x28>
   d927a:	68c3      	ldr	r3, [r0, #12]
   d927c:	b933      	cbnz	r3, d928c <_ZNK9IPAddresscvbEv+0x28>
   d927e:	6900      	ldr	r0, [r0, #16]
   d9280:	3000      	adds	r0, #0
   d9282:	bf18      	it	ne
   d9284:	2001      	movne	r0, #1
   d9286:	4770      	bx	lr
    } else {
        return false;
   d9288:	2000      	movs	r0, #0
   d928a:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d928c:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d928e:	4770      	bx	lr

000d9290 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d9290:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d9292:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d9296:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d929a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d929e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d92a2:	2304      	movs	r3, #4
   d92a4:	6041      	str	r1, [r0, #4]
   d92a6:	7503      	strb	r3, [r0, #20]
   d92a8:	bd10      	pop	{r4, pc}

000d92aa <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d92aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d92ac:	780d      	ldrb	r5, [r1, #0]
   d92ae:	788b      	ldrb	r3, [r1, #2]
   d92b0:	784a      	ldrb	r2, [r1, #1]
   d92b2:	78c9      	ldrb	r1, [r1, #3]
   d92b4:	9100      	str	r1, [sp, #0]
   d92b6:	4629      	mov	r1, r5
   d92b8:	f7ff ffea 	bl	d9290 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d92bc:	b003      	add	sp, #12
   d92be:	bd30      	pop	{r4, r5, pc}

000d92c0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
   d92c0:	b510      	push	{r4, lr}
   d92c2:	4b03      	ldr	r3, [pc, #12]	; (d92d0 <_ZN9IPAddressC1EPKh+0x10>)
   d92c4:	6003      	str	r3, [r0, #0]
   d92c6:	4604      	mov	r4, r0
{
    *this = address;
   d92c8:	f7ff ffef 	bl	d92aa <_ZN9IPAddressaSEPKh>
}
   d92cc:	4620      	mov	r0, r4
   d92ce:	bd10      	pop	{r4, pc}
   d92d0:	000db27c 	.word	0x000db27c

000d92d4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d92d4:	7441      	strb	r1, [r0, #17]
   d92d6:	4770      	bx	lr

000d92d8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d92d8:	4770      	bx	lr

000d92da <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d92da:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d92dc:	2100      	movs	r1, #0
   d92de:	7c00      	ldrb	r0, [r0, #16]
   d92e0:	f7ff f954 	bl	d858c <HAL_USB_USART_Receive_Data>
}
   d92e4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d92e8:	bf28      	it	cs
   d92ea:	f04f 30ff 	movcs.w	r0, #4294967295
   d92ee:	bd08      	pop	{r3, pc}

000d92f0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d92f0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d92f2:	2101      	movs	r1, #1
   d92f4:	7c00      	ldrb	r0, [r0, #16]
   d92f6:	f7ff f949 	bl	d858c <HAL_USB_USART_Receive_Data>
}
   d92fa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d92fe:	bf28      	it	cs
   d9300:	f04f 30ff 	movcs.w	r0, #4294967295
   d9304:	bd08      	pop	{r3, pc}

000d9306 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d9306:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d9308:	7c00      	ldrb	r0, [r0, #16]
   d930a:	f7ff f937 	bl	d857c <HAL_USB_USART_Available_Data_For_Write>
}
   d930e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9312:	bd08      	pop	{r3, pc}

000d9314 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d9314:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d9316:	7c00      	ldrb	r0, [r0, #16]
   d9318:	f7ff f928 	bl	d856c <HAL_USB_USART_Available_Data>
}
   d931c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9320:	bd08      	pop	{r3, pc}

000d9322 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d9322:	7c00      	ldrb	r0, [r0, #16]
   d9324:	f7ff b942 	b.w	d85ac <HAL_USB_USART_Flush_Data>

000d9328 <_ZN9USBSerialD0Ev>:
   d9328:	b510      	push	{r4, lr}
   d932a:	2114      	movs	r1, #20
   d932c:	4604      	mov	r4, r0
   d932e:	f000 ff21 	bl	da174 <_ZdlPvj>
   d9332:	4620      	mov	r0, r4
   d9334:	bd10      	pop	{r4, pc}

000d9336 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d9336:	b538      	push	{r3, r4, r5, lr}
   d9338:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d933a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d933c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d933e:	f7ff f91d 	bl	d857c <HAL_USB_USART_Available_Data_For_Write>
   d9342:	2800      	cmp	r0, #0
   d9344:	dc01      	bgt.n	d934a <_ZN9USBSerial5writeEh+0x14>
   d9346:	7c60      	ldrb	r0, [r4, #17]
   d9348:	b128      	cbz	r0, d9356 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d934a:	4629      	mov	r1, r5
   d934c:	7c20      	ldrb	r0, [r4, #16]
   d934e:	f7ff f925 	bl	d859c <HAL_USB_USART_Send_Data>
   d9352:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d9356:	bd38      	pop	{r3, r4, r5, pc}

000d9358 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9358:	b510      	push	{r4, lr}
   d935a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d935c:	2300      	movs	r3, #0
   d935e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d9360:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9364:	60a3      	str	r3, [r4, #8]
   d9366:	4b05      	ldr	r3, [pc, #20]	; (d937c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d9368:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d936a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d936c:	4608      	mov	r0, r1
{
  _serial = serial;
   d936e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d9370:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d9372:	4611      	mov	r1, r2
   d9374:	f7ff f8ea 	bl	d854c <HAL_USB_USART_Init>
}
   d9378:	4620      	mov	r0, r4
   d937a:	bd10      	pop	{r4, pc}
   d937c:	000db290 	.word	0x000db290

000d9380 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d9380:	2200      	movs	r2, #0
   d9382:	7c00      	ldrb	r0, [r0, #16]
   d9384:	f7ff b8ea 	b.w	d855c <HAL_USB_USART_Begin>

000d9388 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d9388:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d938a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d938c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d938e:	2100      	movs	r1, #0
   d9390:	f001 fc8e 	bl	dacb0 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d9394:	4620      	mov	r0, r4
   d9396:	bd10      	pop	{r4, pc}

000d9398 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d9398:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d939a:	4d0e      	ldr	r5, [pc, #56]	; (d93d4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d939c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d939e:	a801      	add	r0, sp, #4
   d93a0:	f7ff fff2 	bl	d9388 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d93a4:	6829      	ldr	r1, [r5, #0]
   d93a6:	f011 0401 	ands.w	r4, r1, #1
   d93aa:	d110      	bne.n	d93ce <_Z16_fetch_usbserialv+0x36>
   d93ac:	4628      	mov	r0, r5
   d93ae:	f7fa fe7a 	bl	d40a6 <__cxa_guard_acquire>
   d93b2:	b160      	cbz	r0, d93ce <_Z16_fetch_usbserialv+0x36>
   d93b4:	aa01      	add	r2, sp, #4
   d93b6:	4621      	mov	r1, r4
   d93b8:	4807      	ldr	r0, [pc, #28]	; (d93d8 <_Z16_fetch_usbserialv+0x40>)
   d93ba:	f7ff ffcd 	bl	d9358 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d93be:	4628      	mov	r0, r5
   d93c0:	f7fa fe76 	bl	d40b0 <__cxa_guard_release>
   d93c4:	4a05      	ldr	r2, [pc, #20]	; (d93dc <_Z16_fetch_usbserialv+0x44>)
   d93c6:	4906      	ldr	r1, [pc, #24]	; (d93e0 <_Z16_fetch_usbserialv+0x48>)
   d93c8:	4803      	ldr	r0, [pc, #12]	; (d93d8 <_Z16_fetch_usbserialv+0x40>)
   d93ca:	f000 fec5 	bl	da158 <__aeabi_atexit>
	return _usbserial;
}
   d93ce:	4802      	ldr	r0, [pc, #8]	; (d93d8 <_Z16_fetch_usbserialv+0x40>)
   d93d0:	b007      	add	sp, #28
   d93d2:	bd30      	pop	{r4, r5, pc}
   d93d4:	2003e1c0 	.word	0x2003e1c0
   d93d8:	2003e1c4 	.word	0x2003e1c4
   d93dc:	2003daf0 	.word	0x2003daf0
   d93e0:	000d92d9 	.word	0x000d92d9

000d93e4 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d93e4:	4700      	bx	r0
	...

000d93e8 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d93e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d93ea:	b085      	sub	sp, #20
   d93ec:	461c      	mov	r4, r3
   d93ee:	460e      	mov	r6, r1
   d93f0:	4617      	mov	r7, r2
   d93f2:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   d93f4:	f7fe fe9a 	bl	d812c <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   d93f8:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d93fa:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d93fc:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d9400:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d9402:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d9406:	bfa5      	ittet	ge
   d9408:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d940c:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d9410:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d9412:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d9414:	9300      	str	r3, [sp, #0]
   d9416:	4632      	mov	r2, r6
   d9418:	463b      	mov	r3, r7
   d941a:	4906      	ldr	r1, [pc, #24]	; (d9434 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d941c:	bfa8      	it	ge
   d941e:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d9422:	4628      	mov	r0, r5
   d9424:	f7fe fe7a 	bl	d811c <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d9428:	fab0 f080 	clz	r0, r0
   d942c:	0940      	lsrs	r0, r0, #5
   d942e:	b005      	add	sp, #20
   d9430:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9432:	bf00      	nop
   d9434:	000d93e5 	.word	0x000d93e5

000d9438 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d9438:	f7fe be88 	b.w	d814c <HAL_Interrupts_Disable_All>

000d943c <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d943c:	f7fe be7e 	b.w	d813c <HAL_Interrupts_Enable_All>

000d9440 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d9440:	2200      	movs	r2, #0
   d9442:	4611      	mov	r1, r2
   d9444:	6840      	ldr	r0, [r0, #4]
   d9446:	f7ff b915 	b.w	d8674 <network_ready>

000d944a <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d944a:	2200      	movs	r2, #0
   d944c:	4611      	mov	r1, r2
   d944e:	6840      	ldr	r0, [r0, #4]
   d9450:	f7ff b930 	b.w	d86b4 <network_listening>

000d9454 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d9454:	2200      	movs	r2, #0
   d9456:	4611      	mov	r1, r2
   d9458:	6840      	ldr	r0, [r0, #4]
   d945a:	f7ff b93b 	b.w	d86d4 <network_get_listen_timeout>

000d945e <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d945e:	2200      	movs	r2, #0
   d9460:	6840      	ldr	r0, [r0, #4]
   d9462:	f7ff b92f 	b.w	d86c4 <network_set_listen_timeout>

000d9466 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d9466:	2200      	movs	r2, #0
   d9468:	f081 0101 	eor.w	r1, r1, #1
   d946c:	6840      	ldr	r0, [r0, #4]
   d946e:	f7ff b919 	b.w	d86a4 <network_listen>

000d9472 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d9472:	2300      	movs	r3, #0
   d9474:	461a      	mov	r2, r3
   d9476:	4619      	mov	r1, r3
   d9478:	6840      	ldr	r0, [r0, #4]
   d947a:	f7ff b90b 	b.w	d8694 <network_off>

000d947e <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d947e:	2300      	movs	r3, #0
   d9480:	461a      	mov	r2, r3
   d9482:	4619      	mov	r1, r3
   d9484:	6840      	ldr	r0, [r0, #4]
   d9486:	f7ff b8fd 	b.w	d8684 <network_on>

000d948a <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d948a:	2200      	movs	r2, #0
   d948c:	4611      	mov	r1, r2
   d948e:	6840      	ldr	r0, [r0, #4]
   d9490:	f7ff b8e0 	b.w	d8654 <network_connecting>

000d9494 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d9494:	2200      	movs	r2, #0
   d9496:	2102      	movs	r1, #2
   d9498:	6840      	ldr	r0, [r0, #4]
   d949a:	f7ff b8e3 	b.w	d8664 <network_disconnect>

000d949e <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d949e:	2300      	movs	r3, #0
   d94a0:	461a      	mov	r2, r3
   d94a2:	6840      	ldr	r0, [r0, #4]
   d94a4:	f7ff b8ce 	b.w	d8644 <network_connect>

000d94a8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d94a8:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d94aa:	4c08      	ldr	r4, [pc, #32]	; (d94cc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d94ac:	2528      	movs	r5, #40	; 0x28
   d94ae:	462a      	mov	r2, r5
   d94b0:	2100      	movs	r1, #0
   d94b2:	4620      	mov	r0, r4
   d94b4:	f001 fbfc 	bl	dacb0 <memset>
        cid = -1;
   d94b8:	f04f 33ff 	mov.w	r3, #4294967295
   d94bc:	6063      	str	r3, [r4, #4]
   d94be:	4b04      	ldr	r3, [pc, #16]	; (d94d0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d94c0:	8025      	strh	r5, [r4, #0]
   d94c2:	2204      	movs	r2, #4
   d94c4:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d94c6:	4a03      	ldr	r2, [pc, #12]	; (d94d4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d94c8:	601a      	str	r2, [r3, #0]
   d94ca:	bd38      	pop	{r3, r4, r5, pc}
   d94cc:	2003e1e0 	.word	0x2003e1e0
   d94d0:	2003e1d8 	.word	0x2003e1d8
   d94d4:	000db2c0 	.word	0x000db2c0

000d94d8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d94d8:	4770      	bx	lr

000d94da <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d94da:	7441      	strb	r1, [r0, #17]
   d94dc:	4770      	bx	lr

000d94de <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d94de:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d94e0:	7c00      	ldrb	r0, [r0, #16]
   d94e2:	f7fe ff9b 	bl	d841c <HAL_USART_Available_Data_For_Write>
}
   d94e6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d94ea:	bd08      	pop	{r3, pc}

000d94ec <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d94ec:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d94ee:	7c00      	ldrb	r0, [r0, #16]
   d94f0:	f7fe ff6c 	bl	d83cc <HAL_USART_Available_Data>
}
   d94f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d94f8:	bd08      	pop	{r3, pc}

000d94fa <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d94fa:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d94fc:	7c00      	ldrb	r0, [r0, #16]
   d94fe:	f7fe ff75 	bl	d83ec <HAL_USART_Peek_Data>
}
   d9502:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9506:	bf28      	it	cs
   d9508:	f04f 30ff 	movcs.w	r0, #4294967295
   d950c:	bd08      	pop	{r3, pc}

000d950e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d950e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d9510:	7c00      	ldrb	r0, [r0, #16]
   d9512:	f7fe ff63 	bl	d83dc <HAL_USART_Read_Data>
}
   d9516:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d951a:	bf28      	it	cs
   d951c:	f04f 30ff 	movcs.w	r0, #4294967295
   d9520:	bd08      	pop	{r3, pc}

000d9522 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d9522:	7c00      	ldrb	r0, [r0, #16]
   d9524:	f7fe bf6a 	b.w	d83fc <HAL_USART_Flush_Data>

000d9528 <_ZN11USARTSerialD0Ev>:
   d9528:	b510      	push	{r4, lr}
   d952a:	2114      	movs	r1, #20
   d952c:	4604      	mov	r4, r0
   d952e:	f000 fe21 	bl	da174 <_ZdlPvj>
   d9532:	4620      	mov	r0, r4
   d9534:	bd10      	pop	{r4, pc}

000d9536 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d9536:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d9538:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d953a:	4604      	mov	r4, r0
   d953c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d953e:	b925      	cbnz	r5, d954a <_ZN11USARTSerial5writeEh+0x14>
   d9540:	7c00      	ldrb	r0, [r0, #16]
   d9542:	f7fe ff6b 	bl	d841c <HAL_USART_Available_Data_For_Write>
   d9546:	2800      	cmp	r0, #0
   d9548:	dd05      	ble.n	d9556 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d954a:	4631      	mov	r1, r6
   d954c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d954e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d9552:	f7fe bf33 	b.w	d83bc <HAL_USART_Write_Data>
  }
  return 0;
}
   d9556:	4628      	mov	r0, r5
   d9558:	bd70      	pop	{r4, r5, r6, pc}
	...

000d955c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d955c:	b510      	push	{r4, lr}
   d955e:	4604      	mov	r4, r0
   d9560:	4608      	mov	r0, r1
   d9562:	4611      	mov	r1, r2
   d9564:	2200      	movs	r2, #0
   d9566:	6062      	str	r2, [r4, #4]
   d9568:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d956c:	60a2      	str	r2, [r4, #8]
   d956e:	4a05      	ldr	r2, [pc, #20]	; (d9584 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d9570:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d9572:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d9574:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d9576:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d9578:	461a      	mov	r2, r3
   d957a:	f7fe ff17 	bl	d83ac <HAL_USART_Init>
}
   d957e:	4620      	mov	r0, r4
   d9580:	bd10      	pop	{r4, pc}
   d9582:	bf00      	nop
   d9584:	000db2f4 	.word	0x000db2f4

000d9588 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d9588:	7c00      	ldrb	r0, [r0, #16]
   d958a:	f7fe bf3f 	b.w	d840c <HAL_USART_Is_Enabled>
	...

000d9590 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d9590:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d9592:	4d0c      	ldr	r5, [pc, #48]	; (d95c4 <_Z22__fetch_global_Serial1v+0x34>)
   d9594:	6829      	ldr	r1, [r5, #0]
   d9596:	f011 0401 	ands.w	r4, r1, #1
   d959a:	d111      	bne.n	d95c0 <_Z22__fetch_global_Serial1v+0x30>
   d959c:	4628      	mov	r0, r5
   d959e:	f7fa fd82 	bl	d40a6 <__cxa_guard_acquire>
   d95a2:	b168      	cbz	r0, d95c0 <_Z22__fetch_global_Serial1v+0x30>
   d95a4:	4a08      	ldr	r2, [pc, #32]	; (d95c8 <_Z22__fetch_global_Serial1v+0x38>)
   d95a6:	4b09      	ldr	r3, [pc, #36]	; (d95cc <_Z22__fetch_global_Serial1v+0x3c>)
   d95a8:	4809      	ldr	r0, [pc, #36]	; (d95d0 <_Z22__fetch_global_Serial1v+0x40>)
   d95aa:	4621      	mov	r1, r4
   d95ac:	f7ff ffd6 	bl	d955c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d95b0:	4628      	mov	r0, r5
   d95b2:	f7fa fd7d 	bl	d40b0 <__cxa_guard_release>
   d95b6:	4a07      	ldr	r2, [pc, #28]	; (d95d4 <_Z22__fetch_global_Serial1v+0x44>)
   d95b8:	4907      	ldr	r1, [pc, #28]	; (d95d8 <_Z22__fetch_global_Serial1v+0x48>)
   d95ba:	4805      	ldr	r0, [pc, #20]	; (d95d0 <_Z22__fetch_global_Serial1v+0x40>)
   d95bc:	f000 fdcc 	bl	da158 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d95c0:	4803      	ldr	r0, [pc, #12]	; (d95d0 <_Z22__fetch_global_Serial1v+0x40>)
   d95c2:	bd38      	pop	{r3, r4, r5, pc}
   d95c4:	2003e2a0 	.word	0x2003e2a0
   d95c8:	2003e2a4 	.word	0x2003e2a4
   d95cc:	2003e21c 	.word	0x2003e21c
   d95d0:	2003e208 	.word	0x2003e208
   d95d4:	2003daf0 	.word	0x2003daf0
   d95d8:	000d94d9 	.word	0x000d94d9

000d95dc <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d95dc:	4770      	bx	lr

000d95de <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d95de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d95e0:	4606      	mov	r6, r0
   d95e2:	4615      	mov	r5, r2
   d95e4:	460c      	mov	r4, r1
   d95e6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d95e8:	42bc      	cmp	r4, r7
   d95ea:	d006      	beq.n	d95fa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d95ec:	6833      	ldr	r3, [r6, #0]
   d95ee:	f814 1b01 	ldrb.w	r1, [r4], #1
   d95f2:	689b      	ldr	r3, [r3, #8]
   d95f4:	4630      	mov	r0, r6
   d95f6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d95f8:	e7f6      	b.n	d95e8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d95fa:	4628      	mov	r0, r5
   d95fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d95fe <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d95fe:	2200      	movs	r2, #0
   d9600:	7c00      	ldrb	r0, [r0, #16]
   d9602:	f7fe bf23 	b.w	d844c <HAL_I2C_Write_Data>

000d9606 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d9606:	2100      	movs	r1, #0
   d9608:	7c00      	ldrb	r0, [r0, #16]
   d960a:	f7fe bf27 	b.w	d845c <HAL_I2C_Available_Data>

000d960e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d960e:	2100      	movs	r1, #0
   d9610:	7c00      	ldrb	r0, [r0, #16]
   d9612:	f7fe bf2b 	b.w	d846c <HAL_I2C_Read_Data>

000d9616 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d9616:	2100      	movs	r1, #0
   d9618:	7c00      	ldrb	r0, [r0, #16]
   d961a:	f7fe bf2f 	b.w	d847c <HAL_I2C_Peek_Data>

000d961e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d961e:	2100      	movs	r1, #0
   d9620:	7c00      	ldrb	r0, [r0, #16]
   d9622:	f7fe bf33 	b.w	d848c <HAL_I2C_Flush_Data>

000d9626 <_ZN7TwoWireD0Ev>:
   d9626:	b510      	push	{r4, lr}
   d9628:	2114      	movs	r1, #20
   d962a:	4604      	mov	r4, r0
   d962c:	f000 fda2 	bl	da174 <_ZdlPvj>
   d9630:	4620      	mov	r0, r4
   d9632:	bd10      	pop	{r4, pc}

000d9634 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d9634:	b510      	push	{r4, lr}
   d9636:	4604      	mov	r4, r0
   d9638:	2300      	movs	r3, #0
   d963a:	6063      	str	r3, [r4, #4]
   d963c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9640:	60a3      	str	r3, [r4, #8]
   d9642:	4b04      	ldr	r3, [pc, #16]	; (d9654 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d9644:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d9646:	4608      	mov	r0, r1
   d9648:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d964a:	4611      	mov	r1, r2
   d964c:	f7fe ff2e 	bl	d84ac <HAL_I2C_Init>
}
   d9650:	4620      	mov	r0, r4
   d9652:	bd10      	pop	{r4, pc}
   d9654:	000db324 	.word	0x000db324

000d9658 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d9658:	b570      	push	{r4, r5, r6, lr}
   d965a:	460c      	mov	r4, r1
   d965c:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d965e:	2514      	movs	r5, #20
   d9660:	4606      	mov	r6, r0
   d9662:	462a      	mov	r2, r5
   d9664:	2100      	movs	r1, #0
   d9666:	a801      	add	r0, sp, #4
   d9668:	f001 fb22 	bl	dacb0 <memset>
   d966c:	7823      	ldrb	r3, [r4, #0]
   d966e:	f88d 3008 	strb.w	r3, [sp, #8]
   d9672:	6863      	ldr	r3, [r4, #4]
   d9674:	9303      	str	r3, [sp, #12]
   d9676:	68e3      	ldr	r3, [r4, #12]
   d9678:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d967a:	2200      	movs	r2, #0
   d967c:	7a23      	ldrb	r3, [r4, #8]
   d967e:	7c30      	ldrb	r0, [r6, #16]
   d9680:	f8ad 5004 	strh.w	r5, [sp, #4]
   d9684:	a901      	add	r1, sp, #4
   d9686:	9305      	str	r3, [sp, #20]
   d9688:	f7fe ff28 	bl	d84dc <HAL_I2C_Request_Data_Ex>
}
   d968c:	b006      	add	sp, #24
   d968e:	bd70      	pop	{r4, r5, r6, pc}

000d9690 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d9690:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d9692:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9694:	f88d 1000 	strb.w	r1, [sp]
   d9698:	f04f 0164 	mov.w	r1, #100	; 0x64
   d969c:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d969e:	bf18      	it	ne
   d96a0:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d96a2:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d96a4:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d96a6:	f88d 3008 	strb.w	r3, [sp, #8]
   d96aa:	f7ff ffd5 	bl	d9658 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d96ae:	b005      	add	sp, #20
   d96b0:	f85d fb04 	ldr.w	pc, [sp], #4

000d96b4 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d96b4:	2200      	movs	r2, #0
   d96b6:	7c00      	ldrb	r0, [r0, #16]
   d96b8:	f7fe beb8 	b.w	d842c <HAL_I2C_Begin_Transmission>

000d96bc <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d96bc:	b2c9      	uxtb	r1, r1
   d96be:	f7ff bff9 	b.w	d96b4 <_ZN7TwoWire17beginTransmissionEh>

000d96c2 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d96c2:	2200      	movs	r2, #0
   d96c4:	7c00      	ldrb	r0, [r0, #16]
   d96c6:	f7fe beb9 	b.w	d843c <HAL_I2C_End_Transmission>

000d96ca <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d96ca:	2100      	movs	r1, #0
   d96cc:	7c00      	ldrb	r0, [r0, #16]
   d96ce:	f7fe bee5 	b.w	d849c <HAL_I2C_Is_Enabled>

000d96d2 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d96d2:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d96d4:	2100      	movs	r1, #0
   d96d6:	7c00      	ldrb	r0, [r0, #16]
   d96d8:	f7fe fef0 	bl	d84bc <HAL_I2C_Acquire>
}
   d96dc:	fab0 f080 	clz	r0, r0
   d96e0:	0940      	lsrs	r0, r0, #5
   d96e2:	bd08      	pop	{r3, pc}

000d96e4 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d96e4:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d96e6:	2100      	movs	r1, #0
   d96e8:	7c00      	ldrb	r0, [r0, #16]
   d96ea:	f7fe feef 	bl	d84cc <HAL_I2C_Release>
}
   d96ee:	fab0 f080 	clz	r0, r0
   d96f2:	0940      	lsrs	r0, r0, #5
   d96f4:	bd08      	pop	{r3, pc}

000d96f6 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d96f6:	2200      	movs	r2, #0
   d96f8:	4611      	mov	r1, r2
   d96fa:	6840      	ldr	r0, [r0, #4]
   d96fc:	f7fe bfda 	b.w	d86b4 <network_listening>

000d9700 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d9700:	2200      	movs	r2, #0
   d9702:	4611      	mov	r1, r2
   d9704:	6840      	ldr	r0, [r0, #4]
   d9706:	f7fe bfe5 	b.w	d86d4 <network_get_listen_timeout>

000d970a <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d970a:	2200      	movs	r2, #0
   d970c:	6840      	ldr	r0, [r0, #4]
   d970e:	f7fe bfd9 	b.w	d86c4 <network_set_listen_timeout>

000d9712 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d9712:	2200      	movs	r2, #0
   d9714:	f081 0101 	eor.w	r1, r1, #1
   d9718:	6840      	ldr	r0, [r0, #4]
   d971a:	f7fe bfc3 	b.w	d86a4 <network_listen>

000d971e <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d971e:	2300      	movs	r3, #0
   d9720:	461a      	mov	r2, r3
   d9722:	2101      	movs	r1, #1
   d9724:	6840      	ldr	r0, [r0, #4]
   d9726:	f7fe bfb5 	b.w	d8694 <network_off>

000d972a <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d972a:	2300      	movs	r3, #0
   d972c:	461a      	mov	r2, r3
   d972e:	4619      	mov	r1, r3
   d9730:	6840      	ldr	r0, [r0, #4]
   d9732:	f7fe bfa7 	b.w	d8684 <network_on>

000d9736 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d9736:	2200      	movs	r2, #0
   d9738:	4611      	mov	r1, r2
   d973a:	6840      	ldr	r0, [r0, #4]
   d973c:	f7fe bf9a 	b.w	d8674 <network_ready>

000d9740 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d9740:	2200      	movs	r2, #0
   d9742:	4611      	mov	r1, r2
   d9744:	6840      	ldr	r0, [r0, #4]
   d9746:	f7fe bf85 	b.w	d8654 <network_connecting>

000d974a <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d974a:	2200      	movs	r2, #0
   d974c:	2102      	movs	r1, #2
   d974e:	6840      	ldr	r0, [r0, #4]
   d9750:	f7fe bf88 	b.w	d8664 <network_disconnect>

000d9754 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d9754:	2300      	movs	r3, #0
   d9756:	461a      	mov	r2, r3
   d9758:	6840      	ldr	r0, [r0, #4]
   d975a:	f7fe bf73 	b.w	d8644 <network_connect>

000d975e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d975e:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d9760:	4605      	mov	r5, r0
   d9762:	b188      	cbz	r0, d9788 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d9764:	6804      	ldr	r4, [r0, #0]
   d9766:	b14c      	cbz	r4, d977c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d9768:	68a3      	ldr	r3, [r4, #8]
   d976a:	b11b      	cbz	r3, d9774 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d976c:	2203      	movs	r2, #3
   d976e:	4621      	mov	r1, r4
   d9770:	4620      	mov	r0, r4
   d9772:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d9774:	2110      	movs	r1, #16
   d9776:	4620      	mov	r0, r4
   d9778:	f000 fcfc 	bl	da174 <_ZdlPvj>
   d977c:	4628      	mov	r0, r5
   d977e:	2114      	movs	r1, #20
      }
   d9780:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d9784:	f000 bcf6 	b.w	da174 <_ZdlPvj>
   d9788:	bd38      	pop	{r3, r4, r5, pc}

000d978a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d978a:	b110      	cbz	r0, d9792 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d978c:	6803      	ldr	r3, [r0, #0]
   d978e:	685b      	ldr	r3, [r3, #4]
   d9790:	4718      	bx	r3
   d9792:	4770      	bx	lr

000d9794 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d9794:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d9796:	6803      	ldr	r3, [r0, #0]
   d9798:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d979a:	b1bb      	cbz	r3, d97cc <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d979c:	6858      	ldr	r0, [r3, #4]
   d979e:	f7fe fd8d 	bl	d82bc <os_thread_is_current>
   d97a2:	b978      	cbnz	r0, d97c4 <_ZN6ThreadD1Ev+0x30>
   d97a4:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d97a6:	7c5a      	ldrb	r2, [r3, #17]
   d97a8:	b912      	cbnz	r2, d97b0 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d97aa:	6858      	ldr	r0, [r3, #4]
   d97ac:	f7fe fd96 	bl	d82dc <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d97b0:	6823      	ldr	r3, [r4, #0]
   d97b2:	6858      	ldr	r0, [r3, #4]
   d97b4:	f7fe fd9a 	bl	d82ec <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d97b8:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d97ba:	2300      	movs	r3, #0
   d97bc:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d97be:	b128      	cbz	r0, d97cc <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d97c0:	f7ff ffcd 	bl	d975e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d97c4:	6820      	ldr	r0, [r4, #0]
   d97c6:	b108      	cbz	r0, d97cc <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d97c8:	f7ff ffc9 	bl	d975e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d97cc:	4620      	mov	r0, r4
   d97ce:	bd10      	pop	{r4, pc}

000d97d0 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d97d0:	b538      	push	{r3, r4, r5, lr}
   d97d2:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d97d4:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d97d8:	b108      	cbz	r0, d97de <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d97da:	f7fa fc62 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d97de:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d97e2:	b108      	cbz	r0, d97e8 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d97e4:	f7fe fdba 	bl	d835c <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d97e8:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d97ec:	b135      	cbz	r5, d97fc <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d97ee:	4628      	mov	r0, r5
   d97f0:	f7ff ffd0 	bl	d9794 <_ZN6ThreadD1Ev>
   d97f4:	2104      	movs	r1, #4
   d97f6:	4628      	mov	r0, r5
   d97f8:	f000 fcbc 	bl	da174 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d97fc:	6820      	ldr	r0, [r4, #0]
   d97fe:	b108      	cbz	r0, d9804 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d9800:	f7ff ffc3 	bl	d978a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d9804:	4620      	mov	r0, r4
   d9806:	bd38      	pop	{r3, r4, r5, pc}

000d9808 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d9808:	b510      	push	{r4, lr}
   d980a:	4b04      	ldr	r3, [pc, #16]	; (d981c <_ZN5spark9MeshClassD1Ev+0x14>)
   d980c:	4604      	mov	r4, r0
   d980e:	f840 3b08 	str.w	r3, [r0], #8
   d9812:	f7ff ffdd 	bl	d97d0 <_ZN5spark11MeshPublishD1Ev>
   d9816:	4620      	mov	r0, r4
   d9818:	bd10      	pop	{r4, pc}
   d981a:	bf00      	nop
   d981c:	000db34c 	.word	0x000db34c

000d9820 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d9820:	b538      	push	{r3, r4, r5, lr}
   d9822:	4c0e      	ldr	r4, [pc, #56]	; (d985c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d9824:	4b0e      	ldr	r3, [pc, #56]	; (d9860 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d9826:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d9828:	2500      	movs	r5, #0
   d982a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d982c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d9830:	6063      	str	r3, [r4, #4]
   d9832:	60a5      	str	r5, [r4, #8]
   d9834:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d9838:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d983c:	f7fe fd86 	bl	d834c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d9840:	4b08      	ldr	r3, [pc, #32]	; (d9864 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d9842:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d9846:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d984a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d984c:	4620      	mov	r0, r4
   d984e:	4a06      	ldr	r2, [pc, #24]	; (d9868 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d9850:	4906      	ldr	r1, [pc, #24]	; (d986c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d9852:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d9856:	f000 bc7f 	b.w	da158 <__aeabi_atexit>
   d985a:	bf00      	nop
   d985c:	2003e328 	.word	0x2003e328
   d9860:	000db400 	.word	0x000db400
   d9864:	000db34c 	.word	0x000db34c
   d9868:	2003daf0 	.word	0x2003daf0
   d986c:	000d9809 	.word	0x000d9809

000d9870 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d9870:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9872:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d9874:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d9876:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d987a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d987c:	2201      	movs	r2, #1
   d987e:	f04f 33ff 	mov.w	r3, #4294967295
   d9882:	4621      	mov	r1, r4
   d9884:	47a8      	blx	r5
}
   d9886:	b003      	add	sp, #12
   d9888:	bd30      	pop	{r4, r5, pc}

000d988a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d988a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d988c:	6803      	ldr	r3, [r0, #0]
   d988e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d9890:	f04f 33ff 	mov.w	r3, #4294967295
   d9894:	46a4      	mov	ip, r4
}
   d9896:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d989a:	4760      	bx	ip

000d989c <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d989c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d989e:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d98a0:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d98a2:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d98a6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d98a8:	4621      	mov	r1, r4
   d98aa:	4613      	mov	r3, r2
   d98ac:	2201      	movs	r2, #1
   d98ae:	47a8      	blx	r5
}
   d98b0:	b003      	add	sp, #12
   d98b2:	bd30      	pop	{r4, r5, pc}

000d98b4 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d98b4:	4770      	bx	lr

000d98b6 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d98b6:	b538      	push	{r3, r4, r5, lr}
   d98b8:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d98ba:	681a      	ldr	r2, [r3, #0]
   d98bc:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d98be:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d98c0:	da05      	bge.n	d98ce <_ZN9TCPClient9connectedEv+0x18>
   d98c2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d98c6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d98ca:	429a      	cmp	r2, r3
   d98cc:	d001      	beq.n	d98d2 <_ZN9TCPClient9connectedEv+0x1c>
   d98ce:	2501      	movs	r5, #1
   d98d0:	e00b      	b.n	d98ea <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d98d2:	6803      	ldr	r3, [r0, #0]
   d98d4:	691b      	ldr	r3, [r3, #16]
   d98d6:	4798      	blx	r3
   d98d8:	2800      	cmp	r0, #0
   d98da:	bf14      	ite	ne
   d98dc:	2501      	movne	r5, #1
   d98de:	2500      	moveq	r5, #0
        if (!rv) {
   d98e0:	d103      	bne.n	d98ea <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d98e2:	6823      	ldr	r3, [r4, #0]
   d98e4:	4620      	mov	r0, r4
   d98e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d98e8:	4798      	blx	r3
        }
    }
    return rv;
}
   d98ea:	4628      	mov	r0, r5
   d98ec:	bd38      	pop	{r3, r4, r5, pc}

000d98ee <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d98ee:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d98f0:	6818      	ldr	r0, [r3, #0]
}
   d98f2:	43c0      	mvns	r0, r0
   d98f4:	0fc0      	lsrs	r0, r0, #31
   d98f6:	4770      	bx	lr

000d98f8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d98f8:	4770      	bx	lr

000d98fa <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d98fa:	2000      	movs	r0, #0
   d98fc:	4770      	bx	lr

000d98fe <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d98fe:	b510      	push	{r4, lr}
   d9900:	2114      	movs	r1, #20
   d9902:	4604      	mov	r4, r0
   d9904:	f000 fc36 	bl	da174 <_ZdlPvj>
   d9908:	4620      	mov	r0, r4
   d990a:	bd10      	pop	{r4, pc}

000d990c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d990c:	f7fa bbc7 	b.w	d409e <_ZdlPv>

000d9910 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d9910:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d9912:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d9914:	2200      	movs	r2, #0
   d9916:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d9918:	9202      	str	r2, [sp, #8]
   d991a:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d991c:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d991e:	4604      	mov	r4, r0
   d9920:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d9922:	d008      	beq.n	d9936 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d9924:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d9928:	fbb3 f1f2 	udiv	r1, r3, r2
   d992c:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d992e:	fb02 3111 	mls	r1, r2, r1, r3
   d9932:	434a      	muls	r2, r1
   d9934:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d9936:	6960      	ldr	r0, [r4, #20]
   d9938:	2308      	movs	r3, #8
   d993a:	9300      	str	r3, [sp, #0]
   d993c:	f241 0205 	movw	r2, #4101	; 0x1005
   d9940:	446b      	add	r3, sp
   d9942:	f640 71ff 	movw	r1, #4095	; 0xfff
   d9946:	6800      	ldr	r0, [r0, #0]
   d9948:	f7fe fdd0 	bl	d84ec <sock_setsockopt>
    if (ret < 0) {
   d994c:	2800      	cmp	r0, #0
   d994e:	db08      	blt.n	d9962 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d9950:	6960      	ldr	r0, [r4, #20]
   d9952:	2300      	movs	r3, #0
   d9954:	4632      	mov	r2, r6
   d9956:	4629      	mov	r1, r5
   d9958:	6800      	ldr	r0, [r0, #0]
   d995a:	f7fe fde7 	bl	d852c <sock_send>
    if (ret < 0) {
   d995e:	2800      	cmp	r0, #0
   d9960:	da04      	bge.n	d996c <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d9962:	f7fe ff17 	bl	d8794 <__errno>
   d9966:	6803      	ldr	r3, [r0, #0]
   d9968:	6063      	str	r3, [r4, #4]
   d996a:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d996c:	b004      	add	sp, #16
   d996e:	bd70      	pop	{r4, r5, r6, pc}

000d9970 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d9970:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d9972:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d9974:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d9976:	689b      	ldr	r3, [r3, #8]
   d9978:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d997a:	68a3      	ldr	r3, [r4, #8]
   d997c:	3b01      	subs	r3, #1
   d997e:	60a3      	str	r3, [r4, #8]
   d9980:	b92b      	cbnz	r3, d998e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d9982:	6823      	ldr	r3, [r4, #0]
   d9984:	4620      	mov	r0, r4
   d9986:	68db      	ldr	r3, [r3, #12]
        }
    }
   d9988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d998c:	4718      	bx	r3
   d998e:	bd10      	pop	{r4, pc}

000d9990 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d9990:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d9992:	4604      	mov	r4, r0
   d9994:	694d      	ldr	r5, [r1, #20]
   d9996:	4b05      	ldr	r3, [pc, #20]	; (d99ac <_ZN9TCPClient8remoteIPEv+0x1c>)
   d9998:	f844 3b04 	str.w	r3, [r4], #4
   d999c:	358c      	adds	r5, #140	; 0x8c
   d999e:	4606      	mov	r6, r0
   d99a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d99a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d99a4:	682b      	ldr	r3, [r5, #0]
   d99a6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d99a8:	4630      	mov	r0, r6
   d99aa:	bd70      	pop	{r4, r5, r6, pc}
   d99ac:	000db27c 	.word	0x000db27c

000d99b0 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d99b0:	b510      	push	{r4, lr}
   d99b2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d99b4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d99b8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d99bc:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d99be:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d99c0:	d005      	beq.n	d99ce <_ZN9TCPClient4peekEv+0x1e>
   d99c2:	6962      	ldr	r2, [r4, #20]
   d99c4:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d99c8:	4413      	add	r3, r2
   d99ca:	7918      	ldrb	r0, [r3, #4]
   d99cc:	bd10      	pop	{r4, pc}
   d99ce:	6803      	ldr	r3, [r0, #0]
   d99d0:	691b      	ldr	r3, [r3, #16]
   d99d2:	4798      	blx	r3
   d99d4:	2800      	cmp	r0, #0
   d99d6:	d1f4      	bne.n	d99c2 <_ZN9TCPClient4peekEv+0x12>
   d99d8:	f04f 30ff 	mov.w	r0, #4294967295
}
   d99dc:	bd10      	pop	{r4, pc}

000d99de <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d99de:	b510      	push	{r4, lr}
   d99e0:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d99e2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d99e6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d99ea:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d99ec:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d99ee:	d008      	beq.n	d9a02 <_ZN9TCPClient4readEv+0x24>
   d99f0:	6962      	ldr	r2, [r4, #20]
   d99f2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d99f6:	1c59      	adds	r1, r3, #1
   d99f8:	4413      	add	r3, r2
   d99fa:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d99fe:	7918      	ldrb	r0, [r3, #4]
   d9a00:	bd10      	pop	{r4, pc}
   d9a02:	6803      	ldr	r3, [r0, #0]
   d9a04:	691b      	ldr	r3, [r3, #16]
   d9a06:	4798      	blx	r3
   d9a08:	2800      	cmp	r0, #0
   d9a0a:	d1f1      	bne.n	d99f0 <_ZN9TCPClient4readEv+0x12>
   d9a0c:	f04f 30ff 	mov.w	r0, #4294967295
}
   d9a10:	bd10      	pop	{r4, pc}

000d9a12 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d9a12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9a14:	6943      	ldr	r3, [r0, #20]
   d9a16:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d9a18:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d9a1c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d9a20:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d9a22:	4605      	mov	r5, r0
   d9a24:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d9a26:	d106      	bne.n	d9a36 <_ZN9TCPClient4readEPhj+0x24>
   d9a28:	6803      	ldr	r3, [r0, #0]
   d9a2a:	691b      	ldr	r3, [r3, #16]
   d9a2c:	4798      	blx	r3
   d9a2e:	b910      	cbnz	r0, d9a36 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d9a30:	f04f 34ff 	mov.w	r4, #4294967295
   d9a34:	e014      	b.n	d9a60 <_ZN9TCPClient4readEPhj+0x4e>
   d9a36:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d9a38:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d9a3c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d9a40:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d9a42:	42bc      	cmp	r4, r7
   d9a44:	bf28      	it	cs
   d9a46:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d9a48:	4419      	add	r1, r3
   d9a4a:	4622      	mov	r2, r4
   d9a4c:	3104      	adds	r1, #4
   d9a4e:	4630      	mov	r0, r6
   d9a50:	f001 f923 	bl	dac9a <memcpy>
   d9a54:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d9a56:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d9a5a:	4423      	add	r3, r4
   d9a5c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d9a60:	4620      	mov	r0, r4
   d9a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9a64 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d9a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9a68:	4698      	mov	r8, r3
    stop();
   d9a6a:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d9a6c:	b093      	sub	sp, #76	; 0x4c
    stop();
   d9a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d9a70:	460d      	mov	r5, r1
   d9a72:	4606      	mov	r6, r0
   d9a74:	4617      	mov	r7, r2
    stop();
   d9a76:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d9a78:	ab12      	add	r3, sp, #72	; 0x48
   d9a7a:	2400      	movs	r4, #0
   d9a7c:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d9a80:	4622      	mov	r2, r4
   d9a82:	4621      	mov	r1, r4
   d9a84:	4628      	mov	r0, r5
   d9a86:	f7fe fb19 	bl	d80bc <netdb_getaddrinfo>
   d9a8a:	4681      	mov	r9, r0
   d9a8c:	2800      	cmp	r0, #0
   d9a8e:	d13d      	bne.n	d9b0c <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d9a90:	9b00      	ldr	r3, [sp, #0]
   d9a92:	2b00      	cmp	r3, #0
   d9a94:	d056      	beq.n	d9b44 <_ZN9TCPClient7connectEPKctm+0xe0>
   d9a96:	695b      	ldr	r3, [r3, #20]
   d9a98:	2b00      	cmp	r3, #0
   d9a9a:	d053      	beq.n	d9b44 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d9a9c:	a806      	add	r0, sp, #24
   d9a9e:	f7ff fbc1 	bl	d9224 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d9aa2:	9b00      	ldr	r3, [sp, #0]
   d9aa4:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d9aa6:	7863      	ldrb	r3, [r4, #1]
   d9aa8:	2b02      	cmp	r3, #2
   d9aaa:	d101      	bne.n	d9ab0 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d9aac:	1d21      	adds	r1, r4, #4
   d9aae:	e013      	b.n	d9ad8 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d9ab0:	2b0a      	cmp	r3, #10
   d9ab2:	d114      	bne.n	d9ade <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d9ab4:	2211      	movs	r2, #17
   d9ab6:	4649      	mov	r1, r9
   d9ab8:	a801      	add	r0, sp, #4
   d9aba:	f001 f8f9 	bl	dacb0 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d9abe:	68a3      	ldr	r3, [r4, #8]
   d9ac0:	bb33      	cbnz	r3, d9b10 <_ZN9TCPClient7connectEPKctm+0xac>
   d9ac2:	68e3      	ldr	r3, [r4, #12]
   d9ac4:	bb23      	cbnz	r3, d9b10 <_ZN9TCPClient7connectEPKctm+0xac>
   d9ac6:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d9aca:	6925      	ldr	r5, [r4, #16]
   d9acc:	f7fe fc5e 	bl	d838c <inet_htonl>
   d9ad0:	4285      	cmp	r5, r0
   d9ad2:	d11d      	bne.n	d9b10 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d9ad4:	f104 0114 	add.w	r1, r4, #20
   d9ad8:	a806      	add	r0, sp, #24
   d9ada:	f7ff fbe6 	bl	d92aa <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d9ade:	a806      	add	r0, sp, #24
   d9ae0:	f7ff fbc0 	bl	d9264 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d9ae4:	2800      	cmp	r0, #0
   d9ae6:	d02d      	beq.n	d9b44 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d9ae8:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d9aea:	ad07      	add	r5, sp, #28
   d9aec:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d9af0:	4b18      	ldr	r3, [pc, #96]	; (d9b54 <_ZN9TCPClient7connectEPKctm+0xf0>)
   d9af2:	930c      	str	r3, [sp, #48]	; 0x30
   d9af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9af6:	ac0d      	add	r4, sp, #52	; 0x34
   d9af8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9afa:	682b      	ldr	r3, [r5, #0]
   d9afc:	7023      	strb	r3, [r4, #0]
   d9afe:	463a      	mov	r2, r7
   d9b00:	4643      	mov	r3, r8
   d9b02:	a90c      	add	r1, sp, #48	; 0x30
   d9b04:	4630      	mov	r0, r6
   d9b06:	47c8      	blx	r9
   d9b08:	4681      	mov	r9, r0
   d9b0a:	e01b      	b.n	d9b44 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d9b0c:	46a1      	mov	r9, r4
   d9b0e:	e019      	b.n	d9b44 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d9b10:	f104 0308 	add.w	r3, r4, #8
   d9b14:	ad01      	add	r5, sp, #4
   d9b16:	3418      	adds	r4, #24
   d9b18:	6818      	ldr	r0, [r3, #0]
   d9b1a:	6859      	ldr	r1, [r3, #4]
   d9b1c:	462a      	mov	r2, r5
   d9b1e:	c203      	stmia	r2!, {r0, r1}
   d9b20:	3308      	adds	r3, #8
   d9b22:	42a3      	cmp	r3, r4
   d9b24:	4615      	mov	r5, r2
   d9b26:	d1f7      	bne.n	d9b18 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d9b28:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d9b2a:	a901      	add	r1, sp, #4
   d9b2c:	a80c      	add	r0, sp, #48	; 0x30
   d9b2e:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d9b30:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d9b34:	f7ff fb84 	bl	d9240 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d9b38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9b3a:	ac07      	add	r4, sp, #28
   d9b3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9b3e:	682b      	ldr	r3, [r5, #0]
   d9b40:	7023      	strb	r3, [r4, #0]
   d9b42:	e7cc      	b.n	d9ade <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d9b44:	9800      	ldr	r0, [sp, #0]
   d9b46:	f7fe fab1 	bl	d80ac <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d9b4a:	4648      	mov	r0, r9
   d9b4c:	b013      	add	sp, #76	; 0x4c
   d9b4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d9b52:	bf00      	nop
   d9b54:	000db27c 	.word	0x000db27c

000d9b58 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d9b58:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d9b5a:	2300      	movs	r3, #0
   d9b5c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d9b60:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d9b62:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d9b66:	4770      	bx	lr

000d9b68 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d9b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9b6c:	461e      	mov	r6, r3
    stop();
   d9b6e:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d9b70:	460c      	mov	r4, r1
   d9b72:	b08a      	sub	sp, #40	; 0x28
    stop();
   d9b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d9b76:	4605      	mov	r5, r0
   d9b78:	4617      	mov	r7, r2
    stop();
   d9b7a:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d9b7c:	7d23      	ldrb	r3, [r4, #20]
   d9b7e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d9b82:	2b04      	cmp	r3, #4
   d9b84:	bf0c      	ite	eq
   d9b86:	2002      	moveq	r0, #2
   d9b88:	200a      	movne	r0, #10
   d9b8a:	2206      	movs	r2, #6
   d9b8c:	2101      	movs	r1, #1
   d9b8e:	f7fe fcd5 	bl	d853c <sock_socket>
   d9b92:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d9b96:	696b      	ldr	r3, [r5, #20]
   d9b98:	681b      	ldr	r3, [r3, #0]
   d9b9a:	2b00      	cmp	r3, #0
   d9b9c:	db18      	blt.n	d9bd0 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d9b9e:	4628      	mov	r0, r5
   d9ba0:	f7ff ffda 	bl	d9b58 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d9ba4:	b1d6      	cbz	r6, d9bdc <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d9ba6:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d9ba8:	a903      	add	r1, sp, #12
   d9baa:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d9bac:	9303      	str	r3, [sp, #12]
   d9bae:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d9bb2:	f7fe fb3b 	bl	d822c <if_index_to_name>
   d9bb6:	b958      	cbnz	r0, d9bd0 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d9bb8:	6968      	ldr	r0, [r5, #20]
   d9bba:	2306      	movs	r3, #6
   d9bbc:	9300      	str	r3, [sp, #0]
   d9bbe:	f241 020b 	movw	r2, #4107	; 0x100b
   d9bc2:	ab03      	add	r3, sp, #12
   d9bc4:	f640 71ff 	movw	r1, #4095	; 0xfff
   d9bc8:	6800      	ldr	r0, [r0, #0]
   d9bca:	f7fe fc8f 	bl	d84ec <sock_setsockopt>
   d9bce:	b128      	cbz	r0, d9bdc <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d9bd0:	682b      	ldr	r3, [r5, #0]
   d9bd2:	4628      	mov	r0, r5
   d9bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d9bd6:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d9bd8:	4798      	blx	r3
   d9bda:	e03b      	b.n	d9c54 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d9bdc:	261c      	movs	r6, #28
   d9bde:	4632      	mov	r2, r6
   d9be0:	2100      	movs	r1, #0
   d9be2:	a803      	add	r0, sp, #12
   d9be4:	f001 f864 	bl	dacb0 <memset>
    if (ip.version() == 4) {
   d9be8:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d9bea:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d9bee:	2b04      	cmp	r3, #4
   d9bf0:	d10c      	bne.n	d9c0c <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d9bf2:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d9bf4:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d9bf6:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d9bfa:	f7fe fbcf 	bl	d839c <inet_htons>
   d9bfe:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d9c02:	6860      	ldr	r0, [r4, #4]
   d9c04:	f7fe fbc2 	bl	d838c <inet_htonl>
   d9c08:	9004      	str	r0, [sp, #16]
   d9c0a:	e013      	b.n	d9c34 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d9c0c:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d9c0e:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d9c10:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d9c14:	f7fe fbc2 	bl	d839c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d9c18:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d9c1a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d9c1e:	1d23      	adds	r3, r4, #4
   d9c20:	f104 0714 	add.w	r7, r4, #20
   d9c24:	6818      	ldr	r0, [r3, #0]
   d9c26:	6859      	ldr	r1, [r3, #4]
   d9c28:	4632      	mov	r2, r6
   d9c2a:	c203      	stmia	r2!, {r0, r1}
   d9c2c:	3308      	adds	r3, #8
   d9c2e:	42bb      	cmp	r3, r7
   d9c30:	4616      	mov	r6, r2
   d9c32:	d1f7      	bne.n	d9c24 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d9c34:	696b      	ldr	r3, [r5, #20]
   d9c36:	221c      	movs	r2, #28
   d9c38:	a903      	add	r1, sp, #12
   d9c3a:	6818      	ldr	r0, [r3, #0]
   d9c3c:	f7fe fc66 	bl	d850c <sock_connect>
   d9c40:	2800      	cmp	r0, #0
   d9c42:	d1c5      	bne.n	d9bd0 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d9c44:	3404      	adds	r4, #4
   d9c46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d9c48:	696d      	ldr	r5, [r5, #20]
   d9c4a:	358c      	adds	r5, #140	; 0x8c
   d9c4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d9c4e:	6823      	ldr	r3, [r4, #0]
   d9c50:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d9c52:	2401      	movs	r4, #1
}
   d9c54:	4620      	mov	r0, r4
   d9c56:	b00a      	add	sp, #40	; 0x28
   d9c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d9c5c <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d9c5c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d9c5e:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d9c60:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d9c62:	6818      	ldr	r0, [r3, #0]
   d9c64:	2800      	cmp	r0, #0
   d9c66:	db01      	blt.n	d9c6c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d9c68:	f7fe fc48 	bl	d84fc <sock_close>
   d9c6c:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d9c6e:	f04f 32ff 	mov.w	r2, #4294967295
   d9c72:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d9c74:	6960      	ldr	r0, [r4, #20]
   d9c76:	2211      	movs	r2, #17
   d9c78:	2100      	movs	r1, #0
   d9c7a:	308c      	adds	r0, #140	; 0x8c
   d9c7c:	f001 f818 	bl	dacb0 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d9c80:	4620      	mov	r0, r4
}
   d9c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d9c86:	f7ff bf67 	b.w	d9b58 <_ZN9TCPClient12flush_bufferEv>
	...

000d9c8c <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d9c8c:	b530      	push	{r4, r5, lr}
   d9c8e:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d9c90:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d9c94:	b08b      	sub	sp, #44	; 0x2c
   d9c96:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d9c98:	b11b      	cbz	r3, d9ca2 <_ZN9TCPClient9availableEv+0x16>
   d9c9a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d9c9e:	429a      	cmp	r2, r3
   d9ca0:	d040      	beq.n	d9d24 <_ZN9TCPClient9availableEv+0x98>
   d9ca2:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d9ca4:	6818      	ldr	r0, [r3, #0]
   d9ca6:	2800      	cmp	r0, #0
   d9ca8:	db3f      	blt.n	d9d2a <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d9caa:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d9cae:	2d7f      	cmp	r5, #127	; 0x7f
   d9cb0:	d83b      	bhi.n	d9d2a <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d9cb2:	1d19      	adds	r1, r3, #4
   d9cb4:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d9cb8:	2308      	movs	r3, #8
   d9cba:	4429      	add	r1, r5
   d9cbc:	f7fe fc2e 	bl	d851c <sock_recv>
            if (ret > 0) {
   d9cc0:	2800      	cmp	r0, #0
   d9cc2:	dd0c      	ble.n	d9cde <_ZN9TCPClient9availableEv+0x52>
   d9cc4:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d9cc6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d9cca:	b90a      	cbnz	r2, d9cd0 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d9ccc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d9cd0:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d9cd2:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d9cd6:	4418      	add	r0, r3
   d9cd8:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d9cdc:	e025      	b.n	d9d2a <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d9cde:	f7fe fd59 	bl	d8794 <__errno>
   d9ce2:	6803      	ldr	r3, [r0, #0]
   d9ce4:	2b0b      	cmp	r3, #11
   d9ce6:	d020      	beq.n	d9d2a <_ZN9TCPClient9availableEv+0x9e>
   d9ce8:	f7fe fd54 	bl	d8794 <__errno>
   d9cec:	6803      	ldr	r3, [r0, #0]
   d9cee:	2b0b      	cmp	r3, #11
   d9cf0:	d01b      	beq.n	d9d2a <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d9cf2:	2320      	movs	r3, #32
   d9cf4:	2500      	movs	r5, #0
   d9cf6:	9302      	str	r3, [sp, #8]
   d9cf8:	9503      	str	r5, [sp, #12]
   d9cfa:	f7fe fd4b 	bl	d8794 <__errno>
   d9cfe:	6803      	ldr	r3, [r0, #0]
   d9d00:	9301      	str	r3, [sp, #4]
   d9d02:	4b0e      	ldr	r3, [pc, #56]	; (d9d3c <_ZN9TCPClient9availableEv+0xb0>)
   d9d04:	9300      	str	r3, [sp, #0]
   d9d06:	aa02      	add	r2, sp, #8
   d9d08:	462b      	mov	r3, r5
   d9d0a:	490d      	ldr	r1, [pc, #52]	; (d9d40 <_ZN9TCPClient9availableEv+0xb4>)
   d9d0c:	2032      	movs	r0, #50	; 0x32
   d9d0e:	f7fe fc55 	bl	d85bc <log_message>
                    sock_close(d_->sock);
   d9d12:	6963      	ldr	r3, [r4, #20]
   d9d14:	6818      	ldr	r0, [r3, #0]
   d9d16:	f7fe fbf1 	bl	d84fc <sock_close>
   d9d1a:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d9d1c:	f04f 32ff 	mov.w	r2, #4294967295
   d9d20:	601a      	str	r2, [r3, #0]
   d9d22:	e002      	b.n	d9d2a <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d9d24:	f7ff ff18 	bl	d9b58 <_ZN9TCPClient12flush_bufferEv>
   d9d28:	e7bb      	b.n	d9ca2 <_ZN9TCPClient9availableEv+0x16>
   d9d2a:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d9d2c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d9d30:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d9d34:	1a18      	subs	r0, r3, r0
}
   d9d36:	b00b      	add	sp, #44	; 0x2c
   d9d38:	bd30      	pop	{r4, r5, pc}
   d9d3a:	bf00      	nop
   d9d3c:	000db3e7 	.word	0x000db3e7
   d9d40:	000db3e0 	.word	0x000db3e0

000d9d44 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d9d44:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d9d46:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d9d48:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d9d4a:	6001      	str	r1, [r0, #0]
   d9d4c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d9d50:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d9d54:	3088      	adds	r0, #136	; 0x88
   d9d56:	f7ff fa65 	bl	d9224 <_ZN9IPAddressC1Ev>
}
   d9d5a:	4620      	mov	r0, r4
   d9d5c:	bd10      	pop	{r4, pc}
	...

000d9d60 <_ZN9TCPClientC1Ei>:
   d9d60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d9d64:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d9d66:	2300      	movs	r3, #0
   d9d68:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d9d6a:	4a14      	ldr	r2, [pc, #80]	; (d9dbc <_ZN9TCPClientC1Ei+0x5c>)
   d9d6c:	6043      	str	r3, [r0, #4]
   d9d6e:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d9d70:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d9d72:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d9d74:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d9d76:	20a0      	movs	r0, #160	; 0xa0
   d9d78:	460e      	mov	r6, r1
   d9d7a:	f7fa f98c 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d9d7e:	4605      	mov	r5, r0
   d9d80:	b110      	cbz	r0, d9d88 <_ZN9TCPClientC1Ei+0x28>
   d9d82:	4631      	mov	r1, r6
   d9d84:	f7ff ffde 	bl	d9d44 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d9d88:	2014      	movs	r0, #20
   d9d8a:	f7fa f984 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d9d8e:	4603      	mov	r3, r0
   d9d90:	b128      	cbz	r0, d9d9e <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d9d92:	2201      	movs	r2, #1
   d9d94:	6042      	str	r2, [r0, #4]
   d9d96:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d9d98:	4a09      	ldr	r2, [pc, #36]	; (d9dc0 <_ZN9TCPClientC1Ei+0x60>)
   d9d9a:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d9d9c:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d9d9e:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d9da0:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d9da2:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d9da4:	b128      	cbz	r0, d9db2 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d9da6:	6843      	ldr	r3, [r0, #4]
   d9da8:	3b01      	subs	r3, #1
   d9daa:	6043      	str	r3, [r0, #4]
   d9dac:	b90b      	cbnz	r3, d9db2 <_ZN9TCPClientC1Ei+0x52>
   d9dae:	f7ff fddf 	bl	d9970 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d9db2:	4620      	mov	r0, r4
   d9db4:	f7ff fed0 	bl	d9b58 <_ZN9TCPClient12flush_bufferEv>
}
   d9db8:	4620      	mov	r0, r4
   d9dba:	bd70      	pop	{r4, r5, r6, pc}
   d9dbc:	000db39c 	.word	0x000db39c
   d9dc0:	000db380 	.word	0x000db380

000d9dc4 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d9dc4:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d9dc6:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d9dca:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d9dcc:	f7ff ffc8 	bl	d9d60 <_ZN9TCPClientC1Ei>
}
   d9dd0:	4620      	mov	r0, r4
   d9dd2:	bd10      	pop	{r4, pc}

000d9dd4 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d9dd4:	b510      	push	{r4, lr}
   d9dd6:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d9dd8:	6800      	ldr	r0, [r0, #0]
   d9dda:	2800      	cmp	r0, #0
   d9ddc:	db01      	blt.n	d9de2 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d9dde:	f7fe fb8d 	bl	d84fc <sock_close>
    }
}
   d9de2:	4620      	mov	r0, r4
   d9de4:	bd10      	pop	{r4, pc}

000d9de6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d9de6:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d9de8:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d9dea:	4620      	mov	r0, r4
   d9dec:	f7ff fff2 	bl	d9dd4 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d9df0:	b124      	cbz	r4, d9dfc <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d9df2:	4620      	mov	r0, r4
   d9df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d9df8:	f7fa b951 	b.w	d409e <_ZdlPv>
   d9dfc:	bd10      	pop	{r4, pc}

000d9dfe <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d9dfe:	2300      	movs	r3, #0
   d9e00:	461a      	mov	r2, r3
   d9e02:	6840      	ldr	r0, [r0, #4]
   d9e04:	f7fe bc1e 	b.w	d8644 <network_connect>

000d9e08 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d9e08:	2200      	movs	r2, #0
   d9e0a:	2102      	movs	r1, #2
   d9e0c:	6840      	ldr	r0, [r0, #4]
   d9e0e:	f7fe bc29 	b.w	d8664 <network_disconnect>

000d9e12 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d9e12:	2200      	movs	r2, #0
   d9e14:	4611      	mov	r1, r2
   d9e16:	6840      	ldr	r0, [r0, #4]
   d9e18:	f7fe bc1c 	b.w	d8654 <network_connecting>

000d9e1c <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d9e1c:	2200      	movs	r2, #0
   d9e1e:	4611      	mov	r1, r2
   d9e20:	6840      	ldr	r0, [r0, #4]
   d9e22:	f7fe bc27 	b.w	d8674 <network_ready>

000d9e26 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d9e26:	2300      	movs	r3, #0
   d9e28:	461a      	mov	r2, r3
   d9e2a:	4619      	mov	r1, r3
   d9e2c:	6840      	ldr	r0, [r0, #4]
   d9e2e:	f7fe bc29 	b.w	d8684 <network_on>

000d9e32 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d9e32:	2300      	movs	r3, #0
   d9e34:	461a      	mov	r2, r3
   d9e36:	4619      	mov	r1, r3
   d9e38:	6840      	ldr	r0, [r0, #4]
   d9e3a:	f7fe bc2b 	b.w	d8694 <network_off>

000d9e3e <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d9e3e:	2200      	movs	r2, #0
   d9e40:	f081 0101 	eor.w	r1, r1, #1
   d9e44:	6840      	ldr	r0, [r0, #4]
   d9e46:	f7fe bc2d 	b.w	d86a4 <network_listen>

000d9e4a <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d9e4a:	2200      	movs	r2, #0
   d9e4c:	6840      	ldr	r0, [r0, #4]
   d9e4e:	f7fe bc39 	b.w	d86c4 <network_set_listen_timeout>

000d9e52 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d9e52:	2200      	movs	r2, #0
   d9e54:	4611      	mov	r1, r2
   d9e56:	6840      	ldr	r0, [r0, #4]
   d9e58:	f7fe bc3c 	b.w	d86d4 <network_get_listen_timeout>

000d9e5c <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d9e5c:	2200      	movs	r2, #0
   d9e5e:	4611      	mov	r1, r2
   d9e60:	6840      	ldr	r0, [r0, #4]
   d9e62:	f7fe bc27 	b.w	d86b4 <network_listening>

000d9e66 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d9e66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d9e6a:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d9e6c:	b095      	sub	sp, #84	; 0x54
   d9e6e:	4616      	mov	r6, r2
   d9e70:	460d      	mov	r5, r1
   d9e72:	4607      	mov	r7, r0
    IPAddress addr;
   d9e74:	f7ff f9d6 	bl	d9224 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d9e78:	4621      	mov	r1, r4
   d9e7a:	2220      	movs	r2, #32
   d9e7c:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d9e7e:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d9e80:	f000 ff16 	bl	dacb0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d9e84:	2340      	movs	r3, #64	; 0x40
   d9e86:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d9e88:	4621      	mov	r1, r4
   d9e8a:	466b      	mov	r3, sp
   d9e8c:	aa0c      	add	r2, sp, #48	; 0x30
   d9e8e:	4630      	mov	r0, r6
   d9e90:	f7fe f914 	bl	d80bc <netdb_getaddrinfo>
    if (!r) {
   d9e94:	4604      	mov	r4, r0
   d9e96:	2800      	cmp	r0, #0
   d9e98:	d144      	bne.n	d9f24 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9e9a:	4602      	mov	r2, r0
   d9e9c:	2101      	movs	r1, #1
   d9e9e:	6868      	ldr	r0, [r5, #4]
   d9ea0:	f7fe fbe8 	bl	d8674 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9ea4:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9ea6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9ea8:	4622      	mov	r2, r4
   d9eaa:	6868      	ldr	r0, [r5, #4]
   d9eac:	f7fe fbe2 	bl	d8674 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9eb0:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9eb2:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d9eb4:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9eb6:	2e00      	cmp	r6, #0
   d9eb8:	d034      	beq.n	d9f24 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d9eba:	2900      	cmp	r1, #0
   d9ebc:	d132      	bne.n	d9f24 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d9ebe:	6873      	ldr	r3, [r6, #4]
   d9ec0:	2b02      	cmp	r3, #2
   d9ec2:	d002      	beq.n	d9eca <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d9ec4:	2b0a      	cmp	r3, #10
   d9ec6:	d009      	beq.n	d9edc <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d9ec8:	e02a      	b.n	d9f20 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d9eca:	f1b8 0f00 	cmp.w	r8, #0
   d9ece:	d027      	beq.n	d9f20 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d9ed0:	6971      	ldr	r1, [r6, #20]
   d9ed2:	4638      	mov	r0, r7
   d9ed4:	3104      	adds	r1, #4
   d9ed6:	f7ff f9e8 	bl	d92aa <_ZN9IPAddressaSEPKh>
   d9eda:	e020      	b.n	d9f1e <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d9edc:	f1b9 0f00 	cmp.w	r9, #0
   d9ee0:	d01e      	beq.n	d9f20 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d9ee2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d9ee4:	2211      	movs	r2, #17
   d9ee6:	a801      	add	r0, sp, #4
   d9ee8:	f000 fee2 	bl	dacb0 <memset>
                    a.v = 6;
   d9eec:	2306      	movs	r3, #6
   d9eee:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d9ef2:	ad01      	add	r5, sp, #4
   d9ef4:	f104 0308 	add.w	r3, r4, #8
   d9ef8:	3418      	adds	r4, #24
   d9efa:	6818      	ldr	r0, [r3, #0]
   d9efc:	6859      	ldr	r1, [r3, #4]
   d9efe:	462a      	mov	r2, r5
   d9f00:	c203      	stmia	r2!, {r0, r1}
   d9f02:	3308      	adds	r3, #8
   d9f04:	42a3      	cmp	r3, r4
   d9f06:	4615      	mov	r5, r2
   d9f08:	d1f7      	bne.n	d9efa <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d9f0a:	a901      	add	r1, sp, #4
   d9f0c:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d9f0e:	ad07      	add	r5, sp, #28
   d9f10:	f7ff f996 	bl	d9240 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d9f14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9f16:	1d3c      	adds	r4, r7, #4
   d9f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9f1a:	682b      	ldr	r3, [r5, #0]
   d9f1c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d9f1e:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9f20:	69f6      	ldr	r6, [r6, #28]
   d9f22:	e7c8      	b.n	d9eb6 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d9f24:	9800      	ldr	r0, [sp, #0]
   d9f26:	f7fe f8c1 	bl	d80ac <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d9f2a:	4638      	mov	r0, r7
   d9f2c:	b015      	add	sp, #84	; 0x54
   d9f2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d9f34 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d9f34:	4b02      	ldr	r3, [pc, #8]	; (d9f40 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d9f36:	4a03      	ldr	r2, [pc, #12]	; (d9f44 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d9f38:	601a      	str	r2, [r3, #0]
   d9f3a:	2200      	movs	r2, #0
   d9f3c:	605a      	str	r2, [r3, #4]
   d9f3e:	4770      	bx	lr
   d9f40:	2003e4fc 	.word	0x2003e4fc
   d9f44:	000db400 	.word	0x000db400

000d9f48 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d9f48:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d9f4a:	4e18      	ldr	r6, [pc, #96]	; (d9fac <pinAvailable+0x64>)
   d9f4c:	6831      	ldr	r1, [r6, #0]
   d9f4e:	f011 0501 	ands.w	r5, r1, #1
   d9f52:	4604      	mov	r4, r0
   d9f54:	d10a      	bne.n	d9f6c <pinAvailable+0x24>
   d9f56:	4630      	mov	r0, r6
   d9f58:	f7fa f8a5 	bl	d40a6 <__cxa_guard_acquire>
   d9f5c:	b130      	cbz	r0, d9f6c <pinAvailable+0x24>
   d9f5e:	4629      	mov	r1, r5
   d9f60:	4813      	ldr	r0, [pc, #76]	; (d9fb0 <pinAvailable+0x68>)
   d9f62:	f7fe fc63 	bl	d882c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d9f66:	4630      	mov	r0, r6
   d9f68:	f7fa f8a2 	bl	d40b0 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d9f6c:	4810      	ldr	r0, [pc, #64]	; (d9fb0 <pinAvailable+0x68>)
   d9f6e:	f7fe fd92 	bl	d8a96 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d9f72:	b128      	cbz	r0, d9f80 <pinAvailable+0x38>
   d9f74:	f1a4 030b 	sub.w	r3, r4, #11
   d9f78:	2b02      	cmp	r3, #2
   d9f7a:	d801      	bhi.n	d9f80 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d9f7c:	2000      	movs	r0, #0
   d9f7e:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d9f80:	f000 f89e 	bl	da0c0 <_Z19__fetch_global_Wirev>
   d9f84:	f7ff fba1 	bl	d96ca <_ZN7TwoWire9isEnabledEv>
   d9f88:	b108      	cbz	r0, d9f8e <pinAvailable+0x46>
   d9f8a:	2c01      	cmp	r4, #1
   d9f8c:	d9f6      	bls.n	d9f7c <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d9f8e:	f7ff faff 	bl	d9590 <_Z22__fetch_global_Serial1v>
   d9f92:	f7ff faf9 	bl	d9588 <_ZN11USARTSerial9isEnabledEv>
   d9f96:	b118      	cbz	r0, d9fa0 <pinAvailable+0x58>
   d9f98:	f1a4 0309 	sub.w	r3, r4, #9
   d9f9c:	2b01      	cmp	r3, #1
   d9f9e:	d9ed      	bls.n	d9f7c <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d9fa0:	2c23      	cmp	r4, #35	; 0x23
   d9fa2:	bf8c      	ite	hi
   d9fa4:	2000      	movhi	r0, #0
   d9fa6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d9fa8:	bd70      	pop	{r4, r5, r6, pc}
   d9faa:	bf00      	nop
   d9fac:	2003dbbc 	.word	0x2003dbbc
   d9fb0:	2003dbc0 	.word	0x2003dbc0

000d9fb4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9fb4:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d9fb6:	b538      	push	{r3, r4, r5, lr}
   d9fb8:	4604      	mov	r4, r0
   d9fba:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9fbc:	d80a      	bhi.n	d9fd4 <pinMode+0x20>
   d9fbe:	29ff      	cmp	r1, #255	; 0xff
   d9fc0:	d008      	beq.n	d9fd4 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d9fc2:	f7ff ffc1 	bl	d9f48 <pinAvailable>
   d9fc6:	b128      	cbz	r0, d9fd4 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d9fc8:	4629      	mov	r1, r5
   d9fca:	4620      	mov	r0, r4
}
   d9fcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d9fd0:	f7fe b884 	b.w	d80dc <HAL_Pin_Mode>
   d9fd4:	bd38      	pop	{r3, r4, r5, pc}

000d9fd6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d9fd6:	b538      	push	{r3, r4, r5, lr}
   d9fd8:	4604      	mov	r4, r0
   d9fda:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9fdc:	f7fe f886 	bl	d80ec <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d9fe0:	28ff      	cmp	r0, #255	; 0xff
   d9fe2:	d010      	beq.n	da006 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d9fe4:	2806      	cmp	r0, #6
   d9fe6:	d804      	bhi.n	d9ff2 <digitalWrite+0x1c>
   d9fe8:	234d      	movs	r3, #77	; 0x4d
   d9fea:	fa23 f000 	lsr.w	r0, r3, r0
   d9fee:	07c3      	lsls	r3, r0, #31
   d9ff0:	d409      	bmi.n	da006 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d9ff2:	4620      	mov	r0, r4
   d9ff4:	f7ff ffa8 	bl	d9f48 <pinAvailable>
   d9ff8:	b128      	cbz	r0, da006 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d9ffa:	4629      	mov	r1, r5
   d9ffc:	4620      	mov	r0, r4
}
   d9ffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   da002:	f7fe b87b 	b.w	d80fc <HAL_GPIO_Write>
   da006:	bd38      	pop	{r3, r4, r5, pc}

000da008 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   da008:	b510      	push	{r4, lr}
   da00a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da00c:	f7fe f86e 	bl	d80ec <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   da010:	3804      	subs	r0, #4
   da012:	b2c0      	uxtb	r0, r0
   da014:	2801      	cmp	r0, #1
   da016:	d908      	bls.n	da02a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   da018:	4620      	mov	r0, r4
   da01a:	f7ff ff95 	bl	d9f48 <pinAvailable>
   da01e:	b120      	cbz	r0, da02a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   da020:	4620      	mov	r0, r4
}
   da022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   da026:	f7fe b871 	b.w	d810c <HAL_GPIO_Read>
}
   da02a:	2000      	movs	r0, #0
   da02c:	bd10      	pop	{r4, pc}
	...

000da030 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   da030:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   da032:	4c07      	ldr	r4, [pc, #28]	; (da050 <_Z21__fetch_global_EEPROMv+0x20>)
   da034:	6823      	ldr	r3, [r4, #0]
   da036:	07db      	lsls	r3, r3, #31
   da038:	d408      	bmi.n	da04c <_Z21__fetch_global_EEPROMv+0x1c>
   da03a:	4620      	mov	r0, r4
   da03c:	f7fa f833 	bl	d40a6 <__cxa_guard_acquire>
   da040:	b120      	cbz	r0, da04c <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   da042:	f7fe f91b 	bl	d827c <HAL_EEPROM_Init>
   da046:	4620      	mov	r0, r4
   da048:	f7fa f832 	bl	d40b0 <__cxa_guard_release>
	return eeprom;
}
   da04c:	4801      	ldr	r0, [pc, #4]	; (da054 <_Z21__fetch_global_EEPROMv+0x24>)
   da04e:	bd10      	pop	{r4, pc}
   da050:	2003e508 	.word	0x2003e508
   da054:	2003e50c 	.word	0x2003e50c

000da058 <_Z17acquireWireBufferv>:
   da058:	b570      	push	{r4, r5, r6, lr}
   da05a:	4604      	mov	r4, r0
   da05c:	2514      	movs	r5, #20
   da05e:	462a      	mov	r2, r5
   da060:	4e09      	ldr	r6, [pc, #36]	; (da088 <_Z17acquireWireBufferv+0x30>)
   da062:	2100      	movs	r1, #0
   da064:	f000 fe24 	bl	dacb0 <memset>
   da068:	8025      	strh	r5, [r4, #0]
   da06a:	2520      	movs	r5, #32
   da06c:	4631      	mov	r1, r6
   da06e:	60a5      	str	r5, [r4, #8]
   da070:	6125      	str	r5, [r4, #16]
   da072:	4628      	mov	r0, r5
   da074:	f000 f880 	bl	da178 <_ZnajRKSt9nothrow_t>
   da078:	4631      	mov	r1, r6
   da07a:	6060      	str	r0, [r4, #4]
   da07c:	4628      	mov	r0, r5
   da07e:	f000 f87b 	bl	da178 <_ZnajRKSt9nothrow_t>
   da082:	60e0      	str	r0, [r4, #12]
   da084:	4620      	mov	r0, r4
   da086:	bd70      	pop	{r4, r5, r6, pc}
   da088:	000db42c 	.word	0x000db42c

000da08c <_Z18acquireWire1Bufferv>:
	return defaultWireConfig();
}

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
   da08c:	b570      	push	{r4, r5, r6, lr}
   da08e:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   da090:	2514      	movs	r5, #20
   da092:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da094:	4e09      	ldr	r6, [pc, #36]	; (da0bc <_Z18acquireWire1Bufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   da096:	2100      	movs	r1, #0
   da098:	f000 fe0a 	bl	dacb0 <memset>
   da09c:	8025      	strh	r5, [r4, #0]
   da09e:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da0a0:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   da0a2:	60a5      	str	r5, [r4, #8]
   da0a4:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da0a6:	4628      	mov	r0, r5
   da0a8:	f000 f866 	bl	da178 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da0ac:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   da0ae:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da0b0:	4628      	mov	r0, r5
   da0b2:	f000 f861 	bl	da178 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   da0b6:	60e0      	str	r0, [r4, #12]

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
	return defaultWireConfig();
}
   da0b8:	4620      	mov	r0, r4
   da0ba:	bd70      	pop	{r4, r5, r6, pc}
   da0bc:	000db42c 	.word	0x000db42c

000da0c0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   da0c0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da0c2:	4d0e      	ldr	r5, [pc, #56]	; (da0fc <_Z19__fetch_global_Wirev+0x3c>)
   da0c4:	6829      	ldr	r1, [r5, #0]
   da0c6:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   da0ca:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da0cc:	d113      	bne.n	da0f6 <_Z19__fetch_global_Wirev+0x36>
   da0ce:	4628      	mov	r0, r5
   da0d0:	f7f9 ffe9 	bl	d40a6 <__cxa_guard_acquire>
   da0d4:	b178      	cbz	r0, da0f6 <_Z19__fetch_global_Wirev+0x36>
   da0d6:	a801      	add	r0, sp, #4
   da0d8:	f7ff ffbe 	bl	da058 <_Z17acquireWireBufferv>
   da0dc:	aa01      	add	r2, sp, #4
   da0de:	4621      	mov	r1, r4
   da0e0:	4807      	ldr	r0, [pc, #28]	; (da100 <_Z19__fetch_global_Wirev+0x40>)
   da0e2:	f7ff faa7 	bl	d9634 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   da0e6:	4628      	mov	r0, r5
   da0e8:	f7f9 ffe2 	bl	d40b0 <__cxa_guard_release>
   da0ec:	4a05      	ldr	r2, [pc, #20]	; (da104 <_Z19__fetch_global_Wirev+0x44>)
   da0ee:	4906      	ldr	r1, [pc, #24]	; (da108 <_Z19__fetch_global_Wirev+0x48>)
   da0f0:	4803      	ldr	r0, [pc, #12]	; (da100 <_Z19__fetch_global_Wirev+0x40>)
   da0f2:	f000 f831 	bl	da158 <__aeabi_atexit>
	return wire;
}
   da0f6:	4802      	ldr	r0, [pc, #8]	; (da100 <_Z19__fetch_global_Wirev+0x40>)
   da0f8:	b007      	add	sp, #28
   da0fa:	bd30      	pop	{r4, r5, pc}
   da0fc:	2003e510 	.word	0x2003e510
   da100:	2003e528 	.word	0x2003e528
   da104:	2003daf0 	.word	0x2003daf0
   da108:	000d95dd 	.word	0x000d95dd

000da10c <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   da10c:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   da10e:	4c0e      	ldr	r4, [pc, #56]	; (da148 <_Z20__fetch_global_Wire1v+0x3c>)
   da110:	6823      	ldr	r3, [r4, #0]
   da112:	07db      	lsls	r3, r3, #31
	return wire;
}

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   da114:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   da116:	d413      	bmi.n	da140 <_Z20__fetch_global_Wire1v+0x34>
   da118:	4620      	mov	r0, r4
   da11a:	f7f9 ffc4 	bl	d40a6 <__cxa_guard_acquire>
   da11e:	b178      	cbz	r0, da140 <_Z20__fetch_global_Wire1v+0x34>
   da120:	a801      	add	r0, sp, #4
   da122:	f7ff ffb3 	bl	da08c <_Z18acquireWire1Bufferv>
   da126:	aa01      	add	r2, sp, #4
   da128:	2101      	movs	r1, #1
   da12a:	4808      	ldr	r0, [pc, #32]	; (da14c <_Z20__fetch_global_Wire1v+0x40>)
   da12c:	f7ff fa82 	bl	d9634 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   da130:	4620      	mov	r0, r4
   da132:	f7f9 ffbd 	bl	d40b0 <__cxa_guard_release>
   da136:	4a06      	ldr	r2, [pc, #24]	; (da150 <_Z20__fetch_global_Wire1v+0x44>)
   da138:	4906      	ldr	r1, [pc, #24]	; (da154 <_Z20__fetch_global_Wire1v+0x48>)
   da13a:	4804      	ldr	r0, [pc, #16]	; (da14c <_Z20__fetch_global_Wire1v+0x40>)
   da13c:	f000 f80c 	bl	da158 <__aeabi_atexit>
	return wire;
}
   da140:	4802      	ldr	r0, [pc, #8]	; (da14c <_Z20__fetch_global_Wire1v+0x40>)
   da142:	b006      	add	sp, #24
   da144:	bd10      	pop	{r4, pc}
   da146:	bf00      	nop
   da148:	2003e53c 	.word	0x2003e53c
   da14c:	2003e514 	.word	0x2003e514
   da150:	2003daf0 	.word	0x2003daf0
   da154:	000d95dd 	.word	0x000d95dd

000da158 <__aeabi_atexit>:
   da158:	460b      	mov	r3, r1
   da15a:	4601      	mov	r1, r0
   da15c:	4618      	mov	r0, r3
   da15e:	f000 bd7f 	b.w	dac60 <__cxa_atexit>
	...

000da164 <_ZSt15get_new_handlerv>:
   da164:	4b02      	ldr	r3, [pc, #8]	; (da170 <_ZSt15get_new_handlerv+0xc>)
   da166:	6818      	ldr	r0, [r3, #0]
   da168:	f3bf 8f5f 	dmb	sy
   da16c:	4770      	bx	lr
   da16e:	bf00      	nop
   da170:	2003e540 	.word	0x2003e540

000da174 <_ZdlPvj>:
   da174:	f7f9 bf93 	b.w	d409e <_ZdlPv>

000da178 <_ZnajRKSt9nothrow_t>:
   da178:	f000 b800 	b.w	da17c <_ZnwjRKSt9nothrow_t>

000da17c <_ZnwjRKSt9nothrow_t>:
   da17c:	b510      	push	{r4, lr}
   da17e:	2800      	cmp	r0, #0
   da180:	bf14      	ite	ne
   da182:	4604      	movne	r4, r0
   da184:	2401      	moveq	r4, #1
   da186:	4620      	mov	r0, r4
   da188:	f7fe fadc 	bl	d8744 <malloc>
   da18c:	b920      	cbnz	r0, da198 <_ZnwjRKSt9nothrow_t+0x1c>
   da18e:	f7ff ffe9 	bl	da164 <_ZSt15get_new_handlerv>
   da192:	b108      	cbz	r0, da198 <_ZnwjRKSt9nothrow_t+0x1c>
   da194:	4780      	blx	r0
   da196:	e7f6      	b.n	da186 <_ZnwjRKSt9nothrow_t+0xa>
   da198:	bd10      	pop	{r4, pc}
	...

000da19c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   da19c:	4b18      	ldr	r3, [pc, #96]	; (da200 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   da19e:	681a      	ldr	r2, [r3, #0]
   da1a0:	07d1      	lsls	r1, r2, #31
   da1a2:	bf5c      	itt	pl
   da1a4:	2201      	movpl	r2, #1
   da1a6:	601a      	strpl	r2, [r3, #0]
   da1a8:	4b16      	ldr	r3, [pc, #88]	; (da204 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   da1aa:	681a      	ldr	r2, [r3, #0]
   da1ac:	07d2      	lsls	r2, r2, #31
   da1ae:	bf5c      	itt	pl
   da1b0:	2201      	movpl	r2, #1
   da1b2:	601a      	strpl	r2, [r3, #0]
   da1b4:	4b14      	ldr	r3, [pc, #80]	; (da208 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   da1b6:	681a      	ldr	r2, [r3, #0]
   da1b8:	07d0      	lsls	r0, r2, #31
   da1ba:	bf5c      	itt	pl
   da1bc:	2201      	movpl	r2, #1
   da1be:	601a      	strpl	r2, [r3, #0]
   da1c0:	4b12      	ldr	r3, [pc, #72]	; (da20c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   da1c2:	681a      	ldr	r2, [r3, #0]
   da1c4:	07d1      	lsls	r1, r2, #31
   da1c6:	bf5c      	itt	pl
   da1c8:	2201      	movpl	r2, #1
   da1ca:	601a      	strpl	r2, [r3, #0]
   da1cc:	4b10      	ldr	r3, [pc, #64]	; (da210 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   da1ce:	681a      	ldr	r2, [r3, #0]
   da1d0:	07d2      	lsls	r2, r2, #31
   da1d2:	bf5c      	itt	pl
   da1d4:	2201      	movpl	r2, #1
   da1d6:	601a      	strpl	r2, [r3, #0]
   da1d8:	4b0e      	ldr	r3, [pc, #56]	; (da214 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   da1da:	681a      	ldr	r2, [r3, #0]
   da1dc:	07d0      	lsls	r0, r2, #31
   da1de:	bf5c      	itt	pl
   da1e0:	2201      	movpl	r2, #1
   da1e2:	601a      	strpl	r2, [r3, #0]
   da1e4:	4b0c      	ldr	r3, [pc, #48]	; (da218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   da1e6:	681a      	ldr	r2, [r3, #0]
   da1e8:	07d1      	lsls	r1, r2, #31
   da1ea:	bf5c      	itt	pl
   da1ec:	2201      	movpl	r2, #1
   da1ee:	601a      	strpl	r2, [r3, #0]
   da1f0:	4b0a      	ldr	r3, [pc, #40]	; (da21c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   da1f2:	681a      	ldr	r2, [r3, #0]
   da1f4:	07d2      	lsls	r2, r2, #31
   da1f6:	bf5c      	itt	pl
   da1f8:	2201      	movpl	r2, #1
   da1fa:	601a      	strpl	r2, [r3, #0]
   da1fc:	4770      	bx	lr
   da1fe:	bf00      	nop
   da200:	2003e560 	.word	0x2003e560
   da204:	2003e55c 	.word	0x2003e55c
   da208:	2003e558 	.word	0x2003e558
   da20c:	2003e554 	.word	0x2003e554
   da210:	2003e550 	.word	0x2003e550
   da214:	2003e54c 	.word	0x2003e54c
   da218:	2003e548 	.word	0x2003e548
   da21c:	2003e544 	.word	0x2003e544

000da220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   da220:	4b24      	ldr	r3, [pc, #144]	; (da2b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   da222:	681a      	ldr	r2, [r3, #0]
   da224:	07d0      	lsls	r0, r2, #31
   da226:	bf5c      	itt	pl
   da228:	2201      	movpl	r2, #1
   da22a:	601a      	strpl	r2, [r3, #0]
   da22c:	4b22      	ldr	r3, [pc, #136]	; (da2b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   da22e:	681a      	ldr	r2, [r3, #0]
   da230:	07d1      	lsls	r1, r2, #31
   da232:	bf5c      	itt	pl
   da234:	2201      	movpl	r2, #1
   da236:	601a      	strpl	r2, [r3, #0]
   da238:	4b20      	ldr	r3, [pc, #128]	; (da2bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   da23a:	681a      	ldr	r2, [r3, #0]
   da23c:	07d2      	lsls	r2, r2, #31
   da23e:	bf5c      	itt	pl
   da240:	2201      	movpl	r2, #1
   da242:	601a      	strpl	r2, [r3, #0]
   da244:	4b1e      	ldr	r3, [pc, #120]	; (da2c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   da246:	681a      	ldr	r2, [r3, #0]
   da248:	07d0      	lsls	r0, r2, #31
   da24a:	bf5c      	itt	pl
   da24c:	2201      	movpl	r2, #1
   da24e:	601a      	strpl	r2, [r3, #0]
   da250:	4b1c      	ldr	r3, [pc, #112]	; (da2c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   da252:	681a      	ldr	r2, [r3, #0]
   da254:	07d1      	lsls	r1, r2, #31
   da256:	bf5c      	itt	pl
   da258:	2201      	movpl	r2, #1
   da25a:	601a      	strpl	r2, [r3, #0]
   da25c:	4b1a      	ldr	r3, [pc, #104]	; (da2c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   da25e:	681a      	ldr	r2, [r3, #0]
   da260:	07d2      	lsls	r2, r2, #31
   da262:	bf5c      	itt	pl
   da264:	2201      	movpl	r2, #1
   da266:	601a      	strpl	r2, [r3, #0]
   da268:	4b18      	ldr	r3, [pc, #96]	; (da2cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   da26a:	681a      	ldr	r2, [r3, #0]
   da26c:	07d0      	lsls	r0, r2, #31
   da26e:	bf5c      	itt	pl
   da270:	2201      	movpl	r2, #1
   da272:	601a      	strpl	r2, [r3, #0]
   da274:	4b16      	ldr	r3, [pc, #88]	; (da2d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   da276:	681a      	ldr	r2, [r3, #0]
   da278:	07d1      	lsls	r1, r2, #31
   da27a:	bf5c      	itt	pl
   da27c:	2201      	movpl	r2, #1
   da27e:	601a      	strpl	r2, [r3, #0]
   da280:	4b14      	ldr	r3, [pc, #80]	; (da2d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   da282:	681a      	ldr	r2, [r3, #0]
   da284:	07d2      	lsls	r2, r2, #31
   da286:	bf5c      	itt	pl
   da288:	2201      	movpl	r2, #1
   da28a:	601a      	strpl	r2, [r3, #0]
   da28c:	4b12      	ldr	r3, [pc, #72]	; (da2d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   da28e:	681a      	ldr	r2, [r3, #0]
   da290:	07d0      	lsls	r0, r2, #31
   da292:	bf5c      	itt	pl
   da294:	2201      	movpl	r2, #1
   da296:	601a      	strpl	r2, [r3, #0]
   da298:	4b10      	ldr	r3, [pc, #64]	; (da2dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   da29a:	681a      	ldr	r2, [r3, #0]
   da29c:	07d1      	lsls	r1, r2, #31
   da29e:	bf5c      	itt	pl
   da2a0:	2201      	movpl	r2, #1
   da2a2:	601a      	strpl	r2, [r3, #0]
   da2a4:	4b0e      	ldr	r3, [pc, #56]	; (da2e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   da2a6:	681a      	ldr	r2, [r3, #0]
   da2a8:	07d2      	lsls	r2, r2, #31
   da2aa:	bf5c      	itt	pl
   da2ac:	2201      	movpl	r2, #1
   da2ae:	601a      	strpl	r2, [r3, #0]
   da2b0:	4770      	bx	lr
   da2b2:	bf00      	nop
   da2b4:	2003e590 	.word	0x2003e590
   da2b8:	2003e58c 	.word	0x2003e58c
   da2bc:	2003e588 	.word	0x2003e588
   da2c0:	2003e584 	.word	0x2003e584
   da2c4:	2003e580 	.word	0x2003e580
   da2c8:	2003e57c 	.word	0x2003e57c
   da2cc:	2003e578 	.word	0x2003e578
   da2d0:	2003e574 	.word	0x2003e574
   da2d4:	2003e570 	.word	0x2003e570
   da2d8:	2003e56c 	.word	0x2003e56c
   da2dc:	2003e568 	.word	0x2003e568
   da2e0:	2003e564 	.word	0x2003e564

000da2e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   da2e4:	4b24      	ldr	r3, [pc, #144]	; (da378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   da2e6:	681a      	ldr	r2, [r3, #0]
   da2e8:	07d0      	lsls	r0, r2, #31
   da2ea:	bf5c      	itt	pl
   da2ec:	2201      	movpl	r2, #1
   da2ee:	601a      	strpl	r2, [r3, #0]
   da2f0:	4b22      	ldr	r3, [pc, #136]	; (da37c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   da2f2:	681a      	ldr	r2, [r3, #0]
   da2f4:	07d1      	lsls	r1, r2, #31
   da2f6:	bf5c      	itt	pl
   da2f8:	2201      	movpl	r2, #1
   da2fa:	601a      	strpl	r2, [r3, #0]
   da2fc:	4b20      	ldr	r3, [pc, #128]	; (da380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   da2fe:	681a      	ldr	r2, [r3, #0]
   da300:	07d2      	lsls	r2, r2, #31
   da302:	bf5c      	itt	pl
   da304:	2201      	movpl	r2, #1
   da306:	601a      	strpl	r2, [r3, #0]
   da308:	4b1e      	ldr	r3, [pc, #120]	; (da384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   da30a:	681a      	ldr	r2, [r3, #0]
   da30c:	07d0      	lsls	r0, r2, #31
   da30e:	bf5c      	itt	pl
   da310:	2201      	movpl	r2, #1
   da312:	601a      	strpl	r2, [r3, #0]
   da314:	4b1c      	ldr	r3, [pc, #112]	; (da388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   da316:	681a      	ldr	r2, [r3, #0]
   da318:	07d1      	lsls	r1, r2, #31
   da31a:	bf5c      	itt	pl
   da31c:	2201      	movpl	r2, #1
   da31e:	601a      	strpl	r2, [r3, #0]
   da320:	4b1a      	ldr	r3, [pc, #104]	; (da38c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   da322:	681a      	ldr	r2, [r3, #0]
   da324:	07d2      	lsls	r2, r2, #31
   da326:	bf5c      	itt	pl
   da328:	2201      	movpl	r2, #1
   da32a:	601a      	strpl	r2, [r3, #0]
   da32c:	4b18      	ldr	r3, [pc, #96]	; (da390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   da32e:	681a      	ldr	r2, [r3, #0]
   da330:	07d0      	lsls	r0, r2, #31
   da332:	bf5c      	itt	pl
   da334:	2201      	movpl	r2, #1
   da336:	601a      	strpl	r2, [r3, #0]
   da338:	4b16      	ldr	r3, [pc, #88]	; (da394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   da33a:	681a      	ldr	r2, [r3, #0]
   da33c:	07d1      	lsls	r1, r2, #31
   da33e:	bf5c      	itt	pl
   da340:	2201      	movpl	r2, #1
   da342:	601a      	strpl	r2, [r3, #0]
   da344:	4b14      	ldr	r3, [pc, #80]	; (da398 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   da346:	681a      	ldr	r2, [r3, #0]
   da348:	07d2      	lsls	r2, r2, #31
   da34a:	bf5c      	itt	pl
   da34c:	2201      	movpl	r2, #1
   da34e:	601a      	strpl	r2, [r3, #0]
   da350:	4b12      	ldr	r3, [pc, #72]	; (da39c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   da352:	681a      	ldr	r2, [r3, #0]
   da354:	07d0      	lsls	r0, r2, #31
   da356:	bf5c      	itt	pl
   da358:	2201      	movpl	r2, #1
   da35a:	601a      	strpl	r2, [r3, #0]
   da35c:	4b10      	ldr	r3, [pc, #64]	; (da3a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   da35e:	681a      	ldr	r2, [r3, #0]
   da360:	07d1      	lsls	r1, r2, #31
   da362:	bf5c      	itt	pl
   da364:	2201      	movpl	r2, #1
   da366:	601a      	strpl	r2, [r3, #0]
   da368:	4b0e      	ldr	r3, [pc, #56]	; (da3a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   da36a:	681a      	ldr	r2, [r3, #0]
   da36c:	07d2      	lsls	r2, r2, #31
   da36e:	bf5c      	itt	pl
   da370:	2201      	movpl	r2, #1
   da372:	601a      	strpl	r2, [r3, #0]
   da374:	4770      	bx	lr
   da376:	bf00      	nop
   da378:	2003e5c0 	.word	0x2003e5c0
   da37c:	2003e5bc 	.word	0x2003e5bc
   da380:	2003e5b8 	.word	0x2003e5b8
   da384:	2003e5b4 	.word	0x2003e5b4
   da388:	2003e5b0 	.word	0x2003e5b0
   da38c:	2003e5ac 	.word	0x2003e5ac
   da390:	2003e5a8 	.word	0x2003e5a8
   da394:	2003e5a4 	.word	0x2003e5a4
   da398:	2003e5a0 	.word	0x2003e5a0
   da39c:	2003e59c 	.word	0x2003e59c
   da3a0:	2003e598 	.word	0x2003e598
   da3a4:	2003e594 	.word	0x2003e594

000da3a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   da3a8:	4b18      	ldr	r3, [pc, #96]	; (da40c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   da3aa:	681a      	ldr	r2, [r3, #0]
   da3ac:	07d1      	lsls	r1, r2, #31
   da3ae:	bf5c      	itt	pl
   da3b0:	2201      	movpl	r2, #1
   da3b2:	601a      	strpl	r2, [r3, #0]
   da3b4:	4b16      	ldr	r3, [pc, #88]	; (da410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   da3b6:	681a      	ldr	r2, [r3, #0]
   da3b8:	07d2      	lsls	r2, r2, #31
   da3ba:	bf5c      	itt	pl
   da3bc:	2201      	movpl	r2, #1
   da3be:	601a      	strpl	r2, [r3, #0]
   da3c0:	4b14      	ldr	r3, [pc, #80]	; (da414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   da3c2:	681a      	ldr	r2, [r3, #0]
   da3c4:	07d0      	lsls	r0, r2, #31
   da3c6:	bf5c      	itt	pl
   da3c8:	2201      	movpl	r2, #1
   da3ca:	601a      	strpl	r2, [r3, #0]
   da3cc:	4b12      	ldr	r3, [pc, #72]	; (da418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   da3ce:	681a      	ldr	r2, [r3, #0]
   da3d0:	07d1      	lsls	r1, r2, #31
   da3d2:	bf5c      	itt	pl
   da3d4:	2201      	movpl	r2, #1
   da3d6:	601a      	strpl	r2, [r3, #0]
   da3d8:	4b10      	ldr	r3, [pc, #64]	; (da41c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   da3da:	681a      	ldr	r2, [r3, #0]
   da3dc:	07d2      	lsls	r2, r2, #31
   da3de:	bf5c      	itt	pl
   da3e0:	2201      	movpl	r2, #1
   da3e2:	601a      	strpl	r2, [r3, #0]
   da3e4:	4b0e      	ldr	r3, [pc, #56]	; (da420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   da3e6:	681a      	ldr	r2, [r3, #0]
   da3e8:	07d0      	lsls	r0, r2, #31
   da3ea:	bf5c      	itt	pl
   da3ec:	2201      	movpl	r2, #1
   da3ee:	601a      	strpl	r2, [r3, #0]
   da3f0:	4b0c      	ldr	r3, [pc, #48]	; (da424 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   da3f2:	681a      	ldr	r2, [r3, #0]
   da3f4:	07d1      	lsls	r1, r2, #31
   da3f6:	bf5c      	itt	pl
   da3f8:	2201      	movpl	r2, #1
   da3fa:	601a      	strpl	r2, [r3, #0]
   da3fc:	4b0a      	ldr	r3, [pc, #40]	; (da428 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   da3fe:	681a      	ldr	r2, [r3, #0]
   da400:	07d2      	lsls	r2, r2, #31
   da402:	bf5c      	itt	pl
   da404:	2201      	movpl	r2, #1
   da406:	601a      	strpl	r2, [r3, #0]
   da408:	4770      	bx	lr
   da40a:	bf00      	nop
   da40c:	2003e5e0 	.word	0x2003e5e0
   da410:	2003e5dc 	.word	0x2003e5dc
   da414:	2003e5d8 	.word	0x2003e5d8
   da418:	2003e5d4 	.word	0x2003e5d4
   da41c:	2003e5d0 	.word	0x2003e5d0
   da420:	2003e5cc 	.word	0x2003e5cc
   da424:	2003e5c8 	.word	0x2003e5c8
   da428:	2003e5c4 	.word	0x2003e5c4

000da42c <__aeabi_drsub>:
   da42c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   da430:	e002      	b.n	da438 <__adddf3>
   da432:	bf00      	nop

000da434 <__aeabi_dsub>:
   da434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000da438 <__adddf3>:
   da438:	b530      	push	{r4, r5, lr}
   da43a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   da43e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   da442:	ea94 0f05 	teq	r4, r5
   da446:	bf08      	it	eq
   da448:	ea90 0f02 	teqeq	r0, r2
   da44c:	bf1f      	itttt	ne
   da44e:	ea54 0c00 	orrsne.w	ip, r4, r0
   da452:	ea55 0c02 	orrsne.w	ip, r5, r2
   da456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   da45a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da45e:	f000 80e2 	beq.w	da626 <__adddf3+0x1ee>
   da462:	ea4f 5454 	mov.w	r4, r4, lsr #21
   da466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   da46a:	bfb8      	it	lt
   da46c:	426d      	neglt	r5, r5
   da46e:	dd0c      	ble.n	da48a <__adddf3+0x52>
   da470:	442c      	add	r4, r5
   da472:	ea80 0202 	eor.w	r2, r0, r2
   da476:	ea81 0303 	eor.w	r3, r1, r3
   da47a:	ea82 0000 	eor.w	r0, r2, r0
   da47e:	ea83 0101 	eor.w	r1, r3, r1
   da482:	ea80 0202 	eor.w	r2, r0, r2
   da486:	ea81 0303 	eor.w	r3, r1, r3
   da48a:	2d36      	cmp	r5, #54	; 0x36
   da48c:	bf88      	it	hi
   da48e:	bd30      	pophi	{r4, r5, pc}
   da490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da494:	ea4f 3101 	mov.w	r1, r1, lsl #12
   da498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   da49c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   da4a0:	d002      	beq.n	da4a8 <__adddf3+0x70>
   da4a2:	4240      	negs	r0, r0
   da4a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da4a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   da4ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
   da4b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   da4b4:	d002      	beq.n	da4bc <__adddf3+0x84>
   da4b6:	4252      	negs	r2, r2
   da4b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da4bc:	ea94 0f05 	teq	r4, r5
   da4c0:	f000 80a7 	beq.w	da612 <__adddf3+0x1da>
   da4c4:	f1a4 0401 	sub.w	r4, r4, #1
   da4c8:	f1d5 0e20 	rsbs	lr, r5, #32
   da4cc:	db0d      	blt.n	da4ea <__adddf3+0xb2>
   da4ce:	fa02 fc0e 	lsl.w	ip, r2, lr
   da4d2:	fa22 f205 	lsr.w	r2, r2, r5
   da4d6:	1880      	adds	r0, r0, r2
   da4d8:	f141 0100 	adc.w	r1, r1, #0
   da4dc:	fa03 f20e 	lsl.w	r2, r3, lr
   da4e0:	1880      	adds	r0, r0, r2
   da4e2:	fa43 f305 	asr.w	r3, r3, r5
   da4e6:	4159      	adcs	r1, r3
   da4e8:	e00e      	b.n	da508 <__adddf3+0xd0>
   da4ea:	f1a5 0520 	sub.w	r5, r5, #32
   da4ee:	f10e 0e20 	add.w	lr, lr, #32
   da4f2:	2a01      	cmp	r2, #1
   da4f4:	fa03 fc0e 	lsl.w	ip, r3, lr
   da4f8:	bf28      	it	cs
   da4fa:	f04c 0c02 	orrcs.w	ip, ip, #2
   da4fe:	fa43 f305 	asr.w	r3, r3, r5
   da502:	18c0      	adds	r0, r0, r3
   da504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   da508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da50c:	d507      	bpl.n	da51e <__adddf3+0xe6>
   da50e:	f04f 0e00 	mov.w	lr, #0
   da512:	f1dc 0c00 	rsbs	ip, ip, #0
   da516:	eb7e 0000 	sbcs.w	r0, lr, r0
   da51a:	eb6e 0101 	sbc.w	r1, lr, r1
   da51e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   da522:	d31b      	bcc.n	da55c <__adddf3+0x124>
   da524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   da528:	d30c      	bcc.n	da544 <__adddf3+0x10c>
   da52a:	0849      	lsrs	r1, r1, #1
   da52c:	ea5f 0030 	movs.w	r0, r0, rrx
   da530:	ea4f 0c3c 	mov.w	ip, ip, rrx
   da534:	f104 0401 	add.w	r4, r4, #1
   da538:	ea4f 5244 	mov.w	r2, r4, lsl #21
   da53c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   da540:	f080 809a 	bcs.w	da678 <__adddf3+0x240>
   da544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   da548:	bf08      	it	eq
   da54a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da54e:	f150 0000 	adcs.w	r0, r0, #0
   da552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da556:	ea41 0105 	orr.w	r1, r1, r5
   da55a:	bd30      	pop	{r4, r5, pc}
   da55c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   da560:	4140      	adcs	r0, r0
   da562:	eb41 0101 	adc.w	r1, r1, r1
   da566:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da56a:	f1a4 0401 	sub.w	r4, r4, #1
   da56e:	d1e9      	bne.n	da544 <__adddf3+0x10c>
   da570:	f091 0f00 	teq	r1, #0
   da574:	bf04      	itt	eq
   da576:	4601      	moveq	r1, r0
   da578:	2000      	moveq	r0, #0
   da57a:	fab1 f381 	clz	r3, r1
   da57e:	bf08      	it	eq
   da580:	3320      	addeq	r3, #32
   da582:	f1a3 030b 	sub.w	r3, r3, #11
   da586:	f1b3 0220 	subs.w	r2, r3, #32
   da58a:	da0c      	bge.n	da5a6 <__adddf3+0x16e>
   da58c:	320c      	adds	r2, #12
   da58e:	dd08      	ble.n	da5a2 <__adddf3+0x16a>
   da590:	f102 0c14 	add.w	ip, r2, #20
   da594:	f1c2 020c 	rsb	r2, r2, #12
   da598:	fa01 f00c 	lsl.w	r0, r1, ip
   da59c:	fa21 f102 	lsr.w	r1, r1, r2
   da5a0:	e00c      	b.n	da5bc <__adddf3+0x184>
   da5a2:	f102 0214 	add.w	r2, r2, #20
   da5a6:	bfd8      	it	le
   da5a8:	f1c2 0c20 	rsble	ip, r2, #32
   da5ac:	fa01 f102 	lsl.w	r1, r1, r2
   da5b0:	fa20 fc0c 	lsr.w	ip, r0, ip
   da5b4:	bfdc      	itt	le
   da5b6:	ea41 010c 	orrle.w	r1, r1, ip
   da5ba:	4090      	lslle	r0, r2
   da5bc:	1ae4      	subs	r4, r4, r3
   da5be:	bfa2      	ittt	ge
   da5c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   da5c4:	4329      	orrge	r1, r5
   da5c6:	bd30      	popge	{r4, r5, pc}
   da5c8:	ea6f 0404 	mvn.w	r4, r4
   da5cc:	3c1f      	subs	r4, #31
   da5ce:	da1c      	bge.n	da60a <__adddf3+0x1d2>
   da5d0:	340c      	adds	r4, #12
   da5d2:	dc0e      	bgt.n	da5f2 <__adddf3+0x1ba>
   da5d4:	f104 0414 	add.w	r4, r4, #20
   da5d8:	f1c4 0220 	rsb	r2, r4, #32
   da5dc:	fa20 f004 	lsr.w	r0, r0, r4
   da5e0:	fa01 f302 	lsl.w	r3, r1, r2
   da5e4:	ea40 0003 	orr.w	r0, r0, r3
   da5e8:	fa21 f304 	lsr.w	r3, r1, r4
   da5ec:	ea45 0103 	orr.w	r1, r5, r3
   da5f0:	bd30      	pop	{r4, r5, pc}
   da5f2:	f1c4 040c 	rsb	r4, r4, #12
   da5f6:	f1c4 0220 	rsb	r2, r4, #32
   da5fa:	fa20 f002 	lsr.w	r0, r0, r2
   da5fe:	fa01 f304 	lsl.w	r3, r1, r4
   da602:	ea40 0003 	orr.w	r0, r0, r3
   da606:	4629      	mov	r1, r5
   da608:	bd30      	pop	{r4, r5, pc}
   da60a:	fa21 f004 	lsr.w	r0, r1, r4
   da60e:	4629      	mov	r1, r5
   da610:	bd30      	pop	{r4, r5, pc}
   da612:	f094 0f00 	teq	r4, #0
   da616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   da61a:	bf06      	itte	eq
   da61c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   da620:	3401      	addeq	r4, #1
   da622:	3d01      	subne	r5, #1
   da624:	e74e      	b.n	da4c4 <__adddf3+0x8c>
   da626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da62a:	bf18      	it	ne
   da62c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da630:	d029      	beq.n	da686 <__adddf3+0x24e>
   da632:	ea94 0f05 	teq	r4, r5
   da636:	bf08      	it	eq
   da638:	ea90 0f02 	teqeq	r0, r2
   da63c:	d005      	beq.n	da64a <__adddf3+0x212>
   da63e:	ea54 0c00 	orrs.w	ip, r4, r0
   da642:	bf04      	itt	eq
   da644:	4619      	moveq	r1, r3
   da646:	4610      	moveq	r0, r2
   da648:	bd30      	pop	{r4, r5, pc}
   da64a:	ea91 0f03 	teq	r1, r3
   da64e:	bf1e      	ittt	ne
   da650:	2100      	movne	r1, #0
   da652:	2000      	movne	r0, #0
   da654:	bd30      	popne	{r4, r5, pc}
   da656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   da65a:	d105      	bne.n	da668 <__adddf3+0x230>
   da65c:	0040      	lsls	r0, r0, #1
   da65e:	4149      	adcs	r1, r1
   da660:	bf28      	it	cs
   da662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   da666:	bd30      	pop	{r4, r5, pc}
   da668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   da66c:	bf3c      	itt	cc
   da66e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   da672:	bd30      	popcc	{r4, r5, pc}
   da674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   da67c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   da680:	f04f 0000 	mov.w	r0, #0
   da684:	bd30      	pop	{r4, r5, pc}
   da686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da68a:	bf1a      	itte	ne
   da68c:	4619      	movne	r1, r3
   da68e:	4610      	movne	r0, r2
   da690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   da694:	bf1c      	itt	ne
   da696:	460b      	movne	r3, r1
   da698:	4602      	movne	r2, r0
   da69a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da69e:	bf06      	itte	eq
   da6a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   da6a4:	ea91 0f03 	teqeq	r1, r3
   da6a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   da6ac:	bd30      	pop	{r4, r5, pc}
   da6ae:	bf00      	nop

000da6b0 <__aeabi_ui2d>:
   da6b0:	f090 0f00 	teq	r0, #0
   da6b4:	bf04      	itt	eq
   da6b6:	2100      	moveq	r1, #0
   da6b8:	4770      	bxeq	lr
   da6ba:	b530      	push	{r4, r5, lr}
   da6bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da6c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da6c4:	f04f 0500 	mov.w	r5, #0
   da6c8:	f04f 0100 	mov.w	r1, #0
   da6cc:	e750      	b.n	da570 <__adddf3+0x138>
   da6ce:	bf00      	nop

000da6d0 <__aeabi_i2d>:
   da6d0:	f090 0f00 	teq	r0, #0
   da6d4:	bf04      	itt	eq
   da6d6:	2100      	moveq	r1, #0
   da6d8:	4770      	bxeq	lr
   da6da:	b530      	push	{r4, r5, lr}
   da6dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da6e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da6e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   da6e8:	bf48      	it	mi
   da6ea:	4240      	negmi	r0, r0
   da6ec:	f04f 0100 	mov.w	r1, #0
   da6f0:	e73e      	b.n	da570 <__adddf3+0x138>
   da6f2:	bf00      	nop

000da6f4 <__aeabi_f2d>:
   da6f4:	0042      	lsls	r2, r0, #1
   da6f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   da6fa:	ea4f 0131 	mov.w	r1, r1, rrx
   da6fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
   da702:	bf1f      	itttt	ne
   da704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   da708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   da70c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   da710:	4770      	bxne	lr
   da712:	f092 0f00 	teq	r2, #0
   da716:	bf14      	ite	ne
   da718:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   da71c:	4770      	bxeq	lr
   da71e:	b530      	push	{r4, r5, lr}
   da720:	f44f 7460 	mov.w	r4, #896	; 0x380
   da724:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da72c:	e720      	b.n	da570 <__adddf3+0x138>
   da72e:	bf00      	nop

000da730 <__aeabi_ul2d>:
   da730:	ea50 0201 	orrs.w	r2, r0, r1
   da734:	bf08      	it	eq
   da736:	4770      	bxeq	lr
   da738:	b530      	push	{r4, r5, lr}
   da73a:	f04f 0500 	mov.w	r5, #0
   da73e:	e00a      	b.n	da756 <__aeabi_l2d+0x16>

000da740 <__aeabi_l2d>:
   da740:	ea50 0201 	orrs.w	r2, r0, r1
   da744:	bf08      	it	eq
   da746:	4770      	bxeq	lr
   da748:	b530      	push	{r4, r5, lr}
   da74a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   da74e:	d502      	bpl.n	da756 <__aeabi_l2d+0x16>
   da750:	4240      	negs	r0, r0
   da752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da756:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da75a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da75e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   da762:	f43f aedc 	beq.w	da51e <__adddf3+0xe6>
   da766:	f04f 0203 	mov.w	r2, #3
   da76a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da76e:	bf18      	it	ne
   da770:	3203      	addne	r2, #3
   da772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da776:	bf18      	it	ne
   da778:	3203      	addne	r2, #3
   da77a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   da77e:	f1c2 0320 	rsb	r3, r2, #32
   da782:	fa00 fc03 	lsl.w	ip, r0, r3
   da786:	fa20 f002 	lsr.w	r0, r0, r2
   da78a:	fa01 fe03 	lsl.w	lr, r1, r3
   da78e:	ea40 000e 	orr.w	r0, r0, lr
   da792:	fa21 f102 	lsr.w	r1, r1, r2
   da796:	4414      	add	r4, r2
   da798:	e6c1      	b.n	da51e <__adddf3+0xe6>
   da79a:	bf00      	nop

000da79c <__aeabi_dmul>:
   da79c:	b570      	push	{r4, r5, r6, lr}
   da79e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   da7a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   da7a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   da7aa:	bf1d      	ittte	ne
   da7ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   da7b0:	ea94 0f0c 	teqne	r4, ip
   da7b4:	ea95 0f0c 	teqne	r5, ip
   da7b8:	f000 f8de 	bleq	da978 <__aeabi_dmul+0x1dc>
   da7bc:	442c      	add	r4, r5
   da7be:	ea81 0603 	eor.w	r6, r1, r3
   da7c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   da7c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   da7ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   da7ce:	bf18      	it	ne
   da7d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   da7d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da7d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da7dc:	d038      	beq.n	da850 <__aeabi_dmul+0xb4>
   da7de:	fba0 ce02 	umull	ip, lr, r0, r2
   da7e2:	f04f 0500 	mov.w	r5, #0
   da7e6:	fbe1 e502 	umlal	lr, r5, r1, r2
   da7ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   da7ee:	fbe0 e503 	umlal	lr, r5, r0, r3
   da7f2:	f04f 0600 	mov.w	r6, #0
   da7f6:	fbe1 5603 	umlal	r5, r6, r1, r3
   da7fa:	f09c 0f00 	teq	ip, #0
   da7fe:	bf18      	it	ne
   da800:	f04e 0e01 	orrne.w	lr, lr, #1
   da804:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   da808:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   da80c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   da810:	d204      	bcs.n	da81c <__aeabi_dmul+0x80>
   da812:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   da816:	416d      	adcs	r5, r5
   da818:	eb46 0606 	adc.w	r6, r6, r6
   da81c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   da820:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   da824:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   da828:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   da82c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   da830:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da834:	bf88      	it	hi
   da836:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da83a:	d81e      	bhi.n	da87a <__aeabi_dmul+0xde>
   da83c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   da840:	bf08      	it	eq
   da842:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   da846:	f150 0000 	adcs.w	r0, r0, #0
   da84a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da84e:	bd70      	pop	{r4, r5, r6, pc}
   da850:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   da854:	ea46 0101 	orr.w	r1, r6, r1
   da858:	ea40 0002 	orr.w	r0, r0, r2
   da85c:	ea81 0103 	eor.w	r1, r1, r3
   da860:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   da864:	bfc2      	ittt	gt
   da866:	ebd4 050c 	rsbsgt	r5, r4, ip
   da86a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da86e:	bd70      	popgt	{r4, r5, r6, pc}
   da870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da874:	f04f 0e00 	mov.w	lr, #0
   da878:	3c01      	subs	r4, #1
   da87a:	f300 80ab 	bgt.w	da9d4 <__aeabi_dmul+0x238>
   da87e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   da882:	bfde      	ittt	le
   da884:	2000      	movle	r0, #0
   da886:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   da88a:	bd70      	pople	{r4, r5, r6, pc}
   da88c:	f1c4 0400 	rsb	r4, r4, #0
   da890:	3c20      	subs	r4, #32
   da892:	da35      	bge.n	da900 <__aeabi_dmul+0x164>
   da894:	340c      	adds	r4, #12
   da896:	dc1b      	bgt.n	da8d0 <__aeabi_dmul+0x134>
   da898:	f104 0414 	add.w	r4, r4, #20
   da89c:	f1c4 0520 	rsb	r5, r4, #32
   da8a0:	fa00 f305 	lsl.w	r3, r0, r5
   da8a4:	fa20 f004 	lsr.w	r0, r0, r4
   da8a8:	fa01 f205 	lsl.w	r2, r1, r5
   da8ac:	ea40 0002 	orr.w	r0, r0, r2
   da8b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   da8b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da8b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da8bc:	fa21 f604 	lsr.w	r6, r1, r4
   da8c0:	eb42 0106 	adc.w	r1, r2, r6
   da8c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da8c8:	bf08      	it	eq
   da8ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da8ce:	bd70      	pop	{r4, r5, r6, pc}
   da8d0:	f1c4 040c 	rsb	r4, r4, #12
   da8d4:	f1c4 0520 	rsb	r5, r4, #32
   da8d8:	fa00 f304 	lsl.w	r3, r0, r4
   da8dc:	fa20 f005 	lsr.w	r0, r0, r5
   da8e0:	fa01 f204 	lsl.w	r2, r1, r4
   da8e4:	ea40 0002 	orr.w	r0, r0, r2
   da8e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da8ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da8f0:	f141 0100 	adc.w	r1, r1, #0
   da8f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da8f8:	bf08      	it	eq
   da8fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da8fe:	bd70      	pop	{r4, r5, r6, pc}
   da900:	f1c4 0520 	rsb	r5, r4, #32
   da904:	fa00 f205 	lsl.w	r2, r0, r5
   da908:	ea4e 0e02 	orr.w	lr, lr, r2
   da90c:	fa20 f304 	lsr.w	r3, r0, r4
   da910:	fa01 f205 	lsl.w	r2, r1, r5
   da914:	ea43 0302 	orr.w	r3, r3, r2
   da918:	fa21 f004 	lsr.w	r0, r1, r4
   da91c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da920:	fa21 f204 	lsr.w	r2, r1, r4
   da924:	ea20 0002 	bic.w	r0, r0, r2
   da928:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   da92c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da930:	bf08      	it	eq
   da932:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da936:	bd70      	pop	{r4, r5, r6, pc}
   da938:	f094 0f00 	teq	r4, #0
   da93c:	d10f      	bne.n	da95e <__aeabi_dmul+0x1c2>
   da93e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   da942:	0040      	lsls	r0, r0, #1
   da944:	eb41 0101 	adc.w	r1, r1, r1
   da948:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da94c:	bf08      	it	eq
   da94e:	3c01      	subeq	r4, #1
   da950:	d0f7      	beq.n	da942 <__aeabi_dmul+0x1a6>
   da952:	ea41 0106 	orr.w	r1, r1, r6
   da956:	f095 0f00 	teq	r5, #0
   da95a:	bf18      	it	ne
   da95c:	4770      	bxne	lr
   da95e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   da962:	0052      	lsls	r2, r2, #1
   da964:	eb43 0303 	adc.w	r3, r3, r3
   da968:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   da96c:	bf08      	it	eq
   da96e:	3d01      	subeq	r5, #1
   da970:	d0f7      	beq.n	da962 <__aeabi_dmul+0x1c6>
   da972:	ea43 0306 	orr.w	r3, r3, r6
   da976:	4770      	bx	lr
   da978:	ea94 0f0c 	teq	r4, ip
   da97c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   da980:	bf18      	it	ne
   da982:	ea95 0f0c 	teqne	r5, ip
   da986:	d00c      	beq.n	da9a2 <__aeabi_dmul+0x206>
   da988:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da98c:	bf18      	it	ne
   da98e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da992:	d1d1      	bne.n	da938 <__aeabi_dmul+0x19c>
   da994:	ea81 0103 	eor.w	r1, r1, r3
   da998:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da99c:	f04f 0000 	mov.w	r0, #0
   da9a0:	bd70      	pop	{r4, r5, r6, pc}
   da9a2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da9a6:	bf06      	itte	eq
   da9a8:	4610      	moveq	r0, r2
   da9aa:	4619      	moveq	r1, r3
   da9ac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da9b0:	d019      	beq.n	da9e6 <__aeabi_dmul+0x24a>
   da9b2:	ea94 0f0c 	teq	r4, ip
   da9b6:	d102      	bne.n	da9be <__aeabi_dmul+0x222>
   da9b8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   da9bc:	d113      	bne.n	da9e6 <__aeabi_dmul+0x24a>
   da9be:	ea95 0f0c 	teq	r5, ip
   da9c2:	d105      	bne.n	da9d0 <__aeabi_dmul+0x234>
   da9c4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   da9c8:	bf1c      	itt	ne
   da9ca:	4610      	movne	r0, r2
   da9cc:	4619      	movne	r1, r3
   da9ce:	d10a      	bne.n	da9e6 <__aeabi_dmul+0x24a>
   da9d0:	ea81 0103 	eor.w	r1, r1, r3
   da9d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da9d8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   da9dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   da9e0:	f04f 0000 	mov.w	r0, #0
   da9e4:	bd70      	pop	{r4, r5, r6, pc}
   da9e6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   da9ea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   da9ee:	bd70      	pop	{r4, r5, r6, pc}

000da9f0 <__aeabi_ddiv>:
   da9f0:	b570      	push	{r4, r5, r6, lr}
   da9f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   da9f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   da9fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   da9fe:	bf1d      	ittte	ne
   daa00:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   daa04:	ea94 0f0c 	teqne	r4, ip
   daa08:	ea95 0f0c 	teqne	r5, ip
   daa0c:	f000 f8a7 	bleq	dab5e <__aeabi_ddiv+0x16e>
   daa10:	eba4 0405 	sub.w	r4, r4, r5
   daa14:	ea81 0e03 	eor.w	lr, r1, r3
   daa18:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   daa1c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   daa20:	f000 8088 	beq.w	dab34 <__aeabi_ddiv+0x144>
   daa24:	ea4f 3303 	mov.w	r3, r3, lsl #12
   daa28:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   daa2c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   daa30:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   daa34:	ea4f 2202 	mov.w	r2, r2, lsl #8
   daa38:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   daa3c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   daa40:	ea4f 2600 	mov.w	r6, r0, lsl #8
   daa44:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   daa48:	429d      	cmp	r5, r3
   daa4a:	bf08      	it	eq
   daa4c:	4296      	cmpeq	r6, r2
   daa4e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   daa52:	f504 7440 	add.w	r4, r4, #768	; 0x300
   daa56:	d202      	bcs.n	daa5e <__aeabi_ddiv+0x6e>
   daa58:	085b      	lsrs	r3, r3, #1
   daa5a:	ea4f 0232 	mov.w	r2, r2, rrx
   daa5e:	1ab6      	subs	r6, r6, r2
   daa60:	eb65 0503 	sbc.w	r5, r5, r3
   daa64:	085b      	lsrs	r3, r3, #1
   daa66:	ea4f 0232 	mov.w	r2, r2, rrx
   daa6a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   daa6e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   daa72:	ebb6 0e02 	subs.w	lr, r6, r2
   daa76:	eb75 0e03 	sbcs.w	lr, r5, r3
   daa7a:	bf22      	ittt	cs
   daa7c:	1ab6      	subcs	r6, r6, r2
   daa7e:	4675      	movcs	r5, lr
   daa80:	ea40 000c 	orrcs.w	r0, r0, ip
   daa84:	085b      	lsrs	r3, r3, #1
   daa86:	ea4f 0232 	mov.w	r2, r2, rrx
   daa8a:	ebb6 0e02 	subs.w	lr, r6, r2
   daa8e:	eb75 0e03 	sbcs.w	lr, r5, r3
   daa92:	bf22      	ittt	cs
   daa94:	1ab6      	subcs	r6, r6, r2
   daa96:	4675      	movcs	r5, lr
   daa98:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   daa9c:	085b      	lsrs	r3, r3, #1
   daa9e:	ea4f 0232 	mov.w	r2, r2, rrx
   daaa2:	ebb6 0e02 	subs.w	lr, r6, r2
   daaa6:	eb75 0e03 	sbcs.w	lr, r5, r3
   daaaa:	bf22      	ittt	cs
   daaac:	1ab6      	subcs	r6, r6, r2
   daaae:	4675      	movcs	r5, lr
   daab0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   daab4:	085b      	lsrs	r3, r3, #1
   daab6:	ea4f 0232 	mov.w	r2, r2, rrx
   daaba:	ebb6 0e02 	subs.w	lr, r6, r2
   daabe:	eb75 0e03 	sbcs.w	lr, r5, r3
   daac2:	bf22      	ittt	cs
   daac4:	1ab6      	subcs	r6, r6, r2
   daac6:	4675      	movcs	r5, lr
   daac8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   daacc:	ea55 0e06 	orrs.w	lr, r5, r6
   daad0:	d018      	beq.n	dab04 <__aeabi_ddiv+0x114>
   daad2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   daad6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   daada:	ea4f 1606 	mov.w	r6, r6, lsl #4
   daade:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   daae2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   daae6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   daaea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   daaee:	d1c0      	bne.n	daa72 <__aeabi_ddiv+0x82>
   daaf0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   daaf4:	d10b      	bne.n	dab0e <__aeabi_ddiv+0x11e>
   daaf6:	ea41 0100 	orr.w	r1, r1, r0
   daafa:	f04f 0000 	mov.w	r0, #0
   daafe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dab02:	e7b6      	b.n	daa72 <__aeabi_ddiv+0x82>
   dab04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dab08:	bf04      	itt	eq
   dab0a:	4301      	orreq	r1, r0
   dab0c:	2000      	moveq	r0, #0
   dab0e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dab12:	bf88      	it	hi
   dab14:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dab18:	f63f aeaf 	bhi.w	da87a <__aeabi_dmul+0xde>
   dab1c:	ebb5 0c03 	subs.w	ip, r5, r3
   dab20:	bf04      	itt	eq
   dab22:	ebb6 0c02 	subseq.w	ip, r6, r2
   dab26:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dab2a:	f150 0000 	adcs.w	r0, r0, #0
   dab2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dab32:	bd70      	pop	{r4, r5, r6, pc}
   dab34:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dab38:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dab3c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dab40:	bfc2      	ittt	gt
   dab42:	ebd4 050c 	rsbsgt	r5, r4, ip
   dab46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dab4a:	bd70      	popgt	{r4, r5, r6, pc}
   dab4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dab50:	f04f 0e00 	mov.w	lr, #0
   dab54:	3c01      	subs	r4, #1
   dab56:	e690      	b.n	da87a <__aeabi_dmul+0xde>
   dab58:	ea45 0e06 	orr.w	lr, r5, r6
   dab5c:	e68d      	b.n	da87a <__aeabi_dmul+0xde>
   dab5e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dab62:	ea94 0f0c 	teq	r4, ip
   dab66:	bf08      	it	eq
   dab68:	ea95 0f0c 	teqeq	r5, ip
   dab6c:	f43f af3b 	beq.w	da9e6 <__aeabi_dmul+0x24a>
   dab70:	ea94 0f0c 	teq	r4, ip
   dab74:	d10a      	bne.n	dab8c <__aeabi_ddiv+0x19c>
   dab76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dab7a:	f47f af34 	bne.w	da9e6 <__aeabi_dmul+0x24a>
   dab7e:	ea95 0f0c 	teq	r5, ip
   dab82:	f47f af25 	bne.w	da9d0 <__aeabi_dmul+0x234>
   dab86:	4610      	mov	r0, r2
   dab88:	4619      	mov	r1, r3
   dab8a:	e72c      	b.n	da9e6 <__aeabi_dmul+0x24a>
   dab8c:	ea95 0f0c 	teq	r5, ip
   dab90:	d106      	bne.n	daba0 <__aeabi_ddiv+0x1b0>
   dab92:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dab96:	f43f aefd 	beq.w	da994 <__aeabi_dmul+0x1f8>
   dab9a:	4610      	mov	r0, r2
   dab9c:	4619      	mov	r1, r3
   dab9e:	e722      	b.n	da9e6 <__aeabi_dmul+0x24a>
   daba0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   daba4:	bf18      	it	ne
   daba6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dabaa:	f47f aec5 	bne.w	da938 <__aeabi_dmul+0x19c>
   dabae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dabb2:	f47f af0d 	bne.w	da9d0 <__aeabi_dmul+0x234>
   dabb6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dabba:	f47f aeeb 	bne.w	da994 <__aeabi_dmul+0x1f8>
   dabbe:	e712      	b.n	da9e6 <__aeabi_dmul+0x24a>

000dabc0 <__aeabi_d2f>:
   dabc0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dabc4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dabc8:	bf24      	itt	cs
   dabca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dabce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dabd2:	d90d      	bls.n	dabf0 <__aeabi_d2f+0x30>
   dabd4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dabd8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dabdc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dabe0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dabe4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dabe8:	bf08      	it	eq
   dabea:	f020 0001 	biceq.w	r0, r0, #1
   dabee:	4770      	bx	lr
   dabf0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dabf4:	d121      	bne.n	dac3a <__aeabi_d2f+0x7a>
   dabf6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dabfa:	bfbc      	itt	lt
   dabfc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   dac00:	4770      	bxlt	lr
   dac02:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dac06:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dac0a:	f1c2 0218 	rsb	r2, r2, #24
   dac0e:	f1c2 0c20 	rsb	ip, r2, #32
   dac12:	fa10 f30c 	lsls.w	r3, r0, ip
   dac16:	fa20 f002 	lsr.w	r0, r0, r2
   dac1a:	bf18      	it	ne
   dac1c:	f040 0001 	orrne.w	r0, r0, #1
   dac20:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dac24:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dac28:	fa03 fc0c 	lsl.w	ip, r3, ip
   dac2c:	ea40 000c 	orr.w	r0, r0, ip
   dac30:	fa23 f302 	lsr.w	r3, r3, r2
   dac34:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dac38:	e7cc      	b.n	dabd4 <__aeabi_d2f+0x14>
   dac3a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dac3e:	d107      	bne.n	dac50 <__aeabi_d2f+0x90>
   dac40:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dac44:	bf1e      	ittt	ne
   dac46:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dac4a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dac4e:	4770      	bxne	lr
   dac50:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dac54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dac58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dac5c:	4770      	bx	lr
   dac5e:	bf00      	nop

000dac60 <__cxa_atexit>:
   dac60:	b510      	push	{r4, lr}
   dac62:	4c05      	ldr	r4, [pc, #20]	; (dac78 <__cxa_atexit+0x18>)
   dac64:	4613      	mov	r3, r2
   dac66:	b12c      	cbz	r4, dac74 <__cxa_atexit+0x14>
   dac68:	460a      	mov	r2, r1
   dac6a:	4601      	mov	r1, r0
   dac6c:	2002      	movs	r0, #2
   dac6e:	f3af 8000 	nop.w
   dac72:	bd10      	pop	{r4, pc}
   dac74:	4620      	mov	r0, r4
   dac76:	bd10      	pop	{r4, pc}
   dac78:	00000000 	.word	0x00000000

000dac7c <memcmp>:
   dac7c:	b510      	push	{r4, lr}
   dac7e:	3901      	subs	r1, #1
   dac80:	4402      	add	r2, r0
   dac82:	4290      	cmp	r0, r2
   dac84:	d007      	beq.n	dac96 <memcmp+0x1a>
   dac86:	f810 3b01 	ldrb.w	r3, [r0], #1
   dac8a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dac8e:	42a3      	cmp	r3, r4
   dac90:	d0f7      	beq.n	dac82 <memcmp+0x6>
   dac92:	1b18      	subs	r0, r3, r4
   dac94:	bd10      	pop	{r4, pc}
   dac96:	2000      	movs	r0, #0
   dac98:	bd10      	pop	{r4, pc}

000dac9a <memcpy>:
   dac9a:	b510      	push	{r4, lr}
   dac9c:	1e43      	subs	r3, r0, #1
   dac9e:	440a      	add	r2, r1
   daca0:	4291      	cmp	r1, r2
   daca2:	d004      	beq.n	dacae <memcpy+0x14>
   daca4:	f811 4b01 	ldrb.w	r4, [r1], #1
   daca8:	f803 4f01 	strb.w	r4, [r3, #1]!
   dacac:	e7f8      	b.n	daca0 <memcpy+0x6>
   dacae:	bd10      	pop	{r4, pc}

000dacb0 <memset>:
   dacb0:	4402      	add	r2, r0
   dacb2:	4603      	mov	r3, r0
   dacb4:	4293      	cmp	r3, r2
   dacb6:	d002      	beq.n	dacbe <memset+0xe>
   dacb8:	f803 1b01 	strb.w	r1, [r3], #1
   dacbc:	e7fa      	b.n	dacb4 <memset+0x4>
   dacbe:	4770      	bx	lr

000dacc0 <srand>:
   dacc0:	b538      	push	{r3, r4, r5, lr}
   dacc2:	4b12      	ldr	r3, [pc, #72]	; (dad0c <srand+0x4c>)
   dacc4:	681c      	ldr	r4, [r3, #0]
   dacc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dacc8:	4605      	mov	r5, r0
   dacca:	b9d3      	cbnz	r3, dad02 <srand+0x42>
   daccc:	2018      	movs	r0, #24
   dacce:	f7fd fd39 	bl	d8744 <malloc>
   dacd2:	f243 330e 	movw	r3, #13070	; 0x330e
   dacd6:	63a0      	str	r0, [r4, #56]	; 0x38
   dacd8:	8003      	strh	r3, [r0, #0]
   dacda:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   dacde:	8043      	strh	r3, [r0, #2]
   dace0:	f241 2334 	movw	r3, #4660	; 0x1234
   dace4:	8083      	strh	r3, [r0, #4]
   dace6:	f24e 636d 	movw	r3, #58989	; 0xe66d
   dacea:	80c3      	strh	r3, [r0, #6]
   dacec:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   dacf0:	8103      	strh	r3, [r0, #8]
   dacf2:	2305      	movs	r3, #5
   dacf4:	8143      	strh	r3, [r0, #10]
   dacf6:	230b      	movs	r3, #11
   dacf8:	8183      	strh	r3, [r0, #12]
   dacfa:	2201      	movs	r2, #1
   dacfc:	2300      	movs	r3, #0
   dacfe:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dad02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dad04:	2200      	movs	r2, #0
   dad06:	611d      	str	r5, [r3, #16]
   dad08:	615a      	str	r2, [r3, #20]
   dad0a:	bd38      	pop	{r3, r4, r5, pc}
   dad0c:	2003daec 	.word	0x2003daec

000dad10 <strchr>:
   dad10:	b2c9      	uxtb	r1, r1
   dad12:	4603      	mov	r3, r0
   dad14:	f810 2b01 	ldrb.w	r2, [r0], #1
   dad18:	b11a      	cbz	r2, dad22 <strchr+0x12>
   dad1a:	4291      	cmp	r1, r2
   dad1c:	d1f9      	bne.n	dad12 <strchr+0x2>
   dad1e:	4618      	mov	r0, r3
   dad20:	4770      	bx	lr
   dad22:	2900      	cmp	r1, #0
   dad24:	bf0c      	ite	eq
   dad26:	4618      	moveq	r0, r3
   dad28:	2000      	movne	r0, #0
   dad2a:	4770      	bx	lr

000dad2c <strcpy>:
   dad2c:	4603      	mov	r3, r0
   dad2e:	f811 2b01 	ldrb.w	r2, [r1], #1
   dad32:	f803 2b01 	strb.w	r2, [r3], #1
   dad36:	2a00      	cmp	r2, #0
   dad38:	d1f9      	bne.n	dad2e <strcpy+0x2>
   dad3a:	4770      	bx	lr

000dad3c <strlen>:
   dad3c:	4603      	mov	r3, r0
   dad3e:	f813 2b01 	ldrb.w	r2, [r3], #1
   dad42:	2a00      	cmp	r2, #0
   dad44:	d1fb      	bne.n	dad3e <strlen+0x2>
   dad46:	1a18      	subs	r0, r3, r0
   dad48:	3801      	subs	r0, #1
   dad4a:	4770      	bx	lr

000dad4c <dynalib_user>:
   dad4c:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   dad5c:	0000 0000 002e 454e 5458 4620 4c49 2045     ......NEXT FILE 
   dad6c:	4f54 5320 4e45 3a44 0020 4150 4c59 414f     TO SEND: .PAYLOA
   dad7c:	3a44 7b20 3000 7d00 4600 6c69 2065 6544     D: {.0.}.File De
   dad8c:	656c 6574 0064 6946 656c 6420 6c65 7465     leted.File delet
   dad9c:	2065 6966 656c 5300 4154 5452 7d00 000a     e file.START.}..
   dadac:	540a 4d49 5345 4154 504d 203a 4f00 2050     .TIMESTAMP: .OP 
   dadbc:	5453 5441 3a45 5200 5045 524f 4954 474e     STATE:.REPORTING
   dadcc:	4920 544e 5245 4156 3a4c 0020 4144 4154      INTERVAL: .DATA
   daddc:	5220 5345 4c4f 5455 4f49 3a4e 0020 4553      RESOLUTION: .SE
   dadec:	4952 4c41 4e20 4d55 4542 3a52 0020 514d     RIAL NUMBER: .MQ
   dadfc:	5454 4220 4f52 454b 3a52 0020 514d 5454     TT BROKER: .MQTT
   dae0c:	4220 4f52 454b 2052 4f50 5452 203a 4300      BROKER PORT: .C
   dae1c:	4548 4b43 5553 3a4d 0020 6553 7474 6e69     HECKSUM: .Settin
   dae2c:	7367 5320 7661 6465 7320 6375 6563 7373     gs Saved success
   dae3c:	7566 6c6c 0079 4553 4952 4c41 4420 5441     fully.SERIAL DAT
   dae4c:	2041 4553 5454 4e49 5347 2d20 3e2d 7b20     A SETTINGS --> {
   dae5c:	5300 5445 4954 474e 2053 4146 4c49 4445     .SETTINGS FAILED
   dae6c:	5200 4345 4945 4556 2044 534d 3a47 0020     .RECEIVED MSG: .
   dae7c:	4d0a 5345 4153 4547 5420 5059 3a45 0020     .MESSAGE TYPE: .
   dae8c:	3434 3500 0035 454e 2057 514d 5454 4220     44.55.NEW MQTT B
   dae9c:	4f52 454b 2052 4553 3a54 0020 5550 4c42     ROKER SET: .PUBL
   daeac:	5349 2048 4146 4c49 4445 6200 6f72 656b     ISH FAILED.broke
   daebc:	2e72 6968 6576 716d 632e 6d6f 0a00 6544     r.hivemq.com..De
   daecc:	6976 6563 4920 3a44 0020 540a 7365 6974     vice ID: ..Testi
   daedc:	676e 4520 5045 4f52 3a4d 0a00 7250 7365     ng EEPROM:..Pres
   daeec:	2073 7562 7474 6e6f 6620 726f 203a 2000     s button for: . 
   daefc:	6553 6f63 646e 0073 540a 7365 6974 676e     Seconds..Testing
   daf0c:	4220 7475 6f74 3a6e 0a00 6554 7473 6e69      Button:..Testin
   daf1c:	2067 6156 766c 3a65 0a00 6554 7473 6e69     g Valve:..Testin
   daf2c:	2067 4453 4320 7261 3a64 0a00 6554 7473     g SD Card:..Test
   daf3c:	6e69 2067 6152 6964 3a6f 0a00 6e55 6e6b     ing Radio:..Unkn
   daf4c:	776f 206e 6f63 6d6d 6e61 0064 5355 4e49     own command.USIN
   daf5c:	2047 4544 4146 4c55 2054 4553 5454 4e49     G DEFAULT SETTIN
   daf6c:	5347 5500 4953 474e 5320 5445 4954 474e     GS.USING SETTING
   daf7c:	2053 5246 4d4f 4d20 4d45 524f 0059 6574     S FROM MEMORY.te
   daf8c:	7473 622e 6f72 656b 2e72 6f63 006d 0000     st.broker.com...

000daf9c <_ZTV5Timer>:
	...
   dafa4:	5151 000d 5199 000d 50d7 000d               QQ...Q...P..

000dafb0 <_ZTVN8particle13__SPISettingsE>:
	...
   dafb8:	5285 000d                                   .R..

000dafbc <_ZTV4File>:
	...
   dafc4:	5283 000d 531b 000d 5329 000d 52e9 000d     .R...S..)S...R..
   dafd4:	5265 000d 535f 000d 52e3 000d 52dd 000d     eR.._S...R...R..

000dafe4 <_ZTV6SdFile>:
	...
   dafec:	5281 000d 530d 000d 52f5 000d 52ef 000d     .R...S...R...R..
   daffc:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   db00c:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   db01c:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   db02c:	676e 2073 7325 6c25 2075 7325 4d20 444f     ngs %s%lu %s MOD
   db03c:	2545 3e64 2500 3230 2558 3230 2558 3230     E%d>.%02X%02X%02
   db04c:	2558 3230 2e58 4f4c 0047 6946 656c 6e20     X%02X.LOG.File n
   db05c:	6d61 3a65 0020 5320 7a69 3a65 0020 4144     ame: . Size: .DA
   db06c:	4154 4c20 474f 5320 4355 4543 5353 4400     TA LOG SUCCESS.D
   db07c:	5441 2041 4f4c 2047 5245 4f52 0052 002f     ATA LOG ERROR./.
   db08c:	4652 364d 2039 4e49 5449 4520 5252 524f     RFM69 INIT ERROR
   db09c:	4e00 5745 4e20 444f 2045 4449 203a 4e00     .NEW NODE ID: .N
   db0ac:	5745 4e20 5445 4f57 4b52 4920 3a44 0020     EW NETWORK ID: .
   db0bc:	4749 2d48 4652 364d 4839 5743 4b2d 5945     IGH-RFM69HCW-KEY
   db0cc:	3c00 4554 5453 003e 543c 5345 3a54 4b4f     .<TEST>.<TEST:OK
   db0dc:	003e 0400 514d 5454 0004 4d06 4951 6473     >...MQTT...MQIsd
   db0ec:	0370 0000                                   p...

000db0f0 <_ZTV5RFM69>:
	...
   db0f8:	7d0d 000d                                   .}..

000db0fc <_ZTVN5spark13EthernetClassE>:
	...
   db104:	8803 000d 87f9 000d 87ef 000d 87e5 000d     ................
   db114:	87d9 000d 87cd 000d 87c1 000d 87b9 000d     ................
   db124:	87af 000d 87a5 000d 9e67 000d               ........g...

000db130 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   db130:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
   db140:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   db150:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   db160:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   db170:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   db180:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   db190:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   db1a0:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   db1b0:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   db1c0:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   db1d0:	7465 6961 736c 3d20 0020 0a0d 6600 6c00     etails = ....f.l
   db1e0:	006e 6e66 6300 646f 0065 6564 6174 6c69     n.fn.code.detail
   db1f0:	6e00 6e6f 0065 7274 6361 0065 6e69 6f66     .none.trace.info
   db200:	7700 7261 006e 7265 6f72 0072 6170 696e     .warn.error.pani
   db210:	0063 6c61 006c 005a 2b25 3330 3a64 3025     c.all.Z.%+03d:%0
   db220:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   db230:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000db240 <_ZTV14CellularSignal>:
	...
   db248:	56c1 000d 56c3 000d 8e89 000d 8f19 000d     .V...V..........
   db258:	8e8d 000d 8ee5 000d 8eb9 000d 8f8b 000d     ................
   db268:	fffc ffff 0000 0000 8fb5 000d               ............

000db274 <_ZTV9IPAddress>:
	...
   db27c:	91c1 000d 91b1 000d 91b3 000d               ............

000db288 <_ZTV9USBSerial>:
	...
   db290:	92d9 000d 9329 000d 9337 000d 8cad 000d     ....)...7.......
   db2a0:	9315 000d 92db 000d 92f1 000d 9323 000d     ............#...
   db2b0:	9307 000d 92d5 000d                         ........

000db2b8 <_ZTVN5spark13CellularClassE>:
	...
   db2c0:	949f 000d 9495 000d 948b 000d 9441 000d     ............A...
   db2d0:	947f 000d 9473 000d 9467 000d 945f 000d     ....s...g..._...
   db2e0:	9455 000d 944b 000d 9e67 000d               U...K...g...

000db2ec <_ZTV11USARTSerial>:
	...
   db2f4:	94d9 000d 9529 000d 9537 000d 8cad 000d     ....)...7.......
   db304:	94ed 000d 950f 000d 94fb 000d 9523 000d     ............#...
   db314:	94db 000d 94df 000d                         ........

000db31c <_ZTV7TwoWire>:
	...
   db324:	95dd 000d 9627 000d 95ff 000d 95df 000d     ....'...........
   db334:	9607 000d 960f 000d 9617 000d 961f 000d     ................

000db344 <_ZTVN5spark9MeshClassE>:
	...
   db34c:	9755 000d 974b 000d 9741 000d 9737 000d     U...K...A...7...
   db35c:	972b 000d 971f 000d 9713 000d 970b 000d     +...............
   db36c:	9701 000d 96f7 000d 9e67 000d               ........g...

000db378 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   db380:	98f9 000d 98ff 000d 9de7 000d 990d 000d     ................
   db390:	98fb 000d                                   ....

000db394 <_ZTV9TCPClient>:
	...
   db39c:	5971 000d 59a5 000d 9871 000d 988b 000d     qY...Y..q.......
   db3ac:	9c8d 000d 99df 000d 99b1 000d 98b5 000d     ................
   db3bc:	9b69 000d 9a65 000d 9a13 000d 9c5d 000d     i...e.......]...
   db3cc:	98b7 000d 98ef 000d 989d 000d 9911 000d     ................
   db3dc:	9991 000d 6977 6972 676e 7200 6365 2076     ....wiring.recv 
   db3ec:	7265 6f72 2072 203d 6425 0000               error = %d..

000db3f8 <_ZTVN5spark12NetworkClassE>:
	...
   db400:	9dff 000d 9e09 000d 9e13 000d 9e1d 000d     ................
   db410:	9e27 000d 9e33 000d 9e3f 000d 9e4b 000d     '...3...?...K...
   db420:	9e53 000d 9e5d 000d 9e67 000d               S...]...g...

000db42c <_ZSt7nothrow>:
   db42c:	0000 0000                                   ....

000db430 <__sf_fake_stdin>:
	...

000db450 <__sf_fake_stdout>:
	...

000db470 <__sf_fake_stderr>:
	...
   db490:	0043                                        C.

000db492 <link_const_variable_data_end>:
	...

000db494 <link_constructors_location>:
   db494:	000d45d9 	.word	0x000d45d9
   db498:	000d4cd7 	.word	0x000d4cd7
   db49c:	000d4f19 	.word	0x000d4f19
   db4a0:	000d4fa9 	.word	0x000d4fa9
   db4a4:	000d50b7 	.word	0x000d50b7
   db4a8:	000d51d5 	.word	0x000d51d5
   db4ac:	000d55ed 	.word	0x000d55ed
   db4b0:	000d5795 	.word	0x000d5795
   db4b4:	000d593d 	.word	0x000d593d
   db4b8:	000d61bf 	.word	0x000d61bf
   db4bc:	000d61c3 	.word	0x000d61c3
   db4c0:	000d61c7 	.word	0x000d61c7
   db4c4:	000d68e1 	.word	0x000d68e1
   db4c8:	000d68e5 	.word	0x000d68e5
   db4cc:	000d68e9 	.word	0x000d68e9
   db4d0:	000d691b 	.word	0x000d691b
   db4d4:	000d70e1 	.word	0x000d70e1
   db4d8:	000d7105 	.word	0x000d7105
   db4dc:	000d7109 	.word	0x000d7109
   db4e0:	000d742d 	.word	0x000d742d
   db4e4:	000d7431 	.word	0x000d7431
   db4e8:	000d7435 	.word	0x000d7435
   db4ec:	000d796f 	.word	0x000d796f
   db4f0:	000d7973 	.word	0x000d7973
   db4f4:	000d7977 	.word	0x000d7977
   db4f8:	000d7a1d 	.word	0x000d7a1d
   db4fc:	000d80a5 	.word	0x000d80a5
   db500:	000d80a9 	.word	0x000d80a9
   db504:	000d880d 	.word	0x000d880d
   db508:	000d8abd 	.word	0x000d8abd
   db50c:	000d8c85 	.word	0x000d8c85
   db510:	000d8dc9 	.word	0x000d8dc9
   db514:	000d8e45 	.word	0x000d8e45
   db518:	000d8e6d 	.word	0x000d8e6d
   db51c:	000d94a9 	.word	0x000d94a9
   db520:	000d9821 	.word	0x000d9821
   db524:	000d9f35 	.word	0x000d9f35
   db528:	000da19d 	.word	0x000da19d
   db52c:	000da221 	.word	0x000da221
   db530:	000da2e5 	.word	0x000da2e5
   db534:	000da3a9 	.word	0x000da3a9

000db538 <link_constructors_end>:
	...
