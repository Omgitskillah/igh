
c:/Users/Clarence.Alucho/Documents/git/igh/igh_shield/target/1.5.2/boron/igh_shield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001824  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5840  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e35c  000d5844  0001e35c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000042c  2003e3c4  2003e3c4  0002e3c4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d58ac  000d58ac  000258ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d58d4  000d58d4  000258d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000bb157  00000000  00000000  000258d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000e9ff  00000000  00000000  000e0a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001d998  00000000  00000000  000ef42e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000021b8  00000000  00000000  0010cdc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004128  00000000  00000000  0010ef7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003278e  00000000  00000000  001130a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002564c  00000000  00000000  00145834  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001020ce  00000000  00000000  0016ae80  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c5b0  00000000  00000000  0026cf50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fa07 	bl	d5440 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fa0c 	bl	d5456 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e35c 	.word	0x2003e35c
   d4048:	000d5844 	.word	0x000d5844
   d404c:	2003e3c4 	.word	0x2003e3c4
   d4050:	2003e3c4 	.word	0x2003e3c4
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 fd2d 	bl	d4ab8 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d5838 	.word	0x000d5838
   d4080:	000d57f4 	.word	0x000d57f4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b820 	b.w	d40c8 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f81f 	bl	d40cc <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bcd3 	b.w	d4a3c <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 bb47 	b.w	d4728 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 bb45 	b.w	d4728 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <igh_settings_calculate_checksum>:
 * struct must have a single byte at the end designated for the checksum for this to work
 * \param p_struct: pointer to data struct, total_bytes: sizeof(data struct)
 * \return the checksum
 */
uint8_t igh_settings_calculate_checksum(void * p_struct, size_t total_bytes)
{
   d40ae:	b510      	push	{r4, lr}
    data = (uint8_t *)p_struct;

    // uint8_t data_buffer[length];
    // memcpy(data_buffer, data, length);

    data += 1; // ignore checksum byte
   d40b0:	1c42      	adds	r2, r0, #1
 */
uint8_t igh_settings_calculate_checksum(void * p_struct, size_t total_bytes)
{
    uint8_t length = (uint8_t)total_bytes; 
    uint8_t * data;
    int sum = 0;
   d40b2:	2300      	movs	r3, #0
    // uint8_t data_buffer[length];
    // memcpy(data_buffer, data, length);

    data += 1; // ignore checksum byte
    // start at 1 to ignore the checksum byte
    for( int i = 1; i < length; i++)
   d40b4:	b2c9      	uxtb	r1, r1
   d40b6:	1a14      	subs	r4, r2, r0
   d40b8:	42a1      	cmp	r1, r4
   d40ba:	dd03      	ble.n	d40c4 <igh_settings_calculate_checksum+0x16>
    {
        sum += (0xFF & *data++);
   d40bc:	f812 4b01 	ldrb.w	r4, [r2], #1
   d40c0:	4423      	add	r3, r4
   d40c2:	e7f8      	b.n	d40b6 <igh_settings_calculate_checksum+0x8>
    }

    checksum = (uint8_t)(sum % 256);

    return checksum;
}
   d40c4:	b2d8      	uxtb	r0, r3
   d40c6:	bd10      	pop	{r4, pc}

000d40c8 <setup>:

void setup() 
{
#ifdef TEST_MODE
    // go into test mode
    igh_log_begin();
   d40c8:	f000 b814 	b.w	d40f4 <_Z13igh_log_beginv>

000d40cc <loop>:

void loop() 
{
#ifdef TEST_MODE
    // process test commands
   igh_process_serial_cmd(); 
   d40cc:	f000 b81c 	b.w	d4108 <_Z22igh_process_serial_cmdv>

000d40d0 <_GLOBAL__sub_I_setup>:
#endif

}
   d40d0:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d40d2:	f000 f9d5 	bl	d4480 <HAL_Pin_Map>
#include "particle_api/igh_log.h"
#endif



SYSTEM_THREAD(ENABLED);
   d40d6:	2100      	movs	r1, #0
   d40d8:	2001      	movs	r0, #1
#ifdef TEST_MODE
    // process test commands
   igh_process_serial_cmd(); 
#endif

}
   d40da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#include "particle_api/igh_log.h"
#endif



SYSTEM_THREAD(ENABLED);
   d40de:	f000 baa7 	b.w	d4630 <system_thread_set_state>

000d40e2 <_Z13igh_log_print6String>:
    }
    return 0;
}

void igh_log_print(String _str)
{
   d40e2:	b510      	push	{r4, lr}
   d40e4:	4604      	mov	r4, r0
    Serial.print(_str);
   d40e6:	f000 fde7 	bl	d4cb8 <_Z16_fetch_usbserialv>
   d40ea:	6821      	ldr	r1, [r4, #0]
}
   d40ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return 0;
}

void igh_log_print(String _str)
{
    Serial.print(_str);
   d40f0:	f000 bc2e 	b.w	d4950 <_ZN5Print5printEPKc>

000d40f4 <_Z13igh_log_beginv>:
}

void igh_log_begin(void)
{
   d40f4:	b508      	push	{r3, lr}
    Serial.begin(IGH_LOG_BAUD);
   d40f6:	f000 fddf 	bl	d4cb8 <_Z16_fetch_usbserialv>
   d40fa:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
}
   d40fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.print(_str);
}

void igh_log_begin(void)
{
    Serial.begin(IGH_LOG_BAUD);
   d4102:	f000 bdcd 	b.w	d4ca0 <_ZN9USBSerial5beginEl>
	...

000d4108 <_Z22igh_process_serial_cmdv>:
        igh_log_print(test_fail); igh_log_print("\n");
    }   
}

uint8_t igh_process_serial_cmd(void)
{
   d4108:	b510      	push	{r4, lr}
   d410a:	b088      	sub	sp, #32
    uint8_t ret = 0;
    char resp[10];
    memset(resp, '\0', sizeof(resp));
   d410c:	2300      	movs	r3, #0
   d410e:	9301      	str	r3, [sp, #4]
   d4110:	9302      	str	r3, [sp, #8]
   d4112:	f8ad 300c 	strh.w	r3, [sp, #12]
static void print_cmd_options(void);
static void igh_append_test_status(uint8_t _status);

static uint8_t igh_log_read(char * _ch)
{
    if( Serial.available() )
   d4116:	f000 fdcf 	bl	d4cb8 <_Z16_fetch_usbserialv>
   d411a:	6803      	ldr	r3, [r0, #0]
   d411c:	691b      	ldr	r3, [r3, #16]
   d411e:	4798      	blx	r3
   d4120:	b188      	cbz	r0, d4146 <_Z22igh_process_serial_cmdv+0x3e>
    {
        *_ch = Serial.read();
   d4122:	f000 fdc9 	bl	d4cb8 <_Z16_fetch_usbserialv>
   d4126:	6803      	ldr	r3, [r0, #0]
   d4128:	695b      	ldr	r3, [r3, #20]
   d412a:	4798      	blx	r3
   d412c:	b2c4      	uxtb	r4, r0
        while (Serial.available()) Serial.read(); // remove any other data
   d412e:	f000 fdc3 	bl	d4cb8 <_Z16_fetch_usbserialv>
   d4132:	6803      	ldr	r3, [r0, #0]
   d4134:	691b      	ldr	r3, [r3, #16]
   d4136:	4798      	blx	r3
   d4138:	b138      	cbz	r0, d414a <_Z22igh_process_serial_cmdv+0x42>
   d413a:	f000 fdbd 	bl	d4cb8 <_Z16_fetch_usbserialv>
   d413e:	6803      	ldr	r3, [r0, #0]
   d4140:	695b      	ldr	r3, [r3, #20]
   d4142:	4798      	blx	r3
   d4144:	e7f3      	b.n	d412e <_Z22igh_process_serial_cmdv+0x26>
    }   
}

uint8_t igh_process_serial_cmd(void)
{
    uint8_t ret = 0;
   d4146:	4604      	mov	r4, r0
    else
    {
        // Do nothing;
    }

    return ret;
   d4148:	e051      	b.n	d41ee <_Z22igh_process_serial_cmdv+0xe6>

    char serial_cmd = '\0';

    if( igh_log_read(&serial_cmd) )
    {
        switch(serial_cmd)
   d414a:	2c31      	cmp	r4, #49	; 0x31
   d414c:	d124      	bne.n	d4198 <_Z22igh_process_serial_cmdv+0x90>
        {
            case test_flash:
                igh_log_print(F("\nTesting flash:"));
   d414e:	4929      	ldr	r1, [pc, #164]	; (d41f4 <_Z22igh_process_serial_cmdv+0xec>)
   d4150:	a804      	add	r0, sp, #16
   d4152:	f000 fba8 	bl	d48a6 <_ZN6StringC1EPK19__FlashStringHelper>
   d4156:	a804      	add	r0, sp, #16
   d4158:	f7ff ffc3 	bl	d40e2 <_Z13igh_log_print6String>
   d415c:	a804      	add	r0, sp, #16
   d415e:	f000 fb5b 	bl	d4818 <_ZN6StringD1Ev>
                ret = igh_eeproom_test(); // this should be true based on actual test
   d4162:	f000 f8ef 	bl	d4344 <_Z16igh_eeproom_testv>
    igh_log_print(test_padding);
}

static void igh_append_test_status(uint8_t _status)
{
    if(_status)
   d4166:	4604      	mov	r4, r0
   d4168:	b108      	cbz	r0, d416e <_Z22igh_process_serial_cmdv+0x66>
    {
        igh_log_print(test_success); igh_log_print("\n");
   d416a:	4923      	ldr	r1, [pc, #140]	; (d41f8 <_Z22igh_process_serial_cmdv+0xf0>)
   d416c:	e000      	b.n	d4170 <_Z22igh_process_serial_cmdv+0x68>
    }
    else
    {
        igh_log_print(test_fail); igh_log_print("\n");
   d416e:	4923      	ldr	r1, [pc, #140]	; (d41fc <_Z22igh_process_serial_cmdv+0xf4>)
   d4170:	a804      	add	r0, sp, #16
   d4172:	f000 fb98 	bl	d48a6 <_ZN6StringC1EPK19__FlashStringHelper>
   d4176:	a804      	add	r0, sp, #16
   d4178:	f7ff ffb3 	bl	d40e2 <_Z13igh_log_print6String>
   d417c:	a804      	add	r0, sp, #16
   d417e:	f000 fb4b 	bl	d4818 <_ZN6StringD1Ev>
   d4182:	491f      	ldr	r1, [pc, #124]	; (d4200 <_Z22igh_process_serial_cmdv+0xf8>)
   d4184:	a804      	add	r0, sp, #16
   d4186:	f000 fb8e 	bl	d48a6 <_ZN6StringC1EPK19__FlashStringHelper>
   d418a:	a804      	add	r0, sp, #16
   d418c:	f7ff ffa9 	bl	d40e2 <_Z13igh_log_print6String>
   d4190:	a804      	add	r0, sp, #16
   d4192:	f000 fb41 	bl	d4818 <_ZN6StringD1Ev>
   d4196:	e02a      	b.n	d41ee <_Z22igh_process_serial_cmdv+0xe6>

    char serial_cmd = '\0';

    if( igh_log_read(&serial_cmd) )
    {
        switch(serial_cmd)
   d4198:	2c3f      	cmp	r4, #63	; 0x3f
   d419a:	d1d4      	bne.n	d4146 <_Z22igh_process_serial_cmdv+0x3e>
    Serial.begin(IGH_LOG_BAUD);
}

static void print_cmd_options(void)
{
    igh_log_print(test_padding);
   d419c:	4919      	ldr	r1, [pc, #100]	; (d4204 <_Z22igh_process_serial_cmdv+0xfc>)
   d419e:	a804      	add	r0, sp, #16
   d41a0:	f000 fb81 	bl	d48a6 <_ZN6StringC1EPK19__FlashStringHelper>
   d41a4:	a804      	add	r0, sp, #16
   d41a6:	f7ff ff9c 	bl	d40e2 <_Z13igh_log_print6String>
   d41aa:	a804      	add	r0, sp, #16
   d41ac:	f000 fb34 	bl	d4818 <_ZN6StringD1Ev>
    igh_log_print(test_cmd_options);
   d41b0:	4915      	ldr	r1, [pc, #84]	; (d4208 <_Z22igh_process_serial_cmdv+0x100>)
   d41b2:	a804      	add	r0, sp, #16
   d41b4:	f000 fb77 	bl	d48a6 <_ZN6StringC1EPK19__FlashStringHelper>
   d41b8:	a804      	add	r0, sp, #16
   d41ba:	f7ff ff92 	bl	d40e2 <_Z13igh_log_print6String>
   d41be:	a804      	add	r0, sp, #16
   d41c0:	f000 fb2a 	bl	d4818 <_ZN6StringD1Ev>
    igh_log_print(test_flash_cmd);
   d41c4:	4911      	ldr	r1, [pc, #68]	; (d420c <_Z22igh_process_serial_cmdv+0x104>)
   d41c6:	a804      	add	r0, sp, #16
   d41c8:	f000 fb6d 	bl	d48a6 <_ZN6StringC1EPK19__FlashStringHelper>
   d41cc:	a804      	add	r0, sp, #16
   d41ce:	f7ff ff88 	bl	d40e2 <_Z13igh_log_print6String>
   d41d2:	a804      	add	r0, sp, #16
   d41d4:	f000 fb20 	bl	d4818 <_ZN6StringD1Ev>
    igh_log_print(test_padding);
   d41d8:	490a      	ldr	r1, [pc, #40]	; (d4204 <_Z22igh_process_serial_cmdv+0xfc>)
   d41da:	a804      	add	r0, sp, #16
   d41dc:	f000 fb63 	bl	d48a6 <_ZN6StringC1EPK19__FlashStringHelper>
   d41e0:	a804      	add	r0, sp, #16
   d41e2:	f7ff ff7e 	bl	d40e2 <_Z13igh_log_print6String>
   d41e6:	a804      	add	r0, sp, #16
   d41e8:	f000 fb16 	bl	d4818 <_ZN6StringD1Ev>
                igh_append_test_status(ret);  
                break;
            
            case cmd_option:
                print_cmd_options();
                ret = 1;
   d41ec:	2401      	movs	r4, #1
    {
        // Do nothing;
    }

    return ret;
   d41ee:	4620      	mov	r0, r4
   d41f0:	b008      	add	sp, #32
   d41f2:	bd10      	pop	{r4, pc}
   d41f4:	000d54f8 	.word	0x000d54f8
   d41f8:	000d5519 	.word	0x000d5519
   d41fc:	000d5508 	.word	0x000d5508
   d4200:	000d561a 	.word	0x000d561a
   d4204:	000d550d 	.word	0x000d550d
   d4208:	000d54dc 	.word	0x000d54dc
   d420c:	000d54e8 	.word	0x000d54e8

000d4210 <_GLOBAL__sub_I__Z13igh_log_print6String>:
   d4210:	f000 b936 	b.w	d4480 <HAL_Pin_Map>

000d4214 <_Z24igh_eeprom_update_errorsm>:
 * \brief Save errors bit field
 * \param error_bit_field: error bit field
 * \return void
 */
void igh_eeprom_update_errors(uint32_t error_bit_field)
{
   d4214:	b513      	push	{r0, r1, r4, lr}
   d4216:	ac02      	add	r4, sp, #8
   d4218:	f844 0d04 	str.w	r0, [r4, #-4]!
    EEPROM.put(SYSTEM_ERRORS_ADDRESS, error_bit_field);
   d421c:	f000 ff9e 	bl	d515c <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4220:	2204      	movs	r2, #4
   d4222:	4621      	mov	r1, r4
   d4224:	f44f 6080 	mov.w	r0, #1024	; 0x400
   d4228:	f000 f952 	bl	d44d0 <HAL_EEPROM_Put>
}
   d422c:	b002      	add	sp, #8
   d422e:	bd10      	pop	{r4, pc}

000d4230 <_Z31igh_eeprom_read_system_settingsP15system_settings>:
 * \brief Gets system settings from eeprom emulator
 * \param running_system_settings_buffer: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_system_settings(system_settings * running_system_settings_buffer)
{
   d4230:	b530      	push	{r4, r5, lr}
   d4232:	b091      	sub	sp, #68	; 0x44
  system_settings local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d4234:	223c      	movs	r2, #60	; 0x3c
   d4236:	2100      	movs	r1, #0
 * \brief Gets system settings from eeprom emulator
 * \param running_system_settings_buffer: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_system_settings(system_settings * running_system_settings_buffer)
{
   d4238:	4605      	mov	r5, r0
  system_settings local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d423a:	a801      	add	r0, sp, #4
   d423c:	f001 f90b 	bl	d5456 <memset>
  EEPROM.get(SYSTEM_SETTINGS_ADDRESS, local_buffer);
   d4240:	f000 ff8c 	bl	d515c <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4244:	223c      	movs	r2, #60	; 0x3c
   d4246:	a901      	add	r1, sp, #4
   d4248:	2000      	movs	r0, #0
   d424a:	f000 f939 	bl	d44c0 <HAL_EEPROM_Get>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));
   d424e:	213c      	movs	r1, #60	; 0x3c
   d4250:	a801      	add	r0, sp, #4
   d4252:	f7ff ff2c 	bl	d40ae <igh_settings_calculate_checksum>

  if( checksum != local_buffer.checksum)
   d4256:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d425a:	4283      	cmp	r3, r0
   d425c:	d10c      	bne.n	d4278 <_Z31igh_eeprom_read_system_settingsP15system_settings+0x48>
  {
    return 0;
  }

  *running_system_settings_buffer = local_buffer;
   d425e:	ac01      	add	r4, sp, #4
   d4260:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4262:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4264:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4266:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4268:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d426a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d426c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   d4270:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  return 1;
   d4274:	2001      	movs	r0, #1
   d4276:	e000      	b.n	d427a <_Z31igh_eeprom_read_system_settingsP15system_settings+0x4a>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));

  if( checksum != local_buffer.checksum)
  {
    return 0;
   d4278:	2000      	movs	r0, #0
  }

  *running_system_settings_buffer = local_buffer;
  return 1;

}
   d427a:	b011      	add	sp, #68	; 0x44
   d427c:	bd30      	pop	{r4, r5, pc}

000d427e <_Z31igh_eeprom_save_system_settingsP15system_settings>:
 * \brief Save system settings  to eeprom emulator
 * \param settings_to_save: pointer to struct to save
 * \return true or false based on write success
 */
uint8_t igh_eeprom_save_system_settings(system_settings * settings_to_save)
{
   d427e:	b510      	push	{r4, lr}
   d4280:	4604      	mov	r4, r0
   d4282:	b090      	sub	sp, #64	; 0x40
  system_settings local_buffer;
  // save the data
  EEPROM.put(SYSTEM_SETTINGS_ADDRESS, *settings_to_save);
   d4284:	f000 ff6a 	bl	d515c <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4288:	223c      	movs	r2, #60	; 0x3c
   d428a:	4621      	mov	r1, r4
   d428c:	2000      	movs	r0, #0
   d428e:	f000 f91f 	bl	d44d0 <HAL_EEPROM_Put>
  // check if data is saved
  igh_eeprom_read_system_settings(&local_buffer);
   d4292:	a801      	add	r0, sp, #4
   d4294:	f7ff ffcc 	bl	d4230 <_Z31igh_eeprom_read_system_settingsP15system_settings>

  if( local_buffer.checksum != (settings_to_save->checksum))
  {
    return 0;
   d4298:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d429c:	7823      	ldrb	r3, [r4, #0]
  }

  return 1;
}
   d429e:	1ac3      	subs	r3, r0, r3
   d42a0:	4258      	negs	r0, r3
   d42a2:	4158      	adcs	r0, r3
   d42a4:	b010      	add	sp, #64	; 0x40
   d42a6:	bd10      	pop	{r4, pc}

000d42a8 <_Z34igh_eeprom_read_threshold_settingsP10thresholds>:
 * \brief Gets threshold settings from eeprom emulator
 * \param running_thresholds: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_threshold_settings(thresholds * running_thresholds)
{
   d42a8:	b530      	push	{r4, r5, lr}
   d42aa:	b08f      	sub	sp, #60	; 0x3c
  thresholds local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d42ac:	2234      	movs	r2, #52	; 0x34
   d42ae:	2100      	movs	r1, #0
 * \brief Gets threshold settings from eeprom emulator
 * \param running_thresholds: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_threshold_settings(thresholds * running_thresholds)
{
   d42b0:	4605      	mov	r5, r0
  thresholds local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d42b2:	a801      	add	r0, sp, #4
   d42b4:	f001 f8cf 	bl	d5456 <memset>
  EEPROM.get(SYSTEM_THRESHOLDS_ADDRESS, local_buffer);
   d42b8:	f000 ff50 	bl	d515c <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d42bc:	2234      	movs	r2, #52	; 0x34
   d42be:	a901      	add	r1, sp, #4
   d42c0:	f44f 7000 	mov.w	r0, #512	; 0x200
   d42c4:	f000 f8fc 	bl	d44c0 <HAL_EEPROM_Get>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));
   d42c8:	2134      	movs	r1, #52	; 0x34
   d42ca:	a801      	add	r0, sp, #4
   d42cc:	f7ff feef 	bl	d40ae <igh_settings_calculate_checksum>
  
  if( checksum != local_buffer.checksum)
   d42d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d42d4:	4283      	cmp	r3, r0
   d42d6:	d10a      	bne.n	d42ee <_Z34igh_eeprom_read_threshold_settingsP10thresholds+0x46>
  {
    return 0;
  }
  
  *running_thresholds = local_buffer;
   d42d8:	ac01      	add	r4, sp, #4
   d42da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d42dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d42de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d42e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d42e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d42e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d42e6:	6823      	ldr	r3, [r4, #0]
   d42e8:	602b      	str	r3, [r5, #0]
  return 1;
   d42ea:	2001      	movs	r0, #1
   d42ec:	e000      	b.n	d42f0 <_Z34igh_eeprom_read_threshold_settingsP10thresholds+0x48>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));
  
  if( checksum != local_buffer.checksum)
  {
    return 0;
   d42ee:	2000      	movs	r0, #0
  }
  
  *running_thresholds = local_buffer;
  return 1;
}
   d42f0:	b00f      	add	sp, #60	; 0x3c
   d42f2:	bd30      	pop	{r4, r5, pc}

000d42f4 <_Z34igh_eeprom_save_threshold_settingsP10thresholds>:
 * \brief Save threshold settings  to eeprom emulator
 * \param settings_to_save: pointer to struct to save
 * \return true or false based on write success
 */
uint8_t igh_eeprom_save_threshold_settings(thresholds * settings_to_save)
{
   d42f4:	b510      	push	{r4, lr}
   d42f6:	4604      	mov	r4, r0
   d42f8:	b08e      	sub	sp, #56	; 0x38
    thresholds local_buffer;
    // save the data
    EEPROM.put(SYSTEM_THRESHOLDS_ADDRESS, *settings_to_save);
   d42fa:	f000 ff2f 	bl	d515c <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d42fe:	2234      	movs	r2, #52	; 0x34
   d4300:	4621      	mov	r1, r4
   d4302:	f44f 7000 	mov.w	r0, #512	; 0x200
   d4306:	f000 f8e3 	bl	d44d0 <HAL_EEPROM_Put>
    // check if data is saved
    igh_eeprom_read_threshold_settings(&local_buffer);
   d430a:	a801      	add	r0, sp, #4
   d430c:	f7ff ffcc 	bl	d42a8 <_Z34igh_eeprom_read_threshold_settingsP10thresholds>

    if( local_buffer.checksum != (settings_to_save->checksum))
    {
        return 0;
   d4310:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d4314:	7823      	ldrb	r3, [r4, #0]
    }

    return 1;
}
   d4316:	1ac3      	subs	r3, r0, r3
   d4318:	4258      	negs	r0, r3
   d431a:	4158      	adcs	r0, r3
   d431c:	b00e      	add	sp, #56	; 0x38
   d431e:	bd10      	pop	{r4, pc}

000d4320 <_Z21igh_eeprom_get_errorsPm>:
 * \brief Gets errors stored in eeprom
 * \param error_bit_field; uint32 bit fiel to populate
 * \return void
 */
void igh_eeprom_get_errors(uint32_t * error_bit_field)
{
   d4320:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t _error = 0;
   d4322:	ac02      	add	r4, sp, #8
   d4324:	2300      	movs	r3, #0
   d4326:	f844 3d04 	str.w	r3, [r4, #-4]!
 * \brief Gets errors stored in eeprom
 * \param error_bit_field; uint32 bit fiel to populate
 * \return void
 */
void igh_eeprom_get_errors(uint32_t * error_bit_field)
{
   d432a:	4605      	mov	r5, r0
    uint32_t _error = 0;
    EEPROM.get(SYSTEM_ERRORS_ADDRESS, _error);
   d432c:	f000 ff16 	bl	d515c <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4330:	2204      	movs	r2, #4
   d4332:	4621      	mov	r1, r4
   d4334:	f44f 6080 	mov.w	r0, #1024	; 0x400
   d4338:	f000 f8c2 	bl	d44c0 <HAL_EEPROM_Get>
    *error_bit_field = _error;
   d433c:	9b01      	ldr	r3, [sp, #4]
   d433e:	602b      	str	r3, [r5, #0]
}
   d4340:	b003      	add	sp, #12
   d4342:	bd30      	pop	{r4, r5, pc}

000d4344 <_Z16igh_eeproom_testv>:
 * \brief Tests that we can read and write to the EEPROM just fine
 * \param void
 * \return true or false
 */
uint8_t igh_eeproom_test(void)
{
   d4344:	b5f0      	push	{r4, r5, r6, r7, lr}
    thresholds test_thresholds;
    system_settings test_system_settings;

    uint8_t test_shield_id[12] = {0xe0,0x0f,0xce,0x68,0x9a,0x75,0x47,0x05,0xe7,0x9a,0x0e,0x37};
   d4346:	4a42      	ldr	r2, [pc, #264]	; (d4450 <_Z16igh_eeproom_testv+0x10c>)
 * \brief Tests that we can read and write to the EEPROM just fine
 * \param void
 * \return true or false
 */
uint8_t igh_eeproom_test(void)
{
   d4348:	b0a5      	sub	sp, #148	; 0x94
    thresholds test_thresholds;
    system_settings test_system_settings;

    uint8_t test_shield_id[12] = {0xe0,0x0f,0xce,0x68,0x9a,0x75,0x47,0x05,0xe7,0x9a,0x0e,0x37};
   d434a:	6810      	ldr	r0, [r2, #0]
   d434c:	6851      	ldr	r1, [r2, #4]
   d434e:	ab01      	add	r3, sp, #4
   d4350:	c303      	stmia	r3!, {r0, r1}
   d4352:	6890      	ldr	r0, [r2, #8]
   d4354:	6018      	str	r0, [r3, #0]
    uint8_t test_broker[] = "test.broker.com";
   d4356:	4b3f      	ldr	r3, [pc, #252]	; (d4454 <_Z16igh_eeproom_testv+0x110>)
   d4358:	aa04      	add	r2, sp, #16
   d435a:	f103 0710 	add.w	r7, r3, #16
   d435e:	ae01      	add	r6, sp, #4
   d4360:	4615      	mov	r5, r2
   d4362:	6818      	ldr	r0, [r3, #0]
   d4364:	6859      	ldr	r1, [r3, #4]
   d4366:	4614      	mov	r4, r2
   d4368:	c403      	stmia	r4!, {r0, r1}
   d436a:	3308      	adds	r3, #8
   d436c:	42bb      	cmp	r3, r7
   d436e:	4622      	mov	r2, r4
   d4370:	d1f7      	bne.n	d4362 <_Z16igh_eeproom_testv+0x1e>

    memset(&test_system_settings, 0, sizeof(test_system_settings));
   d4372:	223c      	movs	r2, #60	; 0x3c
   d4374:	2100      	movs	r1, #0
   d4376:	a815      	add	r0, sp, #84	; 0x54
   d4378:	f001 f86d 	bl	d5456 <memset>
    memset(&test_thresholds, 0, sizeof(test_thresholds));
   d437c:	2234      	movs	r2, #52	; 0x34
   d437e:	2100      	movs	r1, #0
   d4380:	a808      	add	r0, sp, #32
   d4382:	f001 f868 	bl	d5456 <memset>

    memcpy(test_system_settings.serial_number, test_shield_id, 12);
   d4386:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   d438a:	ab18      	add	r3, sp, #96	; 0x60
   d438c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    memcpy(test_system_settings.broker, test_broker, sizeof(test_broker));
   d4390:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   d4394:	ac1b      	add	r4, sp, #108	; 0x6c
   d4396:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    test_system_settings.op_state = OP_INACTIVE;
    test_system_settings.reporting_interval = 0x11111111;
   d439a:	f04f 3511 	mov.w	r5, #286331153	; 0x11111111
    test_system_settings.data_resolution = 0x11111111;
    test_system_settings.broker_port = 0x1111;
   d439e:	f241 1411 	movw	r4, #4369	; 0x1111
    test_system_settings.checksum = igh_settings_calculate_checksum(&test_system_settings, sizeof(test_system_settings));
   d43a2:	213c      	movs	r1, #60	; 0x3c
   d43a4:	a815      	add	r0, sp, #84	; 0x54
    memcpy(test_system_settings.serial_number, test_shield_id, 12);
    memcpy(test_system_settings.broker, test_broker, sizeof(test_broker));
    test_system_settings.op_state = OP_INACTIVE;
    test_system_settings.reporting_interval = 0x11111111;
    test_system_settings.data_resolution = 0x11111111;
    test_system_settings.broker_port = 0x1111;
   d43a6:	f8ad 408c 	strh.w	r4, [sp, #140]	; 0x8c
    memset(&test_thresholds, 0, sizeof(test_thresholds));

    memcpy(test_system_settings.serial_number, test_shield_id, 12);
    memcpy(test_system_settings.broker, test_broker, sizeof(test_broker));
    test_system_settings.op_state = OP_INACTIVE;
    test_system_settings.reporting_interval = 0x11111111;
   d43aa:	9516      	str	r5, [sp, #88]	; 0x58
    test_system_settings.data_resolution = 0x11111111;
   d43ac:	9517      	str	r5, [sp, #92]	; 0x5c
    test_system_settings.broker_port = 0x1111;
    test_system_settings.checksum = igh_settings_calculate_checksum(&test_system_settings, sizeof(test_system_settings));
   d43ae:	f7ff fe7e 	bl	d40ae <igh_settings_calculate_checksum>
    test_thresholds.shield_battery_level_high = 0x1111;
    test_thresholds.spear_battery_level_low = 0x1111;
    test_thresholds.spear_battery_level_high = 0x1111;
    test_thresholds.water_dispensed_period_high = 0x11111111;
    test_thresholds.water_dispensed_period_low = 0x11111111;
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));
   d43b2:	2134      	movs	r1, #52	; 0x34
    memcpy(test_system_settings.broker, test_broker, sizeof(test_broker));
    test_system_settings.op_state = OP_INACTIVE;
    test_system_settings.reporting_interval = 0x11111111;
    test_system_settings.data_resolution = 0x11111111;
    test_system_settings.broker_port = 0x1111;
    test_system_settings.checksum = igh_settings_calculate_checksum(&test_system_settings, sizeof(test_system_settings));
   d43b4:	f88d 0054 	strb.w	r0, [sp, #84]	; 0x54
    test_thresholds.shield_battery_level_high = 0x1111;
    test_thresholds.spear_battery_level_low = 0x1111;
    test_thresholds.spear_battery_level_high = 0x1111;
    test_thresholds.water_dispensed_period_high = 0x11111111;
    test_thresholds.water_dispensed_period_low = 0x11111111;
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));
   d43b8:	a808      	add	r0, sp, #32
    test_system_settings.reporting_interval = 0x11111111;
    test_system_settings.data_resolution = 0x11111111;
    test_system_settings.broker_port = 0x1111;
    test_system_settings.checksum = igh_settings_calculate_checksum(&test_system_settings, sizeof(test_system_settings));

    test_thresholds.soil_moisture_low = 0x1111;
   d43ba:	f8ad 4022 	strh.w	r4, [sp, #34]	; 0x22
    test_thresholds.soil_moisture_high = 0x1111;
   d43be:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    test_thresholds.air_humidity_low = 0x1111;
   d43c2:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
    test_thresholds.air_humidity_high = 0x1111;
   d43c6:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
    test_thresholds.soil_humidity_low = 0x1111;
   d43ca:	f8ad 4026 	strh.w	r4, [sp, #38]	; 0x26
    test_thresholds.soil_humidity_high = 0x1111;
   d43ce:	f8ad 4040 	strh.w	r4, [sp, #64]	; 0x40
    test_thresholds.carbon_dioxide_low = 0x1111;
   d43d2:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
    test_thresholds.carbon_dioxide_high = 0x1111;
   d43d6:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
    test_thresholds.air_temperature_low = 0x1111;
   d43da:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
    test_thresholds.air_temperature_high = 0x1111;
   d43de:	f8ad 4044 	strh.w	r4, [sp, #68]	; 0x44
    test_thresholds.soil_temperature_low = 0x1111;
   d43e2:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
    test_thresholds.soil_temperature_high = 0x1111;
   d43e6:	f8ad 4046 	strh.w	r4, [sp, #70]	; 0x46
    test_thresholds.soil_npk_low = 0x1111;
   d43ea:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    test_thresholds.soil_npk_high = 0x1111;
   d43ee:	f8ad 4048 	strh.w	r4, [sp, #72]	; 0x48
    test_thresholds.light_intensity_high = 0x1111;
   d43f2:	f8ad 404a 	strh.w	r4, [sp, #74]	; 0x4a
    test_thresholds.light_intensity_low = 0x1111;
   d43f6:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
    test_thresholds.shield_battery_level_low = 0x1111;
   d43fa:	f8ad 4032 	strh.w	r4, [sp, #50]	; 0x32
    test_thresholds.shield_battery_level_high = 0x1111;
   d43fe:	f8ad 404c 	strh.w	r4, [sp, #76]	; 0x4c
    test_thresholds.spear_battery_level_low = 0x1111;
   d4402:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    test_thresholds.spear_battery_level_high = 0x1111;
   d4406:	f8ad 404e 	strh.w	r4, [sp, #78]	; 0x4e
    test_thresholds.water_dispensed_period_high = 0x11111111;
   d440a:	9514      	str	r5, [sp, #80]	; 0x50
    test_thresholds.water_dispensed_period_low = 0x11111111;
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));

    uint32_t test_error = 0xAAAAAAAA;
    uint32_t ret_test_error = 0;
   d440c:	ac24      	add	r4, sp, #144	; 0x90
    test_thresholds.shield_battery_level_low = 0x1111;
    test_thresholds.shield_battery_level_high = 0x1111;
    test_thresholds.spear_battery_level_low = 0x1111;
    test_thresholds.spear_battery_level_high = 0x1111;
    test_thresholds.water_dispensed_period_high = 0x11111111;
    test_thresholds.water_dispensed_period_low = 0x11111111;
   d440e:	950e      	str	r5, [sp, #56]	; 0x38
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));
   d4410:	f7ff fe4d 	bl	d40ae <igh_settings_calculate_checksum>

    uint32_t test_error = 0xAAAAAAAA;
    uint32_t ret_test_error = 0;
   d4414:	2300      	movs	r3, #0
   d4416:	f844 3d90 	str.w	r3, [r4, #-144]!
    test_thresholds.shield_battery_level_high = 0x1111;
    test_thresholds.spear_battery_level_low = 0x1111;
    test_thresholds.spear_battery_level_high = 0x1111;
    test_thresholds.water_dispensed_period_high = 0x11111111;
    test_thresholds.water_dispensed_period_low = 0x11111111;
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));
   d441a:	f88d 0020 	strb.w	r0, [sp, #32]

    uint32_t test_error = 0xAAAAAAAA;
    uint32_t ret_test_error = 0;
    igh_eeprom_update_errors(test_error);
   d441e:	f04f 30aa 	mov.w	r0, #2863311530	; 0xaaaaaaaa
   d4422:	f7ff fef7 	bl	d4214 <_Z24igh_eeprom_update_errorsm>
    igh_eeprom_get_errors(&ret_test_error);
   d4426:	4620      	mov	r0, r4
   d4428:	f7ff ff7a 	bl	d4320 <_Z21igh_eeprom_get_errorsPm>
    
    uint8_t _ret;

    return igh_eeprom_save_system_settings(&test_system_settings)
   d442c:	a815      	add	r0, sp, #84	; 0x54
   d442e:	f7ff ff26 	bl	d427e <_Z31igh_eeprom_save_system_settingsP15system_settings>
           && igh_eeprom_save_threshold_settings(&test_thresholds)
           && (ret_test_error == test_error);
   d4432:	b908      	cbnz	r0, d4438 <_Z16igh_eeproom_testv+0xf4>
   d4434:	2000      	movs	r0, #0
   d4436:	e009      	b.n	d444c <_Z16igh_eeproom_testv+0x108>
    igh_eeprom_get_errors(&ret_test_error);
    
    uint8_t _ret;

    return igh_eeprom_save_system_settings(&test_system_settings)
           && igh_eeprom_save_threshold_settings(&test_thresholds)
   d4438:	a808      	add	r0, sp, #32
   d443a:	f7ff ff5b 	bl	d42f4 <_Z34igh_eeprom_save_threshold_settingsP10thresholds>
   d443e:	2800      	cmp	r0, #0
   d4440:	d0f8      	beq.n	d4434 <_Z16igh_eeproom_testv+0xf0>
           && (ret_test_error == test_error);
   d4442:	9800      	ldr	r0, [sp, #0]
   d4444:	f1a0 33aa 	sub.w	r3, r0, #2863311530	; 0xaaaaaaaa
   d4448:	4258      	negs	r0, r3
   d444a:	4158      	adcs	r0, r3
}
   d444c:	b025      	add	sp, #148	; 0x94
   d444e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4450:	000d5521 	.word	0x000d5521
   d4454:	000d552d 	.word	0x000d552d

000d4458 <_GLOBAL__sub_I__Z31igh_eeprom_save_system_settingsP15system_settings>:
   d4458:	f000 b812 	b.w	d4480 <HAL_Pin_Map>

000d445c <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
   d445c:	f000 b810 	b.w	d4480 <HAL_Pin_Map>

000d4460 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4460:	b508      	push	{r3, lr}
   d4462:	4b02      	ldr	r3, [pc, #8]	; (d446c <netdb_freeaddrinfo+0xc>)
   d4464:	681b      	ldr	r3, [r3, #0]
   d4466:	689b      	ldr	r3, [r3, #8]
   d4468:	9301      	str	r3, [sp, #4]
   d446a:	bd08      	pop	{r3, pc}
   d446c:	00030268 	.word	0x00030268

000d4470 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4470:	b508      	push	{r3, lr}
   d4472:	4b02      	ldr	r3, [pc, #8]	; (d447c <netdb_getaddrinfo+0xc>)
   d4474:	681b      	ldr	r3, [r3, #0]
   d4476:	68db      	ldr	r3, [r3, #12]
   d4478:	9301      	str	r3, [sp, #4]
   d447a:	bd08      	pop	{r3, pc}
   d447c:	00030268 	.word	0x00030268

000d4480 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4480:	b508      	push	{r3, lr}
   d4482:	4b02      	ldr	r3, [pc, #8]	; (d448c <HAL_Pin_Map+0xc>)
   d4484:	681b      	ldr	r3, [r3, #0]
   d4486:	681b      	ldr	r3, [r3, #0]
   d4488:	9301      	str	r3, [sp, #4]
   d448a:	bd08      	pop	{r3, pc}
   d448c:	0003022c 	.word	0x0003022c

000d4490 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4490:	b508      	push	{r3, lr}
   d4492:	4b02      	ldr	r3, [pc, #8]	; (d449c <HAL_RNG_GetRandomNumber+0xc>)
   d4494:	681b      	ldr	r3, [r3, #0]
   d4496:	685b      	ldr	r3, [r3, #4]
   d4498:	9301      	str	r3, [sp, #4]
   d449a:	bd08      	pop	{r3, pc}
   d449c:	00030218 	.word	0x00030218

000d44a0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d44a0:	b508      	push	{r3, lr}
   d44a2:	4b02      	ldr	r3, [pc, #8]	; (d44ac <HAL_Timer_Get_Milli_Seconds+0xc>)
   d44a4:	681b      	ldr	r3, [r3, #0]
   d44a6:	695b      	ldr	r3, [r3, #20]
   d44a8:	9301      	str	r3, [sp, #4]
   d44aa:	bd08      	pop	{r3, pc}
   d44ac:	00030218 	.word	0x00030218

000d44b0 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d44b0:	b508      	push	{r3, lr}
   d44b2:	4b02      	ldr	r3, [pc, #8]	; (d44bc <HAL_EEPROM_Init+0xc>)
   d44b4:	681b      	ldr	r3, [r3, #0]
   d44b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d44b8:	9301      	str	r3, [sp, #4]
   d44ba:	bd08      	pop	{r3, pc}
   d44bc:	00030218 	.word	0x00030218

000d44c0 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d44c0:	b508      	push	{r3, lr}
   d44c2:	4b02      	ldr	r3, [pc, #8]	; (d44cc <HAL_EEPROM_Get+0xc>)
   d44c4:	681b      	ldr	r3, [r3, #0]
   d44c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d44c8:	9301      	str	r3, [sp, #4]
   d44ca:	bd08      	pop	{r3, pc}
   d44cc:	00030218 	.word	0x00030218

000d44d0 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d44d0:	b508      	push	{r3, lr}
   d44d2:	4b02      	ldr	r3, [pc, #8]	; (d44dc <HAL_EEPROM_Put+0xc>)
   d44d4:	681b      	ldr	r3, [r3, #0]
   d44d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d44d8:	9301      	str	r3, [sp, #4]
   d44da:	bd08      	pop	{r3, pc}
   d44dc:	00030218 	.word	0x00030218

000d44e0 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d44e0:	b508      	push	{r3, lr}
   d44e2:	4b02      	ldr	r3, [pc, #8]	; (d44ec <os_thread_is_current+0xc>)
   d44e4:	681b      	ldr	r3, [r3, #0]
   d44e6:	689b      	ldr	r3, [r3, #8]
   d44e8:	9301      	str	r3, [sp, #4]
   d44ea:	bd08      	pop	{r3, pc}
   d44ec:	00030248 	.word	0x00030248

000d44f0 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d44f0:	b508      	push	{r3, lr}
   d44f2:	4b02      	ldr	r3, [pc, #8]	; (d44fc <os_thread_join+0xc>)
   d44f4:	681b      	ldr	r3, [r3, #0]
   d44f6:	691b      	ldr	r3, [r3, #16]
   d44f8:	9301      	str	r3, [sp, #4]
   d44fa:	bd08      	pop	{r3, pc}
   d44fc:	00030248 	.word	0x00030248

000d4500 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4500:	b508      	push	{r3, lr}
   d4502:	4b02      	ldr	r3, [pc, #8]	; (d450c <os_thread_cleanup+0xc>)
   d4504:	681b      	ldr	r3, [r3, #0]
   d4506:	695b      	ldr	r3, [r3, #20]
   d4508:	9301      	str	r3, [sp, #4]
   d450a:	bd08      	pop	{r3, pc}
   d450c:	00030248 	.word	0x00030248

000d4510 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4510:	b508      	push	{r3, lr}
   d4512:	4b02      	ldr	r3, [pc, #8]	; (d451c <os_mutex_recursive_create+0xc>)
   d4514:	681b      	ldr	r3, [r3, #0]
   d4516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4518:	9301      	str	r3, [sp, #4]
   d451a:	bd08      	pop	{r3, pc}
   d451c:	00030248 	.word	0x00030248

000d4520 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4520:	b508      	push	{r3, lr}
   d4522:	4b02      	ldr	r3, [pc, #8]	; (d452c <os_mutex_recursive_destroy+0xc>)
   d4524:	681b      	ldr	r3, [r3, #0]
   d4526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4528:	9301      	str	r3, [sp, #4]
   d452a:	bd08      	pop	{r3, pc}
   d452c:	00030248 	.word	0x00030248

000d4530 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4530:	b508      	push	{r3, lr}
   d4532:	4b02      	ldr	r3, [pc, #8]	; (d453c <inet_inet_ntop+0xc>)
   d4534:	681b      	ldr	r3, [r3, #0]
   d4536:	695b      	ldr	r3, [r3, #20]
   d4538:	9301      	str	r3, [sp, #4]
   d453a:	bd08      	pop	{r3, pc}
   d453c:	00030264 	.word	0x00030264

000d4540 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4540:	b508      	push	{r3, lr}
   d4542:	4b02      	ldr	r3, [pc, #8]	; (d454c <HAL_USART_Init+0xc>)
   d4544:	681b      	ldr	r3, [r3, #0]
   d4546:	681b      	ldr	r3, [r3, #0]
   d4548:	9301      	str	r3, [sp, #4]
   d454a:	bd08      	pop	{r3, pc}
   d454c:	0003023c 	.word	0x0003023c

000d4550 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4550:	b508      	push	{r3, lr}
   d4552:	4b02      	ldr	r3, [pc, #8]	; (d455c <HAL_USART_Write_Data+0xc>)
   d4554:	681b      	ldr	r3, [r3, #0]
   d4556:	68db      	ldr	r3, [r3, #12]
   d4558:	9301      	str	r3, [sp, #4]
   d455a:	bd08      	pop	{r3, pc}
   d455c:	0003023c 	.word	0x0003023c

000d4560 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4560:	b508      	push	{r3, lr}
   d4562:	4b02      	ldr	r3, [pc, #8]	; (d456c <HAL_USART_Available_Data+0xc>)
   d4564:	681b      	ldr	r3, [r3, #0]
   d4566:	691b      	ldr	r3, [r3, #16]
   d4568:	9301      	str	r3, [sp, #4]
   d456a:	bd08      	pop	{r3, pc}
   d456c:	0003023c 	.word	0x0003023c

000d4570 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4570:	b508      	push	{r3, lr}
   d4572:	4b02      	ldr	r3, [pc, #8]	; (d457c <HAL_USART_Read_Data+0xc>)
   d4574:	681b      	ldr	r3, [r3, #0]
   d4576:	695b      	ldr	r3, [r3, #20]
   d4578:	9301      	str	r3, [sp, #4]
   d457a:	bd08      	pop	{r3, pc}
   d457c:	0003023c 	.word	0x0003023c

000d4580 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4580:	b508      	push	{r3, lr}
   d4582:	4b02      	ldr	r3, [pc, #8]	; (d458c <HAL_USART_Peek_Data+0xc>)
   d4584:	681b      	ldr	r3, [r3, #0]
   d4586:	699b      	ldr	r3, [r3, #24]
   d4588:	9301      	str	r3, [sp, #4]
   d458a:	bd08      	pop	{r3, pc}
   d458c:	0003023c 	.word	0x0003023c

000d4590 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4590:	b508      	push	{r3, lr}
   d4592:	4b02      	ldr	r3, [pc, #8]	; (d459c <HAL_USART_Flush_Data+0xc>)
   d4594:	681b      	ldr	r3, [r3, #0]
   d4596:	69db      	ldr	r3, [r3, #28]
   d4598:	9301      	str	r3, [sp, #4]
   d459a:	bd08      	pop	{r3, pc}
   d459c:	0003023c 	.word	0x0003023c

000d45a0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d45a0:	b508      	push	{r3, lr}
   d45a2:	4b02      	ldr	r3, [pc, #8]	; (d45ac <HAL_USART_Available_Data_For_Write+0xc>)
   d45a4:	681b      	ldr	r3, [r3, #0]
   d45a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d45a8:	9301      	str	r3, [sp, #4]
   d45aa:	bd08      	pop	{r3, pc}
   d45ac:	0003023c 	.word	0x0003023c

000d45b0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d45b0:	b508      	push	{r3, lr}
   d45b2:	4b02      	ldr	r3, [pc, #8]	; (d45bc <HAL_USB_USART_Init+0xc>)
   d45b4:	681b      	ldr	r3, [r3, #0]
   d45b6:	681b      	ldr	r3, [r3, #0]
   d45b8:	9301      	str	r3, [sp, #4]
   d45ba:	bd08      	pop	{r3, pc}
   d45bc:	0003024c 	.word	0x0003024c

000d45c0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d45c0:	b508      	push	{r3, lr}
   d45c2:	4b02      	ldr	r3, [pc, #8]	; (d45cc <HAL_USB_USART_Begin+0xc>)
   d45c4:	681b      	ldr	r3, [r3, #0]
   d45c6:	685b      	ldr	r3, [r3, #4]
   d45c8:	9301      	str	r3, [sp, #4]
   d45ca:	bd08      	pop	{r3, pc}
   d45cc:	0003024c 	.word	0x0003024c

000d45d0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d45d0:	b508      	push	{r3, lr}
   d45d2:	4b02      	ldr	r3, [pc, #8]	; (d45dc <HAL_USB_USART_Available_Data+0xc>)
   d45d4:	681b      	ldr	r3, [r3, #0]
   d45d6:	691b      	ldr	r3, [r3, #16]
   d45d8:	9301      	str	r3, [sp, #4]
   d45da:	bd08      	pop	{r3, pc}
   d45dc:	0003024c 	.word	0x0003024c

000d45e0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d45e0:	b508      	push	{r3, lr}
   d45e2:	4b02      	ldr	r3, [pc, #8]	; (d45ec <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d45e4:	681b      	ldr	r3, [r3, #0]
   d45e6:	695b      	ldr	r3, [r3, #20]
   d45e8:	9301      	str	r3, [sp, #4]
   d45ea:	bd08      	pop	{r3, pc}
   d45ec:	0003024c 	.word	0x0003024c

000d45f0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d45f0:	b508      	push	{r3, lr}
   d45f2:	4b02      	ldr	r3, [pc, #8]	; (d45fc <HAL_USB_USART_Receive_Data+0xc>)
   d45f4:	681b      	ldr	r3, [r3, #0]
   d45f6:	699b      	ldr	r3, [r3, #24]
   d45f8:	9301      	str	r3, [sp, #4]
   d45fa:	bd08      	pop	{r3, pc}
   d45fc:	0003024c 	.word	0x0003024c

000d4600 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4600:	b508      	push	{r3, lr}
   d4602:	4b02      	ldr	r3, [pc, #8]	; (d460c <HAL_USB_USART_Send_Data+0xc>)
   d4604:	681b      	ldr	r3, [r3, #0]
   d4606:	69db      	ldr	r3, [r3, #28]
   d4608:	9301      	str	r3, [sp, #4]
   d460a:	bd08      	pop	{r3, pc}
   d460c:	0003024c 	.word	0x0003024c

000d4610 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4610:	b508      	push	{r3, lr}
   d4612:	4b02      	ldr	r3, [pc, #8]	; (d461c <HAL_USB_USART_Flush_Data+0xc>)
   d4614:	681b      	ldr	r3, [r3, #0]
   d4616:	6a1b      	ldr	r3, [r3, #32]
   d4618:	9301      	str	r3, [sp, #4]
   d461a:	bd08      	pop	{r3, pc}
   d461c:	0003024c 	.word	0x0003024c

000d4620 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4620:	b508      	push	{r3, lr}
   d4622:	4b02      	ldr	r3, [pc, #8]	; (d462c <set_system_mode+0xc>)
   d4624:	681b      	ldr	r3, [r3, #0]
   d4626:	685b      	ldr	r3, [r3, #4]
   d4628:	9301      	str	r3, [sp, #4]
   d462a:	bd08      	pop	{r3, pc}
   d462c:	00030220 	.word	0x00030220

000d4630 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d4630:	b508      	push	{r3, lr}
   d4632:	4b02      	ldr	r3, [pc, #8]	; (d463c <system_thread_set_state+0xc>)
   d4634:	681b      	ldr	r3, [r3, #0]
   d4636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4638:	9301      	str	r3, [sp, #4]
   d463a:	bd08      	pop	{r3, pc}
   d463c:	00030220 	.word	0x00030220

000d4640 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4640:	b508      	push	{r3, lr}
   d4642:	4b03      	ldr	r3, [pc, #12]	; (d4650 <system_ctrl_set_app_request_handler+0x10>)
   d4644:	681b      	ldr	r3, [r3, #0]
   d4646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d464a:	9301      	str	r3, [sp, #4]
   d464c:	bd08      	pop	{r3, pc}
   d464e:	0000      	.short	0x0000
   d4650:	00030220 	.word	0x00030220

000d4654 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b03      	ldr	r3, [pc, #12]	; (d4664 <system_ctrl_set_result+0x10>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d465e:	9301      	str	r3, [sp, #4]
   d4660:	bd08      	pop	{r3, pc}
   d4662:	0000      	.short	0x0000
   d4664:	00030220 	.word	0x00030220

000d4668 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4668:	b508      	push	{r3, lr}
   d466a:	4b02      	ldr	r3, [pc, #8]	; (d4674 <network_connect+0xc>)
   d466c:	681b      	ldr	r3, [r3, #0]
   d466e:	685b      	ldr	r3, [r3, #4]
   d4670:	9301      	str	r3, [sp, #4]
   d4672:	bd08      	pop	{r3, pc}
   d4674:	00030240 	.word	0x00030240

000d4678 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4678:	b508      	push	{r3, lr}
   d467a:	4b02      	ldr	r3, [pc, #8]	; (d4684 <network_connecting+0xc>)
   d467c:	681b      	ldr	r3, [r3, #0]
   d467e:	689b      	ldr	r3, [r3, #8]
   d4680:	9301      	str	r3, [sp, #4]
   d4682:	bd08      	pop	{r3, pc}
   d4684:	00030240 	.word	0x00030240

000d4688 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4688:	b508      	push	{r3, lr}
   d468a:	4b02      	ldr	r3, [pc, #8]	; (d4694 <network_disconnect+0xc>)
   d468c:	681b      	ldr	r3, [r3, #0]
   d468e:	68db      	ldr	r3, [r3, #12]
   d4690:	9301      	str	r3, [sp, #4]
   d4692:	bd08      	pop	{r3, pc}
   d4694:	00030240 	.word	0x00030240

000d4698 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4698:	b508      	push	{r3, lr}
   d469a:	4b02      	ldr	r3, [pc, #8]	; (d46a4 <network_ready+0xc>)
   d469c:	681b      	ldr	r3, [r3, #0]
   d469e:	691b      	ldr	r3, [r3, #16]
   d46a0:	9301      	str	r3, [sp, #4]
   d46a2:	bd08      	pop	{r3, pc}
   d46a4:	00030240 	.word	0x00030240

000d46a8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d46a8:	b508      	push	{r3, lr}
   d46aa:	4b02      	ldr	r3, [pc, #8]	; (d46b4 <network_on+0xc>)
   d46ac:	681b      	ldr	r3, [r3, #0]
   d46ae:	695b      	ldr	r3, [r3, #20]
   d46b0:	9301      	str	r3, [sp, #4]
   d46b2:	bd08      	pop	{r3, pc}
   d46b4:	00030240 	.word	0x00030240

000d46b8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d46b8:	b508      	push	{r3, lr}
   d46ba:	4b02      	ldr	r3, [pc, #8]	; (d46c4 <network_off+0xc>)
   d46bc:	681b      	ldr	r3, [r3, #0]
   d46be:	699b      	ldr	r3, [r3, #24]
   d46c0:	9301      	str	r3, [sp, #4]
   d46c2:	bd08      	pop	{r3, pc}
   d46c4:	00030240 	.word	0x00030240

000d46c8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d46c8:	b508      	push	{r3, lr}
   d46ca:	4b02      	ldr	r3, [pc, #8]	; (d46d4 <network_listen+0xc>)
   d46cc:	681b      	ldr	r3, [r3, #0]
   d46ce:	69db      	ldr	r3, [r3, #28]
   d46d0:	9301      	str	r3, [sp, #4]
   d46d2:	bd08      	pop	{r3, pc}
   d46d4:	00030240 	.word	0x00030240

000d46d8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d46d8:	b508      	push	{r3, lr}
   d46da:	4b02      	ldr	r3, [pc, #8]	; (d46e4 <network_listening+0xc>)
   d46dc:	681b      	ldr	r3, [r3, #0]
   d46de:	6a1b      	ldr	r3, [r3, #32]
   d46e0:	9301      	str	r3, [sp, #4]
   d46e2:	bd08      	pop	{r3, pc}
   d46e4:	00030240 	.word	0x00030240

000d46e8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d46e8:	b508      	push	{r3, lr}
   d46ea:	4b02      	ldr	r3, [pc, #8]	; (d46f4 <network_set_listen_timeout+0xc>)
   d46ec:	681b      	ldr	r3, [r3, #0]
   d46ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d46f0:	9301      	str	r3, [sp, #4]
   d46f2:	bd08      	pop	{r3, pc}
   d46f4:	00030240 	.word	0x00030240

000d46f8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d46f8:	b508      	push	{r3, lr}
   d46fa:	4b02      	ldr	r3, [pc, #8]	; (d4704 <network_get_listen_timeout+0xc>)
   d46fc:	681b      	ldr	r3, [r3, #0]
   d46fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4700:	9301      	str	r3, [sp, #4]
   d4702:	bd08      	pop	{r3, pc}
   d4704:	00030240 	.word	0x00030240

000d4708 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4708:	b508      	push	{r3, lr}
   d470a:	4b02      	ldr	r3, [pc, #8]	; (d4714 <spark_set_random_seed_from_cloud_handler+0xc>)
   d470c:	681b      	ldr	r3, [r3, #0]
   d470e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4710:	9301      	str	r3, [sp, #4]
   d4712:	bd08      	pop	{r3, pc}
   d4714:	00030244 	.word	0x00030244

000d4718 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4718:	b508      	push	{r3, lr}
   d471a:	4b02      	ldr	r3, [pc, #8]	; (d4724 <malloc+0xc>)
   d471c:	681b      	ldr	r3, [r3, #0]
   d471e:	681b      	ldr	r3, [r3, #0]
   d4720:	9301      	str	r3, [sp, #4]
   d4722:	bd08      	pop	{r3, pc}
   d4724:	0003021c 	.word	0x0003021c

000d4728 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4728:	b508      	push	{r3, lr}
   d472a:	4b02      	ldr	r3, [pc, #8]	; (d4734 <free+0xc>)
   d472c:	681b      	ldr	r3, [r3, #0]
   d472e:	685b      	ldr	r3, [r3, #4]
   d4730:	9301      	str	r3, [sp, #4]
   d4732:	bd08      	pop	{r3, pc}
   d4734:	0003021c 	.word	0x0003021c

000d4738 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4738:	b508      	push	{r3, lr}
   d473a:	4b02      	ldr	r3, [pc, #8]	; (d4744 <realloc+0xc>)
   d473c:	681b      	ldr	r3, [r3, #0]
   d473e:	689b      	ldr	r3, [r3, #8]
   d4740:	9301      	str	r3, [sp, #4]
   d4742:	bd08      	pop	{r3, pc}
   d4744:	0003021c 	.word	0x0003021c

000d4748 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4748:	2200      	movs	r2, #0
   d474a:	4611      	mov	r1, r2
   d474c:	6840      	ldr	r0, [r0, #4]
   d474e:	f7ff bfc3 	b.w	d46d8 <network_listening>

000d4752 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4752:	2200      	movs	r2, #0
   d4754:	4611      	mov	r1, r2
   d4756:	6840      	ldr	r0, [r0, #4]
   d4758:	f7ff bfce 	b.w	d46f8 <network_get_listen_timeout>

000d475c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d475c:	2200      	movs	r2, #0
   d475e:	6840      	ldr	r0, [r0, #4]
   d4760:	f7ff bfc2 	b.w	d46e8 <network_set_listen_timeout>

000d4764 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4764:	2200      	movs	r2, #0
   d4766:	f081 0101 	eor.w	r1, r1, #1
   d476a:	6840      	ldr	r0, [r0, #4]
   d476c:	f7ff bfac 	b.w	d46c8 <network_listen>

000d4770 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4770:	2300      	movs	r3, #0
   d4772:	461a      	mov	r2, r3
   d4774:	4619      	mov	r1, r3
   d4776:	6840      	ldr	r0, [r0, #4]
   d4778:	f7ff bf9e 	b.w	d46b8 <network_off>

000d477c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d477c:	2300      	movs	r3, #0
   d477e:	461a      	mov	r2, r3
   d4780:	4619      	mov	r1, r3
   d4782:	6840      	ldr	r0, [r0, #4]
   d4784:	f7ff bf90 	b.w	d46a8 <network_on>

000d4788 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4788:	2200      	movs	r2, #0
   d478a:	4611      	mov	r1, r2
   d478c:	6840      	ldr	r0, [r0, #4]
   d478e:	f7ff bf83 	b.w	d4698 <network_ready>

000d4792 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4792:	2200      	movs	r2, #0
   d4794:	4611      	mov	r1, r2
   d4796:	6840      	ldr	r0, [r0, #4]
   d4798:	f7ff bf6e 	b.w	d4678 <network_connecting>

000d479c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d479c:	2200      	movs	r2, #0
   d479e:	2102      	movs	r1, #2
   d47a0:	6840      	ldr	r0, [r0, #4]
   d47a2:	f7ff bf71 	b.w	d4688 <network_disconnect>

000d47a6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d47a6:	2300      	movs	r3, #0
   d47a8:	461a      	mov	r2, r3
   d47aa:	6840      	ldr	r0, [r0, #4]
   d47ac:	f7ff bf5c 	b.w	d4668 <network_connect>

000d47b0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d47b0:	4b02      	ldr	r3, [pc, #8]	; (d47bc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d47b2:	2203      	movs	r2, #3
   d47b4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d47b6:	4a02      	ldr	r2, [pc, #8]	; (d47c0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d47b8:	601a      	str	r2, [r3, #0]
   d47ba:	4770      	bx	lr
   d47bc:	2003e3c8 	.word	0x2003e3c8
   d47c0:	000d5548 	.word	0x000d5548

000d47c4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d47c4:	b510      	push	{r4, lr}
   d47c6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d47c8:	6800      	ldr	r0, [r0, #0]
   d47ca:	b118      	cbz	r0, d47d4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d47cc:	f7ff ffac 	bl	d4728 <free>
            wakeupSource_ = nullptr;
   d47d0:	2300      	movs	r3, #0
   d47d2:	6023      	str	r3, [r4, #0]
   d47d4:	bd10      	pop	{r4, pc}

000d47d6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d47d6:	b510      	push	{r4, lr}
   d47d8:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d47da:	f7ff fff3 	bl	d47c4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d47de:	4620      	mov	r0, r4
   d47e0:	bd10      	pop	{r4, pc}
	...

000d47e4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d47e4:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d47e6:	4c09      	ldr	r4, [pc, #36]	; (d480c <_GLOBAL__sub_I_System+0x28>)
   d47e8:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d47ea:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d47ee:	6020      	str	r0, [r4, #0]
   d47f0:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d47f2:	71a0      	strb	r0, [r4, #6]
   d47f4:	8120      	strh	r0, [r4, #8]
   d47f6:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d47f8:	f7ff ff12 	bl	d4620 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d47fc:	4620      	mov	r0, r4
   d47fe:	4a04      	ldr	r2, [pc, #16]	; (d4810 <_GLOBAL__sub_I_System+0x2c>)
   d4800:	4904      	ldr	r1, [pc, #16]	; (d4814 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4806:	f000 bcbd 	b.w	d5184 <__aeabi_atexit>
   d480a:	bf00      	nop
   d480c:	2003e3d0 	.word	0x2003e3d0
   d4810:	2003e3c4 	.word	0x2003e3c4
   d4814:	000d47d7 	.word	0x000d47d7

000d4818 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4818:	b510      	push	{r4, lr}
   d481a:	4604      	mov	r4, r0
{
	free(buffer);
   d481c:	6800      	ldr	r0, [r0, #0]
   d481e:	f7ff ff83 	bl	d4728 <free>
}
   d4822:	4620      	mov	r0, r4
   d4824:	bd10      	pop	{r4, pc}

000d4826 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4826:	b510      	push	{r4, lr}
   d4828:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d482a:	6800      	ldr	r0, [r0, #0]
   d482c:	b108      	cbz	r0, d4832 <_ZN6String10invalidateEv+0xc>
   d482e:	f7ff ff7b 	bl	d4728 <free>
	buffer = NULL;
   d4832:	2300      	movs	r3, #0
   d4834:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4836:	60a3      	str	r3, [r4, #8]
   d4838:	6063      	str	r3, [r4, #4]
   d483a:	bd10      	pop	{r4, pc}

000d483c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d483c:	b538      	push	{r3, r4, r5, lr}
   d483e:	4604      	mov	r4, r0
   d4840:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4842:	6800      	ldr	r0, [r0, #0]
   d4844:	3101      	adds	r1, #1
   d4846:	f7ff ff77 	bl	d4738 <realloc>
	if (newbuffer) {
   d484a:	b110      	cbz	r0, d4852 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d484c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4850:	2001      	movs	r0, #1
	}
	return 0;
}
   d4852:	bd38      	pop	{r3, r4, r5, pc}

000d4854 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4854:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4856:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4858:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d485a:	b113      	cbz	r3, d4862 <_ZN6String7reserveEj+0xe>
   d485c:	6843      	ldr	r3, [r0, #4]
   d485e:	428b      	cmp	r3, r1
   d4860:	d207      	bcs.n	d4872 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4862:	4620      	mov	r0, r4
   d4864:	f7ff ffea 	bl	d483c <_ZN6String12changeBufferEj>
   d4868:	b120      	cbz	r0, d4874 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d486a:	68a3      	ldr	r3, [r4, #8]
   d486c:	b90b      	cbnz	r3, d4872 <_ZN6String7reserveEj+0x1e>
   d486e:	6822      	ldr	r2, [r4, #0]
   d4870:	7013      	strb	r3, [r2, #0]
   d4872:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4874:	bd10      	pop	{r4, pc}

000d4876 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4876:	b570      	push	{r4, r5, r6, lr}
   d4878:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d487a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d487c:	4604      	mov	r4, r0
   d487e:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4880:	f7ff ffe8 	bl	d4854 <_ZN6String7reserveEj>
   d4884:	b918      	cbnz	r0, d488e <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4886:	4620      	mov	r0, r4
   d4888:	f7ff ffcd 	bl	d4826 <_ZN6String10invalidateEv>
		return *this;
   d488c:	e009      	b.n	d48a2 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d488e:	462a      	mov	r2, r5
   d4890:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4892:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4894:	6820      	ldr	r0, [r4, #0]
   d4896:	f000 fdd3 	bl	d5440 <memcpy>
	buffer[len] = 0;
   d489a:	6822      	ldr	r2, [r4, #0]
   d489c:	68a3      	ldr	r3, [r4, #8]
   d489e:	2100      	movs	r1, #0
   d48a0:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d48a2:	4620      	mov	r0, r4
   d48a4:	bd70      	pop	{r4, r5, r6, pc}

000d48a6 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d48a6:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d48a8:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d48aa:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d48ac:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d48ae:	6043      	str	r3, [r0, #4]
	len = 0;
   d48b0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d48b2:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d48b4:	460d      	mov	r5, r1
   d48b6:	b139      	cbz	r1, d48c8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d48b8:	4608      	mov	r0, r1
   d48ba:	f000 fdfd 	bl	d54b8 <strlen>
   d48be:	4629      	mov	r1, r5
   d48c0:	4602      	mov	r2, r0
   d48c2:	4620      	mov	r0, r4
   d48c4:	f7ff ffd7 	bl	d4876 <_ZN6String4copyEPKcj>
}
   d48c8:	4620      	mov	r0, r4
   d48ca:	bd38      	pop	{r3, r4, r5, pc}

000d48cc <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d48cc:	b510      	push	{r4, lr}
   d48ce:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d48d0:	6800      	ldr	r0, [r0, #0]
   d48d2:	b108      	cbz	r0, d48d8 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d48d4:	f7ff fe24 	bl	d4520 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d48d8:	4620      	mov	r0, r4
   d48da:	bd10      	pop	{r4, pc}

000d48dc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d48dc:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d48de:	4c06      	ldr	r4, [pc, #24]	; (d48f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d48e0:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d48e2:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d48e4:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d48e6:	f7ff fe13 	bl	d4510 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d48ea:	4620      	mov	r0, r4
   d48ec:	4a03      	ldr	r2, [pc, #12]	; (d48fc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d48ee:	4904      	ldr	r1, [pc, #16]	; (d4900 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d48f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d48f4:	f000 bc46 	b.w	d5184 <__aeabi_atexit>
   d48f8:	2003e3dc 	.word	0x2003e3dc
   d48fc:	2003e3c4 	.word	0x2003e3c4
   d4900:	000d48cd 	.word	0x000d48cd

000d4904 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4906:	4606      	mov	r6, r0
   d4908:	460d      	mov	r5, r1
   d490a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d490c:	2400      	movs	r4, #0
  while (size--) {
   d490e:	42bd      	cmp	r5, r7
   d4910:	d00c      	beq.n	d492c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4912:	6833      	ldr	r3, [r6, #0]
   d4914:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4918:	689b      	ldr	r3, [r3, #8]
   d491a:	4630      	mov	r0, r6
   d491c:	4798      	blx	r3
     if (chunk>=0)
   d491e:	2800      	cmp	r0, #0
   d4920:	db01      	blt.n	d4926 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4922:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4924:	e7f3      	b.n	d490e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4926:	2c00      	cmp	r4, #0
   d4928:	bf08      	it	eq
   d492a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d492c:	4620      	mov	r0, r4
   d492e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4930 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4930:	b570      	push	{r4, r5, r6, lr}
   d4932:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4934:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4936:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4938:	b149      	cbz	r1, d494e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d493a:	f000 fdbd 	bl	d54b8 <strlen>
   d493e:	682b      	ldr	r3, [r5, #0]
   d4940:	4602      	mov	r2, r0
   d4942:	4621      	mov	r1, r4
   d4944:	4628      	mov	r0, r5
   d4946:	68db      	ldr	r3, [r3, #12]
    }
   d4948:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d494c:	4718      	bx	r3
    }
   d494e:	bd70      	pop	{r4, r5, r6, pc}

000d4950 <_ZN5Print5printEPKc>:
   d4950:	b508      	push	{r3, lr}
   d4952:	f7ff ffed 	bl	d4930 <_ZN5Print5writeEPKc>
   d4956:	bd08      	pop	{r3, pc}

000d4958 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4958:	6803      	ldr	r3, [r0, #0]
   d495a:	689b      	ldr	r3, [r3, #8]
   d495c:	4718      	bx	r3

000d495e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d495e:	b530      	push	{r4, r5, lr}
   d4960:	b08b      	sub	sp, #44	; 0x2c
   d4962:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4964:	2100      	movs	r1, #0
   d4966:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d496a:	2a01      	cmp	r2, #1
   d496c:	bf98      	it	ls
   d496e:	220a      	movls	r2, #10
   d4970:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d4974:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d4978:	fb05 3312 	mls	r3, r5, r2, r3
   d497c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4980:	2b09      	cmp	r3, #9
   d4982:	bf94      	ite	ls
   d4984:	3330      	addls	r3, #48	; 0x30
   d4986:	3337      	addhi	r3, #55	; 0x37
   d4988:	b2db      	uxtb	r3, r3
   d498a:	4621      	mov	r1, r4
   d498c:	f804 3901 	strb.w	r3, [r4], #-1
   d4990:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4992:	2d00      	cmp	r5, #0
   d4994:	d1ee      	bne.n	d4974 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4996:	f7ff ffcb 	bl	d4930 <_ZN5Print5writeEPKc>
}
   d499a:	b00b      	add	sp, #44	; 0x2c
   d499c:	bd30      	pop	{r4, r5, pc}
	...

000d49a0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d49a0:	4b01      	ldr	r3, [pc, #4]	; (d49a8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d49a2:	4a02      	ldr	r2, [pc, #8]	; (d49ac <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d49a4:	601a      	str	r2, [r3, #0]
   d49a6:	4770      	bx	lr
   d49a8:	2003e3e0 	.word	0x2003e3e0
   d49ac:	000d55e7 	.word	0x000d55e7

000d49b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d49b0:	4b02      	ldr	r3, [pc, #8]	; (d49bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d49b2:	681a      	ldr	r2, [r3, #0]
   d49b4:	4b02      	ldr	r3, [pc, #8]	; (d49c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d49b6:	601a      	str	r2, [r3, #0]
   d49b8:	4770      	bx	lr
   d49ba:	bf00      	nop
   d49bc:	2003e35c 	.word	0x2003e35c
   d49c0:	2003e3e4 	.word	0x2003e3e4

000d49c4 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d49c4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d49c6:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d49c8:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d49ca:	b113      	cbz	r3, d49d2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d49cc:	2203      	movs	r2, #3
   d49ce:	4601      	mov	r1, r0
   d49d0:	4798      	blx	r3
    }
   d49d2:	4620      	mov	r0, r4
   d49d4:	bd10      	pop	{r4, pc}

000d49d6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d49d6:	b510      	push	{r4, lr}
   d49d8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d49da:	f7ff fff3 	bl	d49c4 <_ZNSt14_Function_baseD1Ev>
   d49de:	4620      	mov	r0, r4
   d49e0:	bd10      	pop	{r4, pc}
	...

000d49e4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d49e4:	4803      	ldr	r0, [pc, #12]	; (d49f4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d49e6:	4a04      	ldr	r2, [pc, #16]	; (d49f8 <_GLOBAL__sub_I_RGB+0x14>)
   d49e8:	4904      	ldr	r1, [pc, #16]	; (d49fc <_GLOBAL__sub_I_RGB+0x18>)
   d49ea:	2300      	movs	r3, #0
   d49ec:	6083      	str	r3, [r0, #8]
   d49ee:	f000 bbc9 	b.w	d5184 <__aeabi_atexit>
   d49f2:	bf00      	nop
   d49f4:	2003e3e8 	.word	0x2003e3e8
   d49f8:	2003e3c4 	.word	0x2003e3c4
   d49fc:	000d49d7 	.word	0x000d49d7

000d4a00 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4a00:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4a02:	4b0c      	ldr	r3, [pc, #48]	; (d4a34 <serialEventRun+0x34>)
   d4a04:	b133      	cbz	r3, d4a14 <serialEventRun+0x14>
   d4a06:	f000 f957 	bl	d4cb8 <_Z16_fetch_usbserialv>
   d4a0a:	6803      	ldr	r3, [r0, #0]
   d4a0c:	691b      	ldr	r3, [r3, #16]
   d4a0e:	4798      	blx	r3
   d4a10:	2800      	cmp	r0, #0
   d4a12:	dc09      	bgt.n	d4a28 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4a14:	4b08      	ldr	r3, [pc, #32]	; (d4a38 <serialEventRun+0x38>)
   d4a16:	b163      	cbz	r3, d4a32 <serialEventRun+0x32>
   d4a18:	f000 fa18 	bl	d4e4c <_Z22__fetch_global_Serial1v>
   d4a1c:	6803      	ldr	r3, [r0, #0]
   d4a1e:	691b      	ldr	r3, [r3, #16]
   d4a20:	4798      	blx	r3
   d4a22:	2800      	cmp	r0, #0
   d4a24:	dc03      	bgt.n	d4a2e <serialEventRun+0x2e>
   d4a26:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4a28:	f3af 8000 	nop.w
   d4a2c:	e7f2      	b.n	d4a14 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4a2e:	f3af 8000 	nop.w
   d4a32:	bd08      	pop	{r3, pc}
	...

000d4a3c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4a3c:	b508      	push	{r3, lr}
	serialEventRun();
   d4a3e:	f7ff ffdf 	bl	d4a00 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4a42:	f7ff fd2d 	bl	d44a0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4a46:	4b01      	ldr	r3, [pc, #4]	; (d4a4c <_post_loop+0x10>)
   d4a48:	6018      	str	r0, [r3, #0]
   d4a4a:	bd08      	pop	{r3, pc}
   d4a4c:	2003e744 	.word	0x2003e744

000d4a50 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4a50:	4802      	ldr	r0, [pc, #8]	; (d4a5c <_Z33system_initialize_user_backup_ramv+0xc>)
   d4a52:	4a03      	ldr	r2, [pc, #12]	; (d4a60 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4a54:	4903      	ldr	r1, [pc, #12]	; (d4a64 <_Z33system_initialize_user_backup_ramv+0x14>)
   d4a56:	1a12      	subs	r2, r2, r0
   d4a58:	f000 bcf2 	b.w	d5440 <memcpy>
   d4a5c:	2003f400 	.word	0x2003f400
   d4a60:	2003f404 	.word	0x2003f404
   d4a64:	000d5840 	.word	0x000d5840

000d4a68 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4a68:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4a6a:	2300      	movs	r3, #0
   d4a6c:	9300      	str	r3, [sp, #0]
   d4a6e:	461a      	mov	r2, r3
   d4a70:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4a74:	f7ff fdee 	bl	d4654 <system_ctrl_set_result>
}
   d4a78:	b003      	add	sp, #12
   d4a7a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4a80 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4a80:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4a82:	8843      	ldrh	r3, [r0, #2]
   d4a84:	2b0a      	cmp	r3, #10
   d4a86:	d008      	beq.n	d4a9a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4a88:	2b50      	cmp	r3, #80	; 0x50
   d4a8a:	d109      	bne.n	d4aa0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4a8c:	4b09      	ldr	r3, [pc, #36]	; (d4ab4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4a8e:	681b      	ldr	r3, [r3, #0]
   d4a90:	b13b      	cbz	r3, d4aa2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4a92:	b003      	add	sp, #12
   d4a94:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4a98:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4a9a:	f7ff ffe5 	bl	d4a68 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4a9e:	e006      	b.n	d4aae <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4aa0:	2300      	movs	r3, #0
   d4aa2:	9300      	str	r3, [sp, #0]
   d4aa4:	461a      	mov	r2, r3
   d4aa6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4aaa:	f7ff fdd3 	bl	d4654 <system_ctrl_set_result>
        break;
    }
}
   d4aae:	b003      	add	sp, #12
   d4ab0:	f85d fb04 	ldr.w	pc, [sp], #4
   d4ab4:	2003e3f8 	.word	0x2003e3f8

000d4ab8 <module_user_init_hook>:

void module_user_init_hook()
{
   d4ab8:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4aba:	4c10      	ldr	r4, [pc, #64]	; (d4afc <module_user_init_hook+0x44>)
   d4abc:	4d10      	ldr	r5, [pc, #64]	; (d4b00 <module_user_init_hook+0x48>)
   d4abe:	6823      	ldr	r3, [r4, #0]
   d4ac0:	42ab      	cmp	r3, r5
   d4ac2:	4b10      	ldr	r3, [pc, #64]	; (d4b04 <module_user_init_hook+0x4c>)
   d4ac4:	bf0c      	ite	eq
   d4ac6:	2201      	moveq	r2, #1
   d4ac8:	2200      	movne	r2, #0
   d4aca:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4acc:	d002      	beq.n	d4ad4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d4ace:	f7ff ffbf 	bl	d4a50 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4ad2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4ad4:	f7ff fcdc 	bl	d4490 <HAL_RNG_GetRandomNumber>
   d4ad8:	4604      	mov	r4, r0
    srand(seed);
   d4ada:	f000 fcc5 	bl	d5468 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4ade:	4b0a      	ldr	r3, [pc, #40]	; (d4b08 <module_user_init_hook+0x50>)
   d4ae0:	b113      	cbz	r3, d4ae8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d4ae2:	4620      	mov	r0, r4
   d4ae4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4ae8:	2100      	movs	r1, #0
   d4aea:	4807      	ldr	r0, [pc, #28]	; (d4b08 <module_user_init_hook+0x50>)
   d4aec:	f7ff fe0c 	bl	d4708 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4af0:	2100      	movs	r1, #0
   d4af2:	4806      	ldr	r0, [pc, #24]	; (d4b0c <module_user_init_hook+0x54>)
}
   d4af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4af8:	f7ff bda2 	b.w	d4640 <system_ctrl_set_app_request_handler>
   d4afc:	2003f400 	.word	0x2003f400
   d4b00:	9a271c1e 	.word	0x9a271c1e
   d4b04:	2003e3fc 	.word	0x2003e3fc
   d4b08:	00000000 	.word	0x00000000
   d4b0c:	000d4a81 	.word	0x000d4a81

000d4b10 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4b10:	4770      	bx	lr

000d4b12 <_ZN9IPAddressD0Ev>:
   d4b12:	b510      	push	{r4, lr}
   d4b14:	2118      	movs	r1, #24
   d4b16:	4604      	mov	r4, r0
   d4b18:	f000 fb39 	bl	d518e <_ZdlPvj>
   d4b1c:	4620      	mov	r0, r4
   d4b1e:	bd10      	pop	{r4, pc}

000d4b20 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4b20:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4b22:	7d03      	ldrb	r3, [r0, #20]
   d4b24:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4b26:	b08d      	sub	sp, #52	; 0x34
   d4b28:	460e      	mov	r6, r1
   d4b2a:	f100 0704 	add.w	r7, r0, #4
   d4b2e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4b32:	d002      	beq.n	d4b3a <_ZNK9IPAddress7printToER5Print+0x1a>
   d4b34:	f100 0508 	add.w	r5, r0, #8
   d4b38:	e018      	b.n	d4b6c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4b3a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4b3c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4b3e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4b42:	232f      	movs	r3, #47	; 0x2f
   d4b44:	462a      	mov	r2, r5
   d4b46:	200a      	movs	r0, #10
   d4b48:	f7ff fcf2 	bl	d4530 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4b4c:	4628      	mov	r0, r5
   d4b4e:	f000 fcb3 	bl	d54b8 <strlen>
   d4b52:	6833      	ldr	r3, [r6, #0]
   d4b54:	4602      	mov	r2, r0
   d4b56:	68db      	ldr	r3, [r3, #12]
   d4b58:	4629      	mov	r1, r5
   d4b5a:	4630      	mov	r0, r6
   d4b5c:	4798      	blx	r3
   d4b5e:	e00f      	b.n	d4b80 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4b60:	b124      	cbz	r4, d4b6c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4b62:	212e      	movs	r1, #46	; 0x2e
   d4b64:	4630      	mov	r0, r6
   d4b66:	f7ff fef7 	bl	d4958 <_ZN5Print5printEc>
   d4b6a:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4b6c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4b70:	220a      	movs	r2, #10
   d4b72:	4630      	mov	r0, r6
   d4b74:	f7ff fef3 	bl	d495e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4b78:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4b7a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4b7c:	d1f0      	bne.n	d4b60 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4b7e:	4620      	mov	r0, r4
    }
    return n;
}
   d4b80:	b00d      	add	sp, #52	; 0x34
   d4b82:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4b84 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4b84:	b510      	push	{r4, lr}
   d4b86:	4b05      	ldr	r3, [pc, #20]	; (d4b9c <_ZN9IPAddressC1Ev+0x18>)
   d4b88:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4b8a:	2211      	movs	r2, #17
   d4b8c:	f840 3b04 	str.w	r3, [r0], #4
   d4b90:	2100      	movs	r1, #0
   d4b92:	f000 fc60 	bl	d5456 <memset>
{
    clear();
}
   d4b96:	4620      	mov	r0, r4
   d4b98:	bd10      	pop	{r4, pc}
   d4b9a:	bf00      	nop
   d4b9c:	000d5688 	.word	0x000d5688

000d4ba0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4ba0:	4603      	mov	r3, r0
   d4ba2:	4a07      	ldr	r2, [pc, #28]	; (d4bc0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4ba4:	b510      	push	{r4, lr}
   d4ba6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4baa:	f101 0210 	add.w	r2, r1, #16
   d4bae:	f851 4b04 	ldr.w	r4, [r1], #4
   d4bb2:	f843 4b04 	str.w	r4, [r3], #4
   d4bb6:	4291      	cmp	r1, r2
   d4bb8:	d1f9      	bne.n	d4bae <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4bba:	780a      	ldrb	r2, [r1, #0]
   d4bbc:	701a      	strb	r2, [r3, #0]
}
   d4bbe:	bd10      	pop	{r4, pc}
   d4bc0:	000d5688 	.word	0x000d5688

000d4bc4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4bc4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4bc6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4bca:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4bce:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4bd2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4bd6:	2304      	movs	r3, #4
   d4bd8:	6041      	str	r1, [r0, #4]
   d4bda:	7503      	strb	r3, [r0, #20]
   d4bdc:	bd10      	pop	{r4, pc}

000d4bde <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4bde:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4be0:	780d      	ldrb	r5, [r1, #0]
   d4be2:	788b      	ldrb	r3, [r1, #2]
   d4be4:	784a      	ldrb	r2, [r1, #1]
   d4be6:	78c9      	ldrb	r1, [r1, #3]
   d4be8:	9100      	str	r1, [sp, #0]
   d4bea:	4629      	mov	r1, r5
   d4bec:	f7ff ffea 	bl	d4bc4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4bf0:	b003      	add	sp, #12
   d4bf2:	bd30      	pop	{r4, r5, pc}

000d4bf4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4bf4:	7441      	strb	r1, [r0, #17]
   d4bf6:	4770      	bx	lr

000d4bf8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4bf8:	4770      	bx	lr

000d4bfa <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4bfa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4bfc:	2100      	movs	r1, #0
   d4bfe:	7c00      	ldrb	r0, [r0, #16]
   d4c00:	f7ff fcf6 	bl	d45f0 <HAL_USB_USART_Receive_Data>
}
   d4c04:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4c08:	bf28      	it	cs
   d4c0a:	f04f 30ff 	movcs.w	r0, #4294967295
   d4c0e:	bd08      	pop	{r3, pc}

000d4c10 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4c10:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4c12:	2101      	movs	r1, #1
   d4c14:	7c00      	ldrb	r0, [r0, #16]
   d4c16:	f7ff fceb 	bl	d45f0 <HAL_USB_USART_Receive_Data>
}
   d4c1a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4c1e:	bf28      	it	cs
   d4c20:	f04f 30ff 	movcs.w	r0, #4294967295
   d4c24:	bd08      	pop	{r3, pc}

000d4c26 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4c26:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4c28:	7c00      	ldrb	r0, [r0, #16]
   d4c2a:	f7ff fcd9 	bl	d45e0 <HAL_USB_USART_Available_Data_For_Write>
}
   d4c2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4c32:	bd08      	pop	{r3, pc}

000d4c34 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4c34:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4c36:	7c00      	ldrb	r0, [r0, #16]
   d4c38:	f7ff fcca 	bl	d45d0 <HAL_USB_USART_Available_Data>
}
   d4c3c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4c40:	bd08      	pop	{r3, pc}

000d4c42 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4c42:	7c00      	ldrb	r0, [r0, #16]
   d4c44:	f7ff bce4 	b.w	d4610 <HAL_USB_USART_Flush_Data>

000d4c48 <_ZN9USBSerialD0Ev>:
   d4c48:	b510      	push	{r4, lr}
   d4c4a:	2114      	movs	r1, #20
   d4c4c:	4604      	mov	r4, r0
   d4c4e:	f000 fa9e 	bl	d518e <_ZdlPvj>
   d4c52:	4620      	mov	r0, r4
   d4c54:	bd10      	pop	{r4, pc}

000d4c56 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4c56:	b538      	push	{r3, r4, r5, lr}
   d4c58:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4c5a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4c5c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4c5e:	f7ff fcbf 	bl	d45e0 <HAL_USB_USART_Available_Data_For_Write>
   d4c62:	2800      	cmp	r0, #0
   d4c64:	dc01      	bgt.n	d4c6a <_ZN9USBSerial5writeEh+0x14>
   d4c66:	7c60      	ldrb	r0, [r4, #17]
   d4c68:	b128      	cbz	r0, d4c76 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4c6a:	4629      	mov	r1, r5
   d4c6c:	7c20      	ldrb	r0, [r4, #16]
   d4c6e:	f7ff fcc7 	bl	d4600 <HAL_USB_USART_Send_Data>
   d4c72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4c76:	bd38      	pop	{r3, r4, r5, pc}

000d4c78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4c78:	b510      	push	{r4, lr}
   d4c7a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4c7c:	2300      	movs	r3, #0
   d4c7e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4c80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4c84:	60a3      	str	r3, [r4, #8]
   d4c86:	4b05      	ldr	r3, [pc, #20]	; (d4c9c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4c88:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4c8a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4c8c:	4608      	mov	r0, r1
{
  _serial = serial;
   d4c8e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4c90:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4c92:	4611      	mov	r1, r2
   d4c94:	f7ff fc8c 	bl	d45b0 <HAL_USB_USART_Init>
}
   d4c98:	4620      	mov	r0, r4
   d4c9a:	bd10      	pop	{r4, pc}
   d4c9c:	000d569c 	.word	0x000d569c

000d4ca0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4ca0:	2200      	movs	r2, #0
   d4ca2:	7c00      	ldrb	r0, [r0, #16]
   d4ca4:	f7ff bc8c 	b.w	d45c0 <HAL_USB_USART_Begin>

000d4ca8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4ca8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4caa:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4cac:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4cae:	2100      	movs	r1, #0
   d4cb0:	f000 fbd1 	bl	d5456 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4cb4:	4620      	mov	r0, r4
   d4cb6:	bd10      	pop	{r4, pc}

000d4cb8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4cb8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4cba:	4d0e      	ldr	r5, [pc, #56]	; (d4cf4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4cbc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4cbe:	a801      	add	r0, sp, #4
   d4cc0:	f7ff fff2 	bl	d4ca8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4cc4:	6829      	ldr	r1, [r5, #0]
   d4cc6:	f011 0401 	ands.w	r4, r1, #1
   d4cca:	d110      	bne.n	d4cee <_Z16_fetch_usbserialv+0x36>
   d4ccc:	4628      	mov	r0, r5
   d4cce:	f7ff f9e6 	bl	d409e <__cxa_guard_acquire>
   d4cd2:	b160      	cbz	r0, d4cee <_Z16_fetch_usbserialv+0x36>
   d4cd4:	aa01      	add	r2, sp, #4
   d4cd6:	4621      	mov	r1, r4
   d4cd8:	4807      	ldr	r0, [pc, #28]	; (d4cf8 <_Z16_fetch_usbserialv+0x40>)
   d4cda:	f7ff ffcd 	bl	d4c78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4cde:	4628      	mov	r0, r5
   d4ce0:	f7ff f9e2 	bl	d40a8 <__cxa_guard_release>
   d4ce4:	4a05      	ldr	r2, [pc, #20]	; (d4cfc <_Z16_fetch_usbserialv+0x44>)
   d4ce6:	4906      	ldr	r1, [pc, #24]	; (d4d00 <_Z16_fetch_usbserialv+0x48>)
   d4ce8:	4803      	ldr	r0, [pc, #12]	; (d4cf8 <_Z16_fetch_usbserialv+0x40>)
   d4cea:	f000 fa4b 	bl	d5184 <__aeabi_atexit>
	return _usbserial;
}
   d4cee:	4802      	ldr	r0, [pc, #8]	; (d4cf8 <_Z16_fetch_usbserialv+0x40>)
   d4cf0:	b007      	add	sp, #28
   d4cf2:	bd30      	pop	{r4, r5, pc}
   d4cf4:	2003e400 	.word	0x2003e400
   d4cf8:	2003e404 	.word	0x2003e404
   d4cfc:	2003e3c4 	.word	0x2003e3c4
   d4d00:	000d4bf9 	.word	0x000d4bf9

000d4d04 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4d04:	2200      	movs	r2, #0
   d4d06:	4611      	mov	r1, r2
   d4d08:	6840      	ldr	r0, [r0, #4]
   d4d0a:	f7ff bcc5 	b.w	d4698 <network_ready>

000d4d0e <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4d0e:	2200      	movs	r2, #0
   d4d10:	4611      	mov	r1, r2
   d4d12:	6840      	ldr	r0, [r0, #4]
   d4d14:	f7ff bce0 	b.w	d46d8 <network_listening>

000d4d18 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4d18:	2200      	movs	r2, #0
   d4d1a:	4611      	mov	r1, r2
   d4d1c:	6840      	ldr	r0, [r0, #4]
   d4d1e:	f7ff bceb 	b.w	d46f8 <network_get_listen_timeout>

000d4d22 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4d22:	2200      	movs	r2, #0
   d4d24:	6840      	ldr	r0, [r0, #4]
   d4d26:	f7ff bcdf 	b.w	d46e8 <network_set_listen_timeout>

000d4d2a <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4d2a:	2200      	movs	r2, #0
   d4d2c:	f081 0101 	eor.w	r1, r1, #1
   d4d30:	6840      	ldr	r0, [r0, #4]
   d4d32:	f7ff bcc9 	b.w	d46c8 <network_listen>

000d4d36 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d4d36:	2300      	movs	r3, #0
   d4d38:	461a      	mov	r2, r3
   d4d3a:	4619      	mov	r1, r3
   d4d3c:	6840      	ldr	r0, [r0, #4]
   d4d3e:	f7ff bcbb 	b.w	d46b8 <network_off>

000d4d42 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4d42:	2300      	movs	r3, #0
   d4d44:	461a      	mov	r2, r3
   d4d46:	4619      	mov	r1, r3
   d4d48:	6840      	ldr	r0, [r0, #4]
   d4d4a:	f7ff bcad 	b.w	d46a8 <network_on>

000d4d4e <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4d4e:	2200      	movs	r2, #0
   d4d50:	4611      	mov	r1, r2
   d4d52:	6840      	ldr	r0, [r0, #4]
   d4d54:	f7ff bc90 	b.w	d4678 <network_connecting>

000d4d58 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4d58:	2200      	movs	r2, #0
   d4d5a:	2102      	movs	r1, #2
   d4d5c:	6840      	ldr	r0, [r0, #4]
   d4d5e:	f7ff bc93 	b.w	d4688 <network_disconnect>

000d4d62 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4d62:	2300      	movs	r3, #0
   d4d64:	461a      	mov	r2, r3
   d4d66:	6840      	ldr	r0, [r0, #4]
   d4d68:	f7ff bc7e 	b.w	d4668 <network_connect>

000d4d6c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d4d6c:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d4d6e:	4c08      	ldr	r4, [pc, #32]	; (d4d90 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d4d70:	2528      	movs	r5, #40	; 0x28
   d4d72:	462a      	mov	r2, r5
   d4d74:	2100      	movs	r1, #0
   d4d76:	4620      	mov	r0, r4
   d4d78:	f000 fb6d 	bl	d5456 <memset>
        cid = -1;
   d4d7c:	f04f 33ff 	mov.w	r3, #4294967295
   d4d80:	6063      	str	r3, [r4, #4]
   d4d82:	4b04      	ldr	r3, [pc, #16]	; (d4d94 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d4d84:	8025      	strh	r5, [r4, #0]
   d4d86:	2204      	movs	r2, #4
   d4d88:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d4d8a:	4a03      	ldr	r2, [pc, #12]	; (d4d98 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d4d8c:	601a      	str	r2, [r3, #0]
   d4d8e:	bd38      	pop	{r3, r4, r5, pc}
   d4d90:	2003e420 	.word	0x2003e420
   d4d94:	2003e418 	.word	0x2003e418
   d4d98:	000d56cc 	.word	0x000d56cc

000d4d9c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4d9c:	4770      	bx	lr

000d4d9e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4d9e:	7441      	strb	r1, [r0, #17]
   d4da0:	4770      	bx	lr

000d4da2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4da2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4da4:	7c00      	ldrb	r0, [r0, #16]
   d4da6:	f7ff fbfb 	bl	d45a0 <HAL_USART_Available_Data_For_Write>
}
   d4daa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4dae:	bd08      	pop	{r3, pc}

000d4db0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4db0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4db2:	7c00      	ldrb	r0, [r0, #16]
   d4db4:	f7ff fbd4 	bl	d4560 <HAL_USART_Available_Data>
}
   d4db8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4dbc:	bd08      	pop	{r3, pc}

000d4dbe <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4dbe:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4dc0:	7c00      	ldrb	r0, [r0, #16]
   d4dc2:	f7ff fbdd 	bl	d4580 <HAL_USART_Peek_Data>
}
   d4dc6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4dca:	bf28      	it	cs
   d4dcc:	f04f 30ff 	movcs.w	r0, #4294967295
   d4dd0:	bd08      	pop	{r3, pc}

000d4dd2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4dd2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d4dd4:	7c00      	ldrb	r0, [r0, #16]
   d4dd6:	f7ff fbcb 	bl	d4570 <HAL_USART_Read_Data>
}
   d4dda:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4dde:	bf28      	it	cs
   d4de0:	f04f 30ff 	movcs.w	r0, #4294967295
   d4de4:	bd08      	pop	{r3, pc}

000d4de6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4de6:	7c00      	ldrb	r0, [r0, #16]
   d4de8:	f7ff bbd2 	b.w	d4590 <HAL_USART_Flush_Data>

000d4dec <_ZN11USARTSerialD0Ev>:
   d4dec:	b510      	push	{r4, lr}
   d4dee:	2114      	movs	r1, #20
   d4df0:	4604      	mov	r4, r0
   d4df2:	f000 f9cc 	bl	d518e <_ZdlPvj>
   d4df6:	4620      	mov	r0, r4
   d4df8:	bd10      	pop	{r4, pc}

000d4dfa <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4dfa:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4dfc:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4dfe:	4604      	mov	r4, r0
   d4e00:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4e02:	b925      	cbnz	r5, d4e0e <_ZN11USARTSerial5writeEh+0x14>
   d4e04:	7c00      	ldrb	r0, [r0, #16]
   d4e06:	f7ff fbcb 	bl	d45a0 <HAL_USART_Available_Data_For_Write>
   d4e0a:	2800      	cmp	r0, #0
   d4e0c:	dd05      	ble.n	d4e1a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4e0e:	4631      	mov	r1, r6
   d4e10:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4e12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4e16:	f7ff bb9b 	b.w	d4550 <HAL_USART_Write_Data>
  }
  return 0;
}
   d4e1a:	4628      	mov	r0, r5
   d4e1c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4e20 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4e20:	b510      	push	{r4, lr}
   d4e22:	4604      	mov	r4, r0
   d4e24:	4608      	mov	r0, r1
   d4e26:	4611      	mov	r1, r2
   d4e28:	2200      	movs	r2, #0
   d4e2a:	6062      	str	r2, [r4, #4]
   d4e2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4e30:	60a2      	str	r2, [r4, #8]
   d4e32:	4a05      	ldr	r2, [pc, #20]	; (d4e48 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4e34:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4e36:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4e38:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4e3a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4e3c:	461a      	mov	r2, r3
   d4e3e:	f7ff fb7f 	bl	d4540 <HAL_USART_Init>
}
   d4e42:	4620      	mov	r0, r4
   d4e44:	bd10      	pop	{r4, pc}
   d4e46:	bf00      	nop
   d4e48:	000d5700 	.word	0x000d5700

000d4e4c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4e4c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4e4e:	4d0c      	ldr	r5, [pc, #48]	; (d4e80 <_Z22__fetch_global_Serial1v+0x34>)
   d4e50:	6829      	ldr	r1, [r5, #0]
   d4e52:	f011 0401 	ands.w	r4, r1, #1
   d4e56:	d111      	bne.n	d4e7c <_Z22__fetch_global_Serial1v+0x30>
   d4e58:	4628      	mov	r0, r5
   d4e5a:	f7ff f920 	bl	d409e <__cxa_guard_acquire>
   d4e5e:	b168      	cbz	r0, d4e7c <_Z22__fetch_global_Serial1v+0x30>
   d4e60:	4a08      	ldr	r2, [pc, #32]	; (d4e84 <_Z22__fetch_global_Serial1v+0x38>)
   d4e62:	4b09      	ldr	r3, [pc, #36]	; (d4e88 <_Z22__fetch_global_Serial1v+0x3c>)
   d4e64:	4809      	ldr	r0, [pc, #36]	; (d4e8c <_Z22__fetch_global_Serial1v+0x40>)
   d4e66:	4621      	mov	r1, r4
   d4e68:	f7ff ffda 	bl	d4e20 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d4e6c:	4628      	mov	r0, r5
   d4e6e:	f7ff f91b 	bl	d40a8 <__cxa_guard_release>
   d4e72:	4a07      	ldr	r2, [pc, #28]	; (d4e90 <_Z22__fetch_global_Serial1v+0x44>)
   d4e74:	4907      	ldr	r1, [pc, #28]	; (d4e94 <_Z22__fetch_global_Serial1v+0x48>)
   d4e76:	4805      	ldr	r0, [pc, #20]	; (d4e8c <_Z22__fetch_global_Serial1v+0x40>)
   d4e78:	f000 f984 	bl	d5184 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4e7c:	4803      	ldr	r0, [pc, #12]	; (d4e8c <_Z22__fetch_global_Serial1v+0x40>)
   d4e7e:	bd38      	pop	{r3, r4, r5, pc}
   d4e80:	2003e4e0 	.word	0x2003e4e0
   d4e84:	2003e4e4 	.word	0x2003e4e4
   d4e88:	2003e45c 	.word	0x2003e45c
   d4e8c:	2003e448 	.word	0x2003e448
   d4e90:	2003e3c4 	.word	0x2003e3c4
   d4e94:	000d4d9d 	.word	0x000d4d9d

000d4e98 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4e98:	2200      	movs	r2, #0
   d4e9a:	4611      	mov	r1, r2
   d4e9c:	6840      	ldr	r0, [r0, #4]
   d4e9e:	f7ff bc1b 	b.w	d46d8 <network_listening>

000d4ea2 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4ea2:	2200      	movs	r2, #0
   d4ea4:	4611      	mov	r1, r2
   d4ea6:	6840      	ldr	r0, [r0, #4]
   d4ea8:	f7ff bc26 	b.w	d46f8 <network_get_listen_timeout>

000d4eac <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4eac:	2200      	movs	r2, #0
   d4eae:	6840      	ldr	r0, [r0, #4]
   d4eb0:	f7ff bc1a 	b.w	d46e8 <network_set_listen_timeout>

000d4eb4 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4eb4:	2200      	movs	r2, #0
   d4eb6:	f081 0101 	eor.w	r1, r1, #1
   d4eba:	6840      	ldr	r0, [r0, #4]
   d4ebc:	f7ff bc04 	b.w	d46c8 <network_listen>

000d4ec0 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d4ec0:	2300      	movs	r3, #0
   d4ec2:	461a      	mov	r2, r3
   d4ec4:	2101      	movs	r1, #1
   d4ec6:	6840      	ldr	r0, [r0, #4]
   d4ec8:	f7ff bbf6 	b.w	d46b8 <network_off>

000d4ecc <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4ecc:	2300      	movs	r3, #0
   d4ece:	461a      	mov	r2, r3
   d4ed0:	4619      	mov	r1, r3
   d4ed2:	6840      	ldr	r0, [r0, #4]
   d4ed4:	f7ff bbe8 	b.w	d46a8 <network_on>

000d4ed8 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4ed8:	2200      	movs	r2, #0
   d4eda:	4611      	mov	r1, r2
   d4edc:	6840      	ldr	r0, [r0, #4]
   d4ede:	f7ff bbdb 	b.w	d4698 <network_ready>

000d4ee2 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4ee2:	2200      	movs	r2, #0
   d4ee4:	4611      	mov	r1, r2
   d4ee6:	6840      	ldr	r0, [r0, #4]
   d4ee8:	f7ff bbc6 	b.w	d4678 <network_connecting>

000d4eec <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4eec:	2200      	movs	r2, #0
   d4eee:	2102      	movs	r1, #2
   d4ef0:	6840      	ldr	r0, [r0, #4]
   d4ef2:	f7ff bbc9 	b.w	d4688 <network_disconnect>

000d4ef6 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4ef6:	2300      	movs	r3, #0
   d4ef8:	461a      	mov	r2, r3
   d4efa:	6840      	ldr	r0, [r0, #4]
   d4efc:	f7ff bbb4 	b.w	d4668 <network_connect>

000d4f00 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4f00:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4f02:	4605      	mov	r5, r0
   d4f04:	b188      	cbz	r0, d4f2a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f06:	6804      	ldr	r4, [r0, #0]
   d4f08:	b14c      	cbz	r4, d4f1e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d4f0a:	68a3      	ldr	r3, [r4, #8]
   d4f0c:	b11b      	cbz	r3, d4f16 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4f0e:	2203      	movs	r2, #3
   d4f10:	4621      	mov	r1, r4
   d4f12:	4620      	mov	r0, r4
   d4f14:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4f16:	2110      	movs	r1, #16
   d4f18:	4620      	mov	r0, r4
   d4f1a:	f000 f938 	bl	d518e <_ZdlPvj>
   d4f1e:	4628      	mov	r0, r5
   d4f20:	2114      	movs	r1, #20
      }
   d4f22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4f26:	f000 b932 	b.w	d518e <_ZdlPvj>
   d4f2a:	bd38      	pop	{r3, r4, r5, pc}

000d4f2c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4f2c:	b110      	cbz	r0, d4f34 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d4f2e:	6803      	ldr	r3, [r0, #0]
   d4f30:	685b      	ldr	r3, [r3, #4]
   d4f32:	4718      	bx	r3
   d4f34:	4770      	bx	lr

000d4f36 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4f36:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4f38:	6803      	ldr	r3, [r0, #0]
   d4f3a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4f3c:	b1bb      	cbz	r3, d4f6e <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4f3e:	6858      	ldr	r0, [r3, #4]
   d4f40:	f7ff face 	bl	d44e0 <os_thread_is_current>
   d4f44:	b978      	cbnz	r0, d4f66 <_ZN6ThreadD1Ev+0x30>
   d4f46:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4f48:	7c5a      	ldrb	r2, [r3, #17]
   d4f4a:	b912      	cbnz	r2, d4f52 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4f4c:	6858      	ldr	r0, [r3, #4]
   d4f4e:	f7ff facf 	bl	d44f0 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4f52:	6823      	ldr	r3, [r4, #0]
   d4f54:	6858      	ldr	r0, [r3, #4]
   d4f56:	f7ff fad3 	bl	d4500 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f5a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4f5c:	2300      	movs	r3, #0
   d4f5e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4f60:	b128      	cbz	r0, d4f6e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4f62:	f7ff ffcd 	bl	d4f00 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f66:	6820      	ldr	r0, [r4, #0]
   d4f68:	b108      	cbz	r0, d4f6e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4f6a:	f7ff ffc9 	bl	d4f00 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d4f6e:	4620      	mov	r0, r4
   d4f70:	bd10      	pop	{r4, pc}

000d4f72 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d4f72:	b538      	push	{r3, r4, r5, lr}
   d4f74:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f76:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d4f7a:	b108      	cbz	r0, d4f80 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4f7c:	f7ff f88d 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4f80:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d4f84:	b108      	cbz	r0, d4f8a <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d4f86:	f7ff facb 	bl	d4520 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f8a:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d4f8e:	b135      	cbz	r5, d4f9e <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4f90:	4628      	mov	r0, r5
   d4f92:	f7ff ffd0 	bl	d4f36 <_ZN6ThreadD1Ev>
   d4f96:	2104      	movs	r1, #4
   d4f98:	4628      	mov	r0, r5
   d4f9a:	f000 f8f8 	bl	d518e <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f9e:	6820      	ldr	r0, [r4, #0]
   d4fa0:	b108      	cbz	r0, d4fa6 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d4fa2:	f7ff ffc3 	bl	d4f2c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d4fa6:	4620      	mov	r0, r4
   d4fa8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4fac <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4fac:	b510      	push	{r4, lr}
   d4fae:	4b04      	ldr	r3, [pc, #16]	; (d4fc0 <_ZN5spark9MeshClassD1Ev+0x14>)
   d4fb0:	4604      	mov	r4, r0
   d4fb2:	f840 3b08 	str.w	r3, [r0], #8
   d4fb6:	f7ff ffdc 	bl	d4f72 <_ZN5spark11MeshPublishD1Ev>
   d4fba:	4620      	mov	r0, r4
   d4fbc:	bd10      	pop	{r4, pc}
   d4fbe:	bf00      	nop
   d4fc0:	000d5730 	.word	0x000d5730

000d4fc4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4fc4:	b538      	push	{r3, r4, r5, lr}
   d4fc6:	4c0e      	ldr	r4, [pc, #56]	; (d5000 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d4fc8:	4b0e      	ldr	r3, [pc, #56]	; (d5004 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d4fca:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4fcc:	2500      	movs	r5, #0
   d4fce:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4fd0:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4fd4:	6063      	str	r3, [r4, #4]
   d4fd6:	60a5      	str	r5, [r4, #8]
   d4fd8:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4fdc:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4fe0:	f7ff fa96 	bl	d4510 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4fe4:	4b08      	ldr	r3, [pc, #32]	; (d5008 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d4fe6:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4fea:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d4fee:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4ff0:	4620      	mov	r0, r4
   d4ff2:	4a06      	ldr	r2, [pc, #24]	; (d500c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d4ff4:	4906      	ldr	r1, [pc, #24]	; (d5010 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d4ff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4ffa:	f000 b8c3 	b.w	d5184 <__aeabi_atexit>
   d4ffe:	bf00      	nop
   d5000:	2003e568 	.word	0x2003e568
   d5004:	000d5764 	.word	0x000d5764
   d5008:	000d5730 	.word	0x000d5730
   d500c:	2003e3c4 	.word	0x2003e3c4
   d5010:	000d4fad 	.word	0x000d4fad

000d5014 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5014:	2300      	movs	r3, #0
   d5016:	461a      	mov	r2, r3
   d5018:	6840      	ldr	r0, [r0, #4]
   d501a:	f7ff bb25 	b.w	d4668 <network_connect>

000d501e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d501e:	2200      	movs	r2, #0
   d5020:	2102      	movs	r1, #2
   d5022:	6840      	ldr	r0, [r0, #4]
   d5024:	f7ff bb30 	b.w	d4688 <network_disconnect>

000d5028 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5028:	2200      	movs	r2, #0
   d502a:	4611      	mov	r1, r2
   d502c:	6840      	ldr	r0, [r0, #4]
   d502e:	f7ff bb23 	b.w	d4678 <network_connecting>

000d5032 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5032:	2200      	movs	r2, #0
   d5034:	4611      	mov	r1, r2
   d5036:	6840      	ldr	r0, [r0, #4]
   d5038:	f7ff bb2e 	b.w	d4698 <network_ready>

000d503c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d503c:	2300      	movs	r3, #0
   d503e:	461a      	mov	r2, r3
   d5040:	4619      	mov	r1, r3
   d5042:	6840      	ldr	r0, [r0, #4]
   d5044:	f7ff bb30 	b.w	d46a8 <network_on>

000d5048 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5048:	2300      	movs	r3, #0
   d504a:	461a      	mov	r2, r3
   d504c:	4619      	mov	r1, r3
   d504e:	6840      	ldr	r0, [r0, #4]
   d5050:	f7ff bb32 	b.w	d46b8 <network_off>

000d5054 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5054:	2200      	movs	r2, #0
   d5056:	f081 0101 	eor.w	r1, r1, #1
   d505a:	6840      	ldr	r0, [r0, #4]
   d505c:	f7ff bb34 	b.w	d46c8 <network_listen>

000d5060 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5060:	2200      	movs	r2, #0
   d5062:	6840      	ldr	r0, [r0, #4]
   d5064:	f7ff bb40 	b.w	d46e8 <network_set_listen_timeout>

000d5068 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5068:	2200      	movs	r2, #0
   d506a:	4611      	mov	r1, r2
   d506c:	6840      	ldr	r0, [r0, #4]
   d506e:	f7ff bb43 	b.w	d46f8 <network_get_listen_timeout>

000d5072 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5072:	2200      	movs	r2, #0
   d5074:	4611      	mov	r1, r2
   d5076:	6840      	ldr	r0, [r0, #4]
   d5078:	f7ff bb2e 	b.w	d46d8 <network_listening>

000d507c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d507c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5080:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5082:	b095      	sub	sp, #84	; 0x54
   d5084:	4616      	mov	r6, r2
   d5086:	460d      	mov	r5, r1
   d5088:	4607      	mov	r7, r0
    IPAddress addr;
   d508a:	f7ff fd7b 	bl	d4b84 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d508e:	4621      	mov	r1, r4
   d5090:	2220      	movs	r2, #32
   d5092:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5094:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5096:	f000 f9de 	bl	d5456 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d509a:	2340      	movs	r3, #64	; 0x40
   d509c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d509e:	4621      	mov	r1, r4
   d50a0:	466b      	mov	r3, sp
   d50a2:	aa0c      	add	r2, sp, #48	; 0x30
   d50a4:	4630      	mov	r0, r6
   d50a6:	f7ff f9e3 	bl	d4470 <netdb_getaddrinfo>
    if (!r) {
   d50aa:	4604      	mov	r4, r0
   d50ac:	2800      	cmp	r0, #0
   d50ae:	d144      	bne.n	d513a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d50b0:	4602      	mov	r2, r0
   d50b2:	2101      	movs	r1, #1
   d50b4:	6868      	ldr	r0, [r5, #4]
   d50b6:	f7ff faef 	bl	d4698 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d50ba:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d50bc:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d50be:	4622      	mov	r2, r4
   d50c0:	6868      	ldr	r0, [r5, #4]
   d50c2:	f7ff fae9 	bl	d4698 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d50c6:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d50c8:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d50ca:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d50cc:	2e00      	cmp	r6, #0
   d50ce:	d034      	beq.n	d513a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d50d0:	2900      	cmp	r1, #0
   d50d2:	d132      	bne.n	d513a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d50d4:	6873      	ldr	r3, [r6, #4]
   d50d6:	2b02      	cmp	r3, #2
   d50d8:	d002      	beq.n	d50e0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d50da:	2b0a      	cmp	r3, #10
   d50dc:	d009      	beq.n	d50f2 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d50de:	e02a      	b.n	d5136 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d50e0:	f1b8 0f00 	cmp.w	r8, #0
   d50e4:	d027      	beq.n	d5136 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d50e6:	6971      	ldr	r1, [r6, #20]
   d50e8:	4638      	mov	r0, r7
   d50ea:	3104      	adds	r1, #4
   d50ec:	f7ff fd77 	bl	d4bde <_ZN9IPAddressaSEPKh>
   d50f0:	e020      	b.n	d5134 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d50f2:	f1b9 0f00 	cmp.w	r9, #0
   d50f6:	d01e      	beq.n	d5136 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d50f8:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d50fa:	2211      	movs	r2, #17
   d50fc:	a801      	add	r0, sp, #4
   d50fe:	f000 f9aa 	bl	d5456 <memset>
                    a.v = 6;
   d5102:	2306      	movs	r3, #6
   d5104:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5108:	ad01      	add	r5, sp, #4
   d510a:	f104 0308 	add.w	r3, r4, #8
   d510e:	3418      	adds	r4, #24
   d5110:	6818      	ldr	r0, [r3, #0]
   d5112:	6859      	ldr	r1, [r3, #4]
   d5114:	462a      	mov	r2, r5
   d5116:	c203      	stmia	r2!, {r0, r1}
   d5118:	3308      	adds	r3, #8
   d511a:	42a3      	cmp	r3, r4
   d511c:	4615      	mov	r5, r2
   d511e:	d1f7      	bne.n	d5110 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5120:	a901      	add	r1, sp, #4
   d5122:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5124:	ad07      	add	r5, sp, #28
   d5126:	f7ff fd3b 	bl	d4ba0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d512a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d512c:	1d3c      	adds	r4, r7, #4
   d512e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5130:	682b      	ldr	r3, [r5, #0]
   d5132:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5134:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5136:	69f6      	ldr	r6, [r6, #28]
   d5138:	e7c8      	b.n	d50cc <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d513a:	9800      	ldr	r0, [sp, #0]
   d513c:	f7ff f990 	bl	d4460 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5140:	4638      	mov	r0, r7
   d5142:	b015      	add	sp, #84	; 0x54
   d5144:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5148 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5148:	4b02      	ldr	r3, [pc, #8]	; (d5154 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d514a:	4a03      	ldr	r2, [pc, #12]	; (d5158 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d514c:	601a      	str	r2, [r3, #0]
   d514e:	2200      	movs	r2, #0
   d5150:	605a      	str	r2, [r3, #4]
   d5152:	4770      	bx	lr
   d5154:	2003e73c 	.word	0x2003e73c
   d5158:	000d5764 	.word	0x000d5764

000d515c <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d515c:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d515e:	4c07      	ldr	r4, [pc, #28]	; (d517c <_Z21__fetch_global_EEPROMv+0x20>)
   d5160:	6823      	ldr	r3, [r4, #0]
   d5162:	07db      	lsls	r3, r3, #31
   d5164:	d408      	bmi.n	d5178 <_Z21__fetch_global_EEPROMv+0x1c>
   d5166:	4620      	mov	r0, r4
   d5168:	f7fe ff99 	bl	d409e <__cxa_guard_acquire>
   d516c:	b120      	cbz	r0, d5178 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d516e:	f7ff f99f 	bl	d44b0 <HAL_EEPROM_Init>
   d5172:	4620      	mov	r0, r4
   d5174:	f7fe ff98 	bl	d40a8 <__cxa_guard_release>
	return eeprom;
}
   d5178:	4801      	ldr	r0, [pc, #4]	; (d5180 <_Z21__fetch_global_EEPROMv+0x24>)
   d517a:	bd10      	pop	{r4, pc}
   d517c:	2003e748 	.word	0x2003e748
   d5180:	2003e74c 	.word	0x2003e74c

000d5184 <__aeabi_atexit>:
   d5184:	460b      	mov	r3, r1
   d5186:	4601      	mov	r1, r0
   d5188:	4618      	mov	r0, r3
   d518a:	f000 b94b 	b.w	d5424 <__cxa_atexit>

000d518e <_ZdlPvj>:
   d518e:	f7fe bf82 	b.w	d4096 <_ZdlPv>
	...

000d5194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5194:	4b18      	ldr	r3, [pc, #96]	; (d51f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5196:	681a      	ldr	r2, [r3, #0]
   d5198:	07d1      	lsls	r1, r2, #31
   d519a:	bf5c      	itt	pl
   d519c:	2201      	movpl	r2, #1
   d519e:	601a      	strpl	r2, [r3, #0]
   d51a0:	4b16      	ldr	r3, [pc, #88]	; (d51fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d51a2:	681a      	ldr	r2, [r3, #0]
   d51a4:	07d2      	lsls	r2, r2, #31
   d51a6:	bf5c      	itt	pl
   d51a8:	2201      	movpl	r2, #1
   d51aa:	601a      	strpl	r2, [r3, #0]
   d51ac:	4b14      	ldr	r3, [pc, #80]	; (d5200 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d51ae:	681a      	ldr	r2, [r3, #0]
   d51b0:	07d0      	lsls	r0, r2, #31
   d51b2:	bf5c      	itt	pl
   d51b4:	2201      	movpl	r2, #1
   d51b6:	601a      	strpl	r2, [r3, #0]
   d51b8:	4b12      	ldr	r3, [pc, #72]	; (d5204 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d51ba:	681a      	ldr	r2, [r3, #0]
   d51bc:	07d1      	lsls	r1, r2, #31
   d51be:	bf5c      	itt	pl
   d51c0:	2201      	movpl	r2, #1
   d51c2:	601a      	strpl	r2, [r3, #0]
   d51c4:	4b10      	ldr	r3, [pc, #64]	; (d5208 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d51c6:	681a      	ldr	r2, [r3, #0]
   d51c8:	07d2      	lsls	r2, r2, #31
   d51ca:	bf5c      	itt	pl
   d51cc:	2201      	movpl	r2, #1
   d51ce:	601a      	strpl	r2, [r3, #0]
   d51d0:	4b0e      	ldr	r3, [pc, #56]	; (d520c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d51d2:	681a      	ldr	r2, [r3, #0]
   d51d4:	07d0      	lsls	r0, r2, #31
   d51d6:	bf5c      	itt	pl
   d51d8:	2201      	movpl	r2, #1
   d51da:	601a      	strpl	r2, [r3, #0]
   d51dc:	4b0c      	ldr	r3, [pc, #48]	; (d5210 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d51de:	681a      	ldr	r2, [r3, #0]
   d51e0:	07d1      	lsls	r1, r2, #31
   d51e2:	bf5c      	itt	pl
   d51e4:	2201      	movpl	r2, #1
   d51e6:	601a      	strpl	r2, [r3, #0]
   d51e8:	4b0a      	ldr	r3, [pc, #40]	; (d5214 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d51ea:	681a      	ldr	r2, [r3, #0]
   d51ec:	07d2      	lsls	r2, r2, #31
   d51ee:	bf5c      	itt	pl
   d51f0:	2201      	movpl	r2, #1
   d51f2:	601a      	strpl	r2, [r3, #0]
   d51f4:	4770      	bx	lr
   d51f6:	bf00      	nop
   d51f8:	2003e76c 	.word	0x2003e76c
   d51fc:	2003e768 	.word	0x2003e768
   d5200:	2003e764 	.word	0x2003e764
   d5204:	2003e760 	.word	0x2003e760
   d5208:	2003e75c 	.word	0x2003e75c
   d520c:	2003e758 	.word	0x2003e758
   d5210:	2003e754 	.word	0x2003e754
   d5214:	2003e750 	.word	0x2003e750

000d5218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5218:	4b24      	ldr	r3, [pc, #144]	; (d52ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d521a:	681a      	ldr	r2, [r3, #0]
   d521c:	07d0      	lsls	r0, r2, #31
   d521e:	bf5c      	itt	pl
   d5220:	2201      	movpl	r2, #1
   d5222:	601a      	strpl	r2, [r3, #0]
   d5224:	4b22      	ldr	r3, [pc, #136]	; (d52b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5226:	681a      	ldr	r2, [r3, #0]
   d5228:	07d1      	lsls	r1, r2, #31
   d522a:	bf5c      	itt	pl
   d522c:	2201      	movpl	r2, #1
   d522e:	601a      	strpl	r2, [r3, #0]
   d5230:	4b20      	ldr	r3, [pc, #128]	; (d52b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5232:	681a      	ldr	r2, [r3, #0]
   d5234:	07d2      	lsls	r2, r2, #31
   d5236:	bf5c      	itt	pl
   d5238:	2201      	movpl	r2, #1
   d523a:	601a      	strpl	r2, [r3, #0]
   d523c:	4b1e      	ldr	r3, [pc, #120]	; (d52b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d523e:	681a      	ldr	r2, [r3, #0]
   d5240:	07d0      	lsls	r0, r2, #31
   d5242:	bf5c      	itt	pl
   d5244:	2201      	movpl	r2, #1
   d5246:	601a      	strpl	r2, [r3, #0]
   d5248:	4b1c      	ldr	r3, [pc, #112]	; (d52bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d524a:	681a      	ldr	r2, [r3, #0]
   d524c:	07d1      	lsls	r1, r2, #31
   d524e:	bf5c      	itt	pl
   d5250:	2201      	movpl	r2, #1
   d5252:	601a      	strpl	r2, [r3, #0]
   d5254:	4b1a      	ldr	r3, [pc, #104]	; (d52c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5256:	681a      	ldr	r2, [r3, #0]
   d5258:	07d2      	lsls	r2, r2, #31
   d525a:	bf5c      	itt	pl
   d525c:	2201      	movpl	r2, #1
   d525e:	601a      	strpl	r2, [r3, #0]
   d5260:	4b18      	ldr	r3, [pc, #96]	; (d52c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5262:	681a      	ldr	r2, [r3, #0]
   d5264:	07d0      	lsls	r0, r2, #31
   d5266:	bf5c      	itt	pl
   d5268:	2201      	movpl	r2, #1
   d526a:	601a      	strpl	r2, [r3, #0]
   d526c:	4b16      	ldr	r3, [pc, #88]	; (d52c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d526e:	681a      	ldr	r2, [r3, #0]
   d5270:	07d1      	lsls	r1, r2, #31
   d5272:	bf5c      	itt	pl
   d5274:	2201      	movpl	r2, #1
   d5276:	601a      	strpl	r2, [r3, #0]
   d5278:	4b14      	ldr	r3, [pc, #80]	; (d52cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d527a:	681a      	ldr	r2, [r3, #0]
   d527c:	07d2      	lsls	r2, r2, #31
   d527e:	bf5c      	itt	pl
   d5280:	2201      	movpl	r2, #1
   d5282:	601a      	strpl	r2, [r3, #0]
   d5284:	4b12      	ldr	r3, [pc, #72]	; (d52d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5286:	681a      	ldr	r2, [r3, #0]
   d5288:	07d0      	lsls	r0, r2, #31
   d528a:	bf5c      	itt	pl
   d528c:	2201      	movpl	r2, #1
   d528e:	601a      	strpl	r2, [r3, #0]
   d5290:	4b10      	ldr	r3, [pc, #64]	; (d52d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5292:	681a      	ldr	r2, [r3, #0]
   d5294:	07d1      	lsls	r1, r2, #31
   d5296:	bf5c      	itt	pl
   d5298:	2201      	movpl	r2, #1
   d529a:	601a      	strpl	r2, [r3, #0]
   d529c:	4b0e      	ldr	r3, [pc, #56]	; (d52d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d529e:	681a      	ldr	r2, [r3, #0]
   d52a0:	07d2      	lsls	r2, r2, #31
   d52a2:	bf5c      	itt	pl
   d52a4:	2201      	movpl	r2, #1
   d52a6:	601a      	strpl	r2, [r3, #0]
   d52a8:	4770      	bx	lr
   d52aa:	bf00      	nop
   d52ac:	2003e79c 	.word	0x2003e79c
   d52b0:	2003e798 	.word	0x2003e798
   d52b4:	2003e794 	.word	0x2003e794
   d52b8:	2003e790 	.word	0x2003e790
   d52bc:	2003e78c 	.word	0x2003e78c
   d52c0:	2003e788 	.word	0x2003e788
   d52c4:	2003e784 	.word	0x2003e784
   d52c8:	2003e780 	.word	0x2003e780
   d52cc:	2003e77c 	.word	0x2003e77c
   d52d0:	2003e778 	.word	0x2003e778
   d52d4:	2003e774 	.word	0x2003e774
   d52d8:	2003e770 	.word	0x2003e770

000d52dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d52dc:	4b24      	ldr	r3, [pc, #144]	; (d5370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d52de:	681a      	ldr	r2, [r3, #0]
   d52e0:	07d0      	lsls	r0, r2, #31
   d52e2:	bf5c      	itt	pl
   d52e4:	2201      	movpl	r2, #1
   d52e6:	601a      	strpl	r2, [r3, #0]
   d52e8:	4b22      	ldr	r3, [pc, #136]	; (d5374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d52ea:	681a      	ldr	r2, [r3, #0]
   d52ec:	07d1      	lsls	r1, r2, #31
   d52ee:	bf5c      	itt	pl
   d52f0:	2201      	movpl	r2, #1
   d52f2:	601a      	strpl	r2, [r3, #0]
   d52f4:	4b20      	ldr	r3, [pc, #128]	; (d5378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d52f6:	681a      	ldr	r2, [r3, #0]
   d52f8:	07d2      	lsls	r2, r2, #31
   d52fa:	bf5c      	itt	pl
   d52fc:	2201      	movpl	r2, #1
   d52fe:	601a      	strpl	r2, [r3, #0]
   d5300:	4b1e      	ldr	r3, [pc, #120]	; (d537c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5302:	681a      	ldr	r2, [r3, #0]
   d5304:	07d0      	lsls	r0, r2, #31
   d5306:	bf5c      	itt	pl
   d5308:	2201      	movpl	r2, #1
   d530a:	601a      	strpl	r2, [r3, #0]
   d530c:	4b1c      	ldr	r3, [pc, #112]	; (d5380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d530e:	681a      	ldr	r2, [r3, #0]
   d5310:	07d1      	lsls	r1, r2, #31
   d5312:	bf5c      	itt	pl
   d5314:	2201      	movpl	r2, #1
   d5316:	601a      	strpl	r2, [r3, #0]
   d5318:	4b1a      	ldr	r3, [pc, #104]	; (d5384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d531a:	681a      	ldr	r2, [r3, #0]
   d531c:	07d2      	lsls	r2, r2, #31
   d531e:	bf5c      	itt	pl
   d5320:	2201      	movpl	r2, #1
   d5322:	601a      	strpl	r2, [r3, #0]
   d5324:	4b18      	ldr	r3, [pc, #96]	; (d5388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5326:	681a      	ldr	r2, [r3, #0]
   d5328:	07d0      	lsls	r0, r2, #31
   d532a:	bf5c      	itt	pl
   d532c:	2201      	movpl	r2, #1
   d532e:	601a      	strpl	r2, [r3, #0]
   d5330:	4b16      	ldr	r3, [pc, #88]	; (d538c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5332:	681a      	ldr	r2, [r3, #0]
   d5334:	07d1      	lsls	r1, r2, #31
   d5336:	bf5c      	itt	pl
   d5338:	2201      	movpl	r2, #1
   d533a:	601a      	strpl	r2, [r3, #0]
   d533c:	4b14      	ldr	r3, [pc, #80]	; (d5390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d533e:	681a      	ldr	r2, [r3, #0]
   d5340:	07d2      	lsls	r2, r2, #31
   d5342:	bf5c      	itt	pl
   d5344:	2201      	movpl	r2, #1
   d5346:	601a      	strpl	r2, [r3, #0]
   d5348:	4b12      	ldr	r3, [pc, #72]	; (d5394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d534a:	681a      	ldr	r2, [r3, #0]
   d534c:	07d0      	lsls	r0, r2, #31
   d534e:	bf5c      	itt	pl
   d5350:	2201      	movpl	r2, #1
   d5352:	601a      	strpl	r2, [r3, #0]
   d5354:	4b10      	ldr	r3, [pc, #64]	; (d5398 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5356:	681a      	ldr	r2, [r3, #0]
   d5358:	07d1      	lsls	r1, r2, #31
   d535a:	bf5c      	itt	pl
   d535c:	2201      	movpl	r2, #1
   d535e:	601a      	strpl	r2, [r3, #0]
   d5360:	4b0e      	ldr	r3, [pc, #56]	; (d539c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5362:	681a      	ldr	r2, [r3, #0]
   d5364:	07d2      	lsls	r2, r2, #31
   d5366:	bf5c      	itt	pl
   d5368:	2201      	movpl	r2, #1
   d536a:	601a      	strpl	r2, [r3, #0]
   d536c:	4770      	bx	lr
   d536e:	bf00      	nop
   d5370:	2003e7cc 	.word	0x2003e7cc
   d5374:	2003e7c8 	.word	0x2003e7c8
   d5378:	2003e7c4 	.word	0x2003e7c4
   d537c:	2003e7c0 	.word	0x2003e7c0
   d5380:	2003e7bc 	.word	0x2003e7bc
   d5384:	2003e7b8 	.word	0x2003e7b8
   d5388:	2003e7b4 	.word	0x2003e7b4
   d538c:	2003e7b0 	.word	0x2003e7b0
   d5390:	2003e7ac 	.word	0x2003e7ac
   d5394:	2003e7a8 	.word	0x2003e7a8
   d5398:	2003e7a4 	.word	0x2003e7a4
   d539c:	2003e7a0 	.word	0x2003e7a0

000d53a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d53a0:	4b18      	ldr	r3, [pc, #96]	; (d5404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d53a2:	681a      	ldr	r2, [r3, #0]
   d53a4:	07d1      	lsls	r1, r2, #31
   d53a6:	bf5c      	itt	pl
   d53a8:	2201      	movpl	r2, #1
   d53aa:	601a      	strpl	r2, [r3, #0]
   d53ac:	4b16      	ldr	r3, [pc, #88]	; (d5408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d53ae:	681a      	ldr	r2, [r3, #0]
   d53b0:	07d2      	lsls	r2, r2, #31
   d53b2:	bf5c      	itt	pl
   d53b4:	2201      	movpl	r2, #1
   d53b6:	601a      	strpl	r2, [r3, #0]
   d53b8:	4b14      	ldr	r3, [pc, #80]	; (d540c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d53ba:	681a      	ldr	r2, [r3, #0]
   d53bc:	07d0      	lsls	r0, r2, #31
   d53be:	bf5c      	itt	pl
   d53c0:	2201      	movpl	r2, #1
   d53c2:	601a      	strpl	r2, [r3, #0]
   d53c4:	4b12      	ldr	r3, [pc, #72]	; (d5410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d53c6:	681a      	ldr	r2, [r3, #0]
   d53c8:	07d1      	lsls	r1, r2, #31
   d53ca:	bf5c      	itt	pl
   d53cc:	2201      	movpl	r2, #1
   d53ce:	601a      	strpl	r2, [r3, #0]
   d53d0:	4b10      	ldr	r3, [pc, #64]	; (d5414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d53d2:	681a      	ldr	r2, [r3, #0]
   d53d4:	07d2      	lsls	r2, r2, #31
   d53d6:	bf5c      	itt	pl
   d53d8:	2201      	movpl	r2, #1
   d53da:	601a      	strpl	r2, [r3, #0]
   d53dc:	4b0e      	ldr	r3, [pc, #56]	; (d5418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d53de:	681a      	ldr	r2, [r3, #0]
   d53e0:	07d0      	lsls	r0, r2, #31
   d53e2:	bf5c      	itt	pl
   d53e4:	2201      	movpl	r2, #1
   d53e6:	601a      	strpl	r2, [r3, #0]
   d53e8:	4b0c      	ldr	r3, [pc, #48]	; (d541c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d53ea:	681a      	ldr	r2, [r3, #0]
   d53ec:	07d1      	lsls	r1, r2, #31
   d53ee:	bf5c      	itt	pl
   d53f0:	2201      	movpl	r2, #1
   d53f2:	601a      	strpl	r2, [r3, #0]
   d53f4:	4b0a      	ldr	r3, [pc, #40]	; (d5420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d53f6:	681a      	ldr	r2, [r3, #0]
   d53f8:	07d2      	lsls	r2, r2, #31
   d53fa:	bf5c      	itt	pl
   d53fc:	2201      	movpl	r2, #1
   d53fe:	601a      	strpl	r2, [r3, #0]
   d5400:	4770      	bx	lr
   d5402:	bf00      	nop
   d5404:	2003e7ec 	.word	0x2003e7ec
   d5408:	2003e7e8 	.word	0x2003e7e8
   d540c:	2003e7e4 	.word	0x2003e7e4
   d5410:	2003e7e0 	.word	0x2003e7e0
   d5414:	2003e7dc 	.word	0x2003e7dc
   d5418:	2003e7d8 	.word	0x2003e7d8
   d541c:	2003e7d4 	.word	0x2003e7d4
   d5420:	2003e7d0 	.word	0x2003e7d0

000d5424 <__cxa_atexit>:
   d5424:	b510      	push	{r4, lr}
   d5426:	4c05      	ldr	r4, [pc, #20]	; (d543c <__cxa_atexit+0x18>)
   d5428:	4613      	mov	r3, r2
   d542a:	b12c      	cbz	r4, d5438 <__cxa_atexit+0x14>
   d542c:	460a      	mov	r2, r1
   d542e:	4601      	mov	r1, r0
   d5430:	2002      	movs	r0, #2
   d5432:	f3af 8000 	nop.w
   d5436:	bd10      	pop	{r4, pc}
   d5438:	4620      	mov	r0, r4
   d543a:	bd10      	pop	{r4, pc}
   d543c:	00000000 	.word	0x00000000

000d5440 <memcpy>:
   d5440:	b510      	push	{r4, lr}
   d5442:	1e43      	subs	r3, r0, #1
   d5444:	440a      	add	r2, r1
   d5446:	4291      	cmp	r1, r2
   d5448:	d004      	beq.n	d5454 <memcpy+0x14>
   d544a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d544e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5452:	e7f8      	b.n	d5446 <memcpy+0x6>
   d5454:	bd10      	pop	{r4, pc}

000d5456 <memset>:
   d5456:	4402      	add	r2, r0
   d5458:	4603      	mov	r3, r0
   d545a:	4293      	cmp	r3, r2
   d545c:	d002      	beq.n	d5464 <memset+0xe>
   d545e:	f803 1b01 	strb.w	r1, [r3], #1
   d5462:	e7fa      	b.n	d545a <memset+0x4>
   d5464:	4770      	bx	lr
	...

000d5468 <srand>:
   d5468:	b538      	push	{r3, r4, r5, lr}
   d546a:	4b12      	ldr	r3, [pc, #72]	; (d54b4 <srand+0x4c>)
   d546c:	681c      	ldr	r4, [r3, #0]
   d546e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5470:	4605      	mov	r5, r0
   d5472:	b9d3      	cbnz	r3, d54aa <srand+0x42>
   d5474:	2018      	movs	r0, #24
   d5476:	f7ff f94f 	bl	d4718 <malloc>
   d547a:	f243 330e 	movw	r3, #13070	; 0x330e
   d547e:	63a0      	str	r0, [r4, #56]	; 0x38
   d5480:	8003      	strh	r3, [r0, #0]
   d5482:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5486:	8043      	strh	r3, [r0, #2]
   d5488:	f241 2334 	movw	r3, #4660	; 0x1234
   d548c:	8083      	strh	r3, [r0, #4]
   d548e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5492:	80c3      	strh	r3, [r0, #6]
   d5494:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d5498:	8103      	strh	r3, [r0, #8]
   d549a:	2305      	movs	r3, #5
   d549c:	8143      	strh	r3, [r0, #10]
   d549e:	230b      	movs	r3, #11
   d54a0:	8183      	strh	r3, [r0, #12]
   d54a2:	2201      	movs	r2, #1
   d54a4:	2300      	movs	r3, #0
   d54a6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d54aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d54ac:	2200      	movs	r2, #0
   d54ae:	611d      	str	r5, [r3, #16]
   d54b0:	615a      	str	r2, [r3, #20]
   d54b2:	bd38      	pop	{r3, r4, r5, pc}
   d54b4:	2003e3c0 	.word	0x2003e3c0

000d54b8 <strlen>:
   d54b8:	4603      	mov	r3, r0
   d54ba:	f813 2b01 	ldrb.w	r2, [r3], #1
   d54be:	2a00      	cmp	r2, #0
   d54c0:	d1fb      	bne.n	d54ba <strlen+0x2>
   d54c2:	1a18      	subs	r0, r3, r0
   d54c4:	3801      	subs	r0, #1
   d54c6:	4770      	bx	lr

000d54c8 <dynalib_user>:
   d54c8:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d54d8:	0000 0000                                   ....

000d54dc <_ZL16test_cmd_options>:
   d54dc:	2e3f 4f20 7470 6f69 736e 000a               ?. Options..

000d54e8 <_ZL14test_flash_cmd>:
   d54e8:	2e31 5420 7365 2074 4545 5250 4d4f 000a     1. Test EEPROM..
   d54f8:	540a 7365 6974 676e 6620 616c 6873 003a     .Testing flash:.

000d5508 <_ZL9test_fail>:
   d5508:	4146 4c49 2a00                                   FAIL.

000d550d <_ZL12test_padding>:
   d550d:	2a2a 2a2a 2a2a 2a2a 2a2a 000a               **********..

000d5519 <_ZL12test_success>:
   d5519:	5553 4343 5345 0053 0fe0 68ce 759a 0547     SUCCESS....h.uG.
   d5529:	9ae7 370e 6574 7473 622e 6f72 656b 2e72     ...7test.broker.
   d5539:	6f63 006d 0000 0000                              com....

000d5540 <_ZTVN5spark13EthernetClassE>:
	...
   d5548:	47a7 000d 479d 000d 4793 000d 4789 000d     .G...G...G...G..
   d5558:	477d 000d 4771 000d 4765 000d 475d 000d     }G..qG..eG..]G..
   d5568:	4753 000d 4749 000d 507d 000d 6162 6475     SG..IG..}P..baud
   d5578:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d5588:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d5598:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d55a8:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d55b8:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d55c8:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d55d8:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d55e8:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d55f8:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d5608:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d5618:	0d00 000a 0066 6e6c 6600 006e 6f63 6564     ....f.ln.fn.code
   d5628:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   d5638:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d5648:	726f 7000 6e61 6369 6100 6c6c 5a00 2500     or.panic.all.Z.%
   d5658:	302b 6433 253a 3230 0075 5925 252d 2d6d     +03d:%02u.%Y-%m-
   d5668:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
   d5678:	7463 6d69 0065 0000                         ctime...

000d5680 <_ZTV9IPAddress>:
	...
   d5688:	4b21 000d 4b11 000d 4b13 000d               !K...K...K..

000d5694 <_ZTV9USBSerial>:
	...
   d569c:	4bf9 000d 4c49 000d 4c57 000d 4905 000d     .K..IL..WL...I..
   d56ac:	4c35 000d 4bfb 000d 4c11 000d 4c43 000d     5L...K...L..CL..
   d56bc:	4c27 000d 4bf5 000d                         'L...K..

000d56c4 <_ZTVN5spark13CellularClassE>:
	...
   d56cc:	4d63 000d 4d59 000d 4d4f 000d 4d05 000d     cM..YM..OM...M..
   d56dc:	4d43 000d 4d37 000d 4d2b 000d 4d23 000d     CM..7M..+M..#M..
   d56ec:	4d19 000d 4d0f 000d 507d 000d               .M...M..}P..

000d56f8 <_ZTV11USARTSerial>:
	...
   d5700:	4d9d 000d 4ded 000d 4dfb 000d 4905 000d     .M...M...M...I..
   d5710:	4db1 000d 4dd3 000d 4dbf 000d 4de7 000d     .M...M...M...M..
   d5720:	4d9f 000d 4da3 000d                         .M...M..

000d5728 <_ZTVN5spark9MeshClassE>:
	...
   d5730:	4ef7 000d 4eed 000d 4ee3 000d 4ed9 000d     .N...N...N...N..
   d5740:	4ecd 000d 4ec1 000d 4eb5 000d 4ead 000d     .N...N...N...N..
   d5750:	4ea3 000d 4e99 000d 507d 000d               .N...N..}P..

000d575c <_ZTVN5spark12NetworkClassE>:
	...
   d5764:	5015 000d 501f 000d 5029 000d 5033 000d     .P...P..)P..3P..
   d5774:	503d 000d 5049 000d 5055 000d 5061 000d     =P..IP..UP..aP..
   d5784:	5069 000d 5073 000d 507d 000d               iP..sP..}P..

000d5790 <__sf_fake_stdin>:
	...

000d57b0 <__sf_fake_stdout>:
	...

000d57d0 <__sf_fake_stderr>:
	...
   d57f0:	0043                                        C.

000d57f2 <link_const_variable_data_end>:
	...

000d57f4 <link_constructors_location>:
   d57f4:	000d40d1 	.word	0x000d40d1
   d57f8:	000d4211 	.word	0x000d4211
   d57fc:	000d4459 	.word	0x000d4459
   d5800:	000d445d 	.word	0x000d445d
   d5804:	000d47b1 	.word	0x000d47b1
   d5808:	000d47e5 	.word	0x000d47e5
   d580c:	000d48dd 	.word	0x000d48dd
   d5810:	000d49a1 	.word	0x000d49a1
   d5814:	000d49b1 	.word	0x000d49b1
   d5818:	000d49e5 	.word	0x000d49e5
   d581c:	000d4d6d 	.word	0x000d4d6d
   d5820:	000d4fc5 	.word	0x000d4fc5
   d5824:	000d5149 	.word	0x000d5149
   d5828:	000d5195 	.word	0x000d5195
   d582c:	000d5219 	.word	0x000d5219
   d5830:	000d52dd 	.word	0x000d52dd
   d5834:	000d53a1 	.word	0x000d53a1

000d5838 <link_constructors_end>:
	...
