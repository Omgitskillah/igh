
c:/Users/Clarence.Alucho/Documents/git/igh/igh_shield/target/1.5.2/boron/igh_shield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003524  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7540  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e2bc  000d7544  0001e2bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004cc  2003e324  2003e324  0002e324  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d75ac  000d75ac  000275ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d75d4  000d75d4  000275d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000e96e3  00000000  00000000  000275d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001377f  00000000  00000000  00110cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00021b53  00000000  00000000  0012443a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000029f8  00000000  00000000  00145f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004bb0  00000000  00000000  00148985  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00039684  00000000  00000000  0014d535  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00031b8e  00000000  00000000  00186bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001067ad  00000000  00000000  001b8747  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000dac4  00000000  00000000  002beef4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 ff97 	bl	d6f60 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 ff9c 	bl	d6f76 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2bc 	.word	0x2003e2bc
   d4048:	000d7544 	.word	0x000d7544
   d404c:	2003e324 	.word	0x2003e324
   d4050:	2003e324 	.word	0x2003e324
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fbd9 	bl	d5810 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d753c 	.word	0x000d753c
   d4080:	000d74f4 	.word	0x000d74f4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b820 	b.w	d40c8 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f824 	bl	d40d6 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bb7f 	b.w	d5794 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 bf39 	b.w	d4f0c <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 bf37 	b.w	d4f0c <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <igh_settings_calculate_checksum>:
 * struct must have a single byte at the end designated for the checksum for this to work
 * \param p_struct: pointer to data struct, total_bytes: sizeof(data struct)
 * \return the checksum
 */
uint8_t igh_settings_calculate_checksum(void * p_struct, size_t total_bytes)
{
   d40ae:	b510      	push	{r4, lr}
    data = (uint8_t *)p_struct;

    // uint8_t data_buffer[length];
    // memcpy(data_buffer, data, length);

    data += 1; // ignore checksum byte
   d40b0:	1c42      	adds	r2, r0, #1
 */
uint8_t igh_settings_calculate_checksum(void * p_struct, size_t total_bytes)
{
    uint8_t length = (uint8_t)total_bytes; 
    uint8_t * data;
    int sum = 0;
   d40b2:	2300      	movs	r3, #0
    // uint8_t data_buffer[length];
    // memcpy(data_buffer, data, length);

    data += 1; // ignore checksum byte
    // start at 1 to ignore the checksum byte
    for( int i = 1; i < length; i++)
   d40b4:	b2c9      	uxtb	r1, r1
   d40b6:	1a14      	subs	r4, r2, r0
   d40b8:	42a1      	cmp	r1, r4
   d40ba:	dd03      	ble.n	d40c4 <igh_settings_calculate_checksum+0x16>
    {
        sum += (0xFF & *data++);
   d40bc:	f812 4b01 	ldrb.w	r4, [r2], #1
   d40c0:	4423      	add	r3, r4
   d40c2:	e7f8      	b.n	d40b6 <igh_settings_calculate_checksum+0x8>
    }

    checksum = (uint8_t)(sum % 256);

    return checksum;
}
   d40c4:	b2d8      	uxtb	r0, r3
   d40c6:	bd10      	pop	{r4, pc}

000d40c8 <setup>:
#endif

SYSTEM_THREAD(ENABLED);

void setup() 
{
   d40c8:	b508      	push	{r3, lr}
#ifdef TEST_MODE
    // go into test mode
    igh_log_begin();
   d40ca:	f000 f859 	bl	d4180 <_Z13igh_log_beginv>
#endif
    igh_boron_setup();
}
   d40ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
#ifdef TEST_MODE
    // go into test mode
    igh_log_begin();
#endif
    igh_boron_setup();
   d40d2:	f000 bbf1 	b.w	d48b8 <_Z15igh_boron_setupv>

000d40d6 <loop>:
}

void loop() 
{
   d40d6:	b508      	push	{r3, lr}
#ifdef TEST_MODE
    // process test commands
    igh_process_serial_cmd(); 
   d40d8:	f000 f85c 	bl	d4194 <_Z22igh_process_serial_cmdv>
#endif
    igh_boron_service();
   d40dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
#ifdef TEST_MODE
    // process test commands
    igh_process_serial_cmd(); 
#endif
    igh_boron_service();
   d40e0:	f000 bb5e 	b.w	d47a0 <_Z17igh_boron_servicev>

000d40e4 <_GLOBAL__sub_I_setup>:
   d40e4:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d40e6:	f000 fca5 	bl	d4a34 <HAL_Pin_Map>
#define TEST_MODE
#ifdef TEST_MODE
#include "particle_api/igh_log.h"
#endif

SYSTEM_THREAD(ENABLED);
   d40ea:	2100      	movs	r1, #0
   d40ec:	2001      	movs	r0, #1
#ifdef TEST_MODE
    // process test commands
    igh_process_serial_cmd(); 
#endif
    igh_boron_service();
   d40ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#define TEST_MODE
#ifdef TEST_MODE
#include "particle_api/igh_log.h"
#endif

SYSTEM_THREAD(ENABLED);
   d40f2:	f000 be67 	b.w	d4dc4 <system_thread_set_state>

000d40f6 <_Z13igh_log_print6String>:
    }
    return 0;
}

void igh_log_print(String _str)
{
   d40f6:	b510      	push	{r4, lr}
   d40f8:	4604      	mov	r4, r0
    Serial.print(_str);
   d40fa:	f001 fc89 	bl	d5a10 <_Z16_fetch_usbserialv>
   d40fe:	6821      	ldr	r1, [r4, #0]
}
   d4100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return 0;
}

void igh_log_print(String _str)
{
    Serial.print(_str);
   d4104:	f001 b884 	b.w	d5210 <_ZN5Print5printEPKc>

000d4108 <_ZL22igh_append_test_statush.part.1>:
    igh_log_print(test_button_press);
    // Add more tests here
    igh_log_print(test_padding);
}

static void igh_append_test_status(uint8_t _status)
   d4108:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
    if(_status)
    {
        igh_log_print(test_success); igh_log_print("\n");
   d410a:	490b      	ldr	r1, [pc, #44]	; (d4138 <_ZL22igh_append_test_statush.part.1+0x30>)
   d410c:	4668      	mov	r0, sp
   d410e:	f001 f806 	bl	d511e <_ZN6StringC1EPK19__FlashStringHelper>
   d4112:	4668      	mov	r0, sp
   d4114:	f7ff ffef 	bl	d40f6 <_Z13igh_log_print6String>
   d4118:	4668      	mov	r0, sp
   d411a:	f000 ffb9 	bl	d5090 <_ZN6StringD1Ev>
   d411e:	4907      	ldr	r1, [pc, #28]	; (d413c <_ZL22igh_append_test_statush.part.1+0x34>)
   d4120:	4668      	mov	r0, sp
   d4122:	f000 fffc 	bl	d511e <_ZN6StringC1EPK19__FlashStringHelper>
   d4126:	4668      	mov	r0, sp
   d4128:	f7ff ffe5 	bl	d40f6 <_Z13igh_log_print6String>
   d412c:	4668      	mov	r0, sp
   d412e:	f000 ffaf 	bl	d5090 <_ZN6StringD1Ev>
    }
    else
    {
        igh_log_print(test_fail); igh_log_print("\n");
    }   
}
   d4132:	b005      	add	sp, #20
   d4134:	f85d fb04 	ldr.w	pc, [sp], #4
   d4138:	000d7106 	.word	0x000d7106
   d413c:	000d72bc 	.word	0x000d72bc

000d4140 <_ZL22igh_append_test_statush>:
    // Add more tests here
    igh_log_print(test_padding);
}

static void igh_append_test_status(uint8_t _status)
{
   d4140:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if(_status)
   d4142:	b110      	cbz	r0, d414a <_ZL22igh_append_test_statush+0xa>
   d4144:	f7ff ffe0 	bl	d4108 <_ZL22igh_append_test_statush.part.1>
   d4148:	e013      	b.n	d4172 <_ZL22igh_append_test_statush+0x32>
    {
        igh_log_print(test_success); igh_log_print("\n");
    }
    else
    {
        igh_log_print(test_fail); igh_log_print("\n");
   d414a:	490b      	ldr	r1, [pc, #44]	; (d4178 <_ZL22igh_append_test_statush+0x38>)
   d414c:	4668      	mov	r0, sp
   d414e:	f000 ffe6 	bl	d511e <_ZN6StringC1EPK19__FlashStringHelper>
   d4152:	4668      	mov	r0, sp
   d4154:	f7ff ffcf 	bl	d40f6 <_Z13igh_log_print6String>
   d4158:	4668      	mov	r0, sp
   d415a:	f000 ff99 	bl	d5090 <_ZN6StringD1Ev>
   d415e:	4907      	ldr	r1, [pc, #28]	; (d417c <_ZL22igh_append_test_statush+0x3c>)
   d4160:	4668      	mov	r0, sp
   d4162:	f000 ffdc 	bl	d511e <_ZN6StringC1EPK19__FlashStringHelper>
   d4166:	4668      	mov	r0, sp
   d4168:	f7ff ffc5 	bl	d40f6 <_Z13igh_log_print6String>
   d416c:	4668      	mov	r0, sp
   d416e:	f000 ff8f 	bl	d5090 <_ZN6StringD1Ev>
    }   
}
   d4172:	b005      	add	sp, #20
   d4174:	f85d fb04 	ldr.w	pc, [sp], #4
   d4178:	000d70de 	.word	0x000d70de
   d417c:	000d72bc 	.word	0x000d72bc

000d4180 <_Z13igh_log_beginv>:
{
    Serial.print(_str);
}

void igh_log_begin(void)
{
   d4180:	b508      	push	{r3, lr}
    Serial.begin(IGH_LOG_BAUD);
   d4182:	f001 fc45 	bl	d5a10 <_Z16_fetch_usbserialv>
   d4186:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
}
   d418a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.print(_str);
}

void igh_log_begin(void)
{
    Serial.begin(IGH_LOG_BAUD);
   d418e:	f001 bc33 	b.w	d59f8 <_ZN9USBSerial5beginEl>
	...

000d4194 <_Z22igh_process_serial_cmdv>:
        igh_log_print(test_fail); igh_log_print("\n");
    }   
}

uint8_t igh_process_serial_cmd(void)
{
   d4194:	b530      	push	{r4, r5, lr}
   d4196:	b089      	sub	sp, #36	; 0x24
    uint8_t ret = 0;
    char resp[10];
    memset(resp, '\0', sizeof(resp));
   d4198:	2300      	movs	r3, #0
   d419a:	9301      	str	r3, [sp, #4]
   d419c:	9302      	str	r3, [sp, #8]
   d419e:	f8ad 300c 	strh.w	r3, [sp, #12]
static void print_cmd_options(void);
static void igh_append_test_status(uint8_t _status);

static uint8_t igh_log_read(char * _ch)
{
    if( Serial.available() )
   d41a2:	f001 fc35 	bl	d5a10 <_Z16_fetch_usbserialv>
   d41a6:	6803      	ldr	r3, [r0, #0]
   d41a8:	691b      	ldr	r3, [r3, #16]
   d41aa:	4798      	blx	r3
   d41ac:	b198      	cbz	r0, d41d6 <_Z22igh_process_serial_cmdv+0x42>
    {
        *_ch = Serial.read();
   d41ae:	f001 fc2f 	bl	d5a10 <_Z16_fetch_usbserialv>
   d41b2:	6803      	ldr	r3, [r0, #0]
   d41b4:	695b      	ldr	r3, [r3, #20]
   d41b6:	4798      	blx	r3
   d41b8:	b2c5      	uxtb	r5, r0
        while (Serial.available()) Serial.read(); // remove any other data
   d41ba:	f001 fc29 	bl	d5a10 <_Z16_fetch_usbserialv>
   d41be:	6803      	ldr	r3, [r0, #0]
   d41c0:	691b      	ldr	r3, [r3, #16]
   d41c2:	4798      	blx	r3
   d41c4:	4604      	mov	r4, r0
   d41c6:	2800      	cmp	r0, #0
   d41c8:	d03a      	beq.n	d4240 <_Z22igh_process_serial_cmdv+0xac>
   d41ca:	f001 fc21 	bl	d5a10 <_Z16_fetch_usbserialv>
   d41ce:	6803      	ldr	r3, [r0, #0]
   d41d0:	695b      	ldr	r3, [r3, #20]
   d41d2:	4798      	blx	r3
   d41d4:	e7f1      	b.n	d41ba <_Z22igh_process_serial_cmdv+0x26>
    }   
}

uint8_t igh_process_serial_cmd(void)
{
    uint8_t ret = 0;
   d41d6:	4604      	mov	r4, r0
   d41d8:	e011      	b.n	d41fe <_Z22igh_process_serial_cmdv+0x6a>
    memset(resp, '\0', sizeof(resp));

    char serial_cmd = '\0';
    if( igh_log_read(&serial_cmd) )
    {
        switch(serial_cmd)
   d41da:	d839      	bhi.n	d4250 <_Z22igh_process_serial_cmdv+0xbc>
   d41dc:	2d31      	cmp	r5, #49	; 0x31
   d41de:	d135      	bne.n	d424c <_Z22igh_process_serial_cmdv+0xb8>
        {
            case test_flash:
                igh_log_print(F("\nTesting flash:"));
   d41e0:	4966      	ldr	r1, [pc, #408]	; (d437c <_Z22igh_process_serial_cmdv+0x1e8>)
   d41e2:	a804      	add	r0, sp, #16
   d41e4:	f000 ff9b 	bl	d511e <_ZN6StringC1EPK19__FlashStringHelper>
   d41e8:	a804      	add	r0, sp, #16
   d41ea:	f7ff ff84 	bl	d40f6 <_Z13igh_log_print6String>
   d41ee:	a804      	add	r0, sp, #16
   d41f0:	f000 ff4e 	bl	d5090 <_ZN6StringD1Ev>
                ret = igh_eeproom_test(); // this should be true based on actual test
   d41f4:	f000 f97a 	bl	d44ec <_Z16igh_eeproom_testv>
   d41f8:	4604      	mov	r4, r0
                igh_append_test_status(ret);  
   d41fa:	f7ff ffa1 	bl	d4140 <_ZL22igh_append_test_statush>
    {
        // Do nothing;
    }

    // Test button routine
    if(test_button_flag)
   d41fe:	4b60      	ldr	r3, [pc, #384]	; (d4380 <_Z22igh_process_serial_cmdv+0x1ec>)
   d4200:	781a      	ldrb	r2, [r3, #0]
   d4202:	461d      	mov	r5, r3
   d4204:	2a00      	cmp	r2, #0
   d4206:	f000 80b5 	beq.w	d4374 <_Z22igh_process_serial_cmdv+0x1e0>
    {
        if(igh_button_sec_counter >= button_test_duration)
   d420a:	4b5e      	ldr	r3, [pc, #376]	; (d4384 <_Z22igh_process_serial_cmdv+0x1f0>)
   d420c:	781a      	ldrb	r2, [r3, #0]
   d420e:	4b5e      	ldr	r3, [pc, #376]	; (d4388 <_Z22igh_process_serial_cmdv+0x1f4>)
   d4210:	781b      	ldrb	r3, [r3, #0]
   d4212:	429a      	cmp	r2, r3
   d4214:	d304      	bcc.n	d4220 <_Z22igh_process_serial_cmdv+0x8c>
   d4216:	f7ff ff77 	bl	d4108 <_ZL22igh_append_test_statush.part.1>
        {
            ret = 1;
            igh_append_test_status(ret);
            test_button_flag = false;
   d421a:	2300      	movs	r3, #0
   d421c:	702b      	strb	r3, [r5, #0]
    // Test button routine
    if(test_button_flag)
    {
        if(igh_button_sec_counter >= button_test_duration)
        {
            ret = 1;
   d421e:	2401      	movs	r4, #1

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4220:	f000 fc48 	bl	d4ab4 <HAL_Timer_Get_Milli_Seconds>
            igh_append_test_status(ret);
            test_button_flag = false;
        }

        if( (millis() - test_button_timeout_counter) >= test_button_timeout )
   d4224:	4b59      	ldr	r3, [pc, #356]	; (d438c <_Z22igh_process_serial_cmdv+0x1f8>)
   d4226:	681b      	ldr	r3, [r3, #0]
   d4228:	1ac0      	subs	r0, r0, r3
   d422a:	4b59      	ldr	r3, [pc, #356]	; (d4390 <_Z22igh_process_serial_cmdv+0x1fc>)
   d422c:	681b      	ldr	r3, [r3, #0]
   d422e:	4298      	cmp	r0, r3
   d4230:	f0c0 80a0 	bcc.w	d4374 <_Z22igh_process_serial_cmdv+0x1e0>
        {
            ret = 0;
            igh_append_test_status(ret);
   d4234:	2000      	movs	r0, #0
            test_button_flag = false;
   d4236:	2400      	movs	r4, #0
        }

        if( (millis() - test_button_timeout_counter) >= test_button_timeout )
        {
            ret = 0;
            igh_append_test_status(ret);
   d4238:	f7ff ff82 	bl	d4140 <_ZL22igh_append_test_statush>
            test_button_flag = false;
   d423c:	702c      	strb	r4, [r5, #0]
        }
    }

    return ret;
   d423e:	e099      	b.n	d4374 <_Z22igh_process_serial_cmdv+0x1e0>
    memset(resp, '\0', sizeof(resp));

    char serial_cmd = '\0';
    if( igh_log_read(&serial_cmd) )
    {
        switch(serial_cmd)
   d4240:	2d32      	cmp	r5, #50	; 0x32
   d4242:	d1ca      	bne.n	d41da <_Z22igh_process_serial_cmdv+0x46>
                print_cmd_options();
                ret = 1;
                break;

            case test_device:
                igh_boron_test_device();
   d4244:	f000 fab4 	bl	d47b0 <_Z21igh_boron_test_devicev>
                ret = 1;
   d4248:	2401      	movs	r4, #1
                break;
   d424a:	e7d8      	b.n	d41fe <_Z22igh_process_serial_cmdv+0x6a>
    }   
}

uint8_t igh_process_serial_cmd(void)
{
    uint8_t ret = 0;
   d424c:	2400      	movs	r4, #0
   d424e:	e7d6      	b.n	d41fe <_Z22igh_process_serial_cmdv+0x6a>
    memset(resp, '\0', sizeof(resp));

    char serial_cmd = '\0';
    if( igh_log_read(&serial_cmd) )
    {
        switch(serial_cmd)
   d4250:	2d33      	cmp	r5, #51	; 0x33
   d4252:	d13c      	bne.n	d42ce <_Z22igh_process_serial_cmdv+0x13a>
                igh_boron_test_device();
                ret = 1;
                break;

            case test_button:
                button_test_duration = random(5); // get a random number to test button press duration
   d4254:	2005      	movs	r0, #5
   d4256:	f001 fd96 	bl	d5d86 <_Z6randomi>
   d425a:	4d4b      	ldr	r5, [pc, #300]	; (d4388 <_Z22igh_process_serial_cmdv+0x1f4>)
                igh_log_print(F("\nPress button for: ")); igh_log_print(String(button_test_duration)); igh_log_print(F(" Seconds"));
   d425c:	494d      	ldr	r1, [pc, #308]	; (d4394 <_Z22igh_process_serial_cmdv+0x200>)
                igh_boron_test_device();
                ret = 1;
                break;

            case test_button:
                button_test_duration = random(5); // get a random number to test button press duration
   d425e:	7028      	strb	r0, [r5, #0]
                igh_log_print(F("\nPress button for: ")); igh_log_print(String(button_test_duration)); igh_log_print(F(" Seconds"));
   d4260:	a804      	add	r0, sp, #16
   d4262:	f000 ff5c 	bl	d511e <_ZN6StringC1EPK19__FlashStringHelper>
   d4266:	a804      	add	r0, sp, #16
   d4268:	f7ff ff45 	bl	d40f6 <_Z13igh_log_print6String>
   d426c:	a804      	add	r0, sp, #16
   d426e:	f000 ff0f 	bl	d5090 <_ZN6StringD1Ev>
   d4272:	220a      	movs	r2, #10
   d4274:	7829      	ldrb	r1, [r5, #0]
   d4276:	a804      	add	r0, sp, #16
   d4278:	f000 ff75 	bl	d5166 <_ZN6StringC1Ehh>
   d427c:	a804      	add	r0, sp, #16
   d427e:	f7ff ff3a 	bl	d40f6 <_Z13igh_log_print6String>
   d4282:	a804      	add	r0, sp, #16
   d4284:	f000 ff04 	bl	d5090 <_ZN6StringD1Ev>
   d4288:	4943      	ldr	r1, [pc, #268]	; (d4398 <_Z22igh_process_serial_cmdv+0x204>)
   d428a:	a804      	add	r0, sp, #16
   d428c:	f000 ff47 	bl	d511e <_ZN6StringC1EPK19__FlashStringHelper>
   d4290:	a804      	add	r0, sp, #16
   d4292:	f7ff ff30 	bl	d40f6 <_Z13igh_log_print6String>
   d4296:	a804      	add	r0, sp, #16
   d4298:	f000 fefa 	bl	d5090 <_ZN6StringD1Ev>
                igh_log_print(F("\nTesting Button:"));
   d429c:	493f      	ldr	r1, [pc, #252]	; (d439c <_Z22igh_process_serial_cmdv+0x208>)
   d429e:	a804      	add	r0, sp, #16
   d42a0:	f000 ff3d 	bl	d511e <_ZN6StringC1EPK19__FlashStringHelper>
   d42a4:	a804      	add	r0, sp, #16
   d42a6:	f7ff ff26 	bl	d40f6 <_Z13igh_log_print6String>
   d42aa:	a804      	add	r0, sp, #16
   d42ac:	f000 fef0 	bl	d5090 <_ZN6StringD1Ev>
                test_button_flag = 1;
   d42b0:	4b33      	ldr	r3, [pc, #204]	; (d4380 <_Z22igh_process_serial_cmdv+0x1ec>)
   d42b2:	2201      	movs	r2, #1
   d42b4:	701a      	strb	r2, [r3, #0]
                test_button_timeout = (button_test_duration + 5) * 1000; // + 5 gives you at least 5 seconds to start pressing
   d42b6:	782b      	ldrb	r3, [r5, #0]
   d42b8:	1d5a      	adds	r2, r3, #5
   d42ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d42be:	4353      	muls	r3, r2
   d42c0:	4a33      	ldr	r2, [pc, #204]	; (d4390 <_Z22igh_process_serial_cmdv+0x1fc>)
   d42c2:	6013      	str	r3, [r2, #0]
   d42c4:	f000 fbf6 	bl	d4ab4 <HAL_Timer_Get_Milli_Seconds>
                test_button_timeout_counter = millis();
   d42c8:	4b30      	ldr	r3, [pc, #192]	; (d438c <_Z22igh_process_serial_cmdv+0x1f8>)
   d42ca:	6018      	str	r0, [r3, #0]
                break;
   d42cc:	e797      	b.n	d41fe <_Z22igh_process_serial_cmdv+0x6a>
    memset(resp, '\0', sizeof(resp));

    char serial_cmd = '\0';
    if( igh_log_read(&serial_cmd) )
    {
        switch(serial_cmd)
   d42ce:	2d3f      	cmp	r5, #63	; 0x3f
   d42d0:	d1bc      	bne.n	d424c <_Z22igh_process_serial_cmdv+0xb8>
    Serial.begin(IGH_LOG_BAUD);
}

static void print_cmd_options(void)
{
    igh_log_print(test_padding);
   d42d2:	4933      	ldr	r1, [pc, #204]	; (d43a0 <_Z22igh_process_serial_cmdv+0x20c>)
   d42d4:	a804      	add	r0, sp, #16
   d42d6:	f000 ff22 	bl	d511e <_ZN6StringC1EPK19__FlashStringHelper>
   d42da:	a804      	add	r0, sp, #16
   d42dc:	f7ff ff0b 	bl	d40f6 <_Z13igh_log_print6String>
   d42e0:	a804      	add	r0, sp, #16
   d42e2:	f000 fed5 	bl	d5090 <_ZN6StringD1Ev>
    igh_log_print(test_header);
   d42e6:	492f      	ldr	r1, [pc, #188]	; (d43a4 <_Z22igh_process_serial_cmdv+0x210>)
   d42e8:	a804      	add	r0, sp, #16
   d42ea:	f000 ff18 	bl	d511e <_ZN6StringC1EPK19__FlashStringHelper>
   d42ee:	a804      	add	r0, sp, #16
   d42f0:	f7ff ff01 	bl	d40f6 <_Z13igh_log_print6String>
   d42f4:	a804      	add	r0, sp, #16
   d42f6:	f000 fecb 	bl	d5090 <_ZN6StringD1Ev>
    igh_log_print(test_padding);
   d42fa:	4929      	ldr	r1, [pc, #164]	; (d43a0 <_Z22igh_process_serial_cmdv+0x20c>)
   d42fc:	a804      	add	r0, sp, #16
   d42fe:	f000 ff0e 	bl	d511e <_ZN6StringC1EPK19__FlashStringHelper>
   d4302:	a804      	add	r0, sp, #16
   d4304:	f7ff fef7 	bl	d40f6 <_Z13igh_log_print6String>
   d4308:	a804      	add	r0, sp, #16
   d430a:	f000 fec1 	bl	d5090 <_ZN6StringD1Ev>
    igh_log_print(test_cmd_options);
   d430e:	4926      	ldr	r1, [pc, #152]	; (d43a8 <_Z22igh_process_serial_cmdv+0x214>)
   d4310:	a804      	add	r0, sp, #16
   d4312:	f000 ff04 	bl	d511e <_ZN6StringC1EPK19__FlashStringHelper>
   d4316:	a804      	add	r0, sp, #16
   d4318:	f7ff feed 	bl	d40f6 <_Z13igh_log_print6String>
   d431c:	a804      	add	r0, sp, #16
   d431e:	f000 feb7 	bl	d5090 <_ZN6StringD1Ev>
    igh_log_print(test_flash_cmd);
   d4322:	4922      	ldr	r1, [pc, #136]	; (d43ac <_Z22igh_process_serial_cmdv+0x218>)
   d4324:	a804      	add	r0, sp, #16
   d4326:	f000 fefa 	bl	d511e <_ZN6StringC1EPK19__FlashStringHelper>
   d432a:	a804      	add	r0, sp, #16
   d432c:	f7ff fee3 	bl	d40f6 <_Z13igh_log_print6String>
   d4330:	a804      	add	r0, sp, #16
   d4332:	f000 fead 	bl	d5090 <_ZN6StringD1Ev>
    igh_log_print(test_device_api);
   d4336:	491e      	ldr	r1, [pc, #120]	; (d43b0 <_Z22igh_process_serial_cmdv+0x21c>)
   d4338:	a804      	add	r0, sp, #16
   d433a:	f000 fef0 	bl	d511e <_ZN6StringC1EPK19__FlashStringHelper>
   d433e:	a804      	add	r0, sp, #16
   d4340:	f7ff fed9 	bl	d40f6 <_Z13igh_log_print6String>
   d4344:	a804      	add	r0, sp, #16
   d4346:	f000 fea3 	bl	d5090 <_ZN6StringD1Ev>
    igh_log_print(test_button_press);
   d434a:	491a      	ldr	r1, [pc, #104]	; (d43b4 <_Z22igh_process_serial_cmdv+0x220>)
   d434c:	a804      	add	r0, sp, #16
   d434e:	f000 fee6 	bl	d511e <_ZN6StringC1EPK19__FlashStringHelper>
   d4352:	a804      	add	r0, sp, #16
   d4354:	f7ff fecf 	bl	d40f6 <_Z13igh_log_print6String>
   d4358:	a804      	add	r0, sp, #16
   d435a:	f000 fe99 	bl	d5090 <_ZN6StringD1Ev>
    // Add more tests here
    igh_log_print(test_padding);
   d435e:	4910      	ldr	r1, [pc, #64]	; (d43a0 <_Z22igh_process_serial_cmdv+0x20c>)
   d4360:	a804      	add	r0, sp, #16
   d4362:	f000 fedc 	bl	d511e <_ZN6StringC1EPK19__FlashStringHelper>
   d4366:	a804      	add	r0, sp, #16
   d4368:	f7ff fec5 	bl	d40f6 <_Z13igh_log_print6String>
   d436c:	a804      	add	r0, sp, #16
   d436e:	f000 fe8f 	bl	d5090 <_ZN6StringD1Ev>
   d4372:	e769      	b.n	d4248 <_Z22igh_process_serial_cmdv+0xb4>
            test_button_flag = false;
        }
    }

    return ret;
   d4374:	4620      	mov	r0, r4
   d4376:	b009      	add	sp, #36	; 0x24
   d4378:	bd30      	pop	{r4, r5, pc}
   d437a:	bf00      	nop
   d437c:	000d70a0 	.word	0x000d70a0
   d4380:	2003e32d 	.word	0x2003e32d
   d4384:	2003e35c 	.word	0x2003e35c
   d4388:	2003e32c 	.word	0x2003e32c
   d438c:	2003e330 	.word	0x2003e330
   d4390:	2003e328 	.word	0x2003e328
   d4394:	000d70b0 	.word	0x000d70b0
   d4398:	000d70c4 	.word	0x000d70c4
   d439c:	000d70cd 	.word	0x000d70cd
   d43a0:	000d70f4 	.word	0x000d70f4
   d43a4:	000d70e4 	.word	0x000d70e4
   d43a8:	000d7070 	.word	0x000d7070
   d43ac:	000d7090 	.word	0x000d7090
   d43b0:	000d707c 	.word	0x000d707c
   d43b4:	000d7109 	.word	0x000d7109

000d43b8 <_GLOBAL__sub_I_button_test_duration>:
   d43b8:	f000 bb3c 	b.w	d4a34 <HAL_Pin_Map>

000d43bc <_Z24igh_eeprom_update_errorsm>:
 * \brief Save errors bit field
 * \param error_bit_field: error bit field
 * \return void
 */
void igh_eeprom_update_errors(uint32_t error_bit_field)
{
   d43bc:	b513      	push	{r0, r1, r4, lr}
   d43be:	ac02      	add	r4, sp, #8
   d43c0:	f844 0d04 	str.w	r0, [r4, #-4]!
    EEPROM.put(SYSTEM_ERRORS_ADDRESS, error_bit_field);
   d43c4:	f001 fec0 	bl	d6148 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d43c8:	2204      	movs	r2, #4
   d43ca:	4621      	mov	r1, r4
   d43cc:	f44f 6080 	mov.w	r0, #1024	; 0x400
   d43d0:	f000 fb90 	bl	d4af4 <HAL_EEPROM_Put>
}
   d43d4:	b002      	add	sp, #8
   d43d6:	bd10      	pop	{r4, pc}

000d43d8 <_Z31igh_eeprom_read_system_settingsP15system_settings>:
 * \brief Gets system settings from eeprom emulator
 * \param running_system_settings_buffer: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_system_settings(system_settings * running_system_settings_buffer)
{
   d43d8:	b530      	push	{r4, r5, lr}
   d43da:	b091      	sub	sp, #68	; 0x44
  system_settings local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d43dc:	223c      	movs	r2, #60	; 0x3c
   d43de:	2100      	movs	r1, #0
 * \brief Gets system settings from eeprom emulator
 * \param running_system_settings_buffer: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_system_settings(system_settings * running_system_settings_buffer)
{
   d43e0:	4605      	mov	r5, r0
  system_settings local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d43e2:	a801      	add	r0, sp, #4
   d43e4:	f002 fdc7 	bl	d6f76 <memset>
  EEPROM.get(SYSTEM_SETTINGS_ADDRESS, local_buffer);
   d43e8:	f001 feae 	bl	d6148 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d43ec:	223c      	movs	r2, #60	; 0x3c
   d43ee:	a901      	add	r1, sp, #4
   d43f0:	2000      	movs	r0, #0
   d43f2:	f000 fb77 	bl	d4ae4 <HAL_EEPROM_Get>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));
   d43f6:	213c      	movs	r1, #60	; 0x3c
   d43f8:	a801      	add	r0, sp, #4
   d43fa:	f7ff fe58 	bl	d40ae <igh_settings_calculate_checksum>

  if( checksum != local_buffer.checksum)
   d43fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4402:	4283      	cmp	r3, r0
   d4404:	d10c      	bne.n	d4420 <_Z31igh_eeprom_read_system_settingsP15system_settings+0x48>
  {
    return 0;
  }

  *running_system_settings_buffer = local_buffer;
   d4406:	ac01      	add	r4, sp, #4
   d4408:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d440a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d440c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d440e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4410:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4412:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4414:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   d4418:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  return 1;
   d441c:	2001      	movs	r0, #1
   d441e:	e000      	b.n	d4422 <_Z31igh_eeprom_read_system_settingsP15system_settings+0x4a>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));

  if( checksum != local_buffer.checksum)
  {
    return 0;
   d4420:	2000      	movs	r0, #0
  }

  *running_system_settings_buffer = local_buffer;
  return 1;

}
   d4422:	b011      	add	sp, #68	; 0x44
   d4424:	bd30      	pop	{r4, r5, pc}

000d4426 <_Z31igh_eeprom_save_system_settingsP15system_settings>:
 * \brief Save system settings  to eeprom emulator
 * \param settings_to_save: pointer to struct to save
 * \return true or false based on write success
 */
uint8_t igh_eeprom_save_system_settings(system_settings * settings_to_save)
{
   d4426:	b510      	push	{r4, lr}
   d4428:	4604      	mov	r4, r0
   d442a:	b090      	sub	sp, #64	; 0x40
  system_settings local_buffer;
  // save the data
  EEPROM.put(SYSTEM_SETTINGS_ADDRESS, *settings_to_save);
   d442c:	f001 fe8c 	bl	d6148 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4430:	223c      	movs	r2, #60	; 0x3c
   d4432:	4621      	mov	r1, r4
   d4434:	2000      	movs	r0, #0
   d4436:	f000 fb5d 	bl	d4af4 <HAL_EEPROM_Put>
  // check if data is saved
  igh_eeprom_read_system_settings(&local_buffer);
   d443a:	a801      	add	r0, sp, #4
   d443c:	f7ff ffcc 	bl	d43d8 <_Z31igh_eeprom_read_system_settingsP15system_settings>

  if( local_buffer.checksum != (settings_to_save->checksum))
  {
    return 0;
   d4440:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d4444:	7823      	ldrb	r3, [r4, #0]
  }

  return 1;
}
   d4446:	1ac3      	subs	r3, r0, r3
   d4448:	4258      	negs	r0, r3
   d444a:	4158      	adcs	r0, r3
   d444c:	b010      	add	sp, #64	; 0x40
   d444e:	bd10      	pop	{r4, pc}

000d4450 <_Z34igh_eeprom_read_threshold_settingsP10thresholds>:
 * \brief Gets threshold settings from eeprom emulator
 * \param running_thresholds: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_threshold_settings(thresholds * running_thresholds)
{
   d4450:	b530      	push	{r4, r5, lr}
   d4452:	b08f      	sub	sp, #60	; 0x3c
  thresholds local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d4454:	2234      	movs	r2, #52	; 0x34
   d4456:	2100      	movs	r1, #0
 * \brief Gets threshold settings from eeprom emulator
 * \param running_thresholds: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_threshold_settings(thresholds * running_thresholds)
{
   d4458:	4605      	mov	r5, r0
  thresholds local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d445a:	a801      	add	r0, sp, #4
   d445c:	f002 fd8b 	bl	d6f76 <memset>
  EEPROM.get(SYSTEM_THRESHOLDS_ADDRESS, local_buffer);
   d4460:	f001 fe72 	bl	d6148 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4464:	2234      	movs	r2, #52	; 0x34
   d4466:	a901      	add	r1, sp, #4
   d4468:	f44f 7000 	mov.w	r0, #512	; 0x200
   d446c:	f000 fb3a 	bl	d4ae4 <HAL_EEPROM_Get>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));
   d4470:	2134      	movs	r1, #52	; 0x34
   d4472:	a801      	add	r0, sp, #4
   d4474:	f7ff fe1b 	bl	d40ae <igh_settings_calculate_checksum>
  
  if( checksum != local_buffer.checksum)
   d4478:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d447c:	4283      	cmp	r3, r0
   d447e:	d10a      	bne.n	d4496 <_Z34igh_eeprom_read_threshold_settingsP10thresholds+0x46>
  {
    return 0;
  }
  
  *running_thresholds = local_buffer;
   d4480:	ac01      	add	r4, sp, #4
   d4482:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4484:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4486:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4488:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d448a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d448c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d448e:	6823      	ldr	r3, [r4, #0]
   d4490:	602b      	str	r3, [r5, #0]
  return 1;
   d4492:	2001      	movs	r0, #1
   d4494:	e000      	b.n	d4498 <_Z34igh_eeprom_read_threshold_settingsP10thresholds+0x48>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));
  
  if( checksum != local_buffer.checksum)
  {
    return 0;
   d4496:	2000      	movs	r0, #0
  }
  
  *running_thresholds = local_buffer;
  return 1;
}
   d4498:	b00f      	add	sp, #60	; 0x3c
   d449a:	bd30      	pop	{r4, r5, pc}

000d449c <_Z34igh_eeprom_save_threshold_settingsP10thresholds>:
 * \brief Save threshold settings  to eeprom emulator
 * \param settings_to_save: pointer to struct to save
 * \return true or false based on write success
 */
uint8_t igh_eeprom_save_threshold_settings(thresholds * settings_to_save)
{
   d449c:	b510      	push	{r4, lr}
   d449e:	4604      	mov	r4, r0
   d44a0:	b08e      	sub	sp, #56	; 0x38
    thresholds local_buffer;
    // save the data
    EEPROM.put(SYSTEM_THRESHOLDS_ADDRESS, *settings_to_save);
   d44a2:	f001 fe51 	bl	d6148 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d44a6:	2234      	movs	r2, #52	; 0x34
   d44a8:	4621      	mov	r1, r4
   d44aa:	f44f 7000 	mov.w	r0, #512	; 0x200
   d44ae:	f000 fb21 	bl	d4af4 <HAL_EEPROM_Put>
    // check if data is saved
    igh_eeprom_read_threshold_settings(&local_buffer);
   d44b2:	a801      	add	r0, sp, #4
   d44b4:	f7ff ffcc 	bl	d4450 <_Z34igh_eeprom_read_threshold_settingsP10thresholds>

    if( local_buffer.checksum != (settings_to_save->checksum))
    {
        return 0;
   d44b8:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d44bc:	7823      	ldrb	r3, [r4, #0]
    }

    return 1;
}
   d44be:	1ac3      	subs	r3, r0, r3
   d44c0:	4258      	negs	r0, r3
   d44c2:	4158      	adcs	r0, r3
   d44c4:	b00e      	add	sp, #56	; 0x38
   d44c6:	bd10      	pop	{r4, pc}

000d44c8 <_Z21igh_eeprom_get_errorsPm>:
 * \brief Gets errors stored in eeprom
 * \param error_bit_field; uint32 bit fiel to populate
 * \return void
 */
void igh_eeprom_get_errors(uint32_t * error_bit_field)
{
   d44c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t _error = 0;
   d44ca:	ac02      	add	r4, sp, #8
   d44cc:	2300      	movs	r3, #0
   d44ce:	f844 3d04 	str.w	r3, [r4, #-4]!
 * \brief Gets errors stored in eeprom
 * \param error_bit_field; uint32 bit fiel to populate
 * \return void
 */
void igh_eeprom_get_errors(uint32_t * error_bit_field)
{
   d44d2:	4605      	mov	r5, r0
    uint32_t _error = 0;
    EEPROM.get(SYSTEM_ERRORS_ADDRESS, _error);
   d44d4:	f001 fe38 	bl	d6148 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d44d8:	2204      	movs	r2, #4
   d44da:	4621      	mov	r1, r4
   d44dc:	f44f 6080 	mov.w	r0, #1024	; 0x400
   d44e0:	f000 fb00 	bl	d4ae4 <HAL_EEPROM_Get>
    *error_bit_field = _error;
   d44e4:	9b01      	ldr	r3, [sp, #4]
   d44e6:	602b      	str	r3, [r5, #0]
}
   d44e8:	b003      	add	sp, #12
   d44ea:	bd30      	pop	{r4, r5, pc}

000d44ec <_Z16igh_eeproom_testv>:
 * \brief Tests that we can read and write to the EEPROM just fine
 * \param void
 * \return true or false
 */
uint8_t igh_eeproom_test(void)
{
   d44ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    thresholds test_thresholds;
    system_settings test_system_settings;

    uint8_t test_shield_id[12] = {0xe0,0x0f,0xce,0x68,0x9a,0x75,0x47,0x05,0xe7,0x9a,0x0e,0x37};
   d44ee:	4a42      	ldr	r2, [pc, #264]	; (d45f8 <_Z16igh_eeproom_testv+0x10c>)
 * \brief Tests that we can read and write to the EEPROM just fine
 * \param void
 * \return true or false
 */
uint8_t igh_eeproom_test(void)
{
   d44f0:	b0a5      	sub	sp, #148	; 0x94
    thresholds test_thresholds;
    system_settings test_system_settings;

    uint8_t test_shield_id[12] = {0xe0,0x0f,0xce,0x68,0x9a,0x75,0x47,0x05,0xe7,0x9a,0x0e,0x37};
   d44f2:	6810      	ldr	r0, [r2, #0]
   d44f4:	6851      	ldr	r1, [r2, #4]
   d44f6:	ab01      	add	r3, sp, #4
   d44f8:	c303      	stmia	r3!, {r0, r1}
   d44fa:	6890      	ldr	r0, [r2, #8]
   d44fc:	6018      	str	r0, [r3, #0]
    uint8_t test_broker[] = "test.broker.com";
   d44fe:	4b3f      	ldr	r3, [pc, #252]	; (d45fc <_Z16igh_eeproom_testv+0x110>)
   d4500:	aa04      	add	r2, sp, #16
   d4502:	f103 0710 	add.w	r7, r3, #16
   d4506:	ae01      	add	r6, sp, #4
   d4508:	4615      	mov	r5, r2
   d450a:	6818      	ldr	r0, [r3, #0]
   d450c:	6859      	ldr	r1, [r3, #4]
   d450e:	4614      	mov	r4, r2
   d4510:	c403      	stmia	r4!, {r0, r1}
   d4512:	3308      	adds	r3, #8
   d4514:	42bb      	cmp	r3, r7
   d4516:	4622      	mov	r2, r4
   d4518:	d1f7      	bne.n	d450a <_Z16igh_eeproom_testv+0x1e>

    memset(&test_system_settings, 0, sizeof(test_system_settings));
   d451a:	223c      	movs	r2, #60	; 0x3c
   d451c:	2100      	movs	r1, #0
   d451e:	a815      	add	r0, sp, #84	; 0x54
   d4520:	f002 fd29 	bl	d6f76 <memset>
    memset(&test_thresholds, 0, sizeof(test_thresholds));
   d4524:	2234      	movs	r2, #52	; 0x34
   d4526:	2100      	movs	r1, #0
   d4528:	a808      	add	r0, sp, #32
   d452a:	f002 fd24 	bl	d6f76 <memset>

    memcpy(test_system_settings.serial_number, test_shield_id, 12);
   d452e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   d4532:	ab18      	add	r3, sp, #96	; 0x60
   d4534:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    memcpy(test_system_settings.broker, test_broker, sizeof(test_broker));
   d4538:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   d453c:	ac1b      	add	r4, sp, #108	; 0x6c
   d453e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    test_system_settings.op_state = OP_INACTIVE;
    test_system_settings.reporting_interval = 0x11111111;
   d4542:	f04f 3511 	mov.w	r5, #286331153	; 0x11111111
    test_system_settings.data_resolution = 0x11111111;
    test_system_settings.broker_port = 0x1111;
   d4546:	f241 1411 	movw	r4, #4369	; 0x1111
    test_system_settings.checksum = igh_settings_calculate_checksum(&test_system_settings, sizeof(test_system_settings));
   d454a:	213c      	movs	r1, #60	; 0x3c
   d454c:	a815      	add	r0, sp, #84	; 0x54
    memcpy(test_system_settings.serial_number, test_shield_id, 12);
    memcpy(test_system_settings.broker, test_broker, sizeof(test_broker));
    test_system_settings.op_state = OP_INACTIVE;
    test_system_settings.reporting_interval = 0x11111111;
    test_system_settings.data_resolution = 0x11111111;
    test_system_settings.broker_port = 0x1111;
   d454e:	f8ad 408c 	strh.w	r4, [sp, #140]	; 0x8c
    memset(&test_thresholds, 0, sizeof(test_thresholds));

    memcpy(test_system_settings.serial_number, test_shield_id, 12);
    memcpy(test_system_settings.broker, test_broker, sizeof(test_broker));
    test_system_settings.op_state = OP_INACTIVE;
    test_system_settings.reporting_interval = 0x11111111;
   d4552:	9516      	str	r5, [sp, #88]	; 0x58
    test_system_settings.data_resolution = 0x11111111;
   d4554:	9517      	str	r5, [sp, #92]	; 0x5c
    test_system_settings.broker_port = 0x1111;
    test_system_settings.checksum = igh_settings_calculate_checksum(&test_system_settings, sizeof(test_system_settings));
   d4556:	f7ff fdaa 	bl	d40ae <igh_settings_calculate_checksum>
    test_thresholds.shield_battery_level_high = 0x1111;
    test_thresholds.spear_battery_level_low = 0x1111;
    test_thresholds.spear_battery_level_high = 0x1111;
    test_thresholds.water_dispensed_period_high = 0x11111111;
    test_thresholds.water_dispensed_period_low = 0x11111111;
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));
   d455a:	2134      	movs	r1, #52	; 0x34
    memcpy(test_system_settings.broker, test_broker, sizeof(test_broker));
    test_system_settings.op_state = OP_INACTIVE;
    test_system_settings.reporting_interval = 0x11111111;
    test_system_settings.data_resolution = 0x11111111;
    test_system_settings.broker_port = 0x1111;
    test_system_settings.checksum = igh_settings_calculate_checksum(&test_system_settings, sizeof(test_system_settings));
   d455c:	f88d 0054 	strb.w	r0, [sp, #84]	; 0x54
    test_thresholds.shield_battery_level_high = 0x1111;
    test_thresholds.spear_battery_level_low = 0x1111;
    test_thresholds.spear_battery_level_high = 0x1111;
    test_thresholds.water_dispensed_period_high = 0x11111111;
    test_thresholds.water_dispensed_period_low = 0x11111111;
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));
   d4560:	a808      	add	r0, sp, #32
    test_system_settings.reporting_interval = 0x11111111;
    test_system_settings.data_resolution = 0x11111111;
    test_system_settings.broker_port = 0x1111;
    test_system_settings.checksum = igh_settings_calculate_checksum(&test_system_settings, sizeof(test_system_settings));

    test_thresholds.soil_moisture_low = 0x1111;
   d4562:	f8ad 4022 	strh.w	r4, [sp, #34]	; 0x22
    test_thresholds.soil_moisture_high = 0x1111;
   d4566:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    test_thresholds.air_humidity_low = 0x1111;
   d456a:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
    test_thresholds.air_humidity_high = 0x1111;
   d456e:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
    test_thresholds.soil_humidity_low = 0x1111;
   d4572:	f8ad 4026 	strh.w	r4, [sp, #38]	; 0x26
    test_thresholds.soil_humidity_high = 0x1111;
   d4576:	f8ad 4040 	strh.w	r4, [sp, #64]	; 0x40
    test_thresholds.carbon_dioxide_low = 0x1111;
   d457a:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
    test_thresholds.carbon_dioxide_high = 0x1111;
   d457e:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
    test_thresholds.air_temperature_low = 0x1111;
   d4582:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
    test_thresholds.air_temperature_high = 0x1111;
   d4586:	f8ad 4044 	strh.w	r4, [sp, #68]	; 0x44
    test_thresholds.soil_temperature_low = 0x1111;
   d458a:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
    test_thresholds.soil_temperature_high = 0x1111;
   d458e:	f8ad 4046 	strh.w	r4, [sp, #70]	; 0x46
    test_thresholds.soil_npk_low = 0x1111;
   d4592:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    test_thresholds.soil_npk_high = 0x1111;
   d4596:	f8ad 4048 	strh.w	r4, [sp, #72]	; 0x48
    test_thresholds.light_intensity_high = 0x1111;
   d459a:	f8ad 404a 	strh.w	r4, [sp, #74]	; 0x4a
    test_thresholds.light_intensity_low = 0x1111;
   d459e:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
    test_thresholds.shield_battery_level_low = 0x1111;
   d45a2:	f8ad 4032 	strh.w	r4, [sp, #50]	; 0x32
    test_thresholds.shield_battery_level_high = 0x1111;
   d45a6:	f8ad 404c 	strh.w	r4, [sp, #76]	; 0x4c
    test_thresholds.spear_battery_level_low = 0x1111;
   d45aa:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    test_thresholds.spear_battery_level_high = 0x1111;
   d45ae:	f8ad 404e 	strh.w	r4, [sp, #78]	; 0x4e
    test_thresholds.water_dispensed_period_high = 0x11111111;
   d45b2:	9514      	str	r5, [sp, #80]	; 0x50
    test_thresholds.water_dispensed_period_low = 0x11111111;
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));

    uint32_t test_error = 0xAAAAAAAA;
    uint32_t ret_test_error = 0;
   d45b4:	ac24      	add	r4, sp, #144	; 0x90
    test_thresholds.shield_battery_level_low = 0x1111;
    test_thresholds.shield_battery_level_high = 0x1111;
    test_thresholds.spear_battery_level_low = 0x1111;
    test_thresholds.spear_battery_level_high = 0x1111;
    test_thresholds.water_dispensed_period_high = 0x11111111;
    test_thresholds.water_dispensed_period_low = 0x11111111;
   d45b6:	950e      	str	r5, [sp, #56]	; 0x38
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));
   d45b8:	f7ff fd79 	bl	d40ae <igh_settings_calculate_checksum>

    uint32_t test_error = 0xAAAAAAAA;
    uint32_t ret_test_error = 0;
   d45bc:	2300      	movs	r3, #0
   d45be:	f844 3d90 	str.w	r3, [r4, #-144]!
    test_thresholds.shield_battery_level_high = 0x1111;
    test_thresholds.spear_battery_level_low = 0x1111;
    test_thresholds.spear_battery_level_high = 0x1111;
    test_thresholds.water_dispensed_period_high = 0x11111111;
    test_thresholds.water_dispensed_period_low = 0x11111111;
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));
   d45c2:	f88d 0020 	strb.w	r0, [sp, #32]

    uint32_t test_error = 0xAAAAAAAA;
    uint32_t ret_test_error = 0;
    igh_eeprom_update_errors(test_error);
   d45c6:	f04f 30aa 	mov.w	r0, #2863311530	; 0xaaaaaaaa
   d45ca:	f7ff fef7 	bl	d43bc <_Z24igh_eeprom_update_errorsm>
    igh_eeprom_get_errors(&ret_test_error);
   d45ce:	4620      	mov	r0, r4
   d45d0:	f7ff ff7a 	bl	d44c8 <_Z21igh_eeprom_get_errorsPm>

    return igh_eeprom_save_system_settings(&test_system_settings)
   d45d4:	a815      	add	r0, sp, #84	; 0x54
   d45d6:	f7ff ff26 	bl	d4426 <_Z31igh_eeprom_save_system_settingsP15system_settings>
           && igh_eeprom_save_threshold_settings(&test_thresholds)
           && (ret_test_error == test_error);
   d45da:	b908      	cbnz	r0, d45e0 <_Z16igh_eeproom_testv+0xf4>
   d45dc:	2000      	movs	r0, #0
   d45de:	e009      	b.n	d45f4 <_Z16igh_eeproom_testv+0x108>
    uint32_t ret_test_error = 0;
    igh_eeprom_update_errors(test_error);
    igh_eeprom_get_errors(&ret_test_error);

    return igh_eeprom_save_system_settings(&test_system_settings)
           && igh_eeprom_save_threshold_settings(&test_thresholds)
   d45e0:	a808      	add	r0, sp, #32
   d45e2:	f7ff ff5b 	bl	d449c <_Z34igh_eeprom_save_threshold_settingsP10thresholds>
   d45e6:	2800      	cmp	r0, #0
   d45e8:	d0f8      	beq.n	d45dc <_Z16igh_eeproom_testv+0xf0>
           && (ret_test_error == test_error);
   d45ea:	9800      	ldr	r0, [sp, #0]
   d45ec:	f1a0 33aa 	sub.w	r3, r0, #2863311530	; 0xaaaaaaaa
   d45f0:	4258      	negs	r0, r3
   d45f2:	4158      	adcs	r0, r3
}
   d45f4:	b025      	add	sp, #148	; 0x94
   d45f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d45f8:	000d711f 	.word	0x000d711f
   d45fc:	000d712b 	.word	0x000d712b

000d4600 <_GLOBAL__sub_I__Z31igh_eeprom_save_system_settingsP15system_settings>:
   d4600:	f000 ba18 	b.w	d4a34 <HAL_Pin_Map>

000d4604 <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
   d4604:	f000 ba16 	b.w	d4a34 <HAL_Pin_Map>

000d4608 <_ZN14CellularSignalD1Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d4608:	4770      	bx	lr

000d460a <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d460a:	6803      	ldr	r3, [r0, #0]
   d460c:	4718      	bx	r3

000d460e <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d460e:	2a01      	cmp	r2, #1
   d4610:	d002      	beq.n	d4618 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d4612:	2a02      	cmp	r2, #2
   d4614:	d002      	beq.n	d461c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d4616:	e004      	b.n	d4622 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4618:	6001      	str	r1, [r0, #0]
	      break;
   d461a:	e002      	b.n	d4622 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d461c:	680b      	ldr	r3, [r1, #0]
   d461e:	b100      	cbz	r0, d4622 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d4620:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4622:	2000      	movs	r0, #0
   d4624:	4770      	bx	lr

000d4626 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d4626:	6943      	ldr	r3, [r0, #20]
   d4628:	b113      	cbz	r3, d4630 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d462a:	6983      	ldr	r3, [r0, #24]
   d462c:	300c      	adds	r0, #12
   d462e:	4718      	bx	r3
   d4630:	4770      	bx	lr

000d4632 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4632:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4634:	2100      	movs	r1, #0
   d4636:	4604      	mov	r4, r0
   d4638:	4608      	mov	r0, r1
   d463a:	f000 fa8b 	bl	d4b54 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d463e:	a902      	add	r1, sp, #8
   d4640:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4642:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4644:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d4648:	f000 fa9c 	bl	d4b84 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d464c:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d464e:	b10c      	cbz	r4, d4654 <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d4650:	2301      	movs	r3, #1
   d4652:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4654:	2100      	movs	r1, #0
   d4656:	2001      	movs	r0, #1
   d4658:	f000 fa7c 	bl	d4b54 <os_thread_scheduling>
            }
        }
        if (t) {
   d465c:	b12c      	cbz	r4, d466a <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d465e:	6823      	ldr	r3, [r4, #0]
   d4660:	4620      	mov	r0, r4
   d4662:	689b      	ldr	r3, [r3, #8]
   d4664:	4798      	blx	r3
            t->running = false;
   d4666:	2300      	movs	r3, #0
   d4668:	7123      	strb	r3, [r4, #4]
        }
    }
   d466a:	b002      	add	sp, #8
   d466c:	bd10      	pop	{r4, pc}

000d466e <_ZN14CellularSignalD0Ev>:
   d466e:	b510      	push	{r4, lr}
   d4670:	2128      	movs	r1, #40	; 0x28
   d4672:	4604      	mov	r4, r0
   d4674:	f001 fe0a 	bl	d628c <_ZdlPvj>
   d4678:	4620      	mov	r0, r4
   d467a:	bd10      	pop	{r4, pc}

000d467c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d467c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d467e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4680:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4682:	b113      	cbz	r3, d468a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4684:	2203      	movs	r2, #3
   d4686:	4601      	mov	r1, r0
   d4688:	4798      	blx	r3
    }
   d468a:	4620      	mov	r0, r4
   d468c:	bd10      	pop	{r4, pc}

000d468e <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d468e:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d4690:	6880      	ldr	r0, [r0, #8]
   d4692:	2300      	movs	r3, #0
   d4694:	b138      	cbz	r0, d46a6 <_ZN5Timer5_stopEjb+0x18>
   d4696:	e88d 000a 	stmia.w	sp, {r1, r3}
   d469a:	2102      	movs	r1, #2
   d469c:	f000 fa7a 	bl	d4b94 <os_timer_change>
   d46a0:	fab0 f080 	clz	r0, r0
   d46a4:	0940      	lsrs	r0, r0, #5
    }
   d46a6:	b003      	add	sp, #12
   d46a8:	f85d fb04 	ldr.w	pc, [sp], #4

000d46ac <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d46ac:	b538      	push	{r3, r4, r5, lr}
   d46ae:	4b10      	ldr	r3, [pc, #64]	; (d46f0 <_ZN5TimerD1Ev+0x44>)
   d46b0:	6003      	str	r3, [r0, #0]
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d46b2:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d46b4:	4604      	mov	r4, r0
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d46b6:	b1a3      	cbz	r3, d46e2 <_ZN5TimerD1Ev+0x36>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d46b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d46bc:	2200      	movs	r2, #0
   d46be:	f7ff ffe6 	bl	d468e <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d46c2:	2100      	movs	r1, #0
   d46c4:	68a0      	ldr	r0, [r4, #8]
   d46c6:	f000 fa7d 	bl	d4bc4 <os_timer_set_id>
            while (running) {
   d46ca:	7923      	ldrb	r3, [r4, #4]
   d46cc:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d46d0:	b113      	cbz	r3, d46d8 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d46d2:	f000 fa27 	bl	d4b24 <os_thread_yield>
   d46d6:	e7f8      	b.n	d46ca <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d46d8:	4629      	mov	r1, r5
   d46da:	68a0      	ldr	r0, [r4, #8]
   d46dc:	f000 fa4a 	bl	d4b74 <os_timer_destroy>
            handle = nullptr;
   d46e0:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d46e2:	f104 000c 	add.w	r0, r4, #12
   d46e6:	f7ff ffc9 	bl	d467c <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d46ea:	4620      	mov	r0, r4
   d46ec:	bd38      	pop	{r3, r4, r5, pc}
   d46ee:	bf00      	nop
   d46f0:	000d7144 	.word	0x000d7144

000d46f4 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d46f4:	b510      	push	{r4, lr}
   d46f6:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d46f8:	f7ff ffd8 	bl	d46ac <_ZN5TimerD1Ev>
   d46fc:	4620      	mov	r0, r4
   d46fe:	211c      	movs	r1, #28
   d4700:	f001 fdc4 	bl	d628c <_ZdlPvj>
   d4704:	4620      	mov	r0, r4
   d4706:	bd10      	pop	{r4, pc}

000d4708 <_Z19igh_boron_sync_timev>:
uint8_t igh_button_sec_counter;
Timer igh_button_timer(1000, igh_boron_button_press_duration);

/* Functions */
void igh_boron_sync_time(void)
{
   d4708:	b510      	push	{r4, lr}
   d470a:	f000 f9d3 	bl	d4ab4 <HAL_Timer_Get_Milli_Seconds>
    if((millis() - lastSync > ONE_DAY_MILLIS))
   d470e:	4b08      	ldr	r3, [pc, #32]	; (d4730 <_Z19igh_boron_sync_timev+0x28>)
   d4710:	681a      	ldr	r2, [r3, #0]
   d4712:	1a80      	subs	r0, r0, r2
   d4714:	4a07      	ldr	r2, [pc, #28]	; (d4734 <_Z19igh_boron_sync_timev+0x2c>)
   d4716:	4290      	cmp	r0, r2
   d4718:	461c      	mov	r4, r3
   d471a:	d908      	bls.n	d472e <_Z19igh_boron_sync_timev+0x26>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d471c:	f000 fbce 	bl	d4ebc <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d4720:	b110      	cbz	r0, d4728 <_Z19igh_boron_sync_timev+0x20>
            return false;
        }
        return spark_sync_time(NULL);
   d4722:	2000      	movs	r0, #0
   d4724:	f000 fbd2 	bl	d4ecc <spark_sync_time>
   d4728:	f000 f9c4 	bl	d4ab4 <HAL_Timer_Get_Milli_Seconds>
    {
        Particle.syncTime();
        lastSync = millis(); 
   d472c:	6020      	str	r0, [r4, #0]
   d472e:	bd10      	pop	{r4, pc}
   d4730:	2003e360 	.word	0x2003e360
   d4734:	05265c00 	.word	0x05265c00

000d4738 <_Z13igh_boron_SoCv>:
    return Time.now();
}

float igh_boron_SoC(void)
{
    return fuel.getSoC();
   d4738:	4801      	ldr	r0, [pc, #4]	; (d4740 <_Z13igh_boron_SoCv+0x8>)
   d473a:	f000 bfe7 	b.w	d570c <_ZN9FuelGauge6getSoCEv>
   d473e:	bf00      	nop
   d4740:	2003e364 	.word	0x2003e364

000d4744 <_Z17igh_boron_voltagev>:
}

float igh_boron_voltage(void)
{
    return fuel.getVCell();
   d4744:	4801      	ldr	r0, [pc, #4]	; (d474c <_Z17igh_boron_voltagev+0x8>)
   d4746:	f000 bfcb 	b.w	d56e0 <_ZN9FuelGauge8getVCellEv>
   d474a:	bf00      	nop
   d474c:	2003e364 	.word	0x2003e364

000d4750 <_Z26igh_boron_get_celular_datav>:
}

void igh_boron_get_celular_data(void)
{
   d4750:	b530      	push	{r4, r5, lr}
   d4752:	b08b      	sub	sp, #44	; 0x2c
    signal = Cellular.RSSI();
   d4754:	4668      	mov	r0, sp
#include "cellular_enums_hal.h"

/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
   d4756:	4c09      	ldr	r4, [pc, #36]	; (d477c <_Z26igh_boron_get_celular_datav+0x2c>)
   d4758:	4909      	ldr	r1, [pc, #36]	; (d4780 <_Z26igh_boron_get_celular_datav+0x30>)
   d475a:	f001 f9b3 	bl	d5ac4 <_ZN5spark13CellularClass4RSSIEv>
   d475e:	9b02      	ldr	r3, [sp, #8]
   d4760:	60a3      	str	r3, [r4, #8]
   d4762:	ad04      	add	r5, sp, #16
   d4764:	9b03      	ldr	r3, [sp, #12]
   d4766:	60e3      	str	r3, [r4, #12]
   d4768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d476a:	3410      	adds	r4, #16
   d476c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d476e:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4772:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d4776:	b00b      	add	sp, #44	; 0x2c
   d4778:	bd30      	pop	{r4, r5, pc}
   d477a:	bf00      	nop
   d477c:	2003e334 	.word	0x2003e334
   d4780:	2003e3d8 	.word	0x2003e3d8

000d4784 <_Z12igh_boron_ssv>:
    return signal.getQuality();
}

float igh_boron_ss(void)
{
    return signal.getQuality();
   d4784:	4801      	ldr	r0, [pc, #4]	; (d478c <_Z12igh_boron_ssv+0x8>)
   d4786:	f000 bed9 	b.w	d553c <_ZNK14CellularSignal10getQualityEv>
   d478a:	bf00      	nop
   d478c:	2003e334 	.word	0x2003e334

000d4790 <_Z30igh_boron_connecetd_to_networkv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4790:	4b02      	ldr	r3, [pc, #8]	; (d479c <_Z30igh_boron_connecetd_to_networkv+0xc>)
   d4792:	2200      	movs	r2, #0
   d4794:	4611      	mov	r1, r2
   d4796:	6858      	ldr	r0, [r3, #4]
   d4798:	f000 bb50 	b.w	d4e3c <network_ready>
   d479c:	2003e3d8 	.word	0x2003e3d8

000d47a0 <_Z17igh_boron_servicev>:
    igh_button_sec_counter = 0;
    lastSync = millis();
}

void igh_boron_service(void)
{
   d47a0:	b508      	push	{r3, lr}
    igh_boron_sync_time();
   d47a2:	f7ff ffb1 	bl	d4708 <_Z19igh_boron_sync_timev>
    igh_boron_get_celular_data();
}
   d47a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void igh_boron_service(void)
{
    igh_boron_sync_time();
    igh_boron_get_celular_data();
   d47aa:	f7ff bfd1 	b.w	d4750 <_Z26igh_boron_get_celular_datav>
	...

000d47b0 <_Z21igh_boron_test_devicev>:
}

void igh_boron_test_device(void)
{
   d47b0:	b510      	push	{r4, lr}
    Serial.print("\nUnix Time:      "); Serial.println(igh_boron_unix_time());
   d47b2:	f001 f92d 	bl	d5a10 <_Z16_fetch_usbserialv>
   d47b6:	4937      	ldr	r1, [pc, #220]	; (d4894 <_Z21igh_boron_test_devicev+0xe4>)
   d47b8:	f000 fd2a 	bl	d5210 <_ZN5Print5printEPKc>
   d47bc:	f001 f928 	bl	d5a10 <_Z16_fetch_usbserialv>
   d47c0:	4604      	mov	r4, r0
    }
}

unsigned long igh_boron_unix_time(void)
{
    return Time.now();
   d47c2:	f000 fe67 	bl	d5494 <_ZN9TimeClass3nowEv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d47c6:	220a      	movs	r2, #10
   d47c8:	4601      	mov	r1, r0
   d47ca:	4620      	mov	r0, r4
   d47cc:	f000 fd33 	bl	d5236 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d47d0:	4620      	mov	r0, r4
   d47d2:	f000 fd24 	bl	d521e <_ZN5Print7printlnEv>
}

void igh_boron_test_device(void)
{
    Serial.print("\nUnix Time:      "); Serial.println(igh_boron_unix_time());
    Serial.print("cloud status:     "); Serial.println(igh_boron_connected_to_cloud());
   d47d6:	f001 f91b 	bl	d5a10 <_Z16_fetch_usbserialv>
   d47da:	492f      	ldr	r1, [pc, #188]	; (d4898 <_Z21igh_boron_test_devicev+0xe8>)
   d47dc:	f000 fd18 	bl	d5210 <_ZN5Print5printEPKc>
   d47e0:	f001 f916 	bl	d5a10 <_Z16_fetch_usbserialv>
   d47e4:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d47e6:	f000 fb69 	bl	d4ebc <spark_cloud_flag_connected>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d47ea:	220a      	movs	r2, #10
   d47ec:	4601      	mov	r1, r0
   d47ee:	4620      	mov	r0, r4
   d47f0:	f000 fd21 	bl	d5236 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d47f4:	4620      	mov	r0, r4
   d47f6:	f000 fd12 	bl	d521e <_ZN5Print7printlnEv>
    Serial.print("network status:   "); Serial.println(igh_boron_connecetd_to_network());
   d47fa:	f001 f909 	bl	d5a10 <_Z16_fetch_usbserialv>
   d47fe:	4927      	ldr	r1, [pc, #156]	; (d489c <_Z21igh_boron_test_devicev+0xec>)
   d4800:	f000 fd06 	bl	d5210 <_ZN5Print5printEPKc>
   d4804:	f001 f904 	bl	d5a10 <_Z16_fetch_usbserialv>
   d4808:	4604      	mov	r4, r0
   d480a:	f7ff ffc1 	bl	d4790 <_Z30igh_boron_connecetd_to_networkv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d480e:	220a      	movs	r2, #10
   d4810:	4601      	mov	r1, r0
   d4812:	4620      	mov	r0, r4
   d4814:	f000 fd0f 	bl	d5236 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4818:	4620      	mov	r0, r4
   d481a:	f000 fd00 	bl	d521e <_ZN5Print7printlnEv>
    Serial.print("signal strength:  "); Serial.println(igh_boron_ss());
   d481e:	f001 f8f7 	bl	d5a10 <_Z16_fetch_usbserialv>
   d4822:	491f      	ldr	r1, [pc, #124]	; (d48a0 <_Z21igh_boron_test_devicev+0xf0>)
   d4824:	f000 fcf4 	bl	d5210 <_ZN5Print5printEPKc>
   d4828:	f001 f8f2 	bl	d5a10 <_Z16_fetch_usbserialv>
   d482c:	4604      	mov	r4, r0
   d482e:	f7ff ffa9 	bl	d4784 <_Z12igh_boron_ssv>
   d4832:	2102      	movs	r1, #2
   d4834:	4620      	mov	r0, r4
   d4836:	f000 fde8 	bl	d540a <_ZN5Print7printlnEfi>
    Serial.print("signal quality:   "); Serial.println(igh_boron_sq());
   d483a:	f001 f8e9 	bl	d5a10 <_Z16_fetch_usbserialv>
   d483e:	4919      	ldr	r1, [pc, #100]	; (d48a4 <_Z21igh_boron_test_devicev+0xf4>)
   d4840:	f000 fce6 	bl	d5210 <_ZN5Print5printEPKc>
   d4844:	f001 f8e4 	bl	d5a10 <_Z16_fetch_usbserialv>
   d4848:	4604      	mov	r4, r0
   d484a:	f7ff ff9b 	bl	d4784 <_Z12igh_boron_ssv>
   d484e:	2102      	movs	r1, #2
   d4850:	4620      	mov	r0, r4
   d4852:	f000 fdda 	bl	d540a <_ZN5Print7printlnEfi>
    Serial.print("Battery Voltage:  "); Serial.println(igh_boron_voltage());
   d4856:	f001 f8db 	bl	d5a10 <_Z16_fetch_usbserialv>
   d485a:	4913      	ldr	r1, [pc, #76]	; (d48a8 <_Z21igh_boron_test_devicev+0xf8>)
   d485c:	f000 fcd8 	bl	d5210 <_ZN5Print5printEPKc>
   d4860:	f001 f8d6 	bl	d5a10 <_Z16_fetch_usbserialv>
   d4864:	4604      	mov	r4, r0
   d4866:	f7ff ff6d 	bl	d4744 <_Z17igh_boron_voltagev>
   d486a:	2102      	movs	r1, #2
   d486c:	4620      	mov	r0, r4
   d486e:	f000 fdcc 	bl	d540a <_ZN5Print7printlnEfi>
    Serial.print("Battery SOC:      "); Serial.println(igh_boron_SoC());
   d4872:	f001 f8cd 	bl	d5a10 <_Z16_fetch_usbserialv>
   d4876:	490d      	ldr	r1, [pc, #52]	; (d48ac <_Z21igh_boron_test_devicev+0xfc>)
   d4878:	f000 fcca 	bl	d5210 <_ZN5Print5printEPKc>
   d487c:	f001 f8c8 	bl	d5a10 <_Z16_fetch_usbserialv>
   d4880:	4604      	mov	r4, r0
   d4882:	f7ff ff59 	bl	d4738 <_Z13igh_boron_SoCv>
   d4886:	4620      	mov	r0, r4
   d4888:	2102      	movs	r1, #2
}
   d488a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.print("cloud status:     "); Serial.println(igh_boron_connected_to_cloud());
    Serial.print("network status:   "); Serial.println(igh_boron_connecetd_to_network());
    Serial.print("signal strength:  "); Serial.println(igh_boron_ss());
    Serial.print("signal quality:   "); Serial.println(igh_boron_sq());
    Serial.print("Battery Voltage:  "); Serial.println(igh_boron_voltage());
    Serial.print("Battery SOC:      "); Serial.println(igh_boron_SoC());
   d488e:	f000 bdbc 	b.w	d540a <_ZN5Print7printlnEfi>
   d4892:	bf00      	nop
   d4894:	000d7150 	.word	0x000d7150
   d4898:	000d7162 	.word	0x000d7162
   d489c:	000d7175 	.word	0x000d7175
   d48a0:	000d7188 	.word	0x000d7188
   d48a4:	000d719b 	.word	0x000d719b
   d48a8:	000d71ae 	.word	0x000d71ae
   d48ac:	000d71c1 	.word	0x000d71c1

000d48b0 <_Z26igh_boron_toggle_boron_ledh>:
}

void igh_boron_toggle_boron_led(uint8_t _state)
{
    digitalWrite(BORON_LED, _state);
   d48b0:	4601      	mov	r1, r0
   d48b2:	2007      	movs	r0, #7
   d48b4:	f001 bc1b 	b.w	d60ee <digitalWrite>

000d48b8 <_Z15igh_boron_setupv>:
{
    return Particle.connected();;
}

void igh_boron_setup(void)
{
   d48b8:	b513      	push	{r0, r1, r4, lr}
    pinMode(BORON_LED, OUTPUT);
   d48ba:	2101      	movs	r1, #1
   d48bc:	2007      	movs	r0, #7
   d48be:	f001 fc05 	bl	d60cc <pinMode>
    pinMode(IGH_IRRIGATION_BUTTON, INPUT_PULLUP);
   d48c2:	2102      	movs	r1, #2
   d48c4:	2005      	movs	r0, #5
   d48c6:	f001 fc01 	bl	d60cc <pinMode>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d48ca:	4c0e      	ldr	r4, [pc, #56]	; (d4904 <_Z15igh_boron_setupv+0x4c>)
    igh_boron_toggle_boron_led(OFF);
   d48cc:	2000      	movs	r0, #0
   d48ce:	f7ff ffef 	bl	d48b0 <_Z26igh_boron_toggle_boron_ledh>
   d48d2:	2200      	movs	r2, #0
   d48d4:	4611      	mov	r1, r2
   d48d6:	4620      	mov	r0, r4
   d48d8:	f7ff fed9 	bl	d468e <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d48dc:	68a0      	ldr	r0, [r4, #8]
   d48de:	b140      	cbz	r0, d48f2 <_Z15igh_boron_setupv+0x3a>
   d48e0:	2300      	movs	r3, #0
   d48e2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d48e6:	e88d 000c 	stmia.w	sp, {r2, r3}
   d48ea:	4619      	mov	r1, r3
   d48ec:	461a      	mov	r2, r3
   d48ee:	f000 f951 	bl	d4b94 <os_timer_change>
    igh_button_timer.start();
    igh_button_sec_counter = 0;
   d48f2:	4b05      	ldr	r3, [pc, #20]	; (d4908 <_Z15igh_boron_setupv+0x50>)
   d48f4:	2200      	movs	r2, #0
   d48f6:	701a      	strb	r2, [r3, #0]
   d48f8:	f000 f8dc 	bl	d4ab4 <HAL_Timer_Get_Milli_Seconds>
    lastSync = millis();
   d48fc:	4b03      	ldr	r3, [pc, #12]	; (d490c <_Z15igh_boron_setupv+0x54>)
   d48fe:	6018      	str	r0, [r3, #0]
}
   d4900:	b002      	add	sp, #8
   d4902:	bd10      	pop	{r4, pc}
   d4904:	2003e36c 	.word	0x2003e36c
   d4908:	2003e35c 	.word	0x2003e35c
   d490c:	2003e360 	.word	0x2003e360

000d4910 <_Z21igh_boron_read_buttonv>:
{
    digitalWrite(BORON_LED, _state);
}

uint8_t igh_boron_read_button(void)
{
   d4910:	b508      	push	{r3, lr}
    return digitalRead(IGH_IRRIGATION_BUTTON);
   d4912:	2005      	movs	r0, #5
   d4914:	f001 fc04 	bl	d6120 <digitalRead>
}
   d4918:	b2c0      	uxtb	r0, r0
   d491a:	bd08      	pop	{r3, pc}

000d491c <_Z31igh_boron_button_press_durationv>:

void igh_boron_button_press_duration(void)
{
   d491c:	b508      	push	{r3, lr}
    if(!igh_boron_read_button())
   d491e:	f7ff fff7 	bl	d4910 <_Z21igh_boron_read_buttonv>
   d4922:	4b04      	ldr	r3, [pc, #16]	; (d4934 <_Z31igh_boron_button_press_durationv+0x18>)
   d4924:	b910      	cbnz	r0, d492c <_Z31igh_boron_button_press_durationv+0x10>
    {
        igh_button_sec_counter++;
   d4926:	781a      	ldrb	r2, [r3, #0]
   d4928:	3201      	adds	r2, #1
   d492a:	e000      	b.n	d492e <_Z31igh_boron_button_press_durationv+0x12>
        // Serial.print("button timer: "); Serial.println(igh_button_sec_counter);
    }
    else
    {
        igh_button_sec_counter = 0;
   d492c:	2200      	movs	r2, #0
   d492e:	701a      	strb	r2, [r3, #0]
   d4930:	bd08      	pop	{r3, pc}
   d4932:	bf00      	nop
   d4934:	2003e35c 	.word	0x2003e35c

000d4938 <_GLOBAL__sub_I_lastSync>:
    } 
}
   d4938:	b5f0      	push	{r4, r5, r6, r7, lr}
   d493a:	b089      	sub	sp, #36	; 0x24
   d493c:	f000 f87a 	bl	d4a34 <HAL_Pin_Map>
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d4940:	4c27      	ldr	r4, [pc, #156]	; (d49e0 <_GLOBAL__sub_I_lastSync+0xa8>)
   d4942:	4b28      	ldr	r3, [pc, #160]	; (d49e4 <_GLOBAL__sub_I_lastSync+0xac>)
#define IGH_IRRIGATION_BUTTON   D5

unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
   d4944:	4f28      	ldr	r7, [pc, #160]	; (d49e8 <_GLOBAL__sub_I_lastSync+0xb0>)
   d4946:	6023      	str	r3, [r4, #0]
   d4948:	2500      	movs	r5, #0
   d494a:	3328      	adds	r3, #40	; 0x28
   d494c:	4629      	mov	r1, r5
   d494e:	2218      	movs	r2, #24
   d4950:	f104 0010 	add.w	r0, r4, #16
   d4954:	6063      	str	r3, [r4, #4]
   d4956:	60a5      	str	r5, [r4, #8]
   d4958:	60e5      	str	r5, [r4, #12]
   d495a:	f002 fb0c 	bl	d6f76 <memset>
   d495e:	4620      	mov	r0, r4
float signal_quality, signal_strength;
FuelGauge fuel;
   d4960:	4c22      	ldr	r4, [pc, #136]	; (d49ec <_GLOBAL__sub_I_lastSync+0xb4>)
#define IGH_IRRIGATION_BUTTON   D5

unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
   d4962:	4923      	ldr	r1, [pc, #140]	; (d49f0 <_GLOBAL__sub_I_lastSync+0xb8>)
   d4964:	463a      	mov	r2, r7
   d4966:	f001 fc83 	bl	d6270 <__aeabi_atexit>
float signal_quality, signal_strength;
FuelGauge fuel;
   d496a:	4629      	mov	r1, r5
   d496c:	4620      	mov	r0, r4
   d496e:	f000 fe77 	bl	d5660 <_ZN9FuelGaugeC1Eb>
   d4972:	463a      	mov	r2, r7
   d4974:	491f      	ldr	r1, [pc, #124]	; (d49f4 <_GLOBAL__sub_I_lastSync+0xbc>)
   d4976:	4620      	mov	r0, r4
   d4978:	f001 fc7a 	bl	d6270 <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d497c:	4b1e      	ldr	r3, [pc, #120]	; (d49f8 <_GLOBAL__sub_I_lastSync+0xc0>)
   d497e:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4980:	ae04      	add	r6, sp, #16
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d4982:	4c1e      	ldr	r4, [pc, #120]	; (d49fc <_GLOBAL__sub_I_lastSync+0xc4>)
   d4984:	4b1e      	ldr	r3, [pc, #120]	; (d4a00 <_GLOBAL__sub_I_lastSync+0xc8>)
   d4986:	6023      	str	r3, [r4, #0]
   d4988:	e896 0003 	ldmia.w	r6, {r0, r1}
   d498c:	aa02      	add	r2, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d498e:	f104 030c 	add.w	r3, r4, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4992:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4996:	e893 0003 	ldmia.w	r3, {r0, r1}
   d499a:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d499e:	e892 0003 	ldmia.w	r2, {r0, r1}
   d49a2:	e883 0003 	stmia.w	r3, {r0, r1}
   d49a6:	4b17      	ldr	r3, [pc, #92]	; (d4a04 <_GLOBAL__sub_I_lastSync+0xcc>)
   d49a8:	6163      	str	r3, [r4, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d49aa:	69a3      	ldr	r3, [r4, #24]
   d49ac:	9307      	str	r3, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   d49ae:	4b16      	ldr	r3, [pc, #88]	; (d4a08 <_GLOBAL__sub_I_lastSync+0xd0>)
   d49b0:	61a3      	str	r3, [r4, #24]
   d49b2:	7125      	strb	r5, [r4, #4]
   d49b4:	60a5      	str	r5, [r4, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d49b6:	4623      	mov	r3, r4
   d49b8:	4a14      	ldr	r2, [pc, #80]	; (d4a0c <_GLOBAL__sub_I_lastSync+0xd4>)
   d49ba:	9501      	str	r5, [sp, #4]
   d49bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d49c0:	9500      	str	r5, [sp, #0]
   d49c2:	f104 0008 	add.w	r0, r4, #8
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d49c6:	9506      	str	r5, [sp, #24]
   d49c8:	f000 f8cc 	bl	d4b64 <os_timer_create>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d49cc:	4630      	mov	r0, r6
   d49ce:	f7ff fe55 	bl	d467c <_ZNSt14_Function_baseD1Ev>
float battery_voltage, battery_SOC;
unsigned long unix_time;

uint8_t igh_button_sec_counter;
Timer igh_button_timer(1000, igh_boron_button_press_duration);
   d49d2:	463a      	mov	r2, r7
   d49d4:	490e      	ldr	r1, [pc, #56]	; (d4a10 <_GLOBAL__sub_I_lastSync+0xd8>)
   d49d6:	4620      	mov	r0, r4
   d49d8:	f001 fc4a 	bl	d6270 <__aeabi_atexit>
    }
    else
    {
        igh_button_sec_counter = 0;
    } 
}
   d49dc:	b009      	add	sp, #36	; 0x24
   d49de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d49e0:	2003e334 	.word	0x2003e334
   d49e4:	000d7328 	.word	0x000d7328
   d49e8:	2003e324 	.word	0x2003e324
   d49ec:	2003e364 	.word	0x2003e364
   d49f0:	000d4609 	.word	0x000d4609
   d49f4:	000d567f 	.word	0x000d567f
   d49f8:	000d491d 	.word	0x000d491d
   d49fc:	2003e36c 	.word	0x2003e36c
   d4a00:	000d7144 	.word	0x000d7144
   d4a04:	000d460f 	.word	0x000d460f
   d4a08:	000d460b 	.word	0x000d460b
   d4a0c:	000d4633 	.word	0x000d4633
   d4a10:	000d46ad 	.word	0x000d46ad

000d4a14 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4a14:	b508      	push	{r3, lr}
   d4a16:	4b02      	ldr	r3, [pc, #8]	; (d4a20 <netdb_freeaddrinfo+0xc>)
   d4a18:	681b      	ldr	r3, [r3, #0]
   d4a1a:	689b      	ldr	r3, [r3, #8]
   d4a1c:	9301      	str	r3, [sp, #4]
   d4a1e:	bd08      	pop	{r3, pc}
   d4a20:	00030268 	.word	0x00030268

000d4a24 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4a24:	b508      	push	{r3, lr}
   d4a26:	4b02      	ldr	r3, [pc, #8]	; (d4a30 <netdb_getaddrinfo+0xc>)
   d4a28:	681b      	ldr	r3, [r3, #0]
   d4a2a:	68db      	ldr	r3, [r3, #12]
   d4a2c:	9301      	str	r3, [sp, #4]
   d4a2e:	bd08      	pop	{r3, pc}
   d4a30:	00030268 	.word	0x00030268

000d4a34 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4a34:	b508      	push	{r3, lr}
   d4a36:	4b02      	ldr	r3, [pc, #8]	; (d4a40 <HAL_Pin_Map+0xc>)
   d4a38:	681b      	ldr	r3, [r3, #0]
   d4a3a:	681b      	ldr	r3, [r3, #0]
   d4a3c:	9301      	str	r3, [sp, #4]
   d4a3e:	bd08      	pop	{r3, pc}
   d4a40:	0003022c 	.word	0x0003022c

000d4a44 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4a44:	b508      	push	{r3, lr}
   d4a46:	4b02      	ldr	r3, [pc, #8]	; (d4a50 <HAL_Pin_Mode+0xc>)
   d4a48:	681b      	ldr	r3, [r3, #0]
   d4a4a:	689b      	ldr	r3, [r3, #8]
   d4a4c:	9301      	str	r3, [sp, #4]
   d4a4e:	bd08      	pop	{r3, pc}
   d4a50:	0003022c 	.word	0x0003022c

000d4a54 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4a54:	b508      	push	{r3, lr}
   d4a56:	4b02      	ldr	r3, [pc, #8]	; (d4a60 <HAL_Get_Pin_Mode+0xc>)
   d4a58:	681b      	ldr	r3, [r3, #0]
   d4a5a:	68db      	ldr	r3, [r3, #12]
   d4a5c:	9301      	str	r3, [sp, #4]
   d4a5e:	bd08      	pop	{r3, pc}
   d4a60:	0003022c 	.word	0x0003022c

000d4a64 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4a64:	b508      	push	{r3, lr}
   d4a66:	4b02      	ldr	r3, [pc, #8]	; (d4a70 <HAL_GPIO_Write+0xc>)
   d4a68:	681b      	ldr	r3, [r3, #0]
   d4a6a:	691b      	ldr	r3, [r3, #16]
   d4a6c:	9301      	str	r3, [sp, #4]
   d4a6e:	bd08      	pop	{r3, pc}
   d4a70:	0003022c 	.word	0x0003022c

000d4a74 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4a74:	b508      	push	{r3, lr}
   d4a76:	4b02      	ldr	r3, [pc, #8]	; (d4a80 <HAL_GPIO_Read+0xc>)
   d4a78:	681b      	ldr	r3, [r3, #0]
   d4a7a:	695b      	ldr	r3, [r3, #20]
   d4a7c:	9301      	str	r3, [sp, #4]
   d4a7e:	bd08      	pop	{r3, pc}
   d4a80:	0003022c 	.word	0x0003022c

000d4a84 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4a84:	b508      	push	{r3, lr}
   d4a86:	4b02      	ldr	r3, [pc, #8]	; (d4a90 <HAL_SPI_Init+0xc>)
   d4a88:	681b      	ldr	r3, [r3, #0]
   d4a8a:	69db      	ldr	r3, [r3, #28]
   d4a8c:	9301      	str	r3, [sp, #4]
   d4a8e:	bd08      	pop	{r3, pc}
   d4a90:	00030230 	.word	0x00030230

000d4a94 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4a94:	b508      	push	{r3, lr}
   d4a96:	4b02      	ldr	r3, [pc, #8]	; (d4aa0 <HAL_SPI_Is_Enabled+0xc>)
   d4a98:	681b      	ldr	r3, [r3, #0]
   d4a9a:	6a1b      	ldr	r3, [r3, #32]
   d4a9c:	9301      	str	r3, [sp, #4]
   d4a9e:	bd08      	pop	{r3, pc}
   d4aa0:	00030230 	.word	0x00030230

000d4aa4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4aa4:	b508      	push	{r3, lr}
   d4aa6:	4b02      	ldr	r3, [pc, #8]	; (d4ab0 <HAL_RNG_GetRandomNumber+0xc>)
   d4aa8:	681b      	ldr	r3, [r3, #0]
   d4aaa:	685b      	ldr	r3, [r3, #4]
   d4aac:	9301      	str	r3, [sp, #4]
   d4aae:	bd08      	pop	{r3, pc}
   d4ab0:	00030218 	.word	0x00030218

000d4ab4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4ab4:	b508      	push	{r3, lr}
   d4ab6:	4b02      	ldr	r3, [pc, #8]	; (d4ac0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4ab8:	681b      	ldr	r3, [r3, #0]
   d4aba:	695b      	ldr	r3, [r3, #20]
   d4abc:	9301      	str	r3, [sp, #4]
   d4abe:	bd08      	pop	{r3, pc}
   d4ac0:	00030218 	.word	0x00030218

000d4ac4 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d4ac4:	b508      	push	{r3, lr}
   d4ac6:	4b02      	ldr	r3, [pc, #8]	; (d4ad0 <HAL_RTC_Get_UnixTime+0xc>)
   d4ac8:	681b      	ldr	r3, [r3, #0]
   d4aca:	69db      	ldr	r3, [r3, #28]
   d4acc:	9301      	str	r3, [sp, #4]
   d4ace:	bd08      	pop	{r3, pc}
   d4ad0:	00030218 	.word	0x00030218

000d4ad4 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d4ad4:	b508      	push	{r3, lr}
   d4ad6:	4b02      	ldr	r3, [pc, #8]	; (d4ae0 <HAL_EEPROM_Init+0xc>)
   d4ad8:	681b      	ldr	r3, [r3, #0]
   d4ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4adc:	9301      	str	r3, [sp, #4]
   d4ade:	bd08      	pop	{r3, pc}
   d4ae0:	00030218 	.word	0x00030218

000d4ae4 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d4ae4:	b508      	push	{r3, lr}
   d4ae6:	4b02      	ldr	r3, [pc, #8]	; (d4af0 <HAL_EEPROM_Get+0xc>)
   d4ae8:	681b      	ldr	r3, [r3, #0]
   d4aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4aec:	9301      	str	r3, [sp, #4]
   d4aee:	bd08      	pop	{r3, pc}
   d4af0:	00030218 	.word	0x00030218

000d4af4 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d4af4:	b508      	push	{r3, lr}
   d4af6:	4b02      	ldr	r3, [pc, #8]	; (d4b00 <HAL_EEPROM_Put+0xc>)
   d4af8:	681b      	ldr	r3, [r3, #0]
   d4afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4afc:	9301      	str	r3, [sp, #4]
   d4afe:	bd08      	pop	{r3, pc}
   d4b00:	00030218 	.word	0x00030218

000d4b04 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d4b04:	b508      	push	{r3, lr}
   d4b06:	4b02      	ldr	r3, [pc, #8]	; (d4b10 <HAL_RTC_Time_Is_Valid+0xc>)
   d4b08:	681b      	ldr	r3, [r3, #0]
   d4b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4b0c:	9301      	str	r3, [sp, #4]
   d4b0e:	bd08      	pop	{r3, pc}
   d4b10:	00030218 	.word	0x00030218

000d4b14 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4b14:	b508      	push	{r3, lr}
   d4b16:	4b02      	ldr	r3, [pc, #8]	; (d4b20 <os_thread_is_current+0xc>)
   d4b18:	681b      	ldr	r3, [r3, #0]
   d4b1a:	689b      	ldr	r3, [r3, #8]
   d4b1c:	9301      	str	r3, [sp, #4]
   d4b1e:	bd08      	pop	{r3, pc}
   d4b20:	00030248 	.word	0x00030248

000d4b24 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d4b24:	b508      	push	{r3, lr}
   d4b26:	4b02      	ldr	r3, [pc, #8]	; (d4b30 <os_thread_yield+0xc>)
   d4b28:	681b      	ldr	r3, [r3, #0]
   d4b2a:	68db      	ldr	r3, [r3, #12]
   d4b2c:	9301      	str	r3, [sp, #4]
   d4b2e:	bd08      	pop	{r3, pc}
   d4b30:	00030248 	.word	0x00030248

000d4b34 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4b34:	b508      	push	{r3, lr}
   d4b36:	4b02      	ldr	r3, [pc, #8]	; (d4b40 <os_thread_join+0xc>)
   d4b38:	681b      	ldr	r3, [r3, #0]
   d4b3a:	691b      	ldr	r3, [r3, #16]
   d4b3c:	9301      	str	r3, [sp, #4]
   d4b3e:	bd08      	pop	{r3, pc}
   d4b40:	00030248 	.word	0x00030248

000d4b44 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4b44:	b508      	push	{r3, lr}
   d4b46:	4b02      	ldr	r3, [pc, #8]	; (d4b50 <os_thread_cleanup+0xc>)
   d4b48:	681b      	ldr	r3, [r3, #0]
   d4b4a:	695b      	ldr	r3, [r3, #20]
   d4b4c:	9301      	str	r3, [sp, #4]
   d4b4e:	bd08      	pop	{r3, pc}
   d4b50:	00030248 	.word	0x00030248

000d4b54 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d4b54:	b508      	push	{r3, lr}
   d4b56:	4b02      	ldr	r3, [pc, #8]	; (d4b60 <os_thread_scheduling+0xc>)
   d4b58:	681b      	ldr	r3, [r3, #0]
   d4b5a:	69db      	ldr	r3, [r3, #28]
   d4b5c:	9301      	str	r3, [sp, #4]
   d4b5e:	bd08      	pop	{r3, pc}
   d4b60:	00030248 	.word	0x00030248

000d4b64 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d4b64:	b508      	push	{r3, lr}
   d4b66:	4b02      	ldr	r3, [pc, #8]	; (d4b70 <os_timer_create+0xc>)
   d4b68:	681b      	ldr	r3, [r3, #0]
   d4b6a:	6a1b      	ldr	r3, [r3, #32]
   d4b6c:	9301      	str	r3, [sp, #4]
   d4b6e:	bd08      	pop	{r3, pc}
   d4b70:	00030248 	.word	0x00030248

000d4b74 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d4b74:	b508      	push	{r3, lr}
   d4b76:	4b02      	ldr	r3, [pc, #8]	; (d4b80 <os_timer_destroy+0xc>)
   d4b78:	681b      	ldr	r3, [r3, #0]
   d4b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4b7c:	9301      	str	r3, [sp, #4]
   d4b7e:	bd08      	pop	{r3, pc}
   d4b80:	00030248 	.word	0x00030248

000d4b84 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d4b84:	b508      	push	{r3, lr}
   d4b86:	4b02      	ldr	r3, [pc, #8]	; (d4b90 <os_timer_get_id+0xc>)
   d4b88:	681b      	ldr	r3, [r3, #0]
   d4b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4b8c:	9301      	str	r3, [sp, #4]
   d4b8e:	bd08      	pop	{r3, pc}
   d4b90:	00030248 	.word	0x00030248

000d4b94 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d4b94:	b508      	push	{r3, lr}
   d4b96:	4b02      	ldr	r3, [pc, #8]	; (d4ba0 <os_timer_change+0xc>)
   d4b98:	681b      	ldr	r3, [r3, #0]
   d4b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4b9c:	9301      	str	r3, [sp, #4]
   d4b9e:	bd08      	pop	{r3, pc}
   d4ba0:	00030248 	.word	0x00030248

000d4ba4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4ba4:	b508      	push	{r3, lr}
   d4ba6:	4b02      	ldr	r3, [pc, #8]	; (d4bb0 <os_mutex_recursive_create+0xc>)
   d4ba8:	681b      	ldr	r3, [r3, #0]
   d4baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4bac:	9301      	str	r3, [sp, #4]
   d4bae:	bd08      	pop	{r3, pc}
   d4bb0:	00030248 	.word	0x00030248

000d4bb4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4bb4:	b508      	push	{r3, lr}
   d4bb6:	4b02      	ldr	r3, [pc, #8]	; (d4bc0 <os_mutex_recursive_destroy+0xc>)
   d4bb8:	681b      	ldr	r3, [r3, #0]
   d4bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4bbc:	9301      	str	r3, [sp, #4]
   d4bbe:	bd08      	pop	{r3, pc}
   d4bc0:	00030248 	.word	0x00030248

000d4bc4 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d4bc4:	b508      	push	{r3, lr}
   d4bc6:	4b02      	ldr	r3, [pc, #8]	; (d4bd0 <os_timer_set_id+0xc>)
   d4bc8:	681b      	ldr	r3, [r3, #0]
   d4bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d4bcc:	9301      	str	r3, [sp, #4]
   d4bce:	bd08      	pop	{r3, pc}
   d4bd0:	00030248 	.word	0x00030248

000d4bd4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4bd4:	b508      	push	{r3, lr}
   d4bd6:	4b02      	ldr	r3, [pc, #8]	; (d4be0 <inet_inet_ntop+0xc>)
   d4bd8:	681b      	ldr	r3, [r3, #0]
   d4bda:	695b      	ldr	r3, [r3, #20]
   d4bdc:	9301      	str	r3, [sp, #4]
   d4bde:	bd08      	pop	{r3, pc}
   d4be0:	00030264 	.word	0x00030264

000d4be4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4be4:	b508      	push	{r3, lr}
   d4be6:	4b02      	ldr	r3, [pc, #8]	; (d4bf0 <HAL_USART_Init+0xc>)
   d4be8:	681b      	ldr	r3, [r3, #0]
   d4bea:	681b      	ldr	r3, [r3, #0]
   d4bec:	9301      	str	r3, [sp, #4]
   d4bee:	bd08      	pop	{r3, pc}
   d4bf0:	0003023c 	.word	0x0003023c

000d4bf4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4bf4:	b508      	push	{r3, lr}
   d4bf6:	4b02      	ldr	r3, [pc, #8]	; (d4c00 <HAL_USART_Write_Data+0xc>)
   d4bf8:	681b      	ldr	r3, [r3, #0]
   d4bfa:	68db      	ldr	r3, [r3, #12]
   d4bfc:	9301      	str	r3, [sp, #4]
   d4bfe:	bd08      	pop	{r3, pc}
   d4c00:	0003023c 	.word	0x0003023c

000d4c04 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4c04:	b508      	push	{r3, lr}
   d4c06:	4b02      	ldr	r3, [pc, #8]	; (d4c10 <HAL_USART_Available_Data+0xc>)
   d4c08:	681b      	ldr	r3, [r3, #0]
   d4c0a:	691b      	ldr	r3, [r3, #16]
   d4c0c:	9301      	str	r3, [sp, #4]
   d4c0e:	bd08      	pop	{r3, pc}
   d4c10:	0003023c 	.word	0x0003023c

000d4c14 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4c14:	b508      	push	{r3, lr}
   d4c16:	4b02      	ldr	r3, [pc, #8]	; (d4c20 <HAL_USART_Read_Data+0xc>)
   d4c18:	681b      	ldr	r3, [r3, #0]
   d4c1a:	695b      	ldr	r3, [r3, #20]
   d4c1c:	9301      	str	r3, [sp, #4]
   d4c1e:	bd08      	pop	{r3, pc}
   d4c20:	0003023c 	.word	0x0003023c

000d4c24 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4c24:	b508      	push	{r3, lr}
   d4c26:	4b02      	ldr	r3, [pc, #8]	; (d4c30 <HAL_USART_Peek_Data+0xc>)
   d4c28:	681b      	ldr	r3, [r3, #0]
   d4c2a:	699b      	ldr	r3, [r3, #24]
   d4c2c:	9301      	str	r3, [sp, #4]
   d4c2e:	bd08      	pop	{r3, pc}
   d4c30:	0003023c 	.word	0x0003023c

000d4c34 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4c34:	b508      	push	{r3, lr}
   d4c36:	4b02      	ldr	r3, [pc, #8]	; (d4c40 <HAL_USART_Flush_Data+0xc>)
   d4c38:	681b      	ldr	r3, [r3, #0]
   d4c3a:	69db      	ldr	r3, [r3, #28]
   d4c3c:	9301      	str	r3, [sp, #4]
   d4c3e:	bd08      	pop	{r3, pc}
   d4c40:	0003023c 	.word	0x0003023c

000d4c44 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4c44:	b508      	push	{r3, lr}
   d4c46:	4b02      	ldr	r3, [pc, #8]	; (d4c50 <HAL_USART_Is_Enabled+0xc>)
   d4c48:	681b      	ldr	r3, [r3, #0]
   d4c4a:	6a1b      	ldr	r3, [r3, #32]
   d4c4c:	9301      	str	r3, [sp, #4]
   d4c4e:	bd08      	pop	{r3, pc}
   d4c50:	0003023c 	.word	0x0003023c

000d4c54 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4c54:	b508      	push	{r3, lr}
   d4c56:	4b02      	ldr	r3, [pc, #8]	; (d4c60 <HAL_USART_Available_Data_For_Write+0xc>)
   d4c58:	681b      	ldr	r3, [r3, #0]
   d4c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4c5c:	9301      	str	r3, [sp, #4]
   d4c5e:	bd08      	pop	{r3, pc}
   d4c60:	0003023c 	.word	0x0003023c

000d4c64 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d4c64:	b508      	push	{r3, lr}
   d4c66:	4b02      	ldr	r3, [pc, #8]	; (d4c70 <HAL_I2C_Begin_Transmission+0xc>)
   d4c68:	681b      	ldr	r3, [r3, #0]
   d4c6a:	699b      	ldr	r3, [r3, #24]
   d4c6c:	9301      	str	r3, [sp, #4]
   d4c6e:	bd08      	pop	{r3, pc}
   d4c70:	00030228 	.word	0x00030228

000d4c74 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4c74:	b508      	push	{r3, lr}
   d4c76:	4b02      	ldr	r3, [pc, #8]	; (d4c80 <HAL_I2C_End_Transmission+0xc>)
   d4c78:	681b      	ldr	r3, [r3, #0]
   d4c7a:	69db      	ldr	r3, [r3, #28]
   d4c7c:	9301      	str	r3, [sp, #4]
   d4c7e:	bd08      	pop	{r3, pc}
   d4c80:	00030228 	.word	0x00030228

000d4c84 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4c84:	b508      	push	{r3, lr}
   d4c86:	4b02      	ldr	r3, [pc, #8]	; (d4c90 <HAL_I2C_Write_Data+0xc>)
   d4c88:	681b      	ldr	r3, [r3, #0]
   d4c8a:	6a1b      	ldr	r3, [r3, #32]
   d4c8c:	9301      	str	r3, [sp, #4]
   d4c8e:	bd08      	pop	{r3, pc}
   d4c90:	00030228 	.word	0x00030228

000d4c94 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4c94:	b508      	push	{r3, lr}
   d4c96:	4b02      	ldr	r3, [pc, #8]	; (d4ca0 <HAL_I2C_Available_Data+0xc>)
   d4c98:	681b      	ldr	r3, [r3, #0]
   d4c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4c9c:	9301      	str	r3, [sp, #4]
   d4c9e:	bd08      	pop	{r3, pc}
   d4ca0:	00030228 	.word	0x00030228

000d4ca4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4ca4:	b508      	push	{r3, lr}
   d4ca6:	4b02      	ldr	r3, [pc, #8]	; (d4cb0 <HAL_I2C_Read_Data+0xc>)
   d4ca8:	681b      	ldr	r3, [r3, #0]
   d4caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4cac:	9301      	str	r3, [sp, #4]
   d4cae:	bd08      	pop	{r3, pc}
   d4cb0:	00030228 	.word	0x00030228

000d4cb4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4cb4:	b508      	push	{r3, lr}
   d4cb6:	4b02      	ldr	r3, [pc, #8]	; (d4cc0 <HAL_I2C_Peek_Data+0xc>)
   d4cb8:	681b      	ldr	r3, [r3, #0]
   d4cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4cbc:	9301      	str	r3, [sp, #4]
   d4cbe:	bd08      	pop	{r3, pc}
   d4cc0:	00030228 	.word	0x00030228

000d4cc4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4cc4:	b508      	push	{r3, lr}
   d4cc6:	4b02      	ldr	r3, [pc, #8]	; (d4cd0 <HAL_I2C_Flush_Data+0xc>)
   d4cc8:	681b      	ldr	r3, [r3, #0]
   d4cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ccc:	9301      	str	r3, [sp, #4]
   d4cce:	bd08      	pop	{r3, pc}
   d4cd0:	00030228 	.word	0x00030228

000d4cd4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4cd4:	b508      	push	{r3, lr}
   d4cd6:	4b02      	ldr	r3, [pc, #8]	; (d4ce0 <HAL_I2C_Is_Enabled+0xc>)
   d4cd8:	681b      	ldr	r3, [r3, #0]
   d4cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4cdc:	9301      	str	r3, [sp, #4]
   d4cde:	bd08      	pop	{r3, pc}
   d4ce0:	00030228 	.word	0x00030228

000d4ce4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4ce4:	b508      	push	{r3, lr}
   d4ce6:	4b02      	ldr	r3, [pc, #8]	; (d4cf0 <HAL_I2C_Init+0xc>)
   d4ce8:	681b      	ldr	r3, [r3, #0]
   d4cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4cec:	9301      	str	r3, [sp, #4]
   d4cee:	bd08      	pop	{r3, pc}
   d4cf0:	00030228 	.word	0x00030228

000d4cf4 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d4cf4:	b508      	push	{r3, lr}
   d4cf6:	4b02      	ldr	r3, [pc, #8]	; (d4d00 <HAL_I2C_Acquire+0xc>)
   d4cf8:	681b      	ldr	r3, [r3, #0]
   d4cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4cfc:	9301      	str	r3, [sp, #4]
   d4cfe:	bd08      	pop	{r3, pc}
   d4d00:	00030228 	.word	0x00030228

000d4d04 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d4d04:	b508      	push	{r3, lr}
   d4d06:	4b02      	ldr	r3, [pc, #8]	; (d4d10 <HAL_I2C_Release+0xc>)
   d4d08:	681b      	ldr	r3, [r3, #0]
   d4d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4d0c:	9301      	str	r3, [sp, #4]
   d4d0e:	bd08      	pop	{r3, pc}
   d4d10:	00030228 	.word	0x00030228

000d4d14 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d4d14:	b508      	push	{r3, lr}
   d4d16:	4b02      	ldr	r3, [pc, #8]	; (d4d20 <HAL_I2C_Request_Data_Ex+0xc>)
   d4d18:	681b      	ldr	r3, [r3, #0]
   d4d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4d1c:	9301      	str	r3, [sp, #4]
   d4d1e:	bd08      	pop	{r3, pc}
   d4d20:	00030228 	.word	0x00030228

000d4d24 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d4d24:	b508      	push	{r3, lr}
   d4d26:	4b02      	ldr	r3, [pc, #8]	; (d4d30 <cellular_signal+0xc>)
   d4d28:	681b      	ldr	r3, [r3, #0]
   d4d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4d2c:	9301      	str	r3, [sp, #4]
   d4d2e:	bd08      	pop	{r3, pc}
   d4d30:	00030274 	.word	0x00030274

000d4d34 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4d34:	b508      	push	{r3, lr}
   d4d36:	4b02      	ldr	r3, [pc, #8]	; (d4d40 <HAL_USB_USART_Init+0xc>)
   d4d38:	681b      	ldr	r3, [r3, #0]
   d4d3a:	681b      	ldr	r3, [r3, #0]
   d4d3c:	9301      	str	r3, [sp, #4]
   d4d3e:	bd08      	pop	{r3, pc}
   d4d40:	0003024c 	.word	0x0003024c

000d4d44 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4d44:	b508      	push	{r3, lr}
   d4d46:	4b02      	ldr	r3, [pc, #8]	; (d4d50 <HAL_USB_USART_Begin+0xc>)
   d4d48:	681b      	ldr	r3, [r3, #0]
   d4d4a:	685b      	ldr	r3, [r3, #4]
   d4d4c:	9301      	str	r3, [sp, #4]
   d4d4e:	bd08      	pop	{r3, pc}
   d4d50:	0003024c 	.word	0x0003024c

000d4d54 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4d54:	b508      	push	{r3, lr}
   d4d56:	4b02      	ldr	r3, [pc, #8]	; (d4d60 <HAL_USB_USART_Available_Data+0xc>)
   d4d58:	681b      	ldr	r3, [r3, #0]
   d4d5a:	691b      	ldr	r3, [r3, #16]
   d4d5c:	9301      	str	r3, [sp, #4]
   d4d5e:	bd08      	pop	{r3, pc}
   d4d60:	0003024c 	.word	0x0003024c

000d4d64 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4d64:	b508      	push	{r3, lr}
   d4d66:	4b02      	ldr	r3, [pc, #8]	; (d4d70 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4d68:	681b      	ldr	r3, [r3, #0]
   d4d6a:	695b      	ldr	r3, [r3, #20]
   d4d6c:	9301      	str	r3, [sp, #4]
   d4d6e:	bd08      	pop	{r3, pc}
   d4d70:	0003024c 	.word	0x0003024c

000d4d74 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4d74:	b508      	push	{r3, lr}
   d4d76:	4b02      	ldr	r3, [pc, #8]	; (d4d80 <HAL_USB_USART_Receive_Data+0xc>)
   d4d78:	681b      	ldr	r3, [r3, #0]
   d4d7a:	699b      	ldr	r3, [r3, #24]
   d4d7c:	9301      	str	r3, [sp, #4]
   d4d7e:	bd08      	pop	{r3, pc}
   d4d80:	0003024c 	.word	0x0003024c

000d4d84 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4d84:	b508      	push	{r3, lr}
   d4d86:	4b02      	ldr	r3, [pc, #8]	; (d4d90 <HAL_USB_USART_Send_Data+0xc>)
   d4d88:	681b      	ldr	r3, [r3, #0]
   d4d8a:	69db      	ldr	r3, [r3, #28]
   d4d8c:	9301      	str	r3, [sp, #4]
   d4d8e:	bd08      	pop	{r3, pc}
   d4d90:	0003024c 	.word	0x0003024c

000d4d94 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4d94:	b508      	push	{r3, lr}
   d4d96:	4b02      	ldr	r3, [pc, #8]	; (d4da0 <HAL_USB_USART_Flush_Data+0xc>)
   d4d98:	681b      	ldr	r3, [r3, #0]
   d4d9a:	6a1b      	ldr	r3, [r3, #32]
   d4d9c:	9301      	str	r3, [sp, #4]
   d4d9e:	bd08      	pop	{r3, pc}
   d4da0:	0003024c 	.word	0x0003024c

000d4da4 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d4da4:	b508      	push	{r3, lr}
   d4da6:	4b02      	ldr	r3, [pc, #8]	; (d4db0 <system_mode+0xc>)
   d4da8:	681b      	ldr	r3, [r3, #0]
   d4daa:	681b      	ldr	r3, [r3, #0]
   d4dac:	9301      	str	r3, [sp, #4]
   d4dae:	bd08      	pop	{r3, pc}
   d4db0:	00030220 	.word	0x00030220

000d4db4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4db4:	b508      	push	{r3, lr}
   d4db6:	4b02      	ldr	r3, [pc, #8]	; (d4dc0 <set_system_mode+0xc>)
   d4db8:	681b      	ldr	r3, [r3, #0]
   d4dba:	685b      	ldr	r3, [r3, #4]
   d4dbc:	9301      	str	r3, [sp, #4]
   d4dbe:	bd08      	pop	{r3, pc}
   d4dc0:	00030220 	.word	0x00030220

000d4dc4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d4dc4:	b508      	push	{r3, lr}
   d4dc6:	4b02      	ldr	r3, [pc, #8]	; (d4dd0 <system_thread_set_state+0xc>)
   d4dc8:	681b      	ldr	r3, [r3, #0]
   d4dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4dcc:	9301      	str	r3, [sp, #4]
   d4dce:	bd08      	pop	{r3, pc}
   d4dd0:	00030220 	.word	0x00030220

000d4dd4 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d4dd4:	b508      	push	{r3, lr}
   d4dd6:	4b02      	ldr	r3, [pc, #8]	; (d4de0 <system_thread_get_state+0xc>)
   d4dd8:	681b      	ldr	r3, [r3, #0]
   d4dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4ddc:	9301      	str	r3, [sp, #4]
   d4dde:	bd08      	pop	{r3, pc}
   d4de0:	00030220 	.word	0x00030220

000d4de4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4de4:	b508      	push	{r3, lr}
   d4de6:	4b03      	ldr	r3, [pc, #12]	; (d4df4 <system_ctrl_set_app_request_handler+0x10>)
   d4de8:	681b      	ldr	r3, [r3, #0]
   d4dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4dee:	9301      	str	r3, [sp, #4]
   d4df0:	bd08      	pop	{r3, pc}
   d4df2:	0000      	.short	0x0000
   d4df4:	00030220 	.word	0x00030220

000d4df8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4df8:	b508      	push	{r3, lr}
   d4dfa:	4b03      	ldr	r3, [pc, #12]	; (d4e08 <system_ctrl_set_result+0x10>)
   d4dfc:	681b      	ldr	r3, [r3, #0]
   d4dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4e02:	9301      	str	r3, [sp, #4]
   d4e04:	bd08      	pop	{r3, pc}
   d4e06:	0000      	.short	0x0000
   d4e08:	00030220 	.word	0x00030220

000d4e0c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4e0c:	b508      	push	{r3, lr}
   d4e0e:	4b02      	ldr	r3, [pc, #8]	; (d4e18 <network_connect+0xc>)
   d4e10:	681b      	ldr	r3, [r3, #0]
   d4e12:	685b      	ldr	r3, [r3, #4]
   d4e14:	9301      	str	r3, [sp, #4]
   d4e16:	bd08      	pop	{r3, pc}
   d4e18:	00030240 	.word	0x00030240

000d4e1c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4e1c:	b508      	push	{r3, lr}
   d4e1e:	4b02      	ldr	r3, [pc, #8]	; (d4e28 <network_connecting+0xc>)
   d4e20:	681b      	ldr	r3, [r3, #0]
   d4e22:	689b      	ldr	r3, [r3, #8]
   d4e24:	9301      	str	r3, [sp, #4]
   d4e26:	bd08      	pop	{r3, pc}
   d4e28:	00030240 	.word	0x00030240

000d4e2c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4e2c:	b508      	push	{r3, lr}
   d4e2e:	4b02      	ldr	r3, [pc, #8]	; (d4e38 <network_disconnect+0xc>)
   d4e30:	681b      	ldr	r3, [r3, #0]
   d4e32:	68db      	ldr	r3, [r3, #12]
   d4e34:	9301      	str	r3, [sp, #4]
   d4e36:	bd08      	pop	{r3, pc}
   d4e38:	00030240 	.word	0x00030240

000d4e3c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4e3c:	b508      	push	{r3, lr}
   d4e3e:	4b02      	ldr	r3, [pc, #8]	; (d4e48 <network_ready+0xc>)
   d4e40:	681b      	ldr	r3, [r3, #0]
   d4e42:	691b      	ldr	r3, [r3, #16]
   d4e44:	9301      	str	r3, [sp, #4]
   d4e46:	bd08      	pop	{r3, pc}
   d4e48:	00030240 	.word	0x00030240

000d4e4c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4e4c:	b508      	push	{r3, lr}
   d4e4e:	4b02      	ldr	r3, [pc, #8]	; (d4e58 <network_on+0xc>)
   d4e50:	681b      	ldr	r3, [r3, #0]
   d4e52:	695b      	ldr	r3, [r3, #20]
   d4e54:	9301      	str	r3, [sp, #4]
   d4e56:	bd08      	pop	{r3, pc}
   d4e58:	00030240 	.word	0x00030240

000d4e5c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4e5c:	b508      	push	{r3, lr}
   d4e5e:	4b02      	ldr	r3, [pc, #8]	; (d4e68 <network_off+0xc>)
   d4e60:	681b      	ldr	r3, [r3, #0]
   d4e62:	699b      	ldr	r3, [r3, #24]
   d4e64:	9301      	str	r3, [sp, #4]
   d4e66:	bd08      	pop	{r3, pc}
   d4e68:	00030240 	.word	0x00030240

000d4e6c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4e6c:	b508      	push	{r3, lr}
   d4e6e:	4b02      	ldr	r3, [pc, #8]	; (d4e78 <network_listen+0xc>)
   d4e70:	681b      	ldr	r3, [r3, #0]
   d4e72:	69db      	ldr	r3, [r3, #28]
   d4e74:	9301      	str	r3, [sp, #4]
   d4e76:	bd08      	pop	{r3, pc}
   d4e78:	00030240 	.word	0x00030240

000d4e7c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4e7c:	b508      	push	{r3, lr}
   d4e7e:	4b02      	ldr	r3, [pc, #8]	; (d4e88 <network_listening+0xc>)
   d4e80:	681b      	ldr	r3, [r3, #0]
   d4e82:	6a1b      	ldr	r3, [r3, #32]
   d4e84:	9301      	str	r3, [sp, #4]
   d4e86:	bd08      	pop	{r3, pc}
   d4e88:	00030240 	.word	0x00030240

000d4e8c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4e8c:	b508      	push	{r3, lr}
   d4e8e:	4b02      	ldr	r3, [pc, #8]	; (d4e98 <network_set_listen_timeout+0xc>)
   d4e90:	681b      	ldr	r3, [r3, #0]
   d4e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e94:	9301      	str	r3, [sp, #4]
   d4e96:	bd08      	pop	{r3, pc}
   d4e98:	00030240 	.word	0x00030240

000d4e9c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4e9c:	b508      	push	{r3, lr}
   d4e9e:	4b02      	ldr	r3, [pc, #8]	; (d4ea8 <network_get_listen_timeout+0xc>)
   d4ea0:	681b      	ldr	r3, [r3, #0]
   d4ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4ea4:	9301      	str	r3, [sp, #4]
   d4ea6:	bd08      	pop	{r3, pc}
   d4ea8:	00030240 	.word	0x00030240

000d4eac <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4eac:	b508      	push	{r3, lr}
   d4eae:	4b02      	ldr	r3, [pc, #8]	; (d4eb8 <spark_process+0xc>)
   d4eb0:	681b      	ldr	r3, [r3, #0]
   d4eb2:	689b      	ldr	r3, [r3, #8]
   d4eb4:	9301      	str	r3, [sp, #4]
   d4eb6:	bd08      	pop	{r3, pc}
   d4eb8:	00030244 	.word	0x00030244

000d4ebc <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4ebc:	b508      	push	{r3, lr}
   d4ebe:	4b02      	ldr	r3, [pc, #8]	; (d4ec8 <spark_cloud_flag_connected+0xc>)
   d4ec0:	681b      	ldr	r3, [r3, #0]
   d4ec2:	695b      	ldr	r3, [r3, #20]
   d4ec4:	9301      	str	r3, [sp, #4]
   d4ec6:	bd08      	pop	{r3, pc}
   d4ec8:	00030244 	.word	0x00030244

000d4ecc <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d4ecc:	b508      	push	{r3, lr}
   d4ece:	4b02      	ldr	r3, [pc, #8]	; (d4ed8 <spark_sync_time+0xc>)
   d4ed0:	681b      	ldr	r3, [r3, #0]
   d4ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4ed4:	9301      	str	r3, [sp, #4]
   d4ed6:	bd08      	pop	{r3, pc}
   d4ed8:	00030244 	.word	0x00030244

000d4edc <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d4edc:	b508      	push	{r3, lr}
   d4ede:	4b02      	ldr	r3, [pc, #8]	; (d4ee8 <spark_sync_time_pending+0xc>)
   d4ee0:	681b      	ldr	r3, [r3, #0]
   d4ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ee4:	9301      	str	r3, [sp, #4]
   d4ee6:	bd08      	pop	{r3, pc}
   d4ee8:	00030244 	.word	0x00030244

000d4eec <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4eec:	b508      	push	{r3, lr}
   d4eee:	4b02      	ldr	r3, [pc, #8]	; (d4ef8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4ef0:	681b      	ldr	r3, [r3, #0]
   d4ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4ef4:	9301      	str	r3, [sp, #4]
   d4ef6:	bd08      	pop	{r3, pc}
   d4ef8:	00030244 	.word	0x00030244

000d4efc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4efc:	b508      	push	{r3, lr}
   d4efe:	4b02      	ldr	r3, [pc, #8]	; (d4f08 <malloc+0xc>)
   d4f00:	681b      	ldr	r3, [r3, #0]
   d4f02:	681b      	ldr	r3, [r3, #0]
   d4f04:	9301      	str	r3, [sp, #4]
   d4f06:	bd08      	pop	{r3, pc}
   d4f08:	0003021c 	.word	0x0003021c

000d4f0c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4f0c:	b508      	push	{r3, lr}
   d4f0e:	4b02      	ldr	r3, [pc, #8]	; (d4f18 <free+0xc>)
   d4f10:	681b      	ldr	r3, [r3, #0]
   d4f12:	685b      	ldr	r3, [r3, #4]
   d4f14:	9301      	str	r3, [sp, #4]
   d4f16:	bd08      	pop	{r3, pc}
   d4f18:	0003021c 	.word	0x0003021c

000d4f1c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4f1c:	b508      	push	{r3, lr}
   d4f1e:	4b02      	ldr	r3, [pc, #8]	; (d4f28 <realloc+0xc>)
   d4f20:	681b      	ldr	r3, [r3, #0]
   d4f22:	689b      	ldr	r3, [r3, #8]
   d4f24:	9301      	str	r3, [sp, #4]
   d4f26:	bd08      	pop	{r3, pc}
   d4f28:	0003021c 	.word	0x0003021c

000d4f2c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4f2c:	2200      	movs	r2, #0
   d4f2e:	4611      	mov	r1, r2
   d4f30:	6840      	ldr	r0, [r0, #4]
   d4f32:	f7ff bfa3 	b.w	d4e7c <network_listening>

000d4f36 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4f36:	2200      	movs	r2, #0
   d4f38:	4611      	mov	r1, r2
   d4f3a:	6840      	ldr	r0, [r0, #4]
   d4f3c:	f7ff bfae 	b.w	d4e9c <network_get_listen_timeout>

000d4f40 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4f40:	2200      	movs	r2, #0
   d4f42:	6840      	ldr	r0, [r0, #4]
   d4f44:	f7ff bfa2 	b.w	d4e8c <network_set_listen_timeout>

000d4f48 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4f48:	2200      	movs	r2, #0
   d4f4a:	f081 0101 	eor.w	r1, r1, #1
   d4f4e:	6840      	ldr	r0, [r0, #4]
   d4f50:	f7ff bf8c 	b.w	d4e6c <network_listen>

000d4f54 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4f54:	2300      	movs	r3, #0
   d4f56:	461a      	mov	r2, r3
   d4f58:	4619      	mov	r1, r3
   d4f5a:	6840      	ldr	r0, [r0, #4]
   d4f5c:	f7ff bf7e 	b.w	d4e5c <network_off>

000d4f60 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4f60:	2300      	movs	r3, #0
   d4f62:	461a      	mov	r2, r3
   d4f64:	4619      	mov	r1, r3
   d4f66:	6840      	ldr	r0, [r0, #4]
   d4f68:	f7ff bf70 	b.w	d4e4c <network_on>

000d4f6c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4f6c:	2200      	movs	r2, #0
   d4f6e:	4611      	mov	r1, r2
   d4f70:	6840      	ldr	r0, [r0, #4]
   d4f72:	f7ff bf63 	b.w	d4e3c <network_ready>

000d4f76 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4f76:	2200      	movs	r2, #0
   d4f78:	4611      	mov	r1, r2
   d4f7a:	6840      	ldr	r0, [r0, #4]
   d4f7c:	f7ff bf4e 	b.w	d4e1c <network_connecting>

000d4f80 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4f80:	2200      	movs	r2, #0
   d4f82:	2102      	movs	r1, #2
   d4f84:	6840      	ldr	r0, [r0, #4]
   d4f86:	f7ff bf51 	b.w	d4e2c <network_disconnect>

000d4f8a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4f8a:	2300      	movs	r3, #0
   d4f8c:	461a      	mov	r2, r3
   d4f8e:	6840      	ldr	r0, [r0, #4]
   d4f90:	f7ff bf3c 	b.w	d4e0c <network_connect>

000d4f94 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4f94:	4b02      	ldr	r3, [pc, #8]	; (d4fa0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4f96:	2203      	movs	r2, #3
   d4f98:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4f9a:	4a02      	ldr	r2, [pc, #8]	; (d4fa4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4f9c:	601a      	str	r2, [r3, #0]
   d4f9e:	4770      	bx	lr
   d4fa0:	2003e388 	.word	0x2003e388
   d4fa4:	000d71dc 	.word	0x000d71dc

000d4fa8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4fa8:	b510      	push	{r4, lr}
   d4faa:	4604      	mov	r4, r0
{
    _spi = spi;
   d4fac:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d4fae:	4608      	mov	r0, r1
   d4fb0:	f7ff fd68 	bl	d4a84 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4fb4:	2300      	movs	r3, #0
   d4fb6:	6063      	str	r3, [r4, #4]
}
   d4fb8:	4620      	mov	r0, r4
   d4fba:	bd10      	pop	{r4, pc}

000d4fbc <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d4fbc:	7800      	ldrb	r0, [r0, #0]
   d4fbe:	f7ff bd69 	b.w	d4a94 <HAL_SPI_Is_Enabled>

000d4fc2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4fc2:	b510      	push	{r4, lr}
   d4fc4:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4fc6:	6800      	ldr	r0, [r0, #0]
   d4fc8:	b118      	cbz	r0, d4fd2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d4fca:	f7ff ff9f 	bl	d4f0c <free>
            wakeupSource_ = nullptr;
   d4fce:	2300      	movs	r3, #0
   d4fd0:	6023      	str	r3, [r4, #0]
   d4fd2:	bd10      	pop	{r4, pc}

000d4fd4 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4fd4:	b510      	push	{r4, lr}
   d4fd6:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d4fd8:	f7ff fff3 	bl	d4fc2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4fdc:	4620      	mov	r0, r4
   d4fde:	bd10      	pop	{r4, pc}

000d4fe0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4fe0:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4fe2:	4c09      	ldr	r4, [pc, #36]	; (d5008 <_GLOBAL__sub_I_System+0x28>)
   d4fe4:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4fe6:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4fea:	6020      	str	r0, [r4, #0]
   d4fec:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4fee:	71a0      	strb	r0, [r4, #6]
   d4ff0:	8120      	strh	r0, [r4, #8]
   d4ff2:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4ff4:	f7ff fede 	bl	d4db4 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4ff8:	4620      	mov	r0, r4
   d4ffa:	4a04      	ldr	r2, [pc, #16]	; (d500c <_GLOBAL__sub_I_System+0x2c>)
   d4ffc:	4904      	ldr	r1, [pc, #16]	; (d5010 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5002:	f001 b935 	b.w	d6270 <__aeabi_atexit>
   d5006:	bf00      	nop
   d5008:	2003e390 	.word	0x2003e390
   d500c:	2003e324 	.word	0x2003e324
   d5010:	000d4fd5 	.word	0x000d4fd5

000d5014 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d5014:	b510      	push	{r4, lr}
   d5016:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d5018:	f002 f818 	bl	d704c <strlen>
   d501c:	3801      	subs	r0, #1
   d501e:	1823      	adds	r3, r4, r0
   d5020:	4620      	mov	r0, r4
	while(i<j){
   d5022:	4298      	cmp	r0, r3
   d5024:	d206      	bcs.n	d5034 <_Z11str_reversePc+0x20>
		c = *i;
   d5026:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d5028:	7819      	ldrb	r1, [r3, #0]
   d502a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d502e:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d5032:	e7f6      	b.n	d5022 <_Z11str_reversePc+0xe>
   d5034:	bd10      	pop	{r4, pc}

000d5036 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5036:	b570      	push	{r4, r5, r6, lr}
   d5038:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d503a:	1e91      	subs	r1, r2, #2
   d503c:	2922      	cmp	r1, #34	; 0x22
   d503e:	d820      	bhi.n	d5082 <ultoa+0x4c>
   d5040:	4625      	mov	r5, r4
   d5042:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5044:	b910      	cbnz	r0, d504c <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5046:	4423      	add	r3, r4
            *ptr++ = '0';
   d5048:	2230      	movs	r2, #48	; 0x30
   d504a:	e00e      	b.n	d506a <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d504c:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d5050:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d5054:	b2c1      	uxtb	r1, r0
   d5056:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d505a:	2809      	cmp	r0, #9
                *ptr += '0';
   d505c:	bf94      	ite	ls
   d505e:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d5060:	3157      	addhi	r1, #87	; 0x57
   d5062:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d5066:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5068:	e7eb      	b.n	d5042 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d506a:	4299      	cmp	r1, r3
   d506c:	d202      	bcs.n	d5074 <ultoa+0x3e>
            *ptr++ = '0';
   d506e:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5072:	e7fa      	b.n	d506a <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d5074:	2300      	movs	r3, #0
	str_reverse(buffer);
   d5076:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d5078:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d507a:	f7ff ffcb 	bl	d5014 <_Z11str_reversePc>
	return buffer;
   d507e:	4620      	mov	r0, r4
   d5080:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d5082:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d5084:	bd70      	pop	{r4, r5, r6, pc}

000d5086 <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   d5086:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   d5088:	2301      	movs	r3, #1
   d508a:	f7ff ffd4 	bl	d5036 <ultoa>
}
   d508e:	bd08      	pop	{r3, pc}

000d5090 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5090:	b510      	push	{r4, lr}
   d5092:	4604      	mov	r4, r0
{
	free(buffer);
   d5094:	6800      	ldr	r0, [r0, #0]
   d5096:	f7ff ff39 	bl	d4f0c <free>
}
   d509a:	4620      	mov	r0, r4
   d509c:	bd10      	pop	{r4, pc}

000d509e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d509e:	b510      	push	{r4, lr}
   d50a0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d50a2:	6800      	ldr	r0, [r0, #0]
   d50a4:	b108      	cbz	r0, d50aa <_ZN6String10invalidateEv+0xc>
   d50a6:	f7ff ff31 	bl	d4f0c <free>
	buffer = NULL;
   d50aa:	2300      	movs	r3, #0
   d50ac:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d50ae:	60a3      	str	r3, [r4, #8]
   d50b0:	6063      	str	r3, [r4, #4]
   d50b2:	bd10      	pop	{r4, pc}

000d50b4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d50b4:	b538      	push	{r3, r4, r5, lr}
   d50b6:	4604      	mov	r4, r0
   d50b8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d50ba:	6800      	ldr	r0, [r0, #0]
   d50bc:	3101      	adds	r1, #1
   d50be:	f7ff ff2d 	bl	d4f1c <realloc>
	if (newbuffer) {
   d50c2:	b110      	cbz	r0, d50ca <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d50c4:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d50c8:	2001      	movs	r0, #1
	}
	return 0;
}
   d50ca:	bd38      	pop	{r3, r4, r5, pc}

000d50cc <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d50cc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d50ce:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d50d0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d50d2:	b113      	cbz	r3, d50da <_ZN6String7reserveEj+0xe>
   d50d4:	6843      	ldr	r3, [r0, #4]
   d50d6:	428b      	cmp	r3, r1
   d50d8:	d207      	bcs.n	d50ea <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d50da:	4620      	mov	r0, r4
   d50dc:	f7ff ffea 	bl	d50b4 <_ZN6String12changeBufferEj>
   d50e0:	b120      	cbz	r0, d50ec <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d50e2:	68a3      	ldr	r3, [r4, #8]
   d50e4:	b90b      	cbnz	r3, d50ea <_ZN6String7reserveEj+0x1e>
   d50e6:	6822      	ldr	r2, [r4, #0]
   d50e8:	7013      	strb	r3, [r2, #0]
   d50ea:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d50ec:	bd10      	pop	{r4, pc}

000d50ee <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d50ee:	b570      	push	{r4, r5, r6, lr}
   d50f0:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d50f2:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d50f4:	4604      	mov	r4, r0
   d50f6:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d50f8:	f7ff ffe8 	bl	d50cc <_ZN6String7reserveEj>
   d50fc:	b918      	cbnz	r0, d5106 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d50fe:	4620      	mov	r0, r4
   d5100:	f7ff ffcd 	bl	d509e <_ZN6String10invalidateEv>
		return *this;
   d5104:	e009      	b.n	d511a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5106:	462a      	mov	r2, r5
   d5108:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d510a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d510c:	6820      	ldr	r0, [r4, #0]
   d510e:	f001 ff27 	bl	d6f60 <memcpy>
	buffer[len] = 0;
   d5112:	6822      	ldr	r2, [r4, #0]
   d5114:	68a3      	ldr	r3, [r4, #8]
   d5116:	2100      	movs	r1, #0
   d5118:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d511a:	4620      	mov	r0, r4
   d511c:	bd70      	pop	{r4, r5, r6, pc}

000d511e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d511e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5120:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5122:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5124:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5126:	6043      	str	r3, [r0, #4]
	len = 0;
   d5128:	6083      	str	r3, [r0, #8]
	flags = 0;
   d512a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d512c:	460d      	mov	r5, r1
   d512e:	b139      	cbz	r1, d5140 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5130:	4608      	mov	r0, r1
   d5132:	f001 ff8b 	bl	d704c <strlen>
   d5136:	4629      	mov	r1, r5
   d5138:	4602      	mov	r2, r0
   d513a:	4620      	mov	r0, r4
   d513c:	f7ff ffd7 	bl	d50ee <_ZN6String4copyEPKcj>
}
   d5140:	4620      	mov	r0, r4
   d5142:	bd38      	pop	{r3, r4, r5, pc}

000d5144 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5144:	b538      	push	{r3, r4, r5, lr}
   d5146:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5148:	460c      	mov	r4, r1
   d514a:	b141      	cbz	r1, d515e <_ZN6StringaSEPKc+0x1a>
   d514c:	4608      	mov	r0, r1
   d514e:	f001 ff7d 	bl	d704c <strlen>
   d5152:	4621      	mov	r1, r4
   d5154:	4602      	mov	r2, r0
   d5156:	4628      	mov	r0, r5
   d5158:	f7ff ffc9 	bl	d50ee <_ZN6String4copyEPKcj>
   d515c:	e001      	b.n	d5162 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d515e:	f7ff ff9e 	bl	d509e <_ZN6String10invalidateEv>

	return *this;
}
   d5162:	4628      	mov	r0, r5
   d5164:	bd38      	pop	{r3, r4, r5, pc}

000d5166 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
   d5166:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5168:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d516a:	2300      	movs	r3, #0
   d516c:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d516e:	6063      	str	r3, [r4, #4]
	len = 0;
   d5170:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5172:	7323      	strb	r3, [r4, #12]
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
   d5174:	4608      	mov	r0, r1
{
	init();
	char buf[9];
	utoa(value, buf, base);
   d5176:	a901      	add	r1, sp, #4
   d5178:	f7ff ff85 	bl	d5086 <utoa>
	*this = buf;
   d517c:	a901      	add	r1, sp, #4
   d517e:	4620      	mov	r0, r4
   d5180:	f7ff ffe0 	bl	d5144 <_ZN6StringaSEPKc>
}
   d5184:	4620      	mov	r0, r4
   d5186:	b004      	add	sp, #16
   d5188:	bd10      	pop	{r4, pc}

000d518a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d518a:	b510      	push	{r4, lr}
   d518c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d518e:	6800      	ldr	r0, [r0, #0]
   d5190:	b108      	cbz	r0, d5196 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5192:	f7ff fd0f 	bl	d4bb4 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d5196:	4620      	mov	r0, r4
   d5198:	bd10      	pop	{r4, pc}
	...

000d519c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d519c:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d519e:	4c06      	ldr	r4, [pc, #24]	; (d51b8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d51a0:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d51a2:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d51a4:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d51a6:	f7ff fcfd 	bl	d4ba4 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d51aa:	4620      	mov	r0, r4
   d51ac:	4a03      	ldr	r2, [pc, #12]	; (d51bc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d51ae:	4904      	ldr	r1, [pc, #16]	; (d51c0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d51b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d51b4:	f001 b85c 	b.w	d6270 <__aeabi_atexit>
   d51b8:	2003e39c 	.word	0x2003e39c
   d51bc:	2003e324 	.word	0x2003e324
   d51c0:	000d518b 	.word	0x000d518b

000d51c4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d51c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d51c6:	4606      	mov	r6, r0
   d51c8:	460d      	mov	r5, r1
   d51ca:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d51cc:	2400      	movs	r4, #0
  while (size--) {
   d51ce:	42bd      	cmp	r5, r7
   d51d0:	d00c      	beq.n	d51ec <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d51d2:	6833      	ldr	r3, [r6, #0]
   d51d4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d51d8:	689b      	ldr	r3, [r3, #8]
   d51da:	4630      	mov	r0, r6
   d51dc:	4798      	blx	r3
     if (chunk>=0)
   d51de:	2800      	cmp	r0, #0
   d51e0:	db01      	blt.n	d51e6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d51e2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d51e4:	e7f3      	b.n	d51ce <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d51e6:	2c00      	cmp	r4, #0
   d51e8:	bf08      	it	eq
   d51ea:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d51ec:	4620      	mov	r0, r4
   d51ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d51f0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d51f0:	b570      	push	{r4, r5, r6, lr}
   d51f2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d51f4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d51f6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d51f8:	b149      	cbz	r1, d520e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d51fa:	f001 ff27 	bl	d704c <strlen>
   d51fe:	682b      	ldr	r3, [r5, #0]
   d5200:	4602      	mov	r2, r0
   d5202:	4621      	mov	r1, r4
   d5204:	4628      	mov	r0, r5
   d5206:	68db      	ldr	r3, [r3, #12]
    }
   d5208:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d520c:	4718      	bx	r3
    }
   d520e:	bd70      	pop	{r4, r5, r6, pc}

000d5210 <_ZN5Print5printEPKc>:
   d5210:	b508      	push	{r3, lr}
   d5212:	f7ff ffed 	bl	d51f0 <_ZN5Print5writeEPKc>
   d5216:	bd08      	pop	{r3, pc}

000d5218 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5218:	6803      	ldr	r3, [r0, #0]
   d521a:	689b      	ldr	r3, [r3, #8]
   d521c:	4718      	bx	r3

000d521e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d521e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5220:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5222:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5224:	f7ff fff8 	bl	d5218 <_ZN5Print5printEc>
  n += print('\n');
   d5228:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d522a:	4604      	mov	r4, r0
  n += print('\n');
   d522c:	4628      	mov	r0, r5
   d522e:	f7ff fff3 	bl	d5218 <_ZN5Print5printEc>
  return n;
}
   d5232:	4420      	add	r0, r4
   d5234:	bd38      	pop	{r3, r4, r5, pc}

000d5236 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5236:	b530      	push	{r4, r5, lr}
   d5238:	b08b      	sub	sp, #44	; 0x2c
   d523a:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d523c:	2100      	movs	r1, #0
   d523e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5242:	2a01      	cmp	r2, #1
   d5244:	bf98      	it	ls
   d5246:	220a      	movls	r2, #10
   d5248:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d524c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5250:	fb05 3312 	mls	r3, r5, r2, r3
   d5254:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5258:	2b09      	cmp	r3, #9
   d525a:	bf94      	ite	ls
   d525c:	3330      	addls	r3, #48	; 0x30
   d525e:	3337      	addhi	r3, #55	; 0x37
   d5260:	b2db      	uxtb	r3, r3
   d5262:	4621      	mov	r1, r4
   d5264:	f804 3901 	strb.w	r3, [r4], #-1
   d5268:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d526a:	2d00      	cmp	r5, #0
   d526c:	d1ee      	bne.n	d524c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d526e:	f7ff ffbf 	bl	d51f0 <_ZN5Print5writeEPKc>
}
   d5272:	b00b      	add	sp, #44	; 0x2c
   d5274:	bd30      	pop	{r4, r5, pc}
	...

000d5278 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d5278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d527c:	ec57 6b10 	vmov	r6, r7, d0
   d5280:	4682      	mov	sl, r0
   d5282:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d5284:	ee10 2a10 	vmov	r2, s0
   d5288:	463b      	mov	r3, r7
   d528a:	ee10 0a10 	vmov	r0, s0
   d528e:	4639      	mov	r1, r7
   d5290:	f001 fdaa 	bl	d6de8 <__aeabi_dcmpun>
   d5294:	b108      	cbz	r0, d529a <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5296:	494e      	ldr	r1, [pc, #312]	; (d53d0 <_ZN5Print10printFloatEdh+0x158>)
   d5298:	e012      	b.n	d52c0 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d529a:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d529e:	f04f 32ff 	mov.w	r2, #4294967295
   d52a2:	4b4c      	ldr	r3, [pc, #304]	; (d53d4 <_ZN5Print10printFloatEdh+0x15c>)
   d52a4:	4630      	mov	r0, r6
   d52a6:	4649      	mov	r1, r9
   d52a8:	f001 fd9e 	bl	d6de8 <__aeabi_dcmpun>
   d52ac:	b968      	cbnz	r0, d52ca <_ZN5Print10printFloatEdh+0x52>
   d52ae:	f04f 32ff 	mov.w	r2, #4294967295
   d52b2:	4b48      	ldr	r3, [pc, #288]	; (d53d4 <_ZN5Print10printFloatEdh+0x15c>)
   d52b4:	4630      	mov	r0, r6
   d52b6:	4649      	mov	r1, r9
   d52b8:	f001 fd78 	bl	d6dac <__aeabi_dcmple>
   d52bc:	b928      	cbnz	r0, d52ca <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d52be:	4946      	ldr	r1, [pc, #280]	; (d53d8 <_ZN5Print10printFloatEdh+0x160>)
   d52c0:	4650      	mov	r0, sl
   d52c2:	f7ff ff95 	bl	d51f0 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d52c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d52ca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d52ce:	4b43      	ldr	r3, [pc, #268]	; (d53dc <_ZN5Print10printFloatEdh+0x164>)
   d52d0:	4630      	mov	r0, r6
   d52d2:	4639      	mov	r1, r7
   d52d4:	f001 fd7e 	bl	d6dd4 <__aeabi_dcmpgt>
   d52d8:	b108      	cbz	r0, d52de <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d52da:	4941      	ldr	r1, [pc, #260]	; (d53e0 <_ZN5Print10printFloatEdh+0x168>)
   d52dc:	e7f0      	b.n	d52c0 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d52de:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d52e2:	4b40      	ldr	r3, [pc, #256]	; (d53e4 <_ZN5Print10printFloatEdh+0x16c>)
   d52e4:	4630      	mov	r0, r6
   d52e6:	4639      	mov	r1, r7
   d52e8:	f001 fd56 	bl	d6d98 <__aeabi_dcmplt>
   d52ec:	2800      	cmp	r0, #0
   d52ee:	d1f4      	bne.n	d52da <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d52f0:	2200      	movs	r2, #0
   d52f2:	2300      	movs	r3, #0
   d52f4:	4630      	mov	r0, r6
   d52f6:	4639      	mov	r1, r7
   d52f8:	f001 fd4e 	bl	d6d98 <__aeabi_dcmplt>
   d52fc:	b140      	cbz	r0, d5310 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d52fe:	212d      	movs	r1, #45	; 0x2d
   d5300:	4650      	mov	r0, sl
   d5302:	f7ff ff89 	bl	d5218 <_ZN5Print5printEc>
     number = -number;
   d5306:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d530a:	4604      	mov	r4, r0
     number = -number;
   d530c:	461f      	mov	r7, r3
   d530e:	e000      	b.n	d5312 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5310:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d5312:	4935      	ldr	r1, [pc, #212]	; (d53e8 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5314:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d5318:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d531a:	fa5f f388 	uxtb.w	r3, r8
   d531e:	429d      	cmp	r5, r3
   d5320:	d906      	bls.n	d5330 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d5322:	2200      	movs	r2, #0
   d5324:	4b31      	ldr	r3, [pc, #196]	; (d53ec <_ZN5Print10printFloatEdh+0x174>)
   d5326:	f001 fbef 	bl	d6b08 <__aeabi_ddiv>
   d532a:	f108 0801 	add.w	r8, r8, #1
   d532e:	e7f4      	b.n	d531a <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d5330:	4632      	mov	r2, r6
   d5332:	463b      	mov	r3, r7
   d5334:	f001 f90c 	bl	d6550 <__adddf3>
   d5338:	460f      	mov	r7, r1
   d533a:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d533c:	f001 fd92 	bl	d6e64 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5340:	220a      	movs	r2, #10
   d5342:	4601      	mov	r1, r0
   d5344:	4680      	mov	r8, r0
   d5346:	4650      	mov	r0, sl
   d5348:	f7ff ff75 	bl	d5236 <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d534c:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d534e:	b3e5      	cbz	r5, d53ca <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d5350:	4640      	mov	r0, r8
   d5352:	f001 fa39 	bl	d67c8 <__aeabi_ui2d>
   d5356:	4602      	mov	r2, r0
   d5358:	460b      	mov	r3, r1
   d535a:	4630      	mov	r0, r6
   d535c:	4639      	mov	r1, r7
   d535e:	f001 f8f5 	bl	d654c <__aeabi_dsub>
   d5362:	4606      	mov	r6, r0
   d5364:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5366:	4650      	mov	r0, sl
   d5368:	4921      	ldr	r1, [pc, #132]	; (d53f0 <_ZN5Print10printFloatEdh+0x178>)
   d536a:	f7ff ff41 	bl	d51f0 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d536e:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d5370:	2200      	movs	r2, #0
   d5372:	4b1e      	ldr	r3, [pc, #120]	; (d53ec <_ZN5Print10printFloatEdh+0x174>)
   d5374:	4630      	mov	r0, r6
   d5376:	4639      	mov	r1, r7
   d5378:	f001 fa9c 	bl	d68b4 <__aeabi_dmul>
   d537c:	4606      	mov	r6, r0
   d537e:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d5380:	f001 fd48 	bl	d6e14 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d5384:	f1b0 0900 	subs.w	r9, r0, #0
   d5388:	da07      	bge.n	d539a <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d538a:	212d      	movs	r1, #45	; 0x2d
   d538c:	4650      	mov	r0, sl
   d538e:	f7ff ff43 	bl	d5218 <_ZN5Print5printEc>
            val = -n;
   d5392:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d5396:	4680      	mov	r8, r0
   d5398:	e002      	b.n	d53a0 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d539a:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d539c:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d53a0:	220a      	movs	r2, #10
   d53a2:	4650      	mov	r0, sl
   d53a4:	f7ff ff47 	bl	d5236 <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d53a8:	4440      	add	r0, r8
   d53aa:	4404      	add	r4, r0
    remainder -= toPrint;
   d53ac:	4648      	mov	r0, r9
   d53ae:	f001 fa1b 	bl	d67e8 <__aeabi_i2d>
   d53b2:	4602      	mov	r2, r0
   d53b4:	460b      	mov	r3, r1
   d53b6:	4630      	mov	r0, r6
   d53b8:	4639      	mov	r1, r7
   d53ba:	f001 f8c7 	bl	d654c <__aeabi_dsub>
   d53be:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d53c0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d53c4:	4606      	mov	r6, r0
   d53c6:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d53c8:	d1d2      	bne.n	d5370 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d53ca:	4620      	mov	r0, r4
   d53cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d53d0:	000d7208 	.word	0x000d7208
   d53d4:	7fefffff 	.word	0x7fefffff
   d53d8:	000d7212 	.word	0x000d7212
   d53dc:	41efffff 	.word	0x41efffff
   d53e0:	000d720c 	.word	0x000d720c
   d53e4:	c1efffff 	.word	0xc1efffff
   d53e8:	3fe00000 	.word	0x3fe00000
   d53ec:	40240000 	.word	0x40240000
   d53f0:	000d7210 	.word	0x000d7210

000d53f4 <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d53f4:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d53f6:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d53f8:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d53fa:	f7ff ff3d 	bl	d5278 <_ZN5Print10printFloatEdh>
   d53fe:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d5400:	4628      	mov	r0, r5
   d5402:	f7ff ff0c 	bl	d521e <_ZN5Print7printlnEv>
  return n;
}
   d5406:	4420      	add	r0, r4
   d5408:	bd38      	pop	{r3, r4, r5, pc}

000d540a <_ZN5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d540a:	b538      	push	{r3, r4, r5, lr}
   d540c:	4604      	mov	r4, r0
    return println((double)num, digits);
   d540e:	ee10 0a10 	vmov	r0, s0
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d5412:	460d      	mov	r5, r1
    return println((double)num, digits);
   d5414:	f001 f9fa 	bl	d680c <__aeabi_f2d>
   d5418:	ec41 0b10 	vmov	d0, r0, r1
   d541c:	4629      	mov	r1, r5
   d541e:	4620      	mov	r0, r4
}
   d5420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return n;
}

size_t Print::println(float num, int digits)
{
    return println((double)num, digits);
   d5424:	f7ff bfe6 	b.w	d53f4 <_ZN5Print7printlnEdi>

000d5428 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5428:	4b01      	ldr	r3, [pc, #4]	; (d5430 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d542a:	4a02      	ldr	r2, [pc, #8]	; (d5434 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d542c:	601a      	str	r2, [r3, #0]
   d542e:	4770      	bx	lr
   d5430:	2003e3a0 	.word	0x2003e3a0
   d5434:	000d7289 	.word	0x000d7289

000d5438 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d5438:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d543a:	2000      	movs	r0, #0
   d543c:	f7ff fd4e 	bl	d4edc <spark_sync_time_pending>
   d5440:	b128      	cbz	r0, d544e <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5442:	f7ff fd3b 	bl	d4ebc <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5446:	f080 0001 	eor.w	r0, r0, #1
   d544a:	b2c0      	uxtb	r0, r0
   d544c:	bd08      	pop	{r3, pc}
   d544e:	2001      	movs	r0, #1
    }
   d5450:	bd08      	pop	{r3, pc}

000d5452 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d5452:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d5454:	2000      	movs	r0, #0
   d5456:	f7ff fb55 	bl	d4b04 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d545a:	4604      	mov	r4, r0
   d545c:	b968      	cbnz	r0, d547a <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d545e:	f7ff fca1 	bl	d4da4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d5462:	2801      	cmp	r0, #1
   d5464:	d10b      	bne.n	d547e <_ZN9TimeClass7isValidEv+0x2c>
   d5466:	4620      	mov	r0, r4
   d5468:	f7ff fcb4 	bl	d4dd4 <system_thread_get_state>
   d546c:	b938      	cbnz	r0, d547e <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d546e:	f7ff ffe3 	bl	d5438 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d5472:	b930      	cbnz	r0, d5482 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d5474:	f7ff fd1a 	bl	d4eac <spark_process>
   d5478:	e7f9      	b.n	d546e <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d547a:	2001      	movs	r0, #1
   d547c:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d547e:	2000      	movs	r0, #0
   d5480:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d5482:	f7ff ffd9 	bl	d5438 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d5486:	2000      	movs	r0, #0
   d5488:	f7ff fb3c 	bl	d4b04 <HAL_RTC_Time_Is_Valid>
   d548c:	3000      	adds	r0, #0
   d548e:	bf18      	it	ne
   d5490:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d5492:	bd10      	pop	{r4, pc}

000d5494 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d5494:	b508      	push	{r3, lr}
    (void)isValid();
   d5496:	f7ff ffdc 	bl	d5452 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d549a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d549e:	f7ff bb11 	b.w	d4ac4 <HAL_RTC_Get_UnixTime>
	...

000d54a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d54a4:	4b02      	ldr	r3, [pc, #8]	; (d54b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d54a6:	681a      	ldr	r2, [r3, #0]
   d54a8:	4b02      	ldr	r3, [pc, #8]	; (d54b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d54aa:	601a      	str	r2, [r3, #0]
   d54ac:	4770      	bx	lr
   d54ae:	bf00      	nop
   d54b0:	2003e2bc 	.word	0x2003e2bc
   d54b4:	2003e3a4 	.word	0x2003e3a4

000d54b8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d54b8:	b510      	push	{r4, lr}
   d54ba:	4604      	mov	r4, r0
   d54bc:	f7ff f8de 	bl	d467c <_ZNSt14_Function_baseD1Ev>
   d54c0:	4620      	mov	r0, r4
   d54c2:	bd10      	pop	{r4, pc}

000d54c4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d54c4:	4803      	ldr	r0, [pc, #12]	; (d54d4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d54c6:	4a04      	ldr	r2, [pc, #16]	; (d54d8 <_GLOBAL__sub_I_RGB+0x14>)
   d54c8:	4904      	ldr	r1, [pc, #16]	; (d54dc <_GLOBAL__sub_I_RGB+0x18>)
   d54ca:	2300      	movs	r3, #0
   d54cc:	6083      	str	r3, [r0, #8]
   d54ce:	f000 becf 	b.w	d6270 <__aeabi_atexit>
   d54d2:	bf00      	nop
   d54d4:	2003e3a8 	.word	0x2003e3a8
   d54d8:	2003e324 	.word	0x2003e324
   d54dc:	000d54b9 	.word	0x000d54b9

000d54e0 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d54e0:	7d00      	ldrb	r0, [r0, #20]
   d54e2:	4770      	bx	lr

000d54e4 <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d54e4:	7d03      	ldrb	r3, [r0, #20]
   d54e6:	b11b      	cbz	r3, d54f0 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d54e8:	6983      	ldr	r3, [r0, #24]
   d54ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d54ee:	d102      	bne.n	d54f6 <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d54f0:	ed9f 0a05 	vldr	s0, [pc, #20]	; d5508 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d54f4:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d54f6:	ee07 3a90 	vmov	s15, r3
   d54fa:	ed9f 7a04 	vldr	s14, [pc, #16]	; d550c <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d54fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5502:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d5506:	4770      	bx	lr
   d5508:	00000000 	.word	0x00000000
   d550c:	42c80000 	.word	0x42c80000

000d5510 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d5510:	7d03      	ldrb	r3, [r0, #20]
   d5512:	b11b      	cbz	r3, d551c <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d5514:	6a03      	ldr	r3, [r0, #32]
   d5516:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d551a:	d102      	bne.n	d5522 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d551c:	ed9f 0a05 	vldr	s0, [pc, #20]	; d5534 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d5520:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d5522:	ee07 3a90 	vmov	s15, r3
   d5526:	ed9f 7a04 	vldr	s14, [pc, #16]	; d5538 <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d552a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d552e:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d5532:	4770      	bx	lr
   d5534:	00000000 	.word	0x00000000
   d5538:	42c80000 	.word	0x42c80000

000d553c <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d553c:	7d03      	ldrb	r3, [r0, #20]
   d553e:	b17b      	cbz	r3, d5560 <_ZNK14CellularSignal10getQualityEv+0x24>
   d5540:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d5542:	2b00      	cmp	r3, #0
   d5544:	db0c      	blt.n	d5560 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d5546:	ee07 3a90 	vmov	s15, r3
   d554a:	eddf 6a07 	vldr	s13, [pc, #28]	; d5568 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d554e:	ed9f 0a07 	vldr	s0, [pc, #28]	; d556c <_ZNK14CellularSignal10getQualityEv+0x30>
   d5552:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d5556:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d555a:	ee27 0a80 	vmul.f32	s0, s15, s0
   d555e:	4770      	bx	lr
    }

    return -1.0f;
   d5560:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d5564:	4770      	bx	lr
   d5566:	bf00      	nop
   d5568:	477fff00 	.word	0x477fff00
   d556c:	42c80000 	.word	0x42c80000

000d5570 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d5570:	7d03      	ldrb	r3, [r0, #20]
   d5572:	b17b      	cbz	r3, d5594 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d5574:	69c3      	ldr	r3, [r0, #28]
   d5576:	2b00      	cmp	r3, #0
   d5578:	db0c      	blt.n	d5594 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d557a:	ee07 3a90 	vmov	s15, r3
   d557e:	eddf 6a07 	vldr	s13, [pc, #28]	; d559c <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d5582:	ed9f 0a07 	vldr	s0, [pc, #28]	; d55a0 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d5586:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d558a:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d558e:	ee27 0a80 	vmul.f32	s0, s15, s0
   d5592:	4770      	bx	lr
    }

    return -1.0f;
   d5594:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d5598:	4770      	bx	lr
   d559a:	bf00      	nop
   d559c:	477fff00 	.word	0x477fff00
   d55a0:	42c80000 	.word	0x42c80000

000d55a4 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d55a4:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d55a6:	460d      	mov	r5, r1
   d55a8:	f100 0410 	add.w	r4, r0, #16
   d55ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d55ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d55b0:	e895 0003 	ldmia.w	r5, {r0, r1}
   d55b4:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d55b8:	2001      	movs	r0, #1
   d55ba:	bd30      	pop	{r4, r5, pc}

000d55bc <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d55bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d55c0:	4607      	mov	r7, r0
   d55c2:	460c      	mov	r4, r1
{
    if (base == 0) {
   d55c4:	4615      	mov	r5, r2
   d55c6:	b92a      	cbnz	r2, d55d4 <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d55c8:	6803      	ldr	r3, [r0, #0]
   d55ca:	b2c9      	uxtb	r1, r1
   d55cc:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d55ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d55d2:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d55d4:	2900      	cmp	r1, #0
   d55d6:	da07      	bge.n	d55e8 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d55d8:	2a0a      	cmp	r2, #10
   d55da:	d105      	bne.n	d55e8 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d55dc:	212d      	movs	r1, #45	; 0x2d
   d55de:	f7ff fe1b 	bl	d5218 <_ZN5Print5printEc>
            val = -n;
   d55e2:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d55e4:	4606      	mov	r6, r0
            val = -n;
   d55e6:	e001      	b.n	d55ec <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d55e8:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d55ea:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d55ec:	b2ea      	uxtb	r2, r5
   d55ee:	4638      	mov	r0, r7
   d55f0:	f7ff fe21 	bl	d5236 <_ZN5Print11printNumberEmh>
    }
}
   d55f4:	4430      	add	r0, r6
   d55f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d55fa <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
   d55fa:	b570      	push	{r4, r5, r6, lr}
   d55fc:	460d      	mov	r5, r1
   d55fe:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d5600:	220a      	movs	r2, #10
   d5602:	6881      	ldr	r1, [r0, #8]
   d5604:	4628      	mov	r0, r5
   d5606:	f7ff ffd9 	bl	d55bc <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
   d560a:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d560c:	4604      	mov	r4, r0
    n += p.print(',');
   d560e:	4628      	mov	r0, r5
   d5610:	f7ff fe02 	bl	d5218 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d5614:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d5616:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d5618:	68f1      	ldr	r1, [r6, #12]
   d561a:	4628      	mov	r0, r5
   d561c:	f7ff ffce 	bl	d55bc <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
   d5620:	4420      	add	r0, r4
   d5622:	bd70      	pop	{r4, r5, r6, pc}

000d5624 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d5624:	f1a0 0004 	sub.w	r0, r0, #4
   d5628:	f7ff bfe7 	b.w	d55fa <_ZNK14CellularSignal7printToER5Print>

000d562c <_ZN6detail9_getVCellEhh>:
namespace detail {
	// Converts VCELL_REGISTER reading to Battery Voltage
	float _getVCell(byte MSB, byte LSB) {
		// VCELL = 12-bit value, 1.25mV (1V/800) per bit
		float value = (float)((MSB << 4) | (LSB >> 4));
		return value / 800.0;
   d562c:	0909      	lsrs	r1, r1, #4
   d562e:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
   d5632:	ee07 0a90 	vmov	s15, r0
   d5636:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
	}
   d563a:	eddf 7a02 	vldr	s15, [pc, #8]	; d5644 <_ZN6detail9_getVCellEhh+0x18>
   d563e:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d5642:	4770      	bx	lr
   d5644:	44480000 	.word	0x44480000

000d5648 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d5648:	6800      	ldr	r0, [r0, #0]
   d564a:	f000 bb8a 	b.w	d5d62 <_ZN7TwoWire4lockEv>

000d564e <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d564e:	b510      	push	{r4, lr}
   d5650:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d5652:	6001      	str	r1, [r0, #0]
   d5654:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d5656:	b10a      	cbz	r2, d565c <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d5658:	f7ff fff6 	bl	d5648 <_ZN9FuelGauge4lockEv>
    }
}
   d565c:	4620      	mov	r0, r4
   d565e:	bd10      	pop	{r4, pc}

000d5660 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d5660:	b538      	push	{r3, r4, r5, lr}
   d5662:	4604      	mov	r4, r0
   d5664:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d5666:	f000 fddd 	bl	d6224 <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d566a:	462a      	mov	r2, r5
   d566c:	4601      	mov	r1, r0
   d566e:	4620      	mov	r0, r4
   d5670:	f7ff ffed 	bl	d564e <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d5674:	4620      	mov	r0, r4
   d5676:	bd38      	pop	{r3, r4, r5, pc}

000d5678 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d5678:	6800      	ldr	r0, [r0, #0]
   d567a:	f000 bb7b 	b.w	d5d74 <_ZN7TwoWire6unlockEv>

000d567e <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d567e:	b510      	push	{r4, lr}
{
    if (lock_) {
   d5680:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d5682:	4604      	mov	r4, r0
{
    if (lock_) {
   d5684:	b10b      	cbz	r3, d568a <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d5686:	f7ff fff7 	bl	d5678 <_ZN9FuelGauge6unlockEv>
    }
}
   d568a:	4620      	mov	r0, r4
   d568c:	bd10      	pop	{r4, pc}

000d568e <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d568e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5690:	4604      	mov	r4, r0
   d5692:	4616      	mov	r6, r2
   d5694:	461d      	mov	r5, r3
   d5696:	460f      	mov	r7, r1
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d5698:	f7ff ffd6 	bl	d5648 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   d569c:	6820      	ldr	r0, [r4, #0]
   d569e:	2136      	movs	r1, #54	; 0x36
   d56a0:	f000 fb54 	bl	d5d4c <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
   d56a4:	6820      	ldr	r0, [r4, #0]
   d56a6:	6803      	ldr	r3, [r0, #0]
   d56a8:	4639      	mov	r1, r7
   d56aa:	689b      	ldr	r3, [r3, #8]
   d56ac:	4798      	blx	r3
    i2c_.endTransmission(true);
   d56ae:	2101      	movs	r1, #1
   d56b0:	6820      	ldr	r0, [r4, #0]
   d56b2:	f000 fb4e 	bl	d5d52 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
   d56b6:	2202      	movs	r2, #2
   d56b8:	2136      	movs	r1, #54	; 0x36
   d56ba:	2301      	movs	r3, #1
   d56bc:	6820      	ldr	r0, [r4, #0]
   d56be:	f000 fb2f 	bl	d5d20 <_ZN7TwoWire11requestFromEhjh>
    MSB = i2c_.read();
   d56c2:	6820      	ldr	r0, [r4, #0]
   d56c4:	6803      	ldr	r3, [r0, #0]
   d56c6:	695b      	ldr	r3, [r3, #20]
   d56c8:	4798      	blx	r3
   d56ca:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
   d56cc:	6820      	ldr	r0, [r4, #0]
   d56ce:	6803      	ldr	r3, [r0, #0]
   d56d0:	695b      	ldr	r3, [r3, #20]
   d56d2:	4798      	blx	r3
   d56d4:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d56d6:	4620      	mov	r0, r4
}
   d56d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d56dc:	f7ff bfcc 	b.w	d5678 <_ZN9FuelGauge6unlockEv>

000d56e0 <_ZN9FuelGauge8getVCellEv>:
		return MSB + decimal;
	}
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {
   d56e0:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d56e2:	ab02      	add	r3, sp, #8
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {

	byte MSB = 0;
   d56e4:	2200      	movs	r2, #0
   d56e6:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;
   d56ea:	f803 2d01 	strb.w	r2, [r3, #-1]!

	readRegister(VCELL_REGISTER, MSB, LSB);
   d56ee:	2102      	movs	r1, #2
   d56f0:	f10d 0206 	add.w	r2, sp, #6
   d56f4:	f7ff ffcb 	bl	d568e <_ZN9FuelGauge12readRegisterEhRhS0_>
	return detail::_getVCell(MSB, LSB);
   d56f8:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d56fc:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   d5700:	b003      	add	sp, #12
   d5702:	f85d eb04 	ldr.w	lr, [sp], #4

	byte MSB = 0;
	byte LSB = 0;

	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
   d5706:	f7ff bf91 	b.w	d562c <_ZN6detail9_getVCellEhh>
	...

000d570c <_ZN9FuelGauge6getSoCEv>:
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
   d570c:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d570e:	ab02      	add	r3, sp, #8
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d5710:	2200      	movs	r2, #0
	byte LSB = 0;
   d5712:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d5716:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
   d571a:	2104      	movs	r1, #4
   d571c:	f10d 0206 	add.w	r2, sp, #6
   d5720:	f7ff ffb5 	bl	d568e <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d5724:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d5728:	f001 f85e 	bl	d67e8 <__aeabi_i2d>
   d572c:	2200      	movs	r2, #0
   d572e:	4b09      	ldr	r3, [pc, #36]	; (d5754 <_ZN9FuelGauge6getSoCEv+0x48>)
   d5730:	f001 f8c0 	bl	d68b4 <__aeabi_dmul>
   d5734:	f001 fbb6 	bl	d6ea4 <__aeabi_d2f>
   d5738:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d573c:	ee00 3a10 	vmov	s0, r3
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d5740:	ee07 0a90 	vmov	s15, r0
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d5744:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d5748:	ee37 0a80 	vadd.f32	s0, s15, s0
   d574c:	b003      	add	sp, #12
   d574e:	f85d fb04 	ldr.w	pc, [sp], #4
   d5752:	bf00      	nop
   d5754:	3f700000 	.word	0x3f700000

000d5758 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5758:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d575a:	4b0c      	ldr	r3, [pc, #48]	; (d578c <serialEventRun+0x34>)
   d575c:	b133      	cbz	r3, d576c <serialEventRun+0x14>
   d575e:	f000 f957 	bl	d5a10 <_Z16_fetch_usbserialv>
   d5762:	6803      	ldr	r3, [r0, #0]
   d5764:	691b      	ldr	r3, [r3, #16]
   d5766:	4798      	blx	r3
   d5768:	2800      	cmp	r0, #0
   d576a:	dc09      	bgt.n	d5780 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d576c:	4b08      	ldr	r3, [pc, #32]	; (d5790 <serialEventRun+0x38>)
   d576e:	b163      	cbz	r3, d578a <serialEventRun+0x32>
   d5770:	f000 fa56 	bl	d5c20 <_Z22__fetch_global_Serial1v>
   d5774:	6803      	ldr	r3, [r0, #0]
   d5776:	691b      	ldr	r3, [r3, #16]
   d5778:	4798      	blx	r3
   d577a:	2800      	cmp	r0, #0
   d577c:	dc03      	bgt.n	d5786 <serialEventRun+0x2e>
   d577e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5780:	f3af 8000 	nop.w
   d5784:	e7f2      	b.n	d576c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5786:	f3af 8000 	nop.w
   d578a:	bd08      	pop	{r3, pc}
	...

000d5794 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5794:	b508      	push	{r3, lr}
	serialEventRun();
   d5796:	f7ff ffdf 	bl	d5758 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d579a:	f7ff f98b 	bl	d4ab4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d579e:	4b01      	ldr	r3, [pc, #4]	; (d57a4 <_post_loop+0x10>)
   d57a0:	6018      	str	r0, [r3, #0]
   d57a2:	bd08      	pop	{r3, pc}
   d57a4:	2003e710 	.word	0x2003e710

000d57a8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d57a8:	4802      	ldr	r0, [pc, #8]	; (d57b4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d57aa:	4a03      	ldr	r2, [pc, #12]	; (d57b8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d57ac:	4903      	ldr	r1, [pc, #12]	; (d57bc <_Z33system_initialize_user_backup_ramv+0x14>)
   d57ae:	1a12      	subs	r2, r2, r0
   d57b0:	f001 bbd6 	b.w	d6f60 <memcpy>
   d57b4:	2003f400 	.word	0x2003f400
   d57b8:	2003f404 	.word	0x2003f404
   d57bc:	000d7540 	.word	0x000d7540

000d57c0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d57c0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d57c2:	2300      	movs	r3, #0
   d57c4:	9300      	str	r3, [sp, #0]
   d57c6:	461a      	mov	r2, r3
   d57c8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d57cc:	f7ff fb14 	bl	d4df8 <system_ctrl_set_result>
}
   d57d0:	b003      	add	sp, #12
   d57d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d57d8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d57d8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d57da:	8843      	ldrh	r3, [r0, #2]
   d57dc:	2b0a      	cmp	r3, #10
   d57de:	d008      	beq.n	d57f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d57e0:	2b50      	cmp	r3, #80	; 0x50
   d57e2:	d109      	bne.n	d57f8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d57e4:	4b09      	ldr	r3, [pc, #36]	; (d580c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d57e6:	681b      	ldr	r3, [r3, #0]
   d57e8:	b13b      	cbz	r3, d57fa <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d57ea:	b003      	add	sp, #12
   d57ec:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d57f0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d57f2:	f7ff ffe5 	bl	d57c0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d57f6:	e006      	b.n	d5806 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d57f8:	2300      	movs	r3, #0
   d57fa:	9300      	str	r3, [sp, #0]
   d57fc:	461a      	mov	r2, r3
   d57fe:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5802:	f7ff faf9 	bl	d4df8 <system_ctrl_set_result>
        break;
    }
}
   d5806:	b003      	add	sp, #12
   d5808:	f85d fb04 	ldr.w	pc, [sp], #4
   d580c:	2003e3b8 	.word	0x2003e3b8

000d5810 <module_user_init_hook>:

void module_user_init_hook()
{
   d5810:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5812:	4c10      	ldr	r4, [pc, #64]	; (d5854 <module_user_init_hook+0x44>)
   d5814:	4d10      	ldr	r5, [pc, #64]	; (d5858 <module_user_init_hook+0x48>)
   d5816:	6823      	ldr	r3, [r4, #0]
   d5818:	42ab      	cmp	r3, r5
   d581a:	4b10      	ldr	r3, [pc, #64]	; (d585c <module_user_init_hook+0x4c>)
   d581c:	bf0c      	ite	eq
   d581e:	2201      	moveq	r2, #1
   d5820:	2200      	movne	r2, #0
   d5822:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5824:	d002      	beq.n	d582c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d5826:	f7ff ffbf 	bl	d57a8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d582a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d582c:	f7ff f93a 	bl	d4aa4 <HAL_RNG_GetRandomNumber>
   d5830:	4604      	mov	r4, r0
    srand(seed);
   d5832:	f001 fba9 	bl	d6f88 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5836:	4b0a      	ldr	r3, [pc, #40]	; (d5860 <module_user_init_hook+0x50>)
   d5838:	b113      	cbz	r3, d5840 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d583a:	4620      	mov	r0, r4
   d583c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5840:	2100      	movs	r1, #0
   d5842:	4807      	ldr	r0, [pc, #28]	; (d5860 <module_user_init_hook+0x50>)
   d5844:	f7ff fb52 	bl	d4eec <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5848:	2100      	movs	r1, #0
   d584a:	4806      	ldr	r0, [pc, #24]	; (d5864 <module_user_init_hook+0x54>)
}
   d584c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5850:	f7ff bac8 	b.w	d4de4 <system_ctrl_set_app_request_handler>
   d5854:	2003f400 	.word	0x2003f400
   d5858:	9a271c1e 	.word	0x9a271c1e
   d585c:	2003e3bc 	.word	0x2003e3bc
   d5860:	00000000 	.word	0x00000000
   d5864:	000d57d9 	.word	0x000d57d9

000d5868 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5868:	4770      	bx	lr

000d586a <_ZN9IPAddressD0Ev>:
   d586a:	b510      	push	{r4, lr}
   d586c:	2118      	movs	r1, #24
   d586e:	4604      	mov	r4, r0
   d5870:	f000 fd0c 	bl	d628c <_ZdlPvj>
   d5874:	4620      	mov	r0, r4
   d5876:	bd10      	pop	{r4, pc}

000d5878 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5878:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d587a:	7d03      	ldrb	r3, [r0, #20]
   d587c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d587e:	b08d      	sub	sp, #52	; 0x34
   d5880:	460e      	mov	r6, r1
   d5882:	f100 0704 	add.w	r7, r0, #4
   d5886:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d588a:	d002      	beq.n	d5892 <_ZNK9IPAddress7printToER5Print+0x1a>
   d588c:	f100 0508 	add.w	r5, r0, #8
   d5890:	e018      	b.n	d58c4 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5892:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5894:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5896:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d589a:	232f      	movs	r3, #47	; 0x2f
   d589c:	462a      	mov	r2, r5
   d589e:	200a      	movs	r0, #10
   d58a0:	f7ff f998 	bl	d4bd4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d58a4:	4628      	mov	r0, r5
   d58a6:	f001 fbd1 	bl	d704c <strlen>
   d58aa:	6833      	ldr	r3, [r6, #0]
   d58ac:	4602      	mov	r2, r0
   d58ae:	68db      	ldr	r3, [r3, #12]
   d58b0:	4629      	mov	r1, r5
   d58b2:	4630      	mov	r0, r6
   d58b4:	4798      	blx	r3
   d58b6:	e00f      	b.n	d58d8 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d58b8:	b124      	cbz	r4, d58c4 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d58ba:	212e      	movs	r1, #46	; 0x2e
   d58bc:	4630      	mov	r0, r6
   d58be:	f7ff fcab 	bl	d5218 <_ZN5Print5printEc>
   d58c2:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d58c4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d58c8:	220a      	movs	r2, #10
   d58ca:	4630      	mov	r0, r6
   d58cc:	f7ff fcb3 	bl	d5236 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d58d0:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d58d2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d58d4:	d1f0      	bne.n	d58b8 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d58d6:	4620      	mov	r0, r4
    }
    return n;
}
   d58d8:	b00d      	add	sp, #52	; 0x34
   d58da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d58dc <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d58dc:	b510      	push	{r4, lr}
   d58de:	4b05      	ldr	r3, [pc, #20]	; (d58f4 <_ZN9IPAddressC1Ev+0x18>)
   d58e0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d58e2:	2211      	movs	r2, #17
   d58e4:	f840 3b04 	str.w	r3, [r0], #4
   d58e8:	2100      	movs	r1, #0
   d58ea:	f001 fb44 	bl	d6f76 <memset>
{
    clear();
}
   d58ee:	4620      	mov	r0, r4
   d58f0:	bd10      	pop	{r4, pc}
   d58f2:	bf00      	nop
   d58f4:	000d735c 	.word	0x000d735c

000d58f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d58f8:	4603      	mov	r3, r0
   d58fa:	4a07      	ldr	r2, [pc, #28]	; (d5918 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d58fc:	b510      	push	{r4, lr}
   d58fe:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5902:	f101 0210 	add.w	r2, r1, #16
   d5906:	f851 4b04 	ldr.w	r4, [r1], #4
   d590a:	f843 4b04 	str.w	r4, [r3], #4
   d590e:	4291      	cmp	r1, r2
   d5910:	d1f9      	bne.n	d5906 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5912:	780a      	ldrb	r2, [r1, #0]
   d5914:	701a      	strb	r2, [r3, #0]
}
   d5916:	bd10      	pop	{r4, pc}
   d5918:	000d735c 	.word	0x000d735c

000d591c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d591c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d591e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5922:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5926:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d592a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d592e:	2304      	movs	r3, #4
   d5930:	6041      	str	r1, [r0, #4]
   d5932:	7503      	strb	r3, [r0, #20]
   d5934:	bd10      	pop	{r4, pc}

000d5936 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5936:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5938:	780d      	ldrb	r5, [r1, #0]
   d593a:	788b      	ldrb	r3, [r1, #2]
   d593c:	784a      	ldrb	r2, [r1, #1]
   d593e:	78c9      	ldrb	r1, [r1, #3]
   d5940:	9100      	str	r1, [sp, #0]
   d5942:	4629      	mov	r1, r5
   d5944:	f7ff ffea 	bl	d591c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5948:	b003      	add	sp, #12
   d594a:	bd30      	pop	{r4, r5, pc}

000d594c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d594c:	7441      	strb	r1, [r0, #17]
   d594e:	4770      	bx	lr

000d5950 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5950:	4770      	bx	lr

000d5952 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5952:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5954:	2100      	movs	r1, #0
   d5956:	7c00      	ldrb	r0, [r0, #16]
   d5958:	f7ff fa0c 	bl	d4d74 <HAL_USB_USART_Receive_Data>
}
   d595c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5960:	bf28      	it	cs
   d5962:	f04f 30ff 	movcs.w	r0, #4294967295
   d5966:	bd08      	pop	{r3, pc}

000d5968 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5968:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d596a:	2101      	movs	r1, #1
   d596c:	7c00      	ldrb	r0, [r0, #16]
   d596e:	f7ff fa01 	bl	d4d74 <HAL_USB_USART_Receive_Data>
}
   d5972:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5976:	bf28      	it	cs
   d5978:	f04f 30ff 	movcs.w	r0, #4294967295
   d597c:	bd08      	pop	{r3, pc}

000d597e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d597e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5980:	7c00      	ldrb	r0, [r0, #16]
   d5982:	f7ff f9ef 	bl	d4d64 <HAL_USB_USART_Available_Data_For_Write>
}
   d5986:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d598a:	bd08      	pop	{r3, pc}

000d598c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d598c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d598e:	7c00      	ldrb	r0, [r0, #16]
   d5990:	f7ff f9e0 	bl	d4d54 <HAL_USB_USART_Available_Data>
}
   d5994:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5998:	bd08      	pop	{r3, pc}

000d599a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d599a:	7c00      	ldrb	r0, [r0, #16]
   d599c:	f7ff b9fa 	b.w	d4d94 <HAL_USB_USART_Flush_Data>

000d59a0 <_ZN9USBSerialD0Ev>:
   d59a0:	b510      	push	{r4, lr}
   d59a2:	2114      	movs	r1, #20
   d59a4:	4604      	mov	r4, r0
   d59a6:	f000 fc71 	bl	d628c <_ZdlPvj>
   d59aa:	4620      	mov	r0, r4
   d59ac:	bd10      	pop	{r4, pc}

000d59ae <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d59ae:	b538      	push	{r3, r4, r5, lr}
   d59b0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d59b2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d59b4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d59b6:	f7ff f9d5 	bl	d4d64 <HAL_USB_USART_Available_Data_For_Write>
   d59ba:	2800      	cmp	r0, #0
   d59bc:	dc01      	bgt.n	d59c2 <_ZN9USBSerial5writeEh+0x14>
   d59be:	7c60      	ldrb	r0, [r4, #17]
   d59c0:	b128      	cbz	r0, d59ce <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d59c2:	4629      	mov	r1, r5
   d59c4:	7c20      	ldrb	r0, [r4, #16]
   d59c6:	f7ff f9dd 	bl	d4d84 <HAL_USB_USART_Send_Data>
   d59ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d59ce:	bd38      	pop	{r3, r4, r5, pc}

000d59d0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d59d0:	b510      	push	{r4, lr}
   d59d2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d59d4:	2300      	movs	r3, #0
   d59d6:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d59d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d59dc:	60a3      	str	r3, [r4, #8]
   d59de:	4b05      	ldr	r3, [pc, #20]	; (d59f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d59e0:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d59e2:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d59e4:	4608      	mov	r0, r1
{
  _serial = serial;
   d59e6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d59e8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d59ea:	4611      	mov	r1, r2
   d59ec:	f7ff f9a2 	bl	d4d34 <HAL_USB_USART_Init>
}
   d59f0:	4620      	mov	r0, r4
   d59f2:	bd10      	pop	{r4, pc}
   d59f4:	000d7370 	.word	0x000d7370

000d59f8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d59f8:	2200      	movs	r2, #0
   d59fa:	7c00      	ldrb	r0, [r0, #16]
   d59fc:	f7ff b9a2 	b.w	d4d44 <HAL_USB_USART_Begin>

000d5a00 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5a00:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5a02:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5a04:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5a06:	2100      	movs	r1, #0
   d5a08:	f001 fab5 	bl	d6f76 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5a0c:	4620      	mov	r0, r4
   d5a0e:	bd10      	pop	{r4, pc}

000d5a10 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5a10:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5a12:	4d0e      	ldr	r5, [pc, #56]	; (d5a4c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5a14:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5a16:	a801      	add	r0, sp, #4
   d5a18:	f7ff fff2 	bl	d5a00 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5a1c:	6829      	ldr	r1, [r5, #0]
   d5a1e:	f011 0401 	ands.w	r4, r1, #1
   d5a22:	d110      	bne.n	d5a46 <_Z16_fetch_usbserialv+0x36>
   d5a24:	4628      	mov	r0, r5
   d5a26:	f7fe fb3a 	bl	d409e <__cxa_guard_acquire>
   d5a2a:	b160      	cbz	r0, d5a46 <_Z16_fetch_usbserialv+0x36>
   d5a2c:	aa01      	add	r2, sp, #4
   d5a2e:	4621      	mov	r1, r4
   d5a30:	4807      	ldr	r0, [pc, #28]	; (d5a50 <_Z16_fetch_usbserialv+0x40>)
   d5a32:	f7ff ffcd 	bl	d59d0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5a36:	4628      	mov	r0, r5
   d5a38:	f7fe fb36 	bl	d40a8 <__cxa_guard_release>
   d5a3c:	4a05      	ldr	r2, [pc, #20]	; (d5a54 <_Z16_fetch_usbserialv+0x44>)
   d5a3e:	4906      	ldr	r1, [pc, #24]	; (d5a58 <_Z16_fetch_usbserialv+0x48>)
   d5a40:	4803      	ldr	r0, [pc, #12]	; (d5a50 <_Z16_fetch_usbserialv+0x40>)
   d5a42:	f000 fc15 	bl	d6270 <__aeabi_atexit>
	return _usbserial;
}
   d5a46:	4802      	ldr	r0, [pc, #8]	; (d5a50 <_Z16_fetch_usbserialv+0x40>)
   d5a48:	b007      	add	sp, #28
   d5a4a:	bd30      	pop	{r4, r5, pc}
   d5a4c:	2003e3c0 	.word	0x2003e3c0
   d5a50:	2003e3c4 	.word	0x2003e3c4
   d5a54:	2003e324 	.word	0x2003e324
   d5a58:	000d5951 	.word	0x000d5951

000d5a5c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5a5c:	2200      	movs	r2, #0
   d5a5e:	4611      	mov	r1, r2
   d5a60:	6840      	ldr	r0, [r0, #4]
   d5a62:	f7ff b9eb 	b.w	d4e3c <network_ready>

000d5a66 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5a66:	2200      	movs	r2, #0
   d5a68:	4611      	mov	r1, r2
   d5a6a:	6840      	ldr	r0, [r0, #4]
   d5a6c:	f7ff ba06 	b.w	d4e7c <network_listening>

000d5a70 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5a70:	2200      	movs	r2, #0
   d5a72:	4611      	mov	r1, r2
   d5a74:	6840      	ldr	r0, [r0, #4]
   d5a76:	f7ff ba11 	b.w	d4e9c <network_get_listen_timeout>

000d5a7a <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5a7a:	2200      	movs	r2, #0
   d5a7c:	6840      	ldr	r0, [r0, #4]
   d5a7e:	f7ff ba05 	b.w	d4e8c <network_set_listen_timeout>

000d5a82 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5a82:	2200      	movs	r2, #0
   d5a84:	f081 0101 	eor.w	r1, r1, #1
   d5a88:	6840      	ldr	r0, [r0, #4]
   d5a8a:	f7ff b9ef 	b.w	d4e6c <network_listen>

000d5a8e <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d5a8e:	2300      	movs	r3, #0
   d5a90:	461a      	mov	r2, r3
   d5a92:	4619      	mov	r1, r3
   d5a94:	6840      	ldr	r0, [r0, #4]
   d5a96:	f7ff b9e1 	b.w	d4e5c <network_off>

000d5a9a <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d5a9a:	2300      	movs	r3, #0
   d5a9c:	461a      	mov	r2, r3
   d5a9e:	4619      	mov	r1, r3
   d5aa0:	6840      	ldr	r0, [r0, #4]
   d5aa2:	f7ff b9d3 	b.w	d4e4c <network_on>

000d5aa6 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5aa6:	2200      	movs	r2, #0
   d5aa8:	4611      	mov	r1, r2
   d5aaa:	6840      	ldr	r0, [r0, #4]
   d5aac:	f7ff b9b6 	b.w	d4e1c <network_connecting>

000d5ab0 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5ab0:	2200      	movs	r2, #0
   d5ab2:	2102      	movs	r1, #2
   d5ab4:	6840      	ldr	r0, [r0, #4]
   d5ab6:	f7ff b9b9 	b.w	d4e2c <network_disconnect>

000d5aba <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5aba:	2300      	movs	r3, #0
   d5abc:	461a      	mov	r2, r3
   d5abe:	6840      	ldr	r0, [r0, #4]
   d5ac0:	f7ff b9a4 	b.w	d4e0c <network_connect>

000d5ac4 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d5ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d5ac6:	4b1b      	ldr	r3, [pc, #108]	; (d5b34 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d5ac8:	6003      	str	r3, [r0, #0]
   d5aca:	2500      	movs	r5, #0
   d5acc:	460f      	mov	r7, r1
   d5ace:	3328      	adds	r3, #40	; 0x28
   d5ad0:	2618      	movs	r6, #24
   d5ad2:	b089      	sub	sp, #36	; 0x24
   d5ad4:	6043      	str	r3, [r0, #4]
   d5ad6:	6085      	str	r5, [r0, #8]
   d5ad8:	60c5      	str	r5, [r0, #12]
   d5ada:	4632      	mov	r2, r6
   d5adc:	4629      	mov	r1, r5
   d5ade:	4604      	mov	r4, r0
   d5ae0:	3010      	adds	r0, #16
   d5ae2:	f001 fa48 	bl	d6f76 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d5ae6:	462a      	mov	r2, r5
   d5ae8:	4629      	mov	r1, r5
   d5aea:	6878      	ldr	r0, [r7, #4]
   d5aec:	f7ff f9a6 	bl	d4e3c <network_ready>
   d5af0:	b908      	cbnz	r0, d5af6 <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d5af2:	60a0      	str	r0, [r4, #8]
            return sig;
   d5af4:	e01b      	b.n	d5b2e <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d5af6:	4629      	mov	r1, r5
   d5af8:	4632      	mov	r2, r6
   d5afa:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d5afc:	9500      	str	r5, [sp, #0]
   d5afe:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d5b00:	f001 fa39 	bl	d6f76 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d5b04:	a902      	add	r1, sp, #8
   d5b06:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d5b08:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d5b0c:	f7ff f90a 	bl	d4d24 <cellular_signal>
   d5b10:	b110      	cbz	r0, d5b18 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d5b12:	2301      	movs	r3, #1
   d5b14:	60a3      	str	r3, [r4, #8]
            return sig;
   d5b16:	e00a      	b.n	d5b2e <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d5b18:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d5b1a:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d5b1c:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d5b1e:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d5b20:	b90b      	cbnz	r3, d5b26 <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d5b22:	2302      	movs	r3, #2
   d5b24:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d5b26:	a902      	add	r1, sp, #8
   d5b28:	4620      	mov	r0, r4
   d5b2a:	f7ff fd3b 	bl	d55a4 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d5b2e:	4620      	mov	r0, r4
   d5b30:	b009      	add	sp, #36	; 0x24
   d5b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5b34:	000d7328 	.word	0x000d7328

000d5b38 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5b38:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5b3a:	4c08      	ldr	r4, [pc, #32]	; (d5b5c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d5b3c:	2528      	movs	r5, #40	; 0x28
   d5b3e:	462a      	mov	r2, r5
   d5b40:	2100      	movs	r1, #0
   d5b42:	4620      	mov	r0, r4
   d5b44:	f001 fa17 	bl	d6f76 <memset>
        cid = -1;
   d5b48:	f04f 33ff 	mov.w	r3, #4294967295
   d5b4c:	6063      	str	r3, [r4, #4]
   d5b4e:	4b04      	ldr	r3, [pc, #16]	; (d5b60 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d5b50:	8025      	strh	r5, [r4, #0]
   d5b52:	2204      	movs	r2, #4
   d5b54:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d5b56:	4a03      	ldr	r2, [pc, #12]	; (d5b64 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5b58:	601a      	str	r2, [r3, #0]
   d5b5a:	bd38      	pop	{r3, r4, r5, pc}
   d5b5c:	2003e3e0 	.word	0x2003e3e0
   d5b60:	2003e3d8 	.word	0x2003e3d8
   d5b64:	000d73a0 	.word	0x000d73a0

000d5b68 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5b68:	4770      	bx	lr

000d5b6a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5b6a:	7441      	strb	r1, [r0, #17]
   d5b6c:	4770      	bx	lr

000d5b6e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5b6e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5b70:	7c00      	ldrb	r0, [r0, #16]
   d5b72:	f7ff f86f 	bl	d4c54 <HAL_USART_Available_Data_For_Write>
}
   d5b76:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5b7a:	bd08      	pop	{r3, pc}

000d5b7c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5b7c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5b7e:	7c00      	ldrb	r0, [r0, #16]
   d5b80:	f7ff f840 	bl	d4c04 <HAL_USART_Available_Data>
}
   d5b84:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5b88:	bd08      	pop	{r3, pc}

000d5b8a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5b8a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5b8c:	7c00      	ldrb	r0, [r0, #16]
   d5b8e:	f7ff f849 	bl	d4c24 <HAL_USART_Peek_Data>
}
   d5b92:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5b96:	bf28      	it	cs
   d5b98:	f04f 30ff 	movcs.w	r0, #4294967295
   d5b9c:	bd08      	pop	{r3, pc}

000d5b9e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5b9e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5ba0:	7c00      	ldrb	r0, [r0, #16]
   d5ba2:	f7ff f837 	bl	d4c14 <HAL_USART_Read_Data>
}
   d5ba6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5baa:	bf28      	it	cs
   d5bac:	f04f 30ff 	movcs.w	r0, #4294967295
   d5bb0:	bd08      	pop	{r3, pc}

000d5bb2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5bb2:	7c00      	ldrb	r0, [r0, #16]
   d5bb4:	f7ff b83e 	b.w	d4c34 <HAL_USART_Flush_Data>

000d5bb8 <_ZN11USARTSerialD0Ev>:
   d5bb8:	b510      	push	{r4, lr}
   d5bba:	2114      	movs	r1, #20
   d5bbc:	4604      	mov	r4, r0
   d5bbe:	f000 fb65 	bl	d628c <_ZdlPvj>
   d5bc2:	4620      	mov	r0, r4
   d5bc4:	bd10      	pop	{r4, pc}

000d5bc6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5bc6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5bc8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5bca:	4604      	mov	r4, r0
   d5bcc:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5bce:	b925      	cbnz	r5, d5bda <_ZN11USARTSerial5writeEh+0x14>
   d5bd0:	7c00      	ldrb	r0, [r0, #16]
   d5bd2:	f7ff f83f 	bl	d4c54 <HAL_USART_Available_Data_For_Write>
   d5bd6:	2800      	cmp	r0, #0
   d5bd8:	dd05      	ble.n	d5be6 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5bda:	4631      	mov	r1, r6
   d5bdc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5bde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5be2:	f7ff b807 	b.w	d4bf4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5be6:	4628      	mov	r0, r5
   d5be8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5bec <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5bec:	b510      	push	{r4, lr}
   d5bee:	4604      	mov	r4, r0
   d5bf0:	4608      	mov	r0, r1
   d5bf2:	4611      	mov	r1, r2
   d5bf4:	2200      	movs	r2, #0
   d5bf6:	6062      	str	r2, [r4, #4]
   d5bf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5bfc:	60a2      	str	r2, [r4, #8]
   d5bfe:	4a05      	ldr	r2, [pc, #20]	; (d5c14 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5c00:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5c02:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5c04:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5c06:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5c08:	461a      	mov	r2, r3
   d5c0a:	f7fe ffeb 	bl	d4be4 <HAL_USART_Init>
}
   d5c0e:	4620      	mov	r0, r4
   d5c10:	bd10      	pop	{r4, pc}
   d5c12:	bf00      	nop
   d5c14:	000d73d4 	.word	0x000d73d4

000d5c18 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5c18:	7c00      	ldrb	r0, [r0, #16]
   d5c1a:	f7ff b813 	b.w	d4c44 <HAL_USART_Is_Enabled>
	...

000d5c20 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5c20:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5c22:	4d0c      	ldr	r5, [pc, #48]	; (d5c54 <_Z22__fetch_global_Serial1v+0x34>)
   d5c24:	6829      	ldr	r1, [r5, #0]
   d5c26:	f011 0401 	ands.w	r4, r1, #1
   d5c2a:	d111      	bne.n	d5c50 <_Z22__fetch_global_Serial1v+0x30>
   d5c2c:	4628      	mov	r0, r5
   d5c2e:	f7fe fa36 	bl	d409e <__cxa_guard_acquire>
   d5c32:	b168      	cbz	r0, d5c50 <_Z22__fetch_global_Serial1v+0x30>
   d5c34:	4a08      	ldr	r2, [pc, #32]	; (d5c58 <_Z22__fetch_global_Serial1v+0x38>)
   d5c36:	4b09      	ldr	r3, [pc, #36]	; (d5c5c <_Z22__fetch_global_Serial1v+0x3c>)
   d5c38:	4809      	ldr	r0, [pc, #36]	; (d5c60 <_Z22__fetch_global_Serial1v+0x40>)
   d5c3a:	4621      	mov	r1, r4
   d5c3c:	f7ff ffd6 	bl	d5bec <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5c40:	4628      	mov	r0, r5
   d5c42:	f7fe fa31 	bl	d40a8 <__cxa_guard_release>
   d5c46:	4a07      	ldr	r2, [pc, #28]	; (d5c64 <_Z22__fetch_global_Serial1v+0x44>)
   d5c48:	4907      	ldr	r1, [pc, #28]	; (d5c68 <_Z22__fetch_global_Serial1v+0x48>)
   d5c4a:	4805      	ldr	r0, [pc, #20]	; (d5c60 <_Z22__fetch_global_Serial1v+0x40>)
   d5c4c:	f000 fb10 	bl	d6270 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5c50:	4803      	ldr	r0, [pc, #12]	; (d5c60 <_Z22__fetch_global_Serial1v+0x40>)
   d5c52:	bd38      	pop	{r3, r4, r5, pc}
   d5c54:	2003e4a0 	.word	0x2003e4a0
   d5c58:	2003e4a4 	.word	0x2003e4a4
   d5c5c:	2003e41c 	.word	0x2003e41c
   d5c60:	2003e408 	.word	0x2003e408
   d5c64:	2003e324 	.word	0x2003e324
   d5c68:	000d5b69 	.word	0x000d5b69

000d5c6c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d5c6c:	4770      	bx	lr

000d5c6e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5c6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5c70:	4606      	mov	r6, r0
   d5c72:	4615      	mov	r5, r2
   d5c74:	460c      	mov	r4, r1
   d5c76:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5c78:	42bc      	cmp	r4, r7
   d5c7a:	d006      	beq.n	d5c8a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5c7c:	6833      	ldr	r3, [r6, #0]
   d5c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5c82:	689b      	ldr	r3, [r3, #8]
   d5c84:	4630      	mov	r0, r6
   d5c86:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5c88:	e7f6      	b.n	d5c78 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5c8a:	4628      	mov	r0, r5
   d5c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c8e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5c8e:	2200      	movs	r2, #0
   d5c90:	7c00      	ldrb	r0, [r0, #16]
   d5c92:	f7fe bff7 	b.w	d4c84 <HAL_I2C_Write_Data>

000d5c96 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5c96:	2100      	movs	r1, #0
   d5c98:	7c00      	ldrb	r0, [r0, #16]
   d5c9a:	f7fe bffb 	b.w	d4c94 <HAL_I2C_Available_Data>

000d5c9e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5c9e:	2100      	movs	r1, #0
   d5ca0:	7c00      	ldrb	r0, [r0, #16]
   d5ca2:	f7fe bfff 	b.w	d4ca4 <HAL_I2C_Read_Data>

000d5ca6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5ca6:	2100      	movs	r1, #0
   d5ca8:	7c00      	ldrb	r0, [r0, #16]
   d5caa:	f7ff b803 	b.w	d4cb4 <HAL_I2C_Peek_Data>

000d5cae <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5cae:	2100      	movs	r1, #0
   d5cb0:	7c00      	ldrb	r0, [r0, #16]
   d5cb2:	f7ff b807 	b.w	d4cc4 <HAL_I2C_Flush_Data>

000d5cb6 <_ZN7TwoWireD0Ev>:
   d5cb6:	b510      	push	{r4, lr}
   d5cb8:	2114      	movs	r1, #20
   d5cba:	4604      	mov	r4, r0
   d5cbc:	f000 fae6 	bl	d628c <_ZdlPvj>
   d5cc0:	4620      	mov	r0, r4
   d5cc2:	bd10      	pop	{r4, pc}

000d5cc4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5cc4:	b510      	push	{r4, lr}
   d5cc6:	4604      	mov	r4, r0
   d5cc8:	2300      	movs	r3, #0
   d5cca:	6063      	str	r3, [r4, #4]
   d5ccc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5cd0:	60a3      	str	r3, [r4, #8]
   d5cd2:	4b04      	ldr	r3, [pc, #16]	; (d5ce4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d5cd4:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5cd6:	4608      	mov	r0, r1
   d5cd8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d5cda:	4611      	mov	r1, r2
   d5cdc:	f7ff f802 	bl	d4ce4 <HAL_I2C_Init>
}
   d5ce0:	4620      	mov	r0, r4
   d5ce2:	bd10      	pop	{r4, pc}
   d5ce4:	000d7404 	.word	0x000d7404

000d5ce8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d5ce8:	b570      	push	{r4, r5, r6, lr}
   d5cea:	460c      	mov	r4, r1
   d5cec:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d5cee:	2514      	movs	r5, #20
   d5cf0:	4606      	mov	r6, r0
   d5cf2:	462a      	mov	r2, r5
   d5cf4:	2100      	movs	r1, #0
   d5cf6:	a801      	add	r0, sp, #4
   d5cf8:	f001 f93d 	bl	d6f76 <memset>
   d5cfc:	7823      	ldrb	r3, [r4, #0]
   d5cfe:	f88d 3008 	strb.w	r3, [sp, #8]
   d5d02:	6863      	ldr	r3, [r4, #4]
   d5d04:	9303      	str	r3, [sp, #12]
   d5d06:	68e3      	ldr	r3, [r4, #12]
   d5d08:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d5d0a:	2200      	movs	r2, #0
   d5d0c:	7a23      	ldrb	r3, [r4, #8]
   d5d0e:	7c30      	ldrb	r0, [r6, #16]
   d5d10:	f8ad 5004 	strh.w	r5, [sp, #4]
   d5d14:	a901      	add	r1, sp, #4
   d5d16:	9305      	str	r3, [sp, #20]
   d5d18:	f7fe fffc 	bl	d4d14 <HAL_I2C_Request_Data_Ex>
}
   d5d1c:	b006      	add	sp, #24
   d5d1e:	bd70      	pop	{r4, r5, r6, pc}

000d5d20 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d5d20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5d22:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d5d24:	f88d 1000 	strb.w	r1, [sp]
   d5d28:	f04f 0164 	mov.w	r1, #100	; 0x64
   d5d2c:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5d2e:	bf18      	it	ne
   d5d30:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d5d32:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d5d34:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5d36:	f88d 3008 	strb.w	r3, [sp, #8]
   d5d3a:	f7ff ffd5 	bl	d5ce8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d5d3e:	b005      	add	sp, #20
   d5d40:	f85d fb04 	ldr.w	pc, [sp], #4

000d5d44 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5d44:	2200      	movs	r2, #0
   d5d46:	7c00      	ldrb	r0, [r0, #16]
   d5d48:	f7fe bf8c 	b.w	d4c64 <HAL_I2C_Begin_Transmission>

000d5d4c <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d5d4c:	b2c9      	uxtb	r1, r1
   d5d4e:	f7ff bff9 	b.w	d5d44 <_ZN7TwoWire17beginTransmissionEh>

000d5d52 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5d52:	2200      	movs	r2, #0
   d5d54:	7c00      	ldrb	r0, [r0, #16]
   d5d56:	f7fe bf8d 	b.w	d4c74 <HAL_I2C_End_Transmission>

000d5d5a <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5d5a:	2100      	movs	r1, #0
   d5d5c:	7c00      	ldrb	r0, [r0, #16]
   d5d5e:	f7fe bfb9 	b.w	d4cd4 <HAL_I2C_Is_Enabled>

000d5d62 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d5d62:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d5d64:	2100      	movs	r1, #0
   d5d66:	7c00      	ldrb	r0, [r0, #16]
   d5d68:	f7fe ffc4 	bl	d4cf4 <HAL_I2C_Acquire>
}
   d5d6c:	fab0 f080 	clz	r0, r0
   d5d70:	0940      	lsrs	r0, r0, #5
   d5d72:	bd08      	pop	{r3, pc}

000d5d74 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d5d74:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d5d76:	2100      	movs	r1, #0
   d5d78:	7c00      	ldrb	r0, [r0, #16]
   d5d7a:	f7fe ffc3 	bl	d4d04 <HAL_I2C_Release>
}
   d5d7e:	fab0 f080 	clz	r0, r0
   d5d82:	0940      	lsrs	r0, r0, #5
   d5d84:	bd08      	pop	{r3, pc}

000d5d86 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d5d86:	b510      	push	{r4, lr}
  if (0 == max) {
   d5d88:	4604      	mov	r4, r0
   d5d8a:	b130      	cbz	r0, d5d9a <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
   d5d8c:	f001 f924 	bl	d6fd8 <rand>
   d5d90:	fb90 f3f4 	sdiv	r3, r0, r4
   d5d94:	fb03 0014 	mls	r0, r3, r4, r0
   d5d98:	bd10      	pop	{r4, pc}
}
   d5d9a:	bd10      	pop	{r4, pc}

000d5d9c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5d9c:	2200      	movs	r2, #0
   d5d9e:	4611      	mov	r1, r2
   d5da0:	6840      	ldr	r0, [r0, #4]
   d5da2:	f7ff b86b 	b.w	d4e7c <network_listening>

000d5da6 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5da6:	2200      	movs	r2, #0
   d5da8:	4611      	mov	r1, r2
   d5daa:	6840      	ldr	r0, [r0, #4]
   d5dac:	f7ff b876 	b.w	d4e9c <network_get_listen_timeout>

000d5db0 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5db0:	2200      	movs	r2, #0
   d5db2:	6840      	ldr	r0, [r0, #4]
   d5db4:	f7ff b86a 	b.w	d4e8c <network_set_listen_timeout>

000d5db8 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5db8:	2200      	movs	r2, #0
   d5dba:	f081 0101 	eor.w	r1, r1, #1
   d5dbe:	6840      	ldr	r0, [r0, #4]
   d5dc0:	f7ff b854 	b.w	d4e6c <network_listen>

000d5dc4 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5dc4:	2300      	movs	r3, #0
   d5dc6:	461a      	mov	r2, r3
   d5dc8:	2101      	movs	r1, #1
   d5dca:	6840      	ldr	r0, [r0, #4]
   d5dcc:	f7ff b846 	b.w	d4e5c <network_off>

000d5dd0 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5dd0:	2300      	movs	r3, #0
   d5dd2:	461a      	mov	r2, r3
   d5dd4:	4619      	mov	r1, r3
   d5dd6:	6840      	ldr	r0, [r0, #4]
   d5dd8:	f7ff b838 	b.w	d4e4c <network_on>

000d5ddc <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5ddc:	2200      	movs	r2, #0
   d5dde:	4611      	mov	r1, r2
   d5de0:	6840      	ldr	r0, [r0, #4]
   d5de2:	f7ff b82b 	b.w	d4e3c <network_ready>

000d5de6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5de6:	2200      	movs	r2, #0
   d5de8:	4611      	mov	r1, r2
   d5dea:	6840      	ldr	r0, [r0, #4]
   d5dec:	f7ff b816 	b.w	d4e1c <network_connecting>

000d5df0 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5df0:	2200      	movs	r2, #0
   d5df2:	2102      	movs	r1, #2
   d5df4:	6840      	ldr	r0, [r0, #4]
   d5df6:	f7ff b819 	b.w	d4e2c <network_disconnect>

000d5dfa <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5dfa:	2300      	movs	r3, #0
   d5dfc:	461a      	mov	r2, r3
   d5dfe:	6840      	ldr	r0, [r0, #4]
   d5e00:	f7ff b804 	b.w	d4e0c <network_connect>

000d5e04 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5e04:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5e06:	4605      	mov	r5, r0
   d5e08:	b188      	cbz	r0, d5e2e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5e0a:	6804      	ldr	r4, [r0, #0]
   d5e0c:	b14c      	cbz	r4, d5e22 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d5e0e:	68a3      	ldr	r3, [r4, #8]
   d5e10:	b11b      	cbz	r3, d5e1a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5e12:	2203      	movs	r2, #3
   d5e14:	4621      	mov	r1, r4
   d5e16:	4620      	mov	r0, r4
   d5e18:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5e1a:	2110      	movs	r1, #16
   d5e1c:	4620      	mov	r0, r4
   d5e1e:	f000 fa35 	bl	d628c <_ZdlPvj>
   d5e22:	4628      	mov	r0, r5
   d5e24:	2114      	movs	r1, #20
      }
   d5e26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5e2a:	f000 ba2f 	b.w	d628c <_ZdlPvj>
   d5e2e:	bd38      	pop	{r3, r4, r5, pc}

000d5e30 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5e30:	b110      	cbz	r0, d5e38 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5e32:	6803      	ldr	r3, [r0, #0]
   d5e34:	685b      	ldr	r3, [r3, #4]
   d5e36:	4718      	bx	r3
   d5e38:	4770      	bx	lr

000d5e3a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5e3a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5e3c:	6803      	ldr	r3, [r0, #0]
   d5e3e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5e40:	b1bb      	cbz	r3, d5e72 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5e42:	6858      	ldr	r0, [r3, #4]
   d5e44:	f7fe fe66 	bl	d4b14 <os_thread_is_current>
   d5e48:	b978      	cbnz	r0, d5e6a <_ZN6ThreadD1Ev+0x30>
   d5e4a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5e4c:	7c5a      	ldrb	r2, [r3, #17]
   d5e4e:	b912      	cbnz	r2, d5e56 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5e50:	6858      	ldr	r0, [r3, #4]
   d5e52:	f7fe fe6f 	bl	d4b34 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5e56:	6823      	ldr	r3, [r4, #0]
   d5e58:	6858      	ldr	r0, [r3, #4]
   d5e5a:	f7fe fe73 	bl	d4b44 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5e5e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5e60:	2300      	movs	r3, #0
   d5e62:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5e64:	b128      	cbz	r0, d5e72 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5e66:	f7ff ffcd 	bl	d5e04 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5e6a:	6820      	ldr	r0, [r4, #0]
   d5e6c:	b108      	cbz	r0, d5e72 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5e6e:	f7ff ffc9 	bl	d5e04 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5e72:	4620      	mov	r0, r4
   d5e74:	bd10      	pop	{r4, pc}

000d5e76 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d5e76:	b538      	push	{r3, r4, r5, lr}
   d5e78:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5e7a:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d5e7e:	b108      	cbz	r0, d5e84 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5e80:	f7fe f90b 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5e84:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5e88:	b108      	cbz	r0, d5e8e <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d5e8a:	f7fe fe93 	bl	d4bb4 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5e8e:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5e92:	b135      	cbz	r5, d5ea2 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5e94:	4628      	mov	r0, r5
   d5e96:	f7ff ffd0 	bl	d5e3a <_ZN6ThreadD1Ev>
   d5e9a:	2104      	movs	r1, #4
   d5e9c:	4628      	mov	r0, r5
   d5e9e:	f000 f9f5 	bl	d628c <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5ea2:	6820      	ldr	r0, [r4, #0]
   d5ea4:	b108      	cbz	r0, d5eaa <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5ea6:	f7ff ffc3 	bl	d5e30 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5eaa:	4620      	mov	r0, r4
   d5eac:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5eb0 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5eb0:	b510      	push	{r4, lr}
   d5eb2:	4b04      	ldr	r3, [pc, #16]	; (d5ec4 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5eb4:	4604      	mov	r4, r0
   d5eb6:	f840 3b08 	str.w	r3, [r0], #8
   d5eba:	f7ff ffdc 	bl	d5e76 <_ZN5spark11MeshPublishD1Ev>
   d5ebe:	4620      	mov	r0, r4
   d5ec0:	bd10      	pop	{r4, pc}
   d5ec2:	bf00      	nop
   d5ec4:	000d742c 	.word	0x000d742c

000d5ec8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5ec8:	b538      	push	{r3, r4, r5, lr}
   d5eca:	4c0e      	ldr	r4, [pc, #56]	; (d5f04 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5ecc:	4b0e      	ldr	r3, [pc, #56]	; (d5f08 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5ece:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5ed0:	2500      	movs	r5, #0
   d5ed2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5ed4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5ed8:	6063      	str	r3, [r4, #4]
   d5eda:	60a5      	str	r5, [r4, #8]
   d5edc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5ee0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5ee4:	f7fe fe5e 	bl	d4ba4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5ee8:	4b08      	ldr	r3, [pc, #32]	; (d5f0c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5eea:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5eee:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5ef2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5ef4:	4620      	mov	r0, r4
   d5ef6:	4a06      	ldr	r2, [pc, #24]	; (d5f10 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5ef8:	4906      	ldr	r1, [pc, #24]	; (d5f14 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5efa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5efe:	f000 b9b7 	b.w	d6270 <__aeabi_atexit>
   d5f02:	bf00      	nop
   d5f04:	2003e528 	.word	0x2003e528
   d5f08:	000d7460 	.word	0x000d7460
   d5f0c:	000d742c 	.word	0x000d742c
   d5f10:	2003e324 	.word	0x2003e324
   d5f14:	000d5eb1 	.word	0x000d5eb1

000d5f18 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5f18:	2300      	movs	r3, #0
   d5f1a:	461a      	mov	r2, r3
   d5f1c:	6840      	ldr	r0, [r0, #4]
   d5f1e:	f7fe bf75 	b.w	d4e0c <network_connect>

000d5f22 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5f22:	2200      	movs	r2, #0
   d5f24:	2102      	movs	r1, #2
   d5f26:	6840      	ldr	r0, [r0, #4]
   d5f28:	f7fe bf80 	b.w	d4e2c <network_disconnect>

000d5f2c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5f2c:	2200      	movs	r2, #0
   d5f2e:	4611      	mov	r1, r2
   d5f30:	6840      	ldr	r0, [r0, #4]
   d5f32:	f7fe bf73 	b.w	d4e1c <network_connecting>

000d5f36 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5f36:	2200      	movs	r2, #0
   d5f38:	4611      	mov	r1, r2
   d5f3a:	6840      	ldr	r0, [r0, #4]
   d5f3c:	f7fe bf7e 	b.w	d4e3c <network_ready>

000d5f40 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5f40:	2300      	movs	r3, #0
   d5f42:	461a      	mov	r2, r3
   d5f44:	4619      	mov	r1, r3
   d5f46:	6840      	ldr	r0, [r0, #4]
   d5f48:	f7fe bf80 	b.w	d4e4c <network_on>

000d5f4c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5f4c:	2300      	movs	r3, #0
   d5f4e:	461a      	mov	r2, r3
   d5f50:	4619      	mov	r1, r3
   d5f52:	6840      	ldr	r0, [r0, #4]
   d5f54:	f7fe bf82 	b.w	d4e5c <network_off>

000d5f58 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5f58:	2200      	movs	r2, #0
   d5f5a:	f081 0101 	eor.w	r1, r1, #1
   d5f5e:	6840      	ldr	r0, [r0, #4]
   d5f60:	f7fe bf84 	b.w	d4e6c <network_listen>

000d5f64 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5f64:	2200      	movs	r2, #0
   d5f66:	6840      	ldr	r0, [r0, #4]
   d5f68:	f7fe bf90 	b.w	d4e8c <network_set_listen_timeout>

000d5f6c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5f6c:	2200      	movs	r2, #0
   d5f6e:	4611      	mov	r1, r2
   d5f70:	6840      	ldr	r0, [r0, #4]
   d5f72:	f7fe bf93 	b.w	d4e9c <network_get_listen_timeout>

000d5f76 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5f76:	2200      	movs	r2, #0
   d5f78:	4611      	mov	r1, r2
   d5f7a:	6840      	ldr	r0, [r0, #4]
   d5f7c:	f7fe bf7e 	b.w	d4e7c <network_listening>

000d5f80 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5f84:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5f86:	b095      	sub	sp, #84	; 0x54
   d5f88:	4616      	mov	r6, r2
   d5f8a:	460d      	mov	r5, r1
   d5f8c:	4607      	mov	r7, r0
    IPAddress addr;
   d5f8e:	f7ff fca5 	bl	d58dc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5f92:	4621      	mov	r1, r4
   d5f94:	2220      	movs	r2, #32
   d5f96:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5f98:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5f9a:	f000 ffec 	bl	d6f76 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5f9e:	2340      	movs	r3, #64	; 0x40
   d5fa0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5fa2:	4621      	mov	r1, r4
   d5fa4:	466b      	mov	r3, sp
   d5fa6:	aa0c      	add	r2, sp, #48	; 0x30
   d5fa8:	4630      	mov	r0, r6
   d5faa:	f7fe fd3b 	bl	d4a24 <netdb_getaddrinfo>
    if (!r) {
   d5fae:	4604      	mov	r4, r0
   d5fb0:	2800      	cmp	r0, #0
   d5fb2:	d144      	bne.n	d603e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5fb4:	4602      	mov	r2, r0
   d5fb6:	2101      	movs	r1, #1
   d5fb8:	6868      	ldr	r0, [r5, #4]
   d5fba:	f7fe ff3f 	bl	d4e3c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5fbe:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5fc0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5fc2:	4622      	mov	r2, r4
   d5fc4:	6868      	ldr	r0, [r5, #4]
   d5fc6:	f7fe ff39 	bl	d4e3c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5fca:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5fcc:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5fce:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5fd0:	2e00      	cmp	r6, #0
   d5fd2:	d034      	beq.n	d603e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5fd4:	2900      	cmp	r1, #0
   d5fd6:	d132      	bne.n	d603e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5fd8:	6873      	ldr	r3, [r6, #4]
   d5fda:	2b02      	cmp	r3, #2
   d5fdc:	d002      	beq.n	d5fe4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5fde:	2b0a      	cmp	r3, #10
   d5fe0:	d009      	beq.n	d5ff6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5fe2:	e02a      	b.n	d603a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5fe4:	f1b8 0f00 	cmp.w	r8, #0
   d5fe8:	d027      	beq.n	d603a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5fea:	6971      	ldr	r1, [r6, #20]
   d5fec:	4638      	mov	r0, r7
   d5fee:	3104      	adds	r1, #4
   d5ff0:	f7ff fca1 	bl	d5936 <_ZN9IPAddressaSEPKh>
   d5ff4:	e020      	b.n	d6038 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5ff6:	f1b9 0f00 	cmp.w	r9, #0
   d5ffa:	d01e      	beq.n	d603a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5ffc:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5ffe:	2211      	movs	r2, #17
   d6000:	a801      	add	r0, sp, #4
   d6002:	f000 ffb8 	bl	d6f76 <memset>
                    a.v = 6;
   d6006:	2306      	movs	r3, #6
   d6008:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d600c:	ad01      	add	r5, sp, #4
   d600e:	f104 0308 	add.w	r3, r4, #8
   d6012:	3418      	adds	r4, #24
   d6014:	6818      	ldr	r0, [r3, #0]
   d6016:	6859      	ldr	r1, [r3, #4]
   d6018:	462a      	mov	r2, r5
   d601a:	c203      	stmia	r2!, {r0, r1}
   d601c:	3308      	adds	r3, #8
   d601e:	42a3      	cmp	r3, r4
   d6020:	4615      	mov	r5, r2
   d6022:	d1f7      	bne.n	d6014 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6024:	a901      	add	r1, sp, #4
   d6026:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6028:	ad07      	add	r5, sp, #28
   d602a:	f7ff fc65 	bl	d58f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d602e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6030:	1d3c      	adds	r4, r7, #4
   d6032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6034:	682b      	ldr	r3, [r5, #0]
   d6036:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6038:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d603a:	69f6      	ldr	r6, [r6, #28]
   d603c:	e7c8      	b.n	d5fd0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d603e:	9800      	ldr	r0, [sp, #0]
   d6040:	f7fe fce8 	bl	d4a14 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6044:	4638      	mov	r0, r7
   d6046:	b015      	add	sp, #84	; 0x54
   d6048:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d604c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d604c:	4b02      	ldr	r3, [pc, #8]	; (d6058 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d604e:	4a03      	ldr	r2, [pc, #12]	; (d605c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6050:	601a      	str	r2, [r3, #0]
   d6052:	2200      	movs	r2, #0
   d6054:	605a      	str	r2, [r3, #4]
   d6056:	4770      	bx	lr
   d6058:	2003e6fc 	.word	0x2003e6fc
   d605c:	000d7460 	.word	0x000d7460

000d6060 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6060:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6062:	4e18      	ldr	r6, [pc, #96]	; (d60c4 <pinAvailable+0x64>)
   d6064:	6831      	ldr	r1, [r6, #0]
   d6066:	f011 0501 	ands.w	r5, r1, #1
   d606a:	4604      	mov	r4, r0
   d606c:	d10a      	bne.n	d6084 <pinAvailable+0x24>
   d606e:	4630      	mov	r0, r6
   d6070:	f7fe f815 	bl	d409e <__cxa_guard_acquire>
   d6074:	b130      	cbz	r0, d6084 <pinAvailable+0x24>
   d6076:	4629      	mov	r1, r5
   d6078:	4813      	ldr	r0, [pc, #76]	; (d60c8 <pinAvailable+0x68>)
   d607a:	f7fe ff95 	bl	d4fa8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d607e:	4630      	mov	r0, r6
   d6080:	f7fe f812 	bl	d40a8 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d6084:	4810      	ldr	r0, [pc, #64]	; (d60c8 <pinAvailable+0x68>)
   d6086:	f7fe ff99 	bl	d4fbc <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d608a:	b128      	cbz	r0, d6098 <pinAvailable+0x38>
   d608c:	f1a4 030b 	sub.w	r3, r4, #11
   d6090:	2b02      	cmp	r3, #2
   d6092:	d801      	bhi.n	d6098 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d6094:	2000      	movs	r0, #0
   d6096:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6098:	f000 f89e 	bl	d61d8 <_Z19__fetch_global_Wirev>
   d609c:	f7ff fe5d 	bl	d5d5a <_ZN7TwoWire9isEnabledEv>
   d60a0:	b108      	cbz	r0, d60a6 <pinAvailable+0x46>
   d60a2:	2c01      	cmp	r4, #1
   d60a4:	d9f6      	bls.n	d6094 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d60a6:	f7ff fdbb 	bl	d5c20 <_Z22__fetch_global_Serial1v>
   d60aa:	f7ff fdb5 	bl	d5c18 <_ZN11USARTSerial9isEnabledEv>
   d60ae:	b118      	cbz	r0, d60b8 <pinAvailable+0x58>
   d60b0:	f1a4 0309 	sub.w	r3, r4, #9
   d60b4:	2b01      	cmp	r3, #1
   d60b6:	d9ed      	bls.n	d6094 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d60b8:	2c23      	cmp	r4, #35	; 0x23
   d60ba:	bf8c      	ite	hi
   d60bc:	2000      	movhi	r0, #0
   d60be:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d60c0:	bd70      	pop	{r4, r5, r6, pc}
   d60c2:	bf00      	nop
   d60c4:	2003e704 	.word	0x2003e704
   d60c8:	2003e708 	.word	0x2003e708

000d60cc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d60cc:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d60ce:	b538      	push	{r3, r4, r5, lr}
   d60d0:	4604      	mov	r4, r0
   d60d2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d60d4:	d80a      	bhi.n	d60ec <pinMode+0x20>
   d60d6:	29ff      	cmp	r1, #255	; 0xff
   d60d8:	d008      	beq.n	d60ec <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d60da:	f7ff ffc1 	bl	d6060 <pinAvailable>
   d60de:	b128      	cbz	r0, d60ec <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d60e0:	4629      	mov	r1, r5
   d60e2:	4620      	mov	r0, r4
}
   d60e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d60e8:	f7fe bcac 	b.w	d4a44 <HAL_Pin_Mode>
   d60ec:	bd38      	pop	{r3, r4, r5, pc}

000d60ee <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d60ee:	b538      	push	{r3, r4, r5, lr}
   d60f0:	4604      	mov	r4, r0
   d60f2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d60f4:	f7fe fcae 	bl	d4a54 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d60f8:	28ff      	cmp	r0, #255	; 0xff
   d60fa:	d010      	beq.n	d611e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d60fc:	2806      	cmp	r0, #6
   d60fe:	d804      	bhi.n	d610a <digitalWrite+0x1c>
   d6100:	234d      	movs	r3, #77	; 0x4d
   d6102:	fa23 f000 	lsr.w	r0, r3, r0
   d6106:	07c3      	lsls	r3, r0, #31
   d6108:	d409      	bmi.n	d611e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d610a:	4620      	mov	r0, r4
   d610c:	f7ff ffa8 	bl	d6060 <pinAvailable>
   d6110:	b128      	cbz	r0, d611e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6112:	4629      	mov	r1, r5
   d6114:	4620      	mov	r0, r4
}
   d6116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d611a:	f7fe bca3 	b.w	d4a64 <HAL_GPIO_Write>
   d611e:	bd38      	pop	{r3, r4, r5, pc}

000d6120 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6120:	b510      	push	{r4, lr}
   d6122:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6124:	f7fe fc96 	bl	d4a54 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d6128:	3804      	subs	r0, #4
   d612a:	b2c0      	uxtb	r0, r0
   d612c:	2801      	cmp	r0, #1
   d612e:	d908      	bls.n	d6142 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6130:	4620      	mov	r0, r4
   d6132:	f7ff ff95 	bl	d6060 <pinAvailable>
   d6136:	b120      	cbz	r0, d6142 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6138:	4620      	mov	r0, r4
}
   d613a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d613e:	f7fe bc99 	b.w	d4a74 <HAL_GPIO_Read>
}
   d6142:	2000      	movs	r0, #0
   d6144:	bd10      	pop	{r4, pc}
	...

000d6148 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d6148:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d614a:	4c07      	ldr	r4, [pc, #28]	; (d6168 <_Z21__fetch_global_EEPROMv+0x20>)
   d614c:	6823      	ldr	r3, [r4, #0]
   d614e:	07db      	lsls	r3, r3, #31
   d6150:	d408      	bmi.n	d6164 <_Z21__fetch_global_EEPROMv+0x1c>
   d6152:	4620      	mov	r0, r4
   d6154:	f7fd ffa3 	bl	d409e <__cxa_guard_acquire>
   d6158:	b120      	cbz	r0, d6164 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d615a:	f7fe fcbb 	bl	d4ad4 <HAL_EEPROM_Init>
   d615e:	4620      	mov	r0, r4
   d6160:	f7fd ffa2 	bl	d40a8 <__cxa_guard_release>
	return eeprom;
}
   d6164:	4801      	ldr	r0, [pc, #4]	; (d616c <_Z21__fetch_global_EEPROMv+0x24>)
   d6166:	bd10      	pop	{r4, pc}
   d6168:	2003e714 	.word	0x2003e714
   d616c:	2003e718 	.word	0x2003e718

000d6170 <_Z17acquireWireBufferv>:
   d6170:	b570      	push	{r4, r5, r6, lr}
   d6172:	4604      	mov	r4, r0
   d6174:	2514      	movs	r5, #20
   d6176:	462a      	mov	r2, r5
   d6178:	4e09      	ldr	r6, [pc, #36]	; (d61a0 <_Z17acquireWireBufferv+0x30>)
   d617a:	2100      	movs	r1, #0
   d617c:	f000 fefb 	bl	d6f76 <memset>
   d6180:	8025      	strh	r5, [r4, #0]
   d6182:	2520      	movs	r5, #32
   d6184:	4631      	mov	r1, r6
   d6186:	60a5      	str	r5, [r4, #8]
   d6188:	6125      	str	r5, [r4, #16]
   d618a:	4628      	mov	r0, r5
   d618c:	f000 f880 	bl	d6290 <_ZnajRKSt9nothrow_t>
   d6190:	4631      	mov	r1, r6
   d6192:	6060      	str	r0, [r4, #4]
   d6194:	4628      	mov	r0, r5
   d6196:	f000 f87b 	bl	d6290 <_ZnajRKSt9nothrow_t>
   d619a:	60e0      	str	r0, [r4, #12]
   d619c:	4620      	mov	r0, r4
   d619e:	bd70      	pop	{r4, r5, r6, pc}
   d61a0:	000d748c 	.word	0x000d748c

000d61a4 <_Z18acquireWire1Bufferv>:
	return defaultWireConfig();
}

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
   d61a4:	b570      	push	{r4, r5, r6, lr}
   d61a6:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d61a8:	2514      	movs	r5, #20
   d61aa:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d61ac:	4e09      	ldr	r6, [pc, #36]	; (d61d4 <_Z18acquireWire1Bufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d61ae:	2100      	movs	r1, #0
   d61b0:	f000 fee1 	bl	d6f76 <memset>
   d61b4:	8025      	strh	r5, [r4, #0]
   d61b6:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d61b8:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d61ba:	60a5      	str	r5, [r4, #8]
   d61bc:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d61be:	4628      	mov	r0, r5
   d61c0:	f000 f866 	bl	d6290 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d61c4:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d61c6:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d61c8:	4628      	mov	r0, r5
   d61ca:	f000 f861 	bl	d6290 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d61ce:	60e0      	str	r0, [r4, #12]

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
	return defaultWireConfig();
}
   d61d0:	4620      	mov	r0, r4
   d61d2:	bd70      	pop	{r4, r5, r6, pc}
   d61d4:	000d748c 	.word	0x000d748c

000d61d8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d61d8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d61da:	4d0e      	ldr	r5, [pc, #56]	; (d6214 <_Z19__fetch_global_Wirev+0x3c>)
   d61dc:	6829      	ldr	r1, [r5, #0]
   d61de:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d61e2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d61e4:	d113      	bne.n	d620e <_Z19__fetch_global_Wirev+0x36>
   d61e6:	4628      	mov	r0, r5
   d61e8:	f7fd ff59 	bl	d409e <__cxa_guard_acquire>
   d61ec:	b178      	cbz	r0, d620e <_Z19__fetch_global_Wirev+0x36>
   d61ee:	a801      	add	r0, sp, #4
   d61f0:	f7ff ffbe 	bl	d6170 <_Z17acquireWireBufferv>
   d61f4:	aa01      	add	r2, sp, #4
   d61f6:	4621      	mov	r1, r4
   d61f8:	4807      	ldr	r0, [pc, #28]	; (d6218 <_Z19__fetch_global_Wirev+0x40>)
   d61fa:	f7ff fd63 	bl	d5cc4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d61fe:	4628      	mov	r0, r5
   d6200:	f7fd ff52 	bl	d40a8 <__cxa_guard_release>
   d6204:	4a05      	ldr	r2, [pc, #20]	; (d621c <_Z19__fetch_global_Wirev+0x44>)
   d6206:	4906      	ldr	r1, [pc, #24]	; (d6220 <_Z19__fetch_global_Wirev+0x48>)
   d6208:	4803      	ldr	r0, [pc, #12]	; (d6218 <_Z19__fetch_global_Wirev+0x40>)
   d620a:	f000 f831 	bl	d6270 <__aeabi_atexit>
	return wire;
}
   d620e:	4802      	ldr	r0, [pc, #8]	; (d6218 <_Z19__fetch_global_Wirev+0x40>)
   d6210:	b007      	add	sp, #28
   d6212:	bd30      	pop	{r4, r5, pc}
   d6214:	2003e71c 	.word	0x2003e71c
   d6218:	2003e734 	.word	0x2003e734
   d621c:	2003e324 	.word	0x2003e324
   d6220:	000d5c6d 	.word	0x000d5c6d

000d6224 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d6224:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d6226:	4c0e      	ldr	r4, [pc, #56]	; (d6260 <_Z20__fetch_global_Wire1v+0x3c>)
   d6228:	6823      	ldr	r3, [r4, #0]
   d622a:	07db      	lsls	r3, r3, #31
	return wire;
}

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d622c:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d622e:	d413      	bmi.n	d6258 <_Z20__fetch_global_Wire1v+0x34>
   d6230:	4620      	mov	r0, r4
   d6232:	f7fd ff34 	bl	d409e <__cxa_guard_acquire>
   d6236:	b178      	cbz	r0, d6258 <_Z20__fetch_global_Wire1v+0x34>
   d6238:	a801      	add	r0, sp, #4
   d623a:	f7ff ffb3 	bl	d61a4 <_Z18acquireWire1Bufferv>
   d623e:	aa01      	add	r2, sp, #4
   d6240:	2101      	movs	r1, #1
   d6242:	4808      	ldr	r0, [pc, #32]	; (d6264 <_Z20__fetch_global_Wire1v+0x40>)
   d6244:	f7ff fd3e 	bl	d5cc4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d6248:	4620      	mov	r0, r4
   d624a:	f7fd ff2d 	bl	d40a8 <__cxa_guard_release>
   d624e:	4a06      	ldr	r2, [pc, #24]	; (d6268 <_Z20__fetch_global_Wire1v+0x44>)
   d6250:	4906      	ldr	r1, [pc, #24]	; (d626c <_Z20__fetch_global_Wire1v+0x48>)
   d6252:	4804      	ldr	r0, [pc, #16]	; (d6264 <_Z20__fetch_global_Wire1v+0x40>)
   d6254:	f000 f80c 	bl	d6270 <__aeabi_atexit>
	return wire;
}
   d6258:	4802      	ldr	r0, [pc, #8]	; (d6264 <_Z20__fetch_global_Wire1v+0x40>)
   d625a:	b006      	add	sp, #24
   d625c:	bd10      	pop	{r4, pc}
   d625e:	bf00      	nop
   d6260:	2003e748 	.word	0x2003e748
   d6264:	2003e720 	.word	0x2003e720
   d6268:	2003e324 	.word	0x2003e324
   d626c:	000d5c6d 	.word	0x000d5c6d

000d6270 <__aeabi_atexit>:
   d6270:	460b      	mov	r3, r1
   d6272:	4601      	mov	r1, r0
   d6274:	4618      	mov	r0, r3
   d6276:	f000 be65 	b.w	d6f44 <__cxa_atexit>
	...

000d627c <_ZSt15get_new_handlerv>:
   d627c:	4b02      	ldr	r3, [pc, #8]	; (d6288 <_ZSt15get_new_handlerv+0xc>)
   d627e:	6818      	ldr	r0, [r3, #0]
   d6280:	f3bf 8f5f 	dmb	sy
   d6284:	4770      	bx	lr
   d6286:	bf00      	nop
   d6288:	2003e74c 	.word	0x2003e74c

000d628c <_ZdlPvj>:
   d628c:	f7fd bf03 	b.w	d4096 <_ZdlPv>

000d6290 <_ZnajRKSt9nothrow_t>:
   d6290:	f000 b800 	b.w	d6294 <_ZnwjRKSt9nothrow_t>

000d6294 <_ZnwjRKSt9nothrow_t>:
   d6294:	b510      	push	{r4, lr}
   d6296:	2800      	cmp	r0, #0
   d6298:	bf14      	ite	ne
   d629a:	4604      	movne	r4, r0
   d629c:	2401      	moveq	r4, #1
   d629e:	4620      	mov	r0, r4
   d62a0:	f7fe fe2c 	bl	d4efc <malloc>
   d62a4:	b920      	cbnz	r0, d62b0 <_ZnwjRKSt9nothrow_t+0x1c>
   d62a6:	f7ff ffe9 	bl	d627c <_ZSt15get_new_handlerv>
   d62aa:	b108      	cbz	r0, d62b0 <_ZnwjRKSt9nothrow_t+0x1c>
   d62ac:	4780      	blx	r0
   d62ae:	e7f6      	b.n	d629e <_ZnwjRKSt9nothrow_t+0xa>
   d62b0:	bd10      	pop	{r4, pc}
	...

000d62b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d62b4:	4b18      	ldr	r3, [pc, #96]	; (d6318 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d62b6:	681a      	ldr	r2, [r3, #0]
   d62b8:	07d1      	lsls	r1, r2, #31
   d62ba:	bf5c      	itt	pl
   d62bc:	2201      	movpl	r2, #1
   d62be:	601a      	strpl	r2, [r3, #0]
   d62c0:	4b16      	ldr	r3, [pc, #88]	; (d631c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d62c2:	681a      	ldr	r2, [r3, #0]
   d62c4:	07d2      	lsls	r2, r2, #31
   d62c6:	bf5c      	itt	pl
   d62c8:	2201      	movpl	r2, #1
   d62ca:	601a      	strpl	r2, [r3, #0]
   d62cc:	4b14      	ldr	r3, [pc, #80]	; (d6320 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d62ce:	681a      	ldr	r2, [r3, #0]
   d62d0:	07d0      	lsls	r0, r2, #31
   d62d2:	bf5c      	itt	pl
   d62d4:	2201      	movpl	r2, #1
   d62d6:	601a      	strpl	r2, [r3, #0]
   d62d8:	4b12      	ldr	r3, [pc, #72]	; (d6324 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d62da:	681a      	ldr	r2, [r3, #0]
   d62dc:	07d1      	lsls	r1, r2, #31
   d62de:	bf5c      	itt	pl
   d62e0:	2201      	movpl	r2, #1
   d62e2:	601a      	strpl	r2, [r3, #0]
   d62e4:	4b10      	ldr	r3, [pc, #64]	; (d6328 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d62e6:	681a      	ldr	r2, [r3, #0]
   d62e8:	07d2      	lsls	r2, r2, #31
   d62ea:	bf5c      	itt	pl
   d62ec:	2201      	movpl	r2, #1
   d62ee:	601a      	strpl	r2, [r3, #0]
   d62f0:	4b0e      	ldr	r3, [pc, #56]	; (d632c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d62f2:	681a      	ldr	r2, [r3, #0]
   d62f4:	07d0      	lsls	r0, r2, #31
   d62f6:	bf5c      	itt	pl
   d62f8:	2201      	movpl	r2, #1
   d62fa:	601a      	strpl	r2, [r3, #0]
   d62fc:	4b0c      	ldr	r3, [pc, #48]	; (d6330 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d62fe:	681a      	ldr	r2, [r3, #0]
   d6300:	07d1      	lsls	r1, r2, #31
   d6302:	bf5c      	itt	pl
   d6304:	2201      	movpl	r2, #1
   d6306:	601a      	strpl	r2, [r3, #0]
   d6308:	4b0a      	ldr	r3, [pc, #40]	; (d6334 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d630a:	681a      	ldr	r2, [r3, #0]
   d630c:	07d2      	lsls	r2, r2, #31
   d630e:	bf5c      	itt	pl
   d6310:	2201      	movpl	r2, #1
   d6312:	601a      	strpl	r2, [r3, #0]
   d6314:	4770      	bx	lr
   d6316:	bf00      	nop
   d6318:	2003e76c 	.word	0x2003e76c
   d631c:	2003e768 	.word	0x2003e768
   d6320:	2003e764 	.word	0x2003e764
   d6324:	2003e760 	.word	0x2003e760
   d6328:	2003e75c 	.word	0x2003e75c
   d632c:	2003e758 	.word	0x2003e758
   d6330:	2003e754 	.word	0x2003e754
   d6334:	2003e750 	.word	0x2003e750

000d6338 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6338:	4b24      	ldr	r3, [pc, #144]	; (d63cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d633a:	681a      	ldr	r2, [r3, #0]
   d633c:	07d0      	lsls	r0, r2, #31
   d633e:	bf5c      	itt	pl
   d6340:	2201      	movpl	r2, #1
   d6342:	601a      	strpl	r2, [r3, #0]
   d6344:	4b22      	ldr	r3, [pc, #136]	; (d63d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6346:	681a      	ldr	r2, [r3, #0]
   d6348:	07d1      	lsls	r1, r2, #31
   d634a:	bf5c      	itt	pl
   d634c:	2201      	movpl	r2, #1
   d634e:	601a      	strpl	r2, [r3, #0]
   d6350:	4b20      	ldr	r3, [pc, #128]	; (d63d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6352:	681a      	ldr	r2, [r3, #0]
   d6354:	07d2      	lsls	r2, r2, #31
   d6356:	bf5c      	itt	pl
   d6358:	2201      	movpl	r2, #1
   d635a:	601a      	strpl	r2, [r3, #0]
   d635c:	4b1e      	ldr	r3, [pc, #120]	; (d63d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d635e:	681a      	ldr	r2, [r3, #0]
   d6360:	07d0      	lsls	r0, r2, #31
   d6362:	bf5c      	itt	pl
   d6364:	2201      	movpl	r2, #1
   d6366:	601a      	strpl	r2, [r3, #0]
   d6368:	4b1c      	ldr	r3, [pc, #112]	; (d63dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d636a:	681a      	ldr	r2, [r3, #0]
   d636c:	07d1      	lsls	r1, r2, #31
   d636e:	bf5c      	itt	pl
   d6370:	2201      	movpl	r2, #1
   d6372:	601a      	strpl	r2, [r3, #0]
   d6374:	4b1a      	ldr	r3, [pc, #104]	; (d63e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6376:	681a      	ldr	r2, [r3, #0]
   d6378:	07d2      	lsls	r2, r2, #31
   d637a:	bf5c      	itt	pl
   d637c:	2201      	movpl	r2, #1
   d637e:	601a      	strpl	r2, [r3, #0]
   d6380:	4b18      	ldr	r3, [pc, #96]	; (d63e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6382:	681a      	ldr	r2, [r3, #0]
   d6384:	07d0      	lsls	r0, r2, #31
   d6386:	bf5c      	itt	pl
   d6388:	2201      	movpl	r2, #1
   d638a:	601a      	strpl	r2, [r3, #0]
   d638c:	4b16      	ldr	r3, [pc, #88]	; (d63e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d638e:	681a      	ldr	r2, [r3, #0]
   d6390:	07d1      	lsls	r1, r2, #31
   d6392:	bf5c      	itt	pl
   d6394:	2201      	movpl	r2, #1
   d6396:	601a      	strpl	r2, [r3, #0]
   d6398:	4b14      	ldr	r3, [pc, #80]	; (d63ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d639a:	681a      	ldr	r2, [r3, #0]
   d639c:	07d2      	lsls	r2, r2, #31
   d639e:	bf5c      	itt	pl
   d63a0:	2201      	movpl	r2, #1
   d63a2:	601a      	strpl	r2, [r3, #0]
   d63a4:	4b12      	ldr	r3, [pc, #72]	; (d63f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d63a6:	681a      	ldr	r2, [r3, #0]
   d63a8:	07d0      	lsls	r0, r2, #31
   d63aa:	bf5c      	itt	pl
   d63ac:	2201      	movpl	r2, #1
   d63ae:	601a      	strpl	r2, [r3, #0]
   d63b0:	4b10      	ldr	r3, [pc, #64]	; (d63f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d63b2:	681a      	ldr	r2, [r3, #0]
   d63b4:	07d1      	lsls	r1, r2, #31
   d63b6:	bf5c      	itt	pl
   d63b8:	2201      	movpl	r2, #1
   d63ba:	601a      	strpl	r2, [r3, #0]
   d63bc:	4b0e      	ldr	r3, [pc, #56]	; (d63f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d63be:	681a      	ldr	r2, [r3, #0]
   d63c0:	07d2      	lsls	r2, r2, #31
   d63c2:	bf5c      	itt	pl
   d63c4:	2201      	movpl	r2, #1
   d63c6:	601a      	strpl	r2, [r3, #0]
   d63c8:	4770      	bx	lr
   d63ca:	bf00      	nop
   d63cc:	2003e79c 	.word	0x2003e79c
   d63d0:	2003e798 	.word	0x2003e798
   d63d4:	2003e794 	.word	0x2003e794
   d63d8:	2003e790 	.word	0x2003e790
   d63dc:	2003e78c 	.word	0x2003e78c
   d63e0:	2003e788 	.word	0x2003e788
   d63e4:	2003e784 	.word	0x2003e784
   d63e8:	2003e780 	.word	0x2003e780
   d63ec:	2003e77c 	.word	0x2003e77c
   d63f0:	2003e778 	.word	0x2003e778
   d63f4:	2003e774 	.word	0x2003e774
   d63f8:	2003e770 	.word	0x2003e770

000d63fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d63fc:	4b24      	ldr	r3, [pc, #144]	; (d6490 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d63fe:	681a      	ldr	r2, [r3, #0]
   d6400:	07d0      	lsls	r0, r2, #31
   d6402:	bf5c      	itt	pl
   d6404:	2201      	movpl	r2, #1
   d6406:	601a      	strpl	r2, [r3, #0]
   d6408:	4b22      	ldr	r3, [pc, #136]	; (d6494 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d640a:	681a      	ldr	r2, [r3, #0]
   d640c:	07d1      	lsls	r1, r2, #31
   d640e:	bf5c      	itt	pl
   d6410:	2201      	movpl	r2, #1
   d6412:	601a      	strpl	r2, [r3, #0]
   d6414:	4b20      	ldr	r3, [pc, #128]	; (d6498 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6416:	681a      	ldr	r2, [r3, #0]
   d6418:	07d2      	lsls	r2, r2, #31
   d641a:	bf5c      	itt	pl
   d641c:	2201      	movpl	r2, #1
   d641e:	601a      	strpl	r2, [r3, #0]
   d6420:	4b1e      	ldr	r3, [pc, #120]	; (d649c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6422:	681a      	ldr	r2, [r3, #0]
   d6424:	07d0      	lsls	r0, r2, #31
   d6426:	bf5c      	itt	pl
   d6428:	2201      	movpl	r2, #1
   d642a:	601a      	strpl	r2, [r3, #0]
   d642c:	4b1c      	ldr	r3, [pc, #112]	; (d64a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d642e:	681a      	ldr	r2, [r3, #0]
   d6430:	07d1      	lsls	r1, r2, #31
   d6432:	bf5c      	itt	pl
   d6434:	2201      	movpl	r2, #1
   d6436:	601a      	strpl	r2, [r3, #0]
   d6438:	4b1a      	ldr	r3, [pc, #104]	; (d64a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d643a:	681a      	ldr	r2, [r3, #0]
   d643c:	07d2      	lsls	r2, r2, #31
   d643e:	bf5c      	itt	pl
   d6440:	2201      	movpl	r2, #1
   d6442:	601a      	strpl	r2, [r3, #0]
   d6444:	4b18      	ldr	r3, [pc, #96]	; (d64a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6446:	681a      	ldr	r2, [r3, #0]
   d6448:	07d0      	lsls	r0, r2, #31
   d644a:	bf5c      	itt	pl
   d644c:	2201      	movpl	r2, #1
   d644e:	601a      	strpl	r2, [r3, #0]
   d6450:	4b16      	ldr	r3, [pc, #88]	; (d64ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6452:	681a      	ldr	r2, [r3, #0]
   d6454:	07d1      	lsls	r1, r2, #31
   d6456:	bf5c      	itt	pl
   d6458:	2201      	movpl	r2, #1
   d645a:	601a      	strpl	r2, [r3, #0]
   d645c:	4b14      	ldr	r3, [pc, #80]	; (d64b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d645e:	681a      	ldr	r2, [r3, #0]
   d6460:	07d2      	lsls	r2, r2, #31
   d6462:	bf5c      	itt	pl
   d6464:	2201      	movpl	r2, #1
   d6466:	601a      	strpl	r2, [r3, #0]
   d6468:	4b12      	ldr	r3, [pc, #72]	; (d64b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d646a:	681a      	ldr	r2, [r3, #0]
   d646c:	07d0      	lsls	r0, r2, #31
   d646e:	bf5c      	itt	pl
   d6470:	2201      	movpl	r2, #1
   d6472:	601a      	strpl	r2, [r3, #0]
   d6474:	4b10      	ldr	r3, [pc, #64]	; (d64b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6476:	681a      	ldr	r2, [r3, #0]
   d6478:	07d1      	lsls	r1, r2, #31
   d647a:	bf5c      	itt	pl
   d647c:	2201      	movpl	r2, #1
   d647e:	601a      	strpl	r2, [r3, #0]
   d6480:	4b0e      	ldr	r3, [pc, #56]	; (d64bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6482:	681a      	ldr	r2, [r3, #0]
   d6484:	07d2      	lsls	r2, r2, #31
   d6486:	bf5c      	itt	pl
   d6488:	2201      	movpl	r2, #1
   d648a:	601a      	strpl	r2, [r3, #0]
   d648c:	4770      	bx	lr
   d648e:	bf00      	nop
   d6490:	2003e7cc 	.word	0x2003e7cc
   d6494:	2003e7c8 	.word	0x2003e7c8
   d6498:	2003e7c4 	.word	0x2003e7c4
   d649c:	2003e7c0 	.word	0x2003e7c0
   d64a0:	2003e7bc 	.word	0x2003e7bc
   d64a4:	2003e7b8 	.word	0x2003e7b8
   d64a8:	2003e7b4 	.word	0x2003e7b4
   d64ac:	2003e7b0 	.word	0x2003e7b0
   d64b0:	2003e7ac 	.word	0x2003e7ac
   d64b4:	2003e7a8 	.word	0x2003e7a8
   d64b8:	2003e7a4 	.word	0x2003e7a4
   d64bc:	2003e7a0 	.word	0x2003e7a0

000d64c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d64c0:	4b18      	ldr	r3, [pc, #96]	; (d6524 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d64c2:	681a      	ldr	r2, [r3, #0]
   d64c4:	07d1      	lsls	r1, r2, #31
   d64c6:	bf5c      	itt	pl
   d64c8:	2201      	movpl	r2, #1
   d64ca:	601a      	strpl	r2, [r3, #0]
   d64cc:	4b16      	ldr	r3, [pc, #88]	; (d6528 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d64ce:	681a      	ldr	r2, [r3, #0]
   d64d0:	07d2      	lsls	r2, r2, #31
   d64d2:	bf5c      	itt	pl
   d64d4:	2201      	movpl	r2, #1
   d64d6:	601a      	strpl	r2, [r3, #0]
   d64d8:	4b14      	ldr	r3, [pc, #80]	; (d652c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d64da:	681a      	ldr	r2, [r3, #0]
   d64dc:	07d0      	lsls	r0, r2, #31
   d64de:	bf5c      	itt	pl
   d64e0:	2201      	movpl	r2, #1
   d64e2:	601a      	strpl	r2, [r3, #0]
   d64e4:	4b12      	ldr	r3, [pc, #72]	; (d6530 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d64e6:	681a      	ldr	r2, [r3, #0]
   d64e8:	07d1      	lsls	r1, r2, #31
   d64ea:	bf5c      	itt	pl
   d64ec:	2201      	movpl	r2, #1
   d64ee:	601a      	strpl	r2, [r3, #0]
   d64f0:	4b10      	ldr	r3, [pc, #64]	; (d6534 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d64f2:	681a      	ldr	r2, [r3, #0]
   d64f4:	07d2      	lsls	r2, r2, #31
   d64f6:	bf5c      	itt	pl
   d64f8:	2201      	movpl	r2, #1
   d64fa:	601a      	strpl	r2, [r3, #0]
   d64fc:	4b0e      	ldr	r3, [pc, #56]	; (d6538 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d64fe:	681a      	ldr	r2, [r3, #0]
   d6500:	07d0      	lsls	r0, r2, #31
   d6502:	bf5c      	itt	pl
   d6504:	2201      	movpl	r2, #1
   d6506:	601a      	strpl	r2, [r3, #0]
   d6508:	4b0c      	ldr	r3, [pc, #48]	; (d653c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d650a:	681a      	ldr	r2, [r3, #0]
   d650c:	07d1      	lsls	r1, r2, #31
   d650e:	bf5c      	itt	pl
   d6510:	2201      	movpl	r2, #1
   d6512:	601a      	strpl	r2, [r3, #0]
   d6514:	4b0a      	ldr	r3, [pc, #40]	; (d6540 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6516:	681a      	ldr	r2, [r3, #0]
   d6518:	07d2      	lsls	r2, r2, #31
   d651a:	bf5c      	itt	pl
   d651c:	2201      	movpl	r2, #1
   d651e:	601a      	strpl	r2, [r3, #0]
   d6520:	4770      	bx	lr
   d6522:	bf00      	nop
   d6524:	2003e7ec 	.word	0x2003e7ec
   d6528:	2003e7e8 	.word	0x2003e7e8
   d652c:	2003e7e4 	.word	0x2003e7e4
   d6530:	2003e7e0 	.word	0x2003e7e0
   d6534:	2003e7dc 	.word	0x2003e7dc
   d6538:	2003e7d8 	.word	0x2003e7d8
   d653c:	2003e7d4 	.word	0x2003e7d4
   d6540:	2003e7d0 	.word	0x2003e7d0

000d6544 <__aeabi_drsub>:
   d6544:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6548:	e002      	b.n	d6550 <__adddf3>
   d654a:	bf00      	nop

000d654c <__aeabi_dsub>:
   d654c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6550 <__adddf3>:
   d6550:	b530      	push	{r4, r5, lr}
   d6552:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6556:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d655a:	ea94 0f05 	teq	r4, r5
   d655e:	bf08      	it	eq
   d6560:	ea90 0f02 	teqeq	r0, r2
   d6564:	bf1f      	itttt	ne
   d6566:	ea54 0c00 	orrsne.w	ip, r4, r0
   d656a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d656e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6572:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6576:	f000 80e2 	beq.w	d673e <__adddf3+0x1ee>
   d657a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d657e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6582:	bfb8      	it	lt
   d6584:	426d      	neglt	r5, r5
   d6586:	dd0c      	ble.n	d65a2 <__adddf3+0x52>
   d6588:	442c      	add	r4, r5
   d658a:	ea80 0202 	eor.w	r2, r0, r2
   d658e:	ea81 0303 	eor.w	r3, r1, r3
   d6592:	ea82 0000 	eor.w	r0, r2, r0
   d6596:	ea83 0101 	eor.w	r1, r3, r1
   d659a:	ea80 0202 	eor.w	r2, r0, r2
   d659e:	ea81 0303 	eor.w	r3, r1, r3
   d65a2:	2d36      	cmp	r5, #54	; 0x36
   d65a4:	bf88      	it	hi
   d65a6:	bd30      	pophi	{r4, r5, pc}
   d65a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d65ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d65b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d65b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d65b8:	d002      	beq.n	d65c0 <__adddf3+0x70>
   d65ba:	4240      	negs	r0, r0
   d65bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d65c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d65c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d65c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d65cc:	d002      	beq.n	d65d4 <__adddf3+0x84>
   d65ce:	4252      	negs	r2, r2
   d65d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d65d4:	ea94 0f05 	teq	r4, r5
   d65d8:	f000 80a7 	beq.w	d672a <__adddf3+0x1da>
   d65dc:	f1a4 0401 	sub.w	r4, r4, #1
   d65e0:	f1d5 0e20 	rsbs	lr, r5, #32
   d65e4:	db0d      	blt.n	d6602 <__adddf3+0xb2>
   d65e6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d65ea:	fa22 f205 	lsr.w	r2, r2, r5
   d65ee:	1880      	adds	r0, r0, r2
   d65f0:	f141 0100 	adc.w	r1, r1, #0
   d65f4:	fa03 f20e 	lsl.w	r2, r3, lr
   d65f8:	1880      	adds	r0, r0, r2
   d65fa:	fa43 f305 	asr.w	r3, r3, r5
   d65fe:	4159      	adcs	r1, r3
   d6600:	e00e      	b.n	d6620 <__adddf3+0xd0>
   d6602:	f1a5 0520 	sub.w	r5, r5, #32
   d6606:	f10e 0e20 	add.w	lr, lr, #32
   d660a:	2a01      	cmp	r2, #1
   d660c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6610:	bf28      	it	cs
   d6612:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6616:	fa43 f305 	asr.w	r3, r3, r5
   d661a:	18c0      	adds	r0, r0, r3
   d661c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6620:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6624:	d507      	bpl.n	d6636 <__adddf3+0xe6>
   d6626:	f04f 0e00 	mov.w	lr, #0
   d662a:	f1dc 0c00 	rsbs	ip, ip, #0
   d662e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6632:	eb6e 0101 	sbc.w	r1, lr, r1
   d6636:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d663a:	d31b      	bcc.n	d6674 <__adddf3+0x124>
   d663c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6640:	d30c      	bcc.n	d665c <__adddf3+0x10c>
   d6642:	0849      	lsrs	r1, r1, #1
   d6644:	ea5f 0030 	movs.w	r0, r0, rrx
   d6648:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d664c:	f104 0401 	add.w	r4, r4, #1
   d6650:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6654:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6658:	f080 809a 	bcs.w	d6790 <__adddf3+0x240>
   d665c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6660:	bf08      	it	eq
   d6662:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6666:	f150 0000 	adcs.w	r0, r0, #0
   d666a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d666e:	ea41 0105 	orr.w	r1, r1, r5
   d6672:	bd30      	pop	{r4, r5, pc}
   d6674:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6678:	4140      	adcs	r0, r0
   d667a:	eb41 0101 	adc.w	r1, r1, r1
   d667e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6682:	f1a4 0401 	sub.w	r4, r4, #1
   d6686:	d1e9      	bne.n	d665c <__adddf3+0x10c>
   d6688:	f091 0f00 	teq	r1, #0
   d668c:	bf04      	itt	eq
   d668e:	4601      	moveq	r1, r0
   d6690:	2000      	moveq	r0, #0
   d6692:	fab1 f381 	clz	r3, r1
   d6696:	bf08      	it	eq
   d6698:	3320      	addeq	r3, #32
   d669a:	f1a3 030b 	sub.w	r3, r3, #11
   d669e:	f1b3 0220 	subs.w	r2, r3, #32
   d66a2:	da0c      	bge.n	d66be <__adddf3+0x16e>
   d66a4:	320c      	adds	r2, #12
   d66a6:	dd08      	ble.n	d66ba <__adddf3+0x16a>
   d66a8:	f102 0c14 	add.w	ip, r2, #20
   d66ac:	f1c2 020c 	rsb	r2, r2, #12
   d66b0:	fa01 f00c 	lsl.w	r0, r1, ip
   d66b4:	fa21 f102 	lsr.w	r1, r1, r2
   d66b8:	e00c      	b.n	d66d4 <__adddf3+0x184>
   d66ba:	f102 0214 	add.w	r2, r2, #20
   d66be:	bfd8      	it	le
   d66c0:	f1c2 0c20 	rsble	ip, r2, #32
   d66c4:	fa01 f102 	lsl.w	r1, r1, r2
   d66c8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d66cc:	bfdc      	itt	le
   d66ce:	ea41 010c 	orrle.w	r1, r1, ip
   d66d2:	4090      	lslle	r0, r2
   d66d4:	1ae4      	subs	r4, r4, r3
   d66d6:	bfa2      	ittt	ge
   d66d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d66dc:	4329      	orrge	r1, r5
   d66de:	bd30      	popge	{r4, r5, pc}
   d66e0:	ea6f 0404 	mvn.w	r4, r4
   d66e4:	3c1f      	subs	r4, #31
   d66e6:	da1c      	bge.n	d6722 <__adddf3+0x1d2>
   d66e8:	340c      	adds	r4, #12
   d66ea:	dc0e      	bgt.n	d670a <__adddf3+0x1ba>
   d66ec:	f104 0414 	add.w	r4, r4, #20
   d66f0:	f1c4 0220 	rsb	r2, r4, #32
   d66f4:	fa20 f004 	lsr.w	r0, r0, r4
   d66f8:	fa01 f302 	lsl.w	r3, r1, r2
   d66fc:	ea40 0003 	orr.w	r0, r0, r3
   d6700:	fa21 f304 	lsr.w	r3, r1, r4
   d6704:	ea45 0103 	orr.w	r1, r5, r3
   d6708:	bd30      	pop	{r4, r5, pc}
   d670a:	f1c4 040c 	rsb	r4, r4, #12
   d670e:	f1c4 0220 	rsb	r2, r4, #32
   d6712:	fa20 f002 	lsr.w	r0, r0, r2
   d6716:	fa01 f304 	lsl.w	r3, r1, r4
   d671a:	ea40 0003 	orr.w	r0, r0, r3
   d671e:	4629      	mov	r1, r5
   d6720:	bd30      	pop	{r4, r5, pc}
   d6722:	fa21 f004 	lsr.w	r0, r1, r4
   d6726:	4629      	mov	r1, r5
   d6728:	bd30      	pop	{r4, r5, pc}
   d672a:	f094 0f00 	teq	r4, #0
   d672e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6732:	bf06      	itte	eq
   d6734:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6738:	3401      	addeq	r4, #1
   d673a:	3d01      	subne	r5, #1
   d673c:	e74e      	b.n	d65dc <__adddf3+0x8c>
   d673e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6742:	bf18      	it	ne
   d6744:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6748:	d029      	beq.n	d679e <__adddf3+0x24e>
   d674a:	ea94 0f05 	teq	r4, r5
   d674e:	bf08      	it	eq
   d6750:	ea90 0f02 	teqeq	r0, r2
   d6754:	d005      	beq.n	d6762 <__adddf3+0x212>
   d6756:	ea54 0c00 	orrs.w	ip, r4, r0
   d675a:	bf04      	itt	eq
   d675c:	4619      	moveq	r1, r3
   d675e:	4610      	moveq	r0, r2
   d6760:	bd30      	pop	{r4, r5, pc}
   d6762:	ea91 0f03 	teq	r1, r3
   d6766:	bf1e      	ittt	ne
   d6768:	2100      	movne	r1, #0
   d676a:	2000      	movne	r0, #0
   d676c:	bd30      	popne	{r4, r5, pc}
   d676e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6772:	d105      	bne.n	d6780 <__adddf3+0x230>
   d6774:	0040      	lsls	r0, r0, #1
   d6776:	4149      	adcs	r1, r1
   d6778:	bf28      	it	cs
   d677a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d677e:	bd30      	pop	{r4, r5, pc}
   d6780:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6784:	bf3c      	itt	cc
   d6786:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d678a:	bd30      	popcc	{r4, r5, pc}
   d678c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6790:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6794:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6798:	f04f 0000 	mov.w	r0, #0
   d679c:	bd30      	pop	{r4, r5, pc}
   d679e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d67a2:	bf1a      	itte	ne
   d67a4:	4619      	movne	r1, r3
   d67a6:	4610      	movne	r0, r2
   d67a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d67ac:	bf1c      	itt	ne
   d67ae:	460b      	movne	r3, r1
   d67b0:	4602      	movne	r2, r0
   d67b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d67b6:	bf06      	itte	eq
   d67b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d67bc:	ea91 0f03 	teqeq	r1, r3
   d67c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d67c4:	bd30      	pop	{r4, r5, pc}
   d67c6:	bf00      	nop

000d67c8 <__aeabi_ui2d>:
   d67c8:	f090 0f00 	teq	r0, #0
   d67cc:	bf04      	itt	eq
   d67ce:	2100      	moveq	r1, #0
   d67d0:	4770      	bxeq	lr
   d67d2:	b530      	push	{r4, r5, lr}
   d67d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d67d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d67dc:	f04f 0500 	mov.w	r5, #0
   d67e0:	f04f 0100 	mov.w	r1, #0
   d67e4:	e750      	b.n	d6688 <__adddf3+0x138>
   d67e6:	bf00      	nop

000d67e8 <__aeabi_i2d>:
   d67e8:	f090 0f00 	teq	r0, #0
   d67ec:	bf04      	itt	eq
   d67ee:	2100      	moveq	r1, #0
   d67f0:	4770      	bxeq	lr
   d67f2:	b530      	push	{r4, r5, lr}
   d67f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d67f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d67fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6800:	bf48      	it	mi
   d6802:	4240      	negmi	r0, r0
   d6804:	f04f 0100 	mov.w	r1, #0
   d6808:	e73e      	b.n	d6688 <__adddf3+0x138>
   d680a:	bf00      	nop

000d680c <__aeabi_f2d>:
   d680c:	0042      	lsls	r2, r0, #1
   d680e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6812:	ea4f 0131 	mov.w	r1, r1, rrx
   d6816:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d681a:	bf1f      	itttt	ne
   d681c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6820:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6824:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6828:	4770      	bxne	lr
   d682a:	f092 0f00 	teq	r2, #0
   d682e:	bf14      	ite	ne
   d6830:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6834:	4770      	bxeq	lr
   d6836:	b530      	push	{r4, r5, lr}
   d6838:	f44f 7460 	mov.w	r4, #896	; 0x380
   d683c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6840:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6844:	e720      	b.n	d6688 <__adddf3+0x138>
   d6846:	bf00      	nop

000d6848 <__aeabi_ul2d>:
   d6848:	ea50 0201 	orrs.w	r2, r0, r1
   d684c:	bf08      	it	eq
   d684e:	4770      	bxeq	lr
   d6850:	b530      	push	{r4, r5, lr}
   d6852:	f04f 0500 	mov.w	r5, #0
   d6856:	e00a      	b.n	d686e <__aeabi_l2d+0x16>

000d6858 <__aeabi_l2d>:
   d6858:	ea50 0201 	orrs.w	r2, r0, r1
   d685c:	bf08      	it	eq
   d685e:	4770      	bxeq	lr
   d6860:	b530      	push	{r4, r5, lr}
   d6862:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6866:	d502      	bpl.n	d686e <__aeabi_l2d+0x16>
   d6868:	4240      	negs	r0, r0
   d686a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d686e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6872:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6876:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d687a:	f43f aedc 	beq.w	d6636 <__adddf3+0xe6>
   d687e:	f04f 0203 	mov.w	r2, #3
   d6882:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6886:	bf18      	it	ne
   d6888:	3203      	addne	r2, #3
   d688a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d688e:	bf18      	it	ne
   d6890:	3203      	addne	r2, #3
   d6892:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6896:	f1c2 0320 	rsb	r3, r2, #32
   d689a:	fa00 fc03 	lsl.w	ip, r0, r3
   d689e:	fa20 f002 	lsr.w	r0, r0, r2
   d68a2:	fa01 fe03 	lsl.w	lr, r1, r3
   d68a6:	ea40 000e 	orr.w	r0, r0, lr
   d68aa:	fa21 f102 	lsr.w	r1, r1, r2
   d68ae:	4414      	add	r4, r2
   d68b0:	e6c1      	b.n	d6636 <__adddf3+0xe6>
   d68b2:	bf00      	nop

000d68b4 <__aeabi_dmul>:
   d68b4:	b570      	push	{r4, r5, r6, lr}
   d68b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d68ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d68be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d68c2:	bf1d      	ittte	ne
   d68c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d68c8:	ea94 0f0c 	teqne	r4, ip
   d68cc:	ea95 0f0c 	teqne	r5, ip
   d68d0:	f000 f8de 	bleq	d6a90 <__aeabi_dmul+0x1dc>
   d68d4:	442c      	add	r4, r5
   d68d6:	ea81 0603 	eor.w	r6, r1, r3
   d68da:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d68de:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d68e2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d68e6:	bf18      	it	ne
   d68e8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d68ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d68f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d68f4:	d038      	beq.n	d6968 <__aeabi_dmul+0xb4>
   d68f6:	fba0 ce02 	umull	ip, lr, r0, r2
   d68fa:	f04f 0500 	mov.w	r5, #0
   d68fe:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6902:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6906:	fbe0 e503 	umlal	lr, r5, r0, r3
   d690a:	f04f 0600 	mov.w	r6, #0
   d690e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6912:	f09c 0f00 	teq	ip, #0
   d6916:	bf18      	it	ne
   d6918:	f04e 0e01 	orrne.w	lr, lr, #1
   d691c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6920:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6924:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6928:	d204      	bcs.n	d6934 <__aeabi_dmul+0x80>
   d692a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d692e:	416d      	adcs	r5, r5
   d6930:	eb46 0606 	adc.w	r6, r6, r6
   d6934:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6938:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d693c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6940:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6944:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6948:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d694c:	bf88      	it	hi
   d694e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6952:	d81e      	bhi.n	d6992 <__aeabi_dmul+0xde>
   d6954:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6958:	bf08      	it	eq
   d695a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d695e:	f150 0000 	adcs.w	r0, r0, #0
   d6962:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6966:	bd70      	pop	{r4, r5, r6, pc}
   d6968:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d696c:	ea46 0101 	orr.w	r1, r6, r1
   d6970:	ea40 0002 	orr.w	r0, r0, r2
   d6974:	ea81 0103 	eor.w	r1, r1, r3
   d6978:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d697c:	bfc2      	ittt	gt
   d697e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6982:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6986:	bd70      	popgt	{r4, r5, r6, pc}
   d6988:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d698c:	f04f 0e00 	mov.w	lr, #0
   d6990:	3c01      	subs	r4, #1
   d6992:	f300 80ab 	bgt.w	d6aec <__aeabi_dmul+0x238>
   d6996:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d699a:	bfde      	ittt	le
   d699c:	2000      	movle	r0, #0
   d699e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d69a2:	bd70      	pople	{r4, r5, r6, pc}
   d69a4:	f1c4 0400 	rsb	r4, r4, #0
   d69a8:	3c20      	subs	r4, #32
   d69aa:	da35      	bge.n	d6a18 <__aeabi_dmul+0x164>
   d69ac:	340c      	adds	r4, #12
   d69ae:	dc1b      	bgt.n	d69e8 <__aeabi_dmul+0x134>
   d69b0:	f104 0414 	add.w	r4, r4, #20
   d69b4:	f1c4 0520 	rsb	r5, r4, #32
   d69b8:	fa00 f305 	lsl.w	r3, r0, r5
   d69bc:	fa20 f004 	lsr.w	r0, r0, r4
   d69c0:	fa01 f205 	lsl.w	r2, r1, r5
   d69c4:	ea40 0002 	orr.w	r0, r0, r2
   d69c8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d69cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d69d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d69d4:	fa21 f604 	lsr.w	r6, r1, r4
   d69d8:	eb42 0106 	adc.w	r1, r2, r6
   d69dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d69e0:	bf08      	it	eq
   d69e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d69e6:	bd70      	pop	{r4, r5, r6, pc}
   d69e8:	f1c4 040c 	rsb	r4, r4, #12
   d69ec:	f1c4 0520 	rsb	r5, r4, #32
   d69f0:	fa00 f304 	lsl.w	r3, r0, r4
   d69f4:	fa20 f005 	lsr.w	r0, r0, r5
   d69f8:	fa01 f204 	lsl.w	r2, r1, r4
   d69fc:	ea40 0002 	orr.w	r0, r0, r2
   d6a00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6a04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6a08:	f141 0100 	adc.w	r1, r1, #0
   d6a0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6a10:	bf08      	it	eq
   d6a12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6a16:	bd70      	pop	{r4, r5, r6, pc}
   d6a18:	f1c4 0520 	rsb	r5, r4, #32
   d6a1c:	fa00 f205 	lsl.w	r2, r0, r5
   d6a20:	ea4e 0e02 	orr.w	lr, lr, r2
   d6a24:	fa20 f304 	lsr.w	r3, r0, r4
   d6a28:	fa01 f205 	lsl.w	r2, r1, r5
   d6a2c:	ea43 0302 	orr.w	r3, r3, r2
   d6a30:	fa21 f004 	lsr.w	r0, r1, r4
   d6a34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6a38:	fa21 f204 	lsr.w	r2, r1, r4
   d6a3c:	ea20 0002 	bic.w	r0, r0, r2
   d6a40:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6a44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6a48:	bf08      	it	eq
   d6a4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6a4e:	bd70      	pop	{r4, r5, r6, pc}
   d6a50:	f094 0f00 	teq	r4, #0
   d6a54:	d10f      	bne.n	d6a76 <__aeabi_dmul+0x1c2>
   d6a56:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6a5a:	0040      	lsls	r0, r0, #1
   d6a5c:	eb41 0101 	adc.w	r1, r1, r1
   d6a60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6a64:	bf08      	it	eq
   d6a66:	3c01      	subeq	r4, #1
   d6a68:	d0f7      	beq.n	d6a5a <__aeabi_dmul+0x1a6>
   d6a6a:	ea41 0106 	orr.w	r1, r1, r6
   d6a6e:	f095 0f00 	teq	r5, #0
   d6a72:	bf18      	it	ne
   d6a74:	4770      	bxne	lr
   d6a76:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6a7a:	0052      	lsls	r2, r2, #1
   d6a7c:	eb43 0303 	adc.w	r3, r3, r3
   d6a80:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6a84:	bf08      	it	eq
   d6a86:	3d01      	subeq	r5, #1
   d6a88:	d0f7      	beq.n	d6a7a <__aeabi_dmul+0x1c6>
   d6a8a:	ea43 0306 	orr.w	r3, r3, r6
   d6a8e:	4770      	bx	lr
   d6a90:	ea94 0f0c 	teq	r4, ip
   d6a94:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6a98:	bf18      	it	ne
   d6a9a:	ea95 0f0c 	teqne	r5, ip
   d6a9e:	d00c      	beq.n	d6aba <__aeabi_dmul+0x206>
   d6aa0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6aa4:	bf18      	it	ne
   d6aa6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6aaa:	d1d1      	bne.n	d6a50 <__aeabi_dmul+0x19c>
   d6aac:	ea81 0103 	eor.w	r1, r1, r3
   d6ab0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6ab4:	f04f 0000 	mov.w	r0, #0
   d6ab8:	bd70      	pop	{r4, r5, r6, pc}
   d6aba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6abe:	bf06      	itte	eq
   d6ac0:	4610      	moveq	r0, r2
   d6ac2:	4619      	moveq	r1, r3
   d6ac4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6ac8:	d019      	beq.n	d6afe <__aeabi_dmul+0x24a>
   d6aca:	ea94 0f0c 	teq	r4, ip
   d6ace:	d102      	bne.n	d6ad6 <__aeabi_dmul+0x222>
   d6ad0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6ad4:	d113      	bne.n	d6afe <__aeabi_dmul+0x24a>
   d6ad6:	ea95 0f0c 	teq	r5, ip
   d6ada:	d105      	bne.n	d6ae8 <__aeabi_dmul+0x234>
   d6adc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6ae0:	bf1c      	itt	ne
   d6ae2:	4610      	movne	r0, r2
   d6ae4:	4619      	movne	r1, r3
   d6ae6:	d10a      	bne.n	d6afe <__aeabi_dmul+0x24a>
   d6ae8:	ea81 0103 	eor.w	r1, r1, r3
   d6aec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6af0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6af4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6af8:	f04f 0000 	mov.w	r0, #0
   d6afc:	bd70      	pop	{r4, r5, r6, pc}
   d6afe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6b02:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6b06:	bd70      	pop	{r4, r5, r6, pc}

000d6b08 <__aeabi_ddiv>:
   d6b08:	b570      	push	{r4, r5, r6, lr}
   d6b0a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6b0e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6b12:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6b16:	bf1d      	ittte	ne
   d6b18:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6b1c:	ea94 0f0c 	teqne	r4, ip
   d6b20:	ea95 0f0c 	teqne	r5, ip
   d6b24:	f000 f8a7 	bleq	d6c76 <__aeabi_ddiv+0x16e>
   d6b28:	eba4 0405 	sub.w	r4, r4, r5
   d6b2c:	ea81 0e03 	eor.w	lr, r1, r3
   d6b30:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6b34:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6b38:	f000 8088 	beq.w	d6c4c <__aeabi_ddiv+0x144>
   d6b3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6b40:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6b44:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6b48:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6b4c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6b50:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6b54:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6b58:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6b5c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6b60:	429d      	cmp	r5, r3
   d6b62:	bf08      	it	eq
   d6b64:	4296      	cmpeq	r6, r2
   d6b66:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6b6a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6b6e:	d202      	bcs.n	d6b76 <__aeabi_ddiv+0x6e>
   d6b70:	085b      	lsrs	r3, r3, #1
   d6b72:	ea4f 0232 	mov.w	r2, r2, rrx
   d6b76:	1ab6      	subs	r6, r6, r2
   d6b78:	eb65 0503 	sbc.w	r5, r5, r3
   d6b7c:	085b      	lsrs	r3, r3, #1
   d6b7e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6b82:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6b86:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6b8a:	ebb6 0e02 	subs.w	lr, r6, r2
   d6b8e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6b92:	bf22      	ittt	cs
   d6b94:	1ab6      	subcs	r6, r6, r2
   d6b96:	4675      	movcs	r5, lr
   d6b98:	ea40 000c 	orrcs.w	r0, r0, ip
   d6b9c:	085b      	lsrs	r3, r3, #1
   d6b9e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6ba2:	ebb6 0e02 	subs.w	lr, r6, r2
   d6ba6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6baa:	bf22      	ittt	cs
   d6bac:	1ab6      	subcs	r6, r6, r2
   d6bae:	4675      	movcs	r5, lr
   d6bb0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6bb4:	085b      	lsrs	r3, r3, #1
   d6bb6:	ea4f 0232 	mov.w	r2, r2, rrx
   d6bba:	ebb6 0e02 	subs.w	lr, r6, r2
   d6bbe:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6bc2:	bf22      	ittt	cs
   d6bc4:	1ab6      	subcs	r6, r6, r2
   d6bc6:	4675      	movcs	r5, lr
   d6bc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6bcc:	085b      	lsrs	r3, r3, #1
   d6bce:	ea4f 0232 	mov.w	r2, r2, rrx
   d6bd2:	ebb6 0e02 	subs.w	lr, r6, r2
   d6bd6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6bda:	bf22      	ittt	cs
   d6bdc:	1ab6      	subcs	r6, r6, r2
   d6bde:	4675      	movcs	r5, lr
   d6be0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6be4:	ea55 0e06 	orrs.w	lr, r5, r6
   d6be8:	d018      	beq.n	d6c1c <__aeabi_ddiv+0x114>
   d6bea:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6bee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6bf2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6bf6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6bfa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6bfe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6c02:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6c06:	d1c0      	bne.n	d6b8a <__aeabi_ddiv+0x82>
   d6c08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6c0c:	d10b      	bne.n	d6c26 <__aeabi_ddiv+0x11e>
   d6c0e:	ea41 0100 	orr.w	r1, r1, r0
   d6c12:	f04f 0000 	mov.w	r0, #0
   d6c16:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6c1a:	e7b6      	b.n	d6b8a <__aeabi_ddiv+0x82>
   d6c1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6c20:	bf04      	itt	eq
   d6c22:	4301      	orreq	r1, r0
   d6c24:	2000      	moveq	r0, #0
   d6c26:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6c2a:	bf88      	it	hi
   d6c2c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6c30:	f63f aeaf 	bhi.w	d6992 <__aeabi_dmul+0xde>
   d6c34:	ebb5 0c03 	subs.w	ip, r5, r3
   d6c38:	bf04      	itt	eq
   d6c3a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6c3e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6c42:	f150 0000 	adcs.w	r0, r0, #0
   d6c46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6c4a:	bd70      	pop	{r4, r5, r6, pc}
   d6c4c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6c50:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6c54:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6c58:	bfc2      	ittt	gt
   d6c5a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6c5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6c62:	bd70      	popgt	{r4, r5, r6, pc}
   d6c64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6c68:	f04f 0e00 	mov.w	lr, #0
   d6c6c:	3c01      	subs	r4, #1
   d6c6e:	e690      	b.n	d6992 <__aeabi_dmul+0xde>
   d6c70:	ea45 0e06 	orr.w	lr, r5, r6
   d6c74:	e68d      	b.n	d6992 <__aeabi_dmul+0xde>
   d6c76:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6c7a:	ea94 0f0c 	teq	r4, ip
   d6c7e:	bf08      	it	eq
   d6c80:	ea95 0f0c 	teqeq	r5, ip
   d6c84:	f43f af3b 	beq.w	d6afe <__aeabi_dmul+0x24a>
   d6c88:	ea94 0f0c 	teq	r4, ip
   d6c8c:	d10a      	bne.n	d6ca4 <__aeabi_ddiv+0x19c>
   d6c8e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6c92:	f47f af34 	bne.w	d6afe <__aeabi_dmul+0x24a>
   d6c96:	ea95 0f0c 	teq	r5, ip
   d6c9a:	f47f af25 	bne.w	d6ae8 <__aeabi_dmul+0x234>
   d6c9e:	4610      	mov	r0, r2
   d6ca0:	4619      	mov	r1, r3
   d6ca2:	e72c      	b.n	d6afe <__aeabi_dmul+0x24a>
   d6ca4:	ea95 0f0c 	teq	r5, ip
   d6ca8:	d106      	bne.n	d6cb8 <__aeabi_ddiv+0x1b0>
   d6caa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6cae:	f43f aefd 	beq.w	d6aac <__aeabi_dmul+0x1f8>
   d6cb2:	4610      	mov	r0, r2
   d6cb4:	4619      	mov	r1, r3
   d6cb6:	e722      	b.n	d6afe <__aeabi_dmul+0x24a>
   d6cb8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6cbc:	bf18      	it	ne
   d6cbe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6cc2:	f47f aec5 	bne.w	d6a50 <__aeabi_dmul+0x19c>
   d6cc6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6cca:	f47f af0d 	bne.w	d6ae8 <__aeabi_dmul+0x234>
   d6cce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6cd2:	f47f aeeb 	bne.w	d6aac <__aeabi_dmul+0x1f8>
   d6cd6:	e712      	b.n	d6afe <__aeabi_dmul+0x24a>

000d6cd8 <__gedf2>:
   d6cd8:	f04f 3cff 	mov.w	ip, #4294967295
   d6cdc:	e006      	b.n	d6cec <__cmpdf2+0x4>
   d6cde:	bf00      	nop

000d6ce0 <__ledf2>:
   d6ce0:	f04f 0c01 	mov.w	ip, #1
   d6ce4:	e002      	b.n	d6cec <__cmpdf2+0x4>
   d6ce6:	bf00      	nop

000d6ce8 <__cmpdf2>:
   d6ce8:	f04f 0c01 	mov.w	ip, #1
   d6cec:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6cf0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6cf4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6cf8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6cfc:	bf18      	it	ne
   d6cfe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6d02:	d01b      	beq.n	d6d3c <__cmpdf2+0x54>
   d6d04:	b001      	add	sp, #4
   d6d06:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6d0a:	bf0c      	ite	eq
   d6d0c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6d10:	ea91 0f03 	teqne	r1, r3
   d6d14:	bf02      	ittt	eq
   d6d16:	ea90 0f02 	teqeq	r0, r2
   d6d1a:	2000      	moveq	r0, #0
   d6d1c:	4770      	bxeq	lr
   d6d1e:	f110 0f00 	cmn.w	r0, #0
   d6d22:	ea91 0f03 	teq	r1, r3
   d6d26:	bf58      	it	pl
   d6d28:	4299      	cmppl	r1, r3
   d6d2a:	bf08      	it	eq
   d6d2c:	4290      	cmpeq	r0, r2
   d6d2e:	bf2c      	ite	cs
   d6d30:	17d8      	asrcs	r0, r3, #31
   d6d32:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6d36:	f040 0001 	orr.w	r0, r0, #1
   d6d3a:	4770      	bx	lr
   d6d3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6d40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6d44:	d102      	bne.n	d6d4c <__cmpdf2+0x64>
   d6d46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6d4a:	d107      	bne.n	d6d5c <__cmpdf2+0x74>
   d6d4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6d50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6d54:	d1d6      	bne.n	d6d04 <__cmpdf2+0x1c>
   d6d56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6d5a:	d0d3      	beq.n	d6d04 <__cmpdf2+0x1c>
   d6d5c:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6d60:	4770      	bx	lr
   d6d62:	bf00      	nop

000d6d64 <__aeabi_cdrcmple>:
   d6d64:	4684      	mov	ip, r0
   d6d66:	4610      	mov	r0, r2
   d6d68:	4662      	mov	r2, ip
   d6d6a:	468c      	mov	ip, r1
   d6d6c:	4619      	mov	r1, r3
   d6d6e:	4663      	mov	r3, ip
   d6d70:	e000      	b.n	d6d74 <__aeabi_cdcmpeq>
   d6d72:	bf00      	nop

000d6d74 <__aeabi_cdcmpeq>:
   d6d74:	b501      	push	{r0, lr}
   d6d76:	f7ff ffb7 	bl	d6ce8 <__cmpdf2>
   d6d7a:	2800      	cmp	r0, #0
   d6d7c:	bf48      	it	mi
   d6d7e:	f110 0f00 	cmnmi.w	r0, #0
   d6d82:	bd01      	pop	{r0, pc}

000d6d84 <__aeabi_dcmpeq>:
   d6d84:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6d88:	f7ff fff4 	bl	d6d74 <__aeabi_cdcmpeq>
   d6d8c:	bf0c      	ite	eq
   d6d8e:	2001      	moveq	r0, #1
   d6d90:	2000      	movne	r0, #0
   d6d92:	f85d fb08 	ldr.w	pc, [sp], #8
   d6d96:	bf00      	nop

000d6d98 <__aeabi_dcmplt>:
   d6d98:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6d9c:	f7ff ffea 	bl	d6d74 <__aeabi_cdcmpeq>
   d6da0:	bf34      	ite	cc
   d6da2:	2001      	movcc	r0, #1
   d6da4:	2000      	movcs	r0, #0
   d6da6:	f85d fb08 	ldr.w	pc, [sp], #8
   d6daa:	bf00      	nop

000d6dac <__aeabi_dcmple>:
   d6dac:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6db0:	f7ff ffe0 	bl	d6d74 <__aeabi_cdcmpeq>
   d6db4:	bf94      	ite	ls
   d6db6:	2001      	movls	r0, #1
   d6db8:	2000      	movhi	r0, #0
   d6dba:	f85d fb08 	ldr.w	pc, [sp], #8
   d6dbe:	bf00      	nop

000d6dc0 <__aeabi_dcmpge>:
   d6dc0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6dc4:	f7ff ffce 	bl	d6d64 <__aeabi_cdrcmple>
   d6dc8:	bf94      	ite	ls
   d6dca:	2001      	movls	r0, #1
   d6dcc:	2000      	movhi	r0, #0
   d6dce:	f85d fb08 	ldr.w	pc, [sp], #8
   d6dd2:	bf00      	nop

000d6dd4 <__aeabi_dcmpgt>:
   d6dd4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6dd8:	f7ff ffc4 	bl	d6d64 <__aeabi_cdrcmple>
   d6ddc:	bf34      	ite	cc
   d6dde:	2001      	movcc	r0, #1
   d6de0:	2000      	movcs	r0, #0
   d6de2:	f85d fb08 	ldr.w	pc, [sp], #8
   d6de6:	bf00      	nop

000d6de8 <__aeabi_dcmpun>:
   d6de8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6dec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6df0:	d102      	bne.n	d6df8 <__aeabi_dcmpun+0x10>
   d6df2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6df6:	d10a      	bne.n	d6e0e <__aeabi_dcmpun+0x26>
   d6df8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6dfc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6e00:	d102      	bne.n	d6e08 <__aeabi_dcmpun+0x20>
   d6e02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6e06:	d102      	bne.n	d6e0e <__aeabi_dcmpun+0x26>
   d6e08:	f04f 0000 	mov.w	r0, #0
   d6e0c:	4770      	bx	lr
   d6e0e:	f04f 0001 	mov.w	r0, #1
   d6e12:	4770      	bx	lr

000d6e14 <__aeabi_d2iz>:
   d6e14:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6e18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6e1c:	d215      	bcs.n	d6e4a <__aeabi_d2iz+0x36>
   d6e1e:	d511      	bpl.n	d6e44 <__aeabi_d2iz+0x30>
   d6e20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6e24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6e28:	d912      	bls.n	d6e50 <__aeabi_d2iz+0x3c>
   d6e2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6e2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6e32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6e36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6e3a:	fa23 f002 	lsr.w	r0, r3, r2
   d6e3e:	bf18      	it	ne
   d6e40:	4240      	negne	r0, r0
   d6e42:	4770      	bx	lr
   d6e44:	f04f 0000 	mov.w	r0, #0
   d6e48:	4770      	bx	lr
   d6e4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6e4e:	d105      	bne.n	d6e5c <__aeabi_d2iz+0x48>
   d6e50:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d6e54:	bf08      	it	eq
   d6e56:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6e5a:	4770      	bx	lr
   d6e5c:	f04f 0000 	mov.w	r0, #0
   d6e60:	4770      	bx	lr
   d6e62:	bf00      	nop

000d6e64 <__aeabi_d2uiz>:
   d6e64:	004a      	lsls	r2, r1, #1
   d6e66:	d211      	bcs.n	d6e8c <__aeabi_d2uiz+0x28>
   d6e68:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6e6c:	d211      	bcs.n	d6e92 <__aeabi_d2uiz+0x2e>
   d6e6e:	d50d      	bpl.n	d6e8c <__aeabi_d2uiz+0x28>
   d6e70:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6e74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6e78:	d40e      	bmi.n	d6e98 <__aeabi_d2uiz+0x34>
   d6e7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6e7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6e82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6e86:	fa23 f002 	lsr.w	r0, r3, r2
   d6e8a:	4770      	bx	lr
   d6e8c:	f04f 0000 	mov.w	r0, #0
   d6e90:	4770      	bx	lr
   d6e92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6e96:	d102      	bne.n	d6e9e <__aeabi_d2uiz+0x3a>
   d6e98:	f04f 30ff 	mov.w	r0, #4294967295
   d6e9c:	4770      	bx	lr
   d6e9e:	f04f 0000 	mov.w	r0, #0
   d6ea2:	4770      	bx	lr

000d6ea4 <__aeabi_d2f>:
   d6ea4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6ea8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6eac:	bf24      	itt	cs
   d6eae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6eb2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d6eb6:	d90d      	bls.n	d6ed4 <__aeabi_d2f+0x30>
   d6eb8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6ebc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6ec0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6ec4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6ec8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6ecc:	bf08      	it	eq
   d6ece:	f020 0001 	biceq.w	r0, r0, #1
   d6ed2:	4770      	bx	lr
   d6ed4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6ed8:	d121      	bne.n	d6f1e <__aeabi_d2f+0x7a>
   d6eda:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d6ede:	bfbc      	itt	lt
   d6ee0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6ee4:	4770      	bxlt	lr
   d6ee6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6eea:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d6eee:	f1c2 0218 	rsb	r2, r2, #24
   d6ef2:	f1c2 0c20 	rsb	ip, r2, #32
   d6ef6:	fa10 f30c 	lsls.w	r3, r0, ip
   d6efa:	fa20 f002 	lsr.w	r0, r0, r2
   d6efe:	bf18      	it	ne
   d6f00:	f040 0001 	orrne.w	r0, r0, #1
   d6f04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6f08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6f0c:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6f10:	ea40 000c 	orr.w	r0, r0, ip
   d6f14:	fa23 f302 	lsr.w	r3, r3, r2
   d6f18:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6f1c:	e7cc      	b.n	d6eb8 <__aeabi_d2f+0x14>
   d6f1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d6f22:	d107      	bne.n	d6f34 <__aeabi_d2f+0x90>
   d6f24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6f28:	bf1e      	ittt	ne
   d6f2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6f2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d6f32:	4770      	bxne	lr
   d6f34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6f38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6f3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6f40:	4770      	bx	lr
   d6f42:	bf00      	nop

000d6f44 <__cxa_atexit>:
   d6f44:	b510      	push	{r4, lr}
   d6f46:	4c05      	ldr	r4, [pc, #20]	; (d6f5c <__cxa_atexit+0x18>)
   d6f48:	4613      	mov	r3, r2
   d6f4a:	b12c      	cbz	r4, d6f58 <__cxa_atexit+0x14>
   d6f4c:	460a      	mov	r2, r1
   d6f4e:	4601      	mov	r1, r0
   d6f50:	2002      	movs	r0, #2
   d6f52:	f3af 8000 	nop.w
   d6f56:	bd10      	pop	{r4, pc}
   d6f58:	4620      	mov	r0, r4
   d6f5a:	bd10      	pop	{r4, pc}
   d6f5c:	00000000 	.word	0x00000000

000d6f60 <memcpy>:
   d6f60:	b510      	push	{r4, lr}
   d6f62:	1e43      	subs	r3, r0, #1
   d6f64:	440a      	add	r2, r1
   d6f66:	4291      	cmp	r1, r2
   d6f68:	d004      	beq.n	d6f74 <memcpy+0x14>
   d6f6a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6f6e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6f72:	e7f8      	b.n	d6f66 <memcpy+0x6>
   d6f74:	bd10      	pop	{r4, pc}

000d6f76 <memset>:
   d6f76:	4402      	add	r2, r0
   d6f78:	4603      	mov	r3, r0
   d6f7a:	4293      	cmp	r3, r2
   d6f7c:	d002      	beq.n	d6f84 <memset+0xe>
   d6f7e:	f803 1b01 	strb.w	r1, [r3], #1
   d6f82:	e7fa      	b.n	d6f7a <memset+0x4>
   d6f84:	4770      	bx	lr
	...

000d6f88 <srand>:
   d6f88:	b538      	push	{r3, r4, r5, lr}
   d6f8a:	4b12      	ldr	r3, [pc, #72]	; (d6fd4 <srand+0x4c>)
   d6f8c:	681c      	ldr	r4, [r3, #0]
   d6f8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6f90:	4605      	mov	r5, r0
   d6f92:	b9d3      	cbnz	r3, d6fca <srand+0x42>
   d6f94:	2018      	movs	r0, #24
   d6f96:	f7fd ffb1 	bl	d4efc <malloc>
   d6f9a:	f243 330e 	movw	r3, #13070	; 0x330e
   d6f9e:	63a0      	str	r0, [r4, #56]	; 0x38
   d6fa0:	8003      	strh	r3, [r0, #0]
   d6fa2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6fa6:	8043      	strh	r3, [r0, #2]
   d6fa8:	f241 2334 	movw	r3, #4660	; 0x1234
   d6fac:	8083      	strh	r3, [r0, #4]
   d6fae:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6fb2:	80c3      	strh	r3, [r0, #6]
   d6fb4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6fb8:	8103      	strh	r3, [r0, #8]
   d6fba:	2305      	movs	r3, #5
   d6fbc:	8143      	strh	r3, [r0, #10]
   d6fbe:	230b      	movs	r3, #11
   d6fc0:	8183      	strh	r3, [r0, #12]
   d6fc2:	2201      	movs	r2, #1
   d6fc4:	2300      	movs	r3, #0
   d6fc6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6fca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6fcc:	2200      	movs	r2, #0
   d6fce:	611d      	str	r5, [r3, #16]
   d6fd0:	615a      	str	r2, [r3, #20]
   d6fd2:	bd38      	pop	{r3, r4, r5, pc}
   d6fd4:	2003e320 	.word	0x2003e320

000d6fd8 <rand>:
   d6fd8:	4b19      	ldr	r3, [pc, #100]	; (d7040 <rand+0x68>)
   d6fda:	b510      	push	{r4, lr}
   d6fdc:	681c      	ldr	r4, [r3, #0]
   d6fde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6fe0:	b9d3      	cbnz	r3, d7018 <rand+0x40>
   d6fe2:	2018      	movs	r0, #24
   d6fe4:	f7fd ff8a 	bl	d4efc <malloc>
   d6fe8:	f243 330e 	movw	r3, #13070	; 0x330e
   d6fec:	63a0      	str	r0, [r4, #56]	; 0x38
   d6fee:	8003      	strh	r3, [r0, #0]
   d6ff0:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6ff4:	8043      	strh	r3, [r0, #2]
   d6ff6:	f241 2334 	movw	r3, #4660	; 0x1234
   d6ffa:	8083      	strh	r3, [r0, #4]
   d6ffc:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7000:	80c3      	strh	r3, [r0, #6]
   d7002:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7006:	8103      	strh	r3, [r0, #8]
   d7008:	2305      	movs	r3, #5
   d700a:	8143      	strh	r3, [r0, #10]
   d700c:	230b      	movs	r3, #11
   d700e:	8183      	strh	r3, [r0, #12]
   d7010:	2201      	movs	r2, #1
   d7012:	2300      	movs	r3, #0
   d7014:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7018:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d701a:	4c0a      	ldr	r4, [pc, #40]	; (d7044 <rand+0x6c>)
   d701c:	690b      	ldr	r3, [r1, #16]
   d701e:	6948      	ldr	r0, [r1, #20]
   d7020:	4a09      	ldr	r2, [pc, #36]	; (d7048 <rand+0x70>)
   d7022:	435c      	muls	r4, r3
   d7024:	fb02 4000 	mla	r0, r2, r0, r4
   d7028:	fba3 2302 	umull	r2, r3, r3, r2
   d702c:	3201      	adds	r2, #1
   d702e:	4403      	add	r3, r0
   d7030:	f143 0300 	adc.w	r3, r3, #0
   d7034:	e9c1 2304 	strd	r2, r3, [r1, #16]
   d7038:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d703c:	bd10      	pop	{r4, pc}
   d703e:	bf00      	nop
   d7040:	2003e320 	.word	0x2003e320
   d7044:	5851f42d 	.word	0x5851f42d
   d7048:	4c957f2d 	.word	0x4c957f2d

000d704c <strlen>:
   d704c:	4603      	mov	r3, r0
   d704e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7052:	2a00      	cmp	r2, #0
   d7054:	d1fb      	bne.n	d704e <strlen+0x2>
   d7056:	1a18      	subs	r0, r3, r0
   d7058:	3801      	subs	r0, #1
   d705a:	4770      	bx	lr

000d705c <dynalib_user>:
   d705c:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d706c:	0000 0000                                   ....

000d7070 <_ZL16test_cmd_options>:
   d7070:	2e3f 4f20 7470 6f69 736e 000a               ?. Options..

000d707c <_ZL15test_device_api>:
   d707c:	2e32 5420 7365 2074 6544 6976 6563 4120     2. Test Device A
   d708c:	4950 000a                                   PI..

000d7090 <_ZL14test_flash_cmd>:
   d7090:	2e31 5420 7365 2074 4545 5250 4d4f 000a     1. Test EEPROM..
   d70a0:	540a 7365 6974 676e 6620 616c 6873 003a     .Testing flash:.
   d70b0:	500a 6572 7373 6220 7475 6f74 206e 6f66     .Press button fo
   d70c0:	3a72 0020 5320 6365 6e6f 7364 0a00 6554     r: . Seconds..Te
   d70d0:	7473 6e69 2067 7542 7474 6e6f 003a          sting Button:.

000d70de <_ZL9test_fail>:
   d70de:	5245 4f52 0052                              ERROR.

000d70e4 <_ZL11test_header>:
   d70e4:	4749 2048 6853 6569 646c 5420 7365 0074     IGH Shield Test.

000d70f4 <_ZL12test_padding>:
   d70f4:	2a0a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     .***************
   d7104:	000a                                        ..

000d7106 <_ZL12test_success>:
   d7106:	4b4f 3300                                        OK.

000d7109 <_ZL17test_button_press>:
   d7109:	2e33 5420 7365 2074 7542 7474 6e6f 5020     3. Test Button P
   d7119:	6572 7373 000a 0fe0 68ce 759a 0547 9ae7     ress.....h.uG...
   d7129:	370e 6574 7473 622e 6f72 656b 2e72 6f63     .7test.broker.co
   d7139:	006d 0000                                        m..

000d713c <_ZTV5Timer>:
	...
   d7144:	46ad 000d 46f5 000d 4627 000d 550a 696e     .F...F..'F...Uni
   d7154:	2078 6954 656d 203a 2020 2020 0020 6c63     x Time:      .cl
   d7164:	756f 2064 7473 7461 7375 203a 2020 2020     oud status:     
   d7174:	6e00 7465 6f77 6b72 7320 6174 7574 3a73     .network status:
   d7184:	2020 0020 6973 6e67 6c61 7320 7274 6e65        .signal stren
   d7194:	7467 3a68 2020 7300 6769 616e 206c 7571     gth:  .signal qu
   d71a4:	6c61 7469 3a79 2020 0020 6142 7474 7265     ality:   .Batter
   d71b4:	2079 6f56 746c 6761 3a65 2020 4200 7461     y Voltage:  .Bat
   d71c4:	6574 7972 5320 434f 203a 2020 2020 0020     tery SOC:      .

000d71d4 <_ZTVN5spark13EthernetClassE>:
	...
   d71dc:	4f8b 000d 4f81 000d 4f77 000d 4f6d 000d     .O...O..wO..mO..
   d71ec:	4f61 000d 4f55 000d 4f49 000d 4f41 000d     aO..UO..IO..AO..
   d71fc:	4f37 000d 4f2d 000d 5f81 000d 616e 006e     7O..-O..._..nan.
   d720c:	766f 0066 002e 6e69 0066 6162 6475 5300     ovf...inf.baud.S
   d721c:	7265 6169 006c 6553 6972 6c61 0031 7974     erial.Serial1.ty
   d722c:	6570 7000 7261 6d61 6300 646d 6900 0064     pe.param.cmd.id.
   d723c:	6e68 0064 7473 6d72 6600 6c69 0074 766c     hnd.strm.filt.lv
   d724c:	006c 6461 4864 6e61 6c64 7265 7200 6d65     l.addHandler.rem
   d725c:	766f 4865 6e61 6c64 7265 6500 756e 486d     oveHandler.enumH
   d726c:	6e61 6c64 7265 0073 534a 4e4f 7453 6572     andlers.JSONStre
   d727c:	6d61 6f4c 4867 6e61 6c64 7265 6100 7070     amLogHandler.app
   d728c:	2500 3130 7530 0020 205d 2500 0064 202c     .%010u .] .%d., 
   d729c:	2800 3a29 0020 5b20 6300 646f 2065 203d     .(): . [.code = 
   d72ac:	2500 0069 6564 6174 6c69 2073 203d 0d00     .%i.details = ..
   d72bc:	000a 6e6c 6600 006e 6f63 6564 6400 7465     ..ln.fn.code.det
   d72cc:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   d72dc:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   d72ec:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
   d72fc:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   d730c:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d731c:	0065 0000                                   e...

000d7320 <_ZTV14CellularSignal>:
	...
   d7328:	4609 000d 466f 000d 54e1 000d 5571 000d     .F..oF...T..qU..
   d7338:	54e5 000d 553d 000d 5511 000d 55fb 000d     .T..=U...U...U..
   d7348:	fffc ffff 0000 0000 5625 000d               ........%V..

000d7354 <_ZTV9IPAddress>:
	...
   d735c:	5879 000d 5869 000d 586b 000d               yX..iX..kX..

000d7368 <_ZTV9USBSerial>:
	...
   d7370:	5951 000d 59a1 000d 59af 000d 51c5 000d     QY...Y...Y...Q..
   d7380:	598d 000d 5953 000d 5969 000d 599b 000d     .Y..SY..iY...Y..
   d7390:	597f 000d 594d 000d                         .Y..MY..

000d7398 <_ZTVN5spark13CellularClassE>:
	...
   d73a0:	5abb 000d 5ab1 000d 5aa7 000d 5a5d 000d     .Z...Z...Z..]Z..
   d73b0:	5a9b 000d 5a8f 000d 5a83 000d 5a7b 000d     .Z...Z...Z..{Z..
   d73c0:	5a71 000d 5a67 000d 5f81 000d               qZ..gZ..._..

000d73cc <_ZTV11USARTSerial>:
	...
   d73d4:	5b69 000d 5bb9 000d 5bc7 000d 51c5 000d     i[...[...[...Q..
   d73e4:	5b7d 000d 5b9f 000d 5b8b 000d 5bb3 000d     }[...[...[...[..
   d73f4:	5b6b 000d 5b6f 000d                         k[..o[..

000d73fc <_ZTV7TwoWire>:
	...
   d7404:	5c6d 000d 5cb7 000d 5c8f 000d 5c6f 000d     m\...\...\..o\..
   d7414:	5c97 000d 5c9f 000d 5ca7 000d 5caf 000d     .\...\...\...\..

000d7424 <_ZTVN5spark9MeshClassE>:
	...
   d742c:	5dfb 000d 5df1 000d 5de7 000d 5ddd 000d     .]...]...]...]..
   d743c:	5dd1 000d 5dc5 000d 5db9 000d 5db1 000d     .]...]...]...]..
   d744c:	5da7 000d 5d9d 000d 5f81 000d               .]...]..._..

000d7458 <_ZTVN5spark12NetworkClassE>:
	...
   d7460:	5f19 000d 5f23 000d 5f2d 000d 5f37 000d     ._..#_..-_..7_..
   d7470:	5f41 000d 5f4d 000d 5f59 000d 5f65 000d     A_..M_..Y_..e_..
   d7480:	5f6d 000d 5f77 000d 5f81 000d               m_..w_..._..

000d748c <_ZSt7nothrow>:
   d748c:	0000 0000                                   ....

000d7490 <__sf_fake_stdin>:
	...

000d74b0 <__sf_fake_stdout>:
	...

000d74d0 <__sf_fake_stderr>:
	...
   d74f0:	0043                                        C.

000d74f2 <link_const_variable_data_end>:
	...

000d74f4 <link_constructors_location>:
   d74f4:	000d40e5 	.word	0x000d40e5
   d74f8:	000d43b9 	.word	0x000d43b9
   d74fc:	000d4601 	.word	0x000d4601
   d7500:	000d4605 	.word	0x000d4605
   d7504:	000d4939 	.word	0x000d4939
   d7508:	000d4f95 	.word	0x000d4f95
   d750c:	000d4fe1 	.word	0x000d4fe1
   d7510:	000d519d 	.word	0x000d519d
   d7514:	000d5429 	.word	0x000d5429
   d7518:	000d54a5 	.word	0x000d54a5
   d751c:	000d54c5 	.word	0x000d54c5
   d7520:	000d5b39 	.word	0x000d5b39
   d7524:	000d5ec9 	.word	0x000d5ec9
   d7528:	000d604d 	.word	0x000d604d
   d752c:	000d62b5 	.word	0x000d62b5
   d7530:	000d6339 	.word	0x000d6339
   d7534:	000d63fd 	.word	0x000d63fd
   d7538:	000d64c1 	.word	0x000d64c1

000d753c <link_constructors_end>:
   d753c:	00000000 	.word	0x00000000
