
c:/Users/Clarence.Alucho/Documents/git/igh/igh_shield/target/1.5.2/boron/igh_shield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005804  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9820  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003dd94  000d9824  0001dd94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000009f4  2003ddfc  2003ddfc  0002ddfc  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d988c  000d988c  0002988c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d98b4  000d98b4  000298b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0019db0d  00000000  00000000  000298b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000222de  00000000  00000000  001c73c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002df25  00000000  00000000  001e96a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000032d8  00000000  00000000  002175c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005f40  00000000  00000000  0021a8a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00053593  00000000  00000000  002207e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0005fd88  00000000  00000000  00273d73  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00110d28  00000000  00000000  002d3afb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000f520  00000000  00000000  003e4824  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f005 f862 	bl	d90f6 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f005 f867 	bl	d910c <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003dd94 	.word	0x2003dd94
   d4048:	000d9824 	.word	0x000d9824
   d404c:	2003ddfc 	.word	0x2003ddfc
   d4050:	2003ddfc 	.word	0x2003ddfc
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f003 fc95 	bl	d7988 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d9814 	.word	0x000d9814
   d4080:	000d9784 	.word	0x000d9784

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b820 	b.w	d40c8 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f828 	bl	d40de <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f003 bc3b 	b.w	d790c <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f002 bef7 	b.w	d6e88 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f002 bef5 	b.w	d6e88 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <igh_settings_calculate_checksum>:
 * struct must have a single byte at the end designated for the checksum for this to work
 * \param p_struct: pointer to data struct, total_bytes: sizeof(data struct)
 * \return the checksum
 */
uint8_t igh_settings_calculate_checksum(void * p_struct, size_t total_bytes)
{
   d40ae:	b510      	push	{r4, lr}
    data = (uint8_t *)p_struct;

    // uint8_t data_buffer[length];
    // memcpy(data_buffer, data, length);

    data += 1; // ignore checksum byte
   d40b0:	1c42      	adds	r2, r0, #1
 */
uint8_t igh_settings_calculate_checksum(void * p_struct, size_t total_bytes)
{
    uint8_t length = (uint8_t)total_bytes; 
    uint8_t * data;
    int sum = 0;
   d40b2:	2300      	movs	r3, #0
    // uint8_t data_buffer[length];
    // memcpy(data_buffer, data, length);

    data += 1; // ignore checksum byte
    // start at 1 to ignore the checksum byte
    for( int i = 1; i < length; i++)
   d40b4:	b2c9      	uxtb	r1, r1
   d40b6:	1a14      	subs	r4, r2, r0
   d40b8:	42a1      	cmp	r1, r4
   d40ba:	dd03      	ble.n	d40c4 <igh_settings_calculate_checksum+0x16>
    {
        sum += (0xFF & *data++);
   d40bc:	f812 4b01 	ldrb.w	r4, [r2], #1
   d40c0:	4423      	add	r3, r4
   d40c2:	e7f8      	b.n	d40b6 <igh_settings_calculate_checksum+0x8>
    }

    checksum = (uint8_t)(sum % 256);

    return checksum;
}
   d40c4:	b2d8      	uxtb	r0, r3
   d40c6:	bd10      	pop	{r4, pc}

000d40c8 <setup>:
#endif

SYSTEM_THREAD(ENABLED);

void setup() 
{
   d40c8:	b508      	push	{r3, lr}
    igh_hardware_setup();
   d40ca:	f000 fbc5 	bl	d4858 <_Z18igh_hardware_setupv>
#ifdef TEST_MODE
    // go into test mode
    igh_log_begin();
   d40ce:	f000 f85d 	bl	d418c <_Z13igh_log_beginv>
#endif
    igh_boron_setup();
   d40d2:	f000 fc9f 	bl	d4a14 <_Z15igh_boron_setupv>
    igh_sd_log_setup();
}
   d40d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#ifdef TEST_MODE
    // go into test mode
    igh_log_begin();
#endif
    igh_boron_setup();
    igh_sd_log_setup();
   d40da:	f000 bde9 	b.w	d4cb0 <_Z16igh_sd_log_setupv>

000d40de <loop>:
}

void loop() 
{
   d40de:	b508      	push	{r3, lr}
#ifdef TEST_MODE
    // process test commands
    igh_process_serial_cmd(); 
   d40e0:	f000 f85e 	bl	d41a0 <_Z22igh_process_serial_cmdv>
#endif
    igh_boron_service();
   d40e4:	f000 fc9e 	bl	d4a24 <_Z17igh_boron_servicev>
    igh_hardware_service();
   d40e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#ifdef TEST_MODE
    // process test commands
    igh_process_serial_cmd(); 
#endif
    igh_boron_service();
    igh_hardware_service();
   d40ec:	f000 bba8 	b.w	d4840 <_Z20igh_hardware_servicev>

000d40f0 <_GLOBAL__sub_I_setup>:
   d40f0:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d40f2:	f002 fc15 	bl	d6920 <HAL_Pin_Map>
#define TEST_MODE
#ifdef TEST_MODE
#include "particle_api/igh_log.h"
#endif

SYSTEM_THREAD(ENABLED);
   d40f6:	2100      	movs	r1, #0
   d40f8:	2001      	movs	r0, #1
    // process test commands
    igh_process_serial_cmd(); 
#endif
    igh_boron_service();
    igh_hardware_service();
   d40fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#define TEST_MODE
#ifdef TEST_MODE
#include "particle_api/igh_log.h"
#endif

SYSTEM_THREAD(ENABLED);
   d40fe:	f002 be1f 	b.w	d6d40 <system_thread_set_state>

000d4102 <_Z13igh_log_print6String>:
    }
    return 0;
}

void igh_log_print(String _str)
{
   d4102:	b510      	push	{r4, lr}
   d4104:	4604      	mov	r4, r0
    Serial.print(_str);
   d4106:	f003 fd3f 	bl	d7b88 <_Z16_fetch_usbserialv>
   d410a:	6821      	ldr	r1, [r4, #0]
}
   d410c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return 0;
}

void igh_log_print(String _str)
{
    Serial.print(_str);
   d4110:	f003 b8f6 	b.w	d7300 <_ZN5Print5printEPKc>

000d4114 <_ZL22igh_append_test_statush.part.1>:
    igh_log_print(test_sd_card);
    // Add more tests here
    igh_log_print(test_padding);
}

static void igh_append_test_status(uint8_t _status)
   d4114:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
    if(_status)
    {
        igh_log_print(test_success); igh_log_print("\n");
   d4116:	490b      	ldr	r1, [pc, #44]	; (d4144 <_ZL22igh_append_test_statush.part.1+0x30>)
   d4118:	4668      	mov	r0, sp
   d411a:	f003 f888 	bl	d722e <_ZN6StringC1EPK19__FlashStringHelper>
   d411e:	4668      	mov	r0, sp
   d4120:	f7ff ffef 	bl	d4102 <_Z13igh_log_print6String>
   d4124:	4668      	mov	r0, sp
   d4126:	f003 f83b 	bl	d71a0 <_ZN6StringD1Ev>
   d412a:	4907      	ldr	r1, [pc, #28]	; (d4148 <_ZL22igh_append_test_statush.part.1+0x34>)
   d412c:	4668      	mov	r0, sp
   d412e:	f003 f87e 	bl	d722e <_ZN6StringC1EPK19__FlashStringHelper>
   d4132:	4668      	mov	r0, sp
   d4134:	f7ff ffe5 	bl	d4102 <_Z13igh_log_print6String>
   d4138:	4668      	mov	r0, sp
   d413a:	f003 f831 	bl	d71a0 <_ZN6StringD1Ev>
    }
    else
    {
        igh_log_print(test_fail); igh_log_print("\n");
    }   
}
   d413e:	b005      	add	sp, #20
   d4140:	f85d fb04 	ldr.w	pc, [sp], #4
   d4144:	000d92fb 	.word	0x000d92fb
   d4148:	000d954c 	.word	0x000d954c

000d414c <_ZL22igh_append_test_statush>:
    // Add more tests here
    igh_log_print(test_padding);
}

static void igh_append_test_status(uint8_t _status)
{
   d414c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if(_status)
   d414e:	b110      	cbz	r0, d4156 <_ZL22igh_append_test_statush+0xa>
   d4150:	f7ff ffe0 	bl	d4114 <_ZL22igh_append_test_statush.part.1>
   d4154:	e013      	b.n	d417e <_ZL22igh_append_test_statush+0x32>
    {
        igh_log_print(test_success); igh_log_print("\n");
    }
    else
    {
        igh_log_print(test_fail); igh_log_print("\n");
   d4156:	490b      	ldr	r1, [pc, #44]	; (d4184 <_ZL22igh_append_test_statush+0x38>)
   d4158:	4668      	mov	r0, sp
   d415a:	f003 f868 	bl	d722e <_ZN6StringC1EPK19__FlashStringHelper>
   d415e:	4668      	mov	r0, sp
   d4160:	f7ff ffcf 	bl	d4102 <_Z13igh_log_print6String>
   d4164:	4668      	mov	r0, sp
   d4166:	f003 f81b 	bl	d71a0 <_ZN6StringD1Ev>
   d416a:	4907      	ldr	r1, [pc, #28]	; (d4188 <_ZL22igh_append_test_statush+0x3c>)
   d416c:	4668      	mov	r0, sp
   d416e:	f003 f85e 	bl	d722e <_ZN6StringC1EPK19__FlashStringHelper>
   d4172:	4668      	mov	r0, sp
   d4174:	f7ff ffc5 	bl	d4102 <_Z13igh_log_print6String>
   d4178:	4668      	mov	r0, sp
   d417a:	f003 f811 	bl	d71a0 <_ZN6StringD1Ev>
    }   
}
   d417e:	b005      	add	sp, #20
   d4180:	f85d fb04 	ldr.w	pc, [sp], #4
   d4184:	000d922a 	.word	0x000d922a
   d4188:	000d954c 	.word	0x000d954c

000d418c <_Z13igh_log_beginv>:
{
    Serial.print(_str);
}

void igh_log_begin(void)
{
   d418c:	b508      	push	{r3, lr}
    Serial.begin(IGH_LOG_BAUD);
   d418e:	f003 fcfb 	bl	d7b88 <_Z16_fetch_usbserialv>
   d4192:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
}
   d4196:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.print(_str);
}

void igh_log_begin(void)
{
    Serial.begin(IGH_LOG_BAUD);
   d419a:	f003 bce9 	b.w	d7b70 <_ZN9USBSerial5beginEl>
	...

000d41a0 <_Z22igh_process_serial_cmdv>:
        igh_log_print(test_fail); igh_log_print("\n");
    }   
}

uint8_t igh_process_serial_cmd(void)
{
   d41a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d41a2:	b089      	sub	sp, #36	; 0x24
    uint8_t ret = 0;
    char resp[10];
    memset(resp, '\0', sizeof(resp));
   d41a4:	2300      	movs	r3, #0
   d41a6:	9301      	str	r3, [sp, #4]
   d41a8:	9302      	str	r3, [sp, #8]
   d41aa:	f8ad 300c 	strh.w	r3, [sp, #12]
static void print_cmd_options(void);
static void igh_append_test_status(uint8_t _status);

static uint8_t igh_log_read(char * _ch)
{
    if( Serial.available() )
   d41ae:	f003 fceb 	bl	d7b88 <_Z16_fetch_usbserialv>
   d41b2:	6803      	ldr	r3, [r0, #0]
   d41b4:	691b      	ldr	r3, [r3, #16]
   d41b6:	4798      	blx	r3
   d41b8:	b198      	cbz	r0, d41e2 <_Z22igh_process_serial_cmdv+0x42>
    {
        *_ch = Serial.read();
   d41ba:	f003 fce5 	bl	d7b88 <_Z16_fetch_usbserialv>
   d41be:	6803      	ldr	r3, [r0, #0]
   d41c0:	695b      	ldr	r3, [r3, #20]
   d41c2:	4798      	blx	r3
   d41c4:	b2c4      	uxtb	r4, r0
        while (Serial.available()) Serial.read(); // remove any other data
   d41c6:	f003 fcdf 	bl	d7b88 <_Z16_fetch_usbserialv>
   d41ca:	6803      	ldr	r3, [r0, #0]
   d41cc:	691b      	ldr	r3, [r3, #16]
   d41ce:	4798      	blx	r3
   d41d0:	2800      	cmp	r0, #0
   d41d2:	f000 80c1 	beq.w	d4358 <_Z22igh_process_serial_cmdv+0x1b8>
   d41d6:	f003 fcd7 	bl	d7b88 <_Z16_fetch_usbserialv>
   d41da:	6803      	ldr	r3, [r0, #0]
   d41dc:	695b      	ldr	r3, [r3, #20]
   d41de:	4798      	blx	r3
   d41e0:	e7f1      	b.n	d41c6 <_Z22igh_process_serial_cmdv+0x26>
    }   
}

uint8_t igh_process_serial_cmd(void)
{
    uint8_t ret = 0;
   d41e2:	4604      	mov	r4, r0
   d41e4:	e064      	b.n	d42b0 <_Z22igh_process_serial_cmdv+0x110>
    Serial.begin(IGH_LOG_BAUD);
}

static void print_cmd_options(void)
{
    igh_log_print(test_padding);
   d41e6:	49aa      	ldr	r1, [pc, #680]	; (d4490 <_Z22igh_process_serial_cmdv+0x2f0>)
   d41e8:	a804      	add	r0, sp, #16
   d41ea:	f003 f820 	bl	d722e <_ZN6StringC1EPK19__FlashStringHelper>
   d41ee:	a804      	add	r0, sp, #16
   d41f0:	f7ff ff87 	bl	d4102 <_Z13igh_log_print6String>
   d41f4:	a804      	add	r0, sp, #16
   d41f6:	f002 ffd3 	bl	d71a0 <_ZN6StringD1Ev>
    igh_log_print(test_header);
   d41fa:	49a6      	ldr	r1, [pc, #664]	; (d4494 <_Z22igh_process_serial_cmdv+0x2f4>)
   d41fc:	a804      	add	r0, sp, #16
   d41fe:	f003 f816 	bl	d722e <_ZN6StringC1EPK19__FlashStringHelper>
   d4202:	a804      	add	r0, sp, #16
   d4204:	f7ff ff7d 	bl	d4102 <_Z13igh_log_print6String>
   d4208:	a804      	add	r0, sp, #16
   d420a:	f002 ffc9 	bl	d71a0 <_ZN6StringD1Ev>
    igh_log_print(test_padding);
   d420e:	49a0      	ldr	r1, [pc, #640]	; (d4490 <_Z22igh_process_serial_cmdv+0x2f0>)
   d4210:	a804      	add	r0, sp, #16
   d4212:	f003 f80c 	bl	d722e <_ZN6StringC1EPK19__FlashStringHelper>
   d4216:	a804      	add	r0, sp, #16
   d4218:	f7ff ff73 	bl	d4102 <_Z13igh_log_print6String>
   d421c:	a804      	add	r0, sp, #16
   d421e:	f002 ffbf 	bl	d71a0 <_ZN6StringD1Ev>
    igh_log_print(test_cmd_options);
   d4222:	499d      	ldr	r1, [pc, #628]	; (d4498 <_Z22igh_process_serial_cmdv+0x2f8>)
   d4224:	a804      	add	r0, sp, #16
   d4226:	f003 f802 	bl	d722e <_ZN6StringC1EPK19__FlashStringHelper>
   d422a:	a804      	add	r0, sp, #16
   d422c:	f7ff ff69 	bl	d4102 <_Z13igh_log_print6String>
   d4230:	a804      	add	r0, sp, #16
   d4232:	f002 ffb5 	bl	d71a0 <_ZN6StringD1Ev>
    igh_log_print(test_flash_cmd);
   d4236:	4999      	ldr	r1, [pc, #612]	; (d449c <_Z22igh_process_serial_cmdv+0x2fc>)
   d4238:	a804      	add	r0, sp, #16
   d423a:	f002 fff8 	bl	d722e <_ZN6StringC1EPK19__FlashStringHelper>
   d423e:	a804      	add	r0, sp, #16
   d4240:	f7ff ff5f 	bl	d4102 <_Z13igh_log_print6String>
   d4244:	a804      	add	r0, sp, #16
   d4246:	f002 ffab 	bl	d71a0 <_ZN6StringD1Ev>
    igh_log_print(test_device_api);
   d424a:	4995      	ldr	r1, [pc, #596]	; (d44a0 <_Z22igh_process_serial_cmdv+0x300>)
   d424c:	a804      	add	r0, sp, #16
   d424e:	f002 ffee 	bl	d722e <_ZN6StringC1EPK19__FlashStringHelper>
   d4252:	a804      	add	r0, sp, #16
   d4254:	f7ff ff55 	bl	d4102 <_Z13igh_log_print6String>
   d4258:	a804      	add	r0, sp, #16
   d425a:	f002 ffa1 	bl	d71a0 <_ZN6StringD1Ev>
    igh_log_print(test_button_press);
   d425e:	4991      	ldr	r1, [pc, #580]	; (d44a4 <_Z22igh_process_serial_cmdv+0x304>)
   d4260:	a804      	add	r0, sp, #16
   d4262:	f002 ffe4 	bl	d722e <_ZN6StringC1EPK19__FlashStringHelper>
   d4266:	a804      	add	r0, sp, #16
   d4268:	f7ff ff4b 	bl	d4102 <_Z13igh_log_print6String>
   d426c:	a804      	add	r0, sp, #16
   d426e:	f002 ff97 	bl	d71a0 <_ZN6StringD1Ev>
    igh_log_print(test_valve_state);
   d4272:	498d      	ldr	r1, [pc, #564]	; (d44a8 <_Z22igh_process_serial_cmdv+0x308>)
   d4274:	a804      	add	r0, sp, #16
   d4276:	f002 ffda 	bl	d722e <_ZN6StringC1EPK19__FlashStringHelper>
   d427a:	a804      	add	r0, sp, #16
   d427c:	f7ff ff41 	bl	d4102 <_Z13igh_log_print6String>
   d4280:	a804      	add	r0, sp, #16
   d4282:	f002 ff8d 	bl	d71a0 <_ZN6StringD1Ev>
    igh_log_print(test_sd_card);
   d4286:	4989      	ldr	r1, [pc, #548]	; (d44ac <_Z22igh_process_serial_cmdv+0x30c>)
   d4288:	a804      	add	r0, sp, #16
   d428a:	f002 ffd0 	bl	d722e <_ZN6StringC1EPK19__FlashStringHelper>
   d428e:	a804      	add	r0, sp, #16
   d4290:	f7ff ff37 	bl	d4102 <_Z13igh_log_print6String>
   d4294:	a804      	add	r0, sp, #16
   d4296:	f002 ff83 	bl	d71a0 <_ZN6StringD1Ev>
    // Add more tests here
    igh_log_print(test_padding);
   d429a:	497d      	ldr	r1, [pc, #500]	; (d4490 <_Z22igh_process_serial_cmdv+0x2f0>)
   d429c:	a804      	add	r0, sp, #16
   d429e:	f002 ffc6 	bl	d722e <_ZN6StringC1EPK19__FlashStringHelper>
   d42a2:	a804      	add	r0, sp, #16
   d42a4:	f7ff ff2d 	bl	d4102 <_Z13igh_log_print6String>
   d42a8:	a804      	add	r0, sp, #16
   d42aa:	f002 ff79 	bl	d71a0 <_ZN6StringD1Ev>
                igh_append_test_status(ret);  
                break;

            case test_device:
                igh_boron_test_device();
                ret = 1;
   d42ae:	2401      	movs	r4, #1
    {
        // Do nothing;
    }

    // Test button routine
    if(test_button_flag)
   d42b0:	4d7f      	ldr	r5, [pc, #508]	; (d44b0 <_Z22igh_process_serial_cmdv+0x310>)
   d42b2:	782b      	ldrb	r3, [r5, #0]
   d42b4:	b1c3      	cbz	r3, d42e8 <_Z22igh_process_serial_cmdv+0x148>
    {
        if(igh_button_sec_counter >= button_test_duration)
   d42b6:	4b7f      	ldr	r3, [pc, #508]	; (d44b4 <_Z22igh_process_serial_cmdv+0x314>)
   d42b8:	781a      	ldrb	r2, [r3, #0]
   d42ba:	4b7f      	ldr	r3, [pc, #508]	; (d44b8 <_Z22igh_process_serial_cmdv+0x318>)
   d42bc:	781b      	ldrb	r3, [r3, #0]
   d42be:	429a      	cmp	r2, r3
   d42c0:	d304      	bcc.n	d42cc <_Z22igh_process_serial_cmdv+0x12c>
   d42c2:	f7ff ff27 	bl	d4114 <_ZL22igh_append_test_statush.part.1>
        {
            ret = 1;
            igh_append_test_status(ret);
            test_button_flag = false;
   d42c6:	2300      	movs	r3, #0
   d42c8:	702b      	strb	r3, [r5, #0]
    // Test button routine
    if(test_button_flag)
    {
        if(igh_button_sec_counter >= button_test_duration)
        {
            ret = 1;
   d42ca:	2401      	movs	r4, #1

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d42cc:	f002 fbb0 	bl	d6a30 <HAL_Timer_Get_Milli_Seconds>
            igh_append_test_status(ret);
            test_button_flag = false;
        }

        if( (millis() - test_button_timeout_counter) >= test_button_timeout )
   d42d0:	4b7a      	ldr	r3, [pc, #488]	; (d44bc <_Z22igh_process_serial_cmdv+0x31c>)
   d42d2:	681b      	ldr	r3, [r3, #0]
   d42d4:	1ac0      	subs	r0, r0, r3
   d42d6:	4b7a      	ldr	r3, [pc, #488]	; (d44c0 <_Z22igh_process_serial_cmdv+0x320>)
   d42d8:	681b      	ldr	r3, [r3, #0]
   d42da:	4298      	cmp	r0, r3
   d42dc:	d304      	bcc.n	d42e8 <_Z22igh_process_serial_cmdv+0x148>
        {
            ret = 0;
            igh_append_test_status(ret);
   d42de:	2000      	movs	r0, #0
            test_button_flag = false;
   d42e0:	2400      	movs	r4, #0
        }

        if( (millis() - test_button_timeout_counter) >= test_button_timeout )
        {
            ret = 0;
            igh_append_test_status(ret);
   d42e2:	f7ff ff33 	bl	d414c <_ZL22igh_append_test_statush>
            test_button_flag = false;
   d42e6:	702c      	strb	r4, [r5, #0]
        }
    }

    // valve test routine
    if(test_valve_flag)
   d42e8:	4e76      	ldr	r6, [pc, #472]	; (d44c4 <_Z22igh_process_serial_cmdv+0x324>)
   d42ea:	7833      	ldrb	r3, [r6, #0]
   d42ec:	2b00      	cmp	r3, #0
   d42ee:	f000 80cb 	beq.w	d4488 <_Z22igh_process_serial_cmdv+0x2e8>
    {
        if(open_close)
   d42f2:	4b75      	ldr	r3, [pc, #468]	; (d44c8 <_Z22igh_process_serial_cmdv+0x328>)
   d42f4:	781a      	ldrb	r2, [r3, #0]
   d42f6:	461d      	mov	r5, r3
   d42f8:	4b74      	ldr	r3, [pc, #464]	; (d44cc <_Z22igh_process_serial_cmdv+0x32c>)
   d42fa:	b102      	cbz	r2, d42fe <_Z22igh_process_serial_cmdv+0x15e>
        {
            current_valve_position = VALVE_OPEN;
   d42fc:	2201      	movs	r2, #1
        else
        {
            current_valve_position = VALVE_CLOSE;
        }
        
        if( (millis() - test_valve_counter) >= valve_transit_time )
   d42fe:	4f74      	ldr	r7, [pc, #464]	; (d44d0 <_Z22igh_process_serial_cmdv+0x330>)
        {
            current_valve_position = VALVE_OPEN;
        }
        else
        {
            current_valve_position = VALVE_CLOSE;
   d4300:	701a      	strb	r2, [r3, #0]
   d4302:	f002 fb95 	bl	d6a30 <HAL_Timer_Get_Milli_Seconds>
        }
        
        if( (millis() - test_valve_counter) >= valve_transit_time )
   d4306:	683b      	ldr	r3, [r7, #0]
   d4308:	1ac0      	subs	r0, r0, r3
   d430a:	f241 736f 	movw	r3, #5999	; 0x176f
   d430e:	4298      	cmp	r0, r3
   d4310:	f240 80ba 	bls.w	d4488 <_Z22igh_process_serial_cmdv+0x2e8>
        {
            if(open_close)
   d4314:	782d      	ldrb	r5, [r5, #0]
   d4316:	b155      	cbz	r5, d432e <_Z22igh_process_serial_cmdv+0x18e>
            {
                valva_open_pass = igh_hardware_test_valve_state();
   d4318:	f000 fa94 	bl	d4844 <_Z29igh_hardware_test_valve_statev>
   d431c:	4b6d      	ldr	r3, [pc, #436]	; (d44d4 <_Z22igh_process_serial_cmdv+0x334>)
   d431e:	7018      	strb	r0, [r3, #0]
                open_close = false;
   d4320:	4b69      	ldr	r3, [pc, #420]	; (d44c8 <_Z22igh_process_serial_cmdv+0x328>)
   d4322:	2200      	movs	r2, #0
   d4324:	701a      	strb	r2, [r3, #0]
   d4326:	f002 fb83 	bl	d6a30 <HAL_Timer_Get_Milli_Seconds>
                test_valve_counter = millis();
   d432a:	6038      	str	r0, [r7, #0]
   d432c:	e0ac      	b.n	d4488 <_Z22igh_process_serial_cmdv+0x2e8>
            }
            else
            {
                valve_closed_pass = !igh_hardware_test_valve_state();
   d432e:	f000 fa89 	bl	d4844 <_Z29igh_hardware_test_valve_statev>
   d4332:	4b69      	ldr	r3, [pc, #420]	; (d44d8 <_Z22igh_process_serial_cmdv+0x338>)
   d4334:	2800      	cmp	r0, #0
   d4336:	bf0c      	ite	eq
   d4338:	2201      	moveq	r2, #1
   d433a:	2200      	movne	r2, #0
   d433c:	701a      	strb	r2, [r3, #0]

                ret = (valve_closed_pass && valva_open_pass);
   d433e:	d104      	bne.n	d434a <_Z22igh_process_serial_cmdv+0x1aa>
   d4340:	4b64      	ldr	r3, [pc, #400]	; (d44d4 <_Z22igh_process_serial_cmdv+0x334>)
   d4342:	781d      	ldrb	r5, [r3, #0]
   d4344:	3500      	adds	r5, #0
   d4346:	bf18      	it	ne
   d4348:	2501      	movne	r5, #1
                igh_append_test_status(ret);
   d434a:	4628      	mov	r0, r5
   d434c:	f7ff fefe 	bl	d414c <_ZL22igh_append_test_statush>
                test_valve_flag = false;
   d4350:	2300      	movs	r3, #0
            }
            else
            {
                valve_closed_pass = !igh_hardware_test_valve_state();

                ret = (valve_closed_pass && valva_open_pass);
   d4352:	462c      	mov	r4, r5
                igh_append_test_status(ret);
                test_valve_flag = false;
   d4354:	7033      	strb	r3, [r6, #0]
            }   
        }
    }

    return ret;
   d4356:	e097      	b.n	d4488 <_Z22igh_process_serial_cmdv+0x2e8>
    memset(resp, '\0', sizeof(resp));

    char serial_cmd = '\0';
    if( igh_log_read(&serial_cmd) )
    {
        switch(serial_cmd)
   d4358:	f1a4 0031 	sub.w	r0, r4, #49	; 0x31
   d435c:	280e      	cmp	r0, #14
   d435e:	f200 8091 	bhi.w	d4484 <_Z22igh_process_serial_cmdv+0x2e4>
   d4362:	a301      	add	r3, pc, #4	; (adr r3, d4368 <_Z22igh_process_serial_cmdv+0x1c8>)
   d4364:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   d4368:	000d43a5 	.word	0x000d43a5
   d436c:	000d43bf 	.word	0x000d43bf
   d4370:	000d43c5 	.word	0x000d43c5
   d4374:	000d443f 	.word	0x000d443f
   d4378:	000d4465 	.word	0x000d4465
   d437c:	000d4485 	.word	0x000d4485
   d4380:	000d4485 	.word	0x000d4485
   d4384:	000d4485 	.word	0x000d4485
   d4388:	000d4485 	.word	0x000d4485
   d438c:	000d4485 	.word	0x000d4485
   d4390:	000d4485 	.word	0x000d4485
   d4394:	000d4485 	.word	0x000d4485
   d4398:	000d4485 	.word	0x000d4485
   d439c:	000d4485 	.word	0x000d4485
   d43a0:	000d41e7 	.word	0x000d41e7
                print_cmd_options();
                ret = 1;
                break;

            case test_flash:
                igh_log_print(F("\nTesting flash:"));
   d43a4:	494d      	ldr	r1, [pc, #308]	; (d44dc <_Z22igh_process_serial_cmdv+0x33c>)
   d43a6:	a804      	add	r0, sp, #16
   d43a8:	f002 ff41 	bl	d722e <_ZN6StringC1EPK19__FlashStringHelper>
   d43ac:	a804      	add	r0, sp, #16
   d43ae:	f7ff fea8 	bl	d4102 <_Z13igh_log_print6String>
   d43b2:	a804      	add	r0, sp, #16
   d43b4:	f002 fef4 	bl	d71a0 <_ZN6StringD1Ev>
                ret = igh_eeproom_test(); // this should be true based on actual test
   d43b8:	f000 f936 	bl	d4628 <_Z16igh_eeproom_testv>
   d43bc:	e05e      	b.n	d447c <_Z22igh_process_serial_cmdv+0x2dc>
                igh_append_test_status(ret);  
                break;

            case test_device:
                igh_boron_test_device();
   d43be:	f000 fb39 	bl	d4a34 <_Z21igh_boron_test_devicev>
   d43c2:	e774      	b.n	d42ae <_Z22igh_process_serial_cmdv+0x10e>
                ret = 1;
                break;

            case test_button:
                button_test_duration = random(5); // get a random number to test button press duration
   d43c4:	2005      	movs	r0, #5
   d43c6:	f003 fd9a 	bl	d7efe <_Z6randomi>
   d43ca:	4c3b      	ldr	r4, [pc, #236]	; (d44b8 <_Z22igh_process_serial_cmdv+0x318>)
                igh_log_print(F("\nPress button for: ")); igh_log_print(String(button_test_duration)); igh_log_print(F(" Seconds"));
   d43cc:	4944      	ldr	r1, [pc, #272]	; (d44e0 <_Z22igh_process_serial_cmdv+0x340>)
                igh_boron_test_device();
                ret = 1;
                break;

            case test_button:
                button_test_duration = random(5); // get a random number to test button press duration
   d43ce:	7020      	strb	r0, [r4, #0]
                igh_log_print(F("\nPress button for: ")); igh_log_print(String(button_test_duration)); igh_log_print(F(" Seconds"));
   d43d0:	a804      	add	r0, sp, #16
   d43d2:	f002 ff2c 	bl	d722e <_ZN6StringC1EPK19__FlashStringHelper>
   d43d6:	a804      	add	r0, sp, #16
   d43d8:	f7ff fe93 	bl	d4102 <_Z13igh_log_print6String>
   d43dc:	a804      	add	r0, sp, #16
   d43de:	f002 fedf 	bl	d71a0 <_ZN6StringD1Ev>
   d43e2:	220a      	movs	r2, #10
   d43e4:	7821      	ldrb	r1, [r4, #0]
   d43e6:	a804      	add	r0, sp, #16
   d43e8:	f002 ff45 	bl	d7276 <_ZN6StringC1Ehh>
   d43ec:	a804      	add	r0, sp, #16
   d43ee:	f7ff fe88 	bl	d4102 <_Z13igh_log_print6String>
   d43f2:	a804      	add	r0, sp, #16
   d43f4:	f002 fed4 	bl	d71a0 <_ZN6StringD1Ev>
   d43f8:	493a      	ldr	r1, [pc, #232]	; (d44e4 <_Z22igh_process_serial_cmdv+0x344>)
   d43fa:	a804      	add	r0, sp, #16
   d43fc:	f002 ff17 	bl	d722e <_ZN6StringC1EPK19__FlashStringHelper>
   d4400:	a804      	add	r0, sp, #16
   d4402:	f7ff fe7e 	bl	d4102 <_Z13igh_log_print6String>
   d4406:	a804      	add	r0, sp, #16
   d4408:	f002 feca 	bl	d71a0 <_ZN6StringD1Ev>
                igh_log_print(F("\nTesting Button:"));
   d440c:	4936      	ldr	r1, [pc, #216]	; (d44e8 <_Z22igh_process_serial_cmdv+0x348>)
   d440e:	a804      	add	r0, sp, #16
   d4410:	f002 ff0d 	bl	d722e <_ZN6StringC1EPK19__FlashStringHelper>
   d4414:	a804      	add	r0, sp, #16
   d4416:	f7ff fe74 	bl	d4102 <_Z13igh_log_print6String>
   d441a:	a804      	add	r0, sp, #16
   d441c:	f002 fec0 	bl	d71a0 <_ZN6StringD1Ev>
                test_button_flag = 1;
   d4420:	4b23      	ldr	r3, [pc, #140]	; (d44b0 <_Z22igh_process_serial_cmdv+0x310>)
   d4422:	2201      	movs	r2, #1
   d4424:	701a      	strb	r2, [r3, #0]
                test_button_timeout = (button_test_duration + 5) * 1000; // + 5 gives you at least 5 seconds to start pressing
   d4426:	7823      	ldrb	r3, [r4, #0]
   d4428:	1d5a      	adds	r2, r3, #5
   d442a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d442e:	4353      	muls	r3, r2
   d4430:	4a23      	ldr	r2, [pc, #140]	; (d44c0 <_Z22igh_process_serial_cmdv+0x320>)
   d4432:	6013      	str	r3, [r2, #0]
   d4434:	f002 fafc 	bl	d6a30 <HAL_Timer_Get_Milli_Seconds>
                test_button_timeout_counter = millis();
   d4438:	4b20      	ldr	r3, [pc, #128]	; (d44bc <_Z22igh_process_serial_cmdv+0x31c>)
   d443a:	6018      	str	r0, [r3, #0]
   d443c:	e022      	b.n	d4484 <_Z22igh_process_serial_cmdv+0x2e4>
                break;

            case test_valve:
                igh_log_print(F("\nTesting Valve:"));
   d443e:	492b      	ldr	r1, [pc, #172]	; (d44ec <_Z22igh_process_serial_cmdv+0x34c>)
   d4440:	a804      	add	r0, sp, #16
   d4442:	f002 fef4 	bl	d722e <_ZN6StringC1EPK19__FlashStringHelper>
   d4446:	a804      	add	r0, sp, #16
   d4448:	f7ff fe5b 	bl	d4102 <_Z13igh_log_print6String>
   d444c:	a804      	add	r0, sp, #16
   d444e:	f002 fea7 	bl	d71a0 <_ZN6StringD1Ev>
                test_valve_flag = true;
   d4452:	4b1c      	ldr	r3, [pc, #112]	; (d44c4 <_Z22igh_process_serial_cmdv+0x324>)
   d4454:	2401      	movs	r4, #1
   d4456:	701c      	strb	r4, [r3, #0]
   d4458:	f002 faea 	bl	d6a30 <HAL_Timer_Get_Milli_Seconds>
                test_valve_counter = millis();
   d445c:	4b1c      	ldr	r3, [pc, #112]	; (d44d0 <_Z22igh_process_serial_cmdv+0x330>)
   d445e:	6018      	str	r0, [r3, #0]
                open_close = true;
   d4460:	4b19      	ldr	r3, [pc, #100]	; (d44c8 <_Z22igh_process_serial_cmdv+0x328>)
   d4462:	701c      	strb	r4, [r3, #0]

            case test_sd:
                igh_log_print(F("\nTesting SD Card:"));
   d4464:	4922      	ldr	r1, [pc, #136]	; (d44f0 <_Z22igh_process_serial_cmdv+0x350>)
   d4466:	a804      	add	r0, sp, #16
   d4468:	f002 fee1 	bl	d722e <_ZN6StringC1EPK19__FlashStringHelper>
   d446c:	a804      	add	r0, sp, #16
   d446e:	f7ff fe48 	bl	d4102 <_Z13igh_log_print6String>
   d4472:	a804      	add	r0, sp, #16
   d4474:	f002 fe94 	bl	d71a0 <_ZN6StringD1Ev>
                ret = igh_sd_log_test();
   d4478:	f000 fd66 	bl	d4f48 <_Z15igh_sd_log_testv>
   d447c:	4604      	mov	r4, r0
                igh_append_test_status(ret);
   d447e:	f7ff fe65 	bl	d414c <_ZL22igh_append_test_statush>
                break; 
   d4482:	e715      	b.n	d42b0 <_Z22igh_process_serial_cmdv+0x110>
    }   
}

uint8_t igh_process_serial_cmd(void)
{
    uint8_t ret = 0;
   d4484:	2400      	movs	r4, #0
   d4486:	e713      	b.n	d42b0 <_Z22igh_process_serial_cmdv+0x110>
            }   
        }
    }

    return ret;
   d4488:	4620      	mov	r0, r4
   d448a:	b009      	add	sp, #36	; 0x24
   d448c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d448e:	bf00      	nop
   d4490:	000d92c1 	.word	0x000d92c1
   d4494:	000d921a 	.word	0x000d921a
   d4498:	000d9231 	.word	0x000d9231
   d449c:	000d923d 	.word	0x000d923d
   d44a0:	000d92ad 	.word	0x000d92ad
   d44a4:	000d9204 	.word	0x000d9204
   d44a8:	000d92d3 	.word	0x000d92d3
   d44ac:	000d92ea 	.word	0x000d92ea
   d44b0:	2003de0c 	.word	0x2003de0c
   d44b4:	2003de15 	.word	0x2003de15
   d44b8:	2003de0e 	.word	0x2003de0e
   d44bc:	2003de08 	.word	0x2003de08
   d44c0:	2003de04 	.word	0x2003de04
   d44c4:	2003de0f 	.word	0x2003de0f
   d44c8:	2003de0d 	.word	0x2003de0d
   d44cc:	2003de14 	.word	0x2003de14
   d44d0:	2003de10 	.word	0x2003de10
   d44d4:	2003de00 	.word	0x2003de00
   d44d8:	2003de01 	.word	0x2003de01
   d44dc:	000d924d 	.word	0x000d924d
   d44e0:	000d925d 	.word	0x000d925d
   d44e4:	000d9271 	.word	0x000d9271
   d44e8:	000d927a 	.word	0x000d927a
   d44ec:	000d928b 	.word	0x000d928b
   d44f0:	000d929b 	.word	0x000d929b

000d44f4 <_GLOBAL__sub_I_test_valve_flag>:
   d44f4:	f002 ba14 	b.w	d6920 <HAL_Pin_Map>

000d44f8 <_Z24igh_eeprom_update_errorsm>:
 * \brief Save errors bit field
 * \param error_bit_field: error bit field
 * \return void
 */
void igh_eeprom_update_errors(uint32_t error_bit_field)
{
   d44f8:	b513      	push	{r0, r1, r4, lr}
   d44fa:	ac02      	add	r4, sp, #8
   d44fc:	f844 0d04 	str.w	r0, [r4, #-4]!
    EEPROM.put(SYSTEM_ERRORS_ADDRESS, error_bit_field);
   d4500:	f003 fede 	bl	d82c0 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4504:	2204      	movs	r2, #4
   d4506:	4621      	mov	r1, r4
   d4508:	f44f 6080 	mov.w	r0, #1024	; 0x400
   d450c:	f002 fab0 	bl	d6a70 <HAL_EEPROM_Put>
}
   d4510:	b002      	add	sp, #8
   d4512:	bd10      	pop	{r4, pc}

000d4514 <_Z31igh_eeprom_read_system_settingsP15system_settings>:
 * \brief Gets system settings from eeprom emulator
 * \param running_system_settings_buffer: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_system_settings(system_settings * running_system_settings_buffer)
{
   d4514:	b530      	push	{r4, r5, lr}
   d4516:	b091      	sub	sp, #68	; 0x44
  system_settings local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d4518:	223c      	movs	r2, #60	; 0x3c
   d451a:	2100      	movs	r1, #0
 * \brief Gets system settings from eeprom emulator
 * \param running_system_settings_buffer: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_system_settings(system_settings * running_system_settings_buffer)
{
   d451c:	4605      	mov	r5, r0
  system_settings local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d451e:	a801      	add	r0, sp, #4
   d4520:	f004 fdf4 	bl	d910c <memset>
  EEPROM.get(SYSTEM_SETTINGS_ADDRESS, local_buffer);
   d4524:	f003 fecc 	bl	d82c0 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4528:	223c      	movs	r2, #60	; 0x3c
   d452a:	a901      	add	r1, sp, #4
   d452c:	2000      	movs	r0, #0
   d452e:	f002 fa97 	bl	d6a60 <HAL_EEPROM_Get>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));
   d4532:	213c      	movs	r1, #60	; 0x3c
   d4534:	a801      	add	r0, sp, #4
   d4536:	f7ff fdba 	bl	d40ae <igh_settings_calculate_checksum>

  if( checksum != local_buffer.checksum)
   d453a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d453e:	4283      	cmp	r3, r0
   d4540:	d10c      	bne.n	d455c <_Z31igh_eeprom_read_system_settingsP15system_settings+0x48>
  {
    return 0;
  }

  *running_system_settings_buffer = local_buffer;
   d4542:	ac01      	add	r4, sp, #4
   d4544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4548:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d454a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d454c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d454e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4550:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   d4554:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  return 1;
   d4558:	2001      	movs	r0, #1
   d455a:	e000      	b.n	d455e <_Z31igh_eeprom_read_system_settingsP15system_settings+0x4a>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));

  if( checksum != local_buffer.checksum)
  {
    return 0;
   d455c:	2000      	movs	r0, #0
  }

  *running_system_settings_buffer = local_buffer;
  return 1;

}
   d455e:	b011      	add	sp, #68	; 0x44
   d4560:	bd30      	pop	{r4, r5, pc}

000d4562 <_Z31igh_eeprom_save_system_settingsP15system_settings>:
 * \brief Save system settings  to eeprom emulator
 * \param settings_to_save: pointer to struct to save
 * \return true or false based on write success
 */
uint8_t igh_eeprom_save_system_settings(system_settings * settings_to_save)
{
   d4562:	b510      	push	{r4, lr}
   d4564:	4604      	mov	r4, r0
   d4566:	b090      	sub	sp, #64	; 0x40
  system_settings local_buffer;
  // save the data
  EEPROM.put(SYSTEM_SETTINGS_ADDRESS, *settings_to_save);
   d4568:	f003 feaa 	bl	d82c0 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d456c:	223c      	movs	r2, #60	; 0x3c
   d456e:	4621      	mov	r1, r4
   d4570:	2000      	movs	r0, #0
   d4572:	f002 fa7d 	bl	d6a70 <HAL_EEPROM_Put>
  // check if data is saved
  igh_eeprom_read_system_settings(&local_buffer);
   d4576:	a801      	add	r0, sp, #4
   d4578:	f7ff ffcc 	bl	d4514 <_Z31igh_eeprom_read_system_settingsP15system_settings>

  if( local_buffer.checksum != (settings_to_save->checksum))
  {
    return 0;
   d457c:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d4580:	7823      	ldrb	r3, [r4, #0]
  }

  return 1;
}
   d4582:	1ac3      	subs	r3, r0, r3
   d4584:	4258      	negs	r0, r3
   d4586:	4158      	adcs	r0, r3
   d4588:	b010      	add	sp, #64	; 0x40
   d458a:	bd10      	pop	{r4, pc}

000d458c <_Z34igh_eeprom_read_threshold_settingsP10thresholds>:
 * \brief Gets threshold settings from eeprom emulator
 * \param running_thresholds: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_threshold_settings(thresholds * running_thresholds)
{
   d458c:	b530      	push	{r4, r5, lr}
   d458e:	b08f      	sub	sp, #60	; 0x3c
  thresholds local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d4590:	2234      	movs	r2, #52	; 0x34
   d4592:	2100      	movs	r1, #0
 * \brief Gets threshold settings from eeprom emulator
 * \param running_thresholds: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_threshold_settings(thresholds * running_thresholds)
{
   d4594:	4605      	mov	r5, r0
  thresholds local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d4596:	a801      	add	r0, sp, #4
   d4598:	f004 fdb8 	bl	d910c <memset>
  EEPROM.get(SYSTEM_THRESHOLDS_ADDRESS, local_buffer);
   d459c:	f003 fe90 	bl	d82c0 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d45a0:	2234      	movs	r2, #52	; 0x34
   d45a2:	a901      	add	r1, sp, #4
   d45a4:	f44f 7000 	mov.w	r0, #512	; 0x200
   d45a8:	f002 fa5a 	bl	d6a60 <HAL_EEPROM_Get>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));
   d45ac:	2134      	movs	r1, #52	; 0x34
   d45ae:	a801      	add	r0, sp, #4
   d45b0:	f7ff fd7d 	bl	d40ae <igh_settings_calculate_checksum>
  
  if( checksum != local_buffer.checksum)
   d45b4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d45b8:	4283      	cmp	r3, r0
   d45ba:	d10a      	bne.n	d45d2 <_Z34igh_eeprom_read_threshold_settingsP10thresholds+0x46>
  {
    return 0;
  }
  
  *running_thresholds = local_buffer;
   d45bc:	ac01      	add	r4, sp, #4
   d45be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d45c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d45c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d45c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d45c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d45c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d45ca:	6823      	ldr	r3, [r4, #0]
   d45cc:	602b      	str	r3, [r5, #0]
  return 1;
   d45ce:	2001      	movs	r0, #1
   d45d0:	e000      	b.n	d45d4 <_Z34igh_eeprom_read_threshold_settingsP10thresholds+0x48>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));
  
  if( checksum != local_buffer.checksum)
  {
    return 0;
   d45d2:	2000      	movs	r0, #0
  }
  
  *running_thresholds = local_buffer;
  return 1;
}
   d45d4:	b00f      	add	sp, #60	; 0x3c
   d45d6:	bd30      	pop	{r4, r5, pc}

000d45d8 <_Z34igh_eeprom_save_threshold_settingsP10thresholds>:
 * \brief Save threshold settings  to eeprom emulator
 * \param settings_to_save: pointer to struct to save
 * \return true or false based on write success
 */
uint8_t igh_eeprom_save_threshold_settings(thresholds * settings_to_save)
{
   d45d8:	b510      	push	{r4, lr}
   d45da:	4604      	mov	r4, r0
   d45dc:	b08e      	sub	sp, #56	; 0x38
    thresholds local_buffer;
    // save the data
    EEPROM.put(SYSTEM_THRESHOLDS_ADDRESS, *settings_to_save);
   d45de:	f003 fe6f 	bl	d82c0 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d45e2:	2234      	movs	r2, #52	; 0x34
   d45e4:	4621      	mov	r1, r4
   d45e6:	f44f 7000 	mov.w	r0, #512	; 0x200
   d45ea:	f002 fa41 	bl	d6a70 <HAL_EEPROM_Put>
    // check if data is saved
    igh_eeprom_read_threshold_settings(&local_buffer);
   d45ee:	a801      	add	r0, sp, #4
   d45f0:	f7ff ffcc 	bl	d458c <_Z34igh_eeprom_read_threshold_settingsP10thresholds>

    if( local_buffer.checksum != (settings_to_save->checksum))
    {
        return 0;
   d45f4:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d45f8:	7823      	ldrb	r3, [r4, #0]
    }

    return 1;
}
   d45fa:	1ac3      	subs	r3, r0, r3
   d45fc:	4258      	negs	r0, r3
   d45fe:	4158      	adcs	r0, r3
   d4600:	b00e      	add	sp, #56	; 0x38
   d4602:	bd10      	pop	{r4, pc}

000d4604 <_Z21igh_eeprom_get_errorsPm>:
 * \brief Gets errors stored in eeprom
 * \param error_bit_field; uint32 bit fiel to populate
 * \return void
 */
void igh_eeprom_get_errors(uint32_t * error_bit_field)
{
   d4604:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t _error = 0;
   d4606:	ac02      	add	r4, sp, #8
   d4608:	2300      	movs	r3, #0
   d460a:	f844 3d04 	str.w	r3, [r4, #-4]!
 * \brief Gets errors stored in eeprom
 * \param error_bit_field; uint32 bit fiel to populate
 * \return void
 */
void igh_eeprom_get_errors(uint32_t * error_bit_field)
{
   d460e:	4605      	mov	r5, r0
    uint32_t _error = 0;
    EEPROM.get(SYSTEM_ERRORS_ADDRESS, _error);
   d4610:	f003 fe56 	bl	d82c0 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4614:	2204      	movs	r2, #4
   d4616:	4621      	mov	r1, r4
   d4618:	f44f 6080 	mov.w	r0, #1024	; 0x400
   d461c:	f002 fa20 	bl	d6a60 <HAL_EEPROM_Get>
    *error_bit_field = _error;
   d4620:	9b01      	ldr	r3, [sp, #4]
   d4622:	602b      	str	r3, [r5, #0]
}
   d4624:	b003      	add	sp, #12
   d4626:	bd30      	pop	{r4, r5, pc}

000d4628 <_Z16igh_eeproom_testv>:
 * \brief Tests that we can read and write to the EEPROM just fine
 * \param void
 * \return true or false
 */
uint8_t igh_eeproom_test(void)
{
   d4628:	b5f0      	push	{r4, r5, r6, r7, lr}
    thresholds test_thresholds;
    system_settings test_system_settings;

    uint8_t test_shield_id[12] = {0xe0,0x0f,0xce,0x68,0x9a,0x75,0x47,0x05,0xe7,0x9a,0x0e,0x37};
   d462a:	4a42      	ldr	r2, [pc, #264]	; (d4734 <_Z16igh_eeproom_testv+0x10c>)
 * \brief Tests that we can read and write to the EEPROM just fine
 * \param void
 * \return true or false
 */
uint8_t igh_eeproom_test(void)
{
   d462c:	b0a5      	sub	sp, #148	; 0x94
    thresholds test_thresholds;
    system_settings test_system_settings;

    uint8_t test_shield_id[12] = {0xe0,0x0f,0xce,0x68,0x9a,0x75,0x47,0x05,0xe7,0x9a,0x0e,0x37};
   d462e:	6810      	ldr	r0, [r2, #0]
   d4630:	6851      	ldr	r1, [r2, #4]
   d4632:	ab01      	add	r3, sp, #4
   d4634:	c303      	stmia	r3!, {r0, r1}
   d4636:	6890      	ldr	r0, [r2, #8]
   d4638:	6018      	str	r0, [r3, #0]
    uint8_t test_broker[] = "test.broker.com";
   d463a:	4b3f      	ldr	r3, [pc, #252]	; (d4738 <_Z16igh_eeproom_testv+0x110>)
   d463c:	aa04      	add	r2, sp, #16
   d463e:	f103 0710 	add.w	r7, r3, #16
   d4642:	ae01      	add	r6, sp, #4
   d4644:	4615      	mov	r5, r2
   d4646:	6818      	ldr	r0, [r3, #0]
   d4648:	6859      	ldr	r1, [r3, #4]
   d464a:	4614      	mov	r4, r2
   d464c:	c403      	stmia	r4!, {r0, r1}
   d464e:	3308      	adds	r3, #8
   d4650:	42bb      	cmp	r3, r7
   d4652:	4622      	mov	r2, r4
   d4654:	d1f7      	bne.n	d4646 <_Z16igh_eeproom_testv+0x1e>

    memset(&test_system_settings, 0, sizeof(test_system_settings));
   d4656:	223c      	movs	r2, #60	; 0x3c
   d4658:	2100      	movs	r1, #0
   d465a:	a815      	add	r0, sp, #84	; 0x54
   d465c:	f004 fd56 	bl	d910c <memset>
    memset(&test_thresholds, 0, sizeof(test_thresholds));
   d4660:	2234      	movs	r2, #52	; 0x34
   d4662:	2100      	movs	r1, #0
   d4664:	a808      	add	r0, sp, #32
   d4666:	f004 fd51 	bl	d910c <memset>

    memcpy(test_system_settings.serial_number, test_shield_id, 12);
   d466a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   d466e:	ab18      	add	r3, sp, #96	; 0x60
   d4670:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    memcpy(test_system_settings.broker, test_broker, sizeof(test_broker));
   d4674:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   d4678:	ac1b      	add	r4, sp, #108	; 0x6c
   d467a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    test_system_settings.op_state = OP_INACTIVE;
    test_system_settings.reporting_interval = 0x11111111;
   d467e:	f04f 3511 	mov.w	r5, #286331153	; 0x11111111
    test_system_settings.data_resolution = 0x11111111;
    test_system_settings.broker_port = 0x1111;
   d4682:	f241 1411 	movw	r4, #4369	; 0x1111
    test_system_settings.checksum = igh_settings_calculate_checksum(&test_system_settings, sizeof(test_system_settings));
   d4686:	213c      	movs	r1, #60	; 0x3c
   d4688:	a815      	add	r0, sp, #84	; 0x54
    memcpy(test_system_settings.serial_number, test_shield_id, 12);
    memcpy(test_system_settings.broker, test_broker, sizeof(test_broker));
    test_system_settings.op_state = OP_INACTIVE;
    test_system_settings.reporting_interval = 0x11111111;
    test_system_settings.data_resolution = 0x11111111;
    test_system_settings.broker_port = 0x1111;
   d468a:	f8ad 408c 	strh.w	r4, [sp, #140]	; 0x8c
    memset(&test_thresholds, 0, sizeof(test_thresholds));

    memcpy(test_system_settings.serial_number, test_shield_id, 12);
    memcpy(test_system_settings.broker, test_broker, sizeof(test_broker));
    test_system_settings.op_state = OP_INACTIVE;
    test_system_settings.reporting_interval = 0x11111111;
   d468e:	9516      	str	r5, [sp, #88]	; 0x58
    test_system_settings.data_resolution = 0x11111111;
   d4690:	9517      	str	r5, [sp, #92]	; 0x5c
    test_system_settings.broker_port = 0x1111;
    test_system_settings.checksum = igh_settings_calculate_checksum(&test_system_settings, sizeof(test_system_settings));
   d4692:	f7ff fd0c 	bl	d40ae <igh_settings_calculate_checksum>
    test_thresholds.shield_battery_level_high = 0x1111;
    test_thresholds.spear_battery_level_low = 0x1111;
    test_thresholds.spear_battery_level_high = 0x1111;
    test_thresholds.water_dispensed_period_high = 0x11111111;
    test_thresholds.water_dispensed_period_low = 0x11111111;
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));
   d4696:	2134      	movs	r1, #52	; 0x34
    memcpy(test_system_settings.broker, test_broker, sizeof(test_broker));
    test_system_settings.op_state = OP_INACTIVE;
    test_system_settings.reporting_interval = 0x11111111;
    test_system_settings.data_resolution = 0x11111111;
    test_system_settings.broker_port = 0x1111;
    test_system_settings.checksum = igh_settings_calculate_checksum(&test_system_settings, sizeof(test_system_settings));
   d4698:	f88d 0054 	strb.w	r0, [sp, #84]	; 0x54
    test_thresholds.shield_battery_level_high = 0x1111;
    test_thresholds.spear_battery_level_low = 0x1111;
    test_thresholds.spear_battery_level_high = 0x1111;
    test_thresholds.water_dispensed_period_high = 0x11111111;
    test_thresholds.water_dispensed_period_low = 0x11111111;
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));
   d469c:	a808      	add	r0, sp, #32
    test_system_settings.reporting_interval = 0x11111111;
    test_system_settings.data_resolution = 0x11111111;
    test_system_settings.broker_port = 0x1111;
    test_system_settings.checksum = igh_settings_calculate_checksum(&test_system_settings, sizeof(test_system_settings));

    test_thresholds.soil_moisture_low = 0x1111;
   d469e:	f8ad 4022 	strh.w	r4, [sp, #34]	; 0x22
    test_thresholds.soil_moisture_high = 0x1111;
   d46a2:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    test_thresholds.air_humidity_low = 0x1111;
   d46a6:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
    test_thresholds.air_humidity_high = 0x1111;
   d46aa:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
    test_thresholds.soil_humidity_low = 0x1111;
   d46ae:	f8ad 4026 	strh.w	r4, [sp, #38]	; 0x26
    test_thresholds.soil_humidity_high = 0x1111;
   d46b2:	f8ad 4040 	strh.w	r4, [sp, #64]	; 0x40
    test_thresholds.carbon_dioxide_low = 0x1111;
   d46b6:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
    test_thresholds.carbon_dioxide_high = 0x1111;
   d46ba:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
    test_thresholds.air_temperature_low = 0x1111;
   d46be:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
    test_thresholds.air_temperature_high = 0x1111;
   d46c2:	f8ad 4044 	strh.w	r4, [sp, #68]	; 0x44
    test_thresholds.soil_temperature_low = 0x1111;
   d46c6:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
    test_thresholds.soil_temperature_high = 0x1111;
   d46ca:	f8ad 4046 	strh.w	r4, [sp, #70]	; 0x46
    test_thresholds.soil_npk_low = 0x1111;
   d46ce:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    test_thresholds.soil_npk_high = 0x1111;
   d46d2:	f8ad 4048 	strh.w	r4, [sp, #72]	; 0x48
    test_thresholds.light_intensity_high = 0x1111;
   d46d6:	f8ad 404a 	strh.w	r4, [sp, #74]	; 0x4a
    test_thresholds.light_intensity_low = 0x1111;
   d46da:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
    test_thresholds.shield_battery_level_low = 0x1111;
   d46de:	f8ad 4032 	strh.w	r4, [sp, #50]	; 0x32
    test_thresholds.shield_battery_level_high = 0x1111;
   d46e2:	f8ad 404c 	strh.w	r4, [sp, #76]	; 0x4c
    test_thresholds.spear_battery_level_low = 0x1111;
   d46e6:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    test_thresholds.spear_battery_level_high = 0x1111;
   d46ea:	f8ad 404e 	strh.w	r4, [sp, #78]	; 0x4e
    test_thresholds.water_dispensed_period_high = 0x11111111;
   d46ee:	9514      	str	r5, [sp, #80]	; 0x50
    test_thresholds.water_dispensed_period_low = 0x11111111;
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));

    uint32_t test_error = 0xAAAAAAAA;
    uint32_t ret_test_error = 0;
   d46f0:	ac24      	add	r4, sp, #144	; 0x90
    test_thresholds.shield_battery_level_low = 0x1111;
    test_thresholds.shield_battery_level_high = 0x1111;
    test_thresholds.spear_battery_level_low = 0x1111;
    test_thresholds.spear_battery_level_high = 0x1111;
    test_thresholds.water_dispensed_period_high = 0x11111111;
    test_thresholds.water_dispensed_period_low = 0x11111111;
   d46f2:	950e      	str	r5, [sp, #56]	; 0x38
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));
   d46f4:	f7ff fcdb 	bl	d40ae <igh_settings_calculate_checksum>

    uint32_t test_error = 0xAAAAAAAA;
    uint32_t ret_test_error = 0;
   d46f8:	2300      	movs	r3, #0
   d46fa:	f844 3d90 	str.w	r3, [r4, #-144]!
    test_thresholds.shield_battery_level_high = 0x1111;
    test_thresholds.spear_battery_level_low = 0x1111;
    test_thresholds.spear_battery_level_high = 0x1111;
    test_thresholds.water_dispensed_period_high = 0x11111111;
    test_thresholds.water_dispensed_period_low = 0x11111111;
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));
   d46fe:	f88d 0020 	strb.w	r0, [sp, #32]

    uint32_t test_error = 0xAAAAAAAA;
    uint32_t ret_test_error = 0;
    igh_eeprom_update_errors(test_error);
   d4702:	f04f 30aa 	mov.w	r0, #2863311530	; 0xaaaaaaaa
   d4706:	f7ff fef7 	bl	d44f8 <_Z24igh_eeprom_update_errorsm>
    igh_eeprom_get_errors(&ret_test_error);
   d470a:	4620      	mov	r0, r4
   d470c:	f7ff ff7a 	bl	d4604 <_Z21igh_eeprom_get_errorsPm>

    return igh_eeprom_save_system_settings(&test_system_settings)
   d4710:	a815      	add	r0, sp, #84	; 0x54
   d4712:	f7ff ff26 	bl	d4562 <_Z31igh_eeprom_save_system_settingsP15system_settings>
           && igh_eeprom_save_threshold_settings(&test_thresholds)
           && (ret_test_error == test_error);
   d4716:	b908      	cbnz	r0, d471c <_Z16igh_eeproom_testv+0xf4>
   d4718:	2000      	movs	r0, #0
   d471a:	e009      	b.n	d4730 <_Z16igh_eeproom_testv+0x108>
    uint32_t ret_test_error = 0;
    igh_eeprom_update_errors(test_error);
    igh_eeprom_get_errors(&ret_test_error);

    return igh_eeprom_save_system_settings(&test_system_settings)
           && igh_eeprom_save_threshold_settings(&test_thresholds)
   d471c:	a808      	add	r0, sp, #32
   d471e:	f7ff ff5b 	bl	d45d8 <_Z34igh_eeprom_save_threshold_settingsP10thresholds>
   d4722:	2800      	cmp	r0, #0
   d4724:	d0f8      	beq.n	d4718 <_Z16igh_eeproom_testv+0xf0>
           && (ret_test_error == test_error);
   d4726:	9800      	ldr	r0, [sp, #0]
   d4728:	f1a0 33aa 	sub.w	r3, r0, #2863311530	; 0xaaaaaaaa
   d472c:	4258      	negs	r0, r3
   d472e:	4158      	adcs	r0, r3
}
   d4730:	b025      	add	sp, #148	; 0x94
   d4732:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4734:	000d92ff 	.word	0x000d92ff
   d4738:	000d930b 	.word	0x000d930b

000d473c <_GLOBAL__sub_I__Z31igh_eeprom_save_system_settingsP15system_settings>:
   d473c:	f002 b8f0 	b.w	d6920 <HAL_Pin_Map>

000d4740 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d4740:	6803      	ldr	r3, [r0, #0]
   d4742:	4718      	bx	r3

000d4744 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4744:	2a01      	cmp	r2, #1
   d4746:	d002      	beq.n	d474e <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d4748:	2a02      	cmp	r2, #2
   d474a:	d002      	beq.n	d4752 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d474c:	e004      	b.n	d4758 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d474e:	6001      	str	r1, [r0, #0]
	      break;
   d4750:	e002      	b.n	d4758 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d4752:	680b      	ldr	r3, [r1, #0]
   d4754:	b100      	cbz	r0, d4758 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d4756:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4758:	2000      	movs	r0, #0
   d475a:	4770      	bx	lr

000d475c <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d475c:	6943      	ldr	r3, [r0, #20]
   d475e:	b113      	cbz	r3, d4766 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4760:	6983      	ldr	r3, [r0, #24]
   d4762:	300c      	adds	r0, #12
   d4764:	4718      	bx	r3
   d4766:	4770      	bx	lr

000d4768 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4768:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d476a:	2100      	movs	r1, #0
   d476c:	4604      	mov	r4, r0
   d476e:	4608      	mov	r0, r1
   d4770:	f002 f9ae 	bl	d6ad0 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4774:	a902      	add	r1, sp, #8
   d4776:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4778:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d477a:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d477e:	f002 f9bf 	bl	d6b00 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d4782:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4784:	b10c      	cbz	r4, d478a <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d4786:	2301      	movs	r3, #1
   d4788:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d478a:	2100      	movs	r1, #0
   d478c:	2001      	movs	r0, #1
   d478e:	f002 f99f 	bl	d6ad0 <os_thread_scheduling>
            }
        }
        if (t) {
   d4792:	b12c      	cbz	r4, d47a0 <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d4794:	6823      	ldr	r3, [r4, #0]
   d4796:	4620      	mov	r0, r4
   d4798:	689b      	ldr	r3, [r3, #8]
   d479a:	4798      	blx	r3
            t->running = false;
   d479c:	2300      	movs	r3, #0
   d479e:	7123      	strb	r3, [r4, #4]
        }
    }
   d47a0:	b002      	add	sp, #8
   d47a2:	bd10      	pop	{r4, pc}

000d47a4 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d47a4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d47a6:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d47a8:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d47aa:	b113      	cbz	r3, d47b2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d47ac:	2203      	movs	r2, #3
   d47ae:	4601      	mov	r1, r0
   d47b0:	4798      	blx	r3
    }
   d47b2:	4620      	mov	r0, r4
   d47b4:	bd10      	pop	{r4, pc}

000d47b6 <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d47b6:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d47b8:	6880      	ldr	r0, [r0, #8]
   d47ba:	2300      	movs	r3, #0
   d47bc:	b138      	cbz	r0, d47ce <_ZN5Timer5_stopEjb+0x18>
   d47be:	e88d 000a 	stmia.w	sp, {r1, r3}
   d47c2:	2102      	movs	r1, #2
   d47c4:	f002 f9a4 	bl	d6b10 <os_timer_change>
   d47c8:	fab0 f080 	clz	r0, r0
   d47cc:	0940      	lsrs	r0, r0, #5
    }
   d47ce:	b003      	add	sp, #12
   d47d0:	f85d fb04 	ldr.w	pc, [sp], #4

000d47d4 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d47d4:	b538      	push	{r3, r4, r5, lr}
   d47d6:	4b10      	ldr	r3, [pc, #64]	; (d4818 <_ZN5TimerD1Ev+0x44>)
   d47d8:	6003      	str	r3, [r0, #0]
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d47da:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d47dc:	4604      	mov	r4, r0
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d47de:	b1a3      	cbz	r3, d480a <_ZN5TimerD1Ev+0x36>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d47e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d47e4:	2200      	movs	r2, #0
   d47e6:	f7ff ffe6 	bl	d47b6 <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d47ea:	2100      	movs	r1, #0
   d47ec:	68a0      	ldr	r0, [r4, #8]
   d47ee:	f002 f9a7 	bl	d6b40 <os_timer_set_id>
            while (running) {
   d47f2:	7923      	ldrb	r3, [r4, #4]
   d47f4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d47f8:	b113      	cbz	r3, d4800 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d47fa:	f002 f951 	bl	d6aa0 <os_thread_yield>
   d47fe:	e7f8      	b.n	d47f2 <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d4800:	4629      	mov	r1, r5
   d4802:	68a0      	ldr	r0, [r4, #8]
   d4804:	f002 f974 	bl	d6af0 <os_timer_destroy>
            handle = nullptr;
   d4808:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d480a:	f104 000c 	add.w	r0, r4, #12
   d480e:	f7ff ffc9 	bl	d47a4 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d4812:	4620      	mov	r0, r4
   d4814:	bd38      	pop	{r3, r4, r5, pc}
   d4816:	bf00      	nop
   d4818:	000d9324 	.word	0x000d9324

000d481c <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d481c:	b510      	push	{r4, lr}
   d481e:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d4820:	f7ff ffd8 	bl	d47d4 <_ZN5TimerD1Ev>
   d4824:	4620      	mov	r0, r4
   d4826:	211c      	movs	r1, #28
   d4828:	f003 fdec 	bl	d8404 <_ZdlPvj>
   d482c:	4620      	mov	r0, r4
   d482e:	bd10      	pop	{r4, pc}

000d4830 <_Z32igh_hardware_service_valve_statev>:
    current_valve_position = VALVE_CLOSE;
}

void igh_hardware_service_valve_state(void)
{
    digitalWrite(IGH_IRRIGATION_VALVE, current_valve_position);
   d4830:	4b02      	ldr	r3, [pc, #8]	; (d483c <_Z32igh_hardware_service_valve_statev+0xc>)
   d4832:	2007      	movs	r0, #7
   d4834:	7819      	ldrb	r1, [r3, #0]
   d4836:	f003 bd16 	b.w	d8266 <digitalWrite>
   d483a:	bf00      	nop
   d483c:	2003de14 	.word	0x2003de14

000d4840 <_Z20igh_hardware_servicev>:
    igh_hardware_vlave_setup();
}

void igh_hardware_service(void)
{
    igh_hardware_service_valve_state();
   d4840:	f7ff bff6 	b.w	d4830 <_Z32igh_hardware_service_valve_statev>

000d4844 <_Z29igh_hardware_test_valve_statev>:
{
    digitalWrite(IGH_IRRIGATION_VALVE, current_valve_position);
}

uint8_t igh_hardware_test_valve_state(void)
{
   d4844:	b508      	push	{r3, lr}
    return digitalRead(IGH_IRRIGATION_VALVE);
   d4846:	2007      	movs	r0, #7
   d4848:	f003 fd26 	bl	d8298 <digitalRead>
}
   d484c:	b2c0      	uxtb	r0, r0
   d484e:	bd08      	pop	{r3, pc}

000d4850 <_Z26igh_boron_toggle_boron_ledh>:


/* Onboard LED APIs */
void igh_boron_toggle_boron_led(uint8_t _state)
{
    digitalWrite(BORON_LED, _state);
   d4850:	4601      	mov	r1, r0
   d4852:	2007      	movs	r0, #7
   d4854:	f003 bd07 	b.w	d8266 <digitalWrite>

000d4858 <_Z18igh_hardware_setupv>:
static void igh_hardware_irrigiation_button_setup(void);
static void igh_hardware_onboard_led_setup(void);
static void igh_hardware_vlave_setup(void);

void igh_hardware_setup(void)
{
   d4858:	b513      	push	{r0, r1, r4, lr}


/* Button APIs */
static void igh_hardware_irrigiation_button_setup(void)
{
    pinMode(IGH_IRRIGATION_BUTTON, INPUT_PULLUP);
   d485a:	2102      	movs	r1, #2
   d485c:	2005      	movs	r0, #5
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d485e:	4c12      	ldr	r4, [pc, #72]	; (d48a8 <_Z18igh_hardware_setupv+0x50>)
   d4860:	f003 fcf0 	bl	d8244 <pinMode>
   d4864:	2200      	movs	r2, #0
   d4866:	4611      	mov	r1, r2
   d4868:	4620      	mov	r0, r4
   d486a:	f7ff ffa4 	bl	d47b6 <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d486e:	68a0      	ldr	r0, [r4, #8]
   d4870:	b140      	cbz	r0, d4884 <_Z18igh_hardware_setupv+0x2c>
   d4872:	2300      	movs	r3, #0
   d4874:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d4878:	e88d 000c 	stmia.w	sp, {r2, r3}
   d487c:	4619      	mov	r1, r3
   d487e:	461a      	mov	r2, r3
   d4880:	f002 f946 	bl	d6b10 <os_timer_change>
    igh_button_timer.start();
    igh_button_sec_counter = 0;
   d4884:	4b09      	ldr	r3, [pc, #36]	; (d48ac <_Z18igh_hardware_setupv+0x54>)
   d4886:	2400      	movs	r4, #0
    digitalWrite(BORON_LED, _state);
}

static void igh_hardware_onboard_led_setup(void)
{
    pinMode(BORON_LED, OUTPUT);
   d4888:	2101      	movs	r1, #1
   d488a:	2007      	movs	r0, #7
/* Button APIs */
static void igh_hardware_irrigiation_button_setup(void)
{
    pinMode(IGH_IRRIGATION_BUTTON, INPUT_PULLUP);
    igh_button_timer.start();
    igh_button_sec_counter = 0;
   d488c:	701c      	strb	r4, [r3, #0]
    digitalWrite(BORON_LED, _state);
}

static void igh_hardware_onboard_led_setup(void)
{
    pinMode(BORON_LED, OUTPUT);
   d488e:	f003 fcd9 	bl	d8244 <pinMode>
    igh_boron_toggle_boron_led(OFF);
   d4892:	4620      	mov	r0, r4
   d4894:	f7ff ffdc 	bl	d4850 <_Z26igh_boron_toggle_boron_ledh>


/* Valve control APIs */
static void igh_hardware_vlave_setup(void)
{
    pinMode(IGH_IRRIGATION_VALVE, OUTPUT);
   d4898:	2101      	movs	r1, #1
   d489a:	2007      	movs	r0, #7
   d489c:	f003 fcd2 	bl	d8244 <pinMode>
    current_valve_position = VALVE_CLOSE;
   d48a0:	4b03      	ldr	r3, [pc, #12]	; (d48b0 <_Z18igh_hardware_setupv+0x58>)
   d48a2:	701c      	strb	r4, [r3, #0]
void igh_hardware_setup(void)
{
    igh_hardware_irrigiation_button_setup();
    igh_hardware_onboard_led_setup();
    igh_hardware_vlave_setup();
}
   d48a4:	b002      	add	sp, #8
   d48a6:	bd10      	pop	{r4, pc}
   d48a8:	2003de18 	.word	0x2003de18
   d48ac:	2003de15 	.word	0x2003de15
   d48b0:	2003de14 	.word	0x2003de14

000d48b4 <_Z21igh_boron_read_buttonv>:
    igh_button_timer.start();
    igh_button_sec_counter = 0;
}

uint8_t igh_boron_read_button(void)
{
   d48b4:	b508      	push	{r3, lr}
    return digitalRead(IGH_IRRIGATION_BUTTON);
   d48b6:	2005      	movs	r0, #5
   d48b8:	f003 fcee 	bl	d8298 <digitalRead>
}
   d48bc:	b2c0      	uxtb	r0, r0
   d48be:	bd08      	pop	{r3, pc}

000d48c0 <_Z31igh_boron_button_press_durationv>:

void igh_boron_button_press_duration(void)
{
   d48c0:	b508      	push	{r3, lr}
    if(!igh_boron_read_button())
   d48c2:	f7ff fff7 	bl	d48b4 <_Z21igh_boron_read_buttonv>
   d48c6:	4b04      	ldr	r3, [pc, #16]	; (d48d8 <_Z31igh_boron_button_press_durationv+0x18>)
   d48c8:	b910      	cbnz	r0, d48d0 <_Z31igh_boron_button_press_durationv+0x10>
    {
        igh_button_sec_counter++;
   d48ca:	781a      	ldrb	r2, [r3, #0]
   d48cc:	3201      	adds	r2, #1
   d48ce:	e000      	b.n	d48d2 <_Z31igh_boron_button_press_durationv+0x12>
    }
    else
    {
        igh_button_sec_counter = 0;
   d48d0:	2200      	movs	r2, #0
   d48d2:	701a      	strb	r2, [r3, #0]
   d48d4:	bd08      	pop	{r3, pc}
   d48d6:	bf00      	nop
   d48d8:	2003de15 	.word	0x2003de15

000d48dc <_GLOBAL__sub_I_igh_button_sec_counter>:
    } 
   d48dc:	b570      	push	{r4, r5, r6, lr}
   d48de:	b088      	sub	sp, #32
   d48e0:	f002 f81e 	bl	d6920 <HAL_Pin_Map>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d48e4:	4b19      	ldr	r3, [pc, #100]	; (d494c <_GLOBAL__sub_I_igh_button_sec_counter+0x70>)
   d48e6:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d48e8:	ad04      	add	r5, sp, #16
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d48ea:	4c19      	ldr	r4, [pc, #100]	; (d4950 <_GLOBAL__sub_I_igh_button_sec_counter+0x74>)
   d48ec:	4b19      	ldr	r3, [pc, #100]	; (d4954 <_GLOBAL__sub_I_igh_button_sec_counter+0x78>)
   d48ee:	6023      	str	r3, [r4, #0]
   d48f0:	e895 0003 	ldmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d48f4:	f104 020c 	add.w	r2, r4, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d48f8:	ae02      	add	r6, sp, #8
   d48fa:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d48fe:	e892 0003 	ldmia.w	r2, {r0, r1}
   d4902:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4906:	e896 0003 	ldmia.w	r6, {r0, r1}
   d490a:	e882 0003 	stmia.w	r2, {r0, r1}
   d490e:	4a12      	ldr	r2, [pc, #72]	; (d4958 <_GLOBAL__sub_I_igh_button_sec_counter+0x7c>)
   d4910:	6162      	str	r2, [r4, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4912:	69a2      	ldr	r2, [r4, #24]
   d4914:	9207      	str	r2, [sp, #28]
   d4916:	2300      	movs	r3, #0
      __b = _GLIBCXX_MOVE(__tmp);
   d4918:	4a10      	ldr	r2, [pc, #64]	; (d495c <_GLOBAL__sub_I_igh_button_sec_counter+0x80>)
   d491a:	7123      	strb	r3, [r4, #4]
   d491c:	60a3      	str	r3, [r4, #8]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d491e:	9306      	str	r3, [sp, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   d4920:	61a2      	str	r2, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d4922:	9301      	str	r3, [sp, #4]
   d4924:	9300      	str	r3, [sp, #0]
   d4926:	4a0e      	ldr	r2, [pc, #56]	; (d4960 <_GLOBAL__sub_I_igh_button_sec_counter+0x84>)
   d4928:	4623      	mov	r3, r4
   d492a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d492e:	f104 0008 	add.w	r0, r4, #8
   d4932:	f002 f8d5 	bl	d6ae0 <os_timer_create>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4936:	4628      	mov	r0, r5
   d4938:	f7ff ff34 	bl	d47a4 <_ZNSt14_Function_baseD1Ev>
#include "Particle.h"
#include "igh_hardware.h"

// button global variables
uint8_t igh_button_sec_counter;
Timer igh_button_timer(1000, igh_boron_button_press_duration);
   d493c:	4a09      	ldr	r2, [pc, #36]	; (d4964 <_GLOBAL__sub_I_igh_button_sec_counter+0x88>)
   d493e:	490a      	ldr	r1, [pc, #40]	; (d4968 <_GLOBAL__sub_I_igh_button_sec_counter+0x8c>)
   d4940:	4620      	mov	r0, r4
   d4942:	f003 fd51 	bl	d83e8 <__aeabi_atexit>
    }
    else
    {
        igh_button_sec_counter = 0;
    } 
   d4946:	b008      	add	sp, #32
   d4948:	bd70      	pop	{r4, r5, r6, pc}
   d494a:	bf00      	nop
   d494c:	000d48c1 	.word	0x000d48c1
   d4950:	2003de18 	.word	0x2003de18
   d4954:	000d9324 	.word	0x000d9324
   d4958:	000d4745 	.word	0x000d4745
   d495c:	000d4741 	.word	0x000d4741
   d4960:	000d4769 	.word	0x000d4769
   d4964:	2003ddfc 	.word	0x2003ddfc
   d4968:	000d47d5 	.word	0x000d47d5

000d496c <_ZN14CellularSignalD1Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d496c:	4770      	bx	lr

000d496e <_ZN14CellularSignalD0Ev>:
   d496e:	b510      	push	{r4, lr}
   d4970:	2128      	movs	r1, #40	; 0x28
   d4972:	4604      	mov	r4, r0
   d4974:	f003 fd46 	bl	d8404 <_ZdlPvj>
   d4978:	4620      	mov	r0, r4
   d497a:	bd10      	pop	{r4, pc}

000d497c <_Z19igh_boron_sync_timev>:
float battery_voltage, battery_SOC;
unsigned long unix_time;

/* Functions */
void igh_boron_sync_time(void)
{
   d497c:	b510      	push	{r4, lr}
   d497e:	f002 f857 	bl	d6a30 <HAL_Timer_Get_Milli_Seconds>
    if((millis() - lastSync > ONE_DAY_MILLIS))
   d4982:	4b08      	ldr	r3, [pc, #32]	; (d49a4 <_Z19igh_boron_sync_timev+0x28>)
   d4984:	681a      	ldr	r2, [r3, #0]
   d4986:	1a80      	subs	r0, r0, r2
   d4988:	4a07      	ldr	r2, [pc, #28]	; (d49a8 <_Z19igh_boron_sync_timev+0x2c>)
   d498a:	4290      	cmp	r0, r2
   d498c:	461c      	mov	r4, r3
   d498e:	d908      	bls.n	d49a2 <_Z19igh_boron_sync_timev+0x26>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4990:	f002 fa52 	bl	d6e38 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d4994:	b110      	cbz	r0, d499c <_Z19igh_boron_sync_timev+0x20>
            return false;
        }
        return spark_sync_time(NULL);
   d4996:	2000      	movs	r0, #0
   d4998:	f002 fa56 	bl	d6e48 <spark_sync_time>
   d499c:	f002 f848 	bl	d6a30 <HAL_Timer_Get_Milli_Seconds>
    {
        Particle.syncTime();
        lastSync = millis(); 
   d49a0:	6020      	str	r0, [r4, #0]
   d49a2:	bd10      	pop	{r4, pc}
   d49a4:	2003de5c 	.word	0x2003de5c
   d49a8:	05265c00 	.word	0x05265c00

000d49ac <_Z13igh_boron_SoCv>:
    return Time.now();
}

float igh_boron_SoC(void)
{
    return fuel.getSoC();
   d49ac:	4801      	ldr	r0, [pc, #4]	; (d49b4 <_Z13igh_boron_SoCv+0x8>)
   d49ae:	f002 bf69 	b.w	d7884 <_ZN9FuelGauge6getSoCEv>
   d49b2:	bf00      	nop
   d49b4:	2003de60 	.word	0x2003de60

000d49b8 <_Z17igh_boron_voltagev>:
}

float igh_boron_voltage(void)
{
    return fuel.getVCell();
   d49b8:	4801      	ldr	r0, [pc, #4]	; (d49c0 <_Z17igh_boron_voltagev+0x8>)
   d49ba:	f002 bf4d 	b.w	d7858 <_ZN9FuelGauge8getVCellEv>
   d49be:	bf00      	nop
   d49c0:	2003de60 	.word	0x2003de60

000d49c4 <_Z26igh_boron_get_celular_datav>:
}

void igh_boron_get_celular_data(void)
{
   d49c4:	b530      	push	{r4, r5, lr}
   d49c6:	b08b      	sub	sp, #44	; 0x2c
    signal = Cellular.RSSI();
   d49c8:	4668      	mov	r0, sp
#include "cellular_enums_hal.h"

/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
   d49ca:	4c09      	ldr	r4, [pc, #36]	; (d49f0 <_Z26igh_boron_get_celular_datav+0x2c>)
   d49cc:	4909      	ldr	r1, [pc, #36]	; (d49f4 <_Z26igh_boron_get_celular_datav+0x30>)
   d49ce:	f003 f935 	bl	d7c3c <_ZN5spark13CellularClass4RSSIEv>
   d49d2:	9b02      	ldr	r3, [sp, #8]
   d49d4:	60a3      	str	r3, [r4, #8]
   d49d6:	ad04      	add	r5, sp, #16
   d49d8:	9b03      	ldr	r3, [sp, #12]
   d49da:	60e3      	str	r3, [r4, #12]
   d49dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d49de:	3410      	adds	r4, #16
   d49e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d49e2:	e895 0003 	ldmia.w	r5, {r0, r1}
   d49e6:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d49ea:	b00b      	add	sp, #44	; 0x2c
   d49ec:	bd30      	pop	{r4, r5, pc}
   d49ee:	bf00      	nop
   d49f0:	2003de34 	.word	0x2003de34
   d49f4:	2003e3e4 	.word	0x2003e3e4

000d49f8 <_Z12igh_boron_ssv>:
    return signal.getQuality();
}

float igh_boron_ss(void)
{
    return signal.getQuality();
   d49f8:	4801      	ldr	r0, [pc, #4]	; (d4a00 <_Z12igh_boron_ssv+0x8>)
   d49fa:	f002 be5b 	b.w	d76b4 <_ZNK14CellularSignal10getQualityEv>
   d49fe:	bf00      	nop
   d4a00:	2003de34 	.word	0x2003de34

000d4a04 <_Z30igh_boron_connecetd_to_networkv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4a04:	4b02      	ldr	r3, [pc, #8]	; (d4a10 <_Z30igh_boron_connecetd_to_networkv+0xc>)
   d4a06:	2200      	movs	r2, #0
   d4a08:	4611      	mov	r1, r2
   d4a0a:	6858      	ldr	r0, [r3, #4]
   d4a0c:	f002 b9d4 	b.w	d6db8 <network_ready>
   d4a10:	2003e3e4 	.word	0x2003e3e4

000d4a14 <_Z15igh_boron_setupv>:
{
    return Particle.connected();;
}

void igh_boron_setup(void)
{
   d4a14:	b508      	push	{r3, lr}
   d4a16:	f002 f80b 	bl	d6a30 <HAL_Timer_Get_Milli_Seconds>
    lastSync = millis();
   d4a1a:	4b01      	ldr	r3, [pc, #4]	; (d4a20 <_Z15igh_boron_setupv+0xc>)
   d4a1c:	6018      	str	r0, [r3, #0]
   d4a1e:	bd08      	pop	{r3, pc}
   d4a20:	2003de5c 	.word	0x2003de5c

000d4a24 <_Z17igh_boron_servicev>:
}

void igh_boron_service(void)
{
   d4a24:	b508      	push	{r3, lr}
    igh_boron_sync_time();
   d4a26:	f7ff ffa9 	bl	d497c <_Z19igh_boron_sync_timev>
    igh_boron_get_celular_data();
}
   d4a2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void igh_boron_service(void)
{
    igh_boron_sync_time();
    igh_boron_get_celular_data();
   d4a2e:	f7ff bfc9 	b.w	d49c4 <_Z26igh_boron_get_celular_datav>
	...

000d4a34 <_Z21igh_boron_test_devicev>:
}

void igh_boron_test_device(void)
{
   d4a34:	b510      	push	{r4, lr}
    Serial.print("\nUnix Time:      "); Serial.println(igh_boron_unix_time());
   d4a36:	f003 f8a7 	bl	d7b88 <_Z16_fetch_usbserialv>
   d4a3a:	4937      	ldr	r1, [pc, #220]	; (d4b18 <_Z21igh_boron_test_devicev+0xe4>)
   d4a3c:	f002 fc60 	bl	d7300 <_ZN5Print5printEPKc>
   d4a40:	f003 f8a2 	bl	d7b88 <_Z16_fetch_usbserialv>
   d4a44:	4604      	mov	r4, r0
    }
}

unsigned long igh_boron_unix_time(void)
{
    return Time.now();
   d4a46:	f002 fde1 	bl	d760c <_ZN9TimeClass3nowEv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4a4a:	220a      	movs	r2, #10
   d4a4c:	4601      	mov	r1, r0
   d4a4e:	4620      	mov	r0, r4
   d4a50:	f002 fc73 	bl	d733a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4a54:	4620      	mov	r0, r4
   d4a56:	f002 fc5a 	bl	d730e <_ZN5Print7printlnEv>
}

void igh_boron_test_device(void)
{
    Serial.print("\nUnix Time:      "); Serial.println(igh_boron_unix_time());
    Serial.print("cloud status:     "); Serial.println(igh_boron_connected_to_cloud());
   d4a5a:	f003 f895 	bl	d7b88 <_Z16_fetch_usbserialv>
   d4a5e:	492f      	ldr	r1, [pc, #188]	; (d4b1c <_Z21igh_boron_test_devicev+0xe8>)
   d4a60:	f002 fc4e 	bl	d7300 <_ZN5Print5printEPKc>
   d4a64:	f003 f890 	bl	d7b88 <_Z16_fetch_usbserialv>
   d4a68:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4a6a:	f002 f9e5 	bl	d6e38 <spark_cloud_flag_connected>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4a6e:	220a      	movs	r2, #10
   d4a70:	4601      	mov	r1, r0
   d4a72:	4620      	mov	r0, r4
   d4a74:	f002 fc61 	bl	d733a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4a78:	4620      	mov	r0, r4
   d4a7a:	f002 fc48 	bl	d730e <_ZN5Print7printlnEv>
    Serial.print("network status:   "); Serial.println(igh_boron_connecetd_to_network());
   d4a7e:	f003 f883 	bl	d7b88 <_Z16_fetch_usbserialv>
   d4a82:	4927      	ldr	r1, [pc, #156]	; (d4b20 <_Z21igh_boron_test_devicev+0xec>)
   d4a84:	f002 fc3c 	bl	d7300 <_ZN5Print5printEPKc>
   d4a88:	f003 f87e 	bl	d7b88 <_Z16_fetch_usbserialv>
   d4a8c:	4604      	mov	r4, r0
   d4a8e:	f7ff ffb9 	bl	d4a04 <_Z30igh_boron_connecetd_to_networkv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4a92:	220a      	movs	r2, #10
   d4a94:	4601      	mov	r1, r0
   d4a96:	4620      	mov	r0, r4
   d4a98:	f002 fc4f 	bl	d733a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4a9c:	4620      	mov	r0, r4
   d4a9e:	f002 fc36 	bl	d730e <_ZN5Print7printlnEv>
    Serial.print("signal strength:  "); Serial.println(igh_boron_ss());
   d4aa2:	f003 f871 	bl	d7b88 <_Z16_fetch_usbserialv>
   d4aa6:	491f      	ldr	r1, [pc, #124]	; (d4b24 <_Z21igh_boron_test_devicev+0xf0>)
   d4aa8:	f002 fc2a 	bl	d7300 <_ZN5Print5printEPKc>
   d4aac:	f003 f86c 	bl	d7b88 <_Z16_fetch_usbserialv>
   d4ab0:	4604      	mov	r4, r0
   d4ab2:	f7ff ffa1 	bl	d49f8 <_Z12igh_boron_ssv>
   d4ab6:	2102      	movs	r1, #2
   d4ab8:	4620      	mov	r0, r4
   d4aba:	f002 fd28 	bl	d750e <_ZN5Print7printlnEfi>
    Serial.print("signal quality:   "); Serial.println(igh_boron_sq());
   d4abe:	f003 f863 	bl	d7b88 <_Z16_fetch_usbserialv>
   d4ac2:	4919      	ldr	r1, [pc, #100]	; (d4b28 <_Z21igh_boron_test_devicev+0xf4>)
   d4ac4:	f002 fc1c 	bl	d7300 <_ZN5Print5printEPKc>
   d4ac8:	f003 f85e 	bl	d7b88 <_Z16_fetch_usbserialv>
   d4acc:	4604      	mov	r4, r0
   d4ace:	f7ff ff93 	bl	d49f8 <_Z12igh_boron_ssv>
   d4ad2:	2102      	movs	r1, #2
   d4ad4:	4620      	mov	r0, r4
   d4ad6:	f002 fd1a 	bl	d750e <_ZN5Print7printlnEfi>
    Serial.print("Battery Voltage:  "); Serial.println(igh_boron_voltage());
   d4ada:	f003 f855 	bl	d7b88 <_Z16_fetch_usbserialv>
   d4ade:	4913      	ldr	r1, [pc, #76]	; (d4b2c <_Z21igh_boron_test_devicev+0xf8>)
   d4ae0:	f002 fc0e 	bl	d7300 <_ZN5Print5printEPKc>
   d4ae4:	f003 f850 	bl	d7b88 <_Z16_fetch_usbserialv>
   d4ae8:	4604      	mov	r4, r0
   d4aea:	f7ff ff65 	bl	d49b8 <_Z17igh_boron_voltagev>
   d4aee:	2102      	movs	r1, #2
   d4af0:	4620      	mov	r0, r4
   d4af2:	f002 fd0c 	bl	d750e <_ZN5Print7printlnEfi>
    Serial.print("Battery SOC:      "); Serial.println(igh_boron_SoC());
   d4af6:	f003 f847 	bl	d7b88 <_Z16_fetch_usbserialv>
   d4afa:	490d      	ldr	r1, [pc, #52]	; (d4b30 <_Z21igh_boron_test_devicev+0xfc>)
   d4afc:	f002 fc00 	bl	d7300 <_ZN5Print5printEPKc>
   d4b00:	f003 f842 	bl	d7b88 <_Z16_fetch_usbserialv>
   d4b04:	4604      	mov	r4, r0
   d4b06:	f7ff ff51 	bl	d49ac <_Z13igh_boron_SoCv>
   d4b0a:	4620      	mov	r0, r4
   d4b0c:	2102      	movs	r1, #2
}
   d4b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.print("cloud status:     "); Serial.println(igh_boron_connected_to_cloud());
    Serial.print("network status:   "); Serial.println(igh_boron_connecetd_to_network());
    Serial.print("signal strength:  "); Serial.println(igh_boron_ss());
    Serial.print("signal quality:   "); Serial.println(igh_boron_sq());
    Serial.print("Battery Voltage:  "); Serial.println(igh_boron_voltage());
    Serial.print("Battery SOC:      "); Serial.println(igh_boron_SoC());
   d4b12:	f002 bcfc 	b.w	d750e <_ZN5Print7printlnEfi>
   d4b16:	bf00      	nop
   d4b18:	000d9330 	.word	0x000d9330
   d4b1c:	000d9342 	.word	0x000d9342
   d4b20:	000d9355 	.word	0x000d9355
   d4b24:	000d9368 	.word	0x000d9368
   d4b28:	000d937b 	.word	0x000d937b
   d4b2c:	000d938e 	.word	0x000d938e
   d4b30:	000d93a1 	.word	0x000d93a1

000d4b34 <_GLOBAL__sub_I_lastSync>:
}
   d4b34:	b570      	push	{r4, r5, r6, lr}
   d4b36:	f001 fef3 	bl	d6920 <HAL_Pin_Map>
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d4b3a:	4c10      	ldr	r4, [pc, #64]	; (d4b7c <_GLOBAL__sub_I_lastSync+0x48>)
   d4b3c:	4b10      	ldr	r3, [pc, #64]	; (d4b80 <_GLOBAL__sub_I_lastSync+0x4c>)
   d4b3e:	6023      	str	r3, [r4, #0]
   d4b40:	2500      	movs	r5, #0
   d4b42:	3328      	adds	r3, #40	; 0x28
   d4b44:	4629      	mov	r1, r5
#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)

unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
   d4b46:	4e0f      	ldr	r6, [pc, #60]	; (d4b84 <_GLOBAL__sub_I_lastSync+0x50>)
   d4b48:	6063      	str	r3, [r4, #4]
   d4b4a:	2218      	movs	r2, #24
   d4b4c:	f104 0010 	add.w	r0, r4, #16
   d4b50:	60a5      	str	r5, [r4, #8]
   d4b52:	60e5      	str	r5, [r4, #12]
   d4b54:	f004 fada 	bl	d910c <memset>
   d4b58:	4620      	mov	r0, r4
float signal_quality, signal_strength;
FuelGauge fuel;
   d4b5a:	4c0b      	ldr	r4, [pc, #44]	; (d4b88 <_GLOBAL__sub_I_lastSync+0x54>)
#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)

unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
   d4b5c:	490b      	ldr	r1, [pc, #44]	; (d4b8c <_GLOBAL__sub_I_lastSync+0x58>)
   d4b5e:	4632      	mov	r2, r6
   d4b60:	f003 fc42 	bl	d83e8 <__aeabi_atexit>
float signal_quality, signal_strength;
FuelGauge fuel;
   d4b64:	4629      	mov	r1, r5
   d4b66:	4620      	mov	r0, r4
   d4b68:	f002 fe36 	bl	d77d8 <_ZN9FuelGaugeC1Eb>
   d4b6c:	4632      	mov	r2, r6
   d4b6e:	4620      	mov	r0, r4
   d4b70:	4907      	ldr	r1, [pc, #28]	; (d4b90 <_GLOBAL__sub_I_lastSync+0x5c>)
    Serial.print("network status:   "); Serial.println(igh_boron_connecetd_to_network());
    Serial.print("signal strength:  "); Serial.println(igh_boron_ss());
    Serial.print("signal quality:   "); Serial.println(igh_boron_sq());
    Serial.print("Battery Voltage:  "); Serial.println(igh_boron_voltage());
    Serial.print("Battery SOC:      "); Serial.println(igh_boron_SoC());
}
   d4b72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
float signal_quality, signal_strength;
FuelGauge fuel;
   d4b76:	f003 bc37 	b.w	d83e8 <__aeabi_atexit>
   d4b7a:	bf00      	nop
   d4b7c:	2003de34 	.word	0x2003de34
   d4b80:	000d95b8 	.word	0x000d95b8
   d4b84:	2003ddfc 	.word	0x2003ddfc
   d4b88:	2003de60 	.word	0x2003de60
   d4b8c:	000d496d 	.word	0x000d496d
   d4b90:	000d77f7 	.word	0x000d77f7

000d4b94 <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
   d4b94:	f001 bec4 	b.w	d6920 <HAL_Pin_Map>

000d4b98 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d4b98:	7c03      	ldrb	r3, [r0, #16]
   d4b9a:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d4b9e:	4602      	mov	r2, r0
   d4ba0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d4ba4:	b12b      	cbz	r3, d4bb2 <_ZN4File9availableEv+0x1a>
   d4ba6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d4ba8:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d4baa:	1a18      	subs	r0, r3, r0
   d4bac:	bf48      	it	mi
   d4bae:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d4bb2:	4770      	bx	lr

000d4bb4 <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
   d4bb4:	4770      	bx	lr

000d4bb6 <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d4bb6:	4770      	bx	lr

000d4bb8 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4bb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4bba:	4602      	mov	r2, r0
   d4bbc:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4bbe:	7913      	ldrb	r3, [r2, #4]
   d4bc0:	6895      	ldr	r5, [r2, #8]
   d4bc2:	b133      	cbz	r3, d4bd2 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d4bc4:	b93d      	cbnz	r5, d4bd6 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d4bc6:	490c      	ldr	r1, [pc, #48]	; (d4bf8 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d4bc8:	b004      	add	sp, #16
   d4bca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d4bce:	f002 bb97 	b.w	d7300 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d4bd2:	4b0a      	ldr	r3, [pc, #40]	; (d4bfc <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d4bd4:	e000      	b.n	d4bd8 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d4bd6:	4b0a      	ldr	r3, [pc, #40]	; (d4c00 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d4bd8:	7b16      	ldrb	r6, [r2, #12]
   d4bda:	4c0a      	ldr	r4, [pc, #40]	; (d4c04 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d4bdc:	490a      	ldr	r1, [pc, #40]	; (d4c08 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4bde:	7b52      	ldrb	r2, [r2, #13]
   d4be0:	9202      	str	r2, [sp, #8]
   d4be2:	2e01      	cmp	r6, #1
   d4be4:	bf08      	it	eq
   d4be6:	4621      	moveq	r1, r4
   d4be8:	9101      	str	r1, [sp, #4]
   d4bea:	9500      	str	r5, [sp, #0]
   d4bec:	4a07      	ldr	r2, [pc, #28]	; (d4c0c <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d4bee:	2100      	movs	r1, #0
   d4bf0:	f002 fc9c 	bl	d752c <_ZN5Print11printf_implEbPKcz>
  }
   d4bf4:	b004      	add	sp, #16
   d4bf6:	bd70      	pop	{r4, r5, r6, pc}
   d4bf8:	000d9411 	.word	0x000d9411
   d4bfc:	000d954d 	.word	0x000d954d
   d4c00:	000d9400 	.word	0x000d9400
   d4c04:	000d9409 	.word	0x000d9409
   d4c08:	000d940d 	.word	0x000d940d
   d4c0c:	000d9427 	.word	0x000d9427

000d4c10 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d4c10:	3010      	adds	r0, #16
   d4c12:	f001 b869 	b.w	d5ce8 <_ZN7FatFile4syncEv>

000d4c16 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d4c16:	3010      	adds	r0, #16
   d4c18:	f000 bf40 	b.w	d5a9c <_ZN7FatFile4peekEv>

000d4c1c <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d4c1c:	3010      	adds	r0, #16
   d4c1e:	f001 b903 	b.w	d5e28 <_ZN7FatFile5writeEPKvj>

000d4c22 <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d4c22:	3008      	adds	r0, #8
   d4c24:	f001 b900 	b.w	d5e28 <_ZN7FatFile5writeEPKvj>

000d4c28 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d4c28:	b507      	push	{r0, r1, r2, lr}
   d4c2a:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d4c2c:	2201      	movs	r2, #1
   d4c2e:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d4c32:	3010      	adds	r0, #16
   d4c34:	4619      	mov	r1, r3
   d4c36:	f001 f8f7 	bl	d5e28 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d4c3a:	b003      	add	sp, #12
   d4c3c:	f85d fb04 	ldr.w	pc, [sp], #4

000d4c40 <_ZN6SdFileD0Ev>:
   d4c40:	b510      	push	{r4, lr}
   d4c42:	212c      	movs	r1, #44	; 0x2c
   d4c44:	4604      	mov	r4, r0
   d4c46:	f003 fbdd 	bl	d8404 <_ZdlPvj>
   d4c4a:	4620      	mov	r0, r4
   d4c4c:	bd10      	pop	{r4, pc}

000d4c4e <_ZN4FileD0Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d4c4e:	b510      	push	{r4, lr}
   d4c50:	2134      	movs	r1, #52	; 0x34
   d4c52:	4604      	mov	r4, r0
   d4c54:	f003 fbd6 	bl	d8404 <_ZdlPvj>
   d4c58:	4620      	mov	r0, r4
   d4c5a:	bd10      	pop	{r4, pc}

000d4c5c <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d4c5c:	b507      	push	{r0, r1, r2, lr}
   d4c5e:	ab02      	add	r3, sp, #8
   d4c60:	2201      	movs	r2, #1
   d4c62:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d4c66:	3008      	adds	r0, #8
   d4c68:	4619      	mov	r1, r3
   d4c6a:	f001 f8dd 	bl	d5e28 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d4c6e:	b003      	add	sp, #12
   d4c70:	f85d fb04 	ldr.w	pc, [sp], #4

000d4c74 <_ZN7FatFile4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
   d4c74:	b507      	push	{r0, r1, r2, lr}
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d4c76:	2201      	movs	r2, #1
   d4c78:	f10d 0107 	add.w	r1, sp, #7
   d4c7c:	f000 fe5b 	bl	d5936 <_ZN7FatFile4readEPvj>
   d4c80:	2801      	cmp	r0, #1
   d4c82:	bf0c      	ite	eq
   d4c84:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d4c88:	f04f 30ff 	movne.w	r0, #4294967295
  }
   d4c8c:	b003      	add	sp, #12
   d4c8e:	f85d fb04 	ldr.w	pc, [sp], #4

000d4c92 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d4c92:	b508      	push	{r3, lr}
    return FatFile::read();
   d4c94:	3010      	adds	r0, #16
   d4c96:	f7ff ffed 	bl	d4c74 <_ZN7FatFile4readEv>
  }
   d4c9a:	bd08      	pop	{r3, pc}

000d4c9c <_ZN4File15rewindDirectoryEv>:
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (isDir()) {
   d4c9c:	7c03      	ldrb	r3, [r0, #16]
   d4c9e:	f013 0f70 	tst.w	r3, #112	; 0x70
   d4ca2:	d003      	beq.n	d4cac <_ZN4File15rewindDirectoryEv+0x10>
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d4ca4:	2100      	movs	r1, #0
   d4ca6:	3010      	adds	r0, #16
   d4ca8:	f000 bf28 	b.w	d5afc <_ZN7FatFile7seekSetEm>
   d4cac:	4770      	bx	lr
	...

000d4cb0 <_Z16igh_sd_log_setupv>:
 * convertedt to a character string
 * eg: 2E78FA2E.LOG
*/

uint8_t igh_sd_log_setup(void)
{
   d4cb0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4cb2:	4820      	ldr	r0, [pc, #128]	; (d4d34 <_Z16igh_sd_log_setupv+0x84>)
    if(sd_root.isOpen()) sd_root.close();
   d4cb4:	7a03      	ldrb	r3, [r0, #8]
   d4cb6:	b113      	cbz	r3, d4cbe <_Z16igh_sd_log_setupv+0xe>
   d4cb8:	3008      	adds	r0, #8
   d4cba:	f001 f84b 	bl	d5d54 <_ZN7FatFile5closeEv>
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4cbe:	4c1e      	ldr	r4, [pc, #120]	; (d4d38 <_Z16igh_sd_log_setupv+0x88>)
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d4cc0:	4b1e      	ldr	r3, [pc, #120]	; (d4d3c <_Z16igh_sd_log_setupv+0x8c>)
   d4cc2:	4a1f      	ldr	r2, [pc, #124]	; (d4d40 <_Z16igh_sd_log_setupv+0x90>)
   d4cc4:	9300      	str	r3, [sp, #0]
   d4cc6:	f504 668c 	add.w	r6, r4, #1120	; 0x460
   d4cca:	2300      	movs	r3, #0
   d4ccc:	f88d 3004 	strb.w	r3, [sp, #4]
   d4cd0:	9202      	str	r2, [sp, #8]
   d4cd2:	2501      	movs	r5, #1
   d4cd4:	f88d 300d 	strb.w	r3, [sp, #13]
   d4cd8:	220e      	movs	r2, #14
   d4cda:	466b      	mov	r3, sp
   d4cdc:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   d4ce0:	4630      	mov	r0, r6
   d4ce2:	f88d 500c 	strb.w	r5, [sp, #12]
   d4ce6:	f001 fbe7 	bl	d64b8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d4cea:	b300      	cbz	r0, d4d2e <_Z16igh_sd_log_setupv+0x7e>
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d4cec:	f204 403c 	addw	r0, r4, #1084	; 0x43c
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d4cf0:	6026      	str	r6, [r4, #0]
    vwd()->close();
   d4cf2:	f001 f82f 	bl	d5d54 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d4cf6:	4629      	mov	r1, r5
   d4cf8:	4620      	mov	r0, r4
   d4cfa:	f001 fa86 	bl	d620a <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d4cfe:	4601      	mov	r1, r0
   d4d00:	b180      	cbz	r0, d4d24 <_Z16igh_sd_log_setupv+0x74>
   d4d02:	4c0d      	ldr	r4, [pc, #52]	; (d4d38 <_Z16igh_sd_log_setupv+0x88>)
   d4d04:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   d4d08:	4621      	mov	r1, r4
   d4d0a:	4628      	mov	r0, r5
   d4d0c:	f000 fdfb 	bl	d5906 <_ZN7FatFile8openRootEP9FatVolume>
   d4d10:	b168      	cbz	r0, d4d2e <_Z16igh_sd_log_setupv+0x7e>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d4d12:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d4d16:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
   d4d1a:	bf16      	itet	ne
   d4d1c:	4b09      	ldrne	r3, [pc, #36]	; (d4d44 <_Z16igh_sd_log_setupv+0x94>)
   d4d1e:	4618      	moveq	r0, r3
   d4d20:	601d      	strne	r5, [r3, #0]
   d4d22:	e005      	b.n	d4d30 <_Z16igh_sd_log_setupv+0x80>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d4d24:	4620      	mov	r0, r4
   d4d26:	f001 fa70 	bl	d620a <_ZN9FatVolume4initEh>
   d4d2a:	2800      	cmp	r0, #0
   d4d2c:	d1e9      	bne.n	d4d02 <_Z16igh_sd_log_setupv+0x52>
   d4d2e:	2000      	movs	r0, #0
    return igh_sd.begin(IGH_SD_CS);
}
   d4d30:	b004      	add	sp, #16
   d4d32:	bd70      	pop	{r4, r5, r6, pc}
   d4d34:	2003e324 	.word	0x2003e324
   d4d38:	2003dea0 	.word	0x2003dea0
   d4d3c:	000d93bc 	.word	0x000d93bc
   d4d40:	02faf080 	.word	0x02faf080
   d4d44:	2003e384 	.word	0x2003e384

000d4d48 <_Z24igh_sd_log_get_file_namemPc>:
{
    igh_file.rewindDirectory();
}

void igh_sd_log_get_file_name(unsigned long _unix_time, char * file_name)
{
   d4d48:	b507      	push	{r0, r1, r2, lr}
   d4d4a:	4602      	mov	r2, r0
    sprintf(file_name, "%02X%02X%02X%02X.LOG", 
    (uint8_t)(_unix_time >> 24), 
    (uint8_t)(_unix_time >> 16), 
    (uint8_t)(_unix_time >> 8), 
    (uint8_t)(_unix_time));
   d4d4c:	b2d3      	uxtb	r3, r2
   d4d4e:	9301      	str	r3, [sp, #4]
   d4d50:	f3c2 2307 	ubfx	r3, r2, #8, #8
   d4d54:	9300      	str	r3, [sp, #0]
{
    igh_file.rewindDirectory();
}

void igh_sd_log_get_file_name(unsigned long _unix_time, char * file_name)
{
   d4d56:	4608      	mov	r0, r1
    sprintf(file_name, "%02X%02X%02X%02X.LOG", 
    (uint8_t)(_unix_time >> 24), 
    (uint8_t)(_unix_time >> 16), 
    (uint8_t)(_unix_time >> 8), 
    (uint8_t)(_unix_time));
   d4d58:	f3c2 4307 	ubfx	r3, r2, #16, #8
   d4d5c:	4903      	ldr	r1, [pc, #12]	; (d4d6c <_Z24igh_sd_log_get_file_namemPc+0x24>)
   d4d5e:	0e12      	lsrs	r2, r2, #24
   d4d60:	f002 f8a2 	bl	d6ea8 <sprintf>
}
   d4d64:	b003      	add	sp, #12
   d4d66:	f85d fb04 	ldr.w	pc, [sp], #4
   d4d6a:	bf00      	nop
   d4d6c:	000d9445 	.word	0x000d9445

000d4d70 <_Z26igh_sd_log_save_data_pointmPhh>:

uint8_t igh_sd_log_save_data_point(unsigned long _unix_time, uint8_t * data, uint8_t size)
{
   d4d70:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4d72:	b093      	sub	sp, #76	; 0x4c
   d4d74:	460f      	mov	r7, r1
    char name[13]; // include the null terminator?
    igh_sd_log_get_file_name(_unix_time, name);
   d4d76:	a901      	add	r1, sp, #4
   d4d78:	f7ff ffe6 	bl	d4d48 <_Z24igh_sd_log_get_file_namemPc>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4d7c:	2300      	movs	r3, #0
   d4d7e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d4d82:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4d86:	9306      	str	r3, [sp, #24]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4d88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4d8c:	9307      	str	r3, [sp, #28]
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 public:
  File() {}
   d4d8e:	4b13      	ldr	r3, [pc, #76]	; (d4ddc <_Z26igh_sd_log_save_data_pointmPhh+0x6c>)
   d4d90:	9305      	str	r3, [sp, #20]
   * \param[in] oflag open flags.
   * \return a File object.
   */
  File open(const char *path, oflag_t oflag = FILE_READ) {
    File tmpFile;
    tmpFile.open(vwd(), path, oflag);
   d4d92:	aa01      	add	r2, sp, #4
   d4d94:	f244 2302 	movw	r3, #16898	; 0x4202
   d4d98:	4911      	ldr	r1, [pc, #68]	; (d4de0 <_Z26igh_sd_log_save_data_pointmPhh+0x70>)
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d4d9a:	4e12      	ldr	r6, [pc, #72]	; (d4de4 <_Z26igh_sd_log_save_data_pointmPhh+0x74>)
   d4d9c:	a809      	add	r0, sp, #36	; 0x24
   d4d9e:	ac09      	add	r4, sp, #36	; 0x24
   d4da0:	f000 ffdf 	bl	d5d62 <_ZN7FatFile4openEPS_PKci>
   d4da4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4da6:	f106 0510 	add.w	r5, r6, #16
   d4daa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4dac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4dae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4db0:	6823      	ldr	r3, [r4, #0]
   d4db2:	602b      	str	r3, [r5, #0]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
   d4db4:	9b06      	ldr	r3, [sp, #24]
   d4db6:	6073      	str	r3, [r6, #4]
    igh_file = igh_sd.open((const char *)name, FILE_WRITE);

    if(igh_file)
   d4db8:	7c30      	ldrb	r0, [r6, #16]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   d4dba:	9b07      	ldr	r3, [sp, #28]
   d4dbc:	60b3      	str	r3, [r6, #8]
   d4dbe:	9b08      	ldr	r3, [sp, #32]
   d4dc0:	60f3      	str	r3, [r6, #12]
   d4dc2:	b140      	cbz	r0, d4dd6 <_Z26igh_sd_log_save_data_pointmPhh+0x66>
    {
        igh_file.println((const char *)data);
   d4dc4:	4639      	mov	r1, r7
   d4dc6:	4630      	mov	r0, r6
   d4dc8:	f002 faad 	bl	d7326 <_ZN5Print7printlnEPKc>
        igh_file.close();
   d4dcc:	f1a5 0020 	sub.w	r0, r5, #32
   d4dd0:	f000 ffc0 	bl	d5d54 <_ZN7FatFile5closeEv>
   d4dd4:	2001      	movs	r0, #1
    }
    else
    {
        return 0;
    }
}
   d4dd6:	b013      	add	sp, #76	; 0x4c
   d4dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4dda:	bf00      	nop
   d4ddc:	000d93c8 	.word	0x000d93c8
   d4de0:	2003e2dc 	.word	0x2003e2dc
   d4de4:	2003e350 	.word	0x2003e350

000d4de8 <_Z28igh_sd_log_remove_data_pointPc>:
  *
  * \return The value true is returned for success and
  * the value false is returned for failure.
  */
  bool remove(const char* path) {
    return FatFile::remove(vwd(), path);
   d4de8:	4601      	mov	r1, r0
   d4dea:	4801      	ldr	r0, [pc, #4]	; (d4df0 <_Z28igh_sd_log_remove_data_pointPc+0x8>)
   d4dec:	f001 b808 	b.w	d5e00 <_ZN7FatFile6removeEPS_PKc>
   d4df0:	2003e2dc 	.word	0x2003e2dc

000d4df4 <_Z24igh_sd_log_clear_sd_datav>:
{
    return igh_sd.remove(file_name);
}

uint8_t igh_sd_log_clear_sd_data(void)
{
   d4df4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if(!igh_sd_log_setup())
   d4df6:	f7ff ff5b 	bl	d4cb0 <_Z16igh_sd_log_setupv>
   d4dfa:	b908      	cbnz	r0, d4e00 <_Z24igh_sd_log_clear_sd_datav+0xc>
    {
        return 0;
   d4dfc:	2000      	movs	r0, #0
   d4dfe:	e023      	b.n	d4e48 <_Z24igh_sd_log_clear_sd_datav+0x54>
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d4e00:	4913      	ldr	r1, [pc, #76]	; (d4e50 <_Z24igh_sd_log_clear_sd_datav+0x5c>)
   d4e02:	4a14      	ldr	r2, [pc, #80]	; (d4e54 <_Z24igh_sd_log_clear_sd_datav+0x60>)
   d4e04:	6809      	ldr	r1, [r1, #0]
   d4e06:	4814      	ldr	r0, [pc, #80]	; (d4e58 <_Z24igh_sd_log_clear_sd_datav+0x64>)
   d4e08:	2300      	movs	r3, #0
   d4e0a:	f000 ffaa 	bl	d5d62 <_ZN7FatFile4openEPS_PKci>
    }

    if (!sd_root.open("/"))
   d4e0e:	2800      	cmp	r0, #0
   d4e10:	d0f4      	beq.n	d4dfc <_Z24igh_sd_log_clear_sd_datav+0x8>
    {
        return 0;
    }
    else
    {
        while ( next_file.openNext(&sd_root, O_RDONLY) )
   d4e12:	2200      	movs	r2, #0
   d4e14:	4910      	ldr	r1, [pc, #64]	; (d4e58 <_Z24igh_sd_log_clear_sd_datav+0x64>)
   d4e16:	4811      	ldr	r0, [pc, #68]	; (d4e5c <_Z24igh_sd_log_clear_sd_datav+0x68>)
   d4e18:	f000 ff27 	bl	d5c6a <_ZN7FatFile8openNextEPS_i>
   d4e1c:	b180      	cbz	r0, d4e40 <_Z24igh_sd_log_clear_sd_datav+0x4c>
        {
            char file_to_delete[13];
            memset(file_to_delete, '\0', 13);
   d4e1e:	220d      	movs	r2, #13
   d4e20:	2100      	movs	r1, #0
   d4e22:	4668      	mov	r0, sp
   d4e24:	f004 f972 	bl	d910c <memset>

            next_file.getSFN(file_to_delete);
   d4e28:	4669      	mov	r1, sp
   d4e2a:	480c      	ldr	r0, [pc, #48]	; (d4e5c <_Z24igh_sd_log_clear_sd_datav+0x68>)
   d4e2c:	f000 fcce 	bl	d57cc <_ZN7FatFile6getSFNEPc>
            next_file.close();
   d4e30:	480a      	ldr	r0, [pc, #40]	; (d4e5c <_Z24igh_sd_log_clear_sd_datav+0x68>)
   d4e32:	f000 ff8f 	bl	d5d54 <_ZN7FatFile5closeEv>
   d4e36:	4669      	mov	r1, sp
   d4e38:	4809      	ldr	r0, [pc, #36]	; (d4e60 <_Z24igh_sd_log_clear_sd_datav+0x6c>)
   d4e3a:	f000 ffe1 	bl	d5e00 <_ZN7FatFile6removeEPS_PKc>
   d4e3e:	e7e8      	b.n	d4e12 <_Z24igh_sd_log_clear_sd_datav+0x1e>
            igh_sd.remove(file_to_delete);
        }
        igh_file.rewindDirectory();
   d4e40:	4808      	ldr	r0, [pc, #32]	; (d4e64 <_Z24igh_sd_log_clear_sd_datav+0x70>)
   d4e42:	f7ff ff2b 	bl	d4c9c <_ZN4File15rewindDirectoryEv>
   d4e46:	2001      	movs	r0, #1
        return 1;
    }
}
   d4e48:	b005      	add	sp, #20
   d4e4a:	f85d fb04 	ldr.w	pc, [sp], #4
   d4e4e:	bf00      	nop
   d4e50:	2003e384 	.word	0x2003e384
   d4e54:	000d945a 	.word	0x000d945a
   d4e58:	2003e32c 	.word	0x2003e32c
   d4e5c:	2003de7c 	.word	0x2003de7c
   d4e60:	2003e2dc 	.word	0x2003e2dc
   d4e64:	2003e350 	.word	0x2003e350

000d4e68 <_Z26igh_sd_log_read_data_pointPcPhh>:

uint8_t igh_sd_log_read_data_point(char * file_name, uint8_t * buffer, uint8_t data_length)
{
   d4e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4e6c:	b08e      	sub	sp, #56	; 0x38
   d4e6e:	4690      	mov	r8, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4e70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4e74:	9203      	str	r2, [sp, #12]
 public:
  File() {}
   d4e76:	4a18      	ldr	r2, [pc, #96]	; (d4ed8 <_Z26igh_sd_log_read_data_pointPcPhh+0x70>)
   d4e78:	9201      	str	r2, [sp, #4]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4e7a:	2300      	movs	r3, #0
   * \param[in] oflag open flags.
   * \return a File object.
   */
  File open(const char *path, oflag_t oflag = FILE_READ) {
    File tmpFile;
    tmpFile.open(vwd(), path, oflag);
   d4e7c:	4602      	mov	r2, r0
   d4e7e:	460f      	mov	r7, r1
   d4e80:	a805      	add	r0, sp, #20
   d4e82:	4916      	ldr	r1, [pc, #88]	; (d4edc <_Z26igh_sd_log_read_data_pointPcPhh+0x74>)
   d4e84:	f88d 3014 	strb.w	r3, [sp, #20]
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d4e88:	ac05      	add	r4, sp, #20
   d4e8a:	f88d 3015 	strb.w	r3, [sp, #21]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4e8e:	9302      	str	r3, [sp, #8]
   d4e90:	f000 ff67 	bl	d5d62 <_ZN7FatFile4openEPS_PKci>
   d4e94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4e96:	4e12      	ldr	r6, [pc, #72]	; (d4ee0 <_Z26igh_sd_log_read_data_pointPcPhh+0x78>)
   d4e98:	f106 0510 	add.w	r5, r6, #16
   d4e9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4e9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4ea0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4ea2:	6823      	ldr	r3, [r4, #0]
   d4ea4:	602b      	str	r3, [r5, #0]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
   d4ea6:	9b02      	ldr	r3, [sp, #8]
   d4ea8:	6073      	str	r3, [r6, #4]
    igh_file = igh_sd.open( (const char *)file_name );
    if(igh_file)
   d4eaa:	7c30      	ldrb	r0, [r6, #16]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   d4eac:	9b03      	ldr	r3, [sp, #12]
   d4eae:	60b3      	str	r3, [r6, #8]
   d4eb0:	9b04      	ldr	r3, [sp, #16]
   d4eb2:	60f3      	str	r3, [r6, #12]
   d4eb4:	b160      	cbz	r0, d4ed0 <_Z26igh_sd_log_read_data_pointPcPhh+0x68>
   d4eb6:	463c      	mov	r4, r7
    {
        for(int i = 0; i < data_length; i++)
   d4eb8:	1be3      	subs	r3, r4, r7
   d4eba:	4598      	cmp	r8, r3
        {
            buffer[i] = igh_file.read(); // read data_len number of chars
        }
        igh_file.close();
   d4ebc:	4809      	ldr	r0, [pc, #36]	; (d4ee4 <_Z26igh_sd_log_read_data_pointPcPhh+0x7c>)
uint8_t igh_sd_log_read_data_point(char * file_name, uint8_t * buffer, uint8_t data_length)
{
    igh_file = igh_sd.open( (const char *)file_name );
    if(igh_file)
    {
        for(int i = 0; i < data_length; i++)
   d4ebe:	dd04      	ble.n	d4eca <_Z26igh_sd_log_read_data_pointPcPhh+0x62>
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    return FatFile::read();
   d4ec0:	f7ff fed8 	bl	d4c74 <_ZN7FatFile4readEv>
        {
            buffer[i] = igh_file.read(); // read data_len number of chars
   d4ec4:	f804 0b01 	strb.w	r0, [r4], #1
   d4ec8:	e7f6      	b.n	d4eb8 <_Z26igh_sd_log_read_data_pointPcPhh+0x50>
        }
        igh_file.close();
   d4eca:	f000 ff43 	bl	d5d54 <_ZN7FatFile5closeEv>
   d4ece:	2001      	movs	r0, #1
    }
    else
    {
        return 0;
    }   
}
   d4ed0:	b00e      	add	sp, #56	; 0x38
   d4ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4ed6:	bf00      	nop
   d4ed8:	000d93c8 	.word	0x000d93c8
   d4edc:	2003e2dc 	.word	0x2003e2dc
   d4ee0:	2003e350 	.word	0x2003e350
   d4ee4:	2003e360 	.word	0x2003e360

000d4ee8 <_Z29igh_sd_log_get_next_file_namePc>:

uint8_t igh_sd_log_get_next_file_name(char * next_file_name)
{
   d4ee8:	b510      	push	{r4, lr}
   d4eea:	4604      	mov	r4, r0
    if(!igh_sd_log_setup())
   d4eec:	f7ff fee0 	bl	d4cb0 <_Z16igh_sd_log_setupv>
   d4ef0:	b908      	cbnz	r0, d4ef6 <_Z29igh_sd_log_get_next_file_namePc+0xe>
    {
        return 0;
   d4ef2:	2000      	movs	r0, #0
   d4ef4:	bd10      	pop	{r4, pc}
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d4ef6:	4910      	ldr	r1, [pc, #64]	; (d4f38 <_Z29igh_sd_log_get_next_file_namePc+0x50>)
   d4ef8:	4a10      	ldr	r2, [pc, #64]	; (d4f3c <_Z29igh_sd_log_get_next_file_namePc+0x54>)
   d4efa:	6809      	ldr	r1, [r1, #0]
   d4efc:	4810      	ldr	r0, [pc, #64]	; (d4f40 <_Z29igh_sd_log_get_next_file_namePc+0x58>)
   d4efe:	2300      	movs	r3, #0
   d4f00:	f000 ff2f 	bl	d5d62 <_ZN7FatFile4openEPS_PKci>
    }

    if (!sd_root.open("/"))
   d4f04:	2800      	cmp	r0, #0
   d4f06:	d0f4      	beq.n	d4ef2 <_Z29igh_sd_log_get_next_file_namePc+0xa>
    {
        return 0;
    }
    else
    {
        next_file.openNext(&sd_root, O_RDONLY); // skip one index
   d4f08:	2200      	movs	r2, #0
   d4f0a:	490d      	ldr	r1, [pc, #52]	; (d4f40 <_Z29igh_sd_log_get_next_file_namePc+0x58>)
   d4f0c:	480d      	ldr	r0, [pc, #52]	; (d4f44 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d4f0e:	f000 feac 	bl	d5c6a <_ZN7FatFile8openNextEPS_i>
        next_file.close(); 
   d4f12:	480c      	ldr	r0, [pc, #48]	; (d4f44 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d4f14:	f000 ff1e 	bl	d5d54 <_ZN7FatFile5closeEv>
        if( next_file.openNext(&sd_root, O_RDONLY) )
   d4f18:	2200      	movs	r2, #0
   d4f1a:	4909      	ldr	r1, [pc, #36]	; (d4f40 <_Z29igh_sd_log_get_next_file_namePc+0x58>)
   d4f1c:	4809      	ldr	r0, [pc, #36]	; (d4f44 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d4f1e:	f000 fea4 	bl	d5c6a <_ZN7FatFile8openNextEPS_i>
   d4f22:	2800      	cmp	r0, #0
   d4f24:	d0e5      	beq.n	d4ef2 <_Z29igh_sd_log_get_next_file_namePc+0xa>
        {
            next_file.getSFN(next_file_name);
   d4f26:	4621      	mov	r1, r4
   d4f28:	4806      	ldr	r0, [pc, #24]	; (d4f44 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d4f2a:	f000 fc4f 	bl	d57cc <_ZN7FatFile6getSFNEPc>
            next_file.close(); 
   d4f2e:	4805      	ldr	r0, [pc, #20]	; (d4f44 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d4f30:	f000 ff10 	bl	d5d54 <_ZN7FatFile5closeEv>
   d4f34:	2001      	movs	r0, #1
        else
        {
            return 0;
        }    
    }
}
   d4f36:	bd10      	pop	{r4, pc}
   d4f38:	2003e384 	.word	0x2003e384
   d4f3c:	000d945a 	.word	0x000d945a
   d4f40:	2003e32c 	.word	0x2003e32c
   d4f44:	2003de7c 	.word	0x2003de7c

000d4f48 <_Z15igh_sd_log_testv>:

uint8_t igh_sd_log_test(void)
{
   d4f48:	b510      	push	{r4, lr}
   d4f4a:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
    if( !igh_sd_log_clear_sd_data() )
   d4f4e:	f7ff ff51 	bl	d4df4 <_Z24igh_sd_log_clear_sd_datav>
   d4f52:	b908      	cbnz	r0, d4f58 <_Z15igh_sd_log_testv+0x10>
    {
        return 0;
   d4f54:	2000      	movs	r0, #0
   d4f56:	e033      	b.n	d4fc0 <_Z15igh_sd_log_testv+0x78>
    }

    unsigned long test_timestamp = random(2015707648); 
   d4f58:	481b      	ldr	r0, [pc, #108]	; (d4fc8 <_Z15igh_sd_log_testv+0x80>)
   d4f5a:	f002 ffd0 	bl	d7efe <_Z6randomi>

    uint8_t size = 255;
    uint8_t data[size];

    memset(data, 't', size);
   d4f5e:	22ff      	movs	r2, #255	; 0xff
    if( !igh_sd_log_clear_sd_data() )
    {
        return 0;
    }

    unsigned long test_timestamp = random(2015707648); 
   d4f60:	4604      	mov	r4, r0

    uint8_t size = 255;
    uint8_t data[size];

    memset(data, 't', size);
   d4f62:	2174      	movs	r1, #116	; 0x74
   d4f64:	a808      	add	r0, sp, #32
   d4f66:	f004 f8d1 	bl	d910c <memset>
    if ( !igh_sd_log_save_data_point(test_timestamp, data, size) )
   d4f6a:	22ff      	movs	r2, #255	; 0xff
   d4f6c:	a908      	add	r1, sp, #32
   d4f6e:	4620      	mov	r0, r4
   d4f70:	f7ff fefe 	bl	d4d70 <_Z26igh_sd_log_save_data_pointmPhh>
   d4f74:	2800      	cmp	r0, #0
   d4f76:	d0ed      	beq.n	d4f54 <_Z15igh_sd_log_testv+0xc>
        return 0;
    }

    char test_name[13];
    uint8_t test_buffer[size];
    igh_sd_log_get_file_name(test_timestamp, test_name);
   d4f78:	4669      	mov	r1, sp
   d4f7a:	4620      	mov	r0, r4
   d4f7c:	f7ff fee4 	bl	d4d48 <_Z24igh_sd_log_get_file_namemPc>

    if( !igh_sd_log_read_data_point(test_name, test_buffer, size) )
   d4f80:	22ff      	movs	r2, #255	; 0xff
   d4f82:	a948      	add	r1, sp, #288	; 0x120
   d4f84:	4668      	mov	r0, sp
   d4f86:	f7ff ff6f 	bl	d4e68 <_Z26igh_sd_log_read_data_pointPcPhh>
   d4f8a:	2800      	cmp	r0, #0
   d4f8c:	d0e2      	beq.n	d4f54 <_Z15igh_sd_log_testv+0xc>
    {
        return 0;
    }

    if ( 0 != memcmp( data, test_buffer, size) )
   d4f8e:	22ff      	movs	r2, #255	; 0xff
   d4f90:	a948      	add	r1, sp, #288	; 0x120
   d4f92:	a808      	add	r0, sp, #32
   d4f94:	f004 f8a0 	bl	d90d8 <memcmp>
   d4f98:	2800      	cmp	r0, #0
   d4f9a:	d1db      	bne.n	d4f54 <_Z15igh_sd_log_testv+0xc>
        return 0;
    }

    char read_name[13];

    if( !igh_sd_log_get_next_file_name(read_name) )
   d4f9c:	a804      	add	r0, sp, #16
   d4f9e:	f7ff ffa3 	bl	d4ee8 <_Z29igh_sd_log_get_next_file_namePc>
   d4fa2:	2800      	cmp	r0, #0
   d4fa4:	d0d6      	beq.n	d4f54 <_Z15igh_sd_log_testv+0xc>
    {
        return 0;
    }

    
    if( 0 != memcmp( test_name, read_name, 13) )
   d4fa6:	220d      	movs	r2, #13
   d4fa8:	a904      	add	r1, sp, #16
   d4faa:	4668      	mov	r0, sp
   d4fac:	f004 f894 	bl	d90d8 <memcmp>
   d4fb0:	2800      	cmp	r0, #0
   d4fb2:	d1cf      	bne.n	d4f54 <_Z15igh_sd_log_testv+0xc>
    {
        return 0;
    }

    if( !igh_sd_log_remove_data_point(read_name) )
   d4fb4:	a804      	add	r0, sp, #16
   d4fb6:	f7ff ff17 	bl	d4de8 <_Z28igh_sd_log_remove_data_pointPc>

uint8_t igh_sd_log_test(void)
{
    if( !igh_sd_log_clear_sd_data() )
    {
        return 0;
   d4fba:	3000      	adds	r0, #0
   d4fbc:	bf18      	it	ne
   d4fbe:	2001      	movne	r0, #1
    {
        return 0;
    }

    return 1;
   d4fc0:	f50d 7d08 	add.w	sp, sp, #544	; 0x220
   d4fc4:	bd10      	pop	{r4, pc}
   d4fc6:	bf00      	nop
   d4fc8:	78254200 	.word	0x78254200

000d4fcc <_GLOBAL__sub_I_igh_sd>:
   d4fcc:	b570      	push	{r4, r5, r6, lr}
   d4fce:	f001 fca7 	bl	d6920 <HAL_Pin_Map>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d4fd2:	4b27      	ldr	r3, [pc, #156]	; (d5070 <_GLOBAL__sub_I_igh_sd+0xa4>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d4fd4:	4e27      	ldr	r6, [pc, #156]	; (d5074 <_GLOBAL__sub_I_igh_sd+0xa8>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d4fd6:	2164      	movs	r1, #100	; 0x64
   d4fd8:	f883 1460 	strb.w	r1, [r3, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d4fdc:	4926      	ldr	r1, [pc, #152]	; (d5078 <_GLOBAL__sub_I_igh_sd+0xac>)
   d4fde:	f8c3 1470 	str.w	r1, [r3, #1136]	; 0x470
   d4fe2:	2101      	movs	r1, #1
   d4fe4:	f883 1474 	strb.w	r1, [r3, #1140]	; 0x474
   d4fe8:	6831      	ldr	r1, [r6, #0]
   d4fea:	2200      	movs	r2, #0
   d4fec:	f011 0501 	ands.w	r5, r1, #1
   d4ff0:	71da      	strb	r2, [r3, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4ff2:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
   d4ff6:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
   d4ffa:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
   d4ffe:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   d5002:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
   d5006:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
   d500a:	461c      	mov	r4, r3
   d500c:	d10a      	bne.n	d5024 <_GLOBAL__sub_I_igh_sd+0x58>
   d500e:	4630      	mov	r0, r6
   d5010:	f7ff f845 	bl	d409e <__cxa_guard_acquire>
   d5014:	b130      	cbz	r0, d5024 <_GLOBAL__sub_I_igh_sd+0x58>
   d5016:	4629      	mov	r1, r5
   d5018:	4818      	ldr	r0, [pc, #96]	; (d507c <_GLOBAL__sub_I_igh_sd+0xb0>)
   d501a:	f001 ff99 	bl	d6f50 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d501e:	4630      	mov	r0, r6
   d5020:	f7ff f842 	bl	d40a8 <__cxa_guard_release>
   d5024:	4816      	ldr	r0, [pc, #88]	; (d5080 <_GLOBAL__sub_I_igh_sd+0xb4>)
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d5026:	4b15      	ldr	r3, [pc, #84]	; (d507c <_GLOBAL__sub_I_igh_sd+0xb0>)
   d5028:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d502c:	2400      	movs	r4, #0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d502e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5032:	7404      	strb	r4, [r0, #16]
   d5034:	7444      	strb	r4, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5036:	6044      	str	r4, [r0, #4]
   d5038:	6083      	str	r3, [r0, #8]
#include <SPI.h>
#include "SdFat.h"
#include "igh_sd_log.h"

SdFat igh_sd;
File igh_file;
   d503a:	4a12      	ldr	r2, [pc, #72]	; (d5084 <_GLOBAL__sub_I_igh_sd+0xb8>)
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 public:
  File() {}
   d503c:	4b12      	ldr	r3, [pc, #72]	; (d5088 <_GLOBAL__sub_I_igh_sd+0xbc>)
   d503e:	4913      	ldr	r1, [pc, #76]	; (d508c <_GLOBAL__sub_I_igh_sd+0xc0>)
   d5040:	6003      	str	r3, [r0, #0]
   d5042:	f003 f9d1 	bl	d83e8 <__aeabi_atexit>
   d5046:	4812      	ldr	r0, [pc, #72]	; (d5090 <_GLOBAL__sub_I_igh_sd+0xc4>)
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 public:
  SdFile() {}
   d5048:	4d12      	ldr	r5, [pc, #72]	; (d5094 <_GLOBAL__sub_I_igh_sd+0xc8>)
   d504a:	7204      	strb	r4, [r0, #8]
   d504c:	7244      	strb	r4, [r0, #9]
   d504e:	6044      	str	r4, [r0, #4]
SdFile sd_root;
   d5050:	4a0c      	ldr	r2, [pc, #48]	; (d5084 <_GLOBAL__sub_I_igh_sd+0xb8>)
   d5052:	4911      	ldr	r1, [pc, #68]	; (d5098 <_GLOBAL__sub_I_igh_sd+0xcc>)
   d5054:	6005      	str	r5, [r0, #0]
   d5056:	f003 f9c7 	bl	d83e8 <__aeabi_atexit>
   d505a:	4810      	ldr	r0, [pc, #64]	; (d509c <_GLOBAL__sub_I_igh_sd+0xd0>)
SdFile next_file;
   d505c:	4a09      	ldr	r2, [pc, #36]	; (d5084 <_GLOBAL__sub_I_igh_sd+0xb8>)
   d505e:	7204      	strb	r4, [r0, #8]
   d5060:	7244      	strb	r4, [r0, #9]
   d5062:	6044      	str	r4, [r0, #4]
   d5064:	6005      	str	r5, [r0, #0]
   d5066:	490c      	ldr	r1, [pc, #48]	; (d5098 <_GLOBAL__sub_I_igh_sd+0xcc>)
    {
        return 0;
    }

    return 1;
   d5068:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#include "igh_sd_log.h"

SdFat igh_sd;
File igh_file;
SdFile sd_root;
SdFile next_file;
   d506c:	f003 b9bc 	b.w	d83e8 <__aeabi_atexit>
   d5070:	2003dea0 	.word	0x2003dea0
   d5074:	2003de68 	.word	0x2003de68
   d5078:	000d93bc 	.word	0x000d93bc
   d507c:	2003de6c 	.word	0x2003de6c
   d5080:	2003e350 	.word	0x2003e350
   d5084:	2003ddfc 	.word	0x2003ddfc
   d5088:	000d93c8 	.word	0x000d93c8
   d508c:	000d4bb7 	.word	0x000d4bb7
   d5090:	2003e324 	.word	0x2003e324
   d5094:	000d93f0 	.word	0x000d93f0
   d5098:	000d4bb5 	.word	0x000d4bb5
   d509c:	2003de74 	.word	0x2003de74

000d50a0 <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d50a0:	f001 bc3e 	b.w	d6920 <HAL_Pin_Map>

000d50a4 <_GLOBAL__sub_I__ZN7istream3getEv>:
   d50a4:	f001 bc3c 	b.w	d6920 <HAL_Pin_Map>

000d50a8 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d50a8:	b510      	push	{r4, lr}
   d50aa:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d50ac:	3024      	adds	r0, #36	; 0x24
   d50ae:	f000 ff9d 	bl	d5fec <_ZN8FatCache4syncEv>
   d50b2:	b128      	cbz	r0, d50c0 <_ZN9FatVolume9cacheSyncEv+0x18>
   d50b4:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d50b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d50bc:	f000 bf96 	b.w	d5fec <_ZN8FatCache4syncEv>
  }
   d50c0:	bd10      	pop	{r4, pc}

000d50c2 <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d50c2:	1e41      	subs	r1, r0, #1
   d50c4:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d50c8:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d50ca:	0843      	lsrs	r3, r0, #1
   d50cc:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d50d0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d50d4:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d50d8:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d50da:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d50dc:	d1f5      	bne.n	d50ca <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d50de:	4770      	bx	lr

000d50e0 <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d50e0:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   d50e2:	68cb      	ldr	r3, [r1, #12]
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d50e4:	4604      	mov	r4, r0
   d50e6:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   d50e8:	b923      	cbnz	r3, d50f4 <_ZN7FatFile11openClusterEPS_+0x14>
    return openRoot(file->m_vol);
   d50ea:	6889      	ldr	r1, [r1, #8]
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   d50ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
   d50f0:	f000 bc09 	b.w	d5906 <_ZN7FatFile8openRootEP9FatVolume>
  }
  memset(this, 0, sizeof(FatFile));
   d50f4:	2224      	movs	r2, #36	; 0x24
   d50f6:	2100      	movs	r1, #0
   d50f8:	f004 f808 	bl	d910c <memset>
  m_attr = FILE_ATTR_SUBDIR;
   d50fc:	2310      	movs	r3, #16
  m_flags = F_READ;
   d50fe:	2001      	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attr = FILE_ATTR_SUBDIR;
   d5100:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   d5102:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   d5104:	68ab      	ldr	r3, [r5, #8]
   d5106:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   d5108:	68eb      	ldr	r3, [r5, #12]
   d510a:	6223      	str	r3, [r4, #32]
  return true;
}
   d510c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5110 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d5110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d5114:	7803      	ldrb	r3, [r0, #0]
   d5116:	2b20      	cmp	r3, #32
   d5118:	f100 0401 	add.w	r4, r0, #1
   d511c:	d101      	bne.n	d5122 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d511e:	4620      	mov	r0, r4
   d5120:	e7f8      	b.n	d5114 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d5122:	4f70      	ldr	r7, [pc, #448]	; (d52e4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d5124:	6088      	str	r0, [r1, #8]
   d5126:	4605      	mov	r5, r0
   d5128:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d512a:	462e      	mov	r6, r5
   d512c:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d5130:	b30b      	cbz	r3, d5176 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d5132:	2b2f      	cmp	r3, #47	; 0x2f
   d5134:	d101      	bne.n	d513a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d5136:	1903      	adds	r3, r0, r4
   d5138:	e017      	b.n	d516a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d513a:	2b5c      	cmp	r3, #92	; 0x5c
   d513c:	d102      	bne.n	d5144 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d513e:	2000      	movs	r0, #0
   d5140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d5144:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d5148:	b2e4      	uxtb	r4, r4
   d514a:	2c1d      	cmp	r4, #29
   d514c:	d803      	bhi.n	d5156 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d514e:	fa27 f404 	lsr.w	r4, r7, r4
   d5152:	07e4      	lsls	r4, r4, #31
   d5154:	d4f3      	bmi.n	d513e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d5156:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d515a:	2c3c      	cmp	r4, #60	; 0x3c
   d515c:	d0ef      	beq.n	d513e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d515e:	3b20      	subs	r3, #32
   d5160:	2b5e      	cmp	r3, #94	; 0x5e
   d5162:	d9e1      	bls.n	d5128 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d5164:	e7eb      	b.n	d513e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d5166:	2d2f      	cmp	r5, #47	; 0x2f
   d5168:	d105      	bne.n	d5176 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d516a:	461e      	mov	r6, r3
   d516c:	f813 5b01 	ldrb.w	r5, [r3], #1
   d5170:	2d20      	cmp	r5, #32
   d5172:	d1f8      	bne.n	d5166 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d5174:	e7f9      	b.n	d516a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d5176:	6016      	str	r6, [r2, #0]
   d5178:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d517a:	4298      	cmp	r0, r3
   d517c:	ebc0 0803 	rsb	r8, r0, r3
   d5180:	d009      	beq.n	d5196 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d5182:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d5186:	2a2e      	cmp	r2, #46	; 0x2e
   d5188:	d0f7      	beq.n	d517a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d518a:	2a20      	cmp	r2, #32
   d518c:	d0f5      	beq.n	d517a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d518e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d5192:	dcd4      	bgt.n	d513e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d5194:	e001      	b.n	d519a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d5196:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d519a:	f8c1 8004 	str.w	r8, [r1, #4]
   d519e:	f101 030c 	add.w	r3, r1, #12
   d51a2:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d51a6:	2420      	movs	r4, #32
   d51a8:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d51ac:	4293      	cmp	r3, r2
   d51ae:	d1fb      	bne.n	d51a8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d51b0:	4603      	mov	r3, r0
   d51b2:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d51b4:	f813 4b01 	ldrb.w	r4, [r3], #1
   d51b8:	2c2e      	cmp	r4, #46	; 0x2e
   d51ba:	d0fa      	beq.n	d51b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d51bc:	2c20      	cmp	r4, #32
   d51be:	d0f8      	beq.n	d51b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d51c0:	fab2 f482 	clz	r4, r2
   d51c4:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d51c6:	f108 36ff 	add.w	r6, r8, #4294967295
   d51ca:	1c73      	adds	r3, r6, #1
   d51cc:	d107      	bne.n	d51de <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d51ce:	2700      	movs	r7, #0
   d51d0:	f04f 0e07 	mov.w	lr, #7
   d51d4:	463d      	mov	r5, r7
   d51d6:	46ba      	mov	sl, r7
   d51d8:	f04f 0908 	mov.w	r9, #8
   d51dc:	e009      	b.n	d51f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d51de:	5d83      	ldrb	r3, [r0, r6]
   d51e0:	2b2e      	cmp	r3, #46	; 0x2e
   d51e2:	d0f4      	beq.n	d51ce <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d51e4:	3e01      	subs	r6, #1
   d51e6:	e7f0      	b.n	d51ca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d51e8:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d51ea:	2b20      	cmp	r3, #32
   d51ec:	d104      	bne.n	d51f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d51ee:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d51f0:	3201      	adds	r2, #1
   d51f2:	4542      	cmp	r2, r8
   d51f4:	dbf8      	blt.n	d51e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d51f6:	e04b      	b.n	d5290 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d51f8:	2b2e      	cmp	r3, #46	; 0x2e
   d51fa:	d102      	bne.n	d5202 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d51fc:	42b2      	cmp	r2, r6
   d51fe:	d1f6      	bne.n	d51ee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d5200:	e003      	b.n	d520a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d5202:	2b22      	cmp	r3, #34	; 0x22
   d5204:	d017      	beq.n	d5236 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d5206:	2b7c      	cmp	r3, #124	; 0x7c
   d5208:	d015      	beq.n	d5236 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d520a:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d520e:	f1bc 0f05 	cmp.w	ip, #5
   d5212:	d801      	bhi.n	d5218 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d5214:	2b2d      	cmp	r3, #45	; 0x2d
   d5216:	d10e      	bne.n	d5236 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d5218:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d521c:	f1bc 0f05 	cmp.w	ip, #5
   d5220:	d909      	bls.n	d5236 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d5222:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d5226:	f1bc 0f02 	cmp.w	ip, #2
   d522a:	d904      	bls.n	d5236 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d522c:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d5230:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d5234:	d902      	bls.n	d523c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d5236:	42b2      	cmp	r2, r6
   d5238:	d10e      	bne.n	d5258 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d523a:	e049      	b.n	d52d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d523c:	42b2      	cmp	r2, r6
   d523e:	d047      	beq.n	d52d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d5240:	4575      	cmp	r5, lr
   d5242:	d821      	bhi.n	d5288 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d5244:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d5248:	f1bc 0f19 	cmp.w	ip, #25
   d524c:	d808      	bhi.n	d5260 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d524e:	3b20      	subs	r3, #32
   d5250:	b2db      	uxtb	r3, r3
        lc |= bit;
   d5252:	ea49 0707 	orr.w	r7, r9, r7
   d5256:	e00a      	b.n	d526e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d5258:	4575      	cmp	r5, lr
   d525a:	d815      	bhi.n	d5288 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d525c:	2400      	movs	r4, #0
      c = '_';
   d525e:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d5260:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d5264:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d5268:	bf98      	it	ls
   d526a:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d526e:	f105 0c01 	add.w	ip, r5, #1
   d5272:	fa5f fc8c 	uxtb.w	ip, ip
   d5276:	440d      	add	r5, r1
      if (i < 7) {
   d5278:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d527c:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d527e:	d801      	bhi.n	d5284 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d5280:	f881 c00c 	strb.w	ip, [r1, #12]
   d5284:	4665      	mov	r5, ip
   d5286:	e7b3      	b.n	d51f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d5288:	f1be 0f0a 	cmp.w	lr, #10
   d528c:	d117      	bne.n	d52be <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d528e:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d5290:	7b4b      	ldrb	r3, [r1, #13]
   d5292:	2b20      	cmp	r3, #32
   d5294:	f43f af53 	beq.w	d513e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d5298:	b13c      	cbz	r4, d52aa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d529a:	ea1a 0f07 	tst.w	sl, r7
   d529e:	bf18      	it	ne
   d52a0:	2702      	movne	r7, #2
   d52a2:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d52a4:	2001      	movs	r0, #1
   d52a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d52aa:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d52ac:	2001      	movs	r0, #1
   d52ae:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d52b0:	4419      	add	r1, r3
   d52b2:	237e      	movs	r3, #126	; 0x7e
   d52b4:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d52b6:	2331      	movs	r3, #49	; 0x31
   d52b8:	738b      	strb	r3, [r1, #14]
   d52ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d52be:	42b2      	cmp	r2, r6
   d52c0:	dce5      	bgt.n	d528e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d52c2:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d52c4:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d52c8:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d52ca:	f04f 0910 	mov.w	r9, #16
   d52ce:	e78e      	b.n	d51ee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d52d0:	f1be 0f0a 	cmp.w	lr, #10
   d52d4:	d0db      	beq.n	d528e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d52d6:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d52d8:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d52dc:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d52de:	f04f 0910 	mov.w	r9, #16
   d52e2:	e785      	b.n	d51f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d52e4:	31000101 	.word	0x31000101

000d52e8 <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d52e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d52ea:	b08b      	sub	sp, #44	; 0x2c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d52ec:	2300      	movs	r3, #0
   d52ee:	f88d 3004 	strb.w	r3, [sp, #4]
   d52f2:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d52f6:	7803      	ldrb	r3, [r0, #0]
   d52f8:	0719      	lsls	r1, r3, #28

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d52fa:	4604      	mov	r4, r0
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d52fc:	d508      	bpl.n	d5310 <_ZN7FatFile6removeEv+0x28>
   d52fe:	7883      	ldrb	r3, [r0, #2]
   d5300:	079a      	lsls	r2, r3, #30
   d5302:	d505      	bpl.n	d5310 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   d5304:	6a01      	ldr	r1, [r0, #32]
   d5306:	b129      	cbz	r1, d5314 <_ZN7FatFile6removeEv+0x2c>
   d5308:	68a0      	ldr	r0, [r4, #8]
   d530a:	f000 ff60 	bl	d61ce <_ZN9FatVolume9freeChainEm>
   d530e:	b908      	cbnz	r0, d5314 <_ZN7FatFile6removeEv+0x2c>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   d5310:	2000      	movs	r0, #0
   d5312:	e049      	b.n	d53a8 <_ZN7FatFile6removeEv+0xc0>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d5314:	2101      	movs	r1, #1
   d5316:	4620      	mov	r0, r4
   d5318:	f000 fabc 	bl	d5894 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d531c:	4605      	mov	r5, r0
   d531e:	2800      	cmp	r0, #0
   d5320:	d0f6      	beq.n	d5310 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
   d5322:	f7ff fece 	bl	d50c2 <_ZN7FatFile11lfnChecksumEPh>

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;
   d5326:	26e5      	movs	r6, #229	; 0xe5
   d5328:	702e      	strb	r6, [r5, #0]

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
   d532a:	2300      	movs	r3, #0
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
   d532c:	4607      	mov	r7, r0

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
   d532e:	7023      	strb	r3, [r4, #0]

  // Write entry to device.
  if (!m_vol->cacheSync()) {
   d5330:	68a0      	ldr	r0, [r4, #8]
   d5332:	f7ff feb9 	bl	d50a8 <_ZN9FatVolume9cacheSyncEv>
   d5336:	2800      	cmp	r0, #0
   d5338:	d0ea      	beq.n	d5310 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
   d533a:	78e3      	ldrb	r3, [r4, #3]
   d533c:	2b00      	cmp	r3, #0
   d533e:	d033      	beq.n	d53a8 <_ZN7FatFile6removeEv+0xc0>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
   d5340:	4621      	mov	r1, r4
   d5342:	a801      	add	r0, sp, #4
   d5344:	f7ff fecc 	bl	d50e0 <_ZN7FatFile11openClusterEPS_>
   d5348:	2800      	cmp	r0, #0
   d534a:	d0e1      	beq.n	d5310 <_ZN7FatFile6removeEv+0x28>
   d534c:	2501      	movs	r5, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d534e:	78e3      	ldrb	r3, [r4, #3]
   d5350:	42ab      	cmp	r3, r5
   d5352:	d3dd      	bcc.n	d5310 <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   d5354:	88a1      	ldrh	r1, [r4, #4]
   d5356:	1b49      	subs	r1, r1, r5
   d5358:	0149      	lsls	r1, r1, #5
   d535a:	a801      	add	r0, sp, #4
   d535c:	f000 fbce 	bl	d5afc <_ZN7FatFile7seekSetEm>
   d5360:	2800      	cmp	r0, #0
   d5362:	d0d5      	beq.n	d5310 <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   d5364:	2100      	movs	r1, #0
   d5366:	a801      	add	r0, sp, #4
   d5368:	f000 fbab 	bl	d5ac2 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d536c:	2800      	cmp	r0, #0
   d536e:	d0cf      	beq.n	d5310 <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d5370:	7ac3      	ldrb	r3, [r0, #11]
   d5372:	2b0f      	cmp	r3, #15
   d5374:	d1cc      	bne.n	d5310 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   d5376:	7802      	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d5378:	f002 031f 	and.w	r3, r2, #31
   d537c:	429d      	cmp	r5, r3
   d537e:	d1c7      	bne.n	d5310 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   d5380:	7b43      	ldrb	r3, [r0, #13]
   d5382:	42bb      	cmp	r3, r7
   d5384:	d1c4      	bne.n	d5310 <_ZN7FatFile6removeEv+0x28>
        chksum != ldir->chksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->ord & LDIR_ORD_LAST_LONG_ENTRY;
    ldir->ord = DIR_NAME_DELETED;
   d5386:	7006      	strb	r6, [r0, #0]
    m_vol->cacheDirty();
   d5388:	68a1      	ldr	r1, [r4, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d538a:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   d538e:	f043 0301 	orr.w	r3, r3, #1
   d5392:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   d5396:	0653      	lsls	r3, r2, #25
   d5398:	d503      	bpl.n	d53a2 <_ZN7FatFile6removeEv+0xba>
      if (!m_vol->cacheSync()) {
   d539a:	68a0      	ldr	r0, [r4, #8]
   d539c:	f7ff fe84 	bl	d50a8 <_ZN9FatVolume9cacheSyncEv>
   d53a0:	e002      	b.n	d53a8 <_ZN7FatFile6removeEv+0xc0>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d53a2:	3501      	adds	r5, #1
   d53a4:	b2ed      	uxtb	r5, r5
   d53a6:	e7d2      	b.n	d534e <_ZN7FatFile6removeEv+0x66>
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
}
   d53a8:	b00b      	add	sp, #44	; 0x2c
   d53aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d53ac <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d53ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d53b0:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d53b4:	4606      	mov	r6, r0
   d53b6:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d53b8:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d53ba:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d53bc:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d53c0:	6869      	ldr	r1, [r5, #4]
   d53c2:	68aa      	ldr	r2, [r5, #8]
   d53c4:	1863      	adds	r3, r4, r1
   d53c6:	b29b      	uxth	r3, r3
   d53c8:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d53ca:	4291      	cmp	r1, r2
   d53cc:	d006      	beq.n	d53dc <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d53ce:	f812 0b01 	ldrb.w	r0, [r2], #1
   d53d2:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d53d6:	4043      	eors	r3, r0
   d53d8:	b29b      	uxth	r3, r3
   d53da:	e7f6      	b.n	d53ca <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d53dc:	f1b9 0f03 	cmp.w	r9, #3
   d53e0:	bf28      	it	cs
   d53e2:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d53e6:	f109 0204 	add.w	r2, r9, #4
   d53ea:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d53ec:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d53f0:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d53f2:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d53f4:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d53f6:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d53f8:	bf94      	ite	ls
   d53fa:	3130      	addls	r1, #48	; 0x30
   d53fc:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d53fe:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5400:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d5402:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5406:	d3f1      	bcc.n	d53ec <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d5408:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d540c:	2100      	movs	r1, #0
   d540e:	735f      	strb	r7, [r3, #13]
   d5410:	4630      	mov	r0, r6
   d5412:	f000 fb73 	bl	d5afc <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d5416:	2101      	movs	r1, #1
   d5418:	4630      	mov	r0, r6
   d541a:	f000 fb52 	bl	d5ac2 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d541e:	4601      	mov	r1, r0
   d5420:	b928      	cbnz	r0, d542e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d5422:	7870      	ldrb	r0, [r6, #1]
   d5424:	fab0 f080 	clz	r0, r0
   d5428:	0940      	lsrs	r0, r0, #5
   d542a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d542e:	7803      	ldrb	r3, [r0, #0]
   d5430:	b14b      	cbz	r3, d5446 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d5432:	7ac3      	ldrb	r3, [r0, #11]
   d5434:	071b      	lsls	r3, r3, #28
   d5436:	d4ee      	bmi.n	d5416 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d5438:	220b      	movs	r2, #11
   d543a:	4640      	mov	r0, r8
   d543c:	f003 fe4c 	bl	d90d8 <memcmp>
   d5440:	2800      	cmp	r0, #0
   d5442:	d1e8      	bne.n	d5416 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d5444:	e002      	b.n	d544c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d5446:	2001      	movs	r0, #1
   d5448:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d544c:	3401      	adds	r4, #1
   d544e:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d5450:	2c64      	cmp	r4, #100	; 0x64
   d5452:	d1b5      	bne.n	d53c0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d5454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5458 <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d5458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d545c:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d545e:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d5460:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d5462:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d5466:	9005      	str	r0, [sp, #20]
   d5468:	460e      	mov	r6, r1
   d546a:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d546c:	d101      	bne.n	d5472 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d546e:	2000      	movs	r0, #0
   d5470:	e1a0      	b.n	d57b4 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d5472:	9b05      	ldr	r3, [sp, #20]
   d5474:	781b      	ldrb	r3, [r3, #0]
   d5476:	2b00      	cmp	r3, #0
   d5478:	d1f9      	bne.n	d546e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d547a:	6853      	ldr	r3, [r2, #4]
   d547c:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d547e:	7813      	ldrb	r3, [r2, #0]
   d5480:	079b      	lsls	r3, r3, #30
   d5482:	f000 818d 	beq.w	d57a0 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d5486:	9b02      	ldr	r3, [sp, #8]
   d5488:	270d      	movs	r7, #13
   d548a:	330c      	adds	r3, #12
   d548c:	fbb3 f7f7 	udiv	r7, r3, r7
   d5490:	3701      	adds	r7, #1
   d5492:	b2ff      	uxtb	r7, r7
   d5494:	2100      	movs	r1, #0
   d5496:	4630      	mov	r0, r6
   d5498:	f000 fb30 	bl	d5afc <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d549c:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d54a0:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d54a4:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d54a8:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d54aa:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d54ac:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d54ae:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d54b2:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d54b4:	6972      	ldr	r2, [r6, #20]
   d54b6:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d54b8:	2101      	movs	r1, #1
   d54ba:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d54bc:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d54c0:	f000 faff 	bl	d5ac2 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d54c4:	9b07      	ldr	r3, [sp, #28]
   d54c6:	b920      	cbnz	r0, d54d2 <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d54c8:	7873      	ldrb	r3, [r6, #1]
   d54ca:	2b00      	cmp	r3, #0
   d54cc:	f000 8090 	beq.w	d55f0 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d54d0:	e7cd      	b.n	d546e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d54d2:	7802      	ldrb	r2, [r0, #0]
   d54d4:	2ae5      	cmp	r2, #229	; 0xe5
   d54d6:	d000      	beq.n	d54da <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d54d8:	b942      	cbnz	r2, d54ec <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d54da:	2c00      	cmp	r4, #0
   d54dc:	bf08      	it	eq
   d54de:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d54e0:	42bc      	cmp	r4, r7
        freeFound++;
   d54e2:	bf3c      	itt	cc
   d54e4:	3401      	addcc	r4, #1
   d54e6:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d54e8:	b922      	cbnz	r2, d54f4 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d54ea:	e081      	b.n	d55f0 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d54ec:	42bc      	cmp	r4, r7
   d54ee:	bf38      	it	cc
   d54f0:	2400      	movcc	r4, #0
   d54f2:	e003      	b.n	d54fc <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d54f4:	2ae5      	cmp	r2, #229	; 0xe5
   d54f6:	d101      	bne.n	d54fc <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d54f8:	2500      	movs	r5, #0
   d54fa:	e7db      	b.n	d54b4 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d54fc:	2a2e      	cmp	r2, #46	; 0x2e
   d54fe:	d0fb      	beq.n	d54f8 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5500:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d5502:	290f      	cmp	r1, #15
   d5504:	d152      	bne.n	d55ac <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d5506:	b93d      	cbnz	r5, d5518 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d5508:	0651      	lsls	r1, r2, #25
   d550a:	d5d3      	bpl.n	d54b4 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d550c:	7b43      	ldrb	r3, [r0, #13]
   d550e:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d5510:	f002 051f 	and.w	r5, r2, #31
   d5514:	462b      	mov	r3, r5
   d5516:	e007      	b.n	d5528 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d5518:	3b01      	subs	r3, #1
   d551a:	b2db      	uxtb	r3, r3
   d551c:	429a      	cmp	r2, r3
   d551e:	d1eb      	bne.n	d54f8 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5520:	7b42      	ldrb	r2, [r0, #13]
   d5522:	9903      	ldr	r1, [sp, #12]
   d5524:	4291      	cmp	r1, r2
   d5526:	d1e7      	bne.n	d54f8 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d5528:	1e5a      	subs	r2, r3, #1
   d552a:	f04f 0c0d 	mov.w	ip, #13
   d552e:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d5532:	9a02      	ldr	r2, [sp, #8]
   d5534:	4562      	cmp	r2, ip
   d5536:	d9df      	bls.n	d54f8 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5538:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d553c:	f1be 0f04 	cmp.w	lr, #4
   d5540:	fa5f f28e 	uxtb.w	r2, lr
   d5544:	d804      	bhi.n	d5550 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d5546:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d554a:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d554e:	e00c      	b.n	d556a <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d5550:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d5552:	bf95      	itete	ls
   d5554:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d5558:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d555c:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d5560:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d5564:	bf94      	ite	ls
   d5566:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d5568:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d556a:	9902      	ldr	r1, [sp, #8]
   d556c:	4561      	cmp	r1, ip
   d556e:	d103      	bne.n	d5578 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d5570:	2a00      	cmp	r2, #0
   d5572:	bf18      	it	ne
   d5574:	2500      	movne	r5, #0
   d5576:	e79d      	b.n	d54b4 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5578:	2aff      	cmp	r2, #255	; 0xff
   d557a:	d8bd      	bhi.n	d54f8 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d557c:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d557e:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d5582:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5584:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d5588:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d558c:	bf98      	it	ls
   d558e:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5590:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d5594:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d5598:	bf98      	it	ls
   d559a:	b2d2      	uxtbls	r2, r2
   d559c:	f1bc 0f19 	cmp.w	ip, #25
   d55a0:	bf9c      	itt	ls
   d55a2:	3120      	addls	r1, #32
   d55a4:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d55a6:	4291      	cmp	r1, r2
   d55a8:	d1a6      	bne.n	d54f8 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d55aa:	e0fb      	b.n	d57a4 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d55ac:	0709      	lsls	r1, r1, #28
   d55ae:	d4a3      	bmi.n	d54f8 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d55b0:	b14d      	cbz	r5, d55c6 <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d55b2:	2b01      	cmp	r3, #1
   d55b4:	f47f af5b 	bne.w	d546e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d55b8:	f7ff fd83 	bl	d50c2 <_ZN7FatFile11lfnChecksumEPh>
   d55bc:	9b03      	ldr	r3, [sp, #12]
   d55be:	4283      	cmp	r3, r0
   d55c0:	f47f af55 	bne.w	d546e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d55c4:	e00f      	b.n	d55e6 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d55c6:	220b      	movs	r2, #11
   d55c8:	9906      	ldr	r1, [sp, #24]
   d55ca:	9307      	str	r3, [sp, #28]
   d55cc:	f003 fd84 	bl	d90d8 <memcmp>
   d55d0:	9b07      	ldr	r3, [sp, #28]
   d55d2:	2800      	cmp	r0, #0
   d55d4:	f47f af6e 	bne.w	d54b4 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d55d8:	f899 2000 	ldrb.w	r2, [r9]
   d55dc:	07d2      	lsls	r2, r2, #31
   d55de:	d502      	bpl.n	d55e6 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d55e0:	2201      	movs	r2, #1
   d55e2:	9204      	str	r2, [sp, #16]
   d55e4:	e766      	b.n	d54b4 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d55e6:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d55ea:	f000 80d1 	beq.w	d5790 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d55ee:	e73e      	b.n	d546e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d55f0:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d55f4:	f43f af3b 	beq.w	d546e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d55f8:	f00b 0303 	and.w	r3, fp, #3
   d55fc:	3b01      	subs	r3, #1
   d55fe:	2b01      	cmp	r3, #1
   d5600:	f63f af35 	bhi.w	d546e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d5604:	2c00      	cmp	r4, #0
   d5606:	bf08      	it	eq
   d5608:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d560a:	42bc      	cmp	r4, r7
   d560c:	d302      	bcc.n	d5614 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d560e:	9b04      	ldr	r3, [sp, #16]
   d5610:	b9cb      	cbnz	r3, d5646 <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d5612:	e01f      	b.n	d5654 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d5614:	2100      	movs	r1, #0
   d5616:	4630      	mov	r0, r6
   d5618:	f000 fa53 	bl	d5ac2 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d561c:	b910      	cbnz	r0, d5624 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d561e:	7873      	ldrb	r3, [r6, #1]
   d5620:	b15b      	cbz	r3, d563a <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d5622:	e724      	b.n	d546e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d5624:	3401      	adds	r4, #1
   d5626:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d5628:	e7ef      	b.n	d560a <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d562a:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d562c:	791b      	ldrb	r3, [r3, #4]
   d562e:	2b01      	cmp	r3, #1
   d5630:	d8ed      	bhi.n	d560e <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d5632:	3410      	adds	r4, #16
   d5634:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d5636:	42a7      	cmp	r7, r4
   d5638:	d9e9      	bls.n	d560e <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d563a:	4630      	mov	r0, r6
   d563c:	f000 f8ea 	bl	d5814 <_ZN7FatFile13addDirClusterEv>
   d5640:	2800      	cmp	r0, #0
   d5642:	d1f2      	bne.n	d562a <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d5644:	e713      	b.n	d546e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d5646:	4649      	mov	r1, r9
   d5648:	4630      	mov	r0, r6
   d564a:	f7ff feaf 	bl	d53ac <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d564e:	2800      	cmp	r0, #0
   d5650:	f43f af0d 	beq.w	d546e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d5654:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d5658:	4630      	mov	r0, r6
   d565a:	f000 fa4f 	bl	d5afc <_ZN7FatFile7seekSetEm>
   d565e:	2800      	cmp	r0, #0
   d5660:	f43f af05 	beq.w	d546e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d5664:	1e7d      	subs	r5, r7, #1
   d5666:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d5668:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d566a:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d566e:	f04f 080f 	mov.w	r8, #15
   d5672:	e041      	b.n	d56f8 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d5674:	2100      	movs	r1, #0
   d5676:	4630      	mov	r0, r6
   d5678:	f000 fa23 	bl	d5ac2 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d567c:	4607      	mov	r7, r0
   d567e:	2800      	cmp	r0, #0
   d5680:	f43f aef5 	beq.w	d546e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d5684:	68b2      	ldr	r2, [r6, #8]
   d5686:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d568a:	42ac      	cmp	r4, r5
   d568c:	f043 0301 	orr.w	r3, r3, #1
   d5690:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d5694:	bf0c      	ite	eq
   d5696:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d569a:	4622      	movne	r2, r4
   d569c:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d569e:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d56a2:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d56a6:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d56aa:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d56ac:	f7ff fd09 	bl	d50c2 <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d56b0:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d56b2:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d56b4:	f887 a01a 	strb.w	sl, [r7, #26]
   d56b8:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d56bc:	f002 021f 	and.w	r2, r2, #31
   d56c0:	230d      	movs	r3, #13
   d56c2:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d56c4:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d56c8:	435a      	muls	r2, r3
   d56ca:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d56cc:	9902      	ldr	r1, [sp, #8]
   d56ce:	4291      	cmp	r1, r2
   d56d0:	d915      	bls.n	d56fe <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d56d2:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d56d6:	2b04      	cmp	r3, #4
   d56d8:	fa5f fc83 	uxtb.w	ip, r3
   d56dc:	f103 0001 	add.w	r0, r3, #1
   d56e0:	d813      	bhi.n	d570a <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d56e2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d56e6:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d56ea:	280d      	cmp	r0, #13
   d56ec:	f102 0201 	add.w	r2, r2, #1
   d56f0:	4603      	mov	r3, r0
   d56f2:	d1eb      	bne.n	d56cc <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d56f4:	3c01      	subs	r4, #1
   d56f6:	b2e4      	uxtb	r4, r4
   d56f8:	2c00      	cmp	r4, #0
   d56fa:	d1bb      	bne.n	d5674 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d56fc:	e00e      	b.n	d571c <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d56fe:	bf14      	ite	ne
   d5700:	f04f 31ff 	movne.w	r1, #4294967295
   d5704:	2100      	moveq	r1, #0
   d5706:	b289      	uxth	r1, r1
   d5708:	e7e5      	b.n	d56d6 <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d570a:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d570e:	bf94      	ite	ls
   d5710:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d5714:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d5718:	8099      	strh	r1, [r3, #4]
   d571a:	e7e6      	b.n	d56ea <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d571c:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d571e:	4621      	mov	r1, r4
   d5720:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d5722:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d5726:	f000 f9cc 	bl	d5ac2 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d572a:	4607      	mov	r7, r0
   d572c:	2800      	cmp	r0, #0
   d572e:	f43f ae9e 	beq.w	d546e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d5732:	2220      	movs	r2, #32
   d5734:	4621      	mov	r1, r4
   d5736:	f003 fce9 	bl	d910c <memset>
  memcpy(dir->name, fname->sfn, 11);
   d573a:	464b      	mov	r3, r9
   d573c:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d5740:	603a      	str	r2, [r7, #0]
   d5742:	685a      	ldr	r2, [r3, #4]
   d5744:	607a      	str	r2, [r7, #4]
   d5746:	891a      	ldrh	r2, [r3, #8]
   d5748:	813a      	strh	r2, [r7, #8]
   d574a:	7a9b      	ldrb	r3, [r3, #10]
   d574c:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d574e:	f899 3000 	ldrb.w	r3, [r9]
   d5752:	f003 0318 	and.w	r3, r3, #24
   d5756:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d5758:	4b18      	ldr	r3, [pc, #96]	; (d57bc <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d575a:	681b      	ldr	r3, [r3, #0]
   d575c:	b12b      	cbz	r3, d576a <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d575e:	f107 010e 	add.w	r1, r7, #14
   d5762:	f107 0010 	add.w	r0, r7, #16
   d5766:	4798      	blx	r3
   d5768:	e006      	b.n	d5778 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d576a:	2321      	movs	r3, #33	; 0x21
   d576c:	743b      	strb	r3, [r7, #16]
   d576e:	2328      	movs	r3, #40	; 0x28
   d5770:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d5772:	2308      	movs	r3, #8
   d5774:	73bc      	strb	r4, [r7, #14]
   d5776:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d5778:	8a3b      	ldrh	r3, [r7, #16]
   d577a:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d577c:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d577e:	89fb      	ldrh	r3, [r7, #14]
   d5780:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d5782:	68b2      	ldr	r2, [r6, #8]
   d5784:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d5788:	f043 0301 	orr.w	r3, r3, #1
   d578c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d5790:	9500      	str	r5, [sp, #0]
   d5792:	465b      	mov	r3, fp
   d5794:	4652      	mov	r2, sl
   d5796:	4631      	mov	r1, r6
   d5798:	9805      	ldr	r0, [sp, #20]
   d579a:	f000 f9f8 	bl	d5b8e <_ZN7FatFile15openCachedEntryEPS_tih>
   d579e:	e009      	b.n	d57b4 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d57a0:	2701      	movs	r7, #1
   d57a2:	e677      	b.n	d5494 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d57a4:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d57a8:	f1be 0f0d 	cmp.w	lr, #13
   d57ac:	f43f ae82 	beq.w	d54b4 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d57b0:	46d4      	mov	ip, sl
   d57b2:	e6c3      	b.n	d553c <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d57b4:	b009      	add	sp, #36	; 0x24
   d57b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d57ba:	bf00      	nop
   d57bc:	2003e388 	.word	0x2003e388

000d57c0 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d57c0:	f001 b8ae 	b.w	d6920 <HAL_Pin_Map>

000d57c4 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d57c4:	f001 b8ac 	b.w	d6920 <HAL_Pin_Map>

000d57c8 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d57c8:	f001 b8aa 	b.w	d6920 <HAL_Pin_Map>

000d57cc <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   d57cc:	b510      	push	{r4, lr}
   d57ce:	460c      	mov	r4, r1
   d57d0:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   d57d2:	b909      	cbnz	r1, d57d8 <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   d57d4:	2000      	movs	r0, #0
   d57d6:	bd10      	pop	{r4, pc}
  dir_t* dir;
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
   d57d8:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   d57dc:	d004      	beq.n	d57e8 <_ZN7FatFile6getSFNEPc+0x1c>
    name[0] = '/';
   d57de:	232f      	movs	r3, #47	; 0x2f
   d57e0:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   d57e2:	2300      	movs	r3, #0
   d57e4:	7063      	strb	r3, [r4, #1]
   d57e6:	e006      	b.n	d57f6 <_ZN7FatFile6getSFNEPc+0x2a>
    return true;
  }
  // cache entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   d57e8:	f000 f854 	bl	d5894 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d57ec:	2800      	cmp	r0, #0
   d57ee:	d0f1      	beq.n	d57d4 <_ZN7FatFile6getSFNEPc+0x8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  dirName(dir, name);
   d57f0:	4621      	mov	r1, r4
   d57f2:	f000 f85e 	bl	d58b2 <_ZN7FatFile7dirNameEPK14directoryEntryPc>
  return true;
   d57f6:	2001      	movs	r0, #1

fail:
  return false;
}
   d57f8:	bd10      	pop	{r4, pc}

000d57fa <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d57fa:	f001 b891 	b.w	d6920 <HAL_Pin_Map>

000d57fe <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d57fe:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5800:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5802:	f043 0304 	orr.w	r3, r3, #4
   d5806:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5808:	f100 0210 	add.w	r2, r0, #16
   d580c:	6880      	ldr	r0, [r0, #8]
   d580e:	f000 bca3 	b.w	d6158 <_ZN9FatVolume15allocateClusterEmPm>
	...

000d5814 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d5814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d5818:	7803      	ldrb	r3, [r0, #0]
   d581a:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d581e:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d5820:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d5824:	b10b      	cbz	r3, d582a <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d5826:	2600      	movs	r6, #0
   d5828:	e02e      	b.n	d5888 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d582a:	6942      	ldr	r2, [r0, #20]
   d582c:	4b18      	ldr	r3, [pc, #96]	; (d5890 <_ZN7FatFile13addDirClusterEv+0x7c>)
   d582e:	429a      	cmp	r2, r3
   d5830:	d8f9      	bhi.n	d5826 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d5832:	f7ff ffe4 	bl	d57fe <_ZN7FatFile10addClusterEv>
   d5836:	4606      	mov	r6, r0
   d5838:	2800      	cmp	r0, #0
   d583a:	d0f4      	beq.n	d5826 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d583c:	6921      	ldr	r1, [r4, #16]
   d583e:	68a0      	ldr	r0, [r4, #8]
   d5840:	f000 fc1f 	bl	d6082 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5844:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5846:	68a0      	ldr	r0, [r4, #8]
   d5848:	2205      	movs	r2, #5
   d584a:	4639      	mov	r1, r7
   d584c:	3024      	adds	r0, #36	; 0x24
   d584e:	f000 fbf4 	bl	d603a <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d5852:	4680      	mov	r8, r0
   d5854:	2800      	cmp	r0, #0
   d5856:	d0e6      	beq.n	d5826 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d5858:	4629      	mov	r1, r5
   d585a:	f44f 7200 	mov.w	r2, #512	; 0x200
   d585e:	f003 fc55 	bl	d910c <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d5862:	2501      	movs	r5, #1
   d5864:	68a3      	ldr	r3, [r4, #8]
   d5866:	791a      	ldrb	r2, [r3, #4]
   d5868:	42aa      	cmp	r2, r5
   d586a:	d909      	bls.n	d5880 <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d586c:	4642      	mov	r2, r8
   d586e:	19e9      	adds	r1, r5, r7
   d5870:	6818      	ldr	r0, [r3, #0]
   d5872:	f000 ff5f 	bl	d6734 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d5876:	2800      	cmp	r0, #0
   d5878:	d0d5      	beq.n	d5826 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d587a:	3501      	adds	r5, #1
   d587c:	b2ed      	uxtb	r5, r5
   d587e:	e7f1      	b.n	d5864 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d5880:	6963      	ldr	r3, [r4, #20]
   d5882:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d5886:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d5888:	4630      	mov	r0, r6
   d588a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d588e:	bf00      	nop
   d5890:	001ffdff 	.word	0x001ffdff

000d5894 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d5894:	b510      	push	{r4, lr}
   d5896:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5898:	6880      	ldr	r0, [r0, #8]
   d589a:	460a      	mov	r2, r1
   d589c:	3024      	adds	r0, #36	; 0x24
   d589e:	69a1      	ldr	r1, [r4, #24]
   d58a0:	f000 fbcb 	bl	d603a <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d58a4:	b120      	cbz	r0, d58b0 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d58a6:	88a3      	ldrh	r3, [r4, #4]
   d58a8:	f003 030f 	and.w	r3, r3, #15
   d58ac:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d58b0:	bd10      	pop	{r4, pc}

000d58b2 <_ZN7FatFile7dirNameEPK14directoryEntryPc>:

fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   d58b2:	b5f0      	push	{r4, r5, r6, r7, lr}
   d58b4:	2400      	movs	r4, #0
   d58b6:	1e45      	subs	r5, r0, #1
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
   d58b8:	2608      	movs	r6, #8
fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
   d58ba:	4623      	mov	r3, r4
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
   d58bc:	272e      	movs	r7, #46	; 0x2e
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
   d58be:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d58c2:	2a20      	cmp	r2, #32
   d58c4:	d018      	beq.n	d58f8 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x46>
      continue;
    }
    if (i == 8) {
   d58c6:	2c08      	cmp	r4, #8
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
   d58c8:	bf02      	ittt	eq
   d58ca:	54cf      	strbeq	r7, [r1, r3]
   d58cc:	1c5a      	addeq	r2, r3, #1
   d58ce:	b2d3      	uxtbeq	r3, r2
    }
    char c = dir->name[i];
   d58d0:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   d58d2:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
   d58d6:	bf08      	it	eq
   d58d8:	2610      	moveq	r6, #16
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   d58da:	f1be 0f19 	cmp.w	lr, #25
   d58de:	d806      	bhi.n	d58ee <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3c>
   d58e0:	f890 e00c 	ldrb.w	lr, [r0, #12]
   d58e4:	ea16 0f0e 	tst.w	r6, lr
      c += 'a' - 'A';
   d58e8:	bf1c      	itt	ne
   d58ea:	3220      	addne	r2, #32
   d58ec:	b2d2      	uxtbne	r2, r2
    }
    name[j++] = c;
   d58ee:	f103 0e01 	add.w	lr, r3, #1
   d58f2:	54ca      	strb	r2, [r1, r3]
   d58f4:	fa5f f38e 	uxtb.w	r3, lr
   d58f8:	3401      	adds	r4, #1
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
   d58fa:	2c0b      	cmp	r4, #11
   d58fc:	d1df      	bne.n	d58be <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xc>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
   d58fe:	2200      	movs	r2, #0
   d5900:	54ca      	strb	r2, [r1, r3]
  return j;
}
   d5902:	4618      	mov	r0, r3
   d5904:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5906 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d5906:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d5908:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d590a:	4605      	mov	r5, r0
   d590c:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d590e:	b984      	cbnz	r4, d5932 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d5910:	2224      	movs	r2, #36	; 0x24
   d5912:	4621      	mov	r1, r4
   d5914:	f003 fbfa 	bl	d910c <memset>

  m_vol = vol;
   d5918:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d591a:	79f3      	ldrb	r3, [r6, #7]
   d591c:	2b10      	cmp	r3, #16
   d591e:	d003      	beq.n	d5928 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d5920:	2b20      	cmp	r3, #32
   d5922:	d106      	bne.n	d5932 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d5924:	2340      	movs	r3, #64	; 0x40
   d5926:	e000      	b.n	d592a <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d5928:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d592a:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d592c:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d592e:	70a8      	strb	r0, [r5, #2]
   d5930:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d5932:	2000      	movs	r0, #0
   d5934:	bd70      	pop	{r4, r5, r6, pc}

000d5936 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d5936:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d593a:	7803      	ldrb	r3, [r0, #0]
   d593c:	4604      	mov	r4, r0
   d593e:	4689      	mov	r9, r1
   d5940:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d5942:	b14b      	cbz	r3, d5958 <_ZN7FatFile4readEPvj+0x22>
   d5944:	7882      	ldrb	r2, [r0, #2]
   d5946:	07d1      	lsls	r1, r2, #31
   d5948:	d506      	bpl.n	d5958 <_ZN7FatFile4readEPvj+0x22>
   d594a:	e00c      	b.n	d5966 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d594c:	465a      	mov	r2, fp
   d594e:	6921      	ldr	r1, [r4, #16]
   d5950:	f000 fb9d 	bl	d608e <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d5954:	2800      	cmp	r0, #0
   d5956:	da3d      	bge.n	d59d4 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d5958:	7863      	ldrb	r3, [r4, #1]
   d595a:	f043 0302 	orr.w	r3, r3, #2
   d595e:	7063      	strb	r3, [r4, #1]
  return -1;
   d5960:	f04f 30ff 	mov.w	r0, #4294967295
   d5964:	e097      	b.n	d5a96 <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d5966:	071a      	lsls	r2, r3, #28
   d5968:	d503      	bpl.n	d5972 <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d596a:	69e3      	ldr	r3, [r4, #28]
   d596c:	6962      	ldr	r2, [r4, #20]
   d596e:	1a9b      	subs	r3, r3, r2
   d5970:	e007      	b.n	d5982 <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d5972:	069a      	lsls	r2, r3, #26
   d5974:	d508      	bpl.n	d5988 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d5976:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d5978:	891a      	ldrh	r2, [r3, #8]
   d597a:	6963      	ldr	r3, [r4, #20]
   d597c:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d5980:	b29b      	uxth	r3, r3
   d5982:	429d      	cmp	r5, r3
   d5984:	bf28      	it	cs
   d5986:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d5988:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d598a:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d598e:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d5992:	2e00      	cmp	r6, #0
   d5994:	d035      	beq.n	d5a02 <_ZN7FatFile4readEPvj+0xcc>
   d5996:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d5998:	6963      	ldr	r3, [r4, #20]
   d599a:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d599c:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d59a0:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d59a4:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d59a8:	d002      	beq.n	d59b0 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d59aa:	6a03      	ldr	r3, [r0, #32]
   d59ac:	4419      	add	r1, r3
   d59ae:	e01d      	b.n	d59ec <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d59b0:	f890 8005 	ldrb.w	r8, [r0, #5]
   d59b4:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d59b8:	f1ba 0f00 	cmp.w	sl, #0
   d59bc:	d110      	bne.n	d59e0 <_ZN7FatFile4readEPvj+0xaa>
   d59be:	f1b8 0f00 	cmp.w	r8, #0
   d59c2:	d10d      	bne.n	d59e0 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d59c4:	2b00      	cmp	r3, #0
   d59c6:	d1c1      	bne.n	d594c <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d59c8:	0653      	lsls	r3, r2, #25
   d59ca:	bf4c      	ite	mi
   d59cc:	6a03      	ldrmi	r3, [r0, #32]
   d59ce:	6a23      	ldrpl	r3, [r4, #32]
   d59d0:	6123      	str	r3, [r4, #16]
   d59d2:	e005      	b.n	d59e0 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d59d4:	d104      	bne.n	d59e0 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d59d6:	7823      	ldrb	r3, [r4, #0]
   d59d8:	f013 0f70 	tst.w	r3, #112	; 0x70
   d59dc:	d111      	bne.n	d5a02 <_ZN7FatFile4readEPvj+0xcc>
   d59de:	e7bb      	b.n	d5958 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d59e0:	6921      	ldr	r1, [r4, #16]
   d59e2:	68a0      	ldr	r0, [r4, #8]
   d59e4:	f000 fb4d 	bl	d6082 <_ZNK9FatVolume17clusterFirstBlockEm>
   d59e8:	eb08 0100 	add.w	r1, r8, r0
   d59ec:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d59ee:	f1ba 0f00 	cmp.w	sl, #0
   d59f2:	d135      	bne.n	d5a60 <_ZN7FatFile4readEPvj+0x12a>
   d59f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d59f8:	d332      	bcc.n	d5a60 <_ZN7FatFile4readEPvj+0x12a>
   d59fa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d59fc:	4299      	cmp	r1, r3
   d59fe:	d102      	bne.n	d5a06 <_ZN7FatFile4readEPvj+0xd0>
   d5a00:	e02e      	b.n	d5a60 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d5a02:	1ba8      	subs	r0, r5, r6
   d5a04:	e047      	b.n	d5a96 <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d5a06:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5a0a:	d31b      	bcc.n	d5a44 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d5a0c:	7822      	ldrb	r2, [r4, #0]
   d5a0e:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d5a10:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d5a14:	d406      	bmi.n	d5a24 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d5a16:	7902      	ldrb	r2, [r0, #4]
   d5a18:	ebc8 0202 	rsb	r2, r8, r2
   d5a1c:	b2d2      	uxtb	r2, r2
   d5a1e:	4592      	cmp	sl, r2
   d5a20:	bf28      	it	cs
   d5a22:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5a24:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d5a26:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5a2a:	d207      	bcs.n	d5a3c <_ZN7FatFile4readEPvj+0x106>
   d5a2c:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d5a2e:	4653      	mov	r3, sl
   d5a30:	464a      	mov	r2, r9
   d5a32:	6800      	ldr	r0, [r0, #0]
   d5a34:	f000 fe3c 	bl	d66b0 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d5a38:	b960      	cbnz	r0, d5a54 <_ZN7FatFile4readEPvj+0x11e>
   d5a3a:	e78d      	b.n	d5958 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5a3c:	4453      	add	r3, sl
   d5a3e:	4299      	cmp	r1, r3
   d5a40:	d321      	bcc.n	d5a86 <_ZN7FatFile4readEPvj+0x150>
   d5a42:	e7f3      	b.n	d5a2c <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d5a44:	464a      	mov	r2, r9
   d5a46:	6800      	ldr	r0, [r0, #0]
   d5a48:	f000 fdea 	bl	d6620 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d5a4c:	2800      	cmp	r0, #0
   d5a4e:	d083      	beq.n	d5958 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d5a50:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d5a54:	6963      	ldr	r3, [r4, #20]
   d5a56:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d5a58:	44b9      	add	r9, r7
    m_curPosition += n;
   d5a5a:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d5a5c:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d5a5e:	e798      	b.n	d5992 <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5a60:	2200      	movs	r2, #0
   d5a62:	3024      	adds	r0, #36	; 0x24
   d5a64:	f000 fae9 	bl	d603a <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d5a68:	2800      	cmp	r0, #0
   d5a6a:	f43f af75 	beq.w	d5958 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d5a6e:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d5a72:	42b7      	cmp	r7, r6
   d5a74:	bf28      	it	cs
   d5a76:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d5a78:	eb00 010a 	add.w	r1, r0, sl
   d5a7c:	463a      	mov	r2, r7
   d5a7e:	4648      	mov	r0, r9
   d5a80:	f003 fb39 	bl	d90f6 <memcpy>
   d5a84:	e7e6      	b.n	d5a54 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5a86:	3024      	adds	r0, #36	; 0x24
   d5a88:	9101      	str	r1, [sp, #4]
   d5a8a:	f000 faaf 	bl	d5fec <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d5a8e:	9901      	ldr	r1, [sp, #4]
   d5a90:	2800      	cmp	r0, #0
   d5a92:	d1cb      	bne.n	d5a2c <_ZN7FatFile4readEPvj+0xf6>
   d5a94:	e760      	b.n	d5958 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d5a96:	b003      	add	sp, #12
   d5a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5a9c <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d5a9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d5a9e:	2201      	movs	r2, #1
   d5aa0:	f10d 0107 	add.w	r1, sp, #7
   d5aa4:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d5aa6:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d5aa8:	6905      	ldr	r5, [r0, #16]
   d5aaa:	f7ff ff44 	bl	d5936 <_ZN7FatFile4readEPvj>
   d5aae:	2801      	cmp	r0, #1
   d5ab0:	bf05      	ittet	eq
   d5ab2:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d5ab6:	6166      	streq	r6, [r4, #20]
   d5ab8:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = pos->cluster;
   d5abc:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d5abe:	b002      	add	sp, #8
   d5ac0:	bd70      	pop	{r4, r5, r6, pc}

000d5ac2 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d5ac2:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d5ac4:	6943      	ldr	r3, [r0, #20]
   d5ac6:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d5aca:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d5acc:	b105      	cbz	r5, d5ad0 <_ZN7FatFile12readDirCacheEb+0xe>
   d5ace:	b969      	cbnz	r1, d5aec <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d5ad0:	2201      	movs	r2, #1
   d5ad2:	f10d 0107 	add.w	r1, sp, #7
   d5ad6:	4620      	mov	r0, r4
   d5ad8:	f7ff ff2d 	bl	d5936 <_ZN7FatFile4readEPvj>
   d5adc:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d5ade:	2801      	cmp	r0, #1
   d5ae0:	d001      	beq.n	d5ae6 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d5ae2:	2000      	movs	r0, #0
   d5ae4:	e008      	b.n	d5af8 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d5ae6:	6963      	ldr	r3, [r4, #20]
   d5ae8:	331f      	adds	r3, #31
   d5aea:	e000      	b.n	d5aee <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d5aec:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d5aee:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d5af0:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d5af2:	3030      	adds	r0, #48	; 0x30
   d5af4:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d5af8:	b003      	add	sp, #12
   d5afa:	bd30      	pop	{r4, r5, pc}

000d5afc <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5b00:	460e      	mov	r6, r1
   d5b02:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d5b04:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5b06:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d5b08:	2900      	cmp	r1, #0
   d5b0a:	d039      	beq.n	d5b80 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d5b0c:	6945      	ldr	r5, [r0, #20]
   d5b0e:	42b5      	cmp	r5, r6
   d5b10:	d03a      	beq.n	d5b88 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d5b12:	b90e      	cbnz	r6, d5b18 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d5b14:	6106      	str	r6, [r0, #16]
    goto done;
   d5b16:	e031      	b.n	d5b7c <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d5b18:	070b      	lsls	r3, r1, #28
   d5b1a:	d503      	bpl.n	d5b24 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d5b1c:	69c3      	ldr	r3, [r0, #28]
   d5b1e:	429e      	cmp	r6, r3
   d5b20:	d82e      	bhi.n	d5b80 <_ZN7FatFile7seekSetEm+0x84>
   d5b22:	e007      	b.n	d5b34 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d5b24:	0688      	lsls	r0, r1, #26
   d5b26:	d505      	bpl.n	d5b34 <_ZN7FatFile7seekSetEm+0x38>
   d5b28:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d5b2a:	891b      	ldrh	r3, [r3, #8]
   d5b2c:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d5b30:	d826      	bhi.n	d5b80 <_ZN7FatFile7seekSetEm+0x84>
   d5b32:	e023      	b.n	d5b7c <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5b34:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d5b38:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d5b3c:	1e6a      	subs	r2, r5, #1
   d5b3e:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5b42:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5b44:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5b46:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d5b48:	429a      	cmp	r2, r3
   d5b4a:	d800      	bhi.n	d5b4e <_ZN7FatFile7seekSetEm+0x52>
   d5b4c:	b94d      	cbnz	r5, d5b62 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5b4e:	064a      	lsls	r2, r1, #25
   d5b50:	bf4c      	ite	mi
   d5b52:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d5b56:	6a22      	ldrpl	r2, [r4, #32]
   d5b58:	6122      	str	r2, [r4, #16]
   d5b5a:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5b5c:	f104 0810 	add.w	r8, r4, #16
   d5b60:	e00a      	b.n	d5b78 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d5b62:	1a9b      	subs	r3, r3, r2
   d5b64:	e7f9      	b.n	d5b5a <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5b66:	4642      	mov	r2, r8
   d5b68:	6921      	ldr	r1, [r4, #16]
   d5b6a:	68a0      	ldr	r0, [r4, #8]
   d5b6c:	f000 fa8f 	bl	d608e <_ZN9FatVolume6fatGetEmPm>
   d5b70:	2800      	cmp	r0, #0
   d5b72:	f105 35ff 	add.w	r5, r5, #4294967295
   d5b76:	dd03      	ble.n	d5b80 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d5b78:	2d00      	cmp	r5, #0
   d5b7a:	d1f4      	bne.n	d5b66 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d5b7c:	6166      	str	r6, [r4, #20]
   d5b7e:	e003      	b.n	d5b88 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d5b80:	6127      	str	r7, [r4, #16]
  return false;
   d5b82:	2000      	movs	r0, #0
   d5b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d5b88:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d5b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5b8e <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d5b8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5b90:	460f      	mov	r7, r1
   d5b92:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d5b94:	2100      	movs	r1, #0
   d5b96:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d5b98:	4604      	mov	r4, r0
   d5b9a:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d5b9c:	f003 fab6 	bl	d910c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d5ba0:	68b8      	ldr	r0, [r7, #8]
   d5ba2:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5ba4:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d5ba8:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5baa:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d5bae:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d5bb0:	6a3b      	ldr	r3, [r7, #32]
   d5bb2:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5bb4:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d5bb6:	7acb      	ldrb	r3, [r1, #11]
   d5bb8:	071d      	lsls	r5, r3, #28
   d5bba:	d44c      	bmi.n	d5c56 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d5bbc:	1883      	adds	r3, r0, r2
   d5bbe:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d5bc2:	f003 0317 	and.w	r3, r3, #23
   d5bc6:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d5bc8:	7ac9      	ldrb	r1, [r1, #11]
   d5bca:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d5bce:	bf04      	itt	eq
   d5bd0:	f043 0308 	orreq.w	r3, r3, #8
   d5bd4:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d5bd6:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d5bda:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d5bdc:	f006 0303 	and.w	r3, r6, #3
   d5be0:	2b01      	cmp	r3, #1
   d5be2:	d009      	beq.n	d5bf8 <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d5be4:	2b02      	cmp	r3, #2
   d5be6:	d005      	beq.n	d5bf4 <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d5be8:	2b00      	cmp	r3, #0
   d5bea:	d134      	bne.n	d5c56 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d5bec:	0571      	lsls	r1, r6, #21
   d5bee:	d432      	bmi.n	d5c56 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d5bf0:	2301      	movs	r3, #1
   d5bf2:	e002      	b.n	d5bfa <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d5bf4:	2303      	movs	r3, #3
   d5bf6:	e000      	b.n	d5bfa <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d5bf8:	2302      	movs	r3, #2
   d5bfa:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d5bfc:	78a1      	ldrb	r1, [r4, #2]
   d5bfe:	078b      	lsls	r3, r1, #30
   d5c00:	d503      	bpl.n	d5c0a <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d5c02:	7823      	ldrb	r3, [r4, #0]
   d5c04:	f013 0f11 	tst.w	r3, #17
   d5c08:	d125      	bne.n	d5c56 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d5c0a:	b24b      	sxtb	r3, r1
   d5c0c:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d5c10:	f006 0108 	and.w	r1, r6, #8
   d5c14:	bf14      	ite	ne
   d5c16:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d5c1a:	2700      	moveq	r7, #0
   d5c1c:	4319      	orrs	r1, r3
   d5c1e:	4339      	orrs	r1, r7
   d5c20:	70a1      	strb	r1, [r4, #2]
   d5c22:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d5c24:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d5c26:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d5c28:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d5c2a:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d5c2e:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d5c32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d5c36:	d504      	bpl.n	d5c42 <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d5c38:	b181      	cbz	r1, d5c5c <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d5c3a:	f000 fac8 	bl	d61ce <_ZN9FatVolume9freeChainEm>
   d5c3e:	b968      	cbnz	r0, d5c5c <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d5c40:	e009      	b.n	d5c56 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d5c42:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d5c44:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d5c46:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d5c48:	0473      	lsls	r3, r6, #17
   d5c4a:	d50c      	bpl.n	d5c66 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d5c4c:	69e1      	ldr	r1, [r4, #28]
   d5c4e:	4620      	mov	r0, r4
   d5c50:	f7ff ff54 	bl	d5afc <_ZN7FatFile7seekSetEm>
   d5c54:	b938      	cbnz	r0, d5c66 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d5c56:	2000      	movs	r0, #0
   d5c58:	7020      	strb	r0, [r4, #0]
  return false;
   d5c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d5c5c:	78a3      	ldrb	r3, [r4, #2]
   d5c5e:	f043 0304 	orr.w	r3, r3, #4
   d5c62:	70a3      	strb	r3, [r4, #2]
   d5c64:	e7f0      	b.n	d5c48 <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d5c66:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d5c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c6a <_ZN7FatFile8openNextEPS_i>:
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   d5c6a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   d5c6e:	7803      	ldrb	r3, [r0, #0]
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   d5c70:	4606      	mov	r6, r0
   d5c72:	460d      	mov	r5, r1
   d5c74:	4617      	mov	r7, r2
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   d5c76:	bb53      	cbnz	r3, d5cce <_ZN7FatFile8openNextEPS_i+0x64>
   d5c78:	780b      	ldrb	r3, [r1, #0]
   d5c7a:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5c7e:	d026      	beq.n	d5cce <_ZN7FatFile8openNextEPS_i+0x64>
   d5c80:	694c      	ldr	r4, [r1, #20]
   d5c82:	f014 041f 	ands.w	r4, r4, #31
   d5c86:	d122      	bne.n	d5cce <_ZN7FatFile8openNextEPS_i+0x64>
   d5c88:	46a0      	mov	r8, r4
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    dir_t* dir = dirFile->readDirCache();
   d5c8a:	2100      	movs	r1, #0
   d5c8c:	4628      	mov	r0, r5
   d5c8e:	f8d5 9014 	ldr.w	r9, [r5, #20]
   d5c92:	f7ff ff16 	bl	d5ac2 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d5c96:	b1d0      	cbz	r0, d5cce <_ZN7FatFile8openNextEPS_i+0x64>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
   d5c98:	7803      	ldrb	r3, [r0, #0]
   d5c9a:	b1c3      	cbz	r3, d5cce <_ZN7FatFile8openNextEPS_i+0x64>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   d5c9c:	2b2e      	cmp	r3, #46	; 0x2e
   d5c9e:	d101      	bne.n	d5ca4 <_ZN7FatFile8openNextEPS_i+0x3a>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
        lfnOrd = ldir->ord & 0X1F;
        chksum = ldir->chksum;
      }
    } else {
      lfnOrd = 0;
   d5ca0:	2400      	movs	r4, #0
   d5ca2:	e7f2      	b.n	d5c8a <_ZN7FatFile8openNextEPS_i+0x20>
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   d5ca4:	2be5      	cmp	r3, #229	; 0xe5
   d5ca6:	d0fb      	beq.n	d5ca0 <_ZN7FatFile8openNextEPS_i+0x36>
   d5ca8:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d5caa:	f011 0f08 	tst.w	r1, #8
   d5cae:	d105      	bne.n	d5cbc <_ZN7FatFile8openNextEPS_i+0x52>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   d5cb0:	b17c      	cbz	r4, d5cd2 <_ZN7FatFile8openNextEPS_i+0x68>
   d5cb2:	f7ff fa06 	bl	d50c2 <_ZN7FatFile11lfnChecksumEPh>
   d5cb6:	4580      	cmp	r8, r0
   d5cb8:	d109      	bne.n	d5cce <_ZN7FatFile8openNextEPS_i+0x64>
   d5cba:	e00a      	b.n	d5cd2 <_ZN7FatFile8openNextEPS_i+0x68>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d5cbc:	290f      	cmp	r1, #15
   d5cbe:	d1ef      	bne.n	d5ca0 <_ZN7FatFile8openNextEPS_i+0x36>
      ldir = reinterpret_cast<ldir_t*>(dir);
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   d5cc0:	0659      	lsls	r1, r3, #25
   d5cc2:	d5e2      	bpl.n	d5c8a <_ZN7FatFile8openNextEPS_i+0x20>
        lfnOrd = ldir->ord & 0X1F;
   d5cc4:	f003 041f 	and.w	r4, r3, #31
        chksum = ldir->chksum;
   d5cc8:	f890 800d 	ldrb.w	r8, [r0, #13]
   d5ccc:	e7dd      	b.n	d5c8a <_ZN7FatFile8openNextEPS_i+0x20>
      lfnOrd = 0;
    }
  }

fail:
  return false;
   d5cce:	2000      	movs	r0, #0
   d5cd0:	e007      	b.n	d5ce2 <_ZN7FatFile8openNextEPS_i+0x78>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   d5cd2:	9400      	str	r4, [sp, #0]
   d5cd4:	463b      	mov	r3, r7
   d5cd6:	f3c9 124f 	ubfx	r2, r9, #5, #16
   d5cda:	4629      	mov	r1, r5
   d5cdc:	4630      	mov	r0, r6
   d5cde:	f7ff ff56 	bl	d5b8e <_ZN7FatFile15openCachedEntryEPS_tih>
    }
  }

fail:
  return false;
}
   d5ce2:	b003      	add	sp, #12
   d5ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5ce8 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5ce8:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d5cea:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5cec:	4604      	mov	r4, r0
  if (!isOpen()) {
   d5cee:	b90b      	cbnz	r3, d5cf4 <_ZN7FatFile4syncEv+0xc>
    return true;
   d5cf0:	2001      	movs	r0, #1
   d5cf2:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d5cf4:	7883      	ldrb	r3, [r0, #2]
   d5cf6:	075a      	lsls	r2, r3, #29
   d5cf8:	d523      	bpl.n	d5d42 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d5cfa:	2101      	movs	r1, #1
   d5cfc:	f7ff fdca 	bl	d5894 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5d00:	4605      	mov	r5, r0
   d5d02:	b928      	cbnz	r0, d5d10 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d5d04:	7863      	ldrb	r3, [r4, #1]
   d5d06:	f043 0301 	orr.w	r3, r3, #1
   d5d0a:	7063      	strb	r3, [r4, #1]
  return false;
   d5d0c:	2000      	movs	r0, #0
   d5d0e:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5d10:	7803      	ldrb	r3, [r0, #0]
   d5d12:	2be5      	cmp	r3, #229	; 0xe5
   d5d14:	d0f6      	beq.n	d5d04 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d5d16:	7823      	ldrb	r3, [r4, #0]
   d5d18:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d5d1a:	bf44      	itt	mi
   d5d1c:	69e3      	ldrmi	r3, [r4, #28]
   d5d1e:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d5d20:	8c23      	ldrh	r3, [r4, #32]
   d5d22:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d5d24:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5d26:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d5d28:	4b09      	ldr	r3, [pc, #36]	; (d5d50 <_ZN7FatFile4syncEv+0x68>)
   d5d2a:	681b      	ldr	r3, [r3, #0]
   d5d2c:	b12b      	cbz	r3, d5d3a <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d5d2e:	f100 0116 	add.w	r1, r0, #22
   d5d32:	3018      	adds	r0, #24
   d5d34:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d5d36:	8b2b      	ldrh	r3, [r5, #24]
   d5d38:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d5d3a:	78a3      	ldrb	r3, [r4, #2]
   d5d3c:	f023 0304 	bic.w	r3, r3, #4
   d5d40:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d5d42:	68a0      	ldr	r0, [r4, #8]
   d5d44:	f7ff f9b0 	bl	d50a8 <_ZN9FatVolume9cacheSyncEv>
   d5d48:	2800      	cmp	r0, #0
   d5d4a:	d0db      	beq.n	d5d04 <_ZN7FatFile4syncEv+0x1c>
   d5d4c:	e7d0      	b.n	d5cf0 <_ZN7FatFile4syncEv+0x8>
   d5d4e:	bf00      	nop
   d5d50:	2003e388 	.word	0x2003e388

000d5d54 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d5d54:	b510      	push	{r4, lr}
   d5d56:	4604      	mov	r4, r0
  bool rtn = sync();
   d5d58:	f7ff ffc6 	bl	d5ce8 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d5d5c:	2300      	movs	r3, #0
   d5d5e:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d5d60:	bd10      	pop	{r4, pc}

000d5d62 <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5d62:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5d64:	b093      	sub	sp, #76	; 0x4c
   d5d66:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5d68:	2300      	movs	r3, #0
   d5d6a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d5d6e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5d72:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5d74:	9201      	str	r2, [sp, #4]
   d5d76:	4606      	mov	r6, r0
   d5d78:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5d7a:	b10b      	cbz	r3, d5d80 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d5d7c:	2000      	movs	r0, #0
   d5d7e:	e03d      	b.n	d5dfc <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5d80:	780b      	ldrb	r3, [r1, #0]
   d5d82:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5d86:	d0f9      	beq.n	d5d7c <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d5d88:	7813      	ldrb	r3, [r2, #0]
   d5d8a:	2b2f      	cmp	r3, #47	; 0x2f
   d5d8c:	d112      	bne.n	d5db4 <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d5d8e:	9b01      	ldr	r3, [sp, #4]
   d5d90:	781a      	ldrb	r2, [r3, #0]
   d5d92:	2a2f      	cmp	r2, #47	; 0x2f
   d5d94:	d102      	bne.n	d5d9c <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d5d96:	3301      	adds	r3, #1
   d5d98:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d5d9a:	e7f8      	b.n	d5d8e <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d5d9c:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d5d9e:	b91a      	cbnz	r2, d5da8 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d5da0:	4630      	mov	r0, r6
   d5da2:	f7ff fdb0 	bl	d5906 <_ZN7FatFile8openRootEP9FatVolume>
   d5da6:	e029      	b.n	d5dfc <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d5da8:	a809      	add	r0, sp, #36	; 0x24
   d5daa:	f7ff fdac 	bl	d5906 <_ZN7FatFile8openRootEP9FatVolume>
   d5dae:	2800      	cmp	r0, #0
   d5db0:	d0e4      	beq.n	d5d7c <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d5db2:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d5db4:	aa01      	add	r2, sp, #4
   d5db6:	a903      	add	r1, sp, #12
   d5db8:	9801      	ldr	r0, [sp, #4]
   d5dba:	f7ff f9a9 	bl	d5110 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d5dbe:	2800      	cmp	r0, #0
   d5dc0:	d0dc      	beq.n	d5d7c <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d5dc2:	9b01      	ldr	r3, [sp, #4]
   d5dc4:	781b      	ldrb	r3, [r3, #0]
   d5dc6:	b19b      	cbz	r3, d5df0 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d5dc8:	2300      	movs	r3, #0
   d5dca:	aa03      	add	r2, sp, #12
   d5dcc:	4621      	mov	r1, r4
   d5dce:	4630      	mov	r0, r6
   d5dd0:	f7ff fb42 	bl	d5458 <_ZN7FatFile4openEPS_P7fname_ti>
   d5dd4:	2800      	cmp	r0, #0
   d5dd6:	d0d1      	beq.n	d5d7c <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d5dd8:	4635      	mov	r5, r6
   d5dda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5ddc:	ac09      	add	r4, sp, #36	; 0x24
   d5dde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5de0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5de2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5de4:	682b      	ldr	r3, [r5, #0]
   d5de6:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d5de8:	4630      	mov	r0, r6
   d5dea:	f7ff ffb3 	bl	d5d54 <_ZN7FatFile5closeEv>
   d5dee:	e7e0      	b.n	d5db2 <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d5df0:	463b      	mov	r3, r7
   d5df2:	aa03      	add	r2, sp, #12
   d5df4:	4621      	mov	r1, r4
   d5df6:	4630      	mov	r0, r6
   d5df8:	f7ff fb2e 	bl	d5458 <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d5dfc:	b013      	add	sp, #76	; 0x4c
   d5dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5e00 <_ZN7FatFile6removeEPS_PKc>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove(FatFile* dirFile, const char* path) {
   d5e00:	b500      	push	{lr}
   d5e02:	b08b      	sub	sp, #44	; 0x2c
   d5e04:	2300      	movs	r3, #0
   d5e06:	f88d 3004 	strb.w	r3, [sp, #4]
   d5e0a:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile file;
  if (!file.open(dirFile, path, O_WRONLY)) {
   d5e0e:	460a      	mov	r2, r1
   d5e10:	2301      	movs	r3, #1
   d5e12:	4601      	mov	r1, r0
   d5e14:	a801      	add	r0, sp, #4
   d5e16:	f7ff ffa4 	bl	d5d62 <_ZN7FatFile4openEPS_PKci>
   d5e1a:	b110      	cbz	r0, d5e22 <_ZN7FatFile6removeEPS_PKc+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return file.remove();
   d5e1c:	a801      	add	r0, sp, #4
   d5e1e:	f7ff fa63 	bl	d52e8 <_ZN7FatFile6removeEv>

fail:
  return false;
}
   d5e22:	b00b      	add	sp, #44	; 0x2c
   d5e24:	f85d fb04 	ldr.w	pc, [sp], #4

000d5e28 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5e2c:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5e2e:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5e30:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5e32:	4604      	mov	r4, r0
   d5e34:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5e36:	d508      	bpl.n	d5e4a <_ZN7FatFile5writeEPKvj+0x22>
   d5e38:	7883      	ldrb	r3, [r0, #2]
   d5e3a:	079a      	lsls	r2, r3, #30
   d5e3c:	d505      	bpl.n	d5e4a <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d5e3e:	071b      	lsls	r3, r3, #28
   d5e40:	d50b      	bpl.n	d5e5a <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d5e42:	69e1      	ldr	r1, [r4, #28]
   d5e44:	f7ff fe5a 	bl	d5afc <_ZN7FatFile7seekSetEm>
   d5e48:	b938      	cbnz	r0, d5e5a <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d5e4a:	7863      	ldrb	r3, [r4, #1]
   d5e4c:	f043 0301 	orr.w	r3, r3, #1
   d5e50:	7063      	strb	r3, [r4, #1]
  return -1;
   d5e52:	f04f 30ff 	mov.w	r0, #4294967295
   d5e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d5e5a:	6963      	ldr	r3, [r4, #20]
   d5e5c:	43db      	mvns	r3, r3
   d5e5e:	4598      	cmp	r8, r3
   d5e60:	d8f3      	bhi.n	d5e4a <_ZN7FatFile5writeEPKvj+0x22>
   d5e62:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5e64:	f04f 0a00 	mov.w	sl, #0
   d5e68:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d5e6a:	2e00      	cmp	r6, #0
   d5e6c:	f000 8081 	beq.w	d5f72 <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d5e70:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5e72:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5e74:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d5e78:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5e7c:	d11c      	bne.n	d5eb8 <_ZN7FatFile5writeEPKvj+0x90>
   d5e7e:	b9df      	cbnz	r7, d5eb8 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d5e80:	6921      	ldr	r1, [r4, #16]
   d5e82:	b171      	cbz	r1, d5ea2 <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5e84:	f104 0210 	add.w	r2, r4, #16
   d5e88:	f000 f901 	bl	d608e <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d5e8c:	2800      	cmp	r0, #0
   d5e8e:	dbdc      	blt.n	d5e4a <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d5e90:	f040 808e 	bne.w	d5fb0 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d5e94:	4620      	mov	r0, r4
   d5e96:	f7ff fcb2 	bl	d57fe <_ZN7FatFile10addClusterEv>
   d5e9a:	2800      	cmp	r0, #0
   d5e9c:	f040 8088 	bne.w	d5fb0 <_ZN7FatFile5writeEPKvj+0x188>
   d5ea0:	e7d3      	b.n	d5e4a <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d5ea2:	6a23      	ldr	r3, [r4, #32]
   d5ea4:	b93b      	cbnz	r3, d5eb6 <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d5ea6:	4620      	mov	r0, r4
   d5ea8:	f7ff fca9 	bl	d57fe <_ZN7FatFile10addClusterEv>
   d5eac:	2800      	cmp	r0, #0
   d5eae:	d0cc      	beq.n	d5e4a <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d5eb0:	6923      	ldr	r3, [r4, #16]
   d5eb2:	6223      	str	r3, [r4, #32]
   d5eb4:	e000      	b.n	d5eb8 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d5eb6:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5eb8:	6921      	ldr	r1, [r4, #16]
   d5eba:	68a0      	ldr	r0, [r4, #8]
   d5ebc:	f000 f8e1 	bl	d6082 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5ec0:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d5ec2:	b917      	cbnz	r7, d5eca <_ZN7FatFile5writeEPKvj+0xa2>
   d5ec4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5ec8:	d221      	bcs.n	d5f0e <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d5eca:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d5ece:	42b5      	cmp	r5, r6
   d5ed0:	bf28      	it	cs
   d5ed2:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d5ed4:	b937      	cbnz	r7, d5ee4 <_ZN7FatFile5writeEPKvj+0xbc>
   d5ed6:	6963      	ldr	r3, [r4, #20]
   d5ed8:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d5eda:	4293      	cmp	r3, r2
   d5edc:	bf34      	ite	cc
   d5ede:	2201      	movcc	r2, #1
   d5ee0:	2205      	movcs	r2, #5
   d5ee2:	e000      	b.n	d5ee6 <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d5ee4:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5ee6:	68a0      	ldr	r0, [r4, #8]
   d5ee8:	3024      	adds	r0, #36	; 0x24
   d5eea:	f000 f8a6 	bl	d603a <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d5eee:	2800      	cmp	r0, #0
   d5ef0:	d0ab      	beq.n	d5e4a <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d5ef2:	4438      	add	r0, r7
   d5ef4:	462a      	mov	r2, r5
   d5ef6:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d5ef8:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d5efa:	f003 f8fc 	bl	d90f6 <memcpy>
      if (512 == (n + blockOffset)) {
   d5efe:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d5f02:	d130      	bne.n	d5f66 <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5f04:	68a0      	ldr	r0, [r4, #8]
   d5f06:	3024      	adds	r0, #36	; 0x24
   d5f08:	f000 f870 	bl	d5fec <_ZN8FatCache4syncEv>
   d5f0c:	e017      	b.n	d5f3e <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d5f0e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5f12:	68a0      	ldr	r0, [r4, #8]
   d5f14:	d315      	bcc.n	d5f42 <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d5f16:	7902      	ldrb	r2, [r0, #4]
   d5f18:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d5f1a:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d5f1c:	b2d2      	uxtb	r2, r2
   d5f1e:	4293      	cmp	r3, r2
   d5f20:	bf28      	it	cs
   d5f22:	4613      	movcs	r3, r2
   d5f24:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5f26:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d5f28:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5f2c:	d302      	bcc.n	d5f34 <_ZN7FatFile5writeEPKvj+0x10c>
   d5f2e:	441a      	add	r2, r3
   d5f30:	4291      	cmp	r1, r2
   d5f32:	d337      	bcc.n	d5fa4 <_ZN7FatFile5writeEPKvj+0x17c>
   d5f34:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d5f36:	464a      	mov	r2, r9
   d5f38:	6838      	ldr	r0, [r7, #0]
   d5f3a:	f000 fc6d 	bl	d6818 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d5f3e:	b990      	cbnz	r0, d5f66 <_ZN7FatFile5writeEPKvj+0x13e>
   d5f40:	e783      	b.n	d5e4a <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d5f42:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5f44:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5f46:	bf02      	ittt	eq
   d5f48:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5f4c:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5f50:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d5f52:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5f54:	464a      	mov	r2, r9
   d5f56:	6818      	ldr	r0, [r3, #0]
   d5f58:	f000 fbec 	bl	d6734 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d5f5c:	2800      	cmp	r0, #0
   d5f5e:	f43f af74 	beq.w	d5e4a <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d5f62:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d5f66:	6963      	ldr	r3, [r4, #20]
   d5f68:	442b      	add	r3, r5
   d5f6a:	6163      	str	r3, [r4, #20]
    src += n;
   d5f6c:	44a9      	add	r9, r5
    nToWrite -= n;
   d5f6e:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d5f70:	e77a      	b.n	d5e68 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d5f72:	69e2      	ldr	r2, [r4, #28]
   d5f74:	4293      	cmp	r3, r2
   d5f76:	d901      	bls.n	d5f7c <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d5f78:	61e3      	str	r3, [r4, #28]
   d5f7a:	e002      	b.n	d5f82 <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d5f7c:	4b0f      	ldr	r3, [pc, #60]	; (d5fbc <_ZN7FatFile5writeEPKvj+0x194>)
   d5f7e:	681b      	ldr	r3, [r3, #0]
   d5f80:	b11b      	cbz	r3, d5f8a <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d5f82:	78a3      	ldrb	r3, [r4, #2]
   d5f84:	f043 0304 	orr.w	r3, r3, #4
   d5f88:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d5f8a:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d5f8e:	2b00      	cmp	r3, #0
   d5f90:	db02      	blt.n	d5f98 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d5f92:	4640      	mov	r0, r8
   d5f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d5f98:	4620      	mov	r0, r4
   d5f9a:	f7ff fea5 	bl	d5ce8 <_ZN7FatFile4syncEv>
   d5f9e:	2800      	cmp	r0, #0
   d5fa0:	d1f7      	bne.n	d5f92 <_ZN7FatFile5writeEPKvj+0x16a>
   d5fa2:	e752      	b.n	d5e4a <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5fa4:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5fa8:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5fac:	62c2      	str	r2, [r0, #44]	; 0x2c
   d5fae:	e7c1      	b.n	d5f34 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5fb0:	6921      	ldr	r1, [r4, #16]
   d5fb2:	68a0      	ldr	r0, [r4, #8]
   d5fb4:	f000 f865 	bl	d6082 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5fb8:	4601      	mov	r1, r0
   d5fba:	e783      	b.n	d5ec4 <_ZN7FatFile5writeEPKvj+0x9c>
   d5fbc:	2003e388 	.word	0x2003e388

000d5fc0 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d5fc0:	f000 bcae 	b.w	d6920 <HAL_Pin_Map>

000d5fc4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5fc4:	b570      	push	{r4, r5, r6, lr}
   d5fc6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5fc8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5fca:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5fcc:	b149      	cbz	r1, d5fe2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5fce:	f003 f907 	bl	d91e0 <strlen>
   d5fd2:	682b      	ldr	r3, [r5, #0]
   d5fd4:	4602      	mov	r2, r0
   d5fd6:	4621      	mov	r1, r4
   d5fd8:	4628      	mov	r0, r5
   d5fda:	68db      	ldr	r3, [r3, #12]
    }
   d5fdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5fe0:	4718      	bx	r3
    }
   d5fe2:	bd70      	pop	{r4, r5, r6, pc}

000d5fe4 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d5fe4:	f000 bc9c 	b.w	d6920 <HAL_Pin_Map>

000d5fe8 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d5fe8:	f000 bc9a 	b.w	d6920 <HAL_Pin_Map>

000d5fec <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5fec:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d5fee:	7803      	ldrb	r3, [r0, #0]
   d5ff0:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5ff2:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d5ff4:	d51e      	bpl.n	d6034 <_ZN8FatCache4syncEv+0x48>
   d5ff6:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5ff8:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d5ffa:	f100 060c 	add.w	r6, r0, #12
   d5ffe:	4632      	mov	r2, r6
   d6000:	6818      	ldr	r0, [r3, #0]
   d6002:	f000 fb97 	bl	d6734 <_ZN9SdSpiCard10writeBlockEmPKh>
   d6006:	4605      	mov	r5, r0
   d6008:	b908      	cbnz	r0, d600e <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d600a:	2500      	movs	r5, #0
   d600c:	e013      	b.n	d6036 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d600e:	7823      	ldrb	r3, [r4, #0]
   d6010:	079b      	lsls	r3, r3, #30
   d6012:	d404      	bmi.n	d601e <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d6014:	7823      	ldrb	r3, [r4, #0]
   d6016:	f023 0301 	bic.w	r3, r3, #1
   d601a:	7023      	strb	r3, [r4, #0]
   d601c:	e00b      	b.n	d6036 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d601e:	6863      	ldr	r3, [r4, #4]
   d6020:	68a0      	ldr	r0, [r4, #8]
   d6022:	6919      	ldr	r1, [r3, #16]
   d6024:	4632      	mov	r2, r6
   d6026:	4401      	add	r1, r0
   d6028:	6818      	ldr	r0, [r3, #0]
   d602a:	f000 fb83 	bl	d6734 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d602e:	2800      	cmp	r0, #0
   d6030:	d1f0      	bne.n	d6014 <_ZN8FatCache4syncEv+0x28>
   d6032:	e7ea      	b.n	d600a <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d6034:	2501      	movs	r5, #1

fail:
  return false;
}
   d6036:	4628      	mov	r0, r5
   d6038:	bd70      	pop	{r4, r5, r6, pc}

000d603a <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d603a:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d603c:	6883      	ldr	r3, [r0, #8]
   d603e:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d6040:	4604      	mov	r4, r0
   d6042:	460e      	mov	r6, r1
   d6044:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d6046:	d014      	beq.n	d6072 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d6048:	f7ff ffd0 	bl	d5fec <_ZN8FatCache4syncEv>
   d604c:	b908      	cbnz	r0, d6052 <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d604e:	2000      	movs	r0, #0
   d6050:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d6052:	076b      	lsls	r3, r5, #29
   d6054:	d503      	bpl.n	d605e <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d6056:	2300      	movs	r3, #0
   d6058:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d605a:	60a6      	str	r6, [r4, #8]
   d605c:	e009      	b.n	d6072 <_ZN8FatCache4readEmh+0x38>
   d605e:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d6060:	f104 020c 	add.w	r2, r4, #12
   d6064:	4631      	mov	r1, r6
   d6066:	6818      	ldr	r0, [r3, #0]
   d6068:	f000 fada 	bl	d6620 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d606c:	2800      	cmp	r0, #0
   d606e:	d1f2      	bne.n	d6056 <_ZN8FatCache4readEmh+0x1c>
   d6070:	e7ed      	b.n	d604e <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d6072:	7823      	ldrb	r3, [r4, #0]
   d6074:	4620      	mov	r0, r4
   d6076:	f005 0503 	and.w	r5, r5, #3
   d607a:	431d      	orrs	r5, r3
   d607c:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d6080:	bd70      	pop	{r4, r5, r6, pc}

000d6082 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d6082:	7983      	ldrb	r3, [r0, #6]
   d6084:	6940      	ldr	r0, [r0, #20]
   d6086:	3902      	subs	r1, #2
   d6088:	4099      	lsls	r1, r3
}
   d608a:	4408      	add	r0, r1
   d608c:	4770      	bx	lr

000d608e <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d608e:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d6090:	b570      	push	{r4, r5, r6, lr}
   d6092:	4605      	mov	r5, r0
   d6094:	460c      	mov	r4, r1
   d6096:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6098:	d802      	bhi.n	d60a0 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d609a:	f04f 30ff 	mov.w	r0, #4294967295
   d609e:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d60a0:	69c3      	ldr	r3, [r0, #28]
   d60a2:	4299      	cmp	r1, r3
   d60a4:	d8f9      	bhi.n	d609a <_ZN9FatVolume6fatGetEmPm+0xc>
   d60a6:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d60a8:	2b20      	cmp	r3, #32
   d60aa:	d110      	bne.n	d60ce <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d60ac:	6981      	ldr	r1, [r0, #24]
   d60ae:	2202      	movs	r2, #2
   d60b0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d60b4:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d60b8:	f7ff ffbf 	bl	d603a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d60bc:	2800      	cmp	r0, #0
   d60be:	d0ec      	beq.n	d609a <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d60c0:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d60c4:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d60c8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d60cc:	e00f      	b.n	d60ee <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d60ce:	2b10      	cmp	r3, #16
   d60d0:	d1e3      	bne.n	d609a <_ZN9FatVolume6fatGetEmPm+0xc>
   d60d2:	6983      	ldr	r3, [r0, #24]
   d60d4:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d60d8:	2202      	movs	r2, #2
   d60da:	4419      	add	r1, r3
   d60dc:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d60e0:	f7ff ffab 	bl	d603a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d60e4:	2800      	cmp	r0, #0
   d60e6:	d0d8      	beq.n	d609a <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d60e8:	b2e4      	uxtb	r4, r4
   d60ea:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d60ee:	69ea      	ldr	r2, [r5, #28]
   d60f0:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d60f2:	bf9a      	itte	ls
   d60f4:	6033      	strls	r3, [r6, #0]
  return 1;
   d60f6:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d60f8:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d60fa:	bd70      	pop	{r4, r5, r6, pc}

000d60fc <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d60fc:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d60fe:	b538      	push	{r3, r4, r5, lr}
   d6100:	460c      	mov	r4, r1
   d6102:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6104:	d801      	bhi.n	d610a <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d6106:	2000      	movs	r0, #0
   d6108:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d610a:	69c3      	ldr	r3, [r0, #28]
   d610c:	4299      	cmp	r1, r3
   d610e:	d8fa      	bhi.n	d6106 <_ZN9FatVolume6fatPutEmm+0xa>
   d6110:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d6112:	2b20      	cmp	r3, #32
   d6114:	d10e      	bne.n	d6134 <_ZN9FatVolume6fatPutEmm+0x38>
   d6116:	6981      	ldr	r1, [r0, #24]
   d6118:	2203      	movs	r2, #3
   d611a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d611e:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d6122:	f7ff ff8a 	bl	d603a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d6126:	2800      	cmp	r0, #0
   d6128:	d0ed      	beq.n	d6106 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d612a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d612e:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d6132:	e00f      	b.n	d6154 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d6134:	2b10      	cmp	r3, #16
   d6136:	d1e6      	bne.n	d6106 <_ZN9FatVolume6fatPutEmm+0xa>
   d6138:	6983      	ldr	r3, [r0, #24]
   d613a:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d613e:	2203      	movs	r2, #3
   d6140:	4419      	add	r1, r3
   d6142:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d6146:	f7ff ff78 	bl	d603a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d614a:	2800      	cmp	r0, #0
   d614c:	d0db      	beq.n	d6106 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d614e:	b2e4      	uxtb	r4, r4
   d6150:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d6154:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d6156:	bd38      	pop	{r3, r4, r5, pc}

000d6158 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d6158:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d615c:	68c4      	ldr	r4, [r0, #12]
   d615e:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d6160:	4605      	mov	r5, r0
   d6162:	460e      	mov	r6, r1
   d6164:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d6166:	d207      	bcs.n	d6178 <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d6168:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d616a:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d616c:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d616e:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d6170:	429c      	cmp	r4, r3
   d6172:	d903      	bls.n	d617c <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d6174:	b9cf      	cbnz	r7, d61aa <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d6176:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d6178:	2701      	movs	r7, #1
   d617a:	e7f7      	b.n	d616c <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d617c:	42a6      	cmp	r6, r4
   d617e:	d014      	beq.n	d61aa <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d6180:	aa01      	add	r2, sp, #4
   d6182:	4621      	mov	r1, r4
   d6184:	4628      	mov	r0, r5
   d6186:	f7ff ff82 	bl	d608e <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d618a:	2800      	cmp	r0, #0
   d618c:	db0d      	blt.n	d61aa <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d618e:	d0ed      	beq.n	d616c <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d6190:	9b01      	ldr	r3, [sp, #4]
   d6192:	2b00      	cmp	r3, #0
   d6194:	d1ea      	bne.n	d616c <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d6196:	b107      	cbz	r7, d619a <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d6198:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d619a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d619e:	4621      	mov	r1, r4
   d61a0:	4628      	mov	r0, r5
   d61a2:	f7ff ffab 	bl	d60fc <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d61a6:	4607      	mov	r7, r0
   d61a8:	b908      	cbnz	r0, d61ae <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d61aa:	2700      	movs	r7, #0
   d61ac:	e00b      	b.n	d61c6 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d61ae:	b916      	cbnz	r6, d61b6 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d61b0:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d61b4:	e007      	b.n	d61c6 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d61b6:	4622      	mov	r2, r4
   d61b8:	4631      	mov	r1, r6
   d61ba:	4628      	mov	r0, r5
   d61bc:	f7ff ff9e 	bl	d60fc <_ZN9FatVolume6fatPutEmm>
   d61c0:	2800      	cmp	r0, #0
   d61c2:	d1f5      	bne.n	d61b0 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d61c4:	e7f1      	b.n	d61aa <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d61c6:	4638      	mov	r0, r7
   d61c8:	b002      	add	sp, #8
   d61ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d61ce <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d61ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d61d0:	4605      	mov	r5, r0
   d61d2:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d61d4:	aa01      	add	r2, sp, #4
   d61d6:	4621      	mov	r1, r4
   d61d8:	4628      	mov	r0, r5
   d61da:	f7ff ff58 	bl	d608e <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d61de:	1e06      	subs	r6, r0, #0
   d61e0:	da01      	bge.n	d61e6 <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d61e2:	2000      	movs	r0, #0
   d61e4:	e00f      	b.n	d6206 <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d61e6:	2200      	movs	r2, #0
   d61e8:	4621      	mov	r1, r4
   d61ea:	4628      	mov	r0, r5
   d61ec:	f7ff ff86 	bl	d60fc <_ZN9FatVolume6fatPutEmm>
   d61f0:	2800      	cmp	r0, #0
   d61f2:	d0f6      	beq.n	d61e2 <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d61f4:	68eb      	ldr	r3, [r5, #12]
   d61f6:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d61f8:	bf9c      	itt	ls
   d61fa:	f104 34ff 	addls.w	r4, r4, #4294967295
   d61fe:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d6200:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d6202:	2e00      	cmp	r6, #0
   d6204:	d1e6      	bne.n	d61d4 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d6206:	b002      	add	sp, #8
   d6208:	bd70      	pop	{r4, r5, r6, pc}

000d620a <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d620a:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d620c:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d620e:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d6210:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d6212:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d6214:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d6218:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d621a:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d621c:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d621e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d6222:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d6224:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d6228:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d622c:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d6230:	b1a1      	cbz	r1, d625c <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d6232:	2904      	cmp	r1, #4
   d6234:	d85d      	bhi.n	d62f2 <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6236:	4611      	mov	r1, r2
   d6238:	3024      	adds	r0, #36	; 0x24
   d623a:	f7ff fefe 	bl	d603a <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d623e:	2800      	cmp	r0, #0
   d6240:	d057      	beq.n	d62f2 <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d6242:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d6246:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d624a:	065b      	lsls	r3, r3, #25
   d624c:	d151      	bne.n	d62f2 <_ZN9FatVolume4initEh+0xe8>
   d624e:	351b      	adds	r5, #27
   d6250:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d6254:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d6258:	2d00      	cmp	r5, #0
   d625a:	d04a      	beq.n	d62f2 <_ZN9FatVolume4initEh+0xe8>
   d625c:	2200      	movs	r2, #0
   d625e:	4629      	mov	r1, r5
   d6260:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6264:	f7ff fee9 	bl	d603a <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d6268:	2800      	cmp	r0, #0
   d626a:	d042      	beq.n	d62f2 <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d626c:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d6270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d6274:	d13d      	bne.n	d62f2 <_ZN9FatVolume4initEh+0xe8>
   d6276:	7c03      	ldrb	r3, [r0, #16]
   d6278:	2b02      	cmp	r3, #2
   d627a:	d13a      	bne.n	d62f2 <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d627c:	89c3      	ldrh	r3, [r0, #14]
   d627e:	2b00      	cmp	r3, #0
   d6280:	d037      	beq.n	d62f2 <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d6282:	7b41      	ldrb	r1, [r0, #13]
   d6284:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d6286:	1e4b      	subs	r3, r1, #1
   d6288:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d628a:	2300      	movs	r3, #0
   d628c:	71a3      	strb	r3, [r4, #6]
   d628e:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d6290:	2301      	movs	r3, #1
   d6292:	428b      	cmp	r3, r1
   d6294:	d007      	beq.n	d62a6 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d6296:	3e01      	subs	r6, #1
   d6298:	d02b      	beq.n	d62f2 <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d629a:	79a2      	ldrb	r2, [r4, #6]
   d629c:	005b      	lsls	r3, r3, #1
   d629e:	3201      	adds	r2, #1
   d62a0:	b2db      	uxtb	r3, r3
   d62a2:	71a2      	strb	r2, [r4, #6]
   d62a4:	e7f5      	b.n	d6292 <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d62a6:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d62a8:	b902      	cbnz	r2, d62ac <_ZN9FatVolume4initEh+0xa2>
   d62aa:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d62ac:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d62ae:	89c6      	ldrh	r6, [r0, #14]
   d62b0:	442e      	add	r6, r5
   d62b2:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d62b4:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d62b8:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d62ba:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d62be:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d62c0:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d62c4:	0152      	lsls	r2, r2, #5
   d62c6:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d62ca:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d62ce:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d62d0:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d62d4:	b903      	cbnz	r3, d62d8 <_ZN9FatVolume4initEh+0xce>
   d62d6:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d62d8:	1aad      	subs	r5, r5, r2
   d62da:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d62dc:	79a5      	ldrb	r5, [r4, #6]
   d62de:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d62e2:	1c6b      	adds	r3, r5, #1
   d62e4:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d62e6:	f640 73f4 	movw	r3, #4084	; 0xff4
   d62ea:	429d      	cmp	r5, r3
   d62ec:	d803      	bhi.n	d62f6 <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d62ee:	230c      	movs	r3, #12
   d62f0:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d62f2:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d62f4:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d62f6:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d62fa:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d62fc:	bf85      	ittet	hi
   d62fe:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d6300:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d6302:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d6304:	2320      	movhi	r3, #32
   d6306:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d6308:	2001      	movs	r0, #1

fail:
  return false;
}
   d630a:	bd70      	pop	{r4, r5, r6, pc}

000d630c <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d630c:	f000 bb08 	b.w	d6920 <HAL_Pin_Map>

000d6310 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d6310:	f000 bb06 	b.w	d6920 <HAL_Pin_Map>

000d6314 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d6314:	f000 bb04 	b.w	d6920 <HAL_Pin_Map>

000d6318 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d6318:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d631a:	4c0e      	ldr	r4, [pc, #56]	; (d6354 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d631c:	460e      	mov	r6, r1
   d631e:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d6320:	f000 fb7e 	bl	d6a20 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d6324:	6823      	ldr	r3, [r4, #0]
   d6326:	1ac0      	subs	r0, r0, r3
   d6328:	4b0b      	ldr	r3, [pc, #44]	; (d6358 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d632a:	4298      	cmp	r0, r3
   d632c:	d908      	bls.n	d6340 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d632e:	f000 fb7f 	bl	d6a30 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6332:	4b0a      	ldr	r3, [pc, #40]	; (d635c <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d6334:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d6336:	f000 fd77 	bl	d6e28 <spark_process>
   d633a:	f000 fb71 	bl	d6a20 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d633e:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6340:	f000 fb76 	bl	d6a30 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d6344:	b280      	uxth	r0, r0
   d6346:	1b80      	subs	r0, r0, r6
}
   d6348:	42a8      	cmp	r0, r5
   d634a:	bfd4      	ite	le
   d634c:	2000      	movle	r0, #0
   d634e:	2001      	movgt	r0, #1
   d6350:	bd70      	pop	{r4, r5, r6, pc}
   d6352:	bf00      	nop
   d6354:	2003e38c 	.word	0x2003e38c
   d6358:	000186a0 	.word	0x000186a0
   d635c:	2003e710 	.word	0x2003e710

000d6360 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d6360:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d6362:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d6364:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d6366:	b94d      	cbnz	r5, d637c <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d6368:	6840      	ldr	r0, [r0, #4]
   d636a:	f000 fa7d 	bl	d6868 <_ZN14SdSpiAltDriver8activateEv>
   d636e:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d6370:	4629      	mov	r1, r5
   d6372:	7d18      	ldrb	r0, [r3, #20]
   d6374:	f001 ff77 	bl	d8266 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d6378:	2301      	movs	r3, #1
   d637a:	7223      	strb	r3, [r4, #8]
   d637c:	bd38      	pop	{r3, r4, r5, pc}

000d637e <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d637e:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d6380:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d6382:	4604      	mov	r4, r0
  if (m_spiActive) {
   d6384:	b16b      	cbz	r3, d63a2 <_ZN9SdSpiCard7spiStopEv+0x24>
   d6386:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d6388:	2101      	movs	r1, #1
   d638a:	7d18      	ldrb	r0, [r3, #20]
   d638c:	f001 ff6b 	bl	d8266 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6390:	21ff      	movs	r1, #255	; 0xff
   d6392:	6860      	ldr	r0, [r4, #4]
   d6394:	f000 fa9a 	bl	d68cc <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d6398:	6860      	ldr	r0, [r4, #4]
   d639a:	f000 fa79 	bl	d6890 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d639e:	2300      	movs	r3, #0
   d63a0:	7223      	strb	r3, [r4, #8]
   d63a2:	bd10      	pop	{r4, pc}

000d63a4 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d63a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d63a6:	4604      	mov	r4, r0
   d63a8:	460d      	mov	r5, r1
   d63aa:	4616      	mov	r6, r2
   d63ac:	f000 fb40 	bl	d6a30 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d63b0:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d63b2:	6860      	ldr	r0, [r4, #4]
   d63b4:	f000 fa6f 	bl	d6896 <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d63b8:	28ff      	cmp	r0, #255	; 0xff
   d63ba:	7260      	strb	r0, [r4, #9]
   d63bc:	d109      	bne.n	d63d2 <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d63be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d63c2:	4639      	mov	r1, r7
   d63c4:	4620      	mov	r0, r4
   d63c6:	f7ff ffa7 	bl	d6318 <_ZN9SdSpiCard10isTimedOutEtt>
   d63ca:	2800      	cmp	r0, #0
   d63cc:	d0f1      	beq.n	d63b2 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d63ce:	2355      	movs	r3, #85	; 0x55
   d63d0:	e00b      	b.n	d63ea <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d63d2:	28fe      	cmp	r0, #254	; 0xfe
   d63d4:	d001      	beq.n	d63da <_ZN9SdSpiCard8readDataEPhj+0x36>
   d63d6:	2350      	movs	r3, #80	; 0x50
   d63d8:	e007      	b.n	d63ea <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d63da:	4632      	mov	r2, r6
   d63dc:	4629      	mov	r1, r5
   d63de:	6860      	ldr	r0, [r4, #4]
   d63e0:	f000 fa5e 	bl	d68a0 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d63e4:	7260      	strb	r0, [r4, #9]
   d63e6:	b130      	cbz	r0, d63f6 <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d63e8:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d63ea:	4620      	mov	r0, r4
   d63ec:	7023      	strb	r3, [r4, #0]
   d63ee:	f7ff ffc6 	bl	d637e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d63f2:	2000      	movs	r0, #0
}
   d63f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d63f6:	6860      	ldr	r0, [r4, #4]
   d63f8:	f000 fa4d 	bl	d6896 <_ZN14SdSpiAltDriver7receiveEv>
   d63fc:	6860      	ldr	r0, [r4, #4]
   d63fe:	f000 fa4a 	bl	d6896 <_ZN14SdSpiAltDriver7receiveEv>
   d6402:	2001      	movs	r0, #1
   d6404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6406 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d6406:	b570      	push	{r4, r5, r6, lr}
   d6408:	4604      	mov	r4, r0
   d640a:	460e      	mov	r6, r1
   d640c:	f000 fb10 	bl	d6a30 <HAL_Timer_Get_Milli_Seconds>
   d6410:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d6412:	4632      	mov	r2, r6
   d6414:	4629      	mov	r1, r5
   d6416:	4620      	mov	r0, r4
   d6418:	f7ff ff7e 	bl	d6318 <_ZN9SdSpiCard10isTimedOutEtt>
   d641c:	b930      	cbnz	r0, d642c <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d641e:	6860      	ldr	r0, [r4, #4]
   d6420:	f000 fa39 	bl	d6896 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d6424:	28ff      	cmp	r0, #255	; 0xff
   d6426:	d1f4      	bne.n	d6412 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d6428:	2001      	movs	r0, #1
   d642a:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d642c:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d642e:	bd70      	pop	{r4, r5, r6, pc}

000d6430 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d6430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d6432:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d6434:	9201      	str	r2, [sp, #4]
   d6436:	4604      	mov	r4, r0
   d6438:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d643a:	b90b      	cbnz	r3, d6440 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d643c:	f7ff ff90 	bl	d6360 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d6440:	b125      	cbz	r5, d644c <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d6442:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d6446:	4620      	mov	r0, r4
   d6448:	f7ff ffdd 	bl	d6406 <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d644c:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d6450:	6860      	ldr	r0, [r4, #4]
   d6452:	f000 fa3b 	bl	d68cc <_ZN14SdSpiAltDriver4sendEh>
   d6456:	f10d 0607 	add.w	r6, sp, #7
   d645a:	f10d 0703 	add.w	r7, sp, #3
   d645e:	f816 1901 	ldrb.w	r1, [r6], #-1
   d6462:	6860      	ldr	r0, [r4, #4]
   d6464:	f000 fa32 	bl	d68cc <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d6468:	42be      	cmp	r6, r7
   d646a:	d1f8      	bne.n	d645e <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d646c:	2d00      	cmp	r5, #0
   d646e:	bf0c      	ite	eq
   d6470:	2195      	moveq	r1, #149	; 0x95
   d6472:	2187      	movne	r1, #135	; 0x87
   d6474:	6860      	ldr	r0, [r4, #4]
   d6476:	f000 fa29 	bl	d68cc <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d647a:	6860      	ldr	r0, [r4, #4]
   d647c:	f000 fa0b 	bl	d6896 <_ZN14SdSpiAltDriver7receiveEv>
   d6480:	250b      	movs	r5, #11
   d6482:	6860      	ldr	r0, [r4, #4]
   d6484:	f000 fa07 	bl	d6896 <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d6488:	0603      	lsls	r3, r0, #24
   d648a:	7260      	strb	r0, [r4, #9]
   d648c:	d503      	bpl.n	d6496 <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d648e:	3d01      	subs	r5, #1
   d6490:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6494:	d1f5      	bne.n	d6482 <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d6496:	b003      	add	sp, #12
   d6498:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d649a <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d649a:	b570      	push	{r4, r5, r6, lr}
   d649c:	4604      	mov	r4, r0
   d649e:	460d      	mov	r5, r1
   d64a0:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d64a2:	2137      	movs	r1, #55	; 0x37
   d64a4:	2200      	movs	r2, #0
   d64a6:	f7ff ffc3 	bl	d6430 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d64aa:	4632      	mov	r2, r6
   d64ac:	4629      	mov	r1, r5
   d64ae:	4620      	mov	r0, r4
  }
   d64b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d64b4:	f7ff bfbc 	b.w	d6430 <_ZN9SdSpiCard11cardCommandEhm>

000d64b8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d64b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d64bc:	2500      	movs	r5, #0
   d64be:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d64c0:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d64c2:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d64c4:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d64c6:	4604      	mov	r4, r0
   d64c8:	4690      	mov	r8, r2
   d64ca:	461e      	mov	r6, r3
   d64cc:	f000 fab0 	bl	d6a30 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d64d0:	4641      	mov	r1, r8
   d64d2:	4607      	mov	r7, r0
   d64d4:	6860      	ldr	r0, [r4, #4]
   d64d6:	f000 f9cb 	bl	d6870 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d64da:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d64dc:	4a4f      	ldr	r2, [pc, #316]	; (d661c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d64de:	721d      	strb	r5, [r3, #8]
   d64e0:	f04f 0801 	mov.w	r8, #1
   d64e4:	60da      	str	r2, [r3, #12]
   d64e6:	745d      	strb	r5, [r3, #17]
   d64e8:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d64ec:	4620      	mov	r0, r4
   d64ee:	f7ff ff37 	bl	d6360 <_ZN9SdSpiCard8spiStartEv>
   d64f2:	6863      	ldr	r3, [r4, #4]
   d64f4:	4641      	mov	r1, r8
   d64f6:	7d18      	ldrb	r0, [r3, #20]
   d64f8:	f001 feb5 	bl	d8266 <digitalWrite>
   d64fc:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d64fe:	21ff      	movs	r1, #255	; 0xff
   d6500:	6860      	ldr	r0, [r4, #4]
   d6502:	3d01      	subs	r5, #1
   d6504:	f000 f9e2 	bl	d68cc <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d6508:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d650c:	d1f7      	bne.n	d64fe <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d650e:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d6510:	4629      	mov	r1, r5
   d6512:	7d18      	ldrb	r0, [r3, #20]
   d6514:	f001 fea7 	bl	d8266 <digitalWrite>
   d6518:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d651a:	2200      	movs	r2, #0
   d651c:	4611      	mov	r1, r2
   d651e:	4620      	mov	r0, r4
   d6520:	f7ff ff86 	bl	d6430 <_ZN9SdSpiCard11cardCommandEhm>
   d6524:	2801      	cmp	r0, #1
   d6526:	4680      	mov	r8, r0
   d6528:	d012      	beq.n	d6550 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d652a:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d652c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6530:	d101      	bne.n	d6536 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6532:	2320      	movs	r3, #32
   d6534:	e057      	b.n	d65e6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6536:	21fd      	movs	r1, #253	; 0xfd
   d6538:	6860      	ldr	r0, [r4, #4]
   d653a:	f000 f9c7 	bl	d68cc <_ZN14SdSpiAltDriver4sendEh>
   d653e:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6542:	6860      	ldr	r0, [r4, #4]
   d6544:	f000 f9a7 	bl	d6896 <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d6548:	f1b8 0801 	subs.w	r8, r8, #1
   d654c:	d1f9      	bne.n	d6542 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d654e:	e7e4      	b.n	d651a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d6550:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d6554:	2108      	movs	r1, #8
   d6556:	4620      	mov	r0, r4
   d6558:	f7ff ff6a 	bl	d6430 <_ZN9SdSpiCard11cardCommandEhm>
   d655c:	2805      	cmp	r0, #5
   d655e:	d102      	bne.n	d6566 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d6560:	f884 800a 	strb.w	r8, [r4, #10]
   d6564:	e00f      	b.n	d6586 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d6566:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6568:	6860      	ldr	r0, [r4, #4]
   d656a:	f000 f994 	bl	d6896 <_ZN14SdSpiAltDriver7receiveEv>
   d656e:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d6570:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d6574:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d6576:	d1f7      	bne.n	d6568 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d6578:	28aa      	cmp	r0, #170	; 0xaa
   d657a:	d102      	bne.n	d6582 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d657c:	2302      	movs	r3, #2
   d657e:	72a3      	strb	r3, [r4, #10]
   d6580:	e001      	b.n	d6586 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6582:	2325      	movs	r3, #37	; 0x25
   d6584:	e02f      	b.n	d65e6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d6586:	7aa3      	ldrb	r3, [r4, #10]
   d6588:	2b02      	cmp	r3, #2
   d658a:	bf0c      	ite	eq
   d658c:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d6590:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d6592:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d6594:	462a      	mov	r2, r5
   d6596:	2129      	movs	r1, #41	; 0x29
   d6598:	4620      	mov	r0, r4
   d659a:	f7ff ff7e 	bl	d649a <_ZN9SdSpiCard8cardAcmdEhm>
   d659e:	4602      	mov	r2, r0
   d65a0:	b148      	cbz	r0, d65b6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d65a2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d65a6:	4639      	mov	r1, r7
   d65a8:	4620      	mov	r0, r4
   d65aa:	f7ff feb5 	bl	d6318 <_ZN9SdSpiCard10isTimedOutEtt>
   d65ae:	2800      	cmp	r0, #0
   d65b0:	d0f0      	beq.n	d6594 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d65b2:	2343      	movs	r3, #67	; 0x43
   d65b4:	e017      	b.n	d65e6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d65b6:	7aa3      	ldrb	r3, [r4, #10]
   d65b8:	2b02      	cmp	r3, #2
   d65ba:	d00e      	beq.n	d65da <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d65bc:	4620      	mov	r0, r4
   d65be:	f7ff fede 	bl	d637e <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d65c2:	6863      	ldr	r3, [r4, #4]
   d65c4:	68b0      	ldr	r0, [r6, #8]
   d65c6:	7934      	ldrb	r4, [r6, #4]
   d65c8:	7b31      	ldrb	r1, [r6, #12]
   d65ca:	7b72      	ldrb	r2, [r6, #13]
   d65cc:	745a      	strb	r2, [r3, #17]
   d65ce:	60d8      	str	r0, [r3, #12]
   d65d0:	721c      	strb	r4, [r3, #8]
   d65d2:	7419      	strb	r1, [r3, #16]
  return true;
   d65d4:	2001      	movs	r0, #1
   d65d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d65da:	213a      	movs	r1, #58	; 0x3a
   d65dc:	4620      	mov	r0, r4
   d65de:	f7ff ff27 	bl	d6430 <_ZN9SdSpiCard11cardCommandEhm>
   d65e2:	b138      	cbz	r0, d65f4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d65e4:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d65e6:	4620      	mov	r0, r4
   d65e8:	7023      	strb	r3, [r4, #0]
   d65ea:	f7ff fec8 	bl	d637e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d65ee:	2000      	movs	r0, #0
}
   d65f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d65f4:	6860      	ldr	r0, [r4, #4]
   d65f6:	f000 f94e 	bl	d6896 <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d65fa:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d65fe:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d6600:	bf04      	itt	eq
   d6602:	2303      	moveq	r3, #3
   d6604:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6606:	6860      	ldr	r0, [r4, #4]
   d6608:	f000 f945 	bl	d6896 <_ZN14SdSpiAltDriver7receiveEv>
   d660c:	6860      	ldr	r0, [r4, #4]
   d660e:	f000 f942 	bl	d6896 <_ZN14SdSpiAltDriver7receiveEv>
   d6612:	6860      	ldr	r0, [r4, #4]
   d6614:	f000 f93f 	bl	d6896 <_ZN14SdSpiAltDriver7receiveEv>
   d6618:	e7d0      	b.n	d65bc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d661a:	bf00      	nop
   d661c:	0003d090 	.word	0x0003d090

000d6620 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6620:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6622:	7a83      	ldrb	r3, [r0, #10]
   d6624:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d6626:	bf18      	it	ne
   d6628:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d662a:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d662c:	460a      	mov	r2, r1
   d662e:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6630:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d6632:	f7ff fefd 	bl	d6430 <_ZN9SdSpiCard11cardCommandEhm>
   d6636:	b110      	cbz	r0, d663e <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6638:	2330      	movs	r3, #48	; 0x30
   d663a:	7023      	strb	r3, [r4, #0]
   d663c:	e00b      	b.n	d6656 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d663e:	4629      	mov	r1, r5
   d6640:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6644:	4620      	mov	r0, r4
   d6646:	f7ff fead 	bl	d63a4 <_ZN9SdSpiCard8readDataEPhj>
   d664a:	4605      	mov	r5, r0
   d664c:	b118      	cbz	r0, d6656 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d664e:	4620      	mov	r0, r4
   d6650:	f7ff fe95 	bl	d637e <_ZN9SdSpiCard7spiStopEv>
  return true;
   d6654:	e003      	b.n	d665e <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d6656:	4620      	mov	r0, r4
   d6658:	f7ff fe91 	bl	d637e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d665c:	2500      	movs	r5, #0
}
   d665e:	4628      	mov	r0, r5
   d6660:	bd38      	pop	{r3, r4, r5, pc}

000d6662 <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6662:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d6664:	7a83      	ldrb	r3, [r0, #10]
   d6666:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6668:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d666a:	bf18      	it	ne
   d666c:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d666e:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6670:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d6672:	f7ff fedd 	bl	d6430 <_ZN9SdSpiCard11cardCommandEhm>
   d6676:	b130      	cbz	r0, d6686 <_ZN9SdSpiCard9readStartEm+0x24>
   d6678:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d667a:	4620      	mov	r0, r4
   d667c:	7023      	strb	r3, [r4, #0]
   d667e:	f7ff fe7e 	bl	d637e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6682:	2000      	movs	r0, #0
   d6684:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d6686:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6688:	bd10      	pop	{r4, pc}

000d668a <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d668a:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d668c:	2200      	movs	r2, #0
   d668e:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d6690:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d6692:	f7ff fecd 	bl	d6430 <_ZN9SdSpiCard11cardCommandEhm>
   d6696:	b130      	cbz	r0, d66a6 <_ZN9SdSpiCard8readStopEv+0x1c>
   d6698:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d669a:	4620      	mov	r0, r4
   d669c:	7023      	strb	r3, [r4, #0]
   d669e:	f7ff fe6e 	bl	d637e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d66a2:	2000      	movs	r0, #0
   d66a4:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d66a6:	4620      	mov	r0, r4
   d66a8:	f7ff fe69 	bl	d637e <_ZN9SdSpiCard7spiStopEv>
  return true;
   d66ac:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d66ae:	bd10      	pop	{r4, pc}

000d66b0 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d66b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d66b2:	4605      	mov	r5, r0
   d66b4:	4616      	mov	r6, r2
   d66b6:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d66b8:	f7ff ffd3 	bl	d6662 <_ZN9SdSpiCard9readStartEm>
   d66bc:	b198      	cbz	r0, d66e6 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d66be:	2400      	movs	r4, #0
   d66c0:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d66c2:	429f      	cmp	r7, r3
   d66c4:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d66c8:	d908      	bls.n	d66dc <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d66ca:	f44f 7200 	mov.w	r2, #512	; 0x200
   d66ce:	4628      	mov	r0, r5
   d66d0:	f7ff fe68 	bl	d63a4 <_ZN9SdSpiCard8readDataEPhj>
   d66d4:	3401      	adds	r4, #1
   d66d6:	2800      	cmp	r0, #0
   d66d8:	d1f2      	bne.n	d66c0 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d66da:	e004      	b.n	d66e6 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d66dc:	4628      	mov	r0, r5
}
   d66de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d66e2:	f7ff bfd2 	b.w	d668a <_ZN9SdSpiCard8readStopEv>
}
   d66e6:	2000      	movs	r0, #0
   d66e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d66ea <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d66ea:	b538      	push	{r3, r4, r5, lr}
   d66ec:	4604      	mov	r4, r0
   d66ee:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d66f0:	6840      	ldr	r0, [r0, #4]
   d66f2:	f000 f8eb 	bl	d68cc <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d66f6:	f44f 7200 	mov.w	r2, #512	; 0x200
   d66fa:	4629      	mov	r1, r5
   d66fc:	6860      	ldr	r0, [r4, #4]
   d66fe:	f000 f8e9 	bl	d68d4 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6702:	21ff      	movs	r1, #255	; 0xff
   d6704:	6860      	ldr	r0, [r4, #4]
   d6706:	f000 f8e1 	bl	d68cc <_ZN14SdSpiAltDriver4sendEh>
   d670a:	21ff      	movs	r1, #255	; 0xff
   d670c:	6860      	ldr	r0, [r4, #4]
   d670e:	f000 f8dd 	bl	d68cc <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6712:	6860      	ldr	r0, [r4, #4]
   d6714:	f000 f8bf 	bl	d6896 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d6718:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d671a:	f000 001f 	and.w	r0, r0, #31
   d671e:	2805      	cmp	r0, #5
   d6720:	d006      	beq.n	d6730 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6722:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6724:	4620      	mov	r0, r4
   d6726:	7023      	strb	r3, [r4, #0]
   d6728:	f7ff fe29 	bl	d637e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d672c:	2000      	movs	r0, #0
   d672e:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d6730:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6732:	bd38      	pop	{r3, r4, r5, pc}

000d6734 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6734:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6736:	7a83      	ldrb	r3, [r0, #10]
   d6738:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d673a:	bf18      	it	ne
   d673c:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d673e:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d6740:	460a      	mov	r2, r1
   d6742:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6744:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d6746:	f7ff fe73 	bl	d6430 <_ZN9SdSpiCard11cardCommandEhm>
   d674a:	4606      	mov	r6, r0
   d674c:	b108      	cbz	r0, d6752 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d674e:	2332      	movs	r3, #50	; 0x32
   d6750:	e01d      	b.n	d678e <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d6752:	462a      	mov	r2, r5
   d6754:	21fe      	movs	r1, #254	; 0xfe
   d6756:	4620      	mov	r0, r4
   d6758:	f7ff ffc7 	bl	d66ea <_ZN9SdSpiCard9writeDataEhPKh>
   d675c:	b1c0      	cbz	r0, d6790 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d675e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d6762:	4620      	mov	r0, r4
   d6764:	f7ff fe4f 	bl	d6406 <_ZN9SdSpiCard11waitNotBusyEt>
   d6768:	4605      	mov	r5, r0
   d676a:	b908      	cbnz	r0, d6770 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d676c:	235a      	movs	r3, #90	; 0x5a
   d676e:	e00e      	b.n	d678e <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d6770:	4632      	mov	r2, r6
   d6772:	210d      	movs	r1, #13
   d6774:	4620      	mov	r0, r4
   d6776:	f7ff fe5b 	bl	d6430 <_ZN9SdSpiCard11cardCommandEhm>
   d677a:	b938      	cbnz	r0, d678c <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d677c:	6860      	ldr	r0, [r4, #4]
   d677e:	f000 f88a 	bl	d6896 <_ZN14SdSpiAltDriver7receiveEv>
   d6782:	b918      	cbnz	r0, d678c <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d6784:	4620      	mov	r0, r4
   d6786:	f7ff fdfa 	bl	d637e <_ZN9SdSpiCard7spiStopEv>
  return true;
   d678a:	e005      	b.n	d6798 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d678c:	2329      	movs	r3, #41	; 0x29
   d678e:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d6790:	4620      	mov	r0, r4
   d6792:	f7ff fdf4 	bl	d637e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6796:	2500      	movs	r5, #0
}
   d6798:	4628      	mov	r0, r5
   d679a:	bd70      	pop	{r4, r5, r6, pc}

000d679c <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d679c:	b538      	push	{r3, r4, r5, lr}
   d679e:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d67a0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d67a4:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d67a6:	f7ff fe2e 	bl	d6406 <_ZN9SdSpiCard11waitNotBusyEt>
   d67aa:	b910      	cbnz	r0, d67b2 <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d67ac:	235b      	movs	r3, #91	; 0x5b
   d67ae:	7023      	strb	r3, [r4, #0]
   d67b0:	e005      	b.n	d67be <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d67b2:	462a      	mov	r2, r5
   d67b4:	21fc      	movs	r1, #252	; 0xfc
   d67b6:	4620      	mov	r0, r4
   d67b8:	f7ff ff97 	bl	d66ea <_ZN9SdSpiCard9writeDataEhPKh>
   d67bc:	b918      	cbnz	r0, d67c6 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d67be:	4620      	mov	r0, r4
   d67c0:	f7ff fddd 	bl	d637e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d67c4:	2000      	movs	r0, #0
}
   d67c6:	bd38      	pop	{r3, r4, r5, pc}

000d67c8 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d67c8:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d67ca:	7a83      	ldrb	r3, [r0, #10]
   d67cc:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d67ce:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d67d0:	bf18      	it	ne
   d67d2:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d67d4:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d67d6:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d67d8:	f7ff fe2a 	bl	d6430 <_ZN9SdSpiCard11cardCommandEhm>
   d67dc:	b130      	cbz	r0, d67ec <_ZN9SdSpiCard10writeStartEm+0x24>
   d67de:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d67e0:	4620      	mov	r0, r4
   d67e2:	7023      	strb	r3, [r4, #0]
   d67e4:	f7ff fdcb 	bl	d637e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d67e8:	2000      	movs	r0, #0
   d67ea:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d67ec:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d67ee:	bd10      	pop	{r4, pc}

000d67f0 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d67f0:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d67f2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d67f6:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d67f8:	f7ff fe05 	bl	d6406 <_ZN9SdSpiCard11waitNotBusyEt>
   d67fc:	4605      	mov	r5, r0
   d67fe:	b120      	cbz	r0, d680a <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6800:	21fd      	movs	r1, #253	; 0xfd
   d6802:	6860      	ldr	r0, [r4, #4]
   d6804:	f000 f862 	bl	d68cc <_ZN14SdSpiAltDriver4sendEh>
   d6808:	e001      	b.n	d680e <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d680a:	2356      	movs	r3, #86	; 0x56
   d680c:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d680e:	4620      	mov	r0, r4
   d6810:	f7ff fdb5 	bl	d637e <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d6814:	4628      	mov	r0, r5
   d6816:	bd38      	pop	{r3, r4, r5, pc}

000d6818 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d6818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d681a:	4605      	mov	r5, r0
   d681c:	4616      	mov	r6, r2
   d681e:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d6820:	f7ff ffd2 	bl	d67c8 <_ZN9SdSpiCard10writeStartEm>
   d6824:	b170      	cbz	r0, d6844 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d6826:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6828:	42bc      	cmp	r4, r7
   d682a:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d682e:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6830:	d004      	beq.n	d683c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d6832:	f7ff ffb3 	bl	d679c <_ZN9SdSpiCard9writeDataEPKh>
   d6836:	b128      	cbz	r0, d6844 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6838:	3401      	adds	r4, #1
   d683a:	e7f5      	b.n	d6828 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d683c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d6840:	f7ff bfd6 	b.w	d67f0 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d6844:	4628      	mov	r0, r5
   d6846:	f7ff fd9a 	bl	d637e <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d684a:	2000      	movs	r0, #0
   d684c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d684e <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d684e:	f000 b867 	b.w	d6920 <HAL_Pin_Map>

000d6852 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d6852:	f000 b865 	b.w	d6920 <HAL_Pin_Map>

000d6856 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d6856:	f000 b863 	b.w	d6920 <HAL_Pin_Map>
	...

000d685c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d685c:	4b01      	ldr	r3, [pc, #4]	; (d6864 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d685e:	2201      	movs	r2, #1
   d6860:	701a      	strb	r2, [r3, #0]
   d6862:	4770      	bx	lr
   d6864:	2003e390 	.word	0x2003e390

000d6868 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d6868:	1d01      	adds	r1, r0, #4
   d686a:	6800      	ldr	r0, [r0, #0]
   d686c:	f000 bba4 	b.w	d6fb8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d6870 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d6870:	b510      	push	{r4, lr}
   d6872:	4604      	mov	r4, r0
  m_csPin = csPin;
   d6874:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d6876:	6800      	ldr	r0, [r0, #0]
   d6878:	f000 fb74 	bl	d6f64 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d687c:	7d20      	ldrb	r0, [r4, #20]
   d687e:	2101      	movs	r1, #1
   d6880:	f001 fce0 	bl	d8244 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d6884:	7d20      	ldrb	r0, [r4, #20]
   d6886:	2101      	movs	r1, #1
}
   d6888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d688c:	f001 bceb 	b.w	d8266 <digitalWrite>

000d6890 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d6890:	6800      	ldr	r0, [r0, #0]
   d6892:	f000 bb78 	b.w	d6f86 <_ZN8SPIClass14endTransactionEv>

000d6896 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d6896:	21ff      	movs	r1, #255	; 0xff
   d6898:	6800      	ldr	r0, [r0, #0]
   d689a:	f000 bbfd 	b.w	d7098 <_ZN8SPIClass8transferEh>
	...

000d68a0 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d68a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d68a2:	4b08      	ldr	r3, [pc, #32]	; (d68c4 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d68a4:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d68a6:	2500      	movs	r5, #0
   d68a8:	4c07      	ldr	r4, [pc, #28]	; (d68c8 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d68aa:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d68ac:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d68ae:	4613      	mov	r3, r2
   d68b0:	460a      	mov	r2, r1
   d68b2:	4629      	mov	r1, r5
   d68b4:	f000 fbf6 	bl	d70a4 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d68b8:	7823      	ldrb	r3, [r4, #0]
   d68ba:	2b00      	cmp	r3, #0
   d68bc:	d0fc      	beq.n	d68b8 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d68be:	2000      	movs	r0, #0
   d68c0:	b003      	add	sp, #12
   d68c2:	bd30      	pop	{r4, r5, pc}
   d68c4:	000d685d 	.word	0x000d685d
   d68c8:	2003e390 	.word	0x2003e390

000d68cc <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d68cc:	6800      	ldr	r0, [r0, #0]
   d68ce:	f000 bbe3 	b.w	d7098 <_ZN8SPIClass8transferEh>
	...

000d68d4 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d68d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d68d6:	4b07      	ldr	r3, [pc, #28]	; (d68f4 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d68d8:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d68da:	2500      	movs	r5, #0
   d68dc:	4c06      	ldr	r4, [pc, #24]	; (d68f8 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d68de:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d68e0:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d68e2:	4613      	mov	r3, r2
   d68e4:	462a      	mov	r2, r5
   d68e6:	f000 fbdd 	bl	d70a4 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d68ea:	7823      	ldrb	r3, [r4, #0]
   d68ec:	2b00      	cmp	r3, #0
   d68ee:	d0fc      	beq.n	d68ea <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d68f0:	b003      	add	sp, #12
   d68f2:	bd30      	pop	{r4, r5, pc}
   d68f4:	000d685d 	.word	0x000d685d
   d68f8:	2003e390 	.word	0x2003e390

000d68fc <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d68fc:	f000 b810 	b.w	d6920 <HAL_Pin_Map>

000d6900 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6900:	b508      	push	{r3, lr}
   d6902:	4b02      	ldr	r3, [pc, #8]	; (d690c <netdb_freeaddrinfo+0xc>)
   d6904:	681b      	ldr	r3, [r3, #0]
   d6906:	689b      	ldr	r3, [r3, #8]
   d6908:	9301      	str	r3, [sp, #4]
   d690a:	bd08      	pop	{r3, pc}
   d690c:	00030268 	.word	0x00030268

000d6910 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6910:	b508      	push	{r3, lr}
   d6912:	4b02      	ldr	r3, [pc, #8]	; (d691c <netdb_getaddrinfo+0xc>)
   d6914:	681b      	ldr	r3, [r3, #0]
   d6916:	68db      	ldr	r3, [r3, #12]
   d6918:	9301      	str	r3, [sp, #4]
   d691a:	bd08      	pop	{r3, pc}
   d691c:	00030268 	.word	0x00030268

000d6920 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d6920:	b508      	push	{r3, lr}
   d6922:	4b02      	ldr	r3, [pc, #8]	; (d692c <HAL_Pin_Map+0xc>)
   d6924:	681b      	ldr	r3, [r3, #0]
   d6926:	681b      	ldr	r3, [r3, #0]
   d6928:	9301      	str	r3, [sp, #4]
   d692a:	bd08      	pop	{r3, pc}
   d692c:	0003022c 	.word	0x0003022c

000d6930 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6930:	b508      	push	{r3, lr}
   d6932:	4b02      	ldr	r3, [pc, #8]	; (d693c <HAL_Pin_Mode+0xc>)
   d6934:	681b      	ldr	r3, [r3, #0]
   d6936:	689b      	ldr	r3, [r3, #8]
   d6938:	9301      	str	r3, [sp, #4]
   d693a:	bd08      	pop	{r3, pc}
   d693c:	0003022c 	.word	0x0003022c

000d6940 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6940:	b508      	push	{r3, lr}
   d6942:	4b02      	ldr	r3, [pc, #8]	; (d694c <HAL_Get_Pin_Mode+0xc>)
   d6944:	681b      	ldr	r3, [r3, #0]
   d6946:	68db      	ldr	r3, [r3, #12]
   d6948:	9301      	str	r3, [sp, #4]
   d694a:	bd08      	pop	{r3, pc}
   d694c:	0003022c 	.word	0x0003022c

000d6950 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6950:	b508      	push	{r3, lr}
   d6952:	4b02      	ldr	r3, [pc, #8]	; (d695c <HAL_GPIO_Write+0xc>)
   d6954:	681b      	ldr	r3, [r3, #0]
   d6956:	691b      	ldr	r3, [r3, #16]
   d6958:	9301      	str	r3, [sp, #4]
   d695a:	bd08      	pop	{r3, pc}
   d695c:	0003022c 	.word	0x0003022c

000d6960 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d6960:	b508      	push	{r3, lr}
   d6962:	4b02      	ldr	r3, [pc, #8]	; (d696c <HAL_GPIO_Read+0xc>)
   d6964:	681b      	ldr	r3, [r3, #0]
   d6966:	695b      	ldr	r3, [r3, #20]
   d6968:	9301      	str	r3, [sp, #4]
   d696a:	bd08      	pop	{r3, pc}
   d696c:	0003022c 	.word	0x0003022c

000d6970 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d6970:	b508      	push	{r3, lr}
   d6972:	4b02      	ldr	r3, [pc, #8]	; (d697c <HAL_SPI_Begin+0xc>)
   d6974:	681b      	ldr	r3, [r3, #0]
   d6976:	681b      	ldr	r3, [r3, #0]
   d6978:	9301      	str	r3, [sp, #4]
   d697a:	bd08      	pop	{r3, pc}
   d697c:	00030230 	.word	0x00030230

000d6980 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d6980:	b508      	push	{r3, lr}
   d6982:	4b02      	ldr	r3, [pc, #8]	; (d698c <HAL_SPI_Send_Receive_Data+0xc>)
   d6984:	681b      	ldr	r3, [r3, #0]
   d6986:	695b      	ldr	r3, [r3, #20]
   d6988:	9301      	str	r3, [sp, #4]
   d698a:	bd08      	pop	{r3, pc}
   d698c:	00030230 	.word	0x00030230

000d6990 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d6990:	b508      	push	{r3, lr}
   d6992:	4b02      	ldr	r3, [pc, #8]	; (d699c <HAL_SPI_Init+0xc>)
   d6994:	681b      	ldr	r3, [r3, #0]
   d6996:	69db      	ldr	r3, [r3, #28]
   d6998:	9301      	str	r3, [sp, #4]
   d699a:	bd08      	pop	{r3, pc}
   d699c:	00030230 	.word	0x00030230

000d69a0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d69a0:	b508      	push	{r3, lr}
   d69a2:	4b02      	ldr	r3, [pc, #8]	; (d69ac <HAL_SPI_Is_Enabled+0xc>)
   d69a4:	681b      	ldr	r3, [r3, #0]
   d69a6:	6a1b      	ldr	r3, [r3, #32]
   d69a8:	9301      	str	r3, [sp, #4]
   d69aa:	bd08      	pop	{r3, pc}
   d69ac:	00030230 	.word	0x00030230

000d69b0 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d69b0:	b508      	push	{r3, lr}
   d69b2:	4b02      	ldr	r3, [pc, #8]	; (d69bc <HAL_SPI_Info+0xc>)
   d69b4:	681b      	ldr	r3, [r3, #0]
   d69b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d69b8:	9301      	str	r3, [sp, #4]
   d69ba:	bd08      	pop	{r3, pc}
   d69bc:	00030230 	.word	0x00030230

000d69c0 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d69c0:	b508      	push	{r3, lr}
   d69c2:	4b02      	ldr	r3, [pc, #8]	; (d69cc <HAL_SPI_DMA_Transfer+0xc>)
   d69c4:	681b      	ldr	r3, [r3, #0]
   d69c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d69c8:	9301      	str	r3, [sp, #4]
   d69ca:	bd08      	pop	{r3, pc}
   d69cc:	00030230 	.word	0x00030230

000d69d0 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d69d0:	b508      	push	{r3, lr}
   d69d2:	4b02      	ldr	r3, [pc, #8]	; (d69dc <HAL_SPI_DMA_Transfer_Status+0xc>)
   d69d4:	681b      	ldr	r3, [r3, #0]
   d69d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d69d8:	9301      	str	r3, [sp, #4]
   d69da:	bd08      	pop	{r3, pc}
   d69dc:	00030230 	.word	0x00030230

000d69e0 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d69e0:	b508      	push	{r3, lr}
   d69e2:	4b02      	ldr	r3, [pc, #8]	; (d69ec <HAL_SPI_Set_Settings+0xc>)
   d69e4:	681b      	ldr	r3, [r3, #0]
   d69e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d69e8:	9301      	str	r3, [sp, #4]
   d69ea:	bd08      	pop	{r3, pc}
   d69ec:	00030230 	.word	0x00030230

000d69f0 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d69f0:	b508      	push	{r3, lr}
   d69f2:	4b02      	ldr	r3, [pc, #8]	; (d69fc <HAL_SPI_Acquire+0xc>)
   d69f4:	681b      	ldr	r3, [r3, #0]
   d69f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d69f8:	9301      	str	r3, [sp, #4]
   d69fa:	bd08      	pop	{r3, pc}
   d69fc:	00030230 	.word	0x00030230

000d6a00 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d6a00:	b508      	push	{r3, lr}
   d6a02:	4b02      	ldr	r3, [pc, #8]	; (d6a0c <HAL_SPI_Release+0xc>)
   d6a04:	681b      	ldr	r3, [r3, #0]
   d6a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6a08:	9301      	str	r3, [sp, #4]
   d6a0a:	bd08      	pop	{r3, pc}
   d6a0c:	00030230 	.word	0x00030230

000d6a10 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6a10:	b508      	push	{r3, lr}
   d6a12:	4b02      	ldr	r3, [pc, #8]	; (d6a1c <HAL_RNG_GetRandomNumber+0xc>)
   d6a14:	681b      	ldr	r3, [r3, #0]
   d6a16:	685b      	ldr	r3, [r3, #4]
   d6a18:	9301      	str	r3, [sp, #4]
   d6a1a:	bd08      	pop	{r3, pc}
   d6a1c:	00030218 	.word	0x00030218

000d6a20 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d6a20:	b508      	push	{r3, lr}
   d6a22:	4b02      	ldr	r3, [pc, #8]	; (d6a2c <HAL_Timer_Get_Micro_Seconds+0xc>)
   d6a24:	681b      	ldr	r3, [r3, #0]
   d6a26:	691b      	ldr	r3, [r3, #16]
   d6a28:	9301      	str	r3, [sp, #4]
   d6a2a:	bd08      	pop	{r3, pc}
   d6a2c:	00030218 	.word	0x00030218

000d6a30 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6a30:	b508      	push	{r3, lr}
   d6a32:	4b02      	ldr	r3, [pc, #8]	; (d6a3c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6a34:	681b      	ldr	r3, [r3, #0]
   d6a36:	695b      	ldr	r3, [r3, #20]
   d6a38:	9301      	str	r3, [sp, #4]
   d6a3a:	bd08      	pop	{r3, pc}
   d6a3c:	00030218 	.word	0x00030218

000d6a40 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d6a40:	b508      	push	{r3, lr}
   d6a42:	4b02      	ldr	r3, [pc, #8]	; (d6a4c <HAL_RTC_Get_UnixTime+0xc>)
   d6a44:	681b      	ldr	r3, [r3, #0]
   d6a46:	69db      	ldr	r3, [r3, #28]
   d6a48:	9301      	str	r3, [sp, #4]
   d6a4a:	bd08      	pop	{r3, pc}
   d6a4c:	00030218 	.word	0x00030218

000d6a50 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d6a50:	b508      	push	{r3, lr}
   d6a52:	4b02      	ldr	r3, [pc, #8]	; (d6a5c <HAL_EEPROM_Init+0xc>)
   d6a54:	681b      	ldr	r3, [r3, #0]
   d6a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6a58:	9301      	str	r3, [sp, #4]
   d6a5a:	bd08      	pop	{r3, pc}
   d6a5c:	00030218 	.word	0x00030218

000d6a60 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d6a60:	b508      	push	{r3, lr}
   d6a62:	4b02      	ldr	r3, [pc, #8]	; (d6a6c <HAL_EEPROM_Get+0xc>)
   d6a64:	681b      	ldr	r3, [r3, #0]
   d6a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6a68:	9301      	str	r3, [sp, #4]
   d6a6a:	bd08      	pop	{r3, pc}
   d6a6c:	00030218 	.word	0x00030218

000d6a70 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d6a70:	b508      	push	{r3, lr}
   d6a72:	4b02      	ldr	r3, [pc, #8]	; (d6a7c <HAL_EEPROM_Put+0xc>)
   d6a74:	681b      	ldr	r3, [r3, #0]
   d6a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6a78:	9301      	str	r3, [sp, #4]
   d6a7a:	bd08      	pop	{r3, pc}
   d6a7c:	00030218 	.word	0x00030218

000d6a80 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d6a80:	b508      	push	{r3, lr}
   d6a82:	4b02      	ldr	r3, [pc, #8]	; (d6a8c <HAL_RTC_Time_Is_Valid+0xc>)
   d6a84:	681b      	ldr	r3, [r3, #0]
   d6a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6a88:	9301      	str	r3, [sp, #4]
   d6a8a:	bd08      	pop	{r3, pc}
   d6a8c:	00030218 	.word	0x00030218

000d6a90 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d6a90:	b508      	push	{r3, lr}
   d6a92:	4b02      	ldr	r3, [pc, #8]	; (d6a9c <os_thread_is_current+0xc>)
   d6a94:	681b      	ldr	r3, [r3, #0]
   d6a96:	689b      	ldr	r3, [r3, #8]
   d6a98:	9301      	str	r3, [sp, #4]
   d6a9a:	bd08      	pop	{r3, pc}
   d6a9c:	00030248 	.word	0x00030248

000d6aa0 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d6aa0:	b508      	push	{r3, lr}
   d6aa2:	4b02      	ldr	r3, [pc, #8]	; (d6aac <os_thread_yield+0xc>)
   d6aa4:	681b      	ldr	r3, [r3, #0]
   d6aa6:	68db      	ldr	r3, [r3, #12]
   d6aa8:	9301      	str	r3, [sp, #4]
   d6aaa:	bd08      	pop	{r3, pc}
   d6aac:	00030248 	.word	0x00030248

000d6ab0 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d6ab0:	b508      	push	{r3, lr}
   d6ab2:	4b02      	ldr	r3, [pc, #8]	; (d6abc <os_thread_join+0xc>)
   d6ab4:	681b      	ldr	r3, [r3, #0]
   d6ab6:	691b      	ldr	r3, [r3, #16]
   d6ab8:	9301      	str	r3, [sp, #4]
   d6aba:	bd08      	pop	{r3, pc}
   d6abc:	00030248 	.word	0x00030248

000d6ac0 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d6ac0:	b508      	push	{r3, lr}
   d6ac2:	4b02      	ldr	r3, [pc, #8]	; (d6acc <os_thread_cleanup+0xc>)
   d6ac4:	681b      	ldr	r3, [r3, #0]
   d6ac6:	695b      	ldr	r3, [r3, #20]
   d6ac8:	9301      	str	r3, [sp, #4]
   d6aca:	bd08      	pop	{r3, pc}
   d6acc:	00030248 	.word	0x00030248

000d6ad0 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d6ad0:	b508      	push	{r3, lr}
   d6ad2:	4b02      	ldr	r3, [pc, #8]	; (d6adc <os_thread_scheduling+0xc>)
   d6ad4:	681b      	ldr	r3, [r3, #0]
   d6ad6:	69db      	ldr	r3, [r3, #28]
   d6ad8:	9301      	str	r3, [sp, #4]
   d6ada:	bd08      	pop	{r3, pc}
   d6adc:	00030248 	.word	0x00030248

000d6ae0 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d6ae0:	b508      	push	{r3, lr}
   d6ae2:	4b02      	ldr	r3, [pc, #8]	; (d6aec <os_timer_create+0xc>)
   d6ae4:	681b      	ldr	r3, [r3, #0]
   d6ae6:	6a1b      	ldr	r3, [r3, #32]
   d6ae8:	9301      	str	r3, [sp, #4]
   d6aea:	bd08      	pop	{r3, pc}
   d6aec:	00030248 	.word	0x00030248

000d6af0 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d6af0:	b508      	push	{r3, lr}
   d6af2:	4b02      	ldr	r3, [pc, #8]	; (d6afc <os_timer_destroy+0xc>)
   d6af4:	681b      	ldr	r3, [r3, #0]
   d6af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6af8:	9301      	str	r3, [sp, #4]
   d6afa:	bd08      	pop	{r3, pc}
   d6afc:	00030248 	.word	0x00030248

000d6b00 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d6b00:	b508      	push	{r3, lr}
   d6b02:	4b02      	ldr	r3, [pc, #8]	; (d6b0c <os_timer_get_id+0xc>)
   d6b04:	681b      	ldr	r3, [r3, #0]
   d6b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6b08:	9301      	str	r3, [sp, #4]
   d6b0a:	bd08      	pop	{r3, pc}
   d6b0c:	00030248 	.word	0x00030248

000d6b10 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d6b10:	b508      	push	{r3, lr}
   d6b12:	4b02      	ldr	r3, [pc, #8]	; (d6b1c <os_timer_change+0xc>)
   d6b14:	681b      	ldr	r3, [r3, #0]
   d6b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6b18:	9301      	str	r3, [sp, #4]
   d6b1a:	bd08      	pop	{r3, pc}
   d6b1c:	00030248 	.word	0x00030248

000d6b20 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6b20:	b508      	push	{r3, lr}
   d6b22:	4b02      	ldr	r3, [pc, #8]	; (d6b2c <os_mutex_recursive_create+0xc>)
   d6b24:	681b      	ldr	r3, [r3, #0]
   d6b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6b28:	9301      	str	r3, [sp, #4]
   d6b2a:	bd08      	pop	{r3, pc}
   d6b2c:	00030248 	.word	0x00030248

000d6b30 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6b30:	b508      	push	{r3, lr}
   d6b32:	4b02      	ldr	r3, [pc, #8]	; (d6b3c <os_mutex_recursive_destroy+0xc>)
   d6b34:	681b      	ldr	r3, [r3, #0]
   d6b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6b38:	9301      	str	r3, [sp, #4]
   d6b3a:	bd08      	pop	{r3, pc}
   d6b3c:	00030248 	.word	0x00030248

000d6b40 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d6b40:	b508      	push	{r3, lr}
   d6b42:	4b02      	ldr	r3, [pc, #8]	; (d6b4c <os_timer_set_id+0xc>)
   d6b44:	681b      	ldr	r3, [r3, #0]
   d6b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d6b48:	9301      	str	r3, [sp, #4]
   d6b4a:	bd08      	pop	{r3, pc}
   d6b4c:	00030248 	.word	0x00030248

000d6b50 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6b50:	b508      	push	{r3, lr}
   d6b52:	4b02      	ldr	r3, [pc, #8]	; (d6b5c <inet_inet_ntop+0xc>)
   d6b54:	681b      	ldr	r3, [r3, #0]
   d6b56:	695b      	ldr	r3, [r3, #20]
   d6b58:	9301      	str	r3, [sp, #4]
   d6b5a:	bd08      	pop	{r3, pc}
   d6b5c:	00030264 	.word	0x00030264

000d6b60 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d6b60:	b508      	push	{r3, lr}
   d6b62:	4b02      	ldr	r3, [pc, #8]	; (d6b6c <HAL_USART_Init+0xc>)
   d6b64:	681b      	ldr	r3, [r3, #0]
   d6b66:	681b      	ldr	r3, [r3, #0]
   d6b68:	9301      	str	r3, [sp, #4]
   d6b6a:	bd08      	pop	{r3, pc}
   d6b6c:	0003023c 	.word	0x0003023c

000d6b70 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d6b70:	b508      	push	{r3, lr}
   d6b72:	4b02      	ldr	r3, [pc, #8]	; (d6b7c <HAL_USART_Write_Data+0xc>)
   d6b74:	681b      	ldr	r3, [r3, #0]
   d6b76:	68db      	ldr	r3, [r3, #12]
   d6b78:	9301      	str	r3, [sp, #4]
   d6b7a:	bd08      	pop	{r3, pc}
   d6b7c:	0003023c 	.word	0x0003023c

000d6b80 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d6b80:	b508      	push	{r3, lr}
   d6b82:	4b02      	ldr	r3, [pc, #8]	; (d6b8c <HAL_USART_Available_Data+0xc>)
   d6b84:	681b      	ldr	r3, [r3, #0]
   d6b86:	691b      	ldr	r3, [r3, #16]
   d6b88:	9301      	str	r3, [sp, #4]
   d6b8a:	bd08      	pop	{r3, pc}
   d6b8c:	0003023c 	.word	0x0003023c

000d6b90 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d6b90:	b508      	push	{r3, lr}
   d6b92:	4b02      	ldr	r3, [pc, #8]	; (d6b9c <HAL_USART_Read_Data+0xc>)
   d6b94:	681b      	ldr	r3, [r3, #0]
   d6b96:	695b      	ldr	r3, [r3, #20]
   d6b98:	9301      	str	r3, [sp, #4]
   d6b9a:	bd08      	pop	{r3, pc}
   d6b9c:	0003023c 	.word	0x0003023c

000d6ba0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d6ba0:	b508      	push	{r3, lr}
   d6ba2:	4b02      	ldr	r3, [pc, #8]	; (d6bac <HAL_USART_Peek_Data+0xc>)
   d6ba4:	681b      	ldr	r3, [r3, #0]
   d6ba6:	699b      	ldr	r3, [r3, #24]
   d6ba8:	9301      	str	r3, [sp, #4]
   d6baa:	bd08      	pop	{r3, pc}
   d6bac:	0003023c 	.word	0x0003023c

000d6bb0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d6bb0:	b508      	push	{r3, lr}
   d6bb2:	4b02      	ldr	r3, [pc, #8]	; (d6bbc <HAL_USART_Flush_Data+0xc>)
   d6bb4:	681b      	ldr	r3, [r3, #0]
   d6bb6:	69db      	ldr	r3, [r3, #28]
   d6bb8:	9301      	str	r3, [sp, #4]
   d6bba:	bd08      	pop	{r3, pc}
   d6bbc:	0003023c 	.word	0x0003023c

000d6bc0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d6bc0:	b508      	push	{r3, lr}
   d6bc2:	4b02      	ldr	r3, [pc, #8]	; (d6bcc <HAL_USART_Is_Enabled+0xc>)
   d6bc4:	681b      	ldr	r3, [r3, #0]
   d6bc6:	6a1b      	ldr	r3, [r3, #32]
   d6bc8:	9301      	str	r3, [sp, #4]
   d6bca:	bd08      	pop	{r3, pc}
   d6bcc:	0003023c 	.word	0x0003023c

000d6bd0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d6bd0:	b508      	push	{r3, lr}
   d6bd2:	4b02      	ldr	r3, [pc, #8]	; (d6bdc <HAL_USART_Available_Data_For_Write+0xc>)
   d6bd4:	681b      	ldr	r3, [r3, #0]
   d6bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6bd8:	9301      	str	r3, [sp, #4]
   d6bda:	bd08      	pop	{r3, pc}
   d6bdc:	0003023c 	.word	0x0003023c

000d6be0 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d6be0:	b508      	push	{r3, lr}
   d6be2:	4b02      	ldr	r3, [pc, #8]	; (d6bec <HAL_I2C_Begin_Transmission+0xc>)
   d6be4:	681b      	ldr	r3, [r3, #0]
   d6be6:	699b      	ldr	r3, [r3, #24]
   d6be8:	9301      	str	r3, [sp, #4]
   d6bea:	bd08      	pop	{r3, pc}
   d6bec:	00030228 	.word	0x00030228

000d6bf0 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d6bf0:	b508      	push	{r3, lr}
   d6bf2:	4b02      	ldr	r3, [pc, #8]	; (d6bfc <HAL_I2C_End_Transmission+0xc>)
   d6bf4:	681b      	ldr	r3, [r3, #0]
   d6bf6:	69db      	ldr	r3, [r3, #28]
   d6bf8:	9301      	str	r3, [sp, #4]
   d6bfa:	bd08      	pop	{r3, pc}
   d6bfc:	00030228 	.word	0x00030228

000d6c00 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d6c00:	b508      	push	{r3, lr}
   d6c02:	4b02      	ldr	r3, [pc, #8]	; (d6c0c <HAL_I2C_Write_Data+0xc>)
   d6c04:	681b      	ldr	r3, [r3, #0]
   d6c06:	6a1b      	ldr	r3, [r3, #32]
   d6c08:	9301      	str	r3, [sp, #4]
   d6c0a:	bd08      	pop	{r3, pc}
   d6c0c:	00030228 	.word	0x00030228

000d6c10 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d6c10:	b508      	push	{r3, lr}
   d6c12:	4b02      	ldr	r3, [pc, #8]	; (d6c1c <HAL_I2C_Available_Data+0xc>)
   d6c14:	681b      	ldr	r3, [r3, #0]
   d6c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6c18:	9301      	str	r3, [sp, #4]
   d6c1a:	bd08      	pop	{r3, pc}
   d6c1c:	00030228 	.word	0x00030228

000d6c20 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d6c20:	b508      	push	{r3, lr}
   d6c22:	4b02      	ldr	r3, [pc, #8]	; (d6c2c <HAL_I2C_Read_Data+0xc>)
   d6c24:	681b      	ldr	r3, [r3, #0]
   d6c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6c28:	9301      	str	r3, [sp, #4]
   d6c2a:	bd08      	pop	{r3, pc}
   d6c2c:	00030228 	.word	0x00030228

000d6c30 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d6c30:	b508      	push	{r3, lr}
   d6c32:	4b02      	ldr	r3, [pc, #8]	; (d6c3c <HAL_I2C_Peek_Data+0xc>)
   d6c34:	681b      	ldr	r3, [r3, #0]
   d6c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6c38:	9301      	str	r3, [sp, #4]
   d6c3a:	bd08      	pop	{r3, pc}
   d6c3c:	00030228 	.word	0x00030228

000d6c40 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d6c40:	b508      	push	{r3, lr}
   d6c42:	4b02      	ldr	r3, [pc, #8]	; (d6c4c <HAL_I2C_Flush_Data+0xc>)
   d6c44:	681b      	ldr	r3, [r3, #0]
   d6c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6c48:	9301      	str	r3, [sp, #4]
   d6c4a:	bd08      	pop	{r3, pc}
   d6c4c:	00030228 	.word	0x00030228

000d6c50 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d6c50:	b508      	push	{r3, lr}
   d6c52:	4b02      	ldr	r3, [pc, #8]	; (d6c5c <HAL_I2C_Is_Enabled+0xc>)
   d6c54:	681b      	ldr	r3, [r3, #0]
   d6c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6c58:	9301      	str	r3, [sp, #4]
   d6c5a:	bd08      	pop	{r3, pc}
   d6c5c:	00030228 	.word	0x00030228

000d6c60 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d6c60:	b508      	push	{r3, lr}
   d6c62:	4b02      	ldr	r3, [pc, #8]	; (d6c6c <HAL_I2C_Init+0xc>)
   d6c64:	681b      	ldr	r3, [r3, #0]
   d6c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6c68:	9301      	str	r3, [sp, #4]
   d6c6a:	bd08      	pop	{r3, pc}
   d6c6c:	00030228 	.word	0x00030228

000d6c70 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d6c70:	b508      	push	{r3, lr}
   d6c72:	4b02      	ldr	r3, [pc, #8]	; (d6c7c <HAL_I2C_Acquire+0xc>)
   d6c74:	681b      	ldr	r3, [r3, #0]
   d6c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6c78:	9301      	str	r3, [sp, #4]
   d6c7a:	bd08      	pop	{r3, pc}
   d6c7c:	00030228 	.word	0x00030228

000d6c80 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d6c80:	b508      	push	{r3, lr}
   d6c82:	4b02      	ldr	r3, [pc, #8]	; (d6c8c <HAL_I2C_Release+0xc>)
   d6c84:	681b      	ldr	r3, [r3, #0]
   d6c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6c88:	9301      	str	r3, [sp, #4]
   d6c8a:	bd08      	pop	{r3, pc}
   d6c8c:	00030228 	.word	0x00030228

000d6c90 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d6c90:	b508      	push	{r3, lr}
   d6c92:	4b02      	ldr	r3, [pc, #8]	; (d6c9c <HAL_I2C_Request_Data_Ex+0xc>)
   d6c94:	681b      	ldr	r3, [r3, #0]
   d6c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6c98:	9301      	str	r3, [sp, #4]
   d6c9a:	bd08      	pop	{r3, pc}
   d6c9c:	00030228 	.word	0x00030228

000d6ca0 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d6ca0:	b508      	push	{r3, lr}
   d6ca2:	4b02      	ldr	r3, [pc, #8]	; (d6cac <cellular_signal+0xc>)
   d6ca4:	681b      	ldr	r3, [r3, #0]
   d6ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6ca8:	9301      	str	r3, [sp, #4]
   d6caa:	bd08      	pop	{r3, pc}
   d6cac:	00030274 	.word	0x00030274

000d6cb0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6cb0:	b508      	push	{r3, lr}
   d6cb2:	4b02      	ldr	r3, [pc, #8]	; (d6cbc <HAL_USB_USART_Init+0xc>)
   d6cb4:	681b      	ldr	r3, [r3, #0]
   d6cb6:	681b      	ldr	r3, [r3, #0]
   d6cb8:	9301      	str	r3, [sp, #4]
   d6cba:	bd08      	pop	{r3, pc}
   d6cbc:	0003024c 	.word	0x0003024c

000d6cc0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6cc0:	b508      	push	{r3, lr}
   d6cc2:	4b02      	ldr	r3, [pc, #8]	; (d6ccc <HAL_USB_USART_Begin+0xc>)
   d6cc4:	681b      	ldr	r3, [r3, #0]
   d6cc6:	685b      	ldr	r3, [r3, #4]
   d6cc8:	9301      	str	r3, [sp, #4]
   d6cca:	bd08      	pop	{r3, pc}
   d6ccc:	0003024c 	.word	0x0003024c

000d6cd0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6cd0:	b508      	push	{r3, lr}
   d6cd2:	4b02      	ldr	r3, [pc, #8]	; (d6cdc <HAL_USB_USART_Available_Data+0xc>)
   d6cd4:	681b      	ldr	r3, [r3, #0]
   d6cd6:	691b      	ldr	r3, [r3, #16]
   d6cd8:	9301      	str	r3, [sp, #4]
   d6cda:	bd08      	pop	{r3, pc}
   d6cdc:	0003024c 	.word	0x0003024c

000d6ce0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6ce0:	b508      	push	{r3, lr}
   d6ce2:	4b02      	ldr	r3, [pc, #8]	; (d6cec <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6ce4:	681b      	ldr	r3, [r3, #0]
   d6ce6:	695b      	ldr	r3, [r3, #20]
   d6ce8:	9301      	str	r3, [sp, #4]
   d6cea:	bd08      	pop	{r3, pc}
   d6cec:	0003024c 	.word	0x0003024c

000d6cf0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6cf0:	b508      	push	{r3, lr}
   d6cf2:	4b02      	ldr	r3, [pc, #8]	; (d6cfc <HAL_USB_USART_Receive_Data+0xc>)
   d6cf4:	681b      	ldr	r3, [r3, #0]
   d6cf6:	699b      	ldr	r3, [r3, #24]
   d6cf8:	9301      	str	r3, [sp, #4]
   d6cfa:	bd08      	pop	{r3, pc}
   d6cfc:	0003024c 	.word	0x0003024c

000d6d00 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6d00:	b508      	push	{r3, lr}
   d6d02:	4b02      	ldr	r3, [pc, #8]	; (d6d0c <HAL_USB_USART_Send_Data+0xc>)
   d6d04:	681b      	ldr	r3, [r3, #0]
   d6d06:	69db      	ldr	r3, [r3, #28]
   d6d08:	9301      	str	r3, [sp, #4]
   d6d0a:	bd08      	pop	{r3, pc}
   d6d0c:	0003024c 	.word	0x0003024c

000d6d10 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6d10:	b508      	push	{r3, lr}
   d6d12:	4b02      	ldr	r3, [pc, #8]	; (d6d1c <HAL_USB_USART_Flush_Data+0xc>)
   d6d14:	681b      	ldr	r3, [r3, #0]
   d6d16:	6a1b      	ldr	r3, [r3, #32]
   d6d18:	9301      	str	r3, [sp, #4]
   d6d1a:	bd08      	pop	{r3, pc}
   d6d1c:	0003024c 	.word	0x0003024c

000d6d20 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6d20:	b508      	push	{r3, lr}
   d6d22:	4b02      	ldr	r3, [pc, #8]	; (d6d2c <system_mode+0xc>)
   d6d24:	681b      	ldr	r3, [r3, #0]
   d6d26:	681b      	ldr	r3, [r3, #0]
   d6d28:	9301      	str	r3, [sp, #4]
   d6d2a:	bd08      	pop	{r3, pc}
   d6d2c:	00030220 	.word	0x00030220

000d6d30 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6d30:	b508      	push	{r3, lr}
   d6d32:	4b02      	ldr	r3, [pc, #8]	; (d6d3c <set_system_mode+0xc>)
   d6d34:	681b      	ldr	r3, [r3, #0]
   d6d36:	685b      	ldr	r3, [r3, #4]
   d6d38:	9301      	str	r3, [sp, #4]
   d6d3a:	bd08      	pop	{r3, pc}
   d6d3c:	00030220 	.word	0x00030220

000d6d40 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d6d40:	b508      	push	{r3, lr}
   d6d42:	4b02      	ldr	r3, [pc, #8]	; (d6d4c <system_thread_set_state+0xc>)
   d6d44:	681b      	ldr	r3, [r3, #0]
   d6d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6d48:	9301      	str	r3, [sp, #4]
   d6d4a:	bd08      	pop	{r3, pc}
   d6d4c:	00030220 	.word	0x00030220

000d6d50 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d6d50:	b508      	push	{r3, lr}
   d6d52:	4b02      	ldr	r3, [pc, #8]	; (d6d5c <system_thread_get_state+0xc>)
   d6d54:	681b      	ldr	r3, [r3, #0]
   d6d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6d58:	9301      	str	r3, [sp, #4]
   d6d5a:	bd08      	pop	{r3, pc}
   d6d5c:	00030220 	.word	0x00030220

000d6d60 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6d60:	b508      	push	{r3, lr}
   d6d62:	4b03      	ldr	r3, [pc, #12]	; (d6d70 <system_ctrl_set_app_request_handler+0x10>)
   d6d64:	681b      	ldr	r3, [r3, #0]
   d6d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6d6a:	9301      	str	r3, [sp, #4]
   d6d6c:	bd08      	pop	{r3, pc}
   d6d6e:	0000      	.short	0x0000
   d6d70:	00030220 	.word	0x00030220

000d6d74 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6d74:	b508      	push	{r3, lr}
   d6d76:	4b03      	ldr	r3, [pc, #12]	; (d6d84 <system_ctrl_set_result+0x10>)
   d6d78:	681b      	ldr	r3, [r3, #0]
   d6d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6d7e:	9301      	str	r3, [sp, #4]
   d6d80:	bd08      	pop	{r3, pc}
   d6d82:	0000      	.short	0x0000
   d6d84:	00030220 	.word	0x00030220

000d6d88 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6d88:	b508      	push	{r3, lr}
   d6d8a:	4b02      	ldr	r3, [pc, #8]	; (d6d94 <network_connect+0xc>)
   d6d8c:	681b      	ldr	r3, [r3, #0]
   d6d8e:	685b      	ldr	r3, [r3, #4]
   d6d90:	9301      	str	r3, [sp, #4]
   d6d92:	bd08      	pop	{r3, pc}
   d6d94:	00030240 	.word	0x00030240

000d6d98 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6d98:	b508      	push	{r3, lr}
   d6d9a:	4b02      	ldr	r3, [pc, #8]	; (d6da4 <network_connecting+0xc>)
   d6d9c:	681b      	ldr	r3, [r3, #0]
   d6d9e:	689b      	ldr	r3, [r3, #8]
   d6da0:	9301      	str	r3, [sp, #4]
   d6da2:	bd08      	pop	{r3, pc}
   d6da4:	00030240 	.word	0x00030240

000d6da8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6da8:	b508      	push	{r3, lr}
   d6daa:	4b02      	ldr	r3, [pc, #8]	; (d6db4 <network_disconnect+0xc>)
   d6dac:	681b      	ldr	r3, [r3, #0]
   d6dae:	68db      	ldr	r3, [r3, #12]
   d6db0:	9301      	str	r3, [sp, #4]
   d6db2:	bd08      	pop	{r3, pc}
   d6db4:	00030240 	.word	0x00030240

000d6db8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6db8:	b508      	push	{r3, lr}
   d6dba:	4b02      	ldr	r3, [pc, #8]	; (d6dc4 <network_ready+0xc>)
   d6dbc:	681b      	ldr	r3, [r3, #0]
   d6dbe:	691b      	ldr	r3, [r3, #16]
   d6dc0:	9301      	str	r3, [sp, #4]
   d6dc2:	bd08      	pop	{r3, pc}
   d6dc4:	00030240 	.word	0x00030240

000d6dc8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6dc8:	b508      	push	{r3, lr}
   d6dca:	4b02      	ldr	r3, [pc, #8]	; (d6dd4 <network_on+0xc>)
   d6dcc:	681b      	ldr	r3, [r3, #0]
   d6dce:	695b      	ldr	r3, [r3, #20]
   d6dd0:	9301      	str	r3, [sp, #4]
   d6dd2:	bd08      	pop	{r3, pc}
   d6dd4:	00030240 	.word	0x00030240

000d6dd8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6dd8:	b508      	push	{r3, lr}
   d6dda:	4b02      	ldr	r3, [pc, #8]	; (d6de4 <network_off+0xc>)
   d6ddc:	681b      	ldr	r3, [r3, #0]
   d6dde:	699b      	ldr	r3, [r3, #24]
   d6de0:	9301      	str	r3, [sp, #4]
   d6de2:	bd08      	pop	{r3, pc}
   d6de4:	00030240 	.word	0x00030240

000d6de8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6de8:	b508      	push	{r3, lr}
   d6dea:	4b02      	ldr	r3, [pc, #8]	; (d6df4 <network_listen+0xc>)
   d6dec:	681b      	ldr	r3, [r3, #0]
   d6dee:	69db      	ldr	r3, [r3, #28]
   d6df0:	9301      	str	r3, [sp, #4]
   d6df2:	bd08      	pop	{r3, pc}
   d6df4:	00030240 	.word	0x00030240

000d6df8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6df8:	b508      	push	{r3, lr}
   d6dfa:	4b02      	ldr	r3, [pc, #8]	; (d6e04 <network_listening+0xc>)
   d6dfc:	681b      	ldr	r3, [r3, #0]
   d6dfe:	6a1b      	ldr	r3, [r3, #32]
   d6e00:	9301      	str	r3, [sp, #4]
   d6e02:	bd08      	pop	{r3, pc}
   d6e04:	00030240 	.word	0x00030240

000d6e08 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6e08:	b508      	push	{r3, lr}
   d6e0a:	4b02      	ldr	r3, [pc, #8]	; (d6e14 <network_set_listen_timeout+0xc>)
   d6e0c:	681b      	ldr	r3, [r3, #0]
   d6e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6e10:	9301      	str	r3, [sp, #4]
   d6e12:	bd08      	pop	{r3, pc}
   d6e14:	00030240 	.word	0x00030240

000d6e18 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6e18:	b508      	push	{r3, lr}
   d6e1a:	4b02      	ldr	r3, [pc, #8]	; (d6e24 <network_get_listen_timeout+0xc>)
   d6e1c:	681b      	ldr	r3, [r3, #0]
   d6e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6e20:	9301      	str	r3, [sp, #4]
   d6e22:	bd08      	pop	{r3, pc}
   d6e24:	00030240 	.word	0x00030240

000d6e28 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6e28:	b508      	push	{r3, lr}
   d6e2a:	4b02      	ldr	r3, [pc, #8]	; (d6e34 <spark_process+0xc>)
   d6e2c:	681b      	ldr	r3, [r3, #0]
   d6e2e:	689b      	ldr	r3, [r3, #8]
   d6e30:	9301      	str	r3, [sp, #4]
   d6e32:	bd08      	pop	{r3, pc}
   d6e34:	00030244 	.word	0x00030244

000d6e38 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6e38:	b508      	push	{r3, lr}
   d6e3a:	4b02      	ldr	r3, [pc, #8]	; (d6e44 <spark_cloud_flag_connected+0xc>)
   d6e3c:	681b      	ldr	r3, [r3, #0]
   d6e3e:	695b      	ldr	r3, [r3, #20]
   d6e40:	9301      	str	r3, [sp, #4]
   d6e42:	bd08      	pop	{r3, pc}
   d6e44:	00030244 	.word	0x00030244

000d6e48 <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d6e48:	b508      	push	{r3, lr}
   d6e4a:	4b02      	ldr	r3, [pc, #8]	; (d6e54 <spark_sync_time+0xc>)
   d6e4c:	681b      	ldr	r3, [r3, #0]
   d6e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6e50:	9301      	str	r3, [sp, #4]
   d6e52:	bd08      	pop	{r3, pc}
   d6e54:	00030244 	.word	0x00030244

000d6e58 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d6e58:	b508      	push	{r3, lr}
   d6e5a:	4b02      	ldr	r3, [pc, #8]	; (d6e64 <spark_sync_time_pending+0xc>)
   d6e5c:	681b      	ldr	r3, [r3, #0]
   d6e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6e60:	9301      	str	r3, [sp, #4]
   d6e62:	bd08      	pop	{r3, pc}
   d6e64:	00030244 	.word	0x00030244

000d6e68 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6e68:	b508      	push	{r3, lr}
   d6e6a:	4b02      	ldr	r3, [pc, #8]	; (d6e74 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6e6c:	681b      	ldr	r3, [r3, #0]
   d6e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6e70:	9301      	str	r3, [sp, #4]
   d6e72:	bd08      	pop	{r3, pc}
   d6e74:	00030244 	.word	0x00030244

000d6e78 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6e78:	b508      	push	{r3, lr}
   d6e7a:	4b02      	ldr	r3, [pc, #8]	; (d6e84 <malloc+0xc>)
   d6e7c:	681b      	ldr	r3, [r3, #0]
   d6e7e:	681b      	ldr	r3, [r3, #0]
   d6e80:	9301      	str	r3, [sp, #4]
   d6e82:	bd08      	pop	{r3, pc}
   d6e84:	0003021c 	.word	0x0003021c

000d6e88 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6e88:	b508      	push	{r3, lr}
   d6e8a:	4b02      	ldr	r3, [pc, #8]	; (d6e94 <free+0xc>)
   d6e8c:	681b      	ldr	r3, [r3, #0]
   d6e8e:	685b      	ldr	r3, [r3, #4]
   d6e90:	9301      	str	r3, [sp, #4]
   d6e92:	bd08      	pop	{r3, pc}
   d6e94:	0003021c 	.word	0x0003021c

000d6e98 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6e98:	b508      	push	{r3, lr}
   d6e9a:	4b02      	ldr	r3, [pc, #8]	; (d6ea4 <realloc+0xc>)
   d6e9c:	681b      	ldr	r3, [r3, #0]
   d6e9e:	689b      	ldr	r3, [r3, #8]
   d6ea0:	9301      	str	r3, [sp, #4]
   d6ea2:	bd08      	pop	{r3, pc}
   d6ea4:	0003021c 	.word	0x0003021c

000d6ea8 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d6ea8:	b508      	push	{r3, lr}
   d6eaa:	4b02      	ldr	r3, [pc, #8]	; (d6eb4 <sprintf+0xc>)
   d6eac:	681b      	ldr	r3, [r3, #0]
   d6eae:	68db      	ldr	r3, [r3, #12]
   d6eb0:	9301      	str	r3, [sp, #4]
   d6eb2:	bd08      	pop	{r3, pc}
   d6eb4:	0003021c 	.word	0x0003021c

000d6eb8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6eb8:	b508      	push	{r3, lr}
   d6eba:	4b02      	ldr	r3, [pc, #8]	; (d6ec4 <vsnprintf+0xc>)
   d6ebc:	681b      	ldr	r3, [r3, #0]
   d6ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6ec0:	9301      	str	r3, [sp, #4]
   d6ec2:	bd08      	pop	{r3, pc}
   d6ec4:	0003021c 	.word	0x0003021c

000d6ec8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6ec8:	2200      	movs	r2, #0
   d6eca:	4611      	mov	r1, r2
   d6ecc:	6840      	ldr	r0, [r0, #4]
   d6ece:	f7ff bf93 	b.w	d6df8 <network_listening>

000d6ed2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6ed2:	2200      	movs	r2, #0
   d6ed4:	4611      	mov	r1, r2
   d6ed6:	6840      	ldr	r0, [r0, #4]
   d6ed8:	f7ff bf9e 	b.w	d6e18 <network_get_listen_timeout>

000d6edc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6edc:	2200      	movs	r2, #0
   d6ede:	6840      	ldr	r0, [r0, #4]
   d6ee0:	f7ff bf92 	b.w	d6e08 <network_set_listen_timeout>

000d6ee4 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6ee4:	2200      	movs	r2, #0
   d6ee6:	f081 0101 	eor.w	r1, r1, #1
   d6eea:	6840      	ldr	r0, [r0, #4]
   d6eec:	f7ff bf7c 	b.w	d6de8 <network_listen>

000d6ef0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6ef0:	2300      	movs	r3, #0
   d6ef2:	461a      	mov	r2, r3
   d6ef4:	4619      	mov	r1, r3
   d6ef6:	6840      	ldr	r0, [r0, #4]
   d6ef8:	f7ff bf6e 	b.w	d6dd8 <network_off>

000d6efc <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6efc:	2300      	movs	r3, #0
   d6efe:	461a      	mov	r2, r3
   d6f00:	4619      	mov	r1, r3
   d6f02:	6840      	ldr	r0, [r0, #4]
   d6f04:	f7ff bf60 	b.w	d6dc8 <network_on>

000d6f08 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6f08:	2200      	movs	r2, #0
   d6f0a:	4611      	mov	r1, r2
   d6f0c:	6840      	ldr	r0, [r0, #4]
   d6f0e:	f7ff bf53 	b.w	d6db8 <network_ready>

000d6f12 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6f12:	2200      	movs	r2, #0
   d6f14:	4611      	mov	r1, r2
   d6f16:	6840      	ldr	r0, [r0, #4]
   d6f18:	f7ff bf3e 	b.w	d6d98 <network_connecting>

000d6f1c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6f1c:	2200      	movs	r2, #0
   d6f1e:	2102      	movs	r1, #2
   d6f20:	6840      	ldr	r0, [r0, #4]
   d6f22:	f7ff bf41 	b.w	d6da8 <network_disconnect>

000d6f26 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6f26:	2300      	movs	r3, #0
   d6f28:	461a      	mov	r2, r3
   d6f2a:	6840      	ldr	r0, [r0, #4]
   d6f2c:	f7ff bf2c 	b.w	d6d88 <network_connect>

000d6f30 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6f30:	4b02      	ldr	r3, [pc, #8]	; (d6f3c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6f32:	2203      	movs	r2, #3
   d6f34:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6f36:	4a02      	ldr	r2, [pc, #8]	; (d6f40 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6f38:	601a      	str	r2, [r3, #0]
   d6f3a:	4770      	bx	lr
   d6f3c:	2003e394 	.word	0x2003e394
   d6f40:	000d9464 	.word	0x000d9464

000d6f44 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d6f44:	2100      	movs	r1, #0
   d6f46:	f7ff bd53 	b.w	d69f0 <HAL_SPI_Acquire>

000d6f4a <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d6f4a:	2100      	movs	r1, #0
   d6f4c:	f7ff bd58 	b.w	d6a00 <HAL_SPI_Release>

000d6f50 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6f50:	b510      	push	{r4, lr}
   d6f52:	4604      	mov	r4, r0
{
    _spi = spi;
   d6f54:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d6f56:	4608      	mov	r0, r1
   d6f58:	f7ff fd1a 	bl	d6990 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6f5c:	2300      	movs	r3, #0
   d6f5e:	6063      	str	r3, [r4, #4]
}
   d6f60:	4620      	mov	r0, r4
   d6f62:	bd10      	pop	{r4, pc}

000d6f64 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d6f64:	b510      	push	{r4, lr}
   d6f66:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d6f68:	7800      	ldrb	r0, [r0, #0]
   d6f6a:	f7ff ffeb 	bl	d6f44 <_ZN8SPIClass4lockEv.isra.0>
   d6f6e:	b948      	cbnz	r0, d6f84 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d6f70:	7820      	ldrb	r0, [r4, #0]
   d6f72:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d6f76:	f7ff fcfb 	bl	d6970 <HAL_SPI_Begin>
        unlock();
   d6f7a:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d6f80:	f7ff bfe3 	b.w	d6f4a <_ZN8SPIClass6unlockEv.isra.1>
   d6f84:	bd10      	pop	{r4, pc}

000d6f86 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d6f86:	7800      	ldrb	r0, [r0, #0]
   d6f88:	f7ff bfdf 	b.w	d6f4a <_ZN8SPIClass6unlockEv.isra.1>

000d6f8c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6f8c:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d6f8e:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6f90:	6018      	str	r0, [r3, #0]
   d6f92:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d6f94:	6818      	ldr	r0, [r3, #0]
   d6f96:	4288      	cmp	r0, r1
   d6f98:	b2e5      	uxtb	r5, r4
   d6f9a:	d906      	bls.n	d6faa <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6f9c:	3401      	adds	r4, #1
   d6f9e:	2c08      	cmp	r4, #8
   d6fa0:	d002      	beq.n	d6fa8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d6fa2:	0840      	lsrs	r0, r0, #1
   d6fa4:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d6fa6:	e7f5      	b.n	d6f94 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6fa8:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d6faa:	4b02      	ldr	r3, [pc, #8]	; (d6fb4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6fac:	5d5b      	ldrb	r3, [r3, r5]
   d6fae:	7013      	strb	r3, [r2, #0]
   d6fb0:	bd30      	pop	{r4, r5, pc}
   d6fb2:	bf00      	nop
   d6fb4:	000d9490 	.word	0x000d9490

000d6fb8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d6fb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6fbc:	4607      	mov	r7, r0
   d6fbe:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d6fc0:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d6fc2:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d6fc4:	f7ff ffbe 	bl	d6f44 <_ZN8SPIClass4lockEv.isra.0>
   d6fc8:	2800      	cmp	r0, #0
   d6fca:	db62      	blt.n	d7092 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d6fcc:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d6fce:	2214      	movs	r2, #20
   d6fd0:	2100      	movs	r1, #0
   d6fd2:	a809      	add	r0, sp, #36	; 0x24
   d6fd4:	f002 f89a 	bl	d910c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d6fd8:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d6fda:	4620      	mov	r0, r4
   d6fdc:	2200      	movs	r2, #0
   d6fde:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d6fe0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d6fe4:	f7ff fce4 	bl	d69b0 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d6fe8:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d6fec:	b154      	cbz	r4, d7004 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d6fee:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d6ff2:	b935      	cbnz	r5, d7002 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d6ff4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d6ff8:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d6ffc:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d7000:	e003      	b.n	d700a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d7002:	2400      	movs	r4, #0
   d7004:	46a1      	mov	r9, r4
   d7006:	46a0      	mov	r8, r4
   d7008:	2501      	movs	r5, #1
   d700a:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d700c:	b105      	cbz	r5, d7010 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d700e:	b9bb      	cbnz	r3, d7040 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d7010:	429d      	cmp	r5, r3
   d7012:	d10b      	bne.n	d702c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d7014:	68b2      	ldr	r2, [r6, #8]
   d7016:	4542      	cmp	r2, r8
   d7018:	d108      	bne.n	d702c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d701a:	f88d 9020 	strb.w	r9, [sp, #32]
   d701e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d7022:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d7026:	89b2      	ldrh	r2, [r6, #12]
   d7028:	4291      	cmp	r1, r2
   d702a:	d009      	beq.n	d7040 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d702c:	b153      	cbz	r3, d7044 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d702e:	2400      	movs	r4, #0
   d7030:	7838      	ldrb	r0, [r7, #0]
   d7032:	9401      	str	r4, [sp, #4]
   d7034:	9400      	str	r4, [sp, #0]
   d7036:	4623      	mov	r3, r4
   d7038:	4622      	mov	r2, r4
   d703a:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d703c:	f7ff fcd0 	bl	d69e0 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d7040:	2000      	movs	r0, #0
   d7042:	e026      	b.n	d7092 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d7044:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d7048:	68b1      	ldr	r1, [r6, #8]
   d704a:	980a      	ldr	r0, [sp, #40]	; 0x28
   d704c:	ab04      	add	r3, sp, #16
   d704e:	f10d 020f 	add.w	r2, sp, #15
   d7052:	f7ff ff9b 	bl	d6f8c <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d7056:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d7058:	b105      	cbz	r5, d705c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d705a:	b9b1      	cbnz	r1, d708a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d705c:	42a9      	cmp	r1, r5
   d705e:	d008      	beq.n	d7072 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d7060:	2400      	movs	r4, #0
   d7062:	7838      	ldrb	r0, [r7, #0]
   d7064:	9401      	str	r4, [sp, #4]
   d7066:	7b74      	ldrb	r4, [r6, #13]
   d7068:	7b33      	ldrb	r3, [r6, #12]
   d706a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d706e:	9400      	str	r4, [sp, #0]
   d7070:	e7e4      	b.n	d703c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d7072:	68b3      	ldr	r3, [r6, #8]
   d7074:	4543      	cmp	r3, r8
   d7076:	d3f3      	bcc.n	d7060 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d7078:	f88d 9020 	strb.w	r9, [sp, #32]
   d707c:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d7080:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d7084:	89b3      	ldrh	r3, [r6, #12]
   d7086:	429a      	cmp	r2, r3
   d7088:	d1ea      	bne.n	d7060 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d708a:	9b04      	ldr	r3, [sp, #16]
   d708c:	4543      	cmp	r3, r8
   d708e:	d1e7      	bne.n	d7060 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d7090:	e7d6      	b.n	d7040 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d7092:	b00f      	add	sp, #60	; 0x3c
   d7094:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7098 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d7098:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d709a:	7800      	ldrb	r0, [r0, #0]
   d709c:	f7ff fc70 	bl	d6980 <HAL_SPI_Send_Receive_Data>
}
   d70a0:	b2c0      	uxtb	r0, r0
   d70a2:	bd08      	pop	{r3, pc}

000d70a4 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d70a4:	b530      	push	{r4, r5, lr}
   d70a6:	b087      	sub	sp, #28
   d70a8:	4604      	mov	r4, r0
   d70aa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d70ac:	7800      	ldrb	r0, [r0, #0]
   d70ae:	9500      	str	r5, [sp, #0]
   d70b0:	f7ff fc86 	bl	d69c0 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d70b4:	b93d      	cbnz	r5, d70c6 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d70b6:	a902      	add	r1, sp, #8
   d70b8:	7820      	ldrb	r0, [r4, #0]
   d70ba:	f7ff fc89 	bl	d69d0 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d70be:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d70c2:	07db      	lsls	r3, r3, #31
   d70c4:	d4f7      	bmi.n	d70b6 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d70c6:	b007      	add	sp, #28
   d70c8:	bd30      	pop	{r4, r5, pc}

000d70ca <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d70ca:	7800      	ldrb	r0, [r0, #0]
   d70cc:	f7ff bc68 	b.w	d69a0 <HAL_SPI_Is_Enabled>

000d70d0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d70d0:	b510      	push	{r4, lr}
   d70d2:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d70d4:	6800      	ldr	r0, [r0, #0]
   d70d6:	b118      	cbz	r0, d70e0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d70d8:	f7ff fed6 	bl	d6e88 <free>
            wakeupSource_ = nullptr;
   d70dc:	2300      	movs	r3, #0
   d70de:	6023      	str	r3, [r4, #0]
   d70e0:	bd10      	pop	{r4, pc}

000d70e2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d70e2:	b510      	push	{r4, lr}
   d70e4:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d70e6:	f7ff fff3 	bl	d70d0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d70ea:	4620      	mov	r0, r4
   d70ec:	bd10      	pop	{r4, pc}
	...

000d70f0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d70f0:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d70f2:	4c09      	ldr	r4, [pc, #36]	; (d7118 <_GLOBAL__sub_I_System+0x28>)
   d70f4:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d70f6:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d70fa:	6020      	str	r0, [r4, #0]
   d70fc:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d70fe:	71a0      	strb	r0, [r4, #6]
   d7100:	8120      	strh	r0, [r4, #8]
   d7102:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7104:	f7ff fe14 	bl	d6d30 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d7108:	4620      	mov	r0, r4
   d710a:	4a04      	ldr	r2, [pc, #16]	; (d711c <_GLOBAL__sub_I_System+0x2c>)
   d710c:	4904      	ldr	r1, [pc, #16]	; (d7120 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d710e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d7112:	f001 b969 	b.w	d83e8 <__aeabi_atexit>
   d7116:	bf00      	nop
   d7118:	2003e39c 	.word	0x2003e39c
   d711c:	2003ddfc 	.word	0x2003ddfc
   d7120:	000d70e3 	.word	0x000d70e3

000d7124 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d7124:	b510      	push	{r4, lr}
   d7126:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d7128:	f002 f85a 	bl	d91e0 <strlen>
   d712c:	3801      	subs	r0, #1
   d712e:	1823      	adds	r3, r4, r0
   d7130:	4620      	mov	r0, r4
	while(i<j){
   d7132:	4298      	cmp	r0, r3
   d7134:	d206      	bcs.n	d7144 <_Z11str_reversePc+0x20>
		c = *i;
   d7136:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d7138:	7819      	ldrb	r1, [r3, #0]
   d713a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d713e:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d7142:	e7f6      	b.n	d7132 <_Z11str_reversePc+0xe>
   d7144:	bd10      	pop	{r4, pc}

000d7146 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d7146:	b570      	push	{r4, r5, r6, lr}
   d7148:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d714a:	1e91      	subs	r1, r2, #2
   d714c:	2922      	cmp	r1, #34	; 0x22
   d714e:	d820      	bhi.n	d7192 <ultoa+0x4c>
   d7150:	4625      	mov	r5, r4
   d7152:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d7154:	b910      	cbnz	r0, d715c <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d7156:	4423      	add	r3, r4
            *ptr++ = '0';
   d7158:	2230      	movs	r2, #48	; 0x30
   d715a:	e00e      	b.n	d717a <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d715c:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d7160:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d7164:	b2c1      	uxtb	r1, r0
   d7166:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d716a:	2809      	cmp	r0, #9
                *ptr += '0';
   d716c:	bf94      	ite	ls
   d716e:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d7170:	3157      	addhi	r1, #87	; 0x57
   d7172:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d7176:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d7178:	e7eb      	b.n	d7152 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d717a:	4299      	cmp	r1, r3
   d717c:	d202      	bcs.n	d7184 <ultoa+0x3e>
            *ptr++ = '0';
   d717e:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d7182:	e7fa      	b.n	d717a <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d7184:	2300      	movs	r3, #0
	str_reverse(buffer);
   d7186:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d7188:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d718a:	f7ff ffcb 	bl	d7124 <_Z11str_reversePc>
	return buffer;
   d718e:	4620      	mov	r0, r4
   d7190:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d7192:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d7194:	bd70      	pop	{r4, r5, r6, pc}

000d7196 <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   d7196:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   d7198:	2301      	movs	r3, #1
   d719a:	f7ff ffd4 	bl	d7146 <ultoa>
}
   d719e:	bd08      	pop	{r3, pc}

000d71a0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d71a0:	b510      	push	{r4, lr}
   d71a2:	4604      	mov	r4, r0
{
	free(buffer);
   d71a4:	6800      	ldr	r0, [r0, #0]
   d71a6:	f7ff fe6f 	bl	d6e88 <free>
}
   d71aa:	4620      	mov	r0, r4
   d71ac:	bd10      	pop	{r4, pc}

000d71ae <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d71ae:	b510      	push	{r4, lr}
   d71b0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d71b2:	6800      	ldr	r0, [r0, #0]
   d71b4:	b108      	cbz	r0, d71ba <_ZN6String10invalidateEv+0xc>
   d71b6:	f7ff fe67 	bl	d6e88 <free>
	buffer = NULL;
   d71ba:	2300      	movs	r3, #0
   d71bc:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d71be:	60a3      	str	r3, [r4, #8]
   d71c0:	6063      	str	r3, [r4, #4]
   d71c2:	bd10      	pop	{r4, pc}

000d71c4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d71c4:	b538      	push	{r3, r4, r5, lr}
   d71c6:	4604      	mov	r4, r0
   d71c8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d71ca:	6800      	ldr	r0, [r0, #0]
   d71cc:	3101      	adds	r1, #1
   d71ce:	f7ff fe63 	bl	d6e98 <realloc>
	if (newbuffer) {
   d71d2:	b110      	cbz	r0, d71da <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d71d4:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d71d8:	2001      	movs	r0, #1
	}
	return 0;
}
   d71da:	bd38      	pop	{r3, r4, r5, pc}

000d71dc <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d71dc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d71de:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d71e0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d71e2:	b113      	cbz	r3, d71ea <_ZN6String7reserveEj+0xe>
   d71e4:	6843      	ldr	r3, [r0, #4]
   d71e6:	428b      	cmp	r3, r1
   d71e8:	d207      	bcs.n	d71fa <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d71ea:	4620      	mov	r0, r4
   d71ec:	f7ff ffea 	bl	d71c4 <_ZN6String12changeBufferEj>
   d71f0:	b120      	cbz	r0, d71fc <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d71f2:	68a3      	ldr	r3, [r4, #8]
   d71f4:	b90b      	cbnz	r3, d71fa <_ZN6String7reserveEj+0x1e>
   d71f6:	6822      	ldr	r2, [r4, #0]
   d71f8:	7013      	strb	r3, [r2, #0]
   d71fa:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d71fc:	bd10      	pop	{r4, pc}

000d71fe <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d71fe:	b570      	push	{r4, r5, r6, lr}
   d7200:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d7202:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7204:	4604      	mov	r4, r0
   d7206:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d7208:	f7ff ffe8 	bl	d71dc <_ZN6String7reserveEj>
   d720c:	b918      	cbnz	r0, d7216 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d720e:	4620      	mov	r0, r4
   d7210:	f7ff ffcd 	bl	d71ae <_ZN6String10invalidateEv>
		return *this;
   d7214:	e009      	b.n	d722a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d7216:	462a      	mov	r2, r5
   d7218:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d721a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d721c:	6820      	ldr	r0, [r4, #0]
   d721e:	f001 ff6a 	bl	d90f6 <memcpy>
	buffer[len] = 0;
   d7222:	6822      	ldr	r2, [r4, #0]
   d7224:	68a3      	ldr	r3, [r4, #8]
   d7226:	2100      	movs	r1, #0
   d7228:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d722a:	4620      	mov	r0, r4
   d722c:	bd70      	pop	{r4, r5, r6, pc}

000d722e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d722e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7230:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7232:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7234:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7236:	6043      	str	r3, [r0, #4]
	len = 0;
   d7238:	6083      	str	r3, [r0, #8]
	flags = 0;
   d723a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d723c:	460d      	mov	r5, r1
   d723e:	b139      	cbz	r1, d7250 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d7240:	4608      	mov	r0, r1
   d7242:	f001 ffcd 	bl	d91e0 <strlen>
   d7246:	4629      	mov	r1, r5
   d7248:	4602      	mov	r2, r0
   d724a:	4620      	mov	r0, r4
   d724c:	f7ff ffd7 	bl	d71fe <_ZN6String4copyEPKcj>
}
   d7250:	4620      	mov	r0, r4
   d7252:	bd38      	pop	{r3, r4, r5, pc}

000d7254 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d7254:	b538      	push	{r3, r4, r5, lr}
   d7256:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d7258:	460c      	mov	r4, r1
   d725a:	b141      	cbz	r1, d726e <_ZN6StringaSEPKc+0x1a>
   d725c:	4608      	mov	r0, r1
   d725e:	f001 ffbf 	bl	d91e0 <strlen>
   d7262:	4621      	mov	r1, r4
   d7264:	4602      	mov	r2, r0
   d7266:	4628      	mov	r0, r5
   d7268:	f7ff ffc9 	bl	d71fe <_ZN6String4copyEPKcj>
   d726c:	e001      	b.n	d7272 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d726e:	f7ff ff9e 	bl	d71ae <_ZN6String10invalidateEv>

	return *this;
}
   d7272:	4628      	mov	r0, r5
   d7274:	bd38      	pop	{r3, r4, r5, pc}

000d7276 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
   d7276:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d7278:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d727a:	2300      	movs	r3, #0
   d727c:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d727e:	6063      	str	r3, [r4, #4]
	len = 0;
   d7280:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d7282:	7323      	strb	r3, [r4, #12]
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
   d7284:	4608      	mov	r0, r1
{
	init();
	char buf[9];
	utoa(value, buf, base);
   d7286:	a901      	add	r1, sp, #4
   d7288:	f7ff ff85 	bl	d7196 <utoa>
	*this = buf;
   d728c:	a901      	add	r1, sp, #4
   d728e:	4620      	mov	r0, r4
   d7290:	f7ff ffe0 	bl	d7254 <_ZN6StringaSEPKc>
}
   d7294:	4620      	mov	r0, r4
   d7296:	b004      	add	sp, #16
   d7298:	bd10      	pop	{r4, pc}

000d729a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d729a:	b510      	push	{r4, lr}
   d729c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d729e:	6800      	ldr	r0, [r0, #0]
   d72a0:	b108      	cbz	r0, d72a6 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d72a2:	f7ff fc45 	bl	d6b30 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d72a6:	4620      	mov	r0, r4
   d72a8:	bd10      	pop	{r4, pc}
	...

000d72ac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d72ac:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d72ae:	4c06      	ldr	r4, [pc, #24]	; (d72c8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d72b0:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d72b2:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d72b4:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d72b6:	f7ff fc33 	bl	d6b20 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d72ba:	4620      	mov	r0, r4
   d72bc:	4a03      	ldr	r2, [pc, #12]	; (d72cc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d72be:	4904      	ldr	r1, [pc, #16]	; (d72d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d72c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d72c4:	f001 b890 	b.w	d83e8 <__aeabi_atexit>
   d72c8:	2003e3a8 	.word	0x2003e3a8
   d72cc:	2003ddfc 	.word	0x2003ddfc
   d72d0:	000d729b 	.word	0x000d729b

000d72d4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d72d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d72d6:	4606      	mov	r6, r0
   d72d8:	460d      	mov	r5, r1
   d72da:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d72dc:	2400      	movs	r4, #0
  while (size--) {
   d72de:	42bd      	cmp	r5, r7
   d72e0:	d00c      	beq.n	d72fc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d72e2:	6833      	ldr	r3, [r6, #0]
   d72e4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d72e8:	689b      	ldr	r3, [r3, #8]
   d72ea:	4630      	mov	r0, r6
   d72ec:	4798      	blx	r3
     if (chunk>=0)
   d72ee:	2800      	cmp	r0, #0
   d72f0:	db01      	blt.n	d72f6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d72f2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d72f4:	e7f3      	b.n	d72de <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d72f6:	2c00      	cmp	r4, #0
   d72f8:	bf08      	it	eq
   d72fa:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d72fc:	4620      	mov	r0, r4
   d72fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7300 <_ZN5Print5printEPKc>:
   d7300:	b508      	push	{r3, lr}
   d7302:	f7fe fe5f 	bl	d5fc4 <_ZN5Print5writeEPKc>
   d7306:	bd08      	pop	{r3, pc}

000d7308 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d7308:	6803      	ldr	r3, [r0, #0]
   d730a:	689b      	ldr	r3, [r3, #8]
   d730c:	4718      	bx	r3

000d730e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d730e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7310:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7312:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7314:	f7ff fff8 	bl	d7308 <_ZN5Print5printEc>
  n += print('\n');
   d7318:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d731a:	4604      	mov	r4, r0
  n += print('\n');
   d731c:	4628      	mov	r0, r5
   d731e:	f7ff fff3 	bl	d7308 <_ZN5Print5printEc>
  return n;
}
   d7322:	4420      	add	r0, r4
   d7324:	bd38      	pop	{r3, r4, r5, pc}

000d7326 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d7326:	b538      	push	{r3, r4, r5, lr}
   d7328:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d732a:	f7fe fe4b 	bl	d5fc4 <_ZN5Print5writeEPKc>
   d732e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d7330:	4628      	mov	r0, r5
   d7332:	f7ff ffec 	bl	d730e <_ZN5Print7printlnEv>
  return n;
}
   d7336:	4420      	add	r0, r4
   d7338:	bd38      	pop	{r3, r4, r5, pc}

000d733a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d733a:	b530      	push	{r4, r5, lr}
   d733c:	b08b      	sub	sp, #44	; 0x2c
   d733e:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7340:	2100      	movs	r1, #0
   d7342:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7346:	2a01      	cmp	r2, #1
   d7348:	bf98      	it	ls
   d734a:	220a      	movls	r2, #10
   d734c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d7350:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d7354:	fb05 3312 	mls	r3, r5, r2, r3
   d7358:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d735c:	2b09      	cmp	r3, #9
   d735e:	bf94      	ite	ls
   d7360:	3330      	addls	r3, #48	; 0x30
   d7362:	3337      	addhi	r3, #55	; 0x37
   d7364:	b2db      	uxtb	r3, r3
   d7366:	4621      	mov	r1, r4
   d7368:	f804 3901 	strb.w	r3, [r4], #-1
   d736c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d736e:	2d00      	cmp	r5, #0
   d7370:	d1ee      	bne.n	d7350 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d7372:	f7fe fe27 	bl	d5fc4 <_ZN5Print5writeEPKc>
}
   d7376:	b00b      	add	sp, #44	; 0x2c
   d7378:	bd30      	pop	{r4, r5, pc}
	...

000d737c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d737c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7380:	ec57 6b10 	vmov	r6, r7, d0
   d7384:	4682      	mov	sl, r0
   d7386:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d7388:	ee10 2a10 	vmov	r2, s0
   d738c:	463b      	mov	r3, r7
   d738e:	ee10 0a10 	vmov	r0, s0
   d7392:	4639      	mov	r1, r7
   d7394:	f001 fde4 	bl	d8f60 <__aeabi_dcmpun>
   d7398:	b108      	cbz	r0, d739e <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d739a:	494e      	ldr	r1, [pc, #312]	; (d74d4 <_ZN5Print10printFloatEdh+0x158>)
   d739c:	e012      	b.n	d73c4 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d739e:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d73a2:	f04f 32ff 	mov.w	r2, #4294967295
   d73a6:	4b4c      	ldr	r3, [pc, #304]	; (d74d8 <_ZN5Print10printFloatEdh+0x15c>)
   d73a8:	4630      	mov	r0, r6
   d73aa:	4649      	mov	r1, r9
   d73ac:	f001 fdd8 	bl	d8f60 <__aeabi_dcmpun>
   d73b0:	b968      	cbnz	r0, d73ce <_ZN5Print10printFloatEdh+0x52>
   d73b2:	f04f 32ff 	mov.w	r2, #4294967295
   d73b6:	4b48      	ldr	r3, [pc, #288]	; (d74d8 <_ZN5Print10printFloatEdh+0x15c>)
   d73b8:	4630      	mov	r0, r6
   d73ba:	4649      	mov	r1, r9
   d73bc:	f001 fdb2 	bl	d8f24 <__aeabi_dcmple>
   d73c0:	b928      	cbnz	r0, d73ce <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d73c2:	4946      	ldr	r1, [pc, #280]	; (d74dc <_ZN5Print10printFloatEdh+0x160>)
   d73c4:	4650      	mov	r0, sl
   d73c6:	f7fe fdfd 	bl	d5fc4 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d73ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d73ce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d73d2:	4b43      	ldr	r3, [pc, #268]	; (d74e0 <_ZN5Print10printFloatEdh+0x164>)
   d73d4:	4630      	mov	r0, r6
   d73d6:	4639      	mov	r1, r7
   d73d8:	f001 fdb8 	bl	d8f4c <__aeabi_dcmpgt>
   d73dc:	b108      	cbz	r0, d73e2 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d73de:	4941      	ldr	r1, [pc, #260]	; (d74e4 <_ZN5Print10printFloatEdh+0x168>)
   d73e0:	e7f0      	b.n	d73c4 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d73e2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d73e6:	4b40      	ldr	r3, [pc, #256]	; (d74e8 <_ZN5Print10printFloatEdh+0x16c>)
   d73e8:	4630      	mov	r0, r6
   d73ea:	4639      	mov	r1, r7
   d73ec:	f001 fd90 	bl	d8f10 <__aeabi_dcmplt>
   d73f0:	2800      	cmp	r0, #0
   d73f2:	d1f4      	bne.n	d73de <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d73f4:	2200      	movs	r2, #0
   d73f6:	2300      	movs	r3, #0
   d73f8:	4630      	mov	r0, r6
   d73fa:	4639      	mov	r1, r7
   d73fc:	f001 fd88 	bl	d8f10 <__aeabi_dcmplt>
   d7400:	b140      	cbz	r0, d7414 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d7402:	212d      	movs	r1, #45	; 0x2d
   d7404:	4650      	mov	r0, sl
   d7406:	f7ff ff7f 	bl	d7308 <_ZN5Print5printEc>
     number = -number;
   d740a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d740e:	4604      	mov	r4, r0
     number = -number;
   d7410:	461f      	mov	r7, r3
   d7412:	e000      	b.n	d7416 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d7414:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d7416:	4935      	ldr	r1, [pc, #212]	; (d74ec <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d7418:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d741c:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d741e:	fa5f f388 	uxtb.w	r3, r8
   d7422:	429d      	cmp	r5, r3
   d7424:	d906      	bls.n	d7434 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d7426:	2200      	movs	r2, #0
   d7428:	4b31      	ldr	r3, [pc, #196]	; (d74f0 <_ZN5Print10printFloatEdh+0x174>)
   d742a:	f001 fc29 	bl	d8c80 <__aeabi_ddiv>
   d742e:	f108 0801 	add.w	r8, r8, #1
   d7432:	e7f4      	b.n	d741e <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d7434:	4632      	mov	r2, r6
   d7436:	463b      	mov	r3, r7
   d7438:	f001 f946 	bl	d86c8 <__adddf3>
   d743c:	460f      	mov	r7, r1
   d743e:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d7440:	f001 fdcc 	bl	d8fdc <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d7444:	220a      	movs	r2, #10
   d7446:	4601      	mov	r1, r0
   d7448:	4680      	mov	r8, r0
   d744a:	4650      	mov	r0, sl
   d744c:	f7ff ff75 	bl	d733a <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d7450:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d7452:	b3e5      	cbz	r5, d74ce <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d7454:	4640      	mov	r0, r8
   d7456:	f001 fa73 	bl	d8940 <__aeabi_ui2d>
   d745a:	4602      	mov	r2, r0
   d745c:	460b      	mov	r3, r1
   d745e:	4630      	mov	r0, r6
   d7460:	4639      	mov	r1, r7
   d7462:	f001 f92f 	bl	d86c4 <__aeabi_dsub>
   d7466:	4606      	mov	r6, r0
   d7468:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d746a:	4650      	mov	r0, sl
   d746c:	4921      	ldr	r1, [pc, #132]	; (d74f4 <_ZN5Print10printFloatEdh+0x178>)
   d746e:	f7fe fda9 	bl	d5fc4 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d7472:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d7474:	2200      	movs	r2, #0
   d7476:	4b1e      	ldr	r3, [pc, #120]	; (d74f0 <_ZN5Print10printFloatEdh+0x174>)
   d7478:	4630      	mov	r0, r6
   d747a:	4639      	mov	r1, r7
   d747c:	f001 fad6 	bl	d8a2c <__aeabi_dmul>
   d7480:	4606      	mov	r6, r0
   d7482:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d7484:	f001 fd82 	bl	d8f8c <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d7488:	f1b0 0900 	subs.w	r9, r0, #0
   d748c:	da07      	bge.n	d749e <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d748e:	212d      	movs	r1, #45	; 0x2d
   d7490:	4650      	mov	r0, sl
   d7492:	f7ff ff39 	bl	d7308 <_ZN5Print5printEc>
            val = -n;
   d7496:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d749a:	4680      	mov	r8, r0
   d749c:	e002      	b.n	d74a4 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d749e:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d74a0:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d74a4:	220a      	movs	r2, #10
   d74a6:	4650      	mov	r0, sl
   d74a8:	f7ff ff47 	bl	d733a <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d74ac:	4440      	add	r0, r8
   d74ae:	4404      	add	r4, r0
    remainder -= toPrint;
   d74b0:	4648      	mov	r0, r9
   d74b2:	f001 fa55 	bl	d8960 <__aeabi_i2d>
   d74b6:	4602      	mov	r2, r0
   d74b8:	460b      	mov	r3, r1
   d74ba:	4630      	mov	r0, r6
   d74bc:	4639      	mov	r1, r7
   d74be:	f001 f901 	bl	d86c4 <__aeabi_dsub>
   d74c2:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d74c4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d74c8:	4606      	mov	r6, r0
   d74ca:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d74cc:	d1d2      	bne.n	d7474 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d74ce:	4620      	mov	r0, r4
   d74d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d74d4:	000d9498 	.word	0x000d9498
   d74d8:	7fefffff 	.word	0x7fefffff
   d74dc:	000d94a2 	.word	0x000d94a2
   d74e0:	41efffff 	.word	0x41efffff
   d74e4:	000d949c 	.word	0x000d949c
   d74e8:	c1efffff 	.word	0xc1efffff
   d74ec:	3fe00000 	.word	0x3fe00000
   d74f0:	40240000 	.word	0x40240000
   d74f4:	000d94a0 	.word	0x000d94a0

000d74f8 <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d74f8:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d74fa:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d74fc:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d74fe:	f7ff ff3d 	bl	d737c <_ZN5Print10printFloatEdh>
   d7502:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d7504:	4628      	mov	r0, r5
   d7506:	f7ff ff02 	bl	d730e <_ZN5Print7printlnEv>
  return n;
}
   d750a:	4420      	add	r0, r4
   d750c:	bd38      	pop	{r3, r4, r5, pc}

000d750e <_ZN5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d750e:	b538      	push	{r3, r4, r5, lr}
   d7510:	4604      	mov	r4, r0
    return println((double)num, digits);
   d7512:	ee10 0a10 	vmov	r0, s0
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d7516:	460d      	mov	r5, r1
    return println((double)num, digits);
   d7518:	f001 fa34 	bl	d8984 <__aeabi_f2d>
   d751c:	ec41 0b10 	vmov	d0, r0, r1
   d7520:	4629      	mov	r1, r5
   d7522:	4620      	mov	r0, r4
}
   d7524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return n;
}

size_t Print::println(float num, int digits)
{
    return println((double)num, digits);
   d7528:	f7ff bfe6 	b.w	d74f8 <_ZN5Print7printlnEdi>

000d752c <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d752c:	b40c      	push	{r2, r3}
   d752e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7532:	b087      	sub	sp, #28
   d7534:	af00      	add	r7, sp, #0
   d7536:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d753a:	4605      	mov	r5, r0
   d753c:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d7540:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7542:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d7544:	4623      	mov	r3, r4
   d7546:	464a      	mov	r2, r9
   d7548:	2114      	movs	r1, #20
   d754a:	1d38      	adds	r0, r7, #4
   d754c:	f7ff fcb4 	bl	d6eb8 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d7550:	2813      	cmp	r0, #19
   d7552:	d805      	bhi.n	d7560 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7554:	1d39      	adds	r1, r7, #4
   d7556:	4628      	mov	r0, r5
   d7558:	f7fe fd34 	bl	d5fc4 <_ZN5Print5writeEPKc>
   d755c:	4604      	mov	r4, r0
   d755e:	e013      	b.n	d7588 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7560:	f100 0308 	add.w	r3, r0, #8
   d7564:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d7568:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d756a:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d756e:	1c41      	adds	r1, r0, #1
   d7570:	4623      	mov	r3, r4
   d7572:	464a      	mov	r2, r9
   d7574:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d7576:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d7578:	f7ff fc9e 	bl	d6eb8 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d757c:	4669      	mov	r1, sp
   d757e:	4628      	mov	r0, r5
   d7580:	f7fe fd20 	bl	d5fc4 <_ZN5Print5writeEPKc>
   d7584:	4604      	mov	r4, r0
   d7586:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d7588:	b11e      	cbz	r6, d7592 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d758a:	4628      	mov	r0, r5
   d758c:	f7ff febf 	bl	d730e <_ZN5Print7printlnEv>
   d7590:	4404      	add	r4, r0
    return n;
}
   d7592:	4620      	mov	r0, r4
   d7594:	371c      	adds	r7, #28
   d7596:	46bd      	mov	sp, r7
   d7598:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d759c:	b002      	add	sp, #8
   d759e:	4770      	bx	lr

000d75a0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d75a0:	4b01      	ldr	r3, [pc, #4]	; (d75a8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d75a2:	4a02      	ldr	r2, [pc, #8]	; (d75ac <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d75a4:	601a      	str	r2, [r3, #0]
   d75a6:	4770      	bx	lr
   d75a8:	2003e3ac 	.word	0x2003e3ac
   d75ac:	000d9519 	.word	0x000d9519

000d75b0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d75b0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d75b2:	2000      	movs	r0, #0
   d75b4:	f7ff fc50 	bl	d6e58 <spark_sync_time_pending>
   d75b8:	b128      	cbz	r0, d75c6 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d75ba:	f7ff fc3d 	bl	d6e38 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d75be:	f080 0001 	eor.w	r0, r0, #1
   d75c2:	b2c0      	uxtb	r0, r0
   d75c4:	bd08      	pop	{r3, pc}
   d75c6:	2001      	movs	r0, #1
    }
   d75c8:	bd08      	pop	{r3, pc}

000d75ca <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d75ca:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d75cc:	2000      	movs	r0, #0
   d75ce:	f7ff fa57 	bl	d6a80 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d75d2:	4604      	mov	r4, r0
   d75d4:	b968      	cbnz	r0, d75f2 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d75d6:	f7ff fba3 	bl	d6d20 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d75da:	2801      	cmp	r0, #1
   d75dc:	d10b      	bne.n	d75f6 <_ZN9TimeClass7isValidEv+0x2c>
   d75de:	4620      	mov	r0, r4
   d75e0:	f7ff fbb6 	bl	d6d50 <system_thread_get_state>
   d75e4:	b938      	cbnz	r0, d75f6 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d75e6:	f7ff ffe3 	bl	d75b0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d75ea:	b930      	cbnz	r0, d75fa <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d75ec:	f7ff fc1c 	bl	d6e28 <spark_process>
   d75f0:	e7f9      	b.n	d75e6 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d75f2:	2001      	movs	r0, #1
   d75f4:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d75f6:	2000      	movs	r0, #0
   d75f8:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d75fa:	f7ff ffd9 	bl	d75b0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d75fe:	2000      	movs	r0, #0
   d7600:	f7ff fa3e 	bl	d6a80 <HAL_RTC_Time_Is_Valid>
   d7604:	3000      	adds	r0, #0
   d7606:	bf18      	it	ne
   d7608:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d760a:	bd10      	pop	{r4, pc}

000d760c <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d760c:	b508      	push	{r3, lr}
    (void)isValid();
   d760e:	f7ff ffdc 	bl	d75ca <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d7612:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d7616:	f7ff ba13 	b.w	d6a40 <HAL_RTC_Get_UnixTime>
	...

000d761c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d761c:	4b02      	ldr	r3, [pc, #8]	; (d7628 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d761e:	681a      	ldr	r2, [r3, #0]
   d7620:	4b02      	ldr	r3, [pc, #8]	; (d762c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7622:	601a      	str	r2, [r3, #0]
   d7624:	4770      	bx	lr
   d7626:	bf00      	nop
   d7628:	2003dd94 	.word	0x2003dd94
   d762c:	2003e3b0 	.word	0x2003e3b0

000d7630 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7630:	b510      	push	{r4, lr}
   d7632:	4604      	mov	r4, r0
   d7634:	f7fd f8b6 	bl	d47a4 <_ZNSt14_Function_baseD1Ev>
   d7638:	4620      	mov	r0, r4
   d763a:	bd10      	pop	{r4, pc}

000d763c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d763c:	4803      	ldr	r0, [pc, #12]	; (d764c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d763e:	4a04      	ldr	r2, [pc, #16]	; (d7650 <_GLOBAL__sub_I_RGB+0x14>)
   d7640:	4904      	ldr	r1, [pc, #16]	; (d7654 <_GLOBAL__sub_I_RGB+0x18>)
   d7642:	2300      	movs	r3, #0
   d7644:	6083      	str	r3, [r0, #8]
   d7646:	f000 becf 	b.w	d83e8 <__aeabi_atexit>
   d764a:	bf00      	nop
   d764c:	2003e3b4 	.word	0x2003e3b4
   d7650:	2003ddfc 	.word	0x2003ddfc
   d7654:	000d7631 	.word	0x000d7631

000d7658 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d7658:	7d00      	ldrb	r0, [r0, #20]
   d765a:	4770      	bx	lr

000d765c <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d765c:	7d03      	ldrb	r3, [r0, #20]
   d765e:	b11b      	cbz	r3, d7668 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d7660:	6983      	ldr	r3, [r0, #24]
   d7662:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d7666:	d102      	bne.n	d766e <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d7668:	ed9f 0a05 	vldr	s0, [pc, #20]	; d7680 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d766c:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d766e:	ee07 3a90 	vmov	s15, r3
   d7672:	ed9f 7a04 	vldr	s14, [pc, #16]	; d7684 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d7676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d767a:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d767e:	4770      	bx	lr
   d7680:	00000000 	.word	0x00000000
   d7684:	42c80000 	.word	0x42c80000

000d7688 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d7688:	7d03      	ldrb	r3, [r0, #20]
   d768a:	b11b      	cbz	r3, d7694 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d768c:	6a03      	ldr	r3, [r0, #32]
   d768e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d7692:	d102      	bne.n	d769a <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d7694:	ed9f 0a05 	vldr	s0, [pc, #20]	; d76ac <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d7698:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d769a:	ee07 3a90 	vmov	s15, r3
   d769e:	ed9f 7a04 	vldr	s14, [pc, #16]	; d76b0 <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d76a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d76a6:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d76aa:	4770      	bx	lr
   d76ac:	00000000 	.word	0x00000000
   d76b0:	42c80000 	.word	0x42c80000

000d76b4 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d76b4:	7d03      	ldrb	r3, [r0, #20]
   d76b6:	b17b      	cbz	r3, d76d8 <_ZNK14CellularSignal10getQualityEv+0x24>
   d76b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d76ba:	2b00      	cmp	r3, #0
   d76bc:	db0c      	blt.n	d76d8 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d76be:	ee07 3a90 	vmov	s15, r3
   d76c2:	eddf 6a07 	vldr	s13, [pc, #28]	; d76e0 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d76c6:	ed9f 0a07 	vldr	s0, [pc, #28]	; d76e4 <_ZNK14CellularSignal10getQualityEv+0x30>
   d76ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d76ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d76d2:	ee27 0a80 	vmul.f32	s0, s15, s0
   d76d6:	4770      	bx	lr
    }

    return -1.0f;
   d76d8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d76dc:	4770      	bx	lr
   d76de:	bf00      	nop
   d76e0:	477fff00 	.word	0x477fff00
   d76e4:	42c80000 	.word	0x42c80000

000d76e8 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d76e8:	7d03      	ldrb	r3, [r0, #20]
   d76ea:	b17b      	cbz	r3, d770c <_ZNK14CellularSignal11getStrengthEv+0x24>
   d76ec:	69c3      	ldr	r3, [r0, #28]
   d76ee:	2b00      	cmp	r3, #0
   d76f0:	db0c      	blt.n	d770c <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d76f2:	ee07 3a90 	vmov	s15, r3
   d76f6:	eddf 6a07 	vldr	s13, [pc, #28]	; d7714 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d76fa:	ed9f 0a07 	vldr	s0, [pc, #28]	; d7718 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d76fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d7702:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d7706:	ee27 0a80 	vmul.f32	s0, s15, s0
   d770a:	4770      	bx	lr
    }

    return -1.0f;
   d770c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d7710:	4770      	bx	lr
   d7712:	bf00      	nop
   d7714:	477fff00 	.word	0x477fff00
   d7718:	42c80000 	.word	0x42c80000

000d771c <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d771c:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d771e:	460d      	mov	r5, r1
   d7720:	f100 0410 	add.w	r4, r0, #16
   d7724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7728:	e895 0003 	ldmia.w	r5, {r0, r1}
   d772c:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d7730:	2001      	movs	r0, #1
   d7732:	bd30      	pop	{r4, r5, pc}

000d7734 <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d7734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7738:	4607      	mov	r7, r0
   d773a:	460c      	mov	r4, r1
{
    if (base == 0) {
   d773c:	4615      	mov	r5, r2
   d773e:	b92a      	cbnz	r2, d774c <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d7740:	6803      	ldr	r3, [r0, #0]
   d7742:	b2c9      	uxtb	r1, r1
   d7744:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d7746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d774a:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d774c:	2900      	cmp	r1, #0
   d774e:	da07      	bge.n	d7760 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d7750:	2a0a      	cmp	r2, #10
   d7752:	d105      	bne.n	d7760 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d7754:	212d      	movs	r1, #45	; 0x2d
   d7756:	f7ff fdd7 	bl	d7308 <_ZN5Print5printEc>
            val = -n;
   d775a:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d775c:	4606      	mov	r6, r0
            val = -n;
   d775e:	e001      	b.n	d7764 <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d7760:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d7762:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d7764:	b2ea      	uxtb	r2, r5
   d7766:	4638      	mov	r0, r7
   d7768:	f7ff fde7 	bl	d733a <_ZN5Print11printNumberEmh>
    }
}
   d776c:	4430      	add	r0, r6
   d776e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7772 <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
   d7772:	b570      	push	{r4, r5, r6, lr}
   d7774:	460d      	mov	r5, r1
   d7776:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d7778:	220a      	movs	r2, #10
   d777a:	6881      	ldr	r1, [r0, #8]
   d777c:	4628      	mov	r0, r5
   d777e:	f7ff ffd9 	bl	d7734 <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
   d7782:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d7784:	4604      	mov	r4, r0
    n += p.print(',');
   d7786:	4628      	mov	r0, r5
   d7788:	f7ff fdbe 	bl	d7308 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d778c:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d778e:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d7790:	68f1      	ldr	r1, [r6, #12]
   d7792:	4628      	mov	r0, r5
   d7794:	f7ff ffce 	bl	d7734 <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
   d7798:	4420      	add	r0, r4
   d779a:	bd70      	pop	{r4, r5, r6, pc}

000d779c <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d779c:	f1a0 0004 	sub.w	r0, r0, #4
   d77a0:	f7ff bfe7 	b.w	d7772 <_ZNK14CellularSignal7printToER5Print>

000d77a4 <_ZN6detail9_getVCellEhh>:
namespace detail {
	// Converts VCELL_REGISTER reading to Battery Voltage
	float _getVCell(byte MSB, byte LSB) {
		// VCELL = 12-bit value, 1.25mV (1V/800) per bit
		float value = (float)((MSB << 4) | (LSB >> 4));
		return value / 800.0;
   d77a4:	0909      	lsrs	r1, r1, #4
   d77a6:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
   d77aa:	ee07 0a90 	vmov	s15, r0
   d77ae:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
	}
   d77b2:	eddf 7a02 	vldr	s15, [pc, #8]	; d77bc <_ZN6detail9_getVCellEhh+0x18>
   d77b6:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d77ba:	4770      	bx	lr
   d77bc:	44480000 	.word	0x44480000

000d77c0 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d77c0:	6800      	ldr	r0, [r0, #0]
   d77c2:	f000 bb8a 	b.w	d7eda <_ZN7TwoWire4lockEv>

000d77c6 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d77c6:	b510      	push	{r4, lr}
   d77c8:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d77ca:	6001      	str	r1, [r0, #0]
   d77cc:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d77ce:	b10a      	cbz	r2, d77d4 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d77d0:	f7ff fff6 	bl	d77c0 <_ZN9FuelGauge4lockEv>
    }
}
   d77d4:	4620      	mov	r0, r4
   d77d6:	bd10      	pop	{r4, pc}

000d77d8 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d77d8:	b538      	push	{r3, r4, r5, lr}
   d77da:	4604      	mov	r4, r0
   d77dc:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d77de:	f000 fddd 	bl	d839c <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d77e2:	462a      	mov	r2, r5
   d77e4:	4601      	mov	r1, r0
   d77e6:	4620      	mov	r0, r4
   d77e8:	f7ff ffed 	bl	d77c6 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d77ec:	4620      	mov	r0, r4
   d77ee:	bd38      	pop	{r3, r4, r5, pc}

000d77f0 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d77f0:	6800      	ldr	r0, [r0, #0]
   d77f2:	f000 bb7b 	b.w	d7eec <_ZN7TwoWire6unlockEv>

000d77f6 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d77f6:	b510      	push	{r4, lr}
{
    if (lock_) {
   d77f8:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d77fa:	4604      	mov	r4, r0
{
    if (lock_) {
   d77fc:	b10b      	cbz	r3, d7802 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d77fe:	f7ff fff7 	bl	d77f0 <_ZN9FuelGauge6unlockEv>
    }
}
   d7802:	4620      	mov	r0, r4
   d7804:	bd10      	pop	{r4, pc}

000d7806 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d7806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7808:	4604      	mov	r4, r0
   d780a:	4616      	mov	r6, r2
   d780c:	461d      	mov	r5, r3
   d780e:	460f      	mov	r7, r1
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d7810:	f7ff ffd6 	bl	d77c0 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   d7814:	6820      	ldr	r0, [r4, #0]
   d7816:	2136      	movs	r1, #54	; 0x36
   d7818:	f000 fb54 	bl	d7ec4 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
   d781c:	6820      	ldr	r0, [r4, #0]
   d781e:	6803      	ldr	r3, [r0, #0]
   d7820:	4639      	mov	r1, r7
   d7822:	689b      	ldr	r3, [r3, #8]
   d7824:	4798      	blx	r3
    i2c_.endTransmission(true);
   d7826:	2101      	movs	r1, #1
   d7828:	6820      	ldr	r0, [r4, #0]
   d782a:	f000 fb4e 	bl	d7eca <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
   d782e:	2202      	movs	r2, #2
   d7830:	2136      	movs	r1, #54	; 0x36
   d7832:	2301      	movs	r3, #1
   d7834:	6820      	ldr	r0, [r4, #0]
   d7836:	f000 fb2f 	bl	d7e98 <_ZN7TwoWire11requestFromEhjh>
    MSB = i2c_.read();
   d783a:	6820      	ldr	r0, [r4, #0]
   d783c:	6803      	ldr	r3, [r0, #0]
   d783e:	695b      	ldr	r3, [r3, #20]
   d7840:	4798      	blx	r3
   d7842:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
   d7844:	6820      	ldr	r0, [r4, #0]
   d7846:	6803      	ldr	r3, [r0, #0]
   d7848:	695b      	ldr	r3, [r3, #20]
   d784a:	4798      	blx	r3
   d784c:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d784e:	4620      	mov	r0, r4
}
   d7850:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d7854:	f7ff bfcc 	b.w	d77f0 <_ZN9FuelGauge6unlockEv>

000d7858 <_ZN9FuelGauge8getVCellEv>:
		return MSB + decimal;
	}
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {
   d7858:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d785a:	ab02      	add	r3, sp, #8
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {

	byte MSB = 0;
   d785c:	2200      	movs	r2, #0
   d785e:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;
   d7862:	f803 2d01 	strb.w	r2, [r3, #-1]!

	readRegister(VCELL_REGISTER, MSB, LSB);
   d7866:	2102      	movs	r1, #2
   d7868:	f10d 0206 	add.w	r2, sp, #6
   d786c:	f7ff ffcb 	bl	d7806 <_ZN9FuelGauge12readRegisterEhRhS0_>
	return detail::_getVCell(MSB, LSB);
   d7870:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d7874:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   d7878:	b003      	add	sp, #12
   d787a:	f85d eb04 	ldr.w	lr, [sp], #4

	byte MSB = 0;
	byte LSB = 0;

	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
   d787e:	f7ff bf91 	b.w	d77a4 <_ZN6detail9_getVCellEhh>
	...

000d7884 <_ZN9FuelGauge6getSoCEv>:
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
   d7884:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d7886:	ab02      	add	r3, sp, #8
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d7888:	2200      	movs	r2, #0
	byte LSB = 0;
   d788a:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d788e:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
   d7892:	2104      	movs	r1, #4
   d7894:	f10d 0206 	add.w	r2, sp, #6
   d7898:	f7ff ffb5 	bl	d7806 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d789c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d78a0:	f001 f85e 	bl	d8960 <__aeabi_i2d>
   d78a4:	2200      	movs	r2, #0
   d78a6:	4b09      	ldr	r3, [pc, #36]	; (d78cc <_ZN9FuelGauge6getSoCEv+0x48>)
   d78a8:	f001 f8c0 	bl	d8a2c <__aeabi_dmul>
   d78ac:	f001 fbb6 	bl	d901c <__aeabi_d2f>
   d78b0:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d78b4:	ee00 3a10 	vmov	s0, r3
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d78b8:	ee07 0a90 	vmov	s15, r0
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d78bc:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d78c0:	ee37 0a80 	vadd.f32	s0, s15, s0
   d78c4:	b003      	add	sp, #12
   d78c6:	f85d fb04 	ldr.w	pc, [sp], #4
   d78ca:	bf00      	nop
   d78cc:	3f700000 	.word	0x3f700000

000d78d0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d78d0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d78d2:	4b0c      	ldr	r3, [pc, #48]	; (d7904 <serialEventRun+0x34>)
   d78d4:	b133      	cbz	r3, d78e4 <serialEventRun+0x14>
   d78d6:	f000 f957 	bl	d7b88 <_Z16_fetch_usbserialv>
   d78da:	6803      	ldr	r3, [r0, #0]
   d78dc:	691b      	ldr	r3, [r3, #16]
   d78de:	4798      	blx	r3
   d78e0:	2800      	cmp	r0, #0
   d78e2:	dc09      	bgt.n	d78f8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d78e4:	4b08      	ldr	r3, [pc, #32]	; (d7908 <serialEventRun+0x38>)
   d78e6:	b163      	cbz	r3, d7902 <serialEventRun+0x32>
   d78e8:	f000 fa56 	bl	d7d98 <_Z22__fetch_global_Serial1v>
   d78ec:	6803      	ldr	r3, [r0, #0]
   d78ee:	691b      	ldr	r3, [r3, #16]
   d78f0:	4798      	blx	r3
   d78f2:	2800      	cmp	r0, #0
   d78f4:	dc03      	bgt.n	d78fe <serialEventRun+0x2e>
   d78f6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d78f8:	f3af 8000 	nop.w
   d78fc:	e7f2      	b.n	d78e4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d78fe:	f3af 8000 	nop.w
   d7902:	bd08      	pop	{r3, pc}
	...

000d790c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d790c:	b508      	push	{r3, lr}
	serialEventRun();
   d790e:	f7ff ffdf 	bl	d78d0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7912:	f7ff f88d 	bl	d6a30 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7916:	4b01      	ldr	r3, [pc, #4]	; (d791c <_post_loop+0x10>)
   d7918:	6018      	str	r0, [r3, #0]
   d791a:	bd08      	pop	{r3, pc}
   d791c:	2003e710 	.word	0x2003e710

000d7920 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7920:	4802      	ldr	r0, [pc, #8]	; (d792c <_Z33system_initialize_user_backup_ramv+0xc>)
   d7922:	4a03      	ldr	r2, [pc, #12]	; (d7930 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7924:	4903      	ldr	r1, [pc, #12]	; (d7934 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7926:	1a12      	subs	r2, r2, r0
   d7928:	f001 bbe5 	b.w	d90f6 <memcpy>
   d792c:	2003f400 	.word	0x2003f400
   d7930:	2003f404 	.word	0x2003f404
   d7934:	000d9820 	.word	0x000d9820

000d7938 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7938:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d793a:	2300      	movs	r3, #0
   d793c:	9300      	str	r3, [sp, #0]
   d793e:	461a      	mov	r2, r3
   d7940:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7944:	f7ff fa16 	bl	d6d74 <system_ctrl_set_result>
}
   d7948:	b003      	add	sp, #12
   d794a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7950 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7950:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7952:	8843      	ldrh	r3, [r0, #2]
   d7954:	2b0a      	cmp	r3, #10
   d7956:	d008      	beq.n	d796a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7958:	2b50      	cmp	r3, #80	; 0x50
   d795a:	d109      	bne.n	d7970 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d795c:	4b09      	ldr	r3, [pc, #36]	; (d7984 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d795e:	681b      	ldr	r3, [r3, #0]
   d7960:	b13b      	cbz	r3, d7972 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7962:	b003      	add	sp, #12
   d7964:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7968:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d796a:	f7ff ffe5 	bl	d7938 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d796e:	e006      	b.n	d797e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7970:	2300      	movs	r3, #0
   d7972:	9300      	str	r3, [sp, #0]
   d7974:	461a      	mov	r2, r3
   d7976:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d797a:	f7ff f9fb 	bl	d6d74 <system_ctrl_set_result>
        break;
    }
}
   d797e:	b003      	add	sp, #12
   d7980:	f85d fb04 	ldr.w	pc, [sp], #4
   d7984:	2003e3c4 	.word	0x2003e3c4

000d7988 <module_user_init_hook>:

void module_user_init_hook()
{
   d7988:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d798a:	4c10      	ldr	r4, [pc, #64]	; (d79cc <module_user_init_hook+0x44>)
   d798c:	4d10      	ldr	r5, [pc, #64]	; (d79d0 <module_user_init_hook+0x48>)
   d798e:	6823      	ldr	r3, [r4, #0]
   d7990:	42ab      	cmp	r3, r5
   d7992:	4b10      	ldr	r3, [pc, #64]	; (d79d4 <module_user_init_hook+0x4c>)
   d7994:	bf0c      	ite	eq
   d7996:	2201      	moveq	r2, #1
   d7998:	2200      	movne	r2, #0
   d799a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d799c:	d002      	beq.n	d79a4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d799e:	f7ff ffbf 	bl	d7920 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d79a2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d79a4:	f7ff f834 	bl	d6a10 <HAL_RNG_GetRandomNumber>
   d79a8:	4604      	mov	r4, r0
    srand(seed);
   d79aa:	f001 fbb7 	bl	d911c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d79ae:	4b0a      	ldr	r3, [pc, #40]	; (d79d8 <module_user_init_hook+0x50>)
   d79b0:	b113      	cbz	r3, d79b8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d79b2:	4620      	mov	r0, r4
   d79b4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d79b8:	2100      	movs	r1, #0
   d79ba:	4807      	ldr	r0, [pc, #28]	; (d79d8 <module_user_init_hook+0x50>)
   d79bc:	f7ff fa54 	bl	d6e68 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d79c0:	2100      	movs	r1, #0
   d79c2:	4806      	ldr	r0, [pc, #24]	; (d79dc <module_user_init_hook+0x54>)
}
   d79c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d79c8:	f7ff b9ca 	b.w	d6d60 <system_ctrl_set_app_request_handler>
   d79cc:	2003f400 	.word	0x2003f400
   d79d0:	9a271c1e 	.word	0x9a271c1e
   d79d4:	2003e3c8 	.word	0x2003e3c8
   d79d8:	00000000 	.word	0x00000000
   d79dc:	000d7951 	.word	0x000d7951

000d79e0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d79e0:	4770      	bx	lr

000d79e2 <_ZN9IPAddressD0Ev>:
   d79e2:	b510      	push	{r4, lr}
   d79e4:	2118      	movs	r1, #24
   d79e6:	4604      	mov	r4, r0
   d79e8:	f000 fd0c 	bl	d8404 <_ZdlPvj>
   d79ec:	4620      	mov	r0, r4
   d79ee:	bd10      	pop	{r4, pc}

000d79f0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d79f0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d79f2:	7d03      	ldrb	r3, [r0, #20]
   d79f4:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d79f6:	b08d      	sub	sp, #52	; 0x34
   d79f8:	460e      	mov	r6, r1
   d79fa:	f100 0704 	add.w	r7, r0, #4
   d79fe:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7a02:	d002      	beq.n	d7a0a <_ZNK9IPAddress7printToER5Print+0x1a>
   d7a04:	f100 0508 	add.w	r5, r0, #8
   d7a08:	e018      	b.n	d7a3c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7a0a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7a0c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7a0e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7a12:	232f      	movs	r3, #47	; 0x2f
   d7a14:	462a      	mov	r2, r5
   d7a16:	200a      	movs	r0, #10
   d7a18:	f7ff f89a 	bl	d6b50 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7a1c:	4628      	mov	r0, r5
   d7a1e:	f001 fbdf 	bl	d91e0 <strlen>
   d7a22:	6833      	ldr	r3, [r6, #0]
   d7a24:	4602      	mov	r2, r0
   d7a26:	68db      	ldr	r3, [r3, #12]
   d7a28:	4629      	mov	r1, r5
   d7a2a:	4630      	mov	r0, r6
   d7a2c:	4798      	blx	r3
   d7a2e:	e00f      	b.n	d7a50 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d7a30:	b124      	cbz	r4, d7a3c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d7a32:	212e      	movs	r1, #46	; 0x2e
   d7a34:	4630      	mov	r0, r6
   d7a36:	f7ff fc67 	bl	d7308 <_ZN5Print5printEc>
   d7a3a:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d7a3c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7a40:	220a      	movs	r2, #10
   d7a42:	4630      	mov	r0, r6
   d7a44:	f7ff fc79 	bl	d733a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7a48:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7a4a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7a4c:	d1f0      	bne.n	d7a30 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7a4e:	4620      	mov	r0, r4
    }
    return n;
}
   d7a50:	b00d      	add	sp, #52	; 0x34
   d7a52:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7a54 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d7a54:	b510      	push	{r4, lr}
   d7a56:	4b05      	ldr	r3, [pc, #20]	; (d7a6c <_ZN9IPAddressC1Ev+0x18>)
   d7a58:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7a5a:	2211      	movs	r2, #17
   d7a5c:	f840 3b04 	str.w	r3, [r0], #4
   d7a60:	2100      	movs	r1, #0
   d7a62:	f001 fb53 	bl	d910c <memset>
{
    clear();
}
   d7a66:	4620      	mov	r0, r4
   d7a68:	bd10      	pop	{r4, pc}
   d7a6a:	bf00      	nop
   d7a6c:	000d95ec 	.word	0x000d95ec

000d7a70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d7a70:	4603      	mov	r3, r0
   d7a72:	4a07      	ldr	r2, [pc, #28]	; (d7a90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7a74:	b510      	push	{r4, lr}
   d7a76:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d7a7a:	f101 0210 	add.w	r2, r1, #16
   d7a7e:	f851 4b04 	ldr.w	r4, [r1], #4
   d7a82:	f843 4b04 	str.w	r4, [r3], #4
   d7a86:	4291      	cmp	r1, r2
   d7a88:	d1f9      	bne.n	d7a7e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7a8a:	780a      	ldrb	r2, [r1, #0]
   d7a8c:	701a      	strb	r2, [r3, #0]
}
   d7a8e:	bd10      	pop	{r4, pc}
   d7a90:	000d95ec 	.word	0x000d95ec

000d7a94 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d7a94:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7a96:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7a9a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7a9e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7aa2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d7aa6:	2304      	movs	r3, #4
   d7aa8:	6041      	str	r1, [r0, #4]
   d7aaa:	7503      	strb	r3, [r0, #20]
   d7aac:	bd10      	pop	{r4, pc}

000d7aae <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d7aae:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7ab0:	780d      	ldrb	r5, [r1, #0]
   d7ab2:	788b      	ldrb	r3, [r1, #2]
   d7ab4:	784a      	ldrb	r2, [r1, #1]
   d7ab6:	78c9      	ldrb	r1, [r1, #3]
   d7ab8:	9100      	str	r1, [sp, #0]
   d7aba:	4629      	mov	r1, r5
   d7abc:	f7ff ffea 	bl	d7a94 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d7ac0:	b003      	add	sp, #12
   d7ac2:	bd30      	pop	{r4, r5, pc}

000d7ac4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7ac4:	7441      	strb	r1, [r0, #17]
   d7ac6:	4770      	bx	lr

000d7ac8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7ac8:	4770      	bx	lr

000d7aca <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d7aca:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7acc:	2100      	movs	r1, #0
   d7ace:	7c00      	ldrb	r0, [r0, #16]
   d7ad0:	f7ff f90e 	bl	d6cf0 <HAL_USB_USART_Receive_Data>
}
   d7ad4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7ad8:	bf28      	it	cs
   d7ada:	f04f 30ff 	movcs.w	r0, #4294967295
   d7ade:	bd08      	pop	{r3, pc}

000d7ae0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7ae0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7ae2:	2101      	movs	r1, #1
   d7ae4:	7c00      	ldrb	r0, [r0, #16]
   d7ae6:	f7ff f903 	bl	d6cf0 <HAL_USB_USART_Receive_Data>
}
   d7aea:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7aee:	bf28      	it	cs
   d7af0:	f04f 30ff 	movcs.w	r0, #4294967295
   d7af4:	bd08      	pop	{r3, pc}

000d7af6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d7af6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7af8:	7c00      	ldrb	r0, [r0, #16]
   d7afa:	f7ff f8f1 	bl	d6ce0 <HAL_USB_USART_Available_Data_For_Write>
}
   d7afe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7b02:	bd08      	pop	{r3, pc}

000d7b04 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7b04:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7b06:	7c00      	ldrb	r0, [r0, #16]
   d7b08:	f7ff f8e2 	bl	d6cd0 <HAL_USB_USART_Available_Data>
}
   d7b0c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7b10:	bd08      	pop	{r3, pc}

000d7b12 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7b12:	7c00      	ldrb	r0, [r0, #16]
   d7b14:	f7ff b8fc 	b.w	d6d10 <HAL_USB_USART_Flush_Data>

000d7b18 <_ZN9USBSerialD0Ev>:
   d7b18:	b510      	push	{r4, lr}
   d7b1a:	2114      	movs	r1, #20
   d7b1c:	4604      	mov	r4, r0
   d7b1e:	f000 fc71 	bl	d8404 <_ZdlPvj>
   d7b22:	4620      	mov	r0, r4
   d7b24:	bd10      	pop	{r4, pc}

000d7b26 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7b26:	b538      	push	{r3, r4, r5, lr}
   d7b28:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7b2a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7b2c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7b2e:	f7ff f8d7 	bl	d6ce0 <HAL_USB_USART_Available_Data_For_Write>
   d7b32:	2800      	cmp	r0, #0
   d7b34:	dc01      	bgt.n	d7b3a <_ZN9USBSerial5writeEh+0x14>
   d7b36:	7c60      	ldrb	r0, [r4, #17]
   d7b38:	b128      	cbz	r0, d7b46 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7b3a:	4629      	mov	r1, r5
   d7b3c:	7c20      	ldrb	r0, [r4, #16]
   d7b3e:	f7ff f8df 	bl	d6d00 <HAL_USB_USART_Send_Data>
   d7b42:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d7b46:	bd38      	pop	{r3, r4, r5, pc}

000d7b48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7b48:	b510      	push	{r4, lr}
   d7b4a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7b4c:	2300      	movs	r3, #0
   d7b4e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7b50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7b54:	60a3      	str	r3, [r4, #8]
   d7b56:	4b05      	ldr	r3, [pc, #20]	; (d7b6c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7b58:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d7b5a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7b5c:	4608      	mov	r0, r1
{
  _serial = serial;
   d7b5e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7b60:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d7b62:	4611      	mov	r1, r2
   d7b64:	f7ff f8a4 	bl	d6cb0 <HAL_USB_USART_Init>
}
   d7b68:	4620      	mov	r0, r4
   d7b6a:	bd10      	pop	{r4, pc}
   d7b6c:	000d9600 	.word	0x000d9600

000d7b70 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7b70:	2200      	movs	r2, #0
   d7b72:	7c00      	ldrb	r0, [r0, #16]
   d7b74:	f7ff b8a4 	b.w	d6cc0 <HAL_USB_USART_Begin>

000d7b78 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7b78:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7b7a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7b7c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7b7e:	2100      	movs	r1, #0
   d7b80:	f001 fac4 	bl	d910c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7b84:	4620      	mov	r0, r4
   d7b86:	bd10      	pop	{r4, pc}

000d7b88 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7b88:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7b8a:	4d0e      	ldr	r5, [pc, #56]	; (d7bc4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7b8c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7b8e:	a801      	add	r0, sp, #4
   d7b90:	f7ff fff2 	bl	d7b78 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7b94:	6829      	ldr	r1, [r5, #0]
   d7b96:	f011 0401 	ands.w	r4, r1, #1
   d7b9a:	d110      	bne.n	d7bbe <_Z16_fetch_usbserialv+0x36>
   d7b9c:	4628      	mov	r0, r5
   d7b9e:	f7fc fa7e 	bl	d409e <__cxa_guard_acquire>
   d7ba2:	b160      	cbz	r0, d7bbe <_Z16_fetch_usbserialv+0x36>
   d7ba4:	aa01      	add	r2, sp, #4
   d7ba6:	4621      	mov	r1, r4
   d7ba8:	4807      	ldr	r0, [pc, #28]	; (d7bc8 <_Z16_fetch_usbserialv+0x40>)
   d7baa:	f7ff ffcd 	bl	d7b48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7bae:	4628      	mov	r0, r5
   d7bb0:	f7fc fa7a 	bl	d40a8 <__cxa_guard_release>
   d7bb4:	4a05      	ldr	r2, [pc, #20]	; (d7bcc <_Z16_fetch_usbserialv+0x44>)
   d7bb6:	4906      	ldr	r1, [pc, #24]	; (d7bd0 <_Z16_fetch_usbserialv+0x48>)
   d7bb8:	4803      	ldr	r0, [pc, #12]	; (d7bc8 <_Z16_fetch_usbserialv+0x40>)
   d7bba:	f000 fc15 	bl	d83e8 <__aeabi_atexit>
	return _usbserial;
}
   d7bbe:	4802      	ldr	r0, [pc, #8]	; (d7bc8 <_Z16_fetch_usbserialv+0x40>)
   d7bc0:	b007      	add	sp, #28
   d7bc2:	bd30      	pop	{r4, r5, pc}
   d7bc4:	2003e3cc 	.word	0x2003e3cc
   d7bc8:	2003e3d0 	.word	0x2003e3d0
   d7bcc:	2003ddfc 	.word	0x2003ddfc
   d7bd0:	000d7ac9 	.word	0x000d7ac9

000d7bd4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d7bd4:	2200      	movs	r2, #0
   d7bd6:	4611      	mov	r1, r2
   d7bd8:	6840      	ldr	r0, [r0, #4]
   d7bda:	f7ff b8ed 	b.w	d6db8 <network_ready>

000d7bde <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7bde:	2200      	movs	r2, #0
   d7be0:	4611      	mov	r1, r2
   d7be2:	6840      	ldr	r0, [r0, #4]
   d7be4:	f7ff b908 	b.w	d6df8 <network_listening>

000d7be8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7be8:	2200      	movs	r2, #0
   d7bea:	4611      	mov	r1, r2
   d7bec:	6840      	ldr	r0, [r0, #4]
   d7bee:	f7ff b913 	b.w	d6e18 <network_get_listen_timeout>

000d7bf2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7bf2:	2200      	movs	r2, #0
   d7bf4:	6840      	ldr	r0, [r0, #4]
   d7bf6:	f7ff b907 	b.w	d6e08 <network_set_listen_timeout>

000d7bfa <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7bfa:	2200      	movs	r2, #0
   d7bfc:	f081 0101 	eor.w	r1, r1, #1
   d7c00:	6840      	ldr	r0, [r0, #4]
   d7c02:	f7ff b8f1 	b.w	d6de8 <network_listen>

000d7c06 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d7c06:	2300      	movs	r3, #0
   d7c08:	461a      	mov	r2, r3
   d7c0a:	4619      	mov	r1, r3
   d7c0c:	6840      	ldr	r0, [r0, #4]
   d7c0e:	f7ff b8e3 	b.w	d6dd8 <network_off>

000d7c12 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d7c12:	2300      	movs	r3, #0
   d7c14:	461a      	mov	r2, r3
   d7c16:	4619      	mov	r1, r3
   d7c18:	6840      	ldr	r0, [r0, #4]
   d7c1a:	f7ff b8d5 	b.w	d6dc8 <network_on>

000d7c1e <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7c1e:	2200      	movs	r2, #0
   d7c20:	4611      	mov	r1, r2
   d7c22:	6840      	ldr	r0, [r0, #4]
   d7c24:	f7ff b8b8 	b.w	d6d98 <network_connecting>

000d7c28 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7c28:	2200      	movs	r2, #0
   d7c2a:	2102      	movs	r1, #2
   d7c2c:	6840      	ldr	r0, [r0, #4]
   d7c2e:	f7ff b8bb 	b.w	d6da8 <network_disconnect>

000d7c32 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7c32:	2300      	movs	r3, #0
   d7c34:	461a      	mov	r2, r3
   d7c36:	6840      	ldr	r0, [r0, #4]
   d7c38:	f7ff b8a6 	b.w	d6d88 <network_connect>

000d7c3c <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d7c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d7c3e:	4b1b      	ldr	r3, [pc, #108]	; (d7cac <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d7c40:	6003      	str	r3, [r0, #0]
   d7c42:	2500      	movs	r5, #0
   d7c44:	460f      	mov	r7, r1
   d7c46:	3328      	adds	r3, #40	; 0x28
   d7c48:	2618      	movs	r6, #24
   d7c4a:	b089      	sub	sp, #36	; 0x24
   d7c4c:	6043      	str	r3, [r0, #4]
   d7c4e:	6085      	str	r5, [r0, #8]
   d7c50:	60c5      	str	r5, [r0, #12]
   d7c52:	4632      	mov	r2, r6
   d7c54:	4629      	mov	r1, r5
   d7c56:	4604      	mov	r4, r0
   d7c58:	3010      	adds	r0, #16
   d7c5a:	f001 fa57 	bl	d910c <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d7c5e:	462a      	mov	r2, r5
   d7c60:	4629      	mov	r1, r5
   d7c62:	6878      	ldr	r0, [r7, #4]
   d7c64:	f7ff f8a8 	bl	d6db8 <network_ready>
   d7c68:	b908      	cbnz	r0, d7c6e <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d7c6a:	60a0      	str	r0, [r4, #8]
            return sig;
   d7c6c:	e01b      	b.n	d7ca6 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d7c6e:	4629      	mov	r1, r5
   d7c70:	4632      	mov	r2, r6
   d7c72:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d7c74:	9500      	str	r5, [sp, #0]
   d7c76:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d7c78:	f001 fa48 	bl	d910c <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d7c7c:	a902      	add	r1, sp, #8
   d7c7e:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d7c80:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d7c84:	f7ff f80c 	bl	d6ca0 <cellular_signal>
   d7c88:	b110      	cbz	r0, d7c90 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d7c8a:	2301      	movs	r3, #1
   d7c8c:	60a3      	str	r3, [r4, #8]
            return sig;
   d7c8e:	e00a      	b.n	d7ca6 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d7c90:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d7c92:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d7c94:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d7c96:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d7c98:	b90b      	cbnz	r3, d7c9e <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d7c9a:	2302      	movs	r3, #2
   d7c9c:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d7c9e:	a902      	add	r1, sp, #8
   d7ca0:	4620      	mov	r0, r4
   d7ca2:	f7ff fd3b 	bl	d771c <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d7ca6:	4620      	mov	r0, r4
   d7ca8:	b009      	add	sp, #36	; 0x24
   d7caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7cac:	000d95b8 	.word	0x000d95b8

000d7cb0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d7cb0:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d7cb2:	4c08      	ldr	r4, [pc, #32]	; (d7cd4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d7cb4:	2528      	movs	r5, #40	; 0x28
   d7cb6:	462a      	mov	r2, r5
   d7cb8:	2100      	movs	r1, #0
   d7cba:	4620      	mov	r0, r4
   d7cbc:	f001 fa26 	bl	d910c <memset>
        cid = -1;
   d7cc0:	f04f 33ff 	mov.w	r3, #4294967295
   d7cc4:	6063      	str	r3, [r4, #4]
   d7cc6:	4b04      	ldr	r3, [pc, #16]	; (d7cd8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d7cc8:	8025      	strh	r5, [r4, #0]
   d7cca:	2204      	movs	r2, #4
   d7ccc:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d7cce:	4a03      	ldr	r2, [pc, #12]	; (d7cdc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d7cd0:	601a      	str	r2, [r3, #0]
   d7cd2:	bd38      	pop	{r3, r4, r5, pc}
   d7cd4:	2003e3ec 	.word	0x2003e3ec
   d7cd8:	2003e3e4 	.word	0x2003e3e4
   d7cdc:	000d9630 	.word	0x000d9630

000d7ce0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7ce0:	4770      	bx	lr

000d7ce2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7ce2:	7441      	strb	r1, [r0, #17]
   d7ce4:	4770      	bx	lr

000d7ce6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d7ce6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7ce8:	7c00      	ldrb	r0, [r0, #16]
   d7cea:	f7fe ff71 	bl	d6bd0 <HAL_USART_Available_Data_For_Write>
}
   d7cee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7cf2:	bd08      	pop	{r3, pc}

000d7cf4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7cf4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7cf6:	7c00      	ldrb	r0, [r0, #16]
   d7cf8:	f7fe ff42 	bl	d6b80 <HAL_USART_Available_Data>
}
   d7cfc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7d00:	bd08      	pop	{r3, pc}

000d7d02 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7d02:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7d04:	7c00      	ldrb	r0, [r0, #16]
   d7d06:	f7fe ff4b 	bl	d6ba0 <HAL_USART_Peek_Data>
}
   d7d0a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7d0e:	bf28      	it	cs
   d7d10:	f04f 30ff 	movcs.w	r0, #4294967295
   d7d14:	bd08      	pop	{r3, pc}

000d7d16 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7d16:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7d18:	7c00      	ldrb	r0, [r0, #16]
   d7d1a:	f7fe ff39 	bl	d6b90 <HAL_USART_Read_Data>
}
   d7d1e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7d22:	bf28      	it	cs
   d7d24:	f04f 30ff 	movcs.w	r0, #4294967295
   d7d28:	bd08      	pop	{r3, pc}

000d7d2a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7d2a:	7c00      	ldrb	r0, [r0, #16]
   d7d2c:	f7fe bf40 	b.w	d6bb0 <HAL_USART_Flush_Data>

000d7d30 <_ZN11USARTSerialD0Ev>:
   d7d30:	b510      	push	{r4, lr}
   d7d32:	2114      	movs	r1, #20
   d7d34:	4604      	mov	r4, r0
   d7d36:	f000 fb65 	bl	d8404 <_ZdlPvj>
   d7d3a:	4620      	mov	r0, r4
   d7d3c:	bd10      	pop	{r4, pc}

000d7d3e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7d3e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7d40:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7d42:	4604      	mov	r4, r0
   d7d44:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7d46:	b925      	cbnz	r5, d7d52 <_ZN11USARTSerial5writeEh+0x14>
   d7d48:	7c00      	ldrb	r0, [r0, #16]
   d7d4a:	f7fe ff41 	bl	d6bd0 <HAL_USART_Available_Data_For_Write>
   d7d4e:	2800      	cmp	r0, #0
   d7d50:	dd05      	ble.n	d7d5e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7d52:	4631      	mov	r1, r6
   d7d54:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7d56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7d5a:	f7fe bf09 	b.w	d6b70 <HAL_USART_Write_Data>
  }
  return 0;
}
   d7d5e:	4628      	mov	r0, r5
   d7d60:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7d64 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7d64:	b510      	push	{r4, lr}
   d7d66:	4604      	mov	r4, r0
   d7d68:	4608      	mov	r0, r1
   d7d6a:	4611      	mov	r1, r2
   d7d6c:	2200      	movs	r2, #0
   d7d6e:	6062      	str	r2, [r4, #4]
   d7d70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7d74:	60a2      	str	r2, [r4, #8]
   d7d76:	4a05      	ldr	r2, [pc, #20]	; (d7d8c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7d78:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d7d7a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7d7c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d7d7e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7d80:	461a      	mov	r2, r3
   d7d82:	f7fe feed 	bl	d6b60 <HAL_USART_Init>
}
   d7d86:	4620      	mov	r0, r4
   d7d88:	bd10      	pop	{r4, pc}
   d7d8a:	bf00      	nop
   d7d8c:	000d9664 	.word	0x000d9664

000d7d90 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d7d90:	7c00      	ldrb	r0, [r0, #16]
   d7d92:	f7fe bf15 	b.w	d6bc0 <HAL_USART_Is_Enabled>
	...

000d7d98 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7d98:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7d9a:	4d0c      	ldr	r5, [pc, #48]	; (d7dcc <_Z22__fetch_global_Serial1v+0x34>)
   d7d9c:	6829      	ldr	r1, [r5, #0]
   d7d9e:	f011 0401 	ands.w	r4, r1, #1
   d7da2:	d111      	bne.n	d7dc8 <_Z22__fetch_global_Serial1v+0x30>
   d7da4:	4628      	mov	r0, r5
   d7da6:	f7fc f97a 	bl	d409e <__cxa_guard_acquire>
   d7daa:	b168      	cbz	r0, d7dc8 <_Z22__fetch_global_Serial1v+0x30>
   d7dac:	4a08      	ldr	r2, [pc, #32]	; (d7dd0 <_Z22__fetch_global_Serial1v+0x38>)
   d7dae:	4b09      	ldr	r3, [pc, #36]	; (d7dd4 <_Z22__fetch_global_Serial1v+0x3c>)
   d7db0:	4809      	ldr	r0, [pc, #36]	; (d7dd8 <_Z22__fetch_global_Serial1v+0x40>)
   d7db2:	4621      	mov	r1, r4
   d7db4:	f7ff ffd6 	bl	d7d64 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d7db8:	4628      	mov	r0, r5
   d7dba:	f7fc f975 	bl	d40a8 <__cxa_guard_release>
   d7dbe:	4a07      	ldr	r2, [pc, #28]	; (d7ddc <_Z22__fetch_global_Serial1v+0x44>)
   d7dc0:	4907      	ldr	r1, [pc, #28]	; (d7de0 <_Z22__fetch_global_Serial1v+0x48>)
   d7dc2:	4805      	ldr	r0, [pc, #20]	; (d7dd8 <_Z22__fetch_global_Serial1v+0x40>)
   d7dc4:	f000 fb10 	bl	d83e8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7dc8:	4803      	ldr	r0, [pc, #12]	; (d7dd8 <_Z22__fetch_global_Serial1v+0x40>)
   d7dca:	bd38      	pop	{r3, r4, r5, pc}
   d7dcc:	2003e4ac 	.word	0x2003e4ac
   d7dd0:	2003e4b0 	.word	0x2003e4b0
   d7dd4:	2003e428 	.word	0x2003e428
   d7dd8:	2003e414 	.word	0x2003e414
   d7ddc:	2003ddfc 	.word	0x2003ddfc
   d7de0:	000d7ce1 	.word	0x000d7ce1

000d7de4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d7de4:	4770      	bx	lr

000d7de6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7de6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7de8:	4606      	mov	r6, r0
   d7dea:	4615      	mov	r5, r2
   d7dec:	460c      	mov	r4, r1
   d7dee:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7df0:	42bc      	cmp	r4, r7
   d7df2:	d006      	beq.n	d7e02 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7df4:	6833      	ldr	r3, [r6, #0]
   d7df6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7dfa:	689b      	ldr	r3, [r3, #8]
   d7dfc:	4630      	mov	r0, r6
   d7dfe:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7e00:	e7f6      	b.n	d7df0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d7e02:	4628      	mov	r0, r5
   d7e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7e06 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d7e06:	2200      	movs	r2, #0
   d7e08:	7c00      	ldrb	r0, [r0, #16]
   d7e0a:	f7fe bef9 	b.w	d6c00 <HAL_I2C_Write_Data>

000d7e0e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d7e0e:	2100      	movs	r1, #0
   d7e10:	7c00      	ldrb	r0, [r0, #16]
   d7e12:	f7fe befd 	b.w	d6c10 <HAL_I2C_Available_Data>

000d7e16 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d7e16:	2100      	movs	r1, #0
   d7e18:	7c00      	ldrb	r0, [r0, #16]
   d7e1a:	f7fe bf01 	b.w	d6c20 <HAL_I2C_Read_Data>

000d7e1e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d7e1e:	2100      	movs	r1, #0
   d7e20:	7c00      	ldrb	r0, [r0, #16]
   d7e22:	f7fe bf05 	b.w	d6c30 <HAL_I2C_Peek_Data>

000d7e26 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d7e26:	2100      	movs	r1, #0
   d7e28:	7c00      	ldrb	r0, [r0, #16]
   d7e2a:	f7fe bf09 	b.w	d6c40 <HAL_I2C_Flush_Data>

000d7e2e <_ZN7TwoWireD0Ev>:
   d7e2e:	b510      	push	{r4, lr}
   d7e30:	2114      	movs	r1, #20
   d7e32:	4604      	mov	r4, r0
   d7e34:	f000 fae6 	bl	d8404 <_ZdlPvj>
   d7e38:	4620      	mov	r0, r4
   d7e3a:	bd10      	pop	{r4, pc}

000d7e3c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7e3c:	b510      	push	{r4, lr}
   d7e3e:	4604      	mov	r4, r0
   d7e40:	2300      	movs	r3, #0
   d7e42:	6063      	str	r3, [r4, #4]
   d7e44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7e48:	60a3      	str	r3, [r4, #8]
   d7e4a:	4b04      	ldr	r3, [pc, #16]	; (d7e5c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d7e4c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7e4e:	4608      	mov	r0, r1
   d7e50:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d7e52:	4611      	mov	r1, r2
   d7e54:	f7fe ff04 	bl	d6c60 <HAL_I2C_Init>
}
   d7e58:	4620      	mov	r0, r4
   d7e5a:	bd10      	pop	{r4, pc}
   d7e5c:	000d9694 	.word	0x000d9694

000d7e60 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d7e60:	b570      	push	{r4, r5, r6, lr}
   d7e62:	460c      	mov	r4, r1
   d7e64:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d7e66:	2514      	movs	r5, #20
   d7e68:	4606      	mov	r6, r0
   d7e6a:	462a      	mov	r2, r5
   d7e6c:	2100      	movs	r1, #0
   d7e6e:	a801      	add	r0, sp, #4
   d7e70:	f001 f94c 	bl	d910c <memset>
   d7e74:	7823      	ldrb	r3, [r4, #0]
   d7e76:	f88d 3008 	strb.w	r3, [sp, #8]
   d7e7a:	6863      	ldr	r3, [r4, #4]
   d7e7c:	9303      	str	r3, [sp, #12]
   d7e7e:	68e3      	ldr	r3, [r4, #12]
   d7e80:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d7e82:	2200      	movs	r2, #0
   d7e84:	7a23      	ldrb	r3, [r4, #8]
   d7e86:	7c30      	ldrb	r0, [r6, #16]
   d7e88:	f8ad 5004 	strh.w	r5, [sp, #4]
   d7e8c:	a901      	add	r1, sp, #4
   d7e8e:	9305      	str	r3, [sp, #20]
   d7e90:	f7fe fefe 	bl	d6c90 <HAL_I2C_Request_Data_Ex>
}
   d7e94:	b006      	add	sp, #24
   d7e96:	bd70      	pop	{r4, r5, r6, pc}

000d7e98 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d7e98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7e9a:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d7e9c:	f88d 1000 	strb.w	r1, [sp]
   d7ea0:	f04f 0164 	mov.w	r1, #100	; 0x64
   d7ea4:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7ea6:	bf18      	it	ne
   d7ea8:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d7eaa:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d7eac:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7eae:	f88d 3008 	strb.w	r3, [sp, #8]
   d7eb2:	f7ff ffd5 	bl	d7e60 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d7eb6:	b005      	add	sp, #20
   d7eb8:	f85d fb04 	ldr.w	pc, [sp], #4

000d7ebc <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d7ebc:	2200      	movs	r2, #0
   d7ebe:	7c00      	ldrb	r0, [r0, #16]
   d7ec0:	f7fe be8e 	b.w	d6be0 <HAL_I2C_Begin_Transmission>

000d7ec4 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d7ec4:	b2c9      	uxtb	r1, r1
   d7ec6:	f7ff bff9 	b.w	d7ebc <_ZN7TwoWire17beginTransmissionEh>

000d7eca <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d7eca:	2200      	movs	r2, #0
   d7ecc:	7c00      	ldrb	r0, [r0, #16]
   d7ece:	f7fe be8f 	b.w	d6bf0 <HAL_I2C_End_Transmission>

000d7ed2 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d7ed2:	2100      	movs	r1, #0
   d7ed4:	7c00      	ldrb	r0, [r0, #16]
   d7ed6:	f7fe bebb 	b.w	d6c50 <HAL_I2C_Is_Enabled>

000d7eda <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d7eda:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d7edc:	2100      	movs	r1, #0
   d7ede:	7c00      	ldrb	r0, [r0, #16]
   d7ee0:	f7fe fec6 	bl	d6c70 <HAL_I2C_Acquire>
}
   d7ee4:	fab0 f080 	clz	r0, r0
   d7ee8:	0940      	lsrs	r0, r0, #5
   d7eea:	bd08      	pop	{r3, pc}

000d7eec <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d7eec:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d7eee:	2100      	movs	r1, #0
   d7ef0:	7c00      	ldrb	r0, [r0, #16]
   d7ef2:	f7fe fec5 	bl	d6c80 <HAL_I2C_Release>
}
   d7ef6:	fab0 f080 	clz	r0, r0
   d7efa:	0940      	lsrs	r0, r0, #5
   d7efc:	bd08      	pop	{r3, pc}

000d7efe <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d7efe:	b510      	push	{r4, lr}
  if (0 == max) {
   d7f00:	4604      	mov	r4, r0
   d7f02:	b130      	cbz	r0, d7f12 <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
   d7f04:	f001 f932 	bl	d916c <rand>
   d7f08:	fb90 f3f4 	sdiv	r3, r0, r4
   d7f0c:	fb03 0014 	mls	r0, r3, r4, r0
   d7f10:	bd10      	pop	{r4, pc}
}
   d7f12:	bd10      	pop	{r4, pc}

000d7f14 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7f14:	2200      	movs	r2, #0
   d7f16:	4611      	mov	r1, r2
   d7f18:	6840      	ldr	r0, [r0, #4]
   d7f1a:	f7fe bf6d 	b.w	d6df8 <network_listening>

000d7f1e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7f1e:	2200      	movs	r2, #0
   d7f20:	4611      	mov	r1, r2
   d7f22:	6840      	ldr	r0, [r0, #4]
   d7f24:	f7fe bf78 	b.w	d6e18 <network_get_listen_timeout>

000d7f28 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7f28:	2200      	movs	r2, #0
   d7f2a:	6840      	ldr	r0, [r0, #4]
   d7f2c:	f7fe bf6c 	b.w	d6e08 <network_set_listen_timeout>

000d7f30 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7f30:	2200      	movs	r2, #0
   d7f32:	f081 0101 	eor.w	r1, r1, #1
   d7f36:	6840      	ldr	r0, [r0, #4]
   d7f38:	f7fe bf56 	b.w	d6de8 <network_listen>

000d7f3c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d7f3c:	2300      	movs	r3, #0
   d7f3e:	461a      	mov	r2, r3
   d7f40:	2101      	movs	r1, #1
   d7f42:	6840      	ldr	r0, [r0, #4]
   d7f44:	f7fe bf48 	b.w	d6dd8 <network_off>

000d7f48 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7f48:	2300      	movs	r3, #0
   d7f4a:	461a      	mov	r2, r3
   d7f4c:	4619      	mov	r1, r3
   d7f4e:	6840      	ldr	r0, [r0, #4]
   d7f50:	f7fe bf3a 	b.w	d6dc8 <network_on>

000d7f54 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7f54:	2200      	movs	r2, #0
   d7f56:	4611      	mov	r1, r2
   d7f58:	6840      	ldr	r0, [r0, #4]
   d7f5a:	f7fe bf2d 	b.w	d6db8 <network_ready>

000d7f5e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7f5e:	2200      	movs	r2, #0
   d7f60:	4611      	mov	r1, r2
   d7f62:	6840      	ldr	r0, [r0, #4]
   d7f64:	f7fe bf18 	b.w	d6d98 <network_connecting>

000d7f68 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7f68:	2200      	movs	r2, #0
   d7f6a:	2102      	movs	r1, #2
   d7f6c:	6840      	ldr	r0, [r0, #4]
   d7f6e:	f7fe bf1b 	b.w	d6da8 <network_disconnect>

000d7f72 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7f72:	2300      	movs	r3, #0
   d7f74:	461a      	mov	r2, r3
   d7f76:	6840      	ldr	r0, [r0, #4]
   d7f78:	f7fe bf06 	b.w	d6d88 <network_connect>

000d7f7c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d7f7c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7f7e:	4605      	mov	r5, r0
   d7f80:	b188      	cbz	r0, d7fa6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7f82:	6804      	ldr	r4, [r0, #0]
   d7f84:	b14c      	cbz	r4, d7f9a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d7f86:	68a3      	ldr	r3, [r4, #8]
   d7f88:	b11b      	cbz	r3, d7f92 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7f8a:	2203      	movs	r2, #3
   d7f8c:	4621      	mov	r1, r4
   d7f8e:	4620      	mov	r0, r4
   d7f90:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7f92:	2110      	movs	r1, #16
   d7f94:	4620      	mov	r0, r4
   d7f96:	f000 fa35 	bl	d8404 <_ZdlPvj>
   d7f9a:	4628      	mov	r0, r5
   d7f9c:	2114      	movs	r1, #20
      }
   d7f9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7fa2:	f000 ba2f 	b.w	d8404 <_ZdlPvj>
   d7fa6:	bd38      	pop	{r3, r4, r5, pc}

000d7fa8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d7fa8:	b110      	cbz	r0, d7fb0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d7faa:	6803      	ldr	r3, [r0, #0]
   d7fac:	685b      	ldr	r3, [r3, #4]
   d7fae:	4718      	bx	r3
   d7fb0:	4770      	bx	lr

000d7fb2 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7fb2:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7fb4:	6803      	ldr	r3, [r0, #0]
   d7fb6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d7fb8:	b1bb      	cbz	r3, d7fea <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d7fba:	6858      	ldr	r0, [r3, #4]
   d7fbc:	f7fe fd68 	bl	d6a90 <os_thread_is_current>
   d7fc0:	b978      	cbnz	r0, d7fe2 <_ZN6ThreadD1Ev+0x30>
   d7fc2:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d7fc4:	7c5a      	ldrb	r2, [r3, #17]
   d7fc6:	b912      	cbnz	r2, d7fce <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7fc8:	6858      	ldr	r0, [r3, #4]
   d7fca:	f7fe fd71 	bl	d6ab0 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d7fce:	6823      	ldr	r3, [r4, #0]
   d7fd0:	6858      	ldr	r0, [r3, #4]
   d7fd2:	f7fe fd75 	bl	d6ac0 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7fd6:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7fd8:	2300      	movs	r3, #0
   d7fda:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d7fdc:	b128      	cbz	r0, d7fea <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d7fde:	f7ff ffcd 	bl	d7f7c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7fe2:	6820      	ldr	r0, [r4, #0]
   d7fe4:	b108      	cbz	r0, d7fea <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d7fe6:	f7ff ffc9 	bl	d7f7c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d7fea:	4620      	mov	r0, r4
   d7fec:	bd10      	pop	{r4, pc}

000d7fee <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d7fee:	b538      	push	{r3, r4, r5, lr}
   d7ff0:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7ff2:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d7ff6:	b108      	cbz	r0, d7ffc <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7ff8:	f7fc f84f 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7ffc:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d8000:	b108      	cbz	r0, d8006 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d8002:	f7fe fd95 	bl	d6b30 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8006:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d800a:	b135      	cbz	r5, d801a <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d800c:	4628      	mov	r0, r5
   d800e:	f7ff ffd0 	bl	d7fb2 <_ZN6ThreadD1Ev>
   d8012:	2104      	movs	r1, #4
   d8014:	4628      	mov	r0, r5
   d8016:	f000 f9f5 	bl	d8404 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d801a:	6820      	ldr	r0, [r4, #0]
   d801c:	b108      	cbz	r0, d8022 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d801e:	f7ff ffc3 	bl	d7fa8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d8022:	4620      	mov	r0, r4
   d8024:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8028 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d8028:	b510      	push	{r4, lr}
   d802a:	4b04      	ldr	r3, [pc, #16]	; (d803c <_ZN5spark9MeshClassD1Ev+0x14>)
   d802c:	4604      	mov	r4, r0
   d802e:	f840 3b08 	str.w	r3, [r0], #8
   d8032:	f7ff ffdc 	bl	d7fee <_ZN5spark11MeshPublishD1Ev>
   d8036:	4620      	mov	r0, r4
   d8038:	bd10      	pop	{r4, pc}
   d803a:	bf00      	nop
   d803c:	000d96bc 	.word	0x000d96bc

000d8040 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d8040:	b538      	push	{r3, r4, r5, lr}
   d8042:	4c0e      	ldr	r4, [pc, #56]	; (d807c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d8044:	4b0e      	ldr	r3, [pc, #56]	; (d8080 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d8046:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d8048:	2500      	movs	r5, #0
   d804a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d804c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d8050:	6063      	str	r3, [r4, #4]
   d8052:	60a5      	str	r5, [r4, #8]
   d8054:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8058:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d805c:	f7fe fd60 	bl	d6b20 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d8060:	4b08      	ldr	r3, [pc, #32]	; (d8084 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d8062:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8066:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d806a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d806c:	4620      	mov	r0, r4
   d806e:	4a06      	ldr	r2, [pc, #24]	; (d8088 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d8070:	4906      	ldr	r1, [pc, #24]	; (d808c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d8072:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d8076:	f000 b9b7 	b.w	d83e8 <__aeabi_atexit>
   d807a:	bf00      	nop
   d807c:	2003e534 	.word	0x2003e534
   d8080:	000d96f0 	.word	0x000d96f0
   d8084:	000d96bc 	.word	0x000d96bc
   d8088:	2003ddfc 	.word	0x2003ddfc
   d808c:	000d8029 	.word	0x000d8029

000d8090 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8090:	2300      	movs	r3, #0
   d8092:	461a      	mov	r2, r3
   d8094:	6840      	ldr	r0, [r0, #4]
   d8096:	f7fe be77 	b.w	d6d88 <network_connect>

000d809a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d809a:	2200      	movs	r2, #0
   d809c:	2102      	movs	r1, #2
   d809e:	6840      	ldr	r0, [r0, #4]
   d80a0:	f7fe be82 	b.w	d6da8 <network_disconnect>

000d80a4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d80a4:	2200      	movs	r2, #0
   d80a6:	4611      	mov	r1, r2
   d80a8:	6840      	ldr	r0, [r0, #4]
   d80aa:	f7fe be75 	b.w	d6d98 <network_connecting>

000d80ae <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d80ae:	2200      	movs	r2, #0
   d80b0:	4611      	mov	r1, r2
   d80b2:	6840      	ldr	r0, [r0, #4]
   d80b4:	f7fe be80 	b.w	d6db8 <network_ready>

000d80b8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d80b8:	2300      	movs	r3, #0
   d80ba:	461a      	mov	r2, r3
   d80bc:	4619      	mov	r1, r3
   d80be:	6840      	ldr	r0, [r0, #4]
   d80c0:	f7fe be82 	b.w	d6dc8 <network_on>

000d80c4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d80c4:	2300      	movs	r3, #0
   d80c6:	461a      	mov	r2, r3
   d80c8:	4619      	mov	r1, r3
   d80ca:	6840      	ldr	r0, [r0, #4]
   d80cc:	f7fe be84 	b.w	d6dd8 <network_off>

000d80d0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d80d0:	2200      	movs	r2, #0
   d80d2:	f081 0101 	eor.w	r1, r1, #1
   d80d6:	6840      	ldr	r0, [r0, #4]
   d80d8:	f7fe be86 	b.w	d6de8 <network_listen>

000d80dc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d80dc:	2200      	movs	r2, #0
   d80de:	6840      	ldr	r0, [r0, #4]
   d80e0:	f7fe be92 	b.w	d6e08 <network_set_listen_timeout>

000d80e4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d80e4:	2200      	movs	r2, #0
   d80e6:	4611      	mov	r1, r2
   d80e8:	6840      	ldr	r0, [r0, #4]
   d80ea:	f7fe be95 	b.w	d6e18 <network_get_listen_timeout>

000d80ee <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d80ee:	2200      	movs	r2, #0
   d80f0:	4611      	mov	r1, r2
   d80f2:	6840      	ldr	r0, [r0, #4]
   d80f4:	f7fe be80 	b.w	d6df8 <network_listening>

000d80f8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d80f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d80fc:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d80fe:	b095      	sub	sp, #84	; 0x54
   d8100:	4616      	mov	r6, r2
   d8102:	460d      	mov	r5, r1
   d8104:	4607      	mov	r7, r0
    IPAddress addr;
   d8106:	f7ff fca5 	bl	d7a54 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d810a:	4621      	mov	r1, r4
   d810c:	2220      	movs	r2, #32
   d810e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8110:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8112:	f000 fffb 	bl	d910c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8116:	2340      	movs	r3, #64	; 0x40
   d8118:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d811a:	4621      	mov	r1, r4
   d811c:	466b      	mov	r3, sp
   d811e:	aa0c      	add	r2, sp, #48	; 0x30
   d8120:	4630      	mov	r0, r6
   d8122:	f7fe fbf5 	bl	d6910 <netdb_getaddrinfo>
    if (!r) {
   d8126:	4604      	mov	r4, r0
   d8128:	2800      	cmp	r0, #0
   d812a:	d144      	bne.n	d81b6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d812c:	4602      	mov	r2, r0
   d812e:	2101      	movs	r1, #1
   d8130:	6868      	ldr	r0, [r5, #4]
   d8132:	f7fe fe41 	bl	d6db8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8136:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8138:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d813a:	4622      	mov	r2, r4
   d813c:	6868      	ldr	r0, [r5, #4]
   d813e:	f7fe fe3b 	bl	d6db8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8142:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8144:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d8146:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8148:	2e00      	cmp	r6, #0
   d814a:	d034      	beq.n	d81b6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d814c:	2900      	cmp	r1, #0
   d814e:	d132      	bne.n	d81b6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8150:	6873      	ldr	r3, [r6, #4]
   d8152:	2b02      	cmp	r3, #2
   d8154:	d002      	beq.n	d815c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d8156:	2b0a      	cmp	r3, #10
   d8158:	d009      	beq.n	d816e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d815a:	e02a      	b.n	d81b2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d815c:	f1b8 0f00 	cmp.w	r8, #0
   d8160:	d027      	beq.n	d81b2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d8162:	6971      	ldr	r1, [r6, #20]
   d8164:	4638      	mov	r0, r7
   d8166:	3104      	adds	r1, #4
   d8168:	f7ff fca1 	bl	d7aae <_ZN9IPAddressaSEPKh>
   d816c:	e020      	b.n	d81b0 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d816e:	f1b9 0f00 	cmp.w	r9, #0
   d8172:	d01e      	beq.n	d81b2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8174:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8176:	2211      	movs	r2, #17
   d8178:	a801      	add	r0, sp, #4
   d817a:	f000 ffc7 	bl	d910c <memset>
                    a.v = 6;
   d817e:	2306      	movs	r3, #6
   d8180:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8184:	ad01      	add	r5, sp, #4
   d8186:	f104 0308 	add.w	r3, r4, #8
   d818a:	3418      	adds	r4, #24
   d818c:	6818      	ldr	r0, [r3, #0]
   d818e:	6859      	ldr	r1, [r3, #4]
   d8190:	462a      	mov	r2, r5
   d8192:	c203      	stmia	r2!, {r0, r1}
   d8194:	3308      	adds	r3, #8
   d8196:	42a3      	cmp	r3, r4
   d8198:	4615      	mov	r5, r2
   d819a:	d1f7      	bne.n	d818c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d819c:	a901      	add	r1, sp, #4
   d819e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d81a0:	ad07      	add	r5, sp, #28
   d81a2:	f7ff fc65 	bl	d7a70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d81a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d81a8:	1d3c      	adds	r4, r7, #4
   d81aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d81ac:	682b      	ldr	r3, [r5, #0]
   d81ae:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d81b0:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d81b2:	69f6      	ldr	r6, [r6, #28]
   d81b4:	e7c8      	b.n	d8148 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d81b6:	9800      	ldr	r0, [sp, #0]
   d81b8:	f7fe fba2 	bl	d6900 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d81bc:	4638      	mov	r0, r7
   d81be:	b015      	add	sp, #84	; 0x54
   d81c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d81c4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d81c4:	4b02      	ldr	r3, [pc, #8]	; (d81d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d81c6:	4a03      	ldr	r2, [pc, #12]	; (d81d4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d81c8:	601a      	str	r2, [r3, #0]
   d81ca:	2200      	movs	r2, #0
   d81cc:	605a      	str	r2, [r3, #4]
   d81ce:	4770      	bx	lr
   d81d0:	2003e708 	.word	0x2003e708
   d81d4:	000d96f0 	.word	0x000d96f0

000d81d8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d81d8:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d81da:	4e18      	ldr	r6, [pc, #96]	; (d823c <pinAvailable+0x64>)
   d81dc:	6831      	ldr	r1, [r6, #0]
   d81de:	f011 0501 	ands.w	r5, r1, #1
   d81e2:	4604      	mov	r4, r0
   d81e4:	d10a      	bne.n	d81fc <pinAvailable+0x24>
   d81e6:	4630      	mov	r0, r6
   d81e8:	f7fb ff59 	bl	d409e <__cxa_guard_acquire>
   d81ec:	b130      	cbz	r0, d81fc <pinAvailable+0x24>
   d81ee:	4629      	mov	r1, r5
   d81f0:	4813      	ldr	r0, [pc, #76]	; (d8240 <pinAvailable+0x68>)
   d81f2:	f7fe fead 	bl	d6f50 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d81f6:	4630      	mov	r0, r6
   d81f8:	f7fb ff56 	bl	d40a8 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d81fc:	4810      	ldr	r0, [pc, #64]	; (d8240 <pinAvailable+0x68>)
   d81fe:	f7fe ff64 	bl	d70ca <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d8202:	b128      	cbz	r0, d8210 <pinAvailable+0x38>
   d8204:	f1a4 030b 	sub.w	r3, r4, #11
   d8208:	2b02      	cmp	r3, #2
   d820a:	d801      	bhi.n	d8210 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d820c:	2000      	movs	r0, #0
   d820e:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d8210:	f000 f89e 	bl	d8350 <_Z19__fetch_global_Wirev>
   d8214:	f7ff fe5d 	bl	d7ed2 <_ZN7TwoWire9isEnabledEv>
   d8218:	b108      	cbz	r0, d821e <pinAvailable+0x46>
   d821a:	2c01      	cmp	r4, #1
   d821c:	d9f6      	bls.n	d820c <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d821e:	f7ff fdbb 	bl	d7d98 <_Z22__fetch_global_Serial1v>
   d8222:	f7ff fdb5 	bl	d7d90 <_ZN11USARTSerial9isEnabledEv>
   d8226:	b118      	cbz	r0, d8230 <pinAvailable+0x58>
   d8228:	f1a4 0309 	sub.w	r3, r4, #9
   d822c:	2b01      	cmp	r3, #1
   d822e:	d9ed      	bls.n	d820c <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d8230:	2c23      	cmp	r4, #35	; 0x23
   d8232:	bf8c      	ite	hi
   d8234:	2000      	movhi	r0, #0
   d8236:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d8238:	bd70      	pop	{r4, r5, r6, pc}
   d823a:	bf00      	nop
   d823c:	2003de68 	.word	0x2003de68
   d8240:	2003de6c 	.word	0x2003de6c

000d8244 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8244:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d8246:	b538      	push	{r3, r4, r5, lr}
   d8248:	4604      	mov	r4, r0
   d824a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d824c:	d80a      	bhi.n	d8264 <pinMode+0x20>
   d824e:	29ff      	cmp	r1, #255	; 0xff
   d8250:	d008      	beq.n	d8264 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8252:	f7ff ffc1 	bl	d81d8 <pinAvailable>
   d8256:	b128      	cbz	r0, d8264 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8258:	4629      	mov	r1, r5
   d825a:	4620      	mov	r0, r4
}
   d825c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8260:	f7fe bb66 	b.w	d6930 <HAL_Pin_Mode>
   d8264:	bd38      	pop	{r3, r4, r5, pc}

000d8266 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d8266:	b538      	push	{r3, r4, r5, lr}
   d8268:	4604      	mov	r4, r0
   d826a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d826c:	f7fe fb68 	bl	d6940 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8270:	28ff      	cmp	r0, #255	; 0xff
   d8272:	d010      	beq.n	d8296 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d8274:	2806      	cmp	r0, #6
   d8276:	d804      	bhi.n	d8282 <digitalWrite+0x1c>
   d8278:	234d      	movs	r3, #77	; 0x4d
   d827a:	fa23 f000 	lsr.w	r0, r3, r0
   d827e:	07c3      	lsls	r3, r0, #31
   d8280:	d409      	bmi.n	d8296 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d8282:	4620      	mov	r0, r4
   d8284:	f7ff ffa8 	bl	d81d8 <pinAvailable>
   d8288:	b128      	cbz	r0, d8296 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d828a:	4629      	mov	r1, r5
   d828c:	4620      	mov	r0, r4
}
   d828e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8292:	f7fe bb5d 	b.w	d6950 <HAL_GPIO_Write>
   d8296:	bd38      	pop	{r3, r4, r5, pc}

000d8298 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d8298:	b510      	push	{r4, lr}
   d829a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d829c:	f7fe fb50 	bl	d6940 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d82a0:	3804      	subs	r0, #4
   d82a2:	b2c0      	uxtb	r0, r0
   d82a4:	2801      	cmp	r0, #1
   d82a6:	d908      	bls.n	d82ba <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d82a8:	4620      	mov	r0, r4
   d82aa:	f7ff ff95 	bl	d81d8 <pinAvailable>
   d82ae:	b120      	cbz	r0, d82ba <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d82b0:	4620      	mov	r0, r4
}
   d82b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d82b6:	f7fe bb53 	b.w	d6960 <HAL_GPIO_Read>
}
   d82ba:	2000      	movs	r0, #0
   d82bc:	bd10      	pop	{r4, pc}
	...

000d82c0 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d82c0:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d82c2:	4c07      	ldr	r4, [pc, #28]	; (d82e0 <_Z21__fetch_global_EEPROMv+0x20>)
   d82c4:	6823      	ldr	r3, [r4, #0]
   d82c6:	07db      	lsls	r3, r3, #31
   d82c8:	d408      	bmi.n	d82dc <_Z21__fetch_global_EEPROMv+0x1c>
   d82ca:	4620      	mov	r0, r4
   d82cc:	f7fb fee7 	bl	d409e <__cxa_guard_acquire>
   d82d0:	b120      	cbz	r0, d82dc <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d82d2:	f7fe fbbd 	bl	d6a50 <HAL_EEPROM_Init>
   d82d6:	4620      	mov	r0, r4
   d82d8:	f7fb fee6 	bl	d40a8 <__cxa_guard_release>
	return eeprom;
}
   d82dc:	4801      	ldr	r0, [pc, #4]	; (d82e4 <_Z21__fetch_global_EEPROMv+0x24>)
   d82de:	bd10      	pop	{r4, pc}
   d82e0:	2003e714 	.word	0x2003e714
   d82e4:	2003e718 	.word	0x2003e718

000d82e8 <_Z17acquireWireBufferv>:
   d82e8:	b570      	push	{r4, r5, r6, lr}
   d82ea:	4604      	mov	r4, r0
   d82ec:	2514      	movs	r5, #20
   d82ee:	462a      	mov	r2, r5
   d82f0:	4e09      	ldr	r6, [pc, #36]	; (d8318 <_Z17acquireWireBufferv+0x30>)
   d82f2:	2100      	movs	r1, #0
   d82f4:	f000 ff0a 	bl	d910c <memset>
   d82f8:	8025      	strh	r5, [r4, #0]
   d82fa:	2520      	movs	r5, #32
   d82fc:	4631      	mov	r1, r6
   d82fe:	60a5      	str	r5, [r4, #8]
   d8300:	6125      	str	r5, [r4, #16]
   d8302:	4628      	mov	r0, r5
   d8304:	f000 f880 	bl	d8408 <_ZnajRKSt9nothrow_t>
   d8308:	4631      	mov	r1, r6
   d830a:	6060      	str	r0, [r4, #4]
   d830c:	4628      	mov	r0, r5
   d830e:	f000 f87b 	bl	d8408 <_ZnajRKSt9nothrow_t>
   d8312:	60e0      	str	r0, [r4, #12]
   d8314:	4620      	mov	r0, r4
   d8316:	bd70      	pop	{r4, r5, r6, pc}
   d8318:	000d971c 	.word	0x000d971c

000d831c <_Z18acquireWire1Bufferv>:
	return defaultWireConfig();
}

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
   d831c:	b570      	push	{r4, r5, r6, lr}
   d831e:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d8320:	2514      	movs	r5, #20
   d8322:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8324:	4e09      	ldr	r6, [pc, #36]	; (d834c <_Z18acquireWire1Bufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d8326:	2100      	movs	r1, #0
   d8328:	f000 fef0 	bl	d910c <memset>
   d832c:	8025      	strh	r5, [r4, #0]
   d832e:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8330:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d8332:	60a5      	str	r5, [r4, #8]
   d8334:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8336:	4628      	mov	r0, r5
   d8338:	f000 f866 	bl	d8408 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d833c:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d833e:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8340:	4628      	mov	r0, r5
   d8342:	f000 f861 	bl	d8408 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d8346:	60e0      	str	r0, [r4, #12]

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
	return defaultWireConfig();
}
   d8348:	4620      	mov	r0, r4
   d834a:	bd70      	pop	{r4, r5, r6, pc}
   d834c:	000d971c 	.word	0x000d971c

000d8350 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8350:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8352:	4d0e      	ldr	r5, [pc, #56]	; (d838c <_Z19__fetch_global_Wirev+0x3c>)
   d8354:	6829      	ldr	r1, [r5, #0]
   d8356:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d835a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d835c:	d113      	bne.n	d8386 <_Z19__fetch_global_Wirev+0x36>
   d835e:	4628      	mov	r0, r5
   d8360:	f7fb fe9d 	bl	d409e <__cxa_guard_acquire>
   d8364:	b178      	cbz	r0, d8386 <_Z19__fetch_global_Wirev+0x36>
   d8366:	a801      	add	r0, sp, #4
   d8368:	f7ff ffbe 	bl	d82e8 <_Z17acquireWireBufferv>
   d836c:	aa01      	add	r2, sp, #4
   d836e:	4621      	mov	r1, r4
   d8370:	4807      	ldr	r0, [pc, #28]	; (d8390 <_Z19__fetch_global_Wirev+0x40>)
   d8372:	f7ff fd63 	bl	d7e3c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d8376:	4628      	mov	r0, r5
   d8378:	f7fb fe96 	bl	d40a8 <__cxa_guard_release>
   d837c:	4a05      	ldr	r2, [pc, #20]	; (d8394 <_Z19__fetch_global_Wirev+0x44>)
   d837e:	4906      	ldr	r1, [pc, #24]	; (d8398 <_Z19__fetch_global_Wirev+0x48>)
   d8380:	4803      	ldr	r0, [pc, #12]	; (d8390 <_Z19__fetch_global_Wirev+0x40>)
   d8382:	f000 f831 	bl	d83e8 <__aeabi_atexit>
	return wire;
}
   d8386:	4802      	ldr	r0, [pc, #8]	; (d8390 <_Z19__fetch_global_Wirev+0x40>)
   d8388:	b007      	add	sp, #28
   d838a:	bd30      	pop	{r4, r5, pc}
   d838c:	2003e71c 	.word	0x2003e71c
   d8390:	2003e734 	.word	0x2003e734
   d8394:	2003ddfc 	.word	0x2003ddfc
   d8398:	000d7de5 	.word	0x000d7de5

000d839c <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d839c:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d839e:	4c0e      	ldr	r4, [pc, #56]	; (d83d8 <_Z20__fetch_global_Wire1v+0x3c>)
   d83a0:	6823      	ldr	r3, [r4, #0]
   d83a2:	07db      	lsls	r3, r3, #31
	return wire;
}

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d83a4:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d83a6:	d413      	bmi.n	d83d0 <_Z20__fetch_global_Wire1v+0x34>
   d83a8:	4620      	mov	r0, r4
   d83aa:	f7fb fe78 	bl	d409e <__cxa_guard_acquire>
   d83ae:	b178      	cbz	r0, d83d0 <_Z20__fetch_global_Wire1v+0x34>
   d83b0:	a801      	add	r0, sp, #4
   d83b2:	f7ff ffb3 	bl	d831c <_Z18acquireWire1Bufferv>
   d83b6:	aa01      	add	r2, sp, #4
   d83b8:	2101      	movs	r1, #1
   d83ba:	4808      	ldr	r0, [pc, #32]	; (d83dc <_Z20__fetch_global_Wire1v+0x40>)
   d83bc:	f7ff fd3e 	bl	d7e3c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d83c0:	4620      	mov	r0, r4
   d83c2:	f7fb fe71 	bl	d40a8 <__cxa_guard_release>
   d83c6:	4a06      	ldr	r2, [pc, #24]	; (d83e0 <_Z20__fetch_global_Wire1v+0x44>)
   d83c8:	4906      	ldr	r1, [pc, #24]	; (d83e4 <_Z20__fetch_global_Wire1v+0x48>)
   d83ca:	4804      	ldr	r0, [pc, #16]	; (d83dc <_Z20__fetch_global_Wire1v+0x40>)
   d83cc:	f000 f80c 	bl	d83e8 <__aeabi_atexit>
	return wire;
}
   d83d0:	4802      	ldr	r0, [pc, #8]	; (d83dc <_Z20__fetch_global_Wire1v+0x40>)
   d83d2:	b006      	add	sp, #24
   d83d4:	bd10      	pop	{r4, pc}
   d83d6:	bf00      	nop
   d83d8:	2003e748 	.word	0x2003e748
   d83dc:	2003e720 	.word	0x2003e720
   d83e0:	2003ddfc 	.word	0x2003ddfc
   d83e4:	000d7de5 	.word	0x000d7de5

000d83e8 <__aeabi_atexit>:
   d83e8:	460b      	mov	r3, r1
   d83ea:	4601      	mov	r1, r0
   d83ec:	4618      	mov	r0, r3
   d83ee:	f000 be65 	b.w	d90bc <__cxa_atexit>
	...

000d83f4 <_ZSt15get_new_handlerv>:
   d83f4:	4b02      	ldr	r3, [pc, #8]	; (d8400 <_ZSt15get_new_handlerv+0xc>)
   d83f6:	6818      	ldr	r0, [r3, #0]
   d83f8:	f3bf 8f5f 	dmb	sy
   d83fc:	4770      	bx	lr
   d83fe:	bf00      	nop
   d8400:	2003e74c 	.word	0x2003e74c

000d8404 <_ZdlPvj>:
   d8404:	f7fb be47 	b.w	d4096 <_ZdlPv>

000d8408 <_ZnajRKSt9nothrow_t>:
   d8408:	f000 b800 	b.w	d840c <_ZnwjRKSt9nothrow_t>

000d840c <_ZnwjRKSt9nothrow_t>:
   d840c:	b510      	push	{r4, lr}
   d840e:	2800      	cmp	r0, #0
   d8410:	bf14      	ite	ne
   d8412:	4604      	movne	r4, r0
   d8414:	2401      	moveq	r4, #1
   d8416:	4620      	mov	r0, r4
   d8418:	f7fe fd2e 	bl	d6e78 <malloc>
   d841c:	b920      	cbnz	r0, d8428 <_ZnwjRKSt9nothrow_t+0x1c>
   d841e:	f7ff ffe9 	bl	d83f4 <_ZSt15get_new_handlerv>
   d8422:	b108      	cbz	r0, d8428 <_ZnwjRKSt9nothrow_t+0x1c>
   d8424:	4780      	blx	r0
   d8426:	e7f6      	b.n	d8416 <_ZnwjRKSt9nothrow_t+0xa>
   d8428:	bd10      	pop	{r4, pc}
	...

000d842c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d842c:	4b18      	ldr	r3, [pc, #96]	; (d8490 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d842e:	681a      	ldr	r2, [r3, #0]
   d8430:	07d1      	lsls	r1, r2, #31
   d8432:	bf5c      	itt	pl
   d8434:	2201      	movpl	r2, #1
   d8436:	601a      	strpl	r2, [r3, #0]
   d8438:	4b16      	ldr	r3, [pc, #88]	; (d8494 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d843a:	681a      	ldr	r2, [r3, #0]
   d843c:	07d2      	lsls	r2, r2, #31
   d843e:	bf5c      	itt	pl
   d8440:	2201      	movpl	r2, #1
   d8442:	601a      	strpl	r2, [r3, #0]
   d8444:	4b14      	ldr	r3, [pc, #80]	; (d8498 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8446:	681a      	ldr	r2, [r3, #0]
   d8448:	07d0      	lsls	r0, r2, #31
   d844a:	bf5c      	itt	pl
   d844c:	2201      	movpl	r2, #1
   d844e:	601a      	strpl	r2, [r3, #0]
   d8450:	4b12      	ldr	r3, [pc, #72]	; (d849c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8452:	681a      	ldr	r2, [r3, #0]
   d8454:	07d1      	lsls	r1, r2, #31
   d8456:	bf5c      	itt	pl
   d8458:	2201      	movpl	r2, #1
   d845a:	601a      	strpl	r2, [r3, #0]
   d845c:	4b10      	ldr	r3, [pc, #64]	; (d84a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d845e:	681a      	ldr	r2, [r3, #0]
   d8460:	07d2      	lsls	r2, r2, #31
   d8462:	bf5c      	itt	pl
   d8464:	2201      	movpl	r2, #1
   d8466:	601a      	strpl	r2, [r3, #0]
   d8468:	4b0e      	ldr	r3, [pc, #56]	; (d84a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d846a:	681a      	ldr	r2, [r3, #0]
   d846c:	07d0      	lsls	r0, r2, #31
   d846e:	bf5c      	itt	pl
   d8470:	2201      	movpl	r2, #1
   d8472:	601a      	strpl	r2, [r3, #0]
   d8474:	4b0c      	ldr	r3, [pc, #48]	; (d84a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8476:	681a      	ldr	r2, [r3, #0]
   d8478:	07d1      	lsls	r1, r2, #31
   d847a:	bf5c      	itt	pl
   d847c:	2201      	movpl	r2, #1
   d847e:	601a      	strpl	r2, [r3, #0]
   d8480:	4b0a      	ldr	r3, [pc, #40]	; (d84ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8482:	681a      	ldr	r2, [r3, #0]
   d8484:	07d2      	lsls	r2, r2, #31
   d8486:	bf5c      	itt	pl
   d8488:	2201      	movpl	r2, #1
   d848a:	601a      	strpl	r2, [r3, #0]
   d848c:	4770      	bx	lr
   d848e:	bf00      	nop
   d8490:	2003e76c 	.word	0x2003e76c
   d8494:	2003e768 	.word	0x2003e768
   d8498:	2003e764 	.word	0x2003e764
   d849c:	2003e760 	.word	0x2003e760
   d84a0:	2003e75c 	.word	0x2003e75c
   d84a4:	2003e758 	.word	0x2003e758
   d84a8:	2003e754 	.word	0x2003e754
   d84ac:	2003e750 	.word	0x2003e750

000d84b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d84b0:	4b24      	ldr	r3, [pc, #144]	; (d8544 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d84b2:	681a      	ldr	r2, [r3, #0]
   d84b4:	07d0      	lsls	r0, r2, #31
   d84b6:	bf5c      	itt	pl
   d84b8:	2201      	movpl	r2, #1
   d84ba:	601a      	strpl	r2, [r3, #0]
   d84bc:	4b22      	ldr	r3, [pc, #136]	; (d8548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d84be:	681a      	ldr	r2, [r3, #0]
   d84c0:	07d1      	lsls	r1, r2, #31
   d84c2:	bf5c      	itt	pl
   d84c4:	2201      	movpl	r2, #1
   d84c6:	601a      	strpl	r2, [r3, #0]
   d84c8:	4b20      	ldr	r3, [pc, #128]	; (d854c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d84ca:	681a      	ldr	r2, [r3, #0]
   d84cc:	07d2      	lsls	r2, r2, #31
   d84ce:	bf5c      	itt	pl
   d84d0:	2201      	movpl	r2, #1
   d84d2:	601a      	strpl	r2, [r3, #0]
   d84d4:	4b1e      	ldr	r3, [pc, #120]	; (d8550 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d84d6:	681a      	ldr	r2, [r3, #0]
   d84d8:	07d0      	lsls	r0, r2, #31
   d84da:	bf5c      	itt	pl
   d84dc:	2201      	movpl	r2, #1
   d84de:	601a      	strpl	r2, [r3, #0]
   d84e0:	4b1c      	ldr	r3, [pc, #112]	; (d8554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d84e2:	681a      	ldr	r2, [r3, #0]
   d84e4:	07d1      	lsls	r1, r2, #31
   d84e6:	bf5c      	itt	pl
   d84e8:	2201      	movpl	r2, #1
   d84ea:	601a      	strpl	r2, [r3, #0]
   d84ec:	4b1a      	ldr	r3, [pc, #104]	; (d8558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d84ee:	681a      	ldr	r2, [r3, #0]
   d84f0:	07d2      	lsls	r2, r2, #31
   d84f2:	bf5c      	itt	pl
   d84f4:	2201      	movpl	r2, #1
   d84f6:	601a      	strpl	r2, [r3, #0]
   d84f8:	4b18      	ldr	r3, [pc, #96]	; (d855c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d84fa:	681a      	ldr	r2, [r3, #0]
   d84fc:	07d0      	lsls	r0, r2, #31
   d84fe:	bf5c      	itt	pl
   d8500:	2201      	movpl	r2, #1
   d8502:	601a      	strpl	r2, [r3, #0]
   d8504:	4b16      	ldr	r3, [pc, #88]	; (d8560 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d8506:	681a      	ldr	r2, [r3, #0]
   d8508:	07d1      	lsls	r1, r2, #31
   d850a:	bf5c      	itt	pl
   d850c:	2201      	movpl	r2, #1
   d850e:	601a      	strpl	r2, [r3, #0]
   d8510:	4b14      	ldr	r3, [pc, #80]	; (d8564 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d8512:	681a      	ldr	r2, [r3, #0]
   d8514:	07d2      	lsls	r2, r2, #31
   d8516:	bf5c      	itt	pl
   d8518:	2201      	movpl	r2, #1
   d851a:	601a      	strpl	r2, [r3, #0]
   d851c:	4b12      	ldr	r3, [pc, #72]	; (d8568 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d851e:	681a      	ldr	r2, [r3, #0]
   d8520:	07d0      	lsls	r0, r2, #31
   d8522:	bf5c      	itt	pl
   d8524:	2201      	movpl	r2, #1
   d8526:	601a      	strpl	r2, [r3, #0]
   d8528:	4b10      	ldr	r3, [pc, #64]	; (d856c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d852a:	681a      	ldr	r2, [r3, #0]
   d852c:	07d1      	lsls	r1, r2, #31
   d852e:	bf5c      	itt	pl
   d8530:	2201      	movpl	r2, #1
   d8532:	601a      	strpl	r2, [r3, #0]
   d8534:	4b0e      	ldr	r3, [pc, #56]	; (d8570 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d8536:	681a      	ldr	r2, [r3, #0]
   d8538:	07d2      	lsls	r2, r2, #31
   d853a:	bf5c      	itt	pl
   d853c:	2201      	movpl	r2, #1
   d853e:	601a      	strpl	r2, [r3, #0]
   d8540:	4770      	bx	lr
   d8542:	bf00      	nop
   d8544:	2003e79c 	.word	0x2003e79c
   d8548:	2003e798 	.word	0x2003e798
   d854c:	2003e794 	.word	0x2003e794
   d8550:	2003e790 	.word	0x2003e790
   d8554:	2003e78c 	.word	0x2003e78c
   d8558:	2003e788 	.word	0x2003e788
   d855c:	2003e784 	.word	0x2003e784
   d8560:	2003e780 	.word	0x2003e780
   d8564:	2003e77c 	.word	0x2003e77c
   d8568:	2003e778 	.word	0x2003e778
   d856c:	2003e774 	.word	0x2003e774
   d8570:	2003e770 	.word	0x2003e770

000d8574 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d8574:	4b24      	ldr	r3, [pc, #144]	; (d8608 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d8576:	681a      	ldr	r2, [r3, #0]
   d8578:	07d0      	lsls	r0, r2, #31
   d857a:	bf5c      	itt	pl
   d857c:	2201      	movpl	r2, #1
   d857e:	601a      	strpl	r2, [r3, #0]
   d8580:	4b22      	ldr	r3, [pc, #136]	; (d860c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d8582:	681a      	ldr	r2, [r3, #0]
   d8584:	07d1      	lsls	r1, r2, #31
   d8586:	bf5c      	itt	pl
   d8588:	2201      	movpl	r2, #1
   d858a:	601a      	strpl	r2, [r3, #0]
   d858c:	4b20      	ldr	r3, [pc, #128]	; (d8610 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d858e:	681a      	ldr	r2, [r3, #0]
   d8590:	07d2      	lsls	r2, r2, #31
   d8592:	bf5c      	itt	pl
   d8594:	2201      	movpl	r2, #1
   d8596:	601a      	strpl	r2, [r3, #0]
   d8598:	4b1e      	ldr	r3, [pc, #120]	; (d8614 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d859a:	681a      	ldr	r2, [r3, #0]
   d859c:	07d0      	lsls	r0, r2, #31
   d859e:	bf5c      	itt	pl
   d85a0:	2201      	movpl	r2, #1
   d85a2:	601a      	strpl	r2, [r3, #0]
   d85a4:	4b1c      	ldr	r3, [pc, #112]	; (d8618 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d85a6:	681a      	ldr	r2, [r3, #0]
   d85a8:	07d1      	lsls	r1, r2, #31
   d85aa:	bf5c      	itt	pl
   d85ac:	2201      	movpl	r2, #1
   d85ae:	601a      	strpl	r2, [r3, #0]
   d85b0:	4b1a      	ldr	r3, [pc, #104]	; (d861c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d85b2:	681a      	ldr	r2, [r3, #0]
   d85b4:	07d2      	lsls	r2, r2, #31
   d85b6:	bf5c      	itt	pl
   d85b8:	2201      	movpl	r2, #1
   d85ba:	601a      	strpl	r2, [r3, #0]
   d85bc:	4b18      	ldr	r3, [pc, #96]	; (d8620 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d85be:	681a      	ldr	r2, [r3, #0]
   d85c0:	07d0      	lsls	r0, r2, #31
   d85c2:	bf5c      	itt	pl
   d85c4:	2201      	movpl	r2, #1
   d85c6:	601a      	strpl	r2, [r3, #0]
   d85c8:	4b16      	ldr	r3, [pc, #88]	; (d8624 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d85ca:	681a      	ldr	r2, [r3, #0]
   d85cc:	07d1      	lsls	r1, r2, #31
   d85ce:	bf5c      	itt	pl
   d85d0:	2201      	movpl	r2, #1
   d85d2:	601a      	strpl	r2, [r3, #0]
   d85d4:	4b14      	ldr	r3, [pc, #80]	; (d8628 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d85d6:	681a      	ldr	r2, [r3, #0]
   d85d8:	07d2      	lsls	r2, r2, #31
   d85da:	bf5c      	itt	pl
   d85dc:	2201      	movpl	r2, #1
   d85de:	601a      	strpl	r2, [r3, #0]
   d85e0:	4b12      	ldr	r3, [pc, #72]	; (d862c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d85e2:	681a      	ldr	r2, [r3, #0]
   d85e4:	07d0      	lsls	r0, r2, #31
   d85e6:	bf5c      	itt	pl
   d85e8:	2201      	movpl	r2, #1
   d85ea:	601a      	strpl	r2, [r3, #0]
   d85ec:	4b10      	ldr	r3, [pc, #64]	; (d8630 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d85ee:	681a      	ldr	r2, [r3, #0]
   d85f0:	07d1      	lsls	r1, r2, #31
   d85f2:	bf5c      	itt	pl
   d85f4:	2201      	movpl	r2, #1
   d85f6:	601a      	strpl	r2, [r3, #0]
   d85f8:	4b0e      	ldr	r3, [pc, #56]	; (d8634 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d85fa:	681a      	ldr	r2, [r3, #0]
   d85fc:	07d2      	lsls	r2, r2, #31
   d85fe:	bf5c      	itt	pl
   d8600:	2201      	movpl	r2, #1
   d8602:	601a      	strpl	r2, [r3, #0]
   d8604:	4770      	bx	lr
   d8606:	bf00      	nop
   d8608:	2003e7cc 	.word	0x2003e7cc
   d860c:	2003e7c8 	.word	0x2003e7c8
   d8610:	2003e7c4 	.word	0x2003e7c4
   d8614:	2003e7c0 	.word	0x2003e7c0
   d8618:	2003e7bc 	.word	0x2003e7bc
   d861c:	2003e7b8 	.word	0x2003e7b8
   d8620:	2003e7b4 	.word	0x2003e7b4
   d8624:	2003e7b0 	.word	0x2003e7b0
   d8628:	2003e7ac 	.word	0x2003e7ac
   d862c:	2003e7a8 	.word	0x2003e7a8
   d8630:	2003e7a4 	.word	0x2003e7a4
   d8634:	2003e7a0 	.word	0x2003e7a0

000d8638 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8638:	4b18      	ldr	r3, [pc, #96]	; (d869c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d863a:	681a      	ldr	r2, [r3, #0]
   d863c:	07d1      	lsls	r1, r2, #31
   d863e:	bf5c      	itt	pl
   d8640:	2201      	movpl	r2, #1
   d8642:	601a      	strpl	r2, [r3, #0]
   d8644:	4b16      	ldr	r3, [pc, #88]	; (d86a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8646:	681a      	ldr	r2, [r3, #0]
   d8648:	07d2      	lsls	r2, r2, #31
   d864a:	bf5c      	itt	pl
   d864c:	2201      	movpl	r2, #1
   d864e:	601a      	strpl	r2, [r3, #0]
   d8650:	4b14      	ldr	r3, [pc, #80]	; (d86a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8652:	681a      	ldr	r2, [r3, #0]
   d8654:	07d0      	lsls	r0, r2, #31
   d8656:	bf5c      	itt	pl
   d8658:	2201      	movpl	r2, #1
   d865a:	601a      	strpl	r2, [r3, #0]
   d865c:	4b12      	ldr	r3, [pc, #72]	; (d86a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d865e:	681a      	ldr	r2, [r3, #0]
   d8660:	07d1      	lsls	r1, r2, #31
   d8662:	bf5c      	itt	pl
   d8664:	2201      	movpl	r2, #1
   d8666:	601a      	strpl	r2, [r3, #0]
   d8668:	4b10      	ldr	r3, [pc, #64]	; (d86ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d866a:	681a      	ldr	r2, [r3, #0]
   d866c:	07d2      	lsls	r2, r2, #31
   d866e:	bf5c      	itt	pl
   d8670:	2201      	movpl	r2, #1
   d8672:	601a      	strpl	r2, [r3, #0]
   d8674:	4b0e      	ldr	r3, [pc, #56]	; (d86b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8676:	681a      	ldr	r2, [r3, #0]
   d8678:	07d0      	lsls	r0, r2, #31
   d867a:	bf5c      	itt	pl
   d867c:	2201      	movpl	r2, #1
   d867e:	601a      	strpl	r2, [r3, #0]
   d8680:	4b0c      	ldr	r3, [pc, #48]	; (d86b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8682:	681a      	ldr	r2, [r3, #0]
   d8684:	07d1      	lsls	r1, r2, #31
   d8686:	bf5c      	itt	pl
   d8688:	2201      	movpl	r2, #1
   d868a:	601a      	strpl	r2, [r3, #0]
   d868c:	4b0a      	ldr	r3, [pc, #40]	; (d86b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d868e:	681a      	ldr	r2, [r3, #0]
   d8690:	07d2      	lsls	r2, r2, #31
   d8692:	bf5c      	itt	pl
   d8694:	2201      	movpl	r2, #1
   d8696:	601a      	strpl	r2, [r3, #0]
   d8698:	4770      	bx	lr
   d869a:	bf00      	nop
   d869c:	2003e7ec 	.word	0x2003e7ec
   d86a0:	2003e7e8 	.word	0x2003e7e8
   d86a4:	2003e7e4 	.word	0x2003e7e4
   d86a8:	2003e7e0 	.word	0x2003e7e0
   d86ac:	2003e7dc 	.word	0x2003e7dc
   d86b0:	2003e7d8 	.word	0x2003e7d8
   d86b4:	2003e7d4 	.word	0x2003e7d4
   d86b8:	2003e7d0 	.word	0x2003e7d0

000d86bc <__aeabi_drsub>:
   d86bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d86c0:	e002      	b.n	d86c8 <__adddf3>
   d86c2:	bf00      	nop

000d86c4 <__aeabi_dsub>:
   d86c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d86c8 <__adddf3>:
   d86c8:	b530      	push	{r4, r5, lr}
   d86ca:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d86ce:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d86d2:	ea94 0f05 	teq	r4, r5
   d86d6:	bf08      	it	eq
   d86d8:	ea90 0f02 	teqeq	r0, r2
   d86dc:	bf1f      	itttt	ne
   d86de:	ea54 0c00 	orrsne.w	ip, r4, r0
   d86e2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d86e6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d86ea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d86ee:	f000 80e2 	beq.w	d88b6 <__adddf3+0x1ee>
   d86f2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d86f6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d86fa:	bfb8      	it	lt
   d86fc:	426d      	neglt	r5, r5
   d86fe:	dd0c      	ble.n	d871a <__adddf3+0x52>
   d8700:	442c      	add	r4, r5
   d8702:	ea80 0202 	eor.w	r2, r0, r2
   d8706:	ea81 0303 	eor.w	r3, r1, r3
   d870a:	ea82 0000 	eor.w	r0, r2, r0
   d870e:	ea83 0101 	eor.w	r1, r3, r1
   d8712:	ea80 0202 	eor.w	r2, r0, r2
   d8716:	ea81 0303 	eor.w	r3, r1, r3
   d871a:	2d36      	cmp	r5, #54	; 0x36
   d871c:	bf88      	it	hi
   d871e:	bd30      	pophi	{r4, r5, pc}
   d8720:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8724:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8728:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d872c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8730:	d002      	beq.n	d8738 <__adddf3+0x70>
   d8732:	4240      	negs	r0, r0
   d8734:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8738:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d873c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8740:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8744:	d002      	beq.n	d874c <__adddf3+0x84>
   d8746:	4252      	negs	r2, r2
   d8748:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d874c:	ea94 0f05 	teq	r4, r5
   d8750:	f000 80a7 	beq.w	d88a2 <__adddf3+0x1da>
   d8754:	f1a4 0401 	sub.w	r4, r4, #1
   d8758:	f1d5 0e20 	rsbs	lr, r5, #32
   d875c:	db0d      	blt.n	d877a <__adddf3+0xb2>
   d875e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8762:	fa22 f205 	lsr.w	r2, r2, r5
   d8766:	1880      	adds	r0, r0, r2
   d8768:	f141 0100 	adc.w	r1, r1, #0
   d876c:	fa03 f20e 	lsl.w	r2, r3, lr
   d8770:	1880      	adds	r0, r0, r2
   d8772:	fa43 f305 	asr.w	r3, r3, r5
   d8776:	4159      	adcs	r1, r3
   d8778:	e00e      	b.n	d8798 <__adddf3+0xd0>
   d877a:	f1a5 0520 	sub.w	r5, r5, #32
   d877e:	f10e 0e20 	add.w	lr, lr, #32
   d8782:	2a01      	cmp	r2, #1
   d8784:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8788:	bf28      	it	cs
   d878a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d878e:	fa43 f305 	asr.w	r3, r3, r5
   d8792:	18c0      	adds	r0, r0, r3
   d8794:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8798:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d879c:	d507      	bpl.n	d87ae <__adddf3+0xe6>
   d879e:	f04f 0e00 	mov.w	lr, #0
   d87a2:	f1dc 0c00 	rsbs	ip, ip, #0
   d87a6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d87aa:	eb6e 0101 	sbc.w	r1, lr, r1
   d87ae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d87b2:	d31b      	bcc.n	d87ec <__adddf3+0x124>
   d87b4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d87b8:	d30c      	bcc.n	d87d4 <__adddf3+0x10c>
   d87ba:	0849      	lsrs	r1, r1, #1
   d87bc:	ea5f 0030 	movs.w	r0, r0, rrx
   d87c0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d87c4:	f104 0401 	add.w	r4, r4, #1
   d87c8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d87cc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d87d0:	f080 809a 	bcs.w	d8908 <__adddf3+0x240>
   d87d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d87d8:	bf08      	it	eq
   d87da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d87de:	f150 0000 	adcs.w	r0, r0, #0
   d87e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d87e6:	ea41 0105 	orr.w	r1, r1, r5
   d87ea:	bd30      	pop	{r4, r5, pc}
   d87ec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d87f0:	4140      	adcs	r0, r0
   d87f2:	eb41 0101 	adc.w	r1, r1, r1
   d87f6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d87fa:	f1a4 0401 	sub.w	r4, r4, #1
   d87fe:	d1e9      	bne.n	d87d4 <__adddf3+0x10c>
   d8800:	f091 0f00 	teq	r1, #0
   d8804:	bf04      	itt	eq
   d8806:	4601      	moveq	r1, r0
   d8808:	2000      	moveq	r0, #0
   d880a:	fab1 f381 	clz	r3, r1
   d880e:	bf08      	it	eq
   d8810:	3320      	addeq	r3, #32
   d8812:	f1a3 030b 	sub.w	r3, r3, #11
   d8816:	f1b3 0220 	subs.w	r2, r3, #32
   d881a:	da0c      	bge.n	d8836 <__adddf3+0x16e>
   d881c:	320c      	adds	r2, #12
   d881e:	dd08      	ble.n	d8832 <__adddf3+0x16a>
   d8820:	f102 0c14 	add.w	ip, r2, #20
   d8824:	f1c2 020c 	rsb	r2, r2, #12
   d8828:	fa01 f00c 	lsl.w	r0, r1, ip
   d882c:	fa21 f102 	lsr.w	r1, r1, r2
   d8830:	e00c      	b.n	d884c <__adddf3+0x184>
   d8832:	f102 0214 	add.w	r2, r2, #20
   d8836:	bfd8      	it	le
   d8838:	f1c2 0c20 	rsble	ip, r2, #32
   d883c:	fa01 f102 	lsl.w	r1, r1, r2
   d8840:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8844:	bfdc      	itt	le
   d8846:	ea41 010c 	orrle.w	r1, r1, ip
   d884a:	4090      	lslle	r0, r2
   d884c:	1ae4      	subs	r4, r4, r3
   d884e:	bfa2      	ittt	ge
   d8850:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8854:	4329      	orrge	r1, r5
   d8856:	bd30      	popge	{r4, r5, pc}
   d8858:	ea6f 0404 	mvn.w	r4, r4
   d885c:	3c1f      	subs	r4, #31
   d885e:	da1c      	bge.n	d889a <__adddf3+0x1d2>
   d8860:	340c      	adds	r4, #12
   d8862:	dc0e      	bgt.n	d8882 <__adddf3+0x1ba>
   d8864:	f104 0414 	add.w	r4, r4, #20
   d8868:	f1c4 0220 	rsb	r2, r4, #32
   d886c:	fa20 f004 	lsr.w	r0, r0, r4
   d8870:	fa01 f302 	lsl.w	r3, r1, r2
   d8874:	ea40 0003 	orr.w	r0, r0, r3
   d8878:	fa21 f304 	lsr.w	r3, r1, r4
   d887c:	ea45 0103 	orr.w	r1, r5, r3
   d8880:	bd30      	pop	{r4, r5, pc}
   d8882:	f1c4 040c 	rsb	r4, r4, #12
   d8886:	f1c4 0220 	rsb	r2, r4, #32
   d888a:	fa20 f002 	lsr.w	r0, r0, r2
   d888e:	fa01 f304 	lsl.w	r3, r1, r4
   d8892:	ea40 0003 	orr.w	r0, r0, r3
   d8896:	4629      	mov	r1, r5
   d8898:	bd30      	pop	{r4, r5, pc}
   d889a:	fa21 f004 	lsr.w	r0, r1, r4
   d889e:	4629      	mov	r1, r5
   d88a0:	bd30      	pop	{r4, r5, pc}
   d88a2:	f094 0f00 	teq	r4, #0
   d88a6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d88aa:	bf06      	itte	eq
   d88ac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d88b0:	3401      	addeq	r4, #1
   d88b2:	3d01      	subne	r5, #1
   d88b4:	e74e      	b.n	d8754 <__adddf3+0x8c>
   d88b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d88ba:	bf18      	it	ne
   d88bc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d88c0:	d029      	beq.n	d8916 <__adddf3+0x24e>
   d88c2:	ea94 0f05 	teq	r4, r5
   d88c6:	bf08      	it	eq
   d88c8:	ea90 0f02 	teqeq	r0, r2
   d88cc:	d005      	beq.n	d88da <__adddf3+0x212>
   d88ce:	ea54 0c00 	orrs.w	ip, r4, r0
   d88d2:	bf04      	itt	eq
   d88d4:	4619      	moveq	r1, r3
   d88d6:	4610      	moveq	r0, r2
   d88d8:	bd30      	pop	{r4, r5, pc}
   d88da:	ea91 0f03 	teq	r1, r3
   d88de:	bf1e      	ittt	ne
   d88e0:	2100      	movne	r1, #0
   d88e2:	2000      	movne	r0, #0
   d88e4:	bd30      	popne	{r4, r5, pc}
   d88e6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d88ea:	d105      	bne.n	d88f8 <__adddf3+0x230>
   d88ec:	0040      	lsls	r0, r0, #1
   d88ee:	4149      	adcs	r1, r1
   d88f0:	bf28      	it	cs
   d88f2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d88f6:	bd30      	pop	{r4, r5, pc}
   d88f8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d88fc:	bf3c      	itt	cc
   d88fe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8902:	bd30      	popcc	{r4, r5, pc}
   d8904:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8908:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d890c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8910:	f04f 0000 	mov.w	r0, #0
   d8914:	bd30      	pop	{r4, r5, pc}
   d8916:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d891a:	bf1a      	itte	ne
   d891c:	4619      	movne	r1, r3
   d891e:	4610      	movne	r0, r2
   d8920:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8924:	bf1c      	itt	ne
   d8926:	460b      	movne	r3, r1
   d8928:	4602      	movne	r2, r0
   d892a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d892e:	bf06      	itte	eq
   d8930:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8934:	ea91 0f03 	teqeq	r1, r3
   d8938:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d893c:	bd30      	pop	{r4, r5, pc}
   d893e:	bf00      	nop

000d8940 <__aeabi_ui2d>:
   d8940:	f090 0f00 	teq	r0, #0
   d8944:	bf04      	itt	eq
   d8946:	2100      	moveq	r1, #0
   d8948:	4770      	bxeq	lr
   d894a:	b530      	push	{r4, r5, lr}
   d894c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8950:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8954:	f04f 0500 	mov.w	r5, #0
   d8958:	f04f 0100 	mov.w	r1, #0
   d895c:	e750      	b.n	d8800 <__adddf3+0x138>
   d895e:	bf00      	nop

000d8960 <__aeabi_i2d>:
   d8960:	f090 0f00 	teq	r0, #0
   d8964:	bf04      	itt	eq
   d8966:	2100      	moveq	r1, #0
   d8968:	4770      	bxeq	lr
   d896a:	b530      	push	{r4, r5, lr}
   d896c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8970:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8974:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8978:	bf48      	it	mi
   d897a:	4240      	negmi	r0, r0
   d897c:	f04f 0100 	mov.w	r1, #0
   d8980:	e73e      	b.n	d8800 <__adddf3+0x138>
   d8982:	bf00      	nop

000d8984 <__aeabi_f2d>:
   d8984:	0042      	lsls	r2, r0, #1
   d8986:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d898a:	ea4f 0131 	mov.w	r1, r1, rrx
   d898e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8992:	bf1f      	itttt	ne
   d8994:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8998:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d899c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d89a0:	4770      	bxne	lr
   d89a2:	f092 0f00 	teq	r2, #0
   d89a6:	bf14      	ite	ne
   d89a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d89ac:	4770      	bxeq	lr
   d89ae:	b530      	push	{r4, r5, lr}
   d89b0:	f44f 7460 	mov.w	r4, #896	; 0x380
   d89b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d89b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d89bc:	e720      	b.n	d8800 <__adddf3+0x138>
   d89be:	bf00      	nop

000d89c0 <__aeabi_ul2d>:
   d89c0:	ea50 0201 	orrs.w	r2, r0, r1
   d89c4:	bf08      	it	eq
   d89c6:	4770      	bxeq	lr
   d89c8:	b530      	push	{r4, r5, lr}
   d89ca:	f04f 0500 	mov.w	r5, #0
   d89ce:	e00a      	b.n	d89e6 <__aeabi_l2d+0x16>

000d89d0 <__aeabi_l2d>:
   d89d0:	ea50 0201 	orrs.w	r2, r0, r1
   d89d4:	bf08      	it	eq
   d89d6:	4770      	bxeq	lr
   d89d8:	b530      	push	{r4, r5, lr}
   d89da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d89de:	d502      	bpl.n	d89e6 <__aeabi_l2d+0x16>
   d89e0:	4240      	negs	r0, r0
   d89e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d89e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d89ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d89ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d89f2:	f43f aedc 	beq.w	d87ae <__adddf3+0xe6>
   d89f6:	f04f 0203 	mov.w	r2, #3
   d89fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d89fe:	bf18      	it	ne
   d8a00:	3203      	addne	r2, #3
   d8a02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8a06:	bf18      	it	ne
   d8a08:	3203      	addne	r2, #3
   d8a0a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8a0e:	f1c2 0320 	rsb	r3, r2, #32
   d8a12:	fa00 fc03 	lsl.w	ip, r0, r3
   d8a16:	fa20 f002 	lsr.w	r0, r0, r2
   d8a1a:	fa01 fe03 	lsl.w	lr, r1, r3
   d8a1e:	ea40 000e 	orr.w	r0, r0, lr
   d8a22:	fa21 f102 	lsr.w	r1, r1, r2
   d8a26:	4414      	add	r4, r2
   d8a28:	e6c1      	b.n	d87ae <__adddf3+0xe6>
   d8a2a:	bf00      	nop

000d8a2c <__aeabi_dmul>:
   d8a2c:	b570      	push	{r4, r5, r6, lr}
   d8a2e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8a32:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8a36:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8a3a:	bf1d      	ittte	ne
   d8a3c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8a40:	ea94 0f0c 	teqne	r4, ip
   d8a44:	ea95 0f0c 	teqne	r5, ip
   d8a48:	f000 f8de 	bleq	d8c08 <__aeabi_dmul+0x1dc>
   d8a4c:	442c      	add	r4, r5
   d8a4e:	ea81 0603 	eor.w	r6, r1, r3
   d8a52:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8a56:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8a5a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8a5e:	bf18      	it	ne
   d8a60:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8a64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8a68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8a6c:	d038      	beq.n	d8ae0 <__aeabi_dmul+0xb4>
   d8a6e:	fba0 ce02 	umull	ip, lr, r0, r2
   d8a72:	f04f 0500 	mov.w	r5, #0
   d8a76:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8a7a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8a7e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8a82:	f04f 0600 	mov.w	r6, #0
   d8a86:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8a8a:	f09c 0f00 	teq	ip, #0
   d8a8e:	bf18      	it	ne
   d8a90:	f04e 0e01 	orrne.w	lr, lr, #1
   d8a94:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8a98:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8a9c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8aa0:	d204      	bcs.n	d8aac <__aeabi_dmul+0x80>
   d8aa2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8aa6:	416d      	adcs	r5, r5
   d8aa8:	eb46 0606 	adc.w	r6, r6, r6
   d8aac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8ab0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8ab4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8ab8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8abc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8ac0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8ac4:	bf88      	it	hi
   d8ac6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8aca:	d81e      	bhi.n	d8b0a <__aeabi_dmul+0xde>
   d8acc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8ad0:	bf08      	it	eq
   d8ad2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8ad6:	f150 0000 	adcs.w	r0, r0, #0
   d8ada:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8ade:	bd70      	pop	{r4, r5, r6, pc}
   d8ae0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8ae4:	ea46 0101 	orr.w	r1, r6, r1
   d8ae8:	ea40 0002 	orr.w	r0, r0, r2
   d8aec:	ea81 0103 	eor.w	r1, r1, r3
   d8af0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8af4:	bfc2      	ittt	gt
   d8af6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8afa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8afe:	bd70      	popgt	{r4, r5, r6, pc}
   d8b00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8b04:	f04f 0e00 	mov.w	lr, #0
   d8b08:	3c01      	subs	r4, #1
   d8b0a:	f300 80ab 	bgt.w	d8c64 <__aeabi_dmul+0x238>
   d8b0e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8b12:	bfde      	ittt	le
   d8b14:	2000      	movle	r0, #0
   d8b16:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8b1a:	bd70      	pople	{r4, r5, r6, pc}
   d8b1c:	f1c4 0400 	rsb	r4, r4, #0
   d8b20:	3c20      	subs	r4, #32
   d8b22:	da35      	bge.n	d8b90 <__aeabi_dmul+0x164>
   d8b24:	340c      	adds	r4, #12
   d8b26:	dc1b      	bgt.n	d8b60 <__aeabi_dmul+0x134>
   d8b28:	f104 0414 	add.w	r4, r4, #20
   d8b2c:	f1c4 0520 	rsb	r5, r4, #32
   d8b30:	fa00 f305 	lsl.w	r3, r0, r5
   d8b34:	fa20 f004 	lsr.w	r0, r0, r4
   d8b38:	fa01 f205 	lsl.w	r2, r1, r5
   d8b3c:	ea40 0002 	orr.w	r0, r0, r2
   d8b40:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8b44:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8b48:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8b4c:	fa21 f604 	lsr.w	r6, r1, r4
   d8b50:	eb42 0106 	adc.w	r1, r2, r6
   d8b54:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8b58:	bf08      	it	eq
   d8b5a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8b5e:	bd70      	pop	{r4, r5, r6, pc}
   d8b60:	f1c4 040c 	rsb	r4, r4, #12
   d8b64:	f1c4 0520 	rsb	r5, r4, #32
   d8b68:	fa00 f304 	lsl.w	r3, r0, r4
   d8b6c:	fa20 f005 	lsr.w	r0, r0, r5
   d8b70:	fa01 f204 	lsl.w	r2, r1, r4
   d8b74:	ea40 0002 	orr.w	r0, r0, r2
   d8b78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8b7c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8b80:	f141 0100 	adc.w	r1, r1, #0
   d8b84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8b88:	bf08      	it	eq
   d8b8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8b8e:	bd70      	pop	{r4, r5, r6, pc}
   d8b90:	f1c4 0520 	rsb	r5, r4, #32
   d8b94:	fa00 f205 	lsl.w	r2, r0, r5
   d8b98:	ea4e 0e02 	orr.w	lr, lr, r2
   d8b9c:	fa20 f304 	lsr.w	r3, r0, r4
   d8ba0:	fa01 f205 	lsl.w	r2, r1, r5
   d8ba4:	ea43 0302 	orr.w	r3, r3, r2
   d8ba8:	fa21 f004 	lsr.w	r0, r1, r4
   d8bac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8bb0:	fa21 f204 	lsr.w	r2, r1, r4
   d8bb4:	ea20 0002 	bic.w	r0, r0, r2
   d8bb8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8bbc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8bc0:	bf08      	it	eq
   d8bc2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8bc6:	bd70      	pop	{r4, r5, r6, pc}
   d8bc8:	f094 0f00 	teq	r4, #0
   d8bcc:	d10f      	bne.n	d8bee <__aeabi_dmul+0x1c2>
   d8bce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8bd2:	0040      	lsls	r0, r0, #1
   d8bd4:	eb41 0101 	adc.w	r1, r1, r1
   d8bd8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8bdc:	bf08      	it	eq
   d8bde:	3c01      	subeq	r4, #1
   d8be0:	d0f7      	beq.n	d8bd2 <__aeabi_dmul+0x1a6>
   d8be2:	ea41 0106 	orr.w	r1, r1, r6
   d8be6:	f095 0f00 	teq	r5, #0
   d8bea:	bf18      	it	ne
   d8bec:	4770      	bxne	lr
   d8bee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8bf2:	0052      	lsls	r2, r2, #1
   d8bf4:	eb43 0303 	adc.w	r3, r3, r3
   d8bf8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8bfc:	bf08      	it	eq
   d8bfe:	3d01      	subeq	r5, #1
   d8c00:	d0f7      	beq.n	d8bf2 <__aeabi_dmul+0x1c6>
   d8c02:	ea43 0306 	orr.w	r3, r3, r6
   d8c06:	4770      	bx	lr
   d8c08:	ea94 0f0c 	teq	r4, ip
   d8c0c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8c10:	bf18      	it	ne
   d8c12:	ea95 0f0c 	teqne	r5, ip
   d8c16:	d00c      	beq.n	d8c32 <__aeabi_dmul+0x206>
   d8c18:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8c1c:	bf18      	it	ne
   d8c1e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8c22:	d1d1      	bne.n	d8bc8 <__aeabi_dmul+0x19c>
   d8c24:	ea81 0103 	eor.w	r1, r1, r3
   d8c28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8c2c:	f04f 0000 	mov.w	r0, #0
   d8c30:	bd70      	pop	{r4, r5, r6, pc}
   d8c32:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8c36:	bf06      	itte	eq
   d8c38:	4610      	moveq	r0, r2
   d8c3a:	4619      	moveq	r1, r3
   d8c3c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8c40:	d019      	beq.n	d8c76 <__aeabi_dmul+0x24a>
   d8c42:	ea94 0f0c 	teq	r4, ip
   d8c46:	d102      	bne.n	d8c4e <__aeabi_dmul+0x222>
   d8c48:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8c4c:	d113      	bne.n	d8c76 <__aeabi_dmul+0x24a>
   d8c4e:	ea95 0f0c 	teq	r5, ip
   d8c52:	d105      	bne.n	d8c60 <__aeabi_dmul+0x234>
   d8c54:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8c58:	bf1c      	itt	ne
   d8c5a:	4610      	movne	r0, r2
   d8c5c:	4619      	movne	r1, r3
   d8c5e:	d10a      	bne.n	d8c76 <__aeabi_dmul+0x24a>
   d8c60:	ea81 0103 	eor.w	r1, r1, r3
   d8c64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8c68:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8c6c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8c70:	f04f 0000 	mov.w	r0, #0
   d8c74:	bd70      	pop	{r4, r5, r6, pc}
   d8c76:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8c7a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8c7e:	bd70      	pop	{r4, r5, r6, pc}

000d8c80 <__aeabi_ddiv>:
   d8c80:	b570      	push	{r4, r5, r6, lr}
   d8c82:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8c86:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8c8a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8c8e:	bf1d      	ittte	ne
   d8c90:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8c94:	ea94 0f0c 	teqne	r4, ip
   d8c98:	ea95 0f0c 	teqne	r5, ip
   d8c9c:	f000 f8a7 	bleq	d8dee <__aeabi_ddiv+0x16e>
   d8ca0:	eba4 0405 	sub.w	r4, r4, r5
   d8ca4:	ea81 0e03 	eor.w	lr, r1, r3
   d8ca8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8cac:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8cb0:	f000 8088 	beq.w	d8dc4 <__aeabi_ddiv+0x144>
   d8cb4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8cb8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8cbc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8cc0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8cc4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8cc8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8ccc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8cd0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8cd4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8cd8:	429d      	cmp	r5, r3
   d8cda:	bf08      	it	eq
   d8cdc:	4296      	cmpeq	r6, r2
   d8cde:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8ce2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8ce6:	d202      	bcs.n	d8cee <__aeabi_ddiv+0x6e>
   d8ce8:	085b      	lsrs	r3, r3, #1
   d8cea:	ea4f 0232 	mov.w	r2, r2, rrx
   d8cee:	1ab6      	subs	r6, r6, r2
   d8cf0:	eb65 0503 	sbc.w	r5, r5, r3
   d8cf4:	085b      	lsrs	r3, r3, #1
   d8cf6:	ea4f 0232 	mov.w	r2, r2, rrx
   d8cfa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8cfe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8d02:	ebb6 0e02 	subs.w	lr, r6, r2
   d8d06:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8d0a:	bf22      	ittt	cs
   d8d0c:	1ab6      	subcs	r6, r6, r2
   d8d0e:	4675      	movcs	r5, lr
   d8d10:	ea40 000c 	orrcs.w	r0, r0, ip
   d8d14:	085b      	lsrs	r3, r3, #1
   d8d16:	ea4f 0232 	mov.w	r2, r2, rrx
   d8d1a:	ebb6 0e02 	subs.w	lr, r6, r2
   d8d1e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8d22:	bf22      	ittt	cs
   d8d24:	1ab6      	subcs	r6, r6, r2
   d8d26:	4675      	movcs	r5, lr
   d8d28:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8d2c:	085b      	lsrs	r3, r3, #1
   d8d2e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8d32:	ebb6 0e02 	subs.w	lr, r6, r2
   d8d36:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8d3a:	bf22      	ittt	cs
   d8d3c:	1ab6      	subcs	r6, r6, r2
   d8d3e:	4675      	movcs	r5, lr
   d8d40:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8d44:	085b      	lsrs	r3, r3, #1
   d8d46:	ea4f 0232 	mov.w	r2, r2, rrx
   d8d4a:	ebb6 0e02 	subs.w	lr, r6, r2
   d8d4e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8d52:	bf22      	ittt	cs
   d8d54:	1ab6      	subcs	r6, r6, r2
   d8d56:	4675      	movcs	r5, lr
   d8d58:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8d5c:	ea55 0e06 	orrs.w	lr, r5, r6
   d8d60:	d018      	beq.n	d8d94 <__aeabi_ddiv+0x114>
   d8d62:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8d66:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8d6a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8d6e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8d72:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8d76:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8d7a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8d7e:	d1c0      	bne.n	d8d02 <__aeabi_ddiv+0x82>
   d8d80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8d84:	d10b      	bne.n	d8d9e <__aeabi_ddiv+0x11e>
   d8d86:	ea41 0100 	orr.w	r1, r1, r0
   d8d8a:	f04f 0000 	mov.w	r0, #0
   d8d8e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8d92:	e7b6      	b.n	d8d02 <__aeabi_ddiv+0x82>
   d8d94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8d98:	bf04      	itt	eq
   d8d9a:	4301      	orreq	r1, r0
   d8d9c:	2000      	moveq	r0, #0
   d8d9e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8da2:	bf88      	it	hi
   d8da4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8da8:	f63f aeaf 	bhi.w	d8b0a <__aeabi_dmul+0xde>
   d8dac:	ebb5 0c03 	subs.w	ip, r5, r3
   d8db0:	bf04      	itt	eq
   d8db2:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8db6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8dba:	f150 0000 	adcs.w	r0, r0, #0
   d8dbe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8dc2:	bd70      	pop	{r4, r5, r6, pc}
   d8dc4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8dc8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8dcc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8dd0:	bfc2      	ittt	gt
   d8dd2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8dd6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8dda:	bd70      	popgt	{r4, r5, r6, pc}
   d8ddc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8de0:	f04f 0e00 	mov.w	lr, #0
   d8de4:	3c01      	subs	r4, #1
   d8de6:	e690      	b.n	d8b0a <__aeabi_dmul+0xde>
   d8de8:	ea45 0e06 	orr.w	lr, r5, r6
   d8dec:	e68d      	b.n	d8b0a <__aeabi_dmul+0xde>
   d8dee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8df2:	ea94 0f0c 	teq	r4, ip
   d8df6:	bf08      	it	eq
   d8df8:	ea95 0f0c 	teqeq	r5, ip
   d8dfc:	f43f af3b 	beq.w	d8c76 <__aeabi_dmul+0x24a>
   d8e00:	ea94 0f0c 	teq	r4, ip
   d8e04:	d10a      	bne.n	d8e1c <__aeabi_ddiv+0x19c>
   d8e06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8e0a:	f47f af34 	bne.w	d8c76 <__aeabi_dmul+0x24a>
   d8e0e:	ea95 0f0c 	teq	r5, ip
   d8e12:	f47f af25 	bne.w	d8c60 <__aeabi_dmul+0x234>
   d8e16:	4610      	mov	r0, r2
   d8e18:	4619      	mov	r1, r3
   d8e1a:	e72c      	b.n	d8c76 <__aeabi_dmul+0x24a>
   d8e1c:	ea95 0f0c 	teq	r5, ip
   d8e20:	d106      	bne.n	d8e30 <__aeabi_ddiv+0x1b0>
   d8e22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8e26:	f43f aefd 	beq.w	d8c24 <__aeabi_dmul+0x1f8>
   d8e2a:	4610      	mov	r0, r2
   d8e2c:	4619      	mov	r1, r3
   d8e2e:	e722      	b.n	d8c76 <__aeabi_dmul+0x24a>
   d8e30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8e34:	bf18      	it	ne
   d8e36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8e3a:	f47f aec5 	bne.w	d8bc8 <__aeabi_dmul+0x19c>
   d8e3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8e42:	f47f af0d 	bne.w	d8c60 <__aeabi_dmul+0x234>
   d8e46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8e4a:	f47f aeeb 	bne.w	d8c24 <__aeabi_dmul+0x1f8>
   d8e4e:	e712      	b.n	d8c76 <__aeabi_dmul+0x24a>

000d8e50 <__gedf2>:
   d8e50:	f04f 3cff 	mov.w	ip, #4294967295
   d8e54:	e006      	b.n	d8e64 <__cmpdf2+0x4>
   d8e56:	bf00      	nop

000d8e58 <__ledf2>:
   d8e58:	f04f 0c01 	mov.w	ip, #1
   d8e5c:	e002      	b.n	d8e64 <__cmpdf2+0x4>
   d8e5e:	bf00      	nop

000d8e60 <__cmpdf2>:
   d8e60:	f04f 0c01 	mov.w	ip, #1
   d8e64:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8e68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8e6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8e70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8e74:	bf18      	it	ne
   d8e76:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8e7a:	d01b      	beq.n	d8eb4 <__cmpdf2+0x54>
   d8e7c:	b001      	add	sp, #4
   d8e7e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8e82:	bf0c      	ite	eq
   d8e84:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8e88:	ea91 0f03 	teqne	r1, r3
   d8e8c:	bf02      	ittt	eq
   d8e8e:	ea90 0f02 	teqeq	r0, r2
   d8e92:	2000      	moveq	r0, #0
   d8e94:	4770      	bxeq	lr
   d8e96:	f110 0f00 	cmn.w	r0, #0
   d8e9a:	ea91 0f03 	teq	r1, r3
   d8e9e:	bf58      	it	pl
   d8ea0:	4299      	cmppl	r1, r3
   d8ea2:	bf08      	it	eq
   d8ea4:	4290      	cmpeq	r0, r2
   d8ea6:	bf2c      	ite	cs
   d8ea8:	17d8      	asrcs	r0, r3, #31
   d8eaa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8eae:	f040 0001 	orr.w	r0, r0, #1
   d8eb2:	4770      	bx	lr
   d8eb4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8eb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8ebc:	d102      	bne.n	d8ec4 <__cmpdf2+0x64>
   d8ebe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8ec2:	d107      	bne.n	d8ed4 <__cmpdf2+0x74>
   d8ec4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8ec8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8ecc:	d1d6      	bne.n	d8e7c <__cmpdf2+0x1c>
   d8ece:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8ed2:	d0d3      	beq.n	d8e7c <__cmpdf2+0x1c>
   d8ed4:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8ed8:	4770      	bx	lr
   d8eda:	bf00      	nop

000d8edc <__aeabi_cdrcmple>:
   d8edc:	4684      	mov	ip, r0
   d8ede:	4610      	mov	r0, r2
   d8ee0:	4662      	mov	r2, ip
   d8ee2:	468c      	mov	ip, r1
   d8ee4:	4619      	mov	r1, r3
   d8ee6:	4663      	mov	r3, ip
   d8ee8:	e000      	b.n	d8eec <__aeabi_cdcmpeq>
   d8eea:	bf00      	nop

000d8eec <__aeabi_cdcmpeq>:
   d8eec:	b501      	push	{r0, lr}
   d8eee:	f7ff ffb7 	bl	d8e60 <__cmpdf2>
   d8ef2:	2800      	cmp	r0, #0
   d8ef4:	bf48      	it	mi
   d8ef6:	f110 0f00 	cmnmi.w	r0, #0
   d8efa:	bd01      	pop	{r0, pc}

000d8efc <__aeabi_dcmpeq>:
   d8efc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8f00:	f7ff fff4 	bl	d8eec <__aeabi_cdcmpeq>
   d8f04:	bf0c      	ite	eq
   d8f06:	2001      	moveq	r0, #1
   d8f08:	2000      	movne	r0, #0
   d8f0a:	f85d fb08 	ldr.w	pc, [sp], #8
   d8f0e:	bf00      	nop

000d8f10 <__aeabi_dcmplt>:
   d8f10:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8f14:	f7ff ffea 	bl	d8eec <__aeabi_cdcmpeq>
   d8f18:	bf34      	ite	cc
   d8f1a:	2001      	movcc	r0, #1
   d8f1c:	2000      	movcs	r0, #0
   d8f1e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8f22:	bf00      	nop

000d8f24 <__aeabi_dcmple>:
   d8f24:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8f28:	f7ff ffe0 	bl	d8eec <__aeabi_cdcmpeq>
   d8f2c:	bf94      	ite	ls
   d8f2e:	2001      	movls	r0, #1
   d8f30:	2000      	movhi	r0, #0
   d8f32:	f85d fb08 	ldr.w	pc, [sp], #8
   d8f36:	bf00      	nop

000d8f38 <__aeabi_dcmpge>:
   d8f38:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8f3c:	f7ff ffce 	bl	d8edc <__aeabi_cdrcmple>
   d8f40:	bf94      	ite	ls
   d8f42:	2001      	movls	r0, #1
   d8f44:	2000      	movhi	r0, #0
   d8f46:	f85d fb08 	ldr.w	pc, [sp], #8
   d8f4a:	bf00      	nop

000d8f4c <__aeabi_dcmpgt>:
   d8f4c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8f50:	f7ff ffc4 	bl	d8edc <__aeabi_cdrcmple>
   d8f54:	bf34      	ite	cc
   d8f56:	2001      	movcc	r0, #1
   d8f58:	2000      	movcs	r0, #0
   d8f5a:	f85d fb08 	ldr.w	pc, [sp], #8
   d8f5e:	bf00      	nop

000d8f60 <__aeabi_dcmpun>:
   d8f60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8f64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8f68:	d102      	bne.n	d8f70 <__aeabi_dcmpun+0x10>
   d8f6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8f6e:	d10a      	bne.n	d8f86 <__aeabi_dcmpun+0x26>
   d8f70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8f74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8f78:	d102      	bne.n	d8f80 <__aeabi_dcmpun+0x20>
   d8f7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8f7e:	d102      	bne.n	d8f86 <__aeabi_dcmpun+0x26>
   d8f80:	f04f 0000 	mov.w	r0, #0
   d8f84:	4770      	bx	lr
   d8f86:	f04f 0001 	mov.w	r0, #1
   d8f8a:	4770      	bx	lr

000d8f8c <__aeabi_d2iz>:
   d8f8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8f90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8f94:	d215      	bcs.n	d8fc2 <__aeabi_d2iz+0x36>
   d8f96:	d511      	bpl.n	d8fbc <__aeabi_d2iz+0x30>
   d8f98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8f9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8fa0:	d912      	bls.n	d8fc8 <__aeabi_d2iz+0x3c>
   d8fa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8fa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8faa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8fae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8fb2:	fa23 f002 	lsr.w	r0, r3, r2
   d8fb6:	bf18      	it	ne
   d8fb8:	4240      	negne	r0, r0
   d8fba:	4770      	bx	lr
   d8fbc:	f04f 0000 	mov.w	r0, #0
   d8fc0:	4770      	bx	lr
   d8fc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8fc6:	d105      	bne.n	d8fd4 <__aeabi_d2iz+0x48>
   d8fc8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d8fcc:	bf08      	it	eq
   d8fce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8fd2:	4770      	bx	lr
   d8fd4:	f04f 0000 	mov.w	r0, #0
   d8fd8:	4770      	bx	lr
   d8fda:	bf00      	nop

000d8fdc <__aeabi_d2uiz>:
   d8fdc:	004a      	lsls	r2, r1, #1
   d8fde:	d211      	bcs.n	d9004 <__aeabi_d2uiz+0x28>
   d8fe0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8fe4:	d211      	bcs.n	d900a <__aeabi_d2uiz+0x2e>
   d8fe6:	d50d      	bpl.n	d9004 <__aeabi_d2uiz+0x28>
   d8fe8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8fec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8ff0:	d40e      	bmi.n	d9010 <__aeabi_d2uiz+0x34>
   d8ff2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8ff6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8ffa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8ffe:	fa23 f002 	lsr.w	r0, r3, r2
   d9002:	4770      	bx	lr
   d9004:	f04f 0000 	mov.w	r0, #0
   d9008:	4770      	bx	lr
   d900a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d900e:	d102      	bne.n	d9016 <__aeabi_d2uiz+0x3a>
   d9010:	f04f 30ff 	mov.w	r0, #4294967295
   d9014:	4770      	bx	lr
   d9016:	f04f 0000 	mov.w	r0, #0
   d901a:	4770      	bx	lr

000d901c <__aeabi_d2f>:
   d901c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9020:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d9024:	bf24      	itt	cs
   d9026:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d902a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d902e:	d90d      	bls.n	d904c <__aeabi_d2f+0x30>
   d9030:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9034:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d9038:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d903c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d9040:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9044:	bf08      	it	eq
   d9046:	f020 0001 	biceq.w	r0, r0, #1
   d904a:	4770      	bx	lr
   d904c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d9050:	d121      	bne.n	d9096 <__aeabi_d2f+0x7a>
   d9052:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d9056:	bfbc      	itt	lt
   d9058:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d905c:	4770      	bxlt	lr
   d905e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9062:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d9066:	f1c2 0218 	rsb	r2, r2, #24
   d906a:	f1c2 0c20 	rsb	ip, r2, #32
   d906e:	fa10 f30c 	lsls.w	r3, r0, ip
   d9072:	fa20 f002 	lsr.w	r0, r0, r2
   d9076:	bf18      	it	ne
   d9078:	f040 0001 	orrne.w	r0, r0, #1
   d907c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9080:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9084:	fa03 fc0c 	lsl.w	ip, r3, ip
   d9088:	ea40 000c 	orr.w	r0, r0, ip
   d908c:	fa23 f302 	lsr.w	r3, r3, r2
   d9090:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9094:	e7cc      	b.n	d9030 <__aeabi_d2f+0x14>
   d9096:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d909a:	d107      	bne.n	d90ac <__aeabi_d2f+0x90>
   d909c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d90a0:	bf1e      	ittt	ne
   d90a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d90a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d90aa:	4770      	bxne	lr
   d90ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d90b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d90b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d90b8:	4770      	bx	lr
   d90ba:	bf00      	nop

000d90bc <__cxa_atexit>:
   d90bc:	b510      	push	{r4, lr}
   d90be:	4c05      	ldr	r4, [pc, #20]	; (d90d4 <__cxa_atexit+0x18>)
   d90c0:	4613      	mov	r3, r2
   d90c2:	b12c      	cbz	r4, d90d0 <__cxa_atexit+0x14>
   d90c4:	460a      	mov	r2, r1
   d90c6:	4601      	mov	r1, r0
   d90c8:	2002      	movs	r0, #2
   d90ca:	f3af 8000 	nop.w
   d90ce:	bd10      	pop	{r4, pc}
   d90d0:	4620      	mov	r0, r4
   d90d2:	bd10      	pop	{r4, pc}
   d90d4:	00000000 	.word	0x00000000

000d90d8 <memcmp>:
   d90d8:	b510      	push	{r4, lr}
   d90da:	3901      	subs	r1, #1
   d90dc:	4402      	add	r2, r0
   d90de:	4290      	cmp	r0, r2
   d90e0:	d007      	beq.n	d90f2 <memcmp+0x1a>
   d90e2:	f810 3b01 	ldrb.w	r3, [r0], #1
   d90e6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d90ea:	42a3      	cmp	r3, r4
   d90ec:	d0f7      	beq.n	d90de <memcmp+0x6>
   d90ee:	1b18      	subs	r0, r3, r4
   d90f0:	bd10      	pop	{r4, pc}
   d90f2:	2000      	movs	r0, #0
   d90f4:	bd10      	pop	{r4, pc}

000d90f6 <memcpy>:
   d90f6:	b510      	push	{r4, lr}
   d90f8:	1e43      	subs	r3, r0, #1
   d90fa:	440a      	add	r2, r1
   d90fc:	4291      	cmp	r1, r2
   d90fe:	d004      	beq.n	d910a <memcpy+0x14>
   d9100:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9104:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9108:	e7f8      	b.n	d90fc <memcpy+0x6>
   d910a:	bd10      	pop	{r4, pc}

000d910c <memset>:
   d910c:	4402      	add	r2, r0
   d910e:	4603      	mov	r3, r0
   d9110:	4293      	cmp	r3, r2
   d9112:	d002      	beq.n	d911a <memset+0xe>
   d9114:	f803 1b01 	strb.w	r1, [r3], #1
   d9118:	e7fa      	b.n	d9110 <memset+0x4>
   d911a:	4770      	bx	lr

000d911c <srand>:
   d911c:	b538      	push	{r3, r4, r5, lr}
   d911e:	4b12      	ldr	r3, [pc, #72]	; (d9168 <srand+0x4c>)
   d9120:	681c      	ldr	r4, [r3, #0]
   d9122:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9124:	4605      	mov	r5, r0
   d9126:	b9d3      	cbnz	r3, d915e <srand+0x42>
   d9128:	2018      	movs	r0, #24
   d912a:	f7fd fea5 	bl	d6e78 <malloc>
   d912e:	f243 330e 	movw	r3, #13070	; 0x330e
   d9132:	63a0      	str	r0, [r4, #56]	; 0x38
   d9134:	8003      	strh	r3, [r0, #0]
   d9136:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d913a:	8043      	strh	r3, [r0, #2]
   d913c:	f241 2334 	movw	r3, #4660	; 0x1234
   d9140:	8083      	strh	r3, [r0, #4]
   d9142:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d9146:	80c3      	strh	r3, [r0, #6]
   d9148:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d914c:	8103      	strh	r3, [r0, #8]
   d914e:	2305      	movs	r3, #5
   d9150:	8143      	strh	r3, [r0, #10]
   d9152:	230b      	movs	r3, #11
   d9154:	8183      	strh	r3, [r0, #12]
   d9156:	2201      	movs	r2, #1
   d9158:	2300      	movs	r3, #0
   d915a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d915e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9160:	2200      	movs	r2, #0
   d9162:	611d      	str	r5, [r3, #16]
   d9164:	615a      	str	r2, [r3, #20]
   d9166:	bd38      	pop	{r3, r4, r5, pc}
   d9168:	2003ddf8 	.word	0x2003ddf8

000d916c <rand>:
   d916c:	4b19      	ldr	r3, [pc, #100]	; (d91d4 <rand+0x68>)
   d916e:	b510      	push	{r4, lr}
   d9170:	681c      	ldr	r4, [r3, #0]
   d9172:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9174:	b9d3      	cbnz	r3, d91ac <rand+0x40>
   d9176:	2018      	movs	r0, #24
   d9178:	f7fd fe7e 	bl	d6e78 <malloc>
   d917c:	f243 330e 	movw	r3, #13070	; 0x330e
   d9180:	63a0      	str	r0, [r4, #56]	; 0x38
   d9182:	8003      	strh	r3, [r0, #0]
   d9184:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d9188:	8043      	strh	r3, [r0, #2]
   d918a:	f241 2334 	movw	r3, #4660	; 0x1234
   d918e:	8083      	strh	r3, [r0, #4]
   d9190:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d9194:	80c3      	strh	r3, [r0, #6]
   d9196:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d919a:	8103      	strh	r3, [r0, #8]
   d919c:	2305      	movs	r3, #5
   d919e:	8143      	strh	r3, [r0, #10]
   d91a0:	230b      	movs	r3, #11
   d91a2:	8183      	strh	r3, [r0, #12]
   d91a4:	2201      	movs	r2, #1
   d91a6:	2300      	movs	r3, #0
   d91a8:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d91ac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d91ae:	4c0a      	ldr	r4, [pc, #40]	; (d91d8 <rand+0x6c>)
   d91b0:	690b      	ldr	r3, [r1, #16]
   d91b2:	6948      	ldr	r0, [r1, #20]
   d91b4:	4a09      	ldr	r2, [pc, #36]	; (d91dc <rand+0x70>)
   d91b6:	435c      	muls	r4, r3
   d91b8:	fb02 4000 	mla	r0, r2, r0, r4
   d91bc:	fba3 2302 	umull	r2, r3, r3, r2
   d91c0:	3201      	adds	r2, #1
   d91c2:	4403      	add	r3, r0
   d91c4:	f143 0300 	adc.w	r3, r3, #0
   d91c8:	e9c1 2304 	strd	r2, r3, [r1, #16]
   d91cc:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d91d0:	bd10      	pop	{r4, pc}
   d91d2:	bf00      	nop
   d91d4:	2003ddf8 	.word	0x2003ddf8
   d91d8:	5851f42d 	.word	0x5851f42d
   d91dc:	4c957f2d 	.word	0x4c957f2d

000d91e0 <strlen>:
   d91e0:	4603      	mov	r3, r0
   d91e2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d91e6:	2a00      	cmp	r2, #0
   d91e8:	d1fb      	bne.n	d91e2 <strlen+0x2>
   d91ea:	1a18      	subs	r0, r3, r0
   d91ec:	3801      	subs	r0, #1
   d91ee:	4770      	bx	lr

000d91f0 <dynalib_user>:
   d91f0:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d9200:	0000 0000                                   ....

000d9204 <_ZL17test_button_press>:
   d9204:	2e33 5420 7365 2074 7542 7474 6e6f 5020     3. Test Button P
   d9214:	6572 7373 000a                              ress..

000d921a <_ZL11test_header>:
   d921a:	4749 2048 6853 6569 646c 5420 7365 0074     IGH Shield Test.

000d922a <_ZL9test_fail>:
   d922a:	4520 5252 524f 3f00                               ERROR.

000d9231 <_ZL16test_cmd_options>:
   d9231:	2e3f 4f20 7470 6f69 736e 000a               ?. Options..

000d923d <_ZL14test_flash_cmd>:
   d923d:	2e31 5420 7365 2074 4545 5250 4d4f 000a     1. Test EEPROM..
   d924d:	540a 7365 6974 676e 6620 616c 6873 003a     .Testing flash:.
   d925d:	500a 6572 7373 6220 7475 6f74 206e 6f66     .Press button fo
   d926d:	3a72 0020 5320 6365 6e6f 7364 0a00 6554     r: . Seconds..Te
   d927d:	7473 6e69 2067 7542 7474 6e6f 003a 540a     sting Button:..T
   d928d:	7365 6974 676e 5620 6c61 6576 003a 540a     esting Valve:..T
   d929d:	7365 6974 676e 5320 2044 6143 6472 003a     esting SD Card:.

000d92ad <_ZL15test_device_api>:
   d92ad:	2e32 5420 7365 2074 6544 6976 6563 4120     2. Test Device A
   d92bd:	4950 000a                                   PI..

000d92c1 <_ZL12test_padding>:
   d92c1:	2a0a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     .***************
   d92d1:	000a                                        ..

000d92d3 <_ZL16test_valve_state>:
   d92d3:	2e34 5420 7365 2074 6156 766c 2065 6f43     4. Test Valve Co
   d92e3:	746e 6f72 0a6c 3500                              ntrol..

000d92ea <_ZL12test_sd_card>:
   d92ea:	2e35 5420 7365 2074 4453 4320 7261 0a64     5. Test SD Card.
	...

000d92fb <_ZL12test_success>:
   d92fb:	4f20 004b 0fe0 68ce 759a 0547 9ae7 370e      OK....h.uG....7
   d930b:	6574 7473 622e 6f72 656b 2e72 6f63 006d     test.broker.com.
	...

000d931c <_ZTV5Timer>:
	...
   d9324:	47d5 000d 481d 000d 475d 000d 550a 696e     .G...H..]G...Uni
   d9334:	2078 6954 656d 203a 2020 2020 0020 6c63     x Time:      .cl
   d9344:	756f 2064 7473 7461 7375 203a 2020 2020     oud status:     
   d9354:	6e00 7465 6f77 6b72 7320 6174 7574 3a73     .network status:
   d9364:	2020 0020 6973 6e67 6c61 7320 7274 6e65        .signal stren
   d9374:	7467 3a68 2020 7300 6769 616e 206c 7571     gth:  .signal qu
   d9384:	6c61 7469 3a79 2020 0020 6142 7474 7265     ality:   .Batter
   d9394:	2079 6f56 746c 6761 3a65 2020 4200 7461     y Voltage:  .Bat
   d93a4:	6574 7972 5320 434f 203a 2020 2020 0020     tery SOC:      .

000d93b4 <_ZTVN8particle13__SPISettingsE>:
	...
   d93bc:	4bb9 000d                                   .K..

000d93c0 <_ZTV4File>:
	...
   d93c8:	4bb7 000d 4c4f 000d 4c29 000d 4c1d 000d     .K..OL..)L...L..
   d93d8:	4b99 000d 4c93 000d 4c17 000d 4c11 000d     .K...L...L...L..

000d93e8 <_ZTV6SdFile>:
	...
   d93f0:	4bb5 000d 4c41 000d 4c5d 000d 4c23 000d     .K..AL..]L..#L..
   d9400:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   d9410:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   d9420:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   d9430:	676e 2073 7325 6c25 2075 7325 4d20 444f     ngs %s%lu %s MOD
   d9440:	2545 3e64 2500 3230 2558 3230 2558 3230     E%d>.%02X%02X%02
   d9450:	2558 3230 2e58 4f4c 0047 002f               X%02X.LOG./.

000d945c <_ZTVN5spark13EthernetClassE>:
	...
   d9464:	6f27 000d 6f1d 000d 6f13 000d 6f09 000d     'o...o...o...o..
   d9474:	6efd 000d 6ef1 000d 6ee5 000d 6edd 000d     .n...n...n...n..
   d9484:	6ed3 000d 6ec9 000d 80f9 000d               .n...n......

000d9490 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d9490:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
   d94a0:	002e 6e69 0066 6162 6475 5300 7265 6169     ..inf.baud.Seria
   d94b0:	006c 6553 6972 6c61 0031 7974 6570 7000     l.Serial1.type.p
   d94c0:	7261 6d61 6300 646d 6900 0064 6e68 0064     aram.cmd.id.hnd.
   d94d0:	7473 6d72 6600 6c69 0074 766c 006c 6461     strm.filt.lvl.ad
   d94e0:	4864 6e61 6c64 7265 7200 6d65 766f 4865     dHandler.removeH
   d94f0:	6e61 6c64 7265 6500 756e 486d 6e61 6c64     andler.enumHandl
   d9500:	7265 0073 534a 4e4f 7453 6572 6d61 6f4c     ers.JSONStreamLo
   d9510:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
   d9520:	7530 0020 205d 2500 0064 202c 2800 3a29     0u .] .%d., .():
   d9530:	0020 5b20 6300 646f 2065 203d 2500 0069      . [.code = .%i.
   d9540:	6564 6174 6c69 2073 203d 0d00 000a 6e6c     details = ....ln
   d9550:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d9560:	6f6e 656e 7400 6172 6563 6900 666e 006f     none.trace.info.
   d9570:	6177 6e72 6500 7272 726f 7000 6e61 6369     warn.error.panic
   d9580:	6100 6c6c 5a00 2500 302b 6433 253a 3230     .all.Z.%+03d:%02
   d9590:	0075 5925 252d 2d6d 6425 2554 3a48 4d25     u.%Y-%m-%dT%H:%M
   d95a0:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000d95b0 <_ZTV14CellularSignal>:
	...
   d95b8:	496d 000d 496f 000d 7659 000d 76e9 000d     mI..oI..Yv...v..
   d95c8:	765d 000d 76b5 000d 7689 000d 7773 000d     ]v...v...v..sw..
   d95d8:	fffc ffff 0000 0000 779d 000d               .........w..

000d95e4 <_ZTV9IPAddress>:
	...
   d95ec:	79f1 000d 79e1 000d 79e3 000d               .y...y...y..

000d95f8 <_ZTV9USBSerial>:
	...
   d9600:	7ac9 000d 7b19 000d 7b27 000d 72d5 000d     .z...{..'{...r..
   d9610:	7b05 000d 7acb 000d 7ae1 000d 7b13 000d     .{...z...z...{..
   d9620:	7af7 000d 7ac5 000d                         .z...z..

000d9628 <_ZTVN5spark13CellularClassE>:
	...
   d9630:	7c33 000d 7c29 000d 7c1f 000d 7bd5 000d     3|..)|...|...{..
   d9640:	7c13 000d 7c07 000d 7bfb 000d 7bf3 000d     .|...|...{...{..
   d9650:	7be9 000d 7bdf 000d 80f9 000d               .{...{......

000d965c <_ZTV11USARTSerial>:
	...
   d9664:	7ce1 000d 7d31 000d 7d3f 000d 72d5 000d     .|..1}..?}...r..
   d9674:	7cf5 000d 7d17 000d 7d03 000d 7d2b 000d     .|...}...}..+}..
   d9684:	7ce3 000d 7ce7 000d                         .|...|..

000d968c <_ZTV7TwoWire>:
	...
   d9694:	7de5 000d 7e2f 000d 7e07 000d 7de7 000d     .}../~...~...}..
   d96a4:	7e0f 000d 7e17 000d 7e1f 000d 7e27 000d     .~...~...~..'~..

000d96b4 <_ZTVN5spark9MeshClassE>:
	...
   d96bc:	7f73 000d 7f69 000d 7f5f 000d 7f55 000d     s...i..._...U...
   d96cc:	7f49 000d 7f3d 000d 7f31 000d 7f29 000d     I...=...1...)...
   d96dc:	7f1f 000d 7f15 000d 80f9 000d               ............

000d96e8 <_ZTVN5spark12NetworkClassE>:
	...
   d96f0:	8091 000d 809b 000d 80a5 000d 80af 000d     ................
   d9700:	80b9 000d 80c5 000d 80d1 000d 80dd 000d     ................
   d9710:	80e5 000d 80ef 000d 80f9 000d               ............

000d971c <_ZSt7nothrow>:
   d971c:	0000 0000                                   ....

000d9720 <__sf_fake_stdin>:
	...

000d9740 <__sf_fake_stdout>:
	...

000d9760 <__sf_fake_stderr>:
	...
   d9780:	0043                                        C.

000d9782 <link_const_variable_data_end>:
	...

000d9784 <link_constructors_location>:
   d9784:	000d40f1 	.word	0x000d40f1
   d9788:	000d44f5 	.word	0x000d44f5
   d978c:	000d473d 	.word	0x000d473d
   d9790:	000d48dd 	.word	0x000d48dd
   d9794:	000d4b35 	.word	0x000d4b35
   d9798:	000d4b95 	.word	0x000d4b95
   d979c:	000d4fcd 	.word	0x000d4fcd
   d97a0:	000d50a1 	.word	0x000d50a1
   d97a4:	000d50a5 	.word	0x000d50a5
   d97a8:	000d57c1 	.word	0x000d57c1
   d97ac:	000d57c5 	.word	0x000d57c5
   d97b0:	000d57c9 	.word	0x000d57c9
   d97b4:	000d57fb 	.word	0x000d57fb
   d97b8:	000d5fc1 	.word	0x000d5fc1
   d97bc:	000d5fe5 	.word	0x000d5fe5
   d97c0:	000d5fe9 	.word	0x000d5fe9
   d97c4:	000d630d 	.word	0x000d630d
   d97c8:	000d6311 	.word	0x000d6311
   d97cc:	000d6315 	.word	0x000d6315
   d97d0:	000d684f 	.word	0x000d684f
   d97d4:	000d6853 	.word	0x000d6853
   d97d8:	000d6857 	.word	0x000d6857
   d97dc:	000d68fd 	.word	0x000d68fd
   d97e0:	000d6f31 	.word	0x000d6f31
   d97e4:	000d70f1 	.word	0x000d70f1
   d97e8:	000d72ad 	.word	0x000d72ad
   d97ec:	000d75a1 	.word	0x000d75a1
   d97f0:	000d761d 	.word	0x000d761d
   d97f4:	000d763d 	.word	0x000d763d
   d97f8:	000d7cb1 	.word	0x000d7cb1
   d97fc:	000d8041 	.word	0x000d8041
   d9800:	000d81c5 	.word	0x000d81c5
   d9804:	000d842d 	.word	0x000d842d
   d9808:	000d84b1 	.word	0x000d84b1
   d980c:	000d8575 	.word	0x000d8575
   d9810:	000d8639 	.word	0x000d8639

000d9814 <link_constructors_end>:
	...
