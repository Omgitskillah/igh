
c:/Users/Clarence.Alucho/Documents/git/igh/igh_shield/target/1.5.2/boron/igh_shield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003694  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d76b0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e2b4  000d76b4  0001e2b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004d4  2003e31c  2003e31c  0002e31c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d771c  000d771c  0002771c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7744  000d7744  00027744  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000eea08  00000000  00000000  00027748  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001428b  00000000  00000000  00116150  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00021c0f  00000000  00000000  0012a3db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002a38  00000000  00000000  0014bfea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004c50  00000000  00000000  0014ea22  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003ab5e  00000000  00000000  00153672  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00034156  00000000  00000000  0018e1d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001069e2  00000000  00000000  001c2326  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000db50  00000000  00000000  002c8d08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 f83b 	bl	d70a8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 f840 	bl	d70be <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2b4 	.word	0x2003e2b4
   d4048:	000d76b4 	.word	0x000d76b4
   d404c:	2003e31c 	.word	0x2003e31c
   d4050:	2003e31c 	.word	0x2003e31c
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fc7d 	bl	d5958 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d76b0 	.word	0x000d76b0
   d4080:	000d7664 	.word	0x000d7664

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b820 	b.w	d40c8 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f826 	bl	d40da <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bc23 	b.w	d58dc <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 bfdd 	b.w	d5054 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 bfdb 	b.w	d5054 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <igh_settings_calculate_checksum>:
 * struct must have a single byte at the end designated for the checksum for this to work
 * \param p_struct: pointer to data struct, total_bytes: sizeof(data struct)
 * \return the checksum
 */
uint8_t igh_settings_calculate_checksum(void * p_struct, size_t total_bytes)
{
   d40ae:	b510      	push	{r4, lr}
    data = (uint8_t *)p_struct;

    // uint8_t data_buffer[length];
    // memcpy(data_buffer, data, length);

    data += 1; // ignore checksum byte
   d40b0:	1c42      	adds	r2, r0, #1
 */
uint8_t igh_settings_calculate_checksum(void * p_struct, size_t total_bytes)
{
    uint8_t length = (uint8_t)total_bytes; 
    uint8_t * data;
    int sum = 0;
   d40b2:	2300      	movs	r3, #0
    // uint8_t data_buffer[length];
    // memcpy(data_buffer, data, length);

    data += 1; // ignore checksum byte
    // start at 1 to ignore the checksum byte
    for( int i = 1; i < length; i++)
   d40b4:	b2c9      	uxtb	r1, r1
   d40b6:	1a14      	subs	r4, r2, r0
   d40b8:	42a1      	cmp	r1, r4
   d40ba:	dd03      	ble.n	d40c4 <igh_settings_calculate_checksum+0x16>
    {
        sum += (0xFF & *data++);
   d40bc:	f812 4b01 	ldrb.w	r4, [r2], #1
   d40c0:	4423      	add	r3, r4
   d40c2:	e7f8      	b.n	d40b6 <igh_settings_calculate_checksum+0x8>
    }

    checksum = (uint8_t)(sum % 256);

    return checksum;
}
   d40c4:	b2d8      	uxtb	r0, r3
   d40c6:	bd10      	pop	{r4, pc}

000d40c8 <setup>:
#endif

SYSTEM_THREAD(ENABLED);

void setup() 
{
   d40c8:	b508      	push	{r3, lr}
    igh_hardware_setup();
   d40ca:	f000 fba7 	bl	d481c <_Z18igh_hardware_setupv>
#ifdef TEST_MODE
    // go into test mode
    igh_log_begin();
   d40ce:	f000 f85b 	bl	d4188 <_Z13igh_log_beginv>
#endif
    igh_boron_setup();
}
   d40d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    igh_hardware_setup();
#ifdef TEST_MODE
    // go into test mode
    igh_log_begin();
#endif
    igh_boron_setup();
   d40d6:	f000 bc7f 	b.w	d49d8 <_Z15igh_boron_setupv>

000d40da <loop>:
}

void loop() 
{
   d40da:	b508      	push	{r3, lr}
#ifdef TEST_MODE
    // process test commands
    igh_process_serial_cmd(); 
   d40dc:	f000 f85e 	bl	d419c <_Z22igh_process_serial_cmdv>
#endif
    igh_boron_service();
   d40e0:	f000 fc82 	bl	d49e8 <_Z17igh_boron_servicev>
    igh_hardware_service();
   d40e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#ifdef TEST_MODE
    // process test commands
    igh_process_serial_cmd(); 
#endif
    igh_boron_service();
    igh_hardware_service();
   d40e8:	f000 bb8c 	b.w	d4804 <_Z20igh_hardware_servicev>

000d40ec <_GLOBAL__sub_I_setup>:
   d40ec:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d40ee:	f000 fd45 	bl	d4b7c <HAL_Pin_Map>
#define TEST_MODE
#ifdef TEST_MODE
#include "particle_api/igh_log.h"
#endif

SYSTEM_THREAD(ENABLED);
   d40f2:	2100      	movs	r1, #0
   d40f4:	2001      	movs	r0, #1
    // process test commands
    igh_process_serial_cmd(); 
#endif
    igh_boron_service();
    igh_hardware_service();
   d40f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#define TEST_MODE
#ifdef TEST_MODE
#include "particle_api/igh_log.h"
#endif

SYSTEM_THREAD(ENABLED);
   d40fa:	f000 bf07 	b.w	d4f0c <system_thread_set_state>

000d40fe <_Z13igh_log_print6String>:
    }
    return 0;
}

void igh_log_print(String _str)
{
   d40fe:	b510      	push	{r4, lr}
   d4100:	4604      	mov	r4, r0
    Serial.print(_str);
   d4102:	f001 fd29 	bl	d5b58 <_Z16_fetch_usbserialv>
   d4106:	6821      	ldr	r1, [r4, #0]
}
   d4108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return 0;
}

void igh_log_print(String _str)
{
    Serial.print(_str);
   d410c:	f001 b924 	b.w	d5358 <_ZN5Print5printEPKc>

000d4110 <_ZL22igh_append_test_statush.part.1>:
    igh_log_print(test_valve_state);
    // Add more tests here
    igh_log_print(test_padding);
}

static void igh_append_test_status(uint8_t _status)
   d4110:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
    if(_status)
    {
        igh_log_print(test_success); igh_log_print("\n");
   d4112:	490b      	ldr	r1, [pc, #44]	; (d4140 <_ZL22igh_append_test_statush.part.1+0x30>)
   d4114:	4668      	mov	r0, sp
   d4116:	f001 f8a6 	bl	d5266 <_ZN6StringC1EPK19__FlashStringHelper>
   d411a:	4668      	mov	r0, sp
   d411c:	f7ff ffef 	bl	d40fe <_Z13igh_log_print6String>
   d4120:	4668      	mov	r0, sp
   d4122:	f001 f859 	bl	d51d8 <_ZN6StringD1Ev>
   d4126:	4907      	ldr	r1, [pc, #28]	; (d4144 <_ZL22igh_append_test_statush.part.1+0x34>)
   d4128:	4668      	mov	r0, sp
   d412a:	f001 f89c 	bl	d5266 <_ZN6StringC1EPK19__FlashStringHelper>
   d412e:	4668      	mov	r0, sp
   d4130:	f7ff ffe5 	bl	d40fe <_Z13igh_log_print6String>
   d4134:	4668      	mov	r0, sp
   d4136:	f001 f84f 	bl	d51d8 <_ZN6StringD1Ev>
    }
    else
    {
        igh_log_print(test_fail); igh_log_print("\n");
    }   
}
   d413a:	b005      	add	sp, #20
   d413c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4140:	000d728c 	.word	0x000d728c
   d4144:	000d742c 	.word	0x000d742c

000d4148 <_ZL22igh_append_test_statush>:
    // Add more tests here
    igh_log_print(test_padding);
}

static void igh_append_test_status(uint8_t _status)
{
   d4148:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if(_status)
   d414a:	b110      	cbz	r0, d4152 <_ZL22igh_append_test_statush+0xa>
   d414c:	f7ff ffe0 	bl	d4110 <_ZL22igh_append_test_statush.part.1>
   d4150:	e013      	b.n	d417a <_ZL22igh_append_test_statush+0x32>
    {
        igh_log_print(test_success); igh_log_print("\n");
    }
    else
    {
        igh_log_print(test_fail); igh_log_print("\n");
   d4152:	490b      	ldr	r1, [pc, #44]	; (d4180 <_ZL22igh_append_test_statush+0x38>)
   d4154:	4668      	mov	r0, sp
   d4156:	f001 f886 	bl	d5266 <_ZN6StringC1EPK19__FlashStringHelper>
   d415a:	4668      	mov	r0, sp
   d415c:	f7ff ffcf 	bl	d40fe <_Z13igh_log_print6String>
   d4160:	4668      	mov	r0, sp
   d4162:	f001 f839 	bl	d51d8 <_ZN6StringD1Ev>
   d4166:	4907      	ldr	r1, [pc, #28]	; (d4184 <_ZL22igh_append_test_statush+0x3c>)
   d4168:	4668      	mov	r0, sp
   d416a:	f001 f87c 	bl	d5266 <_ZN6StringC1EPK19__FlashStringHelper>
   d416e:	4668      	mov	r0, sp
   d4170:	f7ff ffc5 	bl	d40fe <_Z13igh_log_print6String>
   d4174:	4668      	mov	r0, sp
   d4176:	f001 f82f 	bl	d51d8 <_ZN6StringD1Ev>
    }   
}
   d417a:	b005      	add	sp, #20
   d417c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4180:	000d71ce 	.word	0x000d71ce
   d4184:	000d742c 	.word	0x000d742c

000d4188 <_Z13igh_log_beginv>:
{
    Serial.print(_str);
}

void igh_log_begin(void)
{
   d4188:	b508      	push	{r3, lr}
    Serial.begin(IGH_LOG_BAUD);
   d418a:	f001 fce5 	bl	d5b58 <_Z16_fetch_usbserialv>
   d418e:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
}
   d4192:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.print(_str);
}

void igh_log_begin(void)
{
    Serial.begin(IGH_LOG_BAUD);
   d4196:	f001 bcd3 	b.w	d5b40 <_ZN9USBSerial5beginEl>
	...

000d419c <_Z22igh_process_serial_cmdv>:
        igh_log_print(test_fail); igh_log_print("\n");
    }   
}

uint8_t igh_process_serial_cmd(void)
{
   d419c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d419e:	b089      	sub	sp, #36	; 0x24
    uint8_t ret = 0;
    char resp[10];
    memset(resp, '\0', sizeof(resp));
   d41a0:	2300      	movs	r3, #0
   d41a2:	9301      	str	r3, [sp, #4]
   d41a4:	9302      	str	r3, [sp, #8]
   d41a6:	f8ad 300c 	strh.w	r3, [sp, #12]
static void print_cmd_options(void);
static void igh_append_test_status(uint8_t _status);

static uint8_t igh_log_read(char * _ch)
{
    if( Serial.available() )
   d41aa:	f001 fcd5 	bl	d5b58 <_Z16_fetch_usbserialv>
   d41ae:	6803      	ldr	r3, [r0, #0]
   d41b0:	691b      	ldr	r3, [r3, #16]
   d41b2:	4798      	blx	r3
   d41b4:	b190      	cbz	r0, d41dc <_Z22igh_process_serial_cmdv+0x40>
    {
        *_ch = Serial.read();
   d41b6:	f001 fccf 	bl	d5b58 <_Z16_fetch_usbserialv>
   d41ba:	6803      	ldr	r3, [r0, #0]
   d41bc:	695b      	ldr	r3, [r3, #20]
   d41be:	4798      	blx	r3
   d41c0:	b2c4      	uxtb	r4, r0
        while (Serial.available()) Serial.read(); // remove any other data
   d41c2:	f001 fcc9 	bl	d5b58 <_Z16_fetch_usbserialv>
   d41c6:	6803      	ldr	r3, [r0, #0]
   d41c8:	691b      	ldr	r3, [r3, #16]
   d41ca:	4798      	blx	r3
   d41cc:	2800      	cmp	r0, #0
   d41ce:	d06a      	beq.n	d42a6 <_Z22igh_process_serial_cmdv+0x10a>
   d41d0:	f001 fcc2 	bl	d5b58 <_Z16_fetch_usbserialv>
   d41d4:	6803      	ldr	r3, [r0, #0]
   d41d6:	695b      	ldr	r3, [r3, #20]
   d41d8:	4798      	blx	r3
   d41da:	e7f2      	b.n	d41c2 <_Z22igh_process_serial_cmdv+0x26>
    }   
}

uint8_t igh_process_serial_cmd(void)
{
    uint8_t ret = 0;
   d41dc:	4604      	mov	r4, r0
   d41de:	e00e      	b.n	d41fe <_Z22igh_process_serial_cmdv+0x62>
    if( igh_log_read(&serial_cmd) )
    {
        switch(serial_cmd)
        {
            case test_flash:
                igh_log_print(F("\nTesting flash:"));
   d41e0:	499e      	ldr	r1, [pc, #632]	; (d445c <_Z22igh_process_serial_cmdv+0x2c0>)
   d41e2:	a804      	add	r0, sp, #16
   d41e4:	f001 f83f 	bl	d5266 <_ZN6StringC1EPK19__FlashStringHelper>
   d41e8:	a804      	add	r0, sp, #16
   d41ea:	f7ff ff88 	bl	d40fe <_Z13igh_log_print6String>
   d41ee:	a804      	add	r0, sp, #16
   d41f0:	f000 fff2 	bl	d51d8 <_ZN6StringD1Ev>
                ret = igh_eeproom_test(); // this should be true based on actual test
   d41f4:	f000 f9fa 	bl	d45ec <_Z16igh_eeproom_testv>
   d41f8:	4604      	mov	r4, r0
                igh_append_test_status(ret);  
   d41fa:	f7ff ffa5 	bl	d4148 <_ZL22igh_append_test_statush>
    {
        // Do nothing;
    }

    // Test button routine
    if(test_button_flag)
   d41fe:	4d98      	ldr	r5, [pc, #608]	; (d4460 <_Z22igh_process_serial_cmdv+0x2c4>)
   d4200:	782b      	ldrb	r3, [r5, #0]
   d4202:	b1c3      	cbz	r3, d4236 <_Z22igh_process_serial_cmdv+0x9a>
    {
        if(igh_button_sec_counter >= button_test_duration)
   d4204:	4b97      	ldr	r3, [pc, #604]	; (d4464 <_Z22igh_process_serial_cmdv+0x2c8>)
   d4206:	781a      	ldrb	r2, [r3, #0]
   d4208:	4b97      	ldr	r3, [pc, #604]	; (d4468 <_Z22igh_process_serial_cmdv+0x2cc>)
   d420a:	781b      	ldrb	r3, [r3, #0]
   d420c:	429a      	cmp	r2, r3
   d420e:	d304      	bcc.n	d421a <_Z22igh_process_serial_cmdv+0x7e>
   d4210:	f7ff ff7e 	bl	d4110 <_ZL22igh_append_test_statush.part.1>
        {
            ret = 1;
            igh_append_test_status(ret);
            test_button_flag = false;
   d4214:	2300      	movs	r3, #0
   d4216:	702b      	strb	r3, [r5, #0]
    // Test button routine
    if(test_button_flag)
    {
        if(igh_button_sec_counter >= button_test_duration)
        {
            ret = 1;
   d4218:	2401      	movs	r4, #1

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d421a:	f000 fcef 	bl	d4bfc <HAL_Timer_Get_Milli_Seconds>
            igh_append_test_status(ret);
            test_button_flag = false;
        }

        if( (millis() - test_button_timeout_counter) >= test_button_timeout )
   d421e:	4b93      	ldr	r3, [pc, #588]	; (d446c <_Z22igh_process_serial_cmdv+0x2d0>)
   d4220:	681b      	ldr	r3, [r3, #0]
   d4222:	1ac0      	subs	r0, r0, r3
   d4224:	4b92      	ldr	r3, [pc, #584]	; (d4470 <_Z22igh_process_serial_cmdv+0x2d4>)
   d4226:	681b      	ldr	r3, [r3, #0]
   d4228:	4298      	cmp	r0, r3
   d422a:	d304      	bcc.n	d4236 <_Z22igh_process_serial_cmdv+0x9a>
        {
            ret = 0;
            igh_append_test_status(ret);
   d422c:	2000      	movs	r0, #0
            test_button_flag = false;
   d422e:	2400      	movs	r4, #0
        }

        if( (millis() - test_button_timeout_counter) >= test_button_timeout )
        {
            ret = 0;
            igh_append_test_status(ret);
   d4230:	f7ff ff8a 	bl	d4148 <_ZL22igh_append_test_statush>
            test_button_flag = false;
   d4234:	702c      	strb	r4, [r5, #0]
        }
    }

    // valve test routine
    if(test_valve_flag)
   d4236:	4e8f      	ldr	r6, [pc, #572]	; (d4474 <_Z22igh_process_serial_cmdv+0x2d8>)
   d4238:	7833      	ldrb	r3, [r6, #0]
   d423a:	2b00      	cmp	r3, #0
   d423c:	f000 810b 	beq.w	d4456 <_Z22igh_process_serial_cmdv+0x2ba>
    {
        if(open_close)
   d4240:	4b8d      	ldr	r3, [pc, #564]	; (d4478 <_Z22igh_process_serial_cmdv+0x2dc>)
   d4242:	781a      	ldrb	r2, [r3, #0]
   d4244:	461d      	mov	r5, r3
   d4246:	4b8d      	ldr	r3, [pc, #564]	; (d447c <_Z22igh_process_serial_cmdv+0x2e0>)
   d4248:	b102      	cbz	r2, d424c <_Z22igh_process_serial_cmdv+0xb0>
        {
            current_valve_position = VALVE_OPEN;
   d424a:	2201      	movs	r2, #1
        else
        {
            current_valve_position = VALVE_CLOSE;
        }
        
        if( (millis() - test_valve_counter) >= valve_transit_time )
   d424c:	4f8c      	ldr	r7, [pc, #560]	; (d4480 <_Z22igh_process_serial_cmdv+0x2e4>)
        {
            current_valve_position = VALVE_OPEN;
        }
        else
        {
            current_valve_position = VALVE_CLOSE;
   d424e:	701a      	strb	r2, [r3, #0]
   d4250:	f000 fcd4 	bl	d4bfc <HAL_Timer_Get_Milli_Seconds>
        }
        
        if( (millis() - test_valve_counter) >= valve_transit_time )
   d4254:	683b      	ldr	r3, [r7, #0]
   d4256:	1ac0      	subs	r0, r0, r3
   d4258:	f241 736f 	movw	r3, #5999	; 0x176f
   d425c:	4298      	cmp	r0, r3
   d425e:	f240 80fa 	bls.w	d4456 <_Z22igh_process_serial_cmdv+0x2ba>
        {
            if(open_close)
   d4262:	782d      	ldrb	r5, [r5, #0]
   d4264:	b155      	cbz	r5, d427c <_Z22igh_process_serial_cmdv+0xe0>
            {
                valva_open_pass = igh_hardware_test_valve_state();
   d4266:	f000 facf 	bl	d4808 <_Z29igh_hardware_test_valve_statev>
   d426a:	4b86      	ldr	r3, [pc, #536]	; (d4484 <_Z22igh_process_serial_cmdv+0x2e8>)
   d426c:	7018      	strb	r0, [r3, #0]
                open_close = false;
   d426e:	4b82      	ldr	r3, [pc, #520]	; (d4478 <_Z22igh_process_serial_cmdv+0x2dc>)
   d4270:	2200      	movs	r2, #0
   d4272:	701a      	strb	r2, [r3, #0]
   d4274:	f000 fcc2 	bl	d4bfc <HAL_Timer_Get_Milli_Seconds>
                test_valve_counter = millis();
   d4278:	6038      	str	r0, [r7, #0]
   d427a:	e0ec      	b.n	d4456 <_Z22igh_process_serial_cmdv+0x2ba>
            }
            else
            {
                valve_closed_pass = !igh_hardware_test_valve_state();
   d427c:	f000 fac4 	bl	d4808 <_Z29igh_hardware_test_valve_statev>
   d4280:	4b81      	ldr	r3, [pc, #516]	; (d4488 <_Z22igh_process_serial_cmdv+0x2ec>)
   d4282:	2800      	cmp	r0, #0
   d4284:	bf0c      	ite	eq
   d4286:	2201      	moveq	r2, #1
   d4288:	2200      	movne	r2, #0
   d428a:	701a      	strb	r2, [r3, #0]

                ret = (valve_closed_pass && valva_open_pass);
   d428c:	d104      	bne.n	d4298 <_Z22igh_process_serial_cmdv+0xfc>
   d428e:	4b7d      	ldr	r3, [pc, #500]	; (d4484 <_Z22igh_process_serial_cmdv+0x2e8>)
   d4290:	781d      	ldrb	r5, [r3, #0]
   d4292:	3500      	adds	r5, #0
   d4294:	bf18      	it	ne
   d4296:	2501      	movne	r5, #1
                igh_append_test_status(ret);
   d4298:	4628      	mov	r0, r5
   d429a:	f7ff ff55 	bl	d4148 <_ZL22igh_append_test_statush>
                test_valve_flag = false;
   d429e:	2300      	movs	r3, #0
            }
            else
            {
                valve_closed_pass = !igh_hardware_test_valve_state();

                ret = (valve_closed_pass && valva_open_pass);
   d42a0:	462c      	mov	r4, r5
                igh_append_test_status(ret);
                test_valve_flag = false;
   d42a2:	7033      	strb	r3, [r6, #0]
            }   
        }
    }

    return ret;
   d42a4:	e0d7      	b.n	d4456 <_Z22igh_process_serial_cmdv+0x2ba>
    memset(resp, '\0', sizeof(resp));

    char serial_cmd = '\0';
    if( igh_log_read(&serial_cmd) )
    {
        switch(serial_cmd)
   d42a6:	f1a4 0031 	sub.w	r0, r4, #49	; 0x31
   d42aa:	280e      	cmp	r0, #14
   d42ac:	f200 80d1 	bhi.w	d4452 <_Z22igh_process_serial_cmdv+0x2b6>
   d42b0:	a301      	add	r3, pc, #4	; (adr r3, d42b8 <_Z22igh_process_serial_cmdv+0x11c>)
   d42b2:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   d42b6:	bf00      	nop
   d42b8:	000d41e1 	.word	0x000d41e1
   d42bc:	000d43ab 	.word	0x000d43ab
   d42c0:	000d43b3 	.word	0x000d43b3
   d42c4:	000d442d 	.word	0x000d442d
   d42c8:	000d4453 	.word	0x000d4453
   d42cc:	000d4453 	.word	0x000d4453
   d42d0:	000d4453 	.word	0x000d4453
   d42d4:	000d4453 	.word	0x000d4453
   d42d8:	000d4453 	.word	0x000d4453
   d42dc:	000d4453 	.word	0x000d4453
   d42e0:	000d4453 	.word	0x000d4453
   d42e4:	000d4453 	.word	0x000d4453
   d42e8:	000d4453 	.word	0x000d4453
   d42ec:	000d4453 	.word	0x000d4453
   d42f0:	000d42f5 	.word	0x000d42f5
    Serial.begin(IGH_LOG_BAUD);
}

static void print_cmd_options(void)
{
    igh_log_print(test_padding);
   d42f4:	4965      	ldr	r1, [pc, #404]	; (d448c <_Z22igh_process_serial_cmdv+0x2f0>)
   d42f6:	a804      	add	r0, sp, #16
   d42f8:	f000 ffb5 	bl	d5266 <_ZN6StringC1EPK19__FlashStringHelper>
   d42fc:	a804      	add	r0, sp, #16
   d42fe:	f7ff fefe 	bl	d40fe <_Z13igh_log_print6String>
   d4302:	a804      	add	r0, sp, #16
   d4304:	f000 ff68 	bl	d51d8 <_ZN6StringD1Ev>
    igh_log_print(test_header);
   d4308:	4961      	ldr	r1, [pc, #388]	; (d4490 <_Z22igh_process_serial_cmdv+0x2f4>)
   d430a:	a804      	add	r0, sp, #16
   d430c:	f000 ffab 	bl	d5266 <_ZN6StringC1EPK19__FlashStringHelper>
   d4310:	a804      	add	r0, sp, #16
   d4312:	f7ff fef4 	bl	d40fe <_Z13igh_log_print6String>
   d4316:	a804      	add	r0, sp, #16
   d4318:	f000 ff5e 	bl	d51d8 <_ZN6StringD1Ev>
    igh_log_print(test_padding);
   d431c:	495b      	ldr	r1, [pc, #364]	; (d448c <_Z22igh_process_serial_cmdv+0x2f0>)
   d431e:	a804      	add	r0, sp, #16
   d4320:	f000 ffa1 	bl	d5266 <_ZN6StringC1EPK19__FlashStringHelper>
   d4324:	a804      	add	r0, sp, #16
   d4326:	f7ff feea 	bl	d40fe <_Z13igh_log_print6String>
   d432a:	a804      	add	r0, sp, #16
   d432c:	f000 ff54 	bl	d51d8 <_ZN6StringD1Ev>
    igh_log_print(test_cmd_options);
   d4330:	4958      	ldr	r1, [pc, #352]	; (d4494 <_Z22igh_process_serial_cmdv+0x2f8>)
   d4332:	a804      	add	r0, sp, #16
   d4334:	f000 ff97 	bl	d5266 <_ZN6StringC1EPK19__FlashStringHelper>
   d4338:	a804      	add	r0, sp, #16
   d433a:	f7ff fee0 	bl	d40fe <_Z13igh_log_print6String>
   d433e:	a804      	add	r0, sp, #16
   d4340:	f000 ff4a 	bl	d51d8 <_ZN6StringD1Ev>
    igh_log_print(test_flash_cmd);
   d4344:	4954      	ldr	r1, [pc, #336]	; (d4498 <_Z22igh_process_serial_cmdv+0x2fc>)
   d4346:	a804      	add	r0, sp, #16
   d4348:	f000 ff8d 	bl	d5266 <_ZN6StringC1EPK19__FlashStringHelper>
   d434c:	a804      	add	r0, sp, #16
   d434e:	f7ff fed6 	bl	d40fe <_Z13igh_log_print6String>
   d4352:	a804      	add	r0, sp, #16
   d4354:	f000 ff40 	bl	d51d8 <_ZN6StringD1Ev>
    igh_log_print(test_device_api);
   d4358:	4950      	ldr	r1, [pc, #320]	; (d449c <_Z22igh_process_serial_cmdv+0x300>)
   d435a:	a804      	add	r0, sp, #16
   d435c:	f000 ff83 	bl	d5266 <_ZN6StringC1EPK19__FlashStringHelper>
   d4360:	a804      	add	r0, sp, #16
   d4362:	f7ff fecc 	bl	d40fe <_Z13igh_log_print6String>
   d4366:	a804      	add	r0, sp, #16
   d4368:	f000 ff36 	bl	d51d8 <_ZN6StringD1Ev>
    igh_log_print(test_button_press);
   d436c:	494c      	ldr	r1, [pc, #304]	; (d44a0 <_Z22igh_process_serial_cmdv+0x304>)
   d436e:	a804      	add	r0, sp, #16
   d4370:	f000 ff79 	bl	d5266 <_ZN6StringC1EPK19__FlashStringHelper>
   d4374:	a804      	add	r0, sp, #16
   d4376:	f7ff fec2 	bl	d40fe <_Z13igh_log_print6String>
   d437a:	a804      	add	r0, sp, #16
   d437c:	f000 ff2c 	bl	d51d8 <_ZN6StringD1Ev>
    igh_log_print(test_valve_state);
   d4380:	4948      	ldr	r1, [pc, #288]	; (d44a4 <_Z22igh_process_serial_cmdv+0x308>)
   d4382:	a804      	add	r0, sp, #16
   d4384:	f000 ff6f 	bl	d5266 <_ZN6StringC1EPK19__FlashStringHelper>
   d4388:	a804      	add	r0, sp, #16
   d438a:	f7ff feb8 	bl	d40fe <_Z13igh_log_print6String>
   d438e:	a804      	add	r0, sp, #16
   d4390:	f000 ff22 	bl	d51d8 <_ZN6StringD1Ev>
    // Add more tests here
    igh_log_print(test_padding);
   d4394:	493d      	ldr	r1, [pc, #244]	; (d448c <_Z22igh_process_serial_cmdv+0x2f0>)
   d4396:	a804      	add	r0, sp, #16
   d4398:	f000 ff65 	bl	d5266 <_ZN6StringC1EPK19__FlashStringHelper>
   d439c:	a804      	add	r0, sp, #16
   d439e:	f7ff feae 	bl	d40fe <_Z13igh_log_print6String>
   d43a2:	a804      	add	r0, sp, #16
   d43a4:	f000 ff18 	bl	d51d8 <_ZN6StringD1Ev>
   d43a8:	e001      	b.n	d43ae <_Z22igh_process_serial_cmdv+0x212>
                print_cmd_options();
                ret = 1;
                break;

            case test_device:
                igh_boron_test_device();
   d43aa:	f000 fb25 	bl	d49f8 <_Z21igh_boron_test_devicev>
                ret = 1;
   d43ae:	2401      	movs	r4, #1
                break;
   d43b0:	e725      	b.n	d41fe <_Z22igh_process_serial_cmdv+0x62>

            case test_button:
                button_test_duration = random(5); // get a random number to test button press duration
   d43b2:	2005      	movs	r0, #5
   d43b4:	f001 fd8b 	bl	d5ece <_Z6randomi>
   d43b8:	4c2b      	ldr	r4, [pc, #172]	; (d4468 <_Z22igh_process_serial_cmdv+0x2cc>)
                igh_log_print(F("\nPress button for: ")); igh_log_print(String(button_test_duration)); igh_log_print(F(" Seconds"));
   d43ba:	493b      	ldr	r1, [pc, #236]	; (d44a8 <_Z22igh_process_serial_cmdv+0x30c>)
                igh_boron_test_device();
                ret = 1;
                break;

            case test_button:
                button_test_duration = random(5); // get a random number to test button press duration
   d43bc:	7020      	strb	r0, [r4, #0]
                igh_log_print(F("\nPress button for: ")); igh_log_print(String(button_test_duration)); igh_log_print(F(" Seconds"));
   d43be:	a804      	add	r0, sp, #16
   d43c0:	f000 ff51 	bl	d5266 <_ZN6StringC1EPK19__FlashStringHelper>
   d43c4:	a804      	add	r0, sp, #16
   d43c6:	f7ff fe9a 	bl	d40fe <_Z13igh_log_print6String>
   d43ca:	a804      	add	r0, sp, #16
   d43cc:	f000 ff04 	bl	d51d8 <_ZN6StringD1Ev>
   d43d0:	220a      	movs	r2, #10
   d43d2:	7821      	ldrb	r1, [r4, #0]
   d43d4:	a804      	add	r0, sp, #16
   d43d6:	f000 ff6a 	bl	d52ae <_ZN6StringC1Ehh>
   d43da:	a804      	add	r0, sp, #16
   d43dc:	f7ff fe8f 	bl	d40fe <_Z13igh_log_print6String>
   d43e0:	a804      	add	r0, sp, #16
   d43e2:	f000 fef9 	bl	d51d8 <_ZN6StringD1Ev>
   d43e6:	4931      	ldr	r1, [pc, #196]	; (d44ac <_Z22igh_process_serial_cmdv+0x310>)
   d43e8:	a804      	add	r0, sp, #16
   d43ea:	f000 ff3c 	bl	d5266 <_ZN6StringC1EPK19__FlashStringHelper>
   d43ee:	a804      	add	r0, sp, #16
   d43f0:	f7ff fe85 	bl	d40fe <_Z13igh_log_print6String>
   d43f4:	a804      	add	r0, sp, #16
   d43f6:	f000 feef 	bl	d51d8 <_ZN6StringD1Ev>
                igh_log_print(F("\nTesting Button:"));
   d43fa:	492d      	ldr	r1, [pc, #180]	; (d44b0 <_Z22igh_process_serial_cmdv+0x314>)
   d43fc:	a804      	add	r0, sp, #16
   d43fe:	f000 ff32 	bl	d5266 <_ZN6StringC1EPK19__FlashStringHelper>
   d4402:	a804      	add	r0, sp, #16
   d4404:	f7ff fe7b 	bl	d40fe <_Z13igh_log_print6String>
   d4408:	a804      	add	r0, sp, #16
   d440a:	f000 fee5 	bl	d51d8 <_ZN6StringD1Ev>
                test_button_flag = 1;
   d440e:	4b14      	ldr	r3, [pc, #80]	; (d4460 <_Z22igh_process_serial_cmdv+0x2c4>)
   d4410:	2201      	movs	r2, #1
   d4412:	701a      	strb	r2, [r3, #0]
                test_button_timeout = (button_test_duration + 5) * 1000; // + 5 gives you at least 5 seconds to start pressing
   d4414:	7823      	ldrb	r3, [r4, #0]
   d4416:	1d5a      	adds	r2, r3, #5
   d4418:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d441c:	4353      	muls	r3, r2
   d441e:	4a14      	ldr	r2, [pc, #80]	; (d4470 <_Z22igh_process_serial_cmdv+0x2d4>)
   d4420:	6013      	str	r3, [r2, #0]
   d4422:	f000 fbeb 	bl	d4bfc <HAL_Timer_Get_Milli_Seconds>
                test_button_timeout_counter = millis();
   d4426:	4b11      	ldr	r3, [pc, #68]	; (d446c <_Z22igh_process_serial_cmdv+0x2d0>)
   d4428:	6018      	str	r0, [r3, #0]
   d442a:	e012      	b.n	d4452 <_Z22igh_process_serial_cmdv+0x2b6>
                break;

            case test_valve:
                igh_log_print(F("\nTesting Valve:"));
   d442c:	4921      	ldr	r1, [pc, #132]	; (d44b4 <_Z22igh_process_serial_cmdv+0x318>)
   d442e:	a804      	add	r0, sp, #16
   d4430:	f000 ff19 	bl	d5266 <_ZN6StringC1EPK19__FlashStringHelper>
   d4434:	a804      	add	r0, sp, #16
   d4436:	f7ff fe62 	bl	d40fe <_Z13igh_log_print6String>
   d443a:	a804      	add	r0, sp, #16
   d443c:	f000 fecc 	bl	d51d8 <_ZN6StringD1Ev>
                test_valve_flag = true;
   d4440:	4b0c      	ldr	r3, [pc, #48]	; (d4474 <_Z22igh_process_serial_cmdv+0x2d8>)
   d4442:	2401      	movs	r4, #1
   d4444:	701c      	strb	r4, [r3, #0]
   d4446:	f000 fbd9 	bl	d4bfc <HAL_Timer_Get_Milli_Seconds>
                test_valve_counter = millis();
   d444a:	4b0d      	ldr	r3, [pc, #52]	; (d4480 <_Z22igh_process_serial_cmdv+0x2e4>)
   d444c:	6018      	str	r0, [r3, #0]
                open_close = true;
   d444e:	4b0a      	ldr	r3, [pc, #40]	; (d4478 <_Z22igh_process_serial_cmdv+0x2dc>)
   d4450:	701c      	strb	r4, [r3, #0]
    }   
}

uint8_t igh_process_serial_cmd(void)
{
    uint8_t ret = 0;
   d4452:	2400      	movs	r4, #0
   d4454:	e6d3      	b.n	d41fe <_Z22igh_process_serial_cmdv+0x62>
            }   
        }
    }

    return ret;
   d4456:	4620      	mov	r0, r4
   d4458:	b009      	add	sp, #36	; 0x24
   d445a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d445c:	000d71f1 	.word	0x000d71f1
   d4460:	2003e32d 	.word	0x2003e32d
   d4464:	2003e335 	.word	0x2003e335
   d4468:	2003e32e 	.word	0x2003e32e
   d446c:	2003e328 	.word	0x2003e328
   d4470:	2003e324 	.word	0x2003e324
   d4474:	2003e32f 	.word	0x2003e32f
   d4478:	2003e32c 	.word	0x2003e32c
   d447c:	2003e334 	.word	0x2003e334
   d4480:	2003e330 	.word	0x2003e330
   d4484:	2003e320 	.word	0x2003e320
   d4488:	2003e321 	.word	0x2003e321
   d448c:	000d7263 	.word	0x000d7263
   d4490:	000d7253 	.word	0x000d7253
   d4494:	000d71d5 	.word	0x000d71d5
   d4498:	000d71e1 	.word	0x000d71e1
   d449c:	000d723f 	.word	0x000d723f
   d44a0:	000d71b8 	.word	0x000d71b8
   d44a4:	000d7275 	.word	0x000d7275
   d44a8:	000d7201 	.word	0x000d7201
   d44ac:	000d7215 	.word	0x000d7215
   d44b0:	000d721e 	.word	0x000d721e
   d44b4:	000d722f 	.word	0x000d722f

000d44b8 <_GLOBAL__sub_I_test_valve_flag>:
   d44b8:	f000 bb60 	b.w	d4b7c <HAL_Pin_Map>

000d44bc <_Z24igh_eeprom_update_errorsm>:
 * \brief Save errors bit field
 * \param error_bit_field: error bit field
 * \return void
 */
void igh_eeprom_update_errors(uint32_t error_bit_field)
{
   d44bc:	b513      	push	{r0, r1, r4, lr}
   d44be:	ac02      	add	r4, sp, #8
   d44c0:	f844 0d04 	str.w	r0, [r4, #-4]!
    EEPROM.put(SYSTEM_ERRORS_ADDRESS, error_bit_field);
   d44c4:	f001 fee4 	bl	d6290 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d44c8:	2204      	movs	r2, #4
   d44ca:	4621      	mov	r1, r4
   d44cc:	f44f 6080 	mov.w	r0, #1024	; 0x400
   d44d0:	f000 fbb4 	bl	d4c3c <HAL_EEPROM_Put>
}
   d44d4:	b002      	add	sp, #8
   d44d6:	bd10      	pop	{r4, pc}

000d44d8 <_Z31igh_eeprom_read_system_settingsP15system_settings>:
 * \brief Gets system settings from eeprom emulator
 * \param running_system_settings_buffer: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_system_settings(system_settings * running_system_settings_buffer)
{
   d44d8:	b530      	push	{r4, r5, lr}
   d44da:	b091      	sub	sp, #68	; 0x44
  system_settings local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d44dc:	223c      	movs	r2, #60	; 0x3c
   d44de:	2100      	movs	r1, #0
 * \brief Gets system settings from eeprom emulator
 * \param running_system_settings_buffer: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_system_settings(system_settings * running_system_settings_buffer)
{
   d44e0:	4605      	mov	r5, r0
  system_settings local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d44e2:	a801      	add	r0, sp, #4
   d44e4:	f002 fdeb 	bl	d70be <memset>
  EEPROM.get(SYSTEM_SETTINGS_ADDRESS, local_buffer);
   d44e8:	f001 fed2 	bl	d6290 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d44ec:	223c      	movs	r2, #60	; 0x3c
   d44ee:	a901      	add	r1, sp, #4
   d44f0:	2000      	movs	r0, #0
   d44f2:	f000 fb9b 	bl	d4c2c <HAL_EEPROM_Get>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));
   d44f6:	213c      	movs	r1, #60	; 0x3c
   d44f8:	a801      	add	r0, sp, #4
   d44fa:	f7ff fdd8 	bl	d40ae <igh_settings_calculate_checksum>

  if( checksum != local_buffer.checksum)
   d44fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4502:	4283      	cmp	r3, r0
   d4504:	d10c      	bne.n	d4520 <_Z31igh_eeprom_read_system_settingsP15system_settings+0x48>
  {
    return 0;
  }

  *running_system_settings_buffer = local_buffer;
   d4506:	ac01      	add	r4, sp, #4
   d4508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d450a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d450c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d450e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4510:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4512:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4514:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   d4518:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  return 1;
   d451c:	2001      	movs	r0, #1
   d451e:	e000      	b.n	d4522 <_Z31igh_eeprom_read_system_settingsP15system_settings+0x4a>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));

  if( checksum != local_buffer.checksum)
  {
    return 0;
   d4520:	2000      	movs	r0, #0
  }

  *running_system_settings_buffer = local_buffer;
  return 1;

}
   d4522:	b011      	add	sp, #68	; 0x44
   d4524:	bd30      	pop	{r4, r5, pc}

000d4526 <_Z31igh_eeprom_save_system_settingsP15system_settings>:
 * \brief Save system settings  to eeprom emulator
 * \param settings_to_save: pointer to struct to save
 * \return true or false based on write success
 */
uint8_t igh_eeprom_save_system_settings(system_settings * settings_to_save)
{
   d4526:	b510      	push	{r4, lr}
   d4528:	4604      	mov	r4, r0
   d452a:	b090      	sub	sp, #64	; 0x40
  system_settings local_buffer;
  // save the data
  EEPROM.put(SYSTEM_SETTINGS_ADDRESS, *settings_to_save);
   d452c:	f001 feb0 	bl	d6290 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4530:	223c      	movs	r2, #60	; 0x3c
   d4532:	4621      	mov	r1, r4
   d4534:	2000      	movs	r0, #0
   d4536:	f000 fb81 	bl	d4c3c <HAL_EEPROM_Put>
  // check if data is saved
  igh_eeprom_read_system_settings(&local_buffer);
   d453a:	a801      	add	r0, sp, #4
   d453c:	f7ff ffcc 	bl	d44d8 <_Z31igh_eeprom_read_system_settingsP15system_settings>

  if( local_buffer.checksum != (settings_to_save->checksum))
  {
    return 0;
   d4540:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d4544:	7823      	ldrb	r3, [r4, #0]
  }

  return 1;
}
   d4546:	1ac3      	subs	r3, r0, r3
   d4548:	4258      	negs	r0, r3
   d454a:	4158      	adcs	r0, r3
   d454c:	b010      	add	sp, #64	; 0x40
   d454e:	bd10      	pop	{r4, pc}

000d4550 <_Z34igh_eeprom_read_threshold_settingsP10thresholds>:
 * \brief Gets threshold settings from eeprom emulator
 * \param running_thresholds: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_threshold_settings(thresholds * running_thresholds)
{
   d4550:	b530      	push	{r4, r5, lr}
   d4552:	b08f      	sub	sp, #60	; 0x3c
  thresholds local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d4554:	2234      	movs	r2, #52	; 0x34
   d4556:	2100      	movs	r1, #0
 * \brief Gets threshold settings from eeprom emulator
 * \param running_thresholds: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_threshold_settings(thresholds * running_thresholds)
{
   d4558:	4605      	mov	r5, r0
  thresholds local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d455a:	a801      	add	r0, sp, #4
   d455c:	f002 fdaf 	bl	d70be <memset>
  EEPROM.get(SYSTEM_THRESHOLDS_ADDRESS, local_buffer);
   d4560:	f001 fe96 	bl	d6290 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4564:	2234      	movs	r2, #52	; 0x34
   d4566:	a901      	add	r1, sp, #4
   d4568:	f44f 7000 	mov.w	r0, #512	; 0x200
   d456c:	f000 fb5e 	bl	d4c2c <HAL_EEPROM_Get>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));
   d4570:	2134      	movs	r1, #52	; 0x34
   d4572:	a801      	add	r0, sp, #4
   d4574:	f7ff fd9b 	bl	d40ae <igh_settings_calculate_checksum>
  
  if( checksum != local_buffer.checksum)
   d4578:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d457c:	4283      	cmp	r3, r0
   d457e:	d10a      	bne.n	d4596 <_Z34igh_eeprom_read_threshold_settingsP10thresholds+0x46>
  {
    return 0;
  }
  
  *running_thresholds = local_buffer;
   d4580:	ac01      	add	r4, sp, #4
   d4582:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4584:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4586:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4588:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d458a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d458c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d458e:	6823      	ldr	r3, [r4, #0]
   d4590:	602b      	str	r3, [r5, #0]
  return 1;
   d4592:	2001      	movs	r0, #1
   d4594:	e000      	b.n	d4598 <_Z34igh_eeprom_read_threshold_settingsP10thresholds+0x48>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));
  
  if( checksum != local_buffer.checksum)
  {
    return 0;
   d4596:	2000      	movs	r0, #0
  }
  
  *running_thresholds = local_buffer;
  return 1;
}
   d4598:	b00f      	add	sp, #60	; 0x3c
   d459a:	bd30      	pop	{r4, r5, pc}

000d459c <_Z34igh_eeprom_save_threshold_settingsP10thresholds>:
 * \brief Save threshold settings  to eeprom emulator
 * \param settings_to_save: pointer to struct to save
 * \return true or false based on write success
 */
uint8_t igh_eeprom_save_threshold_settings(thresholds * settings_to_save)
{
   d459c:	b510      	push	{r4, lr}
   d459e:	4604      	mov	r4, r0
   d45a0:	b08e      	sub	sp, #56	; 0x38
    thresholds local_buffer;
    // save the data
    EEPROM.put(SYSTEM_THRESHOLDS_ADDRESS, *settings_to_save);
   d45a2:	f001 fe75 	bl	d6290 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d45a6:	2234      	movs	r2, #52	; 0x34
   d45a8:	4621      	mov	r1, r4
   d45aa:	f44f 7000 	mov.w	r0, #512	; 0x200
   d45ae:	f000 fb45 	bl	d4c3c <HAL_EEPROM_Put>
    // check if data is saved
    igh_eeprom_read_threshold_settings(&local_buffer);
   d45b2:	a801      	add	r0, sp, #4
   d45b4:	f7ff ffcc 	bl	d4550 <_Z34igh_eeprom_read_threshold_settingsP10thresholds>

    if( local_buffer.checksum != (settings_to_save->checksum))
    {
        return 0;
   d45b8:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d45bc:	7823      	ldrb	r3, [r4, #0]
    }

    return 1;
}
   d45be:	1ac3      	subs	r3, r0, r3
   d45c0:	4258      	negs	r0, r3
   d45c2:	4158      	adcs	r0, r3
   d45c4:	b00e      	add	sp, #56	; 0x38
   d45c6:	bd10      	pop	{r4, pc}

000d45c8 <_Z21igh_eeprom_get_errorsPm>:
 * \brief Gets errors stored in eeprom
 * \param error_bit_field; uint32 bit fiel to populate
 * \return void
 */
void igh_eeprom_get_errors(uint32_t * error_bit_field)
{
   d45c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t _error = 0;
   d45ca:	ac02      	add	r4, sp, #8
   d45cc:	2300      	movs	r3, #0
   d45ce:	f844 3d04 	str.w	r3, [r4, #-4]!
 * \brief Gets errors stored in eeprom
 * \param error_bit_field; uint32 bit fiel to populate
 * \return void
 */
void igh_eeprom_get_errors(uint32_t * error_bit_field)
{
   d45d2:	4605      	mov	r5, r0
    uint32_t _error = 0;
    EEPROM.get(SYSTEM_ERRORS_ADDRESS, _error);
   d45d4:	f001 fe5c 	bl	d6290 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d45d8:	2204      	movs	r2, #4
   d45da:	4621      	mov	r1, r4
   d45dc:	f44f 6080 	mov.w	r0, #1024	; 0x400
   d45e0:	f000 fb24 	bl	d4c2c <HAL_EEPROM_Get>
    *error_bit_field = _error;
   d45e4:	9b01      	ldr	r3, [sp, #4]
   d45e6:	602b      	str	r3, [r5, #0]
}
   d45e8:	b003      	add	sp, #12
   d45ea:	bd30      	pop	{r4, r5, pc}

000d45ec <_Z16igh_eeproom_testv>:
 * \brief Tests that we can read and write to the EEPROM just fine
 * \param void
 * \return true or false
 */
uint8_t igh_eeproom_test(void)
{
   d45ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    thresholds test_thresholds;
    system_settings test_system_settings;

    uint8_t test_shield_id[12] = {0xe0,0x0f,0xce,0x68,0x9a,0x75,0x47,0x05,0xe7,0x9a,0x0e,0x37};
   d45ee:	4a42      	ldr	r2, [pc, #264]	; (d46f8 <_Z16igh_eeproom_testv+0x10c>)
 * \brief Tests that we can read and write to the EEPROM just fine
 * \param void
 * \return true or false
 */
uint8_t igh_eeproom_test(void)
{
   d45f0:	b0a5      	sub	sp, #148	; 0x94
    thresholds test_thresholds;
    system_settings test_system_settings;

    uint8_t test_shield_id[12] = {0xe0,0x0f,0xce,0x68,0x9a,0x75,0x47,0x05,0xe7,0x9a,0x0e,0x37};
   d45f2:	6810      	ldr	r0, [r2, #0]
   d45f4:	6851      	ldr	r1, [r2, #4]
   d45f6:	ab01      	add	r3, sp, #4
   d45f8:	c303      	stmia	r3!, {r0, r1}
   d45fa:	6890      	ldr	r0, [r2, #8]
   d45fc:	6018      	str	r0, [r3, #0]
    uint8_t test_broker[] = "test.broker.com";
   d45fe:	4b3f      	ldr	r3, [pc, #252]	; (d46fc <_Z16igh_eeproom_testv+0x110>)
   d4600:	aa04      	add	r2, sp, #16
   d4602:	f103 0710 	add.w	r7, r3, #16
   d4606:	ae01      	add	r6, sp, #4
   d4608:	4615      	mov	r5, r2
   d460a:	6818      	ldr	r0, [r3, #0]
   d460c:	6859      	ldr	r1, [r3, #4]
   d460e:	4614      	mov	r4, r2
   d4610:	c403      	stmia	r4!, {r0, r1}
   d4612:	3308      	adds	r3, #8
   d4614:	42bb      	cmp	r3, r7
   d4616:	4622      	mov	r2, r4
   d4618:	d1f7      	bne.n	d460a <_Z16igh_eeproom_testv+0x1e>

    memset(&test_system_settings, 0, sizeof(test_system_settings));
   d461a:	223c      	movs	r2, #60	; 0x3c
   d461c:	2100      	movs	r1, #0
   d461e:	a815      	add	r0, sp, #84	; 0x54
   d4620:	f002 fd4d 	bl	d70be <memset>
    memset(&test_thresholds, 0, sizeof(test_thresholds));
   d4624:	2234      	movs	r2, #52	; 0x34
   d4626:	2100      	movs	r1, #0
   d4628:	a808      	add	r0, sp, #32
   d462a:	f002 fd48 	bl	d70be <memset>

    memcpy(test_system_settings.serial_number, test_shield_id, 12);
   d462e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   d4632:	ab18      	add	r3, sp, #96	; 0x60
   d4634:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    memcpy(test_system_settings.broker, test_broker, sizeof(test_broker));
   d4638:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   d463c:	ac1b      	add	r4, sp, #108	; 0x6c
   d463e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    test_system_settings.op_state = OP_INACTIVE;
    test_system_settings.reporting_interval = 0x11111111;
   d4642:	f04f 3511 	mov.w	r5, #286331153	; 0x11111111
    test_system_settings.data_resolution = 0x11111111;
    test_system_settings.broker_port = 0x1111;
   d4646:	f241 1411 	movw	r4, #4369	; 0x1111
    test_system_settings.checksum = igh_settings_calculate_checksum(&test_system_settings, sizeof(test_system_settings));
   d464a:	213c      	movs	r1, #60	; 0x3c
   d464c:	a815      	add	r0, sp, #84	; 0x54
    memcpy(test_system_settings.serial_number, test_shield_id, 12);
    memcpy(test_system_settings.broker, test_broker, sizeof(test_broker));
    test_system_settings.op_state = OP_INACTIVE;
    test_system_settings.reporting_interval = 0x11111111;
    test_system_settings.data_resolution = 0x11111111;
    test_system_settings.broker_port = 0x1111;
   d464e:	f8ad 408c 	strh.w	r4, [sp, #140]	; 0x8c
    memset(&test_thresholds, 0, sizeof(test_thresholds));

    memcpy(test_system_settings.serial_number, test_shield_id, 12);
    memcpy(test_system_settings.broker, test_broker, sizeof(test_broker));
    test_system_settings.op_state = OP_INACTIVE;
    test_system_settings.reporting_interval = 0x11111111;
   d4652:	9516      	str	r5, [sp, #88]	; 0x58
    test_system_settings.data_resolution = 0x11111111;
   d4654:	9517      	str	r5, [sp, #92]	; 0x5c
    test_system_settings.broker_port = 0x1111;
    test_system_settings.checksum = igh_settings_calculate_checksum(&test_system_settings, sizeof(test_system_settings));
   d4656:	f7ff fd2a 	bl	d40ae <igh_settings_calculate_checksum>
    test_thresholds.shield_battery_level_high = 0x1111;
    test_thresholds.spear_battery_level_low = 0x1111;
    test_thresholds.spear_battery_level_high = 0x1111;
    test_thresholds.water_dispensed_period_high = 0x11111111;
    test_thresholds.water_dispensed_period_low = 0x11111111;
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));
   d465a:	2134      	movs	r1, #52	; 0x34
    memcpy(test_system_settings.broker, test_broker, sizeof(test_broker));
    test_system_settings.op_state = OP_INACTIVE;
    test_system_settings.reporting_interval = 0x11111111;
    test_system_settings.data_resolution = 0x11111111;
    test_system_settings.broker_port = 0x1111;
    test_system_settings.checksum = igh_settings_calculate_checksum(&test_system_settings, sizeof(test_system_settings));
   d465c:	f88d 0054 	strb.w	r0, [sp, #84]	; 0x54
    test_thresholds.shield_battery_level_high = 0x1111;
    test_thresholds.spear_battery_level_low = 0x1111;
    test_thresholds.spear_battery_level_high = 0x1111;
    test_thresholds.water_dispensed_period_high = 0x11111111;
    test_thresholds.water_dispensed_period_low = 0x11111111;
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));
   d4660:	a808      	add	r0, sp, #32
    test_system_settings.reporting_interval = 0x11111111;
    test_system_settings.data_resolution = 0x11111111;
    test_system_settings.broker_port = 0x1111;
    test_system_settings.checksum = igh_settings_calculate_checksum(&test_system_settings, sizeof(test_system_settings));

    test_thresholds.soil_moisture_low = 0x1111;
   d4662:	f8ad 4022 	strh.w	r4, [sp, #34]	; 0x22
    test_thresholds.soil_moisture_high = 0x1111;
   d4666:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    test_thresholds.air_humidity_low = 0x1111;
   d466a:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
    test_thresholds.air_humidity_high = 0x1111;
   d466e:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
    test_thresholds.soil_humidity_low = 0x1111;
   d4672:	f8ad 4026 	strh.w	r4, [sp, #38]	; 0x26
    test_thresholds.soil_humidity_high = 0x1111;
   d4676:	f8ad 4040 	strh.w	r4, [sp, #64]	; 0x40
    test_thresholds.carbon_dioxide_low = 0x1111;
   d467a:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
    test_thresholds.carbon_dioxide_high = 0x1111;
   d467e:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
    test_thresholds.air_temperature_low = 0x1111;
   d4682:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
    test_thresholds.air_temperature_high = 0x1111;
   d4686:	f8ad 4044 	strh.w	r4, [sp, #68]	; 0x44
    test_thresholds.soil_temperature_low = 0x1111;
   d468a:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
    test_thresholds.soil_temperature_high = 0x1111;
   d468e:	f8ad 4046 	strh.w	r4, [sp, #70]	; 0x46
    test_thresholds.soil_npk_low = 0x1111;
   d4692:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    test_thresholds.soil_npk_high = 0x1111;
   d4696:	f8ad 4048 	strh.w	r4, [sp, #72]	; 0x48
    test_thresholds.light_intensity_high = 0x1111;
   d469a:	f8ad 404a 	strh.w	r4, [sp, #74]	; 0x4a
    test_thresholds.light_intensity_low = 0x1111;
   d469e:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
    test_thresholds.shield_battery_level_low = 0x1111;
   d46a2:	f8ad 4032 	strh.w	r4, [sp, #50]	; 0x32
    test_thresholds.shield_battery_level_high = 0x1111;
   d46a6:	f8ad 404c 	strh.w	r4, [sp, #76]	; 0x4c
    test_thresholds.spear_battery_level_low = 0x1111;
   d46aa:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    test_thresholds.spear_battery_level_high = 0x1111;
   d46ae:	f8ad 404e 	strh.w	r4, [sp, #78]	; 0x4e
    test_thresholds.water_dispensed_period_high = 0x11111111;
   d46b2:	9514      	str	r5, [sp, #80]	; 0x50
    test_thresholds.water_dispensed_period_low = 0x11111111;
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));

    uint32_t test_error = 0xAAAAAAAA;
    uint32_t ret_test_error = 0;
   d46b4:	ac24      	add	r4, sp, #144	; 0x90
    test_thresholds.shield_battery_level_low = 0x1111;
    test_thresholds.shield_battery_level_high = 0x1111;
    test_thresholds.spear_battery_level_low = 0x1111;
    test_thresholds.spear_battery_level_high = 0x1111;
    test_thresholds.water_dispensed_period_high = 0x11111111;
    test_thresholds.water_dispensed_period_low = 0x11111111;
   d46b6:	950e      	str	r5, [sp, #56]	; 0x38
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));
   d46b8:	f7ff fcf9 	bl	d40ae <igh_settings_calculate_checksum>

    uint32_t test_error = 0xAAAAAAAA;
    uint32_t ret_test_error = 0;
   d46bc:	2300      	movs	r3, #0
   d46be:	f844 3d90 	str.w	r3, [r4, #-144]!
    test_thresholds.shield_battery_level_high = 0x1111;
    test_thresholds.spear_battery_level_low = 0x1111;
    test_thresholds.spear_battery_level_high = 0x1111;
    test_thresholds.water_dispensed_period_high = 0x11111111;
    test_thresholds.water_dispensed_period_low = 0x11111111;
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));
   d46c2:	f88d 0020 	strb.w	r0, [sp, #32]

    uint32_t test_error = 0xAAAAAAAA;
    uint32_t ret_test_error = 0;
    igh_eeprom_update_errors(test_error);
   d46c6:	f04f 30aa 	mov.w	r0, #2863311530	; 0xaaaaaaaa
   d46ca:	f7ff fef7 	bl	d44bc <_Z24igh_eeprom_update_errorsm>
    igh_eeprom_get_errors(&ret_test_error);
   d46ce:	4620      	mov	r0, r4
   d46d0:	f7ff ff7a 	bl	d45c8 <_Z21igh_eeprom_get_errorsPm>

    return igh_eeprom_save_system_settings(&test_system_settings)
   d46d4:	a815      	add	r0, sp, #84	; 0x54
   d46d6:	f7ff ff26 	bl	d4526 <_Z31igh_eeprom_save_system_settingsP15system_settings>
           && igh_eeprom_save_threshold_settings(&test_thresholds)
           && (ret_test_error == test_error);
   d46da:	b908      	cbnz	r0, d46e0 <_Z16igh_eeproom_testv+0xf4>
   d46dc:	2000      	movs	r0, #0
   d46de:	e009      	b.n	d46f4 <_Z16igh_eeproom_testv+0x108>
    uint32_t ret_test_error = 0;
    igh_eeprom_update_errors(test_error);
    igh_eeprom_get_errors(&ret_test_error);

    return igh_eeprom_save_system_settings(&test_system_settings)
           && igh_eeprom_save_threshold_settings(&test_thresholds)
   d46e0:	a808      	add	r0, sp, #32
   d46e2:	f7ff ff5b 	bl	d459c <_Z34igh_eeprom_save_threshold_settingsP10thresholds>
   d46e6:	2800      	cmp	r0, #0
   d46e8:	d0f8      	beq.n	d46dc <_Z16igh_eeproom_testv+0xf0>
           && (ret_test_error == test_error);
   d46ea:	9800      	ldr	r0, [sp, #0]
   d46ec:	f1a0 33aa 	sub.w	r3, r0, #2863311530	; 0xaaaaaaaa
   d46f0:	4258      	negs	r0, r3
   d46f2:	4158      	adcs	r0, r3
}
   d46f4:	b025      	add	sp, #148	; 0x94
   d46f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d46f8:	000d7290 	.word	0x000d7290
   d46fc:	000d729c 	.word	0x000d729c

000d4700 <_GLOBAL__sub_I__Z31igh_eeprom_save_system_settingsP15system_settings>:
   d4700:	f000 ba3c 	b.w	d4b7c <HAL_Pin_Map>

000d4704 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d4704:	6803      	ldr	r3, [r0, #0]
   d4706:	4718      	bx	r3

000d4708 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4708:	2a01      	cmp	r2, #1
   d470a:	d002      	beq.n	d4712 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d470c:	2a02      	cmp	r2, #2
   d470e:	d002      	beq.n	d4716 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d4710:	e004      	b.n	d471c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4712:	6001      	str	r1, [r0, #0]
	      break;
   d4714:	e002      	b.n	d471c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d4716:	680b      	ldr	r3, [r1, #0]
   d4718:	b100      	cbz	r0, d471c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d471a:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d471c:	2000      	movs	r0, #0
   d471e:	4770      	bx	lr

000d4720 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d4720:	6943      	ldr	r3, [r0, #20]
   d4722:	b113      	cbz	r3, d472a <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4724:	6983      	ldr	r3, [r0, #24]
   d4726:	300c      	adds	r0, #12
   d4728:	4718      	bx	r3
   d472a:	4770      	bx	lr

000d472c <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d472c:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d472e:	2100      	movs	r1, #0
   d4730:	4604      	mov	r4, r0
   d4732:	4608      	mov	r0, r1
   d4734:	f000 fab2 	bl	d4c9c <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4738:	a902      	add	r1, sp, #8
   d473a:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d473c:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d473e:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d4742:	f000 fac3 	bl	d4ccc <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d4746:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4748:	b10c      	cbz	r4, d474e <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d474a:	2301      	movs	r3, #1
   d474c:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d474e:	2100      	movs	r1, #0
   d4750:	2001      	movs	r0, #1
   d4752:	f000 faa3 	bl	d4c9c <os_thread_scheduling>
            }
        }
        if (t) {
   d4756:	b12c      	cbz	r4, d4764 <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d4758:	6823      	ldr	r3, [r4, #0]
   d475a:	4620      	mov	r0, r4
   d475c:	689b      	ldr	r3, [r3, #8]
   d475e:	4798      	blx	r3
            t->running = false;
   d4760:	2300      	movs	r3, #0
   d4762:	7123      	strb	r3, [r4, #4]
        }
    }
   d4764:	b002      	add	sp, #8
   d4766:	bd10      	pop	{r4, pc}

000d4768 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4768:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d476a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d476c:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d476e:	b113      	cbz	r3, d4776 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4770:	2203      	movs	r2, #3
   d4772:	4601      	mov	r1, r0
   d4774:	4798      	blx	r3
    }
   d4776:	4620      	mov	r0, r4
   d4778:	bd10      	pop	{r4, pc}

000d477a <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d477a:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d477c:	6880      	ldr	r0, [r0, #8]
   d477e:	2300      	movs	r3, #0
   d4780:	b138      	cbz	r0, d4792 <_ZN5Timer5_stopEjb+0x18>
   d4782:	e88d 000a 	stmia.w	sp, {r1, r3}
   d4786:	2102      	movs	r1, #2
   d4788:	f000 faa8 	bl	d4cdc <os_timer_change>
   d478c:	fab0 f080 	clz	r0, r0
   d4790:	0940      	lsrs	r0, r0, #5
    }
   d4792:	b003      	add	sp, #12
   d4794:	f85d fb04 	ldr.w	pc, [sp], #4

000d4798 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4798:	b538      	push	{r3, r4, r5, lr}
   d479a:	4b10      	ldr	r3, [pc, #64]	; (d47dc <_ZN5TimerD1Ev+0x44>)
   d479c:	6003      	str	r3, [r0, #0]
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d479e:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d47a0:	4604      	mov	r4, r0
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d47a2:	b1a3      	cbz	r3, d47ce <_ZN5TimerD1Ev+0x36>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d47a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d47a8:	2200      	movs	r2, #0
   d47aa:	f7ff ffe6 	bl	d477a <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d47ae:	2100      	movs	r1, #0
   d47b0:	68a0      	ldr	r0, [r4, #8]
   d47b2:	f000 faab 	bl	d4d0c <os_timer_set_id>
            while (running) {
   d47b6:	7923      	ldrb	r3, [r4, #4]
   d47b8:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d47bc:	b113      	cbz	r3, d47c4 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d47be:	f000 fa55 	bl	d4c6c <os_thread_yield>
   d47c2:	e7f8      	b.n	d47b6 <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d47c4:	4629      	mov	r1, r5
   d47c6:	68a0      	ldr	r0, [r4, #8]
   d47c8:	f000 fa78 	bl	d4cbc <os_timer_destroy>
            handle = nullptr;
   d47cc:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d47ce:	f104 000c 	add.w	r0, r4, #12
   d47d2:	f7ff ffc9 	bl	d4768 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d47d6:	4620      	mov	r0, r4
   d47d8:	bd38      	pop	{r3, r4, r5, pc}
   d47da:	bf00      	nop
   d47dc:	000d72b4 	.word	0x000d72b4

000d47e0 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d47e0:	b510      	push	{r4, lr}
   d47e2:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d47e4:	f7ff ffd8 	bl	d4798 <_ZN5TimerD1Ev>
   d47e8:	4620      	mov	r0, r4
   d47ea:	211c      	movs	r1, #28
   d47ec:	f001 fdf2 	bl	d63d4 <_ZdlPvj>
   d47f0:	4620      	mov	r0, r4
   d47f2:	bd10      	pop	{r4, pc}

000d47f4 <_Z32igh_hardware_service_valve_statev>:
    current_valve_position = VALVE_CLOSE;
}

void igh_hardware_service_valve_state(void)
{
    digitalWrite(IGH_IRRIGATION_VALVE, current_valve_position);
   d47f4:	4b02      	ldr	r3, [pc, #8]	; (d4800 <_Z32igh_hardware_service_valve_statev+0xc>)
   d47f6:	2007      	movs	r0, #7
   d47f8:	7819      	ldrb	r1, [r3, #0]
   d47fa:	f001 bd1c 	b.w	d6236 <digitalWrite>
   d47fe:	bf00      	nop
   d4800:	2003e334 	.word	0x2003e334

000d4804 <_Z20igh_hardware_servicev>:
    igh_hardware_vlave_setup();
}

void igh_hardware_service(void)
{
    igh_hardware_service_valve_state();
   d4804:	f7ff bff6 	b.w	d47f4 <_Z32igh_hardware_service_valve_statev>

000d4808 <_Z29igh_hardware_test_valve_statev>:
{
    digitalWrite(IGH_IRRIGATION_VALVE, current_valve_position);
}

uint8_t igh_hardware_test_valve_state(void)
{
   d4808:	b508      	push	{r3, lr}
    return digitalRead(IGH_IRRIGATION_VALVE);
   d480a:	2007      	movs	r0, #7
   d480c:	f001 fd2c 	bl	d6268 <digitalRead>
}
   d4810:	b2c0      	uxtb	r0, r0
   d4812:	bd08      	pop	{r3, pc}

000d4814 <_Z26igh_boron_toggle_boron_ledh>:


/* Onboard LED APIs */
void igh_boron_toggle_boron_led(uint8_t _state)
{
    digitalWrite(BORON_LED, _state);
   d4814:	4601      	mov	r1, r0
   d4816:	2007      	movs	r0, #7
   d4818:	f001 bd0d 	b.w	d6236 <digitalWrite>

000d481c <_Z18igh_hardware_setupv>:
static void igh_hardware_irrigiation_button_setup(void);
static void igh_hardware_onboard_led_setup(void);
static void igh_hardware_vlave_setup(void);

void igh_hardware_setup(void)
{
   d481c:	b513      	push	{r0, r1, r4, lr}


/* Button APIs */
static void igh_hardware_irrigiation_button_setup(void)
{
    pinMode(IGH_IRRIGATION_BUTTON, INPUT_PULLUP);
   d481e:	2102      	movs	r1, #2
   d4820:	2005      	movs	r0, #5
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4822:	4c12      	ldr	r4, [pc, #72]	; (d486c <_Z18igh_hardware_setupv+0x50>)
   d4824:	f001 fcf6 	bl	d6214 <pinMode>
   d4828:	2200      	movs	r2, #0
   d482a:	4611      	mov	r1, r2
   d482c:	4620      	mov	r0, r4
   d482e:	f7ff ffa4 	bl	d477a <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d4832:	68a0      	ldr	r0, [r4, #8]
   d4834:	b140      	cbz	r0, d4848 <_Z18igh_hardware_setupv+0x2c>
   d4836:	2300      	movs	r3, #0
   d4838:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d483c:	e88d 000c 	stmia.w	sp, {r2, r3}
   d4840:	4619      	mov	r1, r3
   d4842:	461a      	mov	r2, r3
   d4844:	f000 fa4a 	bl	d4cdc <os_timer_change>
    igh_button_timer.start();
    igh_button_sec_counter = 0;
   d4848:	4b09      	ldr	r3, [pc, #36]	; (d4870 <_Z18igh_hardware_setupv+0x54>)
   d484a:	2400      	movs	r4, #0
    digitalWrite(BORON_LED, _state);
}

static void igh_hardware_onboard_led_setup(void)
{
    pinMode(BORON_LED, OUTPUT);
   d484c:	2101      	movs	r1, #1
   d484e:	2007      	movs	r0, #7
/* Button APIs */
static void igh_hardware_irrigiation_button_setup(void)
{
    pinMode(IGH_IRRIGATION_BUTTON, INPUT_PULLUP);
    igh_button_timer.start();
    igh_button_sec_counter = 0;
   d4850:	701c      	strb	r4, [r3, #0]
    digitalWrite(BORON_LED, _state);
}

static void igh_hardware_onboard_led_setup(void)
{
    pinMode(BORON_LED, OUTPUT);
   d4852:	f001 fcdf 	bl	d6214 <pinMode>
    igh_boron_toggle_boron_led(OFF);
   d4856:	4620      	mov	r0, r4
   d4858:	f7ff ffdc 	bl	d4814 <_Z26igh_boron_toggle_boron_ledh>


/* Valve control APIs */
static void igh_hardware_vlave_setup(void)
{
    pinMode(IGH_IRRIGATION_VALVE, OUTPUT);
   d485c:	2101      	movs	r1, #1
   d485e:	2007      	movs	r0, #7
   d4860:	f001 fcd8 	bl	d6214 <pinMode>
    current_valve_position = VALVE_CLOSE;
   d4864:	4b03      	ldr	r3, [pc, #12]	; (d4874 <_Z18igh_hardware_setupv+0x58>)
   d4866:	701c      	strb	r4, [r3, #0]
void igh_hardware_setup(void)
{
    igh_hardware_irrigiation_button_setup();
    igh_hardware_onboard_led_setup();
    igh_hardware_vlave_setup();
}
   d4868:	b002      	add	sp, #8
   d486a:	bd10      	pop	{r4, pc}
   d486c:	2003e338 	.word	0x2003e338
   d4870:	2003e335 	.word	0x2003e335
   d4874:	2003e334 	.word	0x2003e334

000d4878 <_Z21igh_boron_read_buttonv>:
    igh_button_timer.start();
    igh_button_sec_counter = 0;
}

uint8_t igh_boron_read_button(void)
{
   d4878:	b508      	push	{r3, lr}
    return digitalRead(IGH_IRRIGATION_BUTTON);
   d487a:	2005      	movs	r0, #5
   d487c:	f001 fcf4 	bl	d6268 <digitalRead>
}
   d4880:	b2c0      	uxtb	r0, r0
   d4882:	bd08      	pop	{r3, pc}

000d4884 <_Z31igh_boron_button_press_durationv>:

void igh_boron_button_press_duration(void)
{
   d4884:	b508      	push	{r3, lr}
    if(!igh_boron_read_button())
   d4886:	f7ff fff7 	bl	d4878 <_Z21igh_boron_read_buttonv>
   d488a:	4b04      	ldr	r3, [pc, #16]	; (d489c <_Z31igh_boron_button_press_durationv+0x18>)
   d488c:	b910      	cbnz	r0, d4894 <_Z31igh_boron_button_press_durationv+0x10>
    {
        igh_button_sec_counter++;
   d488e:	781a      	ldrb	r2, [r3, #0]
   d4890:	3201      	adds	r2, #1
   d4892:	e000      	b.n	d4896 <_Z31igh_boron_button_press_durationv+0x12>
    }
    else
    {
        igh_button_sec_counter = 0;
   d4894:	2200      	movs	r2, #0
   d4896:	701a      	strb	r2, [r3, #0]
   d4898:	bd08      	pop	{r3, pc}
   d489a:	bf00      	nop
   d489c:	2003e335 	.word	0x2003e335

000d48a0 <_GLOBAL__sub_I_igh_button_sec_counter>:
    } 
   d48a0:	b570      	push	{r4, r5, r6, lr}
   d48a2:	b088      	sub	sp, #32
   d48a4:	f000 f96a 	bl	d4b7c <HAL_Pin_Map>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d48a8:	4b19      	ldr	r3, [pc, #100]	; (d4910 <_GLOBAL__sub_I_igh_button_sec_counter+0x70>)
   d48aa:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d48ac:	ad04      	add	r5, sp, #16
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d48ae:	4c19      	ldr	r4, [pc, #100]	; (d4914 <_GLOBAL__sub_I_igh_button_sec_counter+0x74>)
   d48b0:	4b19      	ldr	r3, [pc, #100]	; (d4918 <_GLOBAL__sub_I_igh_button_sec_counter+0x78>)
   d48b2:	6023      	str	r3, [r4, #0]
   d48b4:	e895 0003 	ldmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d48b8:	f104 020c 	add.w	r2, r4, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d48bc:	ae02      	add	r6, sp, #8
   d48be:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d48c2:	e892 0003 	ldmia.w	r2, {r0, r1}
   d48c6:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d48ca:	e896 0003 	ldmia.w	r6, {r0, r1}
   d48ce:	e882 0003 	stmia.w	r2, {r0, r1}
   d48d2:	4a12      	ldr	r2, [pc, #72]	; (d491c <_GLOBAL__sub_I_igh_button_sec_counter+0x7c>)
   d48d4:	6162      	str	r2, [r4, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d48d6:	69a2      	ldr	r2, [r4, #24]
   d48d8:	9207      	str	r2, [sp, #28]
   d48da:	2300      	movs	r3, #0
      __b = _GLIBCXX_MOVE(__tmp);
   d48dc:	4a10      	ldr	r2, [pc, #64]	; (d4920 <_GLOBAL__sub_I_igh_button_sec_counter+0x80>)
   d48de:	7123      	strb	r3, [r4, #4]
   d48e0:	60a3      	str	r3, [r4, #8]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d48e2:	9306      	str	r3, [sp, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   d48e4:	61a2      	str	r2, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d48e6:	9301      	str	r3, [sp, #4]
   d48e8:	9300      	str	r3, [sp, #0]
   d48ea:	4a0e      	ldr	r2, [pc, #56]	; (d4924 <_GLOBAL__sub_I_igh_button_sec_counter+0x84>)
   d48ec:	4623      	mov	r3, r4
   d48ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d48f2:	f104 0008 	add.w	r0, r4, #8
   d48f6:	f000 f9d9 	bl	d4cac <os_timer_create>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d48fa:	4628      	mov	r0, r5
   d48fc:	f7ff ff34 	bl	d4768 <_ZNSt14_Function_baseD1Ev>
#include "Particle.h"
#include "igh_hardware.h"

// button global variables
uint8_t igh_button_sec_counter;
Timer igh_button_timer(1000, igh_boron_button_press_duration);
   d4900:	4a09      	ldr	r2, [pc, #36]	; (d4928 <_GLOBAL__sub_I_igh_button_sec_counter+0x88>)
   d4902:	490a      	ldr	r1, [pc, #40]	; (d492c <_GLOBAL__sub_I_igh_button_sec_counter+0x8c>)
   d4904:	4620      	mov	r0, r4
   d4906:	f001 fd57 	bl	d63b8 <__aeabi_atexit>
    }
    else
    {
        igh_button_sec_counter = 0;
    } 
   d490a:	b008      	add	sp, #32
   d490c:	bd70      	pop	{r4, r5, r6, pc}
   d490e:	bf00      	nop
   d4910:	000d4885 	.word	0x000d4885
   d4914:	2003e338 	.word	0x2003e338
   d4918:	000d72b4 	.word	0x000d72b4
   d491c:	000d4709 	.word	0x000d4709
   d4920:	000d4705 	.word	0x000d4705
   d4924:	000d472d 	.word	0x000d472d
   d4928:	2003e31c 	.word	0x2003e31c
   d492c:	000d4799 	.word	0x000d4799

000d4930 <_ZN14CellularSignalD1Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d4930:	4770      	bx	lr

000d4932 <_ZN14CellularSignalD0Ev>:
   d4932:	b510      	push	{r4, lr}
   d4934:	2128      	movs	r1, #40	; 0x28
   d4936:	4604      	mov	r4, r0
   d4938:	f001 fd4c 	bl	d63d4 <_ZdlPvj>
   d493c:	4620      	mov	r0, r4
   d493e:	bd10      	pop	{r4, pc}

000d4940 <_Z19igh_boron_sync_timev>:
float battery_voltage, battery_SOC;
unsigned long unix_time;

/* Functions */
void igh_boron_sync_time(void)
{
   d4940:	b510      	push	{r4, lr}
   d4942:	f000 f95b 	bl	d4bfc <HAL_Timer_Get_Milli_Seconds>
    if((millis() - lastSync > ONE_DAY_MILLIS))
   d4946:	4b08      	ldr	r3, [pc, #32]	; (d4968 <_Z19igh_boron_sync_timev+0x28>)
   d4948:	681a      	ldr	r2, [r3, #0]
   d494a:	1a80      	subs	r0, r0, r2
   d494c:	4a07      	ldr	r2, [pc, #28]	; (d496c <_Z19igh_boron_sync_timev+0x2c>)
   d494e:	4290      	cmp	r0, r2
   d4950:	461c      	mov	r4, r3
   d4952:	d908      	bls.n	d4966 <_Z19igh_boron_sync_timev+0x26>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4954:	f000 fb56 	bl	d5004 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d4958:	b110      	cbz	r0, d4960 <_Z19igh_boron_sync_timev+0x20>
            return false;
        }
        return spark_sync_time(NULL);
   d495a:	2000      	movs	r0, #0
   d495c:	f000 fb5a 	bl	d5014 <spark_sync_time>
   d4960:	f000 f94c 	bl	d4bfc <HAL_Timer_Get_Milli_Seconds>
    {
        Particle.syncTime();
        lastSync = millis(); 
   d4964:	6020      	str	r0, [r4, #0]
   d4966:	bd10      	pop	{r4, pc}
   d4968:	2003e37c 	.word	0x2003e37c
   d496c:	05265c00 	.word	0x05265c00

000d4970 <_Z13igh_boron_SoCv>:
    return Time.now();
}

float igh_boron_SoC(void)
{
    return fuel.getSoC();
   d4970:	4801      	ldr	r0, [pc, #4]	; (d4978 <_Z13igh_boron_SoCv+0x8>)
   d4972:	f000 bf6f 	b.w	d5854 <_ZN9FuelGauge6getSoCEv>
   d4976:	bf00      	nop
   d4978:	2003e380 	.word	0x2003e380

000d497c <_Z17igh_boron_voltagev>:
}

float igh_boron_voltage(void)
{
    return fuel.getVCell();
   d497c:	4801      	ldr	r0, [pc, #4]	; (d4984 <_Z17igh_boron_voltagev+0x8>)
   d497e:	f000 bf53 	b.w	d5828 <_ZN9FuelGauge8getVCellEv>
   d4982:	bf00      	nop
   d4984:	2003e380 	.word	0x2003e380

000d4988 <_Z26igh_boron_get_celular_datav>:
}

void igh_boron_get_celular_data(void)
{
   d4988:	b530      	push	{r4, r5, lr}
   d498a:	b08b      	sub	sp, #44	; 0x2c
    signal = Cellular.RSSI();
   d498c:	4668      	mov	r0, sp
#include "cellular_enums_hal.h"

/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
   d498e:	4c09      	ldr	r4, [pc, #36]	; (d49b4 <_Z26igh_boron_get_celular_datav+0x2c>)
   d4990:	4909      	ldr	r1, [pc, #36]	; (d49b8 <_Z26igh_boron_get_celular_datav+0x30>)
   d4992:	f001 f93b 	bl	d5c0c <_ZN5spark13CellularClass4RSSIEv>
   d4996:	9b02      	ldr	r3, [sp, #8]
   d4998:	60a3      	str	r3, [r4, #8]
   d499a:	ad04      	add	r5, sp, #16
   d499c:	9b03      	ldr	r3, [sp, #12]
   d499e:	60e3      	str	r3, [r4, #12]
   d49a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d49a2:	3410      	adds	r4, #16
   d49a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d49a6:	e895 0003 	ldmia.w	r5, {r0, r1}
   d49aa:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d49ae:	b00b      	add	sp, #44	; 0x2c
   d49b0:	bd30      	pop	{r4, r5, pc}
   d49b2:	bf00      	nop
   d49b4:	2003e354 	.word	0x2003e354
   d49b8:	2003e3d8 	.word	0x2003e3d8

000d49bc <_Z12igh_boron_ssv>:
    return signal.getQuality();
}

float igh_boron_ss(void)
{
    return signal.getQuality();
   d49bc:	4801      	ldr	r0, [pc, #4]	; (d49c4 <_Z12igh_boron_ssv+0x8>)
   d49be:	f000 be61 	b.w	d5684 <_ZNK14CellularSignal10getQualityEv>
   d49c2:	bf00      	nop
   d49c4:	2003e354 	.word	0x2003e354

000d49c8 <_Z30igh_boron_connecetd_to_networkv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d49c8:	4b02      	ldr	r3, [pc, #8]	; (d49d4 <_Z30igh_boron_connecetd_to_networkv+0xc>)
   d49ca:	2200      	movs	r2, #0
   d49cc:	4611      	mov	r1, r2
   d49ce:	6858      	ldr	r0, [r3, #4]
   d49d0:	f000 bad8 	b.w	d4f84 <network_ready>
   d49d4:	2003e3d8 	.word	0x2003e3d8

000d49d8 <_Z15igh_boron_setupv>:
{
    return Particle.connected();;
}

void igh_boron_setup(void)
{
   d49d8:	b508      	push	{r3, lr}
   d49da:	f000 f90f 	bl	d4bfc <HAL_Timer_Get_Milli_Seconds>
    lastSync = millis();
   d49de:	4b01      	ldr	r3, [pc, #4]	; (d49e4 <_Z15igh_boron_setupv+0xc>)
   d49e0:	6018      	str	r0, [r3, #0]
   d49e2:	bd08      	pop	{r3, pc}
   d49e4:	2003e37c 	.word	0x2003e37c

000d49e8 <_Z17igh_boron_servicev>:
}

void igh_boron_service(void)
{
   d49e8:	b508      	push	{r3, lr}
    igh_boron_sync_time();
   d49ea:	f7ff ffa9 	bl	d4940 <_Z19igh_boron_sync_timev>
    igh_boron_get_celular_data();
}
   d49ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void igh_boron_service(void)
{
    igh_boron_sync_time();
    igh_boron_get_celular_data();
   d49f2:	f7ff bfc9 	b.w	d4988 <_Z26igh_boron_get_celular_datav>
	...

000d49f8 <_Z21igh_boron_test_devicev>:
}

void igh_boron_test_device(void)
{
   d49f8:	b510      	push	{r4, lr}
    Serial.print("\nUnix Time:      "); Serial.println(igh_boron_unix_time());
   d49fa:	f001 f8ad 	bl	d5b58 <_Z16_fetch_usbserialv>
   d49fe:	4937      	ldr	r1, [pc, #220]	; (d4adc <_Z21igh_boron_test_devicev+0xe4>)
   d4a00:	f000 fcaa 	bl	d5358 <_ZN5Print5printEPKc>
   d4a04:	f001 f8a8 	bl	d5b58 <_Z16_fetch_usbserialv>
   d4a08:	4604      	mov	r4, r0
    }
}

unsigned long igh_boron_unix_time(void)
{
    return Time.now();
   d4a0a:	f000 fde7 	bl	d55dc <_ZN9TimeClass3nowEv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4a0e:	220a      	movs	r2, #10
   d4a10:	4601      	mov	r1, r0
   d4a12:	4620      	mov	r0, r4
   d4a14:	f000 fcb3 	bl	d537e <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4a18:	4620      	mov	r0, r4
   d4a1a:	f000 fca4 	bl	d5366 <_ZN5Print7printlnEv>
}

void igh_boron_test_device(void)
{
    Serial.print("\nUnix Time:      "); Serial.println(igh_boron_unix_time());
    Serial.print("cloud status:     "); Serial.println(igh_boron_connected_to_cloud());
   d4a1e:	f001 f89b 	bl	d5b58 <_Z16_fetch_usbserialv>
   d4a22:	492f      	ldr	r1, [pc, #188]	; (d4ae0 <_Z21igh_boron_test_devicev+0xe8>)
   d4a24:	f000 fc98 	bl	d5358 <_ZN5Print5printEPKc>
   d4a28:	f001 f896 	bl	d5b58 <_Z16_fetch_usbserialv>
   d4a2c:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4a2e:	f000 fae9 	bl	d5004 <spark_cloud_flag_connected>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4a32:	220a      	movs	r2, #10
   d4a34:	4601      	mov	r1, r0
   d4a36:	4620      	mov	r0, r4
   d4a38:	f000 fca1 	bl	d537e <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4a3c:	4620      	mov	r0, r4
   d4a3e:	f000 fc92 	bl	d5366 <_ZN5Print7printlnEv>
    Serial.print("network status:   "); Serial.println(igh_boron_connecetd_to_network());
   d4a42:	f001 f889 	bl	d5b58 <_Z16_fetch_usbserialv>
   d4a46:	4927      	ldr	r1, [pc, #156]	; (d4ae4 <_Z21igh_boron_test_devicev+0xec>)
   d4a48:	f000 fc86 	bl	d5358 <_ZN5Print5printEPKc>
   d4a4c:	f001 f884 	bl	d5b58 <_Z16_fetch_usbserialv>
   d4a50:	4604      	mov	r4, r0
   d4a52:	f7ff ffb9 	bl	d49c8 <_Z30igh_boron_connecetd_to_networkv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4a56:	220a      	movs	r2, #10
   d4a58:	4601      	mov	r1, r0
   d4a5a:	4620      	mov	r0, r4
   d4a5c:	f000 fc8f 	bl	d537e <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4a60:	4620      	mov	r0, r4
   d4a62:	f000 fc80 	bl	d5366 <_ZN5Print7printlnEv>
    Serial.print("signal strength:  "); Serial.println(igh_boron_ss());
   d4a66:	f001 f877 	bl	d5b58 <_Z16_fetch_usbserialv>
   d4a6a:	491f      	ldr	r1, [pc, #124]	; (d4ae8 <_Z21igh_boron_test_devicev+0xf0>)
   d4a6c:	f000 fc74 	bl	d5358 <_ZN5Print5printEPKc>
   d4a70:	f001 f872 	bl	d5b58 <_Z16_fetch_usbserialv>
   d4a74:	4604      	mov	r4, r0
   d4a76:	f7ff ffa1 	bl	d49bc <_Z12igh_boron_ssv>
   d4a7a:	2102      	movs	r1, #2
   d4a7c:	4620      	mov	r0, r4
   d4a7e:	f000 fd68 	bl	d5552 <_ZN5Print7printlnEfi>
    Serial.print("signal quality:   "); Serial.println(igh_boron_sq());
   d4a82:	f001 f869 	bl	d5b58 <_Z16_fetch_usbserialv>
   d4a86:	4919      	ldr	r1, [pc, #100]	; (d4aec <_Z21igh_boron_test_devicev+0xf4>)
   d4a88:	f000 fc66 	bl	d5358 <_ZN5Print5printEPKc>
   d4a8c:	f001 f864 	bl	d5b58 <_Z16_fetch_usbserialv>
   d4a90:	4604      	mov	r4, r0
   d4a92:	f7ff ff93 	bl	d49bc <_Z12igh_boron_ssv>
   d4a96:	2102      	movs	r1, #2
   d4a98:	4620      	mov	r0, r4
   d4a9a:	f000 fd5a 	bl	d5552 <_ZN5Print7printlnEfi>
    Serial.print("Battery Voltage:  "); Serial.println(igh_boron_voltage());
   d4a9e:	f001 f85b 	bl	d5b58 <_Z16_fetch_usbserialv>
   d4aa2:	4913      	ldr	r1, [pc, #76]	; (d4af0 <_Z21igh_boron_test_devicev+0xf8>)
   d4aa4:	f000 fc58 	bl	d5358 <_ZN5Print5printEPKc>
   d4aa8:	f001 f856 	bl	d5b58 <_Z16_fetch_usbserialv>
   d4aac:	4604      	mov	r4, r0
   d4aae:	f7ff ff65 	bl	d497c <_Z17igh_boron_voltagev>
   d4ab2:	2102      	movs	r1, #2
   d4ab4:	4620      	mov	r0, r4
   d4ab6:	f000 fd4c 	bl	d5552 <_ZN5Print7printlnEfi>
    Serial.print("Battery SOC:      "); Serial.println(igh_boron_SoC());
   d4aba:	f001 f84d 	bl	d5b58 <_Z16_fetch_usbserialv>
   d4abe:	490d      	ldr	r1, [pc, #52]	; (d4af4 <_Z21igh_boron_test_devicev+0xfc>)
   d4ac0:	f000 fc4a 	bl	d5358 <_ZN5Print5printEPKc>
   d4ac4:	f001 f848 	bl	d5b58 <_Z16_fetch_usbserialv>
   d4ac8:	4604      	mov	r4, r0
   d4aca:	f7ff ff51 	bl	d4970 <_Z13igh_boron_SoCv>
   d4ace:	4620      	mov	r0, r4
   d4ad0:	2102      	movs	r1, #2
}
   d4ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.print("cloud status:     "); Serial.println(igh_boron_connected_to_cloud());
    Serial.print("network status:   "); Serial.println(igh_boron_connecetd_to_network());
    Serial.print("signal strength:  "); Serial.println(igh_boron_ss());
    Serial.print("signal quality:   "); Serial.println(igh_boron_sq());
    Serial.print("Battery Voltage:  "); Serial.println(igh_boron_voltage());
    Serial.print("Battery SOC:      "); Serial.println(igh_boron_SoC());
   d4ad6:	f000 bd3c 	b.w	d5552 <_ZN5Print7printlnEfi>
   d4ada:	bf00      	nop
   d4adc:	000d72c0 	.word	0x000d72c0
   d4ae0:	000d72d2 	.word	0x000d72d2
   d4ae4:	000d72e5 	.word	0x000d72e5
   d4ae8:	000d72f8 	.word	0x000d72f8
   d4aec:	000d730b 	.word	0x000d730b
   d4af0:	000d731e 	.word	0x000d731e
   d4af4:	000d7331 	.word	0x000d7331

000d4af8 <_GLOBAL__sub_I_lastSync>:
}
   d4af8:	b570      	push	{r4, r5, r6, lr}
   d4afa:	f000 f83f 	bl	d4b7c <HAL_Pin_Map>
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d4afe:	4c10      	ldr	r4, [pc, #64]	; (d4b40 <_GLOBAL__sub_I_lastSync+0x48>)
   d4b00:	4b10      	ldr	r3, [pc, #64]	; (d4b44 <_GLOBAL__sub_I_lastSync+0x4c>)
   d4b02:	6023      	str	r3, [r4, #0]
   d4b04:	2500      	movs	r5, #0
   d4b06:	3328      	adds	r3, #40	; 0x28
   d4b08:	4629      	mov	r1, r5
#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)

unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
   d4b0a:	4e0f      	ldr	r6, [pc, #60]	; (d4b48 <_GLOBAL__sub_I_lastSync+0x50>)
   d4b0c:	6063      	str	r3, [r4, #4]
   d4b0e:	2218      	movs	r2, #24
   d4b10:	f104 0010 	add.w	r0, r4, #16
   d4b14:	60a5      	str	r5, [r4, #8]
   d4b16:	60e5      	str	r5, [r4, #12]
   d4b18:	f002 fad1 	bl	d70be <memset>
   d4b1c:	4620      	mov	r0, r4
float signal_quality, signal_strength;
FuelGauge fuel;
   d4b1e:	4c0b      	ldr	r4, [pc, #44]	; (d4b4c <_GLOBAL__sub_I_lastSync+0x54>)
#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)

unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
   d4b20:	490b      	ldr	r1, [pc, #44]	; (d4b50 <_GLOBAL__sub_I_lastSync+0x58>)
   d4b22:	4632      	mov	r2, r6
   d4b24:	f001 fc48 	bl	d63b8 <__aeabi_atexit>
float signal_quality, signal_strength;
FuelGauge fuel;
   d4b28:	4629      	mov	r1, r5
   d4b2a:	4620      	mov	r0, r4
   d4b2c:	f000 fe3c 	bl	d57a8 <_ZN9FuelGaugeC1Eb>
   d4b30:	4632      	mov	r2, r6
   d4b32:	4620      	mov	r0, r4
   d4b34:	4907      	ldr	r1, [pc, #28]	; (d4b54 <_GLOBAL__sub_I_lastSync+0x5c>)
    Serial.print("network status:   "); Serial.println(igh_boron_connecetd_to_network());
    Serial.print("signal strength:  "); Serial.println(igh_boron_ss());
    Serial.print("signal quality:   "); Serial.println(igh_boron_sq());
    Serial.print("Battery Voltage:  "); Serial.println(igh_boron_voltage());
    Serial.print("Battery SOC:      "); Serial.println(igh_boron_SoC());
}
   d4b36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
float signal_quality, signal_strength;
FuelGauge fuel;
   d4b3a:	f001 bc3d 	b.w	d63b8 <__aeabi_atexit>
   d4b3e:	bf00      	nop
   d4b40:	2003e354 	.word	0x2003e354
   d4b44:	000d7498 	.word	0x000d7498
   d4b48:	2003e31c 	.word	0x2003e31c
   d4b4c:	2003e380 	.word	0x2003e380
   d4b50:	000d4931 	.word	0x000d4931
   d4b54:	000d57c7 	.word	0x000d57c7

000d4b58 <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
   d4b58:	f000 b810 	b.w	d4b7c <HAL_Pin_Map>

000d4b5c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4b5c:	b508      	push	{r3, lr}
   d4b5e:	4b02      	ldr	r3, [pc, #8]	; (d4b68 <netdb_freeaddrinfo+0xc>)
   d4b60:	681b      	ldr	r3, [r3, #0]
   d4b62:	689b      	ldr	r3, [r3, #8]
   d4b64:	9301      	str	r3, [sp, #4]
   d4b66:	bd08      	pop	{r3, pc}
   d4b68:	00030268 	.word	0x00030268

000d4b6c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4b6c:	b508      	push	{r3, lr}
   d4b6e:	4b02      	ldr	r3, [pc, #8]	; (d4b78 <netdb_getaddrinfo+0xc>)
   d4b70:	681b      	ldr	r3, [r3, #0]
   d4b72:	68db      	ldr	r3, [r3, #12]
   d4b74:	9301      	str	r3, [sp, #4]
   d4b76:	bd08      	pop	{r3, pc}
   d4b78:	00030268 	.word	0x00030268

000d4b7c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4b7c:	b508      	push	{r3, lr}
   d4b7e:	4b02      	ldr	r3, [pc, #8]	; (d4b88 <HAL_Pin_Map+0xc>)
   d4b80:	681b      	ldr	r3, [r3, #0]
   d4b82:	681b      	ldr	r3, [r3, #0]
   d4b84:	9301      	str	r3, [sp, #4]
   d4b86:	bd08      	pop	{r3, pc}
   d4b88:	0003022c 	.word	0x0003022c

000d4b8c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4b8c:	b508      	push	{r3, lr}
   d4b8e:	4b02      	ldr	r3, [pc, #8]	; (d4b98 <HAL_Pin_Mode+0xc>)
   d4b90:	681b      	ldr	r3, [r3, #0]
   d4b92:	689b      	ldr	r3, [r3, #8]
   d4b94:	9301      	str	r3, [sp, #4]
   d4b96:	bd08      	pop	{r3, pc}
   d4b98:	0003022c 	.word	0x0003022c

000d4b9c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4b9c:	b508      	push	{r3, lr}
   d4b9e:	4b02      	ldr	r3, [pc, #8]	; (d4ba8 <HAL_Get_Pin_Mode+0xc>)
   d4ba0:	681b      	ldr	r3, [r3, #0]
   d4ba2:	68db      	ldr	r3, [r3, #12]
   d4ba4:	9301      	str	r3, [sp, #4]
   d4ba6:	bd08      	pop	{r3, pc}
   d4ba8:	0003022c 	.word	0x0003022c

000d4bac <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4bac:	b508      	push	{r3, lr}
   d4bae:	4b02      	ldr	r3, [pc, #8]	; (d4bb8 <HAL_GPIO_Write+0xc>)
   d4bb0:	681b      	ldr	r3, [r3, #0]
   d4bb2:	691b      	ldr	r3, [r3, #16]
   d4bb4:	9301      	str	r3, [sp, #4]
   d4bb6:	bd08      	pop	{r3, pc}
   d4bb8:	0003022c 	.word	0x0003022c

000d4bbc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4bbc:	b508      	push	{r3, lr}
   d4bbe:	4b02      	ldr	r3, [pc, #8]	; (d4bc8 <HAL_GPIO_Read+0xc>)
   d4bc0:	681b      	ldr	r3, [r3, #0]
   d4bc2:	695b      	ldr	r3, [r3, #20]
   d4bc4:	9301      	str	r3, [sp, #4]
   d4bc6:	bd08      	pop	{r3, pc}
   d4bc8:	0003022c 	.word	0x0003022c

000d4bcc <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4bcc:	b508      	push	{r3, lr}
   d4bce:	4b02      	ldr	r3, [pc, #8]	; (d4bd8 <HAL_SPI_Init+0xc>)
   d4bd0:	681b      	ldr	r3, [r3, #0]
   d4bd2:	69db      	ldr	r3, [r3, #28]
   d4bd4:	9301      	str	r3, [sp, #4]
   d4bd6:	bd08      	pop	{r3, pc}
   d4bd8:	00030230 	.word	0x00030230

000d4bdc <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4bdc:	b508      	push	{r3, lr}
   d4bde:	4b02      	ldr	r3, [pc, #8]	; (d4be8 <HAL_SPI_Is_Enabled+0xc>)
   d4be0:	681b      	ldr	r3, [r3, #0]
   d4be2:	6a1b      	ldr	r3, [r3, #32]
   d4be4:	9301      	str	r3, [sp, #4]
   d4be6:	bd08      	pop	{r3, pc}
   d4be8:	00030230 	.word	0x00030230

000d4bec <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4bec:	b508      	push	{r3, lr}
   d4bee:	4b02      	ldr	r3, [pc, #8]	; (d4bf8 <HAL_RNG_GetRandomNumber+0xc>)
   d4bf0:	681b      	ldr	r3, [r3, #0]
   d4bf2:	685b      	ldr	r3, [r3, #4]
   d4bf4:	9301      	str	r3, [sp, #4]
   d4bf6:	bd08      	pop	{r3, pc}
   d4bf8:	00030218 	.word	0x00030218

000d4bfc <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4bfc:	b508      	push	{r3, lr}
   d4bfe:	4b02      	ldr	r3, [pc, #8]	; (d4c08 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4c00:	681b      	ldr	r3, [r3, #0]
   d4c02:	695b      	ldr	r3, [r3, #20]
   d4c04:	9301      	str	r3, [sp, #4]
   d4c06:	bd08      	pop	{r3, pc}
   d4c08:	00030218 	.word	0x00030218

000d4c0c <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d4c0c:	b508      	push	{r3, lr}
   d4c0e:	4b02      	ldr	r3, [pc, #8]	; (d4c18 <HAL_RTC_Get_UnixTime+0xc>)
   d4c10:	681b      	ldr	r3, [r3, #0]
   d4c12:	69db      	ldr	r3, [r3, #28]
   d4c14:	9301      	str	r3, [sp, #4]
   d4c16:	bd08      	pop	{r3, pc}
   d4c18:	00030218 	.word	0x00030218

000d4c1c <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d4c1c:	b508      	push	{r3, lr}
   d4c1e:	4b02      	ldr	r3, [pc, #8]	; (d4c28 <HAL_EEPROM_Init+0xc>)
   d4c20:	681b      	ldr	r3, [r3, #0]
   d4c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4c24:	9301      	str	r3, [sp, #4]
   d4c26:	bd08      	pop	{r3, pc}
   d4c28:	00030218 	.word	0x00030218

000d4c2c <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d4c2c:	b508      	push	{r3, lr}
   d4c2e:	4b02      	ldr	r3, [pc, #8]	; (d4c38 <HAL_EEPROM_Get+0xc>)
   d4c30:	681b      	ldr	r3, [r3, #0]
   d4c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4c34:	9301      	str	r3, [sp, #4]
   d4c36:	bd08      	pop	{r3, pc}
   d4c38:	00030218 	.word	0x00030218

000d4c3c <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d4c3c:	b508      	push	{r3, lr}
   d4c3e:	4b02      	ldr	r3, [pc, #8]	; (d4c48 <HAL_EEPROM_Put+0xc>)
   d4c40:	681b      	ldr	r3, [r3, #0]
   d4c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4c44:	9301      	str	r3, [sp, #4]
   d4c46:	bd08      	pop	{r3, pc}
   d4c48:	00030218 	.word	0x00030218

000d4c4c <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d4c4c:	b508      	push	{r3, lr}
   d4c4e:	4b02      	ldr	r3, [pc, #8]	; (d4c58 <HAL_RTC_Time_Is_Valid+0xc>)
   d4c50:	681b      	ldr	r3, [r3, #0]
   d4c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4c54:	9301      	str	r3, [sp, #4]
   d4c56:	bd08      	pop	{r3, pc}
   d4c58:	00030218 	.word	0x00030218

000d4c5c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4c5c:	b508      	push	{r3, lr}
   d4c5e:	4b02      	ldr	r3, [pc, #8]	; (d4c68 <os_thread_is_current+0xc>)
   d4c60:	681b      	ldr	r3, [r3, #0]
   d4c62:	689b      	ldr	r3, [r3, #8]
   d4c64:	9301      	str	r3, [sp, #4]
   d4c66:	bd08      	pop	{r3, pc}
   d4c68:	00030248 	.word	0x00030248

000d4c6c <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d4c6c:	b508      	push	{r3, lr}
   d4c6e:	4b02      	ldr	r3, [pc, #8]	; (d4c78 <os_thread_yield+0xc>)
   d4c70:	681b      	ldr	r3, [r3, #0]
   d4c72:	68db      	ldr	r3, [r3, #12]
   d4c74:	9301      	str	r3, [sp, #4]
   d4c76:	bd08      	pop	{r3, pc}
   d4c78:	00030248 	.word	0x00030248

000d4c7c <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4c7c:	b508      	push	{r3, lr}
   d4c7e:	4b02      	ldr	r3, [pc, #8]	; (d4c88 <os_thread_join+0xc>)
   d4c80:	681b      	ldr	r3, [r3, #0]
   d4c82:	691b      	ldr	r3, [r3, #16]
   d4c84:	9301      	str	r3, [sp, #4]
   d4c86:	bd08      	pop	{r3, pc}
   d4c88:	00030248 	.word	0x00030248

000d4c8c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4c8c:	b508      	push	{r3, lr}
   d4c8e:	4b02      	ldr	r3, [pc, #8]	; (d4c98 <os_thread_cleanup+0xc>)
   d4c90:	681b      	ldr	r3, [r3, #0]
   d4c92:	695b      	ldr	r3, [r3, #20]
   d4c94:	9301      	str	r3, [sp, #4]
   d4c96:	bd08      	pop	{r3, pc}
   d4c98:	00030248 	.word	0x00030248

000d4c9c <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d4c9c:	b508      	push	{r3, lr}
   d4c9e:	4b02      	ldr	r3, [pc, #8]	; (d4ca8 <os_thread_scheduling+0xc>)
   d4ca0:	681b      	ldr	r3, [r3, #0]
   d4ca2:	69db      	ldr	r3, [r3, #28]
   d4ca4:	9301      	str	r3, [sp, #4]
   d4ca6:	bd08      	pop	{r3, pc}
   d4ca8:	00030248 	.word	0x00030248

000d4cac <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d4cac:	b508      	push	{r3, lr}
   d4cae:	4b02      	ldr	r3, [pc, #8]	; (d4cb8 <os_timer_create+0xc>)
   d4cb0:	681b      	ldr	r3, [r3, #0]
   d4cb2:	6a1b      	ldr	r3, [r3, #32]
   d4cb4:	9301      	str	r3, [sp, #4]
   d4cb6:	bd08      	pop	{r3, pc}
   d4cb8:	00030248 	.word	0x00030248

000d4cbc <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d4cbc:	b508      	push	{r3, lr}
   d4cbe:	4b02      	ldr	r3, [pc, #8]	; (d4cc8 <os_timer_destroy+0xc>)
   d4cc0:	681b      	ldr	r3, [r3, #0]
   d4cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4cc4:	9301      	str	r3, [sp, #4]
   d4cc6:	bd08      	pop	{r3, pc}
   d4cc8:	00030248 	.word	0x00030248

000d4ccc <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d4ccc:	b508      	push	{r3, lr}
   d4cce:	4b02      	ldr	r3, [pc, #8]	; (d4cd8 <os_timer_get_id+0xc>)
   d4cd0:	681b      	ldr	r3, [r3, #0]
   d4cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4cd4:	9301      	str	r3, [sp, #4]
   d4cd6:	bd08      	pop	{r3, pc}
   d4cd8:	00030248 	.word	0x00030248

000d4cdc <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d4cdc:	b508      	push	{r3, lr}
   d4cde:	4b02      	ldr	r3, [pc, #8]	; (d4ce8 <os_timer_change+0xc>)
   d4ce0:	681b      	ldr	r3, [r3, #0]
   d4ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4ce4:	9301      	str	r3, [sp, #4]
   d4ce6:	bd08      	pop	{r3, pc}
   d4ce8:	00030248 	.word	0x00030248

000d4cec <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4cec:	b508      	push	{r3, lr}
   d4cee:	4b02      	ldr	r3, [pc, #8]	; (d4cf8 <os_mutex_recursive_create+0xc>)
   d4cf0:	681b      	ldr	r3, [r3, #0]
   d4cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4cf4:	9301      	str	r3, [sp, #4]
   d4cf6:	bd08      	pop	{r3, pc}
   d4cf8:	00030248 	.word	0x00030248

000d4cfc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4cfc:	b508      	push	{r3, lr}
   d4cfe:	4b02      	ldr	r3, [pc, #8]	; (d4d08 <os_mutex_recursive_destroy+0xc>)
   d4d00:	681b      	ldr	r3, [r3, #0]
   d4d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4d04:	9301      	str	r3, [sp, #4]
   d4d06:	bd08      	pop	{r3, pc}
   d4d08:	00030248 	.word	0x00030248

000d4d0c <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d4d0c:	b508      	push	{r3, lr}
   d4d0e:	4b02      	ldr	r3, [pc, #8]	; (d4d18 <os_timer_set_id+0xc>)
   d4d10:	681b      	ldr	r3, [r3, #0]
   d4d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d4d14:	9301      	str	r3, [sp, #4]
   d4d16:	bd08      	pop	{r3, pc}
   d4d18:	00030248 	.word	0x00030248

000d4d1c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4d1c:	b508      	push	{r3, lr}
   d4d1e:	4b02      	ldr	r3, [pc, #8]	; (d4d28 <inet_inet_ntop+0xc>)
   d4d20:	681b      	ldr	r3, [r3, #0]
   d4d22:	695b      	ldr	r3, [r3, #20]
   d4d24:	9301      	str	r3, [sp, #4]
   d4d26:	bd08      	pop	{r3, pc}
   d4d28:	00030264 	.word	0x00030264

000d4d2c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4d2c:	b508      	push	{r3, lr}
   d4d2e:	4b02      	ldr	r3, [pc, #8]	; (d4d38 <HAL_USART_Init+0xc>)
   d4d30:	681b      	ldr	r3, [r3, #0]
   d4d32:	681b      	ldr	r3, [r3, #0]
   d4d34:	9301      	str	r3, [sp, #4]
   d4d36:	bd08      	pop	{r3, pc}
   d4d38:	0003023c 	.word	0x0003023c

000d4d3c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4d3c:	b508      	push	{r3, lr}
   d4d3e:	4b02      	ldr	r3, [pc, #8]	; (d4d48 <HAL_USART_Write_Data+0xc>)
   d4d40:	681b      	ldr	r3, [r3, #0]
   d4d42:	68db      	ldr	r3, [r3, #12]
   d4d44:	9301      	str	r3, [sp, #4]
   d4d46:	bd08      	pop	{r3, pc}
   d4d48:	0003023c 	.word	0x0003023c

000d4d4c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4d4c:	b508      	push	{r3, lr}
   d4d4e:	4b02      	ldr	r3, [pc, #8]	; (d4d58 <HAL_USART_Available_Data+0xc>)
   d4d50:	681b      	ldr	r3, [r3, #0]
   d4d52:	691b      	ldr	r3, [r3, #16]
   d4d54:	9301      	str	r3, [sp, #4]
   d4d56:	bd08      	pop	{r3, pc}
   d4d58:	0003023c 	.word	0x0003023c

000d4d5c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4d5c:	b508      	push	{r3, lr}
   d4d5e:	4b02      	ldr	r3, [pc, #8]	; (d4d68 <HAL_USART_Read_Data+0xc>)
   d4d60:	681b      	ldr	r3, [r3, #0]
   d4d62:	695b      	ldr	r3, [r3, #20]
   d4d64:	9301      	str	r3, [sp, #4]
   d4d66:	bd08      	pop	{r3, pc}
   d4d68:	0003023c 	.word	0x0003023c

000d4d6c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4d6c:	b508      	push	{r3, lr}
   d4d6e:	4b02      	ldr	r3, [pc, #8]	; (d4d78 <HAL_USART_Peek_Data+0xc>)
   d4d70:	681b      	ldr	r3, [r3, #0]
   d4d72:	699b      	ldr	r3, [r3, #24]
   d4d74:	9301      	str	r3, [sp, #4]
   d4d76:	bd08      	pop	{r3, pc}
   d4d78:	0003023c 	.word	0x0003023c

000d4d7c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4d7c:	b508      	push	{r3, lr}
   d4d7e:	4b02      	ldr	r3, [pc, #8]	; (d4d88 <HAL_USART_Flush_Data+0xc>)
   d4d80:	681b      	ldr	r3, [r3, #0]
   d4d82:	69db      	ldr	r3, [r3, #28]
   d4d84:	9301      	str	r3, [sp, #4]
   d4d86:	bd08      	pop	{r3, pc}
   d4d88:	0003023c 	.word	0x0003023c

000d4d8c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4d8c:	b508      	push	{r3, lr}
   d4d8e:	4b02      	ldr	r3, [pc, #8]	; (d4d98 <HAL_USART_Is_Enabled+0xc>)
   d4d90:	681b      	ldr	r3, [r3, #0]
   d4d92:	6a1b      	ldr	r3, [r3, #32]
   d4d94:	9301      	str	r3, [sp, #4]
   d4d96:	bd08      	pop	{r3, pc}
   d4d98:	0003023c 	.word	0x0003023c

000d4d9c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4d9c:	b508      	push	{r3, lr}
   d4d9e:	4b02      	ldr	r3, [pc, #8]	; (d4da8 <HAL_USART_Available_Data_For_Write+0xc>)
   d4da0:	681b      	ldr	r3, [r3, #0]
   d4da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4da4:	9301      	str	r3, [sp, #4]
   d4da6:	bd08      	pop	{r3, pc}
   d4da8:	0003023c 	.word	0x0003023c

000d4dac <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d4dac:	b508      	push	{r3, lr}
   d4dae:	4b02      	ldr	r3, [pc, #8]	; (d4db8 <HAL_I2C_Begin_Transmission+0xc>)
   d4db0:	681b      	ldr	r3, [r3, #0]
   d4db2:	699b      	ldr	r3, [r3, #24]
   d4db4:	9301      	str	r3, [sp, #4]
   d4db6:	bd08      	pop	{r3, pc}
   d4db8:	00030228 	.word	0x00030228

000d4dbc <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4dbc:	b508      	push	{r3, lr}
   d4dbe:	4b02      	ldr	r3, [pc, #8]	; (d4dc8 <HAL_I2C_End_Transmission+0xc>)
   d4dc0:	681b      	ldr	r3, [r3, #0]
   d4dc2:	69db      	ldr	r3, [r3, #28]
   d4dc4:	9301      	str	r3, [sp, #4]
   d4dc6:	bd08      	pop	{r3, pc}
   d4dc8:	00030228 	.word	0x00030228

000d4dcc <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4dcc:	b508      	push	{r3, lr}
   d4dce:	4b02      	ldr	r3, [pc, #8]	; (d4dd8 <HAL_I2C_Write_Data+0xc>)
   d4dd0:	681b      	ldr	r3, [r3, #0]
   d4dd2:	6a1b      	ldr	r3, [r3, #32]
   d4dd4:	9301      	str	r3, [sp, #4]
   d4dd6:	bd08      	pop	{r3, pc}
   d4dd8:	00030228 	.word	0x00030228

000d4ddc <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4ddc:	b508      	push	{r3, lr}
   d4dde:	4b02      	ldr	r3, [pc, #8]	; (d4de8 <HAL_I2C_Available_Data+0xc>)
   d4de0:	681b      	ldr	r3, [r3, #0]
   d4de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4de4:	9301      	str	r3, [sp, #4]
   d4de6:	bd08      	pop	{r3, pc}
   d4de8:	00030228 	.word	0x00030228

000d4dec <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4dec:	b508      	push	{r3, lr}
   d4dee:	4b02      	ldr	r3, [pc, #8]	; (d4df8 <HAL_I2C_Read_Data+0xc>)
   d4df0:	681b      	ldr	r3, [r3, #0]
   d4df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4df4:	9301      	str	r3, [sp, #4]
   d4df6:	bd08      	pop	{r3, pc}
   d4df8:	00030228 	.word	0x00030228

000d4dfc <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4dfc:	b508      	push	{r3, lr}
   d4dfe:	4b02      	ldr	r3, [pc, #8]	; (d4e08 <HAL_I2C_Peek_Data+0xc>)
   d4e00:	681b      	ldr	r3, [r3, #0]
   d4e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4e04:	9301      	str	r3, [sp, #4]
   d4e06:	bd08      	pop	{r3, pc}
   d4e08:	00030228 	.word	0x00030228

000d4e0c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4e0c:	b508      	push	{r3, lr}
   d4e0e:	4b02      	ldr	r3, [pc, #8]	; (d4e18 <HAL_I2C_Flush_Data+0xc>)
   d4e10:	681b      	ldr	r3, [r3, #0]
   d4e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e14:	9301      	str	r3, [sp, #4]
   d4e16:	bd08      	pop	{r3, pc}
   d4e18:	00030228 	.word	0x00030228

000d4e1c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4e1c:	b508      	push	{r3, lr}
   d4e1e:	4b02      	ldr	r3, [pc, #8]	; (d4e28 <HAL_I2C_Is_Enabled+0xc>)
   d4e20:	681b      	ldr	r3, [r3, #0]
   d4e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4e24:	9301      	str	r3, [sp, #4]
   d4e26:	bd08      	pop	{r3, pc}
   d4e28:	00030228 	.word	0x00030228

000d4e2c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4e2c:	b508      	push	{r3, lr}
   d4e2e:	4b02      	ldr	r3, [pc, #8]	; (d4e38 <HAL_I2C_Init+0xc>)
   d4e30:	681b      	ldr	r3, [r3, #0]
   d4e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4e34:	9301      	str	r3, [sp, #4]
   d4e36:	bd08      	pop	{r3, pc}
   d4e38:	00030228 	.word	0x00030228

000d4e3c <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d4e3c:	b508      	push	{r3, lr}
   d4e3e:	4b02      	ldr	r3, [pc, #8]	; (d4e48 <HAL_I2C_Acquire+0xc>)
   d4e40:	681b      	ldr	r3, [r3, #0]
   d4e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4e44:	9301      	str	r3, [sp, #4]
   d4e46:	bd08      	pop	{r3, pc}
   d4e48:	00030228 	.word	0x00030228

000d4e4c <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d4e4c:	b508      	push	{r3, lr}
   d4e4e:	4b02      	ldr	r3, [pc, #8]	; (d4e58 <HAL_I2C_Release+0xc>)
   d4e50:	681b      	ldr	r3, [r3, #0]
   d4e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4e54:	9301      	str	r3, [sp, #4]
   d4e56:	bd08      	pop	{r3, pc}
   d4e58:	00030228 	.word	0x00030228

000d4e5c <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d4e5c:	b508      	push	{r3, lr}
   d4e5e:	4b02      	ldr	r3, [pc, #8]	; (d4e68 <HAL_I2C_Request_Data_Ex+0xc>)
   d4e60:	681b      	ldr	r3, [r3, #0]
   d4e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4e64:	9301      	str	r3, [sp, #4]
   d4e66:	bd08      	pop	{r3, pc}
   d4e68:	00030228 	.word	0x00030228

000d4e6c <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d4e6c:	b508      	push	{r3, lr}
   d4e6e:	4b02      	ldr	r3, [pc, #8]	; (d4e78 <cellular_signal+0xc>)
   d4e70:	681b      	ldr	r3, [r3, #0]
   d4e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4e74:	9301      	str	r3, [sp, #4]
   d4e76:	bd08      	pop	{r3, pc}
   d4e78:	00030274 	.word	0x00030274

000d4e7c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4e7c:	b508      	push	{r3, lr}
   d4e7e:	4b02      	ldr	r3, [pc, #8]	; (d4e88 <HAL_USB_USART_Init+0xc>)
   d4e80:	681b      	ldr	r3, [r3, #0]
   d4e82:	681b      	ldr	r3, [r3, #0]
   d4e84:	9301      	str	r3, [sp, #4]
   d4e86:	bd08      	pop	{r3, pc}
   d4e88:	0003024c 	.word	0x0003024c

000d4e8c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4e8c:	b508      	push	{r3, lr}
   d4e8e:	4b02      	ldr	r3, [pc, #8]	; (d4e98 <HAL_USB_USART_Begin+0xc>)
   d4e90:	681b      	ldr	r3, [r3, #0]
   d4e92:	685b      	ldr	r3, [r3, #4]
   d4e94:	9301      	str	r3, [sp, #4]
   d4e96:	bd08      	pop	{r3, pc}
   d4e98:	0003024c 	.word	0x0003024c

000d4e9c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4e9c:	b508      	push	{r3, lr}
   d4e9e:	4b02      	ldr	r3, [pc, #8]	; (d4ea8 <HAL_USB_USART_Available_Data+0xc>)
   d4ea0:	681b      	ldr	r3, [r3, #0]
   d4ea2:	691b      	ldr	r3, [r3, #16]
   d4ea4:	9301      	str	r3, [sp, #4]
   d4ea6:	bd08      	pop	{r3, pc}
   d4ea8:	0003024c 	.word	0x0003024c

000d4eac <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4eac:	b508      	push	{r3, lr}
   d4eae:	4b02      	ldr	r3, [pc, #8]	; (d4eb8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4eb0:	681b      	ldr	r3, [r3, #0]
   d4eb2:	695b      	ldr	r3, [r3, #20]
   d4eb4:	9301      	str	r3, [sp, #4]
   d4eb6:	bd08      	pop	{r3, pc}
   d4eb8:	0003024c 	.word	0x0003024c

000d4ebc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ebc:	b508      	push	{r3, lr}
   d4ebe:	4b02      	ldr	r3, [pc, #8]	; (d4ec8 <HAL_USB_USART_Receive_Data+0xc>)
   d4ec0:	681b      	ldr	r3, [r3, #0]
   d4ec2:	699b      	ldr	r3, [r3, #24]
   d4ec4:	9301      	str	r3, [sp, #4]
   d4ec6:	bd08      	pop	{r3, pc}
   d4ec8:	0003024c 	.word	0x0003024c

000d4ecc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ecc:	b508      	push	{r3, lr}
   d4ece:	4b02      	ldr	r3, [pc, #8]	; (d4ed8 <HAL_USB_USART_Send_Data+0xc>)
   d4ed0:	681b      	ldr	r3, [r3, #0]
   d4ed2:	69db      	ldr	r3, [r3, #28]
   d4ed4:	9301      	str	r3, [sp, #4]
   d4ed6:	bd08      	pop	{r3, pc}
   d4ed8:	0003024c 	.word	0x0003024c

000d4edc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4edc:	b508      	push	{r3, lr}
   d4ede:	4b02      	ldr	r3, [pc, #8]	; (d4ee8 <HAL_USB_USART_Flush_Data+0xc>)
   d4ee0:	681b      	ldr	r3, [r3, #0]
   d4ee2:	6a1b      	ldr	r3, [r3, #32]
   d4ee4:	9301      	str	r3, [sp, #4]
   d4ee6:	bd08      	pop	{r3, pc}
   d4ee8:	0003024c 	.word	0x0003024c

000d4eec <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d4eec:	b508      	push	{r3, lr}
   d4eee:	4b02      	ldr	r3, [pc, #8]	; (d4ef8 <system_mode+0xc>)
   d4ef0:	681b      	ldr	r3, [r3, #0]
   d4ef2:	681b      	ldr	r3, [r3, #0]
   d4ef4:	9301      	str	r3, [sp, #4]
   d4ef6:	bd08      	pop	{r3, pc}
   d4ef8:	00030220 	.word	0x00030220

000d4efc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4efc:	b508      	push	{r3, lr}
   d4efe:	4b02      	ldr	r3, [pc, #8]	; (d4f08 <set_system_mode+0xc>)
   d4f00:	681b      	ldr	r3, [r3, #0]
   d4f02:	685b      	ldr	r3, [r3, #4]
   d4f04:	9301      	str	r3, [sp, #4]
   d4f06:	bd08      	pop	{r3, pc}
   d4f08:	00030220 	.word	0x00030220

000d4f0c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d4f0c:	b508      	push	{r3, lr}
   d4f0e:	4b02      	ldr	r3, [pc, #8]	; (d4f18 <system_thread_set_state+0xc>)
   d4f10:	681b      	ldr	r3, [r3, #0]
   d4f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4f14:	9301      	str	r3, [sp, #4]
   d4f16:	bd08      	pop	{r3, pc}
   d4f18:	00030220 	.word	0x00030220

000d4f1c <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d4f1c:	b508      	push	{r3, lr}
   d4f1e:	4b02      	ldr	r3, [pc, #8]	; (d4f28 <system_thread_get_state+0xc>)
   d4f20:	681b      	ldr	r3, [r3, #0]
   d4f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4f24:	9301      	str	r3, [sp, #4]
   d4f26:	bd08      	pop	{r3, pc}
   d4f28:	00030220 	.word	0x00030220

000d4f2c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4f2c:	b508      	push	{r3, lr}
   d4f2e:	4b03      	ldr	r3, [pc, #12]	; (d4f3c <system_ctrl_set_app_request_handler+0x10>)
   d4f30:	681b      	ldr	r3, [r3, #0]
   d4f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4f36:	9301      	str	r3, [sp, #4]
   d4f38:	bd08      	pop	{r3, pc}
   d4f3a:	0000      	.short	0x0000
   d4f3c:	00030220 	.word	0x00030220

000d4f40 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4f40:	b508      	push	{r3, lr}
   d4f42:	4b03      	ldr	r3, [pc, #12]	; (d4f50 <system_ctrl_set_result+0x10>)
   d4f44:	681b      	ldr	r3, [r3, #0]
   d4f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4f4a:	9301      	str	r3, [sp, #4]
   d4f4c:	bd08      	pop	{r3, pc}
   d4f4e:	0000      	.short	0x0000
   d4f50:	00030220 	.word	0x00030220

000d4f54 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4f54:	b508      	push	{r3, lr}
   d4f56:	4b02      	ldr	r3, [pc, #8]	; (d4f60 <network_connect+0xc>)
   d4f58:	681b      	ldr	r3, [r3, #0]
   d4f5a:	685b      	ldr	r3, [r3, #4]
   d4f5c:	9301      	str	r3, [sp, #4]
   d4f5e:	bd08      	pop	{r3, pc}
   d4f60:	00030240 	.word	0x00030240

000d4f64 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4f64:	b508      	push	{r3, lr}
   d4f66:	4b02      	ldr	r3, [pc, #8]	; (d4f70 <network_connecting+0xc>)
   d4f68:	681b      	ldr	r3, [r3, #0]
   d4f6a:	689b      	ldr	r3, [r3, #8]
   d4f6c:	9301      	str	r3, [sp, #4]
   d4f6e:	bd08      	pop	{r3, pc}
   d4f70:	00030240 	.word	0x00030240

000d4f74 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4f74:	b508      	push	{r3, lr}
   d4f76:	4b02      	ldr	r3, [pc, #8]	; (d4f80 <network_disconnect+0xc>)
   d4f78:	681b      	ldr	r3, [r3, #0]
   d4f7a:	68db      	ldr	r3, [r3, #12]
   d4f7c:	9301      	str	r3, [sp, #4]
   d4f7e:	bd08      	pop	{r3, pc}
   d4f80:	00030240 	.word	0x00030240

000d4f84 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4f84:	b508      	push	{r3, lr}
   d4f86:	4b02      	ldr	r3, [pc, #8]	; (d4f90 <network_ready+0xc>)
   d4f88:	681b      	ldr	r3, [r3, #0]
   d4f8a:	691b      	ldr	r3, [r3, #16]
   d4f8c:	9301      	str	r3, [sp, #4]
   d4f8e:	bd08      	pop	{r3, pc}
   d4f90:	00030240 	.word	0x00030240

000d4f94 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4f94:	b508      	push	{r3, lr}
   d4f96:	4b02      	ldr	r3, [pc, #8]	; (d4fa0 <network_on+0xc>)
   d4f98:	681b      	ldr	r3, [r3, #0]
   d4f9a:	695b      	ldr	r3, [r3, #20]
   d4f9c:	9301      	str	r3, [sp, #4]
   d4f9e:	bd08      	pop	{r3, pc}
   d4fa0:	00030240 	.word	0x00030240

000d4fa4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4fa4:	b508      	push	{r3, lr}
   d4fa6:	4b02      	ldr	r3, [pc, #8]	; (d4fb0 <network_off+0xc>)
   d4fa8:	681b      	ldr	r3, [r3, #0]
   d4faa:	699b      	ldr	r3, [r3, #24]
   d4fac:	9301      	str	r3, [sp, #4]
   d4fae:	bd08      	pop	{r3, pc}
   d4fb0:	00030240 	.word	0x00030240

000d4fb4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4fb4:	b508      	push	{r3, lr}
   d4fb6:	4b02      	ldr	r3, [pc, #8]	; (d4fc0 <network_listen+0xc>)
   d4fb8:	681b      	ldr	r3, [r3, #0]
   d4fba:	69db      	ldr	r3, [r3, #28]
   d4fbc:	9301      	str	r3, [sp, #4]
   d4fbe:	bd08      	pop	{r3, pc}
   d4fc0:	00030240 	.word	0x00030240

000d4fc4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4fc4:	b508      	push	{r3, lr}
   d4fc6:	4b02      	ldr	r3, [pc, #8]	; (d4fd0 <network_listening+0xc>)
   d4fc8:	681b      	ldr	r3, [r3, #0]
   d4fca:	6a1b      	ldr	r3, [r3, #32]
   d4fcc:	9301      	str	r3, [sp, #4]
   d4fce:	bd08      	pop	{r3, pc}
   d4fd0:	00030240 	.word	0x00030240

000d4fd4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4fd4:	b508      	push	{r3, lr}
   d4fd6:	4b02      	ldr	r3, [pc, #8]	; (d4fe0 <network_set_listen_timeout+0xc>)
   d4fd8:	681b      	ldr	r3, [r3, #0]
   d4fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4fdc:	9301      	str	r3, [sp, #4]
   d4fde:	bd08      	pop	{r3, pc}
   d4fe0:	00030240 	.word	0x00030240

000d4fe4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4fe4:	b508      	push	{r3, lr}
   d4fe6:	4b02      	ldr	r3, [pc, #8]	; (d4ff0 <network_get_listen_timeout+0xc>)
   d4fe8:	681b      	ldr	r3, [r3, #0]
   d4fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4fec:	9301      	str	r3, [sp, #4]
   d4fee:	bd08      	pop	{r3, pc}
   d4ff0:	00030240 	.word	0x00030240

000d4ff4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4ff4:	b508      	push	{r3, lr}
   d4ff6:	4b02      	ldr	r3, [pc, #8]	; (d5000 <spark_process+0xc>)
   d4ff8:	681b      	ldr	r3, [r3, #0]
   d4ffa:	689b      	ldr	r3, [r3, #8]
   d4ffc:	9301      	str	r3, [sp, #4]
   d4ffe:	bd08      	pop	{r3, pc}
   d5000:	00030244 	.word	0x00030244

000d5004 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5004:	b508      	push	{r3, lr}
   d5006:	4b02      	ldr	r3, [pc, #8]	; (d5010 <spark_cloud_flag_connected+0xc>)
   d5008:	681b      	ldr	r3, [r3, #0]
   d500a:	695b      	ldr	r3, [r3, #20]
   d500c:	9301      	str	r3, [sp, #4]
   d500e:	bd08      	pop	{r3, pc}
   d5010:	00030244 	.word	0x00030244

000d5014 <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d5014:	b508      	push	{r3, lr}
   d5016:	4b02      	ldr	r3, [pc, #8]	; (d5020 <spark_sync_time+0xc>)
   d5018:	681b      	ldr	r3, [r3, #0]
   d501a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d501c:	9301      	str	r3, [sp, #4]
   d501e:	bd08      	pop	{r3, pc}
   d5020:	00030244 	.word	0x00030244

000d5024 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5024:	b508      	push	{r3, lr}
   d5026:	4b02      	ldr	r3, [pc, #8]	; (d5030 <spark_sync_time_pending+0xc>)
   d5028:	681b      	ldr	r3, [r3, #0]
   d502a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d502c:	9301      	str	r3, [sp, #4]
   d502e:	bd08      	pop	{r3, pc}
   d5030:	00030244 	.word	0x00030244

000d5034 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5034:	b508      	push	{r3, lr}
   d5036:	4b02      	ldr	r3, [pc, #8]	; (d5040 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5038:	681b      	ldr	r3, [r3, #0]
   d503a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d503c:	9301      	str	r3, [sp, #4]
   d503e:	bd08      	pop	{r3, pc}
   d5040:	00030244 	.word	0x00030244

000d5044 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5044:	b508      	push	{r3, lr}
   d5046:	4b02      	ldr	r3, [pc, #8]	; (d5050 <malloc+0xc>)
   d5048:	681b      	ldr	r3, [r3, #0]
   d504a:	681b      	ldr	r3, [r3, #0]
   d504c:	9301      	str	r3, [sp, #4]
   d504e:	bd08      	pop	{r3, pc}
   d5050:	0003021c 	.word	0x0003021c

000d5054 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5054:	b508      	push	{r3, lr}
   d5056:	4b02      	ldr	r3, [pc, #8]	; (d5060 <free+0xc>)
   d5058:	681b      	ldr	r3, [r3, #0]
   d505a:	685b      	ldr	r3, [r3, #4]
   d505c:	9301      	str	r3, [sp, #4]
   d505e:	bd08      	pop	{r3, pc}
   d5060:	0003021c 	.word	0x0003021c

000d5064 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5064:	b508      	push	{r3, lr}
   d5066:	4b02      	ldr	r3, [pc, #8]	; (d5070 <realloc+0xc>)
   d5068:	681b      	ldr	r3, [r3, #0]
   d506a:	689b      	ldr	r3, [r3, #8]
   d506c:	9301      	str	r3, [sp, #4]
   d506e:	bd08      	pop	{r3, pc}
   d5070:	0003021c 	.word	0x0003021c

000d5074 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5074:	2200      	movs	r2, #0
   d5076:	4611      	mov	r1, r2
   d5078:	6840      	ldr	r0, [r0, #4]
   d507a:	f7ff bfa3 	b.w	d4fc4 <network_listening>

000d507e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d507e:	2200      	movs	r2, #0
   d5080:	4611      	mov	r1, r2
   d5082:	6840      	ldr	r0, [r0, #4]
   d5084:	f7ff bfae 	b.w	d4fe4 <network_get_listen_timeout>

000d5088 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5088:	2200      	movs	r2, #0
   d508a:	6840      	ldr	r0, [r0, #4]
   d508c:	f7ff bfa2 	b.w	d4fd4 <network_set_listen_timeout>

000d5090 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5090:	2200      	movs	r2, #0
   d5092:	f081 0101 	eor.w	r1, r1, #1
   d5096:	6840      	ldr	r0, [r0, #4]
   d5098:	f7ff bf8c 	b.w	d4fb4 <network_listen>

000d509c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d509c:	2300      	movs	r3, #0
   d509e:	461a      	mov	r2, r3
   d50a0:	4619      	mov	r1, r3
   d50a2:	6840      	ldr	r0, [r0, #4]
   d50a4:	f7ff bf7e 	b.w	d4fa4 <network_off>

000d50a8 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d50a8:	2300      	movs	r3, #0
   d50aa:	461a      	mov	r2, r3
   d50ac:	4619      	mov	r1, r3
   d50ae:	6840      	ldr	r0, [r0, #4]
   d50b0:	f7ff bf70 	b.w	d4f94 <network_on>

000d50b4 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d50b4:	2200      	movs	r2, #0
   d50b6:	4611      	mov	r1, r2
   d50b8:	6840      	ldr	r0, [r0, #4]
   d50ba:	f7ff bf63 	b.w	d4f84 <network_ready>

000d50be <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d50be:	2200      	movs	r2, #0
   d50c0:	4611      	mov	r1, r2
   d50c2:	6840      	ldr	r0, [r0, #4]
   d50c4:	f7ff bf4e 	b.w	d4f64 <network_connecting>

000d50c8 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d50c8:	2200      	movs	r2, #0
   d50ca:	2102      	movs	r1, #2
   d50cc:	6840      	ldr	r0, [r0, #4]
   d50ce:	f7ff bf51 	b.w	d4f74 <network_disconnect>

000d50d2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d50d2:	2300      	movs	r3, #0
   d50d4:	461a      	mov	r2, r3
   d50d6:	6840      	ldr	r0, [r0, #4]
   d50d8:	f7ff bf3c 	b.w	d4f54 <network_connect>

000d50dc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d50dc:	4b02      	ldr	r3, [pc, #8]	; (d50e8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d50de:	2203      	movs	r2, #3
   d50e0:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d50e2:	4a02      	ldr	r2, [pc, #8]	; (d50ec <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d50e4:	601a      	str	r2, [r3, #0]
   d50e6:	4770      	bx	lr
   d50e8:	2003e388 	.word	0x2003e388
   d50ec:	000d734c 	.word	0x000d734c

000d50f0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d50f0:	b510      	push	{r4, lr}
   d50f2:	4604      	mov	r4, r0
{
    _spi = spi;
   d50f4:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d50f6:	4608      	mov	r0, r1
   d50f8:	f7ff fd68 	bl	d4bcc <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d50fc:	2300      	movs	r3, #0
   d50fe:	6063      	str	r3, [r4, #4]
}
   d5100:	4620      	mov	r0, r4
   d5102:	bd10      	pop	{r4, pc}

000d5104 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d5104:	7800      	ldrb	r0, [r0, #0]
   d5106:	f7ff bd69 	b.w	d4bdc <HAL_SPI_Is_Enabled>

000d510a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d510a:	b510      	push	{r4, lr}
   d510c:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d510e:	6800      	ldr	r0, [r0, #0]
   d5110:	b118      	cbz	r0, d511a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d5112:	f7ff ff9f 	bl	d5054 <free>
            wakeupSource_ = nullptr;
   d5116:	2300      	movs	r3, #0
   d5118:	6023      	str	r3, [r4, #0]
   d511a:	bd10      	pop	{r4, pc}

000d511c <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d511c:	b510      	push	{r4, lr}
   d511e:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d5120:	f7ff fff3 	bl	d510a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5124:	4620      	mov	r0, r4
   d5126:	bd10      	pop	{r4, pc}

000d5128 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5128:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d512a:	4c09      	ldr	r4, [pc, #36]	; (d5150 <_GLOBAL__sub_I_System+0x28>)
   d512c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d512e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5132:	6020      	str	r0, [r4, #0]
   d5134:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5136:	71a0      	strb	r0, [r4, #6]
   d5138:	8120      	strh	r0, [r4, #8]
   d513a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d513c:	f7ff fede 	bl	d4efc <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5140:	4620      	mov	r0, r4
   d5142:	4a04      	ldr	r2, [pc, #16]	; (d5154 <_GLOBAL__sub_I_System+0x2c>)
   d5144:	4904      	ldr	r1, [pc, #16]	; (d5158 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d514a:	f001 b935 	b.w	d63b8 <__aeabi_atexit>
   d514e:	bf00      	nop
   d5150:	2003e390 	.word	0x2003e390
   d5154:	2003e31c 	.word	0x2003e31c
   d5158:	000d511d 	.word	0x000d511d

000d515c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d515c:	b510      	push	{r4, lr}
   d515e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d5160:	f002 f818 	bl	d7194 <strlen>
   d5164:	3801      	subs	r0, #1
   d5166:	1823      	adds	r3, r4, r0
   d5168:	4620      	mov	r0, r4
	while(i<j){
   d516a:	4298      	cmp	r0, r3
   d516c:	d206      	bcs.n	d517c <_Z11str_reversePc+0x20>
		c = *i;
   d516e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d5170:	7819      	ldrb	r1, [r3, #0]
   d5172:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d5176:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d517a:	e7f6      	b.n	d516a <_Z11str_reversePc+0xe>
   d517c:	bd10      	pop	{r4, pc}

000d517e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d517e:	b570      	push	{r4, r5, r6, lr}
   d5180:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d5182:	1e91      	subs	r1, r2, #2
   d5184:	2922      	cmp	r1, #34	; 0x22
   d5186:	d820      	bhi.n	d51ca <ultoa+0x4c>
   d5188:	4625      	mov	r5, r4
   d518a:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d518c:	b910      	cbnz	r0, d5194 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d518e:	4423      	add	r3, r4
            *ptr++ = '0';
   d5190:	2230      	movs	r2, #48	; 0x30
   d5192:	e00e      	b.n	d51b2 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d5194:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d5198:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d519c:	b2c1      	uxtb	r1, r0
   d519e:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d51a2:	2809      	cmp	r0, #9
                *ptr += '0';
   d51a4:	bf94      	ite	ls
   d51a6:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d51a8:	3157      	addhi	r1, #87	; 0x57
   d51aa:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d51ae:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d51b0:	e7eb      	b.n	d518a <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d51b2:	4299      	cmp	r1, r3
   d51b4:	d202      	bcs.n	d51bc <ultoa+0x3e>
            *ptr++ = '0';
   d51b6:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d51ba:	e7fa      	b.n	d51b2 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d51bc:	2300      	movs	r3, #0
	str_reverse(buffer);
   d51be:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d51c0:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d51c2:	f7ff ffcb 	bl	d515c <_Z11str_reversePc>
	return buffer;
   d51c6:	4620      	mov	r0, r4
   d51c8:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d51ca:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d51cc:	bd70      	pop	{r4, r5, r6, pc}

000d51ce <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   d51ce:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   d51d0:	2301      	movs	r3, #1
   d51d2:	f7ff ffd4 	bl	d517e <ultoa>
}
   d51d6:	bd08      	pop	{r3, pc}

000d51d8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d51d8:	b510      	push	{r4, lr}
   d51da:	4604      	mov	r4, r0
{
	free(buffer);
   d51dc:	6800      	ldr	r0, [r0, #0]
   d51de:	f7ff ff39 	bl	d5054 <free>
}
   d51e2:	4620      	mov	r0, r4
   d51e4:	bd10      	pop	{r4, pc}

000d51e6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d51e6:	b510      	push	{r4, lr}
   d51e8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d51ea:	6800      	ldr	r0, [r0, #0]
   d51ec:	b108      	cbz	r0, d51f2 <_ZN6String10invalidateEv+0xc>
   d51ee:	f7ff ff31 	bl	d5054 <free>
	buffer = NULL;
   d51f2:	2300      	movs	r3, #0
   d51f4:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d51f6:	60a3      	str	r3, [r4, #8]
   d51f8:	6063      	str	r3, [r4, #4]
   d51fa:	bd10      	pop	{r4, pc}

000d51fc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d51fc:	b538      	push	{r3, r4, r5, lr}
   d51fe:	4604      	mov	r4, r0
   d5200:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5202:	6800      	ldr	r0, [r0, #0]
   d5204:	3101      	adds	r1, #1
   d5206:	f7ff ff2d 	bl	d5064 <realloc>
	if (newbuffer) {
   d520a:	b110      	cbz	r0, d5212 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d520c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5210:	2001      	movs	r0, #1
	}
	return 0;
}
   d5212:	bd38      	pop	{r3, r4, r5, pc}

000d5214 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5214:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5216:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5218:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d521a:	b113      	cbz	r3, d5222 <_ZN6String7reserveEj+0xe>
   d521c:	6843      	ldr	r3, [r0, #4]
   d521e:	428b      	cmp	r3, r1
   d5220:	d207      	bcs.n	d5232 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5222:	4620      	mov	r0, r4
   d5224:	f7ff ffea 	bl	d51fc <_ZN6String12changeBufferEj>
   d5228:	b120      	cbz	r0, d5234 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d522a:	68a3      	ldr	r3, [r4, #8]
   d522c:	b90b      	cbnz	r3, d5232 <_ZN6String7reserveEj+0x1e>
   d522e:	6822      	ldr	r2, [r4, #0]
   d5230:	7013      	strb	r3, [r2, #0]
   d5232:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5234:	bd10      	pop	{r4, pc}

000d5236 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5236:	b570      	push	{r4, r5, r6, lr}
   d5238:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d523a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d523c:	4604      	mov	r4, r0
   d523e:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5240:	f7ff ffe8 	bl	d5214 <_ZN6String7reserveEj>
   d5244:	b918      	cbnz	r0, d524e <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5246:	4620      	mov	r0, r4
   d5248:	f7ff ffcd 	bl	d51e6 <_ZN6String10invalidateEv>
		return *this;
   d524c:	e009      	b.n	d5262 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d524e:	462a      	mov	r2, r5
   d5250:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5252:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5254:	6820      	ldr	r0, [r4, #0]
   d5256:	f001 ff27 	bl	d70a8 <memcpy>
	buffer[len] = 0;
   d525a:	6822      	ldr	r2, [r4, #0]
   d525c:	68a3      	ldr	r3, [r4, #8]
   d525e:	2100      	movs	r1, #0
   d5260:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5262:	4620      	mov	r0, r4
   d5264:	bd70      	pop	{r4, r5, r6, pc}

000d5266 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5266:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5268:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d526a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d526c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d526e:	6043      	str	r3, [r0, #4]
	len = 0;
   d5270:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5272:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5274:	460d      	mov	r5, r1
   d5276:	b139      	cbz	r1, d5288 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5278:	4608      	mov	r0, r1
   d527a:	f001 ff8b 	bl	d7194 <strlen>
   d527e:	4629      	mov	r1, r5
   d5280:	4602      	mov	r2, r0
   d5282:	4620      	mov	r0, r4
   d5284:	f7ff ffd7 	bl	d5236 <_ZN6String4copyEPKcj>
}
   d5288:	4620      	mov	r0, r4
   d528a:	bd38      	pop	{r3, r4, r5, pc}

000d528c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d528c:	b538      	push	{r3, r4, r5, lr}
   d528e:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5290:	460c      	mov	r4, r1
   d5292:	b141      	cbz	r1, d52a6 <_ZN6StringaSEPKc+0x1a>
   d5294:	4608      	mov	r0, r1
   d5296:	f001 ff7d 	bl	d7194 <strlen>
   d529a:	4621      	mov	r1, r4
   d529c:	4602      	mov	r2, r0
   d529e:	4628      	mov	r0, r5
   d52a0:	f7ff ffc9 	bl	d5236 <_ZN6String4copyEPKcj>
   d52a4:	e001      	b.n	d52aa <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d52a6:	f7ff ff9e 	bl	d51e6 <_ZN6String10invalidateEv>

	return *this;
}
   d52aa:	4628      	mov	r0, r5
   d52ac:	bd38      	pop	{r3, r4, r5, pc}

000d52ae <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
   d52ae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d52b0:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d52b2:	2300      	movs	r3, #0
   d52b4:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d52b6:	6063      	str	r3, [r4, #4]
	len = 0;
   d52b8:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d52ba:	7323      	strb	r3, [r4, #12]
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
   d52bc:	4608      	mov	r0, r1
{
	init();
	char buf[9];
	utoa(value, buf, base);
   d52be:	a901      	add	r1, sp, #4
   d52c0:	f7ff ff85 	bl	d51ce <utoa>
	*this = buf;
   d52c4:	a901      	add	r1, sp, #4
   d52c6:	4620      	mov	r0, r4
   d52c8:	f7ff ffe0 	bl	d528c <_ZN6StringaSEPKc>
}
   d52cc:	4620      	mov	r0, r4
   d52ce:	b004      	add	sp, #16
   d52d0:	bd10      	pop	{r4, pc}

000d52d2 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d52d2:	b510      	push	{r4, lr}
   d52d4:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d52d6:	6800      	ldr	r0, [r0, #0]
   d52d8:	b108      	cbz	r0, d52de <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d52da:	f7ff fd0f 	bl	d4cfc <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d52de:	4620      	mov	r0, r4
   d52e0:	bd10      	pop	{r4, pc}
	...

000d52e4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d52e4:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d52e6:	4c06      	ldr	r4, [pc, #24]	; (d5300 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d52e8:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d52ea:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d52ec:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d52ee:	f7ff fcfd 	bl	d4cec <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d52f2:	4620      	mov	r0, r4
   d52f4:	4a03      	ldr	r2, [pc, #12]	; (d5304 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d52f6:	4904      	ldr	r1, [pc, #16]	; (d5308 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d52f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d52fc:	f001 b85c 	b.w	d63b8 <__aeabi_atexit>
   d5300:	2003e39c 	.word	0x2003e39c
   d5304:	2003e31c 	.word	0x2003e31c
   d5308:	000d52d3 	.word	0x000d52d3

000d530c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d530c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d530e:	4606      	mov	r6, r0
   d5310:	460d      	mov	r5, r1
   d5312:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5314:	2400      	movs	r4, #0
  while (size--) {
   d5316:	42bd      	cmp	r5, r7
   d5318:	d00c      	beq.n	d5334 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d531a:	6833      	ldr	r3, [r6, #0]
   d531c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5320:	689b      	ldr	r3, [r3, #8]
   d5322:	4630      	mov	r0, r6
   d5324:	4798      	blx	r3
     if (chunk>=0)
   d5326:	2800      	cmp	r0, #0
   d5328:	db01      	blt.n	d532e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d532a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d532c:	e7f3      	b.n	d5316 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d532e:	2c00      	cmp	r4, #0
   d5330:	bf08      	it	eq
   d5332:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5334:	4620      	mov	r0, r4
   d5336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5338 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5338:	b570      	push	{r4, r5, r6, lr}
   d533a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d533c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d533e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5340:	b149      	cbz	r1, d5356 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5342:	f001 ff27 	bl	d7194 <strlen>
   d5346:	682b      	ldr	r3, [r5, #0]
   d5348:	4602      	mov	r2, r0
   d534a:	4621      	mov	r1, r4
   d534c:	4628      	mov	r0, r5
   d534e:	68db      	ldr	r3, [r3, #12]
    }
   d5350:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5354:	4718      	bx	r3
    }
   d5356:	bd70      	pop	{r4, r5, r6, pc}

000d5358 <_ZN5Print5printEPKc>:
   d5358:	b508      	push	{r3, lr}
   d535a:	f7ff ffed 	bl	d5338 <_ZN5Print5writeEPKc>
   d535e:	bd08      	pop	{r3, pc}

000d5360 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5360:	6803      	ldr	r3, [r0, #0]
   d5362:	689b      	ldr	r3, [r3, #8]
   d5364:	4718      	bx	r3

000d5366 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5366:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5368:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d536a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d536c:	f7ff fff8 	bl	d5360 <_ZN5Print5printEc>
  n += print('\n');
   d5370:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5372:	4604      	mov	r4, r0
  n += print('\n');
   d5374:	4628      	mov	r0, r5
   d5376:	f7ff fff3 	bl	d5360 <_ZN5Print5printEc>
  return n;
}
   d537a:	4420      	add	r0, r4
   d537c:	bd38      	pop	{r3, r4, r5, pc}

000d537e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d537e:	b530      	push	{r4, r5, lr}
   d5380:	b08b      	sub	sp, #44	; 0x2c
   d5382:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5384:	2100      	movs	r1, #0
   d5386:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d538a:	2a01      	cmp	r2, #1
   d538c:	bf98      	it	ls
   d538e:	220a      	movls	r2, #10
   d5390:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5394:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5398:	fb05 3312 	mls	r3, r5, r2, r3
   d539c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d53a0:	2b09      	cmp	r3, #9
   d53a2:	bf94      	ite	ls
   d53a4:	3330      	addls	r3, #48	; 0x30
   d53a6:	3337      	addhi	r3, #55	; 0x37
   d53a8:	b2db      	uxtb	r3, r3
   d53aa:	4621      	mov	r1, r4
   d53ac:	f804 3901 	strb.w	r3, [r4], #-1
   d53b0:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d53b2:	2d00      	cmp	r5, #0
   d53b4:	d1ee      	bne.n	d5394 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d53b6:	f7ff ffbf 	bl	d5338 <_ZN5Print5writeEPKc>
}
   d53ba:	b00b      	add	sp, #44	; 0x2c
   d53bc:	bd30      	pop	{r4, r5, pc}
	...

000d53c0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d53c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d53c4:	ec57 6b10 	vmov	r6, r7, d0
   d53c8:	4682      	mov	sl, r0
   d53ca:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d53cc:	ee10 2a10 	vmov	r2, s0
   d53d0:	463b      	mov	r3, r7
   d53d2:	ee10 0a10 	vmov	r0, s0
   d53d6:	4639      	mov	r1, r7
   d53d8:	f001 fdaa 	bl	d6f30 <__aeabi_dcmpun>
   d53dc:	b108      	cbz	r0, d53e2 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d53de:	494e      	ldr	r1, [pc, #312]	; (d5518 <_ZN5Print10printFloatEdh+0x158>)
   d53e0:	e012      	b.n	d5408 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d53e2:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d53e6:	f04f 32ff 	mov.w	r2, #4294967295
   d53ea:	4b4c      	ldr	r3, [pc, #304]	; (d551c <_ZN5Print10printFloatEdh+0x15c>)
   d53ec:	4630      	mov	r0, r6
   d53ee:	4649      	mov	r1, r9
   d53f0:	f001 fd9e 	bl	d6f30 <__aeabi_dcmpun>
   d53f4:	b968      	cbnz	r0, d5412 <_ZN5Print10printFloatEdh+0x52>
   d53f6:	f04f 32ff 	mov.w	r2, #4294967295
   d53fa:	4b48      	ldr	r3, [pc, #288]	; (d551c <_ZN5Print10printFloatEdh+0x15c>)
   d53fc:	4630      	mov	r0, r6
   d53fe:	4649      	mov	r1, r9
   d5400:	f001 fd78 	bl	d6ef4 <__aeabi_dcmple>
   d5404:	b928      	cbnz	r0, d5412 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5406:	4946      	ldr	r1, [pc, #280]	; (d5520 <_ZN5Print10printFloatEdh+0x160>)
   d5408:	4650      	mov	r0, sl
   d540a:	f7ff ff95 	bl	d5338 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d540e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d5412:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5416:	4b43      	ldr	r3, [pc, #268]	; (d5524 <_ZN5Print10printFloatEdh+0x164>)
   d5418:	4630      	mov	r0, r6
   d541a:	4639      	mov	r1, r7
   d541c:	f001 fd7e 	bl	d6f1c <__aeabi_dcmpgt>
   d5420:	b108      	cbz	r0, d5426 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5422:	4941      	ldr	r1, [pc, #260]	; (d5528 <_ZN5Print10printFloatEdh+0x168>)
   d5424:	e7f0      	b.n	d5408 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d5426:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d542a:	4b40      	ldr	r3, [pc, #256]	; (d552c <_ZN5Print10printFloatEdh+0x16c>)
   d542c:	4630      	mov	r0, r6
   d542e:	4639      	mov	r1, r7
   d5430:	f001 fd56 	bl	d6ee0 <__aeabi_dcmplt>
   d5434:	2800      	cmp	r0, #0
   d5436:	d1f4      	bne.n	d5422 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d5438:	2200      	movs	r2, #0
   d543a:	2300      	movs	r3, #0
   d543c:	4630      	mov	r0, r6
   d543e:	4639      	mov	r1, r7
   d5440:	f001 fd4e 	bl	d6ee0 <__aeabi_dcmplt>
   d5444:	b140      	cbz	r0, d5458 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d5446:	212d      	movs	r1, #45	; 0x2d
   d5448:	4650      	mov	r0, sl
   d544a:	f7ff ff89 	bl	d5360 <_ZN5Print5printEc>
     number = -number;
   d544e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d5452:	4604      	mov	r4, r0
     number = -number;
   d5454:	461f      	mov	r7, r3
   d5456:	e000      	b.n	d545a <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5458:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d545a:	4935      	ldr	r1, [pc, #212]	; (d5530 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d545c:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d5460:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d5462:	fa5f f388 	uxtb.w	r3, r8
   d5466:	429d      	cmp	r5, r3
   d5468:	d906      	bls.n	d5478 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d546a:	2200      	movs	r2, #0
   d546c:	4b31      	ldr	r3, [pc, #196]	; (d5534 <_ZN5Print10printFloatEdh+0x174>)
   d546e:	f001 fbef 	bl	d6c50 <__aeabi_ddiv>
   d5472:	f108 0801 	add.w	r8, r8, #1
   d5476:	e7f4      	b.n	d5462 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d5478:	4632      	mov	r2, r6
   d547a:	463b      	mov	r3, r7
   d547c:	f001 f90c 	bl	d6698 <__adddf3>
   d5480:	460f      	mov	r7, r1
   d5482:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d5484:	f001 fd92 	bl	d6fac <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5488:	220a      	movs	r2, #10
   d548a:	4601      	mov	r1, r0
   d548c:	4680      	mov	r8, r0
   d548e:	4650      	mov	r0, sl
   d5490:	f7ff ff75 	bl	d537e <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d5494:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d5496:	b3e5      	cbz	r5, d5512 <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d5498:	4640      	mov	r0, r8
   d549a:	f001 fa39 	bl	d6910 <__aeabi_ui2d>
   d549e:	4602      	mov	r2, r0
   d54a0:	460b      	mov	r3, r1
   d54a2:	4630      	mov	r0, r6
   d54a4:	4639      	mov	r1, r7
   d54a6:	f001 f8f5 	bl	d6694 <__aeabi_dsub>
   d54aa:	4606      	mov	r6, r0
   d54ac:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d54ae:	4650      	mov	r0, sl
   d54b0:	4921      	ldr	r1, [pc, #132]	; (d5538 <_ZN5Print10printFloatEdh+0x178>)
   d54b2:	f7ff ff41 	bl	d5338 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d54b6:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d54b8:	2200      	movs	r2, #0
   d54ba:	4b1e      	ldr	r3, [pc, #120]	; (d5534 <_ZN5Print10printFloatEdh+0x174>)
   d54bc:	4630      	mov	r0, r6
   d54be:	4639      	mov	r1, r7
   d54c0:	f001 fa9c 	bl	d69fc <__aeabi_dmul>
   d54c4:	4606      	mov	r6, r0
   d54c6:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d54c8:	f001 fd48 	bl	d6f5c <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d54cc:	f1b0 0900 	subs.w	r9, r0, #0
   d54d0:	da07      	bge.n	d54e2 <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d54d2:	212d      	movs	r1, #45	; 0x2d
   d54d4:	4650      	mov	r0, sl
   d54d6:	f7ff ff43 	bl	d5360 <_ZN5Print5printEc>
            val = -n;
   d54da:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d54de:	4680      	mov	r8, r0
   d54e0:	e002      	b.n	d54e8 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d54e2:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d54e4:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d54e8:	220a      	movs	r2, #10
   d54ea:	4650      	mov	r0, sl
   d54ec:	f7ff ff47 	bl	d537e <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d54f0:	4440      	add	r0, r8
   d54f2:	4404      	add	r4, r0
    remainder -= toPrint;
   d54f4:	4648      	mov	r0, r9
   d54f6:	f001 fa1b 	bl	d6930 <__aeabi_i2d>
   d54fa:	4602      	mov	r2, r0
   d54fc:	460b      	mov	r3, r1
   d54fe:	4630      	mov	r0, r6
   d5500:	4639      	mov	r1, r7
   d5502:	f001 f8c7 	bl	d6694 <__aeabi_dsub>
   d5506:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d5508:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d550c:	4606      	mov	r6, r0
   d550e:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d5510:	d1d2      	bne.n	d54b8 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d5512:	4620      	mov	r0, r4
   d5514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5518:	000d7378 	.word	0x000d7378
   d551c:	7fefffff 	.word	0x7fefffff
   d5520:	000d7382 	.word	0x000d7382
   d5524:	41efffff 	.word	0x41efffff
   d5528:	000d737c 	.word	0x000d737c
   d552c:	c1efffff 	.word	0xc1efffff
   d5530:	3fe00000 	.word	0x3fe00000
   d5534:	40240000 	.word	0x40240000
   d5538:	000d7380 	.word	0x000d7380

000d553c <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d553c:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d553e:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d5540:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d5542:	f7ff ff3d 	bl	d53c0 <_ZN5Print10printFloatEdh>
   d5546:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d5548:	4628      	mov	r0, r5
   d554a:	f7ff ff0c 	bl	d5366 <_ZN5Print7printlnEv>
  return n;
}
   d554e:	4420      	add	r0, r4
   d5550:	bd38      	pop	{r3, r4, r5, pc}

000d5552 <_ZN5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d5552:	b538      	push	{r3, r4, r5, lr}
   d5554:	4604      	mov	r4, r0
    return println((double)num, digits);
   d5556:	ee10 0a10 	vmov	r0, s0
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d555a:	460d      	mov	r5, r1
    return println((double)num, digits);
   d555c:	f001 f9fa 	bl	d6954 <__aeabi_f2d>
   d5560:	ec41 0b10 	vmov	d0, r0, r1
   d5564:	4629      	mov	r1, r5
   d5566:	4620      	mov	r0, r4
}
   d5568:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return n;
}

size_t Print::println(float num, int digits)
{
    return println((double)num, digits);
   d556c:	f7ff bfe6 	b.w	d553c <_ZN5Print7printlnEdi>

000d5570 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5570:	4b01      	ldr	r3, [pc, #4]	; (d5578 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5572:	4a02      	ldr	r2, [pc, #8]	; (d557c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5574:	601a      	str	r2, [r3, #0]
   d5576:	4770      	bx	lr
   d5578:	2003e3a0 	.word	0x2003e3a0
   d557c:	000d73f9 	.word	0x000d73f9

000d5580 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d5580:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5582:	2000      	movs	r0, #0
   d5584:	f7ff fd4e 	bl	d5024 <spark_sync_time_pending>
   d5588:	b128      	cbz	r0, d5596 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d558a:	f7ff fd3b 	bl	d5004 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d558e:	f080 0001 	eor.w	r0, r0, #1
   d5592:	b2c0      	uxtb	r0, r0
   d5594:	bd08      	pop	{r3, pc}
   d5596:	2001      	movs	r0, #1
    }
   d5598:	bd08      	pop	{r3, pc}

000d559a <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d559a:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d559c:	2000      	movs	r0, #0
   d559e:	f7ff fb55 	bl	d4c4c <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d55a2:	4604      	mov	r4, r0
   d55a4:	b968      	cbnz	r0, d55c2 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d55a6:	f7ff fca1 	bl	d4eec <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d55aa:	2801      	cmp	r0, #1
   d55ac:	d10b      	bne.n	d55c6 <_ZN9TimeClass7isValidEv+0x2c>
   d55ae:	4620      	mov	r0, r4
   d55b0:	f7ff fcb4 	bl	d4f1c <system_thread_get_state>
   d55b4:	b938      	cbnz	r0, d55c6 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d55b6:	f7ff ffe3 	bl	d5580 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d55ba:	b930      	cbnz	r0, d55ca <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d55bc:	f7ff fd1a 	bl	d4ff4 <spark_process>
   d55c0:	e7f9      	b.n	d55b6 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d55c2:	2001      	movs	r0, #1
   d55c4:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d55c6:	2000      	movs	r0, #0
   d55c8:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d55ca:	f7ff ffd9 	bl	d5580 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d55ce:	2000      	movs	r0, #0
   d55d0:	f7ff fb3c 	bl	d4c4c <HAL_RTC_Time_Is_Valid>
   d55d4:	3000      	adds	r0, #0
   d55d6:	bf18      	it	ne
   d55d8:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d55da:	bd10      	pop	{r4, pc}

000d55dc <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d55dc:	b508      	push	{r3, lr}
    (void)isValid();
   d55de:	f7ff ffdc 	bl	d559a <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d55e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d55e6:	f7ff bb11 	b.w	d4c0c <HAL_RTC_Get_UnixTime>
	...

000d55ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d55ec:	4b02      	ldr	r3, [pc, #8]	; (d55f8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d55ee:	681a      	ldr	r2, [r3, #0]
   d55f0:	4b02      	ldr	r3, [pc, #8]	; (d55fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d55f2:	601a      	str	r2, [r3, #0]
   d55f4:	4770      	bx	lr
   d55f6:	bf00      	nop
   d55f8:	2003e2b4 	.word	0x2003e2b4
   d55fc:	2003e3a4 	.word	0x2003e3a4

000d5600 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5600:	b510      	push	{r4, lr}
   d5602:	4604      	mov	r4, r0
   d5604:	f7ff f8b0 	bl	d4768 <_ZNSt14_Function_baseD1Ev>
   d5608:	4620      	mov	r0, r4
   d560a:	bd10      	pop	{r4, pc}

000d560c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d560c:	4803      	ldr	r0, [pc, #12]	; (d561c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d560e:	4a04      	ldr	r2, [pc, #16]	; (d5620 <_GLOBAL__sub_I_RGB+0x14>)
   d5610:	4904      	ldr	r1, [pc, #16]	; (d5624 <_GLOBAL__sub_I_RGB+0x18>)
   d5612:	2300      	movs	r3, #0
   d5614:	6083      	str	r3, [r0, #8]
   d5616:	f000 becf 	b.w	d63b8 <__aeabi_atexit>
   d561a:	bf00      	nop
   d561c:	2003e3a8 	.word	0x2003e3a8
   d5620:	2003e31c 	.word	0x2003e31c
   d5624:	000d5601 	.word	0x000d5601

000d5628 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d5628:	7d00      	ldrb	r0, [r0, #20]
   d562a:	4770      	bx	lr

000d562c <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d562c:	7d03      	ldrb	r3, [r0, #20]
   d562e:	b11b      	cbz	r3, d5638 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d5630:	6983      	ldr	r3, [r0, #24]
   d5632:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d5636:	d102      	bne.n	d563e <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d5638:	ed9f 0a05 	vldr	s0, [pc, #20]	; d5650 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d563c:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d563e:	ee07 3a90 	vmov	s15, r3
   d5642:	ed9f 7a04 	vldr	s14, [pc, #16]	; d5654 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d5646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d564a:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d564e:	4770      	bx	lr
   d5650:	00000000 	.word	0x00000000
   d5654:	42c80000 	.word	0x42c80000

000d5658 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d5658:	7d03      	ldrb	r3, [r0, #20]
   d565a:	b11b      	cbz	r3, d5664 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d565c:	6a03      	ldr	r3, [r0, #32]
   d565e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d5662:	d102      	bne.n	d566a <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d5664:	ed9f 0a05 	vldr	s0, [pc, #20]	; d567c <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d5668:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d566a:	ee07 3a90 	vmov	s15, r3
   d566e:	ed9f 7a04 	vldr	s14, [pc, #16]	; d5680 <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d5672:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5676:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d567a:	4770      	bx	lr
   d567c:	00000000 	.word	0x00000000
   d5680:	42c80000 	.word	0x42c80000

000d5684 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d5684:	7d03      	ldrb	r3, [r0, #20]
   d5686:	b17b      	cbz	r3, d56a8 <_ZNK14CellularSignal10getQualityEv+0x24>
   d5688:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d568a:	2b00      	cmp	r3, #0
   d568c:	db0c      	blt.n	d56a8 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d568e:	ee07 3a90 	vmov	s15, r3
   d5692:	eddf 6a07 	vldr	s13, [pc, #28]	; d56b0 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d5696:	ed9f 0a07 	vldr	s0, [pc, #28]	; d56b4 <_ZNK14CellularSignal10getQualityEv+0x30>
   d569a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d569e:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d56a2:	ee27 0a80 	vmul.f32	s0, s15, s0
   d56a6:	4770      	bx	lr
    }

    return -1.0f;
   d56a8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d56ac:	4770      	bx	lr
   d56ae:	bf00      	nop
   d56b0:	477fff00 	.word	0x477fff00
   d56b4:	42c80000 	.word	0x42c80000

000d56b8 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d56b8:	7d03      	ldrb	r3, [r0, #20]
   d56ba:	b17b      	cbz	r3, d56dc <_ZNK14CellularSignal11getStrengthEv+0x24>
   d56bc:	69c3      	ldr	r3, [r0, #28]
   d56be:	2b00      	cmp	r3, #0
   d56c0:	db0c      	blt.n	d56dc <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d56c2:	ee07 3a90 	vmov	s15, r3
   d56c6:	eddf 6a07 	vldr	s13, [pc, #28]	; d56e4 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d56ca:	ed9f 0a07 	vldr	s0, [pc, #28]	; d56e8 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d56ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d56d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d56d6:	ee27 0a80 	vmul.f32	s0, s15, s0
   d56da:	4770      	bx	lr
    }

    return -1.0f;
   d56dc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d56e0:	4770      	bx	lr
   d56e2:	bf00      	nop
   d56e4:	477fff00 	.word	0x477fff00
   d56e8:	42c80000 	.word	0x42c80000

000d56ec <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d56ec:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d56ee:	460d      	mov	r5, r1
   d56f0:	f100 0410 	add.w	r4, r0, #16
   d56f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d56f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d56f8:	e895 0003 	ldmia.w	r5, {r0, r1}
   d56fc:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d5700:	2001      	movs	r0, #1
   d5702:	bd30      	pop	{r4, r5, pc}

000d5704 <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d5704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5708:	4607      	mov	r7, r0
   d570a:	460c      	mov	r4, r1
{
    if (base == 0) {
   d570c:	4615      	mov	r5, r2
   d570e:	b92a      	cbnz	r2, d571c <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d5710:	6803      	ldr	r3, [r0, #0]
   d5712:	b2c9      	uxtb	r1, r1
   d5714:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d5716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d571a:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d571c:	2900      	cmp	r1, #0
   d571e:	da07      	bge.n	d5730 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d5720:	2a0a      	cmp	r2, #10
   d5722:	d105      	bne.n	d5730 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d5724:	212d      	movs	r1, #45	; 0x2d
   d5726:	f7ff fe1b 	bl	d5360 <_ZN5Print5printEc>
            val = -n;
   d572a:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d572c:	4606      	mov	r6, r0
            val = -n;
   d572e:	e001      	b.n	d5734 <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d5730:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d5732:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5734:	b2ea      	uxtb	r2, r5
   d5736:	4638      	mov	r0, r7
   d5738:	f7ff fe21 	bl	d537e <_ZN5Print11printNumberEmh>
    }
}
   d573c:	4430      	add	r0, r6
   d573e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5742 <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
   d5742:	b570      	push	{r4, r5, r6, lr}
   d5744:	460d      	mov	r5, r1
   d5746:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d5748:	220a      	movs	r2, #10
   d574a:	6881      	ldr	r1, [r0, #8]
   d574c:	4628      	mov	r0, r5
   d574e:	f7ff ffd9 	bl	d5704 <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
   d5752:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d5754:	4604      	mov	r4, r0
    n += p.print(',');
   d5756:	4628      	mov	r0, r5
   d5758:	f7ff fe02 	bl	d5360 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d575c:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d575e:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d5760:	68f1      	ldr	r1, [r6, #12]
   d5762:	4628      	mov	r0, r5
   d5764:	f7ff ffce 	bl	d5704 <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
   d5768:	4420      	add	r0, r4
   d576a:	bd70      	pop	{r4, r5, r6, pc}

000d576c <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d576c:	f1a0 0004 	sub.w	r0, r0, #4
   d5770:	f7ff bfe7 	b.w	d5742 <_ZNK14CellularSignal7printToER5Print>

000d5774 <_ZN6detail9_getVCellEhh>:
namespace detail {
	// Converts VCELL_REGISTER reading to Battery Voltage
	float _getVCell(byte MSB, byte LSB) {
		// VCELL = 12-bit value, 1.25mV (1V/800) per bit
		float value = (float)((MSB << 4) | (LSB >> 4));
		return value / 800.0;
   d5774:	0909      	lsrs	r1, r1, #4
   d5776:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
   d577a:	ee07 0a90 	vmov	s15, r0
   d577e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
	}
   d5782:	eddf 7a02 	vldr	s15, [pc, #8]	; d578c <_ZN6detail9_getVCellEhh+0x18>
   d5786:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d578a:	4770      	bx	lr
   d578c:	44480000 	.word	0x44480000

000d5790 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d5790:	6800      	ldr	r0, [r0, #0]
   d5792:	f000 bb8a 	b.w	d5eaa <_ZN7TwoWire4lockEv>

000d5796 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d5796:	b510      	push	{r4, lr}
   d5798:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d579a:	6001      	str	r1, [r0, #0]
   d579c:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d579e:	b10a      	cbz	r2, d57a4 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d57a0:	f7ff fff6 	bl	d5790 <_ZN9FuelGauge4lockEv>
    }
}
   d57a4:	4620      	mov	r0, r4
   d57a6:	bd10      	pop	{r4, pc}

000d57a8 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d57a8:	b538      	push	{r3, r4, r5, lr}
   d57aa:	4604      	mov	r4, r0
   d57ac:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d57ae:	f000 fddd 	bl	d636c <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d57b2:	462a      	mov	r2, r5
   d57b4:	4601      	mov	r1, r0
   d57b6:	4620      	mov	r0, r4
   d57b8:	f7ff ffed 	bl	d5796 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d57bc:	4620      	mov	r0, r4
   d57be:	bd38      	pop	{r3, r4, r5, pc}

000d57c0 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d57c0:	6800      	ldr	r0, [r0, #0]
   d57c2:	f000 bb7b 	b.w	d5ebc <_ZN7TwoWire6unlockEv>

000d57c6 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d57c6:	b510      	push	{r4, lr}
{
    if (lock_) {
   d57c8:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d57ca:	4604      	mov	r4, r0
{
    if (lock_) {
   d57cc:	b10b      	cbz	r3, d57d2 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d57ce:	f7ff fff7 	bl	d57c0 <_ZN9FuelGauge6unlockEv>
    }
}
   d57d2:	4620      	mov	r0, r4
   d57d4:	bd10      	pop	{r4, pc}

000d57d6 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d57d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d57d8:	4604      	mov	r4, r0
   d57da:	4616      	mov	r6, r2
   d57dc:	461d      	mov	r5, r3
   d57de:	460f      	mov	r7, r1
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d57e0:	f7ff ffd6 	bl	d5790 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   d57e4:	6820      	ldr	r0, [r4, #0]
   d57e6:	2136      	movs	r1, #54	; 0x36
   d57e8:	f000 fb54 	bl	d5e94 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
   d57ec:	6820      	ldr	r0, [r4, #0]
   d57ee:	6803      	ldr	r3, [r0, #0]
   d57f0:	4639      	mov	r1, r7
   d57f2:	689b      	ldr	r3, [r3, #8]
   d57f4:	4798      	blx	r3
    i2c_.endTransmission(true);
   d57f6:	2101      	movs	r1, #1
   d57f8:	6820      	ldr	r0, [r4, #0]
   d57fa:	f000 fb4e 	bl	d5e9a <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
   d57fe:	2202      	movs	r2, #2
   d5800:	2136      	movs	r1, #54	; 0x36
   d5802:	2301      	movs	r3, #1
   d5804:	6820      	ldr	r0, [r4, #0]
   d5806:	f000 fb2f 	bl	d5e68 <_ZN7TwoWire11requestFromEhjh>
    MSB = i2c_.read();
   d580a:	6820      	ldr	r0, [r4, #0]
   d580c:	6803      	ldr	r3, [r0, #0]
   d580e:	695b      	ldr	r3, [r3, #20]
   d5810:	4798      	blx	r3
   d5812:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
   d5814:	6820      	ldr	r0, [r4, #0]
   d5816:	6803      	ldr	r3, [r0, #0]
   d5818:	695b      	ldr	r3, [r3, #20]
   d581a:	4798      	blx	r3
   d581c:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d581e:	4620      	mov	r0, r4
}
   d5820:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d5824:	f7ff bfcc 	b.w	d57c0 <_ZN9FuelGauge6unlockEv>

000d5828 <_ZN9FuelGauge8getVCellEv>:
		return MSB + decimal;
	}
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {
   d5828:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d582a:	ab02      	add	r3, sp, #8
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {

	byte MSB = 0;
   d582c:	2200      	movs	r2, #0
   d582e:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;
   d5832:	f803 2d01 	strb.w	r2, [r3, #-1]!

	readRegister(VCELL_REGISTER, MSB, LSB);
   d5836:	2102      	movs	r1, #2
   d5838:	f10d 0206 	add.w	r2, sp, #6
   d583c:	f7ff ffcb 	bl	d57d6 <_ZN9FuelGauge12readRegisterEhRhS0_>
	return detail::_getVCell(MSB, LSB);
   d5840:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d5844:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   d5848:	b003      	add	sp, #12
   d584a:	f85d eb04 	ldr.w	lr, [sp], #4

	byte MSB = 0;
	byte LSB = 0;

	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
   d584e:	f7ff bf91 	b.w	d5774 <_ZN6detail9_getVCellEhh>
	...

000d5854 <_ZN9FuelGauge6getSoCEv>:
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
   d5854:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d5856:	ab02      	add	r3, sp, #8
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d5858:	2200      	movs	r2, #0
	byte LSB = 0;
   d585a:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d585e:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
   d5862:	2104      	movs	r1, #4
   d5864:	f10d 0206 	add.w	r2, sp, #6
   d5868:	f7ff ffb5 	bl	d57d6 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d586c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d5870:	f001 f85e 	bl	d6930 <__aeabi_i2d>
   d5874:	2200      	movs	r2, #0
   d5876:	4b09      	ldr	r3, [pc, #36]	; (d589c <_ZN9FuelGauge6getSoCEv+0x48>)
   d5878:	f001 f8c0 	bl	d69fc <__aeabi_dmul>
   d587c:	f001 fbb6 	bl	d6fec <__aeabi_d2f>
   d5880:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d5884:	ee00 3a10 	vmov	s0, r3
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d5888:	ee07 0a90 	vmov	s15, r0
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d588c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d5890:	ee37 0a80 	vadd.f32	s0, s15, s0
   d5894:	b003      	add	sp, #12
   d5896:	f85d fb04 	ldr.w	pc, [sp], #4
   d589a:	bf00      	nop
   d589c:	3f700000 	.word	0x3f700000

000d58a0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d58a0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d58a2:	4b0c      	ldr	r3, [pc, #48]	; (d58d4 <serialEventRun+0x34>)
   d58a4:	b133      	cbz	r3, d58b4 <serialEventRun+0x14>
   d58a6:	f000 f957 	bl	d5b58 <_Z16_fetch_usbserialv>
   d58aa:	6803      	ldr	r3, [r0, #0]
   d58ac:	691b      	ldr	r3, [r3, #16]
   d58ae:	4798      	blx	r3
   d58b0:	2800      	cmp	r0, #0
   d58b2:	dc09      	bgt.n	d58c8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d58b4:	4b08      	ldr	r3, [pc, #32]	; (d58d8 <serialEventRun+0x38>)
   d58b6:	b163      	cbz	r3, d58d2 <serialEventRun+0x32>
   d58b8:	f000 fa56 	bl	d5d68 <_Z22__fetch_global_Serial1v>
   d58bc:	6803      	ldr	r3, [r0, #0]
   d58be:	691b      	ldr	r3, [r3, #16]
   d58c0:	4798      	blx	r3
   d58c2:	2800      	cmp	r0, #0
   d58c4:	dc03      	bgt.n	d58ce <serialEventRun+0x2e>
   d58c6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d58c8:	f3af 8000 	nop.w
   d58cc:	e7f2      	b.n	d58b4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d58ce:	f3af 8000 	nop.w
   d58d2:	bd08      	pop	{r3, pc}
	...

000d58dc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d58dc:	b508      	push	{r3, lr}
	serialEventRun();
   d58de:	f7ff ffdf 	bl	d58a0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d58e2:	f7ff f98b 	bl	d4bfc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d58e6:	4b01      	ldr	r3, [pc, #4]	; (d58ec <_post_loop+0x10>)
   d58e8:	6018      	str	r0, [r3, #0]
   d58ea:	bd08      	pop	{r3, pc}
   d58ec:	2003e710 	.word	0x2003e710

000d58f0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d58f0:	4802      	ldr	r0, [pc, #8]	; (d58fc <_Z33system_initialize_user_backup_ramv+0xc>)
   d58f2:	4a03      	ldr	r2, [pc, #12]	; (d5900 <_Z33system_initialize_user_backup_ramv+0x10>)
   d58f4:	4903      	ldr	r1, [pc, #12]	; (d5904 <_Z33system_initialize_user_backup_ramv+0x14>)
   d58f6:	1a12      	subs	r2, r2, r0
   d58f8:	f001 bbd6 	b.w	d70a8 <memcpy>
   d58fc:	2003f400 	.word	0x2003f400
   d5900:	2003f404 	.word	0x2003f404
   d5904:	000d76b0 	.word	0x000d76b0

000d5908 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5908:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d590a:	2300      	movs	r3, #0
   d590c:	9300      	str	r3, [sp, #0]
   d590e:	461a      	mov	r2, r3
   d5910:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5914:	f7ff fb14 	bl	d4f40 <system_ctrl_set_result>
}
   d5918:	b003      	add	sp, #12
   d591a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5920 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5920:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5922:	8843      	ldrh	r3, [r0, #2]
   d5924:	2b0a      	cmp	r3, #10
   d5926:	d008      	beq.n	d593a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5928:	2b50      	cmp	r3, #80	; 0x50
   d592a:	d109      	bne.n	d5940 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d592c:	4b09      	ldr	r3, [pc, #36]	; (d5954 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d592e:	681b      	ldr	r3, [r3, #0]
   d5930:	b13b      	cbz	r3, d5942 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5932:	b003      	add	sp, #12
   d5934:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5938:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d593a:	f7ff ffe5 	bl	d5908 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d593e:	e006      	b.n	d594e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5940:	2300      	movs	r3, #0
   d5942:	9300      	str	r3, [sp, #0]
   d5944:	461a      	mov	r2, r3
   d5946:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d594a:	f7ff faf9 	bl	d4f40 <system_ctrl_set_result>
        break;
    }
}
   d594e:	b003      	add	sp, #12
   d5950:	f85d fb04 	ldr.w	pc, [sp], #4
   d5954:	2003e3b8 	.word	0x2003e3b8

000d5958 <module_user_init_hook>:

void module_user_init_hook()
{
   d5958:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d595a:	4c10      	ldr	r4, [pc, #64]	; (d599c <module_user_init_hook+0x44>)
   d595c:	4d10      	ldr	r5, [pc, #64]	; (d59a0 <module_user_init_hook+0x48>)
   d595e:	6823      	ldr	r3, [r4, #0]
   d5960:	42ab      	cmp	r3, r5
   d5962:	4b10      	ldr	r3, [pc, #64]	; (d59a4 <module_user_init_hook+0x4c>)
   d5964:	bf0c      	ite	eq
   d5966:	2201      	moveq	r2, #1
   d5968:	2200      	movne	r2, #0
   d596a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d596c:	d002      	beq.n	d5974 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d596e:	f7ff ffbf 	bl	d58f0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5972:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5974:	f7ff f93a 	bl	d4bec <HAL_RNG_GetRandomNumber>
   d5978:	4604      	mov	r4, r0
    srand(seed);
   d597a:	f001 fba9 	bl	d70d0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d597e:	4b0a      	ldr	r3, [pc, #40]	; (d59a8 <module_user_init_hook+0x50>)
   d5980:	b113      	cbz	r3, d5988 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d5982:	4620      	mov	r0, r4
   d5984:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5988:	2100      	movs	r1, #0
   d598a:	4807      	ldr	r0, [pc, #28]	; (d59a8 <module_user_init_hook+0x50>)
   d598c:	f7ff fb52 	bl	d5034 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5990:	2100      	movs	r1, #0
   d5992:	4806      	ldr	r0, [pc, #24]	; (d59ac <module_user_init_hook+0x54>)
}
   d5994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5998:	f7ff bac8 	b.w	d4f2c <system_ctrl_set_app_request_handler>
   d599c:	2003f400 	.word	0x2003f400
   d59a0:	9a271c1e 	.word	0x9a271c1e
   d59a4:	2003e3bc 	.word	0x2003e3bc
   d59a8:	00000000 	.word	0x00000000
   d59ac:	000d5921 	.word	0x000d5921

000d59b0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d59b0:	4770      	bx	lr

000d59b2 <_ZN9IPAddressD0Ev>:
   d59b2:	b510      	push	{r4, lr}
   d59b4:	2118      	movs	r1, #24
   d59b6:	4604      	mov	r4, r0
   d59b8:	f000 fd0c 	bl	d63d4 <_ZdlPvj>
   d59bc:	4620      	mov	r0, r4
   d59be:	bd10      	pop	{r4, pc}

000d59c0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d59c0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d59c2:	7d03      	ldrb	r3, [r0, #20]
   d59c4:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d59c6:	b08d      	sub	sp, #52	; 0x34
   d59c8:	460e      	mov	r6, r1
   d59ca:	f100 0704 	add.w	r7, r0, #4
   d59ce:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d59d2:	d002      	beq.n	d59da <_ZNK9IPAddress7printToER5Print+0x1a>
   d59d4:	f100 0508 	add.w	r5, r0, #8
   d59d8:	e018      	b.n	d5a0c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d59da:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d59dc:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d59de:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d59e2:	232f      	movs	r3, #47	; 0x2f
   d59e4:	462a      	mov	r2, r5
   d59e6:	200a      	movs	r0, #10
   d59e8:	f7ff f998 	bl	d4d1c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d59ec:	4628      	mov	r0, r5
   d59ee:	f001 fbd1 	bl	d7194 <strlen>
   d59f2:	6833      	ldr	r3, [r6, #0]
   d59f4:	4602      	mov	r2, r0
   d59f6:	68db      	ldr	r3, [r3, #12]
   d59f8:	4629      	mov	r1, r5
   d59fa:	4630      	mov	r0, r6
   d59fc:	4798      	blx	r3
   d59fe:	e00f      	b.n	d5a20 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5a00:	b124      	cbz	r4, d5a0c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5a02:	212e      	movs	r1, #46	; 0x2e
   d5a04:	4630      	mov	r0, r6
   d5a06:	f7ff fcab 	bl	d5360 <_ZN5Print5printEc>
   d5a0a:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5a0c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5a10:	220a      	movs	r2, #10
   d5a12:	4630      	mov	r0, r6
   d5a14:	f7ff fcb3 	bl	d537e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5a18:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5a1a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5a1c:	d1f0      	bne.n	d5a00 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5a1e:	4620      	mov	r0, r4
    }
    return n;
}
   d5a20:	b00d      	add	sp, #52	; 0x34
   d5a22:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5a24 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5a24:	b510      	push	{r4, lr}
   d5a26:	4b05      	ldr	r3, [pc, #20]	; (d5a3c <_ZN9IPAddressC1Ev+0x18>)
   d5a28:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5a2a:	2211      	movs	r2, #17
   d5a2c:	f840 3b04 	str.w	r3, [r0], #4
   d5a30:	2100      	movs	r1, #0
   d5a32:	f001 fb44 	bl	d70be <memset>
{
    clear();
}
   d5a36:	4620      	mov	r0, r4
   d5a38:	bd10      	pop	{r4, pc}
   d5a3a:	bf00      	nop
   d5a3c:	000d74cc 	.word	0x000d74cc

000d5a40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5a40:	4603      	mov	r3, r0
   d5a42:	4a07      	ldr	r2, [pc, #28]	; (d5a60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5a44:	b510      	push	{r4, lr}
   d5a46:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5a4a:	f101 0210 	add.w	r2, r1, #16
   d5a4e:	f851 4b04 	ldr.w	r4, [r1], #4
   d5a52:	f843 4b04 	str.w	r4, [r3], #4
   d5a56:	4291      	cmp	r1, r2
   d5a58:	d1f9      	bne.n	d5a4e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5a5a:	780a      	ldrb	r2, [r1, #0]
   d5a5c:	701a      	strb	r2, [r3, #0]
}
   d5a5e:	bd10      	pop	{r4, pc}
   d5a60:	000d74cc 	.word	0x000d74cc

000d5a64 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5a64:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5a66:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5a6a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5a6e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5a72:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5a76:	2304      	movs	r3, #4
   d5a78:	6041      	str	r1, [r0, #4]
   d5a7a:	7503      	strb	r3, [r0, #20]
   d5a7c:	bd10      	pop	{r4, pc}

000d5a7e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5a7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5a80:	780d      	ldrb	r5, [r1, #0]
   d5a82:	788b      	ldrb	r3, [r1, #2]
   d5a84:	784a      	ldrb	r2, [r1, #1]
   d5a86:	78c9      	ldrb	r1, [r1, #3]
   d5a88:	9100      	str	r1, [sp, #0]
   d5a8a:	4629      	mov	r1, r5
   d5a8c:	f7ff ffea 	bl	d5a64 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5a90:	b003      	add	sp, #12
   d5a92:	bd30      	pop	{r4, r5, pc}

000d5a94 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5a94:	7441      	strb	r1, [r0, #17]
   d5a96:	4770      	bx	lr

000d5a98 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5a98:	4770      	bx	lr

000d5a9a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5a9a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5a9c:	2100      	movs	r1, #0
   d5a9e:	7c00      	ldrb	r0, [r0, #16]
   d5aa0:	f7ff fa0c 	bl	d4ebc <HAL_USB_USART_Receive_Data>
}
   d5aa4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5aa8:	bf28      	it	cs
   d5aaa:	f04f 30ff 	movcs.w	r0, #4294967295
   d5aae:	bd08      	pop	{r3, pc}

000d5ab0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5ab0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5ab2:	2101      	movs	r1, #1
   d5ab4:	7c00      	ldrb	r0, [r0, #16]
   d5ab6:	f7ff fa01 	bl	d4ebc <HAL_USB_USART_Receive_Data>
}
   d5aba:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5abe:	bf28      	it	cs
   d5ac0:	f04f 30ff 	movcs.w	r0, #4294967295
   d5ac4:	bd08      	pop	{r3, pc}

000d5ac6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5ac6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5ac8:	7c00      	ldrb	r0, [r0, #16]
   d5aca:	f7ff f9ef 	bl	d4eac <HAL_USB_USART_Available_Data_For_Write>
}
   d5ace:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5ad2:	bd08      	pop	{r3, pc}

000d5ad4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5ad4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5ad6:	7c00      	ldrb	r0, [r0, #16]
   d5ad8:	f7ff f9e0 	bl	d4e9c <HAL_USB_USART_Available_Data>
}
   d5adc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5ae0:	bd08      	pop	{r3, pc}

000d5ae2 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5ae2:	7c00      	ldrb	r0, [r0, #16]
   d5ae4:	f7ff b9fa 	b.w	d4edc <HAL_USB_USART_Flush_Data>

000d5ae8 <_ZN9USBSerialD0Ev>:
   d5ae8:	b510      	push	{r4, lr}
   d5aea:	2114      	movs	r1, #20
   d5aec:	4604      	mov	r4, r0
   d5aee:	f000 fc71 	bl	d63d4 <_ZdlPvj>
   d5af2:	4620      	mov	r0, r4
   d5af4:	bd10      	pop	{r4, pc}

000d5af6 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5af6:	b538      	push	{r3, r4, r5, lr}
   d5af8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5afa:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5afc:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5afe:	f7ff f9d5 	bl	d4eac <HAL_USB_USART_Available_Data_For_Write>
   d5b02:	2800      	cmp	r0, #0
   d5b04:	dc01      	bgt.n	d5b0a <_ZN9USBSerial5writeEh+0x14>
   d5b06:	7c60      	ldrb	r0, [r4, #17]
   d5b08:	b128      	cbz	r0, d5b16 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5b0a:	4629      	mov	r1, r5
   d5b0c:	7c20      	ldrb	r0, [r4, #16]
   d5b0e:	f7ff f9dd 	bl	d4ecc <HAL_USB_USART_Send_Data>
   d5b12:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5b16:	bd38      	pop	{r3, r4, r5, pc}

000d5b18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5b18:	b510      	push	{r4, lr}
   d5b1a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5b1c:	2300      	movs	r3, #0
   d5b1e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5b20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5b24:	60a3      	str	r3, [r4, #8]
   d5b26:	4b05      	ldr	r3, [pc, #20]	; (d5b3c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5b28:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5b2a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5b2c:	4608      	mov	r0, r1
{
  _serial = serial;
   d5b2e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5b30:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5b32:	4611      	mov	r1, r2
   d5b34:	f7ff f9a2 	bl	d4e7c <HAL_USB_USART_Init>
}
   d5b38:	4620      	mov	r0, r4
   d5b3a:	bd10      	pop	{r4, pc}
   d5b3c:	000d74e0 	.word	0x000d74e0

000d5b40 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5b40:	2200      	movs	r2, #0
   d5b42:	7c00      	ldrb	r0, [r0, #16]
   d5b44:	f7ff b9a2 	b.w	d4e8c <HAL_USB_USART_Begin>

000d5b48 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5b48:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5b4a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5b4c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5b4e:	2100      	movs	r1, #0
   d5b50:	f001 fab5 	bl	d70be <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5b54:	4620      	mov	r0, r4
   d5b56:	bd10      	pop	{r4, pc}

000d5b58 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5b58:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5b5a:	4d0e      	ldr	r5, [pc, #56]	; (d5b94 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5b5c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5b5e:	a801      	add	r0, sp, #4
   d5b60:	f7ff fff2 	bl	d5b48 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5b64:	6829      	ldr	r1, [r5, #0]
   d5b66:	f011 0401 	ands.w	r4, r1, #1
   d5b6a:	d110      	bne.n	d5b8e <_Z16_fetch_usbserialv+0x36>
   d5b6c:	4628      	mov	r0, r5
   d5b6e:	f7fe fa96 	bl	d409e <__cxa_guard_acquire>
   d5b72:	b160      	cbz	r0, d5b8e <_Z16_fetch_usbserialv+0x36>
   d5b74:	aa01      	add	r2, sp, #4
   d5b76:	4621      	mov	r1, r4
   d5b78:	4807      	ldr	r0, [pc, #28]	; (d5b98 <_Z16_fetch_usbserialv+0x40>)
   d5b7a:	f7ff ffcd 	bl	d5b18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5b7e:	4628      	mov	r0, r5
   d5b80:	f7fe fa92 	bl	d40a8 <__cxa_guard_release>
   d5b84:	4a05      	ldr	r2, [pc, #20]	; (d5b9c <_Z16_fetch_usbserialv+0x44>)
   d5b86:	4906      	ldr	r1, [pc, #24]	; (d5ba0 <_Z16_fetch_usbserialv+0x48>)
   d5b88:	4803      	ldr	r0, [pc, #12]	; (d5b98 <_Z16_fetch_usbserialv+0x40>)
   d5b8a:	f000 fc15 	bl	d63b8 <__aeabi_atexit>
	return _usbserial;
}
   d5b8e:	4802      	ldr	r0, [pc, #8]	; (d5b98 <_Z16_fetch_usbserialv+0x40>)
   d5b90:	b007      	add	sp, #28
   d5b92:	bd30      	pop	{r4, r5, pc}
   d5b94:	2003e3c0 	.word	0x2003e3c0
   d5b98:	2003e3c4 	.word	0x2003e3c4
   d5b9c:	2003e31c 	.word	0x2003e31c
   d5ba0:	000d5a99 	.word	0x000d5a99

000d5ba4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5ba4:	2200      	movs	r2, #0
   d5ba6:	4611      	mov	r1, r2
   d5ba8:	6840      	ldr	r0, [r0, #4]
   d5baa:	f7ff b9eb 	b.w	d4f84 <network_ready>

000d5bae <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5bae:	2200      	movs	r2, #0
   d5bb0:	4611      	mov	r1, r2
   d5bb2:	6840      	ldr	r0, [r0, #4]
   d5bb4:	f7ff ba06 	b.w	d4fc4 <network_listening>

000d5bb8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5bb8:	2200      	movs	r2, #0
   d5bba:	4611      	mov	r1, r2
   d5bbc:	6840      	ldr	r0, [r0, #4]
   d5bbe:	f7ff ba11 	b.w	d4fe4 <network_get_listen_timeout>

000d5bc2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5bc2:	2200      	movs	r2, #0
   d5bc4:	6840      	ldr	r0, [r0, #4]
   d5bc6:	f7ff ba05 	b.w	d4fd4 <network_set_listen_timeout>

000d5bca <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5bca:	2200      	movs	r2, #0
   d5bcc:	f081 0101 	eor.w	r1, r1, #1
   d5bd0:	6840      	ldr	r0, [r0, #4]
   d5bd2:	f7ff b9ef 	b.w	d4fb4 <network_listen>

000d5bd6 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d5bd6:	2300      	movs	r3, #0
   d5bd8:	461a      	mov	r2, r3
   d5bda:	4619      	mov	r1, r3
   d5bdc:	6840      	ldr	r0, [r0, #4]
   d5bde:	f7ff b9e1 	b.w	d4fa4 <network_off>

000d5be2 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d5be2:	2300      	movs	r3, #0
   d5be4:	461a      	mov	r2, r3
   d5be6:	4619      	mov	r1, r3
   d5be8:	6840      	ldr	r0, [r0, #4]
   d5bea:	f7ff b9d3 	b.w	d4f94 <network_on>

000d5bee <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5bee:	2200      	movs	r2, #0
   d5bf0:	4611      	mov	r1, r2
   d5bf2:	6840      	ldr	r0, [r0, #4]
   d5bf4:	f7ff b9b6 	b.w	d4f64 <network_connecting>

000d5bf8 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5bf8:	2200      	movs	r2, #0
   d5bfa:	2102      	movs	r1, #2
   d5bfc:	6840      	ldr	r0, [r0, #4]
   d5bfe:	f7ff b9b9 	b.w	d4f74 <network_disconnect>

000d5c02 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5c02:	2300      	movs	r3, #0
   d5c04:	461a      	mov	r2, r3
   d5c06:	6840      	ldr	r0, [r0, #4]
   d5c08:	f7ff b9a4 	b.w	d4f54 <network_connect>

000d5c0c <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d5c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d5c0e:	4b1b      	ldr	r3, [pc, #108]	; (d5c7c <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d5c10:	6003      	str	r3, [r0, #0]
   d5c12:	2500      	movs	r5, #0
   d5c14:	460f      	mov	r7, r1
   d5c16:	3328      	adds	r3, #40	; 0x28
   d5c18:	2618      	movs	r6, #24
   d5c1a:	b089      	sub	sp, #36	; 0x24
   d5c1c:	6043      	str	r3, [r0, #4]
   d5c1e:	6085      	str	r5, [r0, #8]
   d5c20:	60c5      	str	r5, [r0, #12]
   d5c22:	4632      	mov	r2, r6
   d5c24:	4629      	mov	r1, r5
   d5c26:	4604      	mov	r4, r0
   d5c28:	3010      	adds	r0, #16
   d5c2a:	f001 fa48 	bl	d70be <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d5c2e:	462a      	mov	r2, r5
   d5c30:	4629      	mov	r1, r5
   d5c32:	6878      	ldr	r0, [r7, #4]
   d5c34:	f7ff f9a6 	bl	d4f84 <network_ready>
   d5c38:	b908      	cbnz	r0, d5c3e <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d5c3a:	60a0      	str	r0, [r4, #8]
            return sig;
   d5c3c:	e01b      	b.n	d5c76 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d5c3e:	4629      	mov	r1, r5
   d5c40:	4632      	mov	r2, r6
   d5c42:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d5c44:	9500      	str	r5, [sp, #0]
   d5c46:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d5c48:	f001 fa39 	bl	d70be <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d5c4c:	a902      	add	r1, sp, #8
   d5c4e:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d5c50:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d5c54:	f7ff f90a 	bl	d4e6c <cellular_signal>
   d5c58:	b110      	cbz	r0, d5c60 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d5c5a:	2301      	movs	r3, #1
   d5c5c:	60a3      	str	r3, [r4, #8]
            return sig;
   d5c5e:	e00a      	b.n	d5c76 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d5c60:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d5c62:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d5c64:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d5c66:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d5c68:	b90b      	cbnz	r3, d5c6e <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d5c6a:	2302      	movs	r3, #2
   d5c6c:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d5c6e:	a902      	add	r1, sp, #8
   d5c70:	4620      	mov	r0, r4
   d5c72:	f7ff fd3b 	bl	d56ec <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d5c76:	4620      	mov	r0, r4
   d5c78:	b009      	add	sp, #36	; 0x24
   d5c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5c7c:	000d7498 	.word	0x000d7498

000d5c80 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5c80:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5c82:	4c08      	ldr	r4, [pc, #32]	; (d5ca4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d5c84:	2528      	movs	r5, #40	; 0x28
   d5c86:	462a      	mov	r2, r5
   d5c88:	2100      	movs	r1, #0
   d5c8a:	4620      	mov	r0, r4
   d5c8c:	f001 fa17 	bl	d70be <memset>
        cid = -1;
   d5c90:	f04f 33ff 	mov.w	r3, #4294967295
   d5c94:	6063      	str	r3, [r4, #4]
   d5c96:	4b04      	ldr	r3, [pc, #16]	; (d5ca8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d5c98:	8025      	strh	r5, [r4, #0]
   d5c9a:	2204      	movs	r2, #4
   d5c9c:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d5c9e:	4a03      	ldr	r2, [pc, #12]	; (d5cac <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5ca0:	601a      	str	r2, [r3, #0]
   d5ca2:	bd38      	pop	{r3, r4, r5, pc}
   d5ca4:	2003e3e0 	.word	0x2003e3e0
   d5ca8:	2003e3d8 	.word	0x2003e3d8
   d5cac:	000d7510 	.word	0x000d7510

000d5cb0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5cb0:	4770      	bx	lr

000d5cb2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5cb2:	7441      	strb	r1, [r0, #17]
   d5cb4:	4770      	bx	lr

000d5cb6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5cb6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5cb8:	7c00      	ldrb	r0, [r0, #16]
   d5cba:	f7ff f86f 	bl	d4d9c <HAL_USART_Available_Data_For_Write>
}
   d5cbe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5cc2:	bd08      	pop	{r3, pc}

000d5cc4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5cc4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5cc6:	7c00      	ldrb	r0, [r0, #16]
   d5cc8:	f7ff f840 	bl	d4d4c <HAL_USART_Available_Data>
}
   d5ccc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5cd0:	bd08      	pop	{r3, pc}

000d5cd2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5cd2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5cd4:	7c00      	ldrb	r0, [r0, #16]
   d5cd6:	f7ff f849 	bl	d4d6c <HAL_USART_Peek_Data>
}
   d5cda:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5cde:	bf28      	it	cs
   d5ce0:	f04f 30ff 	movcs.w	r0, #4294967295
   d5ce4:	bd08      	pop	{r3, pc}

000d5ce6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5ce6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5ce8:	7c00      	ldrb	r0, [r0, #16]
   d5cea:	f7ff f837 	bl	d4d5c <HAL_USART_Read_Data>
}
   d5cee:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5cf2:	bf28      	it	cs
   d5cf4:	f04f 30ff 	movcs.w	r0, #4294967295
   d5cf8:	bd08      	pop	{r3, pc}

000d5cfa <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5cfa:	7c00      	ldrb	r0, [r0, #16]
   d5cfc:	f7ff b83e 	b.w	d4d7c <HAL_USART_Flush_Data>

000d5d00 <_ZN11USARTSerialD0Ev>:
   d5d00:	b510      	push	{r4, lr}
   d5d02:	2114      	movs	r1, #20
   d5d04:	4604      	mov	r4, r0
   d5d06:	f000 fb65 	bl	d63d4 <_ZdlPvj>
   d5d0a:	4620      	mov	r0, r4
   d5d0c:	bd10      	pop	{r4, pc}

000d5d0e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5d0e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5d10:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5d12:	4604      	mov	r4, r0
   d5d14:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5d16:	b925      	cbnz	r5, d5d22 <_ZN11USARTSerial5writeEh+0x14>
   d5d18:	7c00      	ldrb	r0, [r0, #16]
   d5d1a:	f7ff f83f 	bl	d4d9c <HAL_USART_Available_Data_For_Write>
   d5d1e:	2800      	cmp	r0, #0
   d5d20:	dd05      	ble.n	d5d2e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5d22:	4631      	mov	r1, r6
   d5d24:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5d26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5d2a:	f7ff b807 	b.w	d4d3c <HAL_USART_Write_Data>
  }
  return 0;
}
   d5d2e:	4628      	mov	r0, r5
   d5d30:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5d34 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5d34:	b510      	push	{r4, lr}
   d5d36:	4604      	mov	r4, r0
   d5d38:	4608      	mov	r0, r1
   d5d3a:	4611      	mov	r1, r2
   d5d3c:	2200      	movs	r2, #0
   d5d3e:	6062      	str	r2, [r4, #4]
   d5d40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5d44:	60a2      	str	r2, [r4, #8]
   d5d46:	4a05      	ldr	r2, [pc, #20]	; (d5d5c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5d48:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5d4a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5d4c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5d4e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5d50:	461a      	mov	r2, r3
   d5d52:	f7fe ffeb 	bl	d4d2c <HAL_USART_Init>
}
   d5d56:	4620      	mov	r0, r4
   d5d58:	bd10      	pop	{r4, pc}
   d5d5a:	bf00      	nop
   d5d5c:	000d7544 	.word	0x000d7544

000d5d60 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5d60:	7c00      	ldrb	r0, [r0, #16]
   d5d62:	f7ff b813 	b.w	d4d8c <HAL_USART_Is_Enabled>
	...

000d5d68 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5d68:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5d6a:	4d0c      	ldr	r5, [pc, #48]	; (d5d9c <_Z22__fetch_global_Serial1v+0x34>)
   d5d6c:	6829      	ldr	r1, [r5, #0]
   d5d6e:	f011 0401 	ands.w	r4, r1, #1
   d5d72:	d111      	bne.n	d5d98 <_Z22__fetch_global_Serial1v+0x30>
   d5d74:	4628      	mov	r0, r5
   d5d76:	f7fe f992 	bl	d409e <__cxa_guard_acquire>
   d5d7a:	b168      	cbz	r0, d5d98 <_Z22__fetch_global_Serial1v+0x30>
   d5d7c:	4a08      	ldr	r2, [pc, #32]	; (d5da0 <_Z22__fetch_global_Serial1v+0x38>)
   d5d7e:	4b09      	ldr	r3, [pc, #36]	; (d5da4 <_Z22__fetch_global_Serial1v+0x3c>)
   d5d80:	4809      	ldr	r0, [pc, #36]	; (d5da8 <_Z22__fetch_global_Serial1v+0x40>)
   d5d82:	4621      	mov	r1, r4
   d5d84:	f7ff ffd6 	bl	d5d34 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5d88:	4628      	mov	r0, r5
   d5d8a:	f7fe f98d 	bl	d40a8 <__cxa_guard_release>
   d5d8e:	4a07      	ldr	r2, [pc, #28]	; (d5dac <_Z22__fetch_global_Serial1v+0x44>)
   d5d90:	4907      	ldr	r1, [pc, #28]	; (d5db0 <_Z22__fetch_global_Serial1v+0x48>)
   d5d92:	4805      	ldr	r0, [pc, #20]	; (d5da8 <_Z22__fetch_global_Serial1v+0x40>)
   d5d94:	f000 fb10 	bl	d63b8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5d98:	4803      	ldr	r0, [pc, #12]	; (d5da8 <_Z22__fetch_global_Serial1v+0x40>)
   d5d9a:	bd38      	pop	{r3, r4, r5, pc}
   d5d9c:	2003e4a0 	.word	0x2003e4a0
   d5da0:	2003e4a4 	.word	0x2003e4a4
   d5da4:	2003e41c 	.word	0x2003e41c
   d5da8:	2003e408 	.word	0x2003e408
   d5dac:	2003e31c 	.word	0x2003e31c
   d5db0:	000d5cb1 	.word	0x000d5cb1

000d5db4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d5db4:	4770      	bx	lr

000d5db6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5db6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5db8:	4606      	mov	r6, r0
   d5dba:	4615      	mov	r5, r2
   d5dbc:	460c      	mov	r4, r1
   d5dbe:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5dc0:	42bc      	cmp	r4, r7
   d5dc2:	d006      	beq.n	d5dd2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5dc4:	6833      	ldr	r3, [r6, #0]
   d5dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5dca:	689b      	ldr	r3, [r3, #8]
   d5dcc:	4630      	mov	r0, r6
   d5dce:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5dd0:	e7f6      	b.n	d5dc0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5dd2:	4628      	mov	r0, r5
   d5dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5dd6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5dd6:	2200      	movs	r2, #0
   d5dd8:	7c00      	ldrb	r0, [r0, #16]
   d5dda:	f7fe bff7 	b.w	d4dcc <HAL_I2C_Write_Data>

000d5dde <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5dde:	2100      	movs	r1, #0
   d5de0:	7c00      	ldrb	r0, [r0, #16]
   d5de2:	f7fe bffb 	b.w	d4ddc <HAL_I2C_Available_Data>

000d5de6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5de6:	2100      	movs	r1, #0
   d5de8:	7c00      	ldrb	r0, [r0, #16]
   d5dea:	f7fe bfff 	b.w	d4dec <HAL_I2C_Read_Data>

000d5dee <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5dee:	2100      	movs	r1, #0
   d5df0:	7c00      	ldrb	r0, [r0, #16]
   d5df2:	f7ff b803 	b.w	d4dfc <HAL_I2C_Peek_Data>

000d5df6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5df6:	2100      	movs	r1, #0
   d5df8:	7c00      	ldrb	r0, [r0, #16]
   d5dfa:	f7ff b807 	b.w	d4e0c <HAL_I2C_Flush_Data>

000d5dfe <_ZN7TwoWireD0Ev>:
   d5dfe:	b510      	push	{r4, lr}
   d5e00:	2114      	movs	r1, #20
   d5e02:	4604      	mov	r4, r0
   d5e04:	f000 fae6 	bl	d63d4 <_ZdlPvj>
   d5e08:	4620      	mov	r0, r4
   d5e0a:	bd10      	pop	{r4, pc}

000d5e0c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5e0c:	b510      	push	{r4, lr}
   d5e0e:	4604      	mov	r4, r0
   d5e10:	2300      	movs	r3, #0
   d5e12:	6063      	str	r3, [r4, #4]
   d5e14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5e18:	60a3      	str	r3, [r4, #8]
   d5e1a:	4b04      	ldr	r3, [pc, #16]	; (d5e2c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d5e1c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5e1e:	4608      	mov	r0, r1
   d5e20:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d5e22:	4611      	mov	r1, r2
   d5e24:	f7ff f802 	bl	d4e2c <HAL_I2C_Init>
}
   d5e28:	4620      	mov	r0, r4
   d5e2a:	bd10      	pop	{r4, pc}
   d5e2c:	000d7574 	.word	0x000d7574

000d5e30 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d5e30:	b570      	push	{r4, r5, r6, lr}
   d5e32:	460c      	mov	r4, r1
   d5e34:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d5e36:	2514      	movs	r5, #20
   d5e38:	4606      	mov	r6, r0
   d5e3a:	462a      	mov	r2, r5
   d5e3c:	2100      	movs	r1, #0
   d5e3e:	a801      	add	r0, sp, #4
   d5e40:	f001 f93d 	bl	d70be <memset>
   d5e44:	7823      	ldrb	r3, [r4, #0]
   d5e46:	f88d 3008 	strb.w	r3, [sp, #8]
   d5e4a:	6863      	ldr	r3, [r4, #4]
   d5e4c:	9303      	str	r3, [sp, #12]
   d5e4e:	68e3      	ldr	r3, [r4, #12]
   d5e50:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d5e52:	2200      	movs	r2, #0
   d5e54:	7a23      	ldrb	r3, [r4, #8]
   d5e56:	7c30      	ldrb	r0, [r6, #16]
   d5e58:	f8ad 5004 	strh.w	r5, [sp, #4]
   d5e5c:	a901      	add	r1, sp, #4
   d5e5e:	9305      	str	r3, [sp, #20]
   d5e60:	f7fe fffc 	bl	d4e5c <HAL_I2C_Request_Data_Ex>
}
   d5e64:	b006      	add	sp, #24
   d5e66:	bd70      	pop	{r4, r5, r6, pc}

000d5e68 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d5e68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5e6a:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d5e6c:	f88d 1000 	strb.w	r1, [sp]
   d5e70:	f04f 0164 	mov.w	r1, #100	; 0x64
   d5e74:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5e76:	bf18      	it	ne
   d5e78:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d5e7a:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d5e7c:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5e7e:	f88d 3008 	strb.w	r3, [sp, #8]
   d5e82:	f7ff ffd5 	bl	d5e30 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d5e86:	b005      	add	sp, #20
   d5e88:	f85d fb04 	ldr.w	pc, [sp], #4

000d5e8c <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5e8c:	2200      	movs	r2, #0
   d5e8e:	7c00      	ldrb	r0, [r0, #16]
   d5e90:	f7fe bf8c 	b.w	d4dac <HAL_I2C_Begin_Transmission>

000d5e94 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d5e94:	b2c9      	uxtb	r1, r1
   d5e96:	f7ff bff9 	b.w	d5e8c <_ZN7TwoWire17beginTransmissionEh>

000d5e9a <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5e9a:	2200      	movs	r2, #0
   d5e9c:	7c00      	ldrb	r0, [r0, #16]
   d5e9e:	f7fe bf8d 	b.w	d4dbc <HAL_I2C_End_Transmission>

000d5ea2 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5ea2:	2100      	movs	r1, #0
   d5ea4:	7c00      	ldrb	r0, [r0, #16]
   d5ea6:	f7fe bfb9 	b.w	d4e1c <HAL_I2C_Is_Enabled>

000d5eaa <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d5eaa:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d5eac:	2100      	movs	r1, #0
   d5eae:	7c00      	ldrb	r0, [r0, #16]
   d5eb0:	f7fe ffc4 	bl	d4e3c <HAL_I2C_Acquire>
}
   d5eb4:	fab0 f080 	clz	r0, r0
   d5eb8:	0940      	lsrs	r0, r0, #5
   d5eba:	bd08      	pop	{r3, pc}

000d5ebc <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d5ebc:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d5ebe:	2100      	movs	r1, #0
   d5ec0:	7c00      	ldrb	r0, [r0, #16]
   d5ec2:	f7fe ffc3 	bl	d4e4c <HAL_I2C_Release>
}
   d5ec6:	fab0 f080 	clz	r0, r0
   d5eca:	0940      	lsrs	r0, r0, #5
   d5ecc:	bd08      	pop	{r3, pc}

000d5ece <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d5ece:	b510      	push	{r4, lr}
  if (0 == max) {
   d5ed0:	4604      	mov	r4, r0
   d5ed2:	b130      	cbz	r0, d5ee2 <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
   d5ed4:	f001 f924 	bl	d7120 <rand>
   d5ed8:	fb90 f3f4 	sdiv	r3, r0, r4
   d5edc:	fb03 0014 	mls	r0, r3, r4, r0
   d5ee0:	bd10      	pop	{r4, pc}
}
   d5ee2:	bd10      	pop	{r4, pc}

000d5ee4 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5ee4:	2200      	movs	r2, #0
   d5ee6:	4611      	mov	r1, r2
   d5ee8:	6840      	ldr	r0, [r0, #4]
   d5eea:	f7ff b86b 	b.w	d4fc4 <network_listening>

000d5eee <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5eee:	2200      	movs	r2, #0
   d5ef0:	4611      	mov	r1, r2
   d5ef2:	6840      	ldr	r0, [r0, #4]
   d5ef4:	f7ff b876 	b.w	d4fe4 <network_get_listen_timeout>

000d5ef8 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5ef8:	2200      	movs	r2, #0
   d5efa:	6840      	ldr	r0, [r0, #4]
   d5efc:	f7ff b86a 	b.w	d4fd4 <network_set_listen_timeout>

000d5f00 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5f00:	2200      	movs	r2, #0
   d5f02:	f081 0101 	eor.w	r1, r1, #1
   d5f06:	6840      	ldr	r0, [r0, #4]
   d5f08:	f7ff b854 	b.w	d4fb4 <network_listen>

000d5f0c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5f0c:	2300      	movs	r3, #0
   d5f0e:	461a      	mov	r2, r3
   d5f10:	2101      	movs	r1, #1
   d5f12:	6840      	ldr	r0, [r0, #4]
   d5f14:	f7ff b846 	b.w	d4fa4 <network_off>

000d5f18 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5f18:	2300      	movs	r3, #0
   d5f1a:	461a      	mov	r2, r3
   d5f1c:	4619      	mov	r1, r3
   d5f1e:	6840      	ldr	r0, [r0, #4]
   d5f20:	f7ff b838 	b.w	d4f94 <network_on>

000d5f24 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5f24:	2200      	movs	r2, #0
   d5f26:	4611      	mov	r1, r2
   d5f28:	6840      	ldr	r0, [r0, #4]
   d5f2a:	f7ff b82b 	b.w	d4f84 <network_ready>

000d5f2e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5f2e:	2200      	movs	r2, #0
   d5f30:	4611      	mov	r1, r2
   d5f32:	6840      	ldr	r0, [r0, #4]
   d5f34:	f7ff b816 	b.w	d4f64 <network_connecting>

000d5f38 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5f38:	2200      	movs	r2, #0
   d5f3a:	2102      	movs	r1, #2
   d5f3c:	6840      	ldr	r0, [r0, #4]
   d5f3e:	f7ff b819 	b.w	d4f74 <network_disconnect>

000d5f42 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5f42:	2300      	movs	r3, #0
   d5f44:	461a      	mov	r2, r3
   d5f46:	6840      	ldr	r0, [r0, #4]
   d5f48:	f7ff b804 	b.w	d4f54 <network_connect>

000d5f4c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5f4c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5f4e:	4605      	mov	r5, r0
   d5f50:	b188      	cbz	r0, d5f76 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5f52:	6804      	ldr	r4, [r0, #0]
   d5f54:	b14c      	cbz	r4, d5f6a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d5f56:	68a3      	ldr	r3, [r4, #8]
   d5f58:	b11b      	cbz	r3, d5f62 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5f5a:	2203      	movs	r2, #3
   d5f5c:	4621      	mov	r1, r4
   d5f5e:	4620      	mov	r0, r4
   d5f60:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5f62:	2110      	movs	r1, #16
   d5f64:	4620      	mov	r0, r4
   d5f66:	f000 fa35 	bl	d63d4 <_ZdlPvj>
   d5f6a:	4628      	mov	r0, r5
   d5f6c:	2114      	movs	r1, #20
      }
   d5f6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5f72:	f000 ba2f 	b.w	d63d4 <_ZdlPvj>
   d5f76:	bd38      	pop	{r3, r4, r5, pc}

000d5f78 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5f78:	b110      	cbz	r0, d5f80 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5f7a:	6803      	ldr	r3, [r0, #0]
   d5f7c:	685b      	ldr	r3, [r3, #4]
   d5f7e:	4718      	bx	r3
   d5f80:	4770      	bx	lr

000d5f82 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5f82:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5f84:	6803      	ldr	r3, [r0, #0]
   d5f86:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5f88:	b1bb      	cbz	r3, d5fba <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5f8a:	6858      	ldr	r0, [r3, #4]
   d5f8c:	f7fe fe66 	bl	d4c5c <os_thread_is_current>
   d5f90:	b978      	cbnz	r0, d5fb2 <_ZN6ThreadD1Ev+0x30>
   d5f92:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5f94:	7c5a      	ldrb	r2, [r3, #17]
   d5f96:	b912      	cbnz	r2, d5f9e <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5f98:	6858      	ldr	r0, [r3, #4]
   d5f9a:	f7fe fe6f 	bl	d4c7c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5f9e:	6823      	ldr	r3, [r4, #0]
   d5fa0:	6858      	ldr	r0, [r3, #4]
   d5fa2:	f7fe fe73 	bl	d4c8c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5fa6:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5fa8:	2300      	movs	r3, #0
   d5faa:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5fac:	b128      	cbz	r0, d5fba <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5fae:	f7ff ffcd 	bl	d5f4c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5fb2:	6820      	ldr	r0, [r4, #0]
   d5fb4:	b108      	cbz	r0, d5fba <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5fb6:	f7ff ffc9 	bl	d5f4c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5fba:	4620      	mov	r0, r4
   d5fbc:	bd10      	pop	{r4, pc}

000d5fbe <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d5fbe:	b538      	push	{r3, r4, r5, lr}
   d5fc0:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5fc2:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d5fc6:	b108      	cbz	r0, d5fcc <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5fc8:	f7fe f867 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5fcc:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5fd0:	b108      	cbz	r0, d5fd6 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d5fd2:	f7fe fe93 	bl	d4cfc <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5fd6:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5fda:	b135      	cbz	r5, d5fea <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5fdc:	4628      	mov	r0, r5
   d5fde:	f7ff ffd0 	bl	d5f82 <_ZN6ThreadD1Ev>
   d5fe2:	2104      	movs	r1, #4
   d5fe4:	4628      	mov	r0, r5
   d5fe6:	f000 f9f5 	bl	d63d4 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5fea:	6820      	ldr	r0, [r4, #0]
   d5fec:	b108      	cbz	r0, d5ff2 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5fee:	f7ff ffc3 	bl	d5f78 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5ff2:	4620      	mov	r0, r4
   d5ff4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5ff8 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5ff8:	b510      	push	{r4, lr}
   d5ffa:	4b04      	ldr	r3, [pc, #16]	; (d600c <_ZN5spark9MeshClassD1Ev+0x14>)
   d5ffc:	4604      	mov	r4, r0
   d5ffe:	f840 3b08 	str.w	r3, [r0], #8
   d6002:	f7ff ffdc 	bl	d5fbe <_ZN5spark11MeshPublishD1Ev>
   d6006:	4620      	mov	r0, r4
   d6008:	bd10      	pop	{r4, pc}
   d600a:	bf00      	nop
   d600c:	000d759c 	.word	0x000d759c

000d6010 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6010:	b538      	push	{r3, r4, r5, lr}
   d6012:	4c0e      	ldr	r4, [pc, #56]	; (d604c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6014:	4b0e      	ldr	r3, [pc, #56]	; (d6050 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6016:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6018:	2500      	movs	r5, #0
   d601a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d601c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6020:	6063      	str	r3, [r4, #4]
   d6022:	60a5      	str	r5, [r4, #8]
   d6024:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6028:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d602c:	f7fe fe5e 	bl	d4cec <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6030:	4b08      	ldr	r3, [pc, #32]	; (d6054 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6032:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6036:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d603a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d603c:	4620      	mov	r0, r4
   d603e:	4a06      	ldr	r2, [pc, #24]	; (d6058 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6040:	4906      	ldr	r1, [pc, #24]	; (d605c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6042:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6046:	f000 b9b7 	b.w	d63b8 <__aeabi_atexit>
   d604a:	bf00      	nop
   d604c:	2003e528 	.word	0x2003e528
   d6050:	000d75d0 	.word	0x000d75d0
   d6054:	000d759c 	.word	0x000d759c
   d6058:	2003e31c 	.word	0x2003e31c
   d605c:	000d5ff9 	.word	0x000d5ff9

000d6060 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6060:	2300      	movs	r3, #0
   d6062:	461a      	mov	r2, r3
   d6064:	6840      	ldr	r0, [r0, #4]
   d6066:	f7fe bf75 	b.w	d4f54 <network_connect>

000d606a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d606a:	2200      	movs	r2, #0
   d606c:	2102      	movs	r1, #2
   d606e:	6840      	ldr	r0, [r0, #4]
   d6070:	f7fe bf80 	b.w	d4f74 <network_disconnect>

000d6074 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6074:	2200      	movs	r2, #0
   d6076:	4611      	mov	r1, r2
   d6078:	6840      	ldr	r0, [r0, #4]
   d607a:	f7fe bf73 	b.w	d4f64 <network_connecting>

000d607e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d607e:	2200      	movs	r2, #0
   d6080:	4611      	mov	r1, r2
   d6082:	6840      	ldr	r0, [r0, #4]
   d6084:	f7fe bf7e 	b.w	d4f84 <network_ready>

000d6088 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6088:	2300      	movs	r3, #0
   d608a:	461a      	mov	r2, r3
   d608c:	4619      	mov	r1, r3
   d608e:	6840      	ldr	r0, [r0, #4]
   d6090:	f7fe bf80 	b.w	d4f94 <network_on>

000d6094 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6094:	2300      	movs	r3, #0
   d6096:	461a      	mov	r2, r3
   d6098:	4619      	mov	r1, r3
   d609a:	6840      	ldr	r0, [r0, #4]
   d609c:	f7fe bf82 	b.w	d4fa4 <network_off>

000d60a0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d60a0:	2200      	movs	r2, #0
   d60a2:	f081 0101 	eor.w	r1, r1, #1
   d60a6:	6840      	ldr	r0, [r0, #4]
   d60a8:	f7fe bf84 	b.w	d4fb4 <network_listen>

000d60ac <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d60ac:	2200      	movs	r2, #0
   d60ae:	6840      	ldr	r0, [r0, #4]
   d60b0:	f7fe bf90 	b.w	d4fd4 <network_set_listen_timeout>

000d60b4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d60b4:	2200      	movs	r2, #0
   d60b6:	4611      	mov	r1, r2
   d60b8:	6840      	ldr	r0, [r0, #4]
   d60ba:	f7fe bf93 	b.w	d4fe4 <network_get_listen_timeout>

000d60be <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d60be:	2200      	movs	r2, #0
   d60c0:	4611      	mov	r1, r2
   d60c2:	6840      	ldr	r0, [r0, #4]
   d60c4:	f7fe bf7e 	b.w	d4fc4 <network_listening>

000d60c8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d60c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d60cc:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d60ce:	b095      	sub	sp, #84	; 0x54
   d60d0:	4616      	mov	r6, r2
   d60d2:	460d      	mov	r5, r1
   d60d4:	4607      	mov	r7, r0
    IPAddress addr;
   d60d6:	f7ff fca5 	bl	d5a24 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d60da:	4621      	mov	r1, r4
   d60dc:	2220      	movs	r2, #32
   d60de:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d60e0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d60e2:	f000 ffec 	bl	d70be <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d60e6:	2340      	movs	r3, #64	; 0x40
   d60e8:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d60ea:	4621      	mov	r1, r4
   d60ec:	466b      	mov	r3, sp
   d60ee:	aa0c      	add	r2, sp, #48	; 0x30
   d60f0:	4630      	mov	r0, r6
   d60f2:	f7fe fd3b 	bl	d4b6c <netdb_getaddrinfo>
    if (!r) {
   d60f6:	4604      	mov	r4, r0
   d60f8:	2800      	cmp	r0, #0
   d60fa:	d144      	bne.n	d6186 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d60fc:	4602      	mov	r2, r0
   d60fe:	2101      	movs	r1, #1
   d6100:	6868      	ldr	r0, [r5, #4]
   d6102:	f7fe ff3f 	bl	d4f84 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6106:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6108:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d610a:	4622      	mov	r2, r4
   d610c:	6868      	ldr	r0, [r5, #4]
   d610e:	f7fe ff39 	bl	d4f84 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6112:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6114:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6116:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6118:	2e00      	cmp	r6, #0
   d611a:	d034      	beq.n	d6186 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d611c:	2900      	cmp	r1, #0
   d611e:	d132      	bne.n	d6186 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6120:	6873      	ldr	r3, [r6, #4]
   d6122:	2b02      	cmp	r3, #2
   d6124:	d002      	beq.n	d612c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6126:	2b0a      	cmp	r3, #10
   d6128:	d009      	beq.n	d613e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d612a:	e02a      	b.n	d6182 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d612c:	f1b8 0f00 	cmp.w	r8, #0
   d6130:	d027      	beq.n	d6182 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6132:	6971      	ldr	r1, [r6, #20]
   d6134:	4638      	mov	r0, r7
   d6136:	3104      	adds	r1, #4
   d6138:	f7ff fca1 	bl	d5a7e <_ZN9IPAddressaSEPKh>
   d613c:	e020      	b.n	d6180 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d613e:	f1b9 0f00 	cmp.w	r9, #0
   d6142:	d01e      	beq.n	d6182 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6144:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6146:	2211      	movs	r2, #17
   d6148:	a801      	add	r0, sp, #4
   d614a:	f000 ffb8 	bl	d70be <memset>
                    a.v = 6;
   d614e:	2306      	movs	r3, #6
   d6150:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6154:	ad01      	add	r5, sp, #4
   d6156:	f104 0308 	add.w	r3, r4, #8
   d615a:	3418      	adds	r4, #24
   d615c:	6818      	ldr	r0, [r3, #0]
   d615e:	6859      	ldr	r1, [r3, #4]
   d6160:	462a      	mov	r2, r5
   d6162:	c203      	stmia	r2!, {r0, r1}
   d6164:	3308      	adds	r3, #8
   d6166:	42a3      	cmp	r3, r4
   d6168:	4615      	mov	r5, r2
   d616a:	d1f7      	bne.n	d615c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d616c:	a901      	add	r1, sp, #4
   d616e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6170:	ad07      	add	r5, sp, #28
   d6172:	f7ff fc65 	bl	d5a40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6176:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6178:	1d3c      	adds	r4, r7, #4
   d617a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d617c:	682b      	ldr	r3, [r5, #0]
   d617e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6180:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6182:	69f6      	ldr	r6, [r6, #28]
   d6184:	e7c8      	b.n	d6118 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6186:	9800      	ldr	r0, [sp, #0]
   d6188:	f7fe fce8 	bl	d4b5c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d618c:	4638      	mov	r0, r7
   d618e:	b015      	add	sp, #84	; 0x54
   d6190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6194 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6194:	4b02      	ldr	r3, [pc, #8]	; (d61a0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6196:	4a03      	ldr	r2, [pc, #12]	; (d61a4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6198:	601a      	str	r2, [r3, #0]
   d619a:	2200      	movs	r2, #0
   d619c:	605a      	str	r2, [r3, #4]
   d619e:	4770      	bx	lr
   d61a0:	2003e6fc 	.word	0x2003e6fc
   d61a4:	000d75d0 	.word	0x000d75d0

000d61a8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d61a8:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d61aa:	4e18      	ldr	r6, [pc, #96]	; (d620c <pinAvailable+0x64>)
   d61ac:	6831      	ldr	r1, [r6, #0]
   d61ae:	f011 0501 	ands.w	r5, r1, #1
   d61b2:	4604      	mov	r4, r0
   d61b4:	d10a      	bne.n	d61cc <pinAvailable+0x24>
   d61b6:	4630      	mov	r0, r6
   d61b8:	f7fd ff71 	bl	d409e <__cxa_guard_acquire>
   d61bc:	b130      	cbz	r0, d61cc <pinAvailable+0x24>
   d61be:	4629      	mov	r1, r5
   d61c0:	4813      	ldr	r0, [pc, #76]	; (d6210 <pinAvailable+0x68>)
   d61c2:	f7fe ff95 	bl	d50f0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d61c6:	4630      	mov	r0, r6
   d61c8:	f7fd ff6e 	bl	d40a8 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d61cc:	4810      	ldr	r0, [pc, #64]	; (d6210 <pinAvailable+0x68>)
   d61ce:	f7fe ff99 	bl	d5104 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d61d2:	b128      	cbz	r0, d61e0 <pinAvailable+0x38>
   d61d4:	f1a4 030b 	sub.w	r3, r4, #11
   d61d8:	2b02      	cmp	r3, #2
   d61da:	d801      	bhi.n	d61e0 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d61dc:	2000      	movs	r0, #0
   d61de:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d61e0:	f000 f89e 	bl	d6320 <_Z19__fetch_global_Wirev>
   d61e4:	f7ff fe5d 	bl	d5ea2 <_ZN7TwoWire9isEnabledEv>
   d61e8:	b108      	cbz	r0, d61ee <pinAvailable+0x46>
   d61ea:	2c01      	cmp	r4, #1
   d61ec:	d9f6      	bls.n	d61dc <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d61ee:	f7ff fdbb 	bl	d5d68 <_Z22__fetch_global_Serial1v>
   d61f2:	f7ff fdb5 	bl	d5d60 <_ZN11USARTSerial9isEnabledEv>
   d61f6:	b118      	cbz	r0, d6200 <pinAvailable+0x58>
   d61f8:	f1a4 0309 	sub.w	r3, r4, #9
   d61fc:	2b01      	cmp	r3, #1
   d61fe:	d9ed      	bls.n	d61dc <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6200:	2c23      	cmp	r4, #35	; 0x23
   d6202:	bf8c      	ite	hi
   d6204:	2000      	movhi	r0, #0
   d6206:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6208:	bd70      	pop	{r4, r5, r6, pc}
   d620a:	bf00      	nop
   d620c:	2003e704 	.word	0x2003e704
   d6210:	2003e708 	.word	0x2003e708

000d6214 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6214:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6216:	b538      	push	{r3, r4, r5, lr}
   d6218:	4604      	mov	r4, r0
   d621a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d621c:	d80a      	bhi.n	d6234 <pinMode+0x20>
   d621e:	29ff      	cmp	r1, #255	; 0xff
   d6220:	d008      	beq.n	d6234 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6222:	f7ff ffc1 	bl	d61a8 <pinAvailable>
   d6226:	b128      	cbz	r0, d6234 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6228:	4629      	mov	r1, r5
   d622a:	4620      	mov	r0, r4
}
   d622c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6230:	f7fe bcac 	b.w	d4b8c <HAL_Pin_Mode>
   d6234:	bd38      	pop	{r3, r4, r5, pc}

000d6236 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6236:	b538      	push	{r3, r4, r5, lr}
   d6238:	4604      	mov	r4, r0
   d623a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d623c:	f7fe fcae 	bl	d4b9c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6240:	28ff      	cmp	r0, #255	; 0xff
   d6242:	d010      	beq.n	d6266 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6244:	2806      	cmp	r0, #6
   d6246:	d804      	bhi.n	d6252 <digitalWrite+0x1c>
   d6248:	234d      	movs	r3, #77	; 0x4d
   d624a:	fa23 f000 	lsr.w	r0, r3, r0
   d624e:	07c3      	lsls	r3, r0, #31
   d6250:	d409      	bmi.n	d6266 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6252:	4620      	mov	r0, r4
   d6254:	f7ff ffa8 	bl	d61a8 <pinAvailable>
   d6258:	b128      	cbz	r0, d6266 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d625a:	4629      	mov	r1, r5
   d625c:	4620      	mov	r0, r4
}
   d625e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6262:	f7fe bca3 	b.w	d4bac <HAL_GPIO_Write>
   d6266:	bd38      	pop	{r3, r4, r5, pc}

000d6268 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6268:	b510      	push	{r4, lr}
   d626a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d626c:	f7fe fc96 	bl	d4b9c <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d6270:	3804      	subs	r0, #4
   d6272:	b2c0      	uxtb	r0, r0
   d6274:	2801      	cmp	r0, #1
   d6276:	d908      	bls.n	d628a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6278:	4620      	mov	r0, r4
   d627a:	f7ff ff95 	bl	d61a8 <pinAvailable>
   d627e:	b120      	cbz	r0, d628a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6280:	4620      	mov	r0, r4
}
   d6282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6286:	f7fe bc99 	b.w	d4bbc <HAL_GPIO_Read>
}
   d628a:	2000      	movs	r0, #0
   d628c:	bd10      	pop	{r4, pc}
	...

000d6290 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d6290:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d6292:	4c07      	ldr	r4, [pc, #28]	; (d62b0 <_Z21__fetch_global_EEPROMv+0x20>)
   d6294:	6823      	ldr	r3, [r4, #0]
   d6296:	07db      	lsls	r3, r3, #31
   d6298:	d408      	bmi.n	d62ac <_Z21__fetch_global_EEPROMv+0x1c>
   d629a:	4620      	mov	r0, r4
   d629c:	f7fd feff 	bl	d409e <__cxa_guard_acquire>
   d62a0:	b120      	cbz	r0, d62ac <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d62a2:	f7fe fcbb 	bl	d4c1c <HAL_EEPROM_Init>
   d62a6:	4620      	mov	r0, r4
   d62a8:	f7fd fefe 	bl	d40a8 <__cxa_guard_release>
	return eeprom;
}
   d62ac:	4801      	ldr	r0, [pc, #4]	; (d62b4 <_Z21__fetch_global_EEPROMv+0x24>)
   d62ae:	bd10      	pop	{r4, pc}
   d62b0:	2003e714 	.word	0x2003e714
   d62b4:	2003e718 	.word	0x2003e718

000d62b8 <_Z17acquireWireBufferv>:
   d62b8:	b570      	push	{r4, r5, r6, lr}
   d62ba:	4604      	mov	r4, r0
   d62bc:	2514      	movs	r5, #20
   d62be:	462a      	mov	r2, r5
   d62c0:	4e09      	ldr	r6, [pc, #36]	; (d62e8 <_Z17acquireWireBufferv+0x30>)
   d62c2:	2100      	movs	r1, #0
   d62c4:	f000 fefb 	bl	d70be <memset>
   d62c8:	8025      	strh	r5, [r4, #0]
   d62ca:	2520      	movs	r5, #32
   d62cc:	4631      	mov	r1, r6
   d62ce:	60a5      	str	r5, [r4, #8]
   d62d0:	6125      	str	r5, [r4, #16]
   d62d2:	4628      	mov	r0, r5
   d62d4:	f000 f880 	bl	d63d8 <_ZnajRKSt9nothrow_t>
   d62d8:	4631      	mov	r1, r6
   d62da:	6060      	str	r0, [r4, #4]
   d62dc:	4628      	mov	r0, r5
   d62de:	f000 f87b 	bl	d63d8 <_ZnajRKSt9nothrow_t>
   d62e2:	60e0      	str	r0, [r4, #12]
   d62e4:	4620      	mov	r0, r4
   d62e6:	bd70      	pop	{r4, r5, r6, pc}
   d62e8:	000d75fc 	.word	0x000d75fc

000d62ec <_Z18acquireWire1Bufferv>:
	return defaultWireConfig();
}

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
   d62ec:	b570      	push	{r4, r5, r6, lr}
   d62ee:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d62f0:	2514      	movs	r5, #20
   d62f2:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d62f4:	4e09      	ldr	r6, [pc, #36]	; (d631c <_Z18acquireWire1Bufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d62f6:	2100      	movs	r1, #0
   d62f8:	f000 fee1 	bl	d70be <memset>
   d62fc:	8025      	strh	r5, [r4, #0]
   d62fe:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6300:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d6302:	60a5      	str	r5, [r4, #8]
   d6304:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6306:	4628      	mov	r0, r5
   d6308:	f000 f866 	bl	d63d8 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d630c:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d630e:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6310:	4628      	mov	r0, r5
   d6312:	f000 f861 	bl	d63d8 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d6316:	60e0      	str	r0, [r4, #12]

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
	return defaultWireConfig();
}
   d6318:	4620      	mov	r0, r4
   d631a:	bd70      	pop	{r4, r5, r6, pc}
   d631c:	000d75fc 	.word	0x000d75fc

000d6320 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6320:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6322:	4d0e      	ldr	r5, [pc, #56]	; (d635c <_Z19__fetch_global_Wirev+0x3c>)
   d6324:	6829      	ldr	r1, [r5, #0]
   d6326:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d632a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d632c:	d113      	bne.n	d6356 <_Z19__fetch_global_Wirev+0x36>
   d632e:	4628      	mov	r0, r5
   d6330:	f7fd feb5 	bl	d409e <__cxa_guard_acquire>
   d6334:	b178      	cbz	r0, d6356 <_Z19__fetch_global_Wirev+0x36>
   d6336:	a801      	add	r0, sp, #4
   d6338:	f7ff ffbe 	bl	d62b8 <_Z17acquireWireBufferv>
   d633c:	aa01      	add	r2, sp, #4
   d633e:	4621      	mov	r1, r4
   d6340:	4807      	ldr	r0, [pc, #28]	; (d6360 <_Z19__fetch_global_Wirev+0x40>)
   d6342:	f7ff fd63 	bl	d5e0c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d6346:	4628      	mov	r0, r5
   d6348:	f7fd feae 	bl	d40a8 <__cxa_guard_release>
   d634c:	4a05      	ldr	r2, [pc, #20]	; (d6364 <_Z19__fetch_global_Wirev+0x44>)
   d634e:	4906      	ldr	r1, [pc, #24]	; (d6368 <_Z19__fetch_global_Wirev+0x48>)
   d6350:	4803      	ldr	r0, [pc, #12]	; (d6360 <_Z19__fetch_global_Wirev+0x40>)
   d6352:	f000 f831 	bl	d63b8 <__aeabi_atexit>
	return wire;
}
   d6356:	4802      	ldr	r0, [pc, #8]	; (d6360 <_Z19__fetch_global_Wirev+0x40>)
   d6358:	b007      	add	sp, #28
   d635a:	bd30      	pop	{r4, r5, pc}
   d635c:	2003e71c 	.word	0x2003e71c
   d6360:	2003e734 	.word	0x2003e734
   d6364:	2003e31c 	.word	0x2003e31c
   d6368:	000d5db5 	.word	0x000d5db5

000d636c <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d636c:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d636e:	4c0e      	ldr	r4, [pc, #56]	; (d63a8 <_Z20__fetch_global_Wire1v+0x3c>)
   d6370:	6823      	ldr	r3, [r4, #0]
   d6372:	07db      	lsls	r3, r3, #31
	return wire;
}

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d6374:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d6376:	d413      	bmi.n	d63a0 <_Z20__fetch_global_Wire1v+0x34>
   d6378:	4620      	mov	r0, r4
   d637a:	f7fd fe90 	bl	d409e <__cxa_guard_acquire>
   d637e:	b178      	cbz	r0, d63a0 <_Z20__fetch_global_Wire1v+0x34>
   d6380:	a801      	add	r0, sp, #4
   d6382:	f7ff ffb3 	bl	d62ec <_Z18acquireWire1Bufferv>
   d6386:	aa01      	add	r2, sp, #4
   d6388:	2101      	movs	r1, #1
   d638a:	4808      	ldr	r0, [pc, #32]	; (d63ac <_Z20__fetch_global_Wire1v+0x40>)
   d638c:	f7ff fd3e 	bl	d5e0c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d6390:	4620      	mov	r0, r4
   d6392:	f7fd fe89 	bl	d40a8 <__cxa_guard_release>
   d6396:	4a06      	ldr	r2, [pc, #24]	; (d63b0 <_Z20__fetch_global_Wire1v+0x44>)
   d6398:	4906      	ldr	r1, [pc, #24]	; (d63b4 <_Z20__fetch_global_Wire1v+0x48>)
   d639a:	4804      	ldr	r0, [pc, #16]	; (d63ac <_Z20__fetch_global_Wire1v+0x40>)
   d639c:	f000 f80c 	bl	d63b8 <__aeabi_atexit>
	return wire;
}
   d63a0:	4802      	ldr	r0, [pc, #8]	; (d63ac <_Z20__fetch_global_Wire1v+0x40>)
   d63a2:	b006      	add	sp, #24
   d63a4:	bd10      	pop	{r4, pc}
   d63a6:	bf00      	nop
   d63a8:	2003e748 	.word	0x2003e748
   d63ac:	2003e720 	.word	0x2003e720
   d63b0:	2003e31c 	.word	0x2003e31c
   d63b4:	000d5db5 	.word	0x000d5db5

000d63b8 <__aeabi_atexit>:
   d63b8:	460b      	mov	r3, r1
   d63ba:	4601      	mov	r1, r0
   d63bc:	4618      	mov	r0, r3
   d63be:	f000 be65 	b.w	d708c <__cxa_atexit>
	...

000d63c4 <_ZSt15get_new_handlerv>:
   d63c4:	4b02      	ldr	r3, [pc, #8]	; (d63d0 <_ZSt15get_new_handlerv+0xc>)
   d63c6:	6818      	ldr	r0, [r3, #0]
   d63c8:	f3bf 8f5f 	dmb	sy
   d63cc:	4770      	bx	lr
   d63ce:	bf00      	nop
   d63d0:	2003e74c 	.word	0x2003e74c

000d63d4 <_ZdlPvj>:
   d63d4:	f7fd be5f 	b.w	d4096 <_ZdlPv>

000d63d8 <_ZnajRKSt9nothrow_t>:
   d63d8:	f000 b800 	b.w	d63dc <_ZnwjRKSt9nothrow_t>

000d63dc <_ZnwjRKSt9nothrow_t>:
   d63dc:	b510      	push	{r4, lr}
   d63de:	2800      	cmp	r0, #0
   d63e0:	bf14      	ite	ne
   d63e2:	4604      	movne	r4, r0
   d63e4:	2401      	moveq	r4, #1
   d63e6:	4620      	mov	r0, r4
   d63e8:	f7fe fe2c 	bl	d5044 <malloc>
   d63ec:	b920      	cbnz	r0, d63f8 <_ZnwjRKSt9nothrow_t+0x1c>
   d63ee:	f7ff ffe9 	bl	d63c4 <_ZSt15get_new_handlerv>
   d63f2:	b108      	cbz	r0, d63f8 <_ZnwjRKSt9nothrow_t+0x1c>
   d63f4:	4780      	blx	r0
   d63f6:	e7f6      	b.n	d63e6 <_ZnwjRKSt9nothrow_t+0xa>
   d63f8:	bd10      	pop	{r4, pc}
	...

000d63fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d63fc:	4b18      	ldr	r3, [pc, #96]	; (d6460 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d63fe:	681a      	ldr	r2, [r3, #0]
   d6400:	07d1      	lsls	r1, r2, #31
   d6402:	bf5c      	itt	pl
   d6404:	2201      	movpl	r2, #1
   d6406:	601a      	strpl	r2, [r3, #0]
   d6408:	4b16      	ldr	r3, [pc, #88]	; (d6464 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d640a:	681a      	ldr	r2, [r3, #0]
   d640c:	07d2      	lsls	r2, r2, #31
   d640e:	bf5c      	itt	pl
   d6410:	2201      	movpl	r2, #1
   d6412:	601a      	strpl	r2, [r3, #0]
   d6414:	4b14      	ldr	r3, [pc, #80]	; (d6468 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6416:	681a      	ldr	r2, [r3, #0]
   d6418:	07d0      	lsls	r0, r2, #31
   d641a:	bf5c      	itt	pl
   d641c:	2201      	movpl	r2, #1
   d641e:	601a      	strpl	r2, [r3, #0]
   d6420:	4b12      	ldr	r3, [pc, #72]	; (d646c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6422:	681a      	ldr	r2, [r3, #0]
   d6424:	07d1      	lsls	r1, r2, #31
   d6426:	bf5c      	itt	pl
   d6428:	2201      	movpl	r2, #1
   d642a:	601a      	strpl	r2, [r3, #0]
   d642c:	4b10      	ldr	r3, [pc, #64]	; (d6470 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d642e:	681a      	ldr	r2, [r3, #0]
   d6430:	07d2      	lsls	r2, r2, #31
   d6432:	bf5c      	itt	pl
   d6434:	2201      	movpl	r2, #1
   d6436:	601a      	strpl	r2, [r3, #0]
   d6438:	4b0e      	ldr	r3, [pc, #56]	; (d6474 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d643a:	681a      	ldr	r2, [r3, #0]
   d643c:	07d0      	lsls	r0, r2, #31
   d643e:	bf5c      	itt	pl
   d6440:	2201      	movpl	r2, #1
   d6442:	601a      	strpl	r2, [r3, #0]
   d6444:	4b0c      	ldr	r3, [pc, #48]	; (d6478 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6446:	681a      	ldr	r2, [r3, #0]
   d6448:	07d1      	lsls	r1, r2, #31
   d644a:	bf5c      	itt	pl
   d644c:	2201      	movpl	r2, #1
   d644e:	601a      	strpl	r2, [r3, #0]
   d6450:	4b0a      	ldr	r3, [pc, #40]	; (d647c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6452:	681a      	ldr	r2, [r3, #0]
   d6454:	07d2      	lsls	r2, r2, #31
   d6456:	bf5c      	itt	pl
   d6458:	2201      	movpl	r2, #1
   d645a:	601a      	strpl	r2, [r3, #0]
   d645c:	4770      	bx	lr
   d645e:	bf00      	nop
   d6460:	2003e76c 	.word	0x2003e76c
   d6464:	2003e768 	.word	0x2003e768
   d6468:	2003e764 	.word	0x2003e764
   d646c:	2003e760 	.word	0x2003e760
   d6470:	2003e75c 	.word	0x2003e75c
   d6474:	2003e758 	.word	0x2003e758
   d6478:	2003e754 	.word	0x2003e754
   d647c:	2003e750 	.word	0x2003e750

000d6480 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6480:	4b24      	ldr	r3, [pc, #144]	; (d6514 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6482:	681a      	ldr	r2, [r3, #0]
   d6484:	07d0      	lsls	r0, r2, #31
   d6486:	bf5c      	itt	pl
   d6488:	2201      	movpl	r2, #1
   d648a:	601a      	strpl	r2, [r3, #0]
   d648c:	4b22      	ldr	r3, [pc, #136]	; (d6518 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d648e:	681a      	ldr	r2, [r3, #0]
   d6490:	07d1      	lsls	r1, r2, #31
   d6492:	bf5c      	itt	pl
   d6494:	2201      	movpl	r2, #1
   d6496:	601a      	strpl	r2, [r3, #0]
   d6498:	4b20      	ldr	r3, [pc, #128]	; (d651c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d649a:	681a      	ldr	r2, [r3, #0]
   d649c:	07d2      	lsls	r2, r2, #31
   d649e:	bf5c      	itt	pl
   d64a0:	2201      	movpl	r2, #1
   d64a2:	601a      	strpl	r2, [r3, #0]
   d64a4:	4b1e      	ldr	r3, [pc, #120]	; (d6520 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d64a6:	681a      	ldr	r2, [r3, #0]
   d64a8:	07d0      	lsls	r0, r2, #31
   d64aa:	bf5c      	itt	pl
   d64ac:	2201      	movpl	r2, #1
   d64ae:	601a      	strpl	r2, [r3, #0]
   d64b0:	4b1c      	ldr	r3, [pc, #112]	; (d6524 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d64b2:	681a      	ldr	r2, [r3, #0]
   d64b4:	07d1      	lsls	r1, r2, #31
   d64b6:	bf5c      	itt	pl
   d64b8:	2201      	movpl	r2, #1
   d64ba:	601a      	strpl	r2, [r3, #0]
   d64bc:	4b1a      	ldr	r3, [pc, #104]	; (d6528 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d64be:	681a      	ldr	r2, [r3, #0]
   d64c0:	07d2      	lsls	r2, r2, #31
   d64c2:	bf5c      	itt	pl
   d64c4:	2201      	movpl	r2, #1
   d64c6:	601a      	strpl	r2, [r3, #0]
   d64c8:	4b18      	ldr	r3, [pc, #96]	; (d652c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d64ca:	681a      	ldr	r2, [r3, #0]
   d64cc:	07d0      	lsls	r0, r2, #31
   d64ce:	bf5c      	itt	pl
   d64d0:	2201      	movpl	r2, #1
   d64d2:	601a      	strpl	r2, [r3, #0]
   d64d4:	4b16      	ldr	r3, [pc, #88]	; (d6530 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d64d6:	681a      	ldr	r2, [r3, #0]
   d64d8:	07d1      	lsls	r1, r2, #31
   d64da:	bf5c      	itt	pl
   d64dc:	2201      	movpl	r2, #1
   d64de:	601a      	strpl	r2, [r3, #0]
   d64e0:	4b14      	ldr	r3, [pc, #80]	; (d6534 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d64e2:	681a      	ldr	r2, [r3, #0]
   d64e4:	07d2      	lsls	r2, r2, #31
   d64e6:	bf5c      	itt	pl
   d64e8:	2201      	movpl	r2, #1
   d64ea:	601a      	strpl	r2, [r3, #0]
   d64ec:	4b12      	ldr	r3, [pc, #72]	; (d6538 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d64ee:	681a      	ldr	r2, [r3, #0]
   d64f0:	07d0      	lsls	r0, r2, #31
   d64f2:	bf5c      	itt	pl
   d64f4:	2201      	movpl	r2, #1
   d64f6:	601a      	strpl	r2, [r3, #0]
   d64f8:	4b10      	ldr	r3, [pc, #64]	; (d653c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d64fa:	681a      	ldr	r2, [r3, #0]
   d64fc:	07d1      	lsls	r1, r2, #31
   d64fe:	bf5c      	itt	pl
   d6500:	2201      	movpl	r2, #1
   d6502:	601a      	strpl	r2, [r3, #0]
   d6504:	4b0e      	ldr	r3, [pc, #56]	; (d6540 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6506:	681a      	ldr	r2, [r3, #0]
   d6508:	07d2      	lsls	r2, r2, #31
   d650a:	bf5c      	itt	pl
   d650c:	2201      	movpl	r2, #1
   d650e:	601a      	strpl	r2, [r3, #0]
   d6510:	4770      	bx	lr
   d6512:	bf00      	nop
   d6514:	2003e79c 	.word	0x2003e79c
   d6518:	2003e798 	.word	0x2003e798
   d651c:	2003e794 	.word	0x2003e794
   d6520:	2003e790 	.word	0x2003e790
   d6524:	2003e78c 	.word	0x2003e78c
   d6528:	2003e788 	.word	0x2003e788
   d652c:	2003e784 	.word	0x2003e784
   d6530:	2003e780 	.word	0x2003e780
   d6534:	2003e77c 	.word	0x2003e77c
   d6538:	2003e778 	.word	0x2003e778
   d653c:	2003e774 	.word	0x2003e774
   d6540:	2003e770 	.word	0x2003e770

000d6544 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6544:	4b24      	ldr	r3, [pc, #144]	; (d65d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6546:	681a      	ldr	r2, [r3, #0]
   d6548:	07d0      	lsls	r0, r2, #31
   d654a:	bf5c      	itt	pl
   d654c:	2201      	movpl	r2, #1
   d654e:	601a      	strpl	r2, [r3, #0]
   d6550:	4b22      	ldr	r3, [pc, #136]	; (d65dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6552:	681a      	ldr	r2, [r3, #0]
   d6554:	07d1      	lsls	r1, r2, #31
   d6556:	bf5c      	itt	pl
   d6558:	2201      	movpl	r2, #1
   d655a:	601a      	strpl	r2, [r3, #0]
   d655c:	4b20      	ldr	r3, [pc, #128]	; (d65e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d655e:	681a      	ldr	r2, [r3, #0]
   d6560:	07d2      	lsls	r2, r2, #31
   d6562:	bf5c      	itt	pl
   d6564:	2201      	movpl	r2, #1
   d6566:	601a      	strpl	r2, [r3, #0]
   d6568:	4b1e      	ldr	r3, [pc, #120]	; (d65e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d656a:	681a      	ldr	r2, [r3, #0]
   d656c:	07d0      	lsls	r0, r2, #31
   d656e:	bf5c      	itt	pl
   d6570:	2201      	movpl	r2, #1
   d6572:	601a      	strpl	r2, [r3, #0]
   d6574:	4b1c      	ldr	r3, [pc, #112]	; (d65e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6576:	681a      	ldr	r2, [r3, #0]
   d6578:	07d1      	lsls	r1, r2, #31
   d657a:	bf5c      	itt	pl
   d657c:	2201      	movpl	r2, #1
   d657e:	601a      	strpl	r2, [r3, #0]
   d6580:	4b1a      	ldr	r3, [pc, #104]	; (d65ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6582:	681a      	ldr	r2, [r3, #0]
   d6584:	07d2      	lsls	r2, r2, #31
   d6586:	bf5c      	itt	pl
   d6588:	2201      	movpl	r2, #1
   d658a:	601a      	strpl	r2, [r3, #0]
   d658c:	4b18      	ldr	r3, [pc, #96]	; (d65f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d658e:	681a      	ldr	r2, [r3, #0]
   d6590:	07d0      	lsls	r0, r2, #31
   d6592:	bf5c      	itt	pl
   d6594:	2201      	movpl	r2, #1
   d6596:	601a      	strpl	r2, [r3, #0]
   d6598:	4b16      	ldr	r3, [pc, #88]	; (d65f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d659a:	681a      	ldr	r2, [r3, #0]
   d659c:	07d1      	lsls	r1, r2, #31
   d659e:	bf5c      	itt	pl
   d65a0:	2201      	movpl	r2, #1
   d65a2:	601a      	strpl	r2, [r3, #0]
   d65a4:	4b14      	ldr	r3, [pc, #80]	; (d65f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d65a6:	681a      	ldr	r2, [r3, #0]
   d65a8:	07d2      	lsls	r2, r2, #31
   d65aa:	bf5c      	itt	pl
   d65ac:	2201      	movpl	r2, #1
   d65ae:	601a      	strpl	r2, [r3, #0]
   d65b0:	4b12      	ldr	r3, [pc, #72]	; (d65fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d65b2:	681a      	ldr	r2, [r3, #0]
   d65b4:	07d0      	lsls	r0, r2, #31
   d65b6:	bf5c      	itt	pl
   d65b8:	2201      	movpl	r2, #1
   d65ba:	601a      	strpl	r2, [r3, #0]
   d65bc:	4b10      	ldr	r3, [pc, #64]	; (d6600 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d65be:	681a      	ldr	r2, [r3, #0]
   d65c0:	07d1      	lsls	r1, r2, #31
   d65c2:	bf5c      	itt	pl
   d65c4:	2201      	movpl	r2, #1
   d65c6:	601a      	strpl	r2, [r3, #0]
   d65c8:	4b0e      	ldr	r3, [pc, #56]	; (d6604 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d65ca:	681a      	ldr	r2, [r3, #0]
   d65cc:	07d2      	lsls	r2, r2, #31
   d65ce:	bf5c      	itt	pl
   d65d0:	2201      	movpl	r2, #1
   d65d2:	601a      	strpl	r2, [r3, #0]
   d65d4:	4770      	bx	lr
   d65d6:	bf00      	nop
   d65d8:	2003e7cc 	.word	0x2003e7cc
   d65dc:	2003e7c8 	.word	0x2003e7c8
   d65e0:	2003e7c4 	.word	0x2003e7c4
   d65e4:	2003e7c0 	.word	0x2003e7c0
   d65e8:	2003e7bc 	.word	0x2003e7bc
   d65ec:	2003e7b8 	.word	0x2003e7b8
   d65f0:	2003e7b4 	.word	0x2003e7b4
   d65f4:	2003e7b0 	.word	0x2003e7b0
   d65f8:	2003e7ac 	.word	0x2003e7ac
   d65fc:	2003e7a8 	.word	0x2003e7a8
   d6600:	2003e7a4 	.word	0x2003e7a4
   d6604:	2003e7a0 	.word	0x2003e7a0

000d6608 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6608:	4b18      	ldr	r3, [pc, #96]	; (d666c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d660a:	681a      	ldr	r2, [r3, #0]
   d660c:	07d1      	lsls	r1, r2, #31
   d660e:	bf5c      	itt	pl
   d6610:	2201      	movpl	r2, #1
   d6612:	601a      	strpl	r2, [r3, #0]
   d6614:	4b16      	ldr	r3, [pc, #88]	; (d6670 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6616:	681a      	ldr	r2, [r3, #0]
   d6618:	07d2      	lsls	r2, r2, #31
   d661a:	bf5c      	itt	pl
   d661c:	2201      	movpl	r2, #1
   d661e:	601a      	strpl	r2, [r3, #0]
   d6620:	4b14      	ldr	r3, [pc, #80]	; (d6674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6622:	681a      	ldr	r2, [r3, #0]
   d6624:	07d0      	lsls	r0, r2, #31
   d6626:	bf5c      	itt	pl
   d6628:	2201      	movpl	r2, #1
   d662a:	601a      	strpl	r2, [r3, #0]
   d662c:	4b12      	ldr	r3, [pc, #72]	; (d6678 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d662e:	681a      	ldr	r2, [r3, #0]
   d6630:	07d1      	lsls	r1, r2, #31
   d6632:	bf5c      	itt	pl
   d6634:	2201      	movpl	r2, #1
   d6636:	601a      	strpl	r2, [r3, #0]
   d6638:	4b10      	ldr	r3, [pc, #64]	; (d667c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d663a:	681a      	ldr	r2, [r3, #0]
   d663c:	07d2      	lsls	r2, r2, #31
   d663e:	bf5c      	itt	pl
   d6640:	2201      	movpl	r2, #1
   d6642:	601a      	strpl	r2, [r3, #0]
   d6644:	4b0e      	ldr	r3, [pc, #56]	; (d6680 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6646:	681a      	ldr	r2, [r3, #0]
   d6648:	07d0      	lsls	r0, r2, #31
   d664a:	bf5c      	itt	pl
   d664c:	2201      	movpl	r2, #1
   d664e:	601a      	strpl	r2, [r3, #0]
   d6650:	4b0c      	ldr	r3, [pc, #48]	; (d6684 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6652:	681a      	ldr	r2, [r3, #0]
   d6654:	07d1      	lsls	r1, r2, #31
   d6656:	bf5c      	itt	pl
   d6658:	2201      	movpl	r2, #1
   d665a:	601a      	strpl	r2, [r3, #0]
   d665c:	4b0a      	ldr	r3, [pc, #40]	; (d6688 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d665e:	681a      	ldr	r2, [r3, #0]
   d6660:	07d2      	lsls	r2, r2, #31
   d6662:	bf5c      	itt	pl
   d6664:	2201      	movpl	r2, #1
   d6666:	601a      	strpl	r2, [r3, #0]
   d6668:	4770      	bx	lr
   d666a:	bf00      	nop
   d666c:	2003e7ec 	.word	0x2003e7ec
   d6670:	2003e7e8 	.word	0x2003e7e8
   d6674:	2003e7e4 	.word	0x2003e7e4
   d6678:	2003e7e0 	.word	0x2003e7e0
   d667c:	2003e7dc 	.word	0x2003e7dc
   d6680:	2003e7d8 	.word	0x2003e7d8
   d6684:	2003e7d4 	.word	0x2003e7d4
   d6688:	2003e7d0 	.word	0x2003e7d0

000d668c <__aeabi_drsub>:
   d668c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6690:	e002      	b.n	d6698 <__adddf3>
   d6692:	bf00      	nop

000d6694 <__aeabi_dsub>:
   d6694:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6698 <__adddf3>:
   d6698:	b530      	push	{r4, r5, lr}
   d669a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d669e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d66a2:	ea94 0f05 	teq	r4, r5
   d66a6:	bf08      	it	eq
   d66a8:	ea90 0f02 	teqeq	r0, r2
   d66ac:	bf1f      	itttt	ne
   d66ae:	ea54 0c00 	orrsne.w	ip, r4, r0
   d66b2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d66b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d66ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d66be:	f000 80e2 	beq.w	d6886 <__adddf3+0x1ee>
   d66c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d66c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d66ca:	bfb8      	it	lt
   d66cc:	426d      	neglt	r5, r5
   d66ce:	dd0c      	ble.n	d66ea <__adddf3+0x52>
   d66d0:	442c      	add	r4, r5
   d66d2:	ea80 0202 	eor.w	r2, r0, r2
   d66d6:	ea81 0303 	eor.w	r3, r1, r3
   d66da:	ea82 0000 	eor.w	r0, r2, r0
   d66de:	ea83 0101 	eor.w	r1, r3, r1
   d66e2:	ea80 0202 	eor.w	r2, r0, r2
   d66e6:	ea81 0303 	eor.w	r3, r1, r3
   d66ea:	2d36      	cmp	r5, #54	; 0x36
   d66ec:	bf88      	it	hi
   d66ee:	bd30      	pophi	{r4, r5, pc}
   d66f0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d66f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d66f8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d66fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6700:	d002      	beq.n	d6708 <__adddf3+0x70>
   d6702:	4240      	negs	r0, r0
   d6704:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6708:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d670c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6710:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6714:	d002      	beq.n	d671c <__adddf3+0x84>
   d6716:	4252      	negs	r2, r2
   d6718:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d671c:	ea94 0f05 	teq	r4, r5
   d6720:	f000 80a7 	beq.w	d6872 <__adddf3+0x1da>
   d6724:	f1a4 0401 	sub.w	r4, r4, #1
   d6728:	f1d5 0e20 	rsbs	lr, r5, #32
   d672c:	db0d      	blt.n	d674a <__adddf3+0xb2>
   d672e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6732:	fa22 f205 	lsr.w	r2, r2, r5
   d6736:	1880      	adds	r0, r0, r2
   d6738:	f141 0100 	adc.w	r1, r1, #0
   d673c:	fa03 f20e 	lsl.w	r2, r3, lr
   d6740:	1880      	adds	r0, r0, r2
   d6742:	fa43 f305 	asr.w	r3, r3, r5
   d6746:	4159      	adcs	r1, r3
   d6748:	e00e      	b.n	d6768 <__adddf3+0xd0>
   d674a:	f1a5 0520 	sub.w	r5, r5, #32
   d674e:	f10e 0e20 	add.w	lr, lr, #32
   d6752:	2a01      	cmp	r2, #1
   d6754:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6758:	bf28      	it	cs
   d675a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d675e:	fa43 f305 	asr.w	r3, r3, r5
   d6762:	18c0      	adds	r0, r0, r3
   d6764:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6768:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d676c:	d507      	bpl.n	d677e <__adddf3+0xe6>
   d676e:	f04f 0e00 	mov.w	lr, #0
   d6772:	f1dc 0c00 	rsbs	ip, ip, #0
   d6776:	eb7e 0000 	sbcs.w	r0, lr, r0
   d677a:	eb6e 0101 	sbc.w	r1, lr, r1
   d677e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6782:	d31b      	bcc.n	d67bc <__adddf3+0x124>
   d6784:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6788:	d30c      	bcc.n	d67a4 <__adddf3+0x10c>
   d678a:	0849      	lsrs	r1, r1, #1
   d678c:	ea5f 0030 	movs.w	r0, r0, rrx
   d6790:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6794:	f104 0401 	add.w	r4, r4, #1
   d6798:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d679c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d67a0:	f080 809a 	bcs.w	d68d8 <__adddf3+0x240>
   d67a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d67a8:	bf08      	it	eq
   d67aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d67ae:	f150 0000 	adcs.w	r0, r0, #0
   d67b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d67b6:	ea41 0105 	orr.w	r1, r1, r5
   d67ba:	bd30      	pop	{r4, r5, pc}
   d67bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d67c0:	4140      	adcs	r0, r0
   d67c2:	eb41 0101 	adc.w	r1, r1, r1
   d67c6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d67ca:	f1a4 0401 	sub.w	r4, r4, #1
   d67ce:	d1e9      	bne.n	d67a4 <__adddf3+0x10c>
   d67d0:	f091 0f00 	teq	r1, #0
   d67d4:	bf04      	itt	eq
   d67d6:	4601      	moveq	r1, r0
   d67d8:	2000      	moveq	r0, #0
   d67da:	fab1 f381 	clz	r3, r1
   d67de:	bf08      	it	eq
   d67e0:	3320      	addeq	r3, #32
   d67e2:	f1a3 030b 	sub.w	r3, r3, #11
   d67e6:	f1b3 0220 	subs.w	r2, r3, #32
   d67ea:	da0c      	bge.n	d6806 <__adddf3+0x16e>
   d67ec:	320c      	adds	r2, #12
   d67ee:	dd08      	ble.n	d6802 <__adddf3+0x16a>
   d67f0:	f102 0c14 	add.w	ip, r2, #20
   d67f4:	f1c2 020c 	rsb	r2, r2, #12
   d67f8:	fa01 f00c 	lsl.w	r0, r1, ip
   d67fc:	fa21 f102 	lsr.w	r1, r1, r2
   d6800:	e00c      	b.n	d681c <__adddf3+0x184>
   d6802:	f102 0214 	add.w	r2, r2, #20
   d6806:	bfd8      	it	le
   d6808:	f1c2 0c20 	rsble	ip, r2, #32
   d680c:	fa01 f102 	lsl.w	r1, r1, r2
   d6810:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6814:	bfdc      	itt	le
   d6816:	ea41 010c 	orrle.w	r1, r1, ip
   d681a:	4090      	lslle	r0, r2
   d681c:	1ae4      	subs	r4, r4, r3
   d681e:	bfa2      	ittt	ge
   d6820:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6824:	4329      	orrge	r1, r5
   d6826:	bd30      	popge	{r4, r5, pc}
   d6828:	ea6f 0404 	mvn.w	r4, r4
   d682c:	3c1f      	subs	r4, #31
   d682e:	da1c      	bge.n	d686a <__adddf3+0x1d2>
   d6830:	340c      	adds	r4, #12
   d6832:	dc0e      	bgt.n	d6852 <__adddf3+0x1ba>
   d6834:	f104 0414 	add.w	r4, r4, #20
   d6838:	f1c4 0220 	rsb	r2, r4, #32
   d683c:	fa20 f004 	lsr.w	r0, r0, r4
   d6840:	fa01 f302 	lsl.w	r3, r1, r2
   d6844:	ea40 0003 	orr.w	r0, r0, r3
   d6848:	fa21 f304 	lsr.w	r3, r1, r4
   d684c:	ea45 0103 	orr.w	r1, r5, r3
   d6850:	bd30      	pop	{r4, r5, pc}
   d6852:	f1c4 040c 	rsb	r4, r4, #12
   d6856:	f1c4 0220 	rsb	r2, r4, #32
   d685a:	fa20 f002 	lsr.w	r0, r0, r2
   d685e:	fa01 f304 	lsl.w	r3, r1, r4
   d6862:	ea40 0003 	orr.w	r0, r0, r3
   d6866:	4629      	mov	r1, r5
   d6868:	bd30      	pop	{r4, r5, pc}
   d686a:	fa21 f004 	lsr.w	r0, r1, r4
   d686e:	4629      	mov	r1, r5
   d6870:	bd30      	pop	{r4, r5, pc}
   d6872:	f094 0f00 	teq	r4, #0
   d6876:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d687a:	bf06      	itte	eq
   d687c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6880:	3401      	addeq	r4, #1
   d6882:	3d01      	subne	r5, #1
   d6884:	e74e      	b.n	d6724 <__adddf3+0x8c>
   d6886:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d688a:	bf18      	it	ne
   d688c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6890:	d029      	beq.n	d68e6 <__adddf3+0x24e>
   d6892:	ea94 0f05 	teq	r4, r5
   d6896:	bf08      	it	eq
   d6898:	ea90 0f02 	teqeq	r0, r2
   d689c:	d005      	beq.n	d68aa <__adddf3+0x212>
   d689e:	ea54 0c00 	orrs.w	ip, r4, r0
   d68a2:	bf04      	itt	eq
   d68a4:	4619      	moveq	r1, r3
   d68a6:	4610      	moveq	r0, r2
   d68a8:	bd30      	pop	{r4, r5, pc}
   d68aa:	ea91 0f03 	teq	r1, r3
   d68ae:	bf1e      	ittt	ne
   d68b0:	2100      	movne	r1, #0
   d68b2:	2000      	movne	r0, #0
   d68b4:	bd30      	popne	{r4, r5, pc}
   d68b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d68ba:	d105      	bne.n	d68c8 <__adddf3+0x230>
   d68bc:	0040      	lsls	r0, r0, #1
   d68be:	4149      	adcs	r1, r1
   d68c0:	bf28      	it	cs
   d68c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d68c6:	bd30      	pop	{r4, r5, pc}
   d68c8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d68cc:	bf3c      	itt	cc
   d68ce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d68d2:	bd30      	popcc	{r4, r5, pc}
   d68d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d68d8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d68dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d68e0:	f04f 0000 	mov.w	r0, #0
   d68e4:	bd30      	pop	{r4, r5, pc}
   d68e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d68ea:	bf1a      	itte	ne
   d68ec:	4619      	movne	r1, r3
   d68ee:	4610      	movne	r0, r2
   d68f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d68f4:	bf1c      	itt	ne
   d68f6:	460b      	movne	r3, r1
   d68f8:	4602      	movne	r2, r0
   d68fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d68fe:	bf06      	itte	eq
   d6900:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6904:	ea91 0f03 	teqeq	r1, r3
   d6908:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d690c:	bd30      	pop	{r4, r5, pc}
   d690e:	bf00      	nop

000d6910 <__aeabi_ui2d>:
   d6910:	f090 0f00 	teq	r0, #0
   d6914:	bf04      	itt	eq
   d6916:	2100      	moveq	r1, #0
   d6918:	4770      	bxeq	lr
   d691a:	b530      	push	{r4, r5, lr}
   d691c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6920:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6924:	f04f 0500 	mov.w	r5, #0
   d6928:	f04f 0100 	mov.w	r1, #0
   d692c:	e750      	b.n	d67d0 <__adddf3+0x138>
   d692e:	bf00      	nop

000d6930 <__aeabi_i2d>:
   d6930:	f090 0f00 	teq	r0, #0
   d6934:	bf04      	itt	eq
   d6936:	2100      	moveq	r1, #0
   d6938:	4770      	bxeq	lr
   d693a:	b530      	push	{r4, r5, lr}
   d693c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6940:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6944:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6948:	bf48      	it	mi
   d694a:	4240      	negmi	r0, r0
   d694c:	f04f 0100 	mov.w	r1, #0
   d6950:	e73e      	b.n	d67d0 <__adddf3+0x138>
   d6952:	bf00      	nop

000d6954 <__aeabi_f2d>:
   d6954:	0042      	lsls	r2, r0, #1
   d6956:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d695a:	ea4f 0131 	mov.w	r1, r1, rrx
   d695e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6962:	bf1f      	itttt	ne
   d6964:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6968:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d696c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6970:	4770      	bxne	lr
   d6972:	f092 0f00 	teq	r2, #0
   d6976:	bf14      	ite	ne
   d6978:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d697c:	4770      	bxeq	lr
   d697e:	b530      	push	{r4, r5, lr}
   d6980:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6984:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6988:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d698c:	e720      	b.n	d67d0 <__adddf3+0x138>
   d698e:	bf00      	nop

000d6990 <__aeabi_ul2d>:
   d6990:	ea50 0201 	orrs.w	r2, r0, r1
   d6994:	bf08      	it	eq
   d6996:	4770      	bxeq	lr
   d6998:	b530      	push	{r4, r5, lr}
   d699a:	f04f 0500 	mov.w	r5, #0
   d699e:	e00a      	b.n	d69b6 <__aeabi_l2d+0x16>

000d69a0 <__aeabi_l2d>:
   d69a0:	ea50 0201 	orrs.w	r2, r0, r1
   d69a4:	bf08      	it	eq
   d69a6:	4770      	bxeq	lr
   d69a8:	b530      	push	{r4, r5, lr}
   d69aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d69ae:	d502      	bpl.n	d69b6 <__aeabi_l2d+0x16>
   d69b0:	4240      	negs	r0, r0
   d69b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d69b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d69ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d69be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d69c2:	f43f aedc 	beq.w	d677e <__adddf3+0xe6>
   d69c6:	f04f 0203 	mov.w	r2, #3
   d69ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d69ce:	bf18      	it	ne
   d69d0:	3203      	addne	r2, #3
   d69d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d69d6:	bf18      	it	ne
   d69d8:	3203      	addne	r2, #3
   d69da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d69de:	f1c2 0320 	rsb	r3, r2, #32
   d69e2:	fa00 fc03 	lsl.w	ip, r0, r3
   d69e6:	fa20 f002 	lsr.w	r0, r0, r2
   d69ea:	fa01 fe03 	lsl.w	lr, r1, r3
   d69ee:	ea40 000e 	orr.w	r0, r0, lr
   d69f2:	fa21 f102 	lsr.w	r1, r1, r2
   d69f6:	4414      	add	r4, r2
   d69f8:	e6c1      	b.n	d677e <__adddf3+0xe6>
   d69fa:	bf00      	nop

000d69fc <__aeabi_dmul>:
   d69fc:	b570      	push	{r4, r5, r6, lr}
   d69fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6a02:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6a06:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6a0a:	bf1d      	ittte	ne
   d6a0c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6a10:	ea94 0f0c 	teqne	r4, ip
   d6a14:	ea95 0f0c 	teqne	r5, ip
   d6a18:	f000 f8de 	bleq	d6bd8 <__aeabi_dmul+0x1dc>
   d6a1c:	442c      	add	r4, r5
   d6a1e:	ea81 0603 	eor.w	r6, r1, r3
   d6a22:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6a26:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6a2a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6a2e:	bf18      	it	ne
   d6a30:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6a34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6a38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6a3c:	d038      	beq.n	d6ab0 <__aeabi_dmul+0xb4>
   d6a3e:	fba0 ce02 	umull	ip, lr, r0, r2
   d6a42:	f04f 0500 	mov.w	r5, #0
   d6a46:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6a4a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6a4e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6a52:	f04f 0600 	mov.w	r6, #0
   d6a56:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6a5a:	f09c 0f00 	teq	ip, #0
   d6a5e:	bf18      	it	ne
   d6a60:	f04e 0e01 	orrne.w	lr, lr, #1
   d6a64:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6a68:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6a6c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6a70:	d204      	bcs.n	d6a7c <__aeabi_dmul+0x80>
   d6a72:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6a76:	416d      	adcs	r5, r5
   d6a78:	eb46 0606 	adc.w	r6, r6, r6
   d6a7c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6a80:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6a84:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6a88:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6a8c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6a90:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6a94:	bf88      	it	hi
   d6a96:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6a9a:	d81e      	bhi.n	d6ada <__aeabi_dmul+0xde>
   d6a9c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6aa0:	bf08      	it	eq
   d6aa2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6aa6:	f150 0000 	adcs.w	r0, r0, #0
   d6aaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6aae:	bd70      	pop	{r4, r5, r6, pc}
   d6ab0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6ab4:	ea46 0101 	orr.w	r1, r6, r1
   d6ab8:	ea40 0002 	orr.w	r0, r0, r2
   d6abc:	ea81 0103 	eor.w	r1, r1, r3
   d6ac0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6ac4:	bfc2      	ittt	gt
   d6ac6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6aca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6ace:	bd70      	popgt	{r4, r5, r6, pc}
   d6ad0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6ad4:	f04f 0e00 	mov.w	lr, #0
   d6ad8:	3c01      	subs	r4, #1
   d6ada:	f300 80ab 	bgt.w	d6c34 <__aeabi_dmul+0x238>
   d6ade:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6ae2:	bfde      	ittt	le
   d6ae4:	2000      	movle	r0, #0
   d6ae6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6aea:	bd70      	pople	{r4, r5, r6, pc}
   d6aec:	f1c4 0400 	rsb	r4, r4, #0
   d6af0:	3c20      	subs	r4, #32
   d6af2:	da35      	bge.n	d6b60 <__aeabi_dmul+0x164>
   d6af4:	340c      	adds	r4, #12
   d6af6:	dc1b      	bgt.n	d6b30 <__aeabi_dmul+0x134>
   d6af8:	f104 0414 	add.w	r4, r4, #20
   d6afc:	f1c4 0520 	rsb	r5, r4, #32
   d6b00:	fa00 f305 	lsl.w	r3, r0, r5
   d6b04:	fa20 f004 	lsr.w	r0, r0, r4
   d6b08:	fa01 f205 	lsl.w	r2, r1, r5
   d6b0c:	ea40 0002 	orr.w	r0, r0, r2
   d6b10:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6b14:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6b18:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6b1c:	fa21 f604 	lsr.w	r6, r1, r4
   d6b20:	eb42 0106 	adc.w	r1, r2, r6
   d6b24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6b28:	bf08      	it	eq
   d6b2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6b2e:	bd70      	pop	{r4, r5, r6, pc}
   d6b30:	f1c4 040c 	rsb	r4, r4, #12
   d6b34:	f1c4 0520 	rsb	r5, r4, #32
   d6b38:	fa00 f304 	lsl.w	r3, r0, r4
   d6b3c:	fa20 f005 	lsr.w	r0, r0, r5
   d6b40:	fa01 f204 	lsl.w	r2, r1, r4
   d6b44:	ea40 0002 	orr.w	r0, r0, r2
   d6b48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6b4c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6b50:	f141 0100 	adc.w	r1, r1, #0
   d6b54:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6b58:	bf08      	it	eq
   d6b5a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6b5e:	bd70      	pop	{r4, r5, r6, pc}
   d6b60:	f1c4 0520 	rsb	r5, r4, #32
   d6b64:	fa00 f205 	lsl.w	r2, r0, r5
   d6b68:	ea4e 0e02 	orr.w	lr, lr, r2
   d6b6c:	fa20 f304 	lsr.w	r3, r0, r4
   d6b70:	fa01 f205 	lsl.w	r2, r1, r5
   d6b74:	ea43 0302 	orr.w	r3, r3, r2
   d6b78:	fa21 f004 	lsr.w	r0, r1, r4
   d6b7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6b80:	fa21 f204 	lsr.w	r2, r1, r4
   d6b84:	ea20 0002 	bic.w	r0, r0, r2
   d6b88:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6b8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6b90:	bf08      	it	eq
   d6b92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6b96:	bd70      	pop	{r4, r5, r6, pc}
   d6b98:	f094 0f00 	teq	r4, #0
   d6b9c:	d10f      	bne.n	d6bbe <__aeabi_dmul+0x1c2>
   d6b9e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6ba2:	0040      	lsls	r0, r0, #1
   d6ba4:	eb41 0101 	adc.w	r1, r1, r1
   d6ba8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6bac:	bf08      	it	eq
   d6bae:	3c01      	subeq	r4, #1
   d6bb0:	d0f7      	beq.n	d6ba2 <__aeabi_dmul+0x1a6>
   d6bb2:	ea41 0106 	orr.w	r1, r1, r6
   d6bb6:	f095 0f00 	teq	r5, #0
   d6bba:	bf18      	it	ne
   d6bbc:	4770      	bxne	lr
   d6bbe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6bc2:	0052      	lsls	r2, r2, #1
   d6bc4:	eb43 0303 	adc.w	r3, r3, r3
   d6bc8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6bcc:	bf08      	it	eq
   d6bce:	3d01      	subeq	r5, #1
   d6bd0:	d0f7      	beq.n	d6bc2 <__aeabi_dmul+0x1c6>
   d6bd2:	ea43 0306 	orr.w	r3, r3, r6
   d6bd6:	4770      	bx	lr
   d6bd8:	ea94 0f0c 	teq	r4, ip
   d6bdc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6be0:	bf18      	it	ne
   d6be2:	ea95 0f0c 	teqne	r5, ip
   d6be6:	d00c      	beq.n	d6c02 <__aeabi_dmul+0x206>
   d6be8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6bec:	bf18      	it	ne
   d6bee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6bf2:	d1d1      	bne.n	d6b98 <__aeabi_dmul+0x19c>
   d6bf4:	ea81 0103 	eor.w	r1, r1, r3
   d6bf8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6bfc:	f04f 0000 	mov.w	r0, #0
   d6c00:	bd70      	pop	{r4, r5, r6, pc}
   d6c02:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6c06:	bf06      	itte	eq
   d6c08:	4610      	moveq	r0, r2
   d6c0a:	4619      	moveq	r1, r3
   d6c0c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6c10:	d019      	beq.n	d6c46 <__aeabi_dmul+0x24a>
   d6c12:	ea94 0f0c 	teq	r4, ip
   d6c16:	d102      	bne.n	d6c1e <__aeabi_dmul+0x222>
   d6c18:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6c1c:	d113      	bne.n	d6c46 <__aeabi_dmul+0x24a>
   d6c1e:	ea95 0f0c 	teq	r5, ip
   d6c22:	d105      	bne.n	d6c30 <__aeabi_dmul+0x234>
   d6c24:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6c28:	bf1c      	itt	ne
   d6c2a:	4610      	movne	r0, r2
   d6c2c:	4619      	movne	r1, r3
   d6c2e:	d10a      	bne.n	d6c46 <__aeabi_dmul+0x24a>
   d6c30:	ea81 0103 	eor.w	r1, r1, r3
   d6c34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6c38:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6c3c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6c40:	f04f 0000 	mov.w	r0, #0
   d6c44:	bd70      	pop	{r4, r5, r6, pc}
   d6c46:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6c4a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6c4e:	bd70      	pop	{r4, r5, r6, pc}

000d6c50 <__aeabi_ddiv>:
   d6c50:	b570      	push	{r4, r5, r6, lr}
   d6c52:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6c56:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6c5a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6c5e:	bf1d      	ittte	ne
   d6c60:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6c64:	ea94 0f0c 	teqne	r4, ip
   d6c68:	ea95 0f0c 	teqne	r5, ip
   d6c6c:	f000 f8a7 	bleq	d6dbe <__aeabi_ddiv+0x16e>
   d6c70:	eba4 0405 	sub.w	r4, r4, r5
   d6c74:	ea81 0e03 	eor.w	lr, r1, r3
   d6c78:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6c7c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6c80:	f000 8088 	beq.w	d6d94 <__aeabi_ddiv+0x144>
   d6c84:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6c88:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6c8c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6c90:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6c94:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6c98:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6c9c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6ca0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6ca4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6ca8:	429d      	cmp	r5, r3
   d6caa:	bf08      	it	eq
   d6cac:	4296      	cmpeq	r6, r2
   d6cae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6cb2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6cb6:	d202      	bcs.n	d6cbe <__aeabi_ddiv+0x6e>
   d6cb8:	085b      	lsrs	r3, r3, #1
   d6cba:	ea4f 0232 	mov.w	r2, r2, rrx
   d6cbe:	1ab6      	subs	r6, r6, r2
   d6cc0:	eb65 0503 	sbc.w	r5, r5, r3
   d6cc4:	085b      	lsrs	r3, r3, #1
   d6cc6:	ea4f 0232 	mov.w	r2, r2, rrx
   d6cca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6cce:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6cd2:	ebb6 0e02 	subs.w	lr, r6, r2
   d6cd6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6cda:	bf22      	ittt	cs
   d6cdc:	1ab6      	subcs	r6, r6, r2
   d6cde:	4675      	movcs	r5, lr
   d6ce0:	ea40 000c 	orrcs.w	r0, r0, ip
   d6ce4:	085b      	lsrs	r3, r3, #1
   d6ce6:	ea4f 0232 	mov.w	r2, r2, rrx
   d6cea:	ebb6 0e02 	subs.w	lr, r6, r2
   d6cee:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6cf2:	bf22      	ittt	cs
   d6cf4:	1ab6      	subcs	r6, r6, r2
   d6cf6:	4675      	movcs	r5, lr
   d6cf8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6cfc:	085b      	lsrs	r3, r3, #1
   d6cfe:	ea4f 0232 	mov.w	r2, r2, rrx
   d6d02:	ebb6 0e02 	subs.w	lr, r6, r2
   d6d06:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6d0a:	bf22      	ittt	cs
   d6d0c:	1ab6      	subcs	r6, r6, r2
   d6d0e:	4675      	movcs	r5, lr
   d6d10:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6d14:	085b      	lsrs	r3, r3, #1
   d6d16:	ea4f 0232 	mov.w	r2, r2, rrx
   d6d1a:	ebb6 0e02 	subs.w	lr, r6, r2
   d6d1e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6d22:	bf22      	ittt	cs
   d6d24:	1ab6      	subcs	r6, r6, r2
   d6d26:	4675      	movcs	r5, lr
   d6d28:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6d2c:	ea55 0e06 	orrs.w	lr, r5, r6
   d6d30:	d018      	beq.n	d6d64 <__aeabi_ddiv+0x114>
   d6d32:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6d36:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6d3a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6d3e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6d42:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6d46:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6d4a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6d4e:	d1c0      	bne.n	d6cd2 <__aeabi_ddiv+0x82>
   d6d50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6d54:	d10b      	bne.n	d6d6e <__aeabi_ddiv+0x11e>
   d6d56:	ea41 0100 	orr.w	r1, r1, r0
   d6d5a:	f04f 0000 	mov.w	r0, #0
   d6d5e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6d62:	e7b6      	b.n	d6cd2 <__aeabi_ddiv+0x82>
   d6d64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6d68:	bf04      	itt	eq
   d6d6a:	4301      	orreq	r1, r0
   d6d6c:	2000      	moveq	r0, #0
   d6d6e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6d72:	bf88      	it	hi
   d6d74:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6d78:	f63f aeaf 	bhi.w	d6ada <__aeabi_dmul+0xde>
   d6d7c:	ebb5 0c03 	subs.w	ip, r5, r3
   d6d80:	bf04      	itt	eq
   d6d82:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6d86:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6d8a:	f150 0000 	adcs.w	r0, r0, #0
   d6d8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6d92:	bd70      	pop	{r4, r5, r6, pc}
   d6d94:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6d98:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6d9c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6da0:	bfc2      	ittt	gt
   d6da2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6da6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6daa:	bd70      	popgt	{r4, r5, r6, pc}
   d6dac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6db0:	f04f 0e00 	mov.w	lr, #0
   d6db4:	3c01      	subs	r4, #1
   d6db6:	e690      	b.n	d6ada <__aeabi_dmul+0xde>
   d6db8:	ea45 0e06 	orr.w	lr, r5, r6
   d6dbc:	e68d      	b.n	d6ada <__aeabi_dmul+0xde>
   d6dbe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6dc2:	ea94 0f0c 	teq	r4, ip
   d6dc6:	bf08      	it	eq
   d6dc8:	ea95 0f0c 	teqeq	r5, ip
   d6dcc:	f43f af3b 	beq.w	d6c46 <__aeabi_dmul+0x24a>
   d6dd0:	ea94 0f0c 	teq	r4, ip
   d6dd4:	d10a      	bne.n	d6dec <__aeabi_ddiv+0x19c>
   d6dd6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6dda:	f47f af34 	bne.w	d6c46 <__aeabi_dmul+0x24a>
   d6dde:	ea95 0f0c 	teq	r5, ip
   d6de2:	f47f af25 	bne.w	d6c30 <__aeabi_dmul+0x234>
   d6de6:	4610      	mov	r0, r2
   d6de8:	4619      	mov	r1, r3
   d6dea:	e72c      	b.n	d6c46 <__aeabi_dmul+0x24a>
   d6dec:	ea95 0f0c 	teq	r5, ip
   d6df0:	d106      	bne.n	d6e00 <__aeabi_ddiv+0x1b0>
   d6df2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6df6:	f43f aefd 	beq.w	d6bf4 <__aeabi_dmul+0x1f8>
   d6dfa:	4610      	mov	r0, r2
   d6dfc:	4619      	mov	r1, r3
   d6dfe:	e722      	b.n	d6c46 <__aeabi_dmul+0x24a>
   d6e00:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6e04:	bf18      	it	ne
   d6e06:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6e0a:	f47f aec5 	bne.w	d6b98 <__aeabi_dmul+0x19c>
   d6e0e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6e12:	f47f af0d 	bne.w	d6c30 <__aeabi_dmul+0x234>
   d6e16:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6e1a:	f47f aeeb 	bne.w	d6bf4 <__aeabi_dmul+0x1f8>
   d6e1e:	e712      	b.n	d6c46 <__aeabi_dmul+0x24a>

000d6e20 <__gedf2>:
   d6e20:	f04f 3cff 	mov.w	ip, #4294967295
   d6e24:	e006      	b.n	d6e34 <__cmpdf2+0x4>
   d6e26:	bf00      	nop

000d6e28 <__ledf2>:
   d6e28:	f04f 0c01 	mov.w	ip, #1
   d6e2c:	e002      	b.n	d6e34 <__cmpdf2+0x4>
   d6e2e:	bf00      	nop

000d6e30 <__cmpdf2>:
   d6e30:	f04f 0c01 	mov.w	ip, #1
   d6e34:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6e38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6e3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6e40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6e44:	bf18      	it	ne
   d6e46:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6e4a:	d01b      	beq.n	d6e84 <__cmpdf2+0x54>
   d6e4c:	b001      	add	sp, #4
   d6e4e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6e52:	bf0c      	ite	eq
   d6e54:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6e58:	ea91 0f03 	teqne	r1, r3
   d6e5c:	bf02      	ittt	eq
   d6e5e:	ea90 0f02 	teqeq	r0, r2
   d6e62:	2000      	moveq	r0, #0
   d6e64:	4770      	bxeq	lr
   d6e66:	f110 0f00 	cmn.w	r0, #0
   d6e6a:	ea91 0f03 	teq	r1, r3
   d6e6e:	bf58      	it	pl
   d6e70:	4299      	cmppl	r1, r3
   d6e72:	bf08      	it	eq
   d6e74:	4290      	cmpeq	r0, r2
   d6e76:	bf2c      	ite	cs
   d6e78:	17d8      	asrcs	r0, r3, #31
   d6e7a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6e7e:	f040 0001 	orr.w	r0, r0, #1
   d6e82:	4770      	bx	lr
   d6e84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6e88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6e8c:	d102      	bne.n	d6e94 <__cmpdf2+0x64>
   d6e8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6e92:	d107      	bne.n	d6ea4 <__cmpdf2+0x74>
   d6e94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6e98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6e9c:	d1d6      	bne.n	d6e4c <__cmpdf2+0x1c>
   d6e9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6ea2:	d0d3      	beq.n	d6e4c <__cmpdf2+0x1c>
   d6ea4:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6ea8:	4770      	bx	lr
   d6eaa:	bf00      	nop

000d6eac <__aeabi_cdrcmple>:
   d6eac:	4684      	mov	ip, r0
   d6eae:	4610      	mov	r0, r2
   d6eb0:	4662      	mov	r2, ip
   d6eb2:	468c      	mov	ip, r1
   d6eb4:	4619      	mov	r1, r3
   d6eb6:	4663      	mov	r3, ip
   d6eb8:	e000      	b.n	d6ebc <__aeabi_cdcmpeq>
   d6eba:	bf00      	nop

000d6ebc <__aeabi_cdcmpeq>:
   d6ebc:	b501      	push	{r0, lr}
   d6ebe:	f7ff ffb7 	bl	d6e30 <__cmpdf2>
   d6ec2:	2800      	cmp	r0, #0
   d6ec4:	bf48      	it	mi
   d6ec6:	f110 0f00 	cmnmi.w	r0, #0
   d6eca:	bd01      	pop	{r0, pc}

000d6ecc <__aeabi_dcmpeq>:
   d6ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6ed0:	f7ff fff4 	bl	d6ebc <__aeabi_cdcmpeq>
   d6ed4:	bf0c      	ite	eq
   d6ed6:	2001      	moveq	r0, #1
   d6ed8:	2000      	movne	r0, #0
   d6eda:	f85d fb08 	ldr.w	pc, [sp], #8
   d6ede:	bf00      	nop

000d6ee0 <__aeabi_dcmplt>:
   d6ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6ee4:	f7ff ffea 	bl	d6ebc <__aeabi_cdcmpeq>
   d6ee8:	bf34      	ite	cc
   d6eea:	2001      	movcc	r0, #1
   d6eec:	2000      	movcs	r0, #0
   d6eee:	f85d fb08 	ldr.w	pc, [sp], #8
   d6ef2:	bf00      	nop

000d6ef4 <__aeabi_dcmple>:
   d6ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6ef8:	f7ff ffe0 	bl	d6ebc <__aeabi_cdcmpeq>
   d6efc:	bf94      	ite	ls
   d6efe:	2001      	movls	r0, #1
   d6f00:	2000      	movhi	r0, #0
   d6f02:	f85d fb08 	ldr.w	pc, [sp], #8
   d6f06:	bf00      	nop

000d6f08 <__aeabi_dcmpge>:
   d6f08:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6f0c:	f7ff ffce 	bl	d6eac <__aeabi_cdrcmple>
   d6f10:	bf94      	ite	ls
   d6f12:	2001      	movls	r0, #1
   d6f14:	2000      	movhi	r0, #0
   d6f16:	f85d fb08 	ldr.w	pc, [sp], #8
   d6f1a:	bf00      	nop

000d6f1c <__aeabi_dcmpgt>:
   d6f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6f20:	f7ff ffc4 	bl	d6eac <__aeabi_cdrcmple>
   d6f24:	bf34      	ite	cc
   d6f26:	2001      	movcc	r0, #1
   d6f28:	2000      	movcs	r0, #0
   d6f2a:	f85d fb08 	ldr.w	pc, [sp], #8
   d6f2e:	bf00      	nop

000d6f30 <__aeabi_dcmpun>:
   d6f30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6f34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6f38:	d102      	bne.n	d6f40 <__aeabi_dcmpun+0x10>
   d6f3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6f3e:	d10a      	bne.n	d6f56 <__aeabi_dcmpun+0x26>
   d6f40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6f44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6f48:	d102      	bne.n	d6f50 <__aeabi_dcmpun+0x20>
   d6f4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6f4e:	d102      	bne.n	d6f56 <__aeabi_dcmpun+0x26>
   d6f50:	f04f 0000 	mov.w	r0, #0
   d6f54:	4770      	bx	lr
   d6f56:	f04f 0001 	mov.w	r0, #1
   d6f5a:	4770      	bx	lr

000d6f5c <__aeabi_d2iz>:
   d6f5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6f60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6f64:	d215      	bcs.n	d6f92 <__aeabi_d2iz+0x36>
   d6f66:	d511      	bpl.n	d6f8c <__aeabi_d2iz+0x30>
   d6f68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6f6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6f70:	d912      	bls.n	d6f98 <__aeabi_d2iz+0x3c>
   d6f72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6f76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6f7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6f7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6f82:	fa23 f002 	lsr.w	r0, r3, r2
   d6f86:	bf18      	it	ne
   d6f88:	4240      	negne	r0, r0
   d6f8a:	4770      	bx	lr
   d6f8c:	f04f 0000 	mov.w	r0, #0
   d6f90:	4770      	bx	lr
   d6f92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6f96:	d105      	bne.n	d6fa4 <__aeabi_d2iz+0x48>
   d6f98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d6f9c:	bf08      	it	eq
   d6f9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6fa2:	4770      	bx	lr
   d6fa4:	f04f 0000 	mov.w	r0, #0
   d6fa8:	4770      	bx	lr
   d6faa:	bf00      	nop

000d6fac <__aeabi_d2uiz>:
   d6fac:	004a      	lsls	r2, r1, #1
   d6fae:	d211      	bcs.n	d6fd4 <__aeabi_d2uiz+0x28>
   d6fb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6fb4:	d211      	bcs.n	d6fda <__aeabi_d2uiz+0x2e>
   d6fb6:	d50d      	bpl.n	d6fd4 <__aeabi_d2uiz+0x28>
   d6fb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6fbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6fc0:	d40e      	bmi.n	d6fe0 <__aeabi_d2uiz+0x34>
   d6fc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6fc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6fca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6fce:	fa23 f002 	lsr.w	r0, r3, r2
   d6fd2:	4770      	bx	lr
   d6fd4:	f04f 0000 	mov.w	r0, #0
   d6fd8:	4770      	bx	lr
   d6fda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6fde:	d102      	bne.n	d6fe6 <__aeabi_d2uiz+0x3a>
   d6fe0:	f04f 30ff 	mov.w	r0, #4294967295
   d6fe4:	4770      	bx	lr
   d6fe6:	f04f 0000 	mov.w	r0, #0
   d6fea:	4770      	bx	lr

000d6fec <__aeabi_d2f>:
   d6fec:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6ff0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6ff4:	bf24      	itt	cs
   d6ff6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6ffa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d6ffe:	d90d      	bls.n	d701c <__aeabi_d2f+0x30>
   d7000:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7004:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d7008:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d700c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d7010:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7014:	bf08      	it	eq
   d7016:	f020 0001 	biceq.w	r0, r0, #1
   d701a:	4770      	bx	lr
   d701c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7020:	d121      	bne.n	d7066 <__aeabi_d2f+0x7a>
   d7022:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d7026:	bfbc      	itt	lt
   d7028:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d702c:	4770      	bxlt	lr
   d702e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7032:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d7036:	f1c2 0218 	rsb	r2, r2, #24
   d703a:	f1c2 0c20 	rsb	ip, r2, #32
   d703e:	fa10 f30c 	lsls.w	r3, r0, ip
   d7042:	fa20 f002 	lsr.w	r0, r0, r2
   d7046:	bf18      	it	ne
   d7048:	f040 0001 	orrne.w	r0, r0, #1
   d704c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7050:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7054:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7058:	ea40 000c 	orr.w	r0, r0, ip
   d705c:	fa23 f302 	lsr.w	r3, r3, r2
   d7060:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7064:	e7cc      	b.n	d7000 <__aeabi_d2f+0x14>
   d7066:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d706a:	d107      	bne.n	d707c <__aeabi_d2f+0x90>
   d706c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7070:	bf1e      	ittt	ne
   d7072:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d7076:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d707a:	4770      	bxne	lr
   d707c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7080:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7084:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7088:	4770      	bx	lr
   d708a:	bf00      	nop

000d708c <__cxa_atexit>:
   d708c:	b510      	push	{r4, lr}
   d708e:	4c05      	ldr	r4, [pc, #20]	; (d70a4 <__cxa_atexit+0x18>)
   d7090:	4613      	mov	r3, r2
   d7092:	b12c      	cbz	r4, d70a0 <__cxa_atexit+0x14>
   d7094:	460a      	mov	r2, r1
   d7096:	4601      	mov	r1, r0
   d7098:	2002      	movs	r0, #2
   d709a:	f3af 8000 	nop.w
   d709e:	bd10      	pop	{r4, pc}
   d70a0:	4620      	mov	r0, r4
   d70a2:	bd10      	pop	{r4, pc}
   d70a4:	00000000 	.word	0x00000000

000d70a8 <memcpy>:
   d70a8:	b510      	push	{r4, lr}
   d70aa:	1e43      	subs	r3, r0, #1
   d70ac:	440a      	add	r2, r1
   d70ae:	4291      	cmp	r1, r2
   d70b0:	d004      	beq.n	d70bc <memcpy+0x14>
   d70b2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d70b6:	f803 4f01 	strb.w	r4, [r3, #1]!
   d70ba:	e7f8      	b.n	d70ae <memcpy+0x6>
   d70bc:	bd10      	pop	{r4, pc}

000d70be <memset>:
   d70be:	4402      	add	r2, r0
   d70c0:	4603      	mov	r3, r0
   d70c2:	4293      	cmp	r3, r2
   d70c4:	d002      	beq.n	d70cc <memset+0xe>
   d70c6:	f803 1b01 	strb.w	r1, [r3], #1
   d70ca:	e7fa      	b.n	d70c2 <memset+0x4>
   d70cc:	4770      	bx	lr
	...

000d70d0 <srand>:
   d70d0:	b538      	push	{r3, r4, r5, lr}
   d70d2:	4b12      	ldr	r3, [pc, #72]	; (d711c <srand+0x4c>)
   d70d4:	681c      	ldr	r4, [r3, #0]
   d70d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d70d8:	4605      	mov	r5, r0
   d70da:	b9d3      	cbnz	r3, d7112 <srand+0x42>
   d70dc:	2018      	movs	r0, #24
   d70de:	f7fd ffb1 	bl	d5044 <malloc>
   d70e2:	f243 330e 	movw	r3, #13070	; 0x330e
   d70e6:	63a0      	str	r0, [r4, #56]	; 0x38
   d70e8:	8003      	strh	r3, [r0, #0]
   d70ea:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d70ee:	8043      	strh	r3, [r0, #2]
   d70f0:	f241 2334 	movw	r3, #4660	; 0x1234
   d70f4:	8083      	strh	r3, [r0, #4]
   d70f6:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d70fa:	80c3      	strh	r3, [r0, #6]
   d70fc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7100:	8103      	strh	r3, [r0, #8]
   d7102:	2305      	movs	r3, #5
   d7104:	8143      	strh	r3, [r0, #10]
   d7106:	230b      	movs	r3, #11
   d7108:	8183      	strh	r3, [r0, #12]
   d710a:	2201      	movs	r2, #1
   d710c:	2300      	movs	r3, #0
   d710e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7112:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7114:	2200      	movs	r2, #0
   d7116:	611d      	str	r5, [r3, #16]
   d7118:	615a      	str	r2, [r3, #20]
   d711a:	bd38      	pop	{r3, r4, r5, pc}
   d711c:	2003e318 	.word	0x2003e318

000d7120 <rand>:
   d7120:	4b19      	ldr	r3, [pc, #100]	; (d7188 <rand+0x68>)
   d7122:	b510      	push	{r4, lr}
   d7124:	681c      	ldr	r4, [r3, #0]
   d7126:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7128:	b9d3      	cbnz	r3, d7160 <rand+0x40>
   d712a:	2018      	movs	r0, #24
   d712c:	f7fd ff8a 	bl	d5044 <malloc>
   d7130:	f243 330e 	movw	r3, #13070	; 0x330e
   d7134:	63a0      	str	r0, [r4, #56]	; 0x38
   d7136:	8003      	strh	r3, [r0, #0]
   d7138:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d713c:	8043      	strh	r3, [r0, #2]
   d713e:	f241 2334 	movw	r3, #4660	; 0x1234
   d7142:	8083      	strh	r3, [r0, #4]
   d7144:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7148:	80c3      	strh	r3, [r0, #6]
   d714a:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d714e:	8103      	strh	r3, [r0, #8]
   d7150:	2305      	movs	r3, #5
   d7152:	8143      	strh	r3, [r0, #10]
   d7154:	230b      	movs	r3, #11
   d7156:	8183      	strh	r3, [r0, #12]
   d7158:	2201      	movs	r2, #1
   d715a:	2300      	movs	r3, #0
   d715c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7160:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d7162:	4c0a      	ldr	r4, [pc, #40]	; (d718c <rand+0x6c>)
   d7164:	690b      	ldr	r3, [r1, #16]
   d7166:	6948      	ldr	r0, [r1, #20]
   d7168:	4a09      	ldr	r2, [pc, #36]	; (d7190 <rand+0x70>)
   d716a:	435c      	muls	r4, r3
   d716c:	fb02 4000 	mla	r0, r2, r0, r4
   d7170:	fba3 2302 	umull	r2, r3, r3, r2
   d7174:	3201      	adds	r2, #1
   d7176:	4403      	add	r3, r0
   d7178:	f143 0300 	adc.w	r3, r3, #0
   d717c:	e9c1 2304 	strd	r2, r3, [r1, #16]
   d7180:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d7184:	bd10      	pop	{r4, pc}
   d7186:	bf00      	nop
   d7188:	2003e318 	.word	0x2003e318
   d718c:	5851f42d 	.word	0x5851f42d
   d7190:	4c957f2d 	.word	0x4c957f2d

000d7194 <strlen>:
   d7194:	4603      	mov	r3, r0
   d7196:	f813 2b01 	ldrb.w	r2, [r3], #1
   d719a:	2a00      	cmp	r2, #0
   d719c:	d1fb      	bne.n	d7196 <strlen+0x2>
   d719e:	1a18      	subs	r0, r3, r0
   d71a0:	3801      	subs	r0, #1
   d71a2:	4770      	bx	lr

000d71a4 <dynalib_user>:
   d71a4:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d71b4:	0000 0000                                   ....

000d71b8 <_ZL17test_button_press>:
   d71b8:	2e33 5420 7365 2074 7542 7474 6e6f 5020     3. Test Button P
   d71c8:	6572 7373 000a                              ress..

000d71ce <_ZL9test_fail>:
   d71ce:	4520 5252 524f 3f00                               ERROR.

000d71d5 <_ZL16test_cmd_options>:
   d71d5:	2e3f 4f20 7470 6f69 736e 000a               ?. Options..

000d71e1 <_ZL14test_flash_cmd>:
   d71e1:	2e31 5420 7365 2074 4545 5250 4d4f 000a     1. Test EEPROM..
   d71f1:	540a 7365 6974 676e 6620 616c 6873 003a     .Testing flash:.
   d7201:	500a 6572 7373 6220 7475 6f74 206e 6f66     .Press button fo
   d7211:	3a72 0020 5320 6365 6e6f 7364 0a00 6554     r: . Seconds..Te
   d7221:	7473 6e69 2067 7542 7474 6e6f 003a 540a     sting Button:..T
   d7231:	7365 6974 676e 5620 6c61 6576 003a          esting Valve:.

000d723f <_ZL15test_device_api>:
   d723f:	2e32 5420 7365 2074 6544 6976 6563 4120     2. Test Device A
   d724f:	4950 000a                                   PI..

000d7253 <_ZL11test_header>:
   d7253:	4749 2048 6853 6569 646c 5420 7365 0074     IGH Shield Test.

000d7263 <_ZL12test_padding>:
   d7263:	2a0a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     .***************
   d7273:	000a                                        ..

000d7275 <_ZL16test_valve_state>:
   d7275:	2e34 5420 7365 2074 6156 766c 2065 6f43     4. Test Valve Co
   d7285:	746e 6f72 0a6c 2000                              ntrol..

000d728c <_ZL12test_success>:
   d728c:	4f20 004b 0fe0 68ce 759a 0547 9ae7 370e      OK....h.uG....7
   d729c:	6574 7473 622e 6f72 656b 2e72 6f63 006d     test.broker.com.

000d72ac <_ZTV5Timer>:
	...
   d72b4:	4799 000d 47e1 000d 4721 000d 550a 696e     .G...G..!G...Uni
   d72c4:	2078 6954 656d 203a 2020 2020 0020 6c63     x Time:      .cl
   d72d4:	756f 2064 7473 7461 7375 203a 2020 2020     oud status:     
   d72e4:	6e00 7465 6f77 6b72 7320 6174 7574 3a73     .network status:
   d72f4:	2020 0020 6973 6e67 6c61 7320 7274 6e65        .signal stren
   d7304:	7467 3a68 2020 7300 6769 616e 206c 7571     gth:  .signal qu
   d7314:	6c61 7469 3a79 2020 0020 6142 7474 7265     ality:   .Batter
   d7324:	2079 6f56 746c 6761 3a65 2020 4200 7461     y Voltage:  .Bat
   d7334:	6574 7972 5320 434f 203a 2020 2020 0020     tery SOC:      .

000d7344 <_ZTVN5spark13EthernetClassE>:
	...
   d734c:	50d3 000d 50c9 000d 50bf 000d 50b5 000d     .P...P...P...P..
   d735c:	50a9 000d 509d 000d 5091 000d 5089 000d     .P...P...P...P..
   d736c:	507f 000d 5075 000d 60c9 000d 616e 006e     .P..uP...`..nan.
   d737c:	766f 0066 002e 6e69 0066 6162 6475 5300     ovf...inf.baud.S
   d738c:	7265 6169 006c 6553 6972 6c61 0031 7974     erial.Serial1.ty
   d739c:	6570 7000 7261 6d61 6300 646d 6900 0064     pe.param.cmd.id.
   d73ac:	6e68 0064 7473 6d72 6600 6c69 0074 766c     hnd.strm.filt.lv
   d73bc:	006c 6461 4864 6e61 6c64 7265 7200 6d65     l.addHandler.rem
   d73cc:	766f 4865 6e61 6c64 7265 6500 756e 486d     oveHandler.enumH
   d73dc:	6e61 6c64 7265 0073 534a 4e4f 7453 6572     andlers.JSONStre
   d73ec:	6d61 6f4c 4867 6e61 6c64 7265 6100 7070     amLogHandler.app
   d73fc:	2500 3130 7530 0020 205d 2500 0064 202c     .%010u .] .%d., 
   d740c:	2800 3a29 0020 5b20 6300 646f 2065 203d     .(): . [.code = 
   d741c:	2500 0069 6564 6174 6c69 2073 203d 0d00     .%i.details = ..
   d742c:	000a 6e6c 6600 006e 6f63 6564 6400 7465     ..ln.fn.code.det
   d743c:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   d744c:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   d745c:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
   d746c:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   d747c:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d748c:	0065 0000                                   e...

000d7490 <_ZTV14CellularSignal>:
	...
   d7498:	4931 000d 4933 000d 5629 000d 56b9 000d     1I..3I..)V...V..
   d74a8:	562d 000d 5685 000d 5659 000d 5743 000d     -V...V..YV..CW..
   d74b8:	fffc ffff 0000 0000 576d 000d               ........mW..

000d74c4 <_ZTV9IPAddress>:
	...
   d74cc:	59c1 000d 59b1 000d 59b3 000d               .Y...Y...Y..

000d74d8 <_ZTV9USBSerial>:
	...
   d74e0:	5a99 000d 5ae9 000d 5af7 000d 530d 000d     .Z...Z...Z...S..
   d74f0:	5ad5 000d 5a9b 000d 5ab1 000d 5ae3 000d     .Z...Z...Z...Z..
   d7500:	5ac7 000d 5a95 000d                         .Z...Z..

000d7508 <_ZTVN5spark13CellularClassE>:
	...
   d7510:	5c03 000d 5bf9 000d 5bef 000d 5ba5 000d     .\...[...[...[..
   d7520:	5be3 000d 5bd7 000d 5bcb 000d 5bc3 000d     .[...[...[...[..
   d7530:	5bb9 000d 5baf 000d 60c9 000d               .[...[...`..

000d753c <_ZTV11USARTSerial>:
	...
   d7544:	5cb1 000d 5d01 000d 5d0f 000d 530d 000d     .\...]...]...S..
   d7554:	5cc5 000d 5ce7 000d 5cd3 000d 5cfb 000d     .\...\...\...\..
   d7564:	5cb3 000d 5cb7 000d                         .\...\..

000d756c <_ZTV7TwoWire>:
	...
   d7574:	5db5 000d 5dff 000d 5dd7 000d 5db7 000d     .]...]...]...]..
   d7584:	5ddf 000d 5de7 000d 5def 000d 5df7 000d     .]...]...]...]..

000d7594 <_ZTVN5spark9MeshClassE>:
	...
   d759c:	5f43 000d 5f39 000d 5f2f 000d 5f25 000d     C_..9_../_..%_..
   d75ac:	5f19 000d 5f0d 000d 5f01 000d 5ef9 000d     ._..._..._...^..
   d75bc:	5eef 000d 5ee5 000d 60c9 000d               .^...^...`..

000d75c8 <_ZTVN5spark12NetworkClassE>:
	...
   d75d0:	6061 000d 606b 000d 6075 000d 607f 000d     a`..k`..u`...`..
   d75e0:	6089 000d 6095 000d 60a1 000d 60ad 000d     .`...`...`...`..
   d75f0:	60b5 000d 60bf 000d 60c9 000d               .`...`...`..

000d75fc <_ZSt7nothrow>:
   d75fc:	0000 0000                                   ....

000d7600 <__sf_fake_stdin>:
	...

000d7620 <__sf_fake_stdout>:
	...

000d7640 <__sf_fake_stderr>:
	...
   d7660:	0043                                        C.

000d7662 <link_const_variable_data_end>:
	...

000d7664 <link_constructors_location>:
   d7664:	000d40ed 	.word	0x000d40ed
   d7668:	000d44b9 	.word	0x000d44b9
   d766c:	000d4701 	.word	0x000d4701
   d7670:	000d48a1 	.word	0x000d48a1
   d7674:	000d4af9 	.word	0x000d4af9
   d7678:	000d4b59 	.word	0x000d4b59
   d767c:	000d50dd 	.word	0x000d50dd
   d7680:	000d5129 	.word	0x000d5129
   d7684:	000d52e5 	.word	0x000d52e5
   d7688:	000d5571 	.word	0x000d5571
   d768c:	000d55ed 	.word	0x000d55ed
   d7690:	000d560d 	.word	0x000d560d
   d7694:	000d5c81 	.word	0x000d5c81
   d7698:	000d6011 	.word	0x000d6011
   d769c:	000d6195 	.word	0x000d6195
   d76a0:	000d63fd 	.word	0x000d63fd
   d76a4:	000d6481 	.word	0x000d6481
   d76a8:	000d6545 	.word	0x000d6545
   d76ac:	000d6609 	.word	0x000d6609
