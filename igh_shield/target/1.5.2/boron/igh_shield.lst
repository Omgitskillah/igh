
c:/Users/Clarence.Alucho/Documents/git/igh/igh_shield/target/1.5.2/boron/igh_shield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002da4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6dc0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e30c  000d6dc4  0001e30c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000047c  2003e374  2003e374  0002e374  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6e2c  000d6e2c  00026e2c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6e54  000d6e54  00026e54  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000db7de  00000000  00000000  00026e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011adf  00000000  00000000  00102636  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001f8df  00000000  00000000  00114115  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002700  00000000  00000000  001339f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004750  00000000  00000000  001360f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000368e4  00000000  00000000  0013a844  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002d674  00000000  00000000  00171128  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00104a3b  00000000  00000000  0019e79c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d268  00000000  00000000  002a31d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fc49 	bl	d68c4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fc4e 	bl	d68da <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e30c 	.word	0x2003e30c
   d4048:	000d6dc4 	.word	0x000d6dc4
   d404c:	2003e374 	.word	0x2003e374
   d4050:	2003e374 	.word	0x2003e374
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 f953 	bl	d5304 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6db8 	.word	0x000d6db8
   d4080:	000d6d70 	.word	0x000d6d70

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b820 	b.w	d40c8 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f824 	bl	d40d6 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 b8f9 	b.w	d5288 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 bd17 	b.w	d4ac8 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 bd15 	b.w	d4ac8 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <igh_settings_calculate_checksum>:
 * struct must have a single byte at the end designated for the checksum for this to work
 * \param p_struct: pointer to data struct, total_bytes: sizeof(data struct)
 * \return the checksum
 */
uint8_t igh_settings_calculate_checksum(void * p_struct, size_t total_bytes)
{
   d40ae:	b510      	push	{r4, lr}
    data = (uint8_t *)p_struct;

    // uint8_t data_buffer[length];
    // memcpy(data_buffer, data, length);

    data += 1; // ignore checksum byte
   d40b0:	1c42      	adds	r2, r0, #1
 */
uint8_t igh_settings_calculate_checksum(void * p_struct, size_t total_bytes)
{
    uint8_t length = (uint8_t)total_bytes; 
    uint8_t * data;
    int sum = 0;
   d40b2:	2300      	movs	r3, #0
    // uint8_t data_buffer[length];
    // memcpy(data_buffer, data, length);

    data += 1; // ignore checksum byte
    // start at 1 to ignore the checksum byte
    for( int i = 1; i < length; i++)
   d40b4:	b2c9      	uxtb	r1, r1
   d40b6:	1a14      	subs	r4, r2, r0
   d40b8:	42a1      	cmp	r1, r4
   d40ba:	dd03      	ble.n	d40c4 <igh_settings_calculate_checksum+0x16>
    {
        sum += (0xFF & *data++);
   d40bc:	f812 4b01 	ldrb.w	r4, [r2], #1
   d40c0:	4423      	add	r3, r4
   d40c2:	e7f8      	b.n	d40b6 <igh_settings_calculate_checksum+0x8>
    }

    checksum = (uint8_t)(sum % 256);

    return checksum;
}
   d40c4:	b2d8      	uxtb	r0, r3
   d40c6:	bd10      	pop	{r4, pc}

000d40c8 <setup>:
#endif

SYSTEM_THREAD(ENABLED);

void setup() 
{
   d40c8:	b508      	push	{r3, lr}
#ifdef TEST_MODE
    // go into test mode
    igh_log_begin();
   d40ca:	f000 f81d 	bl	d4108 <_Z13igh_log_beginv>
#endif
    igh_boron_setup();
}
   d40ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
#ifdef TEST_MODE
    // go into test mode
    igh_log_begin();
#endif
    igh_boron_setup();
   d40d2:	f000 ba35 	b.w	d4540 <_Z15igh_boron_setupv>

000d40d6 <loop>:
}

void loop() 
{
   d40d6:	b508      	push	{r3, lr}
#ifdef TEST_MODE
    // process test commands
    igh_process_serial_cmd(); 
   d40d8:	f000 f820 	bl	d411c <_Z22igh_process_serial_cmdv>
#endif
    igh_boron_service();
   d40dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
#ifdef TEST_MODE
    // process test commands
    igh_process_serial_cmd(); 
#endif
    igh_boron_service();
   d40e0:	f000 ba36 	b.w	d4550 <_Z17igh_boron_servicev>

000d40e4 <_GLOBAL__sub_I_setup>:
   d40e4:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d40e6:	f000 fafb 	bl	d46e0 <HAL_Pin_Map>
#define TEST_MODE
#ifdef TEST_MODE
#include "particle_api/igh_log.h"
#endif

SYSTEM_THREAD(ENABLED);
   d40ea:	2100      	movs	r1, #0
   d40ec:	2001      	movs	r0, #1
#ifdef TEST_MODE
    // process test commands
    igh_process_serial_cmd(); 
#endif
    igh_boron_service();
   d40ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#define TEST_MODE
#ifdef TEST_MODE
#include "particle_api/igh_log.h"
#endif

SYSTEM_THREAD(ENABLED);
   d40f2:	f000 bc45 	b.w	d4980 <system_thread_set_state>

000d40f6 <_Z13igh_log_print6String>:
    }
    return 0;
}

void igh_log_print(String _str)
{
   d40f6:	b510      	push	{r4, lr}
   d40f8:	4604      	mov	r4, r0
    Serial.print(_str);
   d40fa:	f001 fa03 	bl	d5504 <_Z16_fetch_usbserialv>
   d40fe:	6821      	ldr	r1, [r4, #0]
}
   d4100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return 0;
}

void igh_log_print(String _str)
{
    Serial.print(_str);
   d4104:	f000 bdf4 	b.w	d4cf0 <_ZN5Print5printEPKc>

000d4108 <_Z13igh_log_beginv>:
}

void igh_log_begin(void)
{
   d4108:	b508      	push	{r3, lr}
    Serial.begin(IGH_LOG_BAUD);
   d410a:	f001 f9fb 	bl	d5504 <_Z16_fetch_usbserialv>
   d410e:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
}
   d4112:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.print(_str);
}

void igh_log_begin(void)
{
    Serial.begin(IGH_LOG_BAUD);
   d4116:	f001 b9e9 	b.w	d54ec <_ZN9USBSerial5beginEl>
	...

000d411c <_Z22igh_process_serial_cmdv>:
        igh_log_print(test_fail); igh_log_print("\n");
    }   
}

uint8_t igh_process_serial_cmd(void)
{
   d411c:	b510      	push	{r4, lr}
   d411e:	b088      	sub	sp, #32
    uint8_t ret = 0;
    char resp[10];
    memset(resp, '\0', sizeof(resp));
   d4120:	2300      	movs	r3, #0
   d4122:	9301      	str	r3, [sp, #4]
   d4124:	9302      	str	r3, [sp, #8]
   d4126:	f8ad 300c 	strh.w	r3, [sp, #12]
static void print_cmd_options(void);
static void igh_append_test_status(uint8_t _status);

static uint8_t igh_log_read(char * _ch)
{
    if( Serial.available() )
   d412a:	f001 f9eb 	bl	d5504 <_Z16_fetch_usbserialv>
   d412e:	6803      	ldr	r3, [r0, #0]
   d4130:	691b      	ldr	r3, [r3, #16]
   d4132:	4798      	blx	r3
   d4134:	b198      	cbz	r0, d415e <_Z22igh_process_serial_cmdv+0x42>
    {
        *_ch = Serial.read();
   d4136:	f001 f9e5 	bl	d5504 <_Z16_fetch_usbserialv>
   d413a:	6803      	ldr	r3, [r0, #0]
   d413c:	695b      	ldr	r3, [r3, #20]
   d413e:	4798      	blx	r3
   d4140:	b2c4      	uxtb	r4, r0
        while (Serial.available()) Serial.read(); // remove any other data
   d4142:	f001 f9df 	bl	d5504 <_Z16_fetch_usbserialv>
   d4146:	6803      	ldr	r3, [r0, #0]
   d4148:	691b      	ldr	r3, [r3, #16]
   d414a:	4798      	blx	r3
   d414c:	b148      	cbz	r0, d4162 <_Z22igh_process_serial_cmdv+0x46>
   d414e:	f001 f9d9 	bl	d5504 <_Z16_fetch_usbserialv>
   d4152:	6803      	ldr	r3, [r0, #0]
   d4154:	695b      	ldr	r3, [r3, #20]
   d4156:	4798      	blx	r3
   d4158:	e7f3      	b.n	d4142 <_Z22igh_process_serial_cmdv+0x26>

    char serial_cmd = '\0';

    if( igh_log_read(&serial_cmd) )
    {
        switch(serial_cmd)
   d415a:	2c31      	cmp	r4, #49	; 0x31
   d415c:	d03c      	beq.n	d41d8 <_Z22igh_process_serial_cmdv+0xbc>
    }   
}

uint8_t igh_process_serial_cmd(void)
{
    uint8_t ret = 0;
   d415e:	4604      	mov	r4, r0
    else
    {
        // Do nothing;
    }

    return ret;
   d4160:	e05e      	b.n	d4220 <_Z22igh_process_serial_cmdv+0x104>

    char serial_cmd = '\0';

    if( igh_log_read(&serial_cmd) )
    {
        switch(serial_cmd)
   d4162:	2c32      	cmp	r4, #50	; 0x32
   d4164:	d103      	bne.n	d416e <_Z22igh_process_serial_cmdv+0x52>
                print_cmd_options();
                ret = 1;
                break;

            case test_device:
                igh_boron_test_device();
   d4166:	f000 f9fb 	bl	d4560 <_Z21igh_boron_test_devicev>
                ret = 1;
   d416a:	2401      	movs	r4, #1
                break;
   d416c:	e058      	b.n	d4220 <_Z22igh_process_serial_cmdv+0x104>

    char serial_cmd = '\0';

    if( igh_log_read(&serial_cmd) )
    {
        switch(serial_cmd)
   d416e:	2c3f      	cmp	r4, #63	; 0x3f
   d4170:	d1f3      	bne.n	d415a <_Z22igh_process_serial_cmdv+0x3e>
    Serial.begin(IGH_LOG_BAUD);
}

static void print_cmd_options(void)
{
    igh_log_print(test_padding);
   d4172:	492d      	ldr	r1, [pc, #180]	; (d4228 <_Z22igh_process_serial_cmdv+0x10c>)
   d4174:	a804      	add	r0, sp, #16
   d4176:	f000 fd66 	bl	d4c46 <_ZN6StringC1EPK19__FlashStringHelper>
   d417a:	a804      	add	r0, sp, #16
   d417c:	f7ff ffbb 	bl	d40f6 <_Z13igh_log_print6String>
   d4180:	a804      	add	r0, sp, #16
   d4182:	f000 fd19 	bl	d4bb8 <_ZN6StringD1Ev>
    igh_log_print(test_cmd_options);
   d4186:	4929      	ldr	r1, [pc, #164]	; (d422c <_Z22igh_process_serial_cmdv+0x110>)
   d4188:	a804      	add	r0, sp, #16
   d418a:	f000 fd5c 	bl	d4c46 <_ZN6StringC1EPK19__FlashStringHelper>
   d418e:	a804      	add	r0, sp, #16
   d4190:	f7ff ffb1 	bl	d40f6 <_Z13igh_log_print6String>
   d4194:	a804      	add	r0, sp, #16
   d4196:	f000 fd0f 	bl	d4bb8 <_ZN6StringD1Ev>
    igh_log_print(test_flash_cmd);
   d419a:	4925      	ldr	r1, [pc, #148]	; (d4230 <_Z22igh_process_serial_cmdv+0x114>)
   d419c:	a804      	add	r0, sp, #16
   d419e:	f000 fd52 	bl	d4c46 <_ZN6StringC1EPK19__FlashStringHelper>
   d41a2:	a804      	add	r0, sp, #16
   d41a4:	f7ff ffa7 	bl	d40f6 <_Z13igh_log_print6String>
   d41a8:	a804      	add	r0, sp, #16
   d41aa:	f000 fd05 	bl	d4bb8 <_ZN6StringD1Ev>
    igh_log_print(test_device_api);
   d41ae:	4921      	ldr	r1, [pc, #132]	; (d4234 <_Z22igh_process_serial_cmdv+0x118>)
   d41b0:	a804      	add	r0, sp, #16
   d41b2:	f000 fd48 	bl	d4c46 <_ZN6StringC1EPK19__FlashStringHelper>
   d41b6:	a804      	add	r0, sp, #16
   d41b8:	f7ff ff9d 	bl	d40f6 <_Z13igh_log_print6String>
   d41bc:	a804      	add	r0, sp, #16
   d41be:	f000 fcfb 	bl	d4bb8 <_ZN6StringD1Ev>
    // Add more tests here
    igh_log_print(test_padding);
   d41c2:	4919      	ldr	r1, [pc, #100]	; (d4228 <_Z22igh_process_serial_cmdv+0x10c>)
   d41c4:	a804      	add	r0, sp, #16
   d41c6:	f000 fd3e 	bl	d4c46 <_ZN6StringC1EPK19__FlashStringHelper>
   d41ca:	a804      	add	r0, sp, #16
   d41cc:	f7ff ff93 	bl	d40f6 <_Z13igh_log_print6String>
   d41d0:	a804      	add	r0, sp, #16
   d41d2:	f000 fcf1 	bl	d4bb8 <_ZN6StringD1Ev>
   d41d6:	e7c8      	b.n	d416a <_Z22igh_process_serial_cmdv+0x4e>
    if( igh_log_read(&serial_cmd) )
    {
        switch(serial_cmd)
        {
            case test_flash:
                igh_log_print(F("\nTesting flash:"));
   d41d8:	4917      	ldr	r1, [pc, #92]	; (d4238 <_Z22igh_process_serial_cmdv+0x11c>)
   d41da:	a804      	add	r0, sp, #16
   d41dc:	f000 fd33 	bl	d4c46 <_ZN6StringC1EPK19__FlashStringHelper>
   d41e0:	a804      	add	r0, sp, #16
   d41e2:	f7ff ff88 	bl	d40f6 <_Z13igh_log_print6String>
   d41e6:	a804      	add	r0, sp, #16
   d41e8:	f000 fce6 	bl	d4bb8 <_ZN6StringD1Ev>
                ret = igh_eeproom_test(); // this should be true based on actual test
   d41ec:	f000 f8c6 	bl	d437c <_Z16igh_eeproom_testv>
    igh_log_print(test_padding);
}

static void igh_append_test_status(uint8_t _status)
{
    if(_status)
   d41f0:	4604      	mov	r4, r0
   d41f2:	b108      	cbz	r0, d41f8 <_Z22igh_process_serial_cmdv+0xdc>
    {
        igh_log_print(test_success); igh_log_print("\n");
   d41f4:	4911      	ldr	r1, [pc, #68]	; (d423c <_Z22igh_process_serial_cmdv+0x120>)
   d41f6:	e000      	b.n	d41fa <_Z22igh_process_serial_cmdv+0xde>
    }
    else
    {
        igh_log_print(test_fail); igh_log_print("\n");
   d41f8:	4911      	ldr	r1, [pc, #68]	; (d4240 <_Z22igh_process_serial_cmdv+0x124>)
   d41fa:	a804      	add	r0, sp, #16
   d41fc:	f000 fd23 	bl	d4c46 <_ZN6StringC1EPK19__FlashStringHelper>
   d4200:	a804      	add	r0, sp, #16
   d4202:	f7ff ff78 	bl	d40f6 <_Z13igh_log_print6String>
   d4206:	a804      	add	r0, sp, #16
   d4208:	f000 fcd6 	bl	d4bb8 <_ZN6StringD1Ev>
   d420c:	490d      	ldr	r1, [pc, #52]	; (d4244 <_Z22igh_process_serial_cmdv+0x128>)
   d420e:	a804      	add	r0, sp, #16
   d4210:	f000 fd19 	bl	d4c46 <_ZN6StringC1EPK19__FlashStringHelper>
   d4214:	a804      	add	r0, sp, #16
   d4216:	f7ff ff6e 	bl	d40f6 <_Z13igh_log_print6String>
   d421a:	a804      	add	r0, sp, #16
   d421c:	f000 fccc 	bl	d4bb8 <_ZN6StringD1Ev>
    {
        // Do nothing;
    }

    return ret;
   d4220:	4620      	mov	r0, r4
   d4222:	b008      	add	sp, #32
   d4224:	bd10      	pop	{r4, pc}
   d4226:	bf00      	nop
   d4228:	000d69a6 	.word	0x000d69a6
   d422c:	000d6960 	.word	0x000d6960
   d4230:	000d6980 	.word	0x000d6980
   d4234:	000d696c 	.word	0x000d696c
   d4238:	000d6990 	.word	0x000d6990
   d423c:	000d69b2 	.word	0x000d69b2
   d4240:	000d69a0 	.word	0x000d69a0
   d4244:	000d6b38 	.word	0x000d6b38

000d4248 <_GLOBAL__sub_I__Z13igh_log_print6String>:
   d4248:	f000 ba4a 	b.w	d46e0 <HAL_Pin_Map>

000d424c <_Z24igh_eeprom_update_errorsm>:
 * \brief Save errors bit field
 * \param error_bit_field: error bit field
 * \return void
 */
void igh_eeprom_update_errors(uint32_t error_bit_field)
{
   d424c:	b513      	push	{r0, r1, r4, lr}
   d424e:	ac02      	add	r4, sp, #8
   d4250:	f844 0d04 	str.w	r0, [r4, #-4]!
    EEPROM.put(SYSTEM_ERRORS_ADDRESS, error_bit_field);
   d4254:	f001 fc6a 	bl	d5b2c <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4258:	2204      	movs	r2, #4
   d425a:	4621      	mov	r1, r4
   d425c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   d4260:	f000 fa6e 	bl	d4740 <HAL_EEPROM_Put>
}
   d4264:	b002      	add	sp, #8
   d4266:	bd10      	pop	{r4, pc}

000d4268 <_Z31igh_eeprom_read_system_settingsP15system_settings>:
 * \brief Gets system settings from eeprom emulator
 * \param running_system_settings_buffer: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_system_settings(system_settings * running_system_settings_buffer)
{
   d4268:	b530      	push	{r4, r5, lr}
   d426a:	b091      	sub	sp, #68	; 0x44
  system_settings local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d426c:	223c      	movs	r2, #60	; 0x3c
   d426e:	2100      	movs	r1, #0
 * \brief Gets system settings from eeprom emulator
 * \param running_system_settings_buffer: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_system_settings(system_settings * running_system_settings_buffer)
{
   d4270:	4605      	mov	r5, r0
  system_settings local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d4272:	a801      	add	r0, sp, #4
   d4274:	f002 fb31 	bl	d68da <memset>
  EEPROM.get(SYSTEM_SETTINGS_ADDRESS, local_buffer);
   d4278:	f001 fc58 	bl	d5b2c <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d427c:	223c      	movs	r2, #60	; 0x3c
   d427e:	a901      	add	r1, sp, #4
   d4280:	2000      	movs	r0, #0
   d4282:	f000 fa55 	bl	d4730 <HAL_EEPROM_Get>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));
   d4286:	213c      	movs	r1, #60	; 0x3c
   d4288:	a801      	add	r0, sp, #4
   d428a:	f7ff ff10 	bl	d40ae <igh_settings_calculate_checksum>

  if( checksum != local_buffer.checksum)
   d428e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4292:	4283      	cmp	r3, r0
   d4294:	d10c      	bne.n	d42b0 <_Z31igh_eeprom_read_system_settingsP15system_settings+0x48>
  {
    return 0;
  }

  *running_system_settings_buffer = local_buffer;
   d4296:	ac01      	add	r4, sp, #4
   d4298:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d429a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d429c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d429e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d42a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d42a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d42a4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   d42a8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  return 1;
   d42ac:	2001      	movs	r0, #1
   d42ae:	e000      	b.n	d42b2 <_Z31igh_eeprom_read_system_settingsP15system_settings+0x4a>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));

  if( checksum != local_buffer.checksum)
  {
    return 0;
   d42b0:	2000      	movs	r0, #0
  }

  *running_system_settings_buffer = local_buffer;
  return 1;

}
   d42b2:	b011      	add	sp, #68	; 0x44
   d42b4:	bd30      	pop	{r4, r5, pc}

000d42b6 <_Z31igh_eeprom_save_system_settingsP15system_settings>:
 * \brief Save system settings  to eeprom emulator
 * \param settings_to_save: pointer to struct to save
 * \return true or false based on write success
 */
uint8_t igh_eeprom_save_system_settings(system_settings * settings_to_save)
{
   d42b6:	b510      	push	{r4, lr}
   d42b8:	4604      	mov	r4, r0
   d42ba:	b090      	sub	sp, #64	; 0x40
  system_settings local_buffer;
  // save the data
  EEPROM.put(SYSTEM_SETTINGS_ADDRESS, *settings_to_save);
   d42bc:	f001 fc36 	bl	d5b2c <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d42c0:	223c      	movs	r2, #60	; 0x3c
   d42c2:	4621      	mov	r1, r4
   d42c4:	2000      	movs	r0, #0
   d42c6:	f000 fa3b 	bl	d4740 <HAL_EEPROM_Put>
  // check if data is saved
  igh_eeprom_read_system_settings(&local_buffer);
   d42ca:	a801      	add	r0, sp, #4
   d42cc:	f7ff ffcc 	bl	d4268 <_Z31igh_eeprom_read_system_settingsP15system_settings>

  if( local_buffer.checksum != (settings_to_save->checksum))
  {
    return 0;
   d42d0:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d42d4:	7823      	ldrb	r3, [r4, #0]
  }

  return 1;
}
   d42d6:	1ac3      	subs	r3, r0, r3
   d42d8:	4258      	negs	r0, r3
   d42da:	4158      	adcs	r0, r3
   d42dc:	b010      	add	sp, #64	; 0x40
   d42de:	bd10      	pop	{r4, pc}

000d42e0 <_Z34igh_eeprom_read_threshold_settingsP10thresholds>:
 * \brief Gets threshold settings from eeprom emulator
 * \param running_thresholds: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_threshold_settings(thresholds * running_thresholds)
{
   d42e0:	b530      	push	{r4, r5, lr}
   d42e2:	b08f      	sub	sp, #60	; 0x3c
  thresholds local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d42e4:	2234      	movs	r2, #52	; 0x34
   d42e6:	2100      	movs	r1, #0
 * \brief Gets threshold settings from eeprom emulator
 * \param running_thresholds: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_threshold_settings(thresholds * running_thresholds)
{
   d42e8:	4605      	mov	r5, r0
  thresholds local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d42ea:	a801      	add	r0, sp, #4
   d42ec:	f002 faf5 	bl	d68da <memset>
  EEPROM.get(SYSTEM_THRESHOLDS_ADDRESS, local_buffer);
   d42f0:	f001 fc1c 	bl	d5b2c <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d42f4:	2234      	movs	r2, #52	; 0x34
   d42f6:	a901      	add	r1, sp, #4
   d42f8:	f44f 7000 	mov.w	r0, #512	; 0x200
   d42fc:	f000 fa18 	bl	d4730 <HAL_EEPROM_Get>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));
   d4300:	2134      	movs	r1, #52	; 0x34
   d4302:	a801      	add	r0, sp, #4
   d4304:	f7ff fed3 	bl	d40ae <igh_settings_calculate_checksum>
  
  if( checksum != local_buffer.checksum)
   d4308:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d430c:	4283      	cmp	r3, r0
   d430e:	d10a      	bne.n	d4326 <_Z34igh_eeprom_read_threshold_settingsP10thresholds+0x46>
  {
    return 0;
  }
  
  *running_thresholds = local_buffer;
   d4310:	ac01      	add	r4, sp, #4
   d4312:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4314:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4316:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4318:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d431a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d431c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d431e:	6823      	ldr	r3, [r4, #0]
   d4320:	602b      	str	r3, [r5, #0]
  return 1;
   d4322:	2001      	movs	r0, #1
   d4324:	e000      	b.n	d4328 <_Z34igh_eeprom_read_threshold_settingsP10thresholds+0x48>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));
  
  if( checksum != local_buffer.checksum)
  {
    return 0;
   d4326:	2000      	movs	r0, #0
  }
  
  *running_thresholds = local_buffer;
  return 1;
}
   d4328:	b00f      	add	sp, #60	; 0x3c
   d432a:	bd30      	pop	{r4, r5, pc}

000d432c <_Z34igh_eeprom_save_threshold_settingsP10thresholds>:
 * \brief Save threshold settings  to eeprom emulator
 * \param settings_to_save: pointer to struct to save
 * \return true or false based on write success
 */
uint8_t igh_eeprom_save_threshold_settings(thresholds * settings_to_save)
{
   d432c:	b510      	push	{r4, lr}
   d432e:	4604      	mov	r4, r0
   d4330:	b08e      	sub	sp, #56	; 0x38
    thresholds local_buffer;
    // save the data
    EEPROM.put(SYSTEM_THRESHOLDS_ADDRESS, *settings_to_save);
   d4332:	f001 fbfb 	bl	d5b2c <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4336:	2234      	movs	r2, #52	; 0x34
   d4338:	4621      	mov	r1, r4
   d433a:	f44f 7000 	mov.w	r0, #512	; 0x200
   d433e:	f000 f9ff 	bl	d4740 <HAL_EEPROM_Put>
    // check if data is saved
    igh_eeprom_read_threshold_settings(&local_buffer);
   d4342:	a801      	add	r0, sp, #4
   d4344:	f7ff ffcc 	bl	d42e0 <_Z34igh_eeprom_read_threshold_settingsP10thresholds>

    if( local_buffer.checksum != (settings_to_save->checksum))
    {
        return 0;
   d4348:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d434c:	7823      	ldrb	r3, [r4, #0]
    }

    return 1;
}
   d434e:	1ac3      	subs	r3, r0, r3
   d4350:	4258      	negs	r0, r3
   d4352:	4158      	adcs	r0, r3
   d4354:	b00e      	add	sp, #56	; 0x38
   d4356:	bd10      	pop	{r4, pc}

000d4358 <_Z21igh_eeprom_get_errorsPm>:
 * \brief Gets errors stored in eeprom
 * \param error_bit_field; uint32 bit fiel to populate
 * \return void
 */
void igh_eeprom_get_errors(uint32_t * error_bit_field)
{
   d4358:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t _error = 0;
   d435a:	ac02      	add	r4, sp, #8
   d435c:	2300      	movs	r3, #0
   d435e:	f844 3d04 	str.w	r3, [r4, #-4]!
 * \brief Gets errors stored in eeprom
 * \param error_bit_field; uint32 bit fiel to populate
 * \return void
 */
void igh_eeprom_get_errors(uint32_t * error_bit_field)
{
   d4362:	4605      	mov	r5, r0
    uint32_t _error = 0;
    EEPROM.get(SYSTEM_ERRORS_ADDRESS, _error);
   d4364:	f001 fbe2 	bl	d5b2c <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4368:	2204      	movs	r2, #4
   d436a:	4621      	mov	r1, r4
   d436c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   d4370:	f000 f9de 	bl	d4730 <HAL_EEPROM_Get>
    *error_bit_field = _error;
   d4374:	9b01      	ldr	r3, [sp, #4]
   d4376:	602b      	str	r3, [r5, #0]
}
   d4378:	b003      	add	sp, #12
   d437a:	bd30      	pop	{r4, r5, pc}

000d437c <_Z16igh_eeproom_testv>:
 * \brief Tests that we can read and write to the EEPROM just fine
 * \param void
 * \return true or false
 */
uint8_t igh_eeproom_test(void)
{
   d437c:	b5f0      	push	{r4, r5, r6, r7, lr}
    thresholds test_thresholds;
    system_settings test_system_settings;

    uint8_t test_shield_id[12] = {0xe0,0x0f,0xce,0x68,0x9a,0x75,0x47,0x05,0xe7,0x9a,0x0e,0x37};
   d437e:	4a42      	ldr	r2, [pc, #264]	; (d4488 <_Z16igh_eeproom_testv+0x10c>)
 * \brief Tests that we can read and write to the EEPROM just fine
 * \param void
 * \return true or false
 */
uint8_t igh_eeproom_test(void)
{
   d4380:	b0a5      	sub	sp, #148	; 0x94
    thresholds test_thresholds;
    system_settings test_system_settings;

    uint8_t test_shield_id[12] = {0xe0,0x0f,0xce,0x68,0x9a,0x75,0x47,0x05,0xe7,0x9a,0x0e,0x37};
   d4382:	6810      	ldr	r0, [r2, #0]
   d4384:	6851      	ldr	r1, [r2, #4]
   d4386:	ab01      	add	r3, sp, #4
   d4388:	c303      	stmia	r3!, {r0, r1}
   d438a:	6890      	ldr	r0, [r2, #8]
   d438c:	6018      	str	r0, [r3, #0]
    uint8_t test_broker[] = "test.broker.com";
   d438e:	4b3f      	ldr	r3, [pc, #252]	; (d448c <_Z16igh_eeproom_testv+0x110>)
   d4390:	aa04      	add	r2, sp, #16
   d4392:	f103 0710 	add.w	r7, r3, #16
   d4396:	ae01      	add	r6, sp, #4
   d4398:	4615      	mov	r5, r2
   d439a:	6818      	ldr	r0, [r3, #0]
   d439c:	6859      	ldr	r1, [r3, #4]
   d439e:	4614      	mov	r4, r2
   d43a0:	c403      	stmia	r4!, {r0, r1}
   d43a2:	3308      	adds	r3, #8
   d43a4:	42bb      	cmp	r3, r7
   d43a6:	4622      	mov	r2, r4
   d43a8:	d1f7      	bne.n	d439a <_Z16igh_eeproom_testv+0x1e>

    memset(&test_system_settings, 0, sizeof(test_system_settings));
   d43aa:	223c      	movs	r2, #60	; 0x3c
   d43ac:	2100      	movs	r1, #0
   d43ae:	a815      	add	r0, sp, #84	; 0x54
   d43b0:	f002 fa93 	bl	d68da <memset>
    memset(&test_thresholds, 0, sizeof(test_thresholds));
   d43b4:	2234      	movs	r2, #52	; 0x34
   d43b6:	2100      	movs	r1, #0
   d43b8:	a808      	add	r0, sp, #32
   d43ba:	f002 fa8e 	bl	d68da <memset>

    memcpy(test_system_settings.serial_number, test_shield_id, 12);
   d43be:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   d43c2:	ab18      	add	r3, sp, #96	; 0x60
   d43c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    memcpy(test_system_settings.broker, test_broker, sizeof(test_broker));
   d43c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   d43cc:	ac1b      	add	r4, sp, #108	; 0x6c
   d43ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    test_system_settings.op_state = OP_INACTIVE;
    test_system_settings.reporting_interval = 0x11111111;
   d43d2:	f04f 3511 	mov.w	r5, #286331153	; 0x11111111
    test_system_settings.data_resolution = 0x11111111;
    test_system_settings.broker_port = 0x1111;
   d43d6:	f241 1411 	movw	r4, #4369	; 0x1111
    test_system_settings.checksum = igh_settings_calculate_checksum(&test_system_settings, sizeof(test_system_settings));
   d43da:	213c      	movs	r1, #60	; 0x3c
   d43dc:	a815      	add	r0, sp, #84	; 0x54
    memcpy(test_system_settings.serial_number, test_shield_id, 12);
    memcpy(test_system_settings.broker, test_broker, sizeof(test_broker));
    test_system_settings.op_state = OP_INACTIVE;
    test_system_settings.reporting_interval = 0x11111111;
    test_system_settings.data_resolution = 0x11111111;
    test_system_settings.broker_port = 0x1111;
   d43de:	f8ad 408c 	strh.w	r4, [sp, #140]	; 0x8c
    memset(&test_thresholds, 0, sizeof(test_thresholds));

    memcpy(test_system_settings.serial_number, test_shield_id, 12);
    memcpy(test_system_settings.broker, test_broker, sizeof(test_broker));
    test_system_settings.op_state = OP_INACTIVE;
    test_system_settings.reporting_interval = 0x11111111;
   d43e2:	9516      	str	r5, [sp, #88]	; 0x58
    test_system_settings.data_resolution = 0x11111111;
   d43e4:	9517      	str	r5, [sp, #92]	; 0x5c
    test_system_settings.broker_port = 0x1111;
    test_system_settings.checksum = igh_settings_calculate_checksum(&test_system_settings, sizeof(test_system_settings));
   d43e6:	f7ff fe62 	bl	d40ae <igh_settings_calculate_checksum>
    test_thresholds.shield_battery_level_high = 0x1111;
    test_thresholds.spear_battery_level_low = 0x1111;
    test_thresholds.spear_battery_level_high = 0x1111;
    test_thresholds.water_dispensed_period_high = 0x11111111;
    test_thresholds.water_dispensed_period_low = 0x11111111;
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));
   d43ea:	2134      	movs	r1, #52	; 0x34
    memcpy(test_system_settings.broker, test_broker, sizeof(test_broker));
    test_system_settings.op_state = OP_INACTIVE;
    test_system_settings.reporting_interval = 0x11111111;
    test_system_settings.data_resolution = 0x11111111;
    test_system_settings.broker_port = 0x1111;
    test_system_settings.checksum = igh_settings_calculate_checksum(&test_system_settings, sizeof(test_system_settings));
   d43ec:	f88d 0054 	strb.w	r0, [sp, #84]	; 0x54
    test_thresholds.shield_battery_level_high = 0x1111;
    test_thresholds.spear_battery_level_low = 0x1111;
    test_thresholds.spear_battery_level_high = 0x1111;
    test_thresholds.water_dispensed_period_high = 0x11111111;
    test_thresholds.water_dispensed_period_low = 0x11111111;
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));
   d43f0:	a808      	add	r0, sp, #32
    test_system_settings.reporting_interval = 0x11111111;
    test_system_settings.data_resolution = 0x11111111;
    test_system_settings.broker_port = 0x1111;
    test_system_settings.checksum = igh_settings_calculate_checksum(&test_system_settings, sizeof(test_system_settings));

    test_thresholds.soil_moisture_low = 0x1111;
   d43f2:	f8ad 4022 	strh.w	r4, [sp, #34]	; 0x22
    test_thresholds.soil_moisture_high = 0x1111;
   d43f6:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    test_thresholds.air_humidity_low = 0x1111;
   d43fa:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
    test_thresholds.air_humidity_high = 0x1111;
   d43fe:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
    test_thresholds.soil_humidity_low = 0x1111;
   d4402:	f8ad 4026 	strh.w	r4, [sp, #38]	; 0x26
    test_thresholds.soil_humidity_high = 0x1111;
   d4406:	f8ad 4040 	strh.w	r4, [sp, #64]	; 0x40
    test_thresholds.carbon_dioxide_low = 0x1111;
   d440a:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
    test_thresholds.carbon_dioxide_high = 0x1111;
   d440e:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
    test_thresholds.air_temperature_low = 0x1111;
   d4412:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
    test_thresholds.air_temperature_high = 0x1111;
   d4416:	f8ad 4044 	strh.w	r4, [sp, #68]	; 0x44
    test_thresholds.soil_temperature_low = 0x1111;
   d441a:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
    test_thresholds.soil_temperature_high = 0x1111;
   d441e:	f8ad 4046 	strh.w	r4, [sp, #70]	; 0x46
    test_thresholds.soil_npk_low = 0x1111;
   d4422:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    test_thresholds.soil_npk_high = 0x1111;
   d4426:	f8ad 4048 	strh.w	r4, [sp, #72]	; 0x48
    test_thresholds.light_intensity_high = 0x1111;
   d442a:	f8ad 404a 	strh.w	r4, [sp, #74]	; 0x4a
    test_thresholds.light_intensity_low = 0x1111;
   d442e:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
    test_thresholds.shield_battery_level_low = 0x1111;
   d4432:	f8ad 4032 	strh.w	r4, [sp, #50]	; 0x32
    test_thresholds.shield_battery_level_high = 0x1111;
   d4436:	f8ad 404c 	strh.w	r4, [sp, #76]	; 0x4c
    test_thresholds.spear_battery_level_low = 0x1111;
   d443a:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    test_thresholds.spear_battery_level_high = 0x1111;
   d443e:	f8ad 404e 	strh.w	r4, [sp, #78]	; 0x4e
    test_thresholds.water_dispensed_period_high = 0x11111111;
   d4442:	9514      	str	r5, [sp, #80]	; 0x50
    test_thresholds.water_dispensed_period_low = 0x11111111;
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));

    uint32_t test_error = 0xAAAAAAAA;
    uint32_t ret_test_error = 0;
   d4444:	ac24      	add	r4, sp, #144	; 0x90
    test_thresholds.shield_battery_level_low = 0x1111;
    test_thresholds.shield_battery_level_high = 0x1111;
    test_thresholds.spear_battery_level_low = 0x1111;
    test_thresholds.spear_battery_level_high = 0x1111;
    test_thresholds.water_dispensed_period_high = 0x11111111;
    test_thresholds.water_dispensed_period_low = 0x11111111;
   d4446:	950e      	str	r5, [sp, #56]	; 0x38
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));
   d4448:	f7ff fe31 	bl	d40ae <igh_settings_calculate_checksum>

    uint32_t test_error = 0xAAAAAAAA;
    uint32_t ret_test_error = 0;
   d444c:	2300      	movs	r3, #0
   d444e:	f844 3d90 	str.w	r3, [r4, #-144]!
    test_thresholds.shield_battery_level_high = 0x1111;
    test_thresholds.spear_battery_level_low = 0x1111;
    test_thresholds.spear_battery_level_high = 0x1111;
    test_thresholds.water_dispensed_period_high = 0x11111111;
    test_thresholds.water_dispensed_period_low = 0x11111111;
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));
   d4452:	f88d 0020 	strb.w	r0, [sp, #32]

    uint32_t test_error = 0xAAAAAAAA;
    uint32_t ret_test_error = 0;
    igh_eeprom_update_errors(test_error);
   d4456:	f04f 30aa 	mov.w	r0, #2863311530	; 0xaaaaaaaa
   d445a:	f7ff fef7 	bl	d424c <_Z24igh_eeprom_update_errorsm>
    igh_eeprom_get_errors(&ret_test_error);
   d445e:	4620      	mov	r0, r4
   d4460:	f7ff ff7a 	bl	d4358 <_Z21igh_eeprom_get_errorsPm>

    return igh_eeprom_save_system_settings(&test_system_settings)
   d4464:	a815      	add	r0, sp, #84	; 0x54
   d4466:	f7ff ff26 	bl	d42b6 <_Z31igh_eeprom_save_system_settingsP15system_settings>
           && igh_eeprom_save_threshold_settings(&test_thresholds)
           && (ret_test_error == test_error);
   d446a:	b908      	cbnz	r0, d4470 <_Z16igh_eeproom_testv+0xf4>
   d446c:	2000      	movs	r0, #0
   d446e:	e009      	b.n	d4484 <_Z16igh_eeproom_testv+0x108>
    uint32_t ret_test_error = 0;
    igh_eeprom_update_errors(test_error);
    igh_eeprom_get_errors(&ret_test_error);

    return igh_eeprom_save_system_settings(&test_system_settings)
           && igh_eeprom_save_threshold_settings(&test_thresholds)
   d4470:	a808      	add	r0, sp, #32
   d4472:	f7ff ff5b 	bl	d432c <_Z34igh_eeprom_save_threshold_settingsP10thresholds>
   d4476:	2800      	cmp	r0, #0
   d4478:	d0f8      	beq.n	d446c <_Z16igh_eeproom_testv+0xf0>
           && (ret_test_error == test_error);
   d447a:	9800      	ldr	r0, [sp, #0]
   d447c:	f1a0 33aa 	sub.w	r3, r0, #2863311530	; 0xaaaaaaaa
   d4480:	4258      	negs	r0, r3
   d4482:	4158      	adcs	r0, r3
}
   d4484:	b025      	add	sp, #148	; 0x94
   d4486:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4488:	000d69b5 	.word	0x000d69b5
   d448c:	000d69c1 	.word	0x000d69c1

000d4490 <_GLOBAL__sub_I__Z31igh_eeprom_save_system_settingsP15system_settings>:
   d4490:	f000 b926 	b.w	d46e0 <HAL_Pin_Map>

000d4494 <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
   d4494:	f000 b924 	b.w	d46e0 <HAL_Pin_Map>

000d4498 <_ZN14CellularSignalD1Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d4498:	4770      	bx	lr

000d449a <_ZN14CellularSignalD0Ev>:
   d449a:	b510      	push	{r4, lr}
   d449c:	2128      	movs	r1, #40	; 0x28
   d449e:	4604      	mov	r4, r0
   d44a0:	f001 fba6 	bl	d5bf0 <_ZdlPvj>
   d44a4:	4620      	mov	r0, r4
   d44a6:	bd10      	pop	{r4, pc}

000d44a8 <_Z19igh_boron_sync_timev>:
unsigned long unix_time;


/* Functions */
void igh_boron_sync_time(void)
{
   d44a8:	b510      	push	{r4, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d44aa:	f000 f929 	bl	d4700 <HAL_Timer_Get_Milli_Seconds>
    if((millis() - lastSync > ONE_DAY_MILLIS))
   d44ae:	4b08      	ldr	r3, [pc, #32]	; (d44d0 <_Z19igh_boron_sync_timev+0x28>)
   d44b0:	681a      	ldr	r2, [r3, #0]
   d44b2:	1a80      	subs	r0, r0, r2
   d44b4:	4a07      	ldr	r2, [pc, #28]	; (d44d4 <_Z19igh_boron_sync_timev+0x2c>)
   d44b6:	4290      	cmp	r0, r2
   d44b8:	461c      	mov	r4, r3
   d44ba:	d908      	bls.n	d44ce <_Z19igh_boron_sync_timev+0x26>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d44bc:	f000 fadc 	bl	d4a78 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d44c0:	b110      	cbz	r0, d44c8 <_Z19igh_boron_sync_timev+0x20>
            return false;
        }
        return spark_sync_time(NULL);
   d44c2:	2000      	movs	r0, #0
   d44c4:	f000 fae0 	bl	d4a88 <spark_sync_time>
   d44c8:	f000 f91a 	bl	d4700 <HAL_Timer_Get_Milli_Seconds>
    {
        Particle.syncTime();
        lastSync = millis(); 
   d44cc:	6020      	str	r0, [r4, #0]
   d44ce:	bd10      	pop	{r4, pc}
   d44d0:	2003e3a0 	.word	0x2003e3a0
   d44d4:	05265c00 	.word	0x05265c00

000d44d8 <_Z13igh_boron_SoCv>:
    return Time.now();
}

float igh_boron_SoC(void)
{
    return fuel.getSoC();
   d44d8:	4801      	ldr	r0, [pc, #4]	; (d44e0 <_Z13igh_boron_SoCv+0x8>)
   d44da:	f000 be91 	b.w	d5200 <_ZN9FuelGauge6getSoCEv>
   d44de:	bf00      	nop
   d44e0:	2003e3a4 	.word	0x2003e3a4

000d44e4 <_Z17igh_boron_voltagev>:
}

float igh_boron_voltage(void)
{
    return fuel.getVCell();
   d44e4:	4801      	ldr	r0, [pc, #4]	; (d44ec <_Z17igh_boron_voltagev+0x8>)
   d44e6:	f000 be75 	b.w	d51d4 <_ZN9FuelGauge8getVCellEv>
   d44ea:	bf00      	nop
   d44ec:	2003e3a4 	.word	0x2003e3a4

000d44f0 <_Z26igh_boron_get_celular_datav>:
}

void igh_boron_get_celular_data(void)
{
   d44f0:	b530      	push	{r4, r5, lr}
   d44f2:	b08b      	sub	sp, #44	; 0x2c
    signal = Cellular.RSSI();
   d44f4:	4668      	mov	r0, sp
#include "cellular_enums_hal.h"

/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
   d44f6:	4c09      	ldr	r4, [pc, #36]	; (d451c <_Z26igh_boron_get_celular_datav+0x2c>)
   d44f8:	4909      	ldr	r1, [pc, #36]	; (d4520 <_Z26igh_boron_get_celular_datav+0x30>)
   d44fa:	f001 f85d 	bl	d55b8 <_ZN5spark13CellularClass4RSSIEv>
   d44fe:	9b02      	ldr	r3, [sp, #8]
   d4500:	60a3      	str	r3, [r4, #8]
   d4502:	ad04      	add	r5, sp, #16
   d4504:	9b03      	ldr	r3, [sp, #12]
   d4506:	60e3      	str	r3, [r4, #12]
   d4508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d450a:	3410      	adds	r4, #16
   d450c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d450e:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4512:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d4516:	b00b      	add	sp, #44	; 0x2c
   d4518:	bd30      	pop	{r4, r5, pc}
   d451a:	bf00      	nop
   d451c:	2003e378 	.word	0x2003e378
   d4520:	2003e3fc 	.word	0x2003e3fc

000d4524 <_Z12igh_boron_ssv>:
    return signal.getQuality();
}

float igh_boron_ss(void)
{
    return signal.getQuality();
   d4524:	4801      	ldr	r0, [pc, #4]	; (d452c <_Z12igh_boron_ssv+0x8>)
   d4526:	f000 bd83 	b.w	d5030 <_ZNK14CellularSignal10getQualityEv>
   d452a:	bf00      	nop
   d452c:	2003e378 	.word	0x2003e378

000d4530 <_Z30igh_boron_connecetd_to_networkv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4530:	4b02      	ldr	r3, [pc, #8]	; (d453c <_Z30igh_boron_connecetd_to_networkv+0xc>)
   d4532:	2200      	movs	r2, #0
   d4534:	4611      	mov	r1, r2
   d4536:	6858      	ldr	r0, [r3, #4]
   d4538:	f000 ba5e 	b.w	d49f8 <network_ready>
   d453c:	2003e3fc 	.word	0x2003e3fc

000d4540 <_Z15igh_boron_setupv>:
{
    return Particle.connected();;
}

void igh_boron_setup(void)
{
   d4540:	b508      	push	{r3, lr}
   d4542:	f000 f8dd 	bl	d4700 <HAL_Timer_Get_Milli_Seconds>
    lastSync = millis();
   d4546:	4b01      	ldr	r3, [pc, #4]	; (d454c <_Z15igh_boron_setupv+0xc>)
   d4548:	6018      	str	r0, [r3, #0]
   d454a:	bd08      	pop	{r3, pc}
   d454c:	2003e3a0 	.word	0x2003e3a0

000d4550 <_Z17igh_boron_servicev>:
}

void igh_boron_service(void)
{
   d4550:	b508      	push	{r3, lr}
    igh_boron_sync_time();
   d4552:	f7ff ffa9 	bl	d44a8 <_Z19igh_boron_sync_timev>
    igh_boron_get_celular_data();
}
   d4556:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void igh_boron_service(void)
{
    igh_boron_sync_time();
    igh_boron_get_celular_data();
   d455a:	f7ff bfc9 	b.w	d44f0 <_Z26igh_boron_get_celular_datav>
	...

000d4560 <_Z21igh_boron_test_devicev>:
}

void igh_boron_test_device(void)
{
   d4560:	b510      	push	{r4, lr}
    Serial.print("\nUnix Time:     "); Serial.println(igh_boron_unix_time());
   d4562:	f000 ffcf 	bl	d5504 <_Z16_fetch_usbserialv>
   d4566:	4937      	ldr	r1, [pc, #220]	; (d4644 <_Z21igh_boron_test_devicev+0xe4>)
   d4568:	f000 fbc2 	bl	d4cf0 <_ZN5Print5printEPKc>
   d456c:	f000 ffca 	bl	d5504 <_Z16_fetch_usbserialv>
   d4570:	4604      	mov	r4, r0
    }
}

unsigned long igh_boron_unix_time(void)
{
    return Time.now();
   d4572:	f000 fcff 	bl	d4f74 <_ZN9TimeClass3nowEv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4576:	220a      	movs	r2, #10
   d4578:	4601      	mov	r1, r0
   d457a:	4620      	mov	r0, r4
   d457c:	f000 fbcb 	bl	d4d16 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4580:	4620      	mov	r0, r4
   d4582:	f000 fbbc 	bl	d4cfe <_ZN5Print7printlnEv>
}

void igh_boron_test_device(void)
{
    Serial.print("\nUnix Time:     "); Serial.println(igh_boron_unix_time());
    Serial.print("cloud status:    "); Serial.println(igh_boron_connected_to_cloud());
   d4586:	f000 ffbd 	bl	d5504 <_Z16_fetch_usbserialv>
   d458a:	492f      	ldr	r1, [pc, #188]	; (d4648 <_Z21igh_boron_test_devicev+0xe8>)
   d458c:	f000 fbb0 	bl	d4cf0 <_ZN5Print5printEPKc>
   d4590:	f000 ffb8 	bl	d5504 <_Z16_fetch_usbserialv>
   d4594:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4596:	f000 fa6f 	bl	d4a78 <spark_cloud_flag_connected>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d459a:	220a      	movs	r2, #10
   d459c:	4601      	mov	r1, r0
   d459e:	4620      	mov	r0, r4
   d45a0:	f000 fbb9 	bl	d4d16 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d45a4:	4620      	mov	r0, r4
   d45a6:	f000 fbaa 	bl	d4cfe <_ZN5Print7printlnEv>
    Serial.print("network status:  "); Serial.println(igh_boron_connecetd_to_network());
   d45aa:	f000 ffab 	bl	d5504 <_Z16_fetch_usbserialv>
   d45ae:	4927      	ldr	r1, [pc, #156]	; (d464c <_Z21igh_boron_test_devicev+0xec>)
   d45b0:	f000 fb9e 	bl	d4cf0 <_ZN5Print5printEPKc>
   d45b4:	f000 ffa6 	bl	d5504 <_Z16_fetch_usbserialv>
   d45b8:	4604      	mov	r4, r0
   d45ba:	f7ff ffb9 	bl	d4530 <_Z30igh_boron_connecetd_to_networkv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d45be:	220a      	movs	r2, #10
   d45c0:	4601      	mov	r1, r0
   d45c2:	4620      	mov	r0, r4
   d45c4:	f000 fba7 	bl	d4d16 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d45c8:	4620      	mov	r0, r4
   d45ca:	f000 fb98 	bl	d4cfe <_ZN5Print7printlnEv>
    Serial.print("signal strength: "); Serial.println(igh_boron_ss());
   d45ce:	f000 ff99 	bl	d5504 <_Z16_fetch_usbserialv>
   d45d2:	491f      	ldr	r1, [pc, #124]	; (d4650 <_Z21igh_boron_test_devicev+0xf0>)
   d45d4:	f000 fb8c 	bl	d4cf0 <_ZN5Print5printEPKc>
   d45d8:	f000 ff94 	bl	d5504 <_Z16_fetch_usbserialv>
   d45dc:	4604      	mov	r4, r0
   d45de:	f7ff ffa1 	bl	d4524 <_Z12igh_boron_ssv>
   d45e2:	2102      	movs	r1, #2
   d45e4:	4620      	mov	r0, r4
   d45e6:	f000 fc80 	bl	d4eea <_ZN5Print7printlnEfi>
    Serial.print("signal quality:  "); Serial.println(igh_boron_sq());
   d45ea:	f000 ff8b 	bl	d5504 <_Z16_fetch_usbserialv>
   d45ee:	4919      	ldr	r1, [pc, #100]	; (d4654 <_Z21igh_boron_test_devicev+0xf4>)
   d45f0:	f000 fb7e 	bl	d4cf0 <_ZN5Print5printEPKc>
   d45f4:	f000 ff86 	bl	d5504 <_Z16_fetch_usbserialv>
   d45f8:	4604      	mov	r4, r0
   d45fa:	f7ff ff93 	bl	d4524 <_Z12igh_boron_ssv>
   d45fe:	2102      	movs	r1, #2
   d4600:	4620      	mov	r0, r4
   d4602:	f000 fc72 	bl	d4eea <_ZN5Print7printlnEfi>
    Serial.print("Battery Voltage: "); Serial.println(igh_boron_voltage());
   d4606:	f000 ff7d 	bl	d5504 <_Z16_fetch_usbserialv>
   d460a:	4913      	ldr	r1, [pc, #76]	; (d4658 <_Z21igh_boron_test_devicev+0xf8>)
   d460c:	f000 fb70 	bl	d4cf0 <_ZN5Print5printEPKc>
   d4610:	f000 ff78 	bl	d5504 <_Z16_fetch_usbserialv>
   d4614:	4604      	mov	r4, r0
   d4616:	f7ff ff65 	bl	d44e4 <_Z17igh_boron_voltagev>
   d461a:	2102      	movs	r1, #2
   d461c:	4620      	mov	r0, r4
   d461e:	f000 fc64 	bl	d4eea <_ZN5Print7printlnEfi>
    Serial.print("Battery SOC:     "); Serial.println(igh_boron_SoC());
   d4622:	f000 ff6f 	bl	d5504 <_Z16_fetch_usbserialv>
   d4626:	490d      	ldr	r1, [pc, #52]	; (d465c <_Z21igh_boron_test_devicev+0xfc>)
   d4628:	f000 fb62 	bl	d4cf0 <_ZN5Print5printEPKc>
   d462c:	f000 ff6a 	bl	d5504 <_Z16_fetch_usbserialv>
   d4630:	4604      	mov	r4, r0
   d4632:	f7ff ff51 	bl	d44d8 <_Z13igh_boron_SoCv>
   d4636:	4620      	mov	r0, r4
   d4638:	2102      	movs	r1, #2
}
   d463a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.print("cloud status:    "); Serial.println(igh_boron_connected_to_cloud());
    Serial.print("network status:  "); Serial.println(igh_boron_connecetd_to_network());
    Serial.print("signal strength: "); Serial.println(igh_boron_ss());
    Serial.print("signal quality:  "); Serial.println(igh_boron_sq());
    Serial.print("Battery Voltage: "); Serial.println(igh_boron_voltage());
    Serial.print("Battery SOC:     "); Serial.println(igh_boron_SoC());
   d463e:	f000 bc54 	b.w	d4eea <_ZN5Print7printlnEfi>
   d4642:	bf00      	nop
   d4644:	000d69d1 	.word	0x000d69d1
   d4648:	000d69e2 	.word	0x000d69e2
   d464c:	000d69f4 	.word	0x000d69f4
   d4650:	000d6a06 	.word	0x000d6a06
   d4654:	000d6a18 	.word	0x000d6a18
   d4658:	000d6a2a 	.word	0x000d6a2a
   d465c:	000d6a3c 	.word	0x000d6a3c

000d4660 <_GLOBAL__sub_I_lastSync>:
}
   d4660:	b570      	push	{r4, r5, r6, lr}
   d4662:	f000 f83d 	bl	d46e0 <HAL_Pin_Map>
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d4666:	4c10      	ldr	r4, [pc, #64]	; (d46a8 <_GLOBAL__sub_I_lastSync+0x48>)
   d4668:	4b10      	ldr	r3, [pc, #64]	; (d46ac <_GLOBAL__sub_I_lastSync+0x4c>)
   d466a:	6023      	str	r3, [r4, #0]
   d466c:	2500      	movs	r5, #0
   d466e:	3328      	adds	r3, #40	; 0x28
   d4670:	4629      	mov	r1, r5
#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)

unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
   d4672:	4e0f      	ldr	r6, [pc, #60]	; (d46b0 <_GLOBAL__sub_I_lastSync+0x50>)
   d4674:	6063      	str	r3, [r4, #4]
   d4676:	2218      	movs	r2, #24
   d4678:	f104 0010 	add.w	r0, r4, #16
   d467c:	60a5      	str	r5, [r4, #8]
   d467e:	60e5      	str	r5, [r4, #12]
   d4680:	f002 f92b 	bl	d68da <memset>
   d4684:	4620      	mov	r0, r4
float signal_quality, signal_strength;
FuelGauge fuel;
   d4686:	4c0b      	ldr	r4, [pc, #44]	; (d46b4 <_GLOBAL__sub_I_lastSync+0x54>)
#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)

unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
   d4688:	490b      	ldr	r1, [pc, #44]	; (d46b8 <_GLOBAL__sub_I_lastSync+0x58>)
   d468a:	4632      	mov	r2, r6
   d468c:	f001 faa2 	bl	d5bd4 <__aeabi_atexit>
float signal_quality, signal_strength;
FuelGauge fuel;
   d4690:	4629      	mov	r1, r5
   d4692:	4620      	mov	r0, r4
   d4694:	f000 fd5e 	bl	d5154 <_ZN9FuelGaugeC1Eb>
   d4698:	4632      	mov	r2, r6
   d469a:	4620      	mov	r0, r4
   d469c:	4907      	ldr	r1, [pc, #28]	; (d46bc <_GLOBAL__sub_I_lastSync+0x5c>)
    Serial.print("network status:  "); Serial.println(igh_boron_connecetd_to_network());
    Serial.print("signal strength: "); Serial.println(igh_boron_ss());
    Serial.print("signal quality:  "); Serial.println(igh_boron_sq());
    Serial.print("Battery Voltage: "); Serial.println(igh_boron_voltage());
    Serial.print("Battery SOC:     "); Serial.println(igh_boron_SoC());
}
   d469e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
float signal_quality, signal_strength;
FuelGauge fuel;
   d46a2:	f001 ba97 	b.w	d5bd4 <__aeabi_atexit>
   d46a6:	bf00      	nop
   d46a8:	2003e378 	.word	0x2003e378
   d46ac:	000d6ba4 	.word	0x000d6ba4
   d46b0:	2003e374 	.word	0x2003e374
   d46b4:	2003e3a4 	.word	0x2003e3a4
   d46b8:	000d4499 	.word	0x000d4499
   d46bc:	000d5173 	.word	0x000d5173

000d46c0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d46c0:	b508      	push	{r3, lr}
   d46c2:	4b02      	ldr	r3, [pc, #8]	; (d46cc <netdb_freeaddrinfo+0xc>)
   d46c4:	681b      	ldr	r3, [r3, #0]
   d46c6:	689b      	ldr	r3, [r3, #8]
   d46c8:	9301      	str	r3, [sp, #4]
   d46ca:	bd08      	pop	{r3, pc}
   d46cc:	00030268 	.word	0x00030268

000d46d0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d46d0:	b508      	push	{r3, lr}
   d46d2:	4b02      	ldr	r3, [pc, #8]	; (d46dc <netdb_getaddrinfo+0xc>)
   d46d4:	681b      	ldr	r3, [r3, #0]
   d46d6:	68db      	ldr	r3, [r3, #12]
   d46d8:	9301      	str	r3, [sp, #4]
   d46da:	bd08      	pop	{r3, pc}
   d46dc:	00030268 	.word	0x00030268

000d46e0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d46e0:	b508      	push	{r3, lr}
   d46e2:	4b02      	ldr	r3, [pc, #8]	; (d46ec <HAL_Pin_Map+0xc>)
   d46e4:	681b      	ldr	r3, [r3, #0]
   d46e6:	681b      	ldr	r3, [r3, #0]
   d46e8:	9301      	str	r3, [sp, #4]
   d46ea:	bd08      	pop	{r3, pc}
   d46ec:	0003022c 	.word	0x0003022c

000d46f0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d46f0:	b508      	push	{r3, lr}
   d46f2:	4b02      	ldr	r3, [pc, #8]	; (d46fc <HAL_RNG_GetRandomNumber+0xc>)
   d46f4:	681b      	ldr	r3, [r3, #0]
   d46f6:	685b      	ldr	r3, [r3, #4]
   d46f8:	9301      	str	r3, [sp, #4]
   d46fa:	bd08      	pop	{r3, pc}
   d46fc:	00030218 	.word	0x00030218

000d4700 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4700:	b508      	push	{r3, lr}
   d4702:	4b02      	ldr	r3, [pc, #8]	; (d470c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4704:	681b      	ldr	r3, [r3, #0]
   d4706:	695b      	ldr	r3, [r3, #20]
   d4708:	9301      	str	r3, [sp, #4]
   d470a:	bd08      	pop	{r3, pc}
   d470c:	00030218 	.word	0x00030218

000d4710 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d4710:	b508      	push	{r3, lr}
   d4712:	4b02      	ldr	r3, [pc, #8]	; (d471c <HAL_RTC_Get_UnixTime+0xc>)
   d4714:	681b      	ldr	r3, [r3, #0]
   d4716:	69db      	ldr	r3, [r3, #28]
   d4718:	9301      	str	r3, [sp, #4]
   d471a:	bd08      	pop	{r3, pc}
   d471c:	00030218 	.word	0x00030218

000d4720 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d4720:	b508      	push	{r3, lr}
   d4722:	4b02      	ldr	r3, [pc, #8]	; (d472c <HAL_EEPROM_Init+0xc>)
   d4724:	681b      	ldr	r3, [r3, #0]
   d4726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4728:	9301      	str	r3, [sp, #4]
   d472a:	bd08      	pop	{r3, pc}
   d472c:	00030218 	.word	0x00030218

000d4730 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d4730:	b508      	push	{r3, lr}
   d4732:	4b02      	ldr	r3, [pc, #8]	; (d473c <HAL_EEPROM_Get+0xc>)
   d4734:	681b      	ldr	r3, [r3, #0]
   d4736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4738:	9301      	str	r3, [sp, #4]
   d473a:	bd08      	pop	{r3, pc}
   d473c:	00030218 	.word	0x00030218

000d4740 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d4740:	b508      	push	{r3, lr}
   d4742:	4b02      	ldr	r3, [pc, #8]	; (d474c <HAL_EEPROM_Put+0xc>)
   d4744:	681b      	ldr	r3, [r3, #0]
   d4746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4748:	9301      	str	r3, [sp, #4]
   d474a:	bd08      	pop	{r3, pc}
   d474c:	00030218 	.word	0x00030218

000d4750 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d4750:	b508      	push	{r3, lr}
   d4752:	4b02      	ldr	r3, [pc, #8]	; (d475c <HAL_RTC_Time_Is_Valid+0xc>)
   d4754:	681b      	ldr	r3, [r3, #0]
   d4756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4758:	9301      	str	r3, [sp, #4]
   d475a:	bd08      	pop	{r3, pc}
   d475c:	00030218 	.word	0x00030218

000d4760 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4760:	b508      	push	{r3, lr}
   d4762:	4b02      	ldr	r3, [pc, #8]	; (d476c <os_thread_is_current+0xc>)
   d4764:	681b      	ldr	r3, [r3, #0]
   d4766:	689b      	ldr	r3, [r3, #8]
   d4768:	9301      	str	r3, [sp, #4]
   d476a:	bd08      	pop	{r3, pc}
   d476c:	00030248 	.word	0x00030248

000d4770 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4770:	b508      	push	{r3, lr}
   d4772:	4b02      	ldr	r3, [pc, #8]	; (d477c <os_thread_join+0xc>)
   d4774:	681b      	ldr	r3, [r3, #0]
   d4776:	691b      	ldr	r3, [r3, #16]
   d4778:	9301      	str	r3, [sp, #4]
   d477a:	bd08      	pop	{r3, pc}
   d477c:	00030248 	.word	0x00030248

000d4780 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4780:	b508      	push	{r3, lr}
   d4782:	4b02      	ldr	r3, [pc, #8]	; (d478c <os_thread_cleanup+0xc>)
   d4784:	681b      	ldr	r3, [r3, #0]
   d4786:	695b      	ldr	r3, [r3, #20]
   d4788:	9301      	str	r3, [sp, #4]
   d478a:	bd08      	pop	{r3, pc}
   d478c:	00030248 	.word	0x00030248

000d4790 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4790:	b508      	push	{r3, lr}
   d4792:	4b02      	ldr	r3, [pc, #8]	; (d479c <os_mutex_recursive_create+0xc>)
   d4794:	681b      	ldr	r3, [r3, #0]
   d4796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4798:	9301      	str	r3, [sp, #4]
   d479a:	bd08      	pop	{r3, pc}
   d479c:	00030248 	.word	0x00030248

000d47a0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d47a0:	b508      	push	{r3, lr}
   d47a2:	4b02      	ldr	r3, [pc, #8]	; (d47ac <os_mutex_recursive_destroy+0xc>)
   d47a4:	681b      	ldr	r3, [r3, #0]
   d47a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d47a8:	9301      	str	r3, [sp, #4]
   d47aa:	bd08      	pop	{r3, pc}
   d47ac:	00030248 	.word	0x00030248

000d47b0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d47b0:	b508      	push	{r3, lr}
   d47b2:	4b02      	ldr	r3, [pc, #8]	; (d47bc <inet_inet_ntop+0xc>)
   d47b4:	681b      	ldr	r3, [r3, #0]
   d47b6:	695b      	ldr	r3, [r3, #20]
   d47b8:	9301      	str	r3, [sp, #4]
   d47ba:	bd08      	pop	{r3, pc}
   d47bc:	00030264 	.word	0x00030264

000d47c0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d47c0:	b508      	push	{r3, lr}
   d47c2:	4b02      	ldr	r3, [pc, #8]	; (d47cc <HAL_USART_Init+0xc>)
   d47c4:	681b      	ldr	r3, [r3, #0]
   d47c6:	681b      	ldr	r3, [r3, #0]
   d47c8:	9301      	str	r3, [sp, #4]
   d47ca:	bd08      	pop	{r3, pc}
   d47cc:	0003023c 	.word	0x0003023c

000d47d0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d47d0:	b508      	push	{r3, lr}
   d47d2:	4b02      	ldr	r3, [pc, #8]	; (d47dc <HAL_USART_Write_Data+0xc>)
   d47d4:	681b      	ldr	r3, [r3, #0]
   d47d6:	68db      	ldr	r3, [r3, #12]
   d47d8:	9301      	str	r3, [sp, #4]
   d47da:	bd08      	pop	{r3, pc}
   d47dc:	0003023c 	.word	0x0003023c

000d47e0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d47e0:	b508      	push	{r3, lr}
   d47e2:	4b02      	ldr	r3, [pc, #8]	; (d47ec <HAL_USART_Available_Data+0xc>)
   d47e4:	681b      	ldr	r3, [r3, #0]
   d47e6:	691b      	ldr	r3, [r3, #16]
   d47e8:	9301      	str	r3, [sp, #4]
   d47ea:	bd08      	pop	{r3, pc}
   d47ec:	0003023c 	.word	0x0003023c

000d47f0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d47f0:	b508      	push	{r3, lr}
   d47f2:	4b02      	ldr	r3, [pc, #8]	; (d47fc <HAL_USART_Read_Data+0xc>)
   d47f4:	681b      	ldr	r3, [r3, #0]
   d47f6:	695b      	ldr	r3, [r3, #20]
   d47f8:	9301      	str	r3, [sp, #4]
   d47fa:	bd08      	pop	{r3, pc}
   d47fc:	0003023c 	.word	0x0003023c

000d4800 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4800:	b508      	push	{r3, lr}
   d4802:	4b02      	ldr	r3, [pc, #8]	; (d480c <HAL_USART_Peek_Data+0xc>)
   d4804:	681b      	ldr	r3, [r3, #0]
   d4806:	699b      	ldr	r3, [r3, #24]
   d4808:	9301      	str	r3, [sp, #4]
   d480a:	bd08      	pop	{r3, pc}
   d480c:	0003023c 	.word	0x0003023c

000d4810 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4810:	b508      	push	{r3, lr}
   d4812:	4b02      	ldr	r3, [pc, #8]	; (d481c <HAL_USART_Flush_Data+0xc>)
   d4814:	681b      	ldr	r3, [r3, #0]
   d4816:	69db      	ldr	r3, [r3, #28]
   d4818:	9301      	str	r3, [sp, #4]
   d481a:	bd08      	pop	{r3, pc}
   d481c:	0003023c 	.word	0x0003023c

000d4820 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4820:	b508      	push	{r3, lr}
   d4822:	4b02      	ldr	r3, [pc, #8]	; (d482c <HAL_USART_Available_Data_For_Write+0xc>)
   d4824:	681b      	ldr	r3, [r3, #0]
   d4826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4828:	9301      	str	r3, [sp, #4]
   d482a:	bd08      	pop	{r3, pc}
   d482c:	0003023c 	.word	0x0003023c

000d4830 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d4830:	b508      	push	{r3, lr}
   d4832:	4b02      	ldr	r3, [pc, #8]	; (d483c <HAL_I2C_Begin_Transmission+0xc>)
   d4834:	681b      	ldr	r3, [r3, #0]
   d4836:	699b      	ldr	r3, [r3, #24]
   d4838:	9301      	str	r3, [sp, #4]
   d483a:	bd08      	pop	{r3, pc}
   d483c:	00030228 	.word	0x00030228

000d4840 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4840:	b508      	push	{r3, lr}
   d4842:	4b02      	ldr	r3, [pc, #8]	; (d484c <HAL_I2C_End_Transmission+0xc>)
   d4844:	681b      	ldr	r3, [r3, #0]
   d4846:	69db      	ldr	r3, [r3, #28]
   d4848:	9301      	str	r3, [sp, #4]
   d484a:	bd08      	pop	{r3, pc}
   d484c:	00030228 	.word	0x00030228

000d4850 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4850:	b508      	push	{r3, lr}
   d4852:	4b02      	ldr	r3, [pc, #8]	; (d485c <HAL_I2C_Write_Data+0xc>)
   d4854:	681b      	ldr	r3, [r3, #0]
   d4856:	6a1b      	ldr	r3, [r3, #32]
   d4858:	9301      	str	r3, [sp, #4]
   d485a:	bd08      	pop	{r3, pc}
   d485c:	00030228 	.word	0x00030228

000d4860 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4860:	b508      	push	{r3, lr}
   d4862:	4b02      	ldr	r3, [pc, #8]	; (d486c <HAL_I2C_Available_Data+0xc>)
   d4864:	681b      	ldr	r3, [r3, #0]
   d4866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4868:	9301      	str	r3, [sp, #4]
   d486a:	bd08      	pop	{r3, pc}
   d486c:	00030228 	.word	0x00030228

000d4870 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4870:	b508      	push	{r3, lr}
   d4872:	4b02      	ldr	r3, [pc, #8]	; (d487c <HAL_I2C_Read_Data+0xc>)
   d4874:	681b      	ldr	r3, [r3, #0]
   d4876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4878:	9301      	str	r3, [sp, #4]
   d487a:	bd08      	pop	{r3, pc}
   d487c:	00030228 	.word	0x00030228

000d4880 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4880:	b508      	push	{r3, lr}
   d4882:	4b02      	ldr	r3, [pc, #8]	; (d488c <HAL_I2C_Peek_Data+0xc>)
   d4884:	681b      	ldr	r3, [r3, #0]
   d4886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4888:	9301      	str	r3, [sp, #4]
   d488a:	bd08      	pop	{r3, pc}
   d488c:	00030228 	.word	0x00030228

000d4890 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4890:	b508      	push	{r3, lr}
   d4892:	4b02      	ldr	r3, [pc, #8]	; (d489c <HAL_I2C_Flush_Data+0xc>)
   d4894:	681b      	ldr	r3, [r3, #0]
   d4896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4898:	9301      	str	r3, [sp, #4]
   d489a:	bd08      	pop	{r3, pc}
   d489c:	00030228 	.word	0x00030228

000d48a0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d48a0:	b508      	push	{r3, lr}
   d48a2:	4b02      	ldr	r3, [pc, #8]	; (d48ac <HAL_I2C_Init+0xc>)
   d48a4:	681b      	ldr	r3, [r3, #0]
   d48a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d48a8:	9301      	str	r3, [sp, #4]
   d48aa:	bd08      	pop	{r3, pc}
   d48ac:	00030228 	.word	0x00030228

000d48b0 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d48b0:	b508      	push	{r3, lr}
   d48b2:	4b02      	ldr	r3, [pc, #8]	; (d48bc <HAL_I2C_Acquire+0xc>)
   d48b4:	681b      	ldr	r3, [r3, #0]
   d48b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d48b8:	9301      	str	r3, [sp, #4]
   d48ba:	bd08      	pop	{r3, pc}
   d48bc:	00030228 	.word	0x00030228

000d48c0 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d48c0:	b508      	push	{r3, lr}
   d48c2:	4b02      	ldr	r3, [pc, #8]	; (d48cc <HAL_I2C_Release+0xc>)
   d48c4:	681b      	ldr	r3, [r3, #0]
   d48c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d48c8:	9301      	str	r3, [sp, #4]
   d48ca:	bd08      	pop	{r3, pc}
   d48cc:	00030228 	.word	0x00030228

000d48d0 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d48d0:	b508      	push	{r3, lr}
   d48d2:	4b02      	ldr	r3, [pc, #8]	; (d48dc <HAL_I2C_Request_Data_Ex+0xc>)
   d48d4:	681b      	ldr	r3, [r3, #0]
   d48d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d48d8:	9301      	str	r3, [sp, #4]
   d48da:	bd08      	pop	{r3, pc}
   d48dc:	00030228 	.word	0x00030228

000d48e0 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d48e0:	b508      	push	{r3, lr}
   d48e2:	4b02      	ldr	r3, [pc, #8]	; (d48ec <cellular_signal+0xc>)
   d48e4:	681b      	ldr	r3, [r3, #0]
   d48e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d48e8:	9301      	str	r3, [sp, #4]
   d48ea:	bd08      	pop	{r3, pc}
   d48ec:	00030274 	.word	0x00030274

000d48f0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d48f0:	b508      	push	{r3, lr}
   d48f2:	4b02      	ldr	r3, [pc, #8]	; (d48fc <HAL_USB_USART_Init+0xc>)
   d48f4:	681b      	ldr	r3, [r3, #0]
   d48f6:	681b      	ldr	r3, [r3, #0]
   d48f8:	9301      	str	r3, [sp, #4]
   d48fa:	bd08      	pop	{r3, pc}
   d48fc:	0003024c 	.word	0x0003024c

000d4900 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4900:	b508      	push	{r3, lr}
   d4902:	4b02      	ldr	r3, [pc, #8]	; (d490c <HAL_USB_USART_Begin+0xc>)
   d4904:	681b      	ldr	r3, [r3, #0]
   d4906:	685b      	ldr	r3, [r3, #4]
   d4908:	9301      	str	r3, [sp, #4]
   d490a:	bd08      	pop	{r3, pc}
   d490c:	0003024c 	.word	0x0003024c

000d4910 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4910:	b508      	push	{r3, lr}
   d4912:	4b02      	ldr	r3, [pc, #8]	; (d491c <HAL_USB_USART_Available_Data+0xc>)
   d4914:	681b      	ldr	r3, [r3, #0]
   d4916:	691b      	ldr	r3, [r3, #16]
   d4918:	9301      	str	r3, [sp, #4]
   d491a:	bd08      	pop	{r3, pc}
   d491c:	0003024c 	.word	0x0003024c

000d4920 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4920:	b508      	push	{r3, lr}
   d4922:	4b02      	ldr	r3, [pc, #8]	; (d492c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4924:	681b      	ldr	r3, [r3, #0]
   d4926:	695b      	ldr	r3, [r3, #20]
   d4928:	9301      	str	r3, [sp, #4]
   d492a:	bd08      	pop	{r3, pc}
   d492c:	0003024c 	.word	0x0003024c

000d4930 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4930:	b508      	push	{r3, lr}
   d4932:	4b02      	ldr	r3, [pc, #8]	; (d493c <HAL_USB_USART_Receive_Data+0xc>)
   d4934:	681b      	ldr	r3, [r3, #0]
   d4936:	699b      	ldr	r3, [r3, #24]
   d4938:	9301      	str	r3, [sp, #4]
   d493a:	bd08      	pop	{r3, pc}
   d493c:	0003024c 	.word	0x0003024c

000d4940 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4940:	b508      	push	{r3, lr}
   d4942:	4b02      	ldr	r3, [pc, #8]	; (d494c <HAL_USB_USART_Send_Data+0xc>)
   d4944:	681b      	ldr	r3, [r3, #0]
   d4946:	69db      	ldr	r3, [r3, #28]
   d4948:	9301      	str	r3, [sp, #4]
   d494a:	bd08      	pop	{r3, pc}
   d494c:	0003024c 	.word	0x0003024c

000d4950 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4950:	b508      	push	{r3, lr}
   d4952:	4b02      	ldr	r3, [pc, #8]	; (d495c <HAL_USB_USART_Flush_Data+0xc>)
   d4954:	681b      	ldr	r3, [r3, #0]
   d4956:	6a1b      	ldr	r3, [r3, #32]
   d4958:	9301      	str	r3, [sp, #4]
   d495a:	bd08      	pop	{r3, pc}
   d495c:	0003024c 	.word	0x0003024c

000d4960 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d4960:	b508      	push	{r3, lr}
   d4962:	4b02      	ldr	r3, [pc, #8]	; (d496c <system_mode+0xc>)
   d4964:	681b      	ldr	r3, [r3, #0]
   d4966:	681b      	ldr	r3, [r3, #0]
   d4968:	9301      	str	r3, [sp, #4]
   d496a:	bd08      	pop	{r3, pc}
   d496c:	00030220 	.word	0x00030220

000d4970 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4970:	b508      	push	{r3, lr}
   d4972:	4b02      	ldr	r3, [pc, #8]	; (d497c <set_system_mode+0xc>)
   d4974:	681b      	ldr	r3, [r3, #0]
   d4976:	685b      	ldr	r3, [r3, #4]
   d4978:	9301      	str	r3, [sp, #4]
   d497a:	bd08      	pop	{r3, pc}
   d497c:	00030220 	.word	0x00030220

000d4980 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d4980:	b508      	push	{r3, lr}
   d4982:	4b02      	ldr	r3, [pc, #8]	; (d498c <system_thread_set_state+0xc>)
   d4984:	681b      	ldr	r3, [r3, #0]
   d4986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4988:	9301      	str	r3, [sp, #4]
   d498a:	bd08      	pop	{r3, pc}
   d498c:	00030220 	.word	0x00030220

000d4990 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d4990:	b508      	push	{r3, lr}
   d4992:	4b02      	ldr	r3, [pc, #8]	; (d499c <system_thread_get_state+0xc>)
   d4994:	681b      	ldr	r3, [r3, #0]
   d4996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4998:	9301      	str	r3, [sp, #4]
   d499a:	bd08      	pop	{r3, pc}
   d499c:	00030220 	.word	0x00030220

000d49a0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d49a0:	b508      	push	{r3, lr}
   d49a2:	4b03      	ldr	r3, [pc, #12]	; (d49b0 <system_ctrl_set_app_request_handler+0x10>)
   d49a4:	681b      	ldr	r3, [r3, #0]
   d49a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d49aa:	9301      	str	r3, [sp, #4]
   d49ac:	bd08      	pop	{r3, pc}
   d49ae:	0000      	.short	0x0000
   d49b0:	00030220 	.word	0x00030220

000d49b4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d49b4:	b508      	push	{r3, lr}
   d49b6:	4b03      	ldr	r3, [pc, #12]	; (d49c4 <system_ctrl_set_result+0x10>)
   d49b8:	681b      	ldr	r3, [r3, #0]
   d49ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d49be:	9301      	str	r3, [sp, #4]
   d49c0:	bd08      	pop	{r3, pc}
   d49c2:	0000      	.short	0x0000
   d49c4:	00030220 	.word	0x00030220

000d49c8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d49c8:	b508      	push	{r3, lr}
   d49ca:	4b02      	ldr	r3, [pc, #8]	; (d49d4 <network_connect+0xc>)
   d49cc:	681b      	ldr	r3, [r3, #0]
   d49ce:	685b      	ldr	r3, [r3, #4]
   d49d0:	9301      	str	r3, [sp, #4]
   d49d2:	bd08      	pop	{r3, pc}
   d49d4:	00030240 	.word	0x00030240

000d49d8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d49d8:	b508      	push	{r3, lr}
   d49da:	4b02      	ldr	r3, [pc, #8]	; (d49e4 <network_connecting+0xc>)
   d49dc:	681b      	ldr	r3, [r3, #0]
   d49de:	689b      	ldr	r3, [r3, #8]
   d49e0:	9301      	str	r3, [sp, #4]
   d49e2:	bd08      	pop	{r3, pc}
   d49e4:	00030240 	.word	0x00030240

000d49e8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d49e8:	b508      	push	{r3, lr}
   d49ea:	4b02      	ldr	r3, [pc, #8]	; (d49f4 <network_disconnect+0xc>)
   d49ec:	681b      	ldr	r3, [r3, #0]
   d49ee:	68db      	ldr	r3, [r3, #12]
   d49f0:	9301      	str	r3, [sp, #4]
   d49f2:	bd08      	pop	{r3, pc}
   d49f4:	00030240 	.word	0x00030240

000d49f8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d49f8:	b508      	push	{r3, lr}
   d49fa:	4b02      	ldr	r3, [pc, #8]	; (d4a04 <network_ready+0xc>)
   d49fc:	681b      	ldr	r3, [r3, #0]
   d49fe:	691b      	ldr	r3, [r3, #16]
   d4a00:	9301      	str	r3, [sp, #4]
   d4a02:	bd08      	pop	{r3, pc}
   d4a04:	00030240 	.word	0x00030240

000d4a08 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a08:	b508      	push	{r3, lr}
   d4a0a:	4b02      	ldr	r3, [pc, #8]	; (d4a14 <network_on+0xc>)
   d4a0c:	681b      	ldr	r3, [r3, #0]
   d4a0e:	695b      	ldr	r3, [r3, #20]
   d4a10:	9301      	str	r3, [sp, #4]
   d4a12:	bd08      	pop	{r3, pc}
   d4a14:	00030240 	.word	0x00030240

000d4a18 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a18:	b508      	push	{r3, lr}
   d4a1a:	4b02      	ldr	r3, [pc, #8]	; (d4a24 <network_off+0xc>)
   d4a1c:	681b      	ldr	r3, [r3, #0]
   d4a1e:	699b      	ldr	r3, [r3, #24]
   d4a20:	9301      	str	r3, [sp, #4]
   d4a22:	bd08      	pop	{r3, pc}
   d4a24:	00030240 	.word	0x00030240

000d4a28 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4a28:	b508      	push	{r3, lr}
   d4a2a:	4b02      	ldr	r3, [pc, #8]	; (d4a34 <network_listen+0xc>)
   d4a2c:	681b      	ldr	r3, [r3, #0]
   d4a2e:	69db      	ldr	r3, [r3, #28]
   d4a30:	9301      	str	r3, [sp, #4]
   d4a32:	bd08      	pop	{r3, pc}
   d4a34:	00030240 	.word	0x00030240

000d4a38 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4a38:	b508      	push	{r3, lr}
   d4a3a:	4b02      	ldr	r3, [pc, #8]	; (d4a44 <network_listening+0xc>)
   d4a3c:	681b      	ldr	r3, [r3, #0]
   d4a3e:	6a1b      	ldr	r3, [r3, #32]
   d4a40:	9301      	str	r3, [sp, #4]
   d4a42:	bd08      	pop	{r3, pc}
   d4a44:	00030240 	.word	0x00030240

000d4a48 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4a48:	b508      	push	{r3, lr}
   d4a4a:	4b02      	ldr	r3, [pc, #8]	; (d4a54 <network_set_listen_timeout+0xc>)
   d4a4c:	681b      	ldr	r3, [r3, #0]
   d4a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a50:	9301      	str	r3, [sp, #4]
   d4a52:	bd08      	pop	{r3, pc}
   d4a54:	00030240 	.word	0x00030240

000d4a58 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4a58:	b508      	push	{r3, lr}
   d4a5a:	4b02      	ldr	r3, [pc, #8]	; (d4a64 <network_get_listen_timeout+0xc>)
   d4a5c:	681b      	ldr	r3, [r3, #0]
   d4a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4a60:	9301      	str	r3, [sp, #4]
   d4a62:	bd08      	pop	{r3, pc}
   d4a64:	00030240 	.word	0x00030240

000d4a68 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4a68:	b508      	push	{r3, lr}
   d4a6a:	4b02      	ldr	r3, [pc, #8]	; (d4a74 <spark_process+0xc>)
   d4a6c:	681b      	ldr	r3, [r3, #0]
   d4a6e:	689b      	ldr	r3, [r3, #8]
   d4a70:	9301      	str	r3, [sp, #4]
   d4a72:	bd08      	pop	{r3, pc}
   d4a74:	00030244 	.word	0x00030244

000d4a78 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4a78:	b508      	push	{r3, lr}
   d4a7a:	4b02      	ldr	r3, [pc, #8]	; (d4a84 <spark_cloud_flag_connected+0xc>)
   d4a7c:	681b      	ldr	r3, [r3, #0]
   d4a7e:	695b      	ldr	r3, [r3, #20]
   d4a80:	9301      	str	r3, [sp, #4]
   d4a82:	bd08      	pop	{r3, pc}
   d4a84:	00030244 	.word	0x00030244

000d4a88 <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d4a88:	b508      	push	{r3, lr}
   d4a8a:	4b02      	ldr	r3, [pc, #8]	; (d4a94 <spark_sync_time+0xc>)
   d4a8c:	681b      	ldr	r3, [r3, #0]
   d4a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4a90:	9301      	str	r3, [sp, #4]
   d4a92:	bd08      	pop	{r3, pc}
   d4a94:	00030244 	.word	0x00030244

000d4a98 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d4a98:	b508      	push	{r3, lr}
   d4a9a:	4b02      	ldr	r3, [pc, #8]	; (d4aa4 <spark_sync_time_pending+0xc>)
   d4a9c:	681b      	ldr	r3, [r3, #0]
   d4a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4aa0:	9301      	str	r3, [sp, #4]
   d4aa2:	bd08      	pop	{r3, pc}
   d4aa4:	00030244 	.word	0x00030244

000d4aa8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4aa8:	b508      	push	{r3, lr}
   d4aaa:	4b02      	ldr	r3, [pc, #8]	; (d4ab4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4aac:	681b      	ldr	r3, [r3, #0]
   d4aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4ab0:	9301      	str	r3, [sp, #4]
   d4ab2:	bd08      	pop	{r3, pc}
   d4ab4:	00030244 	.word	0x00030244

000d4ab8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4ab8:	b508      	push	{r3, lr}
   d4aba:	4b02      	ldr	r3, [pc, #8]	; (d4ac4 <malloc+0xc>)
   d4abc:	681b      	ldr	r3, [r3, #0]
   d4abe:	681b      	ldr	r3, [r3, #0]
   d4ac0:	9301      	str	r3, [sp, #4]
   d4ac2:	bd08      	pop	{r3, pc}
   d4ac4:	0003021c 	.word	0x0003021c

000d4ac8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4ac8:	b508      	push	{r3, lr}
   d4aca:	4b02      	ldr	r3, [pc, #8]	; (d4ad4 <free+0xc>)
   d4acc:	681b      	ldr	r3, [r3, #0]
   d4ace:	685b      	ldr	r3, [r3, #4]
   d4ad0:	9301      	str	r3, [sp, #4]
   d4ad2:	bd08      	pop	{r3, pc}
   d4ad4:	0003021c 	.word	0x0003021c

000d4ad8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4ad8:	b508      	push	{r3, lr}
   d4ada:	4b02      	ldr	r3, [pc, #8]	; (d4ae4 <realloc+0xc>)
   d4adc:	681b      	ldr	r3, [r3, #0]
   d4ade:	689b      	ldr	r3, [r3, #8]
   d4ae0:	9301      	str	r3, [sp, #4]
   d4ae2:	bd08      	pop	{r3, pc}
   d4ae4:	0003021c 	.word	0x0003021c

000d4ae8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4ae8:	2200      	movs	r2, #0
   d4aea:	4611      	mov	r1, r2
   d4aec:	6840      	ldr	r0, [r0, #4]
   d4aee:	f7ff bfa3 	b.w	d4a38 <network_listening>

000d4af2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4af2:	2200      	movs	r2, #0
   d4af4:	4611      	mov	r1, r2
   d4af6:	6840      	ldr	r0, [r0, #4]
   d4af8:	f7ff bfae 	b.w	d4a58 <network_get_listen_timeout>

000d4afc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4afc:	2200      	movs	r2, #0
   d4afe:	6840      	ldr	r0, [r0, #4]
   d4b00:	f7ff bfa2 	b.w	d4a48 <network_set_listen_timeout>

000d4b04 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4b04:	2200      	movs	r2, #0
   d4b06:	f081 0101 	eor.w	r1, r1, #1
   d4b0a:	6840      	ldr	r0, [r0, #4]
   d4b0c:	f7ff bf8c 	b.w	d4a28 <network_listen>

000d4b10 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4b10:	2300      	movs	r3, #0
   d4b12:	461a      	mov	r2, r3
   d4b14:	4619      	mov	r1, r3
   d4b16:	6840      	ldr	r0, [r0, #4]
   d4b18:	f7ff bf7e 	b.w	d4a18 <network_off>

000d4b1c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4b1c:	2300      	movs	r3, #0
   d4b1e:	461a      	mov	r2, r3
   d4b20:	4619      	mov	r1, r3
   d4b22:	6840      	ldr	r0, [r0, #4]
   d4b24:	f7ff bf70 	b.w	d4a08 <network_on>

000d4b28 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4b28:	2200      	movs	r2, #0
   d4b2a:	4611      	mov	r1, r2
   d4b2c:	6840      	ldr	r0, [r0, #4]
   d4b2e:	f7ff bf63 	b.w	d49f8 <network_ready>

000d4b32 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4b32:	2200      	movs	r2, #0
   d4b34:	4611      	mov	r1, r2
   d4b36:	6840      	ldr	r0, [r0, #4]
   d4b38:	f7ff bf4e 	b.w	d49d8 <network_connecting>

000d4b3c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4b3c:	2200      	movs	r2, #0
   d4b3e:	2102      	movs	r1, #2
   d4b40:	6840      	ldr	r0, [r0, #4]
   d4b42:	f7ff bf51 	b.w	d49e8 <network_disconnect>

000d4b46 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4b46:	2300      	movs	r3, #0
   d4b48:	461a      	mov	r2, r3
   d4b4a:	6840      	ldr	r0, [r0, #4]
   d4b4c:	f7ff bf3c 	b.w	d49c8 <network_connect>

000d4b50 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4b50:	4b02      	ldr	r3, [pc, #8]	; (d4b5c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4b52:	2203      	movs	r2, #3
   d4b54:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4b56:	4a02      	ldr	r2, [pc, #8]	; (d4b60 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4b58:	601a      	str	r2, [r3, #0]
   d4b5a:	4770      	bx	lr
   d4b5c:	2003e3ac 	.word	0x2003e3ac
   d4b60:	000d6a58 	.word	0x000d6a58

000d4b64 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4b64:	b510      	push	{r4, lr}
   d4b66:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4b68:	6800      	ldr	r0, [r0, #0]
   d4b6a:	b118      	cbz	r0, d4b74 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d4b6c:	f7ff ffac 	bl	d4ac8 <free>
            wakeupSource_ = nullptr;
   d4b70:	2300      	movs	r3, #0
   d4b72:	6023      	str	r3, [r4, #0]
   d4b74:	bd10      	pop	{r4, pc}

000d4b76 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4b76:	b510      	push	{r4, lr}
   d4b78:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d4b7a:	f7ff fff3 	bl	d4b64 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4b7e:	4620      	mov	r0, r4
   d4b80:	bd10      	pop	{r4, pc}
	...

000d4b84 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4b84:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4b86:	4c09      	ldr	r4, [pc, #36]	; (d4bac <_GLOBAL__sub_I_System+0x28>)
   d4b88:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4b8a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4b8e:	6020      	str	r0, [r4, #0]
   d4b90:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4b92:	71a0      	strb	r0, [r4, #6]
   d4b94:	8120      	strh	r0, [r4, #8]
   d4b96:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4b98:	f7ff feea 	bl	d4970 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4b9c:	4620      	mov	r0, r4
   d4b9e:	4a04      	ldr	r2, [pc, #16]	; (d4bb0 <_GLOBAL__sub_I_System+0x2c>)
   d4ba0:	4904      	ldr	r1, [pc, #16]	; (d4bb4 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4ba6:	f001 b815 	b.w	d5bd4 <__aeabi_atexit>
   d4baa:	bf00      	nop
   d4bac:	2003e3b4 	.word	0x2003e3b4
   d4bb0:	2003e374 	.word	0x2003e374
   d4bb4:	000d4b77 	.word	0x000d4b77

000d4bb8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4bb8:	b510      	push	{r4, lr}
   d4bba:	4604      	mov	r4, r0
{
	free(buffer);
   d4bbc:	6800      	ldr	r0, [r0, #0]
   d4bbe:	f7ff ff83 	bl	d4ac8 <free>
}
   d4bc2:	4620      	mov	r0, r4
   d4bc4:	bd10      	pop	{r4, pc}

000d4bc6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4bc6:	b510      	push	{r4, lr}
   d4bc8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4bca:	6800      	ldr	r0, [r0, #0]
   d4bcc:	b108      	cbz	r0, d4bd2 <_ZN6String10invalidateEv+0xc>
   d4bce:	f7ff ff7b 	bl	d4ac8 <free>
	buffer = NULL;
   d4bd2:	2300      	movs	r3, #0
   d4bd4:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4bd6:	60a3      	str	r3, [r4, #8]
   d4bd8:	6063      	str	r3, [r4, #4]
   d4bda:	bd10      	pop	{r4, pc}

000d4bdc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4bdc:	b538      	push	{r3, r4, r5, lr}
   d4bde:	4604      	mov	r4, r0
   d4be0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4be2:	6800      	ldr	r0, [r0, #0]
   d4be4:	3101      	adds	r1, #1
   d4be6:	f7ff ff77 	bl	d4ad8 <realloc>
	if (newbuffer) {
   d4bea:	b110      	cbz	r0, d4bf2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4bec:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4bf0:	2001      	movs	r0, #1
	}
	return 0;
}
   d4bf2:	bd38      	pop	{r3, r4, r5, pc}

000d4bf4 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4bf4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4bf6:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4bf8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4bfa:	b113      	cbz	r3, d4c02 <_ZN6String7reserveEj+0xe>
   d4bfc:	6843      	ldr	r3, [r0, #4]
   d4bfe:	428b      	cmp	r3, r1
   d4c00:	d207      	bcs.n	d4c12 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4c02:	4620      	mov	r0, r4
   d4c04:	f7ff ffea 	bl	d4bdc <_ZN6String12changeBufferEj>
   d4c08:	b120      	cbz	r0, d4c14 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4c0a:	68a3      	ldr	r3, [r4, #8]
   d4c0c:	b90b      	cbnz	r3, d4c12 <_ZN6String7reserveEj+0x1e>
   d4c0e:	6822      	ldr	r2, [r4, #0]
   d4c10:	7013      	strb	r3, [r2, #0]
   d4c12:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4c14:	bd10      	pop	{r4, pc}

000d4c16 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4c16:	b570      	push	{r4, r5, r6, lr}
   d4c18:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4c1a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4c1c:	4604      	mov	r4, r0
   d4c1e:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4c20:	f7ff ffe8 	bl	d4bf4 <_ZN6String7reserveEj>
   d4c24:	b918      	cbnz	r0, d4c2e <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4c26:	4620      	mov	r0, r4
   d4c28:	f7ff ffcd 	bl	d4bc6 <_ZN6String10invalidateEv>
		return *this;
   d4c2c:	e009      	b.n	d4c42 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4c2e:	462a      	mov	r2, r5
   d4c30:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4c32:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4c34:	6820      	ldr	r0, [r4, #0]
   d4c36:	f001 fe45 	bl	d68c4 <memcpy>
	buffer[len] = 0;
   d4c3a:	6822      	ldr	r2, [r4, #0]
   d4c3c:	68a3      	ldr	r3, [r4, #8]
   d4c3e:	2100      	movs	r1, #0
   d4c40:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4c42:	4620      	mov	r0, r4
   d4c44:	bd70      	pop	{r4, r5, r6, pc}

000d4c46 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4c46:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4c48:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4c4a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4c4c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4c4e:	6043      	str	r3, [r0, #4]
	len = 0;
   d4c50:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4c52:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4c54:	460d      	mov	r5, r1
   d4c56:	b139      	cbz	r1, d4c68 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4c58:	4608      	mov	r0, r1
   d4c5a:	f001 fe6f 	bl	d693c <strlen>
   d4c5e:	4629      	mov	r1, r5
   d4c60:	4602      	mov	r2, r0
   d4c62:	4620      	mov	r0, r4
   d4c64:	f7ff ffd7 	bl	d4c16 <_ZN6String4copyEPKcj>
}
   d4c68:	4620      	mov	r0, r4
   d4c6a:	bd38      	pop	{r3, r4, r5, pc}

000d4c6c <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4c6c:	b510      	push	{r4, lr}
   d4c6e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4c70:	6800      	ldr	r0, [r0, #0]
   d4c72:	b108      	cbz	r0, d4c78 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4c74:	f7ff fd94 	bl	d47a0 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4c78:	4620      	mov	r0, r4
   d4c7a:	bd10      	pop	{r4, pc}

000d4c7c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4c7c:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4c7e:	4c06      	ldr	r4, [pc, #24]	; (d4c98 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4c80:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4c82:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4c84:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4c86:	f7ff fd83 	bl	d4790 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4c8a:	4620      	mov	r0, r4
   d4c8c:	4a03      	ldr	r2, [pc, #12]	; (d4c9c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4c8e:	4904      	ldr	r1, [pc, #16]	; (d4ca0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4c94:	f000 bf9e 	b.w	d5bd4 <__aeabi_atexit>
   d4c98:	2003e3c0 	.word	0x2003e3c0
   d4c9c:	2003e374 	.word	0x2003e374
   d4ca0:	000d4c6d 	.word	0x000d4c6d

000d4ca4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ca6:	4606      	mov	r6, r0
   d4ca8:	460d      	mov	r5, r1
   d4caa:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4cac:	2400      	movs	r4, #0
  while (size--) {
   d4cae:	42bd      	cmp	r5, r7
   d4cb0:	d00c      	beq.n	d4ccc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4cb2:	6833      	ldr	r3, [r6, #0]
   d4cb4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4cb8:	689b      	ldr	r3, [r3, #8]
   d4cba:	4630      	mov	r0, r6
   d4cbc:	4798      	blx	r3
     if (chunk>=0)
   d4cbe:	2800      	cmp	r0, #0
   d4cc0:	db01      	blt.n	d4cc6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4cc2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4cc4:	e7f3      	b.n	d4cae <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4cc6:	2c00      	cmp	r4, #0
   d4cc8:	bf08      	it	eq
   d4cca:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4ccc:	4620      	mov	r0, r4
   d4cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4cd0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4cd0:	b570      	push	{r4, r5, r6, lr}
   d4cd2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4cd4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4cd6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4cd8:	b149      	cbz	r1, d4cee <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4cda:	f001 fe2f 	bl	d693c <strlen>
   d4cde:	682b      	ldr	r3, [r5, #0]
   d4ce0:	4602      	mov	r2, r0
   d4ce2:	4621      	mov	r1, r4
   d4ce4:	4628      	mov	r0, r5
   d4ce6:	68db      	ldr	r3, [r3, #12]
    }
   d4ce8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4cec:	4718      	bx	r3
    }
   d4cee:	bd70      	pop	{r4, r5, r6, pc}

000d4cf0 <_ZN5Print5printEPKc>:
   d4cf0:	b508      	push	{r3, lr}
   d4cf2:	f7ff ffed 	bl	d4cd0 <_ZN5Print5writeEPKc>
   d4cf6:	bd08      	pop	{r3, pc}

000d4cf8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4cf8:	6803      	ldr	r3, [r0, #0]
   d4cfa:	689b      	ldr	r3, [r3, #8]
   d4cfc:	4718      	bx	r3

000d4cfe <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4cfe:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4d00:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4d02:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4d04:	f7ff fff8 	bl	d4cf8 <_ZN5Print5printEc>
  n += print('\n');
   d4d08:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4d0a:	4604      	mov	r4, r0
  n += print('\n');
   d4d0c:	4628      	mov	r0, r5
   d4d0e:	f7ff fff3 	bl	d4cf8 <_ZN5Print5printEc>
  return n;
}
   d4d12:	4420      	add	r0, r4
   d4d14:	bd38      	pop	{r3, r4, r5, pc}

000d4d16 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4d16:	b530      	push	{r4, r5, lr}
   d4d18:	b08b      	sub	sp, #44	; 0x2c
   d4d1a:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4d1c:	2100      	movs	r1, #0
   d4d1e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4d22:	2a01      	cmp	r2, #1
   d4d24:	bf98      	it	ls
   d4d26:	220a      	movls	r2, #10
   d4d28:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d4d2c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d4d30:	fb05 3312 	mls	r3, r5, r2, r3
   d4d34:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4d38:	2b09      	cmp	r3, #9
   d4d3a:	bf94      	ite	ls
   d4d3c:	3330      	addls	r3, #48	; 0x30
   d4d3e:	3337      	addhi	r3, #55	; 0x37
   d4d40:	b2db      	uxtb	r3, r3
   d4d42:	4621      	mov	r1, r4
   d4d44:	f804 3901 	strb.w	r3, [r4], #-1
   d4d48:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4d4a:	2d00      	cmp	r5, #0
   d4d4c:	d1ee      	bne.n	d4d2c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4d4e:	f7ff ffbf 	bl	d4cd0 <_ZN5Print5writeEPKc>
}
   d4d52:	b00b      	add	sp, #44	; 0x2c
   d4d54:	bd30      	pop	{r4, r5, pc}
	...

000d4d58 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d4d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4d5c:	ec57 6b10 	vmov	r6, r7, d0
   d4d60:	4682      	mov	sl, r0
   d4d62:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d4d64:	ee10 2a10 	vmov	r2, s0
   d4d68:	463b      	mov	r3, r7
   d4d6a:	ee10 0a10 	vmov	r0, s0
   d4d6e:	4639      	mov	r1, r7
   d4d70:	f001 fcec 	bl	d674c <__aeabi_dcmpun>
   d4d74:	b108      	cbz	r0, d4d7a <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4d76:	494e      	ldr	r1, [pc, #312]	; (d4eb0 <_ZN5Print10printFloatEdh+0x158>)
   d4d78:	e012      	b.n	d4da0 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d4d7a:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d4d7e:	f04f 32ff 	mov.w	r2, #4294967295
   d4d82:	4b4c      	ldr	r3, [pc, #304]	; (d4eb4 <_ZN5Print10printFloatEdh+0x15c>)
   d4d84:	4630      	mov	r0, r6
   d4d86:	4649      	mov	r1, r9
   d4d88:	f001 fce0 	bl	d674c <__aeabi_dcmpun>
   d4d8c:	b968      	cbnz	r0, d4daa <_ZN5Print10printFloatEdh+0x52>
   d4d8e:	f04f 32ff 	mov.w	r2, #4294967295
   d4d92:	4b48      	ldr	r3, [pc, #288]	; (d4eb4 <_ZN5Print10printFloatEdh+0x15c>)
   d4d94:	4630      	mov	r0, r6
   d4d96:	4649      	mov	r1, r9
   d4d98:	f001 fcba 	bl	d6710 <__aeabi_dcmple>
   d4d9c:	b928      	cbnz	r0, d4daa <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4d9e:	4946      	ldr	r1, [pc, #280]	; (d4eb8 <_ZN5Print10printFloatEdh+0x160>)
   d4da0:	4650      	mov	r0, sl
   d4da2:	f7ff ff95 	bl	d4cd0 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d4da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d4daa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4dae:	4b43      	ldr	r3, [pc, #268]	; (d4ebc <_ZN5Print10printFloatEdh+0x164>)
   d4db0:	4630      	mov	r0, r6
   d4db2:	4639      	mov	r1, r7
   d4db4:	f001 fcc0 	bl	d6738 <__aeabi_dcmpgt>
   d4db8:	b108      	cbz	r0, d4dbe <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4dba:	4941      	ldr	r1, [pc, #260]	; (d4ec0 <_ZN5Print10printFloatEdh+0x168>)
   d4dbc:	e7f0      	b.n	d4da0 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d4dbe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4dc2:	4b40      	ldr	r3, [pc, #256]	; (d4ec4 <_ZN5Print10printFloatEdh+0x16c>)
   d4dc4:	4630      	mov	r0, r6
   d4dc6:	4639      	mov	r1, r7
   d4dc8:	f001 fc98 	bl	d66fc <__aeabi_dcmplt>
   d4dcc:	2800      	cmp	r0, #0
   d4dce:	d1f4      	bne.n	d4dba <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d4dd0:	2200      	movs	r2, #0
   d4dd2:	2300      	movs	r3, #0
   d4dd4:	4630      	mov	r0, r6
   d4dd6:	4639      	mov	r1, r7
   d4dd8:	f001 fc90 	bl	d66fc <__aeabi_dcmplt>
   d4ddc:	b140      	cbz	r0, d4df0 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d4dde:	212d      	movs	r1, #45	; 0x2d
   d4de0:	4650      	mov	r0, sl
   d4de2:	f7ff ff89 	bl	d4cf8 <_ZN5Print5printEc>
     number = -number;
   d4de6:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d4dea:	4604      	mov	r4, r0
     number = -number;
   d4dec:	461f      	mov	r7, r3
   d4dee:	e000      	b.n	d4df2 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4df0:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4df2:	4935      	ldr	r1, [pc, #212]	; (d4ec8 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4df4:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4df8:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d4dfa:	fa5f f388 	uxtb.w	r3, r8
   d4dfe:	429d      	cmp	r5, r3
   d4e00:	d906      	bls.n	d4e10 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d4e02:	2200      	movs	r2, #0
   d4e04:	4b31      	ldr	r3, [pc, #196]	; (d4ecc <_ZN5Print10printFloatEdh+0x174>)
   d4e06:	f001 fb31 	bl	d646c <__aeabi_ddiv>
   d4e0a:	f108 0801 	add.w	r8, r8, #1
   d4e0e:	e7f4      	b.n	d4dfa <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d4e10:	4632      	mov	r2, r6
   d4e12:	463b      	mov	r3, r7
   d4e14:	f001 f84e 	bl	d5eb4 <__adddf3>
   d4e18:	460f      	mov	r7, r1
   d4e1a:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d4e1c:	f001 fcd4 	bl	d67c8 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4e20:	220a      	movs	r2, #10
   d4e22:	4601      	mov	r1, r0
   d4e24:	4680      	mov	r8, r0
   d4e26:	4650      	mov	r0, sl
   d4e28:	f7ff ff75 	bl	d4d16 <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d4e2c:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d4e2e:	b3e5      	cbz	r5, d4eaa <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d4e30:	4640      	mov	r0, r8
   d4e32:	f001 f97b 	bl	d612c <__aeabi_ui2d>
   d4e36:	4602      	mov	r2, r0
   d4e38:	460b      	mov	r3, r1
   d4e3a:	4630      	mov	r0, r6
   d4e3c:	4639      	mov	r1, r7
   d4e3e:	f001 f837 	bl	d5eb0 <__aeabi_dsub>
   d4e42:	4606      	mov	r6, r0
   d4e44:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4e46:	4650      	mov	r0, sl
   d4e48:	4921      	ldr	r1, [pc, #132]	; (d4ed0 <_ZN5Print10printFloatEdh+0x178>)
   d4e4a:	f7ff ff41 	bl	d4cd0 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d4e4e:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d4e50:	2200      	movs	r2, #0
   d4e52:	4b1e      	ldr	r3, [pc, #120]	; (d4ecc <_ZN5Print10printFloatEdh+0x174>)
   d4e54:	4630      	mov	r0, r6
   d4e56:	4639      	mov	r1, r7
   d4e58:	f001 f9de 	bl	d6218 <__aeabi_dmul>
   d4e5c:	4606      	mov	r6, r0
   d4e5e:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d4e60:	f001 fc8a 	bl	d6778 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d4e64:	f1b0 0900 	subs.w	r9, r0, #0
   d4e68:	da07      	bge.n	d4e7a <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d4e6a:	212d      	movs	r1, #45	; 0x2d
   d4e6c:	4650      	mov	r0, sl
   d4e6e:	f7ff ff43 	bl	d4cf8 <_ZN5Print5printEc>
            val = -n;
   d4e72:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d4e76:	4680      	mov	r8, r0
   d4e78:	e002      	b.n	d4e80 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d4e7a:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d4e7c:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4e80:	220a      	movs	r2, #10
   d4e82:	4650      	mov	r0, sl
   d4e84:	f7ff ff47 	bl	d4d16 <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d4e88:	4440      	add	r0, r8
   d4e8a:	4404      	add	r4, r0
    remainder -= toPrint;
   d4e8c:	4648      	mov	r0, r9
   d4e8e:	f001 f95d 	bl	d614c <__aeabi_i2d>
   d4e92:	4602      	mov	r2, r0
   d4e94:	460b      	mov	r3, r1
   d4e96:	4630      	mov	r0, r6
   d4e98:	4639      	mov	r1, r7
   d4e9a:	f001 f809 	bl	d5eb0 <__aeabi_dsub>
   d4e9e:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d4ea0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d4ea4:	4606      	mov	r6, r0
   d4ea6:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d4ea8:	d1d2      	bne.n	d4e50 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d4eaa:	4620      	mov	r0, r4
   d4eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4eb0:	000d6a84 	.word	0x000d6a84
   d4eb4:	7fefffff 	.word	0x7fefffff
   d4eb8:	000d6a8e 	.word	0x000d6a8e
   d4ebc:	41efffff 	.word	0x41efffff
   d4ec0:	000d6a88 	.word	0x000d6a88
   d4ec4:	c1efffff 	.word	0xc1efffff
   d4ec8:	3fe00000 	.word	0x3fe00000
   d4ecc:	40240000 	.word	0x40240000
   d4ed0:	000d6a8c 	.word	0x000d6a8c

000d4ed4 <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d4ed4:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d4ed6:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d4ed8:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d4eda:	f7ff ff3d 	bl	d4d58 <_ZN5Print10printFloatEdh>
   d4ede:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d4ee0:	4628      	mov	r0, r5
   d4ee2:	f7ff ff0c 	bl	d4cfe <_ZN5Print7printlnEv>
  return n;
}
   d4ee6:	4420      	add	r0, r4
   d4ee8:	bd38      	pop	{r3, r4, r5, pc}

000d4eea <_ZN5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d4eea:	b538      	push	{r3, r4, r5, lr}
   d4eec:	4604      	mov	r4, r0
    return println((double)num, digits);
   d4eee:	ee10 0a10 	vmov	r0, s0
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d4ef2:	460d      	mov	r5, r1
    return println((double)num, digits);
   d4ef4:	f001 f93c 	bl	d6170 <__aeabi_f2d>
   d4ef8:	ec41 0b10 	vmov	d0, r0, r1
   d4efc:	4629      	mov	r1, r5
   d4efe:	4620      	mov	r0, r4
}
   d4f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return n;
}

size_t Print::println(float num, int digits)
{
    return println((double)num, digits);
   d4f04:	f7ff bfe6 	b.w	d4ed4 <_ZN5Print7printlnEdi>

000d4f08 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4f08:	4b01      	ldr	r3, [pc, #4]	; (d4f10 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4f0a:	4a02      	ldr	r2, [pc, #8]	; (d4f14 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4f0c:	601a      	str	r2, [r3, #0]
   d4f0e:	4770      	bx	lr
   d4f10:	2003e3c4 	.word	0x2003e3c4
   d4f14:	000d6b05 	.word	0x000d6b05

000d4f18 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d4f18:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4f1a:	2000      	movs	r0, #0
   d4f1c:	f7ff fdbc 	bl	d4a98 <spark_sync_time_pending>
   d4f20:	b128      	cbz	r0, d4f2e <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4f22:	f7ff fda9 	bl	d4a78 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4f26:	f080 0001 	eor.w	r0, r0, #1
   d4f2a:	b2c0      	uxtb	r0, r0
   d4f2c:	bd08      	pop	{r3, pc}
   d4f2e:	2001      	movs	r0, #1
    }
   d4f30:	bd08      	pop	{r3, pc}

000d4f32 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d4f32:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d4f34:	2000      	movs	r0, #0
   d4f36:	f7ff fc0b 	bl	d4750 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d4f3a:	4604      	mov	r4, r0
   d4f3c:	b968      	cbnz	r0, d4f5a <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d4f3e:	f7ff fd0f 	bl	d4960 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d4f42:	2801      	cmp	r0, #1
   d4f44:	d10b      	bne.n	d4f5e <_ZN9TimeClass7isValidEv+0x2c>
   d4f46:	4620      	mov	r0, r4
   d4f48:	f7ff fd22 	bl	d4990 <system_thread_get_state>
   d4f4c:	b938      	cbnz	r0, d4f5e <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d4f4e:	f7ff ffe3 	bl	d4f18 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4f52:	b930      	cbnz	r0, d4f62 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d4f54:	f7ff fd88 	bl	d4a68 <spark_process>
   d4f58:	e7f9      	b.n	d4f4e <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d4f5a:	2001      	movs	r0, #1
   d4f5c:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d4f5e:	2000      	movs	r0, #0
   d4f60:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d4f62:	f7ff ffd9 	bl	d4f18 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d4f66:	2000      	movs	r0, #0
   d4f68:	f7ff fbf2 	bl	d4750 <HAL_RTC_Time_Is_Valid>
   d4f6c:	3000      	adds	r0, #0
   d4f6e:	bf18      	it	ne
   d4f70:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d4f72:	bd10      	pop	{r4, pc}

000d4f74 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d4f74:	b508      	push	{r3, lr}
    (void)isValid();
   d4f76:	f7ff ffdc 	bl	d4f32 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d4f7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d4f7e:	f7ff bbc7 	b.w	d4710 <HAL_RTC_Get_UnixTime>
	...

000d4f84 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4f84:	4b02      	ldr	r3, [pc, #8]	; (d4f90 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4f86:	681a      	ldr	r2, [r3, #0]
   d4f88:	4b02      	ldr	r3, [pc, #8]	; (d4f94 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4f8a:	601a      	str	r2, [r3, #0]
   d4f8c:	4770      	bx	lr
   d4f8e:	bf00      	nop
   d4f90:	2003e30c 	.word	0x2003e30c
   d4f94:	2003e3c8 	.word	0x2003e3c8

000d4f98 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4f98:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4f9a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4f9c:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4f9e:	b113      	cbz	r3, d4fa6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4fa0:	2203      	movs	r2, #3
   d4fa2:	4601      	mov	r1, r0
   d4fa4:	4798      	blx	r3
    }
   d4fa6:	4620      	mov	r0, r4
   d4fa8:	bd10      	pop	{r4, pc}

000d4faa <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4faa:	b510      	push	{r4, lr}
   d4fac:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4fae:	f7ff fff3 	bl	d4f98 <_ZNSt14_Function_baseD1Ev>
   d4fb2:	4620      	mov	r0, r4
   d4fb4:	bd10      	pop	{r4, pc}
	...

000d4fb8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4fb8:	4803      	ldr	r0, [pc, #12]	; (d4fc8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4fba:	4a04      	ldr	r2, [pc, #16]	; (d4fcc <_GLOBAL__sub_I_RGB+0x14>)
   d4fbc:	4904      	ldr	r1, [pc, #16]	; (d4fd0 <_GLOBAL__sub_I_RGB+0x18>)
   d4fbe:	2300      	movs	r3, #0
   d4fc0:	6083      	str	r3, [r0, #8]
   d4fc2:	f000 be07 	b.w	d5bd4 <__aeabi_atexit>
   d4fc6:	bf00      	nop
   d4fc8:	2003e3cc 	.word	0x2003e3cc
   d4fcc:	2003e374 	.word	0x2003e374
   d4fd0:	000d4fab 	.word	0x000d4fab

000d4fd4 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d4fd4:	7d00      	ldrb	r0, [r0, #20]
   d4fd6:	4770      	bx	lr

000d4fd8 <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d4fd8:	7d03      	ldrb	r3, [r0, #20]
   d4fda:	b11b      	cbz	r3, d4fe4 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d4fdc:	6983      	ldr	r3, [r0, #24]
   d4fde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d4fe2:	d102      	bne.n	d4fea <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d4fe4:	ed9f 0a05 	vldr	s0, [pc, #20]	; d4ffc <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d4fe8:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d4fea:	ee07 3a90 	vmov	s15, r3
   d4fee:	ed9f 7a04 	vldr	s14, [pc, #16]	; d5000 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d4ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4ff6:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d4ffa:	4770      	bx	lr
   d4ffc:	00000000 	.word	0x00000000
   d5000:	42c80000 	.word	0x42c80000

000d5004 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d5004:	7d03      	ldrb	r3, [r0, #20]
   d5006:	b11b      	cbz	r3, d5010 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d5008:	6a03      	ldr	r3, [r0, #32]
   d500a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d500e:	d102      	bne.n	d5016 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d5010:	ed9f 0a05 	vldr	s0, [pc, #20]	; d5028 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d5014:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d5016:	ee07 3a90 	vmov	s15, r3
   d501a:	ed9f 7a04 	vldr	s14, [pc, #16]	; d502c <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d501e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5022:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d5026:	4770      	bx	lr
   d5028:	00000000 	.word	0x00000000
   d502c:	42c80000 	.word	0x42c80000

000d5030 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d5030:	7d03      	ldrb	r3, [r0, #20]
   d5032:	b17b      	cbz	r3, d5054 <_ZNK14CellularSignal10getQualityEv+0x24>
   d5034:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d5036:	2b00      	cmp	r3, #0
   d5038:	db0c      	blt.n	d5054 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d503a:	ee07 3a90 	vmov	s15, r3
   d503e:	eddf 6a07 	vldr	s13, [pc, #28]	; d505c <_ZNK14CellularSignal10getQualityEv+0x2c>
   d5042:	ed9f 0a07 	vldr	s0, [pc, #28]	; d5060 <_ZNK14CellularSignal10getQualityEv+0x30>
   d5046:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d504a:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d504e:	ee27 0a80 	vmul.f32	s0, s15, s0
   d5052:	4770      	bx	lr
    }

    return -1.0f;
   d5054:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d5058:	4770      	bx	lr
   d505a:	bf00      	nop
   d505c:	477fff00 	.word	0x477fff00
   d5060:	42c80000 	.word	0x42c80000

000d5064 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d5064:	7d03      	ldrb	r3, [r0, #20]
   d5066:	b17b      	cbz	r3, d5088 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d5068:	69c3      	ldr	r3, [r0, #28]
   d506a:	2b00      	cmp	r3, #0
   d506c:	db0c      	blt.n	d5088 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d506e:	ee07 3a90 	vmov	s15, r3
   d5072:	eddf 6a07 	vldr	s13, [pc, #28]	; d5090 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d5076:	ed9f 0a07 	vldr	s0, [pc, #28]	; d5094 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d507a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d507e:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d5082:	ee27 0a80 	vmul.f32	s0, s15, s0
   d5086:	4770      	bx	lr
    }

    return -1.0f;
   d5088:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d508c:	4770      	bx	lr
   d508e:	bf00      	nop
   d5090:	477fff00 	.word	0x477fff00
   d5094:	42c80000 	.word	0x42c80000

000d5098 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d5098:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d509a:	460d      	mov	r5, r1
   d509c:	f100 0410 	add.w	r4, r0, #16
   d50a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d50a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d50a4:	e895 0003 	ldmia.w	r5, {r0, r1}
   d50a8:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d50ac:	2001      	movs	r0, #1
   d50ae:	bd30      	pop	{r4, r5, pc}

000d50b0 <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d50b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d50b4:	4607      	mov	r7, r0
   d50b6:	460c      	mov	r4, r1
{
    if (base == 0) {
   d50b8:	4615      	mov	r5, r2
   d50ba:	b92a      	cbnz	r2, d50c8 <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d50bc:	6803      	ldr	r3, [r0, #0]
   d50be:	b2c9      	uxtb	r1, r1
   d50c0:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d50c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d50c6:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d50c8:	2900      	cmp	r1, #0
   d50ca:	da07      	bge.n	d50dc <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d50cc:	2a0a      	cmp	r2, #10
   d50ce:	d105      	bne.n	d50dc <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d50d0:	212d      	movs	r1, #45	; 0x2d
   d50d2:	f7ff fe11 	bl	d4cf8 <_ZN5Print5printEc>
            val = -n;
   d50d6:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d50d8:	4606      	mov	r6, r0
            val = -n;
   d50da:	e001      	b.n	d50e0 <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d50dc:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d50de:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d50e0:	b2ea      	uxtb	r2, r5
   d50e2:	4638      	mov	r0, r7
   d50e4:	f7ff fe17 	bl	d4d16 <_ZN5Print11printNumberEmh>
    }
}
   d50e8:	4430      	add	r0, r6
   d50ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d50ee <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
   d50ee:	b570      	push	{r4, r5, r6, lr}
   d50f0:	460d      	mov	r5, r1
   d50f2:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d50f4:	220a      	movs	r2, #10
   d50f6:	6881      	ldr	r1, [r0, #8]
   d50f8:	4628      	mov	r0, r5
   d50fa:	f7ff ffd9 	bl	d50b0 <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
   d50fe:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d5100:	4604      	mov	r4, r0
    n += p.print(',');
   d5102:	4628      	mov	r0, r5
   d5104:	f7ff fdf8 	bl	d4cf8 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d5108:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d510a:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d510c:	68f1      	ldr	r1, [r6, #12]
   d510e:	4628      	mov	r0, r5
   d5110:	f7ff ffce 	bl	d50b0 <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
   d5114:	4420      	add	r0, r4
   d5116:	bd70      	pop	{r4, r5, r6, pc}

000d5118 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d5118:	f1a0 0004 	sub.w	r0, r0, #4
   d511c:	f7ff bfe7 	b.w	d50ee <_ZNK14CellularSignal7printToER5Print>

000d5120 <_ZN6detail9_getVCellEhh>:
namespace detail {
	// Converts VCELL_REGISTER reading to Battery Voltage
	float _getVCell(byte MSB, byte LSB) {
		// VCELL = 12-bit value, 1.25mV (1V/800) per bit
		float value = (float)((MSB << 4) | (LSB >> 4));
		return value / 800.0;
   d5120:	0909      	lsrs	r1, r1, #4
   d5122:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
   d5126:	ee07 0a90 	vmov	s15, r0
   d512a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
	}
   d512e:	eddf 7a02 	vldr	s15, [pc, #8]	; d5138 <_ZN6detail9_getVCellEhh+0x18>
   d5132:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d5136:	4770      	bx	lr
   d5138:	44480000 	.word	0x44480000

000d513c <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d513c:	6800      	ldr	r0, [r0, #0]
   d513e:	f000 bb82 	b.w	d5846 <_ZN7TwoWire4lockEv>

000d5142 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d5142:	b510      	push	{r4, lr}
   d5144:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d5146:	6001      	str	r1, [r0, #0]
   d5148:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d514a:	b10a      	cbz	r2, d5150 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d514c:	f7ff fff6 	bl	d513c <_ZN9FuelGauge4lockEv>
    }
}
   d5150:	4620      	mov	r0, r4
   d5152:	bd10      	pop	{r4, pc}

000d5154 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d5154:	b538      	push	{r3, r4, r5, lr}
   d5156:	4604      	mov	r4, r0
   d5158:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d515a:	f000 fd15 	bl	d5b88 <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d515e:	462a      	mov	r2, r5
   d5160:	4601      	mov	r1, r0
   d5162:	4620      	mov	r0, r4
   d5164:	f7ff ffed 	bl	d5142 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d5168:	4620      	mov	r0, r4
   d516a:	bd38      	pop	{r3, r4, r5, pc}

000d516c <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d516c:	6800      	ldr	r0, [r0, #0]
   d516e:	f000 bb73 	b.w	d5858 <_ZN7TwoWire6unlockEv>

000d5172 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d5172:	b510      	push	{r4, lr}
{
    if (lock_) {
   d5174:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d5176:	4604      	mov	r4, r0
{
    if (lock_) {
   d5178:	b10b      	cbz	r3, d517e <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d517a:	f7ff fff7 	bl	d516c <_ZN9FuelGauge6unlockEv>
    }
}
   d517e:	4620      	mov	r0, r4
   d5180:	bd10      	pop	{r4, pc}

000d5182 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d5182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5184:	4604      	mov	r4, r0
   d5186:	4616      	mov	r6, r2
   d5188:	461d      	mov	r5, r3
   d518a:	460f      	mov	r7, r1
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d518c:	f7ff ffd6 	bl	d513c <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   d5190:	6820      	ldr	r0, [r4, #0]
   d5192:	2136      	movs	r1, #54	; 0x36
   d5194:	f000 fb50 	bl	d5838 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
   d5198:	6820      	ldr	r0, [r4, #0]
   d519a:	6803      	ldr	r3, [r0, #0]
   d519c:	4639      	mov	r1, r7
   d519e:	689b      	ldr	r3, [r3, #8]
   d51a0:	4798      	blx	r3
    i2c_.endTransmission(true);
   d51a2:	2101      	movs	r1, #1
   d51a4:	6820      	ldr	r0, [r4, #0]
   d51a6:	f000 fb4a 	bl	d583e <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
   d51aa:	2202      	movs	r2, #2
   d51ac:	2136      	movs	r1, #54	; 0x36
   d51ae:	2301      	movs	r3, #1
   d51b0:	6820      	ldr	r0, [r4, #0]
   d51b2:	f000 fb2b 	bl	d580c <_ZN7TwoWire11requestFromEhjh>
    MSB = i2c_.read();
   d51b6:	6820      	ldr	r0, [r4, #0]
   d51b8:	6803      	ldr	r3, [r0, #0]
   d51ba:	695b      	ldr	r3, [r3, #20]
   d51bc:	4798      	blx	r3
   d51be:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
   d51c0:	6820      	ldr	r0, [r4, #0]
   d51c2:	6803      	ldr	r3, [r0, #0]
   d51c4:	695b      	ldr	r3, [r3, #20]
   d51c6:	4798      	blx	r3
   d51c8:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d51ca:	4620      	mov	r0, r4
}
   d51cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d51d0:	f7ff bfcc 	b.w	d516c <_ZN9FuelGauge6unlockEv>

000d51d4 <_ZN9FuelGauge8getVCellEv>:
		return MSB + decimal;
	}
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {
   d51d4:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d51d6:	ab02      	add	r3, sp, #8
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {

	byte MSB = 0;
   d51d8:	2200      	movs	r2, #0
   d51da:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;
   d51de:	f803 2d01 	strb.w	r2, [r3, #-1]!

	readRegister(VCELL_REGISTER, MSB, LSB);
   d51e2:	2102      	movs	r1, #2
   d51e4:	f10d 0206 	add.w	r2, sp, #6
   d51e8:	f7ff ffcb 	bl	d5182 <_ZN9FuelGauge12readRegisterEhRhS0_>
	return detail::_getVCell(MSB, LSB);
   d51ec:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d51f0:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   d51f4:	b003      	add	sp, #12
   d51f6:	f85d eb04 	ldr.w	lr, [sp], #4

	byte MSB = 0;
	byte LSB = 0;

	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
   d51fa:	f7ff bf91 	b.w	d5120 <_ZN6detail9_getVCellEhh>
	...

000d5200 <_ZN9FuelGauge6getSoCEv>:
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
   d5200:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d5202:	ab02      	add	r3, sp, #8
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d5204:	2200      	movs	r2, #0
	byte LSB = 0;
   d5206:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d520a:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
   d520e:	2104      	movs	r1, #4
   d5210:	f10d 0206 	add.w	r2, sp, #6
   d5214:	f7ff ffb5 	bl	d5182 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d5218:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d521c:	f000 ff96 	bl	d614c <__aeabi_i2d>
   d5220:	2200      	movs	r2, #0
   d5222:	4b09      	ldr	r3, [pc, #36]	; (d5248 <_ZN9FuelGauge6getSoCEv+0x48>)
   d5224:	f000 fff8 	bl	d6218 <__aeabi_dmul>
   d5228:	f001 faee 	bl	d6808 <__aeabi_d2f>
   d522c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d5230:	ee00 3a10 	vmov	s0, r3
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d5234:	ee07 0a90 	vmov	s15, r0
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d5238:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d523c:	ee37 0a80 	vadd.f32	s0, s15, s0
   d5240:	b003      	add	sp, #12
   d5242:	f85d fb04 	ldr.w	pc, [sp], #4
   d5246:	bf00      	nop
   d5248:	3f700000 	.word	0x3f700000

000d524c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d524c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d524e:	4b0c      	ldr	r3, [pc, #48]	; (d5280 <serialEventRun+0x34>)
   d5250:	b133      	cbz	r3, d5260 <serialEventRun+0x14>
   d5252:	f000 f957 	bl	d5504 <_Z16_fetch_usbserialv>
   d5256:	6803      	ldr	r3, [r0, #0]
   d5258:	691b      	ldr	r3, [r3, #16]
   d525a:	4798      	blx	r3
   d525c:	2800      	cmp	r0, #0
   d525e:	dc09      	bgt.n	d5274 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5260:	4b08      	ldr	r3, [pc, #32]	; (d5284 <serialEventRun+0x38>)
   d5262:	b163      	cbz	r3, d527e <serialEventRun+0x32>
   d5264:	f000 fa52 	bl	d570c <_Z22__fetch_global_Serial1v>
   d5268:	6803      	ldr	r3, [r0, #0]
   d526a:	691b      	ldr	r3, [r3, #16]
   d526c:	4798      	blx	r3
   d526e:	2800      	cmp	r0, #0
   d5270:	dc03      	bgt.n	d527a <serialEventRun+0x2e>
   d5272:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5274:	f3af 8000 	nop.w
   d5278:	e7f2      	b.n	d5260 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d527a:	f3af 8000 	nop.w
   d527e:	bd08      	pop	{r3, pc}
	...

000d5288 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5288:	b508      	push	{r3, lr}
	serialEventRun();
   d528a:	f7ff ffdf 	bl	d524c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d528e:	f7ff fa37 	bl	d4700 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5292:	4b01      	ldr	r3, [pc, #4]	; (d5298 <_post_loop+0x10>)
   d5294:	6018      	str	r0, [r3, #0]
   d5296:	bd08      	pop	{r3, pc}
   d5298:	2003e728 	.word	0x2003e728

000d529c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d529c:	4802      	ldr	r0, [pc, #8]	; (d52a8 <_Z33system_initialize_user_backup_ramv+0xc>)
   d529e:	4a03      	ldr	r2, [pc, #12]	; (d52ac <_Z33system_initialize_user_backup_ramv+0x10>)
   d52a0:	4903      	ldr	r1, [pc, #12]	; (d52b0 <_Z33system_initialize_user_backup_ramv+0x14>)
   d52a2:	1a12      	subs	r2, r2, r0
   d52a4:	f001 bb0e 	b.w	d68c4 <memcpy>
   d52a8:	2003f400 	.word	0x2003f400
   d52ac:	2003f404 	.word	0x2003f404
   d52b0:	000d6dc0 	.word	0x000d6dc0

000d52b4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d52b4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d52b6:	2300      	movs	r3, #0
   d52b8:	9300      	str	r3, [sp, #0]
   d52ba:	461a      	mov	r2, r3
   d52bc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d52c0:	f7ff fb78 	bl	d49b4 <system_ctrl_set_result>
}
   d52c4:	b003      	add	sp, #12
   d52c6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d52cc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d52cc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d52ce:	8843      	ldrh	r3, [r0, #2]
   d52d0:	2b0a      	cmp	r3, #10
   d52d2:	d008      	beq.n	d52e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d52d4:	2b50      	cmp	r3, #80	; 0x50
   d52d6:	d109      	bne.n	d52ec <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d52d8:	4b09      	ldr	r3, [pc, #36]	; (d5300 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d52da:	681b      	ldr	r3, [r3, #0]
   d52dc:	b13b      	cbz	r3, d52ee <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d52de:	b003      	add	sp, #12
   d52e0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d52e4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d52e6:	f7ff ffe5 	bl	d52b4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d52ea:	e006      	b.n	d52fa <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d52ec:	2300      	movs	r3, #0
   d52ee:	9300      	str	r3, [sp, #0]
   d52f0:	461a      	mov	r2, r3
   d52f2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d52f6:	f7ff fb5d 	bl	d49b4 <system_ctrl_set_result>
        break;
    }
}
   d52fa:	b003      	add	sp, #12
   d52fc:	f85d fb04 	ldr.w	pc, [sp], #4
   d5300:	2003e3dc 	.word	0x2003e3dc

000d5304 <module_user_init_hook>:

void module_user_init_hook()
{
   d5304:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5306:	4c10      	ldr	r4, [pc, #64]	; (d5348 <module_user_init_hook+0x44>)
   d5308:	4d10      	ldr	r5, [pc, #64]	; (d534c <module_user_init_hook+0x48>)
   d530a:	6823      	ldr	r3, [r4, #0]
   d530c:	42ab      	cmp	r3, r5
   d530e:	4b10      	ldr	r3, [pc, #64]	; (d5350 <module_user_init_hook+0x4c>)
   d5310:	bf0c      	ite	eq
   d5312:	2201      	moveq	r2, #1
   d5314:	2200      	movne	r2, #0
   d5316:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5318:	d002      	beq.n	d5320 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d531a:	f7ff ffbf 	bl	d529c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d531e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5320:	f7ff f9e6 	bl	d46f0 <HAL_RNG_GetRandomNumber>
   d5324:	4604      	mov	r4, r0
    srand(seed);
   d5326:	f001 fae1 	bl	d68ec <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d532a:	4b0a      	ldr	r3, [pc, #40]	; (d5354 <module_user_init_hook+0x50>)
   d532c:	b113      	cbz	r3, d5334 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d532e:	4620      	mov	r0, r4
   d5330:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5334:	2100      	movs	r1, #0
   d5336:	4807      	ldr	r0, [pc, #28]	; (d5354 <module_user_init_hook+0x50>)
   d5338:	f7ff fbb6 	bl	d4aa8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d533c:	2100      	movs	r1, #0
   d533e:	4806      	ldr	r0, [pc, #24]	; (d5358 <module_user_init_hook+0x54>)
}
   d5340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5344:	f7ff bb2c 	b.w	d49a0 <system_ctrl_set_app_request_handler>
   d5348:	2003f400 	.word	0x2003f400
   d534c:	9a271c1e 	.word	0x9a271c1e
   d5350:	2003e3e0 	.word	0x2003e3e0
   d5354:	00000000 	.word	0x00000000
   d5358:	000d52cd 	.word	0x000d52cd

000d535c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d535c:	4770      	bx	lr

000d535e <_ZN9IPAddressD0Ev>:
   d535e:	b510      	push	{r4, lr}
   d5360:	2118      	movs	r1, #24
   d5362:	4604      	mov	r4, r0
   d5364:	f000 fc44 	bl	d5bf0 <_ZdlPvj>
   d5368:	4620      	mov	r0, r4
   d536a:	bd10      	pop	{r4, pc}

000d536c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d536c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d536e:	7d03      	ldrb	r3, [r0, #20]
   d5370:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5372:	b08d      	sub	sp, #52	; 0x34
   d5374:	460e      	mov	r6, r1
   d5376:	f100 0704 	add.w	r7, r0, #4
   d537a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d537e:	d002      	beq.n	d5386 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5380:	f100 0508 	add.w	r5, r0, #8
   d5384:	e018      	b.n	d53b8 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5386:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5388:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d538a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d538e:	232f      	movs	r3, #47	; 0x2f
   d5390:	462a      	mov	r2, r5
   d5392:	200a      	movs	r0, #10
   d5394:	f7ff fa0c 	bl	d47b0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5398:	4628      	mov	r0, r5
   d539a:	f001 facf 	bl	d693c <strlen>
   d539e:	6833      	ldr	r3, [r6, #0]
   d53a0:	4602      	mov	r2, r0
   d53a2:	68db      	ldr	r3, [r3, #12]
   d53a4:	4629      	mov	r1, r5
   d53a6:	4630      	mov	r0, r6
   d53a8:	4798      	blx	r3
   d53aa:	e00f      	b.n	d53cc <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d53ac:	b124      	cbz	r4, d53b8 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d53ae:	212e      	movs	r1, #46	; 0x2e
   d53b0:	4630      	mov	r0, r6
   d53b2:	f7ff fca1 	bl	d4cf8 <_ZN5Print5printEc>
   d53b6:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d53b8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d53bc:	220a      	movs	r2, #10
   d53be:	4630      	mov	r0, r6
   d53c0:	f7ff fca9 	bl	d4d16 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d53c4:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d53c6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d53c8:	d1f0      	bne.n	d53ac <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d53ca:	4620      	mov	r0, r4
    }
    return n;
}
   d53cc:	b00d      	add	sp, #52	; 0x34
   d53ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d53d0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d53d0:	b510      	push	{r4, lr}
   d53d2:	4b05      	ldr	r3, [pc, #20]	; (d53e8 <_ZN9IPAddressC1Ev+0x18>)
   d53d4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d53d6:	2211      	movs	r2, #17
   d53d8:	f840 3b04 	str.w	r3, [r0], #4
   d53dc:	2100      	movs	r1, #0
   d53de:	f001 fa7c 	bl	d68da <memset>
{
    clear();
}
   d53e2:	4620      	mov	r0, r4
   d53e4:	bd10      	pop	{r4, pc}
   d53e6:	bf00      	nop
   d53e8:	000d6bd8 	.word	0x000d6bd8

000d53ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d53ec:	4603      	mov	r3, r0
   d53ee:	4a07      	ldr	r2, [pc, #28]	; (d540c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d53f0:	b510      	push	{r4, lr}
   d53f2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d53f6:	f101 0210 	add.w	r2, r1, #16
   d53fa:	f851 4b04 	ldr.w	r4, [r1], #4
   d53fe:	f843 4b04 	str.w	r4, [r3], #4
   d5402:	4291      	cmp	r1, r2
   d5404:	d1f9      	bne.n	d53fa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5406:	780a      	ldrb	r2, [r1, #0]
   d5408:	701a      	strb	r2, [r3, #0]
}
   d540a:	bd10      	pop	{r4, pc}
   d540c:	000d6bd8 	.word	0x000d6bd8

000d5410 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5410:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5412:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5416:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d541a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d541e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5422:	2304      	movs	r3, #4
   d5424:	6041      	str	r1, [r0, #4]
   d5426:	7503      	strb	r3, [r0, #20]
   d5428:	bd10      	pop	{r4, pc}

000d542a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d542a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d542c:	780d      	ldrb	r5, [r1, #0]
   d542e:	788b      	ldrb	r3, [r1, #2]
   d5430:	784a      	ldrb	r2, [r1, #1]
   d5432:	78c9      	ldrb	r1, [r1, #3]
   d5434:	9100      	str	r1, [sp, #0]
   d5436:	4629      	mov	r1, r5
   d5438:	f7ff ffea 	bl	d5410 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d543c:	b003      	add	sp, #12
   d543e:	bd30      	pop	{r4, r5, pc}

000d5440 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5440:	7441      	strb	r1, [r0, #17]
   d5442:	4770      	bx	lr

000d5444 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5444:	4770      	bx	lr

000d5446 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5446:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5448:	2100      	movs	r1, #0
   d544a:	7c00      	ldrb	r0, [r0, #16]
   d544c:	f7ff fa70 	bl	d4930 <HAL_USB_USART_Receive_Data>
}
   d5450:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5454:	bf28      	it	cs
   d5456:	f04f 30ff 	movcs.w	r0, #4294967295
   d545a:	bd08      	pop	{r3, pc}

000d545c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d545c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d545e:	2101      	movs	r1, #1
   d5460:	7c00      	ldrb	r0, [r0, #16]
   d5462:	f7ff fa65 	bl	d4930 <HAL_USB_USART_Receive_Data>
}
   d5466:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d546a:	bf28      	it	cs
   d546c:	f04f 30ff 	movcs.w	r0, #4294967295
   d5470:	bd08      	pop	{r3, pc}

000d5472 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5472:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5474:	7c00      	ldrb	r0, [r0, #16]
   d5476:	f7ff fa53 	bl	d4920 <HAL_USB_USART_Available_Data_For_Write>
}
   d547a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d547e:	bd08      	pop	{r3, pc}

000d5480 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5480:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5482:	7c00      	ldrb	r0, [r0, #16]
   d5484:	f7ff fa44 	bl	d4910 <HAL_USB_USART_Available_Data>
}
   d5488:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d548c:	bd08      	pop	{r3, pc}

000d548e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d548e:	7c00      	ldrb	r0, [r0, #16]
   d5490:	f7ff ba5e 	b.w	d4950 <HAL_USB_USART_Flush_Data>

000d5494 <_ZN9USBSerialD0Ev>:
   d5494:	b510      	push	{r4, lr}
   d5496:	2114      	movs	r1, #20
   d5498:	4604      	mov	r4, r0
   d549a:	f000 fba9 	bl	d5bf0 <_ZdlPvj>
   d549e:	4620      	mov	r0, r4
   d54a0:	bd10      	pop	{r4, pc}

000d54a2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d54a2:	b538      	push	{r3, r4, r5, lr}
   d54a4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d54a6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d54a8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d54aa:	f7ff fa39 	bl	d4920 <HAL_USB_USART_Available_Data_For_Write>
   d54ae:	2800      	cmp	r0, #0
   d54b0:	dc01      	bgt.n	d54b6 <_ZN9USBSerial5writeEh+0x14>
   d54b2:	7c60      	ldrb	r0, [r4, #17]
   d54b4:	b128      	cbz	r0, d54c2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d54b6:	4629      	mov	r1, r5
   d54b8:	7c20      	ldrb	r0, [r4, #16]
   d54ba:	f7ff fa41 	bl	d4940 <HAL_USB_USART_Send_Data>
   d54be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d54c2:	bd38      	pop	{r3, r4, r5, pc}

000d54c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d54c4:	b510      	push	{r4, lr}
   d54c6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d54c8:	2300      	movs	r3, #0
   d54ca:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d54cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d54d0:	60a3      	str	r3, [r4, #8]
   d54d2:	4b05      	ldr	r3, [pc, #20]	; (d54e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d54d4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d54d6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d54d8:	4608      	mov	r0, r1
{
  _serial = serial;
   d54da:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d54dc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d54de:	4611      	mov	r1, r2
   d54e0:	f7ff fa06 	bl	d48f0 <HAL_USB_USART_Init>
}
   d54e4:	4620      	mov	r0, r4
   d54e6:	bd10      	pop	{r4, pc}
   d54e8:	000d6bec 	.word	0x000d6bec

000d54ec <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d54ec:	2200      	movs	r2, #0
   d54ee:	7c00      	ldrb	r0, [r0, #16]
   d54f0:	f7ff ba06 	b.w	d4900 <HAL_USB_USART_Begin>

000d54f4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d54f4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d54f6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d54f8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d54fa:	2100      	movs	r1, #0
   d54fc:	f001 f9ed 	bl	d68da <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5500:	4620      	mov	r0, r4
   d5502:	bd10      	pop	{r4, pc}

000d5504 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5504:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5506:	4d0e      	ldr	r5, [pc, #56]	; (d5540 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5508:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d550a:	a801      	add	r0, sp, #4
   d550c:	f7ff fff2 	bl	d54f4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5510:	6829      	ldr	r1, [r5, #0]
   d5512:	f011 0401 	ands.w	r4, r1, #1
   d5516:	d110      	bne.n	d553a <_Z16_fetch_usbserialv+0x36>
   d5518:	4628      	mov	r0, r5
   d551a:	f7fe fdc0 	bl	d409e <__cxa_guard_acquire>
   d551e:	b160      	cbz	r0, d553a <_Z16_fetch_usbserialv+0x36>
   d5520:	aa01      	add	r2, sp, #4
   d5522:	4621      	mov	r1, r4
   d5524:	4807      	ldr	r0, [pc, #28]	; (d5544 <_Z16_fetch_usbserialv+0x40>)
   d5526:	f7ff ffcd 	bl	d54c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d552a:	4628      	mov	r0, r5
   d552c:	f7fe fdbc 	bl	d40a8 <__cxa_guard_release>
   d5530:	4a05      	ldr	r2, [pc, #20]	; (d5548 <_Z16_fetch_usbserialv+0x44>)
   d5532:	4906      	ldr	r1, [pc, #24]	; (d554c <_Z16_fetch_usbserialv+0x48>)
   d5534:	4803      	ldr	r0, [pc, #12]	; (d5544 <_Z16_fetch_usbserialv+0x40>)
   d5536:	f000 fb4d 	bl	d5bd4 <__aeabi_atexit>
	return _usbserial;
}
   d553a:	4802      	ldr	r0, [pc, #8]	; (d5544 <_Z16_fetch_usbserialv+0x40>)
   d553c:	b007      	add	sp, #28
   d553e:	bd30      	pop	{r4, r5, pc}
   d5540:	2003e3e4 	.word	0x2003e3e4
   d5544:	2003e3e8 	.word	0x2003e3e8
   d5548:	2003e374 	.word	0x2003e374
   d554c:	000d5445 	.word	0x000d5445

000d5550 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5550:	2200      	movs	r2, #0
   d5552:	4611      	mov	r1, r2
   d5554:	6840      	ldr	r0, [r0, #4]
   d5556:	f7ff ba4f 	b.w	d49f8 <network_ready>

000d555a <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d555a:	2200      	movs	r2, #0
   d555c:	4611      	mov	r1, r2
   d555e:	6840      	ldr	r0, [r0, #4]
   d5560:	f7ff ba6a 	b.w	d4a38 <network_listening>

000d5564 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5564:	2200      	movs	r2, #0
   d5566:	4611      	mov	r1, r2
   d5568:	6840      	ldr	r0, [r0, #4]
   d556a:	f7ff ba75 	b.w	d4a58 <network_get_listen_timeout>

000d556e <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d556e:	2200      	movs	r2, #0
   d5570:	6840      	ldr	r0, [r0, #4]
   d5572:	f7ff ba69 	b.w	d4a48 <network_set_listen_timeout>

000d5576 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5576:	2200      	movs	r2, #0
   d5578:	f081 0101 	eor.w	r1, r1, #1
   d557c:	6840      	ldr	r0, [r0, #4]
   d557e:	f7ff ba53 	b.w	d4a28 <network_listen>

000d5582 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d5582:	2300      	movs	r3, #0
   d5584:	461a      	mov	r2, r3
   d5586:	4619      	mov	r1, r3
   d5588:	6840      	ldr	r0, [r0, #4]
   d558a:	f7ff ba45 	b.w	d4a18 <network_off>

000d558e <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d558e:	2300      	movs	r3, #0
   d5590:	461a      	mov	r2, r3
   d5592:	4619      	mov	r1, r3
   d5594:	6840      	ldr	r0, [r0, #4]
   d5596:	f7ff ba37 	b.w	d4a08 <network_on>

000d559a <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d559a:	2200      	movs	r2, #0
   d559c:	4611      	mov	r1, r2
   d559e:	6840      	ldr	r0, [r0, #4]
   d55a0:	f7ff ba1a 	b.w	d49d8 <network_connecting>

000d55a4 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d55a4:	2200      	movs	r2, #0
   d55a6:	2102      	movs	r1, #2
   d55a8:	6840      	ldr	r0, [r0, #4]
   d55aa:	f7ff ba1d 	b.w	d49e8 <network_disconnect>

000d55ae <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d55ae:	2300      	movs	r3, #0
   d55b0:	461a      	mov	r2, r3
   d55b2:	6840      	ldr	r0, [r0, #4]
   d55b4:	f7ff ba08 	b.w	d49c8 <network_connect>

000d55b8 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d55b8:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d55ba:	4b1b      	ldr	r3, [pc, #108]	; (d5628 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d55bc:	6003      	str	r3, [r0, #0]
   d55be:	2500      	movs	r5, #0
   d55c0:	460f      	mov	r7, r1
   d55c2:	3328      	adds	r3, #40	; 0x28
   d55c4:	2618      	movs	r6, #24
   d55c6:	b089      	sub	sp, #36	; 0x24
   d55c8:	6043      	str	r3, [r0, #4]
   d55ca:	6085      	str	r5, [r0, #8]
   d55cc:	60c5      	str	r5, [r0, #12]
   d55ce:	4632      	mov	r2, r6
   d55d0:	4629      	mov	r1, r5
   d55d2:	4604      	mov	r4, r0
   d55d4:	3010      	adds	r0, #16
   d55d6:	f001 f980 	bl	d68da <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d55da:	462a      	mov	r2, r5
   d55dc:	4629      	mov	r1, r5
   d55de:	6878      	ldr	r0, [r7, #4]
   d55e0:	f7ff fa0a 	bl	d49f8 <network_ready>
   d55e4:	b908      	cbnz	r0, d55ea <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d55e6:	60a0      	str	r0, [r4, #8]
            return sig;
   d55e8:	e01b      	b.n	d5622 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d55ea:	4629      	mov	r1, r5
   d55ec:	4632      	mov	r2, r6
   d55ee:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d55f0:	9500      	str	r5, [sp, #0]
   d55f2:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d55f4:	f001 f971 	bl	d68da <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d55f8:	a902      	add	r1, sp, #8
   d55fa:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d55fc:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d5600:	f7ff f96e 	bl	d48e0 <cellular_signal>
   d5604:	b110      	cbz	r0, d560c <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d5606:	2301      	movs	r3, #1
   d5608:	60a3      	str	r3, [r4, #8]
            return sig;
   d560a:	e00a      	b.n	d5622 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d560c:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d560e:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d5610:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d5612:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d5614:	b90b      	cbnz	r3, d561a <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d5616:	2302      	movs	r3, #2
   d5618:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d561a:	a902      	add	r1, sp, #8
   d561c:	4620      	mov	r0, r4
   d561e:	f7ff fd3b 	bl	d5098 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d5622:	4620      	mov	r0, r4
   d5624:	b009      	add	sp, #36	; 0x24
   d5626:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5628:	000d6ba4 	.word	0x000d6ba4

000d562c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d562c:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d562e:	4c08      	ldr	r4, [pc, #32]	; (d5650 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d5630:	2528      	movs	r5, #40	; 0x28
   d5632:	462a      	mov	r2, r5
   d5634:	2100      	movs	r1, #0
   d5636:	4620      	mov	r0, r4
   d5638:	f001 f94f 	bl	d68da <memset>
        cid = -1;
   d563c:	f04f 33ff 	mov.w	r3, #4294967295
   d5640:	6063      	str	r3, [r4, #4]
   d5642:	4b04      	ldr	r3, [pc, #16]	; (d5654 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d5644:	8025      	strh	r5, [r4, #0]
   d5646:	2204      	movs	r2, #4
   d5648:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d564a:	4a03      	ldr	r2, [pc, #12]	; (d5658 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d564c:	601a      	str	r2, [r3, #0]
   d564e:	bd38      	pop	{r3, r4, r5, pc}
   d5650:	2003e404 	.word	0x2003e404
   d5654:	2003e3fc 	.word	0x2003e3fc
   d5658:	000d6c1c 	.word	0x000d6c1c

000d565c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d565c:	4770      	bx	lr

000d565e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d565e:	7441      	strb	r1, [r0, #17]
   d5660:	4770      	bx	lr

000d5662 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5662:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5664:	7c00      	ldrb	r0, [r0, #16]
   d5666:	f7ff f8db 	bl	d4820 <HAL_USART_Available_Data_For_Write>
}
   d566a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d566e:	bd08      	pop	{r3, pc}

000d5670 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5670:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5672:	7c00      	ldrb	r0, [r0, #16]
   d5674:	f7ff f8b4 	bl	d47e0 <HAL_USART_Available_Data>
}
   d5678:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d567c:	bd08      	pop	{r3, pc}

000d567e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d567e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5680:	7c00      	ldrb	r0, [r0, #16]
   d5682:	f7ff f8bd 	bl	d4800 <HAL_USART_Peek_Data>
}
   d5686:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d568a:	bf28      	it	cs
   d568c:	f04f 30ff 	movcs.w	r0, #4294967295
   d5690:	bd08      	pop	{r3, pc}

000d5692 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5692:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5694:	7c00      	ldrb	r0, [r0, #16]
   d5696:	f7ff f8ab 	bl	d47f0 <HAL_USART_Read_Data>
}
   d569a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d569e:	bf28      	it	cs
   d56a0:	f04f 30ff 	movcs.w	r0, #4294967295
   d56a4:	bd08      	pop	{r3, pc}

000d56a6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d56a6:	7c00      	ldrb	r0, [r0, #16]
   d56a8:	f7ff b8b2 	b.w	d4810 <HAL_USART_Flush_Data>

000d56ac <_ZN11USARTSerialD0Ev>:
   d56ac:	b510      	push	{r4, lr}
   d56ae:	2114      	movs	r1, #20
   d56b0:	4604      	mov	r4, r0
   d56b2:	f000 fa9d 	bl	d5bf0 <_ZdlPvj>
   d56b6:	4620      	mov	r0, r4
   d56b8:	bd10      	pop	{r4, pc}

000d56ba <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d56ba:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d56bc:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d56be:	4604      	mov	r4, r0
   d56c0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d56c2:	b925      	cbnz	r5, d56ce <_ZN11USARTSerial5writeEh+0x14>
   d56c4:	7c00      	ldrb	r0, [r0, #16]
   d56c6:	f7ff f8ab 	bl	d4820 <HAL_USART_Available_Data_For_Write>
   d56ca:	2800      	cmp	r0, #0
   d56cc:	dd05      	ble.n	d56da <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d56ce:	4631      	mov	r1, r6
   d56d0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d56d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d56d6:	f7ff b87b 	b.w	d47d0 <HAL_USART_Write_Data>
  }
  return 0;
}
   d56da:	4628      	mov	r0, r5
   d56dc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d56e0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d56e0:	b510      	push	{r4, lr}
   d56e2:	4604      	mov	r4, r0
   d56e4:	4608      	mov	r0, r1
   d56e6:	4611      	mov	r1, r2
   d56e8:	2200      	movs	r2, #0
   d56ea:	6062      	str	r2, [r4, #4]
   d56ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d56f0:	60a2      	str	r2, [r4, #8]
   d56f2:	4a05      	ldr	r2, [pc, #20]	; (d5708 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d56f4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d56f6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d56f8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d56fa:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d56fc:	461a      	mov	r2, r3
   d56fe:	f7ff f85f 	bl	d47c0 <HAL_USART_Init>
}
   d5702:	4620      	mov	r0, r4
   d5704:	bd10      	pop	{r4, pc}
   d5706:	bf00      	nop
   d5708:	000d6c50 	.word	0x000d6c50

000d570c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d570c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d570e:	4d0c      	ldr	r5, [pc, #48]	; (d5740 <_Z22__fetch_global_Serial1v+0x34>)
   d5710:	6829      	ldr	r1, [r5, #0]
   d5712:	f011 0401 	ands.w	r4, r1, #1
   d5716:	d111      	bne.n	d573c <_Z22__fetch_global_Serial1v+0x30>
   d5718:	4628      	mov	r0, r5
   d571a:	f7fe fcc0 	bl	d409e <__cxa_guard_acquire>
   d571e:	b168      	cbz	r0, d573c <_Z22__fetch_global_Serial1v+0x30>
   d5720:	4a08      	ldr	r2, [pc, #32]	; (d5744 <_Z22__fetch_global_Serial1v+0x38>)
   d5722:	4b09      	ldr	r3, [pc, #36]	; (d5748 <_Z22__fetch_global_Serial1v+0x3c>)
   d5724:	4809      	ldr	r0, [pc, #36]	; (d574c <_Z22__fetch_global_Serial1v+0x40>)
   d5726:	4621      	mov	r1, r4
   d5728:	f7ff ffda 	bl	d56e0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d572c:	4628      	mov	r0, r5
   d572e:	f7fe fcbb 	bl	d40a8 <__cxa_guard_release>
   d5732:	4a07      	ldr	r2, [pc, #28]	; (d5750 <_Z22__fetch_global_Serial1v+0x44>)
   d5734:	4907      	ldr	r1, [pc, #28]	; (d5754 <_Z22__fetch_global_Serial1v+0x48>)
   d5736:	4805      	ldr	r0, [pc, #20]	; (d574c <_Z22__fetch_global_Serial1v+0x40>)
   d5738:	f000 fa4c 	bl	d5bd4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d573c:	4803      	ldr	r0, [pc, #12]	; (d574c <_Z22__fetch_global_Serial1v+0x40>)
   d573e:	bd38      	pop	{r3, r4, r5, pc}
   d5740:	2003e4c4 	.word	0x2003e4c4
   d5744:	2003e4c8 	.word	0x2003e4c8
   d5748:	2003e440 	.word	0x2003e440
   d574c:	2003e42c 	.word	0x2003e42c
   d5750:	2003e374 	.word	0x2003e374
   d5754:	000d565d 	.word	0x000d565d

000d5758 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d5758:	4770      	bx	lr

000d575a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d575a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d575c:	4606      	mov	r6, r0
   d575e:	4615      	mov	r5, r2
   d5760:	460c      	mov	r4, r1
   d5762:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5764:	42bc      	cmp	r4, r7
   d5766:	d006      	beq.n	d5776 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5768:	6833      	ldr	r3, [r6, #0]
   d576a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d576e:	689b      	ldr	r3, [r3, #8]
   d5770:	4630      	mov	r0, r6
   d5772:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5774:	e7f6      	b.n	d5764 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5776:	4628      	mov	r0, r5
   d5778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d577a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d577a:	2200      	movs	r2, #0
   d577c:	7c00      	ldrb	r0, [r0, #16]
   d577e:	f7ff b867 	b.w	d4850 <HAL_I2C_Write_Data>

000d5782 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5782:	2100      	movs	r1, #0
   d5784:	7c00      	ldrb	r0, [r0, #16]
   d5786:	f7ff b86b 	b.w	d4860 <HAL_I2C_Available_Data>

000d578a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d578a:	2100      	movs	r1, #0
   d578c:	7c00      	ldrb	r0, [r0, #16]
   d578e:	f7ff b86f 	b.w	d4870 <HAL_I2C_Read_Data>

000d5792 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5792:	2100      	movs	r1, #0
   d5794:	7c00      	ldrb	r0, [r0, #16]
   d5796:	f7ff b873 	b.w	d4880 <HAL_I2C_Peek_Data>

000d579a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d579a:	2100      	movs	r1, #0
   d579c:	7c00      	ldrb	r0, [r0, #16]
   d579e:	f7ff b877 	b.w	d4890 <HAL_I2C_Flush_Data>

000d57a2 <_ZN7TwoWireD0Ev>:
   d57a2:	b510      	push	{r4, lr}
   d57a4:	2114      	movs	r1, #20
   d57a6:	4604      	mov	r4, r0
   d57a8:	f000 fa22 	bl	d5bf0 <_ZdlPvj>
   d57ac:	4620      	mov	r0, r4
   d57ae:	bd10      	pop	{r4, pc}

000d57b0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d57b0:	b510      	push	{r4, lr}
   d57b2:	4604      	mov	r4, r0
   d57b4:	2300      	movs	r3, #0
   d57b6:	6063      	str	r3, [r4, #4]
   d57b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d57bc:	60a3      	str	r3, [r4, #8]
   d57be:	4b04      	ldr	r3, [pc, #16]	; (d57d0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d57c0:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d57c2:	4608      	mov	r0, r1
   d57c4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d57c6:	4611      	mov	r1, r2
   d57c8:	f7ff f86a 	bl	d48a0 <HAL_I2C_Init>
}
   d57cc:	4620      	mov	r0, r4
   d57ce:	bd10      	pop	{r4, pc}
   d57d0:	000d6c80 	.word	0x000d6c80

000d57d4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d57d4:	b570      	push	{r4, r5, r6, lr}
   d57d6:	460c      	mov	r4, r1
   d57d8:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d57da:	2514      	movs	r5, #20
   d57dc:	4606      	mov	r6, r0
   d57de:	462a      	mov	r2, r5
   d57e0:	2100      	movs	r1, #0
   d57e2:	a801      	add	r0, sp, #4
   d57e4:	f001 f879 	bl	d68da <memset>
   d57e8:	7823      	ldrb	r3, [r4, #0]
   d57ea:	f88d 3008 	strb.w	r3, [sp, #8]
   d57ee:	6863      	ldr	r3, [r4, #4]
   d57f0:	9303      	str	r3, [sp, #12]
   d57f2:	68e3      	ldr	r3, [r4, #12]
   d57f4:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d57f6:	2200      	movs	r2, #0
   d57f8:	7a23      	ldrb	r3, [r4, #8]
   d57fa:	7c30      	ldrb	r0, [r6, #16]
   d57fc:	f8ad 5004 	strh.w	r5, [sp, #4]
   d5800:	a901      	add	r1, sp, #4
   d5802:	9305      	str	r3, [sp, #20]
   d5804:	f7ff f864 	bl	d48d0 <HAL_I2C_Request_Data_Ex>
}
   d5808:	b006      	add	sp, #24
   d580a:	bd70      	pop	{r4, r5, r6, pc}

000d580c <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d580c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d580e:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d5810:	f88d 1000 	strb.w	r1, [sp]
   d5814:	f04f 0164 	mov.w	r1, #100	; 0x64
   d5818:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d581a:	bf18      	it	ne
   d581c:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d581e:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d5820:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5822:	f88d 3008 	strb.w	r3, [sp, #8]
   d5826:	f7ff ffd5 	bl	d57d4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d582a:	b005      	add	sp, #20
   d582c:	f85d fb04 	ldr.w	pc, [sp], #4

000d5830 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5830:	2200      	movs	r2, #0
   d5832:	7c00      	ldrb	r0, [r0, #16]
   d5834:	f7fe bffc 	b.w	d4830 <HAL_I2C_Begin_Transmission>

000d5838 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d5838:	b2c9      	uxtb	r1, r1
   d583a:	f7ff bff9 	b.w	d5830 <_ZN7TwoWire17beginTransmissionEh>

000d583e <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d583e:	2200      	movs	r2, #0
   d5840:	7c00      	ldrb	r0, [r0, #16]
   d5842:	f7fe bffd 	b.w	d4840 <HAL_I2C_End_Transmission>

000d5846 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d5846:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d5848:	2100      	movs	r1, #0
   d584a:	7c00      	ldrb	r0, [r0, #16]
   d584c:	f7ff f830 	bl	d48b0 <HAL_I2C_Acquire>
}
   d5850:	fab0 f080 	clz	r0, r0
   d5854:	0940      	lsrs	r0, r0, #5
   d5856:	bd08      	pop	{r3, pc}

000d5858 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d5858:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d585a:	2100      	movs	r1, #0
   d585c:	7c00      	ldrb	r0, [r0, #16]
   d585e:	f7ff f82f 	bl	d48c0 <HAL_I2C_Release>
}
   d5862:	fab0 f080 	clz	r0, r0
   d5866:	0940      	lsrs	r0, r0, #5
   d5868:	bd08      	pop	{r3, pc}

000d586a <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d586a:	2200      	movs	r2, #0
   d586c:	4611      	mov	r1, r2
   d586e:	6840      	ldr	r0, [r0, #4]
   d5870:	f7ff b8e2 	b.w	d4a38 <network_listening>

000d5874 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5874:	2200      	movs	r2, #0
   d5876:	4611      	mov	r1, r2
   d5878:	6840      	ldr	r0, [r0, #4]
   d587a:	f7ff b8ed 	b.w	d4a58 <network_get_listen_timeout>

000d587e <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d587e:	2200      	movs	r2, #0
   d5880:	6840      	ldr	r0, [r0, #4]
   d5882:	f7ff b8e1 	b.w	d4a48 <network_set_listen_timeout>

000d5886 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5886:	2200      	movs	r2, #0
   d5888:	f081 0101 	eor.w	r1, r1, #1
   d588c:	6840      	ldr	r0, [r0, #4]
   d588e:	f7ff b8cb 	b.w	d4a28 <network_listen>

000d5892 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5892:	2300      	movs	r3, #0
   d5894:	461a      	mov	r2, r3
   d5896:	2101      	movs	r1, #1
   d5898:	6840      	ldr	r0, [r0, #4]
   d589a:	f7ff b8bd 	b.w	d4a18 <network_off>

000d589e <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d589e:	2300      	movs	r3, #0
   d58a0:	461a      	mov	r2, r3
   d58a2:	4619      	mov	r1, r3
   d58a4:	6840      	ldr	r0, [r0, #4]
   d58a6:	f7ff b8af 	b.w	d4a08 <network_on>

000d58aa <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d58aa:	2200      	movs	r2, #0
   d58ac:	4611      	mov	r1, r2
   d58ae:	6840      	ldr	r0, [r0, #4]
   d58b0:	f7ff b8a2 	b.w	d49f8 <network_ready>

000d58b4 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d58b4:	2200      	movs	r2, #0
   d58b6:	4611      	mov	r1, r2
   d58b8:	6840      	ldr	r0, [r0, #4]
   d58ba:	f7ff b88d 	b.w	d49d8 <network_connecting>

000d58be <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d58be:	2200      	movs	r2, #0
   d58c0:	2102      	movs	r1, #2
   d58c2:	6840      	ldr	r0, [r0, #4]
   d58c4:	f7ff b890 	b.w	d49e8 <network_disconnect>

000d58c8 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d58c8:	2300      	movs	r3, #0
   d58ca:	461a      	mov	r2, r3
   d58cc:	6840      	ldr	r0, [r0, #4]
   d58ce:	f7ff b87b 	b.w	d49c8 <network_connect>

000d58d2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d58d2:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d58d4:	4605      	mov	r5, r0
   d58d6:	b188      	cbz	r0, d58fc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d58d8:	6804      	ldr	r4, [r0, #0]
   d58da:	b14c      	cbz	r4, d58f0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d58dc:	68a3      	ldr	r3, [r4, #8]
   d58de:	b11b      	cbz	r3, d58e8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d58e0:	2203      	movs	r2, #3
   d58e2:	4621      	mov	r1, r4
   d58e4:	4620      	mov	r0, r4
   d58e6:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d58e8:	2110      	movs	r1, #16
   d58ea:	4620      	mov	r0, r4
   d58ec:	f000 f980 	bl	d5bf0 <_ZdlPvj>
   d58f0:	4628      	mov	r0, r5
   d58f2:	2114      	movs	r1, #20
      }
   d58f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d58f8:	f000 b97a 	b.w	d5bf0 <_ZdlPvj>
   d58fc:	bd38      	pop	{r3, r4, r5, pc}

000d58fe <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d58fe:	b110      	cbz	r0, d5906 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5900:	6803      	ldr	r3, [r0, #0]
   d5902:	685b      	ldr	r3, [r3, #4]
   d5904:	4718      	bx	r3
   d5906:	4770      	bx	lr

000d5908 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5908:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d590a:	6803      	ldr	r3, [r0, #0]
   d590c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d590e:	b1bb      	cbz	r3, d5940 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5910:	6858      	ldr	r0, [r3, #4]
   d5912:	f7fe ff25 	bl	d4760 <os_thread_is_current>
   d5916:	b978      	cbnz	r0, d5938 <_ZN6ThreadD1Ev+0x30>
   d5918:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d591a:	7c5a      	ldrb	r2, [r3, #17]
   d591c:	b912      	cbnz	r2, d5924 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d591e:	6858      	ldr	r0, [r3, #4]
   d5920:	f7fe ff26 	bl	d4770 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5924:	6823      	ldr	r3, [r4, #0]
   d5926:	6858      	ldr	r0, [r3, #4]
   d5928:	f7fe ff2a 	bl	d4780 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d592c:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d592e:	2300      	movs	r3, #0
   d5930:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5932:	b128      	cbz	r0, d5940 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5934:	f7ff ffcd 	bl	d58d2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5938:	6820      	ldr	r0, [r4, #0]
   d593a:	b108      	cbz	r0, d5940 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d593c:	f7ff ffc9 	bl	d58d2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5940:	4620      	mov	r0, r4
   d5942:	bd10      	pop	{r4, pc}

000d5944 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d5944:	b538      	push	{r3, r4, r5, lr}
   d5946:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5948:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d594c:	b108      	cbz	r0, d5952 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d594e:	f7fe fba4 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5952:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5956:	b108      	cbz	r0, d595c <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d5958:	f7fe ff22 	bl	d47a0 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d595c:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5960:	b135      	cbz	r5, d5970 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5962:	4628      	mov	r0, r5
   d5964:	f7ff ffd0 	bl	d5908 <_ZN6ThreadD1Ev>
   d5968:	2104      	movs	r1, #4
   d596a:	4628      	mov	r0, r5
   d596c:	f000 f940 	bl	d5bf0 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5970:	6820      	ldr	r0, [r4, #0]
   d5972:	b108      	cbz	r0, d5978 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5974:	f7ff ffc3 	bl	d58fe <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5978:	4620      	mov	r0, r4
   d597a:	bd38      	pop	{r3, r4, r5, pc}

000d597c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d597c:	b510      	push	{r4, lr}
   d597e:	4b04      	ldr	r3, [pc, #16]	; (d5990 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5980:	4604      	mov	r4, r0
   d5982:	f840 3b08 	str.w	r3, [r0], #8
   d5986:	f7ff ffdd 	bl	d5944 <_ZN5spark11MeshPublishD1Ev>
   d598a:	4620      	mov	r0, r4
   d598c:	bd10      	pop	{r4, pc}
   d598e:	bf00      	nop
   d5990:	000d6ca8 	.word	0x000d6ca8

000d5994 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5994:	b538      	push	{r3, r4, r5, lr}
   d5996:	4c0e      	ldr	r4, [pc, #56]	; (d59d0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5998:	4b0e      	ldr	r3, [pc, #56]	; (d59d4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d599a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d599c:	2500      	movs	r5, #0
   d599e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d59a0:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d59a4:	6063      	str	r3, [r4, #4]
   d59a6:	60a5      	str	r5, [r4, #8]
   d59a8:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d59ac:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d59b0:	f7fe feee 	bl	d4790 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d59b4:	4b08      	ldr	r3, [pc, #32]	; (d59d8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d59b6:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d59ba:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d59be:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d59c0:	4620      	mov	r0, r4
   d59c2:	4a06      	ldr	r2, [pc, #24]	; (d59dc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d59c4:	4906      	ldr	r1, [pc, #24]	; (d59e0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d59c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d59ca:	f000 b903 	b.w	d5bd4 <__aeabi_atexit>
   d59ce:	bf00      	nop
   d59d0:	2003e54c 	.word	0x2003e54c
   d59d4:	000d6cdc 	.word	0x000d6cdc
   d59d8:	000d6ca8 	.word	0x000d6ca8
   d59dc:	2003e374 	.word	0x2003e374
   d59e0:	000d597d 	.word	0x000d597d

000d59e4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d59e4:	2300      	movs	r3, #0
   d59e6:	461a      	mov	r2, r3
   d59e8:	6840      	ldr	r0, [r0, #4]
   d59ea:	f7fe bfed 	b.w	d49c8 <network_connect>

000d59ee <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d59ee:	2200      	movs	r2, #0
   d59f0:	2102      	movs	r1, #2
   d59f2:	6840      	ldr	r0, [r0, #4]
   d59f4:	f7fe bff8 	b.w	d49e8 <network_disconnect>

000d59f8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d59f8:	2200      	movs	r2, #0
   d59fa:	4611      	mov	r1, r2
   d59fc:	6840      	ldr	r0, [r0, #4]
   d59fe:	f7fe bfeb 	b.w	d49d8 <network_connecting>

000d5a02 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5a02:	2200      	movs	r2, #0
   d5a04:	4611      	mov	r1, r2
   d5a06:	6840      	ldr	r0, [r0, #4]
   d5a08:	f7fe bff6 	b.w	d49f8 <network_ready>

000d5a0c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5a0c:	2300      	movs	r3, #0
   d5a0e:	461a      	mov	r2, r3
   d5a10:	4619      	mov	r1, r3
   d5a12:	6840      	ldr	r0, [r0, #4]
   d5a14:	f7fe bff8 	b.w	d4a08 <network_on>

000d5a18 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5a18:	2300      	movs	r3, #0
   d5a1a:	461a      	mov	r2, r3
   d5a1c:	4619      	mov	r1, r3
   d5a1e:	6840      	ldr	r0, [r0, #4]
   d5a20:	f7fe bffa 	b.w	d4a18 <network_off>

000d5a24 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5a24:	2200      	movs	r2, #0
   d5a26:	f081 0101 	eor.w	r1, r1, #1
   d5a2a:	6840      	ldr	r0, [r0, #4]
   d5a2c:	f7fe bffc 	b.w	d4a28 <network_listen>

000d5a30 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5a30:	2200      	movs	r2, #0
   d5a32:	6840      	ldr	r0, [r0, #4]
   d5a34:	f7ff b808 	b.w	d4a48 <network_set_listen_timeout>

000d5a38 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5a38:	2200      	movs	r2, #0
   d5a3a:	4611      	mov	r1, r2
   d5a3c:	6840      	ldr	r0, [r0, #4]
   d5a3e:	f7ff b80b 	b.w	d4a58 <network_get_listen_timeout>

000d5a42 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5a42:	2200      	movs	r2, #0
   d5a44:	4611      	mov	r1, r2
   d5a46:	6840      	ldr	r0, [r0, #4]
   d5a48:	f7fe bff6 	b.w	d4a38 <network_listening>

000d5a4c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5a4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5a50:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5a52:	b095      	sub	sp, #84	; 0x54
   d5a54:	4616      	mov	r6, r2
   d5a56:	460d      	mov	r5, r1
   d5a58:	4607      	mov	r7, r0
    IPAddress addr;
   d5a5a:	f7ff fcb9 	bl	d53d0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5a5e:	4621      	mov	r1, r4
   d5a60:	2220      	movs	r2, #32
   d5a62:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5a64:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5a66:	f000 ff38 	bl	d68da <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5a6a:	2340      	movs	r3, #64	; 0x40
   d5a6c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5a6e:	4621      	mov	r1, r4
   d5a70:	466b      	mov	r3, sp
   d5a72:	aa0c      	add	r2, sp, #48	; 0x30
   d5a74:	4630      	mov	r0, r6
   d5a76:	f7fe fe2b 	bl	d46d0 <netdb_getaddrinfo>
    if (!r) {
   d5a7a:	4604      	mov	r4, r0
   d5a7c:	2800      	cmp	r0, #0
   d5a7e:	d144      	bne.n	d5b0a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5a80:	4602      	mov	r2, r0
   d5a82:	2101      	movs	r1, #1
   d5a84:	6868      	ldr	r0, [r5, #4]
   d5a86:	f7fe ffb7 	bl	d49f8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5a8a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5a8c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5a8e:	4622      	mov	r2, r4
   d5a90:	6868      	ldr	r0, [r5, #4]
   d5a92:	f7fe ffb1 	bl	d49f8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5a96:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5a98:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5a9a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5a9c:	2e00      	cmp	r6, #0
   d5a9e:	d034      	beq.n	d5b0a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5aa0:	2900      	cmp	r1, #0
   d5aa2:	d132      	bne.n	d5b0a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5aa4:	6873      	ldr	r3, [r6, #4]
   d5aa6:	2b02      	cmp	r3, #2
   d5aa8:	d002      	beq.n	d5ab0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5aaa:	2b0a      	cmp	r3, #10
   d5aac:	d009      	beq.n	d5ac2 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5aae:	e02a      	b.n	d5b06 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5ab0:	f1b8 0f00 	cmp.w	r8, #0
   d5ab4:	d027      	beq.n	d5b06 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5ab6:	6971      	ldr	r1, [r6, #20]
   d5ab8:	4638      	mov	r0, r7
   d5aba:	3104      	adds	r1, #4
   d5abc:	f7ff fcb5 	bl	d542a <_ZN9IPAddressaSEPKh>
   d5ac0:	e020      	b.n	d5b04 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5ac2:	f1b9 0f00 	cmp.w	r9, #0
   d5ac6:	d01e      	beq.n	d5b06 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5ac8:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5aca:	2211      	movs	r2, #17
   d5acc:	a801      	add	r0, sp, #4
   d5ace:	f000 ff04 	bl	d68da <memset>
                    a.v = 6;
   d5ad2:	2306      	movs	r3, #6
   d5ad4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5ad8:	ad01      	add	r5, sp, #4
   d5ada:	f104 0308 	add.w	r3, r4, #8
   d5ade:	3418      	adds	r4, #24
   d5ae0:	6818      	ldr	r0, [r3, #0]
   d5ae2:	6859      	ldr	r1, [r3, #4]
   d5ae4:	462a      	mov	r2, r5
   d5ae6:	c203      	stmia	r2!, {r0, r1}
   d5ae8:	3308      	adds	r3, #8
   d5aea:	42a3      	cmp	r3, r4
   d5aec:	4615      	mov	r5, r2
   d5aee:	d1f7      	bne.n	d5ae0 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5af0:	a901      	add	r1, sp, #4
   d5af2:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5af4:	ad07      	add	r5, sp, #28
   d5af6:	f7ff fc79 	bl	d53ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5afa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5afc:	1d3c      	adds	r4, r7, #4
   d5afe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5b00:	682b      	ldr	r3, [r5, #0]
   d5b02:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5b04:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5b06:	69f6      	ldr	r6, [r6, #28]
   d5b08:	e7c8      	b.n	d5a9c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5b0a:	9800      	ldr	r0, [sp, #0]
   d5b0c:	f7fe fdd8 	bl	d46c0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5b10:	4638      	mov	r0, r7
   d5b12:	b015      	add	sp, #84	; 0x54
   d5b14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5b18 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5b18:	4b02      	ldr	r3, [pc, #8]	; (d5b24 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5b1a:	4a03      	ldr	r2, [pc, #12]	; (d5b28 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5b1c:	601a      	str	r2, [r3, #0]
   d5b1e:	2200      	movs	r2, #0
   d5b20:	605a      	str	r2, [r3, #4]
   d5b22:	4770      	bx	lr
   d5b24:	2003e720 	.word	0x2003e720
   d5b28:	000d6cdc 	.word	0x000d6cdc

000d5b2c <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d5b2c:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d5b2e:	4c07      	ldr	r4, [pc, #28]	; (d5b4c <_Z21__fetch_global_EEPROMv+0x20>)
   d5b30:	6823      	ldr	r3, [r4, #0]
   d5b32:	07db      	lsls	r3, r3, #31
   d5b34:	d408      	bmi.n	d5b48 <_Z21__fetch_global_EEPROMv+0x1c>
   d5b36:	4620      	mov	r0, r4
   d5b38:	f7fe fab1 	bl	d409e <__cxa_guard_acquire>
   d5b3c:	b120      	cbz	r0, d5b48 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d5b3e:	f7fe fdef 	bl	d4720 <HAL_EEPROM_Init>
   d5b42:	4620      	mov	r0, r4
   d5b44:	f7fe fab0 	bl	d40a8 <__cxa_guard_release>
	return eeprom;
}
   d5b48:	4801      	ldr	r0, [pc, #4]	; (d5b50 <_Z21__fetch_global_EEPROMv+0x24>)
   d5b4a:	bd10      	pop	{r4, pc}
   d5b4c:	2003e72c 	.word	0x2003e72c
   d5b50:	2003e730 	.word	0x2003e730

000d5b54 <_Z18acquireWire1Bufferv>:
	return defaultWireConfig();
}

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
   d5b54:	b570      	push	{r4, r5, r6, lr}
   d5b56:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d5b58:	2514      	movs	r5, #20
   d5b5a:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5b5c:	4e09      	ldr	r6, [pc, #36]	; (d5b84 <_Z18acquireWire1Bufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d5b5e:	2100      	movs	r1, #0
   d5b60:	f000 febb 	bl	d68da <memset>
   d5b64:	8025      	strh	r5, [r4, #0]
   d5b66:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5b68:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d5b6a:	60a5      	str	r5, [r4, #8]
   d5b6c:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5b6e:	4628      	mov	r0, r5
   d5b70:	f000 f840 	bl	d5bf4 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5b74:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d5b76:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5b78:	4628      	mov	r0, r5
   d5b7a:	f000 f83b 	bl	d5bf4 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d5b7e:	60e0      	str	r0, [r4, #12]

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
	return defaultWireConfig();
}
   d5b80:	4620      	mov	r0, r4
   d5b82:	bd70      	pop	{r4, r5, r6, pc}
   d5b84:	000d6d08 	.word	0x000d6d08

000d5b88 <_Z20__fetch_global_Wire1v>:
	return wire;
}

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d5b88:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d5b8a:	4c0e      	ldr	r4, [pc, #56]	; (d5bc4 <_Z20__fetch_global_Wire1v+0x3c>)
   d5b8c:	6823      	ldr	r3, [r4, #0]
   d5b8e:	07db      	lsls	r3, r3, #31
	return wire;
}

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d5b90:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d5b92:	d413      	bmi.n	d5bbc <_Z20__fetch_global_Wire1v+0x34>
   d5b94:	4620      	mov	r0, r4
   d5b96:	f7fe fa82 	bl	d409e <__cxa_guard_acquire>
   d5b9a:	b178      	cbz	r0, d5bbc <_Z20__fetch_global_Wire1v+0x34>
   d5b9c:	a801      	add	r0, sp, #4
   d5b9e:	f7ff ffd9 	bl	d5b54 <_Z18acquireWire1Bufferv>
   d5ba2:	aa01      	add	r2, sp, #4
   d5ba4:	2101      	movs	r1, #1
   d5ba6:	4808      	ldr	r0, [pc, #32]	; (d5bc8 <_Z20__fetch_global_Wire1v+0x40>)
   d5ba8:	f7ff fe02 	bl	d57b0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d5bac:	4620      	mov	r0, r4
   d5bae:	f7fe fa7b 	bl	d40a8 <__cxa_guard_release>
   d5bb2:	4a06      	ldr	r2, [pc, #24]	; (d5bcc <_Z20__fetch_global_Wire1v+0x44>)
   d5bb4:	4906      	ldr	r1, [pc, #24]	; (d5bd0 <_Z20__fetch_global_Wire1v+0x48>)
   d5bb6:	4804      	ldr	r0, [pc, #16]	; (d5bc8 <_Z20__fetch_global_Wire1v+0x40>)
   d5bb8:	f000 f80c 	bl	d5bd4 <__aeabi_atexit>
	return wire;
}
   d5bbc:	4802      	ldr	r0, [pc, #8]	; (d5bc8 <_Z20__fetch_global_Wire1v+0x40>)
   d5bbe:	b006      	add	sp, #24
   d5bc0:	bd10      	pop	{r4, pc}
   d5bc2:	bf00      	nop
   d5bc4:	2003e748 	.word	0x2003e748
   d5bc8:	2003e734 	.word	0x2003e734
   d5bcc:	2003e374 	.word	0x2003e374
   d5bd0:	000d5759 	.word	0x000d5759

000d5bd4 <__aeabi_atexit>:
   d5bd4:	460b      	mov	r3, r1
   d5bd6:	4601      	mov	r1, r0
   d5bd8:	4618      	mov	r0, r3
   d5bda:	f000 be65 	b.w	d68a8 <__cxa_atexit>
	...

000d5be0 <_ZSt15get_new_handlerv>:
   d5be0:	4b02      	ldr	r3, [pc, #8]	; (d5bec <_ZSt15get_new_handlerv+0xc>)
   d5be2:	6818      	ldr	r0, [r3, #0]
   d5be4:	f3bf 8f5f 	dmb	sy
   d5be8:	4770      	bx	lr
   d5bea:	bf00      	nop
   d5bec:	2003e74c 	.word	0x2003e74c

000d5bf0 <_ZdlPvj>:
   d5bf0:	f7fe ba51 	b.w	d4096 <_ZdlPv>

000d5bf4 <_ZnajRKSt9nothrow_t>:
   d5bf4:	f000 b800 	b.w	d5bf8 <_ZnwjRKSt9nothrow_t>

000d5bf8 <_ZnwjRKSt9nothrow_t>:
   d5bf8:	b510      	push	{r4, lr}
   d5bfa:	2800      	cmp	r0, #0
   d5bfc:	bf14      	ite	ne
   d5bfe:	4604      	movne	r4, r0
   d5c00:	2401      	moveq	r4, #1
   d5c02:	4620      	mov	r0, r4
   d5c04:	f7fe ff58 	bl	d4ab8 <malloc>
   d5c08:	b920      	cbnz	r0, d5c14 <_ZnwjRKSt9nothrow_t+0x1c>
   d5c0a:	f7ff ffe9 	bl	d5be0 <_ZSt15get_new_handlerv>
   d5c0e:	b108      	cbz	r0, d5c14 <_ZnwjRKSt9nothrow_t+0x1c>
   d5c10:	4780      	blx	r0
   d5c12:	e7f6      	b.n	d5c02 <_ZnwjRKSt9nothrow_t+0xa>
   d5c14:	bd10      	pop	{r4, pc}
	...

000d5c18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5c18:	4b18      	ldr	r3, [pc, #96]	; (d5c7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5c1a:	681a      	ldr	r2, [r3, #0]
   d5c1c:	07d1      	lsls	r1, r2, #31
   d5c1e:	bf5c      	itt	pl
   d5c20:	2201      	movpl	r2, #1
   d5c22:	601a      	strpl	r2, [r3, #0]
   d5c24:	4b16      	ldr	r3, [pc, #88]	; (d5c80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5c26:	681a      	ldr	r2, [r3, #0]
   d5c28:	07d2      	lsls	r2, r2, #31
   d5c2a:	bf5c      	itt	pl
   d5c2c:	2201      	movpl	r2, #1
   d5c2e:	601a      	strpl	r2, [r3, #0]
   d5c30:	4b14      	ldr	r3, [pc, #80]	; (d5c84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5c32:	681a      	ldr	r2, [r3, #0]
   d5c34:	07d0      	lsls	r0, r2, #31
   d5c36:	bf5c      	itt	pl
   d5c38:	2201      	movpl	r2, #1
   d5c3a:	601a      	strpl	r2, [r3, #0]
   d5c3c:	4b12      	ldr	r3, [pc, #72]	; (d5c88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5c3e:	681a      	ldr	r2, [r3, #0]
   d5c40:	07d1      	lsls	r1, r2, #31
   d5c42:	bf5c      	itt	pl
   d5c44:	2201      	movpl	r2, #1
   d5c46:	601a      	strpl	r2, [r3, #0]
   d5c48:	4b10      	ldr	r3, [pc, #64]	; (d5c8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5c4a:	681a      	ldr	r2, [r3, #0]
   d5c4c:	07d2      	lsls	r2, r2, #31
   d5c4e:	bf5c      	itt	pl
   d5c50:	2201      	movpl	r2, #1
   d5c52:	601a      	strpl	r2, [r3, #0]
   d5c54:	4b0e      	ldr	r3, [pc, #56]	; (d5c90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5c56:	681a      	ldr	r2, [r3, #0]
   d5c58:	07d0      	lsls	r0, r2, #31
   d5c5a:	bf5c      	itt	pl
   d5c5c:	2201      	movpl	r2, #1
   d5c5e:	601a      	strpl	r2, [r3, #0]
   d5c60:	4b0c      	ldr	r3, [pc, #48]	; (d5c94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5c62:	681a      	ldr	r2, [r3, #0]
   d5c64:	07d1      	lsls	r1, r2, #31
   d5c66:	bf5c      	itt	pl
   d5c68:	2201      	movpl	r2, #1
   d5c6a:	601a      	strpl	r2, [r3, #0]
   d5c6c:	4b0a      	ldr	r3, [pc, #40]	; (d5c98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5c6e:	681a      	ldr	r2, [r3, #0]
   d5c70:	07d2      	lsls	r2, r2, #31
   d5c72:	bf5c      	itt	pl
   d5c74:	2201      	movpl	r2, #1
   d5c76:	601a      	strpl	r2, [r3, #0]
   d5c78:	4770      	bx	lr
   d5c7a:	bf00      	nop
   d5c7c:	2003e76c 	.word	0x2003e76c
   d5c80:	2003e768 	.word	0x2003e768
   d5c84:	2003e764 	.word	0x2003e764
   d5c88:	2003e760 	.word	0x2003e760
   d5c8c:	2003e75c 	.word	0x2003e75c
   d5c90:	2003e758 	.word	0x2003e758
   d5c94:	2003e754 	.word	0x2003e754
   d5c98:	2003e750 	.word	0x2003e750

000d5c9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5c9c:	4b24      	ldr	r3, [pc, #144]	; (d5d30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5c9e:	681a      	ldr	r2, [r3, #0]
   d5ca0:	07d0      	lsls	r0, r2, #31
   d5ca2:	bf5c      	itt	pl
   d5ca4:	2201      	movpl	r2, #1
   d5ca6:	601a      	strpl	r2, [r3, #0]
   d5ca8:	4b22      	ldr	r3, [pc, #136]	; (d5d34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5caa:	681a      	ldr	r2, [r3, #0]
   d5cac:	07d1      	lsls	r1, r2, #31
   d5cae:	bf5c      	itt	pl
   d5cb0:	2201      	movpl	r2, #1
   d5cb2:	601a      	strpl	r2, [r3, #0]
   d5cb4:	4b20      	ldr	r3, [pc, #128]	; (d5d38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5cb6:	681a      	ldr	r2, [r3, #0]
   d5cb8:	07d2      	lsls	r2, r2, #31
   d5cba:	bf5c      	itt	pl
   d5cbc:	2201      	movpl	r2, #1
   d5cbe:	601a      	strpl	r2, [r3, #0]
   d5cc0:	4b1e      	ldr	r3, [pc, #120]	; (d5d3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5cc2:	681a      	ldr	r2, [r3, #0]
   d5cc4:	07d0      	lsls	r0, r2, #31
   d5cc6:	bf5c      	itt	pl
   d5cc8:	2201      	movpl	r2, #1
   d5cca:	601a      	strpl	r2, [r3, #0]
   d5ccc:	4b1c      	ldr	r3, [pc, #112]	; (d5d40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5cce:	681a      	ldr	r2, [r3, #0]
   d5cd0:	07d1      	lsls	r1, r2, #31
   d5cd2:	bf5c      	itt	pl
   d5cd4:	2201      	movpl	r2, #1
   d5cd6:	601a      	strpl	r2, [r3, #0]
   d5cd8:	4b1a      	ldr	r3, [pc, #104]	; (d5d44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5cda:	681a      	ldr	r2, [r3, #0]
   d5cdc:	07d2      	lsls	r2, r2, #31
   d5cde:	bf5c      	itt	pl
   d5ce0:	2201      	movpl	r2, #1
   d5ce2:	601a      	strpl	r2, [r3, #0]
   d5ce4:	4b18      	ldr	r3, [pc, #96]	; (d5d48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5ce6:	681a      	ldr	r2, [r3, #0]
   d5ce8:	07d0      	lsls	r0, r2, #31
   d5cea:	bf5c      	itt	pl
   d5cec:	2201      	movpl	r2, #1
   d5cee:	601a      	strpl	r2, [r3, #0]
   d5cf0:	4b16      	ldr	r3, [pc, #88]	; (d5d4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5cf2:	681a      	ldr	r2, [r3, #0]
   d5cf4:	07d1      	lsls	r1, r2, #31
   d5cf6:	bf5c      	itt	pl
   d5cf8:	2201      	movpl	r2, #1
   d5cfa:	601a      	strpl	r2, [r3, #0]
   d5cfc:	4b14      	ldr	r3, [pc, #80]	; (d5d50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5cfe:	681a      	ldr	r2, [r3, #0]
   d5d00:	07d2      	lsls	r2, r2, #31
   d5d02:	bf5c      	itt	pl
   d5d04:	2201      	movpl	r2, #1
   d5d06:	601a      	strpl	r2, [r3, #0]
   d5d08:	4b12      	ldr	r3, [pc, #72]	; (d5d54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5d0a:	681a      	ldr	r2, [r3, #0]
   d5d0c:	07d0      	lsls	r0, r2, #31
   d5d0e:	bf5c      	itt	pl
   d5d10:	2201      	movpl	r2, #1
   d5d12:	601a      	strpl	r2, [r3, #0]
   d5d14:	4b10      	ldr	r3, [pc, #64]	; (d5d58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5d16:	681a      	ldr	r2, [r3, #0]
   d5d18:	07d1      	lsls	r1, r2, #31
   d5d1a:	bf5c      	itt	pl
   d5d1c:	2201      	movpl	r2, #1
   d5d1e:	601a      	strpl	r2, [r3, #0]
   d5d20:	4b0e      	ldr	r3, [pc, #56]	; (d5d5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5d22:	681a      	ldr	r2, [r3, #0]
   d5d24:	07d2      	lsls	r2, r2, #31
   d5d26:	bf5c      	itt	pl
   d5d28:	2201      	movpl	r2, #1
   d5d2a:	601a      	strpl	r2, [r3, #0]
   d5d2c:	4770      	bx	lr
   d5d2e:	bf00      	nop
   d5d30:	2003e79c 	.word	0x2003e79c
   d5d34:	2003e798 	.word	0x2003e798
   d5d38:	2003e794 	.word	0x2003e794
   d5d3c:	2003e790 	.word	0x2003e790
   d5d40:	2003e78c 	.word	0x2003e78c
   d5d44:	2003e788 	.word	0x2003e788
   d5d48:	2003e784 	.word	0x2003e784
   d5d4c:	2003e780 	.word	0x2003e780
   d5d50:	2003e77c 	.word	0x2003e77c
   d5d54:	2003e778 	.word	0x2003e778
   d5d58:	2003e774 	.word	0x2003e774
   d5d5c:	2003e770 	.word	0x2003e770

000d5d60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5d60:	4b24      	ldr	r3, [pc, #144]	; (d5df4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5d62:	681a      	ldr	r2, [r3, #0]
   d5d64:	07d0      	lsls	r0, r2, #31
   d5d66:	bf5c      	itt	pl
   d5d68:	2201      	movpl	r2, #1
   d5d6a:	601a      	strpl	r2, [r3, #0]
   d5d6c:	4b22      	ldr	r3, [pc, #136]	; (d5df8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5d6e:	681a      	ldr	r2, [r3, #0]
   d5d70:	07d1      	lsls	r1, r2, #31
   d5d72:	bf5c      	itt	pl
   d5d74:	2201      	movpl	r2, #1
   d5d76:	601a      	strpl	r2, [r3, #0]
   d5d78:	4b20      	ldr	r3, [pc, #128]	; (d5dfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5d7a:	681a      	ldr	r2, [r3, #0]
   d5d7c:	07d2      	lsls	r2, r2, #31
   d5d7e:	bf5c      	itt	pl
   d5d80:	2201      	movpl	r2, #1
   d5d82:	601a      	strpl	r2, [r3, #0]
   d5d84:	4b1e      	ldr	r3, [pc, #120]	; (d5e00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5d86:	681a      	ldr	r2, [r3, #0]
   d5d88:	07d0      	lsls	r0, r2, #31
   d5d8a:	bf5c      	itt	pl
   d5d8c:	2201      	movpl	r2, #1
   d5d8e:	601a      	strpl	r2, [r3, #0]
   d5d90:	4b1c      	ldr	r3, [pc, #112]	; (d5e04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5d92:	681a      	ldr	r2, [r3, #0]
   d5d94:	07d1      	lsls	r1, r2, #31
   d5d96:	bf5c      	itt	pl
   d5d98:	2201      	movpl	r2, #1
   d5d9a:	601a      	strpl	r2, [r3, #0]
   d5d9c:	4b1a      	ldr	r3, [pc, #104]	; (d5e08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5d9e:	681a      	ldr	r2, [r3, #0]
   d5da0:	07d2      	lsls	r2, r2, #31
   d5da2:	bf5c      	itt	pl
   d5da4:	2201      	movpl	r2, #1
   d5da6:	601a      	strpl	r2, [r3, #0]
   d5da8:	4b18      	ldr	r3, [pc, #96]	; (d5e0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5daa:	681a      	ldr	r2, [r3, #0]
   d5dac:	07d0      	lsls	r0, r2, #31
   d5dae:	bf5c      	itt	pl
   d5db0:	2201      	movpl	r2, #1
   d5db2:	601a      	strpl	r2, [r3, #0]
   d5db4:	4b16      	ldr	r3, [pc, #88]	; (d5e10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5db6:	681a      	ldr	r2, [r3, #0]
   d5db8:	07d1      	lsls	r1, r2, #31
   d5dba:	bf5c      	itt	pl
   d5dbc:	2201      	movpl	r2, #1
   d5dbe:	601a      	strpl	r2, [r3, #0]
   d5dc0:	4b14      	ldr	r3, [pc, #80]	; (d5e14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5dc2:	681a      	ldr	r2, [r3, #0]
   d5dc4:	07d2      	lsls	r2, r2, #31
   d5dc6:	bf5c      	itt	pl
   d5dc8:	2201      	movpl	r2, #1
   d5dca:	601a      	strpl	r2, [r3, #0]
   d5dcc:	4b12      	ldr	r3, [pc, #72]	; (d5e18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5dce:	681a      	ldr	r2, [r3, #0]
   d5dd0:	07d0      	lsls	r0, r2, #31
   d5dd2:	bf5c      	itt	pl
   d5dd4:	2201      	movpl	r2, #1
   d5dd6:	601a      	strpl	r2, [r3, #0]
   d5dd8:	4b10      	ldr	r3, [pc, #64]	; (d5e1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5dda:	681a      	ldr	r2, [r3, #0]
   d5ddc:	07d1      	lsls	r1, r2, #31
   d5dde:	bf5c      	itt	pl
   d5de0:	2201      	movpl	r2, #1
   d5de2:	601a      	strpl	r2, [r3, #0]
   d5de4:	4b0e      	ldr	r3, [pc, #56]	; (d5e20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5de6:	681a      	ldr	r2, [r3, #0]
   d5de8:	07d2      	lsls	r2, r2, #31
   d5dea:	bf5c      	itt	pl
   d5dec:	2201      	movpl	r2, #1
   d5dee:	601a      	strpl	r2, [r3, #0]
   d5df0:	4770      	bx	lr
   d5df2:	bf00      	nop
   d5df4:	2003e7cc 	.word	0x2003e7cc
   d5df8:	2003e7c8 	.word	0x2003e7c8
   d5dfc:	2003e7c4 	.word	0x2003e7c4
   d5e00:	2003e7c0 	.word	0x2003e7c0
   d5e04:	2003e7bc 	.word	0x2003e7bc
   d5e08:	2003e7b8 	.word	0x2003e7b8
   d5e0c:	2003e7b4 	.word	0x2003e7b4
   d5e10:	2003e7b0 	.word	0x2003e7b0
   d5e14:	2003e7ac 	.word	0x2003e7ac
   d5e18:	2003e7a8 	.word	0x2003e7a8
   d5e1c:	2003e7a4 	.word	0x2003e7a4
   d5e20:	2003e7a0 	.word	0x2003e7a0

000d5e24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5e24:	4b18      	ldr	r3, [pc, #96]	; (d5e88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5e26:	681a      	ldr	r2, [r3, #0]
   d5e28:	07d1      	lsls	r1, r2, #31
   d5e2a:	bf5c      	itt	pl
   d5e2c:	2201      	movpl	r2, #1
   d5e2e:	601a      	strpl	r2, [r3, #0]
   d5e30:	4b16      	ldr	r3, [pc, #88]	; (d5e8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5e32:	681a      	ldr	r2, [r3, #0]
   d5e34:	07d2      	lsls	r2, r2, #31
   d5e36:	bf5c      	itt	pl
   d5e38:	2201      	movpl	r2, #1
   d5e3a:	601a      	strpl	r2, [r3, #0]
   d5e3c:	4b14      	ldr	r3, [pc, #80]	; (d5e90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5e3e:	681a      	ldr	r2, [r3, #0]
   d5e40:	07d0      	lsls	r0, r2, #31
   d5e42:	bf5c      	itt	pl
   d5e44:	2201      	movpl	r2, #1
   d5e46:	601a      	strpl	r2, [r3, #0]
   d5e48:	4b12      	ldr	r3, [pc, #72]	; (d5e94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5e4a:	681a      	ldr	r2, [r3, #0]
   d5e4c:	07d1      	lsls	r1, r2, #31
   d5e4e:	bf5c      	itt	pl
   d5e50:	2201      	movpl	r2, #1
   d5e52:	601a      	strpl	r2, [r3, #0]
   d5e54:	4b10      	ldr	r3, [pc, #64]	; (d5e98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5e56:	681a      	ldr	r2, [r3, #0]
   d5e58:	07d2      	lsls	r2, r2, #31
   d5e5a:	bf5c      	itt	pl
   d5e5c:	2201      	movpl	r2, #1
   d5e5e:	601a      	strpl	r2, [r3, #0]
   d5e60:	4b0e      	ldr	r3, [pc, #56]	; (d5e9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5e62:	681a      	ldr	r2, [r3, #0]
   d5e64:	07d0      	lsls	r0, r2, #31
   d5e66:	bf5c      	itt	pl
   d5e68:	2201      	movpl	r2, #1
   d5e6a:	601a      	strpl	r2, [r3, #0]
   d5e6c:	4b0c      	ldr	r3, [pc, #48]	; (d5ea0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5e6e:	681a      	ldr	r2, [r3, #0]
   d5e70:	07d1      	lsls	r1, r2, #31
   d5e72:	bf5c      	itt	pl
   d5e74:	2201      	movpl	r2, #1
   d5e76:	601a      	strpl	r2, [r3, #0]
   d5e78:	4b0a      	ldr	r3, [pc, #40]	; (d5ea4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5e7a:	681a      	ldr	r2, [r3, #0]
   d5e7c:	07d2      	lsls	r2, r2, #31
   d5e7e:	bf5c      	itt	pl
   d5e80:	2201      	movpl	r2, #1
   d5e82:	601a      	strpl	r2, [r3, #0]
   d5e84:	4770      	bx	lr
   d5e86:	bf00      	nop
   d5e88:	2003e7ec 	.word	0x2003e7ec
   d5e8c:	2003e7e8 	.word	0x2003e7e8
   d5e90:	2003e7e4 	.word	0x2003e7e4
   d5e94:	2003e7e0 	.word	0x2003e7e0
   d5e98:	2003e7dc 	.word	0x2003e7dc
   d5e9c:	2003e7d8 	.word	0x2003e7d8
   d5ea0:	2003e7d4 	.word	0x2003e7d4
   d5ea4:	2003e7d0 	.word	0x2003e7d0

000d5ea8 <__aeabi_drsub>:
   d5ea8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5eac:	e002      	b.n	d5eb4 <__adddf3>
   d5eae:	bf00      	nop

000d5eb0 <__aeabi_dsub>:
   d5eb0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5eb4 <__adddf3>:
   d5eb4:	b530      	push	{r4, r5, lr}
   d5eb6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5eba:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5ebe:	ea94 0f05 	teq	r4, r5
   d5ec2:	bf08      	it	eq
   d5ec4:	ea90 0f02 	teqeq	r0, r2
   d5ec8:	bf1f      	itttt	ne
   d5eca:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5ece:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5ed2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5ed6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5eda:	f000 80e2 	beq.w	d60a2 <__adddf3+0x1ee>
   d5ede:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5ee2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5ee6:	bfb8      	it	lt
   d5ee8:	426d      	neglt	r5, r5
   d5eea:	dd0c      	ble.n	d5f06 <__adddf3+0x52>
   d5eec:	442c      	add	r4, r5
   d5eee:	ea80 0202 	eor.w	r2, r0, r2
   d5ef2:	ea81 0303 	eor.w	r3, r1, r3
   d5ef6:	ea82 0000 	eor.w	r0, r2, r0
   d5efa:	ea83 0101 	eor.w	r1, r3, r1
   d5efe:	ea80 0202 	eor.w	r2, r0, r2
   d5f02:	ea81 0303 	eor.w	r3, r1, r3
   d5f06:	2d36      	cmp	r5, #54	; 0x36
   d5f08:	bf88      	it	hi
   d5f0a:	bd30      	pophi	{r4, r5, pc}
   d5f0c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5f10:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5f14:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5f18:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5f1c:	d002      	beq.n	d5f24 <__adddf3+0x70>
   d5f1e:	4240      	negs	r0, r0
   d5f20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5f24:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5f28:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5f2c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5f30:	d002      	beq.n	d5f38 <__adddf3+0x84>
   d5f32:	4252      	negs	r2, r2
   d5f34:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5f38:	ea94 0f05 	teq	r4, r5
   d5f3c:	f000 80a7 	beq.w	d608e <__adddf3+0x1da>
   d5f40:	f1a4 0401 	sub.w	r4, r4, #1
   d5f44:	f1d5 0e20 	rsbs	lr, r5, #32
   d5f48:	db0d      	blt.n	d5f66 <__adddf3+0xb2>
   d5f4a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5f4e:	fa22 f205 	lsr.w	r2, r2, r5
   d5f52:	1880      	adds	r0, r0, r2
   d5f54:	f141 0100 	adc.w	r1, r1, #0
   d5f58:	fa03 f20e 	lsl.w	r2, r3, lr
   d5f5c:	1880      	adds	r0, r0, r2
   d5f5e:	fa43 f305 	asr.w	r3, r3, r5
   d5f62:	4159      	adcs	r1, r3
   d5f64:	e00e      	b.n	d5f84 <__adddf3+0xd0>
   d5f66:	f1a5 0520 	sub.w	r5, r5, #32
   d5f6a:	f10e 0e20 	add.w	lr, lr, #32
   d5f6e:	2a01      	cmp	r2, #1
   d5f70:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5f74:	bf28      	it	cs
   d5f76:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5f7a:	fa43 f305 	asr.w	r3, r3, r5
   d5f7e:	18c0      	adds	r0, r0, r3
   d5f80:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5f84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5f88:	d507      	bpl.n	d5f9a <__adddf3+0xe6>
   d5f8a:	f04f 0e00 	mov.w	lr, #0
   d5f8e:	f1dc 0c00 	rsbs	ip, ip, #0
   d5f92:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5f96:	eb6e 0101 	sbc.w	r1, lr, r1
   d5f9a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5f9e:	d31b      	bcc.n	d5fd8 <__adddf3+0x124>
   d5fa0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5fa4:	d30c      	bcc.n	d5fc0 <__adddf3+0x10c>
   d5fa6:	0849      	lsrs	r1, r1, #1
   d5fa8:	ea5f 0030 	movs.w	r0, r0, rrx
   d5fac:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5fb0:	f104 0401 	add.w	r4, r4, #1
   d5fb4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5fb8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5fbc:	f080 809a 	bcs.w	d60f4 <__adddf3+0x240>
   d5fc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5fc4:	bf08      	it	eq
   d5fc6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5fca:	f150 0000 	adcs.w	r0, r0, #0
   d5fce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5fd2:	ea41 0105 	orr.w	r1, r1, r5
   d5fd6:	bd30      	pop	{r4, r5, pc}
   d5fd8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5fdc:	4140      	adcs	r0, r0
   d5fde:	eb41 0101 	adc.w	r1, r1, r1
   d5fe2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5fe6:	f1a4 0401 	sub.w	r4, r4, #1
   d5fea:	d1e9      	bne.n	d5fc0 <__adddf3+0x10c>
   d5fec:	f091 0f00 	teq	r1, #0
   d5ff0:	bf04      	itt	eq
   d5ff2:	4601      	moveq	r1, r0
   d5ff4:	2000      	moveq	r0, #0
   d5ff6:	fab1 f381 	clz	r3, r1
   d5ffa:	bf08      	it	eq
   d5ffc:	3320      	addeq	r3, #32
   d5ffe:	f1a3 030b 	sub.w	r3, r3, #11
   d6002:	f1b3 0220 	subs.w	r2, r3, #32
   d6006:	da0c      	bge.n	d6022 <__adddf3+0x16e>
   d6008:	320c      	adds	r2, #12
   d600a:	dd08      	ble.n	d601e <__adddf3+0x16a>
   d600c:	f102 0c14 	add.w	ip, r2, #20
   d6010:	f1c2 020c 	rsb	r2, r2, #12
   d6014:	fa01 f00c 	lsl.w	r0, r1, ip
   d6018:	fa21 f102 	lsr.w	r1, r1, r2
   d601c:	e00c      	b.n	d6038 <__adddf3+0x184>
   d601e:	f102 0214 	add.w	r2, r2, #20
   d6022:	bfd8      	it	le
   d6024:	f1c2 0c20 	rsble	ip, r2, #32
   d6028:	fa01 f102 	lsl.w	r1, r1, r2
   d602c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6030:	bfdc      	itt	le
   d6032:	ea41 010c 	orrle.w	r1, r1, ip
   d6036:	4090      	lslle	r0, r2
   d6038:	1ae4      	subs	r4, r4, r3
   d603a:	bfa2      	ittt	ge
   d603c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6040:	4329      	orrge	r1, r5
   d6042:	bd30      	popge	{r4, r5, pc}
   d6044:	ea6f 0404 	mvn.w	r4, r4
   d6048:	3c1f      	subs	r4, #31
   d604a:	da1c      	bge.n	d6086 <__adddf3+0x1d2>
   d604c:	340c      	adds	r4, #12
   d604e:	dc0e      	bgt.n	d606e <__adddf3+0x1ba>
   d6050:	f104 0414 	add.w	r4, r4, #20
   d6054:	f1c4 0220 	rsb	r2, r4, #32
   d6058:	fa20 f004 	lsr.w	r0, r0, r4
   d605c:	fa01 f302 	lsl.w	r3, r1, r2
   d6060:	ea40 0003 	orr.w	r0, r0, r3
   d6064:	fa21 f304 	lsr.w	r3, r1, r4
   d6068:	ea45 0103 	orr.w	r1, r5, r3
   d606c:	bd30      	pop	{r4, r5, pc}
   d606e:	f1c4 040c 	rsb	r4, r4, #12
   d6072:	f1c4 0220 	rsb	r2, r4, #32
   d6076:	fa20 f002 	lsr.w	r0, r0, r2
   d607a:	fa01 f304 	lsl.w	r3, r1, r4
   d607e:	ea40 0003 	orr.w	r0, r0, r3
   d6082:	4629      	mov	r1, r5
   d6084:	bd30      	pop	{r4, r5, pc}
   d6086:	fa21 f004 	lsr.w	r0, r1, r4
   d608a:	4629      	mov	r1, r5
   d608c:	bd30      	pop	{r4, r5, pc}
   d608e:	f094 0f00 	teq	r4, #0
   d6092:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6096:	bf06      	itte	eq
   d6098:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d609c:	3401      	addeq	r4, #1
   d609e:	3d01      	subne	r5, #1
   d60a0:	e74e      	b.n	d5f40 <__adddf3+0x8c>
   d60a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d60a6:	bf18      	it	ne
   d60a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d60ac:	d029      	beq.n	d6102 <__adddf3+0x24e>
   d60ae:	ea94 0f05 	teq	r4, r5
   d60b2:	bf08      	it	eq
   d60b4:	ea90 0f02 	teqeq	r0, r2
   d60b8:	d005      	beq.n	d60c6 <__adddf3+0x212>
   d60ba:	ea54 0c00 	orrs.w	ip, r4, r0
   d60be:	bf04      	itt	eq
   d60c0:	4619      	moveq	r1, r3
   d60c2:	4610      	moveq	r0, r2
   d60c4:	bd30      	pop	{r4, r5, pc}
   d60c6:	ea91 0f03 	teq	r1, r3
   d60ca:	bf1e      	ittt	ne
   d60cc:	2100      	movne	r1, #0
   d60ce:	2000      	movne	r0, #0
   d60d0:	bd30      	popne	{r4, r5, pc}
   d60d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d60d6:	d105      	bne.n	d60e4 <__adddf3+0x230>
   d60d8:	0040      	lsls	r0, r0, #1
   d60da:	4149      	adcs	r1, r1
   d60dc:	bf28      	it	cs
   d60de:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d60e2:	bd30      	pop	{r4, r5, pc}
   d60e4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d60e8:	bf3c      	itt	cc
   d60ea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d60ee:	bd30      	popcc	{r4, r5, pc}
   d60f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d60f4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d60f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d60fc:	f04f 0000 	mov.w	r0, #0
   d6100:	bd30      	pop	{r4, r5, pc}
   d6102:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6106:	bf1a      	itte	ne
   d6108:	4619      	movne	r1, r3
   d610a:	4610      	movne	r0, r2
   d610c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6110:	bf1c      	itt	ne
   d6112:	460b      	movne	r3, r1
   d6114:	4602      	movne	r2, r0
   d6116:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d611a:	bf06      	itte	eq
   d611c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6120:	ea91 0f03 	teqeq	r1, r3
   d6124:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6128:	bd30      	pop	{r4, r5, pc}
   d612a:	bf00      	nop

000d612c <__aeabi_ui2d>:
   d612c:	f090 0f00 	teq	r0, #0
   d6130:	bf04      	itt	eq
   d6132:	2100      	moveq	r1, #0
   d6134:	4770      	bxeq	lr
   d6136:	b530      	push	{r4, r5, lr}
   d6138:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d613c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6140:	f04f 0500 	mov.w	r5, #0
   d6144:	f04f 0100 	mov.w	r1, #0
   d6148:	e750      	b.n	d5fec <__adddf3+0x138>
   d614a:	bf00      	nop

000d614c <__aeabi_i2d>:
   d614c:	f090 0f00 	teq	r0, #0
   d6150:	bf04      	itt	eq
   d6152:	2100      	moveq	r1, #0
   d6154:	4770      	bxeq	lr
   d6156:	b530      	push	{r4, r5, lr}
   d6158:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d615c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6160:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6164:	bf48      	it	mi
   d6166:	4240      	negmi	r0, r0
   d6168:	f04f 0100 	mov.w	r1, #0
   d616c:	e73e      	b.n	d5fec <__adddf3+0x138>
   d616e:	bf00      	nop

000d6170 <__aeabi_f2d>:
   d6170:	0042      	lsls	r2, r0, #1
   d6172:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6176:	ea4f 0131 	mov.w	r1, r1, rrx
   d617a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d617e:	bf1f      	itttt	ne
   d6180:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6184:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6188:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d618c:	4770      	bxne	lr
   d618e:	f092 0f00 	teq	r2, #0
   d6192:	bf14      	ite	ne
   d6194:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6198:	4770      	bxeq	lr
   d619a:	b530      	push	{r4, r5, lr}
   d619c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d61a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d61a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d61a8:	e720      	b.n	d5fec <__adddf3+0x138>
   d61aa:	bf00      	nop

000d61ac <__aeabi_ul2d>:
   d61ac:	ea50 0201 	orrs.w	r2, r0, r1
   d61b0:	bf08      	it	eq
   d61b2:	4770      	bxeq	lr
   d61b4:	b530      	push	{r4, r5, lr}
   d61b6:	f04f 0500 	mov.w	r5, #0
   d61ba:	e00a      	b.n	d61d2 <__aeabi_l2d+0x16>

000d61bc <__aeabi_l2d>:
   d61bc:	ea50 0201 	orrs.w	r2, r0, r1
   d61c0:	bf08      	it	eq
   d61c2:	4770      	bxeq	lr
   d61c4:	b530      	push	{r4, r5, lr}
   d61c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d61ca:	d502      	bpl.n	d61d2 <__aeabi_l2d+0x16>
   d61cc:	4240      	negs	r0, r0
   d61ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d61d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d61d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d61da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d61de:	f43f aedc 	beq.w	d5f9a <__adddf3+0xe6>
   d61e2:	f04f 0203 	mov.w	r2, #3
   d61e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d61ea:	bf18      	it	ne
   d61ec:	3203      	addne	r2, #3
   d61ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d61f2:	bf18      	it	ne
   d61f4:	3203      	addne	r2, #3
   d61f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d61fa:	f1c2 0320 	rsb	r3, r2, #32
   d61fe:	fa00 fc03 	lsl.w	ip, r0, r3
   d6202:	fa20 f002 	lsr.w	r0, r0, r2
   d6206:	fa01 fe03 	lsl.w	lr, r1, r3
   d620a:	ea40 000e 	orr.w	r0, r0, lr
   d620e:	fa21 f102 	lsr.w	r1, r1, r2
   d6212:	4414      	add	r4, r2
   d6214:	e6c1      	b.n	d5f9a <__adddf3+0xe6>
   d6216:	bf00      	nop

000d6218 <__aeabi_dmul>:
   d6218:	b570      	push	{r4, r5, r6, lr}
   d621a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d621e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6226:	bf1d      	ittte	ne
   d6228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d622c:	ea94 0f0c 	teqne	r4, ip
   d6230:	ea95 0f0c 	teqne	r5, ip
   d6234:	f000 f8de 	bleq	d63f4 <__aeabi_dmul+0x1dc>
   d6238:	442c      	add	r4, r5
   d623a:	ea81 0603 	eor.w	r6, r1, r3
   d623e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d624a:	bf18      	it	ne
   d624c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6258:	d038      	beq.n	d62cc <__aeabi_dmul+0xb4>
   d625a:	fba0 ce02 	umull	ip, lr, r0, r2
   d625e:	f04f 0500 	mov.w	r5, #0
   d6262:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d626a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d626e:	f04f 0600 	mov.w	r6, #0
   d6272:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6276:	f09c 0f00 	teq	ip, #0
   d627a:	bf18      	it	ne
   d627c:	f04e 0e01 	orrne.w	lr, lr, #1
   d6280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d628c:	d204      	bcs.n	d6298 <__aeabi_dmul+0x80>
   d628e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6292:	416d      	adcs	r5, r5
   d6294:	eb46 0606 	adc.w	r6, r6, r6
   d6298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d629c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d62a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d62a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d62a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d62ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d62b0:	bf88      	it	hi
   d62b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d62b6:	d81e      	bhi.n	d62f6 <__aeabi_dmul+0xde>
   d62b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d62bc:	bf08      	it	eq
   d62be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d62c2:	f150 0000 	adcs.w	r0, r0, #0
   d62c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d62ca:	bd70      	pop	{r4, r5, r6, pc}
   d62cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d62d0:	ea46 0101 	orr.w	r1, r6, r1
   d62d4:	ea40 0002 	orr.w	r0, r0, r2
   d62d8:	ea81 0103 	eor.w	r1, r1, r3
   d62dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d62e0:	bfc2      	ittt	gt
   d62e2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d62e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d62ea:	bd70      	popgt	{r4, r5, r6, pc}
   d62ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d62f0:	f04f 0e00 	mov.w	lr, #0
   d62f4:	3c01      	subs	r4, #1
   d62f6:	f300 80ab 	bgt.w	d6450 <__aeabi_dmul+0x238>
   d62fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d62fe:	bfde      	ittt	le
   d6300:	2000      	movle	r0, #0
   d6302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6306:	bd70      	pople	{r4, r5, r6, pc}
   d6308:	f1c4 0400 	rsb	r4, r4, #0
   d630c:	3c20      	subs	r4, #32
   d630e:	da35      	bge.n	d637c <__aeabi_dmul+0x164>
   d6310:	340c      	adds	r4, #12
   d6312:	dc1b      	bgt.n	d634c <__aeabi_dmul+0x134>
   d6314:	f104 0414 	add.w	r4, r4, #20
   d6318:	f1c4 0520 	rsb	r5, r4, #32
   d631c:	fa00 f305 	lsl.w	r3, r0, r5
   d6320:	fa20 f004 	lsr.w	r0, r0, r4
   d6324:	fa01 f205 	lsl.w	r2, r1, r5
   d6328:	ea40 0002 	orr.w	r0, r0, r2
   d632c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6338:	fa21 f604 	lsr.w	r6, r1, r4
   d633c:	eb42 0106 	adc.w	r1, r2, r6
   d6340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6344:	bf08      	it	eq
   d6346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d634a:	bd70      	pop	{r4, r5, r6, pc}
   d634c:	f1c4 040c 	rsb	r4, r4, #12
   d6350:	f1c4 0520 	rsb	r5, r4, #32
   d6354:	fa00 f304 	lsl.w	r3, r0, r4
   d6358:	fa20 f005 	lsr.w	r0, r0, r5
   d635c:	fa01 f204 	lsl.w	r2, r1, r4
   d6360:	ea40 0002 	orr.w	r0, r0, r2
   d6364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d636c:	f141 0100 	adc.w	r1, r1, #0
   d6370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6374:	bf08      	it	eq
   d6376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d637a:	bd70      	pop	{r4, r5, r6, pc}
   d637c:	f1c4 0520 	rsb	r5, r4, #32
   d6380:	fa00 f205 	lsl.w	r2, r0, r5
   d6384:	ea4e 0e02 	orr.w	lr, lr, r2
   d6388:	fa20 f304 	lsr.w	r3, r0, r4
   d638c:	fa01 f205 	lsl.w	r2, r1, r5
   d6390:	ea43 0302 	orr.w	r3, r3, r2
   d6394:	fa21 f004 	lsr.w	r0, r1, r4
   d6398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d639c:	fa21 f204 	lsr.w	r2, r1, r4
   d63a0:	ea20 0002 	bic.w	r0, r0, r2
   d63a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d63a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d63ac:	bf08      	it	eq
   d63ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d63b2:	bd70      	pop	{r4, r5, r6, pc}
   d63b4:	f094 0f00 	teq	r4, #0
   d63b8:	d10f      	bne.n	d63da <__aeabi_dmul+0x1c2>
   d63ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d63be:	0040      	lsls	r0, r0, #1
   d63c0:	eb41 0101 	adc.w	r1, r1, r1
   d63c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d63c8:	bf08      	it	eq
   d63ca:	3c01      	subeq	r4, #1
   d63cc:	d0f7      	beq.n	d63be <__aeabi_dmul+0x1a6>
   d63ce:	ea41 0106 	orr.w	r1, r1, r6
   d63d2:	f095 0f00 	teq	r5, #0
   d63d6:	bf18      	it	ne
   d63d8:	4770      	bxne	lr
   d63da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d63de:	0052      	lsls	r2, r2, #1
   d63e0:	eb43 0303 	adc.w	r3, r3, r3
   d63e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d63e8:	bf08      	it	eq
   d63ea:	3d01      	subeq	r5, #1
   d63ec:	d0f7      	beq.n	d63de <__aeabi_dmul+0x1c6>
   d63ee:	ea43 0306 	orr.w	r3, r3, r6
   d63f2:	4770      	bx	lr
   d63f4:	ea94 0f0c 	teq	r4, ip
   d63f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d63fc:	bf18      	it	ne
   d63fe:	ea95 0f0c 	teqne	r5, ip
   d6402:	d00c      	beq.n	d641e <__aeabi_dmul+0x206>
   d6404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6408:	bf18      	it	ne
   d640a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d640e:	d1d1      	bne.n	d63b4 <__aeabi_dmul+0x19c>
   d6410:	ea81 0103 	eor.w	r1, r1, r3
   d6414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6418:	f04f 0000 	mov.w	r0, #0
   d641c:	bd70      	pop	{r4, r5, r6, pc}
   d641e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6422:	bf06      	itte	eq
   d6424:	4610      	moveq	r0, r2
   d6426:	4619      	moveq	r1, r3
   d6428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d642c:	d019      	beq.n	d6462 <__aeabi_dmul+0x24a>
   d642e:	ea94 0f0c 	teq	r4, ip
   d6432:	d102      	bne.n	d643a <__aeabi_dmul+0x222>
   d6434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6438:	d113      	bne.n	d6462 <__aeabi_dmul+0x24a>
   d643a:	ea95 0f0c 	teq	r5, ip
   d643e:	d105      	bne.n	d644c <__aeabi_dmul+0x234>
   d6440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6444:	bf1c      	itt	ne
   d6446:	4610      	movne	r0, r2
   d6448:	4619      	movne	r1, r3
   d644a:	d10a      	bne.n	d6462 <__aeabi_dmul+0x24a>
   d644c:	ea81 0103 	eor.w	r1, r1, r3
   d6450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d645c:	f04f 0000 	mov.w	r0, #0
   d6460:	bd70      	pop	{r4, r5, r6, pc}
   d6462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d646a:	bd70      	pop	{r4, r5, r6, pc}

000d646c <__aeabi_ddiv>:
   d646c:	b570      	push	{r4, r5, r6, lr}
   d646e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6472:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6476:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d647a:	bf1d      	ittte	ne
   d647c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6480:	ea94 0f0c 	teqne	r4, ip
   d6484:	ea95 0f0c 	teqne	r5, ip
   d6488:	f000 f8a7 	bleq	d65da <__aeabi_ddiv+0x16e>
   d648c:	eba4 0405 	sub.w	r4, r4, r5
   d6490:	ea81 0e03 	eor.w	lr, r1, r3
   d6494:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6498:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d649c:	f000 8088 	beq.w	d65b0 <__aeabi_ddiv+0x144>
   d64a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d64a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d64a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d64ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d64b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d64b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d64b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d64bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d64c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d64c4:	429d      	cmp	r5, r3
   d64c6:	bf08      	it	eq
   d64c8:	4296      	cmpeq	r6, r2
   d64ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d64ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d64d2:	d202      	bcs.n	d64da <__aeabi_ddiv+0x6e>
   d64d4:	085b      	lsrs	r3, r3, #1
   d64d6:	ea4f 0232 	mov.w	r2, r2, rrx
   d64da:	1ab6      	subs	r6, r6, r2
   d64dc:	eb65 0503 	sbc.w	r5, r5, r3
   d64e0:	085b      	lsrs	r3, r3, #1
   d64e2:	ea4f 0232 	mov.w	r2, r2, rrx
   d64e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d64ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d64ee:	ebb6 0e02 	subs.w	lr, r6, r2
   d64f2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d64f6:	bf22      	ittt	cs
   d64f8:	1ab6      	subcs	r6, r6, r2
   d64fa:	4675      	movcs	r5, lr
   d64fc:	ea40 000c 	orrcs.w	r0, r0, ip
   d6500:	085b      	lsrs	r3, r3, #1
   d6502:	ea4f 0232 	mov.w	r2, r2, rrx
   d6506:	ebb6 0e02 	subs.w	lr, r6, r2
   d650a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d650e:	bf22      	ittt	cs
   d6510:	1ab6      	subcs	r6, r6, r2
   d6512:	4675      	movcs	r5, lr
   d6514:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6518:	085b      	lsrs	r3, r3, #1
   d651a:	ea4f 0232 	mov.w	r2, r2, rrx
   d651e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6522:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6526:	bf22      	ittt	cs
   d6528:	1ab6      	subcs	r6, r6, r2
   d652a:	4675      	movcs	r5, lr
   d652c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6530:	085b      	lsrs	r3, r3, #1
   d6532:	ea4f 0232 	mov.w	r2, r2, rrx
   d6536:	ebb6 0e02 	subs.w	lr, r6, r2
   d653a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d653e:	bf22      	ittt	cs
   d6540:	1ab6      	subcs	r6, r6, r2
   d6542:	4675      	movcs	r5, lr
   d6544:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6548:	ea55 0e06 	orrs.w	lr, r5, r6
   d654c:	d018      	beq.n	d6580 <__aeabi_ddiv+0x114>
   d654e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6552:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6556:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d655a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d655e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6562:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6566:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d656a:	d1c0      	bne.n	d64ee <__aeabi_ddiv+0x82>
   d656c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6570:	d10b      	bne.n	d658a <__aeabi_ddiv+0x11e>
   d6572:	ea41 0100 	orr.w	r1, r1, r0
   d6576:	f04f 0000 	mov.w	r0, #0
   d657a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d657e:	e7b6      	b.n	d64ee <__aeabi_ddiv+0x82>
   d6580:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6584:	bf04      	itt	eq
   d6586:	4301      	orreq	r1, r0
   d6588:	2000      	moveq	r0, #0
   d658a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d658e:	bf88      	it	hi
   d6590:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6594:	f63f aeaf 	bhi.w	d62f6 <__aeabi_dmul+0xde>
   d6598:	ebb5 0c03 	subs.w	ip, r5, r3
   d659c:	bf04      	itt	eq
   d659e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d65a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d65a6:	f150 0000 	adcs.w	r0, r0, #0
   d65aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d65ae:	bd70      	pop	{r4, r5, r6, pc}
   d65b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d65b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d65b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d65bc:	bfc2      	ittt	gt
   d65be:	ebd4 050c 	rsbsgt	r5, r4, ip
   d65c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d65c6:	bd70      	popgt	{r4, r5, r6, pc}
   d65c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d65cc:	f04f 0e00 	mov.w	lr, #0
   d65d0:	3c01      	subs	r4, #1
   d65d2:	e690      	b.n	d62f6 <__aeabi_dmul+0xde>
   d65d4:	ea45 0e06 	orr.w	lr, r5, r6
   d65d8:	e68d      	b.n	d62f6 <__aeabi_dmul+0xde>
   d65da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d65de:	ea94 0f0c 	teq	r4, ip
   d65e2:	bf08      	it	eq
   d65e4:	ea95 0f0c 	teqeq	r5, ip
   d65e8:	f43f af3b 	beq.w	d6462 <__aeabi_dmul+0x24a>
   d65ec:	ea94 0f0c 	teq	r4, ip
   d65f0:	d10a      	bne.n	d6608 <__aeabi_ddiv+0x19c>
   d65f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d65f6:	f47f af34 	bne.w	d6462 <__aeabi_dmul+0x24a>
   d65fa:	ea95 0f0c 	teq	r5, ip
   d65fe:	f47f af25 	bne.w	d644c <__aeabi_dmul+0x234>
   d6602:	4610      	mov	r0, r2
   d6604:	4619      	mov	r1, r3
   d6606:	e72c      	b.n	d6462 <__aeabi_dmul+0x24a>
   d6608:	ea95 0f0c 	teq	r5, ip
   d660c:	d106      	bne.n	d661c <__aeabi_ddiv+0x1b0>
   d660e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6612:	f43f aefd 	beq.w	d6410 <__aeabi_dmul+0x1f8>
   d6616:	4610      	mov	r0, r2
   d6618:	4619      	mov	r1, r3
   d661a:	e722      	b.n	d6462 <__aeabi_dmul+0x24a>
   d661c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6620:	bf18      	it	ne
   d6622:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6626:	f47f aec5 	bne.w	d63b4 <__aeabi_dmul+0x19c>
   d662a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d662e:	f47f af0d 	bne.w	d644c <__aeabi_dmul+0x234>
   d6632:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6636:	f47f aeeb 	bne.w	d6410 <__aeabi_dmul+0x1f8>
   d663a:	e712      	b.n	d6462 <__aeabi_dmul+0x24a>

000d663c <__gedf2>:
   d663c:	f04f 3cff 	mov.w	ip, #4294967295
   d6640:	e006      	b.n	d6650 <__cmpdf2+0x4>
   d6642:	bf00      	nop

000d6644 <__ledf2>:
   d6644:	f04f 0c01 	mov.w	ip, #1
   d6648:	e002      	b.n	d6650 <__cmpdf2+0x4>
   d664a:	bf00      	nop

000d664c <__cmpdf2>:
   d664c:	f04f 0c01 	mov.w	ip, #1
   d6650:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6654:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6658:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d665c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6660:	bf18      	it	ne
   d6662:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6666:	d01b      	beq.n	d66a0 <__cmpdf2+0x54>
   d6668:	b001      	add	sp, #4
   d666a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d666e:	bf0c      	ite	eq
   d6670:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6674:	ea91 0f03 	teqne	r1, r3
   d6678:	bf02      	ittt	eq
   d667a:	ea90 0f02 	teqeq	r0, r2
   d667e:	2000      	moveq	r0, #0
   d6680:	4770      	bxeq	lr
   d6682:	f110 0f00 	cmn.w	r0, #0
   d6686:	ea91 0f03 	teq	r1, r3
   d668a:	bf58      	it	pl
   d668c:	4299      	cmppl	r1, r3
   d668e:	bf08      	it	eq
   d6690:	4290      	cmpeq	r0, r2
   d6692:	bf2c      	ite	cs
   d6694:	17d8      	asrcs	r0, r3, #31
   d6696:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d669a:	f040 0001 	orr.w	r0, r0, #1
   d669e:	4770      	bx	lr
   d66a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d66a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d66a8:	d102      	bne.n	d66b0 <__cmpdf2+0x64>
   d66aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d66ae:	d107      	bne.n	d66c0 <__cmpdf2+0x74>
   d66b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d66b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d66b8:	d1d6      	bne.n	d6668 <__cmpdf2+0x1c>
   d66ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d66be:	d0d3      	beq.n	d6668 <__cmpdf2+0x1c>
   d66c0:	f85d 0b04 	ldr.w	r0, [sp], #4
   d66c4:	4770      	bx	lr
   d66c6:	bf00      	nop

000d66c8 <__aeabi_cdrcmple>:
   d66c8:	4684      	mov	ip, r0
   d66ca:	4610      	mov	r0, r2
   d66cc:	4662      	mov	r2, ip
   d66ce:	468c      	mov	ip, r1
   d66d0:	4619      	mov	r1, r3
   d66d2:	4663      	mov	r3, ip
   d66d4:	e000      	b.n	d66d8 <__aeabi_cdcmpeq>
   d66d6:	bf00      	nop

000d66d8 <__aeabi_cdcmpeq>:
   d66d8:	b501      	push	{r0, lr}
   d66da:	f7ff ffb7 	bl	d664c <__cmpdf2>
   d66de:	2800      	cmp	r0, #0
   d66e0:	bf48      	it	mi
   d66e2:	f110 0f00 	cmnmi.w	r0, #0
   d66e6:	bd01      	pop	{r0, pc}

000d66e8 <__aeabi_dcmpeq>:
   d66e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d66ec:	f7ff fff4 	bl	d66d8 <__aeabi_cdcmpeq>
   d66f0:	bf0c      	ite	eq
   d66f2:	2001      	moveq	r0, #1
   d66f4:	2000      	movne	r0, #0
   d66f6:	f85d fb08 	ldr.w	pc, [sp], #8
   d66fa:	bf00      	nop

000d66fc <__aeabi_dcmplt>:
   d66fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6700:	f7ff ffea 	bl	d66d8 <__aeabi_cdcmpeq>
   d6704:	bf34      	ite	cc
   d6706:	2001      	movcc	r0, #1
   d6708:	2000      	movcs	r0, #0
   d670a:	f85d fb08 	ldr.w	pc, [sp], #8
   d670e:	bf00      	nop

000d6710 <__aeabi_dcmple>:
   d6710:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6714:	f7ff ffe0 	bl	d66d8 <__aeabi_cdcmpeq>
   d6718:	bf94      	ite	ls
   d671a:	2001      	movls	r0, #1
   d671c:	2000      	movhi	r0, #0
   d671e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6722:	bf00      	nop

000d6724 <__aeabi_dcmpge>:
   d6724:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6728:	f7ff ffce 	bl	d66c8 <__aeabi_cdrcmple>
   d672c:	bf94      	ite	ls
   d672e:	2001      	movls	r0, #1
   d6730:	2000      	movhi	r0, #0
   d6732:	f85d fb08 	ldr.w	pc, [sp], #8
   d6736:	bf00      	nop

000d6738 <__aeabi_dcmpgt>:
   d6738:	f84d ed08 	str.w	lr, [sp, #-8]!
   d673c:	f7ff ffc4 	bl	d66c8 <__aeabi_cdrcmple>
   d6740:	bf34      	ite	cc
   d6742:	2001      	movcc	r0, #1
   d6744:	2000      	movcs	r0, #0
   d6746:	f85d fb08 	ldr.w	pc, [sp], #8
   d674a:	bf00      	nop

000d674c <__aeabi_dcmpun>:
   d674c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6750:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6754:	d102      	bne.n	d675c <__aeabi_dcmpun+0x10>
   d6756:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d675a:	d10a      	bne.n	d6772 <__aeabi_dcmpun+0x26>
   d675c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6760:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6764:	d102      	bne.n	d676c <__aeabi_dcmpun+0x20>
   d6766:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d676a:	d102      	bne.n	d6772 <__aeabi_dcmpun+0x26>
   d676c:	f04f 0000 	mov.w	r0, #0
   d6770:	4770      	bx	lr
   d6772:	f04f 0001 	mov.w	r0, #1
   d6776:	4770      	bx	lr

000d6778 <__aeabi_d2iz>:
   d6778:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d677c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6780:	d215      	bcs.n	d67ae <__aeabi_d2iz+0x36>
   d6782:	d511      	bpl.n	d67a8 <__aeabi_d2iz+0x30>
   d6784:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6788:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d678c:	d912      	bls.n	d67b4 <__aeabi_d2iz+0x3c>
   d678e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6792:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6796:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d679a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d679e:	fa23 f002 	lsr.w	r0, r3, r2
   d67a2:	bf18      	it	ne
   d67a4:	4240      	negne	r0, r0
   d67a6:	4770      	bx	lr
   d67a8:	f04f 0000 	mov.w	r0, #0
   d67ac:	4770      	bx	lr
   d67ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d67b2:	d105      	bne.n	d67c0 <__aeabi_d2iz+0x48>
   d67b4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d67b8:	bf08      	it	eq
   d67ba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d67be:	4770      	bx	lr
   d67c0:	f04f 0000 	mov.w	r0, #0
   d67c4:	4770      	bx	lr
   d67c6:	bf00      	nop

000d67c8 <__aeabi_d2uiz>:
   d67c8:	004a      	lsls	r2, r1, #1
   d67ca:	d211      	bcs.n	d67f0 <__aeabi_d2uiz+0x28>
   d67cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d67d0:	d211      	bcs.n	d67f6 <__aeabi_d2uiz+0x2e>
   d67d2:	d50d      	bpl.n	d67f0 <__aeabi_d2uiz+0x28>
   d67d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d67d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d67dc:	d40e      	bmi.n	d67fc <__aeabi_d2uiz+0x34>
   d67de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d67e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d67e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d67ea:	fa23 f002 	lsr.w	r0, r3, r2
   d67ee:	4770      	bx	lr
   d67f0:	f04f 0000 	mov.w	r0, #0
   d67f4:	4770      	bx	lr
   d67f6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d67fa:	d102      	bne.n	d6802 <__aeabi_d2uiz+0x3a>
   d67fc:	f04f 30ff 	mov.w	r0, #4294967295
   d6800:	4770      	bx	lr
   d6802:	f04f 0000 	mov.w	r0, #0
   d6806:	4770      	bx	lr

000d6808 <__aeabi_d2f>:
   d6808:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d680c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6810:	bf24      	itt	cs
   d6812:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6816:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d681a:	d90d      	bls.n	d6838 <__aeabi_d2f+0x30>
   d681c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6820:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6824:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6828:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d682c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6830:	bf08      	it	eq
   d6832:	f020 0001 	biceq.w	r0, r0, #1
   d6836:	4770      	bx	lr
   d6838:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d683c:	d121      	bne.n	d6882 <__aeabi_d2f+0x7a>
   d683e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d6842:	bfbc      	itt	lt
   d6844:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6848:	4770      	bxlt	lr
   d684a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d684e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d6852:	f1c2 0218 	rsb	r2, r2, #24
   d6856:	f1c2 0c20 	rsb	ip, r2, #32
   d685a:	fa10 f30c 	lsls.w	r3, r0, ip
   d685e:	fa20 f002 	lsr.w	r0, r0, r2
   d6862:	bf18      	it	ne
   d6864:	f040 0001 	orrne.w	r0, r0, #1
   d6868:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d686c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6870:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6874:	ea40 000c 	orr.w	r0, r0, ip
   d6878:	fa23 f302 	lsr.w	r3, r3, r2
   d687c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6880:	e7cc      	b.n	d681c <__aeabi_d2f+0x14>
   d6882:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d6886:	d107      	bne.n	d6898 <__aeabi_d2f+0x90>
   d6888:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d688c:	bf1e      	ittt	ne
   d688e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6892:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d6896:	4770      	bxne	lr
   d6898:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d689c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d68a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d68a4:	4770      	bx	lr
   d68a6:	bf00      	nop

000d68a8 <__cxa_atexit>:
   d68a8:	b510      	push	{r4, lr}
   d68aa:	4c05      	ldr	r4, [pc, #20]	; (d68c0 <__cxa_atexit+0x18>)
   d68ac:	4613      	mov	r3, r2
   d68ae:	b12c      	cbz	r4, d68bc <__cxa_atexit+0x14>
   d68b0:	460a      	mov	r2, r1
   d68b2:	4601      	mov	r1, r0
   d68b4:	2002      	movs	r0, #2
   d68b6:	f3af 8000 	nop.w
   d68ba:	bd10      	pop	{r4, pc}
   d68bc:	4620      	mov	r0, r4
   d68be:	bd10      	pop	{r4, pc}
   d68c0:	00000000 	.word	0x00000000

000d68c4 <memcpy>:
   d68c4:	b510      	push	{r4, lr}
   d68c6:	1e43      	subs	r3, r0, #1
   d68c8:	440a      	add	r2, r1
   d68ca:	4291      	cmp	r1, r2
   d68cc:	d004      	beq.n	d68d8 <memcpy+0x14>
   d68ce:	f811 4b01 	ldrb.w	r4, [r1], #1
   d68d2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d68d6:	e7f8      	b.n	d68ca <memcpy+0x6>
   d68d8:	bd10      	pop	{r4, pc}

000d68da <memset>:
   d68da:	4402      	add	r2, r0
   d68dc:	4603      	mov	r3, r0
   d68de:	4293      	cmp	r3, r2
   d68e0:	d002      	beq.n	d68e8 <memset+0xe>
   d68e2:	f803 1b01 	strb.w	r1, [r3], #1
   d68e6:	e7fa      	b.n	d68de <memset+0x4>
   d68e8:	4770      	bx	lr
	...

000d68ec <srand>:
   d68ec:	b538      	push	{r3, r4, r5, lr}
   d68ee:	4b12      	ldr	r3, [pc, #72]	; (d6938 <srand+0x4c>)
   d68f0:	681c      	ldr	r4, [r3, #0]
   d68f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d68f4:	4605      	mov	r5, r0
   d68f6:	b9d3      	cbnz	r3, d692e <srand+0x42>
   d68f8:	2018      	movs	r0, #24
   d68fa:	f7fe f8dd 	bl	d4ab8 <malloc>
   d68fe:	f243 330e 	movw	r3, #13070	; 0x330e
   d6902:	63a0      	str	r0, [r4, #56]	; 0x38
   d6904:	8003      	strh	r3, [r0, #0]
   d6906:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d690a:	8043      	strh	r3, [r0, #2]
   d690c:	f241 2334 	movw	r3, #4660	; 0x1234
   d6910:	8083      	strh	r3, [r0, #4]
   d6912:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6916:	80c3      	strh	r3, [r0, #6]
   d6918:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d691c:	8103      	strh	r3, [r0, #8]
   d691e:	2305      	movs	r3, #5
   d6920:	8143      	strh	r3, [r0, #10]
   d6922:	230b      	movs	r3, #11
   d6924:	8183      	strh	r3, [r0, #12]
   d6926:	2201      	movs	r2, #1
   d6928:	2300      	movs	r3, #0
   d692a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d692e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6930:	2200      	movs	r2, #0
   d6932:	611d      	str	r5, [r3, #16]
   d6934:	615a      	str	r2, [r3, #20]
   d6936:	bd38      	pop	{r3, r4, r5, pc}
   d6938:	2003e370 	.word	0x2003e370

000d693c <strlen>:
   d693c:	4603      	mov	r3, r0
   d693e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6942:	2a00      	cmp	r2, #0
   d6944:	d1fb      	bne.n	d693e <strlen+0x2>
   d6946:	1a18      	subs	r0, r3, r0
   d6948:	3801      	subs	r0, #1
   d694a:	4770      	bx	lr

000d694c <dynalib_user>:
   d694c:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d695c:	0000 0000                                   ....

000d6960 <_ZL16test_cmd_options>:
   d6960:	2e3f 4f20 7470 6f69 736e 000a               ?. Options..

000d696c <_ZL15test_device_api>:
   d696c:	2e32 5420 7365 2074 6544 6976 6563 4120     2. Test Device A
   d697c:	4950 000a                                   PI..

000d6980 <_ZL14test_flash_cmd>:
   d6980:	2e31 5420 7365 2074 4545 5250 4d4f 000a     1. Test EEPROM..
   d6990:	540a 7365 6974 676e 6620 616c 6873 003a     .Testing flash:.

000d69a0 <_ZL9test_fail>:
   d69a0:	5245 4f52 0052                              ERROR.

000d69a6 <_ZL12test_padding>:
   d69a6:	2a2a 2a2a 2a2a 2a2a 2a2a 000a               **********..

000d69b2 <_ZL12test_success>:
   d69b2:	4b4f e000 ce0f 9a68 4775 e705 0e9a 7437     OK....h.uG....7t
   d69c2:	7365 2e74 7262 6b6f 7265 632e 6d6f 0a00     est.broker.com..
   d69d2:	6e55 7869 5420 6d69 3a65 2020 2020 0020     Unix Time:     .
   d69e2:	6c63 756f 2064 7473 7461 7375 203a 2020     cloud status:   
   d69f2:	0020 656e 7774 726f 206b 7473 7461 7375      .network status
   d6a02:	203a 0020 6973 6e67 6c61 7320 7274 6e65     :  .signal stren
   d6a12:	7467 3a68 0020 6973 6e67 6c61 7120 6175     gth: .signal qua
   d6a22:	696c 7974 203a 0020 6142 7474 7265 2079     lity:  .Battery 
   d6a32:	6f56 746c 6761 3a65 0020 6142 7474 7265     Voltage: .Batter
   d6a42:	2079 4f53 3a43 2020 2020 0020 0000          y SOC:     ...

000d6a50 <_ZTVN5spark13EthernetClassE>:
	...
   d6a58:	4b47 000d 4b3d 000d 4b33 000d 4b29 000d     GK..=K..3K..)K..
   d6a68:	4b1d 000d 4b11 000d 4b05 000d 4afd 000d     .K...K...K...J..
   d6a78:	4af3 000d 4ae9 000d 5a4d 000d 616e 006e     .J...J..MZ..nan.
   d6a88:	766f 0066 002e 6e69 0066 6162 6475 5300     ovf...inf.baud.S
   d6a98:	7265 6169 006c 6553 6972 6c61 0031 7974     erial.Serial1.ty
   d6aa8:	6570 7000 7261 6d61 6300 646d 6900 0064     pe.param.cmd.id.
   d6ab8:	6e68 0064 7473 6d72 6600 6c69 0074 766c     hnd.strm.filt.lv
   d6ac8:	006c 6461 4864 6e61 6c64 7265 7200 6d65     l.addHandler.rem
   d6ad8:	766f 4865 6e61 6c64 7265 6500 756e 486d     oveHandler.enumH
   d6ae8:	6e61 6c64 7265 0073 534a 4e4f 7453 6572     andlers.JSONStre
   d6af8:	6d61 6f4c 4867 6e61 6c64 7265 6100 7070     amLogHandler.app
   d6b08:	2500 3130 7530 0020 205d 2500 0064 202c     .%010u .] .%d., 
   d6b18:	2800 3a29 0020 5b20 6300 646f 2065 203d     .(): . [.code = 
   d6b28:	2500 0069 6564 6174 6c69 2073 203d 0d00     .%i.details = ..
   d6b38:	000a 6e6c 6600 006e 6f63 6564 6400 7465     ..ln.fn.code.det
   d6b48:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   d6b58:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   d6b68:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
   d6b78:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   d6b88:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d6b98:	0065 0000                                   e...

000d6b9c <_ZTV14CellularSignal>:
	...
   d6ba4:	4499 000d 449b 000d 4fd5 000d 5065 000d     .D...D...O..eP..
   d6bb4:	4fd9 000d 5031 000d 5005 000d 50ef 000d     .O..1P...P...P..
   d6bc4:	fffc ffff 0000 0000 5119 000d               .........Q..

000d6bd0 <_ZTV9IPAddress>:
	...
   d6bd8:	536d 000d 535d 000d 535f 000d               mS..]S.._S..

000d6be4 <_ZTV9USBSerial>:
	...
   d6bec:	5445 000d 5495 000d 54a3 000d 4ca5 000d     ET...T...T...L..
   d6bfc:	5481 000d 5447 000d 545d 000d 548f 000d     .T..GT..]T...T..
   d6c0c:	5473 000d 5441 000d                         sT..AT..

000d6c14 <_ZTVN5spark13CellularClassE>:
	...
   d6c1c:	55af 000d 55a5 000d 559b 000d 5551 000d     .U...U...U..QU..
   d6c2c:	558f 000d 5583 000d 5577 000d 556f 000d     .U...U..wU..oU..
   d6c3c:	5565 000d 555b 000d 5a4d 000d               eU..[U..MZ..

000d6c48 <_ZTV11USARTSerial>:
	...
   d6c50:	565d 000d 56ad 000d 56bb 000d 4ca5 000d     ]V...V...V...L..
   d6c60:	5671 000d 5693 000d 567f 000d 56a7 000d     qV...V...V...V..
   d6c70:	565f 000d 5663 000d                         _V..cV..

000d6c78 <_ZTV7TwoWire>:
	...
   d6c80:	5759 000d 57a3 000d 577b 000d 575b 000d     YW...W..{W..[W..
   d6c90:	5783 000d 578b 000d 5793 000d 579b 000d     .W...W...W...W..

000d6ca0 <_ZTVN5spark9MeshClassE>:
	...
   d6ca8:	58c9 000d 58bf 000d 58b5 000d 58ab 000d     .X...X...X...X..
   d6cb8:	589f 000d 5893 000d 5887 000d 587f 000d     .X...X...X...X..
   d6cc8:	5875 000d 586b 000d 5a4d 000d               uX..kX..MZ..

000d6cd4 <_ZTVN5spark12NetworkClassE>:
	...
   d6cdc:	59e5 000d 59ef 000d 59f9 000d 5a03 000d     .Y...Y...Y...Z..
   d6cec:	5a0d 000d 5a19 000d 5a25 000d 5a31 000d     .Z...Z..%Z..1Z..
   d6cfc:	5a39 000d 5a43 000d 5a4d 000d               9Z..CZ..MZ..

000d6d08 <_ZSt7nothrow>:
   d6d08:	0000 0000                                   ....

000d6d0c <__sf_fake_stdin>:
	...

000d6d2c <__sf_fake_stdout>:
	...

000d6d4c <__sf_fake_stderr>:
	...
   d6d6c:	0043                                        C.

000d6d6e <link_const_variable_data_end>:
	...

000d6d70 <link_constructors_location>:
   d6d70:	000d40e5 	.word	0x000d40e5
   d6d74:	000d4249 	.word	0x000d4249
   d6d78:	000d4491 	.word	0x000d4491
   d6d7c:	000d4495 	.word	0x000d4495
   d6d80:	000d4661 	.word	0x000d4661
   d6d84:	000d4b51 	.word	0x000d4b51
   d6d88:	000d4b85 	.word	0x000d4b85
   d6d8c:	000d4c7d 	.word	0x000d4c7d
   d6d90:	000d4f09 	.word	0x000d4f09
   d6d94:	000d4f85 	.word	0x000d4f85
   d6d98:	000d4fb9 	.word	0x000d4fb9
   d6d9c:	000d562d 	.word	0x000d562d
   d6da0:	000d5995 	.word	0x000d5995
   d6da4:	000d5b19 	.word	0x000d5b19
   d6da8:	000d5c19 	.word	0x000d5c19
   d6dac:	000d5c9d 	.word	0x000d5c9d
   d6db0:	000d5d61 	.word	0x000d5d61
   d6db4:	000d5e25 	.word	0x000d5e25

000d6db8 <link_constructors_end>:
	...
