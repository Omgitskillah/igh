
d:/git/igh/igh_shield/target/1.5.2/boron/igh_shield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000066b4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000da6d0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  2003dd10  000da6d4  0001dd10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000a70  2003dd80  2003dd80  0002dd80  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000da744  000da744  0002a744  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000da76c  000da76c  0002a76c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001bbd95  00000000  00000000  0002a770  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00025791  00000000  00000000  001e6505  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000306fd  00000000  00000000  0020bc96  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000035e0  00000000  00000000  0023c393  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006338  00000000  00000000  0023f973  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0005a48b  00000000  00000000  00245cab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000697d4  00000000  00000000  002a0136  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00117de8  00000000  00000000  0030990a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000fe94  00000000  00000000  004216f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f005 ff70 	bl	d9f12 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f005 ff75 	bl	d9f28 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003dd10 	.word	0x2003dd10
   d4048:	000da6d4 	.word	0x000da6d4
   d404c:	2003dd80 	.word	0x2003dd80
   d4050:	2003dd80 	.word	0x2003dd80
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f004 fb6b 	bl	d8734 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000da6d0 	.word	0x000da6d0
   d4080:	000da634 	.word	0x000da634

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b82d 	b.w	d40e2 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f835 	bl	d40f8 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f004 bb11 	b.w	d86b8 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f003 bd13 	b.w	d7ac0 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f003 bd11 	b.w	d7ac0 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <igh_settings_calculate_checksum>:
 * struct must have a single byte at the end designated for the checksum for this to work
 * \param p_struct: pointer to data struct, total_bytes: sizeof(data struct)
 * \return the checksum
 */
uint8_t igh_settings_calculate_checksum(void * p_struct, size_t total_bytes)
{
   d40ae:	b510      	push	{r4, lr}
    data = (uint8_t *)p_struct;

    // uint8_t data_buffer[length];
    // memcpy(data_buffer, data, length);

    data += 1; // ignore checksum byte
   d40b0:	1c42      	adds	r2, r0, #1
 */
uint8_t igh_settings_calculate_checksum(void * p_struct, size_t total_bytes)
{
    uint8_t length = (uint8_t)total_bytes; 
    uint8_t * data;
    int sum = 0;
   d40b2:	2300      	movs	r3, #0
    // uint8_t data_buffer[length];
    // memcpy(data_buffer, data, length);

    data += 1; // ignore checksum byte
    // start at 1 to ignore the checksum byte
    for( int i = 1; i < length; i++)
   d40b4:	b2c9      	uxtb	r1, r1
   d40b6:	1a14      	subs	r4, r2, r0
   d40b8:	42a1      	cmp	r1, r4
   d40ba:	dd03      	ble.n	d40c4 <igh_settings_calculate_checksum+0x16>
    {
        sum += (0xFF & *data++);
   d40bc:	f812 4b01 	ldrb.w	r4, [r2], #1
   d40c0:	4423      	add	r3, r4
   d40c2:	e7f8      	b.n	d40b6 <igh_settings_calculate_checksum+0x8>
    }

    checksum = (uint8_t)(sum % 256);

    return checksum;
}
   d40c4:	b2d8      	uxtb	r0, r3
   d40c6:	bd10      	pop	{r4, pc}

000d40c8 <_Z21igh_shield_test_setupv>:
#endif

}

void igh_shield_test_setup(void)
{
   d40c8:	b508      	push	{r3, lr}
    igh_hardware_setup();
   d40ca:	f000 fc4b 	bl	d4964 <_Z18igh_hardware_setupv>
    igh_boron_setup();
   d40ce:	f000 ffab 	bl	d5028 <_Z15igh_boron_setupv>
    igh_sd_log_setup();
   d40d2:	f000 fd5d 	bl	d4b90 <_Z16igh_sd_log_setupv>
    igh_rfm69_setup();
   d40d6:	f001 f897 	bl	d5208 <_Z15igh_rfm69_setupv>
    igh_log_begin();
}
   d40da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
    igh_hardware_setup();
    igh_boron_setup();
    igh_sd_log_setup();
    igh_rfm69_setup();
    igh_log_begin();
   d40de:	f000 b85b 	b.w	d4198 <_Z13igh_log_beginv>

000d40e2 <setup>:
void igh_shield_test_setup(void);

void setup() 
{
#ifdef TEST_MODE
    igh_shield_test_setup();
   d40e2:	f7ff bff1 	b.w	d40c8 <_Z21igh_shield_test_setupv>

000d40e6 <_Z20igh_shield_test_loopv>:
    igh_rfm69_setup();
    igh_log_begin();
}

void igh_shield_test_loop(void)
{
   d40e6:	b508      	push	{r3, lr}
    // process test commands
    igh_process_serial_cmd(); 
   d40e8:	f000 f860 	bl	d41ac <_Z22igh_process_serial_cmdv>
    // Service platform and hardawre
    igh_boron_service();
   d40ec:	f000 ffa4 	bl	d5038 <_Z17igh_boron_servicev>
    igh_hardware_service();
   d40f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
    // process test commands
    igh_process_serial_cmd(); 
    // Service platform and hardawre
    igh_boron_service();
    igh_hardware_service();
   d40f4:	f000 bc2a 	b.w	d494c <_Z20igh_hardware_servicev>

000d40f8 <loop>:
}

void loop() 
{
#ifdef TEST_MODE
    igh_shield_test_loop();
   d40f8:	f7ff bff5 	b.w	d40e6 <_Z20igh_shield_test_loopv>

000d40fc <_GLOBAL__sub_I_setup>:
    // process test commands
    igh_process_serial_cmd(); 
    // Service platform and hardawre
    igh_boron_service();
    igh_hardware_service();
   d40fc:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d40fe:	f003 f9e3 	bl	d74c8 <HAL_Pin_Map>

#ifdef TEST_MODE
#include "particle_api/igh_log.h"
#endif

SYSTEM_THREAD(ENABLED);
   d4102:	2100      	movs	r1, #0
   d4104:	2001      	movs	r0, #1
    // process test commands
    igh_process_serial_cmd(); 
    // Service platform and hardawre
    igh_boron_service();
    igh_hardware_service();
   d4106:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#ifdef TEST_MODE
#include "particle_api/igh_log.h"
#endif

SYSTEM_THREAD(ENABLED);
   d410a:	f003 bc2d 	b.w	d7968 <system_thread_set_state>

000d410e <_Z13igh_log_print6String>:
    }
    return 0;
}

void igh_log_print(String _str)
{
   d410e:	b510      	push	{r4, lr}
   d4110:	4604      	mov	r4, r0
    Serial.print(_str);
   d4112:	f004 fc0f 	bl	d8934 <_Z16_fetch_usbserialv>
   d4116:	6821      	ldr	r1, [r4, #0]
}
   d4118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return 0;
}

void igh_log_print(String _str)
{
    Serial.print(_str);
   d411c:	f003 bfc2 	b.w	d80a4 <_ZN5Print5printEPKc>

000d4120 <_ZL22igh_append_test_statush.part.1>:
    igh_log_print(test_rfm69_radio);
    // Add more tests here
    igh_log_print(test_padding);
}

static void igh_append_test_status(uint8_t _status)
   d4120:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
    if(_status)
    {
        igh_log_print(test_success); igh_log_print("\n");
   d4122:	490b      	ldr	r1, [pc, #44]	; (d4150 <_ZL22igh_append_test_statush.part.1+0x30>)
   d4124:	4668      	mov	r0, sp
   d4126:	f003 ff16 	bl	d7f56 <_ZN6StringC1EPK19__FlashStringHelper>
   d412a:	4668      	mov	r0, sp
   d412c:	f7ff ffef 	bl	d410e <_Z13igh_log_print6String>
   d4130:	4668      	mov	r0, sp
   d4132:	f003 fec9 	bl	d7ec8 <_ZN6StringD1Ev>
   d4136:	4907      	ldr	r1, [pc, #28]	; (d4154 <_ZL22igh_append_test_statush.part.1+0x34>)
   d4138:	4668      	mov	r0, sp
   d413a:	f003 ff0c 	bl	d7f56 <_ZN6StringC1EPK19__FlashStringHelper>
   d413e:	4668      	mov	r0, sp
   d4140:	f7ff ffe5 	bl	d410e <_Z13igh_log_print6String>
   d4144:	4668      	mov	r0, sp
   d4146:	f003 febf 	bl	d7ec8 <_ZN6StringD1Ev>
    }
    else
    {
        igh_log_print(test_fail); igh_log_print("\n");
    }   
}
   d414a:	b005      	add	sp, #20
   d414c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4150:	000da05b 	.word	0x000da05b
   d4154:	000da3fc 	.word	0x000da3fc

000d4158 <_ZL22igh_append_test_statush>:
    // Add more tests here
    igh_log_print(test_padding);
}

static void igh_append_test_status(uint8_t _status)
{
   d4158:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if(_status)
   d415a:	b110      	cbz	r0, d4162 <_ZL22igh_append_test_statush+0xa>
   d415c:	f7ff ffe0 	bl	d4120 <_ZL22igh_append_test_statush.part.1>
   d4160:	e013      	b.n	d418a <_ZL22igh_append_test_statush+0x32>
    {
        igh_log_print(test_success); igh_log_print("\n");
    }
    else
    {
        igh_log_print(test_fail); igh_log_print("\n");
   d4162:	490b      	ldr	r1, [pc, #44]	; (d4190 <_ZL22igh_append_test_statush+0x38>)
   d4164:	4668      	mov	r0, sp
   d4166:	f003 fef6 	bl	d7f56 <_ZN6StringC1EPK19__FlashStringHelper>
   d416a:	4668      	mov	r0, sp
   d416c:	f7ff ffcf 	bl	d410e <_Z13igh_log_print6String>
   d4170:	4668      	mov	r0, sp
   d4172:	f003 fea9 	bl	d7ec8 <_ZN6StringD1Ev>
   d4176:	4907      	ldr	r1, [pc, #28]	; (d4194 <_ZL22igh_append_test_statush+0x3c>)
   d4178:	4668      	mov	r0, sp
   d417a:	f003 feec 	bl	d7f56 <_ZN6StringC1EPK19__FlashStringHelper>
   d417e:	4668      	mov	r0, sp
   d4180:	f7ff ffc5 	bl	d410e <_Z13igh_log_print6String>
   d4184:	4668      	mov	r0, sp
   d4186:	f003 fe9f 	bl	d7ec8 <_ZN6StringD1Ev>
    }   
}
   d418a:	b005      	add	sp, #20
   d418c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4190:	000da06e 	.word	0x000da06e
   d4194:	000da3fc 	.word	0x000da3fc

000d4198 <_Z13igh_log_beginv>:
{
    Serial.print(_str);
}

void igh_log_begin(void)
{
   d4198:	b508      	push	{r3, lr}
    Serial.begin(IGH_LOG_BAUD);
   d419a:	f004 fbcb 	bl	d8934 <_Z16_fetch_usbserialv>
   d419e:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
}
   d41a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.print(_str);
}

void igh_log_begin(void)
{
    Serial.begin(IGH_LOG_BAUD);
   d41a6:	f004 bbb9 	b.w	d891c <_ZN9USBSerial5beginEl>
	...

000d41ac <_Z22igh_process_serial_cmdv>:
        igh_log_print(test_fail); igh_log_print("\n");
    }   
}

uint8_t igh_process_serial_cmd(void)
{
   d41ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   d41ae:	b089      	sub	sp, #36	; 0x24
    uint8_t ret = 0;
    char resp[10];
    memset(resp, '\0', sizeof(resp));
   d41b0:	2300      	movs	r3, #0
   d41b2:	9301      	str	r3, [sp, #4]
   d41b4:	9302      	str	r3, [sp, #8]
   d41b6:	f8ad 300c 	strh.w	r3, [sp, #12]

String IGH_ID;

static uint8_t igh_log_read(char * _ch)
{
    if( Serial.available() )
   d41ba:	f004 fbbb 	bl	d8934 <_Z16_fetch_usbserialv>
   d41be:	6803      	ldr	r3, [r0, #0]
   d41c0:	691b      	ldr	r3, [r3, #16]
   d41c2:	4798      	blx	r3
   d41c4:	b190      	cbz	r0, d41ec <_Z22igh_process_serial_cmdv+0x40>
    {
        *_ch = Serial.read();
   d41c6:	f004 fbb5 	bl	d8934 <_Z16_fetch_usbserialv>
   d41ca:	6803      	ldr	r3, [r0, #0]
   d41cc:	695b      	ldr	r3, [r3, #20]
   d41ce:	4798      	blx	r3
   d41d0:	b2c4      	uxtb	r4, r0
        while (Serial.available()) Serial.read(); // remove any other data
   d41d2:	f004 fbaf 	bl	d8934 <_Z16_fetch_usbserialv>
   d41d6:	6803      	ldr	r3, [r0, #0]
   d41d8:	691b      	ldr	r3, [r3, #16]
   d41da:	4798      	blx	r3
   d41dc:	2800      	cmp	r0, #0
   d41de:	d064      	beq.n	d42aa <_Z22igh_process_serial_cmdv+0xfe>
   d41e0:	f004 fba8 	bl	d8934 <_Z16_fetch_usbserialv>
   d41e4:	6803      	ldr	r3, [r0, #0]
   d41e6:	695b      	ldr	r3, [r3, #20]
   d41e8:	4798      	blx	r3
   d41ea:	e7f2      	b.n	d41d2 <_Z22igh_process_serial_cmdv+0x26>
    }   
}

uint8_t igh_process_serial_cmd(void)
{
    uint8_t ret = 0;
   d41ec:	4604      	mov	r4, r0
    {
        // Do nothing;
    }

    // Test button routine
    if(test_button_flag)
   d41ee:	4d8f      	ldr	r5, [pc, #572]	; (d442c <_Z22igh_process_serial_cmdv+0x280>)
   d41f0:	782b      	ldrb	r3, [r5, #0]
   d41f2:	b1c3      	cbz	r3, d4226 <_Z22igh_process_serial_cmdv+0x7a>
    {
        if(igh_button_sec_counter >= button_test_duration)
   d41f4:	4b8e      	ldr	r3, [pc, #568]	; (d4430 <_Z22igh_process_serial_cmdv+0x284>)
   d41f6:	781a      	ldrb	r2, [r3, #0]
   d41f8:	4b8e      	ldr	r3, [pc, #568]	; (d4434 <_Z22igh_process_serial_cmdv+0x288>)
   d41fa:	781b      	ldrb	r3, [r3, #0]
   d41fc:	429a      	cmp	r2, r3
   d41fe:	d304      	bcc.n	d420a <_Z22igh_process_serial_cmdv+0x5e>
   d4200:	f7ff ff8e 	bl	d4120 <_ZL22igh_append_test_statush.part.1>
        {
            ret = 1;
            igh_append_test_status(ret);
            test_button_flag = false;
   d4204:	2300      	movs	r3, #0
   d4206:	702b      	strb	r3, [r5, #0]
    // Test button routine
    if(test_button_flag)
    {
        if(igh_button_sec_counter >= button_test_duration)
        {
            ret = 1;
   d4208:	2401      	movs	r4, #1

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d420a:	f003 fa1d 	bl	d7648 <HAL_Timer_Get_Milli_Seconds>
            igh_append_test_status(ret);
            test_button_flag = false;
        }

        if( (millis() - test_button_timeout_counter) >= test_button_timeout )
   d420e:	4b8a      	ldr	r3, [pc, #552]	; (d4438 <_Z22igh_process_serial_cmdv+0x28c>)
   d4210:	681b      	ldr	r3, [r3, #0]
   d4212:	1ac0      	subs	r0, r0, r3
   d4214:	4b89      	ldr	r3, [pc, #548]	; (d443c <_Z22igh_process_serial_cmdv+0x290>)
   d4216:	681b      	ldr	r3, [r3, #0]
   d4218:	4298      	cmp	r0, r3
   d421a:	d304      	bcc.n	d4226 <_Z22igh_process_serial_cmdv+0x7a>
        {
            ret = 0;
            igh_append_test_status(ret);
   d421c:	2000      	movs	r0, #0
            test_button_flag = false;
   d421e:	2400      	movs	r4, #0
        }

        if( (millis() - test_button_timeout_counter) >= test_button_timeout )
        {
            ret = 0;
            igh_append_test_status(ret);
   d4220:	f7ff ff9a 	bl	d4158 <_ZL22igh_append_test_statush>
            test_button_flag = false;
   d4224:	702c      	strb	r4, [r5, #0]
        }
    }

    // valve test routine
    if(test_valve_flag)
   d4226:	4e86      	ldr	r6, [pc, #536]	; (d4440 <_Z22igh_process_serial_cmdv+0x294>)
   d4228:	7833      	ldrb	r3, [r6, #0]
   d422a:	2b00      	cmp	r3, #0
   d422c:	d030      	beq.n	d4290 <_Z22igh_process_serial_cmdv+0xe4>
    {
        if(open_close)
   d422e:	4b85      	ldr	r3, [pc, #532]	; (d4444 <_Z22igh_process_serial_cmdv+0x298>)
   d4230:	781a      	ldrb	r2, [r3, #0]
   d4232:	461d      	mov	r5, r3
   d4234:	4b84      	ldr	r3, [pc, #528]	; (d4448 <_Z22igh_process_serial_cmdv+0x29c>)
   d4236:	b102      	cbz	r2, d423a <_Z22igh_process_serial_cmdv+0x8e>
        {
            current_valve_position = VALVE_OPEN;
   d4238:	2201      	movs	r2, #1
        else
        {
            current_valve_position = VALVE_CLOSE;
        }
        
        if( (millis() - test_valve_counter) >= valve_transit_time )
   d423a:	4f84      	ldr	r7, [pc, #528]	; (d444c <_Z22igh_process_serial_cmdv+0x2a0>)
        {
            current_valve_position = VALVE_OPEN;
        }
        else
        {
            current_valve_position = VALVE_CLOSE;
   d423c:	701a      	strb	r2, [r3, #0]
   d423e:	f003 fa03 	bl	d7648 <HAL_Timer_Get_Milli_Seconds>
        }
        
        if( (millis() - test_valve_counter) >= valve_transit_time )
   d4242:	683b      	ldr	r3, [r7, #0]
   d4244:	1ac0      	subs	r0, r0, r3
   d4246:	f241 736f 	movw	r3, #5999	; 0x176f
   d424a:	4298      	cmp	r0, r3
   d424c:	d920      	bls.n	d4290 <_Z22igh_process_serial_cmdv+0xe4>
        {
            if(open_close)
   d424e:	782d      	ldrb	r5, [r5, #0]
   d4250:	b155      	cbz	r5, d4268 <_Z22igh_process_serial_cmdv+0xbc>
            {
                valva_open_pass = igh_hardware_test_valve_state();
   d4252:	f000 fb7d 	bl	d4950 <_Z29igh_hardware_test_valve_statev>
   d4256:	4b7e      	ldr	r3, [pc, #504]	; (d4450 <_Z22igh_process_serial_cmdv+0x2a4>)
   d4258:	7018      	strb	r0, [r3, #0]
                open_close = false;
   d425a:	4b7a      	ldr	r3, [pc, #488]	; (d4444 <_Z22igh_process_serial_cmdv+0x298>)
   d425c:	2200      	movs	r2, #0
   d425e:	701a      	strb	r2, [r3, #0]
   d4260:	f003 f9f2 	bl	d7648 <HAL_Timer_Get_Milli_Seconds>
                test_valve_counter = millis();
   d4264:	6038      	str	r0, [r7, #0]
   d4266:	e013      	b.n	d4290 <_Z22igh_process_serial_cmdv+0xe4>
            }
            else
            {
                valve_closed_pass = !igh_hardware_test_valve_state();
   d4268:	f000 fb72 	bl	d4950 <_Z29igh_hardware_test_valve_statev>
   d426c:	4b79      	ldr	r3, [pc, #484]	; (d4454 <_Z22igh_process_serial_cmdv+0x2a8>)
   d426e:	2800      	cmp	r0, #0
   d4270:	bf0c      	ite	eq
   d4272:	2201      	moveq	r2, #1
   d4274:	2200      	movne	r2, #0
   d4276:	701a      	strb	r2, [r3, #0]

                ret = (valve_closed_pass && valva_open_pass);
   d4278:	d104      	bne.n	d4284 <_Z22igh_process_serial_cmdv+0xd8>
   d427a:	4b75      	ldr	r3, [pc, #468]	; (d4450 <_Z22igh_process_serial_cmdv+0x2a4>)
   d427c:	781d      	ldrb	r5, [r3, #0]
   d427e:	3500      	adds	r5, #0
   d4280:	bf18      	it	ne
   d4282:	2501      	movne	r5, #1
                igh_append_test_status(ret);
   d4284:	4628      	mov	r0, r5
   d4286:	f7ff ff67 	bl	d4158 <_ZL22igh_append_test_statush>
                test_valve_flag = false;
   d428a:	2300      	movs	r3, #0
            }
            else
            {
                valve_closed_pass = !igh_hardware_test_valve_state();

                ret = (valve_closed_pass && valva_open_pass);
   d428c:	462c      	mov	r4, r5
                igh_append_test_status(ret);
                test_valve_flag = false;
   d428e:	7033      	strb	r3, [r6, #0]
            }   
        }
    }

    if(test_rfm69_flag)
   d4290:	4d71      	ldr	r5, [pc, #452]	; (d4458 <_Z22igh_process_serial_cmdv+0x2ac>)
   d4292:	782b      	ldrb	r3, [r5, #0]
   d4294:	2b00      	cmp	r3, #0
   d4296:	f000 817b 	beq.w	d4590 <_Z22igh_process_serial_cmdv+0x3e4>
    {
        ret = igh_rfm69_test_service(); // this function is blocking
   d429a:	f001 f85d 	bl	d5358 <_Z22igh_rfm69_test_servicev>
   d429e:	4604      	mov	r4, r0
        igh_append_test_status(ret);
   d42a0:	f7ff ff5a 	bl	d4158 <_ZL22igh_append_test_statush>
        test_rfm69_flag = false;
   d42a4:	2300      	movs	r3, #0
   d42a6:	702b      	strb	r3, [r5, #0]
    }

    return ret;
   d42a8:	e172      	b.n	d4590 <_Z22igh_process_serial_cmdv+0x3e4>
    memset(resp, '\0', sizeof(resp));

    char serial_cmd = '\0';
    if( igh_log_read(&serial_cmd) )
    {
        switch(serial_cmd)
   d42aa:	f1a4 0031 	sub.w	r0, r4, #49	; 0x31
   d42ae:	280e      	cmp	r0, #14
   d42b0:	f200 8162 	bhi.w	d4578 <_Z22igh_process_serial_cmdv+0x3cc>
   d42b4:	e8df f010 	tbh	[pc, r0, lsl #1]
   d42b8:	00a9007f 	.word	0x00a9007f
   d42bc:	00ee00ac 	.word	0x00ee00ac
   d42c0:	0140012c 	.word	0x0140012c
   d42c4:	01600150 	.word	0x01600150
   d42c8:	01600160 	.word	0x01600160
   d42cc:	01600160 	.word	0x01600160
   d42d0:	01600160 	.word	0x01600160
   d42d4:	000f      	.short	0x000f
    Serial.begin(IGH_LOG_BAUD);
}

static void print_cmd_options(void)
{
    igh_log_print(test_padding);
   d42d6:	4961      	ldr	r1, [pc, #388]	; (d445c <_Z22igh_process_serial_cmdv+0x2b0>)
   d42d8:	a804      	add	r0, sp, #16
   d42da:	f003 fe3c 	bl	d7f56 <_ZN6StringC1EPK19__FlashStringHelper>
   d42de:	a804      	add	r0, sp, #16
   d42e0:	f7ff ff15 	bl	d410e <_Z13igh_log_print6String>
   d42e4:	a804      	add	r0, sp, #16
   d42e6:	f003 fdef 	bl	d7ec8 <_ZN6StringD1Ev>
    igh_log_print(test_header);
   d42ea:	495d      	ldr	r1, [pc, #372]	; (d4460 <_Z22igh_process_serial_cmdv+0x2b4>)
   d42ec:	a804      	add	r0, sp, #16
   d42ee:	f003 fe32 	bl	d7f56 <_ZN6StringC1EPK19__FlashStringHelper>
   d42f2:	a804      	add	r0, sp, #16
   d42f4:	f7ff ff0b 	bl	d410e <_Z13igh_log_print6String>
   d42f8:	a804      	add	r0, sp, #16
   d42fa:	f003 fde5 	bl	d7ec8 <_ZN6StringD1Ev>
    igh_log_print(test_padding);
   d42fe:	4957      	ldr	r1, [pc, #348]	; (d445c <_Z22igh_process_serial_cmdv+0x2b0>)
   d4300:	a804      	add	r0, sp, #16
   d4302:	f003 fe28 	bl	d7f56 <_ZN6StringC1EPK19__FlashStringHelper>
   d4306:	a804      	add	r0, sp, #16
   d4308:	f7ff ff01 	bl	d410e <_Z13igh_log_print6String>
   d430c:	a804      	add	r0, sp, #16
   d430e:	f003 fddb 	bl	d7ec8 <_ZN6StringD1Ev>
    igh_log_print(test_cmd_options);
   d4312:	4954      	ldr	r1, [pc, #336]	; (d4464 <_Z22igh_process_serial_cmdv+0x2b8>)
   d4314:	a804      	add	r0, sp, #16
   d4316:	f003 fe1e 	bl	d7f56 <_ZN6StringC1EPK19__FlashStringHelper>
   d431a:	a804      	add	r0, sp, #16
   d431c:	f7ff fef7 	bl	d410e <_Z13igh_log_print6String>
   d4320:	a804      	add	r0, sp, #16
   d4322:	f003 fdd1 	bl	d7ec8 <_ZN6StringD1Ev>
    igh_log_print(test_device_id);
   d4326:	4950      	ldr	r1, [pc, #320]	; (d4468 <_Z22igh_process_serial_cmdv+0x2bc>)
   d4328:	a804      	add	r0, sp, #16
   d432a:	f003 fe14 	bl	d7f56 <_ZN6StringC1EPK19__FlashStringHelper>
   d432e:	a804      	add	r0, sp, #16
   d4330:	f7ff feed 	bl	d410e <_Z13igh_log_print6String>
   d4334:	a804      	add	r0, sp, #16
   d4336:	f003 fdc7 	bl	d7ec8 <_ZN6StringD1Ev>
    igh_log_print(test_device_api);
   d433a:	494c      	ldr	r1, [pc, #304]	; (d446c <_Z22igh_process_serial_cmdv+0x2c0>)
   d433c:	a804      	add	r0, sp, #16
   d433e:	f003 fe0a 	bl	d7f56 <_ZN6StringC1EPK19__FlashStringHelper>
   d4342:	a804      	add	r0, sp, #16
   d4344:	f7ff fee3 	bl	d410e <_Z13igh_log_print6String>
   d4348:	a804      	add	r0, sp, #16
   d434a:	f003 fdbd 	bl	d7ec8 <_ZN6StringD1Ev>
    igh_log_print(test_flash_cmd);
   d434e:	4948      	ldr	r1, [pc, #288]	; (d4470 <_Z22igh_process_serial_cmdv+0x2c4>)
   d4350:	a804      	add	r0, sp, #16
   d4352:	f003 fe00 	bl	d7f56 <_ZN6StringC1EPK19__FlashStringHelper>
   d4356:	a804      	add	r0, sp, #16
   d4358:	f7ff fed9 	bl	d410e <_Z13igh_log_print6String>
   d435c:	a804      	add	r0, sp, #16
   d435e:	f003 fdb3 	bl	d7ec8 <_ZN6StringD1Ev>
    igh_log_print(test_button_press);
   d4362:	4944      	ldr	r1, [pc, #272]	; (d4474 <_Z22igh_process_serial_cmdv+0x2c8>)
   d4364:	a804      	add	r0, sp, #16
   d4366:	f003 fdf6 	bl	d7f56 <_ZN6StringC1EPK19__FlashStringHelper>
   d436a:	a804      	add	r0, sp, #16
   d436c:	f7ff fecf 	bl	d410e <_Z13igh_log_print6String>
   d4370:	a804      	add	r0, sp, #16
   d4372:	f003 fda9 	bl	d7ec8 <_ZN6StringD1Ev>
    igh_log_print(test_valve_state);
   d4376:	4940      	ldr	r1, [pc, #256]	; (d4478 <_Z22igh_process_serial_cmdv+0x2cc>)
   d4378:	a804      	add	r0, sp, #16
   d437a:	f003 fdec 	bl	d7f56 <_ZN6StringC1EPK19__FlashStringHelper>
   d437e:	a804      	add	r0, sp, #16
   d4380:	f7ff fec5 	bl	d410e <_Z13igh_log_print6String>
   d4384:	a804      	add	r0, sp, #16
   d4386:	f003 fd9f 	bl	d7ec8 <_ZN6StringD1Ev>
    igh_log_print(test_sd_card);
   d438a:	493c      	ldr	r1, [pc, #240]	; (d447c <_Z22igh_process_serial_cmdv+0x2d0>)
   d438c:	a804      	add	r0, sp, #16
   d438e:	f003 fde2 	bl	d7f56 <_ZN6StringC1EPK19__FlashStringHelper>
   d4392:	a804      	add	r0, sp, #16
   d4394:	f7ff febb 	bl	d410e <_Z13igh_log_print6String>
   d4398:	a804      	add	r0, sp, #16
   d439a:	f003 fd95 	bl	d7ec8 <_ZN6StringD1Ev>
    igh_log_print(test_rfm69_radio);
   d439e:	4938      	ldr	r1, [pc, #224]	; (d4480 <_Z22igh_process_serial_cmdv+0x2d4>)
   d43a0:	a804      	add	r0, sp, #16
   d43a2:	f003 fdd8 	bl	d7f56 <_ZN6StringC1EPK19__FlashStringHelper>
   d43a6:	a804      	add	r0, sp, #16
   d43a8:	f7ff feb1 	bl	d410e <_Z13igh_log_print6String>
   d43ac:	a804      	add	r0, sp, #16
   d43ae:	f003 fd8b 	bl	d7ec8 <_ZN6StringD1Ev>
    // Add more tests here
    igh_log_print(test_padding);
   d43b2:	492a      	ldr	r1, [pc, #168]	; (d445c <_Z22igh_process_serial_cmdv+0x2b0>)
   d43b4:	e01e      	b.n	d43f4 <_Z22igh_process_serial_cmdv+0x248>
                ret = 1;
                break;

            case test_id:
                // print out device ID
                igh_log_print(F("\nDevice ID: "));
   d43b6:	4933      	ldr	r1, [pc, #204]	; (d4484 <_Z22igh_process_serial_cmdv+0x2d8>)
   d43b8:	a804      	add	r0, sp, #16
   d43ba:	f003 fdcc 	bl	d7f56 <_ZN6StringC1EPK19__FlashStringHelper>
   d43be:	a804      	add	r0, sp, #16
   d43c0:	f7ff fea5 	bl	d410e <_Z13igh_log_print6String>
   d43c4:	a804      	add	r0, sp, #16
   d43c6:	f003 fd7f 	bl	d7ec8 <_ZN6StringD1Ev>
                IGH_ID = igh_boron_test_id();
   d43ca:	a804      	add	r0, sp, #16
   d43cc:	f000 febc 	bl	d5148 <_Z17igh_boron_test_idv>
   d43d0:	a904      	add	r1, sp, #16
   d43d2:	482d      	ldr	r0, [pc, #180]	; (d4488 <_Z22igh_process_serial_cmdv+0x2dc>)
   d43d4:	f003 fe09 	bl	d7fea <_ZN6StringaSEOS_>
   d43d8:	a804      	add	r0, sp, #16
   d43da:	f003 fd75 	bl	d7ec8 <_ZN6StringD1Ev>
                igh_log_print(IGH_ID); igh_log_print("\n"); 
   d43de:	492a      	ldr	r1, [pc, #168]	; (d4488 <_Z22igh_process_serial_cmdv+0x2dc>)
   d43e0:	a804      	add	r0, sp, #16
   d43e2:	f003 fdf7 	bl	d7fd4 <_ZN6StringC1ERKS_>
   d43e6:	a804      	add	r0, sp, #16
   d43e8:	f7ff fe91 	bl	d410e <_Z13igh_log_print6String>
   d43ec:	a804      	add	r0, sp, #16
   d43ee:	f003 fd6b 	bl	d7ec8 <_ZN6StringD1Ev>
   d43f2:	4926      	ldr	r1, [pc, #152]	; (d448c <_Z22igh_process_serial_cmdv+0x2e0>)
   d43f4:	a804      	add	r0, sp, #16
   d43f6:	f003 fdae 	bl	d7f56 <_ZN6StringC1EPK19__FlashStringHelper>
   d43fa:	a804      	add	r0, sp, #16
   d43fc:	f7ff fe87 	bl	d410e <_Z13igh_log_print6String>
   d4400:	a804      	add	r0, sp, #16
   d4402:	f003 fd61 	bl	d7ec8 <_ZN6StringD1Ev>
                ret = 1;
   d4406:	2401      	movs	r4, #1
                break;
   d4408:	e6f1      	b.n	d41ee <_Z22igh_process_serial_cmdv+0x42>
                
            case test_device:
                igh_boron_test_device();
   d440a:	f000 fe1d 	bl	d5048 <_Z21igh_boron_test_devicev>
   d440e:	e7fa      	b.n	d4406 <_Z22igh_process_serial_cmdv+0x25a>
                ret = 1;
                break;

            case test_flash:
                igh_log_print(F("\nTesting EEPROM:"));
   d4410:	491f      	ldr	r1, [pc, #124]	; (d4490 <_Z22igh_process_serial_cmdv+0x2e4>)
   d4412:	a804      	add	r0, sp, #16
   d4414:	f003 fd9f 	bl	d7f56 <_ZN6StringC1EPK19__FlashStringHelper>
   d4418:	a804      	add	r0, sp, #16
   d441a:	f7ff fe78 	bl	d410e <_Z13igh_log_print6String>
   d441e:	a804      	add	r0, sp, #16
   d4420:	f003 fd52 	bl	d7ec8 <_ZN6StringD1Ev>
                ret = igh_eeproom_test(); // this should be true based on actual test
   d4424:	f000 f986 	bl	d4734 <_Z16igh_eeproom_testv>
   d4428:	e092      	b.n	d4550 <_Z22igh_process_serial_cmdv+0x3a4>
   d442a:	bf00      	nop
   d442c:	2003dda0 	.word	0x2003dda0
   d4430:	2003ddaa 	.word	0x2003ddaa
   d4434:	2003dda2 	.word	0x2003dda2
   d4438:	2003dd9c 	.word	0x2003dd9c
   d443c:	2003dd98 	.word	0x2003dd98
   d4440:	2003dda3 	.word	0x2003dda3
   d4444:	2003dda1 	.word	0x2003dda1
   d4448:	2003dda9 	.word	0x2003dda9
   d444c:	2003dda4 	.word	0x2003dda4
   d4450:	2003dd84 	.word	0x2003dd84
   d4454:	2003dd85 	.word	0x2003dd85
   d4458:	2003dda8 	.word	0x2003dda8
   d445c:	000da146 	.word	0x000da146
   d4460:	000da04b 	.word	0x000da04b
   d4464:	000da075 	.word	0x000da075
   d4468:	000da134 	.word	0x000da134
   d446c:	000da120 	.word	0x000da120
   d4470:	000da081 	.word	0x000da081
   d4474:	000da030 	.word	0x000da030
   d4478:	000da158 	.word	0x000da158
   d447c:	000da16f 	.word	0x000da16f
   d4480:	000da05f 	.word	0x000da05f
   d4484:	000da091 	.word	0x000da091
   d4488:	2003dd88 	.word	0x2003dd88
   d448c:	000da3fc 	.word	0x000da3fc
   d4490:	000da09e 	.word	0x000da09e
                igh_append_test_status(ret);  
                break;

            case test_button:
                button_test_duration = random(1, 5); // get a random number to test button press duration
   d4494:	2105      	movs	r1, #5
   d4496:	2001      	movs	r0, #1
   d4498:	f004 fc40 	bl	d8d1c <_Z6randomii>
   d449c:	4c3e      	ldr	r4, [pc, #248]	; (d4598 <_Z22igh_process_serial_cmdv+0x3ec>)
                igh_log_print(F("\nPress button for: ")); igh_log_print(String(button_test_duration)); igh_log_print(F(" Seconds"));
   d449e:	493f      	ldr	r1, [pc, #252]	; (d459c <_Z22igh_process_serial_cmdv+0x3f0>)
                ret = igh_eeproom_test(); // this should be true based on actual test
                igh_append_test_status(ret);  
                break;

            case test_button:
                button_test_duration = random(1, 5); // get a random number to test button press duration
   d44a0:	7020      	strb	r0, [r4, #0]
                igh_log_print(F("\nPress button for: ")); igh_log_print(String(button_test_duration)); igh_log_print(F(" Seconds"));
   d44a2:	a804      	add	r0, sp, #16
   d44a4:	f003 fd57 	bl	d7f56 <_ZN6StringC1EPK19__FlashStringHelper>
   d44a8:	a804      	add	r0, sp, #16
   d44aa:	f7ff fe30 	bl	d410e <_Z13igh_log_print6String>
   d44ae:	a804      	add	r0, sp, #16
   d44b0:	f003 fd0a 	bl	d7ec8 <_ZN6StringD1Ev>
   d44b4:	220a      	movs	r2, #10
   d44b6:	7821      	ldrb	r1, [r4, #0]
   d44b8:	a804      	add	r0, sp, #16
   d44ba:	f003 fdaf 	bl	d801c <_ZN6StringC1Ehh>
   d44be:	a804      	add	r0, sp, #16
   d44c0:	f7ff fe25 	bl	d410e <_Z13igh_log_print6String>
   d44c4:	a804      	add	r0, sp, #16
   d44c6:	f003 fcff 	bl	d7ec8 <_ZN6StringD1Ev>
   d44ca:	4935      	ldr	r1, [pc, #212]	; (d45a0 <_Z22igh_process_serial_cmdv+0x3f4>)
   d44cc:	a804      	add	r0, sp, #16
   d44ce:	f003 fd42 	bl	d7f56 <_ZN6StringC1EPK19__FlashStringHelper>
   d44d2:	a804      	add	r0, sp, #16
   d44d4:	f7ff fe1b 	bl	d410e <_Z13igh_log_print6String>
   d44d8:	a804      	add	r0, sp, #16
   d44da:	f003 fcf5 	bl	d7ec8 <_ZN6StringD1Ev>
                igh_log_print(F("\nTesting Button:"));
   d44de:	4931      	ldr	r1, [pc, #196]	; (d45a4 <_Z22igh_process_serial_cmdv+0x3f8>)
   d44e0:	a804      	add	r0, sp, #16
   d44e2:	f003 fd38 	bl	d7f56 <_ZN6StringC1EPK19__FlashStringHelper>
   d44e6:	a804      	add	r0, sp, #16
   d44e8:	f7ff fe11 	bl	d410e <_Z13igh_log_print6String>
   d44ec:	a804      	add	r0, sp, #16
   d44ee:	f003 fceb 	bl	d7ec8 <_ZN6StringD1Ev>
                test_button_flag = 1;
   d44f2:	4b2d      	ldr	r3, [pc, #180]	; (d45a8 <_Z22igh_process_serial_cmdv+0x3fc>)
   d44f4:	2201      	movs	r2, #1
   d44f6:	701a      	strb	r2, [r3, #0]
                test_button_timeout = (button_test_duration + 5) * 1000; // + 5 gives you at least 5 seconds to start pressing
   d44f8:	7823      	ldrb	r3, [r4, #0]
   d44fa:	1d5a      	adds	r2, r3, #5
   d44fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4500:	4353      	muls	r3, r2
   d4502:	4a2a      	ldr	r2, [pc, #168]	; (d45ac <_Z22igh_process_serial_cmdv+0x400>)
   d4504:	6013      	str	r3, [r2, #0]
   d4506:	f003 f89f 	bl	d7648 <HAL_Timer_Get_Milli_Seconds>
                test_button_timeout_counter = millis();
   d450a:	4b29      	ldr	r3, [pc, #164]	; (d45b0 <_Z22igh_process_serial_cmdv+0x404>)
   d450c:	6018      	str	r0, [r3, #0]
   d450e:	e03d      	b.n	d458c <_Z22igh_process_serial_cmdv+0x3e0>
                break;

            case test_valve:
                igh_log_print(F("\nTesting Valve:"));
   d4510:	4928      	ldr	r1, [pc, #160]	; (d45b4 <_Z22igh_process_serial_cmdv+0x408>)
   d4512:	a804      	add	r0, sp, #16
   d4514:	f003 fd1f 	bl	d7f56 <_ZN6StringC1EPK19__FlashStringHelper>
   d4518:	a804      	add	r0, sp, #16
   d451a:	f7ff fdf8 	bl	d410e <_Z13igh_log_print6String>
   d451e:	a804      	add	r0, sp, #16
   d4520:	f003 fcd2 	bl	d7ec8 <_ZN6StringD1Ev>
                test_valve_flag = true;
   d4524:	4b24      	ldr	r3, [pc, #144]	; (d45b8 <_Z22igh_process_serial_cmdv+0x40c>)
   d4526:	2401      	movs	r4, #1
   d4528:	701c      	strb	r4, [r3, #0]
   d452a:	f003 f88d 	bl	d7648 <HAL_Timer_Get_Milli_Seconds>
                test_valve_counter = millis();
   d452e:	4b23      	ldr	r3, [pc, #140]	; (d45bc <_Z22igh_process_serial_cmdv+0x410>)
   d4530:	6018      	str	r0, [r3, #0]
                open_close = true;
   d4532:	4b23      	ldr	r3, [pc, #140]	; (d45c0 <_Z22igh_process_serial_cmdv+0x414>)
   d4534:	701c      	strb	r4, [r3, #0]
   d4536:	e029      	b.n	d458c <_Z22igh_process_serial_cmdv+0x3e0>
                break;

            case test_sd:
                igh_log_print(F("\nTesting SD Card:"));
   d4538:	4922      	ldr	r1, [pc, #136]	; (d45c4 <_Z22igh_process_serial_cmdv+0x418>)
   d453a:	a804      	add	r0, sp, #16
   d453c:	f003 fd0b 	bl	d7f56 <_ZN6StringC1EPK19__FlashStringHelper>
   d4540:	a804      	add	r0, sp, #16
   d4542:	f7ff fde4 	bl	d410e <_Z13igh_log_print6String>
   d4546:	a804      	add	r0, sp, #16
   d4548:	f003 fcbe 	bl	d7ec8 <_ZN6StringD1Ev>
                ret = igh_sd_log_test();
   d454c:	f000 fc6c 	bl	d4e28 <_Z15igh_sd_log_testv>
   d4550:	4604      	mov	r4, r0
                igh_append_test_status(ret);
   d4552:	f7ff fe01 	bl	d4158 <_ZL22igh_append_test_statush>
                break; 
   d4556:	e64a      	b.n	d41ee <_Z22igh_process_serial_cmdv+0x42>

            case test_rfm69:
                igh_log_print(F("\nTesting Radio:"));
   d4558:	491b      	ldr	r1, [pc, #108]	; (d45c8 <_Z22igh_process_serial_cmdv+0x41c>)
   d455a:	a804      	add	r0, sp, #16
   d455c:	f003 fcfb 	bl	d7f56 <_ZN6StringC1EPK19__FlashStringHelper>
   d4560:	a804      	add	r0, sp, #16
   d4562:	f7ff fdd4 	bl	d410e <_Z13igh_log_print6String>
   d4566:	a804      	add	r0, sp, #16
   d4568:	f003 fcae 	bl	d7ec8 <_ZN6StringD1Ev>
                test_rfm69_flag = 1;
   d456c:	4b17      	ldr	r3, [pc, #92]	; (d45cc <_Z22igh_process_serial_cmdv+0x420>)
   d456e:	2401      	movs	r4, #1
   d4570:	701c      	strb	r4, [r3, #0]
                igh_rfm69_test();
   d4572:	f000 fed9 	bl	d5328 <_Z14igh_rfm69_testv>
                ret = 1;
            break;
   d4576:	e63a      	b.n	d41ee <_Z22igh_process_serial_cmdv+0x42>

            default:
                igh_log_print(F("\nUnknown command"));
   d4578:	4915      	ldr	r1, [pc, #84]	; (d45d0 <_Z22igh_process_serial_cmdv+0x424>)
   d457a:	a804      	add	r0, sp, #16
   d457c:	f003 fceb 	bl	d7f56 <_ZN6StringC1EPK19__FlashStringHelper>
   d4580:	a804      	add	r0, sp, #16
   d4582:	f7ff fdc4 	bl	d410e <_Z13igh_log_print6String>
   d4586:	a804      	add	r0, sp, #16
   d4588:	f003 fc9e 	bl	d7ec8 <_ZN6StringD1Ev>
                ret = 0;
   d458c:	2400      	movs	r4, #0
                break;
   d458e:	e62e      	b.n	d41ee <_Z22igh_process_serial_cmdv+0x42>
        igh_append_test_status(ret);
        test_rfm69_flag = false;
    }

    return ret;
   d4590:	4620      	mov	r0, r4
   d4592:	b009      	add	sp, #36	; 0x24
   d4594:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4596:	bf00      	nop
   d4598:	2003dda2 	.word	0x2003dda2
   d459c:	000da0af 	.word	0x000da0af
   d45a0:	000da0c3 	.word	0x000da0c3
   d45a4:	000da0cc 	.word	0x000da0cc
   d45a8:	2003dda0 	.word	0x2003dda0
   d45ac:	2003dd98 	.word	0x2003dd98
   d45b0:	2003dd9c 	.word	0x2003dd9c
   d45b4:	000da0dd 	.word	0x000da0dd
   d45b8:	2003dda3 	.word	0x2003dda3
   d45bc:	2003dda4 	.word	0x2003dda4
   d45c0:	2003dda1 	.word	0x2003dda1
   d45c4:	000da0ed 	.word	0x000da0ed
   d45c8:	000da0ff 	.word	0x000da0ff
   d45cc:	2003dda8 	.word	0x2003dda8
   d45d0:	000da10f 	.word	0x000da10f

000d45d4 <_GLOBAL__sub_I_test_valve_flag>:
   d45d4:	b510      	push	{r4, lr}
static void print_cmd_options(void);
static void igh_append_test_status(uint8_t _status);

uint8_t test_rfm69_flag = 0;

String IGH_ID;
   d45d6:	4c07      	ldr	r4, [pc, #28]	; (d45f4 <_GLOBAL__sub_I_test_valve_flag+0x20>)
   d45d8:	f002 ff76 	bl	d74c8 <HAL_Pin_Map>
   d45dc:	4906      	ldr	r1, [pc, #24]	; (d45f8 <_GLOBAL__sub_I_test_valve_flag+0x24>)
   d45de:	4620      	mov	r0, r4
   d45e0:	f003 fcb9 	bl	d7f56 <_ZN6StringC1EPK19__FlashStringHelper>
   d45e4:	4620      	mov	r0, r4
   d45e6:	4a05      	ldr	r2, [pc, #20]	; (d45fc <_GLOBAL__sub_I_test_valve_flag+0x28>)
   d45e8:	4905      	ldr	r1, [pc, #20]	; (d4600 <_GLOBAL__sub_I_test_valve_flag+0x2c>)
        igh_append_test_status(ret);
        test_rfm69_flag = false;
    }

    return ret;
   d45ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void print_cmd_options(void);
static void igh_append_test_status(uint8_t _status);

uint8_t test_rfm69_flag = 0;

String IGH_ID;
   d45ee:	f004 be09 	b.w	d9204 <__aeabi_atexit>
   d45f2:	bf00      	nop
   d45f4:	2003dd88 	.word	0x2003dd88
   d45f8:	000da3fd 	.word	0x000da3fd
   d45fc:	2003dd80 	.word	0x2003dd80
   d4600:	000d7ec9 	.word	0x000d7ec9

000d4604 <_Z24igh_eeprom_update_errorsm>:
 * \brief Save errors bit field
 * \param error_bit_field: error bit field
 * \return void
 */
void igh_eeprom_update_errors(uint32_t error_bit_field)
{
   d4604:	b513      	push	{r0, r1, r4, lr}
   d4606:	ac02      	add	r4, sp, #8
   d4608:	f844 0d04 	str.w	r0, [r4, #-4]!
    EEPROM.put(SYSTEM_ERRORS_ADDRESS, error_bit_field);
   d460c:	f004 fd66 	bl	d90dc <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4610:	2204      	movs	r2, #4
   d4612:	4621      	mov	r1, r4
   d4614:	f44f 6080 	mov.w	r0, #1024	; 0x400
   d4618:	f003 f836 	bl	d7688 <HAL_EEPROM_Put>
}
   d461c:	b002      	add	sp, #8
   d461e:	bd10      	pop	{r4, pc}

000d4620 <_Z31igh_eeprom_read_system_settingsP15system_settings>:
 * \brief Gets system settings from eeprom emulator
 * \param running_system_settings_buffer: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_system_settings(system_settings * running_system_settings_buffer)
{
   d4620:	b530      	push	{r4, r5, lr}
   d4622:	b091      	sub	sp, #68	; 0x44
  system_settings local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d4624:	223c      	movs	r2, #60	; 0x3c
   d4626:	2100      	movs	r1, #0
 * \brief Gets system settings from eeprom emulator
 * \param running_system_settings_buffer: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_system_settings(system_settings * running_system_settings_buffer)
{
   d4628:	4605      	mov	r5, r0
  system_settings local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d462a:	a801      	add	r0, sp, #4
   d462c:	f005 fc7c 	bl	d9f28 <memset>
  EEPROM.get(SYSTEM_SETTINGS_ADDRESS, local_buffer);
   d4630:	f004 fd54 	bl	d90dc <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4634:	223c      	movs	r2, #60	; 0x3c
   d4636:	a901      	add	r1, sp, #4
   d4638:	2000      	movs	r0, #0
   d463a:	f003 f81d 	bl	d7678 <HAL_EEPROM_Get>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));
   d463e:	213c      	movs	r1, #60	; 0x3c
   d4640:	a801      	add	r0, sp, #4
   d4642:	f7ff fd34 	bl	d40ae <igh_settings_calculate_checksum>

  if( checksum != local_buffer.checksum)
   d4646:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d464a:	4283      	cmp	r3, r0
   d464c:	d10c      	bne.n	d4668 <_Z31igh_eeprom_read_system_settingsP15system_settings+0x48>
  {
    return 0;
  }

  *running_system_settings_buffer = local_buffer;
   d464e:	ac01      	add	r4, sp, #4
   d4650:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4652:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4654:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4656:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4658:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d465a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d465c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   d4660:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  return 1;
   d4664:	2001      	movs	r0, #1
   d4666:	e000      	b.n	d466a <_Z31igh_eeprom_read_system_settingsP15system_settings+0x4a>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));

  if( checksum != local_buffer.checksum)
  {
    return 0;
   d4668:	2000      	movs	r0, #0
  }

  *running_system_settings_buffer = local_buffer;
  return 1;

}
   d466a:	b011      	add	sp, #68	; 0x44
   d466c:	bd30      	pop	{r4, r5, pc}

000d466e <_Z31igh_eeprom_save_system_settingsP15system_settings>:
 * \brief Save system settings  to eeprom emulator
 * \param settings_to_save: pointer to struct to save
 * \return true or false based on write success
 */
uint8_t igh_eeprom_save_system_settings(system_settings * settings_to_save)
{
   d466e:	b510      	push	{r4, lr}
   d4670:	4604      	mov	r4, r0
   d4672:	b090      	sub	sp, #64	; 0x40
  system_settings local_buffer;
  // save the data
  EEPROM.put(SYSTEM_SETTINGS_ADDRESS, *settings_to_save);
   d4674:	f004 fd32 	bl	d90dc <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4678:	223c      	movs	r2, #60	; 0x3c
   d467a:	4621      	mov	r1, r4
   d467c:	2000      	movs	r0, #0
   d467e:	f003 f803 	bl	d7688 <HAL_EEPROM_Put>
  // check if data is saved
  igh_eeprom_read_system_settings(&local_buffer);
   d4682:	a801      	add	r0, sp, #4
   d4684:	f7ff ffcc 	bl	d4620 <_Z31igh_eeprom_read_system_settingsP15system_settings>

  if( local_buffer.checksum != (settings_to_save->checksum))
  {
    return 0;
   d4688:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d468c:	7823      	ldrb	r3, [r4, #0]
  }

  return 1;
}
   d468e:	1ac3      	subs	r3, r0, r3
   d4690:	4258      	negs	r0, r3
   d4692:	4158      	adcs	r0, r3
   d4694:	b010      	add	sp, #64	; 0x40
   d4696:	bd10      	pop	{r4, pc}

000d4698 <_Z34igh_eeprom_read_threshold_settingsP10thresholds>:
 * \brief Gets threshold settings from eeprom emulator
 * \param running_thresholds: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_threshold_settings(thresholds * running_thresholds)
{
   d4698:	b530      	push	{r4, r5, lr}
   d469a:	b08f      	sub	sp, #60	; 0x3c
  thresholds local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d469c:	2234      	movs	r2, #52	; 0x34
   d469e:	2100      	movs	r1, #0
 * \brief Gets threshold settings from eeprom emulator
 * \param running_thresholds: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_threshold_settings(thresholds * running_thresholds)
{
   d46a0:	4605      	mov	r5, r0
  thresholds local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d46a2:	a801      	add	r0, sp, #4
   d46a4:	f005 fc40 	bl	d9f28 <memset>
  EEPROM.get(SYSTEM_THRESHOLDS_ADDRESS, local_buffer);
   d46a8:	f004 fd18 	bl	d90dc <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d46ac:	2234      	movs	r2, #52	; 0x34
   d46ae:	a901      	add	r1, sp, #4
   d46b0:	f44f 7000 	mov.w	r0, #512	; 0x200
   d46b4:	f002 ffe0 	bl	d7678 <HAL_EEPROM_Get>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));
   d46b8:	2134      	movs	r1, #52	; 0x34
   d46ba:	a801      	add	r0, sp, #4
   d46bc:	f7ff fcf7 	bl	d40ae <igh_settings_calculate_checksum>
  
  if( checksum != local_buffer.checksum)
   d46c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d46c4:	4283      	cmp	r3, r0
   d46c6:	d10a      	bne.n	d46de <_Z34igh_eeprom_read_threshold_settingsP10thresholds+0x46>
  {
    return 0;
  }
  
  *running_thresholds = local_buffer;
   d46c8:	ac01      	add	r4, sp, #4
   d46ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d46cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d46ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d46d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d46d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d46d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d46d6:	6823      	ldr	r3, [r4, #0]
   d46d8:	602b      	str	r3, [r5, #0]
  return 1;
   d46da:	2001      	movs	r0, #1
   d46dc:	e000      	b.n	d46e0 <_Z34igh_eeprom_read_threshold_settingsP10thresholds+0x48>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));
  
  if( checksum != local_buffer.checksum)
  {
    return 0;
   d46de:	2000      	movs	r0, #0
  }
  
  *running_thresholds = local_buffer;
  return 1;
}
   d46e0:	b00f      	add	sp, #60	; 0x3c
   d46e2:	bd30      	pop	{r4, r5, pc}

000d46e4 <_Z34igh_eeprom_save_threshold_settingsP10thresholds>:
 * \brief Save threshold settings  to eeprom emulator
 * \param settings_to_save: pointer to struct to save
 * \return true or false based on write success
 */
uint8_t igh_eeprom_save_threshold_settings(thresholds * settings_to_save)
{
   d46e4:	b510      	push	{r4, lr}
   d46e6:	4604      	mov	r4, r0
   d46e8:	b08e      	sub	sp, #56	; 0x38
    thresholds local_buffer;
    // save the data
    EEPROM.put(SYSTEM_THRESHOLDS_ADDRESS, *settings_to_save);
   d46ea:	f004 fcf7 	bl	d90dc <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d46ee:	2234      	movs	r2, #52	; 0x34
   d46f0:	4621      	mov	r1, r4
   d46f2:	f44f 7000 	mov.w	r0, #512	; 0x200
   d46f6:	f002 ffc7 	bl	d7688 <HAL_EEPROM_Put>
    // check if data is saved
    igh_eeprom_read_threshold_settings(&local_buffer);
   d46fa:	a801      	add	r0, sp, #4
   d46fc:	f7ff ffcc 	bl	d4698 <_Z34igh_eeprom_read_threshold_settingsP10thresholds>

    if( local_buffer.checksum != (settings_to_save->checksum))
    {
        return 0;
   d4700:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d4704:	7823      	ldrb	r3, [r4, #0]
    }

    return 1;
}
   d4706:	1ac3      	subs	r3, r0, r3
   d4708:	4258      	negs	r0, r3
   d470a:	4158      	adcs	r0, r3
   d470c:	b00e      	add	sp, #56	; 0x38
   d470e:	bd10      	pop	{r4, pc}

000d4710 <_Z21igh_eeprom_get_errorsPm>:
 * \brief Gets errors stored in eeprom
 * \param error_bit_field; uint32 bit fiel to populate
 * \return void
 */
void igh_eeprom_get_errors(uint32_t * error_bit_field)
{
   d4710:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t _error = 0;
   d4712:	ac02      	add	r4, sp, #8
   d4714:	2300      	movs	r3, #0
   d4716:	f844 3d04 	str.w	r3, [r4, #-4]!
 * \brief Gets errors stored in eeprom
 * \param error_bit_field; uint32 bit fiel to populate
 * \return void
 */
void igh_eeprom_get_errors(uint32_t * error_bit_field)
{
   d471a:	4605      	mov	r5, r0
    uint32_t _error = 0;
    EEPROM.get(SYSTEM_ERRORS_ADDRESS, _error);
   d471c:	f004 fcde 	bl	d90dc <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4720:	2204      	movs	r2, #4
   d4722:	4621      	mov	r1, r4
   d4724:	f44f 6080 	mov.w	r0, #1024	; 0x400
   d4728:	f002 ffa6 	bl	d7678 <HAL_EEPROM_Get>
    *error_bit_field = _error;
   d472c:	9b01      	ldr	r3, [sp, #4]
   d472e:	602b      	str	r3, [r5, #0]
}
   d4730:	b003      	add	sp, #12
   d4732:	bd30      	pop	{r4, r5, pc}

000d4734 <_Z16igh_eeproom_testv>:
 * \brief Tests that we can read and write to the EEPROM just fine
 * \param void
 * \return true or false
 */
uint8_t igh_eeproom_test(void)
{
   d4734:	b5f0      	push	{r4, r5, r6, r7, lr}
    thresholds test_thresholds;
    system_settings test_system_settings;

    uint8_t test_shield_id[12] = {0xe0,0x0f,0xce,0x68,0x9a,0x75,0x47,0x05,0xe7,0x9a,0x0e,0x37};
   d4736:	4a42      	ldr	r2, [pc, #264]	; (d4840 <_Z16igh_eeproom_testv+0x10c>)
 * \brief Tests that we can read and write to the EEPROM just fine
 * \param void
 * \return true or false
 */
uint8_t igh_eeproom_test(void)
{
   d4738:	b0a5      	sub	sp, #148	; 0x94
    thresholds test_thresholds;
    system_settings test_system_settings;

    uint8_t test_shield_id[12] = {0xe0,0x0f,0xce,0x68,0x9a,0x75,0x47,0x05,0xe7,0x9a,0x0e,0x37};
   d473a:	6810      	ldr	r0, [r2, #0]
   d473c:	6851      	ldr	r1, [r2, #4]
   d473e:	ab01      	add	r3, sp, #4
   d4740:	c303      	stmia	r3!, {r0, r1}
   d4742:	6890      	ldr	r0, [r2, #8]
   d4744:	6018      	str	r0, [r3, #0]
    uint8_t test_broker[] = "test.broker.com";
   d4746:	4b3f      	ldr	r3, [pc, #252]	; (d4844 <_Z16igh_eeproom_testv+0x110>)
   d4748:	aa04      	add	r2, sp, #16
   d474a:	f103 0710 	add.w	r7, r3, #16
   d474e:	ae01      	add	r6, sp, #4
   d4750:	4615      	mov	r5, r2
   d4752:	6818      	ldr	r0, [r3, #0]
   d4754:	6859      	ldr	r1, [r3, #4]
   d4756:	4614      	mov	r4, r2
   d4758:	c403      	stmia	r4!, {r0, r1}
   d475a:	3308      	adds	r3, #8
   d475c:	42bb      	cmp	r3, r7
   d475e:	4622      	mov	r2, r4
   d4760:	d1f7      	bne.n	d4752 <_Z16igh_eeproom_testv+0x1e>

    memset(&test_system_settings, 0, sizeof(test_system_settings));
   d4762:	223c      	movs	r2, #60	; 0x3c
   d4764:	2100      	movs	r1, #0
   d4766:	a815      	add	r0, sp, #84	; 0x54
   d4768:	f005 fbde 	bl	d9f28 <memset>
    memset(&test_thresholds, 0, sizeof(test_thresholds));
   d476c:	2234      	movs	r2, #52	; 0x34
   d476e:	2100      	movs	r1, #0
   d4770:	a808      	add	r0, sp, #32
   d4772:	f005 fbd9 	bl	d9f28 <memset>

    memcpy(test_system_settings.serial_number, test_shield_id, 12);
   d4776:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   d477a:	ab18      	add	r3, sp, #96	; 0x60
   d477c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    memcpy(test_system_settings.broker, test_broker, sizeof(test_broker));
   d4780:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   d4784:	ac1b      	add	r4, sp, #108	; 0x6c
   d4786:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    test_system_settings.op_state = OP_INACTIVE;
    test_system_settings.reporting_interval = 0x11111111;
   d478a:	f04f 3511 	mov.w	r5, #286331153	; 0x11111111
    test_system_settings.data_resolution = 0x11111111;
    test_system_settings.broker_port = 0x1111;
   d478e:	f241 1411 	movw	r4, #4369	; 0x1111
    test_system_settings.checksum = igh_settings_calculate_checksum(&test_system_settings, sizeof(test_system_settings));
   d4792:	213c      	movs	r1, #60	; 0x3c
   d4794:	a815      	add	r0, sp, #84	; 0x54
    memcpy(test_system_settings.serial_number, test_shield_id, 12);
    memcpy(test_system_settings.broker, test_broker, sizeof(test_broker));
    test_system_settings.op_state = OP_INACTIVE;
    test_system_settings.reporting_interval = 0x11111111;
    test_system_settings.data_resolution = 0x11111111;
    test_system_settings.broker_port = 0x1111;
   d4796:	f8ad 408c 	strh.w	r4, [sp, #140]	; 0x8c
    memset(&test_thresholds, 0, sizeof(test_thresholds));

    memcpy(test_system_settings.serial_number, test_shield_id, 12);
    memcpy(test_system_settings.broker, test_broker, sizeof(test_broker));
    test_system_settings.op_state = OP_INACTIVE;
    test_system_settings.reporting_interval = 0x11111111;
   d479a:	9516      	str	r5, [sp, #88]	; 0x58
    test_system_settings.data_resolution = 0x11111111;
   d479c:	9517      	str	r5, [sp, #92]	; 0x5c
    test_system_settings.broker_port = 0x1111;
    test_system_settings.checksum = igh_settings_calculate_checksum(&test_system_settings, sizeof(test_system_settings));
   d479e:	f7ff fc86 	bl	d40ae <igh_settings_calculate_checksum>
    test_thresholds.shield_battery_level_high = 0x1111;
    test_thresholds.spear_battery_level_low = 0x1111;
    test_thresholds.spear_battery_level_high = 0x1111;
    test_thresholds.water_dispensed_period_high = 0x11111111;
    test_thresholds.water_dispensed_period_low = 0x11111111;
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));
   d47a2:	2134      	movs	r1, #52	; 0x34
    memcpy(test_system_settings.broker, test_broker, sizeof(test_broker));
    test_system_settings.op_state = OP_INACTIVE;
    test_system_settings.reporting_interval = 0x11111111;
    test_system_settings.data_resolution = 0x11111111;
    test_system_settings.broker_port = 0x1111;
    test_system_settings.checksum = igh_settings_calculate_checksum(&test_system_settings, sizeof(test_system_settings));
   d47a4:	f88d 0054 	strb.w	r0, [sp, #84]	; 0x54
    test_thresholds.shield_battery_level_high = 0x1111;
    test_thresholds.spear_battery_level_low = 0x1111;
    test_thresholds.spear_battery_level_high = 0x1111;
    test_thresholds.water_dispensed_period_high = 0x11111111;
    test_thresholds.water_dispensed_period_low = 0x11111111;
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));
   d47a8:	a808      	add	r0, sp, #32
    test_system_settings.reporting_interval = 0x11111111;
    test_system_settings.data_resolution = 0x11111111;
    test_system_settings.broker_port = 0x1111;
    test_system_settings.checksum = igh_settings_calculate_checksum(&test_system_settings, sizeof(test_system_settings));

    test_thresholds.soil_moisture_low = 0x1111;
   d47aa:	f8ad 4022 	strh.w	r4, [sp, #34]	; 0x22
    test_thresholds.soil_moisture_high = 0x1111;
   d47ae:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    test_thresholds.air_humidity_low = 0x1111;
   d47b2:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
    test_thresholds.air_humidity_high = 0x1111;
   d47b6:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
    test_thresholds.soil_humidity_low = 0x1111;
   d47ba:	f8ad 4026 	strh.w	r4, [sp, #38]	; 0x26
    test_thresholds.soil_humidity_high = 0x1111;
   d47be:	f8ad 4040 	strh.w	r4, [sp, #64]	; 0x40
    test_thresholds.carbon_dioxide_low = 0x1111;
   d47c2:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
    test_thresholds.carbon_dioxide_high = 0x1111;
   d47c6:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
    test_thresholds.air_temperature_low = 0x1111;
   d47ca:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
    test_thresholds.air_temperature_high = 0x1111;
   d47ce:	f8ad 4044 	strh.w	r4, [sp, #68]	; 0x44
    test_thresholds.soil_temperature_low = 0x1111;
   d47d2:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
    test_thresholds.soil_temperature_high = 0x1111;
   d47d6:	f8ad 4046 	strh.w	r4, [sp, #70]	; 0x46
    test_thresholds.soil_npk_low = 0x1111;
   d47da:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    test_thresholds.soil_npk_high = 0x1111;
   d47de:	f8ad 4048 	strh.w	r4, [sp, #72]	; 0x48
    test_thresholds.light_intensity_high = 0x1111;
   d47e2:	f8ad 404a 	strh.w	r4, [sp, #74]	; 0x4a
    test_thresholds.light_intensity_low = 0x1111;
   d47e6:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
    test_thresholds.shield_battery_level_low = 0x1111;
   d47ea:	f8ad 4032 	strh.w	r4, [sp, #50]	; 0x32
    test_thresholds.shield_battery_level_high = 0x1111;
   d47ee:	f8ad 404c 	strh.w	r4, [sp, #76]	; 0x4c
    test_thresholds.spear_battery_level_low = 0x1111;
   d47f2:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    test_thresholds.spear_battery_level_high = 0x1111;
   d47f6:	f8ad 404e 	strh.w	r4, [sp, #78]	; 0x4e
    test_thresholds.water_dispensed_period_high = 0x11111111;
   d47fa:	9514      	str	r5, [sp, #80]	; 0x50
    test_thresholds.water_dispensed_period_low = 0x11111111;
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));

    uint32_t test_error = 0xAAAAAAAA;
    uint32_t ret_test_error = 0;
   d47fc:	ac24      	add	r4, sp, #144	; 0x90
    test_thresholds.shield_battery_level_low = 0x1111;
    test_thresholds.shield_battery_level_high = 0x1111;
    test_thresholds.spear_battery_level_low = 0x1111;
    test_thresholds.spear_battery_level_high = 0x1111;
    test_thresholds.water_dispensed_period_high = 0x11111111;
    test_thresholds.water_dispensed_period_low = 0x11111111;
   d47fe:	950e      	str	r5, [sp, #56]	; 0x38
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));
   d4800:	f7ff fc55 	bl	d40ae <igh_settings_calculate_checksum>

    uint32_t test_error = 0xAAAAAAAA;
    uint32_t ret_test_error = 0;
   d4804:	2300      	movs	r3, #0
   d4806:	f844 3d90 	str.w	r3, [r4, #-144]!
    test_thresholds.shield_battery_level_high = 0x1111;
    test_thresholds.spear_battery_level_low = 0x1111;
    test_thresholds.spear_battery_level_high = 0x1111;
    test_thresholds.water_dispensed_period_high = 0x11111111;
    test_thresholds.water_dispensed_period_low = 0x11111111;
    test_thresholds.checksum = igh_settings_calculate_checksum(&test_thresholds, sizeof(test_thresholds));
   d480a:	f88d 0020 	strb.w	r0, [sp, #32]

    uint32_t test_error = 0xAAAAAAAA;
    uint32_t ret_test_error = 0;
    igh_eeprom_update_errors(test_error);
   d480e:	f04f 30aa 	mov.w	r0, #2863311530	; 0xaaaaaaaa
   d4812:	f7ff fef7 	bl	d4604 <_Z24igh_eeprom_update_errorsm>
    igh_eeprom_get_errors(&ret_test_error);
   d4816:	4620      	mov	r0, r4
   d4818:	f7ff ff7a 	bl	d4710 <_Z21igh_eeprom_get_errorsPm>

    return igh_eeprom_save_system_settings(&test_system_settings)
   d481c:	a815      	add	r0, sp, #84	; 0x54
   d481e:	f7ff ff26 	bl	d466e <_Z31igh_eeprom_save_system_settingsP15system_settings>
           && igh_eeprom_save_threshold_settings(&test_thresholds)
           && (ret_test_error == test_error);
   d4822:	b908      	cbnz	r0, d4828 <_Z16igh_eeproom_testv+0xf4>
   d4824:	2000      	movs	r0, #0
   d4826:	e009      	b.n	d483c <_Z16igh_eeproom_testv+0x108>
    uint32_t ret_test_error = 0;
    igh_eeprom_update_errors(test_error);
    igh_eeprom_get_errors(&ret_test_error);

    return igh_eeprom_save_system_settings(&test_system_settings)
           && igh_eeprom_save_threshold_settings(&test_thresholds)
   d4828:	a808      	add	r0, sp, #32
   d482a:	f7ff ff5b 	bl	d46e4 <_Z34igh_eeprom_save_threshold_settingsP10thresholds>
   d482e:	2800      	cmp	r0, #0
   d4830:	d0f8      	beq.n	d4824 <_Z16igh_eeproom_testv+0xf0>
           && (ret_test_error == test_error);
   d4832:	9800      	ldr	r0, [sp, #0]
   d4834:	f1a0 33aa 	sub.w	r3, r0, #2863311530	; 0xaaaaaaaa
   d4838:	4258      	negs	r0, r3
   d483a:	4158      	adcs	r0, r3
}
   d483c:	b025      	add	sp, #148	; 0x94
   d483e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4840:	000da180 	.word	0x000da180
   d4844:	000da18c 	.word	0x000da18c

000d4848 <_GLOBAL__sub_I__Z31igh_eeprom_save_system_settingsP15system_settings>:
   d4848:	f002 be3e 	b.w	d74c8 <HAL_Pin_Map>

000d484c <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d484c:	6803      	ldr	r3, [r0, #0]
   d484e:	4718      	bx	r3

000d4850 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4850:	2a01      	cmp	r2, #1
   d4852:	d002      	beq.n	d485a <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d4854:	2a02      	cmp	r2, #2
   d4856:	d002      	beq.n	d485e <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d4858:	e004      	b.n	d4864 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d485a:	6001      	str	r1, [r0, #0]
	      break;
   d485c:	e002      	b.n	d4864 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d485e:	680b      	ldr	r3, [r1, #0]
   d4860:	b100      	cbz	r0, d4864 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d4862:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4864:	2000      	movs	r0, #0
   d4866:	4770      	bx	lr

000d4868 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d4868:	6943      	ldr	r3, [r0, #20]
   d486a:	b113      	cbz	r3, d4872 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d486c:	6983      	ldr	r3, [r0, #24]
   d486e:	300c      	adds	r0, #12
   d4870:	4718      	bx	r3
   d4872:	4770      	bx	lr

000d4874 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4874:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4876:	2100      	movs	r1, #0
   d4878:	4604      	mov	r4, r0
   d487a:	4608      	mov	r0, r1
   d487c:	f002 ff34 	bl	d76e8 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4880:	a902      	add	r1, sp, #8
   d4882:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4884:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4886:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d488a:	f002 ff45 	bl	d7718 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d488e:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4890:	b10c      	cbz	r4, d4896 <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d4892:	2301      	movs	r3, #1
   d4894:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4896:	2100      	movs	r1, #0
   d4898:	2001      	movs	r0, #1
   d489a:	f002 ff25 	bl	d76e8 <os_thread_scheduling>
            }
        }
        if (t) {
   d489e:	b12c      	cbz	r4, d48ac <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d48a0:	6823      	ldr	r3, [r4, #0]
   d48a2:	4620      	mov	r0, r4
   d48a4:	689b      	ldr	r3, [r3, #8]
   d48a6:	4798      	blx	r3
            t->running = false;
   d48a8:	2300      	movs	r3, #0
   d48aa:	7123      	strb	r3, [r4, #4]
        }
    }
   d48ac:	b002      	add	sp, #8
   d48ae:	bd10      	pop	{r4, pc}

000d48b0 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d48b0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d48b2:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d48b4:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d48b6:	b113      	cbz	r3, d48be <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d48b8:	2203      	movs	r2, #3
   d48ba:	4601      	mov	r1, r0
   d48bc:	4798      	blx	r3
    }
   d48be:	4620      	mov	r0, r4
   d48c0:	bd10      	pop	{r4, pc}

000d48c2 <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d48c2:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d48c4:	6880      	ldr	r0, [r0, #8]
   d48c6:	2300      	movs	r3, #0
   d48c8:	b138      	cbz	r0, d48da <_ZN5Timer5_stopEjb+0x18>
   d48ca:	e88d 000a 	stmia.w	sp, {r1, r3}
   d48ce:	2102      	movs	r1, #2
   d48d0:	f002 ff2a 	bl	d7728 <os_timer_change>
   d48d4:	fab0 f080 	clz	r0, r0
   d48d8:	0940      	lsrs	r0, r0, #5
    }
   d48da:	b003      	add	sp, #12
   d48dc:	f85d fb04 	ldr.w	pc, [sp], #4

000d48e0 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d48e0:	b538      	push	{r3, r4, r5, lr}
   d48e2:	4b10      	ldr	r3, [pc, #64]	; (d4924 <_ZN5TimerD1Ev+0x44>)
   d48e4:	6003      	str	r3, [r0, #0]
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d48e6:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d48e8:	4604      	mov	r4, r0
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d48ea:	b1a3      	cbz	r3, d4916 <_ZN5TimerD1Ev+0x36>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d48ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d48f0:	2200      	movs	r2, #0
   d48f2:	f7ff ffe6 	bl	d48c2 <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d48f6:	2100      	movs	r1, #0
   d48f8:	68a0      	ldr	r0, [r4, #8]
   d48fa:	f002 ff2d 	bl	d7758 <os_timer_set_id>
            while (running) {
   d48fe:	7923      	ldrb	r3, [r4, #4]
   d4900:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d4904:	b113      	cbz	r3, d490c <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d4906:	f002 fed7 	bl	d76b8 <os_thread_yield>
   d490a:	e7f8      	b.n	d48fe <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d490c:	4629      	mov	r1, r5
   d490e:	68a0      	ldr	r0, [r4, #8]
   d4910:	f002 fefa 	bl	d7708 <os_timer_destroy>
            handle = nullptr;
   d4914:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4916:	f104 000c 	add.w	r0, r4, #12
   d491a:	f7ff ffc9 	bl	d48b0 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d491e:	4620      	mov	r0, r4
   d4920:	bd38      	pop	{r3, r4, r5, pc}
   d4922:	bf00      	nop
   d4924:	000da1a4 	.word	0x000da1a4

000d4928 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4928:	b510      	push	{r4, lr}
   d492a:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d492c:	f7ff ffd8 	bl	d48e0 <_ZN5TimerD1Ev>
   d4930:	4620      	mov	r0, r4
   d4932:	211c      	movs	r1, #28
   d4934:	f004 fc74 	bl	d9220 <_ZdlPvj>
   d4938:	4620      	mov	r0, r4
   d493a:	bd10      	pop	{r4, pc}

000d493c <_Z32igh_hardware_service_valve_statev>:
    current_valve_position = VALVE_CLOSE;
}

void igh_hardware_service_valve_state(void)
{
    digitalWrite(IGH_IRRIGATION_VALVE, current_valve_position);
   d493c:	4b02      	ldr	r3, [pc, #8]	; (d4948 <_Z32igh_hardware_service_valve_statev+0xc>)
   d493e:	2007      	movs	r0, #7
   d4940:	7819      	ldrb	r1, [r3, #0]
   d4942:	f004 bb9e 	b.w	d9082 <digitalWrite>
   d4946:	bf00      	nop
   d4948:	2003dda9 	.word	0x2003dda9

000d494c <_Z20igh_hardware_servicev>:
    igh_hardware_vlave_setup();
}

void igh_hardware_service(void)
{
    igh_hardware_service_valve_state();
   d494c:	f7ff bff6 	b.w	d493c <_Z32igh_hardware_service_valve_statev>

000d4950 <_Z29igh_hardware_test_valve_statev>:
{
    digitalWrite(IGH_IRRIGATION_VALVE, current_valve_position);
}

uint8_t igh_hardware_test_valve_state(void)
{
   d4950:	b508      	push	{r3, lr}
    return digitalRead(IGH_IRRIGATION_VALVE);
   d4952:	2007      	movs	r0, #7
   d4954:	f004 fbae 	bl	d90b4 <digitalRead>
}
   d4958:	b2c0      	uxtb	r0, r0
   d495a:	bd08      	pop	{r3, pc}

000d495c <_Z26igh_boron_toggle_boron_ledh>:


/* Onboard LED APIs */
void igh_boron_toggle_boron_led(uint8_t _state)
{
    digitalWrite(BORON_LED, _state);
   d495c:	4601      	mov	r1, r0
   d495e:	2007      	movs	r0, #7
   d4960:	f004 bb8f 	b.w	d9082 <digitalWrite>

000d4964 <_Z18igh_hardware_setupv>:
static void igh_hardware_irrigiation_button_setup(void);
static void igh_hardware_onboard_led_setup(void);
static void igh_hardware_vlave_setup(void);

void igh_hardware_setup(void)
{
   d4964:	b513      	push	{r0, r1, r4, lr}


/* Button APIs */
static void igh_hardware_irrigiation_button_setup(void)
{
    pinMode(IGH_IRRIGATION_BUTTON, INPUT_PULLUP);
   d4966:	2102      	movs	r1, #2
   d4968:	200f      	movs	r0, #15
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d496a:	4c12      	ldr	r4, [pc, #72]	; (d49b4 <_Z18igh_hardware_setupv+0x50>)
   d496c:	f004 fb78 	bl	d9060 <pinMode>
   d4970:	2200      	movs	r2, #0
   d4972:	4611      	mov	r1, r2
   d4974:	4620      	mov	r0, r4
   d4976:	f7ff ffa4 	bl	d48c2 <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d497a:	68a0      	ldr	r0, [r4, #8]
   d497c:	b140      	cbz	r0, d4990 <_Z18igh_hardware_setupv+0x2c>
   d497e:	2300      	movs	r3, #0
   d4980:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d4984:	e88d 000c 	stmia.w	sp, {r2, r3}
   d4988:	4619      	mov	r1, r3
   d498a:	461a      	mov	r2, r3
   d498c:	f002 fecc 	bl	d7728 <os_timer_change>
    igh_button_timer.start();
    igh_button_sec_counter = 0;
   d4990:	4b09      	ldr	r3, [pc, #36]	; (d49b8 <_Z18igh_hardware_setupv+0x54>)
   d4992:	2400      	movs	r4, #0
    digitalWrite(BORON_LED, _state);
}

static void igh_hardware_onboard_led_setup(void)
{
    pinMode(BORON_LED, OUTPUT);
   d4994:	2101      	movs	r1, #1
   d4996:	2007      	movs	r0, #7
/* Button APIs */
static void igh_hardware_irrigiation_button_setup(void)
{
    pinMode(IGH_IRRIGATION_BUTTON, INPUT_PULLUP);
    igh_button_timer.start();
    igh_button_sec_counter = 0;
   d4998:	701c      	strb	r4, [r3, #0]
    digitalWrite(BORON_LED, _state);
}

static void igh_hardware_onboard_led_setup(void)
{
    pinMode(BORON_LED, OUTPUT);
   d499a:	f004 fb61 	bl	d9060 <pinMode>
    igh_boron_toggle_boron_led(OFF);
   d499e:	4620      	mov	r0, r4
   d49a0:	f7ff ffdc 	bl	d495c <_Z26igh_boron_toggle_boron_ledh>


/* Valve control APIs */
static void igh_hardware_vlave_setup(void)
{
    pinMode(IGH_IRRIGATION_VALVE, OUTPUT);
   d49a4:	2101      	movs	r1, #1
   d49a6:	2007      	movs	r0, #7
   d49a8:	f004 fb5a 	bl	d9060 <pinMode>
    current_valve_position = VALVE_CLOSE;
   d49ac:	4b03      	ldr	r3, [pc, #12]	; (d49bc <_Z18igh_hardware_setupv+0x58>)
   d49ae:	701c      	strb	r4, [r3, #0]
void igh_hardware_setup(void)
{
    igh_hardware_irrigiation_button_setup();
    igh_hardware_onboard_led_setup();
    igh_hardware_vlave_setup();
}
   d49b0:	b002      	add	sp, #8
   d49b2:	bd10      	pop	{r4, pc}
   d49b4:	2003ddac 	.word	0x2003ddac
   d49b8:	2003ddaa 	.word	0x2003ddaa
   d49bc:	2003dda9 	.word	0x2003dda9

000d49c0 <_Z21igh_boron_read_buttonv>:
    igh_button_timer.start();
    igh_button_sec_counter = 0;
}

uint8_t igh_boron_read_button(void)
{
   d49c0:	b508      	push	{r3, lr}
    return digitalRead(IGH_IRRIGATION_BUTTON);
   d49c2:	200f      	movs	r0, #15
   d49c4:	f004 fb76 	bl	d90b4 <digitalRead>
}
   d49c8:	b2c0      	uxtb	r0, r0
   d49ca:	bd08      	pop	{r3, pc}

000d49cc <_Z31igh_boron_button_press_durationv>:

void igh_boron_button_press_duration(void)
{
   d49cc:	b508      	push	{r3, lr}
    if(!igh_boron_read_button())
   d49ce:	f7ff fff7 	bl	d49c0 <_Z21igh_boron_read_buttonv>
   d49d2:	4b04      	ldr	r3, [pc, #16]	; (d49e4 <_Z31igh_boron_button_press_durationv+0x18>)
   d49d4:	b910      	cbnz	r0, d49dc <_Z31igh_boron_button_press_durationv+0x10>
    {
        igh_button_sec_counter++;
   d49d6:	781a      	ldrb	r2, [r3, #0]
   d49d8:	3201      	adds	r2, #1
   d49da:	e000      	b.n	d49de <_Z31igh_boron_button_press_durationv+0x12>
    }
    else
    {
        igh_button_sec_counter = 0;
   d49dc:	2200      	movs	r2, #0
   d49de:	701a      	strb	r2, [r3, #0]
   d49e0:	bd08      	pop	{r3, pc}
   d49e2:	bf00      	nop
   d49e4:	2003ddaa 	.word	0x2003ddaa

000d49e8 <_GLOBAL__sub_I_igh_button_sec_counter>:
    } 
   d49e8:	b570      	push	{r4, r5, r6, lr}
   d49ea:	b088      	sub	sp, #32
   d49ec:	f002 fd6c 	bl	d74c8 <HAL_Pin_Map>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d49f0:	4b19      	ldr	r3, [pc, #100]	; (d4a58 <_GLOBAL__sub_I_igh_button_sec_counter+0x70>)
   d49f2:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d49f4:	ad04      	add	r5, sp, #16
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d49f6:	4c19      	ldr	r4, [pc, #100]	; (d4a5c <_GLOBAL__sub_I_igh_button_sec_counter+0x74>)
   d49f8:	4b19      	ldr	r3, [pc, #100]	; (d4a60 <_GLOBAL__sub_I_igh_button_sec_counter+0x78>)
   d49fa:	6023      	str	r3, [r4, #0]
   d49fc:	e895 0003 	ldmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4a00:	f104 020c 	add.w	r2, r4, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4a04:	ae02      	add	r6, sp, #8
   d4a06:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4a0a:	e892 0003 	ldmia.w	r2, {r0, r1}
   d4a0e:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4a12:	e896 0003 	ldmia.w	r6, {r0, r1}
   d4a16:	e882 0003 	stmia.w	r2, {r0, r1}
   d4a1a:	4a12      	ldr	r2, [pc, #72]	; (d4a64 <_GLOBAL__sub_I_igh_button_sec_counter+0x7c>)
   d4a1c:	6162      	str	r2, [r4, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4a1e:	69a2      	ldr	r2, [r4, #24]
   d4a20:	9207      	str	r2, [sp, #28]
   d4a22:	2300      	movs	r3, #0
      __b = _GLIBCXX_MOVE(__tmp);
   d4a24:	4a10      	ldr	r2, [pc, #64]	; (d4a68 <_GLOBAL__sub_I_igh_button_sec_counter+0x80>)
   d4a26:	7123      	strb	r3, [r4, #4]
   d4a28:	60a3      	str	r3, [r4, #8]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4a2a:	9306      	str	r3, [sp, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   d4a2c:	61a2      	str	r2, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d4a2e:	9301      	str	r3, [sp, #4]
   d4a30:	9300      	str	r3, [sp, #0]
   d4a32:	4a0e      	ldr	r2, [pc, #56]	; (d4a6c <_GLOBAL__sub_I_igh_button_sec_counter+0x84>)
   d4a34:	4623      	mov	r3, r4
   d4a36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4a3a:	f104 0008 	add.w	r0, r4, #8
   d4a3e:	f002 fe5b 	bl	d76f8 <os_timer_create>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4a42:	4628      	mov	r0, r5
   d4a44:	f7ff ff34 	bl	d48b0 <_ZNSt14_Function_baseD1Ev>
#include "Particle.h"
#include "igh_hardware.h"

// button global variables
uint8_t igh_button_sec_counter;
Timer igh_button_timer(1000, igh_boron_button_press_duration);
   d4a48:	4a09      	ldr	r2, [pc, #36]	; (d4a70 <_GLOBAL__sub_I_igh_button_sec_counter+0x88>)
   d4a4a:	490a      	ldr	r1, [pc, #40]	; (d4a74 <_GLOBAL__sub_I_igh_button_sec_counter+0x8c>)
   d4a4c:	4620      	mov	r0, r4
   d4a4e:	f004 fbd9 	bl	d9204 <__aeabi_atexit>
    }
    else
    {
        igh_button_sec_counter = 0;
    } 
   d4a52:	b008      	add	sp, #32
   d4a54:	bd70      	pop	{r4, r5, r6, pc}
   d4a56:	bf00      	nop
   d4a58:	000d49cd 	.word	0x000d49cd
   d4a5c:	2003ddac 	.word	0x2003ddac
   d4a60:	000da1a4 	.word	0x000da1a4
   d4a64:	000d4851 	.word	0x000d4851
   d4a68:	000d484d 	.word	0x000d484d
   d4a6c:	000d4875 	.word	0x000d4875
   d4a70:	2003dd80 	.word	0x2003dd80
   d4a74:	000d48e1 	.word	0x000d48e1

000d4a78 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d4a78:	7c03      	ldrb	r3, [r0, #16]
   d4a7a:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d4a7e:	4602      	mov	r2, r0
   d4a80:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d4a84:	b12b      	cbz	r3, d4a92 <_ZN4File9availableEv+0x1a>
   d4a86:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d4a88:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d4a8a:	1a18      	subs	r0, r3, r0
   d4a8c:	bf48      	it	mi
   d4a8e:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d4a92:	4770      	bx	lr

000d4a94 <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
   d4a94:	4770      	bx	lr

000d4a96 <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d4a96:	4770      	bx	lr

000d4a98 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4a98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4a9a:	4602      	mov	r2, r0
   d4a9c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4a9e:	7913      	ldrb	r3, [r2, #4]
   d4aa0:	6895      	ldr	r5, [r2, #8]
   d4aa2:	b133      	cbz	r3, d4ab2 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d4aa4:	b93d      	cbnz	r5, d4ab6 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d4aa6:	490c      	ldr	r1, [pc, #48]	; (d4ad8 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d4aa8:	b004      	add	sp, #16
   d4aaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d4aae:	f003 baf9 	b.w	d80a4 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d4ab2:	4b0a      	ldr	r3, [pc, #40]	; (d4adc <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d4ab4:	e000      	b.n	d4ab8 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d4ab6:	4b0a      	ldr	r3, [pc, #40]	; (d4ae0 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d4ab8:	7b16      	ldrb	r6, [r2, #12]
   d4aba:	4c0a      	ldr	r4, [pc, #40]	; (d4ae4 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d4abc:	490a      	ldr	r1, [pc, #40]	; (d4ae8 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4abe:	7b52      	ldrb	r2, [r2, #13]
   d4ac0:	9202      	str	r2, [sp, #8]
   d4ac2:	2e01      	cmp	r6, #1
   d4ac4:	bf08      	it	eq
   d4ac6:	4621      	moveq	r1, r4
   d4ac8:	9101      	str	r1, [sp, #4]
   d4aca:	9500      	str	r5, [sp, #0]
   d4acc:	4a07      	ldr	r2, [pc, #28]	; (d4aec <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d4ace:	2100      	movs	r1, #0
   d4ad0:	f003 fbfe 	bl	d82d0 <_ZN5Print11printf_implEbPKcz>
  }
   d4ad4:	b004      	add	sp, #16
   d4ad6:	bd70      	pop	{r4, r5, r6, pc}
   d4ad8:	000da20d 	.word	0x000da20d
   d4adc:	000da3fd 	.word	0x000da3fd
   d4ae0:	000da1fc 	.word	0x000da1fc
   d4ae4:	000da205 	.word	0x000da205
   d4ae8:	000da209 	.word	0x000da209
   d4aec:	000da223 	.word	0x000da223

000d4af0 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d4af0:	3010      	adds	r0, #16
   d4af2:	f001 ba97 	b.w	d6024 <_ZN7FatFile4syncEv>

000d4af6 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d4af6:	3010      	adds	r0, #16
   d4af8:	f001 b96e 	b.w	d5dd8 <_ZN7FatFile4peekEv>

000d4afc <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d4afc:	3010      	adds	r0, #16
   d4afe:	f001 bb31 	b.w	d6164 <_ZN7FatFile5writeEPKvj>

000d4b02 <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d4b02:	3008      	adds	r0, #8
   d4b04:	f001 bb2e 	b.w	d6164 <_ZN7FatFile5writeEPKvj>

000d4b08 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d4b08:	b507      	push	{r0, r1, r2, lr}
   d4b0a:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d4b0c:	2201      	movs	r2, #1
   d4b0e:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d4b12:	3010      	adds	r0, #16
   d4b14:	4619      	mov	r1, r3
   d4b16:	f001 fb25 	bl	d6164 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d4b1a:	b003      	add	sp, #12
   d4b1c:	f85d fb04 	ldr.w	pc, [sp], #4

000d4b20 <_ZN6SdFileD0Ev>:
   d4b20:	b510      	push	{r4, lr}
   d4b22:	212c      	movs	r1, #44	; 0x2c
   d4b24:	4604      	mov	r4, r0
   d4b26:	f004 fb7b 	bl	d9220 <_ZdlPvj>
   d4b2a:	4620      	mov	r0, r4
   d4b2c:	bd10      	pop	{r4, pc}

000d4b2e <_ZN4FileD0Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d4b2e:	b510      	push	{r4, lr}
   d4b30:	2134      	movs	r1, #52	; 0x34
   d4b32:	4604      	mov	r4, r0
   d4b34:	f004 fb74 	bl	d9220 <_ZdlPvj>
   d4b38:	4620      	mov	r0, r4
   d4b3a:	bd10      	pop	{r4, pc}

000d4b3c <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d4b3c:	b507      	push	{r0, r1, r2, lr}
   d4b3e:	ab02      	add	r3, sp, #8
   d4b40:	2201      	movs	r2, #1
   d4b42:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d4b46:	3008      	adds	r0, #8
   d4b48:	4619      	mov	r1, r3
   d4b4a:	f001 fb0b 	bl	d6164 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d4b4e:	b003      	add	sp, #12
   d4b50:	f85d fb04 	ldr.w	pc, [sp], #4

000d4b54 <_ZN7FatFile4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
   d4b54:	b507      	push	{r0, r1, r2, lr}
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d4b56:	2201      	movs	r2, #1
   d4b58:	f10d 0107 	add.w	r1, sp, #7
   d4b5c:	f001 f889 	bl	d5c72 <_ZN7FatFile4readEPvj>
   d4b60:	2801      	cmp	r0, #1
   d4b62:	bf0c      	ite	eq
   d4b64:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d4b68:	f04f 30ff 	movne.w	r0, #4294967295
  }
   d4b6c:	b003      	add	sp, #12
   d4b6e:	f85d fb04 	ldr.w	pc, [sp], #4

000d4b72 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d4b72:	b508      	push	{r3, lr}
    return FatFile::read();
   d4b74:	3010      	adds	r0, #16
   d4b76:	f7ff ffed 	bl	d4b54 <_ZN7FatFile4readEv>
  }
   d4b7a:	bd08      	pop	{r3, pc}

000d4b7c <_ZN4File15rewindDirectoryEv>:
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (isDir()) {
   d4b7c:	7c03      	ldrb	r3, [r0, #16]
   d4b7e:	f013 0f70 	tst.w	r3, #112	; 0x70
   d4b82:	d003      	beq.n	d4b8c <_ZN4File15rewindDirectoryEv+0x10>
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d4b84:	2100      	movs	r1, #0
   d4b86:	3010      	adds	r0, #16
   d4b88:	f001 b956 	b.w	d5e38 <_ZN7FatFile7seekSetEm>
   d4b8c:	4770      	bx	lr
	...

000d4b90 <_Z16igh_sd_log_setupv>:
 * convertedt to a character string
 * eg: 2E78FA2E.LOG
*/

uint8_t igh_sd_log_setup(void)
{
   d4b90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4b92:	4820      	ldr	r0, [pc, #128]	; (d4c14 <_Z16igh_sd_log_setupv+0x84>)
    if(sd_root.isOpen()) sd_root.close();
   d4b94:	7a03      	ldrb	r3, [r0, #8]
   d4b96:	b113      	cbz	r3, d4b9e <_Z16igh_sd_log_setupv+0xe>
   d4b98:	3008      	adds	r0, #8
   d4b9a:	f001 fa79 	bl	d6090 <_ZN7FatFile5closeEv>
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4b9e:	4c1e      	ldr	r4, [pc, #120]	; (d4c18 <_Z16igh_sd_log_setupv+0x88>)
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d4ba0:	4b1e      	ldr	r3, [pc, #120]	; (d4c1c <_Z16igh_sd_log_setupv+0x8c>)
   d4ba2:	4a1f      	ldr	r2, [pc, #124]	; (d4c20 <_Z16igh_sd_log_setupv+0x90>)
   d4ba4:	9300      	str	r3, [sp, #0]
   d4ba6:	f504 668c 	add.w	r6, r4, #1120	; 0x460
   d4baa:	2300      	movs	r3, #0
   d4bac:	f88d 3004 	strb.w	r3, [sp, #4]
   d4bb0:	9202      	str	r2, [sp, #8]
   d4bb2:	2501      	movs	r5, #1
   d4bb4:	f88d 300d 	strb.w	r3, [sp, #13]
   d4bb8:	220e      	movs	r2, #14
   d4bba:	466b      	mov	r3, sp
   d4bbc:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   d4bc0:	4630      	mov	r0, r6
   d4bc2:	f88d 500c 	strb.w	r5, [sp, #12]
   d4bc6:	f001 fe15 	bl	d67f4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d4bca:	b300      	cbz	r0, d4c0e <_Z16igh_sd_log_setupv+0x7e>
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d4bcc:	f204 403c 	addw	r0, r4, #1084	; 0x43c
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d4bd0:	6026      	str	r6, [r4, #0]
    vwd()->close();
   d4bd2:	f001 fa5d 	bl	d6090 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d4bd6:	4629      	mov	r1, r5
   d4bd8:	4620      	mov	r0, r4
   d4bda:	f001 fcb4 	bl	d6546 <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d4bde:	4601      	mov	r1, r0
   d4be0:	b180      	cbz	r0, d4c04 <_Z16igh_sd_log_setupv+0x74>
   d4be2:	4c0d      	ldr	r4, [pc, #52]	; (d4c18 <_Z16igh_sd_log_setupv+0x88>)
   d4be4:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   d4be8:	4621      	mov	r1, r4
   d4bea:	4628      	mov	r0, r5
   d4bec:	f001 f829 	bl	d5c42 <_ZN7FatFile8openRootEP9FatVolume>
   d4bf0:	b168      	cbz	r0, d4c0e <_Z16igh_sd_log_setupv+0x7e>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d4bf2:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d4bf6:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
   d4bfa:	bf16      	itet	ne
   d4bfc:	4b09      	ldrne	r3, [pc, #36]	; (d4c24 <_Z16igh_sd_log_setupv+0x94>)
   d4bfe:	4618      	moveq	r0, r3
   d4c00:	601d      	strne	r5, [r3, #0]
   d4c02:	e005      	b.n	d4c10 <_Z16igh_sd_log_setupv+0x80>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d4c04:	4620      	mov	r0, r4
   d4c06:	f001 fc9e 	bl	d6546 <_ZN9FatVolume4initEh>
   d4c0a:	2800      	cmp	r0, #0
   d4c0c:	d1e9      	bne.n	d4be2 <_Z16igh_sd_log_setupv+0x52>
   d4c0e:	2000      	movs	r0, #0
    return igh_sd.begin(IGH_SD_CS);
}
   d4c10:	b004      	add	sp, #16
   d4c12:	bd70      	pop	{r4, r5, r6, pc}
   d4c14:	2003e284 	.word	0x2003e284
   d4c18:	2003de00 	.word	0x2003de00
   d4c1c:	000da1b8 	.word	0x000da1b8
   d4c20:	02faf080 	.word	0x02faf080
   d4c24:	2003e328 	.word	0x2003e328

000d4c28 <_Z24igh_sd_log_get_file_namemPc>:
{
    igh_file.rewindDirectory();
}

void igh_sd_log_get_file_name(unsigned long _unix_time, char * file_name)
{
   d4c28:	b507      	push	{r0, r1, r2, lr}
   d4c2a:	4602      	mov	r2, r0
    sprintf(file_name, "%02X%02X%02X%02X.LOG", 
    (uint8_t)(_unix_time >> 24), 
    (uint8_t)(_unix_time >> 16), 
    (uint8_t)(_unix_time >> 8), 
    (uint8_t)(_unix_time));
   d4c2c:	b2d3      	uxtb	r3, r2
   d4c2e:	9301      	str	r3, [sp, #4]
   d4c30:	f3c2 2307 	ubfx	r3, r2, #8, #8
   d4c34:	9300      	str	r3, [sp, #0]
{
    igh_file.rewindDirectory();
}

void igh_sd_log_get_file_name(unsigned long _unix_time, char * file_name)
{
   d4c36:	4608      	mov	r0, r1
    sprintf(file_name, "%02X%02X%02X%02X.LOG", 
    (uint8_t)(_unix_time >> 24), 
    (uint8_t)(_unix_time >> 16), 
    (uint8_t)(_unix_time >> 8), 
    (uint8_t)(_unix_time));
   d4c38:	f3c2 4307 	ubfx	r3, r2, #16, #8
   d4c3c:	4903      	ldr	r1, [pc, #12]	; (d4c4c <_Z24igh_sd_log_get_file_namemPc+0x24>)
   d4c3e:	0e12      	lsrs	r2, r2, #24
   d4c40:	f002 ff4e 	bl	d7ae0 <sprintf>
}
   d4c44:	b003      	add	sp, #12
   d4c46:	f85d fb04 	ldr.w	pc, [sp], #4
   d4c4a:	bf00      	nop
   d4c4c:	000da241 	.word	0x000da241

000d4c50 <_Z26igh_sd_log_save_data_pointmPhh>:

uint8_t igh_sd_log_save_data_point(unsigned long _unix_time, uint8_t * data, uint8_t size)
{
   d4c50:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4c52:	b093      	sub	sp, #76	; 0x4c
   d4c54:	460f      	mov	r7, r1
    char name[FILE_NAME_SIZE]; // include the null terminator?
    igh_sd_log_get_file_name(_unix_time, name);
   d4c56:	a901      	add	r1, sp, #4
   d4c58:	f7ff ffe6 	bl	d4c28 <_Z24igh_sd_log_get_file_namemPc>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4c5c:	2300      	movs	r3, #0
   d4c5e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d4c62:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4c66:	9306      	str	r3, [sp, #24]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4c68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4c6c:	9307      	str	r3, [sp, #28]
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 public:
  File() {}
   d4c6e:	4b13      	ldr	r3, [pc, #76]	; (d4cbc <_Z26igh_sd_log_save_data_pointmPhh+0x6c>)
   d4c70:	9305      	str	r3, [sp, #20]
   * \param[in] oflag open flags.
   * \return a File object.
   */
  File open(const char *path, oflag_t oflag = FILE_READ) {
    File tmpFile;
    tmpFile.open(vwd(), path, oflag);
   d4c72:	aa01      	add	r2, sp, #4
   d4c74:	f244 2302 	movw	r3, #16898	; 0x4202
   d4c78:	4911      	ldr	r1, [pc, #68]	; (d4cc0 <_Z26igh_sd_log_save_data_pointmPhh+0x70>)
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d4c7a:	4e12      	ldr	r6, [pc, #72]	; (d4cc4 <_Z26igh_sd_log_save_data_pointmPhh+0x74>)
   d4c7c:	a809      	add	r0, sp, #36	; 0x24
   d4c7e:	ac09      	add	r4, sp, #36	; 0x24
   d4c80:	f001 fa0d 	bl	d609e <_ZN7FatFile4openEPS_PKci>
   d4c84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4c86:	f106 0510 	add.w	r5, r6, #16
   d4c8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4c8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4c8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4c90:	6823      	ldr	r3, [r4, #0]
   d4c92:	602b      	str	r3, [r5, #0]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
   d4c94:	9b06      	ldr	r3, [sp, #24]
   d4c96:	6073      	str	r3, [r6, #4]
    igh_file = igh_sd.open((const char *)name, FILE_WRITE);

    if(igh_file)
   d4c98:	7c30      	ldrb	r0, [r6, #16]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   d4c9a:	9b07      	ldr	r3, [sp, #28]
   d4c9c:	60b3      	str	r3, [r6, #8]
   d4c9e:	9b08      	ldr	r3, [sp, #32]
   d4ca0:	60f3      	str	r3, [r6, #12]
   d4ca2:	b140      	cbz	r0, d4cb6 <_Z26igh_sd_log_save_data_pointmPhh+0x66>
    {
        igh_file.println((const char *)data);
   d4ca4:	4639      	mov	r1, r7
   d4ca6:	4630      	mov	r0, r6
   d4ca8:	f003 fa0f 	bl	d80ca <_ZN5Print7printlnEPKc>
        igh_file.close();
   d4cac:	f1a5 0020 	sub.w	r0, r5, #32
   d4cb0:	f001 f9ee 	bl	d6090 <_ZN7FatFile5closeEv>
   d4cb4:	2001      	movs	r0, #1
    }
    else
    {
        return 0;
    }
}
   d4cb6:	b013      	add	sp, #76	; 0x4c
   d4cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4cba:	bf00      	nop
   d4cbc:	000da1c4 	.word	0x000da1c4
   d4cc0:	2003e23c 	.word	0x2003e23c
   d4cc4:	2003e2b0 	.word	0x2003e2b0

000d4cc8 <_Z28igh_sd_log_remove_data_pointPc>:
  *
  * \return The value true is returned for success and
  * the value false is returned for failure.
  */
  bool remove(const char* path) {
    return FatFile::remove(vwd(), path);
   d4cc8:	4601      	mov	r1, r0
   d4cca:	4801      	ldr	r0, [pc, #4]	; (d4cd0 <_Z28igh_sd_log_remove_data_pointPc+0x8>)
   d4ccc:	f001 ba36 	b.w	d613c <_ZN7FatFile6removeEPS_PKc>
   d4cd0:	2003e23c 	.word	0x2003e23c

000d4cd4 <_Z24igh_sd_log_clear_sd_datav>:
{
    return igh_sd.remove(file_name);
}

uint8_t igh_sd_log_clear_sd_data(void)
{
   d4cd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if(!igh_sd_log_setup())
   d4cd6:	f7ff ff5b 	bl	d4b90 <_Z16igh_sd_log_setupv>
   d4cda:	b908      	cbnz	r0, d4ce0 <_Z24igh_sd_log_clear_sd_datav+0xc>
    {
        return 0;
   d4cdc:	2000      	movs	r0, #0
   d4cde:	e023      	b.n	d4d28 <_Z24igh_sd_log_clear_sd_datav+0x54>
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d4ce0:	4913      	ldr	r1, [pc, #76]	; (d4d30 <_Z24igh_sd_log_clear_sd_datav+0x5c>)
   d4ce2:	4a14      	ldr	r2, [pc, #80]	; (d4d34 <_Z24igh_sd_log_clear_sd_datav+0x60>)
   d4ce4:	6809      	ldr	r1, [r1, #0]
   d4ce6:	4814      	ldr	r0, [pc, #80]	; (d4d38 <_Z24igh_sd_log_clear_sd_datav+0x64>)
   d4ce8:	2300      	movs	r3, #0
   d4cea:	f001 f9d8 	bl	d609e <_ZN7FatFile4openEPS_PKci>
    }

    if (!sd_root.open("/"))
   d4cee:	2800      	cmp	r0, #0
   d4cf0:	d0f4      	beq.n	d4cdc <_Z24igh_sd_log_clear_sd_datav+0x8>
    {
        return 0;
    }
    else
    {
        while ( next_file.openNext(&sd_root, O_RDONLY) )
   d4cf2:	2200      	movs	r2, #0
   d4cf4:	4910      	ldr	r1, [pc, #64]	; (d4d38 <_Z24igh_sd_log_clear_sd_datav+0x64>)
   d4cf6:	4811      	ldr	r0, [pc, #68]	; (d4d3c <_Z24igh_sd_log_clear_sd_datav+0x68>)
   d4cf8:	f001 f955 	bl	d5fa6 <_ZN7FatFile8openNextEPS_i>
   d4cfc:	b180      	cbz	r0, d4d20 <_Z24igh_sd_log_clear_sd_datav+0x4c>
        {
            char file_to_delete[FILE_NAME_SIZE];
            memset(file_to_delete, '\0', FILE_NAME_SIZE);
   d4cfe:	220d      	movs	r2, #13
   d4d00:	2100      	movs	r1, #0
   d4d02:	4668      	mov	r0, sp
   d4d04:	f005 f910 	bl	d9f28 <memset>

            next_file.getSFN(file_to_delete);
   d4d08:	4669      	mov	r1, sp
   d4d0a:	480c      	ldr	r0, [pc, #48]	; (d4d3c <_Z24igh_sd_log_clear_sd_datav+0x68>)
   d4d0c:	f000 fefc 	bl	d5b08 <_ZN7FatFile6getSFNEPc>
            next_file.close();
   d4d10:	480a      	ldr	r0, [pc, #40]	; (d4d3c <_Z24igh_sd_log_clear_sd_datav+0x68>)
   d4d12:	f001 f9bd 	bl	d6090 <_ZN7FatFile5closeEv>
   d4d16:	4669      	mov	r1, sp
   d4d18:	4809      	ldr	r0, [pc, #36]	; (d4d40 <_Z24igh_sd_log_clear_sd_datav+0x6c>)
   d4d1a:	f001 fa0f 	bl	d613c <_ZN7FatFile6removeEPS_PKc>
   d4d1e:	e7e8      	b.n	d4cf2 <_Z24igh_sd_log_clear_sd_datav+0x1e>
            igh_sd.remove(file_to_delete);
        }
        igh_file.rewindDirectory();
   d4d20:	4808      	ldr	r0, [pc, #32]	; (d4d44 <_Z24igh_sd_log_clear_sd_datav+0x70>)
   d4d22:	f7ff ff2b 	bl	d4b7c <_ZN4File15rewindDirectoryEv>
   d4d26:	2001      	movs	r0, #1
        return 1;
    }
}
   d4d28:	b005      	add	sp, #20
   d4d2a:	f85d fb04 	ldr.w	pc, [sp], #4
   d4d2e:	bf00      	nop
   d4d30:	2003e328 	.word	0x2003e328
   d4d34:	000da256 	.word	0x000da256
   d4d38:	2003e28c 	.word	0x2003e28c
   d4d3c:	2003dddc 	.word	0x2003dddc
   d4d40:	2003e23c 	.word	0x2003e23c
   d4d44:	2003e2b0 	.word	0x2003e2b0

000d4d48 <_Z26igh_sd_log_read_data_pointPcPhh>:

uint8_t igh_sd_log_read_data_point(char * file_name, uint8_t * buffer, uint8_t data_length)
{
   d4d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4d4c:	b08e      	sub	sp, #56	; 0x38
   d4d4e:	4690      	mov	r8, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4d50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4d54:	9203      	str	r2, [sp, #12]
 public:
  File() {}
   d4d56:	4a18      	ldr	r2, [pc, #96]	; (d4db8 <_Z26igh_sd_log_read_data_pointPcPhh+0x70>)
   d4d58:	9201      	str	r2, [sp, #4]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4d5a:	2300      	movs	r3, #0
   * \param[in] oflag open flags.
   * \return a File object.
   */
  File open(const char *path, oflag_t oflag = FILE_READ) {
    File tmpFile;
    tmpFile.open(vwd(), path, oflag);
   d4d5c:	4602      	mov	r2, r0
   d4d5e:	460f      	mov	r7, r1
   d4d60:	a805      	add	r0, sp, #20
   d4d62:	4916      	ldr	r1, [pc, #88]	; (d4dbc <_Z26igh_sd_log_read_data_pointPcPhh+0x74>)
   d4d64:	f88d 3014 	strb.w	r3, [sp, #20]
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d4d68:	ac05      	add	r4, sp, #20
   d4d6a:	f88d 3015 	strb.w	r3, [sp, #21]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4d6e:	9302      	str	r3, [sp, #8]
   d4d70:	f001 f995 	bl	d609e <_ZN7FatFile4openEPS_PKci>
   d4d74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4d76:	4e12      	ldr	r6, [pc, #72]	; (d4dc0 <_Z26igh_sd_log_read_data_pointPcPhh+0x78>)
   d4d78:	f106 0510 	add.w	r5, r6, #16
   d4d7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4d7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4d80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4d82:	6823      	ldr	r3, [r4, #0]
   d4d84:	602b      	str	r3, [r5, #0]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
   d4d86:	9b02      	ldr	r3, [sp, #8]
   d4d88:	6073      	str	r3, [r6, #4]
    igh_file = igh_sd.open( (const char *)file_name );
    if(igh_file)
   d4d8a:	7c30      	ldrb	r0, [r6, #16]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   d4d8c:	9b03      	ldr	r3, [sp, #12]
   d4d8e:	60b3      	str	r3, [r6, #8]
   d4d90:	9b04      	ldr	r3, [sp, #16]
   d4d92:	60f3      	str	r3, [r6, #12]
   d4d94:	b160      	cbz	r0, d4db0 <_Z26igh_sd_log_read_data_pointPcPhh+0x68>
   d4d96:	463c      	mov	r4, r7
    {
        for(int i = 0; i < data_length; i++)
   d4d98:	1be3      	subs	r3, r4, r7
   d4d9a:	4598      	cmp	r8, r3
        {
            buffer[i] = igh_file.read(); // read data_len number of chars
        }
        igh_file.close();
   d4d9c:	4809      	ldr	r0, [pc, #36]	; (d4dc4 <_Z26igh_sd_log_read_data_pointPcPhh+0x7c>)
uint8_t igh_sd_log_read_data_point(char * file_name, uint8_t * buffer, uint8_t data_length)
{
    igh_file = igh_sd.open( (const char *)file_name );
    if(igh_file)
    {
        for(int i = 0; i < data_length; i++)
   d4d9e:	dd04      	ble.n	d4daa <_Z26igh_sd_log_read_data_pointPcPhh+0x62>
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    return FatFile::read();
   d4da0:	f7ff fed8 	bl	d4b54 <_ZN7FatFile4readEv>
        {
            buffer[i] = igh_file.read(); // read data_len number of chars
   d4da4:	f804 0b01 	strb.w	r0, [r4], #1
   d4da8:	e7f6      	b.n	d4d98 <_Z26igh_sd_log_read_data_pointPcPhh+0x50>
        }
        igh_file.close();
   d4daa:	f001 f971 	bl	d6090 <_ZN7FatFile5closeEv>
   d4dae:	2001      	movs	r0, #1
    }
    else
    {
        return 0;
    }   
}
   d4db0:	b00e      	add	sp, #56	; 0x38
   d4db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4db6:	bf00      	nop
   d4db8:	000da1c4 	.word	0x000da1c4
   d4dbc:	2003e23c 	.word	0x2003e23c
   d4dc0:	2003e2b0 	.word	0x2003e2b0
   d4dc4:	2003e2c0 	.word	0x2003e2c0

000d4dc8 <_Z29igh_sd_log_get_next_file_namePc>:

uint8_t igh_sd_log_get_next_file_name(char * next_file_name)
{
   d4dc8:	b510      	push	{r4, lr}
   d4dca:	4604      	mov	r4, r0
    if(!igh_sd_log_setup())
   d4dcc:	f7ff fee0 	bl	d4b90 <_Z16igh_sd_log_setupv>
   d4dd0:	b908      	cbnz	r0, d4dd6 <_Z29igh_sd_log_get_next_file_namePc+0xe>
    {
        return 0;
   d4dd2:	2000      	movs	r0, #0
   d4dd4:	bd10      	pop	{r4, pc}
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d4dd6:	4910      	ldr	r1, [pc, #64]	; (d4e18 <_Z29igh_sd_log_get_next_file_namePc+0x50>)
   d4dd8:	4a10      	ldr	r2, [pc, #64]	; (d4e1c <_Z29igh_sd_log_get_next_file_namePc+0x54>)
   d4dda:	6809      	ldr	r1, [r1, #0]
   d4ddc:	4810      	ldr	r0, [pc, #64]	; (d4e20 <_Z29igh_sd_log_get_next_file_namePc+0x58>)
   d4dde:	2300      	movs	r3, #0
   d4de0:	f001 f95d 	bl	d609e <_ZN7FatFile4openEPS_PKci>
    }

    if (!sd_root.open("/"))
   d4de4:	2800      	cmp	r0, #0
   d4de6:	d0f4      	beq.n	d4dd2 <_Z29igh_sd_log_get_next_file_namePc+0xa>
    {
        return 0;
    }
    else
    {
        next_file.openNext(&sd_root, O_RDONLY); // skip one index
   d4de8:	2200      	movs	r2, #0
   d4dea:	490d      	ldr	r1, [pc, #52]	; (d4e20 <_Z29igh_sd_log_get_next_file_namePc+0x58>)
   d4dec:	480d      	ldr	r0, [pc, #52]	; (d4e24 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d4dee:	f001 f8da 	bl	d5fa6 <_ZN7FatFile8openNextEPS_i>
        next_file.close(); 
   d4df2:	480c      	ldr	r0, [pc, #48]	; (d4e24 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d4df4:	f001 f94c 	bl	d6090 <_ZN7FatFile5closeEv>
        if( next_file.openNext(&sd_root, O_RDONLY) )
   d4df8:	2200      	movs	r2, #0
   d4dfa:	4909      	ldr	r1, [pc, #36]	; (d4e20 <_Z29igh_sd_log_get_next_file_namePc+0x58>)
   d4dfc:	4809      	ldr	r0, [pc, #36]	; (d4e24 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d4dfe:	f001 f8d2 	bl	d5fa6 <_ZN7FatFile8openNextEPS_i>
   d4e02:	2800      	cmp	r0, #0
   d4e04:	d0e5      	beq.n	d4dd2 <_Z29igh_sd_log_get_next_file_namePc+0xa>
        {
            next_file.getSFN(next_file_name);
   d4e06:	4621      	mov	r1, r4
   d4e08:	4806      	ldr	r0, [pc, #24]	; (d4e24 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d4e0a:	f000 fe7d 	bl	d5b08 <_ZN7FatFile6getSFNEPc>
            next_file.close(); 
   d4e0e:	4805      	ldr	r0, [pc, #20]	; (d4e24 <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d4e10:	f001 f93e 	bl	d6090 <_ZN7FatFile5closeEv>
   d4e14:	2001      	movs	r0, #1
        else
        {
            return 0;
        }    
    }
}
   d4e16:	bd10      	pop	{r4, pc}
   d4e18:	2003e328 	.word	0x2003e328
   d4e1c:	000da256 	.word	0x000da256
   d4e20:	2003e28c 	.word	0x2003e28c
   d4e24:	2003dddc 	.word	0x2003dddc

000d4e28 <_Z15igh_sd_log_testv>:

uint8_t igh_sd_log_test(void)
{
   d4e28:	b510      	push	{r4, lr}
   d4e2a:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
    if( !igh_sd_log_clear_sd_data() )
   d4e2e:	f7ff ff51 	bl	d4cd4 <_Z24igh_sd_log_clear_sd_datav>
   d4e32:	b908      	cbnz	r0, d4e38 <_Z15igh_sd_log_testv+0x10>
    {
        return 0;
   d4e34:	2000      	movs	r0, #0
   d4e36:	e033      	b.n	d4ea0 <_Z15igh_sd_log_testv+0x78>
    }

    unsigned long test_timestamp = random(2015707648); 
   d4e38:	481b      	ldr	r0, [pc, #108]	; (d4ea8 <_Z15igh_sd_log_testv+0x80>)
   d4e3a:	f003 ff64 	bl	d8d06 <_Z6randomi>

    uint8_t size = MAX_FILE_SIZE;
    uint8_t data[size];

    memset(data, 't', size);
   d4e3e:	22ff      	movs	r2, #255	; 0xff
    if( !igh_sd_log_clear_sd_data() )
    {
        return 0;
    }

    unsigned long test_timestamp = random(2015707648); 
   d4e40:	4604      	mov	r4, r0

    uint8_t size = MAX_FILE_SIZE;
    uint8_t data[size];

    memset(data, 't', size);
   d4e42:	2174      	movs	r1, #116	; 0x74
   d4e44:	a808      	add	r0, sp, #32
   d4e46:	f005 f86f 	bl	d9f28 <memset>
    if ( !igh_sd_log_save_data_point(test_timestamp, data, size) )
   d4e4a:	22ff      	movs	r2, #255	; 0xff
   d4e4c:	a908      	add	r1, sp, #32
   d4e4e:	4620      	mov	r0, r4
   d4e50:	f7ff fefe 	bl	d4c50 <_Z26igh_sd_log_save_data_pointmPhh>
   d4e54:	2800      	cmp	r0, #0
   d4e56:	d0ed      	beq.n	d4e34 <_Z15igh_sd_log_testv+0xc>
        return 0;
    }

    char test_name[FILE_NAME_SIZE];
    uint8_t test_buffer[size];
    igh_sd_log_get_file_name(test_timestamp, test_name);
   d4e58:	4669      	mov	r1, sp
   d4e5a:	4620      	mov	r0, r4
   d4e5c:	f7ff fee4 	bl	d4c28 <_Z24igh_sd_log_get_file_namemPc>

    if( !igh_sd_log_read_data_point(test_name, test_buffer, size) )
   d4e60:	22ff      	movs	r2, #255	; 0xff
   d4e62:	a948      	add	r1, sp, #288	; 0x120
   d4e64:	4668      	mov	r0, sp
   d4e66:	f7ff ff6f 	bl	d4d48 <_Z26igh_sd_log_read_data_pointPcPhh>
   d4e6a:	2800      	cmp	r0, #0
   d4e6c:	d0e2      	beq.n	d4e34 <_Z15igh_sd_log_testv+0xc>
    {
        return 0;
    }

    if ( 0 != memcmp( data, test_buffer, size) )
   d4e6e:	22ff      	movs	r2, #255	; 0xff
   d4e70:	a948      	add	r1, sp, #288	; 0x120
   d4e72:	a808      	add	r0, sp, #32
   d4e74:	f005 f83e 	bl	d9ef4 <memcmp>
   d4e78:	2800      	cmp	r0, #0
   d4e7a:	d1db      	bne.n	d4e34 <_Z15igh_sd_log_testv+0xc>
        return 0;
    }

    char read_name[FILE_NAME_SIZE];

    if( !igh_sd_log_get_next_file_name(read_name) )
   d4e7c:	a804      	add	r0, sp, #16
   d4e7e:	f7ff ffa3 	bl	d4dc8 <_Z29igh_sd_log_get_next_file_namePc>
   d4e82:	2800      	cmp	r0, #0
   d4e84:	d0d6      	beq.n	d4e34 <_Z15igh_sd_log_testv+0xc>
    {
        return 0;
    }

    
    if( 0 != memcmp( test_name, read_name, FILE_NAME_SIZE) )
   d4e86:	220d      	movs	r2, #13
   d4e88:	a904      	add	r1, sp, #16
   d4e8a:	4668      	mov	r0, sp
   d4e8c:	f005 f832 	bl	d9ef4 <memcmp>
   d4e90:	2800      	cmp	r0, #0
   d4e92:	d1cf      	bne.n	d4e34 <_Z15igh_sd_log_testv+0xc>
    {
        return 0;
    }

    if( !igh_sd_log_remove_data_point(read_name) )
   d4e94:	a804      	add	r0, sp, #16
   d4e96:	f7ff ff17 	bl	d4cc8 <_Z28igh_sd_log_remove_data_pointPc>

uint8_t igh_sd_log_test(void)
{
    if( !igh_sd_log_clear_sd_data() )
    {
        return 0;
   d4e9a:	3000      	adds	r0, #0
   d4e9c:	bf18      	it	ne
   d4e9e:	2001      	movne	r0, #1
    {
        return 0;
    }

    return 1;
   d4ea0:	f50d 7d08 	add.w	sp, sp, #544	; 0x220
   d4ea4:	bd10      	pop	{r4, pc}
   d4ea6:	bf00      	nop
   d4ea8:	78254200 	.word	0x78254200

000d4eac <_GLOBAL__sub_I_igh_sd>:
   d4eac:	b570      	push	{r4, r5, r6, lr}
   d4eae:	f002 fb0b 	bl	d74c8 <HAL_Pin_Map>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d4eb2:	4b27      	ldr	r3, [pc, #156]	; (d4f50 <_GLOBAL__sub_I_igh_sd+0xa4>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d4eb4:	4e27      	ldr	r6, [pc, #156]	; (d4f54 <_GLOBAL__sub_I_igh_sd+0xa8>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d4eb6:	2164      	movs	r1, #100	; 0x64
   d4eb8:	f883 1460 	strb.w	r1, [r3, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d4ebc:	4926      	ldr	r1, [pc, #152]	; (d4f58 <_GLOBAL__sub_I_igh_sd+0xac>)
   d4ebe:	f8c3 1470 	str.w	r1, [r3, #1136]	; 0x470
   d4ec2:	2101      	movs	r1, #1
   d4ec4:	f883 1474 	strb.w	r1, [r3, #1140]	; 0x474
   d4ec8:	6831      	ldr	r1, [r6, #0]
   d4eca:	2200      	movs	r2, #0
   d4ecc:	f011 0501 	ands.w	r5, r1, #1
   d4ed0:	71da      	strb	r2, [r3, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4ed2:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
   d4ed6:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
   d4eda:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
   d4ede:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   d4ee2:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
   d4ee6:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
   d4eea:	461c      	mov	r4, r3
   d4eec:	d10a      	bne.n	d4f04 <_GLOBAL__sub_I_igh_sd+0x58>
   d4eee:	4630      	mov	r0, r6
   d4ef0:	f7ff f8d5 	bl	d409e <__cxa_guard_acquire>
   d4ef4:	b130      	cbz	r0, d4f04 <_GLOBAL__sub_I_igh_sd+0x58>
   d4ef6:	4629      	mov	r1, r5
   d4ef8:	4818      	ldr	r0, [pc, #96]	; (d4f5c <_GLOBAL__sub_I_igh_sd+0xb0>)
   d4efa:	f002 fe45 	bl	d7b88 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4efe:	4630      	mov	r0, r6
   d4f00:	f7ff f8d2 	bl	d40a8 <__cxa_guard_release>
   d4f04:	4816      	ldr	r0, [pc, #88]	; (d4f60 <_GLOBAL__sub_I_igh_sd+0xb4>)
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d4f06:	4b15      	ldr	r3, [pc, #84]	; (d4f5c <_GLOBAL__sub_I_igh_sd+0xb0>)
   d4f08:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d4f0c:	2400      	movs	r4, #0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4f12:	7404      	strb	r4, [r0, #16]
   d4f14:	7444      	strb	r4, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4f16:	6044      	str	r4, [r0, #4]
   d4f18:	6083      	str	r3, [r0, #8]
#include <SPI.h>
#include "SdFat.h"
#include "igh_sd_log.h"

SdFat igh_sd;
File igh_file;
   d4f1a:	4a12      	ldr	r2, [pc, #72]	; (d4f64 <_GLOBAL__sub_I_igh_sd+0xb8>)
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 public:
  File() {}
   d4f1c:	4b12      	ldr	r3, [pc, #72]	; (d4f68 <_GLOBAL__sub_I_igh_sd+0xbc>)
   d4f1e:	4913      	ldr	r1, [pc, #76]	; (d4f6c <_GLOBAL__sub_I_igh_sd+0xc0>)
   d4f20:	6003      	str	r3, [r0, #0]
   d4f22:	f004 f96f 	bl	d9204 <__aeabi_atexit>
   d4f26:	4812      	ldr	r0, [pc, #72]	; (d4f70 <_GLOBAL__sub_I_igh_sd+0xc4>)
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 public:
  SdFile() {}
   d4f28:	4d12      	ldr	r5, [pc, #72]	; (d4f74 <_GLOBAL__sub_I_igh_sd+0xc8>)
   d4f2a:	7204      	strb	r4, [r0, #8]
   d4f2c:	7244      	strb	r4, [r0, #9]
   d4f2e:	6044      	str	r4, [r0, #4]
SdFile sd_root;
   d4f30:	4a0c      	ldr	r2, [pc, #48]	; (d4f64 <_GLOBAL__sub_I_igh_sd+0xb8>)
   d4f32:	4911      	ldr	r1, [pc, #68]	; (d4f78 <_GLOBAL__sub_I_igh_sd+0xcc>)
   d4f34:	6005      	str	r5, [r0, #0]
   d4f36:	f004 f965 	bl	d9204 <__aeabi_atexit>
   d4f3a:	4810      	ldr	r0, [pc, #64]	; (d4f7c <_GLOBAL__sub_I_igh_sd+0xd0>)
SdFile next_file;
   d4f3c:	4a09      	ldr	r2, [pc, #36]	; (d4f64 <_GLOBAL__sub_I_igh_sd+0xb8>)
   d4f3e:	7204      	strb	r4, [r0, #8]
   d4f40:	7244      	strb	r4, [r0, #9]
   d4f42:	6044      	str	r4, [r0, #4]
   d4f44:	6005      	str	r5, [r0, #0]
   d4f46:	490c      	ldr	r1, [pc, #48]	; (d4f78 <_GLOBAL__sub_I_igh_sd+0xcc>)
    {
        return 0;
    }

    return 1;
   d4f48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#include "igh_sd_log.h"

SdFat igh_sd;
File igh_file;
SdFile sd_root;
SdFile next_file;
   d4f4c:	f004 b95a 	b.w	d9204 <__aeabi_atexit>
   d4f50:	2003de00 	.word	0x2003de00
   d4f54:	2003ddc8 	.word	0x2003ddc8
   d4f58:	000da1b8 	.word	0x000da1b8
   d4f5c:	2003ddcc 	.word	0x2003ddcc
   d4f60:	2003e2b0 	.word	0x2003e2b0
   d4f64:	2003dd80 	.word	0x2003dd80
   d4f68:	000da1c4 	.word	0x000da1c4
   d4f6c:	000d4a97 	.word	0x000d4a97
   d4f70:	2003e284 	.word	0x2003e284
   d4f74:	000da1ec 	.word	0x000da1ec
   d4f78:	000d4a95 	.word	0x000d4a95
   d4f7c:	2003ddd4 	.word	0x2003ddd4

000d4f80 <_ZN14CellularSignalD1Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d4f80:	4770      	bx	lr

000d4f82 <_ZN14CellularSignalD0Ev>:
   d4f82:	b510      	push	{r4, lr}
   d4f84:	2128      	movs	r1, #40	; 0x28
   d4f86:	4604      	mov	r4, r0
   d4f88:	f004 f94a 	bl	d9220 <_ZdlPvj>
   d4f8c:	4620      	mov	r0, r4
   d4f8e:	bd10      	pop	{r4, pc}

000d4f90 <_Z19igh_boron_sync_timev>:
float battery_voltage, battery_SOC;
unsigned long unix_time;

/* Functions */
void igh_boron_sync_time(void)
{
   d4f90:	b510      	push	{r4, lr}
   d4f92:	f002 fb59 	bl	d7648 <HAL_Timer_Get_Milli_Seconds>
    if((millis() - lastSync > ONE_DAY_MILLIS))
   d4f96:	4b08      	ldr	r3, [pc, #32]	; (d4fb8 <_Z19igh_boron_sync_timev+0x28>)
   d4f98:	681a      	ldr	r2, [r3, #0]
   d4f9a:	1a80      	subs	r0, r0, r2
   d4f9c:	4a07      	ldr	r2, [pc, #28]	; (d4fbc <_Z19igh_boron_sync_timev+0x2c>)
   d4f9e:	4290      	cmp	r0, r2
   d4fa0:	461c      	mov	r4, r3
   d4fa2:	d908      	bls.n	d4fb6 <_Z19igh_boron_sync_timev+0x26>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4fa4:	f002 fd5c 	bl	d7a60 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d4fa8:	b110      	cbz	r0, d4fb0 <_Z19igh_boron_sync_timev+0x20>
            return false;
        }
        return spark_sync_time(NULL);
   d4faa:	2000      	movs	r0, #0
   d4fac:	f002 fd68 	bl	d7a80 <spark_sync_time>
   d4fb0:	f002 fb4a 	bl	d7648 <HAL_Timer_Get_Milli_Seconds>
    {
        Particle.syncTime();
        lastSync = millis(); 
   d4fb4:	6020      	str	r0, [r4, #0]
   d4fb6:	bd10      	pop	{r4, pc}
   d4fb8:	2003e30c 	.word	0x2003e30c
   d4fbc:	05265c00 	.word	0x05265c00

000d4fc0 <_Z13igh_boron_SoCv>:
    return Time.now();
}

float igh_boron_SoC(void)
{
    return fuel.getSoC();
   d4fc0:	4801      	ldr	r0, [pc, #4]	; (d4fc8 <_Z13igh_boron_SoCv+0x8>)
   d4fc2:	f003 bb35 	b.w	d8630 <_ZN9FuelGauge6getSoCEv>
   d4fc6:	bf00      	nop
   d4fc8:	2003e310 	.word	0x2003e310

000d4fcc <_Z17igh_boron_voltagev>:
}

float igh_boron_voltage(void)
{
    return fuel.getVCell();
   d4fcc:	4801      	ldr	r0, [pc, #4]	; (d4fd4 <_Z17igh_boron_voltagev+0x8>)
   d4fce:	f003 bb19 	b.w	d8604 <_ZN9FuelGauge8getVCellEv>
   d4fd2:	bf00      	nop
   d4fd4:	2003e310 	.word	0x2003e310

000d4fd8 <_Z26igh_boron_get_celular_datav>:
}

void igh_boron_get_celular_data(void)
{
   d4fd8:	b530      	push	{r4, r5, lr}
   d4fda:	b08b      	sub	sp, #44	; 0x2c
    signal = Cellular.RSSI();
   d4fdc:	4668      	mov	r0, sp
#include "cellular_enums_hal.h"

/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
   d4fde:	4c09      	ldr	r4, [pc, #36]	; (d5004 <_Z26igh_boron_get_celular_datav+0x2c>)
   d4fe0:	4909      	ldr	r1, [pc, #36]	; (d5008 <_Z26igh_boron_get_celular_datav+0x30>)
   d4fe2:	f003 fd2f 	bl	d8a44 <_ZN5spark13CellularClass4RSSIEv>
   d4fe6:	9b02      	ldr	r3, [sp, #8]
   d4fe8:	60a3      	str	r3, [r4, #8]
   d4fea:	ad04      	add	r5, sp, #16
   d4fec:	9b03      	ldr	r3, [sp, #12]
   d4fee:	60e3      	str	r3, [r4, #12]
   d4ff0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4ff2:	3410      	adds	r4, #16
   d4ff4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4ff6:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4ffa:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d4ffe:	b00b      	add	sp, #44	; 0x2c
   d5000:	bd30      	pop	{r4, r5, pc}
   d5002:	bf00      	nop
   d5004:	2003e2e4 	.word	0x2003e2e4
   d5008:	2003e3e4 	.word	0x2003e3e4

000d500c <_Z12igh_boron_ssv>:
    return signal.getQuality();
}

float igh_boron_ss(void)
{
    return signal.getQuality();
   d500c:	4801      	ldr	r0, [pc, #4]	; (d5014 <_Z12igh_boron_ssv+0x8>)
   d500e:	f003 ba27 	b.w	d8460 <_ZNK14CellularSignal10getQualityEv>
   d5012:	bf00      	nop
   d5014:	2003e2e4 	.word	0x2003e2e4

000d5018 <_Z30igh_boron_connecetd_to_networkv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5018:	4b02      	ldr	r3, [pc, #8]	; (d5024 <_Z30igh_boron_connecetd_to_networkv+0xc>)
   d501a:	2200      	movs	r2, #0
   d501c:	4611      	mov	r1, r2
   d501e:	6858      	ldr	r0, [r3, #4]
   d5020:	f002 bcde 	b.w	d79e0 <network_ready>
   d5024:	2003e3e4 	.word	0x2003e3e4

000d5028 <_Z15igh_boron_setupv>:
{
    return Particle.connected();;
}

void igh_boron_setup(void)
{
   d5028:	b508      	push	{r3, lr}
   d502a:	f002 fb0d 	bl	d7648 <HAL_Timer_Get_Milli_Seconds>
    lastSync = millis();
   d502e:	4b01      	ldr	r3, [pc, #4]	; (d5034 <_Z15igh_boron_setupv+0xc>)
   d5030:	6018      	str	r0, [r3, #0]
   d5032:	bd08      	pop	{r3, pc}
   d5034:	2003e30c 	.word	0x2003e30c

000d5038 <_Z17igh_boron_servicev>:
}

void igh_boron_service(void)
{
   d5038:	b508      	push	{r3, lr}
    igh_boron_sync_time();
   d503a:	f7ff ffa9 	bl	d4f90 <_Z19igh_boron_sync_timev>
    igh_boron_get_celular_data();
}
   d503e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void igh_boron_service(void)
{
    igh_boron_sync_time();
    igh_boron_get_celular_data();
   d5042:	f7ff bfc9 	b.w	d4fd8 <_Z26igh_boron_get_celular_datav>
	...

000d5048 <_Z21igh_boron_test_devicev>:
}

void igh_boron_test_device(void)
{
   d5048:	b510      	push	{r4, lr}
    Serial.print("\nUnix Time:        "); Serial.println(igh_boron_unix_time());
   d504a:	f003 fc73 	bl	d8934 <_Z16_fetch_usbserialv>
   d504e:	4937      	ldr	r1, [pc, #220]	; (d512c <_Z21igh_boron_test_devicev+0xe4>)
   d5050:	f003 f828 	bl	d80a4 <_ZN5Print5printEPKc>
   d5054:	f003 fc6e 	bl	d8934 <_Z16_fetch_usbserialv>
   d5058:	4604      	mov	r4, r0
    }
}

unsigned long igh_boron_unix_time(void)
{
    return Time.now();
   d505a:	f003 f9a9 	bl	d83b0 <_ZN9TimeClass3nowEv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d505e:	220a      	movs	r2, #10
   d5060:	4601      	mov	r1, r0
   d5062:	4620      	mov	r0, r4
   d5064:	f003 f83b 	bl	d80de <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d5068:	4620      	mov	r0, r4
   d506a:	f003 f822 	bl	d80b2 <_ZN5Print7printlnEv>
}

void igh_boron_test_device(void)
{
    Serial.print("\nUnix Time:        "); Serial.println(igh_boron_unix_time());
    Serial.print("cloud status:     "); Serial.println(igh_boron_connected_to_cloud());
   d506e:	f003 fc61 	bl	d8934 <_Z16_fetch_usbserialv>
   d5072:	492f      	ldr	r1, [pc, #188]	; (d5130 <_Z21igh_boron_test_devicev+0xe8>)
   d5074:	f003 f816 	bl	d80a4 <_ZN5Print5printEPKc>
   d5078:	f003 fc5c 	bl	d8934 <_Z16_fetch_usbserialv>
   d507c:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d507e:	f002 fcef 	bl	d7a60 <spark_cloud_flag_connected>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5082:	220a      	movs	r2, #10
   d5084:	4601      	mov	r1, r0
   d5086:	4620      	mov	r0, r4
   d5088:	f003 f829 	bl	d80de <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d508c:	4620      	mov	r0, r4
   d508e:	f003 f810 	bl	d80b2 <_ZN5Print7printlnEv>
    Serial.print("network status:   "); Serial.println(igh_boron_connecetd_to_network());
   d5092:	f003 fc4f 	bl	d8934 <_Z16_fetch_usbserialv>
   d5096:	4927      	ldr	r1, [pc, #156]	; (d5134 <_Z21igh_boron_test_devicev+0xec>)
   d5098:	f003 f804 	bl	d80a4 <_ZN5Print5printEPKc>
   d509c:	f003 fc4a 	bl	d8934 <_Z16_fetch_usbserialv>
   d50a0:	4604      	mov	r4, r0
   d50a2:	f7ff ffb9 	bl	d5018 <_Z30igh_boron_connecetd_to_networkv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d50a6:	220a      	movs	r2, #10
   d50a8:	4601      	mov	r1, r0
   d50aa:	4620      	mov	r0, r4
   d50ac:	f003 f817 	bl	d80de <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d50b0:	4620      	mov	r0, r4
   d50b2:	f002 fffe 	bl	d80b2 <_ZN5Print7printlnEv>
    Serial.print("signal strength:  "); Serial.println(igh_boron_ss());
   d50b6:	f003 fc3d 	bl	d8934 <_Z16_fetch_usbserialv>
   d50ba:	491f      	ldr	r1, [pc, #124]	; (d5138 <_Z21igh_boron_test_devicev+0xf0>)
   d50bc:	f002 fff2 	bl	d80a4 <_ZN5Print5printEPKc>
   d50c0:	f003 fc38 	bl	d8934 <_Z16_fetch_usbserialv>
   d50c4:	4604      	mov	r4, r0
   d50c6:	f7ff ffa1 	bl	d500c <_Z12igh_boron_ssv>
   d50ca:	2102      	movs	r1, #2
   d50cc:	4620      	mov	r0, r4
   d50ce:	f003 f8f0 	bl	d82b2 <_ZN5Print7printlnEfi>
    Serial.print("signal quality:   "); Serial.println(igh_boron_sq());
   d50d2:	f003 fc2f 	bl	d8934 <_Z16_fetch_usbserialv>
   d50d6:	4919      	ldr	r1, [pc, #100]	; (d513c <_Z21igh_boron_test_devicev+0xf4>)
   d50d8:	f002 ffe4 	bl	d80a4 <_ZN5Print5printEPKc>
   d50dc:	f003 fc2a 	bl	d8934 <_Z16_fetch_usbserialv>
   d50e0:	4604      	mov	r4, r0
   d50e2:	f7ff ff93 	bl	d500c <_Z12igh_boron_ssv>
   d50e6:	2102      	movs	r1, #2
   d50e8:	4620      	mov	r0, r4
   d50ea:	f003 f8e2 	bl	d82b2 <_ZN5Print7printlnEfi>
    Serial.print("Battery Voltage:  "); Serial.println(igh_boron_voltage());
   d50ee:	f003 fc21 	bl	d8934 <_Z16_fetch_usbserialv>
   d50f2:	4913      	ldr	r1, [pc, #76]	; (d5140 <_Z21igh_boron_test_devicev+0xf8>)
   d50f4:	f002 ffd6 	bl	d80a4 <_ZN5Print5printEPKc>
   d50f8:	f003 fc1c 	bl	d8934 <_Z16_fetch_usbserialv>
   d50fc:	4604      	mov	r4, r0
   d50fe:	f7ff ff65 	bl	d4fcc <_Z17igh_boron_voltagev>
   d5102:	2102      	movs	r1, #2
   d5104:	4620      	mov	r0, r4
   d5106:	f003 f8d4 	bl	d82b2 <_ZN5Print7printlnEfi>
    Serial.print("Battery SOC:      "); Serial.println(igh_boron_SoC());
   d510a:	f003 fc13 	bl	d8934 <_Z16_fetch_usbserialv>
   d510e:	490d      	ldr	r1, [pc, #52]	; (d5144 <_Z21igh_boron_test_devicev+0xfc>)
   d5110:	f002 ffc8 	bl	d80a4 <_ZN5Print5printEPKc>
   d5114:	f003 fc0e 	bl	d8934 <_Z16_fetch_usbserialv>
   d5118:	4604      	mov	r4, r0
   d511a:	f7ff ff51 	bl	d4fc0 <_Z13igh_boron_SoCv>
   d511e:	4620      	mov	r0, r4
   d5120:	2102      	movs	r1, #2
}
   d5122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.print("cloud status:     "); Serial.println(igh_boron_connected_to_cloud());
    Serial.print("network status:   "); Serial.println(igh_boron_connecetd_to_network());
    Serial.print("signal strength:  "); Serial.println(igh_boron_ss());
    Serial.print("signal quality:   "); Serial.println(igh_boron_sq());
    Serial.print("Battery Voltage:  "); Serial.println(igh_boron_voltage());
    Serial.print("Battery SOC:      "); Serial.println(igh_boron_SoC());
   d5126:	f003 b8c4 	b.w	d82b2 <_ZN5Print7printlnEfi>
   d512a:	bf00      	nop
   d512c:	000da258 	.word	0x000da258
   d5130:	000da26c 	.word	0x000da26c
   d5134:	000da27f 	.word	0x000da27f
   d5138:	000da292 	.word	0x000da292
   d513c:	000da2a5 	.word	0x000da2a5
   d5140:	000da2b8 	.word	0x000da2b8
   d5144:	000da2cb 	.word	0x000da2cb

000d5148 <_Z17igh_boron_test_idv>:
}

String igh_boron_test_id(void)
{
   d5148:	b510      	push	{r4, lr}
   d514a:	4604      	mov	r4, r0
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d514c:	f002 fc90 	bl	d7a70 <spark_deviceID>
    return System.deviceID();
}
   d5150:	4620      	mov	r0, r4
   d5152:	bd10      	pop	{r4, pc}

000d5154 <_GLOBAL__sub_I_lastSync>:
   d5154:	b570      	push	{r4, r5, r6, lr}
   d5156:	f002 f9b7 	bl	d74c8 <HAL_Pin_Map>
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d515a:	4c10      	ldr	r4, [pc, #64]	; (d519c <_GLOBAL__sub_I_lastSync+0x48>)
   d515c:	4b10      	ldr	r3, [pc, #64]	; (d51a0 <_GLOBAL__sub_I_lastSync+0x4c>)
   d515e:	6023      	str	r3, [r4, #0]
   d5160:	2500      	movs	r5, #0
   d5162:	3328      	adds	r3, #40	; 0x28
   d5164:	4629      	mov	r1, r5
#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)

unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
   d5166:	4e0f      	ldr	r6, [pc, #60]	; (d51a4 <_GLOBAL__sub_I_lastSync+0x50>)
   d5168:	6063      	str	r3, [r4, #4]
   d516a:	2218      	movs	r2, #24
   d516c:	f104 0010 	add.w	r0, r4, #16
   d5170:	60a5      	str	r5, [r4, #8]
   d5172:	60e5      	str	r5, [r4, #12]
   d5174:	f004 fed8 	bl	d9f28 <memset>
   d5178:	4620      	mov	r0, r4
float signal_quality, signal_strength;
FuelGauge fuel;
   d517a:	4c0b      	ldr	r4, [pc, #44]	; (d51a8 <_GLOBAL__sub_I_lastSync+0x54>)
#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)

unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
   d517c:	490b      	ldr	r1, [pc, #44]	; (d51ac <_GLOBAL__sub_I_lastSync+0x58>)
   d517e:	4632      	mov	r2, r6
   d5180:	f004 f840 	bl	d9204 <__aeabi_atexit>
float signal_quality, signal_strength;
FuelGauge fuel;
   d5184:	4629      	mov	r1, r5
   d5186:	4620      	mov	r0, r4
   d5188:	f003 f9fc 	bl	d8584 <_ZN9FuelGaugeC1Eb>
   d518c:	4632      	mov	r2, r6
   d518e:	4620      	mov	r0, r4
   d5190:	4907      	ldr	r1, [pc, #28]	; (d51b0 <_GLOBAL__sub_I_lastSync+0x5c>)
}

String igh_boron_test_id(void)
{
    return System.deviceID();
}
   d5192:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
float signal_quality, signal_strength;
FuelGauge fuel;
   d5196:	f004 b835 	b.w	d9204 <__aeabi_atexit>
   d519a:	bf00      	nop
   d519c:	2003e2e4 	.word	0x2003e2e4
   d51a0:	000da468 	.word	0x000da468
   d51a4:	2003dd80 	.word	0x2003dd80
   d51a8:	2003e310 	.word	0x2003e310
   d51ac:	000d4f81 	.word	0x000d4f81
   d51b0:	000d85a3 	.word	0x000d85a3

000d51b4 <_Z21igh_rfm69_set_bitratehh>:
    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
} 

void igh_rfm69_set_bitrate(uint8_t msb, uint8_t lsb)
{
   d51b4:	b538      	push	{r3, r4, r5, lr}
    igh_radio.writeReg(REG_BITRATEMSB, msb); 
   d51b6:	4c07      	ldr	r4, [pc, #28]	; (d51d4 <_Z21igh_rfm69_set_bitratehh+0x20>)
    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
} 

void igh_rfm69_set_bitrate(uint8_t msb, uint8_t lsb)
{
   d51b8:	460d      	mov	r5, r1
    igh_radio.writeReg(REG_BITRATEMSB, msb); 
   d51ba:	4602      	mov	r2, r0
   d51bc:	2103      	movs	r1, #3
   d51be:	4620      	mov	r0, r4
   d51c0:	f001 fda8 	bl	d6d14 <_ZN5RFM698writeRegEhh>
    igh_radio.writeReg(REG_BITRATELSB, lsb);
   d51c4:	462a      	mov	r2, r5
   d51c6:	4620      	mov	r0, r4
   d51c8:	2104      	movs	r1, #4
}
   d51ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
} 

void igh_rfm69_set_bitrate(uint8_t msb, uint8_t lsb)
{
    igh_radio.writeReg(REG_BITRATEMSB, msb); 
    igh_radio.writeReg(REG_BITRATELSB, lsb);
   d51ce:	f001 bda1 	b.w	d6d14 <_ZN5RFM698writeRegEhh>
   d51d2:	bf00      	nop
   d51d4:	2003e318 	.word	0x2003e318

000d51d8 <_Z25igh_rfm69_set_power_levelh>:
}

void igh_rfm69_set_power_level(uint8_t pwrlvl)
{
    igh_radio.setPowerLevel(pwrlvl);
   d51d8:	4601      	mov	r1, r0
   d51da:	4801      	ldr	r0, [pc, #4]	; (d51e0 <_Z25igh_rfm69_set_power_levelh+0x8>)
   d51dc:	f001 bdac 	b.w	d6d38 <_ZN5RFM6913setPowerLevelEh>
   d51e0:	2003e318 	.word	0x2003e318

000d51e4 <_Z15igh_rfm69_resetv>:
}

void igh_rfm69_reset(void)
{
   d51e4:	b508      	push	{r3, lr}
    digitalWrite(RFM69_RST, HIGH);
   d51e6:	2101      	movs	r1, #1
   d51e8:	2006      	movs	r0, #6
   d51ea:	f003 ff4a 	bl	d9082 <digitalWrite>
    delay(100);
   d51ee:	2064      	movs	r0, #100	; 0x64
   d51f0:	f003 f8f0 	bl	d83d4 <delay>
    digitalWrite(RFM69_RST, LOW);
   d51f4:	2006      	movs	r0, #6
   d51f6:	2100      	movs	r1, #0
   d51f8:	f003 ff43 	bl	d9082 <digitalWrite>
    delay(100);
   d51fc:	2064      	movs	r0, #100	; 0x64
}
   d51fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void igh_rfm69_reset(void)
{
    digitalWrite(RFM69_RST, HIGH);
    delay(100);
    digitalWrite(RFM69_RST, LOW);
    delay(100);
   d5202:	f003 b8e7 	b.w	d83d4 <delay>
	...

000d5208 <_Z15igh_rfm69_setupv>:
uint8_t rfm69_powerlevel  = 10; // default power level, about 100M line of site

RFM69 igh_radio = RFM69(RFM69_CS, RFM69_IRQ, IS_RFM69HCW, RFM69_IRQN);

void igh_rfm69_setup(void)
{
   d5208:	b510      	push	{r4, lr}
    // first reset the module
    pinMode(RFM69_RST, OUTPUT);
   d520a:	2101      	movs	r1, #1
   d520c:	2006      	movs	r0, #6
   d520e:	f003 ff27 	bl	d9060 <pinMode>

    igh_rfm69_reset();
    
    igh_radio.initialize(FREQUENCY,NODEID,NETWORKID);
   d5212:	4c0e      	ldr	r4, [pc, #56]	; (d524c <_Z15igh_rfm69_setupv+0x44>)
void igh_rfm69_setup(void)
{
    // first reset the module
    pinMode(RFM69_RST, OUTPUT);

    igh_rfm69_reset();
   d5214:	f7ff ffe6 	bl	d51e4 <_Z15igh_rfm69_resetv>
    
    igh_radio.initialize(FREQUENCY,NODEID,NETWORKID);
   d5218:	4b0d      	ldr	r3, [pc, #52]	; (d5250 <_Z15igh_rfm69_setupv+0x48>)
   d521a:	4a0e      	ldr	r2, [pc, #56]	; (d5254 <_Z15igh_rfm69_setupv+0x4c>)
   d521c:	781b      	ldrb	r3, [r3, #0]
   d521e:	7812      	ldrb	r2, [r2, #0]
   d5220:	215b      	movs	r1, #91	; 0x5b
   d5222:	4620      	mov	r0, r4
   d5224:	f002 f82c 	bl	d7280 <_ZN5RFM6910initializeEhhh>

    igh_radio.setHighPower(); // This should only be called for RFM69HCW & HW
   d5228:	4620      	mov	r0, r4
   d522a:	2101      	movs	r1, #1
   d522c:	f001 fe8a 	bl	d6f44 <_ZN5RFM6912setHighPowerEb>

    igh_rfm69_set_bitrate(RF_BITRATEMSB_9600, RF_BITRATELSB_9600); // set to 9.6Kbps
   d5230:	2105      	movs	r1, #5
   d5232:	200d      	movs	r0, #13
   d5234:	f7ff ffbe 	bl	d51b4 <_Z21igh_rfm69_set_bitratehh>

    igh_rfm69_set_power_level(rfm69_powerlevel);
   d5238:	4b07      	ldr	r3, [pc, #28]	; (d5258 <_Z15igh_rfm69_setupv+0x50>)
   d523a:	7818      	ldrb	r0, [r3, #0]
   d523c:	f7ff ffcc 	bl	d51d8 <_Z25igh_rfm69_set_power_levelh>

    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
   d5240:	4620      	mov	r0, r4
   d5242:	4906      	ldr	r1, [pc, #24]	; (d525c <_Z15igh_rfm69_setupv+0x54>)
} 
   d5244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    igh_rfm69_set_bitrate(RF_BITRATEMSB_9600, RF_BITRATELSB_9600); // set to 9.6Kbps

    igh_rfm69_set_power_level(rfm69_powerlevel);

    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
   d5248:	f001 bfee 	b.w	d7228 <_ZN5RFM697encryptEPKc>
   d524c:	2003e318 	.word	0x2003e318
   d5250:	2003dd14 	.word	0x2003dd14
   d5254:	2003dd16 	.word	0x2003dd16
   d5258:	2003dd12 	.word	0x2003dd12
   d525c:	000da2de 	.word	0x000da2de

000d5260 <_Z18igh_rfm69_send_pktPhhs>:
    digitalWrite(RFM69_RST, LOW);
    delay(100);
}

void igh_rfm69_send_pkt(uint8_t * pkt, uint8_t len, int16_t rx_id)
{
   d5260:	b537      	push	{r0, r1, r2, r4, r5, lr}
    // send but dont ask for ACK, if ACK is required, use (rx_id, pkt, len, true) as arg
    igh_radio.send(rx_id, pkt, len);
   d5262:	4c08      	ldr	r4, [pc, #32]	; (d5284 <_Z18igh_rfm69_send_pktPhhs+0x24>)
   d5264:	b2d5      	uxtb	r5, r2
   d5266:	2300      	movs	r3, #0
   d5268:	9300      	str	r3, [sp, #0]
   d526a:	4602      	mov	r2, r0
   d526c:	460b      	mov	r3, r1
   d526e:	4620      	mov	r0, r4
   d5270:	4629      	mov	r1, r5
   d5272:	f001 fee1 	bl	d7038 <_ZN5RFM694sendEhPKvhb>
    // listen mode
    igh_radio.receiveDone();
   d5276:	4620      	mov	r0, r4
}
   d5278:	b003      	add	sp, #12
   d527a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
void igh_rfm69_send_pkt(uint8_t * pkt, uint8_t len, int16_t rx_id)
{
    // send but dont ask for ACK, if ACK is required, use (rx_id, pkt, len, true) as arg
    igh_radio.send(rx_id, pkt, len);
    // listen mode
    igh_radio.receiveDone();
   d527e:	f001 be41 	b.w	d6f04 <_ZN5RFM6911receiveDoneEv>
   d5282:	bf00      	nop
   d5284:	2003e318 	.word	0x2003e318

000d5288 <_Z25igh_rfm69_process_rx_dataPh>:
}

uint8_t igh_rfm69_process_rx_data(uint8_t * rx_buffer)
{
   d5288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d528c:	4606      	mov	r6, r0
   d528e:	af00      	add	r7, sp, #0
    if ( igh_radio.receiveDone() )
   d5290:	4821      	ldr	r0, [pc, #132]	; (d5318 <_Z25igh_rfm69_process_rx_dataPh+0x90>)
   d5292:	f001 fe37 	bl	d6f04 <_ZN5RFM6911receiveDoneEv>
   d5296:	4604      	mov	r4, r0
   d5298:	b3b0      	cbz	r0, d5308 <_Z25igh_rfm69_process_rx_dataPh+0x80>
    {
        uint8_t fist_byte = 0;
        uint8_t last_byte = igh_radio.DATALEN - 2; // reduce index by one then move one byte back behind the null terminator
   d529a:	f8df 8088 	ldr.w	r8, [pc, #136]	; d5324 <_Z25igh_rfm69_process_rx_dataPh+0x9c>
        // This forces us to add an extra byte at the end of every transmission to hold the null terminator
        char rx[igh_radio.DATALEN];
        memcpy(rx, (char *)igh_radio.DATA, igh_radio.DATALEN);
   d529e:	491f      	ldr	r1, [pc, #124]	; (d531c <_Z25igh_rfm69_process_rx_dataPh+0x94>)
uint8_t igh_rfm69_process_rx_data(uint8_t * rx_buffer)
{
    if ( igh_radio.receiveDone() )
    {
        uint8_t fist_byte = 0;
        uint8_t last_byte = igh_radio.DATALEN - 2; // reduce index by one then move one byte back behind the null terminator
   d52a0:	f898 4000 	ldrb.w	r4, [r8]
        // This forces us to add an extra byte at the end of every transmission to hold the null terminator
        char rx[igh_radio.DATALEN];
   d52a4:	f898 3000 	ldrb.w	r3, [r8]
        memcpy(rx, (char *)igh_radio.DATA, igh_radio.DATALEN);
   d52a8:	f898 2000 	ldrb.w	r2, [r8]
    if ( igh_radio.receiveDone() )
    {
        uint8_t fist_byte = 0;
        uint8_t last_byte = igh_radio.DATALEN - 2; // reduce index by one then move one byte back behind the null terminator
        // This forces us to add an extra byte at the end of every transmission to hold the null terminator
        char rx[igh_radio.DATALEN];
   d52ac:	3307      	adds	r3, #7
   d52ae:	f023 0307 	bic.w	r3, r3, #7
        }
        else
        {
            igh_radio.receiveDone();
            return 0;
        }
   d52b2:	466d      	mov	r5, sp
    if ( igh_radio.receiveDone() )
    {
        uint8_t fist_byte = 0;
        uint8_t last_byte = igh_radio.DATALEN - 2; // reduce index by one then move one byte back behind the null terminator
        // This forces us to add an extra byte at the end of every transmission to hold the null terminator
        char rx[igh_radio.DATALEN];
   d52b4:	ebad 0d03 	sub.w	sp, sp, r3
        memcpy(rx, (char *)igh_radio.DATA, igh_radio.DATALEN);
   d52b8:	4668      	mov	r0, sp
   d52ba:	f004 fe2a 	bl	d9f12 <memcpy>

        if ( (rx[fist_byte] == START_BYTE) && (rx[last_byte] == END_BYTE))
   d52be:	f89d 3000 	ldrb.w	r3, [sp]
   d52c2:	2b3c      	cmp	r3, #60	; 0x3c
uint8_t igh_rfm69_process_rx_data(uint8_t * rx_buffer)
{
    if ( igh_radio.receiveDone() )
    {
        uint8_t fist_byte = 0;
        uint8_t last_byte = igh_radio.DATALEN - 2; // reduce index by one then move one byte back behind the null terminator
   d52c4:	b2e4      	uxtb	r4, r4
        // This forces us to add an extra byte at the end of every transmission to hold the null terminator
        char rx[igh_radio.DATALEN];
        memcpy(rx, (char *)igh_radio.DATA, igh_radio.DATALEN);

        if ( (rx[fist_byte] == START_BYTE) && (rx[last_byte] == END_BYTE))
   d52c6:	d119      	bne.n	d52fc <_Z25igh_rfm69_process_rx_dataPh+0x74>
   d52c8:	3c02      	subs	r4, #2
   d52ca:	b2e4      	uxtb	r4, r4
   d52cc:	f81d 3004 	ldrb.w	r3, [sp, r4]
   d52d0:	2b3e      	cmp	r3, #62	; 0x3e
   d52d2:	d113      	bne.n	d52fc <_Z25igh_rfm69_process_rx_dataPh+0x74>
        {
            // only copy over valid data
            memcpy(rx_buffer, (uint8_t *)igh_radio.DATA, igh_radio.DATALEN);
   d52d4:	f898 2000 	ldrb.w	r2, [r8]
   d52d8:	4910      	ldr	r1, [pc, #64]	; (d531c <_Z25igh_rfm69_process_rx_dataPh+0x94>)
   d52da:	4630      	mov	r0, r6
   d52dc:	f004 fe19 	bl	d9f12 <memcpy>
            // this should never happen as we will never request for an ACK
            if( igh_radio.ACKRequested() )
   d52e0:	480d      	ldr	r0, [pc, #52]	; (d5318 <_Z25igh_rfm69_process_rx_dataPh+0x90>)
   d52e2:	f001 fcb3 	bl	d6c4c <_ZN5RFM6912ACKRequestedEv>
   d52e6:	b120      	cbz	r0, d52f2 <_Z25igh_rfm69_process_rx_dataPh+0x6a>
            {
                igh_radio.sendACK();
   d52e8:	2200      	movs	r2, #0
   d52ea:	490d      	ldr	r1, [pc, #52]	; (d5320 <_Z25igh_rfm69_process_rx_dataPh+0x98>)
   d52ec:	480a      	ldr	r0, [pc, #40]	; (d5318 <_Z25igh_rfm69_process_rx_dataPh+0x90>)
   d52ee:	f001 fed3 	bl	d7098 <_ZN5RFM697sendACKEPKvh>
            }
            // continue listening
            igh_radio.receiveDone();
   d52f2:	4809      	ldr	r0, [pc, #36]	; (d5318 <_Z25igh_rfm69_process_rx_dataPh+0x90>)
   d52f4:	f001 fe06 	bl	d6f04 <_ZN5RFM6911receiveDoneEv>
            return 1;
   d52f8:	2001      	movs	r0, #1
   d52fa:	e003      	b.n	d5304 <_Z25igh_rfm69_process_rx_dataPh+0x7c>
        }
        else
        {
            igh_radio.receiveDone();
   d52fc:	4806      	ldr	r0, [pc, #24]	; (d5318 <_Z25igh_rfm69_process_rx_dataPh+0x90>)
   d52fe:	f001 fe01 	bl	d6f04 <_ZN5RFM6911receiveDoneEv>
            return 0;
   d5302:	2000      	movs	r0, #0
   d5304:	46ad      	mov	sp, r5
   d5306:	e003      	b.n	d5310 <_Z25igh_rfm69_process_rx_dataPh+0x88>
        
    }
    else
    {
        // nothing to do
        igh_radio.receiveDone();
   d5308:	4803      	ldr	r0, [pc, #12]	; (d5318 <_Z25igh_rfm69_process_rx_dataPh+0x90>)
   d530a:	f001 fdfb 	bl	d6f04 <_ZN5RFM6911receiveDoneEv>
        return 0;
   d530e:	4620      	mov	r0, r4
    } 
}
   d5310:	46bd      	mov	sp, r7
   d5312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5316:	bf00      	nop
   d5318:	2003e318 	.word	0x2003e318
   d531c:	2003e352 	.word	0x2003e352
   d5320:	000da3fd 	.word	0x000da3fd
   d5324:	2003e38f 	.word	0x2003e38f

000d5328 <_Z14igh_rfm69_testv>:

void igh_rfm69_test(void)
{
   d5328:	b507      	push	{r0, r1, r2, lr}
    uint8_t test_data[] = "<TEST>";
   d532a:	4b09      	ldr	r3, [pc, #36]	; (d5350 <_Z14igh_rfm69_testv+0x28>)
   d532c:	6818      	ldr	r0, [r3, #0]
   d532e:	889a      	ldrh	r2, [r3, #4]
   d5330:	799b      	ldrb	r3, [r3, #6]
   d5332:	f88d 3006 	strb.w	r3, [sp, #6]
    igh_rfm69_send_pkt(test_data, sizeof(test_data), TEST_NODE);
   d5336:	4b07      	ldr	r3, [pc, #28]	; (d5354 <_Z14igh_rfm69_testv+0x2c>)
    } 
}

void igh_rfm69_test(void)
{
    uint8_t test_data[] = "<TEST>";
   d5338:	9000      	str	r0, [sp, #0]
   d533a:	f8ad 2004 	strh.w	r2, [sp, #4]
    igh_rfm69_send_pkt(test_data, sizeof(test_data), TEST_NODE);
   d533e:	2107      	movs	r1, #7
   d5340:	f9b3 2000 	ldrsh.w	r2, [r3]
   d5344:	4668      	mov	r0, sp
   d5346:	f7ff ff8b 	bl	d5260 <_Z18igh_rfm69_send_pktPhhs>
    
}
   d534a:	b003      	add	sp, #12
   d534c:	f85d fb04 	ldr.w	pc, [sp], #4
   d5350:	000da2ef 	.word	0x000da2ef
   d5354:	2003dd10 	.word	0x2003dd10

000d5358 <_Z22igh_rfm69_test_servicev>:

uint8_t igh_rfm69_test_service(void)
{
   d5358:	b510      	push	{r4, lr}
    uint8_t expected_resp[] = "<TEST:OK>";
   d535a:	4a11      	ldr	r2, [pc, #68]	; (d53a0 <_Z22igh_rfm69_test_servicev+0x48>)
    igh_rfm69_send_pkt(test_data, sizeof(test_data), TEST_NODE);
    
}

uint8_t igh_rfm69_test_service(void)
{
   d535c:	b086      	sub	sp, #24
    uint8_t expected_resp[] = "<TEST:OK>";
   d535e:	6810      	ldr	r0, [r2, #0]
   d5360:	6851      	ldr	r1, [r2, #4]
   d5362:	8912      	ldrh	r2, [r2, #8]
   d5364:	466b      	mov	r3, sp
   d5366:	c303      	stmia	r3!, {r0, r1}
   d5368:	801a      	strh	r2, [r3, #0]
    uint8_t resp_buffer[10]; // expect a <TEST:OK>
    memset(resp_buffer, '\0', sizeof(resp_buffer));
   d536a:	2300      	movs	r3, #0
   d536c:	9303      	str	r3, [sp, #12]
   d536e:	9304      	str	r3, [sp, #16]
   d5370:	f8ad 3014 	strh.w	r3, [sp, #20]
   d5374:	2405      	movs	r4, #5
    
    for(int i = 0; i < 5; i++)
    {
        if( igh_rfm69_process_rx_data(resp_buffer) ) break;
   d5376:	a803      	add	r0, sp, #12
   d5378:	f7ff ff86 	bl	d5288 <_Z25igh_rfm69_process_rx_dataPh>
   d537c:	b928      	cbnz	r0, d538a <_Z22igh_rfm69_test_servicev+0x32>
        delay(1000); // wait a total of 5 seconds
   d537e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5382:	f003 f827 	bl	d83d4 <delay>
{
    uint8_t expected_resp[] = "<TEST:OK>";
    uint8_t resp_buffer[10]; // expect a <TEST:OK>
    memset(resp_buffer, '\0', sizeof(resp_buffer));
    
    for(int i = 0; i < 5; i++)
   d5386:	3c01      	subs	r4, #1
   d5388:	d1f5      	bne.n	d5376 <_Z22igh_rfm69_test_servicev+0x1e>
    {
        if( igh_rfm69_process_rx_data(resp_buffer) ) break;
        delay(1000); // wait a total of 5 seconds
    }

    if(0 == memcmp(expected_resp, resp_buffer, sizeof(expected_resp)))
   d538a:	220a      	movs	r2, #10
   d538c:	a903      	add	r1, sp, #12
   d538e:	4668      	mov	r0, sp
   d5390:	f004 fdb0 	bl	d9ef4 <memcmp>
   d5394:	fab0 f080 	clz	r0, r0
   d5398:	0940      	lsrs	r0, r0, #5
    else
    {
        return 0;
    }
    
   d539a:	b006      	add	sp, #24
   d539c:	bd10      	pop	{r4, pc}
   d539e:	bf00      	nop
   d53a0:	000da2f6 	.word	0x000da2f6

000d53a4 <_GLOBAL__sub_I_NETWORKID>:
   d53a4:	b508      	push	{r3, lr}
   d53a6:	f002 f88f 	bl	d74c8 <HAL_Pin_Map>
    static volatile byte ACK_REQUESTED;
    static volatile byte ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
    static volatile int RSSI; //most accurate RSSI during reception (closest to the reception)
    static volatile byte _mode; //should be protected?

    RFM69(byte slaveSelectPin=RF69_SPI_CS, byte interruptPin=RF69_IRQ_PIN, bool isRFM69HW=false, byte interruptNum=RF69_IRQ_NUM) {
   d53aa:	4b08      	ldr	r3, [pc, #32]	; (d53cc <_GLOBAL__sub_I_NETWORKID+0x28>)
   d53ac:	4a08      	ldr	r2, [pc, #32]	; (d53d0 <_GLOBAL__sub_I_NETWORKID+0x2c>)
   d53ae:	601a      	str	r2, [r3, #0]
      _slaveSelectPin = slaveSelectPin;
   d53b0:	2211      	movs	r2, #17
      _interruptPin = interruptPin;
      _interruptNum = interruptNum;
      _mode = RF69_MODE_STANDBY;
   d53b2:	4908      	ldr	r1, [pc, #32]	; (d53d4 <_GLOBAL__sub_I_NETWORKID+0x30>)
    static volatile byte ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
    static volatile int RSSI; //most accurate RSSI during reception (closest to the reception)
    static volatile byte _mode; //should be protected?

    RFM69(byte slaveSelectPin=RF69_SPI_CS, byte interruptPin=RF69_IRQ_PIN, bool isRFM69HW=false, byte interruptNum=RF69_IRQ_NUM) {
      _slaveSelectPin = slaveSelectPin;
   d53b4:	711a      	strb	r2, [r3, #4]
      _interruptPin = interruptPin;
   d53b6:	2208      	movs	r2, #8
   d53b8:	715a      	strb	r2, [r3, #5]
      _interruptNum = interruptNum;
   d53ba:	719a      	strb	r2, [r3, #6]
      _mode = RF69_MODE_STANDBY;
   d53bc:	2201      	movs	r2, #1
   d53be:	700a      	strb	r2, [r1, #0]
      _promiscuousMode = false;
   d53c0:	2100      	movs	r1, #0
   d53c2:	7219      	strb	r1, [r3, #8]
      _powerLevel = 31;
   d53c4:	211f      	movs	r1, #31
   d53c6:	7259      	strb	r1, [r3, #9]
      _isRFM69HW = isRFM69HW;
   d53c8:	729a      	strb	r2, [r3, #10]
   d53ca:	bd08      	pop	{r3, pc}
   d53cc:	2003e318 	.word	0x2003e318
   d53d0:	000da308 	.word	0x000da308
   d53d4:	2003e390 	.word	0x2003e390

000d53d8 <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
   d53d8:	f002 b876 	b.w	d74c8 <HAL_Pin_Map>

000d53dc <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d53dc:	f002 b874 	b.w	d74c8 <HAL_Pin_Map>

000d53e0 <_GLOBAL__sub_I__ZN7istream3getEv>:
   d53e0:	f002 b872 	b.w	d74c8 <HAL_Pin_Map>

000d53e4 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d53e4:	b510      	push	{r4, lr}
   d53e6:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d53e8:	3024      	adds	r0, #36	; 0x24
   d53ea:	f000 ff9d 	bl	d6328 <_ZN8FatCache4syncEv>
   d53ee:	b128      	cbz	r0, d53fc <_ZN9FatVolume9cacheSyncEv+0x18>
   d53f0:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d53f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d53f8:	f000 bf96 	b.w	d6328 <_ZN8FatCache4syncEv>
  }
   d53fc:	bd10      	pop	{r4, pc}

000d53fe <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d53fe:	1e41      	subs	r1, r0, #1
   d5400:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d5404:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d5406:	0843      	lsrs	r3, r0, #1
   d5408:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d540c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d5410:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d5414:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d5416:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d5418:	d1f5      	bne.n	d5406 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d541a:	4770      	bx	lr

000d541c <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d541c:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   d541e:	68cb      	ldr	r3, [r1, #12]
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d5420:	4604      	mov	r4, r0
   d5422:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   d5424:	b923      	cbnz	r3, d5430 <_ZN7FatFile11openClusterEPS_+0x14>
    return openRoot(file->m_vol);
   d5426:	6889      	ldr	r1, [r1, #8]
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   d5428:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
   d542c:	f000 bc09 	b.w	d5c42 <_ZN7FatFile8openRootEP9FatVolume>
  }
  memset(this, 0, sizeof(FatFile));
   d5430:	2224      	movs	r2, #36	; 0x24
   d5432:	2100      	movs	r1, #0
   d5434:	f004 fd78 	bl	d9f28 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   d5438:	2310      	movs	r3, #16
  m_flags = F_READ;
   d543a:	2001      	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attr = FILE_ATTR_SUBDIR;
   d543c:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   d543e:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   d5440:	68ab      	ldr	r3, [r5, #8]
   d5442:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   d5444:	68eb      	ldr	r3, [r5, #12]
   d5446:	6223      	str	r3, [r4, #32]
  return true;
}
   d5448:	bd38      	pop	{r3, r4, r5, pc}
	...

000d544c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d544c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d5450:	7803      	ldrb	r3, [r0, #0]
   d5452:	2b20      	cmp	r3, #32
   d5454:	f100 0401 	add.w	r4, r0, #1
   d5458:	d101      	bne.n	d545e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d545a:	4620      	mov	r0, r4
   d545c:	e7f8      	b.n	d5450 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d545e:	4f70      	ldr	r7, [pc, #448]	; (d5620 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d5460:	6088      	str	r0, [r1, #8]
   d5462:	4605      	mov	r5, r0
   d5464:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d5466:	462e      	mov	r6, r5
   d5468:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d546c:	b30b      	cbz	r3, d54b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d546e:	2b2f      	cmp	r3, #47	; 0x2f
   d5470:	d101      	bne.n	d5476 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d5472:	1903      	adds	r3, r0, r4
   d5474:	e017      	b.n	d54a6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d5476:	2b5c      	cmp	r3, #92	; 0x5c
   d5478:	d102      	bne.n	d5480 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d547a:	2000      	movs	r0, #0
   d547c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d5480:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d5484:	b2e4      	uxtb	r4, r4
   d5486:	2c1d      	cmp	r4, #29
   d5488:	d803      	bhi.n	d5492 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d548a:	fa27 f404 	lsr.w	r4, r7, r4
   d548e:	07e4      	lsls	r4, r4, #31
   d5490:	d4f3      	bmi.n	d547a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d5492:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d5496:	2c3c      	cmp	r4, #60	; 0x3c
   d5498:	d0ef      	beq.n	d547a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d549a:	3b20      	subs	r3, #32
   d549c:	2b5e      	cmp	r3, #94	; 0x5e
   d549e:	d9e1      	bls.n	d5464 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d54a0:	e7eb      	b.n	d547a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d54a2:	2d2f      	cmp	r5, #47	; 0x2f
   d54a4:	d105      	bne.n	d54b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d54a6:	461e      	mov	r6, r3
   d54a8:	f813 5b01 	ldrb.w	r5, [r3], #1
   d54ac:	2d20      	cmp	r5, #32
   d54ae:	d1f8      	bne.n	d54a2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d54b0:	e7f9      	b.n	d54a6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d54b2:	6016      	str	r6, [r2, #0]
   d54b4:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d54b6:	4298      	cmp	r0, r3
   d54b8:	ebc0 0803 	rsb	r8, r0, r3
   d54bc:	d009      	beq.n	d54d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d54be:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d54c2:	2a2e      	cmp	r2, #46	; 0x2e
   d54c4:	d0f7      	beq.n	d54b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d54c6:	2a20      	cmp	r2, #32
   d54c8:	d0f5      	beq.n	d54b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d54ca:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d54ce:	dcd4      	bgt.n	d547a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d54d0:	e001      	b.n	d54d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d54d2:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d54d6:	f8c1 8004 	str.w	r8, [r1, #4]
   d54da:	f101 030c 	add.w	r3, r1, #12
   d54de:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d54e2:	2420      	movs	r4, #32
   d54e4:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d54e8:	4293      	cmp	r3, r2
   d54ea:	d1fb      	bne.n	d54e4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d54ec:	4603      	mov	r3, r0
   d54ee:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d54f0:	f813 4b01 	ldrb.w	r4, [r3], #1
   d54f4:	2c2e      	cmp	r4, #46	; 0x2e
   d54f6:	d0fa      	beq.n	d54ee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d54f8:	2c20      	cmp	r4, #32
   d54fa:	d0f8      	beq.n	d54ee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d54fc:	fab2 f482 	clz	r4, r2
   d5500:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d5502:	f108 36ff 	add.w	r6, r8, #4294967295
   d5506:	1c73      	adds	r3, r6, #1
   d5508:	d107      	bne.n	d551a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d550a:	2700      	movs	r7, #0
   d550c:	f04f 0e07 	mov.w	lr, #7
   d5510:	463d      	mov	r5, r7
   d5512:	46ba      	mov	sl, r7
   d5514:	f04f 0908 	mov.w	r9, #8
   d5518:	e009      	b.n	d552e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d551a:	5d83      	ldrb	r3, [r0, r6]
   d551c:	2b2e      	cmp	r3, #46	; 0x2e
   d551e:	d0f4      	beq.n	d550a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d5520:	3e01      	subs	r6, #1
   d5522:	e7f0      	b.n	d5506 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d5524:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d5526:	2b20      	cmp	r3, #32
   d5528:	d104      	bne.n	d5534 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d552a:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d552c:	3201      	adds	r2, #1
   d552e:	4542      	cmp	r2, r8
   d5530:	dbf8      	blt.n	d5524 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d5532:	e04b      	b.n	d55cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d5534:	2b2e      	cmp	r3, #46	; 0x2e
   d5536:	d102      	bne.n	d553e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d5538:	42b2      	cmp	r2, r6
   d553a:	d1f6      	bne.n	d552a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d553c:	e003      	b.n	d5546 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d553e:	2b22      	cmp	r3, #34	; 0x22
   d5540:	d017      	beq.n	d5572 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d5542:	2b7c      	cmp	r3, #124	; 0x7c
   d5544:	d015      	beq.n	d5572 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d5546:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d554a:	f1bc 0f05 	cmp.w	ip, #5
   d554e:	d801      	bhi.n	d5554 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d5550:	2b2d      	cmp	r3, #45	; 0x2d
   d5552:	d10e      	bne.n	d5572 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d5554:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d5558:	f1bc 0f05 	cmp.w	ip, #5
   d555c:	d909      	bls.n	d5572 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d555e:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d5562:	f1bc 0f02 	cmp.w	ip, #2
   d5566:	d904      	bls.n	d5572 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d5568:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d556c:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d5570:	d902      	bls.n	d5578 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d5572:	42b2      	cmp	r2, r6
   d5574:	d10e      	bne.n	d5594 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d5576:	e049      	b.n	d560c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d5578:	42b2      	cmp	r2, r6
   d557a:	d047      	beq.n	d560c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d557c:	4575      	cmp	r5, lr
   d557e:	d821      	bhi.n	d55c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d5580:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d5584:	f1bc 0f19 	cmp.w	ip, #25
   d5588:	d808      	bhi.n	d559c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d558a:	3b20      	subs	r3, #32
   d558c:	b2db      	uxtb	r3, r3
        lc |= bit;
   d558e:	ea49 0707 	orr.w	r7, r9, r7
   d5592:	e00a      	b.n	d55aa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d5594:	4575      	cmp	r5, lr
   d5596:	d815      	bhi.n	d55c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d5598:	2400      	movs	r4, #0
      c = '_';
   d559a:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d559c:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d55a0:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d55a4:	bf98      	it	ls
   d55a6:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d55aa:	f105 0c01 	add.w	ip, r5, #1
   d55ae:	fa5f fc8c 	uxtb.w	ip, ip
   d55b2:	440d      	add	r5, r1
      if (i < 7) {
   d55b4:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d55b8:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d55ba:	d801      	bhi.n	d55c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d55bc:	f881 c00c 	strb.w	ip, [r1, #12]
   d55c0:	4665      	mov	r5, ip
   d55c2:	e7b3      	b.n	d552c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d55c4:	f1be 0f0a 	cmp.w	lr, #10
   d55c8:	d117      	bne.n	d55fa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d55ca:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d55cc:	7b4b      	ldrb	r3, [r1, #13]
   d55ce:	2b20      	cmp	r3, #32
   d55d0:	f43f af53 	beq.w	d547a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d55d4:	b13c      	cbz	r4, d55e6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d55d6:	ea1a 0f07 	tst.w	sl, r7
   d55da:	bf18      	it	ne
   d55dc:	2702      	movne	r7, #2
   d55de:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d55e0:	2001      	movs	r0, #1
   d55e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d55e6:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d55e8:	2001      	movs	r0, #1
   d55ea:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d55ec:	4419      	add	r1, r3
   d55ee:	237e      	movs	r3, #126	; 0x7e
   d55f0:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d55f2:	2331      	movs	r3, #49	; 0x31
   d55f4:	738b      	strb	r3, [r1, #14]
   d55f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d55fa:	42b2      	cmp	r2, r6
   d55fc:	dce5      	bgt.n	d55ca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d55fe:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d5600:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d5604:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d5606:	f04f 0910 	mov.w	r9, #16
   d560a:	e78e      	b.n	d552a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d560c:	f1be 0f0a 	cmp.w	lr, #10
   d5610:	d0db      	beq.n	d55ca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d5612:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d5614:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d5618:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d561a:	f04f 0910 	mov.w	r9, #16
   d561e:	e785      	b.n	d552c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d5620:	31000101 	.word	0x31000101

000d5624 <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d5624:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5626:	b08b      	sub	sp, #44	; 0x2c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5628:	2300      	movs	r3, #0
   d562a:	f88d 3004 	strb.w	r3, [sp, #4]
   d562e:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5632:	7803      	ldrb	r3, [r0, #0]
   d5634:	0719      	lsls	r1, r3, #28

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d5636:	4604      	mov	r4, r0
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5638:	d508      	bpl.n	d564c <_ZN7FatFile6removeEv+0x28>
   d563a:	7883      	ldrb	r3, [r0, #2]
   d563c:	079a      	lsls	r2, r3, #30
   d563e:	d505      	bpl.n	d564c <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   d5640:	6a01      	ldr	r1, [r0, #32]
   d5642:	b129      	cbz	r1, d5650 <_ZN7FatFile6removeEv+0x2c>
   d5644:	68a0      	ldr	r0, [r4, #8]
   d5646:	f000 ff60 	bl	d650a <_ZN9FatVolume9freeChainEm>
   d564a:	b908      	cbnz	r0, d5650 <_ZN7FatFile6removeEv+0x2c>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   d564c:	2000      	movs	r0, #0
   d564e:	e049      	b.n	d56e4 <_ZN7FatFile6removeEv+0xc0>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d5650:	2101      	movs	r1, #1
   d5652:	4620      	mov	r0, r4
   d5654:	f000 fabc 	bl	d5bd0 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d5658:	4605      	mov	r5, r0
   d565a:	2800      	cmp	r0, #0
   d565c:	d0f6      	beq.n	d564c <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
   d565e:	f7ff fece 	bl	d53fe <_ZN7FatFile11lfnChecksumEPh>

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;
   d5662:	26e5      	movs	r6, #229	; 0xe5
   d5664:	702e      	strb	r6, [r5, #0]

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
   d5666:	2300      	movs	r3, #0
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
   d5668:	4607      	mov	r7, r0

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
   d566a:	7023      	strb	r3, [r4, #0]

  // Write entry to device.
  if (!m_vol->cacheSync()) {
   d566c:	68a0      	ldr	r0, [r4, #8]
   d566e:	f7ff feb9 	bl	d53e4 <_ZN9FatVolume9cacheSyncEv>
   d5672:	2800      	cmp	r0, #0
   d5674:	d0ea      	beq.n	d564c <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
   d5676:	78e3      	ldrb	r3, [r4, #3]
   d5678:	2b00      	cmp	r3, #0
   d567a:	d033      	beq.n	d56e4 <_ZN7FatFile6removeEv+0xc0>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
   d567c:	4621      	mov	r1, r4
   d567e:	a801      	add	r0, sp, #4
   d5680:	f7ff fecc 	bl	d541c <_ZN7FatFile11openClusterEPS_>
   d5684:	2800      	cmp	r0, #0
   d5686:	d0e1      	beq.n	d564c <_ZN7FatFile6removeEv+0x28>
   d5688:	2501      	movs	r5, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d568a:	78e3      	ldrb	r3, [r4, #3]
   d568c:	42ab      	cmp	r3, r5
   d568e:	d3dd      	bcc.n	d564c <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   d5690:	88a1      	ldrh	r1, [r4, #4]
   d5692:	1b49      	subs	r1, r1, r5
   d5694:	0149      	lsls	r1, r1, #5
   d5696:	a801      	add	r0, sp, #4
   d5698:	f000 fbce 	bl	d5e38 <_ZN7FatFile7seekSetEm>
   d569c:	2800      	cmp	r0, #0
   d569e:	d0d5      	beq.n	d564c <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   d56a0:	2100      	movs	r1, #0
   d56a2:	a801      	add	r0, sp, #4
   d56a4:	f000 fbab 	bl	d5dfe <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d56a8:	2800      	cmp	r0, #0
   d56aa:	d0cf      	beq.n	d564c <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d56ac:	7ac3      	ldrb	r3, [r0, #11]
   d56ae:	2b0f      	cmp	r3, #15
   d56b0:	d1cc      	bne.n	d564c <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   d56b2:	7802      	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d56b4:	f002 031f 	and.w	r3, r2, #31
   d56b8:	429d      	cmp	r5, r3
   d56ba:	d1c7      	bne.n	d564c <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   d56bc:	7b43      	ldrb	r3, [r0, #13]
   d56be:	42bb      	cmp	r3, r7
   d56c0:	d1c4      	bne.n	d564c <_ZN7FatFile6removeEv+0x28>
        chksum != ldir->chksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->ord & LDIR_ORD_LAST_LONG_ENTRY;
    ldir->ord = DIR_NAME_DELETED;
   d56c2:	7006      	strb	r6, [r0, #0]
    m_vol->cacheDirty();
   d56c4:	68a1      	ldr	r1, [r4, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d56c6:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   d56ca:	f043 0301 	orr.w	r3, r3, #1
   d56ce:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   d56d2:	0653      	lsls	r3, r2, #25
   d56d4:	d503      	bpl.n	d56de <_ZN7FatFile6removeEv+0xba>
      if (!m_vol->cacheSync()) {
   d56d6:	68a0      	ldr	r0, [r4, #8]
   d56d8:	f7ff fe84 	bl	d53e4 <_ZN9FatVolume9cacheSyncEv>
   d56dc:	e002      	b.n	d56e4 <_ZN7FatFile6removeEv+0xc0>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d56de:	3501      	adds	r5, #1
   d56e0:	b2ed      	uxtb	r5, r5
   d56e2:	e7d2      	b.n	d568a <_ZN7FatFile6removeEv+0x66>
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
}
   d56e4:	b00b      	add	sp, #44	; 0x2c
   d56e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d56e8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d56e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d56ec:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d56f0:	4606      	mov	r6, r0
   d56f2:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d56f4:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d56f6:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d56f8:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d56fc:	6869      	ldr	r1, [r5, #4]
   d56fe:	68aa      	ldr	r2, [r5, #8]
   d5700:	1863      	adds	r3, r4, r1
   d5702:	b29b      	uxth	r3, r3
   d5704:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d5706:	4291      	cmp	r1, r2
   d5708:	d006      	beq.n	d5718 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d570a:	f812 0b01 	ldrb.w	r0, [r2], #1
   d570e:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d5712:	4043      	eors	r3, r0
   d5714:	b29b      	uxth	r3, r3
   d5716:	e7f6      	b.n	d5706 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d5718:	f1b9 0f03 	cmp.w	r9, #3
   d571c:	bf28      	it	cs
   d571e:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5722:	f109 0204 	add.w	r2, r9, #4
   d5726:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d5728:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d572c:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d572e:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5730:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5732:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5734:	bf94      	ite	ls
   d5736:	3130      	addls	r1, #48	; 0x30
   d5738:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d573a:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d573c:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d573e:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5742:	d3f1      	bcc.n	d5728 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d5744:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d5748:	2100      	movs	r1, #0
   d574a:	735f      	strb	r7, [r3, #13]
   d574c:	4630      	mov	r0, r6
   d574e:	f000 fb73 	bl	d5e38 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d5752:	2101      	movs	r1, #1
   d5754:	4630      	mov	r0, r6
   d5756:	f000 fb52 	bl	d5dfe <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d575a:	4601      	mov	r1, r0
   d575c:	b928      	cbnz	r0, d576a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d575e:	7870      	ldrb	r0, [r6, #1]
   d5760:	fab0 f080 	clz	r0, r0
   d5764:	0940      	lsrs	r0, r0, #5
   d5766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d576a:	7803      	ldrb	r3, [r0, #0]
   d576c:	b14b      	cbz	r3, d5782 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d576e:	7ac3      	ldrb	r3, [r0, #11]
   d5770:	071b      	lsls	r3, r3, #28
   d5772:	d4ee      	bmi.n	d5752 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d5774:	220b      	movs	r2, #11
   d5776:	4640      	mov	r0, r8
   d5778:	f004 fbbc 	bl	d9ef4 <memcmp>
   d577c:	2800      	cmp	r0, #0
   d577e:	d1e8      	bne.n	d5752 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d5780:	e002      	b.n	d5788 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d5782:	2001      	movs	r0, #1
   d5784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d5788:	3401      	adds	r4, #1
   d578a:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d578c:	2c64      	cmp	r4, #100	; 0x64
   d578e:	d1b5      	bne.n	d56fc <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d5790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5794 <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d5794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5798:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d579a:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d579c:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d579e:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d57a2:	9005      	str	r0, [sp, #20]
   d57a4:	460e      	mov	r6, r1
   d57a6:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d57a8:	d101      	bne.n	d57ae <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d57aa:	2000      	movs	r0, #0
   d57ac:	e1a0      	b.n	d5af0 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d57ae:	9b05      	ldr	r3, [sp, #20]
   d57b0:	781b      	ldrb	r3, [r3, #0]
   d57b2:	2b00      	cmp	r3, #0
   d57b4:	d1f9      	bne.n	d57aa <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d57b6:	6853      	ldr	r3, [r2, #4]
   d57b8:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d57ba:	7813      	ldrb	r3, [r2, #0]
   d57bc:	079b      	lsls	r3, r3, #30
   d57be:	f000 818d 	beq.w	d5adc <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d57c2:	9b02      	ldr	r3, [sp, #8]
   d57c4:	270d      	movs	r7, #13
   d57c6:	330c      	adds	r3, #12
   d57c8:	fbb3 f7f7 	udiv	r7, r3, r7
   d57cc:	3701      	adds	r7, #1
   d57ce:	b2ff      	uxtb	r7, r7
   d57d0:	2100      	movs	r1, #0
   d57d2:	4630      	mov	r0, r6
   d57d4:	f000 fb30 	bl	d5e38 <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d57d8:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d57dc:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d57e0:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d57e4:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d57e6:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d57e8:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d57ea:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d57ee:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d57f0:	6972      	ldr	r2, [r6, #20]
   d57f2:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d57f4:	2101      	movs	r1, #1
   d57f6:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d57f8:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d57fc:	f000 faff 	bl	d5dfe <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d5800:	9b07      	ldr	r3, [sp, #28]
   d5802:	b920      	cbnz	r0, d580e <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d5804:	7873      	ldrb	r3, [r6, #1]
   d5806:	2b00      	cmp	r3, #0
   d5808:	f000 8090 	beq.w	d592c <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d580c:	e7cd      	b.n	d57aa <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d580e:	7802      	ldrb	r2, [r0, #0]
   d5810:	2ae5      	cmp	r2, #229	; 0xe5
   d5812:	d000      	beq.n	d5816 <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d5814:	b942      	cbnz	r2, d5828 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d5816:	2c00      	cmp	r4, #0
   d5818:	bf08      	it	eq
   d581a:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d581c:	42bc      	cmp	r4, r7
        freeFound++;
   d581e:	bf3c      	itt	cc
   d5820:	3401      	addcc	r4, #1
   d5822:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d5824:	b922      	cbnz	r2, d5830 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d5826:	e081      	b.n	d592c <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d5828:	42bc      	cmp	r4, r7
   d582a:	bf38      	it	cc
   d582c:	2400      	movcc	r4, #0
   d582e:	e003      	b.n	d5838 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d5830:	2ae5      	cmp	r2, #229	; 0xe5
   d5832:	d101      	bne.n	d5838 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d5834:	2500      	movs	r5, #0
   d5836:	e7db      	b.n	d57f0 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d5838:	2a2e      	cmp	r2, #46	; 0x2e
   d583a:	d0fb      	beq.n	d5834 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d583c:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d583e:	290f      	cmp	r1, #15
   d5840:	d152      	bne.n	d58e8 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d5842:	b93d      	cbnz	r5, d5854 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d5844:	0651      	lsls	r1, r2, #25
   d5846:	d5d3      	bpl.n	d57f0 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d5848:	7b43      	ldrb	r3, [r0, #13]
   d584a:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d584c:	f002 051f 	and.w	r5, r2, #31
   d5850:	462b      	mov	r3, r5
   d5852:	e007      	b.n	d5864 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d5854:	3b01      	subs	r3, #1
   d5856:	b2db      	uxtb	r3, r3
   d5858:	429a      	cmp	r2, r3
   d585a:	d1eb      	bne.n	d5834 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d585c:	7b42      	ldrb	r2, [r0, #13]
   d585e:	9903      	ldr	r1, [sp, #12]
   d5860:	4291      	cmp	r1, r2
   d5862:	d1e7      	bne.n	d5834 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d5864:	1e5a      	subs	r2, r3, #1
   d5866:	f04f 0c0d 	mov.w	ip, #13
   d586a:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d586e:	9a02      	ldr	r2, [sp, #8]
   d5870:	4562      	cmp	r2, ip
   d5872:	d9df      	bls.n	d5834 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5874:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d5878:	f1be 0f04 	cmp.w	lr, #4
   d587c:	fa5f f28e 	uxtb.w	r2, lr
   d5880:	d804      	bhi.n	d588c <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d5882:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d5886:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d588a:	e00c      	b.n	d58a6 <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d588c:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d588e:	bf95      	itete	ls
   d5890:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d5894:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d5898:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d589c:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d58a0:	bf94      	ite	ls
   d58a2:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d58a4:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d58a6:	9902      	ldr	r1, [sp, #8]
   d58a8:	4561      	cmp	r1, ip
   d58aa:	d103      	bne.n	d58b4 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d58ac:	2a00      	cmp	r2, #0
   d58ae:	bf18      	it	ne
   d58b0:	2500      	movne	r5, #0
   d58b2:	e79d      	b.n	d57f0 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d58b4:	2aff      	cmp	r2, #255	; 0xff
   d58b6:	d8bd      	bhi.n	d5834 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d58b8:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d58ba:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d58be:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d58c0:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d58c4:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d58c8:	bf98      	it	ls
   d58ca:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d58cc:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d58d0:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d58d4:	bf98      	it	ls
   d58d6:	b2d2      	uxtbls	r2, r2
   d58d8:	f1bc 0f19 	cmp.w	ip, #25
   d58dc:	bf9c      	itt	ls
   d58de:	3120      	addls	r1, #32
   d58e0:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d58e2:	4291      	cmp	r1, r2
   d58e4:	d1a6      	bne.n	d5834 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d58e6:	e0fb      	b.n	d5ae0 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d58e8:	0709      	lsls	r1, r1, #28
   d58ea:	d4a3      	bmi.n	d5834 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d58ec:	b14d      	cbz	r5, d5902 <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d58ee:	2b01      	cmp	r3, #1
   d58f0:	f47f af5b 	bne.w	d57aa <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d58f4:	f7ff fd83 	bl	d53fe <_ZN7FatFile11lfnChecksumEPh>
   d58f8:	9b03      	ldr	r3, [sp, #12]
   d58fa:	4283      	cmp	r3, r0
   d58fc:	f47f af55 	bne.w	d57aa <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d5900:	e00f      	b.n	d5922 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d5902:	220b      	movs	r2, #11
   d5904:	9906      	ldr	r1, [sp, #24]
   d5906:	9307      	str	r3, [sp, #28]
   d5908:	f004 faf4 	bl	d9ef4 <memcmp>
   d590c:	9b07      	ldr	r3, [sp, #28]
   d590e:	2800      	cmp	r0, #0
   d5910:	f47f af6e 	bne.w	d57f0 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d5914:	f899 2000 	ldrb.w	r2, [r9]
   d5918:	07d2      	lsls	r2, r2, #31
   d591a:	d502      	bpl.n	d5922 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d591c:	2201      	movs	r2, #1
   d591e:	9204      	str	r2, [sp, #16]
   d5920:	e766      	b.n	d57f0 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d5922:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d5926:	f000 80d1 	beq.w	d5acc <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d592a:	e73e      	b.n	d57aa <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d592c:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d5930:	f43f af3b 	beq.w	d57aa <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d5934:	f00b 0303 	and.w	r3, fp, #3
   d5938:	3b01      	subs	r3, #1
   d593a:	2b01      	cmp	r3, #1
   d593c:	f63f af35 	bhi.w	d57aa <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d5940:	2c00      	cmp	r4, #0
   d5942:	bf08      	it	eq
   d5944:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d5946:	42bc      	cmp	r4, r7
   d5948:	d302      	bcc.n	d5950 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d594a:	9b04      	ldr	r3, [sp, #16]
   d594c:	b9cb      	cbnz	r3, d5982 <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d594e:	e01f      	b.n	d5990 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d5950:	2100      	movs	r1, #0
   d5952:	4630      	mov	r0, r6
   d5954:	f000 fa53 	bl	d5dfe <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d5958:	b910      	cbnz	r0, d5960 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d595a:	7873      	ldrb	r3, [r6, #1]
   d595c:	b15b      	cbz	r3, d5976 <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d595e:	e724      	b.n	d57aa <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d5960:	3401      	adds	r4, #1
   d5962:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d5964:	e7ef      	b.n	d5946 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d5966:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d5968:	791b      	ldrb	r3, [r3, #4]
   d596a:	2b01      	cmp	r3, #1
   d596c:	d8ed      	bhi.n	d594a <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d596e:	3410      	adds	r4, #16
   d5970:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d5972:	42a7      	cmp	r7, r4
   d5974:	d9e9      	bls.n	d594a <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d5976:	4630      	mov	r0, r6
   d5978:	f000 f8ea 	bl	d5b50 <_ZN7FatFile13addDirClusterEv>
   d597c:	2800      	cmp	r0, #0
   d597e:	d1f2      	bne.n	d5966 <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d5980:	e713      	b.n	d57aa <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d5982:	4649      	mov	r1, r9
   d5984:	4630      	mov	r0, r6
   d5986:	f7ff feaf 	bl	d56e8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d598a:	2800      	cmp	r0, #0
   d598c:	f43f af0d 	beq.w	d57aa <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d5990:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d5994:	4630      	mov	r0, r6
   d5996:	f000 fa4f 	bl	d5e38 <_ZN7FatFile7seekSetEm>
   d599a:	2800      	cmp	r0, #0
   d599c:	f43f af05 	beq.w	d57aa <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d59a0:	1e7d      	subs	r5, r7, #1
   d59a2:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d59a4:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d59a6:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d59aa:	f04f 080f 	mov.w	r8, #15
   d59ae:	e041      	b.n	d5a34 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d59b0:	2100      	movs	r1, #0
   d59b2:	4630      	mov	r0, r6
   d59b4:	f000 fa23 	bl	d5dfe <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d59b8:	4607      	mov	r7, r0
   d59ba:	2800      	cmp	r0, #0
   d59bc:	f43f aef5 	beq.w	d57aa <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d59c0:	68b2      	ldr	r2, [r6, #8]
   d59c2:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d59c6:	42ac      	cmp	r4, r5
   d59c8:	f043 0301 	orr.w	r3, r3, #1
   d59cc:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d59d0:	bf0c      	ite	eq
   d59d2:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d59d6:	4622      	movne	r2, r4
   d59d8:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d59da:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d59de:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d59e2:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d59e6:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d59e8:	f7ff fd09 	bl	d53fe <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d59ec:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d59ee:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d59f0:	f887 a01a 	strb.w	sl, [r7, #26]
   d59f4:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d59f8:	f002 021f 	and.w	r2, r2, #31
   d59fc:	230d      	movs	r3, #13
   d59fe:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d5a00:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5a04:	435a      	muls	r2, r3
   d5a06:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d5a08:	9902      	ldr	r1, [sp, #8]
   d5a0a:	4291      	cmp	r1, r2
   d5a0c:	d915      	bls.n	d5a3a <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d5a0e:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d5a12:	2b04      	cmp	r3, #4
   d5a14:	fa5f fc83 	uxtb.w	ip, r3
   d5a18:	f103 0001 	add.w	r0, r3, #1
   d5a1c:	d813      	bhi.n	d5a46 <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d5a1e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d5a22:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d5a26:	280d      	cmp	r0, #13
   d5a28:	f102 0201 	add.w	r2, r2, #1
   d5a2c:	4603      	mov	r3, r0
   d5a2e:	d1eb      	bne.n	d5a08 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d5a30:	3c01      	subs	r4, #1
   d5a32:	b2e4      	uxtb	r4, r4
   d5a34:	2c00      	cmp	r4, #0
   d5a36:	d1bb      	bne.n	d59b0 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d5a38:	e00e      	b.n	d5a58 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d5a3a:	bf14      	ite	ne
   d5a3c:	f04f 31ff 	movne.w	r1, #4294967295
   d5a40:	2100      	moveq	r1, #0
   d5a42:	b289      	uxth	r1, r1
   d5a44:	e7e5      	b.n	d5a12 <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d5a46:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d5a4a:	bf94      	ite	ls
   d5a4c:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d5a50:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d5a54:	8099      	strh	r1, [r3, #4]
   d5a56:	e7e6      	b.n	d5a26 <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d5a58:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d5a5a:	4621      	mov	r1, r4
   d5a5c:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d5a5e:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d5a62:	f000 f9cc 	bl	d5dfe <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d5a66:	4607      	mov	r7, r0
   d5a68:	2800      	cmp	r0, #0
   d5a6a:	f43f ae9e 	beq.w	d57aa <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d5a6e:	2220      	movs	r2, #32
   d5a70:	4621      	mov	r1, r4
   d5a72:	f004 fa59 	bl	d9f28 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d5a76:	464b      	mov	r3, r9
   d5a78:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d5a7c:	603a      	str	r2, [r7, #0]
   d5a7e:	685a      	ldr	r2, [r3, #4]
   d5a80:	607a      	str	r2, [r7, #4]
   d5a82:	891a      	ldrh	r2, [r3, #8]
   d5a84:	813a      	strh	r2, [r7, #8]
   d5a86:	7a9b      	ldrb	r3, [r3, #10]
   d5a88:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d5a8a:	f899 3000 	ldrb.w	r3, [r9]
   d5a8e:	f003 0318 	and.w	r3, r3, #24
   d5a92:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d5a94:	4b18      	ldr	r3, [pc, #96]	; (d5af8 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d5a96:	681b      	ldr	r3, [r3, #0]
   d5a98:	b12b      	cbz	r3, d5aa6 <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d5a9a:	f107 010e 	add.w	r1, r7, #14
   d5a9e:	f107 0010 	add.w	r0, r7, #16
   d5aa2:	4798      	blx	r3
   d5aa4:	e006      	b.n	d5ab4 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d5aa6:	2321      	movs	r3, #33	; 0x21
   d5aa8:	743b      	strb	r3, [r7, #16]
   d5aaa:	2328      	movs	r3, #40	; 0x28
   d5aac:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d5aae:	2308      	movs	r3, #8
   d5ab0:	73bc      	strb	r4, [r7, #14]
   d5ab2:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d5ab4:	8a3b      	ldrh	r3, [r7, #16]
   d5ab6:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d5ab8:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d5aba:	89fb      	ldrh	r3, [r7, #14]
   d5abc:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d5abe:	68b2      	ldr	r2, [r6, #8]
   d5ac0:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d5ac4:	f043 0301 	orr.w	r3, r3, #1
   d5ac8:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d5acc:	9500      	str	r5, [sp, #0]
   d5ace:	465b      	mov	r3, fp
   d5ad0:	4652      	mov	r2, sl
   d5ad2:	4631      	mov	r1, r6
   d5ad4:	9805      	ldr	r0, [sp, #20]
   d5ad6:	f000 f9f8 	bl	d5eca <_ZN7FatFile15openCachedEntryEPS_tih>
   d5ada:	e009      	b.n	d5af0 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d5adc:	2701      	movs	r7, #1
   d5ade:	e677      	b.n	d57d0 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d5ae0:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d5ae4:	f1be 0f0d 	cmp.w	lr, #13
   d5ae8:	f43f ae82 	beq.w	d57f0 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5aec:	46d4      	mov	ip, sl
   d5aee:	e6c3      	b.n	d5878 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d5af0:	b009      	add	sp, #36	; 0x24
   d5af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5af6:	bf00      	nop
   d5af8:	2003e32c 	.word	0x2003e32c

000d5afc <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d5afc:	f001 bce4 	b.w	d74c8 <HAL_Pin_Map>

000d5b00 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d5b00:	f001 bce2 	b.w	d74c8 <HAL_Pin_Map>

000d5b04 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d5b04:	f001 bce0 	b.w	d74c8 <HAL_Pin_Map>

000d5b08 <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   d5b08:	b510      	push	{r4, lr}
   d5b0a:	460c      	mov	r4, r1
   d5b0c:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   d5b0e:	b909      	cbnz	r1, d5b14 <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   d5b10:	2000      	movs	r0, #0
   d5b12:	bd10      	pop	{r4, pc}
  dir_t* dir;
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
   d5b14:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   d5b18:	d004      	beq.n	d5b24 <_ZN7FatFile6getSFNEPc+0x1c>
    name[0] = '/';
   d5b1a:	232f      	movs	r3, #47	; 0x2f
   d5b1c:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   d5b1e:	2300      	movs	r3, #0
   d5b20:	7063      	strb	r3, [r4, #1]
   d5b22:	e006      	b.n	d5b32 <_ZN7FatFile6getSFNEPc+0x2a>
    return true;
  }
  // cache entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   d5b24:	f000 f854 	bl	d5bd0 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d5b28:	2800      	cmp	r0, #0
   d5b2a:	d0f1      	beq.n	d5b10 <_ZN7FatFile6getSFNEPc+0x8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  dirName(dir, name);
   d5b2c:	4621      	mov	r1, r4
   d5b2e:	f000 f85e 	bl	d5bee <_ZN7FatFile7dirNameEPK14directoryEntryPc>
  return true;
   d5b32:	2001      	movs	r0, #1

fail:
  return false;
}
   d5b34:	bd10      	pop	{r4, pc}

000d5b36 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d5b36:	f001 bcc7 	b.w	d74c8 <HAL_Pin_Map>

000d5b3a <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5b3a:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5b3c:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5b3e:	f043 0304 	orr.w	r3, r3, #4
   d5b42:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5b44:	f100 0210 	add.w	r2, r0, #16
   d5b48:	6880      	ldr	r0, [r0, #8]
   d5b4a:	f000 bca3 	b.w	d6494 <_ZN9FatVolume15allocateClusterEmPm>
	...

000d5b50 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d5b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d5b54:	7803      	ldrb	r3, [r0, #0]
   d5b56:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d5b5a:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d5b5c:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d5b60:	b10b      	cbz	r3, d5b66 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d5b62:	2600      	movs	r6, #0
   d5b64:	e02e      	b.n	d5bc4 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d5b66:	6942      	ldr	r2, [r0, #20]
   d5b68:	4b18      	ldr	r3, [pc, #96]	; (d5bcc <_ZN7FatFile13addDirClusterEv+0x7c>)
   d5b6a:	429a      	cmp	r2, r3
   d5b6c:	d8f9      	bhi.n	d5b62 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d5b6e:	f7ff ffe4 	bl	d5b3a <_ZN7FatFile10addClusterEv>
   d5b72:	4606      	mov	r6, r0
   d5b74:	2800      	cmp	r0, #0
   d5b76:	d0f4      	beq.n	d5b62 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d5b78:	6921      	ldr	r1, [r4, #16]
   d5b7a:	68a0      	ldr	r0, [r4, #8]
   d5b7c:	f000 fc1f 	bl	d63be <_ZNK9FatVolume17clusterFirstBlockEm>
   d5b80:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5b82:	68a0      	ldr	r0, [r4, #8]
   d5b84:	2205      	movs	r2, #5
   d5b86:	4639      	mov	r1, r7
   d5b88:	3024      	adds	r0, #36	; 0x24
   d5b8a:	f000 fbf4 	bl	d6376 <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d5b8e:	4680      	mov	r8, r0
   d5b90:	2800      	cmp	r0, #0
   d5b92:	d0e6      	beq.n	d5b62 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d5b94:	4629      	mov	r1, r5
   d5b96:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5b9a:	f004 f9c5 	bl	d9f28 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d5b9e:	2501      	movs	r5, #1
   d5ba0:	68a3      	ldr	r3, [r4, #8]
   d5ba2:	791a      	ldrb	r2, [r3, #4]
   d5ba4:	42aa      	cmp	r2, r5
   d5ba6:	d909      	bls.n	d5bbc <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5ba8:	4642      	mov	r2, r8
   d5baa:	19e9      	adds	r1, r5, r7
   d5bac:	6818      	ldr	r0, [r3, #0]
   d5bae:	f000 ff5f 	bl	d6a70 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d5bb2:	2800      	cmp	r0, #0
   d5bb4:	d0d5      	beq.n	d5b62 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d5bb6:	3501      	adds	r5, #1
   d5bb8:	b2ed      	uxtb	r5, r5
   d5bba:	e7f1      	b.n	d5ba0 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d5bbc:	6963      	ldr	r3, [r4, #20]
   d5bbe:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d5bc2:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d5bc4:	4630      	mov	r0, r6
   d5bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5bca:	bf00      	nop
   d5bcc:	001ffdff 	.word	0x001ffdff

000d5bd0 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d5bd0:	b510      	push	{r4, lr}
   d5bd2:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5bd4:	6880      	ldr	r0, [r0, #8]
   d5bd6:	460a      	mov	r2, r1
   d5bd8:	3024      	adds	r0, #36	; 0x24
   d5bda:	69a1      	ldr	r1, [r4, #24]
   d5bdc:	f000 fbcb 	bl	d6376 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d5be0:	b120      	cbz	r0, d5bec <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d5be2:	88a3      	ldrh	r3, [r4, #4]
   d5be4:	f003 030f 	and.w	r3, r3, #15
   d5be8:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d5bec:	bd10      	pop	{r4, pc}

000d5bee <_ZN7FatFile7dirNameEPK14directoryEntryPc>:

fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   d5bee:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5bf0:	2400      	movs	r4, #0
   d5bf2:	1e45      	subs	r5, r0, #1
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
   d5bf4:	2608      	movs	r6, #8
fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
   d5bf6:	4623      	mov	r3, r4
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
   d5bf8:	272e      	movs	r7, #46	; 0x2e
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
   d5bfa:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d5bfe:	2a20      	cmp	r2, #32
   d5c00:	d018      	beq.n	d5c34 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x46>
      continue;
    }
    if (i == 8) {
   d5c02:	2c08      	cmp	r4, #8
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
   d5c04:	bf02      	ittt	eq
   d5c06:	54cf      	strbeq	r7, [r1, r3]
   d5c08:	1c5a      	addeq	r2, r3, #1
   d5c0a:	b2d3      	uxtbeq	r3, r2
    }
    char c = dir->name[i];
   d5c0c:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   d5c0e:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
   d5c12:	bf08      	it	eq
   d5c14:	2610      	moveq	r6, #16
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   d5c16:	f1be 0f19 	cmp.w	lr, #25
   d5c1a:	d806      	bhi.n	d5c2a <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3c>
   d5c1c:	f890 e00c 	ldrb.w	lr, [r0, #12]
   d5c20:	ea16 0f0e 	tst.w	r6, lr
      c += 'a' - 'A';
   d5c24:	bf1c      	itt	ne
   d5c26:	3220      	addne	r2, #32
   d5c28:	b2d2      	uxtbne	r2, r2
    }
    name[j++] = c;
   d5c2a:	f103 0e01 	add.w	lr, r3, #1
   d5c2e:	54ca      	strb	r2, [r1, r3]
   d5c30:	fa5f f38e 	uxtb.w	r3, lr
   d5c34:	3401      	adds	r4, #1
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
   d5c36:	2c0b      	cmp	r4, #11
   d5c38:	d1df      	bne.n	d5bfa <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xc>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
   d5c3a:	2200      	movs	r2, #0
   d5c3c:	54ca      	strb	r2, [r1, r3]
  return j;
}
   d5c3e:	4618      	mov	r0, r3
   d5c40:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5c42 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d5c42:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d5c44:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d5c46:	4605      	mov	r5, r0
   d5c48:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d5c4a:	b984      	cbnz	r4, d5c6e <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d5c4c:	2224      	movs	r2, #36	; 0x24
   d5c4e:	4621      	mov	r1, r4
   d5c50:	f004 f96a 	bl	d9f28 <memset>

  m_vol = vol;
   d5c54:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d5c56:	79f3      	ldrb	r3, [r6, #7]
   d5c58:	2b10      	cmp	r3, #16
   d5c5a:	d003      	beq.n	d5c64 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d5c5c:	2b20      	cmp	r3, #32
   d5c5e:	d106      	bne.n	d5c6e <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d5c60:	2340      	movs	r3, #64	; 0x40
   d5c62:	e000      	b.n	d5c66 <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d5c64:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d5c66:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d5c68:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d5c6a:	70a8      	strb	r0, [r5, #2]
   d5c6c:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d5c6e:	2000      	movs	r0, #0
   d5c70:	bd70      	pop	{r4, r5, r6, pc}

000d5c72 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d5c72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5c76:	7803      	ldrb	r3, [r0, #0]
   d5c78:	4604      	mov	r4, r0
   d5c7a:	4689      	mov	r9, r1
   d5c7c:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d5c7e:	b14b      	cbz	r3, d5c94 <_ZN7FatFile4readEPvj+0x22>
   d5c80:	7882      	ldrb	r2, [r0, #2]
   d5c82:	07d1      	lsls	r1, r2, #31
   d5c84:	d506      	bpl.n	d5c94 <_ZN7FatFile4readEPvj+0x22>
   d5c86:	e00c      	b.n	d5ca2 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5c88:	465a      	mov	r2, fp
   d5c8a:	6921      	ldr	r1, [r4, #16]
   d5c8c:	f000 fb9d 	bl	d63ca <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d5c90:	2800      	cmp	r0, #0
   d5c92:	da3d      	bge.n	d5d10 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d5c94:	7863      	ldrb	r3, [r4, #1]
   d5c96:	f043 0302 	orr.w	r3, r3, #2
   d5c9a:	7063      	strb	r3, [r4, #1]
  return -1;
   d5c9c:	f04f 30ff 	mov.w	r0, #4294967295
   d5ca0:	e097      	b.n	d5dd2 <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d5ca2:	071a      	lsls	r2, r3, #28
   d5ca4:	d503      	bpl.n	d5cae <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d5ca6:	69e3      	ldr	r3, [r4, #28]
   d5ca8:	6962      	ldr	r2, [r4, #20]
   d5caa:	1a9b      	subs	r3, r3, r2
   d5cac:	e007      	b.n	d5cbe <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d5cae:	069a      	lsls	r2, r3, #26
   d5cb0:	d508      	bpl.n	d5cc4 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d5cb2:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d5cb4:	891a      	ldrh	r2, [r3, #8]
   d5cb6:	6963      	ldr	r3, [r4, #20]
   d5cb8:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d5cbc:	b29b      	uxth	r3, r3
   d5cbe:	429d      	cmp	r5, r3
   d5cc0:	bf28      	it	cs
   d5cc2:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d5cc4:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d5cc6:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5cca:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d5cce:	2e00      	cmp	r6, #0
   d5cd0:	d035      	beq.n	d5d3e <_ZN7FatFile4readEPvj+0xcc>
   d5cd2:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d5cd4:	6963      	ldr	r3, [r4, #20]
   d5cd6:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d5cd8:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d5cdc:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d5ce0:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d5ce4:	d002      	beq.n	d5cec <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d5ce6:	6a03      	ldr	r3, [r0, #32]
   d5ce8:	4419      	add	r1, r3
   d5cea:	e01d      	b.n	d5d28 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5cec:	f890 8005 	ldrb.w	r8, [r0, #5]
   d5cf0:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d5cf4:	f1ba 0f00 	cmp.w	sl, #0
   d5cf8:	d110      	bne.n	d5d1c <_ZN7FatFile4readEPvj+0xaa>
   d5cfa:	f1b8 0f00 	cmp.w	r8, #0
   d5cfe:	d10d      	bne.n	d5d1c <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d5d00:	2b00      	cmp	r3, #0
   d5d02:	d1c1      	bne.n	d5c88 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5d04:	0653      	lsls	r3, r2, #25
   d5d06:	bf4c      	ite	mi
   d5d08:	6a03      	ldrmi	r3, [r0, #32]
   d5d0a:	6a23      	ldrpl	r3, [r4, #32]
   d5d0c:	6123      	str	r3, [r4, #16]
   d5d0e:	e005      	b.n	d5d1c <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d5d10:	d104      	bne.n	d5d1c <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d5d12:	7823      	ldrb	r3, [r4, #0]
   d5d14:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5d18:	d111      	bne.n	d5d3e <_ZN7FatFile4readEPvj+0xcc>
   d5d1a:	e7bb      	b.n	d5c94 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5d1c:	6921      	ldr	r1, [r4, #16]
   d5d1e:	68a0      	ldr	r0, [r4, #8]
   d5d20:	f000 fb4d 	bl	d63be <_ZNK9FatVolume17clusterFirstBlockEm>
   d5d24:	eb08 0100 	add.w	r1, r8, r0
   d5d28:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d5d2a:	f1ba 0f00 	cmp.w	sl, #0
   d5d2e:	d135      	bne.n	d5d9c <_ZN7FatFile4readEPvj+0x12a>
   d5d30:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5d34:	d332      	bcc.n	d5d9c <_ZN7FatFile4readEPvj+0x12a>
   d5d36:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5d38:	4299      	cmp	r1, r3
   d5d3a:	d102      	bne.n	d5d42 <_ZN7FatFile4readEPvj+0xd0>
   d5d3c:	e02e      	b.n	d5d9c <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d5d3e:	1ba8      	subs	r0, r5, r6
   d5d40:	e047      	b.n	d5dd2 <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d5d42:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5d46:	d31b      	bcc.n	d5d80 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d5d48:	7822      	ldrb	r2, [r4, #0]
   d5d4a:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d5d4c:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d5d50:	d406      	bmi.n	d5d60 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d5d52:	7902      	ldrb	r2, [r0, #4]
   d5d54:	ebc8 0202 	rsb	r2, r8, r2
   d5d58:	b2d2      	uxtb	r2, r2
   d5d5a:	4592      	cmp	sl, r2
   d5d5c:	bf28      	it	cs
   d5d5e:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5d60:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d5d62:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5d66:	d207      	bcs.n	d5d78 <_ZN7FatFile4readEPvj+0x106>
   d5d68:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d5d6a:	4653      	mov	r3, sl
   d5d6c:	464a      	mov	r2, r9
   d5d6e:	6800      	ldr	r0, [r0, #0]
   d5d70:	f000 fe3c 	bl	d69ec <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d5d74:	b960      	cbnz	r0, d5d90 <_ZN7FatFile4readEPvj+0x11e>
   d5d76:	e78d      	b.n	d5c94 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5d78:	4453      	add	r3, sl
   d5d7a:	4299      	cmp	r1, r3
   d5d7c:	d321      	bcc.n	d5dc2 <_ZN7FatFile4readEPvj+0x150>
   d5d7e:	e7f3      	b.n	d5d68 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d5d80:	464a      	mov	r2, r9
   d5d82:	6800      	ldr	r0, [r0, #0]
   d5d84:	f000 fdea 	bl	d695c <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d5d88:	2800      	cmp	r0, #0
   d5d8a:	d083      	beq.n	d5c94 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d5d8c:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d5d90:	6963      	ldr	r3, [r4, #20]
   d5d92:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d5d94:	44b9      	add	r9, r7
    m_curPosition += n;
   d5d96:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d5d98:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d5d9a:	e798      	b.n	d5cce <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5d9c:	2200      	movs	r2, #0
   d5d9e:	3024      	adds	r0, #36	; 0x24
   d5da0:	f000 fae9 	bl	d6376 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d5da4:	2800      	cmp	r0, #0
   d5da6:	f43f af75 	beq.w	d5c94 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d5daa:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d5dae:	42b7      	cmp	r7, r6
   d5db0:	bf28      	it	cs
   d5db2:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d5db4:	eb00 010a 	add.w	r1, r0, sl
   d5db8:	463a      	mov	r2, r7
   d5dba:	4648      	mov	r0, r9
   d5dbc:	f004 f8a9 	bl	d9f12 <memcpy>
   d5dc0:	e7e6      	b.n	d5d90 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5dc2:	3024      	adds	r0, #36	; 0x24
   d5dc4:	9101      	str	r1, [sp, #4]
   d5dc6:	f000 faaf 	bl	d6328 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d5dca:	9901      	ldr	r1, [sp, #4]
   d5dcc:	2800      	cmp	r0, #0
   d5dce:	d1cb      	bne.n	d5d68 <_ZN7FatFile4readEPvj+0xf6>
   d5dd0:	e760      	b.n	d5c94 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d5dd2:	b003      	add	sp, #12
   d5dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5dd8 <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d5dd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d5dda:	2201      	movs	r2, #1
   d5ddc:	f10d 0107 	add.w	r1, sp, #7
   d5de0:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d5de2:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d5de4:	6905      	ldr	r5, [r0, #16]
   d5de6:	f7ff ff44 	bl	d5c72 <_ZN7FatFile4readEPvj>
   d5dea:	2801      	cmp	r0, #1
   d5dec:	bf05      	ittet	eq
   d5dee:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d5df2:	6166      	streq	r6, [r4, #20]
   d5df4:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = pos->cluster;
   d5df8:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d5dfa:	b002      	add	sp, #8
   d5dfc:	bd70      	pop	{r4, r5, r6, pc}

000d5dfe <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d5dfe:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d5e00:	6943      	ldr	r3, [r0, #20]
   d5e02:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d5e06:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d5e08:	b105      	cbz	r5, d5e0c <_ZN7FatFile12readDirCacheEb+0xe>
   d5e0a:	b969      	cbnz	r1, d5e28 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d5e0c:	2201      	movs	r2, #1
   d5e0e:	f10d 0107 	add.w	r1, sp, #7
   d5e12:	4620      	mov	r0, r4
   d5e14:	f7ff ff2d 	bl	d5c72 <_ZN7FatFile4readEPvj>
   d5e18:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d5e1a:	2801      	cmp	r0, #1
   d5e1c:	d001      	beq.n	d5e22 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d5e1e:	2000      	movs	r0, #0
   d5e20:	e008      	b.n	d5e34 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d5e22:	6963      	ldr	r3, [r4, #20]
   d5e24:	331f      	adds	r3, #31
   d5e26:	e000      	b.n	d5e2a <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d5e28:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d5e2a:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d5e2c:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d5e2e:	3030      	adds	r0, #48	; 0x30
   d5e30:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d5e34:	b003      	add	sp, #12
   d5e36:	bd30      	pop	{r4, r5, pc}

000d5e38 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5e3c:	460e      	mov	r6, r1
   d5e3e:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d5e40:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5e42:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d5e44:	2900      	cmp	r1, #0
   d5e46:	d039      	beq.n	d5ebc <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d5e48:	6945      	ldr	r5, [r0, #20]
   d5e4a:	42b5      	cmp	r5, r6
   d5e4c:	d03a      	beq.n	d5ec4 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d5e4e:	b90e      	cbnz	r6, d5e54 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d5e50:	6106      	str	r6, [r0, #16]
    goto done;
   d5e52:	e031      	b.n	d5eb8 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d5e54:	070b      	lsls	r3, r1, #28
   d5e56:	d503      	bpl.n	d5e60 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d5e58:	69c3      	ldr	r3, [r0, #28]
   d5e5a:	429e      	cmp	r6, r3
   d5e5c:	d82e      	bhi.n	d5ebc <_ZN7FatFile7seekSetEm+0x84>
   d5e5e:	e007      	b.n	d5e70 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d5e60:	0688      	lsls	r0, r1, #26
   d5e62:	d505      	bpl.n	d5e70 <_ZN7FatFile7seekSetEm+0x38>
   d5e64:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d5e66:	891b      	ldrh	r3, [r3, #8]
   d5e68:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d5e6c:	d826      	bhi.n	d5ebc <_ZN7FatFile7seekSetEm+0x84>
   d5e6e:	e023      	b.n	d5eb8 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5e70:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d5e74:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d5e78:	1e6a      	subs	r2, r5, #1
   d5e7a:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5e7e:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5e80:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5e82:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d5e84:	429a      	cmp	r2, r3
   d5e86:	d800      	bhi.n	d5e8a <_ZN7FatFile7seekSetEm+0x52>
   d5e88:	b94d      	cbnz	r5, d5e9e <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5e8a:	064a      	lsls	r2, r1, #25
   d5e8c:	bf4c      	ite	mi
   d5e8e:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d5e92:	6a22      	ldrpl	r2, [r4, #32]
   d5e94:	6122      	str	r2, [r4, #16]
   d5e96:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5e98:	f104 0810 	add.w	r8, r4, #16
   d5e9c:	e00a      	b.n	d5eb4 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d5e9e:	1a9b      	subs	r3, r3, r2
   d5ea0:	e7f9      	b.n	d5e96 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5ea2:	4642      	mov	r2, r8
   d5ea4:	6921      	ldr	r1, [r4, #16]
   d5ea6:	68a0      	ldr	r0, [r4, #8]
   d5ea8:	f000 fa8f 	bl	d63ca <_ZN9FatVolume6fatGetEmPm>
   d5eac:	2800      	cmp	r0, #0
   d5eae:	f105 35ff 	add.w	r5, r5, #4294967295
   d5eb2:	dd03      	ble.n	d5ebc <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d5eb4:	2d00      	cmp	r5, #0
   d5eb6:	d1f4      	bne.n	d5ea2 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d5eb8:	6166      	str	r6, [r4, #20]
   d5eba:	e003      	b.n	d5ec4 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d5ebc:	6127      	str	r7, [r4, #16]
  return false;
   d5ebe:	2000      	movs	r0, #0
   d5ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d5ec4:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d5ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5eca <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d5eca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5ecc:	460f      	mov	r7, r1
   d5ece:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d5ed0:	2100      	movs	r1, #0
   d5ed2:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d5ed4:	4604      	mov	r4, r0
   d5ed6:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d5ed8:	f004 f826 	bl	d9f28 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d5edc:	68b8      	ldr	r0, [r7, #8]
   d5ede:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5ee0:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d5ee4:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5ee6:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d5eea:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d5eec:	6a3b      	ldr	r3, [r7, #32]
   d5eee:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5ef0:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d5ef2:	7acb      	ldrb	r3, [r1, #11]
   d5ef4:	071d      	lsls	r5, r3, #28
   d5ef6:	d44c      	bmi.n	d5f92 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d5ef8:	1883      	adds	r3, r0, r2
   d5efa:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d5efe:	f003 0317 	and.w	r3, r3, #23
   d5f02:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d5f04:	7ac9      	ldrb	r1, [r1, #11]
   d5f06:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d5f0a:	bf04      	itt	eq
   d5f0c:	f043 0308 	orreq.w	r3, r3, #8
   d5f10:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d5f12:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d5f16:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d5f18:	f006 0303 	and.w	r3, r6, #3
   d5f1c:	2b01      	cmp	r3, #1
   d5f1e:	d009      	beq.n	d5f34 <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d5f20:	2b02      	cmp	r3, #2
   d5f22:	d005      	beq.n	d5f30 <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d5f24:	2b00      	cmp	r3, #0
   d5f26:	d134      	bne.n	d5f92 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d5f28:	0571      	lsls	r1, r6, #21
   d5f2a:	d432      	bmi.n	d5f92 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d5f2c:	2301      	movs	r3, #1
   d5f2e:	e002      	b.n	d5f36 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d5f30:	2303      	movs	r3, #3
   d5f32:	e000      	b.n	d5f36 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d5f34:	2302      	movs	r3, #2
   d5f36:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d5f38:	78a1      	ldrb	r1, [r4, #2]
   d5f3a:	078b      	lsls	r3, r1, #30
   d5f3c:	d503      	bpl.n	d5f46 <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d5f3e:	7823      	ldrb	r3, [r4, #0]
   d5f40:	f013 0f11 	tst.w	r3, #17
   d5f44:	d125      	bne.n	d5f92 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d5f46:	b24b      	sxtb	r3, r1
   d5f48:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d5f4c:	f006 0108 	and.w	r1, r6, #8
   d5f50:	bf14      	ite	ne
   d5f52:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d5f56:	2700      	moveq	r7, #0
   d5f58:	4319      	orrs	r1, r3
   d5f5a:	4339      	orrs	r1, r7
   d5f5c:	70a1      	strb	r1, [r4, #2]
   d5f5e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d5f60:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d5f62:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d5f64:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d5f66:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d5f6a:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d5f6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d5f72:	d504      	bpl.n	d5f7e <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d5f74:	b181      	cbz	r1, d5f98 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d5f76:	f000 fac8 	bl	d650a <_ZN9FatVolume9freeChainEm>
   d5f7a:	b968      	cbnz	r0, d5f98 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d5f7c:	e009      	b.n	d5f92 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d5f7e:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d5f80:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d5f82:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d5f84:	0473      	lsls	r3, r6, #17
   d5f86:	d50c      	bpl.n	d5fa2 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d5f88:	69e1      	ldr	r1, [r4, #28]
   d5f8a:	4620      	mov	r0, r4
   d5f8c:	f7ff ff54 	bl	d5e38 <_ZN7FatFile7seekSetEm>
   d5f90:	b938      	cbnz	r0, d5fa2 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d5f92:	2000      	movs	r0, #0
   d5f94:	7020      	strb	r0, [r4, #0]
  return false;
   d5f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d5f98:	78a3      	ldrb	r3, [r4, #2]
   d5f9a:	f043 0304 	orr.w	r3, r3, #4
   d5f9e:	70a3      	strb	r3, [r4, #2]
   d5fa0:	e7f0      	b.n	d5f84 <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d5fa2:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d5fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5fa6 <_ZN7FatFile8openNextEPS_i>:
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   d5fa6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   d5faa:	7803      	ldrb	r3, [r0, #0]
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   d5fac:	4606      	mov	r6, r0
   d5fae:	460d      	mov	r5, r1
   d5fb0:	4617      	mov	r7, r2
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   d5fb2:	bb53      	cbnz	r3, d600a <_ZN7FatFile8openNextEPS_i+0x64>
   d5fb4:	780b      	ldrb	r3, [r1, #0]
   d5fb6:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5fba:	d026      	beq.n	d600a <_ZN7FatFile8openNextEPS_i+0x64>
   d5fbc:	694c      	ldr	r4, [r1, #20]
   d5fbe:	f014 041f 	ands.w	r4, r4, #31
   d5fc2:	d122      	bne.n	d600a <_ZN7FatFile8openNextEPS_i+0x64>
   d5fc4:	46a0      	mov	r8, r4
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    dir_t* dir = dirFile->readDirCache();
   d5fc6:	2100      	movs	r1, #0
   d5fc8:	4628      	mov	r0, r5
   d5fca:	f8d5 9014 	ldr.w	r9, [r5, #20]
   d5fce:	f7ff ff16 	bl	d5dfe <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d5fd2:	b1d0      	cbz	r0, d600a <_ZN7FatFile8openNextEPS_i+0x64>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
   d5fd4:	7803      	ldrb	r3, [r0, #0]
   d5fd6:	b1c3      	cbz	r3, d600a <_ZN7FatFile8openNextEPS_i+0x64>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   d5fd8:	2b2e      	cmp	r3, #46	; 0x2e
   d5fda:	d101      	bne.n	d5fe0 <_ZN7FatFile8openNextEPS_i+0x3a>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
        lfnOrd = ldir->ord & 0X1F;
        chksum = ldir->chksum;
      }
    } else {
      lfnOrd = 0;
   d5fdc:	2400      	movs	r4, #0
   d5fde:	e7f2      	b.n	d5fc6 <_ZN7FatFile8openNextEPS_i+0x20>
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   d5fe0:	2be5      	cmp	r3, #229	; 0xe5
   d5fe2:	d0fb      	beq.n	d5fdc <_ZN7FatFile8openNextEPS_i+0x36>
   d5fe4:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d5fe6:	f011 0f08 	tst.w	r1, #8
   d5fea:	d105      	bne.n	d5ff8 <_ZN7FatFile8openNextEPS_i+0x52>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   d5fec:	b17c      	cbz	r4, d600e <_ZN7FatFile8openNextEPS_i+0x68>
   d5fee:	f7ff fa06 	bl	d53fe <_ZN7FatFile11lfnChecksumEPh>
   d5ff2:	4580      	cmp	r8, r0
   d5ff4:	d109      	bne.n	d600a <_ZN7FatFile8openNextEPS_i+0x64>
   d5ff6:	e00a      	b.n	d600e <_ZN7FatFile8openNextEPS_i+0x68>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d5ff8:	290f      	cmp	r1, #15
   d5ffa:	d1ef      	bne.n	d5fdc <_ZN7FatFile8openNextEPS_i+0x36>
      ldir = reinterpret_cast<ldir_t*>(dir);
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   d5ffc:	0659      	lsls	r1, r3, #25
   d5ffe:	d5e2      	bpl.n	d5fc6 <_ZN7FatFile8openNextEPS_i+0x20>
        lfnOrd = ldir->ord & 0X1F;
   d6000:	f003 041f 	and.w	r4, r3, #31
        chksum = ldir->chksum;
   d6004:	f890 800d 	ldrb.w	r8, [r0, #13]
   d6008:	e7dd      	b.n	d5fc6 <_ZN7FatFile8openNextEPS_i+0x20>
      lfnOrd = 0;
    }
  }

fail:
  return false;
   d600a:	2000      	movs	r0, #0
   d600c:	e007      	b.n	d601e <_ZN7FatFile8openNextEPS_i+0x78>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   d600e:	9400      	str	r4, [sp, #0]
   d6010:	463b      	mov	r3, r7
   d6012:	f3c9 124f 	ubfx	r2, r9, #5, #16
   d6016:	4629      	mov	r1, r5
   d6018:	4630      	mov	r0, r6
   d601a:	f7ff ff56 	bl	d5eca <_ZN7FatFile15openCachedEntryEPS_tih>
    }
  }

fail:
  return false;
}
   d601e:	b003      	add	sp, #12
   d6020:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6024 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d6024:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d6026:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d6028:	4604      	mov	r4, r0
  if (!isOpen()) {
   d602a:	b90b      	cbnz	r3, d6030 <_ZN7FatFile4syncEv+0xc>
    return true;
   d602c:	2001      	movs	r0, #1
   d602e:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d6030:	7883      	ldrb	r3, [r0, #2]
   d6032:	075a      	lsls	r2, r3, #29
   d6034:	d523      	bpl.n	d607e <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d6036:	2101      	movs	r1, #1
   d6038:	f7ff fdca 	bl	d5bd0 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d603c:	4605      	mov	r5, r0
   d603e:	b928      	cbnz	r0, d604c <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d6040:	7863      	ldrb	r3, [r4, #1]
   d6042:	f043 0301 	orr.w	r3, r3, #1
   d6046:	7063      	strb	r3, [r4, #1]
  return false;
   d6048:	2000      	movs	r0, #0
   d604a:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d604c:	7803      	ldrb	r3, [r0, #0]
   d604e:	2be5      	cmp	r3, #229	; 0xe5
   d6050:	d0f6      	beq.n	d6040 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d6052:	7823      	ldrb	r3, [r4, #0]
   d6054:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d6056:	bf44      	itt	mi
   d6058:	69e3      	ldrmi	r3, [r4, #28]
   d605a:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d605c:	8c23      	ldrh	r3, [r4, #32]
   d605e:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d6060:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d6062:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d6064:	4b09      	ldr	r3, [pc, #36]	; (d608c <_ZN7FatFile4syncEv+0x68>)
   d6066:	681b      	ldr	r3, [r3, #0]
   d6068:	b12b      	cbz	r3, d6076 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d606a:	f100 0116 	add.w	r1, r0, #22
   d606e:	3018      	adds	r0, #24
   d6070:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d6072:	8b2b      	ldrh	r3, [r5, #24]
   d6074:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d6076:	78a3      	ldrb	r3, [r4, #2]
   d6078:	f023 0304 	bic.w	r3, r3, #4
   d607c:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d607e:	68a0      	ldr	r0, [r4, #8]
   d6080:	f7ff f9b0 	bl	d53e4 <_ZN9FatVolume9cacheSyncEv>
   d6084:	2800      	cmp	r0, #0
   d6086:	d0db      	beq.n	d6040 <_ZN7FatFile4syncEv+0x1c>
   d6088:	e7d0      	b.n	d602c <_ZN7FatFile4syncEv+0x8>
   d608a:	bf00      	nop
   d608c:	2003e32c 	.word	0x2003e32c

000d6090 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d6090:	b510      	push	{r4, lr}
   d6092:	4604      	mov	r4, r0
  bool rtn = sync();
   d6094:	f7ff ffc6 	bl	d6024 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d6098:	2300      	movs	r3, #0
   d609a:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d609c:	bd10      	pop	{r4, pc}

000d609e <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d609e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d60a0:	b093      	sub	sp, #76	; 0x4c
   d60a2:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d60a4:	2300      	movs	r3, #0
   d60a6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d60aa:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d60ae:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d60b0:	9201      	str	r2, [sp, #4]
   d60b2:	4606      	mov	r6, r0
   d60b4:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d60b6:	b10b      	cbz	r3, d60bc <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d60b8:	2000      	movs	r0, #0
   d60ba:	e03d      	b.n	d6138 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d60bc:	780b      	ldrb	r3, [r1, #0]
   d60be:	f013 0f70 	tst.w	r3, #112	; 0x70
   d60c2:	d0f9      	beq.n	d60b8 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d60c4:	7813      	ldrb	r3, [r2, #0]
   d60c6:	2b2f      	cmp	r3, #47	; 0x2f
   d60c8:	d112      	bne.n	d60f0 <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d60ca:	9b01      	ldr	r3, [sp, #4]
   d60cc:	781a      	ldrb	r2, [r3, #0]
   d60ce:	2a2f      	cmp	r2, #47	; 0x2f
   d60d0:	d102      	bne.n	d60d8 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d60d2:	3301      	adds	r3, #1
   d60d4:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d60d6:	e7f8      	b.n	d60ca <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d60d8:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d60da:	b91a      	cbnz	r2, d60e4 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d60dc:	4630      	mov	r0, r6
   d60de:	f7ff fdb0 	bl	d5c42 <_ZN7FatFile8openRootEP9FatVolume>
   d60e2:	e029      	b.n	d6138 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d60e4:	a809      	add	r0, sp, #36	; 0x24
   d60e6:	f7ff fdac 	bl	d5c42 <_ZN7FatFile8openRootEP9FatVolume>
   d60ea:	2800      	cmp	r0, #0
   d60ec:	d0e4      	beq.n	d60b8 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d60ee:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d60f0:	aa01      	add	r2, sp, #4
   d60f2:	a903      	add	r1, sp, #12
   d60f4:	9801      	ldr	r0, [sp, #4]
   d60f6:	f7ff f9a9 	bl	d544c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d60fa:	2800      	cmp	r0, #0
   d60fc:	d0dc      	beq.n	d60b8 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d60fe:	9b01      	ldr	r3, [sp, #4]
   d6100:	781b      	ldrb	r3, [r3, #0]
   d6102:	b19b      	cbz	r3, d612c <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d6104:	2300      	movs	r3, #0
   d6106:	aa03      	add	r2, sp, #12
   d6108:	4621      	mov	r1, r4
   d610a:	4630      	mov	r0, r6
   d610c:	f7ff fb42 	bl	d5794 <_ZN7FatFile4openEPS_P7fname_ti>
   d6110:	2800      	cmp	r0, #0
   d6112:	d0d1      	beq.n	d60b8 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d6114:	4635      	mov	r5, r6
   d6116:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6118:	ac09      	add	r4, sp, #36	; 0x24
   d611a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d611c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d611e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6120:	682b      	ldr	r3, [r5, #0]
   d6122:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d6124:	4630      	mov	r0, r6
   d6126:	f7ff ffb3 	bl	d6090 <_ZN7FatFile5closeEv>
   d612a:	e7e0      	b.n	d60ee <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d612c:	463b      	mov	r3, r7
   d612e:	aa03      	add	r2, sp, #12
   d6130:	4621      	mov	r1, r4
   d6132:	4630      	mov	r0, r6
   d6134:	f7ff fb2e 	bl	d5794 <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d6138:	b013      	add	sp, #76	; 0x4c
   d613a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d613c <_ZN7FatFile6removeEPS_PKc>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove(FatFile* dirFile, const char* path) {
   d613c:	b500      	push	{lr}
   d613e:	b08b      	sub	sp, #44	; 0x2c
   d6140:	2300      	movs	r3, #0
   d6142:	f88d 3004 	strb.w	r3, [sp, #4]
   d6146:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile file;
  if (!file.open(dirFile, path, O_WRONLY)) {
   d614a:	460a      	mov	r2, r1
   d614c:	2301      	movs	r3, #1
   d614e:	4601      	mov	r1, r0
   d6150:	a801      	add	r0, sp, #4
   d6152:	f7ff ffa4 	bl	d609e <_ZN7FatFile4openEPS_PKci>
   d6156:	b110      	cbz	r0, d615e <_ZN7FatFile6removeEPS_PKc+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return file.remove();
   d6158:	a801      	add	r0, sp, #4
   d615a:	f7ff fa63 	bl	d5624 <_ZN7FatFile6removeEv>

fail:
  return false;
}
   d615e:	b00b      	add	sp, #44	; 0x2c
   d6160:	f85d fb04 	ldr.w	pc, [sp], #4

000d6164 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d6164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6168:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d616a:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d616c:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d616e:	4604      	mov	r4, r0
   d6170:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6172:	d508      	bpl.n	d6186 <_ZN7FatFile5writeEPKvj+0x22>
   d6174:	7883      	ldrb	r3, [r0, #2]
   d6176:	079a      	lsls	r2, r3, #30
   d6178:	d505      	bpl.n	d6186 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d617a:	071b      	lsls	r3, r3, #28
   d617c:	d50b      	bpl.n	d6196 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d617e:	69e1      	ldr	r1, [r4, #28]
   d6180:	f7ff fe5a 	bl	d5e38 <_ZN7FatFile7seekSetEm>
   d6184:	b938      	cbnz	r0, d6196 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d6186:	7863      	ldrb	r3, [r4, #1]
   d6188:	f043 0301 	orr.w	r3, r3, #1
   d618c:	7063      	strb	r3, [r4, #1]
  return -1;
   d618e:	f04f 30ff 	mov.w	r0, #4294967295
   d6192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d6196:	6963      	ldr	r3, [r4, #20]
   d6198:	43db      	mvns	r3, r3
   d619a:	4598      	cmp	r8, r3
   d619c:	d8f3      	bhi.n	d6186 <_ZN7FatFile5writeEPKvj+0x22>
   d619e:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d61a0:	f04f 0a00 	mov.w	sl, #0
   d61a4:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d61a6:	2e00      	cmp	r6, #0
   d61a8:	f000 8081 	beq.w	d62ae <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d61ac:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d61ae:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d61b0:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d61b4:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d61b8:	d11c      	bne.n	d61f4 <_ZN7FatFile5writeEPKvj+0x90>
   d61ba:	b9df      	cbnz	r7, d61f4 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d61bc:	6921      	ldr	r1, [r4, #16]
   d61be:	b171      	cbz	r1, d61de <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d61c0:	f104 0210 	add.w	r2, r4, #16
   d61c4:	f000 f901 	bl	d63ca <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d61c8:	2800      	cmp	r0, #0
   d61ca:	dbdc      	blt.n	d6186 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d61cc:	f040 808e 	bne.w	d62ec <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d61d0:	4620      	mov	r0, r4
   d61d2:	f7ff fcb2 	bl	d5b3a <_ZN7FatFile10addClusterEv>
   d61d6:	2800      	cmp	r0, #0
   d61d8:	f040 8088 	bne.w	d62ec <_ZN7FatFile5writeEPKvj+0x188>
   d61dc:	e7d3      	b.n	d6186 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d61de:	6a23      	ldr	r3, [r4, #32]
   d61e0:	b93b      	cbnz	r3, d61f2 <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d61e2:	4620      	mov	r0, r4
   d61e4:	f7ff fca9 	bl	d5b3a <_ZN7FatFile10addClusterEv>
   d61e8:	2800      	cmp	r0, #0
   d61ea:	d0cc      	beq.n	d6186 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d61ec:	6923      	ldr	r3, [r4, #16]
   d61ee:	6223      	str	r3, [r4, #32]
   d61f0:	e000      	b.n	d61f4 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d61f2:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d61f4:	6921      	ldr	r1, [r4, #16]
   d61f6:	68a0      	ldr	r0, [r4, #8]
   d61f8:	f000 f8e1 	bl	d63be <_ZNK9FatVolume17clusterFirstBlockEm>
   d61fc:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d61fe:	b917      	cbnz	r7, d6206 <_ZN7FatFile5writeEPKvj+0xa2>
   d6200:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6204:	d221      	bcs.n	d624a <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d6206:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d620a:	42b5      	cmp	r5, r6
   d620c:	bf28      	it	cs
   d620e:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d6210:	b937      	cbnz	r7, d6220 <_ZN7FatFile5writeEPKvj+0xbc>
   d6212:	6963      	ldr	r3, [r4, #20]
   d6214:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d6216:	4293      	cmp	r3, r2
   d6218:	bf34      	ite	cc
   d621a:	2201      	movcc	r2, #1
   d621c:	2205      	movcs	r2, #5
   d621e:	e000      	b.n	d6222 <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d6220:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6222:	68a0      	ldr	r0, [r4, #8]
   d6224:	3024      	adds	r0, #36	; 0x24
   d6226:	f000 f8a6 	bl	d6376 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d622a:	2800      	cmp	r0, #0
   d622c:	d0ab      	beq.n	d6186 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d622e:	4438      	add	r0, r7
   d6230:	462a      	mov	r2, r5
   d6232:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d6234:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d6236:	f003 fe6c 	bl	d9f12 <memcpy>
      if (512 == (n + blockOffset)) {
   d623a:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d623e:	d130      	bne.n	d62a2 <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d6240:	68a0      	ldr	r0, [r4, #8]
   d6242:	3024      	adds	r0, #36	; 0x24
   d6244:	f000 f870 	bl	d6328 <_ZN8FatCache4syncEv>
   d6248:	e017      	b.n	d627a <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d624a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d624e:	68a0      	ldr	r0, [r4, #8]
   d6250:	d315      	bcc.n	d627e <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d6252:	7902      	ldrb	r2, [r0, #4]
   d6254:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d6256:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d6258:	b2d2      	uxtb	r2, r2
   d625a:	4293      	cmp	r3, r2
   d625c:	bf28      	it	cs
   d625e:	4613      	movcs	r3, r2
   d6260:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6262:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d6264:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6268:	d302      	bcc.n	d6270 <_ZN7FatFile5writeEPKvj+0x10c>
   d626a:	441a      	add	r2, r3
   d626c:	4291      	cmp	r1, r2
   d626e:	d337      	bcc.n	d62e0 <_ZN7FatFile5writeEPKvj+0x17c>
   d6270:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d6272:	464a      	mov	r2, r9
   d6274:	6838      	ldr	r0, [r7, #0]
   d6276:	f000 fc6d 	bl	d6b54 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d627a:	b990      	cbnz	r0, d62a2 <_ZN7FatFile5writeEPKvj+0x13e>
   d627c:	e783      	b.n	d6186 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d627e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d6280:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d6282:	bf02      	ittt	eq
   d6284:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d6288:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d628c:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d628e:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d6290:	464a      	mov	r2, r9
   d6292:	6818      	ldr	r0, [r3, #0]
   d6294:	f000 fbec 	bl	d6a70 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d6298:	2800      	cmp	r0, #0
   d629a:	f43f af74 	beq.w	d6186 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d629e:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d62a2:	6963      	ldr	r3, [r4, #20]
   d62a4:	442b      	add	r3, r5
   d62a6:	6163      	str	r3, [r4, #20]
    src += n;
   d62a8:	44a9      	add	r9, r5
    nToWrite -= n;
   d62aa:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d62ac:	e77a      	b.n	d61a4 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d62ae:	69e2      	ldr	r2, [r4, #28]
   d62b0:	4293      	cmp	r3, r2
   d62b2:	d901      	bls.n	d62b8 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d62b4:	61e3      	str	r3, [r4, #28]
   d62b6:	e002      	b.n	d62be <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d62b8:	4b0f      	ldr	r3, [pc, #60]	; (d62f8 <_ZN7FatFile5writeEPKvj+0x194>)
   d62ba:	681b      	ldr	r3, [r3, #0]
   d62bc:	b11b      	cbz	r3, d62c6 <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d62be:	78a3      	ldrb	r3, [r4, #2]
   d62c0:	f043 0304 	orr.w	r3, r3, #4
   d62c4:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d62c6:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d62ca:	2b00      	cmp	r3, #0
   d62cc:	db02      	blt.n	d62d4 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d62ce:	4640      	mov	r0, r8
   d62d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d62d4:	4620      	mov	r0, r4
   d62d6:	f7ff fea5 	bl	d6024 <_ZN7FatFile4syncEv>
   d62da:	2800      	cmp	r0, #0
   d62dc:	d1f7      	bne.n	d62ce <_ZN7FatFile5writeEPKvj+0x16a>
   d62de:	e752      	b.n	d6186 <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d62e0:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d62e4:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d62e8:	62c2      	str	r2, [r0, #44]	; 0x2c
   d62ea:	e7c1      	b.n	d6270 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d62ec:	6921      	ldr	r1, [r4, #16]
   d62ee:	68a0      	ldr	r0, [r4, #8]
   d62f0:	f000 f865 	bl	d63be <_ZNK9FatVolume17clusterFirstBlockEm>
   d62f4:	4601      	mov	r1, r0
   d62f6:	e783      	b.n	d6200 <_ZN7FatFile5writeEPKvj+0x9c>
   d62f8:	2003e32c 	.word	0x2003e32c

000d62fc <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d62fc:	f001 b8e4 	b.w	d74c8 <HAL_Pin_Map>

000d6300 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6300:	b570      	push	{r4, r5, r6, lr}
   d6302:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6304:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6306:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6308:	b149      	cbz	r1, d631e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d630a:	f003 fe7f 	bl	da00c <strlen>
   d630e:	682b      	ldr	r3, [r5, #0]
   d6310:	4602      	mov	r2, r0
   d6312:	4621      	mov	r1, r4
   d6314:	4628      	mov	r0, r5
   d6316:	68db      	ldr	r3, [r3, #12]
    }
   d6318:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d631c:	4718      	bx	r3
    }
   d631e:	bd70      	pop	{r4, r5, r6, pc}

000d6320 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d6320:	f001 b8d2 	b.w	d74c8 <HAL_Pin_Map>

000d6324 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d6324:	f001 b8d0 	b.w	d74c8 <HAL_Pin_Map>

000d6328 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d6328:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d632a:	7803      	ldrb	r3, [r0, #0]
   d632c:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d632e:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d6330:	d51e      	bpl.n	d6370 <_ZN8FatCache4syncEv+0x48>
   d6332:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d6334:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d6336:	f100 060c 	add.w	r6, r0, #12
   d633a:	4632      	mov	r2, r6
   d633c:	6818      	ldr	r0, [r3, #0]
   d633e:	f000 fb97 	bl	d6a70 <_ZN9SdSpiCard10writeBlockEmPKh>
   d6342:	4605      	mov	r5, r0
   d6344:	b908      	cbnz	r0, d634a <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d6346:	2500      	movs	r5, #0
   d6348:	e013      	b.n	d6372 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d634a:	7823      	ldrb	r3, [r4, #0]
   d634c:	079b      	lsls	r3, r3, #30
   d634e:	d404      	bmi.n	d635a <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d6350:	7823      	ldrb	r3, [r4, #0]
   d6352:	f023 0301 	bic.w	r3, r3, #1
   d6356:	7023      	strb	r3, [r4, #0]
   d6358:	e00b      	b.n	d6372 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d635a:	6863      	ldr	r3, [r4, #4]
   d635c:	68a0      	ldr	r0, [r4, #8]
   d635e:	6919      	ldr	r1, [r3, #16]
   d6360:	4632      	mov	r2, r6
   d6362:	4401      	add	r1, r0
   d6364:	6818      	ldr	r0, [r3, #0]
   d6366:	f000 fb83 	bl	d6a70 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d636a:	2800      	cmp	r0, #0
   d636c:	d1f0      	bne.n	d6350 <_ZN8FatCache4syncEv+0x28>
   d636e:	e7ea      	b.n	d6346 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d6370:	2501      	movs	r5, #1

fail:
  return false;
}
   d6372:	4628      	mov	r0, r5
   d6374:	bd70      	pop	{r4, r5, r6, pc}

000d6376 <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d6376:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d6378:	6883      	ldr	r3, [r0, #8]
   d637a:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d637c:	4604      	mov	r4, r0
   d637e:	460e      	mov	r6, r1
   d6380:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d6382:	d014      	beq.n	d63ae <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d6384:	f7ff ffd0 	bl	d6328 <_ZN8FatCache4syncEv>
   d6388:	b908      	cbnz	r0, d638e <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d638a:	2000      	movs	r0, #0
   d638c:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d638e:	076b      	lsls	r3, r5, #29
   d6390:	d503      	bpl.n	d639a <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d6392:	2300      	movs	r3, #0
   d6394:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d6396:	60a6      	str	r6, [r4, #8]
   d6398:	e009      	b.n	d63ae <_ZN8FatCache4readEmh+0x38>
   d639a:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d639c:	f104 020c 	add.w	r2, r4, #12
   d63a0:	4631      	mov	r1, r6
   d63a2:	6818      	ldr	r0, [r3, #0]
   d63a4:	f000 fada 	bl	d695c <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d63a8:	2800      	cmp	r0, #0
   d63aa:	d1f2      	bne.n	d6392 <_ZN8FatCache4readEmh+0x1c>
   d63ac:	e7ed      	b.n	d638a <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d63ae:	7823      	ldrb	r3, [r4, #0]
   d63b0:	4620      	mov	r0, r4
   d63b2:	f005 0503 	and.w	r5, r5, #3
   d63b6:	431d      	orrs	r5, r3
   d63b8:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d63bc:	bd70      	pop	{r4, r5, r6, pc}

000d63be <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d63be:	7983      	ldrb	r3, [r0, #6]
   d63c0:	6940      	ldr	r0, [r0, #20]
   d63c2:	3902      	subs	r1, #2
   d63c4:	4099      	lsls	r1, r3
}
   d63c6:	4408      	add	r0, r1
   d63c8:	4770      	bx	lr

000d63ca <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d63ca:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d63cc:	b570      	push	{r4, r5, r6, lr}
   d63ce:	4605      	mov	r5, r0
   d63d0:	460c      	mov	r4, r1
   d63d2:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d63d4:	d802      	bhi.n	d63dc <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d63d6:	f04f 30ff 	mov.w	r0, #4294967295
   d63da:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d63dc:	69c3      	ldr	r3, [r0, #28]
   d63de:	4299      	cmp	r1, r3
   d63e0:	d8f9      	bhi.n	d63d6 <_ZN9FatVolume6fatGetEmPm+0xc>
   d63e2:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d63e4:	2b20      	cmp	r3, #32
   d63e6:	d110      	bne.n	d640a <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d63e8:	6981      	ldr	r1, [r0, #24]
   d63ea:	2202      	movs	r2, #2
   d63ec:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d63f0:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d63f4:	f7ff ffbf 	bl	d6376 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d63f8:	2800      	cmp	r0, #0
   d63fa:	d0ec      	beq.n	d63d6 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d63fc:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d6400:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d6404:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d6408:	e00f      	b.n	d642a <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d640a:	2b10      	cmp	r3, #16
   d640c:	d1e3      	bne.n	d63d6 <_ZN9FatVolume6fatGetEmPm+0xc>
   d640e:	6983      	ldr	r3, [r0, #24]
   d6410:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d6414:	2202      	movs	r2, #2
   d6416:	4419      	add	r1, r3
   d6418:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d641c:	f7ff ffab 	bl	d6376 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d6420:	2800      	cmp	r0, #0
   d6422:	d0d8      	beq.n	d63d6 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d6424:	b2e4      	uxtb	r4, r4
   d6426:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d642a:	69ea      	ldr	r2, [r5, #28]
   d642c:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d642e:	bf9a      	itte	ls
   d6430:	6033      	strls	r3, [r6, #0]
  return 1;
   d6432:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d6434:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d6436:	bd70      	pop	{r4, r5, r6, pc}

000d6438 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6438:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d643a:	b538      	push	{r3, r4, r5, lr}
   d643c:	460c      	mov	r4, r1
   d643e:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6440:	d801      	bhi.n	d6446 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d6442:	2000      	movs	r0, #0
   d6444:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6446:	69c3      	ldr	r3, [r0, #28]
   d6448:	4299      	cmp	r1, r3
   d644a:	d8fa      	bhi.n	d6442 <_ZN9FatVolume6fatPutEmm+0xa>
   d644c:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d644e:	2b20      	cmp	r3, #32
   d6450:	d10e      	bne.n	d6470 <_ZN9FatVolume6fatPutEmm+0x38>
   d6452:	6981      	ldr	r1, [r0, #24]
   d6454:	2203      	movs	r2, #3
   d6456:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d645a:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d645e:	f7ff ff8a 	bl	d6376 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d6462:	2800      	cmp	r0, #0
   d6464:	d0ed      	beq.n	d6442 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d6466:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d646a:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d646e:	e00f      	b.n	d6490 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d6470:	2b10      	cmp	r3, #16
   d6472:	d1e6      	bne.n	d6442 <_ZN9FatVolume6fatPutEmm+0xa>
   d6474:	6983      	ldr	r3, [r0, #24]
   d6476:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d647a:	2203      	movs	r2, #3
   d647c:	4419      	add	r1, r3
   d647e:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d6482:	f7ff ff78 	bl	d6376 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d6486:	2800      	cmp	r0, #0
   d6488:	d0db      	beq.n	d6442 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d648a:	b2e4      	uxtb	r4, r4
   d648c:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d6490:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d6492:	bd38      	pop	{r3, r4, r5, pc}

000d6494 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d6494:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d6498:	68c4      	ldr	r4, [r0, #12]
   d649a:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d649c:	4605      	mov	r5, r0
   d649e:	460e      	mov	r6, r1
   d64a0:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d64a2:	d207      	bcs.n	d64b4 <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d64a4:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d64a6:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d64a8:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d64aa:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d64ac:	429c      	cmp	r4, r3
   d64ae:	d903      	bls.n	d64b8 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d64b0:	b9cf      	cbnz	r7, d64e6 <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d64b2:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d64b4:	2701      	movs	r7, #1
   d64b6:	e7f7      	b.n	d64a8 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d64b8:	42a6      	cmp	r6, r4
   d64ba:	d014      	beq.n	d64e6 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d64bc:	aa01      	add	r2, sp, #4
   d64be:	4621      	mov	r1, r4
   d64c0:	4628      	mov	r0, r5
   d64c2:	f7ff ff82 	bl	d63ca <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d64c6:	2800      	cmp	r0, #0
   d64c8:	db0d      	blt.n	d64e6 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d64ca:	d0ed      	beq.n	d64a8 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d64cc:	9b01      	ldr	r3, [sp, #4]
   d64ce:	2b00      	cmp	r3, #0
   d64d0:	d1ea      	bne.n	d64a8 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d64d2:	b107      	cbz	r7, d64d6 <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d64d4:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d64d6:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d64da:	4621      	mov	r1, r4
   d64dc:	4628      	mov	r0, r5
   d64de:	f7ff ffab 	bl	d6438 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d64e2:	4607      	mov	r7, r0
   d64e4:	b908      	cbnz	r0, d64ea <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d64e6:	2700      	movs	r7, #0
   d64e8:	e00b      	b.n	d6502 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d64ea:	b916      	cbnz	r6, d64f2 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d64ec:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d64f0:	e007      	b.n	d6502 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d64f2:	4622      	mov	r2, r4
   d64f4:	4631      	mov	r1, r6
   d64f6:	4628      	mov	r0, r5
   d64f8:	f7ff ff9e 	bl	d6438 <_ZN9FatVolume6fatPutEmm>
   d64fc:	2800      	cmp	r0, #0
   d64fe:	d1f5      	bne.n	d64ec <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d6500:	e7f1      	b.n	d64e6 <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d6502:	4638      	mov	r0, r7
   d6504:	b002      	add	sp, #8
   d6506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d650a <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d650a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d650c:	4605      	mov	r5, r0
   d650e:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d6510:	aa01      	add	r2, sp, #4
   d6512:	4621      	mov	r1, r4
   d6514:	4628      	mov	r0, r5
   d6516:	f7ff ff58 	bl	d63ca <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d651a:	1e06      	subs	r6, r0, #0
   d651c:	da01      	bge.n	d6522 <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d651e:	2000      	movs	r0, #0
   d6520:	e00f      	b.n	d6542 <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d6522:	2200      	movs	r2, #0
   d6524:	4621      	mov	r1, r4
   d6526:	4628      	mov	r0, r5
   d6528:	f7ff ff86 	bl	d6438 <_ZN9FatVolume6fatPutEmm>
   d652c:	2800      	cmp	r0, #0
   d652e:	d0f6      	beq.n	d651e <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d6530:	68eb      	ldr	r3, [r5, #12]
   d6532:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d6534:	bf9c      	itt	ls
   d6536:	f104 34ff 	addls.w	r4, r4, #4294967295
   d653a:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d653c:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d653e:	2e00      	cmp	r6, #0
   d6540:	d1e6      	bne.n	d6510 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d6542:	b002      	add	sp, #8
   d6544:	bd70      	pop	{r4, r5, r6, pc}

000d6546 <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d6546:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d6548:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d654a:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d654c:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d654e:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d6550:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d6554:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d6556:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d6558:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d655a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d655e:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d6560:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d6564:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d6568:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d656c:	b1a1      	cbz	r1, d6598 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d656e:	2904      	cmp	r1, #4
   d6570:	d85d      	bhi.n	d662e <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6572:	4611      	mov	r1, r2
   d6574:	3024      	adds	r0, #36	; 0x24
   d6576:	f7ff fefe 	bl	d6376 <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d657a:	2800      	cmp	r0, #0
   d657c:	d057      	beq.n	d662e <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d657e:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d6582:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d6586:	065b      	lsls	r3, r3, #25
   d6588:	d151      	bne.n	d662e <_ZN9FatVolume4initEh+0xe8>
   d658a:	351b      	adds	r5, #27
   d658c:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d6590:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d6594:	2d00      	cmp	r5, #0
   d6596:	d04a      	beq.n	d662e <_ZN9FatVolume4initEh+0xe8>
   d6598:	2200      	movs	r2, #0
   d659a:	4629      	mov	r1, r5
   d659c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d65a0:	f7ff fee9 	bl	d6376 <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d65a4:	2800      	cmp	r0, #0
   d65a6:	d042      	beq.n	d662e <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d65a8:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d65ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d65b0:	d13d      	bne.n	d662e <_ZN9FatVolume4initEh+0xe8>
   d65b2:	7c03      	ldrb	r3, [r0, #16]
   d65b4:	2b02      	cmp	r3, #2
   d65b6:	d13a      	bne.n	d662e <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d65b8:	89c3      	ldrh	r3, [r0, #14]
   d65ba:	2b00      	cmp	r3, #0
   d65bc:	d037      	beq.n	d662e <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d65be:	7b41      	ldrb	r1, [r0, #13]
   d65c0:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d65c2:	1e4b      	subs	r3, r1, #1
   d65c4:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d65c6:	2300      	movs	r3, #0
   d65c8:	71a3      	strb	r3, [r4, #6]
   d65ca:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d65cc:	2301      	movs	r3, #1
   d65ce:	428b      	cmp	r3, r1
   d65d0:	d007      	beq.n	d65e2 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d65d2:	3e01      	subs	r6, #1
   d65d4:	d02b      	beq.n	d662e <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d65d6:	79a2      	ldrb	r2, [r4, #6]
   d65d8:	005b      	lsls	r3, r3, #1
   d65da:	3201      	adds	r2, #1
   d65dc:	b2db      	uxtb	r3, r3
   d65de:	71a2      	strb	r2, [r4, #6]
   d65e0:	e7f5      	b.n	d65ce <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d65e2:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d65e4:	b902      	cbnz	r2, d65e8 <_ZN9FatVolume4initEh+0xa2>
   d65e6:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d65e8:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d65ea:	89c6      	ldrh	r6, [r0, #14]
   d65ec:	442e      	add	r6, r5
   d65ee:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d65f0:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d65f4:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d65f6:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d65fa:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d65fc:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d6600:	0152      	lsls	r2, r2, #5
   d6602:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d6606:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d660a:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d660c:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d6610:	b903      	cbnz	r3, d6614 <_ZN9FatVolume4initEh+0xce>
   d6612:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d6614:	1aad      	subs	r5, r5, r2
   d6616:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d6618:	79a5      	ldrb	r5, [r4, #6]
   d661a:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d661e:	1c6b      	adds	r3, r5, #1
   d6620:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d6622:	f640 73f4 	movw	r3, #4084	; 0xff4
   d6626:	429d      	cmp	r5, r3
   d6628:	d803      	bhi.n	d6632 <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d662a:	230c      	movs	r3, #12
   d662c:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d662e:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d6630:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d6632:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d6636:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d6638:	bf85      	ittet	hi
   d663a:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d663c:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d663e:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d6640:	2320      	movhi	r3, #32
   d6642:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d6644:	2001      	movs	r0, #1

fail:
  return false;
}
   d6646:	bd70      	pop	{r4, r5, r6, pc}

000d6648 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d6648:	f000 bf3e 	b.w	d74c8 <HAL_Pin_Map>

000d664c <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d664c:	f000 bf3c 	b.w	d74c8 <HAL_Pin_Map>

000d6650 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d6650:	f000 bf3a 	b.w	d74c8 <HAL_Pin_Map>

000d6654 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d6654:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d6656:	4c0e      	ldr	r4, [pc, #56]	; (d6690 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d6658:	460e      	mov	r6, r1
   d665a:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d665c:	f000 ffec 	bl	d7638 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d6660:	6823      	ldr	r3, [r4, #0]
   d6662:	1ac0      	subs	r0, r0, r3
   d6664:	4b0b      	ldr	r3, [pc, #44]	; (d6694 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d6666:	4298      	cmp	r0, r3
   d6668:	d908      	bls.n	d667c <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d666a:	f000 ffed 	bl	d7648 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d666e:	4b0a      	ldr	r3, [pc, #40]	; (d6698 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d6670:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d6672:	f001 f9ed 	bl	d7a50 <spark_process>
   d6676:	f000 ffdf 	bl	d7638 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d667a:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d667c:	f000 ffe4 	bl	d7648 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d6680:	b280      	uxth	r0, r0
   d6682:	1b80      	subs	r0, r0, r6
}
   d6684:	42a8      	cmp	r0, r5
   d6686:	bfd4      	ite	le
   d6688:	2000      	movle	r0, #0
   d668a:	2001      	movgt	r0, #1
   d668c:	bd70      	pop	{r4, r5, r6, pc}
   d668e:	bf00      	nop
   d6690:	2003e330 	.word	0x2003e330
   d6694:	000186a0 	.word	0x000186a0
   d6698:	2003e710 	.word	0x2003e710

000d669c <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d669c:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d669e:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d66a0:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d66a2:	b94d      	cbnz	r5, d66b8 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d66a4:	6840      	ldr	r0, [r0, #4]
   d66a6:	f000 fa7d 	bl	d6ba4 <_ZN14SdSpiAltDriver8activateEv>
   d66aa:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d66ac:	4629      	mov	r1, r5
   d66ae:	7d18      	ldrb	r0, [r3, #20]
   d66b0:	f002 fce7 	bl	d9082 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d66b4:	2301      	movs	r3, #1
   d66b6:	7223      	strb	r3, [r4, #8]
   d66b8:	bd38      	pop	{r3, r4, r5, pc}

000d66ba <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d66ba:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d66bc:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d66be:	4604      	mov	r4, r0
  if (m_spiActive) {
   d66c0:	b16b      	cbz	r3, d66de <_ZN9SdSpiCard7spiStopEv+0x24>
   d66c2:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d66c4:	2101      	movs	r1, #1
   d66c6:	7d18      	ldrb	r0, [r3, #20]
   d66c8:	f002 fcdb 	bl	d9082 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d66cc:	21ff      	movs	r1, #255	; 0xff
   d66ce:	6860      	ldr	r0, [r4, #4]
   d66d0:	f000 fa9a 	bl	d6c08 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d66d4:	6860      	ldr	r0, [r4, #4]
   d66d6:	f000 fa79 	bl	d6bcc <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d66da:	2300      	movs	r3, #0
   d66dc:	7223      	strb	r3, [r4, #8]
   d66de:	bd10      	pop	{r4, pc}

000d66e0 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d66e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d66e2:	4604      	mov	r4, r0
   d66e4:	460d      	mov	r5, r1
   d66e6:	4616      	mov	r6, r2
   d66e8:	f000 ffae 	bl	d7648 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d66ec:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d66ee:	6860      	ldr	r0, [r4, #4]
   d66f0:	f000 fa6f 	bl	d6bd2 <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d66f4:	28ff      	cmp	r0, #255	; 0xff
   d66f6:	7260      	strb	r0, [r4, #9]
   d66f8:	d109      	bne.n	d670e <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d66fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d66fe:	4639      	mov	r1, r7
   d6700:	4620      	mov	r0, r4
   d6702:	f7ff ffa7 	bl	d6654 <_ZN9SdSpiCard10isTimedOutEtt>
   d6706:	2800      	cmp	r0, #0
   d6708:	d0f1      	beq.n	d66ee <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d670a:	2355      	movs	r3, #85	; 0x55
   d670c:	e00b      	b.n	d6726 <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d670e:	28fe      	cmp	r0, #254	; 0xfe
   d6710:	d001      	beq.n	d6716 <_ZN9SdSpiCard8readDataEPhj+0x36>
   d6712:	2350      	movs	r3, #80	; 0x50
   d6714:	e007      	b.n	d6726 <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d6716:	4632      	mov	r2, r6
   d6718:	4629      	mov	r1, r5
   d671a:	6860      	ldr	r0, [r4, #4]
   d671c:	f000 fa5e 	bl	d6bdc <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d6720:	7260      	strb	r0, [r4, #9]
   d6722:	b130      	cbz	r0, d6732 <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6724:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d6726:	4620      	mov	r0, r4
   d6728:	7023      	strb	r3, [r4, #0]
   d672a:	f7ff ffc6 	bl	d66ba <_ZN9SdSpiCard7spiStopEv>
  return false;
   d672e:	2000      	movs	r0, #0
}
   d6730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6732:	6860      	ldr	r0, [r4, #4]
   d6734:	f000 fa4d 	bl	d6bd2 <_ZN14SdSpiAltDriver7receiveEv>
   d6738:	6860      	ldr	r0, [r4, #4]
   d673a:	f000 fa4a 	bl	d6bd2 <_ZN14SdSpiAltDriver7receiveEv>
   d673e:	2001      	movs	r0, #1
   d6740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6742 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d6742:	b570      	push	{r4, r5, r6, lr}
   d6744:	4604      	mov	r4, r0
   d6746:	460e      	mov	r6, r1
   d6748:	f000 ff7e 	bl	d7648 <HAL_Timer_Get_Milli_Seconds>
   d674c:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d674e:	4632      	mov	r2, r6
   d6750:	4629      	mov	r1, r5
   d6752:	4620      	mov	r0, r4
   d6754:	f7ff ff7e 	bl	d6654 <_ZN9SdSpiCard10isTimedOutEtt>
   d6758:	b930      	cbnz	r0, d6768 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d675a:	6860      	ldr	r0, [r4, #4]
   d675c:	f000 fa39 	bl	d6bd2 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d6760:	28ff      	cmp	r0, #255	; 0xff
   d6762:	d1f4      	bne.n	d674e <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d6764:	2001      	movs	r0, #1
   d6766:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d6768:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d676a:	bd70      	pop	{r4, r5, r6, pc}

000d676c <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d676c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d676e:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d6770:	9201      	str	r2, [sp, #4]
   d6772:	4604      	mov	r4, r0
   d6774:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d6776:	b90b      	cbnz	r3, d677c <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d6778:	f7ff ff90 	bl	d669c <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d677c:	b125      	cbz	r5, d6788 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d677e:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d6782:	4620      	mov	r0, r4
   d6784:	f7ff ffdd 	bl	d6742 <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6788:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d678c:	6860      	ldr	r0, [r4, #4]
   d678e:	f000 fa3b 	bl	d6c08 <_ZN14SdSpiAltDriver4sendEh>
   d6792:	f10d 0607 	add.w	r6, sp, #7
   d6796:	f10d 0703 	add.w	r7, sp, #3
   d679a:	f816 1901 	ldrb.w	r1, [r6], #-1
   d679e:	6860      	ldr	r0, [r4, #4]
   d67a0:	f000 fa32 	bl	d6c08 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d67a4:	42be      	cmp	r6, r7
   d67a6:	d1f8      	bne.n	d679a <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d67a8:	2d00      	cmp	r5, #0
   d67aa:	bf0c      	ite	eq
   d67ac:	2195      	moveq	r1, #149	; 0x95
   d67ae:	2187      	movne	r1, #135	; 0x87
   d67b0:	6860      	ldr	r0, [r4, #4]
   d67b2:	f000 fa29 	bl	d6c08 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d67b6:	6860      	ldr	r0, [r4, #4]
   d67b8:	f000 fa0b 	bl	d6bd2 <_ZN14SdSpiAltDriver7receiveEv>
   d67bc:	250b      	movs	r5, #11
   d67be:	6860      	ldr	r0, [r4, #4]
   d67c0:	f000 fa07 	bl	d6bd2 <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d67c4:	0603      	lsls	r3, r0, #24
   d67c6:	7260      	strb	r0, [r4, #9]
   d67c8:	d503      	bpl.n	d67d2 <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d67ca:	3d01      	subs	r5, #1
   d67cc:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d67d0:	d1f5      	bne.n	d67be <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d67d2:	b003      	add	sp, #12
   d67d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d67d6 <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d67d6:	b570      	push	{r4, r5, r6, lr}
   d67d8:	4604      	mov	r4, r0
   d67da:	460d      	mov	r5, r1
   d67dc:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d67de:	2137      	movs	r1, #55	; 0x37
   d67e0:	2200      	movs	r2, #0
   d67e2:	f7ff ffc3 	bl	d676c <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d67e6:	4632      	mov	r2, r6
   d67e8:	4629      	mov	r1, r5
   d67ea:	4620      	mov	r0, r4
  }
   d67ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d67f0:	f7ff bfbc 	b.w	d676c <_ZN9SdSpiCard11cardCommandEhm>

000d67f4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d67f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d67f8:	2500      	movs	r5, #0
   d67fa:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d67fc:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d67fe:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d6800:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d6802:	4604      	mov	r4, r0
   d6804:	4690      	mov	r8, r2
   d6806:	461e      	mov	r6, r3
   d6808:	f000 ff1e 	bl	d7648 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d680c:	4641      	mov	r1, r8
   d680e:	4607      	mov	r7, r0
   d6810:	6860      	ldr	r0, [r4, #4]
   d6812:	f000 f9cb 	bl	d6bac <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d6816:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d6818:	4a4f      	ldr	r2, [pc, #316]	; (d6958 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d681a:	721d      	strb	r5, [r3, #8]
   d681c:	f04f 0801 	mov.w	r8, #1
   d6820:	60da      	str	r2, [r3, #12]
   d6822:	745d      	strb	r5, [r3, #17]
   d6824:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d6828:	4620      	mov	r0, r4
   d682a:	f7ff ff37 	bl	d669c <_ZN9SdSpiCard8spiStartEv>
   d682e:	6863      	ldr	r3, [r4, #4]
   d6830:	4641      	mov	r1, r8
   d6832:	7d18      	ldrb	r0, [r3, #20]
   d6834:	f002 fc25 	bl	d9082 <digitalWrite>
   d6838:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d683a:	21ff      	movs	r1, #255	; 0xff
   d683c:	6860      	ldr	r0, [r4, #4]
   d683e:	3d01      	subs	r5, #1
   d6840:	f000 f9e2 	bl	d6c08 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d6844:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6848:	d1f7      	bne.n	d683a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d684a:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d684c:	4629      	mov	r1, r5
   d684e:	7d18      	ldrb	r0, [r3, #20]
   d6850:	f002 fc17 	bl	d9082 <digitalWrite>
   d6854:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d6856:	2200      	movs	r2, #0
   d6858:	4611      	mov	r1, r2
   d685a:	4620      	mov	r0, r4
   d685c:	f7ff ff86 	bl	d676c <_ZN9SdSpiCard11cardCommandEhm>
   d6860:	2801      	cmp	r0, #1
   d6862:	4680      	mov	r8, r0
   d6864:	d012      	beq.n	d688c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d6866:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d6868:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d686c:	d101      	bne.n	d6872 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d686e:	2320      	movs	r3, #32
   d6870:	e057      	b.n	d6922 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6872:	21fd      	movs	r1, #253	; 0xfd
   d6874:	6860      	ldr	r0, [r4, #4]
   d6876:	f000 f9c7 	bl	d6c08 <_ZN14SdSpiAltDriver4sendEh>
   d687a:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d687e:	6860      	ldr	r0, [r4, #4]
   d6880:	f000 f9a7 	bl	d6bd2 <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d6884:	f1b8 0801 	subs.w	r8, r8, #1
   d6888:	d1f9      	bne.n	d687e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d688a:	e7e4      	b.n	d6856 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d688c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d6890:	2108      	movs	r1, #8
   d6892:	4620      	mov	r0, r4
   d6894:	f7ff ff6a 	bl	d676c <_ZN9SdSpiCard11cardCommandEhm>
   d6898:	2805      	cmp	r0, #5
   d689a:	d102      	bne.n	d68a2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d689c:	f884 800a 	strb.w	r8, [r4, #10]
   d68a0:	e00f      	b.n	d68c2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d68a2:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d68a4:	6860      	ldr	r0, [r4, #4]
   d68a6:	f000 f994 	bl	d6bd2 <_ZN14SdSpiAltDriver7receiveEv>
   d68aa:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d68ac:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d68b0:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d68b2:	d1f7      	bne.n	d68a4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d68b4:	28aa      	cmp	r0, #170	; 0xaa
   d68b6:	d102      	bne.n	d68be <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d68b8:	2302      	movs	r3, #2
   d68ba:	72a3      	strb	r3, [r4, #10]
   d68bc:	e001      	b.n	d68c2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d68be:	2325      	movs	r3, #37	; 0x25
   d68c0:	e02f      	b.n	d6922 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d68c2:	7aa3      	ldrb	r3, [r4, #10]
   d68c4:	2b02      	cmp	r3, #2
   d68c6:	bf0c      	ite	eq
   d68c8:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d68cc:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d68ce:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d68d0:	462a      	mov	r2, r5
   d68d2:	2129      	movs	r1, #41	; 0x29
   d68d4:	4620      	mov	r0, r4
   d68d6:	f7ff ff7e 	bl	d67d6 <_ZN9SdSpiCard8cardAcmdEhm>
   d68da:	4602      	mov	r2, r0
   d68dc:	b148      	cbz	r0, d68f2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d68de:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d68e2:	4639      	mov	r1, r7
   d68e4:	4620      	mov	r0, r4
   d68e6:	f7ff feb5 	bl	d6654 <_ZN9SdSpiCard10isTimedOutEtt>
   d68ea:	2800      	cmp	r0, #0
   d68ec:	d0f0      	beq.n	d68d0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d68ee:	2343      	movs	r3, #67	; 0x43
   d68f0:	e017      	b.n	d6922 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d68f2:	7aa3      	ldrb	r3, [r4, #10]
   d68f4:	2b02      	cmp	r3, #2
   d68f6:	d00e      	beq.n	d6916 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d68f8:	4620      	mov	r0, r4
   d68fa:	f7ff fede 	bl	d66ba <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d68fe:	6863      	ldr	r3, [r4, #4]
   d6900:	68b0      	ldr	r0, [r6, #8]
   d6902:	7934      	ldrb	r4, [r6, #4]
   d6904:	7b31      	ldrb	r1, [r6, #12]
   d6906:	7b72      	ldrb	r2, [r6, #13]
   d6908:	745a      	strb	r2, [r3, #17]
   d690a:	60d8      	str	r0, [r3, #12]
   d690c:	721c      	strb	r4, [r3, #8]
   d690e:	7419      	strb	r1, [r3, #16]
  return true;
   d6910:	2001      	movs	r0, #1
   d6912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d6916:	213a      	movs	r1, #58	; 0x3a
   d6918:	4620      	mov	r0, r4
   d691a:	f7ff ff27 	bl	d676c <_ZN9SdSpiCard11cardCommandEhm>
   d691e:	b138      	cbz	r0, d6930 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d6920:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d6922:	4620      	mov	r0, r4
   d6924:	7023      	strb	r3, [r4, #0]
   d6926:	f7ff fec8 	bl	d66ba <_ZN9SdSpiCard7spiStopEv>
  return false;
   d692a:	2000      	movs	r0, #0
}
   d692c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6930:	6860      	ldr	r0, [r4, #4]
   d6932:	f000 f94e 	bl	d6bd2 <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d6936:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d693a:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d693c:	bf04      	itt	eq
   d693e:	2303      	moveq	r3, #3
   d6940:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6942:	6860      	ldr	r0, [r4, #4]
   d6944:	f000 f945 	bl	d6bd2 <_ZN14SdSpiAltDriver7receiveEv>
   d6948:	6860      	ldr	r0, [r4, #4]
   d694a:	f000 f942 	bl	d6bd2 <_ZN14SdSpiAltDriver7receiveEv>
   d694e:	6860      	ldr	r0, [r4, #4]
   d6950:	f000 f93f 	bl	d6bd2 <_ZN14SdSpiAltDriver7receiveEv>
   d6954:	e7d0      	b.n	d68f8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d6956:	bf00      	nop
   d6958:	0003d090 	.word	0x0003d090

000d695c <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d695c:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d695e:	7a83      	ldrb	r3, [r0, #10]
   d6960:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d6962:	bf18      	it	ne
   d6964:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6966:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d6968:	460a      	mov	r2, r1
   d696a:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d696c:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d696e:	f7ff fefd 	bl	d676c <_ZN9SdSpiCard11cardCommandEhm>
   d6972:	b110      	cbz	r0, d697a <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6974:	2330      	movs	r3, #48	; 0x30
   d6976:	7023      	strb	r3, [r4, #0]
   d6978:	e00b      	b.n	d6992 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d697a:	4629      	mov	r1, r5
   d697c:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6980:	4620      	mov	r0, r4
   d6982:	f7ff fead 	bl	d66e0 <_ZN9SdSpiCard8readDataEPhj>
   d6986:	4605      	mov	r5, r0
   d6988:	b118      	cbz	r0, d6992 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d698a:	4620      	mov	r0, r4
   d698c:	f7ff fe95 	bl	d66ba <_ZN9SdSpiCard7spiStopEv>
  return true;
   d6990:	e003      	b.n	d699a <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d6992:	4620      	mov	r0, r4
   d6994:	f7ff fe91 	bl	d66ba <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6998:	2500      	movs	r5, #0
}
   d699a:	4628      	mov	r0, r5
   d699c:	bd38      	pop	{r3, r4, r5, pc}

000d699e <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d699e:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d69a0:	7a83      	ldrb	r3, [r0, #10]
   d69a2:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d69a4:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d69a6:	bf18      	it	ne
   d69a8:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d69aa:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d69ac:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d69ae:	f7ff fedd 	bl	d676c <_ZN9SdSpiCard11cardCommandEhm>
   d69b2:	b130      	cbz	r0, d69c2 <_ZN9SdSpiCard9readStartEm+0x24>
   d69b4:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d69b6:	4620      	mov	r0, r4
   d69b8:	7023      	strb	r3, [r4, #0]
   d69ba:	f7ff fe7e 	bl	d66ba <_ZN9SdSpiCard7spiStopEv>
  return false;
   d69be:	2000      	movs	r0, #0
   d69c0:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d69c2:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d69c4:	bd10      	pop	{r4, pc}

000d69c6 <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d69c6:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d69c8:	2200      	movs	r2, #0
   d69ca:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d69cc:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d69ce:	f7ff fecd 	bl	d676c <_ZN9SdSpiCard11cardCommandEhm>
   d69d2:	b130      	cbz	r0, d69e2 <_ZN9SdSpiCard8readStopEv+0x1c>
   d69d4:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d69d6:	4620      	mov	r0, r4
   d69d8:	7023      	strb	r3, [r4, #0]
   d69da:	f7ff fe6e 	bl	d66ba <_ZN9SdSpiCard7spiStopEv>
  return false;
   d69de:	2000      	movs	r0, #0
   d69e0:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d69e2:	4620      	mov	r0, r4
   d69e4:	f7ff fe69 	bl	d66ba <_ZN9SdSpiCard7spiStopEv>
  return true;
   d69e8:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d69ea:	bd10      	pop	{r4, pc}

000d69ec <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d69ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d69ee:	4605      	mov	r5, r0
   d69f0:	4616      	mov	r6, r2
   d69f2:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d69f4:	f7ff ffd3 	bl	d699e <_ZN9SdSpiCard9readStartEm>
   d69f8:	b198      	cbz	r0, d6a22 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d69fa:	2400      	movs	r4, #0
   d69fc:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d69fe:	429f      	cmp	r7, r3
   d6a00:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d6a04:	d908      	bls.n	d6a18 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d6a06:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6a0a:	4628      	mov	r0, r5
   d6a0c:	f7ff fe68 	bl	d66e0 <_ZN9SdSpiCard8readDataEPhj>
   d6a10:	3401      	adds	r4, #1
   d6a12:	2800      	cmp	r0, #0
   d6a14:	d1f2      	bne.n	d69fc <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d6a16:	e004      	b.n	d6a22 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d6a18:	4628      	mov	r0, r5
}
   d6a1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d6a1e:	f7ff bfd2 	b.w	d69c6 <_ZN9SdSpiCard8readStopEv>
}
   d6a22:	2000      	movs	r0, #0
   d6a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6a26 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d6a26:	b538      	push	{r3, r4, r5, lr}
   d6a28:	4604      	mov	r4, r0
   d6a2a:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6a2c:	6840      	ldr	r0, [r0, #4]
   d6a2e:	f000 f8eb 	bl	d6c08 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d6a32:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6a36:	4629      	mov	r1, r5
   d6a38:	6860      	ldr	r0, [r4, #4]
   d6a3a:	f000 f8e9 	bl	d6c10 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6a3e:	21ff      	movs	r1, #255	; 0xff
   d6a40:	6860      	ldr	r0, [r4, #4]
   d6a42:	f000 f8e1 	bl	d6c08 <_ZN14SdSpiAltDriver4sendEh>
   d6a46:	21ff      	movs	r1, #255	; 0xff
   d6a48:	6860      	ldr	r0, [r4, #4]
   d6a4a:	f000 f8dd 	bl	d6c08 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6a4e:	6860      	ldr	r0, [r4, #4]
   d6a50:	f000 f8bf 	bl	d6bd2 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d6a54:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d6a56:	f000 001f 	and.w	r0, r0, #31
   d6a5a:	2805      	cmp	r0, #5
   d6a5c:	d006      	beq.n	d6a6c <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6a5e:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6a60:	4620      	mov	r0, r4
   d6a62:	7023      	strb	r3, [r4, #0]
   d6a64:	f7ff fe29 	bl	d66ba <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6a68:	2000      	movs	r0, #0
   d6a6a:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d6a6c:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6a6e:	bd38      	pop	{r3, r4, r5, pc}

000d6a70 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6a70:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6a72:	7a83      	ldrb	r3, [r0, #10]
   d6a74:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d6a76:	bf18      	it	ne
   d6a78:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6a7a:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d6a7c:	460a      	mov	r2, r1
   d6a7e:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6a80:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d6a82:	f7ff fe73 	bl	d676c <_ZN9SdSpiCard11cardCommandEhm>
   d6a86:	4606      	mov	r6, r0
   d6a88:	b108      	cbz	r0, d6a8e <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d6a8a:	2332      	movs	r3, #50	; 0x32
   d6a8c:	e01d      	b.n	d6aca <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d6a8e:	462a      	mov	r2, r5
   d6a90:	21fe      	movs	r1, #254	; 0xfe
   d6a92:	4620      	mov	r0, r4
   d6a94:	f7ff ffc7 	bl	d6a26 <_ZN9SdSpiCard9writeDataEhPKh>
   d6a98:	b1c0      	cbz	r0, d6acc <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6a9a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d6a9e:	4620      	mov	r0, r4
   d6aa0:	f7ff fe4f 	bl	d6742 <_ZN9SdSpiCard11waitNotBusyEt>
   d6aa4:	4605      	mov	r5, r0
   d6aa6:	b908      	cbnz	r0, d6aac <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d6aa8:	235a      	movs	r3, #90	; 0x5a
   d6aaa:	e00e      	b.n	d6aca <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d6aac:	4632      	mov	r2, r6
   d6aae:	210d      	movs	r1, #13
   d6ab0:	4620      	mov	r0, r4
   d6ab2:	f7ff fe5b 	bl	d676c <_ZN9SdSpiCard11cardCommandEhm>
   d6ab6:	b938      	cbnz	r0, d6ac8 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6ab8:	6860      	ldr	r0, [r4, #4]
   d6aba:	f000 f88a 	bl	d6bd2 <_ZN14SdSpiAltDriver7receiveEv>
   d6abe:	b918      	cbnz	r0, d6ac8 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d6ac0:	4620      	mov	r0, r4
   d6ac2:	f7ff fdfa 	bl	d66ba <_ZN9SdSpiCard7spiStopEv>
  return true;
   d6ac6:	e005      	b.n	d6ad4 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6ac8:	2329      	movs	r3, #41	; 0x29
   d6aca:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d6acc:	4620      	mov	r0, r4
   d6ace:	f7ff fdf4 	bl	d66ba <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6ad2:	2500      	movs	r5, #0
}
   d6ad4:	4628      	mov	r0, r5
   d6ad6:	bd70      	pop	{r4, r5, r6, pc}

000d6ad8 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d6ad8:	b538      	push	{r3, r4, r5, lr}
   d6ada:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6adc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d6ae0:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6ae2:	f7ff fe2e 	bl	d6742 <_ZN9SdSpiCard11waitNotBusyEt>
   d6ae6:	b910      	cbnz	r0, d6aee <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d6ae8:	235b      	movs	r3, #91	; 0x5b
   d6aea:	7023      	strb	r3, [r4, #0]
   d6aec:	e005      	b.n	d6afa <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d6aee:	462a      	mov	r2, r5
   d6af0:	21fc      	movs	r1, #252	; 0xfc
   d6af2:	4620      	mov	r0, r4
   d6af4:	f7ff ff97 	bl	d6a26 <_ZN9SdSpiCard9writeDataEhPKh>
   d6af8:	b918      	cbnz	r0, d6b02 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6afa:	4620      	mov	r0, r4
   d6afc:	f7ff fddd 	bl	d66ba <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6b00:	2000      	movs	r0, #0
}
   d6b02:	bd38      	pop	{r3, r4, r5, pc}

000d6b04 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6b04:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6b06:	7a83      	ldrb	r3, [r0, #10]
   d6b08:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6b0a:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d6b0c:	bf18      	it	ne
   d6b0e:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d6b10:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6b12:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d6b14:	f7ff fe2a 	bl	d676c <_ZN9SdSpiCard11cardCommandEhm>
   d6b18:	b130      	cbz	r0, d6b28 <_ZN9SdSpiCard10writeStartEm+0x24>
   d6b1a:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6b1c:	4620      	mov	r0, r4
   d6b1e:	7023      	strb	r3, [r4, #0]
   d6b20:	f7ff fdcb 	bl	d66ba <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6b24:	2000      	movs	r0, #0
   d6b26:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d6b28:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6b2a:	bd10      	pop	{r4, pc}

000d6b2c <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d6b2c:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6b2e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d6b32:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6b34:	f7ff fe05 	bl	d6742 <_ZN9SdSpiCard11waitNotBusyEt>
   d6b38:	4605      	mov	r5, r0
   d6b3a:	b120      	cbz	r0, d6b46 <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6b3c:	21fd      	movs	r1, #253	; 0xfd
   d6b3e:	6860      	ldr	r0, [r4, #4]
   d6b40:	f000 f862 	bl	d6c08 <_ZN14SdSpiAltDriver4sendEh>
   d6b44:	e001      	b.n	d6b4a <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6b46:	2356      	movs	r3, #86	; 0x56
   d6b48:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d6b4a:	4620      	mov	r0, r4
   d6b4c:	f7ff fdb5 	bl	d66ba <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d6b50:	4628      	mov	r0, r5
   d6b52:	bd38      	pop	{r3, r4, r5, pc}

000d6b54 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d6b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6b56:	4605      	mov	r5, r0
   d6b58:	4616      	mov	r6, r2
   d6b5a:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d6b5c:	f7ff ffd2 	bl	d6b04 <_ZN9SdSpiCard10writeStartEm>
   d6b60:	b170      	cbz	r0, d6b80 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d6b62:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6b64:	42bc      	cmp	r4, r7
   d6b66:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d6b6a:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6b6c:	d004      	beq.n	d6b78 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d6b6e:	f7ff ffb3 	bl	d6ad8 <_ZN9SdSpiCard9writeDataEPKh>
   d6b72:	b128      	cbz	r0, d6b80 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6b74:	3401      	adds	r4, #1
   d6b76:	e7f5      	b.n	d6b64 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d6b78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d6b7c:	f7ff bfd6 	b.w	d6b2c <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d6b80:	4628      	mov	r0, r5
   d6b82:	f7ff fd9a 	bl	d66ba <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d6b86:	2000      	movs	r0, #0
   d6b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6b8a <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d6b8a:	f000 bc9d 	b.w	d74c8 <HAL_Pin_Map>

000d6b8e <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d6b8e:	f000 bc9b 	b.w	d74c8 <HAL_Pin_Map>

000d6b92 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d6b92:	f000 bc99 	b.w	d74c8 <HAL_Pin_Map>
	...

000d6b98 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d6b98:	4b01      	ldr	r3, [pc, #4]	; (d6ba0 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d6b9a:	2201      	movs	r2, #1
   d6b9c:	701a      	strb	r2, [r3, #0]
   d6b9e:	4770      	bx	lr
   d6ba0:	2003e334 	.word	0x2003e334

000d6ba4 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d6ba4:	1d01      	adds	r1, r0, #4
   d6ba6:	6800      	ldr	r0, [r0, #0]
   d6ba8:	f001 b844 	b.w	d7c34 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d6bac <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d6bac:	b510      	push	{r4, lr}
   d6bae:	4604      	mov	r4, r0
  m_csPin = csPin;
   d6bb0:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d6bb2:	6800      	ldr	r0, [r0, #0]
   d6bb4:	f000 fff2 	bl	d7b9c <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d6bb8:	7d20      	ldrb	r0, [r4, #20]
   d6bba:	2101      	movs	r1, #1
   d6bbc:	f002 fa50 	bl	d9060 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d6bc0:	7d20      	ldrb	r0, [r4, #20]
   d6bc2:	2101      	movs	r1, #1
}
   d6bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d6bc8:	f002 ba5b 	b.w	d9082 <digitalWrite>

000d6bcc <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d6bcc:	6800      	ldr	r0, [r0, #0]
   d6bce:	f001 b818 	b.w	d7c02 <_ZN8SPIClass14endTransactionEv>

000d6bd2 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d6bd2:	21ff      	movs	r1, #255	; 0xff
   d6bd4:	6800      	ldr	r0, [r0, #0]
   d6bd6:	f001 b8f3 	b.w	d7dc0 <_ZN8SPIClass8transferEh>
	...

000d6bdc <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d6bdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d6bde:	4b08      	ldr	r3, [pc, #32]	; (d6c00 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d6be0:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6be2:	2500      	movs	r5, #0
   d6be4:	4c07      	ldr	r4, [pc, #28]	; (d6c04 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d6be6:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6be8:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d6bea:	4613      	mov	r3, r2
   d6bec:	460a      	mov	r2, r1
   d6bee:	4629      	mov	r1, r5
   d6bf0:	f001 f8ec 	bl	d7dcc <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d6bf4:	7823      	ldrb	r3, [r4, #0]
   d6bf6:	2b00      	cmp	r3, #0
   d6bf8:	d0fc      	beq.n	d6bf4 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d6bfa:	2000      	movs	r0, #0
   d6bfc:	b003      	add	sp, #12
   d6bfe:	bd30      	pop	{r4, r5, pc}
   d6c00:	000d6b99 	.word	0x000d6b99
   d6c04:	2003e334 	.word	0x2003e334

000d6c08 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d6c08:	6800      	ldr	r0, [r0, #0]
   d6c0a:	f001 b8d9 	b.w	d7dc0 <_ZN8SPIClass8transferEh>
	...

000d6c10 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d6c10:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d6c12:	4b07      	ldr	r3, [pc, #28]	; (d6c30 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d6c14:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6c16:	2500      	movs	r5, #0
   d6c18:	4c06      	ldr	r4, [pc, #24]	; (d6c34 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d6c1a:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6c1c:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d6c1e:	4613      	mov	r3, r2
   d6c20:	462a      	mov	r2, r5
   d6c22:	f001 f8d3 	bl	d7dcc <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d6c26:	7823      	ldrb	r3, [r4, #0]
   d6c28:	2b00      	cmp	r3, #0
   d6c2a:	d0fc      	beq.n	d6c26 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d6c2c:	b003      	add	sp, #12
   d6c2e:	bd30      	pop	{r4, r5, pc}
   d6c30:	000d6b99 	.word	0x000d6b99
   d6c34:	2003e334 	.word	0x2003e334

000d6c38 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d6c38:	f000 bc46 	b.w	d74c8 <HAL_Pin_Map>

000d6c3c <_ZN5RFM694isr0Ev>:
  }
  RSSI = readRSSI();
  //digitalWrite(4, 0);
}

void RFM69::isr0() { selfPointer->interruptHandler(); }
   d6c3c:	4b02      	ldr	r3, [pc, #8]	; (d6c48 <_ZN5RFM694isr0Ev+0xc>)
   d6c3e:	6818      	ldr	r0, [r3, #0]
   d6c40:	6803      	ldr	r3, [r0, #0]
   d6c42:	681b      	ldr	r3, [r3, #0]
   d6c44:	4718      	bx	r3
   d6c46:	bf00      	nop
   d6c48:	2003e34c 	.word	0x2003e34c

000d6c4c <_ZN5RFM6912ACKRequestedEv>:
  return false;
}

//check whether an ACK was requested in the last received packet (non-broadcasted packet)
bool RFM69::ACKRequested() {
  return ACK_REQUESTED && (TARGETID != RF69_BROADCAST_ADDR);
   d6c4c:	4b05      	ldr	r3, [pc, #20]	; (d6c64 <_ZN5RFM6912ACKRequestedEv+0x18>)
   d6c4e:	781b      	ldrb	r3, [r3, #0]
   d6c50:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d6c54:	b123      	cbz	r3, d6c60 <_ZN5RFM6912ACKRequestedEv+0x14>
   d6c56:	4b04      	ldr	r3, [pc, #16]	; (d6c68 <_ZN5RFM6912ACKRequestedEv+0x1c>)
   d6c58:	7818      	ldrb	r0, [r3, #0]
   d6c5a:	38ff      	subs	r0, #255	; 0xff
   d6c5c:	bf18      	it	ne
   d6c5e:	2001      	movne	r0, #1
}
   d6c60:	4770      	bx	lr
   d6c62:	bf00      	nop
   d6c64:	2003e349 	.word	0x2003e349
   d6c68:	2003e348 	.word	0x2003e348

000d6c6c <_ZN5RFM698unselectEv>:
  SPI1.setClockDivider(SPI_CLOCK_DIV16);
  digitalWrite(_slaveSelectPin, LOW);
}

/// UNselect the transceiver chip
void RFM69::unselect() {
   d6c6c:	b508      	push	{r3, lr}
  digitalWrite(_slaveSelectPin, HIGH);
   d6c6e:	2101      	movs	r1, #1
   d6c70:	7900      	ldrb	r0, [r0, #4]
   d6c72:	f002 fa06 	bl	d9082 <digitalWrite>
  #ifndef PARTICLE
  SPCR = _SPCR;
  SPSR = _SPSR;
  #endif
  interrupts();
}
   d6c76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  //restore SPI settings to what they were before talking to RFM69
  #ifndef PARTICLE
  SPCR = _SPCR;
  SPSR = _SPSR;
  #endif
  interrupts();
   d6c7a:	f001 bead 	b.w	d89d8 <_Z10interruptsv>
	...

000d6c80 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d6c80:	b510      	push	{r4, lr}
        static SPIClass instance(Interface);
   d6c82:	4c08      	ldr	r4, [pc, #32]	; (d6ca4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x24>)
   d6c84:	6823      	ldr	r3, [r4, #0]
   d6c86:	07db      	lsls	r3, r3, #31
   d6c88:	d40a      	bmi.n	d6ca0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x20>
   d6c8a:	4620      	mov	r0, r4
   d6c8c:	f7fd fa07 	bl	d409e <__cxa_guard_acquire>
   d6c90:	b130      	cbz	r0, d6ca0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x20>
   d6c92:	2101      	movs	r1, #1
   d6c94:	4804      	ldr	r0, [pc, #16]	; (d6ca8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x28>)
   d6c96:	f000 ff77 	bl	d7b88 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6c9a:	4620      	mov	r0, r4
   d6c9c:	f7fd fa04 	bl	d40a8 <__cxa_guard_release>
        return instance;
    }
   d6ca0:	4801      	ldr	r0, [pc, #4]	; (d6ca8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x28>)
   d6ca2:	bd10      	pop	{r4, pc}
   d6ca4:	2003e338 	.word	0x2003e338
   d6ca8:	2003e33c 	.word	0x2003e33c

000d6cac <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   d6cac:	b510      	push	{r4, lr}
   d6cae:	4604      	mov	r4, r0
        return instance().transfer(data);
   d6cb0:	f7ff ffe6 	bl	d6c80 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d6cb4:	4621      	mov	r1, r4
    }
   d6cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d6cba:	f001 b881 	b.w	d7dc0 <_ZN8SPIClass8transferEh>

000d6cbe <_ZN5RFM696selectEv>:
  SPI1.transfer(value);
  unselect();
}

/// Select the transceiver
void RFM69::select() {
   d6cbe:	b510      	push	{r4, lr}
   d6cc0:	4604      	mov	r4, r0
  noInterrupts();
   d6cc2:	f001 fe87 	bl	d89d4 <_Z12noInterruptsv>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d6cc6:	f7ff ffdb 	bl	d6c80 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d6cca:	2100      	movs	r1, #0
   d6ccc:	f000 ff88 	bl	d7be0 <_ZN8SPIClass11setDataModeEh>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   d6cd0:	f7ff ffd6 	bl	d6c80 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d6cd4:	2101      	movs	r1, #1
   d6cd6:	f000 ff72 	bl	d7bbe <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
   d6cda:	f7ff ffd1 	bl	d6c80 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d6cde:	2118      	movs	r1, #24
   d6ce0:	f001 f84a 	bl	d7d78 <_ZN8SPIClass15setClockDividerEh>
  //set RFM69 SPI settings
  SPI1.setDataMode(SPI_MODE0);
  SPI1.setBitOrder(MSBFIRST);
  //SPI_CLOCK_DIV16; // 72MHz / 16 = 4.5MHz
  SPI1.setClockDivider(SPI_CLOCK_DIV16);
  digitalWrite(_slaveSelectPin, LOW);
   d6ce4:	7920      	ldrb	r0, [r4, #4]
   d6ce6:	2100      	movs	r1, #0
}
   d6ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  //set RFM69 SPI settings
  SPI1.setDataMode(SPI_MODE0);
  SPI1.setBitOrder(MSBFIRST);
  //SPI_CLOCK_DIV16; // 72MHz / 16 = 4.5MHz
  SPI1.setClockDivider(SPI_CLOCK_DIV16);
  digitalWrite(_slaveSelectPin, LOW);
   d6cec:	f002 b9c9 	b.w	d9082 <digitalWrite>

000d6cf0 <_ZN5RFM697readRegEh>:
  rssi >>= 1;
  return rssi;
}

byte RFM69::readReg(byte addr)
{
   d6cf0:	b538      	push	{r3, r4, r5, lr}
   d6cf2:	460c      	mov	r4, r1
   d6cf4:	4605      	mov	r5, r0
  select();
   d6cf6:	f7ff ffe2 	bl	d6cbe <_ZN5RFM696selectEv>
  SPI1.transfer(addr & 0x7F);
   d6cfa:	f004 007f 	and.w	r0, r4, #127	; 0x7f
   d6cfe:	f7ff ffd5 	bl	d6cac <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  byte regval = SPI1.transfer(0);
   d6d02:	2000      	movs	r0, #0
   d6d04:	f7ff ffd2 	bl	d6cac <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d6d08:	4604      	mov	r4, r0
  unselect();
   d6d0a:	4628      	mov	r0, r5
   d6d0c:	f7ff ffae 	bl	d6c6c <_ZN5RFM698unselectEv>
  return regval;
}
   d6d10:	4620      	mov	r0, r4
   d6d12:	bd38      	pop	{r3, r4, r5, pc}

000d6d14 <_ZN5RFM698writeRegEhh>:

void RFM69::writeReg(byte addr, byte value)
{
   d6d14:	b570      	push	{r4, r5, r6, lr}
   d6d16:	460e      	mov	r6, r1
   d6d18:	4615      	mov	r5, r2
   d6d1a:	4604      	mov	r4, r0
  select();
   d6d1c:	f7ff ffcf 	bl	d6cbe <_ZN5RFM696selectEv>
  SPI1.transfer(addr | 0x80);
   d6d20:	f046 0080 	orr.w	r0, r6, #128	; 0x80
   d6d24:	f7ff ffc2 	bl	d6cac <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  SPI1.transfer(value);
   d6d28:	4628      	mov	r0, r5
   d6d2a:	f7ff ffbf 	bl	d6cac <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  unselect();
   d6d2e:	4620      	mov	r0, r4
}
   d6d30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void RFM69::writeReg(byte addr, byte value)
{
  select();
  SPI1.transfer(addr | 0x80);
  SPI1.transfer(value);
  unselect();
   d6d34:	f7ff bf9a 	b.w	d6c6c <_ZN5RFM698unselectEv>

000d6d38 <_ZN5RFM6913setPowerLevelEh>:
}

// set output power: 0=min, 31=max
// this results in a "weaker" transmitted signal, and directly results in a lower RSSI at the receiver
void RFM69::setPowerLevel(byte powerLevel)
{
   d6d38:	b510      	push	{r4, lr}
  _powerLevel = powerLevel;
   d6d3a:	7241      	strb	r1, [r0, #9]
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | (_powerLevel > 31 ? 31 : _powerLevel));
   d6d3c:	2111      	movs	r1, #17
}

// set output power: 0=min, 31=max
// this results in a "weaker" transmitted signal, and directly results in a lower RSSI at the receiver
void RFM69::setPowerLevel(byte powerLevel)
{
   d6d3e:	4604      	mov	r4, r0
  _powerLevel = powerLevel;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | (_powerLevel > 31 ? 31 : _powerLevel));
   d6d40:	f7ff ffd6 	bl	d6cf0 <_ZN5RFM697readRegEh>
   d6d44:	7a62      	ldrb	r2, [r4, #9]
   d6d46:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
   d6d4a:	2a1f      	cmp	r2, #31
   d6d4c:	bf94      	ite	ls
   d6d4e:	4302      	orrls	r2, r0
   d6d50:	f040 021f 	orrhi.w	r2, r0, #31
   d6d54:	2111      	movs	r1, #17
   d6d56:	4620      	mov	r0, r4
}
   d6d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// set output power: 0=min, 31=max
// this results in a "weaker" transmitted signal, and directly results in a lower RSSI at the receiver
void RFM69::setPowerLevel(byte powerLevel)
{
  _powerLevel = powerLevel;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | (_powerLevel > 31 ? 31 : _powerLevel));
   d6d5c:	f7ff bfda 	b.w	d6d14 <_ZN5RFM698writeRegEhh>

000d6d60 <_ZN5RFM698readRSSIEb>:
    unselect();
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
}

int RFM69::readRSSI(bool forceTrigger) {
   d6d60:	b510      	push	{r4, lr}
   d6d62:	4604      	mov	r4, r0
  int rssi = 0;
  if (forceTrigger)
   d6d64:	b149      	cbz	r1, d6d7a <_ZN5RFM698readRSSIEb+0x1a>
  {
    //RSSI trigger not needed if DAGC is in continuous mode
    writeReg(REG_RSSICONFIG, RF_RSSI_START);
   d6d66:	2201      	movs	r2, #1
   d6d68:	2123      	movs	r1, #35	; 0x23
   d6d6a:	f7ff ffd3 	bl	d6d14 <_ZN5RFM698writeRegEhh>
    while ((readReg(REG_RSSICONFIG) & RF_RSSI_DONE) == 0x00); // Wait for RSSI_Ready
   d6d6e:	2123      	movs	r1, #35	; 0x23
   d6d70:	4620      	mov	r0, r4
   d6d72:	f7ff ffbd 	bl	d6cf0 <_ZN5RFM697readRegEh>
   d6d76:	0783      	lsls	r3, r0, #30
   d6d78:	d5f9      	bpl.n	d6d6e <_ZN5RFM698readRSSIEb+0xe>
  }
  rssi = -readReg(REG_RSSIVALUE);
   d6d7a:	2124      	movs	r1, #36	; 0x24
   d6d7c:	4620      	mov	r0, r4
   d6d7e:	f7ff ffb7 	bl	d6cf0 <_ZN5RFM697readRegEh>
   d6d82:	4240      	negs	r0, r0
  rssi >>= 1;
  return rssi;
   d6d84:	1040      	asrs	r0, r0, #1
}
   d6d86:	bd10      	pop	{r4, pc}

000d6d88 <_ZN5RFM6916setHighPowerRegsEb>:
  uint16_t baudRate = 32000000L / speedBPS;;
  
  writeReg(REG_BITRATEMSB, (baudRate >> 8) & 0xFF);
  writeReg(REG_BITRATELSB, (baudRate >> 0) & 0xFF);
}
void RFM69::setHighPowerRegs(bool onOff) {
   d6d88:	b538      	push	{r3, r4, r5, lr}
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
   d6d8a:	2900      	cmp	r1, #0
   d6d8c:	bf14      	ite	ne
   d6d8e:	225d      	movne	r2, #93	; 0x5d
   d6d90:	2255      	moveq	r2, #85	; 0x55
   d6d92:	460c      	mov	r4, r1
   d6d94:	215a      	movs	r1, #90	; 0x5a
  uint16_t baudRate = 32000000L / speedBPS;;
  
  writeReg(REG_BITRATEMSB, (baudRate >> 8) & 0xFF);
  writeReg(REG_BITRATELSB, (baudRate >> 0) & 0xFF);
}
void RFM69::setHighPowerRegs(bool onOff) {
   d6d96:	4605      	mov	r5, r0
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
   d6d98:	f7ff ffbc 	bl	d6d14 <_ZN5RFM698writeRegEhh>
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
   d6d9c:	2c00      	cmp	r4, #0
   d6d9e:	4628      	mov	r0, r5
   d6da0:	bf14      	ite	ne
   d6da2:	227c      	movne	r2, #124	; 0x7c
   d6da4:	2270      	moveq	r2, #112	; 0x70
   d6da6:	215c      	movs	r1, #92	; 0x5c
}
   d6da8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeReg(REG_BITRATEMSB, (baudRate >> 8) & 0xFF);
  writeReg(REG_BITRATELSB, (baudRate >> 0) & 0xFF);
}
void RFM69::setHighPowerRegs(bool onOff) {
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
   d6dac:	f7ff bfb2 	b.w	d6d14 <_ZN5RFM698writeRegEhh>

000d6db0 <_ZN5RFM697setModeEh>:
  writeReg(REG_FRFMID, freqHz >> 8);
  writeReg(REG_FRFLSB, freqHz);
}

void RFM69::setMode(byte newMode)
{
   d6db0:	b570      	push	{r4, r5, r6, lr}
	if (newMode == _mode) return; //TODO: can remove this?
   d6db2:	4d28      	ldr	r5, [pc, #160]	; (d6e54 <_ZN5RFM697setModeEh+0xa4>)
   d6db4:	782b      	ldrb	r3, [r5, #0]
   d6db6:	428b      	cmp	r3, r1
  writeReg(REG_FRFMID, freqHz >> 8);
  writeReg(REG_FRFLSB, freqHz);
}

void RFM69::setMode(byte newMode)
{
   d6db8:	4604      	mov	r4, r0
   d6dba:	460e      	mov	r6, r1
	if (newMode == _mode) return; //TODO: can remove this?
   d6dbc:	d049      	beq.n	d6e52 <_ZN5RFM697setModeEh+0xa2>

	switch (newMode) {
   d6dbe:	2904      	cmp	r1, #4
   d6dc0:	d847      	bhi.n	d6e52 <_ZN5RFM697setModeEh+0xa2>
   d6dc2:	e8df f001 	tbb	[pc, r1]
   d6dc6:	2c34      	.short	0x2c34
   d6dc8:	1224      	.short	0x1224
   d6dca:	03          	.byte	0x03
   d6dcb:	00          	.byte	0x00
		case RF69_MODE_TX:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
   d6dcc:	2101      	movs	r1, #1
   d6dce:	f7ff ff8f 	bl	d6cf0 <_ZN5RFM697readRegEh>
   d6dd2:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d6dd6:	f042 020c 	orr.w	r2, r2, #12
   d6dda:	2101      	movs	r1, #1
   d6ddc:	4620      	mov	r0, r4
   d6dde:	f7ff ff99 	bl	d6d14 <_ZN5RFM698writeRegEhh>
      if (_isRFM69HW) setHighPowerRegs(true);
   d6de2:	7aa3      	ldrb	r3, [r4, #10]
   d6de4:	b363      	cbz	r3, d6e40 <_ZN5RFM697setModeEh+0x90>
   d6de6:	2101      	movs	r1, #1
   d6de8:	e00d      	b.n	d6e06 <_ZN5RFM697setModeEh+0x56>
			break;
		case RF69_MODE_RX:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
   d6dea:	2101      	movs	r1, #1
   d6dec:	f7ff ff80 	bl	d6cf0 <_ZN5RFM697readRegEh>
   d6df0:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d6df4:	f042 0210 	orr.w	r2, r2, #16
   d6df8:	2101      	movs	r1, #1
   d6dfa:	4620      	mov	r0, r4
   d6dfc:	f7ff ff8a 	bl	d6d14 <_ZN5RFM698writeRegEhh>
      if (_isRFM69HW) setHighPowerRegs(false);
   d6e00:	7aa3      	ldrb	r3, [r4, #10]
   d6e02:	b1eb      	cbz	r3, d6e40 <_ZN5RFM697setModeEh+0x90>
   d6e04:	2100      	movs	r1, #0
   d6e06:	4620      	mov	r0, r4
   d6e08:	f7ff ffbe 	bl	d6d88 <_ZN5RFM6916setHighPowerRegsEb>
   d6e0c:	e018      	b.n	d6e40 <_ZN5RFM697setModeEh+0x90>
			break;
		case RF69_MODE_SYNTH:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SYNTHESIZER);
   d6e0e:	2101      	movs	r1, #1
   d6e10:	f7ff ff6e 	bl	d6cf0 <_ZN5RFM697readRegEh>
   d6e14:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d6e18:	f042 0208 	orr.w	r2, r2, #8
   d6e1c:	e00c      	b.n	d6e38 <_ZN5RFM697setModeEh+0x88>
			break;
		case RF69_MODE_STANDBY:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_STANDBY);
   d6e1e:	2101      	movs	r1, #1
   d6e20:	f7ff ff66 	bl	d6cf0 <_ZN5RFM697readRegEh>
   d6e24:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d6e28:	f042 0204 	orr.w	r2, r2, #4
   d6e2c:	e004      	b.n	d6e38 <_ZN5RFM697setModeEh+0x88>
			break;
		case RF69_MODE_SLEEP:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
   d6e2e:	2101      	movs	r1, #1
   d6e30:	f7ff ff5e 	bl	d6cf0 <_ZN5RFM697readRegEh>
   d6e34:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d6e38:	2101      	movs	r1, #1
   d6e3a:	4620      	mov	r0, r4
   d6e3c:	f7ff ff6a 	bl	d6d14 <_ZN5RFM698writeRegEhh>
		default: return;
	}

	// we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
	while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // Wait for ModeReady
   d6e40:	782b      	ldrb	r3, [r5, #0]
   d6e42:	b92b      	cbnz	r3, d6e50 <_ZN5RFM697setModeEh+0xa0>
   d6e44:	2127      	movs	r1, #39	; 0x27
   d6e46:	4620      	mov	r0, r4
   d6e48:	f7ff ff52 	bl	d6cf0 <_ZN5RFM697readRegEh>
   d6e4c:	0603      	lsls	r3, r0, #24
   d6e4e:	d5f7      	bpl.n	d6e40 <_ZN5RFM697setModeEh+0x90>

	_mode = newMode;
   d6e50:	702e      	strb	r6, [r5, #0]
   d6e52:	bd70      	pop	{r4, r5, r6, pc}
   d6e54:	2003e390 	.word	0x2003e390

000d6e58 <_ZN5RFM697canSendEv>:
  _powerLevel = powerLevel;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | (_powerLevel > 31 ? 31 : _powerLevel));
}

bool RFM69::canSend()
{
   d6e58:	b510      	push	{r4, lr}
  if (_mode == RF69_MODE_RX && PAYLOADLEN == 0 && readRSSI() < CSMA_LIMIT) //if signal stronger than -100dBm is detected assume channel activity
   d6e5a:	4b0b      	ldr	r3, [pc, #44]	; (d6e88 <_ZN5RFM697canSendEv+0x30>)
   d6e5c:	781b      	ldrb	r3, [r3, #0]
   d6e5e:	2b03      	cmp	r3, #3
  _powerLevel = powerLevel;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | (_powerLevel > 31 ? 31 : _powerLevel));
}

bool RFM69::canSend()
{
   d6e60:	4604      	mov	r4, r0
  if (_mode == RF69_MODE_RX && PAYLOADLEN == 0 && readRSSI() < CSMA_LIMIT) //if signal stronger than -100dBm is detected assume channel activity
   d6e62:	d10e      	bne.n	d6e82 <_ZN5RFM697canSendEv+0x2a>
   d6e64:	4b09      	ldr	r3, [pc, #36]	; (d6e8c <_ZN5RFM697canSendEv+0x34>)
   d6e66:	781b      	ldrb	r3, [r3, #0]
   d6e68:	f003 01ff 	and.w	r1, r3, #255	; 0xff
   d6e6c:	b94b      	cbnz	r3, d6e82 <_ZN5RFM697canSendEv+0x2a>
   d6e6e:	f7ff ff77 	bl	d6d60 <_ZN5RFM698readRSSIEb>
   d6e72:	305a      	adds	r0, #90	; 0x5a
   d6e74:	da05      	bge.n	d6e82 <_ZN5RFM697canSendEv+0x2a>
  {
    setMode(RF69_MODE_STANDBY);
   d6e76:	4620      	mov	r0, r4
   d6e78:	2101      	movs	r1, #1
   d6e7a:	f7ff ff99 	bl	d6db0 <_ZN5RFM697setModeEh>
    return true;
   d6e7e:	2001      	movs	r0, #1
   d6e80:	bd10      	pop	{r4, pc}
  }
  return false;
   d6e82:	2000      	movs	r0, #0
}
   d6e84:	bd10      	pop	{r4, pc}
   d6e86:	bf00      	nop
   d6e88:	2003e390 	.word	0x2003e390
   d6e8c:	2003e350 	.word	0x2003e350

000d6e90 <_ZN5RFM6912receiveBeginEv>:
}

void RFM69::isr0() { selfPointer->interruptHandler(); }

void RFM69::receiveBegin() {
  DATALEN = 0;
   d6e90:	4a15      	ldr	r2, [pc, #84]	; (d6ee8 <_ZN5RFM6912receiveBeginEv+0x58>)
   d6e92:	2300      	movs	r3, #0
  //digitalWrite(4, 0);
}

void RFM69::isr0() { selfPointer->interruptHandler(); }

void RFM69::receiveBegin() {
   d6e94:	b510      	push	{r4, lr}
  DATALEN = 0;
   d6e96:	7013      	strb	r3, [r2, #0]
  SENDERID = 0;
   d6e98:	4a14      	ldr	r2, [pc, #80]	; (d6eec <_ZN5RFM6912receiveBeginEv+0x5c>)
   d6e9a:	7013      	strb	r3, [r2, #0]
  TARGETID = 0;
   d6e9c:	4a14      	ldr	r2, [pc, #80]	; (d6ef0 <_ZN5RFM6912receiveBeginEv+0x60>)
   d6e9e:	7013      	strb	r3, [r2, #0]
  PAYLOADLEN = 0;
   d6ea0:	4a14      	ldr	r2, [pc, #80]	; (d6ef4 <_ZN5RFM6912receiveBeginEv+0x64>)
   d6ea2:	7013      	strb	r3, [r2, #0]
  ACK_REQUESTED = 0;
   d6ea4:	4a14      	ldr	r2, [pc, #80]	; (d6ef8 <_ZN5RFM6912receiveBeginEv+0x68>)
   d6ea6:	7013      	strb	r3, [r2, #0]
  ACK_RECEIVED = 0;
   d6ea8:	4a14      	ldr	r2, [pc, #80]	; (d6efc <_ZN5RFM6912receiveBeginEv+0x6c>)
   d6eaa:	7013      	strb	r3, [r2, #0]
  RSSI = 0;
   d6eac:	4a14      	ldr	r2, [pc, #80]	; (d6f00 <_ZN5RFM6912receiveBeginEv+0x70>)
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
   d6eae:	2128      	movs	r1, #40	; 0x28
  SENDERID = 0;
  TARGETID = 0;
  PAYLOADLEN = 0;
  ACK_REQUESTED = 0;
  ACK_RECEIVED = 0;
  RSSI = 0;
   d6eb0:	6013      	str	r3, [r2, #0]
  //digitalWrite(4, 0);
}

void RFM69::isr0() { selfPointer->interruptHandler(); }

void RFM69::receiveBegin() {
   d6eb2:	4604      	mov	r4, r0
  TARGETID = 0;
  PAYLOADLEN = 0;
  ACK_REQUESTED = 0;
  ACK_RECEIVED = 0;
  RSSI = 0;
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
   d6eb4:	f7ff ff1c 	bl	d6cf0 <_ZN5RFM697readRegEh>
   d6eb8:	0743      	lsls	r3, r0, #29
   d6eba:	d50a      	bpl.n	d6ed2 <_ZN5RFM6912receiveBeginEv+0x42>
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
   d6ebc:	213d      	movs	r1, #61	; 0x3d
   d6ebe:	4620      	mov	r0, r4
   d6ec0:	f7ff ff16 	bl	d6cf0 <_ZN5RFM697readRegEh>
   d6ec4:	f040 0204 	orr.w	r2, r0, #4
   d6ec8:	b2d2      	uxtb	r2, r2
   d6eca:	213d      	movs	r1, #61	; 0x3d
   d6ecc:	4620      	mov	r0, r4
   d6ece:	f7ff ff21 	bl	d6d14 <_ZN5RFM698writeRegEhh>
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); //set DIO0 to "PAYLOADREADY" in receive mode
   d6ed2:	4620      	mov	r0, r4
   d6ed4:	2125      	movs	r1, #37	; 0x25
   d6ed6:	2240      	movs	r2, #64	; 0x40
   d6ed8:	f7ff ff1c 	bl	d6d14 <_ZN5RFM698writeRegEhh>
  setMode(RF69_MODE_RX);
   d6edc:	4620      	mov	r0, r4
   d6ede:	2103      	movs	r1, #3
}
   d6ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ACK_RECEIVED = 0;
  RSSI = 0;
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); //set DIO0 to "PAYLOADREADY" in receive mode
  setMode(RF69_MODE_RX);
   d6ee4:	f7ff bf64 	b.w	d6db0 <_ZN5RFM697setModeEh>
   d6ee8:	2003e38f 	.word	0x2003e38f
   d6eec:	2003e34a 	.word	0x2003e34a
   d6ef0:	2003e348 	.word	0x2003e348
   d6ef4:	2003e350 	.word	0x2003e350
   d6ef8:	2003e349 	.word	0x2003e349
   d6efc:	2003e351 	.word	0x2003e351
   d6f00:	2003e344 	.word	0x2003e344

000d6f04 <_ZN5RFM6911receiveDoneEv>:
}

bool RFM69::receiveDone() {
   d6f04:	b510      	push	{r4, lr}
   d6f06:	4604      	mov	r4, r0
// ATOMIC_BLOCK(ATOMIC_FORCEON)
// {
  noInterrupts(); //re-enabled in unselect() via setMode() or via receiveBegin()
   d6f08:	f001 fd64 	bl	d89d4 <_Z12noInterruptsv>
  if (_mode == RF69_MODE_RX && PAYLOADLEN>0)
   d6f0c:	4b0b      	ldr	r3, [pc, #44]	; (d6f3c <_ZN5RFM6911receiveDoneEv+0x38>)
   d6f0e:	781a      	ldrb	r2, [r3, #0]
   d6f10:	2a03      	cmp	r2, #3
   d6f12:	d102      	bne.n	d6f1a <_ZN5RFM6911receiveDoneEv+0x16>
   d6f14:	4a0a      	ldr	r2, [pc, #40]	; (d6f40 <_ZN5RFM6911receiveDoneEv+0x3c>)
   d6f16:	7812      	ldrb	r2, [r2, #0]
   d6f18:	b952      	cbnz	r2, d6f30 <_ZN5RFM6911receiveDoneEv+0x2c>
  {
    setMode(RF69_MODE_STANDBY); //enables interrupts
    return true;
  }
  else if (_mode == RF69_MODE_RX)  //already in RX no payload yet
   d6f1a:	781b      	ldrb	r3, [r3, #0]
   d6f1c:	2b03      	cmp	r3, #3
   d6f1e:	d102      	bne.n	d6f26 <_ZN5RFM6911receiveDoneEv+0x22>
  {
    interrupts(); //explicitly re-enable interrupts
   d6f20:	f001 fd5a 	bl	d89d8 <_Z10interruptsv>
   d6f24:	e002      	b.n	d6f2c <_ZN5RFM6911receiveDoneEv+0x28>
    return false;
  }
  receiveBegin();
   d6f26:	4620      	mov	r0, r4
   d6f28:	f7ff ffb2 	bl	d6e90 <_ZN5RFM6912receiveBeginEv>
  return false;
   d6f2c:	2000      	movs	r0, #0
   d6f2e:	bd10      	pop	{r4, pc}
// ATOMIC_BLOCK(ATOMIC_FORCEON)
// {
  noInterrupts(); //re-enabled in unselect() via setMode() or via receiveBegin()
  if (_mode == RF69_MODE_RX && PAYLOADLEN>0)
  {
    setMode(RF69_MODE_STANDBY); //enables interrupts
   d6f30:	4620      	mov	r0, r4
   d6f32:	2101      	movs	r1, #1
   d6f34:	f7ff ff3c 	bl	d6db0 <_ZN5RFM697setModeEh>
    return true;
   d6f38:	2001      	movs	r0, #1
    return false;
  }
  receiveBegin();
  return false;
//}
}
   d6f3a:	bd10      	pop	{r4, pc}
   d6f3c:	2003e390 	.word	0x2003e390
   d6f40:	2003e350 	.word	0x2003e350

000d6f44 <_ZN5RFM6912setHighPowerEb>:
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

void RFM69::setHighPower(bool onOff) {
  _isRFM69HW = onOff;
  writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
   d6f44:	2900      	cmp	r1, #0
void RFM69::promiscuous(bool onOff) {
  _promiscuousMode=onOff;
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

void RFM69::setHighPower(bool onOff) {
   d6f46:	b510      	push	{r4, lr}
   d6f48:	4604      	mov	r4, r0
  _isRFM69HW = onOff;
   d6f4a:	7281      	strb	r1, [r0, #10]
  writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
   d6f4c:	bf14      	ite	ne
   d6f4e:	220f      	movne	r2, #15
   d6f50:	221a      	moveq	r2, #26
   d6f52:	2113      	movs	r1, #19
   d6f54:	f7ff fede 	bl	d6d14 <_ZN5RFM698writeRegEhh>
  if (_isRFM69HW) //turning ON
   d6f58:	7aa3      	ldrb	r3, [r4, #10]
   d6f5a:	b143      	cbz	r3, d6f6e <_ZN5RFM6912setHighPowerEb+0x2a>
    writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); //enable P1 & P2 amplifier stages
   d6f5c:	2111      	movs	r1, #17
   d6f5e:	4620      	mov	r0, r4
   d6f60:	f7ff fec6 	bl	d6cf0 <_ZN5RFM697readRegEh>
   d6f64:	f000 021f 	and.w	r2, r0, #31
   d6f68:	f042 0260 	orr.w	r2, r2, #96	; 0x60
   d6f6c:	e002      	b.n	d6f74 <_ZN5RFM6912setHighPowerEb+0x30>
  else
    writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); //enable P0 only
   d6f6e:	7a62      	ldrb	r2, [r4, #9]
   d6f70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   d6f74:	4620      	mov	r0, r4
   d6f76:	2111      	movs	r1, #17
}
   d6f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  _isRFM69HW = onOff;
  writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
  if (_isRFM69HW) //turning ON
    writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); //enable P1 & P2 amplifier stages
  else
    writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); //enable P0 only
   d6f7c:	f7ff beca 	b.w	d6d14 <_ZN5RFM698writeRegEhh>

000d6f80 <_ZN5RFM699sendFrameEhPKvhbb>:
  sendFrame(sender, buffer, bufferSize, false, true);
  RSSI = _RSSI; //restore payload RSSI
}

void RFM69::sendFrame(byte toAddress, const void* buffer, byte bufferSize, bool requestACK, bool sendACK)
{
   d6f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6f84:	4689      	mov	r9, r1
  setMode(RF69_MODE_STANDBY); //turn off receiver to prevent reception while filling fifo
   d6f86:	2101      	movs	r1, #1
  sendFrame(sender, buffer, bufferSize, false, true);
  RSSI = _RSSI; //restore payload RSSI
}

void RFM69::sendFrame(byte toAddress, const void* buffer, byte bufferSize, bool requestACK, bool sendACK)
{
   d6f88:	4604      	mov	r4, r0
   d6f8a:	4617      	mov	r7, r2
   d6f8c:	461d      	mov	r5, r3
   d6f8e:	f89d 6020 	ldrb.w	r6, [sp, #32]
   d6f92:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
  setMode(RF69_MODE_STANDBY); //turn off receiver to prevent reception while filling fifo
   d6f96:	f7ff ff0b 	bl	d6db0 <_ZN5RFM697setModeEh>
	while ((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // Wait for ModeReady
   d6f9a:	2127      	movs	r1, #39	; 0x27
   d6f9c:	4620      	mov	r0, r4
   d6f9e:	f7ff fea7 	bl	d6cf0 <_ZN5RFM697readRegEh>
   d6fa2:	0603      	lsls	r3, r0, #24
   d6fa4:	d5f9      	bpl.n	d6f9a <_ZN5RFM699sendFrameEhPKvhbb+0x1a>
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_00); // DIO0 is "Packet Sent"
   d6fa6:	2200      	movs	r2, #0
   d6fa8:	2125      	movs	r1, #37	; 0x25
   d6faa:	4620      	mov	r0, r4
   d6fac:	f7ff feb2 	bl	d6d14 <_ZN5RFM698writeRegEhh>
   d6fb0:	2d3d      	cmp	r5, #61	; 0x3d
  if (bufferSize > RF69_MAX_DATA_LEN) bufferSize = RF69_MAX_DATA_LEN;

	//write to FIFO
	select();
   d6fb2:	4620      	mov	r0, r4
   d6fb4:	bf28      	it	cs
   d6fb6:	253d      	movcs	r5, #61	; 0x3d
   d6fb8:	f7ff fe81 	bl	d6cbe <_ZN5RFM696selectEv>
	SPI1.transfer(REG_FIFO | 0x80);
   d6fbc:	2080      	movs	r0, #128	; 0x80
   d6fbe:	f7ff fe75 	bl	d6cac <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
	SPI1.transfer(bufferSize + 3);
   d6fc2:	1ce8      	adds	r0, r5, #3
   d6fc4:	b2c0      	uxtb	r0, r0
   d6fc6:	f7ff fe71 	bl	d6cac <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
	SPI1.transfer(toAddress);
   d6fca:	4648      	mov	r0, r9
   d6fcc:	f7ff fe6e 	bl	d6cac <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  SPI1.transfer(_address);
   d6fd0:	79e0      	ldrb	r0, [r4, #7]
   d6fd2:	f7ff fe6b 	bl	d6cac <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>

  //control byte
  if (sendACK)
   d6fd6:	f1b8 0f00 	cmp.w	r8, #0
   d6fda:	d004      	beq.n	d6fe6 <_ZN5RFM699sendFrameEhPKvhbb+0x66>
    SPI1.transfer(0x80);
   d6fdc:	2080      	movs	r0, #128	; 0x80
   d6fde:	f7ff fe65 	bl	d6cac <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  sendFrame(sender, buffer, bufferSize, false, true);
  RSSI = _RSSI; //restore payload RSSI
}

void RFM69::sendFrame(byte toAddress, const void* buffer, byte bufferSize, bool requestACK, bool sendACK)
{
   d6fe2:	463e      	mov	r6, r7
   d6fe4:	e004      	b.n	d6ff0 <_ZN5RFM699sendFrameEhPKvhbb+0x70>
  SPI1.transfer(_address);

  //control byte
  if (sendACK)
    SPI1.transfer(0x80);
  else if (requestACK)
   d6fe6:	b10e      	cbz	r6, d6fec <_ZN5RFM699sendFrameEhPKvhbb+0x6c>
    SPI1.transfer(0x40);
   d6fe8:	2040      	movs	r0, #64	; 0x40
   d6fea:	e7f8      	b.n	d6fde <_ZN5RFM699sendFrameEhPKvhbb+0x5e>
  else SPI1.transfer(0x00);
   d6fec:	4630      	mov	r0, r6
   d6fee:	e7f6      	b.n	d6fde <_ZN5RFM699sendFrameEhPKvhbb+0x5e>

	for (byte i = 0; i < bufferSize; i++)
   d6ff0:	1bf3      	subs	r3, r6, r7
   d6ff2:	b2db      	uxtb	r3, r3
   d6ff4:	42ab      	cmp	r3, r5
   d6ff6:	d204      	bcs.n	d7002 <_ZN5RFM699sendFrameEhPKvhbb+0x82>
    SPI1.transfer(((byte*)buffer)[i]);
   d6ff8:	f816 0b01 	ldrb.w	r0, [r6], #1
   d6ffc:	f7ff fe56 	bl	d6cac <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
    SPI1.transfer(0x80);
  else if (requestACK)
    SPI1.transfer(0x40);
  else SPI1.transfer(0x00);

	for (byte i = 0; i < bufferSize; i++)
   d7000:	e7f6      	b.n	d6ff0 <_ZN5RFM699sendFrameEhPKvhbb+0x70>
    SPI1.transfer(((byte*)buffer)[i]);
	unselect();
   d7002:	4620      	mov	r0, r4
   d7004:	f7ff fe32 	bl	d6c6c <_ZN5RFM698unselectEv>

	/* no need to wait for transmit mode to be ready since its handled by the radio */
	setMode(RF69_MODE_TX);
   d7008:	2104      	movs	r1, #4
   d700a:	4620      	mov	r0, r4
   d700c:	f7ff fed0 	bl	d6db0 <_ZN5RFM697setModeEh>
   d7010:	f000 fb1a 	bl	d7648 <HAL_Timer_Get_Milli_Seconds>
   d7014:	4605      	mov	r5, r0
  unsigned long txStart = millis();
	while (digitalRead(_interruptPin) == 0 && millis()-txStart < RF69_TX_LIMIT_MS); //wait for DIO0 to turn HIGH signalling transmission finish
   d7016:	7960      	ldrb	r0, [r4, #5]
   d7018:	f002 f84c 	bl	d90b4 <digitalRead>
   d701c:	b128      	cbz	r0, d702a <_ZN5RFM699sendFrameEhPKvhbb+0xaa>
  //while (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT == 0x00); // Wait for ModeReady
  setMode(RF69_MODE_STANDBY);
   d701e:	4620      	mov	r0, r4
   d7020:	2101      	movs	r1, #1
}
   d7022:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	/* no need to wait for transmit mode to be ready since its handled by the radio */
	setMode(RF69_MODE_TX);
  unsigned long txStart = millis();
	while (digitalRead(_interruptPin) == 0 && millis()-txStart < RF69_TX_LIMIT_MS); //wait for DIO0 to turn HIGH signalling transmission finish
  //while (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT == 0x00); // Wait for ModeReady
  setMode(RF69_MODE_STANDBY);
   d7026:	f7ff bec3 	b.w	d6db0 <_ZN5RFM697setModeEh>
   d702a:	f000 fb0d 	bl	d7648 <HAL_Timer_Get_Milli_Seconds>
	unselect();

	/* no need to wait for transmit mode to be ready since its handled by the radio */
	setMode(RF69_MODE_TX);
  unsigned long txStart = millis();
	while (digitalRead(_interruptPin) == 0 && millis()-txStart < RF69_TX_LIMIT_MS); //wait for DIO0 to turn HIGH signalling transmission finish
   d702e:	1b40      	subs	r0, r0, r5
   d7030:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d7034:	d3ef      	bcc.n	d7016 <_ZN5RFM699sendFrameEhPKvhbb+0x96>
   d7036:	e7f2      	b.n	d701e <_ZN5RFM699sendFrameEhPKvhbb+0x9e>

000d7038 <_ZN5RFM694sendEhPKvhb>:
  }
  return false;
}

void RFM69::send(byte toAddress, const void* buffer, byte bufferSize, bool requestACK)
{
   d7038:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d703c:	460d      	mov	r5, r1
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
   d703e:	213d      	movs	r1, #61	; 0x3d
  }
  return false;
}

void RFM69::send(byte toAddress, const void* buffer, byte bufferSize, bool requestACK)
{
   d7040:	461f      	mov	r7, r3
   d7042:	4604      	mov	r4, r0
   d7044:	4616      	mov	r6, r2
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
   d7046:	f7ff fe53 	bl	d6cf0 <_ZN5RFM697readRegEh>
   d704a:	f040 0204 	orr.w	r2, r0, #4
   d704e:	b2d2      	uxtb	r2, r2
   d7050:	213d      	movs	r1, #61	; 0x3d
   d7052:	4620      	mov	r0, r4
   d7054:	f7ff fe5e 	bl	d6d14 <_ZN5RFM698writeRegEhh>
   d7058:	f000 faf6 	bl	d7648 <HAL_Timer_Get_Milli_Seconds>
   d705c:	4680      	mov	r8, r0
  unsigned long now = millis();
  while (!canSend() && millis()-now < RF69_CSMA_LIMIT_MS) receiveDone();
   d705e:	4620      	mov	r0, r4
   d7060:	f7ff fefa 	bl	d6e58 <_ZN5RFM697canSendEv>
   d7064:	b950      	cbnz	r0, d707c <_ZN5RFM694sendEhPKvhb+0x44>
   d7066:	f000 faef 	bl	d7648 <HAL_Timer_Get_Milli_Seconds>
   d706a:	ebc8 0000 	rsb	r0, r8, r0
   d706e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d7072:	d203      	bcs.n	d707c <_ZN5RFM694sendEhPKvhb+0x44>
   d7074:	4620      	mov	r0, r4
   d7076:	f7ff ff45 	bl	d6f04 <_ZN5RFM6911receiveDoneEv>
   d707a:	e7f0      	b.n	d705e <_ZN5RFM694sendEhPKvhb+0x26>
  sendFrame(toAddress, buffer, bufferSize, requestACK, false);
   d707c:	2300      	movs	r3, #0
   d707e:	9301      	str	r3, [sp, #4]
   d7080:	f89d 3020 	ldrb.w	r3, [sp, #32]
   d7084:	9300      	str	r3, [sp, #0]
   d7086:	4632      	mov	r2, r6
   d7088:	463b      	mov	r3, r7
   d708a:	4629      	mov	r1, r5
   d708c:	4620      	mov	r0, r4
   d708e:	f7ff ff77 	bl	d6f80 <_ZN5RFM699sendFrameEhPKvhbb>
}
   d7092:	b002      	add	sp, #8
   d7094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7098 <_ZN5RFM697sendACKEPKvh>:
bool RFM69::ACKRequested() {
  return ACK_REQUESTED && (TARGETID != RF69_BROADCAST_ADDR);
}

/// Should be called immediately after reception in case sender wants ACK
void RFM69::sendACK(const void* buffer, byte bufferSize) {
   d7098:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  byte sender = SENDERID;
   d709c:	4b18      	ldr	r3, [pc, #96]	; (d7100 <_ZN5RFM697sendACKEPKvh+0x68>)
  int _RSSI = RSSI; //save payload received RSSI value
   d709e:	4c19      	ldr	r4, [pc, #100]	; (d7104 <_ZN5RFM697sendACKEPKvh+0x6c>)
  return ACK_REQUESTED && (TARGETID != RF69_BROADCAST_ADDR);
}

/// Should be called immediately after reception in case sender wants ACK
void RFM69::sendACK(const void* buffer, byte bufferSize) {
  byte sender = SENDERID;
   d70a0:	781e      	ldrb	r6, [r3, #0]
  int _RSSI = RSSI; //save payload received RSSI value
   d70a2:	6827      	ldr	r7, [r4, #0]
bool RFM69::ACKRequested() {
  return ACK_REQUESTED && (TARGETID != RF69_BROADCAST_ADDR);
}

/// Should be called immediately after reception in case sender wants ACK
void RFM69::sendACK(const void* buffer, byte bufferSize) {
   d70a4:	4688      	mov	r8, r1
  byte sender = SENDERID;
  int _RSSI = RSSI; //save payload received RSSI value
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
   d70a6:	213d      	movs	r1, #61	; 0x3d
bool RFM69::ACKRequested() {
  return ACK_REQUESTED && (TARGETID != RF69_BROADCAST_ADDR);
}

/// Should be called immediately after reception in case sender wants ACK
void RFM69::sendACK(const void* buffer, byte bufferSize) {
   d70a8:	4605      	mov	r5, r0
   d70aa:	4691      	mov	r9, r2
  byte sender = SENDERID;
  int _RSSI = RSSI; //save payload received RSSI value
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
   d70ac:	f7ff fe20 	bl	d6cf0 <_ZN5RFM697readRegEh>
   d70b0:	f040 0204 	orr.w	r2, r0, #4
   d70b4:	b2d2      	uxtb	r2, r2
   d70b6:	213d      	movs	r1, #61	; 0x3d
   d70b8:	4628      	mov	r0, r5
   d70ba:	f7ff fe2b 	bl	d6d14 <_ZN5RFM698writeRegEhh>
   d70be:	f000 fac3 	bl	d7648 <HAL_Timer_Get_Milli_Seconds>
  return ACK_REQUESTED && (TARGETID != RF69_BROADCAST_ADDR);
}

/// Should be called immediately after reception in case sender wants ACK
void RFM69::sendACK(const void* buffer, byte bufferSize) {
  byte sender = SENDERID;
   d70c2:	b2f6      	uxtb	r6, r6
   d70c4:	4682      	mov	sl, r0
  int _RSSI = RSSI; //save payload received RSSI value
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
  unsigned long now = millis();
  while (!canSend() && millis()-now < RF69_CSMA_LIMIT_MS) receiveDone();
   d70c6:	4628      	mov	r0, r5
   d70c8:	f7ff fec6 	bl	d6e58 <_ZN5RFM697canSendEv>
   d70cc:	b950      	cbnz	r0, d70e4 <_ZN5RFM697sendACKEPKvh+0x4c>
   d70ce:	f000 fabb 	bl	d7648 <HAL_Timer_Get_Milli_Seconds>
   d70d2:	ebca 0000 	rsb	r0, sl, r0
   d70d6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d70da:	d203      	bcs.n	d70e4 <_ZN5RFM697sendACKEPKvh+0x4c>
   d70dc:	4628      	mov	r0, r5
   d70de:	f7ff ff11 	bl	d6f04 <_ZN5RFM6911receiveDoneEv>
   d70e2:	e7f0      	b.n	d70c6 <_ZN5RFM697sendACKEPKvh+0x2e>
  sendFrame(sender, buffer, bufferSize, false, true);
   d70e4:	2200      	movs	r2, #0
   d70e6:	2301      	movs	r3, #1
   d70e8:	e88d 000c 	stmia.w	sp, {r2, r3}
   d70ec:	4631      	mov	r1, r6
   d70ee:	464b      	mov	r3, r9
   d70f0:	4642      	mov	r2, r8
   d70f2:	4628      	mov	r0, r5
   d70f4:	f7ff ff44 	bl	d6f80 <_ZN5RFM699sendFrameEhPKvhbb>
  RSSI = _RSSI; //restore payload RSSI
   d70f8:	6027      	str	r7, [r4, #0]
}
   d70fa:	b002      	add	sp, #8
   d70fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7100:	2003e34a 	.word	0x2003e34a
   d7104:	2003e344 	.word	0x2003e344

000d7108 <_ZN5RFM6916interruptHandlerEv>:
	while (digitalRead(_interruptPin) == 0 && millis()-txStart < RF69_TX_LIMIT_MS); //wait for DIO0 to turn HIGH signalling transmission finish
  //while (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT == 0x00); // Wait for ModeReady
  setMode(RF69_MODE_STANDBY);
}

void RFM69::interruptHandler() {
   d7108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  //pinMode(4, OUTPUT);
  //digitalWrite(4, 1);
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
   d710c:	4b3d      	ldr	r3, [pc, #244]	; (d7204 <_ZN5RFM6916interruptHandlerEv+0xfc>)
   d710e:	781b      	ldrb	r3, [r3, #0]
   d7110:	2b03      	cmp	r3, #3
	while (digitalRead(_interruptPin) == 0 && millis()-txStart < RF69_TX_LIMIT_MS); //wait for DIO0 to turn HIGH signalling transmission finish
  //while (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT == 0x00); // Wait for ModeReady
  setMode(RF69_MODE_STANDBY);
}

void RFM69::interruptHandler() {
   d7112:	4604      	mov	r4, r0
  //pinMode(4, OUTPUT);
  //digitalWrite(4, 1);
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
   d7114:	d114      	bne.n	d7140 <_ZN5RFM6916interruptHandlerEv+0x38>
   d7116:	2128      	movs	r1, #40	; 0x28
   d7118:	f7ff fdea 	bl	d6cf0 <_ZN5RFM697readRegEh>
   d711c:	0743      	lsls	r3, r0, #29
   d711e:	d417      	bmi.n	d7150 <_ZN5RFM6916interruptHandlerEv+0x48>
   d7120:	e00e      	b.n	d7140 <_ZN5RFM6916interruptHandlerEv+0x38>

    for (byte i= 0; i < DATALEN; i++)
    {
      DATA[i] = SPI1.transfer(0);
    }
    if (DATALEN<RF69_MAX_DATA_LEN) DATA[DATALEN]=0; //add null at end of string
   d7122:	7813      	ldrb	r3, [r2, #0]
   d7124:	2b3c      	cmp	r3, #60	; 0x3c
   d7126:	d804      	bhi.n	d7132 <_ZN5RFM6916interruptHandlerEv+0x2a>
   d7128:	7813      	ldrb	r3, [r2, #0]
   d712a:	4a37      	ldr	r2, [pc, #220]	; (d7208 <_ZN5RFM6916interruptHandlerEv+0x100>)
   d712c:	b2db      	uxtb	r3, r3
   d712e:	2100      	movs	r1, #0
   d7130:	54d1      	strb	r1, [r2, r3]
    unselect();
   d7132:	4620      	mov	r0, r4
   d7134:	f7ff fd9a 	bl	d6c6c <_ZN5RFM698unselectEv>
    setMode(RF69_MODE_RX);
   d7138:	2103      	movs	r1, #3
   d713a:	4620      	mov	r0, r4
   d713c:	f7ff fe38 	bl	d6db0 <_ZN5RFM697setModeEh>
  }
  RSSI = readRSSI();
   d7140:	2100      	movs	r1, #0
   d7142:	4620      	mov	r0, r4
   d7144:	f7ff fe0c 	bl	d6d60 <_ZN5RFM698readRSSIEb>
   d7148:	4b30      	ldr	r3, [pc, #192]	; (d720c <_ZN5RFM6916interruptHandlerEv+0x104>)
   d714a:	6018      	str	r0, [r3, #0]
   d714c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  //pinMode(4, OUTPUT);
  //digitalWrite(4, 1);
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
  {
    //RSSI = readRSSI();
    setMode(RF69_MODE_STANDBY);
   d7150:	2101      	movs	r1, #1
   d7152:	4620      	mov	r0, r4
   d7154:	f7ff fe2c 	bl	d6db0 <_ZN5RFM697setModeEh>
    select();
   d7158:	4620      	mov	r0, r4
   d715a:	f7ff fdb0 	bl	d6cbe <_ZN5RFM696selectEv>
    SPI1.transfer(REG_FIFO & 0x7f);
   d715e:	2000      	movs	r0, #0
   d7160:	f7ff fda4 	bl	d6cac <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
    PAYLOADLEN = SPI1.transfer(0);
   d7164:	2000      	movs	r0, #0
   d7166:	f7ff fda1 	bl	d6cac <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d716a:	4d29      	ldr	r5, [pc, #164]	; (d7210 <_ZN5RFM6916interruptHandlerEv+0x108>)
   d716c:	7028      	strb	r0, [r5, #0]
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
   d716e:	782b      	ldrb	r3, [r5, #0]
   d7170:	2b42      	cmp	r3, #66	; 0x42
   d7172:	d814      	bhi.n	d719e <_ZN5RFM6916interruptHandlerEv+0x96>
   d7174:	782b      	ldrb	r3, [r5, #0]
   d7176:	b2db      	uxtb	r3, r3
    TARGETID = SPI1.transfer(0);
   d7178:	2000      	movs	r0, #0
    //RSSI = readRSSI();
    setMode(RF69_MODE_STANDBY);
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
   d717a:	702b      	strb	r3, [r5, #0]
    TARGETID = SPI1.transfer(0);
   d717c:	f7ff fd96 	bl	d6cac <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d7180:	4b24      	ldr	r3, [pc, #144]	; (d7214 <_ZN5RFM6916interruptHandlerEv+0x10c>)
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
   d7182:	7a22      	ldrb	r2, [r4, #8]
    setMode(RF69_MODE_STANDBY);
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
    TARGETID = SPI1.transfer(0);
   d7184:	7018      	strb	r0, [r3, #0]
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
   d7186:	b932      	cbnz	r2, d7196 <_ZN5RFM6916interruptHandlerEv+0x8e>
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
    TARGETID = SPI1.transfer(0);
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
   d7188:	781a      	ldrb	r2, [r3, #0]
   d718a:	79e1      	ldrb	r1, [r4, #7]
   d718c:	4291      	cmp	r1, r2
   d718e:	d002      	beq.n	d7196 <_ZN5RFM6916interruptHandlerEv+0x8e>
   d7190:	781b      	ldrb	r3, [r3, #0]
   d7192:	2bff      	cmp	r3, #255	; 0xff
   d7194:	d105      	bne.n	d71a2 <_ZN5RFM6916interruptHandlerEv+0x9a>
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
   d7196:	782b      	ldrb	r3, [r5, #0]
   d7198:	2b02      	cmp	r3, #2
   d719a:	d902      	bls.n	d71a2 <_ZN5RFM6916interruptHandlerEv+0x9a>
   d719c:	e00b      	b.n	d71b6 <_ZN5RFM6916interruptHandlerEv+0xae>
    //RSSI = readRSSI();
    setMode(RF69_MODE_STANDBY);
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
   d719e:	2342      	movs	r3, #66	; 0x42
   d71a0:	e7ea      	b.n	d7178 <_ZN5RFM6916interruptHandlerEv+0x70>
    TARGETID = SPI1.transfer(0);
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
    {
      PAYLOADLEN = 0;
      unselect();
   d71a2:	4620      	mov	r0, r4
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
    TARGETID = SPI1.transfer(0);
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
    {
      PAYLOADLEN = 0;
   d71a4:	2300      	movs	r3, #0
   d71a6:	702b      	strb	r3, [r5, #0]
      unselect();
   d71a8:	f7ff fd60 	bl	d6c6c <_ZN5RFM698unselectEv>
      receiveBegin();
   d71ac:	4620      	mov	r0, r4
    unselect();
    setMode(RF69_MODE_RX);
  }
  RSSI = readRSSI();
  //digitalWrite(4, 0);
}
   d71ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
    {
      PAYLOADLEN = 0;
      unselect();
      receiveBegin();
   d71b2:	f7ff be6d 	b.w	d6e90 <_ZN5RFM6912receiveBeginEv>
      //digitalWrite(4, 0);
      return;
    }

    DATALEN = PAYLOADLEN - 3;
   d71b6:	4b16      	ldr	r3, [pc, #88]	; (d7210 <_ZN5RFM6916interruptHandlerEv+0x108>)
   d71b8:	4e17      	ldr	r6, [pc, #92]	; (d7218 <_ZN5RFM6916interruptHandlerEv+0x110>)
   d71ba:	781b      	ldrb	r3, [r3, #0]
    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag

    for (byte i= 0; i < DATALEN; i++)
    {
      DATA[i] = SPI1.transfer(0);
   d71bc:	4f12      	ldr	r7, [pc, #72]	; (d7208 <_ZN5RFM6916interruptHandlerEv+0x100>)
      receiveBegin();
      //digitalWrite(4, 0);
      return;
    }

    DATALEN = PAYLOADLEN - 3;
   d71be:	3b03      	subs	r3, #3
   d71c0:	b2db      	uxtb	r3, r3
    SENDERID = SPI1.transfer(0);
   d71c2:	2000      	movs	r0, #0
      receiveBegin();
      //digitalWrite(4, 0);
      return;
    }

    DATALEN = PAYLOADLEN - 3;
   d71c4:	7033      	strb	r3, [r6, #0]
    SENDERID = SPI1.transfer(0);
   d71c6:	f7ff fd71 	bl	d6cac <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d71ca:	4b14      	ldr	r3, [pc, #80]	; (d721c <_ZN5RFM6916interruptHandlerEv+0x114>)
   d71cc:	7018      	strb	r0, [r3, #0]
    byte CTLbyte = SPI1.transfer(0);
   d71ce:	2000      	movs	r0, #0
   d71d0:	f7ff fd6c 	bl	d6cac <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>

    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
   d71d4:	4a12      	ldr	r2, [pc, #72]	; (d7220 <_ZN5RFM6916interruptHandlerEv+0x118>)
   d71d6:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
   d71da:	b2db      	uxtb	r3, r3
   d71dc:	7013      	strb	r3, [r2, #0]
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag
   d71de:	f000 0040 	and.w	r0, r0, #64	; 0x40
   d71e2:	4b10      	ldr	r3, [pc, #64]	; (d7224 <_ZN5RFM6916interruptHandlerEv+0x11c>)
   d71e4:	b2c0      	uxtb	r0, r0
   d71e6:	7018      	strb	r0, [r3, #0]
   d71e8:	2300      	movs	r3, #0

    for (byte i= 0; i < DATALEN; i++)
   d71ea:	7831      	ldrb	r1, [r6, #0]
   d71ec:	4a0a      	ldr	r2, [pc, #40]	; (d7218 <_ZN5RFM6916interruptHandlerEv+0x110>)
   d71ee:	b2dd      	uxtb	r5, r3
   d71f0:	428d      	cmp	r5, r1
   d71f2:	f103 0801 	add.w	r8, r3, #1
   d71f6:	d294      	bcs.n	d7122 <_ZN5RFM6916interruptHandlerEv+0x1a>
    {
      DATA[i] = SPI1.transfer(0);
   d71f8:	2000      	movs	r0, #0
   d71fa:	f7ff fd57 	bl	d6cac <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
    byte CTLbyte = SPI1.transfer(0);

    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag

    for (byte i= 0; i < DATALEN; i++)
   d71fe:	4643      	mov	r3, r8
    {
      DATA[i] = SPI1.transfer(0);
   d7200:	5578      	strb	r0, [r7, r5]
    byte CTLbyte = SPI1.transfer(0);

    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag

    for (byte i= 0; i < DATALEN; i++)
   d7202:	e7f2      	b.n	d71ea <_ZN5RFM6916interruptHandlerEv+0xe2>
   d7204:	2003e390 	.word	0x2003e390
   d7208:	2003e352 	.word	0x2003e352
   d720c:	2003e344 	.word	0x2003e344
   d7210:	2003e350 	.word	0x2003e350
   d7214:	2003e348 	.word	0x2003e348
   d7218:	2003e38f 	.word	0x2003e38f
   d721c:	2003e34a 	.word	0x2003e34a
   d7220:	2003e351 	.word	0x2003e351
   d7224:	2003e349 	.word	0x2003e349

000d7228 <_ZN5RFM697encryptEPKc>:
}

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM69::encrypt(const char* key) {
   d7228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d722a:	460d      	mov	r5, r1
  setMode(RF69_MODE_STANDBY);
   d722c:	2101      	movs	r1, #1
}

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM69::encrypt(const char* key) {
   d722e:	4604      	mov	r4, r0
  setMode(RF69_MODE_STANDBY);
   d7230:	f7ff fdbe 	bl	d6db0 <_ZN5RFM697setModeEh>
  if (key!=0)
   d7234:	b18d      	cbz	r5, d725a <_ZN5RFM697encryptEPKc+0x32>
  {
    select();
   d7236:	4620      	mov	r0, r4
   d7238:	f7ff fd41 	bl	d6cbe <_ZN5RFM696selectEv>
    SPI1.transfer(REG_AESKEY1 | 0x80);
   d723c:	20be      	movs	r0, #190	; 0xbe
   d723e:	f7ff fd35 	bl	d6cac <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d7242:	1e6e      	subs	r6, r5, #1
   d7244:	f105 070f 	add.w	r7, r5, #15
    for (byte i = 0; i<16; i++)
      SPI1.transfer(key[i]);
   d7248:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   d724c:	f7ff fd2e 	bl	d6cac <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  setMode(RF69_MODE_STANDBY);
  if (key!=0)
  {
    select();
    SPI1.transfer(REG_AESKEY1 | 0x80);
    for (byte i = 0; i<16; i++)
   d7250:	42be      	cmp	r6, r7
   d7252:	d1f9      	bne.n	d7248 <_ZN5RFM697encryptEPKc+0x20>
      SPI1.transfer(key[i]);
    unselect();
   d7254:	4620      	mov	r0, r4
   d7256:	f7ff fd09 	bl	d6c6c <_ZN5RFM698unselectEv>
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
   d725a:	213d      	movs	r1, #61	; 0x3d
   d725c:	4620      	mov	r0, r4
   d725e:	f7ff fd47 	bl	d6cf0 <_ZN5RFM697readRegEh>
   d7262:	f020 0001 	bic.w	r0, r0, #1
   d7266:	2d00      	cmp	r5, #0
   d7268:	bf0c      	ite	eq
   d726a:	4602      	moveq	r2, r0
   d726c:	f040 0201 	orrne.w	r2, r0, #1
   d7270:	b2d2      	uxtb	r2, r2
   d7272:	4620      	mov	r0, r4
   d7274:	213d      	movs	r1, #61	; 0x3d
}
   d7276:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    SPI1.transfer(REG_AESKEY1 | 0x80);
    for (byte i = 0; i<16; i++)
      SPI1.transfer(key[i]);
    unselect();
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
   d727a:	f7ff bd4b 	b.w	d6d14 <_ZN5RFM698writeRegEhh>
	...

000d7280 <_ZN5RFM6910initializeEhhh>:
volatile byte RFM69::ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
volatile int RFM69::RSSI; //most accurate RSSI during reception (closest to the reception)
RFM69* RFM69::selfPointer;

bool RFM69::initialize(byte freqBand, byte nodeID, byte networkID)
{
   d7280:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7282:	b08f      	sub	sp, #60	; 0x3c
   d7284:	460d      	mov	r5, r1
   d7286:	4604      	mov	r4, r0
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d7288:	2100      	movs	r1, #0
volatile byte RFM69::ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
volatile int RFM69::RSSI; //most accurate RSSI during reception (closest to the reception)
RFM69* RFM69::selfPointer;

bool RFM69::initialize(byte freqBand, byte nodeID, byte networkID)
{
   d728a:	4616      	mov	r6, r2
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d728c:	a803      	add	r0, sp, #12
   d728e:	222a      	movs	r2, #42	; 0x2a
volatile byte RFM69::ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
volatile int RFM69::RSSI; //most accurate RSSI during reception (closest to the reception)
RFM69* RFM69::selfPointer;

bool RFM69::initialize(byte freqBand, byte nodeID, byte networkID)
{
   d7290:	461f      	mov	r7, r3
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d7292:	f002 fe49 	bl	d9f28 <memset>
   d7296:	2301      	movs	r3, #1
   d7298:	f88d 300c 	strb.w	r3, [sp, #12]
   d729c:	2303      	movs	r3, #3
   d729e:	f88d 3010 	strb.w	r3, [sp, #16]
   d72a2:	f88d 3015 	strb.w	r3, [sp, #21]
   d72a6:	2306      	movs	r3, #6
   d72a8:	f88d 3016 	strb.w	r3, [sp, #22]
   d72ac:	2333      	movs	r3, #51	; 0x33
   d72ae:	f88d 3017 	strb.w	r3, [sp, #23]
   d72b2:	2307      	movs	r3, #7
   d72b4:	f88d 3018 	strb.w	r3, [sp, #24]
   d72b8:	2308      	movs	r3, #8
   d72ba:	f88d 301a 	strb.w	r3, [sp, #26]
   d72be:	2309      	movs	r3, #9
   d72c0:	f88d 301c 	strb.w	r3, [sp, #28]
   d72c4:	2319      	movs	r3, #25
   d72c6:	f88d 301e 	strb.w	r3, [sp, #30]
   d72ca:	2325      	movs	r3, #37	; 0x25
   d72cc:	f88d 3020 	strb.w	r3, [sp, #32]
   d72d0:	2329      	movs	r3, #41	; 0x29
   d72d2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   d72d6:	23dc      	movs	r3, #220	; 0xdc
   d72d8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   d72dc:	232e      	movs	r3, #46	; 0x2e
   d72de:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d72e2:	2388      	movs	r3, #136	; 0x88
   d72e4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   d72e8:	232f      	movs	r3, #47	; 0x2f
   d72ea:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   d72ee:	232d      	movs	r3, #45	; 0x2d
   d72f0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   d72f4:	2337      	movs	r3, #55	; 0x37
   d72f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   d72fa:	2390      	movs	r3, #144	; 0x90
   d72fc:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d7300:	2338      	movs	r3, #56	; 0x38
   d7302:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   d7306:	233c      	movs	r3, #60	; 0x3c
   d7308:	2204      	movs	r2, #4
   d730a:	2102      	movs	r1, #2
   d730c:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
   d7310:	238f      	movs	r3, #143	; 0x8f
   d7312:	f88d 200d 	strb.w	r2, [sp, #13]
   d7316:	f88d 100e 	strb.w	r1, [sp, #14]
   d731a:	f88d 1011 	strb.w	r1, [sp, #17]
   d731e:	f88d 2012 	strb.w	r2, [sp, #18]
   d7322:	2105      	movs	r1, #5
   d7324:	2240      	movs	r2, #64	; 0x40
   d7326:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   d732a:	233d      	movs	r3, #61	; 0x3d
   d732c:	f88d 2013 	strb.w	r2, [sp, #19]
   d7330:	f88d 1014 	strb.w	r1, [sp, #20]
   d7334:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
   d7338:	2142      	movs	r1, #66	; 0x42
   d733a:	2230      	movs	r2, #48	; 0x30
   d733c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   d7340:	2312      	movs	r3, #18
   d7342:	f88d 101f 	strb.w	r1, [sp, #31]
   d7346:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   d734a:	f88d 102d 	strb.w	r1, [sp, #45]	; 0x2d
   d734e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   d7352:	236f      	movs	r3, #111	; 0x6f
   d7354:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   d7358:	2d1f      	cmp	r5, #31
   d735a:	f04f 03ff 	mov.w	r3, #255	; 0xff
   d735e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   d7362:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   d7366:	d006      	beq.n	d7376 <_ZN5RFM6910initializeEhhh+0xf6>
   d7368:	2d2b      	cmp	r5, #43	; 0x2b
   d736a:	d006      	beq.n	d737a <_ZN5RFM6910initializeEhhh+0xfa>
   d736c:	2d56      	cmp	r5, #86	; 0x56
   d736e:	bf0c      	ite	eq
   d7370:	22d9      	moveq	r2, #217	; 0xd9
   d7372:	22e4      	movne	r2, #228	; 0xe4
   d7374:	e002      	b.n	d737c <_ZN5RFM6910initializeEhhh+0xfc>
   d7376:	224e      	movs	r2, #78	; 0x4e
   d7378:	e000      	b.n	d737c <_ZN5RFM6910initializeEhhh+0xfc>
   d737a:	226c      	movs	r2, #108	; 0x6c
   d737c:	2d1f      	cmp	r5, #31
   d737e:	f88d 2019 	strb.w	r2, [sp, #25]
   d7382:	d006      	beq.n	d7392 <_ZN5RFM6910initializeEhhh+0x112>
   d7384:	2d2b      	cmp	r5, #43	; 0x2b
   d7386:	d006      	beq.n	d7396 <_ZN5RFM6910initializeEhhh+0x116>
   d7388:	2d56      	cmp	r5, #86	; 0x56
   d738a:	bf14      	ite	ne
   d738c:	22c0      	movne	r2, #192	; 0xc0
   d738e:	2200      	moveq	r2, #0
   d7390:	e002      	b.n	d7398 <_ZN5RFM6910initializeEhhh+0x118>
   d7392:	22c0      	movs	r2, #192	; 0xc0
   d7394:	e000      	b.n	d7398 <_ZN5RFM6910initializeEhhh+0x118>
   d7396:	2240      	movs	r2, #64	; 0x40

  pinMode(_slaveSelectPin, OUTPUT);
   d7398:	2101      	movs	r1, #1
   d739a:	7920      	ldrb	r0, [r4, #4]
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d739c:	f88d 201b 	strb.w	r2, [sp, #27]
   d73a0:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29

  pinMode(_slaveSelectPin, OUTPUT);
   d73a4:	f001 fe5c 	bl	d9060 <pinMode>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d73a8:	f7ff fc6a 	bl	d6c80 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d73ac:	f000 fbf6 	bl	d7b9c <_ZN8SPIClass5beginEv>
   d73b0:	f000 f94a 	bl	d7648 <HAL_Timer_Get_Milli_Seconds>
   d73b4:	4605      	mov	r5, r0
  // Set time out to 50ms
  #define TIME_OUT 50
  
  start_to = millis() ;

  do writeReg(REG_SYNCVALUE1, 0xaa); while (readReg(REG_SYNCVALUE1) != 0xaa && millis()-start_to < TIME_OUT);
   d73b6:	22aa      	movs	r2, #170	; 0xaa
   d73b8:	212f      	movs	r1, #47	; 0x2f
   d73ba:	4620      	mov	r0, r4
   d73bc:	f7ff fcaa 	bl	d6d14 <_ZN5RFM698writeRegEhh>
   d73c0:	212f      	movs	r1, #47	; 0x2f
   d73c2:	4620      	mov	r0, r4
   d73c4:	f7ff fc94 	bl	d6cf0 <_ZN5RFM697readRegEh>
   d73c8:	28aa      	cmp	r0, #170	; 0xaa
   d73ca:	d004      	beq.n	d73d6 <_ZN5RFM6910initializeEhhh+0x156>
   d73cc:	f000 f93c 	bl	d7648 <HAL_Timer_Get_Milli_Seconds>
   d73d0:	1b40      	subs	r0, r0, r5
   d73d2:	2831      	cmp	r0, #49	; 0x31
   d73d4:	d9ef      	bls.n	d73b6 <_ZN5RFM6910initializeEhhh+0x136>
   d73d6:	f000 f937 	bl	d7648 <HAL_Timer_Get_Milli_Seconds>
  if (millis()-start_to >= TIME_OUT) return (false);
   d73da:	1b40      	subs	r0, r0, r5
   d73dc:	2831      	cmp	r0, #49	; 0x31
   d73de:	d82d      	bhi.n	d743c <_ZN5RFM6910initializeEhhh+0x1bc>
   d73e0:	f000 f932 	bl	d7648 <HAL_Timer_Get_Milli_Seconds>
   d73e4:	4605      	mov	r5, r0
    
  // Set time out 
  start_to = millis()  ;  
	do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis()-start_to < TIME_OUT);
   d73e6:	2255      	movs	r2, #85	; 0x55
   d73e8:	212f      	movs	r1, #47	; 0x2f
   d73ea:	4620      	mov	r0, r4
   d73ec:	f7ff fc92 	bl	d6d14 <_ZN5RFM698writeRegEhh>
   d73f0:	212f      	movs	r1, #47	; 0x2f
   d73f2:	4620      	mov	r0, r4
   d73f4:	f7ff fc7c 	bl	d6cf0 <_ZN5RFM697readRegEh>
   d73f8:	2855      	cmp	r0, #85	; 0x55
   d73fa:	d021      	beq.n	d7440 <_ZN5RFM6910initializeEhhh+0x1c0>
   d73fc:	f000 f924 	bl	d7648 <HAL_Timer_Get_Milli_Seconds>
   d7400:	1b40      	subs	r0, r0, r5
   d7402:	2831      	cmp	r0, #49	; 0x31
   d7404:	d9ef      	bls.n	d73e6 <_ZN5RFM6910initializeEhhh+0x166>
   d7406:	e01b      	b.n	d7440 <_ZN5RFM6910initializeEhhh+0x1c0>
  for (byte i = 0; CONFIG[i][0] != 255; i++)
    writeReg(CONFIG[i][0], CONFIG[i][1]);

  // Encryption is persistent between resets and can trip you up during debugging.
  // Disable it during initialization so we always start from a known state.
  encrypt(0);
   d7408:	2100      	movs	r1, #0
   d740a:	4620      	mov	r0, r4
   d740c:	f7ff ff0c 	bl	d7228 <_ZN5RFM697encryptEPKc>

  setHighPower(_isRFM69HW); //called regardless if it's a RFM69W or RFM69HW
   d7410:	7aa1      	ldrb	r1, [r4, #10]
   d7412:	4620      	mov	r0, r4
   d7414:	f7ff fd96 	bl	d6f44 <_ZN5RFM6912setHighPowerEb>
  setMode(RF69_MODE_STANDBY);
   d7418:	2101      	movs	r1, #1
   d741a:	4620      	mov	r0, r4
   d741c:	f7ff fcc8 	bl	d6db0 <_ZN5RFM697setModeEh>
   d7420:	f000 f912 	bl	d7648 <HAL_Timer_Get_Milli_Seconds>
   d7424:	4605      	mov	r5, r0
  // Set time out 
  start_to = millis() ;
	while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis()-start_to < TIME_OUT); // Wait for ModeReady
   d7426:	2127      	movs	r1, #39	; 0x27
   d7428:	4620      	mov	r0, r4
   d742a:	f7ff fc61 	bl	d6cf0 <_ZN5RFM697readRegEh>
   d742e:	0603      	lsls	r3, r0, #24
   d7430:	d51b      	bpl.n	d746a <_ZN5RFM6910initializeEhhh+0x1ea>
   d7432:	f000 f909 	bl	d7648 <HAL_Timer_Get_Milli_Seconds>
  if (millis()-start_to >= TIME_OUT) return (false);
   d7436:	1b40      	subs	r0, r0, r5
   d7438:	2831      	cmp	r0, #49	; 0x31
   d743a:	d91c      	bls.n	d7476 <_ZN5RFM6910initializeEhhh+0x1f6>
  // picking a non-interrupt enabled pin will prevent proper initialization
  // code thanks to @ScruffR - https://community.particle.io/t/how-to-make-rfm69-work-on-photon-solved-new-library-rfm69-particle/26497/93?u=bloukingfisher
  if (!attachInterrupt(_interruptNum, RFM69::isr0, RISING)) return false;
   d743c:	2000      	movs	r0, #0
   d743e:	e028      	b.n	d7492 <_ZN5RFM6910initializeEhhh+0x212>
   d7440:	f000 f902 	bl	d7648 <HAL_Timer_Get_Milli_Seconds>
  if (millis()-start_to >= TIME_OUT) return (false);
    
  // Set time out 
  start_to = millis()  ;  
	do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis()-start_to < TIME_OUT);
  if (millis()-start_to >= TIME_OUT) return (false);
   d7444:	1b40      	subs	r0, r0, r5
   d7446:	2831      	cmp	r0, #49	; 0x31
   d7448:	d8f8      	bhi.n	d743c <_ZN5RFM6910initializeEhhh+0x1bc>
   d744a:	2500      	movs	r5, #0
  for (byte i = 0; CONFIG[i][0] != 255; i++)
   d744c:	b2eb      	uxtb	r3, r5
   d744e:	aa0e      	add	r2, sp, #56	; 0x38
   d7450:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d7454:	3501      	adds	r5, #1
   d7456:	f813 1c2c 	ldrb.w	r1, [r3, #-44]
   d745a:	29ff      	cmp	r1, #255	; 0xff
   d745c:	d0d4      	beq.n	d7408 <_ZN5RFM6910initializeEhhh+0x188>
    writeReg(CONFIG[i][0], CONFIG[i][1]);
   d745e:	f813 2c2b 	ldrb.w	r2, [r3, #-43]
   d7462:	4620      	mov	r0, r4
   d7464:	f7ff fc56 	bl	d6d14 <_ZN5RFM698writeRegEhh>
    
  // Set time out 
  start_to = millis()  ;  
	do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis()-start_to < TIME_OUT);
  if (millis()-start_to >= TIME_OUT) return (false);
  for (byte i = 0; CONFIG[i][0] != 255; i++)
   d7468:	e7f0      	b.n	d744c <_ZN5RFM6910initializeEhhh+0x1cc>
   d746a:	f000 f8ed 	bl	d7648 <HAL_Timer_Get_Milli_Seconds>

  setHighPower(_isRFM69HW); //called regardless if it's a RFM69W or RFM69HW
  setMode(RF69_MODE_STANDBY);
  // Set time out 
  start_to = millis() ;
	while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis()-start_to < TIME_OUT); // Wait for ModeReady
   d746e:	1b40      	subs	r0, r0, r5
   d7470:	2831      	cmp	r0, #49	; 0x31
   d7472:	d9d8      	bls.n	d7426 <_ZN5RFM6910initializeEhhh+0x1a6>
   d7474:	e7dd      	b.n	d7432 <_ZN5RFM6910initializeEhhh+0x1b2>
  if (millis()-start_to >= TIME_OUT) return (false);
  // picking a non-interrupt enabled pin will prevent proper initialization
  // code thanks to @ScruffR - https://community.particle.io/t/how-to-make-rfm69-work-on-photon-solved-new-library-rfm69-particle/26497/93?u=bloukingfisher
  if (!attachInterrupt(_interruptNum, RFM69::isr0, RISING)) return false;
   d7476:	2300      	movs	r3, #0
   d7478:	9300      	str	r3, [sp, #0]
   d747a:	79a0      	ldrb	r0, [r4, #6]
   d747c:	4906      	ldr	r1, [pc, #24]	; (d7498 <_ZN5RFM6910initializeEhhh+0x218>)
   d747e:	f04f 33ff 	mov.w	r3, #4294967295
   d7482:	2201      	movs	r2, #1
   d7484:	f001 fa7e 	bl	d8984 <_Z15attachInterrupttPFvvE13InterruptModeah>
   d7488:	2800      	cmp	r0, #0
   d748a:	d0d7      	beq.n	d743c <_ZN5RFM6910initializeEhhh+0x1bc>

  selfPointer = this;
   d748c:	4b03      	ldr	r3, [pc, #12]	; (d749c <_ZN5RFM6910initializeEhhh+0x21c>)
  _address = nodeID;
   d748e:	71e6      	strb	r6, [r4, #7]
  if (millis()-start_to >= TIME_OUT) return (false);
  // picking a non-interrupt enabled pin will prevent proper initialization
  // code thanks to @ScruffR - https://community.particle.io/t/how-to-make-rfm69-work-on-photon-solved-new-library-rfm69-particle/26497/93?u=bloukingfisher
  if (!attachInterrupt(_interruptNum, RFM69::isr0, RISING)) return false;

  selfPointer = this;
   d7490:	601c      	str	r4, [r3, #0]
  _address = nodeID;
  return true;
}
   d7492:	b00f      	add	sp, #60	; 0x3c
   d7494:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7496:	bf00      	nop
   d7498:	000d6c3d 	.word	0x000d6c3d
   d749c:	2003e34c 	.word	0x2003e34c

000d74a0 <_GLOBAL__sub_I__ZN5RFM694DATAE>:
   d74a0:	f000 b812 	b.w	d74c8 <HAL_Pin_Map>

000d74a4 <_GLOBAL__sub_I__ZN9RFM69_ATC18ACK_RSSI_REQUESTEDE>:
   d74a4:	f000 b810 	b.w	d74c8 <HAL_Pin_Map>

000d74a8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d74a8:	b508      	push	{r3, lr}
   d74aa:	4b02      	ldr	r3, [pc, #8]	; (d74b4 <netdb_freeaddrinfo+0xc>)
   d74ac:	681b      	ldr	r3, [r3, #0]
   d74ae:	689b      	ldr	r3, [r3, #8]
   d74b0:	9301      	str	r3, [sp, #4]
   d74b2:	bd08      	pop	{r3, pc}
   d74b4:	00030268 	.word	0x00030268

000d74b8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d74b8:	b508      	push	{r3, lr}
   d74ba:	4b02      	ldr	r3, [pc, #8]	; (d74c4 <netdb_getaddrinfo+0xc>)
   d74bc:	681b      	ldr	r3, [r3, #0]
   d74be:	68db      	ldr	r3, [r3, #12]
   d74c0:	9301      	str	r3, [sp, #4]
   d74c2:	bd08      	pop	{r3, pc}
   d74c4:	00030268 	.word	0x00030268

000d74c8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d74c8:	b508      	push	{r3, lr}
   d74ca:	4b02      	ldr	r3, [pc, #8]	; (d74d4 <HAL_Pin_Map+0xc>)
   d74cc:	681b      	ldr	r3, [r3, #0]
   d74ce:	681b      	ldr	r3, [r3, #0]
   d74d0:	9301      	str	r3, [sp, #4]
   d74d2:	bd08      	pop	{r3, pc}
   d74d4:	0003022c 	.word	0x0003022c

000d74d8 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d74d8:	b508      	push	{r3, lr}
   d74da:	4b02      	ldr	r3, [pc, #8]	; (d74e4 <HAL_Pin_Mode+0xc>)
   d74dc:	681b      	ldr	r3, [r3, #0]
   d74de:	689b      	ldr	r3, [r3, #8]
   d74e0:	9301      	str	r3, [sp, #4]
   d74e2:	bd08      	pop	{r3, pc}
   d74e4:	0003022c 	.word	0x0003022c

000d74e8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d74e8:	b508      	push	{r3, lr}
   d74ea:	4b02      	ldr	r3, [pc, #8]	; (d74f4 <HAL_Get_Pin_Mode+0xc>)
   d74ec:	681b      	ldr	r3, [r3, #0]
   d74ee:	68db      	ldr	r3, [r3, #12]
   d74f0:	9301      	str	r3, [sp, #4]
   d74f2:	bd08      	pop	{r3, pc}
   d74f4:	0003022c 	.word	0x0003022c

000d74f8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d74f8:	b508      	push	{r3, lr}
   d74fa:	4b02      	ldr	r3, [pc, #8]	; (d7504 <HAL_GPIO_Write+0xc>)
   d74fc:	681b      	ldr	r3, [r3, #0]
   d74fe:	691b      	ldr	r3, [r3, #16]
   d7500:	9301      	str	r3, [sp, #4]
   d7502:	bd08      	pop	{r3, pc}
   d7504:	0003022c 	.word	0x0003022c

000d7508 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d7508:	b508      	push	{r3, lr}
   d750a:	4b02      	ldr	r3, [pc, #8]	; (d7514 <HAL_GPIO_Read+0xc>)
   d750c:	681b      	ldr	r3, [r3, #0]
   d750e:	695b      	ldr	r3, [r3, #20]
   d7510:	9301      	str	r3, [sp, #4]
   d7512:	bd08      	pop	{r3, pc}
   d7514:	0003022c 	.word	0x0003022c

000d7518 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d7518:	b508      	push	{r3, lr}
   d751a:	4b02      	ldr	r3, [pc, #8]	; (d7524 <HAL_Interrupts_Attach+0xc>)
   d751c:	681b      	ldr	r3, [r3, #0]
   d751e:	699b      	ldr	r3, [r3, #24]
   d7520:	9301      	str	r3, [sp, #4]
   d7522:	bd08      	pop	{r3, pc}
   d7524:	0003022c 	.word	0x0003022c

000d7528 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d7528:	b508      	push	{r3, lr}
   d752a:	4b02      	ldr	r3, [pc, #8]	; (d7534 <HAL_Interrupts_Detach+0xc>)
   d752c:	681b      	ldr	r3, [r3, #0]
   d752e:	69db      	ldr	r3, [r3, #28]
   d7530:	9301      	str	r3, [sp, #4]
   d7532:	bd08      	pop	{r3, pc}
   d7534:	0003022c 	.word	0x0003022c

000d7538 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d7538:	b508      	push	{r3, lr}
   d753a:	4b02      	ldr	r3, [pc, #8]	; (d7544 <HAL_Interrupts_Enable_All+0xc>)
   d753c:	681b      	ldr	r3, [r3, #0]
   d753e:	6a1b      	ldr	r3, [r3, #32]
   d7540:	9301      	str	r3, [sp, #4]
   d7542:	bd08      	pop	{r3, pc}
   d7544:	0003022c 	.word	0x0003022c

000d7548 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d7548:	b508      	push	{r3, lr}
   d754a:	4b02      	ldr	r3, [pc, #8]	; (d7554 <HAL_Interrupts_Disable_All+0xc>)
   d754c:	681b      	ldr	r3, [r3, #0]
   d754e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7550:	9301      	str	r3, [sp, #4]
   d7552:	bd08      	pop	{r3, pc}
   d7554:	0003022c 	.word	0x0003022c

000d7558 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d7558:	b508      	push	{r3, lr}
   d755a:	4b02      	ldr	r3, [pc, #8]	; (d7564 <HAL_SPI_Begin+0xc>)
   d755c:	681b      	ldr	r3, [r3, #0]
   d755e:	681b      	ldr	r3, [r3, #0]
   d7560:	9301      	str	r3, [sp, #4]
   d7562:	bd08      	pop	{r3, pc}
   d7564:	00030230 	.word	0x00030230

000d7568 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d7568:	b508      	push	{r3, lr}
   d756a:	4b02      	ldr	r3, [pc, #8]	; (d7574 <HAL_SPI_Set_Bit_Order+0xc>)
   d756c:	681b      	ldr	r3, [r3, #0]
   d756e:	689b      	ldr	r3, [r3, #8]
   d7570:	9301      	str	r3, [sp, #4]
   d7572:	bd08      	pop	{r3, pc}
   d7574:	00030230 	.word	0x00030230

000d7578 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d7578:	b508      	push	{r3, lr}
   d757a:	4b02      	ldr	r3, [pc, #8]	; (d7584 <HAL_SPI_Set_Data_Mode+0xc>)
   d757c:	681b      	ldr	r3, [r3, #0]
   d757e:	68db      	ldr	r3, [r3, #12]
   d7580:	9301      	str	r3, [sp, #4]
   d7582:	bd08      	pop	{r3, pc}
   d7584:	00030230 	.word	0x00030230

000d7588 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d7588:	b508      	push	{r3, lr}
   d758a:	4b02      	ldr	r3, [pc, #8]	; (d7594 <HAL_SPI_Set_Clock_Divider+0xc>)
   d758c:	681b      	ldr	r3, [r3, #0]
   d758e:	691b      	ldr	r3, [r3, #16]
   d7590:	9301      	str	r3, [sp, #4]
   d7592:	bd08      	pop	{r3, pc}
   d7594:	00030230 	.word	0x00030230

000d7598 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d7598:	b508      	push	{r3, lr}
   d759a:	4b02      	ldr	r3, [pc, #8]	; (d75a4 <HAL_SPI_Send_Receive_Data+0xc>)
   d759c:	681b      	ldr	r3, [r3, #0]
   d759e:	695b      	ldr	r3, [r3, #20]
   d75a0:	9301      	str	r3, [sp, #4]
   d75a2:	bd08      	pop	{r3, pc}
   d75a4:	00030230 	.word	0x00030230

000d75a8 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d75a8:	b508      	push	{r3, lr}
   d75aa:	4b02      	ldr	r3, [pc, #8]	; (d75b4 <HAL_SPI_Init+0xc>)
   d75ac:	681b      	ldr	r3, [r3, #0]
   d75ae:	69db      	ldr	r3, [r3, #28]
   d75b0:	9301      	str	r3, [sp, #4]
   d75b2:	bd08      	pop	{r3, pc}
   d75b4:	00030230 	.word	0x00030230

000d75b8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d75b8:	b508      	push	{r3, lr}
   d75ba:	4b02      	ldr	r3, [pc, #8]	; (d75c4 <HAL_SPI_Is_Enabled+0xc>)
   d75bc:	681b      	ldr	r3, [r3, #0]
   d75be:	6a1b      	ldr	r3, [r3, #32]
   d75c0:	9301      	str	r3, [sp, #4]
   d75c2:	bd08      	pop	{r3, pc}
   d75c4:	00030230 	.word	0x00030230

000d75c8 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d75c8:	b508      	push	{r3, lr}
   d75ca:	4b02      	ldr	r3, [pc, #8]	; (d75d4 <HAL_SPI_Info+0xc>)
   d75cc:	681b      	ldr	r3, [r3, #0]
   d75ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d75d0:	9301      	str	r3, [sp, #4]
   d75d2:	bd08      	pop	{r3, pc}
   d75d4:	00030230 	.word	0x00030230

000d75d8 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d75d8:	b508      	push	{r3, lr}
   d75da:	4b02      	ldr	r3, [pc, #8]	; (d75e4 <HAL_SPI_DMA_Transfer+0xc>)
   d75dc:	681b      	ldr	r3, [r3, #0]
   d75de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d75e0:	9301      	str	r3, [sp, #4]
   d75e2:	bd08      	pop	{r3, pc}
   d75e4:	00030230 	.word	0x00030230

000d75e8 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d75e8:	b508      	push	{r3, lr}
   d75ea:	4b02      	ldr	r3, [pc, #8]	; (d75f4 <HAL_SPI_DMA_Transfer_Status+0xc>)
   d75ec:	681b      	ldr	r3, [r3, #0]
   d75ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d75f0:	9301      	str	r3, [sp, #4]
   d75f2:	bd08      	pop	{r3, pc}
   d75f4:	00030230 	.word	0x00030230

000d75f8 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d75f8:	b508      	push	{r3, lr}
   d75fa:	4b02      	ldr	r3, [pc, #8]	; (d7604 <HAL_SPI_Set_Settings+0xc>)
   d75fc:	681b      	ldr	r3, [r3, #0]
   d75fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7600:	9301      	str	r3, [sp, #4]
   d7602:	bd08      	pop	{r3, pc}
   d7604:	00030230 	.word	0x00030230

000d7608 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d7608:	b508      	push	{r3, lr}
   d760a:	4b02      	ldr	r3, [pc, #8]	; (d7614 <HAL_SPI_Acquire+0xc>)
   d760c:	681b      	ldr	r3, [r3, #0]
   d760e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7610:	9301      	str	r3, [sp, #4]
   d7612:	bd08      	pop	{r3, pc}
   d7614:	00030230 	.word	0x00030230

000d7618 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d7618:	b508      	push	{r3, lr}
   d761a:	4b02      	ldr	r3, [pc, #8]	; (d7624 <HAL_SPI_Release+0xc>)
   d761c:	681b      	ldr	r3, [r3, #0]
   d761e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7620:	9301      	str	r3, [sp, #4]
   d7622:	bd08      	pop	{r3, pc}
   d7624:	00030230 	.word	0x00030230

000d7628 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7628:	b508      	push	{r3, lr}
   d762a:	4b02      	ldr	r3, [pc, #8]	; (d7634 <HAL_RNG_GetRandomNumber+0xc>)
   d762c:	681b      	ldr	r3, [r3, #0]
   d762e:	685b      	ldr	r3, [r3, #4]
   d7630:	9301      	str	r3, [sp, #4]
   d7632:	bd08      	pop	{r3, pc}
   d7634:	00030218 	.word	0x00030218

000d7638 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d7638:	b508      	push	{r3, lr}
   d763a:	4b02      	ldr	r3, [pc, #8]	; (d7644 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d763c:	681b      	ldr	r3, [r3, #0]
   d763e:	691b      	ldr	r3, [r3, #16]
   d7640:	9301      	str	r3, [sp, #4]
   d7642:	bd08      	pop	{r3, pc}
   d7644:	00030218 	.word	0x00030218

000d7648 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7648:	b508      	push	{r3, lr}
   d764a:	4b02      	ldr	r3, [pc, #8]	; (d7654 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d764c:	681b      	ldr	r3, [r3, #0]
   d764e:	695b      	ldr	r3, [r3, #20]
   d7650:	9301      	str	r3, [sp, #4]
   d7652:	bd08      	pop	{r3, pc}
   d7654:	00030218 	.word	0x00030218

000d7658 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d7658:	b508      	push	{r3, lr}
   d765a:	4b02      	ldr	r3, [pc, #8]	; (d7664 <HAL_RTC_Get_UnixTime+0xc>)
   d765c:	681b      	ldr	r3, [r3, #0]
   d765e:	69db      	ldr	r3, [r3, #28]
   d7660:	9301      	str	r3, [sp, #4]
   d7662:	bd08      	pop	{r3, pc}
   d7664:	00030218 	.word	0x00030218

000d7668 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d7668:	b508      	push	{r3, lr}
   d766a:	4b02      	ldr	r3, [pc, #8]	; (d7674 <HAL_EEPROM_Init+0xc>)
   d766c:	681b      	ldr	r3, [r3, #0]
   d766e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7670:	9301      	str	r3, [sp, #4]
   d7672:	bd08      	pop	{r3, pc}
   d7674:	00030218 	.word	0x00030218

000d7678 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d7678:	b508      	push	{r3, lr}
   d767a:	4b02      	ldr	r3, [pc, #8]	; (d7684 <HAL_EEPROM_Get+0xc>)
   d767c:	681b      	ldr	r3, [r3, #0]
   d767e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7680:	9301      	str	r3, [sp, #4]
   d7682:	bd08      	pop	{r3, pc}
   d7684:	00030218 	.word	0x00030218

000d7688 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d7688:	b508      	push	{r3, lr}
   d768a:	4b02      	ldr	r3, [pc, #8]	; (d7694 <HAL_EEPROM_Put+0xc>)
   d768c:	681b      	ldr	r3, [r3, #0]
   d768e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7690:	9301      	str	r3, [sp, #4]
   d7692:	bd08      	pop	{r3, pc}
   d7694:	00030218 	.word	0x00030218

000d7698 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d7698:	b508      	push	{r3, lr}
   d769a:	4b02      	ldr	r3, [pc, #8]	; (d76a4 <HAL_RTC_Time_Is_Valid+0xc>)
   d769c:	681b      	ldr	r3, [r3, #0]
   d769e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d76a0:	9301      	str	r3, [sp, #4]
   d76a2:	bd08      	pop	{r3, pc}
   d76a4:	00030218 	.word	0x00030218

000d76a8 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d76a8:	b508      	push	{r3, lr}
   d76aa:	4b02      	ldr	r3, [pc, #8]	; (d76b4 <os_thread_is_current+0xc>)
   d76ac:	681b      	ldr	r3, [r3, #0]
   d76ae:	689b      	ldr	r3, [r3, #8]
   d76b0:	9301      	str	r3, [sp, #4]
   d76b2:	bd08      	pop	{r3, pc}
   d76b4:	00030248 	.word	0x00030248

000d76b8 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d76b8:	b508      	push	{r3, lr}
   d76ba:	4b02      	ldr	r3, [pc, #8]	; (d76c4 <os_thread_yield+0xc>)
   d76bc:	681b      	ldr	r3, [r3, #0]
   d76be:	68db      	ldr	r3, [r3, #12]
   d76c0:	9301      	str	r3, [sp, #4]
   d76c2:	bd08      	pop	{r3, pc}
   d76c4:	00030248 	.word	0x00030248

000d76c8 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d76c8:	b508      	push	{r3, lr}
   d76ca:	4b02      	ldr	r3, [pc, #8]	; (d76d4 <os_thread_join+0xc>)
   d76cc:	681b      	ldr	r3, [r3, #0]
   d76ce:	691b      	ldr	r3, [r3, #16]
   d76d0:	9301      	str	r3, [sp, #4]
   d76d2:	bd08      	pop	{r3, pc}
   d76d4:	00030248 	.word	0x00030248

000d76d8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d76d8:	b508      	push	{r3, lr}
   d76da:	4b02      	ldr	r3, [pc, #8]	; (d76e4 <os_thread_cleanup+0xc>)
   d76dc:	681b      	ldr	r3, [r3, #0]
   d76de:	695b      	ldr	r3, [r3, #20]
   d76e0:	9301      	str	r3, [sp, #4]
   d76e2:	bd08      	pop	{r3, pc}
   d76e4:	00030248 	.word	0x00030248

000d76e8 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d76e8:	b508      	push	{r3, lr}
   d76ea:	4b02      	ldr	r3, [pc, #8]	; (d76f4 <os_thread_scheduling+0xc>)
   d76ec:	681b      	ldr	r3, [r3, #0]
   d76ee:	69db      	ldr	r3, [r3, #28]
   d76f0:	9301      	str	r3, [sp, #4]
   d76f2:	bd08      	pop	{r3, pc}
   d76f4:	00030248 	.word	0x00030248

000d76f8 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d76f8:	b508      	push	{r3, lr}
   d76fa:	4b02      	ldr	r3, [pc, #8]	; (d7704 <os_timer_create+0xc>)
   d76fc:	681b      	ldr	r3, [r3, #0]
   d76fe:	6a1b      	ldr	r3, [r3, #32]
   d7700:	9301      	str	r3, [sp, #4]
   d7702:	bd08      	pop	{r3, pc}
   d7704:	00030248 	.word	0x00030248

000d7708 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d7708:	b508      	push	{r3, lr}
   d770a:	4b02      	ldr	r3, [pc, #8]	; (d7714 <os_timer_destroy+0xc>)
   d770c:	681b      	ldr	r3, [r3, #0]
   d770e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7710:	9301      	str	r3, [sp, #4]
   d7712:	bd08      	pop	{r3, pc}
   d7714:	00030248 	.word	0x00030248

000d7718 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d7718:	b508      	push	{r3, lr}
   d771a:	4b02      	ldr	r3, [pc, #8]	; (d7724 <os_timer_get_id+0xc>)
   d771c:	681b      	ldr	r3, [r3, #0]
   d771e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7720:	9301      	str	r3, [sp, #4]
   d7722:	bd08      	pop	{r3, pc}
   d7724:	00030248 	.word	0x00030248

000d7728 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d7728:	b508      	push	{r3, lr}
   d772a:	4b02      	ldr	r3, [pc, #8]	; (d7734 <os_timer_change+0xc>)
   d772c:	681b      	ldr	r3, [r3, #0]
   d772e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7730:	9301      	str	r3, [sp, #4]
   d7732:	bd08      	pop	{r3, pc}
   d7734:	00030248 	.word	0x00030248

000d7738 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7738:	b508      	push	{r3, lr}
   d773a:	4b02      	ldr	r3, [pc, #8]	; (d7744 <os_mutex_recursive_create+0xc>)
   d773c:	681b      	ldr	r3, [r3, #0]
   d773e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7740:	9301      	str	r3, [sp, #4]
   d7742:	bd08      	pop	{r3, pc}
   d7744:	00030248 	.word	0x00030248

000d7748 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d7748:	b508      	push	{r3, lr}
   d774a:	4b02      	ldr	r3, [pc, #8]	; (d7754 <os_mutex_recursive_destroy+0xc>)
   d774c:	681b      	ldr	r3, [r3, #0]
   d774e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7750:	9301      	str	r3, [sp, #4]
   d7752:	bd08      	pop	{r3, pc}
   d7754:	00030248 	.word	0x00030248

000d7758 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d7758:	b508      	push	{r3, lr}
   d775a:	4b02      	ldr	r3, [pc, #8]	; (d7764 <os_timer_set_id+0xc>)
   d775c:	681b      	ldr	r3, [r3, #0]
   d775e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d7760:	9301      	str	r3, [sp, #4]
   d7762:	bd08      	pop	{r3, pc}
   d7764:	00030248 	.word	0x00030248

000d7768 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7768:	b508      	push	{r3, lr}
   d776a:	4b02      	ldr	r3, [pc, #8]	; (d7774 <inet_inet_ntop+0xc>)
   d776c:	681b      	ldr	r3, [r3, #0]
   d776e:	695b      	ldr	r3, [r3, #20]
   d7770:	9301      	str	r3, [sp, #4]
   d7772:	bd08      	pop	{r3, pc}
   d7774:	00030264 	.word	0x00030264

000d7778 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d7778:	b508      	push	{r3, lr}
   d777a:	4b02      	ldr	r3, [pc, #8]	; (d7784 <HAL_USART_Init+0xc>)
   d777c:	681b      	ldr	r3, [r3, #0]
   d777e:	681b      	ldr	r3, [r3, #0]
   d7780:	9301      	str	r3, [sp, #4]
   d7782:	bd08      	pop	{r3, pc}
   d7784:	0003023c 	.word	0x0003023c

000d7788 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d7788:	b508      	push	{r3, lr}
   d778a:	4b02      	ldr	r3, [pc, #8]	; (d7794 <HAL_USART_Write_Data+0xc>)
   d778c:	681b      	ldr	r3, [r3, #0]
   d778e:	68db      	ldr	r3, [r3, #12]
   d7790:	9301      	str	r3, [sp, #4]
   d7792:	bd08      	pop	{r3, pc}
   d7794:	0003023c 	.word	0x0003023c

000d7798 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d7798:	b508      	push	{r3, lr}
   d779a:	4b02      	ldr	r3, [pc, #8]	; (d77a4 <HAL_USART_Available_Data+0xc>)
   d779c:	681b      	ldr	r3, [r3, #0]
   d779e:	691b      	ldr	r3, [r3, #16]
   d77a0:	9301      	str	r3, [sp, #4]
   d77a2:	bd08      	pop	{r3, pc}
   d77a4:	0003023c 	.word	0x0003023c

000d77a8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d77a8:	b508      	push	{r3, lr}
   d77aa:	4b02      	ldr	r3, [pc, #8]	; (d77b4 <HAL_USART_Read_Data+0xc>)
   d77ac:	681b      	ldr	r3, [r3, #0]
   d77ae:	695b      	ldr	r3, [r3, #20]
   d77b0:	9301      	str	r3, [sp, #4]
   d77b2:	bd08      	pop	{r3, pc}
   d77b4:	0003023c 	.word	0x0003023c

000d77b8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d77b8:	b508      	push	{r3, lr}
   d77ba:	4b02      	ldr	r3, [pc, #8]	; (d77c4 <HAL_USART_Peek_Data+0xc>)
   d77bc:	681b      	ldr	r3, [r3, #0]
   d77be:	699b      	ldr	r3, [r3, #24]
   d77c0:	9301      	str	r3, [sp, #4]
   d77c2:	bd08      	pop	{r3, pc}
   d77c4:	0003023c 	.word	0x0003023c

000d77c8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d77c8:	b508      	push	{r3, lr}
   d77ca:	4b02      	ldr	r3, [pc, #8]	; (d77d4 <HAL_USART_Flush_Data+0xc>)
   d77cc:	681b      	ldr	r3, [r3, #0]
   d77ce:	69db      	ldr	r3, [r3, #28]
   d77d0:	9301      	str	r3, [sp, #4]
   d77d2:	bd08      	pop	{r3, pc}
   d77d4:	0003023c 	.word	0x0003023c

000d77d8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d77d8:	b508      	push	{r3, lr}
   d77da:	4b02      	ldr	r3, [pc, #8]	; (d77e4 <HAL_USART_Is_Enabled+0xc>)
   d77dc:	681b      	ldr	r3, [r3, #0]
   d77de:	6a1b      	ldr	r3, [r3, #32]
   d77e0:	9301      	str	r3, [sp, #4]
   d77e2:	bd08      	pop	{r3, pc}
   d77e4:	0003023c 	.word	0x0003023c

000d77e8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d77e8:	b508      	push	{r3, lr}
   d77ea:	4b02      	ldr	r3, [pc, #8]	; (d77f4 <HAL_USART_Available_Data_For_Write+0xc>)
   d77ec:	681b      	ldr	r3, [r3, #0]
   d77ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d77f0:	9301      	str	r3, [sp, #4]
   d77f2:	bd08      	pop	{r3, pc}
   d77f4:	0003023c 	.word	0x0003023c

000d77f8 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d77f8:	b508      	push	{r3, lr}
   d77fa:	4b02      	ldr	r3, [pc, #8]	; (d7804 <HAL_I2C_Begin_Transmission+0xc>)
   d77fc:	681b      	ldr	r3, [r3, #0]
   d77fe:	699b      	ldr	r3, [r3, #24]
   d7800:	9301      	str	r3, [sp, #4]
   d7802:	bd08      	pop	{r3, pc}
   d7804:	00030228 	.word	0x00030228

000d7808 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d7808:	b508      	push	{r3, lr}
   d780a:	4b02      	ldr	r3, [pc, #8]	; (d7814 <HAL_I2C_End_Transmission+0xc>)
   d780c:	681b      	ldr	r3, [r3, #0]
   d780e:	69db      	ldr	r3, [r3, #28]
   d7810:	9301      	str	r3, [sp, #4]
   d7812:	bd08      	pop	{r3, pc}
   d7814:	00030228 	.word	0x00030228

000d7818 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d7818:	b508      	push	{r3, lr}
   d781a:	4b02      	ldr	r3, [pc, #8]	; (d7824 <HAL_I2C_Write_Data+0xc>)
   d781c:	681b      	ldr	r3, [r3, #0]
   d781e:	6a1b      	ldr	r3, [r3, #32]
   d7820:	9301      	str	r3, [sp, #4]
   d7822:	bd08      	pop	{r3, pc}
   d7824:	00030228 	.word	0x00030228

000d7828 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d7828:	b508      	push	{r3, lr}
   d782a:	4b02      	ldr	r3, [pc, #8]	; (d7834 <HAL_I2C_Available_Data+0xc>)
   d782c:	681b      	ldr	r3, [r3, #0]
   d782e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7830:	9301      	str	r3, [sp, #4]
   d7832:	bd08      	pop	{r3, pc}
   d7834:	00030228 	.word	0x00030228

000d7838 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d7838:	b508      	push	{r3, lr}
   d783a:	4b02      	ldr	r3, [pc, #8]	; (d7844 <HAL_I2C_Read_Data+0xc>)
   d783c:	681b      	ldr	r3, [r3, #0]
   d783e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7840:	9301      	str	r3, [sp, #4]
   d7842:	bd08      	pop	{r3, pc}
   d7844:	00030228 	.word	0x00030228

000d7848 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d7848:	b508      	push	{r3, lr}
   d784a:	4b02      	ldr	r3, [pc, #8]	; (d7854 <HAL_I2C_Peek_Data+0xc>)
   d784c:	681b      	ldr	r3, [r3, #0]
   d784e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7850:	9301      	str	r3, [sp, #4]
   d7852:	bd08      	pop	{r3, pc}
   d7854:	00030228 	.word	0x00030228

000d7858 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d7858:	b508      	push	{r3, lr}
   d785a:	4b02      	ldr	r3, [pc, #8]	; (d7864 <HAL_I2C_Flush_Data+0xc>)
   d785c:	681b      	ldr	r3, [r3, #0]
   d785e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7860:	9301      	str	r3, [sp, #4]
   d7862:	bd08      	pop	{r3, pc}
   d7864:	00030228 	.word	0x00030228

000d7868 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d7868:	b508      	push	{r3, lr}
   d786a:	4b02      	ldr	r3, [pc, #8]	; (d7874 <HAL_I2C_Is_Enabled+0xc>)
   d786c:	681b      	ldr	r3, [r3, #0]
   d786e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7870:	9301      	str	r3, [sp, #4]
   d7872:	bd08      	pop	{r3, pc}
   d7874:	00030228 	.word	0x00030228

000d7878 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d7878:	b508      	push	{r3, lr}
   d787a:	4b02      	ldr	r3, [pc, #8]	; (d7884 <HAL_I2C_Init+0xc>)
   d787c:	681b      	ldr	r3, [r3, #0]
   d787e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7880:	9301      	str	r3, [sp, #4]
   d7882:	bd08      	pop	{r3, pc}
   d7884:	00030228 	.word	0x00030228

000d7888 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d7888:	b508      	push	{r3, lr}
   d788a:	4b02      	ldr	r3, [pc, #8]	; (d7894 <HAL_I2C_Acquire+0xc>)
   d788c:	681b      	ldr	r3, [r3, #0]
   d788e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7890:	9301      	str	r3, [sp, #4]
   d7892:	bd08      	pop	{r3, pc}
   d7894:	00030228 	.word	0x00030228

000d7898 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d7898:	b508      	push	{r3, lr}
   d789a:	4b02      	ldr	r3, [pc, #8]	; (d78a4 <HAL_I2C_Release+0xc>)
   d789c:	681b      	ldr	r3, [r3, #0]
   d789e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d78a0:	9301      	str	r3, [sp, #4]
   d78a2:	bd08      	pop	{r3, pc}
   d78a4:	00030228 	.word	0x00030228

000d78a8 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d78a8:	b508      	push	{r3, lr}
   d78aa:	4b02      	ldr	r3, [pc, #8]	; (d78b4 <HAL_I2C_Request_Data_Ex+0xc>)
   d78ac:	681b      	ldr	r3, [r3, #0]
   d78ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d78b0:	9301      	str	r3, [sp, #4]
   d78b2:	bd08      	pop	{r3, pc}
   d78b4:	00030228 	.word	0x00030228

000d78b8 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d78b8:	b508      	push	{r3, lr}
   d78ba:	4b02      	ldr	r3, [pc, #8]	; (d78c4 <cellular_signal+0xc>)
   d78bc:	681b      	ldr	r3, [r3, #0]
   d78be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d78c0:	9301      	str	r3, [sp, #4]
   d78c2:	bd08      	pop	{r3, pc}
   d78c4:	00030274 	.word	0x00030274

000d78c8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d78c8:	b508      	push	{r3, lr}
   d78ca:	4b02      	ldr	r3, [pc, #8]	; (d78d4 <HAL_USB_USART_Init+0xc>)
   d78cc:	681b      	ldr	r3, [r3, #0]
   d78ce:	681b      	ldr	r3, [r3, #0]
   d78d0:	9301      	str	r3, [sp, #4]
   d78d2:	bd08      	pop	{r3, pc}
   d78d4:	0003024c 	.word	0x0003024c

000d78d8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d78d8:	b508      	push	{r3, lr}
   d78da:	4b02      	ldr	r3, [pc, #8]	; (d78e4 <HAL_USB_USART_Begin+0xc>)
   d78dc:	681b      	ldr	r3, [r3, #0]
   d78de:	685b      	ldr	r3, [r3, #4]
   d78e0:	9301      	str	r3, [sp, #4]
   d78e2:	bd08      	pop	{r3, pc}
   d78e4:	0003024c 	.word	0x0003024c

000d78e8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d78e8:	b508      	push	{r3, lr}
   d78ea:	4b02      	ldr	r3, [pc, #8]	; (d78f4 <HAL_USB_USART_Available_Data+0xc>)
   d78ec:	681b      	ldr	r3, [r3, #0]
   d78ee:	691b      	ldr	r3, [r3, #16]
   d78f0:	9301      	str	r3, [sp, #4]
   d78f2:	bd08      	pop	{r3, pc}
   d78f4:	0003024c 	.word	0x0003024c

000d78f8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d78f8:	b508      	push	{r3, lr}
   d78fa:	4b02      	ldr	r3, [pc, #8]	; (d7904 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d78fc:	681b      	ldr	r3, [r3, #0]
   d78fe:	695b      	ldr	r3, [r3, #20]
   d7900:	9301      	str	r3, [sp, #4]
   d7902:	bd08      	pop	{r3, pc}
   d7904:	0003024c 	.word	0x0003024c

000d7908 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7908:	b508      	push	{r3, lr}
   d790a:	4b02      	ldr	r3, [pc, #8]	; (d7914 <HAL_USB_USART_Receive_Data+0xc>)
   d790c:	681b      	ldr	r3, [r3, #0]
   d790e:	699b      	ldr	r3, [r3, #24]
   d7910:	9301      	str	r3, [sp, #4]
   d7912:	bd08      	pop	{r3, pc}
   d7914:	0003024c 	.word	0x0003024c

000d7918 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7918:	b508      	push	{r3, lr}
   d791a:	4b02      	ldr	r3, [pc, #8]	; (d7924 <HAL_USB_USART_Send_Data+0xc>)
   d791c:	681b      	ldr	r3, [r3, #0]
   d791e:	69db      	ldr	r3, [r3, #28]
   d7920:	9301      	str	r3, [sp, #4]
   d7922:	bd08      	pop	{r3, pc}
   d7924:	0003024c 	.word	0x0003024c

000d7928 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d7928:	b508      	push	{r3, lr}
   d792a:	4b02      	ldr	r3, [pc, #8]	; (d7934 <HAL_USB_USART_Flush_Data+0xc>)
   d792c:	681b      	ldr	r3, [r3, #0]
   d792e:	6a1b      	ldr	r3, [r3, #32]
   d7930:	9301      	str	r3, [sp, #4]
   d7932:	bd08      	pop	{r3, pc}
   d7934:	0003024c 	.word	0x0003024c

000d7938 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d7938:	b508      	push	{r3, lr}
   d793a:	4b02      	ldr	r3, [pc, #8]	; (d7944 <system_mode+0xc>)
   d793c:	681b      	ldr	r3, [r3, #0]
   d793e:	681b      	ldr	r3, [r3, #0]
   d7940:	9301      	str	r3, [sp, #4]
   d7942:	bd08      	pop	{r3, pc}
   d7944:	00030220 	.word	0x00030220

000d7948 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d7948:	b508      	push	{r3, lr}
   d794a:	4b02      	ldr	r3, [pc, #8]	; (d7954 <set_system_mode+0xc>)
   d794c:	681b      	ldr	r3, [r3, #0]
   d794e:	685b      	ldr	r3, [r3, #4]
   d7950:	9301      	str	r3, [sp, #4]
   d7952:	bd08      	pop	{r3, pc}
   d7954:	00030220 	.word	0x00030220

000d7958 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d7958:	b508      	push	{r3, lr}
   d795a:	4b02      	ldr	r3, [pc, #8]	; (d7964 <system_delay_ms+0xc>)
   d795c:	681b      	ldr	r3, [r3, #0]
   d795e:	695b      	ldr	r3, [r3, #20]
   d7960:	9301      	str	r3, [sp, #4]
   d7962:	bd08      	pop	{r3, pc}
   d7964:	00030220 	.word	0x00030220

000d7968 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d7968:	b508      	push	{r3, lr}
   d796a:	4b02      	ldr	r3, [pc, #8]	; (d7974 <system_thread_set_state+0xc>)
   d796c:	681b      	ldr	r3, [r3, #0]
   d796e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7970:	9301      	str	r3, [sp, #4]
   d7972:	bd08      	pop	{r3, pc}
   d7974:	00030220 	.word	0x00030220

000d7978 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d7978:	b508      	push	{r3, lr}
   d797a:	4b02      	ldr	r3, [pc, #8]	; (d7984 <system_thread_get_state+0xc>)
   d797c:	681b      	ldr	r3, [r3, #0]
   d797e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7980:	9301      	str	r3, [sp, #4]
   d7982:	bd08      	pop	{r3, pc}
   d7984:	00030220 	.word	0x00030220

000d7988 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d7988:	b508      	push	{r3, lr}
   d798a:	4b03      	ldr	r3, [pc, #12]	; (d7998 <system_ctrl_set_app_request_handler+0x10>)
   d798c:	681b      	ldr	r3, [r3, #0]
   d798e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d7992:	9301      	str	r3, [sp, #4]
   d7994:	bd08      	pop	{r3, pc}
   d7996:	0000      	.short	0x0000
   d7998:	00030220 	.word	0x00030220

000d799c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d799c:	b508      	push	{r3, lr}
   d799e:	4b03      	ldr	r3, [pc, #12]	; (d79ac <system_ctrl_set_result+0x10>)
   d79a0:	681b      	ldr	r3, [r3, #0]
   d79a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d79a6:	9301      	str	r3, [sp, #4]
   d79a8:	bd08      	pop	{r3, pc}
   d79aa:	0000      	.short	0x0000
   d79ac:	00030220 	.word	0x00030220

000d79b0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d79b0:	b508      	push	{r3, lr}
   d79b2:	4b02      	ldr	r3, [pc, #8]	; (d79bc <network_connect+0xc>)
   d79b4:	681b      	ldr	r3, [r3, #0]
   d79b6:	685b      	ldr	r3, [r3, #4]
   d79b8:	9301      	str	r3, [sp, #4]
   d79ba:	bd08      	pop	{r3, pc}
   d79bc:	00030240 	.word	0x00030240

000d79c0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d79c0:	b508      	push	{r3, lr}
   d79c2:	4b02      	ldr	r3, [pc, #8]	; (d79cc <network_connecting+0xc>)
   d79c4:	681b      	ldr	r3, [r3, #0]
   d79c6:	689b      	ldr	r3, [r3, #8]
   d79c8:	9301      	str	r3, [sp, #4]
   d79ca:	bd08      	pop	{r3, pc}
   d79cc:	00030240 	.word	0x00030240

000d79d0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d79d0:	b508      	push	{r3, lr}
   d79d2:	4b02      	ldr	r3, [pc, #8]	; (d79dc <network_disconnect+0xc>)
   d79d4:	681b      	ldr	r3, [r3, #0]
   d79d6:	68db      	ldr	r3, [r3, #12]
   d79d8:	9301      	str	r3, [sp, #4]
   d79da:	bd08      	pop	{r3, pc}
   d79dc:	00030240 	.word	0x00030240

000d79e0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d79e0:	b508      	push	{r3, lr}
   d79e2:	4b02      	ldr	r3, [pc, #8]	; (d79ec <network_ready+0xc>)
   d79e4:	681b      	ldr	r3, [r3, #0]
   d79e6:	691b      	ldr	r3, [r3, #16]
   d79e8:	9301      	str	r3, [sp, #4]
   d79ea:	bd08      	pop	{r3, pc}
   d79ec:	00030240 	.word	0x00030240

000d79f0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d79f0:	b508      	push	{r3, lr}
   d79f2:	4b02      	ldr	r3, [pc, #8]	; (d79fc <network_on+0xc>)
   d79f4:	681b      	ldr	r3, [r3, #0]
   d79f6:	695b      	ldr	r3, [r3, #20]
   d79f8:	9301      	str	r3, [sp, #4]
   d79fa:	bd08      	pop	{r3, pc}
   d79fc:	00030240 	.word	0x00030240

000d7a00 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d7a00:	b508      	push	{r3, lr}
   d7a02:	4b02      	ldr	r3, [pc, #8]	; (d7a0c <network_off+0xc>)
   d7a04:	681b      	ldr	r3, [r3, #0]
   d7a06:	699b      	ldr	r3, [r3, #24]
   d7a08:	9301      	str	r3, [sp, #4]
   d7a0a:	bd08      	pop	{r3, pc}
   d7a0c:	00030240 	.word	0x00030240

000d7a10 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d7a10:	b508      	push	{r3, lr}
   d7a12:	4b02      	ldr	r3, [pc, #8]	; (d7a1c <network_listen+0xc>)
   d7a14:	681b      	ldr	r3, [r3, #0]
   d7a16:	69db      	ldr	r3, [r3, #28]
   d7a18:	9301      	str	r3, [sp, #4]
   d7a1a:	bd08      	pop	{r3, pc}
   d7a1c:	00030240 	.word	0x00030240

000d7a20 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d7a20:	b508      	push	{r3, lr}
   d7a22:	4b02      	ldr	r3, [pc, #8]	; (d7a2c <network_listening+0xc>)
   d7a24:	681b      	ldr	r3, [r3, #0]
   d7a26:	6a1b      	ldr	r3, [r3, #32]
   d7a28:	9301      	str	r3, [sp, #4]
   d7a2a:	bd08      	pop	{r3, pc}
   d7a2c:	00030240 	.word	0x00030240

000d7a30 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d7a30:	b508      	push	{r3, lr}
   d7a32:	4b02      	ldr	r3, [pc, #8]	; (d7a3c <network_set_listen_timeout+0xc>)
   d7a34:	681b      	ldr	r3, [r3, #0]
   d7a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7a38:	9301      	str	r3, [sp, #4]
   d7a3a:	bd08      	pop	{r3, pc}
   d7a3c:	00030240 	.word	0x00030240

000d7a40 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d7a40:	b508      	push	{r3, lr}
   d7a42:	4b02      	ldr	r3, [pc, #8]	; (d7a4c <network_get_listen_timeout+0xc>)
   d7a44:	681b      	ldr	r3, [r3, #0]
   d7a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7a48:	9301      	str	r3, [sp, #4]
   d7a4a:	bd08      	pop	{r3, pc}
   d7a4c:	00030240 	.word	0x00030240

000d7a50 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d7a50:	b508      	push	{r3, lr}
   d7a52:	4b02      	ldr	r3, [pc, #8]	; (d7a5c <spark_process+0xc>)
   d7a54:	681b      	ldr	r3, [r3, #0]
   d7a56:	689b      	ldr	r3, [r3, #8]
   d7a58:	9301      	str	r3, [sp, #4]
   d7a5a:	bd08      	pop	{r3, pc}
   d7a5c:	00030244 	.word	0x00030244

000d7a60 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d7a60:	b508      	push	{r3, lr}
   d7a62:	4b02      	ldr	r3, [pc, #8]	; (d7a6c <spark_cloud_flag_connected+0xc>)
   d7a64:	681b      	ldr	r3, [r3, #0]
   d7a66:	695b      	ldr	r3, [r3, #20]
   d7a68:	9301      	str	r3, [sp, #4]
   d7a6a:	bd08      	pop	{r3, pc}
   d7a6c:	00030244 	.word	0x00030244

000d7a70 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d7a70:	b508      	push	{r3, lr}
   d7a72:	4b02      	ldr	r3, [pc, #8]	; (d7a7c <spark_deviceID+0xc>)
   d7a74:	681b      	ldr	r3, [r3, #0]
   d7a76:	69db      	ldr	r3, [r3, #28]
   d7a78:	9301      	str	r3, [sp, #4]
   d7a7a:	bd08      	pop	{r3, pc}
   d7a7c:	00030244 	.word	0x00030244

000d7a80 <spark_sync_time>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d7a80:	b508      	push	{r3, lr}
   d7a82:	4b02      	ldr	r3, [pc, #8]	; (d7a8c <spark_sync_time+0xc>)
   d7a84:	681b      	ldr	r3, [r3, #0]
   d7a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7a88:	9301      	str	r3, [sp, #4]
   d7a8a:	bd08      	pop	{r3, pc}
   d7a8c:	00030244 	.word	0x00030244

000d7a90 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d7a90:	b508      	push	{r3, lr}
   d7a92:	4b02      	ldr	r3, [pc, #8]	; (d7a9c <spark_sync_time_pending+0xc>)
   d7a94:	681b      	ldr	r3, [r3, #0]
   d7a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7a98:	9301      	str	r3, [sp, #4]
   d7a9a:	bd08      	pop	{r3, pc}
   d7a9c:	00030244 	.word	0x00030244

000d7aa0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d7aa0:	b508      	push	{r3, lr}
   d7aa2:	4b02      	ldr	r3, [pc, #8]	; (d7aac <spark_set_random_seed_from_cloud_handler+0xc>)
   d7aa4:	681b      	ldr	r3, [r3, #0]
   d7aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7aa8:	9301      	str	r3, [sp, #4]
   d7aaa:	bd08      	pop	{r3, pc}
   d7aac:	00030244 	.word	0x00030244

000d7ab0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d7ab0:	b508      	push	{r3, lr}
   d7ab2:	4b02      	ldr	r3, [pc, #8]	; (d7abc <malloc+0xc>)
   d7ab4:	681b      	ldr	r3, [r3, #0]
   d7ab6:	681b      	ldr	r3, [r3, #0]
   d7ab8:	9301      	str	r3, [sp, #4]
   d7aba:	bd08      	pop	{r3, pc}
   d7abc:	0003021c 	.word	0x0003021c

000d7ac0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d7ac0:	b508      	push	{r3, lr}
   d7ac2:	4b02      	ldr	r3, [pc, #8]	; (d7acc <free+0xc>)
   d7ac4:	681b      	ldr	r3, [r3, #0]
   d7ac6:	685b      	ldr	r3, [r3, #4]
   d7ac8:	9301      	str	r3, [sp, #4]
   d7aca:	bd08      	pop	{r3, pc}
   d7acc:	0003021c 	.word	0x0003021c

000d7ad0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d7ad0:	b508      	push	{r3, lr}
   d7ad2:	4b02      	ldr	r3, [pc, #8]	; (d7adc <realloc+0xc>)
   d7ad4:	681b      	ldr	r3, [r3, #0]
   d7ad6:	689b      	ldr	r3, [r3, #8]
   d7ad8:	9301      	str	r3, [sp, #4]
   d7ada:	bd08      	pop	{r3, pc}
   d7adc:	0003021c 	.word	0x0003021c

000d7ae0 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d7ae0:	b508      	push	{r3, lr}
   d7ae2:	4b02      	ldr	r3, [pc, #8]	; (d7aec <sprintf+0xc>)
   d7ae4:	681b      	ldr	r3, [r3, #0]
   d7ae6:	68db      	ldr	r3, [r3, #12]
   d7ae8:	9301      	str	r3, [sp, #4]
   d7aea:	bd08      	pop	{r3, pc}
   d7aec:	0003021c 	.word	0x0003021c

000d7af0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d7af0:	b508      	push	{r3, lr}
   d7af2:	4b02      	ldr	r3, [pc, #8]	; (d7afc <vsnprintf+0xc>)
   d7af4:	681b      	ldr	r3, [r3, #0]
   d7af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7af8:	9301      	str	r3, [sp, #4]
   d7afa:	bd08      	pop	{r3, pc}
   d7afc:	0003021c 	.word	0x0003021c

000d7b00 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7b00:	2200      	movs	r2, #0
   d7b02:	4611      	mov	r1, r2
   d7b04:	6840      	ldr	r0, [r0, #4]
   d7b06:	f7ff bf8b 	b.w	d7a20 <network_listening>

000d7b0a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7b0a:	2200      	movs	r2, #0
   d7b0c:	4611      	mov	r1, r2
   d7b0e:	6840      	ldr	r0, [r0, #4]
   d7b10:	f7ff bf96 	b.w	d7a40 <network_get_listen_timeout>

000d7b14 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7b14:	2200      	movs	r2, #0
   d7b16:	6840      	ldr	r0, [r0, #4]
   d7b18:	f7ff bf8a 	b.w	d7a30 <network_set_listen_timeout>

000d7b1c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7b1c:	2200      	movs	r2, #0
   d7b1e:	f081 0101 	eor.w	r1, r1, #1
   d7b22:	6840      	ldr	r0, [r0, #4]
   d7b24:	f7ff bf74 	b.w	d7a10 <network_listen>

000d7b28 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d7b28:	2300      	movs	r3, #0
   d7b2a:	461a      	mov	r2, r3
   d7b2c:	4619      	mov	r1, r3
   d7b2e:	6840      	ldr	r0, [r0, #4]
   d7b30:	f7ff bf66 	b.w	d7a00 <network_off>

000d7b34 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7b34:	2300      	movs	r3, #0
   d7b36:	461a      	mov	r2, r3
   d7b38:	4619      	mov	r1, r3
   d7b3a:	6840      	ldr	r0, [r0, #4]
   d7b3c:	f7ff bf58 	b.w	d79f0 <network_on>

000d7b40 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7b40:	2200      	movs	r2, #0
   d7b42:	4611      	mov	r1, r2
   d7b44:	6840      	ldr	r0, [r0, #4]
   d7b46:	f7ff bf4b 	b.w	d79e0 <network_ready>

000d7b4a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7b4a:	2200      	movs	r2, #0
   d7b4c:	4611      	mov	r1, r2
   d7b4e:	6840      	ldr	r0, [r0, #4]
   d7b50:	f7ff bf36 	b.w	d79c0 <network_connecting>

000d7b54 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7b54:	2200      	movs	r2, #0
   d7b56:	2102      	movs	r1, #2
   d7b58:	6840      	ldr	r0, [r0, #4]
   d7b5a:	f7ff bf39 	b.w	d79d0 <network_disconnect>

000d7b5e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7b5e:	2300      	movs	r3, #0
   d7b60:	461a      	mov	r2, r3
   d7b62:	6840      	ldr	r0, [r0, #4]
   d7b64:	f7ff bf24 	b.w	d79b0 <network_connect>

000d7b68 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d7b68:	4b02      	ldr	r3, [pc, #8]	; (d7b74 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d7b6a:	2203      	movs	r2, #3
   d7b6c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d7b6e:	4a02      	ldr	r2, [pc, #8]	; (d7b78 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d7b70:	601a      	str	r2, [r3, #0]
   d7b72:	4770      	bx	lr
   d7b74:	2003e394 	.word	0x2003e394
   d7b78:	000da314 	.word	0x000da314

000d7b7c <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d7b7c:	2100      	movs	r1, #0
   d7b7e:	f7ff bd43 	b.w	d7608 <HAL_SPI_Acquire>

000d7b82 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d7b82:	2100      	movs	r1, #0
   d7b84:	f7ff bd48 	b.w	d7618 <HAL_SPI_Release>

000d7b88 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d7b88:	b510      	push	{r4, lr}
   d7b8a:	4604      	mov	r4, r0
{
    _spi = spi;
   d7b8c:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d7b8e:	4608      	mov	r0, r1
   d7b90:	f7ff fd0a 	bl	d75a8 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7b94:	2300      	movs	r3, #0
   d7b96:	6063      	str	r3, [r4, #4]
}
   d7b98:	4620      	mov	r0, r4
   d7b9a:	bd10      	pop	{r4, pc}

000d7b9c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d7b9c:	b510      	push	{r4, lr}
   d7b9e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d7ba0:	7800      	ldrb	r0, [r0, #0]
   d7ba2:	f7ff ffeb 	bl	d7b7c <_ZN8SPIClass4lockEv.isra.0>
   d7ba6:	b948      	cbnz	r0, d7bbc <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d7ba8:	7820      	ldrb	r0, [r4, #0]
   d7baa:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d7bae:	f7ff fcd3 	bl	d7558 <HAL_SPI_Begin>
        unlock();
   d7bb2:	7820      	ldrb	r0, [r4, #0]
    }
}
   d7bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d7bb8:	f7ff bfe3 	b.w	d7b82 <_ZN8SPIClass6unlockEv.isra.1>
   d7bbc:	bd10      	pop	{r4, pc}

000d7bbe <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d7bbe:	b538      	push	{r3, r4, r5, lr}
   d7bc0:	4604      	mov	r4, r0
    if (!lock())
   d7bc2:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d7bc4:	460d      	mov	r5, r1
    if (!lock())
   d7bc6:	f7ff ffd9 	bl	d7b7c <_ZN8SPIClass4lockEv.isra.0>
   d7bca:	b940      	cbnz	r0, d7bde <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d7bcc:	7820      	ldrb	r0, [r4, #0]
   d7bce:	4629      	mov	r1, r5
   d7bd0:	f7ff fcca 	bl	d7568 <HAL_SPI_Set_Bit_Order>
        unlock();
   d7bd4:	7820      	ldrb	r0, [r4, #0]
    }
}
   d7bd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d7bda:	f7ff bfd2 	b.w	d7b82 <_ZN8SPIClass6unlockEv.isra.1>
   d7bde:	bd38      	pop	{r3, r4, r5, pc}

000d7be0 <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d7be0:	b538      	push	{r3, r4, r5, lr}
   d7be2:	4604      	mov	r4, r0
    if (!lock())
   d7be4:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d7be6:	460d      	mov	r5, r1
    if (!lock())
   d7be8:	f7ff ffc8 	bl	d7b7c <_ZN8SPIClass4lockEv.isra.0>
   d7bec:	b940      	cbnz	r0, d7c00 <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d7bee:	7820      	ldrb	r0, [r4, #0]
   d7bf0:	4629      	mov	r1, r5
   d7bf2:	f7ff fcc1 	bl	d7578 <HAL_SPI_Set_Data_Mode>
        unlock();
   d7bf6:	7820      	ldrb	r0, [r4, #0]
    }
}
   d7bf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d7bfc:	f7ff bfc1 	b.w	d7b82 <_ZN8SPIClass6unlockEv.isra.1>
   d7c00:	bd38      	pop	{r3, r4, r5, pc}

000d7c02 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d7c02:	7800      	ldrb	r0, [r0, #0]
   d7c04:	f7ff bfbd 	b.w	d7b82 <_ZN8SPIClass6unlockEv.isra.1>

000d7c08 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d7c08:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d7c0a:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d7c0c:	6018      	str	r0, [r3, #0]
   d7c0e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d7c10:	6818      	ldr	r0, [r3, #0]
   d7c12:	4288      	cmp	r0, r1
   d7c14:	b2e5      	uxtb	r5, r4
   d7c16:	d906      	bls.n	d7c26 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d7c18:	3401      	adds	r4, #1
   d7c1a:	2c08      	cmp	r4, #8
   d7c1c:	d002      	beq.n	d7c24 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d7c1e:	0840      	lsrs	r0, r0, #1
   d7c20:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d7c22:	e7f5      	b.n	d7c10 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d7c24:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d7c26:	4b02      	ldr	r3, [pc, #8]	; (d7c30 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d7c28:	5d5b      	ldrb	r3, [r3, r5]
   d7c2a:	7013      	strb	r3, [r2, #0]
   d7c2c:	bd30      	pop	{r4, r5, pc}
   d7c2e:	bf00      	nop
   d7c30:	000da340 	.word	0x000da340

000d7c34 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d7c34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7c38:	4607      	mov	r7, r0
   d7c3a:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d7c3c:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d7c3e:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d7c40:	f7ff ff9c 	bl	d7b7c <_ZN8SPIClass4lockEv.isra.0>
   d7c44:	2800      	cmp	r0, #0
   d7c46:	db62      	blt.n	d7d0e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d7c48:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d7c4a:	2214      	movs	r2, #20
   d7c4c:	2100      	movs	r1, #0
   d7c4e:	a809      	add	r0, sp, #36	; 0x24
   d7c50:	f002 f96a 	bl	d9f28 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d7c54:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d7c56:	4620      	mov	r0, r4
   d7c58:	2200      	movs	r2, #0
   d7c5a:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d7c5c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d7c60:	f7ff fcb2 	bl	d75c8 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d7c64:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d7c68:	b154      	cbz	r4, d7c80 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d7c6a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d7c6e:	b935      	cbnz	r5, d7c7e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d7c70:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d7c74:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d7c78:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d7c7c:	e003      	b.n	d7c86 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d7c7e:	2400      	movs	r4, #0
   d7c80:	46a1      	mov	r9, r4
   d7c82:	46a0      	mov	r8, r4
   d7c84:	2501      	movs	r5, #1
   d7c86:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d7c88:	b105      	cbz	r5, d7c8c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d7c8a:	b9bb      	cbnz	r3, d7cbc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d7c8c:	429d      	cmp	r5, r3
   d7c8e:	d10b      	bne.n	d7ca8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d7c90:	68b2      	ldr	r2, [r6, #8]
   d7c92:	4542      	cmp	r2, r8
   d7c94:	d108      	bne.n	d7ca8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d7c96:	f88d 9020 	strb.w	r9, [sp, #32]
   d7c9a:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d7c9e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d7ca2:	89b2      	ldrh	r2, [r6, #12]
   d7ca4:	4291      	cmp	r1, r2
   d7ca6:	d009      	beq.n	d7cbc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d7ca8:	b153      	cbz	r3, d7cc0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d7caa:	2400      	movs	r4, #0
   d7cac:	7838      	ldrb	r0, [r7, #0]
   d7cae:	9401      	str	r4, [sp, #4]
   d7cb0:	9400      	str	r4, [sp, #0]
   d7cb2:	4623      	mov	r3, r4
   d7cb4:	4622      	mov	r2, r4
   d7cb6:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d7cb8:	f7ff fc9e 	bl	d75f8 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d7cbc:	2000      	movs	r0, #0
   d7cbe:	e026      	b.n	d7d0e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d7cc0:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d7cc4:	68b1      	ldr	r1, [r6, #8]
   d7cc6:	980a      	ldr	r0, [sp, #40]	; 0x28
   d7cc8:	ab04      	add	r3, sp, #16
   d7cca:	f10d 020f 	add.w	r2, sp, #15
   d7cce:	f7ff ff9b 	bl	d7c08 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d7cd2:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d7cd4:	b105      	cbz	r5, d7cd8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d7cd6:	b9b1      	cbnz	r1, d7d06 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d7cd8:	42a9      	cmp	r1, r5
   d7cda:	d008      	beq.n	d7cee <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d7cdc:	2400      	movs	r4, #0
   d7cde:	7838      	ldrb	r0, [r7, #0]
   d7ce0:	9401      	str	r4, [sp, #4]
   d7ce2:	7b74      	ldrb	r4, [r6, #13]
   d7ce4:	7b33      	ldrb	r3, [r6, #12]
   d7ce6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d7cea:	9400      	str	r4, [sp, #0]
   d7cec:	e7e4      	b.n	d7cb8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d7cee:	68b3      	ldr	r3, [r6, #8]
   d7cf0:	4543      	cmp	r3, r8
   d7cf2:	d3f3      	bcc.n	d7cdc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d7cf4:	f88d 9020 	strb.w	r9, [sp, #32]
   d7cf8:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d7cfc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d7d00:	89b3      	ldrh	r3, [r6, #12]
   d7d02:	429a      	cmp	r2, r3
   d7d04:	d1ea      	bne.n	d7cdc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d7d06:	9b04      	ldr	r3, [sp, #16]
   d7d08:	4543      	cmp	r3, r8
   d7d0a:	d1e7      	bne.n	d7cdc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d7d0c:	e7d6      	b.n	d7cbc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d7d0e:	b00f      	add	sp, #60	; 0x3c
   d7d10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7d14 <_ZN8SPIClass13setClockSpeedEjj>:
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d7d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7d18:	b088      	sub	sp, #32
    unsigned clock = 0;
   d7d1a:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d7d1c:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d7d1e:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d7d20:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d7d22:	460e      	mov	r6, r1
   d7d24:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d7d26:	f7ff ff29 	bl	d7b7c <_ZN8SPIClass4lockEv.isra.0>
   d7d2a:	4605      	mov	r5, r0
   d7d2c:	bb00      	cbnz	r0, d7d70 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d7d2e:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d7d32:	4601      	mov	r1, r0
   d7d34:	2214      	movs	r2, #20
   d7d36:	a803      	add	r0, sp, #12
   d7d38:	f002 f8f6 	bl	d9f28 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d7d3c:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d7d3e:	462a      	mov	r2, r5
   d7d40:	a903      	add	r1, sp, #12
   d7d42:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d7d44:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d7d48:	f7ff fc3e 	bl	d75c8 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d7d4c:	ab02      	add	r3, sp, #8
   d7d4e:	f10d 0207 	add.w	r2, sp, #7
   d7d52:	fb07 f106 	mul.w	r1, r7, r6
   d7d56:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d7d58:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d7d5c:	f7ff ff54 	bl	d7c08 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d7d60:	7820      	ldrb	r0, [r4, #0]
   d7d62:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d7d66:	f7ff fc0f 	bl	d7588 <HAL_SPI_Set_Clock_Divider>
        unlock();
   d7d6a:	7820      	ldrb	r0, [r4, #0]
   d7d6c:	f7ff ff09 	bl	d7b82 <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d7d70:	9802      	ldr	r0, [sp, #8]
   d7d72:	b008      	add	sp, #32
   d7d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7d78 <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d7d78:	b538      	push	{r3, r4, r5, lr}
   d7d7a:	4604      	mov	r4, r0
    if (!lock())
   d7d7c:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d7d7e:	460d      	mov	r5, r1
    if (!lock())
   d7d80:	f7ff fefc 	bl	d7b7c <_ZN8SPIClass4lockEv.isra.0>
   d7d84:	b9c8      	cbnz	r0, d7dba <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d7d86:	6861      	ldr	r1, [r4, #4]
   d7d88:	b171      	cbz	r1, d7da8 <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d7d8a:	4b0c      	ldr	r3, [pc, #48]	; (d7dbc <_ZN8SPIClass15setClockDividerEh+0x44>)
   d7d8c:	5cc2      	ldrb	r2, [r0, r3]
   d7d8e:	42aa      	cmp	r2, r5
   d7d90:	d002      	beq.n	d7d98 <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d7d92:	3001      	adds	r0, #1
   d7d94:	2808      	cmp	r0, #8
   d7d96:	d1f9      	bne.n	d7d8c <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d7d98:	3001      	adds	r0, #1
   d7d9a:	b2c0      	uxtb	r0, r0
   d7d9c:	40c1      	lsrs	r1, r0
   d7d9e:	2201      	movs	r2, #1
   d7da0:	4620      	mov	r0, r4
   d7da2:	f7ff ffb7 	bl	d7d14 <_ZN8SPIClass13setClockSpeedEjj>
   d7da6:	e003      	b.n	d7db0 <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d7da8:	4629      	mov	r1, r5
   d7daa:	7820      	ldrb	r0, [r4, #0]
   d7dac:	f7ff fbec 	bl	d7588 <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d7db0:	7820      	ldrb	r0, [r4, #0]
    }
}
   d7db2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d7db6:	f7ff bee4 	b.w	d7b82 <_ZN8SPIClass6unlockEv.isra.1>
   d7dba:	bd38      	pop	{r3, r4, r5, pc}
   d7dbc:	000da340 	.word	0x000da340

000d7dc0 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d7dc0:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d7dc2:	7800      	ldrb	r0, [r0, #0]
   d7dc4:	f7ff fbe8 	bl	d7598 <HAL_SPI_Send_Receive_Data>
}
   d7dc8:	b2c0      	uxtb	r0, r0
   d7dca:	bd08      	pop	{r3, pc}

000d7dcc <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d7dcc:	b530      	push	{r4, r5, lr}
   d7dce:	b087      	sub	sp, #28
   d7dd0:	4604      	mov	r4, r0
   d7dd2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d7dd4:	7800      	ldrb	r0, [r0, #0]
   d7dd6:	9500      	str	r5, [sp, #0]
   d7dd8:	f7ff fbfe 	bl	d75d8 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d7ddc:	b93d      	cbnz	r5, d7dee <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d7dde:	a902      	add	r1, sp, #8
   d7de0:	7820      	ldrb	r0, [r4, #0]
   d7de2:	f7ff fc01 	bl	d75e8 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d7de6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d7dea:	07db      	lsls	r3, r3, #31
   d7dec:	d4f7      	bmi.n	d7dde <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d7dee:	b007      	add	sp, #28
   d7df0:	bd30      	pop	{r4, r5, pc}

000d7df2 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d7df2:	7800      	ldrb	r0, [r0, #0]
   d7df4:	f7ff bbe0 	b.w	d75b8 <HAL_SPI_Is_Enabled>

000d7df8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d7df8:	b510      	push	{r4, lr}
   d7dfa:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d7dfc:	6800      	ldr	r0, [r0, #0]
   d7dfe:	b118      	cbz	r0, d7e08 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d7e00:	f7ff fe5e 	bl	d7ac0 <free>
            wakeupSource_ = nullptr;
   d7e04:	2300      	movs	r3, #0
   d7e06:	6023      	str	r3, [r4, #0]
   d7e08:	bd10      	pop	{r4, pc}

000d7e0a <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d7e0a:	b510      	push	{r4, lr}
   d7e0c:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d7e0e:	f7ff fff3 	bl	d7df8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d7e12:	4620      	mov	r0, r4
   d7e14:	bd10      	pop	{r4, pc}
	...

000d7e18 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7e18:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7e1a:	4c09      	ldr	r4, [pc, #36]	; (d7e40 <_GLOBAL__sub_I_System+0x28>)
   d7e1c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7e1e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7e22:	6020      	str	r0, [r4, #0]
   d7e24:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7e26:	71a0      	strb	r0, [r4, #6]
   d7e28:	8120      	strh	r0, [r4, #8]
   d7e2a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7e2c:	f7ff fd8c 	bl	d7948 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d7e30:	4620      	mov	r0, r4
   d7e32:	4a04      	ldr	r2, [pc, #16]	; (d7e44 <_GLOBAL__sub_I_System+0x2c>)
   d7e34:	4904      	ldr	r1, [pc, #16]	; (d7e48 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d7e3a:	f001 b9e3 	b.w	d9204 <__aeabi_atexit>
   d7e3e:	bf00      	nop
   d7e40:	2003e39c 	.word	0x2003e39c
   d7e44:	2003dd80 	.word	0x2003dd80
   d7e48:	000d7e0b 	.word	0x000d7e0b

000d7e4c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d7e4c:	b510      	push	{r4, lr}
   d7e4e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d7e50:	f002 f8dc 	bl	da00c <strlen>
   d7e54:	3801      	subs	r0, #1
   d7e56:	1823      	adds	r3, r4, r0
   d7e58:	4620      	mov	r0, r4
	while(i<j){
   d7e5a:	4298      	cmp	r0, r3
   d7e5c:	d206      	bcs.n	d7e6c <_Z11str_reversePc+0x20>
		c = *i;
   d7e5e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d7e60:	7819      	ldrb	r1, [r3, #0]
   d7e62:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d7e66:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d7e6a:	e7f6      	b.n	d7e5a <_Z11str_reversePc+0xe>
   d7e6c:	bd10      	pop	{r4, pc}

000d7e6e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d7e6e:	b570      	push	{r4, r5, r6, lr}
   d7e70:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d7e72:	1e91      	subs	r1, r2, #2
   d7e74:	2922      	cmp	r1, #34	; 0x22
   d7e76:	d820      	bhi.n	d7eba <ultoa+0x4c>
   d7e78:	4625      	mov	r5, r4
   d7e7a:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d7e7c:	b910      	cbnz	r0, d7e84 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d7e7e:	4423      	add	r3, r4
            *ptr++ = '0';
   d7e80:	2230      	movs	r2, #48	; 0x30
   d7e82:	e00e      	b.n	d7ea2 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d7e84:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d7e88:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d7e8c:	b2c1      	uxtb	r1, r0
   d7e8e:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d7e92:	2809      	cmp	r0, #9
                *ptr += '0';
   d7e94:	bf94      	ite	ls
   d7e96:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d7e98:	3157      	addhi	r1, #87	; 0x57
   d7e9a:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d7e9e:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d7ea0:	e7eb      	b.n	d7e7a <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d7ea2:	4299      	cmp	r1, r3
   d7ea4:	d202      	bcs.n	d7eac <ultoa+0x3e>
            *ptr++ = '0';
   d7ea6:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d7eaa:	e7fa      	b.n	d7ea2 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d7eac:	2300      	movs	r3, #0
	str_reverse(buffer);
   d7eae:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d7eb0:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d7eb2:	f7ff ffcb 	bl	d7e4c <_Z11str_reversePc>
	return buffer;
   d7eb6:	4620      	mov	r0, r4
   d7eb8:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d7eba:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d7ebc:	bd70      	pop	{r4, r5, r6, pc}

000d7ebe <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   d7ebe:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   d7ec0:	2301      	movs	r3, #1
   d7ec2:	f7ff ffd4 	bl	d7e6e <ultoa>
}
   d7ec6:	bd08      	pop	{r3, pc}

000d7ec8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7ec8:	b510      	push	{r4, lr}
   d7eca:	4604      	mov	r4, r0
{
	free(buffer);
   d7ecc:	6800      	ldr	r0, [r0, #0]
   d7ece:	f7ff fdf7 	bl	d7ac0 <free>
}
   d7ed2:	4620      	mov	r0, r4
   d7ed4:	bd10      	pop	{r4, pc}

000d7ed6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7ed6:	b510      	push	{r4, lr}
   d7ed8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7eda:	6800      	ldr	r0, [r0, #0]
   d7edc:	b108      	cbz	r0, d7ee2 <_ZN6String10invalidateEv+0xc>
   d7ede:	f7ff fdef 	bl	d7ac0 <free>
	buffer = NULL;
   d7ee2:	2300      	movs	r3, #0
   d7ee4:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d7ee6:	60a3      	str	r3, [r4, #8]
   d7ee8:	6063      	str	r3, [r4, #4]
   d7eea:	bd10      	pop	{r4, pc}

000d7eec <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7eec:	b538      	push	{r3, r4, r5, lr}
   d7eee:	4604      	mov	r4, r0
   d7ef0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d7ef2:	6800      	ldr	r0, [r0, #0]
   d7ef4:	3101      	adds	r1, #1
   d7ef6:	f7ff fdeb 	bl	d7ad0 <realloc>
	if (newbuffer) {
   d7efa:	b110      	cbz	r0, d7f02 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7efc:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d7f00:	2001      	movs	r0, #1
	}
	return 0;
}
   d7f02:	bd38      	pop	{r3, r4, r5, pc}

000d7f04 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7f04:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7f06:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7f08:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d7f0a:	b113      	cbz	r3, d7f12 <_ZN6String7reserveEj+0xe>
   d7f0c:	6843      	ldr	r3, [r0, #4]
   d7f0e:	428b      	cmp	r3, r1
   d7f10:	d207      	bcs.n	d7f22 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d7f12:	4620      	mov	r0, r4
   d7f14:	f7ff ffea 	bl	d7eec <_ZN6String12changeBufferEj>
   d7f18:	b120      	cbz	r0, d7f24 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d7f1a:	68a3      	ldr	r3, [r4, #8]
   d7f1c:	b90b      	cbnz	r3, d7f22 <_ZN6String7reserveEj+0x1e>
   d7f1e:	6822      	ldr	r2, [r4, #0]
   d7f20:	7013      	strb	r3, [r2, #0]
   d7f22:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d7f24:	bd10      	pop	{r4, pc}

000d7f26 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7f26:	b570      	push	{r4, r5, r6, lr}
   d7f28:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d7f2a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7f2c:	4604      	mov	r4, r0
   d7f2e:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d7f30:	f7ff ffe8 	bl	d7f04 <_ZN6String7reserveEj>
   d7f34:	b918      	cbnz	r0, d7f3e <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d7f36:	4620      	mov	r0, r4
   d7f38:	f7ff ffcd 	bl	d7ed6 <_ZN6String10invalidateEv>
		return *this;
   d7f3c:	e009      	b.n	d7f52 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d7f3e:	462a      	mov	r2, r5
   d7f40:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d7f42:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d7f44:	6820      	ldr	r0, [r4, #0]
   d7f46:	f001 ffe4 	bl	d9f12 <memcpy>
	buffer[len] = 0;
   d7f4a:	6822      	ldr	r2, [r4, #0]
   d7f4c:	68a3      	ldr	r3, [r4, #8]
   d7f4e:	2100      	movs	r1, #0
   d7f50:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d7f52:	4620      	mov	r0, r4
   d7f54:	bd70      	pop	{r4, r5, r6, pc}

000d7f56 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7f56:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7f58:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7f5a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7f5c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7f5e:	6043      	str	r3, [r0, #4]
	len = 0;
   d7f60:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7f62:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d7f64:	460d      	mov	r5, r1
   d7f66:	b139      	cbz	r1, d7f78 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d7f68:	4608      	mov	r0, r1
   d7f6a:	f002 f84f 	bl	da00c <strlen>
   d7f6e:	4629      	mov	r1, r5
   d7f70:	4602      	mov	r2, r0
   d7f72:	4620      	mov	r0, r4
   d7f74:	f7ff ffd7 	bl	d7f26 <_ZN6String4copyEPKcj>
}
   d7f78:	4620      	mov	r0, r4
   d7f7a:	bd38      	pop	{r3, r4, r5, pc}

000d7f7c <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d7f7c:	b538      	push	{r3, r4, r5, lr}
   d7f7e:	4605      	mov	r5, r0
	if (buffer) {
   d7f80:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d7f82:	460c      	mov	r4, r1
	if (buffer) {
   d7f84:	b160      	cbz	r0, d7fa0 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d7f86:	686a      	ldr	r2, [r5, #4]
   d7f88:	688b      	ldr	r3, [r1, #8]
   d7f8a:	429a      	cmp	r2, r3
   d7f8c:	d306      	bcc.n	d7f9c <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d7f8e:	6809      	ldr	r1, [r1, #0]
   d7f90:	f002 f834 	bl	d9ffc <strcpy>
			len = rhs.len;
   d7f94:	68a3      	ldr	r3, [r4, #8]
   d7f96:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d7f98:	2300      	movs	r3, #0
   d7f9a:	e00a      	b.n	d7fb2 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d7f9c:	f7ff fd90 	bl	d7ac0 <free>
		}
	}
	buffer = rhs.buffer;
   d7fa0:	6823      	ldr	r3, [r4, #0]
   d7fa2:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d7fa4:	6863      	ldr	r3, [r4, #4]
   d7fa6:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d7fa8:	68a3      	ldr	r3, [r4, #8]
   d7faa:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d7fac:	2300      	movs	r3, #0
   d7fae:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d7fb0:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d7fb2:	60a3      	str	r3, [r4, #8]
   d7fb4:	bd38      	pop	{r3, r4, r5, pc}

000d7fb6 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d7fb6:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d7fb8:	b510      	push	{r4, lr}
   d7fba:	460b      	mov	r3, r1
   d7fbc:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d7fbe:	d007      	beq.n	d7fd0 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d7fc0:	6809      	ldr	r1, [r1, #0]
   d7fc2:	b119      	cbz	r1, d7fcc <_ZN6StringaSERKS_+0x16>
   d7fc4:	689a      	ldr	r2, [r3, #8]
   d7fc6:	f7ff ffae 	bl	d7f26 <_ZN6String4copyEPKcj>
   d7fca:	e001      	b.n	d7fd0 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d7fcc:	f7ff ff83 	bl	d7ed6 <_ZN6String10invalidateEv>

	return *this;
}
   d7fd0:	4620      	mov	r0, r4
   d7fd2:	bd10      	pop	{r4, pc}

000d7fd4 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d7fd4:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7fd6:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d7fd8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7fda:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7fdc:	6043      	str	r3, [r0, #4]
	len = 0;
   d7fde:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7fe0:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d7fe2:	f7ff ffe8 	bl	d7fb6 <_ZN6StringaSERKS_>
}
   d7fe6:	4620      	mov	r0, r4
   d7fe8:	bd10      	pop	{r4, pc}

000d7fea <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d7fea:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d7fec:	b510      	push	{r4, lr}
   d7fee:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d7ff0:	d001      	beq.n	d7ff6 <_ZN6StringaSEOS_+0xc>
   d7ff2:	f7ff ffc3 	bl	d7f7c <_ZN6String4moveERS_>
	return *this;
}
   d7ff6:	4620      	mov	r0, r4
   d7ff8:	bd10      	pop	{r4, pc}

000d7ffa <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d7ffa:	b538      	push	{r3, r4, r5, lr}
   d7ffc:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d7ffe:	460c      	mov	r4, r1
   d8000:	b141      	cbz	r1, d8014 <_ZN6StringaSEPKc+0x1a>
   d8002:	4608      	mov	r0, r1
   d8004:	f002 f802 	bl	da00c <strlen>
   d8008:	4621      	mov	r1, r4
   d800a:	4602      	mov	r2, r0
   d800c:	4628      	mov	r0, r5
   d800e:	f7ff ff8a 	bl	d7f26 <_ZN6String4copyEPKcj>
   d8012:	e001      	b.n	d8018 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d8014:	f7ff ff5f 	bl	d7ed6 <_ZN6String10invalidateEv>

	return *this;
}
   d8018:	4628      	mov	r0, r5
   d801a:	bd38      	pop	{r3, r4, r5, pc}

000d801c <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
   d801c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d801e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d8020:	2300      	movs	r3, #0
   d8022:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d8024:	6063      	str	r3, [r4, #4]
	len = 0;
   d8026:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d8028:	7323      	strb	r3, [r4, #12]
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
   d802a:	4608      	mov	r0, r1
{
	init();
	char buf[9];
	utoa(value, buf, base);
   d802c:	a901      	add	r1, sp, #4
   d802e:	f7ff ff46 	bl	d7ebe <utoa>
	*this = buf;
   d8032:	a901      	add	r1, sp, #4
   d8034:	4620      	mov	r0, r4
   d8036:	f7ff ffe0 	bl	d7ffa <_ZN6StringaSEPKc>
}
   d803a:	4620      	mov	r0, r4
   d803c:	b004      	add	sp, #16
   d803e:	bd10      	pop	{r4, pc}

000d8040 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d8040:	b510      	push	{r4, lr}
   d8042:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d8044:	6800      	ldr	r0, [r0, #0]
   d8046:	b108      	cbz	r0, d804c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d8048:	f7ff fb7e 	bl	d7748 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d804c:	4620      	mov	r0, r4
   d804e:	bd10      	pop	{r4, pc}

000d8050 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d8050:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8052:	4c06      	ldr	r4, [pc, #24]	; (d806c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d8054:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d8056:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8058:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d805a:	f7ff fb6d 	bl	d7738 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d805e:	4620      	mov	r0, r4
   d8060:	4a03      	ldr	r2, [pc, #12]	; (d8070 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d8062:	4904      	ldr	r1, [pc, #16]	; (d8074 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d8064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d8068:	f001 b8cc 	b.w	d9204 <__aeabi_atexit>
   d806c:	2003e3a8 	.word	0x2003e3a8
   d8070:	2003dd80 	.word	0x2003dd80
   d8074:	000d8041 	.word	0x000d8041

000d8078 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d8078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d807a:	4606      	mov	r6, r0
   d807c:	460d      	mov	r5, r1
   d807e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d8080:	2400      	movs	r4, #0
  while (size--) {
   d8082:	42bd      	cmp	r5, r7
   d8084:	d00c      	beq.n	d80a0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d8086:	6833      	ldr	r3, [r6, #0]
   d8088:	f815 1b01 	ldrb.w	r1, [r5], #1
   d808c:	689b      	ldr	r3, [r3, #8]
   d808e:	4630      	mov	r0, r6
   d8090:	4798      	blx	r3
     if (chunk>=0)
   d8092:	2800      	cmp	r0, #0
   d8094:	db01      	blt.n	d809a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d8096:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d8098:	e7f3      	b.n	d8082 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d809a:	2c00      	cmp	r4, #0
   d809c:	bf08      	it	eq
   d809e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d80a0:	4620      	mov	r0, r4
   d80a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d80a4 <_ZN5Print5printEPKc>:
   d80a4:	b508      	push	{r3, lr}
   d80a6:	f7fe f92b 	bl	d6300 <_ZN5Print5writeEPKc>
   d80aa:	bd08      	pop	{r3, pc}

000d80ac <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d80ac:	6803      	ldr	r3, [r0, #0]
   d80ae:	689b      	ldr	r3, [r3, #8]
   d80b0:	4718      	bx	r3

000d80b2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d80b2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d80b4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d80b6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d80b8:	f7ff fff8 	bl	d80ac <_ZN5Print5printEc>
  n += print('\n');
   d80bc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d80be:	4604      	mov	r4, r0
  n += print('\n');
   d80c0:	4628      	mov	r0, r5
   d80c2:	f7ff fff3 	bl	d80ac <_ZN5Print5printEc>
  return n;
}
   d80c6:	4420      	add	r0, r4
   d80c8:	bd38      	pop	{r3, r4, r5, pc}

000d80ca <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d80ca:	b538      	push	{r3, r4, r5, lr}
   d80cc:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d80ce:	f7fe f917 	bl	d6300 <_ZN5Print5writeEPKc>
   d80d2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d80d4:	4628      	mov	r0, r5
   d80d6:	f7ff ffec 	bl	d80b2 <_ZN5Print7printlnEv>
  return n;
}
   d80da:	4420      	add	r0, r4
   d80dc:	bd38      	pop	{r3, r4, r5, pc}

000d80de <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d80de:	b530      	push	{r4, r5, lr}
   d80e0:	b08b      	sub	sp, #44	; 0x2c
   d80e2:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d80e4:	2100      	movs	r1, #0
   d80e6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d80ea:	2a01      	cmp	r2, #1
   d80ec:	bf98      	it	ls
   d80ee:	220a      	movls	r2, #10
   d80f0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d80f4:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d80f8:	fb05 3312 	mls	r3, r5, r2, r3
   d80fc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8100:	2b09      	cmp	r3, #9
   d8102:	bf94      	ite	ls
   d8104:	3330      	addls	r3, #48	; 0x30
   d8106:	3337      	addhi	r3, #55	; 0x37
   d8108:	b2db      	uxtb	r3, r3
   d810a:	4621      	mov	r1, r4
   d810c:	f804 3901 	strb.w	r3, [r4], #-1
   d8110:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d8112:	2d00      	cmp	r5, #0
   d8114:	d1ee      	bne.n	d80f4 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d8116:	f7fe f8f3 	bl	d6300 <_ZN5Print5writeEPKc>
}
   d811a:	b00b      	add	sp, #44	; 0x2c
   d811c:	bd30      	pop	{r4, r5, pc}
	...

000d8120 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d8120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8124:	ec57 6b10 	vmov	r6, r7, d0
   d8128:	4682      	mov	sl, r0
   d812a:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d812c:	ee10 2a10 	vmov	r2, s0
   d8130:	463b      	mov	r3, r7
   d8132:	ee10 0a10 	vmov	r0, s0
   d8136:	4639      	mov	r1, r7
   d8138:	f001 fe20 	bl	d9d7c <__aeabi_dcmpun>
   d813c:	b108      	cbz	r0, d8142 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d813e:	494e      	ldr	r1, [pc, #312]	; (d8278 <_ZN5Print10printFloatEdh+0x158>)
   d8140:	e012      	b.n	d8168 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d8142:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d8146:	f04f 32ff 	mov.w	r2, #4294967295
   d814a:	4b4c      	ldr	r3, [pc, #304]	; (d827c <_ZN5Print10printFloatEdh+0x15c>)
   d814c:	4630      	mov	r0, r6
   d814e:	4649      	mov	r1, r9
   d8150:	f001 fe14 	bl	d9d7c <__aeabi_dcmpun>
   d8154:	b968      	cbnz	r0, d8172 <_ZN5Print10printFloatEdh+0x52>
   d8156:	f04f 32ff 	mov.w	r2, #4294967295
   d815a:	4b48      	ldr	r3, [pc, #288]	; (d827c <_ZN5Print10printFloatEdh+0x15c>)
   d815c:	4630      	mov	r0, r6
   d815e:	4649      	mov	r1, r9
   d8160:	f001 fdee 	bl	d9d40 <__aeabi_dcmple>
   d8164:	b928      	cbnz	r0, d8172 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d8166:	4946      	ldr	r1, [pc, #280]	; (d8280 <_ZN5Print10printFloatEdh+0x160>)
   d8168:	4650      	mov	r0, sl
   d816a:	f7fe f8c9 	bl	d6300 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d816e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d8172:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d8176:	4b43      	ldr	r3, [pc, #268]	; (d8284 <_ZN5Print10printFloatEdh+0x164>)
   d8178:	4630      	mov	r0, r6
   d817a:	4639      	mov	r1, r7
   d817c:	f001 fdf4 	bl	d9d68 <__aeabi_dcmpgt>
   d8180:	b108      	cbz	r0, d8186 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d8182:	4941      	ldr	r1, [pc, #260]	; (d8288 <_ZN5Print10printFloatEdh+0x168>)
   d8184:	e7f0      	b.n	d8168 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d8186:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d818a:	4b40      	ldr	r3, [pc, #256]	; (d828c <_ZN5Print10printFloatEdh+0x16c>)
   d818c:	4630      	mov	r0, r6
   d818e:	4639      	mov	r1, r7
   d8190:	f001 fdcc 	bl	d9d2c <__aeabi_dcmplt>
   d8194:	2800      	cmp	r0, #0
   d8196:	d1f4      	bne.n	d8182 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d8198:	2200      	movs	r2, #0
   d819a:	2300      	movs	r3, #0
   d819c:	4630      	mov	r0, r6
   d819e:	4639      	mov	r1, r7
   d81a0:	f001 fdc4 	bl	d9d2c <__aeabi_dcmplt>
   d81a4:	b140      	cbz	r0, d81b8 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d81a6:	212d      	movs	r1, #45	; 0x2d
   d81a8:	4650      	mov	r0, sl
   d81aa:	f7ff ff7f 	bl	d80ac <_ZN5Print5printEc>
     number = -number;
   d81ae:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d81b2:	4604      	mov	r4, r0
     number = -number;
   d81b4:	461f      	mov	r7, r3
   d81b6:	e000      	b.n	d81ba <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d81b8:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d81ba:	4935      	ldr	r1, [pc, #212]	; (d8290 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d81bc:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d81c0:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d81c2:	fa5f f388 	uxtb.w	r3, r8
   d81c6:	429d      	cmp	r5, r3
   d81c8:	d906      	bls.n	d81d8 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d81ca:	2200      	movs	r2, #0
   d81cc:	4b31      	ldr	r3, [pc, #196]	; (d8294 <_ZN5Print10printFloatEdh+0x174>)
   d81ce:	f001 fc65 	bl	d9a9c <__aeabi_ddiv>
   d81d2:	f108 0801 	add.w	r8, r8, #1
   d81d6:	e7f4      	b.n	d81c2 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d81d8:	4632      	mov	r2, r6
   d81da:	463b      	mov	r3, r7
   d81dc:	f001 f982 	bl	d94e4 <__adddf3>
   d81e0:	460f      	mov	r7, r1
   d81e2:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d81e4:	f001 fe08 	bl	d9df8 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d81e8:	220a      	movs	r2, #10
   d81ea:	4601      	mov	r1, r0
   d81ec:	4680      	mov	r8, r0
   d81ee:	4650      	mov	r0, sl
   d81f0:	f7ff ff75 	bl	d80de <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d81f4:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d81f6:	b3e5      	cbz	r5, d8272 <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d81f8:	4640      	mov	r0, r8
   d81fa:	f001 faaf 	bl	d975c <__aeabi_ui2d>
   d81fe:	4602      	mov	r2, r0
   d8200:	460b      	mov	r3, r1
   d8202:	4630      	mov	r0, r6
   d8204:	4639      	mov	r1, r7
   d8206:	f001 f96b 	bl	d94e0 <__aeabi_dsub>
   d820a:	4606      	mov	r6, r0
   d820c:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d820e:	4650      	mov	r0, sl
   d8210:	4921      	ldr	r1, [pc, #132]	; (d8298 <_ZN5Print10printFloatEdh+0x178>)
   d8212:	f7fe f875 	bl	d6300 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d8216:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d8218:	2200      	movs	r2, #0
   d821a:	4b1e      	ldr	r3, [pc, #120]	; (d8294 <_ZN5Print10printFloatEdh+0x174>)
   d821c:	4630      	mov	r0, r6
   d821e:	4639      	mov	r1, r7
   d8220:	f001 fb12 	bl	d9848 <__aeabi_dmul>
   d8224:	4606      	mov	r6, r0
   d8226:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d8228:	f001 fdbe 	bl	d9da8 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d822c:	f1b0 0900 	subs.w	r9, r0, #0
   d8230:	da07      	bge.n	d8242 <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d8232:	212d      	movs	r1, #45	; 0x2d
   d8234:	4650      	mov	r0, sl
   d8236:	f7ff ff39 	bl	d80ac <_ZN5Print5printEc>
            val = -n;
   d823a:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d823e:	4680      	mov	r8, r0
   d8240:	e002      	b.n	d8248 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d8242:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d8244:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d8248:	220a      	movs	r2, #10
   d824a:	4650      	mov	r0, sl
   d824c:	f7ff ff47 	bl	d80de <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d8250:	4440      	add	r0, r8
   d8252:	4404      	add	r4, r0
    remainder -= toPrint;
   d8254:	4648      	mov	r0, r9
   d8256:	f001 fa91 	bl	d977c <__aeabi_i2d>
   d825a:	4602      	mov	r2, r0
   d825c:	460b      	mov	r3, r1
   d825e:	4630      	mov	r0, r6
   d8260:	4639      	mov	r1, r7
   d8262:	f001 f93d 	bl	d94e0 <__aeabi_dsub>
   d8266:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d8268:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d826c:	4606      	mov	r6, r0
   d826e:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d8270:	d1d2      	bne.n	d8218 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d8272:	4620      	mov	r0, r4
   d8274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8278:	000da348 	.word	0x000da348
   d827c:	7fefffff 	.word	0x7fefffff
   d8280:	000da352 	.word	0x000da352
   d8284:	41efffff 	.word	0x41efffff
   d8288:	000da34c 	.word	0x000da34c
   d828c:	c1efffff 	.word	0xc1efffff
   d8290:	3fe00000 	.word	0x3fe00000
   d8294:	40240000 	.word	0x40240000
   d8298:	000da350 	.word	0x000da350

000d829c <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d829c:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d829e:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d82a0:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d82a2:	f7ff ff3d 	bl	d8120 <_ZN5Print10printFloatEdh>
   d82a6:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d82a8:	4628      	mov	r0, r5
   d82aa:	f7ff ff02 	bl	d80b2 <_ZN5Print7printlnEv>
  return n;
}
   d82ae:	4420      	add	r0, r4
   d82b0:	bd38      	pop	{r3, r4, r5, pc}

000d82b2 <_ZN5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d82b2:	b538      	push	{r3, r4, r5, lr}
   d82b4:	4604      	mov	r4, r0
    return println((double)num, digits);
   d82b6:	ee10 0a10 	vmov	r0, s0
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d82ba:	460d      	mov	r5, r1
    return println((double)num, digits);
   d82bc:	f001 fa70 	bl	d97a0 <__aeabi_f2d>
   d82c0:	ec41 0b10 	vmov	d0, r0, r1
   d82c4:	4629      	mov	r1, r5
   d82c6:	4620      	mov	r0, r4
}
   d82c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return n;
}

size_t Print::println(float num, int digits)
{
    return println((double)num, digits);
   d82cc:	f7ff bfe6 	b.w	d829c <_ZN5Print7printlnEdi>

000d82d0 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d82d0:	b40c      	push	{r2, r3}
   d82d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d82d6:	b087      	sub	sp, #28
   d82d8:	af00      	add	r7, sp, #0
   d82da:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d82de:	4605      	mov	r5, r0
   d82e0:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d82e4:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d82e6:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d82e8:	4623      	mov	r3, r4
   d82ea:	464a      	mov	r2, r9
   d82ec:	2114      	movs	r1, #20
   d82ee:	1d38      	adds	r0, r7, #4
   d82f0:	f7ff fbfe 	bl	d7af0 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d82f4:	2813      	cmp	r0, #19
   d82f6:	d805      	bhi.n	d8304 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d82f8:	1d39      	adds	r1, r7, #4
   d82fa:	4628      	mov	r0, r5
   d82fc:	f7fe f800 	bl	d6300 <_ZN5Print5writeEPKc>
   d8300:	4604      	mov	r4, r0
   d8302:	e013      	b.n	d832c <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d8304:	f100 0308 	add.w	r3, r0, #8
   d8308:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d830c:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d830e:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d8312:	1c41      	adds	r1, r0, #1
   d8314:	4623      	mov	r3, r4
   d8316:	464a      	mov	r2, r9
   d8318:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d831a:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d831c:	f7ff fbe8 	bl	d7af0 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d8320:	4669      	mov	r1, sp
   d8322:	4628      	mov	r0, r5
   d8324:	f7fd ffec 	bl	d6300 <_ZN5Print5writeEPKc>
   d8328:	4604      	mov	r4, r0
   d832a:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d832c:	b11e      	cbz	r6, d8336 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d832e:	4628      	mov	r0, r5
   d8330:	f7ff febf 	bl	d80b2 <_ZN5Print7printlnEv>
   d8334:	4404      	add	r4, r0
    return n;
}
   d8336:	4620      	mov	r0, r4
   d8338:	371c      	adds	r7, #28
   d833a:	46bd      	mov	sp, r7
   d833c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8340:	b002      	add	sp, #8
   d8342:	4770      	bx	lr

000d8344 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d8344:	4b01      	ldr	r3, [pc, #4]	; (d834c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d8346:	4a02      	ldr	r2, [pc, #8]	; (d8350 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d8348:	601a      	str	r2, [r3, #0]
   d834a:	4770      	bx	lr
   d834c:	2003e3ac 	.word	0x2003e3ac
   d8350:	000da3c9 	.word	0x000da3c9

000d8354 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d8354:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8356:	2000      	movs	r0, #0
   d8358:	f7ff fb9a 	bl	d7a90 <spark_sync_time_pending>
   d835c:	b128      	cbz	r0, d836a <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d835e:	f7ff fb7f 	bl	d7a60 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8362:	f080 0001 	eor.w	r0, r0, #1
   d8366:	b2c0      	uxtb	r0, r0
   d8368:	bd08      	pop	{r3, pc}
   d836a:	2001      	movs	r0, #1
    }
   d836c:	bd08      	pop	{r3, pc}

000d836e <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d836e:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d8370:	2000      	movs	r0, #0
   d8372:	f7ff f991 	bl	d7698 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d8376:	4604      	mov	r4, r0
   d8378:	b968      	cbnz	r0, d8396 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d837a:	f7ff fadd 	bl	d7938 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d837e:	2801      	cmp	r0, #1
   d8380:	d10b      	bne.n	d839a <_ZN9TimeClass7isValidEv+0x2c>
   d8382:	4620      	mov	r0, r4
   d8384:	f7ff faf8 	bl	d7978 <system_thread_get_state>
   d8388:	b938      	cbnz	r0, d839a <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d838a:	f7ff ffe3 	bl	d8354 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d838e:	b930      	cbnz	r0, d839e <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d8390:	f7ff fb5e 	bl	d7a50 <spark_process>
   d8394:	e7f9      	b.n	d838a <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d8396:	2001      	movs	r0, #1
   d8398:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d839a:	2000      	movs	r0, #0
   d839c:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d839e:	f7ff ffd9 	bl	d8354 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d83a2:	2000      	movs	r0, #0
   d83a4:	f7ff f978 	bl	d7698 <HAL_RTC_Time_Is_Valid>
   d83a8:	3000      	adds	r0, #0
   d83aa:	bf18      	it	ne
   d83ac:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d83ae:	bd10      	pop	{r4, pc}

000d83b0 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d83b0:	b508      	push	{r3, lr}
    (void)isValid();
   d83b2:	f7ff ffdc 	bl	d836e <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d83b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d83ba:	f7ff b94d 	b.w	d7658 <HAL_RTC_Get_UnixTime>
	...

000d83c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d83c0:	4b02      	ldr	r3, [pc, #8]	; (d83cc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d83c2:	681a      	ldr	r2, [r3, #0]
   d83c4:	4b02      	ldr	r3, [pc, #8]	; (d83d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d83c6:	601a      	str	r2, [r3, #0]
   d83c8:	4770      	bx	lr
   d83ca:	bf00      	nop
   d83cc:	2003dd18 	.word	0x2003dd18
   d83d0:	2003e3b0 	.word	0x2003e3b0

000d83d4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d83d4:	2100      	movs	r1, #0
   d83d6:	f7ff babf 	b.w	d7958 <system_delay_ms>

000d83da <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d83da:	b510      	push	{r4, lr}
   d83dc:	4604      	mov	r4, r0
   d83de:	f7fc fa67 	bl	d48b0 <_ZNSt14_Function_baseD1Ev>
   d83e2:	4620      	mov	r0, r4
   d83e4:	bd10      	pop	{r4, pc}
	...

000d83e8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d83e8:	4803      	ldr	r0, [pc, #12]	; (d83f8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d83ea:	4a04      	ldr	r2, [pc, #16]	; (d83fc <_GLOBAL__sub_I_RGB+0x14>)
   d83ec:	4904      	ldr	r1, [pc, #16]	; (d8400 <_GLOBAL__sub_I_RGB+0x18>)
   d83ee:	2300      	movs	r3, #0
   d83f0:	6083      	str	r3, [r0, #8]
   d83f2:	f000 bf07 	b.w	d9204 <__aeabi_atexit>
   d83f6:	bf00      	nop
   d83f8:	2003e3b4 	.word	0x2003e3b4
   d83fc:	2003dd80 	.word	0x2003dd80
   d8400:	000d83db 	.word	0x000d83db

000d8404 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d8404:	7d00      	ldrb	r0, [r0, #20]
   d8406:	4770      	bx	lr

000d8408 <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d8408:	7d03      	ldrb	r3, [r0, #20]
   d840a:	b11b      	cbz	r3, d8414 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d840c:	6983      	ldr	r3, [r0, #24]
   d840e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d8412:	d102      	bne.n	d841a <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d8414:	ed9f 0a05 	vldr	s0, [pc, #20]	; d842c <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d8418:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d841a:	ee07 3a90 	vmov	s15, r3
   d841e:	ed9f 7a04 	vldr	s14, [pc, #16]	; d8430 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d8422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8426:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d842a:	4770      	bx	lr
   d842c:	00000000 	.word	0x00000000
   d8430:	42c80000 	.word	0x42c80000

000d8434 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d8434:	7d03      	ldrb	r3, [r0, #20]
   d8436:	b11b      	cbz	r3, d8440 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d8438:	6a03      	ldr	r3, [r0, #32]
   d843a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d843e:	d102      	bne.n	d8446 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d8440:	ed9f 0a05 	vldr	s0, [pc, #20]	; d8458 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d8444:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d8446:	ee07 3a90 	vmov	s15, r3
   d844a:	ed9f 7a04 	vldr	s14, [pc, #16]	; d845c <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d844e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8452:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d8456:	4770      	bx	lr
   d8458:	00000000 	.word	0x00000000
   d845c:	42c80000 	.word	0x42c80000

000d8460 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d8460:	7d03      	ldrb	r3, [r0, #20]
   d8462:	b17b      	cbz	r3, d8484 <_ZNK14CellularSignal10getQualityEv+0x24>
   d8464:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d8466:	2b00      	cmp	r3, #0
   d8468:	db0c      	blt.n	d8484 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d846a:	ee07 3a90 	vmov	s15, r3
   d846e:	eddf 6a07 	vldr	s13, [pc, #28]	; d848c <_ZNK14CellularSignal10getQualityEv+0x2c>
   d8472:	ed9f 0a07 	vldr	s0, [pc, #28]	; d8490 <_ZNK14CellularSignal10getQualityEv+0x30>
   d8476:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d847a:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d847e:	ee27 0a80 	vmul.f32	s0, s15, s0
   d8482:	4770      	bx	lr
    }

    return -1.0f;
   d8484:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d8488:	4770      	bx	lr
   d848a:	bf00      	nop
   d848c:	477fff00 	.word	0x477fff00
   d8490:	42c80000 	.word	0x42c80000

000d8494 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d8494:	7d03      	ldrb	r3, [r0, #20]
   d8496:	b17b      	cbz	r3, d84b8 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d8498:	69c3      	ldr	r3, [r0, #28]
   d849a:	2b00      	cmp	r3, #0
   d849c:	db0c      	blt.n	d84b8 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d849e:	ee07 3a90 	vmov	s15, r3
   d84a2:	eddf 6a07 	vldr	s13, [pc, #28]	; d84c0 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d84a6:	ed9f 0a07 	vldr	s0, [pc, #28]	; d84c4 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d84aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d84ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d84b2:	ee27 0a80 	vmul.f32	s0, s15, s0
   d84b6:	4770      	bx	lr
    }

    return -1.0f;
   d84b8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d84bc:	4770      	bx	lr
   d84be:	bf00      	nop
   d84c0:	477fff00 	.word	0x477fff00
   d84c4:	42c80000 	.word	0x42c80000

000d84c8 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d84c8:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d84ca:	460d      	mov	r5, r1
   d84cc:	f100 0410 	add.w	r4, r0, #16
   d84d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d84d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d84d4:	e895 0003 	ldmia.w	r5, {r0, r1}
   d84d8:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d84dc:	2001      	movs	r0, #1
   d84de:	bd30      	pop	{r4, r5, pc}

000d84e0 <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d84e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d84e4:	4607      	mov	r7, r0
   d84e6:	460c      	mov	r4, r1
{
    if (base == 0) {
   d84e8:	4615      	mov	r5, r2
   d84ea:	b92a      	cbnz	r2, d84f8 <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d84ec:	6803      	ldr	r3, [r0, #0]
   d84ee:	b2c9      	uxtb	r1, r1
   d84f0:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d84f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d84f6:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d84f8:	2900      	cmp	r1, #0
   d84fa:	da07      	bge.n	d850c <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d84fc:	2a0a      	cmp	r2, #10
   d84fe:	d105      	bne.n	d850c <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d8500:	212d      	movs	r1, #45	; 0x2d
   d8502:	f7ff fdd3 	bl	d80ac <_ZN5Print5printEc>
            val = -n;
   d8506:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d8508:	4606      	mov	r6, r0
            val = -n;
   d850a:	e001      	b.n	d8510 <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d850c:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d850e:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d8510:	b2ea      	uxtb	r2, r5
   d8512:	4638      	mov	r0, r7
   d8514:	f7ff fde3 	bl	d80de <_ZN5Print11printNumberEmh>
    }
}
   d8518:	4430      	add	r0, r6
   d851a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d851e <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
   d851e:	b570      	push	{r4, r5, r6, lr}
   d8520:	460d      	mov	r5, r1
   d8522:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d8524:	220a      	movs	r2, #10
   d8526:	6881      	ldr	r1, [r0, #8]
   d8528:	4628      	mov	r0, r5
   d852a:	f7ff ffd9 	bl	d84e0 <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
   d852e:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d8530:	4604      	mov	r4, r0
    n += p.print(',');
   d8532:	4628      	mov	r0, r5
   d8534:	f7ff fdba 	bl	d80ac <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d8538:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d853a:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d853c:	68f1      	ldr	r1, [r6, #12]
   d853e:	4628      	mov	r0, r5
   d8540:	f7ff ffce 	bl	d84e0 <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
   d8544:	4420      	add	r0, r4
   d8546:	bd70      	pop	{r4, r5, r6, pc}

000d8548 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d8548:	f1a0 0004 	sub.w	r0, r0, #4
   d854c:	f7ff bfe7 	b.w	d851e <_ZNK14CellularSignal7printToER5Print>

000d8550 <_ZN6detail9_getVCellEhh>:
namespace detail {
	// Converts VCELL_REGISTER reading to Battery Voltage
	float _getVCell(byte MSB, byte LSB) {
		// VCELL = 12-bit value, 1.25mV (1V/800) per bit
		float value = (float)((MSB << 4) | (LSB >> 4));
		return value / 800.0;
   d8550:	0909      	lsrs	r1, r1, #4
   d8552:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
   d8556:	ee07 0a90 	vmov	s15, r0
   d855a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
	}
   d855e:	eddf 7a02 	vldr	s15, [pc, #8]	; d8568 <_ZN6detail9_getVCellEhh+0x18>
   d8562:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d8566:	4770      	bx	lr
   d8568:	44480000 	.word	0x44480000

000d856c <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d856c:	6800      	ldr	r0, [r0, #0]
   d856e:	f000 bbb8 	b.w	d8ce2 <_ZN7TwoWire4lockEv>

000d8572 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d8572:	b510      	push	{r4, lr}
   d8574:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d8576:	6001      	str	r1, [r0, #0]
   d8578:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d857a:	b10a      	cbz	r2, d8580 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d857c:	f7ff fff6 	bl	d856c <_ZN9FuelGauge4lockEv>
    }
}
   d8580:	4620      	mov	r0, r4
   d8582:	bd10      	pop	{r4, pc}

000d8584 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d8584:	b538      	push	{r3, r4, r5, lr}
   d8586:	4604      	mov	r4, r0
   d8588:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d858a:	f000 fe15 	bl	d91b8 <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d858e:	462a      	mov	r2, r5
   d8590:	4601      	mov	r1, r0
   d8592:	4620      	mov	r0, r4
   d8594:	f7ff ffed 	bl	d8572 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d8598:	4620      	mov	r0, r4
   d859a:	bd38      	pop	{r3, r4, r5, pc}

000d859c <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d859c:	6800      	ldr	r0, [r0, #0]
   d859e:	f000 bba9 	b.w	d8cf4 <_ZN7TwoWire6unlockEv>

000d85a2 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d85a2:	b510      	push	{r4, lr}
{
    if (lock_) {
   d85a4:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d85a6:	4604      	mov	r4, r0
{
    if (lock_) {
   d85a8:	b10b      	cbz	r3, d85ae <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d85aa:	f7ff fff7 	bl	d859c <_ZN9FuelGauge6unlockEv>
    }
}
   d85ae:	4620      	mov	r0, r4
   d85b0:	bd10      	pop	{r4, pc}

000d85b2 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d85b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d85b4:	4604      	mov	r4, r0
   d85b6:	4616      	mov	r6, r2
   d85b8:	461d      	mov	r5, r3
   d85ba:	460f      	mov	r7, r1
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d85bc:	f7ff ffd6 	bl	d856c <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   d85c0:	6820      	ldr	r0, [r4, #0]
   d85c2:	2136      	movs	r1, #54	; 0x36
   d85c4:	f000 fb82 	bl	d8ccc <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
   d85c8:	6820      	ldr	r0, [r4, #0]
   d85ca:	6803      	ldr	r3, [r0, #0]
   d85cc:	4639      	mov	r1, r7
   d85ce:	689b      	ldr	r3, [r3, #8]
   d85d0:	4798      	blx	r3
    i2c_.endTransmission(true);
   d85d2:	2101      	movs	r1, #1
   d85d4:	6820      	ldr	r0, [r4, #0]
   d85d6:	f000 fb7c 	bl	d8cd2 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
   d85da:	2202      	movs	r2, #2
   d85dc:	2136      	movs	r1, #54	; 0x36
   d85de:	2301      	movs	r3, #1
   d85e0:	6820      	ldr	r0, [r4, #0]
   d85e2:	f000 fb5d 	bl	d8ca0 <_ZN7TwoWire11requestFromEhjh>
    MSB = i2c_.read();
   d85e6:	6820      	ldr	r0, [r4, #0]
   d85e8:	6803      	ldr	r3, [r0, #0]
   d85ea:	695b      	ldr	r3, [r3, #20]
   d85ec:	4798      	blx	r3
   d85ee:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
   d85f0:	6820      	ldr	r0, [r4, #0]
   d85f2:	6803      	ldr	r3, [r0, #0]
   d85f4:	695b      	ldr	r3, [r3, #20]
   d85f6:	4798      	blx	r3
   d85f8:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d85fa:	4620      	mov	r0, r4
}
   d85fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d8600:	f7ff bfcc 	b.w	d859c <_ZN9FuelGauge6unlockEv>

000d8604 <_ZN9FuelGauge8getVCellEv>:
		return MSB + decimal;
	}
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {
   d8604:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d8606:	ab02      	add	r3, sp, #8
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {

	byte MSB = 0;
   d8608:	2200      	movs	r2, #0
   d860a:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;
   d860e:	f803 2d01 	strb.w	r2, [r3, #-1]!

	readRegister(VCELL_REGISTER, MSB, LSB);
   d8612:	2102      	movs	r1, #2
   d8614:	f10d 0206 	add.w	r2, sp, #6
   d8618:	f7ff ffcb 	bl	d85b2 <_ZN9FuelGauge12readRegisterEhRhS0_>
	return detail::_getVCell(MSB, LSB);
   d861c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d8620:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   d8624:	b003      	add	sp, #12
   d8626:	f85d eb04 	ldr.w	lr, [sp], #4

	byte MSB = 0;
	byte LSB = 0;

	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
   d862a:	f7ff bf91 	b.w	d8550 <_ZN6detail9_getVCellEhh>
	...

000d8630 <_ZN9FuelGauge6getSoCEv>:
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
   d8630:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d8632:	ab02      	add	r3, sp, #8
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d8634:	2200      	movs	r2, #0
	byte LSB = 0;
   d8636:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d863a:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
   d863e:	2104      	movs	r1, #4
   d8640:	f10d 0206 	add.w	r2, sp, #6
   d8644:	f7ff ffb5 	bl	d85b2 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d8648:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d864c:	f001 f896 	bl	d977c <__aeabi_i2d>
   d8650:	2200      	movs	r2, #0
   d8652:	4b09      	ldr	r3, [pc, #36]	; (d8678 <_ZN9FuelGauge6getSoCEv+0x48>)
   d8654:	f001 f8f8 	bl	d9848 <__aeabi_dmul>
   d8658:	f001 fbee 	bl	d9e38 <__aeabi_d2f>
   d865c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d8660:	ee00 3a10 	vmov	s0, r3
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d8664:	ee07 0a90 	vmov	s15, r0
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d8668:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d866c:	ee37 0a80 	vadd.f32	s0, s15, s0
   d8670:	b003      	add	sp, #12
   d8672:	f85d fb04 	ldr.w	pc, [sp], #4
   d8676:	bf00      	nop
   d8678:	3f700000 	.word	0x3f700000

000d867c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d867c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d867e:	4b0c      	ldr	r3, [pc, #48]	; (d86b0 <serialEventRun+0x34>)
   d8680:	b133      	cbz	r3, d8690 <serialEventRun+0x14>
   d8682:	f000 f957 	bl	d8934 <_Z16_fetch_usbserialv>
   d8686:	6803      	ldr	r3, [r0, #0]
   d8688:	691b      	ldr	r3, [r3, #16]
   d868a:	4798      	blx	r3
   d868c:	2800      	cmp	r0, #0
   d868e:	dc09      	bgt.n	d86a4 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d8690:	4b08      	ldr	r3, [pc, #32]	; (d86b4 <serialEventRun+0x38>)
   d8692:	b163      	cbz	r3, d86ae <serialEventRun+0x32>
   d8694:	f000 fa84 	bl	d8ba0 <_Z22__fetch_global_Serial1v>
   d8698:	6803      	ldr	r3, [r0, #0]
   d869a:	691b      	ldr	r3, [r3, #16]
   d869c:	4798      	blx	r3
   d869e:	2800      	cmp	r0, #0
   d86a0:	dc03      	bgt.n	d86aa <serialEventRun+0x2e>
   d86a2:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d86a4:	f3af 8000 	nop.w
   d86a8:	e7f2      	b.n	d8690 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d86aa:	f3af 8000 	nop.w
   d86ae:	bd08      	pop	{r3, pc}
	...

000d86b8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d86b8:	b508      	push	{r3, lr}
	serialEventRun();
   d86ba:	f7ff ffdf 	bl	d867c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d86be:	f7fe ffc3 	bl	d7648 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d86c2:	4b01      	ldr	r3, [pc, #4]	; (d86c8 <_post_loop+0x10>)
   d86c4:	6018      	str	r0, [r3, #0]
   d86c6:	bd08      	pop	{r3, pc}
   d86c8:	2003e710 	.word	0x2003e710

000d86cc <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d86cc:	4802      	ldr	r0, [pc, #8]	; (d86d8 <_Z33system_initialize_user_backup_ramv+0xc>)
   d86ce:	4a03      	ldr	r2, [pc, #12]	; (d86dc <_Z33system_initialize_user_backup_ramv+0x10>)
   d86d0:	4903      	ldr	r1, [pc, #12]	; (d86e0 <_Z33system_initialize_user_backup_ramv+0x14>)
   d86d2:	1a12      	subs	r2, r2, r0
   d86d4:	f001 bc1d 	b.w	d9f12 <memcpy>
   d86d8:	2003f400 	.word	0x2003f400
   d86dc:	2003f404 	.word	0x2003f404
   d86e0:	000da6d0 	.word	0x000da6d0

000d86e4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d86e4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d86e6:	2300      	movs	r3, #0
   d86e8:	9300      	str	r3, [sp, #0]
   d86ea:	461a      	mov	r2, r3
   d86ec:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d86f0:	f7ff f954 	bl	d799c <system_ctrl_set_result>
}
   d86f4:	b003      	add	sp, #12
   d86f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d86fc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d86fc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d86fe:	8843      	ldrh	r3, [r0, #2]
   d8700:	2b0a      	cmp	r3, #10
   d8702:	d008      	beq.n	d8716 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d8704:	2b50      	cmp	r3, #80	; 0x50
   d8706:	d109      	bne.n	d871c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d8708:	4b09      	ldr	r3, [pc, #36]	; (d8730 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d870a:	681b      	ldr	r3, [r3, #0]
   d870c:	b13b      	cbz	r3, d871e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d870e:	b003      	add	sp, #12
   d8710:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d8714:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d8716:	f7ff ffe5 	bl	d86e4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d871a:	e006      	b.n	d872a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d871c:	2300      	movs	r3, #0
   d871e:	9300      	str	r3, [sp, #0]
   d8720:	461a      	mov	r2, r3
   d8722:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8726:	f7ff f939 	bl	d799c <system_ctrl_set_result>
        break;
    }
}
   d872a:	b003      	add	sp, #12
   d872c:	f85d fb04 	ldr.w	pc, [sp], #4
   d8730:	2003e3c4 	.word	0x2003e3c4

000d8734 <module_user_init_hook>:

void module_user_init_hook()
{
   d8734:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d8736:	4c10      	ldr	r4, [pc, #64]	; (d8778 <module_user_init_hook+0x44>)
   d8738:	4d10      	ldr	r5, [pc, #64]	; (d877c <module_user_init_hook+0x48>)
   d873a:	6823      	ldr	r3, [r4, #0]
   d873c:	42ab      	cmp	r3, r5
   d873e:	4b10      	ldr	r3, [pc, #64]	; (d8780 <module_user_init_hook+0x4c>)
   d8740:	bf0c      	ite	eq
   d8742:	2201      	moveq	r2, #1
   d8744:	2200      	movne	r2, #0
   d8746:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d8748:	d002      	beq.n	d8750 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d874a:	f7ff ffbf 	bl	d86cc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d874e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d8750:	f7fe ff6a 	bl	d7628 <HAL_RNG_GetRandomNumber>
   d8754:	4604      	mov	r4, r0
    srand(seed);
   d8756:	f001 fbef 	bl	d9f38 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d875a:	4b0a      	ldr	r3, [pc, #40]	; (d8784 <module_user_init_hook+0x50>)
   d875c:	b113      	cbz	r3, d8764 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d875e:	4620      	mov	r0, r4
   d8760:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d8764:	2100      	movs	r1, #0
   d8766:	4807      	ldr	r0, [pc, #28]	; (d8784 <module_user_init_hook+0x50>)
   d8768:	f7ff f99a 	bl	d7aa0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d876c:	2100      	movs	r1, #0
   d876e:	4806      	ldr	r0, [pc, #24]	; (d8788 <module_user_init_hook+0x54>)
}
   d8770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8774:	f7ff b908 	b.w	d7988 <system_ctrl_set_app_request_handler>
   d8778:	2003f400 	.word	0x2003f400
   d877c:	9a271c1e 	.word	0x9a271c1e
   d8780:	2003e3c8 	.word	0x2003e3c8
   d8784:	00000000 	.word	0x00000000
   d8788:	000d86fd 	.word	0x000d86fd

000d878c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d878c:	4770      	bx	lr

000d878e <_ZN9IPAddressD0Ev>:
   d878e:	b510      	push	{r4, lr}
   d8790:	2118      	movs	r1, #24
   d8792:	4604      	mov	r4, r0
   d8794:	f000 fd44 	bl	d9220 <_ZdlPvj>
   d8798:	4620      	mov	r0, r4
   d879a:	bd10      	pop	{r4, pc}

000d879c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d879c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d879e:	7d03      	ldrb	r3, [r0, #20]
   d87a0:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d87a2:	b08d      	sub	sp, #52	; 0x34
   d87a4:	460e      	mov	r6, r1
   d87a6:	f100 0704 	add.w	r7, r0, #4
   d87aa:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d87ae:	d002      	beq.n	d87b6 <_ZNK9IPAddress7printToER5Print+0x1a>
   d87b0:	f100 0508 	add.w	r5, r0, #8
   d87b4:	e018      	b.n	d87e8 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d87b6:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d87b8:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d87ba:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d87be:	232f      	movs	r3, #47	; 0x2f
   d87c0:	462a      	mov	r2, r5
   d87c2:	200a      	movs	r0, #10
   d87c4:	f7fe ffd0 	bl	d7768 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d87c8:	4628      	mov	r0, r5
   d87ca:	f001 fc1f 	bl	da00c <strlen>
   d87ce:	6833      	ldr	r3, [r6, #0]
   d87d0:	4602      	mov	r2, r0
   d87d2:	68db      	ldr	r3, [r3, #12]
   d87d4:	4629      	mov	r1, r5
   d87d6:	4630      	mov	r0, r6
   d87d8:	4798      	blx	r3
   d87da:	e00f      	b.n	d87fc <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d87dc:	b124      	cbz	r4, d87e8 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d87de:	212e      	movs	r1, #46	; 0x2e
   d87e0:	4630      	mov	r0, r6
   d87e2:	f7ff fc63 	bl	d80ac <_ZN5Print5printEc>
   d87e6:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d87e8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d87ec:	220a      	movs	r2, #10
   d87ee:	4630      	mov	r0, r6
   d87f0:	f7ff fc75 	bl	d80de <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d87f4:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d87f6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d87f8:	d1f0      	bne.n	d87dc <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d87fa:	4620      	mov	r0, r4
    }
    return n;
}
   d87fc:	b00d      	add	sp, #52	; 0x34
   d87fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8800 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d8800:	b510      	push	{r4, lr}
   d8802:	4b05      	ldr	r3, [pc, #20]	; (d8818 <_ZN9IPAddressC1Ev+0x18>)
   d8804:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d8806:	2211      	movs	r2, #17
   d8808:	f840 3b04 	str.w	r3, [r0], #4
   d880c:	2100      	movs	r1, #0
   d880e:	f001 fb8b 	bl	d9f28 <memset>
{
    clear();
}
   d8812:	4620      	mov	r0, r4
   d8814:	bd10      	pop	{r4, pc}
   d8816:	bf00      	nop
   d8818:	000da49c 	.word	0x000da49c

000d881c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d881c:	4603      	mov	r3, r0
   d881e:	4a07      	ldr	r2, [pc, #28]	; (d883c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d8820:	b510      	push	{r4, lr}
   d8822:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d8826:	f101 0210 	add.w	r2, r1, #16
   d882a:	f851 4b04 	ldr.w	r4, [r1], #4
   d882e:	f843 4b04 	str.w	r4, [r3], #4
   d8832:	4291      	cmp	r1, r2
   d8834:	d1f9      	bne.n	d882a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d8836:	780a      	ldrb	r2, [r1, #0]
   d8838:	701a      	strb	r2, [r3, #0]
}
   d883a:	bd10      	pop	{r4, pc}
   d883c:	000da49c 	.word	0x000da49c

000d8840 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d8840:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d8842:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d8846:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d884a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d884e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d8852:	2304      	movs	r3, #4
   d8854:	6041      	str	r1, [r0, #4]
   d8856:	7503      	strb	r3, [r0, #20]
   d8858:	bd10      	pop	{r4, pc}

000d885a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d885a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d885c:	780d      	ldrb	r5, [r1, #0]
   d885e:	788b      	ldrb	r3, [r1, #2]
   d8860:	784a      	ldrb	r2, [r1, #1]
   d8862:	78c9      	ldrb	r1, [r1, #3]
   d8864:	9100      	str	r1, [sp, #0]
   d8866:	4629      	mov	r1, r5
   d8868:	f7ff ffea 	bl	d8840 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d886c:	b003      	add	sp, #12
   d886e:	bd30      	pop	{r4, r5, pc}

000d8870 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8870:	7441      	strb	r1, [r0, #17]
   d8872:	4770      	bx	lr

000d8874 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d8874:	4770      	bx	lr

000d8876 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d8876:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d8878:	2100      	movs	r1, #0
   d887a:	7c00      	ldrb	r0, [r0, #16]
   d887c:	f7ff f844 	bl	d7908 <HAL_USB_USART_Receive_Data>
}
   d8880:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8884:	bf28      	it	cs
   d8886:	f04f 30ff 	movcs.w	r0, #4294967295
   d888a:	bd08      	pop	{r3, pc}

000d888c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d888c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d888e:	2101      	movs	r1, #1
   d8890:	7c00      	ldrb	r0, [r0, #16]
   d8892:	f7ff f839 	bl	d7908 <HAL_USB_USART_Receive_Data>
}
   d8896:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d889a:	bf28      	it	cs
   d889c:	f04f 30ff 	movcs.w	r0, #4294967295
   d88a0:	bd08      	pop	{r3, pc}

000d88a2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d88a2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d88a4:	7c00      	ldrb	r0, [r0, #16]
   d88a6:	f7ff f827 	bl	d78f8 <HAL_USB_USART_Available_Data_For_Write>
}
   d88aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d88ae:	bd08      	pop	{r3, pc}

000d88b0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d88b0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d88b2:	7c00      	ldrb	r0, [r0, #16]
   d88b4:	f7ff f818 	bl	d78e8 <HAL_USB_USART_Available_Data>
}
   d88b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d88bc:	bd08      	pop	{r3, pc}

000d88be <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d88be:	7c00      	ldrb	r0, [r0, #16]
   d88c0:	f7ff b832 	b.w	d7928 <HAL_USB_USART_Flush_Data>

000d88c4 <_ZN9USBSerialD0Ev>:
   d88c4:	b510      	push	{r4, lr}
   d88c6:	2114      	movs	r1, #20
   d88c8:	4604      	mov	r4, r0
   d88ca:	f000 fca9 	bl	d9220 <_ZdlPvj>
   d88ce:	4620      	mov	r0, r4
   d88d0:	bd10      	pop	{r4, pc}

000d88d2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d88d2:	b538      	push	{r3, r4, r5, lr}
   d88d4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d88d6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d88d8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d88da:	f7ff f80d 	bl	d78f8 <HAL_USB_USART_Available_Data_For_Write>
   d88de:	2800      	cmp	r0, #0
   d88e0:	dc01      	bgt.n	d88e6 <_ZN9USBSerial5writeEh+0x14>
   d88e2:	7c60      	ldrb	r0, [r4, #17]
   d88e4:	b128      	cbz	r0, d88f2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d88e6:	4629      	mov	r1, r5
   d88e8:	7c20      	ldrb	r0, [r4, #16]
   d88ea:	f7ff f815 	bl	d7918 <HAL_USB_USART_Send_Data>
   d88ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d88f2:	bd38      	pop	{r3, r4, r5, pc}

000d88f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d88f4:	b510      	push	{r4, lr}
   d88f6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d88f8:	2300      	movs	r3, #0
   d88fa:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d88fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8900:	60a3      	str	r3, [r4, #8]
   d8902:	4b05      	ldr	r3, [pc, #20]	; (d8918 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d8904:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d8906:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8908:	4608      	mov	r0, r1
{
  _serial = serial;
   d890a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d890c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d890e:	4611      	mov	r1, r2
   d8910:	f7fe ffda 	bl	d78c8 <HAL_USB_USART_Init>
}
   d8914:	4620      	mov	r0, r4
   d8916:	bd10      	pop	{r4, pc}
   d8918:	000da4b0 	.word	0x000da4b0

000d891c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d891c:	2200      	movs	r2, #0
   d891e:	7c00      	ldrb	r0, [r0, #16]
   d8920:	f7fe bfda 	b.w	d78d8 <HAL_USB_USART_Begin>

000d8924 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8924:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d8926:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8928:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d892a:	2100      	movs	r1, #0
   d892c:	f001 fafc 	bl	d9f28 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d8930:	4620      	mov	r0, r4
   d8932:	bd10      	pop	{r4, pc}

000d8934 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d8934:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8936:	4d0e      	ldr	r5, [pc, #56]	; (d8970 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d8938:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d893a:	a801      	add	r0, sp, #4
   d893c:	f7ff fff2 	bl	d8924 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8940:	6829      	ldr	r1, [r5, #0]
   d8942:	f011 0401 	ands.w	r4, r1, #1
   d8946:	d110      	bne.n	d896a <_Z16_fetch_usbserialv+0x36>
   d8948:	4628      	mov	r0, r5
   d894a:	f7fb fba8 	bl	d409e <__cxa_guard_acquire>
   d894e:	b160      	cbz	r0, d896a <_Z16_fetch_usbserialv+0x36>
   d8950:	aa01      	add	r2, sp, #4
   d8952:	4621      	mov	r1, r4
   d8954:	4807      	ldr	r0, [pc, #28]	; (d8974 <_Z16_fetch_usbserialv+0x40>)
   d8956:	f7ff ffcd 	bl	d88f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d895a:	4628      	mov	r0, r5
   d895c:	f7fb fba4 	bl	d40a8 <__cxa_guard_release>
   d8960:	4a05      	ldr	r2, [pc, #20]	; (d8978 <_Z16_fetch_usbserialv+0x44>)
   d8962:	4906      	ldr	r1, [pc, #24]	; (d897c <_Z16_fetch_usbserialv+0x48>)
   d8964:	4803      	ldr	r0, [pc, #12]	; (d8974 <_Z16_fetch_usbserialv+0x40>)
   d8966:	f000 fc4d 	bl	d9204 <__aeabi_atexit>
	return _usbserial;
}
   d896a:	4802      	ldr	r0, [pc, #8]	; (d8974 <_Z16_fetch_usbserialv+0x40>)
   d896c:	b007      	add	sp, #28
   d896e:	bd30      	pop	{r4, r5, pc}
   d8970:	2003e3cc 	.word	0x2003e3cc
   d8974:	2003e3d0 	.word	0x2003e3d0
   d8978:	2003dd80 	.word	0x2003dd80
   d897c:	000d8875 	.word	0x000d8875

000d8980 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d8980:	4700      	bx	r0
	...

000d8984 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d8984:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8986:	b085      	sub	sp, #20
   d8988:	461c      	mov	r4, r3
   d898a:	460e      	mov	r6, r1
   d898c:	4617      	mov	r7, r2
   d898e:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   d8990:	f7fe fdca 	bl	d7528 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   d8994:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d8996:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8998:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d899c:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d899e:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d89a2:	bfa5      	ittet	ge
   d89a4:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d89a8:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d89ac:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d89ae:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d89b0:	9300      	str	r3, [sp, #0]
   d89b2:	4632      	mov	r2, r6
   d89b4:	463b      	mov	r3, r7
   d89b6:	4906      	ldr	r1, [pc, #24]	; (d89d0 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d89b8:	bfa8      	it	ge
   d89ba:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d89be:	4628      	mov	r0, r5
   d89c0:	f7fe fdaa 	bl	d7518 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d89c4:	fab0 f080 	clz	r0, r0
   d89c8:	0940      	lsrs	r0, r0, #5
   d89ca:	b005      	add	sp, #20
   d89cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d89ce:	bf00      	nop
   d89d0:	000d8981 	.word	0x000d8981

000d89d4 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d89d4:	f7fe bdb8 	b.w	d7548 <HAL_Interrupts_Disable_All>

000d89d8 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d89d8:	f7fe bdae 	b.w	d7538 <HAL_Interrupts_Enable_All>

000d89dc <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d89dc:	2200      	movs	r2, #0
   d89de:	4611      	mov	r1, r2
   d89e0:	6840      	ldr	r0, [r0, #4]
   d89e2:	f7fe bffd 	b.w	d79e0 <network_ready>

000d89e6 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d89e6:	2200      	movs	r2, #0
   d89e8:	4611      	mov	r1, r2
   d89ea:	6840      	ldr	r0, [r0, #4]
   d89ec:	f7ff b818 	b.w	d7a20 <network_listening>

000d89f0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d89f0:	2200      	movs	r2, #0
   d89f2:	4611      	mov	r1, r2
   d89f4:	6840      	ldr	r0, [r0, #4]
   d89f6:	f7ff b823 	b.w	d7a40 <network_get_listen_timeout>

000d89fa <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d89fa:	2200      	movs	r2, #0
   d89fc:	6840      	ldr	r0, [r0, #4]
   d89fe:	f7ff b817 	b.w	d7a30 <network_set_listen_timeout>

000d8a02 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8a02:	2200      	movs	r2, #0
   d8a04:	f081 0101 	eor.w	r1, r1, #1
   d8a08:	6840      	ldr	r0, [r0, #4]
   d8a0a:	f7ff b801 	b.w	d7a10 <network_listen>

000d8a0e <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d8a0e:	2300      	movs	r3, #0
   d8a10:	461a      	mov	r2, r3
   d8a12:	4619      	mov	r1, r3
   d8a14:	6840      	ldr	r0, [r0, #4]
   d8a16:	f7fe bff3 	b.w	d7a00 <network_off>

000d8a1a <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d8a1a:	2300      	movs	r3, #0
   d8a1c:	461a      	mov	r2, r3
   d8a1e:	4619      	mov	r1, r3
   d8a20:	6840      	ldr	r0, [r0, #4]
   d8a22:	f7fe bfe5 	b.w	d79f0 <network_on>

000d8a26 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8a26:	2200      	movs	r2, #0
   d8a28:	4611      	mov	r1, r2
   d8a2a:	6840      	ldr	r0, [r0, #4]
   d8a2c:	f7fe bfc8 	b.w	d79c0 <network_connecting>

000d8a30 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8a30:	2200      	movs	r2, #0
   d8a32:	2102      	movs	r1, #2
   d8a34:	6840      	ldr	r0, [r0, #4]
   d8a36:	f7fe bfcb 	b.w	d79d0 <network_disconnect>

000d8a3a <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8a3a:	2300      	movs	r3, #0
   d8a3c:	461a      	mov	r2, r3
   d8a3e:	6840      	ldr	r0, [r0, #4]
   d8a40:	f7fe bfb6 	b.w	d79b0 <network_connect>

000d8a44 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d8a44:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d8a46:	4b1b      	ldr	r3, [pc, #108]	; (d8ab4 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d8a48:	6003      	str	r3, [r0, #0]
   d8a4a:	2500      	movs	r5, #0
   d8a4c:	460f      	mov	r7, r1
   d8a4e:	3328      	adds	r3, #40	; 0x28
   d8a50:	2618      	movs	r6, #24
   d8a52:	b089      	sub	sp, #36	; 0x24
   d8a54:	6043      	str	r3, [r0, #4]
   d8a56:	6085      	str	r5, [r0, #8]
   d8a58:	60c5      	str	r5, [r0, #12]
   d8a5a:	4632      	mov	r2, r6
   d8a5c:	4629      	mov	r1, r5
   d8a5e:	4604      	mov	r4, r0
   d8a60:	3010      	adds	r0, #16
   d8a62:	f001 fa61 	bl	d9f28 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d8a66:	462a      	mov	r2, r5
   d8a68:	4629      	mov	r1, r5
   d8a6a:	6878      	ldr	r0, [r7, #4]
   d8a6c:	f7fe ffb8 	bl	d79e0 <network_ready>
   d8a70:	b908      	cbnz	r0, d8a76 <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d8a72:	60a0      	str	r0, [r4, #8]
            return sig;
   d8a74:	e01b      	b.n	d8aae <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d8a76:	4629      	mov	r1, r5
   d8a78:	4632      	mov	r2, r6
   d8a7a:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d8a7c:	9500      	str	r5, [sp, #0]
   d8a7e:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d8a80:	f001 fa52 	bl	d9f28 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d8a84:	a902      	add	r1, sp, #8
   d8a86:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d8a88:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d8a8c:	f7fe ff14 	bl	d78b8 <cellular_signal>
   d8a90:	b110      	cbz	r0, d8a98 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d8a92:	2301      	movs	r3, #1
   d8a94:	60a3      	str	r3, [r4, #8]
            return sig;
   d8a96:	e00a      	b.n	d8aae <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d8a98:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d8a9a:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d8a9c:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d8a9e:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d8aa0:	b90b      	cbnz	r3, d8aa6 <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d8aa2:	2302      	movs	r3, #2
   d8aa4:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d8aa6:	a902      	add	r1, sp, #8
   d8aa8:	4620      	mov	r0, r4
   d8aaa:	f7ff fd0d 	bl	d84c8 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d8aae:	4620      	mov	r0, r4
   d8ab0:	b009      	add	sp, #36	; 0x24
   d8ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8ab4:	000da468 	.word	0x000da468

000d8ab8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d8ab8:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d8aba:	4c08      	ldr	r4, [pc, #32]	; (d8adc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d8abc:	2528      	movs	r5, #40	; 0x28
   d8abe:	462a      	mov	r2, r5
   d8ac0:	2100      	movs	r1, #0
   d8ac2:	4620      	mov	r0, r4
   d8ac4:	f001 fa30 	bl	d9f28 <memset>
        cid = -1;
   d8ac8:	f04f 33ff 	mov.w	r3, #4294967295
   d8acc:	6063      	str	r3, [r4, #4]
   d8ace:	4b04      	ldr	r3, [pc, #16]	; (d8ae0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d8ad0:	8025      	strh	r5, [r4, #0]
   d8ad2:	2204      	movs	r2, #4
   d8ad4:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d8ad6:	4a03      	ldr	r2, [pc, #12]	; (d8ae4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d8ad8:	601a      	str	r2, [r3, #0]
   d8ada:	bd38      	pop	{r3, r4, r5, pc}
   d8adc:	2003e3ec 	.word	0x2003e3ec
   d8ae0:	2003e3e4 	.word	0x2003e3e4
   d8ae4:	000da4e0 	.word	0x000da4e0

000d8ae8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d8ae8:	4770      	bx	lr

000d8aea <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8aea:	7441      	strb	r1, [r0, #17]
   d8aec:	4770      	bx	lr

000d8aee <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d8aee:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d8af0:	7c00      	ldrb	r0, [r0, #16]
   d8af2:	f7fe fe79 	bl	d77e8 <HAL_USART_Available_Data_For_Write>
}
   d8af6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8afa:	bd08      	pop	{r3, pc}

000d8afc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d8afc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d8afe:	7c00      	ldrb	r0, [r0, #16]
   d8b00:	f7fe fe4a 	bl	d7798 <HAL_USART_Available_Data>
}
   d8b04:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8b08:	bd08      	pop	{r3, pc}

000d8b0a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d8b0a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d8b0c:	7c00      	ldrb	r0, [r0, #16]
   d8b0e:	f7fe fe53 	bl	d77b8 <HAL_USART_Peek_Data>
}
   d8b12:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8b16:	bf28      	it	cs
   d8b18:	f04f 30ff 	movcs.w	r0, #4294967295
   d8b1c:	bd08      	pop	{r3, pc}

000d8b1e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d8b1e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d8b20:	7c00      	ldrb	r0, [r0, #16]
   d8b22:	f7fe fe41 	bl	d77a8 <HAL_USART_Read_Data>
}
   d8b26:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8b2a:	bf28      	it	cs
   d8b2c:	f04f 30ff 	movcs.w	r0, #4294967295
   d8b30:	bd08      	pop	{r3, pc}

000d8b32 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d8b32:	7c00      	ldrb	r0, [r0, #16]
   d8b34:	f7fe be48 	b.w	d77c8 <HAL_USART_Flush_Data>

000d8b38 <_ZN11USARTSerialD0Ev>:
   d8b38:	b510      	push	{r4, lr}
   d8b3a:	2114      	movs	r1, #20
   d8b3c:	4604      	mov	r4, r0
   d8b3e:	f000 fb6f 	bl	d9220 <_ZdlPvj>
   d8b42:	4620      	mov	r0, r4
   d8b44:	bd10      	pop	{r4, pc}

000d8b46 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d8b46:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d8b48:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d8b4a:	4604      	mov	r4, r0
   d8b4c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d8b4e:	b925      	cbnz	r5, d8b5a <_ZN11USARTSerial5writeEh+0x14>
   d8b50:	7c00      	ldrb	r0, [r0, #16]
   d8b52:	f7fe fe49 	bl	d77e8 <HAL_USART_Available_Data_For_Write>
   d8b56:	2800      	cmp	r0, #0
   d8b58:	dd05      	ble.n	d8b66 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d8b5a:	4631      	mov	r1, r6
   d8b5c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d8b5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d8b62:	f7fe be11 	b.w	d7788 <HAL_USART_Write_Data>
  }
  return 0;
}
   d8b66:	4628      	mov	r0, r5
   d8b68:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8b6c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d8b6c:	b510      	push	{r4, lr}
   d8b6e:	4604      	mov	r4, r0
   d8b70:	4608      	mov	r0, r1
   d8b72:	4611      	mov	r1, r2
   d8b74:	2200      	movs	r2, #0
   d8b76:	6062      	str	r2, [r4, #4]
   d8b78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8b7c:	60a2      	str	r2, [r4, #8]
   d8b7e:	4a05      	ldr	r2, [pc, #20]	; (d8b94 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d8b80:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d8b82:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d8b84:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d8b86:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d8b88:	461a      	mov	r2, r3
   d8b8a:	f7fe fdf5 	bl	d7778 <HAL_USART_Init>
}
   d8b8e:	4620      	mov	r0, r4
   d8b90:	bd10      	pop	{r4, pc}
   d8b92:	bf00      	nop
   d8b94:	000da514 	.word	0x000da514

000d8b98 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d8b98:	7c00      	ldrb	r0, [r0, #16]
   d8b9a:	f7fe be1d 	b.w	d77d8 <HAL_USART_Is_Enabled>
	...

000d8ba0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d8ba0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d8ba2:	4d0c      	ldr	r5, [pc, #48]	; (d8bd4 <_Z22__fetch_global_Serial1v+0x34>)
   d8ba4:	6829      	ldr	r1, [r5, #0]
   d8ba6:	f011 0401 	ands.w	r4, r1, #1
   d8baa:	d111      	bne.n	d8bd0 <_Z22__fetch_global_Serial1v+0x30>
   d8bac:	4628      	mov	r0, r5
   d8bae:	f7fb fa76 	bl	d409e <__cxa_guard_acquire>
   d8bb2:	b168      	cbz	r0, d8bd0 <_Z22__fetch_global_Serial1v+0x30>
   d8bb4:	4a08      	ldr	r2, [pc, #32]	; (d8bd8 <_Z22__fetch_global_Serial1v+0x38>)
   d8bb6:	4b09      	ldr	r3, [pc, #36]	; (d8bdc <_Z22__fetch_global_Serial1v+0x3c>)
   d8bb8:	4809      	ldr	r0, [pc, #36]	; (d8be0 <_Z22__fetch_global_Serial1v+0x40>)
   d8bba:	4621      	mov	r1, r4
   d8bbc:	f7ff ffd6 	bl	d8b6c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d8bc0:	4628      	mov	r0, r5
   d8bc2:	f7fb fa71 	bl	d40a8 <__cxa_guard_release>
   d8bc6:	4a07      	ldr	r2, [pc, #28]	; (d8be4 <_Z22__fetch_global_Serial1v+0x44>)
   d8bc8:	4907      	ldr	r1, [pc, #28]	; (d8be8 <_Z22__fetch_global_Serial1v+0x48>)
   d8bca:	4805      	ldr	r0, [pc, #20]	; (d8be0 <_Z22__fetch_global_Serial1v+0x40>)
   d8bcc:	f000 fb1a 	bl	d9204 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d8bd0:	4803      	ldr	r0, [pc, #12]	; (d8be0 <_Z22__fetch_global_Serial1v+0x40>)
   d8bd2:	bd38      	pop	{r3, r4, r5, pc}
   d8bd4:	2003e4ac 	.word	0x2003e4ac
   d8bd8:	2003e4b0 	.word	0x2003e4b0
   d8bdc:	2003e428 	.word	0x2003e428
   d8be0:	2003e414 	.word	0x2003e414
   d8be4:	2003dd80 	.word	0x2003dd80
   d8be8:	000d8ae9 	.word	0x000d8ae9

000d8bec <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d8bec:	4770      	bx	lr

000d8bee <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d8bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8bf0:	4606      	mov	r6, r0
   d8bf2:	4615      	mov	r5, r2
   d8bf4:	460c      	mov	r4, r1
   d8bf6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8bf8:	42bc      	cmp	r4, r7
   d8bfa:	d006      	beq.n	d8c0a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8bfc:	6833      	ldr	r3, [r6, #0]
   d8bfe:	f814 1b01 	ldrb.w	r1, [r4], #1
   d8c02:	689b      	ldr	r3, [r3, #8]
   d8c04:	4630      	mov	r0, r6
   d8c06:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8c08:	e7f6      	b.n	d8bf8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d8c0a:	4628      	mov	r0, r5
   d8c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8c0e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d8c0e:	2200      	movs	r2, #0
   d8c10:	7c00      	ldrb	r0, [r0, #16]
   d8c12:	f7fe be01 	b.w	d7818 <HAL_I2C_Write_Data>

000d8c16 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d8c16:	2100      	movs	r1, #0
   d8c18:	7c00      	ldrb	r0, [r0, #16]
   d8c1a:	f7fe be05 	b.w	d7828 <HAL_I2C_Available_Data>

000d8c1e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d8c1e:	2100      	movs	r1, #0
   d8c20:	7c00      	ldrb	r0, [r0, #16]
   d8c22:	f7fe be09 	b.w	d7838 <HAL_I2C_Read_Data>

000d8c26 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d8c26:	2100      	movs	r1, #0
   d8c28:	7c00      	ldrb	r0, [r0, #16]
   d8c2a:	f7fe be0d 	b.w	d7848 <HAL_I2C_Peek_Data>

000d8c2e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d8c2e:	2100      	movs	r1, #0
   d8c30:	7c00      	ldrb	r0, [r0, #16]
   d8c32:	f7fe be11 	b.w	d7858 <HAL_I2C_Flush_Data>

000d8c36 <_ZN7TwoWireD0Ev>:
   d8c36:	b510      	push	{r4, lr}
   d8c38:	2114      	movs	r1, #20
   d8c3a:	4604      	mov	r4, r0
   d8c3c:	f000 faf0 	bl	d9220 <_ZdlPvj>
   d8c40:	4620      	mov	r0, r4
   d8c42:	bd10      	pop	{r4, pc}

000d8c44 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d8c44:	b510      	push	{r4, lr}
   d8c46:	4604      	mov	r4, r0
   d8c48:	2300      	movs	r3, #0
   d8c4a:	6063      	str	r3, [r4, #4]
   d8c4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8c50:	60a3      	str	r3, [r4, #8]
   d8c52:	4b04      	ldr	r3, [pc, #16]	; (d8c64 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d8c54:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d8c56:	4608      	mov	r0, r1
   d8c58:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d8c5a:	4611      	mov	r1, r2
   d8c5c:	f7fe fe0c 	bl	d7878 <HAL_I2C_Init>
}
   d8c60:	4620      	mov	r0, r4
   d8c62:	bd10      	pop	{r4, pc}
   d8c64:	000da544 	.word	0x000da544

000d8c68 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d8c68:	b570      	push	{r4, r5, r6, lr}
   d8c6a:	460c      	mov	r4, r1
   d8c6c:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d8c6e:	2514      	movs	r5, #20
   d8c70:	4606      	mov	r6, r0
   d8c72:	462a      	mov	r2, r5
   d8c74:	2100      	movs	r1, #0
   d8c76:	a801      	add	r0, sp, #4
   d8c78:	f001 f956 	bl	d9f28 <memset>
   d8c7c:	7823      	ldrb	r3, [r4, #0]
   d8c7e:	f88d 3008 	strb.w	r3, [sp, #8]
   d8c82:	6863      	ldr	r3, [r4, #4]
   d8c84:	9303      	str	r3, [sp, #12]
   d8c86:	68e3      	ldr	r3, [r4, #12]
   d8c88:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d8c8a:	2200      	movs	r2, #0
   d8c8c:	7a23      	ldrb	r3, [r4, #8]
   d8c8e:	7c30      	ldrb	r0, [r6, #16]
   d8c90:	f8ad 5004 	strh.w	r5, [sp, #4]
   d8c94:	a901      	add	r1, sp, #4
   d8c96:	9305      	str	r3, [sp, #20]
   d8c98:	f7fe fe06 	bl	d78a8 <HAL_I2C_Request_Data_Ex>
}
   d8c9c:	b006      	add	sp, #24
   d8c9e:	bd70      	pop	{r4, r5, r6, pc}

000d8ca0 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d8ca0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d8ca2:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8ca4:	f88d 1000 	strb.w	r1, [sp]
   d8ca8:	f04f 0164 	mov.w	r1, #100	; 0x64
   d8cac:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d8cae:	bf18      	it	ne
   d8cb0:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d8cb2:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d8cb4:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d8cb6:	f88d 3008 	strb.w	r3, [sp, #8]
   d8cba:	f7ff ffd5 	bl	d8c68 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d8cbe:	b005      	add	sp, #20
   d8cc0:	f85d fb04 	ldr.w	pc, [sp], #4

000d8cc4 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d8cc4:	2200      	movs	r2, #0
   d8cc6:	7c00      	ldrb	r0, [r0, #16]
   d8cc8:	f7fe bd96 	b.w	d77f8 <HAL_I2C_Begin_Transmission>

000d8ccc <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d8ccc:	b2c9      	uxtb	r1, r1
   d8cce:	f7ff bff9 	b.w	d8cc4 <_ZN7TwoWire17beginTransmissionEh>

000d8cd2 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d8cd2:	2200      	movs	r2, #0
   d8cd4:	7c00      	ldrb	r0, [r0, #16]
   d8cd6:	f7fe bd97 	b.w	d7808 <HAL_I2C_End_Transmission>

000d8cda <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d8cda:	2100      	movs	r1, #0
   d8cdc:	7c00      	ldrb	r0, [r0, #16]
   d8cde:	f7fe bdc3 	b.w	d7868 <HAL_I2C_Is_Enabled>

000d8ce2 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d8ce2:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d8ce4:	2100      	movs	r1, #0
   d8ce6:	7c00      	ldrb	r0, [r0, #16]
   d8ce8:	f7fe fdce 	bl	d7888 <HAL_I2C_Acquire>
}
   d8cec:	fab0 f080 	clz	r0, r0
   d8cf0:	0940      	lsrs	r0, r0, #5
   d8cf2:	bd08      	pop	{r3, pc}

000d8cf4 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d8cf4:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d8cf6:	2100      	movs	r1, #0
   d8cf8:	7c00      	ldrb	r0, [r0, #16]
   d8cfa:	f7fe fdcd 	bl	d7898 <HAL_I2C_Release>
}
   d8cfe:	fab0 f080 	clz	r0, r0
   d8d02:	0940      	lsrs	r0, r0, #5
   d8d04:	bd08      	pop	{r3, pc}

000d8d06 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d8d06:	b510      	push	{r4, lr}
  if (0 == max) {
   d8d08:	4604      	mov	r4, r0
   d8d0a:	b130      	cbz	r0, d8d1a <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
   d8d0c:	f001 f93c 	bl	d9f88 <rand>
   d8d10:	fb90 f3f4 	sdiv	r3, r0, r4
   d8d14:	fb03 0014 	mls	r0, r3, r4, r0
   d8d18:	bd10      	pop	{r4, pc}
}
   d8d1a:	bd10      	pop	{r4, pc}

000d8d1c <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d8d1c:	4288      	cmp	r0, r1
  }
  return rand() % max;
}

int random(int min, int max)
{
   d8d1e:	b510      	push	{r4, lr}
   d8d20:	4604      	mov	r4, r0
  if (min >= max) {
   d8d22:	da04      	bge.n	d8d2e <_Z6randomii+0x12>
    return min;
  }
  return random(max - min) + min;
   d8d24:	1a08      	subs	r0, r1, r0
   d8d26:	f7ff ffee 	bl	d8d06 <_Z6randomi>
   d8d2a:	4420      	add	r0, r4
   d8d2c:	bd10      	pop	{r4, pc}
}
   d8d2e:	bd10      	pop	{r4, pc}

000d8d30 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8d30:	2200      	movs	r2, #0
   d8d32:	4611      	mov	r1, r2
   d8d34:	6840      	ldr	r0, [r0, #4]
   d8d36:	f7fe be73 	b.w	d7a20 <network_listening>

000d8d3a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8d3a:	2200      	movs	r2, #0
   d8d3c:	4611      	mov	r1, r2
   d8d3e:	6840      	ldr	r0, [r0, #4]
   d8d40:	f7fe be7e 	b.w	d7a40 <network_get_listen_timeout>

000d8d44 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8d44:	2200      	movs	r2, #0
   d8d46:	6840      	ldr	r0, [r0, #4]
   d8d48:	f7fe be72 	b.w	d7a30 <network_set_listen_timeout>

000d8d4c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8d4c:	2200      	movs	r2, #0
   d8d4e:	f081 0101 	eor.w	r1, r1, #1
   d8d52:	6840      	ldr	r0, [r0, #4]
   d8d54:	f7fe be5c 	b.w	d7a10 <network_listen>

000d8d58 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d8d58:	2300      	movs	r3, #0
   d8d5a:	461a      	mov	r2, r3
   d8d5c:	2101      	movs	r1, #1
   d8d5e:	6840      	ldr	r0, [r0, #4]
   d8d60:	f7fe be4e 	b.w	d7a00 <network_off>

000d8d64 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d8d64:	2300      	movs	r3, #0
   d8d66:	461a      	mov	r2, r3
   d8d68:	4619      	mov	r1, r3
   d8d6a:	6840      	ldr	r0, [r0, #4]
   d8d6c:	f7fe be40 	b.w	d79f0 <network_on>

000d8d70 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8d70:	2200      	movs	r2, #0
   d8d72:	4611      	mov	r1, r2
   d8d74:	6840      	ldr	r0, [r0, #4]
   d8d76:	f7fe be33 	b.w	d79e0 <network_ready>

000d8d7a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8d7a:	2200      	movs	r2, #0
   d8d7c:	4611      	mov	r1, r2
   d8d7e:	6840      	ldr	r0, [r0, #4]
   d8d80:	f7fe be1e 	b.w	d79c0 <network_connecting>

000d8d84 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8d84:	2200      	movs	r2, #0
   d8d86:	2102      	movs	r1, #2
   d8d88:	6840      	ldr	r0, [r0, #4]
   d8d8a:	f7fe be21 	b.w	d79d0 <network_disconnect>

000d8d8e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8d8e:	2300      	movs	r3, #0
   d8d90:	461a      	mov	r2, r3
   d8d92:	6840      	ldr	r0, [r0, #4]
   d8d94:	f7fe be0c 	b.w	d79b0 <network_connect>

000d8d98 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d8d98:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8d9a:	4605      	mov	r5, r0
   d8d9c:	b188      	cbz	r0, d8dc2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8d9e:	6804      	ldr	r4, [r0, #0]
   d8da0:	b14c      	cbz	r4, d8db6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d8da2:	68a3      	ldr	r3, [r4, #8]
   d8da4:	b11b      	cbz	r3, d8dae <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d8da6:	2203      	movs	r2, #3
   d8da8:	4621      	mov	r1, r4
   d8daa:	4620      	mov	r0, r4
   d8dac:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8dae:	2110      	movs	r1, #16
   d8db0:	4620      	mov	r0, r4
   d8db2:	f000 fa35 	bl	d9220 <_ZdlPvj>
   d8db6:	4628      	mov	r0, r5
   d8db8:	2114      	movs	r1, #20
      }
   d8dba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8dbe:	f000 ba2f 	b.w	d9220 <_ZdlPvj>
   d8dc2:	bd38      	pop	{r3, r4, r5, pc}

000d8dc4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d8dc4:	b110      	cbz	r0, d8dcc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d8dc6:	6803      	ldr	r3, [r0, #0]
   d8dc8:	685b      	ldr	r3, [r3, #4]
   d8dca:	4718      	bx	r3
   d8dcc:	4770      	bx	lr

000d8dce <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d8dce:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d8dd0:	6803      	ldr	r3, [r0, #0]
   d8dd2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d8dd4:	b1bb      	cbz	r3, d8e06 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d8dd6:	6858      	ldr	r0, [r3, #4]
   d8dd8:	f7fe fc66 	bl	d76a8 <os_thread_is_current>
   d8ddc:	b978      	cbnz	r0, d8dfe <_ZN6ThreadD1Ev+0x30>
   d8dde:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d8de0:	7c5a      	ldrb	r2, [r3, #17]
   d8de2:	b912      	cbnz	r2, d8dea <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d8de4:	6858      	ldr	r0, [r3, #4]
   d8de6:	f7fe fc6f 	bl	d76c8 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d8dea:	6823      	ldr	r3, [r4, #0]
   d8dec:	6858      	ldr	r0, [r3, #4]
   d8dee:	f7fe fc73 	bl	d76d8 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8df2:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d8df4:	2300      	movs	r3, #0
   d8df6:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d8df8:	b128      	cbz	r0, d8e06 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d8dfa:	f7ff ffcd 	bl	d8d98 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8dfe:	6820      	ldr	r0, [r4, #0]
   d8e00:	b108      	cbz	r0, d8e06 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d8e02:	f7ff ffc9 	bl	d8d98 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d8e06:	4620      	mov	r0, r4
   d8e08:	bd10      	pop	{r4, pc}

000d8e0a <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d8e0a:	b538      	push	{r3, r4, r5, lr}
   d8e0c:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8e0e:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d8e12:	b108      	cbz	r0, d8e18 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d8e14:	f7fb f941 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d8e18:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d8e1c:	b108      	cbz	r0, d8e22 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d8e1e:	f7fe fc93 	bl	d7748 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8e22:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d8e26:	b135      	cbz	r5, d8e36 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8e28:	4628      	mov	r0, r5
   d8e2a:	f7ff ffd0 	bl	d8dce <_ZN6ThreadD1Ev>
   d8e2e:	2104      	movs	r1, #4
   d8e30:	4628      	mov	r0, r5
   d8e32:	f000 f9f5 	bl	d9220 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8e36:	6820      	ldr	r0, [r4, #0]
   d8e38:	b108      	cbz	r0, d8e3e <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d8e3a:	f7ff ffc3 	bl	d8dc4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d8e3e:	4620      	mov	r0, r4
   d8e40:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8e44 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d8e44:	b510      	push	{r4, lr}
   d8e46:	4b04      	ldr	r3, [pc, #16]	; (d8e58 <_ZN5spark9MeshClassD1Ev+0x14>)
   d8e48:	4604      	mov	r4, r0
   d8e4a:	f840 3b08 	str.w	r3, [r0], #8
   d8e4e:	f7ff ffdc 	bl	d8e0a <_ZN5spark11MeshPublishD1Ev>
   d8e52:	4620      	mov	r0, r4
   d8e54:	bd10      	pop	{r4, pc}
   d8e56:	bf00      	nop
   d8e58:	000da56c 	.word	0x000da56c

000d8e5c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d8e5c:	b538      	push	{r3, r4, r5, lr}
   d8e5e:	4c0e      	ldr	r4, [pc, #56]	; (d8e98 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d8e60:	4b0e      	ldr	r3, [pc, #56]	; (d8e9c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d8e62:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d8e64:	2500      	movs	r5, #0
   d8e66:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d8e68:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d8e6c:	6063      	str	r3, [r4, #4]
   d8e6e:	60a5      	str	r5, [r4, #8]
   d8e70:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8e74:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d8e78:	f7fe fc5e 	bl	d7738 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d8e7c:	4b08      	ldr	r3, [pc, #32]	; (d8ea0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d8e7e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8e82:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d8e86:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d8e88:	4620      	mov	r0, r4
   d8e8a:	4a06      	ldr	r2, [pc, #24]	; (d8ea4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d8e8c:	4906      	ldr	r1, [pc, #24]	; (d8ea8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d8e8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d8e92:	f000 b9b7 	b.w	d9204 <__aeabi_atexit>
   d8e96:	bf00      	nop
   d8e98:	2003e534 	.word	0x2003e534
   d8e9c:	000da5a0 	.word	0x000da5a0
   d8ea0:	000da56c 	.word	0x000da56c
   d8ea4:	2003dd80 	.word	0x2003dd80
   d8ea8:	000d8e45 	.word	0x000d8e45

000d8eac <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8eac:	2300      	movs	r3, #0
   d8eae:	461a      	mov	r2, r3
   d8eb0:	6840      	ldr	r0, [r0, #4]
   d8eb2:	f7fe bd7d 	b.w	d79b0 <network_connect>

000d8eb6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8eb6:	2200      	movs	r2, #0
   d8eb8:	2102      	movs	r1, #2
   d8eba:	6840      	ldr	r0, [r0, #4]
   d8ebc:	f7fe bd88 	b.w	d79d0 <network_disconnect>

000d8ec0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8ec0:	2200      	movs	r2, #0
   d8ec2:	4611      	mov	r1, r2
   d8ec4:	6840      	ldr	r0, [r0, #4]
   d8ec6:	f7fe bd7b 	b.w	d79c0 <network_connecting>

000d8eca <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d8eca:	2200      	movs	r2, #0
   d8ecc:	4611      	mov	r1, r2
   d8ece:	6840      	ldr	r0, [r0, #4]
   d8ed0:	f7fe bd86 	b.w	d79e0 <network_ready>

000d8ed4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8ed4:	2300      	movs	r3, #0
   d8ed6:	461a      	mov	r2, r3
   d8ed8:	4619      	mov	r1, r3
   d8eda:	6840      	ldr	r0, [r0, #4]
   d8edc:	f7fe bd88 	b.w	d79f0 <network_on>

000d8ee0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8ee0:	2300      	movs	r3, #0
   d8ee2:	461a      	mov	r2, r3
   d8ee4:	4619      	mov	r1, r3
   d8ee6:	6840      	ldr	r0, [r0, #4]
   d8ee8:	f7fe bd8a 	b.w	d7a00 <network_off>

000d8eec <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8eec:	2200      	movs	r2, #0
   d8eee:	f081 0101 	eor.w	r1, r1, #1
   d8ef2:	6840      	ldr	r0, [r0, #4]
   d8ef4:	f7fe bd8c 	b.w	d7a10 <network_listen>

000d8ef8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8ef8:	2200      	movs	r2, #0
   d8efa:	6840      	ldr	r0, [r0, #4]
   d8efc:	f7fe bd98 	b.w	d7a30 <network_set_listen_timeout>

000d8f00 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8f00:	2200      	movs	r2, #0
   d8f02:	4611      	mov	r1, r2
   d8f04:	6840      	ldr	r0, [r0, #4]
   d8f06:	f7fe bd9b 	b.w	d7a40 <network_get_listen_timeout>

000d8f0a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8f0a:	2200      	movs	r2, #0
   d8f0c:	4611      	mov	r1, r2
   d8f0e:	6840      	ldr	r0, [r0, #4]
   d8f10:	f7fe bd86 	b.w	d7a20 <network_listening>

000d8f14 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8f14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8f18:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d8f1a:	b095      	sub	sp, #84	; 0x54
   d8f1c:	4616      	mov	r6, r2
   d8f1e:	460d      	mov	r5, r1
   d8f20:	4607      	mov	r7, r0
    IPAddress addr;
   d8f22:	f7ff fc6d 	bl	d8800 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d8f26:	4621      	mov	r1, r4
   d8f28:	2220      	movs	r2, #32
   d8f2a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8f2c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8f2e:	f000 fffb 	bl	d9f28 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8f32:	2340      	movs	r3, #64	; 0x40
   d8f34:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8f36:	4621      	mov	r1, r4
   d8f38:	466b      	mov	r3, sp
   d8f3a:	aa0c      	add	r2, sp, #48	; 0x30
   d8f3c:	4630      	mov	r0, r6
   d8f3e:	f7fe fabb 	bl	d74b8 <netdb_getaddrinfo>
    if (!r) {
   d8f42:	4604      	mov	r4, r0
   d8f44:	2800      	cmp	r0, #0
   d8f46:	d144      	bne.n	d8fd2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8f48:	4602      	mov	r2, r0
   d8f4a:	2101      	movs	r1, #1
   d8f4c:	6868      	ldr	r0, [r5, #4]
   d8f4e:	f7fe fd47 	bl	d79e0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8f52:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8f54:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8f56:	4622      	mov	r2, r4
   d8f58:	6868      	ldr	r0, [r5, #4]
   d8f5a:	f7fe fd41 	bl	d79e0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8f5e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8f60:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d8f62:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8f64:	2e00      	cmp	r6, #0
   d8f66:	d034      	beq.n	d8fd2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d8f68:	2900      	cmp	r1, #0
   d8f6a:	d132      	bne.n	d8fd2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8f6c:	6873      	ldr	r3, [r6, #4]
   d8f6e:	2b02      	cmp	r3, #2
   d8f70:	d002      	beq.n	d8f78 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d8f72:	2b0a      	cmp	r3, #10
   d8f74:	d009      	beq.n	d8f8a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d8f76:	e02a      	b.n	d8fce <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d8f78:	f1b8 0f00 	cmp.w	r8, #0
   d8f7c:	d027      	beq.n	d8fce <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d8f7e:	6971      	ldr	r1, [r6, #20]
   d8f80:	4638      	mov	r0, r7
   d8f82:	3104      	adds	r1, #4
   d8f84:	f7ff fc69 	bl	d885a <_ZN9IPAddressaSEPKh>
   d8f88:	e020      	b.n	d8fcc <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8f8a:	f1b9 0f00 	cmp.w	r9, #0
   d8f8e:	d01e      	beq.n	d8fce <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8f90:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8f92:	2211      	movs	r2, #17
   d8f94:	a801      	add	r0, sp, #4
   d8f96:	f000 ffc7 	bl	d9f28 <memset>
                    a.v = 6;
   d8f9a:	2306      	movs	r3, #6
   d8f9c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8fa0:	ad01      	add	r5, sp, #4
   d8fa2:	f104 0308 	add.w	r3, r4, #8
   d8fa6:	3418      	adds	r4, #24
   d8fa8:	6818      	ldr	r0, [r3, #0]
   d8faa:	6859      	ldr	r1, [r3, #4]
   d8fac:	462a      	mov	r2, r5
   d8fae:	c203      	stmia	r2!, {r0, r1}
   d8fb0:	3308      	adds	r3, #8
   d8fb2:	42a3      	cmp	r3, r4
   d8fb4:	4615      	mov	r5, r2
   d8fb6:	d1f7      	bne.n	d8fa8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d8fb8:	a901      	add	r1, sp, #4
   d8fba:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d8fbc:	ad07      	add	r5, sp, #28
   d8fbe:	f7ff fc2d 	bl	d881c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8fc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8fc4:	1d3c      	adds	r4, r7, #4
   d8fc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8fc8:	682b      	ldr	r3, [r5, #0]
   d8fca:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d8fcc:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8fce:	69f6      	ldr	r6, [r6, #28]
   d8fd0:	e7c8      	b.n	d8f64 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8fd2:	9800      	ldr	r0, [sp, #0]
   d8fd4:	f7fe fa68 	bl	d74a8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8fd8:	4638      	mov	r0, r7
   d8fda:	b015      	add	sp, #84	; 0x54
   d8fdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d8fe0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8fe0:	4b02      	ldr	r3, [pc, #8]	; (d8fec <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8fe2:	4a03      	ldr	r2, [pc, #12]	; (d8ff0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8fe4:	601a      	str	r2, [r3, #0]
   d8fe6:	2200      	movs	r2, #0
   d8fe8:	605a      	str	r2, [r3, #4]
   d8fea:	4770      	bx	lr
   d8fec:	2003e708 	.word	0x2003e708
   d8ff0:	000da5a0 	.word	0x000da5a0

000d8ff4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d8ff4:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d8ff6:	4e18      	ldr	r6, [pc, #96]	; (d9058 <pinAvailable+0x64>)
   d8ff8:	6831      	ldr	r1, [r6, #0]
   d8ffa:	f011 0501 	ands.w	r5, r1, #1
   d8ffe:	4604      	mov	r4, r0
   d9000:	d10a      	bne.n	d9018 <pinAvailable+0x24>
   d9002:	4630      	mov	r0, r6
   d9004:	f7fb f84b 	bl	d409e <__cxa_guard_acquire>
   d9008:	b130      	cbz	r0, d9018 <pinAvailable+0x24>
   d900a:	4629      	mov	r1, r5
   d900c:	4813      	ldr	r0, [pc, #76]	; (d905c <pinAvailable+0x68>)
   d900e:	f7fe fdbb 	bl	d7b88 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d9012:	4630      	mov	r0, r6
   d9014:	f7fb f848 	bl	d40a8 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d9018:	4810      	ldr	r0, [pc, #64]	; (d905c <pinAvailable+0x68>)
   d901a:	f7fe feea 	bl	d7df2 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d901e:	b128      	cbz	r0, d902c <pinAvailable+0x38>
   d9020:	f1a4 030b 	sub.w	r3, r4, #11
   d9024:	2b02      	cmp	r3, #2
   d9026:	d801      	bhi.n	d902c <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d9028:	2000      	movs	r0, #0
   d902a:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d902c:	f000 f89e 	bl	d916c <_Z19__fetch_global_Wirev>
   d9030:	f7ff fe53 	bl	d8cda <_ZN7TwoWire9isEnabledEv>
   d9034:	b108      	cbz	r0, d903a <pinAvailable+0x46>
   d9036:	2c01      	cmp	r4, #1
   d9038:	d9f6      	bls.n	d9028 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d903a:	f7ff fdb1 	bl	d8ba0 <_Z22__fetch_global_Serial1v>
   d903e:	f7ff fdab 	bl	d8b98 <_ZN11USARTSerial9isEnabledEv>
   d9042:	b118      	cbz	r0, d904c <pinAvailable+0x58>
   d9044:	f1a4 0309 	sub.w	r3, r4, #9
   d9048:	2b01      	cmp	r3, #1
   d904a:	d9ed      	bls.n	d9028 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d904c:	2c23      	cmp	r4, #35	; 0x23
   d904e:	bf8c      	ite	hi
   d9050:	2000      	movhi	r0, #0
   d9052:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d9054:	bd70      	pop	{r4, r5, r6, pc}
   d9056:	bf00      	nop
   d9058:	2003ddc8 	.word	0x2003ddc8
   d905c:	2003ddcc 	.word	0x2003ddcc

000d9060 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9060:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d9062:	b538      	push	{r3, r4, r5, lr}
   d9064:	4604      	mov	r4, r0
   d9066:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9068:	d80a      	bhi.n	d9080 <pinMode+0x20>
   d906a:	29ff      	cmp	r1, #255	; 0xff
   d906c:	d008      	beq.n	d9080 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d906e:	f7ff ffc1 	bl	d8ff4 <pinAvailable>
   d9072:	b128      	cbz	r0, d9080 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d9074:	4629      	mov	r1, r5
   d9076:	4620      	mov	r0, r4
}
   d9078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d907c:	f7fe ba2c 	b.w	d74d8 <HAL_Pin_Mode>
   d9080:	bd38      	pop	{r3, r4, r5, pc}

000d9082 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d9082:	b538      	push	{r3, r4, r5, lr}
   d9084:	4604      	mov	r4, r0
   d9086:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9088:	f7fe fa2e 	bl	d74e8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d908c:	28ff      	cmp	r0, #255	; 0xff
   d908e:	d010      	beq.n	d90b2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d9090:	2806      	cmp	r0, #6
   d9092:	d804      	bhi.n	d909e <digitalWrite+0x1c>
   d9094:	234d      	movs	r3, #77	; 0x4d
   d9096:	fa23 f000 	lsr.w	r0, r3, r0
   d909a:	07c3      	lsls	r3, r0, #31
   d909c:	d409      	bmi.n	d90b2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d909e:	4620      	mov	r0, r4
   d90a0:	f7ff ffa8 	bl	d8ff4 <pinAvailable>
   d90a4:	b128      	cbz	r0, d90b2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d90a6:	4629      	mov	r1, r5
   d90a8:	4620      	mov	r0, r4
}
   d90aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d90ae:	f7fe ba23 	b.w	d74f8 <HAL_GPIO_Write>
   d90b2:	bd38      	pop	{r3, r4, r5, pc}

000d90b4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d90b4:	b510      	push	{r4, lr}
   d90b6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d90b8:	f7fe fa16 	bl	d74e8 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d90bc:	3804      	subs	r0, #4
   d90be:	b2c0      	uxtb	r0, r0
   d90c0:	2801      	cmp	r0, #1
   d90c2:	d908      	bls.n	d90d6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d90c4:	4620      	mov	r0, r4
   d90c6:	f7ff ff95 	bl	d8ff4 <pinAvailable>
   d90ca:	b120      	cbz	r0, d90d6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d90cc:	4620      	mov	r0, r4
}
   d90ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d90d2:	f7fe ba19 	b.w	d7508 <HAL_GPIO_Read>
}
   d90d6:	2000      	movs	r0, #0
   d90d8:	bd10      	pop	{r4, pc}
	...

000d90dc <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d90dc:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d90de:	4c07      	ldr	r4, [pc, #28]	; (d90fc <_Z21__fetch_global_EEPROMv+0x20>)
   d90e0:	6823      	ldr	r3, [r4, #0]
   d90e2:	07db      	lsls	r3, r3, #31
   d90e4:	d408      	bmi.n	d90f8 <_Z21__fetch_global_EEPROMv+0x1c>
   d90e6:	4620      	mov	r0, r4
   d90e8:	f7fa ffd9 	bl	d409e <__cxa_guard_acquire>
   d90ec:	b120      	cbz	r0, d90f8 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d90ee:	f7fe fabb 	bl	d7668 <HAL_EEPROM_Init>
   d90f2:	4620      	mov	r0, r4
   d90f4:	f7fa ffd8 	bl	d40a8 <__cxa_guard_release>
	return eeprom;
}
   d90f8:	4801      	ldr	r0, [pc, #4]	; (d9100 <_Z21__fetch_global_EEPROMv+0x24>)
   d90fa:	bd10      	pop	{r4, pc}
   d90fc:	2003e714 	.word	0x2003e714
   d9100:	2003e718 	.word	0x2003e718

000d9104 <_Z17acquireWireBufferv>:
   d9104:	b570      	push	{r4, r5, r6, lr}
   d9106:	4604      	mov	r4, r0
   d9108:	2514      	movs	r5, #20
   d910a:	462a      	mov	r2, r5
   d910c:	4e09      	ldr	r6, [pc, #36]	; (d9134 <_Z17acquireWireBufferv+0x30>)
   d910e:	2100      	movs	r1, #0
   d9110:	f000 ff0a 	bl	d9f28 <memset>
   d9114:	8025      	strh	r5, [r4, #0]
   d9116:	2520      	movs	r5, #32
   d9118:	4631      	mov	r1, r6
   d911a:	60a5      	str	r5, [r4, #8]
   d911c:	6125      	str	r5, [r4, #16]
   d911e:	4628      	mov	r0, r5
   d9120:	f000 f880 	bl	d9224 <_ZnajRKSt9nothrow_t>
   d9124:	4631      	mov	r1, r6
   d9126:	6060      	str	r0, [r4, #4]
   d9128:	4628      	mov	r0, r5
   d912a:	f000 f87b 	bl	d9224 <_ZnajRKSt9nothrow_t>
   d912e:	60e0      	str	r0, [r4, #12]
   d9130:	4620      	mov	r0, r4
   d9132:	bd70      	pop	{r4, r5, r6, pc}
   d9134:	000da5cc 	.word	0x000da5cc

000d9138 <_Z18acquireWire1Bufferv>:
	return defaultWireConfig();
}

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
   d9138:	b570      	push	{r4, r5, r6, lr}
   d913a:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d913c:	2514      	movs	r5, #20
   d913e:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9140:	4e09      	ldr	r6, [pc, #36]	; (d9168 <_Z18acquireWire1Bufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d9142:	2100      	movs	r1, #0
   d9144:	f000 fef0 	bl	d9f28 <memset>
   d9148:	8025      	strh	r5, [r4, #0]
   d914a:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d914c:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d914e:	60a5      	str	r5, [r4, #8]
   d9150:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9152:	4628      	mov	r0, r5
   d9154:	f000 f866 	bl	d9224 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9158:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d915a:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d915c:	4628      	mov	r0, r5
   d915e:	f000 f861 	bl	d9224 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d9162:	60e0      	str	r0, [r4, #12]

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
	return defaultWireConfig();
}
   d9164:	4620      	mov	r0, r4
   d9166:	bd70      	pop	{r4, r5, r6, pc}
   d9168:	000da5cc 	.word	0x000da5cc

000d916c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d916c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d916e:	4d0e      	ldr	r5, [pc, #56]	; (d91a8 <_Z19__fetch_global_Wirev+0x3c>)
   d9170:	6829      	ldr	r1, [r5, #0]
   d9172:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d9176:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9178:	d113      	bne.n	d91a2 <_Z19__fetch_global_Wirev+0x36>
   d917a:	4628      	mov	r0, r5
   d917c:	f7fa ff8f 	bl	d409e <__cxa_guard_acquire>
   d9180:	b178      	cbz	r0, d91a2 <_Z19__fetch_global_Wirev+0x36>
   d9182:	a801      	add	r0, sp, #4
   d9184:	f7ff ffbe 	bl	d9104 <_Z17acquireWireBufferv>
   d9188:	aa01      	add	r2, sp, #4
   d918a:	4621      	mov	r1, r4
   d918c:	4807      	ldr	r0, [pc, #28]	; (d91ac <_Z19__fetch_global_Wirev+0x40>)
   d918e:	f7ff fd59 	bl	d8c44 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d9192:	4628      	mov	r0, r5
   d9194:	f7fa ff88 	bl	d40a8 <__cxa_guard_release>
   d9198:	4a05      	ldr	r2, [pc, #20]	; (d91b0 <_Z19__fetch_global_Wirev+0x44>)
   d919a:	4906      	ldr	r1, [pc, #24]	; (d91b4 <_Z19__fetch_global_Wirev+0x48>)
   d919c:	4803      	ldr	r0, [pc, #12]	; (d91ac <_Z19__fetch_global_Wirev+0x40>)
   d919e:	f000 f831 	bl	d9204 <__aeabi_atexit>
	return wire;
}
   d91a2:	4802      	ldr	r0, [pc, #8]	; (d91ac <_Z19__fetch_global_Wirev+0x40>)
   d91a4:	b007      	add	sp, #28
   d91a6:	bd30      	pop	{r4, r5, pc}
   d91a8:	2003e71c 	.word	0x2003e71c
   d91ac:	2003e734 	.word	0x2003e734
   d91b0:	2003dd80 	.word	0x2003dd80
   d91b4:	000d8bed 	.word	0x000d8bed

000d91b8 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d91b8:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d91ba:	4c0e      	ldr	r4, [pc, #56]	; (d91f4 <_Z20__fetch_global_Wire1v+0x3c>)
   d91bc:	6823      	ldr	r3, [r4, #0]
   d91be:	07db      	lsls	r3, r3, #31
	return wire;
}

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d91c0:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d91c2:	d413      	bmi.n	d91ec <_Z20__fetch_global_Wire1v+0x34>
   d91c4:	4620      	mov	r0, r4
   d91c6:	f7fa ff6a 	bl	d409e <__cxa_guard_acquire>
   d91ca:	b178      	cbz	r0, d91ec <_Z20__fetch_global_Wire1v+0x34>
   d91cc:	a801      	add	r0, sp, #4
   d91ce:	f7ff ffb3 	bl	d9138 <_Z18acquireWire1Bufferv>
   d91d2:	aa01      	add	r2, sp, #4
   d91d4:	2101      	movs	r1, #1
   d91d6:	4808      	ldr	r0, [pc, #32]	; (d91f8 <_Z20__fetch_global_Wire1v+0x40>)
   d91d8:	f7ff fd34 	bl	d8c44 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d91dc:	4620      	mov	r0, r4
   d91de:	f7fa ff63 	bl	d40a8 <__cxa_guard_release>
   d91e2:	4a06      	ldr	r2, [pc, #24]	; (d91fc <_Z20__fetch_global_Wire1v+0x44>)
   d91e4:	4906      	ldr	r1, [pc, #24]	; (d9200 <_Z20__fetch_global_Wire1v+0x48>)
   d91e6:	4804      	ldr	r0, [pc, #16]	; (d91f8 <_Z20__fetch_global_Wire1v+0x40>)
   d91e8:	f000 f80c 	bl	d9204 <__aeabi_atexit>
	return wire;
}
   d91ec:	4802      	ldr	r0, [pc, #8]	; (d91f8 <_Z20__fetch_global_Wire1v+0x40>)
   d91ee:	b006      	add	sp, #24
   d91f0:	bd10      	pop	{r4, pc}
   d91f2:	bf00      	nop
   d91f4:	2003e748 	.word	0x2003e748
   d91f8:	2003e720 	.word	0x2003e720
   d91fc:	2003dd80 	.word	0x2003dd80
   d9200:	000d8bed 	.word	0x000d8bed

000d9204 <__aeabi_atexit>:
   d9204:	460b      	mov	r3, r1
   d9206:	4601      	mov	r1, r0
   d9208:	4618      	mov	r0, r3
   d920a:	f000 be65 	b.w	d9ed8 <__cxa_atexit>
	...

000d9210 <_ZSt15get_new_handlerv>:
   d9210:	4b02      	ldr	r3, [pc, #8]	; (d921c <_ZSt15get_new_handlerv+0xc>)
   d9212:	6818      	ldr	r0, [r3, #0]
   d9214:	f3bf 8f5f 	dmb	sy
   d9218:	4770      	bx	lr
   d921a:	bf00      	nop
   d921c:	2003e74c 	.word	0x2003e74c

000d9220 <_ZdlPvj>:
   d9220:	f7fa bf39 	b.w	d4096 <_ZdlPv>

000d9224 <_ZnajRKSt9nothrow_t>:
   d9224:	f000 b800 	b.w	d9228 <_ZnwjRKSt9nothrow_t>

000d9228 <_ZnwjRKSt9nothrow_t>:
   d9228:	b510      	push	{r4, lr}
   d922a:	2800      	cmp	r0, #0
   d922c:	bf14      	ite	ne
   d922e:	4604      	movne	r4, r0
   d9230:	2401      	moveq	r4, #1
   d9232:	4620      	mov	r0, r4
   d9234:	f7fe fc3c 	bl	d7ab0 <malloc>
   d9238:	b920      	cbnz	r0, d9244 <_ZnwjRKSt9nothrow_t+0x1c>
   d923a:	f7ff ffe9 	bl	d9210 <_ZSt15get_new_handlerv>
   d923e:	b108      	cbz	r0, d9244 <_ZnwjRKSt9nothrow_t+0x1c>
   d9240:	4780      	blx	r0
   d9242:	e7f6      	b.n	d9232 <_ZnwjRKSt9nothrow_t+0xa>
   d9244:	bd10      	pop	{r4, pc}
	...

000d9248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d9248:	4b18      	ldr	r3, [pc, #96]	; (d92ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d924a:	681a      	ldr	r2, [r3, #0]
   d924c:	07d1      	lsls	r1, r2, #31
   d924e:	bf5c      	itt	pl
   d9250:	2201      	movpl	r2, #1
   d9252:	601a      	strpl	r2, [r3, #0]
   d9254:	4b16      	ldr	r3, [pc, #88]	; (d92b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d9256:	681a      	ldr	r2, [r3, #0]
   d9258:	07d2      	lsls	r2, r2, #31
   d925a:	bf5c      	itt	pl
   d925c:	2201      	movpl	r2, #1
   d925e:	601a      	strpl	r2, [r3, #0]
   d9260:	4b14      	ldr	r3, [pc, #80]	; (d92b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d9262:	681a      	ldr	r2, [r3, #0]
   d9264:	07d0      	lsls	r0, r2, #31
   d9266:	bf5c      	itt	pl
   d9268:	2201      	movpl	r2, #1
   d926a:	601a      	strpl	r2, [r3, #0]
   d926c:	4b12      	ldr	r3, [pc, #72]	; (d92b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d926e:	681a      	ldr	r2, [r3, #0]
   d9270:	07d1      	lsls	r1, r2, #31
   d9272:	bf5c      	itt	pl
   d9274:	2201      	movpl	r2, #1
   d9276:	601a      	strpl	r2, [r3, #0]
   d9278:	4b10      	ldr	r3, [pc, #64]	; (d92bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d927a:	681a      	ldr	r2, [r3, #0]
   d927c:	07d2      	lsls	r2, r2, #31
   d927e:	bf5c      	itt	pl
   d9280:	2201      	movpl	r2, #1
   d9282:	601a      	strpl	r2, [r3, #0]
   d9284:	4b0e      	ldr	r3, [pc, #56]	; (d92c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d9286:	681a      	ldr	r2, [r3, #0]
   d9288:	07d0      	lsls	r0, r2, #31
   d928a:	bf5c      	itt	pl
   d928c:	2201      	movpl	r2, #1
   d928e:	601a      	strpl	r2, [r3, #0]
   d9290:	4b0c      	ldr	r3, [pc, #48]	; (d92c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d9292:	681a      	ldr	r2, [r3, #0]
   d9294:	07d1      	lsls	r1, r2, #31
   d9296:	bf5c      	itt	pl
   d9298:	2201      	movpl	r2, #1
   d929a:	601a      	strpl	r2, [r3, #0]
   d929c:	4b0a      	ldr	r3, [pc, #40]	; (d92c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d929e:	681a      	ldr	r2, [r3, #0]
   d92a0:	07d2      	lsls	r2, r2, #31
   d92a2:	bf5c      	itt	pl
   d92a4:	2201      	movpl	r2, #1
   d92a6:	601a      	strpl	r2, [r3, #0]
   d92a8:	4770      	bx	lr
   d92aa:	bf00      	nop
   d92ac:	2003e76c 	.word	0x2003e76c
   d92b0:	2003e768 	.word	0x2003e768
   d92b4:	2003e764 	.word	0x2003e764
   d92b8:	2003e760 	.word	0x2003e760
   d92bc:	2003e75c 	.word	0x2003e75c
   d92c0:	2003e758 	.word	0x2003e758
   d92c4:	2003e754 	.word	0x2003e754
   d92c8:	2003e750 	.word	0x2003e750

000d92cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d92cc:	4b24      	ldr	r3, [pc, #144]	; (d9360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d92ce:	681a      	ldr	r2, [r3, #0]
   d92d0:	07d0      	lsls	r0, r2, #31
   d92d2:	bf5c      	itt	pl
   d92d4:	2201      	movpl	r2, #1
   d92d6:	601a      	strpl	r2, [r3, #0]
   d92d8:	4b22      	ldr	r3, [pc, #136]	; (d9364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d92da:	681a      	ldr	r2, [r3, #0]
   d92dc:	07d1      	lsls	r1, r2, #31
   d92de:	bf5c      	itt	pl
   d92e0:	2201      	movpl	r2, #1
   d92e2:	601a      	strpl	r2, [r3, #0]
   d92e4:	4b20      	ldr	r3, [pc, #128]	; (d9368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d92e6:	681a      	ldr	r2, [r3, #0]
   d92e8:	07d2      	lsls	r2, r2, #31
   d92ea:	bf5c      	itt	pl
   d92ec:	2201      	movpl	r2, #1
   d92ee:	601a      	strpl	r2, [r3, #0]
   d92f0:	4b1e      	ldr	r3, [pc, #120]	; (d936c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d92f2:	681a      	ldr	r2, [r3, #0]
   d92f4:	07d0      	lsls	r0, r2, #31
   d92f6:	bf5c      	itt	pl
   d92f8:	2201      	movpl	r2, #1
   d92fa:	601a      	strpl	r2, [r3, #0]
   d92fc:	4b1c      	ldr	r3, [pc, #112]	; (d9370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d92fe:	681a      	ldr	r2, [r3, #0]
   d9300:	07d1      	lsls	r1, r2, #31
   d9302:	bf5c      	itt	pl
   d9304:	2201      	movpl	r2, #1
   d9306:	601a      	strpl	r2, [r3, #0]
   d9308:	4b1a      	ldr	r3, [pc, #104]	; (d9374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d930a:	681a      	ldr	r2, [r3, #0]
   d930c:	07d2      	lsls	r2, r2, #31
   d930e:	bf5c      	itt	pl
   d9310:	2201      	movpl	r2, #1
   d9312:	601a      	strpl	r2, [r3, #0]
   d9314:	4b18      	ldr	r3, [pc, #96]	; (d9378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d9316:	681a      	ldr	r2, [r3, #0]
   d9318:	07d0      	lsls	r0, r2, #31
   d931a:	bf5c      	itt	pl
   d931c:	2201      	movpl	r2, #1
   d931e:	601a      	strpl	r2, [r3, #0]
   d9320:	4b16      	ldr	r3, [pc, #88]	; (d937c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d9322:	681a      	ldr	r2, [r3, #0]
   d9324:	07d1      	lsls	r1, r2, #31
   d9326:	bf5c      	itt	pl
   d9328:	2201      	movpl	r2, #1
   d932a:	601a      	strpl	r2, [r3, #0]
   d932c:	4b14      	ldr	r3, [pc, #80]	; (d9380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d932e:	681a      	ldr	r2, [r3, #0]
   d9330:	07d2      	lsls	r2, r2, #31
   d9332:	bf5c      	itt	pl
   d9334:	2201      	movpl	r2, #1
   d9336:	601a      	strpl	r2, [r3, #0]
   d9338:	4b12      	ldr	r3, [pc, #72]	; (d9384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d933a:	681a      	ldr	r2, [r3, #0]
   d933c:	07d0      	lsls	r0, r2, #31
   d933e:	bf5c      	itt	pl
   d9340:	2201      	movpl	r2, #1
   d9342:	601a      	strpl	r2, [r3, #0]
   d9344:	4b10      	ldr	r3, [pc, #64]	; (d9388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d9346:	681a      	ldr	r2, [r3, #0]
   d9348:	07d1      	lsls	r1, r2, #31
   d934a:	bf5c      	itt	pl
   d934c:	2201      	movpl	r2, #1
   d934e:	601a      	strpl	r2, [r3, #0]
   d9350:	4b0e      	ldr	r3, [pc, #56]	; (d938c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d9352:	681a      	ldr	r2, [r3, #0]
   d9354:	07d2      	lsls	r2, r2, #31
   d9356:	bf5c      	itt	pl
   d9358:	2201      	movpl	r2, #1
   d935a:	601a      	strpl	r2, [r3, #0]
   d935c:	4770      	bx	lr
   d935e:	bf00      	nop
   d9360:	2003e79c 	.word	0x2003e79c
   d9364:	2003e798 	.word	0x2003e798
   d9368:	2003e794 	.word	0x2003e794
   d936c:	2003e790 	.word	0x2003e790
   d9370:	2003e78c 	.word	0x2003e78c
   d9374:	2003e788 	.word	0x2003e788
   d9378:	2003e784 	.word	0x2003e784
   d937c:	2003e780 	.word	0x2003e780
   d9380:	2003e77c 	.word	0x2003e77c
   d9384:	2003e778 	.word	0x2003e778
   d9388:	2003e774 	.word	0x2003e774
   d938c:	2003e770 	.word	0x2003e770

000d9390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d9390:	4b24      	ldr	r3, [pc, #144]	; (d9424 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d9392:	681a      	ldr	r2, [r3, #0]
   d9394:	07d0      	lsls	r0, r2, #31
   d9396:	bf5c      	itt	pl
   d9398:	2201      	movpl	r2, #1
   d939a:	601a      	strpl	r2, [r3, #0]
   d939c:	4b22      	ldr	r3, [pc, #136]	; (d9428 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d939e:	681a      	ldr	r2, [r3, #0]
   d93a0:	07d1      	lsls	r1, r2, #31
   d93a2:	bf5c      	itt	pl
   d93a4:	2201      	movpl	r2, #1
   d93a6:	601a      	strpl	r2, [r3, #0]
   d93a8:	4b20      	ldr	r3, [pc, #128]	; (d942c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d93aa:	681a      	ldr	r2, [r3, #0]
   d93ac:	07d2      	lsls	r2, r2, #31
   d93ae:	bf5c      	itt	pl
   d93b0:	2201      	movpl	r2, #1
   d93b2:	601a      	strpl	r2, [r3, #0]
   d93b4:	4b1e      	ldr	r3, [pc, #120]	; (d9430 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d93b6:	681a      	ldr	r2, [r3, #0]
   d93b8:	07d0      	lsls	r0, r2, #31
   d93ba:	bf5c      	itt	pl
   d93bc:	2201      	movpl	r2, #1
   d93be:	601a      	strpl	r2, [r3, #0]
   d93c0:	4b1c      	ldr	r3, [pc, #112]	; (d9434 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d93c2:	681a      	ldr	r2, [r3, #0]
   d93c4:	07d1      	lsls	r1, r2, #31
   d93c6:	bf5c      	itt	pl
   d93c8:	2201      	movpl	r2, #1
   d93ca:	601a      	strpl	r2, [r3, #0]
   d93cc:	4b1a      	ldr	r3, [pc, #104]	; (d9438 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d93ce:	681a      	ldr	r2, [r3, #0]
   d93d0:	07d2      	lsls	r2, r2, #31
   d93d2:	bf5c      	itt	pl
   d93d4:	2201      	movpl	r2, #1
   d93d6:	601a      	strpl	r2, [r3, #0]
   d93d8:	4b18      	ldr	r3, [pc, #96]	; (d943c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d93da:	681a      	ldr	r2, [r3, #0]
   d93dc:	07d0      	lsls	r0, r2, #31
   d93de:	bf5c      	itt	pl
   d93e0:	2201      	movpl	r2, #1
   d93e2:	601a      	strpl	r2, [r3, #0]
   d93e4:	4b16      	ldr	r3, [pc, #88]	; (d9440 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d93e6:	681a      	ldr	r2, [r3, #0]
   d93e8:	07d1      	lsls	r1, r2, #31
   d93ea:	bf5c      	itt	pl
   d93ec:	2201      	movpl	r2, #1
   d93ee:	601a      	strpl	r2, [r3, #0]
   d93f0:	4b14      	ldr	r3, [pc, #80]	; (d9444 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d93f2:	681a      	ldr	r2, [r3, #0]
   d93f4:	07d2      	lsls	r2, r2, #31
   d93f6:	bf5c      	itt	pl
   d93f8:	2201      	movpl	r2, #1
   d93fa:	601a      	strpl	r2, [r3, #0]
   d93fc:	4b12      	ldr	r3, [pc, #72]	; (d9448 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d93fe:	681a      	ldr	r2, [r3, #0]
   d9400:	07d0      	lsls	r0, r2, #31
   d9402:	bf5c      	itt	pl
   d9404:	2201      	movpl	r2, #1
   d9406:	601a      	strpl	r2, [r3, #0]
   d9408:	4b10      	ldr	r3, [pc, #64]	; (d944c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d940a:	681a      	ldr	r2, [r3, #0]
   d940c:	07d1      	lsls	r1, r2, #31
   d940e:	bf5c      	itt	pl
   d9410:	2201      	movpl	r2, #1
   d9412:	601a      	strpl	r2, [r3, #0]
   d9414:	4b0e      	ldr	r3, [pc, #56]	; (d9450 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d9416:	681a      	ldr	r2, [r3, #0]
   d9418:	07d2      	lsls	r2, r2, #31
   d941a:	bf5c      	itt	pl
   d941c:	2201      	movpl	r2, #1
   d941e:	601a      	strpl	r2, [r3, #0]
   d9420:	4770      	bx	lr
   d9422:	bf00      	nop
   d9424:	2003e7cc 	.word	0x2003e7cc
   d9428:	2003e7c8 	.word	0x2003e7c8
   d942c:	2003e7c4 	.word	0x2003e7c4
   d9430:	2003e7c0 	.word	0x2003e7c0
   d9434:	2003e7bc 	.word	0x2003e7bc
   d9438:	2003e7b8 	.word	0x2003e7b8
   d943c:	2003e7b4 	.word	0x2003e7b4
   d9440:	2003e7b0 	.word	0x2003e7b0
   d9444:	2003e7ac 	.word	0x2003e7ac
   d9448:	2003e7a8 	.word	0x2003e7a8
   d944c:	2003e7a4 	.word	0x2003e7a4
   d9450:	2003e7a0 	.word	0x2003e7a0

000d9454 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d9454:	4b18      	ldr	r3, [pc, #96]	; (d94b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d9456:	681a      	ldr	r2, [r3, #0]
   d9458:	07d1      	lsls	r1, r2, #31
   d945a:	bf5c      	itt	pl
   d945c:	2201      	movpl	r2, #1
   d945e:	601a      	strpl	r2, [r3, #0]
   d9460:	4b16      	ldr	r3, [pc, #88]	; (d94bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d9462:	681a      	ldr	r2, [r3, #0]
   d9464:	07d2      	lsls	r2, r2, #31
   d9466:	bf5c      	itt	pl
   d9468:	2201      	movpl	r2, #1
   d946a:	601a      	strpl	r2, [r3, #0]
   d946c:	4b14      	ldr	r3, [pc, #80]	; (d94c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d946e:	681a      	ldr	r2, [r3, #0]
   d9470:	07d0      	lsls	r0, r2, #31
   d9472:	bf5c      	itt	pl
   d9474:	2201      	movpl	r2, #1
   d9476:	601a      	strpl	r2, [r3, #0]
   d9478:	4b12      	ldr	r3, [pc, #72]	; (d94c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d947a:	681a      	ldr	r2, [r3, #0]
   d947c:	07d1      	lsls	r1, r2, #31
   d947e:	bf5c      	itt	pl
   d9480:	2201      	movpl	r2, #1
   d9482:	601a      	strpl	r2, [r3, #0]
   d9484:	4b10      	ldr	r3, [pc, #64]	; (d94c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d9486:	681a      	ldr	r2, [r3, #0]
   d9488:	07d2      	lsls	r2, r2, #31
   d948a:	bf5c      	itt	pl
   d948c:	2201      	movpl	r2, #1
   d948e:	601a      	strpl	r2, [r3, #0]
   d9490:	4b0e      	ldr	r3, [pc, #56]	; (d94cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d9492:	681a      	ldr	r2, [r3, #0]
   d9494:	07d0      	lsls	r0, r2, #31
   d9496:	bf5c      	itt	pl
   d9498:	2201      	movpl	r2, #1
   d949a:	601a      	strpl	r2, [r3, #0]
   d949c:	4b0c      	ldr	r3, [pc, #48]	; (d94d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d949e:	681a      	ldr	r2, [r3, #0]
   d94a0:	07d1      	lsls	r1, r2, #31
   d94a2:	bf5c      	itt	pl
   d94a4:	2201      	movpl	r2, #1
   d94a6:	601a      	strpl	r2, [r3, #0]
   d94a8:	4b0a      	ldr	r3, [pc, #40]	; (d94d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d94aa:	681a      	ldr	r2, [r3, #0]
   d94ac:	07d2      	lsls	r2, r2, #31
   d94ae:	bf5c      	itt	pl
   d94b0:	2201      	movpl	r2, #1
   d94b2:	601a      	strpl	r2, [r3, #0]
   d94b4:	4770      	bx	lr
   d94b6:	bf00      	nop
   d94b8:	2003e7ec 	.word	0x2003e7ec
   d94bc:	2003e7e8 	.word	0x2003e7e8
   d94c0:	2003e7e4 	.word	0x2003e7e4
   d94c4:	2003e7e0 	.word	0x2003e7e0
   d94c8:	2003e7dc 	.word	0x2003e7dc
   d94cc:	2003e7d8 	.word	0x2003e7d8
   d94d0:	2003e7d4 	.word	0x2003e7d4
   d94d4:	2003e7d0 	.word	0x2003e7d0

000d94d8 <__aeabi_drsub>:
   d94d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d94dc:	e002      	b.n	d94e4 <__adddf3>
   d94de:	bf00      	nop

000d94e0 <__aeabi_dsub>:
   d94e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d94e4 <__adddf3>:
   d94e4:	b530      	push	{r4, r5, lr}
   d94e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d94ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d94ee:	ea94 0f05 	teq	r4, r5
   d94f2:	bf08      	it	eq
   d94f4:	ea90 0f02 	teqeq	r0, r2
   d94f8:	bf1f      	itttt	ne
   d94fa:	ea54 0c00 	orrsne.w	ip, r4, r0
   d94fe:	ea55 0c02 	orrsne.w	ip, r5, r2
   d9502:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d9506:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d950a:	f000 80e2 	beq.w	d96d2 <__adddf3+0x1ee>
   d950e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d9512:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d9516:	bfb8      	it	lt
   d9518:	426d      	neglt	r5, r5
   d951a:	dd0c      	ble.n	d9536 <__adddf3+0x52>
   d951c:	442c      	add	r4, r5
   d951e:	ea80 0202 	eor.w	r2, r0, r2
   d9522:	ea81 0303 	eor.w	r3, r1, r3
   d9526:	ea82 0000 	eor.w	r0, r2, r0
   d952a:	ea83 0101 	eor.w	r1, r3, r1
   d952e:	ea80 0202 	eor.w	r2, r0, r2
   d9532:	ea81 0303 	eor.w	r3, r1, r3
   d9536:	2d36      	cmp	r5, #54	; 0x36
   d9538:	bf88      	it	hi
   d953a:	bd30      	pophi	{r4, r5, pc}
   d953c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9540:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9544:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d9548:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d954c:	d002      	beq.n	d9554 <__adddf3+0x70>
   d954e:	4240      	negs	r0, r0
   d9550:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9554:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d9558:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d955c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d9560:	d002      	beq.n	d9568 <__adddf3+0x84>
   d9562:	4252      	negs	r2, r2
   d9564:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9568:	ea94 0f05 	teq	r4, r5
   d956c:	f000 80a7 	beq.w	d96be <__adddf3+0x1da>
   d9570:	f1a4 0401 	sub.w	r4, r4, #1
   d9574:	f1d5 0e20 	rsbs	lr, r5, #32
   d9578:	db0d      	blt.n	d9596 <__adddf3+0xb2>
   d957a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d957e:	fa22 f205 	lsr.w	r2, r2, r5
   d9582:	1880      	adds	r0, r0, r2
   d9584:	f141 0100 	adc.w	r1, r1, #0
   d9588:	fa03 f20e 	lsl.w	r2, r3, lr
   d958c:	1880      	adds	r0, r0, r2
   d958e:	fa43 f305 	asr.w	r3, r3, r5
   d9592:	4159      	adcs	r1, r3
   d9594:	e00e      	b.n	d95b4 <__adddf3+0xd0>
   d9596:	f1a5 0520 	sub.w	r5, r5, #32
   d959a:	f10e 0e20 	add.w	lr, lr, #32
   d959e:	2a01      	cmp	r2, #1
   d95a0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d95a4:	bf28      	it	cs
   d95a6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d95aa:	fa43 f305 	asr.w	r3, r3, r5
   d95ae:	18c0      	adds	r0, r0, r3
   d95b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d95b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d95b8:	d507      	bpl.n	d95ca <__adddf3+0xe6>
   d95ba:	f04f 0e00 	mov.w	lr, #0
   d95be:	f1dc 0c00 	rsbs	ip, ip, #0
   d95c2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d95c6:	eb6e 0101 	sbc.w	r1, lr, r1
   d95ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d95ce:	d31b      	bcc.n	d9608 <__adddf3+0x124>
   d95d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d95d4:	d30c      	bcc.n	d95f0 <__adddf3+0x10c>
   d95d6:	0849      	lsrs	r1, r1, #1
   d95d8:	ea5f 0030 	movs.w	r0, r0, rrx
   d95dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d95e0:	f104 0401 	add.w	r4, r4, #1
   d95e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d95e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d95ec:	f080 809a 	bcs.w	d9724 <__adddf3+0x240>
   d95f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d95f4:	bf08      	it	eq
   d95f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d95fa:	f150 0000 	adcs.w	r0, r0, #0
   d95fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9602:	ea41 0105 	orr.w	r1, r1, r5
   d9606:	bd30      	pop	{r4, r5, pc}
   d9608:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d960c:	4140      	adcs	r0, r0
   d960e:	eb41 0101 	adc.w	r1, r1, r1
   d9612:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9616:	f1a4 0401 	sub.w	r4, r4, #1
   d961a:	d1e9      	bne.n	d95f0 <__adddf3+0x10c>
   d961c:	f091 0f00 	teq	r1, #0
   d9620:	bf04      	itt	eq
   d9622:	4601      	moveq	r1, r0
   d9624:	2000      	moveq	r0, #0
   d9626:	fab1 f381 	clz	r3, r1
   d962a:	bf08      	it	eq
   d962c:	3320      	addeq	r3, #32
   d962e:	f1a3 030b 	sub.w	r3, r3, #11
   d9632:	f1b3 0220 	subs.w	r2, r3, #32
   d9636:	da0c      	bge.n	d9652 <__adddf3+0x16e>
   d9638:	320c      	adds	r2, #12
   d963a:	dd08      	ble.n	d964e <__adddf3+0x16a>
   d963c:	f102 0c14 	add.w	ip, r2, #20
   d9640:	f1c2 020c 	rsb	r2, r2, #12
   d9644:	fa01 f00c 	lsl.w	r0, r1, ip
   d9648:	fa21 f102 	lsr.w	r1, r1, r2
   d964c:	e00c      	b.n	d9668 <__adddf3+0x184>
   d964e:	f102 0214 	add.w	r2, r2, #20
   d9652:	bfd8      	it	le
   d9654:	f1c2 0c20 	rsble	ip, r2, #32
   d9658:	fa01 f102 	lsl.w	r1, r1, r2
   d965c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d9660:	bfdc      	itt	le
   d9662:	ea41 010c 	orrle.w	r1, r1, ip
   d9666:	4090      	lslle	r0, r2
   d9668:	1ae4      	subs	r4, r4, r3
   d966a:	bfa2      	ittt	ge
   d966c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d9670:	4329      	orrge	r1, r5
   d9672:	bd30      	popge	{r4, r5, pc}
   d9674:	ea6f 0404 	mvn.w	r4, r4
   d9678:	3c1f      	subs	r4, #31
   d967a:	da1c      	bge.n	d96b6 <__adddf3+0x1d2>
   d967c:	340c      	adds	r4, #12
   d967e:	dc0e      	bgt.n	d969e <__adddf3+0x1ba>
   d9680:	f104 0414 	add.w	r4, r4, #20
   d9684:	f1c4 0220 	rsb	r2, r4, #32
   d9688:	fa20 f004 	lsr.w	r0, r0, r4
   d968c:	fa01 f302 	lsl.w	r3, r1, r2
   d9690:	ea40 0003 	orr.w	r0, r0, r3
   d9694:	fa21 f304 	lsr.w	r3, r1, r4
   d9698:	ea45 0103 	orr.w	r1, r5, r3
   d969c:	bd30      	pop	{r4, r5, pc}
   d969e:	f1c4 040c 	rsb	r4, r4, #12
   d96a2:	f1c4 0220 	rsb	r2, r4, #32
   d96a6:	fa20 f002 	lsr.w	r0, r0, r2
   d96aa:	fa01 f304 	lsl.w	r3, r1, r4
   d96ae:	ea40 0003 	orr.w	r0, r0, r3
   d96b2:	4629      	mov	r1, r5
   d96b4:	bd30      	pop	{r4, r5, pc}
   d96b6:	fa21 f004 	lsr.w	r0, r1, r4
   d96ba:	4629      	mov	r1, r5
   d96bc:	bd30      	pop	{r4, r5, pc}
   d96be:	f094 0f00 	teq	r4, #0
   d96c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d96c6:	bf06      	itte	eq
   d96c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d96cc:	3401      	addeq	r4, #1
   d96ce:	3d01      	subne	r5, #1
   d96d0:	e74e      	b.n	d9570 <__adddf3+0x8c>
   d96d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d96d6:	bf18      	it	ne
   d96d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d96dc:	d029      	beq.n	d9732 <__adddf3+0x24e>
   d96de:	ea94 0f05 	teq	r4, r5
   d96e2:	bf08      	it	eq
   d96e4:	ea90 0f02 	teqeq	r0, r2
   d96e8:	d005      	beq.n	d96f6 <__adddf3+0x212>
   d96ea:	ea54 0c00 	orrs.w	ip, r4, r0
   d96ee:	bf04      	itt	eq
   d96f0:	4619      	moveq	r1, r3
   d96f2:	4610      	moveq	r0, r2
   d96f4:	bd30      	pop	{r4, r5, pc}
   d96f6:	ea91 0f03 	teq	r1, r3
   d96fa:	bf1e      	ittt	ne
   d96fc:	2100      	movne	r1, #0
   d96fe:	2000      	movne	r0, #0
   d9700:	bd30      	popne	{r4, r5, pc}
   d9702:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d9706:	d105      	bne.n	d9714 <__adddf3+0x230>
   d9708:	0040      	lsls	r0, r0, #1
   d970a:	4149      	adcs	r1, r1
   d970c:	bf28      	it	cs
   d970e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d9712:	bd30      	pop	{r4, r5, pc}
   d9714:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d9718:	bf3c      	itt	cc
   d971a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d971e:	bd30      	popcc	{r4, r5, pc}
   d9720:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9724:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d9728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d972c:	f04f 0000 	mov.w	r0, #0
   d9730:	bd30      	pop	{r4, r5, pc}
   d9732:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9736:	bf1a      	itte	ne
   d9738:	4619      	movne	r1, r3
   d973a:	4610      	movne	r0, r2
   d973c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d9740:	bf1c      	itt	ne
   d9742:	460b      	movne	r3, r1
   d9744:	4602      	movne	r2, r0
   d9746:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d974a:	bf06      	itte	eq
   d974c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d9750:	ea91 0f03 	teqeq	r1, r3
   d9754:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d9758:	bd30      	pop	{r4, r5, pc}
   d975a:	bf00      	nop

000d975c <__aeabi_ui2d>:
   d975c:	f090 0f00 	teq	r0, #0
   d9760:	bf04      	itt	eq
   d9762:	2100      	moveq	r1, #0
   d9764:	4770      	bxeq	lr
   d9766:	b530      	push	{r4, r5, lr}
   d9768:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d976c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9770:	f04f 0500 	mov.w	r5, #0
   d9774:	f04f 0100 	mov.w	r1, #0
   d9778:	e750      	b.n	d961c <__adddf3+0x138>
   d977a:	bf00      	nop

000d977c <__aeabi_i2d>:
   d977c:	f090 0f00 	teq	r0, #0
   d9780:	bf04      	itt	eq
   d9782:	2100      	moveq	r1, #0
   d9784:	4770      	bxeq	lr
   d9786:	b530      	push	{r4, r5, lr}
   d9788:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d978c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9790:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d9794:	bf48      	it	mi
   d9796:	4240      	negmi	r0, r0
   d9798:	f04f 0100 	mov.w	r1, #0
   d979c:	e73e      	b.n	d961c <__adddf3+0x138>
   d979e:	bf00      	nop

000d97a0 <__aeabi_f2d>:
   d97a0:	0042      	lsls	r2, r0, #1
   d97a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d97a6:	ea4f 0131 	mov.w	r1, r1, rrx
   d97aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d97ae:	bf1f      	itttt	ne
   d97b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d97b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d97b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d97bc:	4770      	bxne	lr
   d97be:	f092 0f00 	teq	r2, #0
   d97c2:	bf14      	ite	ne
   d97c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d97c8:	4770      	bxeq	lr
   d97ca:	b530      	push	{r4, r5, lr}
   d97cc:	f44f 7460 	mov.w	r4, #896	; 0x380
   d97d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d97d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d97d8:	e720      	b.n	d961c <__adddf3+0x138>
   d97da:	bf00      	nop

000d97dc <__aeabi_ul2d>:
   d97dc:	ea50 0201 	orrs.w	r2, r0, r1
   d97e0:	bf08      	it	eq
   d97e2:	4770      	bxeq	lr
   d97e4:	b530      	push	{r4, r5, lr}
   d97e6:	f04f 0500 	mov.w	r5, #0
   d97ea:	e00a      	b.n	d9802 <__aeabi_l2d+0x16>

000d97ec <__aeabi_l2d>:
   d97ec:	ea50 0201 	orrs.w	r2, r0, r1
   d97f0:	bf08      	it	eq
   d97f2:	4770      	bxeq	lr
   d97f4:	b530      	push	{r4, r5, lr}
   d97f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d97fa:	d502      	bpl.n	d9802 <__aeabi_l2d+0x16>
   d97fc:	4240      	negs	r0, r0
   d97fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9802:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9806:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d980a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d980e:	f43f aedc 	beq.w	d95ca <__adddf3+0xe6>
   d9812:	f04f 0203 	mov.w	r2, #3
   d9816:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d981a:	bf18      	it	ne
   d981c:	3203      	addne	r2, #3
   d981e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9822:	bf18      	it	ne
   d9824:	3203      	addne	r2, #3
   d9826:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d982a:	f1c2 0320 	rsb	r3, r2, #32
   d982e:	fa00 fc03 	lsl.w	ip, r0, r3
   d9832:	fa20 f002 	lsr.w	r0, r0, r2
   d9836:	fa01 fe03 	lsl.w	lr, r1, r3
   d983a:	ea40 000e 	orr.w	r0, r0, lr
   d983e:	fa21 f102 	lsr.w	r1, r1, r2
   d9842:	4414      	add	r4, r2
   d9844:	e6c1      	b.n	d95ca <__adddf3+0xe6>
   d9846:	bf00      	nop

000d9848 <__aeabi_dmul>:
   d9848:	b570      	push	{r4, r5, r6, lr}
   d984a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d984e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9852:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9856:	bf1d      	ittte	ne
   d9858:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d985c:	ea94 0f0c 	teqne	r4, ip
   d9860:	ea95 0f0c 	teqne	r5, ip
   d9864:	f000 f8de 	bleq	d9a24 <__aeabi_dmul+0x1dc>
   d9868:	442c      	add	r4, r5
   d986a:	ea81 0603 	eor.w	r6, r1, r3
   d986e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d9872:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d9876:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d987a:	bf18      	it	ne
   d987c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9884:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9888:	d038      	beq.n	d98fc <__aeabi_dmul+0xb4>
   d988a:	fba0 ce02 	umull	ip, lr, r0, r2
   d988e:	f04f 0500 	mov.w	r5, #0
   d9892:	fbe1 e502 	umlal	lr, r5, r1, r2
   d9896:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d989a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d989e:	f04f 0600 	mov.w	r6, #0
   d98a2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d98a6:	f09c 0f00 	teq	ip, #0
   d98aa:	bf18      	it	ne
   d98ac:	f04e 0e01 	orrne.w	lr, lr, #1
   d98b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d98b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d98b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d98bc:	d204      	bcs.n	d98c8 <__aeabi_dmul+0x80>
   d98be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d98c2:	416d      	adcs	r5, r5
   d98c4:	eb46 0606 	adc.w	r6, r6, r6
   d98c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d98cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d98d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d98d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d98d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d98dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d98e0:	bf88      	it	hi
   d98e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d98e6:	d81e      	bhi.n	d9926 <__aeabi_dmul+0xde>
   d98e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d98ec:	bf08      	it	eq
   d98ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d98f2:	f150 0000 	adcs.w	r0, r0, #0
   d98f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d98fa:	bd70      	pop	{r4, r5, r6, pc}
   d98fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d9900:	ea46 0101 	orr.w	r1, r6, r1
   d9904:	ea40 0002 	orr.w	r0, r0, r2
   d9908:	ea81 0103 	eor.w	r1, r1, r3
   d990c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d9910:	bfc2      	ittt	gt
   d9912:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9916:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d991a:	bd70      	popgt	{r4, r5, r6, pc}
   d991c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9920:	f04f 0e00 	mov.w	lr, #0
   d9924:	3c01      	subs	r4, #1
   d9926:	f300 80ab 	bgt.w	d9a80 <__aeabi_dmul+0x238>
   d992a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d992e:	bfde      	ittt	le
   d9930:	2000      	movle	r0, #0
   d9932:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d9936:	bd70      	pople	{r4, r5, r6, pc}
   d9938:	f1c4 0400 	rsb	r4, r4, #0
   d993c:	3c20      	subs	r4, #32
   d993e:	da35      	bge.n	d99ac <__aeabi_dmul+0x164>
   d9940:	340c      	adds	r4, #12
   d9942:	dc1b      	bgt.n	d997c <__aeabi_dmul+0x134>
   d9944:	f104 0414 	add.w	r4, r4, #20
   d9948:	f1c4 0520 	rsb	r5, r4, #32
   d994c:	fa00 f305 	lsl.w	r3, r0, r5
   d9950:	fa20 f004 	lsr.w	r0, r0, r4
   d9954:	fa01 f205 	lsl.w	r2, r1, r5
   d9958:	ea40 0002 	orr.w	r0, r0, r2
   d995c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d9960:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9964:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9968:	fa21 f604 	lsr.w	r6, r1, r4
   d996c:	eb42 0106 	adc.w	r1, r2, r6
   d9970:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9974:	bf08      	it	eq
   d9976:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d997a:	bd70      	pop	{r4, r5, r6, pc}
   d997c:	f1c4 040c 	rsb	r4, r4, #12
   d9980:	f1c4 0520 	rsb	r5, r4, #32
   d9984:	fa00 f304 	lsl.w	r3, r0, r4
   d9988:	fa20 f005 	lsr.w	r0, r0, r5
   d998c:	fa01 f204 	lsl.w	r2, r1, r4
   d9990:	ea40 0002 	orr.w	r0, r0, r2
   d9994:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9998:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d999c:	f141 0100 	adc.w	r1, r1, #0
   d99a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d99a4:	bf08      	it	eq
   d99a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d99aa:	bd70      	pop	{r4, r5, r6, pc}
   d99ac:	f1c4 0520 	rsb	r5, r4, #32
   d99b0:	fa00 f205 	lsl.w	r2, r0, r5
   d99b4:	ea4e 0e02 	orr.w	lr, lr, r2
   d99b8:	fa20 f304 	lsr.w	r3, r0, r4
   d99bc:	fa01 f205 	lsl.w	r2, r1, r5
   d99c0:	ea43 0302 	orr.w	r3, r3, r2
   d99c4:	fa21 f004 	lsr.w	r0, r1, r4
   d99c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d99cc:	fa21 f204 	lsr.w	r2, r1, r4
   d99d0:	ea20 0002 	bic.w	r0, r0, r2
   d99d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d99d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d99dc:	bf08      	it	eq
   d99de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d99e2:	bd70      	pop	{r4, r5, r6, pc}
   d99e4:	f094 0f00 	teq	r4, #0
   d99e8:	d10f      	bne.n	d9a0a <__aeabi_dmul+0x1c2>
   d99ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d99ee:	0040      	lsls	r0, r0, #1
   d99f0:	eb41 0101 	adc.w	r1, r1, r1
   d99f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d99f8:	bf08      	it	eq
   d99fa:	3c01      	subeq	r4, #1
   d99fc:	d0f7      	beq.n	d99ee <__aeabi_dmul+0x1a6>
   d99fe:	ea41 0106 	orr.w	r1, r1, r6
   d9a02:	f095 0f00 	teq	r5, #0
   d9a06:	bf18      	it	ne
   d9a08:	4770      	bxne	lr
   d9a0a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d9a0e:	0052      	lsls	r2, r2, #1
   d9a10:	eb43 0303 	adc.w	r3, r3, r3
   d9a14:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d9a18:	bf08      	it	eq
   d9a1a:	3d01      	subeq	r5, #1
   d9a1c:	d0f7      	beq.n	d9a0e <__aeabi_dmul+0x1c6>
   d9a1e:	ea43 0306 	orr.w	r3, r3, r6
   d9a22:	4770      	bx	lr
   d9a24:	ea94 0f0c 	teq	r4, ip
   d9a28:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9a2c:	bf18      	it	ne
   d9a2e:	ea95 0f0c 	teqne	r5, ip
   d9a32:	d00c      	beq.n	d9a4e <__aeabi_dmul+0x206>
   d9a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9a38:	bf18      	it	ne
   d9a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9a3e:	d1d1      	bne.n	d99e4 <__aeabi_dmul+0x19c>
   d9a40:	ea81 0103 	eor.w	r1, r1, r3
   d9a44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9a48:	f04f 0000 	mov.w	r0, #0
   d9a4c:	bd70      	pop	{r4, r5, r6, pc}
   d9a4e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9a52:	bf06      	itte	eq
   d9a54:	4610      	moveq	r0, r2
   d9a56:	4619      	moveq	r1, r3
   d9a58:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9a5c:	d019      	beq.n	d9a92 <__aeabi_dmul+0x24a>
   d9a5e:	ea94 0f0c 	teq	r4, ip
   d9a62:	d102      	bne.n	d9a6a <__aeabi_dmul+0x222>
   d9a64:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d9a68:	d113      	bne.n	d9a92 <__aeabi_dmul+0x24a>
   d9a6a:	ea95 0f0c 	teq	r5, ip
   d9a6e:	d105      	bne.n	d9a7c <__aeabi_dmul+0x234>
   d9a70:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d9a74:	bf1c      	itt	ne
   d9a76:	4610      	movne	r0, r2
   d9a78:	4619      	movne	r1, r3
   d9a7a:	d10a      	bne.n	d9a92 <__aeabi_dmul+0x24a>
   d9a7c:	ea81 0103 	eor.w	r1, r1, r3
   d9a80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9a84:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9a88:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9a8c:	f04f 0000 	mov.w	r0, #0
   d9a90:	bd70      	pop	{r4, r5, r6, pc}
   d9a92:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9a96:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d9a9a:	bd70      	pop	{r4, r5, r6, pc}

000d9a9c <__aeabi_ddiv>:
   d9a9c:	b570      	push	{r4, r5, r6, lr}
   d9a9e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9aa2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9aa6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9aaa:	bf1d      	ittte	ne
   d9aac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9ab0:	ea94 0f0c 	teqne	r4, ip
   d9ab4:	ea95 0f0c 	teqne	r5, ip
   d9ab8:	f000 f8a7 	bleq	d9c0a <__aeabi_ddiv+0x16e>
   d9abc:	eba4 0405 	sub.w	r4, r4, r5
   d9ac0:	ea81 0e03 	eor.w	lr, r1, r3
   d9ac4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9ac8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9acc:	f000 8088 	beq.w	d9be0 <__aeabi_ddiv+0x144>
   d9ad0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9ad4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d9ad8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d9adc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d9ae0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d9ae4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d9ae8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d9aec:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d9af0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d9af4:	429d      	cmp	r5, r3
   d9af6:	bf08      	it	eq
   d9af8:	4296      	cmpeq	r6, r2
   d9afa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d9afe:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d9b02:	d202      	bcs.n	d9b0a <__aeabi_ddiv+0x6e>
   d9b04:	085b      	lsrs	r3, r3, #1
   d9b06:	ea4f 0232 	mov.w	r2, r2, rrx
   d9b0a:	1ab6      	subs	r6, r6, r2
   d9b0c:	eb65 0503 	sbc.w	r5, r5, r3
   d9b10:	085b      	lsrs	r3, r3, #1
   d9b12:	ea4f 0232 	mov.w	r2, r2, rrx
   d9b16:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d9b1a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d9b1e:	ebb6 0e02 	subs.w	lr, r6, r2
   d9b22:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9b26:	bf22      	ittt	cs
   d9b28:	1ab6      	subcs	r6, r6, r2
   d9b2a:	4675      	movcs	r5, lr
   d9b2c:	ea40 000c 	orrcs.w	r0, r0, ip
   d9b30:	085b      	lsrs	r3, r3, #1
   d9b32:	ea4f 0232 	mov.w	r2, r2, rrx
   d9b36:	ebb6 0e02 	subs.w	lr, r6, r2
   d9b3a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9b3e:	bf22      	ittt	cs
   d9b40:	1ab6      	subcs	r6, r6, r2
   d9b42:	4675      	movcs	r5, lr
   d9b44:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d9b48:	085b      	lsrs	r3, r3, #1
   d9b4a:	ea4f 0232 	mov.w	r2, r2, rrx
   d9b4e:	ebb6 0e02 	subs.w	lr, r6, r2
   d9b52:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9b56:	bf22      	ittt	cs
   d9b58:	1ab6      	subcs	r6, r6, r2
   d9b5a:	4675      	movcs	r5, lr
   d9b5c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d9b60:	085b      	lsrs	r3, r3, #1
   d9b62:	ea4f 0232 	mov.w	r2, r2, rrx
   d9b66:	ebb6 0e02 	subs.w	lr, r6, r2
   d9b6a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9b6e:	bf22      	ittt	cs
   d9b70:	1ab6      	subcs	r6, r6, r2
   d9b72:	4675      	movcs	r5, lr
   d9b74:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d9b78:	ea55 0e06 	orrs.w	lr, r5, r6
   d9b7c:	d018      	beq.n	d9bb0 <__aeabi_ddiv+0x114>
   d9b7e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d9b82:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d9b86:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d9b8a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d9b8e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d9b92:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d9b96:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d9b9a:	d1c0      	bne.n	d9b1e <__aeabi_ddiv+0x82>
   d9b9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9ba0:	d10b      	bne.n	d9bba <__aeabi_ddiv+0x11e>
   d9ba2:	ea41 0100 	orr.w	r1, r1, r0
   d9ba6:	f04f 0000 	mov.w	r0, #0
   d9baa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d9bae:	e7b6      	b.n	d9b1e <__aeabi_ddiv+0x82>
   d9bb0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9bb4:	bf04      	itt	eq
   d9bb6:	4301      	orreq	r1, r0
   d9bb8:	2000      	moveq	r0, #0
   d9bba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9bbe:	bf88      	it	hi
   d9bc0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9bc4:	f63f aeaf 	bhi.w	d9926 <__aeabi_dmul+0xde>
   d9bc8:	ebb5 0c03 	subs.w	ip, r5, r3
   d9bcc:	bf04      	itt	eq
   d9bce:	ebb6 0c02 	subseq.w	ip, r6, r2
   d9bd2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9bd6:	f150 0000 	adcs.w	r0, r0, #0
   d9bda:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9bde:	bd70      	pop	{r4, r5, r6, pc}
   d9be0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9be4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d9be8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d9bec:	bfc2      	ittt	gt
   d9bee:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9bf2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9bf6:	bd70      	popgt	{r4, r5, r6, pc}
   d9bf8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9bfc:	f04f 0e00 	mov.w	lr, #0
   d9c00:	3c01      	subs	r4, #1
   d9c02:	e690      	b.n	d9926 <__aeabi_dmul+0xde>
   d9c04:	ea45 0e06 	orr.w	lr, r5, r6
   d9c08:	e68d      	b.n	d9926 <__aeabi_dmul+0xde>
   d9c0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9c0e:	ea94 0f0c 	teq	r4, ip
   d9c12:	bf08      	it	eq
   d9c14:	ea95 0f0c 	teqeq	r5, ip
   d9c18:	f43f af3b 	beq.w	d9a92 <__aeabi_dmul+0x24a>
   d9c1c:	ea94 0f0c 	teq	r4, ip
   d9c20:	d10a      	bne.n	d9c38 <__aeabi_ddiv+0x19c>
   d9c22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9c26:	f47f af34 	bne.w	d9a92 <__aeabi_dmul+0x24a>
   d9c2a:	ea95 0f0c 	teq	r5, ip
   d9c2e:	f47f af25 	bne.w	d9a7c <__aeabi_dmul+0x234>
   d9c32:	4610      	mov	r0, r2
   d9c34:	4619      	mov	r1, r3
   d9c36:	e72c      	b.n	d9a92 <__aeabi_dmul+0x24a>
   d9c38:	ea95 0f0c 	teq	r5, ip
   d9c3c:	d106      	bne.n	d9c4c <__aeabi_ddiv+0x1b0>
   d9c3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9c42:	f43f aefd 	beq.w	d9a40 <__aeabi_dmul+0x1f8>
   d9c46:	4610      	mov	r0, r2
   d9c48:	4619      	mov	r1, r3
   d9c4a:	e722      	b.n	d9a92 <__aeabi_dmul+0x24a>
   d9c4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9c50:	bf18      	it	ne
   d9c52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9c56:	f47f aec5 	bne.w	d99e4 <__aeabi_dmul+0x19c>
   d9c5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d9c5e:	f47f af0d 	bne.w	d9a7c <__aeabi_dmul+0x234>
   d9c62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d9c66:	f47f aeeb 	bne.w	d9a40 <__aeabi_dmul+0x1f8>
   d9c6a:	e712      	b.n	d9a92 <__aeabi_dmul+0x24a>

000d9c6c <__gedf2>:
   d9c6c:	f04f 3cff 	mov.w	ip, #4294967295
   d9c70:	e006      	b.n	d9c80 <__cmpdf2+0x4>
   d9c72:	bf00      	nop

000d9c74 <__ledf2>:
   d9c74:	f04f 0c01 	mov.w	ip, #1
   d9c78:	e002      	b.n	d9c80 <__cmpdf2+0x4>
   d9c7a:	bf00      	nop

000d9c7c <__cmpdf2>:
   d9c7c:	f04f 0c01 	mov.w	ip, #1
   d9c80:	f84d cd04 	str.w	ip, [sp, #-4]!
   d9c84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9c88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9c8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9c90:	bf18      	it	ne
   d9c92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d9c96:	d01b      	beq.n	d9cd0 <__cmpdf2+0x54>
   d9c98:	b001      	add	sp, #4
   d9c9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d9c9e:	bf0c      	ite	eq
   d9ca0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d9ca4:	ea91 0f03 	teqne	r1, r3
   d9ca8:	bf02      	ittt	eq
   d9caa:	ea90 0f02 	teqeq	r0, r2
   d9cae:	2000      	moveq	r0, #0
   d9cb0:	4770      	bxeq	lr
   d9cb2:	f110 0f00 	cmn.w	r0, #0
   d9cb6:	ea91 0f03 	teq	r1, r3
   d9cba:	bf58      	it	pl
   d9cbc:	4299      	cmppl	r1, r3
   d9cbe:	bf08      	it	eq
   d9cc0:	4290      	cmpeq	r0, r2
   d9cc2:	bf2c      	ite	cs
   d9cc4:	17d8      	asrcs	r0, r3, #31
   d9cc6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d9cca:	f040 0001 	orr.w	r0, r0, #1
   d9cce:	4770      	bx	lr
   d9cd0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9cd4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9cd8:	d102      	bne.n	d9ce0 <__cmpdf2+0x64>
   d9cda:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9cde:	d107      	bne.n	d9cf0 <__cmpdf2+0x74>
   d9ce0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9ce4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9ce8:	d1d6      	bne.n	d9c98 <__cmpdf2+0x1c>
   d9cea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9cee:	d0d3      	beq.n	d9c98 <__cmpdf2+0x1c>
   d9cf0:	f85d 0b04 	ldr.w	r0, [sp], #4
   d9cf4:	4770      	bx	lr
   d9cf6:	bf00      	nop

000d9cf8 <__aeabi_cdrcmple>:
   d9cf8:	4684      	mov	ip, r0
   d9cfa:	4610      	mov	r0, r2
   d9cfc:	4662      	mov	r2, ip
   d9cfe:	468c      	mov	ip, r1
   d9d00:	4619      	mov	r1, r3
   d9d02:	4663      	mov	r3, ip
   d9d04:	e000      	b.n	d9d08 <__aeabi_cdcmpeq>
   d9d06:	bf00      	nop

000d9d08 <__aeabi_cdcmpeq>:
   d9d08:	b501      	push	{r0, lr}
   d9d0a:	f7ff ffb7 	bl	d9c7c <__cmpdf2>
   d9d0e:	2800      	cmp	r0, #0
   d9d10:	bf48      	it	mi
   d9d12:	f110 0f00 	cmnmi.w	r0, #0
   d9d16:	bd01      	pop	{r0, pc}

000d9d18 <__aeabi_dcmpeq>:
   d9d18:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9d1c:	f7ff fff4 	bl	d9d08 <__aeabi_cdcmpeq>
   d9d20:	bf0c      	ite	eq
   d9d22:	2001      	moveq	r0, #1
   d9d24:	2000      	movne	r0, #0
   d9d26:	f85d fb08 	ldr.w	pc, [sp], #8
   d9d2a:	bf00      	nop

000d9d2c <__aeabi_dcmplt>:
   d9d2c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9d30:	f7ff ffea 	bl	d9d08 <__aeabi_cdcmpeq>
   d9d34:	bf34      	ite	cc
   d9d36:	2001      	movcc	r0, #1
   d9d38:	2000      	movcs	r0, #0
   d9d3a:	f85d fb08 	ldr.w	pc, [sp], #8
   d9d3e:	bf00      	nop

000d9d40 <__aeabi_dcmple>:
   d9d40:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9d44:	f7ff ffe0 	bl	d9d08 <__aeabi_cdcmpeq>
   d9d48:	bf94      	ite	ls
   d9d4a:	2001      	movls	r0, #1
   d9d4c:	2000      	movhi	r0, #0
   d9d4e:	f85d fb08 	ldr.w	pc, [sp], #8
   d9d52:	bf00      	nop

000d9d54 <__aeabi_dcmpge>:
   d9d54:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9d58:	f7ff ffce 	bl	d9cf8 <__aeabi_cdrcmple>
   d9d5c:	bf94      	ite	ls
   d9d5e:	2001      	movls	r0, #1
   d9d60:	2000      	movhi	r0, #0
   d9d62:	f85d fb08 	ldr.w	pc, [sp], #8
   d9d66:	bf00      	nop

000d9d68 <__aeabi_dcmpgt>:
   d9d68:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9d6c:	f7ff ffc4 	bl	d9cf8 <__aeabi_cdrcmple>
   d9d70:	bf34      	ite	cc
   d9d72:	2001      	movcc	r0, #1
   d9d74:	2000      	movcs	r0, #0
   d9d76:	f85d fb08 	ldr.w	pc, [sp], #8
   d9d7a:	bf00      	nop

000d9d7c <__aeabi_dcmpun>:
   d9d7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9d80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9d84:	d102      	bne.n	d9d8c <__aeabi_dcmpun+0x10>
   d9d86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9d8a:	d10a      	bne.n	d9da2 <__aeabi_dcmpun+0x26>
   d9d8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9d90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9d94:	d102      	bne.n	d9d9c <__aeabi_dcmpun+0x20>
   d9d96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9d9a:	d102      	bne.n	d9da2 <__aeabi_dcmpun+0x26>
   d9d9c:	f04f 0000 	mov.w	r0, #0
   d9da0:	4770      	bx	lr
   d9da2:	f04f 0001 	mov.w	r0, #1
   d9da6:	4770      	bx	lr

000d9da8 <__aeabi_d2iz>:
   d9da8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9dac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9db0:	d215      	bcs.n	d9dde <__aeabi_d2iz+0x36>
   d9db2:	d511      	bpl.n	d9dd8 <__aeabi_d2iz+0x30>
   d9db4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9db8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9dbc:	d912      	bls.n	d9de4 <__aeabi_d2iz+0x3c>
   d9dbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9dc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9dc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9dca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9dce:	fa23 f002 	lsr.w	r0, r3, r2
   d9dd2:	bf18      	it	ne
   d9dd4:	4240      	negne	r0, r0
   d9dd6:	4770      	bx	lr
   d9dd8:	f04f 0000 	mov.w	r0, #0
   d9ddc:	4770      	bx	lr
   d9dde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9de2:	d105      	bne.n	d9df0 <__aeabi_d2iz+0x48>
   d9de4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d9de8:	bf08      	it	eq
   d9dea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9dee:	4770      	bx	lr
   d9df0:	f04f 0000 	mov.w	r0, #0
   d9df4:	4770      	bx	lr
   d9df6:	bf00      	nop

000d9df8 <__aeabi_d2uiz>:
   d9df8:	004a      	lsls	r2, r1, #1
   d9dfa:	d211      	bcs.n	d9e20 <__aeabi_d2uiz+0x28>
   d9dfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9e00:	d211      	bcs.n	d9e26 <__aeabi_d2uiz+0x2e>
   d9e02:	d50d      	bpl.n	d9e20 <__aeabi_d2uiz+0x28>
   d9e04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9e08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9e0c:	d40e      	bmi.n	d9e2c <__aeabi_d2uiz+0x34>
   d9e0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9e12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9e16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9e1a:	fa23 f002 	lsr.w	r0, r3, r2
   d9e1e:	4770      	bx	lr
   d9e20:	f04f 0000 	mov.w	r0, #0
   d9e24:	4770      	bx	lr
   d9e26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9e2a:	d102      	bne.n	d9e32 <__aeabi_d2uiz+0x3a>
   d9e2c:	f04f 30ff 	mov.w	r0, #4294967295
   d9e30:	4770      	bx	lr
   d9e32:	f04f 0000 	mov.w	r0, #0
   d9e36:	4770      	bx	lr

000d9e38 <__aeabi_d2f>:
   d9e38:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9e3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d9e40:	bf24      	itt	cs
   d9e42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d9e46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d9e4a:	d90d      	bls.n	d9e68 <__aeabi_d2f+0x30>
   d9e4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9e50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d9e54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d9e58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d9e5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9e60:	bf08      	it	eq
   d9e62:	f020 0001 	biceq.w	r0, r0, #1
   d9e66:	4770      	bx	lr
   d9e68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d9e6c:	d121      	bne.n	d9eb2 <__aeabi_d2f+0x7a>
   d9e6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d9e72:	bfbc      	itt	lt
   d9e74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d9e78:	4770      	bxlt	lr
   d9e7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9e7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d9e82:	f1c2 0218 	rsb	r2, r2, #24
   d9e86:	f1c2 0c20 	rsb	ip, r2, #32
   d9e8a:	fa10 f30c 	lsls.w	r3, r0, ip
   d9e8e:	fa20 f002 	lsr.w	r0, r0, r2
   d9e92:	bf18      	it	ne
   d9e94:	f040 0001 	orrne.w	r0, r0, #1
   d9e98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9e9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9ea0:	fa03 fc0c 	lsl.w	ip, r3, ip
   d9ea4:	ea40 000c 	orr.w	r0, r0, ip
   d9ea8:	fa23 f302 	lsr.w	r3, r3, r2
   d9eac:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9eb0:	e7cc      	b.n	d9e4c <__aeabi_d2f+0x14>
   d9eb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d9eb6:	d107      	bne.n	d9ec8 <__aeabi_d2f+0x90>
   d9eb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d9ebc:	bf1e      	ittt	ne
   d9ebe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d9ec2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d9ec6:	4770      	bxne	lr
   d9ec8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d9ecc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9ed0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9ed4:	4770      	bx	lr
   d9ed6:	bf00      	nop

000d9ed8 <__cxa_atexit>:
   d9ed8:	b510      	push	{r4, lr}
   d9eda:	4c05      	ldr	r4, [pc, #20]	; (d9ef0 <__cxa_atexit+0x18>)
   d9edc:	4613      	mov	r3, r2
   d9ede:	b12c      	cbz	r4, d9eec <__cxa_atexit+0x14>
   d9ee0:	460a      	mov	r2, r1
   d9ee2:	4601      	mov	r1, r0
   d9ee4:	2002      	movs	r0, #2
   d9ee6:	f3af 8000 	nop.w
   d9eea:	bd10      	pop	{r4, pc}
   d9eec:	4620      	mov	r0, r4
   d9eee:	bd10      	pop	{r4, pc}
   d9ef0:	00000000 	.word	0x00000000

000d9ef4 <memcmp>:
   d9ef4:	b510      	push	{r4, lr}
   d9ef6:	3901      	subs	r1, #1
   d9ef8:	4402      	add	r2, r0
   d9efa:	4290      	cmp	r0, r2
   d9efc:	d007      	beq.n	d9f0e <memcmp+0x1a>
   d9efe:	f810 3b01 	ldrb.w	r3, [r0], #1
   d9f02:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d9f06:	42a3      	cmp	r3, r4
   d9f08:	d0f7      	beq.n	d9efa <memcmp+0x6>
   d9f0a:	1b18      	subs	r0, r3, r4
   d9f0c:	bd10      	pop	{r4, pc}
   d9f0e:	2000      	movs	r0, #0
   d9f10:	bd10      	pop	{r4, pc}

000d9f12 <memcpy>:
   d9f12:	b510      	push	{r4, lr}
   d9f14:	1e43      	subs	r3, r0, #1
   d9f16:	440a      	add	r2, r1
   d9f18:	4291      	cmp	r1, r2
   d9f1a:	d004      	beq.n	d9f26 <memcpy+0x14>
   d9f1c:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9f20:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9f24:	e7f8      	b.n	d9f18 <memcpy+0x6>
   d9f26:	bd10      	pop	{r4, pc}

000d9f28 <memset>:
   d9f28:	4402      	add	r2, r0
   d9f2a:	4603      	mov	r3, r0
   d9f2c:	4293      	cmp	r3, r2
   d9f2e:	d002      	beq.n	d9f36 <memset+0xe>
   d9f30:	f803 1b01 	strb.w	r1, [r3], #1
   d9f34:	e7fa      	b.n	d9f2c <memset+0x4>
   d9f36:	4770      	bx	lr

000d9f38 <srand>:
   d9f38:	b538      	push	{r3, r4, r5, lr}
   d9f3a:	4b12      	ldr	r3, [pc, #72]	; (d9f84 <srand+0x4c>)
   d9f3c:	681c      	ldr	r4, [r3, #0]
   d9f3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9f40:	4605      	mov	r5, r0
   d9f42:	b9d3      	cbnz	r3, d9f7a <srand+0x42>
   d9f44:	2018      	movs	r0, #24
   d9f46:	f7fd fdb3 	bl	d7ab0 <malloc>
   d9f4a:	f243 330e 	movw	r3, #13070	; 0x330e
   d9f4e:	63a0      	str	r0, [r4, #56]	; 0x38
   d9f50:	8003      	strh	r3, [r0, #0]
   d9f52:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d9f56:	8043      	strh	r3, [r0, #2]
   d9f58:	f241 2334 	movw	r3, #4660	; 0x1234
   d9f5c:	8083      	strh	r3, [r0, #4]
   d9f5e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d9f62:	80c3      	strh	r3, [r0, #6]
   d9f64:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9f68:	8103      	strh	r3, [r0, #8]
   d9f6a:	2305      	movs	r3, #5
   d9f6c:	8143      	strh	r3, [r0, #10]
   d9f6e:	230b      	movs	r3, #11
   d9f70:	8183      	strh	r3, [r0, #12]
   d9f72:	2201      	movs	r2, #1
   d9f74:	2300      	movs	r3, #0
   d9f76:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9f7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9f7c:	2200      	movs	r2, #0
   d9f7e:	611d      	str	r5, [r3, #16]
   d9f80:	615a      	str	r2, [r3, #20]
   d9f82:	bd38      	pop	{r3, r4, r5, pc}
   d9f84:	2003dd7c 	.word	0x2003dd7c

000d9f88 <rand>:
   d9f88:	4b19      	ldr	r3, [pc, #100]	; (d9ff0 <rand+0x68>)
   d9f8a:	b510      	push	{r4, lr}
   d9f8c:	681c      	ldr	r4, [r3, #0]
   d9f8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9f90:	b9d3      	cbnz	r3, d9fc8 <rand+0x40>
   d9f92:	2018      	movs	r0, #24
   d9f94:	f7fd fd8c 	bl	d7ab0 <malloc>
   d9f98:	f243 330e 	movw	r3, #13070	; 0x330e
   d9f9c:	63a0      	str	r0, [r4, #56]	; 0x38
   d9f9e:	8003      	strh	r3, [r0, #0]
   d9fa0:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d9fa4:	8043      	strh	r3, [r0, #2]
   d9fa6:	f241 2334 	movw	r3, #4660	; 0x1234
   d9faa:	8083      	strh	r3, [r0, #4]
   d9fac:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d9fb0:	80c3      	strh	r3, [r0, #6]
   d9fb2:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9fb6:	8103      	strh	r3, [r0, #8]
   d9fb8:	2305      	movs	r3, #5
   d9fba:	8143      	strh	r3, [r0, #10]
   d9fbc:	230b      	movs	r3, #11
   d9fbe:	8183      	strh	r3, [r0, #12]
   d9fc0:	2201      	movs	r2, #1
   d9fc2:	2300      	movs	r3, #0
   d9fc4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9fc8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d9fca:	4c0a      	ldr	r4, [pc, #40]	; (d9ff4 <rand+0x6c>)
   d9fcc:	690b      	ldr	r3, [r1, #16]
   d9fce:	6948      	ldr	r0, [r1, #20]
   d9fd0:	4a09      	ldr	r2, [pc, #36]	; (d9ff8 <rand+0x70>)
   d9fd2:	435c      	muls	r4, r3
   d9fd4:	fb02 4000 	mla	r0, r2, r0, r4
   d9fd8:	fba3 2302 	umull	r2, r3, r3, r2
   d9fdc:	3201      	adds	r2, #1
   d9fde:	4403      	add	r3, r0
   d9fe0:	f143 0300 	adc.w	r3, r3, #0
   d9fe4:	e9c1 2304 	strd	r2, r3, [r1, #16]
   d9fe8:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d9fec:	bd10      	pop	{r4, pc}
   d9fee:	bf00      	nop
   d9ff0:	2003dd7c 	.word	0x2003dd7c
   d9ff4:	5851f42d 	.word	0x5851f42d
   d9ff8:	4c957f2d 	.word	0x4c957f2d

000d9ffc <strcpy>:
   d9ffc:	4603      	mov	r3, r0
   d9ffe:	f811 2b01 	ldrb.w	r2, [r1], #1
   da002:	f803 2b01 	strb.w	r2, [r3], #1
   da006:	2a00      	cmp	r2, #0
   da008:	d1f9      	bne.n	d9ffe <strcpy+0x2>
   da00a:	4770      	bx	lr

000da00c <strlen>:
   da00c:	4603      	mov	r3, r0
   da00e:	f813 2b01 	ldrb.w	r2, [r3], #1
   da012:	2a00      	cmp	r2, #0
   da014:	d1fb      	bne.n	da00e <strlen+0x2>
   da016:	1a18      	subs	r0, r3, r0
   da018:	3801      	subs	r0, #1
   da01a:	4770      	bx	lr

000da01c <dynalib_user>:
   da01c:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   da02c:	0000 0000                                   ....

000da030 <_ZL17test_button_press>:
   da030:	2e34 5420 7365 2074 7249 6972 6167 6974     4. Test Irrigati
   da040:	6e6f 4220 7475 6f74 0a6e 4900                    on Button..

000da04b <_ZL11test_header>:
   da04b:	4749 2048 6853 6569 646c 5420 7365 0074     IGH Shield Test.

000da05b <_ZL12test_success>:
   da05b:	4f20 004b                                    OK.

000da05f <_ZL16test_rfm69_radio>:
   da05f:	2e37 5420 7365 2074 6152 6964 0a6f 2000          7. Test Radio..

000da06e <_ZL9test_fail>:
   da06e:	4520 5252 524f 3f00                               ERROR.

000da075 <_ZL16test_cmd_options>:
   da075:	2e3f 4f20 7470 6f69 736e 000a               ?. Options..

000da081 <_ZL14test_flash_cmd>:
   da081:	2e33 5420 7365 2074 4545 5250 4d4f 000a     3. Test EEPROM..
   da091:	440a 7665 6369 2065 4449 203a 0a00 6554     .Device ID: ..Te
   da0a1:	7473 6e69 2067 4545 5250 4d4f 003a 500a     sting EEPROM:..P
   da0b1:	6572 7373 6220 7475 6f74 206e 6f66 3a72     ress button for:
   da0c1:	0020 5320 6365 6e6f 7364 0a00 6554 7473      . Seconds..Test
   da0d1:	6e69 2067 7542 7474 6e6f 003a 540a 7365     ing Button:..Tes
   da0e1:	6974 676e 5620 6c61 6576 003a 540a 7365     ting Valve:..Tes
   da0f1:	6974 676e 5320 2044 6143 6472 003a 540a     ting SD Card:..T
   da101:	7365 6974 676e 5220 6461 6f69 003a 550a     esting Radio:..U
   da111:	6b6e 6f6e 6e77 6320 6d6f 616d 646e 3200          nknown command.

000da120 <_ZL15test_device_api>:
   da120:	2e32 5420 7365 2074 6544 6976 6563 4120     2. Test Device A
   da130:	4950 000a                                   PI..

000da134 <_ZL14test_device_id>:
   da134:	2e31 4720 7465 4420 7665 6369 2065 4449     1. Get Device ID
   da144:	000a                                        ..

000da146 <_ZL12test_padding>:
   da146:	2a0a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     .***************
   da156:	000a                                        ..

000da158 <_ZL16test_valve_state>:
   da158:	2e35 5420 7365 2074 6156 766c 2065 6f43     5. Test Valve Co
   da168:	746e 6f72 0a6c 3600                              ntrol..

000da16f <_ZL12test_sd_card>:
   da16f:	2e36 5420 7365 2074 4453 4320 7261 0a64     6. Test SD Card.
   da17f:	e000 ce0f 9a68 4775 e705 0e9a 7437 7365     ....h.uG....7tes
   da18f:	2e74 7262 6b6f 7265 632e 6d6f 0000               t.broker.com.

000da19c <_ZTV5Timer>:
	...
   da1a4:	48e1 000d 4929 000d 4869 000d               .H..)I..iH..

000da1b0 <_ZTVN8particle13__SPISettingsE>:
	...
   da1b8:	4a99 000d                                   .J..

000da1bc <_ZTV4File>:
	...
   da1c4:	4a97 000d 4b2f 000d 4b09 000d 4afd 000d     .J../K...K...J..
   da1d4:	4a79 000d 4b73 000d 4af7 000d 4af1 000d     yJ..sK...J...J..

000da1e4 <_ZTV6SdFile>:
	...
   da1ec:	4a95 000d 4b21 000d 4b3d 000d 4b03 000d     .J..!K..=K...K..
   da1fc:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   da20c:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   da21c:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   da22c:	676e 2073 7325 6c25 2075 7325 4d20 444f     ngs %s%lu %s MOD
   da23c:	2545 3e64 2500 3230 2558 3230 2558 3230     E%d>.%02X%02X%02
   da24c:	2558 3230 2e58 4f4c 0047 002f 550a 696e     X%02X.LOG./..Uni
   da25c:	2078 6954 656d 203a 2020 2020 2020 0020     x Time:        .
   da26c:	6c63 756f 2064 7473 7461 7375 203a 2020     cloud status:   
   da27c:	2020 6e00 7465 6f77 6b72 7320 6174 7574       .network statu
   da28c:	3a73 2020 0020 6973 6e67 6c61 7320 7274     s:   .signal str
   da29c:	6e65 7467 3a68 2020 7300 6769 616e 206c     ength:  .signal 
   da2ac:	7571 6c61 7469 3a79 2020 0020 6142 7474     quality:   .Batt
   da2bc:	7265 2079 6f56 746c 6761 3a65 2020 4200     ery Voltage:  .B
   da2cc:	7461 6574 7972 5320 434f 203a 2020 2020     attery SOC:     
   da2dc:	0020 4749 2d48 4652 364d 4839 5743 4b2d      .IGH-RFM69HCW-K
   da2ec:	5945 3c00 4554 5453 003e 543c 5345 3a54     EY.<TEST>.<TEST:
   da2fc:	4b4f 003e                                   OK>.

000da300 <_ZTV5RFM69>:
	...
   da308:	7109 000d                                   .q..

000da30c <_ZTVN5spark13EthernetClassE>:
	...
   da314:	7b5f 000d 7b55 000d 7b4b 000d 7b41 000d     _{..U{..K{..A{..
   da324:	7b35 000d 7b29 000d 7b1d 000d 7b15 000d     5{..){...{...{..
   da334:	7b0b 000d 7b01 000d 8f15 000d               .{...{......

000da340 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   da340:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
   da350:	002e 6e69 0066 6162 6475 5300 7265 6169     ..inf.baud.Seria
   da360:	006c 6553 6972 6c61 0031 7974 6570 7000     l.Serial1.type.p
   da370:	7261 6d61 6300 646d 6900 0064 6e68 0064     aram.cmd.id.hnd.
   da380:	7473 6d72 6600 6c69 0074 766c 006c 6461     strm.filt.lvl.ad
   da390:	4864 6e61 6c64 7265 7200 6d65 766f 4865     dHandler.removeH
   da3a0:	6e61 6c64 7265 6500 756e 486d 6e61 6c64     andler.enumHandl
   da3b0:	7265 0073 534a 4e4f 7453 6572 6d61 6f4c     ers.JSONStreamLo
   da3c0:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
   da3d0:	7530 0020 205d 2500 0064 202c 2800 3a29     0u .] .%d., .():
   da3e0:	0020 5b20 6300 646f 2065 203d 2500 0069      . [.code = .%i.
   da3f0:	6564 6174 6c69 2073 203d 0d00 000a 6e6c     details = ....ln
   da400:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   da410:	6f6e 656e 7400 6172 6563 6900 666e 006f     none.trace.info.
   da420:	6177 6e72 6500 7272 726f 7000 6e61 6369     warn.error.panic
   da430:	6100 6c6c 5a00 2500 302b 6433 253a 3230     .all.Z.%+03d:%02
   da440:	0075 5925 252d 2d6d 6425 2554 3a48 4d25     u.%Y-%m-%dT%H:%M
   da450:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000da460 <_ZTV14CellularSignal>:
	...
   da468:	4f81 000d 4f83 000d 8405 000d 8495 000d     .O...O..........
   da478:	8409 000d 8461 000d 8435 000d 851f 000d     ....a...5.......
   da488:	fffc ffff 0000 0000 8549 000d               ........I...

000da494 <_ZTV9IPAddress>:
	...
   da49c:	879d 000d 878d 000d 878f 000d               ............

000da4a8 <_ZTV9USBSerial>:
	...
   da4b0:	8875 000d 88c5 000d 88d3 000d 8079 000d     u...........y...
   da4c0:	88b1 000d 8877 000d 888d 000d 88bf 000d     ....w...........
   da4d0:	88a3 000d 8871 000d                         ....q...

000da4d8 <_ZTVN5spark13CellularClassE>:
	...
   da4e0:	8a3b 000d 8a31 000d 8a27 000d 89dd 000d     ;...1...'.......
   da4f0:	8a1b 000d 8a0f 000d 8a03 000d 89fb 000d     ................
   da500:	89f1 000d 89e7 000d 8f15 000d               ............

000da50c <_ZTV11USARTSerial>:
	...
   da514:	8ae9 000d 8b39 000d 8b47 000d 8079 000d     ....9...G...y...
   da524:	8afd 000d 8b1f 000d 8b0b 000d 8b33 000d     ............3...
   da534:	8aeb 000d 8aef 000d                         ........

000da53c <_ZTV7TwoWire>:
	...
   da544:	8bed 000d 8c37 000d 8c0f 000d 8bef 000d     ....7...........
   da554:	8c17 000d 8c1f 000d 8c27 000d 8c2f 000d     ........'.../...

000da564 <_ZTVN5spark9MeshClassE>:
	...
   da56c:	8d8f 000d 8d85 000d 8d7b 000d 8d71 000d     ........{...q...
   da57c:	8d65 000d 8d59 000d 8d4d 000d 8d45 000d     e...Y...M...E...
   da58c:	8d3b 000d 8d31 000d 8f15 000d               ;...1.......

000da598 <_ZTVN5spark12NetworkClassE>:
	...
   da5a0:	8ead 000d 8eb7 000d 8ec1 000d 8ecb 000d     ................
   da5b0:	8ed5 000d 8ee1 000d 8eed 000d 8ef9 000d     ................
   da5c0:	8f01 000d 8f0b 000d 8f15 000d               ............

000da5cc <_ZSt7nothrow>:
   da5cc:	0000 0000                                   ....

000da5d0 <__sf_fake_stdin>:
	...

000da5f0 <__sf_fake_stdout>:
	...

000da610 <__sf_fake_stderr>:
	...
   da630:	0043                                        C.

000da632 <link_const_variable_data_end>:
	...

000da634 <link_constructors_location>:
   da634:	000d40fd 	.word	0x000d40fd
   da638:	000d45d5 	.word	0x000d45d5
   da63c:	000d4849 	.word	0x000d4849
   da640:	000d49e9 	.word	0x000d49e9
   da644:	000d4ead 	.word	0x000d4ead
   da648:	000d5155 	.word	0x000d5155
   da64c:	000d53a5 	.word	0x000d53a5
   da650:	000d53d9 	.word	0x000d53d9
   da654:	000d53dd 	.word	0x000d53dd
   da658:	000d53e1 	.word	0x000d53e1
   da65c:	000d5afd 	.word	0x000d5afd
   da660:	000d5b01 	.word	0x000d5b01
   da664:	000d5b05 	.word	0x000d5b05
   da668:	000d5b37 	.word	0x000d5b37
   da66c:	000d62fd 	.word	0x000d62fd
   da670:	000d6321 	.word	0x000d6321
   da674:	000d6325 	.word	0x000d6325
   da678:	000d6649 	.word	0x000d6649
   da67c:	000d664d 	.word	0x000d664d
   da680:	000d6651 	.word	0x000d6651
   da684:	000d6b8b 	.word	0x000d6b8b
   da688:	000d6b8f 	.word	0x000d6b8f
   da68c:	000d6b93 	.word	0x000d6b93
   da690:	000d6c39 	.word	0x000d6c39
   da694:	000d74a1 	.word	0x000d74a1
   da698:	000d74a5 	.word	0x000d74a5
   da69c:	000d7b69 	.word	0x000d7b69
   da6a0:	000d7e19 	.word	0x000d7e19
   da6a4:	000d8051 	.word	0x000d8051
   da6a8:	000d8345 	.word	0x000d8345
   da6ac:	000d83c1 	.word	0x000d83c1
   da6b0:	000d83e9 	.word	0x000d83e9
   da6b4:	000d8ab9 	.word	0x000d8ab9
   da6b8:	000d8e5d 	.word	0x000d8e5d
   da6bc:	000d8fe1 	.word	0x000d8fe1
   da6c0:	000d9249 	.word	0x000d9249
   da6c4:	000d92cd 	.word	0x000d92cd
   da6c8:	000d9391 	.word	0x000d9391
   da6cc:	000d9455 	.word	0x000d9455
