
d:/git/igh/igh_shield/target/1.5.2/boron/igh_shield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000060b4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000da0d0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000f0  2003da5c  000da0d4  0001da5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000ca4  2003db4c  2003db4c  0002db4c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000da1c4  000da1c4  0002a1c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000da1ec  000da1ec  0002a1ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001d3460  00000000  00000000  0002a1f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00027c2c  00000000  00000000  001fd650  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000324e7  00000000  00000000  0022527c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003938  00000000  00000000  00257763  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006a08  00000000  00000000  0025b09b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0005eb32  00000000  00000000  00261aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0007002a  00000000  00000000  002c05d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011c249  00000000  00000000  003305ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00010678  00000000  00000000  0044c848  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f005 fc58 	bl	d98e2 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f005 fc5d 	bl	d98f8 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003da5c 	.word	0x2003da5c
   d4048:	000da0d4 	.word	0x000da0d4
   d404c:	2003db4c 	.word	0x2003db4c
   d4050:	2003db4c 	.word	0x2003db4c
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f003 fea1 	bl	d7da0 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000da0d0 	.word	0x000da0d0
   d4080:	000da02c 	.word	0x000da02c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 baa4 	b.w	d45d0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 faa3 	bl	d45d4 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f003 be47 	b.w	d7d24 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f003 b9d7 	b.w	d7448 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f003 b9d5 	b.w	d7448 <malloc>

000d409e <_ZdlPv>:
   d409e:	f003 b9db 	b.w	d7458 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f003 b9d9 	b.w	d7458 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <igh_settings_process_settings_tuples>:
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));

} 

uint8_t igh_settings_process_settings_tuples( uint8_t * settings, uint8_t byte_tracker, uint8_t end_index )
{
   d40b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            case SUBID_WATER_DISPENSED_PERIOD_HIGH:
                if(LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH == current_tuple_length)
                {
                    uint8_t new_water_dispensed_period_high[LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH]; 
                    memcpy(new_water_dispensed_period_high, &settings[current_data_index], LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH);
                    igh_current_threshold_settings.water_dispensed_period_high = GET32(new_water_dispensed_period_high);
   d40bc:	4fa8      	ldr	r7, [pc, #672]	; (d4360 <igh_settings_process_settings_tuples+0x2a8>)
            case SUBID_MQTT_BROKER_PORT:
                if(LENGTH_SUBID_MQTT_PORT == current_tuple_length)
                {
                    uint8_t new_mqtt_port[LENGTH_SUBID_MQTT_PORT]; 
                    memcpy(new_mqtt_port, &settings[current_data_index], LENGTH_SUBID_MQTT_PORT);
                    igh_current_system_settings.broker_port = GET16(new_mqtt_port);
   d40be:	f8df 82b0 	ldr.w	r8, [pc, #688]	; d4370 <igh_settings_process_settings_tuples+0x2b8>
                    mqtt_set_broker = 1;
   d40c2:	f8df 92b0 	ldr.w	r9, [pc, #688]	; d4374 <igh_settings_process_settings_tuples+0x2bc>
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));

} 

uint8_t igh_settings_process_settings_tuples( uint8_t * settings, uint8_t byte_tracker, uint8_t end_index )
{
   d40c6:	4605      	mov	r5, r0
   d40c8:	468b      	mov	fp, r1
   d40ca:	4692      	mov	sl, r2
    //cycle through tuples to get the settings data
    uint8_t current_tuple_id;
    uint8_t current_tuple_length;
    uint8_t current_data_index;

    while(byte_tracker < end_index)
   d40cc:	45d3      	cmp	fp, sl
   d40ce:	f080 8191 	bcs.w	d43f4 <igh_settings_process_settings_tuples+0x33c>
    {
        // extract tuples
        current_tuple_id = settings[byte_tracker];
        // extract the length
        current_tuple_length = settings[byte_tracker + 1]; // should always follow
   d40d2:	eb05 030b 	add.w	r3, r5, fp
        // extract the tuple data based on tuple id
        current_data_index = byte_tracker + 2;
   d40d6:	f10b 0402 	add.w	r4, fp, #2
    while(byte_tracker < end_index)
    {
        // extract tuples
        current_tuple_id = settings[byte_tracker];
        // extract the length
        current_tuple_length = settings[byte_tracker + 1]; // should always follow
   d40da:	785e      	ldrb	r6, [r3, #1]
        // extract the tuple data based on tuple id
        current_data_index = byte_tracker + 2;

        switch(current_tuple_id)
   d40dc:	f815 300b 	ldrb.w	r3, [r5, fp]
   d40e0:	3b01      	subs	r3, #1
        // extract tuples
        current_tuple_id = settings[byte_tracker];
        // extract the length
        current_tuple_length = settings[byte_tracker + 1]; // should always follow
        // extract the tuple data based on tuple id
        current_data_index = byte_tracker + 2;
   d40e2:	b2e4      	uxtb	r4, r4

        switch(current_tuple_id)
   d40e4:	2b39      	cmp	r3, #57	; 0x39
   d40e6:	f200 817f 	bhi.w	d43e8 <igh_settings_process_settings_tuples+0x330>
   d40ea:	e8df f013 	tbh	[pc, r3, lsl #1]
   d40ee:	003a      	.short	0x003a
   d40f0:	00630052 	.word	0x00630052
   d40f4:	00740044 	.word	0x00740044
   d40f8:	017d0086 	.word	0x017d0086
   d40fc:	017d017d 	.word	0x017d017d
   d4100:	017d017d 	.word	0x017d017d
   d4104:	017d017d 	.word	0x017d017d
   d4108:	017d017d 	.word	0x017d017d
   d410c:	00a80094 	.word	0x00a80094
   d4110:	00d000bc 	.word	0x00d000bc
   d4114:	00f800e4 	.word	0x00f800e4
   d4118:	011e0115 	.word	0x011e0115
   d411c:	014e0130 	.word	0x014e0130
   d4120:	017d0160 	.word	0x017d0160
   d4124:	017d017d 	.word	0x017d017d
   d4128:	017d017d 	.word	0x017d017d
   d412c:	017d017d 	.word	0x017d017d
   d4130:	017d017d 	.word	0x017d017d
   d4134:	017d017d 	.word	0x017d017d
   d4138:	017d017d 	.word	0x017d017d
   d413c:	017d017d 	.word	0x017d017d
   d4140:	017d017d 	.word	0x017d017d
   d4144:	017d017d 	.word	0x017d017d
   d4148:	017d017d 	.word	0x017d017d
   d414c:	00b2009e 	.word	0x00b2009e
   d4150:	00da00c6 	.word	0x00da00c6
   d4154:	010200ee 	.word	0x010200ee
   d4158:	0127010c 	.word	0x0127010c
   d415c:	01570145 	.word	0x01570145
   d4160:	016f      	.short	0x016f
        {
            case SUBID_OPSTATE:
                if(LENGTH_SUBID_OPSTATE == current_tuple_length)
   d4162:	2e01      	cmp	r6, #1
   d4164:	f040 8149 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    // check if new state is valid
                    if( (OP_INACTIVE == (settings[current_data_index]))|| 
   d4168:	5d2b      	ldrb	r3, [r5, r4]
   d416a:	2b03      	cmp	r3, #3
   d416c:	f200 813c 	bhi.w	d43e8 <igh_settings_process_settings_tuples+0x330>
                        (OP_BASIC == (settings[current_data_index]))||
                        (OP_STANDARD == (settings[current_data_index]))||
                        (OP_PREMIUM == (settings[current_data_index]))  
                    )
                    {
                        igh_current_system_settings.op_state = (device_op_state)settings[current_data_index];
   d4170:	f888 3001 	strb.w	r3, [r8, #1]
   d4174:	e138      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>
                    return 0;
                }
                break;

            case SUBID_SET_SERIAL_NUMBER:
                if(LENGTH_SUBID_SET_SERIAL_NUMBER == current_tuple_length)
   d4176:	2e0c      	cmp	r6, #12
   d4178:	f040 813f 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    memcpy(igh_current_system_settings.serial_number, &settings[current_data_index], LENGTH_SUBID_SET_SERIAL_NUMBER);
   d417c:	442c      	add	r4, r5
   d417e:	4b79      	ldr	r3, [pc, #484]	; (d4364 <igh_settings_process_settings_tuples+0x2ac>)
   d4180:	6820      	ldr	r0, [r4, #0]
   d4182:	6861      	ldr	r1, [r4, #4]
   d4184:	c303      	stmia	r3!, {r0, r1}
   d4186:	68a0      	ldr	r0, [r4, #8]
   d4188:	6018      	str	r0, [r3, #0]
                    initialize_rfm69 = 1;
   d418a:	4b77      	ldr	r3, [pc, #476]	; (d4368 <igh_settings_process_settings_tuples+0x2b0>)
   d418c:	2201      	movs	r2, #1
   d418e:	701a      	strb	r2, [r3, #0]
                else
                {
                    // stop processing any more settings as they may be corrupt
                    return 0;
                }
                break;
   d4190:	e12a      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_REPORTING_INTERVAL:
                if(LENGTH_SUBID_REPORTING_INTERVAL == current_tuple_length)
   d4192:	2e04      	cmp	r6, #4
   d4194:	f040 8131 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_reporting_interval[LENGTH_SUBID_REPORTING_INTERVAL]; 
                    memcpy(new_reporting_interval, &settings[current_data_index], LENGTH_SUBID_REPORTING_INTERVAL);
   d4198:	1929      	adds	r1, r5, r4
                    igh_current_system_settings.reporting_interval = GET32(new_reporting_interval);
   d419a:	5d2a      	ldrb	r2, [r5, r4]
   d419c:	784b      	ldrb	r3, [r1, #1]
   d419e:	041b      	lsls	r3, r3, #16
   d41a0:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   d41a4:	78ca      	ldrb	r2, [r1, #3]
   d41a6:	4413      	add	r3, r2
   d41a8:	788a      	ldrb	r2, [r1, #2]
   d41aa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d41ae:	f8c8 3004 	str.w	r3, [r8, #4]
                else
                {
                    // stop processing any more settings as they may be corrupt
                    return 0;
                }
                break;
   d41b2:	e119      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_DATA_RESOLUTION:
                if(LENGTH_SUBID_DATA_RESOLUTION == current_tuple_length)
   d41b4:	2e04      	cmp	r6, #4
   d41b6:	f040 8120 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_data_resolution[LENGTH_SUBID_DATA_RESOLUTION]; 
                    memcpy(new_data_resolution, &settings[current_data_index], LENGTH_SUBID_DATA_RESOLUTION);
   d41ba:	1929      	adds	r1, r5, r4
                    igh_current_system_settings.data_resolution = GET32(new_data_resolution);
   d41bc:	5d2a      	ldrb	r2, [r5, r4]
   d41be:	784b      	ldrb	r3, [r1, #1]
   d41c0:	041b      	lsls	r3, r3, #16
   d41c2:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   d41c6:	78ca      	ldrb	r2, [r1, #3]
   d41c8:	4413      	add	r3, r2
   d41ca:	788a      	ldrb	r2, [r1, #2]
   d41cc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d41d0:	f8c8 3008 	str.w	r3, [r8, #8]
                }
                else
                {
                    return 0;
                }
                break;
   d41d4:	e108      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_MQTT_BROKER:
                if( sizeof(igh_current_system_settings.broker) > current_tuple_length)
   d41d6:	2e1f      	cmp	r6, #31
   d41d8:	f200 810f 	bhi.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    memset(igh_current_system_settings.broker, '\0', sizeof(igh_current_system_settings.broker));
   d41dc:	2220      	movs	r2, #32
   d41de:	2100      	movs	r1, #0
   d41e0:	4862      	ldr	r0, [pc, #392]	; (d436c <igh_settings_process_settings_tuples+0x2b4>)
   d41e2:	f005 fb89 	bl	d98f8 <memset>
                    memcpy(igh_current_system_settings.broker, &settings[current_data_index], current_tuple_length);
   d41e6:	4632      	mov	r2, r6
   d41e8:	1929      	adds	r1, r5, r4
   d41ea:	4860      	ldr	r0, [pc, #384]	; (d436c <igh_settings_process_settings_tuples+0x2b4>)
   d41ec:	f005 fb79 	bl	d98e2 <memcpy>
                    igh_current_system_settings.broker[current_tuple_length] = '\0'; // terminate the string
   d41f0:	eb08 0306 	add.w	r3, r8, r6
   d41f4:	2200      	movs	r2, #0
   d41f6:	761a      	strb	r2, [r3, #24]
   d41f8:	e009      	b.n	d420e <igh_settings_process_settings_tuples+0x156>
                    return 0;
                }
                break;

            case SUBID_MQTT_BROKER_PORT:
                if(LENGTH_SUBID_MQTT_PORT == current_tuple_length)
   d41fa:	2e02      	cmp	r6, #2
   d41fc:	f040 80fd 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_mqtt_port[LENGTH_SUBID_MQTT_PORT]; 
                    memcpy(new_mqtt_port, &settings[current_data_index], LENGTH_SUBID_MQTT_PORT);
   d4200:	192b      	adds	r3, r5, r4
                    igh_current_system_settings.broker_port = GET16(new_mqtt_port);
   d4202:	5d2a      	ldrb	r2, [r5, r4]
   d4204:	785b      	ldrb	r3, [r3, #1]
   d4206:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d420a:	f8a8 3038 	strh.w	r3, [r8, #56]	; 0x38
                    mqtt_set_broker = 1;
   d420e:	2301      	movs	r3, #1
   d4210:	f889 3000 	strb.w	r3, [r9]
                }
                else
                {
                    return 0;
                }
                break; 
   d4214:	e0e8      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_SOIL_MOISTURE_LOW:
                if(LENGTH_SUBID_SOIL_MOISTURE_LOW == current_tuple_length)
   d4216:	2e02      	cmp	r6, #2
   d4218:	f040 80ef 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_moisture_low_th[LENGTH_SUBID_SOIL_MOISTURE_LOW]; 
                    memcpy(new_moisture_low_th, &settings[current_data_index], LENGTH_SUBID_SOIL_MOISTURE_LOW);
   d421c:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_moisture_low = GET16(new_moisture_low_th);
   d421e:	5d2a      	ldrb	r2, [r5, r4]
   d4220:	785b      	ldrb	r3, [r3, #1]
   d4222:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4226:	807b      	strh	r3, [r7, #2]
                }
                else
                {
                    return 0;
                }
                break; 
   d4228:	e0de      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_SOIL_MOISTURE_HIGH:
                if(LENGTH_SUBID_SOIL_MOISTURE_HIGH == current_tuple_length)
   d422a:	2e02      	cmp	r6, #2
   d422c:	f040 80e5 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_moisture_high_th[LENGTH_SUBID_SOIL_MOISTURE_HIGH]; 
                    memcpy(new_moisture_high_th, &settings[current_data_index], LENGTH_SUBID_SOIL_MOISTURE_LOW);
   d4230:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_moisture_high = GET16(new_moisture_high_th);
   d4232:	5d2a      	ldrb	r2, [r5, r4]
   d4234:	785b      	ldrb	r3, [r3, #1]
   d4236:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d423a:	83bb      	strh	r3, [r7, #28]
                }
                else
                {
                    return 0;
                }
                break; 
   d423c:	e0d4      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_AIR_HUMIDITY_LOW:
                if(LENGTH_SUBID_AIR_HUMIDITY_LOW  == current_tuple_length)
   d423e:	2e02      	cmp	r6, #2
   d4240:	f040 80db 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_air_humidity_low_th[LENGTH_SUBID_AIR_HUMIDITY_LOW]; 
                    memcpy(new_air_humidity_low_th, &settings[current_data_index], LENGTH_SUBID_AIR_HUMIDITY_LOW);
   d4244:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.air_humidity_low = GET16(new_air_humidity_low_th);
   d4246:	5d2a      	ldrb	r2, [r5, r4]
   d4248:	785b      	ldrb	r3, [r3, #1]
   d424a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d424e:	80bb      	strh	r3, [r7, #4]
                }
                else
                {
                    return 0;
                }
                break; 
   d4250:	e0ca      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_AIR_HUMIDITY_HIGH:
                if(LENGTH_SUBID_AIR_HUMIDITY_HIGH  == current_tuple_length)
   d4252:	2e02      	cmp	r6, #2
   d4254:	f040 80d1 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_air_humidity_high_th[LENGTH_SUBID_AIR_HUMIDITY_HIGH]; 
                    memcpy(new_air_humidity_high_th, &settings[current_data_index], LENGTH_SUBID_AIR_HUMIDITY_HIGH);
   d4258:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.air_humidity_high = GET16(new_air_humidity_high_th);
   d425a:	5d2a      	ldrb	r2, [r5, r4]
   d425c:	785b      	ldrb	r3, [r3, #1]
   d425e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4262:	83fb      	strh	r3, [r7, #30]
                }
                else
                {
                    return 0;
                }
                break;
   d4264:	e0c0      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_SOIL_HUMIDITY_LOW:
                if(LENGTH_SUBID_SOIL_HUMIDITY_LOW  == current_tuple_length)
   d4266:	2e02      	cmp	r6, #2
   d4268:	f040 80c7 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_soil_humidity_low_th[LENGTH_SUBID_SOIL_HUMIDITY_LOW]; 
                    memcpy(new_soil_humidity_low_th, &settings[current_data_index], LENGTH_SUBID_SOIL_HUMIDITY_LOW);
   d426c:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_humidity_low = GET16(new_soil_humidity_low_th);
   d426e:	5d2a      	ldrb	r2, [r5, r4]
   d4270:	785b      	ldrb	r3, [r3, #1]
   d4272:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4276:	80fb      	strh	r3, [r7, #6]
                }
                else
                {
                    return 0;
                }
                break; 
   d4278:	e0b6      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_SOIL_HUMIDITY_HIGH:
                if(LENGTH_SUBID_SOIL_HUMIDITY_HIGH  == current_tuple_length)
   d427a:	2e02      	cmp	r6, #2
   d427c:	f040 80bd 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_soil_humidity_high_th[LENGTH_SUBID_SOIL_HUMIDITY_HIGH]; 
                    memcpy(new_soil_humidity_high_th, &settings[current_data_index], LENGTH_SUBID_SOIL_HUMIDITY_HIGH);
   d4280:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_humidity_high = GET16(new_soil_humidity_high_th);
   d4282:	5d2a      	ldrb	r2, [r5, r4]
   d4284:	785b      	ldrb	r3, [r3, #1]
   d4286:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d428a:	843b      	strh	r3, [r7, #32]
                }
                else
                {
                    return 0;
                }
                break;
   d428c:	e0ac      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_CARBON_DIOXIDE_LOW:
                if(LENGTH_SUBID_CARBON_DIOXIDE_LOW  == current_tuple_length)
   d428e:	2e02      	cmp	r6, #2
   d4290:	f040 80b3 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_carbon_dioxide_low_th[LENGTH_SUBID_CARBON_DIOXIDE_LOW]; 
                    memcpy(new_carbon_dioxide_low_th, &settings[current_data_index], LENGTH_SUBID_CARBON_DIOXIDE_LOW);
   d4294:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.carbon_dioxide_low = GET16(new_carbon_dioxide_low_th);
   d4296:	5d2a      	ldrb	r2, [r5, r4]
   d4298:	785b      	ldrb	r3, [r3, #1]
   d429a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d429e:	813b      	strh	r3, [r7, #8]
                }
                else
                {
                    return 0;
                }
                break; 
   d42a0:	e0a2      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_CARBON_DIOXIDE_HIGH:
                if(LENGTH_SUBID_CARBON_DIOXIDE_HIGH  == current_tuple_length)
   d42a2:	2e02      	cmp	r6, #2
   d42a4:	f040 80a9 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_carbon_dioxide_high_th[LENGTH_SUBID_CARBON_DIOXIDE_HIGH]; 
                    memcpy(new_carbon_dioxide_high_th, &settings[current_data_index], LENGTH_SUBID_CARBON_DIOXIDE_HIGH);
   d42a8:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.carbon_dioxide_high = GET16(new_carbon_dioxide_high_th);
   d42aa:	5d2a      	ldrb	r2, [r5, r4]
   d42ac:	785b      	ldrb	r3, [r3, #1]
   d42ae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d42b2:	847b      	strh	r3, [r7, #34]	; 0x22
                }
                else
                {
                    return 0;
                }
                break;
   d42b4:	e098      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_AIR_TEMPERATURE_LOW:
                if(LENGTH_SUBID_AIR_TEMPERATURE_LOW  == current_tuple_length)
   d42b6:	2e02      	cmp	r6, #2
   d42b8:	f040 809f 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_air_temperature_low_th[LENGTH_SUBID_AIR_TEMPERATURE_LOW]; 
                    memcpy(new_air_temperature_low_th, &settings[current_data_index], LENGTH_SUBID_AIR_TEMPERATURE_LOW);
   d42bc:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.air_temperature_low = GET16(new_air_temperature_low_th);
   d42be:	5d2a      	ldrb	r2, [r5, r4]
   d42c0:	785b      	ldrb	r3, [r3, #1]
   d42c2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d42c6:	817b      	strh	r3, [r7, #10]
                }
                else
                {
                    return 0;
                }
                break; 
   d42c8:	e08e      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_AIR_TEMPERATURE_HIGH:
                if(LENGTH_SUBID_AIR_TEMPERATURE_HIGH  == current_tuple_length)
   d42ca:	2e02      	cmp	r6, #2
   d42cc:	f040 8095 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_air_temperature_high_th[LENGTH_SUBID_AIR_TEMPERATURE_HIGH]; 
                    memcpy(new_air_temperature_high_th, &settings[current_data_index], LENGTH_SUBID_AIR_TEMPERATURE_HIGH);
   d42d0:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.air_temperature_high = GET16(new_air_temperature_high_th);
   d42d2:	5d2a      	ldrb	r2, [r5, r4]
   d42d4:	785b      	ldrb	r3, [r3, #1]
   d42d6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d42da:	84bb      	strh	r3, [r7, #36]	; 0x24
                }
                else
                {
                    return 0;
                }
                break;
   d42dc:	e084      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_SOIL_TEMPERATURE_LOW:
                if(LENGTH_SUBID_SOIL_TEMPERATURE_LOW  == current_tuple_length)
   d42de:	2e02      	cmp	r6, #2
   d42e0:	f040 808b 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_soil_temperature_low_th[LENGTH_SUBID_SOIL_TEMPERATURE_LOW]; 
                    memcpy(new_soil_temperature_low_th, &settings[current_data_index], LENGTH_SUBID_SOIL_TEMPERATURE_LOW);
   d42e4:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_temperature_low = GET16(new_soil_temperature_low_th);
   d42e6:	5d2a      	ldrb	r2, [r5, r4]
   d42e8:	785b      	ldrb	r3, [r3, #1]
   d42ea:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d42ee:	81bb      	strh	r3, [r7, #12]
                }
                else
                {
                    return 0;
                }
                break; 
   d42f0:	e07a      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_SOIL_TEMPERATURE_HIGH:
                if(LENGTH_SUBID_SOIL_TEMPERATURE_HIGH  == current_tuple_length)
   d42f2:	2e02      	cmp	r6, #2
   d42f4:	f040 8081 	bne.w	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_soil_temperature_high_th[LENGTH_SUBID_SOIL_TEMPERATURE_HIGH]; 
                    memcpy(new_soil_temperature_high_th, &settings[current_data_index], LENGTH_SUBID_SOIL_TEMPERATURE_HIGH);
   d42f8:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_temperature_high = GET16(new_soil_temperature_high_th);
   d42fa:	5d2a      	ldrb	r2, [r5, r4]
   d42fc:	785b      	ldrb	r3, [r3, #1]
   d42fe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4302:	84fb      	strh	r3, [r7, #38]	; 0x26
                }
                else
                {
                    return 0;
                }
                break;    
   d4304:	e070      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_SOIL_NPK_HIGH:
                if(LENGTH_SUBID_SOIL_NPK_HIGH  == current_tuple_length)
   d4306:	2e02      	cmp	r6, #2
   d4308:	d177      	bne.n	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_soil_npk_high_th[LENGTH_SUBID_SOIL_NPK_HIGH]; 
                    memcpy(new_soil_npk_high_th, &settings[current_data_index], LENGTH_SUBID_SOIL_NPK_HIGH);
   d430a:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_npk_high = GET16(new_soil_npk_high_th);
   d430c:	5d2a      	ldrb	r2, [r5, r4]
   d430e:	785b      	ldrb	r3, [r3, #1]
   d4310:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4314:	853b      	strh	r3, [r7, #40]	; 0x28
                }
                else
                {
                    return 0;
                }
                break;   
   d4316:	e067      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_SOIL_NPK_LOW:
                if(LENGTH_SUBID_SOIL_NPK_LOW  == current_tuple_length)
   d4318:	2e02      	cmp	r6, #2
   d431a:	d16e      	bne.n	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_soil_npk_low_th[LENGTH_SUBID_SOIL_NPK_LOW]; 
                    memcpy(new_soil_npk_low_th, &settings[current_data_index], LENGTH_SUBID_SOIL_NPK_LOW);
   d431c:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_npk_low = GET16(new_soil_npk_low_th);
   d431e:	5d2a      	ldrb	r2, [r5, r4]
   d4320:	785b      	ldrb	r3, [r3, #1]
   d4322:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4326:	81fb      	strh	r3, [r7, #14]
                }
                else
                {
                    return 0;
                }
                break; 
   d4328:	e05e      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_LIGHT_INTENSITY_LOW:
                if(LENGTH_SUBID_LIGHT_INTENSITY_LOW  == current_tuple_length)
   d432a:	2e02      	cmp	r6, #2
   d432c:	d165      	bne.n	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_light_intensity_low_th[LENGTH_SUBID_LIGHT_INTENSITY_LOW]; 
                    memcpy(new_light_intensity_low_th, &settings[current_data_index], LENGTH_SUBID_LIGHT_INTENSITY_LOW);
   d432e:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.light_intensity_low = GET16(new_light_intensity_low_th);
   d4330:	5d2a      	ldrb	r2, [r5, r4]
   d4332:	785b      	ldrb	r3, [r3, #1]
   d4334:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4338:	823b      	strh	r3, [r7, #16]
                }
                else
                {
                    return 0;
                }
                break; 
   d433a:	e055      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_LIGHT_INTENSITY_HIGH:
                if(LENGTH_SUBID_LIGHT_INTENSITY_HIGH  == current_tuple_length)
   d433c:	2e02      	cmp	r6, #2
   d433e:	d15c      	bne.n	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_light_intensity_high_th[LENGTH_SUBID_LIGHT_INTENSITY_HIGH]; 
                    memcpy(new_light_intensity_high_th, &settings[current_data_index], LENGTH_SUBID_LIGHT_INTENSITY_HIGH);
   d4340:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.light_intensity_high = GET16(new_light_intensity_high_th);
   d4342:	5d2a      	ldrb	r2, [r5, r4]
   d4344:	785b      	ldrb	r3, [r3, #1]
   d4346:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d434a:	857b      	strh	r3, [r7, #42]	; 0x2a
                }
                else
                {
                    return 0;
                }
                break; 
   d434c:	e04c      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_SHIELD_BATTERY_LEVEL_LOW:
                if(LENGTH_SUBID_SHIELD_BATTERY_LEVEL_LOW  == current_tuple_length)
   d434e:	2e02      	cmp	r6, #2
   d4350:	d153      	bne.n	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_shield_battery_low_th[LENGTH_SUBID_SHIELD_BATTERY_LEVEL_LOW]; 
                    memcpy(new_shield_battery_low_th, &settings[current_data_index], LENGTH_SUBID_SHIELD_BATTERY_LEVEL_LOW);
   d4352:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.shield_battery_level_low = GET16(new_shield_battery_low_th);
   d4354:	5d2a      	ldrb	r2, [r5, r4]
   d4356:	785b      	ldrb	r3, [r3, #1]
   d4358:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d435c:	827b      	strh	r3, [r7, #18]
                }
                else
                {
                    return 0;
                }
                break;
   d435e:	e043      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>
   d4360:	2003e680 	.word	0x2003e680
   d4364:	2003e64c 	.word	0x2003e64c
   d4368:	2003db51 	.word	0x2003db51
   d436c:	2003e658 	.word	0x2003e658
   d4370:	2003e640 	.word	0x2003e640
   d4374:	2003da5c 	.word	0x2003da5c

            case SUBID_SHIELD_BATTERY_LEVEL_HIGH:
                if(LENGTH_SUBID_SHIELD_BATTERY_LEVEL_HIGH  == current_tuple_length)
   d4378:	2e02      	cmp	r6, #2
   d437a:	d13e      	bne.n	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_shield_battery_high_th[LENGTH_SUBID_SHIELD_BATTERY_LEVEL_HIGH]; 
                    memcpy(new_shield_battery_high_th, &settings[current_data_index], LENGTH_SUBID_SHIELD_BATTERY_LEVEL_HIGH);
   d437c:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.shield_battery_level_high = GET16(new_shield_battery_high_th);
   d437e:	5d2a      	ldrb	r2, [r5, r4]
   d4380:	785b      	ldrb	r3, [r3, #1]
   d4382:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4386:	85bb      	strh	r3, [r7, #44]	; 0x2c
                }
                else
                {
                    return 0;
                }
                break;  
   d4388:	e02e      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_SPEAR_BATTERY_LEVEL_LOW:
                if(LENGTH_SUBID_SPEAR_BATTERY_LEVEL_LOW  == current_tuple_length)
   d438a:	2e02      	cmp	r6, #2
   d438c:	d135      	bne.n	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_spear_battery_low_th[LENGTH_SUBID_SPEAR_BATTERY_LEVEL_LOW]; 
                    memcpy(new_spear_battery_low_th, &settings[current_data_index], LENGTH_SUBID_SPEAR_BATTERY_LEVEL_LOW);
   d438e:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.spear_battery_level_low = GET16(new_spear_battery_low_th);
   d4390:	5d2a      	ldrb	r2, [r5, r4]
   d4392:	785b      	ldrb	r3, [r3, #1]
   d4394:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4398:	82bb      	strh	r3, [r7, #20]
                }
                else
                {
                    return 0;
                }
                break;
   d439a:	e025      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_SPEAR_BATTERY_LEVEL_HIGH:
                if(LENGTH_SUBID_SPEAR_BATTERY_LEVEL_HIGH  == current_tuple_length)
   d439c:	2e02      	cmp	r6, #2
   d439e:	d12c      	bne.n	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_spear_battery_high_th[LENGTH_SUBID_SPEAR_BATTERY_LEVEL_HIGH]; 
                    memcpy(new_spear_battery_high_th, &settings[current_data_index], LENGTH_SUBID_SPEAR_BATTERY_LEVEL_HIGH);
   d43a0:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.spear_battery_level_high = GET16(new_spear_battery_high_th);
   d43a2:	5d2a      	ldrb	r2, [r5, r4]
   d43a4:	785b      	ldrb	r3, [r3, #1]
   d43a6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d43aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
                }
                else
                {
                    return 0;
                }
                break;
   d43ac:	e01c      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_WATER_DISPENSED_PERIOD_LOW:
                if(LENGTH_SUBID_WATER_DISPENSED_PERIOD_LOW == current_tuple_length)
   d43ae:	2e04      	cmp	r6, #4
   d43b0:	d123      	bne.n	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_water_dispensed_period_low[LENGTH_SUBID_WATER_DISPENSED_PERIOD_LOW]; 
                    memcpy(new_water_dispensed_period_low, &settings[current_data_index], LENGTH_SUBID_WATER_DISPENSED_PERIOD_LOW);
   d43b2:	1929      	adds	r1, r5, r4
                    igh_current_threshold_settings.water_dispensed_period_low = GET32(new_water_dispensed_period_low);
   d43b4:	5d2a      	ldrb	r2, [r5, r4]
   d43b6:	784b      	ldrb	r3, [r1, #1]
   d43b8:	041b      	lsls	r3, r3, #16
   d43ba:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   d43be:	78ca      	ldrb	r2, [r1, #3]
   d43c0:	4413      	add	r3, r2
   d43c2:	788a      	ldrb	r2, [r1, #2]
   d43c4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d43c8:	61bb      	str	r3, [r7, #24]
                else
                {
                    // stop processing any more settings as they may be corrupt
                    return 0;
                }
                break;
   d43ca:	e00d      	b.n	d43e8 <igh_settings_process_settings_tuples+0x330>

            case SUBID_WATER_DISPENSED_PERIOD_HIGH:
                if(LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH == current_tuple_length)
   d43cc:	2e04      	cmp	r6, #4
   d43ce:	d114      	bne.n	d43fa <igh_settings_process_settings_tuples+0x342>
                {
                    uint8_t new_water_dispensed_period_high[LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH]; 
                    memcpy(new_water_dispensed_period_high, &settings[current_data_index], LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH);
   d43d0:	1929      	adds	r1, r5, r4
                    igh_current_threshold_settings.water_dispensed_period_high = GET32(new_water_dispensed_period_high);
   d43d2:	5d2a      	ldrb	r2, [r5, r4]
   d43d4:	784b      	ldrb	r3, [r1, #1]
   d43d6:	041b      	lsls	r3, r3, #16
   d43d8:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   d43dc:	78ca      	ldrb	r2, [r1, #3]
   d43de:	4413      	add	r3, r2
   d43e0:	788a      	ldrb	r2, [r1, #2]
   d43e2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d43e6:	633b      	str	r3, [r7, #48]	; 0x30

            default: // nothing to do hear
                break;
        }
        // move index to next tuple id
        byte_tracker += current_tuple_length + TUPLE_HEADER_LEN;
   d43e8:	1cb3      	adds	r3, r6, #2
   d43ea:	eb0b 0603 	add.w	r6, fp, r3
   d43ee:	fa5f fb86 	uxtb.w	fp, r6
   d43f2:	e66b      	b.n	d40cc <igh_settings_process_settings_tuples+0x14>
    }
    return 1;
   d43f4:	2001      	movs	r0, #1
   d43f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    
                }
                else
                {
                    // stop processing any more settings as they may be corrupt
                    return 0;
   d43fa:	2000      	movs	r0, #0
        }
        // move index to next tuple id
        byte_tracker += current_tuple_length + TUPLE_HEADER_LEN;
    }
    return 1;
}
   d43fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4400 <igh_settings_calculate_checksum>:
 * struct must have a single byte at the end designated for the checksum for this to work
 * \param p_struct: pointer to data struct, total_bytes: sizeof(data struct)
 * \return the checksum
 */
uint8_t igh_settings_calculate_checksum(void * p_struct, size_t total_bytes)
{
   d4400:	b510      	push	{r4, lr}
    data = (uint8_t *)p_struct;

    // uint8_t data_buffer[length];
    // memcpy(data_buffer, data, length);

    data += 1; // ignore checksum byte
   d4402:	1c42      	adds	r2, r0, #1
 */
uint8_t igh_settings_calculate_checksum(void * p_struct, size_t total_bytes)
{
    uint8_t length = (uint8_t)total_bytes; 
    uint8_t * data;
    int sum = 0;
   d4404:	2300      	movs	r3, #0
    // uint8_t data_buffer[length];
    // memcpy(data_buffer, data, length);

    data += 1; // ignore checksum byte
    // start at 1 to ignore the checksum byte
    for( int i = 1; i < length; i++)
   d4406:	b2c9      	uxtb	r1, r1
   d4408:	1a14      	subs	r4, r2, r0
   d440a:	42a1      	cmp	r1, r4
   d440c:	dd03      	ble.n	d4416 <igh_settings_calculate_checksum+0x16>
    {
        sum += (0xFF & *data++);
   d440e:	f812 4b01 	ldrb.w	r4, [r2], #1
   d4412:	4423      	add	r3, r4
   d4414:	e7f8      	b.n	d4408 <igh_settings_calculate_checksum+0x8>
    }

    checksum = (uint8_t)(sum % 256);

    return checksum;
}
   d4416:	b2d8      	uxtb	r0, r3
   d4418:	bd10      	pop	{r4, pc}
	...

000d441c <igh_settings_parse_new_settings>:
    }
    return 1;
}

uint8_t igh_settings_parse_new_settings(uint8_t * settings)
{
   d441c:	b510      	push	{r4, lr}
    // get the length
    uint8_t length = settings[PAYLOAD_LEN_INDEX]; // byte at position one should always be length
   d441e:	7c82      	ldrb	r2, [r0, #18]
    // guard the process
    if(0 >= length)
   d4420:	b90a      	cbnz	r2, d4426 <igh_settings_parse_new_settings+0xa>
    {
        return 0; // do not allow settings with zero payload to be processed
   d4422:	2000      	movs	r0, #0
   d4424:	bd10      	pop	{r4, pc}
    // get index of last byte to process
    uint8_t settings_end_index = FIRST_TUPLE_INDEX + length;
    // get the location of first tuple
    uint8_t settings_byte_tracker = FIRST_TUPLE_INDEX;
    
    if( 0 == igh_settings_process_settings_tuples( settings, settings_byte_tracker, settings_end_index ) ) 
   d4426:	3213      	adds	r2, #19
   d4428:	b2d2      	uxtb	r2, r2
   d442a:	2113      	movs	r1, #19
   d442c:	f7ff fe44 	bl	d40b8 <igh_settings_process_settings_tuples>
   d4430:	2800      	cmp	r0, #0
   d4432:	d0f6      	beq.n	d4422 <igh_settings_parse_new_settings+0x6>
        return 0;
    }
    else
    {
        // update the checksum of the system settings
        igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
   d4434:	4c07      	ldr	r4, [pc, #28]	; (d4454 <igh_settings_parse_new_settings+0x38>)
   d4436:	213c      	movs	r1, #60	; 0x3c
   d4438:	4620      	mov	r0, r4
   d443a:	f7ff ffe1 	bl	d4400 <igh_settings_calculate_checksum>
   d443e:	7020      	strb	r0, [r4, #0]
        // update the checksum for the threshold settings
        igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
   d4440:	4c05      	ldr	r4, [pc, #20]	; (d4458 <igh_settings_parse_new_settings+0x3c>)
   d4442:	2134      	movs	r1, #52	; 0x34
   d4444:	4620      	mov	r0, r4
   d4446:	f7ff ffdb 	bl	d4400 <igh_settings_calculate_checksum>
        
        new_settings_available = 1;
   d444a:	4b04      	ldr	r3, [pc, #16]	; (d445c <igh_settings_parse_new_settings+0x40>)
    else
    {
        // update the checksum of the system settings
        igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
        // update the checksum for the threshold settings
        igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
   d444c:	7020      	strb	r0, [r4, #0]
        
        new_settings_available = 1;
   d444e:	2001      	movs	r0, #1
   d4450:	7018      	strb	r0, [r3, #0]
    }
    
    return 1;
}
   d4452:	bd10      	pop	{r4, pc}
   d4454:	2003e640 	.word	0x2003e640
   d4458:	2003e680 	.word	0x2003e680
   d445c:	2003db50 	.word	0x2003db50

000d4460 <igh_settings_process_settings>:
 */
uint8_t igh_settings_process_settings(uint8_t * settings)
{
    uint8_t ret = 0; 
    igh_pkt_id settings_type = (igh_pkt_id)settings[PAYLOAD_INDEX];
    switch(settings_type)
   d4460:	7c42      	ldrb	r2, [r0, #17]
   d4462:	2a0f      	cmp	r2, #15
   d4464:	d003      	beq.n	d446e <igh_settings_process_settings+0xe>
   d4466:	2a10      	cmp	r2, #16
   d4468:	d108      	bne.n	d447c <igh_settings_process_settings+0x1c>
    {
        case VALVE_POSITION:
            ret = igh_settings_remote_valvle_control(settings);
            break;
        case IGH_SEND_SETTINGS:
            ret = igh_settings_parse_new_settings(settings);
   d446a:	f7ff bfd7 	b.w	d441c <igh_settings_parse_new_settings>
    return buffer_index_tracker;
}

LOCAL uint8_t igh_settings_remote_valvle_control(uint8_t * settings)
{
    if( ((valve_position)settings[FIRST_TUPLE_INDEX] == VALVE_CLOSE) ||
   d446e:	7cc3      	ldrb	r3, [r0, #19]
   d4470:	2b01      	cmp	r3, #1
   d4472:	d803      	bhi.n	d447c <igh_settings_process_settings+0x1c>
        ((valve_position)settings[FIRST_TUPLE_INDEX] == VALVE_OPEN) )
    {
        current_valve_position =  (valve_position)settings[FIRST_TUPLE_INDEX];
   d4474:	4a02      	ldr	r2, [pc, #8]	; (d4480 <igh_settings_process_settings+0x20>)
        return 1;
   d4476:	2001      	movs	r0, #1
LOCAL uint8_t igh_settings_remote_valvle_control(uint8_t * settings)
{
    if( ((valve_position)settings[FIRST_TUPLE_INDEX] == VALVE_CLOSE) ||
        ((valve_position)settings[FIRST_TUPLE_INDEX] == VALVE_OPEN) )
    {
        current_valve_position =  (valve_position)settings[FIRST_TUPLE_INDEX];
   d4478:	7013      	strb	r3, [r2, #0]
   d447a:	4770      	bx	lr
        return 1;
    }

    return 0;
   d447c:	2000      	movs	r0, #0
        default:
            break;
    }

    return ret;
}
   d447e:	4770      	bx	lr
   d4480:	2003e67c 	.word	0x2003e67c

000d4484 <igh_settings_reset_system_to_default>:
    
    return 1;
}

void igh_settings_reset_system_to_default(void)
{
   d4484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


LOCAL void igh_settings_get_defaults(void) // Total bytes 
{
    // System settings
    memset(&igh_default_system_settings, 0, sizeof(igh_default_system_settings));
   d4486:	4c32      	ldr	r4, [pc, #200]	; (d4550 <igh_settings_reset_system_to_default+0xcc>)
   d4488:	223c      	movs	r2, #60	; 0x3c
   d448a:	2100      	movs	r1, #0
   d448c:	4620      	mov	r0, r4
   d448e:	f005 fa33 	bl	d98f8 <memset>
    igh_default_system_settings.op_state                    = DEFAULT_NEW_OPSTATE;
    igh_default_system_settings.reporting_interval          = DEFAULT_REPORTING_INTERVAL;
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
   d4492:	4a30      	ldr	r2, [pc, #192]	; (d4554 <igh_settings_reset_system_to_default+0xd0>)
LOCAL void igh_settings_get_defaults(void) // Total bytes 
{
    // System settings
    memset(&igh_default_system_settings, 0, sizeof(igh_default_system_settings));
    igh_default_system_settings.op_state                    = DEFAULT_NEW_OPSTATE;
    igh_default_system_settings.reporting_interval          = DEFAULT_REPORTING_INTERVAL;
   d4494:	f44f 63e1 	mov.w	r3, #1800	; 0x708
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
   d4498:	6810      	ldr	r0, [r2, #0]
   d449a:	6851      	ldr	r1, [r2, #4]
LOCAL void igh_settings_get_defaults(void) // Total bytes 
{
    // System settings
    memset(&igh_default_system_settings, 0, sizeof(igh_default_system_settings));
    igh_default_system_settings.op_state                    = DEFAULT_NEW_OPSTATE;
    igh_default_system_settings.reporting_interval          = DEFAULT_REPORTING_INTERVAL;
   d449c:	6063      	str	r3, [r4, #4]
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
   d449e:	f44f 7316 	mov.w	r3, #600	; 0x258
   d44a2:	60a3      	str	r3, [r4, #8]
    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
   d44a4:	f104 030c 	add.w	r3, r4, #12
   d44a8:	c303      	stmia	r3!, {r0, r1}
   d44aa:	6890      	ldr	r0, [r2, #8]
   d44ac:	6018      	str	r0, [r3, #0]
    memcpy(igh_default_system_settings.broker, default_broker_url, sizeof(default_broker_url));
   d44ae:	4b2a      	ldr	r3, [pc, #168]	; (d4558 <igh_settings_reset_system_to_default+0xd4>)
   d44b0:	f104 0218 	add.w	r2, r4, #24
   d44b4:	f103 0610 	add.w	r6, r3, #16
   d44b8:	6818      	ldr	r0, [r3, #0]
   d44ba:	6859      	ldr	r1, [r3, #4]
   d44bc:	4615      	mov	r5, r2
   d44be:	c503      	stmia	r5!, {r0, r1}
   d44c0:	3308      	adds	r3, #8
   d44c2:	42b3      	cmp	r3, r6
   d44c4:	462a      	mov	r2, r5
   d44c6:	d1f7      	bne.n	d44b8 <igh_settings_reset_system_to_default+0x34>
   d44c8:	881b      	ldrh	r3, [r3, #0]
   d44ca:	802b      	strh	r3, [r5, #0]
    igh_default_system_settings.broker_port                 = DEFAULT_MQTT_BROKER_PORT;
    igh_default_system_settings.checksum = igh_settings_calculate_checksum(&igh_default_system_settings, sizeof(igh_default_system_settings));
   d44cc:	213c      	movs	r1, #60	; 0x3c
    igh_default_system_settings.op_state                    = DEFAULT_NEW_OPSTATE;
    igh_default_system_settings.reporting_interval          = DEFAULT_REPORTING_INTERVAL;
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
    memcpy(igh_default_system_settings.broker, default_broker_url, sizeof(default_broker_url));
    igh_default_system_settings.broker_port                 = DEFAULT_MQTT_BROKER_PORT;
   d44ce:	f240 735b 	movw	r3, #1883	; 0x75b
    igh_default_system_settings.checksum = igh_settings_calculate_checksum(&igh_default_system_settings, sizeof(igh_default_system_settings));
   d44d2:	481f      	ldr	r0, [pc, #124]	; (d4550 <igh_settings_reset_system_to_default+0xcc>)
    igh_default_system_settings.op_state                    = DEFAULT_NEW_OPSTATE;
    igh_default_system_settings.reporting_interval          = DEFAULT_REPORTING_INTERVAL;
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
    memcpy(igh_default_system_settings.broker, default_broker_url, sizeof(default_broker_url));
    igh_default_system_settings.broker_port                 = DEFAULT_MQTT_BROKER_PORT;
   d44d4:	8723      	strh	r3, [r4, #56]	; 0x38
    igh_default_system_settings.checksum = igh_settings_calculate_checksum(&igh_default_system_settings, sizeof(igh_default_system_settings));
   d44d6:	f7ff ff93 	bl	d4400 <igh_settings_calculate_checksum>
   d44da:	7020      	strb	r0, [r4, #0]

    //High Threshold tirggers
    memset(&igh_default_thresholds, 0, sizeof(igh_default_thresholds));
   d44dc:	4c1f      	ldr	r4, [pc, #124]	; (d455c <igh_settings_reset_system_to_default+0xd8>)
}

void igh_settings_reset_system_to_default(void)
{
    igh_settings_get_defaults();
    igh_current_system_settings = igh_default_system_settings;
   d44de:	4e1c      	ldr	r6, [pc, #112]	; (d4550 <igh_settings_reset_system_to_default+0xcc>)
   d44e0:	4f1f      	ldr	r7, [pc, #124]	; (d4560 <igh_settings_reset_system_to_default+0xdc>)
    memcpy(igh_default_system_settings.broker, default_broker_url, sizeof(default_broker_url));
    igh_default_system_settings.broker_port                 = DEFAULT_MQTT_BROKER_PORT;
    igh_default_system_settings.checksum = igh_settings_calculate_checksum(&igh_default_system_settings, sizeof(igh_default_system_settings));

    //High Threshold tirggers
    memset(&igh_default_thresholds, 0, sizeof(igh_default_thresholds));
   d44e2:	2234      	movs	r2, #52	; 0x34
   d44e4:	2100      	movs	r1, #0
   d44e6:	4620      	mov	r0, r4
   d44e8:	f005 fa06 	bl	d98f8 <memset>
    igh_default_thresholds.light_intensity_low              = DEFAULT_LIGHT_INTENSITY_LOW;               
    igh_default_thresholds.shield_battery_level_low         = DEFAULT_SHIELD_BATTERY_LEVEL_LOW;     
    igh_default_thresholds.spear_battery_level_low          = DEFAULT_SPEAR_BATTERY_LEVEL_LOW;      
    igh_default_thresholds.water_dispensed_period_low       = DEFAULT_WATER_DISPENSED_PERIOD_LOW;
    // Low Threshold Trigger
    igh_default_thresholds.soil_moisture_high               = DEFAULT_SOIL_MOISTURE_HIGH;                 
   d44ec:	23ff      	movs	r3, #255	; 0xff
    igh_default_thresholds.soil_npk_high                    = DEFAULT_SOIL_NPK_HIGH;                           
    igh_default_thresholds.light_intensity_high             = DEFAULT_LIGHT_INTENSITY_HIGH;             
    igh_default_thresholds.shield_battery_level_high        = DEFAULT_SHIELD_BATTERY_LEVEL_HIGH;   
    igh_default_thresholds.spear_battery_level_high         = DEFAULT_SPEAR_BATTERY_LEVEL_HIGH;     
    igh_default_thresholds.water_dispensed_period_high      = DEFAULT_WATER_DISPENSED_PERIOD_HIGH;
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));
   d44ee:	2134      	movs	r1, #52	; 0x34
   d44f0:	4620      	mov	r0, r4
    igh_default_thresholds.light_intensity_low              = DEFAULT_LIGHT_INTENSITY_LOW;               
    igh_default_thresholds.shield_battery_level_low         = DEFAULT_SHIELD_BATTERY_LEVEL_LOW;     
    igh_default_thresholds.spear_battery_level_low          = DEFAULT_SPEAR_BATTERY_LEVEL_LOW;      
    igh_default_thresholds.water_dispensed_period_low       = DEFAULT_WATER_DISPENSED_PERIOD_LOW;
    // Low Threshold Trigger
    igh_default_thresholds.soil_moisture_high               = DEFAULT_SOIL_MOISTURE_HIGH;                 
   d44f2:	83a3      	strh	r3, [r4, #28]
    igh_default_thresholds.air_humidity_high                = DEFAULT_AIR_HUMIDITY_HIGH;                   
   d44f4:	83e3      	strh	r3, [r4, #30]
    igh_default_thresholds.soil_humidity_high               = DEFAULT_SOIL_HUMIDITY_HIGH;                 
   d44f6:	8423      	strh	r3, [r4, #32]
    igh_default_thresholds.carbon_dioxide_high              = DEFAULT_CARBON_DIOXIDE_HIGH;        
   d44f8:	8463      	strh	r3, [r4, #34]	; 0x22
    igh_default_thresholds.air_temperature_high             = DEFAULT_AIR_TEMPERATURE_HIGH;             
   d44fa:	84a3      	strh	r3, [r4, #36]	; 0x24
    igh_default_thresholds.soil_temperature_high            = DEFAULT_SOIL_TEMPERATURE_HIGH;           
   d44fc:	84e3      	strh	r3, [r4, #38]	; 0x26
    igh_default_thresholds.soil_npk_high                    = DEFAULT_SOIL_NPK_HIGH;                           
   d44fe:	8523      	strh	r3, [r4, #40]	; 0x28
    igh_default_thresholds.light_intensity_high             = DEFAULT_LIGHT_INTENSITY_HIGH;             
   d4500:	8563      	strh	r3, [r4, #42]	; 0x2a
    igh_default_thresholds.shield_battery_level_high        = DEFAULT_SHIELD_BATTERY_LEVEL_HIGH;   
   d4502:	85a3      	strh	r3, [r4, #44]	; 0x2c
    igh_default_thresholds.spear_battery_level_high         = DEFAULT_SPEAR_BATTERY_LEVEL_HIGH;     
   d4504:	85e3      	strh	r3, [r4, #46]	; 0x2e
    igh_default_thresholds.water_dispensed_period_high      = DEFAULT_WATER_DISPENSED_PERIOD_HIGH;
   d4506:	6323      	str	r3, [r4, #48]	; 0x30
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));
   d4508:	f7ff ff7a 	bl	d4400 <igh_settings_calculate_checksum>
   d450c:	7020      	strb	r0, [r4, #0]
}

void igh_settings_reset_system_to_default(void)
{
    igh_settings_get_defaults();
    igh_current_system_settings = igh_default_system_settings;
   d450e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d4510:	463d      	mov	r5, r7
   d4512:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4514:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d4516:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4518:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d451a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d451c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   d4520:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    igh_current_threshold_settings = igh_default_thresholds;
   d4524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4526:	4e0f      	ldr	r6, [pc, #60]	; (d4564 <igh_settings_reset_system_to_default+0xe0>)
   d4528:	4635      	mov	r5, r6
   d452a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d452c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d452e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4530:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4532:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4534:	6823      	ldr	r3, [r4, #0]
   d4536:	602b      	str	r3, [r5, #0]
    // update the checksum of the system settings
    igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
   d4538:	213c      	movs	r1, #60	; 0x3c
   d453a:	4638      	mov	r0, r7
   d453c:	f7ff ff60 	bl	d4400 <igh_settings_calculate_checksum>
    // update the checksum for the threshold settings
    igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
   d4540:	2134      	movs	r1, #52	; 0x34
{
    igh_settings_get_defaults();
    igh_current_system_settings = igh_default_system_settings;
    igh_current_threshold_settings = igh_default_thresholds;
    // update the checksum of the system settings
    igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
   d4542:	7038      	strb	r0, [r7, #0]
    // update the checksum for the threshold settings
    igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
   d4544:	4630      	mov	r0, r6
   d4546:	f7ff ff5b 	bl	d4400 <igh_settings_calculate_checksum>
   d454a:	7030      	strb	r0, [r6, #0]
   d454c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d454e:	bf00      	nop
   d4550:	2003e6b4 	.word	0x2003e6b4
   d4554:	2003da6f 	.word	0x2003da6f
   d4558:	2003da5d 	.word	0x2003da5d
   d455c:	2003e608 	.word	0x2003e608
   d4560:	2003e640 	.word	0x2003e640
   d4564:	2003e680 	.word	0x2003e680

000d4568 <igh_message_process_incoming_msg>:
 * \brief Process incoming messages and action them repsectively
 * \param ack_msg incoimng message byte array
 * \return true or false
 */
uint8_t igh_message_process_incoming_msg(uint8_t * buffer)
{
   d4568:	b538      	push	{r3, r4, r5, lr}
    igh_msg_type message_type = UNKNOWN_MSG;
    uint8_t length = buffer[LEN_INDEX]; // get the length
   d456a:	7843      	ldrb	r3, [r0, #1]
 * \brief Process incoming messages and action them repsectively
 * \param ack_msg incoimng message byte array
 * \return true or false
 */
uint8_t igh_message_process_incoming_msg(uint8_t * buffer)
{
   d456c:	4604      	mov	r4, r0
    igh_msg_type message_type = UNKNOWN_MSG;
    uint8_t length = buffer[LEN_INDEX]; // get the length

    if(length <= 0) // prevent any messages with zero length from being processed
   d456e:	b33b      	cbz	r3, d45c0 <igh_message_process_incoming_msg+0x58>
    {
        return message_type;    
    }

    if( (buffer[0] == FRAME_START) && (buffer[length-1] == FRAME_END) )
   d4570:	7802      	ldrb	r2, [r0, #0]
   d4572:	2a3c      	cmp	r2, #60	; 0x3c
   d4574:	d124      	bne.n	d45c0 <igh_message_process_incoming_msg+0x58>
   d4576:	4403      	add	r3, r0
   d4578:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d457c:	2b3e      	cmp	r3, #62	; 0x3e
   d457e:	d11f      	bne.n	d45c0 <igh_message_process_incoming_msg+0x58>
    {
        // check the serial number
        if( 0 != memcmp(igh_current_system_settings.serial_number, &buffer[SN_INDEX], sizeof(igh_current_system_settings.serial_number)))
   d4580:	1d01      	adds	r1, r0, #4
   d4582:	220c      	movs	r2, #12
   d4584:	4810      	ldr	r0, [pc, #64]	; (d45c8 <igh_message_process_incoming_msg+0x60>)
   d4586:	f005 f99d 	bl	d98c4 <memcmp>
   d458a:	b9c8      	cbnz	r0, d45c0 <igh_message_process_incoming_msg+0x58>
            // if the serial number does not match, do nothing as this message wasn't meant for this device,
            // This ideally should never happen
        }
        else
        {
            if( MSG_ACK == buffer[MSG_TYPE_INDEX] )
   d458c:	78a5      	ldrb	r5, [r4, #2]
   d458e:	2d41      	cmp	r5, #65	; 0x41
   d4590:	d110      	bne.n	d45b4 <igh_message_process_incoming_msg+0x4c>
LOCAL uint8_t igh_message_process_ACK(uint8_t * ack_msg)
{
    // get the ACK tuple id
    igh_pkt_id _ack_id = (igh_pkt_id)ack_msg[PAYLOAD_INDEX];

    if( (MSG_ACK_TUPLE != _ack_id) || (SIZE_OF_MSG_ACK_TUPLE != ack_msg[PAYLOAD_INDEX + 1]) )
   d4592:	7c63      	ldrb	r3, [r4, #17]
   d4594:	4a0d      	ldr	r2, [pc, #52]	; (d45cc <igh_message_process_incoming_msg+0x64>)
   d4596:	b913      	cbnz	r3, d459e <igh_message_process_incoming_msg+0x36>
   d4598:	7ca3      	ldrb	r3, [r4, #18]
   d459a:	2b01      	cmp	r3, #1
   d459c:	d002      	beq.n	d45a4 <igh_message_process_incoming_msg+0x3c>
    {
        upload_igh_message_id--;
   d459e:	7813      	ldrb	r3, [r2, #0]
   d45a0:	3b01      	subs	r3, #1
   d45a2:	e005      	b.n	d45b0 <igh_message_process_incoming_msg+0x48>
        return 0;
    }

    uint8_t acked_msd_id = ack_msg[PAYLOAD_INDEX + 2];
    uint8_t sent_message_id = upload_igh_message_id - 1; // the message id will have been incremented after the last send
   d45a4:	7813      	ldrb	r3, [r2, #0]
    if (acked_msd_id != sent_message_id)
   d45a6:	7ce1      	ldrb	r1, [r4, #19]
        upload_igh_message_id--;
        return 0;
    }

    uint8_t acked_msd_id = ack_msg[PAYLOAD_INDEX + 2];
    uint8_t sent_message_id = upload_igh_message_id - 1; // the message id will have been incremented after the last send
   d45a8:	3b01      	subs	r3, #1
   d45aa:	b2db      	uxtb	r3, r3
    if (acked_msd_id != sent_message_id)
   d45ac:	4299      	cmp	r1, r3
   d45ae:	d008      	beq.n	d45c2 <igh_message_process_incoming_msg+0x5a>
    {
        upload_igh_message_id--; // roll back to send the previous message
   d45b0:	7013      	strb	r3, [r2, #0]
   d45b2:	e005      	b.n	d45c0 <igh_message_process_incoming_msg+0x58>
                if(igh_message_process_ACK(buffer))
                {
                    message_type = MSG_ACK;
                }
            }
            else if( SETTINGS_MSG == buffer[MSG_TYPE_INDEX] )
   d45b4:	2d53      	cmp	r5, #83	; 0x53
   d45b6:	d103      	bne.n	d45c0 <igh_message_process_incoming_msg+0x58>
            {
                // process settings here
                if(igh_settings_process_settings(buffer))
   d45b8:	4620      	mov	r0, r4
   d45ba:	f7ff ff51 	bl	d4460 <igh_settings_process_settings>
   d45be:	b900      	cbnz	r0, d45c2 <igh_message_process_incoming_msg+0x5a>
 * \param ack_msg incoimng message byte array
 * \return true or false
 */
uint8_t igh_message_process_incoming_msg(uint8_t * buffer)
{
    igh_msg_type message_type = UNKNOWN_MSG;
   d45c0:	2500      	movs	r5, #0
        // if there is no frame start or no frame end, do nothing and return zer0
        // This may mean the length was wrong or the message was corrupted
    }

    return message_type; // should return the extracted tuple id for processing later
}
   d45c2:	4628      	mov	r0, r5
   d45c4:	bd38      	pop	{r3, r4, r5, pc}
   d45c6:	bf00      	nop
   d45c8:	2003e64c 	.word	0x2003e64c
   d45cc:	2003db52 	.word	0x2003db52

000d45d0 <setup>:

/* Run Application routine */
void setup() 
{
    // setup application
    igh_app_setup();
   d45d0:	f000 b80c 	b.w	d45ec <_Z13igh_app_setupv>

000d45d4 <loop>:
}

void loop() 
{
    // run main app
    igh_main_application();
   d45d4:	f000 ba9e 	b.w	d4b14 <_Z20igh_main_applicationv>

000d45d8 <_GLOBAL__sub_I_setup>:
}
   d45d8:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d45da:	f002 fc01 	bl	d6de0 <HAL_Pin_Map>
#include "particle_api/igh_log.h"
#endif

#include "include/igh_app.h"

SYSTEM_THREAD(ENABLED);
   d45de:	2100      	movs	r1, #0
   d45e0:	2001      	movs	r0, #1

void loop() 
{
    // run main app
    igh_main_application();
}
   d45e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#include "particle_api/igh_log.h"
#endif

#include "include/igh_app.h"

SYSTEM_THREAD(ENABLED);
   d45e6:	f002 be93 	b.w	d7310 <system_thread_set_state>
	...

000d45ec <_Z13igh_app_setupv>:
uint8_t igh_app_get_serial_hex_data( uint8_t * buffer, uint8_t len );
void igh_app_get_new_settings( void );
void igh_app_commit_new_settings( void );

void igh_app_setup( void )
{
   d45ec:	b508      	push	{r3, lr}
    Serial.begin(19200);
   d45ee:	f003 fcf7 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d45f2:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
   d45f6:	f003 fce7 	bl	d7fc8 <_ZN9USBSerial5beginEl>
    Serial.println("START");
   d45fa:	f003 fcf1 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d45fe:	4906      	ldr	r1, [pc, #24]	; (d4618 <_Z13igh_app_setupv+0x2c>)
   d4600:	f003 f9a1 	bl	d7946 <_ZN5Print7printlnEPKc>
    
    igh_boron_setup();
   d4604:	f000 fe04 	bl	d5210 <_Z15igh_boron_setupv>
    
    // get settings from eeprom
    igh_eeprom_init();
   d4608:	f000 fbd0 	bl	d4dac <_Z15igh_eeprom_initv>
    
    // starte the radio
    igh_rfm69_setup();
   d460c:	f000 fe64 	bl	d52d8 <_Z15igh_rfm69_setupv>
    
    // setup MQTT
    igh_mqtt_setup();
}
   d4610:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    
    // starte the radio
    igh_rfm69_setup();
    
    // setup MQTT
    igh_mqtt_setup();
   d4614:	f000 bad4 	b.w	d4bc0 <_Z14igh_mqtt_setupv>
   d4618:	000d997c 	.word	0x000d997c

000d461c <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir>:
        device_restart = false;
    }
}

uint8_t igh_app_add_message_header( uint8_t *_buffer, uint8_t start, igh_msg_type msg_type, igh_msg_dir dir )
{
   d461c:	460b      	mov	r3, r1
    uint8_t i = start;

    // Add Message type
    _buffer[i++] = ERROR_MSG;
   d461e:	2145      	movs	r1, #69	; 0x45
        device_restart = false;
    }
}

uint8_t igh_app_add_message_header( uint8_t *_buffer, uint8_t start, igh_msg_type msg_type, igh_msg_dir dir )
{
   d4620:	b570      	push	{r4, r5, r6, lr}
    uint8_t i = start;

    // Add Message type
    _buffer[i++] = ERROR_MSG;
   d4622:	54c1      	strb	r1, [r0, r3]

    // Add direction
    _buffer[i++] = IGH_UPLOAD;
   d4624:	1c59      	adds	r1, r3, #1
        device_restart = false;
    }
}

uint8_t igh_app_add_message_header( uint8_t *_buffer, uint8_t start, igh_msg_type msg_type, igh_msg_dir dir )
{
   d4626:	4602      	mov	r2, r0

    // Add Message type
    _buffer[i++] = ERROR_MSG;

    // Add direction
    _buffer[i++] = IGH_UPLOAD;
   d4628:	b2c9      	uxtb	r1, r1
   d462a:	2055      	movs	r0, #85	; 0x55
   d462c:	5450      	strb	r0, [r2, r1]

    // Add shield serial number
    memcpy( &_buffer[i], 
            igh_current_system_settings.serial_number, 
            sizeof(igh_current_system_settings.serial_number) );
   d462e:	4c0a      	ldr	r4, [pc, #40]	; (d4658 <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir+0x3c>)
   d4630:	1c9d      	adds	r5, r3, #2
   d4632:	cc03      	ldmia	r4!, {r0, r1}
   d4634:	b2ed      	uxtb	r5, r5
   d4636:	1956      	adds	r6, r2, r5
   d4638:	5150      	str	r0, [r2, r5]
   d463a:	6071      	str	r1, [r6, #4]

    i += sizeof(igh_current_system_settings.serial_number);

    // Add incremental message ID
    static uint8_t message_id = 0;
    _buffer[i++] = message_id++;
   d463c:	4907      	ldr	r1, [pc, #28]	; (d465c <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir+0x40>)
    _buffer[i++] = IGH_UPLOAD;

    // Add shield serial number
    memcpy( &_buffer[i], 
            igh_current_system_settings.serial_number, 
            sizeof(igh_current_system_settings.serial_number) );
   d463e:	6820      	ldr	r0, [r4, #0]
   d4640:	60b0      	str	r0, [r6, #8]

    i += sizeof(igh_current_system_settings.serial_number);

    // Add incremental message ID
    static uint8_t message_id = 0;
    _buffer[i++] = message_id++;
   d4642:	7808      	ldrb	r0, [r1, #0]
   d4644:	1c44      	adds	r4, r0, #1
   d4646:	700c      	strb	r4, [r1, #0]
   d4648:	f103 010e 	add.w	r1, r3, #14
   d464c:	b2c9      	uxtb	r1, r1
   d464e:	5450      	strb	r0, [r2, r1]

    return i;
   d4650:	f103 000f 	add.w	r0, r3, #15
}
   d4654:	b2c0      	uxtb	r0, r0
   d4656:	bd70      	pop	{r4, r5, r6, pc}
   d4658:	2003e64c 	.word	0x2003e64c
   d465c:	2003db53 	.word	0x2003db53

000d4660 <_Z19igh_app_add_payloadPhhS_h>:

uint8_t igh_app_add_payload( uint8_t *_buffer, uint8_t start, uint8_t * _payload, uint8_t _payload_len )
{
   d4660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4664:	460c      	mov	r4, r1
   d4666:	4605      	mov	r5, r0
   d4668:	4699      	mov	r9, r3
   d466a:	4690      	mov	r8, r2
    uint32_t timestamp_to_store = (uint32_t)igh_boron_unix_time();
   d466c:	f000 fdc8 	bl	d5200 <_Z19igh_boron_unix_timev>
   d4670:	4607      	mov	r7, r0
    float battery_soc_float = igh_boron_SoC();
   d4672:	f000 fdc7 	bl	d5204 <_Z13igh_boron_SoCv>
    uint32_t total_water_dispensed = 12364897; // replace with actual reading

    uint8_t i = start;

    // Add DATA PKT PID
    _buffer[i++] = DATA_PKT;
   d4676:	23fe      	movs	r3, #254	; 0xfe
   d4678:	552b      	strb	r3, [r5, r4]
    i++; // leave room for payload length

    // Add Timestamp
    _buffer[i++] = STORE_TIMESTAMP;
   d467a:	1ca3      	adds	r3, r4, #2
   d467c:	b2db      	uxtb	r3, r3
   d467e:	2202      	movs	r2, #2
   d4680:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = SIZE_OF_STORE_TIMESTAMP;
   d4682:	1ce3      	adds	r3, r4, #3
   d4684:	b2db      	uxtb	r3, r3
   d4686:	2204      	movs	r2, #4
   d4688:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)timestamp_to_store;
   d468a:	18a3      	adds	r3, r4, r2
   d468c:	b2db      	uxtb	r3, r3
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 8);
   d468e:	0a39      	lsrs	r1, r7, #8
    i++; // leave room for payload length

    // Add Timestamp
    _buffer[i++] = STORE_TIMESTAMP;
    _buffer[i++] = SIZE_OF_STORE_TIMESTAMP;
    _buffer[i++] = (uint8_t)timestamp_to_store;
   d4690:	54ef      	strb	r7, [r5, r3]
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 8);
   d4692:	1d63      	adds	r3, r4, #5
   d4694:	b2db      	uxtb	r3, r3
uint8_t igh_app_add_payload( uint8_t *_buffer, uint8_t start, uint8_t * _payload, uint8_t _payload_len )
{
    uint32_t timestamp_to_store = (uint32_t)igh_boron_unix_time();
    float battery_soc_float = igh_boron_SoC();
    uint32_t battery_soc;
    memcpy(&battery_soc, &battery_soc_float, sizeof battery_soc);
   d4696:	ee10 6a10 	vmov	r6, s0

    // Add Timestamp
    _buffer[i++] = STORE_TIMESTAMP;
    _buffer[i++] = SIZE_OF_STORE_TIMESTAMP;
    _buffer[i++] = (uint8_t)timestamp_to_store;
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 8);
   d469a:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 16);
   d469c:	1da3      	adds	r3, r4, #6
   d469e:	b2db      	uxtb	r3, r3
   d46a0:	0c39      	lsrs	r1, r7, #16
   d46a2:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 24);
   d46a4:	1de3      	adds	r3, r4, #7
   d46a6:	b2db      	uxtb	r3, r3
   d46a8:	0e3f      	lsrs	r7, r7, #24
   d46aa:	54ef      	strb	r7, [r5, r3]

    // Add Shield battery level
    _buffer[i++] = SHIELD_BATTERY_LEVEL;
   d46ac:	f104 0308 	add.w	r3, r4, #8
   d46b0:	b2db      	uxtb	r3, r3
   d46b2:	210d      	movs	r1, #13
   d46b4:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = SIZE_OF_SHIELD_BATTERY_LEVEL;
   d46b6:	f104 0309 	add.w	r3, r4, #9
   d46ba:	b2db      	uxtb	r3, r3
    _buffer[i++] = (uint8_t)battery_soc;
    _buffer[i++] = (uint8_t)( battery_soc >> 8);
   d46bc:	0a31      	lsrs	r1, r6, #8
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 16);
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 24);

    // Add Shield battery level
    _buffer[i++] = SHIELD_BATTERY_LEVEL;
    _buffer[i++] = SIZE_OF_SHIELD_BATTERY_LEVEL;
   d46be:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)battery_soc;
   d46c0:	f104 030a 	add.w	r3, r4, #10
   d46c4:	b2db      	uxtb	r3, r3
    _buffer[i++] = WATER_DISPENSED;
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
    _buffer[i++] = (uint8_t)total_water_dispensed;
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 8);
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 16);
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 24);
   d46c6:	f104 0017 	add.w	r0, r4, #23
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 24);

    // Add Shield battery level
    _buffer[i++] = SHIELD_BATTERY_LEVEL;
    _buffer[i++] = SIZE_OF_SHIELD_BATTERY_LEVEL;
    _buffer[i++] = (uint8_t)battery_soc;
   d46ca:	54ee      	strb	r6, [r5, r3]
    _buffer[i++] = (uint8_t)( battery_soc >> 8);
   d46cc:	f104 030b 	add.w	r3, r4, #11
   d46d0:	b2db      	uxtb	r3, r3
    _buffer[i++] = WATER_DISPENSED;
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
    _buffer[i++] = (uint8_t)total_water_dispensed;
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 8);
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 16);
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 24);
   d46d2:	b2c0      	uxtb	r0, r0

    // Add Shield battery level
    _buffer[i++] = SHIELD_BATTERY_LEVEL;
    _buffer[i++] = SIZE_OF_SHIELD_BATTERY_LEVEL;
    _buffer[i++] = (uint8_t)battery_soc;
    _buffer[i++] = (uint8_t)( battery_soc >> 8);
   d46d4:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = (uint8_t)( battery_soc >> 16);
   d46d6:	f104 030c 	add.w	r3, r4, #12
   d46da:	b2db      	uxtb	r3, r3
   d46dc:	0c31      	lsrs	r1, r6, #16
   d46de:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = (uint8_t)( battery_soc >> 24);
   d46e0:	f104 030d 	add.w	r3, r4, #13
   d46e4:	b2db      	uxtb	r3, r3
   d46e6:	0e36      	lsrs	r6, r6, #24
   d46e8:	54ee      	strb	r6, [r5, r3]

    // Add Valve position
    _buffer[i++] = VALVE_POSITION;
   d46ea:	f104 030e 	add.w	r3, r4, #14
   d46ee:	b2db      	uxtb	r3, r3
   d46f0:	210f      	movs	r1, #15
   d46f2:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = SIZE_OF_VALVE_POSITION;
   d46f4:	1863      	adds	r3, r4, r1
   d46f6:	b2db      	uxtb	r3, r3
   d46f8:	2101      	movs	r1, #1
   d46fa:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = current_valve_position;
   d46fc:	4b1a      	ldr	r3, [pc, #104]	; (d4768 <_Z19igh_app_add_payloadPhhS_h+0x108>)
   d46fe:	7819      	ldrb	r1, [r3, #0]
   d4700:	f104 0310 	add.w	r3, r4, #16
   d4704:	b2db      	uxtb	r3, r3
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 8);
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 16);
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 24);

    // only add payload if the package fits, prevvent memory leak
    if( (_payload_len + i + 1) < MESSAGE_SIZE )
   d4706:	eb09 0600 	add.w	r6, r9, r0
    _buffer[i++] = (uint8_t)( battery_soc >> 24);

    // Add Valve position
    _buffer[i++] = VALVE_POSITION;
    _buffer[i++] = SIZE_OF_VALVE_POSITION;
    _buffer[i++] = current_valve_position;
   d470a:	54e9      	strb	r1, [r5, r3]

    // Add water dispensed 
    _buffer[i++] = WATER_DISPENSED;
   d470c:	f104 0311 	add.w	r3, r4, #17
   d4710:	b2db      	uxtb	r3, r3
   d4712:	2107      	movs	r1, #7
   d4714:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
   d4716:	f104 0312 	add.w	r3, r4, #18
   d471a:	b2db      	uxtb	r3, r3
    _buffer[i++] = (uint8_t)total_water_dispensed;
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 8);
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 16);
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 24);
   d471c:	f104 0116 	add.w	r1, r4, #22
    _buffer[i++] = SIZE_OF_VALVE_POSITION;
    _buffer[i++] = current_valve_position;

    // Add water dispensed 
    _buffer[i++] = WATER_DISPENSED;
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
   d4720:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)total_water_dispensed;
   d4722:	f104 0313 	add.w	r3, r4, #19
   d4726:	b2db      	uxtb	r3, r3
   d4728:	2261      	movs	r2, #97	; 0x61
   d472a:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 8);
   d472c:	f104 0314 	add.w	r3, r4, #20
   d4730:	b2db      	uxtb	r3, r3
   d4732:	22ac      	movs	r2, #172	; 0xac
   d4734:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 16);
   d4736:	f104 0315 	add.w	r3, r4, #21
   d473a:	b2db      	uxtb	r3, r3
   d473c:	22bc      	movs	r2, #188	; 0xbc
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 24);
   d473e:	b2c9      	uxtb	r1, r1
    // Add water dispensed 
    _buffer[i++] = WATER_DISPENSED;
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
    _buffer[i++] = (uint8_t)total_water_dispensed;
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 8);
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 16);
   d4740:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 24);

    // only add payload if the package fits, prevvent memory leak
    if( (_payload_len + i + 1) < MESSAGE_SIZE )
   d4742:	2efd      	cmp	r6, #253	; 0xfd
    _buffer[i++] = WATER_DISPENSED;
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
    _buffer[i++] = (uint8_t)total_water_dispensed;
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 8);
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 16);
    _buffer[i++] = (uint8_t)( total_water_dispensed >> 24);
   d4744:	f04f 0300 	mov.w	r3, #0
   d4748:	546b      	strb	r3, [r5, r1]

    // only add payload if the package fits, prevvent memory leak
    if( (_payload_len + i + 1) < MESSAGE_SIZE )
   d474a:	dc05      	bgt.n	d4758 <_Z19igh_app_add_payloadPhhS_h+0xf8>
    {
        memcpy(&_buffer[i], _payload, _payload_len);
   d474c:	464a      	mov	r2, r9
   d474e:	4641      	mov	r1, r8
   d4750:	4428      	add	r0, r5
   d4752:	f005 f8c6 	bl	d98e2 <memcpy>
        i += _payload_len;
   d4756:	b2f0      	uxtb	r0, r6
    }

    // add the payload length
    _buffer[ start + 1 ] = i - start - 2;
   d4758:	4425      	add	r5, r4
   d475a:	f1c4 04fe 	rsb	r4, r4, #254	; 0xfe
   d475e:	4404      	add	r4, r0
   d4760:	706c      	strb	r4, [r5, #1]

    return i;
}
   d4762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4766:	bf00      	nop
   d4768:	2003e67c 	.word	0x2003e67c

000d476c <_Z37igh_app_receive_and_stage_sensor_datav>:
    // rfm69 service in the background
    igh_rfm69_service();
}

void igh_app_receive_and_stage_sensor_data( void )
{
   d476c:	b570      	push	{r4, r5, r6, lr}
   d476e:	b090      	sub	sp, #64	; 0x40
    uint8_t rx_buffer[RF69_MAX_DATA_LEN];
    uint8_t data_rx_len = 0;

    data_rx_len = igh_rfm69_receive_raw_bytes( rx_buffer, sizeof(rx_buffer) );
   d4770:	213d      	movs	r1, #61	; 0x3d
   d4772:	4668      	mov	r0, sp
   d4774:	f000 fe02 	bl	d537c <_Z27igh_rfm69_receive_raw_bytesPhh>

    if( 0 != data_rx_len )
   d4778:	4605      	mov	r5, r0
   d477a:	2800      	cmp	r0, #0
   d477c:	d03b      	beq.n	d47f6 <_Z37igh_app_receive_and_stage_sensor_datav+0x8a>
    {
        uint8_t i = 0; // keep track of pkt data

        // first clear the buffer
        memset( igh_msg_buffer, 0, sizeof(igh_msg_buffer) );
   d477e:	4c1f      	ldr	r4, [pc, #124]	; (d47fc <_Z37igh_app_receive_and_stage_sensor_datav+0x90>)
   d4780:	22ff      	movs	r2, #255	; 0xff
   d4782:	2100      	movs	r1, #0
   d4784:	4620      	mov	r0, r4
   d4786:	f005 f8b7 	bl	d98f8 <memset>

        // Add frame start
        igh_msg_buffer[i++] = FRAME_START;
   d478a:	233c      	movs	r3, #60	; 0x3c
   d478c:	7023      	strb	r3, [r4, #0]
        i++; // leave room for pkg length

        i = igh_app_add_message_header( igh_msg_buffer, i, ERROR_MSG, IGH_UPLOAD );
   d478e:	2245      	movs	r2, #69	; 0x45
   d4790:	2355      	movs	r3, #85	; 0x55
   d4792:	2102      	movs	r1, #2
   d4794:	4620      	mov	r0, r4
   d4796:	f7ff ff41 	bl	d461c <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir>
        i = igh_app_add_payload( igh_msg_buffer, i, rx_buffer, data_rx_len );
   d479a:	462b      	mov	r3, r5
   d479c:	4601      	mov	r1, r0
   d479e:	466a      	mov	r2, sp
   d47a0:	4620      	mov	r0, r4
   d47a2:	f7ff ff5d 	bl	d4660 <_Z19igh_app_add_payloadPhhS_h>

        // Add Frame End 
        igh_msg_buffer[i++] = FRAME_END;
   d47a6:	1c45      	adds	r5, r0, #1
   d47a8:	233e      	movs	r3, #62	; 0x3e
   d47aa:	b2ed      	uxtb	r5, r5
   d47ac:	5423      	strb	r3, [r4, r0]

        igh_msg_buffer[1] = i; // add length
   d47ae:	7065      	strb	r5, [r4, #1]

        Serial.print("{");
   d47b0:	f003 fc16 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d47b4:	4912      	ldr	r1, [pc, #72]	; (d4800 <_Z37igh_app_receive_and_stage_sensor_datav+0x94>)
   d47b6:	f003 f8b3 	bl	d7920 <_ZN5Print5printEPKc>
   d47ba:	1e6b      	subs	r3, r5, #1
   d47bc:	1e66      	subs	r6, r4, #1
   d47be:	441c      	add	r4, r3
        for( uint8_t k = 0; k < i; k++ )
   d47c0:	42a6      	cmp	r6, r4
   d47c2:	d00f      	beq.n	d47e4 <_Z37igh_app_receive_and_stage_sensor_datav+0x78>
        {
            if( igh_msg_buffer[k] <= 0x0F ) Serial.print("0");
   d47c4:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   d47c8:	2b0f      	cmp	r3, #15
   d47ca:	d804      	bhi.n	d47d6 <_Z37igh_app_receive_and_stage_sensor_datav+0x6a>
   d47cc:	f003 fc08 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d47d0:	490c      	ldr	r1, [pc, #48]	; (d4804 <_Z37igh_app_receive_and_stage_sensor_datav+0x98>)
   d47d2:	f003 f8a5 	bl	d7920 <_ZN5Print5printEPKc>
            Serial.print(igh_msg_buffer[k], HEX);
   d47d6:	f003 fc03 	bl	d7fe0 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d47da:	2210      	movs	r2, #16
   d47dc:	7831      	ldrb	r1, [r6, #0]
   d47de:	f003 f8bc 	bl	d795a <_ZN5Print11printNumberEmh>
        igh_msg_buffer[i++] = FRAME_END;

        igh_msg_buffer[1] = i; // add length

        Serial.print("{");
        for( uint8_t k = 0; k < i; k++ )
   d47e2:	e7ed      	b.n	d47c0 <_Z37igh_app_receive_and_stage_sensor_datav+0x54>
        {
            if( igh_msg_buffer[k] <= 0x0F ) Serial.print("0");
            Serial.print(igh_msg_buffer[k], HEX);
        }
        Serial.print("}\n");
   d47e4:	f003 fbfc 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d47e8:	4907      	ldr	r1, [pc, #28]	; (d4808 <_Z37igh_app_receive_and_stage_sensor_datav+0x9c>)
   d47ea:	f003 f899 	bl	d7920 <_ZN5Print5printEPKc>

        // publish the data or store it if the publish fails
        igh_mqtt_publish_data( igh_msg_buffer, (unsigned int)i );
   d47ee:	4629      	mov	r1, r5
   d47f0:	4802      	ldr	r0, [pc, #8]	; (d47fc <_Z37igh_app_receive_and_stage_sensor_datav+0x90>)
   d47f2:	f000 fa59 	bl	d4ca8 <_Z21igh_mqtt_publish_dataPhj>

    }
}
   d47f6:	b010      	add	sp, #64	; 0x40
   d47f8:	bd70      	pop	{r4, r5, r6, pc}
   d47fa:	bf00      	nop
   d47fc:	2003e6f1 	.word	0x2003e6f1
   d4800:	000d9a29 	.word	0x000d9a29
   d4804:	000d9982 	.word	0x000d9982
   d4808:	000d9984 	.word	0x000d9984

000d480c <_Z27igh_app_send_device_restartv>:

void igh_app_send_device_restart( void )
{
   d480c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( true == device_restart )
   d480e:	4b26      	ldr	r3, [pc, #152]	; (d48a8 <_Z27igh_app_send_device_restartv+0x9c>)
   d4810:	781d      	ldrb	r5, [r3, #0]
   d4812:	2d01      	cmp	r5, #1
   d4814:	461f      	mov	r7, r3
   d4816:	d144      	bne.n	d48a2 <_Z27igh_app_send_device_restartv+0x96>
    {
        uint8_t i = 0; // keep track of pkt data
        uint8_t restart_msg[3];

        // first clear the buffer
        memset( igh_msg_buffer, 0, sizeof(igh_msg_buffer) );
   d4818:	4c24      	ldr	r4, [pc, #144]	; (d48ac <_Z27igh_app_send_device_restartv+0xa0>)
   d481a:	22ff      	movs	r2, #255	; 0xff
   d481c:	2100      	movs	r1, #0
   d481e:	4620      	mov	r0, r4
   d4820:	f005 f86a 	bl	d98f8 <memset>

        // Add Retart Message
        restart_msg[0] = RESTART;
   d4824:	23fd      	movs	r3, #253	; 0xfd
   d4826:	f88d 3004 	strb.w	r3, [sp, #4]
        restart_msg[1] = SIZE_OF_RESTART;
        restart_msg[2] = true;

        // Add frame start
        igh_msg_buffer[i++] = FRAME_START;
   d482a:	233c      	movs	r3, #60	; 0x3c
   d482c:	7023      	strb	r3, [r4, #0]
        i++; // leave room for pkg length

        i = igh_app_add_message_header( igh_msg_buffer, i, ERROR_MSG, IGH_UPLOAD );
   d482e:	2245      	movs	r2, #69	; 0x45
   d4830:	2355      	movs	r3, #85	; 0x55
   d4832:	2102      	movs	r1, #2
   d4834:	4620      	mov	r0, r4
        // first clear the buffer
        memset( igh_msg_buffer, 0, sizeof(igh_msg_buffer) );

        // Add Retart Message
        restart_msg[0] = RESTART;
        restart_msg[1] = SIZE_OF_RESTART;
   d4836:	f88d 5005 	strb.w	r5, [sp, #5]
        restart_msg[2] = true;
   d483a:	f88d 5006 	strb.w	r5, [sp, #6]

        // Add frame start
        igh_msg_buffer[i++] = FRAME_START;
        i++; // leave room for pkg length

        i = igh_app_add_message_header( igh_msg_buffer, i, ERROR_MSG, IGH_UPLOAD );
   d483e:	f7ff feed 	bl	d461c <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir>
        i = igh_app_add_payload( igh_msg_buffer, i, restart_msg, sizeof(restart_msg) );
   d4842:	aa01      	add	r2, sp, #4
   d4844:	4601      	mov	r1, r0
   d4846:	2303      	movs	r3, #3
   d4848:	4620      	mov	r0, r4
   d484a:	f7ff ff09 	bl	d4660 <_Z19igh_app_add_payloadPhhS_h>

        // Add Frame End 
        igh_msg_buffer[i++] = FRAME_END;
   d484e:	1c45      	adds	r5, r0, #1
   d4850:	233e      	movs	r3, #62	; 0x3e
   d4852:	b2ed      	uxtb	r5, r5
   d4854:	5423      	strb	r3, [r4, r0]

        igh_msg_buffer[1] = i; // add length
   d4856:	7065      	strb	r5, [r4, #1]

        Serial.print("{");
   d4858:	f003 fbc2 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d485c:	4914      	ldr	r1, [pc, #80]	; (d48b0 <_Z27igh_app_send_device_restartv+0xa4>)
   d485e:	f003 f85f 	bl	d7920 <_ZN5Print5printEPKc>
   d4862:	1e6b      	subs	r3, r5, #1
   d4864:	1e66      	subs	r6, r4, #1
   d4866:	441c      	add	r4, r3
        for( uint8_t k = 0; k < i; k++ )
   d4868:	42a6      	cmp	r6, r4
   d486a:	d00f      	beq.n	d488c <_Z27igh_app_send_device_restartv+0x80>
        {
            if( igh_msg_buffer[k] <= 0x0F ) Serial.print("0");
   d486c:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   d4870:	2b0f      	cmp	r3, #15
   d4872:	d804      	bhi.n	d487e <_Z27igh_app_send_device_restartv+0x72>
   d4874:	f003 fbb4 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d4878:	490e      	ldr	r1, [pc, #56]	; (d48b4 <_Z27igh_app_send_device_restartv+0xa8>)
   d487a:	f003 f851 	bl	d7920 <_ZN5Print5printEPKc>
            Serial.print(igh_msg_buffer[k], HEX);
   d487e:	f003 fbaf 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d4882:	2210      	movs	r2, #16
   d4884:	7831      	ldrb	r1, [r6, #0]
   d4886:	f003 f868 	bl	d795a <_ZN5Print11printNumberEmh>
   d488a:	e7ed      	b.n	d4868 <_Z27igh_app_send_device_restartv+0x5c>
        }
        Serial.print("}\n");
   d488c:	f003 fba8 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d4890:	4909      	ldr	r1, [pc, #36]	; (d48b8 <_Z27igh_app_send_device_restartv+0xac>)
   d4892:	f003 f845 	bl	d7920 <_ZN5Print5printEPKc>

        // publish the data or store it if the publish fails
        igh_mqtt_publish_data( igh_msg_buffer, (unsigned int)i );
   d4896:	4629      	mov	r1, r5
   d4898:	4804      	ldr	r0, [pc, #16]	; (d48ac <_Z27igh_app_send_device_restartv+0xa0>)
   d489a:	f000 fa05 	bl	d4ca8 <_Z21igh_mqtt_publish_dataPhj>

        device_restart = false;
   d489e:	2300      	movs	r3, #0
   d48a0:	703b      	strb	r3, [r7, #0]
    }
}
   d48a2:	b003      	add	sp, #12
   d48a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d48a6:	bf00      	nop
   d48a8:	2003da7b 	.word	0x2003da7b
   d48ac:	2003e6f1 	.word	0x2003e6f1
   d48b0:	000d9a29 	.word	0x000d9a29
   d48b4:	000d9982 	.word	0x000d9982
   d48b8:	000d9984 	.word	0x000d9984

000d48bc <_Z27igh_app_commit_new_settingsv>:
        }
    }
}

void igh_app_commit_new_settings( void )
{
   d48bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( 1 == new_settings_available )
   d48be:	4b45      	ldr	r3, [pc, #276]	; (d49d4 <_Z27igh_app_commit_new_settingsv+0x118>)
   d48c0:	781a      	ldrb	r2, [r3, #0]
   d48c2:	2a01      	cmp	r2, #1
   d48c4:	461e      	mov	r6, r3
   d48c6:	f040 8084 	bne.w	d49d2 <_Z27igh_app_commit_new_settingsv+0x116>
    {
        Serial.print("OP STATE:"); Serial.println(igh_current_system_settings.op_state);
   d48ca:	f003 fb89 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d48ce:	4942      	ldr	r1, [pc, #264]	; (d49d8 <_Z27igh_app_commit_new_settingsv+0x11c>)
   d48d0:	4c42      	ldr	r4, [pc, #264]	; (d49dc <_Z27igh_app_commit_new_settingsv+0x120>)
   d48d2:	f003 f825 	bl	d7920 <_ZN5Print5printEPKc>
   d48d6:	f003 fb83 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d48da:	220a      	movs	r2, #10
   d48dc:	7861      	ldrb	r1, [r4, #1]
   d48de:	4605      	mov	r5, r0
   d48e0:	f003 f83b 	bl	d795a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d48e4:	4628      	mov	r0, r5
   d48e6:	f003 f822 	bl	d792e <_ZN5Print7printlnEv>
        Serial.print("REPORTING INTERVAL: "); Serial.println(igh_current_system_settings.reporting_interval);
   d48ea:	f003 fb79 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d48ee:	493c      	ldr	r1, [pc, #240]	; (d49e0 <_Z27igh_app_commit_new_settingsv+0x124>)
   d48f0:	f003 f816 	bl	d7920 <_ZN5Print5printEPKc>
   d48f4:	f003 fb74 	bl	d7fe0 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d48f8:	220a      	movs	r2, #10
   d48fa:	6861      	ldr	r1, [r4, #4]
   d48fc:	4605      	mov	r5, r0
   d48fe:	f003 f82c 	bl	d795a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4902:	4628      	mov	r0, r5
   d4904:	f003 f813 	bl	d792e <_ZN5Print7printlnEv>
        Serial.print("DATA RESOLUTION: "); Serial.println(igh_current_system_settings.data_resolution);
   d4908:	f003 fb6a 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d490c:	4935      	ldr	r1, [pc, #212]	; (d49e4 <_Z27igh_app_commit_new_settingsv+0x128>)
   d490e:	f003 f807 	bl	d7920 <_ZN5Print5printEPKc>
   d4912:	f003 fb65 	bl	d7fe0 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4916:	220a      	movs	r2, #10
   d4918:	68a1      	ldr	r1, [r4, #8]
   d491a:	4605      	mov	r5, r0
   d491c:	f003 f81d 	bl	d795a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4920:	4628      	mov	r0, r5
   d4922:	f003 f804 	bl	d792e <_ZN5Print7printlnEv>
        Serial.print("SERIAL NUMBER: ");
   d4926:	f003 fb5b 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d492a:	492f      	ldr	r1, [pc, #188]	; (d49e8 <_Z27igh_app_commit_new_settingsv+0x12c>)
   d492c:	f002 fff8 	bl	d7920 <_ZN5Print5printEPKc>
   d4930:	f104 050b 	add.w	r5, r4, #11
   d4934:	f104 0717 	add.w	r7, r4, #23
        for( uint8_t i = 0; i < sizeof(igh_default_system_settings.serial_number); i++ )
        {
            if( igh_current_system_settings.serial_number[i] <= 0x0F ) Serial.print("0");
   d4938:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d493c:	2b0f      	cmp	r3, #15
   d493e:	d804      	bhi.n	d494a <_Z27igh_app_commit_new_settingsv+0x8e>
   d4940:	f003 fb4e 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d4944:	4929      	ldr	r1, [pc, #164]	; (d49ec <_Z27igh_app_commit_new_settingsv+0x130>)
   d4946:	f002 ffeb 	bl	d7920 <_ZN5Print5printEPKc>
            Serial.print(igh_current_system_settings.serial_number[i], HEX);
   d494a:	f003 fb49 	bl	d7fe0 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d494e:	2210      	movs	r2, #16
   d4950:	7829      	ldrb	r1, [r5, #0]
   d4952:	f003 f802 	bl	d795a <_ZN5Print11printNumberEmh>
    {
        Serial.print("OP STATE:"); Serial.println(igh_current_system_settings.op_state);
        Serial.print("REPORTING INTERVAL: "); Serial.println(igh_current_system_settings.reporting_interval);
        Serial.print("DATA RESOLUTION: "); Serial.println(igh_current_system_settings.data_resolution);
        Serial.print("SERIAL NUMBER: ");
        for( uint8_t i = 0; i < sizeof(igh_default_system_settings.serial_number); i++ )
   d4956:	42af      	cmp	r7, r5
   d4958:	d1ee      	bne.n	d4938 <_Z27igh_app_commit_new_settingsv+0x7c>
        {
            if( igh_current_system_settings.serial_number[i] <= 0x0F ) Serial.print("0");
            Serial.print(igh_current_system_settings.serial_number[i], HEX);
        }
        Serial.print("\n");
   d495a:	f003 fb41 	bl	d7fe0 <_Z16_fetch_usbserialv>
        Serial.print("MQTT BROKER: "); Serial.println((char *)igh_current_system_settings.broker);
   d495e:	4d24      	ldr	r5, [pc, #144]	; (d49f0 <_Z27igh_app_commit_new_settingsv+0x134>)
        for( uint8_t i = 0; i < sizeof(igh_default_system_settings.serial_number); i++ )
        {
            if( igh_current_system_settings.serial_number[i] <= 0x0F ) Serial.print("0");
            Serial.print(igh_current_system_settings.serial_number[i], HEX);
        }
        Serial.print("\n");
   d4960:	4924      	ldr	r1, [pc, #144]	; (d49f4 <_Z27igh_app_commit_new_settingsv+0x138>)
   d4962:	f002 ffdd 	bl	d7920 <_ZN5Print5printEPKc>
        Serial.print("MQTT BROKER: "); Serial.println((char *)igh_current_system_settings.broker);
   d4966:	f003 fb3b 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d496a:	4923      	ldr	r1, [pc, #140]	; (d49f8 <_Z27igh_app_commit_new_settingsv+0x13c>)
   d496c:	f002 ffd8 	bl	d7920 <_ZN5Print5printEPKc>
   d4970:	f003 fb36 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d4974:	4629      	mov	r1, r5
   d4976:	f002 ffe6 	bl	d7946 <_ZN5Print7printlnEPKc>
        Serial.print("MQTT BROKER PORT: "); Serial.println(igh_current_system_settings.broker_port);
   d497a:	f003 fb31 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d497e:	491f      	ldr	r1, [pc, #124]	; (d49fc <_Z27igh_app_commit_new_settingsv+0x140>)
   d4980:	f002 ffce 	bl	d7920 <_ZN5Print5printEPKc>
   d4984:	f003 fb2c 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d4988:	220a      	movs	r2, #10
   d498a:	8f21      	ldrh	r1, [r4, #56]	; 0x38
   d498c:	4607      	mov	r7, r0
   d498e:	f002 ffe4 	bl	d795a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4992:	4638      	mov	r0, r7
   d4994:	f002 ffcb 	bl	d792e <_ZN5Print7printlnEv>
        Serial.print("CHECKSUM: "); Serial.println(igh_current_system_settings.checksum);
   d4998:	f003 fb22 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d499c:	4918      	ldr	r1, [pc, #96]	; (d4a00 <_Z27igh_app_commit_new_settingsv+0x144>)
   d499e:	f002 ffbf 	bl	d7920 <_ZN5Print5printEPKc>
   d49a2:	f003 fb1d 	bl	d7fe0 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d49a6:	220a      	movs	r2, #10
   d49a8:	f815 1c18 	ldrb.w	r1, [r5, #-24]
   d49ac:	4604      	mov	r4, r0
   d49ae:	f002 ffd4 	bl	d795a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d49b2:	4620      	mov	r0, r4
   d49b4:	f002 ffbb 	bl	d792e <_ZN5Print7printlnEv>

        if ( true == igh_eeprom_save_system_settings( &igh_current_system_settings) )
   d49b8:	f1a5 0018 	sub.w	r0, r5, #24
   d49bc:	f000 fa28 	bl	d4e10 <_Z31igh_eeprom_save_system_settingsP15system_settings>
   d49c0:	2801      	cmp	r0, #1
   d49c2:	d104      	bne.n	d49ce <_Z27igh_app_commit_new_settingsv+0x112>
        {
            Serial.println("Settings Saved successfully");
   d49c4:	f003 fb0c 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d49c8:	490e      	ldr	r1, [pc, #56]	; (d4a04 <_Z27igh_app_commit_new_settingsv+0x148>)
   d49ca:	f002 ffbc 	bl	d7946 <_ZN5Print7printlnEPKc>
        }

        new_settings_available = 0;
   d49ce:	2300      	movs	r3, #0
   d49d0:	7033      	strb	r3, [r6, #0]
   d49d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d49d4:	2003db50 	.word	0x2003db50
   d49d8:	000d9987 	.word	0x000d9987
   d49dc:	2003e640 	.word	0x2003e640
   d49e0:	000d9991 	.word	0x000d9991
   d49e4:	000d99a6 	.word	0x000d99a6
   d49e8:	000d99b8 	.word	0x000d99b8
   d49ec:	000d9982 	.word	0x000d9982
   d49f0:	2003e658 	.word	0x2003e658
   d49f4:	000d9d73 	.word	0x000d9d73
   d49f8:	000d99c8 	.word	0x000d99c8
   d49fc:	000d99d6 	.word	0x000d99d6
   d4a00:	000d99e9 	.word	0x000d99e9
   d4a04:	000d99f4 	.word	0x000d99f4

000d4a08 <_Z27igh_app_get_serial_hex_dataPhh>:
    }
}

uint8_t igh_app_get_serial_hex_data( uint8_t * buffer, uint8_t len )
{
   d4a08:	b570      	push	{r4, r5, r6, lr}
   d4a0a:	460d      	mov	r5, r1
   d4a0c:	4606      	mov	r6, r0
    uint8_t ret = 0;

    uint8_t bytes_available = Serial.available();
   d4a0e:	f003 fae7 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d4a12:	6803      	ldr	r3, [r0, #0]
   d4a14:	691b      	ldr	r3, [r3, #16]
   d4a16:	4798      	blx	r3
   d4a18:	b2c4      	uxtb	r4, r0
    if( bytes_available > 0 )
   d4a1a:	b90c      	cbnz	r4, d4a20 <_Z27igh_app_get_serial_hex_dataPhh+0x18>
    }
}

uint8_t igh_app_get_serial_hex_data( uint8_t * buffer, uint8_t len )
{
    uint8_t ret = 0;
   d4a1c:	2400      	movs	r4, #0
   d4a1e:	e019      	b.n	d4a54 <_Z27igh_app_get_serial_hex_dataPhh+0x4c>

    uint8_t bytes_available = Serial.available();
    if( bytes_available > 0 )
    {
        if( bytes_available <= len )
   d4a20:	42ac      	cmp	r4, r5
   d4a22:	d80c      	bhi.n	d4a3e <_Z27igh_app_get_serial_hex_dataPhh+0x36>
   d4a24:	4635      	mov	r5, r6
        {
            for( uint8_t i = 0; i < bytes_available; i++ )
            {
                // read all available bytes
                buffer[i] = Serial.read();
   d4a26:	f003 fadb 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d4a2a:	6803      	ldr	r3, [r0, #0]
   d4a2c:	695b      	ldr	r3, [r3, #20]
   d4a2e:	4798      	blx	r3
   d4a30:	f805 0b01 	strb.w	r0, [r5], #1
    uint8_t bytes_available = Serial.available();
    if( bytes_available > 0 )
    {
        if( bytes_available <= len )
        {
            for( uint8_t i = 0; i < bytes_available; i++ )
   d4a34:	1bab      	subs	r3, r5, r6
   d4a36:	b2db      	uxtb	r3, r3
   d4a38:	429c      	cmp	r4, r3
   d4a3a:	d8f4      	bhi.n	d4a26 <_Z27igh_app_get_serial_hex_dataPhh+0x1e>
   d4a3c:	e00a      	b.n	d4a54 <_Z27igh_app_get_serial_hex_dataPhh+0x4c>
   d4a3e:	2500      	movs	r5, #0
        else
        {
            for( uint8_t i = 0; i < bytes_available; i++ )
            {
                // dump the data
                Serial.read();
   d4a40:	f003 face 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d4a44:	6803      	ldr	r3, [r0, #0]
   d4a46:	3501      	adds	r5, #1
   d4a48:	695b      	ldr	r3, [r3, #20]
   d4a4a:	4798      	blx	r3
            }
            ret = bytes_available;
        }
        else
        {
            for( uint8_t i = 0; i < bytes_available; i++ )
   d4a4c:	b2eb      	uxtb	r3, r5
   d4a4e:	429c      	cmp	r4, r3
   d4a50:	d8f6      	bhi.n	d4a40 <_Z27igh_app_get_serial_hex_dataPhh+0x38>
   d4a52:	e7e3      	b.n	d4a1c <_Z27igh_app_get_serial_hex_dataPhh+0x14>
                Serial.read();
            }
        }
    }
    return ret;
}
   d4a54:	4620      	mov	r0, r4
   d4a56:	bd70      	pop	{r4, r5, r6, pc}

000d4a58 <_Z24igh_app_get_new_settingsv>:

    return i;
}

void igh_app_get_new_settings( void )
{
   d4a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    memset( igh_msg_buffer, 0, sizeof(igh_msg_buffer) );
   d4a5a:	4c26      	ldr	r4, [pc, #152]	; (d4af4 <_Z24igh_app_get_new_settingsv+0x9c>)
   d4a5c:	22ff      	movs	r2, #255	; 0xff
   d4a5e:	2100      	movs	r1, #0
   d4a60:	4620      	mov	r0, r4
   d4a62:	f004 ff49 	bl	d98f8 <memset>
    uint8_t rx_bytes = igh_app_get_serial_hex_data(igh_msg_buffer, sizeof(igh_msg_buffer));
   d4a66:	21ff      	movs	r1, #255	; 0xff
   d4a68:	4620      	mov	r0, r4
   d4a6a:	f7ff ffcd 	bl	d4a08 <_Z27igh_app_get_serial_hex_dataPhh>
    if ( 0 < rx_bytes ) // via Serial
   d4a6e:	4606      	mov	r6, r0
   d4a70:	2800      	cmp	r0, #0
   d4a72:	d03e      	beq.n	d4af2 <_Z24igh_app_get_new_settingsv+0x9a>
    {

        Serial.print("SERIAL DATA SETTINGS --> {");
   d4a74:	f003 fab4 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d4a78:	491f      	ldr	r1, [pc, #124]	; (d4af8 <_Z24igh_app_get_new_settingsv+0xa0>)
   d4a7a:	f002 ff51 	bl	d7920 <_ZN5Print5printEPKc>
   d4a7e:	1e77      	subs	r7, r6, #1
   d4a80:	1e65      	subs	r5, r4, #1
   d4a82:	4427      	add	r7, r4
        for( uint8_t k = 0; k < rx_bytes; k++ )
   d4a84:	42bd      	cmp	r5, r7
   d4a86:	d00f      	beq.n	d4aa8 <_Z24igh_app_get_new_settingsv+0x50>
        {
            if( igh_msg_buffer[k] <= 0x0F ) Serial.print("0");
   d4a88:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d4a8c:	2b0f      	cmp	r3, #15
   d4a8e:	d804      	bhi.n	d4a9a <_Z24igh_app_get_new_settingsv+0x42>
   d4a90:	f003 faa6 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d4a94:	4919      	ldr	r1, [pc, #100]	; (d4afc <_Z24igh_app_get_new_settingsv+0xa4>)
   d4a96:	f002 ff43 	bl	d7920 <_ZN5Print5printEPKc>
            Serial.print(igh_msg_buffer[k], HEX);
   d4a9a:	f003 faa1 	bl	d7fe0 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4a9e:	2210      	movs	r2, #16
   d4aa0:	7829      	ldrb	r1, [r5, #0]
   d4aa2:	f002 ff5a 	bl	d795a <_ZN5Print11printNumberEmh>
    uint8_t rx_bytes = igh_app_get_serial_hex_data(igh_msg_buffer, sizeof(igh_msg_buffer));
    if ( 0 < rx_bytes ) // via Serial
    {

        Serial.print("SERIAL DATA SETTINGS --> {");
        for( uint8_t k = 0; k < rx_bytes; k++ )
   d4aa6:	e7ed      	b.n	d4a84 <_Z24igh_app_get_new_settingsv+0x2c>
        {
            if( igh_msg_buffer[k] <= 0x0F ) Serial.print("0");
            Serial.print(igh_msg_buffer[k], HEX);
        }
        Serial.print("}\n");
   d4aa8:	f003 fa9a 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d4aac:	4914      	ldr	r1, [pc, #80]	; (d4b00 <_Z24igh_app_get_new_settingsv+0xa8>)
   d4aae:	f002 ff37 	bl	d7920 <_ZN5Print5printEPKc>

        if( IGH_SEND_SETTINGS == igh_msg_buffer[0] )
   d4ab2:	7823      	ldrb	r3, [r4, #0]
   d4ab4:	2b10      	cmp	r3, #16
   d4ab6:	d11c      	bne.n	d4af2 <_Z24igh_app_get_new_settingsv+0x9a>
        {
            if( true == igh_settings_process_settings_tuples( igh_msg_buffer, 2, rx_bytes) )
   d4ab8:	4632      	mov	r2, r6
   d4aba:	2102      	movs	r1, #2
   d4abc:	480d      	ldr	r0, [pc, #52]	; (d4af4 <_Z24igh_app_get_new_settingsv+0x9c>)
   d4abe:	f7ff fafb 	bl	d40b8 <igh_settings_process_settings_tuples>
   d4ac2:	2801      	cmp	r0, #1
   d4ac4:	d10e      	bne.n	d4ae4 <_Z24igh_app_get_new_settingsv+0x8c>
            {
                new_settings_available = 1;
   d4ac6:	4b0f      	ldr	r3, [pc, #60]	; (d4b04 <_Z24igh_app_get_new_settingsv+0xac>)
                // update the checksum of the system settings
                igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
   d4ac8:	4c0f      	ldr	r4, [pc, #60]	; (d4b08 <_Z24igh_app_get_new_settingsv+0xb0>)

        if( IGH_SEND_SETTINGS == igh_msg_buffer[0] )
        {
            if( true == igh_settings_process_settings_tuples( igh_msg_buffer, 2, rx_bytes) )
            {
                new_settings_available = 1;
   d4aca:	7018      	strb	r0, [r3, #0]
                // update the checksum of the system settings
                igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
   d4acc:	213c      	movs	r1, #60	; 0x3c
   d4ace:	4620      	mov	r0, r4
   d4ad0:	f7ff fc96 	bl	d4400 <igh_settings_calculate_checksum>
   d4ad4:	7020      	strb	r0, [r4, #0]
                // update the checksum for the threshold settings
                igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
   d4ad6:	4c0d      	ldr	r4, [pc, #52]	; (d4b0c <_Z24igh_app_get_new_settingsv+0xb4>)
   d4ad8:	2134      	movs	r1, #52	; 0x34
   d4ada:	4620      	mov	r0, r4
   d4adc:	f7ff fc90 	bl	d4400 <igh_settings_calculate_checksum>
   d4ae0:	7020      	strb	r0, [r4, #0]
   d4ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            }
            else
            {
                Serial.println("SETTINGS FAILED");
   d4ae4:	f003 fa7c 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d4ae8:	4909      	ldr	r1, [pc, #36]	; (d4b10 <_Z24igh_app_get_new_settingsv+0xb8>)
            }
            
        }
    }
}
   d4aea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                // update the checksum for the threshold settings
                igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
            }
            else
            {
                Serial.println("SETTINGS FAILED");
   d4aee:	f002 bf2a 	b.w	d7946 <_ZN5Print7printlnEPKc>
   d4af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4af4:	2003e6f1 	.word	0x2003e6f1
   d4af8:	000d9a10 	.word	0x000d9a10
   d4afc:	000d9982 	.word	0x000d9982
   d4b00:	000d9984 	.word	0x000d9984
   d4b04:	2003db50 	.word	0x2003db50
   d4b08:	2003e640 	.word	0x2003e640
   d4b0c:	2003e680 	.word	0x2003e680
   d4b10:	000d9a2b 	.word	0x000d9a2b

000d4b14 <_Z20igh_main_applicationv>:
    // setup MQTT
    igh_mqtt_setup();
}

void igh_main_application( void )
{
   d4b14:	b508      	push	{r3, lr}
    // check if there are any settings to read
    igh_app_get_new_settings();
   d4b16:	f7ff ff9f 	bl	d4a58 <_Z24igh_app_get_new_settingsv>

    // commit new settings if available
    igh_app_commit_new_settings();
   d4b1a:	f7ff fecf 	bl	d48bc <_Z27igh_app_commit_new_settingsv>

    // process boron service
    igh_boron_service();
   d4b1e:	f000 fb7f 	bl	d5220 <_Z17igh_boron_servicev>
    
    // Send or store device restart message
    igh_app_send_device_restart();
   d4b22:	f7ff fe73 	bl	d480c <_Z27igh_app_send_device_restartv>
    
    // Send or Store Spear data
    igh_app_receive_and_stage_sensor_data();
   d4b26:	f7ff fe21 	bl	d476c <_Z37igh_app_receive_and_stage_sensor_datav>

    // Run MQTT service in background
    igh_mqtt_service();
   d4b2a:	f000 f851 	bl	d4bd0 <_Z16igh_mqtt_servicev>

    // rfm69 service in the background
    igh_rfm69_service();
}
   d4b2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

    // Run MQTT service in background
    igh_mqtt_service();

    // rfm69 service in the background
    igh_rfm69_service();
   d4b32:	f000 bc3f 	b.w	d53b4 <_Z17igh_rfm69_servicev>

000d4b36 <_GLOBAL__sub_I_device_restart>:
   d4b36:	f002 b953 	b.w	d6de0 <HAL_Pin_Map>
	...

000d4b3c <_Z13mqtt_callbackPcPhj>:

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(domain, port, mqtt_callback);

void mqtt_callback(char* topic, byte* payload, unsigned int length) {
   d4b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    igh_msg_type msg_type = UNKNOWN_MSG;
    uint8_t p[length];
   d4b40:	1dd3      	adds	r3, r2, #7
   d4b42:	f023 0307 	bic.w	r3, r3, #7

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(domain, port, mqtt_callback);

void mqtt_callback(char* topic, byte* payload, unsigned int length) {
   d4b46:	af00      	add	r7, sp, #0
    igh_msg_type msg_type = UNKNOWN_MSG;
    uint8_t p[length];
   d4b48:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(p, payload, length);
   d4b4c:	4668      	mov	r0, sp

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(domain, port, mqtt_callback);

void mqtt_callback(char* topic, byte* payload, unsigned int length) {
   d4b4e:	4690      	mov	r8, r2
    igh_msg_type msg_type = UNKNOWN_MSG;
    uint8_t p[length];
    memcpy(p, payload, length);
   d4b50:	f004 fec7 	bl	d98e2 <memcpy>

    Serial.print("RECEIVED MSG: ");
   d4b54:	f003 fa44 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d4b58:	4916      	ldr	r1, [pc, #88]	; (d4bb4 <_Z13mqtt_callbackPcPhj+0x78>)
   d4b5a:	f002 fee1 	bl	d7920 <_ZN5Print5printEPKc>
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(domain, port, mqtt_callback);

void mqtt_callback(char* topic, byte* payload, unsigned int length) {
    igh_msg_type msg_type = UNKNOWN_MSG;
    uint8_t p[length];
   d4b5e:	466c      	mov	r4, sp
    memcpy(p, payload, length);

    Serial.print("RECEIVED MSG: ");
   d4b60:	2500      	movs	r5, #0
    for( uint8_t i = 0; i < length; i++ )
   d4b62:	b2ee      	uxtb	r6, r5
   d4b64:	45b0      	cmp	r8, r6
   d4b66:	d90f      	bls.n	d4b88 <_Z13mqtt_callbackPcPhj+0x4c>
    {
        if( p[i] <= 0x0F ) Serial.print("0");
   d4b68:	5da3      	ldrb	r3, [r4, r6]
   d4b6a:	2b0f      	cmp	r3, #15
   d4b6c:	d804      	bhi.n	d4b78 <_Z13mqtt_callbackPcPhj+0x3c>
   d4b6e:	f003 fa37 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d4b72:	4911      	ldr	r1, [pc, #68]	; (d4bb8 <_Z13mqtt_callbackPcPhj+0x7c>)
   d4b74:	f002 fed4 	bl	d7920 <_ZN5Print5printEPKc>
        Serial.print(p[i], HEX);
   d4b78:	f003 fa32 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d4b7c:	2210      	movs	r2, #16
   d4b7e:	5da1      	ldrb	r1, [r4, r6]
   d4b80:	f002 feeb 	bl	d795a <_ZN5Print11printNumberEmh>
   d4b84:	3501      	adds	r5, #1
    igh_msg_type msg_type = UNKNOWN_MSG;
    uint8_t p[length];
    memcpy(p, payload, length);

    Serial.print("RECEIVED MSG: ");
    for( uint8_t i = 0; i < length; i++ )
   d4b86:	e7ec      	b.n	d4b62 <_Z13mqtt_callbackPcPhj+0x26>
    {
        if( p[i] <= 0x0F ) Serial.print("0");
        Serial.print(p[i], HEX);
    }

    msg_type = (igh_msg_type)igh_message_process_incoming_msg( p );
   d4b88:	4620      	mov	r0, r4
   d4b8a:	f7ff fced 	bl	d4568 <igh_message_process_incoming_msg>
   d4b8e:	4605      	mov	r5, r0

    Serial.print("\nMESSAGE TYPE: ");
   d4b90:	f003 fa26 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d4b94:	4909      	ldr	r1, [pc, #36]	; (d4bbc <_Z13mqtt_callbackPcPhj+0x80>)
   d4b96:	f002 fec3 	bl	d7920 <_ZN5Print5printEPKc>
    Serial.println((int)msg_type);
   d4b9a:	f003 fa21 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d4b9e:	220a      	movs	r2, #10
   d4ba0:	4604      	mov	r4, r0
   d4ba2:	4629      	mov	r1, r5
   d4ba4:	f002 fed9 	bl	d795a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4ba8:	4620      	mov	r0, r4
   d4baa:	f002 fec0 	bl	d792e <_ZN5Print7printlnEv>
}
   d4bae:	46bd      	mov	sp, r7
   d4bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4bb4:	000d9a3b 	.word	0x000d9a3b
   d4bb8:	000d9982 	.word	0x000d9982
   d4bbc:	000d9a4a 	.word	0x000d9a4a

000d4bc0 <_Z14igh_mqtt_setupv>:

void igh_mqtt_setup( void )
{
    // connect to the server
    client.connect( (const char *)device_name );
   d4bc0:	4901      	ldr	r1, [pc, #4]	; (d4bc8 <_Z14igh_mqtt_setupv+0x8>)
   d4bc2:	4802      	ldr	r0, [pc, #8]	; (d4bcc <_Z14igh_mqtt_setupv+0xc>)
   d4bc4:	f000 be42 	b.w	d584c <_ZN4MQTT7connectEPKc>
   d4bc8:	2003da9a 	.word	0x2003da9a
   d4bcc:	2003db58 	.word	0x2003db58

000d4bd0 <_Z16igh_mqtt_servicev>:

}

void igh_mqtt_service( void )
{
   d4bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( true == mqtt_set_broker )
   d4bd4:	4b2b      	ldr	r3, [pc, #172]	; (d4c84 <_Z16igh_mqtt_servicev+0xb4>)
   d4bd6:	781a      	ldrb	r2, [r3, #0]
   d4bd8:	2a01      	cmp	r2, #1
    client.connect( (const char *)device_name );

}

void igh_mqtt_service( void )
{
   d4bda:	af00      	add	r7, sp, #0
   d4bdc:	461d      	mov	r5, r3
    if( true == mqtt_set_broker )
   d4bde:	d127      	bne.n	d4c30 <_Z16igh_mqtt_servicev+0x60>
    {
        uint8_t broker_len = 0;
        while( igh_current_system_settings.broker[broker_len] )
   d4be0:	4929      	ldr	r1, [pc, #164]	; (d4c88 <_Z16igh_mqtt_servicev+0xb8>)

        Serial.print("NEW MQTT BROKER SET: "); Serial.println(new_broker);
        
        client.setBroker(new_broker, igh_current_system_settings.broker_port);

        mqtt_set_broker = false;
   d4be2:	46e8      	mov	r8, sp
   d4be4:	2200      	movs	r2, #0
   d4be6:	1c50      	adds	r0, r2, #1
void igh_mqtt_service( void )
{
    if( true == mqtt_set_broker )
    {
        uint8_t broker_len = 0;
        while( igh_current_system_settings.broker[broker_len] )
   d4be8:	b2d2      	uxtb	r2, r2
   d4bea:	188b      	adds	r3, r1, r2
   d4bec:	4e26      	ldr	r6, [pc, #152]	; (d4c88 <_Z16igh_mqtt_servicev+0xb8>)
   d4bee:	7e1c      	ldrb	r4, [r3, #24]
   d4bf0:	b10c      	cbz	r4, d4bf6 <_Z16igh_mqtt_servicev+0x26>
   d4bf2:	4602      	mov	r2, r0
   d4bf4:	e7f7      	b.n	d4be6 <_Z16igh_mqtt_servicev+0x16>
        {
            if( '\0' == igh_current_system_settings.broker[broker_len] ) break;
            broker_len++;
        }
        
        char new_broker[broker_len + 1];
   d4bf6:	f102 0308 	add.w	r3, r2, #8
   d4bfa:	f023 0307 	bic.w	r3, r3, #7
   d4bfe:	ebad 0d03 	sub.w	sp, sp, r3
        memcpy( new_broker, igh_current_system_settings.broker, sizeof(new_broker) );
   d4c02:	3201      	adds	r2, #1
   d4c04:	f106 0118 	add.w	r1, r6, #24
   d4c08:	4668      	mov	r0, sp
   d4c0a:	f004 fe6a 	bl	d98e2 <memcpy>

        Serial.print("NEW MQTT BROKER SET: "); Serial.println(new_broker);
   d4c0e:	f003 f9e7 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d4c12:	491e      	ldr	r1, [pc, #120]	; (d4c8c <_Z16igh_mqtt_servicev+0xbc>)
   d4c14:	f002 fe84 	bl	d7920 <_ZN5Print5printEPKc>
   d4c18:	f003 f9e2 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d4c1c:	4669      	mov	r1, sp
   d4c1e:	f002 fe92 	bl	d7946 <_ZN5Print7printlnEPKc>
        
        client.setBroker(new_broker, igh_current_system_settings.broker_port);
   d4c22:	4669      	mov	r1, sp
   d4c24:	8f32      	ldrh	r2, [r6, #56]	; 0x38
   d4c26:	481a      	ldr	r0, [pc, #104]	; (d4c90 <_Z16igh_mqtt_servicev+0xc0>)
   d4c28:	f000 fd26 	bl	d5678 <_ZN4MQTT9setBrokerEPct>

        mqtt_set_broker = false;
   d4c2c:	702c      	strb	r4, [r5, #0]
   d4c2e:	46c5      	mov	sp, r8
    }

    if (client.isConnected())
   d4c30:	4817      	ldr	r0, [pc, #92]	; (d4c90 <_Z16igh_mqtt_servicev+0xc0>)
   d4c32:	f000 fd13 	bl	d565c <_ZN4MQTT11isConnectedEv>
   d4c36:	b160      	cbz	r0, d4c52 <_Z16igh_mqtt_servicev+0x82>
    {
        client.loop();
        
        if( false == mqtt_subscribed )
   d4c38:	4c16      	ldr	r4, [pc, #88]	; (d4c94 <_Z16igh_mqtt_servicev+0xc4>)
        mqtt_set_broker = false;
    }

    if (client.isConnected())
    {
        client.loop();
   d4c3a:	4815      	ldr	r0, [pc, #84]	; (d4c90 <_Z16igh_mqtt_servicev+0xc0>)
   d4c3c:	f000 fec3 	bl	d59c6 <_ZN4MQTT4loopEv>
        
        if( false == mqtt_subscribed )
   d4c40:	7823      	ldrb	r3, [r4, #0]
   d4c42:	b9db      	cbnz	r3, d4c7c <_Z16igh_mqtt_servicev+0xac>
        {
            client.subscribe( (const char *)inbound_topic );
   d4c44:	4914      	ldr	r1, [pc, #80]	; (d4c98 <_Z16igh_mqtt_servicev+0xc8>)
   d4c46:	4812      	ldr	r0, [pc, #72]	; (d4c90 <_Z16igh_mqtt_servicev+0xc0>)
   d4c48:	f000 ffe9 	bl	d5c1e <_ZN4MQTT9subscribeEPKc>
            mqtt_subscribed = true;
   d4c4c:	2301      	movs	r3, #1
   d4c4e:	7023      	strb	r3, [r4, #0]
   d4c50:	e014      	b.n	d4c7c <_Z16igh_mqtt_servicev+0xac>
        }
    }
    else
    {
        /* try to connect */
        if( (millis() - reconnect_interval) > 10000 )
   d4c52:	4c12      	ldr	r4, [pc, #72]	; (d4c9c <_Z16igh_mqtt_servicev+0xcc>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4c54:	f002 f98c 	bl	d6f70 <HAL_Timer_Get_Milli_Seconds>
   d4c58:	6823      	ldr	r3, [r4, #0]
   d4c5a:	1ac0      	subs	r0, r0, r3
   d4c5c:	f242 7310 	movw	r3, #10000	; 0x2710
   d4c60:	4298      	cmp	r0, r3
   d4c62:	d90b      	bls.n	d4c7c <_Z16igh_mqtt_servicev+0xac>
        {
            // try to reconnect only once every 10 seconds
            Serial.println("Reconnecting to Broker");
   d4c64:	f003 f9bc 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d4c68:	490d      	ldr	r1, [pc, #52]	; (d4ca0 <_Z16igh_mqtt_servicev+0xd0>)
   d4c6a:	f002 fe6c 	bl	d7946 <_ZN5Print7printlnEPKc>
            client.connect( (const char *)device_name );
   d4c6e:	490d      	ldr	r1, [pc, #52]	; (d4ca4 <_Z16igh_mqtt_servicev+0xd4>)
   d4c70:	4807      	ldr	r0, [pc, #28]	; (d4c90 <_Z16igh_mqtt_servicev+0xc0>)
   d4c72:	f000 fdeb 	bl	d584c <_ZN4MQTT7connectEPKc>
   d4c76:	f002 f97b 	bl	d6f70 <HAL_Timer_Get_Milli_Seconds>
            reconnect_interval = millis();
   d4c7a:	6020      	str	r0, [r4, #0]
        }
    }
}
   d4c7c:	46bd      	mov	sp, r7
   d4c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4c82:	bf00      	nop
   d4c84:	2003da5c 	.word	0x2003da5c
   d4c88:	2003e640 	.word	0x2003e640
   d4c8c:	000d9a5a 	.word	0x000d9a5a
   d4c90:	2003db58 	.word	0x2003db58
   d4c94:	2003dbb0 	.word	0x2003dbb0
   d4c98:	2003daae 	.word	0x2003daae
   d4c9c:	2003db54 	.word	0x2003db54
   d4ca0:	000d9a70 	.word	0x000d9a70
   d4ca4:	2003da9a 	.word	0x2003da9a

000d4ca8 <_Z21igh_mqtt_publish_dataPhj>:

bool igh_mqtt_publish_data( uint8_t *payload, unsigned int len )
{
   d4ca8:	b570      	push	{r4, r5, r6, lr}
   d4caa:	4605      	mov	r5, r0
    bool ret = false;
    if (client.isConnected()) {
   d4cac:	480c      	ldr	r0, [pc, #48]	; (d4ce0 <_Z21igh_mqtt_publish_dataPhj+0x38>)
        }
    }
}

bool igh_mqtt_publish_data( uint8_t *payload, unsigned int len )
{
   d4cae:	460e      	mov	r6, r1
    bool ret = false;
    if (client.isConnected()) {
   d4cb0:	f000 fcd4 	bl	d565c <_ZN4MQTT11isConnectedEv>
   d4cb4:	4604      	mov	r4, r0
   d4cb6:	b158      	cbz	r0, d4cd0 <_Z21igh_mqtt_publish_dataPhj+0x28>
        client.publish( (const char *)outbound_topic, 
                        (const uint8_t*) payload, len);
   d4cb8:	4633      	mov	r3, r6
   d4cba:	462a      	mov	r2, r5
   d4cbc:	4909      	ldr	r1, [pc, #36]	; (d4ce4 <_Z21igh_mqtt_publish_dataPhj+0x3c>)
   d4cbe:	4808      	ldr	r0, [pc, #32]	; (d4ce0 <_Z21igh_mqtt_publish_dataPhj+0x38>)
   d4cc0:	f000 fe44 	bl	d594c <_ZN4MQTT7publishEPKcPKhj>
        client.subscribe( (const char *)inbound_topic );
   d4cc4:	4908      	ldr	r1, [pc, #32]	; (d4ce8 <_Z21igh_mqtt_publish_dataPhj+0x40>)
   d4cc6:	4806      	ldr	r0, [pc, #24]	; (d4ce0 <_Z21igh_mqtt_publish_dataPhj+0x38>)
   d4cc8:	f000 ffa9 	bl	d5c1e <_ZN4MQTT9subscribeEPKc>
        ret = true;
   d4ccc:	2001      	movs	r0, #1
   d4cce:	bd70      	pop	{r4, r5, r6, pc}
    }
    else
    {
        Serial.println("PUBLISH FAILED");
   d4cd0:	f003 f986 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d4cd4:	4905      	ldr	r1, [pc, #20]	; (d4cec <_Z21igh_mqtt_publish_dataPhj+0x44>)
   d4cd6:	f002 fe36 	bl	d7946 <_ZN5Print7printlnEPKc>
    }
}

bool igh_mqtt_publish_data( uint8_t *payload, unsigned int len )
{
    bool ret = false;
   d4cda:	4620      	mov	r0, r4
    else
    {
        Serial.println("PUBLISH FAILED");
    }
    return ret;
}
   d4cdc:	bd70      	pop	{r4, r5, r6, pc}
   d4cde:	bf00      	nop
   d4ce0:	2003db58 	.word	0x2003db58
   d4ce4:	2003da7c 	.word	0x2003da7c
   d4ce8:	2003daae 	.word	0x2003daae
   d4cec:	000d9a87 	.word	0x000d9a87

000d4cf0 <_GLOBAL__sub_I_domain>:
   d4cf0:	b510      	push	{r4, lr}
   d4cf2:	f002 f875 	bl	d6de0 <HAL_Pin_Map>

bool mqtt_subscribed = false;

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(domain, port, mqtt_callback);
   d4cf6:	4c07      	ldr	r4, [pc, #28]	; (d4d14 <_GLOBAL__sub_I_domain+0x24>)
   d4cf8:	4a07      	ldr	r2, [pc, #28]	; (d4d18 <_GLOBAL__sub_I_domain+0x28>)
   d4cfa:	4908      	ldr	r1, [pc, #32]	; (d4d1c <_GLOBAL__sub_I_domain+0x2c>)
   d4cfc:	8812      	ldrh	r2, [r2, #0]
   d4cfe:	4b08      	ldr	r3, [pc, #32]	; (d4d20 <_GLOBAL__sub_I_domain+0x30>)
   d4d00:	4620      	mov	r0, r4
   d4d02:	f000 fbc3 	bl	d548c <_ZN4MQTTC1EPctPFvS0_PhjE>
   d4d06:	4620      	mov	r0, r4
   d4d08:	4a06      	ldr	r2, [pc, #24]	; (d4d24 <_GLOBAL__sub_I_domain+0x34>)
   d4d0a:	4907      	ldr	r1, [pc, #28]	; (d4d28 <_GLOBAL__sub_I_domain+0x38>)
    else
    {
        Serial.println("PUBLISH FAILED");
    }
    return ret;
}
   d4d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

bool mqtt_subscribed = false;

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(domain, port, mqtt_callback);
   d4d10:	f004 b846 	b.w	d8da0 <__aeabi_atexit>
   d4d14:	2003db58 	.word	0x2003db58
   d4d18:	2003daac 	.word	0x2003daac
   d4d1c:	2003dad0 	.word	0x2003dad0
   d4d20:	000d4b3d 	.word	0x000d4b3d
   d4d24:	2003db4c 	.word	0x2003db4c
   d4d28:	000d5c25 	.word	0x000d5c25

000d4d2c <_GLOBAL__sub_I_test_valve_flag>:
        igh_append_test_status(ret);
        test_rfm69_flag = false;
    }

    return ret;
   d4d2c:	b510      	push	{r4, lr}
static void print_cmd_options(void);
static void igh_append_test_status(uint8_t _status);

uint8_t test_rfm69_flag = 0;

String IGH_ID;
   d4d2e:	4c07      	ldr	r4, [pc, #28]	; (d4d4c <_GLOBAL__sub_I_test_valve_flag+0x20>)
   d4d30:	f002 f856 	bl	d6de0 <HAL_Pin_Map>
   d4d34:	4906      	ldr	r1, [pc, #24]	; (d4d50 <_GLOBAL__sub_I_test_valve_flag+0x24>)
   d4d36:	4620      	mov	r0, r4
   d4d38:	f002 fd9b 	bl	d7872 <_ZN6StringC1EPK19__FlashStringHelper>
   d4d3c:	4620      	mov	r0, r4
   d4d3e:	4a05      	ldr	r2, [pc, #20]	; (d4d54 <_GLOBAL__sub_I_test_valve_flag+0x28>)
   d4d40:	4905      	ldr	r1, [pc, #20]	; (d4d58 <_GLOBAL__sub_I_test_valve_flag+0x2c>)
        igh_append_test_status(ret);
        test_rfm69_flag = false;
    }

    return ret;
   d4d42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void print_cmd_options(void);
static void igh_append_test_status(uint8_t _status);

uint8_t test_rfm69_flag = 0;

String IGH_ID;
   d4d46:	f004 b82b 	b.w	d8da0 <__aeabi_atexit>
   d4d4a:	bf00      	nop
   d4d4c:	2003dbb4 	.word	0x2003dbb4
   d4d50:	000d9d74 	.word	0x000d9d74
   d4d54:	2003db4c 	.word	0x2003db4c
   d4d58:	000d77e5 	.word	0x000d77e5

000d4d5c <_Z31igh_eeprom_read_system_settingsP15system_settings>:
 * \brief Gets system settings from eeprom emulator
 * \param running_system_settings_buffer: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_system_settings(system_settings * running_system_settings_buffer)
{
   d4d5c:	b530      	push	{r4, r5, lr}
   d4d5e:	b091      	sub	sp, #68	; 0x44
  system_settings local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d4d60:	223c      	movs	r2, #60	; 0x3c
   d4d62:	2100      	movs	r1, #0
 * \brief Gets system settings from eeprom emulator
 * \param running_system_settings_buffer: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_system_settings(system_settings * running_system_settings_buffer)
{
   d4d64:	4605      	mov	r5, r0
  system_settings local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d4d66:	a801      	add	r0, sp, #4
   d4d68:	f004 fdc6 	bl	d98f8 <memset>
  EEPROM.get(SYSTEM_SETTINGS_ADDRESS, local_buffer);
   d4d6c:	f003 ff84 	bl	d8c78 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4d70:	223c      	movs	r2, #60	; 0x3c
   d4d72:	a901      	add	r1, sp, #4
   d4d74:	2000      	movs	r0, #0
   d4d76:	f002 f913 	bl	d6fa0 <HAL_EEPROM_Get>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));
   d4d7a:	213c      	movs	r1, #60	; 0x3c
   d4d7c:	a801      	add	r0, sp, #4
   d4d7e:	f7ff fb3f 	bl	d4400 <igh_settings_calculate_checksum>

  if( checksum != local_buffer.checksum)
   d4d82:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4d86:	4283      	cmp	r3, r0
   d4d88:	d10c      	bne.n	d4da4 <_Z31igh_eeprom_read_system_settingsP15system_settings+0x48>
  {
    return 0;
  }

  *running_system_settings_buffer = local_buffer;
   d4d8a:	ac01      	add	r4, sp, #4
   d4d8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4d8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4d90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4d92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4d94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4d96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4d98:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   d4d9c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  return 1;
   d4da0:	2001      	movs	r0, #1
   d4da2:	e000      	b.n	d4da6 <_Z31igh_eeprom_read_system_settingsP15system_settings+0x4a>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));

  if( checksum != local_buffer.checksum)
  {
    return 0;
   d4da4:	2000      	movs	r0, #0
  }

  *running_system_settings_buffer = local_buffer;
  return 1;

}
   d4da6:	b011      	add	sp, #68	; 0x44
   d4da8:	bd30      	pop	{r4, r5, pc}
	...

000d4dac <_Z15igh_eeprom_initv>:
#define SYSTEM_THRESHOLDS_ADDRESS   (int)0x0200
#define SYSTEM_ERRORS_ADDRESS       (int)0x0400


void igh_eeprom_init( void )
{
   d4dac:	b530      	push	{r4, r5, lr}
   d4dae:	b091      	sub	sp, #68	; 0x44
  system_settings settings_in_memory;
  bool settings_read_successfully = igh_eeprom_read_system_settings(&settings_in_memory);
   d4db0:	a801      	add	r0, sp, #4
   d4db2:	f7ff ffd3 	bl	d4d5c <_Z31igh_eeprom_read_system_settingsP15system_settings>
  uint8_t valid_checksum = igh_settings_calculate_checksum( &settings_in_memory, sizeof(settings_in_memory) );
   d4db6:	213c      	movs	r1, #60	; 0x3c


void igh_eeprom_init( void )
{
  system_settings settings_in_memory;
  bool settings_read_successfully = igh_eeprom_read_system_settings(&settings_in_memory);
   d4db8:	4604      	mov	r4, r0
  uint8_t valid_checksum = igh_settings_calculate_checksum( &settings_in_memory, sizeof(settings_in_memory) );
   d4dba:	a801      	add	r0, sp, #4
   d4dbc:	f7ff fb20 	bl	d4400 <igh_settings_calculate_checksum>

  if( false == settings_read_successfully ||
   d4dc0:	b124      	cbz	r4, d4dcc <_Z15igh_eeprom_initv+0x20>
   d4dc2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4dc6:	4283      	cmp	r3, r0
   d4dc8:	d100      	bne.n	d4dcc <_Z15igh_eeprom_initv+0x20>
      (settings_in_memory.checksum != valid_checksum) ||
   d4dca:	b93b      	cbnz	r3, d4ddc <_Z15igh_eeprom_initv+0x30>
      ( 0 == settings_in_memory.checksum) )
  {
    // if we can't get valid settings from memory at all, use default settings
    Serial.println("USING DEFAULT SETTINGS");
   d4dcc:	f003 f908 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d4dd0:	490c      	ldr	r1, [pc, #48]	; (d4e04 <_Z15igh_eeprom_initv+0x58>)
   d4dd2:	f002 fdb8 	bl	d7946 <_ZN5Print7printlnEPKc>
    igh_settings_reset_system_to_default();
   d4dd6:	f7ff fb55 	bl	d4484 <igh_settings_reset_system_to_default>
   d4dda:	e010      	b.n	d4dfe <_Z15igh_eeprom_initv+0x52>
  }
  else
  {
    Serial.println("USING SETTINGS FROM MEMORY");
   d4ddc:	f003 f900 	bl	d7fe0 <_Z16_fetch_usbserialv>
    igh_current_system_settings = settings_in_memory;
   d4de0:	ac01      	add	r4, sp, #4
    Serial.println("USING DEFAULT SETTINGS");
    igh_settings_reset_system_to_default();
  }
  else
  {
    Serial.println("USING SETTINGS FROM MEMORY");
   d4de2:	4909      	ldr	r1, [pc, #36]	; (d4e08 <_Z15igh_eeprom_initv+0x5c>)
    igh_current_system_settings = settings_in_memory;
   d4de4:	4d09      	ldr	r5, [pc, #36]	; (d4e0c <_Z15igh_eeprom_initv+0x60>)
    Serial.println("USING DEFAULT SETTINGS");
    igh_settings_reset_system_to_default();
  }
  else
  {
    Serial.println("USING SETTINGS FROM MEMORY");
   d4de6:	f002 fdae 	bl	d7946 <_ZN5Print7printlnEPKc>
    igh_current_system_settings = settings_in_memory;
   d4dea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4dec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4dee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4df0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4df2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4df4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4df6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   d4dfa:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  }
}
   d4dfe:	b011      	add	sp, #68	; 0x44
   d4e00:	bd30      	pop	{r4, r5, pc}
   d4e02:	bf00      	nop
   d4e04:	000d9b25 	.word	0x000d9b25
   d4e08:	000d9b3c 	.word	0x000d9b3c
   d4e0c:	2003e640 	.word	0x2003e640

000d4e10 <_Z31igh_eeprom_save_system_settingsP15system_settings>:
 * \brief Save system settings  to eeprom emulator
 * \param settings_to_save: pointer to struct to save
 * \return true or false based on write success
 */
uint8_t igh_eeprom_save_system_settings(system_settings * settings_to_save)
{
   d4e10:	b510      	push	{r4, lr}
   d4e12:	4604      	mov	r4, r0
   d4e14:	b090      	sub	sp, #64	; 0x40
  system_settings local_buffer;
  // save the data
  EEPROM.put(SYSTEM_SETTINGS_ADDRESS, *settings_to_save);
   d4e16:	f003 ff2f 	bl	d8c78 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4e1a:	223c      	movs	r2, #60	; 0x3c
   d4e1c:	4621      	mov	r1, r4
   d4e1e:	2000      	movs	r0, #0
   d4e20:	f002 f8c6 	bl	d6fb0 <HAL_EEPROM_Put>
  // check if data is saved
  igh_eeprom_read_system_settings(&local_buffer);
   d4e24:	a801      	add	r0, sp, #4
   d4e26:	f7ff ff99 	bl	d4d5c <_Z31igh_eeprom_read_system_settingsP15system_settings>

  if( local_buffer.checksum != (settings_to_save->checksum))
  {
    return 0;
   d4e2a:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d4e2e:	7823      	ldrb	r3, [r4, #0]
  }

  return 1;
}
   d4e30:	1ac3      	subs	r3, r0, r3
   d4e32:	4258      	negs	r0, r3
   d4e34:	4158      	adcs	r0, r3
   d4e36:	b010      	add	sp, #64	; 0x40
   d4e38:	bd10      	pop	{r4, pc}

000d4e3a <_GLOBAL__sub_I__Z15igh_eeprom_initv>:
   d4e3a:	f001 bfd1 	b.w	d6de0 <HAL_Pin_Map>

000d4e3e <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d4e3e:	6803      	ldr	r3, [r0, #0]
   d4e40:	4718      	bx	r3

000d4e42 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4e42:	2a01      	cmp	r2, #1
   d4e44:	d002      	beq.n	d4e4c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d4e46:	2a02      	cmp	r2, #2
   d4e48:	d002      	beq.n	d4e50 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d4e4a:	e004      	b.n	d4e56 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4e4c:	6001      	str	r1, [r0, #0]
	      break;
   d4e4e:	e002      	b.n	d4e56 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d4e50:	680b      	ldr	r3, [r1, #0]
   d4e52:	b100      	cbz	r0, d4e56 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d4e54:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4e56:	2000      	movs	r0, #0
   d4e58:	4770      	bx	lr

000d4e5a <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d4e5a:	6943      	ldr	r3, [r0, #20]
   d4e5c:	b113      	cbz	r3, d4e64 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4e5e:	6983      	ldr	r3, [r0, #24]
   d4e60:	300c      	adds	r0, #12
   d4e62:	4718      	bx	r3
   d4e64:	4770      	bx	lr

000d4e66 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4e66:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4e68:	2100      	movs	r1, #0
   d4e6a:	4604      	mov	r4, r0
   d4e6c:	4608      	mov	r0, r1
   d4e6e:	f002 f8cf 	bl	d7010 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4e72:	a902      	add	r1, sp, #8
   d4e74:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4e76:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4e78:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d4e7c:	f002 f8e0 	bl	d7040 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d4e80:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4e82:	b10c      	cbz	r4, d4e88 <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d4e84:	2301      	movs	r3, #1
   d4e86:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4e88:	2100      	movs	r1, #0
   d4e8a:	2001      	movs	r0, #1
   d4e8c:	f002 f8c0 	bl	d7010 <os_thread_scheduling>
            }
        }
        if (t) {
   d4e90:	b12c      	cbz	r4, d4e9e <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d4e92:	6823      	ldr	r3, [r4, #0]
   d4e94:	4620      	mov	r0, r4
   d4e96:	689b      	ldr	r3, [r3, #8]
   d4e98:	4798      	blx	r3
            t->running = false;
   d4e9a:	2300      	movs	r3, #0
   d4e9c:	7123      	strb	r3, [r4, #4]
        }
    }
   d4e9e:	b002      	add	sp, #8
   d4ea0:	bd10      	pop	{r4, pc}

000d4ea2 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4ea2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4ea4:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4ea6:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4ea8:	b113      	cbz	r3, d4eb0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4eaa:	2203      	movs	r2, #3
   d4eac:	4601      	mov	r1, r0
   d4eae:	4798      	blx	r3
    }
   d4eb0:	4620      	mov	r0, r4
   d4eb2:	bd10      	pop	{r4, pc}

000d4eb4 <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d4eb4:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d4eb6:	6880      	ldr	r0, [r0, #8]
   d4eb8:	2300      	movs	r3, #0
   d4eba:	b138      	cbz	r0, d4ecc <_ZN5Timer5_stopEjb+0x18>
   d4ebc:	e88d 000a 	stmia.w	sp, {r1, r3}
   d4ec0:	2102      	movs	r1, #2
   d4ec2:	f002 f8c5 	bl	d7050 <os_timer_change>
   d4ec6:	fab0 f080 	clz	r0, r0
   d4eca:	0940      	lsrs	r0, r0, #5
    }
   d4ecc:	b003      	add	sp, #12
   d4ece:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4ed4 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4ed4:	b538      	push	{r3, r4, r5, lr}
   d4ed6:	4b10      	ldr	r3, [pc, #64]	; (d4f18 <_ZN5TimerD1Ev+0x44>)
   d4ed8:	6003      	str	r3, [r0, #0]
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d4eda:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4edc:	4604      	mov	r4, r0
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d4ede:	b1a3      	cbz	r3, d4f0a <_ZN5TimerD1Ev+0x36>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4ee0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4ee4:	2200      	movs	r2, #0
   d4ee6:	f7ff ffe5 	bl	d4eb4 <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d4eea:	2100      	movs	r1, #0
   d4eec:	68a0      	ldr	r0, [r4, #8]
   d4eee:	f002 f8c7 	bl	d7080 <os_timer_set_id>
            while (running) {
   d4ef2:	7923      	ldrb	r3, [r4, #4]
   d4ef4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d4ef8:	b113      	cbz	r3, d4f00 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d4efa:	f002 f871 	bl	d6fe0 <os_thread_yield>
   d4efe:	e7f8      	b.n	d4ef2 <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d4f00:	4629      	mov	r1, r5
   d4f02:	68a0      	ldr	r0, [r4, #8]
   d4f04:	f002 f894 	bl	d7030 <os_timer_destroy>
            handle = nullptr;
   d4f08:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4f0a:	f104 000c 	add.w	r0, r4, #12
   d4f0e:	f7ff ffc8 	bl	d4ea2 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d4f12:	4620      	mov	r0, r4
   d4f14:	bd38      	pop	{r3, r4, r5, pc}
   d4f16:	bf00      	nop
   d4f18:	000d9b70 	.word	0x000d9b70

000d4f1c <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4f1c:	b510      	push	{r4, lr}
   d4f1e:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d4f20:	f7ff ffd8 	bl	d4ed4 <_ZN5TimerD1Ev>
   d4f24:	4620      	mov	r0, r4
   d4f26:	211c      	movs	r1, #28
   d4f28:	f003 ff48 	bl	d8dbc <_ZdlPvj>
   d4f2c:	4620      	mov	r0, r4
   d4f2e:	bd10      	pop	{r4, pc}

000d4f30 <_Z21igh_boron_read_buttonv>:
    igh_button_timer.start();
    igh_button_sec_counter = 0;
}

uint8_t igh_boron_read_button(void)
{
   d4f30:	b508      	push	{r3, lr}
    return digitalRead(IGH_IRRIGATION_BUTTON);
   d4f32:	200f      	movs	r0, #15
   d4f34:	f003 fe8c 	bl	d8c50 <digitalRead>
}
   d4f38:	b2c0      	uxtb	r0, r0
   d4f3a:	bd08      	pop	{r3, pc}

000d4f3c <_Z31igh_boron_button_press_durationv>:

void igh_boron_button_press_duration(void)
{
   d4f3c:	b508      	push	{r3, lr}
    if(!igh_boron_read_button())
   d4f3e:	f7ff fff7 	bl	d4f30 <_Z21igh_boron_read_buttonv>
   d4f42:	4b04      	ldr	r3, [pc, #16]	; (d4f54 <_Z31igh_boron_button_press_durationv+0x18>)
   d4f44:	b910      	cbnz	r0, d4f4c <_Z31igh_boron_button_press_durationv+0x10>
    {
        igh_button_sec_counter++;
   d4f46:	781a      	ldrb	r2, [r3, #0]
   d4f48:	3201      	adds	r2, #1
   d4f4a:	e000      	b.n	d4f4e <_Z31igh_boron_button_press_durationv+0x12>
    }
    else
    {
        igh_button_sec_counter = 0;
   d4f4c:	2200      	movs	r2, #0
   d4f4e:	701a      	strb	r2, [r3, #0]
   d4f50:	bd08      	pop	{r3, pc}
   d4f52:	bf00      	nop
   d4f54:	2003dbc4 	.word	0x2003dbc4

000d4f58 <_GLOBAL__sub_I_igh_button_sec_counter>:
    } 
   d4f58:	b570      	push	{r4, r5, r6, lr}
   d4f5a:	b088      	sub	sp, #32
   d4f5c:	f001 ff40 	bl	d6de0 <HAL_Pin_Map>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d4f60:	4b19      	ldr	r3, [pc, #100]	; (d4fc8 <_GLOBAL__sub_I_igh_button_sec_counter+0x70>)
   d4f62:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f64:	ad04      	add	r5, sp, #16
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d4f66:	4c19      	ldr	r4, [pc, #100]	; (d4fcc <_GLOBAL__sub_I_igh_button_sec_counter+0x74>)
   d4f68:	4b19      	ldr	r3, [pc, #100]	; (d4fd0 <_GLOBAL__sub_I_igh_button_sec_counter+0x78>)
   d4f6a:	6023      	str	r3, [r4, #0]
   d4f6c:	e895 0003 	ldmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4f70:	f104 020c 	add.w	r2, r4, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f74:	ae02      	add	r6, sp, #8
   d4f76:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4f7a:	e892 0003 	ldmia.w	r2, {r0, r1}
   d4f7e:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4f82:	e896 0003 	ldmia.w	r6, {r0, r1}
   d4f86:	e882 0003 	stmia.w	r2, {r0, r1}
   d4f8a:	4a12      	ldr	r2, [pc, #72]	; (d4fd4 <_GLOBAL__sub_I_igh_button_sec_counter+0x7c>)
   d4f8c:	6162      	str	r2, [r4, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4f8e:	69a2      	ldr	r2, [r4, #24]
   d4f90:	9207      	str	r2, [sp, #28]
   d4f92:	2300      	movs	r3, #0
      __b = _GLIBCXX_MOVE(__tmp);
   d4f94:	4a10      	ldr	r2, [pc, #64]	; (d4fd8 <_GLOBAL__sub_I_igh_button_sec_counter+0x80>)
   d4f96:	7123      	strb	r3, [r4, #4]
   d4f98:	60a3      	str	r3, [r4, #8]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4f9a:	9306      	str	r3, [sp, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f9c:	61a2      	str	r2, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d4f9e:	9301      	str	r3, [sp, #4]
   d4fa0:	9300      	str	r3, [sp, #0]
   d4fa2:	4a0e      	ldr	r2, [pc, #56]	; (d4fdc <_GLOBAL__sub_I_igh_button_sec_counter+0x84>)
   d4fa4:	4623      	mov	r3, r4
   d4fa6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4faa:	f104 0008 	add.w	r0, r4, #8
   d4fae:	f002 f837 	bl	d7020 <os_timer_create>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4fb2:	4628      	mov	r0, r5
   d4fb4:	f7ff ff75 	bl	d4ea2 <_ZNSt14_Function_baseD1Ev>
#include "igh_hardware.h"
#include "include/igh_settings.h"

// button global variables
uint8_t igh_button_sec_counter;
Timer igh_button_timer(1000, igh_boron_button_press_duration);
   d4fb8:	4a09      	ldr	r2, [pc, #36]	; (d4fe0 <_GLOBAL__sub_I_igh_button_sec_counter+0x88>)
   d4fba:	490a      	ldr	r1, [pc, #40]	; (d4fe4 <_GLOBAL__sub_I_igh_button_sec_counter+0x8c>)
   d4fbc:	4620      	mov	r0, r4
   d4fbe:	f003 feef 	bl	d8da0 <__aeabi_atexit>
    }
    else
    {
        igh_button_sec_counter = 0;
    } 
   d4fc2:	b008      	add	sp, #32
   d4fc4:	bd70      	pop	{r4, r5, r6, pc}
   d4fc6:	bf00      	nop
   d4fc8:	000d4f3d 	.word	0x000d4f3d
   d4fcc:	2003dbc8 	.word	0x2003dbc8
   d4fd0:	000d9b70 	.word	0x000d9b70
   d4fd4:	000d4e43 	.word	0x000d4e43
   d4fd8:	000d4e3f 	.word	0x000d4e3f
   d4fdc:	000d4e67 	.word	0x000d4e67
   d4fe0:	2003db4c 	.word	0x2003db4c
   d4fe4:	000d4ed5 	.word	0x000d4ed5

000d4fe8 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d4fe8:	7c03      	ldrb	r3, [r0, #16]
   d4fea:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d4fee:	4602      	mov	r2, r0
   d4ff0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d4ff4:	b12b      	cbz	r3, d5002 <_ZN4File9availableEv+0x1a>
   d4ff6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d4ff8:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d4ffa:	1a18      	subs	r0, r3, r0
   d4ffc:	bf48      	it	mi
   d4ffe:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d5002:	4770      	bx	lr

000d5004 <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
   d5004:	4770      	bx	lr

000d5006 <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d5006:	4770      	bx	lr

000d5008 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d5008:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d500a:	4602      	mov	r2, r0
   d500c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d500e:	7913      	ldrb	r3, [r2, #4]
   d5010:	6895      	ldr	r5, [r2, #8]
   d5012:	b133      	cbz	r3, d5022 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d5014:	b93d      	cbnz	r5, d5026 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d5016:	490c      	ldr	r1, [pc, #48]	; (d5048 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d5018:	b004      	add	sp, #16
   d501a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d501e:	f002 bc7f 	b.w	d7920 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d5022:	4b0a      	ldr	r3, [pc, #40]	; (d504c <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d5024:	e000      	b.n	d5028 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d5026:	4b0a      	ldr	r3, [pc, #40]	; (d5050 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d5028:	7b16      	ldrb	r6, [r2, #12]
   d502a:	4c0a      	ldr	r4, [pc, #40]	; (d5054 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d502c:	490a      	ldr	r1, [pc, #40]	; (d5058 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d502e:	7b52      	ldrb	r2, [r2, #13]
   d5030:	9202      	str	r2, [sp, #8]
   d5032:	2e01      	cmp	r6, #1
   d5034:	bf08      	it	eq
   d5036:	4621      	moveq	r1, r4
   d5038:	9101      	str	r1, [sp, #4]
   d503a:	9500      	str	r5, [sp, #0]
   d503c:	4a07      	ldr	r2, [pc, #28]	; (d505c <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d503e:	2100      	movs	r1, #0
   d5040:	f002 fcab 	bl	d799a <_ZN5Print11printf_implEbPKcz>
  }
   d5044:	b004      	add	sp, #16
   d5046:	bd70      	pop	{r4, r5, r6, pc}
   d5048:	000d9bd9 	.word	0x000d9bd9
   d504c:	000d9d74 	.word	0x000d9d74
   d5050:	000d9bc8 	.word	0x000d9bc8
   d5054:	000d9bd1 	.word	0x000d9bd1
   d5058:	000d9bd5 	.word	0x000d9bd5
   d505c:	000d9bef 	.word	0x000d9bef

000d5060 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d5060:	3010      	adds	r0, #16
   d5062:	f000 bf37 	b.w	d5ed4 <_ZN7FatFile4syncEv>

000d5066 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d5066:	3010      	adds	r0, #16
   d5068:	f000 bed8 	b.w	d5e1c <_ZN7FatFile4peekEv>

000d506c <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d506c:	3010      	adds	r0, #16
   d506e:	f000 bf67 	b.w	d5f40 <_ZN7FatFile5writeEPKvj>

000d5072 <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d5072:	3008      	adds	r0, #8
   d5074:	f000 bf64 	b.w	d5f40 <_ZN7FatFile5writeEPKvj>

000d5078 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d5078:	b507      	push	{r0, r1, r2, lr}
   d507a:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d507c:	2201      	movs	r2, #1
   d507e:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d5082:	3010      	adds	r0, #16
   d5084:	4619      	mov	r1, r3
   d5086:	f000 ff5b 	bl	d5f40 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d508a:	b003      	add	sp, #12
   d508c:	f85d fb04 	ldr.w	pc, [sp], #4

000d5090 <_ZN6SdFileD0Ev>:
   d5090:	b510      	push	{r4, lr}
   d5092:	212c      	movs	r1, #44	; 0x2c
   d5094:	4604      	mov	r4, r0
   d5096:	f003 fe91 	bl	d8dbc <_ZdlPvj>
   d509a:	4620      	mov	r0, r4
   d509c:	bd10      	pop	{r4, pc}

000d509e <_ZN4FileD0Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d509e:	b510      	push	{r4, lr}
   d50a0:	2134      	movs	r1, #52	; 0x34
   d50a2:	4604      	mov	r4, r0
   d50a4:	f003 fe8a 	bl	d8dbc <_ZdlPvj>
   d50a8:	4620      	mov	r0, r4
   d50aa:	bd10      	pop	{r4, pc}

000d50ac <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d50ac:	b507      	push	{r0, r1, r2, lr}
   d50ae:	ab02      	add	r3, sp, #8
   d50b0:	2201      	movs	r2, #1
   d50b2:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d50b6:	3008      	adds	r0, #8
   d50b8:	4619      	mov	r1, r3
   d50ba:	f000 ff41 	bl	d5f40 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d50be:	b003      	add	sp, #12
   d50c0:	f85d fb04 	ldr.w	pc, [sp], #4

000d50c4 <_ZN7FatFile4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
   d50c4:	b507      	push	{r0, r1, r2, lr}
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d50c6:	2201      	movs	r2, #1
   d50c8:	f10d 0107 	add.w	r1, sp, #7
   d50cc:	f000 fdf3 	bl	d5cb6 <_ZN7FatFile4readEPvj>
   d50d0:	2801      	cmp	r0, #1
   d50d2:	bf0c      	ite	eq
   d50d4:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d50d8:	f04f 30ff 	movne.w	r0, #4294967295
  }
   d50dc:	b003      	add	sp, #12
   d50de:	f85d fb04 	ldr.w	pc, [sp], #4

000d50e2 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d50e2:	b508      	push	{r3, lr}
    return FatFile::read();
   d50e4:	3010      	adds	r0, #16
   d50e6:	f7ff ffed 	bl	d50c4 <_ZN7FatFile4readEv>
  }
   d50ea:	bd08      	pop	{r3, pc}

000d50ec <_GLOBAL__sub_I_igh_sd>:
    {
        return 0;
    }

    return 1;
   d50ec:	b570      	push	{r4, r5, r6, lr}
   d50ee:	f001 fe77 	bl	d6de0 <HAL_Pin_Map>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d50f2:	4b27      	ldr	r3, [pc, #156]	; (d5190 <_GLOBAL__sub_I_igh_sd+0xa4>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d50f4:	4e27      	ldr	r6, [pc, #156]	; (d5194 <_GLOBAL__sub_I_igh_sd+0xa8>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d50f6:	2164      	movs	r1, #100	; 0x64
   d50f8:	f883 1460 	strb.w	r1, [r3, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d50fc:	4926      	ldr	r1, [pc, #152]	; (d5198 <_GLOBAL__sub_I_igh_sd+0xac>)
   d50fe:	f8c3 1470 	str.w	r1, [r3, #1136]	; 0x470
   d5102:	2101      	movs	r1, #1
   d5104:	f883 1474 	strb.w	r1, [r3, #1140]	; 0x474
   d5108:	6831      	ldr	r1, [r6, #0]
   d510a:	2200      	movs	r2, #0
   d510c:	f011 0501 	ands.w	r5, r1, #1
   d5110:	71da      	strb	r2, [r3, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5112:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
   d5116:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
   d511a:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
   d511e:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   d5122:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
   d5126:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
   d512a:	461c      	mov	r4, r3
   d512c:	d10a      	bne.n	d5144 <_GLOBAL__sub_I_igh_sd+0x58>
   d512e:	4630      	mov	r0, r6
   d5130:	f7fe ffb9 	bl	d40a6 <__cxa_guard_acquire>
   d5134:	b130      	cbz	r0, d5144 <_GLOBAL__sub_I_igh_sd+0x58>
   d5136:	4629      	mov	r1, r5
   d5138:	4818      	ldr	r0, [pc, #96]	; (d519c <_GLOBAL__sub_I_igh_sd+0xb0>)
   d513a:	f002 f9f1 	bl	d7520 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d513e:	4630      	mov	r0, r6
   d5140:	f7fe ffb6 	bl	d40b0 <__cxa_guard_release>
   d5144:	4816      	ldr	r0, [pc, #88]	; (d51a0 <_GLOBAL__sub_I_igh_sd+0xb4>)
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d5146:	4b15      	ldr	r3, [pc, #84]	; (d519c <_GLOBAL__sub_I_igh_sd+0xb0>)
   d5148:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d514c:	2400      	movs	r4, #0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d514e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5152:	7404      	strb	r4, [r0, #16]
   d5154:	7444      	strb	r4, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5156:	6044      	str	r4, [r0, #4]
   d5158:	6083      	str	r3, [r0, #8]
#include <SPI.h>
#include "SdFat.h"
#include "igh_sd_log.h"

SdFat igh_sd;
File igh_file;
   d515a:	4a12      	ldr	r2, [pc, #72]	; (d51a4 <_GLOBAL__sub_I_igh_sd+0xb8>)
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 public:
  File() {}
   d515c:	4b12      	ldr	r3, [pc, #72]	; (d51a8 <_GLOBAL__sub_I_igh_sd+0xbc>)
   d515e:	4913      	ldr	r1, [pc, #76]	; (d51ac <_GLOBAL__sub_I_igh_sd+0xc0>)
   d5160:	6003      	str	r3, [r0, #0]
   d5162:	f003 fe1d 	bl	d8da0 <__aeabi_atexit>
   d5166:	4812      	ldr	r0, [pc, #72]	; (d51b0 <_GLOBAL__sub_I_igh_sd+0xc4>)
 public:
  SdFile() {}
   d5168:	4d12      	ldr	r5, [pc, #72]	; (d51b4 <_GLOBAL__sub_I_igh_sd+0xc8>)
   d516a:	7204      	strb	r4, [r0, #8]
   d516c:	7244      	strb	r4, [r0, #9]
   d516e:	6044      	str	r4, [r0, #4]
SdFile sd_root;
   d5170:	4a0c      	ldr	r2, [pc, #48]	; (d51a4 <_GLOBAL__sub_I_igh_sd+0xb8>)
   d5172:	4911      	ldr	r1, [pc, #68]	; (d51b8 <_GLOBAL__sub_I_igh_sd+0xcc>)
   d5174:	6005      	str	r5, [r0, #0]
   d5176:	f003 fe13 	bl	d8da0 <__aeabi_atexit>
   d517a:	4810      	ldr	r0, [pc, #64]	; (d51bc <_GLOBAL__sub_I_igh_sd+0xd0>)
SdFile next_file;
   d517c:	4a09      	ldr	r2, [pc, #36]	; (d51a4 <_GLOBAL__sub_I_igh_sd+0xb8>)
   d517e:	7204      	strb	r4, [r0, #8]
   d5180:	7244      	strb	r4, [r0, #9]
   d5182:	6044      	str	r4, [r0, #4]
   d5184:	6005      	str	r5, [r0, #0]
   d5186:	490c      	ldr	r1, [pc, #48]	; (d51b8 <_GLOBAL__sub_I_igh_sd+0xcc>)
    {
        return 0;
    }

    return 1;
   d5188:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#include "igh_sd_log.h"

SdFat igh_sd;
File igh_file;
SdFile sd_root;
SdFile next_file;
   d518c:	f003 be08 	b.w	d8da0 <__aeabi_atexit>
   d5190:	2003dc1c 	.word	0x2003dc1c
   d5194:	2003dbe4 	.word	0x2003dbe4
   d5198:	000d9b84 	.word	0x000d9b84
   d519c:	2003dbe8 	.word	0x2003dbe8
   d51a0:	2003e0cc 	.word	0x2003e0cc
   d51a4:	2003db4c 	.word	0x2003db4c
   d51a8:	000d9b90 	.word	0x000d9b90
   d51ac:	000d5007 	.word	0x000d5007
   d51b0:	2003e0a0 	.word	0x2003e0a0
   d51b4:	000d9bb8 	.word	0x000d9bb8
   d51b8:	000d5005 	.word	0x000d5005
   d51bc:	2003dbf0 	.word	0x2003dbf0

000d51c0 <_ZN14CellularSignalD1Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d51c0:	4770      	bx	lr

000d51c2 <_ZN14CellularSignalD0Ev>:
   d51c2:	b510      	push	{r4, lr}
   d51c4:	2128      	movs	r1, #40	; 0x28
   d51c6:	4604      	mov	r4, r0
   d51c8:	f003 fdf8 	bl	d8dbc <_ZdlPvj>
   d51cc:	4620      	mov	r0, r4
   d51ce:	bd10      	pop	{r4, pc}

000d51d0 <_Z19igh_boron_sync_timev>:
float battery_voltage, battery_SOC;
unsigned long unix_time;

/* Functions */
void igh_boron_sync_time(void)
{
   d51d0:	b510      	push	{r4, lr}
   d51d2:	f001 fecd 	bl	d6f70 <HAL_Timer_Get_Milli_Seconds>
    if((millis() - lastSync > ONE_DAY_MILLIS))
   d51d6:	4b08      	ldr	r3, [pc, #32]	; (d51f8 <_Z19igh_boron_sync_timev+0x28>)
   d51d8:	681a      	ldr	r2, [r3, #0]
   d51da:	1a80      	subs	r0, r0, r2
   d51dc:	4a07      	ldr	r2, [pc, #28]	; (d51fc <_Z19igh_boron_sync_timev+0x2c>)
   d51de:	4290      	cmp	r0, r2
   d51e0:	461c      	mov	r4, r3
   d51e2:	d908      	bls.n	d51f6 <_Z19igh_boron_sync_timev+0x26>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d51e4:	f002 f910 	bl	d7408 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d51e8:	b110      	cbz	r0, d51f0 <_Z19igh_boron_sync_timev+0x20>
            return false;
        }
        return spark_sync_time(NULL);
   d51ea:	2000      	movs	r0, #0
   d51ec:	f002 f914 	bl	d7418 <spark_sync_time>
   d51f0:	f001 febe 	bl	d6f70 <HAL_Timer_Get_Milli_Seconds>
    {
        Particle.syncTime();
        lastSync = millis(); 
   d51f4:	6020      	str	r0, [r4, #0]
   d51f6:	bd10      	pop	{r4, pc}
   d51f8:	2003e128 	.word	0x2003e128
   d51fc:	05265c00 	.word	0x05265c00

000d5200 <_Z19igh_boron_unix_timev>:
    }
}

unsigned long igh_boron_unix_time(void)
{
    return Time.now();
   d5200:	f002 bc3c 	b.w	d7a7c <_ZN9TimeClass3nowEv>

000d5204 <_Z13igh_boron_SoCv>:
}

float igh_boron_SoC(void)
{
    return fuel.getSoC();
   d5204:	4801      	ldr	r0, [pc, #4]	; (d520c <_Z13igh_boron_SoCv+0x8>)
   d5206:	f002 bd49 	b.w	d7c9c <_ZN9FuelGauge6getSoCEv>
   d520a:	bf00      	nop
   d520c:	2003e12c 	.word	0x2003e12c

000d5210 <_Z15igh_boron_setupv>:
{
    return Particle.connected();;
}

void igh_boron_setup(void)
{
   d5210:	b508      	push	{r3, lr}
   d5212:	f001 fead 	bl	d6f70 <HAL_Timer_Get_Milli_Seconds>
    lastSync = millis();
   d5216:	4b01      	ldr	r3, [pc, #4]	; (d521c <_Z15igh_boron_setupv+0xc>)
   d5218:	6018      	str	r0, [r3, #0]
   d521a:	bd08      	pop	{r3, pc}
   d521c:	2003e128 	.word	0x2003e128

000d5220 <_Z17igh_boron_servicev>:
}

void igh_boron_service(void)
{
    igh_boron_sync_time();
   d5220:	f7ff bfd6 	b.w	d51d0 <_Z19igh_boron_sync_timev>

000d5224 <_GLOBAL__sub_I_lastSync>:
}

String igh_boron_test_id(void)
{
    return System.deviceID();
}
   d5224:	b570      	push	{r4, r5, r6, lr}
   d5226:	f001 fddb 	bl	d6de0 <HAL_Pin_Map>
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d522a:	4c10      	ldr	r4, [pc, #64]	; (d526c <_GLOBAL__sub_I_lastSync+0x48>)
   d522c:	4b10      	ldr	r3, [pc, #64]	; (d5270 <_GLOBAL__sub_I_lastSync+0x4c>)
   d522e:	6023      	str	r3, [r4, #0]
   d5230:	2500      	movs	r5, #0
   d5232:	3328      	adds	r3, #40	; 0x28
   d5234:	4629      	mov	r1, r5
#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)

unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
   d5236:	4e0f      	ldr	r6, [pc, #60]	; (d5274 <_GLOBAL__sub_I_lastSync+0x50>)
   d5238:	6063      	str	r3, [r4, #4]
   d523a:	2218      	movs	r2, #24
   d523c:	f104 0010 	add.w	r0, r4, #16
   d5240:	60a5      	str	r5, [r4, #8]
   d5242:	60e5      	str	r5, [r4, #12]
   d5244:	f004 fb58 	bl	d98f8 <memset>
   d5248:	4620      	mov	r0, r4
float signal_quality, signal_strength;
FuelGauge fuel;
   d524a:	4c0b      	ldr	r4, [pc, #44]	; (d5278 <_GLOBAL__sub_I_lastSync+0x54>)
#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)

unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
   d524c:	490b      	ldr	r1, [pc, #44]	; (d527c <_GLOBAL__sub_I_lastSync+0x58>)
   d524e:	4632      	mov	r2, r6
   d5250:	f003 fda6 	bl	d8da0 <__aeabi_atexit>
float signal_quality, signal_strength;
FuelGauge fuel;
   d5254:	4629      	mov	r1, r5
   d5256:	4620      	mov	r0, r4
   d5258:	f002 fce0 	bl	d7c1c <_ZN9FuelGaugeC1Eb>
   d525c:	4632      	mov	r2, r6
   d525e:	4620      	mov	r0, r4
   d5260:	4907      	ldr	r1, [pc, #28]	; (d5280 <_GLOBAL__sub_I_lastSync+0x5c>)
}

String igh_boron_test_id(void)
{
    return System.deviceID();
}
   d5262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
float signal_quality, signal_strength;
FuelGauge fuel;
   d5266:	f003 bd9b 	b.w	d8da0 <__aeabi_atexit>
   d526a:	bf00      	nop
   d526c:	2003e100 	.word	0x2003e100
   d5270:	000d9de0 	.word	0x000d9de0
   d5274:	2003db4c 	.word	0x2003db4c
   d5278:	2003e12c 	.word	0x2003e12c
   d527c:	000d51c1 	.word	0x000d51c1
   d5280:	000d7c3b 	.word	0x000d7c3b

000d5284 <_Z21igh_rfm69_set_bitratehh>:
    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
} 

void igh_rfm69_set_bitrate(uint8_t msb, uint8_t lsb)
{
   d5284:	b538      	push	{r3, r4, r5, lr}
    igh_radio.writeReg(REG_BITRATEMSB, msb); 
   d5286:	4c07      	ldr	r4, [pc, #28]	; (d52a4 <_Z21igh_rfm69_set_bitratehh+0x20>)
    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
} 

void igh_rfm69_set_bitrate(uint8_t msb, uint8_t lsb)
{
   d5288:	460d      	mov	r5, r1
    igh_radio.writeReg(REG_BITRATEMSB, msb); 
   d528a:	4602      	mov	r2, r0
   d528c:	2103      	movs	r1, #3
   d528e:	4620      	mov	r0, r4
   d5290:	f001 faac 	bl	d67ec <_ZN5RFM698writeRegEhh>
    igh_radio.writeReg(REG_BITRATELSB, lsb);
   d5294:	462a      	mov	r2, r5
   d5296:	4620      	mov	r0, r4
   d5298:	2104      	movs	r1, #4
}
   d529a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
} 

void igh_rfm69_set_bitrate(uint8_t msb, uint8_t lsb)
{
    igh_radio.writeReg(REG_BITRATEMSB, msb); 
    igh_radio.writeReg(REG_BITRATELSB, lsb);
   d529e:	f001 baa5 	b.w	d67ec <_ZN5RFM698writeRegEhh>
   d52a2:	bf00      	nop
   d52a4:	2003e134 	.word	0x2003e134

000d52a8 <_Z25igh_rfm69_set_power_levelh>:
}

void igh_rfm69_set_power_level(uint8_t pwrlvl)
{
    igh_radio.setPowerLevel(pwrlvl);
   d52a8:	4601      	mov	r1, r0
   d52aa:	4801      	ldr	r0, [pc, #4]	; (d52b0 <_Z25igh_rfm69_set_power_levelh+0x8>)
   d52ac:	f001 bab0 	b.w	d6810 <_ZN5RFM6913setPowerLevelEh>
   d52b0:	2003e134 	.word	0x2003e134

000d52b4 <_Z15igh_rfm69_resetv>:
}

void igh_rfm69_reset(void)
{
   d52b4:	b508      	push	{r3, lr}
    digitalWrite(RFM69_RST, HIGH);
   d52b6:	2101      	movs	r1, #1
   d52b8:	2006      	movs	r0, #6
   d52ba:	f003 fcb0 	bl	d8c1e <digitalWrite>
    delay(100);
   d52be:	2064      	movs	r0, #100	; 0x64
   d52c0:	f002 fbee 	bl	d7aa0 <delay>
    digitalWrite(RFM69_RST, LOW);
   d52c4:	2006      	movs	r0, #6
   d52c6:	2100      	movs	r1, #0
   d52c8:	f003 fca9 	bl	d8c1e <digitalWrite>
    delay(100);
   d52cc:	2064      	movs	r0, #100	; 0x64
}
   d52ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void igh_rfm69_reset(void)
{
    digitalWrite(RFM69_RST, HIGH);
    delay(100);
    digitalWrite(RFM69_RST, LOW);
    delay(100);
   d52d2:	f002 bbe5 	b.w	d7aa0 <delay>
	...

000d52d8 <_Z15igh_rfm69_setupv>:
uint8_t rfm69_powerlevel  = 10; // default power level, about 100M line of site

RFM69 igh_radio = RFM69(RFM69_CS, RFM69_IRQ, IS_RFM69HCW, RFM69_IRQN);

void igh_rfm69_setup(void)
{
   d52d8:	b538      	push	{r3, r4, r5, lr}
    // first reset the module
    pinMode(RFM69_RST, OUTPUT);

    igh_rfm69_reset();
    
    if( false == igh_radio.initialize( FREQUENCY, RFM69_NODE_ID, RFM69_NETWORK_ID) )
   d52da:	4c21      	ldr	r4, [pc, #132]	; (d5360 <_Z15igh_rfm69_setupv+0x88>)
RFM69 igh_radio = RFM69(RFM69_CS, RFM69_IRQ, IS_RFM69HCW, RFM69_IRQN);

void igh_rfm69_setup(void)
{
    // first reset the module
    pinMode(RFM69_RST, OUTPUT);
   d52dc:	2101      	movs	r1, #1
   d52de:	2006      	movs	r0, #6
   d52e0:	f003 fc8c 	bl	d8bfc <pinMode>

    igh_rfm69_reset();
   d52e4:	f7ff ffe6 	bl	d52b4 <_Z15igh_rfm69_resetv>
    
    if( false == igh_radio.initialize( FREQUENCY, RFM69_NODE_ID, RFM69_NETWORK_ID) )
   d52e8:	7da3      	ldrb	r3, [r4, #22]
   d52ea:	7de2      	ldrb	r2, [r4, #23]
   d52ec:	481d      	ldr	r0, [pc, #116]	; (d5364 <_Z15igh_rfm69_setupv+0x8c>)
   d52ee:	215b      	movs	r1, #91	; 0x5b
   d52f0:	f001 fc52 	bl	d6b98 <_ZN5RFM6910initializeEhhh>
   d52f4:	b920      	cbnz	r0, d5300 <_Z15igh_rfm69_setupv+0x28>
    Serial.println("RFM69 INIT ERROR");
   d52f6:	f002 fe73 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d52fa:	491b      	ldr	r1, [pc, #108]	; (d5368 <_Z15igh_rfm69_setupv+0x90>)
   d52fc:	f002 fb23 	bl	d7946 <_ZN5Print7printlnEPKc>

    Serial.print( "NEW NODE ID: " ); Serial.println( RFM69_NODE_ID);
   d5300:	f002 fe6e 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d5304:	4919      	ldr	r1, [pc, #100]	; (d536c <_Z15igh_rfm69_setupv+0x94>)
   d5306:	f002 fb0b 	bl	d7920 <_ZN5Print5printEPKc>
   d530a:	f002 fe69 	bl	d7fe0 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d530e:	220a      	movs	r2, #10
   d5310:	7de1      	ldrb	r1, [r4, #23]
   d5312:	4605      	mov	r5, r0
   d5314:	f002 fb21 	bl	d795a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d5318:	4628      	mov	r0, r5
   d531a:	f002 fb08 	bl	d792e <_ZN5Print7printlnEv>
    Serial.print( "NEW NETWORK ID: " ); Serial.println( RFM69_NETWORK_ID);
   d531e:	f002 fe5f 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d5322:	4913      	ldr	r1, [pc, #76]	; (d5370 <_Z15igh_rfm69_setupv+0x98>)
   d5324:	f002 fafc 	bl	d7920 <_ZN5Print5printEPKc>
   d5328:	f002 fe5a 	bl	d7fe0 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d532c:	220a      	movs	r2, #10
   d532e:	7da1      	ldrb	r1, [r4, #22]
   d5330:	4605      	mov	r5, r0
   d5332:	f002 fb12 	bl	d795a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d5336:	4628      	mov	r0, r5
   d5338:	f002 faf9 	bl	d792e <_ZN5Print7printlnEv>

    igh_radio.setHighPower(); // This should only be called for RFM69HCW & HW
   d533c:	2101      	movs	r1, #1
   d533e:	4809      	ldr	r0, [pc, #36]	; (d5364 <_Z15igh_rfm69_setupv+0x8c>)
   d5340:	f001 fb50 	bl	d69e4 <_ZN5RFM6912setHighPowerEb>

    igh_rfm69_set_bitrate(RF_BITRATEMSB_9600, RF_BITRATELSB_9600); // set to 9.6Kbps
   d5344:	2105      	movs	r1, #5
   d5346:	200d      	movs	r0, #13
   d5348:	f7ff ff9c 	bl	d5284 <_Z21igh_rfm69_set_bitratehh>

    igh_rfm69_set_power_level(rfm69_powerlevel);
   d534c:	4b09      	ldr	r3, [pc, #36]	; (d5374 <_Z15igh_rfm69_setupv+0x9c>)
   d534e:	7818      	ldrb	r0, [r3, #0]
   d5350:	f7ff ffaa 	bl	d52a8 <_Z25igh_rfm69_set_power_levelh>

    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
   d5354:	4908      	ldr	r1, [pc, #32]	; (d5378 <_Z15igh_rfm69_setupv+0xa0>)
   d5356:	4803      	ldr	r0, [pc, #12]	; (d5364 <_Z15igh_rfm69_setupv+0x8c>)
} 
   d5358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    igh_rfm69_set_bitrate(RF_BITRATEMSB_9600, RF_BITRATELSB_9600); // set to 9.6Kbps

    igh_rfm69_set_power_level(rfm69_powerlevel);

    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
   d535c:	f001 bbf0 	b.w	d6b40 <_ZN5RFM697encryptEPKc>
   d5360:	2003e640 	.word	0x2003e640
   d5364:	2003e134 	.word	0x2003e134
   d5368:	000d9c24 	.word	0x000d9c24
   d536c:	000d9c35 	.word	0x000d9c35
   d5370:	000d9c43 	.word	0x000d9c43
   d5374:	2003dae2 	.word	0x2003dae2
   d5378:	000d9c54 	.word	0x000d9c54

000d537c <_Z27igh_rfm69_receive_raw_bytesPhh>:
    }
    
}

uint8_t igh_rfm69_receive_raw_bytes( uint8_t *buffer, uint8_t len )
{
   d537c:	b570      	push	{r4, r5, r6, lr}
   d537e:	4605      	mov	r5, r0
    uint8_t rx_len = 0;
    if ( igh_radio.receiveDone() )
   d5380:	4809      	ldr	r0, [pc, #36]	; (d53a8 <_Z27igh_rfm69_receive_raw_bytesPhh+0x2c>)
    }
    
}

uint8_t igh_rfm69_receive_raw_bytes( uint8_t *buffer, uint8_t len )
{
   d5382:	460e      	mov	r6, r1
    uint8_t rx_len = 0;
    if ( igh_radio.receiveDone() )
   d5384:	f001 fb0e 	bl	d69a4 <_ZN5RFM6911receiveDoneEv>
   d5388:	b160      	cbz	r0, d53a4 <_Z27igh_rfm69_receive_raw_bytesPhh+0x28>
    {
        if( igh_radio.DATALEN <= len )
   d538a:	4c08      	ldr	r4, [pc, #32]	; (d53ac <_Z27igh_rfm69_receive_raw_bytesPhh+0x30>)
   d538c:	7823      	ldrb	r3, [r4, #0]
   d538e:	42b3      	cmp	r3, r6
   d5390:	d807      	bhi.n	d53a2 <_Z27igh_rfm69_receive_raw_bytesPhh+0x26>
        {
            memcpy( buffer, (uint8_t *)igh_radio.DATA, igh_radio.DATALEN);
   d5392:	7822      	ldrb	r2, [r4, #0]
   d5394:	4906      	ldr	r1, [pc, #24]	; (d53b0 <_Z27igh_rfm69_receive_raw_bytesPhh+0x34>)
   d5396:	4628      	mov	r0, r5
   d5398:	f004 faa3 	bl	d98e2 <memcpy>
            rx_len = igh_radio.DATALEN;
   d539c:	7820      	ldrb	r0, [r4, #0]
   d539e:	b2c0      	uxtb	r0, r0
   d53a0:	bd70      	pop	{r4, r5, r6, pc}
    
}

uint8_t igh_rfm69_receive_raw_bytes( uint8_t *buffer, uint8_t len )
{
    uint8_t rx_len = 0;
   d53a2:	2000      	movs	r0, #0
            memcpy( buffer, (uint8_t *)igh_radio.DATA, igh_radio.DATALEN);
            rx_len = igh_radio.DATALEN;
        }
    }
    return rx_len;
}
   d53a4:	bd70      	pop	{r4, r5, r6, pc}
   d53a6:	bf00      	nop
   d53a8:	2003e134 	.word	0x2003e134
   d53ac:	2003e1a7 	.word	0x2003e1a7
   d53b0:	2003e16a 	.word	0x2003e16a

000d53b4 <_Z17igh_rfm69_servicev>:

void igh_rfm69_service( void )
{
   d53b4:	b510      	push	{r4, lr}
    // if new settings have been sent, re initialize the module
    if( true == initialize_rfm69 )
   d53b6:	4c04      	ldr	r4, [pc, #16]	; (d53c8 <_Z17igh_rfm69_servicev+0x14>)
   d53b8:	7823      	ldrb	r3, [r4, #0]
   d53ba:	2b01      	cmp	r3, #1
   d53bc:	d103      	bne.n	d53c6 <_Z17igh_rfm69_servicev+0x12>
    {
        igh_rfm69_setup();
   d53be:	f7ff ff8b 	bl	d52d8 <_Z15igh_rfm69_setupv>
        initialize_rfm69 = false;
   d53c2:	2300      	movs	r3, #0
   d53c4:	7023      	strb	r3, [r4, #0]
   d53c6:	bd10      	pop	{r4, pc}
   d53c8:	2003db51 	.word	0x2003db51

000d53cc <_GLOBAL__sub_I_NETWORKID>:
    }
   d53cc:	b508      	push	{r3, lr}
   d53ce:	f001 fd07 	bl	d6de0 <HAL_Pin_Map>
    static volatile byte ACK_REQUESTED;
    static volatile byte ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
    static volatile int RSSI; //most accurate RSSI during reception (closest to the reception)
    static volatile byte _mode; //should be protected?

    RFM69(byte slaveSelectPin=RF69_SPI_CS, byte interruptPin=RF69_IRQ_PIN, bool isRFM69HW=false, byte interruptNum=RF69_IRQ_NUM) {
   d53d2:	4b08      	ldr	r3, [pc, #32]	; (d53f4 <_GLOBAL__sub_I_NETWORKID+0x28>)
   d53d4:	4a08      	ldr	r2, [pc, #32]	; (d53f8 <_GLOBAL__sub_I_NETWORKID+0x2c>)
   d53d6:	601a      	str	r2, [r3, #0]
      _slaveSelectPin = slaveSelectPin;
   d53d8:	2211      	movs	r2, #17
      _interruptPin = interruptPin;
      _interruptNum = interruptNum;
      _mode = RF69_MODE_STANDBY;
   d53da:	4908      	ldr	r1, [pc, #32]	; (d53fc <_GLOBAL__sub_I_NETWORKID+0x30>)
    static volatile byte ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
    static volatile int RSSI; //most accurate RSSI during reception (closest to the reception)
    static volatile byte _mode; //should be protected?

    RFM69(byte slaveSelectPin=RF69_SPI_CS, byte interruptPin=RF69_IRQ_PIN, bool isRFM69HW=false, byte interruptNum=RF69_IRQ_NUM) {
      _slaveSelectPin = slaveSelectPin;
   d53dc:	711a      	strb	r2, [r3, #4]
      _interruptPin = interruptPin;
   d53de:	2208      	movs	r2, #8
   d53e0:	715a      	strb	r2, [r3, #5]
      _interruptNum = interruptNum;
   d53e2:	719a      	strb	r2, [r3, #6]
      _mode = RF69_MODE_STANDBY;
   d53e4:	2201      	movs	r2, #1
   d53e6:	700a      	strb	r2, [r1, #0]
      _promiscuousMode = false;
   d53e8:	2100      	movs	r1, #0
   d53ea:	7219      	strb	r1, [r3, #8]
      _powerLevel = 31;
   d53ec:	211f      	movs	r1, #31
   d53ee:	7259      	strb	r1, [r3, #9]
      _isRFM69HW = isRFM69HW;
   d53f0:	729a      	strb	r2, [r3, #10]
   d53f2:	bd08      	pop	{r3, pc}
   d53f4:	2003e134 	.word	0x2003e134
   d53f8:	000d9c90 	.word	0x000d9c90
   d53fc:	2003e1a8 	.word	0x2003e1a8

000d5400 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d5400:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d5402:	6984      	ldr	r4, [r0, #24]
   d5404:	4b0a      	ldr	r3, [pc, #40]	; (d5430 <_ZN9TCPClientD1Ev+0x30>)
   d5406:	6003      	str	r3, [r0, #0]
   d5408:	4605      	mov	r5, r0
   d540a:	b17c      	cbz	r4, d542c <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d540c:	6863      	ldr	r3, [r4, #4]
   d540e:	3b01      	subs	r3, #1
   d5410:	6063      	str	r3, [r4, #4]
   d5412:	b95b      	cbnz	r3, d542c <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d5414:	6823      	ldr	r3, [r4, #0]
   d5416:	4620      	mov	r0, r4
   d5418:	689b      	ldr	r3, [r3, #8]
   d541a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d541c:	68a3      	ldr	r3, [r4, #8]
   d541e:	3b01      	subs	r3, #1
   d5420:	60a3      	str	r3, [r4, #8]
   d5422:	b91b      	cbnz	r3, d542c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d5424:	6823      	ldr	r3, [r4, #0]
   d5426:	4620      	mov	r0, r4
   d5428:	68db      	ldr	r3, [r3, #12]
   d542a:	4798      	blx	r3
   d542c:	4628      	mov	r0, r5
   d542e:	bd38      	pop	{r3, r4, r5, pc}
   d5430:	000d9f34 	.word	0x000d9f34

000d5434 <_ZN9TCPClientD0Ev>:
   d5434:	b510      	push	{r4, lr}
   d5436:	4604      	mov	r4, r0
   d5438:	f7ff ffe2 	bl	d5400 <_ZN9TCPClientD1Ev>
   d543c:	4620      	mov	r0, r4
   d543e:	211c      	movs	r1, #28
   d5440:	f003 fcbc 	bl	d8dbc <_ZdlPvj>
   d5444:	4620      	mov	r0, r4
   d5446:	bd10      	pop	{r4, pc}

000d5448 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d5448:	b538      	push	{r3, r4, r5, lr}
   d544a:	461d      	mov	r5, r3
    this->callback = callback;
   d544c:	9b05      	ldr	r3, [sp, #20]
   d544e:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
   d5450:	2300      	movs	r3, #0

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d5452:	4604      	mov	r4, r0
    this->callback = callback;
    this->qoscallback = NULL;
   d5454:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
   d5456:	b102      	cbz	r2, d545a <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
   d5458:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
   d545a:	b119      	cbz	r1, d5464 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
   d545c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d5460:	f002 fa1a 	bl	d7898 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   d5464:	9b04      	ldr	r3, [sp, #16]
   d5466:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d5468:	9b06      	ldr	r3, [sp, #24]
    if (buffer != NULL)
   d546a:	69e0      	ldr	r0, [r4, #28]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
   d546c:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d5470:	2bff      	cmp	r3, #255	; 0xff
   d5472:	bfb8      	it	lt
   d5474:	23ff      	movlt	r3, #255	; 0xff
   d5476:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   d547a:	b108      	cbz	r0, d5480 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
   d547c:	f7fe fe11 	bl	d40a2 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   d5480:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   d5484:	f7fe fe09 	bl	d409a <_Znaj>
   d5488:	61e0      	str	r0, [r4, #28]
   d548a:	bd38      	pop	{r3, r4, r5, pc}

000d548c <_ZN4MQTTC1EPctPFvS0_PhjE>:
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
   d548c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d5490:	4604      	mov	r4, r0
   d5492:	2500      	movs	r5, #0
   d5494:	4617      	mov	r7, r2
   d5496:	4698      	mov	r8, r3
   d5498:	460e      	mov	r6, r1
   d549a:	f003 fab7 	bl	d8a0c <_ZN9TCPClientC1Ev>
   d549e:	61e5      	str	r5, [r4, #28]
   d54a0:	490a      	ldr	r1, [pc, #40]	; (d54cc <_ZN4MQTTC1EPctPFvS0_PhjE+0x40>)
   d54a2:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d54a6:	f002 f9e4 	bl	d7872 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
   d54aa:	23ff      	movs	r3, #255	; 0xff
   d54ac:	9302      	str	r3, [sp, #8]
   d54ae:	230f      	movs	r3, #15
   d54b0:	9300      	str	r3, [sp, #0]
   d54b2:	4620      	mov	r0, r4
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
   d54b4:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
   d54b6:	f8cd 8004 	str.w	r8, [sp, #4]
   d54ba:	463b      	mov	r3, r7
   d54bc:	462a      	mov	r2, r5
   d54be:	4631      	mov	r1, r6
   d54c0:	f7ff ffc2 	bl	d5448 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
   d54c4:	4620      	mov	r0, r4
   d54c6:	b004      	add	sp, #16
   d54c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d54cc:	000d9d74 	.word	0x000d9d74

000d54d0 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   d54d0:	b510      	push	{r4, lr}
   d54d2:	4604      	mov	r4, r0
    while(!_client.available()) {}
   d54d4:	4620      	mov	r0, r4
   d54d6:	f003 f9fd 	bl	d88d4 <_ZN9TCPClient9availableEv>
   d54da:	2800      	cmp	r0, #0
   d54dc:	d0fa      	beq.n	d54d4 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   d54de:	4620      	mov	r0, r4
   d54e0:	f003 f8a1 	bl	d8626 <_ZN9TCPClient4readEv>
}
   d54e4:	b2c0      	uxtb	r0, r0
   d54e6:	bd10      	pop	{r4, pc}

000d54e8 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d54e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d54ec:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
   d54ee:	69c4      	ldr	r4, [r0, #28]
uint8_t MQTT::readByte() {
    while(!_client.available()) {}
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d54f0:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   d54f2:	f7ff ffed 	bl	d54d0 <_ZN4MQTT8readByteEv>
   d54f6:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d54f8:	69eb      	ldr	r3, [r5, #28]
   d54fa:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   d54fe:	f04f 0901 	mov.w	r9, #1
   d5502:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   d5506:	2700      	movs	r7, #0
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
   d5508:	464e      	mov	r6, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   d550a:	4628      	mov	r0, r5
   d550c:	f7ff ffe0 	bl	d54d0 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   d5510:	69eb      	ldr	r3, [r5, #28]
   d5512:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   d5514:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   d5518:	fb13 f309 	smulbb	r3, r3, r9
   d551c:	441f      	add	r7, r3
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d551e:	1c74      	adds	r4, r6, #1
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
   d5520:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d5522:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   d5524:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   d5526:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   d552a:	d501      	bpl.n	d5530 <_ZN4MQTT10readPacketEPh+0x48>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d552c:	4626      	mov	r6, r4
   d552e:	e7ec      	b.n	d550a <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d5530:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   d5532:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d5536:	f888 3000 	strb.w	r3, [r8]

    if (isPublish) {
   d553a:	d113      	bne.n	d5564 <_ZN4MQTT10readPacketEPh+0x7c>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   d553c:	4628      	mov	r0, r5
   d553e:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d5542:	f7ff ffc5 	bl	d54d0 <_ZN4MQTT8readByteEv>
   d5546:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
   d554a:	4628      	mov	r0, r5
   d554c:	1cf4      	adds	r4, r6, #3
   d554e:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d5552:	3602      	adds	r6, #2
   d5554:	f7ff ffbc 	bl	d54d0 <_ZN4MQTT8readByteEv>
   d5558:	b2b6      	uxth	r6, r6
   d555a:	b2a4      	uxth	r4, r4
   d555c:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   d5560:	2302      	movs	r3, #2
   d5562:	e000      	b.n	d5566 <_ZN4MQTT10readPacketEPh+0x7e>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
   d5564:	2300      	movs	r3, #0
   d5566:	1b1b      	subs	r3, r3, r4
   d5568:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d556a:	19a3      	adds	r3, r4, r6
   d556c:	b29b      	uxth	r3, r3
   d556e:	429f      	cmp	r7, r3
   d5570:	d90b      	bls.n	d558a <_ZN4MQTT10readPacketEPh+0xa2>
        digit = readByte();
   d5572:	4628      	mov	r0, r5
   d5574:	f7ff ffac 	bl	d54d0 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   d5578:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   d557c:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   d557e:	bf84      	itt	hi
   d5580:	69eb      	ldrhi	r3, [r5, #28]
   d5582:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   d5584:	3401      	adds	r4, #1
   d5586:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d5588:	e7ef      	b.n	d556a <_ZN4MQTT10readPacketEPh+0x82>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
   d558a:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   d558e:	42a0      	cmp	r0, r4
   d5590:	bf2c      	ite	cs
   d5592:	4620      	movcs	r0, r4
   d5594:	2000      	movcc	r0, #0
   d5596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d559a <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d559a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d559c:	4607      	mov	r7, r0
   d559e:	468e      	mov	lr, r1
   d55a0:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   d55a2:	461d      	mov	r5, r3
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
   d55a4:	2400      	movs	r4, #0
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d55a6:	a902      	add	r1, sp, #8
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
   d55a8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d55ac:	4421      	add	r1, r4
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
   d55ae:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
   d55b0:	bf18      	it	ne
   d55b2:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
   d55b6:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d55b8:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
   d55bc:	b2e4      	uxtb	r4, r4
    } while(len > 0);
   d55be:	2d00      	cmp	r5, #0
   d55c0:	d1f1      	bne.n	d55a6 <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
   d55c2:	f1c4 0304 	rsb	r3, r4, #4
   d55c6:	18d1      	adds	r1, r2, r3
   d55c8:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
   d55cc:	42a5      	cmp	r5, r4
   d55ce:	da06      	bge.n	d55de <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
   d55d0:	1b2b      	subs	r3, r5, r4
   d55d2:	a801      	add	r0, sp, #4
   d55d4:	4413      	add	r3, r2
   d55d6:	5c28      	ldrb	r0, [r5, r0]
   d55d8:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
   d55da:	3501      	adds	r5, #1
   d55dc:	e7f6      	b.n	d55cc <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   d55de:	1c72      	adds	r2, r6, #1
   d55e0:	4422      	add	r2, r4
   d55e2:	4638      	mov	r0, r7
   d55e4:	f002 ff75 	bl	d84d2 <_ZN9TCPClient5writeEPKhj>
   d55e8:	4605      	mov	r5, r0
   d55ea:	f001 fcc1 	bl	d6f70 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   d55ee:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
   d55f0:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   d55f2:	4434      	add	r4, r6
   d55f4:	b2a8      	uxth	r0, r5
}
   d55f6:	1a23      	subs	r3, r4, r0
   d55f8:	4258      	negs	r0, r3
   d55fa:	4158      	adcs	r0, r3
   d55fc:	b003      	add	sp, #12
   d55fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5600 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d5600:	b510      	push	{r4, lr}
    buffer[0] = MQTTDISCONNECT;
   d5602:	69c3      	ldr	r3, [r0, #28]
   d5604:	22e0      	movs	r2, #224	; 0xe0
   d5606:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   d5608:	69c3      	ldr	r3, [r0, #28]
   d560a:	2200      	movs	r2, #0
   d560c:	705a      	strb	r2, [r3, #1]
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d560e:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
    buffer[1] = 0;
    _client.write(buffer,2);
   d5610:	2202      	movs	r2, #2
   d5612:	69c1      	ldr	r1, [r0, #28]
   d5614:	f002 ff5d 	bl	d84d2 <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   d5618:	4620      	mov	r0, r4
   d561a:	f003 f943 	bl	d88a4 <_ZN9TCPClient4stopEv>
   d561e:	f001 fca7 	bl	d6f70 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   d5622:	6260      	str	r0, [r4, #36]	; 0x24
   d5624:	62a0      	str	r0, [r4, #40]	; 0x28
   d5626:	bd10      	pop	{r4, pc}

000d5628 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d5628:	3302      	adds	r3, #2
    _client.write(buffer,2);
    _client.stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   d562a:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d562c:	b29b      	uxth	r3, r3
   d562e:	460d      	mov	r5, r1
   d5630:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
   d5632:	f815 6b01 	ldrb.w	r6, [r5], #1
   d5636:	b2a4      	uxth	r4, r4
   d5638:	b13e      	cbz	r6, d564a <_ZN4MQTT11writeStringEPKcPht+0x22>
   d563a:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
   d563e:	429f      	cmp	r7, r3
   d5640:	d903      	bls.n	d564a <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
   d5642:	1c5c      	adds	r4, r3, #1
   d5644:	54d6      	strb	r6, [r2, r3]
   d5646:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
   d5648:	e7f2      	b.n	d5630 <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   d564a:	1b19      	subs	r1, r3, r4
   d564c:	440a      	add	r2, r1
   d564e:	1221      	asrs	r1, r4, #8
   d5650:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   d5654:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
   d5658:	4618      	mov	r0, r3
   d565a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d565c <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   d565c:	b538      	push	{r3, r4, r5, lr}
   d565e:	4605      	mov	r5, r0
    bool rc = (int)_client.connected();
   d5660:	f002 ff4d 	bl	d84fe <_ZN9TCPClient9connectedEv>
   d5664:	2800      	cmp	r0, #0
   d5666:	bf14      	ite	ne
   d5668:	2401      	movne	r4, #1
   d566a:	2400      	moveq	r4, #0
    if (!rc) _client.stop();
   d566c:	d102      	bne.n	d5674 <_ZN4MQTT11isConnectedEv+0x18>
   d566e:	4628      	mov	r0, r5
   d5670:	f003 f918 	bl	d88a4 <_ZN9TCPClient4stopEv>
    return rc;
}
   d5674:	4620      	mov	r0, r4
   d5676:	bd38      	pop	{r3, r4, r5, pc}

000d5678 <_ZN4MQTT9setBrokerEPct>:
    if (buffer != NULL)
      delete[] buffer;
    buffer = new uint8_t[this->maxpacketsize];
}

void MQTT::setBroker(char* domain, uint16_t port) {
   d5678:	b570      	push	{r4, r5, r6, lr}
   d567a:	4604      	mov	r4, r0
   d567c:	460e      	mov	r6, r1
   d567e:	4615      	mov	r5, r2
    if(isConnected()) {
   d5680:	f7ff ffec 	bl	d565c <_ZN4MQTT11isConnectedEv>
   d5684:	b110      	cbz	r0, d568c <_ZN4MQTT9setBrokerEPct+0x14>
        disconnect();
   d5686:	4620      	mov	r0, r4
   d5688:	f7ff ffba 	bl	d5600 <_ZN4MQTT10disconnectEv>
    }
    this->domain = domain;
   d568c:	4631      	mov	r1, r6
   d568e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d5692:	f002 f901 	bl	d7898 <_ZN6StringaSEPKc>
    this->ip = NULL;
   d5696:	2300      	movs	r3, #0
   d5698:	64a3      	str	r3, [r4, #72]	; 0x48
    this->port = port;
   d569a:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
   d569e:	bd70      	pop	{r4, r5, r6, pc}

000d56a0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char *user, const char *pass) {
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   d56a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d56a4:	b087      	sub	sp, #28
   d56a6:	4604      	mov	r4, r0
   d56a8:	4689      	mov	r9, r1
   d56aa:	4617      	mov	r7, r2
   d56ac:	461e      	mov	r6, r3
   d56ae:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if (!isConnected()) {
   d56b2:	f7ff ffd3 	bl	d565c <_ZN4MQTT11isConnectedEv>
   d56b6:	4605      	mov	r5, r0
   d56b8:	2800      	cmp	r0, #0
   d56ba:	f040 80bd 	bne.w	d5838 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x198>
        int result = 0;
        if (ip == NULL)
   d56be:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d56c0:	b939      	cbnz	r1, d56d2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x32>
            result = _client.connect(this->domain.c_str(), this->port);
   d56c2:	4603      	mov	r3, r0
   d56c4:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d56c8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d56ca:	4620      	mov	r0, r4
   d56cc:	f002 ffee 	bl	d86ac <_ZN9TCPClient7connectEPKctm>
   d56d0:	e009      	b.n	d56e6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x46>
        else
            result = _client.connect(this->ip, this->port);
   d56d2:	4668      	mov	r0, sp
   d56d4:	f002 fc18 	bl	d7f08 <_ZN9IPAddressC1EPKh>
   d56d8:	462b      	mov	r3, r5
   d56da:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d56de:	4669      	mov	r1, sp
   d56e0:	4620      	mov	r0, r4
   d56e2:	f003 f865 	bl	d87b0 <_ZN9TCPClient7connectE9IPAddresstm>

        if (result) {
   d56e6:	2800      	cmp	r0, #0
   d56e8:	f000 80a2 	beq.w	d5830 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
            nextMsgId = 1;
   d56ec:	2301      	movs	r3, #1
   d56ee:	8423      	strh	r3, [r4, #32]
            uint16_t length = 5;

            if (version == MQTT_V311) {
   d56f0:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
   d56f4:	2b04      	cmp	r3, #4
   d56f6:	d115      	bne.n	d5724 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x84>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d56f8:	4b52      	ldr	r3, [pc, #328]	; (d5844 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a4>)
   d56fa:	6818      	ldr	r0, [r3, #0]
   d56fc:	889a      	ldrh	r2, [r3, #4]
   d56fe:	f8ad 2004 	strh.w	r2, [sp, #4]
   d5702:	9000      	str	r0, [sp, #0]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d5704:	69e2      	ldr	r2, [r4, #28]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d5706:	799b      	ldrb	r3, [r3, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d5708:	9800      	ldr	r0, [sp, #0]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d570a:	f88d 3006 	strb.w	r3, [sp, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d570e:	1d53      	adds	r3, r2, #5
   d5710:	f8c2 0005 	str.w	r0, [r2, #5]
   d5714:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   d5718:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d571c:	719a      	strb	r2, [r3, #6]
   d571e:	8099      	strh	r1, [r3, #4]
                length+=sizeof(MQTT_HEADER_V311);
   d5720:	230c      	movs	r3, #12
   d5722:	e012      	b.n	d574a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d5724:	4b48      	ldr	r3, [pc, #288]	; (d5848 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>)
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d5726:	f8d4 c01c 	ldr.w	ip, [r4, #28]
            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d572a:	6818      	ldr	r0, [r3, #0]
   d572c:	6859      	ldr	r1, [r3, #4]
   d572e:	7a1b      	ldrb	r3, [r3, #8]
   d5730:	466a      	mov	r2, sp
   d5732:	c203      	stmia	r2!, {r0, r1}
   d5734:	7013      	strb	r3, [r2, #0]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d5736:	466b      	mov	r3, sp
   d5738:	cb03      	ldmia	r3!, {r0, r1}
   d573a:	f8cc 0005 	str.w	r0, [ip, #5]
   d573e:	f8cc 1009 	str.w	r1, [ip, #9]
   d5742:	7813      	ldrb	r3, [r2, #0]
   d5744:	f88c 300d 	strb.w	r3, [ip, #13]
                length+=sizeof(MQTT_HEADER_V31);
   d5748:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
   d574a:	f1b8 0f00 	cmp.w	r8, #0
   d574e:	d00a      	beq.n	d5766 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc6>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   d5750:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   d5754:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   d5758:	0152      	lsls	r2, r2, #5
   d575a:	f042 0206 	orr.w	r2, r2, #6
   d575e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
   d5762:	b2d2      	uxtb	r2, r2
   d5764:	e000      	b.n	d5768 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc8>
            } else {
                v = 0x02;
   d5766:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
   d5768:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
   d576c:	b909      	cbnz	r1, d5772 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xd2>
              v = v&0xfd;
   d576e:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
   d5772:	b12f      	cbz	r7, d5780 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>
                v = v|0x80;

                if(pass != NULL) {
   d5774:	b916      	cbnz	r6, d577c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
   d5776:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   d577a:	e001      	b.n	d5780 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>

                if(pass != NULL) {
                    v = v|(0x80>>1);
   d577c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
   d5780:	69e1      	ldr	r1, [r4, #28]
   d5782:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
   d5784:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d5786:	69e1      	ldr	r1, [r4, #28]
   d5788:	1c58      	adds	r0, r3, #1
   d578a:	1212      	asrs	r2, r2, #8
   d578c:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   d578e:	1c9a      	adds	r2, r3, #2
   d5790:	69e1      	ldr	r1, [r4, #28]
   d5792:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d5794:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   d5796:	3303      	adds	r3, #3
   d5798:	69e2      	ldr	r2, [r4, #28]
   d579a:	4649      	mov	r1, r9
   d579c:	4620      	mov	r0, r4
   d579e:	f7ff ff43 	bl	d5628 <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
   d57a2:	f1b8 0f00 	cmp.w	r8, #0
   d57a6:	d00b      	beq.n	d57c0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
                length = writeString(willTopic, buffer, length);
   d57a8:	4603      	mov	r3, r0
   d57aa:	69e2      	ldr	r2, [r4, #28]
   d57ac:	4641      	mov	r1, r8
   d57ae:	4620      	mov	r0, r4
   d57b0:	f7ff ff3a 	bl	d5628 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   d57b4:	69e2      	ldr	r2, [r4, #28]
   d57b6:	9911      	ldr	r1, [sp, #68]	; 0x44
   d57b8:	4603      	mov	r3, r0
   d57ba:	4620      	mov	r0, r4
   d57bc:	f7ff ff34 	bl	d5628 <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
   d57c0:	b167      	cbz	r7, d57dc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                length = writeString(user,buffer,length);
   d57c2:	4603      	mov	r3, r0
   d57c4:	69e2      	ldr	r2, [r4, #28]
   d57c6:	4639      	mov	r1, r7
   d57c8:	4620      	mov	r0, r4
   d57ca:	f7ff ff2d 	bl	d5628 <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
   d57ce:	b12e      	cbz	r6, d57dc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                    length = writeString(pass,buffer,length);
   d57d0:	4603      	mov	r3, r0
   d57d2:	69e2      	ldr	r2, [r4, #28]
   d57d4:	4631      	mov	r1, r6
   d57d6:	4620      	mov	r0, r4
   d57d8:	f7ff ff26 	bl	d5628 <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
   d57dc:	1f43      	subs	r3, r0, #5
   d57de:	b29b      	uxth	r3, r3
   d57e0:	69e2      	ldr	r2, [r4, #28]
   d57e2:	2110      	movs	r1, #16
   d57e4:	4620      	mov	r0, r4
   d57e6:	f7ff fed8 	bl	d559a <_ZN4MQTT5writeEhPht>
   d57ea:	f001 fbc1 	bl	d6f70 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!_client.available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d57ee:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
   d57f2:	6260      	str	r0, [r4, #36]	; 0x24
   d57f4:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!_client.available()) {
   d57f6:	4620      	mov	r0, r4
   d57f8:	f003 f86c 	bl	d88d4 <_ZN9TCPClient9availableEv>
   d57fc:	b940      	cbnz	r0, d5810 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x170>
   d57fe:	f001 fbb7 	bl	d6f70 <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d5802:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d5804:	1ac0      	subs	r0, r0, r3
   d5806:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d5808:	4373      	muls	r3, r6
   d580a:	4298      	cmp	r0, r3
   d580c:	d9f3      	bls.n	d57f6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
   d580e:	e00f      	b.n	d5830 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                    _client.stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d5810:	4669      	mov	r1, sp
   d5812:	4620      	mov	r0, r4
   d5814:	f7ff fe68 	bl	d54e8 <_ZN4MQTT10readPacketEPh>

            if (len == 4) {
   d5818:	2804      	cmp	r0, #4
   d581a:	d109      	bne.n	d5830 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                if (buffer[3] == CONN_ACCEPT) {
   d581c:	69e3      	ldr	r3, [r4, #28]
   d581e:	78de      	ldrb	r6, [r3, #3]
   d5820:	b936      	cbnz	r6, d5830 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
   d5822:	f001 fba5 	bl	d6f70 <HAL_Timer_Get_Milli_Seconds>
                    lastInActivity = millis();
                    pingOutstanding = false;
                    debug_print(" Connect success\n");
                    return true;
   d5826:	2501      	movs	r5, #1
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == CONN_ACCEPT) {
                    lastInActivity = millis();
   d5828:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   d582a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
   d582e:	e004      	b.n	d583a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
                    // check EMQTT_CONNACK_RESPONSE code.
                    debug_print(" Connect fail. code = [%d]\n", buffer[3]);
                }
            }
        }
        _client.stop();
   d5830:	4620      	mov	r0, r4
   d5832:	f003 f837 	bl	d88a4 <_ZN9TCPClient4stopEv>
   d5836:	e000      	b.n	d583a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
    }
    return false;
   d5838:	2500      	movs	r5, #0
}
   d583a:	4628      	mov	r0, r5
   d583c:	b007      	add	sp, #28
   d583e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5842:	bf00      	nop
   d5844:	000d9c76 	.word	0x000d9c76
   d5848:	000d9c7d 	.word	0x000d9c7d

000d584c <_ZN4MQTT7connectEPKc>:
void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}


bool MQTT::connect(const char *id) {
   d584c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   d584e:	2304      	movs	r3, #4
   d5850:	9305      	str	r3, [sp, #20]
   d5852:	2301      	movs	r3, #1
   d5854:	9304      	str	r3, [sp, #16]
   d5856:	2300      	movs	r3, #0
   d5858:	9303      	str	r3, [sp, #12]
   d585a:	9302      	str	r3, [sp, #8]
   d585c:	9301      	str	r3, [sp, #4]
   d585e:	9300      	str	r3, [sp, #0]
   d5860:	461a      	mov	r2, r3
   d5862:	f7ff ff1d 	bl	d56a0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   d5866:	b007      	add	sp, #28
   d5868:	f85d fb04 	ldr.w	pc, [sp], #4

000d586c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d586c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5870:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   d5872:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d5876:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d587a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
   d587e:	4604      	mov	r4, r0
   d5880:	468b      	mov	fp, r1
   d5882:	4691      	mov	r9, r2
   d5884:	469a      	mov	sl, r3
    if (isConnected()) {
   d5886:	f7ff fee9 	bl	d565c <_ZN4MQTT11isConnectedEv>
   d588a:	2800      	cmp	r0, #0
   d588c:	d04c      	beq.n	d5928 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xbc>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, this->maxpacketsize);
   d588e:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   d5892:	69e0      	ldr	r0, [r4, #28]
   d5894:	2100      	movs	r1, #0
   d5896:	f004 f82f 	bl	d98f8 <memset>

        length = writeString(topic, buffer, length);
   d589a:	2305      	movs	r3, #5
   d589c:	69e2      	ldr	r2, [r4, #28]
   d589e:	4659      	mov	r1, fp
   d58a0:	4620      	mov	r0, r4
   d58a2:	f7ff fec1 	bl	d5628 <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
   d58a6:	1e6b      	subs	r3, r5, #1
   d58a8:	2b01      	cmp	r3, #1
   d58aa:	d812      	bhi.n	d58d2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
            nextMsgId += 1;
   d58ac:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d58ae:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, this->maxpacketsize);

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
   d58b0:	3301      	adds	r3, #1
   d58b2:	b29b      	uxth	r3, r3
   d58b4:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d58b6:	121b      	asrs	r3, r3, #8
   d58b8:	5413      	strb	r3, [r2, r0]
   d58ba:	1c41      	adds	r1, r0, #1
   d58bc:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
   d58be:	69e3      	ldr	r3, [r4, #28]
   d58c0:	8c22      	ldrh	r2, [r4, #32]
   d58c2:	545a      	strb	r2, [r3, r1]
   d58c4:	3002      	adds	r0, #2
   d58c6:	b280      	uxth	r0, r0
            if (messageid != NULL)
   d58c8:	b11e      	cbz	r6, d58d2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
                *messageid = nextMsgId++;
   d58ca:	8c23      	ldrh	r3, [r4, #32]
   d58cc:	1c5a      	adds	r2, r3, #1
   d58ce:	8422      	strh	r2, [r4, #32]
   d58d0:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d58d2:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d58d4:	b291      	uxth	r1, r2
   d58d6:	1883      	adds	r3, r0, r2
   d58d8:	458a      	cmp	sl, r1
   d58da:	b29b      	uxth	r3, r3
   d58dc:	d90a      	bls.n	d58f4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
   d58de:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
   d58e2:	429e      	cmp	r6, r3
   d58e4:	f102 0201 	add.w	r2, r2, #1
   d58e8:	d904      	bls.n	d58f4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
            buffer[length++] = payload[i];
   d58ea:	f819 6001 	ldrb.w	r6, [r9, r1]
   d58ee:	69e1      	ldr	r1, [r4, #28]
   d58f0:	54ce      	strb	r6, [r1, r3]
   d58f2:	e7ef      	b.n	d58d4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x68>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
   d58f4:	f1b8 0f00 	cmp.w	r8, #0
   d58f8:	bf0c      	ite	eq
   d58fa:	2130      	moveq	r1, #48	; 0x30
   d58fc:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
   d58fe:	b10f      	cbz	r7, d5904 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x98>
            header |= DUP_FLAG_ON_MASK;
   d5900:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
   d5904:	2d02      	cmp	r5, #2
   d5906:	d102      	bne.n	d590e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa2>
            header |= MQTTQOS2_HEADER_MASK;
   d5908:	f041 0104 	orr.w	r1, r1, #4
   d590c:	e003      	b.n	d5916 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xaa>
        else if (qos == QOS1)
   d590e:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   d5910:	bf08      	it	eq
   d5912:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d5916:	3b05      	subs	r3, #5
   d5918:	69e2      	ldr	r2, [r4, #28]
   d591a:	b29b      	uxth	r3, r3
   d591c:	4620      	mov	r0, r4
    }
    return false;
}
   d591e:	b001      	add	sp, #4
   d5920:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d5924:	f7ff be39 	b.w	d559a <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d5928:	b001      	add	sp, #4
   d592a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d592e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   d592e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   d5930:	9c08      	ldr	r4, [sp, #32]
   d5932:	9403      	str	r4, [sp, #12]
   d5934:	2400      	movs	r4, #0
   d5936:	9402      	str	r4, [sp, #8]
   d5938:	f89d 401c 	ldrb.w	r4, [sp, #28]
   d593c:	9401      	str	r4, [sp, #4]
   d593e:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d5942:	9400      	str	r4, [sp, #0]
   d5944:	f7ff ff92 	bl	d586c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   d5948:	b004      	add	sp, #16
   d594a:	bd10      	pop	{r4, pc}

000d594c <_ZN4MQTT7publishEPKcPKhj>:

bool MQTT::publish(const char * topic, const char* payload, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, (uint8_t*)payload, strlen(payload), false, qos, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength) {
   d594c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, false, QOS0, NULL);
   d594e:	2400      	movs	r4, #0
   d5950:	9402      	str	r4, [sp, #8]
   d5952:	9401      	str	r4, [sp, #4]
   d5954:	9400      	str	r4, [sp, #0]
   d5956:	f7ff ffea 	bl	d592e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   d595a:	b004      	add	sp, #16
   d595c:	bd10      	pop	{r4, pc}

000d595e <_ZN4MQTT14publishReleaseEt>:
        return write(header, buffer, length-5);
    }
    return false;
}

bool MQTT::publishRelease(uint16_t messageid) {
   d595e:	b538      	push	{r3, r4, r5, lr}
   d5960:	4604      	mov	r4, r0
   d5962:	460d      	mov	r5, r1
    if (isConnected()) {
   d5964:	f7ff fe7a 	bl	d565c <_ZN4MQTT11isConnectedEv>
   d5968:	b190      	cbz	r0, d5990 <_ZN4MQTT14publishReleaseEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   d596a:	69e3      	ldr	r3, [r4, #28]
   d596c:	2262      	movs	r2, #98	; 0x62
   d596e:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d5970:	69e3      	ldr	r3, [r4, #28]
   d5972:	2202      	movs	r2, #2
   d5974:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d5976:	69e3      	ldr	r3, [r4, #28]
   d5978:	122a      	asrs	r2, r5, #8
   d597a:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d597c:	69e3      	ldr	r3, [r4, #28]
   d597e:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
   d5980:	2204      	movs	r2, #4
   d5982:	69e1      	ldr	r1, [r4, #28]
   d5984:	4620      	mov	r0, r4
   d5986:	f002 fda4 	bl	d84d2 <_ZN9TCPClient5writeEPKhj>
   d598a:	3000      	adds	r0, #0
   d598c:	bf18      	it	ne
   d598e:	2001      	movne	r0, #1
    }
    return false;
}
   d5990:	bd38      	pop	{r3, r4, r5, pc}

000d5992 <_ZN4MQTT15publishCompleteEt>:

bool MQTT::publishComplete(uint16_t messageid) {
   d5992:	b538      	push	{r3, r4, r5, lr}
   d5994:	4604      	mov	r4, r0
   d5996:	460d      	mov	r5, r1
    if (isConnected()) {
   d5998:	f7ff fe60 	bl	d565c <_ZN4MQTT11isConnectedEv>
   d599c:	b190      	cbz	r0, d59c4 <_ZN4MQTT15publishCompleteEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   d599e:	69e3      	ldr	r3, [r4, #28]
   d59a0:	2272      	movs	r2, #114	; 0x72
   d59a2:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d59a4:	69e3      	ldr	r3, [r4, #28]
   d59a6:	2202      	movs	r2, #2
   d59a8:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d59aa:	69e3      	ldr	r3, [r4, #28]
   d59ac:	122a      	asrs	r2, r5, #8
   d59ae:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d59b0:	69e3      	ldr	r3, [r4, #28]
   d59b2:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
   d59b4:	2204      	movs	r2, #4
   d59b6:	69e1      	ldr	r1, [r4, #28]
   d59b8:	4620      	mov	r0, r4
   d59ba:	f002 fd8a 	bl	d84d2 <_ZN9TCPClient5writeEPKhj>
   d59be:	3000      	adds	r0, #0
   d59c0:	bf18      	it	ne
   d59c2:	2001      	movne	r0, #1
    }
    return false;
}
   d59c4:	bd38      	pop	{r3, r4, r5, pc}

000d59c6 <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
   d59c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d59ca:	b083      	sub	sp, #12
   d59cc:	af00      	add	r7, sp, #0
   d59ce:	4604      	mov	r4, r0
    if (isConnected()) {
   d59d0:	f7ff fe44 	bl	d565c <_ZN4MQTT11isConnectedEv>
   d59d4:	4681      	mov	r9, r0
   d59d6:	2800      	cmp	r0, #0
   d59d8:	f000 80f6 	beq.w	d5bc8 <_ZN4MQTT4loopEv+0x202>
   d59dc:	f001 fac8 	bl	d6f70 <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   d59e0:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d59e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d59e6:	4353      	muls	r3, r2
   d59e8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   d59ea:	1a82      	subs	r2, r0, r2
   d59ec:	429a      	cmp	r2, r3
   d59ee:	4605      	mov	r5, r0
   d59f0:	d803      	bhi.n	d59fa <_ZN4MQTT4loopEv+0x34>
   d59f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d59f4:	1a82      	subs	r2, r0, r2
   d59f6:	4293      	cmp	r3, r2
   d59f8:	d217      	bcs.n	d5a2a <_ZN4MQTT4loopEv+0x64>
            if (pingOutstanding) {
   d59fa:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d59fe:	b12b      	cbz	r3, d5a0c <_ZN4MQTT4loopEv+0x46>
                _client.stop();
   d5a00:	4620      	mov	r0, r4
   d5a02:	f002 ff4f 	bl	d88a4 <_ZN9TCPClient4stopEv>
                return false;
   d5a06:	f04f 0900 	mov.w	r9, #0
   d5a0a:	e0dd      	b.n	d5bc8 <_ZN4MQTT4loopEv+0x202>
            } else {
                buffer[0] = MQTTPINGREQ;
   d5a0c:	69e2      	ldr	r2, [r4, #28]
   d5a0e:	21c0      	movs	r1, #192	; 0xc0
   d5a10:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   d5a12:	69e2      	ldr	r2, [r4, #28]
   d5a14:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   d5a16:	69e1      	ldr	r1, [r4, #28]
   d5a18:	2202      	movs	r2, #2
   d5a1a:	4620      	mov	r0, r4
   d5a1c:	f002 fd59 	bl	d84d2 <_ZN9TCPClient5writeEPKhj>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
   d5a20:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                _client.write(buffer,2);
                lastOutActivity = t;
   d5a22:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
   d5a24:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
   d5a26:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (_client.available()) {
   d5a2a:	4620      	mov	r0, r4
   d5a2c:	f002 ff52 	bl	d88d4 <_ZN9TCPClient9availableEv>
   d5a30:	2800      	cmp	r0, #0
   d5a32:	f000 80c9 	beq.w	d5bc8 <_ZN4MQTT4loopEv+0x202>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d5a36:	1df9      	adds	r1, r7, #7
   d5a38:	4620      	mov	r0, r4
   d5a3a:	f7ff fd55 	bl	d54e8 <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
   d5a3e:	4602      	mov	r2, r0
   d5a40:	2800      	cmp	r0, #0
   d5a42:	f000 80c1 	beq.w	d5bc8 <_ZN4MQTT4loopEv+0x202>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
   d5a46:	69e3      	ldr	r3, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
   d5a48:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   d5a4a:	7818      	ldrb	r0, [r3, #0]
   d5a4c:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   d5a50:	2930      	cmp	r1, #48	; 0x30
   d5a52:	d17d      	bne.n	d5b50 <_ZN4MQTT4loopEv+0x18a>
                    if (callback) {
   d5a54:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
   d5a58:	f1bb 0f00 	cmp.w	fp, #0
   d5a5c:	f000 80b4 	beq.w	d5bc8 <_ZN4MQTT4loopEv+0x202>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d5a60:	f897 c007 	ldrb.w	ip, [r7, #7]
   d5a64:	eb03 000c 	add.w	r0, r3, ip
              							_client.write(buffer, 4);
              							lastOutActivity = t;
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
   d5a68:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d5a6a:	7881      	ldrb	r1, [r0, #2]
   d5a6c:	f890 e001 	ldrb.w	lr, [r0, #1]
   d5a70:	eb01 2e0e 	add.w	lr, r1, lr, lsl #8
   d5a74:	fa1f fe8e 	uxth.w	lr, lr
                        char topic[tl+1];
   d5a78:	f10e 0108 	add.w	r1, lr, #8
   d5a7c:	f021 0107 	bic.w	r1, r1, #7
   d5a80:	ebad 0d01 	sub.w	sp, sp, r1
   d5a84:	4668      	mov	r0, sp
   d5a86:	2100      	movs	r1, #0
                        for (uint16_t i=0;i<tl;i++) {
   d5a88:	b28e      	uxth	r6, r1
   d5a8a:	45b6      	cmp	lr, r6
   d5a8c:	d906      	bls.n	d5a9c <_ZN4MQTT4loopEv+0xd6>
                            topic[i] = buffer[llen+3+i];
   d5a8e:	eb0c 0601 	add.w	r6, ip, r1
   d5a92:	441e      	add	r6, r3
   d5a94:	78f6      	ldrb	r6, [r6, #3]
   d5a96:	5446      	strb	r6, [r0, r1]
   d5a98:	3101      	adds	r1, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
   d5a9a:	e7f5      	b.n	d5a88 <_ZN4MQTT4loopEv+0xc2>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
   d5a9c:	2100      	movs	r1, #0
   d5a9e:	f800 100e 	strb.w	r1, [r0, lr]
   d5aa2:	781e      	ldrb	r6, [r3, #0]
   d5aa4:	f006 0606 	and.w	r6, r6, #6
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d5aa8:	2e02      	cmp	r6, #2
   d5aaa:	f10c 0103 	add.w	r1, ip, #3
   d5aae:	ebcc 0202 	rsb	r2, ip, r2
   d5ab2:	d11e      	bne.n	d5af2 <_ZN4MQTT4loopEv+0x12c>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5ab4:	4471      	add	r1, lr
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d5ab6:	ebce 0202 	rsb	r2, lr, r2
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5aba:	f813 8001 	ldrb.w	r8, [r3, r1]
   d5abe:	4419      	add	r1, r3
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d5ac0:	3a05      	subs	r2, #5
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5ac2:	7849      	ldrb	r1, [r1, #1]
   d5ac4:	eb01 2808 	add.w	r8, r1, r8, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d5ac8:	f10c 0105 	add.w	r1, ip, #5
   d5acc:	4471      	add	r1, lr
   d5ace:	4419      	add	r1, r3
   d5ad0:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   d5ad2:	69e3      	ldr	r3, [r4, #28]
   d5ad4:	2240      	movs	r2, #64	; 0x40
   d5ad6:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   d5ad8:	69e3      	ldr	r3, [r4, #28]
   d5ada:	705e      	strb	r6, [r3, #1]
                            buffer[2] = (msgId >> 8);
   d5adc:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5ade:	fa1f f888 	uxth.w	r8, r8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
   d5ae2:	ea4f 2228 	mov.w	r2, r8, asr #8
   d5ae6:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   d5ae8:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
   d5aea:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
   d5aec:	f883 8003 	strb.w	r8, [r3, #3]
   d5af0:	e020      	b.n	d5b34 <_ZN4MQTT4loopEv+0x16e>
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   d5af2:	2e04      	cmp	r6, #4
   d5af4:	d124      	bne.n	d5b40 <_ZN4MQTT4loopEv+0x17a>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d5af6:	4471      	add	r1, lr
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d5af8:	ebce 0202 	rsb	r2, lr, r2
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d5afc:	f813 8001 	ldrb.w	r8, [r3, r1]
   d5b00:	4419      	add	r1, r3
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d5b02:	3a05      	subs	r2, #5
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d5b04:	7849      	ldrb	r1, [r1, #1]
   d5b06:	eb01 2808 	add.w	r8, r1, r8, lsl #8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d5b0a:	f10c 0105 	add.w	r1, ip, #5
   d5b0e:	4471      	add	r1, lr
   d5b10:	4419      	add	r1, r3
   d5b12:	47d8      	blx	fp

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
   d5b14:	69e3      	ldr	r3, [r4, #28]
   d5b16:	2250      	movs	r2, #80	; 0x50
   d5b18:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
   d5b1a:	69e3      	ldr	r3, [r4, #28]
   d5b1c:	2202      	movs	r2, #2
   d5b1e:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
   d5b20:	69e3      	ldr	r3, [r4, #28]
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d5b22:	fa1f f888 	uxth.w	r8, r8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
   d5b26:	ea4f 2228 	mov.w	r2, r8, asr #8
   d5b2a:	709a      	strb	r2, [r3, #2]
              							buffer[3] = (msgId & 0xFF);
   d5b2c:	69e3      	ldr	r3, [r4, #28]
              							_client.write(buffer, 4);
   d5b2e:	4632      	mov	r2, r6
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
              							buffer[3] = (msgId & 0xFF);
   d5b30:	f883 8003 	strb.w	r8, [r3, #3]
              							_client.write(buffer, 4);
   d5b34:	69e1      	ldr	r1, [r4, #28]
   d5b36:	4620      	mov	r0, r4
   d5b38:	f002 fccb 	bl	d84d2 <_ZN9TCPClient5writeEPKhj>
              							lastOutActivity = t;
   d5b3c:	6265      	str	r5, [r4, #36]	; 0x24
   d5b3e:	e005      	b.n	d5b4c <_ZN4MQTT4loopEv+0x186>
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
   d5b40:	3a03      	subs	r2, #3
   d5b42:	4471      	add	r1, lr
   d5b44:	ebce 0202 	rsb	r2, lr, r2
   d5b48:	4419      	add	r1, r3
   d5b4a:	47d8      	blx	fp
   d5b4c:	46d5      	mov	sp, sl
   d5b4e:	e03b      	b.n	d5bc8 <_ZN4MQTT4loopEv+0x202>
                        }
                    }
                } else if (type == MQTTPUBREC) {
   d5b50:	2950      	cmp	r1, #80	; 0x50
   d5b52:	d108      	bne.n	d5b66 <_ZN4MQTT4loopEv+0x1a0>
                    // check for the situation that QoS2 receive PUBREC, should return PUBREL
                    msgId = (buffer[2] << 8) + buffer[3];
                    this->publishRelease(msgId);
   d5b54:	7899      	ldrb	r1, [r3, #2]
   d5b56:	78db      	ldrb	r3, [r3, #3]
   d5b58:	eb03 2101 	add.w	r1, r3, r1, lsl #8
   d5b5c:	b289      	uxth	r1, r1
   d5b5e:	4620      	mov	r0, r4
   d5b60:	f7ff fefd 	bl	d595e <_ZN4MQTT14publishReleaseEt>
   d5b64:	e030      	b.n	d5bc8 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBACK) {
   d5b66:	2940      	cmp	r1, #64	; 0x40
   d5b68:	d00c      	beq.n	d5b84 <_ZN4MQTT4loopEv+0x1be>
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
                        }
                    }
                } else if (type == MQTTPUBREL) {
   d5b6a:	2960      	cmp	r1, #96	; 0x60
   d5b6c:	d108      	bne.n	d5b80 <_ZN4MQTT4loopEv+0x1ba>
                  msgId = (buffer[2] << 8) + buffer[3];
                  this->publishComplete(msgId);
   d5b6e:	7899      	ldrb	r1, [r3, #2]
   d5b70:	78db      	ldrb	r3, [r3, #3]
   d5b72:	eb03 2101 	add.w	r1, r3, r1, lsl #8
   d5b76:	b289      	uxth	r1, r1
   d5b78:	4620      	mov	r0, r4
   d5b7a:	f7ff ff0a 	bl	d5992 <_ZN4MQTT15publishCompleteEt>
   d5b7e:	e023      	b.n	d5bc8 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBCOMP) {
   d5b80:	2970      	cmp	r1, #112	; 0x70
   d5b82:	d10d      	bne.n	d5ba0 <_ZN4MQTT4loopEv+0x1da>
                  if (qoscallback) {
   d5b84:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d5b86:	b1f9      	cbz	r1, d5bc8 <_ZN4MQTT4loopEv+0x202>
                      // msgId only present for QOS==0
                      if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   d5b88:	2a04      	cmp	r2, #4
   d5b8a:	d11d      	bne.n	d5bc8 <_ZN4MQTT4loopEv+0x202>
   d5b8c:	f010 0f06 	tst.w	r0, #6
   d5b90:	d11a      	bne.n	d5bc8 <_ZN4MQTT4loopEv+0x202>
                          msgId = (buffer[2]<<8)+buffer[3];
                          this->qoscallback(msgId);
   d5b92:	7898      	ldrb	r0, [r3, #2]
   d5b94:	78db      	ldrb	r3, [r3, #3]
   d5b96:	eb03 2000 	add.w	r0, r3, r0, lsl #8
   d5b9a:	b280      	uxth	r0, r0
   d5b9c:	4788      	blx	r1
   d5b9e:	e013      	b.n	d5bc8 <_ZN4MQTT4loopEv+0x202>
                      }
                  }
                } else if (type == MQTTSUBACK) {
   d5ba0:	2990      	cmp	r1, #144	; 0x90
   d5ba2:	d011      	beq.n	d5bc8 <_ZN4MQTT4loopEv+0x202>
                    // if something...
                } else if (type == MQTTPINGREQ) {
   d5ba4:	29c0      	cmp	r1, #192	; 0xc0
   d5ba6:	d10a      	bne.n	d5bbe <_ZN4MQTT4loopEv+0x1f8>
                    buffer[0] = MQTTPINGRESP;
   d5ba8:	22d0      	movs	r2, #208	; 0xd0
   d5baa:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   d5bac:	69e3      	ldr	r3, [r4, #28]
   d5bae:	2200      	movs	r2, #0
   d5bb0:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   d5bb2:	69e1      	ldr	r1, [r4, #28]
   d5bb4:	2202      	movs	r2, #2
   d5bb6:	4620      	mov	r0, r4
   d5bb8:	f002 fc8b 	bl	d84d2 <_ZN9TCPClient5writeEPKhj>
   d5bbc:	e004      	b.n	d5bc8 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPINGRESP) {
   d5bbe:	29d0      	cmp	r1, #208	; 0xd0
                    pingOutstanding = false;
   d5bc0:	bf04      	itt	eq
   d5bc2:	2300      	moveq	r3, #0
   d5bc4:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
            }
        }
        return true;
    }
    return false;
}
   d5bc8:	4648      	mov	r0, r9
   d5bca:	370c      	adds	r7, #12
   d5bcc:	46bd      	mov	sp, r7
   d5bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5bd2 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
}

bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   d5bd2:	b570      	push	{r4, r5, r6, lr}
   d5bd4:	4604      	mov	r4, r0
   d5bd6:	460e      	mov	r6, r1
   d5bd8:	4615      	mov	r5, r2

    if (isConnected()) {
   d5bda:	f7ff fd3f 	bl	d565c <_ZN4MQTT11isConnectedEv>
   d5bde:	b1e8      	cbz	r0, d5c1c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4a>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
   d5be0:	8c23      	ldrh	r3, [r4, #32]
   d5be2:	3301      	adds	r3, #1
   d5be4:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   d5be6:	b903      	cbnz	r3, d5bea <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x18>
            nextMsgId = 1;
   d5be8:	2301      	movs	r3, #1
   d5bea:	8423      	strh	r3, [r4, #32]
        }
        buffer[length++] = (nextMsgId >> 8);
   d5bec:	8c23      	ldrh	r3, [r4, #32]
   d5bee:	69e2      	ldr	r2, [r4, #28]
   d5bf0:	121b      	asrs	r3, r3, #8
   d5bf2:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   d5bf4:	69e3      	ldr	r3, [r4, #28]
   d5bf6:	8c22      	ldrh	r2, [r4, #32]
   d5bf8:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   d5bfa:	69e2      	ldr	r2, [r4, #28]
   d5bfc:	4631      	mov	r1, r6
   d5bfe:	2307      	movs	r3, #7
   d5c00:	4620      	mov	r0, r4
   d5c02:	f7ff fd11 	bl	d5628 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   d5c06:	69e3      	ldr	r3, [r4, #28]
   d5c08:	541d      	strb	r5, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d5c0a:	1f03      	subs	r3, r0, #4
   d5c0c:	69e2      	ldr	r2, [r4, #28]
   d5c0e:	4620      	mov	r0, r4
   d5c10:	b29b      	uxth	r3, r3
   d5c12:	2182      	movs	r1, #130	; 0x82
    }
    return false;
}
   d5c14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d5c18:	f7ff bcbf 	b.w	d559a <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d5c1c:	bd70      	pop	{r4, r5, r6, pc}

000d5c1e <_ZN4MQTT9subscribeEPKc>:
    lastOutActivity = millis();
    return (rc == 1+llen+length);
}

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
   d5c1e:	2200      	movs	r2, #0
   d5c20:	f7ff bfd7 	b.w	d5bd2 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000d5c24 <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
   d5c24:	b510      	push	{r4, lr}
   d5c26:	4604      	mov	r4, r0
    if (isConnected()) {
   d5c28:	f7ff fd18 	bl	d565c <_ZN4MQTT11isConnectedEv>
   d5c2c:	b110      	cbz	r0, d5c34 <_ZN4MQTTD1Ev+0x10>
        disconnect();
   d5c2e:	4620      	mov	r0, r4
   d5c30:	f7ff fce6 	bl	d5600 <_ZN4MQTT10disconnectEv>
    }

    if (buffer != NULL)
   d5c34:	69e0      	ldr	r0, [r4, #28]
   d5c36:	b108      	cbz	r0, d5c3c <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
   d5c38:	f7fe fa33 	bl	d40a2 <_ZdaPv>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
   d5c3c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d5c40:	f001 fdd0 	bl	d77e4 <_ZN6StringD1Ev>
   d5c44:	4620      	mov	r0, r4
   d5c46:	f7ff fbdb 	bl	d5400 <_ZN9TCPClientD1Ev>
        disconnect();
    }

    if (buffer != NULL)
      delete[] buffer;
}
   d5c4a:	4620      	mov	r0, r4
   d5c4c:	bd10      	pop	{r4, pc}

000d5c4e <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
   d5c4e:	f001 b8c7 	b.w	d6de0 <HAL_Pin_Map>

000d5c52 <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d5c52:	f001 b8c5 	b.w	d6de0 <HAL_Pin_Map>

000d5c56 <_GLOBAL__sub_I__ZN7istream3getEv>:
   d5c56:	f001 b8c3 	b.w	d6de0 <HAL_Pin_Map>

000d5c5a <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d5c5a:	b510      	push	{r4, lr}
   d5c5c:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5c5e:	3024      	adds	r0, #36	; 0x24
   d5c60:	f000 fa50 	bl	d6104 <_ZN8FatCache4syncEv>
   d5c64:	b128      	cbz	r0, d5c72 <_ZN9FatVolume9cacheSyncEv+0x18>
   d5c66:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d5c6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5c6e:	f000 ba49 	b.w	d6104 <_ZN8FatCache4syncEv>
  }
   d5c72:	bd10      	pop	{r4, pc}

000d5c74 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d5c74:	f001 b8b4 	b.w	d6de0 <HAL_Pin_Map>

000d5c78 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d5c78:	f001 b8b2 	b.w	d6de0 <HAL_Pin_Map>

000d5c7c <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d5c7c:	f001 b8b0 	b.w	d6de0 <HAL_Pin_Map>

000d5c80 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d5c80:	f001 b8ae 	b.w	d6de0 <HAL_Pin_Map>

000d5c84 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5c84:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5c86:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5c88:	f043 0304 	orr.w	r3, r3, #4
   d5c8c:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5c8e:	f100 0210 	add.w	r2, r0, #16
   d5c92:	6880      	ldr	r0, [r0, #8]
   d5c94:	f000 baec 	b.w	d6270 <_ZN9FatVolume15allocateClusterEmPm>

000d5c98 <_ZN7FatFile13cacheDirEntryEh>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d5c98:	b510      	push	{r4, lr}
   d5c9a:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5c9c:	6880      	ldr	r0, [r0, #8]
   d5c9e:	460a      	mov	r2, r1
   d5ca0:	3024      	adds	r0, #36	; 0x24
   d5ca2:	69a1      	ldr	r1, [r4, #24]
   d5ca4:	f000 fa55 	bl	d6152 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d5ca8:	b120      	cbz	r0, d5cb4 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d5caa:	88a3      	ldrh	r3, [r4, #4]
   d5cac:	f003 030f 	and.w	r3, r3, #15
   d5cb0:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d5cb4:	bd10      	pop	{r4, pc}

000d5cb6 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d5cb6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5cba:	7803      	ldrb	r3, [r0, #0]
   d5cbc:	4604      	mov	r4, r0
   d5cbe:	4689      	mov	r9, r1
   d5cc0:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d5cc2:	b14b      	cbz	r3, d5cd8 <_ZN7FatFile4readEPvj+0x22>
   d5cc4:	7882      	ldrb	r2, [r0, #2]
   d5cc6:	07d1      	lsls	r1, r2, #31
   d5cc8:	d506      	bpl.n	d5cd8 <_ZN7FatFile4readEPvj+0x22>
   d5cca:	e00c      	b.n	d5ce6 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5ccc:	465a      	mov	r2, fp
   d5cce:	6921      	ldr	r1, [r4, #16]
   d5cd0:	f000 fa69 	bl	d61a6 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d5cd4:	2800      	cmp	r0, #0
   d5cd6:	da3d      	bge.n	d5d54 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d5cd8:	7863      	ldrb	r3, [r4, #1]
   d5cda:	f043 0302 	orr.w	r3, r3, #2
   d5cde:	7063      	strb	r3, [r4, #1]
  return -1;
   d5ce0:	f04f 30ff 	mov.w	r0, #4294967295
   d5ce4:	e097      	b.n	d5e16 <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d5ce6:	071a      	lsls	r2, r3, #28
   d5ce8:	d503      	bpl.n	d5cf2 <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d5cea:	69e3      	ldr	r3, [r4, #28]
   d5cec:	6962      	ldr	r2, [r4, #20]
   d5cee:	1a9b      	subs	r3, r3, r2
   d5cf0:	e007      	b.n	d5d02 <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d5cf2:	069a      	lsls	r2, r3, #26
   d5cf4:	d508      	bpl.n	d5d08 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d5cf6:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d5cf8:	891a      	ldrh	r2, [r3, #8]
   d5cfa:	6963      	ldr	r3, [r4, #20]
   d5cfc:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d5d00:	b29b      	uxth	r3, r3
   d5d02:	429d      	cmp	r5, r3
   d5d04:	bf28      	it	cs
   d5d06:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d5d08:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d5d0a:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5d0e:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d5d12:	2e00      	cmp	r6, #0
   d5d14:	d035      	beq.n	d5d82 <_ZN7FatFile4readEPvj+0xcc>
   d5d16:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d5d18:	6963      	ldr	r3, [r4, #20]
   d5d1a:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d5d1c:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d5d20:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d5d24:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d5d28:	d002      	beq.n	d5d30 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d5d2a:	6a03      	ldr	r3, [r0, #32]
   d5d2c:	4419      	add	r1, r3
   d5d2e:	e01d      	b.n	d5d6c <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5d30:	f890 8005 	ldrb.w	r8, [r0, #5]
   d5d34:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d5d38:	f1ba 0f00 	cmp.w	sl, #0
   d5d3c:	d110      	bne.n	d5d60 <_ZN7FatFile4readEPvj+0xaa>
   d5d3e:	f1b8 0f00 	cmp.w	r8, #0
   d5d42:	d10d      	bne.n	d5d60 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d5d44:	2b00      	cmp	r3, #0
   d5d46:	d1c1      	bne.n	d5ccc <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5d48:	0653      	lsls	r3, r2, #25
   d5d4a:	bf4c      	ite	mi
   d5d4c:	6a03      	ldrmi	r3, [r0, #32]
   d5d4e:	6a23      	ldrpl	r3, [r4, #32]
   d5d50:	6123      	str	r3, [r4, #16]
   d5d52:	e005      	b.n	d5d60 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d5d54:	d104      	bne.n	d5d60 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d5d56:	7823      	ldrb	r3, [r4, #0]
   d5d58:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5d5c:	d111      	bne.n	d5d82 <_ZN7FatFile4readEPvj+0xcc>
   d5d5e:	e7bb      	b.n	d5cd8 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5d60:	6921      	ldr	r1, [r4, #16]
   d5d62:	68a0      	ldr	r0, [r4, #8]
   d5d64:	f000 fa19 	bl	d619a <_ZNK9FatVolume17clusterFirstBlockEm>
   d5d68:	eb08 0100 	add.w	r1, r8, r0
   d5d6c:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d5d6e:	f1ba 0f00 	cmp.w	sl, #0
   d5d72:	d135      	bne.n	d5de0 <_ZN7FatFile4readEPvj+0x12a>
   d5d74:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5d78:	d332      	bcc.n	d5de0 <_ZN7FatFile4readEPvj+0x12a>
   d5d7a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5d7c:	4299      	cmp	r1, r3
   d5d7e:	d102      	bne.n	d5d86 <_ZN7FatFile4readEPvj+0xd0>
   d5d80:	e02e      	b.n	d5de0 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d5d82:	1ba8      	subs	r0, r5, r6
   d5d84:	e047      	b.n	d5e16 <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d5d86:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5d8a:	d31b      	bcc.n	d5dc4 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d5d8c:	7822      	ldrb	r2, [r4, #0]
   d5d8e:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d5d90:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d5d94:	d406      	bmi.n	d5da4 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d5d96:	7902      	ldrb	r2, [r0, #4]
   d5d98:	ebc8 0202 	rsb	r2, r8, r2
   d5d9c:	b2d2      	uxtb	r2, r2
   d5d9e:	4592      	cmp	sl, r2
   d5da0:	bf28      	it	cs
   d5da2:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5da4:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d5da6:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5daa:	d207      	bcs.n	d5dbc <_ZN7FatFile4readEPvj+0x106>
   d5dac:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d5dae:	4653      	mov	r3, sl
   d5db0:	464a      	mov	r2, r9
   d5db2:	6800      	ldr	r0, [r0, #0]
   d5db4:	f000 fba7 	bl	d6506 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d5db8:	b960      	cbnz	r0, d5dd4 <_ZN7FatFile4readEPvj+0x11e>
   d5dba:	e78d      	b.n	d5cd8 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5dbc:	4453      	add	r3, sl
   d5dbe:	4299      	cmp	r1, r3
   d5dc0:	d321      	bcc.n	d5e06 <_ZN7FatFile4readEPvj+0x150>
   d5dc2:	e7f3      	b.n	d5dac <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d5dc4:	464a      	mov	r2, r9
   d5dc6:	6800      	ldr	r0, [r0, #0]
   d5dc8:	f000 fb55 	bl	d6476 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d5dcc:	2800      	cmp	r0, #0
   d5dce:	d083      	beq.n	d5cd8 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d5dd0:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d5dd4:	6963      	ldr	r3, [r4, #20]
   d5dd6:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d5dd8:	44b9      	add	r9, r7
    m_curPosition += n;
   d5dda:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d5ddc:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d5dde:	e798      	b.n	d5d12 <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5de0:	2200      	movs	r2, #0
   d5de2:	3024      	adds	r0, #36	; 0x24
   d5de4:	f000 f9b5 	bl	d6152 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d5de8:	2800      	cmp	r0, #0
   d5dea:	f43f af75 	beq.w	d5cd8 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d5dee:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d5df2:	42b7      	cmp	r7, r6
   d5df4:	bf28      	it	cs
   d5df6:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d5df8:	eb00 010a 	add.w	r1, r0, sl
   d5dfc:	463a      	mov	r2, r7
   d5dfe:	4648      	mov	r0, r9
   d5e00:	f003 fd6f 	bl	d98e2 <memcpy>
   d5e04:	e7e6      	b.n	d5dd4 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5e06:	3024      	adds	r0, #36	; 0x24
   d5e08:	9101      	str	r1, [sp, #4]
   d5e0a:	f000 f97b 	bl	d6104 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d5e0e:	9901      	ldr	r1, [sp, #4]
   d5e10:	2800      	cmp	r0, #0
   d5e12:	d1cb      	bne.n	d5dac <_ZN7FatFile4readEPvj+0xf6>
   d5e14:	e760      	b.n	d5cd8 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d5e16:	b003      	add	sp, #12
   d5e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5e1c <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d5e1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d5e1e:	2201      	movs	r2, #1
   d5e20:	f10d 0107 	add.w	r1, sp, #7
   d5e24:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d5e26:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d5e28:	6905      	ldr	r5, [r0, #16]
   d5e2a:	f7ff ff44 	bl	d5cb6 <_ZN7FatFile4readEPvj>
   d5e2e:	2801      	cmp	r0, #1
   d5e30:	bf05      	ittet	eq
   d5e32:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d5e36:	6166      	streq	r6, [r4, #20]
   d5e38:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = pos->cluster;
   d5e3c:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d5e3e:	b002      	add	sp, #8
   d5e40:	bd70      	pop	{r4, r5, r6, pc}

000d5e42 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5e46:	460e      	mov	r6, r1
   d5e48:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d5e4a:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5e4c:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d5e4e:	2900      	cmp	r1, #0
   d5e50:	d039      	beq.n	d5ec6 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d5e52:	6945      	ldr	r5, [r0, #20]
   d5e54:	42b5      	cmp	r5, r6
   d5e56:	d03a      	beq.n	d5ece <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d5e58:	b90e      	cbnz	r6, d5e5e <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d5e5a:	6106      	str	r6, [r0, #16]
    goto done;
   d5e5c:	e031      	b.n	d5ec2 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d5e5e:	070b      	lsls	r3, r1, #28
   d5e60:	d503      	bpl.n	d5e6a <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d5e62:	69c3      	ldr	r3, [r0, #28]
   d5e64:	429e      	cmp	r6, r3
   d5e66:	d82e      	bhi.n	d5ec6 <_ZN7FatFile7seekSetEm+0x84>
   d5e68:	e007      	b.n	d5e7a <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d5e6a:	0688      	lsls	r0, r1, #26
   d5e6c:	d505      	bpl.n	d5e7a <_ZN7FatFile7seekSetEm+0x38>
   d5e6e:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d5e70:	891b      	ldrh	r3, [r3, #8]
   d5e72:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d5e76:	d826      	bhi.n	d5ec6 <_ZN7FatFile7seekSetEm+0x84>
   d5e78:	e023      	b.n	d5ec2 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5e7a:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d5e7e:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d5e82:	1e6a      	subs	r2, r5, #1
   d5e84:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5e88:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5e8a:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5e8c:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d5e8e:	429a      	cmp	r2, r3
   d5e90:	d800      	bhi.n	d5e94 <_ZN7FatFile7seekSetEm+0x52>
   d5e92:	b94d      	cbnz	r5, d5ea8 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5e94:	064a      	lsls	r2, r1, #25
   d5e96:	bf4c      	ite	mi
   d5e98:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d5e9c:	6a22      	ldrpl	r2, [r4, #32]
   d5e9e:	6122      	str	r2, [r4, #16]
   d5ea0:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5ea2:	f104 0810 	add.w	r8, r4, #16
   d5ea6:	e00a      	b.n	d5ebe <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d5ea8:	1a9b      	subs	r3, r3, r2
   d5eaa:	e7f9      	b.n	d5ea0 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5eac:	4642      	mov	r2, r8
   d5eae:	6921      	ldr	r1, [r4, #16]
   d5eb0:	68a0      	ldr	r0, [r4, #8]
   d5eb2:	f000 f978 	bl	d61a6 <_ZN9FatVolume6fatGetEmPm>
   d5eb6:	2800      	cmp	r0, #0
   d5eb8:	f105 35ff 	add.w	r5, r5, #4294967295
   d5ebc:	dd03      	ble.n	d5ec6 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d5ebe:	2d00      	cmp	r5, #0
   d5ec0:	d1f4      	bne.n	d5eac <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d5ec2:	6166      	str	r6, [r4, #20]
   d5ec4:	e003      	b.n	d5ece <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d5ec6:	6127      	str	r7, [r4, #16]
  return false;
   d5ec8:	2000      	movs	r0, #0
   d5eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d5ece:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d5ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5ed4 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5ed4:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d5ed6:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5ed8:	4604      	mov	r4, r0
  if (!isOpen()) {
   d5eda:	b90b      	cbnz	r3, d5ee0 <_ZN7FatFile4syncEv+0xc>
    return true;
   d5edc:	2001      	movs	r0, #1
   d5ede:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d5ee0:	7883      	ldrb	r3, [r0, #2]
   d5ee2:	075a      	lsls	r2, r3, #29
   d5ee4:	d523      	bpl.n	d5f2e <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d5ee6:	2101      	movs	r1, #1
   d5ee8:	f7ff fed6 	bl	d5c98 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5eec:	4605      	mov	r5, r0
   d5eee:	b928      	cbnz	r0, d5efc <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d5ef0:	7863      	ldrb	r3, [r4, #1]
   d5ef2:	f043 0301 	orr.w	r3, r3, #1
   d5ef6:	7063      	strb	r3, [r4, #1]
  return false;
   d5ef8:	2000      	movs	r0, #0
   d5efa:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5efc:	7803      	ldrb	r3, [r0, #0]
   d5efe:	2be5      	cmp	r3, #229	; 0xe5
   d5f00:	d0f6      	beq.n	d5ef0 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d5f02:	7823      	ldrb	r3, [r4, #0]
   d5f04:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d5f06:	bf44      	itt	mi
   d5f08:	69e3      	ldrmi	r3, [r4, #28]
   d5f0a:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d5f0c:	8c23      	ldrh	r3, [r4, #32]
   d5f0e:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d5f10:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5f12:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d5f14:	4b09      	ldr	r3, [pc, #36]	; (d5f3c <_ZN7FatFile4syncEv+0x68>)
   d5f16:	681b      	ldr	r3, [r3, #0]
   d5f18:	b12b      	cbz	r3, d5f26 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d5f1a:	f100 0116 	add.w	r1, r0, #22
   d5f1e:	3018      	adds	r0, #24
   d5f20:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d5f22:	8b2b      	ldrh	r3, [r5, #24]
   d5f24:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d5f26:	78a3      	ldrb	r3, [r4, #2]
   d5f28:	f023 0304 	bic.w	r3, r3, #4
   d5f2c:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d5f2e:	68a0      	ldr	r0, [r4, #8]
   d5f30:	f7ff fe93 	bl	d5c5a <_ZN9FatVolume9cacheSyncEv>
   d5f34:	2800      	cmp	r0, #0
   d5f36:	d0db      	beq.n	d5ef0 <_ZN7FatFile4syncEv+0x1c>
   d5f38:	e7d0      	b.n	d5edc <_ZN7FatFile4syncEv+0x8>
   d5f3a:	bf00      	nop
   d5f3c:	2003e144 	.word	0x2003e144

000d5f40 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5f44:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5f46:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5f48:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5f4a:	4604      	mov	r4, r0
   d5f4c:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5f4e:	d508      	bpl.n	d5f62 <_ZN7FatFile5writeEPKvj+0x22>
   d5f50:	7883      	ldrb	r3, [r0, #2]
   d5f52:	079a      	lsls	r2, r3, #30
   d5f54:	d505      	bpl.n	d5f62 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d5f56:	071b      	lsls	r3, r3, #28
   d5f58:	d50b      	bpl.n	d5f72 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d5f5a:	69e1      	ldr	r1, [r4, #28]
   d5f5c:	f7ff ff71 	bl	d5e42 <_ZN7FatFile7seekSetEm>
   d5f60:	b938      	cbnz	r0, d5f72 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d5f62:	7863      	ldrb	r3, [r4, #1]
   d5f64:	f043 0301 	orr.w	r3, r3, #1
   d5f68:	7063      	strb	r3, [r4, #1]
  return -1;
   d5f6a:	f04f 30ff 	mov.w	r0, #4294967295
   d5f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d5f72:	6963      	ldr	r3, [r4, #20]
   d5f74:	43db      	mvns	r3, r3
   d5f76:	4598      	cmp	r8, r3
   d5f78:	d8f3      	bhi.n	d5f62 <_ZN7FatFile5writeEPKvj+0x22>
   d5f7a:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5f7c:	f04f 0a00 	mov.w	sl, #0
   d5f80:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d5f82:	2e00      	cmp	r6, #0
   d5f84:	f000 8081 	beq.w	d608a <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d5f88:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5f8a:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5f8c:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d5f90:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5f94:	d11c      	bne.n	d5fd0 <_ZN7FatFile5writeEPKvj+0x90>
   d5f96:	b9df      	cbnz	r7, d5fd0 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d5f98:	6921      	ldr	r1, [r4, #16]
   d5f9a:	b171      	cbz	r1, d5fba <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5f9c:	f104 0210 	add.w	r2, r4, #16
   d5fa0:	f000 f901 	bl	d61a6 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d5fa4:	2800      	cmp	r0, #0
   d5fa6:	dbdc      	blt.n	d5f62 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d5fa8:	f040 808e 	bne.w	d60c8 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d5fac:	4620      	mov	r0, r4
   d5fae:	f7ff fe69 	bl	d5c84 <_ZN7FatFile10addClusterEv>
   d5fb2:	2800      	cmp	r0, #0
   d5fb4:	f040 8088 	bne.w	d60c8 <_ZN7FatFile5writeEPKvj+0x188>
   d5fb8:	e7d3      	b.n	d5f62 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d5fba:	6a23      	ldr	r3, [r4, #32]
   d5fbc:	b93b      	cbnz	r3, d5fce <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d5fbe:	4620      	mov	r0, r4
   d5fc0:	f7ff fe60 	bl	d5c84 <_ZN7FatFile10addClusterEv>
   d5fc4:	2800      	cmp	r0, #0
   d5fc6:	d0cc      	beq.n	d5f62 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d5fc8:	6923      	ldr	r3, [r4, #16]
   d5fca:	6223      	str	r3, [r4, #32]
   d5fcc:	e000      	b.n	d5fd0 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d5fce:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5fd0:	6921      	ldr	r1, [r4, #16]
   d5fd2:	68a0      	ldr	r0, [r4, #8]
   d5fd4:	f000 f8e1 	bl	d619a <_ZNK9FatVolume17clusterFirstBlockEm>
   d5fd8:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d5fda:	b917      	cbnz	r7, d5fe2 <_ZN7FatFile5writeEPKvj+0xa2>
   d5fdc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5fe0:	d221      	bcs.n	d6026 <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d5fe2:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d5fe6:	42b5      	cmp	r5, r6
   d5fe8:	bf28      	it	cs
   d5fea:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d5fec:	b937      	cbnz	r7, d5ffc <_ZN7FatFile5writeEPKvj+0xbc>
   d5fee:	6963      	ldr	r3, [r4, #20]
   d5ff0:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d5ff2:	4293      	cmp	r3, r2
   d5ff4:	bf34      	ite	cc
   d5ff6:	2201      	movcc	r2, #1
   d5ff8:	2205      	movcs	r2, #5
   d5ffa:	e000      	b.n	d5ffe <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d5ffc:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5ffe:	68a0      	ldr	r0, [r4, #8]
   d6000:	3024      	adds	r0, #36	; 0x24
   d6002:	f000 f8a6 	bl	d6152 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d6006:	2800      	cmp	r0, #0
   d6008:	d0ab      	beq.n	d5f62 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d600a:	4438      	add	r0, r7
   d600c:	462a      	mov	r2, r5
   d600e:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d6010:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d6012:	f003 fc66 	bl	d98e2 <memcpy>
      if (512 == (n + blockOffset)) {
   d6016:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d601a:	d130      	bne.n	d607e <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d601c:	68a0      	ldr	r0, [r4, #8]
   d601e:	3024      	adds	r0, #36	; 0x24
   d6020:	f000 f870 	bl	d6104 <_ZN8FatCache4syncEv>
   d6024:	e017      	b.n	d6056 <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d6026:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d602a:	68a0      	ldr	r0, [r4, #8]
   d602c:	d315      	bcc.n	d605a <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d602e:	7902      	ldrb	r2, [r0, #4]
   d6030:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d6032:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d6034:	b2d2      	uxtb	r2, r2
   d6036:	4293      	cmp	r3, r2
   d6038:	bf28      	it	cs
   d603a:	4613      	movcs	r3, r2
   d603c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d603e:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d6040:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6044:	d302      	bcc.n	d604c <_ZN7FatFile5writeEPKvj+0x10c>
   d6046:	441a      	add	r2, r3
   d6048:	4291      	cmp	r1, r2
   d604a:	d337      	bcc.n	d60bc <_ZN7FatFile5writeEPKvj+0x17c>
   d604c:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d604e:	464a      	mov	r2, r9
   d6050:	6838      	ldr	r0, [r7, #0]
   d6052:	f000 fb0c 	bl	d666e <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d6056:	b990      	cbnz	r0, d607e <_ZN7FatFile5writeEPKvj+0x13e>
   d6058:	e783      	b.n	d5f62 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d605a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d605c:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d605e:	bf02      	ittt	eq
   d6060:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d6064:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d6068:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d606a:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d606c:	464a      	mov	r2, r9
   d606e:	6818      	ldr	r0, [r3, #0]
   d6070:	f000 fa8b 	bl	d658a <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d6074:	2800      	cmp	r0, #0
   d6076:	f43f af74 	beq.w	d5f62 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d607a:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d607e:	6963      	ldr	r3, [r4, #20]
   d6080:	442b      	add	r3, r5
   d6082:	6163      	str	r3, [r4, #20]
    src += n;
   d6084:	44a9      	add	r9, r5
    nToWrite -= n;
   d6086:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d6088:	e77a      	b.n	d5f80 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d608a:	69e2      	ldr	r2, [r4, #28]
   d608c:	4293      	cmp	r3, r2
   d608e:	d901      	bls.n	d6094 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d6090:	61e3      	str	r3, [r4, #28]
   d6092:	e002      	b.n	d609a <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d6094:	4b0f      	ldr	r3, [pc, #60]	; (d60d4 <_ZN7FatFile5writeEPKvj+0x194>)
   d6096:	681b      	ldr	r3, [r3, #0]
   d6098:	b11b      	cbz	r3, d60a2 <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d609a:	78a3      	ldrb	r3, [r4, #2]
   d609c:	f043 0304 	orr.w	r3, r3, #4
   d60a0:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d60a2:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d60a6:	2b00      	cmp	r3, #0
   d60a8:	db02      	blt.n	d60b0 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d60aa:	4640      	mov	r0, r8
   d60ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d60b0:	4620      	mov	r0, r4
   d60b2:	f7ff ff0f 	bl	d5ed4 <_ZN7FatFile4syncEv>
   d60b6:	2800      	cmp	r0, #0
   d60b8:	d1f7      	bne.n	d60aa <_ZN7FatFile5writeEPKvj+0x16a>
   d60ba:	e752      	b.n	d5f62 <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d60bc:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d60c0:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d60c4:	62c2      	str	r2, [r0, #44]	; 0x2c
   d60c6:	e7c1      	b.n	d604c <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d60c8:	6921      	ldr	r1, [r4, #16]
   d60ca:	68a0      	ldr	r0, [r4, #8]
   d60cc:	f000 f865 	bl	d619a <_ZNK9FatVolume17clusterFirstBlockEm>
   d60d0:	4601      	mov	r1, r0
   d60d2:	e783      	b.n	d5fdc <_ZN7FatFile5writeEPKvj+0x9c>
   d60d4:	2003e144 	.word	0x2003e144

000d60d8 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d60d8:	f000 be82 	b.w	d6de0 <HAL_Pin_Map>

000d60dc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d60dc:	b570      	push	{r4, r5, r6, lr}
   d60de:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d60e0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d60e2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d60e4:	b149      	cbz	r1, d60fa <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d60e6:	f003 fc37 	bl	d9958 <strlen>
   d60ea:	682b      	ldr	r3, [r5, #0]
   d60ec:	4602      	mov	r2, r0
   d60ee:	4621      	mov	r1, r4
   d60f0:	4628      	mov	r0, r5
   d60f2:	68db      	ldr	r3, [r3, #12]
    }
   d60f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d60f8:	4718      	bx	r3
    }
   d60fa:	bd70      	pop	{r4, r5, r6, pc}

000d60fc <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d60fc:	f000 be70 	b.w	d6de0 <HAL_Pin_Map>

000d6100 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d6100:	f000 be6e 	b.w	d6de0 <HAL_Pin_Map>

000d6104 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d6104:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d6106:	7803      	ldrb	r3, [r0, #0]
   d6108:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d610a:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d610c:	d51e      	bpl.n	d614c <_ZN8FatCache4syncEv+0x48>
   d610e:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d6110:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d6112:	f100 060c 	add.w	r6, r0, #12
   d6116:	4632      	mov	r2, r6
   d6118:	6818      	ldr	r0, [r3, #0]
   d611a:	f000 fa36 	bl	d658a <_ZN9SdSpiCard10writeBlockEmPKh>
   d611e:	4605      	mov	r5, r0
   d6120:	b908      	cbnz	r0, d6126 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d6122:	2500      	movs	r5, #0
   d6124:	e013      	b.n	d614e <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d6126:	7823      	ldrb	r3, [r4, #0]
   d6128:	079b      	lsls	r3, r3, #30
   d612a:	d404      	bmi.n	d6136 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d612c:	7823      	ldrb	r3, [r4, #0]
   d612e:	f023 0301 	bic.w	r3, r3, #1
   d6132:	7023      	strb	r3, [r4, #0]
   d6134:	e00b      	b.n	d614e <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d6136:	6863      	ldr	r3, [r4, #4]
   d6138:	68a0      	ldr	r0, [r4, #8]
   d613a:	6919      	ldr	r1, [r3, #16]
   d613c:	4632      	mov	r2, r6
   d613e:	4401      	add	r1, r0
   d6140:	6818      	ldr	r0, [r3, #0]
   d6142:	f000 fa22 	bl	d658a <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d6146:	2800      	cmp	r0, #0
   d6148:	d1f0      	bne.n	d612c <_ZN8FatCache4syncEv+0x28>
   d614a:	e7ea      	b.n	d6122 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d614c:	2501      	movs	r5, #1

fail:
  return false;
}
   d614e:	4628      	mov	r0, r5
   d6150:	bd70      	pop	{r4, r5, r6, pc}

000d6152 <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d6152:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d6154:	6883      	ldr	r3, [r0, #8]
   d6156:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d6158:	4604      	mov	r4, r0
   d615a:	460e      	mov	r6, r1
   d615c:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d615e:	d014      	beq.n	d618a <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d6160:	f7ff ffd0 	bl	d6104 <_ZN8FatCache4syncEv>
   d6164:	b908      	cbnz	r0, d616a <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d6166:	2000      	movs	r0, #0
   d6168:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d616a:	076b      	lsls	r3, r5, #29
   d616c:	d503      	bpl.n	d6176 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d616e:	2300      	movs	r3, #0
   d6170:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d6172:	60a6      	str	r6, [r4, #8]
   d6174:	e009      	b.n	d618a <_ZN8FatCache4readEmh+0x38>
   d6176:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d6178:	f104 020c 	add.w	r2, r4, #12
   d617c:	4631      	mov	r1, r6
   d617e:	6818      	ldr	r0, [r3, #0]
   d6180:	f000 f979 	bl	d6476 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d6184:	2800      	cmp	r0, #0
   d6186:	d1f2      	bne.n	d616e <_ZN8FatCache4readEmh+0x1c>
   d6188:	e7ed      	b.n	d6166 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d618a:	7823      	ldrb	r3, [r4, #0]
   d618c:	4620      	mov	r0, r4
   d618e:	f005 0503 	and.w	r5, r5, #3
   d6192:	431d      	orrs	r5, r3
   d6194:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d6198:	bd70      	pop	{r4, r5, r6, pc}

000d619a <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d619a:	7983      	ldrb	r3, [r0, #6]
   d619c:	6940      	ldr	r0, [r0, #20]
   d619e:	3902      	subs	r1, #2
   d61a0:	4099      	lsls	r1, r3
}
   d61a2:	4408      	add	r0, r1
   d61a4:	4770      	bx	lr

000d61a6 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d61a6:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d61a8:	b570      	push	{r4, r5, r6, lr}
   d61aa:	4605      	mov	r5, r0
   d61ac:	460c      	mov	r4, r1
   d61ae:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d61b0:	d802      	bhi.n	d61b8 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d61b2:	f04f 30ff 	mov.w	r0, #4294967295
   d61b6:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d61b8:	69c3      	ldr	r3, [r0, #28]
   d61ba:	4299      	cmp	r1, r3
   d61bc:	d8f9      	bhi.n	d61b2 <_ZN9FatVolume6fatGetEmPm+0xc>
   d61be:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d61c0:	2b20      	cmp	r3, #32
   d61c2:	d110      	bne.n	d61e6 <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d61c4:	6981      	ldr	r1, [r0, #24]
   d61c6:	2202      	movs	r2, #2
   d61c8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d61cc:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d61d0:	f7ff ffbf 	bl	d6152 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d61d4:	2800      	cmp	r0, #0
   d61d6:	d0ec      	beq.n	d61b2 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d61d8:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d61dc:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d61e0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d61e4:	e00f      	b.n	d6206 <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d61e6:	2b10      	cmp	r3, #16
   d61e8:	d1e3      	bne.n	d61b2 <_ZN9FatVolume6fatGetEmPm+0xc>
   d61ea:	6983      	ldr	r3, [r0, #24]
   d61ec:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d61f0:	2202      	movs	r2, #2
   d61f2:	4419      	add	r1, r3
   d61f4:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d61f8:	f7ff ffab 	bl	d6152 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d61fc:	2800      	cmp	r0, #0
   d61fe:	d0d8      	beq.n	d61b2 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d6200:	b2e4      	uxtb	r4, r4
   d6202:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d6206:	69ea      	ldr	r2, [r5, #28]
   d6208:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d620a:	bf9a      	itte	ls
   d620c:	6033      	strls	r3, [r6, #0]
  return 1;
   d620e:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d6210:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d6212:	bd70      	pop	{r4, r5, r6, pc}

000d6214 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6214:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d6216:	b538      	push	{r3, r4, r5, lr}
   d6218:	460c      	mov	r4, r1
   d621a:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d621c:	d801      	bhi.n	d6222 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d621e:	2000      	movs	r0, #0
   d6220:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6222:	69c3      	ldr	r3, [r0, #28]
   d6224:	4299      	cmp	r1, r3
   d6226:	d8fa      	bhi.n	d621e <_ZN9FatVolume6fatPutEmm+0xa>
   d6228:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d622a:	2b20      	cmp	r3, #32
   d622c:	d10e      	bne.n	d624c <_ZN9FatVolume6fatPutEmm+0x38>
   d622e:	6981      	ldr	r1, [r0, #24]
   d6230:	2203      	movs	r2, #3
   d6232:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d6236:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d623a:	f7ff ff8a 	bl	d6152 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d623e:	2800      	cmp	r0, #0
   d6240:	d0ed      	beq.n	d621e <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d6242:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d6246:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d624a:	e00f      	b.n	d626c <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d624c:	2b10      	cmp	r3, #16
   d624e:	d1e6      	bne.n	d621e <_ZN9FatVolume6fatPutEmm+0xa>
   d6250:	6983      	ldr	r3, [r0, #24]
   d6252:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d6256:	2203      	movs	r2, #3
   d6258:	4419      	add	r1, r3
   d625a:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d625e:	f7ff ff78 	bl	d6152 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d6262:	2800      	cmp	r0, #0
   d6264:	d0db      	beq.n	d621e <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d6266:	b2e4      	uxtb	r4, r4
   d6268:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d626c:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d626e:	bd38      	pop	{r3, r4, r5, pc}

000d6270 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d6270:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d6274:	68c4      	ldr	r4, [r0, #12]
   d6276:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d6278:	4605      	mov	r5, r0
   d627a:	460e      	mov	r6, r1
   d627c:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d627e:	d207      	bcs.n	d6290 <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d6280:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d6282:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d6284:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d6286:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d6288:	429c      	cmp	r4, r3
   d628a:	d903      	bls.n	d6294 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d628c:	b9cf      	cbnz	r7, d62c2 <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d628e:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d6290:	2701      	movs	r7, #1
   d6292:	e7f7      	b.n	d6284 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d6294:	42a6      	cmp	r6, r4
   d6296:	d014      	beq.n	d62c2 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d6298:	aa01      	add	r2, sp, #4
   d629a:	4621      	mov	r1, r4
   d629c:	4628      	mov	r0, r5
   d629e:	f7ff ff82 	bl	d61a6 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d62a2:	2800      	cmp	r0, #0
   d62a4:	db0d      	blt.n	d62c2 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d62a6:	d0ed      	beq.n	d6284 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d62a8:	9b01      	ldr	r3, [sp, #4]
   d62aa:	2b00      	cmp	r3, #0
   d62ac:	d1ea      	bne.n	d6284 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d62ae:	b107      	cbz	r7, d62b2 <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d62b0:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d62b2:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d62b6:	4621      	mov	r1, r4
   d62b8:	4628      	mov	r0, r5
   d62ba:	f7ff ffab 	bl	d6214 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d62be:	4607      	mov	r7, r0
   d62c0:	b908      	cbnz	r0, d62c6 <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d62c2:	2700      	movs	r7, #0
   d62c4:	e00b      	b.n	d62de <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d62c6:	b916      	cbnz	r6, d62ce <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d62c8:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d62cc:	e007      	b.n	d62de <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d62ce:	4622      	mov	r2, r4
   d62d0:	4631      	mov	r1, r6
   d62d2:	4628      	mov	r0, r5
   d62d4:	f7ff ff9e 	bl	d6214 <_ZN9FatVolume6fatPutEmm>
   d62d8:	2800      	cmp	r0, #0
   d62da:	d1f5      	bne.n	d62c8 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d62dc:	e7f1      	b.n	d62c2 <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d62de:	4638      	mov	r0, r7
   d62e0:	b002      	add	sp, #8
   d62e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d62e6 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d62e6:	f000 bd7b 	b.w	d6de0 <HAL_Pin_Map>

000d62ea <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d62ea:	f000 bd79 	b.w	d6de0 <HAL_Pin_Map>

000d62ee <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d62ee:	f000 bd77 	b.w	d6de0 <HAL_Pin_Map>
	...

000d62f4 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d62f4:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d62f6:	4c0e      	ldr	r4, [pc, #56]	; (d6330 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d62f8:	460e      	mov	r6, r1
   d62fa:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d62fc:	f000 fe30 	bl	d6f60 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d6300:	6823      	ldr	r3, [r4, #0]
   d6302:	1ac0      	subs	r0, r0, r3
   d6304:	4b0b      	ldr	r3, [pc, #44]	; (d6334 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d6306:	4298      	cmp	r0, r3
   d6308:	d908      	bls.n	d631c <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d630a:	f000 fe31 	bl	d6f70 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d630e:	4b0a      	ldr	r3, [pc, #40]	; (d6338 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d6310:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d6312:	f001 f871 	bl	d73f8 <spark_process>
   d6316:	f000 fe23 	bl	d6f60 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d631a:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d631c:	f000 fe28 	bl	d6f70 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d6320:	b280      	uxth	r0, r0
   d6322:	1b80      	subs	r0, r0, r6
}
   d6324:	42a8      	cmp	r0, r5
   d6326:	bfd4      	ite	le
   d6328:	2000      	movle	r0, #0
   d632a:	2001      	movgt	r0, #1
   d632c:	bd70      	pop	{r4, r5, r6, pc}
   d632e:	bf00      	nop
   d6330:	2003e148 	.word	0x2003e148
   d6334:	000186a0 	.word	0x000186a0
   d6338:	2003e528 	.word	0x2003e528

000d633c <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d633c:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d633e:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d6340:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d6342:	b94d      	cbnz	r5, d6358 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d6344:	6840      	ldr	r0, [r0, #4]
   d6346:	f000 f9b9 	bl	d66bc <_ZN14SdSpiAltDriver8activateEv>
   d634a:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d634c:	4629      	mov	r1, r5
   d634e:	7d18      	ldrb	r0, [r3, #20]
   d6350:	f002 fc65 	bl	d8c1e <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d6354:	2301      	movs	r3, #1
   d6356:	7223      	strb	r3, [r4, #8]
   d6358:	bd38      	pop	{r3, r4, r5, pc}

000d635a <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d635a:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d635c:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d635e:	4604      	mov	r4, r0
  if (m_spiActive) {
   d6360:	b16b      	cbz	r3, d637e <_ZN9SdSpiCard7spiStopEv+0x24>
   d6362:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d6364:	2101      	movs	r1, #1
   d6366:	7d18      	ldrb	r0, [r3, #20]
   d6368:	f002 fc59 	bl	d8c1e <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d636c:	21ff      	movs	r1, #255	; 0xff
   d636e:	6860      	ldr	r0, [r4, #4]
   d6370:	f000 f9c6 	bl	d6700 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d6374:	6860      	ldr	r0, [r4, #4]
   d6376:	f000 f9a5 	bl	d66c4 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d637a:	2300      	movs	r3, #0
   d637c:	7223      	strb	r3, [r4, #8]
   d637e:	bd10      	pop	{r4, pc}

000d6380 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d6380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6382:	4604      	mov	r4, r0
   d6384:	460d      	mov	r5, r1
   d6386:	4616      	mov	r6, r2
   d6388:	f000 fdf2 	bl	d6f70 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d638c:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d638e:	6860      	ldr	r0, [r4, #4]
   d6390:	f000 f99b 	bl	d66ca <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d6394:	28ff      	cmp	r0, #255	; 0xff
   d6396:	7260      	strb	r0, [r4, #9]
   d6398:	d109      	bne.n	d63ae <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d639a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d639e:	4639      	mov	r1, r7
   d63a0:	4620      	mov	r0, r4
   d63a2:	f7ff ffa7 	bl	d62f4 <_ZN9SdSpiCard10isTimedOutEtt>
   d63a6:	2800      	cmp	r0, #0
   d63a8:	d0f1      	beq.n	d638e <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d63aa:	2355      	movs	r3, #85	; 0x55
   d63ac:	e00b      	b.n	d63c6 <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d63ae:	28fe      	cmp	r0, #254	; 0xfe
   d63b0:	d001      	beq.n	d63b6 <_ZN9SdSpiCard8readDataEPhj+0x36>
   d63b2:	2350      	movs	r3, #80	; 0x50
   d63b4:	e007      	b.n	d63c6 <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d63b6:	4632      	mov	r2, r6
   d63b8:	4629      	mov	r1, r5
   d63ba:	6860      	ldr	r0, [r4, #4]
   d63bc:	f000 f98a 	bl	d66d4 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d63c0:	7260      	strb	r0, [r4, #9]
   d63c2:	b130      	cbz	r0, d63d2 <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d63c4:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d63c6:	4620      	mov	r0, r4
   d63c8:	7023      	strb	r3, [r4, #0]
   d63ca:	f7ff ffc6 	bl	d635a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d63ce:	2000      	movs	r0, #0
}
   d63d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d63d2:	6860      	ldr	r0, [r4, #4]
   d63d4:	f000 f979 	bl	d66ca <_ZN14SdSpiAltDriver7receiveEv>
   d63d8:	6860      	ldr	r0, [r4, #4]
   d63da:	f000 f976 	bl	d66ca <_ZN14SdSpiAltDriver7receiveEv>
   d63de:	2001      	movs	r0, #1
   d63e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d63e2 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d63e2:	b570      	push	{r4, r5, r6, lr}
   d63e4:	4604      	mov	r4, r0
   d63e6:	460e      	mov	r6, r1
   d63e8:	f000 fdc2 	bl	d6f70 <HAL_Timer_Get_Milli_Seconds>
   d63ec:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d63ee:	4632      	mov	r2, r6
   d63f0:	4629      	mov	r1, r5
   d63f2:	4620      	mov	r0, r4
   d63f4:	f7ff ff7e 	bl	d62f4 <_ZN9SdSpiCard10isTimedOutEtt>
   d63f8:	b930      	cbnz	r0, d6408 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d63fa:	6860      	ldr	r0, [r4, #4]
   d63fc:	f000 f965 	bl	d66ca <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d6400:	28ff      	cmp	r0, #255	; 0xff
   d6402:	d1f4      	bne.n	d63ee <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d6404:	2001      	movs	r0, #1
   d6406:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d6408:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d640a:	bd70      	pop	{r4, r5, r6, pc}

000d640c <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d640c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d640e:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d6410:	9201      	str	r2, [sp, #4]
   d6412:	4604      	mov	r4, r0
   d6414:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d6416:	b90b      	cbnz	r3, d641c <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d6418:	f7ff ff90 	bl	d633c <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d641c:	b125      	cbz	r5, d6428 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d641e:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d6422:	4620      	mov	r0, r4
   d6424:	f7ff ffdd 	bl	d63e2 <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6428:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d642c:	6860      	ldr	r0, [r4, #4]
   d642e:	f000 f967 	bl	d6700 <_ZN14SdSpiAltDriver4sendEh>
   d6432:	f10d 0607 	add.w	r6, sp, #7
   d6436:	f10d 0703 	add.w	r7, sp, #3
   d643a:	f816 1901 	ldrb.w	r1, [r6], #-1
   d643e:	6860      	ldr	r0, [r4, #4]
   d6440:	f000 f95e 	bl	d6700 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d6444:	42be      	cmp	r6, r7
   d6446:	d1f8      	bne.n	d643a <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d6448:	2d00      	cmp	r5, #0
   d644a:	bf0c      	ite	eq
   d644c:	2195      	moveq	r1, #149	; 0x95
   d644e:	2187      	movne	r1, #135	; 0x87
   d6450:	6860      	ldr	r0, [r4, #4]
   d6452:	f000 f955 	bl	d6700 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6456:	6860      	ldr	r0, [r4, #4]
   d6458:	f000 f937 	bl	d66ca <_ZN14SdSpiAltDriver7receiveEv>
   d645c:	250b      	movs	r5, #11
   d645e:	6860      	ldr	r0, [r4, #4]
   d6460:	f000 f933 	bl	d66ca <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d6464:	0603      	lsls	r3, r0, #24
   d6466:	7260      	strb	r0, [r4, #9]
   d6468:	d503      	bpl.n	d6472 <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d646a:	3d01      	subs	r5, #1
   d646c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6470:	d1f5      	bne.n	d645e <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d6472:	b003      	add	sp, #12
   d6474:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6476 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6476:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6478:	7a83      	ldrb	r3, [r0, #10]
   d647a:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d647c:	bf18      	it	ne
   d647e:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6480:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d6482:	460a      	mov	r2, r1
   d6484:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6486:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d6488:	f7ff ffc0 	bl	d640c <_ZN9SdSpiCard11cardCommandEhm>
   d648c:	b110      	cbz	r0, d6494 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d648e:	2330      	movs	r3, #48	; 0x30
   d6490:	7023      	strb	r3, [r4, #0]
   d6492:	e00b      	b.n	d64ac <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d6494:	4629      	mov	r1, r5
   d6496:	f44f 7200 	mov.w	r2, #512	; 0x200
   d649a:	4620      	mov	r0, r4
   d649c:	f7ff ff70 	bl	d6380 <_ZN9SdSpiCard8readDataEPhj>
   d64a0:	4605      	mov	r5, r0
   d64a2:	b118      	cbz	r0, d64ac <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d64a4:	4620      	mov	r0, r4
   d64a6:	f7ff ff58 	bl	d635a <_ZN9SdSpiCard7spiStopEv>
  return true;
   d64aa:	e003      	b.n	d64b4 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d64ac:	4620      	mov	r0, r4
   d64ae:	f7ff ff54 	bl	d635a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d64b2:	2500      	movs	r5, #0
}
   d64b4:	4628      	mov	r0, r5
   d64b6:	bd38      	pop	{r3, r4, r5, pc}

000d64b8 <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d64b8:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d64ba:	7a83      	ldrb	r3, [r0, #10]
   d64bc:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d64be:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d64c0:	bf18      	it	ne
   d64c2:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d64c4:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d64c6:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d64c8:	f7ff ffa0 	bl	d640c <_ZN9SdSpiCard11cardCommandEhm>
   d64cc:	b130      	cbz	r0, d64dc <_ZN9SdSpiCard9readStartEm+0x24>
   d64ce:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d64d0:	4620      	mov	r0, r4
   d64d2:	7023      	strb	r3, [r4, #0]
   d64d4:	f7ff ff41 	bl	d635a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d64d8:	2000      	movs	r0, #0
   d64da:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d64dc:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d64de:	bd10      	pop	{r4, pc}

000d64e0 <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d64e0:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d64e2:	2200      	movs	r2, #0
   d64e4:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d64e6:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d64e8:	f7ff ff90 	bl	d640c <_ZN9SdSpiCard11cardCommandEhm>
   d64ec:	b130      	cbz	r0, d64fc <_ZN9SdSpiCard8readStopEv+0x1c>
   d64ee:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d64f0:	4620      	mov	r0, r4
   d64f2:	7023      	strb	r3, [r4, #0]
   d64f4:	f7ff ff31 	bl	d635a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d64f8:	2000      	movs	r0, #0
   d64fa:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d64fc:	4620      	mov	r0, r4
   d64fe:	f7ff ff2c 	bl	d635a <_ZN9SdSpiCard7spiStopEv>
  return true;
   d6502:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6504:	bd10      	pop	{r4, pc}

000d6506 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d6506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6508:	4605      	mov	r5, r0
   d650a:	4616      	mov	r6, r2
   d650c:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d650e:	f7ff ffd3 	bl	d64b8 <_ZN9SdSpiCard9readStartEm>
   d6512:	b198      	cbz	r0, d653c <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d6514:	2400      	movs	r4, #0
   d6516:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d6518:	429f      	cmp	r7, r3
   d651a:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d651e:	d908      	bls.n	d6532 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d6520:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6524:	4628      	mov	r0, r5
   d6526:	f7ff ff2b 	bl	d6380 <_ZN9SdSpiCard8readDataEPhj>
   d652a:	3401      	adds	r4, #1
   d652c:	2800      	cmp	r0, #0
   d652e:	d1f2      	bne.n	d6516 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d6530:	e004      	b.n	d653c <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d6532:	4628      	mov	r0, r5
}
   d6534:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d6538:	f7ff bfd2 	b.w	d64e0 <_ZN9SdSpiCard8readStopEv>
}
   d653c:	2000      	movs	r0, #0
   d653e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6540 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d6540:	b538      	push	{r3, r4, r5, lr}
   d6542:	4604      	mov	r4, r0
   d6544:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6546:	6840      	ldr	r0, [r0, #4]
   d6548:	f000 f8da 	bl	d6700 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d654c:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6550:	4629      	mov	r1, r5
   d6552:	6860      	ldr	r0, [r4, #4]
   d6554:	f000 f8d8 	bl	d6708 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6558:	21ff      	movs	r1, #255	; 0xff
   d655a:	6860      	ldr	r0, [r4, #4]
   d655c:	f000 f8d0 	bl	d6700 <_ZN14SdSpiAltDriver4sendEh>
   d6560:	21ff      	movs	r1, #255	; 0xff
   d6562:	6860      	ldr	r0, [r4, #4]
   d6564:	f000 f8cc 	bl	d6700 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6568:	6860      	ldr	r0, [r4, #4]
   d656a:	f000 f8ae 	bl	d66ca <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d656e:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d6570:	f000 001f 	and.w	r0, r0, #31
   d6574:	2805      	cmp	r0, #5
   d6576:	d006      	beq.n	d6586 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6578:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d657a:	4620      	mov	r0, r4
   d657c:	7023      	strb	r3, [r4, #0]
   d657e:	f7ff feec 	bl	d635a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6582:	2000      	movs	r0, #0
   d6584:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d6586:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6588:	bd38      	pop	{r3, r4, r5, pc}

000d658a <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d658a:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d658c:	7a83      	ldrb	r3, [r0, #10]
   d658e:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d6590:	bf18      	it	ne
   d6592:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6594:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d6596:	460a      	mov	r2, r1
   d6598:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d659a:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d659c:	f7ff ff36 	bl	d640c <_ZN9SdSpiCard11cardCommandEhm>
   d65a0:	4606      	mov	r6, r0
   d65a2:	b108      	cbz	r0, d65a8 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d65a4:	2332      	movs	r3, #50	; 0x32
   d65a6:	e01d      	b.n	d65e4 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d65a8:	462a      	mov	r2, r5
   d65aa:	21fe      	movs	r1, #254	; 0xfe
   d65ac:	4620      	mov	r0, r4
   d65ae:	f7ff ffc7 	bl	d6540 <_ZN9SdSpiCard9writeDataEhPKh>
   d65b2:	b1c0      	cbz	r0, d65e6 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d65b4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d65b8:	4620      	mov	r0, r4
   d65ba:	f7ff ff12 	bl	d63e2 <_ZN9SdSpiCard11waitNotBusyEt>
   d65be:	4605      	mov	r5, r0
   d65c0:	b908      	cbnz	r0, d65c6 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d65c2:	235a      	movs	r3, #90	; 0x5a
   d65c4:	e00e      	b.n	d65e4 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d65c6:	4632      	mov	r2, r6
   d65c8:	210d      	movs	r1, #13
   d65ca:	4620      	mov	r0, r4
   d65cc:	f7ff ff1e 	bl	d640c <_ZN9SdSpiCard11cardCommandEhm>
   d65d0:	b938      	cbnz	r0, d65e2 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d65d2:	6860      	ldr	r0, [r4, #4]
   d65d4:	f000 f879 	bl	d66ca <_ZN14SdSpiAltDriver7receiveEv>
   d65d8:	b918      	cbnz	r0, d65e2 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d65da:	4620      	mov	r0, r4
   d65dc:	f7ff febd 	bl	d635a <_ZN9SdSpiCard7spiStopEv>
  return true;
   d65e0:	e005      	b.n	d65ee <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d65e2:	2329      	movs	r3, #41	; 0x29
   d65e4:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d65e6:	4620      	mov	r0, r4
   d65e8:	f7ff feb7 	bl	d635a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d65ec:	2500      	movs	r5, #0
}
   d65ee:	4628      	mov	r0, r5
   d65f0:	bd70      	pop	{r4, r5, r6, pc}

000d65f2 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d65f2:	b538      	push	{r3, r4, r5, lr}
   d65f4:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d65f6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d65fa:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d65fc:	f7ff fef1 	bl	d63e2 <_ZN9SdSpiCard11waitNotBusyEt>
   d6600:	b910      	cbnz	r0, d6608 <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d6602:	235b      	movs	r3, #91	; 0x5b
   d6604:	7023      	strb	r3, [r4, #0]
   d6606:	e005      	b.n	d6614 <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d6608:	462a      	mov	r2, r5
   d660a:	21fc      	movs	r1, #252	; 0xfc
   d660c:	4620      	mov	r0, r4
   d660e:	f7ff ff97 	bl	d6540 <_ZN9SdSpiCard9writeDataEhPKh>
   d6612:	b918      	cbnz	r0, d661c <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6614:	4620      	mov	r0, r4
   d6616:	f7ff fea0 	bl	d635a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d661a:	2000      	movs	r0, #0
}
   d661c:	bd38      	pop	{r3, r4, r5, pc}

000d661e <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d661e:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6620:	7a83      	ldrb	r3, [r0, #10]
   d6622:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6624:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d6626:	bf18      	it	ne
   d6628:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d662a:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d662c:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d662e:	f7ff feed 	bl	d640c <_ZN9SdSpiCard11cardCommandEhm>
   d6632:	b130      	cbz	r0, d6642 <_ZN9SdSpiCard10writeStartEm+0x24>
   d6634:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6636:	4620      	mov	r0, r4
   d6638:	7023      	strb	r3, [r4, #0]
   d663a:	f7ff fe8e 	bl	d635a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d663e:	2000      	movs	r0, #0
   d6640:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d6642:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6644:	bd10      	pop	{r4, pc}

000d6646 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d6646:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6648:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d664c:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d664e:	f7ff fec8 	bl	d63e2 <_ZN9SdSpiCard11waitNotBusyEt>
   d6652:	4605      	mov	r5, r0
   d6654:	b120      	cbz	r0, d6660 <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6656:	21fd      	movs	r1, #253	; 0xfd
   d6658:	6860      	ldr	r0, [r4, #4]
   d665a:	f000 f851 	bl	d6700 <_ZN14SdSpiAltDriver4sendEh>
   d665e:	e001      	b.n	d6664 <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6660:	2356      	movs	r3, #86	; 0x56
   d6662:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d6664:	4620      	mov	r0, r4
   d6666:	f7ff fe78 	bl	d635a <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d666a:	4628      	mov	r0, r5
   d666c:	bd38      	pop	{r3, r4, r5, pc}

000d666e <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d666e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6670:	4605      	mov	r5, r0
   d6672:	4616      	mov	r6, r2
   d6674:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d6676:	f7ff ffd2 	bl	d661e <_ZN9SdSpiCard10writeStartEm>
   d667a:	b170      	cbz	r0, d669a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d667c:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d667e:	42bc      	cmp	r4, r7
   d6680:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d6684:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6686:	d004      	beq.n	d6692 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d6688:	f7ff ffb3 	bl	d65f2 <_ZN9SdSpiCard9writeDataEPKh>
   d668c:	b128      	cbz	r0, d669a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d668e:	3401      	adds	r4, #1
   d6690:	e7f5      	b.n	d667e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d6692:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d6696:	f7ff bfd6 	b.w	d6646 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d669a:	4628      	mov	r0, r5
   d669c:	f7ff fe5d 	bl	d635a <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d66a0:	2000      	movs	r0, #0
   d66a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d66a4 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d66a4:	f000 bb9c 	b.w	d6de0 <HAL_Pin_Map>

000d66a8 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d66a8:	f000 bb9a 	b.w	d6de0 <HAL_Pin_Map>

000d66ac <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d66ac:	f000 bb98 	b.w	d6de0 <HAL_Pin_Map>

000d66b0 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d66b0:	4b01      	ldr	r3, [pc, #4]	; (d66b8 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d66b2:	2201      	movs	r2, #1
   d66b4:	701a      	strb	r2, [r3, #0]
   d66b6:	4770      	bx	lr
   d66b8:	2003e14c 	.word	0x2003e14c

000d66bc <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d66bc:	1d01      	adds	r1, r0, #4
   d66be:	6800      	ldr	r0, [r0, #0]
   d66c0:	f000 bf84 	b.w	d75cc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d66c4 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d66c4:	6800      	ldr	r0, [r0, #0]
   d66c6:	f000 bf68 	b.w	d759a <_ZN8SPIClass14endTransactionEv>

000d66ca <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d66ca:	21ff      	movs	r1, #255	; 0xff
   d66cc:	6800      	ldr	r0, [r0, #0]
   d66ce:	f001 b843 	b.w	d7758 <_ZN8SPIClass8transferEh>
	...

000d66d4 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d66d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d66d6:	4b08      	ldr	r3, [pc, #32]	; (d66f8 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d66d8:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d66da:	2500      	movs	r5, #0
   d66dc:	4c07      	ldr	r4, [pc, #28]	; (d66fc <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d66de:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d66e0:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d66e2:	4613      	mov	r3, r2
   d66e4:	460a      	mov	r2, r1
   d66e6:	4629      	mov	r1, r5
   d66e8:	f001 f83c 	bl	d7764 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d66ec:	7823      	ldrb	r3, [r4, #0]
   d66ee:	2b00      	cmp	r3, #0
   d66f0:	d0fc      	beq.n	d66ec <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d66f2:	2000      	movs	r0, #0
   d66f4:	b003      	add	sp, #12
   d66f6:	bd30      	pop	{r4, r5, pc}
   d66f8:	000d66b1 	.word	0x000d66b1
   d66fc:	2003e14c 	.word	0x2003e14c

000d6700 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d6700:	6800      	ldr	r0, [r0, #0]
   d6702:	f001 b829 	b.w	d7758 <_ZN8SPIClass8transferEh>
	...

000d6708 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d6708:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d670a:	4b07      	ldr	r3, [pc, #28]	; (d6728 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d670c:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d670e:	2500      	movs	r5, #0
   d6710:	4c06      	ldr	r4, [pc, #24]	; (d672c <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d6712:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6714:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d6716:	4613      	mov	r3, r2
   d6718:	462a      	mov	r2, r5
   d671a:	f001 f823 	bl	d7764 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d671e:	7823      	ldrb	r3, [r4, #0]
   d6720:	2b00      	cmp	r3, #0
   d6722:	d0fc      	beq.n	d671e <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d6724:	b003      	add	sp, #12
   d6726:	bd30      	pop	{r4, r5, pc}
   d6728:	000d66b1 	.word	0x000d66b1
   d672c:	2003e14c 	.word	0x2003e14c

000d6730 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d6730:	f000 bb56 	b.w	d6de0 <HAL_Pin_Map>

000d6734 <_ZN5RFM694isr0Ev>:
  }
  RSSI = readRSSI();
  //digitalWrite(4, 0);
}

void RFM69::isr0() { selfPointer->interruptHandler(); }
   d6734:	4b02      	ldr	r3, [pc, #8]	; (d6740 <_ZN5RFM694isr0Ev+0xc>)
   d6736:	6818      	ldr	r0, [r3, #0]
   d6738:	6803      	ldr	r3, [r0, #0]
   d673a:	681b      	ldr	r3, [r3, #0]
   d673c:	4718      	bx	r3
   d673e:	bf00      	nop
   d6740:	2003e164 	.word	0x2003e164

000d6744 <_ZN5RFM698unselectEv>:
  SPI1.setClockDivider(SPI_CLOCK_DIV16);
  digitalWrite(_slaveSelectPin, LOW);
}

/// UNselect the transceiver chip
void RFM69::unselect() {
   d6744:	b508      	push	{r3, lr}
  digitalWrite(_slaveSelectPin, HIGH);
   d6746:	2101      	movs	r1, #1
   d6748:	7900      	ldrb	r0, [r0, #4]
   d674a:	f002 fa68 	bl	d8c1e <digitalWrite>
  #ifndef PARTICLE
  SPCR = _SPCR;
  SPSR = _SPSR;
  #endif
  interrupts();
}
   d674e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  //restore SPI settings to what they were before talking to RFM69
  #ifndef PARTICLE
  SPCR = _SPCR;
  SPSR = _SPSR;
  #endif
  interrupts();
   d6752:	f001 bc97 	b.w	d8084 <_Z10interruptsv>
	...

000d6758 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d6758:	b510      	push	{r4, lr}
        static SPIClass instance(Interface);
   d675a:	4c08      	ldr	r4, [pc, #32]	; (d677c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x24>)
   d675c:	6823      	ldr	r3, [r4, #0]
   d675e:	07db      	lsls	r3, r3, #31
   d6760:	d40a      	bmi.n	d6778 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x20>
   d6762:	4620      	mov	r0, r4
   d6764:	f7fd fc9f 	bl	d40a6 <__cxa_guard_acquire>
   d6768:	b130      	cbz	r0, d6778 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x20>
   d676a:	2101      	movs	r1, #1
   d676c:	4804      	ldr	r0, [pc, #16]	; (d6780 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x28>)
   d676e:	f000 fed7 	bl	d7520 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6772:	4620      	mov	r0, r4
   d6774:	f7fd fc9c 	bl	d40b0 <__cxa_guard_release>
        return instance;
    }
   d6778:	4801      	ldr	r0, [pc, #4]	; (d6780 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x28>)
   d677a:	bd10      	pop	{r4, pc}
   d677c:	2003e150 	.word	0x2003e150
   d6780:	2003e154 	.word	0x2003e154

000d6784 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   d6784:	b510      	push	{r4, lr}
   d6786:	4604      	mov	r4, r0
        return instance().transfer(data);
   d6788:	f7ff ffe6 	bl	d6758 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d678c:	4621      	mov	r1, r4
    }
   d678e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d6792:	f000 bfe1 	b.w	d7758 <_ZN8SPIClass8transferEh>

000d6796 <_ZN5RFM696selectEv>:
  SPI1.transfer(value);
  unselect();
}

/// Select the transceiver
void RFM69::select() {
   d6796:	b510      	push	{r4, lr}
   d6798:	4604      	mov	r4, r0
  noInterrupts();
   d679a:	f001 fc71 	bl	d8080 <_Z12noInterruptsv>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d679e:	f7ff ffdb 	bl	d6758 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d67a2:	2100      	movs	r1, #0
   d67a4:	f000 fee8 	bl	d7578 <_ZN8SPIClass11setDataModeEh>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   d67a8:	f7ff ffd6 	bl	d6758 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d67ac:	2101      	movs	r1, #1
   d67ae:	f000 fed2 	bl	d7556 <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
   d67b2:	f7ff ffd1 	bl	d6758 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d67b6:	2118      	movs	r1, #24
   d67b8:	f000 ffaa 	bl	d7710 <_ZN8SPIClass15setClockDividerEh>
  //set RFM69 SPI settings
  SPI1.setDataMode(SPI_MODE0);
  SPI1.setBitOrder(MSBFIRST);
  //SPI_CLOCK_DIV16; // 72MHz / 16 = 4.5MHz
  SPI1.setClockDivider(SPI_CLOCK_DIV16);
  digitalWrite(_slaveSelectPin, LOW);
   d67bc:	7920      	ldrb	r0, [r4, #4]
   d67be:	2100      	movs	r1, #0
}
   d67c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  //set RFM69 SPI settings
  SPI1.setDataMode(SPI_MODE0);
  SPI1.setBitOrder(MSBFIRST);
  //SPI_CLOCK_DIV16; // 72MHz / 16 = 4.5MHz
  SPI1.setClockDivider(SPI_CLOCK_DIV16);
  digitalWrite(_slaveSelectPin, LOW);
   d67c4:	f002 ba2b 	b.w	d8c1e <digitalWrite>

000d67c8 <_ZN5RFM697readRegEh>:
  rssi >>= 1;
  return rssi;
}

byte RFM69::readReg(byte addr)
{
   d67c8:	b538      	push	{r3, r4, r5, lr}
   d67ca:	460c      	mov	r4, r1
   d67cc:	4605      	mov	r5, r0
  select();
   d67ce:	f7ff ffe2 	bl	d6796 <_ZN5RFM696selectEv>
  SPI1.transfer(addr & 0x7F);
   d67d2:	f004 007f 	and.w	r0, r4, #127	; 0x7f
   d67d6:	f7ff ffd5 	bl	d6784 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  byte regval = SPI1.transfer(0);
   d67da:	2000      	movs	r0, #0
   d67dc:	f7ff ffd2 	bl	d6784 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d67e0:	4604      	mov	r4, r0
  unselect();
   d67e2:	4628      	mov	r0, r5
   d67e4:	f7ff ffae 	bl	d6744 <_ZN5RFM698unselectEv>
  return regval;
}
   d67e8:	4620      	mov	r0, r4
   d67ea:	bd38      	pop	{r3, r4, r5, pc}

000d67ec <_ZN5RFM698writeRegEhh>:

void RFM69::writeReg(byte addr, byte value)
{
   d67ec:	b570      	push	{r4, r5, r6, lr}
   d67ee:	460e      	mov	r6, r1
   d67f0:	4615      	mov	r5, r2
   d67f2:	4604      	mov	r4, r0
  select();
   d67f4:	f7ff ffcf 	bl	d6796 <_ZN5RFM696selectEv>
  SPI1.transfer(addr | 0x80);
   d67f8:	f046 0080 	orr.w	r0, r6, #128	; 0x80
   d67fc:	f7ff ffc2 	bl	d6784 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  SPI1.transfer(value);
   d6800:	4628      	mov	r0, r5
   d6802:	f7ff ffbf 	bl	d6784 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  unselect();
   d6806:	4620      	mov	r0, r4
}
   d6808:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void RFM69::writeReg(byte addr, byte value)
{
  select();
  SPI1.transfer(addr | 0x80);
  SPI1.transfer(value);
  unselect();
   d680c:	f7ff bf9a 	b.w	d6744 <_ZN5RFM698unselectEv>

000d6810 <_ZN5RFM6913setPowerLevelEh>:
}

// set output power: 0=min, 31=max
// this results in a "weaker" transmitted signal, and directly results in a lower RSSI at the receiver
void RFM69::setPowerLevel(byte powerLevel)
{
   d6810:	b510      	push	{r4, lr}
  _powerLevel = powerLevel;
   d6812:	7241      	strb	r1, [r0, #9]
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | (_powerLevel > 31 ? 31 : _powerLevel));
   d6814:	2111      	movs	r1, #17
}

// set output power: 0=min, 31=max
// this results in a "weaker" transmitted signal, and directly results in a lower RSSI at the receiver
void RFM69::setPowerLevel(byte powerLevel)
{
   d6816:	4604      	mov	r4, r0
  _powerLevel = powerLevel;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | (_powerLevel > 31 ? 31 : _powerLevel));
   d6818:	f7ff ffd6 	bl	d67c8 <_ZN5RFM697readRegEh>
   d681c:	7a62      	ldrb	r2, [r4, #9]
   d681e:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
   d6822:	2a1f      	cmp	r2, #31
   d6824:	bf94      	ite	ls
   d6826:	4302      	orrls	r2, r0
   d6828:	f040 021f 	orrhi.w	r2, r0, #31
   d682c:	2111      	movs	r1, #17
   d682e:	4620      	mov	r0, r4
}
   d6830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// set output power: 0=min, 31=max
// this results in a "weaker" transmitted signal, and directly results in a lower RSSI at the receiver
void RFM69::setPowerLevel(byte powerLevel)
{
  _powerLevel = powerLevel;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | (_powerLevel > 31 ? 31 : _powerLevel));
   d6834:	f7ff bfda 	b.w	d67ec <_ZN5RFM698writeRegEhh>

000d6838 <_ZN5RFM698readRSSIEb>:
    unselect();
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
}

int RFM69::readRSSI(bool forceTrigger) {
   d6838:	b510      	push	{r4, lr}
   d683a:	4604      	mov	r4, r0
  int rssi = 0;
  if (forceTrigger)
   d683c:	b149      	cbz	r1, d6852 <_ZN5RFM698readRSSIEb+0x1a>
  {
    //RSSI trigger not needed if DAGC is in continuous mode
    writeReg(REG_RSSICONFIG, RF_RSSI_START);
   d683e:	2201      	movs	r2, #1
   d6840:	2123      	movs	r1, #35	; 0x23
   d6842:	f7ff ffd3 	bl	d67ec <_ZN5RFM698writeRegEhh>
    while ((readReg(REG_RSSICONFIG) & RF_RSSI_DONE) == 0x00); // Wait for RSSI_Ready
   d6846:	2123      	movs	r1, #35	; 0x23
   d6848:	4620      	mov	r0, r4
   d684a:	f7ff ffbd 	bl	d67c8 <_ZN5RFM697readRegEh>
   d684e:	0783      	lsls	r3, r0, #30
   d6850:	d5f9      	bpl.n	d6846 <_ZN5RFM698readRSSIEb+0xe>
  }
  rssi = -readReg(REG_RSSIVALUE);
   d6852:	2124      	movs	r1, #36	; 0x24
   d6854:	4620      	mov	r0, r4
   d6856:	f7ff ffb7 	bl	d67c8 <_ZN5RFM697readRegEh>
   d685a:	4240      	negs	r0, r0
  rssi >>= 1;
  return rssi;
   d685c:	1040      	asrs	r0, r0, #1
}
   d685e:	bd10      	pop	{r4, pc}

000d6860 <_ZN5RFM6916setHighPowerRegsEb>:
  uint16_t baudRate = 32000000L / speedBPS;;
  
  writeReg(REG_BITRATEMSB, (baudRate >> 8) & 0xFF);
  writeReg(REG_BITRATELSB, (baudRate >> 0) & 0xFF);
}
void RFM69::setHighPowerRegs(bool onOff) {
   d6860:	b538      	push	{r3, r4, r5, lr}
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
   d6862:	2900      	cmp	r1, #0
   d6864:	bf14      	ite	ne
   d6866:	225d      	movne	r2, #93	; 0x5d
   d6868:	2255      	moveq	r2, #85	; 0x55
   d686a:	460c      	mov	r4, r1
   d686c:	215a      	movs	r1, #90	; 0x5a
  uint16_t baudRate = 32000000L / speedBPS;;
  
  writeReg(REG_BITRATEMSB, (baudRate >> 8) & 0xFF);
  writeReg(REG_BITRATELSB, (baudRate >> 0) & 0xFF);
}
void RFM69::setHighPowerRegs(bool onOff) {
   d686e:	4605      	mov	r5, r0
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
   d6870:	f7ff ffbc 	bl	d67ec <_ZN5RFM698writeRegEhh>
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
   d6874:	2c00      	cmp	r4, #0
   d6876:	4628      	mov	r0, r5
   d6878:	bf14      	ite	ne
   d687a:	227c      	movne	r2, #124	; 0x7c
   d687c:	2270      	moveq	r2, #112	; 0x70
   d687e:	215c      	movs	r1, #92	; 0x5c
}
   d6880:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeReg(REG_BITRATEMSB, (baudRate >> 8) & 0xFF);
  writeReg(REG_BITRATELSB, (baudRate >> 0) & 0xFF);
}
void RFM69::setHighPowerRegs(bool onOff) {
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
   d6884:	f7ff bfb2 	b.w	d67ec <_ZN5RFM698writeRegEhh>

000d6888 <_ZN5RFM697setModeEh>:
  writeReg(REG_FRFMID, freqHz >> 8);
  writeReg(REG_FRFLSB, freqHz);
}

void RFM69::setMode(byte newMode)
{
   d6888:	b570      	push	{r4, r5, r6, lr}
	if (newMode == _mode) return; //TODO: can remove this?
   d688a:	4d28      	ldr	r5, [pc, #160]	; (d692c <_ZN5RFM697setModeEh+0xa4>)
   d688c:	782b      	ldrb	r3, [r5, #0]
   d688e:	428b      	cmp	r3, r1
  writeReg(REG_FRFMID, freqHz >> 8);
  writeReg(REG_FRFLSB, freqHz);
}

void RFM69::setMode(byte newMode)
{
   d6890:	4604      	mov	r4, r0
   d6892:	460e      	mov	r6, r1
	if (newMode == _mode) return; //TODO: can remove this?
   d6894:	d049      	beq.n	d692a <_ZN5RFM697setModeEh+0xa2>

	switch (newMode) {
   d6896:	2904      	cmp	r1, #4
   d6898:	d847      	bhi.n	d692a <_ZN5RFM697setModeEh+0xa2>
   d689a:	e8df f001 	tbb	[pc, r1]
   d689e:	2c34      	.short	0x2c34
   d68a0:	1224      	.short	0x1224
   d68a2:	03          	.byte	0x03
   d68a3:	00          	.byte	0x00
		case RF69_MODE_TX:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
   d68a4:	2101      	movs	r1, #1
   d68a6:	f7ff ff8f 	bl	d67c8 <_ZN5RFM697readRegEh>
   d68aa:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d68ae:	f042 020c 	orr.w	r2, r2, #12
   d68b2:	2101      	movs	r1, #1
   d68b4:	4620      	mov	r0, r4
   d68b6:	f7ff ff99 	bl	d67ec <_ZN5RFM698writeRegEhh>
      if (_isRFM69HW) setHighPowerRegs(true);
   d68ba:	7aa3      	ldrb	r3, [r4, #10]
   d68bc:	b363      	cbz	r3, d6918 <_ZN5RFM697setModeEh+0x90>
   d68be:	2101      	movs	r1, #1
   d68c0:	e00d      	b.n	d68de <_ZN5RFM697setModeEh+0x56>
			break;
		case RF69_MODE_RX:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
   d68c2:	2101      	movs	r1, #1
   d68c4:	f7ff ff80 	bl	d67c8 <_ZN5RFM697readRegEh>
   d68c8:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d68cc:	f042 0210 	orr.w	r2, r2, #16
   d68d0:	2101      	movs	r1, #1
   d68d2:	4620      	mov	r0, r4
   d68d4:	f7ff ff8a 	bl	d67ec <_ZN5RFM698writeRegEhh>
      if (_isRFM69HW) setHighPowerRegs(false);
   d68d8:	7aa3      	ldrb	r3, [r4, #10]
   d68da:	b1eb      	cbz	r3, d6918 <_ZN5RFM697setModeEh+0x90>
   d68dc:	2100      	movs	r1, #0
   d68de:	4620      	mov	r0, r4
   d68e0:	f7ff ffbe 	bl	d6860 <_ZN5RFM6916setHighPowerRegsEb>
   d68e4:	e018      	b.n	d6918 <_ZN5RFM697setModeEh+0x90>
			break;
		case RF69_MODE_SYNTH:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SYNTHESIZER);
   d68e6:	2101      	movs	r1, #1
   d68e8:	f7ff ff6e 	bl	d67c8 <_ZN5RFM697readRegEh>
   d68ec:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d68f0:	f042 0208 	orr.w	r2, r2, #8
   d68f4:	e00c      	b.n	d6910 <_ZN5RFM697setModeEh+0x88>
			break;
		case RF69_MODE_STANDBY:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_STANDBY);
   d68f6:	2101      	movs	r1, #1
   d68f8:	f7ff ff66 	bl	d67c8 <_ZN5RFM697readRegEh>
   d68fc:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d6900:	f042 0204 	orr.w	r2, r2, #4
   d6904:	e004      	b.n	d6910 <_ZN5RFM697setModeEh+0x88>
			break;
		case RF69_MODE_SLEEP:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
   d6906:	2101      	movs	r1, #1
   d6908:	f7ff ff5e 	bl	d67c8 <_ZN5RFM697readRegEh>
   d690c:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d6910:	2101      	movs	r1, #1
   d6912:	4620      	mov	r0, r4
   d6914:	f7ff ff6a 	bl	d67ec <_ZN5RFM698writeRegEhh>
		default: return;
	}

	// we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
	while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // Wait for ModeReady
   d6918:	782b      	ldrb	r3, [r5, #0]
   d691a:	b92b      	cbnz	r3, d6928 <_ZN5RFM697setModeEh+0xa0>
   d691c:	2127      	movs	r1, #39	; 0x27
   d691e:	4620      	mov	r0, r4
   d6920:	f7ff ff52 	bl	d67c8 <_ZN5RFM697readRegEh>
   d6924:	0603      	lsls	r3, r0, #24
   d6926:	d5f7      	bpl.n	d6918 <_ZN5RFM697setModeEh+0x90>

	_mode = newMode;
   d6928:	702e      	strb	r6, [r5, #0]
   d692a:	bd70      	pop	{r4, r5, r6, pc}
   d692c:	2003e1a8 	.word	0x2003e1a8

000d6930 <_ZN5RFM6912receiveBeginEv>:
}

void RFM69::isr0() { selfPointer->interruptHandler(); }

void RFM69::receiveBegin() {
  DATALEN = 0;
   d6930:	4a15      	ldr	r2, [pc, #84]	; (d6988 <_ZN5RFM6912receiveBeginEv+0x58>)
   d6932:	2300      	movs	r3, #0
  //digitalWrite(4, 0);
}

void RFM69::isr0() { selfPointer->interruptHandler(); }

void RFM69::receiveBegin() {
   d6934:	b510      	push	{r4, lr}
  DATALEN = 0;
   d6936:	7013      	strb	r3, [r2, #0]
  SENDERID = 0;
   d6938:	4a14      	ldr	r2, [pc, #80]	; (d698c <_ZN5RFM6912receiveBeginEv+0x5c>)
   d693a:	7013      	strb	r3, [r2, #0]
  TARGETID = 0;
   d693c:	4a14      	ldr	r2, [pc, #80]	; (d6990 <_ZN5RFM6912receiveBeginEv+0x60>)
   d693e:	7013      	strb	r3, [r2, #0]
  PAYLOADLEN = 0;
   d6940:	4a14      	ldr	r2, [pc, #80]	; (d6994 <_ZN5RFM6912receiveBeginEv+0x64>)
   d6942:	7013      	strb	r3, [r2, #0]
  ACK_REQUESTED = 0;
   d6944:	4a14      	ldr	r2, [pc, #80]	; (d6998 <_ZN5RFM6912receiveBeginEv+0x68>)
   d6946:	7013      	strb	r3, [r2, #0]
  ACK_RECEIVED = 0;
   d6948:	4a14      	ldr	r2, [pc, #80]	; (d699c <_ZN5RFM6912receiveBeginEv+0x6c>)
   d694a:	7013      	strb	r3, [r2, #0]
  RSSI = 0;
   d694c:	4a14      	ldr	r2, [pc, #80]	; (d69a0 <_ZN5RFM6912receiveBeginEv+0x70>)
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
   d694e:	2128      	movs	r1, #40	; 0x28
  SENDERID = 0;
  TARGETID = 0;
  PAYLOADLEN = 0;
  ACK_REQUESTED = 0;
  ACK_RECEIVED = 0;
  RSSI = 0;
   d6950:	6013      	str	r3, [r2, #0]
  //digitalWrite(4, 0);
}

void RFM69::isr0() { selfPointer->interruptHandler(); }

void RFM69::receiveBegin() {
   d6952:	4604      	mov	r4, r0
  TARGETID = 0;
  PAYLOADLEN = 0;
  ACK_REQUESTED = 0;
  ACK_RECEIVED = 0;
  RSSI = 0;
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
   d6954:	f7ff ff38 	bl	d67c8 <_ZN5RFM697readRegEh>
   d6958:	0743      	lsls	r3, r0, #29
   d695a:	d50a      	bpl.n	d6972 <_ZN5RFM6912receiveBeginEv+0x42>
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
   d695c:	213d      	movs	r1, #61	; 0x3d
   d695e:	4620      	mov	r0, r4
   d6960:	f7ff ff32 	bl	d67c8 <_ZN5RFM697readRegEh>
   d6964:	f040 0204 	orr.w	r2, r0, #4
   d6968:	b2d2      	uxtb	r2, r2
   d696a:	213d      	movs	r1, #61	; 0x3d
   d696c:	4620      	mov	r0, r4
   d696e:	f7ff ff3d 	bl	d67ec <_ZN5RFM698writeRegEhh>
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); //set DIO0 to "PAYLOADREADY" in receive mode
   d6972:	4620      	mov	r0, r4
   d6974:	2125      	movs	r1, #37	; 0x25
   d6976:	2240      	movs	r2, #64	; 0x40
   d6978:	f7ff ff38 	bl	d67ec <_ZN5RFM698writeRegEhh>
  setMode(RF69_MODE_RX);
   d697c:	4620      	mov	r0, r4
   d697e:	2103      	movs	r1, #3
}
   d6980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ACK_RECEIVED = 0;
  RSSI = 0;
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); //set DIO0 to "PAYLOADREADY" in receive mode
  setMode(RF69_MODE_RX);
   d6984:	f7ff bf80 	b.w	d6888 <_ZN5RFM697setModeEh>
   d6988:	2003e1a7 	.word	0x2003e1a7
   d698c:	2003e162 	.word	0x2003e162
   d6990:	2003e160 	.word	0x2003e160
   d6994:	2003e168 	.word	0x2003e168
   d6998:	2003e161 	.word	0x2003e161
   d699c:	2003e169 	.word	0x2003e169
   d69a0:	2003e15c 	.word	0x2003e15c

000d69a4 <_ZN5RFM6911receiveDoneEv>:
}

bool RFM69::receiveDone() {
   d69a4:	b510      	push	{r4, lr}
   d69a6:	4604      	mov	r4, r0
// ATOMIC_BLOCK(ATOMIC_FORCEON)
// {
  noInterrupts(); //re-enabled in unselect() via setMode() or via receiveBegin()
   d69a8:	f001 fb6a 	bl	d8080 <_Z12noInterruptsv>
  if (_mode == RF69_MODE_RX && PAYLOADLEN>0)
   d69ac:	4b0b      	ldr	r3, [pc, #44]	; (d69dc <_ZN5RFM6911receiveDoneEv+0x38>)
   d69ae:	781a      	ldrb	r2, [r3, #0]
   d69b0:	2a03      	cmp	r2, #3
   d69b2:	d102      	bne.n	d69ba <_ZN5RFM6911receiveDoneEv+0x16>
   d69b4:	4a0a      	ldr	r2, [pc, #40]	; (d69e0 <_ZN5RFM6911receiveDoneEv+0x3c>)
   d69b6:	7812      	ldrb	r2, [r2, #0]
   d69b8:	b952      	cbnz	r2, d69d0 <_ZN5RFM6911receiveDoneEv+0x2c>
  {
    setMode(RF69_MODE_STANDBY); //enables interrupts
    return true;
  }
  else if (_mode == RF69_MODE_RX)  //already in RX no payload yet
   d69ba:	781b      	ldrb	r3, [r3, #0]
   d69bc:	2b03      	cmp	r3, #3
   d69be:	d102      	bne.n	d69c6 <_ZN5RFM6911receiveDoneEv+0x22>
  {
    interrupts(); //explicitly re-enable interrupts
   d69c0:	f001 fb60 	bl	d8084 <_Z10interruptsv>
   d69c4:	e002      	b.n	d69cc <_ZN5RFM6911receiveDoneEv+0x28>
    return false;
  }
  receiveBegin();
   d69c6:	4620      	mov	r0, r4
   d69c8:	f7ff ffb2 	bl	d6930 <_ZN5RFM6912receiveBeginEv>
  return false;
   d69cc:	2000      	movs	r0, #0
   d69ce:	bd10      	pop	{r4, pc}
// ATOMIC_BLOCK(ATOMIC_FORCEON)
// {
  noInterrupts(); //re-enabled in unselect() via setMode() or via receiveBegin()
  if (_mode == RF69_MODE_RX && PAYLOADLEN>0)
  {
    setMode(RF69_MODE_STANDBY); //enables interrupts
   d69d0:	4620      	mov	r0, r4
   d69d2:	2101      	movs	r1, #1
   d69d4:	f7ff ff58 	bl	d6888 <_ZN5RFM697setModeEh>
    return true;
   d69d8:	2001      	movs	r0, #1
    return false;
  }
  receiveBegin();
  return false;
//}
}
   d69da:	bd10      	pop	{r4, pc}
   d69dc:	2003e1a8 	.word	0x2003e1a8
   d69e0:	2003e168 	.word	0x2003e168

000d69e4 <_ZN5RFM6912setHighPowerEb>:
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

void RFM69::setHighPower(bool onOff) {
  _isRFM69HW = onOff;
  writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
   d69e4:	2900      	cmp	r1, #0
void RFM69::promiscuous(bool onOff) {
  _promiscuousMode=onOff;
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

void RFM69::setHighPower(bool onOff) {
   d69e6:	b510      	push	{r4, lr}
   d69e8:	4604      	mov	r4, r0
  _isRFM69HW = onOff;
   d69ea:	7281      	strb	r1, [r0, #10]
  writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
   d69ec:	bf14      	ite	ne
   d69ee:	220f      	movne	r2, #15
   d69f0:	221a      	moveq	r2, #26
   d69f2:	2113      	movs	r1, #19
   d69f4:	f7ff fefa 	bl	d67ec <_ZN5RFM698writeRegEhh>
  if (_isRFM69HW) //turning ON
   d69f8:	7aa3      	ldrb	r3, [r4, #10]
   d69fa:	b143      	cbz	r3, d6a0e <_ZN5RFM6912setHighPowerEb+0x2a>
    writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); //enable P1 & P2 amplifier stages
   d69fc:	2111      	movs	r1, #17
   d69fe:	4620      	mov	r0, r4
   d6a00:	f7ff fee2 	bl	d67c8 <_ZN5RFM697readRegEh>
   d6a04:	f000 021f 	and.w	r2, r0, #31
   d6a08:	f042 0260 	orr.w	r2, r2, #96	; 0x60
   d6a0c:	e002      	b.n	d6a14 <_ZN5RFM6912setHighPowerEb+0x30>
  else
    writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); //enable P0 only
   d6a0e:	7a62      	ldrb	r2, [r4, #9]
   d6a10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   d6a14:	4620      	mov	r0, r4
   d6a16:	2111      	movs	r1, #17
}
   d6a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  _isRFM69HW = onOff;
  writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
  if (_isRFM69HW) //turning ON
    writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); //enable P1 & P2 amplifier stages
  else
    writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); //enable P0 only
   d6a1c:	f7ff bee6 	b.w	d67ec <_ZN5RFM698writeRegEhh>

000d6a20 <_ZN5RFM6916interruptHandlerEv>:
	while (digitalRead(_interruptPin) == 0 && millis()-txStart < RF69_TX_LIMIT_MS); //wait for DIO0 to turn HIGH signalling transmission finish
  //while (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT == 0x00); // Wait for ModeReady
  setMode(RF69_MODE_STANDBY);
}

void RFM69::interruptHandler() {
   d6a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  //pinMode(4, OUTPUT);
  //digitalWrite(4, 1);
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
   d6a24:	4b3d      	ldr	r3, [pc, #244]	; (d6b1c <_ZN5RFM6916interruptHandlerEv+0xfc>)
   d6a26:	781b      	ldrb	r3, [r3, #0]
   d6a28:	2b03      	cmp	r3, #3
	while (digitalRead(_interruptPin) == 0 && millis()-txStart < RF69_TX_LIMIT_MS); //wait for DIO0 to turn HIGH signalling transmission finish
  //while (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT == 0x00); // Wait for ModeReady
  setMode(RF69_MODE_STANDBY);
}

void RFM69::interruptHandler() {
   d6a2a:	4604      	mov	r4, r0
  //pinMode(4, OUTPUT);
  //digitalWrite(4, 1);
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
   d6a2c:	d114      	bne.n	d6a58 <_ZN5RFM6916interruptHandlerEv+0x38>
   d6a2e:	2128      	movs	r1, #40	; 0x28
   d6a30:	f7ff feca 	bl	d67c8 <_ZN5RFM697readRegEh>
   d6a34:	0743      	lsls	r3, r0, #29
   d6a36:	d417      	bmi.n	d6a68 <_ZN5RFM6916interruptHandlerEv+0x48>
   d6a38:	e00e      	b.n	d6a58 <_ZN5RFM6916interruptHandlerEv+0x38>

    for (byte i= 0; i < DATALEN; i++)
    {
      DATA[i] = SPI1.transfer(0);
    }
    if (DATALEN<RF69_MAX_DATA_LEN) DATA[DATALEN]=0; //add null at end of string
   d6a3a:	7813      	ldrb	r3, [r2, #0]
   d6a3c:	2b3c      	cmp	r3, #60	; 0x3c
   d6a3e:	d804      	bhi.n	d6a4a <_ZN5RFM6916interruptHandlerEv+0x2a>
   d6a40:	7813      	ldrb	r3, [r2, #0]
   d6a42:	4a37      	ldr	r2, [pc, #220]	; (d6b20 <_ZN5RFM6916interruptHandlerEv+0x100>)
   d6a44:	b2db      	uxtb	r3, r3
   d6a46:	2100      	movs	r1, #0
   d6a48:	54d1      	strb	r1, [r2, r3]
    unselect();
   d6a4a:	4620      	mov	r0, r4
   d6a4c:	f7ff fe7a 	bl	d6744 <_ZN5RFM698unselectEv>
    setMode(RF69_MODE_RX);
   d6a50:	2103      	movs	r1, #3
   d6a52:	4620      	mov	r0, r4
   d6a54:	f7ff ff18 	bl	d6888 <_ZN5RFM697setModeEh>
  }
  RSSI = readRSSI();
   d6a58:	2100      	movs	r1, #0
   d6a5a:	4620      	mov	r0, r4
   d6a5c:	f7ff feec 	bl	d6838 <_ZN5RFM698readRSSIEb>
   d6a60:	4b30      	ldr	r3, [pc, #192]	; (d6b24 <_ZN5RFM6916interruptHandlerEv+0x104>)
   d6a62:	6018      	str	r0, [r3, #0]
   d6a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  //pinMode(4, OUTPUT);
  //digitalWrite(4, 1);
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
  {
    //RSSI = readRSSI();
    setMode(RF69_MODE_STANDBY);
   d6a68:	2101      	movs	r1, #1
   d6a6a:	4620      	mov	r0, r4
   d6a6c:	f7ff ff0c 	bl	d6888 <_ZN5RFM697setModeEh>
    select();
   d6a70:	4620      	mov	r0, r4
   d6a72:	f7ff fe90 	bl	d6796 <_ZN5RFM696selectEv>
    SPI1.transfer(REG_FIFO & 0x7f);
   d6a76:	2000      	movs	r0, #0
   d6a78:	f7ff fe84 	bl	d6784 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
    PAYLOADLEN = SPI1.transfer(0);
   d6a7c:	2000      	movs	r0, #0
   d6a7e:	f7ff fe81 	bl	d6784 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d6a82:	4d29      	ldr	r5, [pc, #164]	; (d6b28 <_ZN5RFM6916interruptHandlerEv+0x108>)
   d6a84:	7028      	strb	r0, [r5, #0]
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
   d6a86:	782b      	ldrb	r3, [r5, #0]
   d6a88:	2b42      	cmp	r3, #66	; 0x42
   d6a8a:	d814      	bhi.n	d6ab6 <_ZN5RFM6916interruptHandlerEv+0x96>
   d6a8c:	782b      	ldrb	r3, [r5, #0]
   d6a8e:	b2db      	uxtb	r3, r3
    TARGETID = SPI1.transfer(0);
   d6a90:	2000      	movs	r0, #0
    //RSSI = readRSSI();
    setMode(RF69_MODE_STANDBY);
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
   d6a92:	702b      	strb	r3, [r5, #0]
    TARGETID = SPI1.transfer(0);
   d6a94:	f7ff fe76 	bl	d6784 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d6a98:	4b24      	ldr	r3, [pc, #144]	; (d6b2c <_ZN5RFM6916interruptHandlerEv+0x10c>)
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
   d6a9a:	7a22      	ldrb	r2, [r4, #8]
    setMode(RF69_MODE_STANDBY);
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
    TARGETID = SPI1.transfer(0);
   d6a9c:	7018      	strb	r0, [r3, #0]
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
   d6a9e:	b932      	cbnz	r2, d6aae <_ZN5RFM6916interruptHandlerEv+0x8e>
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
    TARGETID = SPI1.transfer(0);
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
   d6aa0:	781a      	ldrb	r2, [r3, #0]
   d6aa2:	79e1      	ldrb	r1, [r4, #7]
   d6aa4:	4291      	cmp	r1, r2
   d6aa6:	d002      	beq.n	d6aae <_ZN5RFM6916interruptHandlerEv+0x8e>
   d6aa8:	781b      	ldrb	r3, [r3, #0]
   d6aaa:	2bff      	cmp	r3, #255	; 0xff
   d6aac:	d105      	bne.n	d6aba <_ZN5RFM6916interruptHandlerEv+0x9a>
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
   d6aae:	782b      	ldrb	r3, [r5, #0]
   d6ab0:	2b02      	cmp	r3, #2
   d6ab2:	d902      	bls.n	d6aba <_ZN5RFM6916interruptHandlerEv+0x9a>
   d6ab4:	e00b      	b.n	d6ace <_ZN5RFM6916interruptHandlerEv+0xae>
    //RSSI = readRSSI();
    setMode(RF69_MODE_STANDBY);
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
   d6ab6:	2342      	movs	r3, #66	; 0x42
   d6ab8:	e7ea      	b.n	d6a90 <_ZN5RFM6916interruptHandlerEv+0x70>
    TARGETID = SPI1.transfer(0);
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
    {
      PAYLOADLEN = 0;
      unselect();
   d6aba:	4620      	mov	r0, r4
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
    TARGETID = SPI1.transfer(0);
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
    {
      PAYLOADLEN = 0;
   d6abc:	2300      	movs	r3, #0
   d6abe:	702b      	strb	r3, [r5, #0]
      unselect();
   d6ac0:	f7ff fe40 	bl	d6744 <_ZN5RFM698unselectEv>
      receiveBegin();
   d6ac4:	4620      	mov	r0, r4
    unselect();
    setMode(RF69_MODE_RX);
  }
  RSSI = readRSSI();
  //digitalWrite(4, 0);
}
   d6ac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
    {
      PAYLOADLEN = 0;
      unselect();
      receiveBegin();
   d6aca:	f7ff bf31 	b.w	d6930 <_ZN5RFM6912receiveBeginEv>
      //digitalWrite(4, 0);
      return;
    }

    DATALEN = PAYLOADLEN - 3;
   d6ace:	4b16      	ldr	r3, [pc, #88]	; (d6b28 <_ZN5RFM6916interruptHandlerEv+0x108>)
   d6ad0:	4e17      	ldr	r6, [pc, #92]	; (d6b30 <_ZN5RFM6916interruptHandlerEv+0x110>)
   d6ad2:	781b      	ldrb	r3, [r3, #0]
    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag

    for (byte i= 0; i < DATALEN; i++)
    {
      DATA[i] = SPI1.transfer(0);
   d6ad4:	4f12      	ldr	r7, [pc, #72]	; (d6b20 <_ZN5RFM6916interruptHandlerEv+0x100>)
      receiveBegin();
      //digitalWrite(4, 0);
      return;
    }

    DATALEN = PAYLOADLEN - 3;
   d6ad6:	3b03      	subs	r3, #3
   d6ad8:	b2db      	uxtb	r3, r3
    SENDERID = SPI1.transfer(0);
   d6ada:	2000      	movs	r0, #0
      receiveBegin();
      //digitalWrite(4, 0);
      return;
    }

    DATALEN = PAYLOADLEN - 3;
   d6adc:	7033      	strb	r3, [r6, #0]
    SENDERID = SPI1.transfer(0);
   d6ade:	f7ff fe51 	bl	d6784 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d6ae2:	4b14      	ldr	r3, [pc, #80]	; (d6b34 <_ZN5RFM6916interruptHandlerEv+0x114>)
   d6ae4:	7018      	strb	r0, [r3, #0]
    byte CTLbyte = SPI1.transfer(0);
   d6ae6:	2000      	movs	r0, #0
   d6ae8:	f7ff fe4c 	bl	d6784 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>

    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
   d6aec:	4a12      	ldr	r2, [pc, #72]	; (d6b38 <_ZN5RFM6916interruptHandlerEv+0x118>)
   d6aee:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
   d6af2:	b2db      	uxtb	r3, r3
   d6af4:	7013      	strb	r3, [r2, #0]
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag
   d6af6:	f000 0040 	and.w	r0, r0, #64	; 0x40
   d6afa:	4b10      	ldr	r3, [pc, #64]	; (d6b3c <_ZN5RFM6916interruptHandlerEv+0x11c>)
   d6afc:	b2c0      	uxtb	r0, r0
   d6afe:	7018      	strb	r0, [r3, #0]
   d6b00:	2300      	movs	r3, #0

    for (byte i= 0; i < DATALEN; i++)
   d6b02:	7831      	ldrb	r1, [r6, #0]
   d6b04:	4a0a      	ldr	r2, [pc, #40]	; (d6b30 <_ZN5RFM6916interruptHandlerEv+0x110>)
   d6b06:	b2dd      	uxtb	r5, r3
   d6b08:	428d      	cmp	r5, r1
   d6b0a:	f103 0801 	add.w	r8, r3, #1
   d6b0e:	d294      	bcs.n	d6a3a <_ZN5RFM6916interruptHandlerEv+0x1a>
    {
      DATA[i] = SPI1.transfer(0);
   d6b10:	2000      	movs	r0, #0
   d6b12:	f7ff fe37 	bl	d6784 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
    byte CTLbyte = SPI1.transfer(0);

    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag

    for (byte i= 0; i < DATALEN; i++)
   d6b16:	4643      	mov	r3, r8
    {
      DATA[i] = SPI1.transfer(0);
   d6b18:	5578      	strb	r0, [r7, r5]
    byte CTLbyte = SPI1.transfer(0);

    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag

    for (byte i= 0; i < DATALEN; i++)
   d6b1a:	e7f2      	b.n	d6b02 <_ZN5RFM6916interruptHandlerEv+0xe2>
   d6b1c:	2003e1a8 	.word	0x2003e1a8
   d6b20:	2003e16a 	.word	0x2003e16a
   d6b24:	2003e15c 	.word	0x2003e15c
   d6b28:	2003e168 	.word	0x2003e168
   d6b2c:	2003e160 	.word	0x2003e160
   d6b30:	2003e1a7 	.word	0x2003e1a7
   d6b34:	2003e162 	.word	0x2003e162
   d6b38:	2003e169 	.word	0x2003e169
   d6b3c:	2003e161 	.word	0x2003e161

000d6b40 <_ZN5RFM697encryptEPKc>:
}

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM69::encrypt(const char* key) {
   d6b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6b42:	460d      	mov	r5, r1
  setMode(RF69_MODE_STANDBY);
   d6b44:	2101      	movs	r1, #1
}

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM69::encrypt(const char* key) {
   d6b46:	4604      	mov	r4, r0
  setMode(RF69_MODE_STANDBY);
   d6b48:	f7ff fe9e 	bl	d6888 <_ZN5RFM697setModeEh>
  if (key!=0)
   d6b4c:	b18d      	cbz	r5, d6b72 <_ZN5RFM697encryptEPKc+0x32>
  {
    select();
   d6b4e:	4620      	mov	r0, r4
   d6b50:	f7ff fe21 	bl	d6796 <_ZN5RFM696selectEv>
    SPI1.transfer(REG_AESKEY1 | 0x80);
   d6b54:	20be      	movs	r0, #190	; 0xbe
   d6b56:	f7ff fe15 	bl	d6784 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d6b5a:	1e6e      	subs	r6, r5, #1
   d6b5c:	f105 070f 	add.w	r7, r5, #15
    for (byte i = 0; i<16; i++)
      SPI1.transfer(key[i]);
   d6b60:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   d6b64:	f7ff fe0e 	bl	d6784 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  setMode(RF69_MODE_STANDBY);
  if (key!=0)
  {
    select();
    SPI1.transfer(REG_AESKEY1 | 0x80);
    for (byte i = 0; i<16; i++)
   d6b68:	42be      	cmp	r6, r7
   d6b6a:	d1f9      	bne.n	d6b60 <_ZN5RFM697encryptEPKc+0x20>
      SPI1.transfer(key[i]);
    unselect();
   d6b6c:	4620      	mov	r0, r4
   d6b6e:	f7ff fde9 	bl	d6744 <_ZN5RFM698unselectEv>
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
   d6b72:	213d      	movs	r1, #61	; 0x3d
   d6b74:	4620      	mov	r0, r4
   d6b76:	f7ff fe27 	bl	d67c8 <_ZN5RFM697readRegEh>
   d6b7a:	f020 0001 	bic.w	r0, r0, #1
   d6b7e:	2d00      	cmp	r5, #0
   d6b80:	bf0c      	ite	eq
   d6b82:	4602      	moveq	r2, r0
   d6b84:	f040 0201 	orrne.w	r2, r0, #1
   d6b88:	b2d2      	uxtb	r2, r2
   d6b8a:	4620      	mov	r0, r4
   d6b8c:	213d      	movs	r1, #61	; 0x3d
}
   d6b8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    SPI1.transfer(REG_AESKEY1 | 0x80);
    for (byte i = 0; i<16; i++)
      SPI1.transfer(key[i]);
    unselect();
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
   d6b92:	f7ff be2b 	b.w	d67ec <_ZN5RFM698writeRegEhh>
	...

000d6b98 <_ZN5RFM6910initializeEhhh>:
volatile byte RFM69::ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
volatile int RFM69::RSSI; //most accurate RSSI during reception (closest to the reception)
RFM69* RFM69::selfPointer;

bool RFM69::initialize(byte freqBand, byte nodeID, byte networkID)
{
   d6b98:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6b9a:	b08f      	sub	sp, #60	; 0x3c
   d6b9c:	460d      	mov	r5, r1
   d6b9e:	4604      	mov	r4, r0
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d6ba0:	2100      	movs	r1, #0
volatile byte RFM69::ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
volatile int RFM69::RSSI; //most accurate RSSI during reception (closest to the reception)
RFM69* RFM69::selfPointer;

bool RFM69::initialize(byte freqBand, byte nodeID, byte networkID)
{
   d6ba2:	4616      	mov	r6, r2
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d6ba4:	a803      	add	r0, sp, #12
   d6ba6:	222a      	movs	r2, #42	; 0x2a
volatile byte RFM69::ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
volatile int RFM69::RSSI; //most accurate RSSI during reception (closest to the reception)
RFM69* RFM69::selfPointer;

bool RFM69::initialize(byte freqBand, byte nodeID, byte networkID)
{
   d6ba8:	461f      	mov	r7, r3
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d6baa:	f002 fea5 	bl	d98f8 <memset>
   d6bae:	2301      	movs	r3, #1
   d6bb0:	f88d 300c 	strb.w	r3, [sp, #12]
   d6bb4:	2303      	movs	r3, #3
   d6bb6:	f88d 3010 	strb.w	r3, [sp, #16]
   d6bba:	f88d 3015 	strb.w	r3, [sp, #21]
   d6bbe:	2306      	movs	r3, #6
   d6bc0:	f88d 3016 	strb.w	r3, [sp, #22]
   d6bc4:	2333      	movs	r3, #51	; 0x33
   d6bc6:	f88d 3017 	strb.w	r3, [sp, #23]
   d6bca:	2307      	movs	r3, #7
   d6bcc:	f88d 3018 	strb.w	r3, [sp, #24]
   d6bd0:	2308      	movs	r3, #8
   d6bd2:	f88d 301a 	strb.w	r3, [sp, #26]
   d6bd6:	2309      	movs	r3, #9
   d6bd8:	f88d 301c 	strb.w	r3, [sp, #28]
   d6bdc:	2319      	movs	r3, #25
   d6bde:	f88d 301e 	strb.w	r3, [sp, #30]
   d6be2:	2325      	movs	r3, #37	; 0x25
   d6be4:	f88d 3020 	strb.w	r3, [sp, #32]
   d6be8:	2329      	movs	r3, #41	; 0x29
   d6bea:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   d6bee:	23dc      	movs	r3, #220	; 0xdc
   d6bf0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   d6bf4:	232e      	movs	r3, #46	; 0x2e
   d6bf6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d6bfa:	2388      	movs	r3, #136	; 0x88
   d6bfc:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   d6c00:	232f      	movs	r3, #47	; 0x2f
   d6c02:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   d6c06:	232d      	movs	r3, #45	; 0x2d
   d6c08:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   d6c0c:	2337      	movs	r3, #55	; 0x37
   d6c0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   d6c12:	2390      	movs	r3, #144	; 0x90
   d6c14:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d6c18:	2338      	movs	r3, #56	; 0x38
   d6c1a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   d6c1e:	233c      	movs	r3, #60	; 0x3c
   d6c20:	2204      	movs	r2, #4
   d6c22:	2102      	movs	r1, #2
   d6c24:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
   d6c28:	238f      	movs	r3, #143	; 0x8f
   d6c2a:	f88d 200d 	strb.w	r2, [sp, #13]
   d6c2e:	f88d 100e 	strb.w	r1, [sp, #14]
   d6c32:	f88d 1011 	strb.w	r1, [sp, #17]
   d6c36:	f88d 2012 	strb.w	r2, [sp, #18]
   d6c3a:	2105      	movs	r1, #5
   d6c3c:	2240      	movs	r2, #64	; 0x40
   d6c3e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   d6c42:	233d      	movs	r3, #61	; 0x3d
   d6c44:	f88d 2013 	strb.w	r2, [sp, #19]
   d6c48:	f88d 1014 	strb.w	r1, [sp, #20]
   d6c4c:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
   d6c50:	2142      	movs	r1, #66	; 0x42
   d6c52:	2230      	movs	r2, #48	; 0x30
   d6c54:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   d6c58:	2312      	movs	r3, #18
   d6c5a:	f88d 101f 	strb.w	r1, [sp, #31]
   d6c5e:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   d6c62:	f88d 102d 	strb.w	r1, [sp, #45]	; 0x2d
   d6c66:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   d6c6a:	236f      	movs	r3, #111	; 0x6f
   d6c6c:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   d6c70:	2d1f      	cmp	r5, #31
   d6c72:	f04f 03ff 	mov.w	r3, #255	; 0xff
   d6c76:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   d6c7a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   d6c7e:	d006      	beq.n	d6c8e <_ZN5RFM6910initializeEhhh+0xf6>
   d6c80:	2d2b      	cmp	r5, #43	; 0x2b
   d6c82:	d006      	beq.n	d6c92 <_ZN5RFM6910initializeEhhh+0xfa>
   d6c84:	2d56      	cmp	r5, #86	; 0x56
   d6c86:	bf0c      	ite	eq
   d6c88:	22d9      	moveq	r2, #217	; 0xd9
   d6c8a:	22e4      	movne	r2, #228	; 0xe4
   d6c8c:	e002      	b.n	d6c94 <_ZN5RFM6910initializeEhhh+0xfc>
   d6c8e:	224e      	movs	r2, #78	; 0x4e
   d6c90:	e000      	b.n	d6c94 <_ZN5RFM6910initializeEhhh+0xfc>
   d6c92:	226c      	movs	r2, #108	; 0x6c
   d6c94:	2d1f      	cmp	r5, #31
   d6c96:	f88d 2019 	strb.w	r2, [sp, #25]
   d6c9a:	d006      	beq.n	d6caa <_ZN5RFM6910initializeEhhh+0x112>
   d6c9c:	2d2b      	cmp	r5, #43	; 0x2b
   d6c9e:	d006      	beq.n	d6cae <_ZN5RFM6910initializeEhhh+0x116>
   d6ca0:	2d56      	cmp	r5, #86	; 0x56
   d6ca2:	bf14      	ite	ne
   d6ca4:	22c0      	movne	r2, #192	; 0xc0
   d6ca6:	2200      	moveq	r2, #0
   d6ca8:	e002      	b.n	d6cb0 <_ZN5RFM6910initializeEhhh+0x118>
   d6caa:	22c0      	movs	r2, #192	; 0xc0
   d6cac:	e000      	b.n	d6cb0 <_ZN5RFM6910initializeEhhh+0x118>
   d6cae:	2240      	movs	r2, #64	; 0x40

  pinMode(_slaveSelectPin, OUTPUT);
   d6cb0:	2101      	movs	r1, #1
   d6cb2:	7920      	ldrb	r0, [r4, #4]
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d6cb4:	f88d 201b 	strb.w	r2, [sp, #27]
   d6cb8:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29

  pinMode(_slaveSelectPin, OUTPUT);
   d6cbc:	f001 ff9e 	bl	d8bfc <pinMode>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d6cc0:	f7ff fd4a 	bl	d6758 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d6cc4:	f000 fc36 	bl	d7534 <_ZN8SPIClass5beginEv>
   d6cc8:	f000 f952 	bl	d6f70 <HAL_Timer_Get_Milli_Seconds>
   d6ccc:	4605      	mov	r5, r0
  // Set time out to 50ms
  #define TIME_OUT 50
  
  start_to = millis() ;

  do writeReg(REG_SYNCVALUE1, 0xaa); while (readReg(REG_SYNCVALUE1) != 0xaa && millis()-start_to < TIME_OUT);
   d6cce:	22aa      	movs	r2, #170	; 0xaa
   d6cd0:	212f      	movs	r1, #47	; 0x2f
   d6cd2:	4620      	mov	r0, r4
   d6cd4:	f7ff fd8a 	bl	d67ec <_ZN5RFM698writeRegEhh>
   d6cd8:	212f      	movs	r1, #47	; 0x2f
   d6cda:	4620      	mov	r0, r4
   d6cdc:	f7ff fd74 	bl	d67c8 <_ZN5RFM697readRegEh>
   d6ce0:	28aa      	cmp	r0, #170	; 0xaa
   d6ce2:	d004      	beq.n	d6cee <_ZN5RFM6910initializeEhhh+0x156>
   d6ce4:	f000 f944 	bl	d6f70 <HAL_Timer_Get_Milli_Seconds>
   d6ce8:	1b40      	subs	r0, r0, r5
   d6cea:	2831      	cmp	r0, #49	; 0x31
   d6cec:	d9ef      	bls.n	d6cce <_ZN5RFM6910initializeEhhh+0x136>
   d6cee:	f000 f93f 	bl	d6f70 <HAL_Timer_Get_Milli_Seconds>
  if (millis()-start_to >= TIME_OUT) return (false);
   d6cf2:	1b40      	subs	r0, r0, r5
   d6cf4:	2831      	cmp	r0, #49	; 0x31
   d6cf6:	d82d      	bhi.n	d6d54 <_ZN5RFM6910initializeEhhh+0x1bc>
   d6cf8:	f000 f93a 	bl	d6f70 <HAL_Timer_Get_Milli_Seconds>
   d6cfc:	4605      	mov	r5, r0
    
  // Set time out 
  start_to = millis()  ;  
	do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis()-start_to < TIME_OUT);
   d6cfe:	2255      	movs	r2, #85	; 0x55
   d6d00:	212f      	movs	r1, #47	; 0x2f
   d6d02:	4620      	mov	r0, r4
   d6d04:	f7ff fd72 	bl	d67ec <_ZN5RFM698writeRegEhh>
   d6d08:	212f      	movs	r1, #47	; 0x2f
   d6d0a:	4620      	mov	r0, r4
   d6d0c:	f7ff fd5c 	bl	d67c8 <_ZN5RFM697readRegEh>
   d6d10:	2855      	cmp	r0, #85	; 0x55
   d6d12:	d021      	beq.n	d6d58 <_ZN5RFM6910initializeEhhh+0x1c0>
   d6d14:	f000 f92c 	bl	d6f70 <HAL_Timer_Get_Milli_Seconds>
   d6d18:	1b40      	subs	r0, r0, r5
   d6d1a:	2831      	cmp	r0, #49	; 0x31
   d6d1c:	d9ef      	bls.n	d6cfe <_ZN5RFM6910initializeEhhh+0x166>
   d6d1e:	e01b      	b.n	d6d58 <_ZN5RFM6910initializeEhhh+0x1c0>
  for (byte i = 0; CONFIG[i][0] != 255; i++)
    writeReg(CONFIG[i][0], CONFIG[i][1]);

  // Encryption is persistent between resets and can trip you up during debugging.
  // Disable it during initialization so we always start from a known state.
  encrypt(0);
   d6d20:	2100      	movs	r1, #0
   d6d22:	4620      	mov	r0, r4
   d6d24:	f7ff ff0c 	bl	d6b40 <_ZN5RFM697encryptEPKc>

  setHighPower(_isRFM69HW); //called regardless if it's a RFM69W or RFM69HW
   d6d28:	7aa1      	ldrb	r1, [r4, #10]
   d6d2a:	4620      	mov	r0, r4
   d6d2c:	f7ff fe5a 	bl	d69e4 <_ZN5RFM6912setHighPowerEb>
  setMode(RF69_MODE_STANDBY);
   d6d30:	2101      	movs	r1, #1
   d6d32:	4620      	mov	r0, r4
   d6d34:	f7ff fda8 	bl	d6888 <_ZN5RFM697setModeEh>
   d6d38:	f000 f91a 	bl	d6f70 <HAL_Timer_Get_Milli_Seconds>
   d6d3c:	4605      	mov	r5, r0
  // Set time out 
  start_to = millis() ;
	while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis()-start_to < TIME_OUT); // Wait for ModeReady
   d6d3e:	2127      	movs	r1, #39	; 0x27
   d6d40:	4620      	mov	r0, r4
   d6d42:	f7ff fd41 	bl	d67c8 <_ZN5RFM697readRegEh>
   d6d46:	0603      	lsls	r3, r0, #24
   d6d48:	d51b      	bpl.n	d6d82 <_ZN5RFM6910initializeEhhh+0x1ea>
   d6d4a:	f000 f911 	bl	d6f70 <HAL_Timer_Get_Milli_Seconds>
  if (millis()-start_to >= TIME_OUT) return (false);
   d6d4e:	1b40      	subs	r0, r0, r5
   d6d50:	2831      	cmp	r0, #49	; 0x31
   d6d52:	d91c      	bls.n	d6d8e <_ZN5RFM6910initializeEhhh+0x1f6>
  // picking a non-interrupt enabled pin will prevent proper initialization
  // code thanks to @ScruffR - https://community.particle.io/t/how-to-make-rfm69-work-on-photon-solved-new-library-rfm69-particle/26497/93?u=bloukingfisher
  if (!attachInterrupt(_interruptNum, RFM69::isr0, RISING)) return false;
   d6d54:	2000      	movs	r0, #0
   d6d56:	e028      	b.n	d6daa <_ZN5RFM6910initializeEhhh+0x212>
   d6d58:	f000 f90a 	bl	d6f70 <HAL_Timer_Get_Milli_Seconds>
  if (millis()-start_to >= TIME_OUT) return (false);
    
  // Set time out 
  start_to = millis()  ;  
	do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis()-start_to < TIME_OUT);
  if (millis()-start_to >= TIME_OUT) return (false);
   d6d5c:	1b40      	subs	r0, r0, r5
   d6d5e:	2831      	cmp	r0, #49	; 0x31
   d6d60:	d8f8      	bhi.n	d6d54 <_ZN5RFM6910initializeEhhh+0x1bc>
   d6d62:	2500      	movs	r5, #0
  for (byte i = 0; CONFIG[i][0] != 255; i++)
   d6d64:	b2eb      	uxtb	r3, r5
   d6d66:	aa0e      	add	r2, sp, #56	; 0x38
   d6d68:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d6d6c:	3501      	adds	r5, #1
   d6d6e:	f813 1c2c 	ldrb.w	r1, [r3, #-44]
   d6d72:	29ff      	cmp	r1, #255	; 0xff
   d6d74:	d0d4      	beq.n	d6d20 <_ZN5RFM6910initializeEhhh+0x188>
    writeReg(CONFIG[i][0], CONFIG[i][1]);
   d6d76:	f813 2c2b 	ldrb.w	r2, [r3, #-43]
   d6d7a:	4620      	mov	r0, r4
   d6d7c:	f7ff fd36 	bl	d67ec <_ZN5RFM698writeRegEhh>
    
  // Set time out 
  start_to = millis()  ;  
	do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis()-start_to < TIME_OUT);
  if (millis()-start_to >= TIME_OUT) return (false);
  for (byte i = 0; CONFIG[i][0] != 255; i++)
   d6d80:	e7f0      	b.n	d6d64 <_ZN5RFM6910initializeEhhh+0x1cc>
   d6d82:	f000 f8f5 	bl	d6f70 <HAL_Timer_Get_Milli_Seconds>

  setHighPower(_isRFM69HW); //called regardless if it's a RFM69W or RFM69HW
  setMode(RF69_MODE_STANDBY);
  // Set time out 
  start_to = millis() ;
	while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis()-start_to < TIME_OUT); // Wait for ModeReady
   d6d86:	1b40      	subs	r0, r0, r5
   d6d88:	2831      	cmp	r0, #49	; 0x31
   d6d8a:	d9d8      	bls.n	d6d3e <_ZN5RFM6910initializeEhhh+0x1a6>
   d6d8c:	e7dd      	b.n	d6d4a <_ZN5RFM6910initializeEhhh+0x1b2>
  if (millis()-start_to >= TIME_OUT) return (false);
  // picking a non-interrupt enabled pin will prevent proper initialization
  // code thanks to @ScruffR - https://community.particle.io/t/how-to-make-rfm69-work-on-photon-solved-new-library-rfm69-particle/26497/93?u=bloukingfisher
  if (!attachInterrupt(_interruptNum, RFM69::isr0, RISING)) return false;
   d6d8e:	2300      	movs	r3, #0
   d6d90:	9300      	str	r3, [sp, #0]
   d6d92:	79a0      	ldrb	r0, [r4, #6]
   d6d94:	4906      	ldr	r1, [pc, #24]	; (d6db0 <_ZN5RFM6910initializeEhhh+0x218>)
   d6d96:	f04f 33ff 	mov.w	r3, #4294967295
   d6d9a:	2201      	movs	r2, #1
   d6d9c:	f001 f948 	bl	d8030 <_Z15attachInterrupttPFvvE13InterruptModeah>
   d6da0:	2800      	cmp	r0, #0
   d6da2:	d0d7      	beq.n	d6d54 <_ZN5RFM6910initializeEhhh+0x1bc>

  selfPointer = this;
   d6da4:	4b03      	ldr	r3, [pc, #12]	; (d6db4 <_ZN5RFM6910initializeEhhh+0x21c>)
  _address = nodeID;
   d6da6:	71e6      	strb	r6, [r4, #7]
  if (millis()-start_to >= TIME_OUT) return (false);
  // picking a non-interrupt enabled pin will prevent proper initialization
  // code thanks to @ScruffR - https://community.particle.io/t/how-to-make-rfm69-work-on-photon-solved-new-library-rfm69-particle/26497/93?u=bloukingfisher
  if (!attachInterrupt(_interruptNum, RFM69::isr0, RISING)) return false;

  selfPointer = this;
   d6da8:	601c      	str	r4, [r3, #0]
  _address = nodeID;
  return true;
}
   d6daa:	b00f      	add	sp, #60	; 0x3c
   d6dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6dae:	bf00      	nop
   d6db0:	000d6735 	.word	0x000d6735
   d6db4:	2003e164 	.word	0x2003e164

000d6db8 <_GLOBAL__sub_I__ZN5RFM694DATAE>:
   d6db8:	f000 b812 	b.w	d6de0 <HAL_Pin_Map>

000d6dbc <_GLOBAL__sub_I__ZN9RFM69_ATC18ACK_RSSI_REQUESTEDE>:
   d6dbc:	f000 b810 	b.w	d6de0 <HAL_Pin_Map>

000d6dc0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6dc0:	b508      	push	{r3, lr}
   d6dc2:	4b02      	ldr	r3, [pc, #8]	; (d6dcc <netdb_freeaddrinfo+0xc>)
   d6dc4:	681b      	ldr	r3, [r3, #0]
   d6dc6:	689b      	ldr	r3, [r3, #8]
   d6dc8:	9301      	str	r3, [sp, #4]
   d6dca:	bd08      	pop	{r3, pc}
   d6dcc:	00030268 	.word	0x00030268

000d6dd0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6dd0:	b508      	push	{r3, lr}
   d6dd2:	4b02      	ldr	r3, [pc, #8]	; (d6ddc <netdb_getaddrinfo+0xc>)
   d6dd4:	681b      	ldr	r3, [r3, #0]
   d6dd6:	68db      	ldr	r3, [r3, #12]
   d6dd8:	9301      	str	r3, [sp, #4]
   d6dda:	bd08      	pop	{r3, pc}
   d6ddc:	00030268 	.word	0x00030268

000d6de0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d6de0:	b508      	push	{r3, lr}
   d6de2:	4b02      	ldr	r3, [pc, #8]	; (d6dec <HAL_Pin_Map+0xc>)
   d6de4:	681b      	ldr	r3, [r3, #0]
   d6de6:	681b      	ldr	r3, [r3, #0]
   d6de8:	9301      	str	r3, [sp, #4]
   d6dea:	bd08      	pop	{r3, pc}
   d6dec:	0003022c 	.word	0x0003022c

000d6df0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6df0:	b508      	push	{r3, lr}
   d6df2:	4b02      	ldr	r3, [pc, #8]	; (d6dfc <HAL_Pin_Mode+0xc>)
   d6df4:	681b      	ldr	r3, [r3, #0]
   d6df6:	689b      	ldr	r3, [r3, #8]
   d6df8:	9301      	str	r3, [sp, #4]
   d6dfa:	bd08      	pop	{r3, pc}
   d6dfc:	0003022c 	.word	0x0003022c

000d6e00 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6e00:	b508      	push	{r3, lr}
   d6e02:	4b02      	ldr	r3, [pc, #8]	; (d6e0c <HAL_Get_Pin_Mode+0xc>)
   d6e04:	681b      	ldr	r3, [r3, #0]
   d6e06:	68db      	ldr	r3, [r3, #12]
   d6e08:	9301      	str	r3, [sp, #4]
   d6e0a:	bd08      	pop	{r3, pc}
   d6e0c:	0003022c 	.word	0x0003022c

000d6e10 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6e10:	b508      	push	{r3, lr}
   d6e12:	4b02      	ldr	r3, [pc, #8]	; (d6e1c <HAL_GPIO_Write+0xc>)
   d6e14:	681b      	ldr	r3, [r3, #0]
   d6e16:	691b      	ldr	r3, [r3, #16]
   d6e18:	9301      	str	r3, [sp, #4]
   d6e1a:	bd08      	pop	{r3, pc}
   d6e1c:	0003022c 	.word	0x0003022c

000d6e20 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d6e20:	b508      	push	{r3, lr}
   d6e22:	4b02      	ldr	r3, [pc, #8]	; (d6e2c <HAL_GPIO_Read+0xc>)
   d6e24:	681b      	ldr	r3, [r3, #0]
   d6e26:	695b      	ldr	r3, [r3, #20]
   d6e28:	9301      	str	r3, [sp, #4]
   d6e2a:	bd08      	pop	{r3, pc}
   d6e2c:	0003022c 	.word	0x0003022c

000d6e30 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d6e30:	b508      	push	{r3, lr}
   d6e32:	4b02      	ldr	r3, [pc, #8]	; (d6e3c <HAL_Interrupts_Attach+0xc>)
   d6e34:	681b      	ldr	r3, [r3, #0]
   d6e36:	699b      	ldr	r3, [r3, #24]
   d6e38:	9301      	str	r3, [sp, #4]
   d6e3a:	bd08      	pop	{r3, pc}
   d6e3c:	0003022c 	.word	0x0003022c

000d6e40 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d6e40:	b508      	push	{r3, lr}
   d6e42:	4b02      	ldr	r3, [pc, #8]	; (d6e4c <HAL_Interrupts_Detach+0xc>)
   d6e44:	681b      	ldr	r3, [r3, #0]
   d6e46:	69db      	ldr	r3, [r3, #28]
   d6e48:	9301      	str	r3, [sp, #4]
   d6e4a:	bd08      	pop	{r3, pc}
   d6e4c:	0003022c 	.word	0x0003022c

000d6e50 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d6e50:	b508      	push	{r3, lr}
   d6e52:	4b02      	ldr	r3, [pc, #8]	; (d6e5c <HAL_Interrupts_Enable_All+0xc>)
   d6e54:	681b      	ldr	r3, [r3, #0]
   d6e56:	6a1b      	ldr	r3, [r3, #32]
   d6e58:	9301      	str	r3, [sp, #4]
   d6e5a:	bd08      	pop	{r3, pc}
   d6e5c:	0003022c 	.word	0x0003022c

000d6e60 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d6e60:	b508      	push	{r3, lr}
   d6e62:	4b02      	ldr	r3, [pc, #8]	; (d6e6c <HAL_Interrupts_Disable_All+0xc>)
   d6e64:	681b      	ldr	r3, [r3, #0]
   d6e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6e68:	9301      	str	r3, [sp, #4]
   d6e6a:	bd08      	pop	{r3, pc}
   d6e6c:	0003022c 	.word	0x0003022c

000d6e70 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d6e70:	b508      	push	{r3, lr}
   d6e72:	4b02      	ldr	r3, [pc, #8]	; (d6e7c <HAL_SPI_Begin+0xc>)
   d6e74:	681b      	ldr	r3, [r3, #0]
   d6e76:	681b      	ldr	r3, [r3, #0]
   d6e78:	9301      	str	r3, [sp, #4]
   d6e7a:	bd08      	pop	{r3, pc}
   d6e7c:	00030230 	.word	0x00030230

000d6e80 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d6e80:	b508      	push	{r3, lr}
   d6e82:	4b02      	ldr	r3, [pc, #8]	; (d6e8c <HAL_SPI_Set_Bit_Order+0xc>)
   d6e84:	681b      	ldr	r3, [r3, #0]
   d6e86:	689b      	ldr	r3, [r3, #8]
   d6e88:	9301      	str	r3, [sp, #4]
   d6e8a:	bd08      	pop	{r3, pc}
   d6e8c:	00030230 	.word	0x00030230

000d6e90 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d6e90:	b508      	push	{r3, lr}
   d6e92:	4b02      	ldr	r3, [pc, #8]	; (d6e9c <HAL_SPI_Set_Data_Mode+0xc>)
   d6e94:	681b      	ldr	r3, [r3, #0]
   d6e96:	68db      	ldr	r3, [r3, #12]
   d6e98:	9301      	str	r3, [sp, #4]
   d6e9a:	bd08      	pop	{r3, pc}
   d6e9c:	00030230 	.word	0x00030230

000d6ea0 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d6ea0:	b508      	push	{r3, lr}
   d6ea2:	4b02      	ldr	r3, [pc, #8]	; (d6eac <HAL_SPI_Set_Clock_Divider+0xc>)
   d6ea4:	681b      	ldr	r3, [r3, #0]
   d6ea6:	691b      	ldr	r3, [r3, #16]
   d6ea8:	9301      	str	r3, [sp, #4]
   d6eaa:	bd08      	pop	{r3, pc}
   d6eac:	00030230 	.word	0x00030230

000d6eb0 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d6eb0:	b508      	push	{r3, lr}
   d6eb2:	4b02      	ldr	r3, [pc, #8]	; (d6ebc <HAL_SPI_Send_Receive_Data+0xc>)
   d6eb4:	681b      	ldr	r3, [r3, #0]
   d6eb6:	695b      	ldr	r3, [r3, #20]
   d6eb8:	9301      	str	r3, [sp, #4]
   d6eba:	bd08      	pop	{r3, pc}
   d6ebc:	00030230 	.word	0x00030230

000d6ec0 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d6ec0:	b508      	push	{r3, lr}
   d6ec2:	4b02      	ldr	r3, [pc, #8]	; (d6ecc <HAL_SPI_Init+0xc>)
   d6ec4:	681b      	ldr	r3, [r3, #0]
   d6ec6:	69db      	ldr	r3, [r3, #28]
   d6ec8:	9301      	str	r3, [sp, #4]
   d6eca:	bd08      	pop	{r3, pc}
   d6ecc:	00030230 	.word	0x00030230

000d6ed0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d6ed0:	b508      	push	{r3, lr}
   d6ed2:	4b02      	ldr	r3, [pc, #8]	; (d6edc <HAL_SPI_Is_Enabled+0xc>)
   d6ed4:	681b      	ldr	r3, [r3, #0]
   d6ed6:	6a1b      	ldr	r3, [r3, #32]
   d6ed8:	9301      	str	r3, [sp, #4]
   d6eda:	bd08      	pop	{r3, pc}
   d6edc:	00030230 	.word	0x00030230

000d6ee0 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d6ee0:	b508      	push	{r3, lr}
   d6ee2:	4b02      	ldr	r3, [pc, #8]	; (d6eec <HAL_SPI_Info+0xc>)
   d6ee4:	681b      	ldr	r3, [r3, #0]
   d6ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6ee8:	9301      	str	r3, [sp, #4]
   d6eea:	bd08      	pop	{r3, pc}
   d6eec:	00030230 	.word	0x00030230

000d6ef0 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d6ef0:	b508      	push	{r3, lr}
   d6ef2:	4b02      	ldr	r3, [pc, #8]	; (d6efc <HAL_SPI_DMA_Transfer+0xc>)
   d6ef4:	681b      	ldr	r3, [r3, #0]
   d6ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6ef8:	9301      	str	r3, [sp, #4]
   d6efa:	bd08      	pop	{r3, pc}
   d6efc:	00030230 	.word	0x00030230

000d6f00 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d6f00:	b508      	push	{r3, lr}
   d6f02:	4b02      	ldr	r3, [pc, #8]	; (d6f0c <HAL_SPI_DMA_Transfer_Status+0xc>)
   d6f04:	681b      	ldr	r3, [r3, #0]
   d6f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6f08:	9301      	str	r3, [sp, #4]
   d6f0a:	bd08      	pop	{r3, pc}
   d6f0c:	00030230 	.word	0x00030230

000d6f10 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d6f10:	b508      	push	{r3, lr}
   d6f12:	4b02      	ldr	r3, [pc, #8]	; (d6f1c <HAL_SPI_Set_Settings+0xc>)
   d6f14:	681b      	ldr	r3, [r3, #0]
   d6f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6f18:	9301      	str	r3, [sp, #4]
   d6f1a:	bd08      	pop	{r3, pc}
   d6f1c:	00030230 	.word	0x00030230

000d6f20 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d6f20:	b508      	push	{r3, lr}
   d6f22:	4b02      	ldr	r3, [pc, #8]	; (d6f2c <HAL_SPI_Acquire+0xc>)
   d6f24:	681b      	ldr	r3, [r3, #0]
   d6f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6f28:	9301      	str	r3, [sp, #4]
   d6f2a:	bd08      	pop	{r3, pc}
   d6f2c:	00030230 	.word	0x00030230

000d6f30 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d6f30:	b508      	push	{r3, lr}
   d6f32:	4b02      	ldr	r3, [pc, #8]	; (d6f3c <HAL_SPI_Release+0xc>)
   d6f34:	681b      	ldr	r3, [r3, #0]
   d6f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6f38:	9301      	str	r3, [sp, #4]
   d6f3a:	bd08      	pop	{r3, pc}
   d6f3c:	00030230 	.word	0x00030230

000d6f40 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d6f40:	b508      	push	{r3, lr}
   d6f42:	4b02      	ldr	r3, [pc, #8]	; (d6f4c <if_index_to_name+0xc>)
   d6f44:	681b      	ldr	r3, [r3, #0]
   d6f46:	695b      	ldr	r3, [r3, #20]
   d6f48:	9301      	str	r3, [sp, #4]
   d6f4a:	bd08      	pop	{r3, pc}
   d6f4c:	0003026c 	.word	0x0003026c

000d6f50 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6f50:	b508      	push	{r3, lr}
   d6f52:	4b02      	ldr	r3, [pc, #8]	; (d6f5c <HAL_RNG_GetRandomNumber+0xc>)
   d6f54:	681b      	ldr	r3, [r3, #0]
   d6f56:	685b      	ldr	r3, [r3, #4]
   d6f58:	9301      	str	r3, [sp, #4]
   d6f5a:	bd08      	pop	{r3, pc}
   d6f5c:	00030218 	.word	0x00030218

000d6f60 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d6f60:	b508      	push	{r3, lr}
   d6f62:	4b02      	ldr	r3, [pc, #8]	; (d6f6c <HAL_Timer_Get_Micro_Seconds+0xc>)
   d6f64:	681b      	ldr	r3, [r3, #0]
   d6f66:	691b      	ldr	r3, [r3, #16]
   d6f68:	9301      	str	r3, [sp, #4]
   d6f6a:	bd08      	pop	{r3, pc}
   d6f6c:	00030218 	.word	0x00030218

000d6f70 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6f70:	b508      	push	{r3, lr}
   d6f72:	4b02      	ldr	r3, [pc, #8]	; (d6f7c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6f74:	681b      	ldr	r3, [r3, #0]
   d6f76:	695b      	ldr	r3, [r3, #20]
   d6f78:	9301      	str	r3, [sp, #4]
   d6f7a:	bd08      	pop	{r3, pc}
   d6f7c:	00030218 	.word	0x00030218

000d6f80 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d6f80:	b508      	push	{r3, lr}
   d6f82:	4b02      	ldr	r3, [pc, #8]	; (d6f8c <HAL_RTC_Get_UnixTime+0xc>)
   d6f84:	681b      	ldr	r3, [r3, #0]
   d6f86:	69db      	ldr	r3, [r3, #28]
   d6f88:	9301      	str	r3, [sp, #4]
   d6f8a:	bd08      	pop	{r3, pc}
   d6f8c:	00030218 	.word	0x00030218

000d6f90 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d6f90:	b508      	push	{r3, lr}
   d6f92:	4b02      	ldr	r3, [pc, #8]	; (d6f9c <HAL_EEPROM_Init+0xc>)
   d6f94:	681b      	ldr	r3, [r3, #0]
   d6f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6f98:	9301      	str	r3, [sp, #4]
   d6f9a:	bd08      	pop	{r3, pc}
   d6f9c:	00030218 	.word	0x00030218

000d6fa0 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d6fa0:	b508      	push	{r3, lr}
   d6fa2:	4b02      	ldr	r3, [pc, #8]	; (d6fac <HAL_EEPROM_Get+0xc>)
   d6fa4:	681b      	ldr	r3, [r3, #0]
   d6fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6fa8:	9301      	str	r3, [sp, #4]
   d6faa:	bd08      	pop	{r3, pc}
   d6fac:	00030218 	.word	0x00030218

000d6fb0 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d6fb0:	b508      	push	{r3, lr}
   d6fb2:	4b02      	ldr	r3, [pc, #8]	; (d6fbc <HAL_EEPROM_Put+0xc>)
   d6fb4:	681b      	ldr	r3, [r3, #0]
   d6fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6fb8:	9301      	str	r3, [sp, #4]
   d6fba:	bd08      	pop	{r3, pc}
   d6fbc:	00030218 	.word	0x00030218

000d6fc0 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d6fc0:	b508      	push	{r3, lr}
   d6fc2:	4b02      	ldr	r3, [pc, #8]	; (d6fcc <HAL_RTC_Time_Is_Valid+0xc>)
   d6fc4:	681b      	ldr	r3, [r3, #0]
   d6fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6fc8:	9301      	str	r3, [sp, #4]
   d6fca:	bd08      	pop	{r3, pc}
   d6fcc:	00030218 	.word	0x00030218

000d6fd0 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d6fd0:	b508      	push	{r3, lr}
   d6fd2:	4b02      	ldr	r3, [pc, #8]	; (d6fdc <os_thread_is_current+0xc>)
   d6fd4:	681b      	ldr	r3, [r3, #0]
   d6fd6:	689b      	ldr	r3, [r3, #8]
   d6fd8:	9301      	str	r3, [sp, #4]
   d6fda:	bd08      	pop	{r3, pc}
   d6fdc:	00030248 	.word	0x00030248

000d6fe0 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d6fe0:	b508      	push	{r3, lr}
   d6fe2:	4b02      	ldr	r3, [pc, #8]	; (d6fec <os_thread_yield+0xc>)
   d6fe4:	681b      	ldr	r3, [r3, #0]
   d6fe6:	68db      	ldr	r3, [r3, #12]
   d6fe8:	9301      	str	r3, [sp, #4]
   d6fea:	bd08      	pop	{r3, pc}
   d6fec:	00030248 	.word	0x00030248

000d6ff0 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d6ff0:	b508      	push	{r3, lr}
   d6ff2:	4b02      	ldr	r3, [pc, #8]	; (d6ffc <os_thread_join+0xc>)
   d6ff4:	681b      	ldr	r3, [r3, #0]
   d6ff6:	691b      	ldr	r3, [r3, #16]
   d6ff8:	9301      	str	r3, [sp, #4]
   d6ffa:	bd08      	pop	{r3, pc}
   d6ffc:	00030248 	.word	0x00030248

000d7000 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d7000:	b508      	push	{r3, lr}
   d7002:	4b02      	ldr	r3, [pc, #8]	; (d700c <os_thread_cleanup+0xc>)
   d7004:	681b      	ldr	r3, [r3, #0]
   d7006:	695b      	ldr	r3, [r3, #20]
   d7008:	9301      	str	r3, [sp, #4]
   d700a:	bd08      	pop	{r3, pc}
   d700c:	00030248 	.word	0x00030248

000d7010 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d7010:	b508      	push	{r3, lr}
   d7012:	4b02      	ldr	r3, [pc, #8]	; (d701c <os_thread_scheduling+0xc>)
   d7014:	681b      	ldr	r3, [r3, #0]
   d7016:	69db      	ldr	r3, [r3, #28]
   d7018:	9301      	str	r3, [sp, #4]
   d701a:	bd08      	pop	{r3, pc}
   d701c:	00030248 	.word	0x00030248

000d7020 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d7020:	b508      	push	{r3, lr}
   d7022:	4b02      	ldr	r3, [pc, #8]	; (d702c <os_timer_create+0xc>)
   d7024:	681b      	ldr	r3, [r3, #0]
   d7026:	6a1b      	ldr	r3, [r3, #32]
   d7028:	9301      	str	r3, [sp, #4]
   d702a:	bd08      	pop	{r3, pc}
   d702c:	00030248 	.word	0x00030248

000d7030 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d7030:	b508      	push	{r3, lr}
   d7032:	4b02      	ldr	r3, [pc, #8]	; (d703c <os_timer_destroy+0xc>)
   d7034:	681b      	ldr	r3, [r3, #0]
   d7036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7038:	9301      	str	r3, [sp, #4]
   d703a:	bd08      	pop	{r3, pc}
   d703c:	00030248 	.word	0x00030248

000d7040 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d7040:	b508      	push	{r3, lr}
   d7042:	4b02      	ldr	r3, [pc, #8]	; (d704c <os_timer_get_id+0xc>)
   d7044:	681b      	ldr	r3, [r3, #0]
   d7046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7048:	9301      	str	r3, [sp, #4]
   d704a:	bd08      	pop	{r3, pc}
   d704c:	00030248 	.word	0x00030248

000d7050 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d7050:	b508      	push	{r3, lr}
   d7052:	4b02      	ldr	r3, [pc, #8]	; (d705c <os_timer_change+0xc>)
   d7054:	681b      	ldr	r3, [r3, #0]
   d7056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7058:	9301      	str	r3, [sp, #4]
   d705a:	bd08      	pop	{r3, pc}
   d705c:	00030248 	.word	0x00030248

000d7060 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7060:	b508      	push	{r3, lr}
   d7062:	4b02      	ldr	r3, [pc, #8]	; (d706c <os_mutex_recursive_create+0xc>)
   d7064:	681b      	ldr	r3, [r3, #0]
   d7066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7068:	9301      	str	r3, [sp, #4]
   d706a:	bd08      	pop	{r3, pc}
   d706c:	00030248 	.word	0x00030248

000d7070 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d7070:	b508      	push	{r3, lr}
   d7072:	4b02      	ldr	r3, [pc, #8]	; (d707c <os_mutex_recursive_destroy+0xc>)
   d7074:	681b      	ldr	r3, [r3, #0]
   d7076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7078:	9301      	str	r3, [sp, #4]
   d707a:	bd08      	pop	{r3, pc}
   d707c:	00030248 	.word	0x00030248

000d7080 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d7080:	b508      	push	{r3, lr}
   d7082:	4b02      	ldr	r3, [pc, #8]	; (d708c <os_timer_set_id+0xc>)
   d7084:	681b      	ldr	r3, [r3, #0]
   d7086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d7088:	9301      	str	r3, [sp, #4]
   d708a:	bd08      	pop	{r3, pc}
   d708c:	00030248 	.word	0x00030248

000d7090 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7090:	b508      	push	{r3, lr}
   d7092:	4b02      	ldr	r3, [pc, #8]	; (d709c <inet_inet_ntop+0xc>)
   d7094:	681b      	ldr	r3, [r3, #0]
   d7096:	695b      	ldr	r3, [r3, #20]
   d7098:	9301      	str	r3, [sp, #4]
   d709a:	bd08      	pop	{r3, pc}
   d709c:	00030264 	.word	0x00030264

000d70a0 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d70a0:	b508      	push	{r3, lr}
   d70a2:	4b02      	ldr	r3, [pc, #8]	; (d70ac <inet_htonl+0xc>)
   d70a4:	681b      	ldr	r3, [r3, #0]
   d70a6:	6a1b      	ldr	r3, [r3, #32]
   d70a8:	9301      	str	r3, [sp, #4]
   d70aa:	bd08      	pop	{r3, pc}
   d70ac:	00030264 	.word	0x00030264

000d70b0 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d70b0:	b508      	push	{r3, lr}
   d70b2:	4b02      	ldr	r3, [pc, #8]	; (d70bc <inet_htons+0xc>)
   d70b4:	681b      	ldr	r3, [r3, #0]
   d70b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d70b8:	9301      	str	r3, [sp, #4]
   d70ba:	bd08      	pop	{r3, pc}
   d70bc:	00030264 	.word	0x00030264

000d70c0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d70c0:	b508      	push	{r3, lr}
   d70c2:	4b02      	ldr	r3, [pc, #8]	; (d70cc <HAL_USART_Init+0xc>)
   d70c4:	681b      	ldr	r3, [r3, #0]
   d70c6:	681b      	ldr	r3, [r3, #0]
   d70c8:	9301      	str	r3, [sp, #4]
   d70ca:	bd08      	pop	{r3, pc}
   d70cc:	0003023c 	.word	0x0003023c

000d70d0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d70d0:	b508      	push	{r3, lr}
   d70d2:	4b02      	ldr	r3, [pc, #8]	; (d70dc <HAL_USART_Write_Data+0xc>)
   d70d4:	681b      	ldr	r3, [r3, #0]
   d70d6:	68db      	ldr	r3, [r3, #12]
   d70d8:	9301      	str	r3, [sp, #4]
   d70da:	bd08      	pop	{r3, pc}
   d70dc:	0003023c 	.word	0x0003023c

000d70e0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d70e0:	b508      	push	{r3, lr}
   d70e2:	4b02      	ldr	r3, [pc, #8]	; (d70ec <HAL_USART_Available_Data+0xc>)
   d70e4:	681b      	ldr	r3, [r3, #0]
   d70e6:	691b      	ldr	r3, [r3, #16]
   d70e8:	9301      	str	r3, [sp, #4]
   d70ea:	bd08      	pop	{r3, pc}
   d70ec:	0003023c 	.word	0x0003023c

000d70f0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d70f0:	b508      	push	{r3, lr}
   d70f2:	4b02      	ldr	r3, [pc, #8]	; (d70fc <HAL_USART_Read_Data+0xc>)
   d70f4:	681b      	ldr	r3, [r3, #0]
   d70f6:	695b      	ldr	r3, [r3, #20]
   d70f8:	9301      	str	r3, [sp, #4]
   d70fa:	bd08      	pop	{r3, pc}
   d70fc:	0003023c 	.word	0x0003023c

000d7100 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d7100:	b508      	push	{r3, lr}
   d7102:	4b02      	ldr	r3, [pc, #8]	; (d710c <HAL_USART_Peek_Data+0xc>)
   d7104:	681b      	ldr	r3, [r3, #0]
   d7106:	699b      	ldr	r3, [r3, #24]
   d7108:	9301      	str	r3, [sp, #4]
   d710a:	bd08      	pop	{r3, pc}
   d710c:	0003023c 	.word	0x0003023c

000d7110 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d7110:	b508      	push	{r3, lr}
   d7112:	4b02      	ldr	r3, [pc, #8]	; (d711c <HAL_USART_Flush_Data+0xc>)
   d7114:	681b      	ldr	r3, [r3, #0]
   d7116:	69db      	ldr	r3, [r3, #28]
   d7118:	9301      	str	r3, [sp, #4]
   d711a:	bd08      	pop	{r3, pc}
   d711c:	0003023c 	.word	0x0003023c

000d7120 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d7120:	b508      	push	{r3, lr}
   d7122:	4b02      	ldr	r3, [pc, #8]	; (d712c <HAL_USART_Is_Enabled+0xc>)
   d7124:	681b      	ldr	r3, [r3, #0]
   d7126:	6a1b      	ldr	r3, [r3, #32]
   d7128:	9301      	str	r3, [sp, #4]
   d712a:	bd08      	pop	{r3, pc}
   d712c:	0003023c 	.word	0x0003023c

000d7130 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d7130:	b508      	push	{r3, lr}
   d7132:	4b02      	ldr	r3, [pc, #8]	; (d713c <HAL_USART_Available_Data_For_Write+0xc>)
   d7134:	681b      	ldr	r3, [r3, #0]
   d7136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7138:	9301      	str	r3, [sp, #4]
   d713a:	bd08      	pop	{r3, pc}
   d713c:	0003023c 	.word	0x0003023c

000d7140 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d7140:	b508      	push	{r3, lr}
   d7142:	4b02      	ldr	r3, [pc, #8]	; (d714c <HAL_I2C_Begin_Transmission+0xc>)
   d7144:	681b      	ldr	r3, [r3, #0]
   d7146:	699b      	ldr	r3, [r3, #24]
   d7148:	9301      	str	r3, [sp, #4]
   d714a:	bd08      	pop	{r3, pc}
   d714c:	00030228 	.word	0x00030228

000d7150 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d7150:	b508      	push	{r3, lr}
   d7152:	4b02      	ldr	r3, [pc, #8]	; (d715c <HAL_I2C_End_Transmission+0xc>)
   d7154:	681b      	ldr	r3, [r3, #0]
   d7156:	69db      	ldr	r3, [r3, #28]
   d7158:	9301      	str	r3, [sp, #4]
   d715a:	bd08      	pop	{r3, pc}
   d715c:	00030228 	.word	0x00030228

000d7160 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d7160:	b508      	push	{r3, lr}
   d7162:	4b02      	ldr	r3, [pc, #8]	; (d716c <HAL_I2C_Write_Data+0xc>)
   d7164:	681b      	ldr	r3, [r3, #0]
   d7166:	6a1b      	ldr	r3, [r3, #32]
   d7168:	9301      	str	r3, [sp, #4]
   d716a:	bd08      	pop	{r3, pc}
   d716c:	00030228 	.word	0x00030228

000d7170 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d7170:	b508      	push	{r3, lr}
   d7172:	4b02      	ldr	r3, [pc, #8]	; (d717c <HAL_I2C_Available_Data+0xc>)
   d7174:	681b      	ldr	r3, [r3, #0]
   d7176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7178:	9301      	str	r3, [sp, #4]
   d717a:	bd08      	pop	{r3, pc}
   d717c:	00030228 	.word	0x00030228

000d7180 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d7180:	b508      	push	{r3, lr}
   d7182:	4b02      	ldr	r3, [pc, #8]	; (d718c <HAL_I2C_Read_Data+0xc>)
   d7184:	681b      	ldr	r3, [r3, #0]
   d7186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7188:	9301      	str	r3, [sp, #4]
   d718a:	bd08      	pop	{r3, pc}
   d718c:	00030228 	.word	0x00030228

000d7190 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d7190:	b508      	push	{r3, lr}
   d7192:	4b02      	ldr	r3, [pc, #8]	; (d719c <HAL_I2C_Peek_Data+0xc>)
   d7194:	681b      	ldr	r3, [r3, #0]
   d7196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7198:	9301      	str	r3, [sp, #4]
   d719a:	bd08      	pop	{r3, pc}
   d719c:	00030228 	.word	0x00030228

000d71a0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d71a0:	b508      	push	{r3, lr}
   d71a2:	4b02      	ldr	r3, [pc, #8]	; (d71ac <HAL_I2C_Flush_Data+0xc>)
   d71a4:	681b      	ldr	r3, [r3, #0]
   d71a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d71a8:	9301      	str	r3, [sp, #4]
   d71aa:	bd08      	pop	{r3, pc}
   d71ac:	00030228 	.word	0x00030228

000d71b0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d71b0:	b508      	push	{r3, lr}
   d71b2:	4b02      	ldr	r3, [pc, #8]	; (d71bc <HAL_I2C_Is_Enabled+0xc>)
   d71b4:	681b      	ldr	r3, [r3, #0]
   d71b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d71b8:	9301      	str	r3, [sp, #4]
   d71ba:	bd08      	pop	{r3, pc}
   d71bc:	00030228 	.word	0x00030228

000d71c0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d71c0:	b508      	push	{r3, lr}
   d71c2:	4b02      	ldr	r3, [pc, #8]	; (d71cc <HAL_I2C_Init+0xc>)
   d71c4:	681b      	ldr	r3, [r3, #0]
   d71c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d71c8:	9301      	str	r3, [sp, #4]
   d71ca:	bd08      	pop	{r3, pc}
   d71cc:	00030228 	.word	0x00030228

000d71d0 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d71d0:	b508      	push	{r3, lr}
   d71d2:	4b02      	ldr	r3, [pc, #8]	; (d71dc <HAL_I2C_Acquire+0xc>)
   d71d4:	681b      	ldr	r3, [r3, #0]
   d71d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d71d8:	9301      	str	r3, [sp, #4]
   d71da:	bd08      	pop	{r3, pc}
   d71dc:	00030228 	.word	0x00030228

000d71e0 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d71e0:	b508      	push	{r3, lr}
   d71e2:	4b02      	ldr	r3, [pc, #8]	; (d71ec <HAL_I2C_Release+0xc>)
   d71e4:	681b      	ldr	r3, [r3, #0]
   d71e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d71e8:	9301      	str	r3, [sp, #4]
   d71ea:	bd08      	pop	{r3, pc}
   d71ec:	00030228 	.word	0x00030228

000d71f0 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d71f0:	b508      	push	{r3, lr}
   d71f2:	4b02      	ldr	r3, [pc, #8]	; (d71fc <HAL_I2C_Request_Data_Ex+0xc>)
   d71f4:	681b      	ldr	r3, [r3, #0]
   d71f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d71f8:	9301      	str	r3, [sp, #4]
   d71fa:	bd08      	pop	{r3, pc}
   d71fc:	00030228 	.word	0x00030228

000d7200 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d7200:	b508      	push	{r3, lr}
   d7202:	4b02      	ldr	r3, [pc, #8]	; (d720c <sock_setsockopt+0xc>)
   d7204:	681b      	ldr	r3, [r3, #0]
   d7206:	699b      	ldr	r3, [r3, #24]
   d7208:	9301      	str	r3, [sp, #4]
   d720a:	bd08      	pop	{r3, pc}
   d720c:	00030238 	.word	0x00030238

000d7210 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d7210:	b508      	push	{r3, lr}
   d7212:	4b02      	ldr	r3, [pc, #8]	; (d721c <sock_close+0xc>)
   d7214:	681b      	ldr	r3, [r3, #0]
   d7216:	69db      	ldr	r3, [r3, #28]
   d7218:	9301      	str	r3, [sp, #4]
   d721a:	bd08      	pop	{r3, pc}
   d721c:	00030238 	.word	0x00030238

000d7220 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d7220:	b508      	push	{r3, lr}
   d7222:	4b02      	ldr	r3, [pc, #8]	; (d722c <sock_connect+0xc>)
   d7224:	681b      	ldr	r3, [r3, #0]
   d7226:	6a1b      	ldr	r3, [r3, #32]
   d7228:	9301      	str	r3, [sp, #4]
   d722a:	bd08      	pop	{r3, pc}
   d722c:	00030238 	.word	0x00030238

000d7230 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d7230:	b508      	push	{r3, lr}
   d7232:	4b02      	ldr	r3, [pc, #8]	; (d723c <sock_recv+0xc>)
   d7234:	681b      	ldr	r3, [r3, #0]
   d7236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7238:	9301      	str	r3, [sp, #4]
   d723a:	bd08      	pop	{r3, pc}
   d723c:	00030238 	.word	0x00030238

000d7240 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d7240:	b508      	push	{r3, lr}
   d7242:	4b02      	ldr	r3, [pc, #8]	; (d724c <sock_send+0xc>)
   d7244:	681b      	ldr	r3, [r3, #0]
   d7246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7248:	9301      	str	r3, [sp, #4]
   d724a:	bd08      	pop	{r3, pc}
   d724c:	00030238 	.word	0x00030238

000d7250 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d7250:	b508      	push	{r3, lr}
   d7252:	4b02      	ldr	r3, [pc, #8]	; (d725c <sock_socket+0xc>)
   d7254:	681b      	ldr	r3, [r3, #0]
   d7256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7258:	9301      	str	r3, [sp, #4]
   d725a:	bd08      	pop	{r3, pc}
   d725c:	00030238 	.word	0x00030238

000d7260 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d7260:	b508      	push	{r3, lr}
   d7262:	4b02      	ldr	r3, [pc, #8]	; (d726c <HAL_USB_USART_Init+0xc>)
   d7264:	681b      	ldr	r3, [r3, #0]
   d7266:	681b      	ldr	r3, [r3, #0]
   d7268:	9301      	str	r3, [sp, #4]
   d726a:	bd08      	pop	{r3, pc}
   d726c:	0003024c 	.word	0x0003024c

000d7270 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d7270:	b508      	push	{r3, lr}
   d7272:	4b02      	ldr	r3, [pc, #8]	; (d727c <HAL_USB_USART_Begin+0xc>)
   d7274:	681b      	ldr	r3, [r3, #0]
   d7276:	685b      	ldr	r3, [r3, #4]
   d7278:	9301      	str	r3, [sp, #4]
   d727a:	bd08      	pop	{r3, pc}
   d727c:	0003024c 	.word	0x0003024c

000d7280 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d7280:	b508      	push	{r3, lr}
   d7282:	4b02      	ldr	r3, [pc, #8]	; (d728c <HAL_USB_USART_Available_Data+0xc>)
   d7284:	681b      	ldr	r3, [r3, #0]
   d7286:	691b      	ldr	r3, [r3, #16]
   d7288:	9301      	str	r3, [sp, #4]
   d728a:	bd08      	pop	{r3, pc}
   d728c:	0003024c 	.word	0x0003024c

000d7290 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d7290:	b508      	push	{r3, lr}
   d7292:	4b02      	ldr	r3, [pc, #8]	; (d729c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d7294:	681b      	ldr	r3, [r3, #0]
   d7296:	695b      	ldr	r3, [r3, #20]
   d7298:	9301      	str	r3, [sp, #4]
   d729a:	bd08      	pop	{r3, pc}
   d729c:	0003024c 	.word	0x0003024c

000d72a0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d72a0:	b508      	push	{r3, lr}
   d72a2:	4b02      	ldr	r3, [pc, #8]	; (d72ac <HAL_USB_USART_Receive_Data+0xc>)
   d72a4:	681b      	ldr	r3, [r3, #0]
   d72a6:	699b      	ldr	r3, [r3, #24]
   d72a8:	9301      	str	r3, [sp, #4]
   d72aa:	bd08      	pop	{r3, pc}
   d72ac:	0003024c 	.word	0x0003024c

000d72b0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d72b0:	b508      	push	{r3, lr}
   d72b2:	4b02      	ldr	r3, [pc, #8]	; (d72bc <HAL_USB_USART_Send_Data+0xc>)
   d72b4:	681b      	ldr	r3, [r3, #0]
   d72b6:	69db      	ldr	r3, [r3, #28]
   d72b8:	9301      	str	r3, [sp, #4]
   d72ba:	bd08      	pop	{r3, pc}
   d72bc:	0003024c 	.word	0x0003024c

000d72c0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d72c0:	b508      	push	{r3, lr}
   d72c2:	4b02      	ldr	r3, [pc, #8]	; (d72cc <HAL_USB_USART_Flush_Data+0xc>)
   d72c4:	681b      	ldr	r3, [r3, #0]
   d72c6:	6a1b      	ldr	r3, [r3, #32]
   d72c8:	9301      	str	r3, [sp, #4]
   d72ca:	bd08      	pop	{r3, pc}
   d72cc:	0003024c 	.word	0x0003024c

000d72d0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d72d0:	b508      	push	{r3, lr}
   d72d2:	4b02      	ldr	r3, [pc, #8]	; (d72dc <log_message+0xc>)
   d72d4:	681b      	ldr	r3, [r3, #0]
   d72d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d72d8:	9301      	str	r3, [sp, #4]
   d72da:	bd08      	pop	{r3, pc}
   d72dc:	00030260 	.word	0x00030260

000d72e0 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d72e0:	b508      	push	{r3, lr}
   d72e2:	4b02      	ldr	r3, [pc, #8]	; (d72ec <system_mode+0xc>)
   d72e4:	681b      	ldr	r3, [r3, #0]
   d72e6:	681b      	ldr	r3, [r3, #0]
   d72e8:	9301      	str	r3, [sp, #4]
   d72ea:	bd08      	pop	{r3, pc}
   d72ec:	00030220 	.word	0x00030220

000d72f0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d72f0:	b508      	push	{r3, lr}
   d72f2:	4b02      	ldr	r3, [pc, #8]	; (d72fc <set_system_mode+0xc>)
   d72f4:	681b      	ldr	r3, [r3, #0]
   d72f6:	685b      	ldr	r3, [r3, #4]
   d72f8:	9301      	str	r3, [sp, #4]
   d72fa:	bd08      	pop	{r3, pc}
   d72fc:	00030220 	.word	0x00030220

000d7300 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d7300:	b508      	push	{r3, lr}
   d7302:	4b02      	ldr	r3, [pc, #8]	; (d730c <system_delay_ms+0xc>)
   d7304:	681b      	ldr	r3, [r3, #0]
   d7306:	695b      	ldr	r3, [r3, #20]
   d7308:	9301      	str	r3, [sp, #4]
   d730a:	bd08      	pop	{r3, pc}
   d730c:	00030220 	.word	0x00030220

000d7310 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d7310:	b508      	push	{r3, lr}
   d7312:	4b02      	ldr	r3, [pc, #8]	; (d731c <system_thread_set_state+0xc>)
   d7314:	681b      	ldr	r3, [r3, #0]
   d7316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7318:	9301      	str	r3, [sp, #4]
   d731a:	bd08      	pop	{r3, pc}
   d731c:	00030220 	.word	0x00030220

000d7320 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d7320:	b508      	push	{r3, lr}
   d7322:	4b02      	ldr	r3, [pc, #8]	; (d732c <system_thread_get_state+0xc>)
   d7324:	681b      	ldr	r3, [r3, #0]
   d7326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7328:	9301      	str	r3, [sp, #4]
   d732a:	bd08      	pop	{r3, pc}
   d732c:	00030220 	.word	0x00030220

000d7330 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d7330:	b508      	push	{r3, lr}
   d7332:	4b03      	ldr	r3, [pc, #12]	; (d7340 <system_ctrl_set_app_request_handler+0x10>)
   d7334:	681b      	ldr	r3, [r3, #0]
   d7336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d733a:	9301      	str	r3, [sp, #4]
   d733c:	bd08      	pop	{r3, pc}
   d733e:	0000      	.short	0x0000
   d7340:	00030220 	.word	0x00030220

000d7344 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d7344:	b508      	push	{r3, lr}
   d7346:	4b03      	ldr	r3, [pc, #12]	; (d7354 <system_ctrl_set_result+0x10>)
   d7348:	681b      	ldr	r3, [r3, #0]
   d734a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d734e:	9301      	str	r3, [sp, #4]
   d7350:	bd08      	pop	{r3, pc}
   d7352:	0000      	.short	0x0000
   d7354:	00030220 	.word	0x00030220

000d7358 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d7358:	b508      	push	{r3, lr}
   d735a:	4b02      	ldr	r3, [pc, #8]	; (d7364 <network_connect+0xc>)
   d735c:	681b      	ldr	r3, [r3, #0]
   d735e:	685b      	ldr	r3, [r3, #4]
   d7360:	9301      	str	r3, [sp, #4]
   d7362:	bd08      	pop	{r3, pc}
   d7364:	00030240 	.word	0x00030240

000d7368 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d7368:	b508      	push	{r3, lr}
   d736a:	4b02      	ldr	r3, [pc, #8]	; (d7374 <network_connecting+0xc>)
   d736c:	681b      	ldr	r3, [r3, #0]
   d736e:	689b      	ldr	r3, [r3, #8]
   d7370:	9301      	str	r3, [sp, #4]
   d7372:	bd08      	pop	{r3, pc}
   d7374:	00030240 	.word	0x00030240

000d7378 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d7378:	b508      	push	{r3, lr}
   d737a:	4b02      	ldr	r3, [pc, #8]	; (d7384 <network_disconnect+0xc>)
   d737c:	681b      	ldr	r3, [r3, #0]
   d737e:	68db      	ldr	r3, [r3, #12]
   d7380:	9301      	str	r3, [sp, #4]
   d7382:	bd08      	pop	{r3, pc}
   d7384:	00030240 	.word	0x00030240

000d7388 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d7388:	b508      	push	{r3, lr}
   d738a:	4b02      	ldr	r3, [pc, #8]	; (d7394 <network_ready+0xc>)
   d738c:	681b      	ldr	r3, [r3, #0]
   d738e:	691b      	ldr	r3, [r3, #16]
   d7390:	9301      	str	r3, [sp, #4]
   d7392:	bd08      	pop	{r3, pc}
   d7394:	00030240 	.word	0x00030240

000d7398 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d7398:	b508      	push	{r3, lr}
   d739a:	4b02      	ldr	r3, [pc, #8]	; (d73a4 <network_on+0xc>)
   d739c:	681b      	ldr	r3, [r3, #0]
   d739e:	695b      	ldr	r3, [r3, #20]
   d73a0:	9301      	str	r3, [sp, #4]
   d73a2:	bd08      	pop	{r3, pc}
   d73a4:	00030240 	.word	0x00030240

000d73a8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d73a8:	b508      	push	{r3, lr}
   d73aa:	4b02      	ldr	r3, [pc, #8]	; (d73b4 <network_off+0xc>)
   d73ac:	681b      	ldr	r3, [r3, #0]
   d73ae:	699b      	ldr	r3, [r3, #24]
   d73b0:	9301      	str	r3, [sp, #4]
   d73b2:	bd08      	pop	{r3, pc}
   d73b4:	00030240 	.word	0x00030240

000d73b8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d73b8:	b508      	push	{r3, lr}
   d73ba:	4b02      	ldr	r3, [pc, #8]	; (d73c4 <network_listen+0xc>)
   d73bc:	681b      	ldr	r3, [r3, #0]
   d73be:	69db      	ldr	r3, [r3, #28]
   d73c0:	9301      	str	r3, [sp, #4]
   d73c2:	bd08      	pop	{r3, pc}
   d73c4:	00030240 	.word	0x00030240

000d73c8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d73c8:	b508      	push	{r3, lr}
   d73ca:	4b02      	ldr	r3, [pc, #8]	; (d73d4 <network_listening+0xc>)
   d73cc:	681b      	ldr	r3, [r3, #0]
   d73ce:	6a1b      	ldr	r3, [r3, #32]
   d73d0:	9301      	str	r3, [sp, #4]
   d73d2:	bd08      	pop	{r3, pc}
   d73d4:	00030240 	.word	0x00030240

000d73d8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d73d8:	b508      	push	{r3, lr}
   d73da:	4b02      	ldr	r3, [pc, #8]	; (d73e4 <network_set_listen_timeout+0xc>)
   d73dc:	681b      	ldr	r3, [r3, #0]
   d73de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d73e0:	9301      	str	r3, [sp, #4]
   d73e2:	bd08      	pop	{r3, pc}
   d73e4:	00030240 	.word	0x00030240

000d73e8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d73e8:	b508      	push	{r3, lr}
   d73ea:	4b02      	ldr	r3, [pc, #8]	; (d73f4 <network_get_listen_timeout+0xc>)
   d73ec:	681b      	ldr	r3, [r3, #0]
   d73ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d73f0:	9301      	str	r3, [sp, #4]
   d73f2:	bd08      	pop	{r3, pc}
   d73f4:	00030240 	.word	0x00030240

000d73f8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d73f8:	b508      	push	{r3, lr}
   d73fa:	4b02      	ldr	r3, [pc, #8]	; (d7404 <spark_process+0xc>)
   d73fc:	681b      	ldr	r3, [r3, #0]
   d73fe:	689b      	ldr	r3, [r3, #8]
   d7400:	9301      	str	r3, [sp, #4]
   d7402:	bd08      	pop	{r3, pc}
   d7404:	00030244 	.word	0x00030244

000d7408 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d7408:	b508      	push	{r3, lr}
   d740a:	4b02      	ldr	r3, [pc, #8]	; (d7414 <spark_cloud_flag_connected+0xc>)
   d740c:	681b      	ldr	r3, [r3, #0]
   d740e:	695b      	ldr	r3, [r3, #20]
   d7410:	9301      	str	r3, [sp, #4]
   d7412:	bd08      	pop	{r3, pc}
   d7414:	00030244 	.word	0x00030244

000d7418 <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d7418:	b508      	push	{r3, lr}
   d741a:	4b02      	ldr	r3, [pc, #8]	; (d7424 <spark_sync_time+0xc>)
   d741c:	681b      	ldr	r3, [r3, #0]
   d741e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7420:	9301      	str	r3, [sp, #4]
   d7422:	bd08      	pop	{r3, pc}
   d7424:	00030244 	.word	0x00030244

000d7428 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d7428:	b508      	push	{r3, lr}
   d742a:	4b02      	ldr	r3, [pc, #8]	; (d7434 <spark_sync_time_pending+0xc>)
   d742c:	681b      	ldr	r3, [r3, #0]
   d742e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7430:	9301      	str	r3, [sp, #4]
   d7432:	bd08      	pop	{r3, pc}
   d7434:	00030244 	.word	0x00030244

000d7438 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d7438:	b508      	push	{r3, lr}
   d743a:	4b02      	ldr	r3, [pc, #8]	; (d7444 <spark_set_random_seed_from_cloud_handler+0xc>)
   d743c:	681b      	ldr	r3, [r3, #0]
   d743e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7440:	9301      	str	r3, [sp, #4]
   d7442:	bd08      	pop	{r3, pc}
   d7444:	00030244 	.word	0x00030244

000d7448 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d7448:	b508      	push	{r3, lr}
   d744a:	4b02      	ldr	r3, [pc, #8]	; (d7454 <malloc+0xc>)
   d744c:	681b      	ldr	r3, [r3, #0]
   d744e:	681b      	ldr	r3, [r3, #0]
   d7450:	9301      	str	r3, [sp, #4]
   d7452:	bd08      	pop	{r3, pc}
   d7454:	0003021c 	.word	0x0003021c

000d7458 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d7458:	b508      	push	{r3, lr}
   d745a:	4b02      	ldr	r3, [pc, #8]	; (d7464 <free+0xc>)
   d745c:	681b      	ldr	r3, [r3, #0]
   d745e:	685b      	ldr	r3, [r3, #4]
   d7460:	9301      	str	r3, [sp, #4]
   d7462:	bd08      	pop	{r3, pc}
   d7464:	0003021c 	.word	0x0003021c

000d7468 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d7468:	b508      	push	{r3, lr}
   d746a:	4b02      	ldr	r3, [pc, #8]	; (d7474 <realloc+0xc>)
   d746c:	681b      	ldr	r3, [r3, #0]
   d746e:	689b      	ldr	r3, [r3, #8]
   d7470:	9301      	str	r3, [sp, #4]
   d7472:	bd08      	pop	{r3, pc}
   d7474:	0003021c 	.word	0x0003021c

000d7478 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d7478:	b508      	push	{r3, lr}
   d747a:	4b02      	ldr	r3, [pc, #8]	; (d7484 <vsnprintf+0xc>)
   d747c:	681b      	ldr	r3, [r3, #0]
   d747e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7480:	9301      	str	r3, [sp, #4]
   d7482:	bd08      	pop	{r3, pc}
   d7484:	0003021c 	.word	0x0003021c

000d7488 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d7488:	b508      	push	{r3, lr}
   d748a:	4b02      	ldr	r3, [pc, #8]	; (d7494 <__errno+0xc>)
   d748c:	681b      	ldr	r3, [r3, #0]
   d748e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7490:	9301      	str	r3, [sp, #4]
   d7492:	bd08      	pop	{r3, pc}
   d7494:	0003021c 	.word	0x0003021c

000d7498 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7498:	2200      	movs	r2, #0
   d749a:	4611      	mov	r1, r2
   d749c:	6840      	ldr	r0, [r0, #4]
   d749e:	f7ff bf93 	b.w	d73c8 <network_listening>

000d74a2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d74a2:	2200      	movs	r2, #0
   d74a4:	4611      	mov	r1, r2
   d74a6:	6840      	ldr	r0, [r0, #4]
   d74a8:	f7ff bf9e 	b.w	d73e8 <network_get_listen_timeout>

000d74ac <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d74ac:	2200      	movs	r2, #0
   d74ae:	6840      	ldr	r0, [r0, #4]
   d74b0:	f7ff bf92 	b.w	d73d8 <network_set_listen_timeout>

000d74b4 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d74b4:	2200      	movs	r2, #0
   d74b6:	f081 0101 	eor.w	r1, r1, #1
   d74ba:	6840      	ldr	r0, [r0, #4]
   d74bc:	f7ff bf7c 	b.w	d73b8 <network_listen>

000d74c0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d74c0:	2300      	movs	r3, #0
   d74c2:	461a      	mov	r2, r3
   d74c4:	4619      	mov	r1, r3
   d74c6:	6840      	ldr	r0, [r0, #4]
   d74c8:	f7ff bf6e 	b.w	d73a8 <network_off>

000d74cc <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d74cc:	2300      	movs	r3, #0
   d74ce:	461a      	mov	r2, r3
   d74d0:	4619      	mov	r1, r3
   d74d2:	6840      	ldr	r0, [r0, #4]
   d74d4:	f7ff bf60 	b.w	d7398 <network_on>

000d74d8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d74d8:	2200      	movs	r2, #0
   d74da:	4611      	mov	r1, r2
   d74dc:	6840      	ldr	r0, [r0, #4]
   d74de:	f7ff bf53 	b.w	d7388 <network_ready>

000d74e2 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d74e2:	2200      	movs	r2, #0
   d74e4:	4611      	mov	r1, r2
   d74e6:	6840      	ldr	r0, [r0, #4]
   d74e8:	f7ff bf3e 	b.w	d7368 <network_connecting>

000d74ec <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d74ec:	2200      	movs	r2, #0
   d74ee:	2102      	movs	r1, #2
   d74f0:	6840      	ldr	r0, [r0, #4]
   d74f2:	f7ff bf41 	b.w	d7378 <network_disconnect>

000d74f6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d74f6:	2300      	movs	r3, #0
   d74f8:	461a      	mov	r2, r3
   d74fa:	6840      	ldr	r0, [r0, #4]
   d74fc:	f7ff bf2c 	b.w	d7358 <network_connect>

000d7500 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d7500:	4b02      	ldr	r3, [pc, #8]	; (d750c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d7502:	2203      	movs	r2, #3
   d7504:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d7506:	4a02      	ldr	r2, [pc, #8]	; (d7510 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d7508:	601a      	str	r2, [r3, #0]
   d750a:	4770      	bx	lr
   d750c:	2003e1ac 	.word	0x2003e1ac
   d7510:	000d9c9c 	.word	0x000d9c9c

000d7514 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d7514:	2100      	movs	r1, #0
   d7516:	f7ff bd03 	b.w	d6f20 <HAL_SPI_Acquire>

000d751a <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d751a:	2100      	movs	r1, #0
   d751c:	f7ff bd08 	b.w	d6f30 <HAL_SPI_Release>

000d7520 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d7520:	b510      	push	{r4, lr}
   d7522:	4604      	mov	r4, r0
{
    _spi = spi;
   d7524:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d7526:	4608      	mov	r0, r1
   d7528:	f7ff fcca 	bl	d6ec0 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d752c:	2300      	movs	r3, #0
   d752e:	6063      	str	r3, [r4, #4]
}
   d7530:	4620      	mov	r0, r4
   d7532:	bd10      	pop	{r4, pc}

000d7534 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d7534:	b510      	push	{r4, lr}
   d7536:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d7538:	7800      	ldrb	r0, [r0, #0]
   d753a:	f7ff ffeb 	bl	d7514 <_ZN8SPIClass4lockEv.isra.0>
   d753e:	b948      	cbnz	r0, d7554 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d7540:	7820      	ldrb	r0, [r4, #0]
   d7542:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d7546:	f7ff fc93 	bl	d6e70 <HAL_SPI_Begin>
        unlock();
   d754a:	7820      	ldrb	r0, [r4, #0]
    }
}
   d754c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d7550:	f7ff bfe3 	b.w	d751a <_ZN8SPIClass6unlockEv.isra.1>
   d7554:	bd10      	pop	{r4, pc}

000d7556 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d7556:	b538      	push	{r3, r4, r5, lr}
   d7558:	4604      	mov	r4, r0
    if (!lock())
   d755a:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d755c:	460d      	mov	r5, r1
    if (!lock())
   d755e:	f7ff ffd9 	bl	d7514 <_ZN8SPIClass4lockEv.isra.0>
   d7562:	b940      	cbnz	r0, d7576 <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d7564:	7820      	ldrb	r0, [r4, #0]
   d7566:	4629      	mov	r1, r5
   d7568:	f7ff fc8a 	bl	d6e80 <HAL_SPI_Set_Bit_Order>
        unlock();
   d756c:	7820      	ldrb	r0, [r4, #0]
    }
}
   d756e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d7572:	f7ff bfd2 	b.w	d751a <_ZN8SPIClass6unlockEv.isra.1>
   d7576:	bd38      	pop	{r3, r4, r5, pc}

000d7578 <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d7578:	b538      	push	{r3, r4, r5, lr}
   d757a:	4604      	mov	r4, r0
    if (!lock())
   d757c:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d757e:	460d      	mov	r5, r1
    if (!lock())
   d7580:	f7ff ffc8 	bl	d7514 <_ZN8SPIClass4lockEv.isra.0>
   d7584:	b940      	cbnz	r0, d7598 <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d7586:	7820      	ldrb	r0, [r4, #0]
   d7588:	4629      	mov	r1, r5
   d758a:	f7ff fc81 	bl	d6e90 <HAL_SPI_Set_Data_Mode>
        unlock();
   d758e:	7820      	ldrb	r0, [r4, #0]
    }
}
   d7590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d7594:	f7ff bfc1 	b.w	d751a <_ZN8SPIClass6unlockEv.isra.1>
   d7598:	bd38      	pop	{r3, r4, r5, pc}

000d759a <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d759a:	7800      	ldrb	r0, [r0, #0]
   d759c:	f7ff bfbd 	b.w	d751a <_ZN8SPIClass6unlockEv.isra.1>

000d75a0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d75a0:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d75a2:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d75a4:	6018      	str	r0, [r3, #0]
   d75a6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d75a8:	6818      	ldr	r0, [r3, #0]
   d75aa:	4288      	cmp	r0, r1
   d75ac:	b2e5      	uxtb	r5, r4
   d75ae:	d906      	bls.n	d75be <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d75b0:	3401      	adds	r4, #1
   d75b2:	2c08      	cmp	r4, #8
   d75b4:	d002      	beq.n	d75bc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d75b6:	0840      	lsrs	r0, r0, #1
   d75b8:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d75ba:	e7f5      	b.n	d75a8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d75bc:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d75be:	4b02      	ldr	r3, [pc, #8]	; (d75c8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d75c0:	5d5b      	ldrb	r3, [r3, r5]
   d75c2:	7013      	strb	r3, [r2, #0]
   d75c4:	bd30      	pop	{r4, r5, pc}
   d75c6:	bf00      	nop
   d75c8:	000d9cc8 	.word	0x000d9cc8

000d75cc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d75cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d75d0:	4607      	mov	r7, r0
   d75d2:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d75d4:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d75d6:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d75d8:	f7ff ff9c 	bl	d7514 <_ZN8SPIClass4lockEv.isra.0>
   d75dc:	2800      	cmp	r0, #0
   d75de:	db62      	blt.n	d76a6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d75e0:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d75e2:	2214      	movs	r2, #20
   d75e4:	2100      	movs	r1, #0
   d75e6:	a809      	add	r0, sp, #36	; 0x24
   d75e8:	f002 f986 	bl	d98f8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d75ec:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d75ee:	4620      	mov	r0, r4
   d75f0:	2200      	movs	r2, #0
   d75f2:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d75f4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d75f8:	f7ff fc72 	bl	d6ee0 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d75fc:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d7600:	b154      	cbz	r4, d7618 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d7602:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d7606:	b935      	cbnz	r5, d7616 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d7608:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d760c:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d7610:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d7614:	e003      	b.n	d761e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d7616:	2400      	movs	r4, #0
   d7618:	46a1      	mov	r9, r4
   d761a:	46a0      	mov	r8, r4
   d761c:	2501      	movs	r5, #1
   d761e:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d7620:	b105      	cbz	r5, d7624 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d7622:	b9bb      	cbnz	r3, d7654 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d7624:	429d      	cmp	r5, r3
   d7626:	d10b      	bne.n	d7640 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d7628:	68b2      	ldr	r2, [r6, #8]
   d762a:	4542      	cmp	r2, r8
   d762c:	d108      	bne.n	d7640 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d762e:	f88d 9020 	strb.w	r9, [sp, #32]
   d7632:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d7636:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d763a:	89b2      	ldrh	r2, [r6, #12]
   d763c:	4291      	cmp	r1, r2
   d763e:	d009      	beq.n	d7654 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d7640:	b153      	cbz	r3, d7658 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d7642:	2400      	movs	r4, #0
   d7644:	7838      	ldrb	r0, [r7, #0]
   d7646:	9401      	str	r4, [sp, #4]
   d7648:	9400      	str	r4, [sp, #0]
   d764a:	4623      	mov	r3, r4
   d764c:	4622      	mov	r2, r4
   d764e:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d7650:	f7ff fc5e 	bl	d6f10 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d7654:	2000      	movs	r0, #0
   d7656:	e026      	b.n	d76a6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d7658:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d765c:	68b1      	ldr	r1, [r6, #8]
   d765e:	980a      	ldr	r0, [sp, #40]	; 0x28
   d7660:	ab04      	add	r3, sp, #16
   d7662:	f10d 020f 	add.w	r2, sp, #15
   d7666:	f7ff ff9b 	bl	d75a0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d766a:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d766c:	b105      	cbz	r5, d7670 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d766e:	b9b1      	cbnz	r1, d769e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d7670:	42a9      	cmp	r1, r5
   d7672:	d008      	beq.n	d7686 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d7674:	2400      	movs	r4, #0
   d7676:	7838      	ldrb	r0, [r7, #0]
   d7678:	9401      	str	r4, [sp, #4]
   d767a:	7b74      	ldrb	r4, [r6, #13]
   d767c:	7b33      	ldrb	r3, [r6, #12]
   d767e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d7682:	9400      	str	r4, [sp, #0]
   d7684:	e7e4      	b.n	d7650 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d7686:	68b3      	ldr	r3, [r6, #8]
   d7688:	4543      	cmp	r3, r8
   d768a:	d3f3      	bcc.n	d7674 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d768c:	f88d 9020 	strb.w	r9, [sp, #32]
   d7690:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d7694:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d7698:	89b3      	ldrh	r3, [r6, #12]
   d769a:	429a      	cmp	r2, r3
   d769c:	d1ea      	bne.n	d7674 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d769e:	9b04      	ldr	r3, [sp, #16]
   d76a0:	4543      	cmp	r3, r8
   d76a2:	d1e7      	bne.n	d7674 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d76a4:	e7d6      	b.n	d7654 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d76a6:	b00f      	add	sp, #60	; 0x3c
   d76a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d76ac <_ZN8SPIClass13setClockSpeedEjj>:
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d76ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d76b0:	b088      	sub	sp, #32
    unsigned clock = 0;
   d76b2:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d76b4:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d76b6:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d76b8:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d76ba:	460e      	mov	r6, r1
   d76bc:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d76be:	f7ff ff29 	bl	d7514 <_ZN8SPIClass4lockEv.isra.0>
   d76c2:	4605      	mov	r5, r0
   d76c4:	bb00      	cbnz	r0, d7708 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d76c6:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d76ca:	4601      	mov	r1, r0
   d76cc:	2214      	movs	r2, #20
   d76ce:	a803      	add	r0, sp, #12
   d76d0:	f002 f912 	bl	d98f8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d76d4:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d76d6:	462a      	mov	r2, r5
   d76d8:	a903      	add	r1, sp, #12
   d76da:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d76dc:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d76e0:	f7ff fbfe 	bl	d6ee0 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d76e4:	ab02      	add	r3, sp, #8
   d76e6:	f10d 0207 	add.w	r2, sp, #7
   d76ea:	fb07 f106 	mul.w	r1, r7, r6
   d76ee:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d76f0:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d76f4:	f7ff ff54 	bl	d75a0 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d76f8:	7820      	ldrb	r0, [r4, #0]
   d76fa:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d76fe:	f7ff fbcf 	bl	d6ea0 <HAL_SPI_Set_Clock_Divider>
        unlock();
   d7702:	7820      	ldrb	r0, [r4, #0]
   d7704:	f7ff ff09 	bl	d751a <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d7708:	9802      	ldr	r0, [sp, #8]
   d770a:	b008      	add	sp, #32
   d770c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7710 <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d7710:	b538      	push	{r3, r4, r5, lr}
   d7712:	4604      	mov	r4, r0
    if (!lock())
   d7714:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d7716:	460d      	mov	r5, r1
    if (!lock())
   d7718:	f7ff fefc 	bl	d7514 <_ZN8SPIClass4lockEv.isra.0>
   d771c:	b9c8      	cbnz	r0, d7752 <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d771e:	6861      	ldr	r1, [r4, #4]
   d7720:	b171      	cbz	r1, d7740 <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d7722:	4b0c      	ldr	r3, [pc, #48]	; (d7754 <_ZN8SPIClass15setClockDividerEh+0x44>)
   d7724:	5cc2      	ldrb	r2, [r0, r3]
   d7726:	42aa      	cmp	r2, r5
   d7728:	d002      	beq.n	d7730 <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d772a:	3001      	adds	r0, #1
   d772c:	2808      	cmp	r0, #8
   d772e:	d1f9      	bne.n	d7724 <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d7730:	3001      	adds	r0, #1
   d7732:	b2c0      	uxtb	r0, r0
   d7734:	40c1      	lsrs	r1, r0
   d7736:	2201      	movs	r2, #1
   d7738:	4620      	mov	r0, r4
   d773a:	f7ff ffb7 	bl	d76ac <_ZN8SPIClass13setClockSpeedEjj>
   d773e:	e003      	b.n	d7748 <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d7740:	4629      	mov	r1, r5
   d7742:	7820      	ldrb	r0, [r4, #0]
   d7744:	f7ff fbac 	bl	d6ea0 <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d7748:	7820      	ldrb	r0, [r4, #0]
    }
}
   d774a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d774e:	f7ff bee4 	b.w	d751a <_ZN8SPIClass6unlockEv.isra.1>
   d7752:	bd38      	pop	{r3, r4, r5, pc}
   d7754:	000d9cc8 	.word	0x000d9cc8

000d7758 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d7758:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d775a:	7800      	ldrb	r0, [r0, #0]
   d775c:	f7ff fba8 	bl	d6eb0 <HAL_SPI_Send_Receive_Data>
}
   d7760:	b2c0      	uxtb	r0, r0
   d7762:	bd08      	pop	{r3, pc}

000d7764 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d7764:	b530      	push	{r4, r5, lr}
   d7766:	b087      	sub	sp, #28
   d7768:	4604      	mov	r4, r0
   d776a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d776c:	7800      	ldrb	r0, [r0, #0]
   d776e:	9500      	str	r5, [sp, #0]
   d7770:	f7ff fbbe 	bl	d6ef0 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d7774:	b93d      	cbnz	r5, d7786 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d7776:	a902      	add	r1, sp, #8
   d7778:	7820      	ldrb	r0, [r4, #0]
   d777a:	f7ff fbc1 	bl	d6f00 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d777e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d7782:	07db      	lsls	r3, r3, #31
   d7784:	d4f7      	bmi.n	d7776 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d7786:	b007      	add	sp, #28
   d7788:	bd30      	pop	{r4, r5, pc}

000d778a <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d778a:	7800      	ldrb	r0, [r0, #0]
   d778c:	f7ff bba0 	b.w	d6ed0 <HAL_SPI_Is_Enabled>

000d7790 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d7790:	b510      	push	{r4, lr}
   d7792:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d7794:	6800      	ldr	r0, [r0, #0]
   d7796:	b118      	cbz	r0, d77a0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d7798:	f7ff fe5e 	bl	d7458 <free>
            wakeupSource_ = nullptr;
   d779c:	2300      	movs	r3, #0
   d779e:	6023      	str	r3, [r4, #0]
   d77a0:	bd10      	pop	{r4, pc}

000d77a2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d77a2:	b510      	push	{r4, lr}
   d77a4:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d77a6:	f7ff fff3 	bl	d7790 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d77aa:	4620      	mov	r0, r4
   d77ac:	bd10      	pop	{r4, pc}
	...

000d77b0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d77b0:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d77b2:	4c09      	ldr	r4, [pc, #36]	; (d77d8 <_GLOBAL__sub_I_System+0x28>)
   d77b4:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d77b6:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d77ba:	6020      	str	r0, [r4, #0]
   d77bc:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d77be:	71a0      	strb	r0, [r4, #6]
   d77c0:	8120      	strh	r0, [r4, #8]
   d77c2:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d77c4:	f7ff fd94 	bl	d72f0 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d77c8:	4620      	mov	r0, r4
   d77ca:	4a04      	ldr	r2, [pc, #16]	; (d77dc <_GLOBAL__sub_I_System+0x2c>)
   d77cc:	4904      	ldr	r1, [pc, #16]	; (d77e0 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d77ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d77d2:	f001 bae5 	b.w	d8da0 <__aeabi_atexit>
   d77d6:	bf00      	nop
   d77d8:	2003e1b4 	.word	0x2003e1b4
   d77dc:	2003db4c 	.word	0x2003db4c
   d77e0:	000d77a3 	.word	0x000d77a3

000d77e4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d77e4:	b510      	push	{r4, lr}
   d77e6:	4604      	mov	r4, r0
{
	free(buffer);
   d77e8:	6800      	ldr	r0, [r0, #0]
   d77ea:	f7ff fe35 	bl	d7458 <free>
}
   d77ee:	4620      	mov	r0, r4
   d77f0:	bd10      	pop	{r4, pc}

000d77f2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d77f2:	b510      	push	{r4, lr}
   d77f4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d77f6:	6800      	ldr	r0, [r0, #0]
   d77f8:	b108      	cbz	r0, d77fe <_ZN6String10invalidateEv+0xc>
   d77fa:	f7ff fe2d 	bl	d7458 <free>
	buffer = NULL;
   d77fe:	2300      	movs	r3, #0
   d7800:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d7802:	60a3      	str	r3, [r4, #8]
   d7804:	6063      	str	r3, [r4, #4]
   d7806:	bd10      	pop	{r4, pc}

000d7808 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7808:	b538      	push	{r3, r4, r5, lr}
   d780a:	4604      	mov	r4, r0
   d780c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d780e:	6800      	ldr	r0, [r0, #0]
   d7810:	3101      	adds	r1, #1
   d7812:	f7ff fe29 	bl	d7468 <realloc>
	if (newbuffer) {
   d7816:	b110      	cbz	r0, d781e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7818:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d781c:	2001      	movs	r0, #1
	}
	return 0;
}
   d781e:	bd38      	pop	{r3, r4, r5, pc}

000d7820 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7820:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7822:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7824:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d7826:	b113      	cbz	r3, d782e <_ZN6String7reserveEj+0xe>
   d7828:	6843      	ldr	r3, [r0, #4]
   d782a:	428b      	cmp	r3, r1
   d782c:	d207      	bcs.n	d783e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d782e:	4620      	mov	r0, r4
   d7830:	f7ff ffea 	bl	d7808 <_ZN6String12changeBufferEj>
   d7834:	b120      	cbz	r0, d7840 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d7836:	68a3      	ldr	r3, [r4, #8]
   d7838:	b90b      	cbnz	r3, d783e <_ZN6String7reserveEj+0x1e>
   d783a:	6822      	ldr	r2, [r4, #0]
   d783c:	7013      	strb	r3, [r2, #0]
   d783e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d7840:	bd10      	pop	{r4, pc}

000d7842 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7842:	b570      	push	{r4, r5, r6, lr}
   d7844:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d7846:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7848:	4604      	mov	r4, r0
   d784a:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d784c:	f7ff ffe8 	bl	d7820 <_ZN6String7reserveEj>
   d7850:	b918      	cbnz	r0, d785a <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d7852:	4620      	mov	r0, r4
   d7854:	f7ff ffcd 	bl	d77f2 <_ZN6String10invalidateEv>
		return *this;
   d7858:	e009      	b.n	d786e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d785a:	462a      	mov	r2, r5
   d785c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d785e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d7860:	6820      	ldr	r0, [r4, #0]
   d7862:	f002 f83e 	bl	d98e2 <memcpy>
	buffer[len] = 0;
   d7866:	6822      	ldr	r2, [r4, #0]
   d7868:	68a3      	ldr	r3, [r4, #8]
   d786a:	2100      	movs	r1, #0
   d786c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d786e:	4620      	mov	r0, r4
   d7870:	bd70      	pop	{r4, r5, r6, pc}

000d7872 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7872:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7874:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7876:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7878:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d787a:	6043      	str	r3, [r0, #4]
	len = 0;
   d787c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d787e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d7880:	460d      	mov	r5, r1
   d7882:	b139      	cbz	r1, d7894 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d7884:	4608      	mov	r0, r1
   d7886:	f002 f867 	bl	d9958 <strlen>
   d788a:	4629      	mov	r1, r5
   d788c:	4602      	mov	r2, r0
   d788e:	4620      	mov	r0, r4
   d7890:	f7ff ffd7 	bl	d7842 <_ZN6String4copyEPKcj>
}
   d7894:	4620      	mov	r0, r4
   d7896:	bd38      	pop	{r3, r4, r5, pc}

000d7898 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d7898:	b538      	push	{r3, r4, r5, lr}
   d789a:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d789c:	460c      	mov	r4, r1
   d789e:	b141      	cbz	r1, d78b2 <_ZN6StringaSEPKc+0x1a>
   d78a0:	4608      	mov	r0, r1
   d78a2:	f002 f859 	bl	d9958 <strlen>
   d78a6:	4621      	mov	r1, r4
   d78a8:	4602      	mov	r2, r0
   d78aa:	4628      	mov	r0, r5
   d78ac:	f7ff ffc9 	bl	d7842 <_ZN6String4copyEPKcj>
   d78b0:	e001      	b.n	d78b6 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d78b2:	f7ff ff9e 	bl	d77f2 <_ZN6String10invalidateEv>

	return *this;
}
   d78b6:	4628      	mov	r0, r5
   d78b8:	bd38      	pop	{r3, r4, r5, pc}

000d78ba <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d78ba:	b510      	push	{r4, lr}
   d78bc:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d78be:	6800      	ldr	r0, [r0, #0]
   d78c0:	b108      	cbz	r0, d78c6 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d78c2:	f7ff fbd5 	bl	d7070 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d78c6:	4620      	mov	r0, r4
   d78c8:	bd10      	pop	{r4, pc}
	...

000d78cc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d78cc:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d78ce:	4c06      	ldr	r4, [pc, #24]	; (d78e8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d78d0:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d78d2:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d78d4:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d78d6:	f7ff fbc3 	bl	d7060 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d78da:	4620      	mov	r0, r4
   d78dc:	4a03      	ldr	r2, [pc, #12]	; (d78ec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d78de:	4904      	ldr	r1, [pc, #16]	; (d78f0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d78e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d78e4:	f001 ba5c 	b.w	d8da0 <__aeabi_atexit>
   d78e8:	2003e1c0 	.word	0x2003e1c0
   d78ec:	2003db4c 	.word	0x2003db4c
   d78f0:	000d78bb 	.word	0x000d78bb

000d78f4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d78f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d78f6:	4606      	mov	r6, r0
   d78f8:	460d      	mov	r5, r1
   d78fa:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d78fc:	2400      	movs	r4, #0
  while (size--) {
   d78fe:	42bd      	cmp	r5, r7
   d7900:	d00c      	beq.n	d791c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7902:	6833      	ldr	r3, [r6, #0]
   d7904:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7908:	689b      	ldr	r3, [r3, #8]
   d790a:	4630      	mov	r0, r6
   d790c:	4798      	blx	r3
     if (chunk>=0)
   d790e:	2800      	cmp	r0, #0
   d7910:	db01      	blt.n	d7916 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7912:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d7914:	e7f3      	b.n	d78fe <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7916:	2c00      	cmp	r4, #0
   d7918:	bf08      	it	eq
   d791a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d791c:	4620      	mov	r0, r4
   d791e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7920 <_ZN5Print5printEPKc>:
   d7920:	b508      	push	{r3, lr}
   d7922:	f7fe fbdb 	bl	d60dc <_ZN5Print5writeEPKc>
   d7926:	bd08      	pop	{r3, pc}

000d7928 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d7928:	6803      	ldr	r3, [r0, #0]
   d792a:	689b      	ldr	r3, [r3, #8]
   d792c:	4718      	bx	r3

000d792e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d792e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7930:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7932:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7934:	f7ff fff8 	bl	d7928 <_ZN5Print5printEc>
  n += print('\n');
   d7938:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d793a:	4604      	mov	r4, r0
  n += print('\n');
   d793c:	4628      	mov	r0, r5
   d793e:	f7ff fff3 	bl	d7928 <_ZN5Print5printEc>
  return n;
}
   d7942:	4420      	add	r0, r4
   d7944:	bd38      	pop	{r3, r4, r5, pc}

000d7946 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d7946:	b538      	push	{r3, r4, r5, lr}
   d7948:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d794a:	f7fe fbc7 	bl	d60dc <_ZN5Print5writeEPKc>
   d794e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d7950:	4628      	mov	r0, r5
   d7952:	f7ff ffec 	bl	d792e <_ZN5Print7printlnEv>
  return n;
}
   d7956:	4420      	add	r0, r4
   d7958:	bd38      	pop	{r3, r4, r5, pc}

000d795a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d795a:	b530      	push	{r4, r5, lr}
   d795c:	b08b      	sub	sp, #44	; 0x2c
   d795e:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7960:	2100      	movs	r1, #0
   d7962:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7966:	2a01      	cmp	r2, #1
   d7968:	bf98      	it	ls
   d796a:	220a      	movls	r2, #10
   d796c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d7970:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d7974:	fb05 3312 	mls	r3, r5, r2, r3
   d7978:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d797c:	2b09      	cmp	r3, #9
   d797e:	bf94      	ite	ls
   d7980:	3330      	addls	r3, #48	; 0x30
   d7982:	3337      	addhi	r3, #55	; 0x37
   d7984:	b2db      	uxtb	r3, r3
   d7986:	4621      	mov	r1, r4
   d7988:	f804 3901 	strb.w	r3, [r4], #-1
   d798c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d798e:	2d00      	cmp	r5, #0
   d7990:	d1ee      	bne.n	d7970 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d7992:	f7fe fba3 	bl	d60dc <_ZN5Print5writeEPKc>
}
   d7996:	b00b      	add	sp, #44	; 0x2c
   d7998:	bd30      	pop	{r4, r5, pc}

000d799a <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d799a:	b40c      	push	{r2, r3}
   d799c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d79a0:	b087      	sub	sp, #28
   d79a2:	af00      	add	r7, sp, #0
   d79a4:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d79a8:	4605      	mov	r5, r0
   d79aa:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d79ae:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d79b0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d79b2:	4623      	mov	r3, r4
   d79b4:	464a      	mov	r2, r9
   d79b6:	2114      	movs	r1, #20
   d79b8:	1d38      	adds	r0, r7, #4
   d79ba:	f7ff fd5d 	bl	d7478 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d79be:	2813      	cmp	r0, #19
   d79c0:	d805      	bhi.n	d79ce <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d79c2:	1d39      	adds	r1, r7, #4
   d79c4:	4628      	mov	r0, r5
   d79c6:	f7fe fb89 	bl	d60dc <_ZN5Print5writeEPKc>
   d79ca:	4604      	mov	r4, r0
   d79cc:	e013      	b.n	d79f6 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d79ce:	f100 0308 	add.w	r3, r0, #8
   d79d2:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d79d6:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d79d8:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d79dc:	1c41      	adds	r1, r0, #1
   d79de:	4623      	mov	r3, r4
   d79e0:	464a      	mov	r2, r9
   d79e2:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d79e4:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d79e6:	f7ff fd47 	bl	d7478 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d79ea:	4669      	mov	r1, sp
   d79ec:	4628      	mov	r0, r5
   d79ee:	f7fe fb75 	bl	d60dc <_ZN5Print5writeEPKc>
   d79f2:	4604      	mov	r4, r0
   d79f4:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d79f6:	b11e      	cbz	r6, d7a00 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d79f8:	4628      	mov	r0, r5
   d79fa:	f7ff ff98 	bl	d792e <_ZN5Print7printlnEv>
   d79fe:	4404      	add	r4, r0
    return n;
}
   d7a00:	4620      	mov	r0, r4
   d7a02:	371c      	adds	r7, #28
   d7a04:	46bd      	mov	sp, r7
   d7a06:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7a0a:	b002      	add	sp, #8
   d7a0c:	4770      	bx	lr
	...

000d7a10 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7a10:	4b01      	ldr	r3, [pc, #4]	; (d7a18 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7a12:	4a02      	ldr	r2, [pc, #8]	; (d7a1c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7a14:	601a      	str	r2, [r3, #0]
   d7a16:	4770      	bx	lr
   d7a18:	2003e1c4 	.word	0x2003e1c4
   d7a1c:	000d9d43 	.word	0x000d9d43

000d7a20 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d7a20:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7a22:	2000      	movs	r0, #0
   d7a24:	f7ff fd00 	bl	d7428 <spark_sync_time_pending>
   d7a28:	b128      	cbz	r0, d7a36 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7a2a:	f7ff fced 	bl	d7408 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7a2e:	f080 0001 	eor.w	r0, r0, #1
   d7a32:	b2c0      	uxtb	r0, r0
   d7a34:	bd08      	pop	{r3, pc}
   d7a36:	2001      	movs	r0, #1
    }
   d7a38:	bd08      	pop	{r3, pc}

000d7a3a <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d7a3a:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d7a3c:	2000      	movs	r0, #0
   d7a3e:	f7ff fabf 	bl	d6fc0 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d7a42:	4604      	mov	r4, r0
   d7a44:	b968      	cbnz	r0, d7a62 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d7a46:	f7ff fc4b 	bl	d72e0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d7a4a:	2801      	cmp	r0, #1
   d7a4c:	d10b      	bne.n	d7a66 <_ZN9TimeClass7isValidEv+0x2c>
   d7a4e:	4620      	mov	r0, r4
   d7a50:	f7ff fc66 	bl	d7320 <system_thread_get_state>
   d7a54:	b938      	cbnz	r0, d7a66 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d7a56:	f7ff ffe3 	bl	d7a20 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7a5a:	b930      	cbnz	r0, d7a6a <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d7a5c:	f7ff fccc 	bl	d73f8 <spark_process>
   d7a60:	e7f9      	b.n	d7a56 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d7a62:	2001      	movs	r0, #1
   d7a64:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d7a66:	2000      	movs	r0, #0
   d7a68:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d7a6a:	f7ff ffd9 	bl	d7a20 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d7a6e:	2000      	movs	r0, #0
   d7a70:	f7ff faa6 	bl	d6fc0 <HAL_RTC_Time_Is_Valid>
   d7a74:	3000      	adds	r0, #0
   d7a76:	bf18      	it	ne
   d7a78:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d7a7a:	bd10      	pop	{r4, pc}

000d7a7c <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d7a7c:	b508      	push	{r3, lr}
    (void)isValid();
   d7a7e:	f7ff ffdc 	bl	d7a3a <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d7a82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d7a86:	f7ff ba7b 	b.w	d6f80 <HAL_RTC_Get_UnixTime>
	...

000d7a8c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7a8c:	4b02      	ldr	r3, [pc, #8]	; (d7a98 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7a8e:	681a      	ldr	r2, [r3, #0]
   d7a90:	4b02      	ldr	r3, [pc, #8]	; (d7a9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7a92:	601a      	str	r2, [r3, #0]
   d7a94:	4770      	bx	lr
   d7a96:	bf00      	nop
   d7a98:	2003dae4 	.word	0x2003dae4
   d7a9c:	2003e1c8 	.word	0x2003e1c8

000d7aa0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7aa0:	2100      	movs	r1, #0
   d7aa2:	f7ff bc2d 	b.w	d7300 <system_delay_ms>

000d7aa6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7aa6:	b510      	push	{r4, lr}
   d7aa8:	4604      	mov	r4, r0
   d7aaa:	f7fd f9fa 	bl	d4ea2 <_ZNSt14_Function_baseD1Ev>
   d7aae:	4620      	mov	r0, r4
   d7ab0:	bd10      	pop	{r4, pc}
	...

000d7ab4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7ab4:	4803      	ldr	r0, [pc, #12]	; (d7ac4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7ab6:	4a04      	ldr	r2, [pc, #16]	; (d7ac8 <_GLOBAL__sub_I_RGB+0x14>)
   d7ab8:	4904      	ldr	r1, [pc, #16]	; (d7acc <_GLOBAL__sub_I_RGB+0x18>)
   d7aba:	2300      	movs	r3, #0
   d7abc:	6083      	str	r3, [r0, #8]
   d7abe:	f001 b96f 	b.w	d8da0 <__aeabi_atexit>
   d7ac2:	bf00      	nop
   d7ac4:	2003e1cc 	.word	0x2003e1cc
   d7ac8:	2003db4c 	.word	0x2003db4c
   d7acc:	000d7aa7 	.word	0x000d7aa7

000d7ad0 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d7ad0:	7d00      	ldrb	r0, [r0, #20]
   d7ad2:	4770      	bx	lr

000d7ad4 <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d7ad4:	7d03      	ldrb	r3, [r0, #20]
   d7ad6:	b11b      	cbz	r3, d7ae0 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d7ad8:	6983      	ldr	r3, [r0, #24]
   d7ada:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d7ade:	d102      	bne.n	d7ae6 <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d7ae0:	ed9f 0a05 	vldr	s0, [pc, #20]	; d7af8 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d7ae4:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d7ae6:	ee07 3a90 	vmov	s15, r3
   d7aea:	ed9f 7a04 	vldr	s14, [pc, #16]	; d7afc <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d7aee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7af2:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d7af6:	4770      	bx	lr
   d7af8:	00000000 	.word	0x00000000
   d7afc:	42c80000 	.word	0x42c80000

000d7b00 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d7b00:	7d03      	ldrb	r3, [r0, #20]
   d7b02:	b11b      	cbz	r3, d7b0c <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d7b04:	6a03      	ldr	r3, [r0, #32]
   d7b06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d7b0a:	d102      	bne.n	d7b12 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d7b0c:	ed9f 0a05 	vldr	s0, [pc, #20]	; d7b24 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d7b10:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d7b12:	ee07 3a90 	vmov	s15, r3
   d7b16:	ed9f 7a04 	vldr	s14, [pc, #16]	; d7b28 <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d7b1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7b1e:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d7b22:	4770      	bx	lr
   d7b24:	00000000 	.word	0x00000000
   d7b28:	42c80000 	.word	0x42c80000

000d7b2c <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d7b2c:	7d03      	ldrb	r3, [r0, #20]
   d7b2e:	b17b      	cbz	r3, d7b50 <_ZNK14CellularSignal10getQualityEv+0x24>
   d7b30:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d7b32:	2b00      	cmp	r3, #0
   d7b34:	db0c      	blt.n	d7b50 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d7b36:	ee07 3a90 	vmov	s15, r3
   d7b3a:	eddf 6a07 	vldr	s13, [pc, #28]	; d7b58 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d7b3e:	ed9f 0a07 	vldr	s0, [pc, #28]	; d7b5c <_ZNK14CellularSignal10getQualityEv+0x30>
   d7b42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d7b46:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d7b4a:	ee27 0a80 	vmul.f32	s0, s15, s0
   d7b4e:	4770      	bx	lr
    }

    return -1.0f;
   d7b50:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d7b54:	4770      	bx	lr
   d7b56:	bf00      	nop
   d7b58:	477fff00 	.word	0x477fff00
   d7b5c:	42c80000 	.word	0x42c80000

000d7b60 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d7b60:	7d03      	ldrb	r3, [r0, #20]
   d7b62:	b17b      	cbz	r3, d7b84 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d7b64:	69c3      	ldr	r3, [r0, #28]
   d7b66:	2b00      	cmp	r3, #0
   d7b68:	db0c      	blt.n	d7b84 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d7b6a:	ee07 3a90 	vmov	s15, r3
   d7b6e:	eddf 6a07 	vldr	s13, [pc, #28]	; d7b8c <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d7b72:	ed9f 0a07 	vldr	s0, [pc, #28]	; d7b90 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d7b76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d7b7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d7b7e:	ee27 0a80 	vmul.f32	s0, s15, s0
   d7b82:	4770      	bx	lr
    }

    return -1.0f;
   d7b84:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d7b88:	4770      	bx	lr
   d7b8a:	bf00      	nop
   d7b8c:	477fff00 	.word	0x477fff00
   d7b90:	42c80000 	.word	0x42c80000

000d7b94 <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d7b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7b98:	4607      	mov	r7, r0
   d7b9a:	460c      	mov	r4, r1
{
    if (base == 0) {
   d7b9c:	4615      	mov	r5, r2
   d7b9e:	b92a      	cbnz	r2, d7bac <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d7ba0:	6803      	ldr	r3, [r0, #0]
   d7ba2:	b2c9      	uxtb	r1, r1
   d7ba4:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d7ba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d7baa:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d7bac:	2900      	cmp	r1, #0
   d7bae:	da07      	bge.n	d7bc0 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d7bb0:	2a0a      	cmp	r2, #10
   d7bb2:	d105      	bne.n	d7bc0 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d7bb4:	212d      	movs	r1, #45	; 0x2d
   d7bb6:	f7ff feb7 	bl	d7928 <_ZN5Print5printEc>
            val = -n;
   d7bba:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d7bbc:	4606      	mov	r6, r0
            val = -n;
   d7bbe:	e001      	b.n	d7bc4 <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d7bc0:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d7bc2:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d7bc4:	b2ea      	uxtb	r2, r5
   d7bc6:	4638      	mov	r0, r7
   d7bc8:	f7ff fec7 	bl	d795a <_ZN5Print11printNumberEmh>
    }
}
   d7bcc:	4430      	add	r0, r6
   d7bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7bd2 <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
   d7bd2:	b570      	push	{r4, r5, r6, lr}
   d7bd4:	460d      	mov	r5, r1
   d7bd6:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d7bd8:	220a      	movs	r2, #10
   d7bda:	6881      	ldr	r1, [r0, #8]
   d7bdc:	4628      	mov	r0, r5
   d7bde:	f7ff ffd9 	bl	d7b94 <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
   d7be2:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d7be4:	4604      	mov	r4, r0
    n += p.print(',');
   d7be6:	4628      	mov	r0, r5
   d7be8:	f7ff fe9e 	bl	d7928 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d7bec:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d7bee:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d7bf0:	68f1      	ldr	r1, [r6, #12]
   d7bf2:	4628      	mov	r0, r5
   d7bf4:	f7ff ffce 	bl	d7b94 <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
   d7bf8:	4420      	add	r0, r4
   d7bfa:	bd70      	pop	{r4, r5, r6, pc}

000d7bfc <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d7bfc:	f1a0 0004 	sub.w	r0, r0, #4
   d7c00:	f7ff bfe7 	b.w	d7bd2 <_ZNK14CellularSignal7printToER5Print>

000d7c04 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d7c04:	6800      	ldr	r0, [r0, #0]
   d7c06:	f000 bb88 	b.w	d831a <_ZN7TwoWire4lockEv>

000d7c0a <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d7c0a:	b510      	push	{r4, lr}
   d7c0c:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d7c0e:	6001      	str	r1, [r0, #0]
   d7c10:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d7c12:	b10a      	cbz	r2, d7c18 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d7c14:	f7ff fff6 	bl	d7c04 <_ZN9FuelGauge4lockEv>
    }
}
   d7c18:	4620      	mov	r0, r4
   d7c1a:	bd10      	pop	{r4, pc}

000d7c1c <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d7c1c:	b538      	push	{r3, r4, r5, lr}
   d7c1e:	4604      	mov	r4, r0
   d7c20:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7c22:	f001 f897 	bl	d8d54 <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d7c26:	462a      	mov	r2, r5
   d7c28:	4601      	mov	r1, r0
   d7c2a:	4620      	mov	r0, r4
   d7c2c:	f7ff ffed 	bl	d7c0a <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d7c30:	4620      	mov	r0, r4
   d7c32:	bd38      	pop	{r3, r4, r5, pc}

000d7c34 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d7c34:	6800      	ldr	r0, [r0, #0]
   d7c36:	f000 bb79 	b.w	d832c <_ZN7TwoWire6unlockEv>

000d7c3a <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d7c3a:	b510      	push	{r4, lr}
{
    if (lock_) {
   d7c3c:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d7c3e:	4604      	mov	r4, r0
{
    if (lock_) {
   d7c40:	b10b      	cbz	r3, d7c46 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d7c42:	f7ff fff7 	bl	d7c34 <_ZN9FuelGauge6unlockEv>
    }
}
   d7c46:	4620      	mov	r0, r4
   d7c48:	bd10      	pop	{r4, pc}

000d7c4a <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d7c4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7c4c:	4604      	mov	r4, r0
   d7c4e:	4616      	mov	r6, r2
   d7c50:	461d      	mov	r5, r3
   d7c52:	460f      	mov	r7, r1
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d7c54:	f7ff ffd6 	bl	d7c04 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   d7c58:	6820      	ldr	r0, [r4, #0]
   d7c5a:	2136      	movs	r1, #54	; 0x36
   d7c5c:	f000 fb52 	bl	d8304 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
   d7c60:	6820      	ldr	r0, [r4, #0]
   d7c62:	6803      	ldr	r3, [r0, #0]
   d7c64:	4639      	mov	r1, r7
   d7c66:	689b      	ldr	r3, [r3, #8]
   d7c68:	4798      	blx	r3
    i2c_.endTransmission(true);
   d7c6a:	2101      	movs	r1, #1
   d7c6c:	6820      	ldr	r0, [r4, #0]
   d7c6e:	f000 fb4c 	bl	d830a <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
   d7c72:	2202      	movs	r2, #2
   d7c74:	2136      	movs	r1, #54	; 0x36
   d7c76:	2301      	movs	r3, #1
   d7c78:	6820      	ldr	r0, [r4, #0]
   d7c7a:	f000 fb2d 	bl	d82d8 <_ZN7TwoWire11requestFromEhjh>
    MSB = i2c_.read();
   d7c7e:	6820      	ldr	r0, [r4, #0]
   d7c80:	6803      	ldr	r3, [r0, #0]
   d7c82:	695b      	ldr	r3, [r3, #20]
   d7c84:	4798      	blx	r3
   d7c86:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
   d7c88:	6820      	ldr	r0, [r4, #0]
   d7c8a:	6803      	ldr	r3, [r0, #0]
   d7c8c:	695b      	ldr	r3, [r3, #20]
   d7c8e:	4798      	blx	r3
   d7c90:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d7c92:	4620      	mov	r0, r4
}
   d7c94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d7c98:	f7ff bfcc 	b.w	d7c34 <_ZN9FuelGauge6unlockEv>

000d7c9c <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
   d7c9c:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d7c9e:	ab02      	add	r3, sp, #8
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d7ca0:	2200      	movs	r2, #0
	byte LSB = 0;
   d7ca2:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d7ca6:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
   d7caa:	2104      	movs	r1, #4
   d7cac:	f10d 0206 	add.w	r2, sp, #6
   d7cb0:	f7ff ffcb 	bl	d7c4a <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d7cb4:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d7cb8:	f001 fb2e 	bl	d9318 <__aeabi_i2d>
   d7cbc:	2200      	movs	r2, #0
   d7cbe:	4b09      	ldr	r3, [pc, #36]	; (d7ce4 <_ZN9FuelGauge6getSoCEv+0x48>)
   d7cc0:	f001 fb90 	bl	d93e4 <__aeabi_dmul>
   d7cc4:	f001 fda0 	bl	d9808 <__aeabi_d2f>
   d7cc8:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d7ccc:	ee00 3a10 	vmov	s0, r3
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d7cd0:	ee07 0a90 	vmov	s15, r0
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d7cd4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d7cd8:	ee37 0a80 	vadd.f32	s0, s15, s0
   d7cdc:	b003      	add	sp, #12
   d7cde:	f85d fb04 	ldr.w	pc, [sp], #4
   d7ce2:	bf00      	nop
   d7ce4:	3f700000 	.word	0x3f700000

000d7ce8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7ce8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7cea:	4b0c      	ldr	r3, [pc, #48]	; (d7d1c <serialEventRun+0x34>)
   d7cec:	b133      	cbz	r3, d7cfc <serialEventRun+0x14>
   d7cee:	f000 f977 	bl	d7fe0 <_Z16_fetch_usbserialv>
   d7cf2:	6803      	ldr	r3, [r0, #0]
   d7cf4:	691b      	ldr	r3, [r3, #16]
   d7cf6:	4798      	blx	r3
   d7cf8:	2800      	cmp	r0, #0
   d7cfa:	dc09      	bgt.n	d7d10 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d7cfc:	4b08      	ldr	r3, [pc, #32]	; (d7d20 <serialEventRun+0x38>)
   d7cfe:	b163      	cbz	r3, d7d1a <serialEventRun+0x32>
   d7d00:	f000 fa6a 	bl	d81d8 <_Z22__fetch_global_Serial1v>
   d7d04:	6803      	ldr	r3, [r0, #0]
   d7d06:	691b      	ldr	r3, [r3, #16]
   d7d08:	4798      	blx	r3
   d7d0a:	2800      	cmp	r0, #0
   d7d0c:	dc03      	bgt.n	d7d16 <serialEventRun+0x2e>
   d7d0e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7d10:	f3af 8000 	nop.w
   d7d14:	e7f2      	b.n	d7cfc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d7d16:	f3af 8000 	nop.w
   d7d1a:	bd08      	pop	{r3, pc}
	...

000d7d24 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7d24:	b508      	push	{r3, lr}
	serialEventRun();
   d7d26:	f7ff ffdf 	bl	d7ce8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7d2a:	f7ff f921 	bl	d6f70 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7d2e:	4b01      	ldr	r3, [pc, #4]	; (d7d34 <_post_loop+0x10>)
   d7d30:	6018      	str	r0, [r3, #0]
   d7d32:	bd08      	pop	{r3, pc}
   d7d34:	2003e528 	.word	0x2003e528

000d7d38 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7d38:	4802      	ldr	r0, [pc, #8]	; (d7d44 <_Z33system_initialize_user_backup_ramv+0xc>)
   d7d3a:	4a03      	ldr	r2, [pc, #12]	; (d7d48 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7d3c:	4903      	ldr	r1, [pc, #12]	; (d7d4c <_Z33system_initialize_user_backup_ramv+0x14>)
   d7d3e:	1a12      	subs	r2, r2, r0
   d7d40:	f001 bdcf 	b.w	d98e2 <memcpy>
   d7d44:	2003f400 	.word	0x2003f400
   d7d48:	2003f404 	.word	0x2003f404
   d7d4c:	000da0d0 	.word	0x000da0d0

000d7d50 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7d50:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7d52:	2300      	movs	r3, #0
   d7d54:	9300      	str	r3, [sp, #0]
   d7d56:	461a      	mov	r2, r3
   d7d58:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7d5c:	f7ff faf2 	bl	d7344 <system_ctrl_set_result>
}
   d7d60:	b003      	add	sp, #12
   d7d62:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7d68 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7d68:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7d6a:	8843      	ldrh	r3, [r0, #2]
   d7d6c:	2b0a      	cmp	r3, #10
   d7d6e:	d008      	beq.n	d7d82 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7d70:	2b50      	cmp	r3, #80	; 0x50
   d7d72:	d109      	bne.n	d7d88 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7d74:	4b09      	ldr	r3, [pc, #36]	; (d7d9c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7d76:	681b      	ldr	r3, [r3, #0]
   d7d78:	b13b      	cbz	r3, d7d8a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7d7a:	b003      	add	sp, #12
   d7d7c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7d80:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d7d82:	f7ff ffe5 	bl	d7d50 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d7d86:	e006      	b.n	d7d96 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7d88:	2300      	movs	r3, #0
   d7d8a:	9300      	str	r3, [sp, #0]
   d7d8c:	461a      	mov	r2, r3
   d7d8e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7d92:	f7ff fad7 	bl	d7344 <system_ctrl_set_result>
        break;
    }
}
   d7d96:	b003      	add	sp, #12
   d7d98:	f85d fb04 	ldr.w	pc, [sp], #4
   d7d9c:	2003e1dc 	.word	0x2003e1dc

000d7da0 <module_user_init_hook>:

void module_user_init_hook()
{
   d7da0:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7da2:	4c10      	ldr	r4, [pc, #64]	; (d7de4 <module_user_init_hook+0x44>)
   d7da4:	4d10      	ldr	r5, [pc, #64]	; (d7de8 <module_user_init_hook+0x48>)
   d7da6:	6823      	ldr	r3, [r4, #0]
   d7da8:	42ab      	cmp	r3, r5
   d7daa:	4b10      	ldr	r3, [pc, #64]	; (d7dec <module_user_init_hook+0x4c>)
   d7dac:	bf0c      	ite	eq
   d7dae:	2201      	moveq	r2, #1
   d7db0:	2200      	movne	r2, #0
   d7db2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7db4:	d002      	beq.n	d7dbc <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d7db6:	f7ff ffbf 	bl	d7d38 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7dba:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7dbc:	f7ff f8c8 	bl	d6f50 <HAL_RNG_GetRandomNumber>
   d7dc0:	4604      	mov	r4, r0
    srand(seed);
   d7dc2:	f001 fda1 	bl	d9908 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7dc6:	4b0a      	ldr	r3, [pc, #40]	; (d7df0 <module_user_init_hook+0x50>)
   d7dc8:	b113      	cbz	r3, d7dd0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d7dca:	4620      	mov	r0, r4
   d7dcc:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7dd0:	2100      	movs	r1, #0
   d7dd2:	4807      	ldr	r0, [pc, #28]	; (d7df0 <module_user_init_hook+0x50>)
   d7dd4:	f7ff fb30 	bl	d7438 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7dd8:	2100      	movs	r1, #0
   d7dda:	4806      	ldr	r0, [pc, #24]	; (d7df4 <module_user_init_hook+0x54>)
}
   d7ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7de0:	f7ff baa6 	b.w	d7330 <system_ctrl_set_app_request_handler>
   d7de4:	2003f400 	.word	0x2003f400
   d7de8:	9a271c1e 	.word	0x9a271c1e
   d7dec:	2003e1e0 	.word	0x2003e1e0
   d7df0:	00000000 	.word	0x00000000
   d7df4:	000d7d69 	.word	0x000d7d69

000d7df8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7df8:	4770      	bx	lr

000d7dfa <_ZN9IPAddressD0Ev>:
   d7dfa:	b510      	push	{r4, lr}
   d7dfc:	2118      	movs	r1, #24
   d7dfe:	4604      	mov	r4, r0
   d7e00:	f000 ffdc 	bl	d8dbc <_ZdlPvj>
   d7e04:	4620      	mov	r0, r4
   d7e06:	bd10      	pop	{r4, pc}

000d7e08 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7e08:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7e0a:	7d03      	ldrb	r3, [r0, #20]
   d7e0c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7e0e:	b08d      	sub	sp, #52	; 0x34
   d7e10:	460e      	mov	r6, r1
   d7e12:	f100 0704 	add.w	r7, r0, #4
   d7e16:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7e1a:	d002      	beq.n	d7e22 <_ZNK9IPAddress7printToER5Print+0x1a>
   d7e1c:	f100 0508 	add.w	r5, r0, #8
   d7e20:	e018      	b.n	d7e54 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7e22:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7e24:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7e26:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7e2a:	232f      	movs	r3, #47	; 0x2f
   d7e2c:	462a      	mov	r2, r5
   d7e2e:	200a      	movs	r0, #10
   d7e30:	f7ff f92e 	bl	d7090 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7e34:	4628      	mov	r0, r5
   d7e36:	f001 fd8f 	bl	d9958 <strlen>
   d7e3a:	6833      	ldr	r3, [r6, #0]
   d7e3c:	4602      	mov	r2, r0
   d7e3e:	68db      	ldr	r3, [r3, #12]
   d7e40:	4629      	mov	r1, r5
   d7e42:	4630      	mov	r0, r6
   d7e44:	4798      	blx	r3
   d7e46:	e00f      	b.n	d7e68 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d7e48:	b124      	cbz	r4, d7e54 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d7e4a:	212e      	movs	r1, #46	; 0x2e
   d7e4c:	4630      	mov	r0, r6
   d7e4e:	f7ff fd6b 	bl	d7928 <_ZN5Print5printEc>
   d7e52:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d7e54:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7e58:	220a      	movs	r2, #10
   d7e5a:	4630      	mov	r0, r6
   d7e5c:	f7ff fd7d 	bl	d795a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7e60:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7e62:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7e64:	d1f0      	bne.n	d7e48 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7e66:	4620      	mov	r0, r4
    }
    return n;
}
   d7e68:	b00d      	add	sp, #52	; 0x34
   d7e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7e6c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d7e6c:	b510      	push	{r4, lr}
   d7e6e:	4b05      	ldr	r3, [pc, #20]	; (d7e84 <_ZN9IPAddressC1Ev+0x18>)
   d7e70:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7e72:	2211      	movs	r2, #17
   d7e74:	f840 3b04 	str.w	r3, [r0], #4
   d7e78:	2100      	movs	r1, #0
   d7e7a:	f001 fd3d 	bl	d98f8 <memset>
{
    clear();
}
   d7e7e:	4620      	mov	r0, r4
   d7e80:	bd10      	pop	{r4, pc}
   d7e82:	bf00      	nop
   d7e84:	000d9e14 	.word	0x000d9e14

000d7e88 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d7e88:	4603      	mov	r3, r0
   d7e8a:	4a07      	ldr	r2, [pc, #28]	; (d7ea8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7e8c:	b510      	push	{r4, lr}
   d7e8e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d7e92:	f101 0210 	add.w	r2, r1, #16
   d7e96:	f851 4b04 	ldr.w	r4, [r1], #4
   d7e9a:	f843 4b04 	str.w	r4, [r3], #4
   d7e9e:	4291      	cmp	r1, r2
   d7ea0:	d1f9      	bne.n	d7e96 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7ea2:	780a      	ldrb	r2, [r1, #0]
   d7ea4:	701a      	strb	r2, [r3, #0]
}
   d7ea6:	bd10      	pop	{r4, pc}
   d7ea8:	000d9e14 	.word	0x000d9e14

000d7eac <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d7eac:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d7eae:	2b04      	cmp	r3, #4
   d7eb0:	d101      	bne.n	d7eb6 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d7eb2:	6840      	ldr	r0, [r0, #4]
   d7eb4:	e008      	b.n	d7ec8 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d7eb6:	2b06      	cmp	r3, #6
   d7eb8:	d10a      	bne.n	d7ed0 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7eba:	6843      	ldr	r3, [r0, #4]
   d7ebc:	b953      	cbnz	r3, d7ed4 <_ZNK9IPAddresscvbEv+0x28>
   d7ebe:	6883      	ldr	r3, [r0, #8]
   d7ec0:	b943      	cbnz	r3, d7ed4 <_ZNK9IPAddresscvbEv+0x28>
   d7ec2:	68c3      	ldr	r3, [r0, #12]
   d7ec4:	b933      	cbnz	r3, d7ed4 <_ZNK9IPAddresscvbEv+0x28>
   d7ec6:	6900      	ldr	r0, [r0, #16]
   d7ec8:	3000      	adds	r0, #0
   d7eca:	bf18      	it	ne
   d7ecc:	2001      	movne	r0, #1
   d7ece:	4770      	bx	lr
    } else {
        return false;
   d7ed0:	2000      	movs	r0, #0
   d7ed2:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7ed4:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d7ed6:	4770      	bx	lr

000d7ed8 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d7ed8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7eda:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7ede:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7ee2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7ee6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d7eea:	2304      	movs	r3, #4
   d7eec:	6041      	str	r1, [r0, #4]
   d7eee:	7503      	strb	r3, [r0, #20]
   d7ef0:	bd10      	pop	{r4, pc}

000d7ef2 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d7ef2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7ef4:	780d      	ldrb	r5, [r1, #0]
   d7ef6:	788b      	ldrb	r3, [r1, #2]
   d7ef8:	784a      	ldrb	r2, [r1, #1]
   d7efa:	78c9      	ldrb	r1, [r1, #3]
   d7efc:	9100      	str	r1, [sp, #0]
   d7efe:	4629      	mov	r1, r5
   d7f00:	f7ff ffea 	bl	d7ed8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d7f04:	b003      	add	sp, #12
   d7f06:	bd30      	pop	{r4, r5, pc}

000d7f08 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
   d7f08:	b510      	push	{r4, lr}
   d7f0a:	4b03      	ldr	r3, [pc, #12]	; (d7f18 <_ZN9IPAddressC1EPKh+0x10>)
   d7f0c:	6003      	str	r3, [r0, #0]
   d7f0e:	4604      	mov	r4, r0
{
    *this = address;
   d7f10:	f7ff ffef 	bl	d7ef2 <_ZN9IPAddressaSEPKh>
}
   d7f14:	4620      	mov	r0, r4
   d7f16:	bd10      	pop	{r4, pc}
   d7f18:	000d9e14 	.word	0x000d9e14

000d7f1c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7f1c:	7441      	strb	r1, [r0, #17]
   d7f1e:	4770      	bx	lr

000d7f20 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7f20:	4770      	bx	lr

000d7f22 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d7f22:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7f24:	2100      	movs	r1, #0
   d7f26:	7c00      	ldrb	r0, [r0, #16]
   d7f28:	f7ff f9ba 	bl	d72a0 <HAL_USB_USART_Receive_Data>
}
   d7f2c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7f30:	bf28      	it	cs
   d7f32:	f04f 30ff 	movcs.w	r0, #4294967295
   d7f36:	bd08      	pop	{r3, pc}

000d7f38 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7f38:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7f3a:	2101      	movs	r1, #1
   d7f3c:	7c00      	ldrb	r0, [r0, #16]
   d7f3e:	f7ff f9af 	bl	d72a0 <HAL_USB_USART_Receive_Data>
}
   d7f42:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7f46:	bf28      	it	cs
   d7f48:	f04f 30ff 	movcs.w	r0, #4294967295
   d7f4c:	bd08      	pop	{r3, pc}

000d7f4e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d7f4e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7f50:	7c00      	ldrb	r0, [r0, #16]
   d7f52:	f7ff f99d 	bl	d7290 <HAL_USB_USART_Available_Data_For_Write>
}
   d7f56:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7f5a:	bd08      	pop	{r3, pc}

000d7f5c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7f5c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7f5e:	7c00      	ldrb	r0, [r0, #16]
   d7f60:	f7ff f98e 	bl	d7280 <HAL_USB_USART_Available_Data>
}
   d7f64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7f68:	bd08      	pop	{r3, pc}

000d7f6a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7f6a:	7c00      	ldrb	r0, [r0, #16]
   d7f6c:	f7ff b9a8 	b.w	d72c0 <HAL_USB_USART_Flush_Data>

000d7f70 <_ZN9USBSerialD0Ev>:
   d7f70:	b510      	push	{r4, lr}
   d7f72:	2114      	movs	r1, #20
   d7f74:	4604      	mov	r4, r0
   d7f76:	f000 ff21 	bl	d8dbc <_ZdlPvj>
   d7f7a:	4620      	mov	r0, r4
   d7f7c:	bd10      	pop	{r4, pc}

000d7f7e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7f7e:	b538      	push	{r3, r4, r5, lr}
   d7f80:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7f82:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7f84:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7f86:	f7ff f983 	bl	d7290 <HAL_USB_USART_Available_Data_For_Write>
   d7f8a:	2800      	cmp	r0, #0
   d7f8c:	dc01      	bgt.n	d7f92 <_ZN9USBSerial5writeEh+0x14>
   d7f8e:	7c60      	ldrb	r0, [r4, #17]
   d7f90:	b128      	cbz	r0, d7f9e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7f92:	4629      	mov	r1, r5
   d7f94:	7c20      	ldrb	r0, [r4, #16]
   d7f96:	f7ff f98b 	bl	d72b0 <HAL_USB_USART_Send_Data>
   d7f9a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d7f9e:	bd38      	pop	{r3, r4, r5, pc}

000d7fa0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7fa0:	b510      	push	{r4, lr}
   d7fa2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7fa4:	2300      	movs	r3, #0
   d7fa6:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7fa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7fac:	60a3      	str	r3, [r4, #8]
   d7fae:	4b05      	ldr	r3, [pc, #20]	; (d7fc4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7fb0:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d7fb2:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7fb4:	4608      	mov	r0, r1
{
  _serial = serial;
   d7fb6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7fb8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d7fba:	4611      	mov	r1, r2
   d7fbc:	f7ff f950 	bl	d7260 <HAL_USB_USART_Init>
}
   d7fc0:	4620      	mov	r0, r4
   d7fc2:	bd10      	pop	{r4, pc}
   d7fc4:	000d9e28 	.word	0x000d9e28

000d7fc8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7fc8:	2200      	movs	r2, #0
   d7fca:	7c00      	ldrb	r0, [r0, #16]
   d7fcc:	f7ff b950 	b.w	d7270 <HAL_USB_USART_Begin>

000d7fd0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7fd0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7fd2:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7fd4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7fd6:	2100      	movs	r1, #0
   d7fd8:	f001 fc8e 	bl	d98f8 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7fdc:	4620      	mov	r0, r4
   d7fde:	bd10      	pop	{r4, pc}

000d7fe0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7fe0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7fe2:	4d0e      	ldr	r5, [pc, #56]	; (d801c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7fe4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7fe6:	a801      	add	r0, sp, #4
   d7fe8:	f7ff fff2 	bl	d7fd0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7fec:	6829      	ldr	r1, [r5, #0]
   d7fee:	f011 0401 	ands.w	r4, r1, #1
   d7ff2:	d110      	bne.n	d8016 <_Z16_fetch_usbserialv+0x36>
   d7ff4:	4628      	mov	r0, r5
   d7ff6:	f7fc f856 	bl	d40a6 <__cxa_guard_acquire>
   d7ffa:	b160      	cbz	r0, d8016 <_Z16_fetch_usbserialv+0x36>
   d7ffc:	aa01      	add	r2, sp, #4
   d7ffe:	4621      	mov	r1, r4
   d8000:	4807      	ldr	r0, [pc, #28]	; (d8020 <_Z16_fetch_usbserialv+0x40>)
   d8002:	f7ff ffcd 	bl	d7fa0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d8006:	4628      	mov	r0, r5
   d8008:	f7fc f852 	bl	d40b0 <__cxa_guard_release>
   d800c:	4a05      	ldr	r2, [pc, #20]	; (d8024 <_Z16_fetch_usbserialv+0x44>)
   d800e:	4906      	ldr	r1, [pc, #24]	; (d8028 <_Z16_fetch_usbserialv+0x48>)
   d8010:	4803      	ldr	r0, [pc, #12]	; (d8020 <_Z16_fetch_usbserialv+0x40>)
   d8012:	f000 fec5 	bl	d8da0 <__aeabi_atexit>
	return _usbserial;
}
   d8016:	4802      	ldr	r0, [pc, #8]	; (d8020 <_Z16_fetch_usbserialv+0x40>)
   d8018:	b007      	add	sp, #28
   d801a:	bd30      	pop	{r4, r5, pc}
   d801c:	2003e1e4 	.word	0x2003e1e4
   d8020:	2003e1e8 	.word	0x2003e1e8
   d8024:	2003db4c 	.word	0x2003db4c
   d8028:	000d7f21 	.word	0x000d7f21

000d802c <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d802c:	4700      	bx	r0
	...

000d8030 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d8030:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8032:	b085      	sub	sp, #20
   d8034:	461c      	mov	r4, r3
   d8036:	460e      	mov	r6, r1
   d8038:	4617      	mov	r7, r2
   d803a:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   d803c:	f7fe ff00 	bl	d6e40 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   d8040:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d8042:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8044:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d8048:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d804a:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d804e:	bfa5      	ittet	ge
   d8050:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d8054:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d8058:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d805a:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d805c:	9300      	str	r3, [sp, #0]
   d805e:	4632      	mov	r2, r6
   d8060:	463b      	mov	r3, r7
   d8062:	4906      	ldr	r1, [pc, #24]	; (d807c <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d8064:	bfa8      	it	ge
   d8066:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d806a:	4628      	mov	r0, r5
   d806c:	f7fe fee0 	bl	d6e30 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d8070:	fab0 f080 	clz	r0, r0
   d8074:	0940      	lsrs	r0, r0, #5
   d8076:	b005      	add	sp, #20
   d8078:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d807a:	bf00      	nop
   d807c:	000d802d 	.word	0x000d802d

000d8080 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d8080:	f7fe beee 	b.w	d6e60 <HAL_Interrupts_Disable_All>

000d8084 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d8084:	f7fe bee4 	b.w	d6e50 <HAL_Interrupts_Enable_All>

000d8088 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d8088:	2200      	movs	r2, #0
   d808a:	4611      	mov	r1, r2
   d808c:	6840      	ldr	r0, [r0, #4]
   d808e:	f7ff b97b 	b.w	d7388 <network_ready>

000d8092 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8092:	2200      	movs	r2, #0
   d8094:	4611      	mov	r1, r2
   d8096:	6840      	ldr	r0, [r0, #4]
   d8098:	f7ff b996 	b.w	d73c8 <network_listening>

000d809c <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d809c:	2200      	movs	r2, #0
   d809e:	4611      	mov	r1, r2
   d80a0:	6840      	ldr	r0, [r0, #4]
   d80a2:	f7ff b9a1 	b.w	d73e8 <network_get_listen_timeout>

000d80a6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d80a6:	2200      	movs	r2, #0
   d80a8:	6840      	ldr	r0, [r0, #4]
   d80aa:	f7ff b995 	b.w	d73d8 <network_set_listen_timeout>

000d80ae <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d80ae:	2200      	movs	r2, #0
   d80b0:	f081 0101 	eor.w	r1, r1, #1
   d80b4:	6840      	ldr	r0, [r0, #4]
   d80b6:	f7ff b97f 	b.w	d73b8 <network_listen>

000d80ba <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d80ba:	2300      	movs	r3, #0
   d80bc:	461a      	mov	r2, r3
   d80be:	4619      	mov	r1, r3
   d80c0:	6840      	ldr	r0, [r0, #4]
   d80c2:	f7ff b971 	b.w	d73a8 <network_off>

000d80c6 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d80c6:	2300      	movs	r3, #0
   d80c8:	461a      	mov	r2, r3
   d80ca:	4619      	mov	r1, r3
   d80cc:	6840      	ldr	r0, [r0, #4]
   d80ce:	f7ff b963 	b.w	d7398 <network_on>

000d80d2 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d80d2:	2200      	movs	r2, #0
   d80d4:	4611      	mov	r1, r2
   d80d6:	6840      	ldr	r0, [r0, #4]
   d80d8:	f7ff b946 	b.w	d7368 <network_connecting>

000d80dc <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d80dc:	2200      	movs	r2, #0
   d80de:	2102      	movs	r1, #2
   d80e0:	6840      	ldr	r0, [r0, #4]
   d80e2:	f7ff b949 	b.w	d7378 <network_disconnect>

000d80e6 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d80e6:	2300      	movs	r3, #0
   d80e8:	461a      	mov	r2, r3
   d80ea:	6840      	ldr	r0, [r0, #4]
   d80ec:	f7ff b934 	b.w	d7358 <network_connect>

000d80f0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d80f0:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d80f2:	4c08      	ldr	r4, [pc, #32]	; (d8114 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d80f4:	2528      	movs	r5, #40	; 0x28
   d80f6:	462a      	mov	r2, r5
   d80f8:	2100      	movs	r1, #0
   d80fa:	4620      	mov	r0, r4
   d80fc:	f001 fbfc 	bl	d98f8 <memset>
        cid = -1;
   d8100:	f04f 33ff 	mov.w	r3, #4294967295
   d8104:	6063      	str	r3, [r4, #4]
   d8106:	4b04      	ldr	r3, [pc, #16]	; (d8118 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d8108:	8025      	strh	r5, [r4, #0]
   d810a:	2204      	movs	r2, #4
   d810c:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d810e:	4a03      	ldr	r2, [pc, #12]	; (d811c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d8110:	601a      	str	r2, [r3, #0]
   d8112:	bd38      	pop	{r3, r4, r5, pc}
   d8114:	2003e204 	.word	0x2003e204
   d8118:	2003e1fc 	.word	0x2003e1fc
   d811c:	000d9e58 	.word	0x000d9e58

000d8120 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d8120:	4770      	bx	lr

000d8122 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8122:	7441      	strb	r1, [r0, #17]
   d8124:	4770      	bx	lr

000d8126 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d8126:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d8128:	7c00      	ldrb	r0, [r0, #16]
   d812a:	f7ff f801 	bl	d7130 <HAL_USART_Available_Data_For_Write>
}
   d812e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8132:	bd08      	pop	{r3, pc}

000d8134 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d8134:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d8136:	7c00      	ldrb	r0, [r0, #16]
   d8138:	f7fe ffd2 	bl	d70e0 <HAL_USART_Available_Data>
}
   d813c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8140:	bd08      	pop	{r3, pc}

000d8142 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d8142:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d8144:	7c00      	ldrb	r0, [r0, #16]
   d8146:	f7fe ffdb 	bl	d7100 <HAL_USART_Peek_Data>
}
   d814a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d814e:	bf28      	it	cs
   d8150:	f04f 30ff 	movcs.w	r0, #4294967295
   d8154:	bd08      	pop	{r3, pc}

000d8156 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d8156:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d8158:	7c00      	ldrb	r0, [r0, #16]
   d815a:	f7fe ffc9 	bl	d70f0 <HAL_USART_Read_Data>
}
   d815e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8162:	bf28      	it	cs
   d8164:	f04f 30ff 	movcs.w	r0, #4294967295
   d8168:	bd08      	pop	{r3, pc}

000d816a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d816a:	7c00      	ldrb	r0, [r0, #16]
   d816c:	f7fe bfd0 	b.w	d7110 <HAL_USART_Flush_Data>

000d8170 <_ZN11USARTSerialD0Ev>:
   d8170:	b510      	push	{r4, lr}
   d8172:	2114      	movs	r1, #20
   d8174:	4604      	mov	r4, r0
   d8176:	f000 fe21 	bl	d8dbc <_ZdlPvj>
   d817a:	4620      	mov	r0, r4
   d817c:	bd10      	pop	{r4, pc}

000d817e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d817e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d8180:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d8182:	4604      	mov	r4, r0
   d8184:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d8186:	b925      	cbnz	r5, d8192 <_ZN11USARTSerial5writeEh+0x14>
   d8188:	7c00      	ldrb	r0, [r0, #16]
   d818a:	f7fe ffd1 	bl	d7130 <HAL_USART_Available_Data_For_Write>
   d818e:	2800      	cmp	r0, #0
   d8190:	dd05      	ble.n	d819e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d8192:	4631      	mov	r1, r6
   d8194:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d8196:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d819a:	f7fe bf99 	b.w	d70d0 <HAL_USART_Write_Data>
  }
  return 0;
}
   d819e:	4628      	mov	r0, r5
   d81a0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d81a4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d81a4:	b510      	push	{r4, lr}
   d81a6:	4604      	mov	r4, r0
   d81a8:	4608      	mov	r0, r1
   d81aa:	4611      	mov	r1, r2
   d81ac:	2200      	movs	r2, #0
   d81ae:	6062      	str	r2, [r4, #4]
   d81b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d81b4:	60a2      	str	r2, [r4, #8]
   d81b6:	4a05      	ldr	r2, [pc, #20]	; (d81cc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d81b8:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d81ba:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d81bc:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d81be:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d81c0:	461a      	mov	r2, r3
   d81c2:	f7fe ff7d 	bl	d70c0 <HAL_USART_Init>
}
   d81c6:	4620      	mov	r0, r4
   d81c8:	bd10      	pop	{r4, pc}
   d81ca:	bf00      	nop
   d81cc:	000d9e8c 	.word	0x000d9e8c

000d81d0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d81d0:	7c00      	ldrb	r0, [r0, #16]
   d81d2:	f7fe bfa5 	b.w	d7120 <HAL_USART_Is_Enabled>
	...

000d81d8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d81d8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d81da:	4d0c      	ldr	r5, [pc, #48]	; (d820c <_Z22__fetch_global_Serial1v+0x34>)
   d81dc:	6829      	ldr	r1, [r5, #0]
   d81de:	f011 0401 	ands.w	r4, r1, #1
   d81e2:	d111      	bne.n	d8208 <_Z22__fetch_global_Serial1v+0x30>
   d81e4:	4628      	mov	r0, r5
   d81e6:	f7fb ff5e 	bl	d40a6 <__cxa_guard_acquire>
   d81ea:	b168      	cbz	r0, d8208 <_Z22__fetch_global_Serial1v+0x30>
   d81ec:	4a08      	ldr	r2, [pc, #32]	; (d8210 <_Z22__fetch_global_Serial1v+0x38>)
   d81ee:	4b09      	ldr	r3, [pc, #36]	; (d8214 <_Z22__fetch_global_Serial1v+0x3c>)
   d81f0:	4809      	ldr	r0, [pc, #36]	; (d8218 <_Z22__fetch_global_Serial1v+0x40>)
   d81f2:	4621      	mov	r1, r4
   d81f4:	f7ff ffd6 	bl	d81a4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d81f8:	4628      	mov	r0, r5
   d81fa:	f7fb ff59 	bl	d40b0 <__cxa_guard_release>
   d81fe:	4a07      	ldr	r2, [pc, #28]	; (d821c <_Z22__fetch_global_Serial1v+0x44>)
   d8200:	4907      	ldr	r1, [pc, #28]	; (d8220 <_Z22__fetch_global_Serial1v+0x48>)
   d8202:	4805      	ldr	r0, [pc, #20]	; (d8218 <_Z22__fetch_global_Serial1v+0x40>)
   d8204:	f000 fdcc 	bl	d8da0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d8208:	4803      	ldr	r0, [pc, #12]	; (d8218 <_Z22__fetch_global_Serial1v+0x40>)
   d820a:	bd38      	pop	{r3, r4, r5, pc}
   d820c:	2003e2c4 	.word	0x2003e2c4
   d8210:	2003e2c8 	.word	0x2003e2c8
   d8214:	2003e240 	.word	0x2003e240
   d8218:	2003e22c 	.word	0x2003e22c
   d821c:	2003db4c 	.word	0x2003db4c
   d8220:	000d8121 	.word	0x000d8121

000d8224 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d8224:	4770      	bx	lr

000d8226 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d8226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8228:	4606      	mov	r6, r0
   d822a:	4615      	mov	r5, r2
   d822c:	460c      	mov	r4, r1
   d822e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8230:	42bc      	cmp	r4, r7
   d8232:	d006      	beq.n	d8242 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8234:	6833      	ldr	r3, [r6, #0]
   d8236:	f814 1b01 	ldrb.w	r1, [r4], #1
   d823a:	689b      	ldr	r3, [r3, #8]
   d823c:	4630      	mov	r0, r6
   d823e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8240:	e7f6      	b.n	d8230 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d8242:	4628      	mov	r0, r5
   d8244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8246 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d8246:	2200      	movs	r2, #0
   d8248:	7c00      	ldrb	r0, [r0, #16]
   d824a:	f7fe bf89 	b.w	d7160 <HAL_I2C_Write_Data>

000d824e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d824e:	2100      	movs	r1, #0
   d8250:	7c00      	ldrb	r0, [r0, #16]
   d8252:	f7fe bf8d 	b.w	d7170 <HAL_I2C_Available_Data>

000d8256 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d8256:	2100      	movs	r1, #0
   d8258:	7c00      	ldrb	r0, [r0, #16]
   d825a:	f7fe bf91 	b.w	d7180 <HAL_I2C_Read_Data>

000d825e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d825e:	2100      	movs	r1, #0
   d8260:	7c00      	ldrb	r0, [r0, #16]
   d8262:	f7fe bf95 	b.w	d7190 <HAL_I2C_Peek_Data>

000d8266 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d8266:	2100      	movs	r1, #0
   d8268:	7c00      	ldrb	r0, [r0, #16]
   d826a:	f7fe bf99 	b.w	d71a0 <HAL_I2C_Flush_Data>

000d826e <_ZN7TwoWireD0Ev>:
   d826e:	b510      	push	{r4, lr}
   d8270:	2114      	movs	r1, #20
   d8272:	4604      	mov	r4, r0
   d8274:	f000 fda2 	bl	d8dbc <_ZdlPvj>
   d8278:	4620      	mov	r0, r4
   d827a:	bd10      	pop	{r4, pc}

000d827c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d827c:	b510      	push	{r4, lr}
   d827e:	4604      	mov	r4, r0
   d8280:	2300      	movs	r3, #0
   d8282:	6063      	str	r3, [r4, #4]
   d8284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8288:	60a3      	str	r3, [r4, #8]
   d828a:	4b04      	ldr	r3, [pc, #16]	; (d829c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d828c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d828e:	4608      	mov	r0, r1
   d8290:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d8292:	4611      	mov	r1, r2
   d8294:	f7fe ff94 	bl	d71c0 <HAL_I2C_Init>
}
   d8298:	4620      	mov	r0, r4
   d829a:	bd10      	pop	{r4, pc}
   d829c:	000d9ebc 	.word	0x000d9ebc

000d82a0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d82a0:	b570      	push	{r4, r5, r6, lr}
   d82a2:	460c      	mov	r4, r1
   d82a4:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d82a6:	2514      	movs	r5, #20
   d82a8:	4606      	mov	r6, r0
   d82aa:	462a      	mov	r2, r5
   d82ac:	2100      	movs	r1, #0
   d82ae:	a801      	add	r0, sp, #4
   d82b0:	f001 fb22 	bl	d98f8 <memset>
   d82b4:	7823      	ldrb	r3, [r4, #0]
   d82b6:	f88d 3008 	strb.w	r3, [sp, #8]
   d82ba:	6863      	ldr	r3, [r4, #4]
   d82bc:	9303      	str	r3, [sp, #12]
   d82be:	68e3      	ldr	r3, [r4, #12]
   d82c0:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d82c2:	2200      	movs	r2, #0
   d82c4:	7a23      	ldrb	r3, [r4, #8]
   d82c6:	7c30      	ldrb	r0, [r6, #16]
   d82c8:	f8ad 5004 	strh.w	r5, [sp, #4]
   d82cc:	a901      	add	r1, sp, #4
   d82ce:	9305      	str	r3, [sp, #20]
   d82d0:	f7fe ff8e 	bl	d71f0 <HAL_I2C_Request_Data_Ex>
}
   d82d4:	b006      	add	sp, #24
   d82d6:	bd70      	pop	{r4, r5, r6, pc}

000d82d8 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d82d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d82da:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d82dc:	f88d 1000 	strb.w	r1, [sp]
   d82e0:	f04f 0164 	mov.w	r1, #100	; 0x64
   d82e4:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d82e6:	bf18      	it	ne
   d82e8:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d82ea:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d82ec:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d82ee:	f88d 3008 	strb.w	r3, [sp, #8]
   d82f2:	f7ff ffd5 	bl	d82a0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d82f6:	b005      	add	sp, #20
   d82f8:	f85d fb04 	ldr.w	pc, [sp], #4

000d82fc <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d82fc:	2200      	movs	r2, #0
   d82fe:	7c00      	ldrb	r0, [r0, #16]
   d8300:	f7fe bf1e 	b.w	d7140 <HAL_I2C_Begin_Transmission>

000d8304 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d8304:	b2c9      	uxtb	r1, r1
   d8306:	f7ff bff9 	b.w	d82fc <_ZN7TwoWire17beginTransmissionEh>

000d830a <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d830a:	2200      	movs	r2, #0
   d830c:	7c00      	ldrb	r0, [r0, #16]
   d830e:	f7fe bf1f 	b.w	d7150 <HAL_I2C_End_Transmission>

000d8312 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d8312:	2100      	movs	r1, #0
   d8314:	7c00      	ldrb	r0, [r0, #16]
   d8316:	f7fe bf4b 	b.w	d71b0 <HAL_I2C_Is_Enabled>

000d831a <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d831a:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d831c:	2100      	movs	r1, #0
   d831e:	7c00      	ldrb	r0, [r0, #16]
   d8320:	f7fe ff56 	bl	d71d0 <HAL_I2C_Acquire>
}
   d8324:	fab0 f080 	clz	r0, r0
   d8328:	0940      	lsrs	r0, r0, #5
   d832a:	bd08      	pop	{r3, pc}

000d832c <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d832c:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d832e:	2100      	movs	r1, #0
   d8330:	7c00      	ldrb	r0, [r0, #16]
   d8332:	f7fe ff55 	bl	d71e0 <HAL_I2C_Release>
}
   d8336:	fab0 f080 	clz	r0, r0
   d833a:	0940      	lsrs	r0, r0, #5
   d833c:	bd08      	pop	{r3, pc}

000d833e <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d833e:	2200      	movs	r2, #0
   d8340:	4611      	mov	r1, r2
   d8342:	6840      	ldr	r0, [r0, #4]
   d8344:	f7ff b840 	b.w	d73c8 <network_listening>

000d8348 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8348:	2200      	movs	r2, #0
   d834a:	4611      	mov	r1, r2
   d834c:	6840      	ldr	r0, [r0, #4]
   d834e:	f7ff b84b 	b.w	d73e8 <network_get_listen_timeout>

000d8352 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8352:	2200      	movs	r2, #0
   d8354:	6840      	ldr	r0, [r0, #4]
   d8356:	f7ff b83f 	b.w	d73d8 <network_set_listen_timeout>

000d835a <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d835a:	2200      	movs	r2, #0
   d835c:	f081 0101 	eor.w	r1, r1, #1
   d8360:	6840      	ldr	r0, [r0, #4]
   d8362:	f7ff b829 	b.w	d73b8 <network_listen>

000d8366 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d8366:	2300      	movs	r3, #0
   d8368:	461a      	mov	r2, r3
   d836a:	2101      	movs	r1, #1
   d836c:	6840      	ldr	r0, [r0, #4]
   d836e:	f7ff b81b 	b.w	d73a8 <network_off>

000d8372 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d8372:	2300      	movs	r3, #0
   d8374:	461a      	mov	r2, r3
   d8376:	4619      	mov	r1, r3
   d8378:	6840      	ldr	r0, [r0, #4]
   d837a:	f7ff b80d 	b.w	d7398 <network_on>

000d837e <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d837e:	2200      	movs	r2, #0
   d8380:	4611      	mov	r1, r2
   d8382:	6840      	ldr	r0, [r0, #4]
   d8384:	f7ff b800 	b.w	d7388 <network_ready>

000d8388 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8388:	2200      	movs	r2, #0
   d838a:	4611      	mov	r1, r2
   d838c:	6840      	ldr	r0, [r0, #4]
   d838e:	f7fe bfeb 	b.w	d7368 <network_connecting>

000d8392 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8392:	2200      	movs	r2, #0
   d8394:	2102      	movs	r1, #2
   d8396:	6840      	ldr	r0, [r0, #4]
   d8398:	f7fe bfee 	b.w	d7378 <network_disconnect>

000d839c <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d839c:	2300      	movs	r3, #0
   d839e:	461a      	mov	r2, r3
   d83a0:	6840      	ldr	r0, [r0, #4]
   d83a2:	f7fe bfd9 	b.w	d7358 <network_connect>

000d83a6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d83a6:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d83a8:	4605      	mov	r5, r0
   d83aa:	b188      	cbz	r0, d83d0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d83ac:	6804      	ldr	r4, [r0, #0]
   d83ae:	b14c      	cbz	r4, d83c4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d83b0:	68a3      	ldr	r3, [r4, #8]
   d83b2:	b11b      	cbz	r3, d83bc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d83b4:	2203      	movs	r2, #3
   d83b6:	4621      	mov	r1, r4
   d83b8:	4620      	mov	r0, r4
   d83ba:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d83bc:	2110      	movs	r1, #16
   d83be:	4620      	mov	r0, r4
   d83c0:	f000 fcfc 	bl	d8dbc <_ZdlPvj>
   d83c4:	4628      	mov	r0, r5
   d83c6:	2114      	movs	r1, #20
      }
   d83c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d83cc:	f000 bcf6 	b.w	d8dbc <_ZdlPvj>
   d83d0:	bd38      	pop	{r3, r4, r5, pc}

000d83d2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d83d2:	b110      	cbz	r0, d83da <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d83d4:	6803      	ldr	r3, [r0, #0]
   d83d6:	685b      	ldr	r3, [r3, #4]
   d83d8:	4718      	bx	r3
   d83da:	4770      	bx	lr

000d83dc <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d83dc:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d83de:	6803      	ldr	r3, [r0, #0]
   d83e0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d83e2:	b1bb      	cbz	r3, d8414 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d83e4:	6858      	ldr	r0, [r3, #4]
   d83e6:	f7fe fdf3 	bl	d6fd0 <os_thread_is_current>
   d83ea:	b978      	cbnz	r0, d840c <_ZN6ThreadD1Ev+0x30>
   d83ec:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d83ee:	7c5a      	ldrb	r2, [r3, #17]
   d83f0:	b912      	cbnz	r2, d83f8 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d83f2:	6858      	ldr	r0, [r3, #4]
   d83f4:	f7fe fdfc 	bl	d6ff0 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d83f8:	6823      	ldr	r3, [r4, #0]
   d83fa:	6858      	ldr	r0, [r3, #4]
   d83fc:	f7fe fe00 	bl	d7000 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8400:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d8402:	2300      	movs	r3, #0
   d8404:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d8406:	b128      	cbz	r0, d8414 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d8408:	f7ff ffcd 	bl	d83a6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d840c:	6820      	ldr	r0, [r4, #0]
   d840e:	b108      	cbz	r0, d8414 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d8410:	f7ff ffc9 	bl	d83a6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d8414:	4620      	mov	r0, r4
   d8416:	bd10      	pop	{r4, pc}

000d8418 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d8418:	b538      	push	{r3, r4, r5, lr}
   d841a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d841c:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d8420:	b108      	cbz	r0, d8426 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d8422:	f7fb fe3e 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d8426:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d842a:	b108      	cbz	r0, d8430 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d842c:	f7fe fe20 	bl	d7070 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8430:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d8434:	b135      	cbz	r5, d8444 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8436:	4628      	mov	r0, r5
   d8438:	f7ff ffd0 	bl	d83dc <_ZN6ThreadD1Ev>
   d843c:	2104      	movs	r1, #4
   d843e:	4628      	mov	r0, r5
   d8440:	f000 fcbc 	bl	d8dbc <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8444:	6820      	ldr	r0, [r4, #0]
   d8446:	b108      	cbz	r0, d844c <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d8448:	f7ff ffc3 	bl	d83d2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d844c:	4620      	mov	r0, r4
   d844e:	bd38      	pop	{r3, r4, r5, pc}

000d8450 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d8450:	b510      	push	{r4, lr}
   d8452:	4b04      	ldr	r3, [pc, #16]	; (d8464 <_ZN5spark9MeshClassD1Ev+0x14>)
   d8454:	4604      	mov	r4, r0
   d8456:	f840 3b08 	str.w	r3, [r0], #8
   d845a:	f7ff ffdd 	bl	d8418 <_ZN5spark11MeshPublishD1Ev>
   d845e:	4620      	mov	r0, r4
   d8460:	bd10      	pop	{r4, pc}
   d8462:	bf00      	nop
   d8464:	000d9ee4 	.word	0x000d9ee4

000d8468 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d8468:	b538      	push	{r3, r4, r5, lr}
   d846a:	4c0e      	ldr	r4, [pc, #56]	; (d84a4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d846c:	4b0e      	ldr	r3, [pc, #56]	; (d84a8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d846e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d8470:	2500      	movs	r5, #0
   d8472:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d8474:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d8478:	6063      	str	r3, [r4, #4]
   d847a:	60a5      	str	r5, [r4, #8]
   d847c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8480:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d8484:	f7fe fdec 	bl	d7060 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d8488:	4b08      	ldr	r3, [pc, #32]	; (d84ac <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d848a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d848e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d8492:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d8494:	4620      	mov	r0, r4
   d8496:	4a06      	ldr	r2, [pc, #24]	; (d84b0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d8498:	4906      	ldr	r1, [pc, #24]	; (d84b4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d849a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d849e:	f000 bc7f 	b.w	d8da0 <__aeabi_atexit>
   d84a2:	bf00      	nop
   d84a4:	2003e34c 	.word	0x2003e34c
   d84a8:	000d9f98 	.word	0x000d9f98
   d84ac:	000d9ee4 	.word	0x000d9ee4
   d84b0:	2003db4c 	.word	0x2003db4c
   d84b4:	000d8451 	.word	0x000d8451

000d84b8 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d84b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d84ba:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d84bc:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d84be:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d84c2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d84c4:	2201      	movs	r2, #1
   d84c6:	f04f 33ff 	mov.w	r3, #4294967295
   d84ca:	4621      	mov	r1, r4
   d84cc:	47a8      	blx	r5
}
   d84ce:	b003      	add	sp, #12
   d84d0:	bd30      	pop	{r4, r5, pc}

000d84d2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d84d2:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d84d4:	6803      	ldr	r3, [r0, #0]
   d84d6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d84d8:	f04f 33ff 	mov.w	r3, #4294967295
   d84dc:	46a4      	mov	ip, r4
}
   d84de:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d84e2:	4760      	bx	ip

000d84e4 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d84e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d84e6:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d84e8:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d84ea:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d84ee:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d84f0:	4621      	mov	r1, r4
   d84f2:	4613      	mov	r3, r2
   d84f4:	2201      	movs	r2, #1
   d84f6:	47a8      	blx	r5
}
   d84f8:	b003      	add	sp, #12
   d84fa:	bd30      	pop	{r4, r5, pc}

000d84fc <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d84fc:	4770      	bx	lr

000d84fe <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d84fe:	b538      	push	{r3, r4, r5, lr}
   d8500:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d8502:	681a      	ldr	r2, [r3, #0]
   d8504:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d8506:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d8508:	da05      	bge.n	d8516 <_ZN9TCPClient9connectedEv+0x18>
   d850a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d850e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8512:	429a      	cmp	r2, r3
   d8514:	d001      	beq.n	d851a <_ZN9TCPClient9connectedEv+0x1c>
   d8516:	2501      	movs	r5, #1
   d8518:	e00b      	b.n	d8532 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d851a:	6803      	ldr	r3, [r0, #0]
   d851c:	691b      	ldr	r3, [r3, #16]
   d851e:	4798      	blx	r3
   d8520:	2800      	cmp	r0, #0
   d8522:	bf14      	ite	ne
   d8524:	2501      	movne	r5, #1
   d8526:	2500      	moveq	r5, #0
        if (!rv) {
   d8528:	d103      	bne.n	d8532 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d852a:	6823      	ldr	r3, [r4, #0]
   d852c:	4620      	mov	r0, r4
   d852e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8530:	4798      	blx	r3
        }
    }
    return rv;
}
   d8532:	4628      	mov	r0, r5
   d8534:	bd38      	pop	{r3, r4, r5, pc}

000d8536 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d8536:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d8538:	6818      	ldr	r0, [r3, #0]
}
   d853a:	43c0      	mvns	r0, r0
   d853c:	0fc0      	lsrs	r0, r0, #31
   d853e:	4770      	bx	lr

000d8540 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d8540:	4770      	bx	lr

000d8542 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d8542:	2000      	movs	r0, #0
   d8544:	4770      	bx	lr

000d8546 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d8546:	b510      	push	{r4, lr}
   d8548:	2114      	movs	r1, #20
   d854a:	4604      	mov	r4, r0
   d854c:	f000 fc36 	bl	d8dbc <_ZdlPvj>
   d8550:	4620      	mov	r0, r4
   d8552:	bd10      	pop	{r4, pc}

000d8554 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d8554:	f7fb bda3 	b.w	d409e <_ZdlPv>

000d8558 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d8558:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d855a:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d855c:	2200      	movs	r2, #0
   d855e:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d8560:	9202      	str	r2, [sp, #8]
   d8562:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d8564:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d8566:	4604      	mov	r4, r0
   d8568:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d856a:	d008      	beq.n	d857e <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d856c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8570:	fbb3 f1f2 	udiv	r1, r3, r2
   d8574:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d8576:	fb02 3111 	mls	r1, r2, r1, r3
   d857a:	434a      	muls	r2, r1
   d857c:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d857e:	6960      	ldr	r0, [r4, #20]
   d8580:	2308      	movs	r3, #8
   d8582:	9300      	str	r3, [sp, #0]
   d8584:	f241 0205 	movw	r2, #4101	; 0x1005
   d8588:	446b      	add	r3, sp
   d858a:	f640 71ff 	movw	r1, #4095	; 0xfff
   d858e:	6800      	ldr	r0, [r0, #0]
   d8590:	f7fe fe36 	bl	d7200 <sock_setsockopt>
    if (ret < 0) {
   d8594:	2800      	cmp	r0, #0
   d8596:	db08      	blt.n	d85aa <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d8598:	6960      	ldr	r0, [r4, #20]
   d859a:	2300      	movs	r3, #0
   d859c:	4632      	mov	r2, r6
   d859e:	4629      	mov	r1, r5
   d85a0:	6800      	ldr	r0, [r0, #0]
   d85a2:	f7fe fe4d 	bl	d7240 <sock_send>
    if (ret < 0) {
   d85a6:	2800      	cmp	r0, #0
   d85a8:	da04      	bge.n	d85b4 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d85aa:	f7fe ff6d 	bl	d7488 <__errno>
   d85ae:	6803      	ldr	r3, [r0, #0]
   d85b0:	6063      	str	r3, [r4, #4]
   d85b2:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d85b4:	b004      	add	sp, #16
   d85b6:	bd70      	pop	{r4, r5, r6, pc}

000d85b8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d85b8:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d85ba:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d85bc:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d85be:	689b      	ldr	r3, [r3, #8]
   d85c0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d85c2:	68a3      	ldr	r3, [r4, #8]
   d85c4:	3b01      	subs	r3, #1
   d85c6:	60a3      	str	r3, [r4, #8]
   d85c8:	b92b      	cbnz	r3, d85d6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d85ca:	6823      	ldr	r3, [r4, #0]
   d85cc:	4620      	mov	r0, r4
   d85ce:	68db      	ldr	r3, [r3, #12]
        }
    }
   d85d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d85d4:	4718      	bx	r3
   d85d6:	bd10      	pop	{r4, pc}

000d85d8 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d85d8:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d85da:	4604      	mov	r4, r0
   d85dc:	694d      	ldr	r5, [r1, #20]
   d85de:	4b05      	ldr	r3, [pc, #20]	; (d85f4 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d85e0:	f844 3b04 	str.w	r3, [r4], #4
   d85e4:	358c      	adds	r5, #140	; 0x8c
   d85e6:	4606      	mov	r6, r0
   d85e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d85ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d85ec:	682b      	ldr	r3, [r5, #0]
   d85ee:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d85f0:	4630      	mov	r0, r6
   d85f2:	bd70      	pop	{r4, r5, r6, pc}
   d85f4:	000d9e14 	.word	0x000d9e14

000d85f8 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d85f8:	b510      	push	{r4, lr}
   d85fa:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d85fc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8600:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8604:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d8606:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d8608:	d005      	beq.n	d8616 <_ZN9TCPClient4peekEv+0x1e>
   d860a:	6962      	ldr	r2, [r4, #20]
   d860c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d8610:	4413      	add	r3, r2
   d8612:	7918      	ldrb	r0, [r3, #4]
   d8614:	bd10      	pop	{r4, pc}
   d8616:	6803      	ldr	r3, [r0, #0]
   d8618:	691b      	ldr	r3, [r3, #16]
   d861a:	4798      	blx	r3
   d861c:	2800      	cmp	r0, #0
   d861e:	d1f4      	bne.n	d860a <_ZN9TCPClient4peekEv+0x12>
   d8620:	f04f 30ff 	mov.w	r0, #4294967295
}
   d8624:	bd10      	pop	{r4, pc}

000d8626 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d8626:	b510      	push	{r4, lr}
   d8628:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d862a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d862e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8632:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d8634:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d8636:	d008      	beq.n	d864a <_ZN9TCPClient4readEv+0x24>
   d8638:	6962      	ldr	r2, [r4, #20]
   d863a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d863e:	1c59      	adds	r1, r3, #1
   d8640:	4413      	add	r3, r2
   d8642:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d8646:	7918      	ldrb	r0, [r3, #4]
   d8648:	bd10      	pop	{r4, pc}
   d864a:	6803      	ldr	r3, [r0, #0]
   d864c:	691b      	ldr	r3, [r3, #16]
   d864e:	4798      	blx	r3
   d8650:	2800      	cmp	r0, #0
   d8652:	d1f1      	bne.n	d8638 <_ZN9TCPClient4readEv+0x12>
   d8654:	f04f 30ff 	mov.w	r0, #4294967295
}
   d8658:	bd10      	pop	{r4, pc}

000d865a <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d865a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d865c:	6943      	ldr	r3, [r0, #20]
   d865e:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d8660:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8664:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8668:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d866a:	4605      	mov	r5, r0
   d866c:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d866e:	d106      	bne.n	d867e <_ZN9TCPClient4readEPhj+0x24>
   d8670:	6803      	ldr	r3, [r0, #0]
   d8672:	691b      	ldr	r3, [r3, #16]
   d8674:	4798      	blx	r3
   d8676:	b910      	cbnz	r0, d867e <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d8678:	f04f 34ff 	mov.w	r4, #4294967295
   d867c:	e014      	b.n	d86a8 <_ZN9TCPClient4readEPhj+0x4e>
   d867e:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d8680:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d8684:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d8688:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d868a:	42bc      	cmp	r4, r7
   d868c:	bf28      	it	cs
   d868e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d8690:	4419      	add	r1, r3
   d8692:	4622      	mov	r2, r4
   d8694:	3104      	adds	r1, #4
   d8696:	4630      	mov	r0, r6
   d8698:	f001 f923 	bl	d98e2 <memcpy>
   d869c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d869e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d86a2:	4423      	add	r3, r4
   d86a4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d86a8:	4620      	mov	r0, r4
   d86aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d86ac <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d86ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d86b0:	4698      	mov	r8, r3
    stop();
   d86b2:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d86b4:	b093      	sub	sp, #76	; 0x4c
    stop();
   d86b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d86b8:	460d      	mov	r5, r1
   d86ba:	4606      	mov	r6, r0
   d86bc:	4617      	mov	r7, r2
    stop();
   d86be:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d86c0:	ab12      	add	r3, sp, #72	; 0x48
   d86c2:	2400      	movs	r4, #0
   d86c4:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d86c8:	4622      	mov	r2, r4
   d86ca:	4621      	mov	r1, r4
   d86cc:	4628      	mov	r0, r5
   d86ce:	f7fe fb7f 	bl	d6dd0 <netdb_getaddrinfo>
   d86d2:	4681      	mov	r9, r0
   d86d4:	2800      	cmp	r0, #0
   d86d6:	d13d      	bne.n	d8754 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d86d8:	9b00      	ldr	r3, [sp, #0]
   d86da:	2b00      	cmp	r3, #0
   d86dc:	d056      	beq.n	d878c <_ZN9TCPClient7connectEPKctm+0xe0>
   d86de:	695b      	ldr	r3, [r3, #20]
   d86e0:	2b00      	cmp	r3, #0
   d86e2:	d053      	beq.n	d878c <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d86e4:	a806      	add	r0, sp, #24
   d86e6:	f7ff fbc1 	bl	d7e6c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d86ea:	9b00      	ldr	r3, [sp, #0]
   d86ec:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d86ee:	7863      	ldrb	r3, [r4, #1]
   d86f0:	2b02      	cmp	r3, #2
   d86f2:	d101      	bne.n	d86f8 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d86f4:	1d21      	adds	r1, r4, #4
   d86f6:	e013      	b.n	d8720 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d86f8:	2b0a      	cmp	r3, #10
   d86fa:	d114      	bne.n	d8726 <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d86fc:	2211      	movs	r2, #17
   d86fe:	4649      	mov	r1, r9
   d8700:	a801      	add	r0, sp, #4
   d8702:	f001 f8f9 	bl	d98f8 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d8706:	68a3      	ldr	r3, [r4, #8]
   d8708:	bb33      	cbnz	r3, d8758 <_ZN9TCPClient7connectEPKctm+0xac>
   d870a:	68e3      	ldr	r3, [r4, #12]
   d870c:	bb23      	cbnz	r3, d8758 <_ZN9TCPClient7connectEPKctm+0xac>
   d870e:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d8712:	6925      	ldr	r5, [r4, #16]
   d8714:	f7fe fcc4 	bl	d70a0 <inet_htonl>
   d8718:	4285      	cmp	r5, r0
   d871a:	d11d      	bne.n	d8758 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d871c:	f104 0114 	add.w	r1, r4, #20
   d8720:	a806      	add	r0, sp, #24
   d8722:	f7ff fbe6 	bl	d7ef2 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d8726:	a806      	add	r0, sp, #24
   d8728:	f7ff fbc0 	bl	d7eac <_ZNK9IPAddresscvbEv>
        if (addr) {
   d872c:	2800      	cmp	r0, #0
   d872e:	d02d      	beq.n	d878c <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d8730:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d8732:	ad07      	add	r5, sp, #28
   d8734:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d8738:	4b18      	ldr	r3, [pc, #96]	; (d879c <_ZN9TCPClient7connectEPKctm+0xf0>)
   d873a:	930c      	str	r3, [sp, #48]	; 0x30
   d873c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d873e:	ac0d      	add	r4, sp, #52	; 0x34
   d8740:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8742:	682b      	ldr	r3, [r5, #0]
   d8744:	7023      	strb	r3, [r4, #0]
   d8746:	463a      	mov	r2, r7
   d8748:	4643      	mov	r3, r8
   d874a:	a90c      	add	r1, sp, #48	; 0x30
   d874c:	4630      	mov	r0, r6
   d874e:	47c8      	blx	r9
   d8750:	4681      	mov	r9, r0
   d8752:	e01b      	b.n	d878c <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8754:	46a1      	mov	r9, r4
   d8756:	e019      	b.n	d878c <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8758:	f104 0308 	add.w	r3, r4, #8
   d875c:	ad01      	add	r5, sp, #4
   d875e:	3418      	adds	r4, #24
   d8760:	6818      	ldr	r0, [r3, #0]
   d8762:	6859      	ldr	r1, [r3, #4]
   d8764:	462a      	mov	r2, r5
   d8766:	c203      	stmia	r2!, {r0, r1}
   d8768:	3308      	adds	r3, #8
   d876a:	42a3      	cmp	r3, r4
   d876c:	4615      	mov	r5, r2
   d876e:	d1f7      	bne.n	d8760 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d8770:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d8772:	a901      	add	r1, sp, #4
   d8774:	a80c      	add	r0, sp, #48	; 0x30
   d8776:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d8778:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d877c:	f7ff fb84 	bl	d7e88 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8780:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8782:	ac07      	add	r4, sp, #28
   d8784:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8786:	682b      	ldr	r3, [r5, #0]
   d8788:	7023      	strb	r3, [r4, #0]
   d878a:	e7cc      	b.n	d8726 <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d878c:	9800      	ldr	r0, [sp, #0]
   d878e:	f7fe fb17 	bl	d6dc0 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d8792:	4648      	mov	r0, r9
   d8794:	b013      	add	sp, #76	; 0x4c
   d8796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d879a:	bf00      	nop
   d879c:	000d9e14 	.word	0x000d9e14

000d87a0 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d87a0:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d87a2:	2300      	movs	r3, #0
   d87a4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d87a8:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d87aa:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d87ae:	4770      	bx	lr

000d87b0 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d87b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d87b4:	461e      	mov	r6, r3
    stop();
   d87b6:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d87b8:	460c      	mov	r4, r1
   d87ba:	b08a      	sub	sp, #40	; 0x28
    stop();
   d87bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d87be:	4605      	mov	r5, r0
   d87c0:	4617      	mov	r7, r2
    stop();
   d87c2:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d87c4:	7d23      	ldrb	r3, [r4, #20]
   d87c6:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d87ca:	2b04      	cmp	r3, #4
   d87cc:	bf0c      	ite	eq
   d87ce:	2002      	moveq	r0, #2
   d87d0:	200a      	movne	r0, #10
   d87d2:	2206      	movs	r2, #6
   d87d4:	2101      	movs	r1, #1
   d87d6:	f7fe fd3b 	bl	d7250 <sock_socket>
   d87da:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d87de:	696b      	ldr	r3, [r5, #20]
   d87e0:	681b      	ldr	r3, [r3, #0]
   d87e2:	2b00      	cmp	r3, #0
   d87e4:	db18      	blt.n	d8818 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d87e6:	4628      	mov	r0, r5
   d87e8:	f7ff ffda 	bl	d87a0 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d87ec:	b1d6      	cbz	r6, d8824 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d87ee:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d87f0:	a903      	add	r1, sp, #12
   d87f2:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d87f4:	9303      	str	r3, [sp, #12]
   d87f6:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d87fa:	f7fe fba1 	bl	d6f40 <if_index_to_name>
   d87fe:	b958      	cbnz	r0, d8818 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d8800:	6968      	ldr	r0, [r5, #20]
   d8802:	2306      	movs	r3, #6
   d8804:	9300      	str	r3, [sp, #0]
   d8806:	f241 020b 	movw	r2, #4107	; 0x100b
   d880a:	ab03      	add	r3, sp, #12
   d880c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8810:	6800      	ldr	r0, [r0, #0]
   d8812:	f7fe fcf5 	bl	d7200 <sock_setsockopt>
   d8816:	b128      	cbz	r0, d8824 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d8818:	682b      	ldr	r3, [r5, #0]
   d881a:	4628      	mov	r0, r5
   d881c:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d881e:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d8820:	4798      	blx	r3
   d8822:	e03b      	b.n	d889c <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d8824:	261c      	movs	r6, #28
   d8826:	4632      	mov	r2, r6
   d8828:	2100      	movs	r1, #0
   d882a:	a803      	add	r0, sp, #12
   d882c:	f001 f864 	bl	d98f8 <memset>
    if (ip.version() == 4) {
   d8830:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d8832:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d8836:	2b04      	cmp	r3, #4
   d8838:	d10c      	bne.n	d8854 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d883a:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d883c:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d883e:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d8842:	f7fe fc35 	bl	d70b0 <inet_htons>
   d8846:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d884a:	6860      	ldr	r0, [r4, #4]
   d884c:	f7fe fc28 	bl	d70a0 <inet_htonl>
   d8850:	9004      	str	r0, [sp, #16]
   d8852:	e013      	b.n	d887c <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d8854:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d8856:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d8858:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d885c:	f7fe fc28 	bl	d70b0 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d8860:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d8862:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d8866:	1d23      	adds	r3, r4, #4
   d8868:	f104 0714 	add.w	r7, r4, #20
   d886c:	6818      	ldr	r0, [r3, #0]
   d886e:	6859      	ldr	r1, [r3, #4]
   d8870:	4632      	mov	r2, r6
   d8872:	c203      	stmia	r2!, {r0, r1}
   d8874:	3308      	adds	r3, #8
   d8876:	42bb      	cmp	r3, r7
   d8878:	4616      	mov	r6, r2
   d887a:	d1f7      	bne.n	d886c <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d887c:	696b      	ldr	r3, [r5, #20]
   d887e:	221c      	movs	r2, #28
   d8880:	a903      	add	r1, sp, #12
   d8882:	6818      	ldr	r0, [r3, #0]
   d8884:	f7fe fccc 	bl	d7220 <sock_connect>
   d8888:	2800      	cmp	r0, #0
   d888a:	d1c5      	bne.n	d8818 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d888c:	3404      	adds	r4, #4
   d888e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8890:	696d      	ldr	r5, [r5, #20]
   d8892:	358c      	adds	r5, #140	; 0x8c
   d8894:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d8896:	6823      	ldr	r3, [r4, #0]
   d8898:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d889a:	2401      	movs	r4, #1
}
   d889c:	4620      	mov	r0, r4
   d889e:	b00a      	add	sp, #40	; 0x28
   d88a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d88a4 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d88a4:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d88a6:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d88a8:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d88aa:	6818      	ldr	r0, [r3, #0]
   d88ac:	2800      	cmp	r0, #0
   d88ae:	db01      	blt.n	d88b4 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d88b0:	f7fe fcae 	bl	d7210 <sock_close>
   d88b4:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d88b6:	f04f 32ff 	mov.w	r2, #4294967295
   d88ba:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d88bc:	6960      	ldr	r0, [r4, #20]
   d88be:	2211      	movs	r2, #17
   d88c0:	2100      	movs	r1, #0
   d88c2:	308c      	adds	r0, #140	; 0x8c
   d88c4:	f001 f818 	bl	d98f8 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d88c8:	4620      	mov	r0, r4
}
   d88ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d88ce:	f7ff bf67 	b.w	d87a0 <_ZN9TCPClient12flush_bufferEv>
	...

000d88d4 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d88d4:	b530      	push	{r4, r5, lr}
   d88d6:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d88d8:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d88dc:	b08b      	sub	sp, #44	; 0x2c
   d88de:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d88e0:	b11b      	cbz	r3, d88ea <_ZN9TCPClient9availableEv+0x16>
   d88e2:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d88e6:	429a      	cmp	r2, r3
   d88e8:	d040      	beq.n	d896c <_ZN9TCPClient9availableEv+0x98>
   d88ea:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d88ec:	6818      	ldr	r0, [r3, #0]
   d88ee:	2800      	cmp	r0, #0
   d88f0:	db3f      	blt.n	d8972 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d88f2:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d88f6:	2d7f      	cmp	r5, #127	; 0x7f
   d88f8:	d83b      	bhi.n	d8972 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d88fa:	1d19      	adds	r1, r3, #4
   d88fc:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d8900:	2308      	movs	r3, #8
   d8902:	4429      	add	r1, r5
   d8904:	f7fe fc94 	bl	d7230 <sock_recv>
            if (ret > 0) {
   d8908:	2800      	cmp	r0, #0
   d890a:	dd0c      	ble.n	d8926 <_ZN9TCPClient9availableEv+0x52>
   d890c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d890e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8912:	b90a      	cbnz	r2, d8918 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d8914:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d8918:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d891a:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d891e:	4418      	add	r0, r3
   d8920:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d8924:	e025      	b.n	d8972 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d8926:	f7fe fdaf 	bl	d7488 <__errno>
   d892a:	6803      	ldr	r3, [r0, #0]
   d892c:	2b0b      	cmp	r3, #11
   d892e:	d020      	beq.n	d8972 <_ZN9TCPClient9availableEv+0x9e>
   d8930:	f7fe fdaa 	bl	d7488 <__errno>
   d8934:	6803      	ldr	r3, [r0, #0]
   d8936:	2b0b      	cmp	r3, #11
   d8938:	d01b      	beq.n	d8972 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d893a:	2320      	movs	r3, #32
   d893c:	2500      	movs	r5, #0
   d893e:	9302      	str	r3, [sp, #8]
   d8940:	9503      	str	r5, [sp, #12]
   d8942:	f7fe fda1 	bl	d7488 <__errno>
   d8946:	6803      	ldr	r3, [r0, #0]
   d8948:	9301      	str	r3, [sp, #4]
   d894a:	4b0e      	ldr	r3, [pc, #56]	; (d8984 <_ZN9TCPClient9availableEv+0xb0>)
   d894c:	9300      	str	r3, [sp, #0]
   d894e:	aa02      	add	r2, sp, #8
   d8950:	462b      	mov	r3, r5
   d8952:	490d      	ldr	r1, [pc, #52]	; (d8988 <_ZN9TCPClient9availableEv+0xb4>)
   d8954:	2032      	movs	r0, #50	; 0x32
   d8956:	f7fe fcbb 	bl	d72d0 <log_message>
                    sock_close(d_->sock);
   d895a:	6963      	ldr	r3, [r4, #20]
   d895c:	6818      	ldr	r0, [r3, #0]
   d895e:	f7fe fc57 	bl	d7210 <sock_close>
   d8962:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d8964:	f04f 32ff 	mov.w	r2, #4294967295
   d8968:	601a      	str	r2, [r3, #0]
   d896a:	e002      	b.n	d8972 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d896c:	f7ff ff18 	bl	d87a0 <_ZN9TCPClient12flush_bufferEv>
   d8970:	e7bb      	b.n	d88ea <_ZN9TCPClient9availableEv+0x16>
   d8972:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d8974:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d8978:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d897c:	1a18      	subs	r0, r3, r0
}
   d897e:	b00b      	add	sp, #44	; 0x2c
   d8980:	bd30      	pop	{r4, r5, pc}
   d8982:	bf00      	nop
   d8984:	000d9f7f 	.word	0x000d9f7f
   d8988:	000d9f78 	.word	0x000d9f78

000d898c <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d898c:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d898e:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d8990:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d8992:	6001      	str	r1, [r0, #0]
   d8994:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d8998:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d899c:	3088      	adds	r0, #136	; 0x88
   d899e:	f7ff fa65 	bl	d7e6c <_ZN9IPAddressC1Ev>
}
   d89a2:	4620      	mov	r0, r4
   d89a4:	bd10      	pop	{r4, pc}
	...

000d89a8 <_ZN9TCPClientC1Ei>:
   d89a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d89ac:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d89ae:	2300      	movs	r3, #0
   d89b0:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d89b2:	4a14      	ldr	r2, [pc, #80]	; (d8a04 <_ZN9TCPClientC1Ei+0x5c>)
   d89b4:	6043      	str	r3, [r0, #4]
   d89b6:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d89b8:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d89ba:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d89bc:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d89be:	20a0      	movs	r0, #160	; 0xa0
   d89c0:	460e      	mov	r6, r1
   d89c2:	f7fb fb68 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d89c6:	4605      	mov	r5, r0
   d89c8:	b110      	cbz	r0, d89d0 <_ZN9TCPClientC1Ei+0x28>
   d89ca:	4631      	mov	r1, r6
   d89cc:	f7ff ffde 	bl	d898c <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d89d0:	2014      	movs	r0, #20
   d89d2:	f7fb fb60 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d89d6:	4603      	mov	r3, r0
   d89d8:	b128      	cbz	r0, d89e6 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d89da:	2201      	movs	r2, #1
   d89dc:	6042      	str	r2, [r0, #4]
   d89de:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d89e0:	4a09      	ldr	r2, [pc, #36]	; (d8a08 <_ZN9TCPClientC1Ei+0x60>)
   d89e2:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d89e4:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d89e6:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d89e8:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d89ea:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d89ec:	b128      	cbz	r0, d89fa <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d89ee:	6843      	ldr	r3, [r0, #4]
   d89f0:	3b01      	subs	r3, #1
   d89f2:	6043      	str	r3, [r0, #4]
   d89f4:	b90b      	cbnz	r3, d89fa <_ZN9TCPClientC1Ei+0x52>
   d89f6:	f7ff fddf 	bl	d85b8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d89fa:	4620      	mov	r0, r4
   d89fc:	f7ff fed0 	bl	d87a0 <_ZN9TCPClient12flush_bufferEv>
}
   d8a00:	4620      	mov	r0, r4
   d8a02:	bd70      	pop	{r4, r5, r6, pc}
   d8a04:	000d9f34 	.word	0x000d9f34
   d8a08:	000d9f18 	.word	0x000d9f18

000d8a0c <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d8a0c:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d8a0e:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d8a12:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d8a14:	f7ff ffc8 	bl	d89a8 <_ZN9TCPClientC1Ei>
}
   d8a18:	4620      	mov	r0, r4
   d8a1a:	bd10      	pop	{r4, pc}

000d8a1c <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d8a1c:	b510      	push	{r4, lr}
   d8a1e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d8a20:	6800      	ldr	r0, [r0, #0]
   d8a22:	2800      	cmp	r0, #0
   d8a24:	db01      	blt.n	d8a2a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d8a26:	f7fe fbf3 	bl	d7210 <sock_close>
    }
}
   d8a2a:	4620      	mov	r0, r4
   d8a2c:	bd10      	pop	{r4, pc}

000d8a2e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d8a2e:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d8a30:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d8a32:	4620      	mov	r0, r4
   d8a34:	f7ff fff2 	bl	d8a1c <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d8a38:	b124      	cbz	r4, d8a44 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d8a3a:	4620      	mov	r0, r4
   d8a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d8a40:	f7fb bb2d 	b.w	d409e <_ZdlPv>
   d8a44:	bd10      	pop	{r4, pc}

000d8a46 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8a46:	2300      	movs	r3, #0
   d8a48:	461a      	mov	r2, r3
   d8a4a:	6840      	ldr	r0, [r0, #4]
   d8a4c:	f7fe bc84 	b.w	d7358 <network_connect>

000d8a50 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8a50:	2200      	movs	r2, #0
   d8a52:	2102      	movs	r1, #2
   d8a54:	6840      	ldr	r0, [r0, #4]
   d8a56:	f7fe bc8f 	b.w	d7378 <network_disconnect>

000d8a5a <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8a5a:	2200      	movs	r2, #0
   d8a5c:	4611      	mov	r1, r2
   d8a5e:	6840      	ldr	r0, [r0, #4]
   d8a60:	f7fe bc82 	b.w	d7368 <network_connecting>

000d8a64 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d8a64:	2200      	movs	r2, #0
   d8a66:	4611      	mov	r1, r2
   d8a68:	6840      	ldr	r0, [r0, #4]
   d8a6a:	f7fe bc8d 	b.w	d7388 <network_ready>

000d8a6e <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8a6e:	2300      	movs	r3, #0
   d8a70:	461a      	mov	r2, r3
   d8a72:	4619      	mov	r1, r3
   d8a74:	6840      	ldr	r0, [r0, #4]
   d8a76:	f7fe bc8f 	b.w	d7398 <network_on>

000d8a7a <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8a7a:	2300      	movs	r3, #0
   d8a7c:	461a      	mov	r2, r3
   d8a7e:	4619      	mov	r1, r3
   d8a80:	6840      	ldr	r0, [r0, #4]
   d8a82:	f7fe bc91 	b.w	d73a8 <network_off>

000d8a86 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8a86:	2200      	movs	r2, #0
   d8a88:	f081 0101 	eor.w	r1, r1, #1
   d8a8c:	6840      	ldr	r0, [r0, #4]
   d8a8e:	f7fe bc93 	b.w	d73b8 <network_listen>

000d8a92 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8a92:	2200      	movs	r2, #0
   d8a94:	6840      	ldr	r0, [r0, #4]
   d8a96:	f7fe bc9f 	b.w	d73d8 <network_set_listen_timeout>

000d8a9a <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8a9a:	2200      	movs	r2, #0
   d8a9c:	4611      	mov	r1, r2
   d8a9e:	6840      	ldr	r0, [r0, #4]
   d8aa0:	f7fe bca2 	b.w	d73e8 <network_get_listen_timeout>

000d8aa4 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8aa4:	2200      	movs	r2, #0
   d8aa6:	4611      	mov	r1, r2
   d8aa8:	6840      	ldr	r0, [r0, #4]
   d8aaa:	f7fe bc8d 	b.w	d73c8 <network_listening>

000d8aae <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8aae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8ab2:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d8ab4:	b095      	sub	sp, #84	; 0x54
   d8ab6:	4616      	mov	r6, r2
   d8ab8:	460d      	mov	r5, r1
   d8aba:	4607      	mov	r7, r0
    IPAddress addr;
   d8abc:	f7ff f9d6 	bl	d7e6c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d8ac0:	4621      	mov	r1, r4
   d8ac2:	2220      	movs	r2, #32
   d8ac4:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8ac6:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8ac8:	f000 ff16 	bl	d98f8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8acc:	2340      	movs	r3, #64	; 0x40
   d8ace:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8ad0:	4621      	mov	r1, r4
   d8ad2:	466b      	mov	r3, sp
   d8ad4:	aa0c      	add	r2, sp, #48	; 0x30
   d8ad6:	4630      	mov	r0, r6
   d8ad8:	f7fe f97a 	bl	d6dd0 <netdb_getaddrinfo>
    if (!r) {
   d8adc:	4604      	mov	r4, r0
   d8ade:	2800      	cmp	r0, #0
   d8ae0:	d144      	bne.n	d8b6c <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8ae2:	4602      	mov	r2, r0
   d8ae4:	2101      	movs	r1, #1
   d8ae6:	6868      	ldr	r0, [r5, #4]
   d8ae8:	f7fe fc4e 	bl	d7388 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8aec:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8aee:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8af0:	4622      	mov	r2, r4
   d8af2:	6868      	ldr	r0, [r5, #4]
   d8af4:	f7fe fc48 	bl	d7388 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8af8:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8afa:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d8afc:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8afe:	2e00      	cmp	r6, #0
   d8b00:	d034      	beq.n	d8b6c <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d8b02:	2900      	cmp	r1, #0
   d8b04:	d132      	bne.n	d8b6c <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8b06:	6873      	ldr	r3, [r6, #4]
   d8b08:	2b02      	cmp	r3, #2
   d8b0a:	d002      	beq.n	d8b12 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d8b0c:	2b0a      	cmp	r3, #10
   d8b0e:	d009      	beq.n	d8b24 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d8b10:	e02a      	b.n	d8b68 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d8b12:	f1b8 0f00 	cmp.w	r8, #0
   d8b16:	d027      	beq.n	d8b68 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d8b18:	6971      	ldr	r1, [r6, #20]
   d8b1a:	4638      	mov	r0, r7
   d8b1c:	3104      	adds	r1, #4
   d8b1e:	f7ff f9e8 	bl	d7ef2 <_ZN9IPAddressaSEPKh>
   d8b22:	e020      	b.n	d8b66 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8b24:	f1b9 0f00 	cmp.w	r9, #0
   d8b28:	d01e      	beq.n	d8b68 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8b2a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8b2c:	2211      	movs	r2, #17
   d8b2e:	a801      	add	r0, sp, #4
   d8b30:	f000 fee2 	bl	d98f8 <memset>
                    a.v = 6;
   d8b34:	2306      	movs	r3, #6
   d8b36:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8b3a:	ad01      	add	r5, sp, #4
   d8b3c:	f104 0308 	add.w	r3, r4, #8
   d8b40:	3418      	adds	r4, #24
   d8b42:	6818      	ldr	r0, [r3, #0]
   d8b44:	6859      	ldr	r1, [r3, #4]
   d8b46:	462a      	mov	r2, r5
   d8b48:	c203      	stmia	r2!, {r0, r1}
   d8b4a:	3308      	adds	r3, #8
   d8b4c:	42a3      	cmp	r3, r4
   d8b4e:	4615      	mov	r5, r2
   d8b50:	d1f7      	bne.n	d8b42 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d8b52:	a901      	add	r1, sp, #4
   d8b54:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d8b56:	ad07      	add	r5, sp, #28
   d8b58:	f7ff f996 	bl	d7e88 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8b5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8b5e:	1d3c      	adds	r4, r7, #4
   d8b60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8b62:	682b      	ldr	r3, [r5, #0]
   d8b64:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d8b66:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8b68:	69f6      	ldr	r6, [r6, #28]
   d8b6a:	e7c8      	b.n	d8afe <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8b6c:	9800      	ldr	r0, [sp, #0]
   d8b6e:	f7fe f927 	bl	d6dc0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8b72:	4638      	mov	r0, r7
   d8b74:	b015      	add	sp, #84	; 0x54
   d8b76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d8b7c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8b7c:	4b02      	ldr	r3, [pc, #8]	; (d8b88 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8b7e:	4a03      	ldr	r2, [pc, #12]	; (d8b8c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8b80:	601a      	str	r2, [r3, #0]
   d8b82:	2200      	movs	r2, #0
   d8b84:	605a      	str	r2, [r3, #4]
   d8b86:	4770      	bx	lr
   d8b88:	2003e520 	.word	0x2003e520
   d8b8c:	000d9f98 	.word	0x000d9f98

000d8b90 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d8b90:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d8b92:	4e18      	ldr	r6, [pc, #96]	; (d8bf4 <pinAvailable+0x64>)
   d8b94:	6831      	ldr	r1, [r6, #0]
   d8b96:	f011 0501 	ands.w	r5, r1, #1
   d8b9a:	4604      	mov	r4, r0
   d8b9c:	d10a      	bne.n	d8bb4 <pinAvailable+0x24>
   d8b9e:	4630      	mov	r0, r6
   d8ba0:	f7fb fa81 	bl	d40a6 <__cxa_guard_acquire>
   d8ba4:	b130      	cbz	r0, d8bb4 <pinAvailable+0x24>
   d8ba6:	4629      	mov	r1, r5
   d8ba8:	4813      	ldr	r0, [pc, #76]	; (d8bf8 <pinAvailable+0x68>)
   d8baa:	f7fe fcb9 	bl	d7520 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8bae:	4630      	mov	r0, r6
   d8bb0:	f7fb fa7e 	bl	d40b0 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d8bb4:	4810      	ldr	r0, [pc, #64]	; (d8bf8 <pinAvailable+0x68>)
   d8bb6:	f7fe fde8 	bl	d778a <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d8bba:	b128      	cbz	r0, d8bc8 <pinAvailable+0x38>
   d8bbc:	f1a4 030b 	sub.w	r3, r4, #11
   d8bc0:	2b02      	cmp	r3, #2
   d8bc2:	d801      	bhi.n	d8bc8 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d8bc4:	2000      	movs	r0, #0
   d8bc6:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d8bc8:	f000 f89e 	bl	d8d08 <_Z19__fetch_global_Wirev>
   d8bcc:	f7ff fba1 	bl	d8312 <_ZN7TwoWire9isEnabledEv>
   d8bd0:	b108      	cbz	r0, d8bd6 <pinAvailable+0x46>
   d8bd2:	2c01      	cmp	r4, #1
   d8bd4:	d9f6      	bls.n	d8bc4 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d8bd6:	f7ff faff 	bl	d81d8 <_Z22__fetch_global_Serial1v>
   d8bda:	f7ff faf9 	bl	d81d0 <_ZN11USARTSerial9isEnabledEv>
   d8bde:	b118      	cbz	r0, d8be8 <pinAvailable+0x58>
   d8be0:	f1a4 0309 	sub.w	r3, r4, #9
   d8be4:	2b01      	cmp	r3, #1
   d8be6:	d9ed      	bls.n	d8bc4 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d8be8:	2c23      	cmp	r4, #35	; 0x23
   d8bea:	bf8c      	ite	hi
   d8bec:	2000      	movhi	r0, #0
   d8bee:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d8bf0:	bd70      	pop	{r4, r5, r6, pc}
   d8bf2:	bf00      	nop
   d8bf4:	2003dbe4 	.word	0x2003dbe4
   d8bf8:	2003dbe8 	.word	0x2003dbe8

000d8bfc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8bfc:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d8bfe:	b538      	push	{r3, r4, r5, lr}
   d8c00:	4604      	mov	r4, r0
   d8c02:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8c04:	d80a      	bhi.n	d8c1c <pinMode+0x20>
   d8c06:	29ff      	cmp	r1, #255	; 0xff
   d8c08:	d008      	beq.n	d8c1c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8c0a:	f7ff ffc1 	bl	d8b90 <pinAvailable>
   d8c0e:	b128      	cbz	r0, d8c1c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8c10:	4629      	mov	r1, r5
   d8c12:	4620      	mov	r0, r4
}
   d8c14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8c18:	f7fe b8ea 	b.w	d6df0 <HAL_Pin_Mode>
   d8c1c:	bd38      	pop	{r3, r4, r5, pc}

000d8c1e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d8c1e:	b538      	push	{r3, r4, r5, lr}
   d8c20:	4604      	mov	r4, r0
   d8c22:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8c24:	f7fe f8ec 	bl	d6e00 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8c28:	28ff      	cmp	r0, #255	; 0xff
   d8c2a:	d010      	beq.n	d8c4e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d8c2c:	2806      	cmp	r0, #6
   d8c2e:	d804      	bhi.n	d8c3a <digitalWrite+0x1c>
   d8c30:	234d      	movs	r3, #77	; 0x4d
   d8c32:	fa23 f000 	lsr.w	r0, r3, r0
   d8c36:	07c3      	lsls	r3, r0, #31
   d8c38:	d409      	bmi.n	d8c4e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d8c3a:	4620      	mov	r0, r4
   d8c3c:	f7ff ffa8 	bl	d8b90 <pinAvailable>
   d8c40:	b128      	cbz	r0, d8c4e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8c42:	4629      	mov	r1, r5
   d8c44:	4620      	mov	r0, r4
}
   d8c46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8c4a:	f7fe b8e1 	b.w	d6e10 <HAL_GPIO_Write>
   d8c4e:	bd38      	pop	{r3, r4, r5, pc}

000d8c50 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d8c50:	b510      	push	{r4, lr}
   d8c52:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8c54:	f7fe f8d4 	bl	d6e00 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d8c58:	3804      	subs	r0, #4
   d8c5a:	b2c0      	uxtb	r0, r0
   d8c5c:	2801      	cmp	r0, #1
   d8c5e:	d908      	bls.n	d8c72 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d8c60:	4620      	mov	r0, r4
   d8c62:	f7ff ff95 	bl	d8b90 <pinAvailable>
   d8c66:	b120      	cbz	r0, d8c72 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8c68:	4620      	mov	r0, r4
}
   d8c6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8c6e:	f7fe b8d7 	b.w	d6e20 <HAL_GPIO_Read>
}
   d8c72:	2000      	movs	r0, #0
   d8c74:	bd10      	pop	{r4, pc}
	...

000d8c78 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d8c78:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d8c7a:	4c07      	ldr	r4, [pc, #28]	; (d8c98 <_Z21__fetch_global_EEPROMv+0x20>)
   d8c7c:	6823      	ldr	r3, [r4, #0]
   d8c7e:	07db      	lsls	r3, r3, #31
   d8c80:	d408      	bmi.n	d8c94 <_Z21__fetch_global_EEPROMv+0x1c>
   d8c82:	4620      	mov	r0, r4
   d8c84:	f7fb fa0f 	bl	d40a6 <__cxa_guard_acquire>
   d8c88:	b120      	cbz	r0, d8c94 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d8c8a:	f7fe f981 	bl	d6f90 <HAL_EEPROM_Init>
   d8c8e:	4620      	mov	r0, r4
   d8c90:	f7fb fa0e 	bl	d40b0 <__cxa_guard_release>
	return eeprom;
}
   d8c94:	4801      	ldr	r0, [pc, #4]	; (d8c9c <_Z21__fetch_global_EEPROMv+0x24>)
   d8c96:	bd10      	pop	{r4, pc}
   d8c98:	2003e52c 	.word	0x2003e52c
   d8c9c:	2003e530 	.word	0x2003e530

000d8ca0 <_Z17acquireWireBufferv>:
   d8ca0:	b570      	push	{r4, r5, r6, lr}
   d8ca2:	4604      	mov	r4, r0
   d8ca4:	2514      	movs	r5, #20
   d8ca6:	462a      	mov	r2, r5
   d8ca8:	4e09      	ldr	r6, [pc, #36]	; (d8cd0 <_Z17acquireWireBufferv+0x30>)
   d8caa:	2100      	movs	r1, #0
   d8cac:	f000 fe24 	bl	d98f8 <memset>
   d8cb0:	8025      	strh	r5, [r4, #0]
   d8cb2:	2520      	movs	r5, #32
   d8cb4:	4631      	mov	r1, r6
   d8cb6:	60a5      	str	r5, [r4, #8]
   d8cb8:	6125      	str	r5, [r4, #16]
   d8cba:	4628      	mov	r0, r5
   d8cbc:	f000 f880 	bl	d8dc0 <_ZnajRKSt9nothrow_t>
   d8cc0:	4631      	mov	r1, r6
   d8cc2:	6060      	str	r0, [r4, #4]
   d8cc4:	4628      	mov	r0, r5
   d8cc6:	f000 f87b 	bl	d8dc0 <_ZnajRKSt9nothrow_t>
   d8cca:	60e0      	str	r0, [r4, #12]
   d8ccc:	4620      	mov	r0, r4
   d8cce:	bd70      	pop	{r4, r5, r6, pc}
   d8cd0:	000d9fc4 	.word	0x000d9fc4

000d8cd4 <_Z18acquireWire1Bufferv>:
	return defaultWireConfig();
}

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
   d8cd4:	b570      	push	{r4, r5, r6, lr}
   d8cd6:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d8cd8:	2514      	movs	r5, #20
   d8cda:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8cdc:	4e09      	ldr	r6, [pc, #36]	; (d8d04 <_Z18acquireWire1Bufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d8cde:	2100      	movs	r1, #0
   d8ce0:	f000 fe0a 	bl	d98f8 <memset>
   d8ce4:	8025      	strh	r5, [r4, #0]
   d8ce6:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8ce8:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d8cea:	60a5      	str	r5, [r4, #8]
   d8cec:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8cee:	4628      	mov	r0, r5
   d8cf0:	f000 f866 	bl	d8dc0 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8cf4:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d8cf6:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8cf8:	4628      	mov	r0, r5
   d8cfa:	f000 f861 	bl	d8dc0 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d8cfe:	60e0      	str	r0, [r4, #12]

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
	return defaultWireConfig();
}
   d8d00:	4620      	mov	r0, r4
   d8d02:	bd70      	pop	{r4, r5, r6, pc}
   d8d04:	000d9fc4 	.word	0x000d9fc4

000d8d08 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8d08:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8d0a:	4d0e      	ldr	r5, [pc, #56]	; (d8d44 <_Z19__fetch_global_Wirev+0x3c>)
   d8d0c:	6829      	ldr	r1, [r5, #0]
   d8d0e:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8d12:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8d14:	d113      	bne.n	d8d3e <_Z19__fetch_global_Wirev+0x36>
   d8d16:	4628      	mov	r0, r5
   d8d18:	f7fb f9c5 	bl	d40a6 <__cxa_guard_acquire>
   d8d1c:	b178      	cbz	r0, d8d3e <_Z19__fetch_global_Wirev+0x36>
   d8d1e:	a801      	add	r0, sp, #4
   d8d20:	f7ff ffbe 	bl	d8ca0 <_Z17acquireWireBufferv>
   d8d24:	aa01      	add	r2, sp, #4
   d8d26:	4621      	mov	r1, r4
   d8d28:	4807      	ldr	r0, [pc, #28]	; (d8d48 <_Z19__fetch_global_Wirev+0x40>)
   d8d2a:	f7ff faa7 	bl	d827c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d8d2e:	4628      	mov	r0, r5
   d8d30:	f7fb f9be 	bl	d40b0 <__cxa_guard_release>
   d8d34:	4a05      	ldr	r2, [pc, #20]	; (d8d4c <_Z19__fetch_global_Wirev+0x44>)
   d8d36:	4906      	ldr	r1, [pc, #24]	; (d8d50 <_Z19__fetch_global_Wirev+0x48>)
   d8d38:	4803      	ldr	r0, [pc, #12]	; (d8d48 <_Z19__fetch_global_Wirev+0x40>)
   d8d3a:	f000 f831 	bl	d8da0 <__aeabi_atexit>
	return wire;
}
   d8d3e:	4802      	ldr	r0, [pc, #8]	; (d8d48 <_Z19__fetch_global_Wirev+0x40>)
   d8d40:	b007      	add	sp, #28
   d8d42:	bd30      	pop	{r4, r5, pc}
   d8d44:	2003e534 	.word	0x2003e534
   d8d48:	2003e54c 	.word	0x2003e54c
   d8d4c:	2003db4c 	.word	0x2003db4c
   d8d50:	000d8225 	.word	0x000d8225

000d8d54 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d8d54:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d8d56:	4c0e      	ldr	r4, [pc, #56]	; (d8d90 <_Z20__fetch_global_Wire1v+0x3c>)
   d8d58:	6823      	ldr	r3, [r4, #0]
   d8d5a:	07db      	lsls	r3, r3, #31
	return wire;
}

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d8d5c:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d8d5e:	d413      	bmi.n	d8d88 <_Z20__fetch_global_Wire1v+0x34>
   d8d60:	4620      	mov	r0, r4
   d8d62:	f7fb f9a0 	bl	d40a6 <__cxa_guard_acquire>
   d8d66:	b178      	cbz	r0, d8d88 <_Z20__fetch_global_Wire1v+0x34>
   d8d68:	a801      	add	r0, sp, #4
   d8d6a:	f7ff ffb3 	bl	d8cd4 <_Z18acquireWire1Bufferv>
   d8d6e:	aa01      	add	r2, sp, #4
   d8d70:	2101      	movs	r1, #1
   d8d72:	4808      	ldr	r0, [pc, #32]	; (d8d94 <_Z20__fetch_global_Wire1v+0x40>)
   d8d74:	f7ff fa82 	bl	d827c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d8d78:	4620      	mov	r0, r4
   d8d7a:	f7fb f999 	bl	d40b0 <__cxa_guard_release>
   d8d7e:	4a06      	ldr	r2, [pc, #24]	; (d8d98 <_Z20__fetch_global_Wire1v+0x44>)
   d8d80:	4906      	ldr	r1, [pc, #24]	; (d8d9c <_Z20__fetch_global_Wire1v+0x48>)
   d8d82:	4804      	ldr	r0, [pc, #16]	; (d8d94 <_Z20__fetch_global_Wire1v+0x40>)
   d8d84:	f000 f80c 	bl	d8da0 <__aeabi_atexit>
	return wire;
}
   d8d88:	4802      	ldr	r0, [pc, #8]	; (d8d94 <_Z20__fetch_global_Wire1v+0x40>)
   d8d8a:	b006      	add	sp, #24
   d8d8c:	bd10      	pop	{r4, pc}
   d8d8e:	bf00      	nop
   d8d90:	2003e560 	.word	0x2003e560
   d8d94:	2003e538 	.word	0x2003e538
   d8d98:	2003db4c 	.word	0x2003db4c
   d8d9c:	000d8225 	.word	0x000d8225

000d8da0 <__aeabi_atexit>:
   d8da0:	460b      	mov	r3, r1
   d8da2:	4601      	mov	r1, r0
   d8da4:	4618      	mov	r0, r3
   d8da6:	f000 bd7f 	b.w	d98a8 <__cxa_atexit>
	...

000d8dac <_ZSt15get_new_handlerv>:
   d8dac:	4b02      	ldr	r3, [pc, #8]	; (d8db8 <_ZSt15get_new_handlerv+0xc>)
   d8dae:	6818      	ldr	r0, [r3, #0]
   d8db0:	f3bf 8f5f 	dmb	sy
   d8db4:	4770      	bx	lr
   d8db6:	bf00      	nop
   d8db8:	2003e564 	.word	0x2003e564

000d8dbc <_ZdlPvj>:
   d8dbc:	f7fb b96f 	b.w	d409e <_ZdlPv>

000d8dc0 <_ZnajRKSt9nothrow_t>:
   d8dc0:	f000 b800 	b.w	d8dc4 <_ZnwjRKSt9nothrow_t>

000d8dc4 <_ZnwjRKSt9nothrow_t>:
   d8dc4:	b510      	push	{r4, lr}
   d8dc6:	2800      	cmp	r0, #0
   d8dc8:	bf14      	ite	ne
   d8dca:	4604      	movne	r4, r0
   d8dcc:	2401      	moveq	r4, #1
   d8dce:	4620      	mov	r0, r4
   d8dd0:	f7fe fb3a 	bl	d7448 <malloc>
   d8dd4:	b920      	cbnz	r0, d8de0 <_ZnwjRKSt9nothrow_t+0x1c>
   d8dd6:	f7ff ffe9 	bl	d8dac <_ZSt15get_new_handlerv>
   d8dda:	b108      	cbz	r0, d8de0 <_ZnwjRKSt9nothrow_t+0x1c>
   d8ddc:	4780      	blx	r0
   d8dde:	e7f6      	b.n	d8dce <_ZnwjRKSt9nothrow_t+0xa>
   d8de0:	bd10      	pop	{r4, pc}
	...

000d8de4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8de4:	4b18      	ldr	r3, [pc, #96]	; (d8e48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8de6:	681a      	ldr	r2, [r3, #0]
   d8de8:	07d1      	lsls	r1, r2, #31
   d8dea:	bf5c      	itt	pl
   d8dec:	2201      	movpl	r2, #1
   d8dee:	601a      	strpl	r2, [r3, #0]
   d8df0:	4b16      	ldr	r3, [pc, #88]	; (d8e4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8df2:	681a      	ldr	r2, [r3, #0]
   d8df4:	07d2      	lsls	r2, r2, #31
   d8df6:	bf5c      	itt	pl
   d8df8:	2201      	movpl	r2, #1
   d8dfa:	601a      	strpl	r2, [r3, #0]
   d8dfc:	4b14      	ldr	r3, [pc, #80]	; (d8e50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8dfe:	681a      	ldr	r2, [r3, #0]
   d8e00:	07d0      	lsls	r0, r2, #31
   d8e02:	bf5c      	itt	pl
   d8e04:	2201      	movpl	r2, #1
   d8e06:	601a      	strpl	r2, [r3, #0]
   d8e08:	4b12      	ldr	r3, [pc, #72]	; (d8e54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8e0a:	681a      	ldr	r2, [r3, #0]
   d8e0c:	07d1      	lsls	r1, r2, #31
   d8e0e:	bf5c      	itt	pl
   d8e10:	2201      	movpl	r2, #1
   d8e12:	601a      	strpl	r2, [r3, #0]
   d8e14:	4b10      	ldr	r3, [pc, #64]	; (d8e58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8e16:	681a      	ldr	r2, [r3, #0]
   d8e18:	07d2      	lsls	r2, r2, #31
   d8e1a:	bf5c      	itt	pl
   d8e1c:	2201      	movpl	r2, #1
   d8e1e:	601a      	strpl	r2, [r3, #0]
   d8e20:	4b0e      	ldr	r3, [pc, #56]	; (d8e5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8e22:	681a      	ldr	r2, [r3, #0]
   d8e24:	07d0      	lsls	r0, r2, #31
   d8e26:	bf5c      	itt	pl
   d8e28:	2201      	movpl	r2, #1
   d8e2a:	601a      	strpl	r2, [r3, #0]
   d8e2c:	4b0c      	ldr	r3, [pc, #48]	; (d8e60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8e2e:	681a      	ldr	r2, [r3, #0]
   d8e30:	07d1      	lsls	r1, r2, #31
   d8e32:	bf5c      	itt	pl
   d8e34:	2201      	movpl	r2, #1
   d8e36:	601a      	strpl	r2, [r3, #0]
   d8e38:	4b0a      	ldr	r3, [pc, #40]	; (d8e64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8e3a:	681a      	ldr	r2, [r3, #0]
   d8e3c:	07d2      	lsls	r2, r2, #31
   d8e3e:	bf5c      	itt	pl
   d8e40:	2201      	movpl	r2, #1
   d8e42:	601a      	strpl	r2, [r3, #0]
   d8e44:	4770      	bx	lr
   d8e46:	bf00      	nop
   d8e48:	2003e584 	.word	0x2003e584
   d8e4c:	2003e580 	.word	0x2003e580
   d8e50:	2003e57c 	.word	0x2003e57c
   d8e54:	2003e578 	.word	0x2003e578
   d8e58:	2003e574 	.word	0x2003e574
   d8e5c:	2003e570 	.word	0x2003e570
   d8e60:	2003e56c 	.word	0x2003e56c
   d8e64:	2003e568 	.word	0x2003e568

000d8e68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d8e68:	4b24      	ldr	r3, [pc, #144]	; (d8efc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d8e6a:	681a      	ldr	r2, [r3, #0]
   d8e6c:	07d0      	lsls	r0, r2, #31
   d8e6e:	bf5c      	itt	pl
   d8e70:	2201      	movpl	r2, #1
   d8e72:	601a      	strpl	r2, [r3, #0]
   d8e74:	4b22      	ldr	r3, [pc, #136]	; (d8f00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d8e76:	681a      	ldr	r2, [r3, #0]
   d8e78:	07d1      	lsls	r1, r2, #31
   d8e7a:	bf5c      	itt	pl
   d8e7c:	2201      	movpl	r2, #1
   d8e7e:	601a      	strpl	r2, [r3, #0]
   d8e80:	4b20      	ldr	r3, [pc, #128]	; (d8f04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d8e82:	681a      	ldr	r2, [r3, #0]
   d8e84:	07d2      	lsls	r2, r2, #31
   d8e86:	bf5c      	itt	pl
   d8e88:	2201      	movpl	r2, #1
   d8e8a:	601a      	strpl	r2, [r3, #0]
   d8e8c:	4b1e      	ldr	r3, [pc, #120]	; (d8f08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d8e8e:	681a      	ldr	r2, [r3, #0]
   d8e90:	07d0      	lsls	r0, r2, #31
   d8e92:	bf5c      	itt	pl
   d8e94:	2201      	movpl	r2, #1
   d8e96:	601a      	strpl	r2, [r3, #0]
   d8e98:	4b1c      	ldr	r3, [pc, #112]	; (d8f0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d8e9a:	681a      	ldr	r2, [r3, #0]
   d8e9c:	07d1      	lsls	r1, r2, #31
   d8e9e:	bf5c      	itt	pl
   d8ea0:	2201      	movpl	r2, #1
   d8ea2:	601a      	strpl	r2, [r3, #0]
   d8ea4:	4b1a      	ldr	r3, [pc, #104]	; (d8f10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d8ea6:	681a      	ldr	r2, [r3, #0]
   d8ea8:	07d2      	lsls	r2, r2, #31
   d8eaa:	bf5c      	itt	pl
   d8eac:	2201      	movpl	r2, #1
   d8eae:	601a      	strpl	r2, [r3, #0]
   d8eb0:	4b18      	ldr	r3, [pc, #96]	; (d8f14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d8eb2:	681a      	ldr	r2, [r3, #0]
   d8eb4:	07d0      	lsls	r0, r2, #31
   d8eb6:	bf5c      	itt	pl
   d8eb8:	2201      	movpl	r2, #1
   d8eba:	601a      	strpl	r2, [r3, #0]
   d8ebc:	4b16      	ldr	r3, [pc, #88]	; (d8f18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d8ebe:	681a      	ldr	r2, [r3, #0]
   d8ec0:	07d1      	lsls	r1, r2, #31
   d8ec2:	bf5c      	itt	pl
   d8ec4:	2201      	movpl	r2, #1
   d8ec6:	601a      	strpl	r2, [r3, #0]
   d8ec8:	4b14      	ldr	r3, [pc, #80]	; (d8f1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d8eca:	681a      	ldr	r2, [r3, #0]
   d8ecc:	07d2      	lsls	r2, r2, #31
   d8ece:	bf5c      	itt	pl
   d8ed0:	2201      	movpl	r2, #1
   d8ed2:	601a      	strpl	r2, [r3, #0]
   d8ed4:	4b12      	ldr	r3, [pc, #72]	; (d8f20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d8ed6:	681a      	ldr	r2, [r3, #0]
   d8ed8:	07d0      	lsls	r0, r2, #31
   d8eda:	bf5c      	itt	pl
   d8edc:	2201      	movpl	r2, #1
   d8ede:	601a      	strpl	r2, [r3, #0]
   d8ee0:	4b10      	ldr	r3, [pc, #64]	; (d8f24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d8ee2:	681a      	ldr	r2, [r3, #0]
   d8ee4:	07d1      	lsls	r1, r2, #31
   d8ee6:	bf5c      	itt	pl
   d8ee8:	2201      	movpl	r2, #1
   d8eea:	601a      	strpl	r2, [r3, #0]
   d8eec:	4b0e      	ldr	r3, [pc, #56]	; (d8f28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d8eee:	681a      	ldr	r2, [r3, #0]
   d8ef0:	07d2      	lsls	r2, r2, #31
   d8ef2:	bf5c      	itt	pl
   d8ef4:	2201      	movpl	r2, #1
   d8ef6:	601a      	strpl	r2, [r3, #0]
   d8ef8:	4770      	bx	lr
   d8efa:	bf00      	nop
   d8efc:	2003e5b4 	.word	0x2003e5b4
   d8f00:	2003e5b0 	.word	0x2003e5b0
   d8f04:	2003e5ac 	.word	0x2003e5ac
   d8f08:	2003e5a8 	.word	0x2003e5a8
   d8f0c:	2003e5a4 	.word	0x2003e5a4
   d8f10:	2003e5a0 	.word	0x2003e5a0
   d8f14:	2003e59c 	.word	0x2003e59c
   d8f18:	2003e598 	.word	0x2003e598
   d8f1c:	2003e594 	.word	0x2003e594
   d8f20:	2003e590 	.word	0x2003e590
   d8f24:	2003e58c 	.word	0x2003e58c
   d8f28:	2003e588 	.word	0x2003e588

000d8f2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d8f2c:	4b24      	ldr	r3, [pc, #144]	; (d8fc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d8f2e:	681a      	ldr	r2, [r3, #0]
   d8f30:	07d0      	lsls	r0, r2, #31
   d8f32:	bf5c      	itt	pl
   d8f34:	2201      	movpl	r2, #1
   d8f36:	601a      	strpl	r2, [r3, #0]
   d8f38:	4b22      	ldr	r3, [pc, #136]	; (d8fc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d8f3a:	681a      	ldr	r2, [r3, #0]
   d8f3c:	07d1      	lsls	r1, r2, #31
   d8f3e:	bf5c      	itt	pl
   d8f40:	2201      	movpl	r2, #1
   d8f42:	601a      	strpl	r2, [r3, #0]
   d8f44:	4b20      	ldr	r3, [pc, #128]	; (d8fc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d8f46:	681a      	ldr	r2, [r3, #0]
   d8f48:	07d2      	lsls	r2, r2, #31
   d8f4a:	bf5c      	itt	pl
   d8f4c:	2201      	movpl	r2, #1
   d8f4e:	601a      	strpl	r2, [r3, #0]
   d8f50:	4b1e      	ldr	r3, [pc, #120]	; (d8fcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d8f52:	681a      	ldr	r2, [r3, #0]
   d8f54:	07d0      	lsls	r0, r2, #31
   d8f56:	bf5c      	itt	pl
   d8f58:	2201      	movpl	r2, #1
   d8f5a:	601a      	strpl	r2, [r3, #0]
   d8f5c:	4b1c      	ldr	r3, [pc, #112]	; (d8fd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d8f5e:	681a      	ldr	r2, [r3, #0]
   d8f60:	07d1      	lsls	r1, r2, #31
   d8f62:	bf5c      	itt	pl
   d8f64:	2201      	movpl	r2, #1
   d8f66:	601a      	strpl	r2, [r3, #0]
   d8f68:	4b1a      	ldr	r3, [pc, #104]	; (d8fd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d8f6a:	681a      	ldr	r2, [r3, #0]
   d8f6c:	07d2      	lsls	r2, r2, #31
   d8f6e:	bf5c      	itt	pl
   d8f70:	2201      	movpl	r2, #1
   d8f72:	601a      	strpl	r2, [r3, #0]
   d8f74:	4b18      	ldr	r3, [pc, #96]	; (d8fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d8f76:	681a      	ldr	r2, [r3, #0]
   d8f78:	07d0      	lsls	r0, r2, #31
   d8f7a:	bf5c      	itt	pl
   d8f7c:	2201      	movpl	r2, #1
   d8f7e:	601a      	strpl	r2, [r3, #0]
   d8f80:	4b16      	ldr	r3, [pc, #88]	; (d8fdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d8f82:	681a      	ldr	r2, [r3, #0]
   d8f84:	07d1      	lsls	r1, r2, #31
   d8f86:	bf5c      	itt	pl
   d8f88:	2201      	movpl	r2, #1
   d8f8a:	601a      	strpl	r2, [r3, #0]
   d8f8c:	4b14      	ldr	r3, [pc, #80]	; (d8fe0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d8f8e:	681a      	ldr	r2, [r3, #0]
   d8f90:	07d2      	lsls	r2, r2, #31
   d8f92:	bf5c      	itt	pl
   d8f94:	2201      	movpl	r2, #1
   d8f96:	601a      	strpl	r2, [r3, #0]
   d8f98:	4b12      	ldr	r3, [pc, #72]	; (d8fe4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d8f9a:	681a      	ldr	r2, [r3, #0]
   d8f9c:	07d0      	lsls	r0, r2, #31
   d8f9e:	bf5c      	itt	pl
   d8fa0:	2201      	movpl	r2, #1
   d8fa2:	601a      	strpl	r2, [r3, #0]
   d8fa4:	4b10      	ldr	r3, [pc, #64]	; (d8fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d8fa6:	681a      	ldr	r2, [r3, #0]
   d8fa8:	07d1      	lsls	r1, r2, #31
   d8faa:	bf5c      	itt	pl
   d8fac:	2201      	movpl	r2, #1
   d8fae:	601a      	strpl	r2, [r3, #0]
   d8fb0:	4b0e      	ldr	r3, [pc, #56]	; (d8fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d8fb2:	681a      	ldr	r2, [r3, #0]
   d8fb4:	07d2      	lsls	r2, r2, #31
   d8fb6:	bf5c      	itt	pl
   d8fb8:	2201      	movpl	r2, #1
   d8fba:	601a      	strpl	r2, [r3, #0]
   d8fbc:	4770      	bx	lr
   d8fbe:	bf00      	nop
   d8fc0:	2003e5e4 	.word	0x2003e5e4
   d8fc4:	2003e5e0 	.word	0x2003e5e0
   d8fc8:	2003e5dc 	.word	0x2003e5dc
   d8fcc:	2003e5d8 	.word	0x2003e5d8
   d8fd0:	2003e5d4 	.word	0x2003e5d4
   d8fd4:	2003e5d0 	.word	0x2003e5d0
   d8fd8:	2003e5cc 	.word	0x2003e5cc
   d8fdc:	2003e5c8 	.word	0x2003e5c8
   d8fe0:	2003e5c4 	.word	0x2003e5c4
   d8fe4:	2003e5c0 	.word	0x2003e5c0
   d8fe8:	2003e5bc 	.word	0x2003e5bc
   d8fec:	2003e5b8 	.word	0x2003e5b8

000d8ff0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8ff0:	4b18      	ldr	r3, [pc, #96]	; (d9054 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8ff2:	681a      	ldr	r2, [r3, #0]
   d8ff4:	07d1      	lsls	r1, r2, #31
   d8ff6:	bf5c      	itt	pl
   d8ff8:	2201      	movpl	r2, #1
   d8ffa:	601a      	strpl	r2, [r3, #0]
   d8ffc:	4b16      	ldr	r3, [pc, #88]	; (d9058 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8ffe:	681a      	ldr	r2, [r3, #0]
   d9000:	07d2      	lsls	r2, r2, #31
   d9002:	bf5c      	itt	pl
   d9004:	2201      	movpl	r2, #1
   d9006:	601a      	strpl	r2, [r3, #0]
   d9008:	4b14      	ldr	r3, [pc, #80]	; (d905c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d900a:	681a      	ldr	r2, [r3, #0]
   d900c:	07d0      	lsls	r0, r2, #31
   d900e:	bf5c      	itt	pl
   d9010:	2201      	movpl	r2, #1
   d9012:	601a      	strpl	r2, [r3, #0]
   d9014:	4b12      	ldr	r3, [pc, #72]	; (d9060 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d9016:	681a      	ldr	r2, [r3, #0]
   d9018:	07d1      	lsls	r1, r2, #31
   d901a:	bf5c      	itt	pl
   d901c:	2201      	movpl	r2, #1
   d901e:	601a      	strpl	r2, [r3, #0]
   d9020:	4b10      	ldr	r3, [pc, #64]	; (d9064 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d9022:	681a      	ldr	r2, [r3, #0]
   d9024:	07d2      	lsls	r2, r2, #31
   d9026:	bf5c      	itt	pl
   d9028:	2201      	movpl	r2, #1
   d902a:	601a      	strpl	r2, [r3, #0]
   d902c:	4b0e      	ldr	r3, [pc, #56]	; (d9068 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d902e:	681a      	ldr	r2, [r3, #0]
   d9030:	07d0      	lsls	r0, r2, #31
   d9032:	bf5c      	itt	pl
   d9034:	2201      	movpl	r2, #1
   d9036:	601a      	strpl	r2, [r3, #0]
   d9038:	4b0c      	ldr	r3, [pc, #48]	; (d906c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d903a:	681a      	ldr	r2, [r3, #0]
   d903c:	07d1      	lsls	r1, r2, #31
   d903e:	bf5c      	itt	pl
   d9040:	2201      	movpl	r2, #1
   d9042:	601a      	strpl	r2, [r3, #0]
   d9044:	4b0a      	ldr	r3, [pc, #40]	; (d9070 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d9046:	681a      	ldr	r2, [r3, #0]
   d9048:	07d2      	lsls	r2, r2, #31
   d904a:	bf5c      	itt	pl
   d904c:	2201      	movpl	r2, #1
   d904e:	601a      	strpl	r2, [r3, #0]
   d9050:	4770      	bx	lr
   d9052:	bf00      	nop
   d9054:	2003e604 	.word	0x2003e604
   d9058:	2003e600 	.word	0x2003e600
   d905c:	2003e5fc 	.word	0x2003e5fc
   d9060:	2003e5f8 	.word	0x2003e5f8
   d9064:	2003e5f4 	.word	0x2003e5f4
   d9068:	2003e5f0 	.word	0x2003e5f0
   d906c:	2003e5ec 	.word	0x2003e5ec
   d9070:	2003e5e8 	.word	0x2003e5e8

000d9074 <__aeabi_drsub>:
   d9074:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d9078:	e002      	b.n	d9080 <__adddf3>
   d907a:	bf00      	nop

000d907c <__aeabi_dsub>:
   d907c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d9080 <__adddf3>:
   d9080:	b530      	push	{r4, r5, lr}
   d9082:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d9086:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d908a:	ea94 0f05 	teq	r4, r5
   d908e:	bf08      	it	eq
   d9090:	ea90 0f02 	teqeq	r0, r2
   d9094:	bf1f      	itttt	ne
   d9096:	ea54 0c00 	orrsne.w	ip, r4, r0
   d909a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d909e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d90a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d90a6:	f000 80e2 	beq.w	d926e <__adddf3+0x1ee>
   d90aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d90ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d90b2:	bfb8      	it	lt
   d90b4:	426d      	neglt	r5, r5
   d90b6:	dd0c      	ble.n	d90d2 <__adddf3+0x52>
   d90b8:	442c      	add	r4, r5
   d90ba:	ea80 0202 	eor.w	r2, r0, r2
   d90be:	ea81 0303 	eor.w	r3, r1, r3
   d90c2:	ea82 0000 	eor.w	r0, r2, r0
   d90c6:	ea83 0101 	eor.w	r1, r3, r1
   d90ca:	ea80 0202 	eor.w	r2, r0, r2
   d90ce:	ea81 0303 	eor.w	r3, r1, r3
   d90d2:	2d36      	cmp	r5, #54	; 0x36
   d90d4:	bf88      	it	hi
   d90d6:	bd30      	pophi	{r4, r5, pc}
   d90d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d90dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d90e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d90e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d90e8:	d002      	beq.n	d90f0 <__adddf3+0x70>
   d90ea:	4240      	negs	r0, r0
   d90ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d90f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d90f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d90f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d90fc:	d002      	beq.n	d9104 <__adddf3+0x84>
   d90fe:	4252      	negs	r2, r2
   d9100:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9104:	ea94 0f05 	teq	r4, r5
   d9108:	f000 80a7 	beq.w	d925a <__adddf3+0x1da>
   d910c:	f1a4 0401 	sub.w	r4, r4, #1
   d9110:	f1d5 0e20 	rsbs	lr, r5, #32
   d9114:	db0d      	blt.n	d9132 <__adddf3+0xb2>
   d9116:	fa02 fc0e 	lsl.w	ip, r2, lr
   d911a:	fa22 f205 	lsr.w	r2, r2, r5
   d911e:	1880      	adds	r0, r0, r2
   d9120:	f141 0100 	adc.w	r1, r1, #0
   d9124:	fa03 f20e 	lsl.w	r2, r3, lr
   d9128:	1880      	adds	r0, r0, r2
   d912a:	fa43 f305 	asr.w	r3, r3, r5
   d912e:	4159      	adcs	r1, r3
   d9130:	e00e      	b.n	d9150 <__adddf3+0xd0>
   d9132:	f1a5 0520 	sub.w	r5, r5, #32
   d9136:	f10e 0e20 	add.w	lr, lr, #32
   d913a:	2a01      	cmp	r2, #1
   d913c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d9140:	bf28      	it	cs
   d9142:	f04c 0c02 	orrcs.w	ip, ip, #2
   d9146:	fa43 f305 	asr.w	r3, r3, r5
   d914a:	18c0      	adds	r0, r0, r3
   d914c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d9150:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9154:	d507      	bpl.n	d9166 <__adddf3+0xe6>
   d9156:	f04f 0e00 	mov.w	lr, #0
   d915a:	f1dc 0c00 	rsbs	ip, ip, #0
   d915e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d9162:	eb6e 0101 	sbc.w	r1, lr, r1
   d9166:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d916a:	d31b      	bcc.n	d91a4 <__adddf3+0x124>
   d916c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d9170:	d30c      	bcc.n	d918c <__adddf3+0x10c>
   d9172:	0849      	lsrs	r1, r1, #1
   d9174:	ea5f 0030 	movs.w	r0, r0, rrx
   d9178:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d917c:	f104 0401 	add.w	r4, r4, #1
   d9180:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d9184:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d9188:	f080 809a 	bcs.w	d92c0 <__adddf3+0x240>
   d918c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d9190:	bf08      	it	eq
   d9192:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9196:	f150 0000 	adcs.w	r0, r0, #0
   d919a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d919e:	ea41 0105 	orr.w	r1, r1, r5
   d91a2:	bd30      	pop	{r4, r5, pc}
   d91a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d91a8:	4140      	adcs	r0, r0
   d91aa:	eb41 0101 	adc.w	r1, r1, r1
   d91ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d91b2:	f1a4 0401 	sub.w	r4, r4, #1
   d91b6:	d1e9      	bne.n	d918c <__adddf3+0x10c>
   d91b8:	f091 0f00 	teq	r1, #0
   d91bc:	bf04      	itt	eq
   d91be:	4601      	moveq	r1, r0
   d91c0:	2000      	moveq	r0, #0
   d91c2:	fab1 f381 	clz	r3, r1
   d91c6:	bf08      	it	eq
   d91c8:	3320      	addeq	r3, #32
   d91ca:	f1a3 030b 	sub.w	r3, r3, #11
   d91ce:	f1b3 0220 	subs.w	r2, r3, #32
   d91d2:	da0c      	bge.n	d91ee <__adddf3+0x16e>
   d91d4:	320c      	adds	r2, #12
   d91d6:	dd08      	ble.n	d91ea <__adddf3+0x16a>
   d91d8:	f102 0c14 	add.w	ip, r2, #20
   d91dc:	f1c2 020c 	rsb	r2, r2, #12
   d91e0:	fa01 f00c 	lsl.w	r0, r1, ip
   d91e4:	fa21 f102 	lsr.w	r1, r1, r2
   d91e8:	e00c      	b.n	d9204 <__adddf3+0x184>
   d91ea:	f102 0214 	add.w	r2, r2, #20
   d91ee:	bfd8      	it	le
   d91f0:	f1c2 0c20 	rsble	ip, r2, #32
   d91f4:	fa01 f102 	lsl.w	r1, r1, r2
   d91f8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d91fc:	bfdc      	itt	le
   d91fe:	ea41 010c 	orrle.w	r1, r1, ip
   d9202:	4090      	lslle	r0, r2
   d9204:	1ae4      	subs	r4, r4, r3
   d9206:	bfa2      	ittt	ge
   d9208:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d920c:	4329      	orrge	r1, r5
   d920e:	bd30      	popge	{r4, r5, pc}
   d9210:	ea6f 0404 	mvn.w	r4, r4
   d9214:	3c1f      	subs	r4, #31
   d9216:	da1c      	bge.n	d9252 <__adddf3+0x1d2>
   d9218:	340c      	adds	r4, #12
   d921a:	dc0e      	bgt.n	d923a <__adddf3+0x1ba>
   d921c:	f104 0414 	add.w	r4, r4, #20
   d9220:	f1c4 0220 	rsb	r2, r4, #32
   d9224:	fa20 f004 	lsr.w	r0, r0, r4
   d9228:	fa01 f302 	lsl.w	r3, r1, r2
   d922c:	ea40 0003 	orr.w	r0, r0, r3
   d9230:	fa21 f304 	lsr.w	r3, r1, r4
   d9234:	ea45 0103 	orr.w	r1, r5, r3
   d9238:	bd30      	pop	{r4, r5, pc}
   d923a:	f1c4 040c 	rsb	r4, r4, #12
   d923e:	f1c4 0220 	rsb	r2, r4, #32
   d9242:	fa20 f002 	lsr.w	r0, r0, r2
   d9246:	fa01 f304 	lsl.w	r3, r1, r4
   d924a:	ea40 0003 	orr.w	r0, r0, r3
   d924e:	4629      	mov	r1, r5
   d9250:	bd30      	pop	{r4, r5, pc}
   d9252:	fa21 f004 	lsr.w	r0, r1, r4
   d9256:	4629      	mov	r1, r5
   d9258:	bd30      	pop	{r4, r5, pc}
   d925a:	f094 0f00 	teq	r4, #0
   d925e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d9262:	bf06      	itte	eq
   d9264:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d9268:	3401      	addeq	r4, #1
   d926a:	3d01      	subne	r5, #1
   d926c:	e74e      	b.n	d910c <__adddf3+0x8c>
   d926e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9272:	bf18      	it	ne
   d9274:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9278:	d029      	beq.n	d92ce <__adddf3+0x24e>
   d927a:	ea94 0f05 	teq	r4, r5
   d927e:	bf08      	it	eq
   d9280:	ea90 0f02 	teqeq	r0, r2
   d9284:	d005      	beq.n	d9292 <__adddf3+0x212>
   d9286:	ea54 0c00 	orrs.w	ip, r4, r0
   d928a:	bf04      	itt	eq
   d928c:	4619      	moveq	r1, r3
   d928e:	4610      	moveq	r0, r2
   d9290:	bd30      	pop	{r4, r5, pc}
   d9292:	ea91 0f03 	teq	r1, r3
   d9296:	bf1e      	ittt	ne
   d9298:	2100      	movne	r1, #0
   d929a:	2000      	movne	r0, #0
   d929c:	bd30      	popne	{r4, r5, pc}
   d929e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d92a2:	d105      	bne.n	d92b0 <__adddf3+0x230>
   d92a4:	0040      	lsls	r0, r0, #1
   d92a6:	4149      	adcs	r1, r1
   d92a8:	bf28      	it	cs
   d92aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d92ae:	bd30      	pop	{r4, r5, pc}
   d92b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d92b4:	bf3c      	itt	cc
   d92b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d92ba:	bd30      	popcc	{r4, r5, pc}
   d92bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d92c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d92c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d92c8:	f04f 0000 	mov.w	r0, #0
   d92cc:	bd30      	pop	{r4, r5, pc}
   d92ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d92d2:	bf1a      	itte	ne
   d92d4:	4619      	movne	r1, r3
   d92d6:	4610      	movne	r0, r2
   d92d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d92dc:	bf1c      	itt	ne
   d92de:	460b      	movne	r3, r1
   d92e0:	4602      	movne	r2, r0
   d92e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d92e6:	bf06      	itte	eq
   d92e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d92ec:	ea91 0f03 	teqeq	r1, r3
   d92f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d92f4:	bd30      	pop	{r4, r5, pc}
   d92f6:	bf00      	nop

000d92f8 <__aeabi_ui2d>:
   d92f8:	f090 0f00 	teq	r0, #0
   d92fc:	bf04      	itt	eq
   d92fe:	2100      	moveq	r1, #0
   d9300:	4770      	bxeq	lr
   d9302:	b530      	push	{r4, r5, lr}
   d9304:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9308:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d930c:	f04f 0500 	mov.w	r5, #0
   d9310:	f04f 0100 	mov.w	r1, #0
   d9314:	e750      	b.n	d91b8 <__adddf3+0x138>
   d9316:	bf00      	nop

000d9318 <__aeabi_i2d>:
   d9318:	f090 0f00 	teq	r0, #0
   d931c:	bf04      	itt	eq
   d931e:	2100      	moveq	r1, #0
   d9320:	4770      	bxeq	lr
   d9322:	b530      	push	{r4, r5, lr}
   d9324:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9328:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d932c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d9330:	bf48      	it	mi
   d9332:	4240      	negmi	r0, r0
   d9334:	f04f 0100 	mov.w	r1, #0
   d9338:	e73e      	b.n	d91b8 <__adddf3+0x138>
   d933a:	bf00      	nop

000d933c <__aeabi_f2d>:
   d933c:	0042      	lsls	r2, r0, #1
   d933e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d9342:	ea4f 0131 	mov.w	r1, r1, rrx
   d9346:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d934a:	bf1f      	itttt	ne
   d934c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d9350:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9354:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d9358:	4770      	bxne	lr
   d935a:	f092 0f00 	teq	r2, #0
   d935e:	bf14      	ite	ne
   d9360:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9364:	4770      	bxeq	lr
   d9366:	b530      	push	{r4, r5, lr}
   d9368:	f44f 7460 	mov.w	r4, #896	; 0x380
   d936c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9370:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9374:	e720      	b.n	d91b8 <__adddf3+0x138>
   d9376:	bf00      	nop

000d9378 <__aeabi_ul2d>:
   d9378:	ea50 0201 	orrs.w	r2, r0, r1
   d937c:	bf08      	it	eq
   d937e:	4770      	bxeq	lr
   d9380:	b530      	push	{r4, r5, lr}
   d9382:	f04f 0500 	mov.w	r5, #0
   d9386:	e00a      	b.n	d939e <__aeabi_l2d+0x16>

000d9388 <__aeabi_l2d>:
   d9388:	ea50 0201 	orrs.w	r2, r0, r1
   d938c:	bf08      	it	eq
   d938e:	4770      	bxeq	lr
   d9390:	b530      	push	{r4, r5, lr}
   d9392:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d9396:	d502      	bpl.n	d939e <__aeabi_l2d+0x16>
   d9398:	4240      	negs	r0, r0
   d939a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d939e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d93a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d93a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d93aa:	f43f aedc 	beq.w	d9166 <__adddf3+0xe6>
   d93ae:	f04f 0203 	mov.w	r2, #3
   d93b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d93b6:	bf18      	it	ne
   d93b8:	3203      	addne	r2, #3
   d93ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d93be:	bf18      	it	ne
   d93c0:	3203      	addne	r2, #3
   d93c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d93c6:	f1c2 0320 	rsb	r3, r2, #32
   d93ca:	fa00 fc03 	lsl.w	ip, r0, r3
   d93ce:	fa20 f002 	lsr.w	r0, r0, r2
   d93d2:	fa01 fe03 	lsl.w	lr, r1, r3
   d93d6:	ea40 000e 	orr.w	r0, r0, lr
   d93da:	fa21 f102 	lsr.w	r1, r1, r2
   d93de:	4414      	add	r4, r2
   d93e0:	e6c1      	b.n	d9166 <__adddf3+0xe6>
   d93e2:	bf00      	nop

000d93e4 <__aeabi_dmul>:
   d93e4:	b570      	push	{r4, r5, r6, lr}
   d93e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d93ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d93ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d93f2:	bf1d      	ittte	ne
   d93f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d93f8:	ea94 0f0c 	teqne	r4, ip
   d93fc:	ea95 0f0c 	teqne	r5, ip
   d9400:	f000 f8de 	bleq	d95c0 <__aeabi_dmul+0x1dc>
   d9404:	442c      	add	r4, r5
   d9406:	ea81 0603 	eor.w	r6, r1, r3
   d940a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d940e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d9412:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d9416:	bf18      	it	ne
   d9418:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d941c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9420:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9424:	d038      	beq.n	d9498 <__aeabi_dmul+0xb4>
   d9426:	fba0 ce02 	umull	ip, lr, r0, r2
   d942a:	f04f 0500 	mov.w	r5, #0
   d942e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d9432:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d9436:	fbe0 e503 	umlal	lr, r5, r0, r3
   d943a:	f04f 0600 	mov.w	r6, #0
   d943e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d9442:	f09c 0f00 	teq	ip, #0
   d9446:	bf18      	it	ne
   d9448:	f04e 0e01 	orrne.w	lr, lr, #1
   d944c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d9450:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d9454:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d9458:	d204      	bcs.n	d9464 <__aeabi_dmul+0x80>
   d945a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d945e:	416d      	adcs	r5, r5
   d9460:	eb46 0606 	adc.w	r6, r6, r6
   d9464:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d9468:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d946c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d9470:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d9474:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d9478:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d947c:	bf88      	it	hi
   d947e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9482:	d81e      	bhi.n	d94c2 <__aeabi_dmul+0xde>
   d9484:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d9488:	bf08      	it	eq
   d948a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d948e:	f150 0000 	adcs.w	r0, r0, #0
   d9492:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9496:	bd70      	pop	{r4, r5, r6, pc}
   d9498:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d949c:	ea46 0101 	orr.w	r1, r6, r1
   d94a0:	ea40 0002 	orr.w	r0, r0, r2
   d94a4:	ea81 0103 	eor.w	r1, r1, r3
   d94a8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d94ac:	bfc2      	ittt	gt
   d94ae:	ebd4 050c 	rsbsgt	r5, r4, ip
   d94b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d94b6:	bd70      	popgt	{r4, r5, r6, pc}
   d94b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d94bc:	f04f 0e00 	mov.w	lr, #0
   d94c0:	3c01      	subs	r4, #1
   d94c2:	f300 80ab 	bgt.w	d961c <__aeabi_dmul+0x238>
   d94c6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d94ca:	bfde      	ittt	le
   d94cc:	2000      	movle	r0, #0
   d94ce:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d94d2:	bd70      	pople	{r4, r5, r6, pc}
   d94d4:	f1c4 0400 	rsb	r4, r4, #0
   d94d8:	3c20      	subs	r4, #32
   d94da:	da35      	bge.n	d9548 <__aeabi_dmul+0x164>
   d94dc:	340c      	adds	r4, #12
   d94de:	dc1b      	bgt.n	d9518 <__aeabi_dmul+0x134>
   d94e0:	f104 0414 	add.w	r4, r4, #20
   d94e4:	f1c4 0520 	rsb	r5, r4, #32
   d94e8:	fa00 f305 	lsl.w	r3, r0, r5
   d94ec:	fa20 f004 	lsr.w	r0, r0, r4
   d94f0:	fa01 f205 	lsl.w	r2, r1, r5
   d94f4:	ea40 0002 	orr.w	r0, r0, r2
   d94f8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d94fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9500:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9504:	fa21 f604 	lsr.w	r6, r1, r4
   d9508:	eb42 0106 	adc.w	r1, r2, r6
   d950c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9510:	bf08      	it	eq
   d9512:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9516:	bd70      	pop	{r4, r5, r6, pc}
   d9518:	f1c4 040c 	rsb	r4, r4, #12
   d951c:	f1c4 0520 	rsb	r5, r4, #32
   d9520:	fa00 f304 	lsl.w	r3, r0, r4
   d9524:	fa20 f005 	lsr.w	r0, r0, r5
   d9528:	fa01 f204 	lsl.w	r2, r1, r4
   d952c:	ea40 0002 	orr.w	r0, r0, r2
   d9530:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9534:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9538:	f141 0100 	adc.w	r1, r1, #0
   d953c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9540:	bf08      	it	eq
   d9542:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9546:	bd70      	pop	{r4, r5, r6, pc}
   d9548:	f1c4 0520 	rsb	r5, r4, #32
   d954c:	fa00 f205 	lsl.w	r2, r0, r5
   d9550:	ea4e 0e02 	orr.w	lr, lr, r2
   d9554:	fa20 f304 	lsr.w	r3, r0, r4
   d9558:	fa01 f205 	lsl.w	r2, r1, r5
   d955c:	ea43 0302 	orr.w	r3, r3, r2
   d9560:	fa21 f004 	lsr.w	r0, r1, r4
   d9564:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9568:	fa21 f204 	lsr.w	r2, r1, r4
   d956c:	ea20 0002 	bic.w	r0, r0, r2
   d9570:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d9574:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9578:	bf08      	it	eq
   d957a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d957e:	bd70      	pop	{r4, r5, r6, pc}
   d9580:	f094 0f00 	teq	r4, #0
   d9584:	d10f      	bne.n	d95a6 <__aeabi_dmul+0x1c2>
   d9586:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d958a:	0040      	lsls	r0, r0, #1
   d958c:	eb41 0101 	adc.w	r1, r1, r1
   d9590:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9594:	bf08      	it	eq
   d9596:	3c01      	subeq	r4, #1
   d9598:	d0f7      	beq.n	d958a <__aeabi_dmul+0x1a6>
   d959a:	ea41 0106 	orr.w	r1, r1, r6
   d959e:	f095 0f00 	teq	r5, #0
   d95a2:	bf18      	it	ne
   d95a4:	4770      	bxne	lr
   d95a6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d95aa:	0052      	lsls	r2, r2, #1
   d95ac:	eb43 0303 	adc.w	r3, r3, r3
   d95b0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d95b4:	bf08      	it	eq
   d95b6:	3d01      	subeq	r5, #1
   d95b8:	d0f7      	beq.n	d95aa <__aeabi_dmul+0x1c6>
   d95ba:	ea43 0306 	orr.w	r3, r3, r6
   d95be:	4770      	bx	lr
   d95c0:	ea94 0f0c 	teq	r4, ip
   d95c4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d95c8:	bf18      	it	ne
   d95ca:	ea95 0f0c 	teqne	r5, ip
   d95ce:	d00c      	beq.n	d95ea <__aeabi_dmul+0x206>
   d95d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d95d4:	bf18      	it	ne
   d95d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d95da:	d1d1      	bne.n	d9580 <__aeabi_dmul+0x19c>
   d95dc:	ea81 0103 	eor.w	r1, r1, r3
   d95e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d95e4:	f04f 0000 	mov.w	r0, #0
   d95e8:	bd70      	pop	{r4, r5, r6, pc}
   d95ea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d95ee:	bf06      	itte	eq
   d95f0:	4610      	moveq	r0, r2
   d95f2:	4619      	moveq	r1, r3
   d95f4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d95f8:	d019      	beq.n	d962e <__aeabi_dmul+0x24a>
   d95fa:	ea94 0f0c 	teq	r4, ip
   d95fe:	d102      	bne.n	d9606 <__aeabi_dmul+0x222>
   d9600:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d9604:	d113      	bne.n	d962e <__aeabi_dmul+0x24a>
   d9606:	ea95 0f0c 	teq	r5, ip
   d960a:	d105      	bne.n	d9618 <__aeabi_dmul+0x234>
   d960c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d9610:	bf1c      	itt	ne
   d9612:	4610      	movne	r0, r2
   d9614:	4619      	movne	r1, r3
   d9616:	d10a      	bne.n	d962e <__aeabi_dmul+0x24a>
   d9618:	ea81 0103 	eor.w	r1, r1, r3
   d961c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9620:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9624:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9628:	f04f 0000 	mov.w	r0, #0
   d962c:	bd70      	pop	{r4, r5, r6, pc}
   d962e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9632:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d9636:	bd70      	pop	{r4, r5, r6, pc}

000d9638 <__aeabi_ddiv>:
   d9638:	b570      	push	{r4, r5, r6, lr}
   d963a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d963e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9646:	bf1d      	ittte	ne
   d9648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d964c:	ea94 0f0c 	teqne	r4, ip
   d9650:	ea95 0f0c 	teqne	r5, ip
   d9654:	f000 f8a7 	bleq	d97a6 <__aeabi_ddiv+0x16e>
   d9658:	eba4 0405 	sub.w	r4, r4, r5
   d965c:	ea81 0e03 	eor.w	lr, r1, r3
   d9660:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9664:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9668:	f000 8088 	beq.w	d977c <__aeabi_ddiv+0x144>
   d966c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9670:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d9674:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d9678:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d967c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d9680:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d9684:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d9688:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d968c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d9690:	429d      	cmp	r5, r3
   d9692:	bf08      	it	eq
   d9694:	4296      	cmpeq	r6, r2
   d9696:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d969a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d969e:	d202      	bcs.n	d96a6 <__aeabi_ddiv+0x6e>
   d96a0:	085b      	lsrs	r3, r3, #1
   d96a2:	ea4f 0232 	mov.w	r2, r2, rrx
   d96a6:	1ab6      	subs	r6, r6, r2
   d96a8:	eb65 0503 	sbc.w	r5, r5, r3
   d96ac:	085b      	lsrs	r3, r3, #1
   d96ae:	ea4f 0232 	mov.w	r2, r2, rrx
   d96b2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d96b6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d96ba:	ebb6 0e02 	subs.w	lr, r6, r2
   d96be:	eb75 0e03 	sbcs.w	lr, r5, r3
   d96c2:	bf22      	ittt	cs
   d96c4:	1ab6      	subcs	r6, r6, r2
   d96c6:	4675      	movcs	r5, lr
   d96c8:	ea40 000c 	orrcs.w	r0, r0, ip
   d96cc:	085b      	lsrs	r3, r3, #1
   d96ce:	ea4f 0232 	mov.w	r2, r2, rrx
   d96d2:	ebb6 0e02 	subs.w	lr, r6, r2
   d96d6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d96da:	bf22      	ittt	cs
   d96dc:	1ab6      	subcs	r6, r6, r2
   d96de:	4675      	movcs	r5, lr
   d96e0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d96e4:	085b      	lsrs	r3, r3, #1
   d96e6:	ea4f 0232 	mov.w	r2, r2, rrx
   d96ea:	ebb6 0e02 	subs.w	lr, r6, r2
   d96ee:	eb75 0e03 	sbcs.w	lr, r5, r3
   d96f2:	bf22      	ittt	cs
   d96f4:	1ab6      	subcs	r6, r6, r2
   d96f6:	4675      	movcs	r5, lr
   d96f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d96fc:	085b      	lsrs	r3, r3, #1
   d96fe:	ea4f 0232 	mov.w	r2, r2, rrx
   d9702:	ebb6 0e02 	subs.w	lr, r6, r2
   d9706:	eb75 0e03 	sbcs.w	lr, r5, r3
   d970a:	bf22      	ittt	cs
   d970c:	1ab6      	subcs	r6, r6, r2
   d970e:	4675      	movcs	r5, lr
   d9710:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d9714:	ea55 0e06 	orrs.w	lr, r5, r6
   d9718:	d018      	beq.n	d974c <__aeabi_ddiv+0x114>
   d971a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d971e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d9722:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d9726:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d972a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d972e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d9732:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d9736:	d1c0      	bne.n	d96ba <__aeabi_ddiv+0x82>
   d9738:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d973c:	d10b      	bne.n	d9756 <__aeabi_ddiv+0x11e>
   d973e:	ea41 0100 	orr.w	r1, r1, r0
   d9742:	f04f 0000 	mov.w	r0, #0
   d9746:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d974a:	e7b6      	b.n	d96ba <__aeabi_ddiv+0x82>
   d974c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9750:	bf04      	itt	eq
   d9752:	4301      	orreq	r1, r0
   d9754:	2000      	moveq	r0, #0
   d9756:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d975a:	bf88      	it	hi
   d975c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9760:	f63f aeaf 	bhi.w	d94c2 <__aeabi_dmul+0xde>
   d9764:	ebb5 0c03 	subs.w	ip, r5, r3
   d9768:	bf04      	itt	eq
   d976a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d976e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9772:	f150 0000 	adcs.w	r0, r0, #0
   d9776:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d977a:	bd70      	pop	{r4, r5, r6, pc}
   d977c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9780:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d9784:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d9788:	bfc2      	ittt	gt
   d978a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d978e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9792:	bd70      	popgt	{r4, r5, r6, pc}
   d9794:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9798:	f04f 0e00 	mov.w	lr, #0
   d979c:	3c01      	subs	r4, #1
   d979e:	e690      	b.n	d94c2 <__aeabi_dmul+0xde>
   d97a0:	ea45 0e06 	orr.w	lr, r5, r6
   d97a4:	e68d      	b.n	d94c2 <__aeabi_dmul+0xde>
   d97a6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d97aa:	ea94 0f0c 	teq	r4, ip
   d97ae:	bf08      	it	eq
   d97b0:	ea95 0f0c 	teqeq	r5, ip
   d97b4:	f43f af3b 	beq.w	d962e <__aeabi_dmul+0x24a>
   d97b8:	ea94 0f0c 	teq	r4, ip
   d97bc:	d10a      	bne.n	d97d4 <__aeabi_ddiv+0x19c>
   d97be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d97c2:	f47f af34 	bne.w	d962e <__aeabi_dmul+0x24a>
   d97c6:	ea95 0f0c 	teq	r5, ip
   d97ca:	f47f af25 	bne.w	d9618 <__aeabi_dmul+0x234>
   d97ce:	4610      	mov	r0, r2
   d97d0:	4619      	mov	r1, r3
   d97d2:	e72c      	b.n	d962e <__aeabi_dmul+0x24a>
   d97d4:	ea95 0f0c 	teq	r5, ip
   d97d8:	d106      	bne.n	d97e8 <__aeabi_ddiv+0x1b0>
   d97da:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d97de:	f43f aefd 	beq.w	d95dc <__aeabi_dmul+0x1f8>
   d97e2:	4610      	mov	r0, r2
   d97e4:	4619      	mov	r1, r3
   d97e6:	e722      	b.n	d962e <__aeabi_dmul+0x24a>
   d97e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d97ec:	bf18      	it	ne
   d97ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d97f2:	f47f aec5 	bne.w	d9580 <__aeabi_dmul+0x19c>
   d97f6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d97fa:	f47f af0d 	bne.w	d9618 <__aeabi_dmul+0x234>
   d97fe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d9802:	f47f aeeb 	bne.w	d95dc <__aeabi_dmul+0x1f8>
   d9806:	e712      	b.n	d962e <__aeabi_dmul+0x24a>

000d9808 <__aeabi_d2f>:
   d9808:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d980c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d9810:	bf24      	itt	cs
   d9812:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d9816:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d981a:	d90d      	bls.n	d9838 <__aeabi_d2f+0x30>
   d981c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9820:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d9824:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d9828:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d982c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9830:	bf08      	it	eq
   d9832:	f020 0001 	biceq.w	r0, r0, #1
   d9836:	4770      	bx	lr
   d9838:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d983c:	d121      	bne.n	d9882 <__aeabi_d2f+0x7a>
   d983e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d9842:	bfbc      	itt	lt
   d9844:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d9848:	4770      	bxlt	lr
   d984a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d984e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d9852:	f1c2 0218 	rsb	r2, r2, #24
   d9856:	f1c2 0c20 	rsb	ip, r2, #32
   d985a:	fa10 f30c 	lsls.w	r3, r0, ip
   d985e:	fa20 f002 	lsr.w	r0, r0, r2
   d9862:	bf18      	it	ne
   d9864:	f040 0001 	orrne.w	r0, r0, #1
   d9868:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d986c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9870:	fa03 fc0c 	lsl.w	ip, r3, ip
   d9874:	ea40 000c 	orr.w	r0, r0, ip
   d9878:	fa23 f302 	lsr.w	r3, r3, r2
   d987c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9880:	e7cc      	b.n	d981c <__aeabi_d2f+0x14>
   d9882:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d9886:	d107      	bne.n	d9898 <__aeabi_d2f+0x90>
   d9888:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d988c:	bf1e      	ittt	ne
   d988e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d9892:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d9896:	4770      	bxne	lr
   d9898:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d989c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d98a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d98a4:	4770      	bx	lr
   d98a6:	bf00      	nop

000d98a8 <__cxa_atexit>:
   d98a8:	b510      	push	{r4, lr}
   d98aa:	4c05      	ldr	r4, [pc, #20]	; (d98c0 <__cxa_atexit+0x18>)
   d98ac:	4613      	mov	r3, r2
   d98ae:	b12c      	cbz	r4, d98bc <__cxa_atexit+0x14>
   d98b0:	460a      	mov	r2, r1
   d98b2:	4601      	mov	r1, r0
   d98b4:	2002      	movs	r0, #2
   d98b6:	f3af 8000 	nop.w
   d98ba:	bd10      	pop	{r4, pc}
   d98bc:	4620      	mov	r0, r4
   d98be:	bd10      	pop	{r4, pc}
   d98c0:	00000000 	.word	0x00000000

000d98c4 <memcmp>:
   d98c4:	b510      	push	{r4, lr}
   d98c6:	3901      	subs	r1, #1
   d98c8:	4402      	add	r2, r0
   d98ca:	4290      	cmp	r0, r2
   d98cc:	d007      	beq.n	d98de <memcmp+0x1a>
   d98ce:	f810 3b01 	ldrb.w	r3, [r0], #1
   d98d2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d98d6:	42a3      	cmp	r3, r4
   d98d8:	d0f7      	beq.n	d98ca <memcmp+0x6>
   d98da:	1b18      	subs	r0, r3, r4
   d98dc:	bd10      	pop	{r4, pc}
   d98de:	2000      	movs	r0, #0
   d98e0:	bd10      	pop	{r4, pc}

000d98e2 <memcpy>:
   d98e2:	b510      	push	{r4, lr}
   d98e4:	1e43      	subs	r3, r0, #1
   d98e6:	440a      	add	r2, r1
   d98e8:	4291      	cmp	r1, r2
   d98ea:	d004      	beq.n	d98f6 <memcpy+0x14>
   d98ec:	f811 4b01 	ldrb.w	r4, [r1], #1
   d98f0:	f803 4f01 	strb.w	r4, [r3, #1]!
   d98f4:	e7f8      	b.n	d98e8 <memcpy+0x6>
   d98f6:	bd10      	pop	{r4, pc}

000d98f8 <memset>:
   d98f8:	4402      	add	r2, r0
   d98fa:	4603      	mov	r3, r0
   d98fc:	4293      	cmp	r3, r2
   d98fe:	d002      	beq.n	d9906 <memset+0xe>
   d9900:	f803 1b01 	strb.w	r1, [r3], #1
   d9904:	e7fa      	b.n	d98fc <memset+0x4>
   d9906:	4770      	bx	lr

000d9908 <srand>:
   d9908:	b538      	push	{r3, r4, r5, lr}
   d990a:	4b12      	ldr	r3, [pc, #72]	; (d9954 <srand+0x4c>)
   d990c:	681c      	ldr	r4, [r3, #0]
   d990e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9910:	4605      	mov	r5, r0
   d9912:	b9d3      	cbnz	r3, d994a <srand+0x42>
   d9914:	2018      	movs	r0, #24
   d9916:	f7fd fd97 	bl	d7448 <malloc>
   d991a:	f243 330e 	movw	r3, #13070	; 0x330e
   d991e:	63a0      	str	r0, [r4, #56]	; 0x38
   d9920:	8003      	strh	r3, [r0, #0]
   d9922:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d9926:	8043      	strh	r3, [r0, #2]
   d9928:	f241 2334 	movw	r3, #4660	; 0x1234
   d992c:	8083      	strh	r3, [r0, #4]
   d992e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d9932:	80c3      	strh	r3, [r0, #6]
   d9934:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9938:	8103      	strh	r3, [r0, #8]
   d993a:	2305      	movs	r3, #5
   d993c:	8143      	strh	r3, [r0, #10]
   d993e:	230b      	movs	r3, #11
   d9940:	8183      	strh	r3, [r0, #12]
   d9942:	2201      	movs	r2, #1
   d9944:	2300      	movs	r3, #0
   d9946:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d994a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d994c:	2200      	movs	r2, #0
   d994e:	611d      	str	r5, [r3, #16]
   d9950:	615a      	str	r2, [r3, #20]
   d9952:	bd38      	pop	{r3, r4, r5, pc}
   d9954:	2003db48 	.word	0x2003db48

000d9958 <strlen>:
   d9958:	4603      	mov	r3, r0
   d995a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d995e:	2a00      	cmp	r2, #0
   d9960:	d1fb      	bne.n	d995a <strlen+0x2>
   d9962:	1a18      	subs	r0, r3, r0
   d9964:	3801      	subs	r0, #1
   d9966:	4770      	bx	lr

000d9968 <dynalib_user>:
   d9968:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d9978:	0000 0000 5453 5241 0054 0030 0a7d 4f00     ....START.0.}..O
   d9988:	2050 5453 5441 3a45 5200 5045 524f 4954     P STATE:.REPORTI
   d9998:	474e 4920 544e 5245 4156 3a4c 0020 4144     NG INTERVAL: .DA
   d99a8:	4154 5220 5345 4c4f 5455 4f49 3a4e 0020     TA RESOLUTION: .
   d99b8:	4553 4952 4c41 4e20 4d55 4542 3a52 0020     SERIAL NUMBER: .
   d99c8:	514d 5454 4220 4f52 454b 3a52 0020 514d     MQTT BROKER: .MQ
   d99d8:	5454 4220 4f52 454b 2052 4f50 5452 203a     TT BROKER PORT: 
   d99e8:	4300 4548 4b43 5553 3a4d 0020 6553 7474     .CHECKSUM: .Sett
   d99f8:	6e69 7367 5320 7661 6465 7320 6375 6563     ings Saved succe
   d9a08:	7373 7566 6c6c 0079 4553 4952 4c41 4420     ssfully.SERIAL D
   d9a18:	5441 2041 4553 5454 4e49 5347 2d20 3e2d     ATA SETTINGS -->
   d9a28:	7b20 5300 5445 4954 474e 2053 4146 4c49      {.SETTINGS FAIL
   d9a38:	4445 5200 4345 4945 4556 2044 534d 3a47     ED.RECEIVED MSG:
   d9a48:	0020 4d0a 5345 4153 4547 5420 5059 3a45      ..MESSAGE TYPE:
   d9a58:	0020 454e 2057 514d 5454 4220 4f52 454b      .NEW MQTT BROKE
   d9a68:	2052 4553 3a54 0020 6552 6f63 6e6e 6365     R SET: .Reconnec
   d9a78:	6974 676e 7420 206f 7242 6b6f 7265 5000     ting to Broker.P
   d9a88:	4255 494c 4853 4620 4941 454c 0044 440a     UBLISH FAILED..D
   d9a98:	7665 6369 2065 4449 203a 0a00 6554 7473     evice ID: ..Test
   d9aa8:	6e69 2067 4545 5250 4d4f 003a 500a 6572     ing EEPROM:..Pre
   d9ab8:	7373 6220 7475 6f74 206e 6f66 3a72 0020     ss button for: .
   d9ac8:	5320 6365 6e6f 7364 0a00 6554 7473 6e69      Seconds..Testin
   d9ad8:	2067 7542 7474 6e6f 003a 540a 7365 6974     g Button:..Testi
   d9ae8:	676e 5620 6c61 6576 003a 540a 7365 6974     ng Valve:..Testi
   d9af8:	676e 5320 2044 6143 6472 003a 540a 7365     ng SD Card:..Tes
   d9b08:	6974 676e 5220 6461 6f69 003a 550a 6b6e     ting Radio:..Unk
   d9b18:	6f6e 6e77 6320 6d6f 616d 646e 5500 4953     nown command.USI
   d9b28:	474e 4420 4645 5541 544c 5320 5445 4954     NG DEFAULT SETTI
   d9b38:	474e 0053 5355 4e49 2047 4553 5454 4e49     NGS.USING SETTIN
   d9b48:	5347 4620 4f52 204d 454d 4f4d 5952 7400     GS FROM MEMORY.t
   d9b58:	7365 2e74 7262 6b6f 7265 632e 6d6f 0000     est.broker.com..

000d9b68 <_ZTV5Timer>:
	...
   d9b70:	4ed5 000d 4f1d 000d 4e5b 000d               .N...O..[N..

000d9b7c <_ZTVN8particle13__SPISettingsE>:
	...
   d9b84:	5009 000d                                   .P..

000d9b88 <_ZTV4File>:
	...
   d9b90:	5007 000d 509f 000d 5079 000d 506d 000d     .P...P..yP..mP..
   d9ba0:	4fe9 000d 50e3 000d 5067 000d 5061 000d     .O...P..gP..aP..

000d9bb0 <_ZTV6SdFile>:
	...
   d9bb8:	5005 000d 5091 000d 50ad 000d 5073 000d     .P...P...P..sP..
   d9bc8:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   d9bd8:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   d9be8:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   d9bf8:	676e 2073 7325 6c25 2075 7325 4d20 444f     ngs %s%lu %s MOD
   d9c08:	2545 3e64 2500 3230 2558 3230 2558 3230     E%d>.%02X%02X%02
   d9c18:	2558 3230 2e58 4f4c 0047 002f 4652 364d     X%02X.LOG./.RFM6
   d9c28:	2039 4e49 5449 4520 5252 524f 4e00 5745     9 INIT ERROR.NEW
   d9c38:	4e20 444f 2045 4449 203a 4e00 5745 4e20      NODE ID: .NEW N
   d9c48:	5445 4f57 4b52 4920 3a44 0020 4749 2d48     ETWORK ID: .IGH-
   d9c58:	4652 364d 4839 5743 4b2d 5945 3c00 4554     RFM69HCW-KEY.<TE
   d9c68:	5453 003e 543c 5345 3a54 4b4f 003e 0400     ST>.<TEST:OK>...
   d9c78:	514d 5454 0004 4d06 4951 6473 0370 0000     MQTT...MQIsdp...

000d9c88 <_ZTV5RFM69>:
	...
   d9c90:	6a21 000d                                   !j..

000d9c94 <_ZTVN5spark13EthernetClassE>:
	...
   d9c9c:	74f7 000d 74ed 000d 74e3 000d 74d9 000d     .t...t...t...t..
   d9cac:	74cd 000d 74c1 000d 74b5 000d 74ad 000d     .t...t...t...t..
   d9cbc:	74a3 000d 7499 000d 8aaf 000d               .t...t......

000d9cc8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d9cc8:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
   d9cd8:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d9ce8:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d9cf8:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d9d08:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d9d18:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d9d28:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d9d38:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d9d48:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   d9d58:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   d9d68:	7465 6961 736c 3d20 0020 0a0d 6600 6c00     etails = ....f.l
   d9d78:	006e 6e66 6300 646f 0065 6564 6174 6c69     n.fn.code.detail
   d9d88:	6e00 6e6f 0065 7274 6361 0065 6e69 6f66     .none.trace.info
   d9d98:	7700 7261 006e 7265 6f72 0072 6170 696e     .warn.error.pani
   d9da8:	0063 6c61 006c 005a 2b25 3330 3a64 3025     c.all.Z.%+03d:%0
   d9db8:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   d9dc8:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000d9dd8 <_ZTV14CellularSignal>:
	...
   d9de0:	51c1 000d 51c3 000d 7ad1 000d 7b61 000d     .Q...Q...z..a{..
   d9df0:	7ad5 000d 7b2d 000d 7b01 000d 7bd3 000d     .z..-{...{...{..
   d9e00:	fffc ffff 0000 0000 7bfd 000d               .........{..

000d9e0c <_ZTV9IPAddress>:
	...
   d9e14:	7e09 000d 7df9 000d 7dfb 000d               .~...}...}..

000d9e20 <_ZTV9USBSerial>:
	...
   d9e28:	7f21 000d 7f71 000d 7f7f 000d 78f5 000d     !...q........x..
   d9e38:	7f5d 000d 7f23 000d 7f39 000d 7f6b 000d     ]...#...9...k...
   d9e48:	7f4f 000d 7f1d 000d                         O.......

000d9e50 <_ZTVN5spark13CellularClassE>:
	...
   d9e58:	80e7 000d 80dd 000d 80d3 000d 8089 000d     ................
   d9e68:	80c7 000d 80bb 000d 80af 000d 80a7 000d     ................
   d9e78:	809d 000d 8093 000d 8aaf 000d               ............

000d9e84 <_ZTV11USARTSerial>:
	...
   d9e8c:	8121 000d 8171 000d 817f 000d 78f5 000d     !...q........x..
   d9e9c:	8135 000d 8157 000d 8143 000d 816b 000d     5...W...C...k...
   d9eac:	8123 000d 8127 000d                         #...'...

000d9eb4 <_ZTV7TwoWire>:
	...
   d9ebc:	8225 000d 826f 000d 8247 000d 8227 000d     %...o...G...'...
   d9ecc:	824f 000d 8257 000d 825f 000d 8267 000d     O...W..._...g...

000d9edc <_ZTVN5spark9MeshClassE>:
	...
   d9ee4:	839d 000d 8393 000d 8389 000d 837f 000d     ................
   d9ef4:	8373 000d 8367 000d 835b 000d 8353 000d     s...g...[...S...
   d9f04:	8349 000d 833f 000d 8aaf 000d               I...?.......

000d9f10 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d9f18:	8541 000d 8547 000d 8a2f 000d 8555 000d     A...G.../...U...
   d9f28:	8543 000d                                   C...

000d9f2c <_ZTV9TCPClient>:
	...
   d9f34:	5401 000d 5435 000d 84b9 000d 84d3 000d     .T..5T..........
   d9f44:	88d5 000d 8627 000d 85f9 000d 84fd 000d     ....'...........
   d9f54:	87b1 000d 86ad 000d 865b 000d 88a5 000d     ........[.......
   d9f64:	84ff 000d 8537 000d 84e5 000d 8559 000d     ....7.......Y...
   d9f74:	85d9 000d 6977 6972 676e 7200 6365 2076     ....wiring.recv 
   d9f84:	7265 6f72 2072 203d 6425 0000               error = %d..

000d9f90 <_ZTVN5spark12NetworkClassE>:
	...
   d9f98:	8a47 000d 8a51 000d 8a5b 000d 8a65 000d     G...Q...[...e...
   d9fa8:	8a6f 000d 8a7b 000d 8a87 000d 8a93 000d     o...{...........
   d9fb8:	8a9b 000d 8aa5 000d 8aaf 000d               ............

000d9fc4 <_ZSt7nothrow>:
   d9fc4:	0000 0000                                   ....

000d9fc8 <__sf_fake_stdin>:
	...

000d9fe8 <__sf_fake_stdout>:
	...

000da008 <__sf_fake_stderr>:
	...
   da028:	0043                                        C.

000da02a <link_const_variable_data_end>:
	...

000da02c <link_constructors_location>:
   da02c:	000d45d9 	.word	0x000d45d9
   da030:	000d4b37 	.word	0x000d4b37
   da034:	000d4cf1 	.word	0x000d4cf1
   da038:	000d4d2d 	.word	0x000d4d2d
   da03c:	000d4e3b 	.word	0x000d4e3b
   da040:	000d4f59 	.word	0x000d4f59
   da044:	000d50ed 	.word	0x000d50ed
   da048:	000d5225 	.word	0x000d5225
   da04c:	000d53cd 	.word	0x000d53cd
   da050:	000d5c4f 	.word	0x000d5c4f
   da054:	000d5c53 	.word	0x000d5c53
   da058:	000d5c57 	.word	0x000d5c57
   da05c:	000d5c75 	.word	0x000d5c75
   da060:	000d5c79 	.word	0x000d5c79
   da064:	000d5c7d 	.word	0x000d5c7d
   da068:	000d5c81 	.word	0x000d5c81
   da06c:	000d60d9 	.word	0x000d60d9
   da070:	000d60fd 	.word	0x000d60fd
   da074:	000d6101 	.word	0x000d6101
   da078:	000d62e7 	.word	0x000d62e7
   da07c:	000d62eb 	.word	0x000d62eb
   da080:	000d62ef 	.word	0x000d62ef
   da084:	000d66a5 	.word	0x000d66a5
   da088:	000d66a9 	.word	0x000d66a9
   da08c:	000d66ad 	.word	0x000d66ad
   da090:	000d6731 	.word	0x000d6731
   da094:	000d6db9 	.word	0x000d6db9
   da098:	000d6dbd 	.word	0x000d6dbd
   da09c:	000d7501 	.word	0x000d7501
   da0a0:	000d77b1 	.word	0x000d77b1
   da0a4:	000d78cd 	.word	0x000d78cd
   da0a8:	000d7a11 	.word	0x000d7a11
   da0ac:	000d7a8d 	.word	0x000d7a8d
   da0b0:	000d7ab5 	.word	0x000d7ab5
   da0b4:	000d80f1 	.word	0x000d80f1
   da0b8:	000d8469 	.word	0x000d8469
   da0bc:	000d8b7d 	.word	0x000d8b7d
   da0c0:	000d8de5 	.word	0x000d8de5
   da0c4:	000d8e69 	.word	0x000d8e69
   da0c8:	000d8f2d 	.word	0x000d8f2d
   da0cc:	000d8ff1 	.word	0x000d8ff1
