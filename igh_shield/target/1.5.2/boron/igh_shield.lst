
d:/git/igh/igh_shield/target/1.5.2/boron/igh_shield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000048e4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d8900  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  2003dd30  000d8904  0001dd30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000a50  2003dda0  2003dda0  0002dda0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d8974  000d8974  00028974  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d899c  000d899c  0002899c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001c027a  00000000  00000000  000289a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00025cde  00000000  00000000  001e8c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002fc87  00000000  00000000  0020e8f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003550  00000000  00000000  0023e57f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006290  00000000  00000000  00241acf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0005acab  00000000  00000000  00247d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0006b017  00000000  00000000  002a2a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011755d  00000000  00000000  0030da21  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000fd48  00000000  00000000  00424f80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f004 f929 	bl	d8284 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f004 f92e 	bl	d829a <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003dd30 	.word	0x2003dd30
   d4048:	000d8904 	.word	0x000d8904
   d404c:	2003dda0 	.word	0x2003dda0
   d4050:	2003dda0 	.word	0x2003dda0
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fd5d 	bl	d6b18 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d88fc 	.word	0x000d88fc
   d4080:	000d885c 	.word	0x000d885c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b813 	b.w	d40ae <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f81d 	bl	d40c8 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 bd03 	b.w	d6a9c <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f001 bfb7 	b.w	d6008 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f001 bfb5 	b.w	d6008 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <setup>:
}

#else
/* Run Application routine */
void setup() 
{
   d40ae:	b508      	push	{r3, lr}
    Serial.begin(19200);
   d40b0:	f002 fe32 	bl	d6d18 <_Z16_fetch_usbserialv>
   d40b4:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
   d40b8:	f002 fe22 	bl	d6d00 <_ZN9USBSerial5beginEl>

    // setup the Boron
    igh_boron_setup();
   d40bc:	f000 fb32 	bl	d4724 <_Z15igh_boron_setupv>
    // starte the radio
    igh_rfm69_setup();
}
   d40c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.begin(19200);

    // setup the Boron
    igh_boron_setup();
    // starte the radio
    igh_rfm69_setup();
   d40c4:	f000 bb98 	b.w	d47f8 <_Z15igh_rfm69_setupv>

000d40c8 <loop>:
}

void loop() 
{
   d40c8:	b508      	push	{r3, lr}
    igh_boron_service();
   d40ca:	f000 fb33 	bl	d4734 <_Z17igh_boron_servicev>
    igh_message_receive_and_stage_sensor_data();
}
   d40ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void loop() 
{
    igh_boron_service();
    igh_message_receive_and_stage_sensor_data();
   d40d2:	f000 b809 	b.w	d40e8 <igh_message_receive_and_stage_sensor_data>

000d40d6 <_GLOBAL__sub_I_setup>:
}
   d40d6:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d40d8:	f001 fcba 	bl	d5a50 <HAL_Pin_Map>

#ifdef TEST_MODE
#include "particle_api/igh_log.h"
#endif

SYSTEM_THREAD(ENABLED);
   d40dc:	2100      	movs	r1, #0
   d40de:	2001      	movs	r0, #1

void loop() 
{
    igh_boron_service();
    igh_message_receive_and_stage_sensor_data();
}
   d40e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#ifdef TEST_MODE
#include "particle_api/igh_log.h"
#endif

SYSTEM_THREAD(ENABLED);
   d40e4:	f001 beec 	b.w	d5ec0 <system_thread_set_state>

000d40e8 <igh_message_receive_and_stage_sensor_data>:
    uint8_t bytes_added = igh_msg_buffer_tracker + 1 ;
    return bytes_added;
}

void igh_message_receive_and_stage_sensor_data( void )
{
   d40e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d40ea:	b0d1      	sub	sp, #324	; 0x144
    uint8_t rx_buffer[61];
    uint8_t store_data_pkt[255];
    uint8_t data_rx_len = 0;

    data_rx_len = igh_rfm69_receive_raw_bytes( rx_buffer, sizeof(rx_buffer) );
   d40ec:	213d      	movs	r1, #61	; 0x3d
   d40ee:	4668      	mov	r0, sp
   d40f0:	f000 fbae 	bl	d4850 <_Z27igh_rfm69_receive_raw_bytesPhh>

    if( 0 != data_rx_len )
   d40f4:	4605      	mov	r5, r0
   d40f6:	2800      	cmp	r0, #0
   d40f8:	f000 80c5 	beq.w	d4286 <igh_message_receive_and_stage_sensor_data+0x19e>
    {
        Serial.print("\nUnix Time:        "); Serial.println(igh_boron_unix_time());
   d40fc:	f002 fe0c 	bl	d6d18 <_Z16_fetch_usbserialv>
   d4100:	4962      	ldr	r1, [pc, #392]	; (d428c <igh_message_receive_and_stage_sensor_data+0x1a4>)
   d4102:	f002 f9cb 	bl	d649c <_ZN5Print5printEPKc>
   d4106:	f002 fe07 	bl	d6d18 <_Z16_fetch_usbserialv>
   d410a:	4604      	mov	r4, r0
   d410c:	f000 fad0 	bl	d46b0 <_Z19igh_boron_unix_timev>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4110:	220a      	movs	r2, #10
   d4112:	4601      	mov	r1, r0
   d4114:	4620      	mov	r0, r4
   d4116:	f002 f9d4 	bl	d64c2 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d411a:	4620      	mov	r0, r4
   d411c:	f002 f9c5 	bl	d64aa <_ZN5Print7printlnEv>
        Serial.print("cloud status:     "); Serial.println(igh_boron_connected_to_cloud());
   d4120:	f002 fdfa 	bl	d6d18 <_Z16_fetch_usbserialv>
   d4124:	495a      	ldr	r1, [pc, #360]	; (d4290 <igh_message_receive_and_stage_sensor_data+0x1a8>)
   d4126:	f002 f9b9 	bl	d649c <_ZN5Print5printEPKc>
   d412a:	f002 fdf5 	bl	d6d18 <_Z16_fetch_usbserialv>
   d412e:	4604      	mov	r4, r0
   d4130:	f000 faf6 	bl	d4720 <_Z28igh_boron_connected_to_cloudv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4134:	220a      	movs	r2, #10
   d4136:	4601      	mov	r1, r0
   d4138:	4620      	mov	r0, r4
   d413a:	f002 f9c2 	bl	d64c2 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d413e:	4620      	mov	r0, r4
   d4140:	f002 f9b3 	bl	d64aa <_ZN5Print7printlnEv>
        Serial.print("network status:   "); Serial.println(igh_boron_connecetd_to_network());
   d4144:	f002 fde8 	bl	d6d18 <_Z16_fetch_usbserialv>
   d4148:	4952      	ldr	r1, [pc, #328]	; (d4294 <igh_message_receive_and_stage_sensor_data+0x1ac>)
   d414a:	f002 f9a7 	bl	d649c <_ZN5Print5printEPKc>
   d414e:	f002 fde3 	bl	d6d18 <_Z16_fetch_usbserialv>
   d4152:	4604      	mov	r4, r0
   d4154:	f000 fadc 	bl	d4710 <_Z30igh_boron_connecetd_to_networkv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4158:	220a      	movs	r2, #10
   d415a:	4601      	mov	r1, r0
   d415c:	4620      	mov	r0, r4
   d415e:	f002 f9b0 	bl	d64c2 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4162:	4620      	mov	r0, r4
   d4164:	f002 f9a1 	bl	d64aa <_ZN5Print7printlnEv>
        Serial.print("signal strength:  "); Serial.println(igh_boron_ss());
   d4168:	f002 fdd6 	bl	d6d18 <_Z16_fetch_usbserialv>
   d416c:	494a      	ldr	r1, [pc, #296]	; (d4298 <igh_message_receive_and_stage_sensor_data+0x1b0>)
   d416e:	f002 f995 	bl	d649c <_ZN5Print5printEPKc>
   d4172:	f002 fdd1 	bl	d6d18 <_Z16_fetch_usbserialv>
   d4176:	4604      	mov	r4, r0
   d4178:	f000 fac2 	bl	d4700 <_Z12igh_boron_ssv>
   d417c:	2102      	movs	r1, #2
   d417e:	4620      	mov	r0, r4
   d4180:	f002 fa89 	bl	d6696 <_ZN5Print7printlnEfi>
        Serial.print("signal quality:   "); Serial.println(igh_boron_sq());
   d4184:	f002 fdc8 	bl	d6d18 <_Z16_fetch_usbserialv>
   d4188:	4944      	ldr	r1, [pc, #272]	; (d429c <igh_message_receive_and_stage_sensor_data+0x1b4>)
   d418a:	f002 f987 	bl	d649c <_ZN5Print5printEPKc>
   d418e:	f002 fdc3 	bl	d6d18 <_Z16_fetch_usbserialv>
   d4192:	4604      	mov	r4, r0
   d4194:	f000 faba 	bl	d470c <_Z12igh_boron_sqv>
   d4198:	2102      	movs	r1, #2
   d419a:	4620      	mov	r0, r4
   d419c:	f002 fa7b 	bl	d6696 <_ZN5Print7printlnEfi>
        Serial.print("Battery Voltage:  "); Serial.println(igh_boron_voltage());
   d41a0:	f002 fdba 	bl	d6d18 <_Z16_fetch_usbserialv>
   d41a4:	493e      	ldr	r1, [pc, #248]	; (d42a0 <igh_message_receive_and_stage_sensor_data+0x1b8>)
   d41a6:	f002 f979 	bl	d649c <_ZN5Print5printEPKc>
   d41aa:	f002 fdb5 	bl	d6d18 <_Z16_fetch_usbserialv>
   d41ae:	4604      	mov	r4, r0
   d41b0:	f000 fa86 	bl	d46c0 <_Z17igh_boron_voltagev>
   d41b4:	2102      	movs	r1, #2
   d41b6:	4620      	mov	r0, r4
   d41b8:	f002 fa6d 	bl	d6696 <_ZN5Print7printlnEfi>
        Serial.print("Battery SOC:      "); Serial.println(igh_boron_SoC());
   d41bc:	f002 fdac 	bl	d6d18 <_Z16_fetch_usbserialv>
   d41c0:	4938      	ldr	r1, [pc, #224]	; (d42a4 <igh_message_receive_and_stage_sensor_data+0x1bc>)
   d41c2:	f002 f96b 	bl	d649c <_ZN5Print5printEPKc>
   d41c6:	f002 fda7 	bl	d6d18 <_Z16_fetch_usbserialv>
   d41ca:	4604      	mov	r4, r0
   d41cc:	f000 fa72 	bl	d46b4 <_Z13igh_boron_SoCv>
   d41d0:	4620      	mov	r0, r4
   d41d2:	2102      	movs	r1, #2
   d41d4:	f002 fa5f 	bl	d6696 <_ZN5Print7printlnEfi>

        uint32_t timestamp_to_store = (uint32_t)igh_boron_unix_time();
   d41d8:	f000 fa6a 	bl	d46b0 <_Z19igh_boron_unix_timev>
   d41dc:	4606      	mov	r6, r0
        float battery_soc_float = igh_boron_SoC();
   d41de:	f000 fa69 	bl	d46b4 <_Z13igh_boron_SoCv>
        uint32_t total_water_dispensed = 12364897; // replace with actual reading

        uint8_t i = 0; // keep track of pkt data

        // Add DATA PKT PID
        store_data_pkt[i++] = DATA_PKT;
   d41e2:	ac10      	add	r4, sp, #64	; 0x40

        // Add Timestamp
        store_data_pkt[i++] = STORE_TIMESTAMP;
        store_data_pkt[i++] = SIZE_OF_STORE_TIMESTAMP;
        store_data_pkt[i++] = (uint8_t)timestamp_to_store;
        store_data_pkt[i++] = (uint8_t)( timestamp_to_store >> 8);
   d41e4:	0a31      	lsrs	r1, r6, #8
        Serial.print("Battery SOC:      "); Serial.println(igh_boron_SoC());

        uint32_t timestamp_to_store = (uint32_t)igh_boron_unix_time();
        float battery_soc_float = igh_boron_SoC();
        uint32_t battery_soc;
        memcpy(&battery_soc, &battery_soc_float, sizeof battery_soc);
   d41e6:	ee10 3a10 	vmov	r3, s0

        // Add Timestamp
        store_data_pkt[i++] = STORE_TIMESTAMP;
        store_data_pkt[i++] = SIZE_OF_STORE_TIMESTAMP;
        store_data_pkt[i++] = (uint8_t)timestamp_to_store;
        store_data_pkt[i++] = (uint8_t)( timestamp_to_store >> 8);
   d41ea:	7161      	strb	r1, [r4, #5]
        store_data_pkt[i++] = (uint8_t)( timestamp_to_store >> 16);
   d41ec:	0c31      	lsrs	r1, r6, #16
   d41ee:	71a1      	strb	r1, [r4, #6]
        store_data_pkt[i++] = (uint8_t)( timestamp_to_store >> 24);

        // Add Shield battery level
        store_data_pkt[i++] = SHIELD_BATTERY_LEVEL;
   d41f0:	210d      	movs	r1, #13
   d41f2:	7221      	strb	r1, [r4, #8]
        store_data_pkt[i++] = SIZE_OF_SHIELD_BATTERY_LEVEL;
        store_data_pkt[i++] = (uint8_t)battery_soc;
        store_data_pkt[i++] = (uint8_t)( battery_soc >> 8);
   d41f4:	0a19      	lsrs	r1, r3, #8
        store_data_pkt[i++] = (uint8_t)( timestamp_to_store >> 24);

        // Add Shield battery level
        store_data_pkt[i++] = SHIELD_BATTERY_LEVEL;
        store_data_pkt[i++] = SIZE_OF_SHIELD_BATTERY_LEVEL;
        store_data_pkt[i++] = (uint8_t)battery_soc;
   d41f6:	72a3      	strb	r3, [r4, #10]
        store_data_pkt[i++] = (uint8_t)( battery_soc >> 8);
   d41f8:	72e1      	strb	r1, [r4, #11]
        store_data_pkt[i++] = (uint8_t)( battery_soc >> 16);
   d41fa:	0c19      	lsrs	r1, r3, #16
        store_data_pkt[i++] = (uint8_t)( battery_soc >> 24);
   d41fc:	0e1b      	lsrs	r3, r3, #24
   d41fe:	7363      	strb	r3, [r4, #13]

        // Add Valve position
        store_data_pkt[i++] = VALVE_POSITION;
   d4200:	230f      	movs	r3, #15
   d4202:	73a3      	strb	r3, [r4, #14]
        store_data_pkt[i++] = SIZE_OF_VALVE_POSITION;
   d4204:	2301      	movs	r3, #1
   d4206:	73e3      	strb	r3, [r4, #15]
        store_data_pkt[i++] = current_valve_position;
   d4208:	4b27      	ldr	r3, [pc, #156]	; (d42a8 <igh_message_receive_and_stage_sensor_data+0x1c0>)
        i++; // leave room for length

        // Add Timestamp
        store_data_pkt[i++] = STORE_TIMESTAMP;
        store_data_pkt[i++] = SIZE_OF_STORE_TIMESTAMP;
        store_data_pkt[i++] = (uint8_t)timestamp_to_store;
   d420a:	7126      	strb	r6, [r4, #4]
        store_data_pkt[i++] = (uint8_t)( battery_soc >> 24);

        // Add Valve position
        store_data_pkt[i++] = VALVE_POSITION;
        store_data_pkt[i++] = SIZE_OF_VALVE_POSITION;
        store_data_pkt[i++] = current_valve_position;
   d420c:	781b      	ldrb	r3, [r3, #0]
   d420e:	7423      	strb	r3, [r4, #16]
        uint32_t total_water_dispensed = 12364897; // replace with actual reading

        uint8_t i = 0; // keep track of pkt data

        // Add DATA PKT PID
        store_data_pkt[i++] = DATA_PKT;
   d4210:	22fe      	movs	r2, #254	; 0xfe
   d4212:	7022      	strb	r2, [r4, #0]
        store_data_pkt[i++] = VALVE_POSITION;
        store_data_pkt[i++] = SIZE_OF_VALVE_POSITION;
        store_data_pkt[i++] = current_valve_position;

        // Add water dispensed 
        store_data_pkt[i++] = WATER_DISPENSED;
   d4214:	2307      	movs	r3, #7
        // Add DATA PKT PID
        store_data_pkt[i++] = DATA_PKT;
        i++; // leave room for length

        // Add Timestamp
        store_data_pkt[i++] = STORE_TIMESTAMP;
   d4216:	2202      	movs	r2, #2
   d4218:	70a2      	strb	r2, [r4, #2]
        store_data_pkt[i++] = VALVE_POSITION;
        store_data_pkt[i++] = SIZE_OF_VALVE_POSITION;
        store_data_pkt[i++] = current_valve_position;

        // Add water dispensed 
        store_data_pkt[i++] = WATER_DISPENSED;
   d421a:	7463      	strb	r3, [r4, #17]
        store_data_pkt[i++] = DATA_PKT;
        i++; // leave room for length

        // Add Timestamp
        store_data_pkt[i++] = STORE_TIMESTAMP;
        store_data_pkt[i++] = SIZE_OF_STORE_TIMESTAMP;
   d421c:	2204      	movs	r2, #4
        store_data_pkt[i++] = current_valve_position;

        // Add water dispensed 
        store_data_pkt[i++] = WATER_DISPENSED;
        store_data_pkt[i++] = SIZE_OF_WATER_DISPENSED;
        store_data_pkt[i++] = (uint8_t)total_water_dispensed;
   d421e:	2361      	movs	r3, #97	; 0x61
        store_data_pkt[i++] = DATA_PKT;
        i++; // leave room for length

        // Add Timestamp
        store_data_pkt[i++] = STORE_TIMESTAMP;
        store_data_pkt[i++] = SIZE_OF_STORE_TIMESTAMP;
   d4220:	70e2      	strb	r2, [r4, #3]
        store_data_pkt[i++] = (uint8_t)timestamp_to_store;
        store_data_pkt[i++] = (uint8_t)( timestamp_to_store >> 8);
        store_data_pkt[i++] = (uint8_t)( timestamp_to_store >> 16);
        store_data_pkt[i++] = (uint8_t)( timestamp_to_store >> 24);
   d4222:	0e36      	lsrs	r6, r6, #24

        // Add Shield battery level
        store_data_pkt[i++] = SHIELD_BATTERY_LEVEL;
        store_data_pkt[i++] = SIZE_OF_SHIELD_BATTERY_LEVEL;
   d4224:	7262      	strb	r2, [r4, #9]
        store_data_pkt[i++] = SIZE_OF_VALVE_POSITION;
        store_data_pkt[i++] = current_valve_position;

        // Add water dispensed 
        store_data_pkt[i++] = WATER_DISPENSED;
        store_data_pkt[i++] = SIZE_OF_WATER_DISPENSED;
   d4226:	74a2      	strb	r2, [r4, #18]
        store_data_pkt[i++] = (uint8_t)total_water_dispensed;
   d4228:	74e3      	strb	r3, [r4, #19]
        store_data_pkt[i++] = (uint8_t)( total_water_dispensed >> 8);
        store_data_pkt[i++] = (uint8_t)( total_water_dispensed >> 16);
        store_data_pkt[i++] = (uint8_t)( total_water_dispensed >> 24);

        // Add received data
        memcpy( &store_data_pkt[i], rx_buffer, data_rx_len );
   d422a:	462a      	mov	r2, r5

        // Add water dispensed 
        store_data_pkt[i++] = WATER_DISPENSED;
        store_data_pkt[i++] = SIZE_OF_WATER_DISPENSED;
        store_data_pkt[i++] = (uint8_t)total_water_dispensed;
        store_data_pkt[i++] = (uint8_t)( total_water_dispensed >> 8);
   d422c:	23ac      	movs	r3, #172	; 0xac
        store_data_pkt[i++] = (uint8_t)( total_water_dispensed >> 16);
        store_data_pkt[i++] = (uint8_t)( total_water_dispensed >> 24);

        // Add received data
        memcpy( &store_data_pkt[i], rx_buffer, data_rx_len );
        i += data_rx_len;
   d422e:	3517      	adds	r5, #23
        store_data_pkt[i++] = STORE_TIMESTAMP;
        store_data_pkt[i++] = SIZE_OF_STORE_TIMESTAMP;
        store_data_pkt[i++] = (uint8_t)timestamp_to_store;
        store_data_pkt[i++] = (uint8_t)( timestamp_to_store >> 8);
        store_data_pkt[i++] = (uint8_t)( timestamp_to_store >> 16);
        store_data_pkt[i++] = (uint8_t)( timestamp_to_store >> 24);
   d4230:	71e6      	strb	r6, [r4, #7]
        // Add Shield battery level
        store_data_pkt[i++] = SHIELD_BATTERY_LEVEL;
        store_data_pkt[i++] = SIZE_OF_SHIELD_BATTERY_LEVEL;
        store_data_pkt[i++] = (uint8_t)battery_soc;
        store_data_pkt[i++] = (uint8_t)( battery_soc >> 8);
        store_data_pkt[i++] = (uint8_t)( battery_soc >> 16);
   d4232:	7321      	strb	r1, [r4, #12]

        // Add water dispensed 
        store_data_pkt[i++] = WATER_DISPENSED;
        store_data_pkt[i++] = SIZE_OF_WATER_DISPENSED;
        store_data_pkt[i++] = (uint8_t)total_water_dispensed;
        store_data_pkt[i++] = (uint8_t)( total_water_dispensed >> 8);
   d4234:	7523      	strb	r3, [r4, #20]
        store_data_pkt[i++] = (uint8_t)( total_water_dispensed >> 16);
        store_data_pkt[i++] = (uint8_t)( total_water_dispensed >> 24);

        // Add received data
        memcpy( &store_data_pkt[i], rx_buffer, data_rx_len );
   d4236:	4669      	mov	r1, sp
        // Add water dispensed 
        store_data_pkt[i++] = WATER_DISPENSED;
        store_data_pkt[i++] = SIZE_OF_WATER_DISPENSED;
        store_data_pkt[i++] = (uint8_t)total_water_dispensed;
        store_data_pkt[i++] = (uint8_t)( total_water_dispensed >> 8);
        store_data_pkt[i++] = (uint8_t)( total_water_dispensed >> 16);
   d4238:	23bc      	movs	r3, #188	; 0xbc
        store_data_pkt[i++] = (uint8_t)( total_water_dispensed >> 24);
   d423a:	2600      	movs	r6, #0

        // Add received data
        memcpy( &store_data_pkt[i], rx_buffer, data_rx_len );
   d423c:	f10d 0057 	add.w	r0, sp, #87	; 0x57
        i += data_rx_len;
   d4240:	b2ed      	uxtb	r5, r5
        // Add water dispensed 
        store_data_pkt[i++] = WATER_DISPENSED;
        store_data_pkt[i++] = SIZE_OF_WATER_DISPENSED;
        store_data_pkt[i++] = (uint8_t)total_water_dispensed;
        store_data_pkt[i++] = (uint8_t)( total_water_dispensed >> 8);
        store_data_pkt[i++] = (uint8_t)( total_water_dispensed >> 16);
   d4242:	7563      	strb	r3, [r4, #21]
        store_data_pkt[i++] = (uint8_t)( total_water_dispensed >> 24);
   d4244:	75a6      	strb	r6, [r4, #22]

        // Add received data
        memcpy( &store_data_pkt[i], rx_buffer, data_rx_len );
   d4246:	f004 f81d 	bl	d8284 <memcpy>
        i += data_rx_len;

        store_data_pkt[1] = i; // add length
   d424a:	7065      	strb	r5, [r4, #1]

        Serial.print("DATA TO STORE: ");
   d424c:	f002 fd64 	bl	d6d18 <_Z16_fetch_usbserialv>
   d4250:	4916      	ldr	r1, [pc, #88]	; (d42ac <igh_message_receive_and_stage_sensor_data+0x1c4>)
   d4252:	f002 f923 	bl	d649c <_ZN5Print5printEPKc>
        for( uint8_t k = 0; k < i; k++ )
   d4256:	b2f3      	uxtb	r3, r6
   d4258:	429d      	cmp	r5, r3
   d425a:	d90f      	bls.n	d427c <igh_message_receive_and_stage_sensor_data+0x194>
        {
            if( store_data_pkt[k] <= 0x0F ) Serial.print("0");
   d425c:	5da7      	ldrb	r7, [r4, r6]
   d425e:	2f0f      	cmp	r7, #15
   d4260:	d804      	bhi.n	d426c <igh_message_receive_and_stage_sensor_data+0x184>
   d4262:	f002 fd59 	bl	d6d18 <_Z16_fetch_usbserialv>
   d4266:	4912      	ldr	r1, [pc, #72]	; (d42b0 <igh_message_receive_and_stage_sensor_data+0x1c8>)
   d4268:	f002 f918 	bl	d649c <_ZN5Print5printEPKc>
            Serial.print(store_data_pkt[k], HEX);
   d426c:	f002 fd54 	bl	d6d18 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4270:	2210      	movs	r2, #16
   d4272:	4639      	mov	r1, r7
   d4274:	f002 f925 	bl	d64c2 <_ZN5Print11printNumberEmh>
   d4278:	3601      	adds	r6, #1
        i += data_rx_len;

        store_data_pkt[1] = i; // add length

        Serial.print("DATA TO STORE: ");
        for( uint8_t k = 0; k < i; k++ )
   d427a:	e7ec      	b.n	d4256 <igh_message_receive_and_stage_sensor_data+0x16e>
        {
            if( store_data_pkt[k] <= 0x0F ) Serial.print("0");
            Serial.print(store_data_pkt[k], HEX);
        }
        Serial.print("\n");
   d427c:	f002 fd4c 	bl	d6d18 <_Z16_fetch_usbserialv>
   d4280:	490c      	ldr	r1, [pc, #48]	; (d42b4 <igh_message_receive_and_stage_sensor_data+0x1cc>)
   d4282:	f002 f90b 	bl	d649c <_ZN5Print5printEPKc>

    }
}
   d4286:	b051      	add	sp, #324	; 0x144
   d4288:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d428a:	bf00      	nop
   d428c:	000d8320 	.word	0x000d8320
   d4290:	000d8334 	.word	0x000d8334
   d4294:	000d8347 	.word	0x000d8347
   d4298:	000d835a 	.word	0x000d835a
   d429c:	000d836d 	.word	0x000d836d
   d42a0:	000d8380 	.word	0x000d8380
   d42a4:	000d8393 	.word	0x000d8393
   d42a8:	2003ddb4 	.word	0x2003ddb4
   d42ac:	000d83a6 	.word	0x000d83a6
   d42b0:	000d83b6 	.word	0x000d83b6
   d42b4:	000d8624 	.word	0x000d8624

000d42b8 <_GLOBAL__sub_I_igh_message_add_tuple>:
   d42b8:	f001 bbca 	b.w	d5a50 <HAL_Pin_Map>

000d42bc <_GLOBAL__sub_I_test_valve_flag>:
        igh_append_test_status(ret);
        test_rfm69_flag = false;
    }

    return ret;
   d42bc:	b510      	push	{r4, lr}
static void print_cmd_options(void);
static void igh_append_test_status(uint8_t _status);

uint8_t test_rfm69_flag = 0;

String IGH_ID;
   d42be:	4c07      	ldr	r4, [pc, #28]	; (d42dc <_GLOBAL__sub_I_test_valve_flag+0x20>)
   d42c0:	f001 fbc6 	bl	d5a50 <HAL_Pin_Map>
   d42c4:	4906      	ldr	r1, [pc, #24]	; (d42e0 <_GLOBAL__sub_I_test_valve_flag+0x24>)
   d42c6:	4620      	mov	r0, r4
   d42c8:	f002 f8a3 	bl	d6412 <_ZN6StringC1EPK19__FlashStringHelper>
   d42cc:	4620      	mov	r0, r4
   d42ce:	4a05      	ldr	r2, [pc, #20]	; (d42e4 <_GLOBAL__sub_I_test_valve_flag+0x28>)
   d42d0:	4905      	ldr	r1, [pc, #20]	; (d42e8 <_GLOBAL__sub_I_test_valve_flag+0x2c>)
        igh_append_test_status(ret);
        test_rfm69_flag = false;
    }

    return ret;
   d42d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void print_cmd_options(void);
static void igh_append_test_status(uint8_t _status);

uint8_t test_rfm69_flag = 0;

String IGH_ID;
   d42d6:	f003 b95d 	b.w	d7594 <__aeabi_atexit>
   d42da:	bf00      	nop
   d42dc:	2003dda4 	.word	0x2003dda4
   d42e0:	000d8625 	.word	0x000d8625
   d42e4:	2003dda0 	.word	0x2003dda0
   d42e8:	000d6385 	.word	0x000d6385

000d42ec <_GLOBAL__sub_I__Z31igh_eeprom_save_system_settingsP15system_settings>:
   d42ec:	f001 bbb0 	b.w	d5a50 <HAL_Pin_Map>

000d42f0 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d42f0:	6803      	ldr	r3, [r0, #0]
   d42f2:	4718      	bx	r3

000d42f4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d42f4:	2a01      	cmp	r2, #1
   d42f6:	d002      	beq.n	d42fe <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d42f8:	2a02      	cmp	r2, #2
   d42fa:	d002      	beq.n	d4302 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d42fc:	e004      	b.n	d4308 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d42fe:	6001      	str	r1, [r0, #0]
	      break;
   d4300:	e002      	b.n	d4308 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d4302:	680b      	ldr	r3, [r1, #0]
   d4304:	b100      	cbz	r0, d4308 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d4306:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4308:	2000      	movs	r0, #0
   d430a:	4770      	bx	lr

000d430c <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d430c:	6943      	ldr	r3, [r0, #20]
   d430e:	b113      	cbz	r3, d4316 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4310:	6983      	ldr	r3, [r0, #24]
   d4312:	300c      	adds	r0, #12
   d4314:	4718      	bx	r3
   d4316:	4770      	bx	lr

000d4318 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4318:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d431a:	2100      	movs	r1, #0
   d431c:	4604      	mov	r4, r0
   d431e:	4608      	mov	r0, r1
   d4320:	f001 fc8e 	bl	d5c40 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4324:	a902      	add	r1, sp, #8
   d4326:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4328:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d432a:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d432e:	f001 fc9f 	bl	d5c70 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d4332:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4334:	b10c      	cbz	r4, d433a <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d4336:	2301      	movs	r3, #1
   d4338:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d433a:	2100      	movs	r1, #0
   d433c:	2001      	movs	r0, #1
   d433e:	f001 fc7f 	bl	d5c40 <os_thread_scheduling>
            }
        }
        if (t) {
   d4342:	b12c      	cbz	r4, d4350 <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d4344:	6823      	ldr	r3, [r4, #0]
   d4346:	4620      	mov	r0, r4
   d4348:	689b      	ldr	r3, [r3, #8]
   d434a:	4798      	blx	r3
            t->running = false;
   d434c:	2300      	movs	r3, #0
   d434e:	7123      	strb	r3, [r4, #4]
        }
    }
   d4350:	b002      	add	sp, #8
   d4352:	bd10      	pop	{r4, pc}

000d4354 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4354:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4356:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4358:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d435a:	b113      	cbz	r3, d4362 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d435c:	2203      	movs	r2, #3
   d435e:	4601      	mov	r1, r0
   d4360:	4798      	blx	r3
    }
   d4362:	4620      	mov	r0, r4
   d4364:	bd10      	pop	{r4, pc}

000d4366 <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d4366:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d4368:	6880      	ldr	r0, [r0, #8]
   d436a:	2300      	movs	r3, #0
   d436c:	b138      	cbz	r0, d437e <_ZN5Timer5_stopEjb+0x18>
   d436e:	e88d 000a 	stmia.w	sp, {r1, r3}
   d4372:	2102      	movs	r1, #2
   d4374:	f001 fc84 	bl	d5c80 <os_timer_change>
   d4378:	fab0 f080 	clz	r0, r0
   d437c:	0940      	lsrs	r0, r0, #5
    }
   d437e:	b003      	add	sp, #12
   d4380:	f85d fb04 	ldr.w	pc, [sp], #4

000d4384 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4384:	b538      	push	{r3, r4, r5, lr}
   d4386:	4b10      	ldr	r3, [pc, #64]	; (d43c8 <_ZN5TimerD1Ev+0x44>)
   d4388:	6003      	str	r3, [r0, #0]
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d438a:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d438c:	4604      	mov	r4, r0
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d438e:	b1a3      	cbz	r3, d43ba <_ZN5TimerD1Ev+0x36>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4390:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4394:	2200      	movs	r2, #0
   d4396:	f7ff ffe6 	bl	d4366 <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d439a:	2100      	movs	r1, #0
   d439c:	68a0      	ldr	r0, [r4, #8]
   d439e:	f001 fc87 	bl	d5cb0 <os_timer_set_id>
            while (running) {
   d43a2:	7923      	ldrb	r3, [r4, #4]
   d43a4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d43a8:	b113      	cbz	r3, d43b0 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d43aa:	f001 fc31 	bl	d5c10 <os_thread_yield>
   d43ae:	e7f8      	b.n	d43a2 <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d43b0:	4629      	mov	r1, r5
   d43b2:	68a0      	ldr	r0, [r4, #8]
   d43b4:	f001 fc54 	bl	d5c60 <os_timer_destroy>
            handle = nullptr;
   d43b8:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d43ba:	f104 000c 	add.w	r0, r4, #12
   d43be:	f7ff ffc9 	bl	d4354 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d43c2:	4620      	mov	r0, r4
   d43c4:	bd38      	pop	{r3, r4, r5, pc}
   d43c6:	bf00      	nop
   d43c8:	000d8450 	.word	0x000d8450

000d43cc <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d43cc:	b510      	push	{r4, lr}
   d43ce:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d43d0:	f7ff ffd8 	bl	d4384 <_ZN5TimerD1Ev>
   d43d4:	4620      	mov	r0, r4
   d43d6:	211c      	movs	r1, #28
   d43d8:	f003 f8ea 	bl	d75b0 <_ZdlPvj>
   d43dc:	4620      	mov	r0, r4
   d43de:	bd10      	pop	{r4, pc}

000d43e0 <_Z21igh_boron_read_buttonv>:
    igh_button_timer.start();
    igh_button_sec_counter = 0;
}

uint8_t igh_boron_read_button(void)
{
   d43e0:	b508      	push	{r3, lr}
    return digitalRead(IGH_IRRIGATION_BUTTON);
   d43e2:	200f      	movs	r0, #15
   d43e4:	f003 f842 	bl	d746c <digitalRead>
}
   d43e8:	b2c0      	uxtb	r0, r0
   d43ea:	bd08      	pop	{r3, pc}

000d43ec <_Z31igh_boron_button_press_durationv>:

void igh_boron_button_press_duration(void)
{
   d43ec:	b508      	push	{r3, lr}
    if(!igh_boron_read_button())
   d43ee:	f7ff fff7 	bl	d43e0 <_Z21igh_boron_read_buttonv>
   d43f2:	4b04      	ldr	r3, [pc, #16]	; (d4404 <_Z31igh_boron_button_press_durationv+0x18>)
   d43f4:	b910      	cbnz	r0, d43fc <_Z31igh_boron_button_press_durationv+0x10>
    {
        igh_button_sec_counter++;
   d43f6:	781a      	ldrb	r2, [r3, #0]
   d43f8:	3201      	adds	r2, #1
   d43fa:	e000      	b.n	d43fe <_Z31igh_boron_button_press_durationv+0x12>
    }
    else
    {
        igh_button_sec_counter = 0;
   d43fc:	2200      	movs	r2, #0
   d43fe:	701a      	strb	r2, [r3, #0]
   d4400:	bd08      	pop	{r3, pc}
   d4402:	bf00      	nop
   d4404:	2003ddb5 	.word	0x2003ddb5

000d4408 <_GLOBAL__sub_I_igh_button_sec_counter>:
    } 
   d4408:	b570      	push	{r4, r5, r6, lr}
   d440a:	b088      	sub	sp, #32
   d440c:	f001 fb20 	bl	d5a50 <HAL_Pin_Map>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d4410:	4b19      	ldr	r3, [pc, #100]	; (d4478 <_GLOBAL__sub_I_igh_button_sec_counter+0x70>)
   d4412:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4414:	ad04      	add	r5, sp, #16
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d4416:	4c19      	ldr	r4, [pc, #100]	; (d447c <_GLOBAL__sub_I_igh_button_sec_counter+0x74>)
   d4418:	4b19      	ldr	r3, [pc, #100]	; (d4480 <_GLOBAL__sub_I_igh_button_sec_counter+0x78>)
   d441a:	6023      	str	r3, [r4, #0]
   d441c:	e895 0003 	ldmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4420:	f104 020c 	add.w	r2, r4, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4424:	ae02      	add	r6, sp, #8
   d4426:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d442a:	e892 0003 	ldmia.w	r2, {r0, r1}
   d442e:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4432:	e896 0003 	ldmia.w	r6, {r0, r1}
   d4436:	e882 0003 	stmia.w	r2, {r0, r1}
   d443a:	4a12      	ldr	r2, [pc, #72]	; (d4484 <_GLOBAL__sub_I_igh_button_sec_counter+0x7c>)
   d443c:	6162      	str	r2, [r4, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d443e:	69a2      	ldr	r2, [r4, #24]
   d4440:	9207      	str	r2, [sp, #28]
   d4442:	2300      	movs	r3, #0
      __b = _GLIBCXX_MOVE(__tmp);
   d4444:	4a10      	ldr	r2, [pc, #64]	; (d4488 <_GLOBAL__sub_I_igh_button_sec_counter+0x80>)
   d4446:	7123      	strb	r3, [r4, #4]
   d4448:	60a3      	str	r3, [r4, #8]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d444a:	9306      	str	r3, [sp, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   d444c:	61a2      	str	r2, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d444e:	9301      	str	r3, [sp, #4]
   d4450:	9300      	str	r3, [sp, #0]
   d4452:	4a0e      	ldr	r2, [pc, #56]	; (d448c <_GLOBAL__sub_I_igh_button_sec_counter+0x84>)
   d4454:	4623      	mov	r3, r4
   d4456:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d445a:	f104 0008 	add.w	r0, r4, #8
   d445e:	f001 fbf7 	bl	d5c50 <os_timer_create>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4462:	4628      	mov	r0, r5
   d4464:	f7ff ff76 	bl	d4354 <_ZNSt14_Function_baseD1Ev>
#include "Particle.h"
#include "igh_hardware.h"

// button global variables
uint8_t igh_button_sec_counter;
Timer igh_button_timer(1000, igh_boron_button_press_duration);
   d4468:	4a09      	ldr	r2, [pc, #36]	; (d4490 <_GLOBAL__sub_I_igh_button_sec_counter+0x88>)
   d446a:	490a      	ldr	r1, [pc, #40]	; (d4494 <_GLOBAL__sub_I_igh_button_sec_counter+0x8c>)
   d446c:	4620      	mov	r0, r4
   d446e:	f003 f891 	bl	d7594 <__aeabi_atexit>
    }
    else
    {
        igh_button_sec_counter = 0;
    } 
   d4472:	b008      	add	sp, #32
   d4474:	bd70      	pop	{r4, r5, r6, pc}
   d4476:	bf00      	nop
   d4478:	000d43ed 	.word	0x000d43ed
   d447c:	2003ddb8 	.word	0x2003ddb8
   d4480:	000d8450 	.word	0x000d8450
   d4484:	000d42f5 	.word	0x000d42f5
   d4488:	000d42f1 	.word	0x000d42f1
   d448c:	000d4319 	.word	0x000d4319
   d4490:	2003dda0 	.word	0x2003dda0
   d4494:	000d4385 	.word	0x000d4385

000d4498 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d4498:	7c03      	ldrb	r3, [r0, #16]
   d449a:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d449e:	4602      	mov	r2, r0
   d44a0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d44a4:	b12b      	cbz	r3, d44b2 <_ZN4File9availableEv+0x1a>
   d44a6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d44a8:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d44aa:	1a18      	subs	r0, r3, r0
   d44ac:	bf48      	it	mi
   d44ae:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d44b2:	4770      	bx	lr

000d44b4 <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
   d44b4:	4770      	bx	lr

000d44b6 <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d44b6:	4770      	bx	lr

000d44b8 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d44b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d44ba:	4602      	mov	r2, r0
   d44bc:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d44be:	7913      	ldrb	r3, [r2, #4]
   d44c0:	6895      	ldr	r5, [r2, #8]
   d44c2:	b133      	cbz	r3, d44d2 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d44c4:	b93d      	cbnz	r5, d44d6 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d44c6:	490c      	ldr	r1, [pc, #48]	; (d44f8 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d44c8:	b004      	add	sp, #16
   d44ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d44ce:	f001 bfe5 	b.w	d649c <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d44d2:	4b0a      	ldr	r3, [pc, #40]	; (d44fc <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d44d4:	e000      	b.n	d44d8 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d44d6:	4b0a      	ldr	r3, [pc, #40]	; (d4500 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d44d8:	7b16      	ldrb	r6, [r2, #12]
   d44da:	4c0a      	ldr	r4, [pc, #40]	; (d4504 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d44dc:	490a      	ldr	r1, [pc, #40]	; (d4508 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d44de:	7b52      	ldrb	r2, [r2, #13]
   d44e0:	9202      	str	r2, [sp, #8]
   d44e2:	2e01      	cmp	r6, #1
   d44e4:	bf08      	it	eq
   d44e6:	4621      	moveq	r1, r4
   d44e8:	9101      	str	r1, [sp, #4]
   d44ea:	9500      	str	r5, [sp, #0]
   d44ec:	4a07      	ldr	r2, [pc, #28]	; (d450c <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d44ee:	2100      	movs	r1, #0
   d44f0:	f002 f8e0 	bl	d66b4 <_ZN5Print11printf_implEbPKcz>
  }
   d44f4:	b004      	add	sp, #16
   d44f6:	bd70      	pop	{r4, r5, r6, pc}
   d44f8:	000d84b9 	.word	0x000d84b9
   d44fc:	000d8625 	.word	0x000d8625
   d4500:	000d84a8 	.word	0x000d84a8
   d4504:	000d84b1 	.word	0x000d84b1
   d4508:	000d84b5 	.word	0x000d84b5
   d450c:	000d84cf 	.word	0x000d84cf

000d4510 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d4510:	3010      	adds	r0, #16
   d4512:	f000 bb17 	b.w	d4b44 <_ZN7FatFile4syncEv>

000d4516 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d4516:	3010      	adds	r0, #16
   d4518:	f000 bab7 	b.w	d4a8a <_ZN7FatFile4peekEv>

000d451c <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d451c:	3010      	adds	r0, #16
   d451e:	f000 bb47 	b.w	d4bb0 <_ZN7FatFile5writeEPKvj>

000d4522 <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d4522:	3008      	adds	r0, #8
   d4524:	f000 bb44 	b.w	d4bb0 <_ZN7FatFile5writeEPKvj>

000d4528 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d4528:	b507      	push	{r0, r1, r2, lr}
   d452a:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d452c:	2201      	movs	r2, #1
   d452e:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d4532:	3010      	adds	r0, #16
   d4534:	4619      	mov	r1, r3
   d4536:	f000 fb3b 	bl	d4bb0 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d453a:	b003      	add	sp, #12
   d453c:	f85d fb04 	ldr.w	pc, [sp], #4

000d4540 <_ZN6SdFileD0Ev>:
   d4540:	b510      	push	{r4, lr}
   d4542:	212c      	movs	r1, #44	; 0x2c
   d4544:	4604      	mov	r4, r0
   d4546:	f003 f833 	bl	d75b0 <_ZdlPvj>
   d454a:	4620      	mov	r0, r4
   d454c:	bd10      	pop	{r4, pc}

000d454e <_ZN4FileD0Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d454e:	b510      	push	{r4, lr}
   d4550:	2134      	movs	r1, #52	; 0x34
   d4552:	4604      	mov	r4, r0
   d4554:	f003 f82c 	bl	d75b0 <_ZdlPvj>
   d4558:	4620      	mov	r0, r4
   d455a:	bd10      	pop	{r4, pc}

000d455c <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d455c:	b507      	push	{r0, r1, r2, lr}
   d455e:	ab02      	add	r3, sp, #8
   d4560:	2201      	movs	r2, #1
   d4562:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d4566:	3008      	adds	r0, #8
   d4568:	4619      	mov	r1, r3
   d456a:	f000 fb21 	bl	d4bb0 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d456e:	b003      	add	sp, #12
   d4570:	f85d fb04 	ldr.w	pc, [sp], #4

000d4574 <_ZN7FatFile4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
   d4574:	b507      	push	{r0, r1, r2, lr}
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d4576:	2201      	movs	r2, #1
   d4578:	f10d 0107 	add.w	r1, sp, #7
   d457c:	f000 f9d2 	bl	d4924 <_ZN7FatFile4readEPvj>
   d4580:	2801      	cmp	r0, #1
   d4582:	bf0c      	ite	eq
   d4584:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d4588:	f04f 30ff 	movne.w	r0, #4294967295
  }
   d458c:	b003      	add	sp, #12
   d458e:	f85d fb04 	ldr.w	pc, [sp], #4

000d4592 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d4592:	b508      	push	{r3, lr}
    return FatFile::read();
   d4594:	3010      	adds	r0, #16
   d4596:	f7ff ffed 	bl	d4574 <_ZN7FatFile4readEv>
  }
   d459a:	bd08      	pop	{r3, pc}

000d459c <_GLOBAL__sub_I_igh_sd>:
    {
        return 0;
    }

    return 1;
   d459c:	b570      	push	{r4, r5, r6, lr}
   d459e:	f001 fa57 	bl	d5a50 <HAL_Pin_Map>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d45a2:	4b27      	ldr	r3, [pc, #156]	; (d4640 <_GLOBAL__sub_I_igh_sd+0xa4>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d45a4:	4e27      	ldr	r6, [pc, #156]	; (d4644 <_GLOBAL__sub_I_igh_sd+0xa8>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d45a6:	2164      	movs	r1, #100	; 0x64
   d45a8:	f883 1460 	strb.w	r1, [r3, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d45ac:	4926      	ldr	r1, [pc, #152]	; (d4648 <_GLOBAL__sub_I_igh_sd+0xac>)
   d45ae:	f8c3 1470 	str.w	r1, [r3, #1136]	; 0x470
   d45b2:	2101      	movs	r1, #1
   d45b4:	f883 1474 	strb.w	r1, [r3, #1140]	; 0x474
   d45b8:	6831      	ldr	r1, [r6, #0]
   d45ba:	2200      	movs	r2, #0
   d45bc:	f011 0501 	ands.w	r5, r1, #1
   d45c0:	71da      	strb	r2, [r3, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d45c2:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
   d45c6:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
   d45ca:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
   d45ce:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   d45d2:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
   d45d6:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
   d45da:	461c      	mov	r4, r3
   d45dc:	d10a      	bne.n	d45f4 <_GLOBAL__sub_I_igh_sd+0x58>
   d45de:	4630      	mov	r0, r6
   d45e0:	f7ff fd5d 	bl	d409e <__cxa_guard_acquire>
   d45e4:	b130      	cbz	r0, d45f4 <_GLOBAL__sub_I_igh_sd+0x58>
   d45e6:	4629      	mov	r1, r5
   d45e8:	4818      	ldr	r0, [pc, #96]	; (d464c <_GLOBAL__sub_I_igh_sd+0xb0>)
   d45ea:	f001 fd69 	bl	d60c0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d45ee:	4630      	mov	r0, r6
   d45f0:	f7ff fd5a 	bl	d40a8 <__cxa_guard_release>
   d45f4:	4816      	ldr	r0, [pc, #88]	; (d4650 <_GLOBAL__sub_I_igh_sd+0xb4>)
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d45f6:	4b15      	ldr	r3, [pc, #84]	; (d464c <_GLOBAL__sub_I_igh_sd+0xb0>)
   d45f8:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d45fc:	2400      	movs	r4, #0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d45fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4602:	7404      	strb	r4, [r0, #16]
   d4604:	7444      	strb	r4, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4606:	6044      	str	r4, [r0, #4]
   d4608:	6083      	str	r3, [r0, #8]
#include <SPI.h>
#include "SdFat.h"
#include "igh_sd_log.h"

SdFat igh_sd;
File igh_file;
   d460a:	4a12      	ldr	r2, [pc, #72]	; (d4654 <_GLOBAL__sub_I_igh_sd+0xb8>)
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 public:
  File() {}
   d460c:	4b12      	ldr	r3, [pc, #72]	; (d4658 <_GLOBAL__sub_I_igh_sd+0xbc>)
   d460e:	4913      	ldr	r1, [pc, #76]	; (d465c <_GLOBAL__sub_I_igh_sd+0xc0>)
   d4610:	6003      	str	r3, [r0, #0]
   d4612:	f002 ffbf 	bl	d7594 <__aeabi_atexit>
   d4616:	4812      	ldr	r0, [pc, #72]	; (d4660 <_GLOBAL__sub_I_igh_sd+0xc4>)
 public:
  SdFile() {}
   d4618:	4d12      	ldr	r5, [pc, #72]	; (d4664 <_GLOBAL__sub_I_igh_sd+0xc8>)
   d461a:	7204      	strb	r4, [r0, #8]
   d461c:	7244      	strb	r4, [r0, #9]
   d461e:	6044      	str	r4, [r0, #4]
SdFile sd_root;
   d4620:	4a0c      	ldr	r2, [pc, #48]	; (d4654 <_GLOBAL__sub_I_igh_sd+0xb8>)
   d4622:	4911      	ldr	r1, [pc, #68]	; (d4668 <_GLOBAL__sub_I_igh_sd+0xcc>)
   d4624:	6005      	str	r5, [r0, #0]
   d4626:	f002 ffb5 	bl	d7594 <__aeabi_atexit>
   d462a:	4810      	ldr	r0, [pc, #64]	; (d466c <_GLOBAL__sub_I_igh_sd+0xd0>)
SdFile next_file;
   d462c:	4a09      	ldr	r2, [pc, #36]	; (d4654 <_GLOBAL__sub_I_igh_sd+0xb8>)
   d462e:	7204      	strb	r4, [r0, #8]
   d4630:	7244      	strb	r4, [r0, #9]
   d4632:	6044      	str	r4, [r0, #4]
   d4634:	6005      	str	r5, [r0, #0]
   d4636:	490c      	ldr	r1, [pc, #48]	; (d4668 <_GLOBAL__sub_I_igh_sd+0xcc>)
    {
        return 0;
    }

    return 1;
   d4638:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#include "igh_sd_log.h"

SdFat igh_sd;
File igh_file;
SdFile sd_root;
SdFile next_file;
   d463c:	f002 bfaa 	b.w	d7594 <__aeabi_atexit>
   d4640:	2003de0c 	.word	0x2003de0c
   d4644:	2003ddd4 	.word	0x2003ddd4
   d4648:	000d8464 	.word	0x000d8464
   d464c:	2003ddd8 	.word	0x2003ddd8
   d4650:	2003e2bc 	.word	0x2003e2bc
   d4654:	2003dda0 	.word	0x2003dda0
   d4658:	000d8470 	.word	0x000d8470
   d465c:	000d44b7 	.word	0x000d44b7
   d4660:	2003e290 	.word	0x2003e290
   d4664:	000d8498 	.word	0x000d8498
   d4668:	000d44b5 	.word	0x000d44b5
   d466c:	2003dde0 	.word	0x2003dde0

000d4670 <_ZN14CellularSignalD1Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d4670:	4770      	bx	lr

000d4672 <_ZN14CellularSignalD0Ev>:
   d4672:	b510      	push	{r4, lr}
   d4674:	2128      	movs	r1, #40	; 0x28
   d4676:	4604      	mov	r4, r0
   d4678:	f002 ff9a 	bl	d75b0 <_ZdlPvj>
   d467c:	4620      	mov	r0, r4
   d467e:	bd10      	pop	{r4, pc}

000d4680 <_Z19igh_boron_sync_timev>:
float battery_voltage, battery_SOC;
unsigned long unix_time;

/* Functions */
void igh_boron_sync_time(void)
{
   d4680:	b510      	push	{r4, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4682:	f001 faa5 	bl	d5bd0 <HAL_Timer_Get_Milli_Seconds>
    if((millis() - lastSync > ONE_DAY_MILLIS))
   d4686:	4b08      	ldr	r3, [pc, #32]	; (d46a8 <_Z19igh_boron_sync_timev+0x28>)
   d4688:	681a      	ldr	r2, [r3, #0]
   d468a:	1a80      	subs	r0, r0, r2
   d468c:	4a07      	ldr	r2, [pc, #28]	; (d46ac <_Z19igh_boron_sync_timev+0x2c>)
   d468e:	4290      	cmp	r0, r2
   d4690:	461c      	mov	r4, r3
   d4692:	d908      	bls.n	d46a6 <_Z19igh_boron_sync_timev+0x26>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4694:	f001 fc90 	bl	d5fb8 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d4698:	b110      	cbz	r0, d46a0 <_Z19igh_boron_sync_timev+0x20>
            return false;
        }
        return spark_sync_time(NULL);
   d469a:	2000      	movs	r0, #0
   d469c:	f001 fc94 	bl	d5fc8 <spark_sync_time>
   d46a0:	f001 fa96 	bl	d5bd0 <HAL_Timer_Get_Milli_Seconds>
    {
        Particle.syncTime();
        lastSync = millis(); 
   d46a4:	6020      	str	r0, [r4, #0]
   d46a6:	bd10      	pop	{r4, pc}
   d46a8:	2003e318 	.word	0x2003e318
   d46ac:	05265c00 	.word	0x05265c00

000d46b0 <_Z19igh_boron_unix_timev>:
    }
}

unsigned long igh_boron_unix_time(void)
{
    return Time.now();
   d46b0:	f002 b870 	b.w	d6794 <_ZN9TimeClass3nowEv>

000d46b4 <_Z13igh_boron_SoCv>:
}

float igh_boron_SoC(void)
{
    return fuel.getSoC();
   d46b4:	4801      	ldr	r0, [pc, #4]	; (d46bc <_Z13igh_boron_SoCv+0x8>)
   d46b6:	f002 b9ad 	b.w	d6a14 <_ZN9FuelGauge6getSoCEv>
   d46ba:	bf00      	nop
   d46bc:	2003e31c 	.word	0x2003e31c

000d46c0 <_Z17igh_boron_voltagev>:
}

float igh_boron_voltage(void)
{
    return fuel.getVCell();
   d46c0:	4801      	ldr	r0, [pc, #4]	; (d46c8 <_Z17igh_boron_voltagev+0x8>)
   d46c2:	f002 b991 	b.w	d69e8 <_ZN9FuelGauge8getVCellEv>
   d46c6:	bf00      	nop
   d46c8:	2003e31c 	.word	0x2003e31c

000d46cc <_Z26igh_boron_get_celular_datav>:
}

void igh_boron_get_celular_data(void)
{
   d46cc:	b530      	push	{r4, r5, lr}
   d46ce:	b08b      	sub	sp, #44	; 0x2c
    signal = Cellular.RSSI();
   d46d0:	4668      	mov	r0, sp
#include "cellular_enums_hal.h"

/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
   d46d2:	4c09      	ldr	r4, [pc, #36]	; (d46f8 <_Z26igh_boron_get_celular_datav+0x2c>)
   d46d4:	4909      	ldr	r1, [pc, #36]	; (d46fc <_Z26igh_boron_get_celular_datav+0x30>)
   d46d6:	f002 fba7 	bl	d6e28 <_ZN5spark13CellularClass4RSSIEv>
   d46da:	9b02      	ldr	r3, [sp, #8]
   d46dc:	60a3      	str	r3, [r4, #8]
   d46de:	ad04      	add	r5, sp, #16
   d46e0:	9b03      	ldr	r3, [sp, #12]
   d46e2:	60e3      	str	r3, [r4, #12]
   d46e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d46e6:	3410      	adds	r4, #16
   d46e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d46ea:	e895 0003 	ldmia.w	r5, {r0, r1}
   d46ee:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d46f2:	b00b      	add	sp, #44	; 0x2c
   d46f4:	bd30      	pop	{r4, r5, pc}
   d46f6:	bf00      	nop
   d46f8:	2003e2f0 	.word	0x2003e2f0
   d46fc:	2003e3ec 	.word	0x2003e3ec

000d4700 <_Z12igh_boron_ssv>:
    return signal.getQuality();
}

float igh_boron_ss(void)
{
    return signal.getQuality();
   d4700:	4801      	ldr	r0, [pc, #4]	; (d4708 <_Z12igh_boron_ssv+0x8>)
   d4702:	f002 b89f 	b.w	d6844 <_ZNK14CellularSignal10getQualityEv>
   d4706:	bf00      	nop
   d4708:	2003e2f0 	.word	0x2003e2f0

000d470c <_Z12igh_boron_sqv>:
   d470c:	f7ff bff8 	b.w	d4700 <_Z12igh_boron_ssv>

000d4710 <_Z30igh_boron_connecetd_to_networkv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4710:	4b02      	ldr	r3, [pc, #8]	; (d471c <_Z30igh_boron_connecetd_to_networkv+0xc>)
   d4712:	2200      	movs	r2, #0
   d4714:	4611      	mov	r1, r2
   d4716:	6858      	ldr	r0, [r3, #4]
   d4718:	f001 bc0e 	b.w	d5f38 <network_ready>
   d471c:	2003e3ec 	.word	0x2003e3ec

000d4720 <_Z28igh_boron_connected_to_cloudv>:
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4720:	f001 bc4a 	b.w	d5fb8 <spark_cloud_flag_connected>

000d4724 <_Z15igh_boron_setupv>:
{
    return Particle.connected();;
}

void igh_boron_setup(void)
{
   d4724:	b508      	push	{r3, lr}
   d4726:	f001 fa53 	bl	d5bd0 <HAL_Timer_Get_Milli_Seconds>
    lastSync = millis();
   d472a:	4b01      	ldr	r3, [pc, #4]	; (d4730 <_Z15igh_boron_setupv+0xc>)
   d472c:	6018      	str	r0, [r3, #0]
   d472e:	bd08      	pop	{r3, pc}
   d4730:	2003e318 	.word	0x2003e318

000d4734 <_Z17igh_boron_servicev>:
}

void igh_boron_service(void)
{
   d4734:	b508      	push	{r3, lr}
    igh_boron_sync_time();
   d4736:	f7ff ffa3 	bl	d4680 <_Z19igh_boron_sync_timev>
    igh_boron_get_celular_data();
}
   d473a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void igh_boron_service(void)
{
    igh_boron_sync_time();
    igh_boron_get_celular_data();
   d473e:	f7ff bfc5 	b.w	d46cc <_Z26igh_boron_get_celular_datav>
	...

000d4744 <_GLOBAL__sub_I_lastSync>:
}

String igh_boron_test_id(void)
{
    return System.deviceID();
}
   d4744:	b570      	push	{r4, r5, r6, lr}
   d4746:	f001 f983 	bl	d5a50 <HAL_Pin_Map>
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d474a:	4c10      	ldr	r4, [pc, #64]	; (d478c <_GLOBAL__sub_I_lastSync+0x48>)
   d474c:	4b10      	ldr	r3, [pc, #64]	; (d4790 <_GLOBAL__sub_I_lastSync+0x4c>)
   d474e:	6023      	str	r3, [r4, #0]
   d4750:	2500      	movs	r5, #0
   d4752:	3328      	adds	r3, #40	; 0x28
   d4754:	4629      	mov	r1, r5
#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)

unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
   d4756:	4e0f      	ldr	r6, [pc, #60]	; (d4794 <_GLOBAL__sub_I_lastSync+0x50>)
   d4758:	6063      	str	r3, [r4, #4]
   d475a:	2218      	movs	r2, #24
   d475c:	f104 0010 	add.w	r0, r4, #16
   d4760:	60a5      	str	r5, [r4, #8]
   d4762:	60e5      	str	r5, [r4, #12]
   d4764:	f003 fd99 	bl	d829a <memset>
   d4768:	4620      	mov	r0, r4
float signal_quality, signal_strength;
FuelGauge fuel;
   d476a:	4c0b      	ldr	r4, [pc, #44]	; (d4798 <_GLOBAL__sub_I_lastSync+0x54>)
#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)

unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
   d476c:	490b      	ldr	r1, [pc, #44]	; (d479c <_GLOBAL__sub_I_lastSync+0x58>)
   d476e:	4632      	mov	r2, r6
   d4770:	f002 ff10 	bl	d7594 <__aeabi_atexit>
float signal_quality, signal_strength;
FuelGauge fuel;
   d4774:	4629      	mov	r1, r5
   d4776:	4620      	mov	r0, r4
   d4778:	f002 f8f6 	bl	d6968 <_ZN9FuelGaugeC1Eb>
   d477c:	4632      	mov	r2, r6
   d477e:	4620      	mov	r0, r4
   d4780:	4907      	ldr	r1, [pc, #28]	; (d47a0 <_GLOBAL__sub_I_lastSync+0x5c>)
}

String igh_boron_test_id(void)
{
    return System.deviceID();
}
   d4782:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
float signal_quality, signal_strength;
FuelGauge fuel;
   d4786:	f002 bf05 	b.w	d7594 <__aeabi_atexit>
   d478a:	bf00      	nop
   d478c:	2003e2f0 	.word	0x2003e2f0
   d4790:	000d8690 	.word	0x000d8690
   d4794:	2003dda0 	.word	0x2003dda0
   d4798:	2003e31c 	.word	0x2003e31c
   d479c:	000d4671 	.word	0x000d4671
   d47a0:	000d6987 	.word	0x000d6987

000d47a4 <_Z21igh_rfm69_set_bitratehh>:
    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
} 

void igh_rfm69_set_bitrate(uint8_t msb, uint8_t lsb)
{
   d47a4:	b538      	push	{r3, r4, r5, lr}
    igh_radio.writeReg(REG_BITRATEMSB, msb); 
   d47a6:	4c07      	ldr	r4, [pc, #28]	; (d47c4 <_Z21igh_rfm69_set_bitratehh+0x20>)
    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
} 

void igh_rfm69_set_bitrate(uint8_t msb, uint8_t lsb)
{
   d47a8:	460d      	mov	r5, r1
    igh_radio.writeReg(REG_BITRATEMSB, msb); 
   d47aa:	4602      	mov	r2, r0
   d47ac:	2103      	movs	r1, #3
   d47ae:	4620      	mov	r0, r4
   d47b0:	f000 fe54 	bl	d545c <_ZN5RFM698writeRegEhh>
    igh_radio.writeReg(REG_BITRATELSB, lsb);
   d47b4:	462a      	mov	r2, r5
   d47b6:	4620      	mov	r0, r4
   d47b8:	2104      	movs	r1, #4
}
   d47ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
} 

void igh_rfm69_set_bitrate(uint8_t msb, uint8_t lsb)
{
    igh_radio.writeReg(REG_BITRATEMSB, msb); 
    igh_radio.writeReg(REG_BITRATELSB, lsb);
   d47be:	f000 be4d 	b.w	d545c <_ZN5RFM698writeRegEhh>
   d47c2:	bf00      	nop
   d47c4:	2003e324 	.word	0x2003e324

000d47c8 <_Z25igh_rfm69_set_power_levelh>:
}

void igh_rfm69_set_power_level(uint8_t pwrlvl)
{
    igh_radio.setPowerLevel(pwrlvl);
   d47c8:	4601      	mov	r1, r0
   d47ca:	4801      	ldr	r0, [pc, #4]	; (d47d0 <_Z25igh_rfm69_set_power_levelh+0x8>)
   d47cc:	f000 be58 	b.w	d5480 <_ZN5RFM6913setPowerLevelEh>
   d47d0:	2003e324 	.word	0x2003e324

000d47d4 <_Z15igh_rfm69_resetv>:
}

void igh_rfm69_reset(void)
{
   d47d4:	b508      	push	{r3, lr}
    digitalWrite(RFM69_RST, HIGH);
   d47d6:	2101      	movs	r1, #1
   d47d8:	2006      	movs	r0, #6
   d47da:	f002 fe2e 	bl	d743a <digitalWrite>
    delay(100);
   d47de:	2064      	movs	r0, #100	; 0x64
   d47e0:	f001 ffea 	bl	d67b8 <delay>
    digitalWrite(RFM69_RST, LOW);
   d47e4:	2006      	movs	r0, #6
   d47e6:	2100      	movs	r1, #0
   d47e8:	f002 fe27 	bl	d743a <digitalWrite>
    delay(100);
   d47ec:	2064      	movs	r0, #100	; 0x64
}
   d47ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void igh_rfm69_reset(void)
{
    digitalWrite(RFM69_RST, HIGH);
    delay(100);
    digitalWrite(RFM69_RST, LOW);
    delay(100);
   d47f2:	f001 bfe1 	b.w	d67b8 <delay>
	...

000d47f8 <_Z15igh_rfm69_setupv>:
uint8_t rfm69_powerlevel  = 10; // default power level, about 100M line of site

RFM69 igh_radio = RFM69(RFM69_CS, RFM69_IRQ, IS_RFM69HCW, RFM69_IRQN);

void igh_rfm69_setup(void)
{
   d47f8:	b510      	push	{r4, lr}
    // first reset the module
    pinMode(RFM69_RST, OUTPUT);
   d47fa:	2101      	movs	r1, #1
   d47fc:	2006      	movs	r0, #6
   d47fe:	f002 fe0b 	bl	d7418 <pinMode>

    igh_rfm69_reset();
    
    igh_radio.initialize(FREQUENCY,NODEID,NETWORKID);
   d4802:	4c0e      	ldr	r4, [pc, #56]	; (d483c <_Z15igh_rfm69_setupv+0x44>)
void igh_rfm69_setup(void)
{
    // first reset the module
    pinMode(RFM69_RST, OUTPUT);

    igh_rfm69_reset();
   d4804:	f7ff ffe6 	bl	d47d4 <_Z15igh_rfm69_resetv>
    
    igh_radio.initialize(FREQUENCY,NODEID,NETWORKID);
   d4808:	4b0d      	ldr	r3, [pc, #52]	; (d4840 <_Z15igh_rfm69_setupv+0x48>)
   d480a:	4a0e      	ldr	r2, [pc, #56]	; (d4844 <_Z15igh_rfm69_setupv+0x4c>)
   d480c:	781b      	ldrb	r3, [r3, #0]
   d480e:	7812      	ldrb	r2, [r2, #0]
   d4810:	215b      	movs	r1, #91	; 0x5b
   d4812:	4620      	mov	r0, r4
   d4814:	f000 fff8 	bl	d5808 <_ZN5RFM6910initializeEhhh>

    igh_radio.setHighPower(); // This should only be called for RFM69HCW & HW
   d4818:	4620      	mov	r0, r4
   d481a:	2101      	movs	r1, #1
   d481c:	f000 ff1a 	bl	d5654 <_ZN5RFM6912setHighPowerEb>

    igh_rfm69_set_bitrate(RF_BITRATEMSB_9600, RF_BITRATELSB_9600); // set to 9.6Kbps
   d4820:	2105      	movs	r1, #5
   d4822:	200d      	movs	r0, #13
   d4824:	f7ff ffbe 	bl	d47a4 <_Z21igh_rfm69_set_bitratehh>

    igh_rfm69_set_power_level(rfm69_powerlevel);
   d4828:	4b07      	ldr	r3, [pc, #28]	; (d4848 <_Z15igh_rfm69_setupv+0x50>)
   d482a:	7818      	ldrb	r0, [r3, #0]
   d482c:	f7ff ffcc 	bl	d47c8 <_Z25igh_rfm69_set_power_levelh>

    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
   d4830:	4620      	mov	r0, r4
   d4832:	4906      	ldr	r1, [pc, #24]	; (d484c <_Z15igh_rfm69_setupv+0x54>)
} 
   d4834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    igh_rfm69_set_bitrate(RF_BITRATEMSB_9600, RF_BITRATELSB_9600); // set to 9.6Kbps

    igh_rfm69_set_power_level(rfm69_powerlevel);

    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
   d4838:	f000 bfba 	b.w	d57b0 <_ZN5RFM697encryptEPKc>
   d483c:	2003e324 	.word	0x2003e324
   d4840:	2003dd32 	.word	0x2003dd32
   d4844:	2003dd34 	.word	0x2003dd34
   d4848:	2003dd30 	.word	0x2003dd30
   d484c:	000d8504 	.word	0x000d8504

000d4850 <_Z27igh_rfm69_receive_raw_bytesPhh>:
    }
    
}

uint8_t igh_rfm69_receive_raw_bytes( uint8_t *buffer, uint8_t len )
{
   d4850:	b570      	push	{r4, r5, r6, lr}
   d4852:	4605      	mov	r5, r0
    uint8_t rx_len = 0;
    if ( igh_radio.receiveDone() )
   d4854:	4809      	ldr	r0, [pc, #36]	; (d487c <_Z27igh_rfm69_receive_raw_bytesPhh+0x2c>)
    }
    
}

uint8_t igh_rfm69_receive_raw_bytes( uint8_t *buffer, uint8_t len )
{
   d4856:	460e      	mov	r6, r1
    uint8_t rx_len = 0;
    if ( igh_radio.receiveDone() )
   d4858:	f000 fedc 	bl	d5614 <_ZN5RFM6911receiveDoneEv>
   d485c:	b160      	cbz	r0, d4878 <_Z27igh_rfm69_receive_raw_bytesPhh+0x28>
        // {
        //     Serial.print(igh_radio.DATA[i], HEX);
        // }
        // Serial.print("\n");

        if( igh_radio.DATALEN <= len )
   d485e:	4c08      	ldr	r4, [pc, #32]	; (d4880 <_Z27igh_rfm69_receive_raw_bytesPhh+0x30>)
   d4860:	7823      	ldrb	r3, [r4, #0]
   d4862:	42b3      	cmp	r3, r6
   d4864:	d807      	bhi.n	d4876 <_Z27igh_rfm69_receive_raw_bytesPhh+0x26>
        {
            memcpy( buffer, (uint8_t *)igh_radio.DATA, igh_radio.DATALEN);
   d4866:	7822      	ldrb	r2, [r4, #0]
   d4868:	4906      	ldr	r1, [pc, #24]	; (d4884 <_Z27igh_rfm69_receive_raw_bytesPhh+0x34>)
   d486a:	4628      	mov	r0, r5
   d486c:	f003 fd0a 	bl	d8284 <memcpy>
            rx_len = igh_radio.DATALEN;
   d4870:	7820      	ldrb	r0, [r4, #0]
   d4872:	b2c0      	uxtb	r0, r0
   d4874:	bd70      	pop	{r4, r5, r6, pc}
    
}

uint8_t igh_rfm69_receive_raw_bytes( uint8_t *buffer, uint8_t len )
{
    uint8_t rx_len = 0;
   d4876:	2000      	movs	r0, #0
            memcpy( buffer, (uint8_t *)igh_radio.DATA, igh_radio.DATALEN);
            rx_len = igh_radio.DATALEN;
        }
    }
    return rx_len;
   d4878:	bd70      	pop	{r4, r5, r6, pc}
   d487a:	bf00      	nop
   d487c:	2003e324 	.word	0x2003e324
   d4880:	2003e397 	.word	0x2003e397
   d4884:	2003e35a 	.word	0x2003e35a

000d4888 <_GLOBAL__sub_I_NETWORKID>:
   d4888:	b508      	push	{r3, lr}
   d488a:	f001 f8e1 	bl	d5a50 <HAL_Pin_Map>
    static volatile byte ACK_REQUESTED;
    static volatile byte ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
    static volatile int RSSI; //most accurate RSSI during reception (closest to the reception)
    static volatile byte _mode; //should be protected?

    RFM69(byte slaveSelectPin=RF69_SPI_CS, byte interruptPin=RF69_IRQ_PIN, bool isRFM69HW=false, byte interruptNum=RF69_IRQ_NUM) {
   d488e:	4b08      	ldr	r3, [pc, #32]	; (d48b0 <_GLOBAL__sub_I_NETWORKID+0x28>)
   d4890:	4a08      	ldr	r2, [pc, #32]	; (d48b4 <_GLOBAL__sub_I_NETWORKID+0x2c>)
   d4892:	601a      	str	r2, [r3, #0]
      _slaveSelectPin = slaveSelectPin;
   d4894:	2211      	movs	r2, #17
      _interruptPin = interruptPin;
      _interruptNum = interruptNum;
      _mode = RF69_MODE_STANDBY;
   d4896:	4908      	ldr	r1, [pc, #32]	; (d48b8 <_GLOBAL__sub_I_NETWORKID+0x30>)
    static volatile byte ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
    static volatile int RSSI; //most accurate RSSI during reception (closest to the reception)
    static volatile byte _mode; //should be protected?

    RFM69(byte slaveSelectPin=RF69_SPI_CS, byte interruptPin=RF69_IRQ_PIN, bool isRFM69HW=false, byte interruptNum=RF69_IRQ_NUM) {
      _slaveSelectPin = slaveSelectPin;
   d4898:	711a      	strb	r2, [r3, #4]
      _interruptPin = interruptPin;
   d489a:	2208      	movs	r2, #8
   d489c:	715a      	strb	r2, [r3, #5]
      _interruptNum = interruptNum;
   d489e:	719a      	strb	r2, [r3, #6]
      _mode = RF69_MODE_STANDBY;
   d48a0:	2201      	movs	r2, #1
   d48a2:	700a      	strb	r2, [r1, #0]
      _promiscuousMode = false;
   d48a4:	2100      	movs	r1, #0
   d48a6:	7219      	strb	r1, [r3, #8]
      _powerLevel = 31;
   d48a8:	211f      	movs	r1, #31
   d48aa:	7259      	strb	r1, [r3, #9]
      _isRFM69HW = isRFM69HW;
   d48ac:	729a      	strb	r2, [r3, #10]
   d48ae:	bd08      	pop	{r3, pc}
   d48b0:	2003e324 	.word	0x2003e324
   d48b4:	000d8530 	.word	0x000d8530
   d48b8:	2003e398 	.word	0x2003e398

000d48bc <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
   d48bc:	f001 b8c8 	b.w	d5a50 <HAL_Pin_Map>

000d48c0 <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d48c0:	f001 b8c6 	b.w	d5a50 <HAL_Pin_Map>

000d48c4 <_GLOBAL__sub_I__ZN7istream3getEv>:
   d48c4:	f001 b8c4 	b.w	d5a50 <HAL_Pin_Map>

000d48c8 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d48c8:	b510      	push	{r4, lr}
   d48ca:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d48cc:	3024      	adds	r0, #36	; 0x24
   d48ce:	f000 fa51 	bl	d4d74 <_ZN8FatCache4syncEv>
   d48d2:	b128      	cbz	r0, d48e0 <_ZN9FatVolume9cacheSyncEv+0x18>
   d48d4:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d48d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d48dc:	f000 ba4a 	b.w	d4d74 <_ZN8FatCache4syncEv>
  }
   d48e0:	bd10      	pop	{r4, pc}

000d48e2 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d48e2:	f001 b8b5 	b.w	d5a50 <HAL_Pin_Map>

000d48e6 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d48e6:	f001 b8b3 	b.w	d5a50 <HAL_Pin_Map>

000d48ea <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d48ea:	f001 b8b1 	b.w	d5a50 <HAL_Pin_Map>

000d48ee <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d48ee:	f001 b8af 	b.w	d5a50 <HAL_Pin_Map>

000d48f2 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d48f2:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d48f4:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d48f6:	f043 0304 	orr.w	r3, r3, #4
   d48fa:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d48fc:	f100 0210 	add.w	r2, r0, #16
   d4900:	6880      	ldr	r0, [r0, #8]
   d4902:	f000 baed 	b.w	d4ee0 <_ZN9FatVolume15allocateClusterEmPm>

000d4906 <_ZN7FatFile13cacheDirEntryEh>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d4906:	b510      	push	{r4, lr}
   d4908:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d490a:	6880      	ldr	r0, [r0, #8]
   d490c:	460a      	mov	r2, r1
   d490e:	3024      	adds	r0, #36	; 0x24
   d4910:	69a1      	ldr	r1, [r4, #24]
   d4912:	f000 fa56 	bl	d4dc2 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d4916:	b120      	cbz	r0, d4922 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d4918:	88a3      	ldrh	r3, [r4, #4]
   d491a:	f003 030f 	and.w	r3, r3, #15
   d491e:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d4922:	bd10      	pop	{r4, pc}

000d4924 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d4924:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4928:	7803      	ldrb	r3, [r0, #0]
   d492a:	4604      	mov	r4, r0
   d492c:	4689      	mov	r9, r1
   d492e:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d4930:	b14b      	cbz	r3, d4946 <_ZN7FatFile4readEPvj+0x22>
   d4932:	7882      	ldrb	r2, [r0, #2]
   d4934:	07d1      	lsls	r1, r2, #31
   d4936:	d506      	bpl.n	d4946 <_ZN7FatFile4readEPvj+0x22>
   d4938:	e00c      	b.n	d4954 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d493a:	465a      	mov	r2, fp
   d493c:	6921      	ldr	r1, [r4, #16]
   d493e:	f000 fa6a 	bl	d4e16 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d4942:	2800      	cmp	r0, #0
   d4944:	da3d      	bge.n	d49c2 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d4946:	7863      	ldrb	r3, [r4, #1]
   d4948:	f043 0302 	orr.w	r3, r3, #2
   d494c:	7063      	strb	r3, [r4, #1]
  return -1;
   d494e:	f04f 30ff 	mov.w	r0, #4294967295
   d4952:	e097      	b.n	d4a84 <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d4954:	071a      	lsls	r2, r3, #28
   d4956:	d503      	bpl.n	d4960 <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d4958:	69e3      	ldr	r3, [r4, #28]
   d495a:	6962      	ldr	r2, [r4, #20]
   d495c:	1a9b      	subs	r3, r3, r2
   d495e:	e007      	b.n	d4970 <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d4960:	069a      	lsls	r2, r3, #26
   d4962:	d508      	bpl.n	d4976 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d4964:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d4966:	891a      	ldrh	r2, [r3, #8]
   d4968:	6963      	ldr	r3, [r4, #20]
   d496a:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d496e:	b29b      	uxth	r3, r3
   d4970:	429d      	cmp	r5, r3
   d4972:	bf28      	it	cs
   d4974:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d4976:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d4978:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d497c:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d4980:	2e00      	cmp	r6, #0
   d4982:	d035      	beq.n	d49f0 <_ZN7FatFile4readEPvj+0xcc>
   d4984:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d4986:	6963      	ldr	r3, [r4, #20]
   d4988:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d498a:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d498e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d4992:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d4996:	d002      	beq.n	d499e <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d4998:	6a03      	ldr	r3, [r0, #32]
   d499a:	4419      	add	r1, r3
   d499c:	e01d      	b.n	d49da <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d499e:	f890 8005 	ldrb.w	r8, [r0, #5]
   d49a2:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d49a6:	f1ba 0f00 	cmp.w	sl, #0
   d49aa:	d110      	bne.n	d49ce <_ZN7FatFile4readEPvj+0xaa>
   d49ac:	f1b8 0f00 	cmp.w	r8, #0
   d49b0:	d10d      	bne.n	d49ce <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d49b2:	2b00      	cmp	r3, #0
   d49b4:	d1c1      	bne.n	d493a <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d49b6:	0653      	lsls	r3, r2, #25
   d49b8:	bf4c      	ite	mi
   d49ba:	6a03      	ldrmi	r3, [r0, #32]
   d49bc:	6a23      	ldrpl	r3, [r4, #32]
   d49be:	6123      	str	r3, [r4, #16]
   d49c0:	e005      	b.n	d49ce <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d49c2:	d104      	bne.n	d49ce <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d49c4:	7823      	ldrb	r3, [r4, #0]
   d49c6:	f013 0f70 	tst.w	r3, #112	; 0x70
   d49ca:	d111      	bne.n	d49f0 <_ZN7FatFile4readEPvj+0xcc>
   d49cc:	e7bb      	b.n	d4946 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d49ce:	6921      	ldr	r1, [r4, #16]
   d49d0:	68a0      	ldr	r0, [r4, #8]
   d49d2:	f000 fa1a 	bl	d4e0a <_ZNK9FatVolume17clusterFirstBlockEm>
   d49d6:	eb08 0100 	add.w	r1, r8, r0
   d49da:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d49dc:	f1ba 0f00 	cmp.w	sl, #0
   d49e0:	d135      	bne.n	d4a4e <_ZN7FatFile4readEPvj+0x12a>
   d49e2:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d49e6:	d332      	bcc.n	d4a4e <_ZN7FatFile4readEPvj+0x12a>
   d49e8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d49ea:	4299      	cmp	r1, r3
   d49ec:	d102      	bne.n	d49f4 <_ZN7FatFile4readEPvj+0xd0>
   d49ee:	e02e      	b.n	d4a4e <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d49f0:	1ba8      	subs	r0, r5, r6
   d49f2:	e047      	b.n	d4a84 <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d49f4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d49f8:	d31b      	bcc.n	d4a32 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d49fa:	7822      	ldrb	r2, [r4, #0]
   d49fc:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d49fe:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d4a02:	d406      	bmi.n	d4a12 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d4a04:	7902      	ldrb	r2, [r0, #4]
   d4a06:	ebc8 0202 	rsb	r2, r8, r2
   d4a0a:	b2d2      	uxtb	r2, r2
   d4a0c:	4592      	cmp	sl, r2
   d4a0e:	bf28      	it	cs
   d4a10:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4a12:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d4a14:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4a18:	d207      	bcs.n	d4a2a <_ZN7FatFile4readEPvj+0x106>
   d4a1a:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d4a1c:	4653      	mov	r3, sl
   d4a1e:	464a      	mov	r2, r9
   d4a20:	6800      	ldr	r0, [r0, #0]
   d4a22:	f000 fba8 	bl	d5176 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d4a26:	b960      	cbnz	r0, d4a42 <_ZN7FatFile4readEPvj+0x11e>
   d4a28:	e78d      	b.n	d4946 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4a2a:	4453      	add	r3, sl
   d4a2c:	4299      	cmp	r1, r3
   d4a2e:	d321      	bcc.n	d4a74 <_ZN7FatFile4readEPvj+0x150>
   d4a30:	e7f3      	b.n	d4a1a <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d4a32:	464a      	mov	r2, r9
   d4a34:	6800      	ldr	r0, [r0, #0]
   d4a36:	f000 fb56 	bl	d50e6 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d4a3a:	2800      	cmp	r0, #0
   d4a3c:	d083      	beq.n	d4946 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d4a3e:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d4a42:	6963      	ldr	r3, [r4, #20]
   d4a44:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d4a46:	44b9      	add	r9, r7
    m_curPosition += n;
   d4a48:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d4a4a:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d4a4c:	e798      	b.n	d4980 <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d4a4e:	2200      	movs	r2, #0
   d4a50:	3024      	adds	r0, #36	; 0x24
   d4a52:	f000 f9b6 	bl	d4dc2 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d4a56:	2800      	cmp	r0, #0
   d4a58:	f43f af75 	beq.w	d4946 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d4a5c:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d4a60:	42b7      	cmp	r7, r6
   d4a62:	bf28      	it	cs
   d4a64:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d4a66:	eb00 010a 	add.w	r1, r0, sl
   d4a6a:	463a      	mov	r2, r7
   d4a6c:	4648      	mov	r0, r9
   d4a6e:	f003 fc09 	bl	d8284 <memcpy>
   d4a72:	e7e6      	b.n	d4a42 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d4a74:	3024      	adds	r0, #36	; 0x24
   d4a76:	9101      	str	r1, [sp, #4]
   d4a78:	f000 f97c 	bl	d4d74 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d4a7c:	9901      	ldr	r1, [sp, #4]
   d4a7e:	2800      	cmp	r0, #0
   d4a80:	d1cb      	bne.n	d4a1a <_ZN7FatFile4readEPvj+0xf6>
   d4a82:	e760      	b.n	d4946 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d4a84:	b003      	add	sp, #12
   d4a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4a8a <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d4a8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d4a8c:	2201      	movs	r2, #1
   d4a8e:	f10d 0107 	add.w	r1, sp, #7
   d4a92:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d4a94:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d4a96:	6905      	ldr	r5, [r0, #16]
   d4a98:	f7ff ff44 	bl	d4924 <_ZN7FatFile4readEPvj>
   d4a9c:	2801      	cmp	r0, #1
   d4a9e:	bf05      	ittet	eq
   d4aa0:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d4aa4:	6166      	streq	r6, [r4, #20]
   d4aa6:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = pos->cluster;
   d4aaa:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d4aac:	b002      	add	sp, #8
   d4aae:	bd70      	pop	{r4, r5, r6, pc}

000d4ab0 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d4ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4ab4:	460e      	mov	r6, r1
   d4ab6:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d4ab8:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d4aba:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d4abc:	2900      	cmp	r1, #0
   d4abe:	d039      	beq.n	d4b34 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d4ac0:	6945      	ldr	r5, [r0, #20]
   d4ac2:	42b5      	cmp	r5, r6
   d4ac4:	d03a      	beq.n	d4b3c <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d4ac6:	b90e      	cbnz	r6, d4acc <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d4ac8:	6106      	str	r6, [r0, #16]
    goto done;
   d4aca:	e031      	b.n	d4b30 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d4acc:	070b      	lsls	r3, r1, #28
   d4ace:	d503      	bpl.n	d4ad8 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d4ad0:	69c3      	ldr	r3, [r0, #28]
   d4ad2:	429e      	cmp	r6, r3
   d4ad4:	d82e      	bhi.n	d4b34 <_ZN7FatFile7seekSetEm+0x84>
   d4ad6:	e007      	b.n	d4ae8 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d4ad8:	0688      	lsls	r0, r1, #26
   d4ada:	d505      	bpl.n	d4ae8 <_ZN7FatFile7seekSetEm+0x38>
   d4adc:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d4ade:	891b      	ldrh	r3, [r3, #8]
   d4ae0:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d4ae4:	d826      	bhi.n	d4b34 <_ZN7FatFile7seekSetEm+0x84>
   d4ae6:	e023      	b.n	d4b30 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d4ae8:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d4aec:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d4af0:	1e6a      	subs	r2, r5, #1
   d4af2:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d4af6:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d4af8:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d4afa:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d4afc:	429a      	cmp	r2, r3
   d4afe:	d800      	bhi.n	d4b02 <_ZN7FatFile7seekSetEm+0x52>
   d4b00:	b94d      	cbnz	r5, d4b16 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d4b02:	064a      	lsls	r2, r1, #25
   d4b04:	bf4c      	ite	mi
   d4b06:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d4b0a:	6a22      	ldrpl	r2, [r4, #32]
   d4b0c:	6122      	str	r2, [r4, #16]
   d4b0e:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d4b10:	f104 0810 	add.w	r8, r4, #16
   d4b14:	e00a      	b.n	d4b2c <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d4b16:	1a9b      	subs	r3, r3, r2
   d4b18:	e7f9      	b.n	d4b0e <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d4b1a:	4642      	mov	r2, r8
   d4b1c:	6921      	ldr	r1, [r4, #16]
   d4b1e:	68a0      	ldr	r0, [r4, #8]
   d4b20:	f000 f979 	bl	d4e16 <_ZN9FatVolume6fatGetEmPm>
   d4b24:	2800      	cmp	r0, #0
   d4b26:	f105 35ff 	add.w	r5, r5, #4294967295
   d4b2a:	dd03      	ble.n	d4b34 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d4b2c:	2d00      	cmp	r5, #0
   d4b2e:	d1f4      	bne.n	d4b1a <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d4b30:	6166      	str	r6, [r4, #20]
   d4b32:	e003      	b.n	d4b3c <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d4b34:	6127      	str	r7, [r4, #16]
  return false;
   d4b36:	2000      	movs	r0, #0
   d4b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d4b3c:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d4b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4b44 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d4b44:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d4b46:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d4b48:	4604      	mov	r4, r0
  if (!isOpen()) {
   d4b4a:	b90b      	cbnz	r3, d4b50 <_ZN7FatFile4syncEv+0xc>
    return true;
   d4b4c:	2001      	movs	r0, #1
   d4b4e:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d4b50:	7883      	ldrb	r3, [r0, #2]
   d4b52:	075a      	lsls	r2, r3, #29
   d4b54:	d523      	bpl.n	d4b9e <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d4b56:	2101      	movs	r1, #1
   d4b58:	f7ff fed5 	bl	d4906 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d4b5c:	4605      	mov	r5, r0
   d4b5e:	b928      	cbnz	r0, d4b6c <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d4b60:	7863      	ldrb	r3, [r4, #1]
   d4b62:	f043 0301 	orr.w	r3, r3, #1
   d4b66:	7063      	strb	r3, [r4, #1]
  return false;
   d4b68:	2000      	movs	r0, #0
   d4b6a:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d4b6c:	7803      	ldrb	r3, [r0, #0]
   d4b6e:	2be5      	cmp	r3, #229	; 0xe5
   d4b70:	d0f6      	beq.n	d4b60 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d4b72:	7823      	ldrb	r3, [r4, #0]
   d4b74:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d4b76:	bf44      	itt	mi
   d4b78:	69e3      	ldrmi	r3, [r4, #28]
   d4b7a:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d4b7c:	8c23      	ldrh	r3, [r4, #32]
   d4b7e:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d4b80:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d4b82:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d4b84:	4b09      	ldr	r3, [pc, #36]	; (d4bac <_ZN7FatFile4syncEv+0x68>)
   d4b86:	681b      	ldr	r3, [r3, #0]
   d4b88:	b12b      	cbz	r3, d4b96 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d4b8a:	f100 0116 	add.w	r1, r0, #22
   d4b8e:	3018      	adds	r0, #24
   d4b90:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d4b92:	8b2b      	ldrh	r3, [r5, #24]
   d4b94:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d4b96:	78a3      	ldrb	r3, [r4, #2]
   d4b98:	f023 0304 	bic.w	r3, r3, #4
   d4b9c:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d4b9e:	68a0      	ldr	r0, [r4, #8]
   d4ba0:	f7ff fe92 	bl	d48c8 <_ZN9FatVolume9cacheSyncEv>
   d4ba4:	2800      	cmp	r0, #0
   d4ba6:	d0db      	beq.n	d4b60 <_ZN7FatFile4syncEv+0x1c>
   d4ba8:	e7d0      	b.n	d4b4c <_ZN7FatFile4syncEv+0x8>
   d4baa:	bf00      	nop
   d4bac:	2003e334 	.word	0x2003e334

000d4bb0 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d4bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d4bb4:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d4bb6:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d4bb8:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d4bba:	4604      	mov	r4, r0
   d4bbc:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d4bbe:	d508      	bpl.n	d4bd2 <_ZN7FatFile5writeEPKvj+0x22>
   d4bc0:	7883      	ldrb	r3, [r0, #2]
   d4bc2:	079a      	lsls	r2, r3, #30
   d4bc4:	d505      	bpl.n	d4bd2 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d4bc6:	071b      	lsls	r3, r3, #28
   d4bc8:	d50b      	bpl.n	d4be2 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d4bca:	69e1      	ldr	r1, [r4, #28]
   d4bcc:	f7ff ff70 	bl	d4ab0 <_ZN7FatFile7seekSetEm>
   d4bd0:	b938      	cbnz	r0, d4be2 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d4bd2:	7863      	ldrb	r3, [r4, #1]
   d4bd4:	f043 0301 	orr.w	r3, r3, #1
   d4bd8:	7063      	strb	r3, [r4, #1]
  return -1;
   d4bda:	f04f 30ff 	mov.w	r0, #4294967295
   d4bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d4be2:	6963      	ldr	r3, [r4, #20]
   d4be4:	43db      	mvns	r3, r3
   d4be6:	4598      	cmp	r8, r3
   d4be8:	d8f3      	bhi.n	d4bd2 <_ZN7FatFile5writeEPKvj+0x22>
   d4bea:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d4bec:	f04f 0a00 	mov.w	sl, #0
   d4bf0:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d4bf2:	2e00      	cmp	r6, #0
   d4bf4:	f000 8081 	beq.w	d4cfa <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d4bf8:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d4bfa:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d4bfc:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d4c00:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d4c04:	d11c      	bne.n	d4c40 <_ZN7FatFile5writeEPKvj+0x90>
   d4c06:	b9df      	cbnz	r7, d4c40 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d4c08:	6921      	ldr	r1, [r4, #16]
   d4c0a:	b171      	cbz	r1, d4c2a <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d4c0c:	f104 0210 	add.w	r2, r4, #16
   d4c10:	f000 f901 	bl	d4e16 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d4c14:	2800      	cmp	r0, #0
   d4c16:	dbdc      	blt.n	d4bd2 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d4c18:	f040 808e 	bne.w	d4d38 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d4c1c:	4620      	mov	r0, r4
   d4c1e:	f7ff fe68 	bl	d48f2 <_ZN7FatFile10addClusterEv>
   d4c22:	2800      	cmp	r0, #0
   d4c24:	f040 8088 	bne.w	d4d38 <_ZN7FatFile5writeEPKvj+0x188>
   d4c28:	e7d3      	b.n	d4bd2 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d4c2a:	6a23      	ldr	r3, [r4, #32]
   d4c2c:	b93b      	cbnz	r3, d4c3e <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d4c2e:	4620      	mov	r0, r4
   d4c30:	f7ff fe5f 	bl	d48f2 <_ZN7FatFile10addClusterEv>
   d4c34:	2800      	cmp	r0, #0
   d4c36:	d0cc      	beq.n	d4bd2 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d4c38:	6923      	ldr	r3, [r4, #16]
   d4c3a:	6223      	str	r3, [r4, #32]
   d4c3c:	e000      	b.n	d4c40 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d4c3e:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d4c40:	6921      	ldr	r1, [r4, #16]
   d4c42:	68a0      	ldr	r0, [r4, #8]
   d4c44:	f000 f8e1 	bl	d4e0a <_ZNK9FatVolume17clusterFirstBlockEm>
   d4c48:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d4c4a:	b917      	cbnz	r7, d4c52 <_ZN7FatFile5writeEPKvj+0xa2>
   d4c4c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d4c50:	d221      	bcs.n	d4c96 <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d4c52:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d4c56:	42b5      	cmp	r5, r6
   d4c58:	bf28      	it	cs
   d4c5a:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d4c5c:	b937      	cbnz	r7, d4c6c <_ZN7FatFile5writeEPKvj+0xbc>
   d4c5e:	6963      	ldr	r3, [r4, #20]
   d4c60:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d4c62:	4293      	cmp	r3, r2
   d4c64:	bf34      	ite	cc
   d4c66:	2201      	movcc	r2, #1
   d4c68:	2205      	movcs	r2, #5
   d4c6a:	e000      	b.n	d4c6e <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d4c6c:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d4c6e:	68a0      	ldr	r0, [r4, #8]
   d4c70:	3024      	adds	r0, #36	; 0x24
   d4c72:	f000 f8a6 	bl	d4dc2 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d4c76:	2800      	cmp	r0, #0
   d4c78:	d0ab      	beq.n	d4bd2 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d4c7a:	4438      	add	r0, r7
   d4c7c:	462a      	mov	r2, r5
   d4c7e:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d4c80:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d4c82:	f003 faff 	bl	d8284 <memcpy>
      if (512 == (n + blockOffset)) {
   d4c86:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d4c8a:	d130      	bne.n	d4cee <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d4c8c:	68a0      	ldr	r0, [r4, #8]
   d4c8e:	3024      	adds	r0, #36	; 0x24
   d4c90:	f000 f870 	bl	d4d74 <_ZN8FatCache4syncEv>
   d4c94:	e017      	b.n	d4cc6 <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d4c96:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d4c9a:	68a0      	ldr	r0, [r4, #8]
   d4c9c:	d315      	bcc.n	d4cca <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d4c9e:	7902      	ldrb	r2, [r0, #4]
   d4ca0:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d4ca2:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d4ca4:	b2d2      	uxtb	r2, r2
   d4ca6:	4293      	cmp	r3, r2
   d4ca8:	bf28      	it	cs
   d4caa:	4613      	movcs	r3, r2
   d4cac:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4cae:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d4cb0:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4cb4:	d302      	bcc.n	d4cbc <_ZN7FatFile5writeEPKvj+0x10c>
   d4cb6:	441a      	add	r2, r3
   d4cb8:	4291      	cmp	r1, r2
   d4cba:	d337      	bcc.n	d4d2c <_ZN7FatFile5writeEPKvj+0x17c>
   d4cbc:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d4cbe:	464a      	mov	r2, r9
   d4cc0:	6838      	ldr	r0, [r7, #0]
   d4cc2:	f000 fb0c 	bl	d52de <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d4cc6:	b990      	cbnz	r0, d4cee <_ZN7FatFile5writeEPKvj+0x13e>
   d4cc8:	e783      	b.n	d4bd2 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d4cca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d4ccc:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d4cce:	bf02      	ittt	eq
   d4cd0:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d4cd4:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d4cd8:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d4cda:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d4cdc:	464a      	mov	r2, r9
   d4cde:	6818      	ldr	r0, [r3, #0]
   d4ce0:	f000 fa8b 	bl	d51fa <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d4ce4:	2800      	cmp	r0, #0
   d4ce6:	f43f af74 	beq.w	d4bd2 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d4cea:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d4cee:	6963      	ldr	r3, [r4, #20]
   d4cf0:	442b      	add	r3, r5
   d4cf2:	6163      	str	r3, [r4, #20]
    src += n;
   d4cf4:	44a9      	add	r9, r5
    nToWrite -= n;
   d4cf6:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d4cf8:	e77a      	b.n	d4bf0 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d4cfa:	69e2      	ldr	r2, [r4, #28]
   d4cfc:	4293      	cmp	r3, r2
   d4cfe:	d901      	bls.n	d4d04 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d4d00:	61e3      	str	r3, [r4, #28]
   d4d02:	e002      	b.n	d4d0a <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d4d04:	4b0f      	ldr	r3, [pc, #60]	; (d4d44 <_ZN7FatFile5writeEPKvj+0x194>)
   d4d06:	681b      	ldr	r3, [r3, #0]
   d4d08:	b11b      	cbz	r3, d4d12 <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d4d0a:	78a3      	ldrb	r3, [r4, #2]
   d4d0c:	f043 0304 	orr.w	r3, r3, #4
   d4d10:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d4d12:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d4d16:	2b00      	cmp	r3, #0
   d4d18:	db02      	blt.n	d4d20 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d4d1a:	4640      	mov	r0, r8
   d4d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d4d20:	4620      	mov	r0, r4
   d4d22:	f7ff ff0f 	bl	d4b44 <_ZN7FatFile4syncEv>
   d4d26:	2800      	cmp	r0, #0
   d4d28:	d1f7      	bne.n	d4d1a <_ZN7FatFile5writeEPKvj+0x16a>
   d4d2a:	e752      	b.n	d4bd2 <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d4d2c:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d4d30:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d4d34:	62c2      	str	r2, [r0, #44]	; 0x2c
   d4d36:	e7c1      	b.n	d4cbc <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d4d38:	6921      	ldr	r1, [r4, #16]
   d4d3a:	68a0      	ldr	r0, [r4, #8]
   d4d3c:	f000 f865 	bl	d4e0a <_ZNK9FatVolume17clusterFirstBlockEm>
   d4d40:	4601      	mov	r1, r0
   d4d42:	e783      	b.n	d4c4c <_ZN7FatFile5writeEPKvj+0x9c>
   d4d44:	2003e334 	.word	0x2003e334

000d4d48 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d4d48:	f000 be82 	b.w	d5a50 <HAL_Pin_Map>

000d4d4c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4d4c:	b570      	push	{r4, r5, r6, lr}
   d4d4e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4d50:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4d52:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4d54:	b149      	cbz	r1, d4d6a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4d56:	f003 fad1 	bl	d82fc <strlen>
   d4d5a:	682b      	ldr	r3, [r5, #0]
   d4d5c:	4602      	mov	r2, r0
   d4d5e:	4621      	mov	r1, r4
   d4d60:	4628      	mov	r0, r5
   d4d62:	68db      	ldr	r3, [r3, #12]
    }
   d4d64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4d68:	4718      	bx	r3
    }
   d4d6a:	bd70      	pop	{r4, r5, r6, pc}

000d4d6c <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d4d6c:	f000 be70 	b.w	d5a50 <HAL_Pin_Map>

000d4d70 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d4d70:	f000 be6e 	b.w	d5a50 <HAL_Pin_Map>

000d4d74 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d4d74:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d4d76:	7803      	ldrb	r3, [r0, #0]
   d4d78:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d4d7a:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d4d7c:	d51e      	bpl.n	d4dbc <_ZN8FatCache4syncEv+0x48>
   d4d7e:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d4d80:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d4d82:	f100 060c 	add.w	r6, r0, #12
   d4d86:	4632      	mov	r2, r6
   d4d88:	6818      	ldr	r0, [r3, #0]
   d4d8a:	f000 fa36 	bl	d51fa <_ZN9SdSpiCard10writeBlockEmPKh>
   d4d8e:	4605      	mov	r5, r0
   d4d90:	b908      	cbnz	r0, d4d96 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d4d92:	2500      	movs	r5, #0
   d4d94:	e013      	b.n	d4dbe <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d4d96:	7823      	ldrb	r3, [r4, #0]
   d4d98:	079b      	lsls	r3, r3, #30
   d4d9a:	d404      	bmi.n	d4da6 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d4d9c:	7823      	ldrb	r3, [r4, #0]
   d4d9e:	f023 0301 	bic.w	r3, r3, #1
   d4da2:	7023      	strb	r3, [r4, #0]
   d4da4:	e00b      	b.n	d4dbe <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d4da6:	6863      	ldr	r3, [r4, #4]
   d4da8:	68a0      	ldr	r0, [r4, #8]
   d4daa:	6919      	ldr	r1, [r3, #16]
   d4dac:	4632      	mov	r2, r6
   d4dae:	4401      	add	r1, r0
   d4db0:	6818      	ldr	r0, [r3, #0]
   d4db2:	f000 fa22 	bl	d51fa <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d4db6:	2800      	cmp	r0, #0
   d4db8:	d1f0      	bne.n	d4d9c <_ZN8FatCache4syncEv+0x28>
   d4dba:	e7ea      	b.n	d4d92 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d4dbc:	2501      	movs	r5, #1

fail:
  return false;
}
   d4dbe:	4628      	mov	r0, r5
   d4dc0:	bd70      	pop	{r4, r5, r6, pc}

000d4dc2 <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d4dc2:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d4dc4:	6883      	ldr	r3, [r0, #8]
   d4dc6:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d4dc8:	4604      	mov	r4, r0
   d4dca:	460e      	mov	r6, r1
   d4dcc:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d4dce:	d014      	beq.n	d4dfa <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d4dd0:	f7ff ffd0 	bl	d4d74 <_ZN8FatCache4syncEv>
   d4dd4:	b908      	cbnz	r0, d4dda <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d4dd6:	2000      	movs	r0, #0
   d4dd8:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d4dda:	076b      	lsls	r3, r5, #29
   d4ddc:	d503      	bpl.n	d4de6 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d4dde:	2300      	movs	r3, #0
   d4de0:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d4de2:	60a6      	str	r6, [r4, #8]
   d4de4:	e009      	b.n	d4dfa <_ZN8FatCache4readEmh+0x38>
   d4de6:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d4de8:	f104 020c 	add.w	r2, r4, #12
   d4dec:	4631      	mov	r1, r6
   d4dee:	6818      	ldr	r0, [r3, #0]
   d4df0:	f000 f979 	bl	d50e6 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d4df4:	2800      	cmp	r0, #0
   d4df6:	d1f2      	bne.n	d4dde <_ZN8FatCache4readEmh+0x1c>
   d4df8:	e7ed      	b.n	d4dd6 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d4dfa:	7823      	ldrb	r3, [r4, #0]
   d4dfc:	4620      	mov	r0, r4
   d4dfe:	f005 0503 	and.w	r5, r5, #3
   d4e02:	431d      	orrs	r5, r3
   d4e04:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d4e08:	bd70      	pop	{r4, r5, r6, pc}

000d4e0a <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d4e0a:	7983      	ldrb	r3, [r0, #6]
   d4e0c:	6940      	ldr	r0, [r0, #20]
   d4e0e:	3902      	subs	r1, #2
   d4e10:	4099      	lsls	r1, r3
}
   d4e12:	4408      	add	r0, r1
   d4e14:	4770      	bx	lr

000d4e16 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d4e16:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d4e18:	b570      	push	{r4, r5, r6, lr}
   d4e1a:	4605      	mov	r5, r0
   d4e1c:	460c      	mov	r4, r1
   d4e1e:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d4e20:	d802      	bhi.n	d4e28 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d4e22:	f04f 30ff 	mov.w	r0, #4294967295
   d4e26:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d4e28:	69c3      	ldr	r3, [r0, #28]
   d4e2a:	4299      	cmp	r1, r3
   d4e2c:	d8f9      	bhi.n	d4e22 <_ZN9FatVolume6fatGetEmPm+0xc>
   d4e2e:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d4e30:	2b20      	cmp	r3, #32
   d4e32:	d110      	bne.n	d4e56 <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d4e34:	6981      	ldr	r1, [r0, #24]
   d4e36:	2202      	movs	r2, #2
   d4e38:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d4e3c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d4e40:	f7ff ffbf 	bl	d4dc2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d4e44:	2800      	cmp	r0, #0
   d4e46:	d0ec      	beq.n	d4e22 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d4e48:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d4e4c:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d4e50:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d4e54:	e00f      	b.n	d4e76 <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d4e56:	2b10      	cmp	r3, #16
   d4e58:	d1e3      	bne.n	d4e22 <_ZN9FatVolume6fatGetEmPm+0xc>
   d4e5a:	6983      	ldr	r3, [r0, #24]
   d4e5c:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d4e60:	2202      	movs	r2, #2
   d4e62:	4419      	add	r1, r3
   d4e64:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d4e68:	f7ff ffab 	bl	d4dc2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d4e6c:	2800      	cmp	r0, #0
   d4e6e:	d0d8      	beq.n	d4e22 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d4e70:	b2e4      	uxtb	r4, r4
   d4e72:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d4e76:	69ea      	ldr	r2, [r5, #28]
   d4e78:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d4e7a:	bf9a      	itte	ls
   d4e7c:	6033      	strls	r3, [r6, #0]
  return 1;
   d4e7e:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d4e80:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d4e82:	bd70      	pop	{r4, r5, r6, pc}

000d4e84 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d4e84:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d4e86:	b538      	push	{r3, r4, r5, lr}
   d4e88:	460c      	mov	r4, r1
   d4e8a:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d4e8c:	d801      	bhi.n	d4e92 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d4e8e:	2000      	movs	r0, #0
   d4e90:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d4e92:	69c3      	ldr	r3, [r0, #28]
   d4e94:	4299      	cmp	r1, r3
   d4e96:	d8fa      	bhi.n	d4e8e <_ZN9FatVolume6fatPutEmm+0xa>
   d4e98:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d4e9a:	2b20      	cmp	r3, #32
   d4e9c:	d10e      	bne.n	d4ebc <_ZN9FatVolume6fatPutEmm+0x38>
   d4e9e:	6981      	ldr	r1, [r0, #24]
   d4ea0:	2203      	movs	r2, #3
   d4ea2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d4ea6:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d4eaa:	f7ff ff8a 	bl	d4dc2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d4eae:	2800      	cmp	r0, #0
   d4eb0:	d0ed      	beq.n	d4e8e <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d4eb2:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d4eb6:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d4eba:	e00f      	b.n	d4edc <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d4ebc:	2b10      	cmp	r3, #16
   d4ebe:	d1e6      	bne.n	d4e8e <_ZN9FatVolume6fatPutEmm+0xa>
   d4ec0:	6983      	ldr	r3, [r0, #24]
   d4ec2:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d4ec6:	2203      	movs	r2, #3
   d4ec8:	4419      	add	r1, r3
   d4eca:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d4ece:	f7ff ff78 	bl	d4dc2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d4ed2:	2800      	cmp	r0, #0
   d4ed4:	d0db      	beq.n	d4e8e <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d4ed6:	b2e4      	uxtb	r4, r4
   d4ed8:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d4edc:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d4ede:	bd38      	pop	{r3, r4, r5, pc}

000d4ee0 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d4ee0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d4ee4:	68c4      	ldr	r4, [r0, #12]
   d4ee6:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d4ee8:	4605      	mov	r5, r0
   d4eea:	460e      	mov	r6, r1
   d4eec:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d4eee:	d207      	bcs.n	d4f00 <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d4ef0:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d4ef2:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d4ef4:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d4ef6:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d4ef8:	429c      	cmp	r4, r3
   d4efa:	d903      	bls.n	d4f04 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d4efc:	b9cf      	cbnz	r7, d4f32 <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d4efe:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d4f00:	2701      	movs	r7, #1
   d4f02:	e7f7      	b.n	d4ef4 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d4f04:	42a6      	cmp	r6, r4
   d4f06:	d014      	beq.n	d4f32 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d4f08:	aa01      	add	r2, sp, #4
   d4f0a:	4621      	mov	r1, r4
   d4f0c:	4628      	mov	r0, r5
   d4f0e:	f7ff ff82 	bl	d4e16 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d4f12:	2800      	cmp	r0, #0
   d4f14:	db0d      	blt.n	d4f32 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d4f16:	d0ed      	beq.n	d4ef4 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d4f18:	9b01      	ldr	r3, [sp, #4]
   d4f1a:	2b00      	cmp	r3, #0
   d4f1c:	d1ea      	bne.n	d4ef4 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d4f1e:	b107      	cbz	r7, d4f22 <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d4f20:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d4f22:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d4f26:	4621      	mov	r1, r4
   d4f28:	4628      	mov	r0, r5
   d4f2a:	f7ff ffab 	bl	d4e84 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d4f2e:	4607      	mov	r7, r0
   d4f30:	b908      	cbnz	r0, d4f36 <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d4f32:	2700      	movs	r7, #0
   d4f34:	e00b      	b.n	d4f4e <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d4f36:	b916      	cbnz	r6, d4f3e <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d4f38:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d4f3c:	e007      	b.n	d4f4e <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d4f3e:	4622      	mov	r2, r4
   d4f40:	4631      	mov	r1, r6
   d4f42:	4628      	mov	r0, r5
   d4f44:	f7ff ff9e 	bl	d4e84 <_ZN9FatVolume6fatPutEmm>
   d4f48:	2800      	cmp	r0, #0
   d4f4a:	d1f5      	bne.n	d4f38 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d4f4c:	e7f1      	b.n	d4f32 <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d4f4e:	4638      	mov	r0, r7
   d4f50:	b002      	add	sp, #8
   d4f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4f56 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d4f56:	f000 bd7b 	b.w	d5a50 <HAL_Pin_Map>

000d4f5a <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d4f5a:	f000 bd79 	b.w	d5a50 <HAL_Pin_Map>

000d4f5e <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d4f5e:	f000 bd77 	b.w	d5a50 <HAL_Pin_Map>
	...

000d4f64 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d4f64:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d4f66:	4c0e      	ldr	r4, [pc, #56]	; (d4fa0 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d4f68:	460e      	mov	r6, r1
   d4f6a:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d4f6c:	f000 fe28 	bl	d5bc0 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d4f70:	6823      	ldr	r3, [r4, #0]
   d4f72:	1ac0      	subs	r0, r0, r3
   d4f74:	4b0b      	ldr	r3, [pc, #44]	; (d4fa4 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d4f76:	4298      	cmp	r0, r3
   d4f78:	d908      	bls.n	d4f8c <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4f7a:	f000 fe29 	bl	d5bd0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4f7e:	4b0a      	ldr	r3, [pc, #40]	; (d4fa8 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d4f80:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d4f82:	f001 f811 	bl	d5fa8 <spark_process>
   d4f86:	f000 fe1b 	bl	d5bc0 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d4f8a:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4f8c:	f000 fe20 	bl	d5bd0 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d4f90:	b280      	uxth	r0, r0
   d4f92:	1b80      	subs	r0, r0, r6
}
   d4f94:	42a8      	cmp	r0, r5
   d4f96:	bfd4      	ite	le
   d4f98:	2000      	movle	r0, #0
   d4f9a:	2001      	movgt	r0, #1
   d4f9c:	bd70      	pop	{r4, r5, r6, pc}
   d4f9e:	bf00      	nop
   d4fa0:	2003e338 	.word	0x2003e338
   d4fa4:	000186a0 	.word	0x000186a0
   d4fa8:	2003e718 	.word	0x2003e718

000d4fac <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d4fac:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d4fae:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d4fb0:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d4fb2:	b94d      	cbnz	r5, d4fc8 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d4fb4:	6840      	ldr	r0, [r0, #4]
   d4fb6:	f000 f9b9 	bl	d532c <_ZN14SdSpiAltDriver8activateEv>
   d4fba:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d4fbc:	4629      	mov	r1, r5
   d4fbe:	7d18      	ldrb	r0, [r3, #20]
   d4fc0:	f002 fa3b 	bl	d743a <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d4fc4:	2301      	movs	r3, #1
   d4fc6:	7223      	strb	r3, [r4, #8]
   d4fc8:	bd38      	pop	{r3, r4, r5, pc}

000d4fca <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d4fca:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d4fcc:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d4fce:	4604      	mov	r4, r0
  if (m_spiActive) {
   d4fd0:	b16b      	cbz	r3, d4fee <_ZN9SdSpiCard7spiStopEv+0x24>
   d4fd2:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d4fd4:	2101      	movs	r1, #1
   d4fd6:	7d18      	ldrb	r0, [r3, #20]
   d4fd8:	f002 fa2f 	bl	d743a <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d4fdc:	21ff      	movs	r1, #255	; 0xff
   d4fde:	6860      	ldr	r0, [r4, #4]
   d4fe0:	f000 f9c6 	bl	d5370 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d4fe4:	6860      	ldr	r0, [r4, #4]
   d4fe6:	f000 f9a5 	bl	d5334 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d4fea:	2300      	movs	r3, #0
   d4fec:	7223      	strb	r3, [r4, #8]
   d4fee:	bd10      	pop	{r4, pc}

000d4ff0 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d4ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ff2:	4604      	mov	r4, r0
   d4ff4:	460d      	mov	r5, r1
   d4ff6:	4616      	mov	r6, r2
   d4ff8:	f000 fdea 	bl	d5bd0 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d4ffc:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d4ffe:	6860      	ldr	r0, [r4, #4]
   d5000:	f000 f99b 	bl	d533a <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d5004:	28ff      	cmp	r0, #255	; 0xff
   d5006:	7260      	strb	r0, [r4, #9]
   d5008:	d109      	bne.n	d501e <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d500a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d500e:	4639      	mov	r1, r7
   d5010:	4620      	mov	r0, r4
   d5012:	f7ff ffa7 	bl	d4f64 <_ZN9SdSpiCard10isTimedOutEtt>
   d5016:	2800      	cmp	r0, #0
   d5018:	d0f1      	beq.n	d4ffe <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d501a:	2355      	movs	r3, #85	; 0x55
   d501c:	e00b      	b.n	d5036 <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d501e:	28fe      	cmp	r0, #254	; 0xfe
   d5020:	d001      	beq.n	d5026 <_ZN9SdSpiCard8readDataEPhj+0x36>
   d5022:	2350      	movs	r3, #80	; 0x50
   d5024:	e007      	b.n	d5036 <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d5026:	4632      	mov	r2, r6
   d5028:	4629      	mov	r1, r5
   d502a:	6860      	ldr	r0, [r4, #4]
   d502c:	f000 f98a 	bl	d5344 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d5030:	7260      	strb	r0, [r4, #9]
   d5032:	b130      	cbz	r0, d5042 <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5034:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d5036:	4620      	mov	r0, r4
   d5038:	7023      	strb	r3, [r4, #0]
   d503a:	f7ff ffc6 	bl	d4fca <_ZN9SdSpiCard7spiStopEv>
  return false;
   d503e:	2000      	movs	r0, #0
}
   d5040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5042:	6860      	ldr	r0, [r4, #4]
   d5044:	f000 f979 	bl	d533a <_ZN14SdSpiAltDriver7receiveEv>
   d5048:	6860      	ldr	r0, [r4, #4]
   d504a:	f000 f976 	bl	d533a <_ZN14SdSpiAltDriver7receiveEv>
   d504e:	2001      	movs	r0, #1
   d5050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5052 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d5052:	b570      	push	{r4, r5, r6, lr}
   d5054:	4604      	mov	r4, r0
   d5056:	460e      	mov	r6, r1
   d5058:	f000 fdba 	bl	d5bd0 <HAL_Timer_Get_Milli_Seconds>
   d505c:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d505e:	4632      	mov	r2, r6
   d5060:	4629      	mov	r1, r5
   d5062:	4620      	mov	r0, r4
   d5064:	f7ff ff7e 	bl	d4f64 <_ZN9SdSpiCard10isTimedOutEtt>
   d5068:	b930      	cbnz	r0, d5078 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d506a:	6860      	ldr	r0, [r4, #4]
   d506c:	f000 f965 	bl	d533a <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d5070:	28ff      	cmp	r0, #255	; 0xff
   d5072:	d1f4      	bne.n	d505e <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d5074:	2001      	movs	r0, #1
   d5076:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d5078:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d507a:	bd70      	pop	{r4, r5, r6, pc}

000d507c <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d507c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d507e:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d5080:	9201      	str	r2, [sp, #4]
   d5082:	4604      	mov	r4, r0
   d5084:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d5086:	b90b      	cbnz	r3, d508c <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d5088:	f7ff ff90 	bl	d4fac <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d508c:	b125      	cbz	r5, d5098 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d508e:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d5092:	4620      	mov	r0, r4
   d5094:	f7ff ffdd 	bl	d5052 <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5098:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d509c:	6860      	ldr	r0, [r4, #4]
   d509e:	f000 f967 	bl	d5370 <_ZN14SdSpiAltDriver4sendEh>
   d50a2:	f10d 0607 	add.w	r6, sp, #7
   d50a6:	f10d 0703 	add.w	r7, sp, #3
   d50aa:	f816 1901 	ldrb.w	r1, [r6], #-1
   d50ae:	6860      	ldr	r0, [r4, #4]
   d50b0:	f000 f95e 	bl	d5370 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d50b4:	42be      	cmp	r6, r7
   d50b6:	d1f8      	bne.n	d50aa <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d50b8:	2d00      	cmp	r5, #0
   d50ba:	bf0c      	ite	eq
   d50bc:	2195      	moveq	r1, #149	; 0x95
   d50be:	2187      	movne	r1, #135	; 0x87
   d50c0:	6860      	ldr	r0, [r4, #4]
   d50c2:	f000 f955 	bl	d5370 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d50c6:	6860      	ldr	r0, [r4, #4]
   d50c8:	f000 f937 	bl	d533a <_ZN14SdSpiAltDriver7receiveEv>
   d50cc:	250b      	movs	r5, #11
   d50ce:	6860      	ldr	r0, [r4, #4]
   d50d0:	f000 f933 	bl	d533a <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d50d4:	0603      	lsls	r3, r0, #24
   d50d6:	7260      	strb	r0, [r4, #9]
   d50d8:	d503      	bpl.n	d50e2 <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d50da:	3d01      	subs	r5, #1
   d50dc:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d50e0:	d1f5      	bne.n	d50ce <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d50e2:	b003      	add	sp, #12
   d50e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d50e6 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d50e6:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d50e8:	7a83      	ldrb	r3, [r0, #10]
   d50ea:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d50ec:	bf18      	it	ne
   d50ee:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d50f0:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d50f2:	460a      	mov	r2, r1
   d50f4:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d50f6:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d50f8:	f7ff ffc0 	bl	d507c <_ZN9SdSpiCard11cardCommandEhm>
   d50fc:	b110      	cbz	r0, d5104 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d50fe:	2330      	movs	r3, #48	; 0x30
   d5100:	7023      	strb	r3, [r4, #0]
   d5102:	e00b      	b.n	d511c <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d5104:	4629      	mov	r1, r5
   d5106:	f44f 7200 	mov.w	r2, #512	; 0x200
   d510a:	4620      	mov	r0, r4
   d510c:	f7ff ff70 	bl	d4ff0 <_ZN9SdSpiCard8readDataEPhj>
   d5110:	4605      	mov	r5, r0
   d5112:	b118      	cbz	r0, d511c <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d5114:	4620      	mov	r0, r4
   d5116:	f7ff ff58 	bl	d4fca <_ZN9SdSpiCard7spiStopEv>
  return true;
   d511a:	e003      	b.n	d5124 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d511c:	4620      	mov	r0, r4
   d511e:	f7ff ff54 	bl	d4fca <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5122:	2500      	movs	r5, #0
}
   d5124:	4628      	mov	r0, r5
   d5126:	bd38      	pop	{r3, r4, r5, pc}

000d5128 <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d5128:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d512a:	7a83      	ldrb	r3, [r0, #10]
   d512c:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d512e:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d5130:	bf18      	it	ne
   d5132:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d5134:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d5136:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d5138:	f7ff ffa0 	bl	d507c <_ZN9SdSpiCard11cardCommandEhm>
   d513c:	b130      	cbz	r0, d514c <_ZN9SdSpiCard9readStartEm+0x24>
   d513e:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d5140:	4620      	mov	r0, r4
   d5142:	7023      	strb	r3, [r4, #0]
   d5144:	f7ff ff41 	bl	d4fca <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5148:	2000      	movs	r0, #0
   d514a:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d514c:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d514e:	bd10      	pop	{r4, pc}

000d5150 <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d5150:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d5152:	2200      	movs	r2, #0
   d5154:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d5156:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d5158:	f7ff ff90 	bl	d507c <_ZN9SdSpiCard11cardCommandEhm>
   d515c:	b130      	cbz	r0, d516c <_ZN9SdSpiCard8readStopEv+0x1c>
   d515e:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d5160:	4620      	mov	r0, r4
   d5162:	7023      	strb	r3, [r4, #0]
   d5164:	f7ff ff31 	bl	d4fca <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5168:	2000      	movs	r0, #0
   d516a:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d516c:	4620      	mov	r0, r4
   d516e:	f7ff ff2c 	bl	d4fca <_ZN9SdSpiCard7spiStopEv>
  return true;
   d5172:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d5174:	bd10      	pop	{r4, pc}

000d5176 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d5176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5178:	4605      	mov	r5, r0
   d517a:	4616      	mov	r6, r2
   d517c:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d517e:	f7ff ffd3 	bl	d5128 <_ZN9SdSpiCard9readStartEm>
   d5182:	b198      	cbz	r0, d51ac <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d5184:	2400      	movs	r4, #0
   d5186:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d5188:	429f      	cmp	r7, r3
   d518a:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d518e:	d908      	bls.n	d51a2 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d5190:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5194:	4628      	mov	r0, r5
   d5196:	f7ff ff2b 	bl	d4ff0 <_ZN9SdSpiCard8readDataEPhj>
   d519a:	3401      	adds	r4, #1
   d519c:	2800      	cmp	r0, #0
   d519e:	d1f2      	bne.n	d5186 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d51a0:	e004      	b.n	d51ac <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d51a2:	4628      	mov	r0, r5
}
   d51a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d51a8:	f7ff bfd2 	b.w	d5150 <_ZN9SdSpiCard8readStopEv>
}
   d51ac:	2000      	movs	r0, #0
   d51ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d51b0 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d51b0:	b538      	push	{r3, r4, r5, lr}
   d51b2:	4604      	mov	r4, r0
   d51b4:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d51b6:	6840      	ldr	r0, [r0, #4]
   d51b8:	f000 f8da 	bl	d5370 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d51bc:	f44f 7200 	mov.w	r2, #512	; 0x200
   d51c0:	4629      	mov	r1, r5
   d51c2:	6860      	ldr	r0, [r4, #4]
   d51c4:	f000 f8d8 	bl	d5378 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d51c8:	21ff      	movs	r1, #255	; 0xff
   d51ca:	6860      	ldr	r0, [r4, #4]
   d51cc:	f000 f8d0 	bl	d5370 <_ZN14SdSpiAltDriver4sendEh>
   d51d0:	21ff      	movs	r1, #255	; 0xff
   d51d2:	6860      	ldr	r0, [r4, #4]
   d51d4:	f000 f8cc 	bl	d5370 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d51d8:	6860      	ldr	r0, [r4, #4]
   d51da:	f000 f8ae 	bl	d533a <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d51de:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d51e0:	f000 001f 	and.w	r0, r0, #31
   d51e4:	2805      	cmp	r0, #5
   d51e6:	d006      	beq.n	d51f6 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d51e8:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d51ea:	4620      	mov	r0, r4
   d51ec:	7023      	strb	r3, [r4, #0]
   d51ee:	f7ff feec 	bl	d4fca <_ZN9SdSpiCard7spiStopEv>
  return false;
   d51f2:	2000      	movs	r0, #0
   d51f4:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d51f6:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d51f8:	bd38      	pop	{r3, r4, r5, pc}

000d51fa <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d51fa:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d51fc:	7a83      	ldrb	r3, [r0, #10]
   d51fe:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d5200:	bf18      	it	ne
   d5202:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d5204:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d5206:	460a      	mov	r2, r1
   d5208:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d520a:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d520c:	f7ff ff36 	bl	d507c <_ZN9SdSpiCard11cardCommandEhm>
   d5210:	4606      	mov	r6, r0
   d5212:	b108      	cbz	r0, d5218 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d5214:	2332      	movs	r3, #50	; 0x32
   d5216:	e01d      	b.n	d5254 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d5218:	462a      	mov	r2, r5
   d521a:	21fe      	movs	r1, #254	; 0xfe
   d521c:	4620      	mov	r0, r4
   d521e:	f7ff ffc7 	bl	d51b0 <_ZN9SdSpiCard9writeDataEhPKh>
   d5222:	b1c0      	cbz	r0, d5256 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5224:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d5228:	4620      	mov	r0, r4
   d522a:	f7ff ff12 	bl	d5052 <_ZN9SdSpiCard11waitNotBusyEt>
   d522e:	4605      	mov	r5, r0
   d5230:	b908      	cbnz	r0, d5236 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d5232:	235a      	movs	r3, #90	; 0x5a
   d5234:	e00e      	b.n	d5254 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d5236:	4632      	mov	r2, r6
   d5238:	210d      	movs	r1, #13
   d523a:	4620      	mov	r0, r4
   d523c:	f7ff ff1e 	bl	d507c <_ZN9SdSpiCard11cardCommandEhm>
   d5240:	b938      	cbnz	r0, d5252 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5242:	6860      	ldr	r0, [r4, #4]
   d5244:	f000 f879 	bl	d533a <_ZN14SdSpiAltDriver7receiveEv>
   d5248:	b918      	cbnz	r0, d5252 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d524a:	4620      	mov	r0, r4
   d524c:	f7ff febd 	bl	d4fca <_ZN9SdSpiCard7spiStopEv>
  return true;
   d5250:	e005      	b.n	d525e <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5252:	2329      	movs	r3, #41	; 0x29
   d5254:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d5256:	4620      	mov	r0, r4
   d5258:	f7ff feb7 	bl	d4fca <_ZN9SdSpiCard7spiStopEv>
  return false;
   d525c:	2500      	movs	r5, #0
}
   d525e:	4628      	mov	r0, r5
   d5260:	bd70      	pop	{r4, r5, r6, pc}

000d5262 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d5262:	b538      	push	{r3, r4, r5, lr}
   d5264:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5266:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d526a:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d526c:	f7ff fef1 	bl	d5052 <_ZN9SdSpiCard11waitNotBusyEt>
   d5270:	b910      	cbnz	r0, d5278 <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d5272:	235b      	movs	r3, #91	; 0x5b
   d5274:	7023      	strb	r3, [r4, #0]
   d5276:	e005      	b.n	d5284 <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d5278:	462a      	mov	r2, r5
   d527a:	21fc      	movs	r1, #252	; 0xfc
   d527c:	4620      	mov	r0, r4
   d527e:	f7ff ff97 	bl	d51b0 <_ZN9SdSpiCard9writeDataEhPKh>
   d5282:	b918      	cbnz	r0, d528c <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d5284:	4620      	mov	r0, r4
   d5286:	f7ff fea0 	bl	d4fca <_ZN9SdSpiCard7spiStopEv>
  return false;
   d528a:	2000      	movs	r0, #0
}
   d528c:	bd38      	pop	{r3, r4, r5, pc}

000d528e <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d528e:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d5290:	7a83      	ldrb	r3, [r0, #10]
   d5292:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5294:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d5296:	bf18      	it	ne
   d5298:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d529a:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d529c:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d529e:	f7ff feed 	bl	d507c <_ZN9SdSpiCard11cardCommandEhm>
   d52a2:	b130      	cbz	r0, d52b2 <_ZN9SdSpiCard10writeStartEm+0x24>
   d52a4:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d52a6:	4620      	mov	r0, r4
   d52a8:	7023      	strb	r3, [r4, #0]
   d52aa:	f7ff fe8e 	bl	d4fca <_ZN9SdSpiCard7spiStopEv>
  return false;
   d52ae:	2000      	movs	r0, #0
   d52b0:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d52b2:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d52b4:	bd10      	pop	{r4, pc}

000d52b6 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d52b6:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d52b8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d52bc:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d52be:	f7ff fec8 	bl	d5052 <_ZN9SdSpiCard11waitNotBusyEt>
   d52c2:	4605      	mov	r5, r0
   d52c4:	b120      	cbz	r0, d52d0 <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d52c6:	21fd      	movs	r1, #253	; 0xfd
   d52c8:	6860      	ldr	r0, [r4, #4]
   d52ca:	f000 f851 	bl	d5370 <_ZN14SdSpiAltDriver4sendEh>
   d52ce:	e001      	b.n	d52d4 <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d52d0:	2356      	movs	r3, #86	; 0x56
   d52d2:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d52d4:	4620      	mov	r0, r4
   d52d6:	f7ff fe78 	bl	d4fca <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d52da:	4628      	mov	r0, r5
   d52dc:	bd38      	pop	{r3, r4, r5, pc}

000d52de <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d52de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d52e0:	4605      	mov	r5, r0
   d52e2:	4616      	mov	r6, r2
   d52e4:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d52e6:	f7ff ffd2 	bl	d528e <_ZN9SdSpiCard10writeStartEm>
   d52ea:	b170      	cbz	r0, d530a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d52ec:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d52ee:	42bc      	cmp	r4, r7
   d52f0:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d52f4:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d52f6:	d004      	beq.n	d5302 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d52f8:	f7ff ffb3 	bl	d5262 <_ZN9SdSpiCard9writeDataEPKh>
   d52fc:	b128      	cbz	r0, d530a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d52fe:	3401      	adds	r4, #1
   d5300:	e7f5      	b.n	d52ee <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d5302:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d5306:	f7ff bfd6 	b.w	d52b6 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d530a:	4628      	mov	r0, r5
   d530c:	f7ff fe5d 	bl	d4fca <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d5310:	2000      	movs	r0, #0
   d5312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5314 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d5314:	f000 bb9c 	b.w	d5a50 <HAL_Pin_Map>

000d5318 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d5318:	f000 bb9a 	b.w	d5a50 <HAL_Pin_Map>

000d531c <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d531c:	f000 bb98 	b.w	d5a50 <HAL_Pin_Map>

000d5320 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d5320:	4b01      	ldr	r3, [pc, #4]	; (d5328 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d5322:	2201      	movs	r2, #1
   d5324:	701a      	strb	r2, [r3, #0]
   d5326:	4770      	bx	lr
   d5328:	2003e33c 	.word	0x2003e33c

000d532c <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d532c:	1d01      	adds	r1, r0, #4
   d532e:	6800      	ldr	r0, [r0, #0]
   d5330:	f000 bf1c 	b.w	d616c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d5334 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d5334:	6800      	ldr	r0, [r0, #0]
   d5336:	f000 bf00 	b.w	d613a <_ZN8SPIClass14endTransactionEv>

000d533a <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d533a:	21ff      	movs	r1, #255	; 0xff
   d533c:	6800      	ldr	r0, [r0, #0]
   d533e:	f000 bfdb 	b.w	d62f8 <_ZN8SPIClass8transferEh>
	...

000d5344 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d5344:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5346:	4b08      	ldr	r3, [pc, #32]	; (d5368 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d5348:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d534a:	2500      	movs	r5, #0
   d534c:	4c07      	ldr	r4, [pc, #28]	; (d536c <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d534e:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5350:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5352:	4613      	mov	r3, r2
   d5354:	460a      	mov	r2, r1
   d5356:	4629      	mov	r1, r5
   d5358:	f000 ffd4 	bl	d6304 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d535c:	7823      	ldrb	r3, [r4, #0]
   d535e:	2b00      	cmp	r3, #0
   d5360:	d0fc      	beq.n	d535c <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d5362:	2000      	movs	r0, #0
   d5364:	b003      	add	sp, #12
   d5366:	bd30      	pop	{r4, r5, pc}
   d5368:	000d5321 	.word	0x000d5321
   d536c:	2003e33c 	.word	0x2003e33c

000d5370 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d5370:	6800      	ldr	r0, [r0, #0]
   d5372:	f000 bfc1 	b.w	d62f8 <_ZN8SPIClass8transferEh>
	...

000d5378 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d5378:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d537a:	4b07      	ldr	r3, [pc, #28]	; (d5398 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d537c:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d537e:	2500      	movs	r5, #0
   d5380:	4c06      	ldr	r4, [pc, #24]	; (d539c <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5382:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5384:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5386:	4613      	mov	r3, r2
   d5388:	462a      	mov	r2, r5
   d538a:	f000 ffbb 	bl	d6304 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d538e:	7823      	ldrb	r3, [r4, #0]
   d5390:	2b00      	cmp	r3, #0
   d5392:	d0fc      	beq.n	d538e <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d5394:	b003      	add	sp, #12
   d5396:	bd30      	pop	{r4, r5, pc}
   d5398:	000d5321 	.word	0x000d5321
   d539c:	2003e33c 	.word	0x2003e33c

000d53a0 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d53a0:	f000 bb56 	b.w	d5a50 <HAL_Pin_Map>

000d53a4 <_ZN5RFM694isr0Ev>:
  }
  RSSI = readRSSI();
  //digitalWrite(4, 0);
}

void RFM69::isr0() { selfPointer->interruptHandler(); }
   d53a4:	4b02      	ldr	r3, [pc, #8]	; (d53b0 <_ZN5RFM694isr0Ev+0xc>)
   d53a6:	6818      	ldr	r0, [r3, #0]
   d53a8:	6803      	ldr	r3, [r0, #0]
   d53aa:	681b      	ldr	r3, [r3, #0]
   d53ac:	4718      	bx	r3
   d53ae:	bf00      	nop
   d53b0:	2003e354 	.word	0x2003e354

000d53b4 <_ZN5RFM698unselectEv>:
  SPI1.setClockDivider(SPI_CLOCK_DIV16);
  digitalWrite(_slaveSelectPin, LOW);
}

/// UNselect the transceiver chip
void RFM69::unselect() {
   d53b4:	b508      	push	{r3, lr}
  digitalWrite(_slaveSelectPin, HIGH);
   d53b6:	2101      	movs	r1, #1
   d53b8:	7900      	ldrb	r0, [r0, #4]
   d53ba:	f002 f83e 	bl	d743a <digitalWrite>
  #ifndef PARTICLE
  SPCR = _SPCR;
  SPSR = _SPSR;
  #endif
  interrupts();
}
   d53be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  //restore SPI settings to what they were before talking to RFM69
  #ifndef PARTICLE
  SPCR = _SPCR;
  SPSR = _SPSR;
  #endif
  interrupts();
   d53c2:	f001 bcfb 	b.w	d6dbc <_Z10interruptsv>
	...

000d53c8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d53c8:	b510      	push	{r4, lr}
        static SPIClass instance(Interface);
   d53ca:	4c08      	ldr	r4, [pc, #32]	; (d53ec <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x24>)
   d53cc:	6823      	ldr	r3, [r4, #0]
   d53ce:	07db      	lsls	r3, r3, #31
   d53d0:	d40a      	bmi.n	d53e8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x20>
   d53d2:	4620      	mov	r0, r4
   d53d4:	f7fe fe63 	bl	d409e <__cxa_guard_acquire>
   d53d8:	b130      	cbz	r0, d53e8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x20>
   d53da:	2101      	movs	r1, #1
   d53dc:	4804      	ldr	r0, [pc, #16]	; (d53f0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x28>)
   d53de:	f000 fe6f 	bl	d60c0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d53e2:	4620      	mov	r0, r4
   d53e4:	f7fe fe60 	bl	d40a8 <__cxa_guard_release>
        return instance;
    }
   d53e8:	4801      	ldr	r0, [pc, #4]	; (d53f0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x28>)
   d53ea:	bd10      	pop	{r4, pc}
   d53ec:	2003e340 	.word	0x2003e340
   d53f0:	2003e344 	.word	0x2003e344

000d53f4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   d53f4:	b510      	push	{r4, lr}
   d53f6:	4604      	mov	r4, r0
        return instance().transfer(data);
   d53f8:	f7ff ffe6 	bl	d53c8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d53fc:	4621      	mov	r1, r4
    }
   d53fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d5402:	f000 bf79 	b.w	d62f8 <_ZN8SPIClass8transferEh>

000d5406 <_ZN5RFM696selectEv>:
  SPI1.transfer(value);
  unselect();
}

/// Select the transceiver
void RFM69::select() {
   d5406:	b510      	push	{r4, lr}
   d5408:	4604      	mov	r4, r0
  noInterrupts();
   d540a:	f001 fcd5 	bl	d6db8 <_Z12noInterruptsv>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d540e:	f7ff ffdb 	bl	d53c8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d5412:	2100      	movs	r1, #0
   d5414:	f000 fe80 	bl	d6118 <_ZN8SPIClass11setDataModeEh>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   d5418:	f7ff ffd6 	bl	d53c8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d541c:	2101      	movs	r1, #1
   d541e:	f000 fe6a 	bl	d60f6 <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
   d5422:	f7ff ffd1 	bl	d53c8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d5426:	2118      	movs	r1, #24
   d5428:	f000 ff42 	bl	d62b0 <_ZN8SPIClass15setClockDividerEh>
  //set RFM69 SPI settings
  SPI1.setDataMode(SPI_MODE0);
  SPI1.setBitOrder(MSBFIRST);
  //SPI_CLOCK_DIV16; // 72MHz / 16 = 4.5MHz
  SPI1.setClockDivider(SPI_CLOCK_DIV16);
  digitalWrite(_slaveSelectPin, LOW);
   d542c:	7920      	ldrb	r0, [r4, #4]
   d542e:	2100      	movs	r1, #0
}
   d5430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  //set RFM69 SPI settings
  SPI1.setDataMode(SPI_MODE0);
  SPI1.setBitOrder(MSBFIRST);
  //SPI_CLOCK_DIV16; // 72MHz / 16 = 4.5MHz
  SPI1.setClockDivider(SPI_CLOCK_DIV16);
  digitalWrite(_slaveSelectPin, LOW);
   d5434:	f002 b801 	b.w	d743a <digitalWrite>

000d5438 <_ZN5RFM697readRegEh>:
  rssi >>= 1;
  return rssi;
}

byte RFM69::readReg(byte addr)
{
   d5438:	b538      	push	{r3, r4, r5, lr}
   d543a:	460c      	mov	r4, r1
   d543c:	4605      	mov	r5, r0
  select();
   d543e:	f7ff ffe2 	bl	d5406 <_ZN5RFM696selectEv>
  SPI1.transfer(addr & 0x7F);
   d5442:	f004 007f 	and.w	r0, r4, #127	; 0x7f
   d5446:	f7ff ffd5 	bl	d53f4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  byte regval = SPI1.transfer(0);
   d544a:	2000      	movs	r0, #0
   d544c:	f7ff ffd2 	bl	d53f4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d5450:	4604      	mov	r4, r0
  unselect();
   d5452:	4628      	mov	r0, r5
   d5454:	f7ff ffae 	bl	d53b4 <_ZN5RFM698unselectEv>
  return regval;
}
   d5458:	4620      	mov	r0, r4
   d545a:	bd38      	pop	{r3, r4, r5, pc}

000d545c <_ZN5RFM698writeRegEhh>:

void RFM69::writeReg(byte addr, byte value)
{
   d545c:	b570      	push	{r4, r5, r6, lr}
   d545e:	460e      	mov	r6, r1
   d5460:	4615      	mov	r5, r2
   d5462:	4604      	mov	r4, r0
  select();
   d5464:	f7ff ffcf 	bl	d5406 <_ZN5RFM696selectEv>
  SPI1.transfer(addr | 0x80);
   d5468:	f046 0080 	orr.w	r0, r6, #128	; 0x80
   d546c:	f7ff ffc2 	bl	d53f4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  SPI1.transfer(value);
   d5470:	4628      	mov	r0, r5
   d5472:	f7ff ffbf 	bl	d53f4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  unselect();
   d5476:	4620      	mov	r0, r4
}
   d5478:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void RFM69::writeReg(byte addr, byte value)
{
  select();
  SPI1.transfer(addr | 0x80);
  SPI1.transfer(value);
  unselect();
   d547c:	f7ff bf9a 	b.w	d53b4 <_ZN5RFM698unselectEv>

000d5480 <_ZN5RFM6913setPowerLevelEh>:
}

// set output power: 0=min, 31=max
// this results in a "weaker" transmitted signal, and directly results in a lower RSSI at the receiver
void RFM69::setPowerLevel(byte powerLevel)
{
   d5480:	b510      	push	{r4, lr}
  _powerLevel = powerLevel;
   d5482:	7241      	strb	r1, [r0, #9]
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | (_powerLevel > 31 ? 31 : _powerLevel));
   d5484:	2111      	movs	r1, #17
}

// set output power: 0=min, 31=max
// this results in a "weaker" transmitted signal, and directly results in a lower RSSI at the receiver
void RFM69::setPowerLevel(byte powerLevel)
{
   d5486:	4604      	mov	r4, r0
  _powerLevel = powerLevel;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | (_powerLevel > 31 ? 31 : _powerLevel));
   d5488:	f7ff ffd6 	bl	d5438 <_ZN5RFM697readRegEh>
   d548c:	7a62      	ldrb	r2, [r4, #9]
   d548e:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
   d5492:	2a1f      	cmp	r2, #31
   d5494:	bf94      	ite	ls
   d5496:	4302      	orrls	r2, r0
   d5498:	f040 021f 	orrhi.w	r2, r0, #31
   d549c:	2111      	movs	r1, #17
   d549e:	4620      	mov	r0, r4
}
   d54a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// set output power: 0=min, 31=max
// this results in a "weaker" transmitted signal, and directly results in a lower RSSI at the receiver
void RFM69::setPowerLevel(byte powerLevel)
{
  _powerLevel = powerLevel;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | (_powerLevel > 31 ? 31 : _powerLevel));
   d54a4:	f7ff bfda 	b.w	d545c <_ZN5RFM698writeRegEhh>

000d54a8 <_ZN5RFM698readRSSIEb>:
    unselect();
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
}

int RFM69::readRSSI(bool forceTrigger) {
   d54a8:	b510      	push	{r4, lr}
   d54aa:	4604      	mov	r4, r0
  int rssi = 0;
  if (forceTrigger)
   d54ac:	b149      	cbz	r1, d54c2 <_ZN5RFM698readRSSIEb+0x1a>
  {
    //RSSI trigger not needed if DAGC is in continuous mode
    writeReg(REG_RSSICONFIG, RF_RSSI_START);
   d54ae:	2201      	movs	r2, #1
   d54b0:	2123      	movs	r1, #35	; 0x23
   d54b2:	f7ff ffd3 	bl	d545c <_ZN5RFM698writeRegEhh>
    while ((readReg(REG_RSSICONFIG) & RF_RSSI_DONE) == 0x00); // Wait for RSSI_Ready
   d54b6:	2123      	movs	r1, #35	; 0x23
   d54b8:	4620      	mov	r0, r4
   d54ba:	f7ff ffbd 	bl	d5438 <_ZN5RFM697readRegEh>
   d54be:	0783      	lsls	r3, r0, #30
   d54c0:	d5f9      	bpl.n	d54b6 <_ZN5RFM698readRSSIEb+0xe>
  }
  rssi = -readReg(REG_RSSIVALUE);
   d54c2:	2124      	movs	r1, #36	; 0x24
   d54c4:	4620      	mov	r0, r4
   d54c6:	f7ff ffb7 	bl	d5438 <_ZN5RFM697readRegEh>
   d54ca:	4240      	negs	r0, r0
  rssi >>= 1;
  return rssi;
   d54cc:	1040      	asrs	r0, r0, #1
}
   d54ce:	bd10      	pop	{r4, pc}

000d54d0 <_ZN5RFM6916setHighPowerRegsEb>:
  uint16_t baudRate = 32000000L / speedBPS;;
  
  writeReg(REG_BITRATEMSB, (baudRate >> 8) & 0xFF);
  writeReg(REG_BITRATELSB, (baudRate >> 0) & 0xFF);
}
void RFM69::setHighPowerRegs(bool onOff) {
   d54d0:	b538      	push	{r3, r4, r5, lr}
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
   d54d2:	2900      	cmp	r1, #0
   d54d4:	bf14      	ite	ne
   d54d6:	225d      	movne	r2, #93	; 0x5d
   d54d8:	2255      	moveq	r2, #85	; 0x55
   d54da:	460c      	mov	r4, r1
   d54dc:	215a      	movs	r1, #90	; 0x5a
  uint16_t baudRate = 32000000L / speedBPS;;
  
  writeReg(REG_BITRATEMSB, (baudRate >> 8) & 0xFF);
  writeReg(REG_BITRATELSB, (baudRate >> 0) & 0xFF);
}
void RFM69::setHighPowerRegs(bool onOff) {
   d54de:	4605      	mov	r5, r0
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
   d54e0:	f7ff ffbc 	bl	d545c <_ZN5RFM698writeRegEhh>
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
   d54e4:	2c00      	cmp	r4, #0
   d54e6:	4628      	mov	r0, r5
   d54e8:	bf14      	ite	ne
   d54ea:	227c      	movne	r2, #124	; 0x7c
   d54ec:	2270      	moveq	r2, #112	; 0x70
   d54ee:	215c      	movs	r1, #92	; 0x5c
}
   d54f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeReg(REG_BITRATEMSB, (baudRate >> 8) & 0xFF);
  writeReg(REG_BITRATELSB, (baudRate >> 0) & 0xFF);
}
void RFM69::setHighPowerRegs(bool onOff) {
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
   d54f4:	f7ff bfb2 	b.w	d545c <_ZN5RFM698writeRegEhh>

000d54f8 <_ZN5RFM697setModeEh>:
  writeReg(REG_FRFMID, freqHz >> 8);
  writeReg(REG_FRFLSB, freqHz);
}

void RFM69::setMode(byte newMode)
{
   d54f8:	b570      	push	{r4, r5, r6, lr}
	if (newMode == _mode) return; //TODO: can remove this?
   d54fa:	4d28      	ldr	r5, [pc, #160]	; (d559c <_ZN5RFM697setModeEh+0xa4>)
   d54fc:	782b      	ldrb	r3, [r5, #0]
   d54fe:	428b      	cmp	r3, r1
  writeReg(REG_FRFMID, freqHz >> 8);
  writeReg(REG_FRFLSB, freqHz);
}

void RFM69::setMode(byte newMode)
{
   d5500:	4604      	mov	r4, r0
   d5502:	460e      	mov	r6, r1
	if (newMode == _mode) return; //TODO: can remove this?
   d5504:	d049      	beq.n	d559a <_ZN5RFM697setModeEh+0xa2>

	switch (newMode) {
   d5506:	2904      	cmp	r1, #4
   d5508:	d847      	bhi.n	d559a <_ZN5RFM697setModeEh+0xa2>
   d550a:	e8df f001 	tbb	[pc, r1]
   d550e:	2c34      	.short	0x2c34
   d5510:	1224      	.short	0x1224
   d5512:	03          	.byte	0x03
   d5513:	00          	.byte	0x00
		case RF69_MODE_TX:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
   d5514:	2101      	movs	r1, #1
   d5516:	f7ff ff8f 	bl	d5438 <_ZN5RFM697readRegEh>
   d551a:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d551e:	f042 020c 	orr.w	r2, r2, #12
   d5522:	2101      	movs	r1, #1
   d5524:	4620      	mov	r0, r4
   d5526:	f7ff ff99 	bl	d545c <_ZN5RFM698writeRegEhh>
      if (_isRFM69HW) setHighPowerRegs(true);
   d552a:	7aa3      	ldrb	r3, [r4, #10]
   d552c:	b363      	cbz	r3, d5588 <_ZN5RFM697setModeEh+0x90>
   d552e:	2101      	movs	r1, #1
   d5530:	e00d      	b.n	d554e <_ZN5RFM697setModeEh+0x56>
			break;
		case RF69_MODE_RX:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
   d5532:	2101      	movs	r1, #1
   d5534:	f7ff ff80 	bl	d5438 <_ZN5RFM697readRegEh>
   d5538:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d553c:	f042 0210 	orr.w	r2, r2, #16
   d5540:	2101      	movs	r1, #1
   d5542:	4620      	mov	r0, r4
   d5544:	f7ff ff8a 	bl	d545c <_ZN5RFM698writeRegEhh>
      if (_isRFM69HW) setHighPowerRegs(false);
   d5548:	7aa3      	ldrb	r3, [r4, #10]
   d554a:	b1eb      	cbz	r3, d5588 <_ZN5RFM697setModeEh+0x90>
   d554c:	2100      	movs	r1, #0
   d554e:	4620      	mov	r0, r4
   d5550:	f7ff ffbe 	bl	d54d0 <_ZN5RFM6916setHighPowerRegsEb>
   d5554:	e018      	b.n	d5588 <_ZN5RFM697setModeEh+0x90>
			break;
		case RF69_MODE_SYNTH:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SYNTHESIZER);
   d5556:	2101      	movs	r1, #1
   d5558:	f7ff ff6e 	bl	d5438 <_ZN5RFM697readRegEh>
   d555c:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d5560:	f042 0208 	orr.w	r2, r2, #8
   d5564:	e00c      	b.n	d5580 <_ZN5RFM697setModeEh+0x88>
			break;
		case RF69_MODE_STANDBY:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_STANDBY);
   d5566:	2101      	movs	r1, #1
   d5568:	f7ff ff66 	bl	d5438 <_ZN5RFM697readRegEh>
   d556c:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d5570:	f042 0204 	orr.w	r2, r2, #4
   d5574:	e004      	b.n	d5580 <_ZN5RFM697setModeEh+0x88>
			break;
		case RF69_MODE_SLEEP:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
   d5576:	2101      	movs	r1, #1
   d5578:	f7ff ff5e 	bl	d5438 <_ZN5RFM697readRegEh>
   d557c:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d5580:	2101      	movs	r1, #1
   d5582:	4620      	mov	r0, r4
   d5584:	f7ff ff6a 	bl	d545c <_ZN5RFM698writeRegEhh>
		default: return;
	}

	// we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
	while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // Wait for ModeReady
   d5588:	782b      	ldrb	r3, [r5, #0]
   d558a:	b92b      	cbnz	r3, d5598 <_ZN5RFM697setModeEh+0xa0>
   d558c:	2127      	movs	r1, #39	; 0x27
   d558e:	4620      	mov	r0, r4
   d5590:	f7ff ff52 	bl	d5438 <_ZN5RFM697readRegEh>
   d5594:	0603      	lsls	r3, r0, #24
   d5596:	d5f7      	bpl.n	d5588 <_ZN5RFM697setModeEh+0x90>

	_mode = newMode;
   d5598:	702e      	strb	r6, [r5, #0]
   d559a:	bd70      	pop	{r4, r5, r6, pc}
   d559c:	2003e398 	.word	0x2003e398

000d55a0 <_ZN5RFM6912receiveBeginEv>:
}

void RFM69::isr0() { selfPointer->interruptHandler(); }

void RFM69::receiveBegin() {
  DATALEN = 0;
   d55a0:	4a15      	ldr	r2, [pc, #84]	; (d55f8 <_ZN5RFM6912receiveBeginEv+0x58>)
   d55a2:	2300      	movs	r3, #0
  //digitalWrite(4, 0);
}

void RFM69::isr0() { selfPointer->interruptHandler(); }

void RFM69::receiveBegin() {
   d55a4:	b510      	push	{r4, lr}
  DATALEN = 0;
   d55a6:	7013      	strb	r3, [r2, #0]
  SENDERID = 0;
   d55a8:	4a14      	ldr	r2, [pc, #80]	; (d55fc <_ZN5RFM6912receiveBeginEv+0x5c>)
   d55aa:	7013      	strb	r3, [r2, #0]
  TARGETID = 0;
   d55ac:	4a14      	ldr	r2, [pc, #80]	; (d5600 <_ZN5RFM6912receiveBeginEv+0x60>)
   d55ae:	7013      	strb	r3, [r2, #0]
  PAYLOADLEN = 0;
   d55b0:	4a14      	ldr	r2, [pc, #80]	; (d5604 <_ZN5RFM6912receiveBeginEv+0x64>)
   d55b2:	7013      	strb	r3, [r2, #0]
  ACK_REQUESTED = 0;
   d55b4:	4a14      	ldr	r2, [pc, #80]	; (d5608 <_ZN5RFM6912receiveBeginEv+0x68>)
   d55b6:	7013      	strb	r3, [r2, #0]
  ACK_RECEIVED = 0;
   d55b8:	4a14      	ldr	r2, [pc, #80]	; (d560c <_ZN5RFM6912receiveBeginEv+0x6c>)
   d55ba:	7013      	strb	r3, [r2, #0]
  RSSI = 0;
   d55bc:	4a14      	ldr	r2, [pc, #80]	; (d5610 <_ZN5RFM6912receiveBeginEv+0x70>)
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
   d55be:	2128      	movs	r1, #40	; 0x28
  SENDERID = 0;
  TARGETID = 0;
  PAYLOADLEN = 0;
  ACK_REQUESTED = 0;
  ACK_RECEIVED = 0;
  RSSI = 0;
   d55c0:	6013      	str	r3, [r2, #0]
  //digitalWrite(4, 0);
}

void RFM69::isr0() { selfPointer->interruptHandler(); }

void RFM69::receiveBegin() {
   d55c2:	4604      	mov	r4, r0
  TARGETID = 0;
  PAYLOADLEN = 0;
  ACK_REQUESTED = 0;
  ACK_RECEIVED = 0;
  RSSI = 0;
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
   d55c4:	f7ff ff38 	bl	d5438 <_ZN5RFM697readRegEh>
   d55c8:	0743      	lsls	r3, r0, #29
   d55ca:	d50a      	bpl.n	d55e2 <_ZN5RFM6912receiveBeginEv+0x42>
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
   d55cc:	213d      	movs	r1, #61	; 0x3d
   d55ce:	4620      	mov	r0, r4
   d55d0:	f7ff ff32 	bl	d5438 <_ZN5RFM697readRegEh>
   d55d4:	f040 0204 	orr.w	r2, r0, #4
   d55d8:	b2d2      	uxtb	r2, r2
   d55da:	213d      	movs	r1, #61	; 0x3d
   d55dc:	4620      	mov	r0, r4
   d55de:	f7ff ff3d 	bl	d545c <_ZN5RFM698writeRegEhh>
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); //set DIO0 to "PAYLOADREADY" in receive mode
   d55e2:	4620      	mov	r0, r4
   d55e4:	2125      	movs	r1, #37	; 0x25
   d55e6:	2240      	movs	r2, #64	; 0x40
   d55e8:	f7ff ff38 	bl	d545c <_ZN5RFM698writeRegEhh>
  setMode(RF69_MODE_RX);
   d55ec:	4620      	mov	r0, r4
   d55ee:	2103      	movs	r1, #3
}
   d55f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ACK_RECEIVED = 0;
  RSSI = 0;
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); //set DIO0 to "PAYLOADREADY" in receive mode
  setMode(RF69_MODE_RX);
   d55f4:	f7ff bf80 	b.w	d54f8 <_ZN5RFM697setModeEh>
   d55f8:	2003e397 	.word	0x2003e397
   d55fc:	2003e352 	.word	0x2003e352
   d5600:	2003e350 	.word	0x2003e350
   d5604:	2003e358 	.word	0x2003e358
   d5608:	2003e351 	.word	0x2003e351
   d560c:	2003e359 	.word	0x2003e359
   d5610:	2003e34c 	.word	0x2003e34c

000d5614 <_ZN5RFM6911receiveDoneEv>:
}

bool RFM69::receiveDone() {
   d5614:	b510      	push	{r4, lr}
   d5616:	4604      	mov	r4, r0
// ATOMIC_BLOCK(ATOMIC_FORCEON)
// {
  noInterrupts(); //re-enabled in unselect() via setMode() or via receiveBegin()
   d5618:	f001 fbce 	bl	d6db8 <_Z12noInterruptsv>
  if (_mode == RF69_MODE_RX && PAYLOADLEN>0)
   d561c:	4b0b      	ldr	r3, [pc, #44]	; (d564c <_ZN5RFM6911receiveDoneEv+0x38>)
   d561e:	781a      	ldrb	r2, [r3, #0]
   d5620:	2a03      	cmp	r2, #3
   d5622:	d102      	bne.n	d562a <_ZN5RFM6911receiveDoneEv+0x16>
   d5624:	4a0a      	ldr	r2, [pc, #40]	; (d5650 <_ZN5RFM6911receiveDoneEv+0x3c>)
   d5626:	7812      	ldrb	r2, [r2, #0]
   d5628:	b952      	cbnz	r2, d5640 <_ZN5RFM6911receiveDoneEv+0x2c>
  {
    setMode(RF69_MODE_STANDBY); //enables interrupts
    return true;
  }
  else if (_mode == RF69_MODE_RX)  //already in RX no payload yet
   d562a:	781b      	ldrb	r3, [r3, #0]
   d562c:	2b03      	cmp	r3, #3
   d562e:	d102      	bne.n	d5636 <_ZN5RFM6911receiveDoneEv+0x22>
  {
    interrupts(); //explicitly re-enable interrupts
   d5630:	f001 fbc4 	bl	d6dbc <_Z10interruptsv>
   d5634:	e002      	b.n	d563c <_ZN5RFM6911receiveDoneEv+0x28>
    return false;
  }
  receiveBegin();
   d5636:	4620      	mov	r0, r4
   d5638:	f7ff ffb2 	bl	d55a0 <_ZN5RFM6912receiveBeginEv>
  return false;
   d563c:	2000      	movs	r0, #0
   d563e:	bd10      	pop	{r4, pc}
// ATOMIC_BLOCK(ATOMIC_FORCEON)
// {
  noInterrupts(); //re-enabled in unselect() via setMode() or via receiveBegin()
  if (_mode == RF69_MODE_RX && PAYLOADLEN>0)
  {
    setMode(RF69_MODE_STANDBY); //enables interrupts
   d5640:	4620      	mov	r0, r4
   d5642:	2101      	movs	r1, #1
   d5644:	f7ff ff58 	bl	d54f8 <_ZN5RFM697setModeEh>
    return true;
   d5648:	2001      	movs	r0, #1
    return false;
  }
  receiveBegin();
  return false;
//}
}
   d564a:	bd10      	pop	{r4, pc}
   d564c:	2003e398 	.word	0x2003e398
   d5650:	2003e358 	.word	0x2003e358

000d5654 <_ZN5RFM6912setHighPowerEb>:
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

void RFM69::setHighPower(bool onOff) {
  _isRFM69HW = onOff;
  writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
   d5654:	2900      	cmp	r1, #0
void RFM69::promiscuous(bool onOff) {
  _promiscuousMode=onOff;
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

void RFM69::setHighPower(bool onOff) {
   d5656:	b510      	push	{r4, lr}
   d5658:	4604      	mov	r4, r0
  _isRFM69HW = onOff;
   d565a:	7281      	strb	r1, [r0, #10]
  writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
   d565c:	bf14      	ite	ne
   d565e:	220f      	movne	r2, #15
   d5660:	221a      	moveq	r2, #26
   d5662:	2113      	movs	r1, #19
   d5664:	f7ff fefa 	bl	d545c <_ZN5RFM698writeRegEhh>
  if (_isRFM69HW) //turning ON
   d5668:	7aa3      	ldrb	r3, [r4, #10]
   d566a:	b143      	cbz	r3, d567e <_ZN5RFM6912setHighPowerEb+0x2a>
    writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); //enable P1 & P2 amplifier stages
   d566c:	2111      	movs	r1, #17
   d566e:	4620      	mov	r0, r4
   d5670:	f7ff fee2 	bl	d5438 <_ZN5RFM697readRegEh>
   d5674:	f000 021f 	and.w	r2, r0, #31
   d5678:	f042 0260 	orr.w	r2, r2, #96	; 0x60
   d567c:	e002      	b.n	d5684 <_ZN5RFM6912setHighPowerEb+0x30>
  else
    writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); //enable P0 only
   d567e:	7a62      	ldrb	r2, [r4, #9]
   d5680:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   d5684:	4620      	mov	r0, r4
   d5686:	2111      	movs	r1, #17
}
   d5688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  _isRFM69HW = onOff;
  writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
  if (_isRFM69HW) //turning ON
    writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); //enable P1 & P2 amplifier stages
  else
    writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); //enable P0 only
   d568c:	f7ff bee6 	b.w	d545c <_ZN5RFM698writeRegEhh>

000d5690 <_ZN5RFM6916interruptHandlerEv>:
	while (digitalRead(_interruptPin) == 0 && millis()-txStart < RF69_TX_LIMIT_MS); //wait for DIO0 to turn HIGH signalling transmission finish
  //while (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT == 0x00); // Wait for ModeReady
  setMode(RF69_MODE_STANDBY);
}

void RFM69::interruptHandler() {
   d5690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  //pinMode(4, OUTPUT);
  //digitalWrite(4, 1);
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
   d5694:	4b3d      	ldr	r3, [pc, #244]	; (d578c <_ZN5RFM6916interruptHandlerEv+0xfc>)
   d5696:	781b      	ldrb	r3, [r3, #0]
   d5698:	2b03      	cmp	r3, #3
	while (digitalRead(_interruptPin) == 0 && millis()-txStart < RF69_TX_LIMIT_MS); //wait for DIO0 to turn HIGH signalling transmission finish
  //while (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT == 0x00); // Wait for ModeReady
  setMode(RF69_MODE_STANDBY);
}

void RFM69::interruptHandler() {
   d569a:	4604      	mov	r4, r0
  //pinMode(4, OUTPUT);
  //digitalWrite(4, 1);
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
   d569c:	d114      	bne.n	d56c8 <_ZN5RFM6916interruptHandlerEv+0x38>
   d569e:	2128      	movs	r1, #40	; 0x28
   d56a0:	f7ff feca 	bl	d5438 <_ZN5RFM697readRegEh>
   d56a4:	0743      	lsls	r3, r0, #29
   d56a6:	d417      	bmi.n	d56d8 <_ZN5RFM6916interruptHandlerEv+0x48>
   d56a8:	e00e      	b.n	d56c8 <_ZN5RFM6916interruptHandlerEv+0x38>

    for (byte i= 0; i < DATALEN; i++)
    {
      DATA[i] = SPI1.transfer(0);
    }
    if (DATALEN<RF69_MAX_DATA_LEN) DATA[DATALEN]=0; //add null at end of string
   d56aa:	7813      	ldrb	r3, [r2, #0]
   d56ac:	2b3c      	cmp	r3, #60	; 0x3c
   d56ae:	d804      	bhi.n	d56ba <_ZN5RFM6916interruptHandlerEv+0x2a>
   d56b0:	7813      	ldrb	r3, [r2, #0]
   d56b2:	4a37      	ldr	r2, [pc, #220]	; (d5790 <_ZN5RFM6916interruptHandlerEv+0x100>)
   d56b4:	b2db      	uxtb	r3, r3
   d56b6:	2100      	movs	r1, #0
   d56b8:	54d1      	strb	r1, [r2, r3]
    unselect();
   d56ba:	4620      	mov	r0, r4
   d56bc:	f7ff fe7a 	bl	d53b4 <_ZN5RFM698unselectEv>
    setMode(RF69_MODE_RX);
   d56c0:	2103      	movs	r1, #3
   d56c2:	4620      	mov	r0, r4
   d56c4:	f7ff ff18 	bl	d54f8 <_ZN5RFM697setModeEh>
  }
  RSSI = readRSSI();
   d56c8:	2100      	movs	r1, #0
   d56ca:	4620      	mov	r0, r4
   d56cc:	f7ff feec 	bl	d54a8 <_ZN5RFM698readRSSIEb>
   d56d0:	4b30      	ldr	r3, [pc, #192]	; (d5794 <_ZN5RFM6916interruptHandlerEv+0x104>)
   d56d2:	6018      	str	r0, [r3, #0]
   d56d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  //pinMode(4, OUTPUT);
  //digitalWrite(4, 1);
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
  {
    //RSSI = readRSSI();
    setMode(RF69_MODE_STANDBY);
   d56d8:	2101      	movs	r1, #1
   d56da:	4620      	mov	r0, r4
   d56dc:	f7ff ff0c 	bl	d54f8 <_ZN5RFM697setModeEh>
    select();
   d56e0:	4620      	mov	r0, r4
   d56e2:	f7ff fe90 	bl	d5406 <_ZN5RFM696selectEv>
    SPI1.transfer(REG_FIFO & 0x7f);
   d56e6:	2000      	movs	r0, #0
   d56e8:	f7ff fe84 	bl	d53f4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
    PAYLOADLEN = SPI1.transfer(0);
   d56ec:	2000      	movs	r0, #0
   d56ee:	f7ff fe81 	bl	d53f4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d56f2:	4d29      	ldr	r5, [pc, #164]	; (d5798 <_ZN5RFM6916interruptHandlerEv+0x108>)
   d56f4:	7028      	strb	r0, [r5, #0]
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
   d56f6:	782b      	ldrb	r3, [r5, #0]
   d56f8:	2b42      	cmp	r3, #66	; 0x42
   d56fa:	d814      	bhi.n	d5726 <_ZN5RFM6916interruptHandlerEv+0x96>
   d56fc:	782b      	ldrb	r3, [r5, #0]
   d56fe:	b2db      	uxtb	r3, r3
    TARGETID = SPI1.transfer(0);
   d5700:	2000      	movs	r0, #0
    //RSSI = readRSSI();
    setMode(RF69_MODE_STANDBY);
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
   d5702:	702b      	strb	r3, [r5, #0]
    TARGETID = SPI1.transfer(0);
   d5704:	f7ff fe76 	bl	d53f4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d5708:	4b24      	ldr	r3, [pc, #144]	; (d579c <_ZN5RFM6916interruptHandlerEv+0x10c>)
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
   d570a:	7a22      	ldrb	r2, [r4, #8]
    setMode(RF69_MODE_STANDBY);
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
    TARGETID = SPI1.transfer(0);
   d570c:	7018      	strb	r0, [r3, #0]
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
   d570e:	b932      	cbnz	r2, d571e <_ZN5RFM6916interruptHandlerEv+0x8e>
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
    TARGETID = SPI1.transfer(0);
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
   d5710:	781a      	ldrb	r2, [r3, #0]
   d5712:	79e1      	ldrb	r1, [r4, #7]
   d5714:	4291      	cmp	r1, r2
   d5716:	d002      	beq.n	d571e <_ZN5RFM6916interruptHandlerEv+0x8e>
   d5718:	781b      	ldrb	r3, [r3, #0]
   d571a:	2bff      	cmp	r3, #255	; 0xff
   d571c:	d105      	bne.n	d572a <_ZN5RFM6916interruptHandlerEv+0x9a>
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
   d571e:	782b      	ldrb	r3, [r5, #0]
   d5720:	2b02      	cmp	r3, #2
   d5722:	d902      	bls.n	d572a <_ZN5RFM6916interruptHandlerEv+0x9a>
   d5724:	e00b      	b.n	d573e <_ZN5RFM6916interruptHandlerEv+0xae>
    //RSSI = readRSSI();
    setMode(RF69_MODE_STANDBY);
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
   d5726:	2342      	movs	r3, #66	; 0x42
   d5728:	e7ea      	b.n	d5700 <_ZN5RFM6916interruptHandlerEv+0x70>
    TARGETID = SPI1.transfer(0);
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
    {
      PAYLOADLEN = 0;
      unselect();
   d572a:	4620      	mov	r0, r4
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
    TARGETID = SPI1.transfer(0);
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
    {
      PAYLOADLEN = 0;
   d572c:	2300      	movs	r3, #0
   d572e:	702b      	strb	r3, [r5, #0]
      unselect();
   d5730:	f7ff fe40 	bl	d53b4 <_ZN5RFM698unselectEv>
      receiveBegin();
   d5734:	4620      	mov	r0, r4
    unselect();
    setMode(RF69_MODE_RX);
  }
  RSSI = readRSSI();
  //digitalWrite(4, 0);
}
   d5736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
    {
      PAYLOADLEN = 0;
      unselect();
      receiveBegin();
   d573a:	f7ff bf31 	b.w	d55a0 <_ZN5RFM6912receiveBeginEv>
      //digitalWrite(4, 0);
      return;
    }

    DATALEN = PAYLOADLEN - 3;
   d573e:	4b16      	ldr	r3, [pc, #88]	; (d5798 <_ZN5RFM6916interruptHandlerEv+0x108>)
   d5740:	4e17      	ldr	r6, [pc, #92]	; (d57a0 <_ZN5RFM6916interruptHandlerEv+0x110>)
   d5742:	781b      	ldrb	r3, [r3, #0]
    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag

    for (byte i= 0; i < DATALEN; i++)
    {
      DATA[i] = SPI1.transfer(0);
   d5744:	4f12      	ldr	r7, [pc, #72]	; (d5790 <_ZN5RFM6916interruptHandlerEv+0x100>)
      receiveBegin();
      //digitalWrite(4, 0);
      return;
    }

    DATALEN = PAYLOADLEN - 3;
   d5746:	3b03      	subs	r3, #3
   d5748:	b2db      	uxtb	r3, r3
    SENDERID = SPI1.transfer(0);
   d574a:	2000      	movs	r0, #0
      receiveBegin();
      //digitalWrite(4, 0);
      return;
    }

    DATALEN = PAYLOADLEN - 3;
   d574c:	7033      	strb	r3, [r6, #0]
    SENDERID = SPI1.transfer(0);
   d574e:	f7ff fe51 	bl	d53f4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d5752:	4b14      	ldr	r3, [pc, #80]	; (d57a4 <_ZN5RFM6916interruptHandlerEv+0x114>)
   d5754:	7018      	strb	r0, [r3, #0]
    byte CTLbyte = SPI1.transfer(0);
   d5756:	2000      	movs	r0, #0
   d5758:	f7ff fe4c 	bl	d53f4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>

    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
   d575c:	4a12      	ldr	r2, [pc, #72]	; (d57a8 <_ZN5RFM6916interruptHandlerEv+0x118>)
   d575e:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
   d5762:	b2db      	uxtb	r3, r3
   d5764:	7013      	strb	r3, [r2, #0]
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag
   d5766:	f000 0040 	and.w	r0, r0, #64	; 0x40
   d576a:	4b10      	ldr	r3, [pc, #64]	; (d57ac <_ZN5RFM6916interruptHandlerEv+0x11c>)
   d576c:	b2c0      	uxtb	r0, r0
   d576e:	7018      	strb	r0, [r3, #0]
   d5770:	2300      	movs	r3, #0

    for (byte i= 0; i < DATALEN; i++)
   d5772:	7831      	ldrb	r1, [r6, #0]
   d5774:	4a0a      	ldr	r2, [pc, #40]	; (d57a0 <_ZN5RFM6916interruptHandlerEv+0x110>)
   d5776:	b2dd      	uxtb	r5, r3
   d5778:	428d      	cmp	r5, r1
   d577a:	f103 0801 	add.w	r8, r3, #1
   d577e:	d294      	bcs.n	d56aa <_ZN5RFM6916interruptHandlerEv+0x1a>
    {
      DATA[i] = SPI1.transfer(0);
   d5780:	2000      	movs	r0, #0
   d5782:	f7ff fe37 	bl	d53f4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
    byte CTLbyte = SPI1.transfer(0);

    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag

    for (byte i= 0; i < DATALEN; i++)
   d5786:	4643      	mov	r3, r8
    {
      DATA[i] = SPI1.transfer(0);
   d5788:	5578      	strb	r0, [r7, r5]
    byte CTLbyte = SPI1.transfer(0);

    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag

    for (byte i= 0; i < DATALEN; i++)
   d578a:	e7f2      	b.n	d5772 <_ZN5RFM6916interruptHandlerEv+0xe2>
   d578c:	2003e398 	.word	0x2003e398
   d5790:	2003e35a 	.word	0x2003e35a
   d5794:	2003e34c 	.word	0x2003e34c
   d5798:	2003e358 	.word	0x2003e358
   d579c:	2003e350 	.word	0x2003e350
   d57a0:	2003e397 	.word	0x2003e397
   d57a4:	2003e352 	.word	0x2003e352
   d57a8:	2003e359 	.word	0x2003e359
   d57ac:	2003e351 	.word	0x2003e351

000d57b0 <_ZN5RFM697encryptEPKc>:
}

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM69::encrypt(const char* key) {
   d57b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d57b2:	460d      	mov	r5, r1
  setMode(RF69_MODE_STANDBY);
   d57b4:	2101      	movs	r1, #1
}

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM69::encrypt(const char* key) {
   d57b6:	4604      	mov	r4, r0
  setMode(RF69_MODE_STANDBY);
   d57b8:	f7ff fe9e 	bl	d54f8 <_ZN5RFM697setModeEh>
  if (key!=0)
   d57bc:	b18d      	cbz	r5, d57e2 <_ZN5RFM697encryptEPKc+0x32>
  {
    select();
   d57be:	4620      	mov	r0, r4
   d57c0:	f7ff fe21 	bl	d5406 <_ZN5RFM696selectEv>
    SPI1.transfer(REG_AESKEY1 | 0x80);
   d57c4:	20be      	movs	r0, #190	; 0xbe
   d57c6:	f7ff fe15 	bl	d53f4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d57ca:	1e6e      	subs	r6, r5, #1
   d57cc:	f105 070f 	add.w	r7, r5, #15
    for (byte i = 0; i<16; i++)
      SPI1.transfer(key[i]);
   d57d0:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   d57d4:	f7ff fe0e 	bl	d53f4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  setMode(RF69_MODE_STANDBY);
  if (key!=0)
  {
    select();
    SPI1.transfer(REG_AESKEY1 | 0x80);
    for (byte i = 0; i<16; i++)
   d57d8:	42be      	cmp	r6, r7
   d57da:	d1f9      	bne.n	d57d0 <_ZN5RFM697encryptEPKc+0x20>
      SPI1.transfer(key[i]);
    unselect();
   d57dc:	4620      	mov	r0, r4
   d57de:	f7ff fde9 	bl	d53b4 <_ZN5RFM698unselectEv>
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
   d57e2:	213d      	movs	r1, #61	; 0x3d
   d57e4:	4620      	mov	r0, r4
   d57e6:	f7ff fe27 	bl	d5438 <_ZN5RFM697readRegEh>
   d57ea:	f020 0001 	bic.w	r0, r0, #1
   d57ee:	2d00      	cmp	r5, #0
   d57f0:	bf0c      	ite	eq
   d57f2:	4602      	moveq	r2, r0
   d57f4:	f040 0201 	orrne.w	r2, r0, #1
   d57f8:	b2d2      	uxtb	r2, r2
   d57fa:	4620      	mov	r0, r4
   d57fc:	213d      	movs	r1, #61	; 0x3d
}
   d57fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    SPI1.transfer(REG_AESKEY1 | 0x80);
    for (byte i = 0; i<16; i++)
      SPI1.transfer(key[i]);
    unselect();
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
   d5802:	f7ff be2b 	b.w	d545c <_ZN5RFM698writeRegEhh>
	...

000d5808 <_ZN5RFM6910initializeEhhh>:
volatile byte RFM69::ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
volatile int RFM69::RSSI; //most accurate RSSI during reception (closest to the reception)
RFM69* RFM69::selfPointer;

bool RFM69::initialize(byte freqBand, byte nodeID, byte networkID)
{
   d5808:	b5f0      	push	{r4, r5, r6, r7, lr}
   d580a:	b08f      	sub	sp, #60	; 0x3c
   d580c:	460d      	mov	r5, r1
   d580e:	4604      	mov	r4, r0
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d5810:	2100      	movs	r1, #0
volatile byte RFM69::ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
volatile int RFM69::RSSI; //most accurate RSSI during reception (closest to the reception)
RFM69* RFM69::selfPointer;

bool RFM69::initialize(byte freqBand, byte nodeID, byte networkID)
{
   d5812:	4616      	mov	r6, r2
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d5814:	a803      	add	r0, sp, #12
   d5816:	222a      	movs	r2, #42	; 0x2a
volatile byte RFM69::ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
volatile int RFM69::RSSI; //most accurate RSSI during reception (closest to the reception)
RFM69* RFM69::selfPointer;

bool RFM69::initialize(byte freqBand, byte nodeID, byte networkID)
{
   d5818:	461f      	mov	r7, r3
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d581a:	f002 fd3e 	bl	d829a <memset>
   d581e:	2301      	movs	r3, #1
   d5820:	f88d 300c 	strb.w	r3, [sp, #12]
   d5824:	2303      	movs	r3, #3
   d5826:	f88d 3010 	strb.w	r3, [sp, #16]
   d582a:	f88d 3015 	strb.w	r3, [sp, #21]
   d582e:	2306      	movs	r3, #6
   d5830:	f88d 3016 	strb.w	r3, [sp, #22]
   d5834:	2333      	movs	r3, #51	; 0x33
   d5836:	f88d 3017 	strb.w	r3, [sp, #23]
   d583a:	2307      	movs	r3, #7
   d583c:	f88d 3018 	strb.w	r3, [sp, #24]
   d5840:	2308      	movs	r3, #8
   d5842:	f88d 301a 	strb.w	r3, [sp, #26]
   d5846:	2309      	movs	r3, #9
   d5848:	f88d 301c 	strb.w	r3, [sp, #28]
   d584c:	2319      	movs	r3, #25
   d584e:	f88d 301e 	strb.w	r3, [sp, #30]
   d5852:	2325      	movs	r3, #37	; 0x25
   d5854:	f88d 3020 	strb.w	r3, [sp, #32]
   d5858:	2329      	movs	r3, #41	; 0x29
   d585a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   d585e:	23dc      	movs	r3, #220	; 0xdc
   d5860:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   d5864:	232e      	movs	r3, #46	; 0x2e
   d5866:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d586a:	2388      	movs	r3, #136	; 0x88
   d586c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   d5870:	232f      	movs	r3, #47	; 0x2f
   d5872:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   d5876:	232d      	movs	r3, #45	; 0x2d
   d5878:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   d587c:	2337      	movs	r3, #55	; 0x37
   d587e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   d5882:	2390      	movs	r3, #144	; 0x90
   d5884:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d5888:	2338      	movs	r3, #56	; 0x38
   d588a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   d588e:	233c      	movs	r3, #60	; 0x3c
   d5890:	2204      	movs	r2, #4
   d5892:	2102      	movs	r1, #2
   d5894:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
   d5898:	238f      	movs	r3, #143	; 0x8f
   d589a:	f88d 200d 	strb.w	r2, [sp, #13]
   d589e:	f88d 100e 	strb.w	r1, [sp, #14]
   d58a2:	f88d 1011 	strb.w	r1, [sp, #17]
   d58a6:	f88d 2012 	strb.w	r2, [sp, #18]
   d58aa:	2105      	movs	r1, #5
   d58ac:	2240      	movs	r2, #64	; 0x40
   d58ae:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   d58b2:	233d      	movs	r3, #61	; 0x3d
   d58b4:	f88d 2013 	strb.w	r2, [sp, #19]
   d58b8:	f88d 1014 	strb.w	r1, [sp, #20]
   d58bc:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
   d58c0:	2142      	movs	r1, #66	; 0x42
   d58c2:	2230      	movs	r2, #48	; 0x30
   d58c4:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   d58c8:	2312      	movs	r3, #18
   d58ca:	f88d 101f 	strb.w	r1, [sp, #31]
   d58ce:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   d58d2:	f88d 102d 	strb.w	r1, [sp, #45]	; 0x2d
   d58d6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   d58da:	236f      	movs	r3, #111	; 0x6f
   d58dc:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   d58e0:	2d1f      	cmp	r5, #31
   d58e2:	f04f 03ff 	mov.w	r3, #255	; 0xff
   d58e6:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   d58ea:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   d58ee:	d006      	beq.n	d58fe <_ZN5RFM6910initializeEhhh+0xf6>
   d58f0:	2d2b      	cmp	r5, #43	; 0x2b
   d58f2:	d006      	beq.n	d5902 <_ZN5RFM6910initializeEhhh+0xfa>
   d58f4:	2d56      	cmp	r5, #86	; 0x56
   d58f6:	bf0c      	ite	eq
   d58f8:	22d9      	moveq	r2, #217	; 0xd9
   d58fa:	22e4      	movne	r2, #228	; 0xe4
   d58fc:	e002      	b.n	d5904 <_ZN5RFM6910initializeEhhh+0xfc>
   d58fe:	224e      	movs	r2, #78	; 0x4e
   d5900:	e000      	b.n	d5904 <_ZN5RFM6910initializeEhhh+0xfc>
   d5902:	226c      	movs	r2, #108	; 0x6c
   d5904:	2d1f      	cmp	r5, #31
   d5906:	f88d 2019 	strb.w	r2, [sp, #25]
   d590a:	d006      	beq.n	d591a <_ZN5RFM6910initializeEhhh+0x112>
   d590c:	2d2b      	cmp	r5, #43	; 0x2b
   d590e:	d006      	beq.n	d591e <_ZN5RFM6910initializeEhhh+0x116>
   d5910:	2d56      	cmp	r5, #86	; 0x56
   d5912:	bf14      	ite	ne
   d5914:	22c0      	movne	r2, #192	; 0xc0
   d5916:	2200      	moveq	r2, #0
   d5918:	e002      	b.n	d5920 <_ZN5RFM6910initializeEhhh+0x118>
   d591a:	22c0      	movs	r2, #192	; 0xc0
   d591c:	e000      	b.n	d5920 <_ZN5RFM6910initializeEhhh+0x118>
   d591e:	2240      	movs	r2, #64	; 0x40

  pinMode(_slaveSelectPin, OUTPUT);
   d5920:	2101      	movs	r1, #1
   d5922:	7920      	ldrb	r0, [r4, #4]
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d5924:	f88d 201b 	strb.w	r2, [sp, #27]
   d5928:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29

  pinMode(_slaveSelectPin, OUTPUT);
   d592c:	f001 fd74 	bl	d7418 <pinMode>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d5930:	f7ff fd4a 	bl	d53c8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d5934:	f000 fbce 	bl	d60d4 <_ZN8SPIClass5beginEv>
   d5938:	f000 f94a 	bl	d5bd0 <HAL_Timer_Get_Milli_Seconds>
   d593c:	4605      	mov	r5, r0
  // Set time out to 50ms
  #define TIME_OUT 50
  
  start_to = millis() ;

  do writeReg(REG_SYNCVALUE1, 0xaa); while (readReg(REG_SYNCVALUE1) != 0xaa && millis()-start_to < TIME_OUT);
   d593e:	22aa      	movs	r2, #170	; 0xaa
   d5940:	212f      	movs	r1, #47	; 0x2f
   d5942:	4620      	mov	r0, r4
   d5944:	f7ff fd8a 	bl	d545c <_ZN5RFM698writeRegEhh>
   d5948:	212f      	movs	r1, #47	; 0x2f
   d594a:	4620      	mov	r0, r4
   d594c:	f7ff fd74 	bl	d5438 <_ZN5RFM697readRegEh>
   d5950:	28aa      	cmp	r0, #170	; 0xaa
   d5952:	d004      	beq.n	d595e <_ZN5RFM6910initializeEhhh+0x156>
   d5954:	f000 f93c 	bl	d5bd0 <HAL_Timer_Get_Milli_Seconds>
   d5958:	1b40      	subs	r0, r0, r5
   d595a:	2831      	cmp	r0, #49	; 0x31
   d595c:	d9ef      	bls.n	d593e <_ZN5RFM6910initializeEhhh+0x136>
   d595e:	f000 f937 	bl	d5bd0 <HAL_Timer_Get_Milli_Seconds>
  if (millis()-start_to >= TIME_OUT) return (false);
   d5962:	1b40      	subs	r0, r0, r5
   d5964:	2831      	cmp	r0, #49	; 0x31
   d5966:	d82d      	bhi.n	d59c4 <_ZN5RFM6910initializeEhhh+0x1bc>
   d5968:	f000 f932 	bl	d5bd0 <HAL_Timer_Get_Milli_Seconds>
   d596c:	4605      	mov	r5, r0
    
  // Set time out 
  start_to = millis()  ;  
	do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis()-start_to < TIME_OUT);
   d596e:	2255      	movs	r2, #85	; 0x55
   d5970:	212f      	movs	r1, #47	; 0x2f
   d5972:	4620      	mov	r0, r4
   d5974:	f7ff fd72 	bl	d545c <_ZN5RFM698writeRegEhh>
   d5978:	212f      	movs	r1, #47	; 0x2f
   d597a:	4620      	mov	r0, r4
   d597c:	f7ff fd5c 	bl	d5438 <_ZN5RFM697readRegEh>
   d5980:	2855      	cmp	r0, #85	; 0x55
   d5982:	d021      	beq.n	d59c8 <_ZN5RFM6910initializeEhhh+0x1c0>
   d5984:	f000 f924 	bl	d5bd0 <HAL_Timer_Get_Milli_Seconds>
   d5988:	1b40      	subs	r0, r0, r5
   d598a:	2831      	cmp	r0, #49	; 0x31
   d598c:	d9ef      	bls.n	d596e <_ZN5RFM6910initializeEhhh+0x166>
   d598e:	e01b      	b.n	d59c8 <_ZN5RFM6910initializeEhhh+0x1c0>
  for (byte i = 0; CONFIG[i][0] != 255; i++)
    writeReg(CONFIG[i][0], CONFIG[i][1]);

  // Encryption is persistent between resets and can trip you up during debugging.
  // Disable it during initialization so we always start from a known state.
  encrypt(0);
   d5990:	2100      	movs	r1, #0
   d5992:	4620      	mov	r0, r4
   d5994:	f7ff ff0c 	bl	d57b0 <_ZN5RFM697encryptEPKc>

  setHighPower(_isRFM69HW); //called regardless if it's a RFM69W or RFM69HW
   d5998:	7aa1      	ldrb	r1, [r4, #10]
   d599a:	4620      	mov	r0, r4
   d599c:	f7ff fe5a 	bl	d5654 <_ZN5RFM6912setHighPowerEb>
  setMode(RF69_MODE_STANDBY);
   d59a0:	2101      	movs	r1, #1
   d59a2:	4620      	mov	r0, r4
   d59a4:	f7ff fda8 	bl	d54f8 <_ZN5RFM697setModeEh>
   d59a8:	f000 f912 	bl	d5bd0 <HAL_Timer_Get_Milli_Seconds>
   d59ac:	4605      	mov	r5, r0
  // Set time out 
  start_to = millis() ;
	while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis()-start_to < TIME_OUT); // Wait for ModeReady
   d59ae:	2127      	movs	r1, #39	; 0x27
   d59b0:	4620      	mov	r0, r4
   d59b2:	f7ff fd41 	bl	d5438 <_ZN5RFM697readRegEh>
   d59b6:	0603      	lsls	r3, r0, #24
   d59b8:	d51b      	bpl.n	d59f2 <_ZN5RFM6910initializeEhhh+0x1ea>
   d59ba:	f000 f909 	bl	d5bd0 <HAL_Timer_Get_Milli_Seconds>
  if (millis()-start_to >= TIME_OUT) return (false);
   d59be:	1b40      	subs	r0, r0, r5
   d59c0:	2831      	cmp	r0, #49	; 0x31
   d59c2:	d91c      	bls.n	d59fe <_ZN5RFM6910initializeEhhh+0x1f6>
  // picking a non-interrupt enabled pin will prevent proper initialization
  // code thanks to @ScruffR - https://community.particle.io/t/how-to-make-rfm69-work-on-photon-solved-new-library-rfm69-particle/26497/93?u=bloukingfisher
  if (!attachInterrupt(_interruptNum, RFM69::isr0, RISING)) return false;
   d59c4:	2000      	movs	r0, #0
   d59c6:	e028      	b.n	d5a1a <_ZN5RFM6910initializeEhhh+0x212>
   d59c8:	f000 f902 	bl	d5bd0 <HAL_Timer_Get_Milli_Seconds>
  if (millis()-start_to >= TIME_OUT) return (false);
    
  // Set time out 
  start_to = millis()  ;  
	do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis()-start_to < TIME_OUT);
  if (millis()-start_to >= TIME_OUT) return (false);
   d59cc:	1b40      	subs	r0, r0, r5
   d59ce:	2831      	cmp	r0, #49	; 0x31
   d59d0:	d8f8      	bhi.n	d59c4 <_ZN5RFM6910initializeEhhh+0x1bc>
   d59d2:	2500      	movs	r5, #0
  for (byte i = 0; CONFIG[i][0] != 255; i++)
   d59d4:	b2eb      	uxtb	r3, r5
   d59d6:	aa0e      	add	r2, sp, #56	; 0x38
   d59d8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d59dc:	3501      	adds	r5, #1
   d59de:	f813 1c2c 	ldrb.w	r1, [r3, #-44]
   d59e2:	29ff      	cmp	r1, #255	; 0xff
   d59e4:	d0d4      	beq.n	d5990 <_ZN5RFM6910initializeEhhh+0x188>
    writeReg(CONFIG[i][0], CONFIG[i][1]);
   d59e6:	f813 2c2b 	ldrb.w	r2, [r3, #-43]
   d59ea:	4620      	mov	r0, r4
   d59ec:	f7ff fd36 	bl	d545c <_ZN5RFM698writeRegEhh>
    
  // Set time out 
  start_to = millis()  ;  
	do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis()-start_to < TIME_OUT);
  if (millis()-start_to >= TIME_OUT) return (false);
  for (byte i = 0; CONFIG[i][0] != 255; i++)
   d59f0:	e7f0      	b.n	d59d4 <_ZN5RFM6910initializeEhhh+0x1cc>
   d59f2:	f000 f8ed 	bl	d5bd0 <HAL_Timer_Get_Milli_Seconds>

  setHighPower(_isRFM69HW); //called regardless if it's a RFM69W or RFM69HW
  setMode(RF69_MODE_STANDBY);
  // Set time out 
  start_to = millis() ;
	while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis()-start_to < TIME_OUT); // Wait for ModeReady
   d59f6:	1b40      	subs	r0, r0, r5
   d59f8:	2831      	cmp	r0, #49	; 0x31
   d59fa:	d9d8      	bls.n	d59ae <_ZN5RFM6910initializeEhhh+0x1a6>
   d59fc:	e7dd      	b.n	d59ba <_ZN5RFM6910initializeEhhh+0x1b2>
  if (millis()-start_to >= TIME_OUT) return (false);
  // picking a non-interrupt enabled pin will prevent proper initialization
  // code thanks to @ScruffR - https://community.particle.io/t/how-to-make-rfm69-work-on-photon-solved-new-library-rfm69-particle/26497/93?u=bloukingfisher
  if (!attachInterrupt(_interruptNum, RFM69::isr0, RISING)) return false;
   d59fe:	2300      	movs	r3, #0
   d5a00:	9300      	str	r3, [sp, #0]
   d5a02:	79a0      	ldrb	r0, [r4, #6]
   d5a04:	4906      	ldr	r1, [pc, #24]	; (d5a20 <_ZN5RFM6910initializeEhhh+0x218>)
   d5a06:	f04f 33ff 	mov.w	r3, #4294967295
   d5a0a:	2201      	movs	r2, #1
   d5a0c:	f001 f9ac 	bl	d6d68 <_Z15attachInterrupttPFvvE13InterruptModeah>
   d5a10:	2800      	cmp	r0, #0
   d5a12:	d0d7      	beq.n	d59c4 <_ZN5RFM6910initializeEhhh+0x1bc>

  selfPointer = this;
   d5a14:	4b03      	ldr	r3, [pc, #12]	; (d5a24 <_ZN5RFM6910initializeEhhh+0x21c>)
  _address = nodeID;
   d5a16:	71e6      	strb	r6, [r4, #7]
  if (millis()-start_to >= TIME_OUT) return (false);
  // picking a non-interrupt enabled pin will prevent proper initialization
  // code thanks to @ScruffR - https://community.particle.io/t/how-to-make-rfm69-work-on-photon-solved-new-library-rfm69-particle/26497/93?u=bloukingfisher
  if (!attachInterrupt(_interruptNum, RFM69::isr0, RISING)) return false;

  selfPointer = this;
   d5a18:	601c      	str	r4, [r3, #0]
  _address = nodeID;
  return true;
}
   d5a1a:	b00f      	add	sp, #60	; 0x3c
   d5a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5a1e:	bf00      	nop
   d5a20:	000d53a5 	.word	0x000d53a5
   d5a24:	2003e354 	.word	0x2003e354

000d5a28 <_GLOBAL__sub_I__ZN5RFM694DATAE>:
   d5a28:	f000 b812 	b.w	d5a50 <HAL_Pin_Map>

000d5a2c <_GLOBAL__sub_I__ZN9RFM69_ATC18ACK_RSSI_REQUESTEDE>:
   d5a2c:	f000 b810 	b.w	d5a50 <HAL_Pin_Map>

000d5a30 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5a30:	b508      	push	{r3, lr}
   d5a32:	4b02      	ldr	r3, [pc, #8]	; (d5a3c <netdb_freeaddrinfo+0xc>)
   d5a34:	681b      	ldr	r3, [r3, #0]
   d5a36:	689b      	ldr	r3, [r3, #8]
   d5a38:	9301      	str	r3, [sp, #4]
   d5a3a:	bd08      	pop	{r3, pc}
   d5a3c:	00030268 	.word	0x00030268

000d5a40 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5a40:	b508      	push	{r3, lr}
   d5a42:	4b02      	ldr	r3, [pc, #8]	; (d5a4c <netdb_getaddrinfo+0xc>)
   d5a44:	681b      	ldr	r3, [r3, #0]
   d5a46:	68db      	ldr	r3, [r3, #12]
   d5a48:	9301      	str	r3, [sp, #4]
   d5a4a:	bd08      	pop	{r3, pc}
   d5a4c:	00030268 	.word	0x00030268

000d5a50 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5a50:	b508      	push	{r3, lr}
   d5a52:	4b02      	ldr	r3, [pc, #8]	; (d5a5c <HAL_Pin_Map+0xc>)
   d5a54:	681b      	ldr	r3, [r3, #0]
   d5a56:	681b      	ldr	r3, [r3, #0]
   d5a58:	9301      	str	r3, [sp, #4]
   d5a5a:	bd08      	pop	{r3, pc}
   d5a5c:	0003022c 	.word	0x0003022c

000d5a60 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5a60:	b508      	push	{r3, lr}
   d5a62:	4b02      	ldr	r3, [pc, #8]	; (d5a6c <HAL_Pin_Mode+0xc>)
   d5a64:	681b      	ldr	r3, [r3, #0]
   d5a66:	689b      	ldr	r3, [r3, #8]
   d5a68:	9301      	str	r3, [sp, #4]
   d5a6a:	bd08      	pop	{r3, pc}
   d5a6c:	0003022c 	.word	0x0003022c

000d5a70 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5a70:	b508      	push	{r3, lr}
   d5a72:	4b02      	ldr	r3, [pc, #8]	; (d5a7c <HAL_Get_Pin_Mode+0xc>)
   d5a74:	681b      	ldr	r3, [r3, #0]
   d5a76:	68db      	ldr	r3, [r3, #12]
   d5a78:	9301      	str	r3, [sp, #4]
   d5a7a:	bd08      	pop	{r3, pc}
   d5a7c:	0003022c 	.word	0x0003022c

000d5a80 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5a80:	b508      	push	{r3, lr}
   d5a82:	4b02      	ldr	r3, [pc, #8]	; (d5a8c <HAL_GPIO_Write+0xc>)
   d5a84:	681b      	ldr	r3, [r3, #0]
   d5a86:	691b      	ldr	r3, [r3, #16]
   d5a88:	9301      	str	r3, [sp, #4]
   d5a8a:	bd08      	pop	{r3, pc}
   d5a8c:	0003022c 	.word	0x0003022c

000d5a90 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5a90:	b508      	push	{r3, lr}
   d5a92:	4b02      	ldr	r3, [pc, #8]	; (d5a9c <HAL_GPIO_Read+0xc>)
   d5a94:	681b      	ldr	r3, [r3, #0]
   d5a96:	695b      	ldr	r3, [r3, #20]
   d5a98:	9301      	str	r3, [sp, #4]
   d5a9a:	bd08      	pop	{r3, pc}
   d5a9c:	0003022c 	.word	0x0003022c

000d5aa0 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d5aa0:	b508      	push	{r3, lr}
   d5aa2:	4b02      	ldr	r3, [pc, #8]	; (d5aac <HAL_Interrupts_Attach+0xc>)
   d5aa4:	681b      	ldr	r3, [r3, #0]
   d5aa6:	699b      	ldr	r3, [r3, #24]
   d5aa8:	9301      	str	r3, [sp, #4]
   d5aaa:	bd08      	pop	{r3, pc}
   d5aac:	0003022c 	.word	0x0003022c

000d5ab0 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d5ab0:	b508      	push	{r3, lr}
   d5ab2:	4b02      	ldr	r3, [pc, #8]	; (d5abc <HAL_Interrupts_Detach+0xc>)
   d5ab4:	681b      	ldr	r3, [r3, #0]
   d5ab6:	69db      	ldr	r3, [r3, #28]
   d5ab8:	9301      	str	r3, [sp, #4]
   d5aba:	bd08      	pop	{r3, pc}
   d5abc:	0003022c 	.word	0x0003022c

000d5ac0 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d5ac0:	b508      	push	{r3, lr}
   d5ac2:	4b02      	ldr	r3, [pc, #8]	; (d5acc <HAL_Interrupts_Enable_All+0xc>)
   d5ac4:	681b      	ldr	r3, [r3, #0]
   d5ac6:	6a1b      	ldr	r3, [r3, #32]
   d5ac8:	9301      	str	r3, [sp, #4]
   d5aca:	bd08      	pop	{r3, pc}
   d5acc:	0003022c 	.word	0x0003022c

000d5ad0 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d5ad0:	b508      	push	{r3, lr}
   d5ad2:	4b02      	ldr	r3, [pc, #8]	; (d5adc <HAL_Interrupts_Disable_All+0xc>)
   d5ad4:	681b      	ldr	r3, [r3, #0]
   d5ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5ad8:	9301      	str	r3, [sp, #4]
   d5ada:	bd08      	pop	{r3, pc}
   d5adc:	0003022c 	.word	0x0003022c

000d5ae0 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d5ae0:	b508      	push	{r3, lr}
   d5ae2:	4b02      	ldr	r3, [pc, #8]	; (d5aec <HAL_SPI_Begin+0xc>)
   d5ae4:	681b      	ldr	r3, [r3, #0]
   d5ae6:	681b      	ldr	r3, [r3, #0]
   d5ae8:	9301      	str	r3, [sp, #4]
   d5aea:	bd08      	pop	{r3, pc}
   d5aec:	00030230 	.word	0x00030230

000d5af0 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d5af0:	b508      	push	{r3, lr}
   d5af2:	4b02      	ldr	r3, [pc, #8]	; (d5afc <HAL_SPI_Set_Bit_Order+0xc>)
   d5af4:	681b      	ldr	r3, [r3, #0]
   d5af6:	689b      	ldr	r3, [r3, #8]
   d5af8:	9301      	str	r3, [sp, #4]
   d5afa:	bd08      	pop	{r3, pc}
   d5afc:	00030230 	.word	0x00030230

000d5b00 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d5b00:	b508      	push	{r3, lr}
   d5b02:	4b02      	ldr	r3, [pc, #8]	; (d5b0c <HAL_SPI_Set_Data_Mode+0xc>)
   d5b04:	681b      	ldr	r3, [r3, #0]
   d5b06:	68db      	ldr	r3, [r3, #12]
   d5b08:	9301      	str	r3, [sp, #4]
   d5b0a:	bd08      	pop	{r3, pc}
   d5b0c:	00030230 	.word	0x00030230

000d5b10 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d5b10:	b508      	push	{r3, lr}
   d5b12:	4b02      	ldr	r3, [pc, #8]	; (d5b1c <HAL_SPI_Set_Clock_Divider+0xc>)
   d5b14:	681b      	ldr	r3, [r3, #0]
   d5b16:	691b      	ldr	r3, [r3, #16]
   d5b18:	9301      	str	r3, [sp, #4]
   d5b1a:	bd08      	pop	{r3, pc}
   d5b1c:	00030230 	.word	0x00030230

000d5b20 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d5b20:	b508      	push	{r3, lr}
   d5b22:	4b02      	ldr	r3, [pc, #8]	; (d5b2c <HAL_SPI_Send_Receive_Data+0xc>)
   d5b24:	681b      	ldr	r3, [r3, #0]
   d5b26:	695b      	ldr	r3, [r3, #20]
   d5b28:	9301      	str	r3, [sp, #4]
   d5b2a:	bd08      	pop	{r3, pc}
   d5b2c:	00030230 	.word	0x00030230

000d5b30 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5b30:	b508      	push	{r3, lr}
   d5b32:	4b02      	ldr	r3, [pc, #8]	; (d5b3c <HAL_SPI_Init+0xc>)
   d5b34:	681b      	ldr	r3, [r3, #0]
   d5b36:	69db      	ldr	r3, [r3, #28]
   d5b38:	9301      	str	r3, [sp, #4]
   d5b3a:	bd08      	pop	{r3, pc}
   d5b3c:	00030230 	.word	0x00030230

000d5b40 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5b40:	b508      	push	{r3, lr}
   d5b42:	4b02      	ldr	r3, [pc, #8]	; (d5b4c <HAL_SPI_Is_Enabled+0xc>)
   d5b44:	681b      	ldr	r3, [r3, #0]
   d5b46:	6a1b      	ldr	r3, [r3, #32]
   d5b48:	9301      	str	r3, [sp, #4]
   d5b4a:	bd08      	pop	{r3, pc}
   d5b4c:	00030230 	.word	0x00030230

000d5b50 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d5b50:	b508      	push	{r3, lr}
   d5b52:	4b02      	ldr	r3, [pc, #8]	; (d5b5c <HAL_SPI_Info+0xc>)
   d5b54:	681b      	ldr	r3, [r3, #0]
   d5b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5b58:	9301      	str	r3, [sp, #4]
   d5b5a:	bd08      	pop	{r3, pc}
   d5b5c:	00030230 	.word	0x00030230

000d5b60 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d5b60:	b508      	push	{r3, lr}
   d5b62:	4b02      	ldr	r3, [pc, #8]	; (d5b6c <HAL_SPI_DMA_Transfer+0xc>)
   d5b64:	681b      	ldr	r3, [r3, #0]
   d5b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5b68:	9301      	str	r3, [sp, #4]
   d5b6a:	bd08      	pop	{r3, pc}
   d5b6c:	00030230 	.word	0x00030230

000d5b70 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d5b70:	b508      	push	{r3, lr}
   d5b72:	4b02      	ldr	r3, [pc, #8]	; (d5b7c <HAL_SPI_DMA_Transfer_Status+0xc>)
   d5b74:	681b      	ldr	r3, [r3, #0]
   d5b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5b78:	9301      	str	r3, [sp, #4]
   d5b7a:	bd08      	pop	{r3, pc}
   d5b7c:	00030230 	.word	0x00030230

000d5b80 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5b80:	b508      	push	{r3, lr}
   d5b82:	4b02      	ldr	r3, [pc, #8]	; (d5b8c <HAL_SPI_Set_Settings+0xc>)
   d5b84:	681b      	ldr	r3, [r3, #0]
   d5b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5b88:	9301      	str	r3, [sp, #4]
   d5b8a:	bd08      	pop	{r3, pc}
   d5b8c:	00030230 	.word	0x00030230

000d5b90 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d5b90:	b508      	push	{r3, lr}
   d5b92:	4b02      	ldr	r3, [pc, #8]	; (d5b9c <HAL_SPI_Acquire+0xc>)
   d5b94:	681b      	ldr	r3, [r3, #0]
   d5b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5b98:	9301      	str	r3, [sp, #4]
   d5b9a:	bd08      	pop	{r3, pc}
   d5b9c:	00030230 	.word	0x00030230

000d5ba0 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d5ba0:	b508      	push	{r3, lr}
   d5ba2:	4b02      	ldr	r3, [pc, #8]	; (d5bac <HAL_SPI_Release+0xc>)
   d5ba4:	681b      	ldr	r3, [r3, #0]
   d5ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5ba8:	9301      	str	r3, [sp, #4]
   d5baa:	bd08      	pop	{r3, pc}
   d5bac:	00030230 	.word	0x00030230

000d5bb0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5bb0:	b508      	push	{r3, lr}
   d5bb2:	4b02      	ldr	r3, [pc, #8]	; (d5bbc <HAL_RNG_GetRandomNumber+0xc>)
   d5bb4:	681b      	ldr	r3, [r3, #0]
   d5bb6:	685b      	ldr	r3, [r3, #4]
   d5bb8:	9301      	str	r3, [sp, #4]
   d5bba:	bd08      	pop	{r3, pc}
   d5bbc:	00030218 	.word	0x00030218

000d5bc0 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d5bc0:	b508      	push	{r3, lr}
   d5bc2:	4b02      	ldr	r3, [pc, #8]	; (d5bcc <HAL_Timer_Get_Micro_Seconds+0xc>)
   d5bc4:	681b      	ldr	r3, [r3, #0]
   d5bc6:	691b      	ldr	r3, [r3, #16]
   d5bc8:	9301      	str	r3, [sp, #4]
   d5bca:	bd08      	pop	{r3, pc}
   d5bcc:	00030218 	.word	0x00030218

000d5bd0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5bd0:	b508      	push	{r3, lr}
   d5bd2:	4b02      	ldr	r3, [pc, #8]	; (d5bdc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5bd4:	681b      	ldr	r3, [r3, #0]
   d5bd6:	695b      	ldr	r3, [r3, #20]
   d5bd8:	9301      	str	r3, [sp, #4]
   d5bda:	bd08      	pop	{r3, pc}
   d5bdc:	00030218 	.word	0x00030218

000d5be0 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d5be0:	b508      	push	{r3, lr}
   d5be2:	4b02      	ldr	r3, [pc, #8]	; (d5bec <HAL_RTC_Get_UnixTime+0xc>)
   d5be4:	681b      	ldr	r3, [r3, #0]
   d5be6:	69db      	ldr	r3, [r3, #28]
   d5be8:	9301      	str	r3, [sp, #4]
   d5bea:	bd08      	pop	{r3, pc}
   d5bec:	00030218 	.word	0x00030218

000d5bf0 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d5bf0:	b508      	push	{r3, lr}
   d5bf2:	4b02      	ldr	r3, [pc, #8]	; (d5bfc <HAL_RTC_Time_Is_Valid+0xc>)
   d5bf4:	681b      	ldr	r3, [r3, #0]
   d5bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5bf8:	9301      	str	r3, [sp, #4]
   d5bfa:	bd08      	pop	{r3, pc}
   d5bfc:	00030218 	.word	0x00030218

000d5c00 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5c00:	b508      	push	{r3, lr}
   d5c02:	4b02      	ldr	r3, [pc, #8]	; (d5c0c <os_thread_is_current+0xc>)
   d5c04:	681b      	ldr	r3, [r3, #0]
   d5c06:	689b      	ldr	r3, [r3, #8]
   d5c08:	9301      	str	r3, [sp, #4]
   d5c0a:	bd08      	pop	{r3, pc}
   d5c0c:	00030248 	.word	0x00030248

000d5c10 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d5c10:	b508      	push	{r3, lr}
   d5c12:	4b02      	ldr	r3, [pc, #8]	; (d5c1c <os_thread_yield+0xc>)
   d5c14:	681b      	ldr	r3, [r3, #0]
   d5c16:	68db      	ldr	r3, [r3, #12]
   d5c18:	9301      	str	r3, [sp, #4]
   d5c1a:	bd08      	pop	{r3, pc}
   d5c1c:	00030248 	.word	0x00030248

000d5c20 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5c20:	b508      	push	{r3, lr}
   d5c22:	4b02      	ldr	r3, [pc, #8]	; (d5c2c <os_thread_join+0xc>)
   d5c24:	681b      	ldr	r3, [r3, #0]
   d5c26:	691b      	ldr	r3, [r3, #16]
   d5c28:	9301      	str	r3, [sp, #4]
   d5c2a:	bd08      	pop	{r3, pc}
   d5c2c:	00030248 	.word	0x00030248

000d5c30 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5c30:	b508      	push	{r3, lr}
   d5c32:	4b02      	ldr	r3, [pc, #8]	; (d5c3c <os_thread_cleanup+0xc>)
   d5c34:	681b      	ldr	r3, [r3, #0]
   d5c36:	695b      	ldr	r3, [r3, #20]
   d5c38:	9301      	str	r3, [sp, #4]
   d5c3a:	bd08      	pop	{r3, pc}
   d5c3c:	00030248 	.word	0x00030248

000d5c40 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d5c40:	b508      	push	{r3, lr}
   d5c42:	4b02      	ldr	r3, [pc, #8]	; (d5c4c <os_thread_scheduling+0xc>)
   d5c44:	681b      	ldr	r3, [r3, #0]
   d5c46:	69db      	ldr	r3, [r3, #28]
   d5c48:	9301      	str	r3, [sp, #4]
   d5c4a:	bd08      	pop	{r3, pc}
   d5c4c:	00030248 	.word	0x00030248

000d5c50 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d5c50:	b508      	push	{r3, lr}
   d5c52:	4b02      	ldr	r3, [pc, #8]	; (d5c5c <os_timer_create+0xc>)
   d5c54:	681b      	ldr	r3, [r3, #0]
   d5c56:	6a1b      	ldr	r3, [r3, #32]
   d5c58:	9301      	str	r3, [sp, #4]
   d5c5a:	bd08      	pop	{r3, pc}
   d5c5c:	00030248 	.word	0x00030248

000d5c60 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d5c60:	b508      	push	{r3, lr}
   d5c62:	4b02      	ldr	r3, [pc, #8]	; (d5c6c <os_timer_destroy+0xc>)
   d5c64:	681b      	ldr	r3, [r3, #0]
   d5c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5c68:	9301      	str	r3, [sp, #4]
   d5c6a:	bd08      	pop	{r3, pc}
   d5c6c:	00030248 	.word	0x00030248

000d5c70 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d5c70:	b508      	push	{r3, lr}
   d5c72:	4b02      	ldr	r3, [pc, #8]	; (d5c7c <os_timer_get_id+0xc>)
   d5c74:	681b      	ldr	r3, [r3, #0]
   d5c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5c78:	9301      	str	r3, [sp, #4]
   d5c7a:	bd08      	pop	{r3, pc}
   d5c7c:	00030248 	.word	0x00030248

000d5c80 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d5c80:	b508      	push	{r3, lr}
   d5c82:	4b02      	ldr	r3, [pc, #8]	; (d5c8c <os_timer_change+0xc>)
   d5c84:	681b      	ldr	r3, [r3, #0]
   d5c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5c88:	9301      	str	r3, [sp, #4]
   d5c8a:	bd08      	pop	{r3, pc}
   d5c8c:	00030248 	.word	0x00030248

000d5c90 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5c90:	b508      	push	{r3, lr}
   d5c92:	4b02      	ldr	r3, [pc, #8]	; (d5c9c <os_mutex_recursive_create+0xc>)
   d5c94:	681b      	ldr	r3, [r3, #0]
   d5c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5c98:	9301      	str	r3, [sp, #4]
   d5c9a:	bd08      	pop	{r3, pc}
   d5c9c:	00030248 	.word	0x00030248

000d5ca0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5ca0:	b508      	push	{r3, lr}
   d5ca2:	4b02      	ldr	r3, [pc, #8]	; (d5cac <os_mutex_recursive_destroy+0xc>)
   d5ca4:	681b      	ldr	r3, [r3, #0]
   d5ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5ca8:	9301      	str	r3, [sp, #4]
   d5caa:	bd08      	pop	{r3, pc}
   d5cac:	00030248 	.word	0x00030248

000d5cb0 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d5cb0:	b508      	push	{r3, lr}
   d5cb2:	4b02      	ldr	r3, [pc, #8]	; (d5cbc <os_timer_set_id+0xc>)
   d5cb4:	681b      	ldr	r3, [r3, #0]
   d5cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d5cb8:	9301      	str	r3, [sp, #4]
   d5cba:	bd08      	pop	{r3, pc}
   d5cbc:	00030248 	.word	0x00030248

000d5cc0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5cc0:	b508      	push	{r3, lr}
   d5cc2:	4b02      	ldr	r3, [pc, #8]	; (d5ccc <inet_inet_ntop+0xc>)
   d5cc4:	681b      	ldr	r3, [r3, #0]
   d5cc6:	695b      	ldr	r3, [r3, #20]
   d5cc8:	9301      	str	r3, [sp, #4]
   d5cca:	bd08      	pop	{r3, pc}
   d5ccc:	00030264 	.word	0x00030264

000d5cd0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5cd0:	b508      	push	{r3, lr}
   d5cd2:	4b02      	ldr	r3, [pc, #8]	; (d5cdc <HAL_USART_Init+0xc>)
   d5cd4:	681b      	ldr	r3, [r3, #0]
   d5cd6:	681b      	ldr	r3, [r3, #0]
   d5cd8:	9301      	str	r3, [sp, #4]
   d5cda:	bd08      	pop	{r3, pc}
   d5cdc:	0003023c 	.word	0x0003023c

000d5ce0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5ce0:	b508      	push	{r3, lr}
   d5ce2:	4b02      	ldr	r3, [pc, #8]	; (d5cec <HAL_USART_Write_Data+0xc>)
   d5ce4:	681b      	ldr	r3, [r3, #0]
   d5ce6:	68db      	ldr	r3, [r3, #12]
   d5ce8:	9301      	str	r3, [sp, #4]
   d5cea:	bd08      	pop	{r3, pc}
   d5cec:	0003023c 	.word	0x0003023c

000d5cf0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5cf0:	b508      	push	{r3, lr}
   d5cf2:	4b02      	ldr	r3, [pc, #8]	; (d5cfc <HAL_USART_Available_Data+0xc>)
   d5cf4:	681b      	ldr	r3, [r3, #0]
   d5cf6:	691b      	ldr	r3, [r3, #16]
   d5cf8:	9301      	str	r3, [sp, #4]
   d5cfa:	bd08      	pop	{r3, pc}
   d5cfc:	0003023c 	.word	0x0003023c

000d5d00 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5d00:	b508      	push	{r3, lr}
   d5d02:	4b02      	ldr	r3, [pc, #8]	; (d5d0c <HAL_USART_Read_Data+0xc>)
   d5d04:	681b      	ldr	r3, [r3, #0]
   d5d06:	695b      	ldr	r3, [r3, #20]
   d5d08:	9301      	str	r3, [sp, #4]
   d5d0a:	bd08      	pop	{r3, pc}
   d5d0c:	0003023c 	.word	0x0003023c

000d5d10 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5d10:	b508      	push	{r3, lr}
   d5d12:	4b02      	ldr	r3, [pc, #8]	; (d5d1c <HAL_USART_Peek_Data+0xc>)
   d5d14:	681b      	ldr	r3, [r3, #0]
   d5d16:	699b      	ldr	r3, [r3, #24]
   d5d18:	9301      	str	r3, [sp, #4]
   d5d1a:	bd08      	pop	{r3, pc}
   d5d1c:	0003023c 	.word	0x0003023c

000d5d20 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5d20:	b508      	push	{r3, lr}
   d5d22:	4b02      	ldr	r3, [pc, #8]	; (d5d2c <HAL_USART_Flush_Data+0xc>)
   d5d24:	681b      	ldr	r3, [r3, #0]
   d5d26:	69db      	ldr	r3, [r3, #28]
   d5d28:	9301      	str	r3, [sp, #4]
   d5d2a:	bd08      	pop	{r3, pc}
   d5d2c:	0003023c 	.word	0x0003023c

000d5d30 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5d30:	b508      	push	{r3, lr}
   d5d32:	4b02      	ldr	r3, [pc, #8]	; (d5d3c <HAL_USART_Is_Enabled+0xc>)
   d5d34:	681b      	ldr	r3, [r3, #0]
   d5d36:	6a1b      	ldr	r3, [r3, #32]
   d5d38:	9301      	str	r3, [sp, #4]
   d5d3a:	bd08      	pop	{r3, pc}
   d5d3c:	0003023c 	.word	0x0003023c

000d5d40 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5d40:	b508      	push	{r3, lr}
   d5d42:	4b02      	ldr	r3, [pc, #8]	; (d5d4c <HAL_USART_Available_Data_For_Write+0xc>)
   d5d44:	681b      	ldr	r3, [r3, #0]
   d5d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5d48:	9301      	str	r3, [sp, #4]
   d5d4a:	bd08      	pop	{r3, pc}
   d5d4c:	0003023c 	.word	0x0003023c

000d5d50 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d5d50:	b508      	push	{r3, lr}
   d5d52:	4b02      	ldr	r3, [pc, #8]	; (d5d5c <HAL_I2C_Begin_Transmission+0xc>)
   d5d54:	681b      	ldr	r3, [r3, #0]
   d5d56:	699b      	ldr	r3, [r3, #24]
   d5d58:	9301      	str	r3, [sp, #4]
   d5d5a:	bd08      	pop	{r3, pc}
   d5d5c:	00030228 	.word	0x00030228

000d5d60 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5d60:	b508      	push	{r3, lr}
   d5d62:	4b02      	ldr	r3, [pc, #8]	; (d5d6c <HAL_I2C_End_Transmission+0xc>)
   d5d64:	681b      	ldr	r3, [r3, #0]
   d5d66:	69db      	ldr	r3, [r3, #28]
   d5d68:	9301      	str	r3, [sp, #4]
   d5d6a:	bd08      	pop	{r3, pc}
   d5d6c:	00030228 	.word	0x00030228

000d5d70 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5d70:	b508      	push	{r3, lr}
   d5d72:	4b02      	ldr	r3, [pc, #8]	; (d5d7c <HAL_I2C_Write_Data+0xc>)
   d5d74:	681b      	ldr	r3, [r3, #0]
   d5d76:	6a1b      	ldr	r3, [r3, #32]
   d5d78:	9301      	str	r3, [sp, #4]
   d5d7a:	bd08      	pop	{r3, pc}
   d5d7c:	00030228 	.word	0x00030228

000d5d80 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5d80:	b508      	push	{r3, lr}
   d5d82:	4b02      	ldr	r3, [pc, #8]	; (d5d8c <HAL_I2C_Available_Data+0xc>)
   d5d84:	681b      	ldr	r3, [r3, #0]
   d5d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5d88:	9301      	str	r3, [sp, #4]
   d5d8a:	bd08      	pop	{r3, pc}
   d5d8c:	00030228 	.word	0x00030228

000d5d90 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5d90:	b508      	push	{r3, lr}
   d5d92:	4b02      	ldr	r3, [pc, #8]	; (d5d9c <HAL_I2C_Read_Data+0xc>)
   d5d94:	681b      	ldr	r3, [r3, #0]
   d5d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5d98:	9301      	str	r3, [sp, #4]
   d5d9a:	bd08      	pop	{r3, pc}
   d5d9c:	00030228 	.word	0x00030228

000d5da0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5da0:	b508      	push	{r3, lr}
   d5da2:	4b02      	ldr	r3, [pc, #8]	; (d5dac <HAL_I2C_Peek_Data+0xc>)
   d5da4:	681b      	ldr	r3, [r3, #0]
   d5da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5da8:	9301      	str	r3, [sp, #4]
   d5daa:	bd08      	pop	{r3, pc}
   d5dac:	00030228 	.word	0x00030228

000d5db0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5db0:	b508      	push	{r3, lr}
   d5db2:	4b02      	ldr	r3, [pc, #8]	; (d5dbc <HAL_I2C_Flush_Data+0xc>)
   d5db4:	681b      	ldr	r3, [r3, #0]
   d5db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5db8:	9301      	str	r3, [sp, #4]
   d5dba:	bd08      	pop	{r3, pc}
   d5dbc:	00030228 	.word	0x00030228

000d5dc0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5dc0:	b508      	push	{r3, lr}
   d5dc2:	4b02      	ldr	r3, [pc, #8]	; (d5dcc <HAL_I2C_Is_Enabled+0xc>)
   d5dc4:	681b      	ldr	r3, [r3, #0]
   d5dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5dc8:	9301      	str	r3, [sp, #4]
   d5dca:	bd08      	pop	{r3, pc}
   d5dcc:	00030228 	.word	0x00030228

000d5dd0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5dd0:	b508      	push	{r3, lr}
   d5dd2:	4b02      	ldr	r3, [pc, #8]	; (d5ddc <HAL_I2C_Init+0xc>)
   d5dd4:	681b      	ldr	r3, [r3, #0]
   d5dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5dd8:	9301      	str	r3, [sp, #4]
   d5dda:	bd08      	pop	{r3, pc}
   d5ddc:	00030228 	.word	0x00030228

000d5de0 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d5de0:	b508      	push	{r3, lr}
   d5de2:	4b02      	ldr	r3, [pc, #8]	; (d5dec <HAL_I2C_Acquire+0xc>)
   d5de4:	681b      	ldr	r3, [r3, #0]
   d5de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5de8:	9301      	str	r3, [sp, #4]
   d5dea:	bd08      	pop	{r3, pc}
   d5dec:	00030228 	.word	0x00030228

000d5df0 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d5df0:	b508      	push	{r3, lr}
   d5df2:	4b02      	ldr	r3, [pc, #8]	; (d5dfc <HAL_I2C_Release+0xc>)
   d5df4:	681b      	ldr	r3, [r3, #0]
   d5df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5df8:	9301      	str	r3, [sp, #4]
   d5dfa:	bd08      	pop	{r3, pc}
   d5dfc:	00030228 	.word	0x00030228

000d5e00 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d5e00:	b508      	push	{r3, lr}
   d5e02:	4b02      	ldr	r3, [pc, #8]	; (d5e0c <HAL_I2C_Request_Data_Ex+0xc>)
   d5e04:	681b      	ldr	r3, [r3, #0]
   d5e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5e08:	9301      	str	r3, [sp, #4]
   d5e0a:	bd08      	pop	{r3, pc}
   d5e0c:	00030228 	.word	0x00030228

000d5e10 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d5e10:	b508      	push	{r3, lr}
   d5e12:	4b02      	ldr	r3, [pc, #8]	; (d5e1c <cellular_signal+0xc>)
   d5e14:	681b      	ldr	r3, [r3, #0]
   d5e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5e18:	9301      	str	r3, [sp, #4]
   d5e1a:	bd08      	pop	{r3, pc}
   d5e1c:	00030274 	.word	0x00030274

000d5e20 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5e20:	b508      	push	{r3, lr}
   d5e22:	4b02      	ldr	r3, [pc, #8]	; (d5e2c <HAL_USB_USART_Init+0xc>)
   d5e24:	681b      	ldr	r3, [r3, #0]
   d5e26:	681b      	ldr	r3, [r3, #0]
   d5e28:	9301      	str	r3, [sp, #4]
   d5e2a:	bd08      	pop	{r3, pc}
   d5e2c:	0003024c 	.word	0x0003024c

000d5e30 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5e30:	b508      	push	{r3, lr}
   d5e32:	4b02      	ldr	r3, [pc, #8]	; (d5e3c <HAL_USB_USART_Begin+0xc>)
   d5e34:	681b      	ldr	r3, [r3, #0]
   d5e36:	685b      	ldr	r3, [r3, #4]
   d5e38:	9301      	str	r3, [sp, #4]
   d5e3a:	bd08      	pop	{r3, pc}
   d5e3c:	0003024c 	.word	0x0003024c

000d5e40 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5e40:	b508      	push	{r3, lr}
   d5e42:	4b02      	ldr	r3, [pc, #8]	; (d5e4c <HAL_USB_USART_Available_Data+0xc>)
   d5e44:	681b      	ldr	r3, [r3, #0]
   d5e46:	691b      	ldr	r3, [r3, #16]
   d5e48:	9301      	str	r3, [sp, #4]
   d5e4a:	bd08      	pop	{r3, pc}
   d5e4c:	0003024c 	.word	0x0003024c

000d5e50 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5e50:	b508      	push	{r3, lr}
   d5e52:	4b02      	ldr	r3, [pc, #8]	; (d5e5c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5e54:	681b      	ldr	r3, [r3, #0]
   d5e56:	695b      	ldr	r3, [r3, #20]
   d5e58:	9301      	str	r3, [sp, #4]
   d5e5a:	bd08      	pop	{r3, pc}
   d5e5c:	0003024c 	.word	0x0003024c

000d5e60 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5e60:	b508      	push	{r3, lr}
   d5e62:	4b02      	ldr	r3, [pc, #8]	; (d5e6c <HAL_USB_USART_Receive_Data+0xc>)
   d5e64:	681b      	ldr	r3, [r3, #0]
   d5e66:	699b      	ldr	r3, [r3, #24]
   d5e68:	9301      	str	r3, [sp, #4]
   d5e6a:	bd08      	pop	{r3, pc}
   d5e6c:	0003024c 	.word	0x0003024c

000d5e70 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5e70:	b508      	push	{r3, lr}
   d5e72:	4b02      	ldr	r3, [pc, #8]	; (d5e7c <HAL_USB_USART_Send_Data+0xc>)
   d5e74:	681b      	ldr	r3, [r3, #0]
   d5e76:	69db      	ldr	r3, [r3, #28]
   d5e78:	9301      	str	r3, [sp, #4]
   d5e7a:	bd08      	pop	{r3, pc}
   d5e7c:	0003024c 	.word	0x0003024c

000d5e80 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5e80:	b508      	push	{r3, lr}
   d5e82:	4b02      	ldr	r3, [pc, #8]	; (d5e8c <HAL_USB_USART_Flush_Data+0xc>)
   d5e84:	681b      	ldr	r3, [r3, #0]
   d5e86:	6a1b      	ldr	r3, [r3, #32]
   d5e88:	9301      	str	r3, [sp, #4]
   d5e8a:	bd08      	pop	{r3, pc}
   d5e8c:	0003024c 	.word	0x0003024c

000d5e90 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5e90:	b508      	push	{r3, lr}
   d5e92:	4b02      	ldr	r3, [pc, #8]	; (d5e9c <system_mode+0xc>)
   d5e94:	681b      	ldr	r3, [r3, #0]
   d5e96:	681b      	ldr	r3, [r3, #0]
   d5e98:	9301      	str	r3, [sp, #4]
   d5e9a:	bd08      	pop	{r3, pc}
   d5e9c:	00030220 	.word	0x00030220

000d5ea0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5ea0:	b508      	push	{r3, lr}
   d5ea2:	4b02      	ldr	r3, [pc, #8]	; (d5eac <set_system_mode+0xc>)
   d5ea4:	681b      	ldr	r3, [r3, #0]
   d5ea6:	685b      	ldr	r3, [r3, #4]
   d5ea8:	9301      	str	r3, [sp, #4]
   d5eaa:	bd08      	pop	{r3, pc}
   d5eac:	00030220 	.word	0x00030220

000d5eb0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5eb0:	b508      	push	{r3, lr}
   d5eb2:	4b02      	ldr	r3, [pc, #8]	; (d5ebc <system_delay_ms+0xc>)
   d5eb4:	681b      	ldr	r3, [r3, #0]
   d5eb6:	695b      	ldr	r3, [r3, #20]
   d5eb8:	9301      	str	r3, [sp, #4]
   d5eba:	bd08      	pop	{r3, pc}
   d5ebc:	00030220 	.word	0x00030220

000d5ec0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5ec0:	b508      	push	{r3, lr}
   d5ec2:	4b02      	ldr	r3, [pc, #8]	; (d5ecc <system_thread_set_state+0xc>)
   d5ec4:	681b      	ldr	r3, [r3, #0]
   d5ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5ec8:	9301      	str	r3, [sp, #4]
   d5eca:	bd08      	pop	{r3, pc}
   d5ecc:	00030220 	.word	0x00030220

000d5ed0 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5ed0:	b508      	push	{r3, lr}
   d5ed2:	4b02      	ldr	r3, [pc, #8]	; (d5edc <system_thread_get_state+0xc>)
   d5ed4:	681b      	ldr	r3, [r3, #0]
   d5ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5ed8:	9301      	str	r3, [sp, #4]
   d5eda:	bd08      	pop	{r3, pc}
   d5edc:	00030220 	.word	0x00030220

000d5ee0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5ee0:	b508      	push	{r3, lr}
   d5ee2:	4b03      	ldr	r3, [pc, #12]	; (d5ef0 <system_ctrl_set_app_request_handler+0x10>)
   d5ee4:	681b      	ldr	r3, [r3, #0]
   d5ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5eea:	9301      	str	r3, [sp, #4]
   d5eec:	bd08      	pop	{r3, pc}
   d5eee:	0000      	.short	0x0000
   d5ef0:	00030220 	.word	0x00030220

000d5ef4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5ef4:	b508      	push	{r3, lr}
   d5ef6:	4b03      	ldr	r3, [pc, #12]	; (d5f04 <system_ctrl_set_result+0x10>)
   d5ef8:	681b      	ldr	r3, [r3, #0]
   d5efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5efe:	9301      	str	r3, [sp, #4]
   d5f00:	bd08      	pop	{r3, pc}
   d5f02:	0000      	.short	0x0000
   d5f04:	00030220 	.word	0x00030220

000d5f08 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5f08:	b508      	push	{r3, lr}
   d5f0a:	4b02      	ldr	r3, [pc, #8]	; (d5f14 <network_connect+0xc>)
   d5f0c:	681b      	ldr	r3, [r3, #0]
   d5f0e:	685b      	ldr	r3, [r3, #4]
   d5f10:	9301      	str	r3, [sp, #4]
   d5f12:	bd08      	pop	{r3, pc}
   d5f14:	00030240 	.word	0x00030240

000d5f18 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5f18:	b508      	push	{r3, lr}
   d5f1a:	4b02      	ldr	r3, [pc, #8]	; (d5f24 <network_connecting+0xc>)
   d5f1c:	681b      	ldr	r3, [r3, #0]
   d5f1e:	689b      	ldr	r3, [r3, #8]
   d5f20:	9301      	str	r3, [sp, #4]
   d5f22:	bd08      	pop	{r3, pc}
   d5f24:	00030240 	.word	0x00030240

000d5f28 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5f28:	b508      	push	{r3, lr}
   d5f2a:	4b02      	ldr	r3, [pc, #8]	; (d5f34 <network_disconnect+0xc>)
   d5f2c:	681b      	ldr	r3, [r3, #0]
   d5f2e:	68db      	ldr	r3, [r3, #12]
   d5f30:	9301      	str	r3, [sp, #4]
   d5f32:	bd08      	pop	{r3, pc}
   d5f34:	00030240 	.word	0x00030240

000d5f38 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5f38:	b508      	push	{r3, lr}
   d5f3a:	4b02      	ldr	r3, [pc, #8]	; (d5f44 <network_ready+0xc>)
   d5f3c:	681b      	ldr	r3, [r3, #0]
   d5f3e:	691b      	ldr	r3, [r3, #16]
   d5f40:	9301      	str	r3, [sp, #4]
   d5f42:	bd08      	pop	{r3, pc}
   d5f44:	00030240 	.word	0x00030240

000d5f48 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5f48:	b508      	push	{r3, lr}
   d5f4a:	4b02      	ldr	r3, [pc, #8]	; (d5f54 <network_on+0xc>)
   d5f4c:	681b      	ldr	r3, [r3, #0]
   d5f4e:	695b      	ldr	r3, [r3, #20]
   d5f50:	9301      	str	r3, [sp, #4]
   d5f52:	bd08      	pop	{r3, pc}
   d5f54:	00030240 	.word	0x00030240

000d5f58 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5f58:	b508      	push	{r3, lr}
   d5f5a:	4b02      	ldr	r3, [pc, #8]	; (d5f64 <network_off+0xc>)
   d5f5c:	681b      	ldr	r3, [r3, #0]
   d5f5e:	699b      	ldr	r3, [r3, #24]
   d5f60:	9301      	str	r3, [sp, #4]
   d5f62:	bd08      	pop	{r3, pc}
   d5f64:	00030240 	.word	0x00030240

000d5f68 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5f68:	b508      	push	{r3, lr}
   d5f6a:	4b02      	ldr	r3, [pc, #8]	; (d5f74 <network_listen+0xc>)
   d5f6c:	681b      	ldr	r3, [r3, #0]
   d5f6e:	69db      	ldr	r3, [r3, #28]
   d5f70:	9301      	str	r3, [sp, #4]
   d5f72:	bd08      	pop	{r3, pc}
   d5f74:	00030240 	.word	0x00030240

000d5f78 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5f78:	b508      	push	{r3, lr}
   d5f7a:	4b02      	ldr	r3, [pc, #8]	; (d5f84 <network_listening+0xc>)
   d5f7c:	681b      	ldr	r3, [r3, #0]
   d5f7e:	6a1b      	ldr	r3, [r3, #32]
   d5f80:	9301      	str	r3, [sp, #4]
   d5f82:	bd08      	pop	{r3, pc}
   d5f84:	00030240 	.word	0x00030240

000d5f88 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5f88:	b508      	push	{r3, lr}
   d5f8a:	4b02      	ldr	r3, [pc, #8]	; (d5f94 <network_set_listen_timeout+0xc>)
   d5f8c:	681b      	ldr	r3, [r3, #0]
   d5f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5f90:	9301      	str	r3, [sp, #4]
   d5f92:	bd08      	pop	{r3, pc}
   d5f94:	00030240 	.word	0x00030240

000d5f98 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5f98:	b508      	push	{r3, lr}
   d5f9a:	4b02      	ldr	r3, [pc, #8]	; (d5fa4 <network_get_listen_timeout+0xc>)
   d5f9c:	681b      	ldr	r3, [r3, #0]
   d5f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5fa0:	9301      	str	r3, [sp, #4]
   d5fa2:	bd08      	pop	{r3, pc}
   d5fa4:	00030240 	.word	0x00030240

000d5fa8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5fa8:	b508      	push	{r3, lr}
   d5faa:	4b02      	ldr	r3, [pc, #8]	; (d5fb4 <spark_process+0xc>)
   d5fac:	681b      	ldr	r3, [r3, #0]
   d5fae:	689b      	ldr	r3, [r3, #8]
   d5fb0:	9301      	str	r3, [sp, #4]
   d5fb2:	bd08      	pop	{r3, pc}
   d5fb4:	00030244 	.word	0x00030244

000d5fb8 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5fb8:	b508      	push	{r3, lr}
   d5fba:	4b02      	ldr	r3, [pc, #8]	; (d5fc4 <spark_cloud_flag_connected+0xc>)
   d5fbc:	681b      	ldr	r3, [r3, #0]
   d5fbe:	695b      	ldr	r3, [r3, #20]
   d5fc0:	9301      	str	r3, [sp, #4]
   d5fc2:	bd08      	pop	{r3, pc}
   d5fc4:	00030244 	.word	0x00030244

000d5fc8 <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d5fc8:	b508      	push	{r3, lr}
   d5fca:	4b02      	ldr	r3, [pc, #8]	; (d5fd4 <spark_sync_time+0xc>)
   d5fcc:	681b      	ldr	r3, [r3, #0]
   d5fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5fd0:	9301      	str	r3, [sp, #4]
   d5fd2:	bd08      	pop	{r3, pc}
   d5fd4:	00030244 	.word	0x00030244

000d5fd8 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5fd8:	b508      	push	{r3, lr}
   d5fda:	4b02      	ldr	r3, [pc, #8]	; (d5fe4 <spark_sync_time_pending+0xc>)
   d5fdc:	681b      	ldr	r3, [r3, #0]
   d5fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5fe0:	9301      	str	r3, [sp, #4]
   d5fe2:	bd08      	pop	{r3, pc}
   d5fe4:	00030244 	.word	0x00030244

000d5fe8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5fe8:	b508      	push	{r3, lr}
   d5fea:	4b02      	ldr	r3, [pc, #8]	; (d5ff4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5fec:	681b      	ldr	r3, [r3, #0]
   d5fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5ff0:	9301      	str	r3, [sp, #4]
   d5ff2:	bd08      	pop	{r3, pc}
   d5ff4:	00030244 	.word	0x00030244

000d5ff8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5ff8:	b508      	push	{r3, lr}
   d5ffa:	4b02      	ldr	r3, [pc, #8]	; (d6004 <malloc+0xc>)
   d5ffc:	681b      	ldr	r3, [r3, #0]
   d5ffe:	681b      	ldr	r3, [r3, #0]
   d6000:	9301      	str	r3, [sp, #4]
   d6002:	bd08      	pop	{r3, pc}
   d6004:	0003021c 	.word	0x0003021c

000d6008 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6008:	b508      	push	{r3, lr}
   d600a:	4b02      	ldr	r3, [pc, #8]	; (d6014 <free+0xc>)
   d600c:	681b      	ldr	r3, [r3, #0]
   d600e:	685b      	ldr	r3, [r3, #4]
   d6010:	9301      	str	r3, [sp, #4]
   d6012:	bd08      	pop	{r3, pc}
   d6014:	0003021c 	.word	0x0003021c

000d6018 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6018:	b508      	push	{r3, lr}
   d601a:	4b02      	ldr	r3, [pc, #8]	; (d6024 <realloc+0xc>)
   d601c:	681b      	ldr	r3, [r3, #0]
   d601e:	689b      	ldr	r3, [r3, #8]
   d6020:	9301      	str	r3, [sp, #4]
   d6022:	bd08      	pop	{r3, pc}
   d6024:	0003021c 	.word	0x0003021c

000d6028 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6028:	b508      	push	{r3, lr}
   d602a:	4b02      	ldr	r3, [pc, #8]	; (d6034 <vsnprintf+0xc>)
   d602c:	681b      	ldr	r3, [r3, #0]
   d602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6030:	9301      	str	r3, [sp, #4]
   d6032:	bd08      	pop	{r3, pc}
   d6034:	0003021c 	.word	0x0003021c

000d6038 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6038:	2200      	movs	r2, #0
   d603a:	4611      	mov	r1, r2
   d603c:	6840      	ldr	r0, [r0, #4]
   d603e:	f7ff bf9b 	b.w	d5f78 <network_listening>

000d6042 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6042:	2200      	movs	r2, #0
   d6044:	4611      	mov	r1, r2
   d6046:	6840      	ldr	r0, [r0, #4]
   d6048:	f7ff bfa6 	b.w	d5f98 <network_get_listen_timeout>

000d604c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d604c:	2200      	movs	r2, #0
   d604e:	6840      	ldr	r0, [r0, #4]
   d6050:	f7ff bf9a 	b.w	d5f88 <network_set_listen_timeout>

000d6054 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6054:	2200      	movs	r2, #0
   d6056:	f081 0101 	eor.w	r1, r1, #1
   d605a:	6840      	ldr	r0, [r0, #4]
   d605c:	f7ff bf84 	b.w	d5f68 <network_listen>

000d6060 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6060:	2300      	movs	r3, #0
   d6062:	461a      	mov	r2, r3
   d6064:	4619      	mov	r1, r3
   d6066:	6840      	ldr	r0, [r0, #4]
   d6068:	f7ff bf76 	b.w	d5f58 <network_off>

000d606c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d606c:	2300      	movs	r3, #0
   d606e:	461a      	mov	r2, r3
   d6070:	4619      	mov	r1, r3
   d6072:	6840      	ldr	r0, [r0, #4]
   d6074:	f7ff bf68 	b.w	d5f48 <network_on>

000d6078 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6078:	2200      	movs	r2, #0
   d607a:	4611      	mov	r1, r2
   d607c:	6840      	ldr	r0, [r0, #4]
   d607e:	f7ff bf5b 	b.w	d5f38 <network_ready>

000d6082 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6082:	2200      	movs	r2, #0
   d6084:	4611      	mov	r1, r2
   d6086:	6840      	ldr	r0, [r0, #4]
   d6088:	f7ff bf46 	b.w	d5f18 <network_connecting>

000d608c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d608c:	2200      	movs	r2, #0
   d608e:	2102      	movs	r1, #2
   d6090:	6840      	ldr	r0, [r0, #4]
   d6092:	f7ff bf49 	b.w	d5f28 <network_disconnect>

000d6096 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6096:	2300      	movs	r3, #0
   d6098:	461a      	mov	r2, r3
   d609a:	6840      	ldr	r0, [r0, #4]
   d609c:	f7ff bf34 	b.w	d5f08 <network_connect>

000d60a0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d60a0:	4b02      	ldr	r3, [pc, #8]	; (d60ac <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d60a2:	2203      	movs	r2, #3
   d60a4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d60a6:	4a02      	ldr	r2, [pc, #8]	; (d60b0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d60a8:	601a      	str	r2, [r3, #0]
   d60aa:	4770      	bx	lr
   d60ac:	2003e39c 	.word	0x2003e39c
   d60b0:	000d853c 	.word	0x000d853c

000d60b4 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d60b4:	2100      	movs	r1, #0
   d60b6:	f7ff bd6b 	b.w	d5b90 <HAL_SPI_Acquire>

000d60ba <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d60ba:	2100      	movs	r1, #0
   d60bc:	f7ff bd70 	b.w	d5ba0 <HAL_SPI_Release>

000d60c0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d60c0:	b510      	push	{r4, lr}
   d60c2:	4604      	mov	r4, r0
{
    _spi = spi;
   d60c4:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d60c6:	4608      	mov	r0, r1
   d60c8:	f7ff fd32 	bl	d5b30 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d60cc:	2300      	movs	r3, #0
   d60ce:	6063      	str	r3, [r4, #4]
}
   d60d0:	4620      	mov	r0, r4
   d60d2:	bd10      	pop	{r4, pc}

000d60d4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d60d4:	b510      	push	{r4, lr}
   d60d6:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d60d8:	7800      	ldrb	r0, [r0, #0]
   d60da:	f7ff ffeb 	bl	d60b4 <_ZN8SPIClass4lockEv.isra.0>
   d60de:	b948      	cbnz	r0, d60f4 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d60e0:	7820      	ldrb	r0, [r4, #0]
   d60e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d60e6:	f7ff fcfb 	bl	d5ae0 <HAL_SPI_Begin>
        unlock();
   d60ea:	7820      	ldrb	r0, [r4, #0]
    }
}
   d60ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d60f0:	f7ff bfe3 	b.w	d60ba <_ZN8SPIClass6unlockEv.isra.1>
   d60f4:	bd10      	pop	{r4, pc}

000d60f6 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d60f6:	b538      	push	{r3, r4, r5, lr}
   d60f8:	4604      	mov	r4, r0
    if (!lock())
   d60fa:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d60fc:	460d      	mov	r5, r1
    if (!lock())
   d60fe:	f7ff ffd9 	bl	d60b4 <_ZN8SPIClass4lockEv.isra.0>
   d6102:	b940      	cbnz	r0, d6116 <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d6104:	7820      	ldrb	r0, [r4, #0]
   d6106:	4629      	mov	r1, r5
   d6108:	f7ff fcf2 	bl	d5af0 <HAL_SPI_Set_Bit_Order>
        unlock();
   d610c:	7820      	ldrb	r0, [r4, #0]
    }
}
   d610e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d6112:	f7ff bfd2 	b.w	d60ba <_ZN8SPIClass6unlockEv.isra.1>
   d6116:	bd38      	pop	{r3, r4, r5, pc}

000d6118 <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d6118:	b538      	push	{r3, r4, r5, lr}
   d611a:	4604      	mov	r4, r0
    if (!lock())
   d611c:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d611e:	460d      	mov	r5, r1
    if (!lock())
   d6120:	f7ff ffc8 	bl	d60b4 <_ZN8SPIClass4lockEv.isra.0>
   d6124:	b940      	cbnz	r0, d6138 <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d6126:	7820      	ldrb	r0, [r4, #0]
   d6128:	4629      	mov	r1, r5
   d612a:	f7ff fce9 	bl	d5b00 <HAL_SPI_Set_Data_Mode>
        unlock();
   d612e:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d6134:	f7ff bfc1 	b.w	d60ba <_ZN8SPIClass6unlockEv.isra.1>
   d6138:	bd38      	pop	{r3, r4, r5, pc}

000d613a <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d613a:	7800      	ldrb	r0, [r0, #0]
   d613c:	f7ff bfbd 	b.w	d60ba <_ZN8SPIClass6unlockEv.isra.1>

000d6140 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6140:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d6142:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6144:	6018      	str	r0, [r3, #0]
   d6146:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d6148:	6818      	ldr	r0, [r3, #0]
   d614a:	4288      	cmp	r0, r1
   d614c:	b2e5      	uxtb	r5, r4
   d614e:	d906      	bls.n	d615e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6150:	3401      	adds	r4, #1
   d6152:	2c08      	cmp	r4, #8
   d6154:	d002      	beq.n	d615c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d6156:	0840      	lsrs	r0, r0, #1
   d6158:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d615a:	e7f5      	b.n	d6148 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d615c:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d615e:	4b02      	ldr	r3, [pc, #8]	; (d6168 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6160:	5d5b      	ldrb	r3, [r3, r5]
   d6162:	7013      	strb	r3, [r2, #0]
   d6164:	bd30      	pop	{r4, r5, pc}
   d6166:	bf00      	nop
   d6168:	000d8568 	.word	0x000d8568

000d616c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d616c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6170:	4607      	mov	r7, r0
   d6172:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d6174:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d6176:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d6178:	f7ff ff9c 	bl	d60b4 <_ZN8SPIClass4lockEv.isra.0>
   d617c:	2800      	cmp	r0, #0
   d617e:	db62      	blt.n	d6246 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d6180:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d6182:	2214      	movs	r2, #20
   d6184:	2100      	movs	r1, #0
   d6186:	a809      	add	r0, sp, #36	; 0x24
   d6188:	f002 f887 	bl	d829a <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d618c:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d618e:	4620      	mov	r0, r4
   d6190:	2200      	movs	r2, #0
   d6192:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d6194:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d6198:	f7ff fcda 	bl	d5b50 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d619c:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d61a0:	b154      	cbz	r4, d61b8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d61a2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d61a6:	b935      	cbnz	r5, d61b6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d61a8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d61ac:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d61b0:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d61b4:	e003      	b.n	d61be <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d61b6:	2400      	movs	r4, #0
   d61b8:	46a1      	mov	r9, r4
   d61ba:	46a0      	mov	r8, r4
   d61bc:	2501      	movs	r5, #1
   d61be:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d61c0:	b105      	cbz	r5, d61c4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d61c2:	b9bb      	cbnz	r3, d61f4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d61c4:	429d      	cmp	r5, r3
   d61c6:	d10b      	bne.n	d61e0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d61c8:	68b2      	ldr	r2, [r6, #8]
   d61ca:	4542      	cmp	r2, r8
   d61cc:	d108      	bne.n	d61e0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d61ce:	f88d 9020 	strb.w	r9, [sp, #32]
   d61d2:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d61d6:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d61da:	89b2      	ldrh	r2, [r6, #12]
   d61dc:	4291      	cmp	r1, r2
   d61de:	d009      	beq.n	d61f4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d61e0:	b153      	cbz	r3, d61f8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d61e2:	2400      	movs	r4, #0
   d61e4:	7838      	ldrb	r0, [r7, #0]
   d61e6:	9401      	str	r4, [sp, #4]
   d61e8:	9400      	str	r4, [sp, #0]
   d61ea:	4623      	mov	r3, r4
   d61ec:	4622      	mov	r2, r4
   d61ee:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d61f0:	f7ff fcc6 	bl	d5b80 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d61f4:	2000      	movs	r0, #0
   d61f6:	e026      	b.n	d6246 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d61f8:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d61fc:	68b1      	ldr	r1, [r6, #8]
   d61fe:	980a      	ldr	r0, [sp, #40]	; 0x28
   d6200:	ab04      	add	r3, sp, #16
   d6202:	f10d 020f 	add.w	r2, sp, #15
   d6206:	f7ff ff9b 	bl	d6140 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d620a:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d620c:	b105      	cbz	r5, d6210 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d620e:	b9b1      	cbnz	r1, d623e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d6210:	42a9      	cmp	r1, r5
   d6212:	d008      	beq.n	d6226 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d6214:	2400      	movs	r4, #0
   d6216:	7838      	ldrb	r0, [r7, #0]
   d6218:	9401      	str	r4, [sp, #4]
   d621a:	7b74      	ldrb	r4, [r6, #13]
   d621c:	7b33      	ldrb	r3, [r6, #12]
   d621e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d6222:	9400      	str	r4, [sp, #0]
   d6224:	e7e4      	b.n	d61f0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d6226:	68b3      	ldr	r3, [r6, #8]
   d6228:	4543      	cmp	r3, r8
   d622a:	d3f3      	bcc.n	d6214 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d622c:	f88d 9020 	strb.w	r9, [sp, #32]
   d6230:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d6234:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d6238:	89b3      	ldrh	r3, [r6, #12]
   d623a:	429a      	cmp	r2, r3
   d623c:	d1ea      	bne.n	d6214 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d623e:	9b04      	ldr	r3, [sp, #16]
   d6240:	4543      	cmp	r3, r8
   d6242:	d1e7      	bne.n	d6214 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d6244:	e7d6      	b.n	d61f4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d6246:	b00f      	add	sp, #60	; 0x3c
   d6248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d624c <_ZN8SPIClass13setClockSpeedEjj>:
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d624c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6250:	b088      	sub	sp, #32
    unsigned clock = 0;
   d6252:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d6254:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d6256:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d6258:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d625a:	460e      	mov	r6, r1
   d625c:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d625e:	f7ff ff29 	bl	d60b4 <_ZN8SPIClass4lockEv.isra.0>
   d6262:	4605      	mov	r5, r0
   d6264:	bb00      	cbnz	r0, d62a8 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d6266:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d626a:	4601      	mov	r1, r0
   d626c:	2214      	movs	r2, #20
   d626e:	a803      	add	r0, sp, #12
   d6270:	f002 f813 	bl	d829a <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d6274:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d6276:	462a      	mov	r2, r5
   d6278:	a903      	add	r1, sp, #12
   d627a:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d627c:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d6280:	f7ff fc66 	bl	d5b50 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d6284:	ab02      	add	r3, sp, #8
   d6286:	f10d 0207 	add.w	r2, sp, #7
   d628a:	fb07 f106 	mul.w	r1, r7, r6
   d628e:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d6290:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d6294:	f7ff ff54 	bl	d6140 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d6298:	7820      	ldrb	r0, [r4, #0]
   d629a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d629e:	f7ff fc37 	bl	d5b10 <HAL_SPI_Set_Clock_Divider>
        unlock();
   d62a2:	7820      	ldrb	r0, [r4, #0]
   d62a4:	f7ff ff09 	bl	d60ba <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d62a8:	9802      	ldr	r0, [sp, #8]
   d62aa:	b008      	add	sp, #32
   d62ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d62b0 <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d62b0:	b538      	push	{r3, r4, r5, lr}
   d62b2:	4604      	mov	r4, r0
    if (!lock())
   d62b4:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d62b6:	460d      	mov	r5, r1
    if (!lock())
   d62b8:	f7ff fefc 	bl	d60b4 <_ZN8SPIClass4lockEv.isra.0>
   d62bc:	b9c8      	cbnz	r0, d62f2 <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d62be:	6861      	ldr	r1, [r4, #4]
   d62c0:	b171      	cbz	r1, d62e0 <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d62c2:	4b0c      	ldr	r3, [pc, #48]	; (d62f4 <_ZN8SPIClass15setClockDividerEh+0x44>)
   d62c4:	5cc2      	ldrb	r2, [r0, r3]
   d62c6:	42aa      	cmp	r2, r5
   d62c8:	d002      	beq.n	d62d0 <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d62ca:	3001      	adds	r0, #1
   d62cc:	2808      	cmp	r0, #8
   d62ce:	d1f9      	bne.n	d62c4 <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d62d0:	3001      	adds	r0, #1
   d62d2:	b2c0      	uxtb	r0, r0
   d62d4:	40c1      	lsrs	r1, r0
   d62d6:	2201      	movs	r2, #1
   d62d8:	4620      	mov	r0, r4
   d62da:	f7ff ffb7 	bl	d624c <_ZN8SPIClass13setClockSpeedEjj>
   d62de:	e003      	b.n	d62e8 <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d62e0:	4629      	mov	r1, r5
   d62e2:	7820      	ldrb	r0, [r4, #0]
   d62e4:	f7ff fc14 	bl	d5b10 <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d62e8:	7820      	ldrb	r0, [r4, #0]
    }
}
   d62ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d62ee:	f7ff bee4 	b.w	d60ba <_ZN8SPIClass6unlockEv.isra.1>
   d62f2:	bd38      	pop	{r3, r4, r5, pc}
   d62f4:	000d8568 	.word	0x000d8568

000d62f8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d62f8:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d62fa:	7800      	ldrb	r0, [r0, #0]
   d62fc:	f7ff fc10 	bl	d5b20 <HAL_SPI_Send_Receive_Data>
}
   d6300:	b2c0      	uxtb	r0, r0
   d6302:	bd08      	pop	{r3, pc}

000d6304 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d6304:	b530      	push	{r4, r5, lr}
   d6306:	b087      	sub	sp, #28
   d6308:	4604      	mov	r4, r0
   d630a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d630c:	7800      	ldrb	r0, [r0, #0]
   d630e:	9500      	str	r5, [sp, #0]
   d6310:	f7ff fc26 	bl	d5b60 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d6314:	b93d      	cbnz	r5, d6326 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d6316:	a902      	add	r1, sp, #8
   d6318:	7820      	ldrb	r0, [r4, #0]
   d631a:	f7ff fc29 	bl	d5b70 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d631e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d6322:	07db      	lsls	r3, r3, #31
   d6324:	d4f7      	bmi.n	d6316 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d6326:	b007      	add	sp, #28
   d6328:	bd30      	pop	{r4, r5, pc}

000d632a <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d632a:	7800      	ldrb	r0, [r0, #0]
   d632c:	f7ff bc08 	b.w	d5b40 <HAL_SPI_Is_Enabled>

000d6330 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6330:	b510      	push	{r4, lr}
   d6332:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6334:	6800      	ldr	r0, [r0, #0]
   d6336:	b118      	cbz	r0, d6340 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d6338:	f7ff fe66 	bl	d6008 <free>
            wakeupSource_ = nullptr;
   d633c:	2300      	movs	r3, #0
   d633e:	6023      	str	r3, [r4, #0]
   d6340:	bd10      	pop	{r4, pc}

000d6342 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6342:	b510      	push	{r4, lr}
   d6344:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d6346:	f7ff fff3 	bl	d6330 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d634a:	4620      	mov	r0, r4
   d634c:	bd10      	pop	{r4, pc}
	...

000d6350 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6350:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6352:	4c09      	ldr	r4, [pc, #36]	; (d6378 <_GLOBAL__sub_I_System+0x28>)
   d6354:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6356:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d635a:	6020      	str	r0, [r4, #0]
   d635c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d635e:	71a0      	strb	r0, [r4, #6]
   d6360:	8120      	strh	r0, [r4, #8]
   d6362:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6364:	f7ff fd9c 	bl	d5ea0 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6368:	4620      	mov	r0, r4
   d636a:	4a04      	ldr	r2, [pc, #16]	; (d637c <_GLOBAL__sub_I_System+0x2c>)
   d636c:	4904      	ldr	r1, [pc, #16]	; (d6380 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d636e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6372:	f001 b90f 	b.w	d7594 <__aeabi_atexit>
   d6376:	bf00      	nop
   d6378:	2003e3a4 	.word	0x2003e3a4
   d637c:	2003dda0 	.word	0x2003dda0
   d6380:	000d6343 	.word	0x000d6343

000d6384 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6384:	b510      	push	{r4, lr}
   d6386:	4604      	mov	r4, r0
{
	free(buffer);
   d6388:	6800      	ldr	r0, [r0, #0]
   d638a:	f7ff fe3d 	bl	d6008 <free>
}
   d638e:	4620      	mov	r0, r4
   d6390:	bd10      	pop	{r4, pc}

000d6392 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6392:	b510      	push	{r4, lr}
   d6394:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6396:	6800      	ldr	r0, [r0, #0]
   d6398:	b108      	cbz	r0, d639e <_ZN6String10invalidateEv+0xc>
   d639a:	f7ff fe35 	bl	d6008 <free>
	buffer = NULL;
   d639e:	2300      	movs	r3, #0
   d63a0:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d63a2:	60a3      	str	r3, [r4, #8]
   d63a4:	6063      	str	r3, [r4, #4]
   d63a6:	bd10      	pop	{r4, pc}

000d63a8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d63a8:	b538      	push	{r3, r4, r5, lr}
   d63aa:	4604      	mov	r4, r0
   d63ac:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d63ae:	6800      	ldr	r0, [r0, #0]
   d63b0:	3101      	adds	r1, #1
   d63b2:	f7ff fe31 	bl	d6018 <realloc>
	if (newbuffer) {
   d63b6:	b110      	cbz	r0, d63be <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d63b8:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d63bc:	2001      	movs	r0, #1
	}
	return 0;
}
   d63be:	bd38      	pop	{r3, r4, r5, pc}

000d63c0 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d63c0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d63c2:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d63c4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d63c6:	b113      	cbz	r3, d63ce <_ZN6String7reserveEj+0xe>
   d63c8:	6843      	ldr	r3, [r0, #4]
   d63ca:	428b      	cmp	r3, r1
   d63cc:	d207      	bcs.n	d63de <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d63ce:	4620      	mov	r0, r4
   d63d0:	f7ff ffea 	bl	d63a8 <_ZN6String12changeBufferEj>
   d63d4:	b120      	cbz	r0, d63e0 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d63d6:	68a3      	ldr	r3, [r4, #8]
   d63d8:	b90b      	cbnz	r3, d63de <_ZN6String7reserveEj+0x1e>
   d63da:	6822      	ldr	r2, [r4, #0]
   d63dc:	7013      	strb	r3, [r2, #0]
   d63de:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d63e0:	bd10      	pop	{r4, pc}

000d63e2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d63e2:	b570      	push	{r4, r5, r6, lr}
   d63e4:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d63e6:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d63e8:	4604      	mov	r4, r0
   d63ea:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d63ec:	f7ff ffe8 	bl	d63c0 <_ZN6String7reserveEj>
   d63f0:	b918      	cbnz	r0, d63fa <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d63f2:	4620      	mov	r0, r4
   d63f4:	f7ff ffcd 	bl	d6392 <_ZN6String10invalidateEv>
		return *this;
   d63f8:	e009      	b.n	d640e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d63fa:	462a      	mov	r2, r5
   d63fc:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d63fe:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d6400:	6820      	ldr	r0, [r4, #0]
   d6402:	f001 ff3f 	bl	d8284 <memcpy>
	buffer[len] = 0;
   d6406:	6822      	ldr	r2, [r4, #0]
   d6408:	68a3      	ldr	r3, [r4, #8]
   d640a:	2100      	movs	r1, #0
   d640c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d640e:	4620      	mov	r0, r4
   d6410:	bd70      	pop	{r4, r5, r6, pc}

000d6412 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6412:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6414:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6416:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6418:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d641a:	6043      	str	r3, [r0, #4]
	len = 0;
   d641c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d641e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d6420:	460d      	mov	r5, r1
   d6422:	b139      	cbz	r1, d6434 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d6424:	4608      	mov	r0, r1
   d6426:	f001 ff69 	bl	d82fc <strlen>
   d642a:	4629      	mov	r1, r5
   d642c:	4602      	mov	r2, r0
   d642e:	4620      	mov	r0, r4
   d6430:	f7ff ffd7 	bl	d63e2 <_ZN6String4copyEPKcj>
}
   d6434:	4620      	mov	r0, r4
   d6436:	bd38      	pop	{r3, r4, r5, pc}

000d6438 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6438:	b510      	push	{r4, lr}
   d643a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d643c:	6800      	ldr	r0, [r0, #0]
   d643e:	b108      	cbz	r0, d6444 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6440:	f7ff fc2e 	bl	d5ca0 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d6444:	4620      	mov	r0, r4
   d6446:	bd10      	pop	{r4, pc}

000d6448 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6448:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d644a:	4c06      	ldr	r4, [pc, #24]	; (d6464 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d644c:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d644e:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6450:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d6452:	f7ff fc1d 	bl	d5c90 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6456:	4620      	mov	r0, r4
   d6458:	4a03      	ldr	r2, [pc, #12]	; (d6468 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d645a:	4904      	ldr	r1, [pc, #16]	; (d646c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d645c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6460:	f001 b898 	b.w	d7594 <__aeabi_atexit>
   d6464:	2003e3b0 	.word	0x2003e3b0
   d6468:	2003dda0 	.word	0x2003dda0
   d646c:	000d6439 	.word	0x000d6439

000d6470 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6472:	4606      	mov	r6, r0
   d6474:	460d      	mov	r5, r1
   d6476:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6478:	2400      	movs	r4, #0
  while (size--) {
   d647a:	42bd      	cmp	r5, r7
   d647c:	d00c      	beq.n	d6498 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d647e:	6833      	ldr	r3, [r6, #0]
   d6480:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6484:	689b      	ldr	r3, [r3, #8]
   d6486:	4630      	mov	r0, r6
   d6488:	4798      	blx	r3
     if (chunk>=0)
   d648a:	2800      	cmp	r0, #0
   d648c:	db01      	blt.n	d6492 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d648e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6490:	e7f3      	b.n	d647a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6492:	2c00      	cmp	r4, #0
   d6494:	bf08      	it	eq
   d6496:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6498:	4620      	mov	r0, r4
   d649a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d649c <_ZN5Print5printEPKc>:
   d649c:	b508      	push	{r3, lr}
   d649e:	f7fe fc55 	bl	d4d4c <_ZN5Print5writeEPKc>
   d64a2:	bd08      	pop	{r3, pc}

000d64a4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d64a4:	6803      	ldr	r3, [r0, #0]
   d64a6:	689b      	ldr	r3, [r3, #8]
   d64a8:	4718      	bx	r3

000d64aa <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d64aa:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d64ac:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d64ae:	4605      	mov	r5, r0
  size_t n = print('\r');
   d64b0:	f7ff fff8 	bl	d64a4 <_ZN5Print5printEc>
  n += print('\n');
   d64b4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d64b6:	4604      	mov	r4, r0
  n += print('\n');
   d64b8:	4628      	mov	r0, r5
   d64ba:	f7ff fff3 	bl	d64a4 <_ZN5Print5printEc>
  return n;
}
   d64be:	4420      	add	r0, r4
   d64c0:	bd38      	pop	{r3, r4, r5, pc}

000d64c2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d64c2:	b530      	push	{r4, r5, lr}
   d64c4:	b08b      	sub	sp, #44	; 0x2c
   d64c6:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d64c8:	2100      	movs	r1, #0
   d64ca:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d64ce:	2a01      	cmp	r2, #1
   d64d0:	bf98      	it	ls
   d64d2:	220a      	movls	r2, #10
   d64d4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d64d8:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d64dc:	fb05 3312 	mls	r3, r5, r2, r3
   d64e0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d64e4:	2b09      	cmp	r3, #9
   d64e6:	bf94      	ite	ls
   d64e8:	3330      	addls	r3, #48	; 0x30
   d64ea:	3337      	addhi	r3, #55	; 0x37
   d64ec:	b2db      	uxtb	r3, r3
   d64ee:	4621      	mov	r1, r4
   d64f0:	f804 3901 	strb.w	r3, [r4], #-1
   d64f4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d64f6:	2d00      	cmp	r5, #0
   d64f8:	d1ee      	bne.n	d64d8 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d64fa:	f7fe fc27 	bl	d4d4c <_ZN5Print5writeEPKc>
}
   d64fe:	b00b      	add	sp, #44	; 0x2c
   d6500:	bd30      	pop	{r4, r5, pc}
	...

000d6504 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d6504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6508:	ec57 6b10 	vmov	r6, r7, d0
   d650c:	4682      	mov	sl, r0
   d650e:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d6510:	ee10 2a10 	vmov	r2, s0
   d6514:	463b      	mov	r3, r7
   d6516:	ee10 0a10 	vmov	r0, s0
   d651a:	4639      	mov	r1, r7
   d651c:	f001 fdf6 	bl	d810c <__aeabi_dcmpun>
   d6520:	b108      	cbz	r0, d6526 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6522:	494e      	ldr	r1, [pc, #312]	; (d665c <_ZN5Print10printFloatEdh+0x158>)
   d6524:	e012      	b.n	d654c <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d6526:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d652a:	f04f 32ff 	mov.w	r2, #4294967295
   d652e:	4b4c      	ldr	r3, [pc, #304]	; (d6660 <_ZN5Print10printFloatEdh+0x15c>)
   d6530:	4630      	mov	r0, r6
   d6532:	4649      	mov	r1, r9
   d6534:	f001 fdea 	bl	d810c <__aeabi_dcmpun>
   d6538:	b968      	cbnz	r0, d6556 <_ZN5Print10printFloatEdh+0x52>
   d653a:	f04f 32ff 	mov.w	r2, #4294967295
   d653e:	4b48      	ldr	r3, [pc, #288]	; (d6660 <_ZN5Print10printFloatEdh+0x15c>)
   d6540:	4630      	mov	r0, r6
   d6542:	4649      	mov	r1, r9
   d6544:	f001 fdc4 	bl	d80d0 <__aeabi_dcmple>
   d6548:	b928      	cbnz	r0, d6556 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d654a:	4946      	ldr	r1, [pc, #280]	; (d6664 <_ZN5Print10printFloatEdh+0x160>)
   d654c:	4650      	mov	r0, sl
   d654e:	f7fe fbfd 	bl	d4d4c <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d6552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d6556:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d655a:	4b43      	ldr	r3, [pc, #268]	; (d6668 <_ZN5Print10printFloatEdh+0x164>)
   d655c:	4630      	mov	r0, r6
   d655e:	4639      	mov	r1, r7
   d6560:	f001 fdca 	bl	d80f8 <__aeabi_dcmpgt>
   d6564:	b108      	cbz	r0, d656a <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6566:	4941      	ldr	r1, [pc, #260]	; (d666c <_ZN5Print10printFloatEdh+0x168>)
   d6568:	e7f0      	b.n	d654c <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d656a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d656e:	4b40      	ldr	r3, [pc, #256]	; (d6670 <_ZN5Print10printFloatEdh+0x16c>)
   d6570:	4630      	mov	r0, r6
   d6572:	4639      	mov	r1, r7
   d6574:	f001 fda2 	bl	d80bc <__aeabi_dcmplt>
   d6578:	2800      	cmp	r0, #0
   d657a:	d1f4      	bne.n	d6566 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d657c:	2200      	movs	r2, #0
   d657e:	2300      	movs	r3, #0
   d6580:	4630      	mov	r0, r6
   d6582:	4639      	mov	r1, r7
   d6584:	f001 fd9a 	bl	d80bc <__aeabi_dcmplt>
   d6588:	b140      	cbz	r0, d659c <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d658a:	212d      	movs	r1, #45	; 0x2d
   d658c:	4650      	mov	r0, sl
   d658e:	f7ff ff89 	bl	d64a4 <_ZN5Print5printEc>
     number = -number;
   d6592:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d6596:	4604      	mov	r4, r0
     number = -number;
   d6598:	461f      	mov	r7, r3
   d659a:	e000      	b.n	d659e <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d659c:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d659e:	4935      	ldr	r1, [pc, #212]	; (d6674 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d65a0:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d65a4:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d65a6:	fa5f f388 	uxtb.w	r3, r8
   d65aa:	429d      	cmp	r5, r3
   d65ac:	d906      	bls.n	d65bc <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d65ae:	2200      	movs	r2, #0
   d65b0:	4b31      	ldr	r3, [pc, #196]	; (d6678 <_ZN5Print10printFloatEdh+0x174>)
   d65b2:	f001 fc3b 	bl	d7e2c <__aeabi_ddiv>
   d65b6:	f108 0801 	add.w	r8, r8, #1
   d65ba:	e7f4      	b.n	d65a6 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d65bc:	4632      	mov	r2, r6
   d65be:	463b      	mov	r3, r7
   d65c0:	f001 f958 	bl	d7874 <__adddf3>
   d65c4:	460f      	mov	r7, r1
   d65c6:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d65c8:	f001 fdde 	bl	d8188 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d65cc:	220a      	movs	r2, #10
   d65ce:	4601      	mov	r1, r0
   d65d0:	4680      	mov	r8, r0
   d65d2:	4650      	mov	r0, sl
   d65d4:	f7ff ff75 	bl	d64c2 <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d65d8:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d65da:	b3e5      	cbz	r5, d6656 <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d65dc:	4640      	mov	r0, r8
   d65de:	f001 fa85 	bl	d7aec <__aeabi_ui2d>
   d65e2:	4602      	mov	r2, r0
   d65e4:	460b      	mov	r3, r1
   d65e6:	4630      	mov	r0, r6
   d65e8:	4639      	mov	r1, r7
   d65ea:	f001 f941 	bl	d7870 <__aeabi_dsub>
   d65ee:	4606      	mov	r6, r0
   d65f0:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d65f2:	4650      	mov	r0, sl
   d65f4:	4921      	ldr	r1, [pc, #132]	; (d667c <_ZN5Print10printFloatEdh+0x178>)
   d65f6:	f7fe fba9 	bl	d4d4c <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d65fa:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d65fc:	2200      	movs	r2, #0
   d65fe:	4b1e      	ldr	r3, [pc, #120]	; (d6678 <_ZN5Print10printFloatEdh+0x174>)
   d6600:	4630      	mov	r0, r6
   d6602:	4639      	mov	r1, r7
   d6604:	f001 fae8 	bl	d7bd8 <__aeabi_dmul>
   d6608:	4606      	mov	r6, r0
   d660a:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d660c:	f001 fd94 	bl	d8138 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d6610:	f1b0 0900 	subs.w	r9, r0, #0
   d6614:	da07      	bge.n	d6626 <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d6616:	212d      	movs	r1, #45	; 0x2d
   d6618:	4650      	mov	r0, sl
   d661a:	f7ff ff43 	bl	d64a4 <_ZN5Print5printEc>
            val = -n;
   d661e:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d6622:	4680      	mov	r8, r0
   d6624:	e002      	b.n	d662c <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d6626:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d6628:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d662c:	220a      	movs	r2, #10
   d662e:	4650      	mov	r0, sl
   d6630:	f7ff ff47 	bl	d64c2 <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d6634:	4440      	add	r0, r8
   d6636:	4404      	add	r4, r0
    remainder -= toPrint;
   d6638:	4648      	mov	r0, r9
   d663a:	f001 fa67 	bl	d7b0c <__aeabi_i2d>
   d663e:	4602      	mov	r2, r0
   d6640:	460b      	mov	r3, r1
   d6642:	4630      	mov	r0, r6
   d6644:	4639      	mov	r1, r7
   d6646:	f001 f913 	bl	d7870 <__aeabi_dsub>
   d664a:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d664c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d6650:	4606      	mov	r6, r0
   d6652:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d6654:	d1d2      	bne.n	d65fc <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d6656:	4620      	mov	r0, r4
   d6658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d665c:	000d8570 	.word	0x000d8570
   d6660:	7fefffff 	.word	0x7fefffff
   d6664:	000d857a 	.word	0x000d857a
   d6668:	41efffff 	.word	0x41efffff
   d666c:	000d8574 	.word	0x000d8574
   d6670:	c1efffff 	.word	0xc1efffff
   d6674:	3fe00000 	.word	0x3fe00000
   d6678:	40240000 	.word	0x40240000
   d667c:	000d8578 	.word	0x000d8578

000d6680 <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d6680:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d6682:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d6684:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d6686:	f7ff ff3d 	bl	d6504 <_ZN5Print10printFloatEdh>
   d668a:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d668c:	4628      	mov	r0, r5
   d668e:	f7ff ff0c 	bl	d64aa <_ZN5Print7printlnEv>
  return n;
}
   d6692:	4420      	add	r0, r4
   d6694:	bd38      	pop	{r3, r4, r5, pc}

000d6696 <_ZN5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d6696:	b538      	push	{r3, r4, r5, lr}
   d6698:	4604      	mov	r4, r0
    return println((double)num, digits);
   d669a:	ee10 0a10 	vmov	r0, s0
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d669e:	460d      	mov	r5, r1
    return println((double)num, digits);
   d66a0:	f001 fa46 	bl	d7b30 <__aeabi_f2d>
   d66a4:	ec41 0b10 	vmov	d0, r0, r1
   d66a8:	4629      	mov	r1, r5
   d66aa:	4620      	mov	r0, r4
}
   d66ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return n;
}

size_t Print::println(float num, int digits)
{
    return println((double)num, digits);
   d66b0:	f7ff bfe6 	b.w	d6680 <_ZN5Print7printlnEdi>

000d66b4 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d66b4:	b40c      	push	{r2, r3}
   d66b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d66ba:	b087      	sub	sp, #28
   d66bc:	af00      	add	r7, sp, #0
   d66be:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d66c2:	4605      	mov	r5, r0
   d66c4:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d66c8:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d66ca:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d66cc:	4623      	mov	r3, r4
   d66ce:	464a      	mov	r2, r9
   d66d0:	2114      	movs	r1, #20
   d66d2:	1d38      	adds	r0, r7, #4
   d66d4:	f7ff fca8 	bl	d6028 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d66d8:	2813      	cmp	r0, #19
   d66da:	d805      	bhi.n	d66e8 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d66dc:	1d39      	adds	r1, r7, #4
   d66de:	4628      	mov	r0, r5
   d66e0:	f7fe fb34 	bl	d4d4c <_ZN5Print5writeEPKc>
   d66e4:	4604      	mov	r4, r0
   d66e6:	e013      	b.n	d6710 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d66e8:	f100 0308 	add.w	r3, r0, #8
   d66ec:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d66f0:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d66f2:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d66f6:	1c41      	adds	r1, r0, #1
   d66f8:	4623      	mov	r3, r4
   d66fa:	464a      	mov	r2, r9
   d66fc:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d66fe:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d6700:	f7ff fc92 	bl	d6028 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6704:	4669      	mov	r1, sp
   d6706:	4628      	mov	r0, r5
   d6708:	f7fe fb20 	bl	d4d4c <_ZN5Print5writeEPKc>
   d670c:	4604      	mov	r4, r0
   d670e:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d6710:	b11e      	cbz	r6, d671a <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d6712:	4628      	mov	r0, r5
   d6714:	f7ff fec9 	bl	d64aa <_ZN5Print7printlnEv>
   d6718:	4404      	add	r4, r0
    return n;
}
   d671a:	4620      	mov	r0, r4
   d671c:	371c      	adds	r7, #28
   d671e:	46bd      	mov	sp, r7
   d6720:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6724:	b002      	add	sp, #8
   d6726:	4770      	bx	lr

000d6728 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6728:	4b01      	ldr	r3, [pc, #4]	; (d6730 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d672a:	4a02      	ldr	r2, [pc, #8]	; (d6734 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d672c:	601a      	str	r2, [r3, #0]
   d672e:	4770      	bx	lr
   d6730:	2003e3b4 	.word	0x2003e3b4
   d6734:	000d85f1 	.word	0x000d85f1

000d6738 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d6738:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d673a:	2000      	movs	r0, #0
   d673c:	f7ff fc4c 	bl	d5fd8 <spark_sync_time_pending>
   d6740:	b128      	cbz	r0, d674e <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6742:	f7ff fc39 	bl	d5fb8 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d6746:	f080 0001 	eor.w	r0, r0, #1
   d674a:	b2c0      	uxtb	r0, r0
   d674c:	bd08      	pop	{r3, pc}
   d674e:	2001      	movs	r0, #1
    }
   d6750:	bd08      	pop	{r3, pc}

000d6752 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d6752:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d6754:	2000      	movs	r0, #0
   d6756:	f7ff fa4b 	bl	d5bf0 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d675a:	4604      	mov	r4, r0
   d675c:	b968      	cbnz	r0, d677a <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d675e:	f7ff fb97 	bl	d5e90 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d6762:	2801      	cmp	r0, #1
   d6764:	d10b      	bne.n	d677e <_ZN9TimeClass7isValidEv+0x2c>
   d6766:	4620      	mov	r0, r4
   d6768:	f7ff fbb2 	bl	d5ed0 <system_thread_get_state>
   d676c:	b938      	cbnz	r0, d677e <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d676e:	f7ff ffe3 	bl	d6738 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d6772:	b930      	cbnz	r0, d6782 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d6774:	f7ff fc18 	bl	d5fa8 <spark_process>
   d6778:	e7f9      	b.n	d676e <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d677a:	2001      	movs	r0, #1
   d677c:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d677e:	2000      	movs	r0, #0
   d6780:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d6782:	f7ff ffd9 	bl	d6738 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d6786:	2000      	movs	r0, #0
   d6788:	f7ff fa32 	bl	d5bf0 <HAL_RTC_Time_Is_Valid>
   d678c:	3000      	adds	r0, #0
   d678e:	bf18      	it	ne
   d6790:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d6792:	bd10      	pop	{r4, pc}

000d6794 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d6794:	b508      	push	{r3, lr}
    (void)isValid();
   d6796:	f7ff ffdc 	bl	d6752 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d679a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d679e:	f7ff ba1f 	b.w	d5be0 <HAL_RTC_Get_UnixTime>
	...

000d67a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d67a4:	4b02      	ldr	r3, [pc, #8]	; (d67b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d67a6:	681a      	ldr	r2, [r3, #0]
   d67a8:	4b02      	ldr	r3, [pc, #8]	; (d67b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d67aa:	601a      	str	r2, [r3, #0]
   d67ac:	4770      	bx	lr
   d67ae:	bf00      	nop
   d67b0:	2003dd38 	.word	0x2003dd38
   d67b4:	2003e3b8 	.word	0x2003e3b8

000d67b8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d67b8:	2100      	movs	r1, #0
   d67ba:	f7ff bb79 	b.w	d5eb0 <system_delay_ms>

000d67be <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d67be:	b510      	push	{r4, lr}
   d67c0:	4604      	mov	r4, r0
   d67c2:	f7fd fdc7 	bl	d4354 <_ZNSt14_Function_baseD1Ev>
   d67c6:	4620      	mov	r0, r4
   d67c8:	bd10      	pop	{r4, pc}
	...

000d67cc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d67cc:	4803      	ldr	r0, [pc, #12]	; (d67dc <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d67ce:	4a04      	ldr	r2, [pc, #16]	; (d67e0 <_GLOBAL__sub_I_RGB+0x14>)
   d67d0:	4904      	ldr	r1, [pc, #16]	; (d67e4 <_GLOBAL__sub_I_RGB+0x18>)
   d67d2:	2300      	movs	r3, #0
   d67d4:	6083      	str	r3, [r0, #8]
   d67d6:	f000 bedd 	b.w	d7594 <__aeabi_atexit>
   d67da:	bf00      	nop
   d67dc:	2003e3bc 	.word	0x2003e3bc
   d67e0:	2003dda0 	.word	0x2003dda0
   d67e4:	000d67bf 	.word	0x000d67bf

000d67e8 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d67e8:	7d00      	ldrb	r0, [r0, #20]
   d67ea:	4770      	bx	lr

000d67ec <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d67ec:	7d03      	ldrb	r3, [r0, #20]
   d67ee:	b11b      	cbz	r3, d67f8 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d67f0:	6983      	ldr	r3, [r0, #24]
   d67f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d67f6:	d102      	bne.n	d67fe <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d67f8:	ed9f 0a05 	vldr	s0, [pc, #20]	; d6810 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d67fc:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d67fe:	ee07 3a90 	vmov	s15, r3
   d6802:	ed9f 7a04 	vldr	s14, [pc, #16]	; d6814 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d6806:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d680a:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d680e:	4770      	bx	lr
   d6810:	00000000 	.word	0x00000000
   d6814:	42c80000 	.word	0x42c80000

000d6818 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d6818:	7d03      	ldrb	r3, [r0, #20]
   d681a:	b11b      	cbz	r3, d6824 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d681c:	6a03      	ldr	r3, [r0, #32]
   d681e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d6822:	d102      	bne.n	d682a <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d6824:	ed9f 0a05 	vldr	s0, [pc, #20]	; d683c <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d6828:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d682a:	ee07 3a90 	vmov	s15, r3
   d682e:	ed9f 7a04 	vldr	s14, [pc, #16]	; d6840 <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d6832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6836:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d683a:	4770      	bx	lr
   d683c:	00000000 	.word	0x00000000
   d6840:	42c80000 	.word	0x42c80000

000d6844 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d6844:	7d03      	ldrb	r3, [r0, #20]
   d6846:	b17b      	cbz	r3, d6868 <_ZNK14CellularSignal10getQualityEv+0x24>
   d6848:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d684a:	2b00      	cmp	r3, #0
   d684c:	db0c      	blt.n	d6868 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d684e:	ee07 3a90 	vmov	s15, r3
   d6852:	eddf 6a07 	vldr	s13, [pc, #28]	; d6870 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d6856:	ed9f 0a07 	vldr	s0, [pc, #28]	; d6874 <_ZNK14CellularSignal10getQualityEv+0x30>
   d685a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d685e:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d6862:	ee27 0a80 	vmul.f32	s0, s15, s0
   d6866:	4770      	bx	lr
    }

    return -1.0f;
   d6868:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d686c:	4770      	bx	lr
   d686e:	bf00      	nop
   d6870:	477fff00 	.word	0x477fff00
   d6874:	42c80000 	.word	0x42c80000

000d6878 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d6878:	7d03      	ldrb	r3, [r0, #20]
   d687a:	b17b      	cbz	r3, d689c <_ZNK14CellularSignal11getStrengthEv+0x24>
   d687c:	69c3      	ldr	r3, [r0, #28]
   d687e:	2b00      	cmp	r3, #0
   d6880:	db0c      	blt.n	d689c <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d6882:	ee07 3a90 	vmov	s15, r3
   d6886:	eddf 6a07 	vldr	s13, [pc, #28]	; d68a4 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d688a:	ed9f 0a07 	vldr	s0, [pc, #28]	; d68a8 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d688e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d6892:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d6896:	ee27 0a80 	vmul.f32	s0, s15, s0
   d689a:	4770      	bx	lr
    }

    return -1.0f;
   d689c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d68a0:	4770      	bx	lr
   d68a2:	bf00      	nop
   d68a4:	477fff00 	.word	0x477fff00
   d68a8:	42c80000 	.word	0x42c80000

000d68ac <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d68ac:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d68ae:	460d      	mov	r5, r1
   d68b0:	f100 0410 	add.w	r4, r0, #16
   d68b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d68b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d68b8:	e895 0003 	ldmia.w	r5, {r0, r1}
   d68bc:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d68c0:	2001      	movs	r0, #1
   d68c2:	bd30      	pop	{r4, r5, pc}

000d68c4 <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d68c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d68c8:	4607      	mov	r7, r0
   d68ca:	460c      	mov	r4, r1
{
    if (base == 0) {
   d68cc:	4615      	mov	r5, r2
   d68ce:	b92a      	cbnz	r2, d68dc <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d68d0:	6803      	ldr	r3, [r0, #0]
   d68d2:	b2c9      	uxtb	r1, r1
   d68d4:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d68d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d68da:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d68dc:	2900      	cmp	r1, #0
   d68de:	da07      	bge.n	d68f0 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d68e0:	2a0a      	cmp	r2, #10
   d68e2:	d105      	bne.n	d68f0 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d68e4:	212d      	movs	r1, #45	; 0x2d
   d68e6:	f7ff fddd 	bl	d64a4 <_ZN5Print5printEc>
            val = -n;
   d68ea:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d68ec:	4606      	mov	r6, r0
            val = -n;
   d68ee:	e001      	b.n	d68f4 <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d68f0:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d68f2:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d68f4:	b2ea      	uxtb	r2, r5
   d68f6:	4638      	mov	r0, r7
   d68f8:	f7ff fde3 	bl	d64c2 <_ZN5Print11printNumberEmh>
    }
}
   d68fc:	4430      	add	r0, r6
   d68fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6902 <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
   d6902:	b570      	push	{r4, r5, r6, lr}
   d6904:	460d      	mov	r5, r1
   d6906:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d6908:	220a      	movs	r2, #10
   d690a:	6881      	ldr	r1, [r0, #8]
   d690c:	4628      	mov	r0, r5
   d690e:	f7ff ffd9 	bl	d68c4 <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
   d6912:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d6914:	4604      	mov	r4, r0
    n += p.print(',');
   d6916:	4628      	mov	r0, r5
   d6918:	f7ff fdc4 	bl	d64a4 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d691c:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d691e:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d6920:	68f1      	ldr	r1, [r6, #12]
   d6922:	4628      	mov	r0, r5
   d6924:	f7ff ffce 	bl	d68c4 <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
   d6928:	4420      	add	r0, r4
   d692a:	bd70      	pop	{r4, r5, r6, pc}

000d692c <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d692c:	f1a0 0004 	sub.w	r0, r0, #4
   d6930:	f7ff bfe7 	b.w	d6902 <_ZNK14CellularSignal7printToER5Print>

000d6934 <_ZN6detail9_getVCellEhh>:
namespace detail {
	// Converts VCELL_REGISTER reading to Battery Voltage
	float _getVCell(byte MSB, byte LSB) {
		// VCELL = 12-bit value, 1.25mV (1V/800) per bit
		float value = (float)((MSB << 4) | (LSB >> 4));
		return value / 800.0;
   d6934:	0909      	lsrs	r1, r1, #4
   d6936:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
   d693a:	ee07 0a90 	vmov	s15, r0
   d693e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
	}
   d6942:	eddf 7a02 	vldr	s15, [pc, #8]	; d694c <_ZN6detail9_getVCellEhh+0x18>
   d6946:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d694a:	4770      	bx	lr
   d694c:	44480000 	.word	0x44480000

000d6950 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d6950:	6800      	ldr	r0, [r0, #0]
   d6952:	f000 bbb8 	b.w	d70c6 <_ZN7TwoWire4lockEv>

000d6956 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d6956:	b510      	push	{r4, lr}
   d6958:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d695a:	6001      	str	r1, [r0, #0]
   d695c:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d695e:	b10a      	cbz	r2, d6964 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d6960:	f7ff fff6 	bl	d6950 <_ZN9FuelGauge4lockEv>
    }
}
   d6964:	4620      	mov	r0, r4
   d6966:	bd10      	pop	{r4, pc}

000d6968 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d6968:	b538      	push	{r3, r4, r5, lr}
   d696a:	4604      	mov	r4, r0
   d696c:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d696e:	f000 fdeb 	bl	d7548 <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d6972:	462a      	mov	r2, r5
   d6974:	4601      	mov	r1, r0
   d6976:	4620      	mov	r0, r4
   d6978:	f7ff ffed 	bl	d6956 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d697c:	4620      	mov	r0, r4
   d697e:	bd38      	pop	{r3, r4, r5, pc}

000d6980 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d6980:	6800      	ldr	r0, [r0, #0]
   d6982:	f000 bba9 	b.w	d70d8 <_ZN7TwoWire6unlockEv>

000d6986 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d6986:	b510      	push	{r4, lr}
{
    if (lock_) {
   d6988:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d698a:	4604      	mov	r4, r0
{
    if (lock_) {
   d698c:	b10b      	cbz	r3, d6992 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d698e:	f7ff fff7 	bl	d6980 <_ZN9FuelGauge6unlockEv>
    }
}
   d6992:	4620      	mov	r0, r4
   d6994:	bd10      	pop	{r4, pc}

000d6996 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d6996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6998:	4604      	mov	r4, r0
   d699a:	4616      	mov	r6, r2
   d699c:	461d      	mov	r5, r3
   d699e:	460f      	mov	r7, r1
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d69a0:	f7ff ffd6 	bl	d6950 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   d69a4:	6820      	ldr	r0, [r4, #0]
   d69a6:	2136      	movs	r1, #54	; 0x36
   d69a8:	f000 fb82 	bl	d70b0 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
   d69ac:	6820      	ldr	r0, [r4, #0]
   d69ae:	6803      	ldr	r3, [r0, #0]
   d69b0:	4639      	mov	r1, r7
   d69b2:	689b      	ldr	r3, [r3, #8]
   d69b4:	4798      	blx	r3
    i2c_.endTransmission(true);
   d69b6:	2101      	movs	r1, #1
   d69b8:	6820      	ldr	r0, [r4, #0]
   d69ba:	f000 fb7c 	bl	d70b6 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
   d69be:	2202      	movs	r2, #2
   d69c0:	2136      	movs	r1, #54	; 0x36
   d69c2:	2301      	movs	r3, #1
   d69c4:	6820      	ldr	r0, [r4, #0]
   d69c6:	f000 fb5d 	bl	d7084 <_ZN7TwoWire11requestFromEhjh>
    MSB = i2c_.read();
   d69ca:	6820      	ldr	r0, [r4, #0]
   d69cc:	6803      	ldr	r3, [r0, #0]
   d69ce:	695b      	ldr	r3, [r3, #20]
   d69d0:	4798      	blx	r3
   d69d2:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
   d69d4:	6820      	ldr	r0, [r4, #0]
   d69d6:	6803      	ldr	r3, [r0, #0]
   d69d8:	695b      	ldr	r3, [r3, #20]
   d69da:	4798      	blx	r3
   d69dc:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d69de:	4620      	mov	r0, r4
}
   d69e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d69e4:	f7ff bfcc 	b.w	d6980 <_ZN9FuelGauge6unlockEv>

000d69e8 <_ZN9FuelGauge8getVCellEv>:
		return MSB + decimal;
	}
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {
   d69e8:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d69ea:	ab02      	add	r3, sp, #8
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {

	byte MSB = 0;
   d69ec:	2200      	movs	r2, #0
   d69ee:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;
   d69f2:	f803 2d01 	strb.w	r2, [r3, #-1]!

	readRegister(VCELL_REGISTER, MSB, LSB);
   d69f6:	2102      	movs	r1, #2
   d69f8:	f10d 0206 	add.w	r2, sp, #6
   d69fc:	f7ff ffcb 	bl	d6996 <_ZN9FuelGauge12readRegisterEhRhS0_>
	return detail::_getVCell(MSB, LSB);
   d6a00:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d6a04:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   d6a08:	b003      	add	sp, #12
   d6a0a:	f85d eb04 	ldr.w	lr, [sp], #4

	byte MSB = 0;
	byte LSB = 0;

	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
   d6a0e:	f7ff bf91 	b.w	d6934 <_ZN6detail9_getVCellEhh>
	...

000d6a14 <_ZN9FuelGauge6getSoCEv>:
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
   d6a14:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d6a16:	ab02      	add	r3, sp, #8
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d6a18:	2200      	movs	r2, #0
	byte LSB = 0;
   d6a1a:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d6a1e:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
   d6a22:	2104      	movs	r1, #4
   d6a24:	f10d 0206 	add.w	r2, sp, #6
   d6a28:	f7ff ffb5 	bl	d6996 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d6a2c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d6a30:	f001 f86c 	bl	d7b0c <__aeabi_i2d>
   d6a34:	2200      	movs	r2, #0
   d6a36:	4b09      	ldr	r3, [pc, #36]	; (d6a5c <_ZN9FuelGauge6getSoCEv+0x48>)
   d6a38:	f001 f8ce 	bl	d7bd8 <__aeabi_dmul>
   d6a3c:	f001 fbc4 	bl	d81c8 <__aeabi_d2f>
   d6a40:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d6a44:	ee00 3a10 	vmov	s0, r3
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d6a48:	ee07 0a90 	vmov	s15, r0
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d6a4c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d6a50:	ee37 0a80 	vadd.f32	s0, s15, s0
   d6a54:	b003      	add	sp, #12
   d6a56:	f85d fb04 	ldr.w	pc, [sp], #4
   d6a5a:	bf00      	nop
   d6a5c:	3f700000 	.word	0x3f700000

000d6a60 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6a60:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6a62:	4b0c      	ldr	r3, [pc, #48]	; (d6a94 <serialEventRun+0x34>)
   d6a64:	b133      	cbz	r3, d6a74 <serialEventRun+0x14>
   d6a66:	f000 f957 	bl	d6d18 <_Z16_fetch_usbserialv>
   d6a6a:	6803      	ldr	r3, [r0, #0]
   d6a6c:	691b      	ldr	r3, [r3, #16]
   d6a6e:	4798      	blx	r3
   d6a70:	2800      	cmp	r0, #0
   d6a72:	dc09      	bgt.n	d6a88 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6a74:	4b08      	ldr	r3, [pc, #32]	; (d6a98 <serialEventRun+0x38>)
   d6a76:	b163      	cbz	r3, d6a92 <serialEventRun+0x32>
   d6a78:	f000 fa84 	bl	d6f84 <_Z22__fetch_global_Serial1v>
   d6a7c:	6803      	ldr	r3, [r0, #0]
   d6a7e:	691b      	ldr	r3, [r3, #16]
   d6a80:	4798      	blx	r3
   d6a82:	2800      	cmp	r0, #0
   d6a84:	dc03      	bgt.n	d6a8e <serialEventRun+0x2e>
   d6a86:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6a88:	f3af 8000 	nop.w
   d6a8c:	e7f2      	b.n	d6a74 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6a8e:	f3af 8000 	nop.w
   d6a92:	bd08      	pop	{r3, pc}
	...

000d6a9c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6a9c:	b508      	push	{r3, lr}
	serialEventRun();
   d6a9e:	f7ff ffdf 	bl	d6a60 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6aa2:	f7ff f895 	bl	d5bd0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6aa6:	4b01      	ldr	r3, [pc, #4]	; (d6aac <_post_loop+0x10>)
   d6aa8:	6018      	str	r0, [r3, #0]
   d6aaa:	bd08      	pop	{r3, pc}
   d6aac:	2003e718 	.word	0x2003e718

000d6ab0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6ab0:	4802      	ldr	r0, [pc, #8]	; (d6abc <_Z33system_initialize_user_backup_ramv+0xc>)
   d6ab2:	4a03      	ldr	r2, [pc, #12]	; (d6ac0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6ab4:	4903      	ldr	r1, [pc, #12]	; (d6ac4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6ab6:	1a12      	subs	r2, r2, r0
   d6ab8:	f001 bbe4 	b.w	d8284 <memcpy>
   d6abc:	2003f400 	.word	0x2003f400
   d6ac0:	2003f404 	.word	0x2003f404
   d6ac4:	000d8900 	.word	0x000d8900

000d6ac8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6ac8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6aca:	2300      	movs	r3, #0
   d6acc:	9300      	str	r3, [sp, #0]
   d6ace:	461a      	mov	r2, r3
   d6ad0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6ad4:	f7ff fa0e 	bl	d5ef4 <system_ctrl_set_result>
}
   d6ad8:	b003      	add	sp, #12
   d6ada:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6ae0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6ae0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6ae2:	8843      	ldrh	r3, [r0, #2]
   d6ae4:	2b0a      	cmp	r3, #10
   d6ae6:	d008      	beq.n	d6afa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6ae8:	2b50      	cmp	r3, #80	; 0x50
   d6aea:	d109      	bne.n	d6b00 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6aec:	4b09      	ldr	r3, [pc, #36]	; (d6b14 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6aee:	681b      	ldr	r3, [r3, #0]
   d6af0:	b13b      	cbz	r3, d6b02 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6af2:	b003      	add	sp, #12
   d6af4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6af8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6afa:	f7ff ffe5 	bl	d6ac8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6afe:	e006      	b.n	d6b0e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6b00:	2300      	movs	r3, #0
   d6b02:	9300      	str	r3, [sp, #0]
   d6b04:	461a      	mov	r2, r3
   d6b06:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6b0a:	f7ff f9f3 	bl	d5ef4 <system_ctrl_set_result>
        break;
    }
}
   d6b0e:	b003      	add	sp, #12
   d6b10:	f85d fb04 	ldr.w	pc, [sp], #4
   d6b14:	2003e3cc 	.word	0x2003e3cc

000d6b18 <module_user_init_hook>:

void module_user_init_hook()
{
   d6b18:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6b1a:	4c10      	ldr	r4, [pc, #64]	; (d6b5c <module_user_init_hook+0x44>)
   d6b1c:	4d10      	ldr	r5, [pc, #64]	; (d6b60 <module_user_init_hook+0x48>)
   d6b1e:	6823      	ldr	r3, [r4, #0]
   d6b20:	42ab      	cmp	r3, r5
   d6b22:	4b10      	ldr	r3, [pc, #64]	; (d6b64 <module_user_init_hook+0x4c>)
   d6b24:	bf0c      	ite	eq
   d6b26:	2201      	moveq	r2, #1
   d6b28:	2200      	movne	r2, #0
   d6b2a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6b2c:	d002      	beq.n	d6b34 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d6b2e:	f7ff ffbf 	bl	d6ab0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d6b32:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6b34:	f7ff f83c 	bl	d5bb0 <HAL_RNG_GetRandomNumber>
   d6b38:	4604      	mov	r4, r0
    srand(seed);
   d6b3a:	f001 fbb7 	bl	d82ac <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6b3e:	4b0a      	ldr	r3, [pc, #40]	; (d6b68 <module_user_init_hook+0x50>)
   d6b40:	b113      	cbz	r3, d6b48 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d6b42:	4620      	mov	r0, r4
   d6b44:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6b48:	2100      	movs	r1, #0
   d6b4a:	4807      	ldr	r0, [pc, #28]	; (d6b68 <module_user_init_hook+0x50>)
   d6b4c:	f7ff fa4c 	bl	d5fe8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6b50:	2100      	movs	r1, #0
   d6b52:	4806      	ldr	r0, [pc, #24]	; (d6b6c <module_user_init_hook+0x54>)
}
   d6b54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6b58:	f7ff b9c2 	b.w	d5ee0 <system_ctrl_set_app_request_handler>
   d6b5c:	2003f400 	.word	0x2003f400
   d6b60:	9a271c1e 	.word	0x9a271c1e
   d6b64:	2003e3d0 	.word	0x2003e3d0
   d6b68:	00000000 	.word	0x00000000
   d6b6c:	000d6ae1 	.word	0x000d6ae1

000d6b70 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6b70:	4770      	bx	lr

000d6b72 <_ZN9IPAddressD0Ev>:
   d6b72:	b510      	push	{r4, lr}
   d6b74:	2118      	movs	r1, #24
   d6b76:	4604      	mov	r4, r0
   d6b78:	f000 fd1a 	bl	d75b0 <_ZdlPvj>
   d6b7c:	4620      	mov	r0, r4
   d6b7e:	bd10      	pop	{r4, pc}

000d6b80 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6b80:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6b82:	7d03      	ldrb	r3, [r0, #20]
   d6b84:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6b86:	b08d      	sub	sp, #52	; 0x34
   d6b88:	460e      	mov	r6, r1
   d6b8a:	f100 0704 	add.w	r7, r0, #4
   d6b8e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6b92:	d002      	beq.n	d6b9a <_ZNK9IPAddress7printToER5Print+0x1a>
   d6b94:	f100 0508 	add.w	r5, r0, #8
   d6b98:	e018      	b.n	d6bcc <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6b9a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6b9c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6b9e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6ba2:	232f      	movs	r3, #47	; 0x2f
   d6ba4:	462a      	mov	r2, r5
   d6ba6:	200a      	movs	r0, #10
   d6ba8:	f7ff f88a 	bl	d5cc0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6bac:	4628      	mov	r0, r5
   d6bae:	f001 fba5 	bl	d82fc <strlen>
   d6bb2:	6833      	ldr	r3, [r6, #0]
   d6bb4:	4602      	mov	r2, r0
   d6bb6:	68db      	ldr	r3, [r3, #12]
   d6bb8:	4629      	mov	r1, r5
   d6bba:	4630      	mov	r0, r6
   d6bbc:	4798      	blx	r3
   d6bbe:	e00f      	b.n	d6be0 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6bc0:	b124      	cbz	r4, d6bcc <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6bc2:	212e      	movs	r1, #46	; 0x2e
   d6bc4:	4630      	mov	r0, r6
   d6bc6:	f7ff fc6d 	bl	d64a4 <_ZN5Print5printEc>
   d6bca:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6bcc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6bd0:	220a      	movs	r2, #10
   d6bd2:	4630      	mov	r0, r6
   d6bd4:	f7ff fc75 	bl	d64c2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6bd8:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6bda:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6bdc:	d1f0      	bne.n	d6bc0 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6bde:	4620      	mov	r0, r4
    }
    return n;
}
   d6be0:	b00d      	add	sp, #52	; 0x34
   d6be2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6be4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6be4:	b510      	push	{r4, lr}
   d6be6:	4b05      	ldr	r3, [pc, #20]	; (d6bfc <_ZN9IPAddressC1Ev+0x18>)
   d6be8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6bea:	2211      	movs	r2, #17
   d6bec:	f840 3b04 	str.w	r3, [r0], #4
   d6bf0:	2100      	movs	r1, #0
   d6bf2:	f001 fb52 	bl	d829a <memset>
{
    clear();
}
   d6bf6:	4620      	mov	r0, r4
   d6bf8:	bd10      	pop	{r4, pc}
   d6bfa:	bf00      	nop
   d6bfc:	000d86c4 	.word	0x000d86c4

000d6c00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6c00:	4603      	mov	r3, r0
   d6c02:	4a07      	ldr	r2, [pc, #28]	; (d6c20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6c04:	b510      	push	{r4, lr}
   d6c06:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6c0a:	f101 0210 	add.w	r2, r1, #16
   d6c0e:	f851 4b04 	ldr.w	r4, [r1], #4
   d6c12:	f843 4b04 	str.w	r4, [r3], #4
   d6c16:	4291      	cmp	r1, r2
   d6c18:	d1f9      	bne.n	d6c0e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6c1a:	780a      	ldrb	r2, [r1, #0]
   d6c1c:	701a      	strb	r2, [r3, #0]
}
   d6c1e:	bd10      	pop	{r4, pc}
   d6c20:	000d86c4 	.word	0x000d86c4

000d6c24 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6c24:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6c26:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6c2a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6c2e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6c32:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6c36:	2304      	movs	r3, #4
   d6c38:	6041      	str	r1, [r0, #4]
   d6c3a:	7503      	strb	r3, [r0, #20]
   d6c3c:	bd10      	pop	{r4, pc}

000d6c3e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6c3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6c40:	780d      	ldrb	r5, [r1, #0]
   d6c42:	788b      	ldrb	r3, [r1, #2]
   d6c44:	784a      	ldrb	r2, [r1, #1]
   d6c46:	78c9      	ldrb	r1, [r1, #3]
   d6c48:	9100      	str	r1, [sp, #0]
   d6c4a:	4629      	mov	r1, r5
   d6c4c:	f7ff ffea 	bl	d6c24 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6c50:	b003      	add	sp, #12
   d6c52:	bd30      	pop	{r4, r5, pc}

000d6c54 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6c54:	7441      	strb	r1, [r0, #17]
   d6c56:	4770      	bx	lr

000d6c58 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6c58:	4770      	bx	lr

000d6c5a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6c5a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6c5c:	2100      	movs	r1, #0
   d6c5e:	7c00      	ldrb	r0, [r0, #16]
   d6c60:	f7ff f8fe 	bl	d5e60 <HAL_USB_USART_Receive_Data>
}
   d6c64:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6c68:	bf28      	it	cs
   d6c6a:	f04f 30ff 	movcs.w	r0, #4294967295
   d6c6e:	bd08      	pop	{r3, pc}

000d6c70 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6c70:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6c72:	2101      	movs	r1, #1
   d6c74:	7c00      	ldrb	r0, [r0, #16]
   d6c76:	f7ff f8f3 	bl	d5e60 <HAL_USB_USART_Receive_Data>
}
   d6c7a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6c7e:	bf28      	it	cs
   d6c80:	f04f 30ff 	movcs.w	r0, #4294967295
   d6c84:	bd08      	pop	{r3, pc}

000d6c86 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6c86:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6c88:	7c00      	ldrb	r0, [r0, #16]
   d6c8a:	f7ff f8e1 	bl	d5e50 <HAL_USB_USART_Available_Data_For_Write>
}
   d6c8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6c92:	bd08      	pop	{r3, pc}

000d6c94 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6c94:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6c96:	7c00      	ldrb	r0, [r0, #16]
   d6c98:	f7ff f8d2 	bl	d5e40 <HAL_USB_USART_Available_Data>
}
   d6c9c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6ca0:	bd08      	pop	{r3, pc}

000d6ca2 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6ca2:	7c00      	ldrb	r0, [r0, #16]
   d6ca4:	f7ff b8ec 	b.w	d5e80 <HAL_USB_USART_Flush_Data>

000d6ca8 <_ZN9USBSerialD0Ev>:
   d6ca8:	b510      	push	{r4, lr}
   d6caa:	2114      	movs	r1, #20
   d6cac:	4604      	mov	r4, r0
   d6cae:	f000 fc7f 	bl	d75b0 <_ZdlPvj>
   d6cb2:	4620      	mov	r0, r4
   d6cb4:	bd10      	pop	{r4, pc}

000d6cb6 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6cb6:	b538      	push	{r3, r4, r5, lr}
   d6cb8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6cba:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6cbc:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6cbe:	f7ff f8c7 	bl	d5e50 <HAL_USB_USART_Available_Data_For_Write>
   d6cc2:	2800      	cmp	r0, #0
   d6cc4:	dc01      	bgt.n	d6cca <_ZN9USBSerial5writeEh+0x14>
   d6cc6:	7c60      	ldrb	r0, [r4, #17]
   d6cc8:	b128      	cbz	r0, d6cd6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6cca:	4629      	mov	r1, r5
   d6ccc:	7c20      	ldrb	r0, [r4, #16]
   d6cce:	f7ff f8cf 	bl	d5e70 <HAL_USB_USART_Send_Data>
   d6cd2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6cd6:	bd38      	pop	{r3, r4, r5, pc}

000d6cd8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6cd8:	b510      	push	{r4, lr}
   d6cda:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6cdc:	2300      	movs	r3, #0
   d6cde:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6ce0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6ce4:	60a3      	str	r3, [r4, #8]
   d6ce6:	4b05      	ldr	r3, [pc, #20]	; (d6cfc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6ce8:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6cea:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6cec:	4608      	mov	r0, r1
{
  _serial = serial;
   d6cee:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6cf0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6cf2:	4611      	mov	r1, r2
   d6cf4:	f7ff f894 	bl	d5e20 <HAL_USB_USART_Init>
}
   d6cf8:	4620      	mov	r0, r4
   d6cfa:	bd10      	pop	{r4, pc}
   d6cfc:	000d86d8 	.word	0x000d86d8

000d6d00 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6d00:	2200      	movs	r2, #0
   d6d02:	7c00      	ldrb	r0, [r0, #16]
   d6d04:	f7ff b894 	b.w	d5e30 <HAL_USB_USART_Begin>

000d6d08 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6d08:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6d0a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6d0c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6d0e:	2100      	movs	r1, #0
   d6d10:	f001 fac3 	bl	d829a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6d14:	4620      	mov	r0, r4
   d6d16:	bd10      	pop	{r4, pc}

000d6d18 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6d18:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6d1a:	4d0e      	ldr	r5, [pc, #56]	; (d6d54 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6d1c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6d1e:	a801      	add	r0, sp, #4
   d6d20:	f7ff fff2 	bl	d6d08 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6d24:	6829      	ldr	r1, [r5, #0]
   d6d26:	f011 0401 	ands.w	r4, r1, #1
   d6d2a:	d110      	bne.n	d6d4e <_Z16_fetch_usbserialv+0x36>
   d6d2c:	4628      	mov	r0, r5
   d6d2e:	f7fd f9b6 	bl	d409e <__cxa_guard_acquire>
   d6d32:	b160      	cbz	r0, d6d4e <_Z16_fetch_usbserialv+0x36>
   d6d34:	aa01      	add	r2, sp, #4
   d6d36:	4621      	mov	r1, r4
   d6d38:	4807      	ldr	r0, [pc, #28]	; (d6d58 <_Z16_fetch_usbserialv+0x40>)
   d6d3a:	f7ff ffcd 	bl	d6cd8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6d3e:	4628      	mov	r0, r5
   d6d40:	f7fd f9b2 	bl	d40a8 <__cxa_guard_release>
   d6d44:	4a05      	ldr	r2, [pc, #20]	; (d6d5c <_Z16_fetch_usbserialv+0x44>)
   d6d46:	4906      	ldr	r1, [pc, #24]	; (d6d60 <_Z16_fetch_usbserialv+0x48>)
   d6d48:	4803      	ldr	r0, [pc, #12]	; (d6d58 <_Z16_fetch_usbserialv+0x40>)
   d6d4a:	f000 fc23 	bl	d7594 <__aeabi_atexit>
	return _usbserial;
}
   d6d4e:	4802      	ldr	r0, [pc, #8]	; (d6d58 <_Z16_fetch_usbserialv+0x40>)
   d6d50:	b007      	add	sp, #28
   d6d52:	bd30      	pop	{r4, r5, pc}
   d6d54:	2003e3d4 	.word	0x2003e3d4
   d6d58:	2003e3d8 	.word	0x2003e3d8
   d6d5c:	2003dda0 	.word	0x2003dda0
   d6d60:	000d6c59 	.word	0x000d6c59

000d6d64 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d6d64:	4700      	bx	r0
	...

000d6d68 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d6d68:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6d6a:	b085      	sub	sp, #20
   d6d6c:	461c      	mov	r4, r3
   d6d6e:	460e      	mov	r6, r1
   d6d70:	4617      	mov	r7, r2
   d6d72:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   d6d74:	f7fe fe9c 	bl	d5ab0 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   d6d78:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d6d7a:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d6d7c:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d6d80:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d6d82:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d6d86:	bfa5      	ittet	ge
   d6d88:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d6d8c:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d6d90:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d6d92:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d6d94:	9300      	str	r3, [sp, #0]
   d6d96:	4632      	mov	r2, r6
   d6d98:	463b      	mov	r3, r7
   d6d9a:	4906      	ldr	r1, [pc, #24]	; (d6db4 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d6d9c:	bfa8      	it	ge
   d6d9e:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d6da2:	4628      	mov	r0, r5
   d6da4:	f7fe fe7c 	bl	d5aa0 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d6da8:	fab0 f080 	clz	r0, r0
   d6dac:	0940      	lsrs	r0, r0, #5
   d6dae:	b005      	add	sp, #20
   d6db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6db2:	bf00      	nop
   d6db4:	000d6d65 	.word	0x000d6d65

000d6db8 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d6db8:	f7fe be8a 	b.w	d5ad0 <HAL_Interrupts_Disable_All>

000d6dbc <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d6dbc:	f7fe be80 	b.w	d5ac0 <HAL_Interrupts_Enable_All>

000d6dc0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d6dc0:	2200      	movs	r2, #0
   d6dc2:	4611      	mov	r1, r2
   d6dc4:	6840      	ldr	r0, [r0, #4]
   d6dc6:	f7ff b8b7 	b.w	d5f38 <network_ready>

000d6dca <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6dca:	2200      	movs	r2, #0
   d6dcc:	4611      	mov	r1, r2
   d6dce:	6840      	ldr	r0, [r0, #4]
   d6dd0:	f7ff b8d2 	b.w	d5f78 <network_listening>

000d6dd4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6dd4:	2200      	movs	r2, #0
   d6dd6:	4611      	mov	r1, r2
   d6dd8:	6840      	ldr	r0, [r0, #4]
   d6dda:	f7ff b8dd 	b.w	d5f98 <network_get_listen_timeout>

000d6dde <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6dde:	2200      	movs	r2, #0
   d6de0:	6840      	ldr	r0, [r0, #4]
   d6de2:	f7ff b8d1 	b.w	d5f88 <network_set_listen_timeout>

000d6de6 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6de6:	2200      	movs	r2, #0
   d6de8:	f081 0101 	eor.w	r1, r1, #1
   d6dec:	6840      	ldr	r0, [r0, #4]
   d6dee:	f7ff b8bb 	b.w	d5f68 <network_listen>

000d6df2 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d6df2:	2300      	movs	r3, #0
   d6df4:	461a      	mov	r2, r3
   d6df6:	4619      	mov	r1, r3
   d6df8:	6840      	ldr	r0, [r0, #4]
   d6dfa:	f7ff b8ad 	b.w	d5f58 <network_off>

000d6dfe <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d6dfe:	2300      	movs	r3, #0
   d6e00:	461a      	mov	r2, r3
   d6e02:	4619      	mov	r1, r3
   d6e04:	6840      	ldr	r0, [r0, #4]
   d6e06:	f7ff b89f 	b.w	d5f48 <network_on>

000d6e0a <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6e0a:	2200      	movs	r2, #0
   d6e0c:	4611      	mov	r1, r2
   d6e0e:	6840      	ldr	r0, [r0, #4]
   d6e10:	f7ff b882 	b.w	d5f18 <network_connecting>

000d6e14 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6e14:	2200      	movs	r2, #0
   d6e16:	2102      	movs	r1, #2
   d6e18:	6840      	ldr	r0, [r0, #4]
   d6e1a:	f7ff b885 	b.w	d5f28 <network_disconnect>

000d6e1e <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6e1e:	2300      	movs	r3, #0
   d6e20:	461a      	mov	r2, r3
   d6e22:	6840      	ldr	r0, [r0, #4]
   d6e24:	f7ff b870 	b.w	d5f08 <network_connect>

000d6e28 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d6e28:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d6e2a:	4b1b      	ldr	r3, [pc, #108]	; (d6e98 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d6e2c:	6003      	str	r3, [r0, #0]
   d6e2e:	2500      	movs	r5, #0
   d6e30:	460f      	mov	r7, r1
   d6e32:	3328      	adds	r3, #40	; 0x28
   d6e34:	2618      	movs	r6, #24
   d6e36:	b089      	sub	sp, #36	; 0x24
   d6e38:	6043      	str	r3, [r0, #4]
   d6e3a:	6085      	str	r5, [r0, #8]
   d6e3c:	60c5      	str	r5, [r0, #12]
   d6e3e:	4632      	mov	r2, r6
   d6e40:	4629      	mov	r1, r5
   d6e42:	4604      	mov	r4, r0
   d6e44:	3010      	adds	r0, #16
   d6e46:	f001 fa28 	bl	d829a <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d6e4a:	462a      	mov	r2, r5
   d6e4c:	4629      	mov	r1, r5
   d6e4e:	6878      	ldr	r0, [r7, #4]
   d6e50:	f7ff f872 	bl	d5f38 <network_ready>
   d6e54:	b908      	cbnz	r0, d6e5a <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d6e56:	60a0      	str	r0, [r4, #8]
            return sig;
   d6e58:	e01b      	b.n	d6e92 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d6e5a:	4629      	mov	r1, r5
   d6e5c:	4632      	mov	r2, r6
   d6e5e:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d6e60:	9500      	str	r5, [sp, #0]
   d6e62:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d6e64:	f001 fa19 	bl	d829a <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d6e68:	a902      	add	r1, sp, #8
   d6e6a:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d6e6c:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d6e70:	f7fe ffce 	bl	d5e10 <cellular_signal>
   d6e74:	b110      	cbz	r0, d6e7c <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d6e76:	2301      	movs	r3, #1
   d6e78:	60a3      	str	r3, [r4, #8]
            return sig;
   d6e7a:	e00a      	b.n	d6e92 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d6e7c:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d6e7e:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d6e80:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d6e82:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d6e84:	b90b      	cbnz	r3, d6e8a <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d6e86:	2302      	movs	r3, #2
   d6e88:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d6e8a:	a902      	add	r1, sp, #8
   d6e8c:	4620      	mov	r0, r4
   d6e8e:	f7ff fd0d 	bl	d68ac <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d6e92:	4620      	mov	r0, r4
   d6e94:	b009      	add	sp, #36	; 0x24
   d6e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6e98:	000d8690 	.word	0x000d8690

000d6e9c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d6e9c:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d6e9e:	4c08      	ldr	r4, [pc, #32]	; (d6ec0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d6ea0:	2528      	movs	r5, #40	; 0x28
   d6ea2:	462a      	mov	r2, r5
   d6ea4:	2100      	movs	r1, #0
   d6ea6:	4620      	mov	r0, r4
   d6ea8:	f001 f9f7 	bl	d829a <memset>
        cid = -1;
   d6eac:	f04f 33ff 	mov.w	r3, #4294967295
   d6eb0:	6063      	str	r3, [r4, #4]
   d6eb2:	4b04      	ldr	r3, [pc, #16]	; (d6ec4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d6eb4:	8025      	strh	r5, [r4, #0]
   d6eb6:	2204      	movs	r2, #4
   d6eb8:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d6eba:	4a03      	ldr	r2, [pc, #12]	; (d6ec8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d6ebc:	601a      	str	r2, [r3, #0]
   d6ebe:	bd38      	pop	{r3, r4, r5, pc}
   d6ec0:	2003e3f4 	.word	0x2003e3f4
   d6ec4:	2003e3ec 	.word	0x2003e3ec
   d6ec8:	000d8708 	.word	0x000d8708

000d6ecc <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6ecc:	4770      	bx	lr

000d6ece <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6ece:	7441      	strb	r1, [r0, #17]
   d6ed0:	4770      	bx	lr

000d6ed2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6ed2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6ed4:	7c00      	ldrb	r0, [r0, #16]
   d6ed6:	f7fe ff33 	bl	d5d40 <HAL_USART_Available_Data_For_Write>
}
   d6eda:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6ede:	bd08      	pop	{r3, pc}

000d6ee0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6ee0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6ee2:	7c00      	ldrb	r0, [r0, #16]
   d6ee4:	f7fe ff04 	bl	d5cf0 <HAL_USART_Available_Data>
}
   d6ee8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6eec:	bd08      	pop	{r3, pc}

000d6eee <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6eee:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6ef0:	7c00      	ldrb	r0, [r0, #16]
   d6ef2:	f7fe ff0d 	bl	d5d10 <HAL_USART_Peek_Data>
}
   d6ef6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6efa:	bf28      	it	cs
   d6efc:	f04f 30ff 	movcs.w	r0, #4294967295
   d6f00:	bd08      	pop	{r3, pc}

000d6f02 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6f02:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6f04:	7c00      	ldrb	r0, [r0, #16]
   d6f06:	f7fe fefb 	bl	d5d00 <HAL_USART_Read_Data>
}
   d6f0a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6f0e:	bf28      	it	cs
   d6f10:	f04f 30ff 	movcs.w	r0, #4294967295
   d6f14:	bd08      	pop	{r3, pc}

000d6f16 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6f16:	7c00      	ldrb	r0, [r0, #16]
   d6f18:	f7fe bf02 	b.w	d5d20 <HAL_USART_Flush_Data>

000d6f1c <_ZN11USARTSerialD0Ev>:
   d6f1c:	b510      	push	{r4, lr}
   d6f1e:	2114      	movs	r1, #20
   d6f20:	4604      	mov	r4, r0
   d6f22:	f000 fb45 	bl	d75b0 <_ZdlPvj>
   d6f26:	4620      	mov	r0, r4
   d6f28:	bd10      	pop	{r4, pc}

000d6f2a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6f2a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6f2c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6f2e:	4604      	mov	r4, r0
   d6f30:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6f32:	b925      	cbnz	r5, d6f3e <_ZN11USARTSerial5writeEh+0x14>
   d6f34:	7c00      	ldrb	r0, [r0, #16]
   d6f36:	f7fe ff03 	bl	d5d40 <HAL_USART_Available_Data_For_Write>
   d6f3a:	2800      	cmp	r0, #0
   d6f3c:	dd05      	ble.n	d6f4a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6f3e:	4631      	mov	r1, r6
   d6f40:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6f42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6f46:	f7fe becb 	b.w	d5ce0 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6f4a:	4628      	mov	r0, r5
   d6f4c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6f50 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6f50:	b510      	push	{r4, lr}
   d6f52:	4604      	mov	r4, r0
   d6f54:	4608      	mov	r0, r1
   d6f56:	4611      	mov	r1, r2
   d6f58:	2200      	movs	r2, #0
   d6f5a:	6062      	str	r2, [r4, #4]
   d6f5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6f60:	60a2      	str	r2, [r4, #8]
   d6f62:	4a05      	ldr	r2, [pc, #20]	; (d6f78 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6f64:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6f66:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6f68:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6f6a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6f6c:	461a      	mov	r2, r3
   d6f6e:	f7fe feaf 	bl	d5cd0 <HAL_USART_Init>
}
   d6f72:	4620      	mov	r0, r4
   d6f74:	bd10      	pop	{r4, pc}
   d6f76:	bf00      	nop
   d6f78:	000d873c 	.word	0x000d873c

000d6f7c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6f7c:	7c00      	ldrb	r0, [r0, #16]
   d6f7e:	f7fe bed7 	b.w	d5d30 <HAL_USART_Is_Enabled>
	...

000d6f84 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6f84:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6f86:	4d0c      	ldr	r5, [pc, #48]	; (d6fb8 <_Z22__fetch_global_Serial1v+0x34>)
   d6f88:	6829      	ldr	r1, [r5, #0]
   d6f8a:	f011 0401 	ands.w	r4, r1, #1
   d6f8e:	d111      	bne.n	d6fb4 <_Z22__fetch_global_Serial1v+0x30>
   d6f90:	4628      	mov	r0, r5
   d6f92:	f7fd f884 	bl	d409e <__cxa_guard_acquire>
   d6f96:	b168      	cbz	r0, d6fb4 <_Z22__fetch_global_Serial1v+0x30>
   d6f98:	4a08      	ldr	r2, [pc, #32]	; (d6fbc <_Z22__fetch_global_Serial1v+0x38>)
   d6f9a:	4b09      	ldr	r3, [pc, #36]	; (d6fc0 <_Z22__fetch_global_Serial1v+0x3c>)
   d6f9c:	4809      	ldr	r0, [pc, #36]	; (d6fc4 <_Z22__fetch_global_Serial1v+0x40>)
   d6f9e:	4621      	mov	r1, r4
   d6fa0:	f7ff ffd6 	bl	d6f50 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6fa4:	4628      	mov	r0, r5
   d6fa6:	f7fd f87f 	bl	d40a8 <__cxa_guard_release>
   d6faa:	4a07      	ldr	r2, [pc, #28]	; (d6fc8 <_Z22__fetch_global_Serial1v+0x44>)
   d6fac:	4907      	ldr	r1, [pc, #28]	; (d6fcc <_Z22__fetch_global_Serial1v+0x48>)
   d6fae:	4805      	ldr	r0, [pc, #20]	; (d6fc4 <_Z22__fetch_global_Serial1v+0x40>)
   d6fb0:	f000 faf0 	bl	d7594 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6fb4:	4803      	ldr	r0, [pc, #12]	; (d6fc4 <_Z22__fetch_global_Serial1v+0x40>)
   d6fb6:	bd38      	pop	{r3, r4, r5, pc}
   d6fb8:	2003e4b4 	.word	0x2003e4b4
   d6fbc:	2003e4b8 	.word	0x2003e4b8
   d6fc0:	2003e430 	.word	0x2003e430
   d6fc4:	2003e41c 	.word	0x2003e41c
   d6fc8:	2003dda0 	.word	0x2003dda0
   d6fcc:	000d6ecd 	.word	0x000d6ecd

000d6fd0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d6fd0:	4770      	bx	lr

000d6fd2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6fd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6fd4:	4606      	mov	r6, r0
   d6fd6:	4615      	mov	r5, r2
   d6fd8:	460c      	mov	r4, r1
   d6fda:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6fdc:	42bc      	cmp	r4, r7
   d6fde:	d006      	beq.n	d6fee <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6fe0:	6833      	ldr	r3, [r6, #0]
   d6fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6fe6:	689b      	ldr	r3, [r3, #8]
   d6fe8:	4630      	mov	r0, r6
   d6fea:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6fec:	e7f6      	b.n	d6fdc <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6fee:	4628      	mov	r0, r5
   d6ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6ff2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6ff2:	2200      	movs	r2, #0
   d6ff4:	7c00      	ldrb	r0, [r0, #16]
   d6ff6:	f7fe bebb 	b.w	d5d70 <HAL_I2C_Write_Data>

000d6ffa <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6ffa:	2100      	movs	r1, #0
   d6ffc:	7c00      	ldrb	r0, [r0, #16]
   d6ffe:	f7fe bebf 	b.w	d5d80 <HAL_I2C_Available_Data>

000d7002 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d7002:	2100      	movs	r1, #0
   d7004:	7c00      	ldrb	r0, [r0, #16]
   d7006:	f7fe bec3 	b.w	d5d90 <HAL_I2C_Read_Data>

000d700a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d700a:	2100      	movs	r1, #0
   d700c:	7c00      	ldrb	r0, [r0, #16]
   d700e:	f7fe bec7 	b.w	d5da0 <HAL_I2C_Peek_Data>

000d7012 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d7012:	2100      	movs	r1, #0
   d7014:	7c00      	ldrb	r0, [r0, #16]
   d7016:	f7fe becb 	b.w	d5db0 <HAL_I2C_Flush_Data>

000d701a <_ZN7TwoWireD0Ev>:
   d701a:	b510      	push	{r4, lr}
   d701c:	2114      	movs	r1, #20
   d701e:	4604      	mov	r4, r0
   d7020:	f000 fac6 	bl	d75b0 <_ZdlPvj>
   d7024:	4620      	mov	r0, r4
   d7026:	bd10      	pop	{r4, pc}

000d7028 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7028:	b510      	push	{r4, lr}
   d702a:	4604      	mov	r4, r0
   d702c:	2300      	movs	r3, #0
   d702e:	6063      	str	r3, [r4, #4]
   d7030:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7034:	60a3      	str	r3, [r4, #8]
   d7036:	4b04      	ldr	r3, [pc, #16]	; (d7048 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d7038:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d703a:	4608      	mov	r0, r1
   d703c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d703e:	4611      	mov	r1, r2
   d7040:	f7fe fec6 	bl	d5dd0 <HAL_I2C_Init>
}
   d7044:	4620      	mov	r0, r4
   d7046:	bd10      	pop	{r4, pc}
   d7048:	000d876c 	.word	0x000d876c

000d704c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d704c:	b570      	push	{r4, r5, r6, lr}
   d704e:	460c      	mov	r4, r1
   d7050:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d7052:	2514      	movs	r5, #20
   d7054:	4606      	mov	r6, r0
   d7056:	462a      	mov	r2, r5
   d7058:	2100      	movs	r1, #0
   d705a:	a801      	add	r0, sp, #4
   d705c:	f001 f91d 	bl	d829a <memset>
   d7060:	7823      	ldrb	r3, [r4, #0]
   d7062:	f88d 3008 	strb.w	r3, [sp, #8]
   d7066:	6863      	ldr	r3, [r4, #4]
   d7068:	9303      	str	r3, [sp, #12]
   d706a:	68e3      	ldr	r3, [r4, #12]
   d706c:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d706e:	2200      	movs	r2, #0
   d7070:	7a23      	ldrb	r3, [r4, #8]
   d7072:	7c30      	ldrb	r0, [r6, #16]
   d7074:	f8ad 5004 	strh.w	r5, [sp, #4]
   d7078:	a901      	add	r1, sp, #4
   d707a:	9305      	str	r3, [sp, #20]
   d707c:	f7fe fec0 	bl	d5e00 <HAL_I2C_Request_Data_Ex>
}
   d7080:	b006      	add	sp, #24
   d7082:	bd70      	pop	{r4, r5, r6, pc}

000d7084 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d7084:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7086:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d7088:	f88d 1000 	strb.w	r1, [sp]
   d708c:	f04f 0164 	mov.w	r1, #100	; 0x64
   d7090:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7092:	bf18      	it	ne
   d7094:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d7096:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d7098:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d709a:	f88d 3008 	strb.w	r3, [sp, #8]
   d709e:	f7ff ffd5 	bl	d704c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d70a2:	b005      	add	sp, #20
   d70a4:	f85d fb04 	ldr.w	pc, [sp], #4

000d70a8 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d70a8:	2200      	movs	r2, #0
   d70aa:	7c00      	ldrb	r0, [r0, #16]
   d70ac:	f7fe be50 	b.w	d5d50 <HAL_I2C_Begin_Transmission>

000d70b0 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d70b0:	b2c9      	uxtb	r1, r1
   d70b2:	f7ff bff9 	b.w	d70a8 <_ZN7TwoWire17beginTransmissionEh>

000d70b6 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d70b6:	2200      	movs	r2, #0
   d70b8:	7c00      	ldrb	r0, [r0, #16]
   d70ba:	f7fe be51 	b.w	d5d60 <HAL_I2C_End_Transmission>

000d70be <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d70be:	2100      	movs	r1, #0
   d70c0:	7c00      	ldrb	r0, [r0, #16]
   d70c2:	f7fe be7d 	b.w	d5dc0 <HAL_I2C_Is_Enabled>

000d70c6 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d70c6:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d70c8:	2100      	movs	r1, #0
   d70ca:	7c00      	ldrb	r0, [r0, #16]
   d70cc:	f7fe fe88 	bl	d5de0 <HAL_I2C_Acquire>
}
   d70d0:	fab0 f080 	clz	r0, r0
   d70d4:	0940      	lsrs	r0, r0, #5
   d70d6:	bd08      	pop	{r3, pc}

000d70d8 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d70d8:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d70da:	2100      	movs	r1, #0
   d70dc:	7c00      	ldrb	r0, [r0, #16]
   d70de:	f7fe fe87 	bl	d5df0 <HAL_I2C_Release>
}
   d70e2:	fab0 f080 	clz	r0, r0
   d70e6:	0940      	lsrs	r0, r0, #5
   d70e8:	bd08      	pop	{r3, pc}

000d70ea <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d70ea:	2200      	movs	r2, #0
   d70ec:	4611      	mov	r1, r2
   d70ee:	6840      	ldr	r0, [r0, #4]
   d70f0:	f7fe bf42 	b.w	d5f78 <network_listening>

000d70f4 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d70f4:	2200      	movs	r2, #0
   d70f6:	4611      	mov	r1, r2
   d70f8:	6840      	ldr	r0, [r0, #4]
   d70fa:	f7fe bf4d 	b.w	d5f98 <network_get_listen_timeout>

000d70fe <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d70fe:	2200      	movs	r2, #0
   d7100:	6840      	ldr	r0, [r0, #4]
   d7102:	f7fe bf41 	b.w	d5f88 <network_set_listen_timeout>

000d7106 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7106:	2200      	movs	r2, #0
   d7108:	f081 0101 	eor.w	r1, r1, #1
   d710c:	6840      	ldr	r0, [r0, #4]
   d710e:	f7fe bf2b 	b.w	d5f68 <network_listen>

000d7112 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d7112:	2300      	movs	r3, #0
   d7114:	461a      	mov	r2, r3
   d7116:	2101      	movs	r1, #1
   d7118:	6840      	ldr	r0, [r0, #4]
   d711a:	f7fe bf1d 	b.w	d5f58 <network_off>

000d711e <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d711e:	2300      	movs	r3, #0
   d7120:	461a      	mov	r2, r3
   d7122:	4619      	mov	r1, r3
   d7124:	6840      	ldr	r0, [r0, #4]
   d7126:	f7fe bf0f 	b.w	d5f48 <network_on>

000d712a <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d712a:	2200      	movs	r2, #0
   d712c:	4611      	mov	r1, r2
   d712e:	6840      	ldr	r0, [r0, #4]
   d7130:	f7fe bf02 	b.w	d5f38 <network_ready>

000d7134 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7134:	2200      	movs	r2, #0
   d7136:	4611      	mov	r1, r2
   d7138:	6840      	ldr	r0, [r0, #4]
   d713a:	f7fe beed 	b.w	d5f18 <network_connecting>

000d713e <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d713e:	2200      	movs	r2, #0
   d7140:	2102      	movs	r1, #2
   d7142:	6840      	ldr	r0, [r0, #4]
   d7144:	f7fe bef0 	b.w	d5f28 <network_disconnect>

000d7148 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7148:	2300      	movs	r3, #0
   d714a:	461a      	mov	r2, r3
   d714c:	6840      	ldr	r0, [r0, #4]
   d714e:	f7fe bedb 	b.w	d5f08 <network_connect>

000d7152 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d7152:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7154:	4605      	mov	r5, r0
   d7156:	b188      	cbz	r0, d717c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7158:	6804      	ldr	r4, [r0, #0]
   d715a:	b14c      	cbz	r4, d7170 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d715c:	68a3      	ldr	r3, [r4, #8]
   d715e:	b11b      	cbz	r3, d7168 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7160:	2203      	movs	r2, #3
   d7162:	4621      	mov	r1, r4
   d7164:	4620      	mov	r0, r4
   d7166:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7168:	2110      	movs	r1, #16
   d716a:	4620      	mov	r0, r4
   d716c:	f000 fa20 	bl	d75b0 <_ZdlPvj>
   d7170:	4628      	mov	r0, r5
   d7172:	2114      	movs	r1, #20
      }
   d7174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7178:	f000 ba1a 	b.w	d75b0 <_ZdlPvj>
   d717c:	bd38      	pop	{r3, r4, r5, pc}

000d717e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d717e:	b110      	cbz	r0, d7186 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d7180:	6803      	ldr	r3, [r0, #0]
   d7182:	685b      	ldr	r3, [r3, #4]
   d7184:	4718      	bx	r3
   d7186:	4770      	bx	lr

000d7188 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7188:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d718a:	6803      	ldr	r3, [r0, #0]
   d718c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d718e:	b1bb      	cbz	r3, d71c0 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d7190:	6858      	ldr	r0, [r3, #4]
   d7192:	f7fe fd35 	bl	d5c00 <os_thread_is_current>
   d7196:	b978      	cbnz	r0, d71b8 <_ZN6ThreadD1Ev+0x30>
   d7198:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d719a:	7c5a      	ldrb	r2, [r3, #17]
   d719c:	b912      	cbnz	r2, d71a4 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d719e:	6858      	ldr	r0, [r3, #4]
   d71a0:	f7fe fd3e 	bl	d5c20 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d71a4:	6823      	ldr	r3, [r4, #0]
   d71a6:	6858      	ldr	r0, [r3, #4]
   d71a8:	f7fe fd42 	bl	d5c30 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d71ac:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d71ae:	2300      	movs	r3, #0
   d71b0:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d71b2:	b128      	cbz	r0, d71c0 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d71b4:	f7ff ffcd 	bl	d7152 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d71b8:	6820      	ldr	r0, [r4, #0]
   d71ba:	b108      	cbz	r0, d71c0 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d71bc:	f7ff ffc9 	bl	d7152 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d71c0:	4620      	mov	r0, r4
   d71c2:	bd10      	pop	{r4, pc}

000d71c4 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d71c4:	b538      	push	{r3, r4, r5, lr}
   d71c6:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d71c8:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d71cc:	b108      	cbz	r0, d71d2 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d71ce:	f7fc ff64 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d71d2:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d71d6:	b108      	cbz	r0, d71dc <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d71d8:	f7fe fd62 	bl	d5ca0 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d71dc:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d71e0:	b135      	cbz	r5, d71f0 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d71e2:	4628      	mov	r0, r5
   d71e4:	f7ff ffd0 	bl	d7188 <_ZN6ThreadD1Ev>
   d71e8:	2104      	movs	r1, #4
   d71ea:	4628      	mov	r0, r5
   d71ec:	f000 f9e0 	bl	d75b0 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d71f0:	6820      	ldr	r0, [r4, #0]
   d71f2:	b108      	cbz	r0, d71f8 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d71f4:	f7ff ffc3 	bl	d717e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d71f8:	4620      	mov	r0, r4
   d71fa:	bd38      	pop	{r3, r4, r5, pc}

000d71fc <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d71fc:	b510      	push	{r4, lr}
   d71fe:	4b04      	ldr	r3, [pc, #16]	; (d7210 <_ZN5spark9MeshClassD1Ev+0x14>)
   d7200:	4604      	mov	r4, r0
   d7202:	f840 3b08 	str.w	r3, [r0], #8
   d7206:	f7ff ffdd 	bl	d71c4 <_ZN5spark11MeshPublishD1Ev>
   d720a:	4620      	mov	r0, r4
   d720c:	bd10      	pop	{r4, pc}
   d720e:	bf00      	nop
   d7210:	000d8794 	.word	0x000d8794

000d7214 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7214:	b538      	push	{r3, r4, r5, lr}
   d7216:	4c0e      	ldr	r4, [pc, #56]	; (d7250 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d7218:	4b0e      	ldr	r3, [pc, #56]	; (d7254 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d721a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d721c:	2500      	movs	r5, #0
   d721e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7220:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7224:	6063      	str	r3, [r4, #4]
   d7226:	60a5      	str	r5, [r4, #8]
   d7228:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d722c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7230:	f7fe fd2e 	bl	d5c90 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7234:	4b08      	ldr	r3, [pc, #32]	; (d7258 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d7236:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d723a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d723e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7240:	4620      	mov	r0, r4
   d7242:	4a06      	ldr	r2, [pc, #24]	; (d725c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7244:	4906      	ldr	r1, [pc, #24]	; (d7260 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d7246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d724a:	f000 b9a3 	b.w	d7594 <__aeabi_atexit>
   d724e:	bf00      	nop
   d7250:	2003e53c 	.word	0x2003e53c
   d7254:	000d87c8 	.word	0x000d87c8
   d7258:	000d8794 	.word	0x000d8794
   d725c:	2003dda0 	.word	0x2003dda0
   d7260:	000d71fd 	.word	0x000d71fd

000d7264 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7264:	2300      	movs	r3, #0
   d7266:	461a      	mov	r2, r3
   d7268:	6840      	ldr	r0, [r0, #4]
   d726a:	f7fe be4d 	b.w	d5f08 <network_connect>

000d726e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d726e:	2200      	movs	r2, #0
   d7270:	2102      	movs	r1, #2
   d7272:	6840      	ldr	r0, [r0, #4]
   d7274:	f7fe be58 	b.w	d5f28 <network_disconnect>

000d7278 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7278:	2200      	movs	r2, #0
   d727a:	4611      	mov	r1, r2
   d727c:	6840      	ldr	r0, [r0, #4]
   d727e:	f7fe be4b 	b.w	d5f18 <network_connecting>

000d7282 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7282:	2200      	movs	r2, #0
   d7284:	4611      	mov	r1, r2
   d7286:	6840      	ldr	r0, [r0, #4]
   d7288:	f7fe be56 	b.w	d5f38 <network_ready>

000d728c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d728c:	2300      	movs	r3, #0
   d728e:	461a      	mov	r2, r3
   d7290:	4619      	mov	r1, r3
   d7292:	6840      	ldr	r0, [r0, #4]
   d7294:	f7fe be58 	b.w	d5f48 <network_on>

000d7298 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7298:	2300      	movs	r3, #0
   d729a:	461a      	mov	r2, r3
   d729c:	4619      	mov	r1, r3
   d729e:	6840      	ldr	r0, [r0, #4]
   d72a0:	f7fe be5a 	b.w	d5f58 <network_off>

000d72a4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d72a4:	2200      	movs	r2, #0
   d72a6:	f081 0101 	eor.w	r1, r1, #1
   d72aa:	6840      	ldr	r0, [r0, #4]
   d72ac:	f7fe be5c 	b.w	d5f68 <network_listen>

000d72b0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d72b0:	2200      	movs	r2, #0
   d72b2:	6840      	ldr	r0, [r0, #4]
   d72b4:	f7fe be68 	b.w	d5f88 <network_set_listen_timeout>

000d72b8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d72b8:	2200      	movs	r2, #0
   d72ba:	4611      	mov	r1, r2
   d72bc:	6840      	ldr	r0, [r0, #4]
   d72be:	f7fe be6b 	b.w	d5f98 <network_get_listen_timeout>

000d72c2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d72c2:	2200      	movs	r2, #0
   d72c4:	4611      	mov	r1, r2
   d72c6:	6840      	ldr	r0, [r0, #4]
   d72c8:	f7fe be56 	b.w	d5f78 <network_listening>

000d72cc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d72cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d72d0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d72d2:	b095      	sub	sp, #84	; 0x54
   d72d4:	4616      	mov	r6, r2
   d72d6:	460d      	mov	r5, r1
   d72d8:	4607      	mov	r7, r0
    IPAddress addr;
   d72da:	f7ff fc83 	bl	d6be4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d72de:	4621      	mov	r1, r4
   d72e0:	2220      	movs	r2, #32
   d72e2:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d72e4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d72e6:	f000 ffd8 	bl	d829a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d72ea:	2340      	movs	r3, #64	; 0x40
   d72ec:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d72ee:	4621      	mov	r1, r4
   d72f0:	466b      	mov	r3, sp
   d72f2:	aa0c      	add	r2, sp, #48	; 0x30
   d72f4:	4630      	mov	r0, r6
   d72f6:	f7fe fba3 	bl	d5a40 <netdb_getaddrinfo>
    if (!r) {
   d72fa:	4604      	mov	r4, r0
   d72fc:	2800      	cmp	r0, #0
   d72fe:	d144      	bne.n	d738a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7300:	4602      	mov	r2, r0
   d7302:	2101      	movs	r1, #1
   d7304:	6868      	ldr	r0, [r5, #4]
   d7306:	f7fe fe17 	bl	d5f38 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d730a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d730c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d730e:	4622      	mov	r2, r4
   d7310:	6868      	ldr	r0, [r5, #4]
   d7312:	f7fe fe11 	bl	d5f38 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7316:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7318:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d731a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d731c:	2e00      	cmp	r6, #0
   d731e:	d034      	beq.n	d738a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7320:	2900      	cmp	r1, #0
   d7322:	d132      	bne.n	d738a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7324:	6873      	ldr	r3, [r6, #4]
   d7326:	2b02      	cmp	r3, #2
   d7328:	d002      	beq.n	d7330 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d732a:	2b0a      	cmp	r3, #10
   d732c:	d009      	beq.n	d7342 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d732e:	e02a      	b.n	d7386 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7330:	f1b8 0f00 	cmp.w	r8, #0
   d7334:	d027      	beq.n	d7386 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7336:	6971      	ldr	r1, [r6, #20]
   d7338:	4638      	mov	r0, r7
   d733a:	3104      	adds	r1, #4
   d733c:	f7ff fc7f 	bl	d6c3e <_ZN9IPAddressaSEPKh>
   d7340:	e020      	b.n	d7384 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7342:	f1b9 0f00 	cmp.w	r9, #0
   d7346:	d01e      	beq.n	d7386 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7348:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d734a:	2211      	movs	r2, #17
   d734c:	a801      	add	r0, sp, #4
   d734e:	f000 ffa4 	bl	d829a <memset>
                    a.v = 6;
   d7352:	2306      	movs	r3, #6
   d7354:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7358:	ad01      	add	r5, sp, #4
   d735a:	f104 0308 	add.w	r3, r4, #8
   d735e:	3418      	adds	r4, #24
   d7360:	6818      	ldr	r0, [r3, #0]
   d7362:	6859      	ldr	r1, [r3, #4]
   d7364:	462a      	mov	r2, r5
   d7366:	c203      	stmia	r2!, {r0, r1}
   d7368:	3308      	adds	r3, #8
   d736a:	42a3      	cmp	r3, r4
   d736c:	4615      	mov	r5, r2
   d736e:	d1f7      	bne.n	d7360 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7370:	a901      	add	r1, sp, #4
   d7372:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7374:	ad07      	add	r5, sp, #28
   d7376:	f7ff fc43 	bl	d6c00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d737a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d737c:	1d3c      	adds	r4, r7, #4
   d737e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7380:	682b      	ldr	r3, [r5, #0]
   d7382:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7384:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7386:	69f6      	ldr	r6, [r6, #28]
   d7388:	e7c8      	b.n	d731c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d738a:	9800      	ldr	r0, [sp, #0]
   d738c:	f7fe fb50 	bl	d5a30 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7390:	4638      	mov	r0, r7
   d7392:	b015      	add	sp, #84	; 0x54
   d7394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7398 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7398:	4b02      	ldr	r3, [pc, #8]	; (d73a4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d739a:	4a03      	ldr	r2, [pc, #12]	; (d73a8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d739c:	601a      	str	r2, [r3, #0]
   d739e:	2200      	movs	r2, #0
   d73a0:	605a      	str	r2, [r3, #4]
   d73a2:	4770      	bx	lr
   d73a4:	2003e710 	.word	0x2003e710
   d73a8:	000d87c8 	.word	0x000d87c8

000d73ac <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d73ac:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d73ae:	4e18      	ldr	r6, [pc, #96]	; (d7410 <pinAvailable+0x64>)
   d73b0:	6831      	ldr	r1, [r6, #0]
   d73b2:	f011 0501 	ands.w	r5, r1, #1
   d73b6:	4604      	mov	r4, r0
   d73b8:	d10a      	bne.n	d73d0 <pinAvailable+0x24>
   d73ba:	4630      	mov	r0, r6
   d73bc:	f7fc fe6f 	bl	d409e <__cxa_guard_acquire>
   d73c0:	b130      	cbz	r0, d73d0 <pinAvailable+0x24>
   d73c2:	4629      	mov	r1, r5
   d73c4:	4813      	ldr	r0, [pc, #76]	; (d7414 <pinAvailable+0x68>)
   d73c6:	f7fe fe7b 	bl	d60c0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d73ca:	4630      	mov	r0, r6
   d73cc:	f7fc fe6c 	bl	d40a8 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d73d0:	4810      	ldr	r0, [pc, #64]	; (d7414 <pinAvailable+0x68>)
   d73d2:	f7fe ffaa 	bl	d632a <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d73d6:	b128      	cbz	r0, d73e4 <pinAvailable+0x38>
   d73d8:	f1a4 030b 	sub.w	r3, r4, #11
   d73dc:	2b02      	cmp	r3, #2
   d73de:	d801      	bhi.n	d73e4 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d73e0:	2000      	movs	r0, #0
   d73e2:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d73e4:	f000 f88a 	bl	d74fc <_Z19__fetch_global_Wirev>
   d73e8:	f7ff fe69 	bl	d70be <_ZN7TwoWire9isEnabledEv>
   d73ec:	b108      	cbz	r0, d73f2 <pinAvailable+0x46>
   d73ee:	2c01      	cmp	r4, #1
   d73f0:	d9f6      	bls.n	d73e0 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d73f2:	f7ff fdc7 	bl	d6f84 <_Z22__fetch_global_Serial1v>
   d73f6:	f7ff fdc1 	bl	d6f7c <_ZN11USARTSerial9isEnabledEv>
   d73fa:	b118      	cbz	r0, d7404 <pinAvailable+0x58>
   d73fc:	f1a4 0309 	sub.w	r3, r4, #9
   d7400:	2b01      	cmp	r3, #1
   d7402:	d9ed      	bls.n	d73e0 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d7404:	2c23      	cmp	r4, #35	; 0x23
   d7406:	bf8c      	ite	hi
   d7408:	2000      	movhi	r0, #0
   d740a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d740c:	bd70      	pop	{r4, r5, r6, pc}
   d740e:	bf00      	nop
   d7410:	2003ddd4 	.word	0x2003ddd4
   d7414:	2003ddd8 	.word	0x2003ddd8

000d7418 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7418:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d741a:	b538      	push	{r3, r4, r5, lr}
   d741c:	4604      	mov	r4, r0
   d741e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7420:	d80a      	bhi.n	d7438 <pinMode+0x20>
   d7422:	29ff      	cmp	r1, #255	; 0xff
   d7424:	d008      	beq.n	d7438 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7426:	f7ff ffc1 	bl	d73ac <pinAvailable>
   d742a:	b128      	cbz	r0, d7438 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d742c:	4629      	mov	r1, r5
   d742e:	4620      	mov	r0, r4
}
   d7430:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7434:	f7fe bb14 	b.w	d5a60 <HAL_Pin_Mode>
   d7438:	bd38      	pop	{r3, r4, r5, pc}

000d743a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d743a:	b538      	push	{r3, r4, r5, lr}
   d743c:	4604      	mov	r4, r0
   d743e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7440:	f7fe fb16 	bl	d5a70 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7444:	28ff      	cmp	r0, #255	; 0xff
   d7446:	d010      	beq.n	d746a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7448:	2806      	cmp	r0, #6
   d744a:	d804      	bhi.n	d7456 <digitalWrite+0x1c>
   d744c:	234d      	movs	r3, #77	; 0x4d
   d744e:	fa23 f000 	lsr.w	r0, r3, r0
   d7452:	07c3      	lsls	r3, r0, #31
   d7454:	d409      	bmi.n	d746a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7456:	4620      	mov	r0, r4
   d7458:	f7ff ffa8 	bl	d73ac <pinAvailable>
   d745c:	b128      	cbz	r0, d746a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d745e:	4629      	mov	r1, r5
   d7460:	4620      	mov	r0, r4
}
   d7462:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7466:	f7fe bb0b 	b.w	d5a80 <HAL_GPIO_Write>
   d746a:	bd38      	pop	{r3, r4, r5, pc}

000d746c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d746c:	b510      	push	{r4, lr}
   d746e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7470:	f7fe fafe 	bl	d5a70 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d7474:	3804      	subs	r0, #4
   d7476:	b2c0      	uxtb	r0, r0
   d7478:	2801      	cmp	r0, #1
   d747a:	d908      	bls.n	d748e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d747c:	4620      	mov	r0, r4
   d747e:	f7ff ff95 	bl	d73ac <pinAvailable>
   d7482:	b120      	cbz	r0, d748e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7484:	4620      	mov	r0, r4
}
   d7486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d748a:	f7fe bb01 	b.w	d5a90 <HAL_GPIO_Read>
}
   d748e:	2000      	movs	r0, #0
   d7490:	bd10      	pop	{r4, pc}
	...

000d7494 <_Z17acquireWireBufferv>:
   d7494:	b570      	push	{r4, r5, r6, lr}
   d7496:	4604      	mov	r4, r0
   d7498:	2514      	movs	r5, #20
   d749a:	462a      	mov	r2, r5
   d749c:	4e09      	ldr	r6, [pc, #36]	; (d74c4 <_Z17acquireWireBufferv+0x30>)
   d749e:	2100      	movs	r1, #0
   d74a0:	f000 fefb 	bl	d829a <memset>
   d74a4:	8025      	strh	r5, [r4, #0]
   d74a6:	2520      	movs	r5, #32
   d74a8:	4631      	mov	r1, r6
   d74aa:	60a5      	str	r5, [r4, #8]
   d74ac:	6125      	str	r5, [r4, #16]
   d74ae:	4628      	mov	r0, r5
   d74b0:	f000 f880 	bl	d75b4 <_ZnajRKSt9nothrow_t>
   d74b4:	4631      	mov	r1, r6
   d74b6:	6060      	str	r0, [r4, #4]
   d74b8:	4628      	mov	r0, r5
   d74ba:	f000 f87b 	bl	d75b4 <_ZnajRKSt9nothrow_t>
   d74be:	60e0      	str	r0, [r4, #12]
   d74c0:	4620      	mov	r0, r4
   d74c2:	bd70      	pop	{r4, r5, r6, pc}
   d74c4:	000d87f4 	.word	0x000d87f4

000d74c8 <_Z18acquireWire1Bufferv>:
	return defaultWireConfig();
}

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
   d74c8:	b570      	push	{r4, r5, r6, lr}
   d74ca:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d74cc:	2514      	movs	r5, #20
   d74ce:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d74d0:	4e09      	ldr	r6, [pc, #36]	; (d74f8 <_Z18acquireWire1Bufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d74d2:	2100      	movs	r1, #0
   d74d4:	f000 fee1 	bl	d829a <memset>
   d74d8:	8025      	strh	r5, [r4, #0]
   d74da:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d74dc:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d74de:	60a5      	str	r5, [r4, #8]
   d74e0:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d74e2:	4628      	mov	r0, r5
   d74e4:	f000 f866 	bl	d75b4 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d74e8:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d74ea:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d74ec:	4628      	mov	r0, r5
   d74ee:	f000 f861 	bl	d75b4 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d74f2:	60e0      	str	r0, [r4, #12]

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
	return defaultWireConfig();
}
   d74f4:	4620      	mov	r0, r4
   d74f6:	bd70      	pop	{r4, r5, r6, pc}
   d74f8:	000d87f4 	.word	0x000d87f4

000d74fc <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d74fc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d74fe:	4d0e      	ldr	r5, [pc, #56]	; (d7538 <_Z19__fetch_global_Wirev+0x3c>)
   d7500:	6829      	ldr	r1, [r5, #0]
   d7502:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7506:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7508:	d113      	bne.n	d7532 <_Z19__fetch_global_Wirev+0x36>
   d750a:	4628      	mov	r0, r5
   d750c:	f7fc fdc7 	bl	d409e <__cxa_guard_acquire>
   d7510:	b178      	cbz	r0, d7532 <_Z19__fetch_global_Wirev+0x36>
   d7512:	a801      	add	r0, sp, #4
   d7514:	f7ff ffbe 	bl	d7494 <_Z17acquireWireBufferv>
   d7518:	aa01      	add	r2, sp, #4
   d751a:	4621      	mov	r1, r4
   d751c:	4807      	ldr	r0, [pc, #28]	; (d753c <_Z19__fetch_global_Wirev+0x40>)
   d751e:	f7ff fd83 	bl	d7028 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d7522:	4628      	mov	r0, r5
   d7524:	f7fc fdc0 	bl	d40a8 <__cxa_guard_release>
   d7528:	4a05      	ldr	r2, [pc, #20]	; (d7540 <_Z19__fetch_global_Wirev+0x44>)
   d752a:	4906      	ldr	r1, [pc, #24]	; (d7544 <_Z19__fetch_global_Wirev+0x48>)
   d752c:	4803      	ldr	r0, [pc, #12]	; (d753c <_Z19__fetch_global_Wirev+0x40>)
   d752e:	f000 f831 	bl	d7594 <__aeabi_atexit>
	return wire;
}
   d7532:	4802      	ldr	r0, [pc, #8]	; (d753c <_Z19__fetch_global_Wirev+0x40>)
   d7534:	b007      	add	sp, #28
   d7536:	bd30      	pop	{r4, r5, pc}
   d7538:	2003e71c 	.word	0x2003e71c
   d753c:	2003e734 	.word	0x2003e734
   d7540:	2003dda0 	.word	0x2003dda0
   d7544:	000d6fd1 	.word	0x000d6fd1

000d7548 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d7548:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d754a:	4c0e      	ldr	r4, [pc, #56]	; (d7584 <_Z20__fetch_global_Wire1v+0x3c>)
   d754c:	6823      	ldr	r3, [r4, #0]
   d754e:	07db      	lsls	r3, r3, #31
	return wire;
}

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d7550:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d7552:	d413      	bmi.n	d757c <_Z20__fetch_global_Wire1v+0x34>
   d7554:	4620      	mov	r0, r4
   d7556:	f7fc fda2 	bl	d409e <__cxa_guard_acquire>
   d755a:	b178      	cbz	r0, d757c <_Z20__fetch_global_Wire1v+0x34>
   d755c:	a801      	add	r0, sp, #4
   d755e:	f7ff ffb3 	bl	d74c8 <_Z18acquireWire1Bufferv>
   d7562:	aa01      	add	r2, sp, #4
   d7564:	2101      	movs	r1, #1
   d7566:	4808      	ldr	r0, [pc, #32]	; (d7588 <_Z20__fetch_global_Wire1v+0x40>)
   d7568:	f7ff fd5e 	bl	d7028 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d756c:	4620      	mov	r0, r4
   d756e:	f7fc fd9b 	bl	d40a8 <__cxa_guard_release>
   d7572:	4a06      	ldr	r2, [pc, #24]	; (d758c <_Z20__fetch_global_Wire1v+0x44>)
   d7574:	4906      	ldr	r1, [pc, #24]	; (d7590 <_Z20__fetch_global_Wire1v+0x48>)
   d7576:	4804      	ldr	r0, [pc, #16]	; (d7588 <_Z20__fetch_global_Wire1v+0x40>)
   d7578:	f000 f80c 	bl	d7594 <__aeabi_atexit>
	return wire;
}
   d757c:	4802      	ldr	r0, [pc, #8]	; (d7588 <_Z20__fetch_global_Wire1v+0x40>)
   d757e:	b006      	add	sp, #24
   d7580:	bd10      	pop	{r4, pc}
   d7582:	bf00      	nop
   d7584:	2003e748 	.word	0x2003e748
   d7588:	2003e720 	.word	0x2003e720
   d758c:	2003dda0 	.word	0x2003dda0
   d7590:	000d6fd1 	.word	0x000d6fd1

000d7594 <__aeabi_atexit>:
   d7594:	460b      	mov	r3, r1
   d7596:	4601      	mov	r1, r0
   d7598:	4618      	mov	r0, r3
   d759a:	f000 be65 	b.w	d8268 <__cxa_atexit>
	...

000d75a0 <_ZSt15get_new_handlerv>:
   d75a0:	4b02      	ldr	r3, [pc, #8]	; (d75ac <_ZSt15get_new_handlerv+0xc>)
   d75a2:	6818      	ldr	r0, [r3, #0]
   d75a4:	f3bf 8f5f 	dmb	sy
   d75a8:	4770      	bx	lr
   d75aa:	bf00      	nop
   d75ac:	2003e74c 	.word	0x2003e74c

000d75b0 <_ZdlPvj>:
   d75b0:	f7fc bd71 	b.w	d4096 <_ZdlPv>

000d75b4 <_ZnajRKSt9nothrow_t>:
   d75b4:	f000 b800 	b.w	d75b8 <_ZnwjRKSt9nothrow_t>

000d75b8 <_ZnwjRKSt9nothrow_t>:
   d75b8:	b510      	push	{r4, lr}
   d75ba:	2800      	cmp	r0, #0
   d75bc:	bf14      	ite	ne
   d75be:	4604      	movne	r4, r0
   d75c0:	2401      	moveq	r4, #1
   d75c2:	4620      	mov	r0, r4
   d75c4:	f7fe fd18 	bl	d5ff8 <malloc>
   d75c8:	b920      	cbnz	r0, d75d4 <_ZnwjRKSt9nothrow_t+0x1c>
   d75ca:	f7ff ffe9 	bl	d75a0 <_ZSt15get_new_handlerv>
   d75ce:	b108      	cbz	r0, d75d4 <_ZnwjRKSt9nothrow_t+0x1c>
   d75d0:	4780      	blx	r0
   d75d2:	e7f6      	b.n	d75c2 <_ZnwjRKSt9nothrow_t+0xa>
   d75d4:	bd10      	pop	{r4, pc}
	...

000d75d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d75d8:	4b18      	ldr	r3, [pc, #96]	; (d763c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d75da:	681a      	ldr	r2, [r3, #0]
   d75dc:	07d1      	lsls	r1, r2, #31
   d75de:	bf5c      	itt	pl
   d75e0:	2201      	movpl	r2, #1
   d75e2:	601a      	strpl	r2, [r3, #0]
   d75e4:	4b16      	ldr	r3, [pc, #88]	; (d7640 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d75e6:	681a      	ldr	r2, [r3, #0]
   d75e8:	07d2      	lsls	r2, r2, #31
   d75ea:	bf5c      	itt	pl
   d75ec:	2201      	movpl	r2, #1
   d75ee:	601a      	strpl	r2, [r3, #0]
   d75f0:	4b14      	ldr	r3, [pc, #80]	; (d7644 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d75f2:	681a      	ldr	r2, [r3, #0]
   d75f4:	07d0      	lsls	r0, r2, #31
   d75f6:	bf5c      	itt	pl
   d75f8:	2201      	movpl	r2, #1
   d75fa:	601a      	strpl	r2, [r3, #0]
   d75fc:	4b12      	ldr	r3, [pc, #72]	; (d7648 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d75fe:	681a      	ldr	r2, [r3, #0]
   d7600:	07d1      	lsls	r1, r2, #31
   d7602:	bf5c      	itt	pl
   d7604:	2201      	movpl	r2, #1
   d7606:	601a      	strpl	r2, [r3, #0]
   d7608:	4b10      	ldr	r3, [pc, #64]	; (d764c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d760a:	681a      	ldr	r2, [r3, #0]
   d760c:	07d2      	lsls	r2, r2, #31
   d760e:	bf5c      	itt	pl
   d7610:	2201      	movpl	r2, #1
   d7612:	601a      	strpl	r2, [r3, #0]
   d7614:	4b0e      	ldr	r3, [pc, #56]	; (d7650 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7616:	681a      	ldr	r2, [r3, #0]
   d7618:	07d0      	lsls	r0, r2, #31
   d761a:	bf5c      	itt	pl
   d761c:	2201      	movpl	r2, #1
   d761e:	601a      	strpl	r2, [r3, #0]
   d7620:	4b0c      	ldr	r3, [pc, #48]	; (d7654 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7622:	681a      	ldr	r2, [r3, #0]
   d7624:	07d1      	lsls	r1, r2, #31
   d7626:	bf5c      	itt	pl
   d7628:	2201      	movpl	r2, #1
   d762a:	601a      	strpl	r2, [r3, #0]
   d762c:	4b0a      	ldr	r3, [pc, #40]	; (d7658 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d762e:	681a      	ldr	r2, [r3, #0]
   d7630:	07d2      	lsls	r2, r2, #31
   d7632:	bf5c      	itt	pl
   d7634:	2201      	movpl	r2, #1
   d7636:	601a      	strpl	r2, [r3, #0]
   d7638:	4770      	bx	lr
   d763a:	bf00      	nop
   d763c:	2003e76c 	.word	0x2003e76c
   d7640:	2003e768 	.word	0x2003e768
   d7644:	2003e764 	.word	0x2003e764
   d7648:	2003e760 	.word	0x2003e760
   d764c:	2003e75c 	.word	0x2003e75c
   d7650:	2003e758 	.word	0x2003e758
   d7654:	2003e754 	.word	0x2003e754
   d7658:	2003e750 	.word	0x2003e750

000d765c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d765c:	4b24      	ldr	r3, [pc, #144]	; (d76f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d765e:	681a      	ldr	r2, [r3, #0]
   d7660:	07d0      	lsls	r0, r2, #31
   d7662:	bf5c      	itt	pl
   d7664:	2201      	movpl	r2, #1
   d7666:	601a      	strpl	r2, [r3, #0]
   d7668:	4b22      	ldr	r3, [pc, #136]	; (d76f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d766a:	681a      	ldr	r2, [r3, #0]
   d766c:	07d1      	lsls	r1, r2, #31
   d766e:	bf5c      	itt	pl
   d7670:	2201      	movpl	r2, #1
   d7672:	601a      	strpl	r2, [r3, #0]
   d7674:	4b20      	ldr	r3, [pc, #128]	; (d76f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7676:	681a      	ldr	r2, [r3, #0]
   d7678:	07d2      	lsls	r2, r2, #31
   d767a:	bf5c      	itt	pl
   d767c:	2201      	movpl	r2, #1
   d767e:	601a      	strpl	r2, [r3, #0]
   d7680:	4b1e      	ldr	r3, [pc, #120]	; (d76fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7682:	681a      	ldr	r2, [r3, #0]
   d7684:	07d0      	lsls	r0, r2, #31
   d7686:	bf5c      	itt	pl
   d7688:	2201      	movpl	r2, #1
   d768a:	601a      	strpl	r2, [r3, #0]
   d768c:	4b1c      	ldr	r3, [pc, #112]	; (d7700 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d768e:	681a      	ldr	r2, [r3, #0]
   d7690:	07d1      	lsls	r1, r2, #31
   d7692:	bf5c      	itt	pl
   d7694:	2201      	movpl	r2, #1
   d7696:	601a      	strpl	r2, [r3, #0]
   d7698:	4b1a      	ldr	r3, [pc, #104]	; (d7704 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d769a:	681a      	ldr	r2, [r3, #0]
   d769c:	07d2      	lsls	r2, r2, #31
   d769e:	bf5c      	itt	pl
   d76a0:	2201      	movpl	r2, #1
   d76a2:	601a      	strpl	r2, [r3, #0]
   d76a4:	4b18      	ldr	r3, [pc, #96]	; (d7708 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d76a6:	681a      	ldr	r2, [r3, #0]
   d76a8:	07d0      	lsls	r0, r2, #31
   d76aa:	bf5c      	itt	pl
   d76ac:	2201      	movpl	r2, #1
   d76ae:	601a      	strpl	r2, [r3, #0]
   d76b0:	4b16      	ldr	r3, [pc, #88]	; (d770c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d76b2:	681a      	ldr	r2, [r3, #0]
   d76b4:	07d1      	lsls	r1, r2, #31
   d76b6:	bf5c      	itt	pl
   d76b8:	2201      	movpl	r2, #1
   d76ba:	601a      	strpl	r2, [r3, #0]
   d76bc:	4b14      	ldr	r3, [pc, #80]	; (d7710 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d76be:	681a      	ldr	r2, [r3, #0]
   d76c0:	07d2      	lsls	r2, r2, #31
   d76c2:	bf5c      	itt	pl
   d76c4:	2201      	movpl	r2, #1
   d76c6:	601a      	strpl	r2, [r3, #0]
   d76c8:	4b12      	ldr	r3, [pc, #72]	; (d7714 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d76ca:	681a      	ldr	r2, [r3, #0]
   d76cc:	07d0      	lsls	r0, r2, #31
   d76ce:	bf5c      	itt	pl
   d76d0:	2201      	movpl	r2, #1
   d76d2:	601a      	strpl	r2, [r3, #0]
   d76d4:	4b10      	ldr	r3, [pc, #64]	; (d7718 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d76d6:	681a      	ldr	r2, [r3, #0]
   d76d8:	07d1      	lsls	r1, r2, #31
   d76da:	bf5c      	itt	pl
   d76dc:	2201      	movpl	r2, #1
   d76de:	601a      	strpl	r2, [r3, #0]
   d76e0:	4b0e      	ldr	r3, [pc, #56]	; (d771c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d76e2:	681a      	ldr	r2, [r3, #0]
   d76e4:	07d2      	lsls	r2, r2, #31
   d76e6:	bf5c      	itt	pl
   d76e8:	2201      	movpl	r2, #1
   d76ea:	601a      	strpl	r2, [r3, #0]
   d76ec:	4770      	bx	lr
   d76ee:	bf00      	nop
   d76f0:	2003e79c 	.word	0x2003e79c
   d76f4:	2003e798 	.word	0x2003e798
   d76f8:	2003e794 	.word	0x2003e794
   d76fc:	2003e790 	.word	0x2003e790
   d7700:	2003e78c 	.word	0x2003e78c
   d7704:	2003e788 	.word	0x2003e788
   d7708:	2003e784 	.word	0x2003e784
   d770c:	2003e780 	.word	0x2003e780
   d7710:	2003e77c 	.word	0x2003e77c
   d7714:	2003e778 	.word	0x2003e778
   d7718:	2003e774 	.word	0x2003e774
   d771c:	2003e770 	.word	0x2003e770

000d7720 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7720:	4b24      	ldr	r3, [pc, #144]	; (d77b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7722:	681a      	ldr	r2, [r3, #0]
   d7724:	07d0      	lsls	r0, r2, #31
   d7726:	bf5c      	itt	pl
   d7728:	2201      	movpl	r2, #1
   d772a:	601a      	strpl	r2, [r3, #0]
   d772c:	4b22      	ldr	r3, [pc, #136]	; (d77b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d772e:	681a      	ldr	r2, [r3, #0]
   d7730:	07d1      	lsls	r1, r2, #31
   d7732:	bf5c      	itt	pl
   d7734:	2201      	movpl	r2, #1
   d7736:	601a      	strpl	r2, [r3, #0]
   d7738:	4b20      	ldr	r3, [pc, #128]	; (d77bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d773a:	681a      	ldr	r2, [r3, #0]
   d773c:	07d2      	lsls	r2, r2, #31
   d773e:	bf5c      	itt	pl
   d7740:	2201      	movpl	r2, #1
   d7742:	601a      	strpl	r2, [r3, #0]
   d7744:	4b1e      	ldr	r3, [pc, #120]	; (d77c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d7746:	681a      	ldr	r2, [r3, #0]
   d7748:	07d0      	lsls	r0, r2, #31
   d774a:	bf5c      	itt	pl
   d774c:	2201      	movpl	r2, #1
   d774e:	601a      	strpl	r2, [r3, #0]
   d7750:	4b1c      	ldr	r3, [pc, #112]	; (d77c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7752:	681a      	ldr	r2, [r3, #0]
   d7754:	07d1      	lsls	r1, r2, #31
   d7756:	bf5c      	itt	pl
   d7758:	2201      	movpl	r2, #1
   d775a:	601a      	strpl	r2, [r3, #0]
   d775c:	4b1a      	ldr	r3, [pc, #104]	; (d77c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d775e:	681a      	ldr	r2, [r3, #0]
   d7760:	07d2      	lsls	r2, r2, #31
   d7762:	bf5c      	itt	pl
   d7764:	2201      	movpl	r2, #1
   d7766:	601a      	strpl	r2, [r3, #0]
   d7768:	4b18      	ldr	r3, [pc, #96]	; (d77cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d776a:	681a      	ldr	r2, [r3, #0]
   d776c:	07d0      	lsls	r0, r2, #31
   d776e:	bf5c      	itt	pl
   d7770:	2201      	movpl	r2, #1
   d7772:	601a      	strpl	r2, [r3, #0]
   d7774:	4b16      	ldr	r3, [pc, #88]	; (d77d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7776:	681a      	ldr	r2, [r3, #0]
   d7778:	07d1      	lsls	r1, r2, #31
   d777a:	bf5c      	itt	pl
   d777c:	2201      	movpl	r2, #1
   d777e:	601a      	strpl	r2, [r3, #0]
   d7780:	4b14      	ldr	r3, [pc, #80]	; (d77d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7782:	681a      	ldr	r2, [r3, #0]
   d7784:	07d2      	lsls	r2, r2, #31
   d7786:	bf5c      	itt	pl
   d7788:	2201      	movpl	r2, #1
   d778a:	601a      	strpl	r2, [r3, #0]
   d778c:	4b12      	ldr	r3, [pc, #72]	; (d77d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d778e:	681a      	ldr	r2, [r3, #0]
   d7790:	07d0      	lsls	r0, r2, #31
   d7792:	bf5c      	itt	pl
   d7794:	2201      	movpl	r2, #1
   d7796:	601a      	strpl	r2, [r3, #0]
   d7798:	4b10      	ldr	r3, [pc, #64]	; (d77dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d779a:	681a      	ldr	r2, [r3, #0]
   d779c:	07d1      	lsls	r1, r2, #31
   d779e:	bf5c      	itt	pl
   d77a0:	2201      	movpl	r2, #1
   d77a2:	601a      	strpl	r2, [r3, #0]
   d77a4:	4b0e      	ldr	r3, [pc, #56]	; (d77e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d77a6:	681a      	ldr	r2, [r3, #0]
   d77a8:	07d2      	lsls	r2, r2, #31
   d77aa:	bf5c      	itt	pl
   d77ac:	2201      	movpl	r2, #1
   d77ae:	601a      	strpl	r2, [r3, #0]
   d77b0:	4770      	bx	lr
   d77b2:	bf00      	nop
   d77b4:	2003e7cc 	.word	0x2003e7cc
   d77b8:	2003e7c8 	.word	0x2003e7c8
   d77bc:	2003e7c4 	.word	0x2003e7c4
   d77c0:	2003e7c0 	.word	0x2003e7c0
   d77c4:	2003e7bc 	.word	0x2003e7bc
   d77c8:	2003e7b8 	.word	0x2003e7b8
   d77cc:	2003e7b4 	.word	0x2003e7b4
   d77d0:	2003e7b0 	.word	0x2003e7b0
   d77d4:	2003e7ac 	.word	0x2003e7ac
   d77d8:	2003e7a8 	.word	0x2003e7a8
   d77dc:	2003e7a4 	.word	0x2003e7a4
   d77e0:	2003e7a0 	.word	0x2003e7a0

000d77e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d77e4:	4b18      	ldr	r3, [pc, #96]	; (d7848 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d77e6:	681a      	ldr	r2, [r3, #0]
   d77e8:	07d1      	lsls	r1, r2, #31
   d77ea:	bf5c      	itt	pl
   d77ec:	2201      	movpl	r2, #1
   d77ee:	601a      	strpl	r2, [r3, #0]
   d77f0:	4b16      	ldr	r3, [pc, #88]	; (d784c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d77f2:	681a      	ldr	r2, [r3, #0]
   d77f4:	07d2      	lsls	r2, r2, #31
   d77f6:	bf5c      	itt	pl
   d77f8:	2201      	movpl	r2, #1
   d77fa:	601a      	strpl	r2, [r3, #0]
   d77fc:	4b14      	ldr	r3, [pc, #80]	; (d7850 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d77fe:	681a      	ldr	r2, [r3, #0]
   d7800:	07d0      	lsls	r0, r2, #31
   d7802:	bf5c      	itt	pl
   d7804:	2201      	movpl	r2, #1
   d7806:	601a      	strpl	r2, [r3, #0]
   d7808:	4b12      	ldr	r3, [pc, #72]	; (d7854 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d780a:	681a      	ldr	r2, [r3, #0]
   d780c:	07d1      	lsls	r1, r2, #31
   d780e:	bf5c      	itt	pl
   d7810:	2201      	movpl	r2, #1
   d7812:	601a      	strpl	r2, [r3, #0]
   d7814:	4b10      	ldr	r3, [pc, #64]	; (d7858 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7816:	681a      	ldr	r2, [r3, #0]
   d7818:	07d2      	lsls	r2, r2, #31
   d781a:	bf5c      	itt	pl
   d781c:	2201      	movpl	r2, #1
   d781e:	601a      	strpl	r2, [r3, #0]
   d7820:	4b0e      	ldr	r3, [pc, #56]	; (d785c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7822:	681a      	ldr	r2, [r3, #0]
   d7824:	07d0      	lsls	r0, r2, #31
   d7826:	bf5c      	itt	pl
   d7828:	2201      	movpl	r2, #1
   d782a:	601a      	strpl	r2, [r3, #0]
   d782c:	4b0c      	ldr	r3, [pc, #48]	; (d7860 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d782e:	681a      	ldr	r2, [r3, #0]
   d7830:	07d1      	lsls	r1, r2, #31
   d7832:	bf5c      	itt	pl
   d7834:	2201      	movpl	r2, #1
   d7836:	601a      	strpl	r2, [r3, #0]
   d7838:	4b0a      	ldr	r3, [pc, #40]	; (d7864 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d783a:	681a      	ldr	r2, [r3, #0]
   d783c:	07d2      	lsls	r2, r2, #31
   d783e:	bf5c      	itt	pl
   d7840:	2201      	movpl	r2, #1
   d7842:	601a      	strpl	r2, [r3, #0]
   d7844:	4770      	bx	lr
   d7846:	bf00      	nop
   d7848:	2003e7ec 	.word	0x2003e7ec
   d784c:	2003e7e8 	.word	0x2003e7e8
   d7850:	2003e7e4 	.word	0x2003e7e4
   d7854:	2003e7e0 	.word	0x2003e7e0
   d7858:	2003e7dc 	.word	0x2003e7dc
   d785c:	2003e7d8 	.word	0x2003e7d8
   d7860:	2003e7d4 	.word	0x2003e7d4
   d7864:	2003e7d0 	.word	0x2003e7d0

000d7868 <__aeabi_drsub>:
   d7868:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d786c:	e002      	b.n	d7874 <__adddf3>
   d786e:	bf00      	nop

000d7870 <__aeabi_dsub>:
   d7870:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7874 <__adddf3>:
   d7874:	b530      	push	{r4, r5, lr}
   d7876:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d787a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d787e:	ea94 0f05 	teq	r4, r5
   d7882:	bf08      	it	eq
   d7884:	ea90 0f02 	teqeq	r0, r2
   d7888:	bf1f      	itttt	ne
   d788a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d788e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7892:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7896:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d789a:	f000 80e2 	beq.w	d7a62 <__adddf3+0x1ee>
   d789e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d78a2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d78a6:	bfb8      	it	lt
   d78a8:	426d      	neglt	r5, r5
   d78aa:	dd0c      	ble.n	d78c6 <__adddf3+0x52>
   d78ac:	442c      	add	r4, r5
   d78ae:	ea80 0202 	eor.w	r2, r0, r2
   d78b2:	ea81 0303 	eor.w	r3, r1, r3
   d78b6:	ea82 0000 	eor.w	r0, r2, r0
   d78ba:	ea83 0101 	eor.w	r1, r3, r1
   d78be:	ea80 0202 	eor.w	r2, r0, r2
   d78c2:	ea81 0303 	eor.w	r3, r1, r3
   d78c6:	2d36      	cmp	r5, #54	; 0x36
   d78c8:	bf88      	it	hi
   d78ca:	bd30      	pophi	{r4, r5, pc}
   d78cc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d78d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d78d4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d78d8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d78dc:	d002      	beq.n	d78e4 <__adddf3+0x70>
   d78de:	4240      	negs	r0, r0
   d78e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d78e4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d78e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d78ec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d78f0:	d002      	beq.n	d78f8 <__adddf3+0x84>
   d78f2:	4252      	negs	r2, r2
   d78f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d78f8:	ea94 0f05 	teq	r4, r5
   d78fc:	f000 80a7 	beq.w	d7a4e <__adddf3+0x1da>
   d7900:	f1a4 0401 	sub.w	r4, r4, #1
   d7904:	f1d5 0e20 	rsbs	lr, r5, #32
   d7908:	db0d      	blt.n	d7926 <__adddf3+0xb2>
   d790a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d790e:	fa22 f205 	lsr.w	r2, r2, r5
   d7912:	1880      	adds	r0, r0, r2
   d7914:	f141 0100 	adc.w	r1, r1, #0
   d7918:	fa03 f20e 	lsl.w	r2, r3, lr
   d791c:	1880      	adds	r0, r0, r2
   d791e:	fa43 f305 	asr.w	r3, r3, r5
   d7922:	4159      	adcs	r1, r3
   d7924:	e00e      	b.n	d7944 <__adddf3+0xd0>
   d7926:	f1a5 0520 	sub.w	r5, r5, #32
   d792a:	f10e 0e20 	add.w	lr, lr, #32
   d792e:	2a01      	cmp	r2, #1
   d7930:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7934:	bf28      	it	cs
   d7936:	f04c 0c02 	orrcs.w	ip, ip, #2
   d793a:	fa43 f305 	asr.w	r3, r3, r5
   d793e:	18c0      	adds	r0, r0, r3
   d7940:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7944:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7948:	d507      	bpl.n	d795a <__adddf3+0xe6>
   d794a:	f04f 0e00 	mov.w	lr, #0
   d794e:	f1dc 0c00 	rsbs	ip, ip, #0
   d7952:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7956:	eb6e 0101 	sbc.w	r1, lr, r1
   d795a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d795e:	d31b      	bcc.n	d7998 <__adddf3+0x124>
   d7960:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7964:	d30c      	bcc.n	d7980 <__adddf3+0x10c>
   d7966:	0849      	lsrs	r1, r1, #1
   d7968:	ea5f 0030 	movs.w	r0, r0, rrx
   d796c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7970:	f104 0401 	add.w	r4, r4, #1
   d7974:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7978:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d797c:	f080 809a 	bcs.w	d7ab4 <__adddf3+0x240>
   d7980:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7984:	bf08      	it	eq
   d7986:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d798a:	f150 0000 	adcs.w	r0, r0, #0
   d798e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7992:	ea41 0105 	orr.w	r1, r1, r5
   d7996:	bd30      	pop	{r4, r5, pc}
   d7998:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d799c:	4140      	adcs	r0, r0
   d799e:	eb41 0101 	adc.w	r1, r1, r1
   d79a2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d79a6:	f1a4 0401 	sub.w	r4, r4, #1
   d79aa:	d1e9      	bne.n	d7980 <__adddf3+0x10c>
   d79ac:	f091 0f00 	teq	r1, #0
   d79b0:	bf04      	itt	eq
   d79b2:	4601      	moveq	r1, r0
   d79b4:	2000      	moveq	r0, #0
   d79b6:	fab1 f381 	clz	r3, r1
   d79ba:	bf08      	it	eq
   d79bc:	3320      	addeq	r3, #32
   d79be:	f1a3 030b 	sub.w	r3, r3, #11
   d79c2:	f1b3 0220 	subs.w	r2, r3, #32
   d79c6:	da0c      	bge.n	d79e2 <__adddf3+0x16e>
   d79c8:	320c      	adds	r2, #12
   d79ca:	dd08      	ble.n	d79de <__adddf3+0x16a>
   d79cc:	f102 0c14 	add.w	ip, r2, #20
   d79d0:	f1c2 020c 	rsb	r2, r2, #12
   d79d4:	fa01 f00c 	lsl.w	r0, r1, ip
   d79d8:	fa21 f102 	lsr.w	r1, r1, r2
   d79dc:	e00c      	b.n	d79f8 <__adddf3+0x184>
   d79de:	f102 0214 	add.w	r2, r2, #20
   d79e2:	bfd8      	it	le
   d79e4:	f1c2 0c20 	rsble	ip, r2, #32
   d79e8:	fa01 f102 	lsl.w	r1, r1, r2
   d79ec:	fa20 fc0c 	lsr.w	ip, r0, ip
   d79f0:	bfdc      	itt	le
   d79f2:	ea41 010c 	orrle.w	r1, r1, ip
   d79f6:	4090      	lslle	r0, r2
   d79f8:	1ae4      	subs	r4, r4, r3
   d79fa:	bfa2      	ittt	ge
   d79fc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7a00:	4329      	orrge	r1, r5
   d7a02:	bd30      	popge	{r4, r5, pc}
   d7a04:	ea6f 0404 	mvn.w	r4, r4
   d7a08:	3c1f      	subs	r4, #31
   d7a0a:	da1c      	bge.n	d7a46 <__adddf3+0x1d2>
   d7a0c:	340c      	adds	r4, #12
   d7a0e:	dc0e      	bgt.n	d7a2e <__adddf3+0x1ba>
   d7a10:	f104 0414 	add.w	r4, r4, #20
   d7a14:	f1c4 0220 	rsb	r2, r4, #32
   d7a18:	fa20 f004 	lsr.w	r0, r0, r4
   d7a1c:	fa01 f302 	lsl.w	r3, r1, r2
   d7a20:	ea40 0003 	orr.w	r0, r0, r3
   d7a24:	fa21 f304 	lsr.w	r3, r1, r4
   d7a28:	ea45 0103 	orr.w	r1, r5, r3
   d7a2c:	bd30      	pop	{r4, r5, pc}
   d7a2e:	f1c4 040c 	rsb	r4, r4, #12
   d7a32:	f1c4 0220 	rsb	r2, r4, #32
   d7a36:	fa20 f002 	lsr.w	r0, r0, r2
   d7a3a:	fa01 f304 	lsl.w	r3, r1, r4
   d7a3e:	ea40 0003 	orr.w	r0, r0, r3
   d7a42:	4629      	mov	r1, r5
   d7a44:	bd30      	pop	{r4, r5, pc}
   d7a46:	fa21 f004 	lsr.w	r0, r1, r4
   d7a4a:	4629      	mov	r1, r5
   d7a4c:	bd30      	pop	{r4, r5, pc}
   d7a4e:	f094 0f00 	teq	r4, #0
   d7a52:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7a56:	bf06      	itte	eq
   d7a58:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7a5c:	3401      	addeq	r4, #1
   d7a5e:	3d01      	subne	r5, #1
   d7a60:	e74e      	b.n	d7900 <__adddf3+0x8c>
   d7a62:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7a66:	bf18      	it	ne
   d7a68:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7a6c:	d029      	beq.n	d7ac2 <__adddf3+0x24e>
   d7a6e:	ea94 0f05 	teq	r4, r5
   d7a72:	bf08      	it	eq
   d7a74:	ea90 0f02 	teqeq	r0, r2
   d7a78:	d005      	beq.n	d7a86 <__adddf3+0x212>
   d7a7a:	ea54 0c00 	orrs.w	ip, r4, r0
   d7a7e:	bf04      	itt	eq
   d7a80:	4619      	moveq	r1, r3
   d7a82:	4610      	moveq	r0, r2
   d7a84:	bd30      	pop	{r4, r5, pc}
   d7a86:	ea91 0f03 	teq	r1, r3
   d7a8a:	bf1e      	ittt	ne
   d7a8c:	2100      	movne	r1, #0
   d7a8e:	2000      	movne	r0, #0
   d7a90:	bd30      	popne	{r4, r5, pc}
   d7a92:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7a96:	d105      	bne.n	d7aa4 <__adddf3+0x230>
   d7a98:	0040      	lsls	r0, r0, #1
   d7a9a:	4149      	adcs	r1, r1
   d7a9c:	bf28      	it	cs
   d7a9e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7aa2:	bd30      	pop	{r4, r5, pc}
   d7aa4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7aa8:	bf3c      	itt	cc
   d7aaa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7aae:	bd30      	popcc	{r4, r5, pc}
   d7ab0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7ab4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7ab8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7abc:	f04f 0000 	mov.w	r0, #0
   d7ac0:	bd30      	pop	{r4, r5, pc}
   d7ac2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7ac6:	bf1a      	itte	ne
   d7ac8:	4619      	movne	r1, r3
   d7aca:	4610      	movne	r0, r2
   d7acc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7ad0:	bf1c      	itt	ne
   d7ad2:	460b      	movne	r3, r1
   d7ad4:	4602      	movne	r2, r0
   d7ad6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7ada:	bf06      	itte	eq
   d7adc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7ae0:	ea91 0f03 	teqeq	r1, r3
   d7ae4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7ae8:	bd30      	pop	{r4, r5, pc}
   d7aea:	bf00      	nop

000d7aec <__aeabi_ui2d>:
   d7aec:	f090 0f00 	teq	r0, #0
   d7af0:	bf04      	itt	eq
   d7af2:	2100      	moveq	r1, #0
   d7af4:	4770      	bxeq	lr
   d7af6:	b530      	push	{r4, r5, lr}
   d7af8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7afc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7b00:	f04f 0500 	mov.w	r5, #0
   d7b04:	f04f 0100 	mov.w	r1, #0
   d7b08:	e750      	b.n	d79ac <__adddf3+0x138>
   d7b0a:	bf00      	nop

000d7b0c <__aeabi_i2d>:
   d7b0c:	f090 0f00 	teq	r0, #0
   d7b10:	bf04      	itt	eq
   d7b12:	2100      	moveq	r1, #0
   d7b14:	4770      	bxeq	lr
   d7b16:	b530      	push	{r4, r5, lr}
   d7b18:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7b1c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7b20:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7b24:	bf48      	it	mi
   d7b26:	4240      	negmi	r0, r0
   d7b28:	f04f 0100 	mov.w	r1, #0
   d7b2c:	e73e      	b.n	d79ac <__adddf3+0x138>
   d7b2e:	bf00      	nop

000d7b30 <__aeabi_f2d>:
   d7b30:	0042      	lsls	r2, r0, #1
   d7b32:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7b36:	ea4f 0131 	mov.w	r1, r1, rrx
   d7b3a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7b3e:	bf1f      	itttt	ne
   d7b40:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7b44:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7b48:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7b4c:	4770      	bxne	lr
   d7b4e:	f092 0f00 	teq	r2, #0
   d7b52:	bf14      	ite	ne
   d7b54:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7b58:	4770      	bxeq	lr
   d7b5a:	b530      	push	{r4, r5, lr}
   d7b5c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7b60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7b64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7b68:	e720      	b.n	d79ac <__adddf3+0x138>
   d7b6a:	bf00      	nop

000d7b6c <__aeabi_ul2d>:
   d7b6c:	ea50 0201 	orrs.w	r2, r0, r1
   d7b70:	bf08      	it	eq
   d7b72:	4770      	bxeq	lr
   d7b74:	b530      	push	{r4, r5, lr}
   d7b76:	f04f 0500 	mov.w	r5, #0
   d7b7a:	e00a      	b.n	d7b92 <__aeabi_l2d+0x16>

000d7b7c <__aeabi_l2d>:
   d7b7c:	ea50 0201 	orrs.w	r2, r0, r1
   d7b80:	bf08      	it	eq
   d7b82:	4770      	bxeq	lr
   d7b84:	b530      	push	{r4, r5, lr}
   d7b86:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7b8a:	d502      	bpl.n	d7b92 <__aeabi_l2d+0x16>
   d7b8c:	4240      	negs	r0, r0
   d7b8e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7b92:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7b96:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7b9a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7b9e:	f43f aedc 	beq.w	d795a <__adddf3+0xe6>
   d7ba2:	f04f 0203 	mov.w	r2, #3
   d7ba6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7baa:	bf18      	it	ne
   d7bac:	3203      	addne	r2, #3
   d7bae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7bb2:	bf18      	it	ne
   d7bb4:	3203      	addne	r2, #3
   d7bb6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7bba:	f1c2 0320 	rsb	r3, r2, #32
   d7bbe:	fa00 fc03 	lsl.w	ip, r0, r3
   d7bc2:	fa20 f002 	lsr.w	r0, r0, r2
   d7bc6:	fa01 fe03 	lsl.w	lr, r1, r3
   d7bca:	ea40 000e 	orr.w	r0, r0, lr
   d7bce:	fa21 f102 	lsr.w	r1, r1, r2
   d7bd2:	4414      	add	r4, r2
   d7bd4:	e6c1      	b.n	d795a <__adddf3+0xe6>
   d7bd6:	bf00      	nop

000d7bd8 <__aeabi_dmul>:
   d7bd8:	b570      	push	{r4, r5, r6, lr}
   d7bda:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7bde:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7be2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7be6:	bf1d      	ittte	ne
   d7be8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7bec:	ea94 0f0c 	teqne	r4, ip
   d7bf0:	ea95 0f0c 	teqne	r5, ip
   d7bf4:	f000 f8de 	bleq	d7db4 <__aeabi_dmul+0x1dc>
   d7bf8:	442c      	add	r4, r5
   d7bfa:	ea81 0603 	eor.w	r6, r1, r3
   d7bfe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d7c02:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d7c06:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7c0a:	bf18      	it	ne
   d7c0c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7c10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7c14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7c18:	d038      	beq.n	d7c8c <__aeabi_dmul+0xb4>
   d7c1a:	fba0 ce02 	umull	ip, lr, r0, r2
   d7c1e:	f04f 0500 	mov.w	r5, #0
   d7c22:	fbe1 e502 	umlal	lr, r5, r1, r2
   d7c26:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7c2a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7c2e:	f04f 0600 	mov.w	r6, #0
   d7c32:	fbe1 5603 	umlal	r5, r6, r1, r3
   d7c36:	f09c 0f00 	teq	ip, #0
   d7c3a:	bf18      	it	ne
   d7c3c:	f04e 0e01 	orrne.w	lr, lr, #1
   d7c40:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7c44:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7c48:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7c4c:	d204      	bcs.n	d7c58 <__aeabi_dmul+0x80>
   d7c4e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d7c52:	416d      	adcs	r5, r5
   d7c54:	eb46 0606 	adc.w	r6, r6, r6
   d7c58:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7c5c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7c60:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7c64:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7c68:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7c6c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7c70:	bf88      	it	hi
   d7c72:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7c76:	d81e      	bhi.n	d7cb6 <__aeabi_dmul+0xde>
   d7c78:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7c7c:	bf08      	it	eq
   d7c7e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d7c82:	f150 0000 	adcs.w	r0, r0, #0
   d7c86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7c8a:	bd70      	pop	{r4, r5, r6, pc}
   d7c8c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7c90:	ea46 0101 	orr.w	r1, r6, r1
   d7c94:	ea40 0002 	orr.w	r0, r0, r2
   d7c98:	ea81 0103 	eor.w	r1, r1, r3
   d7c9c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7ca0:	bfc2      	ittt	gt
   d7ca2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7ca6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7caa:	bd70      	popgt	{r4, r5, r6, pc}
   d7cac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7cb0:	f04f 0e00 	mov.w	lr, #0
   d7cb4:	3c01      	subs	r4, #1
   d7cb6:	f300 80ab 	bgt.w	d7e10 <__aeabi_dmul+0x238>
   d7cba:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7cbe:	bfde      	ittt	le
   d7cc0:	2000      	movle	r0, #0
   d7cc2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d7cc6:	bd70      	pople	{r4, r5, r6, pc}
   d7cc8:	f1c4 0400 	rsb	r4, r4, #0
   d7ccc:	3c20      	subs	r4, #32
   d7cce:	da35      	bge.n	d7d3c <__aeabi_dmul+0x164>
   d7cd0:	340c      	adds	r4, #12
   d7cd2:	dc1b      	bgt.n	d7d0c <__aeabi_dmul+0x134>
   d7cd4:	f104 0414 	add.w	r4, r4, #20
   d7cd8:	f1c4 0520 	rsb	r5, r4, #32
   d7cdc:	fa00 f305 	lsl.w	r3, r0, r5
   d7ce0:	fa20 f004 	lsr.w	r0, r0, r4
   d7ce4:	fa01 f205 	lsl.w	r2, r1, r5
   d7ce8:	ea40 0002 	orr.w	r0, r0, r2
   d7cec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7cf0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7cf4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7cf8:	fa21 f604 	lsr.w	r6, r1, r4
   d7cfc:	eb42 0106 	adc.w	r1, r2, r6
   d7d00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7d04:	bf08      	it	eq
   d7d06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7d0a:	bd70      	pop	{r4, r5, r6, pc}
   d7d0c:	f1c4 040c 	rsb	r4, r4, #12
   d7d10:	f1c4 0520 	rsb	r5, r4, #32
   d7d14:	fa00 f304 	lsl.w	r3, r0, r4
   d7d18:	fa20 f005 	lsr.w	r0, r0, r5
   d7d1c:	fa01 f204 	lsl.w	r2, r1, r4
   d7d20:	ea40 0002 	orr.w	r0, r0, r2
   d7d24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7d28:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7d2c:	f141 0100 	adc.w	r1, r1, #0
   d7d30:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7d34:	bf08      	it	eq
   d7d36:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7d3a:	bd70      	pop	{r4, r5, r6, pc}
   d7d3c:	f1c4 0520 	rsb	r5, r4, #32
   d7d40:	fa00 f205 	lsl.w	r2, r0, r5
   d7d44:	ea4e 0e02 	orr.w	lr, lr, r2
   d7d48:	fa20 f304 	lsr.w	r3, r0, r4
   d7d4c:	fa01 f205 	lsl.w	r2, r1, r5
   d7d50:	ea43 0302 	orr.w	r3, r3, r2
   d7d54:	fa21 f004 	lsr.w	r0, r1, r4
   d7d58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7d5c:	fa21 f204 	lsr.w	r2, r1, r4
   d7d60:	ea20 0002 	bic.w	r0, r0, r2
   d7d64:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7d68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7d6c:	bf08      	it	eq
   d7d6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7d72:	bd70      	pop	{r4, r5, r6, pc}
   d7d74:	f094 0f00 	teq	r4, #0
   d7d78:	d10f      	bne.n	d7d9a <__aeabi_dmul+0x1c2>
   d7d7a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7d7e:	0040      	lsls	r0, r0, #1
   d7d80:	eb41 0101 	adc.w	r1, r1, r1
   d7d84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7d88:	bf08      	it	eq
   d7d8a:	3c01      	subeq	r4, #1
   d7d8c:	d0f7      	beq.n	d7d7e <__aeabi_dmul+0x1a6>
   d7d8e:	ea41 0106 	orr.w	r1, r1, r6
   d7d92:	f095 0f00 	teq	r5, #0
   d7d96:	bf18      	it	ne
   d7d98:	4770      	bxne	lr
   d7d9a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7d9e:	0052      	lsls	r2, r2, #1
   d7da0:	eb43 0303 	adc.w	r3, r3, r3
   d7da4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7da8:	bf08      	it	eq
   d7daa:	3d01      	subeq	r5, #1
   d7dac:	d0f7      	beq.n	d7d9e <__aeabi_dmul+0x1c6>
   d7dae:	ea43 0306 	orr.w	r3, r3, r6
   d7db2:	4770      	bx	lr
   d7db4:	ea94 0f0c 	teq	r4, ip
   d7db8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7dbc:	bf18      	it	ne
   d7dbe:	ea95 0f0c 	teqne	r5, ip
   d7dc2:	d00c      	beq.n	d7dde <__aeabi_dmul+0x206>
   d7dc4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7dc8:	bf18      	it	ne
   d7dca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7dce:	d1d1      	bne.n	d7d74 <__aeabi_dmul+0x19c>
   d7dd0:	ea81 0103 	eor.w	r1, r1, r3
   d7dd4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7dd8:	f04f 0000 	mov.w	r0, #0
   d7ddc:	bd70      	pop	{r4, r5, r6, pc}
   d7dde:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7de2:	bf06      	itte	eq
   d7de4:	4610      	moveq	r0, r2
   d7de6:	4619      	moveq	r1, r3
   d7de8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7dec:	d019      	beq.n	d7e22 <__aeabi_dmul+0x24a>
   d7dee:	ea94 0f0c 	teq	r4, ip
   d7df2:	d102      	bne.n	d7dfa <__aeabi_dmul+0x222>
   d7df4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7df8:	d113      	bne.n	d7e22 <__aeabi_dmul+0x24a>
   d7dfa:	ea95 0f0c 	teq	r5, ip
   d7dfe:	d105      	bne.n	d7e0c <__aeabi_dmul+0x234>
   d7e00:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7e04:	bf1c      	itt	ne
   d7e06:	4610      	movne	r0, r2
   d7e08:	4619      	movne	r1, r3
   d7e0a:	d10a      	bne.n	d7e22 <__aeabi_dmul+0x24a>
   d7e0c:	ea81 0103 	eor.w	r1, r1, r3
   d7e10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7e14:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7e18:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7e1c:	f04f 0000 	mov.w	r0, #0
   d7e20:	bd70      	pop	{r4, r5, r6, pc}
   d7e22:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7e26:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7e2a:	bd70      	pop	{r4, r5, r6, pc}

000d7e2c <__aeabi_ddiv>:
   d7e2c:	b570      	push	{r4, r5, r6, lr}
   d7e2e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7e32:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7e36:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7e3a:	bf1d      	ittte	ne
   d7e3c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7e40:	ea94 0f0c 	teqne	r4, ip
   d7e44:	ea95 0f0c 	teqne	r5, ip
   d7e48:	f000 f8a7 	bleq	d7f9a <__aeabi_ddiv+0x16e>
   d7e4c:	eba4 0405 	sub.w	r4, r4, r5
   d7e50:	ea81 0e03 	eor.w	lr, r1, r3
   d7e54:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7e58:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7e5c:	f000 8088 	beq.w	d7f70 <__aeabi_ddiv+0x144>
   d7e60:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7e64:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7e68:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7e6c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7e70:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7e74:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7e78:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7e7c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7e80:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7e84:	429d      	cmp	r5, r3
   d7e86:	bf08      	it	eq
   d7e88:	4296      	cmpeq	r6, r2
   d7e8a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7e8e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7e92:	d202      	bcs.n	d7e9a <__aeabi_ddiv+0x6e>
   d7e94:	085b      	lsrs	r3, r3, #1
   d7e96:	ea4f 0232 	mov.w	r2, r2, rrx
   d7e9a:	1ab6      	subs	r6, r6, r2
   d7e9c:	eb65 0503 	sbc.w	r5, r5, r3
   d7ea0:	085b      	lsrs	r3, r3, #1
   d7ea2:	ea4f 0232 	mov.w	r2, r2, rrx
   d7ea6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7eaa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7eae:	ebb6 0e02 	subs.w	lr, r6, r2
   d7eb2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7eb6:	bf22      	ittt	cs
   d7eb8:	1ab6      	subcs	r6, r6, r2
   d7eba:	4675      	movcs	r5, lr
   d7ebc:	ea40 000c 	orrcs.w	r0, r0, ip
   d7ec0:	085b      	lsrs	r3, r3, #1
   d7ec2:	ea4f 0232 	mov.w	r2, r2, rrx
   d7ec6:	ebb6 0e02 	subs.w	lr, r6, r2
   d7eca:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7ece:	bf22      	ittt	cs
   d7ed0:	1ab6      	subcs	r6, r6, r2
   d7ed2:	4675      	movcs	r5, lr
   d7ed4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7ed8:	085b      	lsrs	r3, r3, #1
   d7eda:	ea4f 0232 	mov.w	r2, r2, rrx
   d7ede:	ebb6 0e02 	subs.w	lr, r6, r2
   d7ee2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7ee6:	bf22      	ittt	cs
   d7ee8:	1ab6      	subcs	r6, r6, r2
   d7eea:	4675      	movcs	r5, lr
   d7eec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7ef0:	085b      	lsrs	r3, r3, #1
   d7ef2:	ea4f 0232 	mov.w	r2, r2, rrx
   d7ef6:	ebb6 0e02 	subs.w	lr, r6, r2
   d7efa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7efe:	bf22      	ittt	cs
   d7f00:	1ab6      	subcs	r6, r6, r2
   d7f02:	4675      	movcs	r5, lr
   d7f04:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7f08:	ea55 0e06 	orrs.w	lr, r5, r6
   d7f0c:	d018      	beq.n	d7f40 <__aeabi_ddiv+0x114>
   d7f0e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d7f12:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d7f16:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7f1a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7f1e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d7f22:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d7f26:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7f2a:	d1c0      	bne.n	d7eae <__aeabi_ddiv+0x82>
   d7f2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7f30:	d10b      	bne.n	d7f4a <__aeabi_ddiv+0x11e>
   d7f32:	ea41 0100 	orr.w	r1, r1, r0
   d7f36:	f04f 0000 	mov.w	r0, #0
   d7f3a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7f3e:	e7b6      	b.n	d7eae <__aeabi_ddiv+0x82>
   d7f40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7f44:	bf04      	itt	eq
   d7f46:	4301      	orreq	r1, r0
   d7f48:	2000      	moveq	r0, #0
   d7f4a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7f4e:	bf88      	it	hi
   d7f50:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7f54:	f63f aeaf 	bhi.w	d7cb6 <__aeabi_dmul+0xde>
   d7f58:	ebb5 0c03 	subs.w	ip, r5, r3
   d7f5c:	bf04      	itt	eq
   d7f5e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d7f62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7f66:	f150 0000 	adcs.w	r0, r0, #0
   d7f6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7f6e:	bd70      	pop	{r4, r5, r6, pc}
   d7f70:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7f74:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7f78:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7f7c:	bfc2      	ittt	gt
   d7f7e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7f82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7f86:	bd70      	popgt	{r4, r5, r6, pc}
   d7f88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7f8c:	f04f 0e00 	mov.w	lr, #0
   d7f90:	3c01      	subs	r4, #1
   d7f92:	e690      	b.n	d7cb6 <__aeabi_dmul+0xde>
   d7f94:	ea45 0e06 	orr.w	lr, r5, r6
   d7f98:	e68d      	b.n	d7cb6 <__aeabi_dmul+0xde>
   d7f9a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7f9e:	ea94 0f0c 	teq	r4, ip
   d7fa2:	bf08      	it	eq
   d7fa4:	ea95 0f0c 	teqeq	r5, ip
   d7fa8:	f43f af3b 	beq.w	d7e22 <__aeabi_dmul+0x24a>
   d7fac:	ea94 0f0c 	teq	r4, ip
   d7fb0:	d10a      	bne.n	d7fc8 <__aeabi_ddiv+0x19c>
   d7fb2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7fb6:	f47f af34 	bne.w	d7e22 <__aeabi_dmul+0x24a>
   d7fba:	ea95 0f0c 	teq	r5, ip
   d7fbe:	f47f af25 	bne.w	d7e0c <__aeabi_dmul+0x234>
   d7fc2:	4610      	mov	r0, r2
   d7fc4:	4619      	mov	r1, r3
   d7fc6:	e72c      	b.n	d7e22 <__aeabi_dmul+0x24a>
   d7fc8:	ea95 0f0c 	teq	r5, ip
   d7fcc:	d106      	bne.n	d7fdc <__aeabi_ddiv+0x1b0>
   d7fce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7fd2:	f43f aefd 	beq.w	d7dd0 <__aeabi_dmul+0x1f8>
   d7fd6:	4610      	mov	r0, r2
   d7fd8:	4619      	mov	r1, r3
   d7fda:	e722      	b.n	d7e22 <__aeabi_dmul+0x24a>
   d7fdc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7fe0:	bf18      	it	ne
   d7fe2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7fe6:	f47f aec5 	bne.w	d7d74 <__aeabi_dmul+0x19c>
   d7fea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7fee:	f47f af0d 	bne.w	d7e0c <__aeabi_dmul+0x234>
   d7ff2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d7ff6:	f47f aeeb 	bne.w	d7dd0 <__aeabi_dmul+0x1f8>
   d7ffa:	e712      	b.n	d7e22 <__aeabi_dmul+0x24a>

000d7ffc <__gedf2>:
   d7ffc:	f04f 3cff 	mov.w	ip, #4294967295
   d8000:	e006      	b.n	d8010 <__cmpdf2+0x4>
   d8002:	bf00      	nop

000d8004 <__ledf2>:
   d8004:	f04f 0c01 	mov.w	ip, #1
   d8008:	e002      	b.n	d8010 <__cmpdf2+0x4>
   d800a:	bf00      	nop

000d800c <__cmpdf2>:
   d800c:	f04f 0c01 	mov.w	ip, #1
   d8010:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8014:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8018:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d801c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8020:	bf18      	it	ne
   d8022:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8026:	d01b      	beq.n	d8060 <__cmpdf2+0x54>
   d8028:	b001      	add	sp, #4
   d802a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d802e:	bf0c      	ite	eq
   d8030:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8034:	ea91 0f03 	teqne	r1, r3
   d8038:	bf02      	ittt	eq
   d803a:	ea90 0f02 	teqeq	r0, r2
   d803e:	2000      	moveq	r0, #0
   d8040:	4770      	bxeq	lr
   d8042:	f110 0f00 	cmn.w	r0, #0
   d8046:	ea91 0f03 	teq	r1, r3
   d804a:	bf58      	it	pl
   d804c:	4299      	cmppl	r1, r3
   d804e:	bf08      	it	eq
   d8050:	4290      	cmpeq	r0, r2
   d8052:	bf2c      	ite	cs
   d8054:	17d8      	asrcs	r0, r3, #31
   d8056:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d805a:	f040 0001 	orr.w	r0, r0, #1
   d805e:	4770      	bx	lr
   d8060:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8064:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8068:	d102      	bne.n	d8070 <__cmpdf2+0x64>
   d806a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d806e:	d107      	bne.n	d8080 <__cmpdf2+0x74>
   d8070:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8074:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8078:	d1d6      	bne.n	d8028 <__cmpdf2+0x1c>
   d807a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d807e:	d0d3      	beq.n	d8028 <__cmpdf2+0x1c>
   d8080:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8084:	4770      	bx	lr
   d8086:	bf00      	nop

000d8088 <__aeabi_cdrcmple>:
   d8088:	4684      	mov	ip, r0
   d808a:	4610      	mov	r0, r2
   d808c:	4662      	mov	r2, ip
   d808e:	468c      	mov	ip, r1
   d8090:	4619      	mov	r1, r3
   d8092:	4663      	mov	r3, ip
   d8094:	e000      	b.n	d8098 <__aeabi_cdcmpeq>
   d8096:	bf00      	nop

000d8098 <__aeabi_cdcmpeq>:
   d8098:	b501      	push	{r0, lr}
   d809a:	f7ff ffb7 	bl	d800c <__cmpdf2>
   d809e:	2800      	cmp	r0, #0
   d80a0:	bf48      	it	mi
   d80a2:	f110 0f00 	cmnmi.w	r0, #0
   d80a6:	bd01      	pop	{r0, pc}

000d80a8 <__aeabi_dcmpeq>:
   d80a8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d80ac:	f7ff fff4 	bl	d8098 <__aeabi_cdcmpeq>
   d80b0:	bf0c      	ite	eq
   d80b2:	2001      	moveq	r0, #1
   d80b4:	2000      	movne	r0, #0
   d80b6:	f85d fb08 	ldr.w	pc, [sp], #8
   d80ba:	bf00      	nop

000d80bc <__aeabi_dcmplt>:
   d80bc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d80c0:	f7ff ffea 	bl	d8098 <__aeabi_cdcmpeq>
   d80c4:	bf34      	ite	cc
   d80c6:	2001      	movcc	r0, #1
   d80c8:	2000      	movcs	r0, #0
   d80ca:	f85d fb08 	ldr.w	pc, [sp], #8
   d80ce:	bf00      	nop

000d80d0 <__aeabi_dcmple>:
   d80d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d80d4:	f7ff ffe0 	bl	d8098 <__aeabi_cdcmpeq>
   d80d8:	bf94      	ite	ls
   d80da:	2001      	movls	r0, #1
   d80dc:	2000      	movhi	r0, #0
   d80de:	f85d fb08 	ldr.w	pc, [sp], #8
   d80e2:	bf00      	nop

000d80e4 <__aeabi_dcmpge>:
   d80e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d80e8:	f7ff ffce 	bl	d8088 <__aeabi_cdrcmple>
   d80ec:	bf94      	ite	ls
   d80ee:	2001      	movls	r0, #1
   d80f0:	2000      	movhi	r0, #0
   d80f2:	f85d fb08 	ldr.w	pc, [sp], #8
   d80f6:	bf00      	nop

000d80f8 <__aeabi_dcmpgt>:
   d80f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d80fc:	f7ff ffc4 	bl	d8088 <__aeabi_cdrcmple>
   d8100:	bf34      	ite	cc
   d8102:	2001      	movcc	r0, #1
   d8104:	2000      	movcs	r0, #0
   d8106:	f85d fb08 	ldr.w	pc, [sp], #8
   d810a:	bf00      	nop

000d810c <__aeabi_dcmpun>:
   d810c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8110:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8114:	d102      	bne.n	d811c <__aeabi_dcmpun+0x10>
   d8116:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d811a:	d10a      	bne.n	d8132 <__aeabi_dcmpun+0x26>
   d811c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8120:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8124:	d102      	bne.n	d812c <__aeabi_dcmpun+0x20>
   d8126:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d812a:	d102      	bne.n	d8132 <__aeabi_dcmpun+0x26>
   d812c:	f04f 0000 	mov.w	r0, #0
   d8130:	4770      	bx	lr
   d8132:	f04f 0001 	mov.w	r0, #1
   d8136:	4770      	bx	lr

000d8138 <__aeabi_d2iz>:
   d8138:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d813c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8140:	d215      	bcs.n	d816e <__aeabi_d2iz+0x36>
   d8142:	d511      	bpl.n	d8168 <__aeabi_d2iz+0x30>
   d8144:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8148:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d814c:	d912      	bls.n	d8174 <__aeabi_d2iz+0x3c>
   d814e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8152:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8156:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d815a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d815e:	fa23 f002 	lsr.w	r0, r3, r2
   d8162:	bf18      	it	ne
   d8164:	4240      	negne	r0, r0
   d8166:	4770      	bx	lr
   d8168:	f04f 0000 	mov.w	r0, #0
   d816c:	4770      	bx	lr
   d816e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8172:	d105      	bne.n	d8180 <__aeabi_d2iz+0x48>
   d8174:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d8178:	bf08      	it	eq
   d817a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d817e:	4770      	bx	lr
   d8180:	f04f 0000 	mov.w	r0, #0
   d8184:	4770      	bx	lr
   d8186:	bf00      	nop

000d8188 <__aeabi_d2uiz>:
   d8188:	004a      	lsls	r2, r1, #1
   d818a:	d211      	bcs.n	d81b0 <__aeabi_d2uiz+0x28>
   d818c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8190:	d211      	bcs.n	d81b6 <__aeabi_d2uiz+0x2e>
   d8192:	d50d      	bpl.n	d81b0 <__aeabi_d2uiz+0x28>
   d8194:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8198:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d819c:	d40e      	bmi.n	d81bc <__aeabi_d2uiz+0x34>
   d819e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d81a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d81a6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d81aa:	fa23 f002 	lsr.w	r0, r3, r2
   d81ae:	4770      	bx	lr
   d81b0:	f04f 0000 	mov.w	r0, #0
   d81b4:	4770      	bx	lr
   d81b6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d81ba:	d102      	bne.n	d81c2 <__aeabi_d2uiz+0x3a>
   d81bc:	f04f 30ff 	mov.w	r0, #4294967295
   d81c0:	4770      	bx	lr
   d81c2:	f04f 0000 	mov.w	r0, #0
   d81c6:	4770      	bx	lr

000d81c8 <__aeabi_d2f>:
   d81c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d81cc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d81d0:	bf24      	itt	cs
   d81d2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d81d6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d81da:	d90d      	bls.n	d81f8 <__aeabi_d2f+0x30>
   d81dc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d81e0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d81e4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d81e8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d81ec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d81f0:	bf08      	it	eq
   d81f2:	f020 0001 	biceq.w	r0, r0, #1
   d81f6:	4770      	bx	lr
   d81f8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d81fc:	d121      	bne.n	d8242 <__aeabi_d2f+0x7a>
   d81fe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8202:	bfbc      	itt	lt
   d8204:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8208:	4770      	bxlt	lr
   d820a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d820e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8212:	f1c2 0218 	rsb	r2, r2, #24
   d8216:	f1c2 0c20 	rsb	ip, r2, #32
   d821a:	fa10 f30c 	lsls.w	r3, r0, ip
   d821e:	fa20 f002 	lsr.w	r0, r0, r2
   d8222:	bf18      	it	ne
   d8224:	f040 0001 	orrne.w	r0, r0, #1
   d8228:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d822c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8230:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8234:	ea40 000c 	orr.w	r0, r0, ip
   d8238:	fa23 f302 	lsr.w	r3, r3, r2
   d823c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8240:	e7cc      	b.n	d81dc <__aeabi_d2f+0x14>
   d8242:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8246:	d107      	bne.n	d8258 <__aeabi_d2f+0x90>
   d8248:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d824c:	bf1e      	ittt	ne
   d824e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8252:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8256:	4770      	bxne	lr
   d8258:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d825c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8260:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8264:	4770      	bx	lr
   d8266:	bf00      	nop

000d8268 <__cxa_atexit>:
   d8268:	b510      	push	{r4, lr}
   d826a:	4c05      	ldr	r4, [pc, #20]	; (d8280 <__cxa_atexit+0x18>)
   d826c:	4613      	mov	r3, r2
   d826e:	b12c      	cbz	r4, d827c <__cxa_atexit+0x14>
   d8270:	460a      	mov	r2, r1
   d8272:	4601      	mov	r1, r0
   d8274:	2002      	movs	r0, #2
   d8276:	f3af 8000 	nop.w
   d827a:	bd10      	pop	{r4, pc}
   d827c:	4620      	mov	r0, r4
   d827e:	bd10      	pop	{r4, pc}
   d8280:	00000000 	.word	0x00000000

000d8284 <memcpy>:
   d8284:	b510      	push	{r4, lr}
   d8286:	1e43      	subs	r3, r0, #1
   d8288:	440a      	add	r2, r1
   d828a:	4291      	cmp	r1, r2
   d828c:	d004      	beq.n	d8298 <memcpy+0x14>
   d828e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8292:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8296:	e7f8      	b.n	d828a <memcpy+0x6>
   d8298:	bd10      	pop	{r4, pc}

000d829a <memset>:
   d829a:	4402      	add	r2, r0
   d829c:	4603      	mov	r3, r0
   d829e:	4293      	cmp	r3, r2
   d82a0:	d002      	beq.n	d82a8 <memset+0xe>
   d82a2:	f803 1b01 	strb.w	r1, [r3], #1
   d82a6:	e7fa      	b.n	d829e <memset+0x4>
   d82a8:	4770      	bx	lr
	...

000d82ac <srand>:
   d82ac:	b538      	push	{r3, r4, r5, lr}
   d82ae:	4b12      	ldr	r3, [pc, #72]	; (d82f8 <srand+0x4c>)
   d82b0:	681c      	ldr	r4, [r3, #0]
   d82b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d82b4:	4605      	mov	r5, r0
   d82b6:	b9d3      	cbnz	r3, d82ee <srand+0x42>
   d82b8:	2018      	movs	r0, #24
   d82ba:	f7fd fe9d 	bl	d5ff8 <malloc>
   d82be:	f243 330e 	movw	r3, #13070	; 0x330e
   d82c2:	63a0      	str	r0, [r4, #56]	; 0x38
   d82c4:	8003      	strh	r3, [r0, #0]
   d82c6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d82ca:	8043      	strh	r3, [r0, #2]
   d82cc:	f241 2334 	movw	r3, #4660	; 0x1234
   d82d0:	8083      	strh	r3, [r0, #4]
   d82d2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d82d6:	80c3      	strh	r3, [r0, #6]
   d82d8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d82dc:	8103      	strh	r3, [r0, #8]
   d82de:	2305      	movs	r3, #5
   d82e0:	8143      	strh	r3, [r0, #10]
   d82e2:	230b      	movs	r3, #11
   d82e4:	8183      	strh	r3, [r0, #12]
   d82e6:	2201      	movs	r2, #1
   d82e8:	2300      	movs	r3, #0
   d82ea:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d82ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d82f0:	2200      	movs	r2, #0
   d82f2:	611d      	str	r5, [r3, #16]
   d82f4:	615a      	str	r2, [r3, #20]
   d82f6:	bd38      	pop	{r3, r4, r5, pc}
   d82f8:	2003dd9c 	.word	0x2003dd9c

000d82fc <strlen>:
   d82fc:	4603      	mov	r3, r0
   d82fe:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8302:	2a00      	cmp	r2, #0
   d8304:	d1fb      	bne.n	d82fe <strlen+0x2>
   d8306:	1a18      	subs	r0, r3, r0
   d8308:	3801      	subs	r0, #1
   d830a:	4770      	bx	lr

000d830c <dynalib_user>:
   d830c:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d831c:	0000 0000 550a 696e 2078 6954 656d 203a     .....Unix Time: 
   d832c:	2020 2020 2020 0020 6c63 756f 2064 7473            .cloud st
   d833c:	7461 7375 203a 2020 2020 6e00 7465 6f77     atus:     .netwo
   d834c:	6b72 7320 6174 7574 3a73 2020 0020 6973     rk status:   .si
   d835c:	6e67 6c61 7320 7274 6e65 7467 3a68 2020     gnal strength:  
   d836c:	7300 6769 616e 206c 7571 6c61 7469 3a79     .signal quality:
   d837c:	2020 0020 6142 7474 7265 2079 6f56 746c        .Battery Volt
   d838c:	6761 3a65 2020 4200 7461 6574 7972 5320     age:  .Battery S
   d839c:	434f 203a 2020 2020 0020 4144 4154 5420     OC:      .DATA T
   d83ac:	204f 5453 524f 3a45 0020 0030 440a 7665     O STORE: .0..Dev
   d83bc:	6369 2065 4449 203a 0a00 6554 7473 6e69     ice ID: ..Testin
   d83cc:	2067 4545 5250 4d4f 003a 500a 6572 7373     g EEPROM:..Press
   d83dc:	6220 7475 6f74 206e 6f66 3a72 0020 5320      button for: . S
   d83ec:	6365 6e6f 7364 0a00 6554 7473 6e69 2067     econds..Testing 
   d83fc:	7542 7474 6e6f 003a 540a 7365 6974 676e     Button:..Testing
   d840c:	5620 6c61 6576 003a 540a 7365 6974 676e      Valve:..Testing
   d841c:	5320 2044 6143 6472 003a 540a 7365 6974      SD Card:..Testi
   d842c:	676e 5220 6461 6f69 003a 550a 6b6e 6f6e     ng Radio:..Unkno
   d843c:	6e77 6320 6d6f 616d 646e 0000               wn command..

000d8448 <_ZTV5Timer>:
	...
   d8450:	4385 000d 43cd 000d 430d 000d               .C...C...C..

000d845c <_ZTVN8particle13__SPISettingsE>:
	...
   d8464:	44b9 000d                                   .D..

000d8468 <_ZTV4File>:
	...
   d8470:	44b7 000d 454f 000d 4529 000d 451d 000d     .D..OE..)E...E..
   d8480:	4499 000d 4593 000d 4517 000d 4511 000d     .D...E...E...E..

000d8490 <_ZTV6SdFile>:
	...
   d8498:	44b5 000d 4541 000d 455d 000d 4523 000d     .D..AE..]E..#E..
   d84a8:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   d84b8:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   d84c8:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   d84d8:	676e 2073 7325 6c25 2075 7325 4d20 444f     ngs %s%lu %s MOD
   d84e8:	2545 3e64 2500 3230 2558 3230 2558 3230     E%d>.%02X%02X%02
   d84f8:	2558 3230 2e58 4f4c 0047 002f 4749 2d48     X%02X.LOG./.IGH-
   d8508:	4652 364d 4839 5743 4b2d 5945 3c00 4554     RFM69HCW-KEY.<TE
   d8518:	5453 003e 543c 5345 3a54 4b4f 003e 0000     ST>.<TEST:OK>...

000d8528 <_ZTV5RFM69>:
	...
   d8530:	5691 000d                                   .V..

000d8534 <_ZTVN5spark13EthernetClassE>:
	...
   d853c:	6097 000d 608d 000d 6083 000d 6079 000d     .`...`...`..y`..
   d854c:	606d 000d 6061 000d 6055 000d 604d 000d     m`..a`..U`..M`..
   d855c:	6043 000d 6039 000d 72cd 000d               C`..9`...r..

000d8568 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d8568:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
   d8578:	002e 6e69 0066 6162 6475 5300 7265 6169     ..inf.baud.Seria
   d8588:	006c 6553 6972 6c61 0031 7974 6570 7000     l.Serial1.type.p
   d8598:	7261 6d61 6300 646d 6900 0064 6e68 0064     aram.cmd.id.hnd.
   d85a8:	7473 6d72 6600 6c69 0074 766c 006c 6461     strm.filt.lvl.ad
   d85b8:	4864 6e61 6c64 7265 7200 6d65 766f 4865     dHandler.removeH
   d85c8:	6e61 6c64 7265 6500 756e 486d 6e61 6c64     andler.enumHandl
   d85d8:	7265 0073 534a 4e4f 7453 6572 6d61 6f4c     ers.JSONStreamLo
   d85e8:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
   d85f8:	7530 0020 205d 2500 0064 202c 2800 3a29     0u .] .%d., .():
   d8608:	0020 5b20 6300 646f 2065 203d 2500 0069      . [.code = .%i.
   d8618:	6564 6174 6c69 2073 203d 0d00 000a 6e6c     details = ....ln
   d8628:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d8638:	6f6e 656e 7400 6172 6563 6900 666e 006f     none.trace.info.
   d8648:	6177 6e72 6500 7272 726f 7000 6e61 6369     warn.error.panic
   d8658:	6100 6c6c 5a00 2500 302b 6433 253a 3230     .all.Z.%+03d:%02
   d8668:	0075 5925 252d 2d6d 6425 2554 3a48 4d25     u.%Y-%m-%dT%H:%M
   d8678:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000d8688 <_ZTV14CellularSignal>:
	...
   d8690:	4671 000d 4673 000d 67e9 000d 6879 000d     qF..sF...g..yh..
   d86a0:	67ed 000d 6845 000d 6819 000d 6903 000d     .g..Eh...h...i..
   d86b0:	fffc ffff 0000 0000 692d 000d               ........-i..

000d86bc <_ZTV9IPAddress>:
	...
   d86c4:	6b81 000d 6b71 000d 6b73 000d               .k..qk..sk..

000d86d0 <_ZTV9USBSerial>:
	...
   d86d8:	6c59 000d 6ca9 000d 6cb7 000d 6471 000d     Yl...l...l..qd..
   d86e8:	6c95 000d 6c5b 000d 6c71 000d 6ca3 000d     .l..[l..ql...l..
   d86f8:	6c87 000d 6c55 000d                         .l..Ul..

000d8700 <_ZTVN5spark13CellularClassE>:
	...
   d8708:	6e1f 000d 6e15 000d 6e0b 000d 6dc1 000d     .n...n...n...m..
   d8718:	6dff 000d 6df3 000d 6de7 000d 6ddf 000d     .m...m...m...m..
   d8728:	6dd5 000d 6dcb 000d 72cd 000d               .m...m...r..

000d8734 <_ZTV11USARTSerial>:
	...
   d873c:	6ecd 000d 6f1d 000d 6f2b 000d 6471 000d     .n...o..+o..qd..
   d874c:	6ee1 000d 6f03 000d 6eef 000d 6f17 000d     .n...o...n...o..
   d875c:	6ecf 000d 6ed3 000d                         .n...n..

000d8764 <_ZTV7TwoWire>:
	...
   d876c:	6fd1 000d 701b 000d 6ff3 000d 6fd3 000d     .o...p...o...o..
   d877c:	6ffb 000d 7003 000d 700b 000d 7013 000d     .o...p...p...p..

000d878c <_ZTVN5spark9MeshClassE>:
	...
   d8794:	7149 000d 713f 000d 7135 000d 712b 000d     Iq..?q..5q..+q..
   d87a4:	711f 000d 7113 000d 7107 000d 70ff 000d     .q...q...q...p..
   d87b4:	70f5 000d 70eb 000d 72cd 000d               .p...p...r..

000d87c0 <_ZTVN5spark12NetworkClassE>:
	...
   d87c8:	7265 000d 726f 000d 7279 000d 7283 000d     er..or..yr...r..
   d87d8:	728d 000d 7299 000d 72a5 000d 72b1 000d     .r...r...r...r..
   d87e8:	72b9 000d 72c3 000d 72cd 000d               .r...r...r..

000d87f4 <_ZSt7nothrow>:
   d87f4:	0000 0000                                   ....

000d87f8 <__sf_fake_stdin>:
	...

000d8818 <__sf_fake_stdout>:
	...

000d8838 <__sf_fake_stderr>:
	...
   d8858:	0043                                        C.

000d885a <link_const_variable_data_end>:
	...

000d885c <link_constructors_location>:
   d885c:	000d40d7 	.word	0x000d40d7
   d8860:	000d42b9 	.word	0x000d42b9
   d8864:	000d42bd 	.word	0x000d42bd
   d8868:	000d42ed 	.word	0x000d42ed
   d886c:	000d4409 	.word	0x000d4409
   d8870:	000d459d 	.word	0x000d459d
   d8874:	000d4745 	.word	0x000d4745
   d8878:	000d4889 	.word	0x000d4889
   d887c:	000d48bd 	.word	0x000d48bd
   d8880:	000d48c1 	.word	0x000d48c1
   d8884:	000d48c5 	.word	0x000d48c5
   d8888:	000d48e3 	.word	0x000d48e3
   d888c:	000d48e7 	.word	0x000d48e7
   d8890:	000d48eb 	.word	0x000d48eb
   d8894:	000d48ef 	.word	0x000d48ef
   d8898:	000d4d49 	.word	0x000d4d49
   d889c:	000d4d6d 	.word	0x000d4d6d
   d88a0:	000d4d71 	.word	0x000d4d71
   d88a4:	000d4f57 	.word	0x000d4f57
   d88a8:	000d4f5b 	.word	0x000d4f5b
   d88ac:	000d4f5f 	.word	0x000d4f5f
   d88b0:	000d5315 	.word	0x000d5315
   d88b4:	000d5319 	.word	0x000d5319
   d88b8:	000d531d 	.word	0x000d531d
   d88bc:	000d53a1 	.word	0x000d53a1
   d88c0:	000d5a29 	.word	0x000d5a29
   d88c4:	000d5a2d 	.word	0x000d5a2d
   d88c8:	000d60a1 	.word	0x000d60a1
   d88cc:	000d6351 	.word	0x000d6351
   d88d0:	000d6449 	.word	0x000d6449
   d88d4:	000d6729 	.word	0x000d6729
   d88d8:	000d67a5 	.word	0x000d67a5
   d88dc:	000d67cd 	.word	0x000d67cd
   d88e0:	000d6e9d 	.word	0x000d6e9d
   d88e4:	000d7215 	.word	0x000d7215
   d88e8:	000d7399 	.word	0x000d7399
   d88ec:	000d75d9 	.word	0x000d75d9
   d88f0:	000d765d 	.word	0x000d765d
   d88f4:	000d7721 	.word	0x000d7721
   d88f8:	000d77e5 	.word	0x000d77e5

000d88fc <link_constructors_end>:
   d88fc:	00000000 	.word	0x00000000
