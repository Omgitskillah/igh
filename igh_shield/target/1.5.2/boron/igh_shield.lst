
d:/git/igh/igh_shield/target/1.5.2/boron/igh_shield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009c40  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000ddc60  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000110  2003d6e8  000ddc64  0001d6e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000ff8  2003d7f8  2003d7f8  0002d7f8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000ddd74  000ddd74  0001dd74  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000ddd9c  000ddd9c  0001dd9c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001dd3dc  00000000  00000000  0001dda0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00028124  00000000  00000000  001fb17c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003321b  00000000  00000000  002232a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000039b0  00000000  00000000  002564bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006a68  00000000  00000000  00259e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0005ec38  00000000  00000000  002608d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000703a2  00000000  00000000  002bf50b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011ccdf  00000000  00000000  0032f8ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00010cc0  00000000  00000000  0044c58c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f007 fe24 	bl	dbc7e <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f007 fe29 	bl	dbc94 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003d6e8 	.word	0x2003d6e8
   d404c:	000ddc64 	.word	0x000ddc64
   d4050:	2003d7f8 	.word	0x2003d7f8
   d4054:	2003d7f8 	.word	0x2003d7f8
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f005 fe39 	bl	d9cd4 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000ddc5c 	.word	0x000ddc5c
   d4084:	000ddbb8 	.word	0x000ddbb8

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 bb0a 	b.w	d46a0 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fb09 	bl	d46a4 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f005 bddf 	b.w	d9c58 <_post_loop>

000d409a <_Znwj>:
   d409a:	f004 bf29 	b.w	d8ef0 <malloc>

000d409e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409e:	f004 bf27 	b.w	d8ef0 <malloc>

000d40a2 <_ZdlPv>:
   d40a2:	f004 bf2d 	b.w	d8f00 <free>

000d40a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a6:	f004 bf2b 	b.w	d8f00 <free>

000d40aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40aa:	7800      	ldrb	r0, [r0, #0]
   d40ac:	fab0 f080 	clz	r0, r0
   d40b0:	0940      	lsrs	r0, r0, #5
   d40b2:	4770      	bx	lr

000d40b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b4:	2301      	movs	r3, #1
   d40b6:	7003      	strb	r3, [r0, #0]
   d40b8:	4770      	bx	lr
	...

000d40bc <igh_settings_process_settings_tuples>:
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));

} 

uint8_t igh_settings_process_settings_tuples( uint8_t * settings, uint8_t byte_tracker, uint8_t end_index )
{
   d40bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            case SUBID_WATER_DISPENSED_PERIOD_HIGH:
                if(LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH == current_tuple_length)
                {
                    uint8_t new_water_dispensed_period_high[LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH]; 
                    memcpy(new_water_dispensed_period_high, &settings[current_data_index], LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH);
                    igh_current_threshold_settings.water_dispensed_period_high = GET32(new_water_dispensed_period_high);
   d40c0:	4fb0      	ldr	r7, [pc, #704]	; (d4384 <igh_settings_process_settings_tuples+0x2c8>)
            case SUBID_MQTT_BROKER_PORT:
                if(LENGTH_SUBID_MQTT_PORT == current_tuple_length)
                {
                    uint8_t new_mqtt_port[LENGTH_SUBID_MQTT_PORT]; 
                    memcpy(new_mqtt_port, &settings[current_data_index], LENGTH_SUBID_MQTT_PORT);
                    igh_current_system_settings.broker_port = GET16(new_mqtt_port);
   d40c2:	f8df a2d8 	ldr.w	sl, [pc, #728]	; d439c <igh_settings_process_settings_tuples+0x2e0>
                    mqtt_set_broker = 1;
   d40c6:	f8df 82d8 	ldr.w	r8, [pc, #728]	; d43a0 <igh_settings_process_settings_tuples+0x2e4>
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));

} 

uint8_t igh_settings_process_settings_tuples( uint8_t * settings, uint8_t byte_tracker, uint8_t end_index )
{
   d40ca:	4605      	mov	r5, r0
   d40cc:	468b      	mov	fp, r1
   d40ce:	4691      	mov	r9, r2
    //cycle through tuples to get the settings data
    uint8_t current_tuple_id;
    uint8_t current_tuple_length;
    uint8_t current_data_index;

    while(byte_tracker < end_index)
   d40d0:	45cb      	cmp	fp, r9
   d40d2:	f080 81db 	bcs.w	d448c <igh_settings_process_settings_tuples+0x3d0>
    {
        // extract tuples
        current_tuple_id = settings[byte_tracker];
        // extract the length
        current_tuple_length = settings[byte_tracker + 1]; // should always follow
   d40d6:	eb05 030b 	add.w	r3, r5, fp
        // extract the tuple data based on tuple id
        current_data_index = byte_tracker + 2;
   d40da:	f10b 0402 	add.w	r4, fp, #2
    while(byte_tracker < end_index)
    {
        // extract tuples
        current_tuple_id = settings[byte_tracker];
        // extract the length
        current_tuple_length = settings[byte_tracker + 1]; // should always follow
   d40de:	785e      	ldrb	r6, [r3, #1]
        // extract the tuple data based on tuple id
        current_data_index = byte_tracker + 2;

        switch(current_tuple_id)
   d40e0:	f815 300b 	ldrb.w	r3, [r5, fp]
   d40e4:	3b01      	subs	r3, #1
        // extract tuples
        current_tuple_id = settings[byte_tracker];
        // extract the length
        current_tuple_length = settings[byte_tracker + 1]; // should always follow
        // extract the tuple data based on tuple id
        current_data_index = byte_tracker + 2;
   d40e6:	b2e4      	uxtb	r4, r4

        switch(current_tuple_id)
   d40e8:	2b39      	cmp	r3, #57	; 0x39
   d40ea:	f200 81c9 	bhi.w	d4480 <igh_settings_process_settings_tuples+0x3c4>
   d40ee:	e8df f013 	tbh	[pc, r3, lsl #1]
   d40f2:	003a      	.short	0x003a
   d40f4:	00820071 	.word	0x00820071
   d40f8:	00930063 	.word	0x00930063
   d40fc:	004400cf 	.word	0x004400cf
   d4100:	01b9005c 	.word	0x01b9005c
   d4104:	00bc00a6 	.word	0x00bc00a6
   d4108:	01c701c7 	.word	0x01c701c7
   d410c:	01c701c7 	.word	0x01c701c7
   d4110:	00ee00da 	.word	0x00ee00da
   d4114:	01160102 	.word	0x01160102
   d4118:	013e012a 	.word	0x013e012a
   d411c:	0174016b 	.word	0x0174016b
   d4120:	01980186 	.word	0x01980186
   d4124:	01c701aa 	.word	0x01c701aa
   d4128:	01c701c7 	.word	0x01c701c7
   d412c:	01c701c7 	.word	0x01c701c7
   d4130:	01c701c7 	.word	0x01c701c7
   d4134:	01c701c7 	.word	0x01c701c7
   d4138:	01c701c7 	.word	0x01c701c7
   d413c:	01c701c7 	.word	0x01c701c7
   d4140:	01c701c7 	.word	0x01c701c7
   d4144:	01c701c7 	.word	0x01c701c7
   d4148:	01c701c7 	.word	0x01c701c7
   d414c:	01c701c7 	.word	0x01c701c7
   d4150:	00f800e4 	.word	0x00f800e4
   d4154:	0120010c 	.word	0x0120010c
   d4158:	01590134 	.word	0x01590134
   d415c:	017d0162 	.word	0x017d0162
   d4160:	01a1018f 	.word	0x01a1018f
   d4164:	01b9      	.short	0x01b9
        {
            case SUBID_OPSTATE:
                if(LENGTH_SUBID_OPSTATE == current_tuple_length)
   d4166:	2e01      	cmp	r6, #1
   d4168:	f040 8193 	bne.w	d4492 <igh_settings_process_settings_tuples+0x3d6>
                {
                    // check if new state is valid
                    if( (OP_INACTIVE == (settings[current_data_index]))|| 
   d416c:	5d2b      	ldrb	r3, [r5, r4]
   d416e:	2b03      	cmp	r3, #3
   d4170:	f200 8186 	bhi.w	d4480 <igh_settings_process_settings_tuples+0x3c4>
                        (OP_BASIC == (settings[current_data_index]))||
                        (OP_STANDARD == (settings[current_data_index]))||
                        (OP_PREMIUM == (settings[current_data_index]))  
                    )
                    {
                        igh_current_system_settings.op_state = (device_op_state)settings[current_data_index];
   d4174:	f88a 3009 	strb.w	r3, [sl, #9]
   d4178:	e182      	b.n	d4480 <igh_settings_process_settings_tuples+0x3c4>
                    return 0;
                }
                break;

            case SUBID_TIMEZONE:
                if(LENGTH_SUBID_SUBID_TIMEZONE == current_tuple_length)
   d417a:	2e02      	cmp	r6, #2
   d417c:	f040 8189 	bne.w	d4492 <igh_settings_process_settings_tuples+0x3d6>
                {
                    // check if new timezone is valid
                    if( POSITIVE_TIME_ZONE == settings[current_data_index] )
   d4180:	5d2b      	ldrb	r3, [r5, r4]
   d4182:	2bff      	cmp	r3, #255	; 0xff
   d4184:	d105      	bne.n	d4192 <igh_settings_process_settings_tuples+0xd6>
                    {
                        if( MAX_TIMEZONE > settings[current_data_index + 1] )
   d4186:	442c      	add	r4, r5
   d4188:	7863      	ldrb	r3, [r4, #1]
   d418a:	2b0b      	cmp	r3, #11
   d418c:	f200 8178 	bhi.w	d4480 <igh_settings_process_settings_tuples+0x3c4>
   d4190:	e008      	b.n	d41a4 <igh_settings_process_settings_tuples+0xe8>
                        {
                            igh_current_system_settings.timezone = (int)settings[current_data_index + 1];
                        }
                    }

                    else if( NEGATIVE_TIME_ZONE == settings[current_data_index] )
   d4192:	2b00      	cmp	r3, #0
   d4194:	f040 8174 	bne.w	d4480 <igh_settings_process_settings_tuples+0x3c4>
                    {
                        if( MAX_TIMEZONE > settings[current_data_index + 1] )
   d4198:	442c      	add	r4, r5
   d419a:	7863      	ldrb	r3, [r4, #1]
   d419c:	2b0b      	cmp	r3, #11
   d419e:	f200 816f 	bhi.w	d4480 <igh_settings_process_settings_tuples+0x3c4>
                        {
                            igh_current_system_settings.timezone = -1 * settings[current_data_index + 1];
   d41a2:	425b      	negs	r3, r3
   d41a4:	f8ca 3004 	str.w	r3, [sl, #4]
   d41a8:	e16a      	b.n	d4480 <igh_settings_process_settings_tuples+0x3c4>
                    return 0;
                }
                break;

            case SUBID_IRRIGATION_HR:
                if(LENGTH_SUBID_SUBID_IRRIGATION_HR == current_tuple_length)
   d41aa:	2e01      	cmp	r6, #1
   d41ac:	f040 8171 	bne.w	d4492 <igh_settings_process_settings_tuples+0x3d6>
                {
                    // check if the time is within 24 hours
                    if( MAX_HOUR >  (settings[current_data_index]) ||
                        MIN_HOUR <= (settings[current_data_index]))
                    {
                        igh_current_system_settings.irrigation_hr = settings[current_data_index];
   d41b0:	5d2b      	ldrb	r3, [r5, r4]
   d41b2:	f88a 3008 	strb.w	r3, [sl, #8]
   d41b6:	e163      	b.n	d4480 <igh_settings_process_settings_tuples+0x3c4>
                    return 0;
                }
                break;

            case SUBID_SET_SERIAL_NUMBER:
                if(LENGTH_SUBID_SET_SERIAL_NUMBER == current_tuple_length)
   d41b8:	2e0c      	cmp	r6, #12
   d41ba:	f040 816a 	bne.w	d4492 <igh_settings_process_settings_tuples+0x3d6>
                {
                    memcpy(igh_current_system_settings.serial_number, &settings[current_data_index], LENGTH_SUBID_SET_SERIAL_NUMBER);
   d41be:	442c      	add	r4, r5
   d41c0:	4b71      	ldr	r3, [pc, #452]	; (d4388 <igh_settings_process_settings_tuples+0x2cc>)
   d41c2:	6820      	ldr	r0, [r4, #0]
   d41c4:	6861      	ldr	r1, [r4, #4]
   d41c6:	c303      	stmia	r3!, {r0, r1}
   d41c8:	68a0      	ldr	r0, [r4, #8]
   d41ca:	6018      	str	r0, [r3, #0]
                    initialize_rfm69 = 1;
   d41cc:	4b6f      	ldr	r3, [pc, #444]	; (d438c <igh_settings_process_settings_tuples+0x2d0>)
   d41ce:	2201      	movs	r2, #1
   d41d0:	701a      	strb	r2, [r3, #0]
                else
                {
                    // stop processing any more settings as they may be corrupt
                    return 0;
                }
                break;
   d41d2:	e155      	b.n	d4480 <igh_settings_process_settings_tuples+0x3c4>

            case SUBID_REPORTING_INTERVAL:
                if(LENGTH_SUBID_REPORTING_INTERVAL == current_tuple_length)
   d41d4:	2e04      	cmp	r6, #4
   d41d6:	f040 815c 	bne.w	d4492 <igh_settings_process_settings_tuples+0x3d6>
                {
                    uint8_t new_reporting_interval[LENGTH_SUBID_REPORTING_INTERVAL]; 
                    memcpy(new_reporting_interval, &settings[current_data_index], LENGTH_SUBID_REPORTING_INTERVAL);
   d41da:	1929      	adds	r1, r5, r4
                    igh_current_system_settings.reporting_interval = GET32(new_reporting_interval);
   d41dc:	5d2a      	ldrb	r2, [r5, r4]
   d41de:	784b      	ldrb	r3, [r1, #1]
   d41e0:	041b      	lsls	r3, r3, #16
   d41e2:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   d41e6:	78ca      	ldrb	r2, [r1, #3]
   d41e8:	4413      	add	r3, r2
   d41ea:	788a      	ldrb	r2, [r1, #2]
   d41ec:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d41f0:	f8ca 3010 	str.w	r3, [sl, #16]
                else
                {
                    // stop processing any more settings as they may be corrupt
                    return 0;
                }
                break;
   d41f4:	e144      	b.n	d4480 <igh_settings_process_settings_tuples+0x3c4>

            case SUBID_DATA_RESOLUTION:
                if(LENGTH_SUBID_DATA_RESOLUTION == current_tuple_length)
   d41f6:	2e04      	cmp	r6, #4
   d41f8:	f040 814b 	bne.w	d4492 <igh_settings_process_settings_tuples+0x3d6>
                {
                    uint8_t new_data_resolution[LENGTH_SUBID_DATA_RESOLUTION]; 
                    memcpy(new_data_resolution, &settings[current_data_index], LENGTH_SUBID_DATA_RESOLUTION);
   d41fc:	1929      	adds	r1, r5, r4
                    igh_current_system_settings.data_resolution = GET32(new_data_resolution);
   d41fe:	5d2a      	ldrb	r2, [r5, r4]
   d4200:	784b      	ldrb	r3, [r1, #1]
   d4202:	041b      	lsls	r3, r3, #16
   d4204:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   d4208:	78ca      	ldrb	r2, [r1, #3]
   d420a:	4413      	add	r3, r2
   d420c:	788a      	ldrb	r2, [r1, #2]
   d420e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4212:	f8ca 3014 	str.w	r3, [sl, #20]
                }
                else
                {
                    return 0;
                }
                break;
   d4216:	e133      	b.n	d4480 <igh_settings_process_settings_tuples+0x3c4>

            case SUBID_MQTT_BROKER:
                if( sizeof(igh_current_system_settings.broker) > current_tuple_length)
   d4218:	2e3f      	cmp	r6, #63	; 0x3f
   d421a:	f200 813a 	bhi.w	d4492 <igh_settings_process_settings_tuples+0x3d6>
                {
                    memset(igh_current_system_settings.broker, '\0', sizeof(igh_current_system_settings.broker));
   d421e:	2240      	movs	r2, #64	; 0x40
   d4220:	2100      	movs	r1, #0
   d4222:	485b      	ldr	r0, [pc, #364]	; (d4390 <igh_settings_process_settings_tuples+0x2d4>)
   d4224:	f007 fd36 	bl	dbc94 <memset>
                    memcpy(igh_current_system_settings.broker, &settings[current_data_index], current_tuple_length);
   d4228:	4632      	mov	r2, r6
   d422a:	1929      	adds	r1, r5, r4
   d422c:	4858      	ldr	r0, [pc, #352]	; (d4390 <igh_settings_process_settings_tuples+0x2d4>)
   d422e:	f007 fd26 	bl	dbc7e <memcpy>
                    igh_current_system_settings.broker[current_tuple_length] = '\0'; // terminate the string
   d4232:	eb0a 0306 	add.w	r3, sl, r6
   d4236:	2200      	movs	r2, #0
   d4238:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   d423c:	e011      	b.n	d4262 <igh_settings_process_settings_tuples+0x1a6>
                    return 0;
                }
                break;

            case SUBID_MQTT_USERNAME:
                if( sizeof(igh_current_system_settings.mqtt_username) > current_tuple_length)
   d423e:	2e1f      	cmp	r6, #31
   d4240:	f200 8127 	bhi.w	d4492 <igh_settings_process_settings_tuples+0x3d6>
                {
                    memset(igh_current_system_settings.mqtt_username, '\0', sizeof(igh_current_system_settings.mqtt_username));
   d4244:	2220      	movs	r2, #32
   d4246:	2100      	movs	r1, #0
   d4248:	4852      	ldr	r0, [pc, #328]	; (d4394 <igh_settings_process_settings_tuples+0x2d8>)
   d424a:	f007 fd23 	bl	dbc94 <memset>
                    memcpy(igh_current_system_settings.mqtt_username, &settings[current_data_index], current_tuple_length);
   d424e:	4632      	mov	r2, r6
   d4250:	1929      	adds	r1, r5, r4
   d4252:	4850      	ldr	r0, [pc, #320]	; (d4394 <igh_settings_process_settings_tuples+0x2d8>)
   d4254:	f007 fd13 	bl	dbc7e <memcpy>
                    igh_current_system_settings.mqtt_username[current_tuple_length] = '\0'; // terminate the string
   d4258:	eb0a 0306 	add.w	r3, sl, r6
   d425c:	2200      	movs	r2, #0
   d425e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
                    mqtt_set_broker = 1;
   d4262:	2301      	movs	r3, #1
   d4264:	f888 3000 	strb.w	r3, [r8]
                else
                {
                    // stop processing any more settings as they may be corrupt
                    return 0;
                }
                break;
   d4268:	e10a      	b.n	d4480 <igh_settings_process_settings_tuples+0x3c4>

            case SUBID_MQTT_PASSWORD:
                if( sizeof(igh_current_system_settings.mqtt_password) > current_tuple_length)
   d426a:	2e1f      	cmp	r6, #31
   d426c:	f200 8111 	bhi.w	d4492 <igh_settings_process_settings_tuples+0x3d6>
                {
                    memset(igh_current_system_settings.mqtt_password, '\0', sizeof(igh_current_system_settings.mqtt_password));
   d4270:	2220      	movs	r2, #32
   d4272:	2100      	movs	r1, #0
   d4274:	4848      	ldr	r0, [pc, #288]	; (d4398 <igh_settings_process_settings_tuples+0x2dc>)
   d4276:	f007 fd0d 	bl	dbc94 <memset>
                    memcpy(igh_current_system_settings.mqtt_password, &settings[current_data_index], current_tuple_length);
   d427a:	4632      	mov	r2, r6
   d427c:	1929      	adds	r1, r5, r4
   d427e:	4846      	ldr	r0, [pc, #280]	; (d4398 <igh_settings_process_settings_tuples+0x2dc>)
   d4280:	f007 fcfd 	bl	dbc7e <memcpy>
                    igh_current_system_settings.mqtt_password[current_tuple_length] = '\0'; // terminate the string
   d4284:	eb0a 0306 	add.w	r3, sl, r6
   d4288:	2200      	movs	r2, #0
   d428a:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
   d428e:	e7e8      	b.n	d4262 <igh_settings_process_settings_tuples+0x1a6>
                    return 0;
                }
                break;

            case SUBID_MQTT_BROKER_PORT:
                if(LENGTH_SUBID_MQTT_PORT == current_tuple_length)
   d4290:	2e02      	cmp	r6, #2
   d4292:	f040 80fe 	bne.w	d4492 <igh_settings_process_settings_tuples+0x3d6>
                {
                    uint8_t new_mqtt_port[LENGTH_SUBID_MQTT_PORT]; 
                    memcpy(new_mqtt_port, &settings[current_data_index], LENGTH_SUBID_MQTT_PORT);
   d4296:	192b      	adds	r3, r5, r4
                    igh_current_system_settings.broker_port = GET16(new_mqtt_port);
   d4298:	5d2a      	ldrb	r2, [r5, r4]
   d429a:	785b      	ldrb	r3, [r3, #1]
   d429c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d42a0:	f8aa 3064 	strh.w	r3, [sl, #100]	; 0x64
   d42a4:	e7dd      	b.n	d4262 <igh_settings_process_settings_tuples+0x1a6>
                    return 0;
                }
                break; 

            case SUBID_SOIL_MOISTURE_LOW:
                if(LENGTH_SUBID_SOIL_MOISTURE_LOW == current_tuple_length)
   d42a6:	2e02      	cmp	r6, #2
   d42a8:	f040 80f3 	bne.w	d4492 <igh_settings_process_settings_tuples+0x3d6>
                {
                    uint8_t new_moisture_low_th[LENGTH_SUBID_SOIL_MOISTURE_LOW]; 
                    memcpy(new_moisture_low_th, &settings[current_data_index], LENGTH_SUBID_SOIL_MOISTURE_LOW);
   d42ac:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_moisture_low = GET16(new_moisture_low_th);
   d42ae:	5d2a      	ldrb	r2, [r5, r4]
   d42b0:	785b      	ldrb	r3, [r3, #1]
   d42b2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d42b6:	807b      	strh	r3, [r7, #2]
                }
                else
                {
                    return 0;
                }
                break; 
   d42b8:	e0e2      	b.n	d4480 <igh_settings_process_settings_tuples+0x3c4>

            case SUBID_SOIL_MOISTURE_HIGH:
                if(LENGTH_SUBID_SOIL_MOISTURE_HIGH == current_tuple_length)
   d42ba:	2e02      	cmp	r6, #2
   d42bc:	f040 80e9 	bne.w	d4492 <igh_settings_process_settings_tuples+0x3d6>
                {
                    uint8_t new_moisture_high_th[LENGTH_SUBID_SOIL_MOISTURE_HIGH]; 
                    memcpy(new_moisture_high_th, &settings[current_data_index], LENGTH_SUBID_SOIL_MOISTURE_LOW);
   d42c0:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_moisture_high = GET16(new_moisture_high_th);
   d42c2:	5d2a      	ldrb	r2, [r5, r4]
   d42c4:	785b      	ldrb	r3, [r3, #1]
   d42c6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d42ca:	83bb      	strh	r3, [r7, #28]
                }
                else
                {
                    return 0;
                }
                break; 
   d42cc:	e0d8      	b.n	d4480 <igh_settings_process_settings_tuples+0x3c4>

            case SUBID_AIR_HUMIDITY_LOW:
                if(LENGTH_SUBID_AIR_HUMIDITY_LOW  == current_tuple_length)
   d42ce:	2e02      	cmp	r6, #2
   d42d0:	f040 80df 	bne.w	d4492 <igh_settings_process_settings_tuples+0x3d6>
                {
                    uint8_t new_air_humidity_low_th[LENGTH_SUBID_AIR_HUMIDITY_LOW]; 
                    memcpy(new_air_humidity_low_th, &settings[current_data_index], LENGTH_SUBID_AIR_HUMIDITY_LOW);
   d42d4:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.air_humidity_low = GET16(new_air_humidity_low_th);
   d42d6:	5d2a      	ldrb	r2, [r5, r4]
   d42d8:	785b      	ldrb	r3, [r3, #1]
   d42da:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d42de:	80bb      	strh	r3, [r7, #4]
                }
                else
                {
                    return 0;
                }
                break; 
   d42e0:	e0ce      	b.n	d4480 <igh_settings_process_settings_tuples+0x3c4>

            case SUBID_AIR_HUMIDITY_HIGH:
                if(LENGTH_SUBID_AIR_HUMIDITY_HIGH  == current_tuple_length)
   d42e2:	2e02      	cmp	r6, #2
   d42e4:	f040 80d5 	bne.w	d4492 <igh_settings_process_settings_tuples+0x3d6>
                {
                    uint8_t new_air_humidity_high_th[LENGTH_SUBID_AIR_HUMIDITY_HIGH]; 
                    memcpy(new_air_humidity_high_th, &settings[current_data_index], LENGTH_SUBID_AIR_HUMIDITY_HIGH);
   d42e8:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.air_humidity_high = GET16(new_air_humidity_high_th);
   d42ea:	5d2a      	ldrb	r2, [r5, r4]
   d42ec:	785b      	ldrb	r3, [r3, #1]
   d42ee:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d42f2:	83fb      	strh	r3, [r7, #30]
                }
                else
                {
                    return 0;
                }
                break;
   d42f4:	e0c4      	b.n	d4480 <igh_settings_process_settings_tuples+0x3c4>

            case SUBID_SOIL_HUMIDITY_LOW:
                if(LENGTH_SUBID_SOIL_HUMIDITY_LOW  == current_tuple_length)
   d42f6:	2e02      	cmp	r6, #2
   d42f8:	f040 80cb 	bne.w	d4492 <igh_settings_process_settings_tuples+0x3d6>
                {
                    uint8_t new_soil_humidity_low_th[LENGTH_SUBID_SOIL_HUMIDITY_LOW]; 
                    memcpy(new_soil_humidity_low_th, &settings[current_data_index], LENGTH_SUBID_SOIL_HUMIDITY_LOW);
   d42fc:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_humidity_low = GET16(new_soil_humidity_low_th);
   d42fe:	5d2a      	ldrb	r2, [r5, r4]
   d4300:	785b      	ldrb	r3, [r3, #1]
   d4302:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4306:	80fb      	strh	r3, [r7, #6]
                }
                else
                {
                    return 0;
                }
                break; 
   d4308:	e0ba      	b.n	d4480 <igh_settings_process_settings_tuples+0x3c4>

            case SUBID_SOIL_HUMIDITY_HIGH:
                if(LENGTH_SUBID_SOIL_HUMIDITY_HIGH  == current_tuple_length)
   d430a:	2e02      	cmp	r6, #2
   d430c:	f040 80c1 	bne.w	d4492 <igh_settings_process_settings_tuples+0x3d6>
                {
                    uint8_t new_soil_humidity_high_th[LENGTH_SUBID_SOIL_HUMIDITY_HIGH]; 
                    memcpy(new_soil_humidity_high_th, &settings[current_data_index], LENGTH_SUBID_SOIL_HUMIDITY_HIGH);
   d4310:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_humidity_high = GET16(new_soil_humidity_high_th);
   d4312:	5d2a      	ldrb	r2, [r5, r4]
   d4314:	785b      	ldrb	r3, [r3, #1]
   d4316:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d431a:	843b      	strh	r3, [r7, #32]
                }
                else
                {
                    return 0;
                }
                break;
   d431c:	e0b0      	b.n	d4480 <igh_settings_process_settings_tuples+0x3c4>

            case SUBID_CARBON_DIOXIDE_LOW:
                if(LENGTH_SUBID_CARBON_DIOXIDE_LOW  == current_tuple_length)
   d431e:	2e02      	cmp	r6, #2
   d4320:	f040 80b7 	bne.w	d4492 <igh_settings_process_settings_tuples+0x3d6>
                {
                    uint8_t new_carbon_dioxide_low_th[LENGTH_SUBID_CARBON_DIOXIDE_LOW]; 
                    memcpy(new_carbon_dioxide_low_th, &settings[current_data_index], LENGTH_SUBID_CARBON_DIOXIDE_LOW);
   d4324:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.carbon_dioxide_low = GET16(new_carbon_dioxide_low_th);
   d4326:	5d2a      	ldrb	r2, [r5, r4]
   d4328:	785b      	ldrb	r3, [r3, #1]
   d432a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d432e:	813b      	strh	r3, [r7, #8]
                }
                else
                {
                    return 0;
                }
                break; 
   d4330:	e0a6      	b.n	d4480 <igh_settings_process_settings_tuples+0x3c4>

            case SUBID_CARBON_DIOXIDE_HIGH:
                if(LENGTH_SUBID_CARBON_DIOXIDE_HIGH  == current_tuple_length)
   d4332:	2e02      	cmp	r6, #2
   d4334:	f040 80ad 	bne.w	d4492 <igh_settings_process_settings_tuples+0x3d6>
                {
                    uint8_t new_carbon_dioxide_high_th[LENGTH_SUBID_CARBON_DIOXIDE_HIGH]; 
                    memcpy(new_carbon_dioxide_high_th, &settings[current_data_index], LENGTH_SUBID_CARBON_DIOXIDE_HIGH);
   d4338:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.carbon_dioxide_high = GET16(new_carbon_dioxide_high_th);
   d433a:	5d2a      	ldrb	r2, [r5, r4]
   d433c:	785b      	ldrb	r3, [r3, #1]
   d433e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4342:	847b      	strh	r3, [r7, #34]	; 0x22
                }
                else
                {
                    return 0;
                }
                break;
   d4344:	e09c      	b.n	d4480 <igh_settings_process_settings_tuples+0x3c4>

            case SUBID_AIR_TEMPERATURE_LOW:
                if(LENGTH_SUBID_AIR_TEMPERATURE_LOW  == current_tuple_length)
   d4346:	2e02      	cmp	r6, #2
   d4348:	f040 80a3 	bne.w	d4492 <igh_settings_process_settings_tuples+0x3d6>
                {
                    uint8_t new_air_temperature_low_th[LENGTH_SUBID_AIR_TEMPERATURE_LOW]; 
                    memcpy(new_air_temperature_low_th, &settings[current_data_index], LENGTH_SUBID_AIR_TEMPERATURE_LOW);
   d434c:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.air_temperature_low = GET16(new_air_temperature_low_th);
   d434e:	5d2a      	ldrb	r2, [r5, r4]
   d4350:	785b      	ldrb	r3, [r3, #1]
   d4352:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4356:	817b      	strh	r3, [r7, #10]
                }
                else
                {
                    return 0;
                }
                break; 
   d4358:	e092      	b.n	d4480 <igh_settings_process_settings_tuples+0x3c4>

            case SUBID_AIR_TEMPERATURE_HIGH:
                if(LENGTH_SUBID_AIR_TEMPERATURE_HIGH  == current_tuple_length)
   d435a:	2e02      	cmp	r6, #2
   d435c:	f040 8099 	bne.w	d4492 <igh_settings_process_settings_tuples+0x3d6>
                {
                    uint8_t new_air_temperature_high_th[LENGTH_SUBID_AIR_TEMPERATURE_HIGH]; 
                    memcpy(new_air_temperature_high_th, &settings[current_data_index], LENGTH_SUBID_AIR_TEMPERATURE_HIGH);
   d4360:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.air_temperature_high = GET16(new_air_temperature_high_th);
   d4362:	5d2a      	ldrb	r2, [r5, r4]
   d4364:	785b      	ldrb	r3, [r3, #1]
   d4366:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d436a:	84bb      	strh	r3, [r7, #36]	; 0x24
                }
                else
                {
                    return 0;
                }
                break;
   d436c:	e088      	b.n	d4480 <igh_settings_process_settings_tuples+0x3c4>

            case SUBID_SOIL_TEMPERATURE_LOW:
                if(LENGTH_SUBID_SOIL_TEMPERATURE_LOW  == current_tuple_length)
   d436e:	2e02      	cmp	r6, #2
   d4370:	f040 808f 	bne.w	d4492 <igh_settings_process_settings_tuples+0x3d6>
                {
                    uint8_t new_soil_temperature_low_th[LENGTH_SUBID_SOIL_TEMPERATURE_LOW]; 
                    memcpy(new_soil_temperature_low_th, &settings[current_data_index], LENGTH_SUBID_SOIL_TEMPERATURE_LOW);
   d4374:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_temperature_low = GET16(new_soil_temperature_low_th);
   d4376:	5d2a      	ldrb	r2, [r5, r4]
   d4378:	785b      	ldrb	r3, [r3, #1]
   d437a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d437e:	81bb      	strh	r3, [r7, #12]
                }
                else
                {
                    return 0;
                }
                break; 
   d4380:	e07e      	b.n	d4480 <igh_settings_process_settings_tuples+0x3c4>
   d4382:	bf00      	nop
   d4384:	2003e5f0 	.word	0x2003e5f0
   d4388:	2003e55c 	.word	0x2003e55c
   d438c:	2003d7fd 	.word	0x2003d7fd
   d4390:	2003e568 	.word	0x2003e568
   d4394:	2003e5aa 	.word	0x2003e5aa
   d4398:	2003e5ca 	.word	0x2003e5ca
   d439c:	2003e544 	.word	0x2003e544
   d43a0:	2003d6f0 	.word	0x2003d6f0

            case SUBID_SOIL_TEMPERATURE_HIGH:
                if(LENGTH_SUBID_SOIL_TEMPERATURE_HIGH  == current_tuple_length)
   d43a4:	2e02      	cmp	r6, #2
   d43a6:	d174      	bne.n	d4492 <igh_settings_process_settings_tuples+0x3d6>
                {
                    uint8_t new_soil_temperature_high_th[LENGTH_SUBID_SOIL_TEMPERATURE_HIGH]; 
                    memcpy(new_soil_temperature_high_th, &settings[current_data_index], LENGTH_SUBID_SOIL_TEMPERATURE_HIGH);
   d43a8:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_temperature_high = GET16(new_soil_temperature_high_th);
   d43aa:	5d2a      	ldrb	r2, [r5, r4]
   d43ac:	785b      	ldrb	r3, [r3, #1]
   d43ae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d43b2:	84fb      	strh	r3, [r7, #38]	; 0x26
                }
                else
                {
                    return 0;
                }
                break;    
   d43b4:	e064      	b.n	d4480 <igh_settings_process_settings_tuples+0x3c4>

            case SUBID_SOIL_NPK_HIGH:
                if(LENGTH_SUBID_SOIL_NPK_HIGH  == current_tuple_length)
   d43b6:	2e02      	cmp	r6, #2
   d43b8:	d16b      	bne.n	d4492 <igh_settings_process_settings_tuples+0x3d6>
                {
                    uint8_t new_soil_npk_high_th[LENGTH_SUBID_SOIL_NPK_HIGH]; 
                    memcpy(new_soil_npk_high_th, &settings[current_data_index], LENGTH_SUBID_SOIL_NPK_HIGH);
   d43ba:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_npk_high = GET16(new_soil_npk_high_th);
   d43bc:	5d2a      	ldrb	r2, [r5, r4]
   d43be:	785b      	ldrb	r3, [r3, #1]
   d43c0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d43c4:	853b      	strh	r3, [r7, #40]	; 0x28
                }
                else
                {
                    return 0;
                }
                break;   
   d43c6:	e05b      	b.n	d4480 <igh_settings_process_settings_tuples+0x3c4>

            case SUBID_SOIL_NPK_LOW:
                if(LENGTH_SUBID_SOIL_NPK_LOW  == current_tuple_length)
   d43c8:	2e02      	cmp	r6, #2
   d43ca:	d162      	bne.n	d4492 <igh_settings_process_settings_tuples+0x3d6>
                {
                    uint8_t new_soil_npk_low_th[LENGTH_SUBID_SOIL_NPK_LOW]; 
                    memcpy(new_soil_npk_low_th, &settings[current_data_index], LENGTH_SUBID_SOIL_NPK_LOW);
   d43cc:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.soil_npk_low = GET16(new_soil_npk_low_th);
   d43ce:	5d2a      	ldrb	r2, [r5, r4]
   d43d0:	785b      	ldrb	r3, [r3, #1]
   d43d2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d43d6:	81fb      	strh	r3, [r7, #14]
                }
                else
                {
                    return 0;
                }
                break; 
   d43d8:	e052      	b.n	d4480 <igh_settings_process_settings_tuples+0x3c4>

            case SUBID_LIGHT_INTENSITY_LOW:
                if(LENGTH_SUBID_LIGHT_INTENSITY_LOW  == current_tuple_length)
   d43da:	2e02      	cmp	r6, #2
   d43dc:	d159      	bne.n	d4492 <igh_settings_process_settings_tuples+0x3d6>
                {
                    uint8_t new_light_intensity_low_th[LENGTH_SUBID_LIGHT_INTENSITY_LOW]; 
                    memcpy(new_light_intensity_low_th, &settings[current_data_index], LENGTH_SUBID_LIGHT_INTENSITY_LOW);
   d43de:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.light_intensity_low = GET16(new_light_intensity_low_th);
   d43e0:	5d2a      	ldrb	r2, [r5, r4]
   d43e2:	785b      	ldrb	r3, [r3, #1]
   d43e4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d43e8:	823b      	strh	r3, [r7, #16]
                }
                else
                {
                    return 0;
                }
                break; 
   d43ea:	e049      	b.n	d4480 <igh_settings_process_settings_tuples+0x3c4>

            case SUBID_LIGHT_INTENSITY_HIGH:
                if(LENGTH_SUBID_LIGHT_INTENSITY_HIGH  == current_tuple_length)
   d43ec:	2e02      	cmp	r6, #2
   d43ee:	d150      	bne.n	d4492 <igh_settings_process_settings_tuples+0x3d6>
                {
                    uint8_t new_light_intensity_high_th[LENGTH_SUBID_LIGHT_INTENSITY_HIGH]; 
                    memcpy(new_light_intensity_high_th, &settings[current_data_index], LENGTH_SUBID_LIGHT_INTENSITY_HIGH);
   d43f0:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.light_intensity_high = GET16(new_light_intensity_high_th);
   d43f2:	5d2a      	ldrb	r2, [r5, r4]
   d43f4:	785b      	ldrb	r3, [r3, #1]
   d43f6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d43fa:	857b      	strh	r3, [r7, #42]	; 0x2a
                }
                else
                {
                    return 0;
                }
                break; 
   d43fc:	e040      	b.n	d4480 <igh_settings_process_settings_tuples+0x3c4>

            case SUBID_SHIELD_BATTERY_LEVEL_LOW:
                if(LENGTH_SUBID_SHIELD_BATTERY_LEVEL_LOW  == current_tuple_length)
   d43fe:	2e02      	cmp	r6, #2
   d4400:	d147      	bne.n	d4492 <igh_settings_process_settings_tuples+0x3d6>
                {
                    uint8_t new_shield_battery_low_th[LENGTH_SUBID_SHIELD_BATTERY_LEVEL_LOW]; 
                    memcpy(new_shield_battery_low_th, &settings[current_data_index], LENGTH_SUBID_SHIELD_BATTERY_LEVEL_LOW);
   d4402:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.shield_battery_level_low = GET16(new_shield_battery_low_th);
   d4404:	5d2a      	ldrb	r2, [r5, r4]
   d4406:	785b      	ldrb	r3, [r3, #1]
   d4408:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d440c:	827b      	strh	r3, [r7, #18]
                }
                else
                {
                    return 0;
                }
                break;
   d440e:	e037      	b.n	d4480 <igh_settings_process_settings_tuples+0x3c4>

            case SUBID_SHIELD_BATTERY_LEVEL_HIGH:
                if(LENGTH_SUBID_SHIELD_BATTERY_LEVEL_HIGH  == current_tuple_length)
   d4410:	2e02      	cmp	r6, #2
   d4412:	d13e      	bne.n	d4492 <igh_settings_process_settings_tuples+0x3d6>
                {
                    uint8_t new_shield_battery_high_th[LENGTH_SUBID_SHIELD_BATTERY_LEVEL_HIGH]; 
                    memcpy(new_shield_battery_high_th, &settings[current_data_index], LENGTH_SUBID_SHIELD_BATTERY_LEVEL_HIGH);
   d4414:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.shield_battery_level_high = GET16(new_shield_battery_high_th);
   d4416:	5d2a      	ldrb	r2, [r5, r4]
   d4418:	785b      	ldrb	r3, [r3, #1]
   d441a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d441e:	85bb      	strh	r3, [r7, #44]	; 0x2c
                }
                else
                {
                    return 0;
                }
                break;  
   d4420:	e02e      	b.n	d4480 <igh_settings_process_settings_tuples+0x3c4>

            case SUBID_SPEAR_BATTERY_LEVEL_LOW:
                if(LENGTH_SUBID_SPEAR_BATTERY_LEVEL_LOW  == current_tuple_length)
   d4422:	2e02      	cmp	r6, #2
   d4424:	d135      	bne.n	d4492 <igh_settings_process_settings_tuples+0x3d6>
                {
                    uint8_t new_spear_battery_low_th[LENGTH_SUBID_SPEAR_BATTERY_LEVEL_LOW]; 
                    memcpy(new_spear_battery_low_th, &settings[current_data_index], LENGTH_SUBID_SPEAR_BATTERY_LEVEL_LOW);
   d4426:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.spear_battery_level_low = GET16(new_spear_battery_low_th);
   d4428:	5d2a      	ldrb	r2, [r5, r4]
   d442a:	785b      	ldrb	r3, [r3, #1]
   d442c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4430:	82bb      	strh	r3, [r7, #20]
                }
                else
                {
                    return 0;
                }
                break;
   d4432:	e025      	b.n	d4480 <igh_settings_process_settings_tuples+0x3c4>

            case SUBID_SPEAR_BATTERY_LEVEL_HIGH:
                if(LENGTH_SUBID_SPEAR_BATTERY_LEVEL_HIGH  == current_tuple_length)
   d4434:	2e02      	cmp	r6, #2
   d4436:	d12c      	bne.n	d4492 <igh_settings_process_settings_tuples+0x3d6>
                {
                    uint8_t new_spear_battery_high_th[LENGTH_SUBID_SPEAR_BATTERY_LEVEL_HIGH]; 
                    memcpy(new_spear_battery_high_th, &settings[current_data_index], LENGTH_SUBID_SPEAR_BATTERY_LEVEL_HIGH);
   d4438:	192b      	adds	r3, r5, r4
                    igh_current_threshold_settings.spear_battery_level_high = GET16(new_spear_battery_high_th);
   d443a:	5d2a      	ldrb	r2, [r5, r4]
   d443c:	785b      	ldrb	r3, [r3, #1]
   d443e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4442:	85fb      	strh	r3, [r7, #46]	; 0x2e
                }
                else
                {
                    return 0;
                }
                break;
   d4444:	e01c      	b.n	d4480 <igh_settings_process_settings_tuples+0x3c4>

            case SUBID_WATER_DISPENSED_PERIOD_LOW:
                if(LENGTH_SUBID_WATER_DISPENSED_PERIOD_LOW == current_tuple_length)
   d4446:	2e04      	cmp	r6, #4
   d4448:	d123      	bne.n	d4492 <igh_settings_process_settings_tuples+0x3d6>
                {
                    uint8_t new_water_dispensed_period_low[LENGTH_SUBID_WATER_DISPENSED_PERIOD_LOW]; 
                    memcpy(new_water_dispensed_period_low, &settings[current_data_index], LENGTH_SUBID_WATER_DISPENSED_PERIOD_LOW);
   d444a:	1929      	adds	r1, r5, r4
                    igh_current_threshold_settings.water_dispensed_period_low = GET32(new_water_dispensed_period_low);
   d444c:	5d2a      	ldrb	r2, [r5, r4]
   d444e:	784b      	ldrb	r3, [r1, #1]
   d4450:	041b      	lsls	r3, r3, #16
   d4452:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   d4456:	78ca      	ldrb	r2, [r1, #3]
   d4458:	4413      	add	r3, r2
   d445a:	788a      	ldrb	r2, [r1, #2]
   d445c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4460:	61bb      	str	r3, [r7, #24]
                else
                {
                    // stop processing any more settings as they may be corrupt
                    return 0;
                }
                break;
   d4462:	e00d      	b.n	d4480 <igh_settings_process_settings_tuples+0x3c4>

            case SUBID_WATER_DISPENSED_PERIOD_HIGH:
                if(LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH == current_tuple_length)
   d4464:	2e04      	cmp	r6, #4
   d4466:	d114      	bne.n	d4492 <igh_settings_process_settings_tuples+0x3d6>
                {
                    uint8_t new_water_dispensed_period_high[LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH]; 
                    memcpy(new_water_dispensed_period_high, &settings[current_data_index], LENGTH_SUBID_WATER_DISPENSED_PERIOD_HIGH);
   d4468:	1929      	adds	r1, r5, r4
                    igh_current_threshold_settings.water_dispensed_period_high = GET32(new_water_dispensed_period_high);
   d446a:	5d2a      	ldrb	r2, [r5, r4]
   d446c:	784b      	ldrb	r3, [r1, #1]
   d446e:	041b      	lsls	r3, r3, #16
   d4470:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   d4474:	78ca      	ldrb	r2, [r1, #3]
   d4476:	4413      	add	r3, r2
   d4478:	788a      	ldrb	r2, [r1, #2]
   d447a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d447e:	633b      	str	r3, [r7, #48]	; 0x30

            default: // nothing to do hear
                break;
        }
        // move index to next tuple id
        byte_tracker += current_tuple_length + TUPLE_HEADER_LEN;
   d4480:	1cb3      	adds	r3, r6, #2
   d4482:	eb0b 0603 	add.w	r6, fp, r3
   d4486:	fa5f fb86 	uxtb.w	fp, r6
   d448a:	e621      	b.n	d40d0 <igh_settings_process_settings_tuples+0x14>
    }
    return 1;
   d448c:	2001      	movs	r0, #1
   d448e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    
                }
                else
                {
                    // stop processing any more settings as they may be corrupt
                    return 0;
   d4492:	2000      	movs	r0, #0
        }
        // move index to next tuple id
        byte_tracker += current_tuple_length + TUPLE_HEADER_LEN;
    }
    return 1;
}
   d4494:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4498 <igh_settings_calculate_checksum>:
 * struct must have a single byte at the end designated for the checksum for this to work
 * \param p_struct: pointer to data struct, total_bytes: sizeof(data struct)
 * \return the checksum
 */
uint8_t igh_settings_calculate_checksum(void * p_struct, size_t total_bytes)
{
   d4498:	b510      	push	{r4, lr}
    data = (uint8_t *)p_struct;

    // uint8_t data_buffer[length];
    // memcpy(data_buffer, data, length);

    data += 1; // ignore checksum byte
   d449a:	1c42      	adds	r2, r0, #1
 */
uint8_t igh_settings_calculate_checksum(void * p_struct, size_t total_bytes)
{
    uint8_t length = (uint8_t)total_bytes; 
    uint8_t * data;
    int sum = 0;
   d449c:	2300      	movs	r3, #0
    // uint8_t data_buffer[length];
    // memcpy(data_buffer, data, length);

    data += 1; // ignore checksum byte
    // start at 1 to ignore the checksum byte
    for( int i = 1; i < length; i++)
   d449e:	b2c9      	uxtb	r1, r1
   d44a0:	1a14      	subs	r4, r2, r0
   d44a2:	42a1      	cmp	r1, r4
   d44a4:	dd03      	ble.n	d44ae <igh_settings_calculate_checksum+0x16>
    {
        sum += (0xFF & *data++);
   d44a6:	f812 4b01 	ldrb.w	r4, [r2], #1
   d44aa:	4423      	add	r3, r4
   d44ac:	e7f8      	b.n	d44a0 <igh_settings_calculate_checksum+0x8>
    }

    checksum = (uint8_t)(sum % 256);

    return checksum;
}
   d44ae:	b2d8      	uxtb	r0, r3
   d44b0:	bd10      	pop	{r4, pc}
	...

000d44b4 <igh_settings_parse_new_settings>:
    }
    return 1;
}

uint8_t igh_settings_parse_new_settings(uint8_t * settings)
{
   d44b4:	b510      	push	{r4, lr}
    // get the length
    uint8_t length = settings[PAYLOAD_LEN_INDEX]; // byte at position one should always be length
   d44b6:	7c82      	ldrb	r2, [r0, #18]
    // guard the process
    if(0 >= length)
   d44b8:	b90a      	cbnz	r2, d44be <igh_settings_parse_new_settings+0xa>
    {
        return 0; // do not allow settings with zero payload to be processed
   d44ba:	2000      	movs	r0, #0
   d44bc:	bd10      	pop	{r4, pc}
    // get index of last byte to process
    uint8_t settings_end_index = FIRST_TUPLE_INDEX + length;
    // get the location of first tuple
    uint8_t settings_byte_tracker = FIRST_TUPLE_INDEX;
    
    if( 0 == igh_settings_process_settings_tuples( settings, settings_byte_tracker, settings_end_index ) ) 
   d44be:	3213      	adds	r2, #19
   d44c0:	b2d2      	uxtb	r2, r2
   d44c2:	2113      	movs	r1, #19
   d44c4:	f7ff fdfa 	bl	d40bc <igh_settings_process_settings_tuples>
   d44c8:	2800      	cmp	r0, #0
   d44ca:	d0f6      	beq.n	d44ba <igh_settings_parse_new_settings+0x6>
        return 0;
    }
    else
    {
        // update the checksum of the system settings
        igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
   d44cc:	4c07      	ldr	r4, [pc, #28]	; (d44ec <igh_settings_parse_new_settings+0x38>)
   d44ce:	21a8      	movs	r1, #168	; 0xa8
   d44d0:	4620      	mov	r0, r4
   d44d2:	f7ff ffe1 	bl	d4498 <igh_settings_calculate_checksum>
   d44d6:	7020      	strb	r0, [r4, #0]
        // update the checksum for the threshold settings
        igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
   d44d8:	4c05      	ldr	r4, [pc, #20]	; (d44f0 <igh_settings_parse_new_settings+0x3c>)
   d44da:	2134      	movs	r1, #52	; 0x34
   d44dc:	4620      	mov	r0, r4
   d44de:	f7ff ffdb 	bl	d4498 <igh_settings_calculate_checksum>
        
        new_settings_available = 1;
   d44e2:	4b04      	ldr	r3, [pc, #16]	; (d44f4 <igh_settings_parse_new_settings+0x40>)
    else
    {
        // update the checksum of the system settings
        igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
        // update the checksum for the threshold settings
        igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
   d44e4:	7020      	strb	r0, [r4, #0]
        
        new_settings_available = 1;
   d44e6:	2001      	movs	r0, #1
   d44e8:	7018      	strb	r0, [r3, #0]
    }
    
    return 1;
}
   d44ea:	bd10      	pop	{r4, pc}
   d44ec:	2003e544 	.word	0x2003e544
   d44f0:	2003e5f0 	.word	0x2003e5f0
   d44f4:	2003d7fc 	.word	0x2003d7fc

000d44f8 <igh_settings_process_settings>:
 */
uint8_t igh_settings_process_settings(uint8_t * settings)
{
    uint8_t ret = 0; 
    igh_pkt_id settings_type = (igh_pkt_id)settings[PAYLOAD_INDEX];
    switch(settings_type)
   d44f8:	7c42      	ldrb	r2, [r0, #17]
   d44fa:	2a0f      	cmp	r2, #15
   d44fc:	d003      	beq.n	d4506 <igh_settings_process_settings+0xe>
   d44fe:	2a10      	cmp	r2, #16
   d4500:	d108      	bne.n	d4514 <igh_settings_process_settings+0x1c>
    {
        case VALVE_POSITION:
            ret = igh_settings_remote_valvle_control(settings);
            break;
        case IGH_SEND_SETTINGS:
            ret = igh_settings_parse_new_settings(settings);
   d4502:	f7ff bfd7 	b.w	d44b4 <igh_settings_parse_new_settings>
    return buffer_index_tracker;
}

LOCAL uint8_t igh_settings_remote_valvle_control(uint8_t * settings)
{
    if( ((valve_position)settings[FIRST_TUPLE_INDEX] == VALVE_CLOSE) ||
   d4506:	7cc3      	ldrb	r3, [r0, #19]
   d4508:	2b01      	cmp	r3, #1
   d450a:	d803      	bhi.n	d4514 <igh_settings_process_settings+0x1c>
        ((valve_position)settings[FIRST_TUPLE_INDEX] == VALVE_OPEN) )
    {
        current_valve_position =  (valve_position)settings[FIRST_TUPLE_INDEX];
   d450c:	4a02      	ldr	r2, [pc, #8]	; (d4518 <igh_settings_process_settings+0x20>)
        return 1;
   d450e:	2001      	movs	r0, #1
LOCAL uint8_t igh_settings_remote_valvle_control(uint8_t * settings)
{
    if( ((valve_position)settings[FIRST_TUPLE_INDEX] == VALVE_CLOSE) ||
        ((valve_position)settings[FIRST_TUPLE_INDEX] == VALVE_OPEN) )
    {
        current_valve_position =  (valve_position)settings[FIRST_TUPLE_INDEX];
   d4510:	7013      	strb	r3, [r2, #0]
   d4512:	4770      	bx	lr
        return 1;
    }

    return 0;
   d4514:	2000      	movs	r0, #0
        default:
            break;
    }

    return ret;
}
   d4516:	4770      	bx	lr
   d4518:	2003e5ec 	.word	0x2003e5ec

000d451c <igh_settings_reset_system_to_default>:
    
    return 1;
}

void igh_settings_reset_system_to_default(void)
{
   d451c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


LOCAL void igh_settings_get_defaults(void) // Total bytes 
{
    // System settings
    memset(&igh_default_system_settings, 0, sizeof(igh_default_system_settings));
   d451e:	4c3d      	ldr	r4, [pc, #244]	; (d4614 <igh_settings_reset_system_to_default+0xf8>)
   d4520:	22a8      	movs	r2, #168	; 0xa8
   d4522:	2100      	movs	r1, #0
   d4524:	4620      	mov	r0, r4
   d4526:	f007 fbb5 	bl	dbc94 <memset>
    igh_default_system_settings.timezone                    = DEFAULT_TIMEZONE;
   d452a:	2303      	movs	r3, #3
   d452c:	6063      	str	r3, [r4, #4]
    igh_default_system_settings.irrigation_hr               = DEFAULT_IRRIGATION_HR;
   d452e:	2307      	movs	r3, #7
    igh_default_system_settings.op_state                    = DEFAULT_NEW_OPSTATE;
    igh_default_system_settings.reporting_interval          = DEFAULT_REPORTING_INTERVAL;
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
    igh_default_system_settings.broker_port                 = DEFAULT_MQTT_BROKER_PORT;

    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
   d4530:	4a39      	ldr	r2, [pc, #228]	; (d4618 <igh_settings_reset_system_to_default+0xfc>)
LOCAL void igh_settings_get_defaults(void) // Total bytes 
{
    // System settings
    memset(&igh_default_system_settings, 0, sizeof(igh_default_system_settings));
    igh_default_system_settings.timezone                    = DEFAULT_TIMEZONE;
    igh_default_system_settings.irrigation_hr               = DEFAULT_IRRIGATION_HR;
   d4532:	7223      	strb	r3, [r4, #8]
    igh_default_system_settings.water_dispenser_period      = DEFAULT_WATER_DISP_PERIOD;
   d4534:	f44f 63e1 	mov.w	r3, #1800	; 0x708
   d4538:	60e3      	str	r3, [r4, #12]
    igh_default_system_settings.op_state                    = DEFAULT_NEW_OPSTATE;
    igh_default_system_settings.reporting_interval          = DEFAULT_REPORTING_INTERVAL;
   d453a:	6123      	str	r3, [r4, #16]
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
   d453c:	f44f 7316 	mov.w	r3, #600	; 0x258
    igh_default_system_settings.broker_port                 = DEFAULT_MQTT_BROKER_PORT;

    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
   d4540:	6810      	ldr	r0, [r2, #0]
   d4542:	6851      	ldr	r1, [r2, #4]
    igh_default_system_settings.timezone                    = DEFAULT_TIMEZONE;
    igh_default_system_settings.irrigation_hr               = DEFAULT_IRRIGATION_HR;
    igh_default_system_settings.water_dispenser_period      = DEFAULT_WATER_DISP_PERIOD;
    igh_default_system_settings.op_state                    = DEFAULT_NEW_OPSTATE;
    igh_default_system_settings.reporting_interval          = DEFAULT_REPORTING_INTERVAL;
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
   d4544:	6163      	str	r3, [r4, #20]
    igh_default_system_settings.broker_port                 = DEFAULT_MQTT_BROKER_PORT;
   d4546:	f240 735b 	movw	r3, #1883	; 0x75b
   d454a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64

    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
   d454e:	f104 0318 	add.w	r3, r4, #24
   d4552:	c303      	stmia	r3!, {r0, r1}
   d4554:	6890      	ldr	r0, [r2, #8]
   d4556:	6018      	str	r0, [r3, #0]
    memcpy(igh_default_system_settings.broker, default_broker_url, sizeof(default_broker_url));
   d4558:	4b30      	ldr	r3, [pc, #192]	; (d461c <igh_settings_reset_system_to_default+0x100>)
   d455a:	f104 0224 	add.w	r2, r4, #36	; 0x24
   d455e:	f103 0620 	add.w	r6, r3, #32
   d4562:	6818      	ldr	r0, [r3, #0]
   d4564:	6859      	ldr	r1, [r3, #4]
   d4566:	4615      	mov	r5, r2
   d4568:	c503      	stmia	r5!, {r0, r1}
   d456a:	3308      	adds	r3, #8
   d456c:	42b3      	cmp	r3, r6
   d456e:	462a      	mov	r2, r5
   d4570:	d1f7      	bne.n	d4562 <igh_settings_reset_system_to_default+0x46>
   d4572:	6818      	ldr	r0, [r3, #0]
    memcpy(igh_default_system_settings.mqtt_username, default_broker_uname, sizeof(default_broker_uname));
   d4574:	4a2a      	ldr	r2, [pc, #168]	; (d4620 <igh_settings_reset_system_to_default+0x104>)
    igh_default_system_settings.reporting_interval          = DEFAULT_REPORTING_INTERVAL;
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
    igh_default_system_settings.broker_port                 = DEFAULT_MQTT_BROKER_PORT;

    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
    memcpy(igh_default_system_settings.broker, default_broker_url, sizeof(default_broker_url));
   d4576:	6028      	str	r0, [r5, #0]
    memcpy(igh_default_system_settings.mqtt_username, default_broker_uname, sizeof(default_broker_uname));
   d4578:	6813      	ldr	r3, [r2, #0]
   d457a:	4d2a      	ldr	r5, [pc, #168]	; (d4624 <igh_settings_reset_system_to_default+0x108>)
   d457c:	f8c4 3066 	str.w	r3, [r4, #102]	; 0x66
   d4580:	6853      	ldr	r3, [r2, #4]
    memcpy(igh_default_system_settings.mqtt_password, default_broker_pword, sizeof(default_broker_pword));
   d4582:	4a29      	ldr	r2, [pc, #164]	; (d4628 <igh_settings_reset_system_to_default+0x10c>)
    igh_default_system_settings.data_resolution             = DEFAULT_DATA_RESOLUTION;
    igh_default_system_settings.broker_port                 = DEFAULT_MQTT_BROKER_PORT;

    memcpy(igh_default_system_settings.serial_number, default_serial_number, LENGTH_SUBID_SET_SERIAL_NUMBER);
    memcpy(igh_default_system_settings.broker, default_broker_url, sizeof(default_broker_url));
    memcpy(igh_default_system_settings.mqtt_username, default_broker_uname, sizeof(default_broker_uname));
   d4584:	606b      	str	r3, [r5, #4]
    memcpy(igh_default_system_settings.mqtt_password, default_broker_pword, sizeof(default_broker_pword));
   d4586:	6813      	ldr	r3, [r2, #0]
   d4588:	f8c4 3086 	str.w	r3, [r4, #134]	; 0x86
   d458c:	6853      	ldr	r3, [r2, #4]
   d458e:	626b      	str	r3, [r5, #36]	; 0x24
   d4590:	6893      	ldr	r3, [r2, #8]
   d4592:	62ab      	str	r3, [r5, #40]	; 0x28
    
    igh_default_system_settings.checksum = igh_settings_calculate_checksum(&igh_default_system_settings, sizeof(igh_default_system_settings));
   d4594:	21a8      	movs	r1, #168	; 0xa8
   d4596:	f1a5 0066 	sub.w	r0, r5, #102	; 0x66
   d459a:	f7ff ff7d 	bl	d4498 <igh_settings_calculate_checksum>
   d459e:	7020      	strb	r0, [r4, #0]

    //High Threshold tirggers
    memset(&igh_default_thresholds, 0, sizeof(igh_default_thresholds));
   d45a0:	4c22      	ldr	r4, [pc, #136]	; (d462c <igh_settings_reset_system_to_default+0x110>)
}

void igh_settings_reset_system_to_default(void)
{
    igh_settings_get_defaults();
    igh_current_system_settings = igh_default_system_settings;
   d45a2:	4f23      	ldr	r7, [pc, #140]	; (d4630 <igh_settings_reset_system_to_default+0x114>)
    igh_current_threshold_settings = igh_default_thresholds;
   d45a4:	4e23      	ldr	r6, [pc, #140]	; (d4634 <igh_settings_reset_system_to_default+0x118>)
    memcpy(igh_default_system_settings.mqtt_password, default_broker_pword, sizeof(default_broker_pword));
    
    igh_default_system_settings.checksum = igh_settings_calculate_checksum(&igh_default_system_settings, sizeof(igh_default_system_settings));

    //High Threshold tirggers
    memset(&igh_default_thresholds, 0, sizeof(igh_default_thresholds));
   d45a6:	2234      	movs	r2, #52	; 0x34
   d45a8:	2100      	movs	r1, #0
   d45aa:	4620      	mov	r0, r4
   d45ac:	f007 fb72 	bl	dbc94 <memset>
    igh_default_thresholds.soil_moisture_low                = DEFAULT_SOIL_MOISTURE_LOW;                   
    igh_default_thresholds.air_humidity_low                 = DEFAULT_AIR_HUMIDITY_LOW;                     
    igh_default_thresholds.soil_humidity_low                = DEFAULT_SOIL_HUMIDITY_LOW;                   
   d45b0:	233c      	movs	r3, #60	; 0x3c
   d45b2:	80e3      	strh	r3, [r4, #6]
    igh_default_thresholds.soil_temperature_low             = DEFAULT_SOIL_TEMPERATURE_LOW;             
    igh_default_thresholds.soil_npk_low                     = DEFAULT_SOIL_NPK_LOW;                             
    igh_default_thresholds.light_intensity_low              = DEFAULT_LIGHT_INTENSITY_LOW;               
    igh_default_thresholds.shield_battery_level_low         = DEFAULT_SHIELD_BATTERY_LEVEL_LOW;     
    igh_default_thresholds.spear_battery_level_low          = DEFAULT_SPEAR_BATTERY_LEVEL_LOW;      
    igh_default_thresholds.water_dispensed_period_low       = DEFAULT_WATER_DISPENSED_PERIOD_LOW;
   d45b4:	2364      	movs	r3, #100	; 0x64
   d45b6:	61a3      	str	r3, [r4, #24]
    // Low Threshold Trigger
    igh_default_thresholds.soil_moisture_high               = DEFAULT_SOIL_MOISTURE_HIGH;                 
   d45b8:	23ff      	movs	r3, #255	; 0xff
   d45ba:	83a3      	strh	r3, [r4, #28]
    igh_default_thresholds.air_humidity_high                = DEFAULT_AIR_HUMIDITY_HIGH;                   
   d45bc:	83e3      	strh	r3, [r4, #30]
    igh_default_thresholds.soil_humidity_high               = DEFAULT_SOIL_HUMIDITY_HIGH;                 
   d45be:	225a      	movs	r2, #90	; 0x5a
    igh_default_thresholds.carbon_dioxide_high              = DEFAULT_CARBON_DIOXIDE_HIGH;        
   d45c0:	8463      	strh	r3, [r4, #34]	; 0x22
    igh_default_thresholds.air_temperature_high             = DEFAULT_AIR_TEMPERATURE_HIGH;             
   d45c2:	84a3      	strh	r3, [r4, #36]	; 0x24
    igh_default_thresholds.soil_temperature_high            = DEFAULT_SOIL_TEMPERATURE_HIGH;           
   d45c4:	84e3      	strh	r3, [r4, #38]	; 0x26
    igh_default_thresholds.soil_npk_high                    = DEFAULT_SOIL_NPK_HIGH;                           
   d45c6:	8523      	strh	r3, [r4, #40]	; 0x28
    igh_default_thresholds.light_intensity_high             = DEFAULT_LIGHT_INTENSITY_HIGH;             
   d45c8:	8563      	strh	r3, [r4, #42]	; 0x2a
    igh_default_thresholds.shield_battery_level_high        = DEFAULT_SHIELD_BATTERY_LEVEL_HIGH;   
   d45ca:	85a3      	strh	r3, [r4, #44]	; 0x2c
    igh_default_thresholds.spear_battery_level_high         = DEFAULT_SPEAR_BATTERY_LEVEL_HIGH;     
   d45cc:	85e3      	strh	r3, [r4, #46]	; 0x2e
    igh_default_thresholds.water_dispensed_period_high      = DEFAULT_WATER_DISPENSED_PERIOD_HIGH;
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));
   d45ce:	2134      	movs	r1, #52	; 0x34
    igh_default_thresholds.soil_temperature_high            = DEFAULT_SOIL_TEMPERATURE_HIGH;           
    igh_default_thresholds.soil_npk_high                    = DEFAULT_SOIL_NPK_HIGH;                           
    igh_default_thresholds.light_intensity_high             = DEFAULT_LIGHT_INTENSITY_HIGH;             
    igh_default_thresholds.shield_battery_level_high        = DEFAULT_SHIELD_BATTERY_LEVEL_HIGH;   
    igh_default_thresholds.spear_battery_level_high         = DEFAULT_SPEAR_BATTERY_LEVEL_HIGH;     
    igh_default_thresholds.water_dispensed_period_high      = DEFAULT_WATER_DISPENSED_PERIOD_HIGH;
   d45d0:	f44f 7348 	mov.w	r3, #800	; 0x320
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));
   d45d4:	4620      	mov	r0, r4
    igh_default_thresholds.spear_battery_level_low          = DEFAULT_SPEAR_BATTERY_LEVEL_LOW;      
    igh_default_thresholds.water_dispensed_period_low       = DEFAULT_WATER_DISPENSED_PERIOD_LOW;
    // Low Threshold Trigger
    igh_default_thresholds.soil_moisture_high               = DEFAULT_SOIL_MOISTURE_HIGH;                 
    igh_default_thresholds.air_humidity_high                = DEFAULT_AIR_HUMIDITY_HIGH;                   
    igh_default_thresholds.soil_humidity_high               = DEFAULT_SOIL_HUMIDITY_HIGH;                 
   d45d6:	8422      	strh	r2, [r4, #32]
    igh_default_thresholds.soil_temperature_high            = DEFAULT_SOIL_TEMPERATURE_HIGH;           
    igh_default_thresholds.soil_npk_high                    = DEFAULT_SOIL_NPK_HIGH;                           
    igh_default_thresholds.light_intensity_high             = DEFAULT_LIGHT_INTENSITY_HIGH;             
    igh_default_thresholds.shield_battery_level_high        = DEFAULT_SHIELD_BATTERY_LEVEL_HIGH;   
    igh_default_thresholds.spear_battery_level_high         = DEFAULT_SPEAR_BATTERY_LEVEL_HIGH;     
    igh_default_thresholds.water_dispensed_period_high      = DEFAULT_WATER_DISPENSED_PERIOD_HIGH;
   d45d8:	6323      	str	r3, [r4, #48]	; 0x30
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));
   d45da:	f7ff ff5d 	bl	d4498 <igh_settings_calculate_checksum>
}

void igh_settings_reset_system_to_default(void)
{
    igh_settings_get_defaults();
    igh_current_system_settings = igh_default_system_settings;
   d45de:	f1a5 0166 	sub.w	r1, r5, #102	; 0x66
    igh_default_thresholds.soil_npk_high                    = DEFAULT_SOIL_NPK_HIGH;                           
    igh_default_thresholds.light_intensity_high             = DEFAULT_LIGHT_INTENSITY_HIGH;             
    igh_default_thresholds.shield_battery_level_high        = DEFAULT_SHIELD_BATTERY_LEVEL_HIGH;   
    igh_default_thresholds.spear_battery_level_high         = DEFAULT_SPEAR_BATTERY_LEVEL_HIGH;     
    igh_default_thresholds.water_dispensed_period_high      = DEFAULT_WATER_DISPENSED_PERIOD_HIGH;
    igh_default_thresholds.checksum = igh_settings_calculate_checksum(&igh_default_thresholds, sizeof(igh_default_thresholds));
   d45e2:	7020      	strb	r0, [r4, #0]
}

void igh_settings_reset_system_to_default(void)
{
    igh_settings_get_defaults();
    igh_current_system_settings = igh_default_system_settings;
   d45e4:	22a8      	movs	r2, #168	; 0xa8
   d45e6:	4638      	mov	r0, r7
   d45e8:	f007 fb49 	bl	dbc7e <memcpy>
    igh_current_threshold_settings = igh_default_thresholds;
   d45ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d45ee:	4635      	mov	r5, r6
   d45f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d45f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d45f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d45f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d45f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d45fa:	6823      	ldr	r3, [r4, #0]
   d45fc:	602b      	str	r3, [r5, #0]
    // update the checksum of the system settings
    igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
   d45fe:	21a8      	movs	r1, #168	; 0xa8
   d4600:	4638      	mov	r0, r7
   d4602:	f7ff ff49 	bl	d4498 <igh_settings_calculate_checksum>
    // update the checksum for the threshold settings
    igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
   d4606:	2134      	movs	r1, #52	; 0x34
{
    igh_settings_get_defaults();
    igh_current_system_settings = igh_default_system_settings;
    igh_current_threshold_settings = igh_default_thresholds;
    // update the checksum of the system settings
    igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
   d4608:	7038      	strb	r0, [r7, #0]
    // update the checksum for the threshold settings
    igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
   d460a:	4630      	mov	r0, r6
   d460c:	f7ff ff44 	bl	d4498 <igh_settings_calculate_checksum>
   d4610:	7030      	strb	r0, [r6, #0]
   d4612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4614:	2003e648 	.word	0x2003e648
   d4618:	2003d715 	.word	0x2003d715
   d461c:	2003d6f1 	.word	0x2003d6f1
   d4620:	2003d6e8 	.word	0x2003d6e8
   d4624:	2003e6ae 	.word	0x2003e6ae
   d4628:	2003d721 	.word	0x2003d721
   d462c:	2003e50c 	.word	0x2003e50c
   d4630:	2003e544 	.word	0x2003e544
   d4634:	2003e5f0 	.word	0x2003e5f0

000d4638 <igh_message_process_incoming_msg>:
 * \brief Process incoming messages and action them repsectively
 * \param ack_msg incoimng message byte array
 * \return true or false
 */
uint8_t igh_message_process_incoming_msg(uint8_t * buffer)
{
   d4638:	b538      	push	{r3, r4, r5, lr}
    igh_msg_type message_type = UNKNOWN_MSG;
    uint8_t length = buffer[LEN_INDEX]; // get the length
   d463a:	7843      	ldrb	r3, [r0, #1]
 * \brief Process incoming messages and action them repsectively
 * \param ack_msg incoimng message byte array
 * \return true or false
 */
uint8_t igh_message_process_incoming_msg(uint8_t * buffer)
{
   d463c:	4604      	mov	r4, r0
    igh_msg_type message_type = UNKNOWN_MSG;
    uint8_t length = buffer[LEN_INDEX]; // get the length

    if(length <= 0) // prevent any messages with zero length from being processed
   d463e:	b33b      	cbz	r3, d4690 <igh_message_process_incoming_msg+0x58>
    {
        return message_type;    
    }

    if( (buffer[0] == FRAME_START) && (buffer[length-1] == FRAME_END) )
   d4640:	7802      	ldrb	r2, [r0, #0]
   d4642:	2a3c      	cmp	r2, #60	; 0x3c
   d4644:	d124      	bne.n	d4690 <igh_message_process_incoming_msg+0x58>
   d4646:	4403      	add	r3, r0
   d4648:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d464c:	2b3e      	cmp	r3, #62	; 0x3e
   d464e:	d11f      	bne.n	d4690 <igh_message_process_incoming_msg+0x58>
    {
        // check the serial number
        if( 0 != memcmp(boron_serial_number, &buffer[SN_INDEX], sizeof(boron_serial_number)))
   d4650:	1d01      	adds	r1, r0, #4
   d4652:	220c      	movs	r2, #12
   d4654:	4810      	ldr	r0, [pc, #64]	; (d4698 <igh_message_process_incoming_msg+0x60>)
   d4656:	f007 fb03 	bl	dbc60 <memcmp>
   d465a:	b9c8      	cbnz	r0, d4690 <igh_message_process_incoming_msg+0x58>
            // if the serial number does not match, do nothing as this message wasn't meant for this device,
            // This ideally should never happen
        }
        else
        {
            if( MSG_ACK == buffer[MSG_TYPE_INDEX] )
   d465c:	78a5      	ldrb	r5, [r4, #2]
   d465e:	2d41      	cmp	r5, #65	; 0x41
   d4660:	d110      	bne.n	d4684 <igh_message_process_incoming_msg+0x4c>
LOCAL uint8_t igh_message_process_ACK(uint8_t * ack_msg)
{
    // get the ACK tuple id
    igh_pkt_id _ack_id = (igh_pkt_id)ack_msg[PAYLOAD_INDEX];

    if( (MSG_ACK_TUPLE != _ack_id) || (SIZE_OF_MSG_ACK_TUPLE != ack_msg[PAYLOAD_INDEX + 1]) )
   d4662:	7c63      	ldrb	r3, [r4, #17]
   d4664:	4a0d      	ldr	r2, [pc, #52]	; (d469c <igh_message_process_incoming_msg+0x64>)
   d4666:	b913      	cbnz	r3, d466e <igh_message_process_incoming_msg+0x36>
   d4668:	7ca3      	ldrb	r3, [r4, #18]
   d466a:	2b01      	cmp	r3, #1
   d466c:	d002      	beq.n	d4674 <igh_message_process_incoming_msg+0x3c>
    {
        upload_igh_message_id--;
   d466e:	7813      	ldrb	r3, [r2, #0]
   d4670:	3b01      	subs	r3, #1
   d4672:	e005      	b.n	d4680 <igh_message_process_incoming_msg+0x48>
        return 0;
    }

    uint8_t acked_msd_id = ack_msg[PAYLOAD_INDEX + 2];
    uint8_t sent_message_id = upload_igh_message_id - 1; // the message id will have been incremented after the last send
   d4674:	7813      	ldrb	r3, [r2, #0]
    if (acked_msd_id != sent_message_id)
   d4676:	7ce1      	ldrb	r1, [r4, #19]
        upload_igh_message_id--;
        return 0;
    }

    uint8_t acked_msd_id = ack_msg[PAYLOAD_INDEX + 2];
    uint8_t sent_message_id = upload_igh_message_id - 1; // the message id will have been incremented after the last send
   d4678:	3b01      	subs	r3, #1
   d467a:	b2db      	uxtb	r3, r3
    if (acked_msd_id != sent_message_id)
   d467c:	4299      	cmp	r1, r3
   d467e:	d008      	beq.n	d4692 <igh_message_process_incoming_msg+0x5a>
    {
        upload_igh_message_id--; // roll back to send the previous message
   d4680:	7013      	strb	r3, [r2, #0]
   d4682:	e005      	b.n	d4690 <igh_message_process_incoming_msg+0x58>
                if(igh_message_process_ACK(buffer))
                {
                    message_type = MSG_ACK;
                }
            }
            else if( SETTINGS_MSG == buffer[MSG_TYPE_INDEX] )
   d4684:	2d53      	cmp	r5, #83	; 0x53
   d4686:	d103      	bne.n	d4690 <igh_message_process_incoming_msg+0x58>
            {
                // process settings here
                if(igh_settings_process_settings(buffer))
   d4688:	4620      	mov	r0, r4
   d468a:	f7ff ff35 	bl	d44f8 <igh_settings_process_settings>
   d468e:	b900      	cbnz	r0, d4692 <igh_message_process_incoming_msg+0x5a>
 * \param ack_msg incoimng message byte array
 * \return true or false
 */
uint8_t igh_message_process_incoming_msg(uint8_t * buffer)
{
    igh_msg_type message_type = UNKNOWN_MSG;
   d4690:	2500      	movs	r5, #0
        // if there is no frame start or no frame end, do nothing and return zer0
        // This may mean the length was wrong or the message was corrupted
    }

    return message_type; // should return the extracted tuple id for processing later
}
   d4692:	4628      	mov	r0, r5
   d4694:	bd38      	pop	{r3, r4, r5, pc}
   d4696:	bf00      	nop
   d4698:	2003e63c 	.word	0x2003e63c
   d469c:	2003d7fe 	.word	0x2003d7fe

000d46a0 <setup>:

/* Run Application routine */
void setup() 
{
    // setup application
    igh_app_setup();
   d46a0:	f000 b85c 	b.w	d475c <_Z13igh_app_setupv>

000d46a4 <loop>:
}

void loop() 
{
    // run main app
    igh_main_application();
   d46a4:	f000 bc58 	b.w	d4f58 <_Z20igh_main_applicationv>

000d46a8 <_GLOBAL__sub_I_setup>:
}
   d46a8:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d46aa:	f004 f8e5 	bl	d8878 <HAL_Pin_Map>
#include "particle_api/igh_log.h"
#endif

#include "include/igh_app.h"

SYSTEM_THREAD(ENABLED);
   d46ae:	2100      	movs	r1, #0
   d46b0:	2001      	movs	r0, #1

void loop() 
{
    // run main app
    igh_main_application();
}
   d46b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#include "particle_api/igh_log.h"
#endif

#include "include/igh_app.h"

SYSTEM_THREAD(ENABLED);
   d46b6:	f004 bb77 	b.w	d8da8 <system_thread_set_state>
	...

000d46bc <_Z19igh_app_log_servicev.part.1>:
        }
    }
    return ret;
}

void igh_app_log_service( void )
   d46bc:	b510      	push	{r4, lr}
{
    if( (millis() - log_service_timer) > ONE_SECOND )
    {
        // throttle sending data
        // Serial.print(".");
        if( 1 == mqtt_connected )
   d46be:	4b21      	ldr	r3, [pc, #132]	; (d4744 <_Z19igh_app_log_servicev.part.1+0x88>)
   d46c0:	781b      	ldrb	r3, [r3, #0]
   d46c2:	2b01      	cmp	r3, #1
        }
    }
    return ret;
}

void igh_app_log_service( void )
   d46c4:	b0c8      	sub	sp, #288	; 0x120
{
    if( (millis() - log_service_timer) > ONE_SECOND )
    {
        // throttle sending data
        // Serial.print(".");
        if( 1 == mqtt_connected )
   d46c6:	d136      	bne.n	d4736 <_Z19igh_app_log_servicev.part.1+0x7a>
        {
            char next_file[FILE_NAME_SIZE];
            if( true == igh_sd_log_get_next_file_name(next_file) )
   d46c8:	4668      	mov	r0, sp
   d46ca:	f001 fb21 	bl	d5d10 <_Z29igh_sd_log_get_next_file_namePc>
   d46ce:	2801      	cmp	r0, #1
   d46d0:	d131      	bne.n	d4736 <_Z19igh_app_log_servicev.part.1+0x7a>
            {
                uint8_t sd_data_point[MAX_FILE_SIZE];
                if( true == igh_sd_log_read_data_point(next_file, sd_data_point, MAX_FILE_SIZE) )
   d46d2:	22ff      	movs	r2, #255	; 0xff
   d46d4:	a908      	add	r1, sp, #32
   d46d6:	4668      	mov	r0, sp
   d46d8:	f001 fada 	bl	d5c90 <_Z26igh_sd_log_read_data_pointPcPhh>
   d46dc:	2801      	cmp	r0, #1
   d46de:	d12a      	bne.n	d4736 <_Z19igh_app_log_servicev.part.1+0x7a>
                {
                    Serial.print("Uploading: "); Serial.print((String)next_file);
   d46e0:	f005 fc18 	bl	d9f14 <_Z16_fetch_usbserialv>
   d46e4:	4918      	ldr	r1, [pc, #96]	; (d4748 <_Z19igh_app_log_servicev.part.1+0x8c>)
   d46e6:	f004 fef5 	bl	d94d4 <_ZN5Print5printEPKc>
   d46ea:	f005 fc13 	bl	d9f14 <_Z16_fetch_usbserialv>
   d46ee:	4669      	mov	r1, sp
   d46f0:	4604      	mov	r4, r0
   d46f2:	a804      	add	r0, sp, #16
   d46f4:	f004 fe41 	bl	d937a <_ZN6StringC1EPK19__FlashStringHelper>
   d46f8:	9904      	ldr	r1, [sp, #16]
   d46fa:	4620      	mov	r0, r4
   d46fc:	f004 feea 	bl	d94d4 <_ZN5Print5printEPKc>
   d4700:	a804      	add	r0, sp, #16
   d4702:	f004 fdf3 	bl	d92ec <_ZN6StringD1Ev>
                    //     if( sd_data_point[i] <= 0x0F ) Serial.print("0");
                    //     Serial.print( sd_data_point[i], HEX );
                    // }
                    // Serial.println("}");

                    if( true == igh_mqtt_publish_data(sd_data_point, sd_data_point[1]) )
   d4706:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
   d470a:	a808      	add	r0, sp, #32
   d470c:	f000 fda4 	bl	d5258 <_Z21igh_mqtt_publish_dataPhj>
   d4710:	b160      	cbz	r0, d472c <_Z19igh_app_log_servicev.part.1+0x70>
                    {
                        if( true == igh_sd_log_remove_data_point(next_file) ) 
   d4712:	4668      	mov	r0, sp
   d4714:	f001 fab6 	bl	d5c84 <_Z28igh_sd_log_remove_data_pointPc>
   d4718:	2801      	cmp	r0, #1
   d471a:	d103      	bne.n	d4724 <_Z19igh_app_log_servicev.part.1+0x68>
                        {
                            Serial.println(" OK");
   d471c:	f005 fbfa 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4720:	490a      	ldr	r1, [pc, #40]	; (d474c <_Z19igh_app_log_servicev.part.1+0x90>)
   d4722:	e006      	b.n	d4732 <_Z19igh_app_log_servicev.part.1+0x76>
                        }
                        else
                        {
                            Serial.println(" DEL ERROR");
   d4724:	f005 fbf6 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4728:	4909      	ldr	r1, [pc, #36]	; (d4750 <_Z19igh_app_log_servicev.part.1+0x94>)
   d472a:	e002      	b.n	d4732 <_Z19igh_app_log_servicev.part.1+0x76>
                        }
                    }
                    else
                    {
                        Serial.println(" MQTT ERROR");
   d472c:	f005 fbf2 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4730:	4908      	ldr	r1, [pc, #32]	; (d4754 <_Z19igh_app_log_servicev.part.1+0x98>)
   d4732:	f004 fee2 	bl	d94fa <_ZN5Print7printlnEPKc>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4736:	f004 f967 	bl	d8a08 <HAL_Timer_Get_Milli_Seconds>
            {
                // Serial.println("No new file to send");
            }
        }

        log_service_timer = millis();
   d473a:	4b07      	ldr	r3, [pc, #28]	; (d4758 <_Z19igh_app_log_servicev.part.1+0x9c>)
   d473c:	6018      	str	r0, [r3, #0]
    }
}
   d473e:	b048      	add	sp, #288	; 0x120
   d4740:	bd10      	pop	{r4, pc}
   d4742:	bf00      	nop
   d4744:	2003d891 	.word	0x2003d891
   d4748:	000dcf34 	.word	0x000dcf34
   d474c:	000dcf40 	.word	0x000dcf40
   d4750:	000dcf44 	.word	0x000dcf44
   d4754:	000dcf4f 	.word	0x000dcf4f
   d4758:	2003d800 	.word	0x2003d800

000d475c <_Z13igh_app_setupv>:
void igh_app_log_service( void );
void igh_app_get_temperature_and_humidity( uint8_t * incoming_data );
uint16_t igh_app_calculate_humidity( uint16_t temperature, uint16_t humidity );

void igh_app_setup( void )
{
   d475c:	b508      	push	{r3, lr}
    Serial.begin(19200);
   d475e:	f005 fbd9 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4762:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
   d4766:	f005 fbc9 	bl	d9efc <_ZN9USBSerial5beginEl>
    
    igh_boron_setup();
   d476a:	f001 fb9f 	bl	d5eac <_Z15igh_boron_setupv>

    // setup hardwar
    igh_hardware_setup();
   d476e:	f000 ffdf 	bl	d5730 <_Z18igh_hardware_setupv>
    
    // get settings from eeprom
    igh_eeprom_init();
   d4772:	f000 fe53 	bl	d541c <_Z15igh_eeprom_initv>
    
    // starte the radio
    igh_rfm69_setup();
   d4776:	f001 fc29 	bl	d5fcc <_Z15igh_rfm69_setupv>
    
    // setup MQTT
    igh_mqtt_setup();
   d477a:	f000 fc47 	bl	d500c <_Z14igh_mqtt_setupv>

    // setup the SD card
    igh_sd_log_setup();
}
   d477e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    
    // setup MQTT
    igh_mqtt_setup();

    // setup the SD card
    igh_sd_log_setup();
   d4782:	f001 b9b5 	b.w	d5af0 <_Z16igh_sd_log_setupv>
	...

000d4788 <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir>:
uint8_t igh_app_add_message_header( uint8_t *_buffer, uint8_t start, igh_msg_type msg_type, igh_msg_dir dir )
{
    uint8_t i = start;

    // Add Message type
    _buffer[i++] = ERROR_MSG;
   d4788:	2345      	movs	r3, #69	; 0x45
        device_restart = false;
    }
}

uint8_t igh_app_add_message_header( uint8_t *_buffer, uint8_t start, igh_msg_type msg_type, igh_msg_dir dir )
{
   d478a:	b530      	push	{r4, r5, lr}
    uint8_t i = start;

    // Add Message type
    _buffer[i++] = ERROR_MSG;
   d478c:	5443      	strb	r3, [r0, r1]

    // Add direction
    _buffer[i++] = IGH_UPLOAD;
   d478e:	1c4b      	adds	r3, r1, #1
   d4790:	b2db      	uxtb	r3, r3
   d4792:	2255      	movs	r2, #85	; 0x55
   d4794:	54c2      	strb	r2, [r0, r3]

    // Add shield serial number
    memcpy( &_buffer[i], 
            boron_serial_number, 
            sizeof(boron_serial_number) );
   d4796:	4c0b      	ldr	r4, [pc, #44]	; (d47c4 <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir+0x3c>)
   d4798:	1c8a      	adds	r2, r1, #2
   d479a:	b2d2      	uxtb	r2, r2
   d479c:	6823      	ldr	r3, [r4, #0]
   d479e:	5083      	str	r3, [r0, r2]
   d47a0:	1885      	adds	r5, r0, r2
   d47a2:	6863      	ldr	r3, [r4, #4]
   d47a4:	606b      	str	r3, [r5, #4]
   d47a6:	68a3      	ldr	r3, [r4, #8]
   d47a8:	60ab      	str	r3, [r5, #8]

    i += sizeof(boron_serial_number);

    // Add incremental message ID
    static uint8_t message_id = 0;
    _buffer[i++] = message_id++;
   d47aa:	4b07      	ldr	r3, [pc, #28]	; (d47c8 <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir+0x40>)
   d47ac:	781a      	ldrb	r2, [r3, #0]
   d47ae:	1c54      	adds	r4, r2, #1
   d47b0:	701c      	strb	r4, [r3, #0]
   d47b2:	f101 030e 	add.w	r3, r1, #14
   d47b6:	b2db      	uxtb	r3, r3
   d47b8:	54c2      	strb	r2, [r0, r3]

    return i;
   d47ba:	f101 000f 	add.w	r0, r1, #15
}
   d47be:	b2c0      	uxtb	r0, r0
   d47c0:	bd30      	pop	{r4, r5, pc}
   d47c2:	bf00      	nop
   d47c4:	2003e63c 	.word	0x2003e63c
   d47c8:	2003d7ff 	.word	0x2003d7ff

000d47cc <_Z19igh_app_add_payloadPhhS_h>:

uint8_t igh_app_add_payload( uint8_t *_buffer, uint8_t start, uint8_t * _payload, uint8_t _payload_len )
{
   d47cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d47d0:	460c      	mov	r4, r1
   d47d2:	4605      	mov	r5, r0
   d47d4:	4699      	mov	r9, r3
   d47d6:	4617      	mov	r7, r2
    uint32_t timestamp_to_store = igh_boron_unix_time();
   d47d8:	f001 fb54 	bl	d5e84 <_Z19igh_boron_unix_timev>
   d47dc:	4680      	mov	r8, r0
    float battery_soc_float = igh_boron_SoC();
   d47de:	f001 fb53 	bl	d5e88 <_Z13igh_boron_SoCv>
    memcpy(&battery_soc, &battery_soc_float, sizeof battery_soc);

    uint8_t i = start;

    // Add DATA PKT PID
    _buffer[i++] = DATA_PKT;
   d47e2:	23fe      	movs	r3, #254	; 0xfe
   d47e4:	552b      	strb	r3, [r5, r4]
    i++; // leave room for payload length

    // Add Shield ID
    _buffer[i++] = SHIELD_ID;
   d47e6:	1ca3      	adds	r3, r4, #2
   d47e8:	b2db      	uxtb	r3, r3
   d47ea:	2217      	movs	r2, #23
   d47ec:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = sizeof(boron_serial_number);
   d47ee:	1ce3      	adds	r3, r4, #3
   d47f0:	b2db      	uxtb	r3, r3
   d47f2:	220c      	movs	r2, #12
   d47f4:	54ea      	strb	r2, [r5, r3]
    memcpy(&_buffer[i], igh_current_system_settings.serial_number, sizeof(igh_current_system_settings.serial_number) );
   d47f6:	4b47      	ldr	r3, [pc, #284]	; (d4914 <_Z19igh_app_add_payloadPhhS_h+0x148>)
   d47f8:	1d22      	adds	r2, r4, #4
   d47fa:	cb03      	ldmia	r3!, {r0, r1}
   d47fc:	b2d2      	uxtb	r2, r2
   d47fe:	eb05 0e02 	add.w	lr, r5, r2
   d4802:	50a8      	str	r0, [r5, r2]
   d4804:	f8ce 1004 	str.w	r1, [lr, #4]
   d4808:	6818      	ldr	r0, [r3, #0]
   d480a:	f8ce 0008 	str.w	r0, [lr, #8]
    i += sizeof(boron_serial_number);

    // Add Timestamp
    _buffer[i++] = STORE_TIMESTAMP;
   d480e:	f104 0310 	add.w	r3, r4, #16
   d4812:	b2db      	uxtb	r3, r3
   d4814:	2202      	movs	r2, #2
   d4816:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = SIZE_OF_STORE_TIMESTAMP;
   d4818:	f104 0311 	add.w	r3, r4, #17
   d481c:	b2db      	uxtb	r3, r3
   d481e:	2204      	movs	r2, #4
   d4820:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)timestamp_to_store;
   d4822:	f104 0312 	add.w	r3, r4, #18
   d4826:	b2db      	uxtb	r3, r3
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 8);
   d4828:	ea4f 2118 	mov.w	r1, r8, lsr #8
    i += sizeof(boron_serial_number);

    // Add Timestamp
    _buffer[i++] = STORE_TIMESTAMP;
    _buffer[i++] = SIZE_OF_STORE_TIMESTAMP;
    _buffer[i++] = (uint8_t)timestamp_to_store;
   d482c:	f805 8003 	strb.w	r8, [r5, r3]
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 8);
   d4830:	f104 0313 	add.w	r3, r4, #19
   d4834:	b2db      	uxtb	r3, r3
uint8_t igh_app_add_payload( uint8_t *_buffer, uint8_t start, uint8_t * _payload, uint8_t _payload_len )
{
    uint32_t timestamp_to_store = igh_boron_unix_time();
    float battery_soc_float = igh_boron_SoC();
    uint32_t battery_soc;
    memcpy(&battery_soc, &battery_soc_float, sizeof battery_soc);
   d4836:	ee10 6a10 	vmov	r6, s0

    // Add Timestamp
    _buffer[i++] = STORE_TIMESTAMP;
    _buffer[i++] = SIZE_OF_STORE_TIMESTAMP;
    _buffer[i++] = (uint8_t)timestamp_to_store;
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 8);
   d483a:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 16);
   d483c:	f104 0314 	add.w	r3, r4, #20
   d4840:	b2db      	uxtb	r3, r3
   d4842:	ea4f 4118 	mov.w	r1, r8, lsr #16
   d4846:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 24);
   d4848:	f104 0315 	add.w	r3, r4, #21
   d484c:	b2db      	uxtb	r3, r3
   d484e:	ea4f 6818 	mov.w	r8, r8, lsr #24
   d4852:	f805 8003 	strb.w	r8, [r5, r3]

    // Add Shield battery level
    _buffer[i++] = SHIELD_BATTERY_LEVEL;
   d4856:	f104 0316 	add.w	r3, r4, #22
   d485a:	b2db      	uxtb	r3, r3
   d485c:	210d      	movs	r1, #13
   d485e:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = SIZE_OF_SHIELD_BATTERY_LEVEL;
   d4860:	f104 0317 	add.w	r3, r4, #23
   d4864:	b2db      	uxtb	r3, r3
    _buffer[i++] = (uint8_t)battery_soc;
    _buffer[i++] = (uint8_t)( battery_soc >> 8);
   d4866:	0a31      	lsrs	r1, r6, #8
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 16);
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 24);

    // Add Shield battery level
    _buffer[i++] = SHIELD_BATTERY_LEVEL;
    _buffer[i++] = SIZE_OF_SHIELD_BATTERY_LEVEL;
   d4868:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)battery_soc;
   d486a:	f104 0318 	add.w	r3, r4, #24
   d486e:	b2db      	uxtb	r3, r3
    _buffer[i++] = current_valve_position;

    // Add water dispensed 
    uint32_t curr_water_L = 0;
    memcpy( &curr_water_L, &total_water_dispensed_Liters, sizeof curr_water_L );
    _buffer[i++] = WATER_DISPENSED;
   d4870:	2007      	movs	r0, #7
    _buffer[i++] = (uint8_t)( timestamp_to_store >> 24);

    // Add Shield battery level
    _buffer[i++] = SHIELD_BATTERY_LEVEL;
    _buffer[i++] = SIZE_OF_SHIELD_BATTERY_LEVEL;
    _buffer[i++] = (uint8_t)battery_soc;
   d4872:	54ee      	strb	r6, [r5, r3]
    _buffer[i++] = (uint8_t)( battery_soc >> 8);
   d4874:	f104 0319 	add.w	r3, r4, #25
   d4878:	b2db      	uxtb	r3, r3
   d487a:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = (uint8_t)( battery_soc >> 16);
   d487c:	f104 031a 	add.w	r3, r4, #26
   d4880:	b2db      	uxtb	r3, r3
   d4882:	0c31      	lsrs	r1, r6, #16
   d4884:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = (uint8_t)( battery_soc >> 24);
   d4886:	f104 031b 	add.w	r3, r4, #27
   d488a:	b2db      	uxtb	r3, r3
   d488c:	0e36      	lsrs	r6, r6, #24
   d488e:	54ee      	strb	r6, [r5, r3]

    // Add Valve position
    _buffer[i++] = VALVE_POSITION;
   d4890:	f104 031c 	add.w	r3, r4, #28
   d4894:	b2db      	uxtb	r3, r3
   d4896:	210f      	movs	r1, #15
   d4898:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = SIZE_OF_VALVE_POSITION;
   d489a:	f104 031d 	add.w	r3, r4, #29
   d489e:	b2db      	uxtb	r3, r3
   d48a0:	2101      	movs	r1, #1
   d48a2:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = current_valve_position;
   d48a4:	4b1c      	ldr	r3, [pc, #112]	; (d4918 <_Z19igh_app_add_payloadPhhS_h+0x14c>)
   d48a6:	7819      	ldrb	r1, [r3, #0]
   d48a8:	f104 031e 	add.w	r3, r4, #30
   d48ac:	b2db      	uxtb	r3, r3
   d48ae:	54e9      	strb	r1, [r5, r3]

    // Add water dispensed 
    uint32_t curr_water_L = 0;
    memcpy( &curr_water_L, &total_water_dispensed_Liters, sizeof curr_water_L );
   d48b0:	4b1a      	ldr	r3, [pc, #104]	; (d491c <_Z19igh_app_add_payloadPhhS_h+0x150>)
   d48b2:	6819      	ldr	r1, [r3, #0]
    _buffer[i++] = WATER_DISPENSED;
   d48b4:	f104 031f 	add.w	r3, r4, #31
   d48b8:	b2db      	uxtb	r3, r3
   d48ba:	54e8      	strb	r0, [r5, r3]
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
   d48bc:	f104 0320 	add.w	r3, r4, #32
   d48c0:	b2db      	uxtb	r3, r3
    _buffer[i++] = (uint8_t)curr_water_L;
    _buffer[i++] = (uint8_t)( curr_water_L >> 8);
    _buffer[i++] = (uint8_t)( curr_water_L >> 16);
    _buffer[i++] = (uint8_t)( curr_water_L >> 24);
   d48c2:	f104 0025 	add.w	r0, r4, #37	; 0x25

    // Add water dispensed 
    uint32_t curr_water_L = 0;
    memcpy( &curr_water_L, &total_water_dispensed_Liters, sizeof curr_water_L );
    _buffer[i++] = WATER_DISPENSED;
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
   d48c6:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)curr_water_L;
   d48c8:	f104 0321 	add.w	r3, r4, #33	; 0x21
   d48cc:	b2db      	uxtb	r3, r3
    _buffer[i++] = (uint8_t)( curr_water_L >> 8);
   d48ce:	0a0a      	lsrs	r2, r1, #8
    // Add water dispensed 
    uint32_t curr_water_L = 0;
    memcpy( &curr_water_L, &total_water_dispensed_Liters, sizeof curr_water_L );
    _buffer[i++] = WATER_DISPENSED;
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
    _buffer[i++] = (uint8_t)curr_water_L;
   d48d0:	54e9      	strb	r1, [r5, r3]
    _buffer[i++] = (uint8_t)( curr_water_L >> 8);
   d48d2:	f104 0322 	add.w	r3, r4, #34	; 0x22
   d48d6:	b2db      	uxtb	r3, r3
    _buffer[i++] = (uint8_t)( curr_water_L >> 16);
    _buffer[i++] = (uint8_t)( curr_water_L >> 24);
   d48d8:	b2c0      	uxtb	r0, r0
    uint32_t curr_water_L = 0;
    memcpy( &curr_water_L, &total_water_dispensed_Liters, sizeof curr_water_L );
    _buffer[i++] = WATER_DISPENSED;
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
    _buffer[i++] = (uint8_t)curr_water_L;
    _buffer[i++] = (uint8_t)( curr_water_L >> 8);
   d48da:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)( curr_water_L >> 16);
   d48dc:	f104 0323 	add.w	r3, r4, #35	; 0x23
   d48e0:	b2db      	uxtb	r3, r3
   d48e2:	0c0a      	lsrs	r2, r1, #16
   d48e4:	54ea      	strb	r2, [r5, r3]
    _buffer[i++] = (uint8_t)( curr_water_L >> 24);
   d48e6:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d48ea:	b2db      	uxtb	r3, r3

    // only add payload if the package fits, prevvent memory leak
    if( (_payload_len + i + 1) < MESSAGE_SIZE )
   d48ec:	eb09 0600 	add.w	r6, r9, r0
    _buffer[i++] = WATER_DISPENSED;
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
    _buffer[i++] = (uint8_t)curr_water_L;
    _buffer[i++] = (uint8_t)( curr_water_L >> 8);
    _buffer[i++] = (uint8_t)( curr_water_L >> 16);
    _buffer[i++] = (uint8_t)( curr_water_L >> 24);
   d48f0:	0e09      	lsrs	r1, r1, #24

    // only add payload if the package fits, prevvent memory leak
    if( (_payload_len + i + 1) < MESSAGE_SIZE )
   d48f2:	2efd      	cmp	r6, #253	; 0xfd
    _buffer[i++] = WATER_DISPENSED;
    _buffer[i++] = SIZE_OF_WATER_DISPENSED;
    _buffer[i++] = (uint8_t)curr_water_L;
    _buffer[i++] = (uint8_t)( curr_water_L >> 8);
    _buffer[i++] = (uint8_t)( curr_water_L >> 16);
    _buffer[i++] = (uint8_t)( curr_water_L >> 24);
   d48f4:	54e9      	strb	r1, [r5, r3]

    // only add payload if the package fits, prevvent memory leak
    if( (_payload_len + i + 1) < MESSAGE_SIZE )
   d48f6:	dc05      	bgt.n	d4904 <_Z19igh_app_add_payloadPhhS_h+0x138>
    {
        memcpy(&_buffer[i], _payload, _payload_len);
   d48f8:	464a      	mov	r2, r9
   d48fa:	4639      	mov	r1, r7
   d48fc:	4428      	add	r0, r5
   d48fe:	f007 f9be 	bl	dbc7e <memcpy>
        i += _payload_len;
   d4902:	b2f0      	uxtb	r0, r6
    }

    // add the payload length
    _buffer[ start + 1 ] = i - start - 2;
   d4904:	4425      	add	r5, r4
   d4906:	f1c4 04fe 	rsb	r4, r4, #254	; 0xfe
   d490a:	4404      	add	r4, r0
   d490c:	706c      	strb	r4, [r5, #1]

    return i;
}
   d490e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4912:	bf00      	nop
   d4914:	2003e55c 	.word	0x2003e55c
   d4918:	2003e5ec 	.word	0x2003e5ec
   d491c:	2003d8f4 	.word	0x2003d8f4

000d4920 <_Z27igh_app_send_device_restartv>:
        igh_boron_toggle_boron_led(OFF);
    }
}

void igh_app_send_device_restart( void )
{
   d4920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t current_time = igh_boron_unix_time();

    // only ssave a restart message if the time is synced. Otherwise wait till that happens
    if( (true == device_restart)
   d4922:	4e19      	ldr	r6, [pc, #100]	; (d4988 <_Z27igh_app_send_device_restartv+0x68>)
    }
}

void igh_app_send_device_restart( void )
{
    uint32_t current_time = igh_boron_unix_time();
   d4924:	f001 faae 	bl	d5e84 <_Z19igh_boron_unix_timev>

    // only ssave a restart message if the time is synced. Otherwise wait till that happens
    if( (true == device_restart)
   d4928:	7835      	ldrb	r5, [r6, #0]
   d492a:	2d01      	cmp	r5, #1
    }
}

void igh_app_send_device_restart( void )
{
    uint32_t current_time = igh_boron_unix_time();
   d492c:	4607      	mov	r7, r0

    // only ssave a restart message if the time is synced. Otherwise wait till that happens
    if( (true == device_restart)
   d492e:	d128      	bne.n	d4982 <_Z27igh_app_send_device_restartv+0x62>
        && (JAN_01_2020 < current_time) )
   d4930:	4b16      	ldr	r3, [pc, #88]	; (d498c <_Z27igh_app_send_device_restartv+0x6c>)
   d4932:	4298      	cmp	r0, r3
   d4934:	d925      	bls.n	d4982 <_Z27igh_app_send_device_restartv+0x62>
    {
        uint8_t i = 0; // keep track of pkt data
        uint8_t restart_msg[3];

        // first clear the buffer
        memset( igh_msg_buffer, 0, sizeof(igh_msg_buffer) );
   d4936:	4c16      	ldr	r4, [pc, #88]	; (d4990 <_Z27igh_app_send_device_restartv+0x70>)
   d4938:	22ff      	movs	r2, #255	; 0xff
   d493a:	2100      	movs	r1, #0
   d493c:	4620      	mov	r0, r4
   d493e:	f007 f9a9 	bl	dbc94 <memset>

        // Add Retart Message
        restart_msg[0] = RESTART;
   d4942:	23fd      	movs	r3, #253	; 0xfd
   d4944:	f88d 3004 	strb.w	r3, [sp, #4]
        restart_msg[1] = SIZE_OF_RESTART;
        restart_msg[2] = true;

        // Add frame start
        igh_msg_buffer[i++] = FRAME_START;
   d4948:	233c      	movs	r3, #60	; 0x3c
   d494a:	7023      	strb	r3, [r4, #0]
        i++; // leave room for pkg length

        i = igh_app_add_message_header( igh_msg_buffer, i, ERROR_MSG, IGH_UPLOAD );
   d494c:	2245      	movs	r2, #69	; 0x45
   d494e:	2355      	movs	r3, #85	; 0x55
   d4950:	2102      	movs	r1, #2
   d4952:	4620      	mov	r0, r4
        // first clear the buffer
        memset( igh_msg_buffer, 0, sizeof(igh_msg_buffer) );

        // Add Retart Message
        restart_msg[0] = RESTART;
        restart_msg[1] = SIZE_OF_RESTART;
   d4954:	f88d 5005 	strb.w	r5, [sp, #5]
        restart_msg[2] = true;
   d4958:	f88d 5006 	strb.w	r5, [sp, #6]

        // Add frame start
        igh_msg_buffer[i++] = FRAME_START;
        i++; // leave room for pkg length

        i = igh_app_add_message_header( igh_msg_buffer, i, ERROR_MSG, IGH_UPLOAD );
   d495c:	f7ff ff14 	bl	d4788 <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir>
        i = igh_app_add_payload( igh_msg_buffer, i, restart_msg, sizeof(restart_msg) );
   d4960:	2303      	movs	r3, #3
   d4962:	4601      	mov	r1, r0
   d4964:	aa01      	add	r2, sp, #4
   d4966:	4620      	mov	r0, r4
   d4968:	f7ff ff30 	bl	d47cc <_Z19igh_app_add_payloadPhhS_h>

        // Add Frame End 
        igh_msg_buffer[i++] = FRAME_END;
   d496c:	233e      	movs	r3, #62	; 0x3e
   d496e:	1c42      	adds	r2, r0, #1
   d4970:	5423      	strb	r3, [r4, r0]
   d4972:	b2d2      	uxtb	r2, r2
        //     Serial.print(igh_msg_buffer[k], HEX);
        // }
        // Serial.print("}\n");

        // save restart message
        igh_sd_log_save_data_point( (unsigned long)current_time, igh_msg_buffer, i );
   d4974:	4621      	mov	r1, r4
   d4976:	4638      	mov	r0, r7
        i = igh_app_add_payload( igh_msg_buffer, i, restart_msg, sizeof(restart_msg) );

        // Add Frame End 
        igh_msg_buffer[i++] = FRAME_END;

        igh_msg_buffer[1] = i; // add length
   d4978:	7062      	strb	r2, [r4, #1]
        //     Serial.print(igh_msg_buffer[k], HEX);
        // }
        // Serial.print("}\n");

        // save restart message
        igh_sd_log_save_data_point( (unsigned long)current_time, igh_msg_buffer, i );
   d497a:	f001 f919 	bl	d5bb0 <_Z26igh_sd_log_save_data_pointmPhh>

        device_restart = false;
   d497e:	2300      	movs	r3, #0
   d4980:	7033      	strb	r3, [r6, #0]
    }
}
   d4982:	b003      	add	sp, #12
   d4984:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4986:	bf00      	nop
   d4988:	2003d72d 	.word	0x2003d72d
   d498c:	5e0be100 	.word	0x5e0be100
   d4990:	2003e6f1 	.word	0x2003e6f1

000d4994 <_Z27igh_app_get_serial_hex_dataPhh>:
        new_settings_available = 0;
    }
}

uint8_t igh_app_get_serial_hex_data( uint8_t * buffer, uint8_t len )
{
   d4994:	b570      	push	{r4, r5, r6, lr}
   d4996:	460d      	mov	r5, r1
   d4998:	4606      	mov	r6, r0
    uint8_t ret = 0;

    uint8_t bytes_available = Serial.available();
   d499a:	f005 fabb 	bl	d9f14 <_Z16_fetch_usbserialv>
   d499e:	6803      	ldr	r3, [r0, #0]
   d49a0:	691b      	ldr	r3, [r3, #16]
   d49a2:	4798      	blx	r3
   d49a4:	b2c4      	uxtb	r4, r0
    if( bytes_available > 0 )
   d49a6:	b90c      	cbnz	r4, d49ac <_Z27igh_app_get_serial_hex_dataPhh+0x18>
    }
}

uint8_t igh_app_get_serial_hex_data( uint8_t * buffer, uint8_t len )
{
    uint8_t ret = 0;
   d49a8:	2400      	movs	r4, #0
   d49aa:	e019      	b.n	d49e0 <_Z27igh_app_get_serial_hex_dataPhh+0x4c>

    uint8_t bytes_available = Serial.available();
    if( bytes_available > 0 )
    {
        if( bytes_available <= len )
   d49ac:	42ac      	cmp	r4, r5
   d49ae:	d80c      	bhi.n	d49ca <_Z27igh_app_get_serial_hex_dataPhh+0x36>
   d49b0:	4635      	mov	r5, r6
        {
            for( uint8_t i = 0; i < bytes_available; i++ )
            {
                // read all available bytes
                buffer[i] = Serial.read();
   d49b2:	f005 faaf 	bl	d9f14 <_Z16_fetch_usbserialv>
   d49b6:	6803      	ldr	r3, [r0, #0]
   d49b8:	695b      	ldr	r3, [r3, #20]
   d49ba:	4798      	blx	r3
   d49bc:	f805 0b01 	strb.w	r0, [r5], #1
    uint8_t bytes_available = Serial.available();
    if( bytes_available > 0 )
    {
        if( bytes_available <= len )
        {
            for( uint8_t i = 0; i < bytes_available; i++ )
   d49c0:	1bab      	subs	r3, r5, r6
   d49c2:	b2db      	uxtb	r3, r3
   d49c4:	429c      	cmp	r4, r3
   d49c6:	d8f4      	bhi.n	d49b2 <_Z27igh_app_get_serial_hex_dataPhh+0x1e>
   d49c8:	e00a      	b.n	d49e0 <_Z27igh_app_get_serial_hex_dataPhh+0x4c>
   d49ca:	2500      	movs	r5, #0
        else
        {
            for( uint8_t i = 0; i < bytes_available; i++ )
            {
                // dump the data
                Serial.read();
   d49cc:	f005 faa2 	bl	d9f14 <_Z16_fetch_usbserialv>
   d49d0:	6803      	ldr	r3, [r0, #0]
   d49d2:	3501      	adds	r5, #1
   d49d4:	695b      	ldr	r3, [r3, #20]
   d49d6:	4798      	blx	r3
            }
            ret = bytes_available;
        }
        else
        {
            for( uint8_t i = 0; i < bytes_available; i++ )
   d49d8:	b2eb      	uxtb	r3, r5
   d49da:	429c      	cmp	r4, r3
   d49dc:	d8f6      	bhi.n	d49cc <_Z27igh_app_get_serial_hex_dataPhh+0x38>
   d49de:	e7e3      	b.n	d49a8 <_Z27igh_app_get_serial_hex_dataPhh+0x14>
                Serial.read();
            }
        }
    }
    return ret;
}
   d49e0:	4620      	mov	r0, r4
   d49e2:	bd70      	pop	{r4, r5, r6, pc}

000d49e4 <_Z24igh_app_get_new_settingsv>:

    return i;
}

void igh_app_get_new_settings( void )
{
   d49e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    memset( igh_msg_buffer, 0, sizeof(igh_msg_buffer) );
   d49e6:	4c26      	ldr	r4, [pc, #152]	; (d4a80 <_Z24igh_app_get_new_settingsv+0x9c>)
   d49e8:	22ff      	movs	r2, #255	; 0xff
   d49ea:	2100      	movs	r1, #0
   d49ec:	4620      	mov	r0, r4
   d49ee:	f007 f951 	bl	dbc94 <memset>
    uint8_t rx_bytes = igh_app_get_serial_hex_data(igh_msg_buffer, sizeof(igh_msg_buffer));
   d49f2:	21ff      	movs	r1, #255	; 0xff
   d49f4:	4620      	mov	r0, r4
   d49f6:	f7ff ffcd 	bl	d4994 <_Z27igh_app_get_serial_hex_dataPhh>
    if ( 0 < rx_bytes ) // via Serial
   d49fa:	4606      	mov	r6, r0
   d49fc:	2800      	cmp	r0, #0
   d49fe:	d03e      	beq.n	d4a7e <_Z24igh_app_get_new_settingsv+0x9a>
    {

        Serial.print("SERIAL DATA SETTINGS --> {");
   d4a00:	f005 fa88 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4a04:	491f      	ldr	r1, [pc, #124]	; (d4a84 <_Z24igh_app_get_new_settingsv+0xa0>)
   d4a06:	f004 fd65 	bl	d94d4 <_ZN5Print5printEPKc>
   d4a0a:	1e77      	subs	r7, r6, #1
   d4a0c:	1e65      	subs	r5, r4, #1
   d4a0e:	4427      	add	r7, r4
        for( uint8_t k = 0; k < rx_bytes; k++ )
   d4a10:	42bd      	cmp	r5, r7
   d4a12:	d00f      	beq.n	d4a34 <_Z24igh_app_get_new_settingsv+0x50>
        {
            if( igh_msg_buffer[k] <= 0x0F ) Serial.print("0");
   d4a14:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d4a18:	2b0f      	cmp	r3, #15
   d4a1a:	d804      	bhi.n	d4a26 <_Z24igh_app_get_new_settingsv+0x42>
   d4a1c:	f005 fa7a 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4a20:	4919      	ldr	r1, [pc, #100]	; (d4a88 <_Z24igh_app_get_new_settingsv+0xa4>)
   d4a22:	f004 fd57 	bl	d94d4 <_ZN5Print5printEPKc>
            Serial.print(igh_msg_buffer[k], HEX);
   d4a26:	f005 fa75 	bl	d9f14 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4a2a:	2210      	movs	r2, #16
   d4a2c:	7829      	ldrb	r1, [r5, #0]
   d4a2e:	f004 fd6e 	bl	d950e <_ZN5Print11printNumberEmh>
    uint8_t rx_bytes = igh_app_get_serial_hex_data(igh_msg_buffer, sizeof(igh_msg_buffer));
    if ( 0 < rx_bytes ) // via Serial
    {

        Serial.print("SERIAL DATA SETTINGS --> {");
        for( uint8_t k = 0; k < rx_bytes; k++ )
   d4a32:	e7ed      	b.n	d4a10 <_Z24igh_app_get_new_settingsv+0x2c>
        {
            if( igh_msg_buffer[k] <= 0x0F ) Serial.print("0");
            Serial.print(igh_msg_buffer[k], HEX);
        }
        Serial.print("}\n");
   d4a34:	f005 fa6e 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4a38:	4914      	ldr	r1, [pc, #80]	; (d4a8c <_Z24igh_app_get_new_settingsv+0xa8>)
   d4a3a:	f004 fd4b 	bl	d94d4 <_ZN5Print5printEPKc>

        if( IGH_SEND_SETTINGS == igh_msg_buffer[0] )
   d4a3e:	7823      	ldrb	r3, [r4, #0]
   d4a40:	2b10      	cmp	r3, #16
   d4a42:	d11c      	bne.n	d4a7e <_Z24igh_app_get_new_settingsv+0x9a>
        {
            if( true == igh_settings_process_settings_tuples( igh_msg_buffer, 2, rx_bytes) )
   d4a44:	4632      	mov	r2, r6
   d4a46:	2102      	movs	r1, #2
   d4a48:	480d      	ldr	r0, [pc, #52]	; (d4a80 <_Z24igh_app_get_new_settingsv+0x9c>)
   d4a4a:	f7ff fb37 	bl	d40bc <igh_settings_process_settings_tuples>
   d4a4e:	2801      	cmp	r0, #1
   d4a50:	d10e      	bne.n	d4a70 <_Z24igh_app_get_new_settingsv+0x8c>
            {
                new_settings_available = 1;
   d4a52:	4b0f      	ldr	r3, [pc, #60]	; (d4a90 <_Z24igh_app_get_new_settingsv+0xac>)
                // update the checksum of the system settings
                igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
   d4a54:	4c0f      	ldr	r4, [pc, #60]	; (d4a94 <_Z24igh_app_get_new_settingsv+0xb0>)

        if( IGH_SEND_SETTINGS == igh_msg_buffer[0] )
        {
            if( true == igh_settings_process_settings_tuples( igh_msg_buffer, 2, rx_bytes) )
            {
                new_settings_available = 1;
   d4a56:	7018      	strb	r0, [r3, #0]
                // update the checksum of the system settings
                igh_current_system_settings.checksum = igh_settings_calculate_checksum(&igh_current_system_settings, sizeof(igh_current_system_settings));
   d4a58:	21a8      	movs	r1, #168	; 0xa8
   d4a5a:	4620      	mov	r0, r4
   d4a5c:	f7ff fd1c 	bl	d4498 <igh_settings_calculate_checksum>
   d4a60:	7020      	strb	r0, [r4, #0]
                // update the checksum for the threshold settings
                igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
   d4a62:	4c0d      	ldr	r4, [pc, #52]	; (d4a98 <_Z24igh_app_get_new_settingsv+0xb4>)
   d4a64:	2134      	movs	r1, #52	; 0x34
   d4a66:	4620      	mov	r0, r4
   d4a68:	f7ff fd16 	bl	d4498 <igh_settings_calculate_checksum>
   d4a6c:	7020      	strb	r0, [r4, #0]
   d4a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            }
            else
            {
                Serial.println("SETTINGS FAILED");
   d4a70:	f005 fa50 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4a74:	4909      	ldr	r1, [pc, #36]	; (d4a9c <_Z24igh_app_get_new_settingsv+0xb8>)
            }
            
        }
    }
}
   d4a76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                // update the checksum for the threshold settings
                igh_current_threshold_settings.checksum = igh_settings_calculate_checksum(&igh_current_threshold_settings, sizeof(igh_current_threshold_settings));
            }
            else
            {
                Serial.println("SETTINGS FAILED");
   d4a7a:	f004 bd3e 	b.w	d94fa <_ZN5Print7printlnEPKc>
   d4a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4a80:	2003e6f1 	.word	0x2003e6f1
   d4a84:	000dcf5b 	.word	0x000dcf5b
   d4a88:	000dcf76 	.word	0x000dcf76
   d4a8c:	000dcf78 	.word	0x000dcf78
   d4a90:	2003d7fc 	.word	0x2003d7fc
   d4a94:	2003e544 	.word	0x2003e544
   d4a98:	2003e5f0 	.word	0x2003e5f0
   d4a9c:	000dcf7b 	.word	0x000dcf7b

000d4aa0 <_Z19igh_app_log_servicev>:
    }
    return ret;
}

void igh_app_log_service( void )
{
   d4aa0:	b508      	push	{r3, lr}
   d4aa2:	f003 ffb1 	bl	d8a08 <HAL_Timer_Get_Milli_Seconds>
    if( (millis() - log_service_timer) > ONE_SECOND )
   d4aa6:	4b05      	ldr	r3, [pc, #20]	; (d4abc <_Z19igh_app_log_servicev+0x1c>)
   d4aa8:	681b      	ldr	r3, [r3, #0]
   d4aaa:	1ac0      	subs	r0, r0, r3
   d4aac:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4ab0:	d903      	bls.n	d4aba <_Z19igh_app_log_servicev+0x1a>
            }
        }

        log_service_timer = millis();
    }
}
   d4ab2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4ab6:	f7ff be01 	b.w	d46bc <_Z19igh_app_log_servicev.part.1>
   d4aba:	bd08      	pop	{r3, pc}
   d4abc:	2003d800 	.word	0x2003d800

000d4ac0 <_Z26igh_app_calculate_humiditytt>:
        refreshed_soil_data = INVALID_SOIL_DATA;
    }   
}

uint16_t igh_app_calculate_humidity( uint16_t new_temperature, uint16_t new_humidity )
{
   d4ac0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   d4ac4:	ed2d 8b02 	vpush	{d8}
   d4ac8:	4606      	mov	r6, r0
   d4aca:	b082      	sub	sp, #8
    double linearHumidity = SOIL_HUMIDITY_MULTIPLIER_C1 + SOIL_HUMIDITY_MULTIPLIER_C2 * new_humidity 
   d4acc:	4608      	mov	r0, r1
   d4ace:	f006 fbd7 	bl	db280 <__aeabi_i2d>
   d4ad2:	4604      	mov	r4, r0
                          + SOIL_HUMIDITY_MULTIPLIER_C3 * new_humidity * new_humidity;

    float temperature = SOIL_TEMPERATURE_MULTIPLIER_D1 
                      + SOIL_TEMPERATURE_MULTIPLIER_D2 * new_temperature;
   d4ad4:	4630      	mov	r0, r6
    }   
}

uint16_t igh_app_calculate_humidity( uint16_t new_temperature, uint16_t new_humidity )
{
    double linearHumidity = SOIL_HUMIDITY_MULTIPLIER_C1 + SOIL_HUMIDITY_MULTIPLIER_C2 * new_humidity 
   d4ad6:	460d      	mov	r5, r1
                          + SOIL_HUMIDITY_MULTIPLIER_C3 * new_humidity * new_humidity;

    float temperature = SOIL_TEMPERATURE_MULTIPLIER_D1 
                      + SOIL_TEMPERATURE_MULTIPLIER_D2 * new_temperature;
   d4ad8:	f006 fbd2 	bl	db280 <__aeabi_i2d>
   d4adc:	a342      	add	r3, pc, #264	; (adr r3, d4be8 <_Z26igh_app_calculate_humiditytt+0x128>)
   d4ade:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4ae2:	f006 fc33 	bl	db34c <__aeabi_dmul>
   d4ae6:	a342      	add	r3, pc, #264	; (adr r3, d4bf0 <_Z26igh_app_calculate_humiditytt+0x130>)
   d4ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4aec:	f006 fa7a 	bl	dafe4 <__aeabi_dsub>
   d4af0:	f006 ff24 	bl	db93c <__aeabi_d2f>

    float correctedHumidity = (temperature - ROOM_TEMPERATURE) * 
                              (SOIL_HUMIDITY_MULTIPLIER_T1 + SOIL_HUMIDITY_MULTIPLIER_T2 * new_humidity) 
                              + linearHumidity;
   d4af4:	a340      	add	r3, pc, #256	; (adr r3, d4bf8 <_Z26igh_app_calculate_humiditytt+0x138>)
   d4af6:	e9d3 2300 	ldrd	r2, r3, [r3]
{
    double linearHumidity = SOIL_HUMIDITY_MULTIPLIER_C1 + SOIL_HUMIDITY_MULTIPLIER_C2 * new_humidity 
                          + SOIL_HUMIDITY_MULTIPLIER_C3 * new_humidity * new_humidity;

    float temperature = SOIL_TEMPERATURE_MULTIPLIER_D1 
                      + SOIL_TEMPERATURE_MULTIPLIER_D2 * new_temperature;
   d4afa:	4606      	mov	r6, r0

    float correctedHumidity = (temperature - ROOM_TEMPERATURE) * 
                              (SOIL_HUMIDITY_MULTIPLIER_T1 + SOIL_HUMIDITY_MULTIPLIER_T2 * new_humidity) 
                              + linearHumidity;
   d4afc:	4629      	mov	r1, r5
   d4afe:	4620      	mov	r0, r4
   d4b00:	f006 fc24 	bl	db34c <__aeabi_dmul>
   d4b04:	a33e      	add	r3, pc, #248	; (adr r3, d4c00 <_Z26igh_app_calculate_humiditytt+0x140>)
   d4b06:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4b0a:	f006 fa6b 	bl	dafe4 <__aeabi_dsub>
   d4b0e:	a33e      	add	r3, pc, #248	; (adr r3, d4c08 <_Z26igh_app_calculate_humiditytt+0x148>)
   d4b10:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4b14:	4680      	mov	r8, r0
   d4b16:	4689      	mov	r9, r1
   d4b18:	4620      	mov	r0, r4
   d4b1a:	4629      	mov	r1, r5
   d4b1c:	f006 fc16 	bl	db34c <__aeabi_dmul>
   d4b20:	4622      	mov	r2, r4
   d4b22:	462b      	mov	r3, r5
   d4b24:	f006 fc12 	bl	db34c <__aeabi_dmul>
   d4b28:	4602      	mov	r2, r0
   d4b2a:	460b      	mov	r3, r1
   d4b2c:	4640      	mov	r0, r8
   d4b2e:	4649      	mov	r1, r9
   d4b30:	f006 fa5a 	bl	dafe8 <__adddf3>
   d4b34:	a336      	add	r3, pc, #216	; (adr r3, d4c10 <_Z26igh_app_calculate_humiditytt+0x150>)
   d4b36:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4b3a:	4680      	mov	r8, r0
   d4b3c:	4689      	mov	r9, r1
   d4b3e:	4620      	mov	r0, r4
   d4b40:	4629      	mov	r1, r5
   d4b42:	f006 fc03 	bl	db34c <__aeabi_dmul>
   d4b46:	a328      	add	r3, pc, #160	; (adr r3, d4be8 <_Z26igh_app_calculate_humiditytt+0x128>)
   d4b48:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4b4c:	f006 fa4c 	bl	dafe8 <__adddf3>
   d4b50:	4604      	mov	r4, r0
   d4b52:	4630      	mov	r0, r6
   d4b54:	460d      	mov	r5, r1
   d4b56:	f006 fba5 	bl	db2a4 <__aeabi_f2d>
   d4b5a:	2200      	movs	r2, #0
   d4b5c:	4b1e      	ldr	r3, [pc, #120]	; (d4bd8 <_Z26igh_app_calculate_humiditytt+0x118>)
   d4b5e:	f006 fa41 	bl	dafe4 <__aeabi_dsub>
   d4b62:	4602      	mov	r2, r0
   d4b64:	460b      	mov	r3, r1
   d4b66:	4620      	mov	r0, r4
   d4b68:	4629      	mov	r1, r5
   d4b6a:	f006 fbef 	bl	db34c <__aeabi_dmul>
   d4b6e:	4602      	mov	r2, r0
   d4b70:	460b      	mov	r3, r1
   d4b72:	4640      	mov	r0, r8
   d4b74:	4649      	mov	r1, r9
   d4b76:	f006 fa37 	bl	dafe8 <__adddf3>
   d4b7a:	f006 fedf 	bl	db93c <__aeabi_d2f>
   d4b7e:	ee08 0a10 	vmov	s16, r0

    Serial.print("TEMPERATURE: "); Serial.print(temperature);
   d4b82:	f005 f9c7 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4b86:	4915      	ldr	r1, [pc, #84]	; (d4bdc <_Z26igh_app_calculate_humiditytt+0x11c>)
   d4b88:	f004 fca4 	bl	d94d4 <_ZN5Print5printEPKc>
   d4b8c:	f005 f9c2 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4b90:	ee00 6a10 	vmov	s0, r6
   d4b94:	2102      	movs	r1, #2
   d4b96:	f004 fd99 	bl	d96cc <_ZN5Print5printEfi>
    Serial.print("C HUMIDITY: "); Serial.print(correctedHumidity);
   d4b9a:	f005 f9bb 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4b9e:	4910      	ldr	r1, [pc, #64]	; (d4be0 <_Z26igh_app_calculate_humiditytt+0x120>)
   d4ba0:	f004 fc98 	bl	d94d4 <_ZN5Print5printEPKc>
   d4ba4:	f005 f9b6 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4ba8:	eeb0 0a48 	vmov.f32	s0, s16
   d4bac:	2102      	movs	r1, #2
   d4bae:	f004 fd8d 	bl	d96cc <_ZN5Print5printEfi>
    Serial.println("%");
   d4bb2:	f005 f9af 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4bb6:	490b      	ldr	r1, [pc, #44]	; (d4be4 <_Z26igh_app_calculate_humiditytt+0x124>)
   d4bb8:	f004 fc9f 	bl	d94fa <_ZN5Print7printlnEPKc>

    // offload the decimal places
    return (uint16_t)correctedHumidity;
   d4bbc:	eefc 7ac8 	vcvt.u32.f32	s15, s16
   d4bc0:	edcd 7a01 	vstr	s15, [sp, #4]
}
   d4bc4:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   d4bc8:	b002      	add	sp, #8
   d4bca:	ecbd 8b02 	vpop	{d8}
   d4bce:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   d4bd2:	bf00      	nop
   d4bd4:	f3af 8000 	nop.w
   d4bd8:	40390000 	.word	0x40390000
   d4bdc:	000dcf8b 	.word	0x000dcf8b
   d4be0:	000dcf99 	.word	0x000dcf99
   d4be4:	000dcfa6 	.word	0x000dcfa6
   d4be8:	47ae147b 	.word	0x47ae147b
   d4bec:	3f847ae1 	.word	0x3f847ae1
   d4bf0:	e147ae14 	.word	0xe147ae14
   d4bf4:	4043d47a 	.word	0x4043d47a
   d4bf8:	a786c227 	.word	0xa786c227
   d4bfc:	3fa2ca57 	.word	0x3fa2ca57
   d4c00:	adab9f56 	.word	0xadab9f56
   d4c04:	40005fd8 	.word	0x40005fd8
   d4c08:	d2ff5e1d 	.word	0xd2ff5e1d
   d4c0c:	bebad603 	.word	0xbebad603
   d4c10:	88e368f1 	.word	0x88e368f1
   d4c14:	3f14f8b5 	.word	0x3f14f8b5

000d4c18 <_Z36igh_app_get_temperature_and_humidityPh>:
        log_service_timer = millis();
    }
}

void igh_app_get_temperature_and_humidity( uint8_t * incoming_data )
{
   d4c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t current_tuple_length = 0;
    uint8_t current_data_index = 0;
    uint8_t byte_tracker = 2;

    uint16_t new_temperature = 0xFFFF;
    uint16_t new_humidity = 0xFFFF;
   d4c1a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    bool valid_temerature = false;
    bool valid_humidity = false;
   d4c1e:	2500      	movs	r5, #0
        log_service_timer = millis();
    }
}

void igh_app_get_temperature_and_humidity( uint8_t * incoming_data )
{
   d4c20:	4604      	mov	r4, r0
    uint8_t data_len = incoming_data[1];
   d4c22:	7846      	ldrb	r6, [r0, #1]
    uint8_t current_data_index = 0;
    uint8_t byte_tracker = 2;

    uint16_t new_temperature = 0xFFFF;
    uint16_t new_humidity = 0xFFFF;
    bool valid_temerature = false;
   d4c24:	46ae      	mov	lr, r5
    uint8_t current_tuple_id = 0;
    uint8_t current_tuple_length = 0;
    uint8_t current_data_index = 0;
    uint8_t byte_tracker = 2;

    uint16_t new_temperature = 0xFFFF;
   d4c26:	4608      	mov	r0, r1
{
    uint8_t data_len = incoming_data[1];
    uint8_t current_tuple_id = 0;
    uint8_t current_tuple_length = 0;
    uint8_t current_data_index = 0;
    uint8_t byte_tracker = 2;
   d4c28:	2702      	movs	r7, #2
    uint16_t new_temperature = 0xFFFF;
    uint16_t new_humidity = 0xFFFF;
    bool valid_temerature = false;
    bool valid_humidity = false;

    while(byte_tracker < data_len)
   d4c2a:	42b7      	cmp	r7, r6
   d4c2c:	d223      	bcs.n	d4c76 <_Z36igh_app_get_temperature_and_humidityPh+0x5e>
        // extract the length
        current_tuple_length = incoming_data[byte_tracker + 1];
        // extract the tuple data based on tuple id
        current_data_index = byte_tracker + 2;

        switch( current_tuple_id )
   d4c2e:	f814 c007 	ldrb.w	ip, [r4, r7]
    while(byte_tracker < data_len)
    {
        // extract tuples
        current_tuple_id = incoming_data[byte_tracker];
        // extract the length
        current_tuple_length = incoming_data[byte_tracker + 1];
   d4c32:	19e3      	adds	r3, r4, r7
        // extract the tuple data based on tuple id
        current_data_index = byte_tracker + 2;
   d4c34:	1cba      	adds	r2, r7, #2

        switch( current_tuple_id )
   d4c36:	f1bc 0f06 	cmp.w	ip, #6
    while(byte_tracker < data_len)
    {
        // extract tuples
        current_tuple_id = incoming_data[byte_tracker];
        // extract the length
        current_tuple_length = incoming_data[byte_tracker + 1];
   d4c3a:	785b      	ldrb	r3, [r3, #1]
        // extract the tuple data based on tuple id
        current_data_index = byte_tracker + 2;
   d4c3c:	b2d2      	uxtb	r2, r2

        switch( current_tuple_id )
   d4c3e:	d00d      	beq.n	d4c5c <_Z36igh_app_get_temperature_and_humidityPh+0x44>
   d4c40:	f1bc 0f0a 	cmp.w	ip, #10
   d4c44:	d113      	bne.n	d4c6e <_Z36igh_app_get_temperature_and_humidityPh+0x56>
        {
            case SOIL_TEMPERATURE:
                if( SIZE_OF_SOIL_TEMPERATURE == current_tuple_length )
   d4c46:	2b02      	cmp	r3, #2
   d4c48:	d111      	bne.n	d4c6e <_Z36igh_app_get_temperature_and_humidityPh+0x56>
                {
                    uint8_t new_temperature_reading[SIZE_OF_SOIL_TEMPERATURE]; 
                    memcpy(new_temperature_reading, &incoming_data[current_data_index], SIZE_OF_SOIL_TEMPERATURE);
   d4c4a:	18a0      	adds	r0, r4, r2
                    new_temperature = GET16_LI(new_temperature_reading);
   d4c4c:	5ca2      	ldrb	r2, [r4, r2]
   d4c4e:	7840      	ldrb	r0, [r0, #1]
   d4c50:	eb02 2000 	add.w	r0, r2, r0, lsl #8
   d4c54:	b280      	uxth	r0, r0
                    valid_temerature = true;
   d4c56:	f04f 0e01 	mov.w	lr, #1
   d4c5a:	e008      	b.n	d4c6e <_Z36igh_app_get_temperature_and_humidityPh+0x56>
                    /* Do nothing */
                }
                break;
                
            case SOIL_HUMIDITY:
                if( SIZE_OF_SOIL_HUMIDITY == current_tuple_length )
   d4c5c:	2b02      	cmp	r3, #2
   d4c5e:	d106      	bne.n	d4c6e <_Z36igh_app_get_temperature_and_humidityPh+0x56>
                {
                    uint8_t new_humidity_reading[SIZE_OF_SOIL_HUMIDITY]; 
                    memcpy(new_humidity_reading, &incoming_data[current_data_index], SIZE_OF_SOIL_HUMIDITY);
   d4c60:	18a1      	adds	r1, r4, r2
                    new_humidity = GET16_LI(new_humidity_reading);
   d4c62:	5ca2      	ldrb	r2, [r4, r2]
   d4c64:	7849      	ldrb	r1, [r1, #1]
   d4c66:	eb02 2101 	add.w	r1, r2, r1, lsl #8
   d4c6a:	b289      	uxth	r1, r1
                    valid_humidity = true;
   d4c6c:	2501      	movs	r5, #1
            default:
                /* Ignore other data */
                break;
        }
        // move index to next tuple id
        byte_tracker += current_tuple_length + TUPLE_HEADER_LEN;
   d4c6e:	1c9a      	adds	r2, r3, #2
   d4c70:	18bb      	adds	r3, r7, r2
   d4c72:	b2df      	uxtb	r7, r3
    uint16_t new_temperature = 0xFFFF;
    uint16_t new_humidity = 0xFFFF;
    bool valid_temerature = false;
    bool valid_humidity = false;

    while(byte_tracker < data_len)
   d4c74:	e7d9      	b.n	d4c2a <_Z36igh_app_get_temperature_and_humidityPh+0x12>
   d4c76:	4b07      	ldr	r3, [pc, #28]	; (d4c94 <_Z36igh_app_get_temperature_and_humidityPh+0x7c>)
        // move index to next tuple id
        byte_tracker += current_tuple_length + TUPLE_HEADER_LEN;
    }


    if( true == valid_humidity &&
   d4c78:	b14d      	cbz	r5, d4c8e <_Z36igh_app_get_temperature_and_humidityPh+0x76>
   d4c7a:	f1be 0f00 	cmp.w	lr, #0
   d4c7e:	d006      	beq.n	d4c8e <_Z36igh_app_get_temperature_and_humidityPh+0x76>
        true == valid_temerature )
    {
        refreshed_soil_data = VALID_SOIL_DATA;
   d4c80:	22ff      	movs	r2, #255	; 0xff
   d4c82:	701a      	strb	r2, [r3, #0]
        soil_humidity = igh_app_calculate_humidity(new_temperature, new_humidity);
   d4c84:	f7ff ff1c 	bl	d4ac0 <_Z26igh_app_calculate_humiditytt>
   d4c88:	4b03      	ldr	r3, [pc, #12]	; (d4c98 <_Z36igh_app_get_temperature_and_humidityPh+0x80>)
   d4c8a:	8018      	strh	r0, [r3, #0]
   d4c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    else
    {
        refreshed_soil_data = INVALID_SOIL_DATA;
   d4c8e:	2200      	movs	r2, #0
   d4c90:	701a      	strb	r2, [r3, #0]
   d4c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4c94:	2003d8cc 	.word	0x2003d8cc
   d4c98:	2003d8f0 	.word	0x2003d8f0

000d4c9c <_ZN5Print7printlnImLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
   d4c9c:	b538      	push	{r3, r4, r5, lr}
   d4c9e:	4605      	mov	r5, r0

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   d4ca0:	b922      	cbnz	r2, d4cac <_ZN5Print7printlnImLi0EEEjT_i+0x10>
        return write(n);
   d4ca2:	6803      	ldr	r3, [r0, #0]
   d4ca4:	b2c9      	uxtb	r1, r1
   d4ca6:	689b      	ldr	r3, [r3, #8]
   d4ca8:	4798      	blx	r3
   d4caa:	e002      	b.n	d4cb2 <_ZN5Print7printlnImLi0EEEjT_i+0x16>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4cac:	b2d2      	uxtb	r2, r2
   d4cae:	f004 fc2e 	bl	d950e <_ZN5Print11printNumberEmh>
   d4cb2:	4604      	mov	r4, r0
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4cb4:	4628      	mov	r0, r5
   d4cb6:	f004 fc14 	bl	d94e2 <_ZN5Print7printlnEv>
        return n;
    }
   d4cba:	4420      	add	r0, r4
   d4cbc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4cc0 <_Z37igh_app_receive_and_stage_sensor_datav>:
    igh_hardware_service_valve_state();

}

void igh_app_receive_and_stage_sensor_data( void )
{
   d4cc0:	b570      	push	{r4, r5, r6, lr}
   d4cc2:	b090      	sub	sp, #64	; 0x40
    uint8_t rx_buffer[RF69_MAX_DATA_LEN];
    uint8_t data_rx_len = 0;

    data_rx_len = igh_rfm69_receive_raw_bytes( rx_buffer, sizeof(rx_buffer) );
   d4cc4:	213d      	movs	r1, #61	; 0x3d
   d4cc6:	4668      	mov	r0, sp
   d4cc8:	f001 f9d6 	bl	d6078 <_Z27igh_rfm69_receive_raw_bytesPhh>

    if( 0 != data_rx_len )
   d4ccc:	4605      	mov	r5, r0
   d4cce:	b3c8      	cbz	r0, d4d44 <_Z37igh_app_receive_and_stage_sensor_datav+0x84>
        igh_app_get_temperature_and_humidity(rx_buffer);

        uint8_t i = 0; // keep track of pkt data

        // first clear the buffer
        memset( igh_msg_buffer, 0, sizeof(igh_msg_buffer) );
   d4cd0:	4c1d      	ldr	r4, [pc, #116]	; (d4d48 <_Z37igh_app_receive_and_stage_sensor_datav+0x88>)

    data_rx_len = igh_rfm69_receive_raw_bytes( rx_buffer, sizeof(rx_buffer) );

    if( 0 != data_rx_len )
    {
        igh_boron_toggle_boron_led(ON);
   d4cd2:	2001      	movs	r0, #1
   d4cd4:	f000 fcea 	bl	d56ac <_Z26igh_boron_toggle_boron_ledh>

        // read data needed by the shield
        igh_app_get_temperature_and_humidity(rx_buffer);
   d4cd8:	4668      	mov	r0, sp
   d4cda:	f7ff ff9d 	bl	d4c18 <_Z36igh_app_get_temperature_and_humidityPh>

        uint8_t i = 0; // keep track of pkt data

        // first clear the buffer
        memset( igh_msg_buffer, 0, sizeof(igh_msg_buffer) );
   d4cde:	22ff      	movs	r2, #255	; 0xff
   d4ce0:	2100      	movs	r1, #0
   d4ce2:	4620      	mov	r0, r4
   d4ce4:	f006 ffd6 	bl	dbc94 <memset>

        // Add frame start
        igh_msg_buffer[i++] = FRAME_START;
   d4ce8:	233c      	movs	r3, #60	; 0x3c
   d4cea:	7023      	strb	r3, [r4, #0]
        i++; // leave room for pkg length

        i = igh_app_add_message_header( igh_msg_buffer, i, ERROR_MSG, IGH_UPLOAD );
   d4cec:	2245      	movs	r2, #69	; 0x45
   d4cee:	2355      	movs	r3, #85	; 0x55
   d4cf0:	2102      	movs	r1, #2
   d4cf2:	4620      	mov	r0, r4
   d4cf4:	f7ff fd48 	bl	d4788 <_Z26igh_app_add_message_headerPhh12igh_msg_type11igh_msg_dir>
        i = igh_app_add_payload( igh_msg_buffer, i, rx_buffer, data_rx_len );
   d4cf8:	466a      	mov	r2, sp
   d4cfa:	4601      	mov	r1, r0
   d4cfc:	462b      	mov	r3, r5
   d4cfe:	4620      	mov	r0, r4
   d4d00:	f7ff fd64 	bl	d47cc <_Z19igh_app_add_payloadPhhS_h>

        // Add Frame End 
        igh_msg_buffer[i++] = FRAME_END;
   d4d04:	1c45      	adds	r5, r0, #1
   d4d06:	233e      	movs	r3, #62	; 0x3e
   d4d08:	b2ed      	uxtb	r5, r5
   d4d0a:	5423      	strb	r3, [r4, r0]

        igh_msg_buffer[1] = i; // add length
   d4d0c:	7065      	strb	r5, [r4, #1]

        Serial.print("\nTIME: "); Serial.println(igh_boron_unix_time(), HEX);
   d4d0e:	f005 f901 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4d12:	490e      	ldr	r1, [pc, #56]	; (d4d4c <_Z37igh_app_receive_and_stage_sensor_datav+0x8c>)
   d4d14:	f004 fbde 	bl	d94d4 <_ZN5Print5printEPKc>
   d4d18:	f005 f8fc 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4d1c:	4606      	mov	r6, r0
   d4d1e:	f001 f8b1 	bl	d5e84 <_Z19igh_boron_unix_timev>
   d4d22:	2210      	movs	r2, #16
   d4d24:	4601      	mov	r1, r0
   d4d26:	4630      	mov	r0, r6
   d4d28:	f7ff ffb8 	bl	d4c9c <_ZN5Print7printlnImLi0EEEjT_i>
        //     Serial.print(igh_msg_buffer[k], HEX);
        // }
        // Serial.print("}\n");

        // publish the data or store it if the publish fails
        uint32_t current_time = igh_boron_unix_time();
   d4d2c:	f001 f8aa 	bl	d5e84 <_Z19igh_boron_unix_timev>
        
        // Log data only if the time is synced
        if( JAN_01_2020 < current_time )
   d4d30:	4b07      	ldr	r3, [pc, #28]	; (d4d50 <_Z37igh_app_receive_and_stage_sensor_datav+0x90>)
   d4d32:	4298      	cmp	r0, r3
   d4d34:	d903      	bls.n	d4d3e <_Z37igh_app_receive_and_stage_sensor_datav+0x7e>
        igh_sd_log_save_data_point( (unsigned long)current_time, igh_msg_buffer, i );
   d4d36:	462a      	mov	r2, r5
   d4d38:	4621      	mov	r1, r4
   d4d3a:	f000 ff39 	bl	d5bb0 <_Z26igh_sd_log_save_data_pointmPhh>
        
        igh_boron_toggle_boron_led(OFF);
   d4d3e:	2000      	movs	r0, #0
   d4d40:	f000 fcb4 	bl	d56ac <_Z26igh_boron_toggle_boron_ledh>
    }
}
   d4d44:	b010      	add	sp, #64	; 0x40
   d4d46:	bd70      	pop	{r4, r5, r6, pc}
   d4d48:	2003e6f1 	.word	0x2003e6f1
   d4d4c:	000dcfa8 	.word	0x000dcfa8
   d4d50:	5e0be100 	.word	0x5e0be100

000d4d54 <_Z27igh_app_commit_new_settingsv>:
        }
    }
}

void igh_app_commit_new_settings( void )
{
   d4d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( 1 == new_settings_available )
   d4d58:	4b69      	ldr	r3, [pc, #420]	; (d4f00 <_Z27igh_app_commit_new_settingsv+0x1ac>)
   d4d5a:	781a      	ldrb	r2, [r3, #0]
   d4d5c:	2a01      	cmp	r2, #1
   d4d5e:	461f      	mov	r7, r3
   d4d60:	f040 80cb 	bne.w	d4efa <_Z27igh_app_commit_new_settingsv+0x1a6>
    {
        Serial.print("OP STATE:"); Serial.println(igh_current_system_settings.op_state);
   d4d64:	f005 f8d6 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4d68:	4966      	ldr	r1, [pc, #408]	; (d4f04 <_Z27igh_app_commit_new_settingsv+0x1b0>)
   d4d6a:	4c67      	ldr	r4, [pc, #412]	; (d4f08 <_Z27igh_app_commit_new_settingsv+0x1b4>)
   d4d6c:	f004 fbb2 	bl	d94d4 <_ZN5Print5printEPKc>
   d4d70:	f005 f8d0 	bl	d9f14 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4d74:	220a      	movs	r2, #10
   d4d76:	7a61      	ldrb	r1, [r4, #9]
   d4d78:	4605      	mov	r5, r0
   d4d7a:	f004 fbc8 	bl	d950e <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4d7e:	4628      	mov	r0, r5
   d4d80:	f004 fbaf 	bl	d94e2 <_ZN5Print7printlnEv>
        Serial.print("REPORTING INTERVAL: "); Serial.println(igh_current_system_settings.reporting_interval);
   d4d84:	f005 f8c6 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4d88:	4960      	ldr	r1, [pc, #384]	; (d4f0c <_Z27igh_app_commit_new_settingsv+0x1b8>)
   d4d8a:	f004 fba3 	bl	d94d4 <_ZN5Print5printEPKc>
   d4d8e:	f005 f8c1 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4d92:	220a      	movs	r2, #10
   d4d94:	6921      	ldr	r1, [r4, #16]
   d4d96:	f7ff ff81 	bl	d4c9c <_ZN5Print7printlnImLi0EEEjT_i>
        Serial.print("DATA RESOLUTION: "); Serial.println(igh_current_system_settings.data_resolution);
   d4d9a:	f005 f8bb 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4d9e:	495c      	ldr	r1, [pc, #368]	; (d4f10 <_Z27igh_app_commit_new_settingsv+0x1bc>)
   d4da0:	f004 fb98 	bl	d94d4 <_ZN5Print5printEPKc>
   d4da4:	f005 f8b6 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4da8:	220a      	movs	r2, #10
   d4daa:	6961      	ldr	r1, [r4, #20]
   d4dac:	f7ff ff76 	bl	d4c9c <_ZN5Print7printlnImLi0EEEjT_i>
        Serial.print("SERIAL NUMBER: ");
   d4db0:	f005 f8b0 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4db4:	4957      	ldr	r1, [pc, #348]	; (d4f14 <_Z27igh_app_commit_new_settingsv+0x1c0>)
   d4db6:	f004 fb8d 	bl	d94d4 <_ZN5Print5printEPKc>
   d4dba:	f104 0617 	add.w	r6, r4, #23
   d4dbe:	f104 0823 	add.w	r8, r4, #35	; 0x23
   d4dc2:	4625      	mov	r5, r4
        for( uint8_t i = 0; i < sizeof(igh_default_system_settings.serial_number); i++ )
        {
            if( igh_current_system_settings.serial_number[i] <= 0x0F ) Serial.print("0");
   d4dc4:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   d4dc8:	2b0f      	cmp	r3, #15
   d4dca:	d804      	bhi.n	d4dd6 <_Z27igh_app_commit_new_settingsv+0x82>
   d4dcc:	f005 f8a2 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4dd0:	4951      	ldr	r1, [pc, #324]	; (d4f18 <_Z27igh_app_commit_new_settingsv+0x1c4>)
   d4dd2:	f004 fb7f 	bl	d94d4 <_ZN5Print5printEPKc>
            Serial.print(igh_current_system_settings.serial_number[i], HEX);
   d4dd6:	f005 f89d 	bl	d9f14 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4dda:	2210      	movs	r2, #16
   d4ddc:	7831      	ldrb	r1, [r6, #0]
   d4dde:	f004 fb96 	bl	d950e <_ZN5Print11printNumberEmh>
    {
        Serial.print("OP STATE:"); Serial.println(igh_current_system_settings.op_state);
        Serial.print("REPORTING INTERVAL: "); Serial.println(igh_current_system_settings.reporting_interval);
        Serial.print("DATA RESOLUTION: "); Serial.println(igh_current_system_settings.data_resolution);
        Serial.print("SERIAL NUMBER: ");
        for( uint8_t i = 0; i < sizeof(igh_default_system_settings.serial_number); i++ )
   d4de2:	45b0      	cmp	r8, r6
   d4de4:	d1ee      	bne.n	d4dc4 <_Z27igh_app_commit_new_settingsv+0x70>
        {
            if( igh_current_system_settings.serial_number[i] <= 0x0F ) Serial.print("0");
            Serial.print(igh_current_system_settings.serial_number[i], HEX);
        }
        Serial.print("\n");
   d4de6:	f005 f895 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4dea:	494c      	ldr	r1, [pc, #304]	; (d4f1c <_Z27igh_app_commit_new_settingsv+0x1c8>)
   d4dec:	f004 fb72 	bl	d94d4 <_ZN5Print5printEPKc>
        Serial.print("MQTT BROKER: "); Serial.println((char *)igh_current_system_settings.broker);
   d4df0:	f005 f890 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4df4:	494a      	ldr	r1, [pc, #296]	; (d4f20 <_Z27igh_app_commit_new_settingsv+0x1cc>)
   d4df6:	f004 fb6d 	bl	d94d4 <_ZN5Print5printEPKc>
   d4dfa:	f005 f88b 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4dfe:	4949      	ldr	r1, [pc, #292]	; (d4f24 <_Z27igh_app_commit_new_settingsv+0x1d0>)
   d4e00:	f004 fb7b 	bl	d94fa <_ZN5Print7printlnEPKc>
        Serial.print("MQTT BROKER PORT: "); Serial.println(igh_current_system_settings.broker_port);
   d4e04:	f005 f886 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4e08:	4947      	ldr	r1, [pc, #284]	; (d4f28 <_Z27igh_app_commit_new_settingsv+0x1d4>)
   d4e0a:	f004 fb63 	bl	d94d4 <_ZN5Print5printEPKc>
   d4e0e:	f005 f881 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4e12:	220a      	movs	r2, #10
   d4e14:	f8b5 1064 	ldrh.w	r1, [r5, #100]	; 0x64
   d4e18:	4604      	mov	r4, r0
   d4e1a:	f004 fb78 	bl	d950e <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4e1e:	4620      	mov	r0, r4
   d4e20:	f004 fb5f 	bl	d94e2 <_ZN5Print7printlnEv>
        Serial.print("MQTT USERNAME: "); Serial.println((char *)igh_current_system_settings.mqtt_username);
   d4e24:	f005 f876 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4e28:	4940      	ldr	r1, [pc, #256]	; (d4f2c <_Z27igh_app_commit_new_settingsv+0x1d8>)
   d4e2a:	f004 fb53 	bl	d94d4 <_ZN5Print5printEPKc>
   d4e2e:	f005 f871 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4e32:	493f      	ldr	r1, [pc, #252]	; (d4f30 <_Z27igh_app_commit_new_settingsv+0x1dc>)
   d4e34:	f004 fb61 	bl	d94fa <_ZN5Print7printlnEPKc>
        Serial.print("MQTT PASSWORD: "); Serial.println((char *)igh_current_system_settings.mqtt_password);
   d4e38:	f005 f86c 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4e3c:	493d      	ldr	r1, [pc, #244]	; (d4f34 <_Z27igh_app_commit_new_settingsv+0x1e0>)
   d4e3e:	f004 fb49 	bl	d94d4 <_ZN5Print5printEPKc>
   d4e42:	f005 f867 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4e46:	493c      	ldr	r1, [pc, #240]	; (d4f38 <_Z27igh_app_commit_new_settingsv+0x1e4>)
   d4e48:	f004 fb57 	bl	d94fa <_ZN5Print7printlnEPKc>
        Serial.print("TIMEZONE: "); Serial.println(igh_current_system_settings.timezone);
   d4e4c:	f005 f862 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4e50:	493a      	ldr	r1, [pc, #232]	; (d4f3c <_Z27igh_app_commit_new_settingsv+0x1e8>)
   d4e52:	f004 fb3f 	bl	d94d4 <_ZN5Print5printEPKc>
   d4e56:	f005 f85d 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4e5a:	686c      	ldr	r4, [r5, #4]
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d4e5c:	2c00      	cmp	r4, #0
   d4e5e:	4606      	mov	r6, r0
   d4e60:	da04      	bge.n	d4e6c <_Z27igh_app_commit_new_settingsv+0x118>
            t = print('-');
   d4e62:	212d      	movs	r1, #45	; 0x2d
   d4e64:	f004 fb3a 	bl	d94dc <_ZN5Print5printEc>
            val = -n;
   d4e68:	4261      	negs	r1, r4
   d4e6a:	e000      	b.n	d4e6e <_Z27igh_app_commit_new_settingsv+0x11a>
        } else {
            val = n;
   d4e6c:	4621      	mov	r1, r4
        }
        return printNumber(val, base) + t;
   d4e6e:	220a      	movs	r2, #10
   d4e70:	4630      	mov	r0, r6
   d4e72:	f004 fb4c 	bl	d950e <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4e76:	4630      	mov	r0, r6
   d4e78:	f004 fb33 	bl	d94e2 <_ZN5Print7printlnEv>
        Serial.print("IRRIGATION HOUR: "); Serial.println(igh_current_system_settings.irrigation_hr);
   d4e7c:	f005 f84a 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4e80:	492f      	ldr	r1, [pc, #188]	; (d4f40 <_Z27igh_app_commit_new_settingsv+0x1ec>)
   d4e82:	f004 fb27 	bl	d94d4 <_ZN5Print5printEPKc>
   d4e86:	f005 f845 	bl	d9f14 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4e8a:	220a      	movs	r2, #10
   d4e8c:	7a29      	ldrb	r1, [r5, #8]
   d4e8e:	4604      	mov	r4, r0
   d4e90:	f004 fb3d 	bl	d950e <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4e94:	4620      	mov	r0, r4
   d4e96:	f004 fb24 	bl	d94e2 <_ZN5Print7printlnEv>
        Serial.print("VALVE OPEN PERIOD: "); Serial.println(igh_current_system_settings.water_dispenser_period);
   d4e9a:	f005 f83b 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4e9e:	4929      	ldr	r1, [pc, #164]	; (d4f44 <_Z27igh_app_commit_new_settingsv+0x1f0>)
   d4ea0:	f004 fb18 	bl	d94d4 <_ZN5Print5printEPKc>
   d4ea4:	f005 f836 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4ea8:	220a      	movs	r2, #10
   d4eaa:	68e9      	ldr	r1, [r5, #12]
   d4eac:	f7ff fef6 	bl	d4c9c <_ZN5Print7printlnImLi0EEEjT_i>
        Serial.print("CHECKSUM: "); Serial.println(igh_current_system_settings.checksum);
   d4eb0:	f005 f830 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4eb4:	4924      	ldr	r1, [pc, #144]	; (d4f48 <_Z27igh_app_commit_new_settingsv+0x1f4>)
   d4eb6:	f004 fb0d 	bl	d94d4 <_ZN5Print5printEPKc>
   d4eba:	f005 f82b 	bl	d9f14 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4ebe:	220a      	movs	r2, #10
   d4ec0:	7829      	ldrb	r1, [r5, #0]
   d4ec2:	4604      	mov	r4, r0
   d4ec4:	f004 fb23 	bl	d950e <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4ec8:	4620      	mov	r0, r4
   d4eca:	f004 fb0a 	bl	d94e2 <_ZN5Print7printlnEv>

        if ( true == igh_eeprom_save_system_settings( &igh_current_system_settings) )
   d4ece:	480e      	ldr	r0, [pc, #56]	; (d4f08 <_Z27igh_app_commit_new_settingsv+0x1b4>)
   d4ed0:	f000 fa69 	bl	d53a6 <_Z31igh_eeprom_save_system_settingsP15system_settings>
   d4ed4:	2801      	cmp	r0, #1
   d4ed6:	d104      	bne.n	d4ee2 <_Z27igh_app_commit_new_settingsv+0x18e>
        {
            Serial.println("System Settings Saved successfully");
   d4ed8:	f005 f81c 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4edc:	491b      	ldr	r1, [pc, #108]	; (d4f4c <_Z27igh_app_commit_new_settingsv+0x1f8>)
   d4ede:	f004 fb0c 	bl	d94fa <_ZN5Print7printlnEPKc>
        }

        if ( true == igh_eeprom_save_threshold_settings( &igh_current_threshold_settings) )
   d4ee2:	481b      	ldr	r0, [pc, #108]	; (d4f50 <_Z27igh_app_commit_new_settingsv+0x1fc>)
   d4ee4:	f000 faf8 	bl	d54d8 <_Z34igh_eeprom_save_threshold_settingsP10thresholds>
   d4ee8:	2801      	cmp	r0, #1
   d4eea:	d104      	bne.n	d4ef6 <_Z27igh_app_commit_new_settingsv+0x1a2>
        {
            Serial.println("Threshold Settings Saved successfully");
   d4eec:	f005 f812 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4ef0:	4918      	ldr	r1, [pc, #96]	; (d4f54 <_Z27igh_app_commit_new_settingsv+0x200>)
   d4ef2:	f004 fb02 	bl	d94fa <_ZN5Print7printlnEPKc>
        }

        new_settings_available = 0;
   d4ef6:	2300      	movs	r3, #0
   d4ef8:	703b      	strb	r3, [r7, #0]
   d4efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4efe:	bf00      	nop
   d4f00:	2003d7fc 	.word	0x2003d7fc
   d4f04:	000dcfb0 	.word	0x000dcfb0
   d4f08:	2003e544 	.word	0x2003e544
   d4f0c:	000dcfba 	.word	0x000dcfba
   d4f10:	000dcfcf 	.word	0x000dcfcf
   d4f14:	000dcfe1 	.word	0x000dcfe1
   d4f18:	000dcf76 	.word	0x000dcf76
   d4f1c:	000dd485 	.word	0x000dd485
   d4f20:	000dcff1 	.word	0x000dcff1
   d4f24:	2003e568 	.word	0x2003e568
   d4f28:	000dcfff 	.word	0x000dcfff
   d4f2c:	000dd012 	.word	0x000dd012
   d4f30:	2003e5aa 	.word	0x2003e5aa
   d4f34:	000dd022 	.word	0x000dd022
   d4f38:	2003e5ca 	.word	0x2003e5ca
   d4f3c:	000dd032 	.word	0x000dd032
   d4f40:	000dd03d 	.word	0x000dd03d
   d4f44:	000dd04f 	.word	0x000dd04f
   d4f48:	000dd063 	.word	0x000dd063
   d4f4c:	000dd06e 	.word	0x000dd06e
   d4f50:	2003e5f0 	.word	0x2003e5f0
   d4f54:	000dd091 	.word	0x000dd091

000d4f58 <_Z20igh_main_applicationv>:
    // setup the SD card
    igh_sd_log_setup();
}

void igh_main_application( void )
{
   d4f58:	b508      	push	{r3, lr}
    // check if there are any settings to read
    igh_app_get_new_settings();
   d4f5a:	f7ff fd43 	bl	d49e4 <_Z24igh_app_get_new_settingsv>

    // commit new settings if available
    igh_app_commit_new_settings();
   d4f5e:	f7ff fef9 	bl	d4d54 <_Z27igh_app_commit_new_settingsv>

    // process boron service
    igh_boron_service();
   d4f62:	f000 ffd7 	bl	d5f14 <_Z17igh_boron_servicev>
    
    // Send or store device restart message
    igh_app_send_device_restart();
   d4f66:	f7ff fcdb 	bl	d4920 <_Z27igh_app_send_device_restartv>
    
    // Send or Store Spear data
    igh_app_receive_and_stage_sensor_data();
   d4f6a:	f7ff fea9 	bl	d4cc0 <_Z37igh_app_receive_and_stage_sensor_datav>

    // Run MQTT service in background
    igh_mqtt_service();
   d4f6e:	f000 f897 	bl	d50a0 <_Z16igh_mqtt_servicev>

    // rfm69 service in the background
    igh_rfm69_service();
   d4f72:	f001 f89d 	bl	d60b0 <_Z17igh_rfm69_servicev>

    // manage data on SD card
    igh_app_log_service();
   d4f76:	f7ff fd93 	bl	d4aa0 <_Z19igh_app_log_servicev>

    // control the valve
    igh_hardware_service_valve_state();

}
   d4f7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

    // manage data on SD card
    igh_app_log_service();

    // control the valve
    igh_hardware_service_valve_state();
   d4f7e:	f000 bb8d 	b.w	d569c <_Z32igh_hardware_service_valve_statev>

000d4f82 <_GLOBAL__sub_I_log_service_timer>:
   d4f82:	f003 bc79 	b.w	d8878 <HAL_Pin_Map>
	...

000d4f88 <_Z13mqtt_callbackPcPhj>:

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);

void mqtt_callback(char* topic, byte* payload, unsigned int length) {
   d4f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    igh_msg_type msg_type = UNKNOWN_MSG;
    uint8_t p[length];
   d4f8c:	1dd3      	adds	r3, r2, #7
   d4f8e:	f023 0307 	bic.w	r3, r3, #7

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);

void mqtt_callback(char* topic, byte* payload, unsigned int length) {
   d4f92:	af00      	add	r7, sp, #0
    igh_msg_type msg_type = UNKNOWN_MSG;
    uint8_t p[length];
   d4f94:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(p, payload, length);
   d4f98:	4668      	mov	r0, sp

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);

void mqtt_callback(char* topic, byte* payload, unsigned int length) {
   d4f9a:	4690      	mov	r8, r2
    igh_msg_type msg_type = UNKNOWN_MSG;
    uint8_t p[length];
    memcpy(p, payload, length);
   d4f9c:	f006 fe6f 	bl	dbc7e <memcpy>

    Serial.print("RECEIVED MSG: ");
   d4fa0:	f004 ffb8 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4fa4:	4916      	ldr	r1, [pc, #88]	; (d5000 <_Z13mqtt_callbackPcPhj+0x78>)
   d4fa6:	f004 fa95 	bl	d94d4 <_ZN5Print5printEPKc>
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);

void mqtt_callback(char* topic, byte* payload, unsigned int length) {
    igh_msg_type msg_type = UNKNOWN_MSG;
    uint8_t p[length];
   d4faa:	466c      	mov	r4, sp
    memcpy(p, payload, length);

    Serial.print("RECEIVED MSG: ");
   d4fac:	2500      	movs	r5, #0
    for( uint8_t i = 0; i < length; i++ )
   d4fae:	b2ee      	uxtb	r6, r5
   d4fb0:	45b0      	cmp	r8, r6
   d4fb2:	d90f      	bls.n	d4fd4 <_Z13mqtt_callbackPcPhj+0x4c>
    {
        if( p[i] <= 0x0F ) Serial.print("0");
   d4fb4:	5da3      	ldrb	r3, [r4, r6]
   d4fb6:	2b0f      	cmp	r3, #15
   d4fb8:	d804      	bhi.n	d4fc4 <_Z13mqtt_callbackPcPhj+0x3c>
   d4fba:	f004 ffab 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4fbe:	4911      	ldr	r1, [pc, #68]	; (d5004 <_Z13mqtt_callbackPcPhj+0x7c>)
   d4fc0:	f004 fa88 	bl	d94d4 <_ZN5Print5printEPKc>
        Serial.print(p[i], HEX);
   d4fc4:	f004 ffa6 	bl	d9f14 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4fc8:	2210      	movs	r2, #16
   d4fca:	5da1      	ldrb	r1, [r4, r6]
   d4fcc:	f004 fa9f 	bl	d950e <_ZN5Print11printNumberEmh>
   d4fd0:	3501      	adds	r5, #1
    igh_msg_type msg_type = UNKNOWN_MSG;
    uint8_t p[length];
    memcpy(p, payload, length);

    Serial.print("RECEIVED MSG: ");
    for( uint8_t i = 0; i < length; i++ )
   d4fd2:	e7ec      	b.n	d4fae <_Z13mqtt_callbackPcPhj+0x26>
    {
        if( p[i] <= 0x0F ) Serial.print("0");
        Serial.print(p[i], HEX);
    }

    msg_type = (igh_msg_type)igh_message_process_incoming_msg( p );
   d4fd4:	4620      	mov	r0, r4
   d4fd6:	f7ff fb2f 	bl	d4638 <igh_message_process_incoming_msg>
   d4fda:	4605      	mov	r5, r0

    Serial.print("\nMESSAGE TYPE: ");
   d4fdc:	f004 ff9a 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4fe0:	4909      	ldr	r1, [pc, #36]	; (d5008 <_Z13mqtt_callbackPcPhj+0x80>)
   d4fe2:	f004 fa77 	bl	d94d4 <_ZN5Print5printEPKc>
    Serial.println((int)msg_type);
   d4fe6:	f004 ff95 	bl	d9f14 <_Z16_fetch_usbserialv>
   d4fea:	220a      	movs	r2, #10
   d4fec:	4604      	mov	r4, r0
   d4fee:	4629      	mov	r1, r5
   d4ff0:	f004 fa8d 	bl	d950e <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4ff4:	4620      	mov	r0, r4
   d4ff6:	f004 fa74 	bl	d94e2 <_ZN5Print7printlnEv>
}
   d4ffa:	46bd      	mov	sp, r7
   d4ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5000:	000dd0b7 	.word	0x000dd0b7
   d5004:	000dcf76 	.word	0x000dcf76
   d5008:	000dd0c6 	.word	0x000dd0c6

000d500c <_Z14igh_mqtt_setupv>:

void igh_mqtt_setup( void )
{
   d500c:	b510      	push	{r4, lr}
    // set mqtt device name
    device_name = System.deviceID();
   d500e:	4c1e      	ldr	r4, [pc, #120]	; (d5088 <_Z14igh_mqtt_setupv+0x7c>)
    Serial.print("\nMESSAGE TYPE: ");
    Serial.println((int)msg_type);
}

void igh_mqtt_setup( void )
{
   d5010:	b088      	sub	sp, #32
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d5012:	a804      	add	r0, sp, #16
   d5014:	f003 ff4c 	bl	d8eb0 <spark_deviceID>
    // set mqtt device name
    device_name = System.deviceID();
   d5018:	a904      	add	r1, sp, #16
   d501a:	4620      	mov	r0, r4
   d501c:	f004 f9ec 	bl	d93f8 <_ZN6StringaSEOS_>
   d5020:	a804      	add	r0, sp, #16
   d5022:	f004 f963 	bl	d92ec <_ZN6StringD1Ev>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d5026:	4919      	ldr	r1, [pc, #100]	; (d508c <_Z14igh_mqtt_setupv+0x80>)
   d5028:	a804      	add	r0, sp, #16
   d502a:	f004 f9a6 	bl	d937a <_ZN6StringC1EPK19__FlashStringHelper>
   d502e:	4668      	mov	r0, sp
   d5030:	f003 ff3e 	bl	d8eb0 <spark_deviceID>
    inbound_topic = "44" + System.deviceID();
   d5034:	4669      	mov	r1, sp
   d5036:	a804      	add	r0, sp, #16
   d5038:	f004 fa0e 	bl	d9458 <_ZplRK15StringSumHelperRK6String>
   d503c:	4601      	mov	r1, r0
   d503e:	4814      	ldr	r0, [pc, #80]	; (d5090 <_Z14igh_mqtt_setupv+0x84>)
   d5040:	f004 f9cb 	bl	d93da <_ZN6StringaSERKS_>
   d5044:	4668      	mov	r0, sp
   d5046:	f004 f951 	bl	d92ec <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d504a:	a804      	add	r0, sp, #16
   d504c:	f004 f94e 	bl	d92ec <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d5050:	4910      	ldr	r1, [pc, #64]	; (d5094 <_Z14igh_mqtt_setupv+0x88>)
   d5052:	a804      	add	r0, sp, #16
   d5054:	f004 f991 	bl	d937a <_ZN6StringC1EPK19__FlashStringHelper>
   d5058:	4668      	mov	r0, sp
   d505a:	f003 ff29 	bl	d8eb0 <spark_deviceID>
    outbound_topic = "55" + System.deviceID();
   d505e:	4669      	mov	r1, sp
   d5060:	a804      	add	r0, sp, #16
   d5062:	f004 f9f9 	bl	d9458 <_ZplRK15StringSumHelperRK6String>
   d5066:	4601      	mov	r1, r0
   d5068:	480b      	ldr	r0, [pc, #44]	; (d5098 <_Z14igh_mqtt_setupv+0x8c>)
   d506a:	f004 f9b6 	bl	d93da <_ZN6StringaSERKS_>
   d506e:	4668      	mov	r0, sp
   d5070:	f004 f93c 	bl	d92ec <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d5074:	a804      	add	r0, sp, #16
   d5076:	f004 f939 	bl	d92ec <_ZN6StringD1Ev>
    client.connect( (const char *)device_name );
   d507a:	6821      	ldr	r1, [r4, #0]
   d507c:	4807      	ldr	r0, [pc, #28]	; (d509c <_Z14igh_mqtt_setupv+0x90>)
   d507e:	f001 fa63 	bl	d6548 <_ZN4MQTT7connectEPKc>

}
   d5082:	b008      	add	sp, #32
   d5084:	bd10      	pop	{r4, pc}
   d5086:	bf00      	nop
   d5088:	2003d828 	.word	0x2003d828
   d508c:	000dd0d6 	.word	0x000dd0d6
   d5090:	2003d808 	.word	0x2003d808
   d5094:	000dd0d9 	.word	0x000dd0d9
   d5098:	2003d818 	.word	0x2003d818
   d509c:	2003d838 	.word	0x2003d838

000d50a0 <_Z16igh_mqtt_servicev>:

void igh_mqtt_service( void )
{
   d50a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if( true == mqtt_set_broker )
   d50a4:	4b5d      	ldr	r3, [pc, #372]	; (d521c <_Z16igh_mqtt_servicev+0x17c>)
   d50a6:	781a      	ldrb	r2, [r3, #0]
   d50a8:	2a01      	cmp	r2, #1
    client.connect( (const char *)device_name );

}

void igh_mqtt_service( void )
{
   d50aa:	af00      	add	r7, sp, #0
   d50ac:	461d      	mov	r5, r3
    if( true == mqtt_set_broker )
   d50ae:	d139      	bne.n	d5124 <_Z16igh_mqtt_servicev+0x84>
    {
        uint8_t broker_len = 0;

        while( igh_current_system_settings.broker[broker_len] )
   d50b0:	495b      	ldr	r1, [pc, #364]	; (d5220 <_Z16igh_mqtt_servicev+0x180>)
        Serial.print("BROKER: "); Serial.print(new_broker);
        Serial.print(" PORT: "); Serial.println(igh_current_system_settings.broker_port);
        
        client.setBroker(new_broker, igh_current_system_settings.broker_port);

        mqtt_set_broker = false;
   d50b2:	46e8      	mov	r8, sp
   d50b4:	2200      	movs	r2, #0
   d50b6:	1c50      	adds	r0, r2, #1
{
    if( true == mqtt_set_broker )
    {
        uint8_t broker_len = 0;

        while( igh_current_system_settings.broker[broker_len] )
   d50b8:	b2d2      	uxtb	r2, r2
   d50ba:	188b      	adds	r3, r1, r2
   d50bc:	4e58      	ldr	r6, [pc, #352]	; (d5220 <_Z16igh_mqtt_servicev+0x180>)
   d50be:	f893 4024 	ldrb.w	r4, [r3, #36]	; 0x24
   d50c2:	b10c      	cbz	r4, d50c8 <_Z16igh_mqtt_servicev+0x28>
   d50c4:	4602      	mov	r2, r0
   d50c6:	e7f6      	b.n	d50b6 <_Z16igh_mqtt_servicev+0x16>
        {
            if( '\0' == igh_current_system_settings.broker[broker_len] ) break;
            broker_len++;
        }
        
        char new_broker[broker_len + 1];
   d50c8:	f102 0308 	add.w	r3, r2, #8
   d50cc:	f023 0307 	bic.w	r3, r3, #7
   d50d0:	ebad 0d03 	sub.w	sp, sp, r3
        
        memcpy( new_broker, igh_current_system_settings.broker, sizeof(new_broker) );
   d50d4:	3201      	adds	r2, #1
   d50d6:	f106 0124 	add.w	r1, r6, #36	; 0x24
   d50da:	4668      	mov	r0, sp
   d50dc:	f006 fdcf 	bl	dbc7e <memcpy>

        Serial.print("BROKER: "); Serial.print(new_broker);
   d50e0:	f004 ff18 	bl	d9f14 <_Z16_fetch_usbserialv>
   d50e4:	494f      	ldr	r1, [pc, #316]	; (d5224 <_Z16igh_mqtt_servicev+0x184>)
   d50e6:	f004 f9f5 	bl	d94d4 <_ZN5Print5printEPKc>
   d50ea:	f004 ff13 	bl	d9f14 <_Z16_fetch_usbserialv>
   d50ee:	4669      	mov	r1, sp
   d50f0:	f004 f9f0 	bl	d94d4 <_ZN5Print5printEPKc>
        Serial.print(" PORT: "); Serial.println(igh_current_system_settings.broker_port);
   d50f4:	f004 ff0e 	bl	d9f14 <_Z16_fetch_usbserialv>
   d50f8:	494b      	ldr	r1, [pc, #300]	; (d5228 <_Z16igh_mqtt_servicev+0x188>)
   d50fa:	f004 f9eb 	bl	d94d4 <_ZN5Print5printEPKc>
   d50fe:	f004 ff09 	bl	d9f14 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5102:	220a      	movs	r2, #10
   d5104:	f8b6 1064 	ldrh.w	r1, [r6, #100]	; 0x64
   d5108:	4681      	mov	r9, r0
   d510a:	f004 fa00 	bl	d950e <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d510e:	4648      	mov	r0, r9
   d5110:	f004 f9e7 	bl	d94e2 <_ZN5Print7printlnEv>
        
        client.setBroker(new_broker, igh_current_system_settings.broker_port);
   d5114:	4669      	mov	r1, sp
   d5116:	f8b6 2064 	ldrh.w	r2, [r6, #100]	; 0x64
   d511a:	4844      	ldr	r0, [pc, #272]	; (d522c <_Z16igh_mqtt_servicev+0x18c>)
   d511c:	f001 f92a 	bl	d6374 <_ZN4MQTT9setBrokerEPct>

        mqtt_set_broker = false;
   d5120:	702c      	strb	r4, [r5, #0]
   d5122:	46c5      	mov	sp, r8
    }

    if (client.isConnected())
   d5124:	4841      	ldr	r0, [pc, #260]	; (d522c <_Z16igh_mqtt_servicev+0x18c>)
   d5126:	4c42      	ldr	r4, [pc, #264]	; (d5230 <_Z16igh_mqtt_servicev+0x190>)
   d5128:	f001 f916 	bl	d6358 <_ZN4MQTT11isConnectedEv>
   d512c:	4606      	mov	r6, r0
   d512e:	b178      	cbz	r0, d5150 <_Z16igh_mqtt_servicev+0xb0>
    {
        client.loop();
   d5130:	483e      	ldr	r0, [pc, #248]	; (d522c <_Z16igh_mqtt_servicev+0x18c>)
        mqtt_connected = 1;
   d5132:	2501      	movs	r5, #1
        mqtt_set_broker = false;
    }

    if (client.isConnected())
    {
        client.loop();
   d5134:	f001 fad4 	bl	d66e0 <_ZN4MQTT4loopEv>
        mqtt_connected = 1;
   d5138:	7025      	strb	r5, [r4, #0]

        if( false == mqtt_subscribed )
   d513a:	4c3e      	ldr	r4, [pc, #248]	; (d5234 <_Z16igh_mqtt_servicev+0x194>)
   d513c:	7823      	ldrb	r3, [r4, #0]
   d513e:	2b00      	cmp	r3, #0
   d5140:	d168      	bne.n	d5214 <_Z16igh_mqtt_servicev+0x174>
   d5142:	4b3d      	ldr	r3, [pc, #244]	; (d5238 <_Z16igh_mqtt_servicev+0x198>)
        {
            client.subscribe( (const char *)inbound_topic );
   d5144:	4839      	ldr	r0, [pc, #228]	; (d522c <_Z16igh_mqtt_servicev+0x18c>)
   d5146:	6819      	ldr	r1, [r3, #0]
   d5148:	f001 fbf6 	bl	d6938 <_ZN4MQTT9subscribeEPKc>
            mqtt_subscribed = true;
   d514c:	7025      	strb	r5, [r4, #0]
   d514e:	e061      	b.n	d5214 <_Z16igh_mqtt_servicev+0x174>
        }
    }
    else
    {
        /* try to connect */
        mqtt_connected = 0;
   d5150:	7020      	strb	r0, [r4, #0]

        if( (millis() - reconnect_interval) > 10000 )
   d5152:	4c3a      	ldr	r4, [pc, #232]	; (d523c <_Z16igh_mqtt_servicev+0x19c>)
   d5154:	f003 fc58 	bl	d8a08 <HAL_Timer_Get_Milli_Seconds>
   d5158:	6823      	ldr	r3, [r4, #0]
   d515a:	1ac0      	subs	r0, r0, r3
   d515c:	f242 7310 	movw	r3, #10000	; 0x2710
   d5160:	4298      	cmp	r0, r3
   d5162:	d957      	bls.n	d5214 <_Z16igh_mqtt_servicev+0x174>
        {
            // try to reconnect only once every 10 seconds
            uint8_t broker_uname_len = 0;
            uint8_t broker_password_len = 0;

            while( igh_current_system_settings.mqtt_username[broker_uname_len] )
   d5164:	492e      	ldr	r1, [pc, #184]	; (d5220 <_Z16igh_mqtt_servicev+0x180>)
            Serial.print("CLIENT NAME: "); Serial.print((const char *)device_name);
            Serial.print(" USERNAME: "); Serial.print(new_uname);
            Serial.print(" PASSWORD: "); Serial.println(new_password);
            
            client.connect( (const char *)device_name, (const char *)new_uname, (const char *)new_password );
            reconnect_interval = millis();
   d5166:	466d      	mov	r5, sp
        {
            // try to reconnect only once every 10 seconds
            uint8_t broker_uname_len = 0;
            uint8_t broker_password_len = 0;

            while( igh_current_system_settings.mqtt_username[broker_uname_len] )
   d5168:	b2f2      	uxtb	r2, r6
   d516a:	188b      	adds	r3, r1, r2
   d516c:	f106 0e01 	add.w	lr, r6, #1
   d5170:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
   d5174:	482a      	ldr	r0, [pc, #168]	; (d5220 <_Z16igh_mqtt_servicev+0x180>)
   d5176:	b10b      	cbz	r3, d517c <_Z16igh_mqtt_servicev+0xdc>
   d5178:	4676      	mov	r6, lr
   d517a:	e7f5      	b.n	d5168 <_Z16igh_mqtt_servicev+0xc8>
   d517c:	1c5e      	adds	r6, r3, #1
            {
                if( '\0' == igh_current_system_settings.mqtt_username[broker_uname_len] ) break;
                broker_uname_len++;
            }

            while( igh_current_system_settings.mqtt_password[broker_password_len] )
   d517e:	b2db      	uxtb	r3, r3
   d5180:	18c1      	adds	r1, r0, r3
   d5182:	f891 1086 	ldrb.w	r1, [r1, #134]	; 0x86
   d5186:	b109      	cbz	r1, d518c <_Z16igh_mqtt_servicev+0xec>
   d5188:	4633      	mov	r3, r6
   d518a:	e7f7      	b.n	d517c <_Z16igh_mqtt_servicev+0xdc>
            {
                if( '\0' == igh_current_system_settings.mqtt_password[broker_password_len] ) break;
                broker_password_len++;
            }

            char new_uname[broker_uname_len + 1];
   d518c:	f102 0108 	add.w	r1, r2, #8
   d5190:	f021 0107 	bic.w	r1, r1, #7
   d5194:	ebad 0d01 	sub.w	sp, sp, r1
            char new_password[broker_password_len + 1];
   d5198:	f103 0801 	add.w	r8, r3, #1
   d519c:	3308      	adds	r3, #8
   d519e:	f023 0307 	bic.w	r3, r3, #7
            {
                if( '\0' == igh_current_system_settings.mqtt_password[broker_password_len] ) break;
                broker_password_len++;
            }

            char new_uname[broker_uname_len + 1];
   d51a2:	466e      	mov	r6, sp
            char new_password[broker_password_len + 1];
            
            memcpy( new_uname, igh_current_system_settings.mqtt_username, sizeof(new_uname) );
   d51a4:	3201      	adds	r2, #1
                if( '\0' == igh_current_system_settings.mqtt_password[broker_password_len] ) break;
                broker_password_len++;
            }

            char new_uname[broker_uname_len + 1];
            char new_password[broker_password_len + 1];
   d51a6:	ebad 0d03 	sub.w	sp, sp, r3
            
            memcpy( new_uname, igh_current_system_settings.mqtt_username, sizeof(new_uname) );
   d51aa:	4925      	ldr	r1, [pc, #148]	; (d5240 <_Z16igh_mqtt_servicev+0x1a0>)
   d51ac:	4630      	mov	r0, r6
   d51ae:	f006 fd66 	bl	dbc7e <memcpy>
            memcpy( new_password, igh_current_system_settings.mqtt_password, sizeof(new_password) );
   d51b2:	4642      	mov	r2, r8
   d51b4:	4923      	ldr	r1, [pc, #140]	; (d5244 <_Z16igh_mqtt_servicev+0x1a4>)
   d51b6:	f8df 809c 	ldr.w	r8, [pc, #156]	; d5254 <_Z16igh_mqtt_servicev+0x1b4>
   d51ba:	4668      	mov	r0, sp
   d51bc:	f006 fd5f 	bl	dbc7e <memcpy>
            
            Serial.print("CLIENT NAME: "); Serial.print((const char *)device_name);
   d51c0:	f004 fea8 	bl	d9f14 <_Z16_fetch_usbserialv>
   d51c4:	4920      	ldr	r1, [pc, #128]	; (d5248 <_Z16igh_mqtt_servicev+0x1a8>)
   d51c6:	f004 f985 	bl	d94d4 <_ZN5Print5printEPKc>
   d51ca:	f004 fea3 	bl	d9f14 <_Z16_fetch_usbserialv>
   d51ce:	f8d8 1000 	ldr.w	r1, [r8]
   d51d2:	f004 f97f 	bl	d94d4 <_ZN5Print5printEPKc>
            Serial.print(" USERNAME: "); Serial.print(new_uname);
   d51d6:	f004 fe9d 	bl	d9f14 <_Z16_fetch_usbserialv>
   d51da:	491c      	ldr	r1, [pc, #112]	; (d524c <_Z16igh_mqtt_servicev+0x1ac>)
   d51dc:	f004 f97a 	bl	d94d4 <_ZN5Print5printEPKc>
   d51e0:	f004 fe98 	bl	d9f14 <_Z16_fetch_usbserialv>
   d51e4:	4631      	mov	r1, r6
   d51e6:	f004 f975 	bl	d94d4 <_ZN5Print5printEPKc>
            Serial.print(" PASSWORD: "); Serial.println(new_password);
   d51ea:	f004 fe93 	bl	d9f14 <_Z16_fetch_usbserialv>
   d51ee:	4918      	ldr	r1, [pc, #96]	; (d5250 <_Z16igh_mqtt_servicev+0x1b0>)
   d51f0:	f004 f970 	bl	d94d4 <_ZN5Print5printEPKc>
   d51f4:	f004 fe8e 	bl	d9f14 <_Z16_fetch_usbserialv>
   d51f8:	4669      	mov	r1, sp
   d51fa:	f004 f97e 	bl	d94fa <_ZN5Print7printlnEPKc>
            
            client.connect( (const char *)device_name, (const char *)new_uname, (const char *)new_password );
   d51fe:	466b      	mov	r3, sp
   d5200:	4632      	mov	r2, r6
   d5202:	f8d8 1000 	ldr.w	r1, [r8]
   d5206:	4809      	ldr	r0, [pc, #36]	; (d522c <_Z16igh_mqtt_servicev+0x18c>)
   d5208:	f001 f9ae 	bl	d6568 <_ZN4MQTT7connectEPKcS1_S1_>
   d520c:	f003 fbfc 	bl	d8a08 <HAL_Timer_Get_Milli_Seconds>
            reconnect_interval = millis();
   d5210:	6020      	str	r0, [r4, #0]
   d5212:	46ad      	mov	sp, r5
        }
    }
}
   d5214:	46bd      	mov	sp, r7
   d5216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d521a:	bf00      	nop
   d521c:	2003d6f0 	.word	0x2003d6f0
   d5220:	2003e544 	.word	0x2003e544
   d5224:	000dcff6 	.word	0x000dcff6
   d5228:	000dd00a 	.word	0x000dd00a
   d522c:	2003d838 	.word	0x2003d838
   d5230:	2003d891 	.word	0x2003d891
   d5234:	2003d890 	.word	0x2003d890
   d5238:	2003d808 	.word	0x2003d808
   d523c:	2003d804 	.word	0x2003d804
   d5240:	2003e5aa 	.word	0x2003e5aa
   d5244:	2003e5ca 	.word	0x2003e5ca
   d5248:	000dd0dc 	.word	0x000dd0dc
   d524c:	000dd016 	.word	0x000dd016
   d5250:	000dd026 	.word	0x000dd026
   d5254:	2003d828 	.word	0x2003d828

000d5258 <_Z21igh_mqtt_publish_dataPhj>:

bool igh_mqtt_publish_data( uint8_t *payload, unsigned int len )
{
   d5258:	b570      	push	{r4, r5, r6, lr}
   d525a:	4605      	mov	r5, r0
    bool ret = false;
    if (client.isConnected()) {
   d525c:	480d      	ldr	r0, [pc, #52]	; (d5294 <_Z21igh_mqtt_publish_dataPhj+0x3c>)
        }
    }
}

bool igh_mqtt_publish_data( uint8_t *payload, unsigned int len )
{
   d525e:	460e      	mov	r6, r1
    bool ret = false;
    if (client.isConnected()) {
   d5260:	f001 f87a 	bl	d6358 <_ZN4MQTT11isConnectedEv>
   d5264:	4604      	mov	r4, r0
   d5266:	b168      	cbz	r0, d5284 <_Z21igh_mqtt_publish_dataPhj+0x2c>
        client.publish( (const char *)outbound_topic, 
                        (const uint8_t*) payload, len);
   d5268:	490b      	ldr	r1, [pc, #44]	; (d5298 <_Z21igh_mqtt_publish_dataPhj+0x40>)
   d526a:	480a      	ldr	r0, [pc, #40]	; (d5294 <_Z21igh_mqtt_publish_dataPhj+0x3c>)
   d526c:	6809      	ldr	r1, [r1, #0]
   d526e:	4633      	mov	r3, r6
   d5270:	462a      	mov	r2, r5
   d5272:	f001 f9f8 	bl	d6666 <_ZN4MQTT7publishEPKcPKhj>
   d5276:	4b09      	ldr	r3, [pc, #36]	; (d529c <_Z21igh_mqtt_publish_dataPhj+0x44>)
        client.subscribe( (const char *)inbound_topic );
   d5278:	4806      	ldr	r0, [pc, #24]	; (d5294 <_Z21igh_mqtt_publish_dataPhj+0x3c>)
   d527a:	6819      	ldr	r1, [r3, #0]
   d527c:	f001 fb5c 	bl	d6938 <_ZN4MQTT9subscribeEPKc>
        ret = true;
   d5280:	2001      	movs	r0, #1
   d5282:	bd70      	pop	{r4, r5, r6, pc}
    }
    else
    {
        Serial.println("PUBLISH FAILED");
   d5284:	f004 fe46 	bl	d9f14 <_Z16_fetch_usbserialv>
   d5288:	4905      	ldr	r1, [pc, #20]	; (d52a0 <_Z21igh_mqtt_publish_dataPhj+0x48>)
   d528a:	f004 f936 	bl	d94fa <_ZN5Print7printlnEPKc>
    }
}

bool igh_mqtt_publish_data( uint8_t *payload, unsigned int len )
{
    bool ret = false;
   d528e:	4620      	mov	r0, r4
    else
    {
        Serial.println("PUBLISH FAILED");
    }
    return ret;
}
   d5290:	bd70      	pop	{r4, r5, r6, pc}
   d5292:	bf00      	nop
   d5294:	2003d838 	.word	0x2003d838
   d5298:	2003d818 	.word	0x2003d818
   d529c:	2003d808 	.word	0x2003d808
   d52a0:	000dd0ea 	.word	0x000dd0ea

000d52a4 <_GLOBAL__sub_I_device_name>:
   d52a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#include "include/igh_settings.h"
#include "include/igh_default_settings.h"
#include "include/igh_message.h"

/* MQTT variables */
String device_name;
   d52a6:	4e19      	ldr	r6, [pc, #100]	; (d530c <_GLOBAL__sub_I_device_name+0x68>)
   d52a8:	4f19      	ldr	r7, [pc, #100]	; (d5310 <_GLOBAL__sub_I_device_name+0x6c>)
   d52aa:	4c1a      	ldr	r4, [pc, #104]	; (d5314 <_GLOBAL__sub_I_device_name+0x70>)
   d52ac:	4d1a      	ldr	r5, [pc, #104]	; (d5318 <_GLOBAL__sub_I_device_name+0x74>)
   d52ae:	f003 fae3 	bl	d8878 <HAL_Pin_Map>
   d52b2:	4631      	mov	r1, r6
   d52b4:	4638      	mov	r0, r7
   d52b6:	f004 f860 	bl	d937a <_ZN6StringC1EPK19__FlashStringHelper>
   d52ba:	4638      	mov	r0, r7
String inbound_topic;
   d52bc:	4f17      	ldr	r7, [pc, #92]	; (d531c <_GLOBAL__sub_I_device_name+0x78>)
#include "include/igh_settings.h"
#include "include/igh_default_settings.h"
#include "include/igh_message.h"

/* MQTT variables */
String device_name;
   d52be:	4622      	mov	r2, r4
   d52c0:	4629      	mov	r1, r5
   d52c2:	f005 fd21 	bl	dad08 <__aeabi_atexit>
String inbound_topic;
   d52c6:	4631      	mov	r1, r6
   d52c8:	4638      	mov	r0, r7
   d52ca:	f004 f856 	bl	d937a <_ZN6StringC1EPK19__FlashStringHelper>
   d52ce:	4638      	mov	r0, r7
String outbound_topic;
   d52d0:	4f13      	ldr	r7, [pc, #76]	; (d5320 <_GLOBAL__sub_I_device_name+0x7c>)
#include "include/igh_default_settings.h"
#include "include/igh_message.h"

/* MQTT variables */
String device_name;
String inbound_topic;
   d52d2:	4622      	mov	r2, r4
   d52d4:	4629      	mov	r1, r5
   d52d6:	f005 fd17 	bl	dad08 <__aeabi_atexit>
String outbound_topic;
   d52da:	4631      	mov	r1, r6
   d52dc:	4638      	mov	r0, r7
   d52de:	f004 f84c 	bl	d937a <_ZN6StringC1EPK19__FlashStringHelper>
   d52e2:	4629      	mov	r1, r5
bool mqtt_subscribed = false;
uint8_t mqtt_connected = 0;

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);
   d52e4:	4d0f      	ldr	r5, [pc, #60]	; (d5324 <_GLOBAL__sub_I_device_name+0x80>)
#include "include/igh_message.h"

/* MQTT variables */
String device_name;
String inbound_topic;
String outbound_topic;
   d52e6:	4622      	mov	r2, r4
   d52e8:	4638      	mov	r0, r7
   d52ea:	f005 fd0d 	bl	dad08 <__aeabi_atexit>
bool mqtt_subscribed = false;
uint8_t mqtt_connected = 0;

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);
   d52ee:	4b0e      	ldr	r3, [pc, #56]	; (d5328 <_GLOBAL__sub_I_device_name+0x84>)
   d52f0:	490e      	ldr	r1, [pc, #56]	; (d532c <_GLOBAL__sub_I_device_name+0x88>)
   d52f2:	f240 725b 	movw	r2, #1883	; 0x75b
   d52f6:	4628      	mov	r0, r5
   d52f8:	f000 ff46 	bl	d6188 <_ZN4MQTTC1EPctPFvS0_PhjE>
   d52fc:	4622      	mov	r2, r4
   d52fe:	4628      	mov	r0, r5
   d5300:	490b      	ldr	r1, [pc, #44]	; (d5330 <_GLOBAL__sub_I_device_name+0x8c>)
    else
    {
        Serial.println("PUBLISH FAILED");
    }
    return ret;
}
   d5302:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
bool mqtt_subscribed = false;
uint8_t mqtt_connected = 0;

/* mqtt functions */
void mqtt_callback(char* topic, byte* payload, unsigned int length);
MQTT client(DEFAULT_MQTT_BROKER, DEFAULT_MQTT_BROKER_PORT, mqtt_callback);
   d5306:	f005 bcff 	b.w	dad08 <__aeabi_atexit>
   d530a:	bf00      	nop
   d530c:	000dd486 	.word	0x000dd486
   d5310:	2003d828 	.word	0x2003d828
   d5314:	2003d7f8 	.word	0x2003d7f8
   d5318:	000d92ed 	.word	0x000d92ed
   d531c:	2003d808 	.word	0x2003d808
   d5320:	2003d818 	.word	0x2003d818
   d5324:	2003d838 	.word	0x2003d838
   d5328:	000d4f89 	.word	0x000d4f89
   d532c:	000dd0f9 	.word	0x000dd0f9
   d5330:	000d693f 	.word	0x000d693f

000d5334 <_GLOBAL__sub_I_test_valve_flag>:
        igh_append_test_status(ret);
        test_rfm69_flag = false;
    }

    return ret;
   d5334:	b510      	push	{r4, lr}
static void print_cmd_options(void);
static void igh_append_test_status(uint8_t _status);

uint8_t test_rfm69_flag = 0;

String IGH_ID;
   d5336:	4c07      	ldr	r4, [pc, #28]	; (d5354 <_GLOBAL__sub_I_test_valve_flag+0x20>)
   d5338:	f003 fa9e 	bl	d8878 <HAL_Pin_Map>
   d533c:	4906      	ldr	r1, [pc, #24]	; (d5358 <_GLOBAL__sub_I_test_valve_flag+0x24>)
   d533e:	4620      	mov	r0, r4
   d5340:	f004 f81b 	bl	d937a <_ZN6StringC1EPK19__FlashStringHelper>
   d5344:	4620      	mov	r0, r4
   d5346:	4a05      	ldr	r2, [pc, #20]	; (d535c <_GLOBAL__sub_I_test_valve_flag+0x28>)
   d5348:	4905      	ldr	r1, [pc, #20]	; (d5360 <_GLOBAL__sub_I_test_valve_flag+0x2c>)
        igh_append_test_status(ret);
        test_rfm69_flag = false;
    }

    return ret;
   d534a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void print_cmd_options(void);
static void igh_append_test_status(uint8_t _status);

uint8_t test_rfm69_flag = 0;

String IGH_ID;
   d534e:	f005 bcdb 	b.w	dad08 <__aeabi_atexit>
   d5352:	bf00      	nop
   d5354:	2003d894 	.word	0x2003d894
   d5358:	000dd486 	.word	0x000dd486
   d535c:	2003d7f8 	.word	0x2003d7f8
   d5360:	000d92ed 	.word	0x000d92ed

000d5364 <_Z31igh_eeprom_read_system_settingsP15system_settings>:
 * \brief Gets system settings from eeprom emulator
 * \param running_system_settings_buffer: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_system_settings(system_settings * running_system_settings_buffer)
{
   d5364:	b510      	push	{r4, lr}
   d5366:	b0aa      	sub	sp, #168	; 0xa8
  system_settings local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d5368:	22a8      	movs	r2, #168	; 0xa8
   d536a:	2100      	movs	r1, #0
 * \brief Gets system settings from eeprom emulator
 * \param running_system_settings_buffer: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_system_settings(system_settings * running_system_settings_buffer)
{
   d536c:	4604      	mov	r4, r0
  system_settings local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d536e:	4668      	mov	r0, sp
   d5370:	f006 fc90 	bl	dbc94 <memset>
  EEPROM.get(SYSTEM_SETTINGS_ADDRESS, local_buffer);
   d5374:	f005 fc34 	bl	dabe0 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d5378:	22a8      	movs	r2, #168	; 0xa8
   d537a:	4669      	mov	r1, sp
   d537c:	2000      	movs	r0, #0
   d537e:	f003 fb5b 	bl	d8a38 <HAL_EEPROM_Get>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));
   d5382:	21a8      	movs	r1, #168	; 0xa8
   d5384:	4668      	mov	r0, sp
   d5386:	f7ff f887 	bl	d4498 <igh_settings_calculate_checksum>

  if( checksum != local_buffer.checksum)
   d538a:	f89d 3000 	ldrb.w	r3, [sp]
   d538e:	4283      	cmp	r3, r0
   d5390:	d106      	bne.n	d53a0 <_Z31igh_eeprom_read_system_settingsP15system_settings+0x3c>
  {
    return 0;
  }

  *running_system_settings_buffer = local_buffer;
   d5392:	22a8      	movs	r2, #168	; 0xa8
   d5394:	4669      	mov	r1, sp
   d5396:	4620      	mov	r0, r4
   d5398:	f006 fc71 	bl	dbc7e <memcpy>
  return 1;
   d539c:	2001      	movs	r0, #1
   d539e:	e000      	b.n	d53a2 <_Z31igh_eeprom_read_system_settingsP15system_settings+0x3e>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));

  if( checksum != local_buffer.checksum)
  {
    return 0;
   d53a0:	2000      	movs	r0, #0
  }

  *running_system_settings_buffer = local_buffer;
  return 1;

}
   d53a2:	b02a      	add	sp, #168	; 0xa8
   d53a4:	bd10      	pop	{r4, pc}

000d53a6 <_Z31igh_eeprom_save_system_settingsP15system_settings>:
 * \brief Save system settings  to eeprom emulator
 * \param settings_to_save: pointer to struct to save
 * \return true or false based on write success
 */
uint8_t igh_eeprom_save_system_settings(system_settings * settings_to_save)
{
   d53a6:	b510      	push	{r4, lr}
   d53a8:	4604      	mov	r4, r0
   d53aa:	b0aa      	sub	sp, #168	; 0xa8
  system_settings local_buffer;
  // save the data
  EEPROM.put(SYSTEM_SETTINGS_ADDRESS, *settings_to_save);
   d53ac:	f005 fc18 	bl	dabe0 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d53b0:	22a8      	movs	r2, #168	; 0xa8
   d53b2:	4621      	mov	r1, r4
   d53b4:	2000      	movs	r0, #0
   d53b6:	f003 fb47 	bl	d8a48 <HAL_EEPROM_Put>
  // check if data is saved
  igh_eeprom_read_system_settings(&local_buffer);
   d53ba:	4668      	mov	r0, sp
   d53bc:	f7ff ffd2 	bl	d5364 <_Z31igh_eeprom_read_system_settingsP15system_settings>

  if( local_buffer.checksum != (settings_to_save->checksum))
  {
    return 0;
   d53c0:	f89d 0000 	ldrb.w	r0, [sp]
   d53c4:	7823      	ldrb	r3, [r4, #0]
  }

  return 1;
}
   d53c6:	1ac3      	subs	r3, r0, r3
   d53c8:	4258      	negs	r0, r3
   d53ca:	4158      	adcs	r0, r3
   d53cc:	b02a      	add	sp, #168	; 0xa8
   d53ce:	bd10      	pop	{r4, pc}

000d53d0 <_Z34igh_eeprom_read_threshold_settingsP10thresholds>:
 * \brief Gets threshold settings from eeprom emulator
 * \param running_thresholds: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_threshold_settings(thresholds * running_thresholds)
{
   d53d0:	b530      	push	{r4, r5, lr}
   d53d2:	b08f      	sub	sp, #60	; 0x3c
  thresholds local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d53d4:	2234      	movs	r2, #52	; 0x34
   d53d6:	2100      	movs	r1, #0
 * \brief Gets threshold settings from eeprom emulator
 * \param running_thresholds: buffer to store settings in
 * \return true or false based on success of read
 */
uint8_t igh_eeprom_read_threshold_settings(thresholds * running_thresholds)
{
   d53d8:	4605      	mov	r5, r0
  thresholds local_buffer;
  memset(&local_buffer, 0, sizeof(local_buffer));
   d53da:	a801      	add	r0, sp, #4
   d53dc:	f006 fc5a 	bl	dbc94 <memset>
  EEPROM.get(SYSTEM_THRESHOLDS_ADDRESS, local_buffer);
   d53e0:	f005 fbfe 	bl	dabe0 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d53e4:	2234      	movs	r2, #52	; 0x34
   d53e6:	a901      	add	r1, sp, #4
   d53e8:	f44f 7000 	mov.w	r0, #512	; 0x200
   d53ec:	f003 fb24 	bl	d8a38 <HAL_EEPROM_Get>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));
   d53f0:	2134      	movs	r1, #52	; 0x34
   d53f2:	a801      	add	r0, sp, #4
   d53f4:	f7ff f850 	bl	d4498 <igh_settings_calculate_checksum>
  
  if( checksum != local_buffer.checksum)
   d53f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d53fc:	4283      	cmp	r3, r0
   d53fe:	d10a      	bne.n	d5416 <_Z34igh_eeprom_read_threshold_settingsP10thresholds+0x46>
  {
    return 0;
  }
  
  *running_thresholds = local_buffer;
   d5400:	ac01      	add	r4, sp, #4
   d5402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5404:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5406:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5408:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d540a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d540c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d540e:	6823      	ldr	r3, [r4, #0]
   d5410:	602b      	str	r3, [r5, #0]
  return 1;
   d5412:	2001      	movs	r0, #1
   d5414:	e000      	b.n	d5418 <_Z34igh_eeprom_read_threshold_settingsP10thresholds+0x48>

  uint8_t checksum = igh_settings_calculate_checksum(&local_buffer, sizeof(local_buffer));
  
  if( checksum != local_buffer.checksum)
  {
    return 0;
   d5416:	2000      	movs	r0, #0
  }
  
  *running_thresholds = local_buffer;
  return 1;
}
   d5418:	b00f      	add	sp, #60	; 0x3c
   d541a:	bd30      	pop	{r4, r5, pc}

000d541c <_Z15igh_eeprom_initv>:
#define SYSTEM_THRESHOLDS_ADDRESS   (int)0x0200
#define SYSTEM_ERRORS_ADDRESS       (int)0x0400


void igh_eeprom_init( void )
{
   d541c:	b530      	push	{r4, r5, lr}
   d541e:	b0b9      	sub	sp, #228	; 0xe4
  system_settings settings_in_memory;
  thresholds thresholds_in_memory;

  bool system_settings_read_successfully = igh_eeprom_read_system_settings(&settings_in_memory);
   d5420:	a80e      	add	r0, sp, #56	; 0x38
   d5422:	f7ff ff9f 	bl	d5364 <_Z31igh_eeprom_read_system_settingsP15system_settings>
  uint8_t valid_system_checksum = igh_settings_calculate_checksum( &settings_in_memory, sizeof(settings_in_memory) );
   d5426:	21a8      	movs	r1, #168	; 0xa8
void igh_eeprom_init( void )
{
  system_settings settings_in_memory;
  thresholds thresholds_in_memory;

  bool system_settings_read_successfully = igh_eeprom_read_system_settings(&settings_in_memory);
   d5428:	4604      	mov	r4, r0
  uint8_t valid_system_checksum = igh_settings_calculate_checksum( &settings_in_memory, sizeof(settings_in_memory) );
   d542a:	a80e      	add	r0, sp, #56	; 0x38
   d542c:	f7ff f834 	bl	d4498 <igh_settings_calculate_checksum>

  if( false == system_settings_read_successfully ||
   d5430:	b124      	cbz	r4, d543c <_Z15igh_eeprom_initv+0x20>
   d5432:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   d5436:	4283      	cmp	r3, r0
   d5438:	d100      	bne.n	d543c <_Z15igh_eeprom_initv+0x20>
      (settings_in_memory.checksum != valid_system_checksum) ||
   d543a:	b953      	cbnz	r3, d5452 <_Z15igh_eeprom_initv+0x36>
      ( 0 == settings_in_memory.checksum) )
  {
    // if we can't get valid settings from memory at all, use default settings
    Serial.println("USING DEFAULT SETTINGS");
   d543c:	f004 fd6a 	bl	d9f14 <_Z16_fetch_usbserialv>
   d5440:	491e      	ldr	r1, [pc, #120]	; (d54bc <_Z15igh_eeprom_initv+0xa0>)
   d5442:	f004 f85a 	bl	d94fa <_ZN5Print7printlnEPKc>
    igh_settings_reset_system_to_default();
   d5446:	f7ff f869 	bl	d451c <igh_settings_reset_system_to_default>
    new_settings_available = 1;
   d544a:	4b1d      	ldr	r3, [pc, #116]	; (d54c0 <_Z15igh_eeprom_initv+0xa4>)
   d544c:	2201      	movs	r2, #1
   d544e:	701a      	strb	r2, [r3, #0]
   d5450:	e009      	b.n	d5466 <_Z15igh_eeprom_initv+0x4a>
  }
  else
  {
    Serial.println("USING SETTINGS FROM MEMORY");
   d5452:	f004 fd5f 	bl	d9f14 <_Z16_fetch_usbserialv>
   d5456:	491b      	ldr	r1, [pc, #108]	; (d54c4 <_Z15igh_eeprom_initv+0xa8>)
   d5458:	f004 f84f 	bl	d94fa <_ZN5Print7printlnEPKc>
    igh_current_system_settings = settings_in_memory;
   d545c:	22a8      	movs	r2, #168	; 0xa8
   d545e:	a90e      	add	r1, sp, #56	; 0x38
   d5460:	4819      	ldr	r0, [pc, #100]	; (d54c8 <_Z15igh_eeprom_initv+0xac>)
   d5462:	f006 fc0c 	bl	dbc7e <memcpy>
  }

  bool threshold_settings_read_successfully = igh_eeprom_read_threshold_settings(&thresholds_in_memory);
   d5466:	a801      	add	r0, sp, #4
   d5468:	f7ff ffb2 	bl	d53d0 <_Z34igh_eeprom_read_threshold_settingsP10thresholds>
  uint8_t valid_threshold_checksum = igh_settings_calculate_checksum( &thresholds_in_memory, sizeof(thresholds_in_memory) );
   d546c:	2134      	movs	r1, #52	; 0x34
  {
    Serial.println("USING SETTINGS FROM MEMORY");
    igh_current_system_settings = settings_in_memory;
  }

  bool threshold_settings_read_successfully = igh_eeprom_read_threshold_settings(&thresholds_in_memory);
   d546e:	4604      	mov	r4, r0
  uint8_t valid_threshold_checksum = igh_settings_calculate_checksum( &thresholds_in_memory, sizeof(thresholds_in_memory) );
   d5470:	a801      	add	r0, sp, #4
   d5472:	f7ff f811 	bl	d4498 <igh_settings_calculate_checksum>

  if( false == threshold_settings_read_successfully ||
   d5476:	b124      	cbz	r4, d5482 <_Z15igh_eeprom_initv+0x66>
   d5478:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d547c:	4283      	cmp	r3, r0
   d547e:	d100      	bne.n	d5482 <_Z15igh_eeprom_initv+0x66>
      (thresholds_in_memory.checksum != valid_threshold_checksum) ||
   d5480:	b953      	cbnz	r3, d5498 <_Z15igh_eeprom_initv+0x7c>
      ( 0 == thresholds_in_memory.checksum) )
  {
    // if we can't get valid settings from memory at all, use default settings
    Serial.println("USING DEFAULT THRESHOLDS");
   d5482:	f004 fd47 	bl	d9f14 <_Z16_fetch_usbserialv>
   d5486:	4911      	ldr	r1, [pc, #68]	; (d54cc <_Z15igh_eeprom_initv+0xb0>)
   d5488:	f004 f837 	bl	d94fa <_ZN5Print7printlnEPKc>
    igh_settings_reset_system_to_default();
   d548c:	f7ff f846 	bl	d451c <igh_settings_reset_system_to_default>
    new_settings_available = 1;
   d5490:	4b0b      	ldr	r3, [pc, #44]	; (d54c0 <_Z15igh_eeprom_initv+0xa4>)
   d5492:	2201      	movs	r2, #1
   d5494:	701a      	strb	r2, [r3, #0]
   d5496:	e00e      	b.n	d54b6 <_Z15igh_eeprom_initv+0x9a>
  }
  else
  {
    Serial.println("USING THRESHOLDS FROM MEMORY");
   d5498:	f004 fd3c 	bl	d9f14 <_Z16_fetch_usbserialv>
    igh_current_threshold_settings = thresholds_in_memory;
   d549c:	ac01      	add	r4, sp, #4
    igh_settings_reset_system_to_default();
    new_settings_available = 1;
  }
  else
  {
    Serial.println("USING THRESHOLDS FROM MEMORY");
   d549e:	490c      	ldr	r1, [pc, #48]	; (d54d0 <_Z15igh_eeprom_initv+0xb4>)
    igh_current_threshold_settings = thresholds_in_memory;
   d54a0:	4d0c      	ldr	r5, [pc, #48]	; (d54d4 <_Z15igh_eeprom_initv+0xb8>)
    igh_settings_reset_system_to_default();
    new_settings_available = 1;
  }
  else
  {
    Serial.println("USING THRESHOLDS FROM MEMORY");
   d54a2:	f004 f82a 	bl	d94fa <_ZN5Print7printlnEPKc>
    igh_current_threshold_settings = thresholds_in_memory;
   d54a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d54a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d54aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d54ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d54ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d54b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d54b2:	6823      	ldr	r3, [r4, #0]
   d54b4:	602b      	str	r3, [r5, #0]
  }
}
   d54b6:	b039      	add	sp, #228	; 0xe4
   d54b8:	bd30      	pop	{r4, r5, pc}
   d54ba:	bf00      	nop
   d54bc:	000dd1ac 	.word	0x000dd1ac
   d54c0:	2003d7fc 	.word	0x2003d7fc
   d54c4:	000dd1c3 	.word	0x000dd1c3
   d54c8:	2003e544 	.word	0x2003e544
   d54cc:	000dd1de 	.word	0x000dd1de
   d54d0:	000dd1f7 	.word	0x000dd1f7
   d54d4:	2003e5f0 	.word	0x2003e5f0

000d54d8 <_Z34igh_eeprom_save_threshold_settingsP10thresholds>:
 * \brief Save threshold settings  to eeprom emulator
 * \param settings_to_save: pointer to struct to save
 * \return true or false based on write success
 */
uint8_t igh_eeprom_save_threshold_settings(thresholds * settings_to_save)
{
   d54d8:	b510      	push	{r4, lr}
   d54da:	4604      	mov	r4, r0
   d54dc:	b08e      	sub	sp, #56	; 0x38
    thresholds local_buffer;
    // save the data
    EEPROM.put(SYSTEM_THRESHOLDS_ADDRESS, *settings_to_save);
   d54de:	f005 fb7f 	bl	dabe0 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d54e2:	2234      	movs	r2, #52	; 0x34
   d54e4:	4621      	mov	r1, r4
   d54e6:	f44f 7000 	mov.w	r0, #512	; 0x200
   d54ea:	f003 faad 	bl	d8a48 <HAL_EEPROM_Put>
    // check if data is saved
    igh_eeprom_read_threshold_settings(&local_buffer);
   d54ee:	a801      	add	r0, sp, #4
   d54f0:	f7ff ff6e 	bl	d53d0 <_Z34igh_eeprom_read_threshold_settingsP10thresholds>

    if( local_buffer.checksum != (settings_to_save->checksum))
    {
        return 0;
   d54f4:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d54f8:	7823      	ldrb	r3, [r4, #0]
    }

    return 1;
}
   d54fa:	1ac3      	subs	r3, r0, r3
   d54fc:	4258      	negs	r0, r3
   d54fe:	4158      	adcs	r0, r3
   d5500:	b00e      	add	sp, #56	; 0x38
   d5502:	bd10      	pop	{r4, pc}

000d5504 <_GLOBAL__sub_I__Z15igh_eeprom_initv>:
   d5504:	f003 b9b8 	b.w	d8878 <HAL_Pin_Map>

000d5508 <_Z30igh_app_water_counter_callbackv>:
    water_flow_timer.start();
}

void igh_app_water_counter_callback( void )
{
    flow_meter_pulses++;
   d5508:	4a02      	ldr	r2, [pc, #8]	; (d5514 <_Z30igh_app_water_counter_callbackv+0xc>)
   d550a:	6813      	ldr	r3, [r2, #0]
   d550c:	3301      	adds	r3, #1
   d550e:	6013      	str	r3, [r2, #0]
   d5510:	4770      	bx	lr
   d5512:	bf00      	nop
   d5514:	2003d8c0 	.word	0x2003d8c0

000d5518 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d5518:	6803      	ldr	r3, [r0, #0]
   d551a:	4718      	bx	r3

000d551c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d551c:	2a01      	cmp	r2, #1
   d551e:	d002      	beq.n	d5526 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d5520:	2a02      	cmp	r2, #2
   d5522:	d002      	beq.n	d552a <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d5524:	e004      	b.n	d5530 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5526:	6001      	str	r1, [r0, #0]
	      break;
   d5528:	e002      	b.n	d5530 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d552a:	680b      	ldr	r3, [r1, #0]
   d552c:	b100      	cbz	r0, d5530 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d552e:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5530:	2000      	movs	r0, #0
   d5532:	4770      	bx	lr

000d5534 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d5534:	6943      	ldr	r3, [r0, #20]
   d5536:	b113      	cbz	r3, d553e <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5538:	6983      	ldr	r3, [r0, #24]
   d553a:	300c      	adds	r0, #12
   d553c:	4718      	bx	r3
   d553e:	4770      	bx	lr

000d5540 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d5540:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d5542:	2100      	movs	r1, #0
   d5544:	4604      	mov	r4, r0
   d5546:	4608      	mov	r0, r1
   d5548:	f003 faae 	bl	d8aa8 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d554c:	a902      	add	r1, sp, #8
   d554e:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d5550:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d5552:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d5556:	f003 fabf 	bl	d8ad8 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d555a:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d555c:	b10c      	cbz	r4, d5562 <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d555e:	2301      	movs	r3, #1
   d5560:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d5562:	2100      	movs	r1, #0
   d5564:	2001      	movs	r0, #1
   d5566:	f003 fa9f 	bl	d8aa8 <os_thread_scheduling>
            }
        }
        if (t) {
   d556a:	b12c      	cbz	r4, d5578 <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d556c:	6823      	ldr	r3, [r4, #0]
   d556e:	4620      	mov	r0, r4
   d5570:	689b      	ldr	r3, [r3, #8]
   d5572:	4798      	blx	r3
            t->running = false;
   d5574:	2300      	movs	r3, #0
   d5576:	7123      	strb	r3, [r4, #4]
        }
    }
   d5578:	b002      	add	sp, #8
   d557a:	bd10      	pop	{r4, pc}

000d557c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d557c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d557e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5580:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5582:	b113      	cbz	r3, d558a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5584:	2203      	movs	r2, #3
   d5586:	4601      	mov	r1, r0
   d5588:	4798      	blx	r3
    }
   d558a:	4620      	mov	r0, r4
   d558c:	bd10      	pop	{r4, pc}
	...

000d5590 <_ZN5TimerC1EjSt8functionIFvvEEb>:
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d5590:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5592:	2500      	movs	r5, #0
   d5594:	468e      	mov	lr, r1
   d5596:	4915      	ldr	r1, [pc, #84]	; (d55ec <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   d5598:	7105      	strb	r5, [r0, #4]
   d559a:	6085      	str	r5, [r0, #8]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d559c:	6145      	str	r5, [r0, #20]
   d559e:	6001      	str	r1, [r0, #0]
   d55a0:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d55a2:	e892 0003 	ldmia.w	r2, {r0, r1}
   d55a6:	b085      	sub	sp, #20
   d55a8:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d55aa:	f104 060c 	add.w	r6, r4, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d55ae:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d55b2:	e896 0003 	ldmia.w	r6, {r0, r1}
   d55b6:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d55ba:	e897 0003 	ldmia.w	r7, {r0, r1}
   d55be:	e886 0003 	stmia.w	r6, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d55c2:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   d55c4:	6960      	ldr	r0, [r4, #20]
   d55c6:	6090      	str	r0, [r2, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d55c8:	6161      	str	r1, [r4, #20]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d55ca:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   d55cc:	69a0      	ldr	r0, [r4, #24]
   d55ce:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d55d0:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d55d2:	e88d 0028 	stmia.w	sp, {r3, r5}
   d55d6:	4a06      	ldr	r2, [pc, #24]	; (d55f0 <_ZN5TimerC1EjSt8functionIFvvEEb+0x60>)
   d55d8:	4623      	mov	r3, r4
   d55da:	4671      	mov	r1, lr
   d55dc:	f104 0008 	add.w	r0, r4, #8
   d55e0:	f003 fa6a 	bl	d8ab8 <os_timer_create>
    }
   d55e4:	4620      	mov	r0, r4
   d55e6:	b005      	add	sp, #20
   d55e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d55ea:	bf00      	nop
   d55ec:	000dd22c 	.word	0x000dd22c
   d55f0:	000d5541 	.word	0x000d5541

000d55f4 <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d55f4:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d55f6:	6880      	ldr	r0, [r0, #8]
   d55f8:	2300      	movs	r3, #0
   d55fa:	b138      	cbz	r0, d560c <_ZN5Timer5_stopEjb+0x18>
   d55fc:	e88d 000a 	stmia.w	sp, {r1, r3}
   d5600:	2102      	movs	r1, #2
   d5602:	f003 fa71 	bl	d8ae8 <os_timer_change>
   d5606:	fab0 f080 	clz	r0, r0
   d560a:	0940      	lsrs	r0, r0, #5
    }
   d560c:	b003      	add	sp, #12
   d560e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5614 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d5614:	b538      	push	{r3, r4, r5, lr}
   d5616:	4b10      	ldr	r3, [pc, #64]	; (d5658 <_ZN5TimerD1Ev+0x44>)
   d5618:	6003      	str	r3, [r0, #0]
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d561a:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d561c:	4604      	mov	r4, r0
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d561e:	b1a3      	cbz	r3, d564a <_ZN5TimerD1Ev+0x36>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d5620:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d5624:	2200      	movs	r2, #0
   d5626:	f7ff ffe5 	bl	d55f4 <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d562a:	2100      	movs	r1, #0
   d562c:	68a0      	ldr	r0, [r4, #8]
   d562e:	f003 fa73 	bl	d8b18 <os_timer_set_id>
            while (running) {
   d5632:	7923      	ldrb	r3, [r4, #4]
   d5634:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d5638:	b113      	cbz	r3, d5640 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d563a:	f003 fa1d 	bl	d8a78 <os_thread_yield>
   d563e:	e7f8      	b.n	d5632 <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d5640:	4629      	mov	r1, r5
   d5642:	68a0      	ldr	r0, [r4, #8]
   d5644:	f003 fa40 	bl	d8ac8 <os_timer_destroy>
            handle = nullptr;
   d5648:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d564a:	f104 000c 	add.w	r0, r4, #12
   d564e:	f7ff ff95 	bl	d557c <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d5652:	4620      	mov	r0, r4
   d5654:	bd38      	pop	{r3, r4, r5, pc}
   d5656:	bf00      	nop
   d5658:	000dd22c 	.word	0x000dd22c

000d565c <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d565c:	b510      	push	{r4, lr}
   d565e:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d5660:	f7ff ffd8 	bl	d5614 <_ZN5TimerD1Ev>
   d5664:	4620      	mov	r0, r4
   d5666:	211c      	movs	r1, #28
   d5668:	f005 fb5c 	bl	dad24 <_ZdlPvj>
   d566c:	4620      	mov	r0, r4
   d566e:	bd10      	pop	{r4, pc}

000d5670 <_ZN5Timer6_startEjb>:
    inline bool changePeriod(std::chrono::milliseconds ms, unsigned block=default_wait) { return changePeriod(ms.count(), block); }

    bool isValid() const { return handle!=nullptr; }
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
   d5670:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5672:	4606      	mov	r6, r0
   d5674:	4614      	mov	r4, r2
   d5676:	460d      	mov	r5, r1
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d5678:	2200      	movs	r2, #0
   d567a:	4621      	mov	r1, r4
   d567c:	f7ff ffba 	bl	d55f4 <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d5680:	68b0      	ldr	r0, [r6, #8]
   d5682:	2300      	movs	r3, #0
   d5684:	b140      	cbz	r0, d5698 <_ZN5Timer6_startEjb+0x28>
   d5686:	9301      	str	r3, [sp, #4]
   d5688:	9500      	str	r5, [sp, #0]
   d568a:	4622      	mov	r2, r4
   d568c:	4619      	mov	r1, r3
   d568e:	f003 fa2b 	bl	d8ae8 <os_timer_change>
   d5692:	fab0 f080 	clz	r0, r0
   d5696:	0940      	lsrs	r0, r0, #5
    }
   d5698:	b002      	add	sp, #8
   d569a:	bd70      	pop	{r4, r5, r6, pc}

000d569c <_Z32igh_hardware_service_valve_statev>:
    current_valve_position = VALVE_CLOSE;
}

void igh_hardware_service_valve_state(void)
{
    digitalWrite(IGH_IRRIGATION_VALVE, current_valve_position);
   d569c:	4b02      	ldr	r3, [pc, #8]	; (d56a8 <_Z32igh_hardware_service_valve_statev+0xc>)
   d569e:	2007      	movs	r0, #7
   d56a0:	7819      	ldrb	r1, [r3, #0]
   d56a2:	f005 ba70 	b.w	dab86 <digitalWrite>
   d56a6:	bf00      	nop
   d56a8:	2003e5ec 	.word	0x2003e5ec

000d56ac <_Z26igh_boron_toggle_boron_ledh>:
}

/* Onboard LED APIs */
void igh_boron_toggle_boron_led(uint8_t _state)
{
    digitalWrite(BORON_LED, _state);
   d56ac:	4601      	mov	r1, r0
   d56ae:	2007      	movs	r0, #7
   d56b0:	f005 ba69 	b.w	dab86 <digitalWrite>

000d56b4 <_Z21igh_boron_read_buttonv>:
    igh_button_timer.start();
    igh_button_sec_counter = 0;
}

uint8_t igh_boron_read_button(void)
{
   d56b4:	b508      	push	{r3, lr}
    return digitalRead(IGH_IRRIGATION_BUTTON);
   d56b6:	200f      	movs	r0, #15
   d56b8:	f005 fa7e 	bl	dabb8 <digitalRead>
}
   d56bc:	b2c0      	uxtb	r0, r0
   d56be:	bd08      	pop	{r3, pc}

000d56c0 <_Z31igh_boron_button_press_durationv>:

void igh_boron_button_press_duration(void)
{
   d56c0:	b508      	push	{r3, lr}
    if(!igh_boron_read_button())
   d56c2:	f7ff fff7 	bl	d56b4 <_Z21igh_boron_read_buttonv>
   d56c6:	4b08      	ldr	r3, [pc, #32]	; (d56e8 <_Z31igh_boron_button_press_durationv+0x28>)
   d56c8:	b910      	cbnz	r0, d56d0 <_Z31igh_boron_button_press_durationv+0x10>
    {
        igh_button_sec_counter++;
   d56ca:	781a      	ldrb	r2, [r3, #0]
   d56cc:	3201      	adds	r2, #1
   d56ce:	e000      	b.n	d56d2 <_Z31igh_boron_button_press_durationv+0x12>
    }
    else
    {
        igh_button_sec_counter = 0;
   d56d0:	2200      	movs	r2, #0
   d56d2:	701a      	strb	r2, [r3, #0]
    } 

    if( igh_button_sec_counter >= THREE_SECONDS )
   d56d4:	781b      	ldrb	r3, [r3, #0]
   d56d6:	2b02      	cmp	r3, #2
    {
        // start or stop irrigation at any time with button
        button_irrigate = !button_irrigate;
   d56d8:	bf81      	itttt	hi
   d56da:	4a04      	ldrhi	r2, [pc, #16]	; (d56ec <_Z31igh_boron_button_press_durationv+0x2c>)
   d56dc:	7813      	ldrbhi	r3, [r2, #0]
   d56de:	f083 0301 	eorhi.w	r3, r3, #1
   d56e2:	7013      	strbhi	r3, [r2, #0]
   d56e4:	bd08      	pop	{r3, pc}
   d56e6:	bf00      	nop
   d56e8:	2003d8cd 	.word	0x2003d8cd
   d56ec:	2003d8c5 	.word	0x2003d8c5

000d56f0 <_Z27attach_flow_meter_interruptv>:
{
    flow_meter_pulses++;
}

void attach_flow_meter_interrupt( void )
{
   d56f0:	b507      	push	{r0, r1, r2, lr}
    pinMode( IGH_WATER_FLOW_PIN, INPUT_PULLUP );
   d56f2:	2102      	movs	r1, #2
   d56f4:	2005      	movs	r0, #5
   d56f6:	f005 fa35 	bl	dab64 <pinMode>
    attachInterrupt( IGH_WATER_FLOW_PIN , igh_app_water_counter_callback, FALLING );
   d56fa:	2300      	movs	r3, #0
   d56fc:	9300      	str	r3, [sp, #0]
   d56fe:	2202      	movs	r2, #2
   d5700:	f04f 33ff 	mov.w	r3, #4294967295
   d5704:	4903      	ldr	r1, [pc, #12]	; (d5714 <_Z27attach_flow_meter_interruptv+0x24>)
   d5706:	2005      	movs	r0, #5
   d5708:	f004 fc2c 	bl	d9f64 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
   d570c:	b003      	add	sp, #12
   d570e:	f85d fb04 	ldr.w	pc, [sp], #4
   d5712:	bf00      	nop
   d5714:	000d5509 	.word	0x000d5509

000d5718 <_Z29igh_hardware_water_flow_setupv>:

    }
}

void igh_hardware_water_flow_setup( void )
{
   d5718:	b508      	push	{r3, lr}
    attach_flow_meter_interrupt();
   d571a:	f7ff ffe9 	bl	d56f0 <_Z27attach_flow_meter_interruptv>
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d571e:	2200      	movs	r2, #0
   d5720:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d5724:	4801      	ldr	r0, [pc, #4]	; (d572c <_Z29igh_hardware_water_flow_setupv+0x14>)
   d5726:	f7ff ffa3 	bl	d5670 <_ZN5Timer6_startEjb>
   d572a:	bd08      	pop	{r3, pc}
   d572c:	2003d8a4 	.word	0x2003d8a4

000d5730 <_Z18igh_hardware_setupv>:
Timer water_flow_timer(ONE_SECOND, igh_hardware_litres_service);



void igh_hardware_setup(void)
{
   d5730:	b510      	push	{r4, lr}


/* Button APIs */
static void igh_hardware_irrigiation_button_setup(void)
{
    pinMode(IGH_IRRIGATION_BUTTON, INPUT_PULLUP);
   d5732:	2102      	movs	r1, #2
   d5734:	200f      	movs	r0, #15
   d5736:	f005 fa15 	bl	dab64 <pinMode>
   d573a:	2200      	movs	r2, #0
   d573c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d5740:	480b      	ldr	r0, [pc, #44]	; (d5770 <_Z18igh_hardware_setupv+0x40>)
   d5742:	f7ff ff95 	bl	d5670 <_ZN5Timer6_startEjb>
    igh_button_timer.start();
    igh_button_sec_counter = 0;
   d5746:	4b0b      	ldr	r3, [pc, #44]	; (d5774 <_Z18igh_hardware_setupv+0x44>)
   d5748:	2400      	movs	r4, #0
    digitalWrite(BORON_LED, _state);
}

static void igh_hardware_onboard_led_setup(void)
{
    pinMode(BORON_LED, OUTPUT);
   d574a:	2101      	movs	r1, #1
   d574c:	2007      	movs	r0, #7
/* Button APIs */
static void igh_hardware_irrigiation_button_setup(void)
{
    pinMode(IGH_IRRIGATION_BUTTON, INPUT_PULLUP);
    igh_button_timer.start();
    igh_button_sec_counter = 0;
   d574e:	701c      	strb	r4, [r3, #0]
    digitalWrite(BORON_LED, _state);
}

static void igh_hardware_onboard_led_setup(void)
{
    pinMode(BORON_LED, OUTPUT);
   d5750:	f005 fa08 	bl	dab64 <pinMode>
    igh_boron_toggle_boron_led(OFF);
   d5754:	4620      	mov	r0, r4
   d5756:	f7ff ffa9 	bl	d56ac <_Z26igh_boron_toggle_boron_ledh>


/* Valve control APIs */
static void igh_hardware_vlave_setup(void)
{
    pinMode(IGH_IRRIGATION_VALVE, OUTPUT);
   d575a:	2101      	movs	r1, #1
   d575c:	2007      	movs	r0, #7
   d575e:	f005 fa01 	bl	dab64 <pinMode>
    current_valve_position = VALVE_CLOSE;
   d5762:	4b05      	ldr	r3, [pc, #20]	; (d5778 <_Z18igh_hardware_setupv+0x48>)
   d5764:	701c      	strb	r4, [r3, #0]
{
    igh_hardware_irrigiation_button_setup();
    igh_hardware_onboard_led_setup();
    igh_hardware_vlave_setup();
    igh_hardware_water_flow_setup();
}
   d5766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void igh_hardware_setup(void)
{
    igh_hardware_irrigiation_button_setup();
    igh_hardware_onboard_led_setup();
    igh_hardware_vlave_setup();
    igh_hardware_water_flow_setup();
   d576a:	f7ff bfd5 	b.w	d5718 <_Z29igh_hardware_water_flow_setupv>
   d576e:	bf00      	nop
   d5770:	2003d8d4 	.word	0x2003d8d4
   d5774:	2003d8cd 	.word	0x2003d8cd
   d5778:	2003e5ec 	.word	0x2003e5ec

000d577c <_Z27detach_flow_meter_interruptv>:
    attachInterrupt( IGH_WATER_FLOW_PIN , igh_app_water_counter_callback, FALLING );
}

void detach_flow_meter_interrupt( void )
{
    detachInterrupt( IGH_WATER_FLOW_PIN );
   d577c:	2005      	movs	r0, #5
   d577e:	f004 bc19 	b.w	d9fb4 <_Z15detachInterruptt>
	...

000d5784 <_Z23igh_get_local_time_hourv>:
    // control valve state
    igh_hardware_water_management_service();
}

uint8_t igh_get_local_time_hour( void )
{
   d5784:	b508      	push	{r3, lr}
    int local_hour = 0;
    int utc_hour = 0;
    utc_hour = Time.hour();
   d5786:	f004 f911 	bl	d99ac <_ZN9TimeClass4hourEv>

    //correct to timezone
    local_hour = utc_hour + igh_current_system_settings.timezone;
   d578a:	4b05      	ldr	r3, [pc, #20]	; (d57a0 <_Z23igh_get_local_time_hourv+0x1c>)
   d578c:	685b      	ldr	r3, [r3, #4]

    if( local_hour < 0 )
   d578e:	18c0      	adds	r0, r0, r3
   d5790:	d501      	bpl.n	d5796 <_Z23igh_get_local_time_hourv+0x12>
    {
        local_hour += TWENTY_FOUR_HOURS;
   d5792:	3018      	adds	r0, #24
   d5794:	e002      	b.n	d579c <_Z23igh_get_local_time_hourv+0x18>
    }
    else if( local_hour > TWENTY_FOUR_HOURS )
   d5796:	2818      	cmp	r0, #24
    {
        local_hour -= TWENTY_FOUR_HOURS;
   d5798:	bfc8      	it	gt
   d579a:	3818      	subgt	r0, #24
    }

    return (uint8_t)local_hour;
}
   d579c:	b2c0      	uxtb	r0, r0
   d579e:	bd08      	pop	{r3, pc}
   d57a0:	2003e544 	.word	0x2003e544

000d57a4 <_Z37igh_hardware_water_management_servicev>:

void igh_hardware_water_management_service( void )
{
   d57a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d57a6:	b085      	sub	sp, #20
    // This should run on a one second tick
    uint8_t current_hr = igh_get_local_time_hour();
   d57a8:	f7ff ffec 	bl	d5784 <_Z23igh_get_local_time_hourv>

    if( current_hr != previous_hr )
   d57ac:	4b38      	ldr	r3, [pc, #224]	; (d5890 <_Z37igh_hardware_water_management_servicev+0xec>)
   d57ae:	781a      	ldrb	r2, [r3, #0]
   d57b0:	4282      	cmp	r2, r0
}

void igh_hardware_water_management_service( void )
{
    // This should run on a one second tick
    uint8_t current_hr = igh_get_local_time_hour();
   d57b2:	4604      	mov	r4, r0
   d57b4:	461d      	mov	r5, r3

    if( current_hr != previous_hr )
   d57b6:	d02d      	beq.n	d5814 <_Z37igh_hardware_water_management_servicev+0x70>
    {
        if( current_hr == igh_current_system_settings.irrigation_hr )
   d57b8:	4b36      	ldr	r3, [pc, #216]	; (d5894 <_Z37igh_hardware_water_management_servicev+0xf0>)
   d57ba:	7a1b      	ldrb	r3, [r3, #8]
   d57bc:	4283      	cmp	r3, r0
   d57be:	d109      	bne.n	d57d4 <_Z37igh_hardware_water_management_servicev+0x30>
        {
            // it is ok to irrigat if it hits the irrigation hour
            ok_to_irrigate = true;
   d57c0:	4b35      	ldr	r3, [pc, #212]	; (d5898 <_Z37igh_hardware_water_management_servicev+0xf4>)
   d57c2:	2201      	movs	r2, #1
   d57c4:	701a      	strb	r2, [r3, #0]
            time_t time = Time.now();
   d57c6:	f004 f8ea 	bl	d999e <_ZN9TimeClass3nowEv>
   d57ca:	4607      	mov	r7, r0
            Serial.print("IRRIGATION TIME STARTED: ");
   d57cc:	f004 fba2 	bl	d9f14 <_Z16_fetch_usbserialv>
   d57d0:	4932      	ldr	r1, [pc, #200]	; (d589c <_Z37igh_hardware_water_management_servicev+0xf8>)
   d57d2:	e00b      	b.n	d57ec <_Z37igh_hardware_water_management_servicev+0x48>
            Serial.println( Time.format(time, TIME_FORMAT_DEFAULT) );
        }
        else if( MIDNIGHT == current_hr )
   d57d4:	b9e8      	cbnz	r0, d5812 <_Z37igh_hardware_water_management_servicev+0x6e>
        {
            // reset the system at midnight
            ok_to_irrigate = false;
   d57d6:	4b30      	ldr	r3, [pc, #192]	; (d5898 <_Z37igh_hardware_water_management_servicev+0xf4>)
   d57d8:	7018      	strb	r0, [r3, #0]
            total_water_dispensed_Liters = 0;
   d57da:	4b31      	ldr	r3, [pc, #196]	; (d58a0 <_Z37igh_hardware_water_management_servicev+0xfc>)
   d57dc:	2200      	movs	r2, #0
   d57de:	601a      	str	r2, [r3, #0]
            
            time_t time = Time.now();
   d57e0:	f004 f8dd 	bl	d999e <_ZN9TimeClass3nowEv>
   d57e4:	4607      	mov	r7, r0
            Serial.print("RESETTING WATER PARAMS: ");
   d57e6:	f004 fb95 	bl	d9f14 <_Z16_fetch_usbserialv>
   d57ea:	492e      	ldr	r1, [pc, #184]	; (d58a4 <_Z37igh_hardware_water_management_servicev+0x100>)
   d57ec:	f003 fe72 	bl	d94d4 <_ZN5Print5printEPKc>
            Serial.println( Time.format(time, TIME_FORMAT_DEFAULT) );
   d57f0:	f004 fb90 	bl	d9f14 <_Z16_fetch_usbserialv>
   d57f4:	4b2c      	ldr	r3, [pc, #176]	; (d58a8 <_Z37igh_hardware_water_management_servicev+0x104>)
   d57f6:	492d      	ldr	r1, [pc, #180]	; (d58ac <_Z37igh_hardware_water_management_servicev+0x108>)
   d57f8:	681b      	ldr	r3, [r3, #0]
   d57fa:	4606      	mov	r6, r0
   d57fc:	463a      	mov	r2, r7
   d57fe:	4668      	mov	r0, sp
   d5800:	f004 f87a 	bl	d98f8 <_ZN9TimeClass6formatElPKc>
   d5804:	9900      	ldr	r1, [sp, #0]
   d5806:	4630      	mov	r0, r6
   d5808:	f003 fe77 	bl	d94fa <_ZN5Print7printlnEPKc>
   d580c:	4668      	mov	r0, sp
   d580e:	f003 fd6d 	bl	d92ec <_ZN6StringD1Ev>
        }

        previous_hr = current_hr;
   d5812:	702c      	strb	r4, [r5, #0]
    }

    if( true == button_irrigate )
   d5814:	4b26      	ldr	r3, [pc, #152]	; (d58b0 <_Z37igh_hardware_water_management_servicev+0x10c>)
   d5816:	4927      	ldr	r1, [pc, #156]	; (d58b4 <_Z37igh_hardware_water_management_servicev+0x110>)
   d5818:	781a      	ldrb	r2, [r3, #0]
   d581a:	b1c2      	cbz	r2, d584e <_Z37igh_hardware_water_management_servicev+0xaa>
    {
        if( (water_dispensed_by_button < (float)igh_current_threshold_settings.water_dispensed_period_low) &&
   d581c:	4a26      	ldr	r2, [pc, #152]	; (d58b8 <_Z37igh_hardware_water_management_servicev+0x114>)
   d581e:	edd2 7a06 	vldr	s15, [r2, #24]
   d5822:	4a26      	ldr	r2, [pc, #152]	; (d58bc <_Z37igh_hardware_water_management_servicev+0x118>)
   d5824:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d5828:	ed92 7a00 	vldr	s14, [r2]
   d582c:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5834:	dd07      	ble.n	d5846 <_Z37igh_hardware_water_management_servicev+0xa2>
            (valve_open_seconds_counter < igh_current_system_settings.water_dispenser_period) )
   d5836:	4a17      	ldr	r2, [pc, #92]	; (d5894 <_Z37igh_hardware_water_management_servicev+0xf0>)
        previous_hr = current_hr;
    }

    if( true == button_irrigate )
    {
        if( (water_dispensed_by_button < (float)igh_current_threshold_settings.water_dispensed_period_low) &&
   d5838:	68d0      	ldr	r0, [r2, #12]
   d583a:	4a21      	ldr	r2, [pc, #132]	; (d58c0 <_Z37igh_hardware_water_management_servicev+0x11c>)
   d583c:	6812      	ldr	r2, [r2, #0]
   d583e:	4290      	cmp	r0, r2
   d5840:	d901      	bls.n	d5846 <_Z37igh_hardware_water_management_servicev+0xa2>
            (valve_open_seconds_counter < igh_current_system_settings.water_dispenser_period) )
        {
            current_valve_position = VALVE_OPEN;
   d5842:	2301      	movs	r3, #1
   d5844:	e020      	b.n	d5888 <_Z37igh_hardware_water_management_servicev+0xe4>
        }
        else
        {
            button_irrigate = false;
   d5846:	2200      	movs	r2, #0
   d5848:	701a      	strb	r2, [r3, #0]
            current_valve_position = VALVE_CLOSE;
   d584a:	700a      	strb	r2, [r1, #0]
   d584c:	e01d      	b.n	d588a <_Z37igh_hardware_water_management_servicev+0xe6>
        }
    }
    else
    {
        /* Only do auto irrigation if button irrigation is not set */
        if( true == ok_to_irrigate &&
   d584e:	4b12      	ldr	r3, [pc, #72]	; (d5898 <_Z37igh_hardware_water_management_servicev+0xf4>)
   d5850:	781b      	ldrb	r3, [r3, #0]
   d5852:	b1c3      	cbz	r3, d5886 <_Z37igh_hardware_water_management_servicev+0xe2>
        VALID_SOIL_DATA == refreshed_soil_data)
   d5854:	4b1b      	ldr	r3, [pc, #108]	; (d58c4 <_Z37igh_hardware_water_management_servicev+0x120>)
        }
    }
    else
    {
        /* Only do auto irrigation if button irrigation is not set */
        if( true == ok_to_irrigate &&
   d5856:	781b      	ldrb	r3, [r3, #0]
   d5858:	2bff      	cmp	r3, #255	; 0xff
   d585a:	d114      	bne.n	d5886 <_Z37igh_hardware_water_management_servicev+0xe2>
        {
            /**
             * run the dispensor if we are within the dispensor window
             * and if we have valid sensor data
             * */
            if( soil_humidity < igh_current_threshold_settings.soil_humidity_low &&
   d585c:	4b1a      	ldr	r3, [pc, #104]	; (d58c8 <_Z37igh_hardware_water_management_servicev+0x124>)
   d585e:	881a      	ldrh	r2, [r3, #0]
   d5860:	4b15      	ldr	r3, [pc, #84]	; (d58b8 <_Z37igh_hardware_water_management_servicev+0x114>)
   d5862:	88d8      	ldrh	r0, [r3, #6]
   d5864:	4290      	cmp	r0, r2
   d5866:	d90e      	bls.n	d5886 <_Z37igh_hardware_water_management_servicev+0xe2>
   d5868:	8c18      	ldrh	r0, [r3, #32]
   d586a:	4290      	cmp	r0, r2
   d586c:	d90b      	bls.n	d5886 <_Z37igh_hardware_water_management_servicev+0xe2>
                soil_humidity < igh_current_threshold_settings.soil_humidity_high &&
   d586e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
                total_water_dispensed_Liters < (float)igh_current_threshold_settings.water_dispensed_period_high )
   d5872:	4b0b      	ldr	r3, [pc, #44]	; (d58a0 <_Z37igh_hardware_water_management_servicev+0xfc>)
            /**
             * run the dispensor if we are within the dispensor window
             * and if we have valid sensor data
             * */
            if( soil_humidity < igh_current_threshold_settings.soil_humidity_low &&
                soil_humidity < igh_current_threshold_settings.soil_humidity_high &&
   d5874:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d5878:	ed93 7a00 	vldr	s14, [r3]
   d587c:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5884:	dcdd      	bgt.n	d5842 <_Z37igh_hardware_water_management_servicev+0x9e>
            {
                /**
                 * close valve if even one of these conditions is not met
                 * current_valve_position <--- check this
                 * */
                current_valve_position = VALVE_CLOSE;
   d5886:	2300      	movs	r3, #0
   d5888:	700b      	strb	r3, [r1, #0]
        {
            // close valve
            current_valve_position = VALVE_CLOSE;
        }
    }
}
   d588a:	b005      	add	sp, #20
   d588c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d588e:	bf00      	nop
   d5890:	2003d8ce 	.word	0x2003d8ce
   d5894:	2003e544 	.word	0x2003e544
   d5898:	2003d8c4 	.word	0x2003d8c4
   d589c:	000dd238 	.word	0x000dd238
   d58a0:	2003d8f4 	.word	0x2003d8f4
   d58a4:	000dd252 	.word	0x000dd252
   d58a8:	2003d740 	.word	0x2003d740
   d58ac:	2003df14 	.word	0x2003df14
   d58b0:	2003d8c5 	.word	0x2003d8c5
   d58b4:	2003e5ec 	.word	0x2003e5ec
   d58b8:	2003e5f0 	.word	0x2003e5f0
   d58bc:	2003d8c8 	.word	0x2003d8c8
   d58c0:	2003d8d0 	.word	0x2003d8d0
   d58c4:	2003d8cc 	.word	0x2003d8cc
   d58c8:	2003d8f0 	.word	0x2003d8f0

000d58cc <_Z37igh_hardware_valve_open_timer_servicev>:

void igh_hardware_valve_open_timer_service( void )
{
    // count for how many seconds the valve is open
    if( VALVE_OPEN == current_valve_position )
   d58cc:	4b04      	ldr	r3, [pc, #16]	; (d58e0 <_Z37igh_hardware_valve_open_timer_servicev+0x14>)
   d58ce:	781b      	ldrb	r3, [r3, #0]
   d58d0:	2b01      	cmp	r3, #1
   d58d2:	4b04      	ldr	r3, [pc, #16]	; (d58e4 <_Z37igh_hardware_valve_open_timer_servicev+0x18>)
    {
        valve_open_seconds_counter++;
   d58d4:	bf0a      	itet	eq
   d58d6:	681a      	ldreq	r2, [r3, #0]
    }
    else
    {
        valve_open_seconds_counter = 0;
   d58d8:	2200      	movne	r2, #0
void igh_hardware_valve_open_timer_service( void )
{
    // count for how many seconds the valve is open
    if( VALVE_OPEN == current_valve_position )
    {
        valve_open_seconds_counter++;
   d58da:	3201      	addeq	r2, #1
    }
    else
    {
        valve_open_seconds_counter = 0;
   d58dc:	601a      	str	r2, [r3, #0]
   d58de:	4770      	bx	lr
   d58e0:	2003e5ec 	.word	0x2003e5ec
   d58e4:	2003d8d0 	.word	0x2003d8d0

000d58e8 <_Z27igh_hardware_litres_servicev>:
{
    detachInterrupt( IGH_WATER_FLOW_PIN );
}

void igh_hardware_litres_service( void )
{
   d58e8:	b510      	push	{r4, lr}
    uint32_t copy_flow_meter_pulses = 0;
    detach_flow_meter_interrupt();
   d58ea:	f7ff ff47 	bl	d577c <_Z27detach_flow_meter_interruptv>
    // copy the current flow meter pulses
    copy_flow_meter_pulses = flow_meter_pulses;
   d58ee:	4b17      	ldr	r3, [pc, #92]	; (d594c <_Z27igh_hardware_litres_servicev+0x64>)
   d58f0:	681c      	ldr	r4, [r3, #0]
    // reset and enable interrupts to avoid missing too many pulses
    flow_meter_pulses = 0;
   d58f2:	2200      	movs	r2, #0
   d58f4:	601a      	str	r2, [r3, #0]
    attach_flow_meter_interrupt();
   d58f6:	f7ff fefb 	bl	d56f0 <_Z27attach_flow_meter_interruptv>

    // because we are using a software timer, 
    // this routine will always happen once every second
    float flowRate = copy_flow_meter_pulses / FLOW_METER_CAL_FACTOR;
    float flow_Liters = flowRate / ONE_MIN;
   d58fa:	4620      	mov	r0, r4
   d58fc:	f005 fcb0 	bl	db260 <__aeabi_ui2d>
   d5900:	2200      	movs	r2, #0
   d5902:	4b13      	ldr	r3, [pc, #76]	; (d5950 <_Z27igh_hardware_litres_servicev+0x68>)
   d5904:	f005 fe4c 	bl	db5a0 <__aeabi_ddiv>
   d5908:	f006 f818 	bl	db93c <__aeabi_d2f>
   d590c:	eddf 7a11 	vldr	s15, [pc, #68]	; d5954 <_Z27igh_hardware_litres_servicev+0x6c>

    // add to the total amount of water flow
    total_water_dispensed_Liters += flow_Liters; 
   d5910:	4b11      	ldr	r3, [pc, #68]	; (d5958 <_Z27igh_hardware_litres_servicev+0x70>)
    attach_flow_meter_interrupt();

    // because we are using a software timer, 
    // this routine will always happen once every second
    float flowRate = copy_flow_meter_pulses / FLOW_METER_CAL_FACTOR;
    float flow_Liters = flowRate / ONE_MIN;
   d5912:	ee07 0a10 	vmov	s14, r0
   d5916:	eec7 6a27 	vdiv.f32	s13, s14, s15

    // add to the total amount of water flow
    total_water_dispensed_Liters += flow_Liters; 
   d591a:	ed93 7a00 	vldr	s14, [r3]
   d591e:	ee37 7a26 	vadd.f32	s14, s14, s13
   d5922:	ed83 7a00 	vstr	s14, [r3]

    // if button is open, keep track of how much water is used up then
    if( true == button_irrigate )
   d5926:	4b0d      	ldr	r3, [pc, #52]	; (d595c <_Z27igh_hardware_litres_servicev+0x74>)
   d5928:	781a      	ldrb	r2, [r3, #0]
   d592a:	4b0d      	ldr	r3, [pc, #52]	; (d5960 <_Z27igh_hardware_litres_servicev+0x78>)
   d592c:	b132      	cbz	r2, d593c <_Z27igh_hardware_litres_servicev+0x54>
    {
        water_dispensed_by_button += flow_Liters;
   d592e:	edd3 7a00 	vldr	s15, [r3]
   d5932:	ee77 7aa6 	vadd.f32	s15, s15, s13
   d5936:	edc3 7a00 	vstr	s15, [r3]
   d593a:	e001      	b.n	d5940 <_Z27igh_hardware_litres_servicev+0x58>
    }
    else
    {
        water_dispensed_by_button = 0;
   d593c:	2200      	movs	r2, #0
   d593e:	601a      	str	r2, [r3, #0]
    }

    // keep track of valve open state
    igh_hardware_valve_open_timer_service();
   d5940:	f7ff ffc4 	bl	d58cc <_Z37igh_hardware_valve_open_timer_servicev>
    // control valve state
    igh_hardware_water_management_service();
}
   d5944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }

    // keep track of valve open state
    igh_hardware_valve_open_timer_service();
    // control valve state
    igh_hardware_water_management_service();
   d5948:	f7ff bf2c 	b.w	d57a4 <_Z37igh_hardware_water_management_servicev>
   d594c:	2003d8c0 	.word	0x2003d8c0
   d5950:	40120000 	.word	0x40120000
   d5954:	42700000 	.word	0x42700000
   d5958:	2003d8f4 	.word	0x2003d8f4
   d595c:	2003d8c5 	.word	0x2003d8c5
   d5960:	2003d8c8 	.word	0x2003d8c8

000d5964 <_GLOBAL__sub_I_liters_timer>:
    }
    else
    {
        valve_open_seconds_counter = 0;
    }
}
   d5964:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
#define THREE_SECONDS          (3)


// button global variables
uint8_t igh_button_sec_counter;
Timer igh_button_timer(ONE_SECOND, igh_boron_button_press_duration);
   d5968:	f8df 807c 	ldr.w	r8, [pc, #124]	; d59e8 <_GLOBAL__sub_I_liters_timer+0x84>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d596c:	4f17      	ldr	r7, [pc, #92]	; (d59cc <_GLOBAL__sub_I_liters_timer+0x68>)
	    _M_manager = &_My_handler::_M_manager;
   d596e:	4c18      	ldr	r4, [pc, #96]	; (d59d0 <_GLOBAL__sub_I_liters_timer+0x6c>)
   d5970:	4e18      	ldr	r6, [pc, #96]	; (d59d4 <_GLOBAL__sub_I_liters_timer+0x70>)
   d5972:	4d19      	ldr	r5, [pc, #100]	; (d59d8 <_GLOBAL__sub_I_liters_timer+0x74>)
   d5974:	f002 ff80 	bl	d8878 <HAL_Pin_Map>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d5978:	4b18      	ldr	r3, [pc, #96]	; (d59dc <_GLOBAL__sub_I_liters_timer+0x78>)
   d597a:	9300      	str	r3, [sp, #0]
   d597c:	466a      	mov	r2, sp
   d597e:	2300      	movs	r3, #0
   d5980:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d5984:	4640      	mov	r0, r8

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5986:	9402      	str	r4, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5988:	9703      	str	r7, [sp, #12]
   d598a:	f7ff fe01 	bl	d5590 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d598e:	4668      	mov	r0, sp
   d5990:	f7ff fdf4 	bl	d557c <_ZNSt14_Function_baseD1Ev>
   d5994:	4632      	mov	r2, r6
   d5996:	4629      	mov	r1, r5
   d5998:	4640      	mov	r0, r8
   d599a:	f005 f9b5 	bl	dad08 <__aeabi_atexit>

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d599e:	9402      	str	r4, [sp, #8]
static void igh_hardware_irrigiation_button_setup(void);
static void igh_hardware_onboard_led_setup(void);
static void igh_hardware_vlave_setup(void);
void igh_hardware_valve_open_timer_service( void );

Timer water_flow_timer(ONE_SECOND, igh_hardware_litres_service);
   d59a0:	4c0f      	ldr	r4, [pc, #60]	; (d59e0 <_GLOBAL__sub_I_liters_timer+0x7c>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d59a2:	4b10      	ldr	r3, [pc, #64]	; (d59e4 <_GLOBAL__sub_I_liters_timer+0x80>)
   d59a4:	9300      	str	r3, [sp, #0]
   d59a6:	466a      	mov	r2, sp
   d59a8:	2300      	movs	r3, #0
   d59aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d59ae:	4620      	mov	r0, r4
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d59b0:	9703      	str	r7, [sp, #12]
   d59b2:	f7ff fded 	bl	d5590 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d59b6:	4668      	mov	r0, sp
   d59b8:	f7ff fde0 	bl	d557c <_ZNSt14_Function_baseD1Ev>
   d59bc:	4632      	mov	r2, r6
   d59be:	4629      	mov	r1, r5
   d59c0:	4620      	mov	r0, r4
   d59c2:	f005 f9a1 	bl	dad08 <__aeabi_atexit>
    }
    else
    {
        valve_open_seconds_counter = 0;
    }
}
   d59c6:	b004      	add	sp, #16
   d59c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d59cc:	000d5519 	.word	0x000d5519
   d59d0:	000d551d 	.word	0x000d551d
   d59d4:	2003d7f8 	.word	0x2003d7f8
   d59d8:	000d5615 	.word	0x000d5615
   d59dc:	000d56c1 	.word	0x000d56c1
   d59e0:	2003d8a4 	.word	0x2003d8a4
   d59e4:	000d58e9 	.word	0x000d58e9
   d59e8:	2003d8d4 	.word	0x2003d8d4

000d59ec <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d59ec:	7c03      	ldrb	r3, [r0, #16]
   d59ee:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d59f2:	4602      	mov	r2, r0
   d59f4:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d59f8:	b12b      	cbz	r3, d5a06 <_ZN4File9availableEv+0x1a>
   d59fa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d59fc:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d59fe:	1a18      	subs	r0, r3, r0
   d5a00:	bf48      	it	mi
   d5a02:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d5a06:	4770      	bx	lr

000d5a08 <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
   d5a08:	4770      	bx	lr

000d5a0a <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d5a0a:	4770      	bx	lr

000d5a0c <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d5a0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5a0e:	4602      	mov	r2, r0
   d5a10:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d5a12:	7913      	ldrb	r3, [r2, #4]
   d5a14:	6895      	ldr	r5, [r2, #8]
   d5a16:	b133      	cbz	r3, d5a26 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d5a18:	b93d      	cbnz	r5, d5a2a <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d5a1a:	490c      	ldr	r1, [pc, #48]	; (d5a4c <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d5a1c:	b004      	add	sp, #16
   d5a1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d5a22:	f003 bd57 	b.w	d94d4 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d5a26:	4b0a      	ldr	r3, [pc, #40]	; (d5a50 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d5a28:	e000      	b.n	d5a2c <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d5a2a:	4b0a      	ldr	r3, [pc, #40]	; (d5a54 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d5a2c:	7b16      	ldrb	r6, [r2, #12]
   d5a2e:	4c0a      	ldr	r4, [pc, #40]	; (d5a58 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d5a30:	490a      	ldr	r1, [pc, #40]	; (d5a5c <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d5a32:	7b52      	ldrb	r2, [r2, #13]
   d5a34:	9202      	str	r2, [sp, #8]
   d5a36:	2e01      	cmp	r6, #1
   d5a38:	bf08      	it	eq
   d5a3a:	4621      	moveq	r1, r4
   d5a3c:	9101      	str	r1, [sp, #4]
   d5a3e:	9500      	str	r5, [sp, #0]
   d5a40:	4a07      	ldr	r2, [pc, #28]	; (d5a60 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d5a42:	2100      	movs	r1, #0
   d5a44:	f003 fe51 	bl	d96ea <_ZN5Print11printf_implEbPKcz>
  }
   d5a48:	b004      	add	sp, #16
   d5a4a:	bd70      	pop	{r4, r5, r6, pc}
   d5a4c:	000dd2c9 	.word	0x000dd2c9
   d5a50:	000dd486 	.word	0x000dd486
   d5a54:	000dd2b8 	.word	0x000dd2b8
   d5a58:	000dd2c1 	.word	0x000dd2c1
   d5a5c:	000dd2c5 	.word	0x000dd2c5
   d5a60:	000dd2df 	.word	0x000dd2df

000d5a64 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d5a64:	3010      	adds	r0, #16
   d5a66:	f001 bda5 	b.w	d75b4 <_ZN7FatFile4syncEv>

000d5a6a <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d5a6a:	3010      	adds	r0, #16
   d5a6c:	f001 bc7c 	b.w	d7368 <_ZN7FatFile4peekEv>

000d5a70 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d5a70:	3010      	adds	r0, #16
   d5a72:	f001 be3f 	b.w	d76f4 <_ZN7FatFile5writeEPKvj>

000d5a76 <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d5a76:	3008      	adds	r0, #8
   d5a78:	f001 be3c 	b.w	d76f4 <_ZN7FatFile5writeEPKvj>

000d5a7c <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d5a7c:	b507      	push	{r0, r1, r2, lr}
   d5a7e:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d5a80:	2201      	movs	r2, #1
   d5a82:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d5a86:	3010      	adds	r0, #16
   d5a88:	4619      	mov	r1, r3
   d5a8a:	f001 fe33 	bl	d76f4 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d5a8e:	b003      	add	sp, #12
   d5a90:	f85d fb04 	ldr.w	pc, [sp], #4

000d5a94 <_ZN6SdFileD0Ev>:
   d5a94:	b510      	push	{r4, lr}
   d5a96:	212c      	movs	r1, #44	; 0x2c
   d5a98:	4604      	mov	r4, r0
   d5a9a:	f005 f943 	bl	dad24 <_ZdlPvj>
   d5a9e:	4620      	mov	r0, r4
   d5aa0:	bd10      	pop	{r4, pc}

000d5aa2 <_ZN4FileD0Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d5aa2:	b510      	push	{r4, lr}
   d5aa4:	2134      	movs	r1, #52	; 0x34
   d5aa6:	4604      	mov	r4, r0
   d5aa8:	f005 f93c 	bl	dad24 <_ZdlPvj>
   d5aac:	4620      	mov	r0, r4
   d5aae:	bd10      	pop	{r4, pc}

000d5ab0 <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d5ab0:	b507      	push	{r0, r1, r2, lr}
   d5ab2:	ab02      	add	r3, sp, #8
   d5ab4:	2201      	movs	r2, #1
   d5ab6:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d5aba:	3008      	adds	r0, #8
   d5abc:	4619      	mov	r1, r3
   d5abe:	f001 fe19 	bl	d76f4 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d5ac2:	b003      	add	sp, #12
   d5ac4:	f85d fb04 	ldr.w	pc, [sp], #4

000d5ac8 <_ZN7FatFile4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
   d5ac8:	b507      	push	{r0, r1, r2, lr}
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d5aca:	2201      	movs	r2, #1
   d5acc:	f10d 0107 	add.w	r1, sp, #7
   d5ad0:	f001 fb97 	bl	d7202 <_ZN7FatFile4readEPvj>
   d5ad4:	2801      	cmp	r0, #1
   d5ad6:	bf0c      	ite	eq
   d5ad8:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d5adc:	f04f 30ff 	movne.w	r0, #4294967295
  }
   d5ae0:	b003      	add	sp, #12
   d5ae2:	f85d fb04 	ldr.w	pc, [sp], #4

000d5ae6 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d5ae6:	b508      	push	{r3, lr}
    return FatFile::read();
   d5ae8:	3010      	adds	r0, #16
   d5aea:	f7ff ffed 	bl	d5ac8 <_ZN7FatFile4readEv>
  }
   d5aee:	bd08      	pop	{r3, pc}

000d5af0 <_Z16igh_sd_log_setupv>:
 * convertedt to a character string
 * eg: 2E78FA2E.LOG
*/

uint8_t igh_sd_log_setup(void)
{
   d5af0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5af2:	4820      	ldr	r0, [pc, #128]	; (d5b74 <_Z16igh_sd_log_setupv+0x84>)
    if(sd_root.isOpen()) sd_root.close();
   d5af4:	7a03      	ldrb	r3, [r0, #8]
   d5af6:	b113      	cbz	r3, d5afe <_Z16igh_sd_log_setupv+0xe>
   d5af8:	3008      	adds	r0, #8
   d5afa:	f001 fd91 	bl	d7620 <_ZN7FatFile5closeEv>
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d5afe:	4c1e      	ldr	r4, [pc, #120]	; (d5b78 <_Z16igh_sd_log_setupv+0x88>)
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d5b00:	4b1e      	ldr	r3, [pc, #120]	; (d5b7c <_Z16igh_sd_log_setupv+0x8c>)
   d5b02:	4a1f      	ldr	r2, [pc, #124]	; (d5b80 <_Z16igh_sd_log_setupv+0x90>)
   d5b04:	9300      	str	r3, [sp, #0]
   d5b06:	f504 668c 	add.w	r6, r4, #1120	; 0x460
   d5b0a:	2300      	movs	r3, #0
   d5b0c:	f88d 3004 	strb.w	r3, [sp, #4]
   d5b10:	9202      	str	r2, [sp, #8]
   d5b12:	2501      	movs	r5, #1
   d5b14:	f88d 300d 	strb.w	r3, [sp, #13]
   d5b18:	220e      	movs	r2, #14
   d5b1a:	466b      	mov	r3, sp
   d5b1c:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   d5b20:	4630      	mov	r0, r6
   d5b22:	f88d 500c 	strb.w	r5, [sp, #12]
   d5b26:	f002 f92d 	bl	d7d84 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d5b2a:	b300      	cbz	r0, d5b6e <_Z16igh_sd_log_setupv+0x7e>
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d5b2c:	f204 403c 	addw	r0, r4, #1084	; 0x43c
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d5b30:	6026      	str	r6, [r4, #0]
    vwd()->close();
   d5b32:	f001 fd75 	bl	d7620 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d5b36:	4629      	mov	r1, r5
   d5b38:	4620      	mov	r0, r4
   d5b3a:	f001 ffcc 	bl	d7ad6 <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d5b3e:	4601      	mov	r1, r0
   d5b40:	b180      	cbz	r0, d5b64 <_Z16igh_sd_log_setupv+0x74>
   d5b42:	4c0d      	ldr	r4, [pc, #52]	; (d5b78 <_Z16igh_sd_log_setupv+0x88>)
   d5b44:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   d5b48:	4621      	mov	r1, r4
   d5b4a:	4628      	mov	r0, r5
   d5b4c:	f001 fb41 	bl	d71d2 <_ZN7FatFile8openRootEP9FatVolume>
   d5b50:	b168      	cbz	r0, d5b6e <_Z16igh_sd_log_setupv+0x7e>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d5b52:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d5b56:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
   d5b5a:	bf16      	itet	ne
   d5b5c:	4b09      	ldrne	r3, [pc, #36]	; (d5b84 <_Z16igh_sd_log_setupv+0x94>)
   d5b5e:	4618      	moveq	r0, r3
   d5b60:	601d      	strne	r5, [r3, #0]
   d5b62:	e005      	b.n	d5b70 <_Z16igh_sd_log_setupv+0x80>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d5b64:	4620      	mov	r0, r4
   d5b66:	f001 ffb6 	bl	d7ad6 <_ZN9FatVolume4initEh>
   d5b6a:	2800      	cmp	r0, #0
   d5b6c:	d1e9      	bne.n	d5b42 <_Z16igh_sd_log_setupv+0x52>
   d5b6e:	2000      	movs	r0, #0
    return igh_sd.begin(IGH_SD_CS);
}
   d5b70:	b004      	add	sp, #16
   d5b72:	bd70      	pop	{r4, r5, r6, pc}
   d5b74:	2003ddb4 	.word	0x2003ddb4
   d5b78:	2003d930 	.word	0x2003d930
   d5b7c:	000dd274 	.word	0x000dd274
   d5b80:	02faf080 	.word	0x02faf080
   d5b84:	2003de58 	.word	0x2003de58

000d5b88 <_Z24igh_sd_log_get_file_namemPc>:
{
    igh_file.rewindDirectory();
}

void igh_sd_log_get_file_name(unsigned long _unix_time, char * file_name)
{
   d5b88:	b507      	push	{r0, r1, r2, lr}
   d5b8a:	4602      	mov	r2, r0
    sprintf(file_name, "%02X%02X%02X%02X.LOG", 
    (uint8_t)(_unix_time >> 24), 
    (uint8_t)(_unix_time >> 16), 
    (uint8_t)(_unix_time >> 8), 
    (uint8_t)(_unix_time));
   d5b8c:	b2d3      	uxtb	r3, r2
   d5b8e:	9301      	str	r3, [sp, #4]
   d5b90:	f3c2 2307 	ubfx	r3, r2, #8, #8
   d5b94:	9300      	str	r3, [sp, #0]
{
    igh_file.rewindDirectory();
}

void igh_sd_log_get_file_name(unsigned long _unix_time, char * file_name)
{
   d5b96:	4608      	mov	r0, r1
    sprintf(file_name, "%02X%02X%02X%02X.LOG", 
    (uint8_t)(_unix_time >> 24), 
    (uint8_t)(_unix_time >> 16), 
    (uint8_t)(_unix_time >> 8), 
    (uint8_t)(_unix_time));
   d5b98:	f3c2 4307 	ubfx	r3, r2, #16, #8
   d5b9c:	4903      	ldr	r1, [pc, #12]	; (d5bac <_Z24igh_sd_log_get_file_namemPc+0x24>)
   d5b9e:	0e12      	lsrs	r2, r2, #24
   d5ba0:	f003 f9be 	bl	d8f20 <sprintf>
}
   d5ba4:	b003      	add	sp, #12
   d5ba6:	f85d fb04 	ldr.w	pc, [sp], #4
   d5baa:	bf00      	nop
   d5bac:	000dd2fd 	.word	0x000dd2fd

000d5bb0 <_Z26igh_sd_log_save_data_pointmPhh>:

uint8_t igh_sd_log_save_data_point(unsigned long _unix_time, uint8_t * data, uint8_t size)
{
   d5bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5bb4:	b092      	sub	sp, #72	; 0x48
   d5bb6:	4688      	mov	r8, r1
    uint8_t ret = 0;
    char name[FILE_NAME_SIZE]; // include the null terminator?
    igh_sd_log_get_file_name(_unix_time, name);
   d5bb8:	a901      	add	r1, sp, #4
    (uint8_t)(_unix_time >> 8), 
    (uint8_t)(_unix_time));
}

uint8_t igh_sd_log_save_data_point(unsigned long _unix_time, uint8_t * data, uint8_t size)
{
   d5bba:	4617      	mov	r7, r2
    uint8_t ret = 0;
    char name[FILE_NAME_SIZE]; // include the null terminator?
    igh_sd_log_get_file_name(_unix_time, name);
   d5bbc:	f7ff ffe4 	bl	d5b88 <_Z24igh_sd_log_get_file_namemPc>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5bc0:	2300      	movs	r3, #0
   d5bc2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d5bc6:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5bca:	9306      	str	r3, [sp, #24]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5bcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5bd0:	9307      	str	r3, [sp, #28]
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 public:
  File() {}
   d5bd2:	4b24      	ldr	r3, [pc, #144]	; (d5c64 <_Z26igh_sd_log_save_data_pointmPhh+0xb4>)
   d5bd4:	9305      	str	r3, [sp, #20]
   * \param[in] oflag open flags.
   * \return a File object.
   */
  File open(const char *path, oflag_t oflag = FILE_READ) {
    File tmpFile;
    tmpFile.open(vwd(), path, oflag);
   d5bd6:	aa01      	add	r2, sp, #4
   d5bd8:	f244 2302 	movw	r3, #16898	; 0x4202
   d5bdc:	4922      	ldr	r1, [pc, #136]	; (d5c68 <_Z26igh_sd_log_save_data_pointmPhh+0xb8>)
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d5bde:	4e23      	ldr	r6, [pc, #140]	; (d5c6c <_Z26igh_sd_log_save_data_pointmPhh+0xbc>)
   d5be0:	a809      	add	r0, sp, #36	; 0x24
   d5be2:	ac09      	add	r4, sp, #36	; 0x24
   d5be4:	f001 fd23 	bl	d762e <_ZN7FatFile4openEPS_PKci>
   d5be8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5bea:	f106 0510 	add.w	r5, r6, #16
   d5bee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5bf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5bf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5bf4:	6823      	ldr	r3, [r4, #0]
   d5bf6:	602b      	str	r3, [r5, #0]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
   d5bf8:	9b06      	ldr	r3, [sp, #24]
   d5bfa:	6073      	str	r3, [r6, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   d5bfc:	9b07      	ldr	r3, [sp, #28]
   d5bfe:	60b3      	str	r3, [r6, #8]
   d5c00:	9b08      	ldr	r3, [sp, #32]
   d5c02:	60f3      	str	r3, [r6, #12]
    igh_file = igh_sd.open((const char *)name, FILE_WRITE);

    Serial.print("Saving: "); Serial.print(name); Serial.print(" Size: "); Serial.print(size);
   d5c04:	f004 f986 	bl	d9f14 <_Z16_fetch_usbserialv>
   d5c08:	4919      	ldr	r1, [pc, #100]	; (d5c70 <_Z26igh_sd_log_save_data_pointmPhh+0xc0>)
   d5c0a:	f003 fc63 	bl	d94d4 <_ZN5Print5printEPKc>
   d5c0e:	f004 f981 	bl	d9f14 <_Z16_fetch_usbserialv>
   d5c12:	a901      	add	r1, sp, #4
   d5c14:	f003 fc5e 	bl	d94d4 <_ZN5Print5printEPKc>
   d5c18:	f004 f97c 	bl	d9f14 <_Z16_fetch_usbserialv>
   d5c1c:	4915      	ldr	r1, [pc, #84]	; (d5c74 <_Z26igh_sd_log_save_data_pointmPhh+0xc4>)
   d5c1e:	f003 fc59 	bl	d94d4 <_ZN5Print5printEPKc>
   d5c22:	f004 f977 	bl	d9f14 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5c26:	220a      	movs	r2, #10
   d5c28:	4639      	mov	r1, r7
   d5c2a:	f003 fc70 	bl	d950e <_ZN5Print11printNumberEmh>

    if(igh_file)
   d5c2e:	7c34      	ldrb	r4, [r6, #16]
   d5c30:	b15c      	cbz	r4, d5c4a <_Z26igh_sd_log_save_data_pointmPhh+0x9a>
    {
        igh_file.write( data, size);
   d5c32:	463a      	mov	r2, r7
   d5c34:	4641      	mov	r1, r8
   d5c36:	4630      	mov	r0, r6
   d5c38:	f7ff ff1a 	bl	d5a70 <_ZN4File5writeEPKhj>
        Serial.println(" OK");
   d5c3c:	f004 f96a 	bl	d9f14 <_Z16_fetch_usbserialv>
   d5c40:	490d      	ldr	r1, [pc, #52]	; (d5c78 <_Z26igh_sd_log_save_data_pointmPhh+0xc8>)
   d5c42:	f003 fc5a 	bl	d94fa <_ZN5Print7printlnEPKc>
        ret = 1;
   d5c46:	2401      	movs	r4, #1
   d5c48:	e004      	b.n	d5c54 <_Z26igh_sd_log_save_data_pointmPhh+0xa4>
    }
    else
    {
        Serial.println(" ERROR");
   d5c4a:	f004 f963 	bl	d9f14 <_Z16_fetch_usbserialv>
   d5c4e:	490b      	ldr	r1, [pc, #44]	; (d5c7c <_Z26igh_sd_log_save_data_pointmPhh+0xcc>)
   d5c50:	f003 fc53 	bl	d94fa <_ZN5Print7printlnEPKc>
    }

    igh_file.close();
   d5c54:	480a      	ldr	r0, [pc, #40]	; (d5c80 <_Z26igh_sd_log_save_data_pointmPhh+0xd0>)
   d5c56:	f001 fce3 	bl	d7620 <_ZN7FatFile5closeEv>
    return ret;
}
   d5c5a:	4620      	mov	r0, r4
   d5c5c:	b012      	add	sp, #72	; 0x48
   d5c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5c62:	bf00      	nop
   d5c64:	000dd280 	.word	0x000dd280
   d5c68:	2003dd6c 	.word	0x2003dd6c
   d5c6c:	2003dde0 	.word	0x2003dde0
   d5c70:	000dd312 	.word	0x000dd312
   d5c74:	000dd31b 	.word	0x000dd31b
   d5c78:	000dcf40 	.word	0x000dcf40
   d5c7c:	000dcf48 	.word	0x000dcf48
   d5c80:	2003ddf0 	.word	0x2003ddf0

000d5c84 <_Z28igh_sd_log_remove_data_pointPc>:
  *
  * \return The value true is returned for success and
  * the value false is returned for failure.
  */
  bool remove(const char* path) {
    return FatFile::remove(vwd(), path);
   d5c84:	4601      	mov	r1, r0
   d5c86:	4801      	ldr	r0, [pc, #4]	; (d5c8c <_Z28igh_sd_log_remove_data_pointPc+0x8>)
   d5c88:	f001 bd20 	b.w	d76cc <_ZN7FatFile6removeEPS_PKc>
   d5c8c:	2003dd6c 	.word	0x2003dd6c

000d5c90 <_Z26igh_sd_log_read_data_pointPcPhh>:
        return 1;
    }
}

uint8_t igh_sd_log_read_data_point(char * file_name, uint8_t * buffer, uint8_t data_length)
{
   d5c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5c94:	b08e      	sub	sp, #56	; 0x38
   d5c96:	4690      	mov	r8, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5c98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5c9c:	9203      	str	r2, [sp, #12]
 public:
  File() {}
   d5c9e:	4a18      	ldr	r2, [pc, #96]	; (d5d00 <_Z26igh_sd_log_read_data_pointPcPhh+0x70>)
   d5ca0:	9201      	str	r2, [sp, #4]
   d5ca2:	2300      	movs	r3, #0
   * \param[in] oflag open flags.
   * \return a File object.
   */
  File open(const char *path, oflag_t oflag = FILE_READ) {
    File tmpFile;
    tmpFile.open(vwd(), path, oflag);
   d5ca4:	4602      	mov	r2, r0
   d5ca6:	460f      	mov	r7, r1
   d5ca8:	a805      	add	r0, sp, #20
   d5caa:	4916      	ldr	r1, [pc, #88]	; (d5d04 <_Z26igh_sd_log_read_data_pointPcPhh+0x74>)
   d5cac:	f88d 3014 	strb.w	r3, [sp, #20]
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d5cb0:	ac05      	add	r4, sp, #20
   d5cb2:	f88d 3015 	strb.w	r3, [sp, #21]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5cb6:	9302      	str	r3, [sp, #8]
   d5cb8:	f001 fcb9 	bl	d762e <_ZN7FatFile4openEPS_PKci>
   d5cbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5cbe:	4e12      	ldr	r6, [pc, #72]	; (d5d08 <_Z26igh_sd_log_read_data_pointPcPhh+0x78>)
   d5cc0:	f106 0510 	add.w	r5, r6, #16
   d5cc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5cc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5cc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5cca:	6823      	ldr	r3, [r4, #0]
   d5ccc:	602b      	str	r3, [r5, #0]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
   d5cce:	9b02      	ldr	r3, [sp, #8]
   d5cd0:	6073      	str	r3, [r6, #4]
    igh_file = igh_sd.open( (const char *)file_name );
    if(igh_file)
   d5cd2:	7c30      	ldrb	r0, [r6, #16]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   d5cd4:	9b03      	ldr	r3, [sp, #12]
   d5cd6:	60b3      	str	r3, [r6, #8]
   d5cd8:	9b04      	ldr	r3, [sp, #16]
   d5cda:	60f3      	str	r3, [r6, #12]
   d5cdc:	b160      	cbz	r0, d5cf8 <_Z26igh_sd_log_read_data_pointPcPhh+0x68>
   d5cde:	463c      	mov	r4, r7
    {
        for(int i = 0; i < data_length; i++)
   d5ce0:	1be3      	subs	r3, r4, r7
   d5ce2:	4598      	cmp	r8, r3
        {
            buffer[i] = igh_file.read(); // read data_len number of chars
        }
        igh_file.close();
   d5ce4:	4809      	ldr	r0, [pc, #36]	; (d5d0c <_Z26igh_sd_log_read_data_pointPcPhh+0x7c>)
uint8_t igh_sd_log_read_data_point(char * file_name, uint8_t * buffer, uint8_t data_length)
{
    igh_file = igh_sd.open( (const char *)file_name );
    if(igh_file)
    {
        for(int i = 0; i < data_length; i++)
   d5ce6:	dd04      	ble.n	d5cf2 <_Z26igh_sd_log_read_data_pointPcPhh+0x62>
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    return FatFile::read();
   d5ce8:	f7ff feee 	bl	d5ac8 <_ZN7FatFile4readEv>
        {
            buffer[i] = igh_file.read(); // read data_len number of chars
   d5cec:	f804 0b01 	strb.w	r0, [r4], #1
   d5cf0:	e7f6      	b.n	d5ce0 <_Z26igh_sd_log_read_data_pointPcPhh+0x50>
        }
        igh_file.close();
   d5cf2:	f001 fc95 	bl	d7620 <_ZN7FatFile5closeEv>
   d5cf6:	2001      	movs	r0, #1
    }
    else
    {
        return 0;
    }   
}
   d5cf8:	b00e      	add	sp, #56	; 0x38
   d5cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5cfe:	bf00      	nop
   d5d00:	000dd280 	.word	0x000dd280
   d5d04:	2003dd6c 	.word	0x2003dd6c
   d5d08:	2003dde0 	.word	0x2003dde0
   d5d0c:	2003ddf0 	.word	0x2003ddf0

000d5d10 <_Z29igh_sd_log_get_next_file_namePc>:

uint8_t igh_sd_log_get_next_file_name(char * next_file_name)
{
   d5d10:	b510      	push	{r4, lr}
   d5d12:	4604      	mov	r4, r0
    if(!igh_sd_log_setup())
   d5d14:	f7ff feec 	bl	d5af0 <_Z16igh_sd_log_setupv>
   d5d18:	b908      	cbnz	r0, d5d1e <_Z29igh_sd_log_get_next_file_namePc+0xe>
    {
        return 0;
   d5d1a:	2000      	movs	r0, #0
   d5d1c:	bd10      	pop	{r4, pc}
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d5d1e:	4910      	ldr	r1, [pc, #64]	; (d5d60 <_Z29igh_sd_log_get_next_file_namePc+0x50>)
   d5d20:	4a10      	ldr	r2, [pc, #64]	; (d5d64 <_Z29igh_sd_log_get_next_file_namePc+0x54>)
   d5d22:	6809      	ldr	r1, [r1, #0]
   d5d24:	4810      	ldr	r0, [pc, #64]	; (d5d68 <_Z29igh_sd_log_get_next_file_namePc+0x58>)
   d5d26:	2300      	movs	r3, #0
   d5d28:	f001 fc81 	bl	d762e <_ZN7FatFile4openEPS_PKci>
    }

    if (!sd_root.open("/"))
   d5d2c:	2800      	cmp	r0, #0
   d5d2e:	d0f4      	beq.n	d5d1a <_Z29igh_sd_log_get_next_file_namePc+0xa>
    {
        return 0;
    }
    else
    {
        next_file.openNext(&sd_root, O_RDONLY); // skip one index
   d5d30:	2200      	movs	r2, #0
   d5d32:	490d      	ldr	r1, [pc, #52]	; (d5d68 <_Z29igh_sd_log_get_next_file_namePc+0x58>)
   d5d34:	480d      	ldr	r0, [pc, #52]	; (d5d6c <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d5d36:	f001 fbfe 	bl	d7536 <_ZN7FatFile8openNextEPS_i>
        next_file.close(); 
   d5d3a:	480c      	ldr	r0, [pc, #48]	; (d5d6c <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d5d3c:	f001 fc70 	bl	d7620 <_ZN7FatFile5closeEv>
        if( next_file.openNext(&sd_root, O_RDONLY) )
   d5d40:	2200      	movs	r2, #0
   d5d42:	4909      	ldr	r1, [pc, #36]	; (d5d68 <_Z29igh_sd_log_get_next_file_namePc+0x58>)
   d5d44:	4809      	ldr	r0, [pc, #36]	; (d5d6c <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d5d46:	f001 fbf6 	bl	d7536 <_ZN7FatFile8openNextEPS_i>
   d5d4a:	2800      	cmp	r0, #0
   d5d4c:	d0e5      	beq.n	d5d1a <_Z29igh_sd_log_get_next_file_namePc+0xa>
        {
            next_file.getSFN(next_file_name);
   d5d4e:	4621      	mov	r1, r4
   d5d50:	4806      	ldr	r0, [pc, #24]	; (d5d6c <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d5d52:	f001 f9a1 	bl	d7098 <_ZN7FatFile6getSFNEPc>
            next_file.close(); 
   d5d56:	4805      	ldr	r0, [pc, #20]	; (d5d6c <_Z29igh_sd_log_get_next_file_namePc+0x5c>)
   d5d58:	f001 fc62 	bl	d7620 <_ZN7FatFile5closeEv>
   d5d5c:	2001      	movs	r0, #1
        else
        {
            return 0;
        }    
    }
}
   d5d5e:	bd10      	pop	{r4, pc}
   d5d60:	2003de58 	.word	0x2003de58
   d5d64:	000dd323 	.word	0x000dd323
   d5d68:	2003ddbc 	.word	0x2003ddbc
   d5d6c:	2003d90c 	.word	0x2003d90c

000d5d70 <_GLOBAL__sub_I_igh_sd>:
    {
        return 0;
    }

    return 1;
   d5d70:	b570      	push	{r4, r5, r6, lr}
   d5d72:	f002 fd81 	bl	d8878 <HAL_Pin_Map>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d5d76:	4b27      	ldr	r3, [pc, #156]	; (d5e14 <_GLOBAL__sub_I_igh_sd+0xa4>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5d78:	4e27      	ldr	r6, [pc, #156]	; (d5e18 <_GLOBAL__sub_I_igh_sd+0xa8>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d5d7a:	2164      	movs	r1, #100	; 0x64
   d5d7c:	f883 1460 	strb.w	r1, [r3, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d5d80:	4926      	ldr	r1, [pc, #152]	; (d5e1c <_GLOBAL__sub_I_igh_sd+0xac>)
   d5d82:	f8c3 1470 	str.w	r1, [r3, #1136]	; 0x470
   d5d86:	2101      	movs	r1, #1
   d5d88:	f883 1474 	strb.w	r1, [r3, #1140]	; 0x474
   d5d8c:	6831      	ldr	r1, [r6, #0]
   d5d8e:	2200      	movs	r2, #0
   d5d90:	f011 0501 	ands.w	r5, r1, #1
   d5d94:	71da      	strb	r2, [r3, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5d96:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
   d5d9a:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
   d5d9e:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
   d5da2:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   d5da6:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
   d5daa:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
   d5dae:	461c      	mov	r4, r3
   d5db0:	d10a      	bne.n	d5dc8 <_GLOBAL__sub_I_igh_sd+0x58>
   d5db2:	4630      	mov	r0, r6
   d5db4:	f7fe f979 	bl	d40aa <__cxa_guard_acquire>
   d5db8:	b130      	cbz	r0, d5dc8 <_GLOBAL__sub_I_igh_sd+0x58>
   d5dba:	4629      	mov	r1, r5
   d5dbc:	4818      	ldr	r0, [pc, #96]	; (d5e20 <_GLOBAL__sub_I_igh_sd+0xb0>)
   d5dbe:	f003 f933 	bl	d9028 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5dc2:	4630      	mov	r0, r6
   d5dc4:	f7fe f976 	bl	d40b4 <__cxa_guard_release>
   d5dc8:	4816      	ldr	r0, [pc, #88]	; (d5e24 <_GLOBAL__sub_I_igh_sd+0xb4>)
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d5dca:	4b15      	ldr	r3, [pc, #84]	; (d5e20 <_GLOBAL__sub_I_igh_sd+0xb0>)
   d5dcc:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d5dd0:	2400      	movs	r4, #0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5dd6:	7404      	strb	r4, [r0, #16]
   d5dd8:	7444      	strb	r4, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5dda:	6044      	str	r4, [r0, #4]
   d5ddc:	6083      	str	r3, [r0, #8]
#include <SPI.h>
#include "SdFat.h"
#include "igh_sd_log.h"

SdFat igh_sd;
File igh_file;
   d5dde:	4a12      	ldr	r2, [pc, #72]	; (d5e28 <_GLOBAL__sub_I_igh_sd+0xb8>)
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 public:
  File() {}
   d5de0:	4b12      	ldr	r3, [pc, #72]	; (d5e2c <_GLOBAL__sub_I_igh_sd+0xbc>)
   d5de2:	4913      	ldr	r1, [pc, #76]	; (d5e30 <_GLOBAL__sub_I_igh_sd+0xc0>)
   d5de4:	6003      	str	r3, [r0, #0]
   d5de6:	f004 ff8f 	bl	dad08 <__aeabi_atexit>
   d5dea:	4812      	ldr	r0, [pc, #72]	; (d5e34 <_GLOBAL__sub_I_igh_sd+0xc4>)
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 public:
  SdFile() {}
   d5dec:	4d12      	ldr	r5, [pc, #72]	; (d5e38 <_GLOBAL__sub_I_igh_sd+0xc8>)
   d5dee:	7204      	strb	r4, [r0, #8]
   d5df0:	7244      	strb	r4, [r0, #9]
   d5df2:	6044      	str	r4, [r0, #4]
SdFile sd_root;
   d5df4:	4a0c      	ldr	r2, [pc, #48]	; (d5e28 <_GLOBAL__sub_I_igh_sd+0xb8>)
   d5df6:	4911      	ldr	r1, [pc, #68]	; (d5e3c <_GLOBAL__sub_I_igh_sd+0xcc>)
   d5df8:	6005      	str	r5, [r0, #0]
   d5dfa:	f004 ff85 	bl	dad08 <__aeabi_atexit>
   d5dfe:	4810      	ldr	r0, [pc, #64]	; (d5e40 <_GLOBAL__sub_I_igh_sd+0xd0>)
SdFile next_file;
   d5e00:	4a09      	ldr	r2, [pc, #36]	; (d5e28 <_GLOBAL__sub_I_igh_sd+0xb8>)
   d5e02:	7204      	strb	r4, [r0, #8]
   d5e04:	7244      	strb	r4, [r0, #9]
   d5e06:	6044      	str	r4, [r0, #4]
   d5e08:	6005      	str	r5, [r0, #0]
   d5e0a:	490c      	ldr	r1, [pc, #48]	; (d5e3c <_GLOBAL__sub_I_igh_sd+0xcc>)
    {
        return 0;
    }

    return 1;
   d5e0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#include "igh_sd_log.h"

SdFat igh_sd;
File igh_file;
SdFile sd_root;
SdFile next_file;
   d5e10:	f004 bf7a 	b.w	dad08 <__aeabi_atexit>
   d5e14:	2003d930 	.word	0x2003d930
   d5e18:	2003d8f8 	.word	0x2003d8f8
   d5e1c:	000dd274 	.word	0x000dd274
   d5e20:	2003d8fc 	.word	0x2003d8fc
   d5e24:	2003dde0 	.word	0x2003dde0
   d5e28:	2003d7f8 	.word	0x2003d7f8
   d5e2c:	000dd280 	.word	0x000dd280
   d5e30:	000d5a0b 	.word	0x000d5a0b
   d5e34:	2003ddb4 	.word	0x2003ddb4
   d5e38:	000dd2a8 	.word	0x000dd2a8
   d5e3c:	000d5a09 	.word	0x000d5a09
   d5e40:	2003d904 	.word	0x2003d904

000d5e44 <_ZN14CellularSignalD1Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d5e44:	4770      	bx	lr

000d5e46 <_ZN14CellularSignalD0Ev>:
   d5e46:	b510      	push	{r4, lr}
   d5e48:	2128      	movs	r1, #40	; 0x28
   d5e4a:	4604      	mov	r4, r0
   d5e4c:	f004 ff6a 	bl	dad24 <_ZdlPvj>
   d5e50:	4620      	mov	r0, r4
   d5e52:	bd10      	pop	{r4, pc}

000d5e54 <_Z19igh_boron_sync_timev>:
/* Local function prototypes */
uint8_t get_int_from_str( uint8_t num );

/* Functions */
void igh_boron_sync_time(void)
{
   d5e54:	b510      	push	{r4, lr}
   d5e56:	f002 fdd7 	bl	d8a08 <HAL_Timer_Get_Milli_Seconds>
    if((millis() - lastSync > ONE_DAY_MILLIS))
   d5e5a:	4b08      	ldr	r3, [pc, #32]	; (d5e7c <_Z19igh_boron_sync_timev+0x28>)
   d5e5c:	681a      	ldr	r2, [r3, #0]
   d5e5e:	1a80      	subs	r0, r0, r2
   d5e60:	4a07      	ldr	r2, [pc, #28]	; (d5e80 <_Z19igh_boron_sync_timev+0x2c>)
   d5e62:	4290      	cmp	r0, r2
   d5e64:	461c      	mov	r4, r3
   d5e66:	d908      	bls.n	d5e7a <_Z19igh_boron_sync_timev+0x26>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5e68:	f003 f81a 	bl	d8ea0 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d5e6c:	b110      	cbz	r0, d5e74 <_Z19igh_boron_sync_timev+0x20>
            return false;
        }
        return spark_sync_time(NULL);
   d5e6e:	2000      	movs	r0, #0
   d5e70:	f003 f826 	bl	d8ec0 <spark_sync_time>
   d5e74:	f002 fdc8 	bl	d8a08 <HAL_Timer_Get_Milli_Seconds>
    {
        Particle.syncTime();
        lastSync = millis(); 
   d5e78:	6020      	str	r0, [r4, #0]
   d5e7a:	bd10      	pop	{r4, pc}
   d5e7c:	2003de3c 	.word	0x2003de3c
   d5e80:	05265c00 	.word	0x05265c00

000d5e84 <_Z19igh_boron_unix_timev>:
    }
}

uint32_t igh_boron_unix_time(void)
{
    return (uint32_t)Time.now();
   d5e84:	f003 bd8b 	b.w	d999e <_ZN9TimeClass3nowEv>

000d5e88 <_Z13igh_boron_SoCv>:
}

float igh_boron_SoC(void)
{
    return fuel.getSoC();
   d5e88:	4801      	ldr	r0, [pc, #4]	; (d5e90 <_Z13igh_boron_SoCv+0x8>)
   d5e8a:	f003 bea1 	b.w	d9bd0 <_ZN9FuelGauge6getSoCEv>
   d5e8e:	bf00      	nop
   d5e90:	2003de40 	.word	0x2003de40

000d5e94 <_Z16get_int_from_strh>:
        k++; j++;
    }
}

uint8_t get_int_from_str( uint8_t num )
{
   d5e94:	b510      	push	{r4, lr}
    unsigned long location = (unsigned long)strchr(hex_digits_LC, num);
   d5e96:	4c04      	ldr	r4, [pc, #16]	; (d5ea8 <_Z16get_int_from_strh+0x14>)
   d5e98:	4601      	mov	r1, r0
   d5e9a:	4620      	mov	r0, r4
   d5e9c:	f005 ff2a 	bl	dbcf4 <strchr>
    unsigned long origin = (unsigned long)hex_digits_LC;
    return uint8_t(location - origin);
   d5ea0:	1b00      	subs	r0, r0, r4
}
   d5ea2:	b2c0      	uxtb	r0, r0
   d5ea4:	bd10      	pop	{r4, pc}
   d5ea6:	bf00      	nop
   d5ea8:	2003d72e 	.word	0x2003d72e

000d5eac <_Z15igh_boron_setupv>:
{
    return Particle.connected();;
}

void igh_boron_setup(void)
{
   d5eac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d5eb0:	f002 fdaa 	bl	d8a08 <HAL_Timer_Get_Milli_Seconds>
    lastSync = millis();
   d5eb4:	4b14      	ldr	r3, [pc, #80]	; (d5f08 <_Z15igh_boron_setupv+0x5c>)
   d5eb6:	6018      	str	r0, [r3, #0]
   d5eb8:	4668      	mov	r0, sp
   d5eba:	f002 fff9 	bl	d8eb0 <spark_deviceID>
    // get serial number 
    memcpy( deviceID_string, System.deviceID(), sizeof(deviceID_string) );
   d5ebe:	9b00      	ldr	r3, [sp, #0]
   d5ec0:	4a12      	ldr	r2, [pc, #72]	; (d5f0c <_Z15igh_boron_setupv+0x60>)
   d5ec2:	f103 0118 	add.w	r1, r3, #24
   d5ec6:	4617      	mov	r7, r2
   d5ec8:	f853 0b04 	ldr.w	r0, [r3], #4
   d5ecc:	f842 0b04 	str.w	r0, [r2], #4
   d5ed0:	428b      	cmp	r3, r1
   d5ed2:	d1f9      	bne.n	d5ec8 <_Z15igh_boron_setupv+0x1c>
   d5ed4:	4668      	mov	r0, sp
   d5ed6:	f003 fa09 	bl	d92ec <_ZN6StringD1Ev>
   d5eda:	4e0d      	ldr	r6, [pc, #52]	; (d5f10 <_Z15igh_boron_setupv+0x64>)
   d5edc:	2500      	movs	r5, #0

    uint8_t k = 0; uint8_t j = 0;
    while( k < sizeof(deviceID_string) )
    {
        boron_serial_number[j] = get_int_from_str(deviceID_string[k]) << 4;
   d5ede:	5d78      	ldrb	r0, [r7, r5]
   d5ee0:	f7ff ffd8 	bl	d5e94 <_Z16get_int_from_strh>
   d5ee4:	eb07 0805 	add.w	r8, r7, r5
   d5ee8:	0100      	lsls	r0, r0, #4
   d5eea:	b2c4      	uxtb	r4, r0
        k++;
        boron_serial_number[j] |= get_int_from_str(deviceID_string[k]);
   d5eec:	f898 0001 	ldrb.w	r0, [r8, #1]
    memcpy( deviceID_string, System.deviceID(), sizeof(deviceID_string) );

    uint8_t k = 0; uint8_t j = 0;
    while( k < sizeof(deviceID_string) )
    {
        boron_serial_number[j] = get_int_from_str(deviceID_string[k]) << 4;
   d5ef0:	f806 4f01 	strb.w	r4, [r6, #1]!
        k++;
        boron_serial_number[j] |= get_int_from_str(deviceID_string[k]);
   d5ef4:	f7ff ffce 	bl	d5e94 <_Z16get_int_from_strh>
   d5ef8:	3502      	adds	r5, #2
   d5efa:	4320      	orrs	r0, r4
    lastSync = millis();
    // get serial number 
    memcpy( deviceID_string, System.deviceID(), sizeof(deviceID_string) );

    uint8_t k = 0; uint8_t j = 0;
    while( k < sizeof(deviceID_string) )
   d5efc:	2d18      	cmp	r5, #24
    {
        boron_serial_number[j] = get_int_from_str(deviceID_string[k]) << 4;
        k++;
        boron_serial_number[j] |= get_int_from_str(deviceID_string[k]);
   d5efe:	7030      	strb	r0, [r6, #0]
    lastSync = millis();
    // get serial number 
    memcpy( deviceID_string, System.deviceID(), sizeof(deviceID_string) );

    uint8_t k = 0; uint8_t j = 0;
    while( k < sizeof(deviceID_string) )
   d5f00:	d1ed      	bne.n	d5ede <_Z15igh_boron_setupv+0x32>
        boron_serial_number[j] = get_int_from_str(deviceID_string[k]) << 4;
        k++;
        boron_serial_number[j] |= get_int_from_str(deviceID_string[k]);
        k++; j++;
    }
}
   d5f02:	b004      	add	sp, #16
   d5f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5f08:	2003de3c 	.word	0x2003de3c
   d5f0c:	2003e624 	.word	0x2003e624
   d5f10:	2003e63b 	.word	0x2003e63b

000d5f14 <_Z17igh_boron_servicev>:
    return uint8_t(location - origin);
}

void igh_boron_service(void)
{
    igh_boron_sync_time();
   d5f14:	f7ff bf9e 	b.w	d5e54 <_Z19igh_boron_sync_timev>

000d5f18 <_GLOBAL__sub_I_lastSync>:
    Serial.print("network status:   "); Serial.println(igh_boron_connecetd_to_network());
    Serial.print("signal strength:  "); Serial.println(igh_boron_ss());
    Serial.print("signal quality:   "); Serial.println(igh_boron_sq());
    Serial.print("Battery Voltage:  "); Serial.println(igh_boron_voltage());
    Serial.print("Battery SOC:      "); Serial.println(igh_boron_SoC());
   d5f18:	b570      	push	{r4, r5, r6, lr}
   d5f1a:	f002 fcad 	bl	d8878 <HAL_Pin_Map>
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d5f1e:	4c10      	ldr	r4, [pc, #64]	; (d5f60 <_GLOBAL__sub_I_lastSync+0x48>)
   d5f20:	4b10      	ldr	r3, [pc, #64]	; (d5f64 <_GLOBAL__sub_I_lastSync+0x4c>)
   d5f22:	6023      	str	r3, [r4, #0]
   d5f24:	2500      	movs	r5, #0
   d5f26:	3328      	adds	r3, #40	; 0x28
   d5f28:	4629      	mov	r1, r5
#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)

unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
   d5f2a:	4e0f      	ldr	r6, [pc, #60]	; (d5f68 <_GLOBAL__sub_I_lastSync+0x50>)
   d5f2c:	6063      	str	r3, [r4, #4]
   d5f2e:	2218      	movs	r2, #24
   d5f30:	f104 0010 	add.w	r0, r4, #16
   d5f34:	60a5      	str	r5, [r4, #8]
   d5f36:	60e5      	str	r5, [r4, #12]
   d5f38:	f005 feac 	bl	dbc94 <memset>
   d5f3c:	4620      	mov	r0, r4
float signal_quality, signal_strength;
FuelGauge fuel;
   d5f3e:	4c0b      	ldr	r4, [pc, #44]	; (d5f6c <_GLOBAL__sub_I_lastSync+0x54>)
#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)

unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
   d5f40:	490b      	ldr	r1, [pc, #44]	; (d5f70 <_GLOBAL__sub_I_lastSync+0x58>)
   d5f42:	4632      	mov	r2, r6
   d5f44:	f004 fee0 	bl	dad08 <__aeabi_atexit>
float signal_quality, signal_strength;
FuelGauge fuel;
   d5f48:	4629      	mov	r1, r5
   d5f4a:	4620      	mov	r0, r4
   d5f4c:	f003 fe00 	bl	d9b50 <_ZN9FuelGaugeC1Eb>
   d5f50:	4632      	mov	r2, r6
   d5f52:	4620      	mov	r0, r4
   d5f54:	4907      	ldr	r1, [pc, #28]	; (d5f74 <_GLOBAL__sub_I_lastSync+0x5c>)
    Serial.print("network status:   "); Serial.println(igh_boron_connecetd_to_network());
    Serial.print("signal strength:  "); Serial.println(igh_boron_ss());
    Serial.print("signal quality:   "); Serial.println(igh_boron_sq());
    Serial.print("Battery Voltage:  "); Serial.println(igh_boron_voltage());
    Serial.print("Battery SOC:      "); Serial.println(igh_boron_SoC());
   d5f56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
unsigned long lastSync;
bool connected_to_cloud;
bool connected_to_network;
CellularSignal signal;
float signal_quality, signal_strength;
FuelGauge fuel;
   d5f5a:	f004 bed5 	b.w	dad08 <__aeabi_atexit>
   d5f5e:	bf00      	nop
   d5f60:	2003de14 	.word	0x2003de14
   d5f64:	000dd4f0 	.word	0x000dd4f0
   d5f68:	2003d7f8 	.word	0x2003d7f8
   d5f6c:	2003de40 	.word	0x2003de40
   d5f70:	000d5e45 	.word	0x000d5e45
   d5f74:	000d9b6f 	.word	0x000d9b6f

000d5f78 <_Z21igh_rfm69_set_bitratehh>:
    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
} 

void igh_rfm69_set_bitrate(uint8_t msb, uint8_t lsb)
{
   d5f78:	b538      	push	{r3, r4, r5, lr}
    igh_radio.writeReg(REG_BITRATEMSB, msb); 
   d5f7a:	4c07      	ldr	r4, [pc, #28]	; (d5f98 <_Z21igh_rfm69_set_bitratehh+0x20>)
    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
} 

void igh_rfm69_set_bitrate(uint8_t msb, uint8_t lsb)
{
   d5f7c:	460d      	mov	r5, r1
    igh_radio.writeReg(REG_BITRATEMSB, msb); 
   d5f7e:	4602      	mov	r2, r0
   d5f80:	2103      	movs	r1, #3
   d5f82:	4620      	mov	r0, r4
   d5f84:	f002 f97e 	bl	d8284 <_ZN5RFM698writeRegEhh>
    igh_radio.writeReg(REG_BITRATELSB, lsb);
   d5f88:	462a      	mov	r2, r5
   d5f8a:	4620      	mov	r0, r4
   d5f8c:	2104      	movs	r1, #4
}
   d5f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
} 

void igh_rfm69_set_bitrate(uint8_t msb, uint8_t lsb)
{
    igh_radio.writeReg(REG_BITRATEMSB, msb); 
    igh_radio.writeReg(REG_BITRATELSB, lsb);
   d5f92:	f002 b977 	b.w	d8284 <_ZN5RFM698writeRegEhh>
   d5f96:	bf00      	nop
   d5f98:	2003de48 	.word	0x2003de48

000d5f9c <_Z25igh_rfm69_set_power_levelh>:
}

void igh_rfm69_set_power_level(uint8_t pwrlvl)
{
    igh_radio.setPowerLevel(pwrlvl);
   d5f9c:	4601      	mov	r1, r0
   d5f9e:	4801      	ldr	r0, [pc, #4]	; (d5fa4 <_Z25igh_rfm69_set_power_levelh+0x8>)
   d5fa0:	f002 b982 	b.w	d82a8 <_ZN5RFM6913setPowerLevelEh>
   d5fa4:	2003de48 	.word	0x2003de48

000d5fa8 <_Z15igh_rfm69_resetv>:
}

void igh_rfm69_reset(void)
{
   d5fa8:	b508      	push	{r3, lr}
    digitalWrite(RFM69_RST, HIGH);
   d5faa:	2101      	movs	r1, #1
   d5fac:	2006      	movs	r0, #6
   d5fae:	f004 fdea 	bl	dab86 <digitalWrite>
    delay(100);
   d5fb2:	2064      	movs	r0, #100	; 0x64
   d5fb4:	f003 fd0e 	bl	d99d4 <delay>
    digitalWrite(RFM69_RST, LOW);
   d5fb8:	2006      	movs	r0, #6
   d5fba:	2100      	movs	r1, #0
   d5fbc:	f004 fde3 	bl	dab86 <digitalWrite>
    delay(100);
   d5fc0:	2064      	movs	r0, #100	; 0x64
}
   d5fc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void igh_rfm69_reset(void)
{
    digitalWrite(RFM69_RST, HIGH);
    delay(100);
    digitalWrite(RFM69_RST, LOW);
    delay(100);
   d5fc6:	f003 bd05 	b.w	d99d4 <delay>
	...

000d5fcc <_Z15igh_rfm69_setupv>:
uint8_t rfm69_powerlevel  = 10; // default power level, about 100M line of site

RFM69 igh_radio = RFM69(RFM69_CS, RFM69_IRQ, IS_RFM69HCW, RFM69_IRQN);

void igh_rfm69_setup(void)
{
   d5fcc:	b538      	push	{r3, r4, r5, lr}
    // first reset the module
    pinMode(RFM69_RST, OUTPUT);

    igh_rfm69_reset();
    
    if( false == igh_radio.initialize( FREQUENCY, RFM69_NODE_ID, RFM69_NETWORK_ID) )
   d5fce:	4c23      	ldr	r4, [pc, #140]	; (d605c <_Z15igh_rfm69_setupv+0x90>)
RFM69 igh_radio = RFM69(RFM69_CS, RFM69_IRQ, IS_RFM69HCW, RFM69_IRQN);

void igh_rfm69_setup(void)
{
    // first reset the module
    pinMode(RFM69_RST, OUTPUT);
   d5fd0:	2101      	movs	r1, #1
   d5fd2:	2006      	movs	r0, #6
   d5fd4:	f004 fdc6 	bl	dab64 <pinMode>

    igh_rfm69_reset();
   d5fd8:	f7ff ffe6 	bl	d5fa8 <_Z15igh_rfm69_resetv>
    
    if( false == igh_radio.initialize( FREQUENCY, RFM69_NODE_ID, RFM69_NETWORK_ID) )
   d5fdc:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5fe0:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   d5fe4:	481e      	ldr	r0, [pc, #120]	; (d6060 <_Z15igh_rfm69_setupv+0x94>)
   d5fe6:	215b      	movs	r1, #91	; 0x5b
   d5fe8:	f002 fb22 	bl	d8630 <_ZN5RFM6910initializeEhhh>
   d5fec:	b920      	cbnz	r0, d5ff8 <_Z15igh_rfm69_setupv+0x2c>
    Serial.println("RFM69 INIT ERROR");
   d5fee:	f003 ff91 	bl	d9f14 <_Z16_fetch_usbserialv>
   d5ff2:	491c      	ldr	r1, [pc, #112]	; (d6064 <_Z15igh_rfm69_setupv+0x98>)
   d5ff4:	f003 fa81 	bl	d94fa <_ZN5Print7printlnEPKc>

    Serial.print( "NEW SHIELD RF ID: " ); Serial.println( RFM69_NODE_ID);
   d5ff8:	f003 ff8c 	bl	d9f14 <_Z16_fetch_usbserialv>
   d5ffc:	491a      	ldr	r1, [pc, #104]	; (d6068 <_Z15igh_rfm69_setupv+0x9c>)
   d5ffe:	f003 fa69 	bl	d94d4 <_ZN5Print5printEPKc>
   d6002:	f003 ff87 	bl	d9f14 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6006:	220a      	movs	r2, #10
   d6008:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
   d600c:	4605      	mov	r5, r0
   d600e:	f003 fa7e 	bl	d950e <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d6012:	4628      	mov	r0, r5
   d6014:	f003 fa65 	bl	d94e2 <_ZN5Print7printlnEv>
    Serial.print( "NEW NETWORK ID: " ); Serial.println( RFM69_NETWORK_ID);
   d6018:	f003 ff7c 	bl	d9f14 <_Z16_fetch_usbserialv>
   d601c:	4913      	ldr	r1, [pc, #76]	; (d606c <_Z15igh_rfm69_setupv+0xa0>)
   d601e:	f003 fa59 	bl	d94d4 <_ZN5Print5printEPKc>
   d6022:	f003 ff77 	bl	d9f14 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6026:	220a      	movs	r2, #10
   d6028:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   d602c:	4605      	mov	r5, r0
   d602e:	f003 fa6e 	bl	d950e <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d6032:	4628      	mov	r0, r5
   d6034:	f003 fa55 	bl	d94e2 <_ZN5Print7printlnEv>

    igh_radio.setHighPower(); // This should only be called for RFM69HCW & HW
   d6038:	2101      	movs	r1, #1
   d603a:	4809      	ldr	r0, [pc, #36]	; (d6060 <_Z15igh_rfm69_setupv+0x94>)
   d603c:	f002 fa1e 	bl	d847c <_ZN5RFM6912setHighPowerEb>

    igh_rfm69_set_bitrate(RF_BITRATEMSB_9600, RF_BITRATELSB_9600); // set to 9.6Kbps
   d6040:	2105      	movs	r1, #5
   d6042:	200d      	movs	r0, #13
   d6044:	f7ff ff98 	bl	d5f78 <_Z21igh_rfm69_set_bitratehh>

    igh_rfm69_set_power_level(rfm69_powerlevel);
   d6048:	4b09      	ldr	r3, [pc, #36]	; (d6070 <_Z15igh_rfm69_setupv+0xa4>)
   d604a:	7818      	ldrb	r0, [r3, #0]
   d604c:	f7ff ffa6 	bl	d5f9c <_Z25igh_rfm69_set_power_levelh>

    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
   d6050:	4908      	ldr	r1, [pc, #32]	; (d6074 <_Z15igh_rfm69_setupv+0xa8>)
   d6052:	4803      	ldr	r0, [pc, #12]	; (d6060 <_Z15igh_rfm69_setupv+0x94>)
} 
   d6054:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    igh_rfm69_set_bitrate(RF_BITRATEMSB_9600, RF_BITRATELSB_9600); // set to 9.6Kbps

    igh_rfm69_set_power_level(rfm69_powerlevel);

    // configure the encrytion key, should be standard for all devices in the fleet
    igh_radio.encrypt(ENCRYPTKEY);
   d6058:	f002 babe 	b.w	d85d8 <_ZN5RFM697encryptEPKc>
   d605c:	2003e544 	.word	0x2003e544
   d6060:	2003de48 	.word	0x2003de48
   d6064:	000dd325 	.word	0x000dd325
   d6068:	000dd336 	.word	0x000dd336
   d606c:	000dd349 	.word	0x000dd349
   d6070:	2003d73f 	.word	0x2003d73f
   d6074:	000dd35a 	.word	0x000dd35a

000d6078 <_Z27igh_rfm69_receive_raw_bytesPhh>:
    }
    
}

uint8_t igh_rfm69_receive_raw_bytes( uint8_t *buffer, uint8_t len )
{
   d6078:	b570      	push	{r4, r5, r6, lr}
   d607a:	4605      	mov	r5, r0
    uint8_t rx_len = 0;
    if ( igh_radio.receiveDone() )
   d607c:	4809      	ldr	r0, [pc, #36]	; (d60a4 <_Z27igh_rfm69_receive_raw_bytesPhh+0x2c>)
    }
    
}

uint8_t igh_rfm69_receive_raw_bytes( uint8_t *buffer, uint8_t len )
{
   d607e:	460e      	mov	r6, r1
    uint8_t rx_len = 0;
    if ( igh_radio.receiveDone() )
   d6080:	f002 f9dc 	bl	d843c <_ZN5RFM6911receiveDoneEv>
   d6084:	b160      	cbz	r0, d60a0 <_Z27igh_rfm69_receive_raw_bytesPhh+0x28>
    {
        if( igh_radio.DATALEN <= len )
   d6086:	4c08      	ldr	r4, [pc, #32]	; (d60a8 <_Z27igh_rfm69_receive_raw_bytesPhh+0x30>)
   d6088:	7823      	ldrb	r3, [r4, #0]
   d608a:	42b3      	cmp	r3, r6
   d608c:	d807      	bhi.n	d609e <_Z27igh_rfm69_receive_raw_bytesPhh+0x26>
        {
            memcpy( buffer, (uint8_t *)igh_radio.DATA, igh_radio.DATALEN);
   d608e:	7822      	ldrb	r2, [r4, #0]
   d6090:	4906      	ldr	r1, [pc, #24]	; (d60ac <_Z27igh_rfm69_receive_raw_bytesPhh+0x34>)
   d6092:	4628      	mov	r0, r5
   d6094:	f005 fdf3 	bl	dbc7e <memcpy>
            rx_len = igh_radio.DATALEN;
   d6098:	7820      	ldrb	r0, [r4, #0]
   d609a:	b2c0      	uxtb	r0, r0
   d609c:	bd70      	pop	{r4, r5, r6, pc}
    
}

uint8_t igh_rfm69_receive_raw_bytes( uint8_t *buffer, uint8_t len )
{
    uint8_t rx_len = 0;
   d609e:	2000      	movs	r0, #0
            memcpy( buffer, (uint8_t *)igh_radio.DATA, igh_radio.DATALEN);
            rx_len = igh_radio.DATALEN;
        }
    }
    return rx_len;
}
   d60a0:	bd70      	pop	{r4, r5, r6, pc}
   d60a2:	bf00      	nop
   d60a4:	2003de48 	.word	0x2003de48
   d60a8:	2003debf 	.word	0x2003debf
   d60ac:	2003de82 	.word	0x2003de82

000d60b0 <_Z17igh_rfm69_servicev>:

void igh_rfm69_service( void )
{
   d60b0:	b510      	push	{r4, lr}
    // if new settings have been sent, re initialize the module
    if( true == initialize_rfm69 )
   d60b2:	4c04      	ldr	r4, [pc, #16]	; (d60c4 <_Z17igh_rfm69_servicev+0x14>)
   d60b4:	7823      	ldrb	r3, [r4, #0]
   d60b6:	2b01      	cmp	r3, #1
   d60b8:	d103      	bne.n	d60c2 <_Z17igh_rfm69_servicev+0x12>
    {
        igh_rfm69_setup();
   d60ba:	f7ff ff87 	bl	d5fcc <_Z15igh_rfm69_setupv>
        initialize_rfm69 = false;
   d60be:	2300      	movs	r3, #0
   d60c0:	7023      	strb	r3, [r4, #0]
   d60c2:	bd10      	pop	{r4, pc}
   d60c4:	2003d7fd 	.word	0x2003d7fd

000d60c8 <_GLOBAL__sub_I_NETWORKID>:
    }
   d60c8:	b508      	push	{r3, lr}
   d60ca:	f002 fbd5 	bl	d8878 <HAL_Pin_Map>
    static volatile byte ACK_REQUESTED;
    static volatile byte ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
    static volatile int RSSI; //most accurate RSSI during reception (closest to the reception)
    static volatile byte _mode; //should be protected?

    RFM69(byte slaveSelectPin=RF69_SPI_CS, byte interruptPin=RF69_IRQ_PIN, bool isRFM69HW=false, byte interruptNum=RF69_IRQ_NUM) {
   d60ce:	4b08      	ldr	r3, [pc, #32]	; (d60f0 <_GLOBAL__sub_I_NETWORKID+0x28>)
   d60d0:	4a08      	ldr	r2, [pc, #32]	; (d60f4 <_GLOBAL__sub_I_NETWORKID+0x2c>)
   d60d2:	601a      	str	r2, [r3, #0]
      _slaveSelectPin = slaveSelectPin;
   d60d4:	2211      	movs	r2, #17
      _interruptPin = interruptPin;
      _interruptNum = interruptNum;
      _mode = RF69_MODE_STANDBY;
   d60d6:	4908      	ldr	r1, [pc, #32]	; (d60f8 <_GLOBAL__sub_I_NETWORKID+0x30>)
    static volatile byte ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
    static volatile int RSSI; //most accurate RSSI during reception (closest to the reception)
    static volatile byte _mode; //should be protected?

    RFM69(byte slaveSelectPin=RF69_SPI_CS, byte interruptPin=RF69_IRQ_PIN, bool isRFM69HW=false, byte interruptNum=RF69_IRQ_NUM) {
      _slaveSelectPin = slaveSelectPin;
   d60d8:	711a      	strb	r2, [r3, #4]
      _interruptPin = interruptPin;
   d60da:	2208      	movs	r2, #8
   d60dc:	715a      	strb	r2, [r3, #5]
      _interruptNum = interruptNum;
   d60de:	719a      	strb	r2, [r3, #6]
      _mode = RF69_MODE_STANDBY;
   d60e0:	2201      	movs	r2, #1
   d60e2:	700a      	strb	r2, [r1, #0]
      _promiscuousMode = false;
   d60e4:	2100      	movs	r1, #0
   d60e6:	7219      	strb	r1, [r3, #8]
      _powerLevel = 31;
   d60e8:	211f      	movs	r1, #31
   d60ea:	7259      	strb	r1, [r3, #9]
      _isRFM69HW = isRFM69HW;
   d60ec:	729a      	strb	r2, [r3, #10]
   d60ee:	bd08      	pop	{r3, pc}
   d60f0:	2003de48 	.word	0x2003de48
   d60f4:	000dd394 	.word	0x000dd394
   d60f8:	2003dec0 	.word	0x2003dec0

000d60fc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d60fc:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d60fe:	6984      	ldr	r4, [r0, #24]
   d6100:	4b0a      	ldr	r3, [pc, #40]	; (d612c <_ZN9TCPClientD1Ev+0x30>)
   d6102:	6003      	str	r3, [r0, #0]
   d6104:	4605      	mov	r5, r0
   d6106:	b17c      	cbz	r4, d6128 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d6108:	6863      	ldr	r3, [r4, #4]
   d610a:	3b01      	subs	r3, #1
   d610c:	6063      	str	r3, [r4, #4]
   d610e:	b95b      	cbnz	r3, d6128 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d6110:	6823      	ldr	r3, [r4, #0]
   d6112:	4620      	mov	r0, r4
   d6114:	689b      	ldr	r3, [r3, #8]
   d6116:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6118:	68a3      	ldr	r3, [r4, #8]
   d611a:	3b01      	subs	r3, #1
   d611c:	60a3      	str	r3, [r4, #8]
   d611e:	b91b      	cbnz	r3, d6128 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d6120:	6823      	ldr	r3, [r4, #0]
   d6122:	4620      	mov	r0, r4
   d6124:	68db      	ldr	r3, [r3, #12]
   d6126:	4798      	blx	r3
   d6128:	4628      	mov	r0, r5
   d612a:	bd38      	pop	{r3, r4, r5, pc}
   d612c:	000dd644 	.word	0x000dd644

000d6130 <_ZN9TCPClientD0Ev>:
   d6130:	b510      	push	{r4, lr}
   d6132:	4604      	mov	r4, r0
   d6134:	f7ff ffe2 	bl	d60fc <_ZN9TCPClientD1Ev>
   d6138:	4620      	mov	r0, r4
   d613a:	211c      	movs	r1, #28
   d613c:	f004 fdf2 	bl	dad24 <_ZdlPvj>
   d6140:	4620      	mov	r0, r4
   d6142:	bd10      	pop	{r4, pc}

000d6144 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d6144:	b538      	push	{r3, r4, r5, lr}
   d6146:	461d      	mov	r5, r3
    this->callback = callback;
   d6148:	9b05      	ldr	r3, [sp, #20]
   d614a:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
   d614c:	2300      	movs	r3, #0

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d614e:	4604      	mov	r4, r0
    this->callback = callback;
    this->qoscallback = NULL;
   d6150:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
   d6152:	b102      	cbz	r2, d6156 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
   d6154:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
   d6156:	b119      	cbz	r1, d6160 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
   d6158:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d615c:	f003 f954 	bl	d9408 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   d6160:	9b04      	ldr	r3, [sp, #16]
   d6162:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d6164:	9b06      	ldr	r3, [sp, #24]
    if (buffer != NULL)
   d6166:	69e0      	ldr	r0, [r4, #28]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
   d6168:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d616c:	2bff      	cmp	r3, #255	; 0xff
   d616e:	bfb8      	it	lt
   d6170:	23ff      	movlt	r3, #255	; 0xff
   d6172:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   d6176:	b108      	cbz	r0, d617c <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
   d6178:	f7fd ff95 	bl	d40a6 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   d617c:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   d6180:	f7fd ff8d 	bl	d409e <_Znaj>
   d6184:	61e0      	str	r0, [r4, #28]
   d6186:	bd38      	pop	{r3, r4, r5, pc}

000d6188 <_ZN4MQTTC1EPctPFvS0_PhjE>:
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
   d6188:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d618c:	4604      	mov	r4, r0
   d618e:	2500      	movs	r5, #0
   d6190:	4617      	mov	r7, r2
   d6192:	4698      	mov	r8, r3
   d6194:	460e      	mov	r6, r1
   d6196:	f004 fbed 	bl	da974 <_ZN9TCPClientC1Ev>
   d619a:	61e5      	str	r5, [r4, #28]
   d619c:	490a      	ldr	r1, [pc, #40]	; (d61c8 <_ZN4MQTTC1EPctPFvS0_PhjE+0x40>)
   d619e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d61a2:	f003 f8ea 	bl	d937a <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
   d61a6:	23ff      	movs	r3, #255	; 0xff
   d61a8:	9302      	str	r3, [sp, #8]
   d61aa:	230f      	movs	r3, #15
   d61ac:	9300      	str	r3, [sp, #0]
   d61ae:	4620      	mov	r0, r4
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
   d61b0:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
   d61b2:	f8cd 8004 	str.w	r8, [sp, #4]
   d61b6:	463b      	mov	r3, r7
   d61b8:	462a      	mov	r2, r5
   d61ba:	4631      	mov	r1, r6
   d61bc:	f7ff ffc2 	bl	d6144 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
   d61c0:	4620      	mov	r0, r4
   d61c2:	b004      	add	sp, #16
   d61c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d61c8:	000dd486 	.word	0x000dd486

000d61cc <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   d61cc:	b510      	push	{r4, lr}
   d61ce:	4604      	mov	r4, r0
    while(!_client.available()) {}
   d61d0:	4620      	mov	r0, r4
   d61d2:	f004 fb33 	bl	da83c <_ZN9TCPClient9availableEv>
   d61d6:	2800      	cmp	r0, #0
   d61d8:	d0fa      	beq.n	d61d0 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   d61da:	4620      	mov	r0, r4
   d61dc:	f004 f9d7 	bl	da58e <_ZN9TCPClient4readEv>
}
   d61e0:	b2c0      	uxtb	r0, r0
   d61e2:	bd10      	pop	{r4, pc}

000d61e4 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d61e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d61e8:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
   d61ea:	69c4      	ldr	r4, [r0, #28]
uint8_t MQTT::readByte() {
    while(!_client.available()) {}
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d61ec:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   d61ee:	f7ff ffed 	bl	d61cc <_ZN4MQTT8readByteEv>
   d61f2:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d61f4:	69eb      	ldr	r3, [r5, #28]
   d61f6:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   d61fa:	f04f 0901 	mov.w	r9, #1
   d61fe:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   d6202:	2700      	movs	r7, #0
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
   d6204:	464e      	mov	r6, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   d6206:	4628      	mov	r0, r5
   d6208:	f7ff ffe0 	bl	d61cc <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   d620c:	69eb      	ldr	r3, [r5, #28]
   d620e:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   d6210:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   d6214:	fb13 f309 	smulbb	r3, r3, r9
   d6218:	441f      	add	r7, r3
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d621a:	1c74      	adds	r4, r6, #1
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
   d621c:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d621e:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   d6220:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   d6222:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   d6226:	d501      	bpl.n	d622c <_ZN4MQTT10readPacketEPh+0x48>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d6228:	4626      	mov	r6, r4
   d622a:	e7ec      	b.n	d6206 <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d622c:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   d622e:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d6232:	f888 3000 	strb.w	r3, [r8]

    if (isPublish) {
   d6236:	d113      	bne.n	d6260 <_ZN4MQTT10readPacketEPh+0x7c>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   d6238:	4628      	mov	r0, r5
   d623a:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d623e:	f7ff ffc5 	bl	d61cc <_ZN4MQTT8readByteEv>
   d6242:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
   d6246:	4628      	mov	r0, r5
   d6248:	1cf4      	adds	r4, r6, #3
   d624a:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d624e:	3602      	adds	r6, #2
   d6250:	f7ff ffbc 	bl	d61cc <_ZN4MQTT8readByteEv>
   d6254:	b2b6      	uxth	r6, r6
   d6256:	b2a4      	uxth	r4, r4
   d6258:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   d625c:	2302      	movs	r3, #2
   d625e:	e000      	b.n	d6262 <_ZN4MQTT10readPacketEPh+0x7e>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
   d6260:	2300      	movs	r3, #0
   d6262:	1b1b      	subs	r3, r3, r4
   d6264:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d6266:	19a3      	adds	r3, r4, r6
   d6268:	b29b      	uxth	r3, r3
   d626a:	429f      	cmp	r7, r3
   d626c:	d90b      	bls.n	d6286 <_ZN4MQTT10readPacketEPh+0xa2>
        digit = readByte();
   d626e:	4628      	mov	r0, r5
   d6270:	f7ff ffac 	bl	d61cc <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   d6274:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   d6278:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   d627a:	bf84      	itt	hi
   d627c:	69eb      	ldrhi	r3, [r5, #28]
   d627e:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   d6280:	3401      	adds	r4, #1
   d6282:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d6284:	e7ef      	b.n	d6266 <_ZN4MQTT10readPacketEPh+0x82>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
   d6286:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   d628a:	42a0      	cmp	r0, r4
   d628c:	bf2c      	ite	cs
   d628e:	4620      	movcs	r0, r4
   d6290:	2000      	movcc	r0, #0
   d6292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d6296 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d6296:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6298:	4607      	mov	r7, r0
   d629a:	468e      	mov	lr, r1
   d629c:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   d629e:	461d      	mov	r5, r3
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
   d62a0:	2400      	movs	r4, #0
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d62a2:	a902      	add	r1, sp, #8
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
   d62a4:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d62a8:	4421      	add	r1, r4
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
   d62aa:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
   d62ac:	bf18      	it	ne
   d62ae:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
   d62b2:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d62b4:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
   d62b8:	b2e4      	uxtb	r4, r4
    } while(len > 0);
   d62ba:	2d00      	cmp	r5, #0
   d62bc:	d1f1      	bne.n	d62a2 <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
   d62be:	f1c4 0304 	rsb	r3, r4, #4
   d62c2:	18d1      	adds	r1, r2, r3
   d62c4:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
   d62c8:	42a5      	cmp	r5, r4
   d62ca:	da06      	bge.n	d62da <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
   d62cc:	1b2b      	subs	r3, r5, r4
   d62ce:	a801      	add	r0, sp, #4
   d62d0:	4413      	add	r3, r2
   d62d2:	5c28      	ldrb	r0, [r5, r0]
   d62d4:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
   d62d6:	3501      	adds	r5, #1
   d62d8:	e7f6      	b.n	d62c8 <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   d62da:	1c72      	adds	r2, r6, #1
   d62dc:	4422      	add	r2, r4
   d62de:	4638      	mov	r0, r7
   d62e0:	f004 f8ab 	bl	da43a <_ZN9TCPClient5writeEPKhj>
   d62e4:	4605      	mov	r5, r0
   d62e6:	f002 fb8f 	bl	d8a08 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   d62ea:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
   d62ec:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   d62ee:	4434      	add	r4, r6
   d62f0:	b2a8      	uxth	r0, r5
}
   d62f2:	1a23      	subs	r3, r4, r0
   d62f4:	4258      	negs	r0, r3
   d62f6:	4158      	adcs	r0, r3
   d62f8:	b003      	add	sp, #12
   d62fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d62fc <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d62fc:	b510      	push	{r4, lr}
    buffer[0] = MQTTDISCONNECT;
   d62fe:	69c3      	ldr	r3, [r0, #28]
   d6300:	22e0      	movs	r2, #224	; 0xe0
   d6302:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   d6304:	69c3      	ldr	r3, [r0, #28]
   d6306:	2200      	movs	r2, #0
   d6308:	705a      	strb	r2, [r3, #1]
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d630a:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
    buffer[1] = 0;
    _client.write(buffer,2);
   d630c:	2202      	movs	r2, #2
   d630e:	69c1      	ldr	r1, [r0, #28]
   d6310:	f004 f893 	bl	da43a <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   d6314:	4620      	mov	r0, r4
   d6316:	f004 fa79 	bl	da80c <_ZN9TCPClient4stopEv>
   d631a:	f002 fb75 	bl	d8a08 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   d631e:	6260      	str	r0, [r4, #36]	; 0x24
   d6320:	62a0      	str	r0, [r4, #40]	; 0x28
   d6322:	bd10      	pop	{r4, pc}

000d6324 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d6324:	3302      	adds	r3, #2
    _client.write(buffer,2);
    _client.stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   d6326:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d6328:	b29b      	uxth	r3, r3
   d632a:	460d      	mov	r5, r1
   d632c:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
   d632e:	f815 6b01 	ldrb.w	r6, [r5], #1
   d6332:	b2a4      	uxth	r4, r4
   d6334:	b13e      	cbz	r6, d6346 <_ZN4MQTT11writeStringEPKcPht+0x22>
   d6336:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
   d633a:	429f      	cmp	r7, r3
   d633c:	d903      	bls.n	d6346 <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
   d633e:	1c5c      	adds	r4, r3, #1
   d6340:	54d6      	strb	r6, [r2, r3]
   d6342:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
   d6344:	e7f2      	b.n	d632c <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   d6346:	1b19      	subs	r1, r3, r4
   d6348:	440a      	add	r2, r1
   d634a:	1221      	asrs	r1, r4, #8
   d634c:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   d6350:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
   d6354:	4618      	mov	r0, r3
   d6356:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6358 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   d6358:	b538      	push	{r3, r4, r5, lr}
   d635a:	4605      	mov	r5, r0
    bool rc = (int)_client.connected();
   d635c:	f004 f883 	bl	da466 <_ZN9TCPClient9connectedEv>
   d6360:	2800      	cmp	r0, #0
   d6362:	bf14      	ite	ne
   d6364:	2401      	movne	r4, #1
   d6366:	2400      	moveq	r4, #0
    if (!rc) _client.stop();
   d6368:	d102      	bne.n	d6370 <_ZN4MQTT11isConnectedEv+0x18>
   d636a:	4628      	mov	r0, r5
   d636c:	f004 fa4e 	bl	da80c <_ZN9TCPClient4stopEv>
    return rc;
}
   d6370:	4620      	mov	r0, r4
   d6372:	bd38      	pop	{r3, r4, r5, pc}

000d6374 <_ZN4MQTT9setBrokerEPct>:
    if (buffer != NULL)
      delete[] buffer;
    buffer = new uint8_t[this->maxpacketsize];
}

void MQTT::setBroker(char* domain, uint16_t port) {
   d6374:	b570      	push	{r4, r5, r6, lr}
   d6376:	4604      	mov	r4, r0
   d6378:	460e      	mov	r6, r1
   d637a:	4615      	mov	r5, r2
    if(isConnected()) {
   d637c:	f7ff ffec 	bl	d6358 <_ZN4MQTT11isConnectedEv>
   d6380:	b110      	cbz	r0, d6388 <_ZN4MQTT9setBrokerEPct+0x14>
        disconnect();
   d6382:	4620      	mov	r0, r4
   d6384:	f7ff ffba 	bl	d62fc <_ZN4MQTT10disconnectEv>
    }
    this->domain = domain;
   d6388:	4631      	mov	r1, r6
   d638a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d638e:	f003 f83b 	bl	d9408 <_ZN6StringaSEPKc>
    this->ip = NULL;
   d6392:	2300      	movs	r3, #0
   d6394:	64a3      	str	r3, [r4, #72]	; 0x48
    this->port = port;
   d6396:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
   d639a:	bd70      	pop	{r4, r5, r6, pc}

000d639c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char *user, const char *pass) {
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   d639c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d63a0:	b087      	sub	sp, #28
   d63a2:	4604      	mov	r4, r0
   d63a4:	4689      	mov	r9, r1
   d63a6:	4617      	mov	r7, r2
   d63a8:	461e      	mov	r6, r3
   d63aa:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if (!isConnected()) {
   d63ae:	f7ff ffd3 	bl	d6358 <_ZN4MQTT11isConnectedEv>
   d63b2:	4605      	mov	r5, r0
   d63b4:	2800      	cmp	r0, #0
   d63b6:	f040 80bd 	bne.w	d6534 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x198>
        int result = 0;
        if (ip == NULL)
   d63ba:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d63bc:	b939      	cbnz	r1, d63ce <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x32>
            result = _client.connect(this->domain.c_str(), this->port);
   d63be:	4603      	mov	r3, r0
   d63c0:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d63c4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d63c6:	4620      	mov	r0, r4
   d63c8:	f004 f924 	bl	da614 <_ZN9TCPClient7connectEPKctm>
   d63cc:	e009      	b.n	d63e2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x46>
        else
            result = _client.connect(this->ip, this->port);
   d63ce:	4668      	mov	r0, sp
   d63d0:	f003 fd34 	bl	d9e3c <_ZN9IPAddressC1EPKh>
   d63d4:	462b      	mov	r3, r5
   d63d6:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d63da:	4669      	mov	r1, sp
   d63dc:	4620      	mov	r0, r4
   d63de:	f004 f99b 	bl	da718 <_ZN9TCPClient7connectE9IPAddresstm>

        if (result) {
   d63e2:	2800      	cmp	r0, #0
   d63e4:	f000 80a2 	beq.w	d652c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
            nextMsgId = 1;
   d63e8:	2301      	movs	r3, #1
   d63ea:	8423      	strh	r3, [r4, #32]
            uint16_t length = 5;

            if (version == MQTT_V311) {
   d63ec:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
   d63f0:	2b04      	cmp	r3, #4
   d63f2:	d115      	bne.n	d6420 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x84>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d63f4:	4b52      	ldr	r3, [pc, #328]	; (d6540 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a4>)
   d63f6:	6818      	ldr	r0, [r3, #0]
   d63f8:	889a      	ldrh	r2, [r3, #4]
   d63fa:	f8ad 2004 	strh.w	r2, [sp, #4]
   d63fe:	9000      	str	r0, [sp, #0]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d6400:	69e2      	ldr	r2, [r4, #28]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d6402:	799b      	ldrb	r3, [r3, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d6404:	9800      	ldr	r0, [sp, #0]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d6406:	f88d 3006 	strb.w	r3, [sp, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d640a:	1d53      	adds	r3, r2, #5
   d640c:	f8c2 0005 	str.w	r0, [r2, #5]
   d6410:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   d6414:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d6418:	719a      	strb	r2, [r3, #6]
   d641a:	8099      	strh	r1, [r3, #4]
                length+=sizeof(MQTT_HEADER_V311);
   d641c:	230c      	movs	r3, #12
   d641e:	e012      	b.n	d6446 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d6420:	4b48      	ldr	r3, [pc, #288]	; (d6544 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>)
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d6422:	f8d4 c01c 	ldr.w	ip, [r4, #28]
            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d6426:	6818      	ldr	r0, [r3, #0]
   d6428:	6859      	ldr	r1, [r3, #4]
   d642a:	7a1b      	ldrb	r3, [r3, #8]
   d642c:	466a      	mov	r2, sp
   d642e:	c203      	stmia	r2!, {r0, r1}
   d6430:	7013      	strb	r3, [r2, #0]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d6432:	466b      	mov	r3, sp
   d6434:	cb03      	ldmia	r3!, {r0, r1}
   d6436:	f8cc 0005 	str.w	r0, [ip, #5]
   d643a:	f8cc 1009 	str.w	r1, [ip, #9]
   d643e:	7813      	ldrb	r3, [r2, #0]
   d6440:	f88c 300d 	strb.w	r3, [ip, #13]
                length+=sizeof(MQTT_HEADER_V31);
   d6444:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
   d6446:	f1b8 0f00 	cmp.w	r8, #0
   d644a:	d00a      	beq.n	d6462 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc6>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   d644c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   d6450:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   d6454:	0152      	lsls	r2, r2, #5
   d6456:	f042 0206 	orr.w	r2, r2, #6
   d645a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
   d645e:	b2d2      	uxtb	r2, r2
   d6460:	e000      	b.n	d6464 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc8>
            } else {
                v = 0x02;
   d6462:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
   d6464:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
   d6468:	b909      	cbnz	r1, d646e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xd2>
              v = v&0xfd;
   d646a:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
   d646e:	b12f      	cbz	r7, d647c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>
                v = v|0x80;

                if(pass != NULL) {
   d6470:	b916      	cbnz	r6, d6478 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
   d6472:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   d6476:	e001      	b.n	d647c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>

                if(pass != NULL) {
                    v = v|(0x80>>1);
   d6478:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
   d647c:	69e1      	ldr	r1, [r4, #28]
   d647e:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
   d6480:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d6482:	69e1      	ldr	r1, [r4, #28]
   d6484:	1c58      	adds	r0, r3, #1
   d6486:	1212      	asrs	r2, r2, #8
   d6488:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   d648a:	1c9a      	adds	r2, r3, #2
   d648c:	69e1      	ldr	r1, [r4, #28]
   d648e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d6490:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   d6492:	3303      	adds	r3, #3
   d6494:	69e2      	ldr	r2, [r4, #28]
   d6496:	4649      	mov	r1, r9
   d6498:	4620      	mov	r0, r4
   d649a:	f7ff ff43 	bl	d6324 <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
   d649e:	f1b8 0f00 	cmp.w	r8, #0
   d64a2:	d00b      	beq.n	d64bc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
                length = writeString(willTopic, buffer, length);
   d64a4:	4603      	mov	r3, r0
   d64a6:	69e2      	ldr	r2, [r4, #28]
   d64a8:	4641      	mov	r1, r8
   d64aa:	4620      	mov	r0, r4
   d64ac:	f7ff ff3a 	bl	d6324 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   d64b0:	69e2      	ldr	r2, [r4, #28]
   d64b2:	9911      	ldr	r1, [sp, #68]	; 0x44
   d64b4:	4603      	mov	r3, r0
   d64b6:	4620      	mov	r0, r4
   d64b8:	f7ff ff34 	bl	d6324 <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
   d64bc:	b167      	cbz	r7, d64d8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                length = writeString(user,buffer,length);
   d64be:	4603      	mov	r3, r0
   d64c0:	69e2      	ldr	r2, [r4, #28]
   d64c2:	4639      	mov	r1, r7
   d64c4:	4620      	mov	r0, r4
   d64c6:	f7ff ff2d 	bl	d6324 <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
   d64ca:	b12e      	cbz	r6, d64d8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                    length = writeString(pass,buffer,length);
   d64cc:	4603      	mov	r3, r0
   d64ce:	69e2      	ldr	r2, [r4, #28]
   d64d0:	4631      	mov	r1, r6
   d64d2:	4620      	mov	r0, r4
   d64d4:	f7ff ff26 	bl	d6324 <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
   d64d8:	1f43      	subs	r3, r0, #5
   d64da:	b29b      	uxth	r3, r3
   d64dc:	69e2      	ldr	r2, [r4, #28]
   d64de:	2110      	movs	r1, #16
   d64e0:	4620      	mov	r0, r4
   d64e2:	f7ff fed8 	bl	d6296 <_ZN4MQTT5writeEhPht>
   d64e6:	f002 fa8f 	bl	d8a08 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!_client.available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d64ea:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
   d64ee:	6260      	str	r0, [r4, #36]	; 0x24
   d64f0:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!_client.available()) {
   d64f2:	4620      	mov	r0, r4
   d64f4:	f004 f9a2 	bl	da83c <_ZN9TCPClient9availableEv>
   d64f8:	b940      	cbnz	r0, d650c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x170>
   d64fa:	f002 fa85 	bl	d8a08 <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d64fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d6500:	1ac0      	subs	r0, r0, r3
   d6502:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d6504:	4373      	muls	r3, r6
   d6506:	4298      	cmp	r0, r3
   d6508:	d9f3      	bls.n	d64f2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
   d650a:	e00f      	b.n	d652c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                    _client.stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d650c:	4669      	mov	r1, sp
   d650e:	4620      	mov	r0, r4
   d6510:	f7ff fe68 	bl	d61e4 <_ZN4MQTT10readPacketEPh>

            if (len == 4) {
   d6514:	2804      	cmp	r0, #4
   d6516:	d109      	bne.n	d652c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                if (buffer[3] == CONN_ACCEPT) {
   d6518:	69e3      	ldr	r3, [r4, #28]
   d651a:	78de      	ldrb	r6, [r3, #3]
   d651c:	b936      	cbnz	r6, d652c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
   d651e:	f002 fa73 	bl	d8a08 <HAL_Timer_Get_Milli_Seconds>
                    lastInActivity = millis();
                    pingOutstanding = false;
                    debug_print(" Connect success\n");
                    return true;
   d6522:	2501      	movs	r5, #1
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == CONN_ACCEPT) {
                    lastInActivity = millis();
   d6524:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   d6526:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
   d652a:	e004      	b.n	d6536 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
                    // check EMQTT_CONNACK_RESPONSE code.
                    debug_print(" Connect fail. code = [%d]\n", buffer[3]);
                }
            }
        }
        _client.stop();
   d652c:	4620      	mov	r0, r4
   d652e:	f004 f96d 	bl	da80c <_ZN9TCPClient4stopEv>
   d6532:	e000      	b.n	d6536 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
    }
    return false;
   d6534:	2500      	movs	r5, #0
}
   d6536:	4628      	mov	r0, r5
   d6538:	b007      	add	sp, #28
   d653a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d653e:	bf00      	nop
   d6540:	000dd37c 	.word	0x000dd37c
   d6544:	000dd383 	.word	0x000dd383

000d6548 <_ZN4MQTT7connectEPKc>:
void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}


bool MQTT::connect(const char *id) {
   d6548:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   d654a:	2304      	movs	r3, #4
   d654c:	9305      	str	r3, [sp, #20]
   d654e:	2301      	movs	r3, #1
   d6550:	9304      	str	r3, [sp, #16]
   d6552:	2300      	movs	r3, #0
   d6554:	9303      	str	r3, [sp, #12]
   d6556:	9302      	str	r3, [sp, #8]
   d6558:	9301      	str	r3, [sp, #4]
   d655a:	9300      	str	r3, [sp, #0]
   d655c:	461a      	mov	r2, r3
   d655e:	f7ff ff1d 	bl	d639c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   d6562:	b007      	add	sp, #28
   d6564:	f85d fb04 	ldr.w	pc, [sp], #4

000d6568 <_ZN4MQTT7connectEPKcS1_S1_>:

bool MQTT::connect(const char *id, const char *user, const char *pass) {
   d6568:	b510      	push	{r4, lr}
   d656a:	b086      	sub	sp, #24
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   d656c:	2404      	movs	r4, #4
   d656e:	9405      	str	r4, [sp, #20]
   d6570:	2401      	movs	r4, #1
   d6572:	9404      	str	r4, [sp, #16]
   d6574:	2400      	movs	r4, #0
   d6576:	9403      	str	r4, [sp, #12]
   d6578:	9402      	str	r4, [sp, #8]
   d657a:	9401      	str	r4, [sp, #4]
   d657c:	9400      	str	r4, [sp, #0]
   d657e:	f7ff ff0d 	bl	d639c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   d6582:	b006      	add	sp, #24
   d6584:	bd10      	pop	{r4, pc}

000d6586 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d6586:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d658a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   d658c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d6590:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d6594:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
   d6598:	4604      	mov	r4, r0
   d659a:	468b      	mov	fp, r1
   d659c:	4691      	mov	r9, r2
   d659e:	469a      	mov	sl, r3
    if (isConnected()) {
   d65a0:	f7ff feda 	bl	d6358 <_ZN4MQTT11isConnectedEv>
   d65a4:	2800      	cmp	r0, #0
   d65a6:	d04c      	beq.n	d6642 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xbc>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, this->maxpacketsize);
   d65a8:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   d65ac:	69e0      	ldr	r0, [r4, #28]
   d65ae:	2100      	movs	r1, #0
   d65b0:	f005 fb70 	bl	dbc94 <memset>

        length = writeString(topic, buffer, length);
   d65b4:	2305      	movs	r3, #5
   d65b6:	69e2      	ldr	r2, [r4, #28]
   d65b8:	4659      	mov	r1, fp
   d65ba:	4620      	mov	r0, r4
   d65bc:	f7ff feb2 	bl	d6324 <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
   d65c0:	1e6b      	subs	r3, r5, #1
   d65c2:	2b01      	cmp	r3, #1
   d65c4:	d812      	bhi.n	d65ec <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
            nextMsgId += 1;
   d65c6:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d65c8:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, this->maxpacketsize);

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
   d65ca:	3301      	adds	r3, #1
   d65cc:	b29b      	uxth	r3, r3
   d65ce:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d65d0:	121b      	asrs	r3, r3, #8
   d65d2:	5413      	strb	r3, [r2, r0]
   d65d4:	1c41      	adds	r1, r0, #1
   d65d6:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
   d65d8:	69e3      	ldr	r3, [r4, #28]
   d65da:	8c22      	ldrh	r2, [r4, #32]
   d65dc:	545a      	strb	r2, [r3, r1]
   d65de:	3002      	adds	r0, #2
   d65e0:	b280      	uxth	r0, r0
            if (messageid != NULL)
   d65e2:	b11e      	cbz	r6, d65ec <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
                *messageid = nextMsgId++;
   d65e4:	8c23      	ldrh	r3, [r4, #32]
   d65e6:	1c5a      	adds	r2, r3, #1
   d65e8:	8422      	strh	r2, [r4, #32]
   d65ea:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d65ec:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d65ee:	b291      	uxth	r1, r2
   d65f0:	1883      	adds	r3, r0, r2
   d65f2:	458a      	cmp	sl, r1
   d65f4:	b29b      	uxth	r3, r3
   d65f6:	d90a      	bls.n	d660e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
   d65f8:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
   d65fc:	429e      	cmp	r6, r3
   d65fe:	f102 0201 	add.w	r2, r2, #1
   d6602:	d904      	bls.n	d660e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
            buffer[length++] = payload[i];
   d6604:	f819 6001 	ldrb.w	r6, [r9, r1]
   d6608:	69e1      	ldr	r1, [r4, #28]
   d660a:	54ce      	strb	r6, [r1, r3]
   d660c:	e7ef      	b.n	d65ee <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x68>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
   d660e:	f1b8 0f00 	cmp.w	r8, #0
   d6612:	bf0c      	ite	eq
   d6614:	2130      	moveq	r1, #48	; 0x30
   d6616:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
   d6618:	b10f      	cbz	r7, d661e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x98>
            header |= DUP_FLAG_ON_MASK;
   d661a:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
   d661e:	2d02      	cmp	r5, #2
   d6620:	d102      	bne.n	d6628 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa2>
            header |= MQTTQOS2_HEADER_MASK;
   d6622:	f041 0104 	orr.w	r1, r1, #4
   d6626:	e003      	b.n	d6630 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xaa>
        else if (qos == QOS1)
   d6628:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   d662a:	bf08      	it	eq
   d662c:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d6630:	3b05      	subs	r3, #5
   d6632:	69e2      	ldr	r2, [r4, #28]
   d6634:	b29b      	uxth	r3, r3
   d6636:	4620      	mov	r0, r4
    }
    return false;
}
   d6638:	b001      	add	sp, #4
   d663a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d663e:	f7ff be2a 	b.w	d6296 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d6642:	b001      	add	sp, #4
   d6644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6648 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   d6648:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   d664a:	9c08      	ldr	r4, [sp, #32]
   d664c:	9403      	str	r4, [sp, #12]
   d664e:	2400      	movs	r4, #0
   d6650:	9402      	str	r4, [sp, #8]
   d6652:	f89d 401c 	ldrb.w	r4, [sp, #28]
   d6656:	9401      	str	r4, [sp, #4]
   d6658:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d665c:	9400      	str	r4, [sp, #0]
   d665e:	f7ff ff92 	bl	d6586 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   d6662:	b004      	add	sp, #16
   d6664:	bd10      	pop	{r4, pc}

000d6666 <_ZN4MQTT7publishEPKcPKhj>:

bool MQTT::publish(const char * topic, const char* payload, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, (uint8_t*)payload, strlen(payload), false, qos, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength) {
   d6666:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, false, QOS0, NULL);
   d6668:	2400      	movs	r4, #0
   d666a:	9402      	str	r4, [sp, #8]
   d666c:	9401      	str	r4, [sp, #4]
   d666e:	9400      	str	r4, [sp, #0]
   d6670:	f7ff ffea 	bl	d6648 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   d6674:	b004      	add	sp, #16
   d6676:	bd10      	pop	{r4, pc}

000d6678 <_ZN4MQTT14publishReleaseEt>:
        return write(header, buffer, length-5);
    }
    return false;
}

bool MQTT::publishRelease(uint16_t messageid) {
   d6678:	b538      	push	{r3, r4, r5, lr}
   d667a:	4604      	mov	r4, r0
   d667c:	460d      	mov	r5, r1
    if (isConnected()) {
   d667e:	f7ff fe6b 	bl	d6358 <_ZN4MQTT11isConnectedEv>
   d6682:	b190      	cbz	r0, d66aa <_ZN4MQTT14publishReleaseEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   d6684:	69e3      	ldr	r3, [r4, #28]
   d6686:	2262      	movs	r2, #98	; 0x62
   d6688:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d668a:	69e3      	ldr	r3, [r4, #28]
   d668c:	2202      	movs	r2, #2
   d668e:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d6690:	69e3      	ldr	r3, [r4, #28]
   d6692:	122a      	asrs	r2, r5, #8
   d6694:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d6696:	69e3      	ldr	r3, [r4, #28]
   d6698:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
   d669a:	2204      	movs	r2, #4
   d669c:	69e1      	ldr	r1, [r4, #28]
   d669e:	4620      	mov	r0, r4
   d66a0:	f003 fecb 	bl	da43a <_ZN9TCPClient5writeEPKhj>
   d66a4:	3000      	adds	r0, #0
   d66a6:	bf18      	it	ne
   d66a8:	2001      	movne	r0, #1
    }
    return false;
}
   d66aa:	bd38      	pop	{r3, r4, r5, pc}

000d66ac <_ZN4MQTT15publishCompleteEt>:

bool MQTT::publishComplete(uint16_t messageid) {
   d66ac:	b538      	push	{r3, r4, r5, lr}
   d66ae:	4604      	mov	r4, r0
   d66b0:	460d      	mov	r5, r1
    if (isConnected()) {
   d66b2:	f7ff fe51 	bl	d6358 <_ZN4MQTT11isConnectedEv>
   d66b6:	b190      	cbz	r0, d66de <_ZN4MQTT15publishCompleteEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   d66b8:	69e3      	ldr	r3, [r4, #28]
   d66ba:	2272      	movs	r2, #114	; 0x72
   d66bc:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d66be:	69e3      	ldr	r3, [r4, #28]
   d66c0:	2202      	movs	r2, #2
   d66c2:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d66c4:	69e3      	ldr	r3, [r4, #28]
   d66c6:	122a      	asrs	r2, r5, #8
   d66c8:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d66ca:	69e3      	ldr	r3, [r4, #28]
   d66cc:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
   d66ce:	2204      	movs	r2, #4
   d66d0:	69e1      	ldr	r1, [r4, #28]
   d66d2:	4620      	mov	r0, r4
   d66d4:	f003 feb1 	bl	da43a <_ZN9TCPClient5writeEPKhj>
   d66d8:	3000      	adds	r0, #0
   d66da:	bf18      	it	ne
   d66dc:	2001      	movne	r0, #1
    }
    return false;
}
   d66de:	bd38      	pop	{r3, r4, r5, pc}

000d66e0 <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
   d66e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d66e4:	b083      	sub	sp, #12
   d66e6:	af00      	add	r7, sp, #0
   d66e8:	4604      	mov	r4, r0
    if (isConnected()) {
   d66ea:	f7ff fe35 	bl	d6358 <_ZN4MQTT11isConnectedEv>
   d66ee:	4681      	mov	r9, r0
   d66f0:	2800      	cmp	r0, #0
   d66f2:	f000 80f6 	beq.w	d68e2 <_ZN4MQTT4loopEv+0x202>
   d66f6:	f002 f987 	bl	d8a08 <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   d66fa:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d66fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6700:	4353      	muls	r3, r2
   d6702:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   d6704:	1a82      	subs	r2, r0, r2
   d6706:	429a      	cmp	r2, r3
   d6708:	4605      	mov	r5, r0
   d670a:	d803      	bhi.n	d6714 <_ZN4MQTT4loopEv+0x34>
   d670c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d670e:	1a82      	subs	r2, r0, r2
   d6710:	4293      	cmp	r3, r2
   d6712:	d217      	bcs.n	d6744 <_ZN4MQTT4loopEv+0x64>
            if (pingOutstanding) {
   d6714:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d6718:	b12b      	cbz	r3, d6726 <_ZN4MQTT4loopEv+0x46>
                _client.stop();
   d671a:	4620      	mov	r0, r4
   d671c:	f004 f876 	bl	da80c <_ZN9TCPClient4stopEv>
                return false;
   d6720:	f04f 0900 	mov.w	r9, #0
   d6724:	e0dd      	b.n	d68e2 <_ZN4MQTT4loopEv+0x202>
            } else {
                buffer[0] = MQTTPINGREQ;
   d6726:	69e2      	ldr	r2, [r4, #28]
   d6728:	21c0      	movs	r1, #192	; 0xc0
   d672a:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   d672c:	69e2      	ldr	r2, [r4, #28]
   d672e:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   d6730:	69e1      	ldr	r1, [r4, #28]
   d6732:	2202      	movs	r2, #2
   d6734:	4620      	mov	r0, r4
   d6736:	f003 fe80 	bl	da43a <_ZN9TCPClient5writeEPKhj>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
   d673a:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                _client.write(buffer,2);
                lastOutActivity = t;
   d673c:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
   d673e:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
   d6740:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (_client.available()) {
   d6744:	4620      	mov	r0, r4
   d6746:	f004 f879 	bl	da83c <_ZN9TCPClient9availableEv>
   d674a:	2800      	cmp	r0, #0
   d674c:	f000 80c9 	beq.w	d68e2 <_ZN4MQTT4loopEv+0x202>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d6750:	1df9      	adds	r1, r7, #7
   d6752:	4620      	mov	r0, r4
   d6754:	f7ff fd46 	bl	d61e4 <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
   d6758:	4602      	mov	r2, r0
   d675a:	2800      	cmp	r0, #0
   d675c:	f000 80c1 	beq.w	d68e2 <_ZN4MQTT4loopEv+0x202>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
   d6760:	69e3      	ldr	r3, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
   d6762:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   d6764:	7818      	ldrb	r0, [r3, #0]
   d6766:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   d676a:	2930      	cmp	r1, #48	; 0x30
   d676c:	d17d      	bne.n	d686a <_ZN4MQTT4loopEv+0x18a>
                    if (callback) {
   d676e:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
   d6772:	f1bb 0f00 	cmp.w	fp, #0
   d6776:	f000 80b4 	beq.w	d68e2 <_ZN4MQTT4loopEv+0x202>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d677a:	f897 c007 	ldrb.w	ip, [r7, #7]
   d677e:	eb03 000c 	add.w	r0, r3, ip
              							_client.write(buffer, 4);
              							lastOutActivity = t;
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
   d6782:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d6784:	7881      	ldrb	r1, [r0, #2]
   d6786:	f890 e001 	ldrb.w	lr, [r0, #1]
   d678a:	eb01 2e0e 	add.w	lr, r1, lr, lsl #8
   d678e:	fa1f fe8e 	uxth.w	lr, lr
                        char topic[tl+1];
   d6792:	f10e 0108 	add.w	r1, lr, #8
   d6796:	f021 0107 	bic.w	r1, r1, #7
   d679a:	ebad 0d01 	sub.w	sp, sp, r1
   d679e:	4668      	mov	r0, sp
   d67a0:	2100      	movs	r1, #0
                        for (uint16_t i=0;i<tl;i++) {
   d67a2:	b28e      	uxth	r6, r1
   d67a4:	45b6      	cmp	lr, r6
   d67a6:	d906      	bls.n	d67b6 <_ZN4MQTT4loopEv+0xd6>
                            topic[i] = buffer[llen+3+i];
   d67a8:	eb0c 0601 	add.w	r6, ip, r1
   d67ac:	441e      	add	r6, r3
   d67ae:	78f6      	ldrb	r6, [r6, #3]
   d67b0:	5446      	strb	r6, [r0, r1]
   d67b2:	3101      	adds	r1, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
   d67b4:	e7f5      	b.n	d67a2 <_ZN4MQTT4loopEv+0xc2>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
   d67b6:	2100      	movs	r1, #0
   d67b8:	f800 100e 	strb.w	r1, [r0, lr]
   d67bc:	781e      	ldrb	r6, [r3, #0]
   d67be:	f006 0606 	and.w	r6, r6, #6
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d67c2:	2e02      	cmp	r6, #2
   d67c4:	f10c 0103 	add.w	r1, ip, #3
   d67c8:	ebcc 0202 	rsb	r2, ip, r2
   d67cc:	d11e      	bne.n	d680c <_ZN4MQTT4loopEv+0x12c>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d67ce:	4471      	add	r1, lr
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d67d0:	ebce 0202 	rsb	r2, lr, r2
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d67d4:	f813 8001 	ldrb.w	r8, [r3, r1]
   d67d8:	4419      	add	r1, r3
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d67da:	3a05      	subs	r2, #5
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d67dc:	7849      	ldrb	r1, [r1, #1]
   d67de:	eb01 2808 	add.w	r8, r1, r8, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d67e2:	f10c 0105 	add.w	r1, ip, #5
   d67e6:	4471      	add	r1, lr
   d67e8:	4419      	add	r1, r3
   d67ea:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   d67ec:	69e3      	ldr	r3, [r4, #28]
   d67ee:	2240      	movs	r2, #64	; 0x40
   d67f0:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   d67f2:	69e3      	ldr	r3, [r4, #28]
   d67f4:	705e      	strb	r6, [r3, #1]
                            buffer[2] = (msgId >> 8);
   d67f6:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d67f8:	fa1f f888 	uxth.w	r8, r8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
   d67fc:	ea4f 2228 	mov.w	r2, r8, asr #8
   d6800:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   d6802:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
   d6804:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
   d6806:	f883 8003 	strb.w	r8, [r3, #3]
   d680a:	e020      	b.n	d684e <_ZN4MQTT4loopEv+0x16e>
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   d680c:	2e04      	cmp	r6, #4
   d680e:	d124      	bne.n	d685a <_ZN4MQTT4loopEv+0x17a>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d6810:	4471      	add	r1, lr
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d6812:	ebce 0202 	rsb	r2, lr, r2
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d6816:	f813 8001 	ldrb.w	r8, [r3, r1]
   d681a:	4419      	add	r1, r3
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d681c:	3a05      	subs	r2, #5
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d681e:	7849      	ldrb	r1, [r1, #1]
   d6820:	eb01 2808 	add.w	r8, r1, r8, lsl #8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d6824:	f10c 0105 	add.w	r1, ip, #5
   d6828:	4471      	add	r1, lr
   d682a:	4419      	add	r1, r3
   d682c:	47d8      	blx	fp

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
   d682e:	69e3      	ldr	r3, [r4, #28]
   d6830:	2250      	movs	r2, #80	; 0x50
   d6832:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
   d6834:	69e3      	ldr	r3, [r4, #28]
   d6836:	2202      	movs	r2, #2
   d6838:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
   d683a:	69e3      	ldr	r3, [r4, #28]
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d683c:	fa1f f888 	uxth.w	r8, r8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
   d6840:	ea4f 2228 	mov.w	r2, r8, asr #8
   d6844:	709a      	strb	r2, [r3, #2]
              							buffer[3] = (msgId & 0xFF);
   d6846:	69e3      	ldr	r3, [r4, #28]
              							_client.write(buffer, 4);
   d6848:	4632      	mov	r2, r6
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
              							buffer[3] = (msgId & 0xFF);
   d684a:	f883 8003 	strb.w	r8, [r3, #3]
              							_client.write(buffer, 4);
   d684e:	69e1      	ldr	r1, [r4, #28]
   d6850:	4620      	mov	r0, r4
   d6852:	f003 fdf2 	bl	da43a <_ZN9TCPClient5writeEPKhj>
              							lastOutActivity = t;
   d6856:	6265      	str	r5, [r4, #36]	; 0x24
   d6858:	e005      	b.n	d6866 <_ZN4MQTT4loopEv+0x186>
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
   d685a:	3a03      	subs	r2, #3
   d685c:	4471      	add	r1, lr
   d685e:	ebce 0202 	rsb	r2, lr, r2
   d6862:	4419      	add	r1, r3
   d6864:	47d8      	blx	fp
   d6866:	46d5      	mov	sp, sl
   d6868:	e03b      	b.n	d68e2 <_ZN4MQTT4loopEv+0x202>
                        }
                    }
                } else if (type == MQTTPUBREC) {
   d686a:	2950      	cmp	r1, #80	; 0x50
   d686c:	d108      	bne.n	d6880 <_ZN4MQTT4loopEv+0x1a0>
                    // check for the situation that QoS2 receive PUBREC, should return PUBREL
                    msgId = (buffer[2] << 8) + buffer[3];
                    this->publishRelease(msgId);
   d686e:	7899      	ldrb	r1, [r3, #2]
   d6870:	78db      	ldrb	r3, [r3, #3]
   d6872:	eb03 2101 	add.w	r1, r3, r1, lsl #8
   d6876:	b289      	uxth	r1, r1
   d6878:	4620      	mov	r0, r4
   d687a:	f7ff fefd 	bl	d6678 <_ZN4MQTT14publishReleaseEt>
   d687e:	e030      	b.n	d68e2 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBACK) {
   d6880:	2940      	cmp	r1, #64	; 0x40
   d6882:	d00c      	beq.n	d689e <_ZN4MQTT4loopEv+0x1be>
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
                        }
                    }
                } else if (type == MQTTPUBREL) {
   d6884:	2960      	cmp	r1, #96	; 0x60
   d6886:	d108      	bne.n	d689a <_ZN4MQTT4loopEv+0x1ba>
                  msgId = (buffer[2] << 8) + buffer[3];
                  this->publishComplete(msgId);
   d6888:	7899      	ldrb	r1, [r3, #2]
   d688a:	78db      	ldrb	r3, [r3, #3]
   d688c:	eb03 2101 	add.w	r1, r3, r1, lsl #8
   d6890:	b289      	uxth	r1, r1
   d6892:	4620      	mov	r0, r4
   d6894:	f7ff ff0a 	bl	d66ac <_ZN4MQTT15publishCompleteEt>
   d6898:	e023      	b.n	d68e2 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBCOMP) {
   d689a:	2970      	cmp	r1, #112	; 0x70
   d689c:	d10d      	bne.n	d68ba <_ZN4MQTT4loopEv+0x1da>
                  if (qoscallback) {
   d689e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d68a0:	b1f9      	cbz	r1, d68e2 <_ZN4MQTT4loopEv+0x202>
                      // msgId only present for QOS==0
                      if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   d68a2:	2a04      	cmp	r2, #4
   d68a4:	d11d      	bne.n	d68e2 <_ZN4MQTT4loopEv+0x202>
   d68a6:	f010 0f06 	tst.w	r0, #6
   d68aa:	d11a      	bne.n	d68e2 <_ZN4MQTT4loopEv+0x202>
                          msgId = (buffer[2]<<8)+buffer[3];
                          this->qoscallback(msgId);
   d68ac:	7898      	ldrb	r0, [r3, #2]
   d68ae:	78db      	ldrb	r3, [r3, #3]
   d68b0:	eb03 2000 	add.w	r0, r3, r0, lsl #8
   d68b4:	b280      	uxth	r0, r0
   d68b6:	4788      	blx	r1
   d68b8:	e013      	b.n	d68e2 <_ZN4MQTT4loopEv+0x202>
                      }
                  }
                } else if (type == MQTTSUBACK) {
   d68ba:	2990      	cmp	r1, #144	; 0x90
   d68bc:	d011      	beq.n	d68e2 <_ZN4MQTT4loopEv+0x202>
                    // if something...
                } else if (type == MQTTPINGREQ) {
   d68be:	29c0      	cmp	r1, #192	; 0xc0
   d68c0:	d10a      	bne.n	d68d8 <_ZN4MQTT4loopEv+0x1f8>
                    buffer[0] = MQTTPINGRESP;
   d68c2:	22d0      	movs	r2, #208	; 0xd0
   d68c4:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   d68c6:	69e3      	ldr	r3, [r4, #28]
   d68c8:	2200      	movs	r2, #0
   d68ca:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   d68cc:	69e1      	ldr	r1, [r4, #28]
   d68ce:	2202      	movs	r2, #2
   d68d0:	4620      	mov	r0, r4
   d68d2:	f003 fdb2 	bl	da43a <_ZN9TCPClient5writeEPKhj>
   d68d6:	e004      	b.n	d68e2 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPINGRESP) {
   d68d8:	29d0      	cmp	r1, #208	; 0xd0
                    pingOutstanding = false;
   d68da:	bf04      	itt	eq
   d68dc:	2300      	moveq	r3, #0
   d68de:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
            }
        }
        return true;
    }
    return false;
}
   d68e2:	4648      	mov	r0, r9
   d68e4:	370c      	adds	r7, #12
   d68e6:	46bd      	mov	sp, r7
   d68e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d68ec <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
}

bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   d68ec:	b570      	push	{r4, r5, r6, lr}
   d68ee:	4604      	mov	r4, r0
   d68f0:	460e      	mov	r6, r1
   d68f2:	4615      	mov	r5, r2

    if (isConnected()) {
   d68f4:	f7ff fd30 	bl	d6358 <_ZN4MQTT11isConnectedEv>
   d68f8:	b1e8      	cbz	r0, d6936 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4a>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
   d68fa:	8c23      	ldrh	r3, [r4, #32]
   d68fc:	3301      	adds	r3, #1
   d68fe:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   d6900:	b903      	cbnz	r3, d6904 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x18>
            nextMsgId = 1;
   d6902:	2301      	movs	r3, #1
   d6904:	8423      	strh	r3, [r4, #32]
        }
        buffer[length++] = (nextMsgId >> 8);
   d6906:	8c23      	ldrh	r3, [r4, #32]
   d6908:	69e2      	ldr	r2, [r4, #28]
   d690a:	121b      	asrs	r3, r3, #8
   d690c:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   d690e:	69e3      	ldr	r3, [r4, #28]
   d6910:	8c22      	ldrh	r2, [r4, #32]
   d6912:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   d6914:	69e2      	ldr	r2, [r4, #28]
   d6916:	4631      	mov	r1, r6
   d6918:	2307      	movs	r3, #7
   d691a:	4620      	mov	r0, r4
   d691c:	f7ff fd02 	bl	d6324 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   d6920:	69e3      	ldr	r3, [r4, #28]
   d6922:	541d      	strb	r5, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d6924:	1f03      	subs	r3, r0, #4
   d6926:	69e2      	ldr	r2, [r4, #28]
   d6928:	4620      	mov	r0, r4
   d692a:	b29b      	uxth	r3, r3
   d692c:	2182      	movs	r1, #130	; 0x82
    }
    return false;
}
   d692e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d6932:	f7ff bcb0 	b.w	d6296 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d6936:	bd70      	pop	{r4, r5, r6, pc}

000d6938 <_ZN4MQTT9subscribeEPKc>:
    lastOutActivity = millis();
    return (rc == 1+llen+length);
}

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
   d6938:	2200      	movs	r2, #0
   d693a:	f7ff bfd7 	b.w	d68ec <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000d693e <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
   d693e:	b510      	push	{r4, lr}
   d6940:	4604      	mov	r4, r0
    if (isConnected()) {
   d6942:	f7ff fd09 	bl	d6358 <_ZN4MQTT11isConnectedEv>
   d6946:	b110      	cbz	r0, d694e <_ZN4MQTTD1Ev+0x10>
        disconnect();
   d6948:	4620      	mov	r0, r4
   d694a:	f7ff fcd7 	bl	d62fc <_ZN4MQTT10disconnectEv>
    }

    if (buffer != NULL)
   d694e:	69e0      	ldr	r0, [r4, #28]
   d6950:	b108      	cbz	r0, d6956 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
   d6952:	f7fd fba8 	bl	d40a6 <_ZdaPv>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
   d6956:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d695a:	f002 fcc7 	bl	d92ec <_ZN6StringD1Ev>
   d695e:	4620      	mov	r0, r4
   d6960:	f7ff fbcc 	bl	d60fc <_ZN9TCPClientD1Ev>
        disconnect();
    }

    if (buffer != NULL)
      delete[] buffer;
}
   d6964:	4620      	mov	r0, r4
   d6966:	bd10      	pop	{r4, pc}

000d6968 <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
   d6968:	f001 bf86 	b.w	d8878 <HAL_Pin_Map>

000d696c <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d696c:	f001 bf84 	b.w	d8878 <HAL_Pin_Map>

000d6970 <_GLOBAL__sub_I__ZN7istream3getEv>:
   d6970:	f001 bf82 	b.w	d8878 <HAL_Pin_Map>

000d6974 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d6974:	b510      	push	{r4, lr}
   d6976:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d6978:	3024      	adds	r0, #36	; 0x24
   d697a:	f000 ff9d 	bl	d78b8 <_ZN8FatCache4syncEv>
   d697e:	b128      	cbz	r0, d698c <_ZN9FatVolume9cacheSyncEv+0x18>
   d6980:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d6984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d6988:	f000 bf96 	b.w	d78b8 <_ZN8FatCache4syncEv>
  }
   d698c:	bd10      	pop	{r4, pc}

000d698e <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d698e:	1e41      	subs	r1, r0, #1
   d6990:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d6994:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d6996:	0843      	lsrs	r3, r0, #1
   d6998:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d699c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d69a0:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d69a4:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d69a6:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d69a8:	d1f5      	bne.n	d6996 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d69aa:	4770      	bx	lr

000d69ac <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d69ac:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   d69ae:	68cb      	ldr	r3, [r1, #12]
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d69b0:	4604      	mov	r4, r0
   d69b2:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   d69b4:	b923      	cbnz	r3, d69c0 <_ZN7FatFile11openClusterEPS_+0x14>
    return openRoot(file->m_vol);
   d69b6:	6889      	ldr	r1, [r1, #8]
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   d69b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
   d69bc:	f000 bc09 	b.w	d71d2 <_ZN7FatFile8openRootEP9FatVolume>
  }
  memset(this, 0, sizeof(FatFile));
   d69c0:	2224      	movs	r2, #36	; 0x24
   d69c2:	2100      	movs	r1, #0
   d69c4:	f005 f966 	bl	dbc94 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   d69c8:	2310      	movs	r3, #16
  m_flags = F_READ;
   d69ca:	2001      	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attr = FILE_ATTR_SUBDIR;
   d69cc:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   d69ce:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   d69d0:	68ab      	ldr	r3, [r5, #8]
   d69d2:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   d69d4:	68eb      	ldr	r3, [r5, #12]
   d69d6:	6223      	str	r3, [r4, #32]
  return true;
}
   d69d8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d69dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d69dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d69e0:	7803      	ldrb	r3, [r0, #0]
   d69e2:	2b20      	cmp	r3, #32
   d69e4:	f100 0401 	add.w	r4, r0, #1
   d69e8:	d101      	bne.n	d69ee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d69ea:	4620      	mov	r0, r4
   d69ec:	e7f8      	b.n	d69e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d69ee:	4f70      	ldr	r7, [pc, #448]	; (d6bb0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d69f0:	6088      	str	r0, [r1, #8]
   d69f2:	4605      	mov	r5, r0
   d69f4:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d69f6:	462e      	mov	r6, r5
   d69f8:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d69fc:	b30b      	cbz	r3, d6a42 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d69fe:	2b2f      	cmp	r3, #47	; 0x2f
   d6a00:	d101      	bne.n	d6a06 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d6a02:	1903      	adds	r3, r0, r4
   d6a04:	e017      	b.n	d6a36 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6a06:	2b5c      	cmp	r3, #92	; 0x5c
   d6a08:	d102      	bne.n	d6a10 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d6a0a:	2000      	movs	r0, #0
   d6a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6a10:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d6a14:	b2e4      	uxtb	r4, r4
   d6a16:	2c1d      	cmp	r4, #29
   d6a18:	d803      	bhi.n	d6a22 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d6a1a:	fa27 f404 	lsr.w	r4, r7, r4
   d6a1e:	07e4      	lsls	r4, r4, #31
   d6a20:	d4f3      	bmi.n	d6a0a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d6a22:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d6a26:	2c3c      	cmp	r4, #60	; 0x3c
   d6a28:	d0ef      	beq.n	d6a0a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d6a2a:	3b20      	subs	r3, #32
   d6a2c:	2b5e      	cmp	r3, #94	; 0x5e
   d6a2e:	d9e1      	bls.n	d69f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d6a30:	e7eb      	b.n	d6a0a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d6a32:	2d2f      	cmp	r5, #47	; 0x2f
   d6a34:	d105      	bne.n	d6a42 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d6a36:	461e      	mov	r6, r3
   d6a38:	f813 5b01 	ldrb.w	r5, [r3], #1
   d6a3c:	2d20      	cmp	r5, #32
   d6a3e:	d1f8      	bne.n	d6a32 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d6a40:	e7f9      	b.n	d6a36 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d6a42:	6016      	str	r6, [r2, #0]
   d6a44:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d6a46:	4298      	cmp	r0, r3
   d6a48:	ebc0 0803 	rsb	r8, r0, r3
   d6a4c:	d009      	beq.n	d6a62 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d6a4e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d6a52:	2a2e      	cmp	r2, #46	; 0x2e
   d6a54:	d0f7      	beq.n	d6a46 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d6a56:	2a20      	cmp	r2, #32
   d6a58:	d0f5      	beq.n	d6a46 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d6a5a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d6a5e:	dcd4      	bgt.n	d6a0a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d6a60:	e001      	b.n	d6a66 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d6a62:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d6a66:	f8c1 8004 	str.w	r8, [r1, #4]
   d6a6a:	f101 030c 	add.w	r3, r1, #12
   d6a6e:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d6a72:	2420      	movs	r4, #32
   d6a74:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d6a78:	4293      	cmp	r3, r2
   d6a7a:	d1fb      	bne.n	d6a74 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d6a7c:	4603      	mov	r3, r0
   d6a7e:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d6a80:	f813 4b01 	ldrb.w	r4, [r3], #1
   d6a84:	2c2e      	cmp	r4, #46	; 0x2e
   d6a86:	d0fa      	beq.n	d6a7e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d6a88:	2c20      	cmp	r4, #32
   d6a8a:	d0f8      	beq.n	d6a7e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d6a8c:	fab2 f482 	clz	r4, r2
   d6a90:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d6a92:	f108 36ff 	add.w	r6, r8, #4294967295
   d6a96:	1c73      	adds	r3, r6, #1
   d6a98:	d107      	bne.n	d6aaa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d6a9a:	2700      	movs	r7, #0
   d6a9c:	f04f 0e07 	mov.w	lr, #7
   d6aa0:	463d      	mov	r5, r7
   d6aa2:	46ba      	mov	sl, r7
   d6aa4:	f04f 0908 	mov.w	r9, #8
   d6aa8:	e009      	b.n	d6abe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d6aaa:	5d83      	ldrb	r3, [r0, r6]
   d6aac:	2b2e      	cmp	r3, #46	; 0x2e
   d6aae:	d0f4      	beq.n	d6a9a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d6ab0:	3e01      	subs	r6, #1
   d6ab2:	e7f0      	b.n	d6a96 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d6ab4:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d6ab6:	2b20      	cmp	r3, #32
   d6ab8:	d104      	bne.n	d6ac4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d6aba:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d6abc:	3201      	adds	r2, #1
   d6abe:	4542      	cmp	r2, r8
   d6ac0:	dbf8      	blt.n	d6ab4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d6ac2:	e04b      	b.n	d6b5c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d6ac4:	2b2e      	cmp	r3, #46	; 0x2e
   d6ac6:	d102      	bne.n	d6ace <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d6ac8:	42b2      	cmp	r2, r6
   d6aca:	d1f6      	bne.n	d6aba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d6acc:	e003      	b.n	d6ad6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d6ace:	2b22      	cmp	r3, #34	; 0x22
   d6ad0:	d017      	beq.n	d6b02 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d6ad2:	2b7c      	cmp	r3, #124	; 0x7c
   d6ad4:	d015      	beq.n	d6b02 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d6ad6:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d6ada:	f1bc 0f05 	cmp.w	ip, #5
   d6ade:	d801      	bhi.n	d6ae4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d6ae0:	2b2d      	cmp	r3, #45	; 0x2d
   d6ae2:	d10e      	bne.n	d6b02 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d6ae4:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d6ae8:	f1bc 0f05 	cmp.w	ip, #5
   d6aec:	d909      	bls.n	d6b02 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d6aee:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d6af2:	f1bc 0f02 	cmp.w	ip, #2
   d6af6:	d904      	bls.n	d6b02 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d6af8:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d6afc:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d6b00:	d902      	bls.n	d6b08 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d6b02:	42b2      	cmp	r2, r6
   d6b04:	d10e      	bne.n	d6b24 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d6b06:	e049      	b.n	d6b9c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d6b08:	42b2      	cmp	r2, r6
   d6b0a:	d047      	beq.n	d6b9c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d6b0c:	4575      	cmp	r5, lr
   d6b0e:	d821      	bhi.n	d6b54 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d6b10:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d6b14:	f1bc 0f19 	cmp.w	ip, #25
   d6b18:	d808      	bhi.n	d6b2c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d6b1a:	3b20      	subs	r3, #32
   d6b1c:	b2db      	uxtb	r3, r3
        lc |= bit;
   d6b1e:	ea49 0707 	orr.w	r7, r9, r7
   d6b22:	e00a      	b.n	d6b3a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d6b24:	4575      	cmp	r5, lr
   d6b26:	d815      	bhi.n	d6b54 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d6b28:	2400      	movs	r4, #0
      c = '_';
   d6b2a:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d6b2c:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d6b30:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d6b34:	bf98      	it	ls
   d6b36:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d6b3a:	f105 0c01 	add.w	ip, r5, #1
   d6b3e:	fa5f fc8c 	uxtb.w	ip, ip
   d6b42:	440d      	add	r5, r1
      if (i < 7) {
   d6b44:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d6b48:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d6b4a:	d801      	bhi.n	d6b50 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d6b4c:	f881 c00c 	strb.w	ip, [r1, #12]
   d6b50:	4665      	mov	r5, ip
   d6b52:	e7b3      	b.n	d6abc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d6b54:	f1be 0f0a 	cmp.w	lr, #10
   d6b58:	d117      	bne.n	d6b8a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d6b5a:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d6b5c:	7b4b      	ldrb	r3, [r1, #13]
   d6b5e:	2b20      	cmp	r3, #32
   d6b60:	f43f af53 	beq.w	d6a0a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d6b64:	b13c      	cbz	r4, d6b76 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d6b66:	ea1a 0f07 	tst.w	sl, r7
   d6b6a:	bf18      	it	ne
   d6b6c:	2702      	movne	r7, #2
   d6b6e:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d6b70:	2001      	movs	r0, #1
   d6b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d6b76:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d6b78:	2001      	movs	r0, #1
   d6b7a:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d6b7c:	4419      	add	r1, r3
   d6b7e:	237e      	movs	r3, #126	; 0x7e
   d6b80:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d6b82:	2331      	movs	r3, #49	; 0x31
   d6b84:	738b      	strb	r3, [r1, #14]
   d6b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d6b8a:	42b2      	cmp	r2, r6
   d6b8c:	dce5      	bgt.n	d6b5a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d6b8e:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d6b90:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d6b94:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d6b96:	f04f 0910 	mov.w	r9, #16
   d6b9a:	e78e      	b.n	d6aba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d6b9c:	f1be 0f0a 	cmp.w	lr, #10
   d6ba0:	d0db      	beq.n	d6b5a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d6ba2:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d6ba4:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d6ba8:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d6baa:	f04f 0910 	mov.w	r9, #16
   d6bae:	e785      	b.n	d6abc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d6bb0:	31000101 	.word	0x31000101

000d6bb4 <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d6bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6bb6:	b08b      	sub	sp, #44	; 0x2c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d6bb8:	2300      	movs	r3, #0
   d6bba:	f88d 3004 	strb.w	r3, [sp, #4]
   d6bbe:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6bc2:	7803      	ldrb	r3, [r0, #0]
   d6bc4:	0719      	lsls	r1, r3, #28

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d6bc6:	4604      	mov	r4, r0
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6bc8:	d508      	bpl.n	d6bdc <_ZN7FatFile6removeEv+0x28>
   d6bca:	7883      	ldrb	r3, [r0, #2]
   d6bcc:	079a      	lsls	r2, r3, #30
   d6bce:	d505      	bpl.n	d6bdc <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   d6bd0:	6a01      	ldr	r1, [r0, #32]
   d6bd2:	b129      	cbz	r1, d6be0 <_ZN7FatFile6removeEv+0x2c>
   d6bd4:	68a0      	ldr	r0, [r4, #8]
   d6bd6:	f000 ff60 	bl	d7a9a <_ZN9FatVolume9freeChainEm>
   d6bda:	b908      	cbnz	r0, d6be0 <_ZN7FatFile6removeEv+0x2c>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   d6bdc:	2000      	movs	r0, #0
   d6bde:	e049      	b.n	d6c74 <_ZN7FatFile6removeEv+0xc0>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d6be0:	2101      	movs	r1, #1
   d6be2:	4620      	mov	r0, r4
   d6be4:	f000 fabc 	bl	d7160 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d6be8:	4605      	mov	r5, r0
   d6bea:	2800      	cmp	r0, #0
   d6bec:	d0f6      	beq.n	d6bdc <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
   d6bee:	f7ff fece 	bl	d698e <_ZN7FatFile11lfnChecksumEPh>

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;
   d6bf2:	26e5      	movs	r6, #229	; 0xe5
   d6bf4:	702e      	strb	r6, [r5, #0]

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
   d6bf6:	2300      	movs	r3, #0
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
   d6bf8:	4607      	mov	r7, r0

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
   d6bfa:	7023      	strb	r3, [r4, #0]

  // Write entry to device.
  if (!m_vol->cacheSync()) {
   d6bfc:	68a0      	ldr	r0, [r4, #8]
   d6bfe:	f7ff feb9 	bl	d6974 <_ZN9FatVolume9cacheSyncEv>
   d6c02:	2800      	cmp	r0, #0
   d6c04:	d0ea      	beq.n	d6bdc <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
   d6c06:	78e3      	ldrb	r3, [r4, #3]
   d6c08:	2b00      	cmp	r3, #0
   d6c0a:	d033      	beq.n	d6c74 <_ZN7FatFile6removeEv+0xc0>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
   d6c0c:	4621      	mov	r1, r4
   d6c0e:	a801      	add	r0, sp, #4
   d6c10:	f7ff fecc 	bl	d69ac <_ZN7FatFile11openClusterEPS_>
   d6c14:	2800      	cmp	r0, #0
   d6c16:	d0e1      	beq.n	d6bdc <_ZN7FatFile6removeEv+0x28>
   d6c18:	2501      	movs	r5, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d6c1a:	78e3      	ldrb	r3, [r4, #3]
   d6c1c:	42ab      	cmp	r3, r5
   d6c1e:	d3dd      	bcc.n	d6bdc <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   d6c20:	88a1      	ldrh	r1, [r4, #4]
   d6c22:	1b49      	subs	r1, r1, r5
   d6c24:	0149      	lsls	r1, r1, #5
   d6c26:	a801      	add	r0, sp, #4
   d6c28:	f000 fbce 	bl	d73c8 <_ZN7FatFile7seekSetEm>
   d6c2c:	2800      	cmp	r0, #0
   d6c2e:	d0d5      	beq.n	d6bdc <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   d6c30:	2100      	movs	r1, #0
   d6c32:	a801      	add	r0, sp, #4
   d6c34:	f000 fbab 	bl	d738e <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d6c38:	2800      	cmp	r0, #0
   d6c3a:	d0cf      	beq.n	d6bdc <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d6c3c:	7ac3      	ldrb	r3, [r0, #11]
   d6c3e:	2b0f      	cmp	r3, #15
   d6c40:	d1cc      	bne.n	d6bdc <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   d6c42:	7802      	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d6c44:	f002 031f 	and.w	r3, r2, #31
   d6c48:	429d      	cmp	r5, r3
   d6c4a:	d1c7      	bne.n	d6bdc <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   d6c4c:	7b43      	ldrb	r3, [r0, #13]
   d6c4e:	42bb      	cmp	r3, r7
   d6c50:	d1c4      	bne.n	d6bdc <_ZN7FatFile6removeEv+0x28>
        chksum != ldir->chksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->ord & LDIR_ORD_LAST_LONG_ENTRY;
    ldir->ord = DIR_NAME_DELETED;
   d6c52:	7006      	strb	r6, [r0, #0]
    m_vol->cacheDirty();
   d6c54:	68a1      	ldr	r1, [r4, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d6c56:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   d6c5a:	f043 0301 	orr.w	r3, r3, #1
   d6c5e:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   d6c62:	0653      	lsls	r3, r2, #25
   d6c64:	d503      	bpl.n	d6c6e <_ZN7FatFile6removeEv+0xba>
      if (!m_vol->cacheSync()) {
   d6c66:	68a0      	ldr	r0, [r4, #8]
   d6c68:	f7ff fe84 	bl	d6974 <_ZN9FatVolume9cacheSyncEv>
   d6c6c:	e002      	b.n	d6c74 <_ZN7FatFile6removeEv+0xc0>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d6c6e:	3501      	adds	r5, #1
   d6c70:	b2ed      	uxtb	r5, r5
   d6c72:	e7d2      	b.n	d6c1a <_ZN7FatFile6removeEv+0x66>
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
}
   d6c74:	b00b      	add	sp, #44	; 0x2c
   d6c76:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6c78 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d6c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d6c7c:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d6c80:	4606      	mov	r6, r0
   d6c82:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d6c84:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d6c86:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d6c88:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d6c8c:	6869      	ldr	r1, [r5, #4]
   d6c8e:	68aa      	ldr	r2, [r5, #8]
   d6c90:	1863      	adds	r3, r4, r1
   d6c92:	b29b      	uxth	r3, r3
   d6c94:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d6c96:	4291      	cmp	r1, r2
   d6c98:	d006      	beq.n	d6ca8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d6c9a:	f812 0b01 	ldrb.w	r0, [r2], #1
   d6c9e:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d6ca2:	4043      	eors	r3, r0
   d6ca4:	b29b      	uxth	r3, r3
   d6ca6:	e7f6      	b.n	d6c96 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d6ca8:	f1b9 0f03 	cmp.w	r9, #3
   d6cac:	bf28      	it	cs
   d6cae:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6cb2:	f109 0204 	add.w	r2, r9, #4
   d6cb6:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d6cb8:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6cbc:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6cbe:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6cc0:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6cc2:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6cc4:	bf94      	ite	ls
   d6cc6:	3130      	addls	r1, #48	; 0x30
   d6cc8:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6cca:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6ccc:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d6cce:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6cd2:	d3f1      	bcc.n	d6cb8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d6cd4:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d6cd8:	2100      	movs	r1, #0
   d6cda:	735f      	strb	r7, [r3, #13]
   d6cdc:	4630      	mov	r0, r6
   d6cde:	f000 fb73 	bl	d73c8 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d6ce2:	2101      	movs	r1, #1
   d6ce4:	4630      	mov	r0, r6
   d6ce6:	f000 fb52 	bl	d738e <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d6cea:	4601      	mov	r1, r0
   d6cec:	b928      	cbnz	r0, d6cfa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d6cee:	7870      	ldrb	r0, [r6, #1]
   d6cf0:	fab0 f080 	clz	r0, r0
   d6cf4:	0940      	lsrs	r0, r0, #5
   d6cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d6cfa:	7803      	ldrb	r3, [r0, #0]
   d6cfc:	b14b      	cbz	r3, d6d12 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d6cfe:	7ac3      	ldrb	r3, [r0, #11]
   d6d00:	071b      	lsls	r3, r3, #28
   d6d02:	d4ee      	bmi.n	d6ce2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d6d04:	220b      	movs	r2, #11
   d6d06:	4640      	mov	r0, r8
   d6d08:	f004 ffaa 	bl	dbc60 <memcmp>
   d6d0c:	2800      	cmp	r0, #0
   d6d0e:	d1e8      	bne.n	d6ce2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d6d10:	e002      	b.n	d6d18 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d6d12:	2001      	movs	r0, #1
   d6d14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d6d18:	3401      	adds	r4, #1
   d6d1a:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d6d1c:	2c64      	cmp	r4, #100	; 0x64
   d6d1e:	d1b5      	bne.n	d6c8c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d6d20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d6d24 <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6d28:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6d2a:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6d2c:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6d2e:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6d32:	9005      	str	r0, [sp, #20]
   d6d34:	460e      	mov	r6, r1
   d6d36:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6d38:	d101      	bne.n	d6d3e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d6d3a:	2000      	movs	r0, #0
   d6d3c:	e1a0      	b.n	d7080 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6d3e:	9b05      	ldr	r3, [sp, #20]
   d6d40:	781b      	ldrb	r3, [r3, #0]
   d6d42:	2b00      	cmp	r3, #0
   d6d44:	d1f9      	bne.n	d6d3a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d6d46:	6853      	ldr	r3, [r2, #4]
   d6d48:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d6d4a:	7813      	ldrb	r3, [r2, #0]
   d6d4c:	079b      	lsls	r3, r3, #30
   d6d4e:	f000 818d 	beq.w	d706c <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d6d52:	9b02      	ldr	r3, [sp, #8]
   d6d54:	270d      	movs	r7, #13
   d6d56:	330c      	adds	r3, #12
   d6d58:	fbb3 f7f7 	udiv	r7, r3, r7
   d6d5c:	3701      	adds	r7, #1
   d6d5e:	b2ff      	uxtb	r7, r7
   d6d60:	2100      	movs	r1, #0
   d6d62:	4630      	mov	r0, r6
   d6d64:	f000 fb30 	bl	d73c8 <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d6d68:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d6d6c:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d6d70:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d6d74:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d6d76:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d6d78:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d6d7a:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d6d7e:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d6d80:	6972      	ldr	r2, [r6, #20]
   d6d82:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d6d84:	2101      	movs	r1, #1
   d6d86:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d6d88:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d6d8c:	f000 faff 	bl	d738e <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d6d90:	9b07      	ldr	r3, [sp, #28]
   d6d92:	b920      	cbnz	r0, d6d9e <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d6d94:	7873      	ldrb	r3, [r6, #1]
   d6d96:	2b00      	cmp	r3, #0
   d6d98:	f000 8090 	beq.w	d6ebc <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d6d9c:	e7cd      	b.n	d6d3a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d6d9e:	7802      	ldrb	r2, [r0, #0]
   d6da0:	2ae5      	cmp	r2, #229	; 0xe5
   d6da2:	d000      	beq.n	d6da6 <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d6da4:	b942      	cbnz	r2, d6db8 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d6da6:	2c00      	cmp	r4, #0
   d6da8:	bf08      	it	eq
   d6daa:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d6dac:	42bc      	cmp	r4, r7
        freeFound++;
   d6dae:	bf3c      	itt	cc
   d6db0:	3401      	addcc	r4, #1
   d6db2:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d6db4:	b922      	cbnz	r2, d6dc0 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d6db6:	e081      	b.n	d6ebc <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d6db8:	42bc      	cmp	r4, r7
   d6dba:	bf38      	it	cc
   d6dbc:	2400      	movcc	r4, #0
   d6dbe:	e003      	b.n	d6dc8 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d6dc0:	2ae5      	cmp	r2, #229	; 0xe5
   d6dc2:	d101      	bne.n	d6dc8 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d6dc4:	2500      	movs	r5, #0
   d6dc6:	e7db      	b.n	d6d80 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d6dc8:	2a2e      	cmp	r2, #46	; 0x2e
   d6dca:	d0fb      	beq.n	d6dc4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6dcc:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d6dce:	290f      	cmp	r1, #15
   d6dd0:	d152      	bne.n	d6e78 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d6dd2:	b93d      	cbnz	r5, d6de4 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d6dd4:	0651      	lsls	r1, r2, #25
   d6dd6:	d5d3      	bpl.n	d6d80 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d6dd8:	7b43      	ldrb	r3, [r0, #13]
   d6dda:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d6ddc:	f002 051f 	and.w	r5, r2, #31
   d6de0:	462b      	mov	r3, r5
   d6de2:	e007      	b.n	d6df4 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d6de4:	3b01      	subs	r3, #1
   d6de6:	b2db      	uxtb	r3, r3
   d6de8:	429a      	cmp	r2, r3
   d6dea:	d1eb      	bne.n	d6dc4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6dec:	7b42      	ldrb	r2, [r0, #13]
   d6dee:	9903      	ldr	r1, [sp, #12]
   d6df0:	4291      	cmp	r1, r2
   d6df2:	d1e7      	bne.n	d6dc4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d6df4:	1e5a      	subs	r2, r3, #1
   d6df6:	f04f 0c0d 	mov.w	ip, #13
   d6dfa:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d6dfe:	9a02      	ldr	r2, [sp, #8]
   d6e00:	4562      	cmp	r2, ip
   d6e02:	d9df      	bls.n	d6dc4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6e04:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d6e08:	f1be 0f04 	cmp.w	lr, #4
   d6e0c:	fa5f f28e 	uxtb.w	r2, lr
   d6e10:	d804      	bhi.n	d6e1c <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d6e12:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d6e16:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d6e1a:	e00c      	b.n	d6e36 <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d6e1c:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6e1e:	bf95      	itete	ls
   d6e20:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6e24:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6e28:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6e2c:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6e30:	bf94      	ite	ls
   d6e32:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6e34:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d6e36:	9902      	ldr	r1, [sp, #8]
   d6e38:	4561      	cmp	r1, ip
   d6e3a:	d103      	bne.n	d6e44 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d6e3c:	2a00      	cmp	r2, #0
   d6e3e:	bf18      	it	ne
   d6e40:	2500      	movne	r5, #0
   d6e42:	e79d      	b.n	d6d80 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6e44:	2aff      	cmp	r2, #255	; 0xff
   d6e46:	d8bd      	bhi.n	d6dc4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6e48:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d6e4a:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d6e4e:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6e50:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d6e54:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d6e58:	bf98      	it	ls
   d6e5a:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6e5c:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d6e60:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d6e64:	bf98      	it	ls
   d6e66:	b2d2      	uxtbls	r2, r2
   d6e68:	f1bc 0f19 	cmp.w	ip, #25
   d6e6c:	bf9c      	itt	ls
   d6e6e:	3120      	addls	r1, #32
   d6e70:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6e72:	4291      	cmp	r1, r2
   d6e74:	d1a6      	bne.n	d6dc4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6e76:	e0fb      	b.n	d7070 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d6e78:	0709      	lsls	r1, r1, #28
   d6e7a:	d4a3      	bmi.n	d6dc4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d6e7c:	b14d      	cbz	r5, d6e92 <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d6e7e:	2b01      	cmp	r3, #1
   d6e80:	f47f af5b 	bne.w	d6d3a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d6e84:	f7ff fd83 	bl	d698e <_ZN7FatFile11lfnChecksumEPh>
   d6e88:	9b03      	ldr	r3, [sp, #12]
   d6e8a:	4283      	cmp	r3, r0
   d6e8c:	f47f af55 	bne.w	d6d3a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d6e90:	e00f      	b.n	d6eb2 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d6e92:	220b      	movs	r2, #11
   d6e94:	9906      	ldr	r1, [sp, #24]
   d6e96:	9307      	str	r3, [sp, #28]
   d6e98:	f004 fee2 	bl	dbc60 <memcmp>
   d6e9c:	9b07      	ldr	r3, [sp, #28]
   d6e9e:	2800      	cmp	r0, #0
   d6ea0:	f47f af6e 	bne.w	d6d80 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d6ea4:	f899 2000 	ldrb.w	r2, [r9]
   d6ea8:	07d2      	lsls	r2, r2, #31
   d6eaa:	d502      	bpl.n	d6eb2 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d6eac:	2201      	movs	r2, #1
   d6eae:	9204      	str	r2, [sp, #16]
   d6eb0:	e766      	b.n	d6d80 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d6eb2:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d6eb6:	f000 80d1 	beq.w	d705c <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d6eba:	e73e      	b.n	d6d3a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d6ebc:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d6ec0:	f43f af3b 	beq.w	d6d3a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d6ec4:	f00b 0303 	and.w	r3, fp, #3
   d6ec8:	3b01      	subs	r3, #1
   d6eca:	2b01      	cmp	r3, #1
   d6ecc:	f63f af35 	bhi.w	d6d3a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d6ed0:	2c00      	cmp	r4, #0
   d6ed2:	bf08      	it	eq
   d6ed4:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d6ed6:	42bc      	cmp	r4, r7
   d6ed8:	d302      	bcc.n	d6ee0 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d6eda:	9b04      	ldr	r3, [sp, #16]
   d6edc:	b9cb      	cbnz	r3, d6f12 <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d6ede:	e01f      	b.n	d6f20 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d6ee0:	2100      	movs	r1, #0
   d6ee2:	4630      	mov	r0, r6
   d6ee4:	f000 fa53 	bl	d738e <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d6ee8:	b910      	cbnz	r0, d6ef0 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d6eea:	7873      	ldrb	r3, [r6, #1]
   d6eec:	b15b      	cbz	r3, d6f06 <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d6eee:	e724      	b.n	d6d3a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d6ef0:	3401      	adds	r4, #1
   d6ef2:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d6ef4:	e7ef      	b.n	d6ed6 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d6ef6:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d6ef8:	791b      	ldrb	r3, [r3, #4]
   d6efa:	2b01      	cmp	r3, #1
   d6efc:	d8ed      	bhi.n	d6eda <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d6efe:	3410      	adds	r4, #16
   d6f00:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d6f02:	42a7      	cmp	r7, r4
   d6f04:	d9e9      	bls.n	d6eda <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d6f06:	4630      	mov	r0, r6
   d6f08:	f000 f8ea 	bl	d70e0 <_ZN7FatFile13addDirClusterEv>
   d6f0c:	2800      	cmp	r0, #0
   d6f0e:	d1f2      	bne.n	d6ef6 <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d6f10:	e713      	b.n	d6d3a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d6f12:	4649      	mov	r1, r9
   d6f14:	4630      	mov	r0, r6
   d6f16:	f7ff feaf 	bl	d6c78 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d6f1a:	2800      	cmp	r0, #0
   d6f1c:	f43f af0d 	beq.w	d6d3a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d6f20:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d6f24:	4630      	mov	r0, r6
   d6f26:	f000 fa4f 	bl	d73c8 <_ZN7FatFile7seekSetEm>
   d6f2a:	2800      	cmp	r0, #0
   d6f2c:	f43f af05 	beq.w	d6d3a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d6f30:	1e7d      	subs	r5, r7, #1
   d6f32:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6f34:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d6f36:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d6f3a:	f04f 080f 	mov.w	r8, #15
   d6f3e:	e041      	b.n	d6fc4 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d6f40:	2100      	movs	r1, #0
   d6f42:	4630      	mov	r0, r6
   d6f44:	f000 fa23 	bl	d738e <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d6f48:	4607      	mov	r7, r0
   d6f4a:	2800      	cmp	r0, #0
   d6f4c:	f43f aef5 	beq.w	d6d3a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d6f50:	68b2      	ldr	r2, [r6, #8]
   d6f52:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d6f56:	42ac      	cmp	r4, r5
   d6f58:	f043 0301 	orr.w	r3, r3, #1
   d6f5c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d6f60:	bf0c      	ite	eq
   d6f62:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d6f66:	4622      	movne	r2, r4
   d6f68:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d6f6a:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d6f6e:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d6f72:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d6f76:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d6f78:	f7ff fd09 	bl	d698e <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6f7c:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d6f7e:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d6f80:	f887 a01a 	strb.w	sl, [r7, #26]
   d6f84:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6f88:	f002 021f 	and.w	r2, r2, #31
   d6f8c:	230d      	movs	r3, #13
   d6f8e:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d6f90:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6f94:	435a      	muls	r2, r3
   d6f96:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d6f98:	9902      	ldr	r1, [sp, #8]
   d6f9a:	4291      	cmp	r1, r2
   d6f9c:	d915      	bls.n	d6fca <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d6f9e:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d6fa2:	2b04      	cmp	r3, #4
   d6fa4:	fa5f fc83 	uxtb.w	ip, r3
   d6fa8:	f103 0001 	add.w	r0, r3, #1
   d6fac:	d813      	bhi.n	d6fd6 <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d6fae:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d6fb2:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d6fb6:	280d      	cmp	r0, #13
   d6fb8:	f102 0201 	add.w	r2, r2, #1
   d6fbc:	4603      	mov	r3, r0
   d6fbe:	d1eb      	bne.n	d6f98 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6fc0:	3c01      	subs	r4, #1
   d6fc2:	b2e4      	uxtb	r4, r4
   d6fc4:	2c00      	cmp	r4, #0
   d6fc6:	d1bb      	bne.n	d6f40 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d6fc8:	e00e      	b.n	d6fe8 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d6fca:	bf14      	ite	ne
   d6fcc:	f04f 31ff 	movne.w	r1, #4294967295
   d6fd0:	2100      	moveq	r1, #0
   d6fd2:	b289      	uxth	r1, r1
   d6fd4:	e7e5      	b.n	d6fa2 <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d6fd6:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d6fda:	bf94      	ite	ls
   d6fdc:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d6fe0:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d6fe4:	8099      	strh	r1, [r3, #4]
   d6fe6:	e7e6      	b.n	d6fb6 <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d6fe8:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d6fea:	4621      	mov	r1, r4
   d6fec:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d6fee:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d6ff2:	f000 f9cc 	bl	d738e <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d6ff6:	4607      	mov	r7, r0
   d6ff8:	2800      	cmp	r0, #0
   d6ffa:	f43f ae9e 	beq.w	d6d3a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d6ffe:	2220      	movs	r2, #32
   d7000:	4621      	mov	r1, r4
   d7002:	f004 fe47 	bl	dbc94 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d7006:	464b      	mov	r3, r9
   d7008:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d700c:	603a      	str	r2, [r7, #0]
   d700e:	685a      	ldr	r2, [r3, #4]
   d7010:	607a      	str	r2, [r7, #4]
   d7012:	891a      	ldrh	r2, [r3, #8]
   d7014:	813a      	strh	r2, [r7, #8]
   d7016:	7a9b      	ldrb	r3, [r3, #10]
   d7018:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d701a:	f899 3000 	ldrb.w	r3, [r9]
   d701e:	f003 0318 	and.w	r3, r3, #24
   d7022:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d7024:	4b18      	ldr	r3, [pc, #96]	; (d7088 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d7026:	681b      	ldr	r3, [r3, #0]
   d7028:	b12b      	cbz	r3, d7036 <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d702a:	f107 010e 	add.w	r1, r7, #14
   d702e:	f107 0010 	add.w	r0, r7, #16
   d7032:	4798      	blx	r3
   d7034:	e006      	b.n	d7044 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d7036:	2321      	movs	r3, #33	; 0x21
   d7038:	743b      	strb	r3, [r7, #16]
   d703a:	2328      	movs	r3, #40	; 0x28
   d703c:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d703e:	2308      	movs	r3, #8
   d7040:	73bc      	strb	r4, [r7, #14]
   d7042:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d7044:	8a3b      	ldrh	r3, [r7, #16]
   d7046:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d7048:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d704a:	89fb      	ldrh	r3, [r7, #14]
   d704c:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d704e:	68b2      	ldr	r2, [r6, #8]
   d7050:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d7054:	f043 0301 	orr.w	r3, r3, #1
   d7058:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d705c:	9500      	str	r5, [sp, #0]
   d705e:	465b      	mov	r3, fp
   d7060:	4652      	mov	r2, sl
   d7062:	4631      	mov	r1, r6
   d7064:	9805      	ldr	r0, [sp, #20]
   d7066:	f000 f9f8 	bl	d745a <_ZN7FatFile15openCachedEntryEPS_tih>
   d706a:	e009      	b.n	d7080 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d706c:	2701      	movs	r7, #1
   d706e:	e677      	b.n	d6d60 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d7070:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d7074:	f1be 0f0d 	cmp.w	lr, #13
   d7078:	f43f ae82 	beq.w	d6d80 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d707c:	46d4      	mov	ip, sl
   d707e:	e6c3      	b.n	d6e08 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d7080:	b009      	add	sp, #36	; 0x24
   d7082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7086:	bf00      	nop
   d7088:	2003de5c 	.word	0x2003de5c

000d708c <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d708c:	f001 bbf4 	b.w	d8878 <HAL_Pin_Map>

000d7090 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d7090:	f001 bbf2 	b.w	d8878 <HAL_Pin_Map>

000d7094 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d7094:	f001 bbf0 	b.w	d8878 <HAL_Pin_Map>

000d7098 <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   d7098:	b510      	push	{r4, lr}
   d709a:	460c      	mov	r4, r1
   d709c:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   d709e:	b909      	cbnz	r1, d70a4 <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   d70a0:	2000      	movs	r0, #0
   d70a2:	bd10      	pop	{r4, pc}
  dir_t* dir;
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
   d70a4:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   d70a8:	d004      	beq.n	d70b4 <_ZN7FatFile6getSFNEPc+0x1c>
    name[0] = '/';
   d70aa:	232f      	movs	r3, #47	; 0x2f
   d70ac:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   d70ae:	2300      	movs	r3, #0
   d70b0:	7063      	strb	r3, [r4, #1]
   d70b2:	e006      	b.n	d70c2 <_ZN7FatFile6getSFNEPc+0x2a>
    return true;
  }
  // cache entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   d70b4:	f000 f854 	bl	d7160 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d70b8:	2800      	cmp	r0, #0
   d70ba:	d0f1      	beq.n	d70a0 <_ZN7FatFile6getSFNEPc+0x8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  dirName(dir, name);
   d70bc:	4621      	mov	r1, r4
   d70be:	f000 f85e 	bl	d717e <_ZN7FatFile7dirNameEPK14directoryEntryPc>
  return true;
   d70c2:	2001      	movs	r0, #1

fail:
  return false;
}
   d70c4:	bd10      	pop	{r4, pc}

000d70c6 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d70c6:	f001 bbd7 	b.w	d8878 <HAL_Pin_Map>

000d70ca <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d70ca:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d70cc:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d70ce:	f043 0304 	orr.w	r3, r3, #4
   d70d2:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d70d4:	f100 0210 	add.w	r2, r0, #16
   d70d8:	6880      	ldr	r0, [r0, #8]
   d70da:	f000 bca3 	b.w	d7a24 <_ZN9FatVolume15allocateClusterEmPm>
	...

000d70e0 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d70e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d70e4:	7803      	ldrb	r3, [r0, #0]
   d70e6:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d70ea:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d70ec:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d70f0:	b10b      	cbz	r3, d70f6 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d70f2:	2600      	movs	r6, #0
   d70f4:	e02e      	b.n	d7154 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d70f6:	6942      	ldr	r2, [r0, #20]
   d70f8:	4b18      	ldr	r3, [pc, #96]	; (d715c <_ZN7FatFile13addDirClusterEv+0x7c>)
   d70fa:	429a      	cmp	r2, r3
   d70fc:	d8f9      	bhi.n	d70f2 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d70fe:	f7ff ffe4 	bl	d70ca <_ZN7FatFile10addClusterEv>
   d7102:	4606      	mov	r6, r0
   d7104:	2800      	cmp	r0, #0
   d7106:	d0f4      	beq.n	d70f2 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d7108:	6921      	ldr	r1, [r4, #16]
   d710a:	68a0      	ldr	r0, [r4, #8]
   d710c:	f000 fc1f 	bl	d794e <_ZNK9FatVolume17clusterFirstBlockEm>
   d7110:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d7112:	68a0      	ldr	r0, [r4, #8]
   d7114:	2205      	movs	r2, #5
   d7116:	4639      	mov	r1, r7
   d7118:	3024      	adds	r0, #36	; 0x24
   d711a:	f000 fbf4 	bl	d7906 <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d711e:	4680      	mov	r8, r0
   d7120:	2800      	cmp	r0, #0
   d7122:	d0e6      	beq.n	d70f2 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d7124:	4629      	mov	r1, r5
   d7126:	f44f 7200 	mov.w	r2, #512	; 0x200
   d712a:	f004 fdb3 	bl	dbc94 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d712e:	2501      	movs	r5, #1
   d7130:	68a3      	ldr	r3, [r4, #8]
   d7132:	791a      	ldrb	r2, [r3, #4]
   d7134:	42aa      	cmp	r2, r5
   d7136:	d909      	bls.n	d714c <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d7138:	4642      	mov	r2, r8
   d713a:	19e9      	adds	r1, r5, r7
   d713c:	6818      	ldr	r0, [r3, #0]
   d713e:	f000 ff5f 	bl	d8000 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d7142:	2800      	cmp	r0, #0
   d7144:	d0d5      	beq.n	d70f2 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d7146:	3501      	adds	r5, #1
   d7148:	b2ed      	uxtb	r5, r5
   d714a:	e7f1      	b.n	d7130 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d714c:	6963      	ldr	r3, [r4, #20]
   d714e:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d7152:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d7154:	4630      	mov	r0, r6
   d7156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d715a:	bf00      	nop
   d715c:	001ffdff 	.word	0x001ffdff

000d7160 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d7160:	b510      	push	{r4, lr}
   d7162:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d7164:	6880      	ldr	r0, [r0, #8]
   d7166:	460a      	mov	r2, r1
   d7168:	3024      	adds	r0, #36	; 0x24
   d716a:	69a1      	ldr	r1, [r4, #24]
   d716c:	f000 fbcb 	bl	d7906 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d7170:	b120      	cbz	r0, d717c <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d7172:	88a3      	ldrh	r3, [r4, #4]
   d7174:	f003 030f 	and.w	r3, r3, #15
   d7178:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d717c:	bd10      	pop	{r4, pc}

000d717e <_ZN7FatFile7dirNameEPK14directoryEntryPc>:

fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   d717e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7180:	2400      	movs	r4, #0
   d7182:	1e45      	subs	r5, r0, #1
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
   d7184:	2608      	movs	r6, #8
fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
   d7186:	4623      	mov	r3, r4
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
   d7188:	272e      	movs	r7, #46	; 0x2e
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
   d718a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d718e:	2a20      	cmp	r2, #32
   d7190:	d018      	beq.n	d71c4 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x46>
      continue;
    }
    if (i == 8) {
   d7192:	2c08      	cmp	r4, #8
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
   d7194:	bf02      	ittt	eq
   d7196:	54cf      	strbeq	r7, [r1, r3]
   d7198:	1c5a      	addeq	r2, r3, #1
   d719a:	b2d3      	uxtbeq	r3, r2
    }
    char c = dir->name[i];
   d719c:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   d719e:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
   d71a2:	bf08      	it	eq
   d71a4:	2610      	moveq	r6, #16
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   d71a6:	f1be 0f19 	cmp.w	lr, #25
   d71aa:	d806      	bhi.n	d71ba <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3c>
   d71ac:	f890 e00c 	ldrb.w	lr, [r0, #12]
   d71b0:	ea16 0f0e 	tst.w	r6, lr
      c += 'a' - 'A';
   d71b4:	bf1c      	itt	ne
   d71b6:	3220      	addne	r2, #32
   d71b8:	b2d2      	uxtbne	r2, r2
    }
    name[j++] = c;
   d71ba:	f103 0e01 	add.w	lr, r3, #1
   d71be:	54ca      	strb	r2, [r1, r3]
   d71c0:	fa5f f38e 	uxtb.w	r3, lr
   d71c4:	3401      	adds	r4, #1
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
   d71c6:	2c0b      	cmp	r4, #11
   d71c8:	d1df      	bne.n	d718a <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xc>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
   d71ca:	2200      	movs	r2, #0
   d71cc:	54ca      	strb	r2, [r1, r3]
  return j;
}
   d71ce:	4618      	mov	r0, r3
   d71d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d71d2 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d71d2:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d71d4:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d71d6:	4605      	mov	r5, r0
   d71d8:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d71da:	b984      	cbnz	r4, d71fe <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d71dc:	2224      	movs	r2, #36	; 0x24
   d71de:	4621      	mov	r1, r4
   d71e0:	f004 fd58 	bl	dbc94 <memset>

  m_vol = vol;
   d71e4:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d71e6:	79f3      	ldrb	r3, [r6, #7]
   d71e8:	2b10      	cmp	r3, #16
   d71ea:	d003      	beq.n	d71f4 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d71ec:	2b20      	cmp	r3, #32
   d71ee:	d106      	bne.n	d71fe <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d71f0:	2340      	movs	r3, #64	; 0x40
   d71f2:	e000      	b.n	d71f6 <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d71f4:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d71f6:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d71f8:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d71fa:	70a8      	strb	r0, [r5, #2]
   d71fc:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d71fe:	2000      	movs	r0, #0
   d7200:	bd70      	pop	{r4, r5, r6, pc}

000d7202 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d7202:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7206:	7803      	ldrb	r3, [r0, #0]
   d7208:	4604      	mov	r4, r0
   d720a:	4689      	mov	r9, r1
   d720c:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d720e:	b14b      	cbz	r3, d7224 <_ZN7FatFile4readEPvj+0x22>
   d7210:	7882      	ldrb	r2, [r0, #2]
   d7212:	07d1      	lsls	r1, r2, #31
   d7214:	d506      	bpl.n	d7224 <_ZN7FatFile4readEPvj+0x22>
   d7216:	e00c      	b.n	d7232 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d7218:	465a      	mov	r2, fp
   d721a:	6921      	ldr	r1, [r4, #16]
   d721c:	f000 fb9d 	bl	d795a <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d7220:	2800      	cmp	r0, #0
   d7222:	da3d      	bge.n	d72a0 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d7224:	7863      	ldrb	r3, [r4, #1]
   d7226:	f043 0302 	orr.w	r3, r3, #2
   d722a:	7063      	strb	r3, [r4, #1]
  return -1;
   d722c:	f04f 30ff 	mov.w	r0, #4294967295
   d7230:	e097      	b.n	d7362 <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d7232:	071a      	lsls	r2, r3, #28
   d7234:	d503      	bpl.n	d723e <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d7236:	69e3      	ldr	r3, [r4, #28]
   d7238:	6962      	ldr	r2, [r4, #20]
   d723a:	1a9b      	subs	r3, r3, r2
   d723c:	e007      	b.n	d724e <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d723e:	069a      	lsls	r2, r3, #26
   d7240:	d508      	bpl.n	d7254 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d7242:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d7244:	891a      	ldrh	r2, [r3, #8]
   d7246:	6963      	ldr	r3, [r4, #20]
   d7248:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d724c:	b29b      	uxth	r3, r3
   d724e:	429d      	cmp	r5, r3
   d7250:	bf28      	it	cs
   d7252:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d7254:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d7256:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d725a:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d725e:	2e00      	cmp	r6, #0
   d7260:	d035      	beq.n	d72ce <_ZN7FatFile4readEPvj+0xcc>
   d7262:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d7264:	6963      	ldr	r3, [r4, #20]
   d7266:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d7268:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d726c:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d7270:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d7274:	d002      	beq.n	d727c <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d7276:	6a03      	ldr	r3, [r0, #32]
   d7278:	4419      	add	r1, r3
   d727a:	e01d      	b.n	d72b8 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d727c:	f890 8005 	ldrb.w	r8, [r0, #5]
   d7280:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d7284:	f1ba 0f00 	cmp.w	sl, #0
   d7288:	d110      	bne.n	d72ac <_ZN7FatFile4readEPvj+0xaa>
   d728a:	f1b8 0f00 	cmp.w	r8, #0
   d728e:	d10d      	bne.n	d72ac <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d7290:	2b00      	cmp	r3, #0
   d7292:	d1c1      	bne.n	d7218 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d7294:	0653      	lsls	r3, r2, #25
   d7296:	bf4c      	ite	mi
   d7298:	6a03      	ldrmi	r3, [r0, #32]
   d729a:	6a23      	ldrpl	r3, [r4, #32]
   d729c:	6123      	str	r3, [r4, #16]
   d729e:	e005      	b.n	d72ac <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d72a0:	d104      	bne.n	d72ac <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d72a2:	7823      	ldrb	r3, [r4, #0]
   d72a4:	f013 0f70 	tst.w	r3, #112	; 0x70
   d72a8:	d111      	bne.n	d72ce <_ZN7FatFile4readEPvj+0xcc>
   d72aa:	e7bb      	b.n	d7224 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d72ac:	6921      	ldr	r1, [r4, #16]
   d72ae:	68a0      	ldr	r0, [r4, #8]
   d72b0:	f000 fb4d 	bl	d794e <_ZNK9FatVolume17clusterFirstBlockEm>
   d72b4:	eb08 0100 	add.w	r1, r8, r0
   d72b8:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d72ba:	f1ba 0f00 	cmp.w	sl, #0
   d72be:	d135      	bne.n	d732c <_ZN7FatFile4readEPvj+0x12a>
   d72c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d72c4:	d332      	bcc.n	d732c <_ZN7FatFile4readEPvj+0x12a>
   d72c6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d72c8:	4299      	cmp	r1, r3
   d72ca:	d102      	bne.n	d72d2 <_ZN7FatFile4readEPvj+0xd0>
   d72cc:	e02e      	b.n	d732c <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d72ce:	1ba8      	subs	r0, r5, r6
   d72d0:	e047      	b.n	d7362 <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d72d2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d72d6:	d31b      	bcc.n	d7310 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d72d8:	7822      	ldrb	r2, [r4, #0]
   d72da:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d72dc:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d72e0:	d406      	bmi.n	d72f0 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d72e2:	7902      	ldrb	r2, [r0, #4]
   d72e4:	ebc8 0202 	rsb	r2, r8, r2
   d72e8:	b2d2      	uxtb	r2, r2
   d72ea:	4592      	cmp	sl, r2
   d72ec:	bf28      	it	cs
   d72ee:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d72f0:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d72f2:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d72f6:	d207      	bcs.n	d7308 <_ZN7FatFile4readEPvj+0x106>
   d72f8:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d72fa:	4653      	mov	r3, sl
   d72fc:	464a      	mov	r2, r9
   d72fe:	6800      	ldr	r0, [r0, #0]
   d7300:	f000 fe3c 	bl	d7f7c <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d7304:	b960      	cbnz	r0, d7320 <_ZN7FatFile4readEPvj+0x11e>
   d7306:	e78d      	b.n	d7224 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d7308:	4453      	add	r3, sl
   d730a:	4299      	cmp	r1, r3
   d730c:	d321      	bcc.n	d7352 <_ZN7FatFile4readEPvj+0x150>
   d730e:	e7f3      	b.n	d72f8 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d7310:	464a      	mov	r2, r9
   d7312:	6800      	ldr	r0, [r0, #0]
   d7314:	f000 fdea 	bl	d7eec <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d7318:	2800      	cmp	r0, #0
   d731a:	d083      	beq.n	d7224 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d731c:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d7320:	6963      	ldr	r3, [r4, #20]
   d7322:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d7324:	44b9      	add	r9, r7
    m_curPosition += n;
   d7326:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d7328:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d732a:	e798      	b.n	d725e <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d732c:	2200      	movs	r2, #0
   d732e:	3024      	adds	r0, #36	; 0x24
   d7330:	f000 fae9 	bl	d7906 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d7334:	2800      	cmp	r0, #0
   d7336:	f43f af75 	beq.w	d7224 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d733a:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d733e:	42b7      	cmp	r7, r6
   d7340:	bf28      	it	cs
   d7342:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d7344:	eb00 010a 	add.w	r1, r0, sl
   d7348:	463a      	mov	r2, r7
   d734a:	4648      	mov	r0, r9
   d734c:	f004 fc97 	bl	dbc7e <memcpy>
   d7350:	e7e6      	b.n	d7320 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d7352:	3024      	adds	r0, #36	; 0x24
   d7354:	9101      	str	r1, [sp, #4]
   d7356:	f000 faaf 	bl	d78b8 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d735a:	9901      	ldr	r1, [sp, #4]
   d735c:	2800      	cmp	r0, #0
   d735e:	d1cb      	bne.n	d72f8 <_ZN7FatFile4readEPvj+0xf6>
   d7360:	e760      	b.n	d7224 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d7362:	b003      	add	sp, #12
   d7364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7368 <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d7368:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d736a:	2201      	movs	r2, #1
   d736c:	f10d 0107 	add.w	r1, sp, #7
   d7370:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d7372:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d7374:	6905      	ldr	r5, [r0, #16]
   d7376:	f7ff ff44 	bl	d7202 <_ZN7FatFile4readEPvj>
   d737a:	2801      	cmp	r0, #1
   d737c:	bf05      	ittet	eq
   d737e:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d7382:	6166      	streq	r6, [r4, #20]
   d7384:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = pos->cluster;
   d7388:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d738a:	b002      	add	sp, #8
   d738c:	bd70      	pop	{r4, r5, r6, pc}

000d738e <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d738e:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d7390:	6943      	ldr	r3, [r0, #20]
   d7392:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d7396:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d7398:	b105      	cbz	r5, d739c <_ZN7FatFile12readDirCacheEb+0xe>
   d739a:	b969      	cbnz	r1, d73b8 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d739c:	2201      	movs	r2, #1
   d739e:	f10d 0107 	add.w	r1, sp, #7
   d73a2:	4620      	mov	r0, r4
   d73a4:	f7ff ff2d 	bl	d7202 <_ZN7FatFile4readEPvj>
   d73a8:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d73aa:	2801      	cmp	r0, #1
   d73ac:	d001      	beq.n	d73b2 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d73ae:	2000      	movs	r0, #0
   d73b0:	e008      	b.n	d73c4 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d73b2:	6963      	ldr	r3, [r4, #20]
   d73b4:	331f      	adds	r3, #31
   d73b6:	e000      	b.n	d73ba <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d73b8:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d73ba:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d73bc:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d73be:	3030      	adds	r0, #48	; 0x30
   d73c0:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d73c4:	b003      	add	sp, #12
   d73c6:	bd30      	pop	{r4, r5, pc}

000d73c8 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d73c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d73cc:	460e      	mov	r6, r1
   d73ce:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d73d0:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d73d2:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d73d4:	2900      	cmp	r1, #0
   d73d6:	d039      	beq.n	d744c <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d73d8:	6945      	ldr	r5, [r0, #20]
   d73da:	42b5      	cmp	r5, r6
   d73dc:	d03a      	beq.n	d7454 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d73de:	b90e      	cbnz	r6, d73e4 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d73e0:	6106      	str	r6, [r0, #16]
    goto done;
   d73e2:	e031      	b.n	d7448 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d73e4:	070b      	lsls	r3, r1, #28
   d73e6:	d503      	bpl.n	d73f0 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d73e8:	69c3      	ldr	r3, [r0, #28]
   d73ea:	429e      	cmp	r6, r3
   d73ec:	d82e      	bhi.n	d744c <_ZN7FatFile7seekSetEm+0x84>
   d73ee:	e007      	b.n	d7400 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d73f0:	0688      	lsls	r0, r1, #26
   d73f2:	d505      	bpl.n	d7400 <_ZN7FatFile7seekSetEm+0x38>
   d73f4:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d73f6:	891b      	ldrh	r3, [r3, #8]
   d73f8:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d73fc:	d826      	bhi.n	d744c <_ZN7FatFile7seekSetEm+0x84>
   d73fe:	e023      	b.n	d7448 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d7400:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d7404:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d7408:	1e6a      	subs	r2, r5, #1
   d740a:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d740e:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d7410:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d7412:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d7414:	429a      	cmp	r2, r3
   d7416:	d800      	bhi.n	d741a <_ZN7FatFile7seekSetEm+0x52>
   d7418:	b94d      	cbnz	r5, d742e <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d741a:	064a      	lsls	r2, r1, #25
   d741c:	bf4c      	ite	mi
   d741e:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d7422:	6a22      	ldrpl	r2, [r4, #32]
   d7424:	6122      	str	r2, [r4, #16]
   d7426:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d7428:	f104 0810 	add.w	r8, r4, #16
   d742c:	e00a      	b.n	d7444 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d742e:	1a9b      	subs	r3, r3, r2
   d7430:	e7f9      	b.n	d7426 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d7432:	4642      	mov	r2, r8
   d7434:	6921      	ldr	r1, [r4, #16]
   d7436:	68a0      	ldr	r0, [r4, #8]
   d7438:	f000 fa8f 	bl	d795a <_ZN9FatVolume6fatGetEmPm>
   d743c:	2800      	cmp	r0, #0
   d743e:	f105 35ff 	add.w	r5, r5, #4294967295
   d7442:	dd03      	ble.n	d744c <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d7444:	2d00      	cmp	r5, #0
   d7446:	d1f4      	bne.n	d7432 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d7448:	6166      	str	r6, [r4, #20]
   d744a:	e003      	b.n	d7454 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d744c:	6127      	str	r7, [r4, #16]
  return false;
   d744e:	2000      	movs	r0, #0
   d7450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d7454:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d7456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d745a <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d745a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d745c:	460f      	mov	r7, r1
   d745e:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d7460:	2100      	movs	r1, #0
   d7462:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d7464:	4604      	mov	r4, r0
   d7466:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d7468:	f004 fc14 	bl	dbc94 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d746c:	68b8      	ldr	r0, [r7, #8]
   d746e:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d7470:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d7474:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d7476:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d747a:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d747c:	6a3b      	ldr	r3, [r7, #32]
   d747e:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d7480:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d7482:	7acb      	ldrb	r3, [r1, #11]
   d7484:	071d      	lsls	r5, r3, #28
   d7486:	d44c      	bmi.n	d7522 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d7488:	1883      	adds	r3, r0, r2
   d748a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d748e:	f003 0317 	and.w	r3, r3, #23
   d7492:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d7494:	7ac9      	ldrb	r1, [r1, #11]
   d7496:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d749a:	bf04      	itt	eq
   d749c:	f043 0308 	orreq.w	r3, r3, #8
   d74a0:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d74a2:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d74a6:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d74a8:	f006 0303 	and.w	r3, r6, #3
   d74ac:	2b01      	cmp	r3, #1
   d74ae:	d009      	beq.n	d74c4 <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d74b0:	2b02      	cmp	r3, #2
   d74b2:	d005      	beq.n	d74c0 <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d74b4:	2b00      	cmp	r3, #0
   d74b6:	d134      	bne.n	d7522 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d74b8:	0571      	lsls	r1, r6, #21
   d74ba:	d432      	bmi.n	d7522 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d74bc:	2301      	movs	r3, #1
   d74be:	e002      	b.n	d74c6 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d74c0:	2303      	movs	r3, #3
   d74c2:	e000      	b.n	d74c6 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d74c4:	2302      	movs	r3, #2
   d74c6:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d74c8:	78a1      	ldrb	r1, [r4, #2]
   d74ca:	078b      	lsls	r3, r1, #30
   d74cc:	d503      	bpl.n	d74d6 <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d74ce:	7823      	ldrb	r3, [r4, #0]
   d74d0:	f013 0f11 	tst.w	r3, #17
   d74d4:	d125      	bne.n	d7522 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d74d6:	b24b      	sxtb	r3, r1
   d74d8:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d74dc:	f006 0108 	and.w	r1, r6, #8
   d74e0:	bf14      	ite	ne
   d74e2:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d74e6:	2700      	moveq	r7, #0
   d74e8:	4319      	orrs	r1, r3
   d74ea:	4339      	orrs	r1, r7
   d74ec:	70a1      	strb	r1, [r4, #2]
   d74ee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d74f0:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d74f2:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d74f4:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d74f6:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d74fa:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d74fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d7502:	d504      	bpl.n	d750e <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d7504:	b181      	cbz	r1, d7528 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d7506:	f000 fac8 	bl	d7a9a <_ZN9FatVolume9freeChainEm>
   d750a:	b968      	cbnz	r0, d7528 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d750c:	e009      	b.n	d7522 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d750e:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d7510:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d7512:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d7514:	0473      	lsls	r3, r6, #17
   d7516:	d50c      	bpl.n	d7532 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d7518:	69e1      	ldr	r1, [r4, #28]
   d751a:	4620      	mov	r0, r4
   d751c:	f7ff ff54 	bl	d73c8 <_ZN7FatFile7seekSetEm>
   d7520:	b938      	cbnz	r0, d7532 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d7522:	2000      	movs	r0, #0
   d7524:	7020      	strb	r0, [r4, #0]
  return false;
   d7526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d7528:	78a3      	ldrb	r3, [r4, #2]
   d752a:	f043 0304 	orr.w	r3, r3, #4
   d752e:	70a3      	strb	r3, [r4, #2]
   d7530:	e7f0      	b.n	d7514 <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d7532:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d7534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7536 <_ZN7FatFile8openNextEPS_i>:
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   d7536:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   d753a:	7803      	ldrb	r3, [r0, #0]
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   d753c:	4606      	mov	r6, r0
   d753e:	460d      	mov	r5, r1
   d7540:	4617      	mov	r7, r2
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   d7542:	bb53      	cbnz	r3, d759a <_ZN7FatFile8openNextEPS_i+0x64>
   d7544:	780b      	ldrb	r3, [r1, #0]
   d7546:	f013 0f70 	tst.w	r3, #112	; 0x70
   d754a:	d026      	beq.n	d759a <_ZN7FatFile8openNextEPS_i+0x64>
   d754c:	694c      	ldr	r4, [r1, #20]
   d754e:	f014 041f 	ands.w	r4, r4, #31
   d7552:	d122      	bne.n	d759a <_ZN7FatFile8openNextEPS_i+0x64>
   d7554:	46a0      	mov	r8, r4
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    dir_t* dir = dirFile->readDirCache();
   d7556:	2100      	movs	r1, #0
   d7558:	4628      	mov	r0, r5
   d755a:	f8d5 9014 	ldr.w	r9, [r5, #20]
   d755e:	f7ff ff16 	bl	d738e <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d7562:	b1d0      	cbz	r0, d759a <_ZN7FatFile8openNextEPS_i+0x64>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
   d7564:	7803      	ldrb	r3, [r0, #0]
   d7566:	b1c3      	cbz	r3, d759a <_ZN7FatFile8openNextEPS_i+0x64>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   d7568:	2b2e      	cmp	r3, #46	; 0x2e
   d756a:	d101      	bne.n	d7570 <_ZN7FatFile8openNextEPS_i+0x3a>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
        lfnOrd = ldir->ord & 0X1F;
        chksum = ldir->chksum;
      }
    } else {
      lfnOrd = 0;
   d756c:	2400      	movs	r4, #0
   d756e:	e7f2      	b.n	d7556 <_ZN7FatFile8openNextEPS_i+0x20>
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   d7570:	2be5      	cmp	r3, #229	; 0xe5
   d7572:	d0fb      	beq.n	d756c <_ZN7FatFile8openNextEPS_i+0x36>
   d7574:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d7576:	f011 0f08 	tst.w	r1, #8
   d757a:	d105      	bne.n	d7588 <_ZN7FatFile8openNextEPS_i+0x52>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   d757c:	b17c      	cbz	r4, d759e <_ZN7FatFile8openNextEPS_i+0x68>
   d757e:	f7ff fa06 	bl	d698e <_ZN7FatFile11lfnChecksumEPh>
   d7582:	4580      	cmp	r8, r0
   d7584:	d109      	bne.n	d759a <_ZN7FatFile8openNextEPS_i+0x64>
   d7586:	e00a      	b.n	d759e <_ZN7FatFile8openNextEPS_i+0x68>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d7588:	290f      	cmp	r1, #15
   d758a:	d1ef      	bne.n	d756c <_ZN7FatFile8openNextEPS_i+0x36>
      ldir = reinterpret_cast<ldir_t*>(dir);
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   d758c:	0659      	lsls	r1, r3, #25
   d758e:	d5e2      	bpl.n	d7556 <_ZN7FatFile8openNextEPS_i+0x20>
        lfnOrd = ldir->ord & 0X1F;
   d7590:	f003 041f 	and.w	r4, r3, #31
        chksum = ldir->chksum;
   d7594:	f890 800d 	ldrb.w	r8, [r0, #13]
   d7598:	e7dd      	b.n	d7556 <_ZN7FatFile8openNextEPS_i+0x20>
      lfnOrd = 0;
    }
  }

fail:
  return false;
   d759a:	2000      	movs	r0, #0
   d759c:	e007      	b.n	d75ae <_ZN7FatFile8openNextEPS_i+0x78>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   d759e:	9400      	str	r4, [sp, #0]
   d75a0:	463b      	mov	r3, r7
   d75a2:	f3c9 124f 	ubfx	r2, r9, #5, #16
   d75a6:	4629      	mov	r1, r5
   d75a8:	4630      	mov	r0, r6
   d75aa:	f7ff ff56 	bl	d745a <_ZN7FatFile15openCachedEntryEPS_tih>
    }
  }

fail:
  return false;
}
   d75ae:	b003      	add	sp, #12
   d75b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d75b4 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d75b4:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d75b6:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d75b8:	4604      	mov	r4, r0
  if (!isOpen()) {
   d75ba:	b90b      	cbnz	r3, d75c0 <_ZN7FatFile4syncEv+0xc>
    return true;
   d75bc:	2001      	movs	r0, #1
   d75be:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d75c0:	7883      	ldrb	r3, [r0, #2]
   d75c2:	075a      	lsls	r2, r3, #29
   d75c4:	d523      	bpl.n	d760e <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d75c6:	2101      	movs	r1, #1
   d75c8:	f7ff fdca 	bl	d7160 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d75cc:	4605      	mov	r5, r0
   d75ce:	b928      	cbnz	r0, d75dc <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d75d0:	7863      	ldrb	r3, [r4, #1]
   d75d2:	f043 0301 	orr.w	r3, r3, #1
   d75d6:	7063      	strb	r3, [r4, #1]
  return false;
   d75d8:	2000      	movs	r0, #0
   d75da:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d75dc:	7803      	ldrb	r3, [r0, #0]
   d75de:	2be5      	cmp	r3, #229	; 0xe5
   d75e0:	d0f6      	beq.n	d75d0 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d75e2:	7823      	ldrb	r3, [r4, #0]
   d75e4:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d75e6:	bf44      	itt	mi
   d75e8:	69e3      	ldrmi	r3, [r4, #28]
   d75ea:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d75ec:	8c23      	ldrh	r3, [r4, #32]
   d75ee:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d75f0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d75f2:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d75f4:	4b09      	ldr	r3, [pc, #36]	; (d761c <_ZN7FatFile4syncEv+0x68>)
   d75f6:	681b      	ldr	r3, [r3, #0]
   d75f8:	b12b      	cbz	r3, d7606 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d75fa:	f100 0116 	add.w	r1, r0, #22
   d75fe:	3018      	adds	r0, #24
   d7600:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d7602:	8b2b      	ldrh	r3, [r5, #24]
   d7604:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d7606:	78a3      	ldrb	r3, [r4, #2]
   d7608:	f023 0304 	bic.w	r3, r3, #4
   d760c:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d760e:	68a0      	ldr	r0, [r4, #8]
   d7610:	f7ff f9b0 	bl	d6974 <_ZN9FatVolume9cacheSyncEv>
   d7614:	2800      	cmp	r0, #0
   d7616:	d0db      	beq.n	d75d0 <_ZN7FatFile4syncEv+0x1c>
   d7618:	e7d0      	b.n	d75bc <_ZN7FatFile4syncEv+0x8>
   d761a:	bf00      	nop
   d761c:	2003de5c 	.word	0x2003de5c

000d7620 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d7620:	b510      	push	{r4, lr}
   d7622:	4604      	mov	r4, r0
  bool rtn = sync();
   d7624:	f7ff ffc6 	bl	d75b4 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d7628:	2300      	movs	r3, #0
   d762a:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d762c:	bd10      	pop	{r4, pc}

000d762e <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d762e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7630:	b093      	sub	sp, #76	; 0x4c
   d7632:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d7634:	2300      	movs	r3, #0
   d7636:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d763a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d763e:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d7640:	9201      	str	r2, [sp, #4]
   d7642:	4606      	mov	r6, r0
   d7644:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d7646:	b10b      	cbz	r3, d764c <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d7648:	2000      	movs	r0, #0
   d764a:	e03d      	b.n	d76c8 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d764c:	780b      	ldrb	r3, [r1, #0]
   d764e:	f013 0f70 	tst.w	r3, #112	; 0x70
   d7652:	d0f9      	beq.n	d7648 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d7654:	7813      	ldrb	r3, [r2, #0]
   d7656:	2b2f      	cmp	r3, #47	; 0x2f
   d7658:	d112      	bne.n	d7680 <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d765a:	9b01      	ldr	r3, [sp, #4]
   d765c:	781a      	ldrb	r2, [r3, #0]
   d765e:	2a2f      	cmp	r2, #47	; 0x2f
   d7660:	d102      	bne.n	d7668 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d7662:	3301      	adds	r3, #1
   d7664:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d7666:	e7f8      	b.n	d765a <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d7668:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d766a:	b91a      	cbnz	r2, d7674 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d766c:	4630      	mov	r0, r6
   d766e:	f7ff fdb0 	bl	d71d2 <_ZN7FatFile8openRootEP9FatVolume>
   d7672:	e029      	b.n	d76c8 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d7674:	a809      	add	r0, sp, #36	; 0x24
   d7676:	f7ff fdac 	bl	d71d2 <_ZN7FatFile8openRootEP9FatVolume>
   d767a:	2800      	cmp	r0, #0
   d767c:	d0e4      	beq.n	d7648 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d767e:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d7680:	aa01      	add	r2, sp, #4
   d7682:	a903      	add	r1, sp, #12
   d7684:	9801      	ldr	r0, [sp, #4]
   d7686:	f7ff f9a9 	bl	d69dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d768a:	2800      	cmp	r0, #0
   d768c:	d0dc      	beq.n	d7648 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d768e:	9b01      	ldr	r3, [sp, #4]
   d7690:	781b      	ldrb	r3, [r3, #0]
   d7692:	b19b      	cbz	r3, d76bc <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d7694:	2300      	movs	r3, #0
   d7696:	aa03      	add	r2, sp, #12
   d7698:	4621      	mov	r1, r4
   d769a:	4630      	mov	r0, r6
   d769c:	f7ff fb42 	bl	d6d24 <_ZN7FatFile4openEPS_P7fname_ti>
   d76a0:	2800      	cmp	r0, #0
   d76a2:	d0d1      	beq.n	d7648 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d76a4:	4635      	mov	r5, r6
   d76a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d76a8:	ac09      	add	r4, sp, #36	; 0x24
   d76aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d76ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d76ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d76b0:	682b      	ldr	r3, [r5, #0]
   d76b2:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d76b4:	4630      	mov	r0, r6
   d76b6:	f7ff ffb3 	bl	d7620 <_ZN7FatFile5closeEv>
   d76ba:	e7e0      	b.n	d767e <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d76bc:	463b      	mov	r3, r7
   d76be:	aa03      	add	r2, sp, #12
   d76c0:	4621      	mov	r1, r4
   d76c2:	4630      	mov	r0, r6
   d76c4:	f7ff fb2e 	bl	d6d24 <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d76c8:	b013      	add	sp, #76	; 0x4c
   d76ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d76cc <_ZN7FatFile6removeEPS_PKc>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove(FatFile* dirFile, const char* path) {
   d76cc:	b500      	push	{lr}
   d76ce:	b08b      	sub	sp, #44	; 0x2c
   d76d0:	2300      	movs	r3, #0
   d76d2:	f88d 3004 	strb.w	r3, [sp, #4]
   d76d6:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile file;
  if (!file.open(dirFile, path, O_WRONLY)) {
   d76da:	460a      	mov	r2, r1
   d76dc:	2301      	movs	r3, #1
   d76de:	4601      	mov	r1, r0
   d76e0:	a801      	add	r0, sp, #4
   d76e2:	f7ff ffa4 	bl	d762e <_ZN7FatFile4openEPS_PKci>
   d76e6:	b110      	cbz	r0, d76ee <_ZN7FatFile6removeEPS_PKc+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return file.remove();
   d76e8:	a801      	add	r0, sp, #4
   d76ea:	f7ff fa63 	bl	d6bb4 <_ZN7FatFile6removeEv>

fail:
  return false;
}
   d76ee:	b00b      	add	sp, #44	; 0x2c
   d76f0:	f85d fb04 	ldr.w	pc, [sp], #4

000d76f4 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d76f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d76f8:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d76fa:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d76fc:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d76fe:	4604      	mov	r4, r0
   d7700:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d7702:	d508      	bpl.n	d7716 <_ZN7FatFile5writeEPKvj+0x22>
   d7704:	7883      	ldrb	r3, [r0, #2]
   d7706:	079a      	lsls	r2, r3, #30
   d7708:	d505      	bpl.n	d7716 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d770a:	071b      	lsls	r3, r3, #28
   d770c:	d50b      	bpl.n	d7726 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d770e:	69e1      	ldr	r1, [r4, #28]
   d7710:	f7ff fe5a 	bl	d73c8 <_ZN7FatFile7seekSetEm>
   d7714:	b938      	cbnz	r0, d7726 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d7716:	7863      	ldrb	r3, [r4, #1]
   d7718:	f043 0301 	orr.w	r3, r3, #1
   d771c:	7063      	strb	r3, [r4, #1]
  return -1;
   d771e:	f04f 30ff 	mov.w	r0, #4294967295
   d7722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d7726:	6963      	ldr	r3, [r4, #20]
   d7728:	43db      	mvns	r3, r3
   d772a:	4598      	cmp	r8, r3
   d772c:	d8f3      	bhi.n	d7716 <_ZN7FatFile5writeEPKvj+0x22>
   d772e:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d7730:	f04f 0a00 	mov.w	sl, #0
   d7734:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d7736:	2e00      	cmp	r6, #0
   d7738:	f000 8081 	beq.w	d783e <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d773c:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d773e:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d7740:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d7744:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d7748:	d11c      	bne.n	d7784 <_ZN7FatFile5writeEPKvj+0x90>
   d774a:	b9df      	cbnz	r7, d7784 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d774c:	6921      	ldr	r1, [r4, #16]
   d774e:	b171      	cbz	r1, d776e <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d7750:	f104 0210 	add.w	r2, r4, #16
   d7754:	f000 f901 	bl	d795a <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d7758:	2800      	cmp	r0, #0
   d775a:	dbdc      	blt.n	d7716 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d775c:	f040 808e 	bne.w	d787c <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d7760:	4620      	mov	r0, r4
   d7762:	f7ff fcb2 	bl	d70ca <_ZN7FatFile10addClusterEv>
   d7766:	2800      	cmp	r0, #0
   d7768:	f040 8088 	bne.w	d787c <_ZN7FatFile5writeEPKvj+0x188>
   d776c:	e7d3      	b.n	d7716 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d776e:	6a23      	ldr	r3, [r4, #32]
   d7770:	b93b      	cbnz	r3, d7782 <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d7772:	4620      	mov	r0, r4
   d7774:	f7ff fca9 	bl	d70ca <_ZN7FatFile10addClusterEv>
   d7778:	2800      	cmp	r0, #0
   d777a:	d0cc      	beq.n	d7716 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d777c:	6923      	ldr	r3, [r4, #16]
   d777e:	6223      	str	r3, [r4, #32]
   d7780:	e000      	b.n	d7784 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d7782:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d7784:	6921      	ldr	r1, [r4, #16]
   d7786:	68a0      	ldr	r0, [r4, #8]
   d7788:	f000 f8e1 	bl	d794e <_ZNK9FatVolume17clusterFirstBlockEm>
   d778c:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d778e:	b917      	cbnz	r7, d7796 <_ZN7FatFile5writeEPKvj+0xa2>
   d7790:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7794:	d221      	bcs.n	d77da <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d7796:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d779a:	42b5      	cmp	r5, r6
   d779c:	bf28      	it	cs
   d779e:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d77a0:	b937      	cbnz	r7, d77b0 <_ZN7FatFile5writeEPKvj+0xbc>
   d77a2:	6963      	ldr	r3, [r4, #20]
   d77a4:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d77a6:	4293      	cmp	r3, r2
   d77a8:	bf34      	ite	cc
   d77aa:	2201      	movcc	r2, #1
   d77ac:	2205      	movcs	r2, #5
   d77ae:	e000      	b.n	d77b2 <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d77b0:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d77b2:	68a0      	ldr	r0, [r4, #8]
   d77b4:	3024      	adds	r0, #36	; 0x24
   d77b6:	f000 f8a6 	bl	d7906 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d77ba:	2800      	cmp	r0, #0
   d77bc:	d0ab      	beq.n	d7716 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d77be:	4438      	add	r0, r7
   d77c0:	462a      	mov	r2, r5
   d77c2:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d77c4:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d77c6:	f004 fa5a 	bl	dbc7e <memcpy>
      if (512 == (n + blockOffset)) {
   d77ca:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d77ce:	d130      	bne.n	d7832 <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d77d0:	68a0      	ldr	r0, [r4, #8]
   d77d2:	3024      	adds	r0, #36	; 0x24
   d77d4:	f000 f870 	bl	d78b8 <_ZN8FatCache4syncEv>
   d77d8:	e017      	b.n	d780a <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d77da:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d77de:	68a0      	ldr	r0, [r4, #8]
   d77e0:	d315      	bcc.n	d780e <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d77e2:	7902      	ldrb	r2, [r0, #4]
   d77e4:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d77e6:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d77e8:	b2d2      	uxtb	r2, r2
   d77ea:	4293      	cmp	r3, r2
   d77ec:	bf28      	it	cs
   d77ee:	4613      	movcs	r3, r2
   d77f0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d77f2:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d77f4:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d77f8:	d302      	bcc.n	d7800 <_ZN7FatFile5writeEPKvj+0x10c>
   d77fa:	441a      	add	r2, r3
   d77fc:	4291      	cmp	r1, r2
   d77fe:	d337      	bcc.n	d7870 <_ZN7FatFile5writeEPKvj+0x17c>
   d7800:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d7802:	464a      	mov	r2, r9
   d7804:	6838      	ldr	r0, [r7, #0]
   d7806:	f000 fc6d 	bl	d80e4 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d780a:	b990      	cbnz	r0, d7832 <_ZN7FatFile5writeEPKvj+0x13e>
   d780c:	e783      	b.n	d7716 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d780e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d7810:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d7812:	bf02      	ittt	eq
   d7814:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d7818:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d781c:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d781e:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d7820:	464a      	mov	r2, r9
   d7822:	6818      	ldr	r0, [r3, #0]
   d7824:	f000 fbec 	bl	d8000 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d7828:	2800      	cmp	r0, #0
   d782a:	f43f af74 	beq.w	d7716 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d782e:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d7832:	6963      	ldr	r3, [r4, #20]
   d7834:	442b      	add	r3, r5
   d7836:	6163      	str	r3, [r4, #20]
    src += n;
   d7838:	44a9      	add	r9, r5
    nToWrite -= n;
   d783a:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d783c:	e77a      	b.n	d7734 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d783e:	69e2      	ldr	r2, [r4, #28]
   d7840:	4293      	cmp	r3, r2
   d7842:	d901      	bls.n	d7848 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d7844:	61e3      	str	r3, [r4, #28]
   d7846:	e002      	b.n	d784e <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d7848:	4b0f      	ldr	r3, [pc, #60]	; (d7888 <_ZN7FatFile5writeEPKvj+0x194>)
   d784a:	681b      	ldr	r3, [r3, #0]
   d784c:	b11b      	cbz	r3, d7856 <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d784e:	78a3      	ldrb	r3, [r4, #2]
   d7850:	f043 0304 	orr.w	r3, r3, #4
   d7854:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d7856:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d785a:	2b00      	cmp	r3, #0
   d785c:	db02      	blt.n	d7864 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d785e:	4640      	mov	r0, r8
   d7860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d7864:	4620      	mov	r0, r4
   d7866:	f7ff fea5 	bl	d75b4 <_ZN7FatFile4syncEv>
   d786a:	2800      	cmp	r0, #0
   d786c:	d1f7      	bne.n	d785e <_ZN7FatFile5writeEPKvj+0x16a>
   d786e:	e752      	b.n	d7716 <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d7870:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d7874:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d7878:	62c2      	str	r2, [r0, #44]	; 0x2c
   d787a:	e7c1      	b.n	d7800 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d787c:	6921      	ldr	r1, [r4, #16]
   d787e:	68a0      	ldr	r0, [r4, #8]
   d7880:	f000 f865 	bl	d794e <_ZNK9FatVolume17clusterFirstBlockEm>
   d7884:	4601      	mov	r1, r0
   d7886:	e783      	b.n	d7790 <_ZN7FatFile5writeEPKvj+0x9c>
   d7888:	2003de5c 	.word	0x2003de5c

000d788c <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d788c:	f000 bff4 	b.w	d8878 <HAL_Pin_Map>

000d7890 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d7890:	b570      	push	{r4, r5, r6, lr}
   d7892:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d7894:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d7896:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d7898:	b149      	cbz	r1, d78ae <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d789a:	f004 ff5f 	bl	dc75c <strlen>
   d789e:	682b      	ldr	r3, [r5, #0]
   d78a0:	4602      	mov	r2, r0
   d78a2:	4621      	mov	r1, r4
   d78a4:	4628      	mov	r0, r5
   d78a6:	68db      	ldr	r3, [r3, #12]
    }
   d78a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d78ac:	4718      	bx	r3
    }
   d78ae:	bd70      	pop	{r4, r5, r6, pc}

000d78b0 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d78b0:	f000 bfe2 	b.w	d8878 <HAL_Pin_Map>

000d78b4 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d78b4:	f000 bfe0 	b.w	d8878 <HAL_Pin_Map>

000d78b8 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d78b8:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d78ba:	7803      	ldrb	r3, [r0, #0]
   d78bc:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d78be:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d78c0:	d51e      	bpl.n	d7900 <_ZN8FatCache4syncEv+0x48>
   d78c2:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d78c4:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d78c6:	f100 060c 	add.w	r6, r0, #12
   d78ca:	4632      	mov	r2, r6
   d78cc:	6818      	ldr	r0, [r3, #0]
   d78ce:	f000 fb97 	bl	d8000 <_ZN9SdSpiCard10writeBlockEmPKh>
   d78d2:	4605      	mov	r5, r0
   d78d4:	b908      	cbnz	r0, d78da <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d78d6:	2500      	movs	r5, #0
   d78d8:	e013      	b.n	d7902 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d78da:	7823      	ldrb	r3, [r4, #0]
   d78dc:	079b      	lsls	r3, r3, #30
   d78de:	d404      	bmi.n	d78ea <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d78e0:	7823      	ldrb	r3, [r4, #0]
   d78e2:	f023 0301 	bic.w	r3, r3, #1
   d78e6:	7023      	strb	r3, [r4, #0]
   d78e8:	e00b      	b.n	d7902 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d78ea:	6863      	ldr	r3, [r4, #4]
   d78ec:	68a0      	ldr	r0, [r4, #8]
   d78ee:	6919      	ldr	r1, [r3, #16]
   d78f0:	4632      	mov	r2, r6
   d78f2:	4401      	add	r1, r0
   d78f4:	6818      	ldr	r0, [r3, #0]
   d78f6:	f000 fb83 	bl	d8000 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d78fa:	2800      	cmp	r0, #0
   d78fc:	d1f0      	bne.n	d78e0 <_ZN8FatCache4syncEv+0x28>
   d78fe:	e7ea      	b.n	d78d6 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d7900:	2501      	movs	r5, #1

fail:
  return false;
}
   d7902:	4628      	mov	r0, r5
   d7904:	bd70      	pop	{r4, r5, r6, pc}

000d7906 <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d7906:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d7908:	6883      	ldr	r3, [r0, #8]
   d790a:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d790c:	4604      	mov	r4, r0
   d790e:	460e      	mov	r6, r1
   d7910:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d7912:	d014      	beq.n	d793e <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d7914:	f7ff ffd0 	bl	d78b8 <_ZN8FatCache4syncEv>
   d7918:	b908      	cbnz	r0, d791e <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d791a:	2000      	movs	r0, #0
   d791c:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d791e:	076b      	lsls	r3, r5, #29
   d7920:	d503      	bpl.n	d792a <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d7922:	2300      	movs	r3, #0
   d7924:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d7926:	60a6      	str	r6, [r4, #8]
   d7928:	e009      	b.n	d793e <_ZN8FatCache4readEmh+0x38>
   d792a:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d792c:	f104 020c 	add.w	r2, r4, #12
   d7930:	4631      	mov	r1, r6
   d7932:	6818      	ldr	r0, [r3, #0]
   d7934:	f000 fada 	bl	d7eec <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d7938:	2800      	cmp	r0, #0
   d793a:	d1f2      	bne.n	d7922 <_ZN8FatCache4readEmh+0x1c>
   d793c:	e7ed      	b.n	d791a <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d793e:	7823      	ldrb	r3, [r4, #0]
   d7940:	4620      	mov	r0, r4
   d7942:	f005 0503 	and.w	r5, r5, #3
   d7946:	431d      	orrs	r5, r3
   d7948:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d794c:	bd70      	pop	{r4, r5, r6, pc}

000d794e <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d794e:	7983      	ldrb	r3, [r0, #6]
   d7950:	6940      	ldr	r0, [r0, #20]
   d7952:	3902      	subs	r1, #2
   d7954:	4099      	lsls	r1, r3
}
   d7956:	4408      	add	r0, r1
   d7958:	4770      	bx	lr

000d795a <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d795a:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d795c:	b570      	push	{r4, r5, r6, lr}
   d795e:	4605      	mov	r5, r0
   d7960:	460c      	mov	r4, r1
   d7962:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d7964:	d802      	bhi.n	d796c <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d7966:	f04f 30ff 	mov.w	r0, #4294967295
   d796a:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d796c:	69c3      	ldr	r3, [r0, #28]
   d796e:	4299      	cmp	r1, r3
   d7970:	d8f9      	bhi.n	d7966 <_ZN9FatVolume6fatGetEmPm+0xc>
   d7972:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d7974:	2b20      	cmp	r3, #32
   d7976:	d110      	bne.n	d799a <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d7978:	6981      	ldr	r1, [r0, #24]
   d797a:	2202      	movs	r2, #2
   d797c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d7980:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d7984:	f7ff ffbf 	bl	d7906 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d7988:	2800      	cmp	r0, #0
   d798a:	d0ec      	beq.n	d7966 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d798c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d7990:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d7994:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d7998:	e00f      	b.n	d79ba <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d799a:	2b10      	cmp	r3, #16
   d799c:	d1e3      	bne.n	d7966 <_ZN9FatVolume6fatGetEmPm+0xc>
   d799e:	6983      	ldr	r3, [r0, #24]
   d79a0:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d79a4:	2202      	movs	r2, #2
   d79a6:	4419      	add	r1, r3
   d79a8:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d79ac:	f7ff ffab 	bl	d7906 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d79b0:	2800      	cmp	r0, #0
   d79b2:	d0d8      	beq.n	d7966 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d79b4:	b2e4      	uxtb	r4, r4
   d79b6:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d79ba:	69ea      	ldr	r2, [r5, #28]
   d79bc:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d79be:	bf9a      	itte	ls
   d79c0:	6033      	strls	r3, [r6, #0]
  return 1;
   d79c2:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d79c4:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d79c6:	bd70      	pop	{r4, r5, r6, pc}

000d79c8 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d79c8:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d79ca:	b538      	push	{r3, r4, r5, lr}
   d79cc:	460c      	mov	r4, r1
   d79ce:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d79d0:	d801      	bhi.n	d79d6 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d79d2:	2000      	movs	r0, #0
   d79d4:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d79d6:	69c3      	ldr	r3, [r0, #28]
   d79d8:	4299      	cmp	r1, r3
   d79da:	d8fa      	bhi.n	d79d2 <_ZN9FatVolume6fatPutEmm+0xa>
   d79dc:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d79de:	2b20      	cmp	r3, #32
   d79e0:	d10e      	bne.n	d7a00 <_ZN9FatVolume6fatPutEmm+0x38>
   d79e2:	6981      	ldr	r1, [r0, #24]
   d79e4:	2203      	movs	r2, #3
   d79e6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d79ea:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d79ee:	f7ff ff8a 	bl	d7906 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d79f2:	2800      	cmp	r0, #0
   d79f4:	d0ed      	beq.n	d79d2 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d79f6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d79fa:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d79fe:	e00f      	b.n	d7a20 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d7a00:	2b10      	cmp	r3, #16
   d7a02:	d1e6      	bne.n	d79d2 <_ZN9FatVolume6fatPutEmm+0xa>
   d7a04:	6983      	ldr	r3, [r0, #24]
   d7a06:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d7a0a:	2203      	movs	r2, #3
   d7a0c:	4419      	add	r1, r3
   d7a0e:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d7a12:	f7ff ff78 	bl	d7906 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d7a16:	2800      	cmp	r0, #0
   d7a18:	d0db      	beq.n	d79d2 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d7a1a:	b2e4      	uxtb	r4, r4
   d7a1c:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d7a20:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d7a22:	bd38      	pop	{r3, r4, r5, pc}

000d7a24 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d7a24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d7a28:	68c4      	ldr	r4, [r0, #12]
   d7a2a:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d7a2c:	4605      	mov	r5, r0
   d7a2e:	460e      	mov	r6, r1
   d7a30:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d7a32:	d207      	bcs.n	d7a44 <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d7a34:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d7a36:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d7a38:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d7a3a:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d7a3c:	429c      	cmp	r4, r3
   d7a3e:	d903      	bls.n	d7a48 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d7a40:	b9cf      	cbnz	r7, d7a76 <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d7a42:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d7a44:	2701      	movs	r7, #1
   d7a46:	e7f7      	b.n	d7a38 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d7a48:	42a6      	cmp	r6, r4
   d7a4a:	d014      	beq.n	d7a76 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d7a4c:	aa01      	add	r2, sp, #4
   d7a4e:	4621      	mov	r1, r4
   d7a50:	4628      	mov	r0, r5
   d7a52:	f7ff ff82 	bl	d795a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d7a56:	2800      	cmp	r0, #0
   d7a58:	db0d      	blt.n	d7a76 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d7a5a:	d0ed      	beq.n	d7a38 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d7a5c:	9b01      	ldr	r3, [sp, #4]
   d7a5e:	2b00      	cmp	r3, #0
   d7a60:	d1ea      	bne.n	d7a38 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d7a62:	b107      	cbz	r7, d7a66 <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d7a64:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d7a66:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d7a6a:	4621      	mov	r1, r4
   d7a6c:	4628      	mov	r0, r5
   d7a6e:	f7ff ffab 	bl	d79c8 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d7a72:	4607      	mov	r7, r0
   d7a74:	b908      	cbnz	r0, d7a7a <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d7a76:	2700      	movs	r7, #0
   d7a78:	e00b      	b.n	d7a92 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d7a7a:	b916      	cbnz	r6, d7a82 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d7a7c:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d7a80:	e007      	b.n	d7a92 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d7a82:	4622      	mov	r2, r4
   d7a84:	4631      	mov	r1, r6
   d7a86:	4628      	mov	r0, r5
   d7a88:	f7ff ff9e 	bl	d79c8 <_ZN9FatVolume6fatPutEmm>
   d7a8c:	2800      	cmp	r0, #0
   d7a8e:	d1f5      	bne.n	d7a7c <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d7a90:	e7f1      	b.n	d7a76 <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d7a92:	4638      	mov	r0, r7
   d7a94:	b002      	add	sp, #8
   d7a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7a9a <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d7a9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7a9c:	4605      	mov	r5, r0
   d7a9e:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d7aa0:	aa01      	add	r2, sp, #4
   d7aa2:	4621      	mov	r1, r4
   d7aa4:	4628      	mov	r0, r5
   d7aa6:	f7ff ff58 	bl	d795a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d7aaa:	1e06      	subs	r6, r0, #0
   d7aac:	da01      	bge.n	d7ab2 <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d7aae:	2000      	movs	r0, #0
   d7ab0:	e00f      	b.n	d7ad2 <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d7ab2:	2200      	movs	r2, #0
   d7ab4:	4621      	mov	r1, r4
   d7ab6:	4628      	mov	r0, r5
   d7ab8:	f7ff ff86 	bl	d79c8 <_ZN9FatVolume6fatPutEmm>
   d7abc:	2800      	cmp	r0, #0
   d7abe:	d0f6      	beq.n	d7aae <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d7ac0:	68eb      	ldr	r3, [r5, #12]
   d7ac2:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d7ac4:	bf9c      	itt	ls
   d7ac6:	f104 34ff 	addls.w	r4, r4, #4294967295
   d7aca:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d7acc:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d7ace:	2e00      	cmp	r6, #0
   d7ad0:	d1e6      	bne.n	d7aa0 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d7ad2:	b002      	add	sp, #8
   d7ad4:	bd70      	pop	{r4, r5, r6, pc}

000d7ad6 <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d7ad6:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d7ad8:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d7ada:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d7adc:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d7ade:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d7ae0:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d7ae4:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d7ae6:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d7ae8:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d7aea:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d7aee:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d7af0:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d7af4:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d7af8:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d7afc:	b1a1      	cbz	r1, d7b28 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d7afe:	2904      	cmp	r1, #4
   d7b00:	d85d      	bhi.n	d7bbe <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d7b02:	4611      	mov	r1, r2
   d7b04:	3024      	adds	r0, #36	; 0x24
   d7b06:	f7ff fefe 	bl	d7906 <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d7b0a:	2800      	cmp	r0, #0
   d7b0c:	d057      	beq.n	d7bbe <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d7b0e:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d7b12:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d7b16:	065b      	lsls	r3, r3, #25
   d7b18:	d151      	bne.n	d7bbe <_ZN9FatVolume4initEh+0xe8>
   d7b1a:	351b      	adds	r5, #27
   d7b1c:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d7b20:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d7b24:	2d00      	cmp	r5, #0
   d7b26:	d04a      	beq.n	d7bbe <_ZN9FatVolume4initEh+0xe8>
   d7b28:	2200      	movs	r2, #0
   d7b2a:	4629      	mov	r1, r5
   d7b2c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d7b30:	f7ff fee9 	bl	d7906 <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d7b34:	2800      	cmp	r0, #0
   d7b36:	d042      	beq.n	d7bbe <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d7b38:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d7b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d7b40:	d13d      	bne.n	d7bbe <_ZN9FatVolume4initEh+0xe8>
   d7b42:	7c03      	ldrb	r3, [r0, #16]
   d7b44:	2b02      	cmp	r3, #2
   d7b46:	d13a      	bne.n	d7bbe <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d7b48:	89c3      	ldrh	r3, [r0, #14]
   d7b4a:	2b00      	cmp	r3, #0
   d7b4c:	d037      	beq.n	d7bbe <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d7b4e:	7b41      	ldrb	r1, [r0, #13]
   d7b50:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d7b52:	1e4b      	subs	r3, r1, #1
   d7b54:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d7b56:	2300      	movs	r3, #0
   d7b58:	71a3      	strb	r3, [r4, #6]
   d7b5a:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d7b5c:	2301      	movs	r3, #1
   d7b5e:	428b      	cmp	r3, r1
   d7b60:	d007      	beq.n	d7b72 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d7b62:	3e01      	subs	r6, #1
   d7b64:	d02b      	beq.n	d7bbe <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d7b66:	79a2      	ldrb	r2, [r4, #6]
   d7b68:	005b      	lsls	r3, r3, #1
   d7b6a:	3201      	adds	r2, #1
   d7b6c:	b2db      	uxtb	r3, r3
   d7b6e:	71a2      	strb	r2, [r4, #6]
   d7b70:	e7f5      	b.n	d7b5e <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d7b72:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d7b74:	b902      	cbnz	r2, d7b78 <_ZN9FatVolume4initEh+0xa2>
   d7b76:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d7b78:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d7b7a:	89c6      	ldrh	r6, [r0, #14]
   d7b7c:	442e      	add	r6, r5
   d7b7e:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d7b80:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d7b84:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d7b86:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d7b8a:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d7b8c:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d7b90:	0152      	lsls	r2, r2, #5
   d7b92:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d7b96:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d7b9a:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d7b9c:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d7ba0:	b903      	cbnz	r3, d7ba4 <_ZN9FatVolume4initEh+0xce>
   d7ba2:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d7ba4:	1aad      	subs	r5, r5, r2
   d7ba6:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d7ba8:	79a5      	ldrb	r5, [r4, #6]
   d7baa:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d7bae:	1c6b      	adds	r3, r5, #1
   d7bb0:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d7bb2:	f640 73f4 	movw	r3, #4084	; 0xff4
   d7bb6:	429d      	cmp	r5, r3
   d7bb8:	d803      	bhi.n	d7bc2 <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d7bba:	230c      	movs	r3, #12
   d7bbc:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d7bbe:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d7bc0:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d7bc2:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d7bc6:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d7bc8:	bf85      	ittet	hi
   d7bca:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d7bcc:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d7bce:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d7bd0:	2320      	movhi	r3, #32
   d7bd2:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d7bd4:	2001      	movs	r0, #1

fail:
  return false;
}
   d7bd6:	bd70      	pop	{r4, r5, r6, pc}

000d7bd8 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d7bd8:	f000 be4e 	b.w	d8878 <HAL_Pin_Map>

000d7bdc <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d7bdc:	f000 be4c 	b.w	d8878 <HAL_Pin_Map>

000d7be0 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d7be0:	f000 be4a 	b.w	d8878 <HAL_Pin_Map>

000d7be4 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d7be4:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d7be6:	4c0e      	ldr	r4, [pc, #56]	; (d7c20 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d7be8:	460e      	mov	r6, r1
   d7bea:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d7bec:	f000 ff04 	bl	d89f8 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d7bf0:	6823      	ldr	r3, [r4, #0]
   d7bf2:	1ac0      	subs	r0, r0, r3
   d7bf4:	4b0b      	ldr	r3, [pc, #44]	; (d7c24 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d7bf6:	4298      	cmp	r0, r3
   d7bf8:	d908      	bls.n	d7c0c <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7bfa:	f000 ff05 	bl	d8a08 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7bfe:	4b0a      	ldr	r3, [pc, #40]	; (d7c28 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d7c00:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d7c02:	f001 f945 	bl	d8e90 <spark_process>
   d7c06:	f000 fef7 	bl	d89f8 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d7c0a:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d7c0c:	f000 fefc 	bl	d8a08 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d7c10:	b280      	uxth	r0, r0
   d7c12:	1b80      	subs	r0, r0, r6
}
   d7c14:	42a8      	cmp	r0, r5
   d7c16:	bfd4      	ite	le
   d7c18:	2000      	movle	r0, #0
   d7c1a:	2001      	movgt	r0, #1
   d7c1c:	bd70      	pop	{r4, r5, r6, pc}
   d7c1e:	bf00      	nop
   d7c20:	2003de60 	.word	0x2003de60
   d7c24:	000186a0 	.word	0x000186a0
   d7c28:	2003e304 	.word	0x2003e304

000d7c2c <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d7c2c:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d7c2e:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d7c30:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d7c32:	b94d      	cbnz	r5, d7c48 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d7c34:	6840      	ldr	r0, [r0, #4]
   d7c36:	f000 fa7d 	bl	d8134 <_ZN14SdSpiAltDriver8activateEv>
   d7c3a:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d7c3c:	4629      	mov	r1, r5
   d7c3e:	7d18      	ldrb	r0, [r3, #20]
   d7c40:	f002 ffa1 	bl	dab86 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d7c44:	2301      	movs	r3, #1
   d7c46:	7223      	strb	r3, [r4, #8]
   d7c48:	bd38      	pop	{r3, r4, r5, pc}

000d7c4a <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d7c4a:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d7c4c:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d7c4e:	4604      	mov	r4, r0
  if (m_spiActive) {
   d7c50:	b16b      	cbz	r3, d7c6e <_ZN9SdSpiCard7spiStopEv+0x24>
   d7c52:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d7c54:	2101      	movs	r1, #1
   d7c56:	7d18      	ldrb	r0, [r3, #20]
   d7c58:	f002 ff95 	bl	dab86 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7c5c:	21ff      	movs	r1, #255	; 0xff
   d7c5e:	6860      	ldr	r0, [r4, #4]
   d7c60:	f000 fa9a 	bl	d8198 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d7c64:	6860      	ldr	r0, [r4, #4]
   d7c66:	f000 fa79 	bl	d815c <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d7c6a:	2300      	movs	r3, #0
   d7c6c:	7223      	strb	r3, [r4, #8]
   d7c6e:	bd10      	pop	{r4, pc}

000d7c70 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d7c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7c72:	4604      	mov	r4, r0
   d7c74:	460d      	mov	r5, r1
   d7c76:	4616      	mov	r6, r2
   d7c78:	f000 fec6 	bl	d8a08 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d7c7c:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7c7e:	6860      	ldr	r0, [r4, #4]
   d7c80:	f000 fa6f 	bl	d8162 <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d7c84:	28ff      	cmp	r0, #255	; 0xff
   d7c86:	7260      	strb	r0, [r4, #9]
   d7c88:	d109      	bne.n	d7c9e <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d7c8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7c8e:	4639      	mov	r1, r7
   d7c90:	4620      	mov	r0, r4
   d7c92:	f7ff ffa7 	bl	d7be4 <_ZN9SdSpiCard10isTimedOutEtt>
   d7c96:	2800      	cmp	r0, #0
   d7c98:	d0f1      	beq.n	d7c7e <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7c9a:	2355      	movs	r3, #85	; 0x55
   d7c9c:	e00b      	b.n	d7cb6 <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d7c9e:	28fe      	cmp	r0, #254	; 0xfe
   d7ca0:	d001      	beq.n	d7ca6 <_ZN9SdSpiCard8readDataEPhj+0x36>
   d7ca2:	2350      	movs	r3, #80	; 0x50
   d7ca4:	e007      	b.n	d7cb6 <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d7ca6:	4632      	mov	r2, r6
   d7ca8:	4629      	mov	r1, r5
   d7caa:	6860      	ldr	r0, [r4, #4]
   d7cac:	f000 fa5e 	bl	d816c <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d7cb0:	7260      	strb	r0, [r4, #9]
   d7cb2:	b130      	cbz	r0, d7cc2 <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7cb4:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d7cb6:	4620      	mov	r0, r4
   d7cb8:	7023      	strb	r3, [r4, #0]
   d7cba:	f7ff ffc6 	bl	d7c4a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7cbe:	2000      	movs	r0, #0
}
   d7cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7cc2:	6860      	ldr	r0, [r4, #4]
   d7cc4:	f000 fa4d 	bl	d8162 <_ZN14SdSpiAltDriver7receiveEv>
   d7cc8:	6860      	ldr	r0, [r4, #4]
   d7cca:	f000 fa4a 	bl	d8162 <_ZN14SdSpiAltDriver7receiveEv>
   d7cce:	2001      	movs	r0, #1
   d7cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7cd2 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d7cd2:	b570      	push	{r4, r5, r6, lr}
   d7cd4:	4604      	mov	r4, r0
   d7cd6:	460e      	mov	r6, r1
   d7cd8:	f000 fe96 	bl	d8a08 <HAL_Timer_Get_Milli_Seconds>
   d7cdc:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d7cde:	4632      	mov	r2, r6
   d7ce0:	4629      	mov	r1, r5
   d7ce2:	4620      	mov	r0, r4
   d7ce4:	f7ff ff7e 	bl	d7be4 <_ZN9SdSpiCard10isTimedOutEtt>
   d7ce8:	b930      	cbnz	r0, d7cf8 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d7cea:	6860      	ldr	r0, [r4, #4]
   d7cec:	f000 fa39 	bl	d8162 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d7cf0:	28ff      	cmp	r0, #255	; 0xff
   d7cf2:	d1f4      	bne.n	d7cde <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d7cf4:	2001      	movs	r0, #1
   d7cf6:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d7cf8:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d7cfa:	bd70      	pop	{r4, r5, r6, pc}

000d7cfc <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d7cfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d7cfe:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d7d00:	9201      	str	r2, [sp, #4]
   d7d02:	4604      	mov	r4, r0
   d7d04:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d7d06:	b90b      	cbnz	r3, d7d0c <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d7d08:	f7ff ff90 	bl	d7c2c <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d7d0c:	b125      	cbz	r5, d7d18 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d7d0e:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d7d12:	4620      	mov	r0, r4
   d7d14:	f7ff ffdd 	bl	d7cd2 <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7d18:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d7d1c:	6860      	ldr	r0, [r4, #4]
   d7d1e:	f000 fa3b 	bl	d8198 <_ZN14SdSpiAltDriver4sendEh>
   d7d22:	f10d 0607 	add.w	r6, sp, #7
   d7d26:	f10d 0703 	add.w	r7, sp, #3
   d7d2a:	f816 1901 	ldrb.w	r1, [r6], #-1
   d7d2e:	6860      	ldr	r0, [r4, #4]
   d7d30:	f000 fa32 	bl	d8198 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d7d34:	42be      	cmp	r6, r7
   d7d36:	d1f8      	bne.n	d7d2a <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d7d38:	2d00      	cmp	r5, #0
   d7d3a:	bf0c      	ite	eq
   d7d3c:	2195      	moveq	r1, #149	; 0x95
   d7d3e:	2187      	movne	r1, #135	; 0x87
   d7d40:	6860      	ldr	r0, [r4, #4]
   d7d42:	f000 fa29 	bl	d8198 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7d46:	6860      	ldr	r0, [r4, #4]
   d7d48:	f000 fa0b 	bl	d8162 <_ZN14SdSpiAltDriver7receiveEv>
   d7d4c:	250b      	movs	r5, #11
   d7d4e:	6860      	ldr	r0, [r4, #4]
   d7d50:	f000 fa07 	bl	d8162 <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d7d54:	0603      	lsls	r3, r0, #24
   d7d56:	7260      	strb	r0, [r4, #9]
   d7d58:	d503      	bpl.n	d7d62 <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d7d5a:	3d01      	subs	r5, #1
   d7d5c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d7d60:	d1f5      	bne.n	d7d4e <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d7d62:	b003      	add	sp, #12
   d7d64:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7d66 <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d7d66:	b570      	push	{r4, r5, r6, lr}
   d7d68:	4604      	mov	r4, r0
   d7d6a:	460d      	mov	r5, r1
   d7d6c:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d7d6e:	2137      	movs	r1, #55	; 0x37
   d7d70:	2200      	movs	r2, #0
   d7d72:	f7ff ffc3 	bl	d7cfc <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d7d76:	4632      	mov	r2, r6
   d7d78:	4629      	mov	r1, r5
   d7d7a:	4620      	mov	r0, r4
  }
   d7d7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d7d80:	f7ff bfbc 	b.w	d7cfc <_ZN9SdSpiCard11cardCommandEhm>

000d7d84 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d7d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d7d88:	2500      	movs	r5, #0
   d7d8a:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d7d8c:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d7d8e:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d7d90:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d7d92:	4604      	mov	r4, r0
   d7d94:	4690      	mov	r8, r2
   d7d96:	461e      	mov	r6, r3
   d7d98:	f000 fe36 	bl	d8a08 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d7d9c:	4641      	mov	r1, r8
   d7d9e:	4607      	mov	r7, r0
   d7da0:	6860      	ldr	r0, [r4, #4]
   d7da2:	f000 f9cb 	bl	d813c <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d7da6:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d7da8:	4a4f      	ldr	r2, [pc, #316]	; (d7ee8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d7daa:	721d      	strb	r5, [r3, #8]
   d7dac:	f04f 0801 	mov.w	r8, #1
   d7db0:	60da      	str	r2, [r3, #12]
   d7db2:	745d      	strb	r5, [r3, #17]
   d7db4:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d7db8:	4620      	mov	r0, r4
   d7dba:	f7ff ff37 	bl	d7c2c <_ZN9SdSpiCard8spiStartEv>
   d7dbe:	6863      	ldr	r3, [r4, #4]
   d7dc0:	4641      	mov	r1, r8
   d7dc2:	7d18      	ldrb	r0, [r3, #20]
   d7dc4:	f002 fedf 	bl	dab86 <digitalWrite>
   d7dc8:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7dca:	21ff      	movs	r1, #255	; 0xff
   d7dcc:	6860      	ldr	r0, [r4, #4]
   d7dce:	3d01      	subs	r5, #1
   d7dd0:	f000 f9e2 	bl	d8198 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d7dd4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d7dd8:	d1f7      	bne.n	d7dca <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d7dda:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d7ddc:	4629      	mov	r1, r5
   d7dde:	7d18      	ldrb	r0, [r3, #20]
   d7de0:	f002 fed1 	bl	dab86 <digitalWrite>
   d7de4:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d7de6:	2200      	movs	r2, #0
   d7de8:	4611      	mov	r1, r2
   d7dea:	4620      	mov	r0, r4
   d7dec:	f7ff ff86 	bl	d7cfc <_ZN9SdSpiCard11cardCommandEhm>
   d7df0:	2801      	cmp	r0, #1
   d7df2:	4680      	mov	r8, r0
   d7df4:	d012      	beq.n	d7e1c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d7df6:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d7df8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d7dfc:	d101      	bne.n	d7e02 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7dfe:	2320      	movs	r3, #32
   d7e00:	e057      	b.n	d7eb2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7e02:	21fd      	movs	r1, #253	; 0xfd
   d7e04:	6860      	ldr	r0, [r4, #4]
   d7e06:	f000 f9c7 	bl	d8198 <_ZN14SdSpiAltDriver4sendEh>
   d7e0a:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7e0e:	6860      	ldr	r0, [r4, #4]
   d7e10:	f000 f9a7 	bl	d8162 <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d7e14:	f1b8 0801 	subs.w	r8, r8, #1
   d7e18:	d1f9      	bne.n	d7e0e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d7e1a:	e7e4      	b.n	d7de6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d7e1c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d7e20:	2108      	movs	r1, #8
   d7e22:	4620      	mov	r0, r4
   d7e24:	f7ff ff6a 	bl	d7cfc <_ZN9SdSpiCard11cardCommandEhm>
   d7e28:	2805      	cmp	r0, #5
   d7e2a:	d102      	bne.n	d7e32 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d7e2c:	f884 800a 	strb.w	r8, [r4, #10]
   d7e30:	e00f      	b.n	d7e52 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d7e32:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7e34:	6860      	ldr	r0, [r4, #4]
   d7e36:	f000 f994 	bl	d8162 <_ZN14SdSpiAltDriver7receiveEv>
   d7e3a:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d7e3c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d7e40:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d7e42:	d1f7      	bne.n	d7e34 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d7e44:	28aa      	cmp	r0, #170	; 0xaa
   d7e46:	d102      	bne.n	d7e4e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d7e48:	2302      	movs	r3, #2
   d7e4a:	72a3      	strb	r3, [r4, #10]
   d7e4c:	e001      	b.n	d7e52 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7e4e:	2325      	movs	r3, #37	; 0x25
   d7e50:	e02f      	b.n	d7eb2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d7e52:	7aa3      	ldrb	r3, [r4, #10]
   d7e54:	2b02      	cmp	r3, #2
   d7e56:	bf0c      	ite	eq
   d7e58:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d7e5c:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d7e5e:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d7e60:	462a      	mov	r2, r5
   d7e62:	2129      	movs	r1, #41	; 0x29
   d7e64:	4620      	mov	r0, r4
   d7e66:	f7ff ff7e 	bl	d7d66 <_ZN9SdSpiCard8cardAcmdEhm>
   d7e6a:	4602      	mov	r2, r0
   d7e6c:	b148      	cbz	r0, d7e82 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d7e6e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d7e72:	4639      	mov	r1, r7
   d7e74:	4620      	mov	r0, r4
   d7e76:	f7ff feb5 	bl	d7be4 <_ZN9SdSpiCard10isTimedOutEtt>
   d7e7a:	2800      	cmp	r0, #0
   d7e7c:	d0f0      	beq.n	d7e60 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d7e7e:	2343      	movs	r3, #67	; 0x43
   d7e80:	e017      	b.n	d7eb2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d7e82:	7aa3      	ldrb	r3, [r4, #10]
   d7e84:	2b02      	cmp	r3, #2
   d7e86:	d00e      	beq.n	d7ea6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d7e88:	4620      	mov	r0, r4
   d7e8a:	f7ff fede 	bl	d7c4a <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d7e8e:	6863      	ldr	r3, [r4, #4]
   d7e90:	68b0      	ldr	r0, [r6, #8]
   d7e92:	7934      	ldrb	r4, [r6, #4]
   d7e94:	7b31      	ldrb	r1, [r6, #12]
   d7e96:	7b72      	ldrb	r2, [r6, #13]
   d7e98:	745a      	strb	r2, [r3, #17]
   d7e9a:	60d8      	str	r0, [r3, #12]
   d7e9c:	721c      	strb	r4, [r3, #8]
   d7e9e:	7419      	strb	r1, [r3, #16]
  return true;
   d7ea0:	2001      	movs	r0, #1
   d7ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d7ea6:	213a      	movs	r1, #58	; 0x3a
   d7ea8:	4620      	mov	r0, r4
   d7eaa:	f7ff ff27 	bl	d7cfc <_ZN9SdSpiCard11cardCommandEhm>
   d7eae:	b138      	cbz	r0, d7ec0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d7eb0:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d7eb2:	4620      	mov	r0, r4
   d7eb4:	7023      	strb	r3, [r4, #0]
   d7eb6:	f7ff fec8 	bl	d7c4a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7eba:	2000      	movs	r0, #0
}
   d7ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7ec0:	6860      	ldr	r0, [r4, #4]
   d7ec2:	f000 f94e 	bl	d8162 <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d7ec6:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d7eca:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d7ecc:	bf04      	itt	eq
   d7ece:	2303      	moveq	r3, #3
   d7ed0:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7ed2:	6860      	ldr	r0, [r4, #4]
   d7ed4:	f000 f945 	bl	d8162 <_ZN14SdSpiAltDriver7receiveEv>
   d7ed8:	6860      	ldr	r0, [r4, #4]
   d7eda:	f000 f942 	bl	d8162 <_ZN14SdSpiAltDriver7receiveEv>
   d7ede:	6860      	ldr	r0, [r4, #4]
   d7ee0:	f000 f93f 	bl	d8162 <_ZN14SdSpiAltDriver7receiveEv>
   d7ee4:	e7d0      	b.n	d7e88 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d7ee6:	bf00      	nop
   d7ee8:	0003d090 	.word	0x0003d090

000d7eec <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d7eec:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d7eee:	7a83      	ldrb	r3, [r0, #10]
   d7ef0:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d7ef2:	bf18      	it	ne
   d7ef4:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d7ef6:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d7ef8:	460a      	mov	r2, r1
   d7efa:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d7efc:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d7efe:	f7ff fefd 	bl	d7cfc <_ZN9SdSpiCard11cardCommandEhm>
   d7f02:	b110      	cbz	r0, d7f0a <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7f04:	2330      	movs	r3, #48	; 0x30
   d7f06:	7023      	strb	r3, [r4, #0]
   d7f08:	e00b      	b.n	d7f22 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d7f0a:	4629      	mov	r1, r5
   d7f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
   d7f10:	4620      	mov	r0, r4
   d7f12:	f7ff fead 	bl	d7c70 <_ZN9SdSpiCard8readDataEPhj>
   d7f16:	4605      	mov	r5, r0
   d7f18:	b118      	cbz	r0, d7f22 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d7f1a:	4620      	mov	r0, r4
   d7f1c:	f7ff fe95 	bl	d7c4a <_ZN9SdSpiCard7spiStopEv>
  return true;
   d7f20:	e003      	b.n	d7f2a <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d7f22:	4620      	mov	r0, r4
   d7f24:	f7ff fe91 	bl	d7c4a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7f28:	2500      	movs	r5, #0
}
   d7f2a:	4628      	mov	r0, r5
   d7f2c:	bd38      	pop	{r3, r4, r5, pc}

000d7f2e <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7f2e:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d7f30:	7a83      	ldrb	r3, [r0, #10]
   d7f32:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7f34:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d7f36:	bf18      	it	ne
   d7f38:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d7f3a:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7f3c:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d7f3e:	f7ff fedd 	bl	d7cfc <_ZN9SdSpiCard11cardCommandEhm>
   d7f42:	b130      	cbz	r0, d7f52 <_ZN9SdSpiCard9readStartEm+0x24>
   d7f44:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d7f46:	4620      	mov	r0, r4
   d7f48:	7023      	strb	r3, [r4, #0]
   d7f4a:	f7ff fe7e 	bl	d7c4a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7f4e:	2000      	movs	r0, #0
   d7f50:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d7f52:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d7f54:	bd10      	pop	{r4, pc}

000d7f56 <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d7f56:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d7f58:	2200      	movs	r2, #0
   d7f5a:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d7f5c:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d7f5e:	f7ff fecd 	bl	d7cfc <_ZN9SdSpiCard11cardCommandEhm>
   d7f62:	b130      	cbz	r0, d7f72 <_ZN9SdSpiCard8readStopEv+0x1c>
   d7f64:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d7f66:	4620      	mov	r0, r4
   d7f68:	7023      	strb	r3, [r4, #0]
   d7f6a:	f7ff fe6e 	bl	d7c4a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7f6e:	2000      	movs	r0, #0
   d7f70:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d7f72:	4620      	mov	r0, r4
   d7f74:	f7ff fe69 	bl	d7c4a <_ZN9SdSpiCard7spiStopEv>
  return true;
   d7f78:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d7f7a:	bd10      	pop	{r4, pc}

000d7f7c <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d7f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7f7e:	4605      	mov	r5, r0
   d7f80:	4616      	mov	r6, r2
   d7f82:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d7f84:	f7ff ffd3 	bl	d7f2e <_ZN9SdSpiCard9readStartEm>
   d7f88:	b198      	cbz	r0, d7fb2 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d7f8a:	2400      	movs	r4, #0
   d7f8c:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d7f8e:	429f      	cmp	r7, r3
   d7f90:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d7f94:	d908      	bls.n	d7fa8 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d7f96:	f44f 7200 	mov.w	r2, #512	; 0x200
   d7f9a:	4628      	mov	r0, r5
   d7f9c:	f7ff fe68 	bl	d7c70 <_ZN9SdSpiCard8readDataEPhj>
   d7fa0:	3401      	adds	r4, #1
   d7fa2:	2800      	cmp	r0, #0
   d7fa4:	d1f2      	bne.n	d7f8c <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d7fa6:	e004      	b.n	d7fb2 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d7fa8:	4628      	mov	r0, r5
}
   d7faa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d7fae:	f7ff bfd2 	b.w	d7f56 <_ZN9SdSpiCard8readStopEv>
}
   d7fb2:	2000      	movs	r0, #0
   d7fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7fb6 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d7fb6:	b538      	push	{r3, r4, r5, lr}
   d7fb8:	4604      	mov	r4, r0
   d7fba:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7fbc:	6840      	ldr	r0, [r0, #4]
   d7fbe:	f000 f8eb 	bl	d8198 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d7fc2:	f44f 7200 	mov.w	r2, #512	; 0x200
   d7fc6:	4629      	mov	r1, r5
   d7fc8:	6860      	ldr	r0, [r4, #4]
   d7fca:	f000 f8e9 	bl	d81a0 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7fce:	21ff      	movs	r1, #255	; 0xff
   d7fd0:	6860      	ldr	r0, [r4, #4]
   d7fd2:	f000 f8e1 	bl	d8198 <_ZN14SdSpiAltDriver4sendEh>
   d7fd6:	21ff      	movs	r1, #255	; 0xff
   d7fd8:	6860      	ldr	r0, [r4, #4]
   d7fda:	f000 f8dd 	bl	d8198 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7fde:	6860      	ldr	r0, [r4, #4]
   d7fe0:	f000 f8bf 	bl	d8162 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d7fe4:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d7fe6:	f000 001f 	and.w	r0, r0, #31
   d7fea:	2805      	cmp	r0, #5
   d7fec:	d006      	beq.n	d7ffc <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7fee:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d7ff0:	4620      	mov	r0, r4
   d7ff2:	7023      	strb	r3, [r4, #0]
   d7ff4:	f7ff fe29 	bl	d7c4a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7ff8:	2000      	movs	r0, #0
   d7ffa:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d7ffc:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d7ffe:	bd38      	pop	{r3, r4, r5, pc}

000d8000 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d8000:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d8002:	7a83      	ldrb	r3, [r0, #10]
   d8004:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d8006:	bf18      	it	ne
   d8008:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d800a:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d800c:	460a      	mov	r2, r1
   d800e:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d8010:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d8012:	f7ff fe73 	bl	d7cfc <_ZN9SdSpiCard11cardCommandEhm>
   d8016:	4606      	mov	r6, r0
   d8018:	b108      	cbz	r0, d801e <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d801a:	2332      	movs	r3, #50	; 0x32
   d801c:	e01d      	b.n	d805a <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d801e:	462a      	mov	r2, r5
   d8020:	21fe      	movs	r1, #254	; 0xfe
   d8022:	4620      	mov	r0, r4
   d8024:	f7ff ffc7 	bl	d7fb6 <_ZN9SdSpiCard9writeDataEhPKh>
   d8028:	b1c0      	cbz	r0, d805c <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d802a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d802e:	4620      	mov	r0, r4
   d8030:	f7ff fe4f 	bl	d7cd2 <_ZN9SdSpiCard11waitNotBusyEt>
   d8034:	4605      	mov	r5, r0
   d8036:	b908      	cbnz	r0, d803c <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d8038:	235a      	movs	r3, #90	; 0x5a
   d803a:	e00e      	b.n	d805a <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d803c:	4632      	mov	r2, r6
   d803e:	210d      	movs	r1, #13
   d8040:	4620      	mov	r0, r4
   d8042:	f7ff fe5b 	bl	d7cfc <_ZN9SdSpiCard11cardCommandEhm>
   d8046:	b938      	cbnz	r0, d8058 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d8048:	6860      	ldr	r0, [r4, #4]
   d804a:	f000 f88a 	bl	d8162 <_ZN14SdSpiAltDriver7receiveEv>
   d804e:	b918      	cbnz	r0, d8058 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d8050:	4620      	mov	r0, r4
   d8052:	f7ff fdfa 	bl	d7c4a <_ZN9SdSpiCard7spiStopEv>
  return true;
   d8056:	e005      	b.n	d8064 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d8058:	2329      	movs	r3, #41	; 0x29
   d805a:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d805c:	4620      	mov	r0, r4
   d805e:	f7ff fdf4 	bl	d7c4a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d8062:	2500      	movs	r5, #0
}
   d8064:	4628      	mov	r0, r5
   d8066:	bd70      	pop	{r4, r5, r6, pc}

000d8068 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d8068:	b538      	push	{r3, r4, r5, lr}
   d806a:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d806c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d8070:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d8072:	f7ff fe2e 	bl	d7cd2 <_ZN9SdSpiCard11waitNotBusyEt>
   d8076:	b910      	cbnz	r0, d807e <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d8078:	235b      	movs	r3, #91	; 0x5b
   d807a:	7023      	strb	r3, [r4, #0]
   d807c:	e005      	b.n	d808a <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d807e:	462a      	mov	r2, r5
   d8080:	21fc      	movs	r1, #252	; 0xfc
   d8082:	4620      	mov	r0, r4
   d8084:	f7ff ff97 	bl	d7fb6 <_ZN9SdSpiCard9writeDataEhPKh>
   d8088:	b918      	cbnz	r0, d8092 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d808a:	4620      	mov	r0, r4
   d808c:	f7ff fddd 	bl	d7c4a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d8090:	2000      	movs	r0, #0
}
   d8092:	bd38      	pop	{r3, r4, r5, pc}

000d8094 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d8094:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d8096:	7a83      	ldrb	r3, [r0, #10]
   d8098:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d809a:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d809c:	bf18      	it	ne
   d809e:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d80a0:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d80a2:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d80a4:	f7ff fe2a 	bl	d7cfc <_ZN9SdSpiCard11cardCommandEhm>
   d80a8:	b130      	cbz	r0, d80b8 <_ZN9SdSpiCard10writeStartEm+0x24>
   d80aa:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d80ac:	4620      	mov	r0, r4
   d80ae:	7023      	strb	r3, [r4, #0]
   d80b0:	f7ff fdcb 	bl	d7c4a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d80b4:	2000      	movs	r0, #0
   d80b6:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d80b8:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d80ba:	bd10      	pop	{r4, pc}

000d80bc <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d80bc:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d80be:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d80c2:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d80c4:	f7ff fe05 	bl	d7cd2 <_ZN9SdSpiCard11waitNotBusyEt>
   d80c8:	4605      	mov	r5, r0
   d80ca:	b120      	cbz	r0, d80d6 <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d80cc:	21fd      	movs	r1, #253	; 0xfd
   d80ce:	6860      	ldr	r0, [r4, #4]
   d80d0:	f000 f862 	bl	d8198 <_ZN14SdSpiAltDriver4sendEh>
   d80d4:	e001      	b.n	d80da <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d80d6:	2356      	movs	r3, #86	; 0x56
   d80d8:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d80da:	4620      	mov	r0, r4
   d80dc:	f7ff fdb5 	bl	d7c4a <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d80e0:	4628      	mov	r0, r5
   d80e2:	bd38      	pop	{r3, r4, r5, pc}

000d80e4 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d80e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d80e6:	4605      	mov	r5, r0
   d80e8:	4616      	mov	r6, r2
   d80ea:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d80ec:	f7ff ffd2 	bl	d8094 <_ZN9SdSpiCard10writeStartEm>
   d80f0:	b170      	cbz	r0, d8110 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d80f2:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d80f4:	42bc      	cmp	r4, r7
   d80f6:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d80fa:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d80fc:	d004      	beq.n	d8108 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d80fe:	f7ff ffb3 	bl	d8068 <_ZN9SdSpiCard9writeDataEPKh>
   d8102:	b128      	cbz	r0, d8110 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d8104:	3401      	adds	r4, #1
   d8106:	e7f5      	b.n	d80f4 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d8108:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d810c:	f7ff bfd6 	b.w	d80bc <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d8110:	4628      	mov	r0, r5
   d8112:	f7ff fd9a 	bl	d7c4a <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d8116:	2000      	movs	r0, #0
   d8118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d811a <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d811a:	f000 bbad 	b.w	d8878 <HAL_Pin_Map>

000d811e <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d811e:	f000 bbab 	b.w	d8878 <HAL_Pin_Map>

000d8122 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d8122:	f000 bba9 	b.w	d8878 <HAL_Pin_Map>
	...

000d8128 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d8128:	4b01      	ldr	r3, [pc, #4]	; (d8130 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d812a:	2201      	movs	r2, #1
   d812c:	701a      	strb	r2, [r3, #0]
   d812e:	4770      	bx	lr
   d8130:	2003de64 	.word	0x2003de64

000d8134 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d8134:	1d01      	adds	r1, r0, #4
   d8136:	6800      	ldr	r0, [r0, #0]
   d8138:	f000 bfcc 	b.w	d90d4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d813c <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d813c:	b510      	push	{r4, lr}
   d813e:	4604      	mov	r4, r0
  m_csPin = csPin;
   d8140:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d8142:	6800      	ldr	r0, [r0, #0]
   d8144:	f000 ff7a 	bl	d903c <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d8148:	7d20      	ldrb	r0, [r4, #20]
   d814a:	2101      	movs	r1, #1
   d814c:	f002 fd0a 	bl	dab64 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d8150:	7d20      	ldrb	r0, [r4, #20]
   d8152:	2101      	movs	r1, #1
}
   d8154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d8158:	f002 bd15 	b.w	dab86 <digitalWrite>

000d815c <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d815c:	6800      	ldr	r0, [r0, #0]
   d815e:	f000 bfa0 	b.w	d90a2 <_ZN8SPIClass14endTransactionEv>

000d8162 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d8162:	21ff      	movs	r1, #255	; 0xff
   d8164:	6800      	ldr	r0, [r0, #0]
   d8166:	f001 b87b 	b.w	d9260 <_ZN8SPIClass8transferEh>
	...

000d816c <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d816c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d816e:	4b08      	ldr	r3, [pc, #32]	; (d8190 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d8170:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d8172:	2500      	movs	r5, #0
   d8174:	4c07      	ldr	r4, [pc, #28]	; (d8194 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d8176:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d8178:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d817a:	4613      	mov	r3, r2
   d817c:	460a      	mov	r2, r1
   d817e:	4629      	mov	r1, r5
   d8180:	f001 f874 	bl	d926c <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d8184:	7823      	ldrb	r3, [r4, #0]
   d8186:	2b00      	cmp	r3, #0
   d8188:	d0fc      	beq.n	d8184 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d818a:	2000      	movs	r0, #0
   d818c:	b003      	add	sp, #12
   d818e:	bd30      	pop	{r4, r5, pc}
   d8190:	000d8129 	.word	0x000d8129
   d8194:	2003de64 	.word	0x2003de64

000d8198 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d8198:	6800      	ldr	r0, [r0, #0]
   d819a:	f001 b861 	b.w	d9260 <_ZN8SPIClass8transferEh>
	...

000d81a0 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d81a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d81a2:	4b07      	ldr	r3, [pc, #28]	; (d81c0 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d81a4:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d81a6:	2500      	movs	r5, #0
   d81a8:	4c06      	ldr	r4, [pc, #24]	; (d81c4 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d81aa:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d81ac:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d81ae:	4613      	mov	r3, r2
   d81b0:	462a      	mov	r2, r5
   d81b2:	f001 f85b 	bl	d926c <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d81b6:	7823      	ldrb	r3, [r4, #0]
   d81b8:	2b00      	cmp	r3, #0
   d81ba:	d0fc      	beq.n	d81b6 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d81bc:	b003      	add	sp, #12
   d81be:	bd30      	pop	{r4, r5, pc}
   d81c0:	000d8129 	.word	0x000d8129
   d81c4:	2003de64 	.word	0x2003de64

000d81c8 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d81c8:	f000 bb56 	b.w	d8878 <HAL_Pin_Map>

000d81cc <_ZN5RFM694isr0Ev>:
  }
  RSSI = readRSSI();
  //digitalWrite(4, 0);
}

void RFM69::isr0() { selfPointer->interruptHandler(); }
   d81cc:	4b02      	ldr	r3, [pc, #8]	; (d81d8 <_ZN5RFM694isr0Ev+0xc>)
   d81ce:	6818      	ldr	r0, [r3, #0]
   d81d0:	6803      	ldr	r3, [r0, #0]
   d81d2:	681b      	ldr	r3, [r3, #0]
   d81d4:	4718      	bx	r3
   d81d6:	bf00      	nop
   d81d8:	2003de7c 	.word	0x2003de7c

000d81dc <_ZN5RFM698unselectEv>:
  SPI1.setClockDivider(SPI_CLOCK_DIV16);
  digitalWrite(_slaveSelectPin, LOW);
}

/// UNselect the transceiver chip
void RFM69::unselect() {
   d81dc:	b508      	push	{r3, lr}
  digitalWrite(_slaveSelectPin, HIGH);
   d81de:	2101      	movs	r1, #1
   d81e0:	7900      	ldrb	r0, [r0, #4]
   d81e2:	f002 fcd0 	bl	dab86 <digitalWrite>
  #ifndef PARTICLE
  SPCR = _SPCR;
  SPSR = _SPSR;
  #endif
  interrupts();
}
   d81e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  //restore SPI settings to what they were before talking to RFM69
  #ifndef PARTICLE
  SPCR = _SPCR;
  SPSR = _SPSR;
  #endif
  interrupts();
   d81ea:	f001 beff 	b.w	d9fec <_Z10interruptsv>
	...

000d81f0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d81f0:	b510      	push	{r4, lr}
        static SPIClass instance(Interface);
   d81f2:	4c08      	ldr	r4, [pc, #32]	; (d8214 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x24>)
   d81f4:	6823      	ldr	r3, [r4, #0]
   d81f6:	07db      	lsls	r3, r3, #31
   d81f8:	d40a      	bmi.n	d8210 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x20>
   d81fa:	4620      	mov	r0, r4
   d81fc:	f7fb ff55 	bl	d40aa <__cxa_guard_acquire>
   d8200:	b130      	cbz	r0, d8210 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x20>
   d8202:	2101      	movs	r1, #1
   d8204:	4804      	ldr	r0, [pc, #16]	; (d8218 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x28>)
   d8206:	f000 ff0f 	bl	d9028 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d820a:	4620      	mov	r0, r4
   d820c:	f7fb ff52 	bl	d40b4 <__cxa_guard_release>
        return instance;
    }
   d8210:	4801      	ldr	r0, [pc, #4]	; (d8218 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv+0x28>)
   d8212:	bd10      	pop	{r4, pc}
   d8214:	2003de68 	.word	0x2003de68
   d8218:	2003de6c 	.word	0x2003de6c

000d821c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   d821c:	b510      	push	{r4, lr}
   d821e:	4604      	mov	r4, r0
        return instance().transfer(data);
   d8220:	f7ff ffe6 	bl	d81f0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d8224:	4621      	mov	r1, r4
    }
   d8226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d822a:	f001 b819 	b.w	d9260 <_ZN8SPIClass8transferEh>

000d822e <_ZN5RFM696selectEv>:
  SPI1.transfer(value);
  unselect();
}

/// Select the transceiver
void RFM69::select() {
   d822e:	b510      	push	{r4, lr}
   d8230:	4604      	mov	r4, r0
  noInterrupts();
   d8232:	f001 fed9 	bl	d9fe8 <_Z12noInterruptsv>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d8236:	f7ff ffdb 	bl	d81f0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d823a:	2100      	movs	r1, #0
   d823c:	f000 ff20 	bl	d9080 <_ZN8SPIClass11setDataModeEh>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   d8240:	f7ff ffd6 	bl	d81f0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d8244:	2101      	movs	r1, #1
   d8246:	f000 ff0a 	bl	d905e <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
   d824a:	f7ff ffd1 	bl	d81f0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d824e:	2118      	movs	r1, #24
   d8250:	f000 ffe2 	bl	d9218 <_ZN8SPIClass15setClockDividerEh>
  //set RFM69 SPI settings
  SPI1.setDataMode(SPI_MODE0);
  SPI1.setBitOrder(MSBFIRST);
  //SPI_CLOCK_DIV16; // 72MHz / 16 = 4.5MHz
  SPI1.setClockDivider(SPI_CLOCK_DIV16);
  digitalWrite(_slaveSelectPin, LOW);
   d8254:	7920      	ldrb	r0, [r4, #4]
   d8256:	2100      	movs	r1, #0
}
   d8258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  //set RFM69 SPI settings
  SPI1.setDataMode(SPI_MODE0);
  SPI1.setBitOrder(MSBFIRST);
  //SPI_CLOCK_DIV16; // 72MHz / 16 = 4.5MHz
  SPI1.setClockDivider(SPI_CLOCK_DIV16);
  digitalWrite(_slaveSelectPin, LOW);
   d825c:	f002 bc93 	b.w	dab86 <digitalWrite>

000d8260 <_ZN5RFM697readRegEh>:
  rssi >>= 1;
  return rssi;
}

byte RFM69::readReg(byte addr)
{
   d8260:	b538      	push	{r3, r4, r5, lr}
   d8262:	460c      	mov	r4, r1
   d8264:	4605      	mov	r5, r0
  select();
   d8266:	f7ff ffe2 	bl	d822e <_ZN5RFM696selectEv>
  SPI1.transfer(addr & 0x7F);
   d826a:	f004 007f 	and.w	r0, r4, #127	; 0x7f
   d826e:	f7ff ffd5 	bl	d821c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  byte regval = SPI1.transfer(0);
   d8272:	2000      	movs	r0, #0
   d8274:	f7ff ffd2 	bl	d821c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d8278:	4604      	mov	r4, r0
  unselect();
   d827a:	4628      	mov	r0, r5
   d827c:	f7ff ffae 	bl	d81dc <_ZN5RFM698unselectEv>
  return regval;
}
   d8280:	4620      	mov	r0, r4
   d8282:	bd38      	pop	{r3, r4, r5, pc}

000d8284 <_ZN5RFM698writeRegEhh>:

void RFM69::writeReg(byte addr, byte value)
{
   d8284:	b570      	push	{r4, r5, r6, lr}
   d8286:	460e      	mov	r6, r1
   d8288:	4615      	mov	r5, r2
   d828a:	4604      	mov	r4, r0
  select();
   d828c:	f7ff ffcf 	bl	d822e <_ZN5RFM696selectEv>
  SPI1.transfer(addr | 0x80);
   d8290:	f046 0080 	orr.w	r0, r6, #128	; 0x80
   d8294:	f7ff ffc2 	bl	d821c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  SPI1.transfer(value);
   d8298:	4628      	mov	r0, r5
   d829a:	f7ff ffbf 	bl	d821c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  unselect();
   d829e:	4620      	mov	r0, r4
}
   d82a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void RFM69::writeReg(byte addr, byte value)
{
  select();
  SPI1.transfer(addr | 0x80);
  SPI1.transfer(value);
  unselect();
   d82a4:	f7ff bf9a 	b.w	d81dc <_ZN5RFM698unselectEv>

000d82a8 <_ZN5RFM6913setPowerLevelEh>:
}

// set output power: 0=min, 31=max
// this results in a "weaker" transmitted signal, and directly results in a lower RSSI at the receiver
void RFM69::setPowerLevel(byte powerLevel)
{
   d82a8:	b510      	push	{r4, lr}
  _powerLevel = powerLevel;
   d82aa:	7241      	strb	r1, [r0, #9]
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | (_powerLevel > 31 ? 31 : _powerLevel));
   d82ac:	2111      	movs	r1, #17
}

// set output power: 0=min, 31=max
// this results in a "weaker" transmitted signal, and directly results in a lower RSSI at the receiver
void RFM69::setPowerLevel(byte powerLevel)
{
   d82ae:	4604      	mov	r4, r0
  _powerLevel = powerLevel;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | (_powerLevel > 31 ? 31 : _powerLevel));
   d82b0:	f7ff ffd6 	bl	d8260 <_ZN5RFM697readRegEh>
   d82b4:	7a62      	ldrb	r2, [r4, #9]
   d82b6:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
   d82ba:	2a1f      	cmp	r2, #31
   d82bc:	bf94      	ite	ls
   d82be:	4302      	orrls	r2, r0
   d82c0:	f040 021f 	orrhi.w	r2, r0, #31
   d82c4:	2111      	movs	r1, #17
   d82c6:	4620      	mov	r0, r4
}
   d82c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// set output power: 0=min, 31=max
// this results in a "weaker" transmitted signal, and directly results in a lower RSSI at the receiver
void RFM69::setPowerLevel(byte powerLevel)
{
  _powerLevel = powerLevel;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | (_powerLevel > 31 ? 31 : _powerLevel));
   d82cc:	f7ff bfda 	b.w	d8284 <_ZN5RFM698writeRegEhh>

000d82d0 <_ZN5RFM698readRSSIEb>:
    unselect();
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
}

int RFM69::readRSSI(bool forceTrigger) {
   d82d0:	b510      	push	{r4, lr}
   d82d2:	4604      	mov	r4, r0
  int rssi = 0;
  if (forceTrigger)
   d82d4:	b149      	cbz	r1, d82ea <_ZN5RFM698readRSSIEb+0x1a>
  {
    //RSSI trigger not needed if DAGC is in continuous mode
    writeReg(REG_RSSICONFIG, RF_RSSI_START);
   d82d6:	2201      	movs	r2, #1
   d82d8:	2123      	movs	r1, #35	; 0x23
   d82da:	f7ff ffd3 	bl	d8284 <_ZN5RFM698writeRegEhh>
    while ((readReg(REG_RSSICONFIG) & RF_RSSI_DONE) == 0x00); // Wait for RSSI_Ready
   d82de:	2123      	movs	r1, #35	; 0x23
   d82e0:	4620      	mov	r0, r4
   d82e2:	f7ff ffbd 	bl	d8260 <_ZN5RFM697readRegEh>
   d82e6:	0783      	lsls	r3, r0, #30
   d82e8:	d5f9      	bpl.n	d82de <_ZN5RFM698readRSSIEb+0xe>
  }
  rssi = -readReg(REG_RSSIVALUE);
   d82ea:	2124      	movs	r1, #36	; 0x24
   d82ec:	4620      	mov	r0, r4
   d82ee:	f7ff ffb7 	bl	d8260 <_ZN5RFM697readRegEh>
   d82f2:	4240      	negs	r0, r0
  rssi >>= 1;
  return rssi;
   d82f4:	1040      	asrs	r0, r0, #1
}
   d82f6:	bd10      	pop	{r4, pc}

000d82f8 <_ZN5RFM6916setHighPowerRegsEb>:
  uint16_t baudRate = 32000000L / speedBPS;;
  
  writeReg(REG_BITRATEMSB, (baudRate >> 8) & 0xFF);
  writeReg(REG_BITRATELSB, (baudRate >> 0) & 0xFF);
}
void RFM69::setHighPowerRegs(bool onOff) {
   d82f8:	b538      	push	{r3, r4, r5, lr}
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
   d82fa:	2900      	cmp	r1, #0
   d82fc:	bf14      	ite	ne
   d82fe:	225d      	movne	r2, #93	; 0x5d
   d8300:	2255      	moveq	r2, #85	; 0x55
   d8302:	460c      	mov	r4, r1
   d8304:	215a      	movs	r1, #90	; 0x5a
  uint16_t baudRate = 32000000L / speedBPS;;
  
  writeReg(REG_BITRATEMSB, (baudRate >> 8) & 0xFF);
  writeReg(REG_BITRATELSB, (baudRate >> 0) & 0xFF);
}
void RFM69::setHighPowerRegs(bool onOff) {
   d8306:	4605      	mov	r5, r0
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
   d8308:	f7ff ffbc 	bl	d8284 <_ZN5RFM698writeRegEhh>
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
   d830c:	2c00      	cmp	r4, #0
   d830e:	4628      	mov	r0, r5
   d8310:	bf14      	ite	ne
   d8312:	227c      	movne	r2, #124	; 0x7c
   d8314:	2270      	moveq	r2, #112	; 0x70
   d8316:	215c      	movs	r1, #92	; 0x5c
}
   d8318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeReg(REG_BITRATEMSB, (baudRate >> 8) & 0xFF);
  writeReg(REG_BITRATELSB, (baudRate >> 0) & 0xFF);
}
void RFM69::setHighPowerRegs(bool onOff) {
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
   d831c:	f7ff bfb2 	b.w	d8284 <_ZN5RFM698writeRegEhh>

000d8320 <_ZN5RFM697setModeEh>:
  writeReg(REG_FRFMID, freqHz >> 8);
  writeReg(REG_FRFLSB, freqHz);
}

void RFM69::setMode(byte newMode)
{
   d8320:	b570      	push	{r4, r5, r6, lr}
	if (newMode == _mode) return; //TODO: can remove this?
   d8322:	4d28      	ldr	r5, [pc, #160]	; (d83c4 <_ZN5RFM697setModeEh+0xa4>)
   d8324:	782b      	ldrb	r3, [r5, #0]
   d8326:	428b      	cmp	r3, r1
  writeReg(REG_FRFMID, freqHz >> 8);
  writeReg(REG_FRFLSB, freqHz);
}

void RFM69::setMode(byte newMode)
{
   d8328:	4604      	mov	r4, r0
   d832a:	460e      	mov	r6, r1
	if (newMode == _mode) return; //TODO: can remove this?
   d832c:	d049      	beq.n	d83c2 <_ZN5RFM697setModeEh+0xa2>

	switch (newMode) {
   d832e:	2904      	cmp	r1, #4
   d8330:	d847      	bhi.n	d83c2 <_ZN5RFM697setModeEh+0xa2>
   d8332:	e8df f001 	tbb	[pc, r1]
   d8336:	2c34      	.short	0x2c34
   d8338:	1224      	.short	0x1224
   d833a:	03          	.byte	0x03
   d833b:	00          	.byte	0x00
		case RF69_MODE_TX:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
   d833c:	2101      	movs	r1, #1
   d833e:	f7ff ff8f 	bl	d8260 <_ZN5RFM697readRegEh>
   d8342:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d8346:	f042 020c 	orr.w	r2, r2, #12
   d834a:	2101      	movs	r1, #1
   d834c:	4620      	mov	r0, r4
   d834e:	f7ff ff99 	bl	d8284 <_ZN5RFM698writeRegEhh>
      if (_isRFM69HW) setHighPowerRegs(true);
   d8352:	7aa3      	ldrb	r3, [r4, #10]
   d8354:	b363      	cbz	r3, d83b0 <_ZN5RFM697setModeEh+0x90>
   d8356:	2101      	movs	r1, #1
   d8358:	e00d      	b.n	d8376 <_ZN5RFM697setModeEh+0x56>
			break;
		case RF69_MODE_RX:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
   d835a:	2101      	movs	r1, #1
   d835c:	f7ff ff80 	bl	d8260 <_ZN5RFM697readRegEh>
   d8360:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d8364:	f042 0210 	orr.w	r2, r2, #16
   d8368:	2101      	movs	r1, #1
   d836a:	4620      	mov	r0, r4
   d836c:	f7ff ff8a 	bl	d8284 <_ZN5RFM698writeRegEhh>
      if (_isRFM69HW) setHighPowerRegs(false);
   d8370:	7aa3      	ldrb	r3, [r4, #10]
   d8372:	b1eb      	cbz	r3, d83b0 <_ZN5RFM697setModeEh+0x90>
   d8374:	2100      	movs	r1, #0
   d8376:	4620      	mov	r0, r4
   d8378:	f7ff ffbe 	bl	d82f8 <_ZN5RFM6916setHighPowerRegsEb>
   d837c:	e018      	b.n	d83b0 <_ZN5RFM697setModeEh+0x90>
			break;
		case RF69_MODE_SYNTH:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SYNTHESIZER);
   d837e:	2101      	movs	r1, #1
   d8380:	f7ff ff6e 	bl	d8260 <_ZN5RFM697readRegEh>
   d8384:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d8388:	f042 0208 	orr.w	r2, r2, #8
   d838c:	e00c      	b.n	d83a8 <_ZN5RFM697setModeEh+0x88>
			break;
		case RF69_MODE_STANDBY:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_STANDBY);
   d838e:	2101      	movs	r1, #1
   d8390:	f7ff ff66 	bl	d8260 <_ZN5RFM697readRegEh>
   d8394:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d8398:	f042 0204 	orr.w	r2, r2, #4
   d839c:	e004      	b.n	d83a8 <_ZN5RFM697setModeEh+0x88>
			break;
		case RF69_MODE_SLEEP:
			writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
   d839e:	2101      	movs	r1, #1
   d83a0:	f7ff ff5e 	bl	d8260 <_ZN5RFM697readRegEh>
   d83a4:	f000 02e3 	and.w	r2, r0, #227	; 0xe3
   d83a8:	2101      	movs	r1, #1
   d83aa:	4620      	mov	r0, r4
   d83ac:	f7ff ff6a 	bl	d8284 <_ZN5RFM698writeRegEhh>
		default: return;
	}

	// we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
	while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // Wait for ModeReady
   d83b0:	782b      	ldrb	r3, [r5, #0]
   d83b2:	b92b      	cbnz	r3, d83c0 <_ZN5RFM697setModeEh+0xa0>
   d83b4:	2127      	movs	r1, #39	; 0x27
   d83b6:	4620      	mov	r0, r4
   d83b8:	f7ff ff52 	bl	d8260 <_ZN5RFM697readRegEh>
   d83bc:	0603      	lsls	r3, r0, #24
   d83be:	d5f7      	bpl.n	d83b0 <_ZN5RFM697setModeEh+0x90>

	_mode = newMode;
   d83c0:	702e      	strb	r6, [r5, #0]
   d83c2:	bd70      	pop	{r4, r5, r6, pc}
   d83c4:	2003dec0 	.word	0x2003dec0

000d83c8 <_ZN5RFM6912receiveBeginEv>:
}

void RFM69::isr0() { selfPointer->interruptHandler(); }

void RFM69::receiveBegin() {
  DATALEN = 0;
   d83c8:	4a15      	ldr	r2, [pc, #84]	; (d8420 <_ZN5RFM6912receiveBeginEv+0x58>)
   d83ca:	2300      	movs	r3, #0
  //digitalWrite(4, 0);
}

void RFM69::isr0() { selfPointer->interruptHandler(); }

void RFM69::receiveBegin() {
   d83cc:	b510      	push	{r4, lr}
  DATALEN = 0;
   d83ce:	7013      	strb	r3, [r2, #0]
  SENDERID = 0;
   d83d0:	4a14      	ldr	r2, [pc, #80]	; (d8424 <_ZN5RFM6912receiveBeginEv+0x5c>)
   d83d2:	7013      	strb	r3, [r2, #0]
  TARGETID = 0;
   d83d4:	4a14      	ldr	r2, [pc, #80]	; (d8428 <_ZN5RFM6912receiveBeginEv+0x60>)
   d83d6:	7013      	strb	r3, [r2, #0]
  PAYLOADLEN = 0;
   d83d8:	4a14      	ldr	r2, [pc, #80]	; (d842c <_ZN5RFM6912receiveBeginEv+0x64>)
   d83da:	7013      	strb	r3, [r2, #0]
  ACK_REQUESTED = 0;
   d83dc:	4a14      	ldr	r2, [pc, #80]	; (d8430 <_ZN5RFM6912receiveBeginEv+0x68>)
   d83de:	7013      	strb	r3, [r2, #0]
  ACK_RECEIVED = 0;
   d83e0:	4a14      	ldr	r2, [pc, #80]	; (d8434 <_ZN5RFM6912receiveBeginEv+0x6c>)
   d83e2:	7013      	strb	r3, [r2, #0]
  RSSI = 0;
   d83e4:	4a14      	ldr	r2, [pc, #80]	; (d8438 <_ZN5RFM6912receiveBeginEv+0x70>)
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
   d83e6:	2128      	movs	r1, #40	; 0x28
  SENDERID = 0;
  TARGETID = 0;
  PAYLOADLEN = 0;
  ACK_REQUESTED = 0;
  ACK_RECEIVED = 0;
  RSSI = 0;
   d83e8:	6013      	str	r3, [r2, #0]
  //digitalWrite(4, 0);
}

void RFM69::isr0() { selfPointer->interruptHandler(); }

void RFM69::receiveBegin() {
   d83ea:	4604      	mov	r4, r0
  TARGETID = 0;
  PAYLOADLEN = 0;
  ACK_REQUESTED = 0;
  ACK_RECEIVED = 0;
  RSSI = 0;
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
   d83ec:	f7ff ff38 	bl	d8260 <_ZN5RFM697readRegEh>
   d83f0:	0743      	lsls	r3, r0, #29
   d83f2:	d50a      	bpl.n	d840a <_ZN5RFM6912receiveBeginEv+0x42>
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
   d83f4:	213d      	movs	r1, #61	; 0x3d
   d83f6:	4620      	mov	r0, r4
   d83f8:	f7ff ff32 	bl	d8260 <_ZN5RFM697readRegEh>
   d83fc:	f040 0204 	orr.w	r2, r0, #4
   d8400:	b2d2      	uxtb	r2, r2
   d8402:	213d      	movs	r1, #61	; 0x3d
   d8404:	4620      	mov	r0, r4
   d8406:	f7ff ff3d 	bl	d8284 <_ZN5RFM698writeRegEhh>
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); //set DIO0 to "PAYLOADREADY" in receive mode
   d840a:	4620      	mov	r0, r4
   d840c:	2125      	movs	r1, #37	; 0x25
   d840e:	2240      	movs	r2, #64	; 0x40
   d8410:	f7ff ff38 	bl	d8284 <_ZN5RFM698writeRegEhh>
  setMode(RF69_MODE_RX);
   d8414:	4620      	mov	r0, r4
   d8416:	2103      	movs	r1, #3
}
   d8418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ACK_RECEIVED = 0;
  RSSI = 0;
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); //set DIO0 to "PAYLOADREADY" in receive mode
  setMode(RF69_MODE_RX);
   d841c:	f7ff bf80 	b.w	d8320 <_ZN5RFM697setModeEh>
   d8420:	2003debf 	.word	0x2003debf
   d8424:	2003de7a 	.word	0x2003de7a
   d8428:	2003de78 	.word	0x2003de78
   d842c:	2003de80 	.word	0x2003de80
   d8430:	2003de79 	.word	0x2003de79
   d8434:	2003de81 	.word	0x2003de81
   d8438:	2003de74 	.word	0x2003de74

000d843c <_ZN5RFM6911receiveDoneEv>:
}

bool RFM69::receiveDone() {
   d843c:	b510      	push	{r4, lr}
   d843e:	4604      	mov	r4, r0
// ATOMIC_BLOCK(ATOMIC_FORCEON)
// {
  noInterrupts(); //re-enabled in unselect() via setMode() or via receiveBegin()
   d8440:	f001 fdd2 	bl	d9fe8 <_Z12noInterruptsv>
  if (_mode == RF69_MODE_RX && PAYLOADLEN>0)
   d8444:	4b0b      	ldr	r3, [pc, #44]	; (d8474 <_ZN5RFM6911receiveDoneEv+0x38>)
   d8446:	781a      	ldrb	r2, [r3, #0]
   d8448:	2a03      	cmp	r2, #3
   d844a:	d102      	bne.n	d8452 <_ZN5RFM6911receiveDoneEv+0x16>
   d844c:	4a0a      	ldr	r2, [pc, #40]	; (d8478 <_ZN5RFM6911receiveDoneEv+0x3c>)
   d844e:	7812      	ldrb	r2, [r2, #0]
   d8450:	b952      	cbnz	r2, d8468 <_ZN5RFM6911receiveDoneEv+0x2c>
  {
    setMode(RF69_MODE_STANDBY); //enables interrupts
    return true;
  }
  else if (_mode == RF69_MODE_RX)  //already in RX no payload yet
   d8452:	781b      	ldrb	r3, [r3, #0]
   d8454:	2b03      	cmp	r3, #3
   d8456:	d102      	bne.n	d845e <_ZN5RFM6911receiveDoneEv+0x22>
  {
    interrupts(); //explicitly re-enable interrupts
   d8458:	f001 fdc8 	bl	d9fec <_Z10interruptsv>
   d845c:	e002      	b.n	d8464 <_ZN5RFM6911receiveDoneEv+0x28>
    return false;
  }
  receiveBegin();
   d845e:	4620      	mov	r0, r4
   d8460:	f7ff ffb2 	bl	d83c8 <_ZN5RFM6912receiveBeginEv>
  return false;
   d8464:	2000      	movs	r0, #0
   d8466:	bd10      	pop	{r4, pc}
// ATOMIC_BLOCK(ATOMIC_FORCEON)
// {
  noInterrupts(); //re-enabled in unselect() via setMode() or via receiveBegin()
  if (_mode == RF69_MODE_RX && PAYLOADLEN>0)
  {
    setMode(RF69_MODE_STANDBY); //enables interrupts
   d8468:	4620      	mov	r0, r4
   d846a:	2101      	movs	r1, #1
   d846c:	f7ff ff58 	bl	d8320 <_ZN5RFM697setModeEh>
    return true;
   d8470:	2001      	movs	r0, #1
    return false;
  }
  receiveBegin();
  return false;
//}
}
   d8472:	bd10      	pop	{r4, pc}
   d8474:	2003dec0 	.word	0x2003dec0
   d8478:	2003de80 	.word	0x2003de80

000d847c <_ZN5RFM6912setHighPowerEb>:
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

void RFM69::setHighPower(bool onOff) {
  _isRFM69HW = onOff;
  writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
   d847c:	2900      	cmp	r1, #0
void RFM69::promiscuous(bool onOff) {
  _promiscuousMode=onOff;
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

void RFM69::setHighPower(bool onOff) {
   d847e:	b510      	push	{r4, lr}
   d8480:	4604      	mov	r4, r0
  _isRFM69HW = onOff;
   d8482:	7281      	strb	r1, [r0, #10]
  writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
   d8484:	bf14      	ite	ne
   d8486:	220f      	movne	r2, #15
   d8488:	221a      	moveq	r2, #26
   d848a:	2113      	movs	r1, #19
   d848c:	f7ff fefa 	bl	d8284 <_ZN5RFM698writeRegEhh>
  if (_isRFM69HW) //turning ON
   d8490:	7aa3      	ldrb	r3, [r4, #10]
   d8492:	b143      	cbz	r3, d84a6 <_ZN5RFM6912setHighPowerEb+0x2a>
    writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); //enable P1 & P2 amplifier stages
   d8494:	2111      	movs	r1, #17
   d8496:	4620      	mov	r0, r4
   d8498:	f7ff fee2 	bl	d8260 <_ZN5RFM697readRegEh>
   d849c:	f000 021f 	and.w	r2, r0, #31
   d84a0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
   d84a4:	e002      	b.n	d84ac <_ZN5RFM6912setHighPowerEb+0x30>
  else
    writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); //enable P0 only
   d84a6:	7a62      	ldrb	r2, [r4, #9]
   d84a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   d84ac:	4620      	mov	r0, r4
   d84ae:	2111      	movs	r1, #17
}
   d84b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  _isRFM69HW = onOff;
  writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
  if (_isRFM69HW) //turning ON
    writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); //enable P1 & P2 amplifier stages
  else
    writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); //enable P0 only
   d84b4:	f7ff bee6 	b.w	d8284 <_ZN5RFM698writeRegEhh>

000d84b8 <_ZN5RFM6916interruptHandlerEv>:
	while (digitalRead(_interruptPin) == 0 && millis()-txStart < RF69_TX_LIMIT_MS); //wait for DIO0 to turn HIGH signalling transmission finish
  //while (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT == 0x00); // Wait for ModeReady
  setMode(RF69_MODE_STANDBY);
}

void RFM69::interruptHandler() {
   d84b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  //pinMode(4, OUTPUT);
  //digitalWrite(4, 1);
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
   d84bc:	4b3d      	ldr	r3, [pc, #244]	; (d85b4 <_ZN5RFM6916interruptHandlerEv+0xfc>)
   d84be:	781b      	ldrb	r3, [r3, #0]
   d84c0:	2b03      	cmp	r3, #3
	while (digitalRead(_interruptPin) == 0 && millis()-txStart < RF69_TX_LIMIT_MS); //wait for DIO0 to turn HIGH signalling transmission finish
  //while (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT == 0x00); // Wait for ModeReady
  setMode(RF69_MODE_STANDBY);
}

void RFM69::interruptHandler() {
   d84c2:	4604      	mov	r4, r0
  //pinMode(4, OUTPUT);
  //digitalWrite(4, 1);
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
   d84c4:	d114      	bne.n	d84f0 <_ZN5RFM6916interruptHandlerEv+0x38>
   d84c6:	2128      	movs	r1, #40	; 0x28
   d84c8:	f7ff feca 	bl	d8260 <_ZN5RFM697readRegEh>
   d84cc:	0743      	lsls	r3, r0, #29
   d84ce:	d417      	bmi.n	d8500 <_ZN5RFM6916interruptHandlerEv+0x48>
   d84d0:	e00e      	b.n	d84f0 <_ZN5RFM6916interruptHandlerEv+0x38>

    for (byte i= 0; i < DATALEN; i++)
    {
      DATA[i] = SPI1.transfer(0);
    }
    if (DATALEN<RF69_MAX_DATA_LEN) DATA[DATALEN]=0; //add null at end of string
   d84d2:	7813      	ldrb	r3, [r2, #0]
   d84d4:	2b3c      	cmp	r3, #60	; 0x3c
   d84d6:	d804      	bhi.n	d84e2 <_ZN5RFM6916interruptHandlerEv+0x2a>
   d84d8:	7813      	ldrb	r3, [r2, #0]
   d84da:	4a37      	ldr	r2, [pc, #220]	; (d85b8 <_ZN5RFM6916interruptHandlerEv+0x100>)
   d84dc:	b2db      	uxtb	r3, r3
   d84de:	2100      	movs	r1, #0
   d84e0:	54d1      	strb	r1, [r2, r3]
    unselect();
   d84e2:	4620      	mov	r0, r4
   d84e4:	f7ff fe7a 	bl	d81dc <_ZN5RFM698unselectEv>
    setMode(RF69_MODE_RX);
   d84e8:	2103      	movs	r1, #3
   d84ea:	4620      	mov	r0, r4
   d84ec:	f7ff ff18 	bl	d8320 <_ZN5RFM697setModeEh>
  }
  RSSI = readRSSI();
   d84f0:	2100      	movs	r1, #0
   d84f2:	4620      	mov	r0, r4
   d84f4:	f7ff feec 	bl	d82d0 <_ZN5RFM698readRSSIEb>
   d84f8:	4b30      	ldr	r3, [pc, #192]	; (d85bc <_ZN5RFM6916interruptHandlerEv+0x104>)
   d84fa:	6018      	str	r0, [r3, #0]
   d84fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  //pinMode(4, OUTPUT);
  //digitalWrite(4, 1);
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
  {
    //RSSI = readRSSI();
    setMode(RF69_MODE_STANDBY);
   d8500:	2101      	movs	r1, #1
   d8502:	4620      	mov	r0, r4
   d8504:	f7ff ff0c 	bl	d8320 <_ZN5RFM697setModeEh>
    select();
   d8508:	4620      	mov	r0, r4
   d850a:	f7ff fe90 	bl	d822e <_ZN5RFM696selectEv>
    SPI1.transfer(REG_FIFO & 0x7f);
   d850e:	2000      	movs	r0, #0
   d8510:	f7ff fe84 	bl	d821c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
    PAYLOADLEN = SPI1.transfer(0);
   d8514:	2000      	movs	r0, #0
   d8516:	f7ff fe81 	bl	d821c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d851a:	4d29      	ldr	r5, [pc, #164]	; (d85c0 <_ZN5RFM6916interruptHandlerEv+0x108>)
   d851c:	7028      	strb	r0, [r5, #0]
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
   d851e:	782b      	ldrb	r3, [r5, #0]
   d8520:	2b42      	cmp	r3, #66	; 0x42
   d8522:	d814      	bhi.n	d854e <_ZN5RFM6916interruptHandlerEv+0x96>
   d8524:	782b      	ldrb	r3, [r5, #0]
   d8526:	b2db      	uxtb	r3, r3
    TARGETID = SPI1.transfer(0);
   d8528:	2000      	movs	r0, #0
    //RSSI = readRSSI();
    setMode(RF69_MODE_STANDBY);
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
   d852a:	702b      	strb	r3, [r5, #0]
    TARGETID = SPI1.transfer(0);
   d852c:	f7ff fe76 	bl	d821c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d8530:	4b24      	ldr	r3, [pc, #144]	; (d85c4 <_ZN5RFM6916interruptHandlerEv+0x10c>)
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
   d8532:	7a22      	ldrb	r2, [r4, #8]
    setMode(RF69_MODE_STANDBY);
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
    TARGETID = SPI1.transfer(0);
   d8534:	7018      	strb	r0, [r3, #0]
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
   d8536:	b932      	cbnz	r2, d8546 <_ZN5RFM6916interruptHandlerEv+0x8e>
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
    TARGETID = SPI1.transfer(0);
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
   d8538:	781a      	ldrb	r2, [r3, #0]
   d853a:	79e1      	ldrb	r1, [r4, #7]
   d853c:	4291      	cmp	r1, r2
   d853e:	d002      	beq.n	d8546 <_ZN5RFM6916interruptHandlerEv+0x8e>
   d8540:	781b      	ldrb	r3, [r3, #0]
   d8542:	2bff      	cmp	r3, #255	; 0xff
   d8544:	d105      	bne.n	d8552 <_ZN5RFM6916interruptHandlerEv+0x9a>
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
   d8546:	782b      	ldrb	r3, [r5, #0]
   d8548:	2b02      	cmp	r3, #2
   d854a:	d902      	bls.n	d8552 <_ZN5RFM6916interruptHandlerEv+0x9a>
   d854c:	e00b      	b.n	d8566 <_ZN5RFM6916interruptHandlerEv+0xae>
    //RSSI = readRSSI();
    setMode(RF69_MODE_STANDBY);
    select();
    SPI1.transfer(REG_FIFO & 0x7f);
    PAYLOADLEN = SPI1.transfer(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
   d854e:	2342      	movs	r3, #66	; 0x42
   d8550:	e7ea      	b.n	d8528 <_ZN5RFM6916interruptHandlerEv+0x70>
    TARGETID = SPI1.transfer(0);
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
    {
      PAYLOADLEN = 0;
      unselect();
   d8552:	4620      	mov	r0, r4
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
    TARGETID = SPI1.transfer(0);
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
    {
      PAYLOADLEN = 0;
   d8554:	2300      	movs	r3, #0
   d8556:	702b      	strb	r3, [r5, #0]
      unselect();
   d8558:	f7ff fe40 	bl	d81dc <_ZN5RFM698unselectEv>
      receiveBegin();
   d855c:	4620      	mov	r0, r4
    unselect();
    setMode(RF69_MODE_RX);
  }
  RSSI = readRSSI();
  //digitalWrite(4, 0);
}
   d855e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR) //match this node's address, or broadcast address or anything in promiscuous mode
       || PAYLOADLEN < 3) //address situation could receive packets that are malformed and don't fit this libraries extra fields
    {
      PAYLOADLEN = 0;
      unselect();
      receiveBegin();
   d8562:	f7ff bf31 	b.w	d83c8 <_ZN5RFM6912receiveBeginEv>
      //digitalWrite(4, 0);
      return;
    }

    DATALEN = PAYLOADLEN - 3;
   d8566:	4b16      	ldr	r3, [pc, #88]	; (d85c0 <_ZN5RFM6916interruptHandlerEv+0x108>)
   d8568:	4e17      	ldr	r6, [pc, #92]	; (d85c8 <_ZN5RFM6916interruptHandlerEv+0x110>)
   d856a:	781b      	ldrb	r3, [r3, #0]
    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag

    for (byte i= 0; i < DATALEN; i++)
    {
      DATA[i] = SPI1.transfer(0);
   d856c:	4f12      	ldr	r7, [pc, #72]	; (d85b8 <_ZN5RFM6916interruptHandlerEv+0x100>)
      receiveBegin();
      //digitalWrite(4, 0);
      return;
    }

    DATALEN = PAYLOADLEN - 3;
   d856e:	3b03      	subs	r3, #3
   d8570:	b2db      	uxtb	r3, r3
    SENDERID = SPI1.transfer(0);
   d8572:	2000      	movs	r0, #0
      receiveBegin();
      //digitalWrite(4, 0);
      return;
    }

    DATALEN = PAYLOADLEN - 3;
   d8574:	7033      	strb	r3, [r6, #0]
    SENDERID = SPI1.transfer(0);
   d8576:	f7ff fe51 	bl	d821c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d857a:	4b14      	ldr	r3, [pc, #80]	; (d85cc <_ZN5RFM6916interruptHandlerEv+0x114>)
   d857c:	7018      	strb	r0, [r3, #0]
    byte CTLbyte = SPI1.transfer(0);
   d857e:	2000      	movs	r0, #0
   d8580:	f7ff fe4c 	bl	d821c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>

    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
   d8584:	4a12      	ldr	r2, [pc, #72]	; (d85d0 <_ZN5RFM6916interruptHandlerEv+0x118>)
   d8586:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
   d858a:	b2db      	uxtb	r3, r3
   d858c:	7013      	strb	r3, [r2, #0]
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag
   d858e:	f000 0040 	and.w	r0, r0, #64	; 0x40
   d8592:	4b10      	ldr	r3, [pc, #64]	; (d85d4 <_ZN5RFM6916interruptHandlerEv+0x11c>)
   d8594:	b2c0      	uxtb	r0, r0
   d8596:	7018      	strb	r0, [r3, #0]
   d8598:	2300      	movs	r3, #0

    for (byte i= 0; i < DATALEN; i++)
   d859a:	7831      	ldrb	r1, [r6, #0]
   d859c:	4a0a      	ldr	r2, [pc, #40]	; (d85c8 <_ZN5RFM6916interruptHandlerEv+0x110>)
   d859e:	b2dd      	uxtb	r5, r3
   d85a0:	428d      	cmp	r5, r1
   d85a2:	f103 0801 	add.w	r8, r3, #1
   d85a6:	d294      	bcs.n	d84d2 <_ZN5RFM6916interruptHandlerEv+0x1a>
    {
      DATA[i] = SPI1.transfer(0);
   d85a8:	2000      	movs	r0, #0
   d85aa:	f7ff fe37 	bl	d821c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
    byte CTLbyte = SPI1.transfer(0);

    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag

    for (byte i= 0; i < DATALEN; i++)
   d85ae:	4643      	mov	r3, r8
    {
      DATA[i] = SPI1.transfer(0);
   d85b0:	5578      	strb	r0, [r7, r5]
    byte CTLbyte = SPI1.transfer(0);

    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag

    for (byte i= 0; i < DATALEN; i++)
   d85b2:	e7f2      	b.n	d859a <_ZN5RFM6916interruptHandlerEv+0xe2>
   d85b4:	2003dec0 	.word	0x2003dec0
   d85b8:	2003de82 	.word	0x2003de82
   d85bc:	2003de74 	.word	0x2003de74
   d85c0:	2003de80 	.word	0x2003de80
   d85c4:	2003de78 	.word	0x2003de78
   d85c8:	2003debf 	.word	0x2003debf
   d85cc:	2003de7a 	.word	0x2003de7a
   d85d0:	2003de81 	.word	0x2003de81
   d85d4:	2003de79 	.word	0x2003de79

000d85d8 <_ZN5RFM697encryptEPKc>:
}

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM69::encrypt(const char* key) {
   d85d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d85da:	460d      	mov	r5, r1
  setMode(RF69_MODE_STANDBY);
   d85dc:	2101      	movs	r1, #1
}

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM69::encrypt(const char* key) {
   d85de:	4604      	mov	r4, r0
  setMode(RF69_MODE_STANDBY);
   d85e0:	f7ff fe9e 	bl	d8320 <_ZN5RFM697setModeEh>
  if (key!=0)
   d85e4:	b18d      	cbz	r5, d860a <_ZN5RFM697encryptEPKc+0x32>
  {
    select();
   d85e6:	4620      	mov	r0, r4
   d85e8:	f7ff fe21 	bl	d822e <_ZN5RFM696selectEv>
    SPI1.transfer(REG_AESKEY1 | 0x80);
   d85ec:	20be      	movs	r0, #190	; 0xbe
   d85ee:	f7ff fe15 	bl	d821c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
   d85f2:	1e6e      	subs	r6, r5, #1
   d85f4:	f105 070f 	add.w	r7, r5, #15
    for (byte i = 0; i<16; i++)
      SPI1.transfer(key[i]);
   d85f8:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   d85fc:	f7ff fe0e 	bl	d821c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8transferEh.isra.3>
  setMode(RF69_MODE_STANDBY);
  if (key!=0)
  {
    select();
    SPI1.transfer(REG_AESKEY1 | 0x80);
    for (byte i = 0; i<16; i++)
   d8600:	42be      	cmp	r6, r7
   d8602:	d1f9      	bne.n	d85f8 <_ZN5RFM697encryptEPKc+0x20>
      SPI1.transfer(key[i]);
    unselect();
   d8604:	4620      	mov	r0, r4
   d8606:	f7ff fde9 	bl	d81dc <_ZN5RFM698unselectEv>
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
   d860a:	213d      	movs	r1, #61	; 0x3d
   d860c:	4620      	mov	r0, r4
   d860e:	f7ff fe27 	bl	d8260 <_ZN5RFM697readRegEh>
   d8612:	f020 0001 	bic.w	r0, r0, #1
   d8616:	2d00      	cmp	r5, #0
   d8618:	bf0c      	ite	eq
   d861a:	4602      	moveq	r2, r0
   d861c:	f040 0201 	orrne.w	r2, r0, #1
   d8620:	b2d2      	uxtb	r2, r2
   d8622:	4620      	mov	r0, r4
   d8624:	213d      	movs	r1, #61	; 0x3d
}
   d8626:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    SPI1.transfer(REG_AESKEY1 | 0x80);
    for (byte i = 0; i<16; i++)
      SPI1.transfer(key[i]);
    unselect();
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
   d862a:	f7ff be2b 	b.w	d8284 <_ZN5RFM698writeRegEhh>
	...

000d8630 <_ZN5RFM6910initializeEhhh>:
volatile byte RFM69::ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
volatile int RFM69::RSSI; //most accurate RSSI during reception (closest to the reception)
RFM69* RFM69::selfPointer;

bool RFM69::initialize(byte freqBand, byte nodeID, byte networkID)
{
   d8630:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8632:	b08f      	sub	sp, #60	; 0x3c
   d8634:	460d      	mov	r5, r1
   d8636:	4604      	mov	r4, r0
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d8638:	2100      	movs	r1, #0
volatile byte RFM69::ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
volatile int RFM69::RSSI; //most accurate RSSI during reception (closest to the reception)
RFM69* RFM69::selfPointer;

bool RFM69::initialize(byte freqBand, byte nodeID, byte networkID)
{
   d863a:	4616      	mov	r6, r2
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d863c:	a803      	add	r0, sp, #12
   d863e:	222a      	movs	r2, #42	; 0x2a
volatile byte RFM69::ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
volatile int RFM69::RSSI; //most accurate RSSI during reception (closest to the reception)
RFM69* RFM69::selfPointer;

bool RFM69::initialize(byte freqBand, byte nodeID, byte networkID)
{
   d8640:	461f      	mov	r7, r3
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d8642:	f003 fb27 	bl	dbc94 <memset>
   d8646:	2301      	movs	r3, #1
   d8648:	f88d 300c 	strb.w	r3, [sp, #12]
   d864c:	2303      	movs	r3, #3
   d864e:	f88d 3010 	strb.w	r3, [sp, #16]
   d8652:	f88d 3015 	strb.w	r3, [sp, #21]
   d8656:	2306      	movs	r3, #6
   d8658:	f88d 3016 	strb.w	r3, [sp, #22]
   d865c:	2333      	movs	r3, #51	; 0x33
   d865e:	f88d 3017 	strb.w	r3, [sp, #23]
   d8662:	2307      	movs	r3, #7
   d8664:	f88d 3018 	strb.w	r3, [sp, #24]
   d8668:	2308      	movs	r3, #8
   d866a:	f88d 301a 	strb.w	r3, [sp, #26]
   d866e:	2309      	movs	r3, #9
   d8670:	f88d 301c 	strb.w	r3, [sp, #28]
   d8674:	2319      	movs	r3, #25
   d8676:	f88d 301e 	strb.w	r3, [sp, #30]
   d867a:	2325      	movs	r3, #37	; 0x25
   d867c:	f88d 3020 	strb.w	r3, [sp, #32]
   d8680:	2329      	movs	r3, #41	; 0x29
   d8682:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   d8686:	23dc      	movs	r3, #220	; 0xdc
   d8688:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   d868c:	232e      	movs	r3, #46	; 0x2e
   d868e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d8692:	2388      	movs	r3, #136	; 0x88
   d8694:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   d8698:	232f      	movs	r3, #47	; 0x2f
   d869a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   d869e:	232d      	movs	r3, #45	; 0x2d
   d86a0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   d86a4:	2337      	movs	r3, #55	; 0x37
   d86a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   d86aa:	2390      	movs	r3, #144	; 0x90
   d86ac:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d86b0:	2338      	movs	r3, #56	; 0x38
   d86b2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   d86b6:	233c      	movs	r3, #60	; 0x3c
   d86b8:	2204      	movs	r2, #4
   d86ba:	2102      	movs	r1, #2
   d86bc:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
   d86c0:	238f      	movs	r3, #143	; 0x8f
   d86c2:	f88d 200d 	strb.w	r2, [sp, #13]
   d86c6:	f88d 100e 	strb.w	r1, [sp, #14]
   d86ca:	f88d 1011 	strb.w	r1, [sp, #17]
   d86ce:	f88d 2012 	strb.w	r2, [sp, #18]
   d86d2:	2105      	movs	r1, #5
   d86d4:	2240      	movs	r2, #64	; 0x40
   d86d6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   d86da:	233d      	movs	r3, #61	; 0x3d
   d86dc:	f88d 2013 	strb.w	r2, [sp, #19]
   d86e0:	f88d 1014 	strb.w	r1, [sp, #20]
   d86e4:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
   d86e8:	2142      	movs	r1, #66	; 0x42
   d86ea:	2230      	movs	r2, #48	; 0x30
   d86ec:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   d86f0:	2312      	movs	r3, #18
   d86f2:	f88d 101f 	strb.w	r1, [sp, #31]
   d86f6:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   d86fa:	f88d 102d 	strb.w	r1, [sp, #45]	; 0x2d
   d86fe:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   d8702:	236f      	movs	r3, #111	; 0x6f
   d8704:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   d8708:	2d1f      	cmp	r5, #31
   d870a:	f04f 03ff 	mov.w	r3, #255	; 0xff
   d870e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   d8712:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   d8716:	d006      	beq.n	d8726 <_ZN5RFM6910initializeEhhh+0xf6>
   d8718:	2d2b      	cmp	r5, #43	; 0x2b
   d871a:	d006      	beq.n	d872a <_ZN5RFM6910initializeEhhh+0xfa>
   d871c:	2d56      	cmp	r5, #86	; 0x56
   d871e:	bf0c      	ite	eq
   d8720:	22d9      	moveq	r2, #217	; 0xd9
   d8722:	22e4      	movne	r2, #228	; 0xe4
   d8724:	e002      	b.n	d872c <_ZN5RFM6910initializeEhhh+0xfc>
   d8726:	224e      	movs	r2, #78	; 0x4e
   d8728:	e000      	b.n	d872c <_ZN5RFM6910initializeEhhh+0xfc>
   d872a:	226c      	movs	r2, #108	; 0x6c
   d872c:	2d1f      	cmp	r5, #31
   d872e:	f88d 2019 	strb.w	r2, [sp, #25]
   d8732:	d006      	beq.n	d8742 <_ZN5RFM6910initializeEhhh+0x112>
   d8734:	2d2b      	cmp	r5, #43	; 0x2b
   d8736:	d006      	beq.n	d8746 <_ZN5RFM6910initializeEhhh+0x116>
   d8738:	2d56      	cmp	r5, #86	; 0x56
   d873a:	bf14      	ite	ne
   d873c:	22c0      	movne	r2, #192	; 0xc0
   d873e:	2200      	moveq	r2, #0
   d8740:	e002      	b.n	d8748 <_ZN5RFM6910initializeEhhh+0x118>
   d8742:	22c0      	movs	r2, #192	; 0xc0
   d8744:	e000      	b.n	d8748 <_ZN5RFM6910initializeEhhh+0x118>
   d8746:	2240      	movs	r2, #64	; 0x40

  pinMode(_slaveSelectPin, OUTPUT);
   d8748:	2101      	movs	r1, #1
   d874a:	7920      	ldrb	r0, [r4, #4]
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //for BR-19200: //* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    //* 0x6F */ { REG_TESTDAGC, RF_DAGC_CONTINUOUS }, // run DAGC continuously in RX mode
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
   d874c:	f88d 201b 	strb.w	r2, [sp, #27]
   d8750:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29

  pinMode(_slaveSelectPin, OUTPUT);
   d8754:	f002 fa06 	bl	dab64 <pinMode>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d8758:	f7ff fd4a 	bl	d81f0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface1EE8instanceEv>
   d875c:	f000 fc6e 	bl	d903c <_ZN8SPIClass5beginEv>
   d8760:	f000 f952 	bl	d8a08 <HAL_Timer_Get_Milli_Seconds>
   d8764:	4605      	mov	r5, r0
  // Set time out to 50ms
  #define TIME_OUT 50
  
  start_to = millis() ;

  do writeReg(REG_SYNCVALUE1, 0xaa); while (readReg(REG_SYNCVALUE1) != 0xaa && millis()-start_to < TIME_OUT);
   d8766:	22aa      	movs	r2, #170	; 0xaa
   d8768:	212f      	movs	r1, #47	; 0x2f
   d876a:	4620      	mov	r0, r4
   d876c:	f7ff fd8a 	bl	d8284 <_ZN5RFM698writeRegEhh>
   d8770:	212f      	movs	r1, #47	; 0x2f
   d8772:	4620      	mov	r0, r4
   d8774:	f7ff fd74 	bl	d8260 <_ZN5RFM697readRegEh>
   d8778:	28aa      	cmp	r0, #170	; 0xaa
   d877a:	d004      	beq.n	d8786 <_ZN5RFM6910initializeEhhh+0x156>
   d877c:	f000 f944 	bl	d8a08 <HAL_Timer_Get_Milli_Seconds>
   d8780:	1b40      	subs	r0, r0, r5
   d8782:	2831      	cmp	r0, #49	; 0x31
   d8784:	d9ef      	bls.n	d8766 <_ZN5RFM6910initializeEhhh+0x136>
   d8786:	f000 f93f 	bl	d8a08 <HAL_Timer_Get_Milli_Seconds>
  if (millis()-start_to >= TIME_OUT) return (false);
   d878a:	1b40      	subs	r0, r0, r5
   d878c:	2831      	cmp	r0, #49	; 0x31
   d878e:	d82d      	bhi.n	d87ec <_ZN5RFM6910initializeEhhh+0x1bc>
   d8790:	f000 f93a 	bl	d8a08 <HAL_Timer_Get_Milli_Seconds>
   d8794:	4605      	mov	r5, r0
    
  // Set time out 
  start_to = millis()  ;  
	do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis()-start_to < TIME_OUT);
   d8796:	2255      	movs	r2, #85	; 0x55
   d8798:	212f      	movs	r1, #47	; 0x2f
   d879a:	4620      	mov	r0, r4
   d879c:	f7ff fd72 	bl	d8284 <_ZN5RFM698writeRegEhh>
   d87a0:	212f      	movs	r1, #47	; 0x2f
   d87a2:	4620      	mov	r0, r4
   d87a4:	f7ff fd5c 	bl	d8260 <_ZN5RFM697readRegEh>
   d87a8:	2855      	cmp	r0, #85	; 0x55
   d87aa:	d021      	beq.n	d87f0 <_ZN5RFM6910initializeEhhh+0x1c0>
   d87ac:	f000 f92c 	bl	d8a08 <HAL_Timer_Get_Milli_Seconds>
   d87b0:	1b40      	subs	r0, r0, r5
   d87b2:	2831      	cmp	r0, #49	; 0x31
   d87b4:	d9ef      	bls.n	d8796 <_ZN5RFM6910initializeEhhh+0x166>
   d87b6:	e01b      	b.n	d87f0 <_ZN5RFM6910initializeEhhh+0x1c0>
  for (byte i = 0; CONFIG[i][0] != 255; i++)
    writeReg(CONFIG[i][0], CONFIG[i][1]);

  // Encryption is persistent between resets and can trip you up during debugging.
  // Disable it during initialization so we always start from a known state.
  encrypt(0);
   d87b8:	2100      	movs	r1, #0
   d87ba:	4620      	mov	r0, r4
   d87bc:	f7ff ff0c 	bl	d85d8 <_ZN5RFM697encryptEPKc>

  setHighPower(_isRFM69HW); //called regardless if it's a RFM69W or RFM69HW
   d87c0:	7aa1      	ldrb	r1, [r4, #10]
   d87c2:	4620      	mov	r0, r4
   d87c4:	f7ff fe5a 	bl	d847c <_ZN5RFM6912setHighPowerEb>
  setMode(RF69_MODE_STANDBY);
   d87c8:	2101      	movs	r1, #1
   d87ca:	4620      	mov	r0, r4
   d87cc:	f7ff fda8 	bl	d8320 <_ZN5RFM697setModeEh>
   d87d0:	f000 f91a 	bl	d8a08 <HAL_Timer_Get_Milli_Seconds>
   d87d4:	4605      	mov	r5, r0
  // Set time out 
  start_to = millis() ;
	while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis()-start_to < TIME_OUT); // Wait for ModeReady
   d87d6:	2127      	movs	r1, #39	; 0x27
   d87d8:	4620      	mov	r0, r4
   d87da:	f7ff fd41 	bl	d8260 <_ZN5RFM697readRegEh>
   d87de:	0603      	lsls	r3, r0, #24
   d87e0:	d51b      	bpl.n	d881a <_ZN5RFM6910initializeEhhh+0x1ea>
   d87e2:	f000 f911 	bl	d8a08 <HAL_Timer_Get_Milli_Seconds>
  if (millis()-start_to >= TIME_OUT) return (false);
   d87e6:	1b40      	subs	r0, r0, r5
   d87e8:	2831      	cmp	r0, #49	; 0x31
   d87ea:	d91c      	bls.n	d8826 <_ZN5RFM6910initializeEhhh+0x1f6>
  // picking a non-interrupt enabled pin will prevent proper initialization
  // code thanks to @ScruffR - https://community.particle.io/t/how-to-make-rfm69-work-on-photon-solved-new-library-rfm69-particle/26497/93?u=bloukingfisher
  if (!attachInterrupt(_interruptNum, RFM69::isr0, RISING)) return false;
   d87ec:	2000      	movs	r0, #0
   d87ee:	e028      	b.n	d8842 <_ZN5RFM6910initializeEhhh+0x212>
   d87f0:	f000 f90a 	bl	d8a08 <HAL_Timer_Get_Milli_Seconds>
  if (millis()-start_to >= TIME_OUT) return (false);
    
  // Set time out 
  start_to = millis()  ;  
	do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis()-start_to < TIME_OUT);
  if (millis()-start_to >= TIME_OUT) return (false);
   d87f4:	1b40      	subs	r0, r0, r5
   d87f6:	2831      	cmp	r0, #49	; 0x31
   d87f8:	d8f8      	bhi.n	d87ec <_ZN5RFM6910initializeEhhh+0x1bc>
   d87fa:	2500      	movs	r5, #0
  for (byte i = 0; CONFIG[i][0] != 255; i++)
   d87fc:	b2eb      	uxtb	r3, r5
   d87fe:	aa0e      	add	r2, sp, #56	; 0x38
   d8800:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d8804:	3501      	adds	r5, #1
   d8806:	f813 1c2c 	ldrb.w	r1, [r3, #-44]
   d880a:	29ff      	cmp	r1, #255	; 0xff
   d880c:	d0d4      	beq.n	d87b8 <_ZN5RFM6910initializeEhhh+0x188>
    writeReg(CONFIG[i][0], CONFIG[i][1]);
   d880e:	f813 2c2b 	ldrb.w	r2, [r3, #-43]
   d8812:	4620      	mov	r0, r4
   d8814:	f7ff fd36 	bl	d8284 <_ZN5RFM698writeRegEhh>
    
  // Set time out 
  start_to = millis()  ;  
	do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis()-start_to < TIME_OUT);
  if (millis()-start_to >= TIME_OUT) return (false);
  for (byte i = 0; CONFIG[i][0] != 255; i++)
   d8818:	e7f0      	b.n	d87fc <_ZN5RFM6910initializeEhhh+0x1cc>
   d881a:	f000 f8f5 	bl	d8a08 <HAL_Timer_Get_Milli_Seconds>

  setHighPower(_isRFM69HW); //called regardless if it's a RFM69W or RFM69HW
  setMode(RF69_MODE_STANDBY);
  // Set time out 
  start_to = millis() ;
	while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis()-start_to < TIME_OUT); // Wait for ModeReady
   d881e:	1b40      	subs	r0, r0, r5
   d8820:	2831      	cmp	r0, #49	; 0x31
   d8822:	d9d8      	bls.n	d87d6 <_ZN5RFM6910initializeEhhh+0x1a6>
   d8824:	e7dd      	b.n	d87e2 <_ZN5RFM6910initializeEhhh+0x1b2>
  if (millis()-start_to >= TIME_OUT) return (false);
  // picking a non-interrupt enabled pin will prevent proper initialization
  // code thanks to @ScruffR - https://community.particle.io/t/how-to-make-rfm69-work-on-photon-solved-new-library-rfm69-particle/26497/93?u=bloukingfisher
  if (!attachInterrupt(_interruptNum, RFM69::isr0, RISING)) return false;
   d8826:	2300      	movs	r3, #0
   d8828:	9300      	str	r3, [sp, #0]
   d882a:	79a0      	ldrb	r0, [r4, #6]
   d882c:	4906      	ldr	r1, [pc, #24]	; (d8848 <_ZN5RFM6910initializeEhhh+0x218>)
   d882e:	f04f 33ff 	mov.w	r3, #4294967295
   d8832:	2201      	movs	r2, #1
   d8834:	f001 fb96 	bl	d9f64 <_Z15attachInterrupttPFvvE13InterruptModeah>
   d8838:	2800      	cmp	r0, #0
   d883a:	d0d7      	beq.n	d87ec <_ZN5RFM6910initializeEhhh+0x1bc>

  selfPointer = this;
   d883c:	4b03      	ldr	r3, [pc, #12]	; (d884c <_ZN5RFM6910initializeEhhh+0x21c>)
  _address = nodeID;
   d883e:	71e6      	strb	r6, [r4, #7]
  if (millis()-start_to >= TIME_OUT) return (false);
  // picking a non-interrupt enabled pin will prevent proper initialization
  // code thanks to @ScruffR - https://community.particle.io/t/how-to-make-rfm69-work-on-photon-solved-new-library-rfm69-particle/26497/93?u=bloukingfisher
  if (!attachInterrupt(_interruptNum, RFM69::isr0, RISING)) return false;

  selfPointer = this;
   d8840:	601c      	str	r4, [r3, #0]
  _address = nodeID;
  return true;
}
   d8842:	b00f      	add	sp, #60	; 0x3c
   d8844:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8846:	bf00      	nop
   d8848:	000d81cd 	.word	0x000d81cd
   d884c:	2003de7c 	.word	0x2003de7c

000d8850 <_GLOBAL__sub_I__ZN5RFM694DATAE>:
   d8850:	f000 b812 	b.w	d8878 <HAL_Pin_Map>

000d8854 <_GLOBAL__sub_I__ZN9RFM69_ATC18ACK_RSSI_REQUESTEDE>:
   d8854:	f000 b810 	b.w	d8878 <HAL_Pin_Map>

000d8858 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d8858:	b508      	push	{r3, lr}
   d885a:	4b02      	ldr	r3, [pc, #8]	; (d8864 <netdb_freeaddrinfo+0xc>)
   d885c:	681b      	ldr	r3, [r3, #0]
   d885e:	689b      	ldr	r3, [r3, #8]
   d8860:	9301      	str	r3, [sp, #4]
   d8862:	bd08      	pop	{r3, pc}
   d8864:	00030268 	.word	0x00030268

000d8868 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d8868:	b508      	push	{r3, lr}
   d886a:	4b02      	ldr	r3, [pc, #8]	; (d8874 <netdb_getaddrinfo+0xc>)
   d886c:	681b      	ldr	r3, [r3, #0]
   d886e:	68db      	ldr	r3, [r3, #12]
   d8870:	9301      	str	r3, [sp, #4]
   d8872:	bd08      	pop	{r3, pc}
   d8874:	00030268 	.word	0x00030268

000d8878 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d8878:	b508      	push	{r3, lr}
   d887a:	4b02      	ldr	r3, [pc, #8]	; (d8884 <HAL_Pin_Map+0xc>)
   d887c:	681b      	ldr	r3, [r3, #0]
   d887e:	681b      	ldr	r3, [r3, #0]
   d8880:	9301      	str	r3, [sp, #4]
   d8882:	bd08      	pop	{r3, pc}
   d8884:	0003022c 	.word	0x0003022c

000d8888 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d8888:	b508      	push	{r3, lr}
   d888a:	4b02      	ldr	r3, [pc, #8]	; (d8894 <HAL_Pin_Mode+0xc>)
   d888c:	681b      	ldr	r3, [r3, #0]
   d888e:	689b      	ldr	r3, [r3, #8]
   d8890:	9301      	str	r3, [sp, #4]
   d8892:	bd08      	pop	{r3, pc}
   d8894:	0003022c 	.word	0x0003022c

000d8898 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d8898:	b508      	push	{r3, lr}
   d889a:	4b02      	ldr	r3, [pc, #8]	; (d88a4 <HAL_Get_Pin_Mode+0xc>)
   d889c:	681b      	ldr	r3, [r3, #0]
   d889e:	68db      	ldr	r3, [r3, #12]
   d88a0:	9301      	str	r3, [sp, #4]
   d88a2:	bd08      	pop	{r3, pc}
   d88a4:	0003022c 	.word	0x0003022c

000d88a8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d88a8:	b508      	push	{r3, lr}
   d88aa:	4b02      	ldr	r3, [pc, #8]	; (d88b4 <HAL_GPIO_Write+0xc>)
   d88ac:	681b      	ldr	r3, [r3, #0]
   d88ae:	691b      	ldr	r3, [r3, #16]
   d88b0:	9301      	str	r3, [sp, #4]
   d88b2:	bd08      	pop	{r3, pc}
   d88b4:	0003022c 	.word	0x0003022c

000d88b8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d88b8:	b508      	push	{r3, lr}
   d88ba:	4b02      	ldr	r3, [pc, #8]	; (d88c4 <HAL_GPIO_Read+0xc>)
   d88bc:	681b      	ldr	r3, [r3, #0]
   d88be:	695b      	ldr	r3, [r3, #20]
   d88c0:	9301      	str	r3, [sp, #4]
   d88c2:	bd08      	pop	{r3, pc}
   d88c4:	0003022c 	.word	0x0003022c

000d88c8 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d88c8:	b508      	push	{r3, lr}
   d88ca:	4b02      	ldr	r3, [pc, #8]	; (d88d4 <HAL_Interrupts_Attach+0xc>)
   d88cc:	681b      	ldr	r3, [r3, #0]
   d88ce:	699b      	ldr	r3, [r3, #24]
   d88d0:	9301      	str	r3, [sp, #4]
   d88d2:	bd08      	pop	{r3, pc}
   d88d4:	0003022c 	.word	0x0003022c

000d88d8 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d88d8:	b508      	push	{r3, lr}
   d88da:	4b02      	ldr	r3, [pc, #8]	; (d88e4 <HAL_Interrupts_Detach+0xc>)
   d88dc:	681b      	ldr	r3, [r3, #0]
   d88de:	69db      	ldr	r3, [r3, #28]
   d88e0:	9301      	str	r3, [sp, #4]
   d88e2:	bd08      	pop	{r3, pc}
   d88e4:	0003022c 	.word	0x0003022c

000d88e8 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d88e8:	b508      	push	{r3, lr}
   d88ea:	4b02      	ldr	r3, [pc, #8]	; (d88f4 <HAL_Interrupts_Enable_All+0xc>)
   d88ec:	681b      	ldr	r3, [r3, #0]
   d88ee:	6a1b      	ldr	r3, [r3, #32]
   d88f0:	9301      	str	r3, [sp, #4]
   d88f2:	bd08      	pop	{r3, pc}
   d88f4:	0003022c 	.word	0x0003022c

000d88f8 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d88f8:	b508      	push	{r3, lr}
   d88fa:	4b02      	ldr	r3, [pc, #8]	; (d8904 <HAL_Interrupts_Disable_All+0xc>)
   d88fc:	681b      	ldr	r3, [r3, #0]
   d88fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8900:	9301      	str	r3, [sp, #4]
   d8902:	bd08      	pop	{r3, pc}
   d8904:	0003022c 	.word	0x0003022c

000d8908 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d8908:	b508      	push	{r3, lr}
   d890a:	4b02      	ldr	r3, [pc, #8]	; (d8914 <HAL_SPI_Begin+0xc>)
   d890c:	681b      	ldr	r3, [r3, #0]
   d890e:	681b      	ldr	r3, [r3, #0]
   d8910:	9301      	str	r3, [sp, #4]
   d8912:	bd08      	pop	{r3, pc}
   d8914:	00030230 	.word	0x00030230

000d8918 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d8918:	b508      	push	{r3, lr}
   d891a:	4b02      	ldr	r3, [pc, #8]	; (d8924 <HAL_SPI_Set_Bit_Order+0xc>)
   d891c:	681b      	ldr	r3, [r3, #0]
   d891e:	689b      	ldr	r3, [r3, #8]
   d8920:	9301      	str	r3, [sp, #4]
   d8922:	bd08      	pop	{r3, pc}
   d8924:	00030230 	.word	0x00030230

000d8928 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d8928:	b508      	push	{r3, lr}
   d892a:	4b02      	ldr	r3, [pc, #8]	; (d8934 <HAL_SPI_Set_Data_Mode+0xc>)
   d892c:	681b      	ldr	r3, [r3, #0]
   d892e:	68db      	ldr	r3, [r3, #12]
   d8930:	9301      	str	r3, [sp, #4]
   d8932:	bd08      	pop	{r3, pc}
   d8934:	00030230 	.word	0x00030230

000d8938 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d8938:	b508      	push	{r3, lr}
   d893a:	4b02      	ldr	r3, [pc, #8]	; (d8944 <HAL_SPI_Set_Clock_Divider+0xc>)
   d893c:	681b      	ldr	r3, [r3, #0]
   d893e:	691b      	ldr	r3, [r3, #16]
   d8940:	9301      	str	r3, [sp, #4]
   d8942:	bd08      	pop	{r3, pc}
   d8944:	00030230 	.word	0x00030230

000d8948 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d8948:	b508      	push	{r3, lr}
   d894a:	4b02      	ldr	r3, [pc, #8]	; (d8954 <HAL_SPI_Send_Receive_Data+0xc>)
   d894c:	681b      	ldr	r3, [r3, #0]
   d894e:	695b      	ldr	r3, [r3, #20]
   d8950:	9301      	str	r3, [sp, #4]
   d8952:	bd08      	pop	{r3, pc}
   d8954:	00030230 	.word	0x00030230

000d8958 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d8958:	b508      	push	{r3, lr}
   d895a:	4b02      	ldr	r3, [pc, #8]	; (d8964 <HAL_SPI_Init+0xc>)
   d895c:	681b      	ldr	r3, [r3, #0]
   d895e:	69db      	ldr	r3, [r3, #28]
   d8960:	9301      	str	r3, [sp, #4]
   d8962:	bd08      	pop	{r3, pc}
   d8964:	00030230 	.word	0x00030230

000d8968 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d8968:	b508      	push	{r3, lr}
   d896a:	4b02      	ldr	r3, [pc, #8]	; (d8974 <HAL_SPI_Is_Enabled+0xc>)
   d896c:	681b      	ldr	r3, [r3, #0]
   d896e:	6a1b      	ldr	r3, [r3, #32]
   d8970:	9301      	str	r3, [sp, #4]
   d8972:	bd08      	pop	{r3, pc}
   d8974:	00030230 	.word	0x00030230

000d8978 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d8978:	b508      	push	{r3, lr}
   d897a:	4b02      	ldr	r3, [pc, #8]	; (d8984 <HAL_SPI_Info+0xc>)
   d897c:	681b      	ldr	r3, [r3, #0]
   d897e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8980:	9301      	str	r3, [sp, #4]
   d8982:	bd08      	pop	{r3, pc}
   d8984:	00030230 	.word	0x00030230

000d8988 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d8988:	b508      	push	{r3, lr}
   d898a:	4b02      	ldr	r3, [pc, #8]	; (d8994 <HAL_SPI_DMA_Transfer+0xc>)
   d898c:	681b      	ldr	r3, [r3, #0]
   d898e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8990:	9301      	str	r3, [sp, #4]
   d8992:	bd08      	pop	{r3, pc}
   d8994:	00030230 	.word	0x00030230

000d8998 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d8998:	b508      	push	{r3, lr}
   d899a:	4b02      	ldr	r3, [pc, #8]	; (d89a4 <HAL_SPI_DMA_Transfer_Status+0xc>)
   d899c:	681b      	ldr	r3, [r3, #0]
   d899e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d89a0:	9301      	str	r3, [sp, #4]
   d89a2:	bd08      	pop	{r3, pc}
   d89a4:	00030230 	.word	0x00030230

000d89a8 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d89a8:	b508      	push	{r3, lr}
   d89aa:	4b02      	ldr	r3, [pc, #8]	; (d89b4 <HAL_SPI_Set_Settings+0xc>)
   d89ac:	681b      	ldr	r3, [r3, #0]
   d89ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d89b0:	9301      	str	r3, [sp, #4]
   d89b2:	bd08      	pop	{r3, pc}
   d89b4:	00030230 	.word	0x00030230

000d89b8 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d89b8:	b508      	push	{r3, lr}
   d89ba:	4b02      	ldr	r3, [pc, #8]	; (d89c4 <HAL_SPI_Acquire+0xc>)
   d89bc:	681b      	ldr	r3, [r3, #0]
   d89be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d89c0:	9301      	str	r3, [sp, #4]
   d89c2:	bd08      	pop	{r3, pc}
   d89c4:	00030230 	.word	0x00030230

000d89c8 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d89c8:	b508      	push	{r3, lr}
   d89ca:	4b02      	ldr	r3, [pc, #8]	; (d89d4 <HAL_SPI_Release+0xc>)
   d89cc:	681b      	ldr	r3, [r3, #0]
   d89ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d89d0:	9301      	str	r3, [sp, #4]
   d89d2:	bd08      	pop	{r3, pc}
   d89d4:	00030230 	.word	0x00030230

000d89d8 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d89d8:	b508      	push	{r3, lr}
   d89da:	4b02      	ldr	r3, [pc, #8]	; (d89e4 <if_index_to_name+0xc>)
   d89dc:	681b      	ldr	r3, [r3, #0]
   d89de:	695b      	ldr	r3, [r3, #20]
   d89e0:	9301      	str	r3, [sp, #4]
   d89e2:	bd08      	pop	{r3, pc}
   d89e4:	0003026c 	.word	0x0003026c

000d89e8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d89e8:	b508      	push	{r3, lr}
   d89ea:	4b02      	ldr	r3, [pc, #8]	; (d89f4 <HAL_RNG_GetRandomNumber+0xc>)
   d89ec:	681b      	ldr	r3, [r3, #0]
   d89ee:	685b      	ldr	r3, [r3, #4]
   d89f0:	9301      	str	r3, [sp, #4]
   d89f2:	bd08      	pop	{r3, pc}
   d89f4:	00030218 	.word	0x00030218

000d89f8 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d89f8:	b508      	push	{r3, lr}
   d89fa:	4b02      	ldr	r3, [pc, #8]	; (d8a04 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d89fc:	681b      	ldr	r3, [r3, #0]
   d89fe:	691b      	ldr	r3, [r3, #16]
   d8a00:	9301      	str	r3, [sp, #4]
   d8a02:	bd08      	pop	{r3, pc}
   d8a04:	00030218 	.word	0x00030218

000d8a08 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d8a08:	b508      	push	{r3, lr}
   d8a0a:	4b02      	ldr	r3, [pc, #8]	; (d8a14 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d8a0c:	681b      	ldr	r3, [r3, #0]
   d8a0e:	695b      	ldr	r3, [r3, #20]
   d8a10:	9301      	str	r3, [sp, #4]
   d8a12:	bd08      	pop	{r3, pc}
   d8a14:	00030218 	.word	0x00030218

000d8a18 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d8a18:	b508      	push	{r3, lr}
   d8a1a:	4b02      	ldr	r3, [pc, #8]	; (d8a24 <HAL_RTC_Get_UnixTime+0xc>)
   d8a1c:	681b      	ldr	r3, [r3, #0]
   d8a1e:	69db      	ldr	r3, [r3, #28]
   d8a20:	9301      	str	r3, [sp, #4]
   d8a22:	bd08      	pop	{r3, pc}
   d8a24:	00030218 	.word	0x00030218

000d8a28 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d8a28:	b508      	push	{r3, lr}
   d8a2a:	4b02      	ldr	r3, [pc, #8]	; (d8a34 <HAL_EEPROM_Init+0xc>)
   d8a2c:	681b      	ldr	r3, [r3, #0]
   d8a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8a30:	9301      	str	r3, [sp, #4]
   d8a32:	bd08      	pop	{r3, pc}
   d8a34:	00030218 	.word	0x00030218

000d8a38 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d8a38:	b508      	push	{r3, lr}
   d8a3a:	4b02      	ldr	r3, [pc, #8]	; (d8a44 <HAL_EEPROM_Get+0xc>)
   d8a3c:	681b      	ldr	r3, [r3, #0]
   d8a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8a40:	9301      	str	r3, [sp, #4]
   d8a42:	bd08      	pop	{r3, pc}
   d8a44:	00030218 	.word	0x00030218

000d8a48 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d8a48:	b508      	push	{r3, lr}
   d8a4a:	4b02      	ldr	r3, [pc, #8]	; (d8a54 <HAL_EEPROM_Put+0xc>)
   d8a4c:	681b      	ldr	r3, [r3, #0]
   d8a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8a50:	9301      	str	r3, [sp, #4]
   d8a52:	bd08      	pop	{r3, pc}
   d8a54:	00030218 	.word	0x00030218

000d8a58 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d8a58:	b508      	push	{r3, lr}
   d8a5a:	4b02      	ldr	r3, [pc, #8]	; (d8a64 <HAL_RTC_Time_Is_Valid+0xc>)
   d8a5c:	681b      	ldr	r3, [r3, #0]
   d8a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d8a60:	9301      	str	r3, [sp, #4]
   d8a62:	bd08      	pop	{r3, pc}
   d8a64:	00030218 	.word	0x00030218

000d8a68 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d8a68:	b508      	push	{r3, lr}
   d8a6a:	4b02      	ldr	r3, [pc, #8]	; (d8a74 <os_thread_is_current+0xc>)
   d8a6c:	681b      	ldr	r3, [r3, #0]
   d8a6e:	689b      	ldr	r3, [r3, #8]
   d8a70:	9301      	str	r3, [sp, #4]
   d8a72:	bd08      	pop	{r3, pc}
   d8a74:	00030248 	.word	0x00030248

000d8a78 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d8a78:	b508      	push	{r3, lr}
   d8a7a:	4b02      	ldr	r3, [pc, #8]	; (d8a84 <os_thread_yield+0xc>)
   d8a7c:	681b      	ldr	r3, [r3, #0]
   d8a7e:	68db      	ldr	r3, [r3, #12]
   d8a80:	9301      	str	r3, [sp, #4]
   d8a82:	bd08      	pop	{r3, pc}
   d8a84:	00030248 	.word	0x00030248

000d8a88 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d8a88:	b508      	push	{r3, lr}
   d8a8a:	4b02      	ldr	r3, [pc, #8]	; (d8a94 <os_thread_join+0xc>)
   d8a8c:	681b      	ldr	r3, [r3, #0]
   d8a8e:	691b      	ldr	r3, [r3, #16]
   d8a90:	9301      	str	r3, [sp, #4]
   d8a92:	bd08      	pop	{r3, pc}
   d8a94:	00030248 	.word	0x00030248

000d8a98 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d8a98:	b508      	push	{r3, lr}
   d8a9a:	4b02      	ldr	r3, [pc, #8]	; (d8aa4 <os_thread_cleanup+0xc>)
   d8a9c:	681b      	ldr	r3, [r3, #0]
   d8a9e:	695b      	ldr	r3, [r3, #20]
   d8aa0:	9301      	str	r3, [sp, #4]
   d8aa2:	bd08      	pop	{r3, pc}
   d8aa4:	00030248 	.word	0x00030248

000d8aa8 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d8aa8:	b508      	push	{r3, lr}
   d8aaa:	4b02      	ldr	r3, [pc, #8]	; (d8ab4 <os_thread_scheduling+0xc>)
   d8aac:	681b      	ldr	r3, [r3, #0]
   d8aae:	69db      	ldr	r3, [r3, #28]
   d8ab0:	9301      	str	r3, [sp, #4]
   d8ab2:	bd08      	pop	{r3, pc}
   d8ab4:	00030248 	.word	0x00030248

000d8ab8 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d8ab8:	b508      	push	{r3, lr}
   d8aba:	4b02      	ldr	r3, [pc, #8]	; (d8ac4 <os_timer_create+0xc>)
   d8abc:	681b      	ldr	r3, [r3, #0]
   d8abe:	6a1b      	ldr	r3, [r3, #32]
   d8ac0:	9301      	str	r3, [sp, #4]
   d8ac2:	bd08      	pop	{r3, pc}
   d8ac4:	00030248 	.word	0x00030248

000d8ac8 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d8ac8:	b508      	push	{r3, lr}
   d8aca:	4b02      	ldr	r3, [pc, #8]	; (d8ad4 <os_timer_destroy+0xc>)
   d8acc:	681b      	ldr	r3, [r3, #0]
   d8ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8ad0:	9301      	str	r3, [sp, #4]
   d8ad2:	bd08      	pop	{r3, pc}
   d8ad4:	00030248 	.word	0x00030248

000d8ad8 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d8ad8:	b508      	push	{r3, lr}
   d8ada:	4b02      	ldr	r3, [pc, #8]	; (d8ae4 <os_timer_get_id+0xc>)
   d8adc:	681b      	ldr	r3, [r3, #0]
   d8ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8ae0:	9301      	str	r3, [sp, #4]
   d8ae2:	bd08      	pop	{r3, pc}
   d8ae4:	00030248 	.word	0x00030248

000d8ae8 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d8ae8:	b508      	push	{r3, lr}
   d8aea:	4b02      	ldr	r3, [pc, #8]	; (d8af4 <os_timer_change+0xc>)
   d8aec:	681b      	ldr	r3, [r3, #0]
   d8aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8af0:	9301      	str	r3, [sp, #4]
   d8af2:	bd08      	pop	{r3, pc}
   d8af4:	00030248 	.word	0x00030248

000d8af8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d8af8:	b508      	push	{r3, lr}
   d8afa:	4b02      	ldr	r3, [pc, #8]	; (d8b04 <os_mutex_recursive_create+0xc>)
   d8afc:	681b      	ldr	r3, [r3, #0]
   d8afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8b00:	9301      	str	r3, [sp, #4]
   d8b02:	bd08      	pop	{r3, pc}
   d8b04:	00030248 	.word	0x00030248

000d8b08 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d8b08:	b508      	push	{r3, lr}
   d8b0a:	4b02      	ldr	r3, [pc, #8]	; (d8b14 <os_mutex_recursive_destroy+0xc>)
   d8b0c:	681b      	ldr	r3, [r3, #0]
   d8b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8b10:	9301      	str	r3, [sp, #4]
   d8b12:	bd08      	pop	{r3, pc}
   d8b14:	00030248 	.word	0x00030248

000d8b18 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d8b18:	b508      	push	{r3, lr}
   d8b1a:	4b02      	ldr	r3, [pc, #8]	; (d8b24 <os_timer_set_id+0xc>)
   d8b1c:	681b      	ldr	r3, [r3, #0]
   d8b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d8b20:	9301      	str	r3, [sp, #4]
   d8b22:	bd08      	pop	{r3, pc}
   d8b24:	00030248 	.word	0x00030248

000d8b28 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d8b28:	b508      	push	{r3, lr}
   d8b2a:	4b02      	ldr	r3, [pc, #8]	; (d8b34 <inet_inet_ntop+0xc>)
   d8b2c:	681b      	ldr	r3, [r3, #0]
   d8b2e:	695b      	ldr	r3, [r3, #20]
   d8b30:	9301      	str	r3, [sp, #4]
   d8b32:	bd08      	pop	{r3, pc}
   d8b34:	00030264 	.word	0x00030264

000d8b38 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d8b38:	b508      	push	{r3, lr}
   d8b3a:	4b02      	ldr	r3, [pc, #8]	; (d8b44 <inet_htonl+0xc>)
   d8b3c:	681b      	ldr	r3, [r3, #0]
   d8b3e:	6a1b      	ldr	r3, [r3, #32]
   d8b40:	9301      	str	r3, [sp, #4]
   d8b42:	bd08      	pop	{r3, pc}
   d8b44:	00030264 	.word	0x00030264

000d8b48 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d8b48:	b508      	push	{r3, lr}
   d8b4a:	4b02      	ldr	r3, [pc, #8]	; (d8b54 <inet_htons+0xc>)
   d8b4c:	681b      	ldr	r3, [r3, #0]
   d8b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8b50:	9301      	str	r3, [sp, #4]
   d8b52:	bd08      	pop	{r3, pc}
   d8b54:	00030264 	.word	0x00030264

000d8b58 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d8b58:	b508      	push	{r3, lr}
   d8b5a:	4b02      	ldr	r3, [pc, #8]	; (d8b64 <HAL_USART_Init+0xc>)
   d8b5c:	681b      	ldr	r3, [r3, #0]
   d8b5e:	681b      	ldr	r3, [r3, #0]
   d8b60:	9301      	str	r3, [sp, #4]
   d8b62:	bd08      	pop	{r3, pc}
   d8b64:	0003023c 	.word	0x0003023c

000d8b68 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d8b68:	b508      	push	{r3, lr}
   d8b6a:	4b02      	ldr	r3, [pc, #8]	; (d8b74 <HAL_USART_Write_Data+0xc>)
   d8b6c:	681b      	ldr	r3, [r3, #0]
   d8b6e:	68db      	ldr	r3, [r3, #12]
   d8b70:	9301      	str	r3, [sp, #4]
   d8b72:	bd08      	pop	{r3, pc}
   d8b74:	0003023c 	.word	0x0003023c

000d8b78 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d8b78:	b508      	push	{r3, lr}
   d8b7a:	4b02      	ldr	r3, [pc, #8]	; (d8b84 <HAL_USART_Available_Data+0xc>)
   d8b7c:	681b      	ldr	r3, [r3, #0]
   d8b7e:	691b      	ldr	r3, [r3, #16]
   d8b80:	9301      	str	r3, [sp, #4]
   d8b82:	bd08      	pop	{r3, pc}
   d8b84:	0003023c 	.word	0x0003023c

000d8b88 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d8b88:	b508      	push	{r3, lr}
   d8b8a:	4b02      	ldr	r3, [pc, #8]	; (d8b94 <HAL_USART_Read_Data+0xc>)
   d8b8c:	681b      	ldr	r3, [r3, #0]
   d8b8e:	695b      	ldr	r3, [r3, #20]
   d8b90:	9301      	str	r3, [sp, #4]
   d8b92:	bd08      	pop	{r3, pc}
   d8b94:	0003023c 	.word	0x0003023c

000d8b98 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d8b98:	b508      	push	{r3, lr}
   d8b9a:	4b02      	ldr	r3, [pc, #8]	; (d8ba4 <HAL_USART_Peek_Data+0xc>)
   d8b9c:	681b      	ldr	r3, [r3, #0]
   d8b9e:	699b      	ldr	r3, [r3, #24]
   d8ba0:	9301      	str	r3, [sp, #4]
   d8ba2:	bd08      	pop	{r3, pc}
   d8ba4:	0003023c 	.word	0x0003023c

000d8ba8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d8ba8:	b508      	push	{r3, lr}
   d8baa:	4b02      	ldr	r3, [pc, #8]	; (d8bb4 <HAL_USART_Flush_Data+0xc>)
   d8bac:	681b      	ldr	r3, [r3, #0]
   d8bae:	69db      	ldr	r3, [r3, #28]
   d8bb0:	9301      	str	r3, [sp, #4]
   d8bb2:	bd08      	pop	{r3, pc}
   d8bb4:	0003023c 	.word	0x0003023c

000d8bb8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d8bb8:	b508      	push	{r3, lr}
   d8bba:	4b02      	ldr	r3, [pc, #8]	; (d8bc4 <HAL_USART_Is_Enabled+0xc>)
   d8bbc:	681b      	ldr	r3, [r3, #0]
   d8bbe:	6a1b      	ldr	r3, [r3, #32]
   d8bc0:	9301      	str	r3, [sp, #4]
   d8bc2:	bd08      	pop	{r3, pc}
   d8bc4:	0003023c 	.word	0x0003023c

000d8bc8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d8bc8:	b508      	push	{r3, lr}
   d8bca:	4b02      	ldr	r3, [pc, #8]	; (d8bd4 <HAL_USART_Available_Data_For_Write+0xc>)
   d8bcc:	681b      	ldr	r3, [r3, #0]
   d8bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8bd0:	9301      	str	r3, [sp, #4]
   d8bd2:	bd08      	pop	{r3, pc}
   d8bd4:	0003023c 	.word	0x0003023c

000d8bd8 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d8bd8:	b508      	push	{r3, lr}
   d8bda:	4b02      	ldr	r3, [pc, #8]	; (d8be4 <HAL_I2C_Begin_Transmission+0xc>)
   d8bdc:	681b      	ldr	r3, [r3, #0]
   d8bde:	699b      	ldr	r3, [r3, #24]
   d8be0:	9301      	str	r3, [sp, #4]
   d8be2:	bd08      	pop	{r3, pc}
   d8be4:	00030228 	.word	0x00030228

000d8be8 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d8be8:	b508      	push	{r3, lr}
   d8bea:	4b02      	ldr	r3, [pc, #8]	; (d8bf4 <HAL_I2C_End_Transmission+0xc>)
   d8bec:	681b      	ldr	r3, [r3, #0]
   d8bee:	69db      	ldr	r3, [r3, #28]
   d8bf0:	9301      	str	r3, [sp, #4]
   d8bf2:	bd08      	pop	{r3, pc}
   d8bf4:	00030228 	.word	0x00030228

000d8bf8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d8bf8:	b508      	push	{r3, lr}
   d8bfa:	4b02      	ldr	r3, [pc, #8]	; (d8c04 <HAL_I2C_Write_Data+0xc>)
   d8bfc:	681b      	ldr	r3, [r3, #0]
   d8bfe:	6a1b      	ldr	r3, [r3, #32]
   d8c00:	9301      	str	r3, [sp, #4]
   d8c02:	bd08      	pop	{r3, pc}
   d8c04:	00030228 	.word	0x00030228

000d8c08 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d8c08:	b508      	push	{r3, lr}
   d8c0a:	4b02      	ldr	r3, [pc, #8]	; (d8c14 <HAL_I2C_Available_Data+0xc>)
   d8c0c:	681b      	ldr	r3, [r3, #0]
   d8c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8c10:	9301      	str	r3, [sp, #4]
   d8c12:	bd08      	pop	{r3, pc}
   d8c14:	00030228 	.word	0x00030228

000d8c18 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d8c18:	b508      	push	{r3, lr}
   d8c1a:	4b02      	ldr	r3, [pc, #8]	; (d8c24 <HAL_I2C_Read_Data+0xc>)
   d8c1c:	681b      	ldr	r3, [r3, #0]
   d8c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8c20:	9301      	str	r3, [sp, #4]
   d8c22:	bd08      	pop	{r3, pc}
   d8c24:	00030228 	.word	0x00030228

000d8c28 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d8c28:	b508      	push	{r3, lr}
   d8c2a:	4b02      	ldr	r3, [pc, #8]	; (d8c34 <HAL_I2C_Peek_Data+0xc>)
   d8c2c:	681b      	ldr	r3, [r3, #0]
   d8c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8c30:	9301      	str	r3, [sp, #4]
   d8c32:	bd08      	pop	{r3, pc}
   d8c34:	00030228 	.word	0x00030228

000d8c38 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d8c38:	b508      	push	{r3, lr}
   d8c3a:	4b02      	ldr	r3, [pc, #8]	; (d8c44 <HAL_I2C_Flush_Data+0xc>)
   d8c3c:	681b      	ldr	r3, [r3, #0]
   d8c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8c40:	9301      	str	r3, [sp, #4]
   d8c42:	bd08      	pop	{r3, pc}
   d8c44:	00030228 	.word	0x00030228

000d8c48 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d8c48:	b508      	push	{r3, lr}
   d8c4a:	4b02      	ldr	r3, [pc, #8]	; (d8c54 <HAL_I2C_Is_Enabled+0xc>)
   d8c4c:	681b      	ldr	r3, [r3, #0]
   d8c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8c50:	9301      	str	r3, [sp, #4]
   d8c52:	bd08      	pop	{r3, pc}
   d8c54:	00030228 	.word	0x00030228

000d8c58 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d8c58:	b508      	push	{r3, lr}
   d8c5a:	4b02      	ldr	r3, [pc, #8]	; (d8c64 <HAL_I2C_Init+0xc>)
   d8c5c:	681b      	ldr	r3, [r3, #0]
   d8c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8c60:	9301      	str	r3, [sp, #4]
   d8c62:	bd08      	pop	{r3, pc}
   d8c64:	00030228 	.word	0x00030228

000d8c68 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d8c68:	b508      	push	{r3, lr}
   d8c6a:	4b02      	ldr	r3, [pc, #8]	; (d8c74 <HAL_I2C_Acquire+0xc>)
   d8c6c:	681b      	ldr	r3, [r3, #0]
   d8c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8c70:	9301      	str	r3, [sp, #4]
   d8c72:	bd08      	pop	{r3, pc}
   d8c74:	00030228 	.word	0x00030228

000d8c78 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d8c78:	b508      	push	{r3, lr}
   d8c7a:	4b02      	ldr	r3, [pc, #8]	; (d8c84 <HAL_I2C_Release+0xc>)
   d8c7c:	681b      	ldr	r3, [r3, #0]
   d8c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8c80:	9301      	str	r3, [sp, #4]
   d8c82:	bd08      	pop	{r3, pc}
   d8c84:	00030228 	.word	0x00030228

000d8c88 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d8c88:	b508      	push	{r3, lr}
   d8c8a:	4b02      	ldr	r3, [pc, #8]	; (d8c94 <HAL_I2C_Request_Data_Ex+0xc>)
   d8c8c:	681b      	ldr	r3, [r3, #0]
   d8c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8c90:	9301      	str	r3, [sp, #4]
   d8c92:	bd08      	pop	{r3, pc}
   d8c94:	00030228 	.word	0x00030228

000d8c98 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d8c98:	b508      	push	{r3, lr}
   d8c9a:	4b02      	ldr	r3, [pc, #8]	; (d8ca4 <sock_setsockopt+0xc>)
   d8c9c:	681b      	ldr	r3, [r3, #0]
   d8c9e:	699b      	ldr	r3, [r3, #24]
   d8ca0:	9301      	str	r3, [sp, #4]
   d8ca2:	bd08      	pop	{r3, pc}
   d8ca4:	00030238 	.word	0x00030238

000d8ca8 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d8ca8:	b508      	push	{r3, lr}
   d8caa:	4b02      	ldr	r3, [pc, #8]	; (d8cb4 <sock_close+0xc>)
   d8cac:	681b      	ldr	r3, [r3, #0]
   d8cae:	69db      	ldr	r3, [r3, #28]
   d8cb0:	9301      	str	r3, [sp, #4]
   d8cb2:	bd08      	pop	{r3, pc}
   d8cb4:	00030238 	.word	0x00030238

000d8cb8 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d8cb8:	b508      	push	{r3, lr}
   d8cba:	4b02      	ldr	r3, [pc, #8]	; (d8cc4 <sock_connect+0xc>)
   d8cbc:	681b      	ldr	r3, [r3, #0]
   d8cbe:	6a1b      	ldr	r3, [r3, #32]
   d8cc0:	9301      	str	r3, [sp, #4]
   d8cc2:	bd08      	pop	{r3, pc}
   d8cc4:	00030238 	.word	0x00030238

000d8cc8 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d8cc8:	b508      	push	{r3, lr}
   d8cca:	4b02      	ldr	r3, [pc, #8]	; (d8cd4 <sock_recv+0xc>)
   d8ccc:	681b      	ldr	r3, [r3, #0]
   d8cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8cd0:	9301      	str	r3, [sp, #4]
   d8cd2:	bd08      	pop	{r3, pc}
   d8cd4:	00030238 	.word	0x00030238

000d8cd8 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d8cd8:	b508      	push	{r3, lr}
   d8cda:	4b02      	ldr	r3, [pc, #8]	; (d8ce4 <sock_send+0xc>)
   d8cdc:	681b      	ldr	r3, [r3, #0]
   d8cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8ce0:	9301      	str	r3, [sp, #4]
   d8ce2:	bd08      	pop	{r3, pc}
   d8ce4:	00030238 	.word	0x00030238

000d8ce8 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d8ce8:	b508      	push	{r3, lr}
   d8cea:	4b02      	ldr	r3, [pc, #8]	; (d8cf4 <sock_socket+0xc>)
   d8cec:	681b      	ldr	r3, [r3, #0]
   d8cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d8cf0:	9301      	str	r3, [sp, #4]
   d8cf2:	bd08      	pop	{r3, pc}
   d8cf4:	00030238 	.word	0x00030238

000d8cf8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d8cf8:	b508      	push	{r3, lr}
   d8cfa:	4b02      	ldr	r3, [pc, #8]	; (d8d04 <HAL_USB_USART_Init+0xc>)
   d8cfc:	681b      	ldr	r3, [r3, #0]
   d8cfe:	681b      	ldr	r3, [r3, #0]
   d8d00:	9301      	str	r3, [sp, #4]
   d8d02:	bd08      	pop	{r3, pc}
   d8d04:	0003024c 	.word	0x0003024c

000d8d08 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d8d08:	b508      	push	{r3, lr}
   d8d0a:	4b02      	ldr	r3, [pc, #8]	; (d8d14 <HAL_USB_USART_Begin+0xc>)
   d8d0c:	681b      	ldr	r3, [r3, #0]
   d8d0e:	685b      	ldr	r3, [r3, #4]
   d8d10:	9301      	str	r3, [sp, #4]
   d8d12:	bd08      	pop	{r3, pc}
   d8d14:	0003024c 	.word	0x0003024c

000d8d18 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d8d18:	b508      	push	{r3, lr}
   d8d1a:	4b02      	ldr	r3, [pc, #8]	; (d8d24 <HAL_USB_USART_Available_Data+0xc>)
   d8d1c:	681b      	ldr	r3, [r3, #0]
   d8d1e:	691b      	ldr	r3, [r3, #16]
   d8d20:	9301      	str	r3, [sp, #4]
   d8d22:	bd08      	pop	{r3, pc}
   d8d24:	0003024c 	.word	0x0003024c

000d8d28 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d8d28:	b508      	push	{r3, lr}
   d8d2a:	4b02      	ldr	r3, [pc, #8]	; (d8d34 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d8d2c:	681b      	ldr	r3, [r3, #0]
   d8d2e:	695b      	ldr	r3, [r3, #20]
   d8d30:	9301      	str	r3, [sp, #4]
   d8d32:	bd08      	pop	{r3, pc}
   d8d34:	0003024c 	.word	0x0003024c

000d8d38 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8d38:	b508      	push	{r3, lr}
   d8d3a:	4b02      	ldr	r3, [pc, #8]	; (d8d44 <HAL_USB_USART_Receive_Data+0xc>)
   d8d3c:	681b      	ldr	r3, [r3, #0]
   d8d3e:	699b      	ldr	r3, [r3, #24]
   d8d40:	9301      	str	r3, [sp, #4]
   d8d42:	bd08      	pop	{r3, pc}
   d8d44:	0003024c 	.word	0x0003024c

000d8d48 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8d48:	b508      	push	{r3, lr}
   d8d4a:	4b02      	ldr	r3, [pc, #8]	; (d8d54 <HAL_USB_USART_Send_Data+0xc>)
   d8d4c:	681b      	ldr	r3, [r3, #0]
   d8d4e:	69db      	ldr	r3, [r3, #28]
   d8d50:	9301      	str	r3, [sp, #4]
   d8d52:	bd08      	pop	{r3, pc}
   d8d54:	0003024c 	.word	0x0003024c

000d8d58 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d8d58:	b508      	push	{r3, lr}
   d8d5a:	4b02      	ldr	r3, [pc, #8]	; (d8d64 <HAL_USB_USART_Flush_Data+0xc>)
   d8d5c:	681b      	ldr	r3, [r3, #0]
   d8d5e:	6a1b      	ldr	r3, [r3, #32]
   d8d60:	9301      	str	r3, [sp, #4]
   d8d62:	bd08      	pop	{r3, pc}
   d8d64:	0003024c 	.word	0x0003024c

000d8d68 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d8d68:	b508      	push	{r3, lr}
   d8d6a:	4b02      	ldr	r3, [pc, #8]	; (d8d74 <log_message+0xc>)
   d8d6c:	681b      	ldr	r3, [r3, #0]
   d8d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8d70:	9301      	str	r3, [sp, #4]
   d8d72:	bd08      	pop	{r3, pc}
   d8d74:	00030260 	.word	0x00030260

000d8d78 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d8d78:	b508      	push	{r3, lr}
   d8d7a:	4b02      	ldr	r3, [pc, #8]	; (d8d84 <system_mode+0xc>)
   d8d7c:	681b      	ldr	r3, [r3, #0]
   d8d7e:	681b      	ldr	r3, [r3, #0]
   d8d80:	9301      	str	r3, [sp, #4]
   d8d82:	bd08      	pop	{r3, pc}
   d8d84:	00030220 	.word	0x00030220

000d8d88 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d8d88:	b508      	push	{r3, lr}
   d8d8a:	4b02      	ldr	r3, [pc, #8]	; (d8d94 <set_system_mode+0xc>)
   d8d8c:	681b      	ldr	r3, [r3, #0]
   d8d8e:	685b      	ldr	r3, [r3, #4]
   d8d90:	9301      	str	r3, [sp, #4]
   d8d92:	bd08      	pop	{r3, pc}
   d8d94:	00030220 	.word	0x00030220

000d8d98 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d8d98:	b508      	push	{r3, lr}
   d8d9a:	4b02      	ldr	r3, [pc, #8]	; (d8da4 <system_delay_ms+0xc>)
   d8d9c:	681b      	ldr	r3, [r3, #0]
   d8d9e:	695b      	ldr	r3, [r3, #20]
   d8da0:	9301      	str	r3, [sp, #4]
   d8da2:	bd08      	pop	{r3, pc}
   d8da4:	00030220 	.word	0x00030220

000d8da8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d8da8:	b508      	push	{r3, lr}
   d8daa:	4b02      	ldr	r3, [pc, #8]	; (d8db4 <system_thread_set_state+0xc>)
   d8dac:	681b      	ldr	r3, [r3, #0]
   d8dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8db0:	9301      	str	r3, [sp, #4]
   d8db2:	bd08      	pop	{r3, pc}
   d8db4:	00030220 	.word	0x00030220

000d8db8 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d8db8:	b508      	push	{r3, lr}
   d8dba:	4b02      	ldr	r3, [pc, #8]	; (d8dc4 <system_thread_get_state+0xc>)
   d8dbc:	681b      	ldr	r3, [r3, #0]
   d8dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d8dc0:	9301      	str	r3, [sp, #4]
   d8dc2:	bd08      	pop	{r3, pc}
   d8dc4:	00030220 	.word	0x00030220

000d8dc8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d8dc8:	b508      	push	{r3, lr}
   d8dca:	4b03      	ldr	r3, [pc, #12]	; (d8dd8 <system_ctrl_set_app_request_handler+0x10>)
   d8dcc:	681b      	ldr	r3, [r3, #0]
   d8dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d8dd2:	9301      	str	r3, [sp, #4]
   d8dd4:	bd08      	pop	{r3, pc}
   d8dd6:	0000      	.short	0x0000
   d8dd8:	00030220 	.word	0x00030220

000d8ddc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d8ddc:	b508      	push	{r3, lr}
   d8dde:	4b03      	ldr	r3, [pc, #12]	; (d8dec <system_ctrl_set_result+0x10>)
   d8de0:	681b      	ldr	r3, [r3, #0]
   d8de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d8de6:	9301      	str	r3, [sp, #4]
   d8de8:	bd08      	pop	{r3, pc}
   d8dea:	0000      	.short	0x0000
   d8dec:	00030220 	.word	0x00030220

000d8df0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d8df0:	b508      	push	{r3, lr}
   d8df2:	4b02      	ldr	r3, [pc, #8]	; (d8dfc <network_connect+0xc>)
   d8df4:	681b      	ldr	r3, [r3, #0]
   d8df6:	685b      	ldr	r3, [r3, #4]
   d8df8:	9301      	str	r3, [sp, #4]
   d8dfa:	bd08      	pop	{r3, pc}
   d8dfc:	00030240 	.word	0x00030240

000d8e00 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d8e00:	b508      	push	{r3, lr}
   d8e02:	4b02      	ldr	r3, [pc, #8]	; (d8e0c <network_connecting+0xc>)
   d8e04:	681b      	ldr	r3, [r3, #0]
   d8e06:	689b      	ldr	r3, [r3, #8]
   d8e08:	9301      	str	r3, [sp, #4]
   d8e0a:	bd08      	pop	{r3, pc}
   d8e0c:	00030240 	.word	0x00030240

000d8e10 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d8e10:	b508      	push	{r3, lr}
   d8e12:	4b02      	ldr	r3, [pc, #8]	; (d8e1c <network_disconnect+0xc>)
   d8e14:	681b      	ldr	r3, [r3, #0]
   d8e16:	68db      	ldr	r3, [r3, #12]
   d8e18:	9301      	str	r3, [sp, #4]
   d8e1a:	bd08      	pop	{r3, pc}
   d8e1c:	00030240 	.word	0x00030240

000d8e20 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d8e20:	b508      	push	{r3, lr}
   d8e22:	4b02      	ldr	r3, [pc, #8]	; (d8e2c <network_ready+0xc>)
   d8e24:	681b      	ldr	r3, [r3, #0]
   d8e26:	691b      	ldr	r3, [r3, #16]
   d8e28:	9301      	str	r3, [sp, #4]
   d8e2a:	bd08      	pop	{r3, pc}
   d8e2c:	00030240 	.word	0x00030240

000d8e30 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d8e30:	b508      	push	{r3, lr}
   d8e32:	4b02      	ldr	r3, [pc, #8]	; (d8e3c <network_on+0xc>)
   d8e34:	681b      	ldr	r3, [r3, #0]
   d8e36:	695b      	ldr	r3, [r3, #20]
   d8e38:	9301      	str	r3, [sp, #4]
   d8e3a:	bd08      	pop	{r3, pc}
   d8e3c:	00030240 	.word	0x00030240

000d8e40 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d8e40:	b508      	push	{r3, lr}
   d8e42:	4b02      	ldr	r3, [pc, #8]	; (d8e4c <network_off+0xc>)
   d8e44:	681b      	ldr	r3, [r3, #0]
   d8e46:	699b      	ldr	r3, [r3, #24]
   d8e48:	9301      	str	r3, [sp, #4]
   d8e4a:	bd08      	pop	{r3, pc}
   d8e4c:	00030240 	.word	0x00030240

000d8e50 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d8e50:	b508      	push	{r3, lr}
   d8e52:	4b02      	ldr	r3, [pc, #8]	; (d8e5c <network_listen+0xc>)
   d8e54:	681b      	ldr	r3, [r3, #0]
   d8e56:	69db      	ldr	r3, [r3, #28]
   d8e58:	9301      	str	r3, [sp, #4]
   d8e5a:	bd08      	pop	{r3, pc}
   d8e5c:	00030240 	.word	0x00030240

000d8e60 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d8e60:	b508      	push	{r3, lr}
   d8e62:	4b02      	ldr	r3, [pc, #8]	; (d8e6c <network_listening+0xc>)
   d8e64:	681b      	ldr	r3, [r3, #0]
   d8e66:	6a1b      	ldr	r3, [r3, #32]
   d8e68:	9301      	str	r3, [sp, #4]
   d8e6a:	bd08      	pop	{r3, pc}
   d8e6c:	00030240 	.word	0x00030240

000d8e70 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d8e70:	b508      	push	{r3, lr}
   d8e72:	4b02      	ldr	r3, [pc, #8]	; (d8e7c <network_set_listen_timeout+0xc>)
   d8e74:	681b      	ldr	r3, [r3, #0]
   d8e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8e78:	9301      	str	r3, [sp, #4]
   d8e7a:	bd08      	pop	{r3, pc}
   d8e7c:	00030240 	.word	0x00030240

000d8e80 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d8e80:	b508      	push	{r3, lr}
   d8e82:	4b02      	ldr	r3, [pc, #8]	; (d8e8c <network_get_listen_timeout+0xc>)
   d8e84:	681b      	ldr	r3, [r3, #0]
   d8e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8e88:	9301      	str	r3, [sp, #4]
   d8e8a:	bd08      	pop	{r3, pc}
   d8e8c:	00030240 	.word	0x00030240

000d8e90 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d8e90:	b508      	push	{r3, lr}
   d8e92:	4b02      	ldr	r3, [pc, #8]	; (d8e9c <spark_process+0xc>)
   d8e94:	681b      	ldr	r3, [r3, #0]
   d8e96:	689b      	ldr	r3, [r3, #8]
   d8e98:	9301      	str	r3, [sp, #4]
   d8e9a:	bd08      	pop	{r3, pc}
   d8e9c:	00030244 	.word	0x00030244

000d8ea0 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d8ea0:	b508      	push	{r3, lr}
   d8ea2:	4b02      	ldr	r3, [pc, #8]	; (d8eac <spark_cloud_flag_connected+0xc>)
   d8ea4:	681b      	ldr	r3, [r3, #0]
   d8ea6:	695b      	ldr	r3, [r3, #20]
   d8ea8:	9301      	str	r3, [sp, #4]
   d8eaa:	bd08      	pop	{r3, pc}
   d8eac:	00030244 	.word	0x00030244

000d8eb0 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d8eb0:	b508      	push	{r3, lr}
   d8eb2:	4b02      	ldr	r3, [pc, #8]	; (d8ebc <spark_deviceID+0xc>)
   d8eb4:	681b      	ldr	r3, [r3, #0]
   d8eb6:	69db      	ldr	r3, [r3, #28]
   d8eb8:	9301      	str	r3, [sp, #4]
   d8eba:	bd08      	pop	{r3, pc}
   d8ebc:	00030244 	.word	0x00030244

000d8ec0 <spark_sync_time>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d8ec0:	b508      	push	{r3, lr}
   d8ec2:	4b02      	ldr	r3, [pc, #8]	; (d8ecc <spark_sync_time+0xc>)
   d8ec4:	681b      	ldr	r3, [r3, #0]
   d8ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8ec8:	9301      	str	r3, [sp, #4]
   d8eca:	bd08      	pop	{r3, pc}
   d8ecc:	00030244 	.word	0x00030244

000d8ed0 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d8ed0:	b508      	push	{r3, lr}
   d8ed2:	4b02      	ldr	r3, [pc, #8]	; (d8edc <spark_sync_time_pending+0xc>)
   d8ed4:	681b      	ldr	r3, [r3, #0]
   d8ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8ed8:	9301      	str	r3, [sp, #4]
   d8eda:	bd08      	pop	{r3, pc}
   d8edc:	00030244 	.word	0x00030244

000d8ee0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d8ee0:	b508      	push	{r3, lr}
   d8ee2:	4b02      	ldr	r3, [pc, #8]	; (d8eec <spark_set_random_seed_from_cloud_handler+0xc>)
   d8ee4:	681b      	ldr	r3, [r3, #0]
   d8ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8ee8:	9301      	str	r3, [sp, #4]
   d8eea:	bd08      	pop	{r3, pc}
   d8eec:	00030244 	.word	0x00030244

000d8ef0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d8ef0:	b508      	push	{r3, lr}
   d8ef2:	4b02      	ldr	r3, [pc, #8]	; (d8efc <malloc+0xc>)
   d8ef4:	681b      	ldr	r3, [r3, #0]
   d8ef6:	681b      	ldr	r3, [r3, #0]
   d8ef8:	9301      	str	r3, [sp, #4]
   d8efa:	bd08      	pop	{r3, pc}
   d8efc:	0003021c 	.word	0x0003021c

000d8f00 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d8f00:	b508      	push	{r3, lr}
   d8f02:	4b02      	ldr	r3, [pc, #8]	; (d8f0c <free+0xc>)
   d8f04:	681b      	ldr	r3, [r3, #0]
   d8f06:	685b      	ldr	r3, [r3, #4]
   d8f08:	9301      	str	r3, [sp, #4]
   d8f0a:	bd08      	pop	{r3, pc}
   d8f0c:	0003021c 	.word	0x0003021c

000d8f10 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d8f10:	b508      	push	{r3, lr}
   d8f12:	4b02      	ldr	r3, [pc, #8]	; (d8f1c <realloc+0xc>)
   d8f14:	681b      	ldr	r3, [r3, #0]
   d8f16:	689b      	ldr	r3, [r3, #8]
   d8f18:	9301      	str	r3, [sp, #4]
   d8f1a:	bd08      	pop	{r3, pc}
   d8f1c:	0003021c 	.word	0x0003021c

000d8f20 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d8f20:	b508      	push	{r3, lr}
   d8f22:	4b02      	ldr	r3, [pc, #8]	; (d8f2c <sprintf+0xc>)
   d8f24:	681b      	ldr	r3, [r3, #0]
   d8f26:	68db      	ldr	r3, [r3, #12]
   d8f28:	9301      	str	r3, [sp, #4]
   d8f2a:	bd08      	pop	{r3, pc}
   d8f2c:	0003021c 	.word	0x0003021c

000d8f30 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d8f30:	b508      	push	{r3, lr}
   d8f32:	4b02      	ldr	r3, [pc, #8]	; (d8f3c <siprintf+0xc>)
   d8f34:	681b      	ldr	r3, [r3, #0]
   d8f36:	691b      	ldr	r3, [r3, #16]
   d8f38:	9301      	str	r3, [sp, #4]
   d8f3a:	bd08      	pop	{r3, pc}
   d8f3c:	0003021c 	.word	0x0003021c

000d8f40 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d8f40:	b508      	push	{r3, lr}
   d8f42:	4b02      	ldr	r3, [pc, #8]	; (d8f4c <siscanf+0xc>)
   d8f44:	681b      	ldr	r3, [r3, #0]
   d8f46:	699b      	ldr	r3, [r3, #24]
   d8f48:	9301      	str	r3, [sp, #4]
   d8f4a:	bd08      	pop	{r3, pc}
   d8f4c:	0003021c 	.word	0x0003021c

000d8f50 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d8f50:	b508      	push	{r3, lr}
   d8f52:	4b02      	ldr	r3, [pc, #8]	; (d8f5c <snprintf+0xc>)
   d8f54:	681b      	ldr	r3, [r3, #0]
   d8f56:	69db      	ldr	r3, [r3, #28]
   d8f58:	9301      	str	r3, [sp, #4]
   d8f5a:	bd08      	pop	{r3, pc}
   d8f5c:	0003021c 	.word	0x0003021c

000d8f60 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   d8f60:	b508      	push	{r3, lr}
   d8f62:	4b02      	ldr	r3, [pc, #8]	; (d8f6c <sniprintf+0xc>)
   d8f64:	681b      	ldr	r3, [r3, #0]
   d8f66:	6a1b      	ldr	r3, [r3, #32]
   d8f68:	9301      	str	r3, [sp, #4]
   d8f6a:	bd08      	pop	{r3, pc}
   d8f6c:	0003021c 	.word	0x0003021c

000d8f70 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d8f70:	b508      	push	{r3, lr}
   d8f72:	4b02      	ldr	r3, [pc, #8]	; (d8f7c <vsnprintf+0xc>)
   d8f74:	681b      	ldr	r3, [r3, #0]
   d8f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8f78:	9301      	str	r3, [sp, #4]
   d8f7a:	bd08      	pop	{r3, pc}
   d8f7c:	0003021c 	.word	0x0003021c

000d8f80 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d8f80:	b508      	push	{r3, lr}
   d8f82:	4b02      	ldr	r3, [pc, #8]	; (d8f8c <_malloc_r+0xc>)
   d8f84:	681b      	ldr	r3, [r3, #0]
   d8f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8f88:	9301      	str	r3, [sp, #4]
   d8f8a:	bd08      	pop	{r3, pc}
   d8f8c:	0003021c 	.word	0x0003021c

000d8f90 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d8f90:	b508      	push	{r3, lr}
   d8f92:	4b02      	ldr	r3, [pc, #8]	; (d8f9c <__errno+0xc>)
   d8f94:	681b      	ldr	r3, [r3, #0]
   d8f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8f98:	9301      	str	r3, [sp, #4]
   d8f9a:	bd08      	pop	{r3, pc}
   d8f9c:	0003021c 	.word	0x0003021c

000d8fa0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8fa0:	2200      	movs	r2, #0
   d8fa2:	4611      	mov	r1, r2
   d8fa4:	6840      	ldr	r0, [r0, #4]
   d8fa6:	f7ff bf5b 	b.w	d8e60 <network_listening>

000d8faa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8faa:	2200      	movs	r2, #0
   d8fac:	4611      	mov	r1, r2
   d8fae:	6840      	ldr	r0, [r0, #4]
   d8fb0:	f7ff bf66 	b.w	d8e80 <network_get_listen_timeout>

000d8fb4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8fb4:	2200      	movs	r2, #0
   d8fb6:	6840      	ldr	r0, [r0, #4]
   d8fb8:	f7ff bf5a 	b.w	d8e70 <network_set_listen_timeout>

000d8fbc <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8fbc:	2200      	movs	r2, #0
   d8fbe:	f081 0101 	eor.w	r1, r1, #1
   d8fc2:	6840      	ldr	r0, [r0, #4]
   d8fc4:	f7ff bf44 	b.w	d8e50 <network_listen>

000d8fc8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d8fc8:	2300      	movs	r3, #0
   d8fca:	461a      	mov	r2, r3
   d8fcc:	4619      	mov	r1, r3
   d8fce:	6840      	ldr	r0, [r0, #4]
   d8fd0:	f7ff bf36 	b.w	d8e40 <network_off>

000d8fd4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d8fd4:	2300      	movs	r3, #0
   d8fd6:	461a      	mov	r2, r3
   d8fd8:	4619      	mov	r1, r3
   d8fda:	6840      	ldr	r0, [r0, #4]
   d8fdc:	f7ff bf28 	b.w	d8e30 <network_on>

000d8fe0 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8fe0:	2200      	movs	r2, #0
   d8fe2:	4611      	mov	r1, r2
   d8fe4:	6840      	ldr	r0, [r0, #4]
   d8fe6:	f7ff bf1b 	b.w	d8e20 <network_ready>

000d8fea <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8fea:	2200      	movs	r2, #0
   d8fec:	4611      	mov	r1, r2
   d8fee:	6840      	ldr	r0, [r0, #4]
   d8ff0:	f7ff bf06 	b.w	d8e00 <network_connecting>

000d8ff4 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8ff4:	2200      	movs	r2, #0
   d8ff6:	2102      	movs	r1, #2
   d8ff8:	6840      	ldr	r0, [r0, #4]
   d8ffa:	f7ff bf09 	b.w	d8e10 <network_disconnect>

000d8ffe <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8ffe:	2300      	movs	r3, #0
   d9000:	461a      	mov	r2, r3
   d9002:	6840      	ldr	r0, [r0, #4]
   d9004:	f7ff bef4 	b.w	d8df0 <network_connect>

000d9008 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d9008:	4b02      	ldr	r3, [pc, #8]	; (d9014 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d900a:	2203      	movs	r2, #3
   d900c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d900e:	4a02      	ldr	r2, [pc, #8]	; (d9018 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d9010:	601a      	str	r2, [r3, #0]
   d9012:	4770      	bx	lr
   d9014:	2003dec4 	.word	0x2003dec4
   d9018:	000dd3a0 	.word	0x000dd3a0

000d901c <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d901c:	2100      	movs	r1, #0
   d901e:	f7ff bccb 	b.w	d89b8 <HAL_SPI_Acquire>

000d9022 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d9022:	2100      	movs	r1, #0
   d9024:	f7ff bcd0 	b.w	d89c8 <HAL_SPI_Release>

000d9028 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d9028:	b510      	push	{r4, lr}
   d902a:	4604      	mov	r4, r0
{
    _spi = spi;
   d902c:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d902e:	4608      	mov	r0, r1
   d9030:	f7ff fc92 	bl	d8958 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d9034:	2300      	movs	r3, #0
   d9036:	6063      	str	r3, [r4, #4]
}
   d9038:	4620      	mov	r0, r4
   d903a:	bd10      	pop	{r4, pc}

000d903c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d903c:	b510      	push	{r4, lr}
   d903e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d9040:	7800      	ldrb	r0, [r0, #0]
   d9042:	f7ff ffeb 	bl	d901c <_ZN8SPIClass4lockEv.isra.0>
   d9046:	b948      	cbnz	r0, d905c <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d9048:	7820      	ldrb	r0, [r4, #0]
   d904a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d904e:	f7ff fc5b 	bl	d8908 <HAL_SPI_Begin>
        unlock();
   d9052:	7820      	ldrb	r0, [r4, #0]
    }
}
   d9054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d9058:	f7ff bfe3 	b.w	d9022 <_ZN8SPIClass6unlockEv.isra.1>
   d905c:	bd10      	pop	{r4, pc}

000d905e <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d905e:	b538      	push	{r3, r4, r5, lr}
   d9060:	4604      	mov	r4, r0
    if (!lock())
   d9062:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d9064:	460d      	mov	r5, r1
    if (!lock())
   d9066:	f7ff ffd9 	bl	d901c <_ZN8SPIClass4lockEv.isra.0>
   d906a:	b940      	cbnz	r0, d907e <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d906c:	7820      	ldrb	r0, [r4, #0]
   d906e:	4629      	mov	r1, r5
   d9070:	f7ff fc52 	bl	d8918 <HAL_SPI_Set_Bit_Order>
        unlock();
   d9074:	7820      	ldrb	r0, [r4, #0]
    }
}
   d9076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d907a:	f7ff bfd2 	b.w	d9022 <_ZN8SPIClass6unlockEv.isra.1>
   d907e:	bd38      	pop	{r3, r4, r5, pc}

000d9080 <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d9080:	b538      	push	{r3, r4, r5, lr}
   d9082:	4604      	mov	r4, r0
    if (!lock())
   d9084:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d9086:	460d      	mov	r5, r1
    if (!lock())
   d9088:	f7ff ffc8 	bl	d901c <_ZN8SPIClass4lockEv.isra.0>
   d908c:	b940      	cbnz	r0, d90a0 <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d908e:	7820      	ldrb	r0, [r4, #0]
   d9090:	4629      	mov	r1, r5
   d9092:	f7ff fc49 	bl	d8928 <HAL_SPI_Set_Data_Mode>
        unlock();
   d9096:	7820      	ldrb	r0, [r4, #0]
    }
}
   d9098:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d909c:	f7ff bfc1 	b.w	d9022 <_ZN8SPIClass6unlockEv.isra.1>
   d90a0:	bd38      	pop	{r3, r4, r5, pc}

000d90a2 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d90a2:	7800      	ldrb	r0, [r0, #0]
   d90a4:	f7ff bfbd 	b.w	d9022 <_ZN8SPIClass6unlockEv.isra.1>

000d90a8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d90a8:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d90aa:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d90ac:	6018      	str	r0, [r3, #0]
   d90ae:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d90b0:	6818      	ldr	r0, [r3, #0]
   d90b2:	4288      	cmp	r0, r1
   d90b4:	b2e5      	uxtb	r5, r4
   d90b6:	d906      	bls.n	d90c6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d90b8:	3401      	adds	r4, #1
   d90ba:	2c08      	cmp	r4, #8
   d90bc:	d002      	beq.n	d90c4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d90be:	0840      	lsrs	r0, r0, #1
   d90c0:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d90c2:	e7f5      	b.n	d90b0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d90c4:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d90c6:	4b02      	ldr	r3, [pc, #8]	; (d90d0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d90c8:	5d5b      	ldrb	r3, [r3, r5]
   d90ca:	7013      	strb	r3, [r2, #0]
   d90cc:	bd30      	pop	{r4, r5, pc}
   d90ce:	bf00      	nop
   d90d0:	000dd3cc 	.word	0x000dd3cc

000d90d4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d90d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d90d8:	4607      	mov	r7, r0
   d90da:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d90dc:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d90de:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d90e0:	f7ff ff9c 	bl	d901c <_ZN8SPIClass4lockEv.isra.0>
   d90e4:	2800      	cmp	r0, #0
   d90e6:	db62      	blt.n	d91ae <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d90e8:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d90ea:	2214      	movs	r2, #20
   d90ec:	2100      	movs	r1, #0
   d90ee:	a809      	add	r0, sp, #36	; 0x24
   d90f0:	f002 fdd0 	bl	dbc94 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d90f4:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d90f6:	4620      	mov	r0, r4
   d90f8:	2200      	movs	r2, #0
   d90fa:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d90fc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d9100:	f7ff fc3a 	bl	d8978 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d9104:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d9108:	b154      	cbz	r4, d9120 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d910a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d910e:	b935      	cbnz	r5, d911e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d9110:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d9114:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d9118:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d911c:	e003      	b.n	d9126 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d911e:	2400      	movs	r4, #0
   d9120:	46a1      	mov	r9, r4
   d9122:	46a0      	mov	r8, r4
   d9124:	2501      	movs	r5, #1
   d9126:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d9128:	b105      	cbz	r5, d912c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d912a:	b9bb      	cbnz	r3, d915c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d912c:	429d      	cmp	r5, r3
   d912e:	d10b      	bne.n	d9148 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d9130:	68b2      	ldr	r2, [r6, #8]
   d9132:	4542      	cmp	r2, r8
   d9134:	d108      	bne.n	d9148 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d9136:	f88d 9020 	strb.w	r9, [sp, #32]
   d913a:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d913e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d9142:	89b2      	ldrh	r2, [r6, #12]
   d9144:	4291      	cmp	r1, r2
   d9146:	d009      	beq.n	d915c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d9148:	b153      	cbz	r3, d9160 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d914a:	2400      	movs	r4, #0
   d914c:	7838      	ldrb	r0, [r7, #0]
   d914e:	9401      	str	r4, [sp, #4]
   d9150:	9400      	str	r4, [sp, #0]
   d9152:	4623      	mov	r3, r4
   d9154:	4622      	mov	r2, r4
   d9156:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d9158:	f7ff fc26 	bl	d89a8 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d915c:	2000      	movs	r0, #0
   d915e:	e026      	b.n	d91ae <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d9160:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d9164:	68b1      	ldr	r1, [r6, #8]
   d9166:	980a      	ldr	r0, [sp, #40]	; 0x28
   d9168:	ab04      	add	r3, sp, #16
   d916a:	f10d 020f 	add.w	r2, sp, #15
   d916e:	f7ff ff9b 	bl	d90a8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d9172:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d9174:	b105      	cbz	r5, d9178 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d9176:	b9b1      	cbnz	r1, d91a6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d9178:	42a9      	cmp	r1, r5
   d917a:	d008      	beq.n	d918e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d917c:	2400      	movs	r4, #0
   d917e:	7838      	ldrb	r0, [r7, #0]
   d9180:	9401      	str	r4, [sp, #4]
   d9182:	7b74      	ldrb	r4, [r6, #13]
   d9184:	7b33      	ldrb	r3, [r6, #12]
   d9186:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d918a:	9400      	str	r4, [sp, #0]
   d918c:	e7e4      	b.n	d9158 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d918e:	68b3      	ldr	r3, [r6, #8]
   d9190:	4543      	cmp	r3, r8
   d9192:	d3f3      	bcc.n	d917c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d9194:	f88d 9020 	strb.w	r9, [sp, #32]
   d9198:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d919c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d91a0:	89b3      	ldrh	r3, [r6, #12]
   d91a2:	429a      	cmp	r2, r3
   d91a4:	d1ea      	bne.n	d917c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d91a6:	9b04      	ldr	r3, [sp, #16]
   d91a8:	4543      	cmp	r3, r8
   d91aa:	d1e7      	bne.n	d917c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d91ac:	e7d6      	b.n	d915c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d91ae:	b00f      	add	sp, #60	; 0x3c
   d91b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d91b4 <_ZN8SPIClass13setClockSpeedEjj>:
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d91b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d91b8:	b088      	sub	sp, #32
    unsigned clock = 0;
   d91ba:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d91bc:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d91be:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d91c0:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d91c2:	460e      	mov	r6, r1
   d91c4:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d91c6:	f7ff ff29 	bl	d901c <_ZN8SPIClass4lockEv.isra.0>
   d91ca:	4605      	mov	r5, r0
   d91cc:	bb00      	cbnz	r0, d9210 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d91ce:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d91d2:	4601      	mov	r1, r0
   d91d4:	2214      	movs	r2, #20
   d91d6:	a803      	add	r0, sp, #12
   d91d8:	f002 fd5c 	bl	dbc94 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d91dc:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d91de:	462a      	mov	r2, r5
   d91e0:	a903      	add	r1, sp, #12
   d91e2:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d91e4:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d91e8:	f7ff fbc6 	bl	d8978 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d91ec:	ab02      	add	r3, sp, #8
   d91ee:	f10d 0207 	add.w	r2, sp, #7
   d91f2:	fb07 f106 	mul.w	r1, r7, r6
   d91f6:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d91f8:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d91fc:	f7ff ff54 	bl	d90a8 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d9200:	7820      	ldrb	r0, [r4, #0]
   d9202:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d9206:	f7ff fb97 	bl	d8938 <HAL_SPI_Set_Clock_Divider>
        unlock();
   d920a:	7820      	ldrb	r0, [r4, #0]
   d920c:	f7ff ff09 	bl	d9022 <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d9210:	9802      	ldr	r0, [sp, #8]
   d9212:	b008      	add	sp, #32
   d9214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d9218 <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d9218:	b538      	push	{r3, r4, r5, lr}
   d921a:	4604      	mov	r4, r0
    if (!lock())
   d921c:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d921e:	460d      	mov	r5, r1
    if (!lock())
   d9220:	f7ff fefc 	bl	d901c <_ZN8SPIClass4lockEv.isra.0>
   d9224:	b9c8      	cbnz	r0, d925a <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d9226:	6861      	ldr	r1, [r4, #4]
   d9228:	b171      	cbz	r1, d9248 <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d922a:	4b0c      	ldr	r3, [pc, #48]	; (d925c <_ZN8SPIClass15setClockDividerEh+0x44>)
   d922c:	5cc2      	ldrb	r2, [r0, r3]
   d922e:	42aa      	cmp	r2, r5
   d9230:	d002      	beq.n	d9238 <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d9232:	3001      	adds	r0, #1
   d9234:	2808      	cmp	r0, #8
   d9236:	d1f9      	bne.n	d922c <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d9238:	3001      	adds	r0, #1
   d923a:	b2c0      	uxtb	r0, r0
   d923c:	40c1      	lsrs	r1, r0
   d923e:	2201      	movs	r2, #1
   d9240:	4620      	mov	r0, r4
   d9242:	f7ff ffb7 	bl	d91b4 <_ZN8SPIClass13setClockSpeedEjj>
   d9246:	e003      	b.n	d9250 <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d9248:	4629      	mov	r1, r5
   d924a:	7820      	ldrb	r0, [r4, #0]
   d924c:	f7ff fb74 	bl	d8938 <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d9250:	7820      	ldrb	r0, [r4, #0]
    }
}
   d9252:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d9256:	f7ff bee4 	b.w	d9022 <_ZN8SPIClass6unlockEv.isra.1>
   d925a:	bd38      	pop	{r3, r4, r5, pc}
   d925c:	000dd3cc 	.word	0x000dd3cc

000d9260 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d9260:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d9262:	7800      	ldrb	r0, [r0, #0]
   d9264:	f7ff fb70 	bl	d8948 <HAL_SPI_Send_Receive_Data>
}
   d9268:	b2c0      	uxtb	r0, r0
   d926a:	bd08      	pop	{r3, pc}

000d926c <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d926c:	b530      	push	{r4, r5, lr}
   d926e:	b087      	sub	sp, #28
   d9270:	4604      	mov	r4, r0
   d9272:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d9274:	7800      	ldrb	r0, [r0, #0]
   d9276:	9500      	str	r5, [sp, #0]
   d9278:	f7ff fb86 	bl	d8988 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d927c:	b93d      	cbnz	r5, d928e <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d927e:	a902      	add	r1, sp, #8
   d9280:	7820      	ldrb	r0, [r4, #0]
   d9282:	f7ff fb89 	bl	d8998 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d9286:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d928a:	07db      	lsls	r3, r3, #31
   d928c:	d4f7      	bmi.n	d927e <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d928e:	b007      	add	sp, #28
   d9290:	bd30      	pop	{r4, r5, pc}

000d9292 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d9292:	7800      	ldrb	r0, [r0, #0]
   d9294:	f7ff bb68 	b.w	d8968 <HAL_SPI_Is_Enabled>

000d9298 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d9298:	b510      	push	{r4, lr}
   d929a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d929c:	6800      	ldr	r0, [r0, #0]
   d929e:	b118      	cbz	r0, d92a8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d92a0:	f7ff fe2e 	bl	d8f00 <free>
            wakeupSource_ = nullptr;
   d92a4:	2300      	movs	r3, #0
   d92a6:	6023      	str	r3, [r4, #0]
   d92a8:	bd10      	pop	{r4, pc}

000d92aa <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d92aa:	b510      	push	{r4, lr}
   d92ac:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d92ae:	f7ff fff3 	bl	d9298 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d92b2:	4620      	mov	r0, r4
   d92b4:	bd10      	pop	{r4, pc}
	...

000d92b8 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d92b8:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d92ba:	4c09      	ldr	r4, [pc, #36]	; (d92e0 <_GLOBAL__sub_I_System+0x28>)
   d92bc:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d92be:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d92c2:	6020      	str	r0, [r4, #0]
   d92c4:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d92c6:	71a0      	strb	r0, [r4, #6]
   d92c8:	8120      	strh	r0, [r4, #8]
   d92ca:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d92cc:	f7ff fd5c 	bl	d8d88 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d92d0:	4620      	mov	r0, r4
   d92d2:	4a04      	ldr	r2, [pc, #16]	; (d92e4 <_GLOBAL__sub_I_System+0x2c>)
   d92d4:	4904      	ldr	r1, [pc, #16]	; (d92e8 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d92d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d92da:	f001 bd15 	b.w	dad08 <__aeabi_atexit>
   d92de:	bf00      	nop
   d92e0:	2003decc 	.word	0x2003decc
   d92e4:	2003d7f8 	.word	0x2003d7f8
   d92e8:	000d92ab 	.word	0x000d92ab

000d92ec <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d92ec:	b510      	push	{r4, lr}
   d92ee:	4604      	mov	r4, r0
{
	free(buffer);
   d92f0:	6800      	ldr	r0, [r0, #0]
   d92f2:	f7ff fe05 	bl	d8f00 <free>
}
   d92f6:	4620      	mov	r0, r4
   d92f8:	bd10      	pop	{r4, pc}

000d92fa <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d92fa:	b510      	push	{r4, lr}
   d92fc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d92fe:	6800      	ldr	r0, [r0, #0]
   d9300:	b108      	cbz	r0, d9306 <_ZN6String10invalidateEv+0xc>
   d9302:	f7ff fdfd 	bl	d8f00 <free>
	buffer = NULL;
   d9306:	2300      	movs	r3, #0
   d9308:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d930a:	60a3      	str	r3, [r4, #8]
   d930c:	6063      	str	r3, [r4, #4]
   d930e:	bd10      	pop	{r4, pc}

000d9310 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d9310:	b538      	push	{r3, r4, r5, lr}
   d9312:	4604      	mov	r4, r0
   d9314:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d9316:	6800      	ldr	r0, [r0, #0]
   d9318:	3101      	adds	r1, #1
   d931a:	f7ff fdf9 	bl	d8f10 <realloc>
	if (newbuffer) {
   d931e:	b110      	cbz	r0, d9326 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d9320:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d9324:	2001      	movs	r0, #1
	}
	return 0;
}
   d9326:	bd38      	pop	{r3, r4, r5, pc}

000d9328 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d9328:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d932a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d932c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d932e:	b113      	cbz	r3, d9336 <_ZN6String7reserveEj+0xe>
   d9330:	6843      	ldr	r3, [r0, #4]
   d9332:	428b      	cmp	r3, r1
   d9334:	d207      	bcs.n	d9346 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d9336:	4620      	mov	r0, r4
   d9338:	f7ff ffea 	bl	d9310 <_ZN6String12changeBufferEj>
   d933c:	b120      	cbz	r0, d9348 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d933e:	68a3      	ldr	r3, [r4, #8]
   d9340:	b90b      	cbnz	r3, d9346 <_ZN6String7reserveEj+0x1e>
   d9342:	6822      	ldr	r2, [r4, #0]
   d9344:	7013      	strb	r3, [r2, #0]
   d9346:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d9348:	bd10      	pop	{r4, pc}

000d934a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d934a:	b570      	push	{r4, r5, r6, lr}
   d934c:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d934e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d9350:	4604      	mov	r4, r0
   d9352:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d9354:	f7ff ffe8 	bl	d9328 <_ZN6String7reserveEj>
   d9358:	b918      	cbnz	r0, d9362 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d935a:	4620      	mov	r0, r4
   d935c:	f7ff ffcd 	bl	d92fa <_ZN6String10invalidateEv>
		return *this;
   d9360:	e009      	b.n	d9376 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d9362:	462a      	mov	r2, r5
   d9364:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d9366:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d9368:	6820      	ldr	r0, [r4, #0]
   d936a:	f002 fc88 	bl	dbc7e <memcpy>
	buffer[len] = 0;
   d936e:	6822      	ldr	r2, [r4, #0]
   d9370:	68a3      	ldr	r3, [r4, #8]
   d9372:	2100      	movs	r1, #0
   d9374:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d9376:	4620      	mov	r0, r4
   d9378:	bd70      	pop	{r4, r5, r6, pc}

000d937a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d937a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d937c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d937e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9380:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d9382:	6043      	str	r3, [r0, #4]
	len = 0;
   d9384:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9386:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d9388:	460d      	mov	r5, r1
   d938a:	b139      	cbz	r1, d939c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d938c:	4608      	mov	r0, r1
   d938e:	f003 f9e5 	bl	dc75c <strlen>
   d9392:	4629      	mov	r1, r5
   d9394:	4602      	mov	r2, r0
   d9396:	4620      	mov	r0, r4
   d9398:	f7ff ffd7 	bl	d934a <_ZN6String4copyEPKcj>
}
   d939c:	4620      	mov	r0, r4
   d939e:	bd38      	pop	{r3, r4, r5, pc}

000d93a0 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d93a0:	b538      	push	{r3, r4, r5, lr}
   d93a2:	4605      	mov	r5, r0
	if (buffer) {
   d93a4:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d93a6:	460c      	mov	r4, r1
	if (buffer) {
   d93a8:	b160      	cbz	r0, d93c4 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d93aa:	686a      	ldr	r2, [r5, #4]
   d93ac:	688b      	ldr	r3, [r1, #8]
   d93ae:	429a      	cmp	r2, r3
   d93b0:	d306      	bcc.n	d93c0 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d93b2:	6809      	ldr	r1, [r1, #0]
   d93b4:	f002 fcb6 	bl	dbd24 <strcpy>
			len = rhs.len;
   d93b8:	68a3      	ldr	r3, [r4, #8]
   d93ba:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d93bc:	2300      	movs	r3, #0
   d93be:	e00a      	b.n	d93d6 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d93c0:	f7ff fd9e 	bl	d8f00 <free>
		}
	}
	buffer = rhs.buffer;
   d93c4:	6823      	ldr	r3, [r4, #0]
   d93c6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d93c8:	6863      	ldr	r3, [r4, #4]
   d93ca:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d93cc:	68a3      	ldr	r3, [r4, #8]
   d93ce:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d93d0:	2300      	movs	r3, #0
   d93d2:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d93d4:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d93d6:	60a3      	str	r3, [r4, #8]
   d93d8:	bd38      	pop	{r3, r4, r5, pc}

000d93da <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d93da:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d93dc:	b510      	push	{r4, lr}
   d93de:	460b      	mov	r3, r1
   d93e0:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d93e2:	d007      	beq.n	d93f4 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d93e4:	6809      	ldr	r1, [r1, #0]
   d93e6:	b119      	cbz	r1, d93f0 <_ZN6StringaSERKS_+0x16>
   d93e8:	689a      	ldr	r2, [r3, #8]
   d93ea:	f7ff ffae 	bl	d934a <_ZN6String4copyEPKcj>
   d93ee:	e001      	b.n	d93f4 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d93f0:	f7ff ff83 	bl	d92fa <_ZN6String10invalidateEv>

	return *this;
}
   d93f4:	4620      	mov	r0, r4
   d93f6:	bd10      	pop	{r4, pc}

000d93f8 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d93f8:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d93fa:	b510      	push	{r4, lr}
   d93fc:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d93fe:	d001      	beq.n	d9404 <_ZN6StringaSEOS_+0xc>
   d9400:	f7ff ffce 	bl	d93a0 <_ZN6String4moveERS_>
	return *this;
}
   d9404:	4620      	mov	r0, r4
   d9406:	bd10      	pop	{r4, pc}

000d9408 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d9408:	b538      	push	{r3, r4, r5, lr}
   d940a:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d940c:	460c      	mov	r4, r1
   d940e:	b141      	cbz	r1, d9422 <_ZN6StringaSEPKc+0x1a>
   d9410:	4608      	mov	r0, r1
   d9412:	f003 f9a3 	bl	dc75c <strlen>
   d9416:	4621      	mov	r1, r4
   d9418:	4602      	mov	r2, r0
   d941a:	4628      	mov	r0, r5
   d941c:	f7ff ff95 	bl	d934a <_ZN6String4copyEPKcj>
   d9420:	e001      	b.n	d9426 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d9422:	f7ff ff6a 	bl	d92fa <_ZN6String10invalidateEv>

	return *this;
}
   d9426:	4628      	mov	r0, r5
   d9428:	bd38      	pop	{r3, r4, r5, pc}

000d942a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d942a:	b570      	push	{r4, r5, r6, lr}
   d942c:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d942e:	460e      	mov	r6, r1
   d9430:	b909      	cbnz	r1, d9436 <_ZN6String6concatEPKcj+0xc>
   d9432:	2000      	movs	r0, #0
   d9434:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d9436:	b16a      	cbz	r2, d9454 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d9438:	6883      	ldr	r3, [r0, #8]
   d943a:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d943c:	4629      	mov	r1, r5
   d943e:	f7ff ff73 	bl	d9328 <_ZN6String7reserveEj>
   d9442:	2800      	cmp	r0, #0
   d9444:	d0f5      	beq.n	d9432 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d9446:	6820      	ldr	r0, [r4, #0]
   d9448:	68a3      	ldr	r3, [r4, #8]
   d944a:	4631      	mov	r1, r6
   d944c:	4418      	add	r0, r3
   d944e:	f002 fc69 	bl	dbd24 <strcpy>
	len = newlen;
   d9452:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d9454:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d9456:	bd70      	pop	{r4, r5, r6, pc}

000d9458 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d9458:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d945a:	688a      	ldr	r2, [r1, #8]
   d945c:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d945e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d9460:	f7ff ffe3 	bl	d942a <_ZN6String6concatEPKcj>
   d9464:	b910      	cbnz	r0, d946c <_ZplRK15StringSumHelperRK6String+0x14>
   d9466:	4620      	mov	r0, r4
   d9468:	f7ff ff47 	bl	d92fa <_ZN6String10invalidateEv>
	return a;
}
   d946c:	4620      	mov	r0, r4
   d946e:	bd10      	pop	{r4, pc}

000d9470 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d9470:	b510      	push	{r4, lr}
   d9472:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d9474:	6800      	ldr	r0, [r0, #0]
   d9476:	b108      	cbz	r0, d947c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d9478:	f7ff fb46 	bl	d8b08 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d947c:	4620      	mov	r0, r4
   d947e:	bd10      	pop	{r4, pc}

000d9480 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d9480:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d9482:	4c06      	ldr	r4, [pc, #24]	; (d949c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d9484:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d9486:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d9488:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d948a:	f7ff fb35 	bl	d8af8 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d948e:	4620      	mov	r0, r4
   d9490:	4a03      	ldr	r2, [pc, #12]	; (d94a0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d9492:	4904      	ldr	r1, [pc, #16]	; (d94a4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d9494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d9498:	f001 bc36 	b.w	dad08 <__aeabi_atexit>
   d949c:	2003ded8 	.word	0x2003ded8
   d94a0:	2003d7f8 	.word	0x2003d7f8
   d94a4:	000d9471 	.word	0x000d9471

000d94a8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d94a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d94aa:	4606      	mov	r6, r0
   d94ac:	460d      	mov	r5, r1
   d94ae:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d94b0:	2400      	movs	r4, #0
  while (size--) {
   d94b2:	42bd      	cmp	r5, r7
   d94b4:	d00c      	beq.n	d94d0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d94b6:	6833      	ldr	r3, [r6, #0]
   d94b8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d94bc:	689b      	ldr	r3, [r3, #8]
   d94be:	4630      	mov	r0, r6
   d94c0:	4798      	blx	r3
     if (chunk>=0)
   d94c2:	2800      	cmp	r0, #0
   d94c4:	db01      	blt.n	d94ca <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d94c6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d94c8:	e7f3      	b.n	d94b2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d94ca:	2c00      	cmp	r4, #0
   d94cc:	bf08      	it	eq
   d94ce:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d94d0:	4620      	mov	r0, r4
   d94d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d94d4 <_ZN5Print5printEPKc>:
   d94d4:	b508      	push	{r3, lr}
   d94d6:	f7fe f9db 	bl	d7890 <_ZN5Print5writeEPKc>
   d94da:	bd08      	pop	{r3, pc}

000d94dc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d94dc:	6803      	ldr	r3, [r0, #0]
   d94de:	689b      	ldr	r3, [r3, #8]
   d94e0:	4718      	bx	r3

000d94e2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d94e2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d94e4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d94e6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d94e8:	f7ff fff8 	bl	d94dc <_ZN5Print5printEc>
  n += print('\n');
   d94ec:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d94ee:	4604      	mov	r4, r0
  n += print('\n');
   d94f0:	4628      	mov	r0, r5
   d94f2:	f7ff fff3 	bl	d94dc <_ZN5Print5printEc>
  return n;
}
   d94f6:	4420      	add	r0, r4
   d94f8:	bd38      	pop	{r3, r4, r5, pc}

000d94fa <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d94fa:	b538      	push	{r3, r4, r5, lr}
   d94fc:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d94fe:	f7fe f9c7 	bl	d7890 <_ZN5Print5writeEPKc>
   d9502:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d9504:	4628      	mov	r0, r5
   d9506:	f7ff ffec 	bl	d94e2 <_ZN5Print7printlnEv>
  return n;
}
   d950a:	4420      	add	r0, r4
   d950c:	bd38      	pop	{r3, r4, r5, pc}

000d950e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d950e:	b530      	push	{r4, r5, lr}
   d9510:	b08b      	sub	sp, #44	; 0x2c
   d9512:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d9514:	2100      	movs	r1, #0
   d9516:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d951a:	2a01      	cmp	r2, #1
   d951c:	bf98      	it	ls
   d951e:	220a      	movls	r2, #10
   d9520:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d9524:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d9528:	fb05 3312 	mls	r3, r5, r2, r3
   d952c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d9530:	2b09      	cmp	r3, #9
   d9532:	bf94      	ite	ls
   d9534:	3330      	addls	r3, #48	; 0x30
   d9536:	3337      	addhi	r3, #55	; 0x37
   d9538:	b2db      	uxtb	r3, r3
   d953a:	4621      	mov	r1, r4
   d953c:	f804 3901 	strb.w	r3, [r4], #-1
   d9540:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d9542:	2d00      	cmp	r5, #0
   d9544:	d1ee      	bne.n	d9524 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d9546:	f7fe f9a3 	bl	d7890 <_ZN5Print5writeEPKc>
}
   d954a:	b00b      	add	sp, #44	; 0x2c
   d954c:	bd30      	pop	{r4, r5, pc}
	...

000d9550 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d9550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9554:	ec57 6b10 	vmov	r6, r7, d0
   d9558:	4682      	mov	sl, r0
   d955a:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d955c:	ee10 2a10 	vmov	r2, s0
   d9560:	463b      	mov	r3, r7
   d9562:	ee10 0a10 	vmov	r0, s0
   d9566:	4639      	mov	r1, r7
   d9568:	f002 f98a 	bl	db880 <__aeabi_dcmpun>
   d956c:	b108      	cbz	r0, d9572 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d956e:	494e      	ldr	r1, [pc, #312]	; (d96a8 <_ZN5Print10printFloatEdh+0x158>)
   d9570:	e012      	b.n	d9598 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d9572:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d9576:	f04f 32ff 	mov.w	r2, #4294967295
   d957a:	4b4c      	ldr	r3, [pc, #304]	; (d96ac <_ZN5Print10printFloatEdh+0x15c>)
   d957c:	4630      	mov	r0, r6
   d957e:	4649      	mov	r1, r9
   d9580:	f002 f97e 	bl	db880 <__aeabi_dcmpun>
   d9584:	b968      	cbnz	r0, d95a2 <_ZN5Print10printFloatEdh+0x52>
   d9586:	f04f 32ff 	mov.w	r2, #4294967295
   d958a:	4b48      	ldr	r3, [pc, #288]	; (d96ac <_ZN5Print10printFloatEdh+0x15c>)
   d958c:	4630      	mov	r0, r6
   d958e:	4649      	mov	r1, r9
   d9590:	f002 f958 	bl	db844 <__aeabi_dcmple>
   d9594:	b928      	cbnz	r0, d95a2 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d9596:	4946      	ldr	r1, [pc, #280]	; (d96b0 <_ZN5Print10printFloatEdh+0x160>)
   d9598:	4650      	mov	r0, sl
   d959a:	f7fe f979 	bl	d7890 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d959e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d95a2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d95a6:	4b43      	ldr	r3, [pc, #268]	; (d96b4 <_ZN5Print10printFloatEdh+0x164>)
   d95a8:	4630      	mov	r0, r6
   d95aa:	4639      	mov	r1, r7
   d95ac:	f002 f95e 	bl	db86c <__aeabi_dcmpgt>
   d95b0:	b108      	cbz	r0, d95b6 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d95b2:	4941      	ldr	r1, [pc, #260]	; (d96b8 <_ZN5Print10printFloatEdh+0x168>)
   d95b4:	e7f0      	b.n	d9598 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d95b6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d95ba:	4b40      	ldr	r3, [pc, #256]	; (d96bc <_ZN5Print10printFloatEdh+0x16c>)
   d95bc:	4630      	mov	r0, r6
   d95be:	4639      	mov	r1, r7
   d95c0:	f002 f936 	bl	db830 <__aeabi_dcmplt>
   d95c4:	2800      	cmp	r0, #0
   d95c6:	d1f4      	bne.n	d95b2 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d95c8:	2200      	movs	r2, #0
   d95ca:	2300      	movs	r3, #0
   d95cc:	4630      	mov	r0, r6
   d95ce:	4639      	mov	r1, r7
   d95d0:	f002 f92e 	bl	db830 <__aeabi_dcmplt>
   d95d4:	b140      	cbz	r0, d95e8 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d95d6:	212d      	movs	r1, #45	; 0x2d
   d95d8:	4650      	mov	r0, sl
   d95da:	f7ff ff7f 	bl	d94dc <_ZN5Print5printEc>
     number = -number;
   d95de:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d95e2:	4604      	mov	r4, r0
     number = -number;
   d95e4:	461f      	mov	r7, r3
   d95e6:	e000      	b.n	d95ea <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d95e8:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d95ea:	4935      	ldr	r1, [pc, #212]	; (d96c0 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d95ec:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d95f0:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d95f2:	fa5f f388 	uxtb.w	r3, r8
   d95f6:	429d      	cmp	r5, r3
   d95f8:	d906      	bls.n	d9608 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d95fa:	2200      	movs	r2, #0
   d95fc:	4b31      	ldr	r3, [pc, #196]	; (d96c4 <_ZN5Print10printFloatEdh+0x174>)
   d95fe:	f001 ffcf 	bl	db5a0 <__aeabi_ddiv>
   d9602:	f108 0801 	add.w	r8, r8, #1
   d9606:	e7f4      	b.n	d95f2 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d9608:	4632      	mov	r2, r6
   d960a:	463b      	mov	r3, r7
   d960c:	f001 fcec 	bl	dafe8 <__adddf3>
   d9610:	460f      	mov	r7, r1
   d9612:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d9614:	f002 f972 	bl	db8fc <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d9618:	220a      	movs	r2, #10
   d961a:	4601      	mov	r1, r0
   d961c:	4680      	mov	r8, r0
   d961e:	4650      	mov	r0, sl
   d9620:	f7ff ff75 	bl	d950e <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d9624:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d9626:	b3e5      	cbz	r5, d96a2 <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d9628:	4640      	mov	r0, r8
   d962a:	f001 fe19 	bl	db260 <__aeabi_ui2d>
   d962e:	4602      	mov	r2, r0
   d9630:	460b      	mov	r3, r1
   d9632:	4630      	mov	r0, r6
   d9634:	4639      	mov	r1, r7
   d9636:	f001 fcd5 	bl	dafe4 <__aeabi_dsub>
   d963a:	4606      	mov	r6, r0
   d963c:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d963e:	4650      	mov	r0, sl
   d9640:	4921      	ldr	r1, [pc, #132]	; (d96c8 <_ZN5Print10printFloatEdh+0x178>)
   d9642:	f7fe f925 	bl	d7890 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d9646:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d9648:	2200      	movs	r2, #0
   d964a:	4b1e      	ldr	r3, [pc, #120]	; (d96c4 <_ZN5Print10printFloatEdh+0x174>)
   d964c:	4630      	mov	r0, r6
   d964e:	4639      	mov	r1, r7
   d9650:	f001 fe7c 	bl	db34c <__aeabi_dmul>
   d9654:	4606      	mov	r6, r0
   d9656:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d9658:	f002 f928 	bl	db8ac <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d965c:	f1b0 0900 	subs.w	r9, r0, #0
   d9660:	da07      	bge.n	d9672 <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d9662:	212d      	movs	r1, #45	; 0x2d
   d9664:	4650      	mov	r0, sl
   d9666:	f7ff ff39 	bl	d94dc <_ZN5Print5printEc>
            val = -n;
   d966a:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d966e:	4680      	mov	r8, r0
   d9670:	e002      	b.n	d9678 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d9672:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d9674:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d9678:	220a      	movs	r2, #10
   d967a:	4650      	mov	r0, sl
   d967c:	f7ff ff47 	bl	d950e <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d9680:	4440      	add	r0, r8
   d9682:	4404      	add	r4, r0
    remainder -= toPrint;
   d9684:	4648      	mov	r0, r9
   d9686:	f001 fdfb 	bl	db280 <__aeabi_i2d>
   d968a:	4602      	mov	r2, r0
   d968c:	460b      	mov	r3, r1
   d968e:	4630      	mov	r0, r6
   d9690:	4639      	mov	r1, r7
   d9692:	f001 fca7 	bl	dafe4 <__aeabi_dsub>
   d9696:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d9698:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d969c:	4606      	mov	r6, r0
   d969e:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d96a0:	d1d2      	bne.n	d9648 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d96a2:	4620      	mov	r0, r4
   d96a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d96a8:	000dd3d4 	.word	0x000dd3d4
   d96ac:	7fefffff 	.word	0x7fefffff
   d96b0:	000dd3de 	.word	0x000dd3de
   d96b4:	41efffff 	.word	0x41efffff
   d96b8:	000dd3d8 	.word	0x000dd3d8
   d96bc:	c1efffff 	.word	0xc1efffff
   d96c0:	3fe00000 	.word	0x3fe00000
   d96c4:	40240000 	.word	0x40240000
   d96c8:	000dd3dc 	.word	0x000dd3dc

000d96cc <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
   d96cc:	b538      	push	{r3, r4, r5, lr}
   d96ce:	4604      	mov	r4, r0
  return printFloat((double)n, digits);
   d96d0:	ee10 0a10 	vmov	r0, s0
   d96d4:	b2cd      	uxtb	r5, r1
   d96d6:	f001 fde5 	bl	db2a4 <__aeabi_f2d>
   d96da:	ec41 0b10 	vmov	d0, r0, r1
   d96de:	4629      	mov	r1, r5
   d96e0:	4620      	mov	r0, r4
}
   d96e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return write(c);
}

size_t Print::print(float n, int digits)
{
  return printFloat((double)n, digits);
   d96e6:	f7ff bf33 	b.w	d9550 <_ZN5Print10printFloatEdh>

000d96ea <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d96ea:	b40c      	push	{r2, r3}
   d96ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d96f0:	b087      	sub	sp, #28
   d96f2:	af00      	add	r7, sp, #0
   d96f4:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d96f8:	4605      	mov	r5, r0
   d96fa:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d96fe:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d9700:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d9702:	4623      	mov	r3, r4
   d9704:	464a      	mov	r2, r9
   d9706:	2114      	movs	r1, #20
   d9708:	1d38      	adds	r0, r7, #4
   d970a:	f7ff fc31 	bl	d8f70 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d970e:	2813      	cmp	r0, #19
   d9710:	d805      	bhi.n	d971e <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d9712:	1d39      	adds	r1, r7, #4
   d9714:	4628      	mov	r0, r5
   d9716:	f7fe f8bb 	bl	d7890 <_ZN5Print5writeEPKc>
   d971a:	4604      	mov	r4, r0
   d971c:	e013      	b.n	d9746 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d971e:	f100 0308 	add.w	r3, r0, #8
   d9722:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d9726:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d9728:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d972c:	1c41      	adds	r1, r0, #1
   d972e:	4623      	mov	r3, r4
   d9730:	464a      	mov	r2, r9
   d9732:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d9734:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d9736:	f7ff fc1b 	bl	d8f70 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d973a:	4669      	mov	r1, sp
   d973c:	4628      	mov	r0, r5
   d973e:	f7fe f8a7 	bl	d7890 <_ZN5Print5writeEPKc>
   d9742:	4604      	mov	r4, r0
   d9744:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d9746:	b11e      	cbz	r6, d9750 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d9748:	4628      	mov	r0, r5
   d974a:	f7ff feca 	bl	d94e2 <_ZN5Print7printlnEv>
   d974e:	4404      	add	r4, r0
    return n;
}
   d9750:	4620      	mov	r0, r4
   d9752:	371c      	adds	r7, #28
   d9754:	46bd      	mov	sp, r7
   d9756:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d975a:	b002      	add	sp, #8
   d975c:	4770      	bx	lr
	...

000d9760 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d9760:	4b01      	ldr	r3, [pc, #4]	; (d9768 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d9762:	4a02      	ldr	r2, [pc, #8]	; (d976c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d9764:	601a      	str	r2, [r3, #0]
   d9766:	4770      	bx	lr
   d9768:	2003dedc 	.word	0x2003dedc
   d976c:	000dd455 	.word	0x000dd455

000d9770 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d9770:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d9772:	4b14      	ldr	r3, [pc, #80]	; (d97c4 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d9774:	4f14      	ldr	r7, [pc, #80]	; (d97c8 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d9776:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d9778:	4b14      	ldr	r3, [pc, #80]	; (d97cc <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d977a:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d977c:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d977e:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d9780:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d9782:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d9784:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d9786:	d01b      	beq.n	d97c0 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d9788:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d978a:	ad01      	add	r5, sp, #4
   d978c:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d9790:	f002 f96e 	bl	dba70 <localtime>
	calendar_time->tm_year += 1900;
   d9794:	6943      	ldr	r3, [r0, #20]
   d9796:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d979a:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d979c:	4604      	mov	r4, r0
   d979e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d97a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d97a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d97a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d97a6:	f8d4 e000 	ldr.w	lr, [r4]
   d97aa:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d97ae:	ad01      	add	r5, sp, #4
   d97b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d97b2:	4c07      	ldr	r4, [pc, #28]	; (d97d0 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d97b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d97b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d97b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d97ba:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d97bc:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d97c0:	b00b      	add	sp, #44	; 0x2c
   d97c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d97c4:	2003df10 	.word	0x2003df10
   d97c8:	2003df0c 	.word	0x2003df0c
   d97cc:	2003df08 	.word	0x2003df08
   d97d0:	2003dee0 	.word	0x2003dee0

000d97d4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d97d4:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d97d6:	2000      	movs	r0, #0
   d97d8:	f7ff fb7a 	bl	d8ed0 <spark_sync_time_pending>
   d97dc:	b128      	cbz	r0, d97ea <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d97de:	f7ff fb5f 	bl	d8ea0 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d97e2:	f080 0001 	eor.w	r0, r0, #1
   d97e6:	b2c0      	uxtb	r0, r0
   d97e8:	bd08      	pop	{r3, pc}
   d97ea:	2001      	movs	r0, #1
    }
   d97ec:	bd08      	pop	{r3, pc}
	...

000d97f0 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d97f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d97f2:	4b0e      	ldr	r3, [pc, #56]	; (d982c <_ZN9TimeClass7timeStrEl+0x3c>)
   d97f4:	681b      	ldr	r3, [r3, #0]
   d97f6:	4419      	add	r1, r3
   d97f8:	4b0d      	ldr	r3, [pc, #52]	; (d9830 <_ZN9TimeClass7timeStrEl+0x40>)
   d97fa:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d97fc:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d97fe:	a802      	add	r0, sp, #8
   d9800:	4419      	add	r1, r3
   d9802:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d9806:	f002 f933 	bl	dba70 <localtime>
        char* ascstr = asctime(calendar_time);
   d980a:	f002 f8e7 	bl	db9dc <asctime>
   d980e:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d9810:	f002 ffa4 	bl	dc75c <strlen>
        ascstr[len-1] = 0; // remove final newline
   d9814:	4428      	add	r0, r5
   d9816:	2300      	movs	r3, #0
   d9818:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d981c:	4629      	mov	r1, r5
   d981e:	4620      	mov	r0, r4
   d9820:	f7ff fdab 	bl	d937a <_ZN6StringC1EPK19__FlashStringHelper>
}
   d9824:	4620      	mov	r0, r4
   d9826:	b003      	add	sp, #12
   d9828:	bd30      	pop	{r4, r5, pc}
   d982a:	bf00      	nop
   d982c:	2003df10 	.word	0x2003df10
   d9830:	2003df08 	.word	0x2003df08

000d9834 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d9834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9838:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d983a:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d983c:	4607      	mov	r7, r0
   d983e:	4689      	mov	r9, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9840:	4620      	mov	r0, r4
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d9842:	4611      	mov	r1, r2
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9844:	223f      	movs	r2, #63	; 0x3f
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d9846:	461d      	mov	r5, r3
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9848:	f002 ffa5 	bl	dc796 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d984c:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d984e:	4620      	mov	r0, r4
String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d9850:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d9854:	f002 ff82 	bl	dc75c <strlen>
   d9858:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d985a:	b925      	cbnz	r5, d9866 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        strcpy(time_zone_str, "Z");
   d985c:	4924      	ldr	r1, [pc, #144]	; (d98f0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xbc>)
   d985e:	a803      	add	r0, sp, #12
   d9860:	f002 fa60 	bl	dbd24 <strcpy>
   d9864:	e013      	b.n	d988e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5a>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d9866:	213c      	movs	r1, #60	; 0x3c
   d9868:	fb95 f2f1 	sdiv	r2, r5, r1
   d986c:	2a00      	cmp	r2, #0
   d986e:	bfb8      	it	lt
   d9870:	4252      	neglt	r2, r2
   d9872:	fb92 f3f1 	sdiv	r3, r2, r1
   d9876:	fb01 2213 	mls	r2, r1, r3, r2
   d987a:	9200      	str	r2, [sp, #0]
   d987c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d9880:	4a1c      	ldr	r2, [pc, #112]	; (d98f4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xc0>)
   d9882:	fb95 f3f3 	sdiv	r3, r5, r3
   d9886:	2110      	movs	r1, #16
   d9888:	a803      	add	r0, sp, #12
   d988a:	f7ff fb61 	bl	d8f50 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d988e:	4625      	mov	r5, r4
   d9890:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d9892:	f108 3aff 	add.w	sl, r8, #4294967295
   d9896:	45b2      	cmp	sl, r6
   d9898:	d91b      	bls.n	d98d2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9e>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d989a:	782b      	ldrb	r3, [r5, #0]
   d989c:	2b25      	cmp	r3, #37	; 0x25
   d989e:	d116      	bne.n	d98ce <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
   d98a0:	786b      	ldrb	r3, [r5, #1]
   d98a2:	2b7a      	cmp	r3, #122	; 0x7a
   d98a4:	d113      	bne.n	d98ce <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
        {
            size_t tzlen = strlen(time_zone_str);
   d98a6:	a803      	add	r0, sp, #12
   d98a8:	f002 ff58 	bl	dc75c <strlen>
   d98ac:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d98ae:	4430      	add	r0, r6
   d98b0:	ebc6 020a 	rsb	r2, r6, sl
   d98b4:	1ca9      	adds	r1, r5, #2
   d98b6:	4420      	add	r0, r4
   d98b8:	f002 f9e1 	bl	dbc7e <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d98bc:	4642      	mov	r2, r8
   d98be:	a903      	add	r1, sp, #12
   d98c0:	4628      	mov	r0, r5
   d98c2:	f002 f9dc 	bl	dbc7e <memcpy>
            len = strlen(format_str);
   d98c6:	4620      	mov	r0, r4
   d98c8:	f002 ff48 	bl	dc75c <strlen>
   d98cc:	4680      	mov	r8, r0
   d98ce:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d98d0:	e7de      	b.n	d9890 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5c>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
   d98d2:	464b      	mov	r3, r9
   d98d4:	4622      	mov	r2, r4
   d98d6:	2132      	movs	r1, #50	; 0x32
   d98d8:	a807      	add	r0, sp, #28
   d98da:	f002 fa8b 	bl	dbdf4 <strftime>
    return String(buf);
   d98de:	a907      	add	r1, sp, #28
   d98e0:	4638      	mov	r0, r7
   d98e2:	f7ff fd4a 	bl	d937a <_ZN6StringC1EPK19__FlashStringHelper>
}
   d98e6:	4638      	mov	r0, r7
   d98e8:	b024      	add	sp, #144	; 0x90
   d98ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d98ee:	bf00      	nop
   d98f0:	000ddb7d 	.word	0x000ddb7d
   d98f4:	000dd4be 	.word	0x000dd4be

000d98f8 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
   d98f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d98fa:	4605      	mov	r5, r0
   d98fc:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
   d98fe:	461c      	mov	r4, r3
   d9900:	b913      	cbnz	r3, d9908 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
   d9902:	4b12      	ldr	r3, [pc, #72]	; (d994c <_ZN9TimeClass6formatElPKc+0x54>)
   d9904:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
   d9906:	b12c      	cbz	r4, d9914 <_ZN9TimeClass6formatElPKc+0x1c>
   d9908:	4b11      	ldr	r3, [pc, #68]	; (d9950 <_ZN9TimeClass6formatElPKc+0x58>)
   d990a:	4620      	mov	r0, r4
   d990c:	6819      	ldr	r1, [r3, #0]
   d990e:	f002 f9ff 	bl	dbd10 <strcmp>
   d9912:	b920      	cbnz	r0, d991e <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
   d9914:	9901      	ldr	r1, [sp, #4]
   d9916:	4628      	mov	r0, r5
   d9918:	f7ff ff6a 	bl	d97f0 <_ZN9TimeClass7timeStrEl>
   d991c:	e013      	b.n	d9946 <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
   d991e:	4f0d      	ldr	r7, [pc, #52]	; (d9954 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
   d9920:	9a01      	ldr	r2, [sp, #4]
   d9922:	683b      	ldr	r3, [r7, #0]
   d9924:	4e0c      	ldr	r6, [pc, #48]	; (d9958 <_ZN9TimeClass6formatElPKc+0x60>)
   d9926:	441a      	add	r2, r3
   d9928:	6833      	ldr	r3, [r6, #0]
   d992a:	a802      	add	r0, sp, #8
   d992c:	4413      	add	r3, r2
   d992e:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
   d9932:	f002 f89d 	bl	dba70 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d9936:	683a      	ldr	r2, [r7, #0]
   d9938:	6833      	ldr	r3, [r6, #0]
   d993a:	4601      	mov	r1, r0
   d993c:	4413      	add	r3, r2
   d993e:	4628      	mov	r0, r5
   d9940:	4622      	mov	r2, r4
   d9942:	f7ff ff77 	bl	d9834 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
   d9946:	4628      	mov	r0, r5
   d9948:	b003      	add	sp, #12
   d994a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d994c:	2003df04 	.word	0x2003df04
   d9950:	2003d740 	.word	0x2003d740
   d9954:	2003df10 	.word	0x2003df10
   d9958:	2003df08 	.word	0x2003df08

000d995c <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d995c:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d995e:	2000      	movs	r0, #0
   d9960:	f7ff f87a 	bl	d8a58 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d9964:	4604      	mov	r4, r0
   d9966:	b968      	cbnz	r0, d9984 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d9968:	f7ff fa06 	bl	d8d78 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d996c:	2801      	cmp	r0, #1
   d996e:	d10b      	bne.n	d9988 <_ZN9TimeClass7isValidEv+0x2c>
   d9970:	4620      	mov	r0, r4
   d9972:	f7ff fa21 	bl	d8db8 <system_thread_get_state>
   d9976:	b938      	cbnz	r0, d9988 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d9978:	f7ff ff2c 	bl	d97d4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d997c:	b930      	cbnz	r0, d998c <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d997e:	f7ff fa87 	bl	d8e90 <spark_process>
   d9982:	e7f9      	b.n	d9978 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d9984:	2001      	movs	r0, #1
   d9986:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d9988:	2000      	movs	r0, #0
   d998a:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d998c:	f7ff ff22 	bl	d97d4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d9990:	2000      	movs	r0, #0
   d9992:	f7ff f861 	bl	d8a58 <HAL_RTC_Time_Is_Valid>
   d9996:	3000      	adds	r0, #0
   d9998:	bf18      	it	ne
   d999a:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d999c:	bd10      	pop	{r4, pc}

000d999e <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d999e:	b508      	push	{r3, lr}
    (void)isValid();
   d99a0:	f7ff ffdc 	bl	d995c <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d99a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d99a8:	f7ff b836 	b.w	d8a18 <HAL_RTC_Get_UnixTime>

000d99ac <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d99ac:	b508      	push	{r3, lr}
	return hour(now());
   d99ae:	f7ff fff6 	bl	d999e <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d99b2:	f7ff fedd 	bl	d9770 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d99b6:	4b01      	ldr	r3, [pc, #4]	; (d99bc <_ZN9TimeClass4hourEv+0x10>)
   d99b8:	6898      	ldr	r0, [r3, #8]
   d99ba:	bd08      	pop	{r3, pc}
   d99bc:	2003dee0 	.word	0x2003dee0

000d99c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d99c0:	4b02      	ldr	r3, [pc, #8]	; (d99cc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d99c2:	681a      	ldr	r2, [r3, #0]
   d99c4:	4b02      	ldr	r3, [pc, #8]	; (d99d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d99c6:	601a      	str	r2, [r3, #0]
   d99c8:	4770      	bx	lr
   d99ca:	bf00      	nop
   d99cc:	2003d740 	.word	0x2003d740
   d99d0:	2003df04 	.word	0x2003df04

000d99d4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d99d4:	2100      	movs	r1, #0
   d99d6:	f7ff b9df 	b.w	d8d98 <system_delay_ms>

000d99da <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d99da:	b510      	push	{r4, lr}
   d99dc:	4604      	mov	r4, r0
   d99de:	f7fb fdcd 	bl	d557c <_ZNSt14_Function_baseD1Ev>
   d99e2:	4620      	mov	r0, r4
   d99e4:	bd10      	pop	{r4, pc}
	...

000d99e8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d99e8:	4803      	ldr	r0, [pc, #12]	; (d99f8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d99ea:	4a04      	ldr	r2, [pc, #16]	; (d99fc <_GLOBAL__sub_I_RGB+0x14>)
   d99ec:	4904      	ldr	r1, [pc, #16]	; (d9a00 <_GLOBAL__sub_I_RGB+0x18>)
   d99ee:	2300      	movs	r3, #0
   d99f0:	6083      	str	r3, [r0, #8]
   d99f2:	f001 b989 	b.w	dad08 <__aeabi_atexit>
   d99f6:	bf00      	nop
   d99f8:	2003df18 	.word	0x2003df18
   d99fc:	2003d7f8 	.word	0x2003d7f8
   d9a00:	000d99db 	.word	0x000d99db

000d9a04 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d9a04:	7d00      	ldrb	r0, [r0, #20]
   d9a06:	4770      	bx	lr

000d9a08 <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d9a08:	7d03      	ldrb	r3, [r0, #20]
   d9a0a:	b11b      	cbz	r3, d9a14 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d9a0c:	6983      	ldr	r3, [r0, #24]
   d9a0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d9a12:	d102      	bne.n	d9a1a <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d9a14:	ed9f 0a05 	vldr	s0, [pc, #20]	; d9a2c <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d9a18:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d9a1a:	ee07 3a90 	vmov	s15, r3
   d9a1e:	ed9f 7a04 	vldr	s14, [pc, #16]	; d9a30 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d9a22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d9a26:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d9a2a:	4770      	bx	lr
   d9a2c:	00000000 	.word	0x00000000
   d9a30:	42c80000 	.word	0x42c80000

000d9a34 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d9a34:	7d03      	ldrb	r3, [r0, #20]
   d9a36:	b11b      	cbz	r3, d9a40 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d9a38:	6a03      	ldr	r3, [r0, #32]
   d9a3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d9a3e:	d102      	bne.n	d9a46 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d9a40:	ed9f 0a05 	vldr	s0, [pc, #20]	; d9a58 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d9a44:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d9a46:	ee07 3a90 	vmov	s15, r3
   d9a4a:	ed9f 7a04 	vldr	s14, [pc, #16]	; d9a5c <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d9a4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d9a52:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d9a56:	4770      	bx	lr
   d9a58:	00000000 	.word	0x00000000
   d9a5c:	42c80000 	.word	0x42c80000

000d9a60 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d9a60:	7d03      	ldrb	r3, [r0, #20]
   d9a62:	b17b      	cbz	r3, d9a84 <_ZNK14CellularSignal10getQualityEv+0x24>
   d9a64:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d9a66:	2b00      	cmp	r3, #0
   d9a68:	db0c      	blt.n	d9a84 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d9a6a:	ee07 3a90 	vmov	s15, r3
   d9a6e:	eddf 6a07 	vldr	s13, [pc, #28]	; d9a8c <_ZNK14CellularSignal10getQualityEv+0x2c>
   d9a72:	ed9f 0a07 	vldr	s0, [pc, #28]	; d9a90 <_ZNK14CellularSignal10getQualityEv+0x30>
   d9a76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d9a7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d9a7e:	ee27 0a80 	vmul.f32	s0, s15, s0
   d9a82:	4770      	bx	lr
    }

    return -1.0f;
   d9a84:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d9a88:	4770      	bx	lr
   d9a8a:	bf00      	nop
   d9a8c:	477fff00 	.word	0x477fff00
   d9a90:	42c80000 	.word	0x42c80000

000d9a94 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d9a94:	7d03      	ldrb	r3, [r0, #20]
   d9a96:	b17b      	cbz	r3, d9ab8 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d9a98:	69c3      	ldr	r3, [r0, #28]
   d9a9a:	2b00      	cmp	r3, #0
   d9a9c:	db0c      	blt.n	d9ab8 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d9a9e:	ee07 3a90 	vmov	s15, r3
   d9aa2:	eddf 6a07 	vldr	s13, [pc, #28]	; d9ac0 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d9aa6:	ed9f 0a07 	vldr	s0, [pc, #28]	; d9ac4 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d9aaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d9aae:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d9ab2:	ee27 0a80 	vmul.f32	s0, s15, s0
   d9ab6:	4770      	bx	lr
    }

    return -1.0f;
   d9ab8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d9abc:	4770      	bx	lr
   d9abe:	bf00      	nop
   d9ac0:	477fff00 	.word	0x477fff00
   d9ac4:	42c80000 	.word	0x42c80000

000d9ac8 <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d9ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9acc:	4607      	mov	r7, r0
   d9ace:	460c      	mov	r4, r1
{
    if (base == 0) {
   d9ad0:	4615      	mov	r5, r2
   d9ad2:	b92a      	cbnz	r2, d9ae0 <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d9ad4:	6803      	ldr	r3, [r0, #0]
   d9ad6:	b2c9      	uxtb	r1, r1
   d9ad8:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d9ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d9ade:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d9ae0:	2900      	cmp	r1, #0
   d9ae2:	da07      	bge.n	d9af4 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d9ae4:	2a0a      	cmp	r2, #10
   d9ae6:	d105      	bne.n	d9af4 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d9ae8:	212d      	movs	r1, #45	; 0x2d
   d9aea:	f7ff fcf7 	bl	d94dc <_ZN5Print5printEc>
            val = -n;
   d9aee:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d9af0:	4606      	mov	r6, r0
            val = -n;
   d9af2:	e001      	b.n	d9af8 <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d9af4:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d9af6:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d9af8:	b2ea      	uxtb	r2, r5
   d9afa:	4638      	mov	r0, r7
   d9afc:	f7ff fd07 	bl	d950e <_ZN5Print11printNumberEmh>
    }
}
   d9b00:	4430      	add	r0, r6
   d9b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d9b06 <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
   d9b06:	b570      	push	{r4, r5, r6, lr}
   d9b08:	460d      	mov	r5, r1
   d9b0a:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d9b0c:	220a      	movs	r2, #10
   d9b0e:	6881      	ldr	r1, [r0, #8]
   d9b10:	4628      	mov	r0, r5
   d9b12:	f7ff ffd9 	bl	d9ac8 <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
   d9b16:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d9b18:	4604      	mov	r4, r0
    n += p.print(',');
   d9b1a:	4628      	mov	r0, r5
   d9b1c:	f7ff fcde 	bl	d94dc <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d9b20:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d9b22:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d9b24:	68f1      	ldr	r1, [r6, #12]
   d9b26:	4628      	mov	r0, r5
   d9b28:	f7ff ffce 	bl	d9ac8 <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
   d9b2c:	4420      	add	r0, r4
   d9b2e:	bd70      	pop	{r4, r5, r6, pc}

000d9b30 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d9b30:	f1a0 0004 	sub.w	r0, r0, #4
   d9b34:	f7ff bfe7 	b.w	d9b06 <_ZNK14CellularSignal7printToER5Print>

000d9b38 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d9b38:	6800      	ldr	r0, [r0, #0]
   d9b3a:	f000 bba2 	b.w	da282 <_ZN7TwoWire4lockEv>

000d9b3e <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d9b3e:	b510      	push	{r4, lr}
   d9b40:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d9b42:	6001      	str	r1, [r0, #0]
   d9b44:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d9b46:	b10a      	cbz	r2, d9b4c <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d9b48:	f7ff fff6 	bl	d9b38 <_ZN9FuelGauge4lockEv>
    }
}
   d9b4c:	4620      	mov	r0, r4
   d9b4e:	bd10      	pop	{r4, pc}

000d9b50 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d9b50:	b538      	push	{r3, r4, r5, lr}
   d9b52:	4604      	mov	r4, r0
   d9b54:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d9b56:	f001 f8b1 	bl	dacbc <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d9b5a:	462a      	mov	r2, r5
   d9b5c:	4601      	mov	r1, r0
   d9b5e:	4620      	mov	r0, r4
   d9b60:	f7ff ffed 	bl	d9b3e <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d9b64:	4620      	mov	r0, r4
   d9b66:	bd38      	pop	{r3, r4, r5, pc}

000d9b68 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d9b68:	6800      	ldr	r0, [r0, #0]
   d9b6a:	f000 bb93 	b.w	da294 <_ZN7TwoWire6unlockEv>

000d9b6e <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d9b6e:	b510      	push	{r4, lr}
{
    if (lock_) {
   d9b70:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d9b72:	4604      	mov	r4, r0
{
    if (lock_) {
   d9b74:	b10b      	cbz	r3, d9b7a <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d9b76:	f7ff fff7 	bl	d9b68 <_ZN9FuelGauge6unlockEv>
    }
}
   d9b7a:	4620      	mov	r0, r4
   d9b7c:	bd10      	pop	{r4, pc}

000d9b7e <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d9b7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9b80:	4604      	mov	r4, r0
   d9b82:	4616      	mov	r6, r2
   d9b84:	461d      	mov	r5, r3
   d9b86:	460f      	mov	r7, r1
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d9b88:	f7ff ffd6 	bl	d9b38 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   d9b8c:	6820      	ldr	r0, [r4, #0]
   d9b8e:	2136      	movs	r1, #54	; 0x36
   d9b90:	f000 fb6c 	bl	da26c <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
   d9b94:	6820      	ldr	r0, [r4, #0]
   d9b96:	6803      	ldr	r3, [r0, #0]
   d9b98:	4639      	mov	r1, r7
   d9b9a:	689b      	ldr	r3, [r3, #8]
   d9b9c:	4798      	blx	r3
    i2c_.endTransmission(true);
   d9b9e:	2101      	movs	r1, #1
   d9ba0:	6820      	ldr	r0, [r4, #0]
   d9ba2:	f000 fb66 	bl	da272 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
   d9ba6:	2202      	movs	r2, #2
   d9ba8:	2136      	movs	r1, #54	; 0x36
   d9baa:	2301      	movs	r3, #1
   d9bac:	6820      	ldr	r0, [r4, #0]
   d9bae:	f000 fb47 	bl	da240 <_ZN7TwoWire11requestFromEhjh>
    MSB = i2c_.read();
   d9bb2:	6820      	ldr	r0, [r4, #0]
   d9bb4:	6803      	ldr	r3, [r0, #0]
   d9bb6:	695b      	ldr	r3, [r3, #20]
   d9bb8:	4798      	blx	r3
   d9bba:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
   d9bbc:	6820      	ldr	r0, [r4, #0]
   d9bbe:	6803      	ldr	r3, [r0, #0]
   d9bc0:	695b      	ldr	r3, [r3, #20]
   d9bc2:	4798      	blx	r3
   d9bc4:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d9bc6:	4620      	mov	r0, r4
}
   d9bc8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d9bcc:	f7ff bfcc 	b.w	d9b68 <_ZN9FuelGauge6unlockEv>

000d9bd0 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
   d9bd0:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d9bd2:	ab02      	add	r3, sp, #8
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d9bd4:	2200      	movs	r2, #0
	byte LSB = 0;
   d9bd6:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d9bda:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
   d9bde:	2104      	movs	r1, #4
   d9be0:	f10d 0206 	add.w	r2, sp, #6
   d9be4:	f7ff ffcb 	bl	d9b7e <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d9be8:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d9bec:	f001 fb48 	bl	db280 <__aeabi_i2d>
   d9bf0:	2200      	movs	r2, #0
   d9bf2:	4b09      	ldr	r3, [pc, #36]	; (d9c18 <_ZN9FuelGauge6getSoCEv+0x48>)
   d9bf4:	f001 fbaa 	bl	db34c <__aeabi_dmul>
   d9bf8:	f001 fea0 	bl	db93c <__aeabi_d2f>
   d9bfc:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d9c00:	ee00 3a10 	vmov	s0, r3
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d9c04:	ee07 0a90 	vmov	s15, r0
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d9c08:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d9c0c:	ee37 0a80 	vadd.f32	s0, s15, s0
   d9c10:	b003      	add	sp, #12
   d9c12:	f85d fb04 	ldr.w	pc, [sp], #4
   d9c16:	bf00      	nop
   d9c18:	3f700000 	.word	0x3f700000

000d9c1c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d9c1c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d9c1e:	4b0c      	ldr	r3, [pc, #48]	; (d9c50 <serialEventRun+0x34>)
   d9c20:	b133      	cbz	r3, d9c30 <serialEventRun+0x14>
   d9c22:	f000 f977 	bl	d9f14 <_Z16_fetch_usbserialv>
   d9c26:	6803      	ldr	r3, [r0, #0]
   d9c28:	691b      	ldr	r3, [r3, #16]
   d9c2a:	4798      	blx	r3
   d9c2c:	2800      	cmp	r0, #0
   d9c2e:	dc09      	bgt.n	d9c44 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d9c30:	4b08      	ldr	r3, [pc, #32]	; (d9c54 <serialEventRun+0x38>)
   d9c32:	b163      	cbz	r3, d9c4e <serialEventRun+0x32>
   d9c34:	f000 fa84 	bl	da140 <_Z22__fetch_global_Serial1v>
   d9c38:	6803      	ldr	r3, [r0, #0]
   d9c3a:	691b      	ldr	r3, [r3, #16]
   d9c3c:	4798      	blx	r3
   d9c3e:	2800      	cmp	r0, #0
   d9c40:	dc03      	bgt.n	d9c4a <serialEventRun+0x2e>
   d9c42:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d9c44:	f3af 8000 	nop.w
   d9c48:	e7f2      	b.n	d9c30 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d9c4a:	f3af 8000 	nop.w
   d9c4e:	bd08      	pop	{r3, pc}
	...

000d9c58 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d9c58:	b508      	push	{r3, lr}
	serialEventRun();
   d9c5a:	f7ff ffdf 	bl	d9c1c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d9c5e:	f7fe fed3 	bl	d8a08 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d9c62:	4b01      	ldr	r3, [pc, #4]	; (d9c68 <_post_loop+0x10>)
   d9c64:	6018      	str	r0, [r3, #0]
   d9c66:	bd08      	pop	{r3, pc}
   d9c68:	2003e304 	.word	0x2003e304

000d9c6c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d9c6c:	4802      	ldr	r0, [pc, #8]	; (d9c78 <_Z33system_initialize_user_backup_ramv+0xc>)
   d9c6e:	4a03      	ldr	r2, [pc, #12]	; (d9c7c <_Z33system_initialize_user_backup_ramv+0x10>)
   d9c70:	4903      	ldr	r1, [pc, #12]	; (d9c80 <_Z33system_initialize_user_backup_ramv+0x14>)
   d9c72:	1a12      	subs	r2, r2, r0
   d9c74:	f002 b803 	b.w	dbc7e <memcpy>
   d9c78:	2003f400 	.word	0x2003f400
   d9c7c:	2003f404 	.word	0x2003f404
   d9c80:	000ddc60 	.word	0x000ddc60

000d9c84 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d9c84:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9c86:	2300      	movs	r3, #0
   d9c88:	9300      	str	r3, [sp, #0]
   d9c8a:	461a      	mov	r2, r3
   d9c8c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9c90:	f7ff f8a4 	bl	d8ddc <system_ctrl_set_result>
}
   d9c94:	b003      	add	sp, #12
   d9c96:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9c9c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d9c9c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d9c9e:	8843      	ldrh	r3, [r0, #2]
   d9ca0:	2b0a      	cmp	r3, #10
   d9ca2:	d008      	beq.n	d9cb6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d9ca4:	2b50      	cmp	r3, #80	; 0x50
   d9ca6:	d109      	bne.n	d9cbc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d9ca8:	4b09      	ldr	r3, [pc, #36]	; (d9cd0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d9caa:	681b      	ldr	r3, [r3, #0]
   d9cac:	b13b      	cbz	r3, d9cbe <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d9cae:	b003      	add	sp, #12
   d9cb0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d9cb4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d9cb6:	f7ff ffe5 	bl	d9c84 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d9cba:	e006      	b.n	d9cca <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9cbc:	2300      	movs	r3, #0
   d9cbe:	9300      	str	r3, [sp, #0]
   d9cc0:	461a      	mov	r2, r3
   d9cc2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9cc6:	f7ff f889 	bl	d8ddc <system_ctrl_set_result>
        break;
    }
}
   d9cca:	b003      	add	sp, #12
   d9ccc:	f85d fb04 	ldr.w	pc, [sp], #4
   d9cd0:	2003df28 	.word	0x2003df28

000d9cd4 <module_user_init_hook>:

void module_user_init_hook()
{
   d9cd4:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d9cd6:	4c10      	ldr	r4, [pc, #64]	; (d9d18 <module_user_init_hook+0x44>)
   d9cd8:	4d10      	ldr	r5, [pc, #64]	; (d9d1c <module_user_init_hook+0x48>)
   d9cda:	6823      	ldr	r3, [r4, #0]
   d9cdc:	42ab      	cmp	r3, r5
   d9cde:	4b10      	ldr	r3, [pc, #64]	; (d9d20 <module_user_init_hook+0x4c>)
   d9ce0:	bf0c      	ite	eq
   d9ce2:	2201      	moveq	r2, #1
   d9ce4:	2200      	movne	r2, #0
   d9ce6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d9ce8:	d002      	beq.n	d9cf0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d9cea:	f7ff ffbf 	bl	d9c6c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d9cee:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d9cf0:	f7fe fe7a 	bl	d89e8 <HAL_RNG_GetRandomNumber>
   d9cf4:	4604      	mov	r4, r0
    srand(seed);
   d9cf6:	f001 ffd5 	bl	dbca4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d9cfa:	4b0a      	ldr	r3, [pc, #40]	; (d9d24 <module_user_init_hook+0x50>)
   d9cfc:	b113      	cbz	r3, d9d04 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d9cfe:	4620      	mov	r0, r4
   d9d00:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d9d04:	2100      	movs	r1, #0
   d9d06:	4807      	ldr	r0, [pc, #28]	; (d9d24 <module_user_init_hook+0x50>)
   d9d08:	f7ff f8ea 	bl	d8ee0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d9d0c:	2100      	movs	r1, #0
   d9d0e:	4806      	ldr	r0, [pc, #24]	; (d9d28 <module_user_init_hook+0x54>)
}
   d9d10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d9d14:	f7ff b858 	b.w	d8dc8 <system_ctrl_set_app_request_handler>
   d9d18:	2003f400 	.word	0x2003f400
   d9d1c:	9a271c1e 	.word	0x9a271c1e
   d9d20:	2003df2c 	.word	0x2003df2c
   d9d24:	00000000 	.word	0x00000000
   d9d28:	000d9c9d 	.word	0x000d9c9d

000d9d2c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d9d2c:	4770      	bx	lr

000d9d2e <_ZN9IPAddressD0Ev>:
   d9d2e:	b510      	push	{r4, lr}
   d9d30:	2118      	movs	r1, #24
   d9d32:	4604      	mov	r4, r0
   d9d34:	f000 fff6 	bl	dad24 <_ZdlPvj>
   d9d38:	4620      	mov	r0, r4
   d9d3a:	bd10      	pop	{r4, pc}

000d9d3c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d9d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d9d3e:	7d03      	ldrb	r3, [r0, #20]
   d9d40:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d9d42:	b08d      	sub	sp, #52	; 0x34
   d9d44:	460e      	mov	r6, r1
   d9d46:	f100 0704 	add.w	r7, r0, #4
   d9d4a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d9d4e:	d002      	beq.n	d9d56 <_ZNK9IPAddress7printToER5Print+0x1a>
   d9d50:	f100 0508 	add.w	r5, r0, #8
   d9d54:	e018      	b.n	d9d88 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d9d56:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9d58:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d9d5a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9d5e:	232f      	movs	r3, #47	; 0x2f
   d9d60:	462a      	mov	r2, r5
   d9d62:	200a      	movs	r0, #10
   d9d64:	f7fe fee0 	bl	d8b28 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d9d68:	4628      	mov	r0, r5
   d9d6a:	f002 fcf7 	bl	dc75c <strlen>
   d9d6e:	6833      	ldr	r3, [r6, #0]
   d9d70:	4602      	mov	r2, r0
   d9d72:	68db      	ldr	r3, [r3, #12]
   d9d74:	4629      	mov	r1, r5
   d9d76:	4630      	mov	r0, r6
   d9d78:	4798      	blx	r3
   d9d7a:	e00f      	b.n	d9d9c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d9d7c:	b124      	cbz	r4, d9d88 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d9d7e:	212e      	movs	r1, #46	; 0x2e
   d9d80:	4630      	mov	r0, r6
   d9d82:	f7ff fbab 	bl	d94dc <_ZN5Print5printEc>
   d9d86:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d9d88:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d9d8c:	220a      	movs	r2, #10
   d9d8e:	4630      	mov	r0, r6
   d9d90:	f7ff fbbd 	bl	d950e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d9d94:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d9d96:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d9d98:	d1f0      	bne.n	d9d7c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d9d9a:	4620      	mov	r0, r4
    }
    return n;
}
   d9d9c:	b00d      	add	sp, #52	; 0x34
   d9d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9da0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d9da0:	b510      	push	{r4, lr}
   d9da2:	4b05      	ldr	r3, [pc, #20]	; (d9db8 <_ZN9IPAddressC1Ev+0x18>)
   d9da4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d9da6:	2211      	movs	r2, #17
   d9da8:	f840 3b04 	str.w	r3, [r0], #4
   d9dac:	2100      	movs	r1, #0
   d9dae:	f001 ff71 	bl	dbc94 <memset>
{
    clear();
}
   d9db2:	4620      	mov	r0, r4
   d9db4:	bd10      	pop	{r4, pc}
   d9db6:	bf00      	nop
   d9db8:	000dd524 	.word	0x000dd524

000d9dbc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d9dbc:	4603      	mov	r3, r0
   d9dbe:	4a07      	ldr	r2, [pc, #28]	; (d9ddc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d9dc0:	b510      	push	{r4, lr}
   d9dc2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d9dc6:	f101 0210 	add.w	r2, r1, #16
   d9dca:	f851 4b04 	ldr.w	r4, [r1], #4
   d9dce:	f843 4b04 	str.w	r4, [r3], #4
   d9dd2:	4291      	cmp	r1, r2
   d9dd4:	d1f9      	bne.n	d9dca <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d9dd6:	780a      	ldrb	r2, [r1, #0]
   d9dd8:	701a      	strb	r2, [r3, #0]
}
   d9dda:	bd10      	pop	{r4, pc}
   d9ddc:	000dd524 	.word	0x000dd524

000d9de0 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d9de0:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d9de2:	2b04      	cmp	r3, #4
   d9de4:	d101      	bne.n	d9dea <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d9de6:	6840      	ldr	r0, [r0, #4]
   d9de8:	e008      	b.n	d9dfc <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d9dea:	2b06      	cmp	r3, #6
   d9dec:	d10a      	bne.n	d9e04 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d9dee:	6843      	ldr	r3, [r0, #4]
   d9df0:	b953      	cbnz	r3, d9e08 <_ZNK9IPAddresscvbEv+0x28>
   d9df2:	6883      	ldr	r3, [r0, #8]
   d9df4:	b943      	cbnz	r3, d9e08 <_ZNK9IPAddresscvbEv+0x28>
   d9df6:	68c3      	ldr	r3, [r0, #12]
   d9df8:	b933      	cbnz	r3, d9e08 <_ZNK9IPAddresscvbEv+0x28>
   d9dfa:	6900      	ldr	r0, [r0, #16]
   d9dfc:	3000      	adds	r0, #0
   d9dfe:	bf18      	it	ne
   d9e00:	2001      	movne	r0, #1
   d9e02:	4770      	bx	lr
    } else {
        return false;
   d9e04:	2000      	movs	r0, #0
   d9e06:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d9e08:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d9e0a:	4770      	bx	lr

000d9e0c <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d9e0c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d9e0e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d9e12:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d9e16:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d9e1a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d9e1e:	2304      	movs	r3, #4
   d9e20:	6041      	str	r1, [r0, #4]
   d9e22:	7503      	strb	r3, [r0, #20]
   d9e24:	bd10      	pop	{r4, pc}

000d9e26 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d9e26:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d9e28:	780d      	ldrb	r5, [r1, #0]
   d9e2a:	788b      	ldrb	r3, [r1, #2]
   d9e2c:	784a      	ldrb	r2, [r1, #1]
   d9e2e:	78c9      	ldrb	r1, [r1, #3]
   d9e30:	9100      	str	r1, [sp, #0]
   d9e32:	4629      	mov	r1, r5
   d9e34:	f7ff ffea 	bl	d9e0c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d9e38:	b003      	add	sp, #12
   d9e3a:	bd30      	pop	{r4, r5, pc}

000d9e3c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
   d9e3c:	b510      	push	{r4, lr}
   d9e3e:	4b03      	ldr	r3, [pc, #12]	; (d9e4c <_ZN9IPAddressC1EPKh+0x10>)
   d9e40:	6003      	str	r3, [r0, #0]
   d9e42:	4604      	mov	r4, r0
{
    *this = address;
   d9e44:	f7ff ffef 	bl	d9e26 <_ZN9IPAddressaSEPKh>
}
   d9e48:	4620      	mov	r0, r4
   d9e4a:	bd10      	pop	{r4, pc}
   d9e4c:	000dd524 	.word	0x000dd524

000d9e50 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9e50:	7441      	strb	r1, [r0, #17]
   d9e52:	4770      	bx	lr

000d9e54 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d9e54:	4770      	bx	lr

000d9e56 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d9e56:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d9e58:	2100      	movs	r1, #0
   d9e5a:	7c00      	ldrb	r0, [r0, #16]
   d9e5c:	f7fe ff6c 	bl	d8d38 <HAL_USB_USART_Receive_Data>
}
   d9e60:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9e64:	bf28      	it	cs
   d9e66:	f04f 30ff 	movcs.w	r0, #4294967295
   d9e6a:	bd08      	pop	{r3, pc}

000d9e6c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d9e6c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d9e6e:	2101      	movs	r1, #1
   d9e70:	7c00      	ldrb	r0, [r0, #16]
   d9e72:	f7fe ff61 	bl	d8d38 <HAL_USB_USART_Receive_Data>
}
   d9e76:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9e7a:	bf28      	it	cs
   d9e7c:	f04f 30ff 	movcs.w	r0, #4294967295
   d9e80:	bd08      	pop	{r3, pc}

000d9e82 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d9e82:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d9e84:	7c00      	ldrb	r0, [r0, #16]
   d9e86:	f7fe ff4f 	bl	d8d28 <HAL_USB_USART_Available_Data_For_Write>
}
   d9e8a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9e8e:	bd08      	pop	{r3, pc}

000d9e90 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d9e90:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d9e92:	7c00      	ldrb	r0, [r0, #16]
   d9e94:	f7fe ff40 	bl	d8d18 <HAL_USB_USART_Available_Data>
}
   d9e98:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9e9c:	bd08      	pop	{r3, pc}

000d9e9e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d9e9e:	7c00      	ldrb	r0, [r0, #16]
   d9ea0:	f7fe bf5a 	b.w	d8d58 <HAL_USB_USART_Flush_Data>

000d9ea4 <_ZN9USBSerialD0Ev>:
   d9ea4:	b510      	push	{r4, lr}
   d9ea6:	2114      	movs	r1, #20
   d9ea8:	4604      	mov	r4, r0
   d9eaa:	f000 ff3b 	bl	dad24 <_ZdlPvj>
   d9eae:	4620      	mov	r0, r4
   d9eb0:	bd10      	pop	{r4, pc}

000d9eb2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d9eb2:	b538      	push	{r3, r4, r5, lr}
   d9eb4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9eb6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d9eb8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9eba:	f7fe ff35 	bl	d8d28 <HAL_USB_USART_Available_Data_For_Write>
   d9ebe:	2800      	cmp	r0, #0
   d9ec0:	dc01      	bgt.n	d9ec6 <_ZN9USBSerial5writeEh+0x14>
   d9ec2:	7c60      	ldrb	r0, [r4, #17]
   d9ec4:	b128      	cbz	r0, d9ed2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d9ec6:	4629      	mov	r1, r5
   d9ec8:	7c20      	ldrb	r0, [r4, #16]
   d9eca:	f7fe ff3d 	bl	d8d48 <HAL_USB_USART_Send_Data>
   d9ece:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d9ed2:	bd38      	pop	{r3, r4, r5, pc}

000d9ed4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9ed4:	b510      	push	{r4, lr}
   d9ed6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d9ed8:	2300      	movs	r3, #0
   d9eda:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d9edc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9ee0:	60a3      	str	r3, [r4, #8]
   d9ee2:	4b05      	ldr	r3, [pc, #20]	; (d9ef8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d9ee4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d9ee6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9ee8:	4608      	mov	r0, r1
{
  _serial = serial;
   d9eea:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d9eec:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d9eee:	4611      	mov	r1, r2
   d9ef0:	f7fe ff02 	bl	d8cf8 <HAL_USB_USART_Init>
}
   d9ef4:	4620      	mov	r0, r4
   d9ef6:	bd10      	pop	{r4, pc}
   d9ef8:	000dd538 	.word	0x000dd538

000d9efc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d9efc:	2200      	movs	r2, #0
   d9efe:	7c00      	ldrb	r0, [r0, #16]
   d9f00:	f7fe bf02 	b.w	d8d08 <HAL_USB_USART_Begin>

000d9f04 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d9f04:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d9f06:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d9f08:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d9f0a:	2100      	movs	r1, #0
   d9f0c:	f001 fec2 	bl	dbc94 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d9f10:	4620      	mov	r0, r4
   d9f12:	bd10      	pop	{r4, pc}

000d9f14 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d9f14:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9f16:	4d0e      	ldr	r5, [pc, #56]	; (d9f50 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d9f18:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d9f1a:	a801      	add	r0, sp, #4
   d9f1c:	f7ff fff2 	bl	d9f04 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9f20:	6829      	ldr	r1, [r5, #0]
   d9f22:	f011 0401 	ands.w	r4, r1, #1
   d9f26:	d110      	bne.n	d9f4a <_Z16_fetch_usbserialv+0x36>
   d9f28:	4628      	mov	r0, r5
   d9f2a:	f7fa f8be 	bl	d40aa <__cxa_guard_acquire>
   d9f2e:	b160      	cbz	r0, d9f4a <_Z16_fetch_usbserialv+0x36>
   d9f30:	aa01      	add	r2, sp, #4
   d9f32:	4621      	mov	r1, r4
   d9f34:	4807      	ldr	r0, [pc, #28]	; (d9f54 <_Z16_fetch_usbserialv+0x40>)
   d9f36:	f7ff ffcd 	bl	d9ed4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d9f3a:	4628      	mov	r0, r5
   d9f3c:	f7fa f8ba 	bl	d40b4 <__cxa_guard_release>
   d9f40:	4a05      	ldr	r2, [pc, #20]	; (d9f58 <_Z16_fetch_usbserialv+0x44>)
   d9f42:	4906      	ldr	r1, [pc, #24]	; (d9f5c <_Z16_fetch_usbserialv+0x48>)
   d9f44:	4803      	ldr	r0, [pc, #12]	; (d9f54 <_Z16_fetch_usbserialv+0x40>)
   d9f46:	f000 fedf 	bl	dad08 <__aeabi_atexit>
	return _usbserial;
}
   d9f4a:	4802      	ldr	r0, [pc, #8]	; (d9f54 <_Z16_fetch_usbserialv+0x40>)
   d9f4c:	b007      	add	sp, #28
   d9f4e:	bd30      	pop	{r4, r5, pc}
   d9f50:	2003df30 	.word	0x2003df30
   d9f54:	2003df34 	.word	0x2003df34
   d9f58:	2003d7f8 	.word	0x2003d7f8
   d9f5c:	000d9e55 	.word	0x000d9e55

000d9f60 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d9f60:	4700      	bx	r0
	...

000d9f64 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d9f64:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9f66:	b085      	sub	sp, #20
   d9f68:	461c      	mov	r4, r3
   d9f6a:	460e      	mov	r6, r1
   d9f6c:	4617      	mov	r7, r2
   d9f6e:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   d9f70:	f7fe fcb2 	bl	d88d8 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   d9f74:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d9f76:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d9f78:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d9f7c:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d9f7e:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d9f82:	bfa5      	ittet	ge
   d9f84:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d9f88:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d9f8c:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d9f8e:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d9f90:	9300      	str	r3, [sp, #0]
   d9f92:	4632      	mov	r2, r6
   d9f94:	463b      	mov	r3, r7
   d9f96:	4906      	ldr	r1, [pc, #24]	; (d9fb0 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d9f98:	bfa8      	it	ge
   d9f9a:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d9f9e:	4628      	mov	r0, r5
   d9fa0:	f7fe fc92 	bl	d88c8 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d9fa4:	fab0 f080 	clz	r0, r0
   d9fa8:	0940      	lsrs	r0, r0, #5
   d9faa:	b005      	add	sp, #20
   d9fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9fae:	bf00      	nop
   d9fb0:	000d9f61 	.word	0x000d9f61

000d9fb4 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   d9fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9fb6:	4606      	mov	r6, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
   d9fb8:	f7fe fc8e 	bl	d88d8 <HAL_Interrupts_Detach>
   d9fbc:	4607      	mov	r7, r0
   d9fbe:	b968      	cbnz	r0, d9fdc <_Z15detachInterruptt+0x28>
        return false;
    }
    if (handlers[pin]) {
   d9fc0:	4d08      	ldr	r5, [pc, #32]	; (d9fe4 <_Z15detachInterruptt+0x30>)
   d9fc2:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
   d9fc6:	b15c      	cbz	r4, d9fe0 <_Z15detachInterruptt+0x2c>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d9fc8:	4620      	mov	r0, r4
   d9fca:	f7fb fad7 	bl	d557c <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   d9fce:	2110      	movs	r1, #16
   d9fd0:	4620      	mov	r0, r4
   d9fd2:	f000 fea7 	bl	dad24 <_ZdlPvj>
        handlers[pin] = nullptr;
   d9fd6:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
   d9fda:	e001      	b.n	d9fe0 <_Z15detachInterruptt+0x2c>
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
        return false;
   d9fdc:	2000      	movs	r0, #0
   d9fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    if (handlers[pin]) {
        delete handlers[pin];
        handlers[pin] = nullptr;
    }
    return true;
   d9fe0:	2001      	movs	r0, #1
}
   d9fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d9fe4:	2003df48 	.word	0x2003df48

000d9fe8 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d9fe8:	f7fe bc86 	b.w	d88f8 <HAL_Interrupts_Disable_All>

000d9fec <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d9fec:	f7fe bc7c 	b.w	d88e8 <HAL_Interrupts_Enable_All>

000d9ff0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d9ff0:	2200      	movs	r2, #0
   d9ff2:	4611      	mov	r1, r2
   d9ff4:	6840      	ldr	r0, [r0, #4]
   d9ff6:	f7fe bf13 	b.w	d8e20 <network_ready>

000d9ffa <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d9ffa:	2200      	movs	r2, #0
   d9ffc:	4611      	mov	r1, r2
   d9ffe:	6840      	ldr	r0, [r0, #4]
   da000:	f7fe bf2e 	b.w	d8e60 <network_listening>

000da004 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   da004:	2200      	movs	r2, #0
   da006:	4611      	mov	r1, r2
   da008:	6840      	ldr	r0, [r0, #4]
   da00a:	f7fe bf39 	b.w	d8e80 <network_get_listen_timeout>

000da00e <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   da00e:	2200      	movs	r2, #0
   da010:	6840      	ldr	r0, [r0, #4]
   da012:	f7fe bf2d 	b.w	d8e70 <network_set_listen_timeout>

000da016 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   da016:	2200      	movs	r2, #0
   da018:	f081 0101 	eor.w	r1, r1, #1
   da01c:	6840      	ldr	r0, [r0, #4]
   da01e:	f7fe bf17 	b.w	d8e50 <network_listen>

000da022 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   da022:	2300      	movs	r3, #0
   da024:	461a      	mov	r2, r3
   da026:	4619      	mov	r1, r3
   da028:	6840      	ldr	r0, [r0, #4]
   da02a:	f7fe bf09 	b.w	d8e40 <network_off>

000da02e <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   da02e:	2300      	movs	r3, #0
   da030:	461a      	mov	r2, r3
   da032:	4619      	mov	r1, r3
   da034:	6840      	ldr	r0, [r0, #4]
   da036:	f7fe befb 	b.w	d8e30 <network_on>

000da03a <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   da03a:	2200      	movs	r2, #0
   da03c:	4611      	mov	r1, r2
   da03e:	6840      	ldr	r0, [r0, #4]
   da040:	f7fe bede 	b.w	d8e00 <network_connecting>

000da044 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   da044:	2200      	movs	r2, #0
   da046:	2102      	movs	r1, #2
   da048:	6840      	ldr	r0, [r0, #4]
   da04a:	f7fe bee1 	b.w	d8e10 <network_disconnect>

000da04e <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   da04e:	2300      	movs	r3, #0
   da050:	461a      	mov	r2, r3
   da052:	6840      	ldr	r0, [r0, #4]
   da054:	f7fe becc 	b.w	d8df0 <network_connect>

000da058 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   da058:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   da05a:	4c08      	ldr	r4, [pc, #32]	; (da07c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   da05c:	2528      	movs	r5, #40	; 0x28
   da05e:	462a      	mov	r2, r5
   da060:	2100      	movs	r1, #0
   da062:	4620      	mov	r0, r4
   da064:	f001 fe16 	bl	dbc94 <memset>
        cid = -1;
   da068:	f04f 33ff 	mov.w	r3, #4294967295
   da06c:	6063      	str	r3, [r4, #4]
   da06e:	4b04      	ldr	r3, [pc, #16]	; (da080 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   da070:	8025      	strh	r5, [r4, #0]
   da072:	2204      	movs	r2, #4
   da074:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   da076:	4a03      	ldr	r2, [pc, #12]	; (da084 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   da078:	601a      	str	r2, [r3, #0]
   da07a:	bd38      	pop	{r3, r4, r5, pc}
   da07c:	2003dfe0 	.word	0x2003dfe0
   da080:	2003dfd8 	.word	0x2003dfd8
   da084:	000dd568 	.word	0x000dd568

000da088 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   da088:	4770      	bx	lr

000da08a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   da08a:	7441      	strb	r1, [r0, #17]
   da08c:	4770      	bx	lr

000da08e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   da08e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   da090:	7c00      	ldrb	r0, [r0, #16]
   da092:	f7fe fd99 	bl	d8bc8 <HAL_USART_Available_Data_For_Write>
}
   da096:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   da09a:	bd08      	pop	{r3, pc}

000da09c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   da09c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   da09e:	7c00      	ldrb	r0, [r0, #16]
   da0a0:	f7fe fd6a 	bl	d8b78 <HAL_USART_Available_Data>
}
   da0a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   da0a8:	bd08      	pop	{r3, pc}

000da0aa <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   da0aa:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   da0ac:	7c00      	ldrb	r0, [r0, #16]
   da0ae:	f7fe fd73 	bl	d8b98 <HAL_USART_Peek_Data>
}
   da0b2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   da0b6:	bf28      	it	cs
   da0b8:	f04f 30ff 	movcs.w	r0, #4294967295
   da0bc:	bd08      	pop	{r3, pc}

000da0be <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   da0be:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   da0c0:	7c00      	ldrb	r0, [r0, #16]
   da0c2:	f7fe fd61 	bl	d8b88 <HAL_USART_Read_Data>
}
   da0c6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   da0ca:	bf28      	it	cs
   da0cc:	f04f 30ff 	movcs.w	r0, #4294967295
   da0d0:	bd08      	pop	{r3, pc}

000da0d2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   da0d2:	7c00      	ldrb	r0, [r0, #16]
   da0d4:	f7fe bd68 	b.w	d8ba8 <HAL_USART_Flush_Data>

000da0d8 <_ZN11USARTSerialD0Ev>:
   da0d8:	b510      	push	{r4, lr}
   da0da:	2114      	movs	r1, #20
   da0dc:	4604      	mov	r4, r0
   da0de:	f000 fe21 	bl	dad24 <_ZdlPvj>
   da0e2:	4620      	mov	r0, r4
   da0e4:	bd10      	pop	{r4, pc}

000da0e6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   da0e6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   da0e8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   da0ea:	4604      	mov	r4, r0
   da0ec:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   da0ee:	b925      	cbnz	r5, da0fa <_ZN11USARTSerial5writeEh+0x14>
   da0f0:	7c00      	ldrb	r0, [r0, #16]
   da0f2:	f7fe fd69 	bl	d8bc8 <HAL_USART_Available_Data_For_Write>
   da0f6:	2800      	cmp	r0, #0
   da0f8:	dd05      	ble.n	da106 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   da0fa:	4631      	mov	r1, r6
   da0fc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   da0fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   da102:	f7fe bd31 	b.w	d8b68 <HAL_USART_Write_Data>
  }
  return 0;
}
   da106:	4628      	mov	r0, r5
   da108:	bd70      	pop	{r4, r5, r6, pc}
	...

000da10c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   da10c:	b510      	push	{r4, lr}
   da10e:	4604      	mov	r4, r0
   da110:	4608      	mov	r0, r1
   da112:	4611      	mov	r1, r2
   da114:	2200      	movs	r2, #0
   da116:	6062      	str	r2, [r4, #4]
   da118:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   da11c:	60a2      	str	r2, [r4, #8]
   da11e:	4a05      	ldr	r2, [pc, #20]	; (da134 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   da120:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   da122:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   da124:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   da126:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   da128:	461a      	mov	r2, r3
   da12a:	f7fe fd15 	bl	d8b58 <HAL_USART_Init>
}
   da12e:	4620      	mov	r0, r4
   da130:	bd10      	pop	{r4, pc}
   da132:	bf00      	nop
   da134:	000dd59c 	.word	0x000dd59c

000da138 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   da138:	7c00      	ldrb	r0, [r0, #16]
   da13a:	f7fe bd3d 	b.w	d8bb8 <HAL_USART_Is_Enabled>
	...

000da140 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   da140:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   da142:	4d0c      	ldr	r5, [pc, #48]	; (da174 <_Z22__fetch_global_Serial1v+0x34>)
   da144:	6829      	ldr	r1, [r5, #0]
   da146:	f011 0401 	ands.w	r4, r1, #1
   da14a:	d111      	bne.n	da170 <_Z22__fetch_global_Serial1v+0x30>
   da14c:	4628      	mov	r0, r5
   da14e:	f7f9 ffac 	bl	d40aa <__cxa_guard_acquire>
   da152:	b168      	cbz	r0, da170 <_Z22__fetch_global_Serial1v+0x30>
   da154:	4a08      	ldr	r2, [pc, #32]	; (da178 <_Z22__fetch_global_Serial1v+0x38>)
   da156:	4b09      	ldr	r3, [pc, #36]	; (da17c <_Z22__fetch_global_Serial1v+0x3c>)
   da158:	4809      	ldr	r0, [pc, #36]	; (da180 <_Z22__fetch_global_Serial1v+0x40>)
   da15a:	4621      	mov	r1, r4
   da15c:	f7ff ffd6 	bl	da10c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   da160:	4628      	mov	r0, r5
   da162:	f7f9 ffa7 	bl	d40b4 <__cxa_guard_release>
   da166:	4a07      	ldr	r2, [pc, #28]	; (da184 <_Z22__fetch_global_Serial1v+0x44>)
   da168:	4907      	ldr	r1, [pc, #28]	; (da188 <_Z22__fetch_global_Serial1v+0x48>)
   da16a:	4805      	ldr	r0, [pc, #20]	; (da180 <_Z22__fetch_global_Serial1v+0x40>)
   da16c:	f000 fdcc 	bl	dad08 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   da170:	4803      	ldr	r0, [pc, #12]	; (da180 <_Z22__fetch_global_Serial1v+0x40>)
   da172:	bd38      	pop	{r3, r4, r5, pc}
   da174:	2003e0a0 	.word	0x2003e0a0
   da178:	2003e0a4 	.word	0x2003e0a4
   da17c:	2003e01c 	.word	0x2003e01c
   da180:	2003e008 	.word	0x2003e008
   da184:	2003d7f8 	.word	0x2003d7f8
   da188:	000da089 	.word	0x000da089

000da18c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   da18c:	4770      	bx	lr

000da18e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   da18e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da190:	4606      	mov	r6, r0
   da192:	4615      	mov	r5, r2
   da194:	460c      	mov	r4, r1
   da196:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   da198:	42bc      	cmp	r4, r7
   da19a:	d006      	beq.n	da1aa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   da19c:	6833      	ldr	r3, [r6, #0]
   da19e:	f814 1b01 	ldrb.w	r1, [r4], #1
   da1a2:	689b      	ldr	r3, [r3, #8]
   da1a4:	4630      	mov	r0, r6
   da1a6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   da1a8:	e7f6      	b.n	da198 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   da1aa:	4628      	mov	r0, r5
   da1ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da1ae <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   da1ae:	2200      	movs	r2, #0
   da1b0:	7c00      	ldrb	r0, [r0, #16]
   da1b2:	f7fe bd21 	b.w	d8bf8 <HAL_I2C_Write_Data>

000da1b6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   da1b6:	2100      	movs	r1, #0
   da1b8:	7c00      	ldrb	r0, [r0, #16]
   da1ba:	f7fe bd25 	b.w	d8c08 <HAL_I2C_Available_Data>

000da1be <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   da1be:	2100      	movs	r1, #0
   da1c0:	7c00      	ldrb	r0, [r0, #16]
   da1c2:	f7fe bd29 	b.w	d8c18 <HAL_I2C_Read_Data>

000da1c6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   da1c6:	2100      	movs	r1, #0
   da1c8:	7c00      	ldrb	r0, [r0, #16]
   da1ca:	f7fe bd2d 	b.w	d8c28 <HAL_I2C_Peek_Data>

000da1ce <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   da1ce:	2100      	movs	r1, #0
   da1d0:	7c00      	ldrb	r0, [r0, #16]
   da1d2:	f7fe bd31 	b.w	d8c38 <HAL_I2C_Flush_Data>

000da1d6 <_ZN7TwoWireD0Ev>:
   da1d6:	b510      	push	{r4, lr}
   da1d8:	2114      	movs	r1, #20
   da1da:	4604      	mov	r4, r0
   da1dc:	f000 fda2 	bl	dad24 <_ZdlPvj>
   da1e0:	4620      	mov	r0, r4
   da1e2:	bd10      	pop	{r4, pc}

000da1e4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   da1e4:	b510      	push	{r4, lr}
   da1e6:	4604      	mov	r4, r0
   da1e8:	2300      	movs	r3, #0
   da1ea:	6063      	str	r3, [r4, #4]
   da1ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   da1f0:	60a3      	str	r3, [r4, #8]
   da1f2:	4b04      	ldr	r3, [pc, #16]	; (da204 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   da1f4:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   da1f6:	4608      	mov	r0, r1
   da1f8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   da1fa:	4611      	mov	r1, r2
   da1fc:	f7fe fd2c 	bl	d8c58 <HAL_I2C_Init>
}
   da200:	4620      	mov	r0, r4
   da202:	bd10      	pop	{r4, pc}
   da204:	000dd5cc 	.word	0x000dd5cc

000da208 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   da208:	b570      	push	{r4, r5, r6, lr}
   da20a:	460c      	mov	r4, r1
   da20c:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   da20e:	2514      	movs	r5, #20
   da210:	4606      	mov	r6, r0
   da212:	462a      	mov	r2, r5
   da214:	2100      	movs	r1, #0
   da216:	a801      	add	r0, sp, #4
   da218:	f001 fd3c 	bl	dbc94 <memset>
   da21c:	7823      	ldrb	r3, [r4, #0]
   da21e:	f88d 3008 	strb.w	r3, [sp, #8]
   da222:	6863      	ldr	r3, [r4, #4]
   da224:	9303      	str	r3, [sp, #12]
   da226:	68e3      	ldr	r3, [r4, #12]
   da228:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   da22a:	2200      	movs	r2, #0
   da22c:	7a23      	ldrb	r3, [r4, #8]
   da22e:	7c30      	ldrb	r0, [r6, #16]
   da230:	f8ad 5004 	strh.w	r5, [sp, #4]
   da234:	a901      	add	r1, sp, #4
   da236:	9305      	str	r3, [sp, #20]
   da238:	f7fe fd26 	bl	d8c88 <HAL_I2C_Request_Data_Ex>
}
   da23c:	b006      	add	sp, #24
   da23e:	bd70      	pop	{r4, r5, r6, pc}

000da240 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   da240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   da242:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   da244:	f88d 1000 	strb.w	r1, [sp]
   da248:	f04f 0164 	mov.w	r1, #100	; 0x64
   da24c:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   da24e:	bf18      	it	ne
   da250:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   da252:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   da254:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   da256:	f88d 3008 	strb.w	r3, [sp, #8]
   da25a:	f7ff ffd5 	bl	da208 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   da25e:	b005      	add	sp, #20
   da260:	f85d fb04 	ldr.w	pc, [sp], #4

000da264 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   da264:	2200      	movs	r2, #0
   da266:	7c00      	ldrb	r0, [r0, #16]
   da268:	f7fe bcb6 	b.w	d8bd8 <HAL_I2C_Begin_Transmission>

000da26c <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   da26c:	b2c9      	uxtb	r1, r1
   da26e:	f7ff bff9 	b.w	da264 <_ZN7TwoWire17beginTransmissionEh>

000da272 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   da272:	2200      	movs	r2, #0
   da274:	7c00      	ldrb	r0, [r0, #16]
   da276:	f7fe bcb7 	b.w	d8be8 <HAL_I2C_End_Transmission>

000da27a <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   da27a:	2100      	movs	r1, #0
   da27c:	7c00      	ldrb	r0, [r0, #16]
   da27e:	f7fe bce3 	b.w	d8c48 <HAL_I2C_Is_Enabled>

000da282 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   da282:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   da284:	2100      	movs	r1, #0
   da286:	7c00      	ldrb	r0, [r0, #16]
   da288:	f7fe fcee 	bl	d8c68 <HAL_I2C_Acquire>
}
   da28c:	fab0 f080 	clz	r0, r0
   da290:	0940      	lsrs	r0, r0, #5
   da292:	bd08      	pop	{r3, pc}

000da294 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   da294:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   da296:	2100      	movs	r1, #0
   da298:	7c00      	ldrb	r0, [r0, #16]
   da29a:	f7fe fced 	bl	d8c78 <HAL_I2C_Release>
}
   da29e:	fab0 f080 	clz	r0, r0
   da2a2:	0940      	lsrs	r0, r0, #5
   da2a4:	bd08      	pop	{r3, pc}

000da2a6 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   da2a6:	2200      	movs	r2, #0
   da2a8:	4611      	mov	r1, r2
   da2aa:	6840      	ldr	r0, [r0, #4]
   da2ac:	f7fe bdd8 	b.w	d8e60 <network_listening>

000da2b0 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   da2b0:	2200      	movs	r2, #0
   da2b2:	4611      	mov	r1, r2
   da2b4:	6840      	ldr	r0, [r0, #4]
   da2b6:	f7fe bde3 	b.w	d8e80 <network_get_listen_timeout>

000da2ba <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   da2ba:	2200      	movs	r2, #0
   da2bc:	6840      	ldr	r0, [r0, #4]
   da2be:	f7fe bdd7 	b.w	d8e70 <network_set_listen_timeout>

000da2c2 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   da2c2:	2200      	movs	r2, #0
   da2c4:	f081 0101 	eor.w	r1, r1, #1
   da2c8:	6840      	ldr	r0, [r0, #4]
   da2ca:	f7fe bdc1 	b.w	d8e50 <network_listen>

000da2ce <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   da2ce:	2300      	movs	r3, #0
   da2d0:	461a      	mov	r2, r3
   da2d2:	2101      	movs	r1, #1
   da2d4:	6840      	ldr	r0, [r0, #4]
   da2d6:	f7fe bdb3 	b.w	d8e40 <network_off>

000da2da <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   da2da:	2300      	movs	r3, #0
   da2dc:	461a      	mov	r2, r3
   da2de:	4619      	mov	r1, r3
   da2e0:	6840      	ldr	r0, [r0, #4]
   da2e2:	f7fe bda5 	b.w	d8e30 <network_on>

000da2e6 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   da2e6:	2200      	movs	r2, #0
   da2e8:	4611      	mov	r1, r2
   da2ea:	6840      	ldr	r0, [r0, #4]
   da2ec:	f7fe bd98 	b.w	d8e20 <network_ready>

000da2f0 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   da2f0:	2200      	movs	r2, #0
   da2f2:	4611      	mov	r1, r2
   da2f4:	6840      	ldr	r0, [r0, #4]
   da2f6:	f7fe bd83 	b.w	d8e00 <network_connecting>

000da2fa <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   da2fa:	2200      	movs	r2, #0
   da2fc:	2102      	movs	r1, #2
   da2fe:	6840      	ldr	r0, [r0, #4]
   da300:	f7fe bd86 	b.w	d8e10 <network_disconnect>

000da304 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   da304:	2300      	movs	r3, #0
   da306:	461a      	mov	r2, r3
   da308:	6840      	ldr	r0, [r0, #4]
   da30a:	f7fe bd71 	b.w	d8df0 <network_connect>

000da30e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   da30e:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   da310:	4605      	mov	r5, r0
   da312:	b188      	cbz	r0, da338 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   da314:	6804      	ldr	r4, [r0, #0]
   da316:	b14c      	cbz	r4, da32c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   da318:	68a3      	ldr	r3, [r4, #8]
   da31a:	b11b      	cbz	r3, da324 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   da31c:	2203      	movs	r2, #3
   da31e:	4621      	mov	r1, r4
   da320:	4620      	mov	r0, r4
   da322:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   da324:	2110      	movs	r1, #16
   da326:	4620      	mov	r0, r4
   da328:	f000 fcfc 	bl	dad24 <_ZdlPvj>
   da32c:	4628      	mov	r0, r5
   da32e:	2114      	movs	r1, #20
      }
   da330:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   da334:	f000 bcf6 	b.w	dad24 <_ZdlPvj>
   da338:	bd38      	pop	{r3, r4, r5, pc}

000da33a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   da33a:	b110      	cbz	r0, da342 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   da33c:	6803      	ldr	r3, [r0, #0]
   da33e:	685b      	ldr	r3, [r3, #4]
   da340:	4718      	bx	r3
   da342:	4770      	bx	lr

000da344 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   da344:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   da346:	6803      	ldr	r3, [r0, #0]
   da348:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   da34a:	b1bb      	cbz	r3, da37c <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   da34c:	6858      	ldr	r0, [r3, #4]
   da34e:	f7fe fb8b 	bl	d8a68 <os_thread_is_current>
   da352:	b978      	cbnz	r0, da374 <_ZN6ThreadD1Ev+0x30>
   da354:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   da356:	7c5a      	ldrb	r2, [r3, #17]
   da358:	b912      	cbnz	r2, da360 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   da35a:	6858      	ldr	r0, [r3, #4]
   da35c:	f7fe fb94 	bl	d8a88 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   da360:	6823      	ldr	r3, [r4, #0]
   da362:	6858      	ldr	r0, [r3, #4]
   da364:	f7fe fb98 	bl	d8a98 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da368:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   da36a:	2300      	movs	r3, #0
   da36c:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   da36e:	b128      	cbz	r0, da37c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   da370:	f7ff ffcd 	bl	da30e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   da374:	6820      	ldr	r0, [r4, #0]
   da376:	b108      	cbz	r0, da37c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   da378:	f7ff ffc9 	bl	da30e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   da37c:	4620      	mov	r0, r4
   da37e:	bd10      	pop	{r4, pc}

000da380 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   da380:	b538      	push	{r3, r4, r5, lr}
   da382:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   da384:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   da388:	b108      	cbz	r0, da38e <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   da38a:	f7f9 fe8c 	bl	d40a6 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   da38e:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   da392:	b108      	cbz	r0, da398 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   da394:	f7fe fbb8 	bl	d8b08 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   da398:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   da39c:	b135      	cbz	r5, da3ac <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   da39e:	4628      	mov	r0, r5
   da3a0:	f7ff ffd0 	bl	da344 <_ZN6ThreadD1Ev>
   da3a4:	2104      	movs	r1, #4
   da3a6:	4628      	mov	r0, r5
   da3a8:	f000 fcbc 	bl	dad24 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   da3ac:	6820      	ldr	r0, [r4, #0]
   da3ae:	b108      	cbz	r0, da3b4 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   da3b0:	f7ff ffc3 	bl	da33a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   da3b4:	4620      	mov	r0, r4
   da3b6:	bd38      	pop	{r3, r4, r5, pc}

000da3b8 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   da3b8:	b510      	push	{r4, lr}
   da3ba:	4b04      	ldr	r3, [pc, #16]	; (da3cc <_ZN5spark9MeshClassD1Ev+0x14>)
   da3bc:	4604      	mov	r4, r0
   da3be:	f840 3b08 	str.w	r3, [r0], #8
   da3c2:	f7ff ffdd 	bl	da380 <_ZN5spark11MeshPublishD1Ev>
   da3c6:	4620      	mov	r0, r4
   da3c8:	bd10      	pop	{r4, pc}
   da3ca:	bf00      	nop
   da3cc:	000dd5f4 	.word	0x000dd5f4

000da3d0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   da3d0:	b538      	push	{r3, r4, r5, lr}
   da3d2:	4c0e      	ldr	r4, [pc, #56]	; (da40c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   da3d4:	4b0e      	ldr	r3, [pc, #56]	; (da410 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   da3d6:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   da3d8:	2500      	movs	r5, #0
   da3da:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   da3dc:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   da3e0:	6063      	str	r3, [r4, #4]
   da3e2:	60a5      	str	r5, [r4, #8]
   da3e4:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   da3e8:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   da3ec:	f7fe fb84 	bl	d8af8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   da3f0:	4b08      	ldr	r3, [pc, #32]	; (da414 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   da3f2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   da3f6:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   da3fa:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   da3fc:	4620      	mov	r0, r4
   da3fe:	4a06      	ldr	r2, [pc, #24]	; (da418 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   da400:	4906      	ldr	r1, [pc, #24]	; (da41c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   da402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   da406:	f000 bc7f 	b.w	dad08 <__aeabi_atexit>
   da40a:	bf00      	nop
   da40c:	2003e128 	.word	0x2003e128
   da410:	000dd6a8 	.word	0x000dd6a8
   da414:	000dd5f4 	.word	0x000dd5f4
   da418:	2003d7f8 	.word	0x2003d7f8
   da41c:	000da3b9 	.word	0x000da3b9

000da420 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   da420:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da422:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   da424:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   da426:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   da42a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   da42c:	2201      	movs	r2, #1
   da42e:	f04f 33ff 	mov.w	r3, #4294967295
   da432:	4621      	mov	r1, r4
   da434:	47a8      	blx	r5
}
   da436:	b003      	add	sp, #12
   da438:	bd30      	pop	{r4, r5, pc}

000da43a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   da43a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   da43c:	6803      	ldr	r3, [r0, #0]
   da43e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   da440:	f04f 33ff 	mov.w	r3, #4294967295
   da444:	46a4      	mov	ip, r4
}
   da446:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   da44a:	4760      	bx	ip

000da44c <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   da44c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da44e:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   da450:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   da452:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   da456:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   da458:	4621      	mov	r1, r4
   da45a:	4613      	mov	r3, r2
   da45c:	2201      	movs	r2, #1
   da45e:	47a8      	blx	r5
}
   da460:	b003      	add	sp, #12
   da462:	bd30      	pop	{r4, r5, pc}

000da464 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   da464:	4770      	bx	lr

000da466 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   da466:	b538      	push	{r3, r4, r5, lr}
   da468:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   da46a:	681a      	ldr	r2, [r3, #0]
   da46c:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   da46e:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   da470:	da05      	bge.n	da47e <_ZN9TCPClient9connectedEv+0x18>
   da472:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da476:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   da47a:	429a      	cmp	r2, r3
   da47c:	d001      	beq.n	da482 <_ZN9TCPClient9connectedEv+0x1c>
   da47e:	2501      	movs	r5, #1
   da480:	e00b      	b.n	da49a <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   da482:	6803      	ldr	r3, [r0, #0]
   da484:	691b      	ldr	r3, [r3, #16]
   da486:	4798      	blx	r3
   da488:	2800      	cmp	r0, #0
   da48a:	bf14      	ite	ne
   da48c:	2501      	movne	r5, #1
   da48e:	2500      	moveq	r5, #0
        if (!rv) {
   da490:	d103      	bne.n	da49a <_ZN9TCPClient9connectedEv+0x34>
            stop();
   da492:	6823      	ldr	r3, [r4, #0]
   da494:	4620      	mov	r0, r4
   da496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   da498:	4798      	blx	r3
        }
    }
    return rv;
}
   da49a:	4628      	mov	r0, r5
   da49c:	bd38      	pop	{r3, r4, r5, pc}

000da49e <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   da49e:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   da4a0:	6818      	ldr	r0, [r3, #0]
}
   da4a2:	43c0      	mvns	r0, r0
   da4a4:	0fc0      	lsrs	r0, r0, #31
   da4a6:	4770      	bx	lr

000da4a8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   da4a8:	4770      	bx	lr

000da4aa <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   da4aa:	2000      	movs	r0, #0
   da4ac:	4770      	bx	lr

000da4ae <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   da4ae:	b510      	push	{r4, lr}
   da4b0:	2114      	movs	r1, #20
   da4b2:	4604      	mov	r4, r0
   da4b4:	f000 fc36 	bl	dad24 <_ZdlPvj>
   da4b8:	4620      	mov	r0, r4
   da4ba:	bd10      	pop	{r4, pc}

000da4bc <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   da4bc:	f7f9 bdf1 	b.w	d40a2 <_ZdlPv>

000da4c0 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   da4c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   da4c2:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   da4c4:	2200      	movs	r2, #0
   da4c6:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   da4c8:	9202      	str	r2, [sp, #8]
   da4ca:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   da4cc:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   da4ce:	4604      	mov	r4, r0
   da4d0:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   da4d2:	d008      	beq.n	da4e6 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   da4d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   da4d8:	fbb3 f1f2 	udiv	r1, r3, r2
   da4dc:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   da4de:	fb02 3111 	mls	r1, r2, r1, r3
   da4e2:	434a      	muls	r2, r1
   da4e4:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   da4e6:	6960      	ldr	r0, [r4, #20]
   da4e8:	2308      	movs	r3, #8
   da4ea:	9300      	str	r3, [sp, #0]
   da4ec:	f241 0205 	movw	r2, #4101	; 0x1005
   da4f0:	446b      	add	r3, sp
   da4f2:	f640 71ff 	movw	r1, #4095	; 0xfff
   da4f6:	6800      	ldr	r0, [r0, #0]
   da4f8:	f7fe fbce 	bl	d8c98 <sock_setsockopt>
    if (ret < 0) {
   da4fc:	2800      	cmp	r0, #0
   da4fe:	db08      	blt.n	da512 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   da500:	6960      	ldr	r0, [r4, #20]
   da502:	2300      	movs	r3, #0
   da504:	4632      	mov	r2, r6
   da506:	4629      	mov	r1, r5
   da508:	6800      	ldr	r0, [r0, #0]
   da50a:	f7fe fbe5 	bl	d8cd8 <sock_send>
    if (ret < 0) {
   da50e:	2800      	cmp	r0, #0
   da510:	da04      	bge.n	da51c <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   da512:	f7fe fd3d 	bl	d8f90 <__errno>
   da516:	6803      	ldr	r3, [r0, #0]
   da518:	6063      	str	r3, [r4, #4]
   da51a:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   da51c:	b004      	add	sp, #16
   da51e:	bd70      	pop	{r4, r5, r6, pc}

000da520 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   da520:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   da522:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   da524:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   da526:	689b      	ldr	r3, [r3, #8]
   da528:	4798      	blx	r3
          if (--_M_weak_count == 0)
   da52a:	68a3      	ldr	r3, [r4, #8]
   da52c:	3b01      	subs	r3, #1
   da52e:	60a3      	str	r3, [r4, #8]
   da530:	b92b      	cbnz	r3, da53e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   da532:	6823      	ldr	r3, [r4, #0]
   da534:	4620      	mov	r0, r4
   da536:	68db      	ldr	r3, [r3, #12]
        }
    }
   da538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   da53c:	4718      	bx	r3
   da53e:	bd10      	pop	{r4, pc}

000da540 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   da540:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   da542:	4604      	mov	r4, r0
   da544:	694d      	ldr	r5, [r1, #20]
   da546:	4b05      	ldr	r3, [pc, #20]	; (da55c <_ZN9TCPClient8remoteIPEv+0x1c>)
   da548:	f844 3b04 	str.w	r3, [r4], #4
   da54c:	358c      	adds	r5, #140	; 0x8c
   da54e:	4606      	mov	r6, r0
   da550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da554:	682b      	ldr	r3, [r5, #0]
   da556:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   da558:	4630      	mov	r0, r6
   da55a:	bd70      	pop	{r4, r5, r6, pc}
   da55c:	000dd524 	.word	0x000dd524

000da560 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   da560:	b510      	push	{r4, lr}
   da562:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   da564:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da568:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   da56c:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   da56e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   da570:	d005      	beq.n	da57e <_ZN9TCPClient4peekEv+0x1e>
   da572:	6962      	ldr	r2, [r4, #20]
   da574:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   da578:	4413      	add	r3, r2
   da57a:	7918      	ldrb	r0, [r3, #4]
   da57c:	bd10      	pop	{r4, pc}
   da57e:	6803      	ldr	r3, [r0, #0]
   da580:	691b      	ldr	r3, [r3, #16]
   da582:	4798      	blx	r3
   da584:	2800      	cmp	r0, #0
   da586:	d1f4      	bne.n	da572 <_ZN9TCPClient4peekEv+0x12>
   da588:	f04f 30ff 	mov.w	r0, #4294967295
}
   da58c:	bd10      	pop	{r4, pc}

000da58e <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   da58e:	b510      	push	{r4, lr}
   da590:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   da592:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da596:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   da59a:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   da59c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   da59e:	d008      	beq.n	da5b2 <_ZN9TCPClient4readEv+0x24>
   da5a0:	6962      	ldr	r2, [r4, #20]
   da5a2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   da5a6:	1c59      	adds	r1, r3, #1
   da5a8:	4413      	add	r3, r2
   da5aa:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   da5ae:	7918      	ldrb	r0, [r3, #4]
   da5b0:	bd10      	pop	{r4, pc}
   da5b2:	6803      	ldr	r3, [r0, #0]
   da5b4:	691b      	ldr	r3, [r3, #16]
   da5b6:	4798      	blx	r3
   da5b8:	2800      	cmp	r0, #0
   da5ba:	d1f1      	bne.n	da5a0 <_ZN9TCPClient4readEv+0x12>
   da5bc:	f04f 30ff 	mov.w	r0, #4294967295
}
   da5c0:	bd10      	pop	{r4, pc}

000da5c2 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   da5c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da5c4:	6943      	ldr	r3, [r0, #20]
   da5c6:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   da5c8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da5cc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   da5d0:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   da5d2:	4605      	mov	r5, r0
   da5d4:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   da5d6:	d106      	bne.n	da5e6 <_ZN9TCPClient4readEPhj+0x24>
   da5d8:	6803      	ldr	r3, [r0, #0]
   da5da:	691b      	ldr	r3, [r3, #16]
   da5dc:	4798      	blx	r3
   da5de:	b910      	cbnz	r0, da5e6 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   da5e0:	f04f 34ff 	mov.w	r4, #4294967295
   da5e4:	e014      	b.n	da610 <_ZN9TCPClient4readEPhj+0x4e>
   da5e6:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   da5e8:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   da5ec:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   da5f0:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   da5f2:	42bc      	cmp	r4, r7
   da5f4:	bf28      	it	cs
   da5f6:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   da5f8:	4419      	add	r1, r3
   da5fa:	4622      	mov	r2, r4
   da5fc:	3104      	adds	r1, #4
   da5fe:	4630      	mov	r0, r6
   da600:	f001 fb3d 	bl	dbc7e <memcpy>
   da604:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   da606:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   da60a:	4423      	add	r3, r4
   da60c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   da610:	4620      	mov	r0, r4
   da612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da614 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   da614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da618:	4698      	mov	r8, r3
    stop();
   da61a:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   da61c:	b093      	sub	sp, #76	; 0x4c
    stop();
   da61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   da620:	460d      	mov	r5, r1
   da622:	4606      	mov	r6, r0
   da624:	4617      	mov	r7, r2
    stop();
   da626:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   da628:	ab12      	add	r3, sp, #72	; 0x48
   da62a:	2400      	movs	r4, #0
   da62c:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   da630:	4622      	mov	r2, r4
   da632:	4621      	mov	r1, r4
   da634:	4628      	mov	r0, r5
   da636:	f7fe f917 	bl	d8868 <netdb_getaddrinfo>
   da63a:	4681      	mov	r9, r0
   da63c:	2800      	cmp	r0, #0
   da63e:	d13d      	bne.n	da6bc <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   da640:	9b00      	ldr	r3, [sp, #0]
   da642:	2b00      	cmp	r3, #0
   da644:	d056      	beq.n	da6f4 <_ZN9TCPClient7connectEPKctm+0xe0>
   da646:	695b      	ldr	r3, [r3, #20]
   da648:	2b00      	cmp	r3, #0
   da64a:	d053      	beq.n	da6f4 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   da64c:	a806      	add	r0, sp, #24
   da64e:	f7ff fba7 	bl	d9da0 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   da652:	9b00      	ldr	r3, [sp, #0]
   da654:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   da656:	7863      	ldrb	r3, [r4, #1]
   da658:	2b02      	cmp	r3, #2
   da65a:	d101      	bne.n	da660 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   da65c:	1d21      	adds	r1, r4, #4
   da65e:	e013      	b.n	da688 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   da660:	2b0a      	cmp	r3, #10
   da662:	d114      	bne.n	da68e <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   da664:	2211      	movs	r2, #17
   da666:	4649      	mov	r1, r9
   da668:	a801      	add	r0, sp, #4
   da66a:	f001 fb13 	bl	dbc94 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   da66e:	68a3      	ldr	r3, [r4, #8]
   da670:	bb33      	cbnz	r3, da6c0 <_ZN9TCPClient7connectEPKctm+0xac>
   da672:	68e3      	ldr	r3, [r4, #12]
   da674:	bb23      	cbnz	r3, da6c0 <_ZN9TCPClient7connectEPKctm+0xac>
   da676:	f64f 70ff 	movw	r0, #65535	; 0xffff
   da67a:	6925      	ldr	r5, [r4, #16]
   da67c:	f7fe fa5c 	bl	d8b38 <inet_htonl>
   da680:	4285      	cmp	r5, r0
   da682:	d11d      	bne.n	da6c0 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   da684:	f104 0114 	add.w	r1, r4, #20
   da688:	a806      	add	r0, sp, #24
   da68a:	f7ff fbcc 	bl	d9e26 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   da68e:	a806      	add	r0, sp, #24
   da690:	f7ff fba6 	bl	d9de0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   da694:	2800      	cmp	r0, #0
   da696:	d02d      	beq.n	da6f4 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   da698:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   da69a:	ad07      	add	r5, sp, #28
   da69c:	f8d3 9020 	ldr.w	r9, [r3, #32]
   da6a0:	4b18      	ldr	r3, [pc, #96]	; (da704 <_ZN9TCPClient7connectEPKctm+0xf0>)
   da6a2:	930c      	str	r3, [sp, #48]	; 0x30
   da6a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da6a6:	ac0d      	add	r4, sp, #52	; 0x34
   da6a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da6aa:	682b      	ldr	r3, [r5, #0]
   da6ac:	7023      	strb	r3, [r4, #0]
   da6ae:	463a      	mov	r2, r7
   da6b0:	4643      	mov	r3, r8
   da6b2:	a90c      	add	r1, sp, #48	; 0x30
   da6b4:	4630      	mov	r0, r6
   da6b6:	47c8      	blx	r9
   da6b8:	4681      	mov	r9, r0
   da6ba:	e01b      	b.n	da6f4 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   da6bc:	46a1      	mov	r9, r4
   da6be:	e019      	b.n	da6f4 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   da6c0:	f104 0308 	add.w	r3, r4, #8
   da6c4:	ad01      	add	r5, sp, #4
   da6c6:	3418      	adds	r4, #24
   da6c8:	6818      	ldr	r0, [r3, #0]
   da6ca:	6859      	ldr	r1, [r3, #4]
   da6cc:	462a      	mov	r2, r5
   da6ce:	c203      	stmia	r2!, {r0, r1}
   da6d0:	3308      	adds	r3, #8
   da6d2:	42a3      	cmp	r3, r4
   da6d4:	4615      	mov	r5, r2
   da6d6:	d1f7      	bne.n	da6c8 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   da6d8:	2306      	movs	r3, #6
            addr = IPAddress(a);
   da6da:	a901      	add	r1, sp, #4
   da6dc:	a80c      	add	r0, sp, #48	; 0x30
   da6de:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   da6e0:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   da6e4:	f7ff fb6a 	bl	d9dbc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   da6e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da6ea:	ac07      	add	r4, sp, #28
   da6ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da6ee:	682b      	ldr	r3, [r5, #0]
   da6f0:	7023      	strb	r3, [r4, #0]
   da6f2:	e7cc      	b.n	da68e <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   da6f4:	9800      	ldr	r0, [sp, #0]
   da6f6:	f7fe f8af 	bl	d8858 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   da6fa:	4648      	mov	r0, r9
   da6fc:	b013      	add	sp, #76	; 0x4c
   da6fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da702:	bf00      	nop
   da704:	000dd524 	.word	0x000dd524

000da708 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   da708:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   da70a:	2300      	movs	r3, #0
   da70c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   da710:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   da712:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   da716:	4770      	bx	lr

000da718 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   da718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da71c:	461e      	mov	r6, r3
    stop();
   da71e:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   da720:	460c      	mov	r4, r1
   da722:	b08a      	sub	sp, #40	; 0x28
    stop();
   da724:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   da726:	4605      	mov	r5, r0
   da728:	4617      	mov	r7, r2
    stop();
   da72a:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   da72c:	7d23      	ldrb	r3, [r4, #20]
   da72e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   da732:	2b04      	cmp	r3, #4
   da734:	bf0c      	ite	eq
   da736:	2002      	moveq	r0, #2
   da738:	200a      	movne	r0, #10
   da73a:	2206      	movs	r2, #6
   da73c:	2101      	movs	r1, #1
   da73e:	f7fe fad3 	bl	d8ce8 <sock_socket>
   da742:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   da746:	696b      	ldr	r3, [r5, #20]
   da748:	681b      	ldr	r3, [r3, #0]
   da74a:	2b00      	cmp	r3, #0
   da74c:	db18      	blt.n	da780 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   da74e:	4628      	mov	r0, r5
   da750:	f7ff ffda 	bl	da708 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   da754:	b1d6      	cbz	r6, da78c <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   da756:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   da758:	a903      	add	r1, sp, #12
   da75a:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   da75c:	9303      	str	r3, [sp, #12]
   da75e:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   da762:	f7fe f939 	bl	d89d8 <if_index_to_name>
   da766:	b958      	cbnz	r0, da780 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   da768:	6968      	ldr	r0, [r5, #20]
   da76a:	2306      	movs	r3, #6
   da76c:	9300      	str	r3, [sp, #0]
   da76e:	f241 020b 	movw	r2, #4107	; 0x100b
   da772:	ab03      	add	r3, sp, #12
   da774:	f640 71ff 	movw	r1, #4095	; 0xfff
   da778:	6800      	ldr	r0, [r0, #0]
   da77a:	f7fe fa8d 	bl	d8c98 <sock_setsockopt>
   da77e:	b128      	cbz	r0, da78c <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   da780:	682b      	ldr	r3, [r5, #0]
   da782:	4628      	mov	r0, r5
   da784:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   da786:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   da788:	4798      	blx	r3
   da78a:	e03b      	b.n	da804 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   da78c:	261c      	movs	r6, #28
   da78e:	4632      	mov	r2, r6
   da790:	2100      	movs	r1, #0
   da792:	a803      	add	r0, sp, #12
   da794:	f001 fa7e 	bl	dbc94 <memset>
    if (ip.version() == 4) {
   da798:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   da79a:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   da79e:	2b04      	cmp	r3, #4
   da7a0:	d10c      	bne.n	da7bc <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   da7a2:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   da7a4:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   da7a6:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   da7aa:	f7fe f9cd 	bl	d8b48 <inet_htons>
   da7ae:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   da7b2:	6860      	ldr	r0, [r4, #4]
   da7b4:	f7fe f9c0 	bl	d8b38 <inet_htonl>
   da7b8:	9004      	str	r0, [sp, #16]
   da7ba:	e013      	b.n	da7e4 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   da7bc:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   da7be:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   da7c0:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   da7c4:	f7fe f9c0 	bl	d8b48 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   da7c8:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   da7ca:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   da7ce:	1d23      	adds	r3, r4, #4
   da7d0:	f104 0714 	add.w	r7, r4, #20
   da7d4:	6818      	ldr	r0, [r3, #0]
   da7d6:	6859      	ldr	r1, [r3, #4]
   da7d8:	4632      	mov	r2, r6
   da7da:	c203      	stmia	r2!, {r0, r1}
   da7dc:	3308      	adds	r3, #8
   da7de:	42bb      	cmp	r3, r7
   da7e0:	4616      	mov	r6, r2
   da7e2:	d1f7      	bne.n	da7d4 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   da7e4:	696b      	ldr	r3, [r5, #20]
   da7e6:	221c      	movs	r2, #28
   da7e8:	a903      	add	r1, sp, #12
   da7ea:	6818      	ldr	r0, [r3, #0]
   da7ec:	f7fe fa64 	bl	d8cb8 <sock_connect>
   da7f0:	2800      	cmp	r0, #0
   da7f2:	d1c5      	bne.n	da780 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   da7f4:	3404      	adds	r4, #4
   da7f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   da7f8:	696d      	ldr	r5, [r5, #20]
   da7fa:	358c      	adds	r5, #140	; 0x8c
   da7fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   da7fe:	6823      	ldr	r3, [r4, #0]
   da800:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   da802:	2401      	movs	r4, #1
}
   da804:	4620      	mov	r0, r4
   da806:	b00a      	add	sp, #40	; 0x28
   da808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da80c <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   da80c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   da80e:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   da810:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   da812:	6818      	ldr	r0, [r3, #0]
   da814:	2800      	cmp	r0, #0
   da816:	db01      	blt.n	da81c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   da818:	f7fe fa46 	bl	d8ca8 <sock_close>
   da81c:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   da81e:	f04f 32ff 	mov.w	r2, #4294967295
   da822:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   da824:	6960      	ldr	r0, [r4, #20]
   da826:	2211      	movs	r2, #17
   da828:	2100      	movs	r1, #0
   da82a:	308c      	adds	r0, #140	; 0x8c
   da82c:	f001 fa32 	bl	dbc94 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   da830:	4620      	mov	r0, r4
}
   da832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   da836:	f7ff bf67 	b.w	da708 <_ZN9TCPClient12flush_bufferEv>
	...

000da83c <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   da83c:	b530      	push	{r4, r5, lr}
   da83e:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   da840:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   da844:	b08b      	sub	sp, #44	; 0x2c
   da846:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   da848:	b11b      	cbz	r3, da852 <_ZN9TCPClient9availableEv+0x16>
   da84a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   da84e:	429a      	cmp	r2, r3
   da850:	d040      	beq.n	da8d4 <_ZN9TCPClient9availableEv+0x98>
   da852:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   da854:	6818      	ldr	r0, [r3, #0]
   da856:	2800      	cmp	r0, #0
   da858:	db3f      	blt.n	da8da <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   da85a:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   da85e:	2d7f      	cmp	r5, #127	; 0x7f
   da860:	d83b      	bhi.n	da8da <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   da862:	1d19      	adds	r1, r3, #4
   da864:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   da868:	2308      	movs	r3, #8
   da86a:	4429      	add	r1, r5
   da86c:	f7fe fa2c 	bl	d8cc8 <sock_recv>
            if (ret > 0) {
   da870:	2800      	cmp	r0, #0
   da872:	dd0c      	ble.n	da88e <_ZN9TCPClient9availableEv+0x52>
   da874:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   da876:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da87a:	b90a      	cbnz	r2, da880 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   da87c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   da880:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   da882:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   da886:	4418      	add	r0, r3
   da888:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   da88c:	e025      	b.n	da8da <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   da88e:	f7fe fb7f 	bl	d8f90 <__errno>
   da892:	6803      	ldr	r3, [r0, #0]
   da894:	2b0b      	cmp	r3, #11
   da896:	d020      	beq.n	da8da <_ZN9TCPClient9availableEv+0x9e>
   da898:	f7fe fb7a 	bl	d8f90 <__errno>
   da89c:	6803      	ldr	r3, [r0, #0]
   da89e:	2b0b      	cmp	r3, #11
   da8a0:	d01b      	beq.n	da8da <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   da8a2:	2320      	movs	r3, #32
   da8a4:	2500      	movs	r5, #0
   da8a6:	9302      	str	r3, [sp, #8]
   da8a8:	9503      	str	r5, [sp, #12]
   da8aa:	f7fe fb71 	bl	d8f90 <__errno>
   da8ae:	6803      	ldr	r3, [r0, #0]
   da8b0:	9301      	str	r3, [sp, #4]
   da8b2:	4b0e      	ldr	r3, [pc, #56]	; (da8ec <_ZN9TCPClient9availableEv+0xb0>)
   da8b4:	9300      	str	r3, [sp, #0]
   da8b6:	aa02      	add	r2, sp, #8
   da8b8:	462b      	mov	r3, r5
   da8ba:	490d      	ldr	r1, [pc, #52]	; (da8f0 <_ZN9TCPClient9availableEv+0xb4>)
   da8bc:	2032      	movs	r0, #50	; 0x32
   da8be:	f7fe fa53 	bl	d8d68 <log_message>
                    sock_close(d_->sock);
   da8c2:	6963      	ldr	r3, [r4, #20]
   da8c4:	6818      	ldr	r0, [r3, #0]
   da8c6:	f7fe f9ef 	bl	d8ca8 <sock_close>
   da8ca:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   da8cc:	f04f 32ff 	mov.w	r2, #4294967295
   da8d0:	601a      	str	r2, [r3, #0]
   da8d2:	e002      	b.n	da8da <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   da8d4:	f7ff ff18 	bl	da708 <_ZN9TCPClient12flush_bufferEv>
   da8d8:	e7bb      	b.n	da852 <_ZN9TCPClient9availableEv+0x16>
   da8da:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   da8dc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   da8e0:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   da8e4:	1a18      	subs	r0, r3, r0
}
   da8e6:	b00b      	add	sp, #44	; 0x2c
   da8e8:	bd30      	pop	{r4, r5, pc}
   da8ea:	bf00      	nop
   da8ec:	000dd68f 	.word	0x000dd68f
   da8f0:	000dd688 	.word	0x000dd688

000da8f4 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   da8f4:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   da8f6:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   da8f8:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   da8fa:	6001      	str	r1, [r0, #0]
   da8fc:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   da900:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   da904:	3088      	adds	r0, #136	; 0x88
   da906:	f7ff fa4b 	bl	d9da0 <_ZN9IPAddressC1Ev>
}
   da90a:	4620      	mov	r0, r4
   da90c:	bd10      	pop	{r4, pc}
	...

000da910 <_ZN9TCPClientC1Ei>:
   da910:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   da914:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   da916:	2300      	movs	r3, #0
   da918:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   da91a:	4a14      	ldr	r2, [pc, #80]	; (da96c <_ZN9TCPClientC1Ei+0x5c>)
   da91c:	6043      	str	r3, [r0, #4]
   da91e:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   da920:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   da922:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   da924:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   da926:	20a0      	movs	r0, #160	; 0xa0
   da928:	460e      	mov	r6, r1
   da92a:	f7f9 fbb6 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   da92e:	4605      	mov	r5, r0
   da930:	b110      	cbz	r0, da938 <_ZN9TCPClientC1Ei+0x28>
   da932:	4631      	mov	r1, r6
   da934:	f7ff ffde 	bl	da8f4 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   da938:	2014      	movs	r0, #20
   da93a:	f7f9 fbae 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   da93e:	4603      	mov	r3, r0
   da940:	b128      	cbz	r0, da94e <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   da942:	2201      	movs	r2, #1
   da944:	6042      	str	r2, [r0, #4]
   da946:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   da948:	4a09      	ldr	r2, [pc, #36]	; (da970 <_ZN9TCPClientC1Ei+0x60>)
   da94a:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   da94c:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   da94e:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   da950:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   da952:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   da954:	b128      	cbz	r0, da962 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   da956:	6843      	ldr	r3, [r0, #4]
   da958:	3b01      	subs	r3, #1
   da95a:	6043      	str	r3, [r0, #4]
   da95c:	b90b      	cbnz	r3, da962 <_ZN9TCPClientC1Ei+0x52>
   da95e:	f7ff fddf 	bl	da520 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   da962:	4620      	mov	r0, r4
   da964:	f7ff fed0 	bl	da708 <_ZN9TCPClient12flush_bufferEv>
}
   da968:	4620      	mov	r0, r4
   da96a:	bd70      	pop	{r4, r5, r6, pc}
   da96c:	000dd644 	.word	0x000dd644
   da970:	000dd628 	.word	0x000dd628

000da974 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   da974:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   da976:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   da97a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   da97c:	f7ff ffc8 	bl	da910 <_ZN9TCPClientC1Ei>
}
   da980:	4620      	mov	r0, r4
   da982:	bd10      	pop	{r4, pc}

000da984 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   da984:	b510      	push	{r4, lr}
   da986:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   da988:	6800      	ldr	r0, [r0, #0]
   da98a:	2800      	cmp	r0, #0
   da98c:	db01      	blt.n	da992 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   da98e:	f7fe f98b 	bl	d8ca8 <sock_close>
    }
}
   da992:	4620      	mov	r0, r4
   da994:	bd10      	pop	{r4, pc}

000da996 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   da996:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   da998:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   da99a:	4620      	mov	r0, r4
   da99c:	f7ff fff2 	bl	da984 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   da9a0:	b124      	cbz	r4, da9ac <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   da9a2:	4620      	mov	r0, r4
   da9a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   da9a8:	f7f9 bb7b 	b.w	d40a2 <_ZdlPv>
   da9ac:	bd10      	pop	{r4, pc}

000da9ae <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   da9ae:	2300      	movs	r3, #0
   da9b0:	461a      	mov	r2, r3
   da9b2:	6840      	ldr	r0, [r0, #4]
   da9b4:	f7fe ba1c 	b.w	d8df0 <network_connect>

000da9b8 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   da9b8:	2200      	movs	r2, #0
   da9ba:	2102      	movs	r1, #2
   da9bc:	6840      	ldr	r0, [r0, #4]
   da9be:	f7fe ba27 	b.w	d8e10 <network_disconnect>

000da9c2 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   da9c2:	2200      	movs	r2, #0
   da9c4:	4611      	mov	r1, r2
   da9c6:	6840      	ldr	r0, [r0, #4]
   da9c8:	f7fe ba1a 	b.w	d8e00 <network_connecting>

000da9cc <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   da9cc:	2200      	movs	r2, #0
   da9ce:	4611      	mov	r1, r2
   da9d0:	6840      	ldr	r0, [r0, #4]
   da9d2:	f7fe ba25 	b.w	d8e20 <network_ready>

000da9d6 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   da9d6:	2300      	movs	r3, #0
   da9d8:	461a      	mov	r2, r3
   da9da:	4619      	mov	r1, r3
   da9dc:	6840      	ldr	r0, [r0, #4]
   da9de:	f7fe ba27 	b.w	d8e30 <network_on>

000da9e2 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   da9e2:	2300      	movs	r3, #0
   da9e4:	461a      	mov	r2, r3
   da9e6:	4619      	mov	r1, r3
   da9e8:	6840      	ldr	r0, [r0, #4]
   da9ea:	f7fe ba29 	b.w	d8e40 <network_off>

000da9ee <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   da9ee:	2200      	movs	r2, #0
   da9f0:	f081 0101 	eor.w	r1, r1, #1
   da9f4:	6840      	ldr	r0, [r0, #4]
   da9f6:	f7fe ba2b 	b.w	d8e50 <network_listen>

000da9fa <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   da9fa:	2200      	movs	r2, #0
   da9fc:	6840      	ldr	r0, [r0, #4]
   da9fe:	f7fe ba37 	b.w	d8e70 <network_set_listen_timeout>

000daa02 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   daa02:	2200      	movs	r2, #0
   daa04:	4611      	mov	r1, r2
   daa06:	6840      	ldr	r0, [r0, #4]
   daa08:	f7fe ba3a 	b.w	d8e80 <network_get_listen_timeout>

000daa0c <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   daa0c:	2200      	movs	r2, #0
   daa0e:	4611      	mov	r1, r2
   daa10:	6840      	ldr	r0, [r0, #4]
   daa12:	f7fe ba25 	b.w	d8e60 <network_listening>

000daa16 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   daa16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   daa1a:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   daa1c:	b095      	sub	sp, #84	; 0x54
   daa1e:	4616      	mov	r6, r2
   daa20:	460d      	mov	r5, r1
   daa22:	4607      	mov	r7, r0
    IPAddress addr;
   daa24:	f7ff f9bc 	bl	d9da0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   daa28:	4621      	mov	r1, r4
   daa2a:	2220      	movs	r2, #32
   daa2c:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   daa2e:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   daa30:	f001 f930 	bl	dbc94 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   daa34:	2340      	movs	r3, #64	; 0x40
   daa36:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   daa38:	4621      	mov	r1, r4
   daa3a:	466b      	mov	r3, sp
   daa3c:	aa0c      	add	r2, sp, #48	; 0x30
   daa3e:	4630      	mov	r0, r6
   daa40:	f7fd ff12 	bl	d8868 <netdb_getaddrinfo>
    if (!r) {
   daa44:	4604      	mov	r4, r0
   daa46:	2800      	cmp	r0, #0
   daa48:	d144      	bne.n	daad4 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   daa4a:	4602      	mov	r2, r0
   daa4c:	2101      	movs	r1, #1
   daa4e:	6868      	ldr	r0, [r5, #4]
   daa50:	f7fe f9e6 	bl	d8e20 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   daa54:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   daa56:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   daa58:	4622      	mov	r2, r4
   daa5a:	6868      	ldr	r0, [r5, #4]
   daa5c:	f7fe f9e0 	bl	d8e20 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   daa60:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   daa62:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   daa64:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   daa66:	2e00      	cmp	r6, #0
   daa68:	d034      	beq.n	daad4 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   daa6a:	2900      	cmp	r1, #0
   daa6c:	d132      	bne.n	daad4 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   daa6e:	6873      	ldr	r3, [r6, #4]
   daa70:	2b02      	cmp	r3, #2
   daa72:	d002      	beq.n	daa7a <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   daa74:	2b0a      	cmp	r3, #10
   daa76:	d009      	beq.n	daa8c <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   daa78:	e02a      	b.n	daad0 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   daa7a:	f1b8 0f00 	cmp.w	r8, #0
   daa7e:	d027      	beq.n	daad0 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   daa80:	6971      	ldr	r1, [r6, #20]
   daa82:	4638      	mov	r0, r7
   daa84:	3104      	adds	r1, #4
   daa86:	f7ff f9ce 	bl	d9e26 <_ZN9IPAddressaSEPKh>
   daa8a:	e020      	b.n	daace <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   daa8c:	f1b9 0f00 	cmp.w	r9, #0
   daa90:	d01e      	beq.n	daad0 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   daa92:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   daa94:	2211      	movs	r2, #17
   daa96:	a801      	add	r0, sp, #4
   daa98:	f001 f8fc 	bl	dbc94 <memset>
                    a.v = 6;
   daa9c:	2306      	movs	r3, #6
   daa9e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   daaa2:	ad01      	add	r5, sp, #4
   daaa4:	f104 0308 	add.w	r3, r4, #8
   daaa8:	3418      	adds	r4, #24
   daaaa:	6818      	ldr	r0, [r3, #0]
   daaac:	6859      	ldr	r1, [r3, #4]
   daaae:	462a      	mov	r2, r5
   daab0:	c203      	stmia	r2!, {r0, r1}
   daab2:	3308      	adds	r3, #8
   daab4:	42a3      	cmp	r3, r4
   daab6:	4615      	mov	r5, r2
   daab8:	d1f7      	bne.n	daaaa <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   daaba:	a901      	add	r1, sp, #4
   daabc:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   daabe:	ad07      	add	r5, sp, #28
   daac0:	f7ff f97c 	bl	d9dbc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   daac4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   daac6:	1d3c      	adds	r4, r7, #4
   daac8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   daaca:	682b      	ldr	r3, [r5, #0]
   daacc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   daace:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   daad0:	69f6      	ldr	r6, [r6, #28]
   daad2:	e7c8      	b.n	daa66 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   daad4:	9800      	ldr	r0, [sp, #0]
   daad6:	f7fd febf 	bl	d8858 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   daada:	4638      	mov	r0, r7
   daadc:	b015      	add	sp, #84	; 0x54
   daade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000daae4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   daae4:	4b02      	ldr	r3, [pc, #8]	; (daaf0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   daae6:	4a03      	ldr	r2, [pc, #12]	; (daaf4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   daae8:	601a      	str	r2, [r3, #0]
   daaea:	2200      	movs	r2, #0
   daaec:	605a      	str	r2, [r3, #4]
   daaee:	4770      	bx	lr
   daaf0:	2003e2fc 	.word	0x2003e2fc
   daaf4:	000dd6a8 	.word	0x000dd6a8

000daaf8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   daaf8:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   daafa:	4e18      	ldr	r6, [pc, #96]	; (dab5c <pinAvailable+0x64>)
   daafc:	6831      	ldr	r1, [r6, #0]
   daafe:	f011 0501 	ands.w	r5, r1, #1
   dab02:	4604      	mov	r4, r0
   dab04:	d10a      	bne.n	dab1c <pinAvailable+0x24>
   dab06:	4630      	mov	r0, r6
   dab08:	f7f9 facf 	bl	d40aa <__cxa_guard_acquire>
   dab0c:	b130      	cbz	r0, dab1c <pinAvailable+0x24>
   dab0e:	4629      	mov	r1, r5
   dab10:	4813      	ldr	r0, [pc, #76]	; (dab60 <pinAvailable+0x68>)
   dab12:	f7fe fa89 	bl	d9028 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   dab16:	4630      	mov	r0, r6
   dab18:	f7f9 facc 	bl	d40b4 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   dab1c:	4810      	ldr	r0, [pc, #64]	; (dab60 <pinAvailable+0x68>)
   dab1e:	f7fe fbb8 	bl	d9292 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   dab22:	b128      	cbz	r0, dab30 <pinAvailable+0x38>
   dab24:	f1a4 030b 	sub.w	r3, r4, #11
   dab28:	2b02      	cmp	r3, #2
   dab2a:	d801      	bhi.n	dab30 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   dab2c:	2000      	movs	r0, #0
   dab2e:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   dab30:	f000 f89e 	bl	dac70 <_Z19__fetch_global_Wirev>
   dab34:	f7ff fba1 	bl	da27a <_ZN7TwoWire9isEnabledEv>
   dab38:	b108      	cbz	r0, dab3e <pinAvailable+0x46>
   dab3a:	2c01      	cmp	r4, #1
   dab3c:	d9f6      	bls.n	dab2c <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   dab3e:	f7ff faff 	bl	da140 <_Z22__fetch_global_Serial1v>
   dab42:	f7ff faf9 	bl	da138 <_ZN11USARTSerial9isEnabledEv>
   dab46:	b118      	cbz	r0, dab50 <pinAvailable+0x58>
   dab48:	f1a4 0309 	sub.w	r3, r4, #9
   dab4c:	2b01      	cmp	r3, #1
   dab4e:	d9ed      	bls.n	dab2c <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   dab50:	2c23      	cmp	r4, #35	; 0x23
   dab52:	bf8c      	ite	hi
   dab54:	2000      	movhi	r0, #0
   dab56:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   dab58:	bd70      	pop	{r4, r5, r6, pc}
   dab5a:	bf00      	nop
   dab5c:	2003d8f8 	.word	0x2003d8f8
   dab60:	2003d8fc 	.word	0x2003d8fc

000dab64 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dab64:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   dab66:	b538      	push	{r3, r4, r5, lr}
   dab68:	4604      	mov	r4, r0
   dab6a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dab6c:	d80a      	bhi.n	dab84 <pinMode+0x20>
   dab6e:	29ff      	cmp	r1, #255	; 0xff
   dab70:	d008      	beq.n	dab84 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   dab72:	f7ff ffc1 	bl	daaf8 <pinAvailable>
   dab76:	b128      	cbz	r0, dab84 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   dab78:	4629      	mov	r1, r5
   dab7a:	4620      	mov	r0, r4
}
   dab7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   dab80:	f7fd be82 	b.w	d8888 <HAL_Pin_Mode>
   dab84:	bd38      	pop	{r3, r4, r5, pc}

000dab86 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   dab86:	b538      	push	{r3, r4, r5, lr}
   dab88:	4604      	mov	r4, r0
   dab8a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   dab8c:	f7fd fe84 	bl	d8898 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   dab90:	28ff      	cmp	r0, #255	; 0xff
   dab92:	d010      	beq.n	dabb6 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   dab94:	2806      	cmp	r0, #6
   dab96:	d804      	bhi.n	daba2 <digitalWrite+0x1c>
   dab98:	234d      	movs	r3, #77	; 0x4d
   dab9a:	fa23 f000 	lsr.w	r0, r3, r0
   dab9e:	07c3      	lsls	r3, r0, #31
   daba0:	d409      	bmi.n	dabb6 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   daba2:	4620      	mov	r0, r4
   daba4:	f7ff ffa8 	bl	daaf8 <pinAvailable>
   daba8:	b128      	cbz	r0, dabb6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   dabaa:	4629      	mov	r1, r5
   dabac:	4620      	mov	r0, r4
}
   dabae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   dabb2:	f7fd be79 	b.w	d88a8 <HAL_GPIO_Write>
   dabb6:	bd38      	pop	{r3, r4, r5, pc}

000dabb8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   dabb8:	b510      	push	{r4, lr}
   dabba:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   dabbc:	f7fd fe6c 	bl	d8898 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   dabc0:	3804      	subs	r0, #4
   dabc2:	b2c0      	uxtb	r0, r0
   dabc4:	2801      	cmp	r0, #1
   dabc6:	d908      	bls.n	dabda <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   dabc8:	4620      	mov	r0, r4
   dabca:	f7ff ff95 	bl	daaf8 <pinAvailable>
   dabce:	b120      	cbz	r0, dabda <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   dabd0:	4620      	mov	r0, r4
}
   dabd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   dabd6:	f7fd be6f 	b.w	d88b8 <HAL_GPIO_Read>
}
   dabda:	2000      	movs	r0, #0
   dabdc:	bd10      	pop	{r4, pc}
	...

000dabe0 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   dabe0:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   dabe2:	4c07      	ldr	r4, [pc, #28]	; (dac00 <_Z21__fetch_global_EEPROMv+0x20>)
   dabe4:	6823      	ldr	r3, [r4, #0]
   dabe6:	07db      	lsls	r3, r3, #31
   dabe8:	d408      	bmi.n	dabfc <_Z21__fetch_global_EEPROMv+0x1c>
   dabea:	4620      	mov	r0, r4
   dabec:	f7f9 fa5d 	bl	d40aa <__cxa_guard_acquire>
   dabf0:	b120      	cbz	r0, dabfc <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   dabf2:	f7fd ff19 	bl	d8a28 <HAL_EEPROM_Init>
   dabf6:	4620      	mov	r0, r4
   dabf8:	f7f9 fa5c 	bl	d40b4 <__cxa_guard_release>
	return eeprom;
}
   dabfc:	4801      	ldr	r0, [pc, #4]	; (dac04 <_Z21__fetch_global_EEPROMv+0x24>)
   dabfe:	bd10      	pop	{r4, pc}
   dac00:	2003e308 	.word	0x2003e308
   dac04:	2003e30c 	.word	0x2003e30c

000dac08 <_Z17acquireWireBufferv>:
   dac08:	b570      	push	{r4, r5, r6, lr}
   dac0a:	4604      	mov	r4, r0
   dac0c:	2514      	movs	r5, #20
   dac0e:	462a      	mov	r2, r5
   dac10:	4e09      	ldr	r6, [pc, #36]	; (dac38 <_Z17acquireWireBufferv+0x30>)
   dac12:	2100      	movs	r1, #0
   dac14:	f001 f83e 	bl	dbc94 <memset>
   dac18:	8025      	strh	r5, [r4, #0]
   dac1a:	2520      	movs	r5, #32
   dac1c:	4631      	mov	r1, r6
   dac1e:	60a5      	str	r5, [r4, #8]
   dac20:	6125      	str	r5, [r4, #16]
   dac22:	4628      	mov	r0, r5
   dac24:	f000 f880 	bl	dad28 <_ZnajRKSt9nothrow_t>
   dac28:	4631      	mov	r1, r6
   dac2a:	6060      	str	r0, [r4, #4]
   dac2c:	4628      	mov	r0, r5
   dac2e:	f000 f87b 	bl	dad28 <_ZnajRKSt9nothrow_t>
   dac32:	60e0      	str	r0, [r4, #12]
   dac34:	4620      	mov	r0, r4
   dac36:	bd70      	pop	{r4, r5, r6, pc}
   dac38:	000dd6d4 	.word	0x000dd6d4

000dac3c <_Z18acquireWire1Bufferv>:
	return defaultWireConfig();
}

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
   dac3c:	b570      	push	{r4, r5, r6, lr}
   dac3e:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   dac40:	2514      	movs	r5, #20
   dac42:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   dac44:	4e09      	ldr	r6, [pc, #36]	; (dac6c <_Z18acquireWire1Bufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   dac46:	2100      	movs	r1, #0
   dac48:	f001 f824 	bl	dbc94 <memset>
   dac4c:	8025      	strh	r5, [r4, #0]
   dac4e:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   dac50:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   dac52:	60a5      	str	r5, [r4, #8]
   dac54:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   dac56:	4628      	mov	r0, r5
   dac58:	f000 f866 	bl	dad28 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   dac5c:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   dac5e:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   dac60:	4628      	mov	r0, r5
   dac62:	f000 f861 	bl	dad28 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   dac66:	60e0      	str	r0, [r4, #12]

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
	return defaultWireConfig();
}
   dac68:	4620      	mov	r0, r4
   dac6a:	bd70      	pop	{r4, r5, r6, pc}
   dac6c:	000dd6d4 	.word	0x000dd6d4

000dac70 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   dac70:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   dac72:	4d0e      	ldr	r5, [pc, #56]	; (dacac <_Z19__fetch_global_Wirev+0x3c>)
   dac74:	6829      	ldr	r1, [r5, #0]
   dac76:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   dac7a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   dac7c:	d113      	bne.n	daca6 <_Z19__fetch_global_Wirev+0x36>
   dac7e:	4628      	mov	r0, r5
   dac80:	f7f9 fa13 	bl	d40aa <__cxa_guard_acquire>
   dac84:	b178      	cbz	r0, daca6 <_Z19__fetch_global_Wirev+0x36>
   dac86:	a801      	add	r0, sp, #4
   dac88:	f7ff ffbe 	bl	dac08 <_Z17acquireWireBufferv>
   dac8c:	aa01      	add	r2, sp, #4
   dac8e:	4621      	mov	r1, r4
   dac90:	4807      	ldr	r0, [pc, #28]	; (dacb0 <_Z19__fetch_global_Wirev+0x40>)
   dac92:	f7ff faa7 	bl	da1e4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   dac96:	4628      	mov	r0, r5
   dac98:	f7f9 fa0c 	bl	d40b4 <__cxa_guard_release>
   dac9c:	4a05      	ldr	r2, [pc, #20]	; (dacb4 <_Z19__fetch_global_Wirev+0x44>)
   dac9e:	4906      	ldr	r1, [pc, #24]	; (dacb8 <_Z19__fetch_global_Wirev+0x48>)
   daca0:	4803      	ldr	r0, [pc, #12]	; (dacb0 <_Z19__fetch_global_Wirev+0x40>)
   daca2:	f000 f831 	bl	dad08 <__aeabi_atexit>
	return wire;
}
   daca6:	4802      	ldr	r0, [pc, #8]	; (dacb0 <_Z19__fetch_global_Wirev+0x40>)
   daca8:	b007      	add	sp, #28
   dacaa:	bd30      	pop	{r4, r5, pc}
   dacac:	2003e310 	.word	0x2003e310
   dacb0:	2003e328 	.word	0x2003e328
   dacb4:	2003d7f8 	.word	0x2003d7f8
   dacb8:	000da18d 	.word	0x000da18d

000dacbc <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   dacbc:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   dacbe:	4c0e      	ldr	r4, [pc, #56]	; (dacf8 <_Z20__fetch_global_Wire1v+0x3c>)
   dacc0:	6823      	ldr	r3, [r4, #0]
   dacc2:	07db      	lsls	r3, r3, #31
	return wire;
}

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   dacc4:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   dacc6:	d413      	bmi.n	dacf0 <_Z20__fetch_global_Wire1v+0x34>
   dacc8:	4620      	mov	r0, r4
   dacca:	f7f9 f9ee 	bl	d40aa <__cxa_guard_acquire>
   dacce:	b178      	cbz	r0, dacf0 <_Z20__fetch_global_Wire1v+0x34>
   dacd0:	a801      	add	r0, sp, #4
   dacd2:	f7ff ffb3 	bl	dac3c <_Z18acquireWire1Bufferv>
   dacd6:	aa01      	add	r2, sp, #4
   dacd8:	2101      	movs	r1, #1
   dacda:	4808      	ldr	r0, [pc, #32]	; (dacfc <_Z20__fetch_global_Wire1v+0x40>)
   dacdc:	f7ff fa82 	bl	da1e4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   dace0:	4620      	mov	r0, r4
   dace2:	f7f9 f9e7 	bl	d40b4 <__cxa_guard_release>
   dace6:	4a06      	ldr	r2, [pc, #24]	; (dad00 <_Z20__fetch_global_Wire1v+0x44>)
   dace8:	4906      	ldr	r1, [pc, #24]	; (dad04 <_Z20__fetch_global_Wire1v+0x48>)
   dacea:	4804      	ldr	r0, [pc, #16]	; (dacfc <_Z20__fetch_global_Wire1v+0x40>)
   dacec:	f000 f80c 	bl	dad08 <__aeabi_atexit>
	return wire;
}
   dacf0:	4802      	ldr	r0, [pc, #8]	; (dacfc <_Z20__fetch_global_Wire1v+0x40>)
   dacf2:	b006      	add	sp, #24
   dacf4:	bd10      	pop	{r4, pc}
   dacf6:	bf00      	nop
   dacf8:	2003e33c 	.word	0x2003e33c
   dacfc:	2003e314 	.word	0x2003e314
   dad00:	2003d7f8 	.word	0x2003d7f8
   dad04:	000da18d 	.word	0x000da18d

000dad08 <__aeabi_atexit>:
   dad08:	460b      	mov	r3, r1
   dad0a:	4601      	mov	r1, r0
   dad0c:	4618      	mov	r0, r3
   dad0e:	f000 bea1 	b.w	dba54 <__cxa_atexit>
	...

000dad14 <_ZSt15get_new_handlerv>:
   dad14:	4b02      	ldr	r3, [pc, #8]	; (dad20 <_ZSt15get_new_handlerv+0xc>)
   dad16:	6818      	ldr	r0, [r3, #0]
   dad18:	f3bf 8f5f 	dmb	sy
   dad1c:	4770      	bx	lr
   dad1e:	bf00      	nop
   dad20:	2003e340 	.word	0x2003e340

000dad24 <_ZdlPvj>:
   dad24:	f7f9 b9bd 	b.w	d40a2 <_ZdlPv>

000dad28 <_ZnajRKSt9nothrow_t>:
   dad28:	f000 b800 	b.w	dad2c <_ZnwjRKSt9nothrow_t>

000dad2c <_ZnwjRKSt9nothrow_t>:
   dad2c:	b510      	push	{r4, lr}
   dad2e:	2800      	cmp	r0, #0
   dad30:	bf14      	ite	ne
   dad32:	4604      	movne	r4, r0
   dad34:	2401      	moveq	r4, #1
   dad36:	4620      	mov	r0, r4
   dad38:	f7fe f8da 	bl	d8ef0 <malloc>
   dad3c:	b920      	cbnz	r0, dad48 <_ZnwjRKSt9nothrow_t+0x1c>
   dad3e:	f7ff ffe9 	bl	dad14 <_ZSt15get_new_handlerv>
   dad42:	b108      	cbz	r0, dad48 <_ZnwjRKSt9nothrow_t+0x1c>
   dad44:	4780      	blx	r0
   dad46:	e7f6      	b.n	dad36 <_ZnwjRKSt9nothrow_t+0xa>
   dad48:	bd10      	pop	{r4, pc}
	...

000dad4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   dad4c:	4b18      	ldr	r3, [pc, #96]	; (dadb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   dad4e:	681a      	ldr	r2, [r3, #0]
   dad50:	07d1      	lsls	r1, r2, #31
   dad52:	bf5c      	itt	pl
   dad54:	2201      	movpl	r2, #1
   dad56:	601a      	strpl	r2, [r3, #0]
   dad58:	4b16      	ldr	r3, [pc, #88]	; (dadb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   dad5a:	681a      	ldr	r2, [r3, #0]
   dad5c:	07d2      	lsls	r2, r2, #31
   dad5e:	bf5c      	itt	pl
   dad60:	2201      	movpl	r2, #1
   dad62:	601a      	strpl	r2, [r3, #0]
   dad64:	4b14      	ldr	r3, [pc, #80]	; (dadb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   dad66:	681a      	ldr	r2, [r3, #0]
   dad68:	07d0      	lsls	r0, r2, #31
   dad6a:	bf5c      	itt	pl
   dad6c:	2201      	movpl	r2, #1
   dad6e:	601a      	strpl	r2, [r3, #0]
   dad70:	4b12      	ldr	r3, [pc, #72]	; (dadbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   dad72:	681a      	ldr	r2, [r3, #0]
   dad74:	07d1      	lsls	r1, r2, #31
   dad76:	bf5c      	itt	pl
   dad78:	2201      	movpl	r2, #1
   dad7a:	601a      	strpl	r2, [r3, #0]
   dad7c:	4b10      	ldr	r3, [pc, #64]	; (dadc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   dad7e:	681a      	ldr	r2, [r3, #0]
   dad80:	07d2      	lsls	r2, r2, #31
   dad82:	bf5c      	itt	pl
   dad84:	2201      	movpl	r2, #1
   dad86:	601a      	strpl	r2, [r3, #0]
   dad88:	4b0e      	ldr	r3, [pc, #56]	; (dadc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   dad8a:	681a      	ldr	r2, [r3, #0]
   dad8c:	07d0      	lsls	r0, r2, #31
   dad8e:	bf5c      	itt	pl
   dad90:	2201      	movpl	r2, #1
   dad92:	601a      	strpl	r2, [r3, #0]
   dad94:	4b0c      	ldr	r3, [pc, #48]	; (dadc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   dad96:	681a      	ldr	r2, [r3, #0]
   dad98:	07d1      	lsls	r1, r2, #31
   dad9a:	bf5c      	itt	pl
   dad9c:	2201      	movpl	r2, #1
   dad9e:	601a      	strpl	r2, [r3, #0]
   dada0:	4b0a      	ldr	r3, [pc, #40]	; (dadcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   dada2:	681a      	ldr	r2, [r3, #0]
   dada4:	07d2      	lsls	r2, r2, #31
   dada6:	bf5c      	itt	pl
   dada8:	2201      	movpl	r2, #1
   dadaa:	601a      	strpl	r2, [r3, #0]
   dadac:	4770      	bx	lr
   dadae:	bf00      	nop
   dadb0:	2003e360 	.word	0x2003e360
   dadb4:	2003e35c 	.word	0x2003e35c
   dadb8:	2003e358 	.word	0x2003e358
   dadbc:	2003e354 	.word	0x2003e354
   dadc0:	2003e350 	.word	0x2003e350
   dadc4:	2003e34c 	.word	0x2003e34c
   dadc8:	2003e348 	.word	0x2003e348
   dadcc:	2003e344 	.word	0x2003e344

000dadd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   dadd0:	4b24      	ldr	r3, [pc, #144]	; (dae64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   dadd2:	681a      	ldr	r2, [r3, #0]
   dadd4:	07d0      	lsls	r0, r2, #31
   dadd6:	bf5c      	itt	pl
   dadd8:	2201      	movpl	r2, #1
   dadda:	601a      	strpl	r2, [r3, #0]
   daddc:	4b22      	ldr	r3, [pc, #136]	; (dae68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   dadde:	681a      	ldr	r2, [r3, #0]
   dade0:	07d1      	lsls	r1, r2, #31
   dade2:	bf5c      	itt	pl
   dade4:	2201      	movpl	r2, #1
   dade6:	601a      	strpl	r2, [r3, #0]
   dade8:	4b20      	ldr	r3, [pc, #128]	; (dae6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   dadea:	681a      	ldr	r2, [r3, #0]
   dadec:	07d2      	lsls	r2, r2, #31
   dadee:	bf5c      	itt	pl
   dadf0:	2201      	movpl	r2, #1
   dadf2:	601a      	strpl	r2, [r3, #0]
   dadf4:	4b1e      	ldr	r3, [pc, #120]	; (dae70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   dadf6:	681a      	ldr	r2, [r3, #0]
   dadf8:	07d0      	lsls	r0, r2, #31
   dadfa:	bf5c      	itt	pl
   dadfc:	2201      	movpl	r2, #1
   dadfe:	601a      	strpl	r2, [r3, #0]
   dae00:	4b1c      	ldr	r3, [pc, #112]	; (dae74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   dae02:	681a      	ldr	r2, [r3, #0]
   dae04:	07d1      	lsls	r1, r2, #31
   dae06:	bf5c      	itt	pl
   dae08:	2201      	movpl	r2, #1
   dae0a:	601a      	strpl	r2, [r3, #0]
   dae0c:	4b1a      	ldr	r3, [pc, #104]	; (dae78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   dae0e:	681a      	ldr	r2, [r3, #0]
   dae10:	07d2      	lsls	r2, r2, #31
   dae12:	bf5c      	itt	pl
   dae14:	2201      	movpl	r2, #1
   dae16:	601a      	strpl	r2, [r3, #0]
   dae18:	4b18      	ldr	r3, [pc, #96]	; (dae7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   dae1a:	681a      	ldr	r2, [r3, #0]
   dae1c:	07d0      	lsls	r0, r2, #31
   dae1e:	bf5c      	itt	pl
   dae20:	2201      	movpl	r2, #1
   dae22:	601a      	strpl	r2, [r3, #0]
   dae24:	4b16      	ldr	r3, [pc, #88]	; (dae80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   dae26:	681a      	ldr	r2, [r3, #0]
   dae28:	07d1      	lsls	r1, r2, #31
   dae2a:	bf5c      	itt	pl
   dae2c:	2201      	movpl	r2, #1
   dae2e:	601a      	strpl	r2, [r3, #0]
   dae30:	4b14      	ldr	r3, [pc, #80]	; (dae84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   dae32:	681a      	ldr	r2, [r3, #0]
   dae34:	07d2      	lsls	r2, r2, #31
   dae36:	bf5c      	itt	pl
   dae38:	2201      	movpl	r2, #1
   dae3a:	601a      	strpl	r2, [r3, #0]
   dae3c:	4b12      	ldr	r3, [pc, #72]	; (dae88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   dae3e:	681a      	ldr	r2, [r3, #0]
   dae40:	07d0      	lsls	r0, r2, #31
   dae42:	bf5c      	itt	pl
   dae44:	2201      	movpl	r2, #1
   dae46:	601a      	strpl	r2, [r3, #0]
   dae48:	4b10      	ldr	r3, [pc, #64]	; (dae8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   dae4a:	681a      	ldr	r2, [r3, #0]
   dae4c:	07d1      	lsls	r1, r2, #31
   dae4e:	bf5c      	itt	pl
   dae50:	2201      	movpl	r2, #1
   dae52:	601a      	strpl	r2, [r3, #0]
   dae54:	4b0e      	ldr	r3, [pc, #56]	; (dae90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   dae56:	681a      	ldr	r2, [r3, #0]
   dae58:	07d2      	lsls	r2, r2, #31
   dae5a:	bf5c      	itt	pl
   dae5c:	2201      	movpl	r2, #1
   dae5e:	601a      	strpl	r2, [r3, #0]
   dae60:	4770      	bx	lr
   dae62:	bf00      	nop
   dae64:	2003e390 	.word	0x2003e390
   dae68:	2003e38c 	.word	0x2003e38c
   dae6c:	2003e388 	.word	0x2003e388
   dae70:	2003e384 	.word	0x2003e384
   dae74:	2003e380 	.word	0x2003e380
   dae78:	2003e37c 	.word	0x2003e37c
   dae7c:	2003e378 	.word	0x2003e378
   dae80:	2003e374 	.word	0x2003e374
   dae84:	2003e370 	.word	0x2003e370
   dae88:	2003e36c 	.word	0x2003e36c
   dae8c:	2003e368 	.word	0x2003e368
   dae90:	2003e364 	.word	0x2003e364

000dae94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   dae94:	4b24      	ldr	r3, [pc, #144]	; (daf28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   dae96:	681a      	ldr	r2, [r3, #0]
   dae98:	07d0      	lsls	r0, r2, #31
   dae9a:	bf5c      	itt	pl
   dae9c:	2201      	movpl	r2, #1
   dae9e:	601a      	strpl	r2, [r3, #0]
   daea0:	4b22      	ldr	r3, [pc, #136]	; (daf2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   daea2:	681a      	ldr	r2, [r3, #0]
   daea4:	07d1      	lsls	r1, r2, #31
   daea6:	bf5c      	itt	pl
   daea8:	2201      	movpl	r2, #1
   daeaa:	601a      	strpl	r2, [r3, #0]
   daeac:	4b20      	ldr	r3, [pc, #128]	; (daf30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   daeae:	681a      	ldr	r2, [r3, #0]
   daeb0:	07d2      	lsls	r2, r2, #31
   daeb2:	bf5c      	itt	pl
   daeb4:	2201      	movpl	r2, #1
   daeb6:	601a      	strpl	r2, [r3, #0]
   daeb8:	4b1e      	ldr	r3, [pc, #120]	; (daf34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   daeba:	681a      	ldr	r2, [r3, #0]
   daebc:	07d0      	lsls	r0, r2, #31
   daebe:	bf5c      	itt	pl
   daec0:	2201      	movpl	r2, #1
   daec2:	601a      	strpl	r2, [r3, #0]
   daec4:	4b1c      	ldr	r3, [pc, #112]	; (daf38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   daec6:	681a      	ldr	r2, [r3, #0]
   daec8:	07d1      	lsls	r1, r2, #31
   daeca:	bf5c      	itt	pl
   daecc:	2201      	movpl	r2, #1
   daece:	601a      	strpl	r2, [r3, #0]
   daed0:	4b1a      	ldr	r3, [pc, #104]	; (daf3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   daed2:	681a      	ldr	r2, [r3, #0]
   daed4:	07d2      	lsls	r2, r2, #31
   daed6:	bf5c      	itt	pl
   daed8:	2201      	movpl	r2, #1
   daeda:	601a      	strpl	r2, [r3, #0]
   daedc:	4b18      	ldr	r3, [pc, #96]	; (daf40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   daede:	681a      	ldr	r2, [r3, #0]
   daee0:	07d0      	lsls	r0, r2, #31
   daee2:	bf5c      	itt	pl
   daee4:	2201      	movpl	r2, #1
   daee6:	601a      	strpl	r2, [r3, #0]
   daee8:	4b16      	ldr	r3, [pc, #88]	; (daf44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   daeea:	681a      	ldr	r2, [r3, #0]
   daeec:	07d1      	lsls	r1, r2, #31
   daeee:	bf5c      	itt	pl
   daef0:	2201      	movpl	r2, #1
   daef2:	601a      	strpl	r2, [r3, #0]
   daef4:	4b14      	ldr	r3, [pc, #80]	; (daf48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   daef6:	681a      	ldr	r2, [r3, #0]
   daef8:	07d2      	lsls	r2, r2, #31
   daefa:	bf5c      	itt	pl
   daefc:	2201      	movpl	r2, #1
   daefe:	601a      	strpl	r2, [r3, #0]
   daf00:	4b12      	ldr	r3, [pc, #72]	; (daf4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   daf02:	681a      	ldr	r2, [r3, #0]
   daf04:	07d0      	lsls	r0, r2, #31
   daf06:	bf5c      	itt	pl
   daf08:	2201      	movpl	r2, #1
   daf0a:	601a      	strpl	r2, [r3, #0]
   daf0c:	4b10      	ldr	r3, [pc, #64]	; (daf50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   daf0e:	681a      	ldr	r2, [r3, #0]
   daf10:	07d1      	lsls	r1, r2, #31
   daf12:	bf5c      	itt	pl
   daf14:	2201      	movpl	r2, #1
   daf16:	601a      	strpl	r2, [r3, #0]
   daf18:	4b0e      	ldr	r3, [pc, #56]	; (daf54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   daf1a:	681a      	ldr	r2, [r3, #0]
   daf1c:	07d2      	lsls	r2, r2, #31
   daf1e:	bf5c      	itt	pl
   daf20:	2201      	movpl	r2, #1
   daf22:	601a      	strpl	r2, [r3, #0]
   daf24:	4770      	bx	lr
   daf26:	bf00      	nop
   daf28:	2003e3c0 	.word	0x2003e3c0
   daf2c:	2003e3bc 	.word	0x2003e3bc
   daf30:	2003e3b8 	.word	0x2003e3b8
   daf34:	2003e3b4 	.word	0x2003e3b4
   daf38:	2003e3b0 	.word	0x2003e3b0
   daf3c:	2003e3ac 	.word	0x2003e3ac
   daf40:	2003e3a8 	.word	0x2003e3a8
   daf44:	2003e3a4 	.word	0x2003e3a4
   daf48:	2003e3a0 	.word	0x2003e3a0
   daf4c:	2003e39c 	.word	0x2003e39c
   daf50:	2003e398 	.word	0x2003e398
   daf54:	2003e394 	.word	0x2003e394

000daf58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   daf58:	4b18      	ldr	r3, [pc, #96]	; (dafbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   daf5a:	681a      	ldr	r2, [r3, #0]
   daf5c:	07d1      	lsls	r1, r2, #31
   daf5e:	bf5c      	itt	pl
   daf60:	2201      	movpl	r2, #1
   daf62:	601a      	strpl	r2, [r3, #0]
   daf64:	4b16      	ldr	r3, [pc, #88]	; (dafc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   daf66:	681a      	ldr	r2, [r3, #0]
   daf68:	07d2      	lsls	r2, r2, #31
   daf6a:	bf5c      	itt	pl
   daf6c:	2201      	movpl	r2, #1
   daf6e:	601a      	strpl	r2, [r3, #0]
   daf70:	4b14      	ldr	r3, [pc, #80]	; (dafc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   daf72:	681a      	ldr	r2, [r3, #0]
   daf74:	07d0      	lsls	r0, r2, #31
   daf76:	bf5c      	itt	pl
   daf78:	2201      	movpl	r2, #1
   daf7a:	601a      	strpl	r2, [r3, #0]
   daf7c:	4b12      	ldr	r3, [pc, #72]	; (dafc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   daf7e:	681a      	ldr	r2, [r3, #0]
   daf80:	07d1      	lsls	r1, r2, #31
   daf82:	bf5c      	itt	pl
   daf84:	2201      	movpl	r2, #1
   daf86:	601a      	strpl	r2, [r3, #0]
   daf88:	4b10      	ldr	r3, [pc, #64]	; (dafcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   daf8a:	681a      	ldr	r2, [r3, #0]
   daf8c:	07d2      	lsls	r2, r2, #31
   daf8e:	bf5c      	itt	pl
   daf90:	2201      	movpl	r2, #1
   daf92:	601a      	strpl	r2, [r3, #0]
   daf94:	4b0e      	ldr	r3, [pc, #56]	; (dafd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   daf96:	681a      	ldr	r2, [r3, #0]
   daf98:	07d0      	lsls	r0, r2, #31
   daf9a:	bf5c      	itt	pl
   daf9c:	2201      	movpl	r2, #1
   daf9e:	601a      	strpl	r2, [r3, #0]
   dafa0:	4b0c      	ldr	r3, [pc, #48]	; (dafd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   dafa2:	681a      	ldr	r2, [r3, #0]
   dafa4:	07d1      	lsls	r1, r2, #31
   dafa6:	bf5c      	itt	pl
   dafa8:	2201      	movpl	r2, #1
   dafaa:	601a      	strpl	r2, [r3, #0]
   dafac:	4b0a      	ldr	r3, [pc, #40]	; (dafd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   dafae:	681a      	ldr	r2, [r3, #0]
   dafb0:	07d2      	lsls	r2, r2, #31
   dafb2:	bf5c      	itt	pl
   dafb4:	2201      	movpl	r2, #1
   dafb6:	601a      	strpl	r2, [r3, #0]
   dafb8:	4770      	bx	lr
   dafba:	bf00      	nop
   dafbc:	2003e3e0 	.word	0x2003e3e0
   dafc0:	2003e3dc 	.word	0x2003e3dc
   dafc4:	2003e3d8 	.word	0x2003e3d8
   dafc8:	2003e3d4 	.word	0x2003e3d4
   dafcc:	2003e3d0 	.word	0x2003e3d0
   dafd0:	2003e3cc 	.word	0x2003e3cc
   dafd4:	2003e3c8 	.word	0x2003e3c8
   dafd8:	2003e3c4 	.word	0x2003e3c4

000dafdc <__aeabi_drsub>:
   dafdc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   dafe0:	e002      	b.n	dafe8 <__adddf3>
   dafe2:	bf00      	nop

000dafe4 <__aeabi_dsub>:
   dafe4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000dafe8 <__adddf3>:
   dafe8:	b530      	push	{r4, r5, lr}
   dafea:	ea4f 0441 	mov.w	r4, r1, lsl #1
   dafee:	ea4f 0543 	mov.w	r5, r3, lsl #1
   daff2:	ea94 0f05 	teq	r4, r5
   daff6:	bf08      	it	eq
   daff8:	ea90 0f02 	teqeq	r0, r2
   daffc:	bf1f      	itttt	ne
   daffe:	ea54 0c00 	orrsne.w	ip, r4, r0
   db002:	ea55 0c02 	orrsne.w	ip, r5, r2
   db006:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   db00a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   db00e:	f000 80e2 	beq.w	db1d6 <__adddf3+0x1ee>
   db012:	ea4f 5454 	mov.w	r4, r4, lsr #21
   db016:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   db01a:	bfb8      	it	lt
   db01c:	426d      	neglt	r5, r5
   db01e:	dd0c      	ble.n	db03a <__adddf3+0x52>
   db020:	442c      	add	r4, r5
   db022:	ea80 0202 	eor.w	r2, r0, r2
   db026:	ea81 0303 	eor.w	r3, r1, r3
   db02a:	ea82 0000 	eor.w	r0, r2, r0
   db02e:	ea83 0101 	eor.w	r1, r3, r1
   db032:	ea80 0202 	eor.w	r2, r0, r2
   db036:	ea81 0303 	eor.w	r3, r1, r3
   db03a:	2d36      	cmp	r5, #54	; 0x36
   db03c:	bf88      	it	hi
   db03e:	bd30      	pophi	{r4, r5, pc}
   db040:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   db044:	ea4f 3101 	mov.w	r1, r1, lsl #12
   db048:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   db04c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   db050:	d002      	beq.n	db058 <__adddf3+0x70>
   db052:	4240      	negs	r0, r0
   db054:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db058:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   db05c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   db060:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   db064:	d002      	beq.n	db06c <__adddf3+0x84>
   db066:	4252      	negs	r2, r2
   db068:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   db06c:	ea94 0f05 	teq	r4, r5
   db070:	f000 80a7 	beq.w	db1c2 <__adddf3+0x1da>
   db074:	f1a4 0401 	sub.w	r4, r4, #1
   db078:	f1d5 0e20 	rsbs	lr, r5, #32
   db07c:	db0d      	blt.n	db09a <__adddf3+0xb2>
   db07e:	fa02 fc0e 	lsl.w	ip, r2, lr
   db082:	fa22 f205 	lsr.w	r2, r2, r5
   db086:	1880      	adds	r0, r0, r2
   db088:	f141 0100 	adc.w	r1, r1, #0
   db08c:	fa03 f20e 	lsl.w	r2, r3, lr
   db090:	1880      	adds	r0, r0, r2
   db092:	fa43 f305 	asr.w	r3, r3, r5
   db096:	4159      	adcs	r1, r3
   db098:	e00e      	b.n	db0b8 <__adddf3+0xd0>
   db09a:	f1a5 0520 	sub.w	r5, r5, #32
   db09e:	f10e 0e20 	add.w	lr, lr, #32
   db0a2:	2a01      	cmp	r2, #1
   db0a4:	fa03 fc0e 	lsl.w	ip, r3, lr
   db0a8:	bf28      	it	cs
   db0aa:	f04c 0c02 	orrcs.w	ip, ip, #2
   db0ae:	fa43 f305 	asr.w	r3, r3, r5
   db0b2:	18c0      	adds	r0, r0, r3
   db0b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   db0b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db0bc:	d507      	bpl.n	db0ce <__adddf3+0xe6>
   db0be:	f04f 0e00 	mov.w	lr, #0
   db0c2:	f1dc 0c00 	rsbs	ip, ip, #0
   db0c6:	eb7e 0000 	sbcs.w	r0, lr, r0
   db0ca:	eb6e 0101 	sbc.w	r1, lr, r1
   db0ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   db0d2:	d31b      	bcc.n	db10c <__adddf3+0x124>
   db0d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   db0d8:	d30c      	bcc.n	db0f4 <__adddf3+0x10c>
   db0da:	0849      	lsrs	r1, r1, #1
   db0dc:	ea5f 0030 	movs.w	r0, r0, rrx
   db0e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   db0e4:	f104 0401 	add.w	r4, r4, #1
   db0e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   db0ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   db0f0:	f080 809a 	bcs.w	db228 <__adddf3+0x240>
   db0f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   db0f8:	bf08      	it	eq
   db0fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   db0fe:	f150 0000 	adcs.w	r0, r0, #0
   db102:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db106:	ea41 0105 	orr.w	r1, r1, r5
   db10a:	bd30      	pop	{r4, r5, pc}
   db10c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   db110:	4140      	adcs	r0, r0
   db112:	eb41 0101 	adc.w	r1, r1, r1
   db116:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db11a:	f1a4 0401 	sub.w	r4, r4, #1
   db11e:	d1e9      	bne.n	db0f4 <__adddf3+0x10c>
   db120:	f091 0f00 	teq	r1, #0
   db124:	bf04      	itt	eq
   db126:	4601      	moveq	r1, r0
   db128:	2000      	moveq	r0, #0
   db12a:	fab1 f381 	clz	r3, r1
   db12e:	bf08      	it	eq
   db130:	3320      	addeq	r3, #32
   db132:	f1a3 030b 	sub.w	r3, r3, #11
   db136:	f1b3 0220 	subs.w	r2, r3, #32
   db13a:	da0c      	bge.n	db156 <__adddf3+0x16e>
   db13c:	320c      	adds	r2, #12
   db13e:	dd08      	ble.n	db152 <__adddf3+0x16a>
   db140:	f102 0c14 	add.w	ip, r2, #20
   db144:	f1c2 020c 	rsb	r2, r2, #12
   db148:	fa01 f00c 	lsl.w	r0, r1, ip
   db14c:	fa21 f102 	lsr.w	r1, r1, r2
   db150:	e00c      	b.n	db16c <__adddf3+0x184>
   db152:	f102 0214 	add.w	r2, r2, #20
   db156:	bfd8      	it	le
   db158:	f1c2 0c20 	rsble	ip, r2, #32
   db15c:	fa01 f102 	lsl.w	r1, r1, r2
   db160:	fa20 fc0c 	lsr.w	ip, r0, ip
   db164:	bfdc      	itt	le
   db166:	ea41 010c 	orrle.w	r1, r1, ip
   db16a:	4090      	lslle	r0, r2
   db16c:	1ae4      	subs	r4, r4, r3
   db16e:	bfa2      	ittt	ge
   db170:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   db174:	4329      	orrge	r1, r5
   db176:	bd30      	popge	{r4, r5, pc}
   db178:	ea6f 0404 	mvn.w	r4, r4
   db17c:	3c1f      	subs	r4, #31
   db17e:	da1c      	bge.n	db1ba <__adddf3+0x1d2>
   db180:	340c      	adds	r4, #12
   db182:	dc0e      	bgt.n	db1a2 <__adddf3+0x1ba>
   db184:	f104 0414 	add.w	r4, r4, #20
   db188:	f1c4 0220 	rsb	r2, r4, #32
   db18c:	fa20 f004 	lsr.w	r0, r0, r4
   db190:	fa01 f302 	lsl.w	r3, r1, r2
   db194:	ea40 0003 	orr.w	r0, r0, r3
   db198:	fa21 f304 	lsr.w	r3, r1, r4
   db19c:	ea45 0103 	orr.w	r1, r5, r3
   db1a0:	bd30      	pop	{r4, r5, pc}
   db1a2:	f1c4 040c 	rsb	r4, r4, #12
   db1a6:	f1c4 0220 	rsb	r2, r4, #32
   db1aa:	fa20 f002 	lsr.w	r0, r0, r2
   db1ae:	fa01 f304 	lsl.w	r3, r1, r4
   db1b2:	ea40 0003 	orr.w	r0, r0, r3
   db1b6:	4629      	mov	r1, r5
   db1b8:	bd30      	pop	{r4, r5, pc}
   db1ba:	fa21 f004 	lsr.w	r0, r1, r4
   db1be:	4629      	mov	r1, r5
   db1c0:	bd30      	pop	{r4, r5, pc}
   db1c2:	f094 0f00 	teq	r4, #0
   db1c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   db1ca:	bf06      	itte	eq
   db1cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   db1d0:	3401      	addeq	r4, #1
   db1d2:	3d01      	subne	r5, #1
   db1d4:	e74e      	b.n	db074 <__adddf3+0x8c>
   db1d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   db1da:	bf18      	it	ne
   db1dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   db1e0:	d029      	beq.n	db236 <__adddf3+0x24e>
   db1e2:	ea94 0f05 	teq	r4, r5
   db1e6:	bf08      	it	eq
   db1e8:	ea90 0f02 	teqeq	r0, r2
   db1ec:	d005      	beq.n	db1fa <__adddf3+0x212>
   db1ee:	ea54 0c00 	orrs.w	ip, r4, r0
   db1f2:	bf04      	itt	eq
   db1f4:	4619      	moveq	r1, r3
   db1f6:	4610      	moveq	r0, r2
   db1f8:	bd30      	pop	{r4, r5, pc}
   db1fa:	ea91 0f03 	teq	r1, r3
   db1fe:	bf1e      	ittt	ne
   db200:	2100      	movne	r1, #0
   db202:	2000      	movne	r0, #0
   db204:	bd30      	popne	{r4, r5, pc}
   db206:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   db20a:	d105      	bne.n	db218 <__adddf3+0x230>
   db20c:	0040      	lsls	r0, r0, #1
   db20e:	4149      	adcs	r1, r1
   db210:	bf28      	it	cs
   db212:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   db216:	bd30      	pop	{r4, r5, pc}
   db218:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   db21c:	bf3c      	itt	cc
   db21e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   db222:	bd30      	popcc	{r4, r5, pc}
   db224:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db228:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   db22c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   db230:	f04f 0000 	mov.w	r0, #0
   db234:	bd30      	pop	{r4, r5, pc}
   db236:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   db23a:	bf1a      	itte	ne
   db23c:	4619      	movne	r1, r3
   db23e:	4610      	movne	r0, r2
   db240:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   db244:	bf1c      	itt	ne
   db246:	460b      	movne	r3, r1
   db248:	4602      	movne	r2, r0
   db24a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   db24e:	bf06      	itte	eq
   db250:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   db254:	ea91 0f03 	teqeq	r1, r3
   db258:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   db25c:	bd30      	pop	{r4, r5, pc}
   db25e:	bf00      	nop

000db260 <__aeabi_ui2d>:
   db260:	f090 0f00 	teq	r0, #0
   db264:	bf04      	itt	eq
   db266:	2100      	moveq	r1, #0
   db268:	4770      	bxeq	lr
   db26a:	b530      	push	{r4, r5, lr}
   db26c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db270:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db274:	f04f 0500 	mov.w	r5, #0
   db278:	f04f 0100 	mov.w	r1, #0
   db27c:	e750      	b.n	db120 <__adddf3+0x138>
   db27e:	bf00      	nop

000db280 <__aeabi_i2d>:
   db280:	f090 0f00 	teq	r0, #0
   db284:	bf04      	itt	eq
   db286:	2100      	moveq	r1, #0
   db288:	4770      	bxeq	lr
   db28a:	b530      	push	{r4, r5, lr}
   db28c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db290:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db294:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   db298:	bf48      	it	mi
   db29a:	4240      	negmi	r0, r0
   db29c:	f04f 0100 	mov.w	r1, #0
   db2a0:	e73e      	b.n	db120 <__adddf3+0x138>
   db2a2:	bf00      	nop

000db2a4 <__aeabi_f2d>:
   db2a4:	0042      	lsls	r2, r0, #1
   db2a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   db2aa:	ea4f 0131 	mov.w	r1, r1, rrx
   db2ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
   db2b2:	bf1f      	itttt	ne
   db2b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   db2b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   db2bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   db2c0:	4770      	bxne	lr
   db2c2:	f092 0f00 	teq	r2, #0
   db2c6:	bf14      	ite	ne
   db2c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   db2cc:	4770      	bxeq	lr
   db2ce:	b530      	push	{r4, r5, lr}
   db2d0:	f44f 7460 	mov.w	r4, #896	; 0x380
   db2d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db2d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   db2dc:	e720      	b.n	db120 <__adddf3+0x138>
   db2de:	bf00      	nop

000db2e0 <__aeabi_ul2d>:
   db2e0:	ea50 0201 	orrs.w	r2, r0, r1
   db2e4:	bf08      	it	eq
   db2e6:	4770      	bxeq	lr
   db2e8:	b530      	push	{r4, r5, lr}
   db2ea:	f04f 0500 	mov.w	r5, #0
   db2ee:	e00a      	b.n	db306 <__aeabi_l2d+0x16>

000db2f0 <__aeabi_l2d>:
   db2f0:	ea50 0201 	orrs.w	r2, r0, r1
   db2f4:	bf08      	it	eq
   db2f6:	4770      	bxeq	lr
   db2f8:	b530      	push	{r4, r5, lr}
   db2fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   db2fe:	d502      	bpl.n	db306 <__aeabi_l2d+0x16>
   db300:	4240      	negs	r0, r0
   db302:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db306:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db30a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db30e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   db312:	f43f aedc 	beq.w	db0ce <__adddf3+0xe6>
   db316:	f04f 0203 	mov.w	r2, #3
   db31a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   db31e:	bf18      	it	ne
   db320:	3203      	addne	r2, #3
   db322:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   db326:	bf18      	it	ne
   db328:	3203      	addne	r2, #3
   db32a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   db32e:	f1c2 0320 	rsb	r3, r2, #32
   db332:	fa00 fc03 	lsl.w	ip, r0, r3
   db336:	fa20 f002 	lsr.w	r0, r0, r2
   db33a:	fa01 fe03 	lsl.w	lr, r1, r3
   db33e:	ea40 000e 	orr.w	r0, r0, lr
   db342:	fa21 f102 	lsr.w	r1, r1, r2
   db346:	4414      	add	r4, r2
   db348:	e6c1      	b.n	db0ce <__adddf3+0xe6>
   db34a:	bf00      	nop

000db34c <__aeabi_dmul>:
   db34c:	b570      	push	{r4, r5, r6, lr}
   db34e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   db352:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   db356:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   db35a:	bf1d      	ittte	ne
   db35c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   db360:	ea94 0f0c 	teqne	r4, ip
   db364:	ea95 0f0c 	teqne	r5, ip
   db368:	f000 f8de 	bleq	db528 <__aeabi_dmul+0x1dc>
   db36c:	442c      	add	r4, r5
   db36e:	ea81 0603 	eor.w	r6, r1, r3
   db372:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   db376:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   db37a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   db37e:	bf18      	it	ne
   db380:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   db384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db388:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   db38c:	d038      	beq.n	db400 <__aeabi_dmul+0xb4>
   db38e:	fba0 ce02 	umull	ip, lr, r0, r2
   db392:	f04f 0500 	mov.w	r5, #0
   db396:	fbe1 e502 	umlal	lr, r5, r1, r2
   db39a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   db39e:	fbe0 e503 	umlal	lr, r5, r0, r3
   db3a2:	f04f 0600 	mov.w	r6, #0
   db3a6:	fbe1 5603 	umlal	r5, r6, r1, r3
   db3aa:	f09c 0f00 	teq	ip, #0
   db3ae:	bf18      	it	ne
   db3b0:	f04e 0e01 	orrne.w	lr, lr, #1
   db3b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   db3b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   db3bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   db3c0:	d204      	bcs.n	db3cc <__aeabi_dmul+0x80>
   db3c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   db3c6:	416d      	adcs	r5, r5
   db3c8:	eb46 0606 	adc.w	r6, r6, r6
   db3cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   db3d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   db3d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   db3d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   db3dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   db3e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   db3e4:	bf88      	it	hi
   db3e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   db3ea:	d81e      	bhi.n	db42a <__aeabi_dmul+0xde>
   db3ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   db3f0:	bf08      	it	eq
   db3f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   db3f6:	f150 0000 	adcs.w	r0, r0, #0
   db3fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db3fe:	bd70      	pop	{r4, r5, r6, pc}
   db400:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   db404:	ea46 0101 	orr.w	r1, r6, r1
   db408:	ea40 0002 	orr.w	r0, r0, r2
   db40c:	ea81 0103 	eor.w	r1, r1, r3
   db410:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   db414:	bfc2      	ittt	gt
   db416:	ebd4 050c 	rsbsgt	r5, r4, ip
   db41a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   db41e:	bd70      	popgt	{r4, r5, r6, pc}
   db420:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db424:	f04f 0e00 	mov.w	lr, #0
   db428:	3c01      	subs	r4, #1
   db42a:	f300 80ab 	bgt.w	db584 <__aeabi_dmul+0x238>
   db42e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   db432:	bfde      	ittt	le
   db434:	2000      	movle	r0, #0
   db436:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   db43a:	bd70      	pople	{r4, r5, r6, pc}
   db43c:	f1c4 0400 	rsb	r4, r4, #0
   db440:	3c20      	subs	r4, #32
   db442:	da35      	bge.n	db4b0 <__aeabi_dmul+0x164>
   db444:	340c      	adds	r4, #12
   db446:	dc1b      	bgt.n	db480 <__aeabi_dmul+0x134>
   db448:	f104 0414 	add.w	r4, r4, #20
   db44c:	f1c4 0520 	rsb	r5, r4, #32
   db450:	fa00 f305 	lsl.w	r3, r0, r5
   db454:	fa20 f004 	lsr.w	r0, r0, r4
   db458:	fa01 f205 	lsl.w	r2, r1, r5
   db45c:	ea40 0002 	orr.w	r0, r0, r2
   db460:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   db464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   db468:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   db46c:	fa21 f604 	lsr.w	r6, r1, r4
   db470:	eb42 0106 	adc.w	r1, r2, r6
   db474:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   db478:	bf08      	it	eq
   db47a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   db47e:	bd70      	pop	{r4, r5, r6, pc}
   db480:	f1c4 040c 	rsb	r4, r4, #12
   db484:	f1c4 0520 	rsb	r5, r4, #32
   db488:	fa00 f304 	lsl.w	r3, r0, r4
   db48c:	fa20 f005 	lsr.w	r0, r0, r5
   db490:	fa01 f204 	lsl.w	r2, r1, r4
   db494:	ea40 0002 	orr.w	r0, r0, r2
   db498:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db49c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   db4a0:	f141 0100 	adc.w	r1, r1, #0
   db4a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   db4a8:	bf08      	it	eq
   db4aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   db4ae:	bd70      	pop	{r4, r5, r6, pc}
   db4b0:	f1c4 0520 	rsb	r5, r4, #32
   db4b4:	fa00 f205 	lsl.w	r2, r0, r5
   db4b8:	ea4e 0e02 	orr.w	lr, lr, r2
   db4bc:	fa20 f304 	lsr.w	r3, r0, r4
   db4c0:	fa01 f205 	lsl.w	r2, r1, r5
   db4c4:	ea43 0302 	orr.w	r3, r3, r2
   db4c8:	fa21 f004 	lsr.w	r0, r1, r4
   db4cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db4d0:	fa21 f204 	lsr.w	r2, r1, r4
   db4d4:	ea20 0002 	bic.w	r0, r0, r2
   db4d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   db4dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   db4e0:	bf08      	it	eq
   db4e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   db4e6:	bd70      	pop	{r4, r5, r6, pc}
   db4e8:	f094 0f00 	teq	r4, #0
   db4ec:	d10f      	bne.n	db50e <__aeabi_dmul+0x1c2>
   db4ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   db4f2:	0040      	lsls	r0, r0, #1
   db4f4:	eb41 0101 	adc.w	r1, r1, r1
   db4f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db4fc:	bf08      	it	eq
   db4fe:	3c01      	subeq	r4, #1
   db500:	d0f7      	beq.n	db4f2 <__aeabi_dmul+0x1a6>
   db502:	ea41 0106 	orr.w	r1, r1, r6
   db506:	f095 0f00 	teq	r5, #0
   db50a:	bf18      	it	ne
   db50c:	4770      	bxne	lr
   db50e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   db512:	0052      	lsls	r2, r2, #1
   db514:	eb43 0303 	adc.w	r3, r3, r3
   db518:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   db51c:	bf08      	it	eq
   db51e:	3d01      	subeq	r5, #1
   db520:	d0f7      	beq.n	db512 <__aeabi_dmul+0x1c6>
   db522:	ea43 0306 	orr.w	r3, r3, r6
   db526:	4770      	bx	lr
   db528:	ea94 0f0c 	teq	r4, ip
   db52c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   db530:	bf18      	it	ne
   db532:	ea95 0f0c 	teqne	r5, ip
   db536:	d00c      	beq.n	db552 <__aeabi_dmul+0x206>
   db538:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db53c:	bf18      	it	ne
   db53e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db542:	d1d1      	bne.n	db4e8 <__aeabi_dmul+0x19c>
   db544:	ea81 0103 	eor.w	r1, r1, r3
   db548:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db54c:	f04f 0000 	mov.w	r0, #0
   db550:	bd70      	pop	{r4, r5, r6, pc}
   db552:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db556:	bf06      	itte	eq
   db558:	4610      	moveq	r0, r2
   db55a:	4619      	moveq	r1, r3
   db55c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db560:	d019      	beq.n	db596 <__aeabi_dmul+0x24a>
   db562:	ea94 0f0c 	teq	r4, ip
   db566:	d102      	bne.n	db56e <__aeabi_dmul+0x222>
   db568:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   db56c:	d113      	bne.n	db596 <__aeabi_dmul+0x24a>
   db56e:	ea95 0f0c 	teq	r5, ip
   db572:	d105      	bne.n	db580 <__aeabi_dmul+0x234>
   db574:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   db578:	bf1c      	itt	ne
   db57a:	4610      	movne	r0, r2
   db57c:	4619      	movne	r1, r3
   db57e:	d10a      	bne.n	db596 <__aeabi_dmul+0x24a>
   db580:	ea81 0103 	eor.w	r1, r1, r3
   db584:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db588:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   db58c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   db590:	f04f 0000 	mov.w	r0, #0
   db594:	bd70      	pop	{r4, r5, r6, pc}
   db596:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   db59a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   db59e:	bd70      	pop	{r4, r5, r6, pc}

000db5a0 <__aeabi_ddiv>:
   db5a0:	b570      	push	{r4, r5, r6, lr}
   db5a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   db5a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   db5aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   db5ae:	bf1d      	ittte	ne
   db5b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   db5b4:	ea94 0f0c 	teqne	r4, ip
   db5b8:	ea95 0f0c 	teqne	r5, ip
   db5bc:	f000 f8a7 	bleq	db70e <__aeabi_ddiv+0x16e>
   db5c0:	eba4 0405 	sub.w	r4, r4, r5
   db5c4:	ea81 0e03 	eor.w	lr, r1, r3
   db5c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   db5cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   db5d0:	f000 8088 	beq.w	db6e4 <__aeabi_ddiv+0x144>
   db5d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   db5d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   db5dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   db5e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   db5e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   db5e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   db5ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   db5f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   db5f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   db5f8:	429d      	cmp	r5, r3
   db5fa:	bf08      	it	eq
   db5fc:	4296      	cmpeq	r6, r2
   db5fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   db602:	f504 7440 	add.w	r4, r4, #768	; 0x300
   db606:	d202      	bcs.n	db60e <__aeabi_ddiv+0x6e>
   db608:	085b      	lsrs	r3, r3, #1
   db60a:	ea4f 0232 	mov.w	r2, r2, rrx
   db60e:	1ab6      	subs	r6, r6, r2
   db610:	eb65 0503 	sbc.w	r5, r5, r3
   db614:	085b      	lsrs	r3, r3, #1
   db616:	ea4f 0232 	mov.w	r2, r2, rrx
   db61a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   db61e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   db622:	ebb6 0e02 	subs.w	lr, r6, r2
   db626:	eb75 0e03 	sbcs.w	lr, r5, r3
   db62a:	bf22      	ittt	cs
   db62c:	1ab6      	subcs	r6, r6, r2
   db62e:	4675      	movcs	r5, lr
   db630:	ea40 000c 	orrcs.w	r0, r0, ip
   db634:	085b      	lsrs	r3, r3, #1
   db636:	ea4f 0232 	mov.w	r2, r2, rrx
   db63a:	ebb6 0e02 	subs.w	lr, r6, r2
   db63e:	eb75 0e03 	sbcs.w	lr, r5, r3
   db642:	bf22      	ittt	cs
   db644:	1ab6      	subcs	r6, r6, r2
   db646:	4675      	movcs	r5, lr
   db648:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   db64c:	085b      	lsrs	r3, r3, #1
   db64e:	ea4f 0232 	mov.w	r2, r2, rrx
   db652:	ebb6 0e02 	subs.w	lr, r6, r2
   db656:	eb75 0e03 	sbcs.w	lr, r5, r3
   db65a:	bf22      	ittt	cs
   db65c:	1ab6      	subcs	r6, r6, r2
   db65e:	4675      	movcs	r5, lr
   db660:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   db664:	085b      	lsrs	r3, r3, #1
   db666:	ea4f 0232 	mov.w	r2, r2, rrx
   db66a:	ebb6 0e02 	subs.w	lr, r6, r2
   db66e:	eb75 0e03 	sbcs.w	lr, r5, r3
   db672:	bf22      	ittt	cs
   db674:	1ab6      	subcs	r6, r6, r2
   db676:	4675      	movcs	r5, lr
   db678:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   db67c:	ea55 0e06 	orrs.w	lr, r5, r6
   db680:	d018      	beq.n	db6b4 <__aeabi_ddiv+0x114>
   db682:	ea4f 1505 	mov.w	r5, r5, lsl #4
   db686:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   db68a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   db68e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   db692:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   db696:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   db69a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   db69e:	d1c0      	bne.n	db622 <__aeabi_ddiv+0x82>
   db6a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db6a4:	d10b      	bne.n	db6be <__aeabi_ddiv+0x11e>
   db6a6:	ea41 0100 	orr.w	r1, r1, r0
   db6aa:	f04f 0000 	mov.w	r0, #0
   db6ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   db6b2:	e7b6      	b.n	db622 <__aeabi_ddiv+0x82>
   db6b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db6b8:	bf04      	itt	eq
   db6ba:	4301      	orreq	r1, r0
   db6bc:	2000      	moveq	r0, #0
   db6be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   db6c2:	bf88      	it	hi
   db6c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   db6c8:	f63f aeaf 	bhi.w	db42a <__aeabi_dmul+0xde>
   db6cc:	ebb5 0c03 	subs.w	ip, r5, r3
   db6d0:	bf04      	itt	eq
   db6d2:	ebb6 0c02 	subseq.w	ip, r6, r2
   db6d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   db6da:	f150 0000 	adcs.w	r0, r0, #0
   db6de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db6e2:	bd70      	pop	{r4, r5, r6, pc}
   db6e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   db6e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   db6ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   db6f0:	bfc2      	ittt	gt
   db6f2:	ebd4 050c 	rsbsgt	r5, r4, ip
   db6f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   db6fa:	bd70      	popgt	{r4, r5, r6, pc}
   db6fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db700:	f04f 0e00 	mov.w	lr, #0
   db704:	3c01      	subs	r4, #1
   db706:	e690      	b.n	db42a <__aeabi_dmul+0xde>
   db708:	ea45 0e06 	orr.w	lr, r5, r6
   db70c:	e68d      	b.n	db42a <__aeabi_dmul+0xde>
   db70e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   db712:	ea94 0f0c 	teq	r4, ip
   db716:	bf08      	it	eq
   db718:	ea95 0f0c 	teqeq	r5, ip
   db71c:	f43f af3b 	beq.w	db596 <__aeabi_dmul+0x24a>
   db720:	ea94 0f0c 	teq	r4, ip
   db724:	d10a      	bne.n	db73c <__aeabi_ddiv+0x19c>
   db726:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   db72a:	f47f af34 	bne.w	db596 <__aeabi_dmul+0x24a>
   db72e:	ea95 0f0c 	teq	r5, ip
   db732:	f47f af25 	bne.w	db580 <__aeabi_dmul+0x234>
   db736:	4610      	mov	r0, r2
   db738:	4619      	mov	r1, r3
   db73a:	e72c      	b.n	db596 <__aeabi_dmul+0x24a>
   db73c:	ea95 0f0c 	teq	r5, ip
   db740:	d106      	bne.n	db750 <__aeabi_ddiv+0x1b0>
   db742:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   db746:	f43f aefd 	beq.w	db544 <__aeabi_dmul+0x1f8>
   db74a:	4610      	mov	r0, r2
   db74c:	4619      	mov	r1, r3
   db74e:	e722      	b.n	db596 <__aeabi_dmul+0x24a>
   db750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db754:	bf18      	it	ne
   db756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db75a:	f47f aec5 	bne.w	db4e8 <__aeabi_dmul+0x19c>
   db75e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   db762:	f47f af0d 	bne.w	db580 <__aeabi_dmul+0x234>
   db766:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   db76a:	f47f aeeb 	bne.w	db544 <__aeabi_dmul+0x1f8>
   db76e:	e712      	b.n	db596 <__aeabi_dmul+0x24a>

000db770 <__gedf2>:
   db770:	f04f 3cff 	mov.w	ip, #4294967295
   db774:	e006      	b.n	db784 <__cmpdf2+0x4>
   db776:	bf00      	nop

000db778 <__ledf2>:
   db778:	f04f 0c01 	mov.w	ip, #1
   db77c:	e002      	b.n	db784 <__cmpdf2+0x4>
   db77e:	bf00      	nop

000db780 <__cmpdf2>:
   db780:	f04f 0c01 	mov.w	ip, #1
   db784:	f84d cd04 	str.w	ip, [sp, #-4]!
   db788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   db78c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db790:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   db794:	bf18      	it	ne
   db796:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   db79a:	d01b      	beq.n	db7d4 <__cmpdf2+0x54>
   db79c:	b001      	add	sp, #4
   db79e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   db7a2:	bf0c      	ite	eq
   db7a4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   db7a8:	ea91 0f03 	teqne	r1, r3
   db7ac:	bf02      	ittt	eq
   db7ae:	ea90 0f02 	teqeq	r0, r2
   db7b2:	2000      	moveq	r0, #0
   db7b4:	4770      	bxeq	lr
   db7b6:	f110 0f00 	cmn.w	r0, #0
   db7ba:	ea91 0f03 	teq	r1, r3
   db7be:	bf58      	it	pl
   db7c0:	4299      	cmppl	r1, r3
   db7c2:	bf08      	it	eq
   db7c4:	4290      	cmpeq	r0, r2
   db7c6:	bf2c      	ite	cs
   db7c8:	17d8      	asrcs	r0, r3, #31
   db7ca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   db7ce:	f040 0001 	orr.w	r0, r0, #1
   db7d2:	4770      	bx	lr
   db7d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   db7d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db7dc:	d102      	bne.n	db7e4 <__cmpdf2+0x64>
   db7de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   db7e2:	d107      	bne.n	db7f4 <__cmpdf2+0x74>
   db7e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   db7e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db7ec:	d1d6      	bne.n	db79c <__cmpdf2+0x1c>
   db7ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   db7f2:	d0d3      	beq.n	db79c <__cmpdf2+0x1c>
   db7f4:	f85d 0b04 	ldr.w	r0, [sp], #4
   db7f8:	4770      	bx	lr
   db7fa:	bf00      	nop

000db7fc <__aeabi_cdrcmple>:
   db7fc:	4684      	mov	ip, r0
   db7fe:	4610      	mov	r0, r2
   db800:	4662      	mov	r2, ip
   db802:	468c      	mov	ip, r1
   db804:	4619      	mov	r1, r3
   db806:	4663      	mov	r3, ip
   db808:	e000      	b.n	db80c <__aeabi_cdcmpeq>
   db80a:	bf00      	nop

000db80c <__aeabi_cdcmpeq>:
   db80c:	b501      	push	{r0, lr}
   db80e:	f7ff ffb7 	bl	db780 <__cmpdf2>
   db812:	2800      	cmp	r0, #0
   db814:	bf48      	it	mi
   db816:	f110 0f00 	cmnmi.w	r0, #0
   db81a:	bd01      	pop	{r0, pc}

000db81c <__aeabi_dcmpeq>:
   db81c:	f84d ed08 	str.w	lr, [sp, #-8]!
   db820:	f7ff fff4 	bl	db80c <__aeabi_cdcmpeq>
   db824:	bf0c      	ite	eq
   db826:	2001      	moveq	r0, #1
   db828:	2000      	movne	r0, #0
   db82a:	f85d fb08 	ldr.w	pc, [sp], #8
   db82e:	bf00      	nop

000db830 <__aeabi_dcmplt>:
   db830:	f84d ed08 	str.w	lr, [sp, #-8]!
   db834:	f7ff ffea 	bl	db80c <__aeabi_cdcmpeq>
   db838:	bf34      	ite	cc
   db83a:	2001      	movcc	r0, #1
   db83c:	2000      	movcs	r0, #0
   db83e:	f85d fb08 	ldr.w	pc, [sp], #8
   db842:	bf00      	nop

000db844 <__aeabi_dcmple>:
   db844:	f84d ed08 	str.w	lr, [sp, #-8]!
   db848:	f7ff ffe0 	bl	db80c <__aeabi_cdcmpeq>
   db84c:	bf94      	ite	ls
   db84e:	2001      	movls	r0, #1
   db850:	2000      	movhi	r0, #0
   db852:	f85d fb08 	ldr.w	pc, [sp], #8
   db856:	bf00      	nop

000db858 <__aeabi_dcmpge>:
   db858:	f84d ed08 	str.w	lr, [sp, #-8]!
   db85c:	f7ff ffce 	bl	db7fc <__aeabi_cdrcmple>
   db860:	bf94      	ite	ls
   db862:	2001      	movls	r0, #1
   db864:	2000      	movhi	r0, #0
   db866:	f85d fb08 	ldr.w	pc, [sp], #8
   db86a:	bf00      	nop

000db86c <__aeabi_dcmpgt>:
   db86c:	f84d ed08 	str.w	lr, [sp, #-8]!
   db870:	f7ff ffc4 	bl	db7fc <__aeabi_cdrcmple>
   db874:	bf34      	ite	cc
   db876:	2001      	movcc	r0, #1
   db878:	2000      	movcs	r0, #0
   db87a:	f85d fb08 	ldr.w	pc, [sp], #8
   db87e:	bf00      	nop

000db880 <__aeabi_dcmpun>:
   db880:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   db884:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db888:	d102      	bne.n	db890 <__aeabi_dcmpun+0x10>
   db88a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   db88e:	d10a      	bne.n	db8a6 <__aeabi_dcmpun+0x26>
   db890:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   db894:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db898:	d102      	bne.n	db8a0 <__aeabi_dcmpun+0x20>
   db89a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   db89e:	d102      	bne.n	db8a6 <__aeabi_dcmpun+0x26>
   db8a0:	f04f 0000 	mov.w	r0, #0
   db8a4:	4770      	bx	lr
   db8a6:	f04f 0001 	mov.w	r0, #1
   db8aa:	4770      	bx	lr

000db8ac <__aeabi_d2iz>:
   db8ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
   db8b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   db8b4:	d215      	bcs.n	db8e2 <__aeabi_d2iz+0x36>
   db8b6:	d511      	bpl.n	db8dc <__aeabi_d2iz+0x30>
   db8b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   db8bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   db8c0:	d912      	bls.n	db8e8 <__aeabi_d2iz+0x3c>
   db8c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   db8c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   db8ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   db8ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   db8d2:	fa23 f002 	lsr.w	r0, r3, r2
   db8d6:	bf18      	it	ne
   db8d8:	4240      	negne	r0, r0
   db8da:	4770      	bx	lr
   db8dc:	f04f 0000 	mov.w	r0, #0
   db8e0:	4770      	bx	lr
   db8e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   db8e6:	d105      	bne.n	db8f4 <__aeabi_d2iz+0x48>
   db8e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   db8ec:	bf08      	it	eq
   db8ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   db8f2:	4770      	bx	lr
   db8f4:	f04f 0000 	mov.w	r0, #0
   db8f8:	4770      	bx	lr
   db8fa:	bf00      	nop

000db8fc <__aeabi_d2uiz>:
   db8fc:	004a      	lsls	r2, r1, #1
   db8fe:	d211      	bcs.n	db924 <__aeabi_d2uiz+0x28>
   db900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   db904:	d211      	bcs.n	db92a <__aeabi_d2uiz+0x2e>
   db906:	d50d      	bpl.n	db924 <__aeabi_d2uiz+0x28>
   db908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   db90c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   db910:	d40e      	bmi.n	db930 <__aeabi_d2uiz+0x34>
   db912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   db916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   db91a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   db91e:	fa23 f002 	lsr.w	r0, r3, r2
   db922:	4770      	bx	lr
   db924:	f04f 0000 	mov.w	r0, #0
   db928:	4770      	bx	lr
   db92a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   db92e:	d102      	bne.n	db936 <__aeabi_d2uiz+0x3a>
   db930:	f04f 30ff 	mov.w	r0, #4294967295
   db934:	4770      	bx	lr
   db936:	f04f 0000 	mov.w	r0, #0
   db93a:	4770      	bx	lr

000db93c <__aeabi_d2f>:
   db93c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   db940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   db944:	bf24      	itt	cs
   db946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   db94a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   db94e:	d90d      	bls.n	db96c <__aeabi_d2f+0x30>
   db950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   db954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   db958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   db95c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   db960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   db964:	bf08      	it	eq
   db966:	f020 0001 	biceq.w	r0, r0, #1
   db96a:	4770      	bx	lr
   db96c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   db970:	d121      	bne.n	db9b6 <__aeabi_d2f+0x7a>
   db972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   db976:	bfbc      	itt	lt
   db978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   db97c:	4770      	bxlt	lr
   db97e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db982:	ea4f 5252 	mov.w	r2, r2, lsr #21
   db986:	f1c2 0218 	rsb	r2, r2, #24
   db98a:	f1c2 0c20 	rsb	ip, r2, #32
   db98e:	fa10 f30c 	lsls.w	r3, r0, ip
   db992:	fa20 f002 	lsr.w	r0, r0, r2
   db996:	bf18      	it	ne
   db998:	f040 0001 	orrne.w	r0, r0, #1
   db99c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   db9a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   db9a4:	fa03 fc0c 	lsl.w	ip, r3, ip
   db9a8:	ea40 000c 	orr.w	r0, r0, ip
   db9ac:	fa23 f302 	lsr.w	r3, r3, r2
   db9b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   db9b4:	e7cc      	b.n	db950 <__aeabi_d2f+0x14>
   db9b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   db9ba:	d107      	bne.n	db9cc <__aeabi_d2f+0x90>
   db9bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   db9c0:	bf1e      	ittt	ne
   db9c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   db9c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   db9ca:	4770      	bxne	lr
   db9cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   db9d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   db9d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   db9d8:	4770      	bx	lr
   db9da:	bf00      	nop

000db9dc <asctime>:
   db9dc:	4b09      	ldr	r3, [pc, #36]	; (dba04 <asctime+0x28>)
   db9de:	b570      	push	{r4, r5, r6, lr}
   db9e0:	681c      	ldr	r4, [r3, #0]
   db9e2:	6c25      	ldr	r5, [r4, #64]	; 0x40
   db9e4:	4606      	mov	r6, r0
   db9e6:	b93d      	cbnz	r5, db9f8 <asctime+0x1c>
   db9e8:	201a      	movs	r0, #26
   db9ea:	f7fd fa81 	bl	d8ef0 <malloc>
   db9ee:	221a      	movs	r2, #26
   db9f0:	6420      	str	r0, [r4, #64]	; 0x40
   db9f2:	4629      	mov	r1, r5
   db9f4:	f000 f94e 	bl	dbc94 <memset>
   db9f8:	6c21      	ldr	r1, [r4, #64]	; 0x40
   db9fa:	4630      	mov	r0, r6
   db9fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   dba00:	f000 b802 	b.w	dba08 <asctime_r>
   dba04:	2003d7a8 	.word	0x2003d7a8

000dba08 <asctime_r>:
   dba08:	b510      	push	{r4, lr}
   dba0a:	460c      	mov	r4, r1
   dba0c:	6941      	ldr	r1, [r0, #20]
   dba0e:	6903      	ldr	r3, [r0, #16]
   dba10:	6982      	ldr	r2, [r0, #24]
   dba12:	b086      	sub	sp, #24
   dba14:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   dba18:	9104      	str	r1, [sp, #16]
   dba1a:	6801      	ldr	r1, [r0, #0]
   dba1c:	9103      	str	r1, [sp, #12]
   dba1e:	6841      	ldr	r1, [r0, #4]
   dba20:	9102      	str	r1, [sp, #8]
   dba22:	6881      	ldr	r1, [r0, #8]
   dba24:	9101      	str	r1, [sp, #4]
   dba26:	68c1      	ldr	r1, [r0, #12]
   dba28:	9100      	str	r1, [sp, #0]
   dba2a:	4907      	ldr	r1, [pc, #28]	; (dba48 <asctime_r+0x40>)
   dba2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   dba30:	440b      	add	r3, r1
   dba32:	4906      	ldr	r1, [pc, #24]	; (dba4c <asctime_r+0x44>)
   dba34:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   dba38:	440a      	add	r2, r1
   dba3a:	4620      	mov	r0, r4
   dba3c:	4904      	ldr	r1, [pc, #16]	; (dba50 <asctime_r+0x48>)
   dba3e:	f7fd fa77 	bl	d8f30 <siprintf>
   dba42:	4620      	mov	r0, r4
   dba44:	b006      	add	sp, #24
   dba46:	bd10      	pop	{r4, pc}
   dba48:	000dd6ea 	.word	0x000dd6ea
   dba4c:	000dd6d5 	.word	0x000dd6d5
   dba50:	000dd70e 	.word	0x000dd70e

000dba54 <__cxa_atexit>:
   dba54:	b510      	push	{r4, lr}
   dba56:	4c05      	ldr	r4, [pc, #20]	; (dba6c <__cxa_atexit+0x18>)
   dba58:	4613      	mov	r3, r2
   dba5a:	b12c      	cbz	r4, dba68 <__cxa_atexit+0x14>
   dba5c:	460a      	mov	r2, r1
   dba5e:	4601      	mov	r1, r0
   dba60:	2002      	movs	r0, #2
   dba62:	f3af 8000 	nop.w
   dba66:	bd10      	pop	{r4, pc}
   dba68:	4620      	mov	r0, r4
   dba6a:	bd10      	pop	{r4, pc}
   dba6c:	00000000 	.word	0x00000000

000dba70 <localtime>:
   dba70:	b538      	push	{r3, r4, r5, lr}
   dba72:	4b07      	ldr	r3, [pc, #28]	; (dba90 <localtime+0x20>)
   dba74:	681c      	ldr	r4, [r3, #0]
   dba76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   dba78:	4605      	mov	r5, r0
   dba7a:	b91b      	cbnz	r3, dba84 <localtime+0x14>
   dba7c:	2024      	movs	r0, #36	; 0x24
   dba7e:	f7fd fa37 	bl	d8ef0 <malloc>
   dba82:	63e0      	str	r0, [r4, #60]	; 0x3c
   dba84:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   dba86:	4628      	mov	r0, r5
   dba88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dba8c:	f000 b802 	b.w	dba94 <localtime_r>
   dba90:	2003d7a8 	.word	0x2003d7a8

000dba94 <localtime_r>:
   dba94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dba98:	460c      	mov	r4, r1
   dba9a:	4680      	mov	r8, r0
   dba9c:	f001 f99e 	bl	dcddc <__gettzinfo>
   dbaa0:	4621      	mov	r1, r4
   dbaa2:	4607      	mov	r7, r0
   dbaa4:	4640      	mov	r0, r8
   dbaa6:	f001 f99d 	bl	dcde4 <gmtime_r>
   dbaaa:	6946      	ldr	r6, [r0, #20]
   dbaac:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   dbab0:	07b3      	lsls	r3, r6, #30
   dbab2:	4604      	mov	r4, r0
   dbab4:	d105      	bne.n	dbac2 <localtime_r+0x2e>
   dbab6:	2264      	movs	r2, #100	; 0x64
   dbab8:	fb96 f3f2 	sdiv	r3, r6, r2
   dbabc:	fb02 6313 	mls	r3, r2, r3, r6
   dbac0:	b94b      	cbnz	r3, dbad6 <localtime_r+0x42>
   dbac2:	f44f 75c8 	mov.w	r5, #400	; 0x190
   dbac6:	fb96 f3f5 	sdiv	r3, r6, r5
   dbaca:	fb05 6513 	mls	r5, r5, r3, r6
   dbace:	fab5 f385 	clz	r3, r5
   dbad2:	095b      	lsrs	r3, r3, #5
   dbad4:	e000      	b.n	dbad8 <localtime_r+0x44>
   dbad6:	2301      	movs	r3, #1
   dbad8:	4a5f      	ldr	r2, [pc, #380]	; (dbc58 <localtime_r+0x1c4>)
   dbada:	2530      	movs	r5, #48	; 0x30
   dbadc:	fb05 2503 	mla	r5, r5, r3, r2
   dbae0:	f000 ffac 	bl	dca3c <__tz_lock>
   dbae4:	f000 ffac 	bl	dca40 <_tzset_unlocked>
   dbae8:	4b5c      	ldr	r3, [pc, #368]	; (dbc5c <localtime_r+0x1c8>)
   dbaea:	681b      	ldr	r3, [r3, #0]
   dbaec:	b1f3      	cbz	r3, dbb2c <localtime_r+0x98>
   dbaee:	687b      	ldr	r3, [r7, #4]
   dbaf0:	429e      	cmp	r6, r3
   dbaf2:	d105      	bne.n	dbb00 <localtime_r+0x6c>
   dbaf4:	6839      	ldr	r1, [r7, #0]
   dbaf6:	f8d8 3000 	ldr.w	r3, [r8]
   dbafa:	69fa      	ldr	r2, [r7, #28]
   dbafc:	b941      	cbnz	r1, dbb10 <localtime_r+0x7c>
   dbafe:	e00a      	b.n	dbb16 <localtime_r+0x82>
   dbb00:	4630      	mov	r0, r6
   dbb02:	f000 fef3 	bl	dc8ec <__tzcalc_limits>
   dbb06:	2800      	cmp	r0, #0
   dbb08:	d1f4      	bne.n	dbaf4 <localtime_r+0x60>
   dbb0a:	f04f 33ff 	mov.w	r3, #4294967295
   dbb0e:	e00d      	b.n	dbb2c <localtime_r+0x98>
   dbb10:	4293      	cmp	r3, r2
   dbb12:	db08      	blt.n	dbb26 <localtime_r+0x92>
   dbb14:	e001      	b.n	dbb1a <localtime_r+0x86>
   dbb16:	4293      	cmp	r3, r2
   dbb18:	da07      	bge.n	dbb2a <localtime_r+0x96>
   dbb1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   dbb1c:	4293      	cmp	r3, r2
   dbb1e:	bfac      	ite	ge
   dbb20:	2300      	movge	r3, #0
   dbb22:	2301      	movlt	r3, #1
   dbb24:	e002      	b.n	dbb2c <localtime_r+0x98>
   dbb26:	2300      	movs	r3, #0
   dbb28:	e000      	b.n	dbb2c <localtime_r+0x98>
   dbb2a:	2301      	movs	r3, #1
   dbb2c:	6223      	str	r3, [r4, #32]
   dbb2e:	6a23      	ldr	r3, [r4, #32]
   dbb30:	2b01      	cmp	r3, #1
   dbb32:	bf0c      	ite	eq
   dbb34:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   dbb36:	6a39      	ldrne	r1, [r7, #32]
   dbb38:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dbb3c:	203c      	movs	r0, #60	; 0x3c
   dbb3e:	fb91 f6f3 	sdiv	r6, r1, r3
   dbb42:	fb03 1316 	mls	r3, r3, r6, r1
   dbb46:	6861      	ldr	r1, [r4, #4]
   dbb48:	fb93 f2f0 	sdiv	r2, r3, r0
   dbb4c:	fb00 3012 	mls	r0, r0, r2, r3
   dbb50:	6823      	ldr	r3, [r4, #0]
   dbb52:	1a89      	subs	r1, r1, r2
   dbb54:	68a2      	ldr	r2, [r4, #8]
   dbb56:	6061      	str	r1, [r4, #4]
   dbb58:	1a1b      	subs	r3, r3, r0
   dbb5a:	1b92      	subs	r2, r2, r6
   dbb5c:	2b3b      	cmp	r3, #59	; 0x3b
   dbb5e:	6023      	str	r3, [r4, #0]
   dbb60:	60a2      	str	r2, [r4, #8]
   dbb62:	dd03      	ble.n	dbb6c <localtime_r+0xd8>
   dbb64:	3101      	adds	r1, #1
   dbb66:	6061      	str	r1, [r4, #4]
   dbb68:	3b3c      	subs	r3, #60	; 0x3c
   dbb6a:	e004      	b.n	dbb76 <localtime_r+0xe2>
   dbb6c:	2b00      	cmp	r3, #0
   dbb6e:	da03      	bge.n	dbb78 <localtime_r+0xe4>
   dbb70:	3901      	subs	r1, #1
   dbb72:	6061      	str	r1, [r4, #4]
   dbb74:	333c      	adds	r3, #60	; 0x3c
   dbb76:	6023      	str	r3, [r4, #0]
   dbb78:	6863      	ldr	r3, [r4, #4]
   dbb7a:	2b3b      	cmp	r3, #59	; 0x3b
   dbb7c:	dd03      	ble.n	dbb86 <localtime_r+0xf2>
   dbb7e:	3201      	adds	r2, #1
   dbb80:	60a2      	str	r2, [r4, #8]
   dbb82:	3b3c      	subs	r3, #60	; 0x3c
   dbb84:	e004      	b.n	dbb90 <localtime_r+0xfc>
   dbb86:	2b00      	cmp	r3, #0
   dbb88:	da03      	bge.n	dbb92 <localtime_r+0xfe>
   dbb8a:	3a01      	subs	r2, #1
   dbb8c:	60a2      	str	r2, [r4, #8]
   dbb8e:	333c      	adds	r3, #60	; 0x3c
   dbb90:	6063      	str	r3, [r4, #4]
   dbb92:	68a3      	ldr	r3, [r4, #8]
   dbb94:	2b17      	cmp	r3, #23
   dbb96:	dd22      	ble.n	dbbde <localtime_r+0x14a>
   dbb98:	69e2      	ldr	r2, [r4, #28]
   dbb9a:	3201      	adds	r2, #1
   dbb9c:	61e2      	str	r2, [r4, #28]
   dbb9e:	69a2      	ldr	r2, [r4, #24]
   dbba0:	3201      	adds	r2, #1
   dbba2:	2a06      	cmp	r2, #6
   dbba4:	bfc8      	it	gt
   dbba6:	2200      	movgt	r2, #0
   dbba8:	61a2      	str	r2, [r4, #24]
   dbbaa:	68e2      	ldr	r2, [r4, #12]
   dbbac:	3b18      	subs	r3, #24
   dbbae:	3201      	adds	r2, #1
   dbbb0:	60a3      	str	r3, [r4, #8]
   dbbb2:	6923      	ldr	r3, [r4, #16]
   dbbb4:	60e2      	str	r2, [r4, #12]
   dbbb6:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   dbbba:	428a      	cmp	r2, r1
   dbbbc:	dd46      	ble.n	dbc4c <localtime_r+0x1b8>
   dbbbe:	3301      	adds	r3, #1
   dbbc0:	2b0c      	cmp	r3, #12
   dbbc2:	bf0c      	ite	eq
   dbbc4:	6963      	ldreq	r3, [r4, #20]
   dbbc6:	6123      	strne	r3, [r4, #16]
   dbbc8:	eba2 0201 	sub.w	r2, r2, r1
   dbbcc:	60e2      	str	r2, [r4, #12]
   dbbce:	bf01      	itttt	eq
   dbbd0:	3301      	addeq	r3, #1
   dbbd2:	2200      	moveq	r2, #0
   dbbd4:	6122      	streq	r2, [r4, #16]
   dbbd6:	6163      	streq	r3, [r4, #20]
   dbbd8:	bf08      	it	eq
   dbbda:	61e2      	streq	r2, [r4, #28]
   dbbdc:	e036      	b.n	dbc4c <localtime_r+0x1b8>
   dbbde:	2b00      	cmp	r3, #0
   dbbe0:	da34      	bge.n	dbc4c <localtime_r+0x1b8>
   dbbe2:	69e2      	ldr	r2, [r4, #28]
   dbbe4:	3a01      	subs	r2, #1
   dbbe6:	61e2      	str	r2, [r4, #28]
   dbbe8:	69a2      	ldr	r2, [r4, #24]
   dbbea:	3a01      	subs	r2, #1
   dbbec:	bf48      	it	mi
   dbbee:	2206      	movmi	r2, #6
   dbbf0:	61a2      	str	r2, [r4, #24]
   dbbf2:	68e2      	ldr	r2, [r4, #12]
   dbbf4:	3318      	adds	r3, #24
   dbbf6:	3a01      	subs	r2, #1
   dbbf8:	60e2      	str	r2, [r4, #12]
   dbbfa:	60a3      	str	r3, [r4, #8]
   dbbfc:	bb32      	cbnz	r2, dbc4c <localtime_r+0x1b8>
   dbbfe:	6923      	ldr	r3, [r4, #16]
   dbc00:	3b01      	subs	r3, #1
   dbc02:	d401      	bmi.n	dbc08 <localtime_r+0x174>
   dbc04:	6123      	str	r3, [r4, #16]
   dbc06:	e01d      	b.n	dbc44 <localtime_r+0x1b0>
   dbc08:	230b      	movs	r3, #11
   dbc0a:	6123      	str	r3, [r4, #16]
   dbc0c:	6963      	ldr	r3, [r4, #20]
   dbc0e:	1e5a      	subs	r2, r3, #1
   dbc10:	f012 0f03 	tst.w	r2, #3
   dbc14:	6162      	str	r2, [r4, #20]
   dbc16:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   dbc1a:	d105      	bne.n	dbc28 <localtime_r+0x194>
   dbc1c:	2164      	movs	r1, #100	; 0x64
   dbc1e:	fb93 f2f1 	sdiv	r2, r3, r1
   dbc22:	fb01 3212 	mls	r2, r1, r2, r3
   dbc26:	b94a      	cbnz	r2, dbc3c <localtime_r+0x1a8>
   dbc28:	f44f 71c8 	mov.w	r1, #400	; 0x190
   dbc2c:	fb93 f2f1 	sdiv	r2, r3, r1
   dbc30:	fb01 3312 	mls	r3, r1, r2, r3
   dbc34:	fab3 f383 	clz	r3, r3
   dbc38:	095b      	lsrs	r3, r3, #5
   dbc3a:	e000      	b.n	dbc3e <localtime_r+0x1aa>
   dbc3c:	2301      	movs	r3, #1
   dbc3e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   dbc42:	61e3      	str	r3, [r4, #28]
   dbc44:	6923      	ldr	r3, [r4, #16]
   dbc46:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   dbc4a:	60e3      	str	r3, [r4, #12]
   dbc4c:	f000 fef7 	bl	dca3e <__tz_unlock>
   dbc50:	4620      	mov	r0, r4
   dbc52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dbc56:	bf00      	nop
   dbc58:	000dd894 	.word	0x000dd894
   dbc5c:	2003e500 	.word	0x2003e500

000dbc60 <memcmp>:
   dbc60:	b510      	push	{r4, lr}
   dbc62:	3901      	subs	r1, #1
   dbc64:	4402      	add	r2, r0
   dbc66:	4290      	cmp	r0, r2
   dbc68:	d007      	beq.n	dbc7a <memcmp+0x1a>
   dbc6a:	f810 3b01 	ldrb.w	r3, [r0], #1
   dbc6e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dbc72:	42a3      	cmp	r3, r4
   dbc74:	d0f7      	beq.n	dbc66 <memcmp+0x6>
   dbc76:	1b18      	subs	r0, r3, r4
   dbc78:	bd10      	pop	{r4, pc}
   dbc7a:	2000      	movs	r0, #0
   dbc7c:	bd10      	pop	{r4, pc}

000dbc7e <memcpy>:
   dbc7e:	b510      	push	{r4, lr}
   dbc80:	1e43      	subs	r3, r0, #1
   dbc82:	440a      	add	r2, r1
   dbc84:	4291      	cmp	r1, r2
   dbc86:	d004      	beq.n	dbc92 <memcpy+0x14>
   dbc88:	f811 4b01 	ldrb.w	r4, [r1], #1
   dbc8c:	f803 4f01 	strb.w	r4, [r3, #1]!
   dbc90:	e7f8      	b.n	dbc84 <memcpy+0x6>
   dbc92:	bd10      	pop	{r4, pc}

000dbc94 <memset>:
   dbc94:	4402      	add	r2, r0
   dbc96:	4603      	mov	r3, r0
   dbc98:	4293      	cmp	r3, r2
   dbc9a:	d002      	beq.n	dbca2 <memset+0xe>
   dbc9c:	f803 1b01 	strb.w	r1, [r3], #1
   dbca0:	e7fa      	b.n	dbc98 <memset+0x4>
   dbca2:	4770      	bx	lr

000dbca4 <srand>:
   dbca4:	b538      	push	{r3, r4, r5, lr}
   dbca6:	4b12      	ldr	r3, [pc, #72]	; (dbcf0 <srand+0x4c>)
   dbca8:	681c      	ldr	r4, [r3, #0]
   dbcaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dbcac:	4605      	mov	r5, r0
   dbcae:	b9d3      	cbnz	r3, dbce6 <srand+0x42>
   dbcb0:	2018      	movs	r0, #24
   dbcb2:	f7fd f91d 	bl	d8ef0 <malloc>
   dbcb6:	f243 330e 	movw	r3, #13070	; 0x330e
   dbcba:	63a0      	str	r0, [r4, #56]	; 0x38
   dbcbc:	8003      	strh	r3, [r0, #0]
   dbcbe:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   dbcc2:	8043      	strh	r3, [r0, #2]
   dbcc4:	f241 2334 	movw	r3, #4660	; 0x1234
   dbcc8:	8083      	strh	r3, [r0, #4]
   dbcca:	f24e 636d 	movw	r3, #58989	; 0xe66d
   dbcce:	80c3      	strh	r3, [r0, #6]
   dbcd0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   dbcd4:	8103      	strh	r3, [r0, #8]
   dbcd6:	2305      	movs	r3, #5
   dbcd8:	8143      	strh	r3, [r0, #10]
   dbcda:	230b      	movs	r3, #11
   dbcdc:	8183      	strh	r3, [r0, #12]
   dbcde:	2201      	movs	r2, #1
   dbce0:	2300      	movs	r3, #0
   dbce2:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dbce6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dbce8:	2200      	movs	r2, #0
   dbcea:	611d      	str	r5, [r3, #16]
   dbcec:	615a      	str	r2, [r3, #20]
   dbcee:	bd38      	pop	{r3, r4, r5, pc}
   dbcf0:	2003d7a8 	.word	0x2003d7a8

000dbcf4 <strchr>:
   dbcf4:	b2c9      	uxtb	r1, r1
   dbcf6:	4603      	mov	r3, r0
   dbcf8:	f810 2b01 	ldrb.w	r2, [r0], #1
   dbcfc:	b11a      	cbz	r2, dbd06 <strchr+0x12>
   dbcfe:	4291      	cmp	r1, r2
   dbd00:	d1f9      	bne.n	dbcf6 <strchr+0x2>
   dbd02:	4618      	mov	r0, r3
   dbd04:	4770      	bx	lr
   dbd06:	2900      	cmp	r1, #0
   dbd08:	bf0c      	ite	eq
   dbd0a:	4618      	moveq	r0, r3
   dbd0c:	2000      	movne	r0, #0
   dbd0e:	4770      	bx	lr

000dbd10 <strcmp>:
   dbd10:	f810 2b01 	ldrb.w	r2, [r0], #1
   dbd14:	f811 3b01 	ldrb.w	r3, [r1], #1
   dbd18:	2a01      	cmp	r2, #1
   dbd1a:	bf28      	it	cs
   dbd1c:	429a      	cmpcs	r2, r3
   dbd1e:	d0f7      	beq.n	dbd10 <strcmp>
   dbd20:	1ad0      	subs	r0, r2, r3
   dbd22:	4770      	bx	lr

000dbd24 <strcpy>:
   dbd24:	4603      	mov	r3, r0
   dbd26:	f811 2b01 	ldrb.w	r2, [r1], #1
   dbd2a:	f803 2b01 	strb.w	r2, [r3], #1
   dbd2e:	2a00      	cmp	r2, #0
   dbd30:	d1f9      	bne.n	dbd26 <strcpy+0x2>
   dbd32:	4770      	bx	lr

000dbd34 <iso_year_adjust>:
   dbd34:	6941      	ldr	r1, [r0, #20]
   dbd36:	078b      	lsls	r3, r1, #30
   dbd38:	b510      	push	{r4, lr}
   dbd3a:	d10c      	bne.n	dbd56 <iso_year_adjust+0x22>
   dbd3c:	2900      	cmp	r1, #0
   dbd3e:	f240 736c 	movw	r3, #1900	; 0x76c
   dbd42:	bfa8      	it	ge
   dbd44:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   dbd48:	440b      	add	r3, r1
   dbd4a:	2464      	movs	r4, #100	; 0x64
   dbd4c:	fb93 f2f4 	sdiv	r2, r3, r4
   dbd50:	fb04 3312 	mls	r3, r4, r2, r3
   dbd54:	b983      	cbnz	r3, dbd78 <iso_year_adjust+0x44>
   dbd56:	2900      	cmp	r1, #0
   dbd58:	f240 736c 	movw	r3, #1900	; 0x76c
   dbd5c:	bfa8      	it	ge
   dbd5e:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   dbd62:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dbd66:	440b      	add	r3, r1
   dbd68:	fb93 f1f2 	sdiv	r1, r3, r2
   dbd6c:	fb02 3311 	mls	r3, r2, r1, r3
   dbd70:	fab3 f283 	clz	r2, r3
   dbd74:	0952      	lsrs	r2, r2, #5
   dbd76:	e000      	b.n	dbd7a <iso_year_adjust+0x46>
   dbd78:	2201      	movs	r2, #1
   dbd7a:	6983      	ldr	r3, [r0, #24]
   dbd7c:	69c1      	ldr	r1, [r0, #28]
   dbd7e:	005b      	lsls	r3, r3, #1
   dbd80:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   dbd84:	4413      	add	r3, r2
   dbd86:	2b21      	cmp	r3, #33	; 0x21
   dbd88:	dc0e      	bgt.n	dbda8 <iso_year_adjust+0x74>
   dbd8a:	2b20      	cmp	r3, #32
   dbd8c:	da2f      	bge.n	dbdee <iso_year_adjust+0xba>
   dbd8e:	2b0d      	cmp	r3, #13
   dbd90:	dc02      	bgt.n	dbd98 <iso_year_adjust+0x64>
   dbd92:	2b0a      	cmp	r3, #10
   dbd94:	db05      	blt.n	dbda2 <iso_year_adjust+0x6e>
   dbd96:	e02a      	b.n	dbdee <iso_year_adjust+0xba>
   dbd98:	2b10      	cmp	r3, #16
   dbd9a:	db26      	blt.n	dbdea <iso_year_adjust+0xb6>
   dbd9c:	2b11      	cmp	r3, #17
   dbd9e:	dd26      	ble.n	dbdee <iso_year_adjust+0xba>
   dbda0:	3b1c      	subs	r3, #28
   dbda2:	2b01      	cmp	r3, #1
   dbda4:	d923      	bls.n	dbdee <iso_year_adjust+0xba>
   dbda6:	e020      	b.n	dbdea <iso_year_adjust+0xb6>
   dbda8:	f241 62c6 	movw	r2, #5830	; 0x16c6
   dbdac:	4293      	cmp	r3, r2
   dbdae:	dc0e      	bgt.n	dbdce <iso_year_adjust+0x9a>
   dbdb0:	f241 62c2 	movw	r2, #5826	; 0x16c2
   dbdb4:	4293      	cmp	r3, r2
   dbdb6:	da16      	bge.n	dbde6 <iso_year_adjust+0xb2>
   dbdb8:	f241 62a2 	movw	r2, #5794	; 0x16a2
   dbdbc:	4293      	cmp	r3, r2
   dbdbe:	d012      	beq.n	dbde6 <iso_year_adjust+0xb2>
   dbdc0:	db13      	blt.n	dbdea <iso_year_adjust+0xb6>
   dbdc2:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
   dbdc6:	3b12      	subs	r3, #18
   dbdc8:	2b02      	cmp	r3, #2
   dbdca:	d90c      	bls.n	dbde6 <iso_year_adjust+0xb2>
   dbdcc:	e00d      	b.n	dbdea <iso_year_adjust+0xb6>
   dbdce:	f241 62d5 	movw	r2, #5845	; 0x16d5
   dbdd2:	4293      	cmp	r3, r2
   dbdd4:	d007      	beq.n	dbde6 <iso_year_adjust+0xb2>
   dbdd6:	f241 62d7 	movw	r2, #5847	; 0x16d7
   dbdda:	4293      	cmp	r3, r2
   dbddc:	d003      	beq.n	dbde6 <iso_year_adjust+0xb2>
   dbdde:	f241 62d3 	movw	r2, #5843	; 0x16d3
   dbde2:	4293      	cmp	r3, r2
   dbde4:	d101      	bne.n	dbdea <iso_year_adjust+0xb6>
   dbde6:	2001      	movs	r0, #1
   dbde8:	bd10      	pop	{r4, pc}
   dbdea:	2000      	movs	r0, #0
   dbdec:	bd10      	pop	{r4, pc}
   dbdee:	f04f 30ff 	mov.w	r0, #4294967295
   dbdf2:	bd10      	pop	{r4, pc}

000dbdf4 <strftime>:
   dbdf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbdf8:	b093      	sub	sp, #76	; 0x4c
   dbdfa:	460e      	mov	r6, r1
   dbdfc:	461d      	mov	r5, r3
   dbdfe:	4607      	mov	r7, r0
   dbe00:	4691      	mov	r9, r2
   dbe02:	f000 fd63 	bl	dc8cc <__get_current_time_locale>
   dbe06:	2300      	movs	r3, #0
   dbe08:	9306      	str	r3, [sp, #24]
   dbe0a:	461c      	mov	r4, r3
   dbe0c:	1e73      	subs	r3, r6, #1
   dbe0e:	9003      	str	r0, [sp, #12]
   dbe10:	9302      	str	r3, [sp, #8]
   dbe12:	f899 3000 	ldrb.w	r3, [r9]
   dbe16:	2b00      	cmp	r3, #0
   dbe18:	f000 8492 	beq.w	dc740 <strftime+0x94c>
   dbe1c:	2b25      	cmp	r3, #37	; 0x25
   dbe1e:	d008      	beq.n	dbe32 <strftime+0x3e>
   dbe20:	9a02      	ldr	r2, [sp, #8]
   dbe22:	4294      	cmp	r4, r2
   dbe24:	f080 8490 	bcs.w	dc748 <strftime+0x954>
   dbe28:	553b      	strb	r3, [r7, r4]
   dbe2a:	f109 0901 	add.w	r9, r9, #1
   dbe2e:	3401      	adds	r4, #1
   dbe30:	e7ef      	b.n	dbe12 <strftime+0x1e>
   dbe32:	f899 a001 	ldrb.w	sl, [r9, #1]
   dbe36:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
   dbe3a:	d007      	beq.n	dbe4c <strftime+0x58>
   dbe3c:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   dbe40:	d004      	beq.n	dbe4c <strftime+0x58>
   dbe42:	f109 0901 	add.w	r9, r9, #1
   dbe46:	f04f 0a00 	mov.w	sl, #0
   dbe4a:	e001      	b.n	dbe50 <strftime+0x5c>
   dbe4c:	f109 0902 	add.w	r9, r9, #2
   dbe50:	f899 3000 	ldrb.w	r3, [r9]
   dbe54:	3b31      	subs	r3, #49	; 0x31
   dbe56:	2b08      	cmp	r3, #8
   dbe58:	d808      	bhi.n	dbe6c <strftime+0x78>
   dbe5a:	4648      	mov	r0, r9
   dbe5c:	220a      	movs	r2, #10
   dbe5e:	a90a      	add	r1, sp, #40	; 0x28
   dbe60:	f000 fd2a 	bl	dc8b8 <strtoul>
   dbe64:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   dbe68:	4680      	mov	r8, r0
   dbe6a:	e001      	b.n	dbe70 <strftime+0x7c>
   dbe6c:	f04f 0800 	mov.w	r8, #0
   dbe70:	f899 3000 	ldrb.w	r3, [r9]
   dbe74:	2b45      	cmp	r3, #69	; 0x45
   dbe76:	d001      	beq.n	dbe7c <strftime+0x88>
   dbe78:	2b4f      	cmp	r3, #79	; 0x4f
   dbe7a:	d101      	bne.n	dbe80 <strftime+0x8c>
   dbe7c:	f109 0901 	add.w	r9, r9, #1
   dbe80:	f899 0000 	ldrb.w	r0, [r9]
   dbe84:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   dbe88:	2b55      	cmp	r3, #85	; 0x55
   dbe8a:	f200 845d 	bhi.w	dc748 <strftime+0x954>
   dbe8e:	e8df f013 	tbh	[pc, r3, lsl #1]
   dbe92:	044a      	.short	0x044a
   dbe94:	045b045b 	.word	0x045b045b
   dbe98:	045b045b 	.word	0x045b045b
   dbe9c:	045b045b 	.word	0x045b045b
   dbea0:	045b045b 	.word	0x045b045b
   dbea4:	045b045b 	.word	0x045b045b
   dbea8:	045b045b 	.word	0x045b045b
   dbeac:	045b045b 	.word	0x045b045b
   dbeb0:	045b045b 	.word	0x045b045b
   dbeb4:	045b045b 	.word	0x045b045b
   dbeb8:	045b045b 	.word	0x045b045b
   dbebc:	045b045b 	.word	0x045b045b
   dbec0:	045b045b 	.word	0x045b045b
   dbec4:	045b045b 	.word	0x045b045b
   dbec8:	006f045b 	.word	0x006f045b
   dbecc:	00d400a1 	.word	0x00d400a1
   dbed0:	045b011a 	.word	0x045b011a
   dbed4:	01a0013f 	.word	0x01a0013f
   dbed8:	022d0226 	.word	0x022d0226
   dbedc:	045b045b 	.word	0x045b045b
   dbee0:	0260045b 	.word	0x0260045b
   dbee4:	045b045b 	.word	0x045b045b
   dbee8:	045b0268 	.word	0x045b0268
   dbeec:	031d0297 	.word	0x031d0297
   dbef0:	033b0325 	.word	0x033b0325
   dbef4:	03860343 	.word	0x03860343
   dbef8:	03a000c6 	.word	0x03a000c6
   dbefc:	045b041f 	.word	0x045b041f
   dbf00:	045b045b 	.word	0x045b045b
   dbf04:	045b045b 	.word	0x045b045b
   dbf08:	0056045b 	.word	0x0056045b
   dbf0c:	00ba0089 	.word	0x00ba0089
   dbf10:	010c010c 	.word	0x010c010c
   dbf14:	0171045b 	.word	0x0171045b
   dbf18:	045b0089 	.word	0x045b0089
   dbf1c:	0226023d 	.word	0x0226023d
   dbf20:	025d022d 	.word	0x025d022d
   dbf24:	045b0262 	.word	0x045b0262
   dbf28:	045b0268 	.word	0x045b0268
   dbf2c:	029c00be 	.word	0x029c00be
   dbf30:	032e031f 	.word	0x032e031f
   dbf34:	037f045b 	.word	0x037f045b
   dbf38:	039200c2 	.word	0x039200c2
   dbf3c:	03e7      	.short	0x03e7
   dbf3e:	69ab      	ldr	r3, [r5, #24]
   dbf40:	9a03      	ldr	r2, [sp, #12]
   dbf42:	3318      	adds	r3, #24
   dbf44:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   dbf48:	4640      	mov	r0, r8
   dbf4a:	f000 fc07 	bl	dc75c <strlen>
   dbf4e:	f108 38ff 	add.w	r8, r8, #4294967295
   dbf52:	193b      	adds	r3, r7, r4
   dbf54:	4420      	add	r0, r4
   dbf56:	4284      	cmp	r4, r0
   dbf58:	f000 83eb 	beq.w	dc732 <strftime+0x93e>
   dbf5c:	9a02      	ldr	r2, [sp, #8]
   dbf5e:	4294      	cmp	r4, r2
   dbf60:	f080 83f2 	bcs.w	dc748 <strftime+0x954>
   dbf64:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dbf68:	f803 2b01 	strb.w	r2, [r3], #1
   dbf6c:	3401      	adds	r4, #1
   dbf6e:	e7f2      	b.n	dbf56 <strftime+0x162>
   dbf70:	69ab      	ldr	r3, [r5, #24]
   dbf72:	9a03      	ldr	r2, [sp, #12]
   dbf74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dbf78:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
   dbf7c:	4640      	mov	r0, r8
   dbf7e:	f000 fbed 	bl	dc75c <strlen>
   dbf82:	f108 38ff 	add.w	r8, r8, #4294967295
   dbf86:	193b      	adds	r3, r7, r4
   dbf88:	4420      	add	r0, r4
   dbf8a:	4284      	cmp	r4, r0
   dbf8c:	f000 83d1 	beq.w	dc732 <strftime+0x93e>
   dbf90:	9a02      	ldr	r2, [sp, #8]
   dbf92:	4294      	cmp	r4, r2
   dbf94:	f080 83d8 	bcs.w	dc748 <strftime+0x954>
   dbf98:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dbf9c:	f803 2b01 	strb.w	r2, [r3], #1
   dbfa0:	3401      	adds	r4, #1
   dbfa2:	e7f2      	b.n	dbf8a <strftime+0x196>
   dbfa4:	692b      	ldr	r3, [r5, #16]
   dbfa6:	9a03      	ldr	r2, [sp, #12]
   dbfa8:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   dbfac:	4640      	mov	r0, r8
   dbfae:	f000 fbd5 	bl	dc75c <strlen>
   dbfb2:	f108 38ff 	add.w	r8, r8, #4294967295
   dbfb6:	193b      	adds	r3, r7, r4
   dbfb8:	4420      	add	r0, r4
   dbfba:	4284      	cmp	r4, r0
   dbfbc:	f000 83b9 	beq.w	dc732 <strftime+0x93e>
   dbfc0:	9a02      	ldr	r2, [sp, #8]
   dbfc2:	4294      	cmp	r4, r2
   dbfc4:	f080 83c0 	bcs.w	dc748 <strftime+0x954>
   dbfc8:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dbfcc:	f803 2b01 	strb.w	r2, [r3], #1
   dbfd0:	3401      	adds	r4, #1
   dbfd2:	e7f2      	b.n	dbfba <strftime+0x1c6>
   dbfd4:	692b      	ldr	r3, [r5, #16]
   dbfd6:	9a03      	ldr	r2, [sp, #12]
   dbfd8:	330c      	adds	r3, #12
   dbfda:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   dbfde:	4640      	mov	r0, r8
   dbfe0:	f000 fbbc 	bl	dc75c <strlen>
   dbfe4:	f108 38ff 	add.w	r8, r8, #4294967295
   dbfe8:	193b      	adds	r3, r7, r4
   dbfea:	4420      	add	r0, r4
   dbfec:	4284      	cmp	r4, r0
   dbfee:	f000 83a0 	beq.w	dc732 <strftime+0x93e>
   dbff2:	9a02      	ldr	r2, [sp, #8]
   dbff4:	4294      	cmp	r4, r2
   dbff6:	f080 83a7 	bcs.w	dc748 <strftime+0x954>
   dbffa:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dbffe:	f803 2b01 	strb.w	r2, [r3], #1
   dc002:	3401      	adds	r4, #1
   dc004:	e7f2      	b.n	dbfec <strftime+0x1f8>
   dc006:	9b03      	ldr	r3, [sp, #12]
   dc008:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
   dc00c:	e00a      	b.n	dc024 <strftime+0x230>
   dc00e:	9b03      	ldr	r3, [sp, #12]
   dc010:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
   dc014:	e006      	b.n	dc024 <strftime+0x230>
   dc016:	9b03      	ldr	r3, [sp, #12]
   dc018:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
   dc01c:	e002      	b.n	dc024 <strftime+0x230>
   dc01e:	9b03      	ldr	r3, [sp, #12]
   dc020:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
   dc024:	4640      	mov	r0, r8
   dc026:	f000 fb99 	bl	dc75c <strlen>
   dc02a:	f898 3000 	ldrb.w	r3, [r8]
   dc02e:	2b00      	cmp	r3, #0
   dc030:	f000 837f 	beq.w	dc732 <strftime+0x93e>
   dc034:	462b      	mov	r3, r5
   dc036:	4642      	mov	r2, r8
   dc038:	e093      	b.n	dc162 <strftime+0x36e>
   dc03a:	49b6      	ldr	r1, [pc, #728]	; (dc314 <strftime+0x520>)
   dc03c:	f8d5 b014 	ldr.w	fp, [r5, #20]
   dc040:	458b      	cmp	fp, r1
   dc042:	bfac      	ite	ge
   dc044:	2100      	movge	r1, #0
   dc046:	2101      	movlt	r1, #1
   dc048:	f1bb 0f00 	cmp.w	fp, #0
   dc04c:	db04      	blt.n	dc058 <strftime+0x264>
   dc04e:	2064      	movs	r0, #100	; 0x64
   dc050:	fb9b f0f0 	sdiv	r0, fp, r0
   dc054:	3013      	adds	r0, #19
   dc056:	e008      	b.n	dc06a <strftime+0x276>
   dc058:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
   dc05c:	9107      	str	r1, [sp, #28]
   dc05e:	f000 fe75 	bl	dcd4c <abs>
   dc062:	9907      	ldr	r1, [sp, #28]
   dc064:	2364      	movs	r3, #100	; 0x64
   dc066:	fb90 f0f3 	sdiv	r0, r0, r3
   dc06a:	f1ba 0f00 	cmp.w	sl, #0
   dc06e:	d008      	beq.n	dc082 <strftime+0x28e>
   dc070:	2863      	cmp	r0, #99	; 0x63
   dc072:	dd09      	ble.n	dc088 <strftime+0x294>
   dc074:	4ba8      	ldr	r3, [pc, #672]	; (dc318 <strftime+0x524>)
   dc076:	4aa9      	ldr	r2, [pc, #676]	; (dc31c <strftime+0x528>)
   dc078:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   dc07c:	bf18      	it	ne
   dc07e:	4613      	movne	r3, r2
   dc080:	e003      	b.n	dc08a <strftime+0x296>
   dc082:	4ba6      	ldr	r3, [pc, #664]	; (dc31c <strftime+0x528>)
   dc084:	4aa6      	ldr	r2, [pc, #664]	; (dc320 <strftime+0x52c>)
   dc086:	e001      	b.n	dc08c <strftime+0x298>
   dc088:	4ba4      	ldr	r3, [pc, #656]	; (dc31c <strftime+0x528>)
   dc08a:	4aa6      	ldr	r2, [pc, #664]	; (dc324 <strftime+0x530>)
   dc08c:	9001      	str	r0, [sp, #4]
   dc08e:	f1b8 0f01 	cmp.w	r8, #1
   dc092:	bf98      	it	ls
   dc094:	f04f 0802 	movls.w	r8, #2
   dc098:	ebc1 0108 	rsb	r1, r1, r8
   dc09c:	9100      	str	r1, [sp, #0]
   dc09e:	489d      	ldr	r0, [pc, #628]	; (dc314 <strftime+0x520>)
   dc0a0:	49a1      	ldr	r1, [pc, #644]	; (dc328 <strftime+0x534>)
   dc0a2:	4583      	cmp	fp, r0
   dc0a4:	bfb8      	it	lt
   dc0a6:	460b      	movlt	r3, r1
   dc0a8:	e21e      	b.n	dc4e8 <strftime+0x6f4>
   dc0aa:	4aa0      	ldr	r2, [pc, #640]	; (dc32c <strftime+0x538>)
   dc0ac:	49a0      	ldr	r1, [pc, #640]	; (dc330 <strftime+0x53c>)
   dc0ae:	68eb      	ldr	r3, [r5, #12]
   dc0b0:	2864      	cmp	r0, #100	; 0x64
   dc0b2:	bf08      	it	eq
   dc0b4:	460a      	moveq	r2, r1
   dc0b6:	1b31      	subs	r1, r6, r4
   dc0b8:	1938      	adds	r0, r7, r4
   dc0ba:	f7fc ff51 	bl	d8f60 <sniprintf>
   dc0be:	2800      	cmp	r0, #0
   dc0c0:	f280 8302 	bge.w	dc6c8 <strftime+0x8d4>
   dc0c4:	e340      	b.n	dc748 <strftime+0x954>
   dc0c6:	6968      	ldr	r0, [r5, #20]
   dc0c8:	692b      	ldr	r3, [r5, #16]
   dc0ca:	2800      	cmp	r0, #0
   dc0cc:	f103 0b01 	add.w	fp, r3, #1
   dc0d0:	eb07 0804 	add.w	r8, r7, r4
   dc0d4:	ebc4 0a06 	rsb	sl, r4, r6
   dc0d8:	68eb      	ldr	r3, [r5, #12]
   dc0da:	db05      	blt.n	dc0e8 <strftime+0x2f4>
   dc0dc:	2264      	movs	r2, #100	; 0x64
   dc0de:	fb90 f1f2 	sdiv	r1, r0, r2
   dc0e2:	fb02 0011 	mls	r0, r2, r1, r0
   dc0e6:	e00a      	b.n	dc0fe <strftime+0x30a>
   dc0e8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dc0ec:	9307      	str	r3, [sp, #28]
   dc0ee:	f000 fe2d 	bl	dcd4c <abs>
   dc0f2:	2264      	movs	r2, #100	; 0x64
   dc0f4:	9b07      	ldr	r3, [sp, #28]
   dc0f6:	fb90 f1f2 	sdiv	r1, r0, r2
   dc0fa:	fb01 0012 	mls	r0, r1, r2, r0
   dc0fe:	4a8d      	ldr	r2, [pc, #564]	; (dc334 <strftime+0x540>)
   dc100:	9001      	str	r0, [sp, #4]
   dc102:	9300      	str	r3, [sp, #0]
   dc104:	4651      	mov	r1, sl
   dc106:	465b      	mov	r3, fp
   dc108:	4640      	mov	r0, r8
   dc10a:	f7fc ff29 	bl	d8f60 <sniprintf>
   dc10e:	e7d6      	b.n	dc0be <strftime+0x2ca>
   dc110:	2325      	movs	r3, #37	; 0x25
   dc112:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   dc116:	f1ba 0f00 	cmp.w	sl, #0
   dc11a:	d007      	beq.n	dc12c <strftime+0x338>
   dc11c:	f1b8 0f05 	cmp.w	r8, #5
   dc120:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
   dc124:	bf98      	it	ls
   dc126:	f04f 0806 	movls.w	r8, #6
   dc12a:	e004      	b.n	dc136 <strftime+0x342>
   dc12c:	232b      	movs	r3, #43	; 0x2b
   dc12e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   dc132:	f04f 080a 	mov.w	r8, #10
   dc136:	f1b8 0306 	subs.w	r3, r8, #6
   dc13a:	d102      	bne.n	dc142 <strftime+0x34e>
   dc13c:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   dc140:	e00a      	b.n	dc158 <strftime+0x364>
   dc142:	4a7d      	ldr	r2, [pc, #500]	; (dc338 <strftime+0x544>)
   dc144:	211e      	movs	r1, #30
   dc146:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   dc14a:	f7fc ff09 	bl	d8f60 <sniprintf>
   dc14e:	2800      	cmp	r0, #0
   dc150:	ddf4      	ble.n	dc13c <strftime+0x348>
   dc152:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   dc156:	4418      	add	r0, r3
   dc158:	4978      	ldr	r1, [pc, #480]	; (dc33c <strftime+0x548>)
   dc15a:	f7ff fde3 	bl	dbd24 <strcpy>
   dc15e:	462b      	mov	r3, r5
   dc160:	aa0a      	add	r2, sp, #40	; 0x28
   dc162:	1b31      	subs	r1, r6, r4
   dc164:	1938      	adds	r0, r7, r4
   dc166:	f7ff fe45 	bl	dbdf4 <strftime>
   dc16a:	2800      	cmp	r0, #0
   dc16c:	f340 82ec 	ble.w	dc748 <strftime+0x954>
   dc170:	4404      	add	r4, r0
   dc172:	e2de      	b.n	dc732 <strftime+0x93e>
   dc174:	4628      	mov	r0, r5
   dc176:	f7ff fddd 	bl	dbd34 <iso_year_adjust>
   dc17a:	4680      	mov	r8, r0
   dc17c:	6968      	ldr	r0, [r5, #20]
   dc17e:	2800      	cmp	r0, #0
   dc180:	db05      	blt.n	dc18e <strftime+0x39a>
   dc182:	2264      	movs	r2, #100	; 0x64
   dc184:	fb90 f1f2 	sdiv	r1, r0, r2
   dc188:	fb02 0011 	mls	r0, r2, r1, r0
   dc18c:	e008      	b.n	dc1a0 <strftime+0x3ac>
   dc18e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dc192:	f000 fddb 	bl	dcd4c <abs>
   dc196:	2264      	movs	r2, #100	; 0x64
   dc198:	fb90 f3f2 	sdiv	r3, r0, r2
   dc19c:	fb03 0012 	mls	r0, r3, r2, r0
   dc1a0:	f1b8 0f00 	cmp.w	r8, #0
   dc1a4:	da06      	bge.n	dc1b4 <strftime+0x3c0>
   dc1a6:	696a      	ldr	r2, [r5, #20]
   dc1a8:	4b65      	ldr	r3, [pc, #404]	; (dc340 <strftime+0x54c>)
   dc1aa:	429a      	cmp	r2, r3
   dc1ac:	bfb8      	it	lt
   dc1ae:	f04f 0801 	movlt.w	r8, #1
   dc1b2:	e006      	b.n	dc1c2 <strftime+0x3ce>
   dc1b4:	d005      	beq.n	dc1c2 <strftime+0x3ce>
   dc1b6:	696a      	ldr	r2, [r5, #20]
   dc1b8:	4b56      	ldr	r3, [pc, #344]	; (dc314 <strftime+0x520>)
   dc1ba:	429a      	cmp	r2, r3
   dc1bc:	bfb8      	it	lt
   dc1be:	f04f 38ff 	movlt.w	r8, #4294967295
   dc1c2:	2364      	movs	r3, #100	; 0x64
   dc1c4:	4440      	add	r0, r8
   dc1c6:	fb90 f2f3 	sdiv	r2, r0, r3
   dc1ca:	fb03 0012 	mls	r0, r3, r2, r0
   dc1ce:	4418      	add	r0, r3
   dc1d0:	e1f9      	b.n	dc5c6 <strftime+0x7d2>
   dc1d2:	4b50      	ldr	r3, [pc, #320]	; (dc314 <strftime+0x520>)
   dc1d4:	6969      	ldr	r1, [r5, #20]
   dc1d6:	9108      	str	r1, [sp, #32]
   dc1d8:	4299      	cmp	r1, r3
   dc1da:	bfac      	ite	ge
   dc1dc:	2300      	movge	r3, #0
   dc1de:	2301      	movlt	r3, #1
   dc1e0:	4628      	mov	r0, r5
   dc1e2:	9307      	str	r3, [sp, #28]
   dc1e4:	f7ff fda6 	bl	dbd34 <iso_year_adjust>
   dc1e8:	9908      	ldr	r1, [sp, #32]
   dc1ea:	2900      	cmp	r1, #0
   dc1ec:	4683      	mov	fp, r0
   dc1ee:	db04      	blt.n	dc1fa <strftime+0x406>
   dc1f0:	2364      	movs	r3, #100	; 0x64
   dc1f2:	fb91 f3f3 	sdiv	r3, r1, r3
   dc1f6:	3313      	adds	r3, #19
   dc1f8:	e008      	b.n	dc20c <strftime+0x418>
   dc1fa:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   dc1fe:	9108      	str	r1, [sp, #32]
   dc200:	f000 fda4 	bl	dcd4c <abs>
   dc204:	9908      	ldr	r1, [sp, #32]
   dc206:	2364      	movs	r3, #100	; 0x64
   dc208:	fb90 f3f3 	sdiv	r3, r0, r3
   dc20c:	6968      	ldr	r0, [r5, #20]
   dc20e:	2800      	cmp	r0, #0
   dc210:	db06      	blt.n	dc220 <strftime+0x42c>
   dc212:	f04f 0e64 	mov.w	lr, #100	; 0x64
   dc216:	fb90 fcfe 	sdiv	ip, r0, lr
   dc21a:	fb0e 001c 	mls	r0, lr, ip, r0
   dc21e:	e00d      	b.n	dc23c <strftime+0x448>
   dc220:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dc224:	9109      	str	r1, [sp, #36]	; 0x24
   dc226:	9308      	str	r3, [sp, #32]
   dc228:	f000 fd90 	bl	dcd4c <abs>
   dc22c:	f04f 0e64 	mov.w	lr, #100	; 0x64
   dc230:	9909      	ldr	r1, [sp, #36]	; 0x24
   dc232:	9b08      	ldr	r3, [sp, #32]
   dc234:	fb90 fcfe 	sdiv	ip, r0, lr
   dc238:	fb0c 001e 	mls	r0, ip, lr, r0
   dc23c:	f1bb 0f00 	cmp.w	fp, #0
   dc240:	da08      	bge.n	dc254 <strftime+0x460>
   dc242:	6969      	ldr	r1, [r5, #20]
   dc244:	4a3e      	ldr	r2, [pc, #248]	; (dc340 <strftime+0x54c>)
   dc246:	4291      	cmp	r1, r2
   dc248:	da0a      	bge.n	dc260 <strftime+0x46c>
   dc24a:	f04f 0b01 	mov.w	fp, #1
   dc24e:	f8cd b01c 	str.w	fp, [sp, #28]
   dc252:	e005      	b.n	dc260 <strftime+0x46c>
   dc254:	d004      	beq.n	dc260 <strftime+0x46c>
   dc256:	4a2f      	ldr	r2, [pc, #188]	; (dc314 <strftime+0x520>)
   dc258:	4291      	cmp	r1, r2
   dc25a:	bfb8      	it	lt
   dc25c:	f04f 3bff 	movlt.w	fp, #4294967295
   dc260:	eb0b 0200 	add.w	r2, fp, r0
   dc264:	1c50      	adds	r0, r2, #1
   dc266:	d102      	bne.n	dc26e <strftime+0x47a>
   dc268:	3b01      	subs	r3, #1
   dc26a:	2263      	movs	r2, #99	; 0x63
   dc26c:	e003      	b.n	dc276 <strftime+0x482>
   dc26e:	2a64      	cmp	r2, #100	; 0x64
   dc270:	bf04      	itt	eq
   dc272:	3301      	addeq	r3, #1
   dc274:	2200      	moveq	r2, #0
   dc276:	2064      	movs	r0, #100	; 0x64
   dc278:	fb00 2303 	mla	r3, r0, r3, r2
   dc27c:	9a07      	ldr	r2, [sp, #28]
   dc27e:	b142      	cbz	r2, dc292 <strftime+0x49e>
   dc280:	222d      	movs	r2, #45	; 0x2d
   dc282:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   dc286:	f1b8 0f00 	cmp.w	r8, #0
   dc28a:	d013      	beq.n	dc2b4 <strftime+0x4c0>
   dc28c:	f108 38ff 	add.w	r8, r8, #4294967295
   dc290:	e010      	b.n	dc2b4 <strftime+0x4c0>
   dc292:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   dc296:	d110      	bne.n	dc2ba <strftime+0x4c6>
   dc298:	f242 720f 	movw	r2, #9999	; 0x270f
   dc29c:	4293      	cmp	r3, r2
   dc29e:	d90c      	bls.n	dc2ba <strftime+0x4c6>
   dc2a0:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   dc2a4:	f1b8 0f00 	cmp.w	r8, #0
   dc2a8:	d1f0      	bne.n	dc28c <strftime+0x498>
   dc2aa:	aa12      	add	r2, sp, #72	; 0x48
   dc2ac:	2125      	movs	r1, #37	; 0x25
   dc2ae:	f802 1d1f 	strb.w	r1, [r2, #-31]!
   dc2b2:	e00a      	b.n	dc2ca <strftime+0x4d6>
   dc2b4:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   dc2b8:	e000      	b.n	dc2bc <strftime+0x4c8>
   dc2ba:	aa0a      	add	r2, sp, #40	; 0x28
   dc2bc:	2125      	movs	r1, #37	; 0x25
   dc2be:	7011      	strb	r1, [r2, #0]
   dc2c0:	f1ba 0f00 	cmp.w	sl, #0
   dc2c4:	d101      	bne.n	dc2ca <strftime+0x4d6>
   dc2c6:	1c50      	adds	r0, r2, #1
   dc2c8:	e002      	b.n	dc2d0 <strftime+0x4dc>
   dc2ca:	2130      	movs	r1, #48	; 0x30
   dc2cc:	1c90      	adds	r0, r2, #2
   dc2ce:	7051      	strb	r1, [r2, #1]
   dc2d0:	491c      	ldr	r1, [pc, #112]	; (dc344 <strftime+0x550>)
   dc2d2:	9307      	str	r3, [sp, #28]
   dc2d4:	f7ff fd26 	bl	dbd24 <strcpy>
   dc2d8:	9b07      	ldr	r3, [sp, #28]
   dc2da:	9300      	str	r3, [sp, #0]
   dc2dc:	e1ad      	b.n	dc63a <strftime+0x846>
   dc2de:	4a14      	ldr	r2, [pc, #80]	; (dc330 <strftime+0x53c>)
   dc2e0:	4912      	ldr	r1, [pc, #72]	; (dc32c <strftime+0x538>)
   dc2e2:	68ab      	ldr	r3, [r5, #8]
   dc2e4:	286b      	cmp	r0, #107	; 0x6b
   dc2e6:	bf08      	it	eq
   dc2e8:	460a      	moveq	r2, r1
   dc2ea:	e6e4      	b.n	dc0b6 <strftime+0x2c2>
   dc2ec:	68a9      	ldr	r1, [r5, #8]
   dc2ee:	230c      	movs	r3, #12
   dc2f0:	b131      	cbz	r1, dc300 <strftime+0x50c>
   dc2f2:	4299      	cmp	r1, r3
   dc2f4:	bf0e      	itee	eq
   dc2f6:	460b      	moveq	r3, r1
   dc2f8:	fb91 f2f3 	sdivne	r2, r1, r3
   dc2fc:	fb03 1312 	mlsne	r3, r3, r2, r1
   dc300:	4a0a      	ldr	r2, [pc, #40]	; (dc32c <strftime+0x538>)
   dc302:	490b      	ldr	r1, [pc, #44]	; (dc330 <strftime+0x53c>)
   dc304:	2849      	cmp	r0, #73	; 0x49
   dc306:	bf08      	it	eq
   dc308:	460a      	moveq	r2, r1
   dc30a:	e6d4      	b.n	dc0b6 <strftime+0x2c2>
   dc30c:	69eb      	ldr	r3, [r5, #28]
   dc30e:	4a0e      	ldr	r2, [pc, #56]	; (dc348 <strftime+0x554>)
   dc310:	3301      	adds	r3, #1
   dc312:	e6d0      	b.n	dc0b6 <strftime+0x2c2>
   dc314:	fffff894 	.word	0xfffff894
   dc318:	000dd903 	.word	0x000dd903
   dc31c:	000dd486 	.word	0x000dd486
   dc320:	000dd8f4 	.word	0x000dd8f4
   dc324:	000dd8fb 	.word	0x000dd8fb
   dc328:	000dd905 	.word	0x000dd905
   dc32c:	000dd907 	.word	0x000dd907
   dc330:	000dd915 	.word	0x000dd915
   dc334:	000dd90b 	.word	0x000dd90b
   dc338:	000dd91a 	.word	0x000dd91a
   dc33c:	000dd91e 	.word	0x000dd91e
   dc340:	fffff895 	.word	0xfffff895
   dc344:	000dd926 	.word	0x000dd926
   dc348:	000dd92a 	.word	0x000dd92a
   dc34c:	692b      	ldr	r3, [r5, #16]
   dc34e:	3301      	adds	r3, #1
   dc350:	e13d      	b.n	dc5ce <strftime+0x7da>
   dc352:	686b      	ldr	r3, [r5, #4]
   dc354:	e13b      	b.n	dc5ce <strftime+0x7da>
   dc356:	9b02      	ldr	r3, [sp, #8]
   dc358:	429c      	cmp	r4, r3
   dc35a:	f080 81f5 	bcs.w	dc748 <strftime+0x954>
   dc35e:	230a      	movs	r3, #10
   dc360:	e1e5      	b.n	dc72e <strftime+0x93a>
   dc362:	68ab      	ldr	r3, [r5, #8]
   dc364:	9a03      	ldr	r2, [sp, #12]
   dc366:	2b0b      	cmp	r3, #11
   dc368:	bfcc      	ite	gt
   dc36a:	23a4      	movgt	r3, #164	; 0xa4
   dc36c:	23a0      	movle	r3, #160	; 0xa0
   dc36e:	4413      	add	r3, r2
   dc370:	f8d3 8004 	ldr.w	r8, [r3, #4]
   dc374:	4640      	mov	r0, r8
   dc376:	f000 f9f1 	bl	dc75c <strlen>
   dc37a:	4bb2      	ldr	r3, [pc, #712]	; (dc644 <strftime+0x850>)
   dc37c:	f8d3 e000 	ldr.w	lr, [r3]
   dc380:	1939      	adds	r1, r7, r4
   dc382:	4642      	mov	r2, r8
   dc384:	4420      	add	r0, r4
   dc386:	4284      	cmp	r4, r0
   dc388:	f000 81d3 	beq.w	dc732 <strftime+0x93e>
   dc38c:	9b02      	ldr	r3, [sp, #8]
   dc38e:	429c      	cmp	r4, r3
   dc390:	f080 81da 	bcs.w	dc748 <strftime+0x954>
   dc394:	f899 3000 	ldrb.w	r3, [r9]
   dc398:	2b50      	cmp	r3, #80	; 0x50
   dc39a:	f104 0401 	add.w	r4, r4, #1
   dc39e:	7813      	ldrb	r3, [r2, #0]
   dc3a0:	d10a      	bne.n	dc3b8 <strftime+0x5c4>
   dc3a2:	eb0e 0c03 	add.w	ip, lr, r3
   dc3a6:	f89c c001 	ldrb.w	ip, [ip, #1]
   dc3aa:	f00c 0c03 	and.w	ip, ip, #3
   dc3ae:	f1bc 0f01 	cmp.w	ip, #1
   dc3b2:	bf08      	it	eq
   dc3b4:	3320      	addeq	r3, #32
   dc3b6:	b2db      	uxtb	r3, r3
   dc3b8:	f801 3b01 	strb.w	r3, [r1], #1
   dc3bc:	3201      	adds	r2, #1
   dc3be:	e7e2      	b.n	dc386 <strftime+0x592>
   dc3c0:	686b      	ldr	r3, [r5, #4]
   dc3c2:	9300      	str	r3, [sp, #0]
   dc3c4:	4aa0      	ldr	r2, [pc, #640]	; (dc648 <strftime+0x854>)
   dc3c6:	68ab      	ldr	r3, [r5, #8]
   dc3c8:	e139      	b.n	dc63e <strftime+0x84a>
   dc3ca:	6a2b      	ldr	r3, [r5, #32]
   dc3cc:	2b00      	cmp	r3, #0
   dc3ce:	db17      	blt.n	dc400 <strftime+0x60c>
   dc3d0:	f000 fb34 	bl	dca3c <__tz_lock>
   dc3d4:	9b06      	ldr	r3, [sp, #24]
   dc3d6:	b91b      	cbnz	r3, dc3e0 <strftime+0x5ec>
   dc3d8:	f000 fb32 	bl	dca40 <_tzset_unlocked>
   dc3dc:	2301      	movs	r3, #1
   dc3de:	9306      	str	r3, [sp, #24]
   dc3e0:	f000 fcfc 	bl	dcddc <__gettzinfo>
   dc3e4:	6a2b      	ldr	r3, [r5, #32]
   dc3e6:	2b00      	cmp	r3, #0
   dc3e8:	bfd4      	ite	le
   dc3ea:	2300      	movle	r3, #0
   dc3ec:	2301      	movgt	r3, #1
   dc3ee:	221c      	movs	r2, #28
   dc3f0:	fb02 0003 	mla	r0, r2, r3, r0
   dc3f4:	6a03      	ldr	r3, [r0, #32]
   dc3f6:	f1c3 0800 	rsb	r8, r3, #0
   dc3fa:	f000 fb20 	bl	dca3e <__tz_unlock>
   dc3fe:	e001      	b.n	dc404 <strftime+0x610>
   dc400:	f04f 0800 	mov.w	r8, #0
   dc404:	f8d5 e014 	ldr.w	lr, [r5, #20]
   dc408:	4670      	mov	r0, lr
   dc40a:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
   dc40e:	ea4f 71e0 	mov.w	r1, r0, asr #31
   dc412:	f141 33ff 	adc.w	r3, r1, #4294967295
   dc416:	2a00      	cmp	r2, #0
   dc418:	f173 0b00 	sbcs.w	fp, r3, #0
   dc41c:	ebc4 0c06 	rsb	ip, r4, r6
   dc420:	eb07 0a04 	add.w	sl, r7, r4
   dc424:	da03      	bge.n	dc42e <strftime+0x63a>
   dc426:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
   dc42a:	f141 33ff 	adc.w	r3, r1, #4294967295
   dc42e:	0891      	lsrs	r1, r2, #2
   dc430:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
   dc434:	109b      	asrs	r3, r3, #2
   dc436:	9104      	str	r1, [sp, #16]
   dc438:	9305      	str	r3, [sp, #20]
   dc43a:	f10e 31ff 	add.w	r1, lr, #4294967295
   dc43e:	2364      	movs	r3, #100	; 0x64
   dc440:	fb91 f1f3 	sdiv	r1, r1, r3
   dc444:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   dc448:	1a52      	subs	r2, r2, r1
   dc44a:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   dc44e:	f20e 102b 	addw	r0, lr, #299	; 0x12b
   dc452:	f44f 71c8 	mov.w	r1, #400	; 0x190
   dc456:	fb90 f1f1 	sdiv	r1, r0, r1
   dc45a:	1852      	adds	r2, r2, r1
   dc45c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   dc460:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
   dc464:	f240 116d 	movw	r1, #365	; 0x16d
   dc468:	fb01 fe0e 	mul.w	lr, r1, lr
   dc46c:	69e9      	ldr	r1, [r5, #28]
   dc46e:	eb12 020e 	adds.w	r2, r2, lr
   dc472:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
   dc476:	1852      	adds	r2, r2, r1
   dc478:	f04f 0e18 	mov.w	lr, #24
   dc47c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   dc480:	fba2 010e 	umull	r0, r1, r2, lr
   dc484:	fb0e 1103 	mla	r1, lr, r3, r1
   dc488:	68ab      	ldr	r3, [r5, #8]
   dc48a:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
   dc48e:	18c0      	adds	r0, r0, r3
   dc490:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   dc494:	fba0 230e 	umull	r2, r3, r0, lr
   dc498:	fb0e 3301 	mla	r3, lr, r1, r3
   dc49c:	6869      	ldr	r1, [r5, #4]
   dc49e:	1852      	adds	r2, r2, r1
   dc4a0:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   dc4a4:	fba2 010e 	umull	r0, r1, r2, lr
   dc4a8:	fb0e 1103 	mla	r1, lr, r3, r1
   dc4ac:	682b      	ldr	r3, [r5, #0]
   dc4ae:	4a67      	ldr	r2, [pc, #412]	; (dc64c <strftime+0x858>)
   dc4b0:	18c0      	adds	r0, r0, r3
   dc4b2:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   dc4b6:	ebb0 0008 	subs.w	r0, r0, r8
   dc4ba:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
   dc4be:	e9cd 0100 	strd	r0, r1, [sp]
   dc4c2:	4661      	mov	r1, ip
   dc4c4:	4650      	mov	r0, sl
   dc4c6:	f7fc fd4b 	bl	d8f60 <sniprintf>
   dc4ca:	e5f8      	b.n	dc0be <strftime+0x2ca>
   dc4cc:	682b      	ldr	r3, [r5, #0]
   dc4ce:	e07e      	b.n	dc5ce <strftime+0x7da>
   dc4d0:	9b02      	ldr	r3, [sp, #8]
   dc4d2:	429c      	cmp	r4, r3
   dc4d4:	f080 8138 	bcs.w	dc748 <strftime+0x954>
   dc4d8:	2309      	movs	r3, #9
   dc4da:	e128      	b.n	dc72e <strftime+0x93a>
   dc4dc:	682b      	ldr	r3, [r5, #0]
   dc4de:	9301      	str	r3, [sp, #4]
   dc4e0:	686b      	ldr	r3, [r5, #4]
   dc4e2:	9300      	str	r3, [sp, #0]
   dc4e4:	4a5a      	ldr	r2, [pc, #360]	; (dc650 <strftime+0x85c>)
   dc4e6:	68ab      	ldr	r3, [r5, #8]
   dc4e8:	1b31      	subs	r1, r6, r4
   dc4ea:	1938      	adds	r0, r7, r4
   dc4ec:	e60d      	b.n	dc10a <strftime+0x316>
   dc4ee:	9b02      	ldr	r3, [sp, #8]
   dc4f0:	429c      	cmp	r4, r3
   dc4f2:	f080 8129 	bcs.w	dc748 <strftime+0x954>
   dc4f6:	69ab      	ldr	r3, [r5, #24]
   dc4f8:	1c62      	adds	r2, r4, #1
   dc4fa:	b90b      	cbnz	r3, dc500 <strftime+0x70c>
   dc4fc:	2337      	movs	r3, #55	; 0x37
   dc4fe:	e000      	b.n	dc502 <strftime+0x70e>
   dc500:	3330      	adds	r3, #48	; 0x30
   dc502:	553b      	strb	r3, [r7, r4]
   dc504:	4614      	mov	r4, r2
   dc506:	e114      	b.n	dc732 <strftime+0x93e>
   dc508:	69eb      	ldr	r3, [r5, #28]
   dc50a:	69aa      	ldr	r2, [r5, #24]
   dc50c:	3307      	adds	r3, #7
   dc50e:	1a9b      	subs	r3, r3, r2
   dc510:	2207      	movs	r2, #7
   dc512:	fb93 f3f2 	sdiv	r3, r3, r2
   dc516:	e05a      	b.n	dc5ce <strftime+0x7da>
   dc518:	4628      	mov	r0, r5
   dc51a:	f7ff fc0b 	bl	dbd34 <iso_year_adjust>
   dc51e:	69aa      	ldr	r2, [r5, #24]
   dc520:	b10a      	cbz	r2, dc526 <strftime+0x732>
   dc522:	1e53      	subs	r3, r2, #1
   dc524:	e000      	b.n	dc528 <strftime+0x734>
   dc526:	2306      	movs	r3, #6
   dc528:	2800      	cmp	r0, #0
   dc52a:	dc2f      	bgt.n	dc58c <strftime+0x798>
   dc52c:	69ea      	ldr	r2, [r5, #28]
   dc52e:	d101      	bne.n	dc534 <strftime+0x740>
   dc530:	320a      	adds	r2, #10
   dc532:	e03b      	b.n	dc5ac <strftime+0x7b8>
   dc534:	1a9a      	subs	r2, r3, r2
   dc536:	696b      	ldr	r3, [r5, #20]
   dc538:	f240 716b 	movw	r1, #1899	; 0x76b
   dc53c:	2b00      	cmp	r3, #0
   dc53e:	bfb4      	ite	lt
   dc540:	4608      	movlt	r0, r1
   dc542:	f06f 0064 	mvnge.w	r0, #100	; 0x64
   dc546:	4418      	add	r0, r3
   dc548:	0781      	lsls	r1, r0, #30
   dc54a:	d107      	bne.n	dc55c <strftime+0x768>
   dc54c:	4601      	mov	r1, r0
   dc54e:	f04f 0e64 	mov.w	lr, #100	; 0x64
   dc552:	fb90 f0fe 	sdiv	r0, r0, lr
   dc556:	fb0e 1110 	mls	r1, lr, r0, r1
   dc55a:	b981      	cbnz	r1, dc57e <strftime+0x78a>
   dc55c:	2b00      	cmp	r3, #0
   dc55e:	f240 716b 	movw	r1, #1899	; 0x76b
   dc562:	bfa8      	it	ge
   dc564:	f06f 0164 	mvnge.w	r1, #100	; 0x64
   dc568:	4419      	add	r1, r3
   dc56a:	f44f 73c8 	mov.w	r3, #400	; 0x190
   dc56e:	fb91 f0f3 	sdiv	r0, r1, r3
   dc572:	fb03 1110 	mls	r1, r3, r0, r1
   dc576:	fab1 f181 	clz	r1, r1
   dc57a:	0949      	lsrs	r1, r1, #5
   dc57c:	e000      	b.n	dc580 <strftime+0x78c>
   dc57e:	2101      	movs	r1, #1
   dc580:	1a52      	subs	r2, r2, r1
   dc582:	2a05      	cmp	r2, #5
   dc584:	bfb4      	ite	lt
   dc586:	2335      	movlt	r3, #53	; 0x35
   dc588:	2334      	movge	r3, #52	; 0x34
   dc58a:	e020      	b.n	dc5ce <strftime+0x7da>
   dc58c:	2301      	movs	r3, #1
   dc58e:	e01e      	b.n	dc5ce <strftime+0x7da>
   dc590:	9b02      	ldr	r3, [sp, #8]
   dc592:	429c      	cmp	r4, r3
   dc594:	f080 80d8 	bcs.w	dc748 <strftime+0x954>
   dc598:	69ab      	ldr	r3, [r5, #24]
   dc59a:	3330      	adds	r3, #48	; 0x30
   dc59c:	e0c7      	b.n	dc72e <strftime+0x93a>
   dc59e:	69aa      	ldr	r2, [r5, #24]
   dc5a0:	b10a      	cbz	r2, dc5a6 <strftime+0x7b2>
   dc5a2:	1e53      	subs	r3, r2, #1
   dc5a4:	e000      	b.n	dc5a8 <strftime+0x7b4>
   dc5a6:	2306      	movs	r3, #6
   dc5a8:	69ea      	ldr	r2, [r5, #28]
   dc5aa:	3207      	adds	r2, #7
   dc5ac:	1ad2      	subs	r2, r2, r3
   dc5ae:	2307      	movs	r3, #7
   dc5b0:	fb92 f3f3 	sdiv	r3, r2, r3
   dc5b4:	e00b      	b.n	dc5ce <strftime+0x7da>
   dc5b6:	6968      	ldr	r0, [r5, #20]
   dc5b8:	2800      	cmp	r0, #0
   dc5ba:	da03      	bge.n	dc5c4 <strftime+0x7d0>
   dc5bc:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dc5c0:	f000 fbc4 	bl	dcd4c <abs>
   dc5c4:	2364      	movs	r3, #100	; 0x64
   dc5c6:	fb90 f2f3 	sdiv	r2, r0, r3
   dc5ca:	fb02 0313 	mls	r3, r2, r3, r0
   dc5ce:	4a21      	ldr	r2, [pc, #132]	; (dc654 <strftime+0x860>)
   dc5d0:	e571      	b.n	dc0b6 <strftime+0x2c2>
   dc5d2:	696b      	ldr	r3, [r5, #20]
   dc5d4:	4a20      	ldr	r2, [pc, #128]	; (dc658 <strftime+0x864>)
   dc5d6:	4293      	cmp	r3, r2
   dc5d8:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
   dc5dc:	da05      	bge.n	dc5ea <strftime+0x7f6>
   dc5de:	232d      	movs	r3, #45	; 0x2d
   dc5e0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   dc5e4:	f1cb 0b00 	rsb	fp, fp, #0
   dc5e8:	e008      	b.n	dc5fc <strftime+0x808>
   dc5ea:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   dc5ee:	d10d      	bne.n	dc60c <strftime+0x818>
   dc5f0:	f242 730f 	movw	r3, #9999	; 0x270f
   dc5f4:	459b      	cmp	fp, r3
   dc5f6:	d911      	bls.n	dc61c <strftime+0x828>
   dc5f8:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   dc5fc:	f1b8 0f00 	cmp.w	r8, #0
   dc600:	d001      	beq.n	dc606 <strftime+0x812>
   dc602:	f108 38ff 	add.w	r8, r8, #4294967295
   dc606:	f10d 0329 	add.w	r3, sp, #41	; 0x29
   dc60a:	e000      	b.n	dc60e <strftime+0x81a>
   dc60c:	ab0a      	add	r3, sp, #40	; 0x28
   dc60e:	2225      	movs	r2, #37	; 0x25
   dc610:	701a      	strb	r2, [r3, #0]
   dc612:	f1ba 0f00 	cmp.w	sl, #0
   dc616:	d108      	bne.n	dc62a <strftime+0x836>
   dc618:	1c58      	adds	r0, r3, #1
   dc61a:	e009      	b.n	dc630 <strftime+0x83c>
   dc61c:	f1b8 0f00 	cmp.w	r8, #0
   dc620:	d1f4      	bne.n	dc60c <strftime+0x818>
   dc622:	2325      	movs	r3, #37	; 0x25
   dc624:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   dc628:	ab0a      	add	r3, sp, #40	; 0x28
   dc62a:	2230      	movs	r2, #48	; 0x30
   dc62c:	1c98      	adds	r0, r3, #2
   dc62e:	705a      	strb	r2, [r3, #1]
   dc630:	490a      	ldr	r1, [pc, #40]	; (dc65c <strftime+0x868>)
   dc632:	f7ff fb77 	bl	dbd24 <strcpy>
   dc636:	f8cd b000 	str.w	fp, [sp]
   dc63a:	4643      	mov	r3, r8
   dc63c:	aa0a      	add	r2, sp, #40	; 0x28
   dc63e:	1b31      	subs	r1, r6, r4
   dc640:	1938      	adds	r0, r7, r4
   dc642:	e03e      	b.n	dc6c2 <strftime+0x8ce>
   dc644:	2003d744 	.word	0x2003d744
   dc648:	000dd939 	.word	0x000dd939
   dc64c:	000dd92f 	.word	0x000dd92f
   dc650:	000dd934 	.word	0x000dd934
   dc654:	000dd915 	.word	0x000dd915
   dc658:	fffff894 	.word	0xfffff894
   dc65c:	000dd926 	.word	0x000dd926
   dc660:	6a2b      	ldr	r3, [r5, #32]
   dc662:	2b00      	cmp	r3, #0
   dc664:	db65      	blt.n	dc732 <strftime+0x93e>
   dc666:	f000 f9e9 	bl	dca3c <__tz_lock>
   dc66a:	9b06      	ldr	r3, [sp, #24]
   dc66c:	b91b      	cbnz	r3, dc676 <strftime+0x882>
   dc66e:	f000 f9e7 	bl	dca40 <_tzset_unlocked>
   dc672:	2301      	movs	r3, #1
   dc674:	9306      	str	r3, [sp, #24]
   dc676:	f000 fbb1 	bl	dcddc <__gettzinfo>
   dc67a:	6a2b      	ldr	r3, [r5, #32]
   dc67c:	2b00      	cmp	r3, #0
   dc67e:	bfd4      	ite	le
   dc680:	2300      	movle	r3, #0
   dc682:	2301      	movgt	r3, #1
   dc684:	221c      	movs	r2, #28
   dc686:	fb02 0003 	mla	r0, r2, r3, r0
   dc68a:	eb07 0a04 	add.w	sl, r7, r4
   dc68e:	6a03      	ldr	r3, [r0, #32]
   dc690:	f1c3 0800 	rsb	r8, r3, #0
   dc694:	f000 f9d3 	bl	dca3e <__tz_unlock>
   dc698:	233c      	movs	r3, #60	; 0x3c
   dc69a:	fb98 f0f3 	sdiv	r0, r8, r3
   dc69e:	9307      	str	r3, [sp, #28]
   dc6a0:	f000 fc38 	bl	dcf14 <labs>
   dc6a4:	9b07      	ldr	r3, [sp, #28]
   dc6a6:	fb90 f2f3 	sdiv	r2, r0, r3
   dc6aa:	ebc4 0b06 	rsb	fp, r4, r6
   dc6ae:	fb02 0013 	mls	r0, r2, r3, r0
   dc6b2:	4a28      	ldr	r2, [pc, #160]	; (dc754 <strftime+0x960>)
   dc6b4:	9000      	str	r0, [sp, #0]
   dc6b6:	4659      	mov	r1, fp
   dc6b8:	4650      	mov	r0, sl
   dc6ba:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dc6be:	fb98 f3f3 	sdiv	r3, r8, r3
   dc6c2:	f7fc fc4d 	bl	d8f60 <sniprintf>
   dc6c6:	e4fa      	b.n	dc0be <strftime+0x2ca>
   dc6c8:	4404      	add	r4, r0
   dc6ca:	42a6      	cmp	r6, r4
   dc6cc:	d831      	bhi.n	dc732 <strftime+0x93e>
   dc6ce:	e03b      	b.n	dc748 <strftime+0x954>
   dc6d0:	6a2b      	ldr	r3, [r5, #32]
   dc6d2:	2b00      	cmp	r3, #0
   dc6d4:	db2d      	blt.n	dc732 <strftime+0x93e>
   dc6d6:	f000 f9b1 	bl	dca3c <__tz_lock>
   dc6da:	9b06      	ldr	r3, [sp, #24]
   dc6dc:	b91b      	cbnz	r3, dc6e6 <strftime+0x8f2>
   dc6de:	f000 f9af 	bl	dca40 <_tzset_unlocked>
   dc6e2:	2301      	movs	r3, #1
   dc6e4:	9306      	str	r3, [sp, #24]
   dc6e6:	6a2b      	ldr	r3, [r5, #32]
   dc6e8:	4a1b      	ldr	r2, [pc, #108]	; (dc758 <strftime+0x964>)
   dc6ea:	2b00      	cmp	r3, #0
   dc6ec:	bfd4      	ite	le
   dc6ee:	2300      	movle	r3, #0
   dc6f0:	2301      	movgt	r3, #1
   dc6f2:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   dc6f6:	4640      	mov	r0, r8
   dc6f8:	f000 f830 	bl	dc75c <strlen>
   dc6fc:	f108 38ff 	add.w	r8, r8, #4294967295
   dc700:	193b      	adds	r3, r7, r4
   dc702:	4420      	add	r0, r4
   dc704:	4284      	cmp	r4, r0
   dc706:	d00b      	beq.n	dc720 <strftime+0x92c>
   dc708:	9a02      	ldr	r2, [sp, #8]
   dc70a:	4294      	cmp	r4, r2
   dc70c:	d205      	bcs.n	dc71a <strftime+0x926>
   dc70e:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dc712:	f803 2b01 	strb.w	r2, [r3], #1
   dc716:	3401      	adds	r4, #1
   dc718:	e7f4      	b.n	dc704 <strftime+0x910>
   dc71a:	f000 f990 	bl	dca3e <__tz_unlock>
   dc71e:	e013      	b.n	dc748 <strftime+0x954>
   dc720:	f000 f98d 	bl	dca3e <__tz_unlock>
   dc724:	e005      	b.n	dc732 <strftime+0x93e>
   dc726:	9b02      	ldr	r3, [sp, #8]
   dc728:	429c      	cmp	r4, r3
   dc72a:	d20d      	bcs.n	dc748 <strftime+0x954>
   dc72c:	2325      	movs	r3, #37	; 0x25
   dc72e:	553b      	strb	r3, [r7, r4]
   dc730:	3401      	adds	r4, #1
   dc732:	f899 3000 	ldrb.w	r3, [r9]
   dc736:	b11b      	cbz	r3, dc740 <strftime+0x94c>
   dc738:	f109 0901 	add.w	r9, r9, #1
   dc73c:	f7ff bb69 	b.w	dbe12 <strftime+0x1e>
   dc740:	b126      	cbz	r6, dc74c <strftime+0x958>
   dc742:	2300      	movs	r3, #0
   dc744:	553b      	strb	r3, [r7, r4]
   dc746:	e001      	b.n	dc74c <strftime+0x958>
   dc748:	2000      	movs	r0, #0
   dc74a:	e000      	b.n	dc74e <strftime+0x95a>
   dc74c:	4620      	mov	r0, r4
   dc74e:	b013      	add	sp, #76	; 0x4c
   dc750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc754:	000dd943 	.word	0x000dd943
   dc758:	2003d7ac 	.word	0x2003d7ac

000dc75c <strlen>:
   dc75c:	4603      	mov	r3, r0
   dc75e:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc762:	2a00      	cmp	r2, #0
   dc764:	d1fb      	bne.n	dc75e <strlen+0x2>
   dc766:	1a18      	subs	r0, r3, r0
   dc768:	3801      	subs	r0, #1
   dc76a:	4770      	bx	lr

000dc76c <strncmp>:
   dc76c:	b530      	push	{r4, r5, lr}
   dc76e:	b182      	cbz	r2, dc792 <strncmp+0x26>
   dc770:	1e45      	subs	r5, r0, #1
   dc772:	3901      	subs	r1, #1
   dc774:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   dc778:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dc77c:	42a3      	cmp	r3, r4
   dc77e:	d106      	bne.n	dc78e <strncmp+0x22>
   dc780:	43ec      	mvns	r4, r5
   dc782:	4414      	add	r4, r2
   dc784:	42e0      	cmn	r0, r4
   dc786:	d001      	beq.n	dc78c <strncmp+0x20>
   dc788:	2b00      	cmp	r3, #0
   dc78a:	d1f3      	bne.n	dc774 <strncmp+0x8>
   dc78c:	461c      	mov	r4, r3
   dc78e:	1b18      	subs	r0, r3, r4
   dc790:	bd30      	pop	{r4, r5, pc}
   dc792:	4610      	mov	r0, r2
   dc794:	bd30      	pop	{r4, r5, pc}

000dc796 <strncpy>:
   dc796:	b510      	push	{r4, lr}
   dc798:	4603      	mov	r3, r0
   dc79a:	b142      	cbz	r2, dc7ae <strncpy+0x18>
   dc79c:	f811 4b01 	ldrb.w	r4, [r1], #1
   dc7a0:	f803 4b01 	strb.w	r4, [r3], #1
   dc7a4:	3a01      	subs	r2, #1
   dc7a6:	2c00      	cmp	r4, #0
   dc7a8:	d1f7      	bne.n	dc79a <strncpy+0x4>
   dc7aa:	441a      	add	r2, r3
   dc7ac:	e000      	b.n	dc7b0 <strncpy+0x1a>
   dc7ae:	bd10      	pop	{r4, pc}
   dc7b0:	4293      	cmp	r3, r2
   dc7b2:	d002      	beq.n	dc7ba <strncpy+0x24>
   dc7b4:	f803 4b01 	strb.w	r4, [r3], #1
   dc7b8:	e7fa      	b.n	dc7b0 <strncpy+0x1a>
   dc7ba:	bd10      	pop	{r4, pc}

000dc7bc <_strtoul_r>:
   dc7bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc7c0:	4680      	mov	r8, r0
   dc7c2:	483c      	ldr	r0, [pc, #240]	; (dc8b4 <_strtoul_r+0xf8>)
   dc7c4:	f8d0 9000 	ldr.w	r9, [r0]
   dc7c8:	460e      	mov	r6, r1
   dc7ca:	4635      	mov	r5, r6
   dc7cc:	f815 4b01 	ldrb.w	r4, [r5], #1
   dc7d0:	eb09 0004 	add.w	r0, r9, r4
   dc7d4:	7840      	ldrb	r0, [r0, #1]
   dc7d6:	f000 0008 	and.w	r0, r0, #8
   dc7da:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   dc7de:	b108      	cbz	r0, dc7e4 <_strtoul_r+0x28>
   dc7e0:	462e      	mov	r6, r5
   dc7e2:	e7f2      	b.n	dc7ca <_strtoul_r+0xe>
   dc7e4:	2c2d      	cmp	r4, #45	; 0x2d
   dc7e6:	d103      	bne.n	dc7f0 <_strtoul_r+0x34>
   dc7e8:	1cb5      	adds	r5, r6, #2
   dc7ea:	7874      	ldrb	r4, [r6, #1]
   dc7ec:	2701      	movs	r7, #1
   dc7ee:	e003      	b.n	dc7f8 <_strtoul_r+0x3c>
   dc7f0:	2c2b      	cmp	r4, #43	; 0x2b
   dc7f2:	bf04      	itt	eq
   dc7f4:	7874      	ldrbeq	r4, [r6, #1]
   dc7f6:	1cb5      	addeq	r5, r6, #2
   dc7f8:	b113      	cbz	r3, dc800 <_strtoul_r+0x44>
   dc7fa:	2b10      	cmp	r3, #16
   dc7fc:	d10a      	bne.n	dc814 <_strtoul_r+0x58>
   dc7fe:	e053      	b.n	dc8a8 <_strtoul_r+0xec>
   dc800:	2c30      	cmp	r4, #48	; 0x30
   dc802:	d14f      	bne.n	dc8a4 <_strtoul_r+0xe8>
   dc804:	7828      	ldrb	r0, [r5, #0]
   dc806:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dc80a:	2858      	cmp	r0, #88	; 0x58
   dc80c:	d145      	bne.n	dc89a <_strtoul_r+0xde>
   dc80e:	786c      	ldrb	r4, [r5, #1]
   dc810:	2310      	movs	r3, #16
   dc812:	3502      	adds	r5, #2
   dc814:	f04f 3cff 	mov.w	ip, #4294967295
   dc818:	2600      	movs	r6, #0
   dc81a:	fbbc fcf3 	udiv	ip, ip, r3
   dc81e:	fb03 fa0c 	mul.w	sl, r3, ip
   dc822:	ea6f 0a0a 	mvn.w	sl, sl
   dc826:	4630      	mov	r0, r6
   dc828:	eb09 0e04 	add.w	lr, r9, r4
   dc82c:	f89e e001 	ldrb.w	lr, [lr, #1]
   dc830:	f01e 0f04 	tst.w	lr, #4
   dc834:	d001      	beq.n	dc83a <_strtoul_r+0x7e>
   dc836:	3c30      	subs	r4, #48	; 0x30
   dc838:	e00b      	b.n	dc852 <_strtoul_r+0x96>
   dc83a:	f01e 0e03 	ands.w	lr, lr, #3
   dc83e:	d01a      	beq.n	dc876 <_strtoul_r+0xba>
   dc840:	f1be 0f01 	cmp.w	lr, #1
   dc844:	bf0c      	ite	eq
   dc846:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dc84a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dc84e:	ebce 0404 	rsb	r4, lr, r4
   dc852:	42a3      	cmp	r3, r4
   dc854:	dd0f      	ble.n	dc876 <_strtoul_r+0xba>
   dc856:	2e00      	cmp	r6, #0
   dc858:	db08      	blt.n	dc86c <_strtoul_r+0xb0>
   dc85a:	4560      	cmp	r0, ip
   dc85c:	d806      	bhi.n	dc86c <_strtoul_r+0xb0>
   dc85e:	d101      	bne.n	dc864 <_strtoul_r+0xa8>
   dc860:	4554      	cmp	r4, sl
   dc862:	dc03      	bgt.n	dc86c <_strtoul_r+0xb0>
   dc864:	fb03 4000 	mla	r0, r3, r0, r4
   dc868:	2601      	movs	r6, #1
   dc86a:	e001      	b.n	dc870 <_strtoul_r+0xb4>
   dc86c:	f04f 36ff 	mov.w	r6, #4294967295
   dc870:	f815 4b01 	ldrb.w	r4, [r5], #1
   dc874:	e7d8      	b.n	dc828 <_strtoul_r+0x6c>
   dc876:	2e00      	cmp	r6, #0
   dc878:	da07      	bge.n	dc88a <_strtoul_r+0xce>
   dc87a:	2322      	movs	r3, #34	; 0x22
   dc87c:	f8c8 3000 	str.w	r3, [r8]
   dc880:	f04f 30ff 	mov.w	r0, #4294967295
   dc884:	b92a      	cbnz	r2, dc892 <_strtoul_r+0xd6>
   dc886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc88a:	b107      	cbz	r7, dc88e <_strtoul_r+0xd2>
   dc88c:	4240      	negs	r0, r0
   dc88e:	b172      	cbz	r2, dc8ae <_strtoul_r+0xf2>
   dc890:	b106      	cbz	r6, dc894 <_strtoul_r+0xd8>
   dc892:	1e69      	subs	r1, r5, #1
   dc894:	6011      	str	r1, [r2, #0]
   dc896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc89a:	2430      	movs	r4, #48	; 0x30
   dc89c:	2b00      	cmp	r3, #0
   dc89e:	d1b9      	bne.n	dc814 <_strtoul_r+0x58>
   dc8a0:	2308      	movs	r3, #8
   dc8a2:	e7b7      	b.n	dc814 <_strtoul_r+0x58>
   dc8a4:	230a      	movs	r3, #10
   dc8a6:	e7b5      	b.n	dc814 <_strtoul_r+0x58>
   dc8a8:	2c30      	cmp	r4, #48	; 0x30
   dc8aa:	d0ab      	beq.n	dc804 <_strtoul_r+0x48>
   dc8ac:	e7b2      	b.n	dc814 <_strtoul_r+0x58>
   dc8ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc8b2:	bf00      	nop
   dc8b4:	2003d744 	.word	0x2003d744

000dc8b8 <strtoul>:
   dc8b8:	4613      	mov	r3, r2
   dc8ba:	460a      	mov	r2, r1
   dc8bc:	4601      	mov	r1, r0
   dc8be:	4802      	ldr	r0, [pc, #8]	; (dc8c8 <strtoul+0x10>)
   dc8c0:	6800      	ldr	r0, [r0, #0]
   dc8c2:	f7ff bf7b 	b.w	dc7bc <_strtoul_r>
   dc8c6:	bf00      	nop
   dc8c8:	2003d7a8 	.word	0x2003d7a8

000dc8cc <__get_current_time_locale>:
   dc8cc:	4b04      	ldr	r3, [pc, #16]	; (dc8e0 <__get_current_time_locale+0x14>)
   dc8ce:	4a05      	ldr	r2, [pc, #20]	; (dc8e4 <__get_current_time_locale+0x18>)
   dc8d0:	6818      	ldr	r0, [r3, #0]
   dc8d2:	4b05      	ldr	r3, [pc, #20]	; (dc8e8 <__get_current_time_locale+0x1c>)
   dc8d4:	2800      	cmp	r0, #0
   dc8d6:	bf14      	ite	ne
   dc8d8:	4610      	movne	r0, r2
   dc8da:	4618      	moveq	r0, r3
   dc8dc:	4770      	bx	lr
   dc8de:	bf00      	nop
   dc8e0:	2003e3e4 	.word	0x2003e3e4
   dc8e4:	2003e3e8 	.word	0x2003e3e8
   dc8e8:	000dda80 	.word	0x000dda80

000dc8ec <__tzcalc_limits>:
   dc8ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc8f0:	4604      	mov	r4, r0
   dc8f2:	f000 fa73 	bl	dcddc <__gettzinfo>
   dc8f6:	f240 73b1 	movw	r3, #1969	; 0x7b1
   dc8fa:	429c      	cmp	r4, r3
   dc8fc:	f340 8096 	ble.w	dca2c <__tzcalc_limits+0x140>
   dc900:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   dc904:	18e3      	adds	r3, r4, r3
   dc906:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   dc90a:	109b      	asrs	r3, r3, #2
   dc90c:	f240 156d 	movw	r5, #365	; 0x16d
   dc910:	fb05 3502 	mla	r5, r5, r2, r3
   dc914:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   dc918:	f06f 0363 	mvn.w	r3, #99	; 0x63
   dc91c:	fb92 f3f3 	sdiv	r3, r2, r3
   dc920:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   dc924:	442b      	add	r3, r5
   dc926:	18a5      	adds	r5, r4, r2
   dc928:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dc92c:	fb95 f5f2 	sdiv	r5, r5, r2
   dc930:	441d      	add	r5, r3
   dc932:	2364      	movs	r3, #100	; 0x64
   dc934:	fb94 f7f2 	sdiv	r7, r4, r2
   dc938:	fb94 f6f3 	sdiv	r6, r4, r3
   dc93c:	fb02 4717 	mls	r7, r2, r7, r4
   dc940:	fb03 4616 	mls	r6, r3, r6, r4
   dc944:	f100 0338 	add.w	r3, r0, #56	; 0x38
   dc948:	fab7 fe87 	clz	lr, r7
   dc94c:	9301      	str	r3, [sp, #4]
   dc94e:	f004 0303 	and.w	r3, r4, #3
   dc952:	6044      	str	r4, [r0, #4]
   dc954:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   dc958:	4601      	mov	r1, r0
   dc95a:	9300      	str	r3, [sp, #0]
   dc95c:	f04f 0c07 	mov.w	ip, #7
   dc960:	7a0b      	ldrb	r3, [r1, #8]
   dc962:	2b4a      	cmp	r3, #74	; 0x4a
   dc964:	d10e      	bne.n	dc984 <__tzcalc_limits+0x98>
   dc966:	694b      	ldr	r3, [r1, #20]
   dc968:	9a00      	ldr	r2, [sp, #0]
   dc96a:	18ec      	adds	r4, r5, r3
   dc96c:	b902      	cbnz	r2, dc970 <__tzcalc_limits+0x84>
   dc96e:	b906      	cbnz	r6, dc972 <__tzcalc_limits+0x86>
   dc970:	b927      	cbnz	r7, dc97c <__tzcalc_limits+0x90>
   dc972:	2b3b      	cmp	r3, #59	; 0x3b
   dc974:	bfd4      	ite	le
   dc976:	2300      	movle	r3, #0
   dc978:	2301      	movgt	r3, #1
   dc97a:	e000      	b.n	dc97e <__tzcalc_limits+0x92>
   dc97c:	2300      	movs	r3, #0
   dc97e:	4423      	add	r3, r4
   dc980:	3b01      	subs	r3, #1
   dc982:	e03f      	b.n	dca04 <__tzcalc_limits+0x118>
   dc984:	2b44      	cmp	r3, #68	; 0x44
   dc986:	d102      	bne.n	dc98e <__tzcalc_limits+0xa2>
   dc988:	694b      	ldr	r3, [r1, #20]
   dc98a:	442b      	add	r3, r5
   dc98c:	e03a      	b.n	dca04 <__tzcalc_limits+0x118>
   dc98e:	9b00      	ldr	r3, [sp, #0]
   dc990:	b92b      	cbnz	r3, dc99e <__tzcalc_limits+0xb2>
   dc992:	2e00      	cmp	r6, #0
   dc994:	bf0c      	ite	eq
   dc996:	46f0      	moveq	r8, lr
   dc998:	f04f 0801 	movne.w	r8, #1
   dc99c:	e000      	b.n	dc9a0 <__tzcalc_limits+0xb4>
   dc99e:	46f0      	mov	r8, lr
   dc9a0:	4b24      	ldr	r3, [pc, #144]	; (dca34 <__tzcalc_limits+0x148>)
   dc9a2:	68cc      	ldr	r4, [r1, #12]
   dc9a4:	2230      	movs	r2, #48	; 0x30
   dc9a6:	fb02 3808 	mla	r8, r2, r8, r3
   dc9aa:	f1a8 0a04 	sub.w	sl, r8, #4
   dc9ae:	46a9      	mov	r9, r5
   dc9b0:	2301      	movs	r3, #1
   dc9b2:	42a3      	cmp	r3, r4
   dc9b4:	da04      	bge.n	dc9c0 <__tzcalc_limits+0xd4>
   dc9b6:	f85a bf04 	ldr.w	fp, [sl, #4]!
   dc9ba:	3301      	adds	r3, #1
   dc9bc:	44d9      	add	r9, fp
   dc9be:	e7f8      	b.n	dc9b2 <__tzcalc_limits+0xc6>
   dc9c0:	f109 0304 	add.w	r3, r9, #4
   dc9c4:	fb93 fbfc 	sdiv	fp, r3, ip
   dc9c8:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   dc9cc:	2c01      	cmp	r4, #1
   dc9ce:	ebca 0a03 	rsb	sl, sl, r3
   dc9d2:	694b      	ldr	r3, [r1, #20]
   dc9d4:	bfb8      	it	lt
   dc9d6:	2401      	movlt	r4, #1
   dc9d8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   dc9dc:	ebb3 0a0a 	subs.w	sl, r3, sl
   dc9e0:	690b      	ldr	r3, [r1, #16]
   dc9e2:	f104 34ff 	add.w	r4, r4, #4294967295
   dc9e6:	f103 33ff 	add.w	r3, r3, #4294967295
   dc9ea:	bf48      	it	mi
   dc9ec:	f10a 0a07 	addmi.w	sl, sl, #7
   dc9f0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dc9f4:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   dc9f8:	4453      	add	r3, sl
   dc9fa:	42a3      	cmp	r3, r4
   dc9fc:	db01      	blt.n	dca02 <__tzcalc_limits+0x116>
   dc9fe:	3b07      	subs	r3, #7
   dca00:	e7fb      	b.n	dc9fa <__tzcalc_limits+0x10e>
   dca02:	444b      	add	r3, r9
   dca04:	698c      	ldr	r4, [r1, #24]
   dca06:	4a0c      	ldr	r2, [pc, #48]	; (dca38 <__tzcalc_limits+0x14c>)
   dca08:	fb02 4303 	mla	r3, r2, r3, r4
   dca0c:	6a0c      	ldr	r4, [r1, #32]
   dca0e:	4423      	add	r3, r4
   dca10:	f841 3f1c 	str.w	r3, [r1, #28]!
   dca14:	9b01      	ldr	r3, [sp, #4]
   dca16:	4299      	cmp	r1, r3
   dca18:	d1a2      	bne.n	dc960 <__tzcalc_limits+0x74>
   dca1a:	69c3      	ldr	r3, [r0, #28]
   dca1c:	6b82      	ldr	r2, [r0, #56]	; 0x38
   dca1e:	4293      	cmp	r3, r2
   dca20:	bfac      	ite	ge
   dca22:	2300      	movge	r3, #0
   dca24:	2301      	movlt	r3, #1
   dca26:	6003      	str	r3, [r0, #0]
   dca28:	2001      	movs	r0, #1
   dca2a:	e000      	b.n	dca2e <__tzcalc_limits+0x142>
   dca2c:	2000      	movs	r0, #0
   dca2e:	b003      	add	sp, #12
   dca30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dca34:	000dd894 	.word	0x000dd894
   dca38:	00015180 	.word	0x00015180

000dca3c <__tz_lock>:
   dca3c:	4770      	bx	lr

000dca3e <__tz_unlock>:
   dca3e:	4770      	bx	lr

000dca40 <_tzset_unlocked>:
   dca40:	4b01      	ldr	r3, [pc, #4]	; (dca48 <_tzset_unlocked+0x8>)
   dca42:	6818      	ldr	r0, [r3, #0]
   dca44:	f000 b802 	b.w	dca4c <_tzset_unlocked_r>
   dca48:	2003d7a8 	.word	0x2003d7a8

000dca4c <_tzset_unlocked_r>:
   dca4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dca50:	b08d      	sub	sp, #52	; 0x34
   dca52:	4607      	mov	r7, r0
   dca54:	f000 f9c2 	bl	dcddc <__gettzinfo>
   dca58:	49b0      	ldr	r1, [pc, #704]	; (dcd1c <_tzset_unlocked_r+0x2d0>)
   dca5a:	4eb1      	ldr	r6, [pc, #708]	; (dcd20 <_tzset_unlocked_r+0x2d4>)
   dca5c:	4604      	mov	r4, r0
   dca5e:	4638      	mov	r0, r7
   dca60:	f000 f9b4 	bl	dcdcc <_getenv_r>
   dca64:	4605      	mov	r5, r0
   dca66:	b960      	cbnz	r0, dca82 <_tzset_unlocked_r+0x36>
   dca68:	4bae      	ldr	r3, [pc, #696]	; (dcd24 <_tzset_unlocked_r+0x2d8>)
   dca6a:	4aaf      	ldr	r2, [pc, #700]	; (dcd28 <_tzset_unlocked_r+0x2dc>)
   dca6c:	6018      	str	r0, [r3, #0]
   dca6e:	4baf      	ldr	r3, [pc, #700]	; (dcd2c <_tzset_unlocked_r+0x2e0>)
   dca70:	6018      	str	r0, [r3, #0]
   dca72:	4baf      	ldr	r3, [pc, #700]	; (dcd30 <_tzset_unlocked_r+0x2e4>)
   dca74:	6830      	ldr	r0, [r6, #0]
   dca76:	601a      	str	r2, [r3, #0]
   dca78:	605a      	str	r2, [r3, #4]
   dca7a:	f7fc fa41 	bl	d8f00 <free>
   dca7e:	6035      	str	r5, [r6, #0]
   dca80:	e148      	b.n	dcd14 <_tzset_unlocked_r+0x2c8>
   dca82:	6831      	ldr	r1, [r6, #0]
   dca84:	b979      	cbnz	r1, dcaa6 <_tzset_unlocked_r+0x5a>
   dca86:	6830      	ldr	r0, [r6, #0]
   dca88:	f7fc fa3a 	bl	d8f00 <free>
   dca8c:	4628      	mov	r0, r5
   dca8e:	f7ff fe65 	bl	dc75c <strlen>
   dca92:	1c41      	adds	r1, r0, #1
   dca94:	4638      	mov	r0, r7
   dca96:	f7fc fa73 	bl	d8f80 <_malloc_r>
   dca9a:	6030      	str	r0, [r6, #0]
   dca9c:	b148      	cbz	r0, dcab2 <_tzset_unlocked_r+0x66>
   dca9e:	4629      	mov	r1, r5
   dcaa0:	f7ff f940 	bl	dbd24 <strcpy>
   dcaa4:	e005      	b.n	dcab2 <_tzset_unlocked_r+0x66>
   dcaa6:	f7ff f933 	bl	dbd10 <strcmp>
   dcaaa:	2800      	cmp	r0, #0
   dcaac:	f000 8132 	beq.w	dcd14 <_tzset_unlocked_r+0x2c8>
   dcab0:	e7e9      	b.n	dca86 <_tzset_unlocked_r+0x3a>
   dcab2:	782b      	ldrb	r3, [r5, #0]
   dcab4:	4a9f      	ldr	r2, [pc, #636]	; (dcd34 <_tzset_unlocked_r+0x2e8>)
   dcab6:	49a0      	ldr	r1, [pc, #640]	; (dcd38 <_tzset_unlocked_r+0x2ec>)
   dcab8:	2b3a      	cmp	r3, #58	; 0x3a
   dcaba:	bf08      	it	eq
   dcabc:	3501      	addeq	r5, #1
   dcabe:	ae0a      	add	r6, sp, #40	; 0x28
   dcac0:	4633      	mov	r3, r6
   dcac2:	4628      	mov	r0, r5
   dcac4:	f7fc fa3c 	bl	d8f40 <siscanf>
   dcac8:	2800      	cmp	r0, #0
   dcaca:	f340 8123 	ble.w	dcd14 <_tzset_unlocked_r+0x2c8>
   dcace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dcad0:	18ef      	adds	r7, r5, r3
   dcad2:	5ceb      	ldrb	r3, [r5, r3]
   dcad4:	2b2d      	cmp	r3, #45	; 0x2d
   dcad6:	d103      	bne.n	dcae0 <_tzset_unlocked_r+0x94>
   dcad8:	3701      	adds	r7, #1
   dcada:	f04f 35ff 	mov.w	r5, #4294967295
   dcade:	e003      	b.n	dcae8 <_tzset_unlocked_r+0x9c>
   dcae0:	2b2b      	cmp	r3, #43	; 0x2b
   dcae2:	bf08      	it	eq
   dcae4:	3701      	addeq	r7, #1
   dcae6:	2501      	movs	r5, #1
   dcae8:	f10d 0a20 	add.w	sl, sp, #32
   dcaec:	f10d 0b1e 	add.w	fp, sp, #30
   dcaf0:	f04f 0800 	mov.w	r8, #0
   dcaf4:	9603      	str	r6, [sp, #12]
   dcaf6:	f8cd a008 	str.w	sl, [sp, #8]
   dcafa:	9601      	str	r6, [sp, #4]
   dcafc:	f8cd b000 	str.w	fp, [sp]
   dcb00:	4633      	mov	r3, r6
   dcb02:	aa07      	add	r2, sp, #28
   dcb04:	498d      	ldr	r1, [pc, #564]	; (dcd3c <_tzset_unlocked_r+0x2f0>)
   dcb06:	f8ad 801e 	strh.w	r8, [sp, #30]
   dcb0a:	4638      	mov	r0, r7
   dcb0c:	f8ad 8020 	strh.w	r8, [sp, #32]
   dcb10:	f7fc fa16 	bl	d8f40 <siscanf>
   dcb14:	4540      	cmp	r0, r8
   dcb16:	f340 80fd 	ble.w	dcd14 <_tzset_unlocked_r+0x2c8>
   dcb1a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dcb1e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dcb22:	f8df 9224 	ldr.w	r9, [pc, #548]	; dcd48 <_tzset_unlocked_r+0x2fc>
   dcb26:	213c      	movs	r1, #60	; 0x3c
   dcb28:	fb01 3302 	mla	r3, r1, r2, r3
   dcb2c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dcb30:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dcb34:	fb01 3302 	mla	r3, r1, r2, r3
   dcb38:	435d      	muls	r5, r3
   dcb3a:	6225      	str	r5, [r4, #32]
   dcb3c:	4d7c      	ldr	r5, [pc, #496]	; (dcd30 <_tzset_unlocked_r+0x2e4>)
   dcb3e:	4b7d      	ldr	r3, [pc, #500]	; (dcd34 <_tzset_unlocked_r+0x2e8>)
   dcb40:	602b      	str	r3, [r5, #0]
   dcb42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dcb44:	497c      	ldr	r1, [pc, #496]	; (dcd38 <_tzset_unlocked_r+0x2ec>)
   dcb46:	441f      	add	r7, r3
   dcb48:	464a      	mov	r2, r9
   dcb4a:	4633      	mov	r3, r6
   dcb4c:	4638      	mov	r0, r7
   dcb4e:	f7fc f9f7 	bl	d8f40 <siscanf>
   dcb52:	4540      	cmp	r0, r8
   dcb54:	dc08      	bgt.n	dcb68 <_tzset_unlocked_r+0x11c>
   dcb56:	682b      	ldr	r3, [r5, #0]
   dcb58:	606b      	str	r3, [r5, #4]
   dcb5a:	4b72      	ldr	r3, [pc, #456]	; (dcd24 <_tzset_unlocked_r+0x2d8>)
   dcb5c:	6a22      	ldr	r2, [r4, #32]
   dcb5e:	601a      	str	r2, [r3, #0]
   dcb60:	4b72      	ldr	r3, [pc, #456]	; (dcd2c <_tzset_unlocked_r+0x2e0>)
   dcb62:	f8c3 8000 	str.w	r8, [r3]
   dcb66:	e0d5      	b.n	dcd14 <_tzset_unlocked_r+0x2c8>
   dcb68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dcb6a:	f8c5 9004 	str.w	r9, [r5, #4]
   dcb6e:	18fd      	adds	r5, r7, r3
   dcb70:	5cfb      	ldrb	r3, [r7, r3]
   dcb72:	2b2d      	cmp	r3, #45	; 0x2d
   dcb74:	d103      	bne.n	dcb7e <_tzset_unlocked_r+0x132>
   dcb76:	3501      	adds	r5, #1
   dcb78:	f04f 37ff 	mov.w	r7, #4294967295
   dcb7c:	e003      	b.n	dcb86 <_tzset_unlocked_r+0x13a>
   dcb7e:	2b2b      	cmp	r3, #43	; 0x2b
   dcb80:	bf08      	it	eq
   dcb82:	3501      	addeq	r5, #1
   dcb84:	2701      	movs	r7, #1
   dcb86:	2300      	movs	r3, #0
   dcb88:	f8ad 301c 	strh.w	r3, [sp, #28]
   dcb8c:	f8ad 301e 	strh.w	r3, [sp, #30]
   dcb90:	f8ad 3020 	strh.w	r3, [sp, #32]
   dcb94:	930a      	str	r3, [sp, #40]	; 0x28
   dcb96:	9603      	str	r6, [sp, #12]
   dcb98:	f8cd a008 	str.w	sl, [sp, #8]
   dcb9c:	9601      	str	r6, [sp, #4]
   dcb9e:	f8cd b000 	str.w	fp, [sp]
   dcba2:	4633      	mov	r3, r6
   dcba4:	aa07      	add	r2, sp, #28
   dcba6:	4965      	ldr	r1, [pc, #404]	; (dcd3c <_tzset_unlocked_r+0x2f0>)
   dcba8:	4628      	mov	r0, r5
   dcbaa:	f7fc f9c9 	bl	d8f40 <siscanf>
   dcbae:	2800      	cmp	r0, #0
   dcbb0:	dc04      	bgt.n	dcbbc <_tzset_unlocked_r+0x170>
   dcbb2:	6a23      	ldr	r3, [r4, #32]
   dcbb4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   dcbb8:	63e3      	str	r3, [r4, #60]	; 0x3c
   dcbba:	e00e      	b.n	dcbda <_tzset_unlocked_r+0x18e>
   dcbbc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dcbc0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dcbc4:	213c      	movs	r1, #60	; 0x3c
   dcbc6:	fb01 3302 	mla	r3, r1, r2, r3
   dcbca:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dcbce:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dcbd2:	fb01 3302 	mla	r3, r1, r2, r3
   dcbd6:	435f      	muls	r7, r3
   dcbd8:	63e7      	str	r7, [r4, #60]	; 0x3c
   dcbda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dcbdc:	4627      	mov	r7, r4
   dcbde:	441d      	add	r5, r3
   dcbe0:	f04f 0900 	mov.w	r9, #0
   dcbe4:	782b      	ldrb	r3, [r5, #0]
   dcbe6:	2b2c      	cmp	r3, #44	; 0x2c
   dcbe8:	bf08      	it	eq
   dcbea:	3501      	addeq	r5, #1
   dcbec:	f895 8000 	ldrb.w	r8, [r5]
   dcbf0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   dcbf4:	d126      	bne.n	dcc44 <_tzset_unlocked_r+0x1f8>
   dcbf6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   dcbfa:	9302      	str	r3, [sp, #8]
   dcbfc:	ab09      	add	r3, sp, #36	; 0x24
   dcbfe:	9300      	str	r3, [sp, #0]
   dcc00:	9603      	str	r6, [sp, #12]
   dcc02:	9601      	str	r6, [sp, #4]
   dcc04:	4633      	mov	r3, r6
   dcc06:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   dcc0a:	494d      	ldr	r1, [pc, #308]	; (dcd40 <_tzset_unlocked_r+0x2f4>)
   dcc0c:	4628      	mov	r0, r5
   dcc0e:	f7fc f997 	bl	d8f40 <siscanf>
   dcc12:	2803      	cmp	r0, #3
   dcc14:	d17e      	bne.n	dcd14 <_tzset_unlocked_r+0x2c8>
   dcc16:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   dcc1a:	1e4b      	subs	r3, r1, #1
   dcc1c:	2b0b      	cmp	r3, #11
   dcc1e:	d879      	bhi.n	dcd14 <_tzset_unlocked_r+0x2c8>
   dcc20:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   dcc24:	1e53      	subs	r3, r2, #1
   dcc26:	2b04      	cmp	r3, #4
   dcc28:	d874      	bhi.n	dcd14 <_tzset_unlocked_r+0x2c8>
   dcc2a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   dcc2e:	2b06      	cmp	r3, #6
   dcc30:	d870      	bhi.n	dcd14 <_tzset_unlocked_r+0x2c8>
   dcc32:	f887 8008 	strb.w	r8, [r7, #8]
   dcc36:	60f9      	str	r1, [r7, #12]
   dcc38:	613a      	str	r2, [r7, #16]
   dcc3a:	617b      	str	r3, [r7, #20]
   dcc3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dcc3e:	eb05 0803 	add.w	r8, r5, r3
   dcc42:	e02a      	b.n	dcc9a <_tzset_unlocked_r+0x24e>
   dcc44:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   dcc48:	bf06      	itte	eq
   dcc4a:	3501      	addeq	r5, #1
   dcc4c:	4643      	moveq	r3, r8
   dcc4e:	2344      	movne	r3, #68	; 0x44
   dcc50:	220a      	movs	r2, #10
   dcc52:	a90b      	add	r1, sp, #44	; 0x2c
   dcc54:	4628      	mov	r0, r5
   dcc56:	9305      	str	r3, [sp, #20]
   dcc58:	f7ff fe2e 	bl	dc8b8 <strtoul>
   dcc5c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   dcc60:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   dcc64:	4545      	cmp	r5, r8
   dcc66:	9b05      	ldr	r3, [sp, #20]
   dcc68:	d114      	bne.n	dcc94 <_tzset_unlocked_r+0x248>
   dcc6a:	234d      	movs	r3, #77	; 0x4d
   dcc6c:	f1b9 0f00 	cmp.w	r9, #0
   dcc70:	d107      	bne.n	dcc82 <_tzset_unlocked_r+0x236>
   dcc72:	7223      	strb	r3, [r4, #8]
   dcc74:	2303      	movs	r3, #3
   dcc76:	60e3      	str	r3, [r4, #12]
   dcc78:	2302      	movs	r3, #2
   dcc7a:	6123      	str	r3, [r4, #16]
   dcc7c:	f8c4 9014 	str.w	r9, [r4, #20]
   dcc80:	e00b      	b.n	dcc9a <_tzset_unlocked_r+0x24e>
   dcc82:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   dcc86:	230b      	movs	r3, #11
   dcc88:	62a3      	str	r3, [r4, #40]	; 0x28
   dcc8a:	2301      	movs	r3, #1
   dcc8c:	62e3      	str	r3, [r4, #44]	; 0x2c
   dcc8e:	2300      	movs	r3, #0
   dcc90:	6323      	str	r3, [r4, #48]	; 0x30
   dcc92:	e002      	b.n	dcc9a <_tzset_unlocked_r+0x24e>
   dcc94:	b280      	uxth	r0, r0
   dcc96:	723b      	strb	r3, [r7, #8]
   dcc98:	6178      	str	r0, [r7, #20]
   dcc9a:	2302      	movs	r3, #2
   dcc9c:	f8ad 301c 	strh.w	r3, [sp, #28]
   dcca0:	2300      	movs	r3, #0
   dcca2:	f8ad 301e 	strh.w	r3, [sp, #30]
   dcca6:	f8ad 3020 	strh.w	r3, [sp, #32]
   dccaa:	930a      	str	r3, [sp, #40]	; 0x28
   dccac:	f898 3000 	ldrb.w	r3, [r8]
   dccb0:	2b2f      	cmp	r3, #47	; 0x2f
   dccb2:	d10b      	bne.n	dcccc <_tzset_unlocked_r+0x280>
   dccb4:	9603      	str	r6, [sp, #12]
   dccb6:	f8cd a008 	str.w	sl, [sp, #8]
   dccba:	9601      	str	r6, [sp, #4]
   dccbc:	f8cd b000 	str.w	fp, [sp]
   dccc0:	4633      	mov	r3, r6
   dccc2:	aa07      	add	r2, sp, #28
   dccc4:	491f      	ldr	r1, [pc, #124]	; (dcd44 <_tzset_unlocked_r+0x2f8>)
   dccc6:	4640      	mov	r0, r8
   dccc8:	f7fc f93a 	bl	d8f40 <siscanf>
   dcccc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dccd0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dccd4:	213c      	movs	r1, #60	; 0x3c
   dccd6:	fb01 3302 	mla	r3, r1, r2, r3
   dccda:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dccde:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dcce2:	fb01 3302 	mla	r3, r1, r2, r3
   dcce6:	61bb      	str	r3, [r7, #24]
   dcce8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   dccea:	f109 0901 	add.w	r9, r9, #1
   dccee:	f1b9 0f02 	cmp.w	r9, #2
   dccf2:	4445      	add	r5, r8
   dccf4:	f107 071c 	add.w	r7, r7, #28
   dccf8:	f47f af74 	bne.w	dcbe4 <_tzset_unlocked_r+0x198>
   dccfc:	6860      	ldr	r0, [r4, #4]
   dccfe:	f7ff fdf5 	bl	dc8ec <__tzcalc_limits>
   dcd02:	4b08      	ldr	r3, [pc, #32]	; (dcd24 <_tzset_unlocked_r+0x2d8>)
   dcd04:	6a22      	ldr	r2, [r4, #32]
   dcd06:	601a      	str	r2, [r3, #0]
   dcd08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   dcd0a:	1a9b      	subs	r3, r3, r2
   dcd0c:	4a07      	ldr	r2, [pc, #28]	; (dcd2c <_tzset_unlocked_r+0x2e0>)
   dcd0e:	bf18      	it	ne
   dcd10:	2301      	movne	r3, #1
   dcd12:	6013      	str	r3, [r2, #0]
   dcd14:	b00d      	add	sp, #52	; 0x34
   dcd16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dcd1a:	bf00      	nop
   dcd1c:	000ddb7c 	.word	0x000ddb7c
   dcd20:	2003e4fc 	.word	0x2003e4fc
   dcd24:	2003e504 	.word	0x2003e504
   dcd28:	000ddb7f 	.word	0x000ddb7f
   dcd2c:	2003e500 	.word	0x2003e500
   dcd30:	2003d7ac 	.word	0x2003d7ac
   dcd34:	2003e4ef 	.word	0x2003e4ef
   dcd38:	000ddb83 	.word	0x000ddb83
   dcd3c:	000ddba6 	.word	0x000ddba6
   dcd40:	000ddb92 	.word	0x000ddb92
   dcd44:	000ddba5 	.word	0x000ddba5
   dcd48:	2003e4e4 	.word	0x2003e4e4

000dcd4c <abs>:
   dcd4c:	2800      	cmp	r0, #0
   dcd4e:	bfb8      	it	lt
   dcd50:	4240      	neglt	r0, r0
   dcd52:	4770      	bx	lr

000dcd54 <_findenv_r>:
   dcd54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dcd58:	4607      	mov	r7, r0
   dcd5a:	468b      	mov	fp, r1
   dcd5c:	4690      	mov	r8, r2
   dcd5e:	f000 f8dd 	bl	dcf1c <__env_lock>
   dcd62:	4b19      	ldr	r3, [pc, #100]	; (dcdc8 <_findenv_r+0x74>)
   dcd64:	681d      	ldr	r5, [r3, #0]
   dcd66:	469a      	mov	sl, r3
   dcd68:	b13d      	cbz	r5, dcd7a <_findenv_r+0x26>
   dcd6a:	465c      	mov	r4, fp
   dcd6c:	4623      	mov	r3, r4
   dcd6e:	f813 2b01 	ldrb.w	r2, [r3], #1
   dcd72:	b142      	cbz	r2, dcd86 <_findenv_r+0x32>
   dcd74:	2a3d      	cmp	r2, #61	; 0x3d
   dcd76:	461c      	mov	r4, r3
   dcd78:	d1f8      	bne.n	dcd6c <_findenv_r+0x18>
   dcd7a:	4638      	mov	r0, r7
   dcd7c:	f000 f8cf 	bl	dcf1e <__env_unlock>
   dcd80:	2000      	movs	r0, #0
   dcd82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dcd86:	ebcb 0404 	rsb	r4, fp, r4
   dcd8a:	46a9      	mov	r9, r5
   dcd8c:	f859 0b04 	ldr.w	r0, [r9], #4
   dcd90:	2800      	cmp	r0, #0
   dcd92:	d0f2      	beq.n	dcd7a <_findenv_r+0x26>
   dcd94:	4622      	mov	r2, r4
   dcd96:	4659      	mov	r1, fp
   dcd98:	f7ff fce8 	bl	dc76c <strncmp>
   dcd9c:	b988      	cbnz	r0, dcdc2 <_findenv_r+0x6e>
   dcd9e:	f859 3c04 	ldr.w	r3, [r9, #-4]
   dcda2:	191e      	adds	r6, r3, r4
   dcda4:	5d1b      	ldrb	r3, [r3, r4]
   dcda6:	2b3d      	cmp	r3, #61	; 0x3d
   dcda8:	d10b      	bne.n	dcdc2 <_findenv_r+0x6e>
   dcdaa:	f8da 3000 	ldr.w	r3, [sl]
   dcdae:	1aed      	subs	r5, r5, r3
   dcdb0:	10ad      	asrs	r5, r5, #2
   dcdb2:	4638      	mov	r0, r7
   dcdb4:	f8c8 5000 	str.w	r5, [r8]
   dcdb8:	f000 f8b1 	bl	dcf1e <__env_unlock>
   dcdbc:	1c70      	adds	r0, r6, #1
   dcdbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dcdc2:	464d      	mov	r5, r9
   dcdc4:	e7e1      	b.n	dcd8a <_findenv_r+0x36>
   dcdc6:	bf00      	nop
   dcdc8:	2003d7f4 	.word	0x2003d7f4

000dcdcc <_getenv_r>:
   dcdcc:	b507      	push	{r0, r1, r2, lr}
   dcdce:	aa01      	add	r2, sp, #4
   dcdd0:	f7ff ffc0 	bl	dcd54 <_findenv_r>
   dcdd4:	b003      	add	sp, #12
   dcdd6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dcddc <__gettzinfo>:
   dcddc:	4800      	ldr	r0, [pc, #0]	; (dcde0 <__gettzinfo+0x4>)
   dcdde:	4770      	bx	lr
   dcde0:	2003d7b4 	.word	0x2003d7b4

000dcde4 <gmtime_r>:
   dcde4:	6802      	ldr	r2, [r0, #0]
   dcde6:	4b47      	ldr	r3, [pc, #284]	; (dcf04 <gmtime_r+0x120>)
   dcde8:	b5f0      	push	{r4, r5, r6, r7, lr}
   dcdea:	fb92 f4f3 	sdiv	r4, r2, r3
   dcdee:	fb03 2214 	mls	r2, r3, r4, r2
   dcdf2:	2a00      	cmp	r2, #0
   dcdf4:	bfbc      	itt	lt
   dcdf6:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   dcdfa:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   dcdfe:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   dce02:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   dce06:	fb92 f3f0 	sdiv	r3, r2, r0
   dce0a:	fb00 2213 	mls	r2, r0, r3, r2
   dce0e:	f04f 003c 	mov.w	r0, #60	; 0x3c
   dce12:	bfac      	ite	ge
   dce14:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   dce18:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   dce1c:	608b      	str	r3, [r1, #8]
   dce1e:	fb92 f3f0 	sdiv	r3, r2, r0
   dce22:	fb00 2213 	mls	r2, r0, r3, r2
   dce26:	604b      	str	r3, [r1, #4]
   dce28:	600a      	str	r2, [r1, #0]
   dce2a:	2307      	movs	r3, #7
   dce2c:	1ce2      	adds	r2, r4, #3
   dce2e:	fb92 f3f3 	sdiv	r3, r2, r3
   dce32:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dce36:	1ad3      	subs	r3, r2, r3
   dce38:	618b      	str	r3, [r1, #24]
   dce3a:	4b33      	ldr	r3, [pc, #204]	; (dcf08 <gmtime_r+0x124>)
   dce3c:	4d33      	ldr	r5, [pc, #204]	; (dcf0c <gmtime_r+0x128>)
   dce3e:	fb94 f5f5 	sdiv	r5, r4, r5
   dce42:	fb03 4405 	mla	r4, r3, r5, r4
   dce46:	f648 62ac 	movw	r2, #36524	; 0x8eac
   dce4a:	fbb4 f2f2 	udiv	r2, r4, r2
   dce4e:	4422      	add	r2, r4
   dce50:	f240 57b4 	movw	r7, #1460	; 0x5b4
   dce54:	fbb4 f3f7 	udiv	r3, r4, r7
   dce58:	1ad2      	subs	r2, r2, r3
   dce5a:	482d      	ldr	r0, [pc, #180]	; (dcf10 <gmtime_r+0x12c>)
   dce5c:	fbb4 f0f0 	udiv	r0, r4, r0
   dce60:	f648 6694 	movw	r6, #36500	; 0x8e94
   dce64:	1a13      	subs	r3, r2, r0
   dce66:	fbb3 f6f6 	udiv	r6, r3, r6
   dce6a:	4434      	add	r4, r6
   dce6c:	f240 126d 	movw	r2, #365	; 0x16d
   dce70:	fbb3 f0f2 	udiv	r0, r3, r2
   dce74:	fbb3 f3f7 	udiv	r3, r3, r7
   dce78:	1ae3      	subs	r3, r4, r3
   dce7a:	fb02 3310 	mls	r3, r2, r0, r3
   dce7e:	2499      	movs	r4, #153	; 0x99
   dce80:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   dce84:	3202      	adds	r2, #2
   dce86:	fbb2 f2f4 	udiv	r2, r2, r4
   dce8a:	2a0a      	cmp	r2, #10
   dce8c:	fb04 f402 	mul.w	r4, r4, r2
   dce90:	f104 0602 	add.w	r6, r4, #2
   dce94:	f04f 0405 	mov.w	r4, #5
   dce98:	fbb6 f4f4 	udiv	r4, r6, r4
   dce9c:	bf34      	ite	cc
   dce9e:	2602      	movcc	r6, #2
   dcea0:	f06f 0609 	mvncs.w	r6, #9
   dcea4:	4416      	add	r6, r2
   dcea6:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dceaa:	fb02 0505 	mla	r5, r2, r5, r0
   dceae:	1c5f      	adds	r7, r3, #1
   dceb0:	2e01      	cmp	r6, #1
   dceb2:	bf98      	it	ls
   dceb4:	3501      	addls	r5, #1
   dceb6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   dceba:	eba7 0704 	sub.w	r7, r7, r4
   dcebe:	d302      	bcc.n	dcec6 <gmtime_r+0xe2>
   dcec0:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   dcec4:	e014      	b.n	dcef0 <gmtime_r+0x10c>
   dcec6:	0782      	lsls	r2, r0, #30
   dcec8:	d105      	bne.n	dced6 <gmtime_r+0xf2>
   dceca:	2464      	movs	r4, #100	; 0x64
   dcecc:	fbb0 f2f4 	udiv	r2, r0, r4
   dced0:	fb04 0212 	mls	r2, r4, r2, r0
   dced4:	b94a      	cbnz	r2, dceea <gmtime_r+0x106>
   dced6:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dceda:	fbb0 f4f2 	udiv	r4, r0, r2
   dcede:	fb02 0014 	mls	r0, r2, r4, r0
   dcee2:	fab0 f280 	clz	r2, r0
   dcee6:	0952      	lsrs	r2, r2, #5
   dcee8:	e000      	b.n	dceec <gmtime_r+0x108>
   dceea:	2201      	movs	r2, #1
   dceec:	333b      	adds	r3, #59	; 0x3b
   dceee:	441a      	add	r2, r3
   dcef0:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   dcef4:	2300      	movs	r3, #0
   dcef6:	61ca      	str	r2, [r1, #28]
   dcef8:	614d      	str	r5, [r1, #20]
   dcefa:	610e      	str	r6, [r1, #16]
   dcefc:	60cf      	str	r7, [r1, #12]
   dcefe:	620b      	str	r3, [r1, #32]
   dcf00:	4608      	mov	r0, r1
   dcf02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dcf04:	00015180 	.word	0x00015180
   dcf08:	fffdc54f 	.word	0xfffdc54f
   dcf0c:	00023ab1 	.word	0x00023ab1
   dcf10:	00023ab0 	.word	0x00023ab0

000dcf14 <labs>:
   dcf14:	2800      	cmp	r0, #0
   dcf16:	bfb8      	it	lt
   dcf18:	4240      	neglt	r0, r0
   dcf1a:	4770      	bx	lr

000dcf1c <__env_lock>:
   dcf1c:	4770      	bx	lr

000dcf1e <__env_unlock>:
   dcf1e:	4770      	bx	lr

000dcf20 <dynalib_user>:
   dcf20:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   dcf30:	0000 0000 7055 6f6c 6461 6e69 3a67 0020     ....Uploading: .
   dcf40:	4f20 004b 4420 4c45 4520 5252 524f 2000      OK. DEL ERROR. 
   dcf50:	514d 5454 4520 5252 524f 5300 5245 4149     MQTT ERROR.SERIA
   dcf60:	204c 4144 4154 5320 5445 4954 474e 2053     L DATA SETTINGS 
   dcf70:	2d2d 203e 007b 0030 0a7d 5300 5445 4954     --> {.0.}..SETTI
   dcf80:	474e 2053 4146 4c49 4445 5400 4d45 4550     NGS FAILED.TEMPE
   dcf90:	4152 5554 4552 203a 4300 4820 4d55 4449     RATURE: .C HUMID
   dcfa0:	5449 3a59 0020 0025 540a 4d49 3a45 0020     ITY: .%..TIME: .
   dcfb0:	504f 5320 4154 4554 003a 4552 4f50 5452     OP STATE:.REPORT
   dcfc0:	4e49 2047 4e49 4554 5652 4c41 203a 4400     ING INTERVAL: .D
   dcfd0:	5441 2041 4552 4f53 554c 4954 4e4f 203a     ATA RESOLUTION: 
   dcfe0:	5300 5245 4149 204c 554e 424d 5245 203a     .SERIAL NUMBER: 
   dcff0:	4d00 5451 2054 5242 4b4f 5245 203a 4d00     .MQTT BROKER: .M
   dd000:	5451 2054 5242 4b4f 5245 5020 524f 3a54     QTT BROKER PORT:
   dd010:	0020 514d 5454 5520 4553 4e52 4d41 3a45      .MQTT USERNAME:
   dd020:	0020 514d 5454 5020 5341 5753 524f 3a44      .MQTT PASSWORD:
   dd030:	0020 4954 454d 4f5a 454e 203a 4900 5252      .TIMEZONE: .IRR
   dd040:	4749 5441 4f49 204e 4f48 5255 203a 5600     IGATION HOUR: .V
   dd050:	4c41 4556 4f20 4550 204e 4550 4952 444f     ALVE OPEN PERIOD
   dd060:	203a 4300 4548 4b43 5553 3a4d 0020 7953     : .CHECKSUM: .Sy
   dd070:	7473 6d65 5320 7465 6974 676e 2073 6153     stem Settings Sa
   dd080:	6576 2064 7573 6363 7365 6673 6c75 796c     ved successfully
   dd090:	5400 7268 7365 6f68 646c 5320 7465 6974     .Threshold Setti
   dd0a0:	676e 2073 6153 6576 2064 7573 6363 7365     ngs Saved succes
   dd0b0:	6673 6c75 796c 5200 4345 4945 4556 2044     sfully.RECEIVED 
   dd0c0:	534d 3a47 0020 4d0a 5345 4153 4547 5420     MSG: ..MESSAGE T
   dd0d0:	5059 3a45 0020 3434 3500 0035 4c43 4549     YPE: .44.55.CLIE
   dd0e0:	544e 4e20 4d41 3a45 0020 5550 4c42 5349     NT NAME: .PUBLIS
   dd0f0:	2048 4146 4c49 4445 6600 7261 736d 6968     H FAILED.farmshi
   dd100:	6c65 2e64 6c69 756c 696d 756e 676d 6572     eld.illuminumgre
   dd110:	6e65 6f68 7375 7365 632e 6d6f 0a00 6544     enhouses.com..De
   dd120:	6976 6563 4920 3a44 0020 540a 7365 6974     vice ID: ..Testi
   dd130:	676e 4520 5045 4f52 3a4d 0a00 7250 7365     ng EEPROM:..Pres
   dd140:	2073 7562 7474 6e6f 6620 726f 203a 2000     s button for: . 
   dd150:	6553 6f63 646e 0073 540a 7365 6974 676e     Seconds..Testing
   dd160:	4220 7475 6f74 3a6e 0a00 6554 7473 6e69      Button:..Testin
   dd170:	2067 6156 766c 3a65 0a00 6554 7473 6e69     g Valve:..Testin
   dd180:	2067 4453 4320 7261 3a64 0a00 6554 7473     g SD Card:..Test
   dd190:	6e69 2067 6152 6964 3a6f 0a00 6e55 6e6b     ing Radio:..Unkn
   dd1a0:	776f 206e 6f63 6d6d 6e61 0064 5355 4e49     own command.USIN
   dd1b0:	2047 4544 4146 4c55 2054 4553 5454 4e49     G DEFAULT SETTIN
   dd1c0:	5347 5500 4953 474e 5320 5445 4954 474e     GS.USING SETTING
   dd1d0:	2053 5246 4d4f 4d20 4d45 524f 0059 5355     S FROM MEMORY.US
   dd1e0:	4e49 2047 4544 4146 4c55 2054 4854 4552     ING DEFAULT THRE
   dd1f0:	4853 4c4f 5344 5500 4953 474e 5420 5248     SHOLDS.USING THR
   dd200:	5345 4f48 444c 2053 5246 4d4f 4d20 4d45     ESHOLDS FROM MEM
   dd210:	524f 0059 6574 7473 622e 6f72 656b 2e72     ORY.test.broker.
   dd220:	6f63 006d                                   com.

000dd224 <_ZTV5Timer>:
	...
   dd22c:	5615 000d 565d 000d 5535 000d 5249 4952     .V..]V..5U..IRRI
   dd23c:	4147 4954 4e4f 5420 4d49 2045 5453 5241     GATION TIME STAR
   dd24c:	4554 3a44 0020 4552 4553 5454 4e49 2047     TED: .RESETTING 
   dd25c:	4157 4554 2052 4150 4152 534d 203a 0000     WATER PARAMS: ..

000dd26c <_ZTVN8particle13__SPISettingsE>:
	...
   dd274:	5a0d 000d                                   .Z..

000dd278 <_ZTV4File>:
	...
   dd280:	5a0b 000d 5aa3 000d 5a7d 000d 5a71 000d     .Z...Z..}Z..qZ..
   dd290:	59ed 000d 5ae7 000d 5a6b 000d 5a65 000d     .Y...Z..kZ..eZ..

000dd2a0 <_ZTV6SdFile>:
	...
   dd2a8:	5a09 000d 5a95 000d 5ab1 000d 5a77 000d     .Z...Z...Z..wZ..
   dd2b8:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   dd2c8:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   dd2d8:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   dd2e8:	676e 2073 7325 6c25 2075 7325 4d20 444f     ngs %s%lu %s MOD
   dd2f8:	2545 3e64 2500 3230 2558 3230 2558 3230     E%d>.%02X%02X%02
   dd308:	2558 3230 2e58 4f4c 0047 6153 6976 676e     X%02X.LOG.Saving
   dd318:	203a 2000 6953 657a 203a 2f00 5200 4d46     : . Size: ./.RFM
   dd328:	3936 4920 494e 2054 5245 4f52 0052 454e     69 INIT ERROR.NE
   dd338:	2057 4853 4549 444c 5220 2046 4449 203a     W SHIELD RF ID: 
   dd348:	4e00 5745 4e20 5445 4f57 4b52 4920 3a44     .NEW NETWORK ID:
   dd358:	0020 4749 2d48 4652 364d 4839 5743 4b2d      .IGH-RFM69HCW-K
   dd368:	5945 3c00 4554 5453 003e 543c 5345 3a54     EY.<TEST>.<TEST:
   dd378:	4b4f 003e 0400 514d 5454 0004 4d06 4951     OK>...MQTT...MQI
   dd388:	6473 0370                                   sdp.

000dd38c <_ZTV5RFM69>:
	...
   dd394:	84b9 000d                                   ....

000dd398 <_ZTVN5spark13EthernetClassE>:
	...
   dd3a0:	8fff 000d 8ff5 000d 8feb 000d 8fe1 000d     ................
   dd3b0:	8fd5 000d 8fc9 000d 8fbd 000d 8fb5 000d     ................
   dd3c0:	8fab 000d 8fa1 000d aa17 000d               ............

000dd3cc <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dd3cc:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
   dd3dc:	002e 6e69 0066 6162 6475 5300 7265 6169     ..inf.baud.Seria
   dd3ec:	006c 6553 6972 6c61 0031 7974 6570 7000     l.Serial1.type.p
   dd3fc:	7261 6d61 6300 646d 6900 0064 6e68 0064     aram.cmd.id.hnd.
   dd40c:	7473 6d72 6600 6c69 0074 766c 006c 6461     strm.filt.lvl.ad
   dd41c:	4864 6e61 6c64 7265 7200 6d65 766f 4865     dHandler.removeH
   dd42c:	6e61 6c64 7265 6500 756e 486d 6e61 6c64     andler.enumHandl
   dd43c:	7265 0073 534a 4e4f 7453 6572 6d61 6f4c     ers.JSONStreamLo
   dd44c:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
   dd45c:	7530 0020 205d 2c00 0020 2928 203a 2000     0u .] ., .(): . 
   dd46c:	005b 6f63 6564 3d20 0020 6925 6400 7465     [.code = .%i.det
   dd47c:	6961 736c 3d20 0020 0a0d 6c00 006e 6e66     ails = ....ln.fn
   dd48c:	6300 646f 0065 6564 6174 6c69 6e00 6e6f     .code.detail.non
   dd49c:	0065 7274 6361 0065 6e69 6f66 7700 7261     e.trace.info.war
   dd4ac:	006e 7265 6f72 0072 6170 696e 0063 6c61     n.error.panic.al
   dd4bc:	006c 2b25 3330 3a64 3025 7532 2500 2d59     l.%+03d:%02u.%Y-
   dd4cc:	6d25 252d 5464 4825 253a 3a4d 5325 7a25     %m-%dT%H:%M:%S%z
   dd4dc:	6100 6373 6974 656d 0000 0000               .asctime....

000dd4e8 <_ZTV14CellularSignal>:
	...
   dd4f0:	5e45 000d 5e47 000d 9a05 000d 9a95 000d     E^..G^..........
   dd500:	9a09 000d 9a61 000d 9a35 000d 9b07 000d     ....a...5.......
   dd510:	fffc ffff 0000 0000 9b31 000d               ........1...

000dd51c <_ZTV9IPAddress>:
	...
   dd524:	9d3d 000d 9d2d 000d 9d2f 000d               =...-.../...

000dd530 <_ZTV9USBSerial>:
	...
   dd538:	9e55 000d 9ea5 000d 9eb3 000d 94a9 000d     U...............
   dd548:	9e91 000d 9e57 000d 9e6d 000d 9e9f 000d     ....W...m.......
   dd558:	9e83 000d 9e51 000d                         ....Q...

000dd560 <_ZTVN5spark13CellularClassE>:
	...
   dd568:	a04f 000d a045 000d a03b 000d 9ff1 000d     O...E...;.......
   dd578:	a02f 000d a023 000d a017 000d a00f 000d     /...#...........
   dd588:	a005 000d 9ffb 000d aa17 000d               ............

000dd594 <_ZTV11USARTSerial>:
	...
   dd59c:	a089 000d a0d9 000d a0e7 000d 94a9 000d     ................
   dd5ac:	a09d 000d a0bf 000d a0ab 000d a0d3 000d     ................
   dd5bc:	a08b 000d a08f 000d                         ........

000dd5c4 <_ZTV7TwoWire>:
	...
   dd5cc:	a18d 000d a1d7 000d a1af 000d a18f 000d     ................
   dd5dc:	a1b7 000d a1bf 000d a1c7 000d a1cf 000d     ................

000dd5ec <_ZTVN5spark9MeshClassE>:
	...
   dd5f4:	a305 000d a2fb 000d a2f1 000d a2e7 000d     ................
   dd604:	a2db 000d a2cf 000d a2c3 000d a2bb 000d     ................
   dd614:	a2b1 000d a2a7 000d aa17 000d               ............

000dd620 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dd628:	a4a9 000d a4af 000d a997 000d a4bd 000d     ................
   dd638:	a4ab 000d                                   ....

000dd63c <_ZTV9TCPClient>:
	...
   dd644:	60fd 000d 6131 000d a421 000d a43b 000d     .`..1a..!...;...
   dd654:	a83d 000d a58f 000d a561 000d a465 000d     =.......a...e...
   dd664:	a719 000d a615 000d a5c3 000d a80d 000d     ................
   dd674:	a467 000d a49f 000d a44d 000d a4c1 000d     g.......M.......
   dd684:	a541 000d 6977 6972 676e 7200 6365 2076     A...wiring.recv 
   dd694:	7265 6f72 2072 203d 6425 0000               error = %d..

000dd6a0 <_ZTVN5spark12NetworkClassE>:
	...
   dd6a8:	a9af 000d a9b9 000d a9c3 000d a9cd 000d     ................
   dd6b8:	a9d7 000d a9e3 000d a9ef 000d a9fb 000d     ................
   dd6c8:	aa03 000d aa0d 000d aa17 000d               ............

000dd6d4 <_ZSt7nothrow>:
	...

000dd6d5 <day_name.4725>:
   dd6d5:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dd6e5:	6972 6153 4a74                                   riSat

000dd6ea <mon_name.4726>:
   dd6ea:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dd6fa:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dd70a:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   dd71a:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   dd72a:	6425 000a                                   %d..

000dd72e <_ctype_>:
   dd72e:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dd73e:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dd74e:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dd75e:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dd76e:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dd77e:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dd78e:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dd79e:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dd7ae:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dd830 <__sf_fake_stdin>:
	...

000dd850 <__sf_fake_stdout>:
	...

000dd870 <__sf_fake_stderr>:
	...
   dd890:	0043 0000                                   C...

000dd894 <__month_lengths>:
   dd894:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   dd8a4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dd8b4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dd8c4:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   dd8d4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dd8e4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dd8f4:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
   dd904:	2d00 2500 6432 2500 322e 2f64 2e25 6432     .-.%2d.%.2d/%.2d
   dd914:	252f 322e 0064 6c25 0075 2d59 6d25 252d     /%.2d.%lu.Y-%m-%
   dd924:	0064 2a2e 0075 2e25 6433 2500 6c6c 0064     d..*u.%.3d.%lld.
   dd934:	2e25 6432 253a 322e 3a64 2e25 6432 2500     %.2d:%.2d:%.2d.%
   dd944:	302b 6c33 2564 322e 646c 4c00 5f43 4954     +03ld%.2ld.LC_TI
   dd954:	454d 4a00 6e61 4600 6265 4d00 7261 4100     ME.Jan.Feb.Mar.A
   dd964:	7270 4d00 7961 4a00 6e75 4a00 6c75 4100     pr.May.Jun.Jul.A
   dd974:	6775 5300 7065 4f00 7463 4e00 766f 4400     ug.Sep.Oct.Nov.D
   dd984:	6365 4a00 6e61 6175 7972 4600 6265 7572     ec.January.Febru
   dd994:	7261 0079 614d 6372 0068 7041 6972 006c     ary.March.April.
   dd9a4:	754a 656e 4a00 6c75 0079 7541 7567 7473     June.July.August
   dd9b4:	5300 7065 6574 626d 7265 4f00 7463 626f     .September.Octob
   dd9c4:	7265 4e00 766f 6d65 6562 0072 6544 6563     er.November.Dece
   dd9d4:	626d 7265 5300 6e75 4d00 6e6f 5400 6575     mber.Sun.Mon.Tue
   dd9e4:	5700 6465 5400 7568 4600 6972 5300 7461     .Wed.Thu.Fri.Sat
   dd9f4:	5300 6e75 6164 0079 6f4d 646e 7961 5400     .Sunday.Monday.T
   dda04:	6575 6473 7961 5700 6465 656e 6473 7961     uesday.Wednesday
   dda14:	5400 7568 7372 6164 0079 7246 6469 7961     .Thursday.Friday
   dda24:	5300 7461 7275 6164 0079 4825 253a 3a4d     .Saturday.%H:%M:
   dda34:	5325 2500 2f6d 6425 252f 0079 6125 2520     %S.%m/%d/%y.%a %
   dda44:	2062 6525 2520 3a48 4d25 253a 2053 5925     b %e %H:%M:%S %Y
   dda54:	4100 004d 4d50 2500 2061 6225 2520 2065     .AM.PM.%a %b %e 
   dda64:	4825 253a 3a4d 5325 2520 205a 5925 2500     %H:%M:%S %Z %Y.%
   dda74:	3a49 4d25 253a 2053 7025 0000               I:%M:%S %p..

000dda80 <_C_time_locale>:
   dda80:	d957 000d d95b 000d d95f 000d d963 000d     W...[..._...c...
   dda90:	d967 000d d96b 000d d96f 000d d973 000d     g...k...o...s...
   ddaa0:	d977 000d d97b 000d d97f 000d d983 000d     w...{...........
   ddab0:	d987 000d d98f 000d d998 000d d99e 000d     ................
   ddac0:	d967 000d d9a4 000d d9a9 000d d9ae 000d     g...............
   ddad0:	d9b5 000d d9bf 000d d9c7 000d d9d0 000d     ................
   ddae0:	d9d9 000d d9dd 000d d9e1 000d d9e5 000d     ................
   ddaf0:	d9e9 000d d9ed 000d d9f1 000d d9f5 000d     ................
   ddb00:	d9fc 000d da03 000d da0b 000d da15 000d     ................
   ddb10:	da1e 000d da25 000d da2e 000d da37 000d     ....%.......7...
   ddb20:	da40 000d da55 000d da58 000d da5b 000d     @...U...X...[...
   ddb30:	d987 000d d98f 000d d998 000d d99e 000d     ................
   ddb40:	d967 000d d9a4 000d d9a9 000d d9ae 000d     g...............
   ddb50:	d9b5 000d d9bf 000d d9c7 000d d9d0 000d     ................
   ddb60:	d402 000d da73 000d d486 000d d486 000d     ....s...........
   ddb70:	d486 000d d486 000d d486 000d 5a54 4700     ............TZ.G
   ddb80:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
   ddb90:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
   ddba0:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
   ddbb0:	3a6e 6825 2575 006e                         n:%hu%n.

000ddbb8 <link_const_variable_data_end>:
   ddbb8:	000d46a9 	.word	0x000d46a9
   ddbbc:	000d4f83 	.word	0x000d4f83
   ddbc0:	000d52a5 	.word	0x000d52a5
   ddbc4:	000d5335 	.word	0x000d5335
   ddbc8:	000d5505 	.word	0x000d5505
   ddbcc:	000d5965 	.word	0x000d5965
   ddbd0:	000d5d71 	.word	0x000d5d71
   ddbd4:	000d5f19 	.word	0x000d5f19
   ddbd8:	000d60c9 	.word	0x000d60c9
   ddbdc:	000d6969 	.word	0x000d6969
   ddbe0:	000d696d 	.word	0x000d696d
   ddbe4:	000d6971 	.word	0x000d6971
   ddbe8:	000d708d 	.word	0x000d708d
   ddbec:	000d7091 	.word	0x000d7091
   ddbf0:	000d7095 	.word	0x000d7095
   ddbf4:	000d70c7 	.word	0x000d70c7
   ddbf8:	000d788d 	.word	0x000d788d
   ddbfc:	000d78b1 	.word	0x000d78b1
   ddc00:	000d78b5 	.word	0x000d78b5
   ddc04:	000d7bd9 	.word	0x000d7bd9
   ddc08:	000d7bdd 	.word	0x000d7bdd
   ddc0c:	000d7be1 	.word	0x000d7be1
   ddc10:	000d811b 	.word	0x000d811b
   ddc14:	000d811f 	.word	0x000d811f
   ddc18:	000d8123 	.word	0x000d8123
   ddc1c:	000d81c9 	.word	0x000d81c9
   ddc20:	000d8851 	.word	0x000d8851
   ddc24:	000d8855 	.word	0x000d8855
   ddc28:	000d9009 	.word	0x000d9009
   ddc2c:	000d92b9 	.word	0x000d92b9
   ddc30:	000d9481 	.word	0x000d9481
   ddc34:	000d9761 	.word	0x000d9761
   ddc38:	000d99c1 	.word	0x000d99c1
   ddc3c:	000d99e9 	.word	0x000d99e9
   ddc40:	000da059 	.word	0x000da059
   ddc44:	000da3d1 	.word	0x000da3d1
   ddc48:	000daae5 	.word	0x000daae5
   ddc4c:	000dad4d 	.word	0x000dad4d
   ddc50:	000dadd1 	.word	0x000dadd1
   ddc54:	000dae95 	.word	0x000dae95
   ddc58:	000daf59 	.word	0x000daf59

000ddc5c <link_constructors_end>:
   ddc5c:	00000000 	.word	0x00000000
